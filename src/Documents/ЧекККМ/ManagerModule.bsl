#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(КассаККМ)
	|	И ЗначениеРазрешено(Контрагент, ПустаяСсылка КАК Истина)
	|	И ЗначениеРазрешено(СтруктурнаяЕдиница)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

// Подготавливает данные в формате БПО по исходным данным.
//
// Параметры:
//	Ссылка - ДокументСсылка.ЧекКККМ - чек, по которому формируются исходные данные для в формате БПО;
//	ЕстьПродукцияЕГАИС - Булево - отражает факт наличия продукции ЕГАИС;
//	ВариантЗаполненияМестаРасчетов - Число - Настройка заполнения места расчетов в фискальных данных;
//	ВариантЗаполненияКассира - Число - Настройка заполнения Кассира в фискальных данных;
//
// Возвращаемое значение:
//  ОбщиеПараметры - Структура - данные в формате БПО
//
Функция ПолучитьДанныеДляФискализации(Ссылка, ЕстьПродукцияЕГАИС = Ложь, ВариантЗаполненияМестаРасчетов = 0, ВариантЗаполненияКассира = 0) Экспорт
	
	ДокументОбъект = Ссылка.ПолучитьОбъект();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаТоваровЧека = РабочееМестоКассира.ПодготовкаДанныхДляПробитияЧекаККМ(ДокументОбъект, ЕстьПродукцияЕГАИС);
	
	ОбщиеПараметры = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека();
	ОбщиеПараметры.Вставить("ЭтоРассрочка", ДокументОбъект.ОперацияСДенежнымиСредствами И ДокументОбъект.Предоплата.Количество() > 0);
	ОбщиеПараметры.Вставить("НеПроверятьЗаполнениеАкцизныхМарок", Истина);
	
	ОбщиеПараметры.ДокументОснование = Ссылка;
	Если ПустаяСтрока(Ссылка.ИдентификаторЧекаВОчереди) Тогда
		ОбщиеПараметры.ИдентификаторФискальнойЗаписи = XMLСтрока(Ссылка); 
	Иначе
		ОбщиеПараметры.ИдентификаторФискальнойЗаписи = ДокументОбъект.ИдентификаторЧекаВОчереди;
	КонецЕсли;
	
	РеквизитыКассаККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.КассаККМ,
		"ИсточникФИОКассираВЧеке, СтруктурнаяЕдиница");
	ПользовательКассирДляПечати = Справочники.КассыККМ.ПолучитьПользователяКассираДляПечатиЧека(ДокументОбъект,
		РеквизитыКассаККМ.ИсточникФИОКассираВЧеке);
	РеквизитыКассира = РозничныеПродажиСервер.ПолучитьРеквизитыКассира(ПользовательКассирДляПечати);
	
	ОбщиеПараметры.КассаККМ = ДокументОбъект.КассаККМ; 
	Если ДокументОбъект.КассаККМ.ИспользоватьБезПодключенияОборудования Тогда
		ОбщиеПараметры.АвтономнаяККТ = Истина;
	КонецЕсли;
	Если ВариантЗаполненияКассира = 1 Тогда
		ОбщиеПараметры.Кассир = СтрШаблон("%1", РеквизитыКассира.ИмяКассира);
	Иначе
		ОбщиеПараметры.Кассир = СтрШаблон("%1", РеквизитыКассира.ИмяКассираИДолжность);
	КонецЕсли;
	ОбщиеПараметры.Вставить("ИмяКассира", РеквизитыКассира.ИмяКассира);
	ОбщиеПараметры.КассирИНН = РеквизитыКассира.КассирИНН;
	
	РеквизитыОрганизация = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.Организация, "НаименованиеПолное,ИНН,КПП");
	
	ОбщиеПараметры.Организация = ДокументОбъект.Организация;
	ОбщиеПараметры.ОрганизацияНазвание = РеквизитыОрганизация.НаименованиеПолное;
	ОбщиеПараметры.ОрганизацияИНН = РеквизитыОрганизация.ИНН;
	ОбщиеПараметры.ОрганизацияКПП = РеквизитыОрганизация.КПП;
	ОбщиеПараметры.НомерКассы     = "00001";
	ОбщиеПараметры.НомерЧека      = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Ссылка.Дата,
		Ссылка.Номер,
		Ссылка.Организация.Префикс);
	ОбщиеПараметры.НомерСмены     = "1";
	
	ОбщиеПараметры.ТипРасчета = ?(ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЧекККМВозврат"),
		Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств,
		Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств);
	
	Если ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
		СведенияОКонтрагенте = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.Контрагент, "НаименованиеПолное,ИНН,ВидКонтрагента");
		Если СведенияОКонтрагенте.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо 
			ИЛИ ЗначениеЗаполнено(СведенияОКонтрагенте.ИНН) Тогда
			ОбщиеПараметры.Получатель    = СведенияОКонтрагенте.НаименованиеПолное;
			ОбщиеПараметры.ПолучательИНН = СведенияОКонтрагенте.ИНН;
		КонецЕсли;
	КонецЕсли;
	
	ОбщиеПараметры.ТорговыйОбъект = РеквизитыКассаККМ.СтруктурнаяЕдиница;
	
	СведенияОбОрганизации = ПечатьДокументовУНФ.СведенияОЮрФизЛице(ДокументОбъект.Организация, ДокументОбъект.Дата);
	АдресМагазина = ПечатьДокументовУНФ.КонтактнаяИнформация(ДокументОбъект.СтруктурнаяЕдиница, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы"));
	
	ОбщиеПараметры.АдресМагазина = АдресМагазина;
	ОбщиеПараметры.НаименованиеМагазина = Строка(ДокументОбъект.СтруктурнаяЕдиница);
	Если ВариантЗаполненияМестаРасчетов = 1 Тогда
		ОбщиеПараметры.МестоРасчетов = СтрШаблон("%1", ОбщиеПараметры.НаименованиеМагазина);
	Иначе
		ОбщиеПараметры.МестоРасчетов = СтрШаблон("%1 %2", ОбщиеПараметры.НаименованиеМагазина, ОбщиеПараметры.АдресМагазина);
	КонецЕсли;
	ОбщиеПараметры.СистемаНалогообложения = РозничныеПродажиСервер.ПолучитьТипСистемыНалогообложенияККТ(
		ДокументОбъект.Организация,
		ДокументОбъект.СтруктурнаяЕдиница,
		ДокументОбъект.Дата,
		ДокументОбъект.СпециальныйНалоговыйРежим);
	
	СтруктураРеквизитов = Новый Структура("ЭлектронныйЧекSMSПередаютсяПрограммой1С,ЭлектронныйЧекEmailПередаютсяПрограммой1С,СерийныйНомер,Код,ПодключаемоеОборудование,СтруктурнаяЕдиница");
	СтруктураРеквизитов.Вставить("СпособФорматноЛогическогоКонтроля", "ПодключаемоеОборудование.СпособФорматноЛогическогоКонтроля");
	СтруктураРеквизитов.Вставить("ДопустимоеРасхождениеФорматноЛогическогоКонтроля", "ПодключаемоеОборудование.ДопустимоеРасхождениеФорматноЛогическогоКонтроля");
	СтруктураРеквизитов.Вставить("ТипОборудования", "ПодключаемоеОборудование.ТипОборудования");
	СтруктураРеквизитов.Вставить("ИсточникФИОКассираВЧеке");
	СтруктураРеквизитов.Вставить("ШаблонЧекаПродажи");
	СтруктураРеквизитов.Вставить("ШаблонЧекаВозврата");
	СтруктураРеквизитов.Вставить("НеПечататьБумажныйЧек");
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.КассаККМ, СтруктураРеквизитов);
	
	ОбщиеПараметры.Электронно = РеквизитыКассыККМ.НеПечататьБумажныйЧек;
	
	Если ЗначениеЗаполнено(ДокументОбъект.Телефон) Тогда
		ОбщиеПараметры.ПокупательНомер = "+7" + РозничныеПродажиСервер.УбратьРазделителиВНомереТелефона(ДокументОбъект.Телефон);
	Иначе
		ОбщиеПараметры.ПокупательНомер = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.АдресЭП) Тогда
		ОбщиеПараметры.ПокупательEmail = ДокументОбъект.АдресЭП;
	Иначе
		ОбщиеПараметры.ПокупательEmail = "";
	КонецЕсли;
	
	// Подготовка таблицы товаров
	Если ТаблицаТоваровЧека.Количество()
		ИЛИ (ТаблицаТоваровЧека.Количество() = 0 И ДокументОбъект.ОперацияСДенежнымиСредствами
			И ДокументОбъект.Предоплата.Количество() = 0) Тогда
		ДополнитьТоварамиПараметрыПриПробитииЧека(ДокументОбъект, ОбщиеПараметры, ТаблицаТоваровЧека, ПризнакСпособаРасчета(ДокументОбъект));
	ИначеЕсли ДокументОбъект.ОперацияСДенежнымиСредствами И ДокументОбъект.Предоплата.Количество() Тогда
		РозничныеПродажиСервер.ДополнитьТоварамиПараметрыПриПробитииЧека(ДокументОбъект, ОбщиеПараметры);
	КонецЕсли;
	
	Если РеквизитыКассыККМ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
		ОбщиеПараметры.СпособФорматноЛогическогоКонтроля = РеквизитыКассыККМ.СпособФорматноЛогическогоКонтроля;
		ОбщиеПараметры.ДопустимоеРасхождениеФорматноЛогическогоКонтроля = РеквизитыКассыККМ.ДопустимоеРасхождениеФорматноЛогическогоКонтроля;
		Если ФорматноЛогическийКонтрольКлиентСервер.НуженФорматноЛогическийКонтроль(ОбщиеПараметры) Тогда
			ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ОбщиеПараметры);
		КонецЕсли;
	КонецЕсли;
	
	РабочееМестоКассира.ЗаполнитьОплатуПриПробитииЧекаККМНаККТ(ДокументОбъект, ОбщиеПараметры);
	
	СтруктураОтбора = Новый Структура("ВидОплаты", Перечисления.ВидыБезналичныхОплат.ОплатаВРассрочку); 
	СтрокиСРассрочкой = ДокументОбъект.БезналичнаяОплата.НайтиСтроки(СтруктураОтбора);
	СуммаРассрочки = ?(СтрокиСРассрочкой.Количество(), СтрокиСРассрочкой[0].Сумма, 0);

	ПолученоНаличными = 0;
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
		ПолученоНаличными = ДокументОбъект.ПолученоНаличными;
	Иначе
		ПолученоНаличными = ПолучитьСуммуНаличныхОплат(ОбщиеПараметры.ТаблицаОплат);
	КонецЕсли;
	
	СуммаПредоплаты = ?(Не ДокументОбъект.ОперацияСДенежнымиСредствами, ДокументОбъект.Предоплата.Итог("СуммаРасчетов"), 0);
	
	Если СуммаРассрочки > 0 Тогда
		РазницаСумм = ДокументОбъект.Запасы.Итог("Сумма") - (ДокументОбъект.БезналичнаяОплата.Итог("Сумма") - СуммаРассрочки + ПолученоНаличными + СуммаПредоплаты);
		Если СуммаРассрочки > РазницаСумм Тогда
			РазницаСумм = СуммаРассрочки;
		КонецЕсли;
	Иначе
		РазницаСумм = ДокументОбъект.Запасы.Итог("Сумма") - ДокументОбъект.СуммаДокумента;
	КонецЕсли;
	
	Если РазницаСумм > 0 Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты",Перечисления.ТипыОплатыККТ.Постоплата);
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Постоплата'"));
		СтрокаОплаты.Вставить("Сумма", РазницаСумм);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты") Тогда
		РаботаСПодарочнымиСертификатами.ДобавитьВнереализационнуюПрибыль(ДокументОбъект, ОбщиеПараметры);
	КонецЕсли;
	
	ЭтоАванс = ДокументОбъект.ОперацияСДенежнымиСредствами И ДокументОбъект.Предоплата.Количество() = 0 И ДокументОбъект.Запасы.Количество() > 0;
	
	Если ОбщиеПараметры.ЭтоРассрочка ИЛИ ЭтоАванс Тогда
		
		СуммаЧека = 0;
		Если ОбщиеПараметры.ЭтоРассрочка Тогда
			СуммаЧека = ДокументОбъект.СуммаДокумента;
		Иначе
			Для Каждого ЭлементМассива Из ОбщиеПараметры.ПозицииЧека Цикл
				СуммаЧека = СуммаЧека + ЭлементМассива.Сумма;
			КонецЦикла;
		КонецЕсли;
		
		ПривестиСуммыПозицийЧекаКСуммеТаблицыОплат(ОбщиеПараметры, СуммаЧека);
		
	КонецЕсли;
	
	// Печать промокода на чеке
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПромокоды") И Не ЗначениеЗаполнено(ОбщиеПараметры.ШаблонЧека) Тогда
		ПромокодыУНФВызовСервера.ДополнитьПараметрыПробитияЧекаВыданнымиПромокодами(ОбщиеПараметры, ДокументОбъект);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ОбщиеПараметры;
	
КонецФункции

// Проверка склада в заказе и в чеке.
//  Если склады не совпадают и есть резерв по заказу, то резерв может зависнуть.
//  Сообщим об этом пользователю.
//
// Параметры:
//  Заказ					 - ДокументСсылка.ЗаказПокупателя		 - Заказ-основание
//  СтруктурнаяЕдиницаВЧеке	 - СправочникСсылка.СтруктурныеЕдиницы	 - Розничный склад
//  Номенклатура			 - СправочникСсылка.Номенклатура		 - Продаваемый товар
//  Характеристика			 - СправочникСсылка.ХарактеристикиНоменклатуры	 - Харатктеристика товара
// 
// Возвращаемое значение:
//  Булево - Признако совпадения склада резерва в чеке и заказа
//
Функция ПроверитьСтруктурнуюЕдиницуВЗаказе(Заказ, СтруктурнаяЕдиницаВЧеке, Номенклатура = Неопределено, Характеристика = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиницаВЧеке);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ЗаказПокупателяЗапасы.Резерв), 0) КАК Резерв,
	|	ЕСТЬNULL(МАКСИМУМ(ЗаказПокупателяЗапасы.СтруктурнаяЕдиницаРезерв = &СтруктурнаяЕдиница), ЛОЖЬ) КАК СтруктурнаяЕдиницаСовпадает
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Ссылка = &Заказ
	|	И (ЗаказПокупателяЗапасы.Номенклатура = &Номенклатура
	|			ИЛИ &Номенклатура = НЕОПРЕДЕЛЕНО)
	|	И (ЗаказПокупателяЗапасы.Характеристика = &Характеристика
	|			ИЛИ &Характеристика = НЕОПРЕДЕЛЕНО)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И НЕ Выборка.СтруктурнаяЕдиницаСовпадает И Выборка.Резерв > 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Обратите внимание, что склад резерва в заказе покупателя и розничная точка в чеке не совпадают. Это может привести к зависанию резерва.'");
		ТекстСообщения = ТекстСообщения + Символы.ПС
		+ НСтр("ru = 'Для снятия резерва с заказа используйте документ ""Резервирование запасов"". В карточке заказа покупателя выберите команду ""Создать на основании - Резервирование (снять резерв)"".'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
		
		Возврат Ложь;
	
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПлатежныйКалендарь(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("ТоварЗарезервирован", СтруктураДополнительныеСвойства.ДляПроведения.ТоварЗарезервирован);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ИспользоватьЗаказыВРозничнойТорговле", ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Заказ КАК СчетНаОплату,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей) КАК Статья,
	|	ТаблицаДокумента.КассаККМ КАК БанковскийСчетКасса,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыУтвержденияПлатежей.Утвержден) КАК СтатусУтвержденияПлатежа,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные) КАК ТипДенежныхСредств,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Заказ.Договор.РасчетыВУсловныхЕдиницах
	|			ТОГДА ТаблицаДокумента.Заказ.Договор.ВалютаРасчетов
	|		ИНАЧЕ ТаблицаДокумента.ВалютаДокумента
	|	КОНЕЦ КАК Валюта,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаДокумента.Заказ.Договор.РасчетыВУсловныхЕдиницах
	|				ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.СуммаВал * ВЫБОР
	|							КОГДА КурсыВалютРасчетов.Курс <> 0
	|									И КурсыВалютКассы.Кратность <> 0
	|								ТОГДА КурсыВалютКассы.Курс * КурсыВалютРасчетов.Кратность / (ЕСТЬNULL(КурсыВалютРасчетов.Курс, 1) * ЕСТЬNULL(КурсыВалютКассы.Кратность, 1))
	|							ИНАЧЕ 1
	|						КОНЕЦ КАК ЧИСЛО(15, 2))
	|			ИНАЧЕ ТаблицаДокумента.СуммаВал
	|		КОНЕЦ) КАК СуммаОплаты
	|ИЗ
	|	ВременнаяТаблицаРасшифровкаПлатежа КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалют КАК КурсыВалютСчета
	|		ПО (КурсыВалютСчета.ЭтоВалютаЗаказа)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалют КАК КурсыВалютКассы
	|		ПО (КурсыВалютКассы.ЭтоВалютаДокумента)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалют КАК КурсыВалютРасчетов
	|		ПО (КурсыВалютРасчетов.ЭтоВалютаДоговора)
	|ГДЕ
	|	ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|	И ТаблицаДокумента.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	И ТаблицаДокумента.Заказ <> НЕОПРЕДЕЛЕНО
	|	И ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Заказ) = ТИП(Документ.ЗаказПокупателя)
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И &ИспользоватьЗаказыВРозничнойТорговле
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Заказ,
	|	ТаблицаДокумента.КассаККМ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Заказ.Договор.РасчетыВУсловныхЕдиницах
	|			ТОГДА ТаблицаДокумента.Заказ.Договор.ВалютаРасчетов
	|		ИНАЧЕ ТаблицаДокумента.ВалютаДокумента
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПлатежныйКалендарь", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("ТоварЗарезервирован", СтруктураДополнительныеСвойства.ДляПроведения.ТоварЗарезервирован);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	Запрос.УстановитьПараметр("ИспользоватьЗаказыВРозничнойТорговле", ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле"));
	Запрос.УстановитьПараметр("СуммаПредоплаты", СтруктураДополнительныеСвойства.ДляПроведения.СуммаПредоплаты);
	Запрос.УстановитьПараметр("СуммаРассрочки", СтруктураДополнительныеСвойства.ДляПроведения.СуммаРассрочки);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.ЗаказПокупателя КАК СчетНаОплату,
	|	0 КАК СуммаАванса,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаДокумента.ВалютаДокумента = ТаблицаДокумента.ЗаказПокупателя.ВалютаДокумента
	|				ТОГДА ТаблицаДокумента.СуммаВал + ТаблицаДокумента.СуммаСкидкиОплатыБонусом
	|			ИНАЧЕ ВЫРАЗИТЬ((ТаблицаДокумента.СуммаВал + ТаблицаДокумента.СуммаСкидкиОплатыБонусом) * КурсыВалютКассы.Курс * КурсыВалютСчета.Кратность / (КурсыВалютСчета.Курс * КурсыВалютКассы.Кратность) КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) КАК СуммаОплаты
	|ПОМЕСТИТЬ ВременнаяТаблицаОплатыСчетов
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалют КАК КурсыВалютСчета
	|		ПО КурсыВалютСчета.ЭтоВалютаЗаказа
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалют КАК КурсыВалютКассы
	|		ПО КурсыВалютКассы.ЭтоВалютаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|	И ТаблицаДокумента.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	И ТаблицаДокумента.ЗаказПокупателя <> НЕОПРЕДЕЛЕНО
	|	И ТИПЗНАЧЕНИЯ(ТаблицаДокумента.ЗаказПокупателя) = ТИП(Документ.ЗаказПокупателя)
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И &ИспользоватьЗаказыВРозничнойТорговле
	|	И НЕ &ОперацияСДенежнымиСредствами
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.ЗаказПокупателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаОплатыСчетов.Период КАК Период,
	|	ВременнаяТаблицаОплатыСчетов.Организация КАК Организация,
	|	ВременнаяТаблицаОплатыСчетов.СчетНаОплату КАК СчетНаОплату,
	|	ВременнаяТаблицаОплатыСчетов.СуммаАванса КАК СуммаАванса,
	|	ВременнаяТаблицаОплатыСчетов.СуммаОплаты - &СуммаПредоплаты - &СуммаРассрочки КАК СуммаОплаты
	|ИЗ
	|	ВременнаяТаблицаОплатыСчетов КАК ВременнаяТаблицаОплатыСчетов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаОплатыСчетов.Период,
	|	ВременнаяТаблицаОплатыСчетов.Организация,
	|	ВременнаяТаблицаОплатыСчетов.СчетНаОплату,
	|	ВременнаяТаблицаОплатыСчетов.СуммаАванса,
	|	ВременнаяТаблицаОплатыСчетов.СуммаОплаты - &СуммаПредоплаты - &СуммаРассрочки
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВременнаяТаблицаОплатыСчетов.СуммаОплаты - &СуммаПредоплаты - &СуммаРассрочки) <> 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаОплатаСчетовИЗаказов") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатЗапроса.Выгрузить(), СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОплатаСчетовИЗаказов);
	Иначе
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаСчетовИЗаказов", РезультатЗапроса.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗаказыПокупателей(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("ТоварЗарезервирован", СтруктураДополнительныеСвойства.ДляПроведения.ТоварЗарезервирован);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	Запрос.УстановитьПараметр("ИспользоватьЗаказыВРозничнойТорговле", ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗаказыПокупателей.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗаказыПокупателей.Дата КАК Период,
	|	ТаблицаЗаказыПокупателей.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаЗаказыПокупателей.УчетПотребностиПоСкладам
	|				И ТаблицаЗаказыПокупателей.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ТаблицаЗаказыПокупателей.СтруктурнаяЕдиница
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	ТаблицаЗаказыПокупателей.Номенклатура КАК Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика КАК Характеристика,
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ТаблицаЗаказыПокупателей.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗаказыПокупателей
	|ГДЕ
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя <> НЕОПРЕДЕЛЕНО
	|	И НЕ ТаблицаЗаказыПокупателей.ПродажаПодарка
	|	И ТаблицаЗаказыПокупателей.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	И (&ЧекПробит
	|			ИЛИ &ТоварЗарезервирован)
	|	И НЕ &Архивный
	|	И &ИспользоватьЗаказыВРозничнойТорговле
	|	И НЕ &ОперацияСДенежнымиСредствами
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказыПокупателей.Дата,
	|	ТаблицаЗаказыПокупателей.Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаЗаказыПокупателей.УчетПотребностиПоСкладам
	|				И ТаблицаЗаказыПокупателей.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ТаблицаЗаказыПокупателей.СтруктурнаяЕдиница
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаЗаказыПокупателей.Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика,
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя";
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаЗаказыПокупателей = РезультатЗапроса.Выгрузить();
	РегистрыНакопления.ЗаказыПокупателей.ДобавитьДвиженияСУчетомСкладов(ДокументСсылкаЧекККМ, ТаблицаЗаказыПокупателей);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаказыПокупателей", ТаблицаЗаказыПокупателей);
	
КонецПроцедуры // СформироватьТаблицаЗаказыПокупателей()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасы(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	// Ставим в резерв только то количество, которое ещё не поставлено в резерв заказом покупателя на складе розничной точки!
	// Окончательное снятие резерва с заказа происходит в документе "Отчет о розничных продажах".
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаЗапасы.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.Контрагент КАК Контрагент,
	|	ТаблицаЗапасы.Документ КАК Документ,
	|	ТаблицаЗапасы.Документ КАК ДокументПродажи,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПродажи,
	|	ТаблицаЗапасы.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ОтветственныйВШапке
	|			ТОГДА ВременнаяТаблицаШапка.Ответственный
	|		ИНАЧЕ ТаблицаЗапасы.Ответственный
	|	КОНЕЦ КАК Ответственный,
	|	ТаблицаЗапасы.Подразделение КАК ПодразделениеПродажи,
	|	ТаблицаЗапасы.ТоварыНаКомиссии КАК ТоварыНаКомиссии,
	|	ЕСТЬNULL(ТаблицаЗапасы.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК СтруктурнаяЕдиница,
	|	ЕСТЬNULL(ТаблицаЗапасы.КоррСтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|	ТаблицаЗапасы.КоррСчетУчетаЗапасов КАК КоррСчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	ТаблицаЗапасы.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаЗапасы.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаЗапасы.КоррНоменклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ТаблицаЗапасы.КоррХарактеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.КоррПартия КАК КоррПартия,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	НЕОПРЕДЕЛЕНО КАК КоррЗаказПокупателя,
	|	ТаблицаЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаЗапасы.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество,
	|	СУММА(ТаблицаЗапасы.Резерв) КАК Резерв,
	|	СУММА(ТаблицаЗапасы.СуммаНДС) КАК СуммаНДС,
	|	0 КАК Сумма,
	|	0 КАК Себестоимость,
	|	ЛОЖЬ КАК ФиксированнаяСтоимость,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА ТаблицаЗапасы.СчетУчетаЗатрат
	|		ИНАЧЕ ТаблицаЗапасы.СчетУчетаСебестоимость
	|	КОНЕЦ КАК СчетДт,
	|	ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетКт,
	|	ВЫРАЗИТЬ(&СписаниеЗапасов КАК СТРОКА(100)) КАК Содержание,
	|	ВЫРАЗИТЬ(&СписаниеЗапасов КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость КАК СчетУчетаСебестоимость,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы,
	|	Константа.ФункциональнаяОпцияРезервированиеЗапасов КАК ФункциональнаяОпцияРезервированиеЗапасов,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ТаблицаЗапасы.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|	И (&ЧекПробит
	|			ИЛИ &ТоварЗарезервирован)
	|	И НЕ &Архивный
	|	И НЕ &ДвиженияПоЗапасамУдалять
	|	И НЕ &ОперацияСДенежнымиСредствами
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Дата,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Контрагент,
	|	ТаблицаЗапасы.Документ,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.Подразделение,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ОтветственныйВШапке
	|			ТОГДА ВременнаяТаблицаШапка.Ответственный
	|		ИНАЧЕ ТаблицаЗапасы.Ответственный
	|	КОНЕЦ,
	|	ТаблицаЗапасы.НаправлениеДеятельности,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчетаЗапасов,
	|	ТаблицаЗапасы.КоррСчетУчетаЗапасов,
	|	ТаблицаЗапасы.ТоварыНаКомиссии,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.НоменклатураНабора,
	|	ТаблицаЗапасы.ТипНоменклатуры,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.ХарактеристикаНабора,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.КоррНоменклатура,
	|	ТаблицаЗапасы.КоррХарактеристика,
	|	ТаблицаЗапасы.КоррПартия,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаЗапасы.СтавкаНДС,
	|	ТаблицаЗапасы.ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА ТаблицаЗапасы.СчетУчетаЗатрат
	|		ИНАЧЕ ТаблицаЗапасы.СчетУчетаСебестоимость
	|	КОНЕЦ,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость,
	|	ТаблицаЗапасы.Документ,
	|	ТаблицаЗапасы.Подразделение,
	|	ТаблицаЗапасы.СчетУчетаЗапасов";
	
	Запрос.УстановитьПараметр("ОприходованиеЗапасов", НСтр("ru = 'Оприходование запасов'"));
	Запрос.УстановитьПараметр("СписаниеЗапасов", НСтр("ru = 'Списание запасов'"));
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("ТоварЗарезервирован", СтруктураДополнительныеСвойства.ДляПроведения.ТоварЗарезервирован);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	Запрос.УстановитьПараметр("ДвиженияПоЗапасамУдалять", СтруктураДополнительныеСвойства.ДляПроведения.ДвиженияПоЗапасамУдалять);
	Запрос.УстановитьПараметр("ИспользоватьЗаказыВРозничнойТорговле", ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасы", РезультатЗапроса.Выгрузить());
	
	// Формируются движения по количеству по регистру "Запасы".
	// Это нужно, чтобы не было расхождений с регистром "ЗапасыНаСкладах" и чтобы документ проводился быстрее,
	// т.к. теперь остатки товаров не получаем.
	// Суммы будут сформированы при закрытии смены.
	// Себестоимость будет выровнена при закрытии месяца.
	СформироватьТаблицаЗапасыПродажаКоличество(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	
КонецПроцедуры // СформироватьТаблицаЗапасы()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыПродажаКоличество(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	ТаблицаЗапасыОстатки = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы;
	ТаблицаЗапасыОстатки.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия,ЗаказПокупателя");
	
	ВременнаяТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.СкопироватьКолонки();
	ВерхнееЗначениеИндекса = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Количество() - 1;
	
	Для н = 0 По ВерхнееЗначениеИндекса Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы[н];
		
		КоличествоТребуетсяРезерв = ?(ЗначениеЗаполнено(СтрокаТаблицаЗапасы.Резерв), СтрокаТаблицаЗапасы.Резерв, 0);
		КоличествоТребуетсяСвободныйОстаток = ?(ЗначениеЗаполнено(СтрокаТаблицаЗапасы.Количество), СтрокаТаблицаЗапасы.Количество, 0);
		
		Если КоличествоТребуетсяРезерв > 0 Тогда
			
			КоличествоТребуетсяСвободныйОстаток = КоличествоТребуетсяСвободныйОстаток - КоличествоТребуетсяРезерв;
			
			СтрокаТаблицыРасход = ВременнаяТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.Количество = КоличествоТребуетсяРезерв;
			
		КонецЕсли;
		
		Если КоличествоТребуетсяСвободныйОстаток > 0 Тогда
			
			СтрокаТаблицыРасход = ВременнаяТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.Количество = КоличествоТребуетсяСвободныйОстаток;
			СтрокаТаблицыРасход.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы = ВременнаяТаблицаЗапасы;
	
КонецПроцедуры // СформироватьТаблицаЗапасыПродажа()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыНаСкладах(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЧекККМЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ЧекККМЗапасы.Дата КАК Период,
	|	ЧекККМЗапасы.Организация КАК Организация,
	|	ЧекККМЗапасы.Номенклатура КАК Номенклатура,
	|	ЧекККМЗапасы.Характеристика КАК Характеристика,
	|	ЧекККМЗапасы.Партия КАК Партия,
	|	ЧекККМЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЧекККМЗапасы.Ячейка КАК Ячейка,
	|	ЧекККМЗапасы.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	СУММА(ЧекККМЗапасы.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ЧекККМЗапасы
	|ГДЕ
	|	(ЧекККМЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ИЛИ ЧекККМЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|	И (&ЧекПробит
	|			ИЛИ &ТоварЗарезервирован)
	|	И НЕ &Архивный
	|	И НЕ &ОперацияСДенежнымиСредствами
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМЗапасы.НомерСтроки,
	|	ЧекККМЗапасы.Дата,
	|	ЧекККМЗапасы.Организация,
	|	ЧекККМЗапасы.Номенклатура,
	|	ЧекККМЗапасы.Характеристика,
	|	ЧекККМЗапасы.Партия,
	|	ЧекККМЗапасы.СтруктурнаяЕдиница,
	|	ЧекККМЗапасы.Ячейка,
	|	ЧекККМЗапасы.ХозяйственнаяОперация
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЧекККМ);
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	Запрос.УстановитьПараметр("ТоварЗарезервирован", СтруктураДополнительныеСвойства.ДляПроведения.ТоварЗарезервирован);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыНаСкладах", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗапасыНаСкладах()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДенежныеСредстваВКассахККМ(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК НомерСтроки,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.КассаККМ КАК КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета КАК СчетУчета,
	|	ДанныеДокумента.ВалютаДокумента КАК Валюта,
	|	ДанныеДокумента.ДоговорПлатежногоАгента КАК ДоговорКонтрагента,
	|	СУММА(ДанныеДокумента.Сумма) КАК Сумма,
	|	СУММА(ДанныеДокумента.СуммаВал) КАК СуммаВал,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаДляОстатка,
	|	СУММА(ДанныеДокумента.СуммаВал) КАК СуммаВалДляОстатка,
	|	ВЫРАЗИТЬ(&ПоступлениеДенежныхСредств КАК СТРОКА(100)) КАК СодержаниеПроводки
	|ПОМЕСТИТЬ ВременнаяТаблицаДенежныеСредстваВКассахККМ
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ДанныеДокумента
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ОперацияСДенежнымиСредствами
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета,
	|	ДанныеДокумента.ВалютаДокумента,
	|	ДанныеДокумента.ДоговорПлатежногоАгента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ДанныеДокумента.Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета,
	|	ДанныеДокумента.ВалютаДокумента,
	|	НЕОПРЕДЕЛЕНО,
	|	СУММА(ДанныеДокумента.Сумма),
	|	СУММА(ДанныеДокумента.СуммаВал),
	|	СУММА(ДанныеДокумента.Сумма),
	|	СУММА(ДанныеДокумента.СуммаВал),
	|	ВЫРАЗИТЬ(&ПоступлениеДенежныхСредств КАК СТРОКА(100))
	|ИЗ
	|	ВременнаяТаблицаРасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И &ОперацияСДенежнымиСредствами
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета,
	|	ДанныеДокумента.ВалютаДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ДанныеДокумента.Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета,
	|	ДанныеДокумента.ВалютаДокумента,
	|	ДанныеДокумента.ДоговорПлатежногоАгента,
	|	СУММА(ДанныеДокумента.Сумма),
	|	СУММА(ДанныеДокумента.СуммаВал),
	|	-СУММА(ДанныеДокумента.Сумма),
	|	-СУММА(ДанныеДокумента.СуммаВал),
	|	ВЫРАЗИТЬ(&ОплатаПлатежнымиКартами КАК СТРОКА(100))
	|ИЗ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ДанныеДокумента
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ ДанныеДокумента.ВидОплаты В (ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.СБП), ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ВыдачаНаличных))
	|	И НЕ &Архивный
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета,
	|	ДанныеДокумента.ВалютаДокумента,
	|	ДанныеДокумента.ДоговорПлатежногоАгента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ДанныеДокумента.Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета,
	|	ДанныеДокумента.ВалютаДокумента,
	|	ДанныеДокумента.ДоговорПлатежногоАгента,
	|	СУММА(ДанныеДокумента.Сумма),
	|	СУММА(ДанныеДокумента.СуммаВал),
	|	-СУММА(ДанныеДокумента.Сумма),
	|	-СУММА(ДанныеДокумента.СуммаВал),
	|	ВЫРАЗИТЬ(&СодержаниеПроводкиОплатаСБП КАК СТРОКА(100))
	|ИЗ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ДанныеДокумента
	|ГДЕ
	|	&ЧекПробит
	|	И ДанныеДокумента.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.СБП)
	|	И НЕ &Архивный
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета,
	|	ДанныеДокумента.ВалютаДокумента,
	|	ДанныеДокумента.ДоговорПлатежногоАгента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ДанныеДокумента.Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета,
	|	ДанныеДокумента.ВалютаДокумента,
	|	ДанныеДокумента.ДоговорПлатежногоАгента,
	|	СУММА(ДанныеДокумента.Сумма),
	|	СУММА(ДанныеДокумента.СуммаВал),
	|	-СУММА(ДанныеДокумента.Сумма),
	|	-СУММА(ДанныеДокумента.СуммаВал),
	|	ВЫРАЗИТЬ(&СодержаниеПроводкиВыдачаНаличных КАК СТРОКА(100))
	|ИЗ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ДанныеДокумента
	|ГДЕ
	|	&ЧекПробит
	|	И ДанныеДокумента.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ВыдачаНаличных)
	|	И НЕ &Архивный
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета,
	|	ДанныеДокумента.ВалютаДокумента,
	|	ДанныеДокумента.ДоговорПлатежногоАгента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ДанныеДокумента.Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета,
	|	ДанныеДокумента.ВалютаДокумента,
	|	НЕОПРЕДЕЛЕНО,
	|	СУММА(ДанныеДокумента.Сумма),
	|	СУММА(ДанныеДокумента.СуммаВал),
	|	-СУММА(ДанныеДокумента.Сумма),
	|	-СУММА(ДанныеДокумента.СуммаВал),
	|	ВЫРАЗИТЬ(&ЗачетПредоплаты КАК СТРОКА(100))
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ДанныеДокумента
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ВозвратРассрочки
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета,
	|	ДанныеДокумента.ВалютаДокумента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	КассаККМ,
	|	Валюта,
	|	СчетУчета";
	
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЧекККМ);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	Запрос.УстановитьПараметр("ПоступлениеДенежныхСредств", НСтр("ru = 'Поступление денежных средств в кассу ККМ'"));
	Запрос.УстановитьПараметр("ОплатаПлатежнымиКартами", НСтр("ru = 'Безналичная оплата или рассрочка'"));
	Запрос.УстановитьПараметр("СодержаниеПроводкиОплатаСБП", НСтр("ru = 'Оплата СБП'"));
	Запрос.УстановитьПараметр("СодержаниеПроводкиВыдачаНаличных", НСтр("ru = 'Выдача наличных с платежной карты'"));
	Запрос.УстановитьПараметр("ЗачетПредоплаты", НСтр("ru = 'Зачет предоплаты'"));
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	Запрос.УстановитьПараметр("ВозвратРассрочки", СтруктураДополнительныеСвойства.ДляПроведения.ВозвратРассрочки);
	
	Запрос.Выполнить();
	
	// Установка исключительной блокировки контролируемых остатков денежных средств.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаДенежныеСредстваВКассахККМ.Организация КАК Организация,
	|	ВременнаяТаблицаДенежныеСредстваВКассахККМ.КассаККМ КАК КассаККМ
	|ИЗ
	|	ВременнаяТаблицаДенежныеСредстваВКассахККМ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ДенежныеСредстваВКассахККМ");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	НомерЗапроса = 0;
	Запрос.Текст = КурсовыеРазницыУНФ.ПолучитьТекстЗапросаКурсовыеРазницыДенежныеСредстваВКассахККМ(Запрос.МенеджерВременныхТаблиц, НомерЗапроса);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДенежныеСредстваВКассахККМ", МассивРезультатов[НомерЗапроса].Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДенежныеСредстваВКассахККМ()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходы(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	// Установка исключительной блокировки остатков подарочных сертификатов и создание временной таблицы
	Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПодарочныеСертификаты Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.ПодарочныйСертификат КАК ПодарочныйСертификат,
		|	ТаблицаДокумента.НомерСертификата КАК НомерСертификата
		|ИЗ
		|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ТаблицаДокумента
		|ГДЕ
		|	НЕ ТаблицаДокумента.ЧастичноеПогашение
		|	И ТаблицаДокумента.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента.НомерСертификата,
		|	ТаблицаДокумента.ПодарочныйСертификат";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			// Создадим пустую временную таблицу, чтобы избежать
			// ошибок при обращениях к ней в других процедурах
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	НЕОПРЕДЕЛЕНО КАК ПодарочныйСертификат,
			|	НЕОПРЕДЕЛЕНО КАК НомерСертификата,
			|	0 КАК СуммаОстаток
			|ПОМЕСТИТЬ ВременнаяТаблицаОстаткиСертификатов";
			Запрос.Выполнить();
			
		Иначе
		
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПодарочныеСертификаты");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
			
			Для Каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
			КонецЦикла;
			Блокировка.Заблокировать();
			
			Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерииНоменклатуры Тогда
				
				Запрос = Новый Запрос;
				Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
				Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЧекККМ);
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ВложенныйЗапрос.ПодарочныйСертификат КАК ПодарочныйСертификат,
				|	ВложенныйЗапрос.НомерСертификата КАК НомерСертификата,
				|	СУММА(ВложенныйЗапрос.СуммаОстаток) КАК СуммаОстаток
				|ПОМЕСТИТЬ ВременнаяТаблицаОстаткиСертификатов
				|ИЗ
				|	(ВЫБРАТЬ
				|		ПодарочныеСертификатыОстатки.ПодарочныйСертификат КАК ПодарочныйСертификат,
				|		ПодарочныеСертификатыОстатки.НомерСертификата КАК НомерСертификата,
				|		ПодарочныеСертификатыОстатки.СуммаОстаток КАК СуммаОстаток
				|	ИЗ
				|		РегистрНакопления.ПодарочныеСертификаты.Остатки(, ) КАК ПодарочныеСертификатыОстатки
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОплатаПлатежнымиКартами КАК ВременнаяТаблицаОплатаПлатежнымиКартами
				|			ПО ПодарочныеСертификатыОстатки.ПодарочныйСертификат = ВременнаяТаблицаОплатаПлатежнымиКартами.ПодарочныйСертификат
				|				И ПодарочныеСертификатыОстатки.НомерСертификата = ВременнаяТаблицаОплатаПлатежнымиКартами.НомерСертификата
				|				И (ВременнаяТаблицаОплатаПлатежнымиКартами.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат))
				|				И (НЕ ВременнаяТаблицаОплатаПлатежнымиКартами.ЧастичноеПогашение)
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		ПодарочныеСертификаты.ПодарочныйСертификат,
				|		ПодарочныеСертификаты.НомерСертификата,
				|		ВЫБОР
				|			КОГДА ПодарочныеСертификаты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
				|				ТОГДА ПодарочныеСертификаты.Сумма
				|			ИНАЧЕ -ПодарочныеСертификаты.Сумма
				|		КОНЕЦ
				|	ИЗ
				|		РегистрНакопления.ПодарочныеСертификаты КАК ПодарочныеСертификаты
				|	ГДЕ
				|		ПодарочныеСертификаты.Регистратор = &Ссылка) КАК ВложенныйЗапрос
				|
				|СГРУППИРОВАТЬ ПО
				|	ВложенныйЗапрос.ПодарочныйСертификат,
				|	ВложенныйЗапрос.НомерСертификата";
				
				Запрос.Выполнить();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДополнительныеСвойства.ОптимизированнаяСхемаДвижений Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходы", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	0 КАК НомерСтроки,
	|	ТаблицаДоходыИРасходы.Дата КАК Период,
	|	ТаблицаДоходыИРасходы.Организация КАК Организация,
	|	ТаблицаДоходыИРасходы.Подразделение КАК СтруктурнаяЕдиница,
	|	ТаблицаДоходыИРасходы.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаДоходыИРасходы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаДоходыИРасходы.СчетУчетаВыручкиОтПродаж КАК СчетУчета,
	|	ТаблицаДоходыИРасходы.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК Аналитика,
	|	ВЫРАЗИТЬ(&ОтражениеДоходов КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	СУММА(ТаблицаДоходыИРасходы.Сумма) КАК СуммаДоходов,
	|	0 КАК СуммаРасходов,
	|	СУММА(ТаблицаДоходыИРасходы.Сумма) КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДоходыИРасходы
	|ГДЕ
	|	НЕ ТаблицаДоходыИРасходы.ТоварыНаКомиссии
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ ТаблицаДоходыИРасходы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И НЕ &ОперацияСДенежнымиСредствами
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДоходыИРасходы.Дата,
	|	ТаблицаДоходыИРасходы.Организация,
	|	ТаблицаДоходыИРасходы.Подразделение,
	|	ТаблицаДоходыИРасходы.НаправлениеДеятельности,
	|	ТаблицаДоходыИРасходы.ЗаказПокупателя,
	|	ТаблицаДоходыИРасходы.СчетУчетаВыручкиОтПродаж,
	|	ТаблицаДоходыИРасходы.ХозяйственнаяОперация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Организация,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее),
	|	НЕОПРЕДЕЛЕНО,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА &ПоложительнаяКурсоваяРазницаСчетУчета
	|		ИНАЧЕ &ОтрицательнаяКурсоваяРазницаСчетУчета
	|	КОНЕЦ,
	|	НЕОПРЕДЕЛЕНО,
	|	ТаблицаДокумента.Валюта,
	|	&КурсоваяРазница,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА 0
	|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
	|	КОНЕЦ
	|ИЗ
	|	ВременнаяТаблицаКурсовыхРазницДенежныеСредстваВКассахККМ КАК ТаблицаДокумента
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный";
	
	Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПодарочныеСертификаты Тогда
		Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерииНоменклатуры Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	3,
			|	0,
			|	ТаблицаДоходыИРасходы.Дата,
			|	ТаблицаДоходыИРасходы.Организация,
			|	ТаблицаДоходыИРасходы.Подразделение,
			|	НЕОПРЕДЕЛЕНО,
			|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка),
			|	ТаблицаДоходыИРасходы.СчетУчетаДоходов,
			|	НЕОПРЕДЕЛЕНО,
			|	НЕОПРЕДЕЛЕНО,
			|	ВЫРАЗИТЬ(&ОтражениеДоходов КАК СТРОКА(100)),
			|	СУММА(ВЫБОР
			|			КОГДА ТаблицаДоходыИРасходы.ИспользоватьСерииНоменклатуры
			|				ТОГДА ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) - ТаблицаДоходыИРасходы.Сумма
			|			ИНАЧЕ ТаблицаДоходыИРасходы.Номинал - ТаблицаДоходыИРасходы.Сумма
			|		КОНЕЦ),
			|	0,
			|	СУММА(ВЫБОР
			|			КОГДА ТаблицаДоходыИРасходы.ИспользоватьСерииНоменклатуры
			|				ТОГДА ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) - ТаблицаДоходыИРасходы.Сумма
			|			ИНАЧЕ ТаблицаДоходыИРасходы.Номинал - ТаблицаДоходыИРасходы.Сумма
			|		КОНЕЦ)
			|ИЗ
			|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ТаблицаДоходыИРасходы
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстаткиСертификатов КАК ПодарочныеСертификатыОстатки
			|		ПО ТаблицаДоходыИРасходы.ПодарочныйСертификат = ПодарочныеСертификатыОстатки.ПодарочныйСертификат
			|			И ТаблицаДоходыИРасходы.НомерСертификата = ПодарочныеСертификатыОстатки.НомерСертификата
			|ГДЕ
			|	&ЧекПробит
			|	И НЕ &Архивный
			|	И ТаблицаДоходыИРасходы.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат)
			|	И НЕ ТаблицаДоходыИРасходы.ЧастичноеПогашение
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаДоходыИРасходы.Дата,
			|	ТаблицаДоходыИРасходы.Организация,
			|	ТаблицаДоходыИРасходы.Подразделение,
			|	ТаблицаДоходыИРасходы.СчетУчетаДоходов
			|
			|ИМЕЮЩИЕ
			|	СУММА(ВЫБОР
			|			КОГДА ТаблицаДоходыИРасходы.ИспользоватьСерииНоменклатуры
			|				ТОГДА ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) - ТаблицаДоходыИРасходы.Сумма
			|			ИНАЧЕ ТаблицаДоходыИРасходы.Номинал - ТаблицаДоходыИРасходы.Сумма
			|		КОНЕЦ) <> 0
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок,
			|	НомерСтроки";
			
		Иначе
			
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	3,
			|	0,
			|	ТаблицаДоходыИРасходы.Дата,
			|	ТаблицаДоходыИРасходы.Организация,
			|	ТаблицаДоходыИРасходы.Подразделение,
			|	НЕОПРЕДЕЛЕНО,
			|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка),
			|	ТаблицаДоходыИРасходы.СчетУчетаДоходов,
			|	НЕОПРЕДЕЛЕНО,
			|	НЕОПРЕДЕЛЕНО,
			|	ВЫРАЗИТЬ(&ОтражениеДоходов КАК СТРОКА(100)),
			|	СУММА(ТаблицаДоходыИРасходы.Номинал - ТаблицаДоходыИРасходы.Сумма),
			|	0,
			|	СУММА(ТаблицаДоходыИРасходы.Номинал - ТаблицаДоходыИРасходы.Сумма)
			|ИЗ
			|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ТаблицаДоходыИРасходы
			|ГДЕ
			|	&ЧекПробит
			|	И НЕ &Архивный
			|	И ТаблицаДоходыИРасходы.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат)
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаДоходыИРасходы.Дата,
			|	ТаблицаДоходыИРасходы.Организация,
			|	ТаблицаДоходыИРасходы.Подразделение,
			|	ТаблицаДоходыИРасходы.СчетУчетаДоходов
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок,
			|	НомерСтроки";
			
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПоложительнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ОтрицательнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеРасходы);
	Запрос.УстановитьПараметр("ОтражениеДоходов", НСтр("ru='Отражение доходов'"));
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Исключая));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходы", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходы()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажи(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПродажи.Дата КАК Период,
	|	ТаблицаПродажи.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаПродажи.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ТаблицаПродажи.СтруктурнаяЕдиница
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	ТаблицаПродажи.Номенклатура КАК Номенклатура,
	|	ТаблицаПродажи.Характеристика КАК Характеристика,
	|	ТаблицаПродажи.НоменклатураНабора КАК НоменклатураНабора,
	|	ТаблицаПродажи.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ТаблицаПродажи.Партия КАК Партия,
	|	ТаблицаПродажи.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаПродажи.Документ КАК Документ,
	|	ТаблицаПродажи.Контрагент КАК Контрагент,
	|	ТаблицаПродажи.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаПродажи.Подразделение КАК Подразделение,
	|	ТаблицаПродажи.Ответственный КАК Ответственный,
	|	ТаблицаПродажи.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	СУММА(ТаблицаПродажи.Количество) КАК Количество,
	|	СУММА(ТаблицаПродажи.СуммаНДСЗакупкиПродажи) КАК СуммаНДС,
	|	СУММА(ТаблицаПродажи.Сумма) КАК Сумма,
	|	0 КАК Себестоимость,
	|	СУММА(ТаблицаПродажи.Сумма + ТаблицаПродажи.СуммаСкидкиНаценки + ТаблицаПродажи.СуммаАвтоматическойСкидки + ТаблицаПродажи.СуммаСкидкиОплатыБонусом) КАК СуммаБезСкидки
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаПродажи
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ ТаблицаПродажи.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И НЕ &ОперацияСДенежнымиСредствами
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродажи.Дата,
	|	ТаблицаПродажи.Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаПродажи.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ТаблицаПродажи.СтруктурнаяЕдиница
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаПродажи.Номенклатура,
	|	ТаблицаПродажи.Характеристика,
	|	ТаблицаПродажи.НоменклатураНабора,
	|	ТаблицаПродажи.ХарактеристикаНабора,
	|	ТаблицаПродажи.Партия,
	|	ТаблицаПродажи.ЗаказПокупателя,
	|	ТаблицаПродажи.Документ,
	|	ТаблицаПродажи.Контрагент,
	|	ТаблицаПродажи.СтавкаНДС,
	|	ТаблицаПродажи.Подразделение,
	|	ТаблицаПродажи.Ответственный,
	|	ТаблицаПродажи.ХозяйственнаяОперация";
	
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажи", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажи()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходыНераспределенные(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Если СтруктураДополнительныеСвойства.ОптимизированнаяСхемаДвижений Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыНераспределенные", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЧекККМ);
	Запрос.УстановитьПараметр("КассовыйМетодУчетаДоходовИРасходов", СтруктураДополнительныеСвойства.УчетнаяПолитика.КассовыйМетодУчетаДоходовИРасходов);
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	0 КАК НомерСтроки,
	|	ТаблицаДокумента.Дата КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА &Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей) КАК Статья,
	|	ТаблицаДокумента.Сумма КАК СуммаДоходов,
	|	0 КАК СуммаРасходов
	|ИЗ
	|	ВременнаяТаблицаРасшифровкаПлатежа КАК ТаблицаДокумента
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И &ОперацияСДенежнымиСредствами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	0,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Организация,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей),
	|	ТаблицаДокумента.Сумма,
	|	0
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ОперацияСДенежнымиСредствами
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыНераспределенные", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходыНераспределенные()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходыКассовыйМетод(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Если СтруктураДополнительныеСвойства.ОптимизированнаяСхемаДвижений Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыКассовыйМетод", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЧекККМ);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КассовыйМетодУчетаДоходовИРасходов", СтруктураДополнительныеСвойства.УчетнаяПолитика.КассовыйМетодУчетаДоходовИРасходов);
	
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаДС", СтруктураДополнительныеСвойства.ВалютаДокумента);
	
	Запрос.УстановитьПараметр("ПлатежныйКалендарь", ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь"));
	Запрос.УстановитьПараметр("УчетВалютныхОпераций", ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций"));
	
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Дата КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей) КАК Статья,
	|	ТаблицаДокумента.Сумма КАК СуммаДоходов,
	|	0 КАК СуммаРасходов
	|ИЗ
	|	ВременнаяТаблицаРасшифровкаПлатежа КАК ТаблицаДокумента
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И &ОперацияСДенежнымиСредствами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Организация,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей),
	|	-ТаблицаДокумента.Сумма,
	|	0
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ОперацияСДенежнымиСредствами";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыКассовыйМетод", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходыКассовыйМетод()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРезервыТоваровОрганизаций(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Если Не ПолучитьФункциональнуюОпцию("ПередачаТоваровМеждуОрганизациями") Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРезервыТоваровОрганизаций", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	Запрос.УстановитьПараметр("ТоварЗарезервирован", СтруктураДополнительныеСвойства.ДляПроведения.ТоварЗарезервирован);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСерииНоменклатуры.КлючСвязи КАК КлючСвязи,
	|	СУММА(ТаблицаСерииНоменклатуры.Количество) КАК Количество
	|ПОМЕСТИТЬ СерииСвернуто
	|ИЗ
	|	ВременнаяТаблицаСерииНоменклатуры КАК ТаблицаСерииНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСерииНоменклатуры.КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Дата КАК Период,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВЫРАЗИТЬ(ТаблицаЗапасы.СтруктурнаяЕдиница КАК Справочник.СтруктурныеЕдиницы).ОрдерныйСклад КАК ОрдерныйСклад,
	|	ТаблицаЗапасы.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ТаблицаЗапасы.Ячейка КАК Ячейка,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка) КАК НомерГТД,
	|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка) КАК СтранаПроисхождения,
	|	ТаблицаСерииНоменклатуры.Серия КАК Серия,
	|	ТаблицаСерииНоменклатуры.ОстаткиСерийНоменклатуры КАК СерияСОстатком,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.Резерв > 0
	|			ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказРезерваСписание,
	|	ТаблицаСерииНоменклатуры.Количество КАК Количество
	|ПОМЕСТИТЬ ЗапасыДляРезервовТоваровОрганизаций
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСерииНоменклатуры КАК ТаблицаСерииНоменклатуры
	|		ПО ТаблицаЗапасы.КлючСвязи = ТаблицаСерииНоменклатуры.КлючСвязи
	|ГДЕ
	|	ТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И (&ЧекПробит
	|			ИЛИ &ТоварЗарезервирован)
	|	И НЕ &Архивный
	|	И НЕ &ОперацияСДенежнымиСредствами
	|	И НЕ ТаблицаСерииНоменклатуры.Серия ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаЗапасы.НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаЗапасы.Дата,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ВЫРАЗИТЬ(ТаблицаЗапасы.СтруктурнаяЕдиница КАК Справочник.СтруктурныеЕдиницы).ОрдерныйСклад,
	|	ТаблицаЗапасы.ХозяйственнаяОперация,
	|	ТаблицаЗапасы.Ячейка,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	|	ЛОЖЬ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.Резерв > 0
	|			ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаЗапасы.Количество - ТаблицаЗапасы.Резерв - ЕСТЬNULL(СерииСвернуто.Количество, 0)
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ СерииСвернуто КАК СерииСвернуто
	|		ПО ТаблицаЗапасы.КлючСвязи = СерииСвернуто.КлючСвязи
	|ГДЕ
	|	ТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И (&ЧекПробит
	|			ИЛИ &ТоварЗарезервирован)
	|	И НЕ &Архивный
	|	И НЕ &ОперацияСДенежнымиСредствами";
	Запрос.Выполнить();
	
	ИнтеркампаниСервер.СформироватьТаблицаРезервыТоваровОрганизаций(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаУправленческий(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Если СтруктураДополнительныеСвойства.ОптимизированнаяСхемаДвижений Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаУправленческий", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПереводыВПути", ПланыСчетов.Управленческий.ПереводыВПути);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ТаблицаУправленческий.НомерСтроки КАК НомерСтроки,
	|	ТаблицаУправленческий.Дата КАК Период,
	|	ТаблицаУправленческий.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ТаблицаУправленческий.КассаККМСчетУчета КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Управленческий.РасчетыСПоставщиками)
	|		ИНАЧЕ ТаблицаУправленческий.СчетУчетаВыручкиОтПродаж
	|	КОНЕЦ КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии
	|			ТОГДА ТаблицаУправленческий.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалКт,
	|	ТаблицаУправленческий.Сумма КАК Сумма,
	|	&ОтражениеВыручки КАК Содержание
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаУправленческий
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ОперацияСДенежнымиСредствами
	|	И НЕ ТаблицаУправленческий.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаУправленческий.Ссылка.Контрагент.СчетУчетаАвансовПокупателя,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.Ссылка.Контрагент.СчетУчетаАвансовПокупателя.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.Ссылка.Контрагент.СчетУчетаАвансовПокупателя.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.КассаККМСчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.Сумма,
	|	&ЗачетАванса
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаУправленческий
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ВозвратРассрочки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаУправленческий.КассаККМСчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	&СчетУчетаАвансовПокупателя,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	ТаблицаУправленческий.Сумма,
	|	&ВозникновениеАвансаПокупателя
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаУправленческий
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ОперацияСДенежнымиСредствами
	|	И ТаблицаУправленческий.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаУправленческий.КассаККМ.СчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМ.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМ.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.СчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.Сумма,
	|	&ВозникновениеАвансаПокупателя
	|ИЗ
	|	ВременнаяТаблицаРасчетыСПокупателями КАК ТаблицаУправленческий
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ВозвратРассрочки
	|	И &ОперацияСДенежнымиСредствами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	5,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаУправленческий.ЭквайринговыйТерминалСчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ЭквайринговыйТерминалСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ЭквайринговыйТерминалСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.КассаККМСчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.Сумма,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.БанковскаяКарта)
	|			ТОГДА &ОтражениеОплатыПлатежнымиКартами
	|		КОГДА ТаблицаУправленческий.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.СБП)
	|			ТОГДА &СодержаниеПроводкиОплатаСБП
	|		КОГДА ТаблицаУправленческий.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.Кредит)
	|			ТОГДА &ОтражениеОплатыКредитом
	|		КОГДА ТаблицаУправленческий.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ВыдачаНаличных)
	|			ТОГДА &ОтражениеВыдачиНаличных
	|		ИНАЧЕ """"
	|	КОНЕЦ
	|ИЗ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ТаблицаУправленческий
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И ТаблицаУправленческий.ВидОплаты В (ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.БанковскаяКарта), ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.Кредит), ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.СБП), ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ВыдачаНаличных))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	6,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	&СчетУчетаАвансовПокупателя,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	ТаблицаУправленческий.КассаККМСчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.Сумма,
	|	&ЗачетАванса
	|ИЗ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ТаблицаУправленческий
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ВозвратРассрочки
	|	И ТаблицаУправленческий.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	7,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаУправленческий.СчетУчета
	|		ИНАЧЕ &ОтрицательнаяКурсоваяРазницаСчетУчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|				И ТаблицаУправленческий.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА &ПоложительнаяКурсоваяРазницаСчетУчета
	|		ИНАЧЕ ТаблицаУправленческий.СчетУчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы < 0
	|				И ТаблицаУправленческий.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаУправленческий.СуммаКурсовойРазницы
	|		ИНАЧЕ -ТаблицаУправленческий.СуммаКурсовойРазницы
	|	КОНЕЦ,
	|	&КурсоваяРазница
	|ИЗ
	|	ВременнаяТаблицаКурсовыхРазницДенежныеСредстваВКассахККМ КАК ТаблицаУправленческий
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	8,
	|	1,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаРассрочки
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.КассаККМСчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаРассрочки
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ТаблицаУправленческий.СуммаРассрочки,
	|	&ОтражениеВыручки
	|ИЗ
	|	ВременнаяТаблицаРасшифровкаПлатежа КАК ТаблицаУправленческий
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ОперацияСДенежнымиСредствами
	|	И ТаблицаУправленческий.СуммаРассрочки > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	9,
	|	1,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаУправленческий.КассаККМСчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА &СуммаВозвратаРассрочки
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем.Валютный
	|			ТОГДА &СуммаВозвратаРассрочки
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	&СуммаВозвратаРассрочки,
	|	&ОтражениеОплатыДолга
	|ИЗ
	|	ВременнаяТаблицаРасшифровкаПлатежа КАК ТаблицаУправленческий
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И &ОперацияСДенежнымиСредствами
	|	И &ВозвратРассрочки
	|	И &СуммаВозвратаРассрочки > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ОтражениеВыручки", НСтр("ru = 'Выручка от продажи'"));
	Запрос.УстановитьПараметр("ВозникновениеАвансаПокупателя", НСтр("ru = 'Возникновение аванса покупателя'"));
	Запрос.УстановитьПараметр("ОтражениеОплатыПлатежнымиКартами", НСтр("ru = 'Оплата платежными картами'"));
	Запрос.УстановитьПараметр("ОтражениеВыдачиНаличных", НСтр("ru = 'Выдача наличных с платежной карты'"));
	Запрос.УстановитьПараметр("СодержаниеПроводкиОплатаСБП", НСтр("ru = 'Оплата СБП'"));
	Запрос.УстановитьПараметр("ЗачетАванса", НСтр("ru='Зачет предоплаты'"));
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Запрос.УстановитьПараметр("ПоложительнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ОтрицательнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеРасходы);
	Запрос.УстановитьПараметр("ОтражениеОплатыКредитом", НСтр("ru = 'Оплата кредитом'"));
	Запрос.УстановитьПараметр("СчетУчетаРасчетовСБанком", ПланыСчетов.Управленческий.РасчетыСРазнымиДебиторами);
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	Запрос.УстановитьПараметр("ОтражениеОплатыДолга", НСтр("ru = 'Оплата долга'"));
	Запрос.УстановитьПараметр("ВозвратРассрочки", СтруктураДополнительныеСвойства.ДляПроведения.ВозвратРассрочки);
	Запрос.УстановитьПараметр("СуммаВозвратаРассрочки", СтруктураДополнительныеСвойства.ДляПроведения.СуммаВозвратаРассрочки);
	
	
	Для Каждого КлючИЗначение Из СтруктураДополнительныеСвойства.ДляСертификатов Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяПроводка = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяПроводка, Выборка);
	КонецЦикла;
	
КонецПроцедуры // СформироватьТаблицаУправленческий()

#Область СБП

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОплатаСБП(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЧекККМ);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаРасшифровкаПлатежа.Сумма КАК Сумма,
	|	ТаблицаРасшифровкаПлатежа.ЭквайринговыйТерминал КАК СпособОплаты,
	|	ДанныеДокумента.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ИЗ
	|	Документ.ЧекККМ КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОплатаПлатежнымиКартами КАК ТаблицаРасшифровкаПлатежа
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И ТаблицаРасшифровкаПлатежа.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.СБП)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаСБП", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаОплатаСБП()

#КонецОбласти

#Область Промокоды

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПромокоды(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаШапка.Дата КАК Период,
	|	Промокоды.Промокод КАК Промокод,
	|	Промокоды.УсловиеПредоставленияСкидки КАК УсловиеПредоставленияСкидки,
	|	Промокоды.ДействуетС КАК ДействуетС,
	|	Промокоды.ДействуетДо КАК ДействуетДо,
	|	Промокоды.Конечный КАК Конечный
	|ИЗ
	|	ВременнаяТаблицаПромокоды КАК Промокоды,
	|	ВременнаяТаблицаШапка КАК ТаблицаШапка
	|ГДЕ
	|	Промокоды.ЭтоАктивацияПромокода
	|	И &ЧекПробит
	|	И НЕ &Архивный";
	
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПромокоды", РезультатЗапроса.Выгрузить());
		
КонецПроцедуры // СформироватьТаблицаЗапасы()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПрименениеПромокодов(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПараметрыУсловий.Ссылка КАК УсловиеПредоставленияСкидки,
	|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	СУММА(СкидкиНаценки.Сумма) КАК Сумма
	|ПОМЕСТИТЬ втСуммыСработавшихУсловий 
	|ИЗ
	|	ВременнаяТаблицаАвтоСкидкиНаценки КАК СкидкиНаценки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АвтоматическиеСкидки.УсловияПредоставления КАК УсловияСкидок
	|		ПО (УсловияСкидок.Ссылка = СкидкиНаценки.СкидкаНаценка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок КАК ПараметрыУсловий
	|		ПО (ПараметрыУсловий.Ссылка = УсловияСкидок.УсловиеПредоставления)
	|			И (ПараметрыУсловий.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаПромокод))
	|
	|СГРУППИРОВАТЬ ПО
	|	СкидкиНаценки.СкидкаНаценка,
	|	ПараметрыУсловий.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаШапка.Дата КАК Период,
	|	ТаблицаПромокоды.Промокод КАК Промокод,
	|	ПримененныеСкидки.СкидкаНаценка КАК СкидкаНаценка,
	|	1 КАК Количество,
	|	ПримененныеСкидки.Сумма КАК СуммаСкидки
	|ИЗ
	|	ВременнаяТаблицаПромокоды КАК ТаблицаПромокоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСуммыСработавшихУсловий КАК ПримененныеСкидки
	|		ПО ТаблицаПромокоды.УсловиеПредоставленияСкидки = ПримененныеСкидки.УсловиеПредоставленияСкидки,
	|	ВременнаяТаблицаШапка КАК ТаблицаШапка
	|ГДЕ
	|	НЕ ТаблицаПромокоды.ЭтоАктивацияПромокода
	|	И &ЧекПробит
	|	И НЕ &Архивный";
	
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПрименениеПромокодов", РезультатЗапроса.Выгрузить());

КонецПроцедуры

Процедура СформироватьТаблицаДоступностьПромокодов(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаШапка.Дата КАК Период,
	|	ТаблицаПромокоды.Промокод КАК Промокод,
	|	1 КАК Доступно
	|ИЗ
	|	ВременнаяТаблицаПромокоды КАК ТаблицаПромокоды,
	|	ВременнаяТаблицаШапка КАК ТаблицаШапка
	|ГДЕ
	|	НЕ ТаблицаПромокоды.ЭтоАктивацияПромокода
	|	И ТаблицаПромокоды.Конечный
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаШапка.Дата,
	|	ТаблицаПромокоды.Промокод,
	|	ТаблицаПромокоды.Доступно
	|ИЗ
	|	ВременнаяТаблицаПромокоды КАК ТаблицаПромокоды,
	|	ВременнаяТаблицаШапка КАК ТаблицаШапка
	|ГДЕ
	|	ТаблицаПромокоды.ЭтоАктивацияПромокода
	|	И ТаблицаПромокоды.Конечный
	|	И &ЧекПробит
	|	И НЕ &Архивный";
	
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоступностьПромокодов", РезультатЗапроса.Выгрузить());
		
КонецПроцедуры // СформироватьТаблицаЗапасы()

#КонецОбласти

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
Процедура ИнициализироватьДанныеДокумента(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	Если НЕ СтруктураДополнительныеСвойства.Свойство("УчетнаяПолитика") Тогда // ЕГАИС
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОстаткиАлкогольнойПродукцииЕГАИС", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаИнициализироватьДанныеДокумента();
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЧекККМ);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	Запрос.УстановитьПараметр("СуммаВозвратаРассрочки", СтруктураДополнительныеСвойства.ДляПроведения.СуммаВозвратаРассрочки);
	Запрос.УстановитьПараметр("СуммаРассрочки", СтруктураДополнительныеСвойства.ДляПроведения.СуммаРассрочки);
	
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылкаЧекККМ, "Организация,СтруктурнаяЕдиница,ЭквайринговыйТерминал");
	
	Запрос.УстановитьПараметр("ЭквайринговыйТерминал", СтруктураРеквизитов.ЭквайринговыйТерминал);
	Запрос.УстановитьПараметр("ИспользоватьСерииНоменклатуры", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерииНоменклатуры);
	Запрос.УстановитьПараметр("ОстаткиСерийНоменклатуры", СтруктураДополнительныеСвойства.УчетнаяПолитика.ОстаткиСерийНоменклатуры);
	
	ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(СтруктураРеквизитов.Организация, СтруктураРеквизитов.СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	Запрос.УстановитьПараметр("СтавкаБезНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
	
	Запрос.ВыполнитьПакет();
	
	КонтрольОстатковУНФ.КонтрольПересчетаКоличества(Запрос.МенеджерВременныхТаблиц, СтруктураДополнительныеСвойства.Отказ);
	Если СтруктураДополнительныеСвойства.Отказ Тогда
		Возврат;	
	КонецЕсли;
	
	// Формирование проводок документа.
	ПроведениеДокументовУНФ.СформироватьТаблицуПроводок(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаЗапасыНаСкладах(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДенежныеСредстваВКассахККМ(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходы(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходыНераспределенные(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходыКассовыйМетод(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	СформироватьТаблицаПродажи(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	
	// ДисконтныеКарты
	СформироватьТаблицаПродажиПоДисконтнойКарте(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	// АвтоматическиеСкидки
	СформироватьТаблицаПродажиПоПредоставленнымСкидкам(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	// Эквайринг
	СформироватьТаблицаОплатаПлатежнымиКартами(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	// СБП
    СформироватьТаблицаОплатаСБП(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	
	// Серии
	СформироватьТаблицаСерииНоменклатуры(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	
	// Подарочные сертификаты
	СформироватьТаблицаПодарочныеСертификаты(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	СформироватьТаблицаОплатаПодарочнымиСертификатами(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	СформироватьТаблицаРасчетыСПокупателями(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	
	// Бонусы
	СформироватьТаблицаБонусныеБаллы(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	СформироватьТаблицаНачисленияБонусныхБаллов(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	
	// Промокоды
	СформироватьТаблицаПромокоды(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства); // Регистрация новых выданных промокодов
	СформироватьТаблицаПрименениеПромокодов(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства); // Гашение примененных промокодов
	СформироватьТаблицаДоступностьПромокодов(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства); // Оборот скидок, предоставленных по примененным промокодам
	
	// Заказы покупателей в розничной торговле
	СформироватьТаблицаЗаказыПокупателей(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	СформироватьТаблицаПлатежныйКалендарь(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	Если СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами
		И СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит
		И Не СтруктураДополнительныеСвойства.ДляПроведения.Архивный Тогда
		РасчетыПроведениеДокументов.СформироватьТаблицаОплатаСчетовИЗаказовДенежныеДокументы(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	КонецЕсли;
	СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаЗапасы(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	СформироватьТаблицаРезервыТоваровОрганизаций(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаОстаткиАлкогольнойПродукцииЕГАИС(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаУправленческий(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

Функция ТекстЗапросаИнициализироватьДанныеДокумента()
	
	Возврат
	"ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК Ссылка,
	|	ЧекККМ.Дата КАК Дата,
	|	ЧекККМ.Дата КАК Период,
	|	ЧекККМ.Организация КАК Организация,
	|	ЧекККМ.Контрагент КАК Контрагент,
	|	ЧекККМ.Договор КАК Договор,
	|	ЧекККМ.Заказ КАК Заказ,
	|	ВЫБОР
	|		КОГДА ЧекККМ.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА ЧекККМ.Ссылка
	|		ИНАЧЕ ЧекККМ.Заказ
	|	КОНЕЦ КАК Документ,
	|	ЧекККМ.КассаККМ КАК КассаККМ,
	|	ЧекККМ.КассаККМ.Владелец КАК КассаККМВладелец,
	|	ЧекККМ.КассаККМ.СчетУчета КАК КассаККМСчетУчета,
	|	ЧекККМ.ВалютаДокумента КАК ВалютаДокумента,
	|	ЧекККМ.ВалютаДокумента КАК ВалютаДенежныхСредств,
	|	ЧекККМ.Заказ.ВалютаДокумента КАК ВалютаЗаказа,
	|	ЧекККМ.Заказ.Договор.ВалютаРасчетов КАК ВалютаРасчетовДоговора,
	|	ЧекККМ.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ЧекККМ.Договор.ВалютаРасчетов КАК ДоговорВалютаРасчетов,
	|	ЧекККМ.СуммаДокумента КАК Сумма,
	|	ЧекККМ.СуммаДокумента КАК СуммаВал,
	|	ЧекККМ.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЧекККМ.КассоваяСмена КАК КассоваяСмена,
	|	ЧекККМ.НДСВключатьВСтоимость КАК НДСВключатьВСтоимость,
	|	ЧекККМ.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	ЧекККМ.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ЧекККМ.Контрагент.ВестиРасчетыПоДоговорам КАК ВестиРасчетыПоДоговорам,
	|	ЧекККМ.Контрагент.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам,
	|	ЧекККМ.СпособЗачетаПредоплаты КАК СпособЗачетаПредоплаты,
	|	ЧекККМ.Курс КАК Курс,
	|	ЧекККМ.Кратность КАК Кратность,
	|	ЧекККМ.Подразделение КАК Подразделение,
	|	ЧекККМ.Ячейка КАК Ячейка,
	|	ВЫБОР
	|		КОГДА ЧекККМ.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И ЧекККМ.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(ЧекККМ.Заказ КАК Документ.ЗаказПокупателя).УчетПотребностиПоСкладам
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчетПотребностиПоСкладам,
	|	ВЫБОР
	|		КОГДА ЧекККМ.ПоложениеОтветственный В (ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке), ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ПустаяСсылка))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОтветственныйВШапке,
	|	ЧекККМ.Ответственный КАК Ответственный,
	|	ВЫБОР
	|		КОГДА ЧекККМ.ПоложениеСклада В (ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке), ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ПустаяСсылка))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтруктурнаяЕдиницаВШапке,
	|	ВЫБОР
	|		КОГДА ЧекККМ.ПоложениеСклада В (ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке), ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ПустаяСсылка))
	|			ТОГДА ЧекККМ.СтруктурнаяЕдиница
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК СтруктурнаяЕдиница,
	|	ЧекККМ.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
	|	ЧекККМ.ДисконтнаяКарта.Владелец.БонуснаяПрограмма КАК БонуснаяПрограмма
	|ПОМЕСТИТЬ ВременнаяТаблицаШапка
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонстантаВалютаУчета.Значение КАК Валюта,
	|	ИСТИНА КАК ЭтоВалютаУчета,
	|	NULL КАК ЭтоНациональнаяВалюта,
	|	NULL КАК ЭтоВалютаДокумента,
	|	NULL КАК ЭтоВалютаЗаказа,
	|	NULL КАК ЭтоВалютаДоговора
	|ПОМЕСТИТЬ ВалютыДокумента
	|ИЗ
	|	Константа.ВалютаУчета КАК КонстантаВалютаУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонстантаНациональнаяВалюта.Значение,
	|	NULL,
	|	ИСТИНА,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаШапка.ВалютаДокумента,
	|	NULL,
	|	NULL,
	|	ИСТИНА,
	|	NULL,
	|	NULL
	|ИЗ
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаШапка.ВалютаЗаказа,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ИСТИНА,
	|	NULL
	|ИЗ
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаШапка.ВалютаРасчетовДоговора,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ИСТИНА
	|ИЗ
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВалютыДокумента.Валюта КАК Валюта,
	|	МАКСИМУМ(ВалютыДокумента.ЭтоВалютаУчета) КАК ЭтоВалютаУчета,
	|	МАКСИМУМ(ВалютыДокумента.ЭтоНациональнаяВалюта) КАК ЭтоНациональнаяВалюта,
	|	МАКСИМУМ(ВалютыДокумента.ЭтоВалютаДокумента) КАК ЭтоВалютаДокумента,
	|	МАКСИМУМ(ВалютыДокумента.ЭтоВалютаЗаказа) КАК ЭтоВалютаЗаказа,
	|	МАКСИМУМ(ВалютыДокумента.ЭтоВалютаДоговора) КАК ЭтоВалютаДоговора,
	|	КурсыВалют.Курс КАК Курс,
	|	КурсыВалют.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВТКурсыВалют
	|ИЗ
	|	ВалютыДокумента КАК ВалютыДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВалютыДокумента.Валюта
	|					ИЗ
	|						ВалютыДокумента КАК ВалютыДокумента)) КАК КурсыВалют
	|		ПО ВалютыДокумента.Валюта = КурсыВалют.Валюта
	|
	|СГРУППИРОВАТЬ ПО
	|	ВалютыДокумента.Валюта,
	|	КурсыВалют.Курс,
	|	КурсыВалют.Кратность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК НомерСтроки,
	|	ЧекККМ.Ссылка КАК Ссылка,
	|	ЧекККМ.Дата КАК Дата,
	|	&Организация КАК Организация,
	|	ЧекККМ.Контрагент КАК Контрагент,
	|	ЧекККМ.Договор КАК Договор,
	|	ЧекККМ.Заказ КАК Заказ,
	|	ЧекККМ.Ссылка КАК Документ,
	|	ЧекККМ.КассаККМ КАК КассаККМ,
	|	ЧекККМ.КассаККМ.СчетУчета КАК КассаККМСчетУчета,
	|	ЧекККМ.ВалютаДокумента КАК ВалютаДокумента,
	|	ЧекККМ.ВалютаДокумента КАК ВалютаДенежныхСредств,
	|	ЧекККМ.ВалютаДокумента КАК ВалютаРасчетов,
	|	ЧекККМ.СуммаДокумента КАК СуммаПлатежа,
	|	ЧекККМ.СуммаДокумента КАК СуммаРасчетов,
	|	ЧекККМ.СуммаДокумента КАК СуммаУчета,
	|	ЧекККМ.СуммаДокумента КАК Сумма,
	|	ЧекККМ.СуммаДокумента КАК СуммаВал,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаИРаспределенияПлатежей.Вручную) КАК СпособЗачета,
	|	ЧекККМ.Контрагент.ВестиРасчетыПоДоговорам КАК ВестиРасчетыПоДоговорам,
	|	ЧекККМ.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ЧекККМ.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	ЧекККМ.Контрагент.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам,
	|	ИСТИНА КАК ПризнакАванса,
	|	1 КАК Курс,
	|	1 КАК Кратность,
	|	&СтавкаБезНДС КАК СтавкаНДС,
	|	0 КАК СуммаНДС,
	|	ЗНАЧЕНИЕ(Документ.СчетНаОплату.ПустаяСсылка) КАК СчетНаОплату,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеВКассу.ОтПокупателя) КАК ВидОперации,
	|	ЧекККМ.Контрагент.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|	&СуммаРассрочки КАК СуммаРассрочки,
	|	&СуммаВозвратаРассрочки КАК СуммаВозвратаРассрочки
	|ПОМЕСТИТЬ ВременнаяТаблицаРасшифровкаПлатежа
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЧекККМЗапасы.Ссылка КАК Ссылка,
	|	ЧекККМЗапасы.Ссылка КАК Документ,
	|	ВременнаяТаблицаШапка.Контрагент КАК Контрагент,
	|	ВременнаяТаблицаШапка.Дата КАК Дата,
	|	ЧекККМЗапасы.Заказ КАК ЗаказПокупателя,
	|	ВременнаяТаблицаШапка.УчетПотребностиПоСкладам КАК УчетПотребностиПоСкладам,
	|	ВременнаяТаблицаШапка.КассаККМ КАК КассаККМ,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ОтветственныйВШапке
	|			ТОГДА ВременнаяТаблицаШапка.Ответственный
	|		ИНАЧЕ ЧекККМЗапасы.Ответственный
	|	КОНЕЦ КАК ответственный,
	|	ВременнаяТаблицаШапка.КассаККМВладелец КАК КассаККМВладелец,
	|	ВременнаяТаблицаШапка.КассаККМСчетУчета КАК КассаККМСчетУчета,
	|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДокумента,
	|	&Организация КАК Организация,
	|	ВременнаяТаблицаШапка.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.СтруктурнаяЕдиницаВШапке
	|			ТОГДА ВременнаяТаблицаШапка.СтруктурнаяЕдиница
	|		ИНАЧЕ ЧекККМЗапасы.СтруктурнаяЕдиница
	|	КОНЕЦ КАК СтруктурнаяЕдиница,
	|	ВременнаяТаблицаШапка.Подразделение КАК Подразделение,
	|	ЧекККМЗапасы.Номенклатура.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЧекККМЗапасы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЧекККМЗапасы.Номенклатура.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж КАК СчетУчетаВыручкиОтПродаж,
	|	ЧекККМЗапасы.Номенклатура.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж КАК СчетУчетаСебестоимость,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.СтруктурнаяЕдиницаВШапке
	|			ТОГДА ВременнаяТаблицаШапка.Ячейка
	|		ИНАЧЕ ЧекККМЗапасы.Ячейка
	|	КОНЕЦ КАК Ячейка,
	|	ЧекККМЗапасы.Номенклатура.СчетУчетаЗапасов КАК СчетУчетаЗапасов,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|				И ЧекККМЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТоварыНаКомиссии,
	|	ЧекККМЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЧекККМЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ЧекККМЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЧекККМЗапасы.ХарактеристикаНабора
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК ХарактеристикаНабора,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ЧекККМЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЧекККМЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЧекККМЗапасы.Количество
	|		ИНАЧЕ ЧекККМЗапасы.Количество * ЧекККМЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	ЧекККМЗапасы.Количество КАК КоличествоДокумент,
	|	ЧекККМЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДокумент,
	|	ЧекККМЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВременнаяТаблицаШапка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ЧекККМЗапасы.СуммаНДС * КурсыДокВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыДокВалюты.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ЧекККМЗапасы.СуммаНДС * КурсыДокВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыДокВалюты.Кратность) КАК ЧИСЛО(15, 2)) КАК СуммаНДСЗакупкиПродажи,
	|	ВЫРАЗИТЬ(ЧекККМЗапасы.Всего * КурсыДокВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыДокВалюты.Кратность) КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВЫРАЗИТЬ(ЧекККМЗапасы.СуммаНДС КАК ЧИСЛО(15, 2)) КАК СуммаНДСВал,
	|	ВЫРАЗИТЬ(ЧекККМЗапасы.Всего КАК ЧИСЛО(15, 2)) КАК СуммаВал,
	|	ВЫРАЗИТЬ(ЧекККМЗапасы.Всего КАК ЧИСЛО(15, 2)) КАК ВсегоВалютаДокумента,
	|	ЧекККМЗапасы.КлючСвязи КАК КлючСвязи,
	|	НЕОПРЕДЕЛЕНО КАК КоррСтруктурнаяЕдиница,
	|	НЕОПРЕДЕЛЕНО КАК КоррНоменклатура,
	|	НЕОПРЕДЕЛЕНО КАК КоррСчетУчетаЗапасов,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЧекККМЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК КоррХарактеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ЧекККМЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК КоррПартия,
	|	ВременнаяТаблицаШапка.КассоваяСмена КАК КассоваяСмена,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЧекККМЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЧекККМЗапасы.Резерв
	|		ИНАЧЕ ЧекККМЗапасы.Резерв * ЧекККМЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Резерв,
	|	ВременнаяТаблицаШапка.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЧекККМЗапасы.Номенклатура.ПроизвольныйНоминал
	|				ТОГДА ЧекККМЗапасы.Сумма / ВЫБОР
	|						КОГДА ЧекККМЗапасы.Номенклатура.ИспользоватьСерииНоменклатуры
	|							ТОГДА ЧекККМЗапасы.Количество
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|			ИНАЧЕ ЧекККМЗапасы.Номенклатура.Номинал / ВЫБОР
	|					КОГДА ЧекККМЗапасы.Номенклатура.ИспользоватьСерииНоменклатуры
	|						ТОГДА 1
	|					ИНАЧЕ 1 / ЧекККМЗапасы.Количество
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК НоминалСертификата,
	|	ЧекККМЗапасы.Номенклатура.ЧастичноеПогашение КАК ЧастичноеПогашениеСертификата,
	|	ЧекККМЗапасы.Номенклатура.ПроизвольныйНоминал КАК ПроизвольныйНоминал,
	|	ЧекККМЗапасы.Номенклатура.СчетУчетаЗатрат КАК СчетУчетаЗатрат,
	|	ЧекККМЗапасы.Номенклатура.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры,
	|	ЧекККМЗапасы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	ЧекККМЗапасы.Цена КАК Цена,
	|	ЧекККМЗапасы.СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом,
	|	ЧекККМЗапасы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ЧекККМЗапасы.ПродажаПодарка КАК ПродажаПодарка,
	|	ЕСТЬNULL(ПолитикиУчетаСерий.ПолитикаУчетаСерий, ЧекККМЗапасы.Номенклатура.ПолитикаУчетаСерий) КАК ПолитикаУчетаСерий,
	|	ЧекККМЗапасы.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалют КАК КурсыУпрВалюты
	|		ПО (КурсыУпрВалюты.ЭтоВалютаУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалют КАК КурсыДокВалюты
	|		ПО (КурсыДокВалюты.ЭтоВалютаДокумента)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО ЧекККМЗапасы.Номенклатура = ПолитикиУчетаСерий.Владелец
	|			И ЧекККМЗапасы.СтруктурнаяЕдиница = ПолитикиУчетаСерий.СтруктурнаяЕдиница
	|			И (&Организация = ПолитикиУчетаСерий.Организация),
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ЧекККМЗапасы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаШапка.Дата КАК Дата,
	|	&Ссылка КАК Документ,
	|	&Организация КАК Организация,
	|	ВременнаяТаблицаШапка.КассаККМ КАК КассаККМ,
	|	ВременнаяТаблицаШапка.КассаККМСчетУчета КАК КассаККМСчетУчета,
	|	ТабличнаяЧасть.ЭквайринговыйТерминал.СчетУчета КАК ЭквайринговыйТерминалСчетУчета,
	|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * КурсыВалютКассы.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютКассы.Кратность) КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.СуммаКомиссии * КурсыВалютКассы.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютКассы.Кратность) КАК ЧИСЛО(15, 2)) КАК СуммаКомиссии,
	|	ТабличнаяЧасть.Сумма КАК СуммаВал,
	|	ТабличнаяЧасть.СуммаКомиссии КАК СуммаКомиссииВал,
	|	ТабличнаяЧасть.ВидОплаты КАК ВидОплаты,
	|	ТабличнаяЧасть.ВидПлатежнойКарты КАК ВидПлатежнойКарты,
	|	ТабличнаяЧасть.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
	|	ТабличнаяЧасть.ЭквайринговыйТерминал.Эквайрер КАК Эквайрер,
	|	ТабличнаяЧасть.ЭквайринговыйТерминал.Договор КАК Договор,
	|	ТабличнаяЧасть.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|	ТабличнаяЧасть.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	ТабличнаяЧасть.НомерСертификата КАК НомерСертификата,
	|	ТабличнаяЧасть.ПодарочныйСертификат.ЧастичноеПогашение КАК ЧастичноеПогашение,
	|	ТабличнаяЧасть.ПодарочныйСертификат.Номинал КАК Номинал,
	|	ВременнаяТаблицаШапка.Подразделение КАК Подразделение,
	|	ТабличнаяЧасть.ПодарочныйСертификат.СчетУчетаДоходов КАК СчетУчетаДоходов,
	|	ТабличнаяЧасть.ПодарочныйСертификат.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры,
	|	ТабличнаяЧасть.Сумма КАК СуммаСертификата,
	|	ВременнаяТаблицаШапка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВременнаяТаблицаШапка.Заказ КАК Заказ,
	|	ВременнаяТаблицаШапка.Контрагент КАК Контрагент,
	|	ТабличнаяЧасть.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента
	|ПОМЕСТИТЬ ВременнаяТаблицаОплатаПлатежнымиКартами
	|ИЗ
	|	Документ.ЧекККМ.БезналичнаяОплата КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалют КАК КурсыВалютУчетаСрезПоследних
	|		ПО (КурсыВалютУчетаСрезПоследних.ЭтоВалютаУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалют КАК КурсыВалютКассы
	|		ПО (КурсыВалютКассы.ЭтоВалютаДокумента),
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМПредоплата.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаШапка.Дата КАК Дата,
	|	ЧекККМПредоплата.Документ КАК Документ,
	|	ЧекККМПредоплата.Заказ КАК Заказ,
	|	ЧекККМПредоплата.Курс КАК Курс,
	|	ЧекККМПредоплата.Кратность КАК Кратность,
	|	ВременнаяТаблицаШапка.КассаККМ КАК КассаККМ,
	|	ВременнаяТаблицаШапка.КассаККМСчетУчета КАК КассаККМСчетУчета,
	|	&Организация КАК Организация,
	|	ВременнаяТаблицаШапка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДокумента,
	|	ЧекККМПредоплата.СуммаРасчетов КАК Сумма,
	|	ЧекККМПредоплата.СуммаРасчетов КАК СуммаВал,
	|	ЧекККМПредоплата.СуммаРасчетов КАК СуммаРасчетов,
	|	ЧекККМПредоплата.СуммаПлатежа КАК СуммаПлатежа,
	|	ЧекККМПредоплата.Ссылка КАК Ссылка,
	|	ВременнаяТаблицаШапка.Контрагент КАК Контрагент,
	|	ВременнаяТаблицаШапка.Договор КАК Договор,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс) КАК ТипРасчетов,
	|	ЛОЖЬ КАК ОплатаСертификатом,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК НомерСертификата
	|ПОМЕСТИТЬ ВременнаяТаблицаПредоплата
	|ИЗ
	|	Документ.ЧекККМ.Предоплата КАК ЧекККМПредоплата,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ЧекККМПредоплата.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМСкидкиНаценки.КлючСвязи КАК КлючСвязи,
	|	ЧекККМСкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВременнаяТаблицаШапка.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|				ТОГДА ЧекККМСкидкиНаценки.Сумма * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ЧекККМСкидкиНаценки.Сумма * КурсыУпрВалюты.Кратность / КурсыУпрВалюты.Курс
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВременнаяТаблицаШапка.Дата КАК Период,
	|	ВременнаяТаблицаШапка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ВременнаяТаблицаАвтоСкидкиНаценки
	|ИЗ
	|	Документ.ЧекККМ.СкидкиНаценки КАК ЧекККМСкидкиНаценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалют КАК КурсыУпрВалюты
	|		ПО (КурсыУпрВалюты.ЭтоВалютаУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалют КАК КурсыРегВалюты
	|		ПО (КурсыРегВалюты.ЭтоНациональнаяВалюта),
	|	Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ЧекККМСкидкиНаценки.Ссылка = &Ссылка
	|	И ЧекККМСкидкиНаценки.Сумма <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭквайринговыеТерминалыВидыПлатежныхКарт.ВидПлатежнойКарты КАК ВидПлатежнойКарты,
	|	МАКСИМУМ(ЭквайринговыеТерминалыВидыПлатежныхКарт.ПроцентКомиссии) КАК ПроцентКомиссии
	|ПОМЕСТИТЬ ВременнаяТаблицаПроцентыКомиссии
	|ИЗ
	|	Справочник.СпособыОплаты.ВидыПлатежныхКарт КАК ЭквайринговыеТерминалыВидыПлатежныхКарт
	|ГДЕ
	|	ЭквайринговыеТерминалыВидыПлатежныхКарт.Ссылка = &ЭквайринговыйТерминал
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭквайринговыеТерминалыВидыПлатежныхКарт.ВидПлатежнойКарты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходнаяНакладнаяСерииНоменклатуры.КлючСвязи КАК КлючСвязи,
	|	РасходнаяНакладнаяСерииНоменклатуры.Серия КАК Серия,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяСерииНоменклатуры.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ РасходнаяНакладнаяСерииНоменклатуры.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаЗапасы.ПолитикаУчетаСерий = ЗНАЧЕНИЕ(Справочник.ПолитикаУчетаСерий.ПустаяСсылка)
	|			ТОГДА &ОстаткиСерийНоменклатуры
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВременнаяТаблицаЗапасы.ПолитикаУчетаСерий.ТипПолитики = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.УправлениеОстаткамиСерий)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ КАК ОстаткиСерийНоменклатуры
	|ПОМЕСТИТЬ ВременнаяТаблицаСерииНоменклатуры
	|ИЗ
	|	Документ.ЧекККМ.СерииНоменклатуры КАК РасходнаяНакладнаяСерииНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|		ПО (ВременнаяТаблицаЗапасы.КлючСвязи = РасходнаяНакладнаяСерииНоменклатуры.КлючСвязи)
	|ГДЕ
	|	РасходнаяНакладнаяСерииНоменклатуры.Ссылка = &Ссылка
	|	И &ИспользоватьСерииНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаАкцизныеМарки.Ссылка.Дата КАК Период,
	|	ТаблицаАкцизныеМарки.Ссылка КАК Ссылка,
	|	&ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ТаблицаАкцизныеМарки.Справка2 КАК Справка2,
	|	Справки2ЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаАкцизныеМарки.АкцизнаяМарка) КАК Количество,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаАкцизныеМарки.АкцизнаяМарка) КАК СвободныйОстаток
	|ПОМЕСТИТЬ ВременнаяТаблицаАкцизныеМарки
	|ИЗ
	|	Документ.ЧекККМ.АкцизныеМарки КАК ТаблицаАкцизныеМарки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Справки2ЕГАИС КАК Справки2ЕГАИС
	|		ПО (Справки2ЕГАИС.Ссылка = ТаблицаАкцизныеМарки.Справка2)
	|ГДЕ
	|	ТаблицаАкцизныеМарки.Ссылка = &Ссылка
	|	И ТаблицаАкцизныеМарки.Справка2 <> ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаАкцизныеМарки.Ссылка,
	|	ТаблицаАкцизныеМарки.Справка2,
	|	Справки2ЕГАИС.АлкогольнаяПродукция,
	|	ТаблицаАкцизныеМарки.Ссылка.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМБонусныеБаллыКНачислению.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаШапка.Дата КАК Период,
	|	ВременнаяТаблицаШапка.ДисконтнаяКарта КАК БонуснаяКарта,
	|	ЧекККМЗапасы.Номенклатура КАК Номенклатура,
	|	ЧекККМЗапасы.Характеристика КАК Характеристика,
	|	ЧекККМБонусныеБаллыКНачислению.КоличествоБонусныхБаллов КАК Количество,
	|	ЧекККМБонусныеБаллыКНачислению.ДатаНачисления КАК ДатаНачисления,
	|	ЧекККМБонусныеБаллыКНачислению.ДатаСписания КАК ДатаСгорания,
	|	ЧекККМБонусныеБаллыКНачислению.Ссылка КАК Ссылка,
	|	ЧекККМБонусныеБаллыКНачислению.СкидкаНаценка КАК АналитикаНачисленияБонусов
	|ПОМЕСТИТЬ ВременнаяТаблицаНачисленияБонусов
	|ИЗ
	|	Документ.ЧекККМ.БонусныеБаллыКНачислению КАК ЧекККМБонусныеБаллыКНачислению
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
	|		ПО ЧекККМБонусныеБаллыКНачислению.Ссылка = ЧекККМЗапасы.Ссылка
	|			И ЧекККМБонусныеБаллыКНачислению.КлючСвязи = ЧекККМЗапасы.КлючСвязи,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ЧекККМБонусныеБаллыКНачислению.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМБезналичнаяОплата.НомерСтроки КАК НомерСтроки,
	|	НАЧАЛОПЕРИОДА(ЧекККМБезналичнаяОплата.Ссылка.Дата, ДЕНЬ) КАК Период,
	|	ЧекККМБезналичнаяОплата.БонуснаяКарта КАК БонуснаяКарта,
	|	ЧекККМБезналичнаяОплата.СуммаБонусов КАК Количество,
	|	0 КАК КСписанию,
	|	ЧекККМБезналичнаяОплата.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВременнаяТаблицаСписанияБонусов
	|ИЗ
	|	Документ.ЧекККМ.БезналичнаяОплата КАК ЧекККМБезналичнаяОплата
	|ГДЕ
	|	ЧекККМБезналичнаяОплата.Ссылка = &Ссылка
	|	И ЧекККМБезналичнаяОплата.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.Бонусы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМПредоплата.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаШапка.Дата КАК Дата,
	|	ЧекККМПредоплата.Документ КАК Документ,
	|	ВременнаяТаблицаШапка.Заказ КАК Заказ,
	|	ЧекККМПредоплата.Курс КАК Курс,
	|	ЧекККМПредоплата.Кратность КАК Кратность,
	|	ВременнаяТаблицаШапка.КассаККМ КАК КассаККМ,
	|	ВременнаяТаблицаШапка.КассаККМСчетУчета КАК КассаККМСчетУчета,
	|	&Организация КАК Организация,
	|	ВременнаяТаблицаШапка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДокумента,
	|	ЧекККМПредоплата.СуммаРасчетов КАК Сумма,
	|	ЧекККМПредоплата.СуммаРасчетов КАК СуммаВал,
	|	ЧекККМПредоплата.СуммаРасчетов КАК СуммаРасчетов,
	|	ЧекККМПредоплата.СуммаПлатежа КАК СуммаПлатежа,
	|	ЧекККМПредоплата.Ссылка КАК Ссылка,
	|	ВременнаяТаблицаШапка.Контрагент КАК Контрагент,
	|	ВременнаяТаблицаШапка.Договор КАК Договор,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс) КАК ТипРасчетов,
	|	ЛОЖЬ КАК ОплатаСертификатом,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК НомерСертификата,
	|	&СуммаВозвратаРассрочки КАК СуммаВозвратаРассрочки
	|ПОМЕСТИТЬ ВременнаяТаблицаОплатаДолга
	|ИЗ
	|	Документ.ЧекККМ.Предоплата КАК ЧекККМПредоплата,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ЧекККМПредоплата.Ссылка = &Ссылка
	|	И &ОперацияСДенежнымиСредствами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыданныйПромокод.Ссылка КАК Ссылка,
	|	ВыданныйПромокод.НомерСтроки КАК НомерСтроки,
	|	ВыданныйПромокод.Промокод КАК Промокод,
	|	ВыданныйПромокод.УсловиеПредоставленияСкидки КАК УсловиеПредоставленияСкидки,
	|	ПараметрыГенерацииПромокода.КоличествоРазПрименения КАК Доступно,
	|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВременнаяТаблицаШапка.Дата, ДЕНЬ), ДЕНЬ, ПараметрыГенерацииПромокода.АктивироватьЧерезДней), ДЕНЬ) КАК ДействуетС,
	|	ВЫБОР
	|		КОГДА ПараметрыГенерацииПромокода.КоличествоДнейДействия = 0
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВременнаяТаблицаШапка.Дата, ДЕНЬ), ДЕНЬ, ПараметрыГенерацииПромокода.АктивироватьЧерезДней), ДЕНЬ), ДЕНЬ, ПараметрыГенерацииПромокода.КоличествоДнейДействия), СЕКУНДА, -1)
	|	КОНЕЦ КАК ДействуетДо,
	|	ВЫБОР
	|		КОГДА ПараметрыГенерацииПромокода.КоличествоРазПрименения = 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Конечный,
	|	ВыданныйПромокод.ЭтоАктивацияПромокода КАК ЭтоАктивацияПромокода
	|ПОМЕСТИТЬ ВременнаяТаблицаПромокоды
	|ИЗ
	|	Документ.ЧекККМ.ПримененныеПромокоды КАК ВыданныйПромокод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок КАК ПараметрыУсловия
	|		ПО (ПараметрыУсловия.Ссылка = ВыданныйПромокод.УсловиеПредоставленияСкидки)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныГенерацииПромокодов КАК ПараметрыГенерацииПромокода
	|		ПО (ПараметрыУсловия.ШаблонПромокода = ПараметрыГенерацииПромокода.Ссылка),
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВыданныйПромокод.Ссылка = &Ссылка
	|	И ВыданныйПромокод.ЭтоАктивацияПромокода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПредъявленныеПромокоды.Ссылка,
	|	ПредъявленныеПромокоды.НомерСтроки,
	|	ПредъявленныеПромокоды.Промокод,
	|	ПредъявленныеПромокоды.УсловиеПредоставленияСкидки,
	|	-1,
	|	ЗарегистрированныеПромокоды.ДействуетС,
	|	ЗарегистрированныеПромокоды.ДействуетДо,
	|	ЗарегистрированныеПромокоды.Конечный,
	|	ПредъявленныеПромокоды.ЭтоАктивацияПромокода
	|ИЗ
	|	Документ.ЧекККМ.ПримененныеПромокоды КАК ПредъявленныеПромокоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Промокоды КАК ЗарегистрированныеПромокоды
	|		ПО ПредъявленныеПромокоды.Промокод = ЗарегистрированныеПромокоды.Промокод
	|			И ПредъявленныеПромокоды.УсловиеПредоставленияСкидки = ЗарегистрированныеПромокоды.УсловиеПредоставленияСкидки
	|ГДЕ
	|	ПредъявленныеПромокоды.Ссылка = &Ссылка
	|	И ПредъявленныеПромокоды.СкидкаПредоставлена
	|	И НЕ ПредъявленныеПромокоды.ЭтоАктивацияПромокода";
	
КонецФункции

// Функция возвращает шаблон пакетного запроса.
//
Функция СформироватьШаблонПакетногоЗапроса()
	
	ТекстЗапроса =
	Символы.ПС +
	";
	|
	|////////////////////////////////////////////////////////////////////////////////"
	+ Символы.ПС;
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьШаблонПакетногоЗапроса()

// Функция возвращает текст запроса по остаткам регистра Запасы.
//
Функция СформироватьТекстЗапросаОстаткиЗапасы()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДвиженияЗапасыИзменение.НомерСтроки КАК НомерСтроки,
	|	ДвиженияЗапасыИзменение.Организация КАК ОрганизацияПредставление,
	|	ДвиженияЗапасыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
	|	ДвиженияЗапасыИзменение.СчетУчета КАК СчетУчетаПредставление,
	|	ДвиженияЗапасыИзменение.Номенклатура КАК НоменклатураПредставление,
	|	ДвиженияЗапасыИзменение.Характеристика КАК ХарактеристикаПредставление,
	|	ДвиженияЗапасыИзменение.Партия КАК ПартияПредставление,
	|	ДвиженияЗапасыИзменение.ЗаказПокупателя КАК ЗаказПокупателяПредставление,
	|	ЗапасыОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
	|	ЗапасыОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
	|	ЕСТЬNULL(ДвиженияЗапасыИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасы,
	|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасы,
	|	ЕСТЬNULL(ЗапасыОстатки.СуммаОстаток, 0) КАК СуммаОстатокЗапасы
	|ИЗ
	|	ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(&МоментКонтроля, Организация В (&МассивОрганизаций)) КАК ЗапасыОстатки
	|		ПО ДвиженияЗапасыИзменение.СтруктурнаяЕдиница = ЗапасыОстатки.СтруктурнаяЕдиница
	|			И ДвиженияЗапасыИзменение.СчетУчета = ЗапасыОстатки.СчетУчета
	|			И ДвиженияЗапасыИзменение.Номенклатура = ЗапасыОстатки.Номенклатура
	|			И ДвиженияЗапасыИзменение.Характеристика = ЗапасыОстатки.Характеристика
	|			И ДвиженияЗапасыИзменение.Партия = ЗапасыОстатки.Партия
	|			И ДвиженияЗапасыИзменение.ЗаказПокупателя = ЗапасыОстатки.ЗаказПокупателя
	|			И (ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) < 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + СформироватьШаблонПакетногоЗапроса();
	
КонецФункции // СформироватьТекстЗапросаОстаткиЗапасы()

// Функция возвращает текст запроса по остаткам регистра СерииНоменклатуры.
//
Функция СформироватьТекстЗапросаОстаткиСерииНоменклатуры()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДвиженияСерииНоменклатурыИзменение.НомерСтроки КАК НомерСтроки,
	|	ДвиженияСерииНоменклатурыИзменение.Серия КАК СерияПредставление,
	|	ДвиженияСерииНоменклатурыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
	|	ДвиженияСерииНоменклатурыИзменение.Номенклатура КАК НоменклатураПредставление,
	|	ДвиженияСерииНоменклатурыИзменение.Характеристика КАК ХарактеристикаПредставление,
	|	ДвиженияСерииНоменклатурыИзменение.Партия КАК ПартияПредставление,
	|	ДвиженияСерииНоменклатурыИзменение.Ячейка КАК ЯчейкаПредставление,
	|	СерииНоменклатурыОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
	|	СерииНоменклатурыОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
	|	ЕСТЬNULL(ДвиженияСерииНоменклатурыИзменение.КоличествоИзменение, 0) +
	|		ЕСТЬNULL(СерииНоменклатурыОстатки.КоличествоОстаток, 0) +
	|		ЕСТЬNULL(РезервыТоваровОрганизацийОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыНаСкладах,
	|	ЕСТЬNULL(СерииНоменклатурыОстатки.КоличествоОстаток, 0) +
	|		ЕСТЬNULL(РезервыТоваровОрганизацийОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыНаСкладах,
	|	ДвиженияСерииНоменклатурыИзменение.КоличествоИзменение КАК КоличествоИзменение
	|ИЗ
	|	ДвиженияСерииНоменклатурыИзменение КАК ДвиженияСерииНоменклатурыИзменение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СерииНоменклатуры.Остатки(&МоментКонтроля, Организация В (&МассивОрганизаций)
	|		И (Серия, СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия, Ячейка) В
	|			(ВЫБРАТЬ
	|				ДвиженияСерииНоменклатурыИзменение.Серия КАК Серия,
	|				ДвиженияСерииНоменклатурыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|				ДвиженияСерииНоменклатурыИзменение.Номенклатура КАК Номенклатура,
	|				ДвиженияСерииНоменклатурыИзменение.Характеристика КАК Характеристика,
	|				ДвиженияСерииНоменклатурыИзменение.Партия КАК Партия,
	|				ДвиженияСерииНоменклатурыИзменение.Ячейка КАК Ячейка
	|			ИЗ
	|				ДвиженияСерииНоменклатурыИзменение КАК ДвиженияСерииНоменклатурыИзменение)) КАК СерииНоменклатурыОстатки
	|		ПО ДвиженияСерииНоменклатурыИзменение.Серия = СерииНоменклатурыОстатки.Серия
	|		И ДвиженияСерииНоменклатурыИзменение.СтруктурнаяЕдиница = СерииНоменклатурыОстатки.СтруктурнаяЕдиница
	|		И ДвиженияСерииНоменклатурыИзменение.Номенклатура = СерииНоменклатурыОстатки.Номенклатура
	|		И ДвиженияСерииНоменклатурыИзменение.Характеристика = СерииНоменклатурыОстатки.Характеристика
	|		И ДвиженияСерииНоменклатурыИзменение.Партия = СерииНоменклатурыОстатки.Партия
	|		И ДвиженияСерииНоменклатурыИзменение.Ячейка = СерииНоменклатурыОстатки.Ячейка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервыТоваровОрганизаций.Остатки(&МоментКонтроля, Организация В
	|		(&МассивОрганизаций)
	|		И (Серия, СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия, Ячейка) В
	|			(ВЫБРАТЬ
	|				ДвиженияСерииНоменклатурыИзменение.Серия КАК Серия,
	|				ДвиженияСерииНоменклатурыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|				ДвиженияСерииНоменклатурыИзменение.Номенклатура КАК Номенклатура,
	|				ДвиженияСерииНоменклатурыИзменение.Характеристика КАК Характеристика,
	|				ДвиженияСерииНоменклатурыИзменение.Партия КАК Партия,
	|				ДвиженияСерииНоменклатурыИзменение.Ячейка КАК Ячейка
	|			ИЗ
	|				ДвиженияСерииНоменклатурыИзменение КАК ДвиженияСерииНоменклатурыИзменение)) КАК РезервыТоваровОрганизацийОстатки
	|		ПО (&ПередачаТоваровМеждуОрганизациями)
	|		И ДвиженияСерииНоменклатурыИзменение.Серия = РезервыТоваровОрганизацийОстатки.Серия
	|		И ДвиженияСерииНоменклатурыИзменение.СтруктурнаяЕдиница = РезервыТоваровОрганизацийОстатки.СтруктурнаяЕдиница
	|		И ДвиженияСерииНоменклатурыИзменение.Номенклатура = РезервыТоваровОрганизацийОстатки.Номенклатура
	|		И ДвиженияСерииНоменклатурыИзменение.Характеристика = РезервыТоваровОрганизацийОстатки.Характеристика
	|		И ДвиженияСерииНоменклатурыИзменение.Партия = РезервыТоваровОрганизацийОстатки.Партия
	|		И ДвиженияСерииНоменклатурыИзменение.Ячейка = РезервыТоваровОрганизацийОстатки.Ячейка
	|ГДЕ
	|	ЕСТЬNULL(СерииНоменклатурыОстатки.КоличествоОстаток, 0) +
	|		ЕСТЬNULL(РезервыТоваровОрганизацийОстатки.КоличествоОстаток, 0) < 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + СформироватьШаблонПакетногоЗапроса();
	
КонецФункции // СформироватьТекстЗапросаОстаткиСерииНоменклатуры()

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылкаЧекККМ, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Если ПроведениеДокументовУНФ.КонтрольОстатковВыключен()
		Или НЕ Константы.КонтролироватьОстаткиПриПробитииЧековККМ.Получить()
		Или ДополнительныеСвойства.ДляПроведения.Архивный Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Если временные таблицы "ДвиженияЗапасыИзменение", необходимо выполнить контроль реализации товаров.
	Если СтруктураВременныеТаблицы.ДвиженияЗапасыНаСкладахИзменение
	 ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыИзменение
	 ИЛИ СтруктураВременныеТаблицы.ДвиженияЗаказыПокупателейИзменение
	 ИЛИ СтруктураВременныеТаблицы.ДвиженияДенежныеСредстваВКассахККМИзменение
	 ИЛИ СтруктураВременныеТаблицы.ДвиженияСерииНоменклатурыИзменение
	 ИЛИ СтруктураВременныеТаблицы.ДвиженияПодарочныеСертификатыИзменение
	 ИЛИ СтруктураВременныеТаблицы.ДвиженияРасчетыСПокупателямиИзменение Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДвиженияЗапасыНаСкладахИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница) КАК СтруктурнаяЕдиницаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Ячейка) КАК ЯчейкаПредставление,
		|	ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыНаСкладахИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(РезервыТоваровОрганизацийОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыНаСкладах,
		|	ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(РезервыТоваровОрганизацийОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыНаСкладах
		|ИЗ
		|	ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыНаСкладах.Остатки(
		|				&МоментКонтроля,
		|				Организация В (&МассивОрганизаций)
		|					И (СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия, Ячейка) В
		|						(ВЫБРАТЬ
		|							ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|							ДвиженияЗапасыНаСкладахИзменение.Номенклатура КАК Номенклатура,
		|							ДвиженияЗапасыНаСкладахИзменение.Характеристика КАК Характеристика,
		|							ДвиженияЗапасыНаСкладахИзменение.Партия КАК Партия,
		|							ДвиженияЗапасыНаСкладахИзменение.Ячейка КАК Ячейка
		|						ИЗ
		|							ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение)) КАК ЗапасыНаСкладахОстатки
		|		ПО ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница = ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыНаСкладахИзменение.Номенклатура = ЗапасыНаСкладахОстатки.Номенклатура
		|			И ДвиженияЗапасыНаСкладахИзменение.Характеристика = ЗапасыНаСкладахОстатки.Характеристика
		|			И ДвиженияЗапасыНаСкладахИзменение.Партия = ЗапасыНаСкладахОстатки.Партия
		|			И ДвиженияЗапасыНаСкладахИзменение.Ячейка = ЗапасыНаСкладахОстатки.Ячейка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервыТоваровОрганизаций.Остатки(
		|				&МоментКонтроля,
		|				Организация В (&МассивОрганизаций)
		|					И (СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия, Ячейка) В
		|						(ВЫБРАТЬ
		|							ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|							ДвиженияЗапасыНаСкладахИзменение.Номенклатура КАК Номенклатура,
		|							ДвиженияЗапасыНаСкладахИзменение.Характеристика КАК Характеристика,
		|							ДвиженияЗапасыНаСкладахИзменение.Партия КАК Партия,
		|							ДвиженияЗапасыНаСкладахИзменение.Ячейка КАК Ячейка
		|						ИЗ
		|							ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение)) КАК РезервыТоваровОрганизацийОстатки
		|		ПО (&ПередачаТоваровМеждуОрганизациями)
		|			И ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница = РезервыТоваровОрганизацийОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыНаСкладахИзменение.Номенклатура = РезервыТоваровОрганизацийОстатки.Номенклатура
		|			И ДвиженияЗапасыНаСкладахИзменение.Характеристика = РезервыТоваровОрганизацийОстатки.Характеристика
		|			И ДвиженияЗапасыНаСкладахИзменение.Партия = РезервыТоваровОрганизацийОстатки.Партия
		|			И ДвиженияЗапасыНаСкладахИзменение.Ячейка = РезервыТоваровОрганизацийОстатки.Ячейка
		|ГДЕ
		|	ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(РезервыТоваровОрганизацийОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияДенежныеСредстваВКассахККМИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияДенежныеСредстваВКассахККМИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияДенежныеСредстваВКассахККМИзменение.КассаККМ) КАК КассаККМПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияДенежныеСредстваВКассахККМИзменение.КассаККМ.ВалютаДенежныхСредств) КАК ВалютаПредставление,
		|	ЕСТЬNULL(ДенежныеСредстваВКассахККМОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
		|	ЕСТЬNULL(ДенежныеСредстваВКассахККМОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток,
		|	ДвиженияДенежныеСредстваВКассахККМИзменение.СуммаВалИзменение + ЕСТЬNULL(ДенежныеСредстваВКассахККМОстатки.СуммаВалОстаток, 0) КАК ОстатокДенежныхСредств,
		|	ДвиженияДенежныеСредстваВКассахККМИзменение.СуммаПередЗаписью КАК СуммаПередЗаписью,
		|	ДвиженияДенежныеСредстваВКассахККМИзменение.СуммаПриЗаписи КАК СуммаПриЗаписи,
		|	ДвиженияДенежныеСредстваВКассахККМИзменение.СуммаИзменение КАК СуммаИзменение,
		|	ДвиженияДенежныеСредстваВКассахККМИзменение.СуммаВалПередЗаписью КАК СуммаВалПередЗаписью,
		|	ДвиженияДенежныеСредстваВКассахККМИзменение.СуммаВалПриЗаписи КАК СуммаВалПриЗаписи,
		|	ДвиженияДенежныеСредстваВКассахККМИзменение.СуммаВалИзменение КАК СуммаВалИзменение
		|ИЗ
		|	ДвиженияДенежныеСредстваВКассахККМИзменение КАК ДвиженияДенежныеСредстваВКассахККМИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(
		|				&МоментКонтроля,
		|				(Организация, КассаККМ) В
		|					(ВЫБРАТЬ
		|						ДвиженияДенежныеСредстваВКассахККМИзменение.Организация КАК Организация,
		|						ДвиженияДенежныеСредстваВКассахККМИзменение.КассаККМ КАК ТипДенежныхСредств
		|					ИЗ
		|						ДвиженияДенежныеСредстваВКассахККМИзменение КАК ДвиженияДенежныеСредстваВКассахККМИзменение)) КАК ДенежныеСредстваВКассахККМОстатки
		|		ПО ДвиженияДенежныеСредстваВКассахККМИзменение.Организация = ДенежныеСредстваВКассахККМОстатки.Организация
		|			И ДвиженияДенежныеСредстваВКассахККМИзменение.КассаККМ = ДенежныеСредстваВКассахККМОстатки.КассаККМ
		|			И ДвиженияДенежныеСредстваВКассахККМИзменение.ДоговорКонтрагента = ДенежныеСредстваВКассахККМОстатки.ДоговорКонтрагента
		|ГДЕ
		|	ЕСТЬNULL(ДенежныеСредстваВКассахККМОстатки.СуммаВалОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗаказыПокупателейИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗаказыПокупателейИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗаказыПокупателейИзменение.Склад КАК СкладПредставление,
		|	ДвиженияЗаказыПокупателейИзменение.ЗаказПокупателя КАК ЗаказПредставление,
		|	ДвиженияЗаказыПокупателейИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗаказыПокупателейИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ЗаказыПокупателейОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗаказыПокупателейИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК ОстатокЗаказыПокупателей,
		|	ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗаказыПокупателей
		|ИЗ
		|	ДвиженияЗаказыПокупателейИзменение КАК ДвиженияЗаказыПокупателейИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(&МоментКонтроля, ) КАК ЗаказыПокупателейОстатки
		|		ПО ДвиженияЗаказыПокупателейИзменение.Организация = ЗаказыПокупателейОстатки.Организация
		|			И ДвиженияЗаказыПокупателейИзменение.Склад = ЗаказыПокупателейОстатки.Склад
		|			И ДвиженияЗаказыПокупателейИзменение.ЗаказПокупателя = ЗаказыПокупателейОстатки.ЗаказПокупателя
		|			И ДвиженияЗаказыПокупателейИзменение.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
		|			И ДвиженияЗаказыПокупателейИзменение.Характеристика = ЗаказыПокупателейОстатки.Характеристика
		|			И (ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияПодарочныеСертификатыИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияПодарочныеСертификатыИзменение.ПодарочныйСертификат КАК ПодарочныйСертификат,
		|	ДвиженияПодарочныеСертификатыИзменение.НомерСертификата КАК НомерСертификата,
		|	ЕСТЬNULL(ДвиженияПодарочныеСертификатыИзменение.СуммаИзменение, 0) + ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) КАК ОстатокПодарочныеСертификаты,
		|	ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) КАК СуммаОстатокПодарочныеСертификаты
		|ИЗ
		|	ДвиженияПодарочныеСертификатыИзменение КАК ДвиженияПодарочныеСертификатыИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПодарочныеСертификаты.Остатки(&МоментКонтроля, ) КАК ПодарочныеСертификатыОстатки
		|		ПО ДвиженияПодарочныеСертификатыИзменение.ПодарочныйСертификат = ПодарочныеСертификатыОстатки.ПодарочныйСертификат
		|			И ДвиженияПодарочныеСертификатыИзменение.НомерСертификата = ПодарочныеСертификатыОстатки.НомерСертификата
		|			И (ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияРасчетыСПокупателямиИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияРасчетыСПокупателямиИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.Контрагент КАК КонтрагентПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.Договор КАК ДоговорПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.Договор.ВалютаРасчетов КАК ВалютаПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.Документ КАК ДокументПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.Заказ КАК ЗаказПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов КАК ТипРасчетовПредставление,
		|	ЛОЖЬ КАК ДвиженияДенежныхДокументов,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаПередЗаписью КАК СуммаПередЗаписью,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаПриЗаписи КАК СуммаПриЗаписи,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаИзменение КАК СуммаИзменение,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалПередЗаписью КАК СуммаВалПередЗаписью,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалПриЗаписи КАК СуммаВалПриЗаписи,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалИзменение КАК СуммаВалИзменение,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалПриЗаписи - ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаПолученныхАвансов,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалИзменение + ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаНепогашеннойЗадолженности,
		|	ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
		|	ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток,
		|	ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов КАК ТипРасчетов
		|ИЗ
		|	ДвиженияРасчетыСПокупателямиИзменение КАК ДвиженияРасчетыСПокупателямиИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПокупателями.Остатки(&МоментКонтроля, ) КАК РасчетыСПокупателямиОстатки
		|		ПО ДвиженияРасчетыСПокупателямиИзменение.Организация = РасчетыСПокупателямиОстатки.Организация
		|			И ДвиженияРасчетыСПокупателямиИзменение.Контрагент = РасчетыСПокупателямиОстатки.Контрагент
		|			И ДвиженияРасчетыСПокупателямиИзменение.Договор = РасчетыСПокупателямиОстатки.Договор
		|			И ДвиженияРасчетыСПокупателямиИзменение.Документ = РасчетыСПокупателямиОстатки.Документ
		|			И ДвиженияРасчетыСПокупателямиИзменение.Заказ = РасчетыСПокупателямиОстатки.Заказ
		|			И ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов = РасчетыСПокупателямиОстатки.ТипРасчетов
		|			И (ВЫБОР
		|				КОГДА ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
		|					ТОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) > 0
		|				ИНАЧЕ ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) < 0
		|			КОНЕЦ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
		
		Если Не ДополнительныеСвойства.ДляПроведения.ДвиженияПоЗапасамУдалять Тогда
			Запрос.Текст = Запрос.Текст // [0, 1, 2, 3, 4]
			+ СформироватьШаблонПакетногоЗапроса()
			+ СформироватьТекстЗапросаОстаткиЗапасы() // [5]
			+ СформироватьТекстЗапросаОстаткиСерииНоменклатуры() // [6]
		КонецЕсли;
		
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		
		// Интеркампани
		Запрос.УстановитьПараметр("МассивОрганизаций", 
			ИнтеркампаниСервер.ОрганизацииОстатков(ДополнительныеСвойства.ДляПроведения.Организация));
		Запрос.УстановитьПараметр("ПередачаТоваровМеждуОрганизациями", ДополнительныеСвойства.УчетнаяПолитика.ПередачаТоваровМеждуОрганизациями);
		// Конец Интеркампани
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Если НЕ МассивРезультатов[0].Пустой()
		 ИЛИ НЕ МассивРезультатов[1].Пустой()
		 ИЛИ НЕ МассивРезультатов[2].Пустой()
		 ИЛИ НЕ МассивРезультатов[3].Пустой()
		 ИЛИ НЕ МассивРезультатов[4].Пустой() Тогда
			ДокументОбъектЧекККМ = ДокументСсылкаЧекККМ.ПолучитьОбъект()
		КонецЕсли;
		
		// Неудача при формировании резервов передачи товаров
		// Сообщения выводятся в момент заполнения движений
		Если ДополнительныеСвойства.УчетнаяПолитика.ПередачаТоваровМеждуОрганизациями 
			И ДополнительныеСвойства.Свойство("ЕстьОшибкиПередачиТоваров") 
			И ДополнительныеСвойства.ЕстьОшибкиПередачиТоваров Тогда
			Отказ = Истина;
		КонецЕсли; 
		
		// Отрицательный остаток запасов на складе.
		Если НЕ МассивРезультатов[0].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[0].Выбрать();
			КонтрольОстатковУНФ.ЗапасыНаСкладахСписком(ДокументОбъектЧекККМ, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по кассе ККМ.
		Если НЕ МассивРезультатов[1].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
			КонтрольОстатковУНФ.ДенежныеСредстваВКассахККМ(ДокументОбъектЧекККМ, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по заказу покупателя.
		Если НЕ МассивРезультатов[2].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[2].Выбрать();
			КонтрольОстатковУНФ.ЗаказыПокупателей(ДокументОбъектЧекККМ, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по подарочным сертификатам
		Если Не МассивРезультатов[3].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[3].Выбрать();
			КонтрольОстатковУНФ.ПодарочныеСертификаты(ДокументОбъектЧекККМ, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по расчетам с покупателями.
		Если НЕ МассивРезультатов[4].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[4].Выбрать();
			КонтрольОстатковУНФ.РасчетыСПокупателями(ДокументОбъектЧекККМ, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток учета запасов.
		Если Не ДокументСсылкаЧекККМ.ДвиженияПоЗапасамУдалять Тогда
			Если НЕ МассивРезультатов[5].Пустой() Тогда
				ВыборкаИзРезультатаЗапроса = МассивРезультатов[5].Выбрать();
				КонтрольОстатковУНФ.ЗапасыСписком(ДокументОбъектЧекККМ, ВыборкаИзРезультатаЗапроса, Отказ);
			КонецЕсли;
		КонецЕсли;
		
		// Отрицательный остаток учета серий.
		Если Не ДокументСсылкаЧекККМ.ДвиженияПоЗапасамУдалять Тогда
			Если НЕ МассивРезультатов[6].Пустой() Тогда
				ВыборкаИзРезультатаЗапроса = МассивРезультатов[6].Выбрать();
				КонтрольОстатковУНФ.СерииНоменклатуры(ДокументОбъектЧекККМ, ВыборкаИзРезультатаЗапроса, Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьКонтроль()

#КонецОбласти

#Область ДисконтныеКарты

// Формирует таблицу значений, содержащую данные для проведения по регистру ПродажиПоДисконтнымКартам.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажиПоДисконтнойКарте(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВременнаяТаблицаШапка.ДисконтнаяКарта КАК ДисконтнаяКарта
	|ИЗ
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка";
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	ДисконтнаяКарта = Результат.ДисконтнаяКарта;
	Если ДисконтнаяКарта.Пустая() Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнымКартам", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Если СтруктураДополнительныеСвойства.ДляПроведения.Архивный
		Или СтруктураДополнительныеСвойства.ДляПроведения.ДвиженияПоЗапасамУдалять
		Или Не СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит 
		Или СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнымКартам", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	ПроцентСкидки = ДисконтныеКартыУНФСервер.ВычислитьПроцентСкидкиПоДисконтнойКарте(
		СтруктураДополнительныеСвойства.ДляПроведения.Дата, ДисконтнаяКарта);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = ДисконтныеКартыУНФСервер.ТекстЗапросаПродажиПоДисконтнойКарте("ЧекККМ");
	
	Запрос.УстановитьПараметр("ПроцентСкидки", ПроцентСкидки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнымКартам", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажиПоДисконтнойКарте()

#КонецОбласти

#Область АвтоматическиеСкидки

// Формирует таблицу значений, содержащую данные для проведения по регистру ПредоставленныеСкидки.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажиПоПредоставленнымСкидкам(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВременнаяТаблицаШапка.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
	|	ВременнаяТаблицаШапка.БонуснаяПрограмма КАК БонуснаяПрограмма
	|ИЗ
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка";
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	ВидСкидкиНаценки = Результат.ВидСкидкиНаценки;
	БонуснаяПрограмма = Результат.БонуснаяПрограмма;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаАвтоСкидкиНаценки.Период КАК Период,
	|	ВременнаяТаблицаАвтоСкидкиНаценки.СкидкаНаценка КАК ВидСкидкиНаценки,
	|	ВременнаяТаблицаАвтоСкидкиНаценки.Сумма КАК СуммаСкидки,
	|	ВременнаяТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаЗапасы.Документ КАК ДокументСкидки,
	|	ВременнаяТаблицаЗапасы.СтруктурнаяЕдиница КАК ПолучательСкидки,
	|	ВременнаяТаблицаЗапасы.Ответственный КАК Ответственный
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаАвтоСкидкиНаценки КАК ВременнаяТаблицаАвтоСкидкиНаценки
	|		ПО ВременнаяТаблицаЗапасы.КлючСвязи = ВременнаяТаблицаАвтоСкидкиНаценки.КлючСвязи
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ДвиженияПоЗапасамУдалять
	|	И НЕ &ОперацияСДенежнымиСредствами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаЗапасы.Дата,
	|	&ВидСкидкиНаценки,
	|	ВременнаяТаблицаЗапасы.СуммаСкидкиНаценки,
	|	ВременнаяТаблицаЗапасы.Номенклатура,
	|	ВременнаяТаблицаЗапасы.Характеристика,
	|	ВременнаяТаблицаЗапасы.Документ,
	|	ВременнаяТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ВременнаяТаблицаЗапасы.Ответственный
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|ГДЕ
	|	ВременнаяТаблицаЗапасы.СуммаСкидкиНаценки <> 0
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ДвиженияПоЗапасамУдалять
	|	И НЕ &ОперацияСДенежнымиСредствами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаЗапасы.Дата,
	|	&БонуснаяПрограмма,
	|	ВременнаяТаблицаЗапасы.СуммаСкидкиОплатыБонусом,
	|	ВременнаяТаблицаЗапасы.Номенклатура,
	|	ВременнаяТаблицаЗапасы.Характеристика,
	|	ВременнаяТаблицаЗапасы.Документ,
	|	ВременнаяТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ВременнаяТаблицаЗапасы.Ответственный
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ДвиженияПоЗапасамУдалять
	|	И ВременнаяТаблицаЗапасы.СуммаСкидкиОплатыБонусом <> 0
	|	И НЕ &ОперацияСДенежнымиСредствами";
	
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	Запрос.УстановитьПараметр("ДвиженияПоЗапасамУдалять", СтруктураДополнительныеСвойства.ДляПроведения.ДвиженияПоЗапасамУдалять);
	Запрос.УстановитьПараметр("ВидСкидкиНаценки", ВидСкидкиНаценки);
	Запрос.УстановитьПараметр("БонуснаяПрограмма", БонуснаяПрограмма);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПредоставленныеСкидки", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажиПоПредоставленнымСкидкам()

#КонецОбласти

#Область Эквайринг

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОплатаПлатежнымиКартами(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЧекККМ);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ДанныеДокумента.ВалютаДокумента КАК Валюта,
	|	ТаблицаРасшифровкаПлатежа.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|	ТаблицаРасшифровкаПлатежа.ВидПлатежнойКарты КАК ВидПлатежнойКарты,
	|	ТаблицаРасшифровкаПлатежа.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
	|	ТаблицаРасшифровкаПлатежа.ДоговорПлатежногоАгента КАК ДоговорКонтрагента,
	|	ТаблицаРасшифровкаПлатежа.Сумма КАК Сумма,
	|	ТаблицаРасшифровкаПлатежа.СуммаВал КАК СуммаВал,
	|	ДанныеДокумента.ЭквайринговыйТерминал.Договор КАК ДоговорЭквайринга,
	|	ВЫБОР
	|		КОГДА ТаблицаРасшифровкаПлатежа.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ВыдачаНаличных)
	|			ТОГДА 0
	|		КОГДА ДанныеДокумента.КассаККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ФискальныйРегистратор)
	|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаКомиссии
	|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.Сумма * ЕСТЬNULL(ВременнаяТаблицаПроцентыКомиссии.ПроцентКомиссии, 0) / 100
	|	КОНЕЦ КАК СуммаКомиссииПоДоговору,
	|	ВЫБОР
	|		КОГДА ТаблицаРасшифровкаПлатежа.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ВыдачаНаличных)
	|			ТОГДА 0
	|		КОГДА ДанныеДокумента.КассаККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ФискальныйРегистратор)
	|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаКомиссииВал
	|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаВал * ЕСТЬNULL(ВременнаяТаблицаПроцентыКомиссии.ПроцентКомиссии, 0) / 100
	|	КОНЕЦ КАК СуммаКомиссииПоДоговоруВал,
	|	ДанныеДокумента.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ДанныеДокумента.Заказ КАК Заказ,
	|	ДанныеДокумента.Контрагент КАК Контрагент
	|ИЗ
	|	Документ.ЧекККМ КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОплатаПлатежнымиКартами КАК ТаблицаРасшифровкаПлатежа
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаПроцентыКомиссии КАК ВременнаяТаблицаПроцентыКомиссии
	|			ПО ТаблицаРасшифровкаПлатежа.ВидПлатежнойКарты = ВременнаяТаблицаПроцентыКомиссии.ВидПлатежнойКарты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И ТаблицаРасшифровкаПлатежа.ВидОплаты В (ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.БанковскаяКарта), ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ВыдачаНаличных))";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаПлатежнымиКартами", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаОплатаПлатежнымиКартами()

#КонецОбласти

#Область РаботаССериямиНоменклатуры

// Формирует таблицу значений, содержащую данные для проведения по регистру СерииНоменклатурыГарантии.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСерииНоменклатуры(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаЗапасы.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ВременнаяТаблицаЗапасы.Дата КАК ДатаСобытия,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииСерийНоменклатуры.Расход) КАК Операция,
	|	СерииНоменклатуры.Серия КАК Серия,
	|	СерииНоменклатуры.ОстаткиСерийНоменклатуры КАК ОстаткиСерийНоменклатуры,
	|	ВременнаяТаблицаЗапасы.Организация КАК Организация,
	|	ВременнаяТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаЗапасы.Партия КАК Партия,
	|	ВременнаяТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВременнаяТаблицаЗапасы.Ячейка КАК Ячейка,
	|	СерииНоменклатуры.Количество КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСерииНоменклатуры КАК СерииНоменклатуры
	|		ПО ВременнаяТаблицаЗапасы.КлючСвязи = СерииНоменклатуры.КлючСвязи
	|			И (&ЧекПробит
	|				ИЛИ &ТоварЗарезервирован)
	|			И (НЕ &Архивный)
	|			И (НЕ &ОперацияСДенежнымиСредствами)";
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("ТоварЗарезервирован", СтруктураДополнительныеСвойства.ДляПроведения.ТоварЗарезервирован);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатуры", Новый ТаблицаЗначений);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатурыГарантии", Новый ТаблицаЗначений);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДвиженияСерииНоменклатуры", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	ТаблицаРезультатов = РезультатЗапроса.Выгрузить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДвиженияСерииНоменклатуры", ТаблицаРезультатов);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатурыГарантии", Новый ТаблицаЗначений);
	
	ПараметрыОтбора = Новый Структура("ОстаткиСерийНоменклатуры", Истина);
	ОстаткиСерийНоменклатурыСтроки = ТаблицаРезультатов.НайтиСтроки(ПараметрыОтбора);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатуры", ТаблицаРезультатов.Скопировать(ОстаткиСерийНоменклатурыСтроки));
	
	
КонецПроцедуры // СформироватьТаблицаСерииНоменклатуры()

#КонецОбласти

#Область АкцизныеМарки

Процедура СформироватьТаблицаОстаткиАлкогольнойПродукцииЕГАИС(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВременнаяТаблицаАкцизныеМарки.ВидДвижения КАК ВидДвижения,
	|	ВременнаяТаблицаАкцизныеМарки.Период КАК Период,
	|	ВременнаяТаблицаАкцизныеМарки.Ссылка КАК Ссылка,
	|	ВременнаяТаблицаАкцизныеМарки.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ВременнаяТаблицаАкцизныеМарки.Справка2 КАК Справка2,
	|	ВременнаяТаблицаАкцизныеМарки.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ВременнаяТаблицаАкцизныеМарки.Количество КАК Количество,
	|	ВременнаяТаблицаАкцизныеМарки.СвободныйОстаток КАК СвободныйОстаток
	|ИЗ
	|	ВременнаяТаблицаАкцизныеМарки КАК ВременнаяТаблицаАкцизныеМарки
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ОперацияСДенежнымиСредствами";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОстаткиАлкогольнойПродукцииЕГАИС", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсПечати

Функция ОписатьПравилаЗаполненияПодписей() Экспорт
	
	РеквизитыОбъекта = Новый Соответствие;
	РеквизитыОбъекта.Вставить("ПодписьКассира", "СтруктурнаяЕдиница.ПодписьМОЛ");
	РеквизитыОбъекта.Вставить("КонтактноеЛицоПодписант", "Контрагент.КонтактноеЛицоПодписант");
	
	Возврат РеквизитыОбъекта;
	
КонецФункции

// Функция формирует табличный документ обложки кассовой книги
//
Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати)
	Перем ПервыйДокумент, НомерСтрокиНачало, Ошибки;
	
	ПараметрыНоменклатуры = Новый Структура;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЧекККМ_ТоварныйЧек";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЧекККМ.ПФ_MXL_ТоварныйЧек");
	ДанныеПечати = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументЧекККМ.Ссылка КАК Ссылка,
	|	ДокументЧекККМ.Номер КАК Номер,
	|	ДокументЧекККМ.Дата КАК Дата,
	|	ДокументЧекККМ.КассаККМ КАК КассаККМ,
	|	ДокументЧекККМ.ВалютаДокумента КАК Валюта,
	|	ДокументЧекККМ.Контрагент.Представление КАК ПредставлениеПолучателя,
	|	ДокументЧекККМ.Организация КАК Организация,
	|	ДокументЧекККМ.Организация.Префикс КАК Префикс,
	|	ДокументЧекККМ.Организация.Представление КАК Поставщик,
	|	ДокументЧекККМ.СтруктурнаяЕдиница КАК РозничнаяТочкаСсылка,
	|	ДокументЧекККМ.СтруктурнаяЕдиница.Наименование КАК РозничнаяТочкаНаименование,
	|	ДокументЧекККМ.СуммаДокумента КАК СуммаДокумента,
	|	ДокументЧекККМ.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ДокументЧекККМ.ПодписьКассира.Должность КАК ДолжностьКассира,
	|	ДокументЧекККМ.ПодписьКассира.РасшифровкаПодписи КАК РасшифровкаПодписиКассира,
	|	ДокументЧекККМ.КонтактноеЛицоПодписант.Наименование КАК РасшифровкаПодписиКонтрагента,
	|	ДокументЧекККМ.Заказ КАК Заказ,
	|	ДокументЧекККМ.ПоложениеЗаказаПокупателя КАК ПоложениеЗаказаПокупателя,
	|	ДокументЧекККМ.ПоложениеСклада КАК ПоложениеСклада,
	|	ДокументЧекККМ.ЕстьЗаказы КАК ЕстьЗаказы,
	|	ДокументЧекККМ.Контрагент КАК Контрагент,
	|	ДокументЧекККМ.Заказ.Номер КАК ЗаказНомер,
	|	ДокументЧекККМ.Заказ.Дата КАК ЗаказДата,
	|	ДокументЧекККМ.Запасы.(
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Номенклатура,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ДокументЧекККМ.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(100))) = """"
	|				ТОГДА ДокументЧекККМ.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ ДокументЧекККМ.Запасы.Номенклатура.НаименованиеПолное
	|		КОНЕЦ КАК Запас,
	|		Номенклатура.НаименованиеПолное КАК ЗапасПолноеНаименование,
	|		Номенклатура.Код КАК Код,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.Штрихкод КАК Штрихкод,
	|		Характеристика КАК Характеристика,
	|		Количество КАК Количество,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ВЫБОР
	|			КОГДА ДокументЧекККМ.Запасы.ПроцентСкидкиНаценки <> 0
	|					ИЛИ ДокументЧекККМ.Запасы.СуммаАвтоматическойСкидки <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕстьСкидка,
	|		СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|		Партия КАК Партия,
	|		ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|		Заказ КАК Заказ,
	|		Заказ.Номер КАК ЗаказНомер,
	|		Заказ.Дата КАК ЗаказДата,
	|		КлючСвязи КАК КлючСвязи,
	|		ЛОЖЬ КАК ЭтоНабор,
	|		ВЫБОР
	|			КОГДА ДокументЧекККМ.Запасы.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И ДокументЧекККМ.Запасы.НоменклатураНабора.ВариантПечатиНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НеобходимоВыделитьКакСоставНабора,
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|	) КАК ТаблицаЗапасы,
	|	ДокументЧекККМ.ДобавленныеНаборы.(
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		Количество КАК Количество,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ДокументЧекККМ.ДобавленныеНаборы.НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА ДокументЧекККМ.ДобавленныеНаборы.НоменклатураНабора.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(ДокументЧекККМ.ДобавленныеНаборы.НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ЗапасНабора,
	|		НоменклатураНабора.ВариантПечатиНабора КАК ВариантПечатиНабора,
	|		НоменклатураНабора.ТипНоменклатуры КАК ТипНоменклатурыНабора,
	|		НоменклатураНабора.Артикул КАК АртикулНабора,
	|		НоменклатураНабора.Код КАК КодНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмеренияНабора,
	|		ИСТИНА КАК ВыводитьИтоги
	|	) КАК ТаблицаДобавленныеНаборы,
	|	ДокументЧекККМ.СерииНоменклатуры.(
	|		Серия КАК Серия,
	|		КлючСвязи КАК КлючСвязи
	|	) КАК ТаблицаСерииНоменклатуры
	|ИЗ
	|	Документ.ЧекККМ КАК ДокументЧекККМ
	|ГДЕ
	|	ДокументЧекККМ.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	ДанныеДокументов = Запрос.Выполнить().Выгрузить();
	
	// Наборы
	НаборыСервер.КомпоноватьТабличнуюЧастьПоНаборам(ДанныеДокументов, "ТаблицаЗапасы");
	
	Для Каждого Шапка Из ДанныеДокументов Цикл
		
		ТаблицаСкладов = Шапка.ТаблицаЗапасы.Скопировать(, "СтруктурнаяЕдиница");
		СкладВШапке = (Шапка.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке)
			ИЛИ Не ЗначениеЗаполнено(Шапка.ПоложениеСклада);
		Если СкладВШапке Тогда
			ТаблицаСкладов.ЗаполнитьЗначения(Шапка.РозничнаяТочкаСсылка, "СтруктурнаяЕдиница");
		КонецЕсли;
		ТаблицаСкладов.Свернуть("СтруктурнаяЕдиница");
		
		Для Каждого СтрокаСклада Из ТаблицаСкладов Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаСклада.СтруктурнаяЕдиница) Тогда
				Продолжить;
			КонецЕсли;
			
			ПечатьДокументовУНФ.ПередНачаломФормированияДокумента(ТабличныйДокумент, ПервыйДокумент, НомерСтрокиНачало, ДанныеПечати);
			
			ИспользоватьЗаказыВРозничнойТорговле = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле");
			Если ИспользоватьЗаказыВРозничнойТорговле И Шапка.ПоложениеЗаказаПокупателя = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
				ЗаказВШапке = Истина;
				ЗаказВТЧ = Ложь;
			Иначе
				ЗаказВШапке = Ложь;
				ЗаказВТЧ = ИспользоватьЗаказыВРозничнойТорговле И Шапка.ЕстьЗаказы;
			КонецЕсли;
			
			СведенияОбОрганизации = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата, ,);
			НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Шапка.Дата, Шапка.Номер, Шапка.Префикс);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок|ОсновныеДанные");
			ДанныеПечати.Очистить();
			
			ДанныеПечати.Вставить("ТекстЗаголовка", НСтр("ru ='Товарный чек № '") + НомерДокумента + НСтр("ru =' от '") + Формат(Шапка.Дата, "ДЛФ=DD"));
			
			ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Если ЗаказВТЧ Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("Заголовок|Заказ");
				ТабличныйДокумент.Присоединить(ОбластьМакета);
			КонецЕсли;
			
			ДанныеПечати.Очистить();
			
			КонтактнаяИнформацияТоварногоЧека = Константы.КонтактнаяИнформацияТоварногоЧека.Получить();
			Если КонтактнаяИнформацияТоварногоЧека <> Перечисления.КонтактнаяИнформацияТоварногоЧека.СтруктурнаяЕдиница Тогда
				
				ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
				
				ПредставлениеПоставщика = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
				ДанныеПечати.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
				ДанныеПечати.Вставить("Поставщик", Шапка.Организация);
				
				ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;
			
			Если КонтактнаяИнформацияТоварногоЧека <> Перечисления.КонтактнаяИнформацияТоварногоЧека.Организация Тогда
				
				ОбластьМакета = ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "СтруктурнаяЕдиница", , Ошибки);
				Если ОбластьМакета <> Неопределено Тогда
					
					ПредставлениеСтруктурнойЕдиницы = СтрокаСклада.СтруктурнаяЕдиница.Наименование;
					
					ФактАдресСтруктурнойЕдиницы = ПечатьДокументовУНФ.КонтактнаяИнформация(СтрокаСклада.СтруктурнаяЕдиница, Справочники.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы);
					Если НЕ ПустаяСтрока(ФактАдресСтруктурнойЕдиницы) Тогда
						
						ПредставлениеСтруктурнойЕдиницы = ПредставлениеСтруктурнойЕдиницы + ", " + ФактАдресСтруктурнойЕдиницы;
						
					КонецЕсли;
					
					ТелефонСтруктурнойЕдиницы = ПечатьДокументовУНФ.КонтактнаяИнформация(СтрокаСклада.СтруктурнаяЕдиница, Справочники.ВидыКонтактнойИнформации.ТелефонСтруктурнойЕдиницы);
					Если НЕ ПустаяСтрока(ТелефонСтруктурнойЕдиницы) Тогда
						
						ПредставлениеСтруктурнойЕдиницы = ПредставлениеСтруктурнойЕдиницы + ", " + ТелефонСтруктурнойЕдиницы;
						
					КонецЕсли;
					
					ДанныеПечати.Вставить("ПредставлениеСтруктурнойЕдиницы", ПредставлениеСтруктурнойЕдиницы);
					
					Если КонтактнаяИнформацияТоварногоЧека = Перечисления.КонтактнаяИнформацияТоварногоЧека.СтруктурнаяЕдиница Тогда
						
						ДанныеПечати.Вставить("ЗаголовокСтруктурнойЕдиницы", НСтр("ru ='Поставщик:'"));
						
					КонецЕсли;
					
					ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
					ТабличныйДокумент.Вывести(ОбластьМакета);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ИспользоватьЗаказыВРозничнойТорговле И ЗначениеЗаполнено(Шапка.Контрагент) Тогда
				
				ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
				
				СведенияОПокупателе = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата, ,);
				
				ДанныеПечати.Очистить();
				ПредставлениеПолучателя = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
				ДанныеПечати.Вставить("ПредставлениеПолучателя", ПредставлениеПолучателя);
				ДанныеПечати.Вставить("Получатель", Шапка.Контрагент);
				
				ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;
			
			Если ЗаказВШапке Тогда
				
				Если ЗначениеЗаполнено(Шапка.Контрагент) ИЛИ ЗначениеЗаполнено(Шапка.Заказ) Тогда
					
					ОбластьМакета = Макет.ПолучитьОбласть("ЗаказШапка");
					Если ЗначениеЗаполнено(Шапка.Заказ) Тогда
						ОбластьМакета.Параметры.ПредставлениеЗаказа = СтрШаблон(НСтр("ru = '№ %1 от %2'"),
							ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.ЗаказНомер, Истина, Истина), Формат(
							Шапка.ЗаказДата, "ДЛФ=D"));
					Иначе
						ОбластьМакета.Параметры.ПредставлениеЗаказа = "";
					КонецЕсли;
					
					ТабличныйДокумент.Вывести(ОбластьМакета);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ЕстьСкидки = Шапка.ТаблицаЗапасы.Итог("ЕстьСкидка") <> 0;
			
			ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
			ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
			
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
				ТабличныйДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ТабличныйДокумент.Присоединить(ОбластьСуммы);
			Если ЗаказВТЧ Тогда
				ОбластьЗаказа = Макет.ПолучитьОбласть("ШапкаТаблицы|ЗаказТЧ");
				ТабличныйДокумент.Присоединить(ОбластьЗаказа);
			КонецЕсли;
			
			ОбластьКолонкаЗапас = Макет.Область("Запас");
			
			Если Не ЕстьСкидки Тогда
				ОбластьКолонкаЗапас.ШиринаКолонки =
				ОбластьКолонкаЗапас.ШиринаКолонки
				+ Макет.Область("СуммаБезСкидки").ШиринаКолонки
				+ Макет.Область("СуммаСкидки").ШиринаКолонки;
			КонецЕсли;
			
			ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
			ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
			Если ЕстьСкидки Тогда
				ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
			КонецЕсли; 
			ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
			Если ЗаказВТЧ Тогда
				ОбластьЗаказВТЧ = Макет.ПолучитьОбласть("Строка|ЗаказТЧ");
			КонецЕсли;
			
			СтруктураИтогов = Новый Структура("Сумма, СуммаНДС, Всего, Количество, НомерСтроки, ВсегоСкидок, ВсегоБезСкидок, ЕстьСкидки, ЗаказВТЧ", 0, 0, 0, 0, 0, 0, 0, ЕстьСкидки, ЗаказВТЧ);
			ПараметрыНоменклатуры = Новый Структура;
			СтруктураЗаполненияСекции = Новый Структура;
			
			Для каждого СтрокаЗапасы Из Шапка.ТаблицаЗапасы Цикл
				
				Если НЕ ЗначениеЗаполнено(СтрокаЗапасы.Номенклатура) Тогда
					
					ТекстОшибки = НСтр("ru ='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена!'");
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, СтруктураЗаполненияСекции, ТекстОшибки, "");
					
					Продолжить;
					
				КонецЕсли;
				
				Если Не СкладВШапке
					И ЗначениеЗаполнено(СтрокаЗапасы.СтруктурнаяЕдиница)
					И (СтрокаЗапасы.СтруктурнаяЕдиница <> СтрокаСклада.СтруктурнаяЕдиница) Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧастиТоварныйЧек(СтрокаЗапасы, СтруктураЗаполненияСекции, ПараметрыНоменклатуры, СтруктураИтогов, Шапка);
				
				ОбластьНомера.Параметры.Заполнить(СтрокаЗапасы);
				ОбластьНомера.Параметры.Заполнить(СтруктураЗаполненияСекции);
				ОбластьДанных.Параметры.Заполнить(СтрокаЗапасы);
				ОбластьДанных.Параметры.Заполнить(СтруктураЗаполненияСекции);
				Если ЕстьСкидки Тогда
					ОбластьСкидок.Параметры.Заполнить(СтрокаЗапасы);
					ОбластьСкидок.Параметры.Заполнить(СтруктураЗаполненияСекции);
				КонецЕсли; 
				ОбластьСуммы.Параметры.Заполнить(СтрокаЗапасы);
				ОбластьСуммы.Параметры.Заполнить(СтруктураЗаполненияСекции);
				Если ЗаказВТЧ Тогда
					ОбластьЗаказВТЧ.Параметры.Заполнить(СтрокаЗапасы);
					ОбластьЗаказВТЧ.Параметры.Заполнить(СтруктураЗаполненияСекции);
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьНомера);
				ТабличныйДокумент.Присоединить(ОбластьДанных);
				Если ЕстьСкидки Тогда
					ТабличныйДокумент.Присоединить(ОбластьСкидок);
				КонецЕсли; 
				ТабличныйДокумент.Присоединить(ОбластьСуммы);
				Если ЗаказВТЧ Тогда
					ТабличныйДокумент.Присоединить(ОбластьЗаказВТЧ);
				КонецЕсли;
				
				// Наборы
				НаборыСервер.УчестьОформлениеСтрокиНабора(ТабличныйДокумент, ОбластьДанных, СтрокаЗапасы);
					
			КонецЦикла;
			
			// Вывести Итого.
			СтруктураЗаполненияСекции.Вставить("ЗаголовокНДС", ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:"));
			
			ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
			ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");
			
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			ОбластьДанных.Параметры.Заполнить(СтруктураЗаполненияСекции);
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
			Если ЕстьСкидки Тогда
				
				СтруктураЗаполненияСекции.Вставить("ВсегоСкидок", СтруктураИтогов.ВсегоСкидок);
				СтруктураЗаполненияСекции.Вставить("ВсегоБезСкидок", СтруктураИтогов.ВсегоБезСкидок);
				
				ОбластьСкидок.Параметры.Заполнить(СтруктураЗаполненияСекции);
				ТабличныйДокумент.Присоединить(ОбластьСкидок);
				
			КонецЕсли;
			
			СтруктураЗаполненияСекции.Вставить("Сумма", СтруктураИтогов.Сумма);
			СтруктураЗаполненияСекции.Вставить("СуммаНДС", СтруктураИтогов.СуммаНДС);
			СтруктураЗаполненияСекции.Вставить("Всего", СтруктураИтогов.Всего);
			
			ОбластьСуммы.Параметры.Заполнить(СтруктураЗаполненияСекции);
			ТабличныйДокумент.Присоединить(ОбластьСуммы);
			
			Если ЗаказВТЧ Тогда
				ОбластьЗаказВТЧ  = Макет.ПолучитьОбласть("Итого|ЗаказТЧ");
				ТабличныйДокумент.Присоединить(ОбластьЗаказВТЧ);
			КонецЕсли;
			
			// Вывести Сумму прописью.
			ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
			СуммаКПрописи = СтруктураИтогов.Всего;
			ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований "
			+ Строка(СтруктураИтогов.Количество)
			+ ", на сумму "
			+ ПечатьДокументовУНФ.ФорматСумм(СуммаКПрописи, Шапка.Валюта);
			
			ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.Валюта);
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Вывести подписи.
			ОбластьМакета = Макет.ПолучитьОбласть("Подписи|ОсновныеДанные");
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Если ЗаказВТЧ Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("Подписи|Заказ");
				ТабличныйДокумент.Присоединить(ОбластьМакета);
			КонецЕсли;
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Ошибки <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		
	КонецЕсли;

	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧастиТоварныйЧек(СтрокаТабличнойЧасти, ДанныеПечати, ПараметрыНоменклатуры, СтруктураИтогов, Шапка)
	
	ДанныеПечати.Очистить();
	
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		НомерСтроки = 0;
	Иначе
		СтруктураИтогов.НомерСтроки = СтруктураИтогов.НомерСтроки+1;
		НомерСтроки = СтруктураИтогов.НомерСтроки;
	КонецЕсли;
	ДанныеПечати.Вставить("НомерСтроки", НомерСтроки);
	
	ПараметрыНоменклатуры.Очистить();
	ПараметрыНоменклатуры.Вставить("Содержание", "");
	ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", СтрокаТабличнойЧасти.Запас);
	ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", СтрокаТабличнойЧасти.Характеристика);
	ПараметрыНоменклатуры.Вставить("ПредставлениеАртикула", СтрокаТабличнойЧасти.Артикул);
	ПараметрыНоменклатуры.Вставить("ПредставлениеСерииНоменклатуры", СерииНоменклатурыУНФ.СтрокаСерииНоменклатуры(Шапка.ТаблицаСерииНоменклатуры, СтрокаТабличнойЧасти.КлючСвязи));
	// Наборы
	ПараметрыНоменклатуры.Вставить("НеобходимоВыделитьКакСоставНабора", СтрокаТабличнойЧасти.НеобходимоВыделитьКакСоставНабора);
	
	ДанныеПечати.Вставить("Запас", ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНоменклатуры));
			
	ДанныеПечати.Вставить("ПредставлениеКодаНоменклатуры", ПечатьДокументовУНФ.ПредставлениеКодаНоменклатуры(СтрокаТабличнойЧасти));
			
	Скидка = 0;
	Если СтруктураИтогов.ЕстьСкидки Тогда
		
		Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
			
			Скидка = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
			ДанныеПечати.Вставить("Скидка", Скидка);
			ДанныеПечати.Вставить("СуммаБезСкидки", Скидка);
			
		ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0 И СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = 0 Тогда
			
			ДанныеПечати.Вставить("Скидка", 0);
			ДанныеПечати.Вставить("СуммаБезСкидки", СтрокаТабличнойЧасти.Сумма);
			
		Иначе
			
			Скидка = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена - СтрокаТабличнойЧасти.Сумма; // АвтоматическиеСкидки
			ДанныеПечати.Вставить("Скидка", Скидка);
			ДанныеПечати.Вставить("СуммаБезСкидки", СтрокаТабличнойЧасти.Сумма + Скидка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураИтогов.ЗаказВТЧ Тогда
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Заказ) Тогда
			ДанныеПечатиЗаказ = СтрШаблон(НСтр("ru = '№ %1 от %2'"),
				ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаТабличнойЧасти.ЗаказНомер, Истина, Истина),
				Формат(СтрокаТабличнойЧасти.ЗаказДата, "ДЛФ=D"));
		Иначе
			ДанныеПечатиЗаказ = "";
		КонецЕсли;
		ДанныеПечати.Вставить("Заказ", ДанныеПечатиЗаказ);
	КонецЕсли;
	
	Если НЕ СтрокаТабличнойЧасти.ЭтоНабор Тогда
		СтруктураИтогов.Сумма			= СтруктураИтогов.Сумма			+ СтрокаТабличнойЧасти.Сумма;
		СтруктураИтогов.СуммаНДС		= СтруктураИтогов.СуммаНДС		+ СтрокаТабличнойЧасти.СуммаНДС;
		СтруктураИтогов.Всего			= СтруктураИтогов.Всего			+ СтрокаТабличнойЧасти.Всего;
		СтруктураИтогов.ВсегоСкидок		= СтруктураИтогов.ВсегоСкидок	+ Скидка;
		СтруктураИтогов.ВсегоБезСкидок	= СтруктураИтогов.Сумма			+ СтруктураИтогов.ВсегоСкидок;
		СтруктураИтогов.Количество		= СтруктураИтогов.Количество	+ 1;
	КонецЕсли;
	
КонецПроцедуры

// Процедура печати документа.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТоварныйЧек") Тогда
		
		ТабличныйДокументТоварногоЧека = ПечатнаяФорма(МассивОбъектов, ОбъектыПечати);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТоварныйЧек",
			НСтр("ru = 'Товарный чек'"), ТабличныйДокументТоварногоЧека);
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ГарантийныйТалон") Тогда
		
		ТабличныйДокументГарантийногоТалона = НоменклатураВДокументахСервер.ПечатьГарантийныйТалон(
			МассивОбъектов, ОбъектыПечати);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ГарантийныйТалон",
			НСтр("ru = 'Гарантийный талон'"), ТабличныйДокументГарантийногоТалона);
		
	КонецЕсли;
	
	// параметры отправки печатных форм по электронной почте
	ЭлектроннаяПочтаУНФ.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов,
		КоллекцияПечатныхФорм);
	
КонецПроцедуры // Печать()

// Заполняет список команд печати Заказа покупателя
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТоварныйЧек";
	КомандаПечати.Представление = НСтр("ru = 'Товарный чек'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 1;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ГарантийныйТалон";
		КомандаПечати.Представление = НСтр("ru = 'Гарантийный талон'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.Порядок = 4;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПодарочнымиСертификатами

// Формирует таблицу значение, содержащую данные для проведения по регистру.
// Таблицу значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПодарочныеСертификаты(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПодарочныеСертификаты Тогда
	
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		
		Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерииНоменклатуры Тогда
		
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ВременнаяТаблицаЗапасы.Дата КАК Период,
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
			|	ВременнаяТаблицаЗапасы.Номенклатура КАК ПодарочныйСертификат,
			|	СерииНоменклатуры.Серия КАК НомерСертификата,
			|	ВременнаяТаблицаЗапасы.НоминалСертификата КАК Сумма
			|ИЗ
			|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСерииНоменклатуры КАК СерииНоменклатуры
			|		ПО ВременнаяТаблицаЗапасы.КлючСвязи = СерииНоменклатуры.КлючСвязи
			|ГДЕ
			|	(&ЧекПробит
			|			ИЛИ &ТоварЗарезервирован)
			|	И НЕ &Архивный
			|	И ВременнаяТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
			|	И НЕ &ОперацияСДенежнымиСредствами
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВременнаяТаблицаОплатаПлатежнымиКартами.Дата,
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
			|	ВременнаяТаблицаОплатаПлатежнымиКартами.ПодарочныйСертификат,
			|	ВременнаяТаблицаОплатаПлатежнымиКартами.НомерСертификата,
			|	ВЫБОР
			|		КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.ЧастичноеПогашение
			|			ТОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаСертификата
			|		КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.ИспользоватьСерииНоменклатуры
			|			ТОГДА ВЫБОР
			|					КОГДА ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) > ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаСертификата
			|						ТОГДА ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0)
			|					ИНАЧЕ ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаСертификата
			|				КОНЕЦ
			|		ИНАЧЕ ВременнаяТаблицаОплатаПлатежнымиКартами.Номинал
			|	КОНЕЦ
			|ИЗ
			|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ВременнаяТаблицаОплатаПлатежнымиКартами
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстаткиСертификатов КАК ПодарочныеСертификатыОстатки
			|		ПО ВременнаяТаблицаОплатаПлатежнымиКартами.ПодарочныйСертификат = ПодарочныеСертификатыОстатки.ПодарочныйСертификат
			|			И ВременнаяТаблицаОплатаПлатежнымиКартами.НомерСертификата = ПодарочныеСертификатыОстатки.НомерСертификата
			|ГДЕ
			|	&ЧекПробит
			|	И НЕ &Архивный
			|	И ВременнаяТаблицаОплатаПлатежнымиКартами.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат)";
			
		Иначе
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ВременнаяТаблицаЗапасы.Дата КАК Период,
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
			|	ВременнаяТаблицаЗапасы.Номенклатура КАК ПодарочныйСертификат,
			|	ВременнаяТаблицаЗапасы.НоминалСертификата КАК Сумма
			|ИЗ
			|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
			|ГДЕ
			|	(&ЧекПробит
			|			ИЛИ &ТоварЗарезервирован)
			|	И НЕ &Архивный
			|	И ВременнаяТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
			|	И НЕ &ОперацияСДенежнымиСредствами
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВременнаяТаблицаОплатаПлатежнымиКартами.Дата,
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
			|	ВременнаяТаблицаОплатаПлатежнымиКартами.ПодарочныйСертификат,
			|	ВременнаяТаблицаОплатаПлатежнымиКартами.Номинал
			|ИЗ
			|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ВременнаяТаблицаОплатаПлатежнымиКартами
			|ГДЕ
			|	&ЧекПробит
			|	И НЕ &Архивный
			|	И ВременнаяТаблицаОплатаПлатежнымиКартами.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат)";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
		Запрос.УстановитьПараметр("ТоварЗарезервирован", СтруктураДополнительныеСвойства.ДляПроведения.ТоварЗарезервирован);
		Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
		Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
		
		Результат = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		Результат = Новый ТаблицаЗначений;
		
	КонецЕсли;
		
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПодарочныеСертификаты", Результат);
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру ОплатаПодарочнымиСертификатами.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОплатаПодарочнымиСертификатами(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПодарочныеСертификаты Тогда
	
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
		Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
		
		Запрос.Текст = РаботаСПодарочнымиСертификатами.СформироватьТекстЗапросаПоОплатеПодарочнымиСертификатами();
		
		Результат = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		Результат = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаПодарочнымиСертификатами", Результат);
	
КонецПроцедуры // СформироватьТаблицаОплатаПодарочнымиСертификатами()

// Формирует таблицу значений, содержащую данные для проведения по регистру РасчетыСПокупателями.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРасчетыСПокупателями(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	СтруктураДополнительныеСвойства.Вставить("НеобходимПересчет", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЧекККМ);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	Запрос.УстановитьПараметр("ВозникновениеАвансаПокупателя", НСтр("ru='Возникновение аванса покупателя'"));
	Запрос.УстановитьПараметр("ЗачетАванса", НСтр("ru='Зачет предоплаты'"));
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	Запрос.УстановитьПараметр("ВозникновениеОбязательствПокупателя", НСтр("ru='Возникновение обязательств покупателя'"));
	Запрос.УстановитьПараметр("ОплатаДолга", НСтр("ru='Оплата долга'"));
	Запрос.УстановитьПараметр("ВозвратРассрочки", СтруктураДополнительныеСвойства.ДляПроведения.ВозвратРассрочки);
	
	Для Каждого КлючИЗначение Из СтруктураДополнительныеСвойства.ДляСертификатов Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	// Подготовка таблицы по сертификатам
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВременнаяТаблицаЗапасы.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	&КонтрагентДляПредоплаты КАК Контрагент,
	|	&ДоговорПоУмолчанию КАК Договор,
	|	НЕОПРЕДЕЛЕНО КАК Документ,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК Заказ,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс) КАК ТипРасчетов,
	|	СУММА(ВременнаяТаблицаЗапасы.Сумма) КАК Сумма,
	|	СУММА(ВременнаяТаблицаЗапасы.СуммаВал) КАК СуммаВал,
	|	&СчетУчетаАвансовПокупателя КАК СчетУчета,
	|	ВременнаяТаблицаЗапасы.ВалютаДокумента КАК Валюта,
	|	&ВозникновениеАвансаПокупателя КАК СодержаниеПроводки,
	|	0 КАК СуммаРег,
	|	0 КАК Курс,
	|	НЕОПРЕДЕЛЕНО КАК СпособЗачета,
	|	0 КАК Кратность,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОплаты,
	|	0 КАК СуммаПлатежа,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаПлатежа
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ВременнаяТаблицаЗапасы.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	ВременнаяТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И НЕ &Архивный
	|	И &ЧекПробит
	|	И НЕ &ОперацияСДенежнымиСредствами
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаЗапасы.ВалютаДокумента,
	|	ВременнаяТаблицаЗапасы.Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&Организация,
	|	&КонтрагентДляПредоплаты,
	|	&ДоговорПоУмолчанию,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс),
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма,
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаВал,
	|	&СчетУчетаАвансовПокупателя,
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.ВалютаДокумента,
	|	&ЗачетАванса,
	|	0,
	|	0,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ВременнаяТаблицаОплатаПлатежнымиКартами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ВременнаяТаблицаОплатаПлатежнымиКартами.ПодарочныйСертификат = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат)
	|	И НЕ &Архивный
	|	И &ЧекПробит
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаРасшифровкаПлатежа.Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ВременнаяТаблицаРасшифровкаПлатежа.Организация,
	|	ВременнаяТаблицаРасшифровкаПлатежа.Контрагент,
	|	ВременнаяТаблицаРасшифровкаПлатежа.Договор,
	|	ВременнаяТаблицаРасшифровкаПлатежа.Ссылка,
	|	ВременнаяТаблицаРасшифровкаПлатежа.Заказ,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг),
	|	ВременнаяТаблицаРасшифровкаПлатежа.СуммаРассрочки,
	|	ВременнаяТаблицаРасшифровкаПлатежа.СуммаРассрочки,
	|	НЕОПРЕДЕЛЕНО,
	|	ВременнаяТаблицаРасшифровкаПлатежа.ВалютаДокумента,
	|	&ВозникновениеОбязательствПокупателя,
	|	ВременнаяТаблицаРасшифровкаПлатежа.СуммаРассрочки,
	|	1,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаИРаспределенияПлатежей.Вручную),
	|	1,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	ВременнаяТаблицаРасшифровкаПлатежа.ВалютаДокумента
	|ИЗ
	|	ВременнаяТаблицаРасшифровкаПлатежа КАК ВременнаяТаблицаРасшифровкаПлатежа
	|ГДЕ
	|	НЕ &Архивный
	|	И &ЧекПробит
	|	И НЕ &ОперацияСДенежнымиСредствами
	|	И ВременнаяТаблицаРасшифровкаПлатежа.СуммаРассрочки > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаРасшифровкаПлатежа.Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ВременнаяТаблицаРасшифровкаПлатежа.Организация,
	|	ВременнаяТаблицаРасшифровкаПлатежа.Контрагент,
	|	ВременнаяТаблицаРасшифровкаПлатежа.Договор,
	|	ВременнаяТаблицаРасшифровкаПлатежа.Документ,
	|	ВременнаяТаблицаРасшифровкаПлатежа.Заказ,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг),
	|	ВременнаяТаблицаРасшифровкаПлатежа.СуммаВозвратаРассрочки,
	|	ВременнаяТаблицаРасшифровкаПлатежа.СуммаВозвратаРассрочки,
	|	НЕОПРЕДЕЛЕНО,
	|	ВременнаяТаблицаРасшифровкаПлатежа.ВалютаДокумента,
	|	&ОплатаДолга,
	|	ВременнаяТаблицаРасшифровкаПлатежа.СуммаВозвратаРассрочки,
	|	1,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаИРаспределенияПлатежей.Вручную),
	|	1,
	|	&Ссылка,
	|	ВременнаяТаблицаРасшифровкаПлатежа.СуммаВозвратаРассрочки,
	|	ВременнаяТаблицаРасшифровкаПлатежа.ВалютаДокумента
	|ИЗ
	|	ВременнаяТаблицаОплатаДолга КАК ВременнаяТаблицаРасшифровкаПлатежа
	|ГДЕ
	|	НЕ &Архивный
	|	И &ЧекПробит
	|	И &ОперацияСДенежнымиСредствами
	|	И &ВозвратРассрочки
	|	И ВременнаяТаблицаРасшифровкаПлатежа.СуммаВозвратаРассрочки > 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаПоСертификатам = РезультатЗапроса.Выгрузить();
	
	Если ЗначениеЗаполнено(СтруктураДополнительныеСвойства.Контрагент) Тогда
		
		// Подготовка таблицы по предоплате
		РасчетыПроведениеДокументов.СформироватьДвиженияПоВзаиморасчетам(СтруктураДополнительныеСвойства, ДокументСсылкаЧекККМ, ,"КассаККМ, ВалютаДокумента");
		ПолучатьРеквизитыРасчетов = Истина;
		
		// Установка исключительной блокировки контролируемых остатков расчетов с контрагентами.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаРасчетыСПокупателями.Организация КАК Организация,
		|	ВременнаяТаблицаРасчетыСПокупателями.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаРасчетыСПокупателями.Договор КАК Договор,
		|	ВременнаяТаблицаРасчетыСПокупателями.Документ КАК Документ,
		|	ВременнаяТаблицаРасчетыСПокупателями.Заказ КАК Заказ,
		|	ВременнаяТаблицаРасчетыСПокупателями.ТипРасчетов КАК ТипРасчетов
		|ИЗ
		|	ВременнаяТаблицаРасчетыСПокупателями";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСПокупателями");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		
		Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
		КонецЦикла;
		Блокировка.Заблокировать();
		
		НомерЗапроса = 0;
		Запрос.Текст = КурсовыеРазницыУНФ.ПолучитьТекстЗапросаКурсовыеРазницыРасчетыСПокупателями(Запрос.МенеджерВременныхТаблиц, Ложь, НомерЗапроса, ПолучатьРеквизитыРасчетов);
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		ТаблицаПоПредоплате = МассивРезультатов[НомерЗапроса].Выгрузить();
		
		Если СтруктураДополнительныеСвойства.ДляПроведения.ВозвратРассрочки Тогда
			ТаблицаПоПредоплате.Очистить();
		КонецЕсли;
		
		// Объединение таблиц
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоПредоплате, ТаблицаПоСертификатам);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	0 КАК НомерСтроки,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Дата,
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
		|	ЗНАЧЕНИЕ(Справочник.КассыККМ.ПустаяСсылка) КАК КассаККМ,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДокумента,
		|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка) КАК СчетУчета,
		|	0 КАК Сумма,
		|	0 КАК СуммаВал
		|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыСПокупателями";
		Запрос.Выполнить();
		
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПокупателями", ТаблицаПоСертификатам);
	
КонецПроцедуры // СформироватьТаблицаРасчетыСПокупателями()

#КонецОбласти

#Область Бонусы

// Формирует таблицу значение, содержащую данные для проведения по регистру.
// Таблицу значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаБонусныеБаллы(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Если СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит
		И Не СтруктураДополнительныеСвойства.ДляПроведения.Архивный
		И Не СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.Текст = РаботаСБонусами.СформироватьТекстЗапросаПоБонуснымБаллам();
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		ТаблицаБонусныеБаллы = РезультатЗапроса[0].Выгрузить();
		ТаблицаОплатаБонусами = РезультатЗапроса[1].Выгрузить();
		
		Если ТаблицаОплатаБонусами.Количество() > 0 Тогда
			
			РаботаСБонусами.ОбъединитьТаблицыБонусов(
				ТаблицаБонусныеБаллы,
				ТаблицаОплатаБонусами,
				ДокументСсылкаЧекККМ);
			
		КонецЕсли;
		
	Иначе
		
		ТаблицаБонусныеБаллы = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаБонусныеБаллы", ТаблицаБонусныеБаллы);
	
КонецПроцедуры

Процедура СформироватьТаблицаНачисленияБонусныхБаллов(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Если СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит
		И Не СтруктураДополнительныеСвойства.ДляПроведения.Архивный
		И Не СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.Текст = РаботаСБонусами.СформироватьТекстЗапросаПоНачислениямБонусныхБаллов();
		ТаблицаНачисленияБонусныхБаллов = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		ТаблицаНачисленияБонусныхБаллов = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаНачисленияБонусныхБаллов", ТаблицаНачисленияБонусныхБаллов);
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.//
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ЕГАИС

#Область СообщенияЕГАИС

// Сообщение к передаче XML
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС.
// 
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция СообщениеКПередачеXML(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные Тогда
		
		Возврат ЧекЕГАИСXML(ДокументСсылка, ДополнительныеПараметры);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию Тогда
		
		Возврат ЧекЕГАИСОтменаXML(ДокументСсылка, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецФункции

Функция ЧекЕГАИСXML(ДокументСсылка, ДополнительныеПараметры)
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ЕГАИСПрисоединенныеФайлы.Документ      КАК Ссылка,
		|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
		|ПОМЕСТИТЬ Версии
		|ИЗ
		|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
		|ГДЕ
		|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
		|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
		|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
		|СГРУППИРОВАТЬ ПО
		|	ЕГАИСПрисоединенныеФайлы.Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Шапка.Номер                          КАК Номер,
		|	Шапка.Дата                           КАК Дата,
		|	ЕСТЬNULL(Версии.ПоследнийНомер, 0)   КАК ПоследнийНомерВерсии,
		|	Шапка.Ссылка                         КАК ДокументОснование,
		|	КлассификаторОрганизацийЕГАИС.Ссылка КАК ОрганизацияЕГАИС,
		|	КлассификаторОрганизацийЕГАИС.Код            КАК ИдентификаторФСРАР,
		|	КлассификаторОрганизацийЕГАИС.ФорматОбмена   КАК ФорматОбмена,
		|	КлассификаторОрганизацийЕГАИС.ИНН            КАК ИНН,
		|	КлассификаторОрганизацийЕГАИС.КПП            КАК КПП,
		|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект КАК ТорговыйОбъект,
		|	&АдресТорговогоОбъекта                       КАК АдресТорговогоОбъекта,
		|	Шапка.Ответственный                          КАК Ответственный,
		|	&НомерСмены                                  КАК НомерСмены,
		|	&НомерЧека                                   КАК НомерЧекаККМ,
		|	&СерийныйНомер                               КАК СерийныйНомерККМ
		|ПОМЕСТИТЬ Шапка
		|ИЗ
		|	Документ.ЧекККМ КАК Шапка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
		|		ПО Шапка.Ссылка = Версии.Ссылка
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|		ПО Шапка.СтруктурнаяЕдиница = КлассификаторОрганизацийЕГАИС.ТорговыйОбъект
		|		 И Шапка.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
		|ГДЕ
		|	Шапка.Ссылка = &Ссылка
		|;
		|
		|//#РезультатЗапроса#////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	Шапка
		|",
		"Шапка");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Товары.КлючСвязи                  КАК ИдентификаторСтроки,
		|	Товары.НомерСтроки                КАК НомерСтроки,
		|	Товары.Количество                 КАК Количество,
		|	Товары.Цена                       КАК Цена,
		|	Товары.Штрихкод                   КАК Штрихкод,
		|	Товары.Номенклатура               КАК Номенклатура,
		|	Товары.Характеристика             КАК Характеристика,
		|	Товары.Номенклатура.ОбъемДАЛ * 10 КАК Объем
		|ИЗ
		|	Документ.ЧекККМ.Запасы КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.Номенклатура.АлкогольнаяПродукция
		|	И Товары.Номенклатура.ВидАлкогольнойПродукции.Маркируемый
		|	И НЕ Товары.Номенклатура.ПродаетсяВРозлив
		|",
		"Товары");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Шапка.ОрганизацияЕГАИС             КАК ОрганизацияЕГАИС,
		|	ТабличнаяЧасть.КлючСвязи           КАК ИдентификаторСтроки,
		|	ТабличнаяЧасть.Справка2.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	ТабличнаяЧасть.Справка2            КАК Справка2,
		|	ТабличнаяЧасть.АкцизнаяМарка       КАК ШтрихкодУпаковки,
		|	ТабличнаяЧасть.ШтрихкодУпаковки    КАК ШтрихкодРодительскойУпаковки
		|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
		|ИЗ
		|	Документ.ЧекККМ.АкцизныеМарки КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Шапка КАК Шапка
		|		ПО ИСТИНА
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|ИНДЕКСИРОВАТЬ ПО
		|	ШтрихкодУпаковки,
		|	ШтрихкодРодительскойУпаковки
		|");
	
	ПараметрыФормированияТекстаЗапроса = ШтрихкодированиеЕГАИС.ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = Неопределено;
	ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Истина;
	ПараметрыФормированияТекстаЗапроса.ИмяПоляАлкогольнаяПродукция     = "НоменклатураЕГАИС";
	ТекстыЗапроса.Добавить(
		ШтрихкодированиеЕГАИС.ТекстЗапросаВложенныхШтрихкодовПоДокументу(ПараметрыФормированияТекстаЗапроса),
		"ВложенныеШтрихкоды");
	
	МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Перечисления.ВидыДокументовЕГАИС.ЧекККМ);
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось отправить чек в ЕГАИС'");
	Иначе
		НомерЧека     = ДополнительныеПараметры.НомерЧека;
		НомерСмены    = ДополнительныеПараметры.НомерСмены;
		СерийныйНомер = ДополнительныеПараметры.СерийныйНомер;
		АдресТорговогоОбъекта = ДополнительныеПараметры.АдресТорговогоОбъекта;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НомерЧека",     НомерЧека);
	Запрос.УстановитьПараметр("НомерСмены",    НомерСмены);
	Запрос.УстановитьПараметр("СерийныйНомер", СерийныйНомер);
	Запрос.УстановитьПараметр("АдресТорговогоОбъекта", АдресТорговогоОбъекта);
	Запрос.УстановитьПараметр("ПустыеЗначенияНоменклатуры", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("Номенклатура"));
	
	РезультатыЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	Возврат ЧекиЕГАИС.ЧекXML(ДокументСсылка, РезультатыЗапроса, МенеджерВременныхТаблиц);
	
КонецФункции

Функция ЧекЕГАИСОтменаXML(ДокументСсылка, ДополнительныеПараметры)
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ЕГАИСПрисоединенныеФайлы.Документ      КАК Ссылка,
		|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
		|ПОМЕСТИТЬ Версии
		|ИЗ
		|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
		|ГДЕ
		|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
		|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
		|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
		|СГРУППИРОВАТЬ ПО
		|	ЕГАИСПрисоединенныеФайлы.Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Шапка.Номер                           КАК Номер,
		|	Шапка.Дата                            КАК Дата,
		|	ЕСТЬNULL(Версии.ПоследнийНомер, 0)    КАК ПоследнийНомерВерсии,
		|	Шапка.Ссылка                          КАК ДокументОснование,
		|	КлассификаторОрганизацийЕГАИС.Ссылка  КАК ОрганизацияЕГАИС,
		|	КлассификаторОрганизацийЕГАИС.Код            КАК ИдентификаторФСРАР,
		|	КлассификаторОрганизацийЕГАИС.ФорматОбмена   КАК ФорматОбмена,
		|	КлассификаторОрганизацийЕГАИС.ИНН            КАК ИНН,
		|	КлассификаторОрганизацийЕГАИС.КПП            КАК КПП,
		|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект КАК ТорговыйОбъект,
		|	&АдресТорговогоОбъекта                       КАК АдресТорговогоОбъекта,
		|	Шапка.Ответственный                          КАК Ответственный,
		|	&НомерСмены                                  КАК НомерСмены,
		|	&НомерЧека                                   КАК НомерЧекаККМ,
		|	&СерийныйНомер                               КАК СерийныйНомерККМ
		|ПОМЕСТИТЬ Шапка
		|ИЗ
		|	Документ.ЧекККМ КАК Шапка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
		|		ПО Шапка.Ссылка = Версии.Ссылка
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|		ПО Шапка.СтруктурнаяЕдиница = КлассификаторОрганизацийЕГАИС.ТорговыйОбъект
		|		 И Шапка.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
		|ГДЕ
		|	Шапка.Ссылка = &Ссылка
		|;
		|
		|//#РезультатЗапроса#////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	Шапка
		|",
		"Шапка");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Товары.КлючСвязи                  КАК ИдентификаторСтроки,
		|	Товары.НомерСтроки                КАК НомерСтроки,
		|	Товары.Количество                 КАК Количество,
		|	-Товары.Цена                      КАК Цена,
		|	Товары.Штрихкод                   КАК Штрихкод,
		|	Товары.Номенклатура               КАК Номенклатура,
		|	Товары.Характеристика             КАК Характеристика,
		|	Товары.Номенклатура.ОбъемДАЛ * 10 КАК Объем
		|ИЗ
		|	Документ.ЧекККМ.Запасы КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.Номенклатура.АлкогольнаяПродукция
		|	И Товары.Номенклатура.ВидАлкогольнойПродукции.Маркируемый
		|	И НЕ Товары.Номенклатура.ПродаетсяВРозлив
		|",
		"Товары");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Шапка.ОрганизацияЕГАИС                       КАК ОрганизацияЕГАИС,
		|	ТабличнаяЧасть.КлючСвязи                     КАК ИдентификаторСтроки,
		|	ТабличнаяЧасть.Справка2.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	ТабличнаяЧасть.Справка2                      КАК Справка2,
		|	ТабличнаяЧасть.АкцизнаяМарка                 КАК ШтрихкодУпаковки,
		|	ТабличнаяЧасть.ШтрихкодУпаковки              КАК ШтрихкодРодительскойУпаковки
		|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
		|ИЗ
		|	Документ.ЧекККМ.АкцизныеМарки КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Шапка КАК Шапка
		|		ПО ИСТИНА
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|ИНДЕКСИРОВАТЬ ПО
		|	ШтрихкодУпаковки,
		|	ШтрихкодРодительскойУпаковки
		|");
	
	ПараметрыФормированияТекстаЗапроса = ШтрихкодированиеЕГАИС.ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = Неопределено;
	ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Истина;
	ПараметрыФормированияТекстаЗапроса.ИмяПоляАлкогольнаяПродукция     = "НоменклатураЕГАИС";
	ТекстыЗапроса.Добавить(
		ШтрихкодированиеЕГАИС.ТекстЗапросаВложенныхШтрихкодовПоДокументу(ПараметрыФормированияТекстаЗапроса),
		"ВложенныеШтрихкоды");
	
	МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Перечисления.ВидыДокументовЕГАИС.ЧекККМ);
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось отправить чек в ЕГАИС'");
	Иначе
		НомерЧека     = ДополнительныеПараметры.НомерЧека;
		НомерСмены    = ДополнительныеПараметры.НомерСмены;
		СерийныйНомер = ДополнительныеПараметры.СерийныйНомер;
		АдресТорговогоОбъекта = ДополнительныеПараметры.АдресТорговогоОбъекта;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НомерЧека",     НомерЧека);
	Запрос.УстановитьПараметр("НомерСмены",    НомерСмены);
	Запрос.УстановитьПараметр("СерийныйНомер", СерийныйНомер);
	Запрос.УстановитьПараметр("АдресТорговогоОбъекта", АдресТорговогоОбъекта);
	Запрос.УстановитьПараметр("ПустыеЗначенияНоменклатуры", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("Номенклатура"));
	
	РезультатыЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	Возврат ЧекиЕГАИС.ЧекXML(ДокументСсылка, РезультатыЗапроса, МенеджерВременныхТаблиц, Перечисления.ВидыДокументовЕГАИС.ЧекККМОтменаПередачи);
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеЕГАИС

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
КонецФункции

// Статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура со свойствами:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции


// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры);
	
КонецФункции

// Обновить статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура со свойствами:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции


// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияЕГАИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Возврат ЧекиЕГАИС.ПоследовательностьОпераций(ДокументСсылка);
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.АктПостановкиНаБалансЕГАИС - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияЕГАИС.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	Если НЕ ТипЗнч(ПараметрыОбновленияСтатуса) = Тип("Структура") Тогда
		ПараметрыОбновленияСтатуса = Новый Структура;
	КонецЕсли;
	ПараметрыОбновленияСтатуса.Вставить("ОбновлятьДвижения", Ложь);
	
	ЧекиЕГАИС.ПриИзмененииСтатусаЧека(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус);
	
КонецПроцедуры

// Определить необходимость перерасчета статуса оформления документов.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, по которому требуется рассчитать статус оформления.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Предыдущий статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость перерасчета статуса оформления.
//
Функция РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПоУмолчанию();
	
КонецФункции

// Возвращает статусы движений.
//
// Возвращаемое значение:
//  Массив - Статусы.
//
Функция СтатусыДвиженийАкцизныхМарокСвободныйОстаток() Экспорт
	
	Возврат ЧекиЕГАИС.СтатусыДвиженийАкцизныхМарокСвободныйОстаток();
	
КонецФункции

// Возвращает статусы движений.
//
// Возвращаемое значение:
//  Массив - Статусы.
//
Функция СтатусыДвиженийАкцизныхМарокКоличество() Экспорт
	
	Возврат ЧекиЕГАИС.СтатусыДвиженийАкцизныхМарокКоличество();
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат ЧекиЕГАИС.ДальнейшееДействиеПоУмолчанию();
	
КонецФункции

#КонецОбласти

#Область СканированиеАлкогольнойПродукции

Функция ТаблицаАлкогольнойПродукцииКОпределениюСправок2(ДокументОбъект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабличнаяЧасть.НоменклатураЕГАИС КАК АлкогольнаяПродукция,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ТабличнаяЧасть.Количество КАК Количество
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	&Товары КАК ТабличнаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабличнаяЧасть.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ТабличнаяЧасть.Серия КАК Серия,
	|	ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка) КАК Справка2,
	|	СУММА(ТабличнаяЧасть.Количество) КАК Количество,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.Маркируемый, ЛОЖЬ) КАК Маркируемая
	|ИЗ
	|	ВТТовары КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТабличнаяЧасть.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|		ПО (СправочникНоменклатура.ВидАлкогольнойПродукции = ВидыАлкогольнойПродукции.Ссылка)
	|ГДЕ
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.Маркируемый, ЛОЖЬ)
	|	И СправочникНоменклатура.АлкогольнаяПродукция
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ТабличнаяЧасть.Серия,
	|	ТабличнаяЧасть.АлкогольнаяПродукция,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.Маркируемый, ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("Товары", ДокументОбъект.Запасы.Выгрузить());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ШтрихкодыУпаковок(ДокументСсылка, ЗаполнитьСправки2ИзРегистра = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекККМЗапасы.Ссылка.Организация КАК Организация,
	|	ЧекККМАкцизныеМарки.АкцизнаяМарка КАК АкцизнаяМарка,
	|	ЧекККМАкцизныеМарки.Справка2 КАК Справка2,
	|	ЧекККМАкцизныеМарки.ШтрихкодУпаковки КАК ШтрихкодУпаковки
	|ПОМЕСТИТЬ Вт_Документ
	|ИЗ
	|	Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.АкцизныеМарки КАК ЧекККМАкцизныеМарки
	|		ПО ЧекККМЗапасы.Ссылка = ЧекККМАкцизныеМарки.Ссылка
	|			И ЧекККМЗапасы.КлючСвязи = ЧекККМАкцизныеМарки.КлючСвязи
	|ГДЕ
	|	ЧекККМЗапасы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	АкцизныеМаркиЕГАИС.АкцизнаяМарка КАК ШтрихкодУпаковки,
	|	ВЫБОР
	|		КОГДА АкцизныеМаркиЕГАИС.Справка2 = РозничнаяПродажаТовары.Справка2
	|			ТОГДА АкцизныеМаркиЕГАИС.Справка2
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.ОшибкаЧтенияСтатуса)
	|	КОНЕЦ КАК Статус,
	|	АкцизныеМаркиЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	РозничнаяПродажаТовары.Справка2 КАК Справка2
	|ИЗ
	|	Вт_Документ КАК РозничнаяПродажаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО РозничнаяПродажаТовары.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	|		ПО РозничнаяПродажаТовары.АкцизнаяМарка = АкцизныеМаркиЕГАИС.АкцизнаяМарка";

	
	Если ЗаполнитьСправки2ИзРегистра Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РозничнаяПродажаТовары.Справка2", "АкцизныеМаркиЕГАИС.Справка2");
	КонецЕсли; 
	
	Возврат Новый Структура("МаркированныеТовары", Запрос.Выполнить().Выгрузить());
КонецФункции

// Заполняет табличные части Акцизные марки и Товары по данным дерева упаковок.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ЧекККМ.
//  ДеревоУпаковок - ДеревоЗначений - дерево упаковок.
//  ПараметрыЗаполнения - Структура - См. ИнтеграцияЕГАИСУНФ.ПараметрыЗаполненияТоваровИАкцизныхМарок.
//  УпаковкаВерхнегоУровня - СправочникСсылка.ШтрихкодыУпаковокТоваров - Упаковка верхнего уровня.
//
Процедура ЗаполнитьТоварыИАкцизныеМарки(ДокументОбъект, ДеревоУпаковок, ПараметрыЗаполнения, УпаковкаВерхнегоУровня = Неопределено) Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура");
	ПараметрыОтбора.Вставить("Характеристика");
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено
			И СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			УпаковкаВерхнегоУровняСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
		Иначе
			УпаковкаВерхнегоУровняСтрокиДерева = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		ЗаполнитьТоварыИАкцизныеМарки(
			ДокументОбъект, СтрокаДерева, ПараметрыЗаполнения,
			УпаковкаВерхнегоУровняСтрокиДерева);
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			КоличествоАкцизныхМарок = 1;
			КоличествоКРаспределению = КоличествоАкцизныхМарок;
			
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаДерева);
			
			СтрокиПродукции = ДокументОбъект.Запасы.НайтиСтроки(ПараметрыОтбора);
			
			Для Каждого СтрокаПродукции Из СтрокиПродукции Цикл
				
				Если ЗначениеЗаполнено(СтрокаПродукции[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция])
					И НЕ СтрокаПродукции[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = СтрокаДерева.АлкогольнаяПродукция Тогда
					Продолжить;
				КонецЕсли;
				
				Если ПараметрыЗаполнения.ИзмененныеСтроки.Найти(СтрокаПродукции) = Неопределено
					И ПараметрыЗаполнения.ДобавленныеСтроки.Найти(СтрокаПродукции) = Неопределено Тогда
					СтрокаПродукции.Количество = КоличествоАкцизныхМарок;
					ПараметрыЗаполнения.ИзмененныеСтроки.Добавить(СтрокаПродукции);
				Иначе
					СтрокаПродукции.Количество = СтрокаПродукции.Количество + КоличествоАкцизныхМарок;
				КонецЕсли;
				
				КоличествоКРаспределению = КоличествоКРаспределению - КоличествоАкцизныхМарок;
				
				Прервать;
				
			КонецЦикла;
			
			Если КоличествоКРаспределению > 0 Тогда
				// Добавим строку.
				СтрокаПродукции = ДокументОбъект.Запасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПродукции, СтрокаДерева,, "Штрихкод");
				СтрокаПродукции.Количество    = КоличествоКРаспределению;
				СтрокаПродукции.КодМаркировки = СтрокаДерева.Штрихкод;
				
				СтрокаПродукции.ВидПродукцииИС                  = Перечисления.ВидыПродукцииИС.Алкогольная;
				СтрокаПродукции.МаркируемаяПродукция            = Истина;
				СтрокаПродукции.НеобходимостьВводаАкцизнойМарки = Истина;
				
				ПараметрыЗаполнения.ДобавленныеСтроки.Добавить(СтрокаПродукции);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаПродукции[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция]) Тогда
				СтрокаПродукции[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = СтрокаДерева.АлкогольнаяПродукция;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаПродукции.КлючСвязи) Тогда
				ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(ДокументОбъект.Запасы, СтрокаПродукции, "КлючСвязи");
			КонецЕсли;
			
			СтрокаАкцизнаяМарка = ДокументОбъект.АкцизныеМарки.Добавить();
			СтрокаАкцизнаяМарка.КлючСвязи        = СтрокаПродукции.КлючСвязи;
			СтрокаАкцизнаяМарка.КодАкцизнойМарки = СтрокаДерева.Штрихкод;
			СтрокаАкцизнаяМарка.АкцизнаяМарка    = СтрокаДерева.ШтрихкодУпаковки;
			СтрокаАкцизнаяМарка.Справка2         = СтрокаДерева.Справка2;
			СтрокаАкцизнаяМарка.ШтрихкодУпаковки = УпаковкаВерхнегоУровня;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ГосИС

Функция ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	// Подготовка параметров штрихкода для обработки.
	ПараметрыШтрихкодаДляОбработки = ИнтеграцияИСУНФ.ПараметрыШтрихкодаДляОбработки(Форма, ПараметрыСканирования, ДанныеШтрихкода);
	
	Объект              = ПараметрыШтрихкодаДляОбработки.Объект;
	РезультатОбработки  = ПараметрыШтрихкодаДляОбработки.РезультатОбработки;
	ПараметрыЗаполнения = ПараметрыШтрихкодаДляОбработки.ПараметрыЗаполнения;
	НастройкиКэша       = ПараметрыШтрихкодаДляОбработки.НастройкиКэша;
	
	Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		
		ДеревоУпаковок = Неопределено;
		Если ВложенныеШтрихкоды <> Неопределено Тогда
			ДеревоУпаковок = ВложенныеШтрихкоды.ДеревоУпаковок;
		ИначеЕсли ДанныеШтрихкода.Свойство("АдресДереваУпаковок")
			И Не ПустаяСтрока(ДанныеШтрихкода.АдресДереваУпаковок) Тогда
			ДеревоУпаковок = ПолучитьИзВременногоХранилища(ДанныеШтрихкода.АдресДереваУпаковок);
		КонецЕсли;
		
		Если НЕ ДеревоУпаковок = Неопределено Тогда
			ИнтеграцияИСУНФ.ОбработатьДанныеШтрихкодовДереваУпаковок(ДеревоУпаковок, ПараметрыШтрихкодаДляОбработки, Форма);
		КонецЕсли;
		
	Иначе
		
		// Подготовка данных штрихкода для обработки.
		ДанныеШтрихкодаДляОбработки = ИнтеграцияИСУНФ.ДанныеШтрихкодаДляОбработки();
		ЗаполнитьЗначенияСвойств(ДанныеШтрихкодаДляОбработки, ДанныеШтрихкода);
		
		ДанныеШтрихкодаДляОбработки.Количество = ИнтеграцияИСУНФ.КоличествоПродукцииПоДаннымШтрихкода(ДанныеШтрихкода, ПараметрыСканирования);
		ИнтеграцияИСУНФ.ОбработатьДанныеШтрихкодаПотребительскойУпаковки(ДанныеШтрихкодаДляОбработки, ПараметрыШтрихкодаДляОбработки, Форма);
		
	КонецЕсли;
	
	ЗаполнитьДанныеДобавленныхИзмененныхСтрок(Форма, РезультатОбработки);
	
	ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(Форма, НастройкиКэша);
	ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(Форма, НастройкиКэша);
	ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(Форма);
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = ИнтеграцияМОТПУНФ.ПараметрыУказанияСерий();
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры = Истина;
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.ЧекККМ";
	
	ПараметрыУказанияСерий.ЭтоНакладная = Истина;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Статус") Тогда
		ПараметрыУказанияСерий.ТолькоПросмотр = (Объект.Статус = Перечисления.СтатусыЧековККМ.Пробит);
	Иначе
		ПараметрыУказанияСерий.ТолькоПросмотр = Истина;
	КонецЕсли;
	ПараметрыУказанияСерий.ФактОтбора = Истина;
	ПараметрыУказанияСерий.Дата = Объект.Дата;
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

Процедура ЗаполнитьДанныеДобавленныхИзмененныхСтрок(Форма, Результат)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Объект = Форма;
	КонецЕсли;
	
	СтрокиДляОбработки = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиДляОбработки, Результат.ДобавленныеСтроки, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиДляОбработки, Результат.ИзмененныеСтроки, Истина);
	
	СлужебныеРеквизиты = Новый Структура("МаркируемаяПродукция, ВидПродукцииИС, КоэффициентЕдиницыИзмеренияГосИС, КоличествоВБазовыхЕдиницахГосИС");
	Для Каждого СтрокаДляОбработки Из СтрокиДляОбработки Цикл
		НоменклатураВДокументахСервер.ЗаполнитьДанныеВСтрокеТабличнойЧасти(Объект, Форма.КэшДанныхГОСИС.ИмяТабличнойЧасти, СтрокаДляОбработки);
		ИнтеграцияИСУНФКлиентСервер.ЗаполнитьСлужебныеРеквизитыСтроки(Форма, СтрокаДляОбработки, СлужебныеРеквизиты);
	КонецЦикла;
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ДокументДляШаблонаЧека() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЧекККМ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	НЕ ЧекККМ.ПометкаУдаления
	|	И ЧекККМ.Проведен");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Документы.ЧекККМ.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПробитиеЧека

Процедура ДополнитьТоварамиПараметрыПриПробитииЧека(ДокументОбъект, ОбщиеПараметры, ТаблицаТоваровЧека, ПризнакСпособаРасчета)
	
	ИспользоватьОплатуСертификатамиНСПК = ПолучитьФункциональнуюОпцию("ИспользоватьОплатуСертификатамиНСПК");
	ЭтоАванс = ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс
			ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная
			ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная;
	
	Если ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс Тогда
		
		СтрокаПозицииЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
		Если ОбщиеПараметры.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств Тогда
			СтрокаПозицииЧека.Наименование = НСтр("ru = 'Возврат от:'") + " " + ДокументОбъект.Контрагент;
		Иначе
			СтрокаПозицииЧека.Наименование = НСтр("ru = 'Оплата от:'") + " " + ДокументОбъект.Контрагент;
		КонецЕсли;
		СтрокаПозицииЧека.Количество     = 1;
		СтрокаПозицииЧека.Цена           = ДокументОбъект.СуммаДокумента;
		СтрокаПозицииЧека.ЦенаСоСкидками = ДокументОбъект.СуммаДокумента;
		СтрокаПозицииЧека.Сумма          = ДокументОбъект.СуммаДокумента;
		СтрокаПозицииЧека.НомерСекции    = 2;
		Если ОбщиеПараметры.СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ОСН Тогда
			
			Если ДокументОбъект.Дата > '20190101' Тогда
				Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЧекККМВозврат") Тогда 
					ЧекПродажи = ДокументОбъект.ЧекККМ;
					Если ЗначениеЗаполнено(ЧекПродажи) И ЧекПродажи.Дата < '20190101' Тогда  //Возврат аванса за 2018 год.
						СтрокаПозицииЧека.СтавкаНДС = 118;
						СтрокаПозицииЧека.СуммаНДС = СтрокаПозицииЧека.Сумма / 118 * 18; 
					Иначе 
						СтрокаПозицииЧека.СтавкаНДС = 120;
						СтрокаПозицииЧека.СуммаНДС = СтрокаПозицииЧека.Сумма / 120 * 20;
					КонецЕсли;
				Иначе 
					СтрокаПозицииЧека.СтавкаНДС = 120;
					СтрокаПозицииЧека.СуммаНДС = СтрокаПозицииЧека.Сумма / 120 * 20;
				КонецЕсли;
			Иначе 
				СтрокаПозицииЧека.СтавкаНДС = 118;
			КонецЕсли;
			
		Иначе
			СтрокаПозицииЧека.СтавкаНДС      = Неопределено;
		КонецЕсли;
		СтрокаПозицииЧека.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
		СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата;
		
		ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
		
	Иначе
		
		ДанныеДляИСМП = РозничныеПродажиСервер.ДанныеДляИСМП(ДокументОбъект, ОбщиеПараметры);
		
		ОперацияСДенежнымиСредствами = Ложь;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "ОперацияСДенежнымиСредствами") Тогда
			ОперацияСДенежнымиСредствами = ДокументОбъект.ОперацияСДенежнымиСредствами;
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из ТаблицаТоваровЧека Цикл
			
			МассивСтрокДляДобавленияВЧек = Новый Массив;
			МассивСтрокДляДобавленияВЧек.Добавить(СтрокаТЧ);
			
			Если СтрокаТЧ.ПродукцияИС И ДанныеДляИСМП.Количество() > 0 Тогда
				СтрокиИСМП = ДанныеДляИСМП.НайтиСтроки(Новый Структура("НомерСтроки", СтрокаТЧ.НомерСтроки));
				Если СтрокиИСМП.Количество() > 0 Тогда
					МассивСтрокДляДобавленияВЧек = СтрокиИСМП;
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого СтрокаДляДобавленияВЧек Из МассивСтрокДляДобавленияВЧек Цикл
				
				СтрокаТаблицыТоваров = Новый СписокЗначений();
				РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					СтрокаТЧ.Номенклатура, "НаименованиеПолное,ТипНоменклатуры,ЭтоНабор,ВидМаркировки,АлкогольнаяПродукция,ПодакцизныйТовар, ВидПродукцииИС, ВидМаркировки, КодМедицинскогоИзделия, ПризнакПредметаРасчета");
				Если ЗначениеЗаполнено(СтрокаТЧ.Характеристика) Тогда
					НаименованиеХарактеристикиДляПечати = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧ.Характеристика, "НаименованиеДляПечати");
					НаименованиеТовара = РеквизитыНоменклатуры.НаименованиеПолное + " (" + НаименованиеХарактеристикиДляПечати + ")";
				Иначе
					НаименованиеТовара = РеквизитыНоменклатуры.НаименованиеПолное;
				КонецЕсли;
				
				СтрокаПозицииЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
				СтрокаПозицииЧека.Наименование = НаименованиеТовара;
				СтрокаПозицииЧека.Количество   = СтрокаДляДобавленияВЧек.Количество;
				СтрокаПозицииЧека.Цена         = СтрокаДляДобавленияВЧек.Цена + ?(ДокументОбъект.СуммаВключаетНДС, 0, СтрокаДляДобавленияВЧек.СуммаНДС / ?(СтрокаДляДобавленияВЧек.Количество = 0, 1, СтрокаДляДобавленияВЧек.Количество)); //  5 - Цена за позицию без скидки;
				СуммаСкидки = СтрокаПозицииЧека.Цена * СтрокаПозицииЧека.Количество - (СтрокаДляДобавленияВЧек.Сумма + ?(ДокументОбъект.СуммаВключаетНДС, 0, СтрокаДляДобавленияВЧек.СуммаНДС));
				СтрокаПозицииЧека.ЦенаСоСкидками = Окр(СтрокаПозицииЧека.Цена - СуммаСкидки / ?(СтрокаДляДобавленияВЧек.Количество = 0, 1, СтрокаДляДобавленияВЧек.Количество), 2);
				Если СтрокаТЧ.Всего = СтрокаДляДобавленияВЧек.Сумма Тогда
					СтрокаПозицииЧека.Сумма        = СтрокаТЧ.Всего;
				ИначеЕсли ДокументОбъект.СуммаВключаетНДС Тогда
					СтрокаПозицииЧека.Сумма = СтрокаДляДобавленияВЧек.Сумма;
				Иначе
					СтрокаПозицииЧека.Сумма = СтрокаДляДобавленияВЧек.Сумма + СтрокаДляДобавленияВЧек.СуммаНДС;
				КонецЕсли;
				СтрокаПозицииЧека.СуммаСкидок = СуммаСкидки;
				СтрокаПозицииЧека.НомерСекции  = 1;
				СтрокаПозицииЧека.СуммаНДС = СтрокаДляДобавленияВЧек.СуммаНДС;
				Если Не ОперацияСДенежнымиСредствами Тогда
					СтрокаПозицииЧека.Штрихкод = СтрокаДляДобавленияВЧек.Штрихкод;
				КонецЕсли;
				СтрокаПозицииЧека.ПризнакПредметаРасчета = РозничныеПродажиСервер.ПолучитьПризнакПредметаРасчета(РеквизитыНоменклатуры);
				Если ТипЗнч(СтрокаДляДобавленияВЧек.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
					СтрокаПозицииЧека.КодЕдиницыИзмерения = СтрокаДляДобавленияВЧек.ЕдиницаИзмерения.ЕдиницаИзмеренияВладельца.Код;
				Иначе
					СтрокаПозицииЧека.КодЕдиницыИзмерения = СтрокаДляДобавленияВЧек.ЕдиницаИзмерения.Код;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТЧ.Партия)
					И СтрокаТЧ.Партия.Статус <> Перечисления.СтатусыПартий.СобственныеЗапасы Тогда
					СтруктураРеквизитов = Новый Структура();
					СтруктураРеквизитов.Вставить("НаименованиеПолное", "ВладелецПартии.НаименованиеПолное");
					СтруктураРеквизитов.Вставить("ИНН", "ВладелецПартии.ИНН");
					СтруктураРеквизитов.Вставить("ВладелецПартии", "ВладелецПартии");
					РеквизитыВладельца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТЧ.Партия, СтруктураРеквизитов);
					СтрокаПозицииЧека.ДанныеПоставщика.Наименование = РеквизитыВладельца.НаименованиеПолное;
					СтрокаПозицииЧека.ДанныеПоставщика.ИНН = РеквизитыВладельца.ИНН;
					Если СтрокаТЧ.Партия.Статус = Перечисления.СтатусыПартий.ТоварыНаКомиссии Тогда
						СтрокаПозицииЧека.ПризнакАгентаПоПредметуРасчета = Перечисления.ПризнакиАгента.Комиссионер;
					КонецЕсли;
					Телефон = Справочники.Контрагенты.ПолучитьТелефонКонтрагента(РеквизитыВладельца.ВладелецПартии);
					Телефон = РозничныеПродажиСервер.УбратьРазделителиВНомереТелефона(Телефон);
					СтрокаПозицииЧека.ДанныеПоставщика.Телефон = Телефон;
				КонецЕсли;
				
				СтрокаПозицииЧека.Вставить("РезультатРаспределенияШтрихкодов");
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДляДобавленияВЧек, "РезультатРаспределенияШтрихкодов")
					И ЗначениеЗаполнено(СтрокаДляДобавленияВЧек.РезультатРаспределенияШтрихкодов) Тогда
					
					РезультатРаспределенияШтрихкодов = СтрокаДляДобавленияВЧек.РезультатРаспределенияШтрихкодов;
					
					СтрокаПозицииЧека.РезультатРаспределенияШтрихкодов = РезультатРаспределенияШтрихкодов;
					
					ПолныйКодМаркировки = РезультатРаспределенияШтрихкодов.ПолныйКодМаркировки;
					Если ЗначениеЗаполнено(ПолныйКодМаркировки) Тогда
						СтрокаПозицииЧека.ШтрихкодBase64 = ПолныйКодМаркировки;
						СтрокаПозицииЧека.КонтрольнаяМарка = ПолныйКодМаркировки;
					КонецЕсли;
					
					Если РезультатРаспределенияШтрихкодов.ЧастичноеВыбытие Тогда
						Если СтрокаТЧ.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Пиво Тогда
							СтрокаПозицииЧека.Штрихкод = "";
							СтрокаПозицииЧека.ШтрихкодBase64 = "";
						Иначе
							СтрокаПозицииЧека.ДробноеКоличество.Числитель   = РезультатРаспределенияШтрихкодов.Количество;
							СтрокаПозицииЧека.ДробноеКоличество.Знаменатель = РезультатРаспределенияШтрихкодов.ЕмкостьПотребительскойУпаковки;
							
							Если РезультатРаспределенияШтрихкодов.Количество > 1 Тогда
								
								Упаковка = СтрокаДляДобавленияВЧек.ЕдиницаИзмерения;
								Если НЕ ЗначениеЗаполнено(Упаковка) Тогда
									Упаковка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДляДобавленияВЧек.Номенклатура, "ЕдиницаИзмерения");
								КонецЕсли;
								
								УпаковкаНаименование = "ед";
								Если ЗначениеЗаполнено(Упаковка) Тогда
									УпаковкаНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Упаковка, "Наименование");
								КонецЕсли;
								УпаковкаНаименование = УпаковкаНаименование + ".";
								
								Валюта = ДокументОбъект.ВалютаДокумента;
								ЦенаЕдиницы = Окр(СтрокаДляДобавленияВЧек.Цена / РезультатРаспределенияШтрихкодов.Количество, 2);
								
								ОписаниеЧастичногоВыбытия = СтрШаблон(
									НСтр("ru = ' (%1 %2, цена: %3 %4/%5)'"),
									РезультатРаспределенияШтрихкодов.Количество,
									УпаковкаНаименование,
									ЦенаЕдиницы,
									Валюта,
									УпаковкаНаименование);
								
								СтрокаПозицииЧека.Наименование = СтрокаПозицииЧека.Наименование
									+ ОписаниеЧастичногоВыбытия;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если РеквизитыНоменклатуры.ПодакцизныйТовар
					И ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
					ВидКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Контрагент, "ВидКонтрагента");
					
					Если ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо
						ИЛИ ВидКонтрагента = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель Тогда
						СтрокаПозицииЧека.СуммаАкциза = 0;
					КонецЕсли;
				КонецЕсли;
				
				СтрокаПозицииЧека.НомерСтрокиТовара = СтрокаТЧ.НомерСтроки;
				СтрокаПозицииЧека.КодВидаНоменклатурнойКлассификации = РеквизитыНоменклатуры.КодМедицинскогоИзделия;
				
				Если СтрокаТЧ.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
					СтрокаПозицииЧека.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс;
					СтрокаПозицииЧека.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДСДляККТ(СтрокаТЧ.СтавкаНДС, Истина);
				Иначе
					СтрокаПозицииЧека.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
					СтрокаПозицииЧека.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДСДляККТ(СтрокаТЧ.СтавкаНДС, ЭтоАванс);
				КонецЕсли;
				
				Если СтрокаТЧ.ПродукцияИС
					И ДанныеДляИСМП.Количество() > 0 Тогда
					
					ТипМаркировкиККТ = ИнтеграцияИСКлиентСервер.ТипМаркировкиККТПоВидуПродукции(СтрокаТЧ.ВидПродукцииИС);
					Если ЗначениеЗаполнено(ТипМаркировкиККТ) Тогда
						ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(СтрокаДляДобавленияВЧек.Штрихкод, СтрокаТЧ.ВидПродукцииИС);
						Если НЕ ДанныеРазбора = Неопределено Тогда
							СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ТипМаркировки                          = ТипМаркировкиККТ;
							СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы = ДанныеРазбора.СоставКодаМаркировки.GTIN;
							СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.СерийныйНомер                          = ДанныеРазбора.СоставКодаМаркировки.СерийныйНомер;
						КонецЕсли;
					КонецЕсли;
					
				ИначеЕсли СтрокаТЧ.АлкогольнаяПродукция И Не ОперацияСДенежнымиСредствами Тогда
					Если СтрокаТЧ.Количество > 1 Тогда
						СтрокаПозицииЧека.Штрихкод = СтрокаТЧ.Штрихкод;
					Иначе
						СтрокаПозицииЧека.Штрихкод = СтрокаТЧ.КодМаркировки;
					КонецЕсли;
				КонецЕсли;
				
				АгентскиеПлатежиУНФ.ЗаполнитьПараметрыПлатежногоДоговораВСтроке(ОбщиеПараметры, СтрокаПозицииЧека, СтрокаТЧ);
				
				Если ИспользоватьОплатуСертификатамиНСПК И Не ПустаяСтрока(СтрокаТЧ.КодТРУ) Тогда
					СтрокаПозицииЧека.NTIN = СтрокаТЧ.КодТРУ; // Для тега 1162 и 1163
					
					СтрокаТекста = СтрШаблон(НСтр("ru = 'ТРУ (КОД): %1'"), СтрокаПозицииЧека.NTIN);
					ТекстоваяСтрокаЧека =
						ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыТекстовойСтрокиЧека(СтрокаТекста);
					ОбщиеПараметры.ПозицииЧека.Добавить(ТекстоваяСтрокаЧека);
				КонецЕсли;
				
				ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОплатуПриПробитииЧекаККМ(ДокументОбъект, ОбщиеПараметры)
	
	// Подготовка таблицы оплат
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Оплата.ВидОплаты КАК ВидОплаты,
	|	Оплата.Сумма КАК Сумма
	|ПОМЕСТИТЬ Оплаты
	|ИЗ
	|	&Оплата КАК Оплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Оплаты.ВидОплаты КАК ВидОплаты,
	|	СУММА(Оплаты.Сумма) КАК Сумма
	|ИЗ
	|	Оплаты КАК Оплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	Оплаты.ВидОплаты
	|
	|ИМЕЮЩИЕ
	|	СУММА(Оплаты.Сумма) > 0";
	
	Запрос.УстановитьПараметр("Оплата", ДокументОбъект.БезналичнаяОплата.Выгрузить());
	
	Результат = Запрос.Выполнить();
	ТаблицаПоВидамОплат = Результат.Выгрузить();
	
	СуммаЭлектронно = 0;
	
	// Платежная карта
	СтрокаТаблицы = ТаблицаПоВидамОплат.Найти(Перечисления.ВидыБезналичныхОплат.БанковскаяКарта, "ВидОплаты");
	Если Не СтрокаТаблицы = Неопределено Тогда
		СуммаЭлектронно = СтрокаТаблицы.Сумма;
	КонецЕсли;
	
	// ЭС НСПК
	СтрокаТаблицы = ТаблицаПоВидамОплат.Найти(Перечисления.ВидыБезналичныхОплат.СертификатНСПК, "ВидОплаты");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОплатуСертификатамиНСПК") И Не СтрокаТаблицы = Неопределено Тогда
		Если СуммаЭлектронно > 0 Тогда
			ДетализацияОплаты = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДетализацииСтрокиОплаты();
			ДетализацияОплаты.НаименованиеТипаОплаты = НСтр("ru = 'КАРТА МИР'");
			ДетализацияОплаты.Сумма = СуммаЭлектронно;
			ОбщиеПараметры.ДетализацияОплаты.Добавить(ДетализацияОплаты);
		КонецЕсли;
		
		ДетализацияОплаты = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДетализацииСтрокиОплаты();
		ДетализацияОплаты.НаименованиеТипаОплаты = НСтр("ru = 'СЕРТИФИКАТОМ'");
		ДетализацияОплаты.Сумма = СтрокаТаблицы.Сумма;
		ОбщиеПараметры.ДетализацияОплаты.Добавить(ДетализацияОплаты);
		
		СтрокаТаблицыЧека   = ДокументОбъект.БезналичнаяОплата.НайтиСтроки(Новый Структура("ВидОплаты", Перечисления.ВидыБезналичныхОплат.СертификатНСПК));
		СтрокаТаблицыЧека   = ?(СтрокаТаблицыЧека.Количество(), СтрокаТаблицыЧека[0], Неопределено);
		
		Если НЕ СтрокаТаблицыЧека = Неопределено 
			И (ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЧекККМ")
				ИЛИ ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЧекККМВозврат")) Тогда
			
			ОбщиеПараметры.ИдентификаторОплатыПлатежнойСистемы 	= СтрокаТаблицыЧека.СсылочныйНомер;
			ОбщиеПараметры.ТипПлатежнойСистемы 					= Перечисления.ТипыПлатежнойСистемыККТ.СертификатНСПК;
			
			ОбщиеПараметры.QRКод.ЗначениеКода 					= СтрокаТаблицыЧека.СсылочныйНомер;
			
		КонецЕсли;
		
		СуммаЭлектронно = СуммаЭлектронно + СтрокаТаблицы.Сумма;
	КонецЕсли;
	
	// Платежная система
	СтрокаТаблицы = ТаблицаПоВидамОплат.Найти(Перечисления.ВидыБезналичныхОплат.СБП, "ВидОплаты");
	Если Не СтрокаТаблицы = Неопределено Тогда
		
		СуммаЭлектронно 	= СуммаЭлектронно + СтрокаТаблицы.Сумма;      
		СтрокаТаблицыЧека   = ДокументОбъект.БезналичнаяОплата.НайтиСтроки(Новый Структура("ВидОплаты", Перечисления.ВидыБезналичныхОплат.СБП));
		СтрокаТаблицыЧека   = ?(СтрокаТаблицыЧека.Количество(), СтрокаТаблицыЧека[0], Неопределено);
		
		Если НЕ СтрокаТаблицыЧека = Неопределено 
			И ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
			
			ОбщиеПараметры.ИдентификаторОплатыПлатежнойСистемы 	= СтрокаТаблицыЧека.СсылочныйНомер;
			ОбщиеПараметры.ТипПлатежнойСистемы 					= Перечисления.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей;
			
			ОбщиеПараметры.QRКод.ЗначениеКода 					= СтрокаТаблицыЧека.СсылочныйНомер;
			
		КонецЕсли;
		
	КонецЕсли;

	// Кредит
	СтрокаТаблицы = ТаблицаПоВидамОплат.Найти(Перечисления.ВидыБезналичныхОплат.Кредит, "ВидОплаты");
	Если Не СтрокаТаблицы = Неопределено Тогда
		СуммаЭлектронно = СуммаЭлектронно + СтрокаТаблицы.Сумма;
	КонецЕсли;
	
	Если СуммаЭлектронно <> 0 Тогда
		СтрокаОплаты = Новый Структура;
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Электронно);
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Электронно'"));
		СтрокаОплаты.Вставить("Сумма", СуммаЭлектронно);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	// Подарочный сертификат
	СтрокаТаблицы = ТаблицаПоВидамОплат.Найти(Перечисления.ВидыБезналичныхОплат.ПодарочныйСертификат, "ВидОплаты");
	Если Не СтрокаТаблицы = Неопределено Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Предоплата);
		СтрокаОплаты.Вставить("Сумма", СтрокаТаблицы.Сумма);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	// Наличные
	Если ДокументОбъект.Свойство("ПолученоНаличными") 
		И ДокументОбъект.ПолученоНаличными > 0 Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Наличные);
		СтрокаОплаты.Вставить("Сумма", ДокументОбъект.ПолученоНаличными);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	ИначеЕсли ДокументОбъект.СуммаДокумента - ДокументОбъект.БезналичнаяОплата.Итог("Сумма") > 0 Тогда 
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Наличные);
		СтрокаОплаты.Вставить("Сумма", ДокументОбъект.СуммаДокумента - ДокументОбъект.БезналичнаяОплата.Итог("Сумма"));
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	Если ОбщиеПараметры.ТаблицаОплат.Количество() = 0 Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Наличные);
		СтрокаОплаты.Вставить("Сумма", 0);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	//	Полная оплата бонусами/Встречное предоставление
	СтрокаОплатыВстречнымПредоставлением = ТаблицаПоВидамОплат.Найти(
		Перечисления.ВидыБезналичныхОплат.ВстречноеПредоставление, "ВидОплаты");
		
	СуммаВстречногоПредоставления = 0;
	Если НЕ СтрокаОплатыВстречнымПредоставлением = Неопределено Тогда
		СуммаВстречногоПредоставления = СтрокаОплатыВстречнымПредоставлением.Сумма;
	КонецЕсли;
	
	Если НЕ СтрокаОплатыВстречнымПредоставлением = Неопределено Тогда
		
		СтрокаОплаты = Новый Структура;
		СтрокаОплаты.Вставить("ТипОплаты", ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ТипыОплатыККТ.ВстречноеПредоставление"));
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Встречное предоставление'"));
		СтрокаОплаты.Вставить("Сумма", СуммаВстречногоПредоставления);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьОплатуПриПробитииЧекаККМ()

Процедура ЗаполнитьОплатуПриПробитииЧекаККМНаККТ(ДокументОбъект, ОбщиеПараметры)
	
	// Подготовка таблицы оплат
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Оплата.ВидОплаты КАК ВидОплаты,
	|	Оплата.Сумма КАК Сумма
	|ПОМЕСТИТЬ Оплата
	|ИЗ
	|	&Оплата КАК Оплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Зачет аванса"" КАК ВидОплаты,
	|	Предоплата.СуммаРасчетов КАК Сумма
	|ПОМЕСТИТЬ Предоплата
	|ИЗ
	|	&Предоплата КАК Предоплата
	|ГДЕ
	|	НЕ &ОплатаДолга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Оплата.ВидОплаты КАК ВидОплаты,
	|	Оплата.Сумма КАК Сумма
	|ПОМЕСТИТЬ Оплаты
	|ИЗ
	|	Оплата КАК Оплата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Предоплата.ВидОплаты,
	|	Предоплата.Сумма
	|ИЗ
	|	Предоплата КАК Предоплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Оплаты.ВидОплаты КАК ВидОплаты,
	|	СУММА(Оплаты.Сумма) КАК Сумма
	|ИЗ
	|	Оплаты КАК Оплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	Оплаты.ВидОплаты
	|
	|ИМЕЮЩИЕ
	|	СУММА(Оплаты.Сумма) > 0";
	
	Запрос.УстановитьПараметр("Оплата", ДокументОбъект.БезналичнаяОплата.Выгрузить());
	Запрос.УстановитьПараметр("Предоплата", ДокументОбъект.Предоплата.Выгрузить());
	
	ОплатаДолга = ДокументОбъект.Предоплата.Количество() И ДокументОбъект.ОперацияСДенежнымиСредствами;
	Запрос.УстановитьПараметр("ОплатаДолга", ОплатаДолга);
	
	Результат = Запрос.Выполнить();
	ТаблицаПоВидамОплат = Результат.Выгрузить();
	
	СуммаЭлектронно = 0;
	
	// Платежная карта
	СтрокаТаблицы = ТаблицаПоВидамОплат.Найти(Перечисления.ВидыБезналичныхОплат.БанковскаяКарта, "ВидОплаты");
	Если Не СтрокаТаблицы = Неопределено Тогда
		СуммаЭлектронно = СтрокаТаблицы.Сумма;
	КонецЕсли;
	
	// ЭС НСПК
	СтрокаТаблицы = ТаблицаПоВидамОплат.Найти(Перечисления.ВидыБезналичныхОплат.СертификатНСПК, "ВидОплаты");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОплатуСертификатамиНСПК") И Не СтрокаТаблицы = Неопределено Тогда
		Если СуммаЭлектронно > 0 Тогда
			ДетализацияОплаты = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДетализацииСтрокиОплаты();
			ДетализацияОплаты.НаименованиеТипаОплаты = НСтр("ru = 'КАРТА МИР'");
			ДетализацияОплаты.Сумма = СуммаЭлектронно;
			ОбщиеПараметры.ДетализацияОплаты.Добавить(ДетализацияОплаты);
		КонецЕсли;
		
		ДетализацияОплаты = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДетализацииСтрокиОплаты();
		ДетализацияОплаты.НаименованиеТипаОплаты = НСтр("ru = 'СЕРТИФИКАТОМ'");
		ДетализацияОплаты.Сумма = СтрокаТаблицы.Сумма;
		ОбщиеПараметры.ДетализацияОплаты.Добавить(ДетализацияОплаты);
		
		СтрокаТаблицыЧека   = ДокументОбъект.БезналичнаяОплата.НайтиСтроки(Новый Структура("ВидОплаты", Перечисления.ВидыБезналичныхОплат.СертификатНСПК));
		СтрокаТаблицыЧека   = ?(СтрокаТаблицыЧека.Количество(), СтрокаТаблицыЧека[0], Неопределено);
		
		Если НЕ СтрокаТаблицыЧека = Неопределено 
			И (ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЧекККМ")
				ИЛИ ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЧекККМВозврат")) Тогда
			
			ОбщиеПараметры.ИдентификаторОплатыПлатежнойСистемы 	= СтрокаТаблицыЧека.СсылочныйНомер;
			ОбщиеПараметры.ТипПлатежнойСистемы 					= Перечисления.ТипыПлатежнойСистемыККТ.СертификатНСПК;
			
			ОбщиеПараметры.QRКод.ЗначениеКода 					= СтрокаТаблицыЧека.СсылочныйНомер;
			
		КонецЕсли;
		
		СуммаЭлектронно = СуммаЭлектронно + СтрокаТаблицы.Сумма;
	КонецЕсли;
	
	// Платежная система
	СтрокаТаблицы = ТаблицаПоВидамОплат.Найти(Перечисления.ВидыБезналичныхОплат.СБП, "ВидОплаты");
	Если Не СтрокаТаблицы = Неопределено Тогда
		
		СуммаЭлектронно 	= СуммаЭлектронно + СтрокаТаблицы.Сумма;      
		СтрокаТаблицыЧека   = ДокументОбъект.БезналичнаяОплата.НайтиСтроки(Новый Структура("ВидОплаты", Перечисления.ВидыБезналичныхОплат.СБП));
		СтрокаТаблицыЧека   = ?(СтрокаТаблицыЧека.Количество(), СтрокаТаблицыЧека[0], Неопределено);
		
		Если НЕ СтрокаТаблицыЧека = Неопределено 
			И ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
			
			ОбщиеПараметры.ИдентификаторОплатыПлатежнойСистемы 	= СтрокаТаблицыЧека.СсылочныйНомер;
			ОбщиеПараметры.ТипПлатежнойСистемы 					= Перечисления.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей;
			
			ОбщиеПараметры.QRКод.ЗначениеКода 					= СтрокаТаблицыЧека.СсылочныйНомер;
			
		КонецЕсли;
		
	КонецЕсли;

	// Кредит
	СтрокаТаблицы = ТаблицаПоВидамОплат.Найти(Перечисления.ВидыБезналичныхОплат.Кредит, "ВидОплаты");
	Если Не СтрокаТаблицы = Неопределено Тогда
		СуммаЭлектронно = СуммаЭлектронно + СтрокаТаблицы.Сумма;
	КонецЕсли;
	
	Если СуммаЭлектронно <> 0 Тогда
		СтрокаОплаты = Новый Структура;
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Электронно);
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Электронно'"));
		СтрокаОплаты.Вставить("Сумма", СуммаЭлектронно);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	ЗачетАванса = 0;
	
	// Подарочный сертификат
	СтрокаТаблицы = ТаблицаПоВидамОплат.Найти(Перечисления.ВидыБезналичныхОплат.ПодарочныйСертификат, "ВидОплаты");
	Если Не СтрокаТаблицы = Неопределено Тогда
		ЗачетАванса = СтрокаТаблицы.Сумма;
	КонецЕсли;
	
	// Зачет аванса
	СтрокаТаблицы = ТаблицаПоВидамОплат.Найти("Зачет аванса", "ВидОплаты");
	Если Не СтрокаТаблицы = Неопределено Тогда
		ЗачетАванса = ЗачетАванса + СтрокаТаблицы.Сумма;
	КонецЕсли;
	
	Если ЗачетАванса > 0 Тогда
		СтрокаОплаты = Новый Структура;
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Предоплата);
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Зачет аванс'"));
		СтрокаОплаты.Вставить("Сумма", ЗачетАванса);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	ЭтоЧекНаВозврат = ?(ДокументОбъект.Свойство("Ссылка") И ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЧекККМВозврат"), Истина, Ложь);
	
	// Наличные
	Если ДокументОбъект.Свойство("ПолученоНаличными") 
		И ДокументОбъект.ПолученоНаличными > 0 Тогда
		СтрокаОплаты = Новый Структура;
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Наличные);
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Наличные'"));
		СтрокаОплаты.Вставить("Сумма", ДокументОбъект.ПолученоНаличными);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	ИначеЕсли ЭтоЧекНаВозврат И ОплатаДолга И ДокументОбъект.СуммаДокумента > 0 
		И (ДокументОбъект.СуммаДокумента - ДокументОбъект.БезналичнаяОплата.Итог("Сумма") > 0) Тогда 
		СтрокаОплаты = Новый Структура;
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Наличные);
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Наличные'"));
		СтрокаОплаты.Вставить("Сумма", ДокументОбъект.СуммаДокумента
									 - ДокументОбъект.БезналичнаяОплата.Итог("Сумма"));
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты)
	ИначеЕсли ДокументОбъект.СуммаДокумента > 0 И (ДокументОбъект.СуммаДокумента
			- ДокументОбъект.БезналичнаяОплата.Итог("Сумма")
			- ДокументОбъект.Предоплата.Итог("СуммаРасчетов") > 0) Тогда 
		СтрокаОплаты = Новый Структура;
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Наличные);
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Наличные'"));
		СтрокаОплаты.Вставить("Сумма", ДокументОбъект.СуммаДокумента
									 - ДокументОбъект.БезналичнаяОплата.Итог("Сумма")
									 - ДокументОбъект.Предоплата.Итог("СуммаРасчетов"));
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	Если ОбщиеПараметры.ТаблицаОплат.Количество() = 0 Тогда
		
		СтрокаОплаты = Новый Структура;
		СтрокаОплаты.Вставить("Сумма", 0);
		
		// Полная оплата бонусами, либо скидка 100%
		Если ДокументОбъект.СуммаДокумента = 0 Тогда
			СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.ВстречноеПредоставление);
			СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Встречное предоставление'"));
		Иначе
			СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Наличные);
			СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Наличные'"));
		КонецЕсли;
		
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
		
	КонецЕсли;
	
	//	Встречное предоставление
	СтрокаОплатыВстречнымПредоставлением = ТаблицаПоВидамОплат.Найти(
		Перечисления.ВидыБезналичныхОплат.ВстречноеПредоставление, "ВидОплаты");
		
	СуммаВстречногоПредоставления = 0;
	Если НЕ СтрокаОплатыВстречнымПредоставлением = Неопределено Тогда
		СуммаВстречногоПредоставления = СтрокаОплатыВстречнымПредоставлением.Сумма;
	КонецЕсли;
	
	Если НЕ СтрокаОплатыВстречнымПредоставлением = Неопределено Тогда
		
		СтрокаОплаты = Новый Структура;
		СтрокаОплаты.Вставить("ТипОплаты", ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ТипыОплатыККТ.ВстречноеПредоставление"));
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Встречное предоставление'"));
		СтрокаОплаты.Вставить("Сумма", СуммаВстречногоПредоставления);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьОплатуПриПробитииЧекаККМНаККТ()

Функция ПодготовитьДанныеДляПробитияЧека(ДокументОбъект, ДокументСсылка, ТранспортныйМодуль, ЕстьАлкогольнаяПродукцияЕГАИС, ЭтоВозврат = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаТоваровЧека = РабочееМестоКассира.ПодготовкаДанныхДляПробитияЧекаККМ(ДокументОбъект, ЕстьАлкогольнаяПродукцияЕГАИС);
	
	ОбщиеПараметры = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека();
	ОбщиеПараметры.Вставить("ЭтоРассрочка", ДокументОбъект.ОперацияСДенежнымиСредствами И ДокументОбъект.Предоплата.Количество() >0);
	
	// Общие параметры чека
	
	РеквизитыОрганизация = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.Организация, "НаименованиеПолное,ИНН,КПП");
	
	СтруктураРеквизитов = Новый Структура("ЭлектронныйЧекSMSПередаютсяПрограммой1С,ЭлектронныйЧекEmailПередаютсяПрограммой1С,СерийныйНомер,Код,ПодключаемоеОборудование,СтруктурнаяЕдиница");
	СтруктураРеквизитов.Вставить("СпособФорматноЛогическогоКонтроля", "ПодключаемоеОборудование.СпособФорматноЛогическогоКонтроля");
	СтруктураРеквизитов.Вставить("ДопустимоеРасхождениеФорматноЛогическогоКонтроля", "ПодключаемоеОборудование.ДопустимоеРасхождениеФорматноЛогическогоКонтроля");
	СтруктураРеквизитов.Вставить("ТипОборудования", "ПодключаемоеОборудование.ТипОборудования");
	СтруктураРеквизитов.Вставить("ИсточникФИОКассираВЧеке");
	СтруктураРеквизитов.Вставить("ШаблонЧекаПродажи");
	СтруктураРеквизитов.Вставить("ШаблонЧекаВозврата");
	СтруктураРеквизитов.Вставить("НеПечататьБумажныйЧек");
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.КассаККМ, СтруктураРеквизитов);
	
	ОбщиеПараметры.КассаККМ = ДокументОбъект.КассаККМ;
	
	ПользовательКассирДляПечати = Справочники.КассыККМ.ПолучитьПользователяКассираДляПечатиЧека(ДокументОбъект, РеквизитыКассыККМ.ИсточникФИОКассираВЧеке);
	РеквизитыКассира = РозничныеПродажиСервер.ПолучитьРеквизитыКассира(ПользовательКассирДляПечати);
	
	ОбщиеПараметры.ТипРасчета = ?(ЭтоВозврат,
		Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств,
		Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств);
	
	ОбщиеПараметры.Электронно = РеквизитыКассыККМ.НеПечататьБумажныйЧек;
	
	Если ЗначениеЗаполнено(ДокументОбъект.Телефон) Тогда
		Если РеквизитыКассыККМ.ЭлектронныйЧекSMSПередаютсяПрограммой1С Тогда
			ОбщиеПараметры.Отправляет1СSMS = Истина;
		КонецЕсли;
		ОбщиеПараметры.ПокупательНомер = "+7" + РозничныеПродажиСервер.УбратьРазделителиВНомереТелефона(ДокументОбъект.Телефон);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.АдресЭП) Тогда
		Если РеквизитыКассыККМ.ЭлектронныйЧекEmailПередаютсяПрограммой1С Тогда
			ОбщиеПараметры.Отправляет1СEmail = Истина;
		КонецЕсли;
		ОбщиеПараметры.ПокупательEmail = ДокументОбъект.АдресЭП;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
		СведенияОКонтрагенте = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.Контрагент, "НаименованиеПолное,ИНН,ВидКонтрагента");
		Если СведенияОКонтрагенте.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо 
			ИЛИ ЗначениеЗаполнено(СведенияОКонтрагенте.ИНН) Тогда
			ОбщиеПараметры.Получатель    = СведенияОКонтрагенте.НаименованиеПолное;
			ОбщиеПараметры.ПолучательИНН = СведенияОКонтрагенте.ИНН;
		КонецЕсли;
	КонецЕсли;
	
	ОбщиеПараметры.ДокументОснование = ДокументСсылка;
	ОбщиеПараметры.ТорговыйОбъект = РеквизитыКассыККМ.СтруктурнаяЕдиница;
	
	// Параметры необходимые для чека ЕНВД на принтере чеков
	ОбщиеПараметры.Кассир          = РеквизитыКассира.ИмяКассираИДолжность;
	ОбщиеПараметры.Вставить("ИмяКассира", РеквизитыКассира.ИмяКассира);
	ОбщиеПараметры.КассирИНН       = РеквизитыКассира.КассирИНН;
	
	ОбщиеПараметры.Организация = ДокументОбъект.Организация;
	ОбщиеПараметры.ОрганизацияНазвание = РеквизитыОрганизация.НаименованиеПолное;
	ОбщиеПараметры.ОрганизацияИНН = РеквизитыОрганизация.ИНН;
	ОбщиеПараметры.ОрганизацияКПП = РеквизитыОрганизация.КПП;
	ОбщиеПараметры.НомерКассы     = "00001";
	ОбщиеПараметры.НомерЧека      = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(ДокументСсылка.Дата,
		ДокументСсылка.Номер,
		ДокументСсылка.Организация.Префикс);
	ОбщиеПараметры.НомерСмены     = "1";
	
	СведенияОбОрганизации = ПечатьДокументовУНФ.СведенияОЮрФизЛице(ДокументОбъект.Организация, ДокументОбъект.Дата);
	АдресМагазина = ПечатьДокументовУНФ.КонтактнаяИнформация(ДокументОбъект.СтруктурнаяЕдиница, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы"));
		
	СерийныйНомер = РеквизитыКассыККМ.СерийныйНомер;
	Если НЕ ЗначениеЗаполнено(СерийныйНомер) Тогда
		СерийныйНомер = "1";
	КонецЕсли;
	
	ОбщиеПараметры.АдресМагазина = АдресМагазина;
	ОбщиеПараметры.НаименованиеМагазина = Строка(ДокументОбъект.СтруктурнаяЕдиница);
	ОбщиеПараметры.СерийныйНомер = СерийныйНомер;
	ОбщиеПараметры.СистемаНалогообложения = РозничныеПродажиСервер.ПолучитьТипСистемыНалогообложенияККТ(
		ДокументОбъект.Организация,
		ДокументОбъект.СтруктурнаяЕдиница,
		ДокументОбъект.Дата,
		ДокументОбъект.СпециальныйНалоговыйРежим);
		
	Если ТаблицаТоваровЧека.Количество()
		ИЛИ (ТаблицаТоваровЧека.Количество() = 0 И ДокументОбъект.ОперацияСДенежнымиСредствами
			И ДокументОбъект.Предоплата.Количество() = 0) Тогда
		// Подготовка таблицы товаров
		ДополнитьТоварамиПараметрыПриПробитииЧека(ДокументОбъект, ОбщиеПараметры, ТаблицаТоваровЧека, ПризнакСпособаРасчета(ДокументОбъект));
	ИначеЕсли ДокументОбъект.ОперацияСДенежнымиСредствами И ДокументОбъект.Предоплата.Количество() Тогда
		РозничныеПродажиСервер.ДополнитьТоварамиПараметрыПриПробитииЧека(ДокументОбъект, ОбщиеПараметры);
	КонецЕсли;
	
	Если РеквизитыКассыККМ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ 
		ИЛИ РеквизитыКассыККМ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ПринтерЧеков Тогда
		ОбщиеПараметры.СпособФорматноЛогическогоКонтроля = РеквизитыКассыККМ.СпособФорматноЛогическогоКонтроля;
		ОбщиеПараметры.ДопустимоеРасхождениеФорматноЛогическогоКонтроля = РеквизитыКассыККМ.ДопустимоеРасхождениеФорматноЛогическогоКонтроля;
		Если ФорматноЛогическийКонтрольКлиентСервер.НуженФорматноЛогическийКонтроль(ОбщиеПараметры) Тогда
			ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ОбщиеПараметры);
		КонецЕсли;
		ЗаполнитьОплатуПриПробитииЧекаККМНаККТ(ДокументОбъект, ОбщиеПараметры);
	Иначе
		ЗаполнитьОплатуПриПробитииЧекаККМ(ДокументОбъект, ОбщиеПараметры);
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ВидОплаты", Перечисления.ВидыБезналичныхОплат.ОплатаВРассрочку); 
	СтрокиСРассрочкой = ДокументОбъект.БезналичнаяОплата.НайтиСтроки(СтруктураОтбора);
	СуммаРассрочки = ?(СтрокиСРассрочкой.Количество(), СтрокиСРассрочкой[0].Сумма, 0);

	ПолученоНаличными = 0;
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
		ПолученоНаличными = ДокументОбъект.ПолученоНаличными;
	Иначе
		ПолученоНаличными = ПолучитьСуммуНаличныхОплат(ОбщиеПараметры.ТаблицаОплат);
	КонецЕсли;
	
	СуммаПредоплаты = ?(Не ДокументОбъект.ОперацияСДенежнымиСредствами, ДокументОбъект.Предоплата.Итог("СуммаРасчетов"), 0);
	
	Если СуммаРассрочки > 0 Тогда
		РазницаСумм = ДокументОбъект.Запасы.Итог("Сумма") - (ДокументОбъект.БезналичнаяОплата.Итог("Сумма") - СуммаРассрочки + ПолученоНаличными + СуммаПредоплаты);
		Если СуммаРассрочки > РазницаСумм Тогда
			РазницаСумм = СуммаРассрочки;
		КонецЕсли;
	Иначе
		РазницаСумм = ДокументОбъект.Запасы.Итог("Сумма") - ДокументОбъект.СуммаДокумента;
	КонецЕсли;

	Если РазницаСумм > 0 Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты",Перечисления.ТипыОплатыККТ.Постоплата);
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Постоплата'"));
		СтрокаОплаты.Вставить("Сумма", РазницаСумм);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты") Тогда
		РаботаСПодарочнымиСертификатами.ДобавитьВнереализационнуюПрибыль(ДокументОбъект, ОбщиеПараметры);
	КонецЕсли;
	
	УстановитьШаблонЧека(ОбщиеПараметры, РеквизитыКассыККМ, ЭтоВозврат);
	
	// Печать промокода на чеке
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПромокоды") И Не ЗначениеЗаполнено(ОбщиеПараметры.ШаблонЧека) Тогда
		ПромокодыУНФВызовСервера.ДополнитьПараметрыПробитияЧекаВыданнымиПромокодами(ОбщиеПараметры, ДокументОбъект);
	КонецЕсли;

	Если ОбщиеПараметры.ЭтоРассрочка Тогда
		
		СуммаЧека = 0;
		Если ОбщиеПараметры.ЭтоРассрочка Тогда
			СуммаЧека = ДокументОбъект.СуммаДокумента;
		Иначе
			Для Каждого ЭлементМассива Из ОбщиеПараметры.ПозицииЧека Цикл
				СуммаЧека = СуммаЧека + ЭлементМассива.Сумма;
			КонецЦикла;
		КонецЕсли;
		
		ПривестиСуммыПозицийЧекаКСуммеТаблицыОплат(ОбщиеПараметры, СуммаЧека);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ОбщиеПараметры;
	
КонецФункции // ПодготовитьДанныеДляПробитияЧека()

Функция ПолучитьСуммуНаличныхОплат(МассивСтрокТаблицыОплат)
	
	СуммаНаличныхОплат = 0;
	Для Каждого СтрокаОплаты Из МассивСтрокТаблицыОплат Цикл
		Если СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные Тогда
			СуммаНаличныхОплат = СуммаНаличныхОплат + СтрокаОплаты.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СуммаНаличныхОплат;
	
КонецФункции

// Процедура приводит суммы позиций чека к сумме полной оплаты
// 
// Параметры:
//    ОсновныеПараметры - см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека
//    ОбщаяСуммаЧека - Число - Общая сумма позиций чека
//    СуммаПолнойОплаты - Число - Сумма оплаченная
//    СуммаПередачиБезОплаты - Число - Сумма без оплаты
//    Отказ - Булево - Флаг отказа
//    ОписаниеОшибки - Строка - Описание ошибки
//
Процедура ПривестиСуммыПозицийЧекаКСуммеТаблицыОплат(ОсновныеПараметры, ОбщаяСуммаЧека)
	
	СуммаПолнойОплаты = 0; 
	СуммаПередачиБезОплаты = 0; 
	Отказ = Ложь; 
	ОписаниеОшибки = "";
	
	СуммаНаличные = 0;
	СуммаЭлектронно = 0;
	СуммаВстречноеПредоставление = 0;
	СуммаПредоплата = 0;
	СуммаПостоплата = 0;
	
	Для Каждого СтрокаОплат Из ОсновныеПараметры.ТаблицаОплат Цикл  
		Если СтрокаОплат.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные") Тогда
			СуммаНаличные = СуммаНаличные + СтрокаОплат.Сумма;
		ИначеЕсли СтрокаОплат.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно") Тогда
			СуммаЭлектронно = СуммаЭлектронно + СтрокаОплат.Сумма;
		ИначеЕсли СтрокаОплат.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.ВстречноеПредоставление") Тогда
			 СуммаВстречноеПредоставление = СуммаВстречноеПредоставление + СтрокаОплат.Сумма;
		 ИначеЕсли СтрокаОплат.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата") Тогда
			 СуммаПредоплата = СуммаПредоплата + СтрокаОплат.Сумма;
		 ИначеЕсли СтрокаОплат.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Постоплата") Тогда
			 СуммаПостоплата = СуммаПостоплата + СтрокаОплат.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	СуммаОплатБезнал = СуммаЭлектронно + СуммаВстречноеПредоставление + СуммаПредоплата + СуммаПостоплата;
	// Проверяем что сумма наличные указана со сдачей.
	Если (СуммаОплатБезнал + СуммаНаличные > ОбщаяСуммаЧека) И (СуммаНаличные > 0) Тогда
		НаличныеСдача = СуммаОплатБезнал + СуммаНаличные - ОбщаяСуммаЧека;
		Если СуммаНаличные > НаличныеСдача Тогда
			СуммаНаличные = СуммаНаличные - НаличныеСдача;
		КонецЕсли;
	КонецЕсли;
	
	СуммаФактическихОплат = СуммаНаличные + СуммаЭлектронно + СуммаВстречноеПредоставление; 
	
	СуммаФактическихОплат = СуммаФактическихОплат - СуммаПолнойОплаты;
	Если СуммаФактическихОплат < 0 Тогда
		Отказ = Истина;
		ОписаниеОшибки = НСтр("ru = 'Сумма по строкам с указанием признака полной оплаты меньше чем сумма самих оплат'") ;
		Возврат;
	ИначеЕсли СуммаФактическихОплат = 0 Тогда
		Отказ = Истина;
		ОписаниеОшибки = НСтр("ru = 'Необходимо указать оплату'") ;
		Возврат;
	КонецЕсли;
	
	СуммаПозицийЧека = 0;
	Для Каждого ПозицияЧека Из ОсновныеПараметры.ПозицииЧека Цикл
		СуммаПозицийЧека = СуммаПозицийЧека + ПозицияЧека.Сумма;
	КонецЦикла;
	СуммаНеобходимойПолнойОплаты = СуммаПозицийЧека - СуммаПередачиБезОплаты - СуммаПолнойОплаты;
	
	// Сумма всегда больше нулю, т.к. в чеке есть строки в частичной оплатой
	Если СуммаФактическихОплат < СуммаНеобходимойПолнойОплаты Тогда
		Коэффициент = СуммаФактическихОплат / СуммаНеобходимойПолнойОплаты;
		РассчитаннаяСуммаЧека = 0;
		МаксимальнаяПозиция = Неопределено;
		МаксимальнаяСумма = 0;
		СуммаЧастичныхОплат = 0;
		Для Каждого ПозицияЧека Из ОсновныеПараметры.ПозицииЧека Цикл
			Если ПозицияЧека.Свойство("ФискальнаяСтрока") Тогда
				Если ПозицияЧека.ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаЧастичная")
					ИЛИ ПозицияЧека.ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ОплатаКредита") Тогда
					Если ПозицияЧека.Сумма > МаксимальнаяСумма Тогда
						МаксимальнаяСумма = ПозицияЧека.Сумма;
						МаксимальнаяПозиция = ПозицияЧека;
					КонецЕсли;
					СуммаЧастичныхОплат = СуммаЧастичныхОплат + ПозицияЧека.Сумма;
					ПозицияЧека.Сумма = Окр(ПозицияЧека.Сумма * Коэффициент,2,1);
					РассчитаннаяСуммаЧека = РассчитаннаяСуммаЧека + ПозицияЧека.Сумма;
					Если ПозицияЧека.Свойство("Цена") Тогда
						ПозицияЧека.Цена = ПозицияЧека.Сумма;
					КонецЕсли;
					
					Если ПозицияЧека.Свойство("ЦенаСоСкидками") Тогда
						ПозицияЧека.ЦенаСоСкидками = ПозицияЧека.Сумма;
					КонецЕсли;
					
					Если ПозицияЧека.Свойство("СуммаНДС") И ПозицияЧека.СуммаНДС <> Неопределено Тогда
						ПозицияЧека.СуммаНДС = Окр(ПозицияЧека.СуммаНДС * Коэффициент,2,1);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат;
	КонецЕсли;
	
	Отклонение = СуммаФактическихОплат - РассчитаннаяСуммаЧека;
	
	Если Макс(Отклонение, -Отклонение) >= 0.01 Тогда
		СуммаМаксимальноПозиции = МаксимальнаяПозиция.Сумма;
		МаксимальнаяПозиция.Сумма = МаксимальнаяПозиция.Сумма + Отклонение;
		Если МаксимальнаяПозиция.Свойство("Цена") Тогда
			МаксимальнаяПозиция.Цена = МаксимальнаяПозиция.Сумма;
		КонецЕсли;
		
		Если МаксимальнаяПозиция.Свойство("ЦенаСоСкидками") Тогда
			МаксимальнаяПозиция.ЦенаСоСкидками = МаксимальнаяПозиция.Сумма;
		КонецЕсли;
					
		Если МаксимальнаяПозиция.Свойство("СуммаНДС") 
			И МаксимальнаяПозиция.СуммаНДС <> Неопределено 
			И СуммаМаксимальноПозиции <> Неопределено 
			И СуммаМаксимальноПозиции > 0 Тогда
			// Максимальная сумма не может быть равна или меньше нуля
			// Определяем отклонение НДС
			МаксимальнаяПозиция.СуммаНДС = Окр(МаксимальнаяПозиция.Сумма * МаксимальнаяПозиция.СуммаНДС / СуммаМаксимальноПозиции, 2,1);
		КонецЕсли;
	КонецЕсли; 
	
	// Общие суммы НДС по ставкам пересчитывается далее по алгоритму.
	
	// ИсправитьТаблицуОплат
	
	СуммаИсправленияОплат = СуммаНеобходимойПолнойОплаты - СуммаФактическихОплат;
	
	Если СуммаИсправленияОплат > 0 Тогда
		Для Каждого СтрокаОплат Из ОсновныеПараметры.ТаблицаОплат Цикл
			Если СтрокаОплат.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Постоплата") 
				ИЛИ СтрокаОплат.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата") Тогда
				
				Если СуммаИсправленияОплат >= СтрокаОплат.Сумма Тогда
					СуммаИсправленияОплат = СуммаИсправленияОплат - СтрокаОплат.Сумма;
					СтрокаОплат.Сумма = 0;
				Иначе
					СуммаИсправленияОплат = 0;
					СтрокаОплат.Сумма = СтрокаОплат.Сумма - СуммаИсправленияОплат;
				КонецЕсли;
				Если СуммаИсправленияОплат <= 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	КоличествоЭлементов = ОсновныеПараметры.ТаблицаОплат.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		Если ОсновныеПараметры.ТаблицаОплат[КоличествоЭлементов - Индекс].Сумма = 0 Тогда
			ОсновныеПараметры.ТаблицаОплат.Удалить(КоличествоЭлементов - Индекс);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПризнакСпособаРасчета(ДокументОбъект) Экспорт
	
	СтруктураСумм = СтруктураСуммТаблицыТоваровИОплат(ДокументОбъект);
	
	Если ДокументОбъект.ОперацияСДенежнымиСредствами Тогда
		
		Если ДокументОбъект.Запасы.Количество() = 0 И ДокументОбъект.Предоплата.Количество() > 0 Тогда
			Возврат Перечисления.ПризнакиСпособаРасчета.ОплатаКредита;
		КонецЕсли;
		
		Если ДокументОбъект.Запасы.Количество() = 0 Тогда
			Возврат Перечисления.ПризнакиСпособаРасчета.Аванс;
		ИначеЕсли СтруктураСумм.СуммаТоваров > СтруктураСумм.СуммаОплат Тогда
			Возврат Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная;
		ИначеЕсли СтруктураСумм.СуммаТоваров <= СтруктураСумм.СуммаОплат Тогда
			Возврат Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная;
		КонецЕсли;
		
	Иначе
		
		Если СтруктураСумм.СуммаВРассрочку >= СтруктураСумм.СуммаТоваров И СтруктураСумм.СуммаТоваров > 0 Тогда
			Возврат Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты;
		ИначеЕсли СтруктураСумм.СуммаВРассрочку > 0 И СтруктураСумм.СуммаТоваров > 0 Тогда
			Возврат Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой;
		КонецЕсли;
		
		Возврат Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
		
	КонецЕсли;
	
КонецФункции

Функция СтруктураСуммТаблицыТоваровИОплат(ДокументОбъект)
	
	СтруктураСумм = Новый Структура;
	СтруктураСумм.Вставить("СуммаТоваров", 0);
	СтруктураСумм.Вставить("СуммаОплат", 0);
	СтруктураСумм.Вставить("СуммаВРассрочку", 0);
	
	СтруктураСумм.СуммаТоваров = ДокументОбъект.Запасы.Итог("Сумма");
	СтруктураСумм.СуммаОплат = ДокументОбъект.СуммаДокумента;;
	
	Отбор = Новый Структура("ВидОплаты", Перечисления.ВидыБезналичныхОплат.ОплатаВРассрочку);
	СтрокиРассрочки = ДокументОбъект.БезналичнаяОплата.НайтиСтроки(Отбор);
	СуммаВРассрочку = 0;
	Для Каждого СтрокаРассрочки Из СтрокиРассрочки Цикл
		СуммаВРассрочку = СуммаВРассрочку + СтрокаРассрочки.Сумма;
	КонецЦикла;
	СтруктураСумм.СуммаВРассрочку = СуммаВРассрочку;
	
	Возврат СтруктураСумм;
	
КонецФункции

Процедура УстановитьШаблонЧека(ОбщиеПараметры, РеквизитыКассыККМ, ЭтоВозврат)
	
	Если ОбщиеПараметры.Свойство("ШаблонЧека") И Не ЗначениеЗаполнено(ОбщиеПараметры.ШаблонЧека) Тогда
		Если ЭтоВозврат Тогда
			Если ЗначениеЗаполнено(РеквизитыКассыККМ.ШаблонЧекаВозврата) Тогда
				ОбщиеПараметры.ШаблонЧека = РеквизитыКассыККМ.ШаблонЧекаВозврата;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(РеквизитыКассыККМ.ШаблонЧекаПродажи) Тогда
				ОбщиеПараметры.ШаблонЧека = РеквизитыКассыККМ.ШаблонЧекаПродажи;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
