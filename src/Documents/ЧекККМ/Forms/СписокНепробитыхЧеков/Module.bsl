
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Параметры.Свойство("НепробитыеЧеки")
		И Не Параметры.Свойство("ЧекиБезФискальногоНомера")
		И Не Параметры.Свойство("ЧекиСДвижениями") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("НепробитыеЧеки") И Параметры.НепробитыеЧеки.Количество() Тогда
		НепробитыеЧеки.Очистить();
		Для Каждого ОписаниеЧека Из Параметры.НепробитыеЧеки Цикл
			НоваяСтрока = НепробитыеЧеки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеЧека);
			НоваяСтрока.Картинка = 0;
		КонецЦикла;
	КонецЕсли;
	
	Если Параметры.Свойство("ЧекиБезФискальногоНомера") И Параметры.ЧекиБезФискальногоНомера.Количество() Тогда
		ЧекиБезФискальногоНомера.Очистить();
		Для Каждого ОписаниеЧека Из Параметры.ЧекиБезФискальногоНомера Цикл
			НоваяСтрока = ЧекиБезФискальногоНомера.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеЧека);
			НоваяСтрока.Картинка = 0;
		КонецЦикла;
	КонецЕсли;
	
	Если Параметры.Свойство("ЧекиСДвижениями") И Параметры.ЧекиСДвижениями.Количество() Тогда
		ЧекиСДвижениями.Очистить();
		Для Каждого ОписаниеЧека Из Параметры.ЧекиСДвижениями Цикл
			НоваяСтрока = ЧекиСДвижениями.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеЧека);
			НоваяСтрока.Картинка = 0;
		КонецЦикла;
		Если Параметры.Свойство("ОтчетОРозничныхПродажах", ОтчетОРозничныхПродажах) Тогда
			СверитьСуммуОтчетаИПробитыхЧеков(Параметры.ОтчетОРозничныхПродажах);
		Иначе
			СверитьСуммуОтчетаИПробитыхЧеков(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьФормуСпискаДокументовЧекККМ" Тогда
		ОбновитьСтатусыЧеков();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокЧековВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПоказатьЗначение(, ТекущаяСтрока.Чек);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаОтчетаНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ОтчетОРозничныхПродажах);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ФормаИсправить", "Доступность", ТекущаяСтраница.Имя = "ГруппаЧекиБезФискальногоНомера");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ФормаОтложитьДляДругойСмены", "Доступность", ТекущаяСтраница.Имя = "ГруппаНепробитыеЧеки");
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьЧек(Команда)
	
	ИмяТаблицы = ТекущийЭлемент.Имя;
	
	ТекущаяСтрока = Элементы[ИмяТаблицы].ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ПоказатьЗначение(, ТекущаяСтрока.Чек);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдаление(Команда)
	
	Чеки = Новый Массив;
	
	ИмяТаблицы = ТекущийЭлемент.Имя;
	
	Если ИмяТаблицы = "НепробитыеЧеки" Тогда
		Для Каждого Идентификатор Из Элементы.НепробитыеЧеки.ВыделенныеСтроки Цикл
			Строка = НепробитыеЧеки.НайтиПоИдентификатору(Идентификатор);
			Чеки.Добавить(Строка.Чек);
		КонецЦикла;
	ИначеЕсли ИмяТаблицы = "ЧекиБезФискальногоНомера" Тогда
		Для Каждого Идентификатор Из Элементы.ЧекиБезФискальногоНомера.ВыделенныеСтроки Цикл
			Строка = ЧекиБезФискальногоНомера.НайтиПоИдентификатору(Идентификатор);
			Чеки.Добавить(Строка.Чек);
		КонецЦикла;
	КонецЕсли;
	
	Если Чеки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПометитьНаУдалениеСервер(Чеки);
	ОбновитьСтатусыЧеков();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложитьЧеки(Команда)
	Чеки = Новый Массив;
	
	ИмяТаблицы = ТекущийЭлемент.Имя;
	СтрокиДляУдаления = Новый Массив;
	
	Если ИмяТаблицы = "НепробитыеЧеки" Тогда
		Для Каждого Идентификатор Из Элементы.НепробитыеЧеки.ВыделенныеСтроки Цикл
			Строка = НепробитыеЧеки.НайтиПоИдентификатору(Идентификатор);
			СтрокиДляУдаления.Добавить(Строка);
			Чеки.Добавить(Строка.Чек);
		КонецЦикла;
	КонецЕсли;
	
	Если Чеки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ОтложитьЧекиНаСервере(Чеки);
	Если Результат  Тогда
		Для Каждого СтрокаОтложена Из СтрокиДляУдаления Цикл
			НепробитыеЧеки.Удалить(СтрокаОтложена);
		КонецЦикла;
	КонецЕсли;
	ОбновитьСтатусыЧеков();
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗакрытие(Команда)
	
	Закрыть(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Исправить(Команда) 
	
	ИмяТаблицы = ТекущийЭлемент.Имя;
	
	Если ИмяТаблицы = "ЧекиБезФискальногоНомера" Тогда
		
		УстановитьФискальныеНомера();
		ОбновитьСтатусыЧеков();
		
	Иначе
		ИсправитьНаСервере();
		Закрыть(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИсправитьНаСервере()
	
	ВыполнятьКонтроль = Константы.КонтролироватьОстаткиПриПробитииЧековККМ.Получить();
	Если УдалитьДвижения Тогда
		НачатьТранзакцию();
		Попытка
			Если ВыполнятьКонтроль Тогда
				Константы.КонтролироватьОстаткиПриПробитииЧековККМ.Установить(Ложь);
			КонецЕсли;
			Для каждого СтрокаЧека Из ЧекиСДвижениями Цикл
				Чек = СтрокаЧека.Чек.ПолучитьОбъект();
				Чек.Заблокировать();
				Если Константы.АрхивироватьЧекиККМПриЗакрытииКассовойСмены.Получить() Тогда
					Чек.Архивный = Истина;
				Иначе
					Чек.Архивный = Ложь;
				КонецЕсли;
				Чек.ДвиженияПоЗапасамУдалять = Истина;
				Чек.Записать(РежимЗаписиДокумента.Проведение);
			КонецЦикла;
			ЗафиксироватьТранзакцию();
		Исключение                    
			ОтменитьТранзакцию();
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
	ИначеЕсли УдалитьЧеки Тогда
		НачатьТранзакцию();
		Попытка
			Если ВыполнятьКонтроль Тогда
				Константы.КонтролироватьОстаткиПриПробитииЧековККМ.Установить(Ложь);
			КонецЕсли;
			Для каждого СтрокаЧека Из ЧекиСДвижениями Цикл
				Чек = СтрокаЧека.Чек.ПолучитьОбъект();
				Если НЕ Чек.Проведен ИЛИ Чек.ДвиженияПоЗапасамУдалять Тогда
					Продолжить;
				КонецЕсли;
				Чек.Заблокировать();
				Чек.УстановитьПометкуУдаления(Истина);
			КонецЦикла;
			ЗафиксироватьТранзакцию();
		Исключение                    
			ОтменитьТранзакцию();
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	Если ВыполнятьКонтроль Тогда
		Константы.КонтролироватьОстаткиПриПробитииЧековККМ.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьФискальныеНомера()
	
	НачатьТранзакцию();
	Попытка
		Для Каждого СтрокаЧека Из ЧекиБезФискальногоНомера Цикл
			ЧекОбъект = СтрокаЧека.Чек.ПолучитьОбъект();
			ЧекОбъект.Заблокировать();
			ЧекОбъект.НомерЧекаККМ = 1;
			ЧекОбъект.Записать(РежимЗаписиДокумента.Запись);
			СтрокаЧека.НомерЧекаККМ = 1;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	ЕстьНепробитые = НепробитыеЧеки.Количество() > 0;
	ЕстьБезНомера = ЧекиБезФискальногоНомера.Количество() > 0;
	ЕстьСДвижениями = ЧекиСДвижениями.Количество() > 0;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ГруппаНепробитыеЧеки", "Видимость", ЕстьНепробитые);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ГруппаЧекиБезФискальногоНомера", "Видимость", ЕстьБезНомера);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ФормаИсправить", "Видимость", ЕстьБезНомера Или ЕстьСДвижениями);
	
	Если ЕстьНепробитые И ЕстьБезНомера Тогда
		Элементы.Переместить(Элементы.ГруппаНепробитыеЧеки, Элементы.ГруппаСтраницы);
		Элементы.Переместить(Элементы.ГруппаЧекиБезФискальногоНомера, Элементы.ГруппаСтраницы);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ФормаИсправить", "Доступность", Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя = "ГруппаЧекиБезФискальногоНомера");
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ГруппаНепробитыеЧеки", "ОтображатьЗаголовок", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ГруппаЧекиБезФискальногоНомера", "ОтображатьЗаголовок", Ложь);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ЧекиСДвижениями", "Видимость", ЕстьСДвижениями);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ФормаПометитьНаУдаление", "Видимость", Не ЕстьСДвижениями);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ФормаПродолжитьЗакрытие", "Видимость", Не ЕстьСДвижениями);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ГруппаПодвал", "Видимость", ЕстьСДвижениями);
	
КонецПроцедуры

&НаСервере
Функция ПометитьНаУдалениеСервер(ЧекиККМ)
	
	НачатьТранзакцию();
	Попытка
		Для каждого Чек Из ЧекиККМ Цикл
			ЧекККМОбъект = Чек.ПолучитьОбъект();
			Если ТипЗнч(ЧекККМОбъект) = Тип("ДокументОбъект.ЧекККМ") Тогда
				Если ЧекККМОбъект.Статус = Перечисления.СтатусыЧековККМ.Пробит Тогда
					ЧекККМОбъект.Статус = Неопределено;
					ЧекККМОбъект.Записать();
				КонецЕсли;
			КонецЕсли;
			ЧекККМОбъект.УстановитьПометкуУдаления(Истина);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ОбщегоНазначения.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки; 
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ОбновитьСтатусыЧеков()
	
	НепробитыеЧекиПараметр = Новый ТаблицаЗначений;
	НепробитыеЧекиПараметр.Колонки.Добавить("Чек", Новый ОписаниеТипов("ДокументСсылка.ЧекККМ, ДокументСсылка.ЧекККМВозврат"));
	НепробитыеЧекиПараметр.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	Для Каждого СтрокаЧек Из НепробитыеЧеки Цикл
		НоваяСтрока = НепробитыеЧекиПараметр.Добавить();
		НоваяСтрока.Чек = СтрокаЧек.Чек;
		НоваяСтрока.Идентификатор = СтрокаЧек.ПолучитьИдентификатор();
	КонецЦикла;
	
	ЧекиБезНомераПараметр = НепробитыеЧекиПараметр.СкопироватьКолонки();
	Для Каждого СтрокаЧек Из ЧекиБезФискальногоНомера Цикл
		НоваяСтрока = ЧекиБезНомераПараметр.Добавить();
		НоваяСтрока.Чек = СтрокаЧек.Чек;
		НоваяСтрока.Идентификатор = СтрокаЧек.ПолучитьИдентификатор();
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НепробитыеЧеки", НепробитыеЧекиПараметр);
	Запрос.УстановитьПараметр("ЧекиБезНомера", ЧекиБезНомераПараметр);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НепробитыеЧеки.Чек КАК Чек,
	|	НепробитыеЧеки.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ НепробитыеЧеки
	|ИЗ
	|	&НепробитыеЧеки КАК НепробитыеЧеки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекиБезНомера.Чек КАК Чек,
	|	ЧекиБезНомера.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ЧекиБезНомера
	|ИЗ
	|	&ЧекиБезНомера КАК ЧекиБезНомера
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НепробитыеЧеки.Чек КАК Чек,
	|	НепробитыеЧеки.Идентификатор КАК Идентификатор,
	|	ЧекККМ.Проведен КАК Проведен,
	|	ЧекККМ.ПометкаУдаления КАК ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА ЧекККМ.ПометкаУдаления
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.ПустаяСсылка)
	|		ИНАЧЕ ЧекККМ.Статус
	|	КОНЕЦ КАК Статус
	|ИЗ
	|	НепробитыеЧеки КАК НепробитыеЧеки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК ЧекККМ
	|		ПО НепробитыеЧеки.Чек = ЧекККМ.Ссылка
	|ГДЕ
	|	НепробитыеЧеки.Чек ССЫЛКА Документ.ЧекККМ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НепробитыеЧеки.Чек,
	|	НепробитыеЧеки.Идентификатор,
	|	ЧекККМВозврат.Проведен,
	|	ЧекККМВозврат.ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА ЧекККМВозврат.Проведен
	|				И ЧекККМВозврат.НомерЧекаККМ <> 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|		КОГДА ЧекККМВозврат.ПометкаУдаления
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.ПустаяСсылка)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.ЧекНеПробит)
	|	КОНЕЦ
	|ИЗ
	|	НепробитыеЧеки КАК НепробитыеЧеки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|		ПО НепробитыеЧеки.Чек = ЧекККМВозврат.Ссылка
	|ГДЕ
	|	НепробитыеЧеки.Чек ССЫЛКА Документ.ЧекККМВозврат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекиБезНомера.Чек КАК Чек,
	|	ЧекиБезНомера.Идентификатор КАК Идентификатор,
	|	ЧекККМ.Проведен КАК Проведен,
	|	ЧекККМ.ПометкаУдаления КАК ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА ЧекККМ.ПометкаУдаления
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.ПустаяСсылка)
	|		ИНАЧЕ ЧекККМ.Статус
	|	КОНЕЦ КАК Статус,
	|	ЧекККМ.НомерЧекаККМ КАК НомерЧекаККМ
	|ИЗ
	|	ЧекиБезНомера КАК ЧекиБезНомера
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК ЧекККМ
	|		ПО ЧекиБезНомера.Чек = ЧекККМ.Ссылка
	|ГДЕ
	|	ЧекиБезНомера.Чек ССЫЛКА Документ.ЧекККМ";
	Результат = Запрос.ВыполнитьПакет();
	СтатусОтложен = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Отложен");
	
	Выборка = Результат[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаЧек = НепробитыеЧеки.НайтиПоИдентификатору(Выборка.Идентификатор);
		Если Выборка.ПометкаУдаления Тогда
			СтрокаЧек.Картинка = 1;
			СтрокаЧек.Статус = Неопределено;
		ИначеЕсли НЕ Выборка.Проведен
		И Выборка.Статус = СтатусОтложен Тогда
			СтрокаЧек.Картинка = 0;
			СтрокаЧек.Статус = СтатусОтложен;
		ИначеЕсли НЕ Выборка.Проведен Тогда
			СтрокаЧек.Картинка = 2;
			СтрокаЧек.Статус = Неопределено;
		Иначе
			СтрокаЧек.Картинка = 0;
			СтрокаЧек.Статус = Выборка.Статус;
		КонецЕсли;
	КонецЦикла;
	
	Выборка = Результат[3].Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаЧек = ЧекиБезФискальногоНомера.НайтиПоИдентификатору(Выборка.Идентификатор);
		СтрокаЧек.НомерЧекаККМ = Выборка.НомерЧекаККМ;
		Если Выборка.ПометкаУдаления Тогда
			СтрокаЧек.Картинка = 1;
			СтрокаЧек.Статус = Неопределено;
		ИначеЕсли НЕ Выборка.Проведен Тогда
			СтрокаЧек.Картинка = 2;
			СтрокаЧек.Статус = Неопределено;
		Иначе
			СтрокаЧек.Картинка = 0;
			СтрокаЧек.Статус = Выборка.Статус;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьНепробитые = Ложь;
	Для Каждого СтрокаЧек Из НепробитыеЧеки Цикл
		Если СтрокаЧек.Картинка = 0 И СтрокаЧек.Статус <> Перечисления.СтатусыЧековККМ.Пробит Тогда
			ЕстьНепробитые = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьБезНомера = Ложь;
	Для Каждого СтрокаЧек Из ЧекиБезФискальногоНомера Цикл
		Если СтрокаЧек.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит") И СтрокаЧек.НомерЧекаККМ = 0 Тогда
			ЕстьБезНомера = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ПродолжениеДоступно = Не (ЕстьБезНомера Или ЕстьНепробитые);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ФормаПродолжитьЗакрытие", "Доступность", ПродолжениеДоступно);
	
КонецПроцедуры

&НаСервере
Процедура СверитьСуммуОтчетаИПробитыхЧеков(ОтчетОРозничныхПродажах)
	
	УдалитьДвижения = Ложь;
	УдалитьЧеки = Ложь;
	Если ЗначениеЗаполнено(ОтчетОРозничныхПродажах) Тогда
		Запрос = Новый Запрос; 
		Запрос.УстановитьПараметр("ОтчетОРозничныхПродажах", ОтчетОРозничныхПродажах);
		Запрос.УстановитьПараметр("Чеки", ЧекиСДвижениями.Выгрузить().ВыгрузитьКолонку("Чек"));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтчетОРозничныхПродажах.СуммаДокумента КАК СуммаОтчета,
		|	0 КАК СуммаЧеков,
		|	0 КАК СуммаБезЧековСДвижениями
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		|ГДЕ
		|	ОтчетОРозничныхПродажах.Ссылка = &ОтчетОРозничныхПродажах
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	ЧекККМ.СуммаДокумента,
		|	ВЫБОР
		|		КОГДА НЕ ЧекККМ.Ссылка В (&Чеки)
		|			ТОГДА 0
		|		ИНАЧЕ ЧекККМ.СуммаДокумента
		|	КОНЕЦ
		|ИЗ
		|	Документ.ЧекККМ КАК ЧекККМ
		|ГДЕ
		|	ЧекККМ.КассоваяСмена = &ОтчетОРозничныхПродажах
		|	И ЧекККМ.Проведен
		|	И ЧекККМ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
		|	И НЕ ЧекККМ.ОперацияСДенежнымиСредствами
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	-ЧекККМВозврат.СуммаДокумента,
		|	ВЫБОР
		|		КОГДА НЕ ЧекККМВозврат.Ссылка В (&Чеки)
		|			ТОГДА 0
		|		ИНАЧЕ -ЧекККМВозврат.СуммаДокумента
		|	КОНЕЦ
		|ИЗ
		|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
		|ГДЕ
		|	ЧекККМВозврат.КассоваяСмена = &ОтчетОРозничныхПродажах
		|	И ЧекККМВозврат.Проведен
		|	И ЧекККМВозврат.НомерЧекаККМ <> 0
		|	И НЕ ЧекККМВозврат.ОперацияСДенежнымиСредствами
		|ИТОГИ
		|	СУММА(СуммаОтчета),
		|	СУММА(СуммаЧеков),
		|	СУММА(СуммаБезЧековСДвижениями)
		|ПО
		|	ОБЩИЕ";
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если Выборка.Следующий() Тогда
			СуммаОтчета = Выборка.СуммаОтчета;
			СуммаЧеков = Выборка.СуммаЧеков;
			Если СуммаОтчета = СуммаЧеков Тогда
				УдалитьДвижения = Истина;
			ИначеЕсли СуммаОтчета = СуммаЧеков - Выборка.СуммаБезЧековСДвижениями Тогда
				УдалитьЧеки = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтчетОРозничныхПродажах) Тогда
		Элементы.ГруппаСуммы.Видимость = Ложь;
		Элементы.ДекорацияПодсказка.Заголовок =
			НСтр("ru = 'Закрытие смены не выполнено'");
	ИначеЕсли УдалитьДвижения Тогда
		Элементы.ДекорацияПодсказка.Заголовок =
			НСтр("ru = 'Требуется обработка чеков, включенных в отчет, но не помещенных в архив. Операция будет выполнена автоматически при нажатии на кнопку ""Исправить""'");
	ИначеЕсли УдалитьЧеки Тогда
		Элементы.ДекорацияПодсказка.Заголовок =
			НСтр("ru = 'Требуется удаление лишних проведенных чеков, не включенных в отчет. Операция будет выполнена автоматически при нажатии на кнопку ""Исправить""'");
	Иначе
		// Неоднозначная ситуация: сумма отчета не совпадает с суммами чеков
		Элементы.ФормаИсправить.Доступность = Ложь;
		Элементы.ДекорацияПодсказка.Заголовок =
			НСтр("ru = 'Общая сумма чеков не соответствует сумме отчета. Обратитесь к техническому специалисту.'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОтложитьЧекиНаСервере(ЧекиККМ)
	СтатусОтложен = Перечисления.СтатусыЧековККМ.Отложен;
	ДокументыЧекККМВозврат = Новый ТаблицаЗначений;
	ДокументыЧекККМВозврат.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ЧекККМВозврат"));
	ДокументыЧекККМ = Новый ТаблицаЗначений;
	ДокументыЧекККМ.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ЧекККМ"));
	Для Каждого Чек Из ЧекиККМ Цикл
		Если ТипЗнч(Чек) = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
			ДокументыЧекККМВозврат.Добавить().Ссылка = Чек;
		ИначеЕсли ТипЗнч(Чек) = Тип("ДокументСсылка.ЧекККМ") Тогда			
			ДокументыЧекККМ.Добавить().Ссылка = Чек;
		КонецЕсли;		
	КонецЦикла;
	 
	НачатьТранзакцию();
	Попытка
		
		Блокировка 		  = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ЧекККМ");
		ЭлементБлокировки.ИсточникДанных = ДокументыЧекККМ;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки = Блокировка.Добавить("Документ.ЧекККМВозврат");
		ЭлементБлокировки.ИсточникДанных = ДокументыЧекККМВозврат;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				
		Блокировка.Заблокировать();
		
		Для каждого Чек Из ЧекиККМ Цикл
			ЧекККМОбъект = Чек.ПолучитьОбъект();
			ЧекККМОбъект.Статус = СтатусОтложен ;
			ЧекККМОбъект.КассоваяСмена = Неопределено;
			ЧекККМОбъект.Записать();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстСообщения = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецПопытки; 
	
	Возврат Истина;
КонецФункции


#КонецОбласти


