#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ПроцедурыЗаполненияДокумента

// Обработчик заполнения на основании документа ИнвентаризацияЗапасов.
//
// Параметры:
//  ДокументСсылкаИнвентаризацияЗапасов	 - ДокументСсылка.ИнвентаризацияЗапасов
//  ЗаполняетсяИзФормыДокумента - Булево - признак заполнения из формы
//
Процедура ЗаполнитьПоИнвентаризацииВсеРасхождения(ДокументСсылкаИнвентаризацияЗапасов, ЗаполняетсяИзФормыДокумента = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументСсылкаИнвентаризацияЗапасов) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗаполняетсяИзФормыДокумента Тогда
		ДокументОснование = ДокументСсылкаИнвентаризацияЗапасов.Ссылка;
		Организация = ДокументСсылкаИнвентаризацияЗапасов.Организация;
		СтруктурнаяЕдиница = ДокументСсылкаИнвентаризацияЗапасов.СтруктурнаяЕдиница;
		Ячейка = ДокументСсылкаИнвентаризацияЗапасов.Ячейка;
		
		// ФО Использовать подсистему Производство.
		Если Не Константы.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство.Получить()
			И СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
			ВызватьИсключение НСтр("ru = 'Нельзя ввести Оприходование запасов на основании инвентаризации запасов, т.к. недоступен вид деятельности Производство.'");
		КонецЕсли;
		
		Запасы.Очистить();
		СерииНоменклатуры.Очистить();
		СерииНоменклатурыОприходование.Очистить();
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МИНИМУМ(ИнвентаризацияЗапасов.НомерСтроки) КАК НомерСтроки,
	|	ИнвентаризацияЗапасов.Номенклатура КАК НоменклатураОприходование,
	|	ИнвентаризацияЗапасов.Характеристика КАК ХарактеристикаОприходование,
	|	ИнвентаризацияЗапасов.Партия КАК ПартияОприходование,
	|	ИнвентаризацияЗапасов.ЕдиницаИзмерения КАК ЕдиницаИзмеренияОприходование,
	|	МАКСИМУМ(ИнвентаризацияЗапасов.Количество - ИнвентаризацияЗапасов.КоличествоУчет) КАК КоличествоОтклонениеИнвентаризации,
	|	СУММА(ВЫБОР
	|			КОГДА ОприходованиеЗапасов.Количество ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ ОприходованиеЗапасов.Количество
	|		КОНЕЦ + ВЫБОР
	|			КОГДА ПересортицаЗапасовОприходование.Количество ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ ПересортицаЗапасовОприходование.Количество
	|		КОНЕЦ) КАК КоличествоОприходованное,
	|	СУММА(ВЫБОР
	|			КОГДА СписаниеЗапасов.Количество ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ СписаниеЗапасов.Количество
	|		КОНЕЦ + ВЫБОР
	|			КОГДА ПересортицаЗапасовСписание.Количество ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ ПересортицаЗапасовСписание.Количество
	|		КОНЕЦ) КАК КоличествоСписанное,
	|	ИнвентаризацияЗапасов.Цена КАК Цена,
	|	ИнвентаризацияЗапасов.КлючСвязи КАК КлючСвязи,
	|	ИнвентаризацияЗапасов.СерииНоменклатуры КАК СерииНоменклатурыОприходование
	|ИЗ
	|	Документ.ИнвентаризацияЗапасов.Запасы КАК ИнвентаризацияЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ОприходованиеЗапасовЗапасы.Номенклатура КАК Номенклатура,
	|			ОприходованиеЗапасовЗапасы.Характеристика КАК Характеристика,
	|			ОприходованиеЗапасовЗапасы.Партия КАК Партия,
	|			СУММА(ОприходованиеЗапасовЗапасы.Количество) КАК Количество
	|		ИЗ
	|			Документ.ОприходованиеЗапасов.Запасы КАК ОприходованиеЗапасовЗапасы
	|		ГДЕ
	|			ОприходованиеЗапасовЗапасы.Ссылка.ДокументОснование = &ДокументОснование
	|			И ОприходованиеЗапасовЗапасы.Ссылка.Проведен
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ОприходованиеЗапасовЗапасы.Номенклатура,
	|			ОприходованиеЗапасовЗапасы.Характеристика,
	|			ОприходованиеЗапасовЗапасы.Партия) КАК ОприходованиеЗапасов
	|		ПО ИнвентаризацияЗапасов.Номенклатура = ОприходованиеЗапасов.Номенклатура
	|			И ИнвентаризацияЗапасов.Характеристика = ОприходованиеЗапасов.Характеристика
	|			И ИнвентаризацияЗапасов.Партия = ОприходованиеЗапасов.Партия
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СписаниеЗапасовЗапасы.Номенклатура КАК Номенклатура,
	|			СписаниеЗапасовЗапасы.Характеристика КАК Характеристика,
	|			СписаниеЗапасовЗапасы.Партия КАК Партия,
	|			СУММА(СписаниеЗапасовЗапасы.Количество) КАК Количество
	|		ИЗ
	|			Документ.СписаниеЗапасов.Запасы КАК СписаниеЗапасовЗапасы
	|		ГДЕ
	|			СписаниеЗапасовЗапасы.Ссылка.ДокументОснование = &ДокументОснование
	|			И СписаниеЗапасовЗапасы.Ссылка.Проведен
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СписаниеЗапасовЗапасы.Номенклатура,
	|			СписаниеЗапасовЗапасы.Характеристика,
	|			СписаниеЗапасовЗапасы.Партия) КАК СписаниеЗапасов
	|		ПО ИнвентаризацияЗапасов.Номенклатура = СписаниеЗапасов.Номенклатура
	|			И ИнвентаризацияЗапасов.Характеристика = СписаниеЗапасов.Характеристика
	|			И ИнвентаризацияЗапасов.Партия = СписаниеЗапасов.Партия
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПересортицаЗапасовЗапасы.Номенклатура КАК Номенклатура,
	|			ПересортицаЗапасовЗапасы.Характеристика КАК Характеристика,
	|			ПересортицаЗапасовЗапасы.Партия КАК Партия,
	|			СУММА(ПересортицаЗапасовЗапасы.Количество) КАК Количество
	|		ИЗ
	|			Документ.ПересортицаЗапасов.Запасы КАК ПересортицаЗапасовЗапасы
	|		ГДЕ
	|			ПересортицаЗапасовЗапасы.Ссылка.ДокументОснование = &ДокументОснование
	|			И ПересортицаЗапасовЗапасы.Ссылка.Проведен
	|			И ПересортицаЗапасовЗапасы.Ссылка <> &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПересортицаЗапасовЗапасы.Номенклатура,
	|			ПересортицаЗапасовЗапасы.Характеристика,
	|			ПересортицаЗапасовЗапасы.Партия) КАК ПересортицаЗапасовСписание
	|		ПО ИнвентаризацияЗапасов.Номенклатура = ПересортицаЗапасовСписание.Номенклатура
	|			И ИнвентаризацияЗапасов.Характеристика = ПересортицаЗапасовСписание.Характеристика
	|			И ИнвентаризацияЗапасов.Партия = ПересортицаЗапасовСписание.Партия
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПересортицаЗапасовЗапасы.НоменклатураОприходование КАК НоменклатураОприходование,
	|			ПересортицаЗапасовЗапасы.ХарактеристикаОприходование КАК ХарактеристикаОприходование,
	|			ПересортицаЗапасовЗапасы.ПартияОприходование КАК ПартияОприходование,
	|			СУММА(ПересортицаЗапасовЗапасы.Количество) КАК Количество
	|		ИЗ
	|			Документ.ПересортицаЗапасов.Запасы КАК ПересортицаЗапасовЗапасы
	|		ГДЕ
	|			ПересортицаЗапасовЗапасы.Ссылка.ДокументОснование = &ДокументОснование
	|			И ПересортицаЗапасовЗапасы.Ссылка.Проведен
	|			И ПересортицаЗапасовЗапасы.Ссылка <> &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПересортицаЗапасовЗапасы.НоменклатураОприходование,
	|			ПересортицаЗапасовЗапасы.ХарактеристикаОприходование,
	|			ПересортицаЗапасовЗапасы.ПартияОприходование) КАК ПересортицаЗапасовОприходование
	|		ПО ИнвентаризацияЗапасов.Номенклатура = ПересортицаЗапасовОприходование.НоменклатураОприходование
	|			И ИнвентаризацияЗапасов.Характеристика = ПересортицаЗапасовОприходование.ХарактеристикаОприходование
	|			И ИнвентаризацияЗапасов.Партия = ПересортицаЗапасовОприходование.ПартияОприходование
	|ГДЕ
	|	ИнвентаризацияЗапасов.Ссылка = &ДокументОснование
	|	И ИнвентаризацияЗапасов.Количество - ИнвентаризацияЗапасов.КоличествоУчет <> 0
	|	И ВЫБОР
	|			КОГДА ИнвентаризацияЗапасов.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|				ТОГДА ИнвентаризацияЗапасов.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.СобственныеЗапасы)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнвентаризацияЗапасов.Номенклатура,
	|	ИнвентаризацияЗапасов.Характеристика,
	|	ИнвентаризацияЗапасов.Партия,
	|	ИнвентаризацияЗапасов.ЕдиницаИзмерения,
	|	ИнвентаризацияЗапасов.Цена,
	|	ИнвентаризацияЗапасов.КлючСвязи,
	|	ИнвентаризацияЗапасов.СерииНоменклатуры");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументСсылкаИнвентаризацияЗапасов);
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение НСтр("ru = 'Нет данных для оформления пересортицы: в инвентаризации нет отклонений или все документы уже оформлены!'");
	КонецЕсли;
	
	ТЗСоответствиеКлючейСвязи = Новый ТаблицаЗначений;
	ТЗСоответствиеКлючейСвязи.Колонки.Добавить("КлючСвязиНовый", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 0)));
	ТЗСоответствиеКлючейСвязи.Колонки.Добавить("КлючСвязи", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 0)));
	ТЗСоответствиеКлючейСвязи.Колонки.Добавить("ЭтоСписание", Новый ОписаниеТипов("Булево"));
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Если нужно списать.
		Если Выборка.КоличествоОтклонениеИнвентаризации < 0 Тогда
			КоличествоОприходовать = Выборка.КоличествоОтклонениеИнвентаризации - Выборка.КоличествоОприходованное + Выборка.КоличествоСписанное;
			Если КоличествоОприходовать >= 0 Тогда
				Продолжить;
			КонецЕсли;
		// Если нужно оприходовать.
		Иначе
			КоличествоОприходовать = Выборка.КоличествоОтклонениеИнвентаризации - Выборка.КоличествоОприходованное + Выборка.КоличествоСписанное;
			Если КоличествоОприходовать <= 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = Запасы.Добавить();
		Если КоличествоОприходовать > 0 Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
			ЭтоСписание = Ложь;
			
		Иначе
			
			СтрокаТабличнойЧасти.Номенклатура = Выборка.НоменклатураОприходование;
			СтрокаТабличнойЧасти.Характеристика = Выборка.ХарактеристикаОприходование;
			СтрокаТабличнойЧасти.Партия = Выборка.ПартияОприходование;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмеренияОприходование;
			СтрокаТабличнойЧасти.СерииНоменклатуры = Выборка.СерииНоменклатурыОприходование;
			
			КоличествоОприходовать = -КоличествоОприходовать;
			
			ЭтоСписание = Истина;
			
		КонецЕсли;
		
		СтрокаТабличнойЧасти.КлючСвязи = 0;
		ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Запасы, СтрокаТабличнойЧасти, "КлючСвязи");
		
		НоваяСтрокаСоответствия = ТЗСоответствиеКлючейСвязи.Добавить();
		НоваяСтрокаСоответствия.КлючСвязиНовый = СтрокаТабличнойЧасти.КлючСвязи;
		НоваяСтрокаСоответствия.КлючСвязи = Выборка.КлючСвязи;
		НоваяСтрокаСоответствия.ЭтоСписание = ЭтоСписание;
		
		СтрокаТабличнойЧасти.Количество = КоличествоОприходовать;
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
		
	КонецЦикла;
	
	Если Запасы.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Нет данных для оформления пересортицы: в инвентаризации нет отклонений или все документы уже оформлены!'");
	Иначе
		// Возможно повторное заполнение данными из того же документа. Табличная часть при этом не очищается, а строки добавляются.
		СерииНоменклатурыУНФ.ЗаполнитьТЧСерииНоменклатурыПоКлючуСвязиУстановитьНовыйКлючСвязи(ТЗСоответствиеКлючейСвязи, ЭтотОбъект, ДокументСсылкаИнвентаризацияЗапасов,,, "СерииНоменклатуры", Истина);
		СерииНоменклатурыУНФ.ЗаполнитьТЧСерииНоменклатурыПоКлючуСвязиУстановитьНовыйКлючСвязи(ТЗСоответствиеКлючейСвязи, ЭтотОбъект, ДокументСсылкаИнвентаризацияЗапасов,,, "СерииНоменклатурыОприходование", Ложь);
	КонецЕсли;
	
	СерииНоменклатурыУНФ.УдалитьСерииНоменклатурыВТабличнойЧастиВЗависимостиОтПолитики(ЭтотОбъект);
	
КонецПроцедуры

// Обработчик заполнения на основании документа ПриходныйОрдер.
//
// Параметры:
//  ДокументСсылкаПриходныйОрдер	 - ДокументСсылка.ПриходныйОрдер
//
Процедура ЗаполнитьПоПриходномуОрдеру(ДокументСсылкаПриходныйОрдер) Экспорт
	
	Организация = ДокументСсылкаПриходныйОрдер.Организация;
	СтруктурнаяЕдиница = ДокументСсылкаПриходныйОрдер.СтруктурнаяЕдиница;
	Ячейка = ДокументСсылкаПриходныйОрдер.Ячейка;
	
	Запасы.Очистить();
	СерииНоменклатуры.Очистить();
	СерииНоменклатурыОприходование.Очистить();
	
	УчетГТД = ПолучитьФункциональнуюОпцию("УчетГТД");
	
	ВидУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиница, "ВидУчетаОрдерныхСкладов");
	
	Если ВидУчета = Перечисления.ВидыУчетаОрдерныхСкладов.ПоСкладуВЦелом Тогда
		ЗаполнитьПоСкладскомуОрдеруБезУчетаОстатков(ДокументСсылкаПриходныйОрдер);
		Возврат;
	КонецЕсли;
	
	Если ВидУчета = Перечисления.ВидыУчетаОрдерныхСкладов.УчетОстатковПоПрочимДокументам Тогда
		ТекстИсключения = НСтр("ru = 'Вид учета остатков на ордерном складе - по Пересортице запасов. Ввод Пересортицы запасов на основании Складского ордера недоступен.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	УчетОстатковПоСкладскимОрдерам = СкладскойУчетСервер.УчетОстатковВРазрезеСкладскихОрдеров(СтруктурнаяЕдиница);
	
	Если УчетОстатковПоСкладскимОрдерам Тогда
		ДокументПоступления = ДокументОснование;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПриходныйОрдерЗапасы.НомерСтроки КАК НомерСтроки,
	|	ПриходныйОрдерЗапасы.Номенклатура КАК НоменклатураОприходование,
	|	ПриходныйОрдерЗапасы.Характеристика КАК ХарактеристикаОприходование,
	|	ПриходныйОрдерЗапасы.Партия КАК ПартияОприходование,
	|	ПриходныйОрдерЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмеренияОприходование,
	|	ПриходныйОрдерЗапасы.СерииНоменклатуры КАК СерииНоменклатурыОприходование,
	|	ПриходныйОрдерЗапасы.КлючСвязи КАК КлючСвязи,
	|	ПриходныйОрдерЗапасы.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА &КонтролироватьОстаткиПоДокументам
	|			ТОГДА &ДокументОснование
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументПоступления,
	|	ПриходныйОрдерЗапасы.Ячейка КАК Ячейка,
	|	&СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ИЗ
	|	Документ.ПриходныйОрдер.Запасы КАК ПриходныйОрдерЗапасы
	|ГДЕ
	|	ПриходныйОрдерЗапасы.Ссылка = &ДокументОснование
	|	И ПриходныйОрдерЗапасы.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗапасыКПоступлениюНаСкладыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыКПоступлениюНаСкладыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыКПоступлениюНаСкладыОстатки.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА ЗапасыКПоступлениюНаСкладыОстатки.КоличествоОстаток < 0
	|			ТОГДА -ЗапасыКПоступлениюНаСкладыОстатки.КоличествоОстаток
	|		ИНАЧЕ ЗапасыКПоступлениюНаСкладыОстатки.КоличествоОстаток
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА &КонтролироватьОстаткиПоДокументам
	|			ТОГДА &ДокументОснование
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументПоступления,
	|	&СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыКПоступлениюНаСкладыОстатки.Ячейка КАК Ячейка
	|ИЗ
	|	РегистрНакопления.ЗапасыКПоступлениюНаСклады.Остатки(
	|			,
	|			Организация = &Организация
	|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|				И ДокументОснование = &ДокументОснование) КАК ЗапасыКПоступлениюНаСкладыОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗапасыКПоступлениюНаСклады.Номенклатура,
	|	ЗапасыКПоступлениюНаСклады.Характеристика,
	|	ЗапасыКПоступлениюНаСклады.Партия,
	|	ВЫБОР
	|		КОГДА ЗапасыКПоступлениюНаСклады.Количество < 0
	|			ТОГДА -ЗапасыКПоступлениюНаСклады.Количество
	|		ИНАЧЕ ЗапасыКПоступлениюНаСклады.Количество
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &КонтролироватьОстаткиПоДокументам
	|			ТОГДА &ДокументОснование
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	&СтруктурнаяЕдиница,
	|	ЗапасыКПоступлениюНаСклады.Ячейка
	|ИЗ
	|	РегистрНакопления.ЗапасыКПоступлениюНаСклады КАК ЗапасыКПоступлениюНаСклады
	|ГДЕ
	|	ЗапасыКПоступлениюНаСклады.Регистратор = &Ссылка
	|	И ЗапасыКПоступлениюНаСклады.ДокументОснование = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриходныйОрдерЗапасы.Номенклатура КАК Номенклатура,
	|	ПриходныйОрдерЗапасы.Характеристика КАК Характеристика,
	|	ПриходныйОрдерЗапасы.Партия КАК Партия,
	|	ПриходныйОрдерСерииНоменклатуры.Серия КАК Серия,
	|	ПриходныйОрдерЗапасы.КлючСвязи КАК КлючСвязи,
	|	ПриходныйОрдерСерииНоменклатуры.Количество КАК Количество
	|ИЗ
	|	Документ.ПриходныйОрдер.СерииНоменклатуры КАК ПриходныйОрдерСерииНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдер.Запасы КАК ПриходныйОрдерЗапасы
	|		ПО (ПриходныйОрдерСерииНоменклатуры.Ссылка = &ДокументОснование)
	|			И (ПриходныйОрдерЗапасы.Ссылка = &ДокументОснование)
	|			И (ПриходныйОрдерЗапасы.КлючСвязи = ПриходныйОрдерСерииНоменклатуры.КлючСвязи)
	|ГДЕ
	|	ПриходныйОрдерЗапасы.Ссылка = &ДокументОснование
	|	И ПриходныйОрдерСерииНоменклатуры.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерииНоменклатурыКПоступлениюОстатки.Серия КАК Серия,
	|	СерииНоменклатурыКПоступлениюОстатки.КоличествоОстаток КАК Количество,
	|	СерииНоменклатурыКПоступлениюОстатки.Номенклатура КАК Номенклатура,
	|	СерииНоменклатурыКПоступлениюОстатки.Характеристика КАК Характеристика,
	|	СерииНоменклатурыКПоступлениюОстатки.Партия КАК Партия
	|ПОМЕСТИТЬ ОстаткиСерииИтог
	|ИЗ
	|	РегистрНакопления.СерииНоменклатурыКПоступлению.Остатки(
	|			,
	|			Организация = &Организация
	|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|				И ДокументОснование = &ДокументОснование) КАК СерииНоменклатурыКПоступлениюОстатки
	|ГДЕ
	|	СерииНоменклатурыКПоступлениюОстатки.КоличествоОстаток > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СерииНоменклатурыКПоступлению.Серия,
	|	СерииНоменклатурыКПоступлению.Количество,
	|	СерииНоменклатурыКПоступлению.Номенклатура,
	|	СерииНоменклатурыКПоступлению.Характеристика,
	|	СерииНоменклатурыКПоступлению.Партия
	|ИЗ
	|	РегистрНакопления.СерииНоменклатурыКПоступлению КАК СерииНоменклатурыКПоступлению
	|ГДЕ
	|	СерииНоменклатурыКПоступлению.Регистратор = &Ссылка
	|	И СерииНоменклатурыКПоступлению.ДокументОснование = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиСерииИтог.Серия КАК Серия,
	|	СУММА(ОстаткиСерииИтог.Количество) КАК Количество,
	|	ОстаткиСерииИтог.Номенклатура КАК Номенклатура,
	|	ОстаткиСерииИтог.Характеристика КАК Характеристика,
	|	ОстаткиСерииИтог.Партия КАК Партия
	|ИЗ
	|	ОстаткиСерииИтог КАК ОстаткиСерииИтог
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиСерииИтог.Серия,
	|	ОстаткиСерииИтог.Характеристика,
	|	ОстаткиСерииИтог.Партия,
	|	ОстаткиСерииИтог.Номенклатура");
	
	Компания = Константы.УчетПоКомпании.Компания(Организация);
	
	КонтролироватьОстаткиПоДокументам = ВидУчета = Перечисления.ВидыУчетаОрдерныхСкладов.УчетОстатковПоСкладскимОрдерам;
	Запрос.УстановитьПараметр("ДокументОснование", ?(КонтролироватьОстаткиПоДокументам, ДокументСсылкаПриходныйОрдер, Неопределено));
	
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.УстановитьПараметр("КонтролироватьОстаткиПоДокументам", Истина);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Если КонтролироватьОстаткиПоДокументам Тогда
		ДокументПоступления = ДокументСсылкаПриходныйОрдер;
	КонецЕсли;
	
	Если РезультатыЗапроса[1].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСерииНоменклатуры = РезультатыЗапроса[2].Выгрузить();
	ТаблицаОстаткиСерииНоменклатуры = РезультатыЗапроса[4].Выгрузить();
	ТаблицаОстаткиЗапасы = РезультатыЗапроса[1].Выгрузить();
	
	ВыборкаЗапасы = РезультатыЗапроса[0].Выбрать();
	
	ПараметрыПоискаСерии = Новый Структура("КлючСвязи");
	
	КонтролироватьОстаткиПоЯчейкамКПоступлениюОтгрзуке = СкладскойУчетСервер.КонтролироватьОстаткиПоЯчейкамКПоступлениюОтгрзуке(СтруктурнаяЕдиница);
	Если КонтролироватьОстаткиПоЯчейкамКПоступлениюОтгрзуке Тогда
		ПараметрыПоискаОстаткиЗапасы = Новый Структура("Номенклатура, Характеристика, Партия, Ячейка");
	Иначе
		ПараметрыПоискаОстаткиЗапасы = Новый Структура("Номенклатура, Характеристика, Партия");
	КонецЕсли;

	ПараметрыПоискаОстаткиСерииНоменклатуры = Новый Структура("Номенклатура, Характеристика, Партия, Серия");
	
	Пока ВыборкаЗапасы.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаЗапасы.Количество) Тогда
			Продолжить;
		КонецЕсли;
		
		Если КонтролироватьОстаткиПоЯчейкамКПоступлениюОтгрзуке Тогда
			ПараметрыПоискаОстаткиЗапасы.Ячейка = Ячейка;
		КонецЕсли;
	
		ПараметрыПоискаОстаткиЗапасы.Номенклатура = ВыборкаЗапасы.НоменклатураОприходование;
		ПараметрыПоискаОстаткиЗапасы.Характеристика = ВыборкаЗапасы.ХарактеристикаОприходование;
		ПараметрыПоискаОстаткиЗапасы.Партия = ВыборкаЗапасы.ПартияОприходование;
		
		НайденныеОстаткиЗапасы = ТаблицаОстаткиЗапасы.НайтиСтроки(ПараметрыПоискаОстаткиЗапасы);
		
		Если Не НайденныеОстаткиЗапасы.Количество() Или (НайденныеОстаткиЗапасы.Количество() И НайденныеОстаткиЗапасы[0].Количество = 0) Тогда
			Продолжить
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПараметрыПоискаСерии, ВыборкаЗапасы);
		НайденныеСерии = ТаблицаСерииНоменклатуры.НайтиСтроки(ПараметрыПоискаСерии);
		
		КоличествоСерий = 0;
		ИспользуютсяСерииВСтроке = Ложь;
		Для Каждого СтрокаСерии Из НайденныеСерии Цикл
			
			ИспользуютсяСерииВСтроке = Истина;
			
			ЗаполнитьЗначенияСвойств(ПараметрыПоискаОстаткиСерииНоменклатуры, СтрокаСерии);
			НайденныеОстаткиСерий = ТаблицаОстаткиСерииНоменклатуры.НайтиСтроки(ПараметрыПоискаОстаткиСерииНоменклатуры);
			
			Если Не НайденныеОстаткиСерий.Количество() Или (НайденныеОстаткиСерий.Количество() И НайденныеОстаткиСерий[0].Количество = 0) Тогда
				Продолжить
			КонецЕсли;
			
			ОстатокСерий = НайденныеОстаткиСерий[0];
			
			Если Не ОстатокСерий.Количество > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаСерии = СерииНоменклатурыОприходование.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, СтрокаСерии); 
			
			Если НоваяСтрокаСерии.Количество >= ОстатокСерий.Количество Тогда
				НоваяСтрокаСерии.Количество = ОстатокСерий.Количество;
			КонецЕсли;
			
			ОстатокСерий.Количество = ОстатокСерий.Количество - НоваяСтрокаСерии.Количество;
			
			КоличествоСерий = КоличествоСерий + НоваяСтрокаСерии.Количество;
			
		КонецЦикла;
		
		Если ИспользуютсяСерииВСтроке И КоличествоСерий = 0 Тогда
			Продолжить
		КонецЕсли;
		
		ОстатокЗапасов = НайденныеОстаткиЗапасы[0];
		
		НоваяСтрокаЗапасы = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗапасы, ВыборкаЗапасы);
		
		Если ТипЗнч(НоваяСтрокаЗапасы.ЕдиницаИзмеренияОприходование) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
			
			КоличествоВСтрокеЗапасов = ?(КоличествоСерий > 0, КоличествоСерий, НоваяСтрокаЗапасы.Количество);
			
			Если КоличествоВСтрокеЗапасов >= ОстатокЗапасов.Количество Тогда
				КоличествоВСтрокеЗапасов = ОстатокЗапасов.Количество;
				ОстатокЗапасов.Количество = 0;
			Иначе
				ОстатокЗапасов.Количество = ОстатокЗапасов.Количество - КоличествоВСтрокеЗапасов;
			КонецЕсли;
			
			НоваяСтрокаЗапасы.Количество = КоличествоВСтрокеЗапасов;
			
		Иначе
			
			КоличествоСтрокиВЕдиницахХранения = НоваяСтрокаЗапасы.Количество * НоваяСтрокаЗапасы.ЕдиницаИзмеренияОприходование.Коэффициент;
			КоличествоВСтрокеЗапасов = ?(КоличествоСерий > 0, КоличествоСерий, КоличествоСтрокиВЕдиницахХранения);
			
			Если КоличествоВСтрокеЗапасов >= ОстатокЗапасов.Количество Тогда
				КоличествоВСтрокеЗапасов = ОстатокЗапасов.Количество;
				ОстатокЗапасов.Количество = 0;
			Иначе
				ОстатокЗапасов.Количество = ОстатокЗапасов.Количество - КоличествоВСтрокеЗапасов;
			КонецЕсли;
			
			НоваяСтрокаЗапасы.Количество = КоличествоВСтрокеЗапасов/ НоваяСтрокаЗапасы.ЕдиницаИзмеренияОприходование.Коэффициент;;
			
		КонецЕсли;
		
		Если СерииНоменклатурыУНФ.ИспользоватьСерииНоменклатурыОстатки() = Истина Тогда
			НоваяСтрокаЗапасы.СерииНоменклатурыОприходование = СерииНоменклатурыУНФ.ПредставлениеСерийНоменклатуры(СерииНоменклатурыОприходование, НоваяСтрокаЗапасы.КлючСвязи)
		КонецЕсли;
		
		Если УчетГТД Тогда
			НоваяСтрокаЗапасы.СтранаПроисхожденияОприходование = НоваяСтрокаЗапасы.Номенклатура.СтранаПроисхождения;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик заполнения на основании документа Расходны йОрдер.
//
// Параметры:
//  ДокументСсылкаПриходныйОрдер	 - ДокументСсылка.РасходныйОрдер
//
Процедура ЗаполнитьПоРасходномуОрдеру(ДокументСсылкаРасходныйОрдер) Экспорт
	
	Организация = ДокументСсылкаРасходныйОрдер.Организация;
	СтруктурнаяЕдиница = ДокументСсылкаРасходныйОрдер.СтруктурнаяЕдиница;
	Ячейка = ДокументСсылкаРасходныйОрдер.Ячейка;
	
	Запасы.Очистить();
	СерииНоменклатуры.Очистить();
	СерииНоменклатурыОприходование.Очистить();
	
	УчетГТД = ПолучитьФункциональнуюОпцию("УчетГТД");
	
	ВидУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиница, "ВидУчетаОрдерныхСкладов");
	
	Если ВидУчета = Перечисления.ВидыУчетаОрдерныхСкладов.ПоСкладуВЦелом Тогда
		ЗаполнитьПоСкладскомуОрдеруБезУчетаОстатков(ДокументСсылкаРасходныйОрдер, Ложь);
		Возврат;
	КонецЕсли;
	
	Если ВидУчета = Перечисления.ВидыУчетаОрдерныхСкладов.УчетОстатковПоПрочимДокументам Тогда
		ТекстИсключения = НСтр("ru = 'Вид учета остатков на ордерном складе - по Пересортице запасов. Ввод Пересортицы запасов на основании Расходного ордера недоступен.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	УчетОстатковПоСкладскимОрдерам = СкладскойУчетСервер.УчетОстатковВРазрезеСкладскихОрдеров(СтруктурнаяЕдиница, Ложь);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РасходныйОрдерЗапасы.НомерСтроки КАК НомерСтроки,
	|	РасходныйОрдерЗапасы.Номенклатура КАК Номенклатура,
	|	РасходныйОрдерЗапасы.Характеристика КАК Характеристика,
	|	РасходныйОрдерЗапасы.Партия КАК Партия,
	|	РасходныйОрдерЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РасходныйОрдерЗапасы.СерииНоменклатуры КАК СерииНоменклатуры,
	|	РасходныйОрдерЗапасы.КлючСвязи КАК КлючСвязи,
	|	РасходныйОрдерЗапасы.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА &КонтролироватьОстаткиПоДокументам
	|			ТОГДА &ДокументОснование
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументПоступления,
	|	РасходныйОрдерЗапасы.Ячейка КАК Ячейка,
	|	&СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ИЗ
	|	Документ.РасходныйОрдер.Запасы КАК РасходныйОрдерЗапасы
	|ГДЕ
	|	РасходныйОрдерЗапасы.Ссылка = &ДокументОснование
	|	И РасходныйОрдерЗапасы.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗапасыКРасходуСоСкладовОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыКРасходуСоСкладовОстатки.Характеристика КАК Характеристика,
	|	ЗапасыКРасходуСоСкладовОстатки.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА ЗапасыКРасходуСоСкладовОстатки.КоличествоОстаток < 0
	|			ТОГДА -ЗапасыКРасходуСоСкладовОстатки.КоличествоОстаток
	|		ИНАЧЕ ЗапасыКРасходуСоСкладовОстатки.КоличествоОстаток
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА &КонтролироватьОстаткиПоДокументам
	|			ТОГДА &ДокументОснование
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументПоступления,
	|	&СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыКРасходуСоСкладовОстатки.Ячейка КАК Ячейка
	|ИЗ
	|	РегистрНакопления.ЗапасыКРасходуСоСкладов.Остатки(
	|			,
	|			Организация = &Организация
	|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|				И ДокументОснование = &ДокументОснование) КАК ЗапасыКРасходуСоСкладовОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗапасыКРасходуСоСкладов.Номенклатура,
	|	ЗапасыКРасходуСоСкладов.Характеристика,
	|	ЗапасыКРасходуСоСкладов.Партия,
	|	ВЫБОР
	|		КОГДА ЗапасыКРасходуСоСкладов.Количество < 0
	|			ТОГДА -ЗапасыКРасходуСоСкладов.Количество
	|		ИНАЧЕ ЗапасыКРасходуСоСкладов.Количество
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &КонтролироватьОстаткиПоДокументам
	|			ТОГДА &ДокументОснование
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	&СтруктурнаяЕдиница,
	|	ЗапасыКРасходуСоСкладов.Ячейка
	|ИЗ
	|	РегистрНакопления.ЗапасыКРасходуСоСкладов КАК ЗапасыКРасходуСоСкладов
	|ГДЕ
	|	ЗапасыКРасходуСоСкладов.Регистратор = &Ссылка
	|	И ЗапасыКРасходуСоСкладов.ДокументОснование = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходныйОрдерЗапасы.Номенклатура КАК Номенклатура,
	|	РасходныйОрдерЗапасы.Характеристика КАК Характеристика,
	|	РасходныйОрдерЗапасы.Партия КАК Партия,
	|	РасходныйОрдерСерииНоменклатуры.Серия КАК Серия,
	|	РасходныйОрдерЗапасы.КлючСвязи КАК КлючСвязи,
	|	РасходныйОрдерСерииНоменклатуры.Количество КАК Количество
	|ИЗ
	|	Документ.РасходныйОрдер.СерииНоменклатуры КАК РасходныйОрдерСерииНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдер.Запасы КАК РасходныйОрдерЗапасы
	|		ПО (РасходныйОрдерСерииНоменклатуры.Ссылка = &ДокументОснование)
	|			И (РасходныйОрдерЗапасы.Ссылка = &ДокументОснование)
	|			И (РасходныйОрдерЗапасы.КлючСвязи = РасходныйОрдерСерииНоменклатуры.КлючСвязи)
	|ГДЕ
	|	РасходныйОрдерЗапасы.Ссылка = &ДокументОснование
	|	И РасходныйОрдерСерииНоменклатуры.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерииНоменклатурыКРасходуОстатки.Серия КАК Серия,
	|	-СерииНоменклатурыКРасходуОстатки.КоличествоОстаток КАК Количество,
	|	СерииНоменклатурыКРасходуОстатки.Номенклатура КАК Номенклатура,
	|	СерииНоменклатурыКРасходуОстатки.Характеристика КАК Характеристика,
	|	СерииНоменклатурыКРасходуОстатки.Партия КАК Партия
	|ПОМЕСТИТЬ ОстаткиСерииИтог
	|ИЗ
	|	РегистрНакопления.СерииНоменклатурыКРасходу.Остатки(
	|			,
	|			Организация = &Организация
	|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|				И ДокументОснование = &ДокументОснование) КАК СерииНоменклатурыКРасходуОстатки
	|ГДЕ
	|	СерииНоменклатурыКРасходуОстатки.КоличествоОстаток < 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СерииНоменклатурыКРасходу.Серия,
	|	СерииНоменклатурыКРасходу.Количество,
	|	СерииНоменклатурыКРасходу.Номенклатура,
	|	СерииНоменклатурыКРасходу.Характеристика,
	|	СерииНоменклатурыКРасходу.Партия
	|ИЗ
	|	РегистрНакопления.СерииНоменклатурыКРасходу КАК СерииНоменклатурыКРасходу
	|ГДЕ
	|	СерииНоменклатурыКРасходу.Регистратор = &Ссылка
	|	И СерииНоменклатурыКРасходу.ДокументОснование = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиСерииИтог.Серия КАК Серия,
	|	СУММА(ОстаткиСерииИтог.Количество) КАК Количество,
	|	ОстаткиСерииИтог.Номенклатура КАК Номенклатура,
	|	ОстаткиСерииИтог.Характеристика КАК Характеристика,
	|	ОстаткиСерииИтог.Партия КАК Партия
	|ИЗ
	|	ОстаткиСерииИтог КАК ОстаткиСерииИтог
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиСерииИтог.Серия,
	|	ОстаткиСерииИтог.Характеристика,
	|	ОстаткиСерииИтог.Партия,
	|	ОстаткиСерииИтог.Номенклатура");
	
	Компания = Константы.УчетПоКомпании.Компания(Организация);
	
	КонтролироватьОстаткиПоДокументам = ВидУчета = Перечисления.ВидыУчетаОрдерныхСкладов.УчетОстатковПоСкладскимОрдерам;
	Запрос.УстановитьПараметр("ДокументОснование", ?(КонтролироватьОстаткиПоДокументам, ДокументСсылкаРасходныйОрдер, Неопределено));
	
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.УстановитьПараметр("КонтролироватьОстаткиПоДокументам", Истина);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Если КонтролироватьОстаткиПоДокументам Тогда
		ДокументОтгрузки = ДокументСсылкаРасходныйОрдер;
	КонецЕсли;
	
	Если РезультатыЗапроса[1].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСерииНоменклатуры = РезультатыЗапроса[2].Выгрузить();
	ТаблицаОстаткиСерииНоменклатуры = РезультатыЗапроса[4].Выгрузить();
	ТаблицаОстаткиЗапасы = РезультатыЗапроса[1].Выгрузить();
	
	ВыборкаЗапасы = РезультатыЗапроса[0].Выбрать();
	
	ПараметрыПоискаСерии = Новый Структура("КлючСвязи");
	
	КонтролироватьОстаткиПоЯчейкамКПоступлениюОтгрзуке = СкладскойУчетСервер.КонтролироватьОстаткиПоЯчейкамКПоступлениюОтгрзуке(СтруктурнаяЕдиница);
	Если КонтролироватьОстаткиПоЯчейкамКПоступлениюОтгрзуке Тогда
		ПараметрыПоискаОстаткиЗапасы = Новый Структура("Номенклатура, Характеристика, Партия, Ячейка");
	Иначе
		ПараметрыПоискаОстаткиЗапасы = Новый Структура("Номенклатура, Характеристика, Партия");
	КонецЕсли;

	ПараметрыПоискаОстаткиСерииНоменклатуры = Новый Структура("Номенклатура, Характеристика, Партия, Серия");
	
	Пока ВыборкаЗапасы.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаЗапасы.Количество) Тогда
			Продолжить;
		КонецЕсли;
		
		Если КонтролироватьОстаткиПоЯчейкамКПоступлениюОтгрзуке Тогда
			ПараметрыПоискаОстаткиЗапасы.Ячейка = Ячейка;
		КонецЕсли;
		
		ПараметрыПоискаОстаткиЗапасы.Номенклатура = ВыборкаЗапасы.Номенклатура;
		ПараметрыПоискаОстаткиЗапасы.Характеристика = ВыборкаЗапасы.Характеристика;
		ПараметрыПоискаОстаткиЗапасы.Партия = ВыборкаЗапасы.Партия;
		
		НайденныеОстаткиЗапасы = ТаблицаОстаткиЗапасы.НайтиСтроки(ПараметрыПоискаОстаткиЗапасы);
		
		Если Не НайденныеОстаткиЗапасы.Количество() Или (НайденныеОстаткиЗапасы.Количество() И НайденныеОстаткиЗапасы[0].Количество = 0) Тогда
			Продолжить
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПараметрыПоискаСерии, ВыборкаЗапасы);
		НайденныеСерии = ТаблицаСерииНоменклатуры.НайтиСтроки(ПараметрыПоискаСерии);
		
		КоличествоСерий = 0;
		ИспользуютсяСерииВСтроке = Ложь;
		Для Каждого СтрокаСерии Из НайденныеСерии Цикл
			
			ИспользуютсяСерииВСтроке = Истина;
			
			ЗаполнитьЗначенияСвойств(ПараметрыПоискаОстаткиСерииНоменклатуры, СтрокаСерии);
			НайденныеОстаткиСерий = ТаблицаОстаткиСерииНоменклатуры.НайтиСтроки(ПараметрыПоискаОстаткиСерииНоменклатуры);
			
			Если Не НайденныеОстаткиСерий.Количество() Или (НайденныеОстаткиСерий.Количество() И НайденныеОстаткиСерий[0].Количество = 0) Тогда
				Продолжить
			КонецЕсли;
			
			ОстатокСерий = НайденныеОстаткиСерий[0];
			
			Если Не ОстатокСерий.Количество > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаСерии = СерииНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, СтрокаСерии); 
			
			Если НоваяСтрокаСерии.Количество >= ОстатокСерий.Количество Тогда
				НоваяСтрокаСерии.Количество = ОстатокСерий.Количество;
			КонецЕсли;
			
			ОстатокСерий.Количество = ОстатокСерий.Количество - НоваяСтрокаСерии.Количество;
			
			КоличествоСерий = КоличествоСерий + НоваяСтрокаСерии.Количество;
			
		КонецЦикла;
		
		Если ИспользуютсяСерииВСтроке И КоличествоСерий = 0 Тогда
			Продолжить
		КонецЕсли;
		
		ОстатокЗапасов = НайденныеОстаткиЗапасы[0];
		
		НоваяСтрокаЗапасы = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗапасы, ВыборкаЗапасы);
		
		Если ТипЗнч(НоваяСтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
			
			КоличествоВСтрокеЗапасов = ?(КоличествоСерий > 0, КоличествоСерий, НоваяСтрокаЗапасы.Количество);
			
			Если КоличествоВСтрокеЗапасов >= ОстатокЗапасов.Количество Тогда
				КоличествоВСтрокеЗапасов = ОстатокЗапасов.Количество;
				ОстатокЗапасов.Количество = 0;
			Иначе
				ОстатокЗапасов.Количество = ОстатокЗапасов.Количество - КоличествоВСтрокеЗапасов;
			КонецЕсли;
			
			НоваяСтрокаЗапасы.Количество = КоличествоВСтрокеЗапасов;
			
		Иначе
			
			КоличествоСтрокиВЕдиницахХранения = НоваяСтрокаЗапасы.Количество * НоваяСтрокаЗапасы.ЕдиницаИзмерения.Коэффициент;
			КоличествоВСтрокеЗапасов = ?(КоличествоСерий > 0, КоличествоСерий, КоличествоСтрокиВЕдиницахХранения);
			
			Если КоличествоВСтрокеЗапасов >= ОстатокЗапасов.Количество Тогда
				КоличествоВСтрокеЗапасов = ОстатокЗапасов.Количество;
				ОстатокЗапасов.Количество = 0;
			Иначе
				ОстатокЗапасов.Количество = ОстатокЗапасов.Количество - КоличествоВСтрокеЗапасов;
			КонецЕсли;
			
			НоваяСтрокаЗапасы.Количество = КоличествоВСтрокеЗапасов/ НоваяСтрокаЗапасы.ЕдиницаИзмерения.Коэффициент;;
			
		КонецЕсли;
		
		Если СерииНоменклатурыУНФ.ИспользоватьСерииНоменклатурыОстатки() = Истина Тогда
			НоваяСтрокаЗапасы.СерииНоменклатуры = СерииНоменклатурыУНФ.ПредставлениеСерийНоменклатуры(СерииНоменклатуры, НоваяСтрокаЗапасы.КлючСвязи)
		КонецЕсли;
		
		Если УчетГТД Тогда
			НоваяСтрокаЗапасы.СтранаПроисхождения = НоваяСтрокаЗапасы.Номенклатура.СтранаПроисхождения;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик заполнения на основании складского ордера без учета остатков.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ПриходныйОрдер Или ДокументСсылка.РасходныйОрдер.
//	Приходный - Признак вида ордера.
//
Процедура ЗаполнитьПоСкладскомуОрдеруБезУчетаОстатков(ДанныеЗаполнения, Приходный = Истина) Экспорт
	
	Если Приходный Тогда
		
		Для Каждого ТекСтрокаЗапасы Из ДанныеЗаполнения.Запасы Цикл
			НоваяСтрока = Запасы.Добавить();
			НоваяСтрока.НоменклатураОприходование = ТекСтрокаЗапасы.Номенклатура;
			НоваяСтрока.ХарактеристикаОприходование = ТекСтрокаЗапасы.Характеристика;
			НоваяСтрока.ПартияОприходование = ТекСтрокаЗапасы.Партия;
			НоваяСтрока.СерииНоменклатурыОприходование = ТекСтрокаЗапасы.СерииНоменклатуры;
			НоваяСтрока.ЕдиницаИзмеренияОприходование = ТекСтрокаЗапасы.ЕдиницаИзмерения;
			НоваяСтрока.КлючСвязи = ТекСтрокаЗапасы.КлючСвязи;
			НоваяСтрока.Количество = ТекСтрокаЗапасы.Количество;
		КонецЦикла;
		
		СерииНоменклатурыУНФ.ЗаполнитьТЧСерииНоменклатурыПоКлючуСвязи(ЭтотОбъект, ДанныеЗаполнения,,, "СерииНоменклатурыОприходование");
		СерииНоменклатурыУНФ.УдалитьСерииНоменклатурыВТабличнойЧастиВЗависимостиОтПолитики(ЭтотОбъект,,,"СерииНоменклатурыОприходование");
		
	Иначе
		
		Для Каждого ТекСтрокаЗапасы Из ДанныеЗаполнения.Запасы Цикл
			НоваяСтрока = Запасы.Добавить();
			НоваяСтрока.Номенклатура = ТекСтрокаЗапасы.Номенклатура;
			НоваяСтрока.Характеристика = ТекСтрокаЗапасы.Характеристика;
			НоваяСтрока.Партия = ТекСтрокаЗапасы.Партия;
			НоваяСтрока.СерииНоменклатуры= ТекСтрокаЗапасы.СерииНоменклатуры;
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаЗапасы.ЕдиницаИзмерения;
			НоваяСтрока.КлючСвязи = ТекСтрокаЗапасы.КлючСвязи;
			НоваяСтрока.Количество = ТекСтрокаЗапасы.Количество;
		КонецЦикла;
		
		СерииНоменклатурыУНФ.ЗаполнитьТЧСерииНоменклатурыПоКлючуСвязи(ЭтотОбъект, ДанныеЗаполнения);
		СерииНоменклатурыУНФ.УдалитьСерииНоменклатурыВТабличнойЧастиВЗависимостиОтПолитики(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик заполнения на основании документа ПриемИПередачаВРемонт.
//
// Параметры:
//  ДокументСсылкаПриемИПередачаВРемонт	 - ДокументСсылка.ПриемИПередачаВРемонт
//
Процедура ЗаполнитьПоПриемИПередачаВРемонт(ДокументСсылкаПриемИПередачаВРемонт) Экспорт
	
	Если Ложь Тогда
		ДокументСсылкаПриемИПередачаВРемонт = Документы.ПриемИПередачаВРемонт.ПустаяСсылка();
	КонецЕсли;
	
	Организация = ДокументСсылкаПриемИПередачаВРемонт.Организация;
	СтруктурнаяЕдиница = ДокументСсылкаПриемИПередачаВРемонт.СтруктурнаяЕдиница;
	ДокументОснование = ДокументСсылкаПриемИПередачаВРемонт;
	
	НоваяСтрока = Запасы.Добавить();
	НоваяСтрока.НоменклатураОприходование = ДокументСсылкаПриемИПередачаВРемонт.Номенклатура;
	НоваяСтрока.ХарактеристикаОприходование = ДокументСсылкаПриемИПередачаВРемонт.Характеристика;
	НоваяСтрока.КлючСвязи = 1;
	НоваяСтрока.Количество = 1;
	НоваяСтрока.ЕдиницаИзмеренияОприходование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.НоменклатураОприходование, "ЕдиницаИзмерения");
	
	Если ЗначениеЗаполнено(ДокументСсылкаПриемИПередачаВРемонт.Серия) Тогда
		НоваяСтрокаСН = СерииНоменклатурыОприходование.Добавить();
		НоваяСтрокаСН.Серия = ДокументСсылкаПриемИПередачаВРемонт.Серия;
		НоваяСтрокаСН.КлючСвязи = НоваяСтрока.КлючСвязи;
		
		НоваяСтрока.СерииНоменклатурыОприходование = СерииНоменклатурыУНФКлиентСервер.СтроковоеПредставлениеСерийНоменклатурыСтроки(СерииНоменклатурыОприходование, НоваяСтрокаСН.КлючСвязи);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьДополнительныеПоляГТД(Отказ)
	Перем Ошибки;
	
	Если НЕ ПолучитьФункциональнуюОпцию("УчетГТД") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для каждого СтрокаТаблицыДокумента Из Запасы Цикл
		
		СтранаПроисхожденияТребуетНомерГТД = (ЗначениеЗаполнено(СтрокаТаблицыДокумента.СтранаПроисхожденияОприходование) И СтрокаТаблицыДокумента.СтранаПроисхожденияОприходование <> Справочники.СтраныМира.Россия);
		
		Если ЗначениеЗаполнено(СтрокаТаблицыДокумента.НомерГТДОприходование)
			И НЕ СтранаПроисхожденияТребуетНомерГТД
			Тогда
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'В строке [%1] табличной части %2 не верно указана страна происхождения для оприходования'"), СокрЛП(СтрокаТаблицыДокумента.НомерСтроки), "Запасы");
			ПолеОшибки = "Объект.Запасы[%1].СтранаПроисхожденияОприходование";
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстОшибки, "", Запасы.Индекс(СтрокаТаблицыДокумента));
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыДокумента.НомерГТДОприходование)
			И СтранаПроисхожденияТребуетНомерГТД
			Тогда
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'В строке [%1] табличной части %2 не указан номер ГТД оприходования'"), СокрЛП(СтрокаТаблицыДокумента.НомерСтроки), "Запасы");
			ПолеОшибки = "Объект.Запасы[%1].НомерГТДОприходование";
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстОшибки, "", Запасы.Индекс(СтрокаТаблицыДокумента));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ Ошибки = Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// В обработчике события ОбработкаЗаполнения документа выполняется
// - заполнение документа по инвентаризации запасов на складе.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ИнвентаризацияЗапасов")] = "ЗаполнитьПоИнвентаризацииВсеРасхождения";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПриходныйОрдер")] = "ЗаполнитьПоПриходномуОрдеру";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПриемИПередачаВРемонт")] = "ЗаполнитьПоПриемИПередачаВРемонт";
	СтратегияЗаполнения[Тип("ДокументСсылка.РасходныйОрдер")] = "ЗаполнитьПоРасходномуОрдеру";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныйСклад") Тогда
		МассивСтруктурныхЕдиниц = Новый Массив;
		МассивСтруктурныхЕдиниц.Добавить(СтруктурнаяЕдиница);
		
		МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам = СкладскойУчетСервер.МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам(МассивСтруктурныхЕдиниц);
		МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам = СкладскойУчетСервер.МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам(МассивСтруктурныхЕдиниц);
	Иначе
		МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам = Новый Массив;
		МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам = Новый Массив;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам", МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам);
	ДополнительныеСвойства.Вставить("МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам", МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам);
	
	// Инициализация данных документа
	Документы.ПересортицаЗапасов.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыКРасходуСоСкладов", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыКПоступлениюНаСклады", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыНаСкладах", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("Запасы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыВРазрезеГТД", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);
	
	// СерииНоменклатуры
	ПроведениеДокументовУНФ.ОтразитьДвижения("СерииНоменклатурыГарантии", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДвиженияСерииНоменклатуры", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("СерииНоменклатуры", ТаблицыДляДвижений, Движения, Отказ);
	
	// Комиссия
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыИАгентскиеУслугиПринятые", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыПринятыеВРазрезеГТД", ТаблицыДляДвижений, Движения, Отказ);
	
	ПроведениеДокументовУНФ.ОтразитьДвижения("СерииНоменклатурыКПоступлению", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("СерииНоменклатурыКРасходу", ТаблицыДляДвижений, Движения, Отказ);
	
	// Запись наборов записей
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль
	Документы.ПересортицаЗапасов.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	ПроведениеДокументовУНФ.ЗакрытьМенеджерВременныхТаблиц(ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныйСклад") Тогда
		МассивСтруктурныхЕдиниц = Новый Массив;
		МассивСтруктурныхЕдиниц.Добавить(СтруктурнаяЕдиница);
		
		МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам = СкладскойУчетСервер.МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам(МассивСтруктурныхЕдиниц);
		МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам = СкладскойУчетСервер.МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам(МассивСтруктурныхЕдиниц);
	Иначе
		МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам = Новый Массив;
		МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам = Новый Массив;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам", МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам);
	ДополнительныеСвойства.Вставить("МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам", МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам);
	
	// Контроль
	Документы.ПересортицаЗапасов.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Серии номенклатуры
	Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиница,"ОрдерныйСклад") И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиница,"ИспользоватьОрдернуюСхемуПриОтгрузке") = Истина Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Объект", ЭтотОбъект);
		ДополнительныеПараметры.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
		СерииНоменклатурыУНФ.ПроверитьЗаполнениеСерийНоменклатуры(Отказ, Запасы, СерииНоменклатуры, 
		ДополнительныеПараметры);
	КонецЕсли;
	Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиница,"ОрдерныйСклад") И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиница,"ИспользоватьОрдернуюСхемуПриПоступлении") = Истина Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Объект", ЭтотОбъект);
		ДополнительныеПараметры.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
		ДополнительныеПараметры.Вставить("ИмяПоляНоменклатура", "НоменклатураОприходование");
		СерииНоменклатурыУНФ.ПроверитьЗаполнениеСерийНоменклатуры(Отказ, Запасы, СерииНоменклатурыОприходование, 
		ДополнительныеПараметры);
	КонецЕсли;
	
	Если ПриходоватьТоварыПоСебестоимостиСписания Тогда
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Запасы.Цена");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Запасы.Сумма");
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, Отказ, Истина);
	
	ГрузовыеТаможенныеДекларацииСервер.ПриОбработкеПроверкиЗаполнения(Отказ, ЭтотОбъект);
	ПроверитьДополнительныеПоляГТД(Отказ);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныйСклад") Тогда
		
		УчетОстатковПоСкладскимОрдерам = СкладскойУчетСервер.УчетОстатковВРазрезеСкладскихОрдеров(СтруктурнаяЕдиница, Ложь);
		Если УчетОстатковПоСкладскимОрдерам Тогда  
			ПроверяемыеРеквизиты.Добавить("ДокументОтгрузки");
		КонецЕсли;
		
		УчетОстатковПоСкладскимОрдерам = СкладскойУчетСервер.УчетОстатковВРазрезеСкладскихОрдеров(СтруктурнаяЕдиница);
		Если УчетОстатковПоСкладскимОрдерам Тогда  
			ПроверяемыеРеквизиты.Добавить("ДокументПоступления");
		КонецЕсли;
		
	КонецЕсли
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// Проверка признака ОбменДанными.Загрузка выполняется ниже по коду.
	
	// ИнтеграцияГИСМ
	ЕстьМаркируемаяПродукцияГИСМ = ИнтеграцияГИСМУНФ.ЕстьМаркируемаяПродукцияГИСМ(Запасы);
	ЕстьКиЗГИСМ = ИнтеграцияГИСМУНФ.ЕстьКиЗГИСМ(Запасы);
	// Конец ИнтеграцияГИСМ
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПриходоватьТоварыПоСебестоимостиСписания Тогда
		СуммаДокумента = 0;
	Иначе
		СуммаДокумента = Запасы.Итог("Сумма");
	КонецЕсли;
	
	ЕстьКомиссионныеСписания = РаботаСКомиссионерамиКомитентамиСервер.ВТабличнойЧастиЕстьКомиссионнаяПартия(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ПереданВЕГАИС = Неопределено;
	АктСписанияЕГАИС = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли