
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция - Рассчитать зависимые цены по базовой
//
// Параметры:
//  ПараметрыРасчета - Структура - структура параметров расчета
//   * ТаблицаРасчета - ТаблицаЗначений - таблица для расчета, см. ПолучитьПустуюТаблицуДляРасчетаЗависимыхЦен()
//   * Период - Дата - период для расчета
//   * ВключаяХарактеристики - булево - признак расчета и для характеристик
//   * Автор - СправочникСсылка.Пользователи - автор расчета
//   * СоответствиеБазовыхЦен - Соответствие - соответствие базовых цен заполняется для каскадного расчета
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица расчета, см. ПолучитьПустуюТаблицуДляРасчетаЗависимыхЦен()
//
Функция РассчитатьЗависимыеЦеныПоБазовой(ПараметрыРасчета) Экспорт
	
	ТаблицаРасчета = ПараметрыРасчета.ТаблицаРасчета;
	
	Результат 		= ПолучитьПустуюТаблицуДляРасчетаЗависимыхЦен();
	
	МассивТиповВидовЦен = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаРасчета.ВыгрузитьКолонку("ТипВидаЦен"));
	Для каждого ТипВидаЦен Из МассивТиповВидовЦен Цикл
		
		Отбор = Новый Структура("ТипВидаЦен", ТипВидаЦен);
		ТаблицаПоТипуЦен = ТаблицаРасчета.Скопировать(ТаблицаРасчета.НайтиСтроки(Отбор));
		
		Если ТипВидаЦен = Перечисления.ТипыВидовЦен.ДинамическийПроцент Тогда
			
			РассчитаннаяТаблица = РассчитатьЗависимыеЦеныНаПроцент(ТаблицаПоТипуЦен, ПараметрыРасчета);
			
		ИначеЕсли ТипВидаЦен = Перечисления.ТипыВидовЦен.ДинамическийФормула Тогда
			
			РассчитаннаяТаблица = РассчитатьЗависимыеЦеныПоФормуле(ТаблицаПоТипуЦен, ПараметрыРасчета);
			
		КонецЕсли; 
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РассчитаннаяТаблица, Результат);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// СтандартныеПодсистемы.УправлениеДоступом

// Процедура - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
// Параметры:  
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение. 
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ДляВсехСтрок(ЗначениеРазрешено(Запасы.ВидЦены))";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
// @skip-warning
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры

// Формирует дерево видов цен на основании массива видов цен
//
// Параметры:
//	СтруктураПараметров - Структура:
//  	*ДеревоРезультата - ДеревоЗначений - дерево значений, в которое будет помещен результат формирования
//  	*МассивВидовЦен - Массив из СправочникСсылка.ВидыЦен - виды цен для построения дерева
//  	*ВключаяЦеныНоменклатуры - Булево - признак включения в дерево цен номенклатуры
//  	*ВключаяЦеныКонтрагентов - Булево - признак включения в дерево цен контрагентов
//  	*ВидыЦенВыбраныПриЗаполнении  - Булево - признак выбора вида цен при заполнении
//  	*УникальныйИдентификаторФормы  - УникальныйИдентификатор - уникальный идентификатор формы для заполнения
//
Процедура ПолучитьДеревоВидовЦен(СтруктураПараметров) Экспорт
	
	ДеревоРезультата 				= СтруктураПараметров.ДеревоРезультата;
	МассивВидовЦен 					= СтруктураПараметров.МассивВидовЦен;
	ВключаяЦеныНоменклатуры 		= СтруктураПараметров.ВключаяЦеныНоменклатуры;
	ВключаяЦеныКонтрагентов 		= СтруктураПараметров.ВключаяЦеныКонтрагентов;
	ВидыЦенВыбраныПриЗаполнении 	= СтруктураПараметров.ВидыЦенВыбраныПриЗаполнении;
	УникальныйИдентификаторФормы 	= СтруктураПараметров.УникальныйИдентификаторФормы;
	
	Если УникальныйИдентификаторФормы = Неопределено Тогда
		
		УникальныйИдентификаторФормы = Новый УникальныйИдентификатор;
		
	КонецЕсли;
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыЦен.Ссылка КАК ВидЦен,
	|	ВЫБОР
	|		КОГДА ВидыЦен.Ссылка В (&МассивВидовЦен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Использование,
	|	ПРЕДСТАВЛЕНИЕ(ВидыЦен.Ссылка) КАК Представление,
	|	ИСТИНА КАК ЭтоВидЦенНоменклатуры,
	|	ВЫБОР
	|		КОГДА ВидыЦен.РассчитыватьАвтоматически
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ИндексКартинки,
	|	ИСТИНА КАК РазрешитьВыбирать,
	|	ВидыЦен.БазовыйВидЦен КАК БазовыйВидЦен,
	|	ВЫБОР
	|		КОГДА ВидыЦен.ТипВидаЦен = ЗНАЧЕНИЕ(Перечисление.ТипыВидовЦен.ДинамическийФормула)
	|				И ВидыЦен.РассчитыватьАвтоматически
	|			ТОГДА &ФормулаАвтоРасчет
	|		КОГДА ВидыЦен.ТипВидаЦен = ЗНАЧЕНИЕ(Перечисление.ТипыВидовЦен.ДинамическийФормула)
	|				И НЕ ВидыЦен.РассчитыватьАвтоматически
	|			ТОГДА &Формула
	|		КОГДА ВидыЦен.ТипВидаЦен = ЗНАЧЕНИЕ(Перечисление.ТипыВидовЦен.ДинамическийПроцент)
	|				И ВидыЦен.РассчитыватьАвтоматически
	|			ТОГДА &ДинамическийАвтоРасчет
	|		КОГДА ВидыЦен.ТипВидаЦен = ЗНАЧЕНИЕ(Перечисление.ТипыВидовЦен.ДинамическийПроцент)
	|				И НЕ ВидыЦен.РассчитыватьАвтоматически
	|			ТОГДА &Динамический
	|		КОГДА ВидыЦен.ТипВидаЦен = ЗНАЧЕНИЕ(Перечисление.ТипыВидовЦен.Статический)
	|			ТОГДА &Статический
	|		ИНАЧЕ &Произвольный
	|	КОНЕЦ КАК Вид,
	|	ВидыЦен.ИдентификаторФормул КАК ИдентификаторФормул,
	|	ВидыЦен.ЗаполнятьИзОснования КАК ЗаполнятьИзОснования,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(120)) КАК Параметры,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(120)) КАК ПредставлениеРасчета,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(120)) КАК АдресСхемыКомпоновкиДанных,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(120)) КАК АдресНастроекСхемыКомпоновкиДанных,
	|	ВидыЦен.РассчитыватьАвтоматически КАК РассчитыватьАвтоматически,
	|	0 КАК ПустаяКолонка
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	НЕ ВидыЦен.ТипВидаЦен = ЗНАЧЕНИЕ(Перечисление.ТипыВидовЦен.Статический)
	|	И НЕ ВидыЦен.ТипВидаЦен = ЗНАЧЕНИЕ(Перечисление.ТипыВидовЦен.ПроизвольныйЗапрос)
	|	И НЕ ВидыЦен.ТипВидаЦен = ЗНАЧЕНИЕ(Перечисление.ТипыВидовЦен.Расширение)
	|	И НЕ ВидыЦен.Недействителен
	|	И ВидыЦен.ИдентификаторФормул <> """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	БазовыйВидЦен УБЫВ,
	|	ВидыЦен.Код
	|ИТОГИ ПО
	|	БазовыйВидЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВидыЦен.Ссылка КАК ВидЦен,
	|	ВЫБОР
	|		КОГДА ВидыЦен.Ссылка В (&МассивВидовЦен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Использование,
	|	ВЫРАЗИТЬ(ВидыЦен.Наименование КАК СТРОКА(200)) КАК Представление,
	|	ИСТИНА КАК ЭтоВидЦенНоменклатуры,
	|	ВЫБОР
	|		КОГДА ВидыЦен.ТипВидаЦен = ЗНАЧЕНИЕ(Перечисление.ТипыВидовЦен.Статический)
	|			ТОГДА 0
	|		КОГДА ВидыЦен.ТипВидаЦен = ЗНАЧЕНИЕ(Перечисление.ТипыВидовЦен.ПроизвольныйЗапрос)
	|			ТОГДА 3
	|		КОГДА ВидыЦен.ТипВидаЦен = ЗНАЧЕНИЕ(Перечисление.ТипыВидовЦен.Расширение)
	|			ТОГДА 4
	|	КОНЕЦ КАК ИндексКартинки,
	|	ИСТИНА КАК РазрешитьВыбирать,
	|	ЛОЖЬ КАК ТребуетсяЗаполнениеПараметра,
	|	ВЫБОР
	|		КОГДА ВидыЦен.ТипВидаЦен = ЗНАЧЕНИЕ(Перечисление.ТипыВидовЦен.Статический)
	|			ТОГДА &Статический
	|		КОГДА ВидыЦен.ТипВидаЦен = ЗНАЧЕНИЕ(Перечисление.ТипыВидовЦен.ПроизвольныйЗапрос)
	|			ТОГДА &Произвольный
	|		КОГДА ВидыЦен.ТипВидаЦен = ЗНАЧЕНИЕ(Перечисление.ТипыВидовЦен.Расширение)
	|			ТОГДА &Расширение
	|	КОНЕЦ КАК Вид,
	|	ВидыЦен.ИдентификаторФормул КАК ИдентификаторФормул,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(120)) КАК Параметры,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(120)) КАК ПредставлениеРасчета,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(120)) КАК АдресСхемыКомпоновкиДанных,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(120)) КАК АдресНастроекСхемыКомпоновкиДанных,
	|	ЛОЖЬ КАК РассчитыватьАвтоматически,
	|	ВидыЦен.Код КАК Код,
	|	ВидыЦен.ЗаполнятьИзОснования КАК ЗаполнятьИзОснования,
	|	0 КАК ПустаяКолонка
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	(ВидыЦен.ТипВидаЦен = ЗНАЧЕНИЕ(Перечисление.ТипыВидовЦен.Статический)
	|			ИЛИ ВидыЦен.ТипВидаЦен = ЗНАЧЕНИЕ(Перечисление.ТипыВидовЦен.ПроизвольныйЗапрос)
	|			ИЛИ ВидыЦен.ТипВидаЦен = ЗНАЧЕНИЕ(Перечисление.ТипыВидовЦен.Расширение))
	|	И НЕ ВидыЦен.Недействителен
	|	И ВидыЦен.ИдентификаторФормул <> """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыЦенКонтрагентов.Ссылка,
	|	ВЫБОР
	|		КОГДА ВидыЦенКонтрагентов.Ссылка В (&МассивВидовЦен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫРАЗИТЬ(ВидыЦенКонтрагентов.Наименование КАК СТРОКА(200)),
	|	ЛОЖЬ,
	|	0,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	&Статический,
	|	ВидыЦенКонтрагентов.ИдентификаторФормул,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(120)),
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(120)),
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(120)),
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(120)),
	|	ЛОЖЬ,
	|	NULL,
	|	ЛОЖЬ,
	|	0
	|ИЗ
	|	Справочник.ВидыЦенКонтрагентов КАК ВидыЦенКонтрагентов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Представление
	|ИТОГИ
	|	ВЫБОР
	|		КОГДА ЭтоВидЦенНоменклатуры = ИСТИНА
	|			ТОГДА &ЦеныНоменклатуры
	|		ИНАЧЕ &ЦеныКонтрагентов
	|	КОНЕЦ КАК Представление,
	|	1 КАК ИндексКартинки,
	|	ИСТИНА КАК РазрешитьВыбирать
	|ПО
	|	ЭтоВидЦенНоменклатуры";
	
	Запрос.УстановитьПараметр("МассивВидовЦен", МассивВидовЦен);
	
	ПроизвольныйЗапросПредставление = НСтр("ru = 'Произвольный запрос'");
	ЦеныНоменклатурыПредставление = НСтр("ru = 'Цены номенклатуры'");
	ЦеныКонтрагентовПредставление = НСтр("ru = 'Цены контрагентов'");
	
	Запрос.УстановитьПараметр("Статический", 			НСтр("ru = 'Статический'"));
	Запрос.УстановитьПараметр("Расширение", 			НСтр("ru = 'Расширение'"));
	Запрос.УстановитьПараметр("Произвольный", 			ПроизвольныйЗапросПредставление);
	Запрос.УстановитьПараметр("Формула", 				НСтр("ru = 'Формула'"));
	Запрос.УстановитьПараметр("Динамический", 			НСтр("ru = 'Процент'"));
	Запрос.УстановитьПараметр("ФормулаАвтоРасчет",		НСтр("ru = 'Формула'"));
	Запрос.УстановитьПараметр("ДинамическийАвтоРасчет",	НСтр("ru = 'Процент'"));
	Запрос.УстановитьПараметр("ЦеныНоменклатуры", 		ЦеныНоменклатурыПредставление);
	Запрос.УстановитьПараметр("ЦеныКонтрагентов", 		ЦеныКонтрагентовПредставление);
	
	РезультатЗапроса	= Запрос.ВыполнитьПакет();
	ПодчиненныеВидыЦен	= РезультатЗапроса[0].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ДеревоРезультата	= РезультатЗапроса[1].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	КэшФормул = Новый Структура;
	Для каждого СтрокаГруппы Из ПодчиненныеВидыЦен.Строки Цикл
		
		Если ЗначениеЗаполнено(СтрокаГруппы.БазовыйВидЦен) Тогда
			
			СтрокаДереваЗначений = ДеревоРезультата.Строки.Найти(СтрокаГруппы.БазовыйВидЦен, "ВидЦен", Истина);
			Если ТипЗнч(СтрокаДереваЗначений) = Тип("СтрокаДереваЗначений") Тогда
				
				Для каждого СтрокаВидаЦен Из СтрокаГруппы.Строки Цикл
					
					ПодчиненныйВидЦен = СтрокаДереваЗначений.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(ПодчиненныйВидЦен, СтрокаВидаЦен);
					
					УстановитьФлагИспользованияВДереве(ПодчиненныйВидЦен, СтрокаДереваЗначений,
						ВидыЦенВыбраныПриЗаполнении, МассивВидовЦен);
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			Для каждого СтрокаФормульногоВидаЦен Из СтрокаГруппы.Строки Цикл
				
				ТаблицаОперандов = ЦенообразованиеФормулыСервер.ПолучитьТаблицуОперандовФормулы(ТекущаяДатаСеанса(),
					СтрокаФормульногоВидаЦен.ВидЦен.Формула, КэшФормул);

				Для каждого СтрокаОперанда Из ТаблицаОперандов Цикл
					
					СтрокаДереваРодитель = ДеревоРезультата.Строки.Найти(СтрокаОперанда.ВидЦен, "ВидЦен", Истина);
					Если ТипЗнч(СтрокаДереваРодитель) = Тип("СтрокаДереваЗначений") Тогда

						ПодчиненныйВидЦен = СтрокаДереваРодитель.Строки.Добавить();
						ЗаполнитьЗначенияСвойств(ПодчиненныйВидЦен, СтрокаФормульногоВидаЦен);
						
						УстановитьФлагИспользованияВДереве(ПодчиненныйВидЦен, СтрокаДереваРодитель,
							ВидыЦенВыбраныПриЗаполнении, МассивВидовЦен);
						
					КонецЕсли;
					
				КонецЦикла;

			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВключаяЦеныНоменклатуры = Ложь Тогда
		
		НайденнаяСтрока = ДеревоРезультата.Строки.Найти(ЦеныНоменклатурыПредставление, "Представление", Ложь);
		Если НайденнаяСтрока <> Неопределено Тогда
			
			ДеревоРезультата.Строки.Удалить(НайденнаяСтрока);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВключаяЦеныКонтрагентов = Ложь Тогда
		
		НайденнаяСтрока = ДеревоРезультата.Строки.Найти(ЦеныКонтрагентовПредставление, "Представление", Ложь);
		Если НайденнаяСтрока <> Неопределено Тогда
			
			ДеревоРезультата.Строки.Удалить(НайденнаяСтрока);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого СтрокаДереваГруппыЦен Из ДеревоРезультата.Строки Цикл
		
		Если СтрокаДереваГруппыЦен.Представление = ЦеныНоменклатурыПредставление Тогда
			
			Для каждого СтрокаДереваВидаЦен Из СтрокаДереваГруппыЦен.Строки Цикл
				
				ЗаполнитьСлужебныеПоляСтрокиДереваВидовЦен(СтрокаДереваВидаЦен, ПроизвольныйЗапросПредставление,
					УникальныйИдентификаторФормы);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПризнакиИспользованияВДеревеВидовЦен(ДеревоРезультата);
	
	СтруктураПараметров.ДеревоРезультата = ДеревоРезультата;
	
КонецПроцедуры

// Получить представление выбранных видов цен.
// 
// Параметры:
//  ДокументСсылка - ДокументСсылка.УстановкаЦенНоменклатуры - документ ссылка
// 
// Возвращаемое значение:
//  Строка - представление выбранных видов цен
Функция ПолучитьПредставлениеВыбранныхВидовЦен(ДокументСсылка) Экспорт
	
	Массив = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДокументСсылка.Запасы.ВыгрузитьКолонку("ВидЦены"));
	
	СтрокаРезультат = СтрСоединить(Массив, ", ");
	
	Возврат СтрокаРезультат;
	
КонецФункции

// Функция - Получить таблицу расчетных цен СКД
//
// Параметры:
//  ТаблицаНоменклатуры	 - ТаблицаЗначений - Таблица для расчета цен СКД
//  ПараметрыВидовЦенСКД - Структура - структура расчета цен
// 
// Возвращаемое значение:
//   - ТаблицаЗначений
//
Функция ПолучитьТаблицуРасчетныхЦенСКД(ТаблицаНоменклатуры, ПараметрыВидовЦенСКД) Экспорт
	
	КопияТаблицыНоменклатуры = ТаблицаНоменклатуры.Скопировать();

	Если КопияТаблицыНоменклатуры.Колонки.Найти("ВидЦены") = Неопределено
		И КопияТаблицыНоменклатуры.Колонки.Найти("ВидЦен") <> Неопределено Тогда		
		КопияТаблицыНоменклатуры.Колонки.ВидЦен.Имя = "ВидЦены";		
	КонецЕсли;	
	
	Если КопияТаблицыНоменклатуры.Колонки.Найти("ВидЦены") = Неопределено Тогда
		КопияТаблицыНоменклатуры.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	КонецЕсли;

	Если КопияТаблицыНоменклатуры.Колонки.Найти("ЦенаСтарая") = Неопределено Тогда
		КопияТаблицыНоменклатуры.Колонки.Добавить("ЦенаСтарая", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	Если КопияТаблицыНоменклатуры.Колонки.Найти("ВалютаСтарая") = Неопределено Тогда
		КопияТаблицыНоменклатуры.Колонки.Добавить("ВалютаСтарая", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	КонецЕсли;
	
	ЕстьДанныеРасчета = Ложь;
	КопияТаблицыНоменклатуры.Колонки.ЦенаНоваяШаблон.Имя = "Цена";	
	ОбщаяТаблицаНоменклатуры = КопияТаблицыНоменклатуры.СкопироватьКолонки();	
	Для каждого ПараметрВидаЦен Из ПараметрыВидовЦенСКД Цикл
				
		СхемаКомпоновкиДанных = ПараметрВидаЦен.Значение.СхемаКомпоновкиДанных;
		НастройкиКомпоновкиДанных = ПараметрВидаЦен.Значение.НастройкиСхемыКомпоновкиДанных;
		
		РабочийНаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
		
		НаборДанныхНоменклатура = СхемаКомпоновкиДанных.НаборыДанных.Найти("ТаблицаНоменклатуры");
		Если НаборДанныхНоменклатура = Неопределено Тогда
				
			НаборДанныхНоменклатура = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип(
				"НаборДанныхОбъектСхемыКомпоновкиДанных"));
			НаборДанныхНоменклатура.Имя = "ТаблицаНоменклатуры";
			НаборДанныхНоменклатура.ИмяОбъекта = "ТаблицаНоменклатуры";
			НаборДанныхНоменклатура.ИсточникДанных = РабочийНаборДанных.ИсточникДанных;
			
		КонецЕсли;
				
		ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "Номенклатура", "СправочникСсылка.Номенклатура");
		ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "Характеристика", "СправочникСсылка.ХарактеристикиНоменклатуры");
		ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "КлючСвязи", "Число", Истина);		
		ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "ЦенаСтарая", "Число", Истина);		
		ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "ВидЦены", "СправочникСсылка.ВидыЦен", Истина);
		
		СхемаКомпоновкиДанных.СвязиНаборовДанных.Очистить();
		ДобавитьСвязьНаборовДанныхСКД(СхемаКомпоновкиДанных, НаборДанныхНоменклатура, РабочийНаборДанных, "Номенклатура");
		ДобавитьСвязьНаборовДанныхСКД(СхемаКомпоновкиДанных, НаборДанныхНоменклатура, РабочийНаборДанных, "Характеристика");
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));  
		
		Если НастройкиКомпоновкиДанных <> Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
			КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
		Иначе
			
			Если ЗначениеЗаполнено(ПараметрВидаЦен.Значение.АдресНастроекСхемыКомпоновкиДанных) Тогда
				НастройкиИзВидаЦены = ПолучитьИзВременногоХранилища(ПараметрВидаЦен.Значение.АдресНастроекСхемыКомпоновкиДанных);
				КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиИзВидаЦены);
				КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
			Иначе
				КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
			КонецЕсли;
			
		КонецЕсли;
		
		КомпоновщикНастроек.Настройки.Структура.Очистить();
		
		ГруппировкаДетальныеЗаписи = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ГруппировкаДетальныеЗаписи.Использование = Истина;
		
		КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Номенклатура");		
		ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Характеристика");		
		ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Цена");		
		ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Валюта");
		ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "КлючСвязи");
		ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "ВидЦены");
		ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "ЕдиницаИзмерения");		
		ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Период");
		ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "ЦенаСтарая");
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ,
			, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), Ложь);
		
		ЗаполнитьОбязательныеПараметрыМакетаКомпоновкиПриЗаполнении(МакетКомпоновки, ПараметрВидаЦен.Значение);
		
		ВнешниеНаборыДанных = Новый Структура;
		ВнешниеНаборыДанных.Вставить("ТаблицаНоменклатуры", КопияТаблицыНоменклатуры.Скопировать(, "Номенклатура, 
			|Характеристика, КлючСвязи, ВидЦены, ЦенаСтарая"));
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных,,Истина);
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		
		ДанныеРасчета = Новый ТаблицаЗначений();
		ПроцессорВывода.УстановитьОбъект(ДанныеРасчета);
		ДанныеРасчета = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
		Если НЕ ЕстьДанныеРасчета Тогда
			ЕстьДанныеРасчета = ДанныеРасчета.Количество() > 0;
		КонецЕсли;
		
		ДанныеРасчета.ЗаполнитьЗначения(ПараметрВидаЦен.Значение.ВидЦен, "ВидЦены");
		ДанныеРасчета = СвернутьДанныеРасчетаСКДПоПериоду(ДанныеРасчета);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеРасчета, ОбщаяТаблицаНоменклатуры);
		
	КонецЦикла;
	
	Если ЕстьДанныеРасчета Тогда
		
		Возврат ОбщаяТаблицаНоменклатуры;
		
	Иначе
		
		Возврат КопияТаблицыНоменклатуры;
		
	КонецЕсли;
		
КонецФункции

// Получить номенклатуру из произвольной формы.
// 
// Параметры:
//  ТаблицаНоменклатуры - ТаблицаЗначений - Таблица номенклатуры
//  ПоказыватьНедействительныеХарактеристики - Булево - Показывать недействительные характеристики
//  Идентификатор - Строка - Идентификатор помещения результата
// 
// Возвращаемое значение:
//  Строка - Получить номенклатуру из произвольной формы
Функция ПолучитьНоменклатуруИзПроизвольнойФормы(ТаблицаНоменклатуры, 
		ПоказыватьНедействительныеХарактеристики, Идентификатор) Экспорт
	
	МассивНоменклатуры = ТаблицаНоменклатуры.ВыгрузитьКолонку("Номенклатура");
	МассивХарактеристик = ТаблицаНоменклатуры.ВыгрузитьКолонку("Характеристика");
	
	ДеревоНоменклатуры = Новый ДеревоЗначений;
	
	// 1. Получим СКД
	ИмяСхемыКД = "ПоНоменклатуреСХарактеристиками";
	СхемаКомпоновкиДанных = ПолучитьМакет(ИмяСхемыКД);
	
	// 2. создаем настройки для схемы 
	НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		
		НастройкиКомпоновкиДанных.Структура[0].Структура[0].Использование = Ложь;
		
	КонецЕсли;
	
	// 2.1 установим значения параметров
	ПараметрКД = СхемаКомпоновкиДанных.Параметры.Найти("МассивНоменклатуры");
	ПараметрКД.Значение = МассивНоменклатуры;
	
	ПараметрКД = СхемаКомпоновкиДанных.Параметры.Найти("МассивХарактеристик");
	ПараметрКД.Значение = МассивХарактеристик;
	
	// 3. готовим макет 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, , , Тип(
		"ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// 4. исполняем макет 
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет);
	ПроцессорКомпоновки.Сбросить();
	
	// 5. выводим результат 
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДеревоНоменклатуры);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	СтруктураТаблицДанных = РазобратьДеревоНоменклатуры(ДеревоНоменклатуры, ПоказыватьНедействительныеХарактеристики);
	Возврат ПоместитьВоВременноеХранилище(СтруктураТаблицДанных, Идентификатор);
	
КонецФункции

// Функция - Заполнить корзину формы произвольного подбора
//
// Параметры:
//  СтруктураПараметров - Структура:
// 	* СхемаКомпоновки - СхемаКомпоновкиДанных - схема для заполнения корзины
// 	* НастройкиКомпоновщика - НастройкиКомпоновкиДанных - настройки для схемы компоновки
// 	* Корзина - ТаблицаЗначений - таблица для заполнения
// 
// Возвращаемое значение:
//  ТаблицаЗначений - заполненная корзина
//
Функция ЗаполнитьКорзинуФормыПроизвольногоПодбора(СтруктураПараметров) Экспорт
	
	СхемаКомпоновки = СтруктураПараметров.СхемаКомпоновки;
	НастройкиКомпоновщика = СтруктураПараметров.НастройкиКомпоновщика;
	Корзина = СтруктураПараметров.Корзина;
	
	Если СхемаКомпоновки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновки, 
		НастройкиКомпоновщика, , ,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	Корзина.Очистить();
	
	ПроцессорВыводаРезультатаКомпоновкиДанных = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВыводаРезультатаКомпоновкиДанных.УстановитьОбъект(Корзина);
	ПроцессорВыводаРезультатаКомпоновкиДанных.Вывести(ПроцессорКомпоновкиДанных);
	
	МассивКолонок = Новый Массив;
	Для каждого Колонка Из Корзина.Колонки Цикл
		МассивКолонок.Добавить(Колонка.Имя);
	КонецЦикла;
	Корзина.Свернуть(СтрСоединить(МассивКолонок, ","));
	
	Возврат Корзина;
	
КонецФункции

// Функция - Курсы валют документа
//
// Параметры:
//  Дата - Дата - дата курсов
// 
// Возвращаемое значение:
//  Соответствие - соответствие курсов
//
Функция КурсыВалютДокумента(Дата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта,
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата,) КАК КурсыВалютСрезПоследних";
	Запрос.УстановитьПараметр("Дата", Дата);

	Выборка = Запрос.Выполнить().Выбрать();
	СоответствиеКурсов = Новый Соответствие;
	Пока Выборка.Следующий() Цикл

		СоответствиеКурсов.Вставить(Выборка.Валюта, Новый Структура("Курс, Кратность, Валюта", Выборка.Курс,
			Выборка.Кратность, Выборка.Валюта));

	КонецЦикла;

	Возврат СоответствиеКурсов;
	
КонецФункции

#Область ВводНаОсновании

// Заполняет таблицы значений ТаблицаНоменклатуры и ТаблицаХарактеристик по приходным накладным
// и помещает их во временное хранилище по переданному адресу
//
// Параметры:
//  СтруктураПараметров		 - - Структура:
// 		* МассивПриходныхНакладных - Массив из ДокументСсылка.ПриходнаяНакладная
// 		* ИспользоватьХарактеристики - Булево - признак использования характеристик
//  АдресВременногоХранилища - Строка - адрес по которому будет помещены таблицы
//
Процедура ПолучитьНоменклатуруПоПриходнымНакладным(СтруктураПараметров, АдресВременногоХранилища) Экспорт
	
	ИмяСхемыКД = "ПоПриходнымНакладным";
	СхемаКомпоновкиДанных = ПолучитьМакет(ИмяСхемыКД);
	
	Запрос = Новый Запрос(СхемаКомпоновкиДанных.НаборыДанных.Номенклатура.Запрос);
	Запрос.УстановитьПараметр("МассивПриходныхНакладных", СтруктураПараметров.МассивПриходныхНакладных);
	Запрос.УстановитьПараметр("ВидыЦен", СтруктураПараметров.МассивВидовЦен);
	ТаблицаНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос(СхемаКомпоновкиДанных.НаборыДанных.ХарактеристикиНоменклатуры.Запрос);
	Запрос.УстановитьПараметр("МассивПриходныхНакладных", СтруктураПараметров.МассивПриходныхНакладных);
	Запрос.УстановитьПараметр("ВидыЦен", СтруктураПараметров.МассивВидовЦен);
	ТаблицаХарактеристик = Запрос.Выполнить().Выгрузить();
	
	Если СтруктураПараметров.ИспользоватьХарактеристики = 0 Тогда
		ТаблицаХарактеристик.Очистить();
	КонецЕсли;
	
	ТаблицаЦен = ТаблицаЦенПоПриходнымНакладным(СтруктураПараметров.МассивПриходныхНакладных,
		СтруктураПараметров.МассивВидовЦен);
	
	ЛокальныйКлючСвязи = 0;
	Для каждого СтрокаНоменклатуры Из ТаблицаНоменклатуры Цикл
		
		ЛокальныйКлючСвязи = ЛокальныйКлючСвязи + 1;
		СтрокаНоменклатуры.КлючСвязи = ЛокальныйКлючСвязи;
		
		ПараметрыОтбора = Новый Структура("Номенклатура", СтрокаНоменклатуры.Номенклатура);
		СтрокиХарактеристик = ТаблицаХарактеристик.НайтиСтроки(ПараметрыОтбора);
		Для каждого СтрокаХарактеристики Из СтрокиХарактеристик Цикл
			
			СтрокаХарактеристики.КлючСвязи = ЛокальныйКлючСвязи;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура;
	Для Каждого СтрокаЦены Из ТаблицаЦен Цикл
		
		Если ЗначениеЗаполнено(СтрокаЦены.ВидЦены) 
			И СтрокаЦены.Валюта <> СтрокаЦены.ВидЦены.ВалютаЦены 
			И Не СтрокаЦены.ВидЦены.НесколькоВалютДляЦен Тогда
			
			СтруктураКурса = ПолучитьСтруктуруКурсаВалютДляСтроки(СтрокаЦены.ВидЦены.ВалютаЦены, 
				Новый Структура("ДатаКурса", СтрокаЦены.ДатаДокумента), ДополнительныеПараметры);

			СтрокаЦены.Цена = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(СтрокаЦены.Цена, 
								СтрокаЦены.КурсДокумента, СтруктураКурса.Курс, 
								СтрокаЦены.КратностьДокумента, СтруктураКурса.Кратность);
			СтрокаЦены.Валюта = СтрокаЦены.ВидЦены.ВалютаЦены;

			СтрокаЦены.Цена = ЦенообразованиеСервер.ОкруглитьЦенуПоВидуЦен(СтрокаЦены.Цена, СтрокаЦены.ВидЦены);

		КонецЕсли;
		
	КонецЦикла;

	СтруктураРезультат = Новый Структура("ТаблицаНоменклатуры, ТаблицаХарактеристик, ТаблицаЦен", ТаблицаНоменклатуры,
		ТаблицаХарактеристик, ТаблицаЦен);
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ЗаполнитьНовыеВидыЦенВТабличныхЧастях(СтруктураПараметров) Экспорт
	
	ТЧНоменклатура = СтруктураПараметров.ТЧНоменклатура;
	ТЧХарактеристики = СтруктураПараметров.ТЧХарактеристики;
	
	ЗаполнитьБазовыеЦены(ТЧНоменклатура, СтруктураПараметров, Ложь);
	ЗаполнитьБазовыеЦены(ТЧХарактеристики, СтруктураПараметров, Истина);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Период");
	ПараметрыРасчета.Вставить("ВключаяХарактеристики");
	ПараметрыРасчета.Вставить("Автор");
	ПараметрыРасчета.Вставить("КурсыВалютДокумента");
	ЗаполнитьЗначенияСвойств(ПараметрыРасчета, СтруктураПараметров);
	
	ЗаполнитьРасчетныеЦеныПоБазовым(ТЧНоменклатура, СтруктураПараметров.КэшЗначений.ВыбранныеВидыЦен, "ТЧНоменклатура",
		ПараметрыРасчета);
	ЗаполнитьРасчетныеЦеныПоБазовым(ТЧХарактеристики, СтруктураПараметров.КэшЗначений.ВыбранныеВидыЦен,
		"ТЧХарактеристики", ПараметрыРасчета);
	
	Результат = Новый Структура;
	Результат.Вставить("ТЧНоменклатура", ТЧНоменклатура);
	Результат.Вставить("ТЧХарактеристики", ТЧХарактеристики);
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьНоменклатуруВТабличнуюЧасть(ПараметрыКопирования) Экспорт
	
	Результат = Новый Структура;
	
	СтруктураТаблицДанных = ПараметрыКопирования.СтруктураТаблицДанных;
	ТаблицаФормыНоменклатуры = ПараметрыКопирования.ТаблицаФормыНоменклатуры;
	ТаблицаФормыХарактеристик = ПараметрыКопирования.ТаблицаФормыХарактеристик;
	МаксимальныйКлючСвязи = ПараметрыКопирования.МаксимальныйКлючСвязи;
	
	Если СтруктураТаблицДанных.ТаблицаНоменклатуры.Количество() > 0 Тогда
		
		Если СтруктураТаблицДанных.ТаблицаНоменклатуры.Количество() > 0 Тогда
			
			ПараметрыКопирования.ИмяТабличнойЧасти = "ТЧНоменклатура";
			КопироватьДобавлениемСтрокТаблицЗначений(СтруктураТаблицДанных.ТаблицаНоменклатуры,
				ТаблицаФормыНоменклатуры, ПараметрыКопирования);
			
		КонецЕсли;
		
		Если СтруктураТаблицДанных.ТаблицаХарактеристик.Количество() > 0 Тогда
			
			ПараметрыКопирования.ИмяТабличнойЧасти = "ТЧХарактеристики";
			КопироватьДобавлениемСтрокТаблицЗначений(СтруктураТаблицДанных.ТаблицаХарактеристик,
				ТаблицаФормыХарактеристик, ПараметрыКопирования);
			
		КонецЕсли;
		
		МаксимальныйКлючСвязи = ПараметрыКопирования.МаксимальныйКлючСвязиПослеДобавления;
		
	КонецЕсли;
	
	Результат.Вставить("ТаблицаФормыНоменклатуры", ТаблицаФормыНоменклатуры);
	Результат.Вставить("ТаблицаФормыХарактеристик", ТаблицаФормыХарактеристик);
	Результат.Вставить("МаксимальныйКлючСвязи", МаксимальныйКлючСвязи);
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьДокументПриОткрытии(СтруктураПараметров) Экспорт
	
	Результат = Новый Структура;
	
	ТЧНоменклатура = СтруктураПараметров.ТЧНоменклатура;
	ТЧХарактеристики = СтруктураПараметров.ТЧХарактеристики;
	ВыбранныеВидыЦен = СтруктураПараметров.ВыбранныеВидыЦен;
	МаксимальныйКлючСвязи = СтруктураПараметров.МаксимальныйКлючСвязи;
	ПараметрыВидовЦенСКД = СтруктураПараметров.ПараметрыВидовЦенСКД;
	
	ПоказыватьХарактеристики = СтруктураПараметров.ПоказыватьХарактеристики;
	ПоказыватьНедействительныеХарактеристики = СтруктураПараметров.ПоказыватьНедействительныеХарактеристики;
	Дата = СтруктураПараметров.Период;
	УстанавливатьХарактеристикамБезЦен = СтруктураПараметров.УстанавливатьХарактеристикамБезЦен;
	Автор = СтруктураПараметров.Автор;
	Запасы = СтруктураПараметров.Запасы;
	
	ТЧНоменклатура.Очистить();
	ТЧХарактеристики.Очистить();
	
	АдресВременногоХранилища = РазобратьМассивНоменклатурыИХарактеристикПоДокументу(Запасы, ПоказыватьХарактеристики,
		ПоказыватьНедействительныеХарактеристики);
	
	Результат = Новый Структура;
	Результат.Вставить("ВыборПроизведен", Истина);
	Результат.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);
		
	Если ЭтоАдресВременногоХранилища(Результат.АдресВременногоХранилища) Тогда
				
		СтруктураТаблицДанных = ПолучитьИзВременногоХранилища(Результат.АдресВременногоХранилища);
		Если ЗначениеЗаполнено(СтруктураТаблицДанных) Тогда
			
			ПараметрыКопирования = Новый Структура;
			ПараметрыКопирования.Вставить("ИменаКолонокКопирования", Неопределено);
			ПараметрыКопирования.Вставить("ИменаКолонокИсключений", Неопределено);
			ПараметрыКопирования.Вставить("ВыбранныеВидыЦен", ВыбранныеВидыЦен);
			ПараметрыКопирования.Вставить("ЗаполнитьТекущиеЦены", Истина);
			ПараметрыКопирования.Вставить("ИмяТабличнойЧасти", "");
			ПараметрыКопирования.Вставить("МаксимальныйКлючСвязи", МаксимальныйКлючСвязи);
			ПараметрыКопирования.Вставить("МаксимальныйКлючСвязиПослеДобавления", МаксимальныйКлючСвязи);
			ПараметрыКопирования.Вставить("ПоДокументу", Истина);
			ПараметрыКопирования.Вставить("ТаблицаЦен", ?(СтруктураТаблицДанных.Свойство("ТаблицаЦен"),
				СтруктураТаблицДанных.ТаблицаЦен, Неопределено));
			ПараметрыКопирования.Вставить("Период", Дата);
			ПараметрыКопирования.Вставить("ПараметрыВидовЦенСКД", ПараметрыВидовЦенСКД);
			ПараметрыКопирования.Вставить("ВключаяХарактеристики", УстанавливатьХарактеристикамБезЦен);
			ПараметрыКопирования.Вставить("Автор", Автор);
			ПараметрыКопирования.Вставить("ПересчитыватьЦены", ?(СтруктураПараметров.Свойство("ПересчитыватьЦены"),
				СтруктураПараметров.ПересчитыватьЦены, Истина));
			ПараметрыКопирования.Вставить("Сортировать", ?(СтруктураПараметров.Свойство("Сортировать"),
				СтруктураПараметров.Сортировать, Истина));
			ПараметрыКопирования.Вставить("ЭтоНовый", ?(СтруктураПараметров.Свойство("ЭтоНовый"),
				СтруктураПараметров.ЭтоНовый, Ложь));
			ПараметрыКопирования.Вставить("КурсыВалютДокумента", СтруктураПараметров.КурсыВалютДокумента);
			ПараметрыКопирования.Вставить("ФОУчетВалютныхОпераций", СтруктураПараметров.ФОУчетВалютныхОпераций);
			
			Если СтруктураТаблицДанных.ТаблицаНоменклатуры.Количество() > 0 Тогда

				Если СтруктураТаблицДанных.ТаблицаНоменклатуры.Количество() > 0 Тогда
					
					ПараметрыКопирования.ИмяТабличнойЧасти = "ТЧНоменклатура";
					КопироватьДобавлениемСтрокТаблицЗначений(СтруктураТаблицДанных.ТаблицаНоменклатуры, ТЧНоменклатура,
						ПараметрыКопирования);
					
				КонецЕсли;
				
				Если СтруктураТаблицДанных.ТаблицаХарактеристик.Количество() > 0 Тогда
					
					ПараметрыКопирования.ИмяТабличнойЧасти = "ТЧХарактеристики";
					КопироватьДобавлениемСтрокТаблицЗначений(СтруктураТаблицДанных.ТаблицаХарактеристик,
						ТЧХарактеристики, ПараметрыКопирования);
					
				КонецЕсли;
				
				МаксимальныйКлючСвязи = ПараметрыКопирования.МаксимальныйКлючСвязиПослеДобавления;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.Вставить("ТЧНоменклатура", ТЧНоменклатура);
	Результат.Вставить("ТЧХарактеристики", ТЧХарактеристики);
	Результат.Вставить("МаксимальныйКлючСвязи", МаксимальныйКлючСвязи);
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьТаблицуДляРасчетаЗависимыхПоОднойЗаписи(ПараметрыРасчета) Экспорт
	
	Результат = ПолучитьПустуюТаблицуДляРасчетаЗависимыхЦен(); 
	НоваяЗапись = Результат.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, ПараметрыРасчета);
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьЦеныПоДаннымИБ(СтруктураПараметров) Экспорт
	
	Результат = Новый Структура;
	
	ПараметрыВидовЦенСКД = СтруктураПараметров.ПараметрыВидовЦенСКД;
	ТЧНоменклатура = СтруктураПараметров.ТЧНоменклатура;
	ТЧХарактеристики = СтруктураПараметров.ТЧХарактеристики;
	УстанавливатьХарактеристикамБезЦен = СтруктураПараметров.УстанавливатьХарактеристикамБезЦен;
	ПоказыватьНедействительныеХарактеристики = СтруктураПараметров.ПоказыватьНедействительныеХарактеристики;
	ТаблицаНоменклатуры = СтруктураПараметров.ТаблицаНоменклатуры;
	Автор = СтруктураПараметров.Автор;
	Период = СтруктураПараметров.Период;
	ВыбранныеВидыЦен = СтруктураПараметров.ВыбранныеВидыЦен;
	КурсыВалютДокумента = СтруктураПараметров.КурсыВалютДокумента;
	
	ЗаполнитьЦеныСКДПоДаннымИБ(ПараметрыВидовЦенСКД, ПоказыватьНедействительныеХарактеристики, СтруктураПараметров,
		ТаблицаНоменклатуры, УстанавливатьХарактеристикамБезЦен);
	ЗаполнитьЦеныРасширенийПоДаннымИБ(ПоказыватьНедействительныеХарактеристики, СтруктураПараметров,
		ТаблицаНоменклатуры, УстанавливатьХарактеристикамБезЦен);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Период", Период);
	ДополнительныеПараметры.Вставить("Автор", Автор);
	ДополнительныеПараметры.Вставить("ВключаяХарактеристики", УстанавливатьХарактеристикамБезЦен);
	ДополнительныеПараметры.Вставить("КурсыВалютДокумента", КурсыВалютДокумента);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТЧНоменклатура", ТЧНоменклатура);
	СтруктураПараметров.Вставить("ТЧХарактеристики", ТЧХарактеристики);
	СтруктураПараметров.Вставить("ВыбранныеВидыЦен", ВыбранныеВидыЦен);
	СтруктураПараметров.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	ПересчитатьРасчетныеВидыЦенВТаблицахДокумента(СтруктураПараметров);
	
	Результат.Вставить("ТЧНоменклатура", ТЧНоменклатура);
	Результат.Вставить("ТЧХарактеристики", ТЧХарактеристики);
	
	Возврат Результат;
	
КонецФункции

Функция ПересчетПоПростымПравилам(СтруктураПараметров) Экспорт
	
	Перем ВидыЦенКПересчету;
	
	Результат = Новый Структура;
	
	ОпределитьЗаполняемыеВидыЦен(СтруктураПараметров, ВидыЦенКПересчету, СтруктураПараметров.КэшЗначений);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТабличнойЧасти", "ТЧНоменклатура");
	ДополнительныеПараметры.Вставить("ВидыЦенКПересчету", ВидыЦенКПересчету);
	
	ТЧНоменклатура = СтруктураПараметров.ТЧНоменклатура;
	ТЧХарактеристики = СтруктураПараметров.ТЧХарактеристики; 
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Период");
	ПараметрыРасчета.Вставить("ВключаяХарактеристики");
	ПараметрыРасчета.Вставить("Автор");
	ПараметрыРасчета.Вставить("КурсыВалютДокумента");
	ЗаполнитьЗначенияСвойств(ПараметрыРасчета, СтруктураПараметров);
	
	НаВсеСтроки = ?(СтруктураПараметров.ОбластьПрименения = 0, Истина, Ложь);
	Если НаВсеСтроки Тогда
		
		Для каждого СтрокаНоменклатуры Из ТЧНоменклатура Цикл
			ИзменитьЦеныПоПравилу(СтрокаНоменклатуры, СтруктураПараметров, ДополнительныеПараметры);
		КонецЦикла;
		
	Иначе
		
		Для каждого ИндексСтроки Из СтруктураПараметров.ВыделенныеСтрокиНоменклатуры Цикл
			СтрокаНоменклатуры = ТЧНоменклатура[ИндексСтроки];
			ИзменитьЦеныПоПравилу(СтрокаНоменклатуры, СтруктураПараметров, ДополнительныеПараметры);
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьРасчетныеЦеныПоБазовым(ТЧНоменклатура, СтруктураПараметров.КэшЗначений.ВыбранныеВидыЦен, "ТЧНоменклатура",
		ПараметрыРасчета);
		
	ДополнительныеПараметры.Вставить("ИмяТабличнойЧасти", "ТЧХарактеристики");
	Если НаВсеСтроки Тогда
	
		Для каждого СтрокаХарактеристик Из ТЧХарактеристики Цикл
			ИзменитьЦеныПоПравилу(СтрокаХарактеристик, СтруктураПараметров, ДополнительныеПараметры);
		КонецЦикла;
		
	Иначе
		
		Для каждого ИндексСтроки Из СтруктураПараметров.ВыделенныеСтрокиНоменклатуры Цикл
			
			СтрокаНоменклатуры = ТЧНоменклатура[ИндексСтроки];
			СтрокиХарактеристик = ТЧХарактеристики.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаНоменклатуры.КлючСвязи));
			Для каждого СтрокаХарактеристик Из СтрокиХарактеристик Цикл
				ИзменитьЦеныПоПравилу(СтрокаХарактеристик, СтруктураПараметров, ДополнительныеПараметры);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли; 
	
	ЗаполнитьРасчетныеЦеныПоБазовым(ТЧХарактеристики, СтруктураПараметров.КэшЗначений.ВыбранныеВидыЦен,
		"ТЧХарактеристики", ПараметрыРасчета);
	
	Результат.Вставить("ТЧНоменклатура", ТЧНоменклатура);
	Результат.Вставить("ТЧХарактеристики", ТЧХарактеристики);
	
	Возврат Результат;
	
КонецФункции

Функция ПересчетПоФормуле(СтруктураПараметров) Экспорт
	
	Результат = Новый Структура; 
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Период");
	ПараметрыРасчета.Вставить("ВключаяХарактеристики");
	ПараметрыРасчета.Вставить("Автор");
	ПараметрыРасчета.Вставить("КурсыВалютДокумента");
	ЗаполнитьЗначенияСвойств(ПараметрыРасчета, СтруктураПараметров);
	
	ТЧНоменклатура = СтруктураПараметров.ТЧНоменклатура;
	ТЧХарактеристики = СтруктураПараметров.ТЧХарактеристики;
	
	ТЧНоменклатура.Колонки.Добавить("Рассчитывать", Новый ОписаниеТипов("Булево"));
	ТЧХарактеристики.Колонки.Добавить("Рассчитывать", Новый ОписаниеТипов("Булево"));
	
	ТЧНоменклатура.ЗаполнитьЗначения(Истина, "Рассчитывать");
	ТЧХарактеристики.ЗаполнитьЗначения(Истина, "Рассчитывать");
	
	ЗаданаОбластьПрименения = ?(СтруктураПараметров.ОбластьПрименения = 0, Ложь, Истина);
	Если ЗаданаОбластьПрименения Тогда
		
		ТЧНоменклатура.ЗаполнитьЗначения(Ложь, "Рассчитывать");
		ТЧХарактеристики.ЗаполнитьЗначения(Ложь, "Рассчитывать");
		
		Для каждого Индекс Из СтруктураПараметров.ВыделенныеСтрокиНоменклатуры Цикл
			
			ВыделеннаяСтрока = ТЧНоменклатура[Индекс];
			ВыделеннаяСтрока.Рассчитывать = Истина;
			
			НайденныеСтроки = ТЧХарактеристики.НайтиСтроки(Новый Структура("КлючСвязи", ВыделеннаяСтрока.КлючСвязи));
			Для каждого СтрокаТаблицыФормы Из НайденныеСтроки Цикл
			
				СтрокаТаблицыФормы.Рассчитывать = Истина;
			
			КонецЦикла;
		
		КонецЦикла;
		
	КонецЕсли;
	
	КоллекцииДанныхФормы = Новый Структура("ТаблицаФормыНоменклатуры, ТаблицаФормыХарактеристик", ТЧНоменклатура, ТЧХарактеристики);
	
	ПараметрыФормированияЦен = Новый Структура;
	ПараметрыФормированияЦен.Вставить("Формула", СтруктураПараметров.Формула);
	ПараметрыФормированияЦен.Вставить("ВидыЦенКПересчету", Неопределено);
	ПараметрыФормированияЦен.Вставить("ПоказыватьХарактеристики", СтруктураПараметров.ПоказыватьХарактеристики);
	ПараметрыФормированияЦен.Вставить("УстанавливатьХарактеристикамБезЦен", СтруктураПараметров.ВключаяХарактеристики);
	ПараметрыФормированияЦен.Вставить("КоллекцииДанныхФормы", КоллекцииДанныхФормы);
	ПараметрыФормированияЦен.Вставить("КурсыВалютДокумента", СтруктураПараметров.КурсыВалютДокумента);
	
	ОпределитьЗаполняемыеВидыЦен(СтруктураПараметров, ПараметрыФормированияЦен.ВидыЦенКПересчету, СтруктураПараметров.КэшЗначений);
	
	АдресРезультата = Новый УникальныйИдентификатор;
	РассчитатьНовыеЦеныПоФормулеДлОперация(ПараметрыФормированияЦен, АдресРезультата);
	
	ЗаполнитьРасчетныеЦеныПоБазовым(ТЧНоменклатура, СтруктураПараметров.КэшЗначений.ВыбранныеВидыЦен, "ТЧНоменклатура", ПараметрыРасчета);
	ЗаполнитьРасчетныеЦеныПоБазовым(ТЧХарактеристики, СтруктураПараметров.КэшЗначений.ВыбранныеВидыЦен, "ТЧХарактеристики", ПараметрыРасчета);
	
	Результат.Вставить("ТЧНоменклатура", ТЧНоменклатура);
	Результат.Вставить("ТЧХарактеристики", ТЧХарактеристики);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПустуюТаблицуДляРасчетаЗависимыхЦен() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ВидЦенРасчетный", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	Результат.Колонки.Добавить("ТипВидаЦен", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыВидовЦен"));
	Результат.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Результат.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТипВалюта = Новый ОписаниеТипов("СправочникСсылка.Валюты");
	Результат.Колонки.Добавить("ВалютаЦеныСтарой", ТипВалюта);
	Результат.Колонки.Добавить("ВалютаЦеныРасчетной", ТипВалюта);
	
	МассивТиповЕдиницИзмерений = Новый Массив;
	МассивТиповЕдиницИзмерений.Добавить(Тип("СправочникСсылка.ЕдиницыИзмерения"));
	МассивТиповЕдиницИзмерений.Добавить(Тип("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	Результат.Колонки.Добавить("ЕдиницаИзмерения", 		Новый ОписаниеТипов(МассивТиповЕдиницИзмерений));
	
	Результат.Колонки.Добавить("ИдентификаторСтроки",	ОбщегоНазначения.ОписаниеТипаЧисло(10));
	Результат.Колонки.Добавить("Приоритет",				ОбщегоНазначения.ОписаниеТипаЧисло(10));
	Результат.Колонки.Добавить("СтруктураБазовыхЦен", 	Новый ОписаниеТипов("Структура"));
	
	Результат.Колонки.Добавить("ЗначениеЦеныРасчетной",	ОбщегоНазначения.ОписаниеТипаЧисло(10, 3));
	Результат.Колонки.Добавить("ЗначениеЦеныСтарой",	ОбщегоНазначения.ОписаниеТипаЧисло(10, 3));
	Результат.Колонки.Добавить("КлючСвязи",				ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	Результат.Колонки.Добавить("ИндексВидаЦены",		ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьТаблицуДляРасчетаЗависимыхПоТаблицеБазовых(ТаблицаРасчета, Знач ВыбранныеВидыЦен,
	Знач ИмяТабличнойЧасти, Знач ТаблицаИсточникСЦеной, ПараметрыЗаполнения) Экспорт
	
	Для каждого СтрокаТаблицыИсточника Из ТаблицаИсточникСЦеной Цикл
		
		ДобавитьЗаписьВТаблицуДляРасчетаЗависимых(ТаблицаРасчета, ВыбранныеВидыЦен, ИмяТабличнойЧасти,
			СтрокаТаблицыИсточника, ТаблицаИсточникСЦеной, ПараметрыЗаполнения);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСФормулами

Процедура ПолучитьТаблицуПоследнихЦенПоступлений(ПараметрыРасчета, ТаблицаСЦенамиПоступления)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаФормыНоменклатуры", ПараметрыРасчета.КоллекцииДанныхФормы.ТаблицаФормыНоменклатуры);
	Запрос.УстановитьПараметр("ТаблицаФормыХарактеристик", ПараметрыРасчета.КоллекцииДанныхФормы.ТаблицаФормыХарактеристик);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаФормыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаНоменклатура
	|ИЗ
	|	&ТаблицаФормыНоменклатуры КАК ТаблицаФормыНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаФормыХарактеристик.Номенклатура КАК Номенклатура,
	|	ТаблицаФормыХарактеристик.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаХарактеристики
	|ИЗ
	|	&ТаблицаФормыХарактеристик КАК ТаблицаФормыХарактеристик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатура.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатура.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаНоменклатураХарактеристики
	|ИЗ
	|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаХарактеристики.Номенклатура,
	|	ТаблицаХарактеристики.Характеристика
	|ИЗ
	|	ТаблицаХарактеристики КАК ТаблицаХарактеристики
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПН.Номенклатура КАК Номенклатура,
	|	ПН.Характеристика КАК Характеристика,
	|	МАКСИМУМ(ПН.Ссылка.Дата) КАК Период
	|ПОМЕСТИТЬ ЗапасыПриходныхНакладныхСПериодами
	|ИЗ
	|	ТаблицаНоменклатураХарактеристики КАК ТаблицаНоменклатураХарактеристики
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная.Запасы КАК ПН
	|		ПО ТаблицаНоменклатураХарактеристики.Номенклатура = ПН.Номенклатура
	|			И ТаблицаНоменклатураХарактеристики.Характеристика = ПН.Характеристика
	|			И (ПН.Ссылка.Проведен)
	|ГДЕ
	|	НЕ ПН.Номенклатура ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ПН.Номенклатура,
	|	ПН.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПН.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ПН.Ссылка.Дата) КАК Период
	|ПОМЕСТИТЬ УслугиПриходныхНакладныхСПериодами
	|ИЗ
	|	ТаблицаНоменклатураХарактеристики КАК ТаблицаНоменклатураХарактеристики
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная.Расходы КАК ПН
	|		ПО ТаблицаНоменклатураХарактеристики.Номенклатура = ПН.Номенклатура
	|			И (ПН.Ссылка.Проведен)
	|ГДЕ
	|	НЕ ПН.Номенклатура ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ПН.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПН.Номенклатура КАК Номенклатура,
	|	ПН.Характеристика КАК Характеристика,
	|	ПН.Период КАК Период,
	|	ЦеныИзНакладных.Цена КАК Значение,
	|	ЦеныИзНакладных.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЦеныИзНакладных.Ссылка.Курс КАК Курс,
	|	ЦеныИзНакладных.Ссылка.Кратность КАК Кратность
	|ПОМЕСТИТЬ ЦеныИзНакладныхЗапасы
	|ИЗ
	|	ЗапасыПриходныхНакладныхСПериодами КАК ПН
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная.Запасы КАК ЦеныИзНакладных
	|		ПО ПН.Период = ЦеныИзНакладных.Ссылка.Дата
	|			И ПН.Номенклатура = ЦеныИзНакладных.Номенклатура
	|			И ПН.Характеристика = ЦеныИзНакладных.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПН.Номенклатура КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|	ПН.Период КАК Период,
	|	ЦеныИзНакладных.Цена КАК Значение,
	|	ЦеныИзНакладных.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЦеныИзНакладных.Ссылка.Курс КАК Курс,
	|	ЦеныИзНакладных.Ссылка.Кратность КАК Кратность
	|ПОМЕСТИТЬ ЦеныИзНакладныхУслуги
	|ИЗ
	|	УслугиПриходныхНакладныхСПериодами КАК ПН
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная.Расходы КАК ЦеныИзНакладных
	|		ПО ПН.Период = ЦеныИзНакладных.Ссылка.Дата
	|			И ПН.Номенклатура = ЦеныИзНакладных.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныИзНакладныхЗапасы.Номенклатура КАК Номенклатура,
	|	ЦеныИзНакладныхЗапасы.Характеристика КАК Характеристика,
	|	ЦеныИзНакладныхЗапасы.Период КАК Период,
	|	ЦеныИзНакладныхЗапасы.Значение КАК Значение,
	|	ЦеныИзНакладныхЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЦеныИзНакладныхЗапасы.Курс КАК Курс,
	|	ЦеныИзНакладныхЗапасы.Кратность КАК Кратность,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) КАК ВидЦен
	|ИЗ
	|	ЦеныИзНакладныхЗапасы КАК ЦеныИзНакладныхЗапасы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЦеныИзНакладныхУслуги.Номенклатура,
	|	ЦеныИзНакладныхУслуги.Характеристика,
	|	ЦеныИзНакладныхУслуги.Период,
	|	ЦеныИзНакладныхУслуги.Значение,
	|	ЦеныИзНакладныхУслуги.ЕдиницаИзмерения,
	|	ЦеныИзНакладныхУслуги.Курс,
	|	ЦеныИзНакладныхУслуги.Кратность,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|ИЗ
	|	ЦеныИзНакладныхУслуги КАК ЦеныИзНакладныхУслуги";
	
	ТаблицаСЦенамиПоступления = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура ПолучитьТаблицуПоследнихЦенРеализаций(ПараметрыРасчета, ТаблицаСЦенамиРеализации)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаФормыНоменклатуры", ПараметрыРасчета.КоллекцииДанныхФормы.ТаблицаФормыНоменклатуры);
	Запрос.УстановитьПараметр("ТаблицаФормыХарактеристик", ПараметрыРасчета.КоллекцииДанныхФормы.ТаблицаФормыХарактеристик);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаФормыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаНоменклатура
	|ИЗ
	|	&ТаблицаФормыНоменклатуры КАК ТаблицаФормыНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаФормыХарактеристик.Номенклатура КАК Номенклатура,
	|	ТаблицаФормыХарактеристик.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаХарактеристики
	|ИЗ
	|	&ТаблицаФормыХарактеристик КАК ТаблицаФормыХарактеристик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатура.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатура.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаНоменклатураХарактеристики
	|ИЗ
	|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаХарактеристики.Номенклатура,
	|	ТаблицаХарактеристики.Характеристика
	|ИЗ
	|	ТаблицаХарактеристики КАК ТаблицаХарактеристики
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РН.Номенклатура КАК Номенклатура,
	|	РН.Характеристика КАК Характеристика,
	|	МАКСИМУМ(РН.Ссылка.Дата) КАК Период
	|ПОМЕСТИТЬ НоменклатураРасходныхНакладныхСПериодами
	|ИЗ
	|	ТаблицаНоменклатураХарактеристики КАК ТаблицаНоменклатураХарактеристики
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходнаяНакладная.Запасы КАК РН
	|		ПО ТаблицаНоменклатураХарактеристики.Номенклатура = РН.Номенклатура
	|			И ТаблицаНоменклатураХарактеристики.Характеристика = РН.Характеристика
	|			И (РН.Ссылка.Проведен)
	|ГДЕ
	|	НЕ РН.Номенклатура ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	РН.Номенклатура,
	|	РН.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РН.Номенклатура КАК Номенклатура,
	|	РН.Характеристика КАК Характеристика,
	|	РН.Период КАК Период,
	|	ЦеныИзНакладных.Цена КАК Цена,
	|	ЦеныИзНакладных.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЦеныИзНакладных.Ссылка.Курс КАК Курс,
	|	ЦеныИзНакладных.Ссылка.Кратность КАК Кратность
	|ПОМЕСТИТЬ НоменклатураРасходныхНакладныхСПериодамиИЦенами
	|ИЗ
	|	НоменклатураРасходныхНакладныхСПериодами КАК РН
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходнаяНакладная.Запасы КАК ЦеныИзНакладных
	|		ПО РН.Период = ЦеныИзНакладных.Ссылка.Дата
	|			И РН.Номенклатура = ЦеныИзНакладных.Номенклатура
	|			И РН.Характеристика = ЦеныИзНакладных.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктВР.Номенклатура КАК Номенклатура,
	|	АктВР.Характеристика КАК Характеристика,
	|	МАКСИМУМ(АктВР.Ссылка.Дата) КАК Период
	|ПОМЕСТИТЬ НоменклатураАктаСПериодами
	|ИЗ
	|	ТаблицаНоменклатураХарактеристики КАК ТаблицаНоменклатураХарактеристики
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктВыполненныхРабот.РаботыИУслуги КАК АктВР
	|		ПО ТаблицаНоменклатураХарактеристики.Номенклатура = АктВР.Номенклатура
	|			И ТаблицаНоменклатураХарактеристики.Характеристика = АктВР.Характеристика
	|			И (АктВР.Ссылка.Проведен)
	|ГДЕ
	|	НЕ АктВР.Номенклатура ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	АктВР.Номенклатура,
	|	АктВР.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктВР.Номенклатура КАК Номенклатура,
	|	АктВР.Характеристика КАК Характеристика,
	|	АктВР.Период КАК Период,
	|	ЦеныИзАктовВР.Цена КАК Цена,
	|	ЦеныИзАктовВР.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЦеныИзАктовВР.Ссылка.Курс КАК Курс,
	|	ЦеныИзАктовВР.Ссылка.Кратность КАК Кратность
	|ПОМЕСТИТЬ НоменклатураАктовСПериодамиИЦенами
	|ИЗ
	|	НоменклатураАктаСПериодами КАК АктВР
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктВыполненныхРабот.РаботыИУслуги КАК ЦеныИзАктовВР
	|		ПО АктВР.Период = ЦеныИзАктовВР.Ссылка.Дата
	|			И АктВР.Номенклатура = ЦеныИзАктовВР.Номенклатура
	|			И АктВР.Характеристика = ЦеныИзАктовВР.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РН.Номенклатура КАК Номенклатура,
	|	РН.Характеристика КАК Характеристика,
	|	РН.Период КАК Период,
	|	РН.Цена КАК Цена,
	|	РН.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РН.Курс КАК Курс,
	|	РН.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВсяНоменклатура
	|ИЗ
	|	НоменклатураРасходныхНакладныхСПериодамиИЦенами КАК РН
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктВР.Номенклатура,
	|	АктВР.Характеристика,
	|	АктВР.Период,
	|	АктВР.Цена,
	|	АктВР.ЕдиницаИзмерения,
	|	АктВР.Курс,
	|	АктВР.Кратность
	|ИЗ
	|	НоменклатураАктовСПериодамиИЦенами КАК АктВР
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсяНоменклатура.Номенклатура КАК Номенклатура,
	|	ВсяНоменклатура.Характеристика КАК Характеристика,
	|	МАКСИМУМ(ВсяНоменклатура.Период) КАК Период,
	|	ВсяНоменклатура.Цена КАК Значение,
	|	ВсяНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВсяНоменклатура.Курс КАК Курс,
	|	ВсяНоменклатура.Кратность КАК Кратность,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) КАК ВидЦен
	|ИЗ
	|	ВсяНоменклатура КАК ВсяНоменклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсяНоменклатура.Номенклатура,
	|	ВсяНоменклатура.Характеристика,
	|	ВсяНоменклатура.Цена,
	|	ВсяНоменклатура.ЕдиницаИзмерения,
	|	ВсяНоменклатура.Курс,
	|	ВсяНоменклатура.Кратность";
	
	ТаблицаСЦенамиРеализации = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура ПолучитьТаблицуСебестоимости(ТаблицаССебестоимостью)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапасыОстаткиИОбороты.Номенклатура КАК Номенклатура,
	|	ЗапасыОстаткиИОбороты.Характеристика КАК Характеристика,
	|	ЗапасыОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
	|	ЗапасыОстаткиИОбороты.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) КАК ВидЦен,
	|	ВЫБОР
	|		КОГДА ЗапасыОстаткиИОбороты.СуммаКонечныйОстаток = 0
	|				ИЛИ ЗапасыОстаткиИОбороты.КоличествоКонечныйОстаток = 0
	|				ИЛИ ЗапасыОстаткиИОбороты.КоличествоКонечныйОстаток ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ЗапасыОстаткиИОбороты.СуммаКонечныйОстаток / ЗапасыОстаткиИОбороты.КоличествоКонечныйОстаток
	|	КОНЕЦ КАК Значение,
	|	ЗапасыОстаткиИОбороты.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	РегистрНакопления.Запасы.ОстаткиИОбороты(, , Авто, , СчетУчета.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.Запасы)) КАК ЗапасыОстаткиИОбороты");
	
	ТаблицаССебестоимостью = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура ПолучитьТаблицуЦенОперандовФормулы(ПараметрыРасчета, ТаблицаОперандов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаФормыНоменклатуры",	ПараметрыРасчета.КоллекцииДанныхФормы.ТаблицаФормыНоменклатуры);
	Запрос.УстановитьПараметр("ТаблицаФормыХарактеристик", ПараметрыРасчета.КоллекцииДанныхФормы.ТаблицаФормыХарактеристик);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаФормыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаНоменклатура
	|ИЗ
	|	&ТаблицаФормыНоменклатуры КАК ТаблицаФормыНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаФормыХарактеристик.Номенклатура КАК Номенклатура,
	|	ТаблицаФормыХарактеристик.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаХарактеристики
	|ИЗ
	|	&ТаблицаФормыХарактеристик КАК ТаблицаФормыХарактеристик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатура.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатура.Характеристика КАК Характеристика,
	|	ИСТИНА КАК ТребуетсяНовыйРасчет
	|ИЗ
	|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаХарактеристики.Номенклатура,
	|	ТаблицаХарактеристики.Характеристика,
	|	ИСТИНА
	|ИЗ
	|	ТаблицаХарактеристики КАК ТаблицаХарактеристики";
	
	ТаблицаНоменклатураИХарактеристики = Запрос.Выполнить().Выгрузить();
	
	ЦенообразованиеСервер.ЗначенияЦенВТаблицуОперандов(НачалоДня(ТекущаяДатаСеанса()), ТаблицаОперандов, ТаблицаНоменклатураИХарактеристики);
	
	ТаблицаНоменклатураИХарактеристики = Неопределено;
	
КонецПроцедуры

Процедура ПодготовитьОперандыИДанные(ПараметрыРасчета, ТаблицаОперандов) Экспорт
	Перем ПодготовленнаяТаблицаДанных;
	
	Формула = ПараметрыРасчета.Формула;
	
	Если ПараметрыРасчета.Свойство("ПериодРасчета") Тогда
		
		ПериодРасчета = НачалоДня(?(ЗначениеЗаполнено(ПараметрыРасчета.ПериодРасчета), ПараметрыРасчета.ПериодРасчета, ТекущаяДатаСеанса()));
		
	КонецЕсли;
	
	ТаблицаОперандов = ЦенообразованиеФормулыСервер.ПолучитьТаблицуОперандовФормулы(ПериодРасчета, Формула);
	ТаблицаОперандов.Колонки.Добавить("Значение");
	
	СтрокаТаблицы = ТаблицаОперандов.Найти("[ПоследняяЦенаВПриходе]", "Операнд");
	Если СтрокаТаблицы <> Неопределено Тогда
		
		ПолучитьТаблицуПоследнихЦенПоступлений(ПараметрыРасчета, ПодготовленнаяТаблицаДанных);
		СтрокаТаблицы.Значение = ПодготовленнаяТаблицаДанных;
		
	КонецЕсли;
	
	СтрокаТаблицы = ТаблицаОперандов.Найти("[ПоследняяЦенаВРасходе]", "Операнд");
	Если СтрокаТаблицы <> Неопределено Тогда
		
		ПолучитьТаблицуПоследнихЦенРеализаций(ПараметрыРасчета, ПодготовленнаяТаблицаДанных);
		СтрокаТаблицы.Значение = ПодготовленнаяТаблицаДанных;
		
	КонецЕсли;
	
	СтрокаТаблицыСебестоимость 			= ТаблицаОперандов.Найти("[Себестоимость]", "Операнд");
	СтрокаТаблицыСебестоимостьНацВалюта = ТаблицаОперандов.Найти("[СебестоимостьНацВалюта]", "Операнд");
	Если СтрокаТаблицыСебестоимость <> Неопределено 
		ИЛИ СтрокаТаблицыСебестоимостьНацВалюта <> Неопределено Тогда
		
		ПолучитьТаблицуСебестоимости(ПодготовленнаяТаблицаДанных);
		Если СтрокаТаблицыСебестоимость <> Неопределено Тогда
			
			СтрокаТаблицыСебестоимость.Значение = ПодготовленнаяТаблицаДанных;
			
		КонецЕсли;
		
		Если СтрокаТаблицыСебестоимостьНацВалюта <> Неопределено Тогда
			
			СтрокаТаблицыСебестоимостьНацВалюта.Значение = ПодготовленнаяТаблицаДанных;
			
			КурсВалютыУчета			= РаботаСКурсамиВалют.ПолучитьКурсВалюты(Константы.ВалютаУчета.Получить(), ПериодРасчета);
			
			НоваяСтрока				= ТаблицаОперандов.Добавить();
			НоваяСтрока.Операнд		= "[КурсВалютыУчета]";
			НоваяСтрока.Значение	= КурсВалютыУчета.Курс / КурсВалютыУчета.Кратность;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаТаблицы = ТаблицаОперандов.Найти("[КурсДоллара]", "Операнд");
	Если СтрокаТаблицы <> Неопределено Тогда
		
		ДанныеКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Справочники.Валюты.НайтиПоКоду("840"), ПериодРасчета);
		СтрокаТаблицы.Значение = ДанныеКурса.Курс / ДанныеКурса.Кратность;
		
	КонецЕсли;
		
	СтрокаТаблицы = ТаблицаОперандов.Найти("[КурсЕвро]", "Операнд");
	Если СтрокаТаблицы <> Неопределено Тогда
		
		ДанныеКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Справочники.Валюты.НайтиПоКоду("978"), ПериодРасчета);
		СтрокаТаблицы.Значение = ДанныеКурса.Курс / ДанныеКурса.Кратность;
		
	КонецЕсли;
	
	МассивЦеныНоменклатуры = ТаблицаОперандов.НайтиСтроки(Новый Структура("ЭтоЦеныНоменклатуры", Истина));
	МассивЦеныКонтрагентов = ТаблицаОперандов.НайтиСтроки(Новый Структура("ЭтоЦеныНоменклатуры", Ложь));
	Если МассивЦеныНоменклатуры.Количество() > 0
		ИЛИ МассивЦеныКонтрагентов.Количество() > 0 Тогда
		
		ПолучитьТаблицуЦенОперандовФормулы(ПараметрыРасчета, ТаблицаОперандов);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СлияниеДанныхВОбщуюТаблицуЗначений(ПараметрыРасчета, КоллекцияНоменклатуры, ВидЦен)
	
	КоллекцияНоменклатуры = Новый ТаблицаЗначений;
	КоллекцияНоменклатуры.Колонки.Добавить("КлючСвязиНоменклатура",		Новый ОписаниеТипов("Число"));
	КоллекцияНоменклатуры.Колонки.Добавить("КлючСвязиХарактеристика",	Новый ОписаниеТипов("Число"));
	КоллекцияНоменклатуры.Колонки.Добавить("Период", 					Новый ОписаниеТипов("Дата"));
	КоллекцияНоменклатуры.Колонки.Добавить("ВидЦен", 					Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	КоллекцияНоменклатуры.Колонки.Добавить("Номенклатура",				Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	КоллекцияНоменклатуры.Колонки.Добавить("Характеристика",			Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КоллекцияНоменклатуры.Колонки.Добавить("Цена",						Новый ОписаниеТипов("Число"));
	КоллекцияНоменклатуры.Колонки.Добавить("ЕдиницаИзмерения",			Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения, СправочникСсылка.КлассификаторЕдиницИзмерения"));
	КоллекцияНоменклатуры.Колонки.Добавить("ТекущееЗначение",			Новый ОписаниеТипов("Число"));
	КоллекцияНоменклатуры.Колонки.Добавить("Актуальность",				Новый ОписаниеТипов("Булево"));
	КоллекцияНоменклатуры.Колонки.Добавить("ВключаяХарактеристики",		Новый ОписаниеТипов("Булево"));
	КоллекцияНоменклатуры.Колонки.Добавить("Автор",						Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	КоллекцияНоменклатуры.Колонки.Добавить("Формула",					Новый ОписаниеТипов("Строка"));
	КоллекцияНоменклатуры.Колонки.Добавить("ПересчетВыполнен",			Новый ОписаниеТипов("Булево"));
	КоллекцияНоменклатуры.Колонки.Добавить("Рассчитывать",				Новый ОписаниеТипов("Булево"));
	
	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ИдентификаторВидаЦен = "ТЧНоменклатура" + ВидЦен.ИдентификаторФормул;
	
	Для каждого СтрокаНоменклатуры Из ПараметрыРасчета.КоллекцииДанныхФормы.ТаблицаФормыНоменклатуры Цикл
		
		НоваяСтрока = КоллекцияНоменклатуры.Добавить();
		НоваяСтрока.КлючСвязиНоменклатура	= СтрокаНоменклатуры.КлючСвязи;
		НоваяСтрока.КлючСвязиХарактеристика	= -1;
		НоваяСтрока.Номенклатура			= СтрокаНоменклатуры.Номенклатура;
		НоваяСтрока.Характеристика			= ПустаяХарактеристика;
		НоваяСтрока.ВключаяХарактеристики	= ПараметрыРасчета.УстанавливатьХарактеристикамБезЦен;
		НоваяСтрока.ТекущееЗначение			= СтрокаНоменклатуры[ИдентификаторВидаЦен + "_ЦенаНовая"];
		НоваяСтрока.ЕдиницаИзмерения		= СтрокаНоменклатуры[ИдентификаторВидаЦен + "_ЕдИзм"];
		НоваяСтрока.ВидЦен 					= ВидЦен;
		Рассчитывать = ?(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаНоменклатуры, "Рассчитывать"), СтрокаНоменклатуры.Рассчитывать, Истина);
		Если Рассчитывать Тогда
			НоваяСтрока.Формула				= ПараметрыРасчета.Формула;
			НоваяСтрока.Рассчитывать 		= СтрокаНоменклатуры.Рассчитывать;
		Иначе
			НоваяСтрока.Формула 			= Формат(НоваяСтрока.ТекущееЗначение, "ЧРД=.; ЧГ=");
			НоваяСтрока.Рассчитывать 		= Ложь;
		КонецЕсли
		
	КонецЦикла;
	
	ИдентификаторВидаЦен = "ТЧХарактеристики" + ВидЦен.ИдентификаторФормул;
	
	Для каждого СтрокаХарактеристики Из ПараметрыРасчета.КоллекцииДанныхФормы.ТаблицаФормыХарактеристик Цикл
		
		НоваяСтрока = КоллекцияНоменклатуры.Добавить();
		НоваяСтрока.КлючСвязиНоменклатура	= -1;
		НоваяСтрока.КлючСвязиХарактеристика	= СтрокаХарактеристики.КлючСвязи;
		НоваяСтрока.Номенклатура			= СтрокаХарактеристики.Номенклатура;
		НоваяСтрока.Характеристика			= СтрокаХарактеристики.Характеристика;
		НоваяСтрока.ВключаяХарактеристики	= ПараметрыРасчета.УстанавливатьХарактеристикамБезЦен;
		НоваяСтрока.ТекущееЗначение			= СтрокаХарактеристики[ИдентификаторВидаЦен + "_ЦенаНовая"];
		НоваяСтрока.ЕдиницаИзмерения		= СтрокаХарактеристики[ИдентификаторВидаЦен + "_ЕдИзм"];
		НоваяСтрока.ВидЦен 					= ВидЦен;
		Рассчитывать = ?(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаХарактеристики,
			"Рассчитывать"), СтрокаХарактеристики.Рассчитывать, Истина);
		Если Рассчитывать Тогда
			НоваяСтрока.Формула				= ПараметрыРасчета.Формула;
			НоваяСтрока.Рассчитывать 		= СтрокаНоменклатуры.Рассчитывать;
		Иначе
			НоваяСтрока.Формула 			= Формат(НоваяСтрока.ТекущееЗначение, "ЧГ=");
			НоваяСтрока.Рассчитывать 		= Ложь;
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры

Процедура ПересчитанныеСтрокиВТаблицыДанных(ПараметрыРасчета, КоллекцияНоменклатуры, ВидЦен)
	
	ИдентификаторВидаЦен = ВидЦен.ИдентификаторФормул;
	ПараметрыОтбора = Новый Структура;
	
	Для каждого СтрокаКоллекции Из КоллекцияНоменклатуры Цикл
		
		Если НЕ СтрокаКоллекции.Рассчитывать Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора.Очистить();
		Если СтрокаКоллекции.КлючСвязиХарактеристика < 0 Тогда
			
			Идентификатор = "ТЧНоменклатура" + ИдентификаторВидаЦен;
			ИмяТаблицы = "ТаблицаФормыНоменклатуры";
			ПараметрыОтбора.Вставить("КлючСвязи", СтрокаКоллекции.КлючСвязиНоменклатура);
			ПараметрыОтбора.Вставить("Номенклатура", СтрокаКоллекции.Номенклатура);
			
		Иначе
			
			Идентификатор = "ТЧХарактеристики" + ИдентификаторВидаЦен;
			ИмяТаблицы = "ТаблицаФормыХарактеристик";
			ПараметрыОтбора.Вставить("КлючСвязи", СтрокаКоллекции.КлючСвязиХарактеристика);
			ПараметрыОтбора.Вставить("Номенклатура", СтрокаКоллекции.Номенклатура);
			ПараметрыОтбора.Вставить("Характеристика", СтрокаКоллекции.Характеристика);
			
		КонецЕсли;
		
		НайденныеСтроки = ПараметрыРасчета.КоллекцииДанныхФормы[ИмяТаблицы].НайтиСтроки(ПараметрыОтбора);
		Для каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
			
			ИмяКолонкиДельта = Идентификатор + "_Дельта";
			ИмяКолонкиДельтаКартинка = Идентификатор + "_ДельтаКартинка";
			
			СтрокаТабличнойЧасти[Идентификатор + "_ЦенаНовая"] = СтрокаКоллекции.Цена;
			СтрокаТабличнойЧасти[Идентификатор + "_ЕдИзм"] = СтрокаКоллекции.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти[ИмяКолонкиДельта] = СтрокаТабличнойЧасти[Идентификатор + "_ЦенаНовая"] 
				- СтрокаТабличнойЧасти[Идентификатор + "_ЦенаДо"];
				
			Если СтрокаТабличнойЧасти[ИмяКолонкиДельта] > 0 Тогда
				СтрокаТабличнойЧасти[ИмяКолонкиДельтаКартинка] = 0;
			ИначеЕсли СтрокаТабличнойЧасти[ИмяКолонкиДельта] < 0 Тогда
				СтрокаТабличнойЧасти[ИмяКолонкиДельтаКартинка] = 1;
			Иначе
				СтрокаТабличнойЧасти[ИмяКолонкиДельтаКартинка] = -1;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьНовыеЦеныПоФормуле(ПараметрыРасчета) Экспорт
	Перем КоллекцияНоменклатуры, ТаблицаОперандов;
	
	ПараметрыРасчетаКоллекции = Новый Структура;
	ПараметрыРасчетаКоллекции.Вставить("ВидЦен");
	ПараметрыРасчетаКоллекции.Вставить("Курс");
	ПараметрыРасчетаКоллекции.Вставить("Кратность");
	ПараметрыРасчетаКоллекции.Вставить("КурсыВалютДокумента", ПараметрыРасчета.КурсыВалютДокумента);
	
	ПодготовитьОперандыИДанные(ПараметрыРасчета, ТаблицаОперандов);
	Для каждого ЭлементСоответствия Из ПараметрыРасчета.ВидыЦенКПересчету Цикл
		
		КоллекцияНоменклатуры = Неопределено;
		
		ПараметрыРасчетаКоллекции.ВидЦен = ЭлементСоответствия.Ключ;
		Если ЗначениеЗаполнено(ПараметрыРасчетаКоллекции.ВидЦен) Тогда
			
			КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПараметрыРасчетаКоллекции.ВидЦен.ВалютаЦены, ТекущаяДатаСеанса());
			ПараметрыРасчетаКоллекции.Курс = ?(ЗначениеЗаполнено(КурсВалюты.Курс), КурсВалюты.Курс, 1);
			ПараметрыРасчетаКоллекции.Кратность = ?(ЗначениеЗаполнено(КурсВалюты.Кратность), КурсВалюты.Кратность, 1);
			
		Иначе
			
			ПараметрыРасчетаКоллекции.Курс = 1;
			ПараметрыРасчетаКоллекции.Кратность = 1;
			
		КонецЕсли;
		
		СлияниеДанныхВОбщуюТаблицуЗначений(ПараметрыРасчета, КоллекцияНоменклатуры, ПараметрыРасчетаКоллекции.ВидЦен);
		ЦенообразованиеФормулыСервер.РассчитатьДанныеКоллекции(КоллекцияНоменклатуры, ТаблицаОперандов, ПараметрыРасчетаКоллекции, Истина, Истина);
		ПересчитанныеСтрокиВТаблицыДанных(ПараметрыРасчета, КоллекцияНоменклатуры, ПараметрыРасчетаКоллекции.ВидЦен);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьНовыеЦеныПоФормулеДлОперация(ПараметрыРасчета, ФоновоеЗаданиеАдресХранилища = "")
	
	РассчитатьНовыеЦеныПоФормуле(ПараметрыРасчета);
	ПоместитьВоВременноеХранилище(ПараметрыРасчета.КоллекцииДанныхФормы, ФоновоеЗаданиеАдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСТаблицамиЗначений

Процедура ДобавитьОбязательныеКолонкиПриРазбореДереваНоменклатуры(ТаблицаНоменклатуры, ТаблицаХарактеристик)
	
	Если ТаблицаНоменклатуры.Колонки.Найти("ЕдиницаИзмерения") = Неопределено Тогда
		
		ТаблицаНоменклатуры.Колонки.Добавить("ЕдиницаИзмерения",
			Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения, СправочникСсылка.КлассификаторЕдиницИзмерения"));
		
	КонецЕсли;
	
	Если ТаблицаНоменклатуры.Колонки.Найти("Валюта") = Неопределено Тогда
		
		ТаблицаНоменклатуры.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		
	КонецЕсли;
	
	Если ТаблицаНоменклатуры.Колонки.Найти("ЦенаНоваяШаблон") = Неопределено Тогда
		
		ТаблицаНоменклатуры.Колонки.Добавить("ЦенаНоваяШаблон", Новый ОписаниеТипов("Число"));
		
	КонецЕсли;
	
	Если ТаблицаНоменклатуры.Колонки.Найти("Характеристика") = Неопределено Тогда
		
		ТаблицаНоменклатуры.Колонки.Добавить("Характеристика",
			Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		
	КонецЕсли;
	
	Если ТаблицаНоменклатуры.Колонки.Найти("ПроверятьЗаполнениеХарактеристики") = Неопределено Тогда
		
		ТаблицаНоменклатуры.Колонки.Добавить("ПроверятьЗаполнениеХарактеристики", Новый ОписаниеТипов("Булево"));
		
	КонецЕсли;
	
	Если ТаблицаНоменклатуры.Колонки.Найти("Лупа") = Неопределено Тогда
		
		ТаблицаНоменклатуры.Колонки.Добавить("Лупа", Новый ОписаниеТипов("Число"));
		
	КонецЕсли;
	
	Если ТаблицаХарактеристик.Колонки.Найти("Лупа") = Неопределено Тогда
		
		ТаблицаХарактеристик.Колонки.Добавить("Лупа", Новый ОписаниеТипов("Число"));
		
	КонецЕсли;
	
	Если ТаблицаХарактеристик.Колонки.Найти("Валюта") = Неопределено Тогда
		
		ТаблицаХарактеристик.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		
	КонецЕсли;
	
	Если ТаблицаХарактеристик.Колонки.Найти("ЕдиницаИзмерения") = Неопределено Тогда
		
		ТаблицаХарактеристик.Колонки.Добавить("ЕдиницаИзмерения",
			Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения, СправочникСсылка.КлассификаторЕдиницИзмерения"));
		
	КонецЕсли;
	
	Если ТаблицаХарактеристик.Колонки.Найти("ЦенаНоваяШаблон") = Неопределено Тогда
		
		ТаблицаХарактеристик.Колонки.Добавить("ЦенаНоваяШаблон", Новый ОписаниеТипов("Число"));
		
	КонецЕсли;
	
	Если ТаблицаХарактеристик.Колонки.Найти("Характеристика") = Неопределено Тогда
		
		ТаблицаХарактеристик.Колонки.Добавить("Характеристика",
			Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		
	КонецЕсли;
	
	Если ТаблицаХарактеристик.Колонки.Найти("ХарактеристикаНедействителен") = Неопределено Тогда
		
		ТаблицаХарактеристик.Колонки.Добавить("ХарактеристикаНедействителен", Новый ОписаниеТипов("Булево"));
		
	КонецЕсли;
	
	Если ТаблицаХарактеристик.Колонки.Найти("ПроверятьЗаполнениеХарактеристики") = Неопределено Тогда
		
		ТаблицаХарактеристик.Колонки.Добавить("ПроверятьЗаполнениеХарактеристики", Новый ОписаниеТипов("Булево"));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТаблицуРасчетныхЦенРасширения(Знач ТаблицаЦен, Знач ВыбранныеВидыЦен)
	
	ТаблицаНоменклатуры = ТаблицаЦен.Скопировать();
	КопияТаблицыНоменклатуры = ТаблицаНоменклатуры.Скопировать();
	
	Если ТаблицаНоменклатуры.Колонки.Найти("ВидЦены") = Неопределено
		И ТаблицаНоменклатуры.Колонки.Найти("ВидЦен") <> Неопределено Тогда
		ТаблицаНоменклатуры.Колонки.ВидЦен.Имя = "ВидЦены";
	КонецЕсли;	
	
	Если ТаблицаНоменклатуры.Колонки.Найти("ВидЦены") = Неопределено Тогда
		ТаблицаНоменклатуры.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	КонецЕсли;

	Если ТаблицаНоменклатуры.Колонки.Найти("ЦенаСтарая") = Неопределено Тогда
		ТаблицаНоменклатуры.Колонки.Добавить("ЦенаСтарая", Новый ОписаниеТипов("Число"));
	КонецЕсли;
		
	ТаблицаНоменклатуры.Колонки.ЦенаНоваяШаблон.Имя = "Цена";
	ОбщаяТаблицаНоменклатуры = ТаблицаНоменклатуры.СкопироватьКолонки();
	ЕстьДанныеРасчета = Ложь;
	
	Для каждого ЭлементВидовЦен Из ВыбранныеВидыЦен Цикл
	
		Если ЭлементВидовЦен.Ключ.ТипВидаЦен <> Перечисления.ТипыВидовЦен.Расширение Тогда
			Продолжить;
		КонецЕсли;
		
		КопияТаблицыНоменклатуры = ТаблицаНоменклатуры.Скопировать();
		ПараметрыПодключаемойПроцедуры = Новый Массив;
		ПараметрыПодключаемойПроцедуры.Добавить(КопияТаблицыНоменклатуры);
		
		ИмяПроцедуры = СтрШаблон("ПодключаемыеПроцедуры.РассчитатьЦены_%1", ЭлементВидовЦен.Ключ.ИдентификаторДляРасчетаВРасширении);
		
		Попытка
			
			ОбщегоНазначения.ВыполнитьМетодКонфигурации(ИмяПроцедуры, ПараметрыПодключаемойПроцедуры);
			
		Исключение
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Процедура расчета цены %1 не найдена. Проверьте подключено ли расширение.'"), ИмяПроцедуры);
			
			ЗаписьЖурналаРегистрации(НСтр("ru='ПолучитьТаблицуРасчетныхЦенРасширение'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.ОбщиеМодули.ПодключаемыеПроцедуры,,
				ТекстОшибки);
				
			Продолжить;
			
		КонецПопытки;
		
		Если НЕ ЕстьДанныеРасчета Тогда
			ЕстьДанныеРасчета = КопияТаблицыНоменклатуры.Количество()>0;
		КонецЕсли;
		
		КопияТаблицыНоменклатуры.ЗаполнитьЗначения(ЭлементВидовЦен.Ключ, "ВидЦены");
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(КопияТаблицыНоменклатуры, ОбщаяТаблицаНоменклатуры);
	
	КонецЦикла;
	
	Если ЕстьДанныеРасчета Тогда
		
		Возврат ОбщаяТаблицаНоменклатуры;
		
	Иначе
		
		Возврат ТаблицаНоменклатуры;
		
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьЦеныСКДПоДаннымИБ(Знач ПараметрыВидовЦенСКД, Знач ПоказыватьНедействительныеХарактеристики,
	Знач СтруктураПараметров, Знач ТаблицаНоменклатуры, Знач УстанавливатьХарактеристикамБезЦен)
	
	АдресХранилища = РазобратьМассивНоменклатурыИХарактеристикПоДокументу(ТаблицаНоменклатуры,
		УстанавливатьХарактеристикамБезЦен, ПоказыватьНедействительныеХарактеристики);
	
	СтруктураЦен = ПолучитьИзВременногоХранилища(АдресХранилища);
	ТаблицаРасчетныхЦенНоменклатуры = ПолучитьТаблицуРасчетныхЦенСКД(СтруктураЦен.ТаблицаНоменклатуры, ПараметрыВидовЦенСКД);
	ТаблицаРасчетныхЦенХарактеристик = ПолучитьТаблицуРасчетныхЦенСКД(СтруктураЦен.ТаблицаХарактеристик, ПараметрыВидовЦенСКД);
	
	УстановитьЦеныВТаблицыФормыПослеРасчета(СтруктураПараметров, СтруктураЦен, 
		ТаблицаРасчетныхЦенНоменклатуры, ТаблицаРасчетныхЦенХарактеристик, 
		Перечисления.ТипыВидовЦен.ПроизвольныйЗапрос);

КонецПроцедуры

Процедура ЗаполнитьБазовыеЦены(ТабличнаяЧасть, СтруктураПараметров, ВключаяХарактеристики)
	
	НовыеВидыЦен = СтруктураПараметров.КэшЗначений.НовыеВидыЦен;
	Период = СтруктураПараметров.Период;
	СтатическиеВидыЦен = Новый Массив;
	СКДВидыЦен = Новый Массив;
	РасширенияВидыЦен = Новый Массив;
	Для каждого НовыйВидЦены Из НовыеВидыЦен Цикл
	
		Если НовыйВидЦены.ТипВидаЦен = Перечисления.ТипыВидовЦен.Статический Тогда
			
			СтатическиеВидыЦен.Добавить(НовыйВидЦены);
			
		ИначеЕсли НовыйВидЦены.ТипВидаЦен = Перечисления.ТипыВидовЦен.ПроизвольныйЗапрос Тогда
			
			СКДВидыЦен.Добавить(НовыйВидЦены);
			
		ИначеЕсли НовыйВидЦены.ТипВидаЦен = Перечисления.ТипыВидовЦен.Расширение Тогда
			
			РасширенияВидыЦен.Добавить(НовыйВидЦены);
			
		КонецЕсли;
	
	КонецЦикла;
	
	Если СтатическиеВидыЦен.Количество() <> 0 Тогда
		
		ЗаполнитьСтатическиеЦены(ТабличнаяЧасть, СтатическиеВидыЦен, Период, ВключаяХарактеристики);
		
	КонецЕсли; 
	
	Если СКДВидыЦен.Количество() <> 0 Тогда
		
		ЗаполнитьСКДЦены(ТабличнаяЧасть, СКДВидыЦен, СтруктураПараметров);
		
	КонецЕсли;
	
	Если РасширенияВидыЦен.Количество() <> 0 Тогда
		
		ЗаполнитьРасширенияЦены(ТабличнаяЧасть, РасширенияВидыЦен, СтруктураПараметров);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьСКДЦены(ТабличнаяЧасть, СКДВидыЦен, СтруктураПараметров)
	
	ЗаполнитьЦеныСКДПоДаннымИБ(
		СтруктураПараметров.ПараметрыВидовЦенСКД, 
		СтруктураПараметров.ПоказыватьНедействительныеХарактеристики, 
		СтруктураПараметров, 
		СтруктураПараметров.ТаблицаНоменклатуры, 
		СтруктураПараметров.УстанавливатьХарактеристикамБезЦен);
	
КонецПроцедуры
	
Процедура ЗаполнитьРасширенияЦены(ТабличнаяЧать, РасширенияВидыЦен, СтруктураПараметров)
	
	ЗаполнитьЦеныРасширенийПоДаннымИБ(
		СтруктураПараметров.ПоказыватьНедействительныеХарактеристики,
		СтруктураПараметров,
		СтруктураПараметров.ТаблицаНоменклатуры, 
		СтруктураПараметров.УстанавливатьХарактеристикамБезЦен);
	
КонецПроцедуры
	
Процедура ЗаполнитьСтатическиеЦены(ТабличнаяЧасть, МассивВидовЦен, Период, ВключаяХарактеристики)
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таблица.Номенклатура КАК Номенклатура,
	               |	&Характеристика КАК Характеристика
	               |ПОМЕСТИТЬ Таблица
	               |ИЗ
	               |	&Таблица КАК Таблица
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	               |	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	               |	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦен,
	               |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	               |	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ЦеныНоменклатурыСрезПоследних.ВидЦен.ИдентификаторФормул КАК ИдентификаторФормул
	               |ИЗ
	               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	               |			&Период,
	               |			(Номенклатура, Характеристика) В
	               |					(ВЫБРАТЬ
	               |						Таблица.Номенклатура,
	               |						Таблица.Характеристика
	               |					ИЗ
	               |						Таблица)
	               |				И ВидЦен В (&ВидыЦен)) КАК ЦеныНоменклатурыСрезПоследних";
	
	Если ВключаяХарактеристики Тогда
	
		ПоляПоиска = "Номенклатура, Характеристика";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Характеристика", "Таблица.Характеристика");
		ИмяТабличнойЧасти = "ТЧХарактеристики";
		
	Иначе
		
		ПоляПоиска = "Номенклатура";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Характеристика", "ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)");
		ИмяТабличнойЧасти = "ТЧНоменклатура";
	
	КонецЕсли; 
	
	Таблица = ТабличнаяЧасть.Скопировать(,ПоляПоиска);
	Таблица.Свернуть(ПоляПоиска);
		
	
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Запрос.УстановитьПараметр("ВидыЦен", МассивВидовЦен);
	Запрос.УстановитьПараметр("Период", Период);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Для каждого ВидЦены Из МассивВидовЦен Цикл
			
			Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
				
				ИмяПоля = СтрШаблон("%1%2_ЕдИзм", ИмяТабличнойЧасти, ВидЦены.ИдентификаторФормул);
				СтрокаТабличнойЧасти[ИмяПоля] = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаИзмерения;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
	
		ТаблицаЦен = РезультатЗапроса.Выгрузить();
		Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		
			Отбор = Новый Структура(ПоляПоиска);
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаТабличнойЧасти);
			Строки = ТаблицаЦен.НайтиСтроки(Отбор);
			
			Если Строки.Количество() = 0 Тогда
				
				Для каждого ВидЦены Из МассивВидовЦен Цикл
				
					ИмяПоля = СтрШаблон("%1%2_ЕдИзм", ИмяТабличнойЧасти, ВидЦены.ИдентификаторФормул);
					СтрокаТабличнойЧасти[ИмяПоля] = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаИзмерения;
				
				КонецЦикла;
				
			Иначе
				
				Для каждого СтрокаЦен Из Строки Цикл
					
					ИмяПоля = СтрШаблон("%1%2_ЦенаДо", ИмяТабличнойЧасти, СтрокаЦен.ИдентификаторФормул);
					СтрокаТабличнойЧасти[ИмяПоля] = СтрокаЦен.Цена;
					ИмяПоля = СтрШаблон("%1%2_ЦенаНовая", ИмяТабличнойЧасти, СтрокаЦен.ИдентификаторФормул);
					СтрокаТабличнойЧасти[ИмяПоля] = СтрокаЦен.Цена;
					ИмяПоля = СтрШаблон("%1%2_ЕдИзм", ИмяТабличнойЧасти, СтрокаЦен.ИдентификаторФормул);
					СтрокаТабличнойЧасти[ИмяПоля] = СтрокаЦен.ЕдиницаИзмерения;
					Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти[ИмяПоля]) Тогда
						СтрокаТабличнойЧасти[ИмяПоля] = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаИзмерения;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры
	
Процедура ПересчитатьРасчетныеВидыЦенВТаблицахДокумента(СтруктураПараметров)
	
	ЗаполнитьРасчетныеЦеныПоБазовым(СтруктураПараметров.ТЧНоменклатура, СтруктураПараметров.ВыбранныеВидыЦен,
		"ТЧНоменклатура", СтруктураПараметров.ДополнительныеПараметры);
	ЗаполнитьРасчетныеЦеныПоБазовым(СтруктураПараметров.ТЧХарактеристики, СтруктураПараметров.ВыбранныеВидыЦен,
		"ТЧХарактеристики", СтруктураПараметров.ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПоместитьСтрокуЦенВТабличнуюЧасть(ТабличнаяЧасть, МассивСтрокЦен, СтрокаНоменклатуры, СтрокиХарактеристик, НомерСтроки)
	
	ЕстьХарактеристики = СтрокиХарактеристик.Количество() > 0 И ЗначениеЗаполнено(СтрокиХарактеристик[0].Характеристика);

	Для Каждого ВидЦены Из МассивСтрокЦен Цикл
		Если ЕстьХарактеристики Тогда
			Для Каждого СтрокаХарактеристики Из СтрокиХарактеристик Цикл

				НоваяСтрока = ТабличнаяЧасть.Добавить();
				НоваяСтрока.Номенклатура = СтрокаНоменклатуры.Номенклатура;
				НоваяСтрока.Характеристика = СтрокаХарактеристики.Характеристика;
				НоваяСтрока.ВидЦены = ВидЦены;
				Если СтрокаХарактеристики.Свойство("ТЧХарактеристики" + ВидЦены.ИдентификаторФормул + "_ЕдИзм") Тогда

					НоваяСтрока.ЕдиницаИзмерения = СтрокаХарактеристики["ТЧХарактеристики" + ВидЦены.ИдентификаторФормул
						+ "_ЕдИзм"];

				Иначе

					НоваяСтрока.ЕдиницаИзмерения = СтрокаХарактеристики.ЕдиницаИзмеренияШаблон;

				КонецЕсли;

				Если СтрокаХарактеристики.Свойство("ТЧХарактеристики" + ВидЦены.ИдентификаторФормул + "_ЦенаНовая") Тогда

					НоваяСтрока.Цена = СтрокаХарактеристики["ТЧХарактеристики" + ВидЦены.ИдентификаторФормул
						+ "_ЦенаНовая"];

				КонецЕсли;

				Если СтрокаХарактеристики.Свойство("ТЧХарактеристики" + ВидЦены.ИдентификаторФормул + "_ЦенаДо") Тогда

					НоваяСтрока.ЦенаСтарая = СтрокаХарактеристики["ТЧХарактеристики" + ВидЦены.ИдентификаторФормул
						+ "_ЦенаДо"];

				КонецЕсли;
				
				Если СтрокаХарактеристики.Свойство("ТЧХарактеристики" + ВидЦены.ИдентификаторФормул + "_ВалютаДо") Тогда

					НоваяСтрока.ВалютаСтарая = СтрокаХарактеристики["ТЧХарактеристики" + ВидЦены.ИдентификаторФормул
						+ "_ВалютаДо"];

				КонецЕсли;

				Если СтрокаХарактеристики.Свойство("ТЧХарактеристики" + ВидЦены.ИдентификаторФормул + "_ВалютаНовая") Тогда

					НоваяСтрока.Валюта = СтрокаХарактеристики["ТЧХарактеристики" + ВидЦены.ИдентификаторФормул
						+ "_ВалютаНовая"];

				КонецЕсли;

			КонецЦикла;
		КонецЕсли;

		НоваяСтрока = ТабличнаяЧасть.Добавить();
		НоваяСтрока.Номенклатура = СтрокаНоменклатуры.Номенклатура;
		НоваяСтрока.ВидЦены = ВидЦены;
		НоваяСтрока.НомерСтроки = НомерСтроки;

		Если СтрокаНоменклатуры.Свойство("ТЧНоменклатура" + ВидЦены.ИдентификаторФормул + "_ЕдИзм") Тогда

			НоваяСтрока.ЕдиницаИзмерения = СтрокаНоменклатуры["ТЧНоменклатура" + ВидЦены.ИдентификаторФормул + "_ЕдИзм"];

		Иначе

			НоваяСтрока.ЕдиницаИзмерения = СтрокаНоменклатуры.ЕдиницаИзмеренияШаблон;

		КонецЕсли;

		Если СтрокаНоменклатуры.Свойство("ТЧНоменклатура" + ВидЦены.ИдентификаторФормул + "_ЦенаНовая") Тогда

			НоваяСтрока.Цена = СтрокаНоменклатуры["ТЧНоменклатура" + ВидЦены.ИдентификаторФормул + "_ЦенаНовая"];

		КонецЕсли;

		Если СтрокаНоменклатуры.Свойство("ТЧНоменклатура" + ВидЦены.ИдентификаторФормул + "_ЦенаДо") Тогда

			НоваяСтрока.ЦенаСтарая = СтрокаНоменклатуры["ТЧНоменклатура" + ВидЦены.ИдентификаторФормул + "_ЦенаДо"];

		КонецЕсли;
		
		Если СтрокаНоменклатуры.Свойство("ТЧНоменклатура" + ВидЦены.ИдентификаторФормул + "_ВалютаДо") Тогда

			НоваяСтрока.ВалютаСтарая = СтрокаНоменклатуры["ТЧНоменклатура" + ВидЦены.ИдентификаторФормул + "_ВалютаДо"];

		КонецЕсли;
		
		Если СтрокаНоменклатуры.Свойство("ТЧНоменклатура" + ВидЦены.ИдентификаторФормул + "_ВалютаНовая") Тогда

			НоваяСтрока.Валюта = СтрокаНоменклатуры["ТЧНоменклатура" + ВидЦены.ИдентификаторФормул + "_ВалютаНовая"];

		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРасчетныеЦеныПоБазовым(ТаблицаИсточникСЦеной, ВыбранныеВидыЦен, ИмяТабличнойЧасти,
	ДополнительныеПараметры)
	
	КурсыВалютДокумента = ДополнительныеПараметры.КурсыВалютДокумента;

	ТаблицаРасчета = ПолучитьПустуюТаблицуДляРасчетаЗависимыхЦен();

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НовыеВидыЦен", Новый Массив);
	СтруктураПараметров.Вставить("Период", ДополнительныеПараметры.Период);
	СтруктураПараметров.Вставить("КэшФормул", Новый Структура);

	ЗаполнитьТаблицуДляРасчетаЗависимыхПоТаблицеБазовых(ТаблицаРасчета, ВыбранныеВидыЦен, ИмяТабличнойЧасти,
		ТаблицаИсточникСЦеной, СтруктураПараметров);

	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ТаблицаРасчета", ТаблицаРасчета);
	ПараметрыРасчета.Вставить("Период", ДополнительныеПараметры.Период);
	ПараметрыРасчета.Вставить("ВключаяХарактеристики", ДополнительныеПараметры.ВключаяХарактеристики);
	ПараметрыРасчета.Вставить("Автор", ДополнительныеПараметры.Автор);
	ПараметрыРасчета.Вставить("КурсыВалютДокумента", КурсыВалютДокумента);

	ТаблицаРезультат = РассчитатьЗависимыеЦеныПоБазовой(ПараметрыРасчета);
	Для Каждого СтрокаРезультат Из ТаблицаРезультат Цикл

		ИдентификаторФормул = СтрокаРезультат.ВидЦенРасчетный.ИдентификаторФормул;

		ИдентификаторПоляЕдиницыИзмерения = СтрШаблон("%1%2_ЕдИзм", ИмяТабличнойЧасти, ИдентификаторФормул);
		ИдентификаторПоляЦенаНовая = СтрШаблон("%1%2_ЦенаНовая", ИмяТабличнойЧасти, ИдентификаторФормул);
		ИдентификаторПоляДельта = СтрШаблон("%1%2_Дельта", ИмяТабличнойЧасти, ИдентификаторФормул);
		ИдентификаторПоляДельтаКартинка = СтрШаблон("%1%2_ДельтаКартинка", ИмяТабличнойЧасти, ИдентификаторФормул);
		ИдентификаторПоляЦенаДо = СтрШаблон("%1%2_ЦенаДо", ИмяТабличнойЧасти, ИдентификаторФормул);

		СтрокаТаблицыИсточника = ТаблицаИсточникСЦеной[СтрокаРезультат.ИдентификаторСтроки];

		ПересчитыватьЦены = Истина;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДополнительныеПараметры, "ПересчитыватьЦены") Тогда
			ПересчитыватьЦены = ДополнительныеПараметры.ПересчитыватьЦены;
		КонецЕсли;

		Если ПересчитыватьЦены Тогда
		
			СтрокаТаблицыИсточника[ИдентификаторПоляЦенаНовая] = СтрокаРезультат.ЗначениеЦеныРасчетной;
		
		КонецЕсли;

		СтрокаТаблицыИсточника[ИдентификаторПоляДельта] = СтрокаТаблицыИсточника[ИдентификаторПоляЦенаНовая]
			- СтрокаТаблицыИсточника[ИдентификаторПоляЦенаДо];
			
		Если СтрокаТаблицыИсточника[ИдентификаторПоляДельта] > 0 Тогда
			СтрокаТаблицыИсточника[ИдентификаторПоляДельтаКартинка] = 0;
		ИначеЕсли СтрокаТаблицыИсточника[ИдентификаторПоляДельта] < 0 Тогда
			СтрокаТаблицыИсточника[ИдентификаторПоляДельтаКартинка] = 1;
		Иначе
			СтрокаТаблицыИсточника[ИдентификаторПоляДельтаКартинка] = -1;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицыИсточника[ИдентификаторПоляЕдиницыИзмерения]) Тогда

			СтрокаТаблицыИсточника[ИдентификаторПоляЕдиницыИзмерения] = СтрокаТаблицыИсточника.Номенклатура.ЕдиницаИзмерения;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьЗаписьВТаблицуДляРасчетаЗависимых(ТаблицаРасчета, Знач ВыбранныеВидыЦен, Знач ИмяТабличнойЧасти,
	Знач СтрокаТаблицыИсточника, Знач ТаблицаИсточникСЦеной, ПараметрыЗаполнения)

	ИдентификаторСтроки = ТаблицаИсточникСЦеной.Индекс(СтрокаТаблицыИсточника);
		
	РасчетныеВидыЦен = Новый ТаблицаЗначений;
	РасчетныеВидыЦен.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	РасчетныеВидыЦен.Колонки.Добавить("Приоритет", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	РасчетныеВидыЦен.Колонки.Добавить("ИндексВидаЦены", ОбщегоНазначения.ОписаниеТипаЧисло(10));

	ГлубинаВложенности = 1;
	
	ЗаполнитьТаблицуРасчетныхВидовЦенИзВыбранных(РасчетныеВидыЦен, ВыбранныеВидыЦен, ГлубинаВложенности);
	
	Для каждого СтрокаРасчетныйВидЦен Из РасчетныеВидыЦен Цикл
		
		ИдентификаторФормул = СтрокаРасчетныйВидЦен.ВидЦены.ИдентификаторФормул;
		
		ПрефиксПоля = ИмяТабличнойЧасти + ИдентификаторФормул;
		Если СтрокаТаблицыИсточника[ПрефиксПоля + "_ЦенуИзменили"] Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяЗапись = ТаблицаРасчета.Добавить();
		НоваяЗапись.ИндексВидаЦены = СтрокаРасчетныйВидЦен.ИндексВидаЦены;
		НоваяЗапись.Номенклатура = СтрокаТаблицыИсточника.Номенклатура;
		Если ИмяТабличнойЧасти = "ТЧХарактеристики" Тогда
			НоваяЗапись.Характеристика = СтрокаТаблицыИсточника.Характеристика;
		КонецЕсли;
		НоваяЗапись.ЕдиницаИзмерения = СтрокаТаблицыИсточника[ПрефиксПоля + "_ЕдИзм"];
		НоваяЗапись.ИдентификаторСтроки = ИдентификаторСтроки;
		НоваяЗапись.ВидЦенРасчетный = СтрокаРасчетныйВидЦен.ВидЦены;
		НоваяЗапись.ТипВидаЦен = СтрокаРасчетныйВидЦен.ВидЦены.ТипВидаЦен;
		НоваяЗапись.Приоритет = СтрокаРасчетныйВидЦен.Приоритет; 
		НоваяЗапись.ЗначениеЦеныСтарой = СтрокаТаблицыИсточника[ПрефиксПоля + "_ЦенаДо"];
		НоваяЗапись.ВалютаЦеныСтарой = СтрокаТаблицыИсточника[ПрефиксПоля + "_ВалютаДо"];
		НоваяЗапись.ВалютаЦеныРасчетной = СтрокаТаблицыИсточника[ПрефиксПоля + "_ВалютаНовая"];
		
		Если НЕ ЗначениеЗаполнено(НоваяЗапись.ВалютаЦеныРасчетной) Тогда
			НоваяЗапись.ВалютаЦеныРасчетной = СтрокаРасчетныйВидЦен.ВидЦены.ВалютаЦены;
			СтрокаТаблицыИсточника[ПрефиксПоля + "_ВалютаНовая"] = НоваяЗапись.ВалютаЦеныРасчетной; 
		КонецЕсли;
		
		Если ПараметрыЗаполнения.Свойство("ИдентификаторИсключение")
			И ПараметрыЗаполнения.ИдентификаторИсключение = ИдентификаторФормул 
			И СтрокаТаблицыИсточника[ПрефиксПоля + "_ЦенуИзменили"] Тогда
			
			НоваяЗапись.ЗначениеЦеныРасчетной = СтрокаТаблицыИсточника[ПрефиксПоля + "_ЦенаНовая"];
			
		КонецЕсли;
		
		СтруктураБазовыхЦен = Новый Структура;
		ЗаполнитьСтруктуруБазовыхЦенПоСтрокеФормы(СтруктураБазовыхЦен, СтрокаРасчетныйВидЦен.ВидЦены,
			ИмяТабличнойЧасти, СтрокаТаблицыИсточника, ПараметрыЗаполнения); 
		
		НоваяЗапись.СтруктураБазовыхЦен = СтруктураБазовыхЦен;
	
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьТаблицуЗапасовПоТабличнымЧастям(ТекущийОбъект, ТЧНоменклатура, ТЧХарактеристики, МассивВидовЦен) Экспорт
	
	ТабличнаяЧасть = ТекущийОбъект.Запасы.Выгрузить();
	ТабличнаяЧасть.Очистить();
	
	Если ТЧНоменклатура.Количество() <> 0 Тогда
		
		НомерСтроки = 1;
		Для Каждого ТекЭлементНоменклатура Из ТЧНоменклатура Цикл
			
			ТекХарактеристики = Новый Массив;
			Если ТекущийОбъект.ПоказыватьХарактеристики Тогда
				
				ТекХарактеристики = ТЧХарактеристики.НайтиСтроки(Новый Структура("КлючСвязи",ТекЭлементНоменклатура.КлючСвязи));  
				
			КонецЕсли;
			
			ПоместитьСтрокуЦенВТабличнуюЧасть(ТабличнаяЧасть, МассивВидовЦен, ТекЭлементНоменклатура, 
				ТекХарактеристики, НомерСтроки);
				
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
	Иначе
		
		КоличествоВидовЦен = МассивВидовЦен.Количество();
		Для Счетчик = 1 По КоличествоВидовЦен Цикл
		
			ПоместитьСтрокуЦенВТабличнуюЧасть(ТабличнаяЧасть, МассивВидовЦен,
				ТЧНоменклатура.Добавить(), ТЧХарактеристики, Счетчик);
		
		КонецЦикла;
		ТЧНоменклатура.Очистить();
		
	КонецЕсли;
	
	Возврат ТабличнаяЧасть;
	
КонецФункции

Процедура ЗаполнитьТаблицуРасчетныхВидовЦенИзВыбранных(ТаблицаРасчетныхЦен, Знач ВыбранныеВидыЦен, ГлубинаВложенности, ИндексВидаЦены = 0)
	
	Для каждого ВыбранныйВидЦен Из ВыбранныеВидыЦен Цикл
	
		Если ВыбранныйВидЦен.Ключ.ТипВидаЦен <> Перечисления.ТипыВидовЦен.Статический
			И ВыбранныйВидЦен.Ключ.ТипВидаЦен <> Перечисления.ТипыВидовЦен.ПроизвольныйЗапрос
			И ВыбранныйВидЦен.Ключ.ТипВидаЦен <> Перечисления.ТипыВидовЦен.Расширение Тогда
			
			НайденаСтрока = ТаблицаРасчетныхЦен.Найти(ВыбранныйВидЦен.Ключ);
			Если НайденаСтрока = Неопределено Тогда
			
				Запись = ТаблицаРасчетныхЦен.Добавить();
				Запись.ВидЦены = ВыбранныйВидЦен.Ключ;
				Запись.Приоритет = ГлубинаВложенности;
				Запись.ИндексВидаЦены = ИндексВидаЦены;
				ИндексВидаЦены = ИндексВидаЦены + 1;
				
			Иначе
				
				НайденаСтрока.Приоритет = Макс(ГлубинаВложенности, НайденаСтрока.Приоритет);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ГлубинаВложенности = ГлубинаВложенности + 1;
		ЗаполнитьТаблицуРасчетныхВидовЦенИзВыбранных(ТаблицаРасчетныхЦен, ВыбранныйВидЦен.Значение, ГлубинаВложенности, ИндексВидаЦены);
	
	КонецЦикла;
	
КонецПроцедуры

Функция СвернутьДанныеРасчетаСКДПоПериоду(ДанныеРасчета)

	ТаблицаРезультат = ДанныеРасчета.СкопироватьКолонки();
	
	МассивКлючей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДанныеРасчета.ВыгрузитьКолонку("КлючСвязи"));
	МассивХарактеристик = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДанныеРасчета.ВыгрузитьКолонку("Характеристика"));
	
	Для каждого Ключ Из МассивКлючей Цикл
		
		Для каждого Характеристика Из МассивХарактеристик Цикл
			
			Отбор = Новый Структура("КлючСвязи, Характеристика", Ключ, Характеристика);
			Строки = ДанныеРасчета.Скопировать(ДанныеРасчета.НайтиСтроки(Отбор));
			Строки.Сортировать("Период Убыв");
			Если Строки.Количество() > 0 Тогда
				
				ЗаполнитьЗначенияСвойств(ТаблицаРезультат.Добавить(), Строки[0]);	
				
			КонецЕсли;  
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ПолучитьЦеныПоВидамЦен(ПериодСреза, ВыбранныеВидыЦен, МассивНоменклатуры)
	
	МассивВидовЦен = Новый Массив;
	
	Для Каждого ВидЦены Из ВыбранныеВидыЦен Цикл
		МассивВидовЦен.Добавить(ВидЦены.Ключ);
		Для Каждого ПодчиненныйВидЦен Из ВидЦены.Значение Цикл
			МассивВидовЦен.Добавить(ПодчиненныйВидЦен.Ключ);
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодСреза", ПериодСреза);
	Запрос.УстановитьПараметр("МассивВидовЦен", МассивВидовЦен);
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Период КАК Период,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦен,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.Актуальность КАК Актуальность,
	|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЦеныНоменклатурыСрезПоследних.ВалютаЦены КАК ВалютаЦены,
	|	ЦеныНоменклатурыСрезПоследних.ВключаяХарактеристики КАК ВключаяХарактеристики,
	|	ЦеныНоменклатурыСрезПоследних.Автор КАК Автор,
	|	ЦеныНоменклатурыСрезПоследних.ДокументУстановки КАК ДокументУстановки
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ПериодСреза,
	|			Актуальность
	|				И ВидЦен В (&МассивВидовЦен)
	|				И Номенклатура В (&МассивНоменклатуры)) КАК ЦеныНоменклатурыСрезПоследних";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ДобавитьИЗаполнитьКолонкиТекущихЦен(ВыбранныеВидыЦен, ИмяТабличнойЧасти, ТаблицаИсточник,
	ТаблицаИсточникСЦеной, ТаблицаЦен, ПараметрыКопирования)
	
	ПодчиненныеВидыЦен = Новый Массив;
	
	Если ТаблицаЦен = Неопределено Тогда
		
		ТаблицаЦен = ПолучитьТаблицуРасчетныхЦенСКД(ТаблицаИсточник, ПараметрыКопирования.ПараметрыВидовЦенСКД);
		ТаблицаЦенРасширений = ПолучитьТаблицуРасчетныхЦенРасширения(ТаблицаИсточник,
			ПараметрыКопирования.ВыбранныеВидыЦен);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаЦенРасширений, ТаблицаЦен);
		
	КонецЕсли;

	ПериодСреза = ПараметрыКопирования.Период - 1;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыКопирования, "ЭтоНовый") Тогда
		
		Если ПараметрыКопирования.Период = НачалоДня(ТекущаяДатаСеанса()) Тогда
			ПериодСреза = ТекущаяДатаСеанса() - 1;
		КонецЕсли;
		
	КонецЕсли;
	
	МассивНоменклатуры = ТаблицаИсточник.ВыгрузитьКолонку("Номенклатура"); 
	
	ЦеныПоВыбраннымТипамЦен = ПолучитьЦеныПоВидамЦен(ПериодСреза, ВыбранныеВидыЦен, МассивНоменклатуры);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаИсточник"			, ТаблицаИсточник);
	Запрос.УстановитьПараметр("ТаблицаЦен"				, ТаблицаЦен);
	Запрос.УстановитьПараметр("ЦеныПоВыбраннымТипамЦен"	, ЦеныПоВыбраннымТипамЦен);
	Запрос.УстановитьПараметр("ПериодСреза"				, ПериодСреза);
	Запрос.УстановитьПараметр("ВалютаУчета"				, Константы.ВалютаУчета.Получить());
	
	Запрос.Текст = ТекстЗапросаКолонокТекущихЦен();

	// таблица документа
	ШаблонТекстаЗапросаВидЦен =
	"
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЦен КАК _ШаблонИмяТаблицыЗапроса
	|		ПО ТаблицаИсточник.Номенклатура = _ШаблонИмяТаблицыЗапроса.Номенклатура 	
	|		И _ШаблонИмяТаблицыЗапроса.ВидЦены  = &_ШаблонИмяВидаЦен";
	
	ШаблонТекстаЗапросаВидЦен = ШаблонТекстаЗапросаВидЦен 
		+ ?(ИмяТабличнойЧасти = "ТЧНоменклатура",
			"
			|	И _ШаблонИмяТаблицыЗапроса.Характеристика = Значение(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)",
			"		
			|	И ТаблицаИсточник.Характеристика = _ШаблонИмяТаблицыЗапроса.Характеристика");
			
	// таблица регистра
	ШаблонТекстаЗапросаВидЦенРегистр =
	"
	|	ЛЕВОЕ СОЕДИНЕНИЕ ЦеныПоВыбраннымТипамЦен КАК _ШаблонИмяТаблицыЗапросаРегистр
	|		По ТаблицаИсточник.Номенклатура = _ШаблонИмяТаблицыЗапросаРегистр.Номенклатура
	|		И _ШаблонИмяТаблицыЗапросаРегистр.ВидЦен  = &_ШаблонИмяВидаЦенРегистр
	|";

	ШаблонТекстаЗапросаВидЦенРегистр = ШаблонТекстаЗапросаВидЦенРегистр 
		+ ?(ИмяТабличнойЧасти = "ТЧНоменклатура",
			"		И _ШаблонИмяТаблицыЗапросаРегистр.Характеристика 
			|			= Значение(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)",
			"		И ТаблицаИсточник.Характеристика = _ШаблонИмяТаблицыЗапросаРегистр.Характеристика");
			
	ПолеТекущихЦен = "";
	ПолеЕдиницИзмерения = "";
	ПолеДельта = "";
	ПолеНовыхЦен = "";
	ПолеЦенуИзменили = "";
	ПолеНоваяВалюта = "";
	ПолеДельтаВалюта = "";
	ПолеТекущаяВалюта = "";
	ПолеВалютаВидимость = "";
	ПолеДельтаКартинка = "";
	
	ТаблицаИменКолонок = Новый ТаблицаЗначений;
	ОписаниеСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(100);
	ТаблицаИменКолонок.Колонки.Добавить("ВалютаДо", ОписаниеСтрока);
	ТаблицаИменКолонок.Колонки.Добавить("ВалютаНовая", ОписаниеСтрока);
	ТаблицаИменКолонок.Колонки.Добавить("ЦенаДо", ОписаниеСтрока);
	ТаблицаИменКолонок.Колонки.Добавить("ЦенаНовая", ОписаниеСтрока);
	ТаблицаИменКолонок.Колонки.Добавить("Дельта", ОписаниеСтрока);
	ТаблицаИменКолонок.Колонки.Добавить("ДельтаКартинка", ОписаниеСтрока);
	
	РазделительПолейЗапроса = "	//**************%1************" + Символы.ПС;
	
	Для каждого ЭлементСоответствия Из ВыбранныеВидыЦен Цикл
		
		НовыеИменаКолонок = ТаблицаИменКолонок.Добавить();
		
		ШаблонИмяТаблицыЗапроса = ЭлементСоответствия.Ключ.ИдентификаторФормул + "ТаблицаЗапроса";
		ИдентификаторФормул = ЭлементСоответствия.Ключ.ИдентификаторФормул;
		ШаблонИмяТаблицыЗапросаРегистр = ЭлементСоответствия.Ключ.ИдентификаторФормул + "Регистр";
		
		СтруктураОбщихПараметровПолей = Новый Структура;
		СтруктураОбщихПараметровПолей.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
		СтруктураОбщихПараметровПолей.Вставить("ИдентификаторФормул", ИдентификаторФормул);
		СтруктураОбщихПараметровПолей.Вставить("ШаблонИмяТаблицыЗапросаРегистр", ШаблонИмяТаблицыЗапросаРегистр);
		СтруктураОбщихПараметровПолей.Вставить("РазделительПолейЗапроса", РазделительПолейЗапроса);
		СтруктураОбщихПараметровПолей.Вставить("НовыеИменаКолонок", НовыеИменаКолонок);
		СтруктураОбщихПараметровПолей.Вставить("ШаблонИмяТаблицыЗапроса", ШаблонИмяТаблицыЗапроса);
		
		ТекстПоляЦенаДоОсновная(СтруктураОбщихПараметровПолей, ПолеТекущихЦен);

		ТекстПоляТекущаяВалютаОсновная(СтруктураОбщихПараметровПолей, ПолеТекущаяВалюта);

		ТекстПоляДельтаОсновная(СтруктураОбщихПараметровПолей, ПолеДельта);

		ТекстПоляДельтаВалютаОсновная(СтруктураОбщихПараметровПолей, ПолеДельтаВалюта);

		ТекстПоляНоваяЦенаОсновная(СтруктураОбщихПараметровПолей, ПолеНовыхЦен);

		ТекстПоляНоваяВалютаОсновная(СтруктураОбщихПараметровПолей, ПолеНоваяВалюта);

		ТекстПоляЕдиницаИзмеренияОсновная(СтруктураОбщихПараметровПолей, ПолеЕдиницИзмерения);

		ТекстПоляЦенуИзменилиОсновная(СтруктураОбщихПараметровПолей, ПолеЦенуИзменили);
		
		ТекстПоляВалютаВидимостьОсновная(СтруктураОбщихПараметровПолей, ПолеВалютаВидимость);
		
		ТекстПоляДельтаКартинкаОсновная(СтруктураОбщихПараметровПолей, ПолеДельтаКартинка);

		ТекстЗапросаЛевоеСоединение = СтрЗаменить(ШаблонТекстаЗапросаВидЦен, "_ШаблонИмяТаблицыЗапроса",
			ШаблонИмяТаблицыЗапроса);
		ТекстЗапросаЛевоеСоединение = СтрЗаменить(ТекстЗапросаЛевоеСоединение, "_ШаблонИмяВидаЦен",
			ШаблонИмяТаблицыЗапроса);

		ТекстЗапросаЛевоеСоединениеРегистр = СтрЗаменить(ШаблонТекстаЗапросаВидЦенРегистр,
			"_ШаблонИмяТаблицыЗапросаРегистр", ШаблонИмяТаблицыЗапросаРегистр);
		ТекстЗапросаЛевоеСоединениеРегистр = СтрЗаменить(ТекстЗапросаЛевоеСоединениеРегистр,
			"_ШаблонИмяВидаЦенРегистр", ШаблонИмяТаблицыЗапросаРегистр);
			
		ПолеВалютаВидимость = СтрЗаменить(ПолеВалютаВидимость, "_ШаблонИмяВидаЦен", ШаблонИмяТаблицыЗапроса);
		ПолеНоваяВалюта = СтрЗаменить(ПолеНоваяВалюта, "_ШаблонИмяВидаЦен", ШаблонИмяТаблицыЗапроса);

		Запрос.Текст = Запрос.Текст + ТекстЗапросаЛевоеСоединение + ТекстЗапросаЛевоеСоединениеРегистр;
		Запрос.УстановитьПараметр(ШаблонИмяТаблицыЗапроса, ЭлементСоответствия.Ключ);
		Запрос.УстановитьПараметр(ШаблонИмяТаблицыЗапросаРегистр, ЭлементСоответствия.Ключ);
		
		Для каждого ПодчиненныйВидЦен Из ЭлементСоответствия.Значение Цикл
			
			ПараметрыПроцедуры = Новый Структура;
			ПараметрыПроцедуры.Вставить("Запрос", Запрос);
			ПараметрыПроцедуры.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
			ПараметрыПроцедуры.Вставить("ПодчиненныеВидыЦен", ПодчиненныеВидыЦен);
			ПараметрыПроцедуры.Вставить("ПодчиненныйВидЦен", ПодчиненныйВидЦен);
			ПараметрыПроцедуры.Вставить("ШаблонТекстаЗапросаВидЦен", ШаблонТекстаЗапросаВидЦен);
			ПараметрыПроцедуры.Вставить("ШаблонТекстаЗапросаВидЦенРегистр", ШаблонТекстаЗапросаВидЦенРегистр);
			ПараметрыПроцедуры.Вставить("ПолеДельта", ПолеДельта);
			ПараметрыПроцедуры.Вставить("ПолеЕдиницИзмерения", ПолеЕдиницИзмерения);
			ПараметрыПроцедуры.Вставить("ПолеНовыхЦен", ПолеНовыхЦен);
			ПараметрыПроцедуры.Вставить("ПолеТекущихЦен", ПолеТекущихЦен);
			ПараметрыПроцедуры.Вставить("ПолеЦенуИзменили", ПолеЦенуИзменили);
			ПараметрыПроцедуры.Вставить("ПолеНоваяВалюта", ПолеНоваяВалюта);
			ПараметрыПроцедуры.Вставить("ПолеДельтаВалюта", ПолеДельтаВалюта);
			ПараметрыПроцедуры.Вставить("ПолеТекущаяВалюта", ПолеТекущаяВалюта);
			ПараметрыПроцедуры.Вставить("ПолеВалютаВидимость", ПолеВалютаВидимость);
			ПараметрыПроцедуры.Вставить("ПолеДельтаКартинка", ПолеДельтаКартинка);
			
			ДобавитьКолонкиПодчиненногоВидаЦенВТекстЗапроса(ПараметрыПроцедуры);
			
			ПолеДельта = ПараметрыПроцедуры.ПолеДельта;
			ПолеЕдиницИзмерения = ПараметрыПроцедуры.ПолеЕдиницИзмерения;
			ПолеНовыхЦен = ПараметрыПроцедуры.ПолеНовыхЦен;
			ПолеТекущихЦен = ПараметрыПроцедуры.ПолеТекущихЦен;
			ПолеЦенуИзменили = ПараметрыПроцедуры.ПолеЦенуИзменили;
			ПолеНоваяВалюта = ПараметрыПроцедуры.ПолеНоваяВалюта;
			ПолеДельтаВалюта = ПараметрыПроцедуры.ПолеДельтаВалюта;
			ПолеТекущаяВалюта = ПараметрыПроцедуры.ПолеТекущаяВалюта;
			ПолеВалютаВидимость = ПараметрыПроцедуры.ПолеВалютаВидимость;
			ПолеДельтаКартинка = ПараметрыПроцедуры.ПолеДельтаКартинка;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ПустаяСтрока(ПолеТекущихЦен) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеИменаКолонокТекущихЦен,", ПолеТекущихЦен);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеИменаКолонокЕдиницИзмерения,", ПолеЕдиницИзмерения);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеИменаКолонокНовыхЦен,", ПолеНовыхЦен);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеИменаКолонокЦенуИзменили,", ПолеЦенуИзменили);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеИменаКолонокВалюта,", ПолеНоваяВалюта);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеИменаКолонокТекущаяВалюта,", ПолеТекущаяВалюта);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеИменаКолонокДельтаВалюта,", ПолеДельтаВалюта);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеИменаКолонокДельтаКартинка", ПолеДельтаКартинка);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеИменаКолонокДельта,", ПолеДельта);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеИменаКолонокВидимостьВалюта,", ПолеВалютаВидимость);  
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КАК ХарактеристикаШтрихкод,", "КАК ХарактеристикаШтрихкод");

	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеИменаКолонокТекущихЦен", ПолеТекущихЦен);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеИменаКолонокЕдиницИзмерения", ПолеЕдиницИзмерения);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеИменаКолонокНовыхЦен", ПолеНовыхЦен);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеИменаКолонокЦенуИзменили", ПолеЦенуИзменили);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеИменаКолонокВалюта", ПолеНоваяВалюта);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеИменаКолонокТекущаяВалюта", ПолеТекущаяВалюта);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеИменаКолонокДельтаВалюта", ПолеДельтаВалюта);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеИменаКолонокДельтаКартинка", ПолеДельтаКартинка);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеИменаКолонокДельта", ПолеДельта);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеИменаКолонокВидимостьВалюта", ПолеВалютаВидимость);
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст 
		+ "
		|;
		|ВЫБРАТЬ * ИЗ ТаблицаДокумента КАК ТаблицаДокумента
		|";	
	
	Если ПараметрыКопирования.Сортировать Тогда
		Запрос.Текст = Запрос.Текст
			+ " УПОРЯДОЧИТЬ ПО ТаблицаДокумента.Номенклатура.Наименование, ТаблицаДокумента.Характеристика.Наименование";
	Иначе
		Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО ТаблицаДокумента.НомерСтроки";
	КонецЕсли;
		
	ТаблицаИсточникСЦеной = Запрос.Выполнить().Выгрузить();
	
	ЗаполнитьРасчетныеЦеныПоБазовым(ТаблицаИсточникСЦеной, ПараметрыКопирования.ВыбранныеВидыЦен, ИмяТабличнойЧасти,
		ПараметрыКопирования);
	
	ПересчитатьВалютнуюДельту(ТаблицаИсточникСЦеной, ПараметрыКопирования, ТаблицаИменКолонок);
	
КонецПроцедуры   

Процедура ТекстПоляЦенаДоОсновная(СтруктураОбщихПараметровПолей, ПолеТекущихЦен)
	
	ИмяТабличнойЧасти = СтруктураОбщихПараметровПолей.ИмяТабличнойЧасти;
	ИдентификаторФормул = СтруктураОбщихПараметровПолей.ИдентификаторФормул;
	ШаблонИмяТаблицыЗапросаРегистр = СтруктураОбщихПараметровПолей.ШаблонИмяТаблицыЗапросаРегистр;
	РазделительПолейЗапроса = СтруктураОбщихПараметровПолей.РазделительПолейЗапроса;
	НовыеИменаКолонок = СтруктураОбщихПараметровПолей.НовыеИменаКолонок;
	ШаблонИмяТаблицыЗапроса = СтруктураОбщихПараметровПолей.ШаблонИмяТаблицыЗапроса;
	
	ИмяПоляЦенаДо = ИмяТабличнойЧасти + ИдентификаторФормул + "_ЦенаДо";
	НовыеИменаКолонок.ЦенаДо = ИмяПоляЦенаДо;
	ПолеТекущихЦен = ПолеТекущихЦен
		+ ?(ПустаяСтрока(ПолеТекущихЦен), "", ", ") + Символы.ПС
		+ СтрШаблон(РазделительПолейЗапроса, "ЦенаДо")
		+"	ВЫБОР КОГДА ISNULL(" + ШаблонИмяТаблицыЗапроса + ".ЦенаСтарая, 0) = 0
		|		ТОГДА ISNULL(" + ШаблонИмяТаблицыЗапросаРегистр + ".Цена, 0) 
		|		ИНАЧЕ ISNULL(" + ШаблонИмяТаблицыЗапроса + ".ЦенаСтарая, 0) 
		|	КОНЕЦ КАК " + ИмяПоляЦенаДо;

КонецПроцедуры

Процедура ТекстПоляЦенаДоЗависимая(СтруктураОбщихПараметровПолей, ПолеТекущихЦен)
	
	ИмяТабличнойЧасти = СтруктураОбщихПараметровПолей.ИмяТабличнойЧасти;
	ШаблонИмяТаблицыЗапросаРегистр = СтруктураОбщихПараметровПолей.ШаблонИмяТаблицыЗапросаРегистр;
	ШаблонИмяТаблицыЗапроса = СтруктураОбщихПараметровПолей.ШаблонИмяТаблицыЗапроса;
	
	ИмяПоляЦенаДо = ИмяТабличнойЧасти + ШаблонИмяТаблицыЗапроса + "_ЦенаДо";
	ПолеТекущихЦен = ПолеТекущихЦен + ", "
	+ "
	|	ВЫБОР КОГДА ISNULL(" + ШаблонИмяТаблицыЗапроса + ".ЦенаСтарая, 0) = 0
	|		ТОГДА ISNULL(" + ШаблонИмяТаблицыЗапросаРегистр + ".Цена, 0) 
	|		ИНАЧЕ ISNULL(" + ШаблонИмяТаблицыЗапроса + ".ЦенаСтарая, 0) 
	|	КОНЕЦ КАК " + ИмяПоляЦенаДо;
	
КонецПроцедуры

Процедура ТекстПоляЕдиницаИзмеренияОсновная(СтруктураОбщихПараметровПолей, ПолеЕдиницИзмерения)
	
	ИмяТабличнойЧасти = СтруктураОбщихПараметровПолей.ИмяТабличнойЧасти;
	ИдентификаторФормул = СтруктураОбщихПараметровПолей.ИдентификаторФормул;
	РазделительПолейЗапроса = СтруктураОбщихПараметровПолей.РазделительПолейЗапроса;
	ШаблонИмяТаблицыЗапроса = СтруктураОбщихПараметровПолей.ШаблонИмяТаблицыЗапроса;
	
	ПолеЕдиницИзмерения = ПолеЕдиницИзмерения 
		+ ?(ПустаяСтрока(ПолеЕдиницИзмерения), "", ", ") + Символы.ПС
		+ СтрШаблон(РазделительПолейЗапроса, "ЕдиницаИзмерения")
		+ 	"	ВЫБОР КОГДА " + ШаблонИмяТаблицыЗапроса + ".ЕдиницаИзмерения IS NOT NULL 
			|		ТОГДА " + ШаблонИмяТаблицыЗапроса + ".ЕдиницаИзмерения
			|		ИНАЧЕ ISNULL(ТаблицаИсточник.ЕдиницаИзмерения, ТаблицаИсточник.Номенклатура.ЕдиницаИзмерения)
			|	КОНЕЦ КАК " + ИмяТабличнойЧасти + ИдентификаторФормул + "_ЕдИзм";
			
КонецПроцедуры

Процедура ТекстПоляЕдиницаИзмененияЗависимая(СтруктураОбщихПараметровПолей, ПолеЕдиницИзмерения)

	ИмяТабличнойЧасти = СтруктураОбщихПараметровПолей.ИмяТабличнойЧасти;
	ШаблонИмяТаблицыЗапроса = СтруктураОбщихПараметровПолей.ШаблонИмяТаблицыЗапроса;
	
	ПолеЕдиницИзмерения = ПолеЕдиницИзмерения + ", "
		+ 	"
		|	ВЫБОР КОГДА " + ШаблонИмяТаблицыЗапроса + ".ЕдиницаИзмерения IS NOT NULL 
		|		ТОГДА " + ШаблонИмяТаблицыЗапроса + ".ЕдиницаИзмерения
		|		ИНАЧЕ ISNULL(ТаблицаИсточник.ЕдиницаИзмерения, ТаблицаИсточник.Номенклатура.ЕдиницаИзмерения)
		|	КОНЕЦ КАК " + ИмяТабличнойЧасти + ШаблонИмяТаблицыЗапроса + "_ЕдИзм";
	
КонецПроцедуры

Процедура ТекстПоляДельтаОсновная(СтруктураОбщихПараметровПолей, ПолеДельта)
	
	ИмяТабличнойЧасти = СтруктураОбщихПараметровПолей.ИмяТабличнойЧасти;
	ИдентификаторФормул = СтруктураОбщихПараметровПолей.ИдентификаторФормул;
	ШаблонИмяТаблицыЗапросаРегистр = СтруктураОбщихПараметровПолей.ШаблонИмяТаблицыЗапросаРегистр;
	РазделительПолейЗапроса = СтруктураОбщихПараметровПолей.РазделительПолейЗапроса;
	НовыеИменаКолонок = СтруктураОбщихПараметровПолей.НовыеИменаКолонок;
	ШаблонИмяТаблицыЗапроса = СтруктураОбщихПараметровПолей.ШаблонИмяТаблицыЗапроса;
	
	ИмяПоляДельта = ИмяТабличнойЧасти + ИдентификаторФормул + "_Дельта";
		НовыеИменаКолонок.Дельта = ИмяПоляДельта;				
		ПолеДельта = ПолеДельта 
			+ ?(ПустаяСтрока(ПолеДельта), "", ", ") + Символы.ПС
			+ СтрШаблон(РазделительПолейЗапроса, "Дельта") 
			+ "	ВЫБОР 
			|		КОГДА ISNULL(ТаблицаИсточник.ЦенаНоваяШаблон, 0) <> 0
			|		ТОГДА ISNULL(ТаблицаИсточник.ЦенаНоваяШаблон, 0)
			|		ИНАЧЕ
			|			ВЫБОР 
			|				КОГДА ISNULL(" + ШаблонИмяТаблицыЗапроса + ".Цена, 0) <> 0
			|				ТОГДА ISNULL(" + ШаблонИмяТаблицыЗапроса + ".Цена, 0)
			|				ИНАЧЕ ISNULL(" + ШаблонИмяТаблицыЗапросаРегистр + ".Цена, 0)
			|			КОНЕЦ
			|	КОНЕЦ
			|	-
			|	ВЫБОР КОГДА ISNULL(" + ШаблонИмяТаблицыЗапроса + ".ЦенаСтарая, 0) = 0
			|		ТОГДА ISNULL(" + ШаблонИмяТаблицыЗапросаРегистр + ".Цена, 0) 
			|		ИНАЧЕ ISNULL(" + ШаблонИмяТаблицыЗапроса + ".ЦенаСтарая, 0) 
			|	КОНЕЦ
			|	КАК " + ИмяПоляДельта;
			
КонецПроцедуры

Процедура ТекстПоляДельтаКартинкаОсновная(СтруктураОбщихПараметровПолей, ПолеДельтаКартинка)
	
	ИмяТабличнойЧасти = СтруктураОбщихПараметровПолей.ИмяТабличнойЧасти;
	ИдентификаторФормул = СтруктураОбщихПараметровПолей.ИдентификаторФормул;
	ШаблонИмяТаблицыЗапросаРегистр = СтруктураОбщихПараметровПолей.ШаблонИмяТаблицыЗапросаРегистр;
	РазделительПолейЗапроса = СтруктураОбщихПараметровПолей.РазделительПолейЗапроса;
	НовыеИменаКолонок = СтруктураОбщихПараметровПолей.НовыеИменаКолонок;
	ШаблонИмяТаблицыЗапроса = СтруктураОбщихПараметровПолей.ШаблонИмяТаблицыЗапроса;
	
	ИмяПоляДельтаКартинка = ИмяТабличнойЧасти + ИдентификаторФормул + "_ДельтаКартинка";
	НовыеИменаКолонок.ДельтаКартинка = ИмяПоляДельтаКартинка;
	ПолеДельтаКартинка = ПолеДельтаКартинка 
		+ ?(ПустаяСтрока(ПолеДельтаКартинка), "", ", ") + Символы.ПС
		+ СтрШаблон(РазделительПолейЗапроса, "ДельтаКартинка") 
		+ "	
		|	ВЫБОР КОГДА 
		|		ВЫБОР 
		|			КОГДА ISNULL(ТаблицаИсточник.ЦенаНоваяШаблон, 0) <> 0
		|			ТОГДА ISNULL(ТаблицаИсточник.ЦенаНоваяШаблон, 0)
		|			ИНАЧЕ
		|				ВЫБОР 
		|					КОГДА ISNULL(" + ШаблонИмяТаблицыЗапроса + ".Цена, 0) <> 0
		|					ТОГДА ISNULL(" + ШаблонИмяТаблицыЗапроса + ".Цена, 0)
		|					ИНАЧЕ ISNULL(" + ШаблонИмяТаблицыЗапросаРегистр + ".Цена, 0)
		|				КОНЕЦ
		|		КОНЕЦ
		|		-
		|		ВЫБОР КОГДА ISNULL(" + ШаблонИмяТаблицыЗапроса + ".ЦенаСтарая, 0) = 0
		|			ТОГДА ISNULL(" + ШаблонИмяТаблицыЗапросаРегистр + ".Цена, 0) 
		|			ИНАЧЕ ISNULL(" + ШаблонИмяТаблицыЗапроса + ".ЦенаСтарая, 0) 
		|		КОНЕЦ < 0 
		|		 ТОГДА 1
		|		 КОГДА 
		|		ВЫБОР 
		|			КОГДА ISNULL(ТаблицаИсточник.ЦенаНоваяШаблон, 0) <> 0
		|			ТОГДА ISNULL(ТаблицаИсточник.ЦенаНоваяШаблон, 0)
		|			ИНАЧЕ
		|				ВЫБОР 
		|					КОГДА ISNULL(" + ШаблонИмяТаблицыЗапроса + ".Цена, 0) <> 0
		|					ТОГДА ISNULL(" + ШаблонИмяТаблицыЗапроса + ".Цена, 0)
		|					ИНАЧЕ ISNULL(" + ШаблонИмяТаблицыЗапросаРегистр + ".Цена, 0)
		|				КОНЕЦ
		|		КОНЕЦ
		|		-
		|		ВЫБОР КОГДА ISNULL(" + ШаблонИмяТаблицыЗапроса + ".ЦенаСтарая, 0) = 0
		|			ТОГДА ISNULL(" + ШаблонИмяТаблицыЗапросаРегистр + ".Цена, 0) 
		|			ИНАЧЕ ISNULL(" + ШаблонИмяТаблицыЗапроса + ".ЦенаСтарая, 0) 
		|		КОНЕЦ > 0 
		|		 ТОГДА 0
		|		 ИНАЧЕ -1
		|	КОНЕЦ
		|	
		|	КАК " + ИмяПоляДельтаКартинка;
	
КонецПроцедуры

Процедура ТекстПоляДельтаКартинкаЗависимая(СтруктураОбщихПараметровПолей, ПолеДельтаКартинка)
	
	ИмяТабличнойЧасти = СтруктураОбщихПараметровПолей.ИмяТабличнойЧасти;
	ШаблонИмяТаблицыЗапросаРегистр = СтруктураОбщихПараметровПолей.ШаблонИмяТаблицыЗапросаРегистр;
	ШаблонИмяТаблицыЗапроса = СтруктураОбщихПараметровПолей.ШаблонИмяТаблицыЗапроса;
	
	ИмяПоляДельтаКартинка = ИмяТабличнойЧасти + ШаблонИмяТаблицыЗапроса + "_ДельтаКартинка";
	ПолеДельтаКартинка = ПолеДельтаКартинка + ", "
		+ "
		|	ВЫБОР КОГДА
		|		ВЫБОР КОГДА ISNULL(" + ШаблонИмяТаблицыЗапроса + ".Цена, 0) = 0
		|			ТОГДА 0 
		|			ИНАЧЕ ISNULL(" + ШаблонИмяТаблицыЗапроса + ".Цена, 0) 
		|		КОНЕЦ
		| 		- 
		|		ВЫБОР КОГДА ISNULL(" + ШаблонИмяТаблицыЗапроса + ".ЦенаСтарая, 0) = 0
		|			ТОГДА ISNULL(" + ШаблонИмяТаблицыЗапросаРегистр + ".Цена, 0) 
		|			ИНАЧЕ ISNULL(" + ШаблонИмяТаблицыЗапроса + ".ЦенаСтарая, 0) 
		|		КОНЕЦ > 0 
		|	ТОГДА 0
		|	КОГДА
		|		ВЫБОР КОГДА ISNULL(" + ШаблонИмяТаблицыЗапроса + ".Цена, 0) = 0
		|			ТОГДА 0 
		|			ИНАЧЕ ISNULL(" + ШаблонИмяТаблицыЗапроса + ".Цена, 0) 
		|		КОНЕЦ
		| 		- 
		|		ВЫБОР КОГДА ISNULL(" + ШаблонИмяТаблицыЗапроса + ".ЦенаСтарая, 0) = 0
		|			ТОГДА ISNULL(" + ШаблонИмяТаблицыЗапросаРегистр + ".Цена, 0) 
		|			ИНАЧЕ ISNULL(" + ШаблонИмяТаблицыЗапроса + ".ЦенаСтарая, 0) 
		|		КОНЕЦ < 0
		|	ТОГДА 1
		|	ИНАЧЕ 0
		|	КОНЕЦ
		|КАК " + ИмяПоляДельтаКартинка;
	
КонецПроцедуры

Процедура ТекстПоляДельтаЗависимая(СтруктураОбщихПараметровПолей, ПолеДельта)
	
	ИмяТабличнойЧасти = СтруктураОбщихПараметровПолей.ИмяТабличнойЧасти;
	ШаблонИмяТаблицыЗапросаРегистр = СтруктураОбщихПараметровПолей.ШаблонИмяТаблицыЗапросаРегистр;
	ШаблонИмяТаблицыЗапроса = СтруктураОбщихПараметровПолей.ШаблонИмяТаблицыЗапроса;
	
	ИмяПоляДельтаЦена = ИмяТабличнойЧасти + ШаблонИмяТаблицыЗапроса + "_Дельта";
	ПолеДельта = ПолеДельта + ", "
		+ "
		|	ВЫБОР КОГДА ISNULL(" + ШаблонИмяТаблицыЗапроса + ".Цена, 0) = 0
		|		ТОГДА 0 
		|		ИНАЧЕ ISNULL(" + ШаблонИмяТаблицыЗапроса + ".Цена, 0) 
		|	КОНЕЦ
		| 	- 
		|	ВЫБОР КОГДА ISNULL(" + ШаблонИмяТаблицыЗапроса + ".ЦенаСтарая, 0) = 0
		|		ТОГДА ISNULL(" + ШаблонИмяТаблицыЗапросаРегистр + ".Цена, 0) 
		|		ИНАЧЕ ISNULL(" + ШаблонИмяТаблицыЗапроса + ".ЦенаСтарая, 0) 
		|	КОНЕЦ КАК " + ИмяПоляДельтаЦена;
			
КонецПроцедуры
		

Процедура ТекстПоляНоваяЦенаОсновная(СтруктураОбщихПараметровПолей, ПолеНовыхЦен)
	
	ИмяТабличнойЧасти = СтруктураОбщихПараметровПолей.ИмяТабличнойЧасти;
	ИдентификаторФормул = СтруктураОбщихПараметровПолей.ИдентификаторФормул;
	ШаблонИмяТаблицыЗапросаРегистр = СтруктураОбщихПараметровПолей.ШаблонИмяТаблицыЗапросаРегистр;
	РазделительПолейЗапроса = СтруктураОбщихПараметровПолей.РазделительПолейЗапроса;
	НовыеИменаКолонок = СтруктураОбщихПараметровПолей.НовыеИменаКолонок;
	ШаблонИмяТаблицыЗапроса = СтруктураОбщихПараметровПолей.ШаблонИмяТаблицыЗапроса;
	
	ИмяПоляЦенаНовая = ИмяТабличнойЧасти + ИдентификаторФормул + "_ЦенаНовая";
	НовыеИменаКолонок.ЦенаНовая = ИмяПоляЦенаНовая;
	ПолеНовыхЦен = ПолеНовыхЦен
		+ ?(ПустаяСтрока(ПолеНовыхЦен), "", ", ") + Символы.ПС
		+ СтрШаблон(РазделительПолейЗапроса, "ЦенаНовая")
		+ "	ВЫБОР 
		|		КОГДА ISNULL(ТаблицаИсточник.ЦенаНоваяШаблон, 0) <> 0
		|		ТОГДА ISNULL(ТаблицаИсточник.ЦенаНоваяШаблон, 0)
		|		ИНАЧЕ
		|			ВЫБОР 
		|				КОГДА ISNULL(" + ШаблонИмяТаблицыЗапроса + ".Цена, 0) <> 0
		|				ТОГДА ISNULL(" + ШаблонИмяТаблицыЗапроса + ".Цена, 0)
		|				ИНАЧЕ ISNULL(" + ШаблонИмяТаблицыЗапросаРегистр + ".Цена, 0)
		|			КОНЕЦ
		|	КОНЕЦ КАК " + ИмяПоляЦенаНовая;
			
КонецПроцедуры

Процедура ТекстПоляЦенаНоваяЗависимая(СтруктураОбщихПараметровПолей, ПолеНовыхЦен)
	
	ИмяТабличнойЧасти = СтруктураОбщихПараметровПолей.ИмяТабличнойЧасти;
	ШаблонИмяТаблицыЗапроса = СтруктураОбщихПараметровПолей.ШаблонИмяТаблицыЗапроса;
	
	ПолеНовыхЦен = ПолеНовыхЦен + ", "
		+ "
		|	ВЫБОР КОГДА ISNULL(" + ШаблонИмяТаблицыЗапроса + ".Цена, 0) = 0
		|		ТОГДА 0 
		|		ИНАЧЕ ISNULL(" + ШаблонИмяТаблицыЗапроса + ".Цена, 0) 
		|	КОНЕЦ КАК " + ИмяТабличнойЧасти + ШаблонИмяТаблицыЗапроса + "_ЦенаНовая";
	
КонецПроцедуры

Процедура ТекстПоляТекущаяВалютаОсновная(СтруктураОбщихПараметровПолей, ПолеТекущаяВалюта)
	
	ИмяТабличнойЧасти = СтруктураОбщихПараметровПолей.ИмяТабличнойЧасти;
	ИдентификаторФормул = СтруктураОбщихПараметровПолей.ИдентификаторФормул;
	ШаблонИмяТаблицыЗапросаРегистр = СтруктураОбщихПараметровПолей.ШаблонИмяТаблицыЗапросаРегистр;
	РазделительПолейЗапроса = СтруктураОбщихПараметровПолей.РазделительПолейЗапроса;
	НовыеИменаКолонок = СтруктураОбщихПараметровПолей.НовыеИменаКолонок;
	ШаблонИмяТаблицыЗапроса = СтруктураОбщихПараметровПолей.ШаблонИмяТаблицыЗапроса;
	
	ИмяПоляТекущаяВалюта = ИмяТабличнойЧасти + ИдентификаторФормул + "_ВалютаДо";
	НовыеИменаКолонок.ВалютаДо = ИмяПоляТекущаяВалюта;
	ПолеТекущаяВалюта = ПолеТекущаяВалюта
		+ ?(ПустаяСтрока(ПолеТекущаяВалюта), "", ", ") + Символы.ПС
		+ СтрШаблон(РазделительПолейЗапроса, "ВалютаДо")
		+"	ВЫБОР КОГДА " + ШаблонИмяТаблицыЗапроса + ".ВалютаСтарая <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|		ТОГДА " + ШаблонИмяТаблицыЗапроса + ".ВалютаСтарая
		|		ИНАЧЕ 
		|				ВЫБОР КОГДА ISNULL(" + ШаблонИмяТаблицыЗапросаРегистр + ".ВалютаЦены, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) 
		|					ТОГДА " + ШаблонИмяТаблицыЗапросаРегистр + ".ВалютаЦены
		|					ИНАЧЕ " + ШаблонИмяТаблицыЗапросаРегистр + ".ВидЦен.ВалютаЦены
		|				КОНЕЦ
		|	КОНЕЦ КАК " + ИмяПоляТекущаяВалюта;
			
КонецПроцедуры

Процедура ТекстПоляТекущаяВалютаЗависимая(СтруктураОбщихПараметровПолей, ПолеТекущаяВалюта)
	
	ИмяТабличнойЧасти = СтруктураОбщихПараметровПолей.ИмяТабличнойЧасти;
	ШаблонИмяТаблицыЗапросаРегистр = СтруктураОбщихПараметровПолей.ШаблонИмяТаблицыЗапросаРегистр;
	ШаблонИмяТаблицыЗапроса = СтруктураОбщихПараметровПолей.ШаблонИмяТаблицыЗапроса;
	
	ИмяПоляТекущаяВалюта = ИмяТабличнойЧасти + ШаблонИмяТаблицыЗапроса + "_ВалютаДо";
	ПолеТекущаяВалюта = ПолеТекущаяВалюта + ", "
		+"	
		|	ВЫБОР КОГДА " + ШаблонИмяТаблицыЗапроса + ".ВалютаСтарая <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|		ТОГДА " + ШаблонИмяТаблицыЗапроса + ".ВалютаСтарая
		|		ИНАЧЕ 
		|				ВЫБОР КОГДА ISNULL(" + ШаблонИмяТаблицыЗапросаРегистр + ".ВалютаЦены, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) 
		|					ТОГДА " + ШаблонИмяТаблицыЗапросаРегистр + ".ВалютаЦены
		|					ИНАЧЕ " + ШаблонИмяТаблицыЗапросаРегистр + ".ВидЦен.ВалютаЦены
		|				КОНЕЦ
		|	КОНЕЦ КАК " + ИмяПоляТекущаяВалюта;
		
КонецПроцедуры

Процедура ТекстПоляНоваяВалютаОсновная(СтруктураОбщихПараметровПолей, ПолеНоваяВалюта)
	
	ИмяТабличнойЧасти = СтруктураОбщихПараметровПолей.ИмяТабличнойЧасти;
	ИдентификаторФормул = СтруктураОбщихПараметровПолей.ИдентификаторФормул;
	ШаблонИмяТаблицыЗапросаРегистр = СтруктураОбщихПараметровПолей.ШаблонИмяТаблицыЗапросаРегистр;
	РазделительПолейЗапроса = СтруктураОбщихПараметровПолей.РазделительПолейЗапроса;
	НовыеИменаКолонок = СтруктураОбщихПараметровПолей.НовыеИменаКолонок;
	ШаблонИмяТаблицыЗапроса = СтруктураОбщихПараметровПолей.ШаблонИмяТаблицыЗапроса;
	
	ИмяПоляНоваяВалюта = ИмяТабличнойЧасти + ИдентификаторФормул + "_ВалютаНовая";
	НовыеИменаКолонок.ВалютаНовая = ИмяПоляНоваяВалюта;
	ПолеНоваяВалюта = ПолеНоваяВалюта
		+ ?(ПустаяСтрока(ПолеНоваяВалюта), "", ", ") + Символы.ПС
		+ СтрШаблон(РазделительПолейЗапроса, "ВалютаНовая")
		+
		"	ВЫБОР КОГДА ISNULL(ТаблицаИсточник.ЦенаНоваяШаблон, 0) = 0
		|		ТОГДА
		|			ВЫБОР КОГДА ISNULL(" + ШаблонИмяТаблицыЗапроса + ".Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|				ТОГДА " + ШаблонИмяТаблицыЗапроса + ".Валюта
		|				ИНАЧЕ 
		|					ВЫБОР КОГДА ISNULL(" + ШаблонИмяТаблицыЗапросаРегистр + ".ВалютаЦены, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))  <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|						ТОГДА
		|								ВЫБОР КОГДА НЕ " + ШаблонИмяТаблицыЗапросаРегистр + ".ВидЦен.НесколькоВалютДляЦен
		|											И " + ШаблонИмяТаблицыЗапросаРегистр + ".ВалютаЦены <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|											И " + ШаблонИмяТаблицыЗапросаРегистр + ".ВалютаЦены <> " + ШаблонИмяТаблицыЗапросаРегистр + ".ВидЦен.ВалютаЦены
		|										ТОГДА " + ШаблонИмяТаблицыЗапросаРегистр + ".ВидЦен.ВалютаЦены
		|									ИНАЧЕ
		|										" + ШаблонИмяТаблицыЗапросаРегистр + ".ВалютаЦены
		|								КОНЕЦ
		|						ИНАЧЕ ISNULL(" + ШаблонИмяТаблицыЗапросаРегистр + ".ВидЦен.ВалютаЦены, ВЫРАЗИТЬ(&_ШаблонИмяВидаЦен КАК Справочник.ВидыЦен).ВалютаЦены)
		|					КОНЕЦ
		|			КОНЕЦ 
		|		ИНАЧЕ
		|			ВЫБОР 
		|					КОГДА ТаблицаИсточник.Валюта <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|					ТОГДА ТаблицаИсточник.Валюта 
		|				ИНАЧЕ 
		|					ВЫБОР КОГДА " + ШаблонИмяТаблицыЗапроса + ".ВалютаСтарая <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|							ТОГДА " + ШаблонИмяТаблицыЗапроса + ".ВалютаСтарая
		|							ИНАЧЕ 
		|								ВЫБОР КОГДА " + ШаблонИмяТаблицыЗапросаРегистр + ".ВалютаЦены <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|									ТОГДА " + ШаблонИмяТаблицыЗапросаРегистр + ".ВалютаЦены
		|									ИНАЧЕ " + ШаблонИмяТаблицыЗапросаРегистр + ".ВидЦен.ВалютаЦены
		|								КОНЕЦ
		|					КОНЕЦ 
		|			КОНЕЦ 
		|	КОНЕЦ КАК " + ИмяПоляНоваяВалюта;
			
КонецПроцедуры

Процедура ТекстПоляВалютаНоваяЗависимая(СтруктураОбщихПараметровПолей, ПолеНоваяВалюта)
	
	ИмяТабличнойЧасти = СтруктураОбщихПараметровПолей.ИмяТабличнойЧасти;
	ШаблонИмяТаблицыЗапросаРегистр = СтруктураОбщихПараметровПолей.ШаблонИмяТаблицыЗапросаРегистр;
	ШаблонИмяТаблицыЗапроса = СтруктураОбщихПараметровПолей.ШаблонИмяТаблицыЗапроса;
	
	ИмяПоляНоваяВалюта = ИмяТабличнойЧасти + ШаблонИмяТаблицыЗапроса + "_ВалютаНовая";
	ПолеНоваяВалюта = ПолеНоваяВалюта + ", "
		+"
		|	ВЫБОР КОГДА ISNULL(ТаблицаИсточник.ЦенаНоваяШаблон, 0) = 0
		|		ТОГДА
		|			ВЫБОР КОГДА ISNULL(" + ШаблонИмяТаблицыЗапроса + ".Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|				ТОГДА " + ШаблонИмяТаблицыЗапроса + ".Валюта
		|				ИНАЧЕ 
		|					ВЫБОР КОГДА ISNULL(" + ШаблонИмяТаблицыЗапросаРегистр + ".ВалютаЦены, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))  <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|						ТОГДА
		|								ВЫБОР КОГДА НЕ " + ШаблонИмяТаблицыЗапросаРегистр + ".ВидЦен.НесколькоВалютДляЦен
		|											И " + ШаблонИмяТаблицыЗапросаРегистр + ".ВалютаЦены <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|											И " + ШаблонИмяТаблицыЗапросаРегистр + ".ВалютаЦены <> " + ШаблонИмяТаблицыЗапросаРегистр + ".ВидЦен.ВалютаЦены
		|										ТОГДА " + ШаблонИмяТаблицыЗапросаРегистр + ".ВидЦен.ВалютаЦены
		|									ИНАЧЕ
		|										" + ШаблонИмяТаблицыЗапросаРегистр + ".ВалютаЦены
		|								КОНЕЦ
		|						ИНАЧЕ ISNULL(" + ШаблонИмяТаблицыЗапросаРегистр + ".ВидЦен.ВалютаЦены, ВЫРАЗИТЬ(&_ШаблонИмяВидаЦен КАК Справочник.ВидыЦен).ВалютаЦены)
		|					КОНЕЦ
		|			КОНЕЦ 
		|		ИНАЧЕ
		|			ВЫБОР 
		|					КОГДА ТаблицаИсточник.Валюта <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|					ТОГДА ТаблицаИсточник.Валюта 
		|				ИНАЧЕ 
		|					ВЫБОР КОГДА " + ШаблонИмяТаблицыЗапроса + ".ВалютаСтарая <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|							ТОГДА " + ШаблонИмяТаблицыЗапроса + ".ВалютаСтарая
		|							ИНАЧЕ 
		|								ВЫБОР КОГДА " + ШаблонИмяТаблицыЗапросаРегистр + ".ВалютаЦены <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|									ТОГДА " + ШаблонИмяТаблицыЗапросаРегистр + ".ВалютаЦены
		|									ИНАЧЕ " + ШаблонИмяТаблицыЗапросаРегистр + ".ВидЦен.ВалютаЦены
		|								КОНЕЦ
		|					КОНЕЦ 
		|			КОНЕЦ 
		|	КОНЕЦ КАК " + ИмяПоляНоваяВалюта;
		
КонецПроцедуры

Процедура ТекстПоляДельтаВалютаОсновная(СтруктураОбщихПараметровПолей, ПолеДельтаВалюта)
	
	ИмяТабличнойЧасти = СтруктураОбщихПараметровПолей.ИмяТабличнойЧасти;
	ИдентификаторФормул = СтруктураОбщихПараметровПолей.ИдентификаторФормул;
	ШаблонИмяТаблицыЗапросаРегистр = СтруктураОбщихПараметровПолей.ШаблонИмяТаблицыЗапросаРегистр;
	РазделительПолейЗапроса = СтруктураОбщихПараметровПолей.РазделительПолейЗапроса;
	ШаблонИмяТаблицыЗапроса = СтруктураОбщихПараметровПолей.ШаблонИмяТаблицыЗапроса;
	
	ИмяПоляДельтаВалюта = ИмяТабличнойЧасти + ИдентификаторФормул + "_ВалютаДельта";		
	ПолеДельтаВалюта = ПолеДельтаВалюта
		+ ?(ПустаяСтрока(ПолеДельтаВалюта), "", ", ") + Символы.ПС
		+ СтрШаблон(РазделительПолейЗапроса, "ВалютаДельта")
		+
		"	ВЫБОР КОГДА ISNULL(ТаблицаИсточник.ЦенаНоваяШаблон, 0) = 0
		|		ТОГДА
		|			ВЫБОР КОГДА ISNULL(" + ШаблонИмяТаблицыЗапроса + ".Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|				ТОГДА " + ШаблонИмяТаблицыЗапроса + ".Валюта
		|				ИНАЧЕ 
		|					ВЫБОР КОГДА ISNULL(" + ШаблонИмяТаблицыЗапросаРегистр + ".ВалютаЦены, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))  <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) 
		|						ТОГДА " + ШаблонИмяТаблицыЗапросаРегистр + ".ВалютаЦены
		|						ИНАЧЕ ISNULL(" + ШаблонИмяТаблицыЗапросаРегистр + ".ВидЦен.ВалютаЦены, &ВалютаУчета)
		|					КОНЕЦ
		|			КОНЕЦ 
		|		ИНАЧЕ
		|			ВЫБОР 
		|					КОГДА ТаблицаИсточник.Валюта <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)			
		|					ТОГДА ТаблицаИсточник.Валюта 
		|				ИНАЧЕ 
		|					ВЫБОР КОГДА " + ШаблонИмяТаблицыЗапроса + ".ВалютаСтарая <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|							ТОГДА " + ШаблонИмяТаблицыЗапроса + ".ВалютаСтарая
		|							ИНАЧЕ 
		|								ВЫБОР КОГДА " + ШаблонИмяТаблицыЗапросаРегистр + ".ВалютаЦены <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|									ТОГДА " + ШаблонИмяТаблицыЗапросаРегистр + ".ВалютаЦены
		|									ИНАЧЕ " + ШаблонИмяТаблицыЗапросаРегистр + ".ВидЦен.ВалютаЦены
		|								КОНЕЦ
		|					КОНЕЦ 
		|			КОНЕЦ 
		|	КОНЕЦ КАК " + ИмяПоляДельтаВалюта;
			
КонецПроцедуры

Процедура ТекстПоляДельтаВалютаЗависимая(СтруктураОбщихПараметровПолей, ПолеДельтаВалюта)
	
	ИмяТабличнойЧасти = СтруктураОбщихПараметровПолей.ИмяТабличнойЧасти;
	ШаблонИмяТаблицыЗапросаРегистр = СтруктураОбщихПараметровПолей.ШаблонИмяТаблицыЗапросаРегистр;
	ШаблонИмяТаблицыЗапроса = СтруктураОбщихПараметровПолей.ШаблонИмяТаблицыЗапроса;
	
	ИмяПоляДельтаВалюта = ИмяТабличнойЧасти + ШаблонИмяТаблицыЗапроса + "_ВалютаДельта";		
	ПолеДельтаВалюта = ПолеДельтаВалюта + ", "
		+"
		|	ВЫБОР КОГДА ISNULL(ТаблицаИсточник.ЦенаНоваяШаблон, 0) = 0
		|		ТОГДА
		|			ВЫБОР КОГДА ISNULL(" + ШаблонИмяТаблицыЗапроса + ".Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|				ТОГДА " + ШаблонИмяТаблицыЗапроса + ".Валюта
		|				ИНАЧЕ 
		|					ВЫБОР КОГДА ISNULL(" + ШаблонИмяТаблицыЗапросаРегистр + ".ВалютаЦены, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))  <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) 
		|						ТОГДА " + ШаблонИмяТаблицыЗапросаРегистр + ".ВалютаЦены
		|						ИНАЧЕ ISNULL(" + ШаблонИмяТаблицыЗапросаРегистр + ".ВидЦен.ВалютаЦены, &ВалютаУчета)
		|					КОНЕЦ
		|			КОНЕЦ 
		|		ИНАЧЕ
		|			ВЫБОР 
		|					КОГДА ТаблицаИсточник.Валюта <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)			
		|					ТОГДА ТаблицаИсточник.Валюта 
		|				ИНАЧЕ 
		|					ВЫБОР КОГДА " + ШаблонИмяТаблицыЗапроса + ".ВалютаСтарая <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|							ТОГДА " + ШаблонИмяТаблицыЗапроса + ".ВалютаСтарая
		|							ИНАЧЕ 
		|								ВЫБОР КОГДА " + ШаблонИмяТаблицыЗапросаРегистр + ".ВалютаЦены <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|									ТОГДА " + ШаблонИмяТаблицыЗапросаРегистр + ".ВалютаЦены
		|									ИНАЧЕ " + ШаблонИмяТаблицыЗапросаРегистр + ".ВидЦен.ВалютаЦены
		|								КОНЕЦ
		|					КОНЕЦ 
		|			КОНЕЦ 
		|	КОНЕЦ КАК " + ИмяПоляДельтаВалюта;
	
КонецПроцедуры

Процедура ТекстПоляЦенуИзменилиОсновная(СтруктураОбщихПараметровПолей, ПолеЦенуИзменили)
	
	ИмяТабличнойЧасти = СтруктураОбщихПараметровПолей.ИмяТабличнойЧасти;
	ИдентификаторФормул = СтруктураОбщихПараметровПолей.ИдентификаторФормул;
	
	ПолеЦенуИзменили = ПолеЦенуИзменили
		+ ?(ПустаяСтрока(ПолеЦенуИзменили), "", ", ")
		+ "ЛОЖЬ КАК " + ИмяТабличнойЧасти + ИдентификаторФормул + "_ЦенуИзменили";
			
КонецПроцедуры

Процедура ТекстПоляЦенуИзменилиЗависимая(СтруктураОбщихПараметровПолей, ПолеЦенуИзменили)
	
	ИмяТабличнойЧасти = СтруктураОбщихПараметровПолей.ИмяТабличнойЧасти;
	ШаблонИмяТаблицыЗапроса = СтруктураОбщихПараметровПолей.ШаблонИмяТаблицыЗапроса;
	
	ПолеЦенуИзменили = ПолеЦенуИзменили
		+?(ПустаяСтрока(ПолеЦенуИзменили), "", ", ") 
		+"
		| ЛОЖЬ КАК " + ИмяТабличнойЧасти + ШаблонИмяТаблицыЗапроса + "_ЦенуИзменили" + Символы.ПС;
		
КонецПроцедуры

Процедура ТекстПоляВалютаВидимостьОсновная(СтруктураОбщихПараметровПолей, ПолеВалютаВидимость)
	
	ИмяТабличнойЧасти = СтруктураОбщихПараметровПолей.ИмяТабличнойЧасти;
	ИдентификаторФормул = СтруктураОбщихПараметровПолей.ИдентификаторФормул;
	ШаблонИмяТаблицыЗапросаРегистр = СтруктураОбщихПараметровПолей.ШаблонИмяТаблицыЗапросаРегистр;
	РазделительПолейЗапроса = СтруктураОбщихПараметровПолей.РазделительПолейЗапроса;
	ШаблонИмяТаблицыЗапроса = СтруктураОбщихПараметровПолей.ШаблонИмяТаблицыЗапроса;
	
	ИмяПоляВалютаВидимость = ИмяТабличнойЧасти + ИдентификаторФормул + "_ВалютаВидимость";
	ПолеВалютаВидимость = ПолеВалютаВидимость
		+ ?(ПустаяСтрока(ПолеВалютаВидимость), "", ", ") + Символы.ПС
		+ СтрШаблон(РазделительПолейЗапроса, "ВалютаВидимость")
		+"	ВЫБОР КОГДА НЕ ВЫРАЗИТЬ(&_ШаблонИмяВидаЦен КАК Справочник.ВидыЦен).НесколькоВалютДляЦен
		|		ТОГДА
		|			ВЫБОР КОГДА " + ШаблонИмяТаблицыЗапроса + ".ВалютаСтарая <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|				ТОГДА " + ШаблонИмяТаблицыЗапроса + ".ВалютаСтарая
		|				ИНАЧЕ 
		|					ВЫБОР КОГДА ISNULL(" + ШаблонИмяТаблицыЗапросаРегистр + ".ВалютаЦены, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) 
		|						ТОГДА " + ШаблонИмяТаблицыЗапросаРегистр + ".ВалютаЦены
		|						ИНАЧЕ " + ШаблонИмяТаблицыЗапросаРегистр + ".ВидЦен.ВалютаЦены
		|					КОНЕЦ
		|			КОНЕЦ
		|			<>
		|			ВЫРАЗИТЬ(&_ШаблонИмяВидаЦен КАК Справочник.ВидыЦен).ВалютаЦены
		|	ИНАЧЕ
		|		ИСТИНА 
		|	КОНЕЦ КАК " + ИмяПоляВалютаВидимость;
			
КонецПроцедуры

Процедура ТекстПоляВалютаВидимостьЗависимая(СтруктураОбщихПараметровПолей, ПолеВалютаВидимость)
	
	ИмяТабличнойЧасти = СтруктураОбщихПараметровПолей.ИмяТабличнойЧасти;
	ШаблонИмяТаблицыЗапросаРегистр = СтруктураОбщихПараметровПолей.ШаблонИмяТаблицыЗапросаРегистр;
	ШаблонИмяТаблицыЗапроса = СтруктураОбщихПараметровПолей.ШаблонИмяТаблицыЗапроса;
	
	ИмяПоляВалютаВидимость = ИмяТабличнойЧасти + ШаблонИмяТаблицыЗапроса + "_ВалютаВидимость";
	ПолеВалютаВидимость = ПолеВалютаВидимость + ", "
		+"	
		|	ВЫБОР КОГДА НЕ ВЫРАЗИТЬ(&_ШаблонИмяВидаЦен КАК Справочник.ВидыЦен).НесколькоВалютДляЦен
		|		ТОГДА
		|			ВЫБОР КОГДА " + ШаблонИмяТаблицыЗапроса + ".ВалютаСтарая <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|				ТОГДА " + ШаблонИмяТаблицыЗапроса + ".ВалютаСтарая
		|				ИНАЧЕ 
		|					ВЫБОР КОГДА ISNULL(" + ШаблонИмяТаблицыЗапросаРегистр + ".ВалютаЦены, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) 
		|						ТОГДА " + ШаблонИмяТаблицыЗапросаРегистр + ".ВалютаЦены
		|						ИНАЧЕ " + ШаблонИмяТаблицыЗапросаРегистр + ".ВидЦен.ВалютаЦены
		|					КОНЕЦ
		|			КОНЕЦ
		|			<>
		|			ВЫРАЗИТЬ(&_ШаблонИмяВидаЦен КАК Справочник.ВидыЦен).ВалютаЦены
		|	ИНАЧЕ
		|		ИСТИНА 
		|	КОНЕЦ КАК " + ИмяПоляВалютаВидимость;
			
КонецПроцедуры

Функция ТекстЗапросаКолонокТекущихЦен()
	
	Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИсточник.Номенклатура КАК Номенклатура,
	|	ТаблицаИсточник.Характеристика КАК Характеристика,
	|	ТаблицаИсточник.ЕдиницаИзмерения КАК ЕдиницаИзмеренияШаблон,
	|	ТаблицаИсточник.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаИсточник.ЦенаНоваяШаблон КАК ЦенаНоваяШаблон,
	|	ТаблицаИсточник.КлючСвязи КАК КлючСвязи,
	|	ТаблицаИсточник.Валюта КАК Валюта,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерСтроки
	|ПОМЕСТИТЬ ТаблицаИсточник
	|ИЗ
	|	&ТаблицаИсточник КАК ТаблицаИсточник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаЦен.Номенклатура КАК Номенклатура,
	|	ТаблицаЦен.Характеристика КАК Характеристика,
	|	ТаблицаЦен.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаЦен.Цена КАК Цена,
	|	ТаблицаЦен.ЦенаСтарая КАК ЦенаСтарая,
	|	ТаблицаЦен.ВидЦены КАК ВидЦены,
	|	ТаблицаЦен.Валюта КАК Валюта,
	|	ТаблицаЦен.ВалютаСтарая КАК ВалютаСтарая
	|ПОМЕСТИТЬ ТаблицаЦен
	|ИЗ
	|	&ТаблицаЦен КАК ТаблицаЦен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(Штрихкоды.Штрихкод) КАК Штрихкод,
	|	Штрихкоды.Номенклатура,
	|	Штрихкоды.Характеристика
	|ПОМЕСТИТЬ Штрихкоды
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|ГДЕ
	|	(Штрихкоды.Номенклатура, Штрихкоды.Характеристика) В
	|		(ВЫБРАТЬ
	|			Т.Номенклатура,
	|			Т.Характеристика
	|		ИЗ
	|			ТаблицаИсточник КАК Т)
	|	И НЕ Штрихкоды.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|	Штрихкоды.Номенклатура,
	|	Штрихкоды.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныПоВыбраннымТипамЦен.Период КАК Период,
	|	ЦеныПоВыбраннымТипамЦен.ВидЦен КАК ВидЦен,
	|	ЦеныПоВыбраннымТипамЦен.Номенклатура КАК Номенклатура,
	|	ЦеныПоВыбраннымТипамЦен.Характеристика КАК Характеристика,
	|	ЦеныПоВыбраннымТипамЦен.Цена КАК Цена,
	|	ЦеныПоВыбраннымТипамЦен.Актуальность КАК Актуальность,
	|	ЦеныПоВыбраннымТипамЦен.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЦеныПоВыбраннымТипамЦен.ВалютаЦены КАК ВалютаЦены,
	|	ЦеныПоВыбраннымТипамЦен.ВключаяХарактеристики КАК ВключаяХарактеристики,
	|	ЦеныПоВыбраннымТипамЦен.Автор КАК Автор,
	|	ЦеныПоВыбраннымТипамЦен.ДокументУстановки КАК ДокументУстановки
	|ПОМЕСТИТЬ ЦеныПоВыбраннымТипамЦен
	|ИЗ
	|	&ЦеныПоВыбраннымТипамЦен КАК ЦеныПоВыбраннымТипамЦен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИсточник.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаИсточник.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаИсточник.Номенклатура.ЭтоНабор КАК ЭтоНабор,
	|	ТаблицаИсточник.Номенклатура.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
	|	ТаблицаИсточник.Номенклатура.ПроверятьЗаполнениеХарактеристики КАК ПроверятьЗаполнениеХарактеристики,
	|	ТаблицаИсточник.Номенклатура.ПометкаУдаления КАК ПометкаУдаления,
	|	ТаблицаИсточник.Характеристика КАК Характеристика,
	|	ТаблицаИсточник.ЦенаНоваяШаблон КАК ЦенаНоваяШаблон,
	|	ТаблицаИсточник.ЕдиницаИзмеренияШаблон КАК ЕдиницаИзмеренияШаблон,
	|	ТаблицаИсточник.КлючСвязи КАК КлючСвязи,
	|	ТаблицаИсточник.НомерСтроки КАК НомерСтроки,
	|	ISNULL(Штрихкоды.Штрихкод, """") КАК ХарактеристикаШтрихкод,
	|	&ПолеИменаКолонокЦенуИзменили,
	|	&ПолеИменаКолонокТекущихЦен,
	|	&ПолеИменаКолонокНовыхЦен,
	|	&ПолеИменаКолонокЕдиницИзмерения,
	|	&ПолеИменаКолонокДельта,
	|	&ПолеИменаКолонокВалюта,
	|	&ПолеИменаКолонокТекущаяВалюта,
	|	&ПолеИменаКолонокДельтаВалюта,
	|	&ПолеИменаКолонокВидимостьВалюта,
	|	&ПолеИменаКолонокДельтаКартинка
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	ТаблицаИсточник КАК ТаблицаИсточник
	|	ЛЕВОЕ СОЕДИНЕНИЕ Штрихкоды КАК Штрихкоды
	|		ПО ТаблицаИсточник.Номенклатура = Штрихкоды.Номенклатура
	|		И ТаблицаИсточник.Характеристика = Штрихкоды.Характеристика";
	
	Возврат Текст;
	
КонецФункции

Процедура ПересчитатьВалютнуюДельту(ТаблицаИсточникСЦеной, Знач ПараметрыКопирования, Знач ТаблицаИменКолонок)

	Если Не ПараметрыКопирования.ФОУчетВалютныхОпераций Тогда
		Возврат;
	КонецЕсли;
	
	КурсыВалютДокумента = ПараметрыКопирования.КурсыВалютДокумента;	
	Для Каждого Запись Из ТаблицаИсточникСЦеной Цикл
		Для Каждого СтрокаИмен Из ТаблицаИменКолонок Цикл
			Если ЗначениеЗаполнено(Запись[СтрокаИмен.ВалютаДо]) 
				И Запись[СтрокаИмен.ВалютаНовая] <> Запись[СтрокаИмен.ВалютаДо] Тогда
				
				ПараметрыТекущегоКурса = КурсыВалютДокумента.Получить(Запись[СтрокаИмен.ВалютаДо]);
				ПараметрыНовогоКурса = КурсыВалютДокумента.Получить(Запись[СтрокаИмен.ВалютаНовая]);
				
				ЦенаДоВНовойВалюте = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(Запись[СтрокаИмен.ЦенаДо],
					ПараметрыТекущегоКурса, ПараметрыНовогоКурса); 
					
				Запись[СтрокаИмен.Дельта] = Запись[СтрокаИмен.ЦенаНовая] - ЦенаДоВНовойВалюте;
				
				Если Запись[СтрокаИмен.Дельта] < 0 Тогда
					Запись[СтрокаИмен.ДельтаКартинка] = 1;
				ИначеЕсли Запись[СтрокаИмен.Дельта] > 0 Тогда
					Запись[СтрокаИмен.ДельтаКартинка] = 0;
				Иначе
					Запись[СтрокаИмен.ДельтаКартинка] = -1;
				КонецЕсли;
				 
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКолонкиПодчиненногоВидаЦенВТекстЗапроса(ПараметрыПроцедуры)
	
	ПолеДельта = ПараметрыПроцедуры.ПолеДельта;
	ПолеЕдиницИзмерения = ПараметрыПроцедуры.ПолеЕдиницИзмерения;
	ПолеНовыхЦен = ПараметрыПроцедуры.ПолеНовыхЦен;
	ПолеТекущихЦен = ПараметрыПроцедуры.ПолеТекущихЦен;
	ПолеЦенуИзменили = ПараметрыПроцедуры.ПолеЦенуИзменили;
	ПолеНоваяВалюта = ПараметрыПроцедуры.ПолеНоваяВалюта;
	ПолеДельтаВалюта = ПараметрыПроцедуры.ПолеДельтаВалюта;
	ПолеТекущаяВалюта = ПараметрыПроцедуры.ПолеТекущаяВалюта;
	ПолеВалютаВидимость = ПараметрыПроцедуры.ПолеВалютаВидимость;
	ПолеДельтаКартинка = ПараметрыПроцедуры.ПолеДельтаКартинка;
	
	Запрос = ПараметрыПроцедуры.Запрос;
	ИмяТабличнойЧасти = ПараметрыПроцедуры.ИмяТабличнойЧасти;
	ПодчиненныеВидыЦен = ПараметрыПроцедуры.ПодчиненныеВидыЦен;
	ДобавляемыйВидЦен = ПараметрыПроцедуры.ПодчиненныйВидЦен;	
	ШаблонТекстаЗапросаВидЦен = ПараметрыПроцедуры.ШаблонТекстаЗапросаВидЦен;
	ШаблонТекстаЗапросаВидЦенРегистр = ПараметрыПроцедуры.ШаблонТекстаЗапросаВидЦенРегистр;
	
	Если ПодчиненныеВидыЦен.Найти(ДобавляемыйВидЦен.Ключ) = Неопределено Тогда
		
		ШаблонИмяТаблицыЗапроса = ДобавляемыйВидЦен.Ключ.ИдентификаторФормул;
		ШаблонИмяТаблицыЗапросаРегистр = ДобавляемыйВидЦен.Ключ.ИдентификаторФормул + "Регистр";
		
		СтруктураОбщихПараметровПолей = Новый Структура;
		СтруктураОбщихПараметровПолей.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
		СтруктураОбщихПараметровПолей.Вставить("ШаблонИмяТаблицыЗапросаРегистр", ШаблонИмяТаблицыЗапросаРегистр);
		СтруктураОбщихПараметровПолей.Вставить("ШаблонИмяТаблицыЗапроса", ШаблонИмяТаблицыЗапроса);
		
		ТекстПоляЦенаДоЗависимая(СтруктураОбщихПараметровПолей, ПолеТекущихЦен);
		
		ТекстПоляТекущаяВалютаЗависимая(СтруктураОбщихПараметровПолей, ПолеТекущаяВалюта);
				
		ТекстПоляДельтаЗависимая(СтруктураОбщихПараметровПолей, ПолеДельта);
			
		ТекстПоляДельтаВалютаЗависимая(СтруктураОбщихПараметровПолей, ПолеДельтаВалюта);
		
		ТекстПоляЦенаНоваяЗависимая(СтруктураОбщихПараметровПолей, ПолеНовыхЦен);
		
		ТекстПоляВалютаНоваяЗависимая(СтруктураОбщихПараметровПолей, ПолеНоваяВалюта);
		
		ТекстПоляЕдиницаИзмененияЗависимая(СтруктураОбщихПараметровПолей, ПолеЕдиницИзмерения);
		
		ТекстПоляЦенуИзменилиЗависимая(СтруктураОбщихПараметровПолей, ПолеЦенуИзменили);
		
		ТекстПоляВалютаВидимостьЗависимая(СтруктураОбщихПараметровПолей, ПолеВалютаВидимость);
		
		ТекстПоляДельтаКартинкаЗависимая(СтруктураОбщихПараметровПолей, ПолеДельтаКартинка);
		
		ТекстЗапросаЛевоеСоединение = СтрЗаменить(ШаблонТекстаЗапросаВидЦен, "_ШаблонИмяТаблицыЗапроса",
			ШаблонИмяТаблицыЗапроса);
		ТекстЗапросаЛевоеСоединение = СтрЗаменить(ТекстЗапросаЛевоеСоединение, "_ШаблонИмяВидаЦен",
			ШаблонИмяТаблицыЗапроса);

		ТекстЗапросаЛевоеСоединениеРегистр = СтрЗаменить(ШаблонТекстаЗапросаВидЦенРегистр, "_ШаблонИмяТаблицыЗапроса",
			ШаблонИмяТаблицыЗапроса);
		ТекстЗапросаЛевоеСоединениеРегистр = СтрЗаменить(ТекстЗапросаЛевоеСоединениеРегистр, "_ШаблонИмяВидаЦен",
			ШаблонИмяТаблицыЗапроса);
		
		ПолеВалютаВидимость = СтрЗаменить(ПолеВалютаВидимость, "_ШаблонИмяВидаЦен", ШаблонИмяТаблицыЗапроса);
		ПолеНоваяВалюта = СтрЗаменить(ПолеНоваяВалюта, "_ШаблонИмяВидаЦен", ШаблонИмяТаблицыЗапроса);
		
		Запрос.Текст = Запрос.Текст + ТекстЗапросаЛевоеСоединение + ТекстЗапросаЛевоеСоединениеРегистр;
		Запрос.УстановитьПараметр(ШаблонИмяТаблицыЗапроса, ДобавляемыйВидЦен.Ключ);
		Запрос.УстановитьПараметр(ШаблонИмяТаблицыЗапросаРегистр, ДобавляемыйВидЦен.Ключ);
		
		ПодчиненныеВидыЦен.Добавить(ДобавляемыйВидЦен.Ключ);
		
		ПараметрыПроцедуры.ПолеДельта = ПолеДельта;
		ПараметрыПроцедуры.ПолеЕдиницИзмерения = ПолеЕдиницИзмерения;
		ПараметрыПроцедуры.ПолеНовыхЦен = ПолеНовыхЦен;
		ПараметрыПроцедуры.ПолеТекущихЦен = ПолеТекущихЦен;
		ПараметрыПроцедуры.ПолеЦенуИзменили = ПолеЦенуИзменили;
		ПараметрыПроцедуры.ПолеНоваяВалюта = ПолеНоваяВалюта;
		ПараметрыПроцедуры.ПолеДельтаВалюта = ПолеДельтаВалюта;
		ПараметрыПроцедуры.ПолеТекущаяВалюта = ПолеТекущаяВалюта;
		ПараметрыПроцедуры.ПолеВалютаВидимость = ПолеВалютаВидимость;
		ПараметрыПроцедуры.ПолеДельтаКартинка = ПолеДельтаКартинка;
		
	КонецЕсли;
	
	Для каждого ПодчиненныйВидЦен Из ДобавляемыйВидЦен.Значение Цикл
		
		ПараметрыПроцедуры.Вставить("ПодчиненныйВидЦен", ПодчиненныйВидЦен);
		ДобавитьКолонкиПодчиненногоВидаЦенВТекстЗапроса(ПараметрыПроцедуры);
	
	КонецЦикла;

КонецПроцедуры

Процедура КопироватьДобавлениемСтрокТаблицЗначений(ТаблицаИсточник, ТаблицаПриемник, ПараметрыКопирования) Экспорт
	Перем ИмяТабличнойЧасти, ВыбранныеВидыЦен, ЗаполнитьТекущиеЦены, ИменаКолонокКопирования, 
		ИменаКолонокИсключений, МаксимальныйКлючСвязи, МаксимальныйКлючСвязиПослеДобавления, ПоДокументу;
	
	Если ТипЗнч(ТаблицаИсточник) = Тип("ТаблицаЗначений")
		И ТипЗнч(ТаблицаПриемник) = Тип("ТаблицаЗначений") Тогда
		
		ТаблицаКопирования = ТаблицаИсточник.Скопировать();
		
		ПараметрыКопирования.Свойство("МаксимальныйКлючСвязи", МаксимальныйКлючСвязи);
		ПараметрыКопирования.Свойство("МаксимальныйКлючСвязиПослеДобавления", МаксимальныйКлючСвязиПослеДобавления);
		
		ПараметрыКопирования.Свойство("ИменаКолонокКопирования", ИменаКолонокКопирования);
		ПараметрыКопирования.Свойство("ИменаКолонокИсключений", ИменаКолонокИсключений);
		
		ПоДокументу = ?(ПараметрыКопирования.Свойство("ПоДокументу"), ПараметрыКопирования.ПоДокументу, Ложь);
		
		ЕстьПолеИндексКартинки = ТаблицаПриемник.Колонки.Найти("ИндексКартинки") <> Неопределено;
		ЕстьПолеЛупа = ТаблицаПриемник.Колонки.Найти("Лупа") <> Неопределено;
		
		ПараметрыКопирования.Свойство("ЗаполнитьТекущиеЦены", ЗаполнитьТекущиеЦены);
		ЗаполнитьТекущиеЦены = ?(ЗаполнитьТекущиеЦены = Неопределено, Ложь, ЗаполнитьТекущиеЦены);
		
		ТаблицаЦен = ?(ПараметрыКопирования.Свойство("ТаблицаЦен"), ПараметрыКопирования.ТаблицаЦен, Неопределено);
		
		Если ЗаполнитьТекущиеЦены Тогда
			
			ПараметрыКопирования.Свойство("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
			ПараметрыКопирования.Свойство("ВыбранныеВидыЦен", ВыбранныеВидыЦен);
			
			ДобавитьИЗаполнитьКолонкиТекущихЦен(ВыбранныеВидыЦен, ИмяТабличнойЧасти, ТаблицаИсточник,
				ТаблицаКопирования, ТаблицаЦен, ПараметрыКопирования);
			
		КонецЕсли;
		
		Для каждого СтрокаИсточник Из ТаблицаКопирования Цикл
			
			Если НЕ ПоДокументу
				И ЦенообразованиеСерверПовтИсп.НоменклатураЗапрещенаКУстановкеЦены(СтрокаИсточник.Номенклатура) Тогда
				
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Номенклатура %1 является сертификатом. Невозможно добавить в документ.'"),
					СтрокаИсточник.Номенклатура);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				Продолжить;
				
			КонецЕсли;
			
			НоваяСтрока = ТаблицаПриемник.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник, ИменаКолонокКопирования, ИменаКолонокИсключений);
			
			НоваяСтрока.ПроверятьЗаполнениеХарактеристики = НоваяСтрока.Номенклатура.ПроверятьЗаполнениеХарактеристики;
			НоваяСтрока.ИспользоватьХарактеристики = НоваяСтрока.Номенклатура.ИспользоватьХарактеристики;
			Если ЕстьПолеЛупа Тогда
				НоваяСтрока.Лупа = ?(НоваяСтрока.ИспользоватьХарактеристики, 0, -1);
			КонецЕсли;
			НоваяСтрока.КлючСвязи = МаксимальныйКлючСвязи + СтрокаИсточник.КлючСвязи;
			МаксимальныйКлючСвязиПослеДобавления = МАКС(МаксимальныйКлючСвязиПослеДобавления, МаксимальныйКлючСвязи
				+ СтрокаИсточник.КлючСвязи);
			
			Если ЕстьПолеИндексКартинки Тогда
				
				Если ЗаполнитьТекущиеЦены Тогда
					
					НоваяСтрока.ИндексКартинки =
						?(СтрокаИсточник.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас, 2, 0)
						+ ?(СтрокаИсточник.ИспользоватьХарактеристики, 1, 0)
						+ ?(СтрокаИсточник.ПометкаУдаления, 4, 0)
						+ ?(СтрокаИсточник.ЭтоНабор, 8, 0);	
						
				Иначе
					
					НоваяСтрока.ИндексКартинки =
						?(СтрокаИсточник.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас, 2, 0)
						+ ?(СтрокаИсточник.Номенклатура.ИспользоватьХарактеристики, 1, 0)
						+ ?(СтрокаИсточник.Номенклатура.ПометкаУдаления, 4, 0)
						+ ?(СтрокаИсточник.Номенклатура.ЭтоНабор, 8, 0);
						
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыКопирования.МаксимальныйКлючСвязиПослеДобавления = МаксимальныйКлючСвязиПослеДобавления;
	
КонецПроцедуры

Функция СтруктуруДереваЗначенийВТаблицуЗначений(ДеревоЗначений)
	
	Результат = Новый ТаблицаЗначений;
	
	Для Каждого Колонка Из ДеревоЗначений.Колонки Цикл
		
		Результат.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		
	КонецЦикла;
	
	Результат.Колонки.Добавить("КлючСвязи", Новый ОписаниеТипов("Число"));
	
	Возврат Результат;
КонецФункции

Функция РазобратьДеревоНоменклатуры(ДеревоНоменклатуры, ПоказыватьНедействительныеХарактеристики = Ложь) Экспорт
	
	ТаблицаНоменклатуры = СтруктуруДереваЗначенийВТаблицуЗначений(ДеревоНоменклатуры);
	ТаблицаХарактеристик = СтруктуруДереваЗначенийВТаблицуЗначений(ДеревоНоменклатуры);
	
	ДобавитьОбязательныеКолонкиПриРазбореДереваНоменклатуры(ТаблицаНоменклатуры, ТаблицаХарактеристик);
	
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
	
	ЛокальныйКлючСвязи = 0;
	Для каждого СтрокаДереваНоменклатура Из ДеревоНоменклатуры.Строки Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаДереваНоменклатура.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		ЛокальныйКлючСвязи = ЛокальныйКлючСвязи + 1;
		
		НоваяСтрокаНоменклатура = ТаблицаНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаНоменклатура, СтрокаДереваНоменклатура);
		Если НоваяСтрокаНоменклатура.Характеристика = Неопределено Тогда
			НоваяСтрокаНоменклатура.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецЕсли;		
		НоваяСтрокаНоменклатура.КлючСвязи = ЛокальныйКлючСвязи;
		
		Для каждого СтрокаДереваХарактеристика Из СтрокаДереваНоменклатура.Строки Цикл
			
			Если ИспользоватьХарактеристики
				И НЕ ПоказыватьНедействительныеХарактеристики
				И СтрокаДереваХарактеристика.ХарактеристикаНедействителен Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			НоваяСтрокаХарактеристика = ТаблицаХарактеристик.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаХарактеристика, СтрокаДереваХарактеристика);
			НоваяСтрокаХарактеристика.КлючСвязи = ЛокальныйКлючСвязи;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Новый Структура("ТаблицаНоменклатуры, ТаблицаХарактеристик", ТаблицаНоменклатуры, ТаблицаХарактеристик);
	
КонецФункции

Функция РазобратьМассивНоменклатуры(МассивНоменклатуры, УстанавливатьХарактеристикамБезЦен,
	ПоказыватьНедействительныеХарактеристики = Ложь, МассивХарактеристик = Неопределено) Экспорт
	
	ДеревоНоменклатуры = Новый ДеревоЗначений;
	
	// 1. Получим СКД
	СхемаКомпоновкиДанных = ПолучитьМакет("ПоНоменклатуре");
	
	// 2. создаем настройки для схемы 
	НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		
		НастройкиКомпоновкиДанных.Структура[0].Структура[0].Использование = Ложь;
		
	КонецЕсли;
	
	// 2.1 установим значения параметров
	ПараметрКД = СхемаКомпоновкиДанных.Параметры.Найти("МассивНоменклатуры");
	ПараметрКД.Значение = МассивНоменклатуры;
	
	// 3. готовим макет 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, , , Тип(
		"ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// 4. исполняем макет 
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет);
	ПроцессорКомпоновки.Сбросить();
	
	// 5. выводим результат 
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДеревоНоменклатуры);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	СтруктураТаблицДанных = РазобратьДеревоНоменклатуры(ДеревоНоменклатуры, ПоказыватьНедействительныеХарактеристики);
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(СтруктураТаблицДанных);
	
	Возврат АдресВременногоХранилища;
	
КонецФункции

Функция РазобратьМассивНоменклатурыИХарактеристикПоДокументу(Запасы, УстанавливатьХарактеристикамБезЦен,
	ПоказыватьНедействительныеХарактеристики = Ложь) Экспорт
	
	ДеревоНоменклатуры = Новый ДеревоЗначений;	
	СхемаКомпоновкиДанных = ПолучитьМакет("ПоДокументу");
	
	НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию; 	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда  		
		НастройкиКомпоновкиДанных.Структура[0].Структура[0].Использование = Ложь;   		
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Запасы", Запасы);
	Запрос.Текст =
	"ВЫБРАТЬ 
	|	* 
	|ПОМЕСТИТЬ Запасы
	|ИЗ &Запасы КАК Запасы";
	Запрос.Выполнить();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, , , Тип(
		"ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет, , , , , МенеджерВременныхТаблиц);
	ПроцессорКомпоновки.Сбросить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДеревоНоменклатуры);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ТаблицаЦен = Новый ТаблицаЗначений;	
	СхемаКомпоновкиДанных = ПолучитьМакет("ЦеныПоДокументу");
	
	НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию; 	
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, , , Тип(
		"ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет, , , , , МенеджерВременныхТаблиц);
	ПроцессорКомпоновки.Сбросить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаЦен);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	СтруктураТаблицДанных = РазобратьДеревоНоменклатуры(ДеревоНоменклатуры, ПоказыватьНедействительныеХарактеристики);
	СтруктураТаблицДанных.Вставить("ТаблицаЦен", ТаблицаЦен);
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(СтруктураТаблицДанных);
	
	Возврат АдресВременногоХранилища;
	
КонецФункции

Процедура ЗаполнитьЗапасыПоОчередиРасчета(Запасы, ВидЦеныРасчетный, ПоказыватьХарактеристики, ПериодЗаписи = Неопределено) Экспорт 	
	
	Если ПериодЗаписи = Неопределено Тогда
		ПериодЗаписи = ПолучитьМаксимальныйПериодЗаписиИзОчереди(ВидЦеныРасчетный);
	КонецЕсли;
	
	Если ПериодЗаписи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ПериодЗаписи",				ПериодЗаписи);
	ПараметрыРасчета.Вставить("ВидЦенРасчетный",			ВидЦеныРасчетный);
	ПараметрыРасчета.Вставить("НомерОчередиЦен",			0);
	ПараметрыРасчета.Вставить("УникальныйИдентификатор", 	Новый УникальныйИдентификатор());
	ПараметрыРасчета.Вставить("АдресВХранилище",			Неопределено);
	ПараметрыРасчета.Вставить("ПересчетЗаТекущийПериод", 	Ложь);
	
	КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПараметрыРасчета.ВидЦенРасчетный.ВалютаЦены, ПараметрыРасчета.ПериодЗаписи);
	ПараметрыРасчета.Вставить("ВидЦенРасчетныйКурс", ?(ЗначениеЗаполнено(КурсВалюты.Курс), КурсВалюты.Курс, 1));
	ПараметрыРасчета.Вставить("ВидЦенРасчетныйКратность", ?(ЗначениеЗаполнено(КурсВалюты.Кратность), КурсВалюты.Кратность, 1));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", НачалоДня(ПараметрыРасчета.ПериодЗаписи));
	Запрос.УстановитьПараметр("ВидЦенРасчетный", ПараметрыРасчета.ВидЦенРасчетный);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОчередьЦен.ПериодЗаписи КАК ПериодЗаписи,
	|	ОчередьЦен.НомерОчередиЦен КАК НомерОчередиЦен,
	|	ОчередьЦен.ВидЦенРасчетный КАК ВидЦенРасчетный
	|ИЗ
	|	РегистрСведений.ОчередьРасчетаЦен КАК ОчередьЦен
	|ГДЕ
	|	ОчередьЦен.ПериодЗаписи = &Период
	|	И ОчередьЦен.ВидЦенРасчетный = &ВидЦенРасчетный
	|	И НЕ ОчередьЦен.ПересчетВыполнен
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодЗаписи,
	|	НомерОчередиЦен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ТаблицаЗаполнения = Запасы.Выгрузить();
	ТаблицаЗаполнения.Очистить();
	КолонкиГруппировок = "Номенклатура, Характеристика, ЕдиницаИзмерения, ВидЦены, Цена, ЦенаСтарая";
	Пока Выборка.Следующий() Цикл
		
		ПараметрыРасчета.НомерОчередиЦен = Выборка.НомерОчередиЦен;
		
		ЦеныРассчитаны	= Ложь;
		ОписаниеОшибки	= "";
		Если ВидЦеныРасчетный.ТипВидаЦен = Перечисления.ТипыВидовЦен.ДинамическийПроцент Тогда
			
			ЦенообразованиеСервер.РасчетДинамическихЦенНаПроцент(ПараметрыРасчета, ЦеныРассчитаны, ОписаниеОшибки, Ложь);
			
		ИначеЕсли ВидЦеныРасчетный.ТипВидаЦен = Перечисления.ТипыВидовЦен.ДинамическийФормула Тогда
			
			ЦенообразованиеСервер.РасчетДинамическихЦенПоФормуле(ПараметрыРасчета, ЦеныРассчитаны, ОписаниеОшибки, Ложь);
			
		КонецЕсли;
		
		Если ЦеныРассчитаны Тогда
									
			ЗаписиРегистраЗаПериод = ПолучитьИзВременногоХранилища(ПараметрыРасчета.АдресВХранилище); 
			
			МассивВидовЦен = Новый Массив;
			МассивВидовЦен.Добавить(Выборка.ВидЦенРасчетный);                                     
			ЦенообразованиеСервер.ИзменитьЦенуВТаблицеПоПорогамСрабатывания(ЗаписиРегистраЗаПериод, МассивВидовЦен, Выборка.ПериодЗаписи);
			
			Для каждого СтрокаТаблицы Из ЗаписиРегистраЗаПериод Цикл
						
				НоваяСтрока = ТаблицаЗаполнения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.ВидЦены = ВидЦеныРасчетный;
				НоваяСтрока.Цена = СтрокаТаблицы.Цена;
				Если НЕ ПоказыватьХарактеристики Тогда
					ПоказыватьХарактеристики = ЗначениеЗаполнено(НоваяСтрока.Характеристика);
				КонецЕсли;				
				
			КонецЦикла; 			
			ТаблицаЗаполнения.Свернуть(КолонкиГруппировок);
		КонецЕсли
		
	КонецЦикла;
	Запасы.Загрузить(ТаблицаЗаполнения);
	
КонецПроцедуры

Функция ПолучитьМаксимальныйПериодЗаписиИзОчереди(ВидЦенРасчетный)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	               |	РС.ПериодЗаписи КАК ПериодЗаписи
	               |ИЗ
	               |	РегистрСведений.ОчередьРасчетаЦен КАК РС
	               |ГДЕ
	               |	РС.ВидЦенРасчетный = &ВидЦенРасчетный
	               |	И РС.ВидЦенРасчетный.КоличествоПопытокСлужебный < 2
	               |	И НЕ РС.ВидЦенРасчетный.РассчитыватьАвтоматически
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	РС.ПериодЗаписи УБЫВ";
	
	Запрос.УстановитьПараметр("ВидЦенРасчетный", ВидЦенРасчетный);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ПериодЗаписи;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

Процедура ЗаполнитьЦеныРасширенийПоДаннымИБ(Знач ПоказыватьНедействительныеХарактеристики, Знач СтруктураПараметров,
	Знач ТаблицаНоменклатуры, Знач УстанавливатьХарактеристикамБезЦен)

	АдресХранилища = РазобратьМассивНоменклатурыИХарактеристикПоДокументу(ТаблицаНоменклатуры,
		УстанавливатьХарактеристикамБезЦен, ПоказыватьНедействительныеХарактеристики);

	СтруктураЦен = ПолучитьИзВременногоХранилища(АдресХранилища);
	ТаблицаРасчетныхЦенНоменклатуры = ПолучитьТаблицуРасчетныхЦенРасширения(СтруктураЦен.ТаблицаНоменклатуры,
		СтруктураПараметров.ВыбранныеВидыЦен);
	ТаблицаРасчетныхЦенХарактеристик = ПолучитьТаблицуРасчетныхЦенРасширения(СтруктураЦен.ТаблицаХарактеристик,
		СтруктураПараметров.ВыбранныеВидыЦен);

	УстановитьЦеныВТаблицыФормыПослеРасчета(СтруктураПараметров, СтруктураЦен, ТаблицаРасчетныхЦенНоменклатуры,
		ТаблицаРасчетныхЦенХарактеристик, Перечисления.ТипыВидовЦен.Расширение);

КонецПроцедуры

Процедура УстановитьЦеныВТаблицыФормыПослеРасчета(Знач СтруктураПараметров, Знач СтруктураЦен,
	Знач ТаблицаРасчетныхЦенНоменклатуры, Знач ТаблицаРасчетныхЦенХарактеристик, Знач ТипВидаЦен)
	
	Перем ДополнительноеПоле, ЗначениеЦены, ИмяТабличнойЧасти, МассивПолей, ОтборНаФорме, 
		ОтборРасчетныхЦен, ПолеДельта, ПолеЕдиницаИзмерения, ПолеЦенаНовая, ПолеЦенаСтарая, 
		СтрокаТабличнойЧасти, СтрокаЦен, Строки, СтрокиРасчетныхЦен, СтруктураТабличныхЧастей, 
		ТаблицаРасчетныхЦен, ТабличнаяЧасть;
	
	СтруктураТабличныхЧастей = Новый Структура;
	СтруктураТабличныхЧастей.Вставить("ТЧНоменклатура", Новый Структура("ТаблицаРасчетныхЦен, МассивПолей",
		ТаблицаРасчетныхЦенНоменклатуры, Новый Массив));
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("Характеристика");
	СтруктураТабличныхЧастей.Вставить("ТЧХарактеристики", Новый Структура("ТаблицаРасчетныхЦен, МассивПолей",
		ТаблицаРасчетныхЦенХарактеристик, МассивПолей));
	
	Для каждого ТабличнаяЧасть Из СтруктураТабличныхЧастей Цикл
		
		ИмяТабличнойЧасти = ТабличнаяЧасть.Ключ;
		ТаблицаРасчетныхЦен = ТабличнаяЧасть.Значение.ТаблицаРасчетныхЦен;
		
		Для каждого СтрокаЦен Из СтруктураЦен.ТаблицаЦен Цикл
			
			Если СтрокаЦен.ВидЦены.ТипВидаЦен <> ТипВидаЦен Тогда
				Продолжить;
			КонецЕсли;
			
			ПолеЕдиницаИзмерения = ИмяТабличнойЧасти + СтрокаЦен.ВидЦены.ИдентификаторФормул + "_ЕдИзм";
			ПолеЦенаНовая = ИмяТабличнойЧасти + СтрокаЦен.ВидЦены.ИдентификаторФормул + "_ЦенаНовая";
			ПолеЦенаСтарая = ИмяТабличнойЧасти + СтрокаЦен.ВидЦены.ИдентификаторФормул + "_ЦенаДо";
			ПолеДельта = ИмяТабличнойЧасти + СтрокаЦен.ВидЦены.ИдентификаторФормул + "_Дельта";
			ПолеВалютаНовая = ИмяТабличнойЧасти + СтрокаЦен.ВидЦены.ИдентификаторФормул + "_ВалютаНовая";
			ПолеДельтаКартинка = ИмяТабличнойЧасти + СтрокаЦен.ВидЦены.ИдентификаторФормул + "_ДельтаКартинка";
			
			ЗначениеЦены = 0;
			
			ОтборНаФорме = Новый Структура;
			ОтборНаФорме.Вставить("Номенклатура", СтрокаЦен.Номенклатура);
			ОтборНаФорме.Вставить(ПолеЕдиницаИзмерения, СтрокаЦен.ЕдиницаИзмерения);
			
			Для каждого ДополнительноеПоле Из ТабличнаяЧасть.Значение.МассивПолей Цикл
				ОтборНаФорме.Вставить(ДополнительноеПоле, СтрокаЦен[ДополнительноеПоле]);
			КонецЦикла;
			
			Строки = СтруктураПараметров[ИмяТабличнойЧасти].НайтиСтроки(ОтборНаФорме);
			Для каждого СтрокаТабличнойЧасти Из Строки Цикл
				
				ВалютаЦены = СтрокаТабличнойЧасти[ПолеВалютаНовая];
				
				ОтборРасчетныхЦен = Новый Структура;
				ОтборРасчетныхЦен.Вставить("Номенклатура", СтрокаЦен.Номенклатура);
				ОтборРасчетныхЦен.Вставить("ВидЦены", СтрокаЦен.ВидЦены);
				
				Для каждого ДополнительноеПоле Из ТабличнаяЧасть.Значение.МассивПолей Цикл
					ОтборРасчетныхЦен.Вставить(ДополнительноеПоле, СтрокаЦен[ДополнительноеПоле]);
				КонецЦикла;
				
				СтрокиРасчетныхЦен = ТаблицаРасчетныхЦен.НайтиСтроки(ОтборРасчетныхЦен);
				Если СтрокиРасчетныхЦен.Количество() > 0 Тогда
					ЗначениеЦены = СтрокиРасчетныхЦен[0].Цена;
					ВалютаЦены = СтрокиРасчетныхЦен[0].Валюта;
				КонецЕсли;
				
				СтрокаТабличнойЧасти[ПолеЦенаНовая] = ЗначениеЦены;
				СтрокаТабличнойЧасти[ПолеВалютаНовая] = ВалютаЦены;
				СтрокаТабличнойЧасти[ПолеДельта] 	= ЗначениеЦены - СтрокаТабличнойЧасти[ПолеЦенаСтарая];
				Если СтрокаТабличнойЧасти[ПолеДельта] < 0 Тогда
					СтрокаТабличнойЧасти[ПолеДельтаКартинка] = 1;
				ИначеЕсли СтрокаТабличнойЧасти[ПолеДельта] > 0 Тогда
					СтрокаТабличнойЧасти[ПолеДельтаКартинка] = 0;
				Иначе
					СтрокаТабличнойЧасти[ПолеДельтаКартинка] = -1;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти[ПолеЕдиницаИзмерения]) Тогда
					
					СтрокаТабличнойЧасти[ПолеЕдиницаИзмерения] 	= СтрокаТабличнойЧасти.Номенклатура.ЕдиницаИзмерения;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ЗаписьНовыхЦен

Процедура ОпределитьЗаписываемыеЦеныКоллекцииНоменклатуры(КоллекцияНоменклатуры, МассивВидовЦен, ПараметрыКоллекции)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КоллекцияНоменклатуры", КоллекцияНоменклатуры);
	Запрос.УстановитьПараметр("ПериодЗаписи", ПараметрыКоллекции.ПериодЗаписи);
	Запрос.УстановитьПараметр("МассивВидовЦен", МассивВидовЦен);
	Запрос.УстановитьПараметр("ДокументУстановки", ПараметрыКоллекции.ДокументУстановки);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РСЦены.Период КАК Период,
	|	РСЦены.ВидЦен КАК ВидЦен,
	|	РСЦены.ВалютаЦены КАК ВалютаЦены,
	|	РСЦены.Номенклатура КАК Номенклатура,
	|	РСЦены.Характеристика КАК Характеристика,
	|	РСЦены.Цена КАК Цена,
	|	РСЦены.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РСЦены.Актуальность КАК Актуальность,
	|	РСЦены.Автор КАК Автор,
	|	РСЦены.ДокументУстановки КАК ДокументУстановки
	|ПОМЕСТИТЬ ТекущиеЗаписиРегистраЦен
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры КАК РСЦены
	|ГДЕ
	|	РСЦены.Период = &ПериодЗаписи
	|	И РСЦены.ВидЦен В(&МассивВидовЦен)
	|	И РСЦены.Цена <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЦен,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоллекцияНоменклатуры.Период КАК Период,
	|	КоллекцияНоменклатуры.ВидЦен КАК ВидЦен,
	|	КоллекцияНоменклатуры.ВалютаЦены КАК ВалютаЦены,
	|	КоллекцияНоменклатуры.Номенклатура КАК Номенклатура,
	|	КоллекцияНоменклатуры.Характеристика КАК Характеристика,
	|	КоллекцияНоменклатуры.Цена КАК Цена,
	|	КоллекцияНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	КоллекцияНоменклатуры.Актуальность КАК Актуальность,
	|	КоллекцияНоменклатуры.Автор КАК Автор,
	|	&ДокументУстановки КАК ДокументУстановки
	|ПОМЕСТИТЬ КоллекцияНоменклатуры
	|ИЗ
	|	&КоллекцияНоменклатуры КАК КоллекцияНоменклатуры
	|ГДЕ
	|	КоллекцияНоменклатуры.Цена <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЦен,
	|	Номенклатура,
	|	Характеристика
	|;/////////////////////////////////////////////////////////////////////";
	
	ТекстЗапросаТекущиеЦены = 
	"
	|// Если по ключевым полям в регистре уже имеется запись, то оставляем ее
	|// 
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТекущиеЗаписиРегистраЦен.Период, КоллекцияНоменклатуры.Период) КАК Период
	|	,ЕстьNULL(ТекущиеЗаписиРегистраЦен.Актуальность, КоллекцияНоменклатуры.Актуальность) КАК Актуальность
	|	,ЕстьNULL(ТекущиеЗаписиРегистраЦен.ВидЦен, КоллекцияНоменклатуры.ВидЦен) КАК ВидЦен
	|	,ЕстьNULL(ТекущиеЗаписиРегистраЦен.ВалютаЦены, КоллекцияНоменклатуры.ВалютаЦены) КАК ВалютаЦены
	|	,ЕстьNULL(ТекущиеЗаписиРегистраЦен.Номенклатура, КоллекцияНоменклатуры.Номенклатура) КАК Номенклатура
	|	,ЕстьNULL(ТекущиеЗаписиРегистраЦен.Характеристика, КоллекцияНоменклатуры.Характеристика) КАК Характеристика
	|	,ЕстьNULL(ТекущиеЗаписиРегистраЦен.Цена, КоллекцияНоменклатуры.Цена) КАК Цена
	|	,ЕстьNULL(ТекущиеЗаписиРегистраЦен.ЕдиницаИзмерения, КоллекцияНоменклатуры.ЕдиницаИзмерения) КАК ЕдиницаИзмерения
	|	,ЕстьNULL(ТекущиеЗаписиРегистраЦен.Автор, КоллекцияНоменклатуры.Автор) КАК Автор
	|	,ЕстьNULL(КоллекцияНоменклатуры.ДокументУстановки, Значение(Документ.УстановкаЦенНоменклатуры.ПустаяСсылка)) КАК ДокументУстановки
	|ИЗ ТекущиеЗаписиРегистраЦен КАК ТекущиеЗаписиРегистраЦен
	|	ПОЛНОЕ СОЕДИНЕНИЕ КоллекцияНоменклатуры КАК КоллекцияНоменклатуры
	|		ПО ТекущиеЗаписиРегистраЦен.ВидЦен = КоллекцияНоменклатуры.ВидЦен 
	|			И ТекущиеЗаписиРегистраЦен.Номенклатура = КоллекцияНоменклатуры.Номенклатура 
	|			И ТекущиеЗаписиРегистраЦен.Характеристика = КоллекцияНоменклатуры.Характеристика";
	
	ТекстЗапросаНовыеЦены = 
	"
	|// Записываем новые данные в любом случае и добавляем существующие только тогда, когда в таблице нет записей с такими ключами
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КоллекцияНоменклатуры.Период, ТекущиеЗаписиРегистраЦен.Период) КАК Период
	|	,ЕстьNULL(КоллекцияНоменклатуры.Актуальность, ТекущиеЗаписиРегистраЦен.Актуальность) КАК Актуальность
	|	,ЕстьNULL(КоллекцияНоменклатуры.ВидЦен, ТекущиеЗаписиРегистраЦен.ВидЦен) КАК ВидЦен
	|	,ЕстьNULL(КоллекцияНоменклатуры.ВалютаЦены, ТекущиеЗаписиРегистраЦен.ВалютаЦены) КАК ВалютаЦены
	|	,ЕстьNULL(КоллекцияНоменклатуры.Номенклатура, ТекущиеЗаписиРегистраЦен.Номенклатура) КАК Номенклатура
	|	,ЕстьNULL(КоллекцияНоменклатуры.Характеристика, ТекущиеЗаписиРегистраЦен.Характеристика) КАК Характеристика
	|	,ЕстьNULL(КоллекцияНоменклатуры.Цена, ТекущиеЗаписиРегистраЦен.Цена) КАК Цена
	|	,Выбор КОГДА КоллекцияНоменклатуры.Цена = ТекущиеЗаписиРегистраЦен.Цена
	|		ТОГДА ЕСТЬNULL(ТекущиеЗаписиРегистраЦен.ЕдиницаИзмерения, КоллекцияНоменклатуры.ЕдиницаИзмерения)
	|		ИНАЧЕ ЕСТЬNULL(КоллекцияНоменклатуры.ЕдиницаИзмерения, ТекущиеЗаписиРегистраЦен.ЕдиницаИзмерения) КОНЕЦ КАК ЕдиницаИзмерения
	|	,Выбор КОГДА КоллекцияНоменклатуры.Цена = ТекущиеЗаписиРегистраЦен.Цена
	|		ТОГДА ЕСТЬNULL(ТекущиеЗаписиРегистраЦен.Автор, КоллекцияНоменклатуры.Автор)
	|		ИНАЧЕ ЕСТЬNULL(КоллекцияНоменклатуры.Автор, ТекущиеЗаписиРегистраЦен.Автор) КОНЕЦ КАК Автор
	|	,ЕстьNULL(КоллекцияНоменклатуры.ДокументУстановки, ЕСТЬNULL(ТекущиеЗаписиРегистраЦен.ДокументУстановки, Значение(Документ.УстановкаЦенНоменклатуры.ПустаяСсылка))) КАК ДокументУстановки
	|ИЗ ТекущиеЗаписиРегистраЦен КАК ТекущиеЗаписиРегистраЦен
	|	ПОЛНОЕ СОЕДИНЕНИЕ КоллекцияНоменклатуры КАК КоллекцияНоменклатуры
	|		ПО ТекущиеЗаписиРегистраЦен.ВидЦен = КоллекцияНоменклатуры.ВидЦен 
	|			И ТекущиеЗаписиРегистраЦен.Номенклатура = КоллекцияНоменклатуры.Номенклатура 
	|			И ТекущиеЗаписиРегистраЦен.Характеристика = КоллекцияНоменклатуры.Характеристика";
	
	Запрос.Текст = ТекстЗапроса + ?(ПараметрыКоллекции.ЗаписыватьНовыеЦеныПоверхУстановленных, ТекстЗапросаНовыеЦены,
		ТекстЗапросаТекущиеЦены);
	
	КоллекцияНоменклатуры = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура ДобавитьСтрокуДанныхВКоллекцию(КоллекцияНоменклатуры, МассивВидовЦен, СтрокаДереваДанныхНоменклатура, ПараметрыКоллекции)
	
	Если МассивВидовЦен.Найти(СтрокаДереваДанныхНоменклатура.ВидЦены) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДереваДанныхНоменклатура.Цена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока 						= КоллекцияНоменклатуры.Добавить();
	НоваяСтрока.Период					= ПараметрыКоллекции.ПериодЗаписи;
	НоваяСтрока.ВидЦен					= СтрокаДереваДанныхНоменклатура.ВидЦены;
	НоваяСтрока.Номенклатура			= СтрокаДереваДанныхНоменклатура.Номенклатура;
	НоваяСтрока.ДокументУстановки		= ПараметрыКоллекции.ДокументУстановки;
	НоваяСтрока.ВалютаЦены				= СтрокаДереваДанныхНоменклатура.Валюта;
	
	Если ПараметрыКоллекции.ЕстьКолонкаХарактеристика Тогда
		НоваяСтрока.Характеристика		= СтрокаДереваДанныхНоменклатура.Характеристика;
	КонецЕсли;
	
	НоваяСтрока.Цена					= СтрокаДереваДанныхНоменклатура.Цена;
	НоваяСтрока.ЕдиницаИзмерения		= СтрокаДереваДанныхНоменклатура.ЕдиницаИзмерения;
	НоваяСтрока.Актуальность			= Истина;
	НоваяСтрока.Автор					= ПараметрыКоллекции.АвторизированныйПользователь;
	НоваяСтрока.УстанавливатьХарактеристикамБезЦен	= ПараметрыКоллекции.УстанавливатьХарактеристикамБезЦен;
	
КонецПроцедуры

Процедура ДобавитьСтрокиХарактеристикНоменклатуры(КоллекцияНоменклатуры)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КоллекцияНоменклатуры.Период КАК Период,
	|	КоллекцияНоменклатуры.ВидЦен КАК ВидЦен,
	|	КоллекцияНоменклатуры.ВалютаЦены КАК Валюта,
	|	ВЫРАЗИТЬ(КоллекцияНоменклатуры.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	КоллекцияНоменклатуры.Характеристика КАК Характеристика,
	|	КоллекцияНоменклатуры.Цена КАК Цена,
	|	КоллекцияНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	КоллекцияНоменклатуры.Актуальность КАК Актуальность,
	|	КоллекцияНоменклатуры.Автор КАК Автор,
	|	КоллекцияНоменклатуры.УстанавливатьХарактеристикамБезЦен КАК УстанавливатьХарактеристикамБезЦен
	|ПОМЕСТИТЬ ВсяКоллекцияНоменклатуры
	|ИЗ
	|	&КоллекцияНоменклатуры КАК КоллекцияНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоллекцияНоменклатуры.Период КАК Период,
	|	КоллекцияНоменклатуры.ВидЦен КАК ВидЦен,
	|	КоллекцияНоменклатуры.Валюта КАК Валюта,
	|	ВЫРАЗИТЬ(КоллекцияНоменклатуры.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	КоллекцияНоменклатуры.Характеристика КАК Характеристика,
	|	КоллекцияНоменклатуры.Цена КАК Цена,
	|	КоллекцияНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	КоллекцияНоменклатуры.Актуальность КАК Актуальность,
	|	КоллекцияНоменклатуры.Автор КАК Автор,
	|	КоллекцияНоменклатуры.УстанавливатьХарактеристикамБезЦен КАК УстанавливатьХарактеристикамБезЦен,
	|	КоллекцияНоменклатуры.Номенклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
	|	КоллекцияНоменклатуры.Номенклатура.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики
	|ПОМЕСТИТЬ КоллекцияНоменклатуры
	|ИЗ
	|	ВсяКоллекцияНоменклатуры КАК КоллекцияНоменклатуры
	|ГДЕ
	|	КоллекцияНоменклатуры.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	И НЕ КоллекцияНоменклатуры.Номенклатура.ПроверятьЗаполнениеХарактеристики
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	КатегорияНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоллекцияНоменклатуры.Период КАК Период,
	|	КоллекцияНоменклатуры.ВидЦен КАК ВидЦен,
	|	КоллекцияНоменклатуры.Валюта КАК Валюта,
	|	ВЫРАЗИТЬ(КоллекцияНоменклатуры.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	КоллекцияНоменклатуры.Характеристика КАК Характеристика,
	|	КоллекцияНоменклатуры.Цена КАК Цена,
	|	КоллекцияНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	КоллекцияНоменклатуры.Актуальность КАК Актуальность,
	|	КоллекцияНоменклатуры.Автор КАК Автор,
	|	КоллекцияНоменклатуры.УстанавливатьХарактеристикамБезЦен КАК УстанавливатьХарактеристикамБезЦен,
	|	КоллекцияНоменклатуры.Номенклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
	|	КоллекцияНоменклатуры.Номенклатура.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики
	|ПОМЕСТИТЬ КоллекцияНоменклатурыСХарактеристиками
	|ИЗ
	|	ВсяКоллекцияНоменклатуры КАК КоллекцияНоменклатуры
	|ГДЕ
	|	КоллекцияНоменклатуры.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	И КоллекцияНоменклатуры.Номенклатура.ПроверятьЗаполнениеХарактеристики
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	КатегорияНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоллекцияНоменклатуры.Период КАК Период,
	|	КоллекцияНоменклатуры.ВидЦен КАК ВидЦен,
	|	КоллекцияНоменклатуры.Валюта КАК Валюта,
	|	КоллекцияНоменклатуры.Номенклатура КАК Номенклатура,
	|	КоллекцияНоменклатуры.Характеристика КАК Характеристика1,
	|	КоллекцияНоменклатуры.Цена КАК Цена,
	|	КоллекцияНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	КоллекцияНоменклатуры.Актуальность КАК Актуальность,
	|	КоллекцияНоменклатуры.Автор КАК Автор,
	|	КоллекцияНоменклатуры.УстанавливатьХарактеристикамБезЦен КАК УстанавливатьХарактеристикамБезЦен,
	|	КоллекцияНоменклатуры.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
	|	КоллекцияНоменклатуры.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
	|	СпрХарактеристики.Ссылка КАК Характеристика
	|ПОМЕСТИТЬ НоменклатураХарактеристики
	|ИЗ
	|	КоллекцияНоменклатуры КАК КоллекцияНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
	|		ПО КоллекцияНоменклатуры.Номенклатура = СпрХарактеристики.Владелец
	|			И (КоллекцияНоменклатуры.ИспользоватьХарактеристики = ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоллекцияНоменклатуры.Период КАК Период,
	|	КоллекцияНоменклатуры.ВидЦен КАК ВидЦен,
	|	КоллекцияНоменклатуры.Валюта КАК Валюта,
	|	КоллекцияНоменклатуры.Номенклатура КАК Номенклатура,
	|	КоллекцияНоменклатуры.Характеристика КАК Характеристика1,
	|	КоллекцияНоменклатуры.Цена КАК Цена,
	|	КоллекцияНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	КоллекцияНоменклатуры.Актуальность КАК Актуальность,
	|	КоллекцияНоменклатуры.Автор КАК Автор,
	|	КоллекцияНоменклатуры.УстанавливатьХарактеристикамБезЦен КАК УстанавливатьХарактеристикамБезЦен,
	|	КоллекцияНоменклатуры.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
	|	КоллекцияНоменклатуры.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
	|	СпрХарактеристики.Ссылка КАК Характеристика
	|ПОМЕСТИТЬ КатегорияНоменклатурыХарактеристики
	|ИЗ
	|	КоллекцияНоменклатуры КАК КоллекцияНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
	|		ПО КоллекцияНоменклатуры.КатегорияНоменклатуры = СпрХарактеристики.Владелец
	|			И (КоллекцияНоменклатуры.ИспользоватьХарактеристики = ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоллекцияНоменклатуры.Период КАК Период,
	|	КоллекцияНоменклатуры.ВидЦен КАК ВидЦен,
	|	КоллекцияНоменклатуры.Валюта КАК Валюта,
	|	КоллекцияНоменклатуры.Номенклатура КАК Номенклатура,
	|	КоллекцияНоменклатуры.Характеристика КАК Характеристика,
	|	КоллекцияНоменклатуры.Цена КАК Цена,
	|	КоллекцияНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	КоллекцияНоменклатуры.Актуальность КАК Актуальность,
	|	КоллекцияНоменклатуры.Автор КАК Автор,
	|	КоллекцияНоменклатуры.УстанавливатьХарактеристикамБезЦен КАК УстанавливатьХарактеристикамБезЦен,
	|	КоллекцияНоменклатуры.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
	|	КоллекцияНоменклатуры.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики
	|ПОМЕСТИТЬ ВсяНоменклатураИХарактеристики
	|ИЗ
	|	КоллекцияНоменклатуры КАК КоллекцияНоменклатуры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КоллекцияНоменклатурыСХарактеристиками.Период,
	|	КоллекцияНоменклатурыСХарактеристиками.ВидЦен,
	|	КоллекцияНоменклатурыСХарактеристиками.Валюта,
	|	КоллекцияНоменклатурыСХарактеристиками.Номенклатура,
	|	КоллекцияНоменклатурыСХарактеристиками.Характеристика,
	|	КоллекцияНоменклатурыСХарактеристиками.Цена,
	|	КоллекцияНоменклатурыСХарактеристиками.ЕдиницаИзмерения,
	|	КоллекцияНоменклатурыСХарактеристиками.Актуальность,
	|	КоллекцияНоменклатурыСХарактеристиками.Автор,
	|	КоллекцияНоменклатурыСХарактеристиками.УстанавливатьХарактеристикамБезЦен,
	|	КоллекцияНоменклатурыСХарактеристиками.КатегорияНоменклатуры,
	|	КоллекцияНоменклатурыСХарактеристиками.ИспользоватьХарактеристики
	|ИЗ
	|	КоллекцияНоменклатурыСХарактеристиками КАК КоллекцияНоменклатурыСХарактеристиками
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НоменклатураХарактеристики.Период,
	|	НоменклатураХарактеристики.ВидЦен,
	|	НоменклатураХарактеристики.Валюта,
	|	НоменклатураХарактеристики.Номенклатура,
	|	НоменклатураХарактеристики.Характеристика,
	|	НоменклатураХарактеристики.Цена,
	|	НоменклатураХарактеристики.ЕдиницаИзмерения,
	|	НоменклатураХарактеристики.Актуальность,
	|	НоменклатураХарактеристики.Автор,
	|	ЛОЖЬ,
	|	НоменклатураХарактеристики.КатегорияНоменклатуры,
	|	НоменклатураХарактеристики.ИспользоватьХарактеристики
	|ИЗ
	|	НоменклатураХарактеристики КАК НоменклатураХарактеристики
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КатегорияНоменклатурыХарактеристики.Период,
	|	КатегорияНоменклатурыХарактеристики.ВидЦен,
	|	КатегорияНоменклатурыХарактеристики.Валюта,
	|	КатегорияНоменклатурыХарактеристики.Номенклатура,
	|	КатегорияНоменклатурыХарактеристики.Характеристика,
	|	КатегорияНоменклатурыХарактеристики.Цена,
	|	КатегорияНоменклатурыХарактеристики.ЕдиницаИзмерения,
	|	КатегорияНоменклатурыХарактеристики.Актуальность,
	|	КатегорияНоменклатурыХарактеристики.Автор,
	|	ЛОЖЬ,
	|	КатегорияНоменклатурыХарактеристики.КатегорияНоменклатуры,
	|	КатегорияНоменклатурыХарактеристики.ИспользоватьХарактеристики
	|ИЗ
	|	КатегорияНоменклатурыХарактеристики КАК КатегорияНоменклатурыХарактеристики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсяНоменклатураИХарактеристики.Период КАК Период,
	|	ВсяНоменклатураИХарактеристики.ВидЦен КАК ВидЦен,
	|	ВсяНоменклатураИХарактеристики.Валюта КАК ВалютаЦены,
	|	ВсяНоменклатураИХарактеристики.Номенклатура КАК Номенклатура,
	|	ВсяНоменклатураИХарактеристики.Характеристика КАК Характеристика,
	|	ВсяНоменклатураИХарактеристики.Цена КАК Цена,
	|	ВсяНоменклатураИХарактеристики.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВсяНоменклатураИХарактеристики.Актуальность КАК Актуальность,
	|	ВсяНоменклатураИХарактеристики.Автор КАК Автор,
	|	ВсяНоменклатураИХарактеристики.УстанавливатьХарактеристикамБезЦен КАК УстанавливатьХарактеристикамБезЦен,
	|	ВсяНоменклатураИХарактеристики.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
	|	ВсяНоменклатураИХарактеристики.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики
	|ИЗ
	|	ВсяНоменклатураИХарактеристики КАК ВсяНоменклатураИХарактеристики
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВсяНоменклатураИХарактеристики.ВидЦен,
	|	ВсяНоменклатураИХарактеристики.Номенклатура,
	|	ВсяНоменклатураИХарактеристики.Характеристика";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("КоллекцияНоменклатуры", КоллекцияНоменклатуры);
	КоллекцияНоменклатуры = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура СоздатьКоллекциюНоменклатурыПоДеревуДанных(ТаблицаНоменклатуры, КоллекцияНоменклатуры, МассивВидовЦен, ПараметрыКоллекции)
	
	КоллекцияНоменклатуры = Новый ТаблицаЗначений;
	КоллекцияНоменклатуры.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	КоллекцияНоменклатуры.Колонки.Добавить("ВидЦен", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	КоллекцияНоменклатуры.Колонки.Добавить("ВалютаЦены", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	КоллекцияНоменклатуры.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	КоллекцияНоменклатуры.Колонки.Добавить("Характеристика",
		Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КоллекцияНоменклатуры.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	КоллекцияНоменклатуры.Колонки.Добавить("ЕдиницаИзмерения",
		Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения, СправочникСсылка.КлассификаторЕдиницИзмерения"));
	КоллекцияНоменклатуры.Колонки.Добавить("Актуальность", Новый ОписаниеТипов("Булево"));
	КоллекцияНоменклатуры.Колонки.Добавить("Автор", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	КоллекцияНоменклатуры.Колонки.Добавить("ДокументУстановки",
		Новый ОписаниеТипов("ДокументСсылка.УстановкаЦенНоменклатуры"));

	КоллекцияНоменклатуры.Колонки.Добавить("УстанавливатьХарактеристикамБезЦен", Новый ОписаниеТипов("Булево"));
	// ::: Дополнительные поля
	КоллекцияНоменклатуры.Колонки.Добавить("КатегорияНоменклатуры",
		Новый ОписаниеТипов("СправочникСсылка.КатегорииНоменклатуры"));
	КоллекцияНоменклатуры.Колонки.Добавить("ИспользоватьХарактеристики", Новый ОписаниеТипов("Булево"));
	
	ПараметрыКоллекции.Вставить("ЕстьКолонкаХарактеристика", Истина);
	ПараметрыКоллекции.Вставить("ИмяТабличнойЧасти", "ТЧНоменклатура");
	
	Для каждого СтрокаДереваДанныхНоменклатура Из ТаблицаНоменклатуры Цикл
		
		ДобавитьСтрокуДанныхВКоллекцию(КоллекцияНоменклатуры, МассивВидовЦен, СтрокаДереваДанныхНоменклатура, ПараметрыКоллекции);
		
	КонецЦикла;
	
	Если ПараметрыКоллекции.УстанавливатьХарактеристикамБезЦен Тогда
		
		ДобавитьСтрокиХарактеристикНоменклатуры(КоллекцияНоменклатуры);
		
	КонецЕсли;
	
	Если ПараметрыКоллекции.ЗаписьМенеджером <> Истина Тогда
		
		ОпределитьЗаписываемыеЦеныКоллекцииНоменклатуры(КоллекцияНоменклатуры, МассивВидовЦен, ПараметрыКоллекции);
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьНовыеЦены(СтруктураДанных, ФоновоеЗаданиеАдресХранилища = "") Экспорт
	Перем КоллекцияНоменклатуры;
	
	ПараметрыКоллекции = Новый Структура;
	ПараметрыКоллекции.Вставить("ПериодЗаписи", СтруктураДанных.ПериодЗаписи);
	ПараметрыКоллекции.Вставить("АвторизированныйПользователь", СтруктураДанных.КэшЗначений.АвторизированныйПользователь);
	ПараметрыКоллекции.Вставить("ПоказыватьХарактеристики", СтруктураДанных.ПоказыватьХарактеристики);
	ПараметрыКоллекции.Вставить("УстанавливатьХарактеристикамБезЦен", СтруктураДанных.УстанавливатьХарактеристикамБезЦен);
	ПараметрыКоллекции.Вставить("ЗаписыватьНовыеЦеныПоверхУстановленных", СтруктураДанных.ЗаписыватьНовыеЦеныПоверхУстановленных);
	ПараметрыКоллекции.Вставить("ДокументУстановки", СтруктураДанных.ДокументУстановки);
	ПараметрыКоллекции.Вставить("ЗаписьМенеджером", Ложь);
	
	МассивВидовЦен = Новый Массив;
	Для каждого ЭлементСоответствия Из СтруктураДанных.КэшЗначений.ВыбранныеВидыЦен Цикл
		
		Если СтруктураДанных.КэшЗначений.ИсключенныеВидыЦен.Найти(ЭлементСоответствия) = Неопределено
			И МассивВидовЦен.Найти(ЭлементСоответствия) = Неопределено Тогда
			
			МассивВидовЦен.Добавить(ЭлементСоответствия);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СоздатьКоллекциюНоменклатурыПоДеревуДанных(СтруктураДанных.ТаблицаНоменклатуры, КоллекцияНоменклатуры, МассивВидовЦен, ПараметрыКоллекции);
	
	Если ПараметрыКоллекции.ЗаписьМенеджером = Истина Тогда
		
		ЗаписатьНовыеЦеныМенеджером(КоллекцияНоменклатуры, ПараметрыКоллекции);
		
	Иначе
		
		ЗаписатьНовыеЦеныНабором(КоллекцияНоменклатуры, МассивВидовЦен, ПараметрыКоллекции);
		
	КонецЕсли;
	
	УдалитьЗаписиОчередиРасчетаЦен(СтруктураДанных.ТаблицаНоменклатуры, МассивВидовЦен, СтруктураДанных.ПериодЗаписи);
	
КонецПроцедуры

Процедура ЗаписатьНовыеЦеныМенеджером(КоллекцияНоменклатуры, ПараметрыКоллекции)
	
	Для Каждого СтрокаКоллекции Из КоллекцияНоменклатуры Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаКоллекции.Цена) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ЗаписьРегистра = РегистрыСведений.ЦеныНоменклатуры.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.Период = ПараметрыКоллекции.ПериодЗаписи;
		ЗаписьРегистра.ВидЦен = СтрокаКоллекции.ВидЦен;
		ЗаписьРегистра.Номенклатура = СтрокаКоллекции.Номенклатура;
		ЗаписьРегистра.Характеристика = СтрокаКоллекции.Характеристика;		
		ЗаписьРегистра.Прочитать();
		
		ЗаписьРегистра.ДокументУстановки = СтрокаКоллекции.ДокументУстановки;
				
		Если ЗначениеЗаполнено(ЗаписьРегистра.Цена)
			И ПараметрыКоллекции.ЗаписыватьНовыеЦеныПоверхУстановленных = Истина Тогда
			
			ЗаписьРегистра.Цена = СтрокаКоллекции.Цена;
			Если ЗначениеЗаполнено(СтрокаКоллекции.ЕдиницаИзмерения) Тогда
				ЗаписьРегистра.ЕдиницаИзмерения = СтрокаКоллекции.ЕдиницаИзмерения;
			КонецЕсли;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ЗаписьРегистра.Цена) Тогда
			
			ЗаполнитьЗначенияСвойств(ЗаписьРегистра, СтрокаКоллекции);
			ЗаписьРегистра.Период = ПараметрыКоллекции.ПериодЗаписи;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
		ЗаписьРегистра.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьНовыеЦеныНабором(КоллекцияНоменклатуры, МассивВидовЦен, ПараметрыКоллекции)
	
	СтруктураОтбора = Новый Структура;
	Для каждого ВидЦен Из МассивВидовЦен Цикл
		
		СтруктураОтбора.Вставить("ВидЦен", ВидЦен);
		СтрокиПоВидуЦен = КоллекцияНоменклатуры.НайтиСтроки(СтруктураОтбора);
		
		ЗаписиРегистра = КоллекцияНоменклатуры.Скопировать(СтрокиПоВидуЦен);
		
		Если ЗаписиРегистра.Количество() > 0 Тогда
			
			НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(ПараметрыКоллекции.ПериодЗаписи, Истина);
			НаборЗаписей.Отбор.ВидЦен.Установить(ВидЦен, Истина);
			НаборЗаписей.Загрузить(ЗаписиРегистра);
			
			НаборЗаписей.ДополнительныеСвойства.Вставить("Проведение", Истина);
			НаборЗаписей.ДополнительныеСвойства.Вставить("РегистрацияНаУзлах", Ложь);
			НаборЗаписей.ДополнительныеСвойства.Вставить("ИсключенныеИзРегистрацииВидыЦен", МассивВидовЦен);
			НаборЗаписей.Записать(Истина);
			
			Товары = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ЗаписиРегистра.ВыгрузитьКолонку("Номенклатура"));
			ЦенообразованиеСервер.ЗарегистрироватьНоменклатуруНаУзлахСайтаИШтрихМ(Товары);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура УдалитьЗаписиОчередиРасчетаЦен(Знач КоллекцияНоменклатуры, Знач МассивВидовЦен, Знач ПериодЗаписи) 
	
	НачатьТранзакцию();
	
	Попытка
		
		ВидыЦенДляИзмененияСтатуса = Новый Массив;
		
		ИсключенныеТипыЦен = Новый Массив;
		ИсключенныеТипыЦен.Добавить(Перечисления.ТипыВидовЦен.Статический);
		ИсключенныеТипыЦен.Добавить(Перечисления.ТипыВидовЦен.ПроизвольныйЗапрос);
		ИсключенныеТипыЦен.Добавить(Перечисления.ТипыВидовЦен.Расширение);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("КоллекцияНоменклатуры", КоллекцияНоменклатуры);
		Запрос.УстановитьПараметр("Период", НачалоДня(ПериодЗаписи));
		Запрос.УстановитьПараметр("ИсключенныеТипыЦен", ИсключенныеТипыЦен);
		Запрос.Текст = "ВЫБРАТЬ
		               |	Коллекция.Номенклатура КАК Номенклатура,
		               |	Коллекция.Характеристика КАК Характеристика,
		               |	&Период КАК Период,
		               |	Коллекция.ВидЦены КАК ВидЦен
		               |ПОМЕСТИТЬ Коллекция
		               |ИЗ
		               |	&КоллекцияНоменклатуры КАК Коллекция
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Номенклатура,
		               |	Характеристика,
		               |	ВидЦен
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ОчередьРасчетаЦен.ПериодЗаписи КАК ПериодЗаписи,
		               |	ОчередьРасчетаЦен.НомерОчередиЦен КАК НомерОчередиЦен,
		               |	ОчередьРасчетаЦен.Номенклатура КАК Номенклатура,
		               |	ОчередьРасчетаЦен.Характеристика КАК Характеристика,
		               |	ОчередьРасчетаЦен.ВидЦенРасчетный КАК ВидЦенРасчетный
		               |ПОМЕСТИТЬ ОчередьРасчета
		               |ИЗ
		               |	РегистрСведений.ОчередьРасчетаЦен КАК ОчередьРасчетаЦен
		               |ГДЕ
		               |	ОчередьРасчетаЦен.ПериодЗаписи = &Период
		               |	И НЕ ОчередьРасчетаЦен.ВидЦенРасчетный.ТипВидаЦен В (&ИсключенныеТипыЦен)
		               |	И НЕ ОчередьРасчетаЦен.ВидЦенРасчетный.ПометкаУдаления
		               |	И НЕ ОчередьРасчетаЦен.ВидЦенРасчетный.РассчитыватьАвтоматически
		               |	И (ОчередьРасчетаЦен.Номенклатура, ОчередьРасчетаЦен.Характеристика) В
		               |			(ВЫБРАТЬ
		               |				Таблица.Номенклатура,
		               |				Таблица.Характеристика
		               |			ИЗ
		               |				Коллекция КАК Таблица)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ОчередьРасчетаЦен.ПериодЗаписи КАК ПериодЗаписи,
		               |	Коллекция.ВидЦен КАК ВидЦенРасчетный,
		               |	Коллекция.Номенклатура КАК Номенклатура,
		               |	ОчередьРасчетаЦен.НомерОчередиЦен КАК НомерОчередиЦен
		               |ИЗ
		               |	Коллекция КАК Коллекция
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ОчередьРасчета КАК ОчередьРасчетаЦен
		               |		ПО Коллекция.Номенклатура = ОчередьРасчетаЦен.Номенклатура
		               |			И Коллекция.Характеристика = ОчередьРасчетаЦен.Характеристика
		               |			И Коллекция.ВидЦен = ОчередьРасчетаЦен.ВидЦенРасчетный
		               |ГДЕ
		               |	ОчередьРасчетаЦен.НомерОчередиЦен ЕСТЬ НЕ NULL 
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	НомерОчередиЦен
		               |ИТОГИ ПО
		               |	НомерОчередиЦен";
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			
			ВыборкаОчереди = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаОчереди.Следующий() Цикл
				
				Выборка = ВыборкаОчереди.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					БлокировкаДанных = Новый БлокировкаДанных;
					ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОчередьРасчетаЦен");
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
					ЭлементБлокировки.УстановитьЗначение("ВидЦенРасчетный", Выборка.ВидЦенРасчетный);
					ЭлементБлокировки.УстановитьЗначение("ПериодЗаписи", Выборка.ПериодЗаписи);
					ЭлементБлокировки.УстановитьЗначение("НомерОчередиЦен", Выборка.НомерОчередиЦен);
					БлокировкаДанных.Заблокировать();
					
					Если ВидыЦенДляИзмененияСтатуса.Найти(Выборка.ВидЦенРасчетный) = Неопределено Тогда
						ВидыЦенДляИзмененияСтатуса.Добавить(Выборка.ВидЦенРасчетный);
					КонецЕсли;
					
					ОчередьРасчетаЦен = РегистрыСведений.ОчередьРасчетаЦен.СоздатьНаборЗаписей();
					ОчередьРасчетаЦен.Отбор.ПериодЗаписи.Установить(Выборка.ПериодЗаписи, Истина);
					ОчередьРасчетаЦен.Отбор.ВидЦенРасчетный.Установить(Выборка.ВидЦенРасчетный, Истина);
					ОчередьРасчетаЦен.Отбор.НомерОчередиЦен.Установить(Выборка.НомерОчередиЦен, Истина);
					ОчередьРасчетаЦен.Прочитать();
					Если ОчередьРасчетаЦен.Количество() > 0 Тогда
						ОчередьРасчетаЦен.Очистить();
						ОчередьРасчетаЦен.Записать(Истина);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			СтатусыОчередиЦен = СтатусыОчередиЦен(ВидыЦенДляИзмененияСтатуса);
			
			Для каждого ВидЦенРасчетный Из ВидыЦенДляИзмененияСтатуса Цикл
				
				ВидЦеныРасчетныйОбъект = ВидЦенРасчетный.ПолучитьОбъект();
				
				ВидЦеныРасчетныйОбъект.Заблокировать();
				
				ЦеныАктуальны = ?(СтатусыОчередиЦен.Получить(ВидЦенРасчетный) = Неопределено, Истина, Ложь);
				ВидЦеныРасчетныйОбъект.ЦеныАктуальны = ЦеныАктуальны;
				
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидЦеныРасчетныйОбъект, Ложь, Ложь);
				ВидЦеныРасчетныйОбъект.Разблокировать();
			
			КонецЦикла;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка удаления очереди цен при проведении документа Установка цен'",
			ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Функция СтатусыОчередиЦен(МассивВидовЦен)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РС.ВидЦенРасчетный КАК ВидЦен,
	|	КОЛИЧЕСТВО(РС.ПериодЗаписи) КоличествоЗаписей
	|ИЗ
	|	РегистрСведений.ОчередьРасчетаЦен КАК РС
	|ГДЕ
	|	РС.ВидЦенРасчетный В (&МассивВидовЦен)
	|	И РС.ВидЦенРасчетный.КоличествоПопытокСлужебный < 2
	|	И НЕ РС.ВидЦенРасчетный.РассчитыватьАвтоматически
	|СГРУППИРОВАТЬ ПО РС.ВидЦенРасчетный
	|";
	
	Запрос.УстановитьПараметр("МассивВидовЦен", МассивВидовЦен);
	РезультатЗапроса = Запрос.Выполнить();
	Результат = Новый Соответствие;
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.Вставить(Выборка.ВидЦен, Выборка.КоличествоЗаписей);
		КонецЦикла;
		
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция ТаблицаЦенПоПриходнымНакладным(МассивПриходныхНакладных, МассивВидовЦен)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивПриходныхНакладных", МассивПриходныхНакладных);
	Запрос.УстановитьПараметр("МассивВидовЦен", МассивВидовЦен);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриходнаяНакладнаяЗапасы.Ссылка.Дата КАК ДатаДокумента,
	|	ПриходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
	|	ПриходнаяНакладнаяЗапасы.Характеристика КАК Характеристика,
	|	ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.Курс КАК КурсДокумента,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.Кратность КАК КратностьДокумента,
	|	МАКСИМУМ(ПриходнаяНакладнаяЗапасы.Цена) КАК Цена,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.ВалютаДокумента КАК ВалютаДокумента
	|ПОМЕСТИТЬ ЗапасыПриходныхНакладных
	|ИЗ
	|	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
	|ГДЕ
	|	ПриходнаяНакладнаяЗапасы.Ссылка В (&МассивПриходныхНакладных)
	|СГРУППИРОВАТЬ ПО
	|	ПриходнаяНакладнаяЗапасы.Номенклатура,
	|	ПриходнаяНакладнаяЗапасы.Характеристика,
	|	ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.ВалютаДокумента,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.Дата,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.Кратность,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.Курс
	|;
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыЦен.Ссылка КАК ВидЦены,
	|	ВидыЦен.ВалютаЦены КАК Валюта
	|ПОМЕСТИТЬ ВидыЦен
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	ВидыЦен.Ссылка В (&МассивВидовЦен)
	|;
	|ВЫБРАТЬ
	|	ЗапасыПриходныхНакладных.ДатаДокумента КАК ДатаДокумента,
	|	ЗапасыПриходныхНакладных.Номенклатура КАК Номенклатура,
	|	ЗапасыПриходныхНакладных.Характеристика КАК Характеристика,
	|	ЗапасыПриходныхНакладных.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗапасыПриходныхНакладных.КурсДокумента КАК КурсДокумента,
	|	ЗапасыПриходныхНакладных.КратностьДокумента КАК КратностьДокумента,
	|	ЗапасыПриходныхНакладных.Цена КАК Цена,
	|	0 КАК ЦенаСтарая,
	|	ЗапасыПриходныхНакладных.ВалютаДокумента КАК Валюта,
	|	ЕСТЬNULL(ВидыЦен.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК ВалютаСтарая,
	|	ЕСТЬNULL(ВидыЦен.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) КАК ВидЦены
	|ИЗ
	|	ЗапасыПриходныхНакладных КАК ЗапасыПриходныхНакладных
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВидыЦен КАК ВидыЦен
	|		ПО ИСТИНА";
	
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ЗаполнитьВидыЦенКПересчету(ВидыЦенКПересчету, ВыбранныеВидыЦен, ИдентификаторТекущегоВидаЦен)
	
	Для каждого ЭлементСоответствия Из ВыбранныеВидыЦен Цикл
		
		Если ЭлементСоответствия.Ключ.ИдентификаторФормул = ИдентификаторТекущегоВидаЦен Тогда
			
			ВидыЦенКПересчету.Вставить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
			Возврат;
			
		Иначе
			
			 ЗаполнитьВидыЦенКПересчету(ВидыЦенКПересчету, ЭлементСоответствия.Значение, ИдентификаторТекущегоВидаЦен)
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьФлагИспользованияВДереве(ПодчиненнаяСтрокаВидаЦен, РодительскаяСтрокаВидаЦен,
	ВидыЦенВыбраныПриЗаполнении, МассивВидовЦен)
	
	ВидыЦенЕстьВМассиве = МассивВидовЦен.Найти(ПодчиненнаяСтрокаВидаЦен.ВидЦен) <> Неопределено
			Или МассивВидовЦен.Найти(РодительскаяСтрокаВидаЦен.ВидЦен) <> Неопределено;
	
	Если РодительскаяСтрокаВидаЦен.Использование И ВидыЦенЕстьВМассиве Тогда
		
		ПодчиненнаяСтрокаВидаЦен.Использование = Истина;
		
	КонецЕсли;
	
	Если ПодчиненнаяСтрокаВидаЦен.Использование Тогда
		
		РодительскаяСтрокаВидаЦен.Использование = Истина;
		ВидыЦенВыбраныПриЗаполнении = Истина;
		
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьИспользованиеВидаЦенВверхПоДереву(ДанныеСтроки, Знач Использование)
	
	ДанныеСтроки.Использование = Использование;
	РодительСтроки = ДанныеСтроки.Родитель;
	Если РодительСтроки <> Неопределено Тогда
		
		УстановитьИспользованиеВидаЦенВверхПоДереву(РодительСтроки, Использование);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПризнакиИспользованияВДеревеВидовЦен(ДеревоРезультата)
	
	Для каждого ГруппаВидовЦен Из ДеревоРезультата.Строки Цикл
	
		Для каждого БазовыйВидЦен Из ГруппаВидовЦен.Строки Цикл
		
			Для каждого ПодчиненныйВидЦены Из БазовыйВидЦен.Строки Цикл
			
				УстановитьПризнакИспользованияДляСтрокиДерева(ПодчиненныйВидЦены, ДеревоРезультата);
			
			КонецЦикла;
		
		КонецЦикла;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПризнакИспользованияДляСтрокиДерева(ПодчиненныйВидЦены, Знач ДеревоРезультата)
	
	Использование = ПодчиненныйВидЦены.Использование;
	Если Использование Тогда
		
		РодительСтроки = ПодчиненныйВидЦены.Родитель;
		Если РодительСтроки <> Неопределено Тогда
			
			УстановитьИспользованиеВидаЦенВверхПоДереву(РодительСтроки, Использование);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗависимыеЭлементы = ПодчиненныйВидЦены.Строки;
	
	Для каждого Зависимый Из ЗависимыеЭлементы Цикл
		
		УстановитьПризнакИспользованияДляСтрокиДерева(Зависимый, ДеревоРезультата);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрименитьПорогиСрабатыванияДляТаблицыРасчетныхЦен(ТаблицаРасчета, Знач ПараметрыРасчета)
	
	Перем СтрокаТаблицыПорогов, ТаблицаДляРасчетаПорогов;
	
	ТаблицаДляРасчетаПорогов = ТаблицаРасчета.Скопировать(, "Номенклатура, Характеристика, ЕдиницаИзмерения, ЗначениеЦеныРасчетной, ВидЦенРасчетный, КлючСвязи");
	ТаблицаДляРасчетаПорогов.Колонки.ЗначениеЦеныРасчетной.Имя = "Цена";
	ТаблицаДляРасчетаПорогов.Колонки.ВидЦенРасчетный.Имя = "ВидЦен";
	ЦенообразованиеСервер.ИзменитьЦенуВТаблицеПоПорогамСрабатывания(ТаблицаДляРасчетаПорогов, Неопределено, ПараметрыРасчета.Период);
	
	Для каждого СтрокаТаблицыПорогов Из ТаблицаДляРасчетаПорогов Цикл
		
		ТаблицаРасчета[СтрокаТаблицыПорогов.КлючСвязи].ЗначениеЦеныРасчетной = СтрокаТаблицыПорогов.Цена;
		
	КонецЦикла;

КонецПроцедуры

Процедура ОпределитьЗаполняемыеВидыЦен(Результат, ВидыЦенКПересчету, КэшЗначений)
	
	ВидыЦенКПересчету = Новый Соответствие;
	
	Если Результат.ЗаполнятьПоТекущемуВидуЦен = 1 Тогда
		
		ВидыЦенКПересчету = КэшЗначений.ВыбранныеВидыЦен;
		
	Иначе
		
		ЗаполнитьВидыЦенКПересчету(ВидыЦенКПересчету, КэшЗначений.ВыбранныеВидыЦен, Результат.ИдентификаторТекущегоВидаЦен);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОкруглитьЦену(Число, ВидЦен, Результат)
	
	СтруктураОкругления = Новый Структура;
	ПсихологическоеОкругление = 0;
	Если Результат.Свойство("ВариантИзменения")
		И Результат.ВариантИзменения = "Округление" Тогда
		
		// параметры округления получены из формы в режиме округления
		Если Результат.Свойство("ПсихологическоеОкругление") 
			И ЗначениеЗаполнено(Результат.ПсихологическоеОкругление) Тогда
					
			ПсихологическоеОкругление = Результат.ПсихологическоеОкругление;
			
		КонецЕсли;  
		
		СтруктураОкругления.Вставить("ПорядокОкругления", Результат.ОкруглениеПорядок);
		СтруктураОкругления.Вставить("ОкруглятьВБольшуюСторону", Результат.ОкруглениеВБольшуюСторону);		
		СтруктураОкругления.Вставить("ПсихологическоеОкругление", ПсихологическоеОкругление);
		
	Иначе
		
		// параметры округления надо получить из объекта		
		КоличествоСтрок = ВидЦен.ПравилаОкругленияЦены.Количество();
		
		Если КоличествоСтрок = 0 Тогда
			
			// распределения по диапазонам нет, возьмем из объекта
			ПорядокОкругления = ВидЦен.ПорядокОкругления;
			Если НЕ ЗначениеЗаполнено(ПорядокОкругления) Тогда								
				ПорядокОкругления	= Перечисления.ПорядкиОкругления.Окр0_01; 				
			КонецЕсли; 			
						
			СтруктураОкругления.Вставить("ПорядокОкругления", ПорядокОкругления);
			СтруктураОкругления.Вставить("ОкруглятьВБольшуюСторону", ВидЦен.ОкруглятьВБольшуюСторону);
			СтруктураОкругления.Вставить("ПсихологическоеОкругление", ВидЦен.ПсихологическоеОкругление);			
			
		Иначе
			
			// есть распределение по диапазонам
			Для Индекс = 1 По КоличествоСтрок Цикл
				
				ПравилаОкругления = ВидЦен.ПравилаОкругленияЦены[КоличествоСтрок - Индекс];
				
				Если ПравилаОкругления.НижняяГраницаДиапазонаЦен <= Число Тогда
									
					СтруктураОкругления = Новый Структура;
					ПорядокОкругления = ПравилаОкругления.ТочностьОкругления;
					Если НЕ ЗначениеЗаполнено(ПорядокОкругления) Тогда								
						ПорядокОкругления	= Перечисления.ПорядкиОкругления.Окр0_01; 				
					КонецЕсли;
					СтруктураОкругления.Вставить("ПорядокОкругления", ПорядокОкругления);					
					СтруктураОкругления.Вставить("ОкруглятьВБольшуюСторону", ВидЦен.ОкруглятьВБольшуюСторону);
					СтруктураОкругления.Вставить("ПсихологическоеОкругление", ПравилаОкругления.ПсихологическоеОкругление);
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	ОкруглитьЦенуПоПравилу(Число, СтруктураОкругления);
	
КонецПроцедуры

Процедура ОкруглитьЦенуПоПравилу(Число, СтруктураОкругления)
		
	ОкруглятьВБольшуюСторону = СтруктураОкругления.ОкруглятьВБольшуюСторону;
	ПорядокОкругления = СтруктураОкругления.ПорядокОкругления;
	ПсихологическоеОкругление = СтруктураОкругления.ПсихологическоеОкругление;
	
	Если НЕ ЗначениеЗаполнено(ПорядокОкругления) Тогда
		Возврат;
	КонецЕсли;

	Порядок = Число(Строка(ПорядокОкругления)); 
	
	// вычислим количество интервалов, входящих в число
	КоличествоИнтервал	= Число / Порядок;
	
	// вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервал);
	
	Если КоличествоИнтервал = КоличествоЦелыхИнтервалов Тогда
		
		// Числа поделились нацело. Округлять не нужно.
		
	Иначе
		
		Если ОкруглятьВБольшуюСторону Тогда
			
			// При порядке округления "0.05" 0.371 должно округлиться до 0.4
			Число = Порядок * (КоличествоЦелыхИнтервалов + 1);
			
		Иначе
			
			// При порядке округления "0.05" 0.371 должно округлиться до 0.35,
			// а 0.376 до 0.4
			Число = Порядок * Окр(КоличествоИнтервал, 0, РежимОкругления.Окр15как20);
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Число = ЦенообразованиеКлиентСервер.ПрименитьПсихологическоеОкругление(Число, ПсихологическоеОкругление);
		
КонецПроцедуры

Процедура ИзменитьЦеныПоПравилу(Строка, СтруктураПараметров, ДополнительныеПараметры)
	
	КурсыВалютДокумента = СтруктураПараметров.КурсыВалютДокумента;
	
	Для каждого ЭлементСоответствия Из ДополнительныеПараметры.ВидыЦенКПересчету Цикл
		
		ВидЦен					= ЭлементСоответствия.Ключ;
		Идентификатор 			= ДополнительныеПараметры.ИмяТабличнойЧасти + ВидЦен.ИдентификаторФормул;
		
		ИмяКолонкиЦенаДо		= Идентификатор + "_ЦенаДо";
		ИмяКолонкиДельта		= Идентификатор + "_Дельта";
		ИмяКолонкиДельтаКартинка =  Идентификатор + "_ДельтаКартинка";
		ИмяКолонкиЕдИзм			= Идентификатор + "_ЕдИзм";
		ИмяКолонкиЦенаНовая		= Идентификатор + "_ЦенаНовая";
		ИмяКолонкиЦенуИзменили	= Идентификатор + "_ЦенуИзменили";
		ИмяКолонкиВалютаНовая	= Идентификатор + "_ВалютаНовая";
		ИмяКолонкиВалютаДельта	= Идентификатор + "_ВалютаДельта";
		
		ИндивидуальныйРасчетДельта = Ложь;
		Если СтруктураПараметров.ВариантИзменения = "Сумма" Тогда
			
			Строка[ИмяКолонкиЦенаНовая] 	= Строка[ИмяКолонкиЦенаНовая] + СтруктураПараметров.Сумма;
			Строка[ИмяКолонкиЦенуИзменили]	= Истина;
			
		ИначеЕсли СтруктураПараметров.ВариантИзменения = "Процент" Тогда
			
			Строка[ИмяКолонкиЦенаНовая]		= Строка[ИмяКолонкиЦенаНовая] * (1 + СтруктураПараметров.Процент / 100);
			Строка[ИмяКолонкиЦенуИзменили]	= Истина;
			
		ИначеЕсли СтруктураПараметров.ВариантИзменения = "Округление" Тогда
			
			ОкруглитьЦену(Строка[ИмяКолонкиЦенаНовая], ВидЦен, СтруктураПараметров);
			Строка[ИмяКолонкиЦенуИзменили] = Истина;
			
		ИначеЕсли СтруктураПараметров.ВариантИзменения = "Валюта" Тогда
			
			Если ВидЦен.НесколькоВалютДляЦен Тогда
				
				СтруктураКурсаНовойВалюты = КурсыВалютДокумента.Получить(СтруктураПараметров.Валюта); 
					
				СтруктураКурсаТекущейВалюты = КурсыВалютДокумента.Получить(Строка[ИмяКолонкиВалютаНовая]);
				
				Если СтруктураПараметров.ПересчитатьПоКурсу Тогда
					
					Строка[ИмяКолонкиЦенаНовая] = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
							Строка[ИмяКолонкиЦенаНовая],
							СтруктураКурсаТекущейВалюты.Курс, СтруктураКурсаНовойВалюты.Курс, 
							СтруктураКурсаТекущейВалюты.Кратность, СтруктураКурсаНовойВалюты.Кратность);
					
				КонецЕсли;
				
				ЦенаДоВНовойВалюте = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
						Строка[ИмяКолонкиЦенаДо],
						СтруктураКурсаТекущейВалюты.Курс, СтруктураКурсаНовойВалюты.Курс, 
						СтруктураКурсаТекущейВалюты.Кратность, СтруктураКурсаНовойВалюты.Кратность);
				
				Строка[ИмяКолонкиДельта] = Строка[ИмяКолонкиЦенаНовая] - ЦенаДоВНовойВалюте;
				
				Если Строка[ИмяКолонкиДельта] > 0 Тогда
					Строка[ИмяКолонкиДельтаКартинка] = 0;
				ИначеЕсли Строка[ИмяКолонкиДельта] < 0 Тогда
					Строка[ИмяКолонкиДельтаКартинка] = 1;
				Иначе
					Строка[ИмяКолонкиДельтаКартинка] = -1;
				КонецЕсли;
				
				Строка[ИмяКолонкиВалютаНовая] = СтруктураПараметров.Валюта;
				Строка[ИмяКолонкиВалютаДельта] = СтруктураПараметров.Валюта;
				
			КонецЕсли;
			
		ИначеЕсли СтруктураПараметров.ВариантИзменения = "Очистить" Тогда
			
			Строка[ИмяКолонкиЦенаНовая]		= 0;
			Строка[ИмяКолонкиДельта]		= 0;
			Строка[ИмяКолонкиЦенуИзменили]	= Истина;
			ИндивидуальныйРасчетДельта		= Истина;
			
		КонецЕсли;
		
		ОкруглитьЦену(Строка[ИмяКолонкиЦенаНовая], ВидЦен, СтруктураПараметров);
		
		Если НЕ (ИндивидуальныйРасчетДельта ИЛИ СтруктураПараметров.ВариантИзменения = "Валюта") Тогда
			
			Строка[ИмяКолонкиДельта] = Строка[ИмяКолонкиЦенаНовая] - Строка[ИмяКолонкиЦенаДо];
			Если Строка[ИмяКолонкиДельта] > 0 Тогда
				Строка[ИмяКолонкиДельтаКартинка] = 0;
			ИначеЕсли Строка[ИмяКолонкиДельта] < 0 Тогда
				Строка[ИмяКолонкиДельтаКартинка] = 1;
			Иначе
				Строка[ИмяКолонкиДельтаКартинка] = -1;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строка[ИмяКолонкиЕдИзм]) Тогда
			
			Строка[ИмяКолонкиЕдИзм] = Строка["Номенклатура"].ЕдиницаИзмерения;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСтруктуруКурсаВалютДляСтроки(ВалютаНовая, СтруктураПараметров, ДополнительныеПараметры)
	
	Перем СтруктураКурса;

	Если ДополнительныеПараметры.Свойство("КурсыВалют") Тогда

		КурсыВалют = ДополнительныеПараметры.КурсыВалют;
		Если КурсыВалют.Получить(ВалютаНовая) <> Неопределено Тогда

			Если КурсыВалют[ВалютаНовая].Получить(СтруктураПараметров.ДатаКурса) <> Неопределено Тогда

				СтруктураКурса = КурсыВалют[ВалютаНовая][СтруктураПараметров.ДатаКурса];

			Иначе

				СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаНовая, СтруктураПараметров.ДатаКурса);

				СоответствиеДаты = КурсыВалют[ВалютаНовая];
				СоответствиеДаты.Вставить(СтруктураКурса.ДатаКурса, СтруктураКурса);

			КонецЕсли;

		Иначе

			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаНовая, СтруктураПараметров.ДатаКурса);

			СоответствиеДаты = Новый Соответствие;
			СоответствиеДаты.Вставить(СтруктураКурса.ДатаКурса, СтруктураКурса);
			КурсыВалют.Вставить(СтруктураКурса.Валюта, СоответствиеДаты);

		КонецЕсли;

	Иначе

		КурсыВалют = Новый Соответствие;
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаНовая, СтруктураПараметров.ДатаКурса);

		СоответствиеДаты = Новый Соответствие;
		СоответствиеДаты.Вставить(СтруктураКурса.ДатаКурса, СтруктураКурса);
		КурсыВалют.Вставить(СтруктураКурса.Валюта, СоответствиеДаты);
		ДополнительныеПараметры.Вставить("КурсыВалют", КурсыВалют);

	КонецЕсли;

	Возврат СтруктураКурса;
	
КонецФункции

Процедура ЗаполнитьСтруктуруБазовыхЦенПоСтрокеФормы(СтруктураБазовыхЦен, Знач РасчетныйВидЦены, Знач ИмяТабличнойЧасти,
	Знач СтрокаТаблицыИсточника, ПараметрыЗаполнения)

	Если РасчетныйВидЦены.ТипВидаЦен = Перечисления.ТипыВидовЦен.ДинамическийПроцент Тогда

		ПрефиксПоля = ИмяТабличнойЧасти + РасчетныйВидЦены.БазовыйВидЦен.ИдентификаторФормул;
		
		СтруктураЗначение = Новый Структура;
		СтруктураЗначение.Вставить("ИдентификаторФормул", РасчетныйВидЦены.БазовыйВидЦен.ИдентификаторФормул);
		СтруктураЗначение.Вставить("ЗначениеЦены", 	СтрокаТаблицыИсточника[ПрефиксПоля + "_ЦенаНовая"]);
		СтруктураЗначение.Вставить("ЗначениеЦеныСтарой", СтрокаТаблицыИсточника[ПрефиксПоля + "_ЦенаДо"]);
		СтруктураЗначение.Вставить("ВалютаЦены", СтрокаТаблицыИсточника[ПрефиксПоля + "_ВалютаНовая"]);

		СтруктураБазовыхЦен.Вставить(РасчетныйВидЦены.БазовыйВидЦен.ИдентификаторФормул, СтруктураЗначение);

	ИначеЕсли РасчетныйВидЦены.ТипВидаЦен = Перечисления.ТипыВидовЦен.ДинамическийФормула Тогда

		ТаблицаОперандов = ЦенообразованиеФормулыСервер.ПолучитьТаблицуОперандовФормулы(ПараметрыЗаполнения.Период,
			РасчетныйВидЦены.Формула, ПараметрыЗаполнения.КэшФормул);
		Для Каждого СтрокаТаблицыОперандов Из ТаблицаОперандов Цикл

			Если СтрокаТаблицыОперандов.ЭтоЦеныНоменклатуры Тогда

				ПрефиксПоля = ИмяТабличнойЧасти + СтрокаТаблицыОперандов.ВидЦен.ИдентификаторФормул;
				ИмяКолонкиЦенаНовая = ПрефиксПоля + "_ЦенаНовая";
				ЗначениеЦенаНовая = 0;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
					СтрокаТаблицыИсточника, ИмяКолонкиЦенаНовая) Тогда

					ЗначениеЦенаНовая = СтрокаТаблицыИсточника[ИмяКолонкиЦенаНовая];

				КонецЕсли;

				ИмяКолонкиЦенаДо = ПрефиксПоля + "_ЦенаДо";
				ЗначениеЦенаДо = 0;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
						СтрокаТаблицыИсточника, ИмяКолонкиЦенаДо) Тогда

					ЗначениеЦенаДо = СтрокаТаблицыИсточника[ЗначениеЦенаДо];

				КонецЕсли;
				
				ВалютаЦены = Неопределено;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
						СтрокаТаблицыИсточника, ПрефиксПоля + "_ВалютаНовая") Тогда

					ВалютаЦены = СтрокаТаблицыИсточника[ПрефиксПоля + "_ВалютаНовая"];

				КонецЕсли;

			Иначе

				СтруктураЗапроса = Новый Структура;
				СтруктураЗапроса.Вставить("ВидЦенКонтрагента", СтрокаТаблицыОперандов.ВидЦен);
				СтруктураЗапроса.Вставить("ДатаОбработки", ПараметрыЗаполнения.Период);
				СтруктураЗапроса.Вставить("Номенклатура", СтрокаТаблицыИсточника.Номенклатура);
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыИсточника,
					"Характеристика") Тогда
					СтруктураЗапроса.Вставить("Характеристика", СтрокаТаблицыИсточника.Характеристика);
				Иначе
					СтруктураЗапроса.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
				КонецЕсли;
				СтруктураЗапроса.Вставить("Коэффициент", 1);
				СтруктураЗапроса.Вставить("ВалютаДокумента", СтрокаТаблицыОперандов.ВидЦен.ВалютаЦены);
				СтруктураЗапроса.Вставить("СуммаВключаетНДС", СтрокаТаблицыОперандов.ВидЦен.ЦенаВключаетНДС);

				ЗначениеЦенаДо = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦенКонтрагента(СтруктураЗапроса);
				ЗначениеЦенаНовая = ЗначениеЦенаДо;

			КонецЕсли;

			СтруктураЗначение = Новый Структура;
			СтруктураЗначение.Вставить("ИдентификаторФормул", СтрокаТаблицыОперандов.ВидЦен.ИдентификаторФормул);
			СтруктураЗначение.Вставить("ЗначениеЦены", ЗначениеЦенаНовая);
			СтруктураЗначение.Вставить("ЗначениеЦеныСтарой", ЗначениеЦенаДо);
			Если Не ЗначениеЗаполнено(ВалютаЦены) Тогда
				ВалютаЦены = СтрокаТаблицыОперандов.ВидЦен.ВалютаЦены;
			КонецЕсли;
			СтруктураЗначение.Вставить("ВалютаЦены", ВалютаЦены);
			
			СтруктураБазовыхЦен.Вставить(СтрокаТаблицыОперандов.ВидЦен.ИдентификаторФормул, СтруктураЗначение);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСлужебныеПоляСтрокиДереваВидовЦен(СтрокаБазовые, Знач ПроизвольныйЗапросПредставление, Знач УникальныйИдентификаторФормы)
	
	Если СтрокаБазовые.Вид = ПроизвольныйЗапросПредставление Тогда
		
		СтрокаУдалена = Ложь;
		ЗаполнитьСлужебныеПоляСКДСтрокиВидаЦены(СтрокаБазовые, УникальныйИдентификаторФормы, СтрокаУдалена);
		
		Если СтрокаУдалена Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
		
	СтрокаБазовые.ПредставлениеРасчета = Справочники.ВидыЦен.ПолучитьПредставлениеСпособаРасчетаВидаЦены(СтрокаБазовые.ВидЦен);
	
	Для каждого СтрокаПодчиненная Из СтрокаБазовые.Строки Цикл
	
		ЗаполнитьСлужебныеПоляСтрокиДереваВидовЦен(СтрокаПодчиненная, ПроизвольныйЗапросПредставление, УникальныйИдентификаторФормы);
	
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьПустуюТаблицуСКолонкамиДерева(КолонкиДерева)
	
	Результат = Новый ТаблицаЗначений;
	Для каждого Колонка Из КолонкиДерева Цикл
	
		Результат.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РассчитатьЗависимыеЦеныПоФормуле(ТаблицаПоТипуЦен, ПараметрыРасчета)
	
	Перем СоответствиеБазовыхЦен;
	
	ПериодЗаписи 			= ?(ПараметрыРасчета.Свойство("Период"), ПараметрыРасчета.Период, ТекущаяДатаСеанса());
	ВключаяХарактеристики 	= ПараметрыРасчета.ВключаяХарактеристики;
	Автор					= ПараметрыРасчета.Автор;
	
	СоответствиеБазовыхЦен	= ?(ПараметрыРасчета.Свойство("СоответствиеБазовыхЦен"), ПараметрыРасчета.СоответствиеБазовыхЦен, Новый Соответствие);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таблица", ТаблицаПоТипуЦен);
	Запрос.УстановитьПараметр("Период", ПериодЗаписи);
	Запрос.УстановитьПараметр("ВключаяХарактеристики", ВключаяХарактеристики);
	Запрос.УстановитьПараметр("Автор", Автор);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(Таблица.ВидЦенРасчетный КАК Справочник.ВидыЦен) КАК ВидЦенРасчетный,
	               |	Таблица.ТипВидаЦен КАК ТипВидаЦен,
	               |	ВЫРАЗИТЬ(Таблица.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	               |	Таблица.Характеристика КАК Характеристика,
	               |	Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки,
	               |	Таблица.ЗначениеЦеныРасчетной КАК ЗначениеЦеныРасчетной,
	               |	Таблица.ЗначениеЦеныСтарой КАК ЗначениеЦеныСтарой,
	               |	Таблица.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	Таблица.Приоритет КАК Приоритет,
	               |	Таблица.ВалютаЦеныРасчетной КАК ВалютаЦеныРасчетной
	               |ПОМЕСТИТЬ Таблица
	               |ИЗ
	               |	&Таблица КАК Таблица
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВидыЦенПоЦеновымГруппам.Ссылка КАК ВидЦенРасчетный,
	               |	ВидыЦенПоЦеновымГруппам.ЦеноваяГруппа КАК ЦеноваяГруппа
	               |ПОМЕСТИТЬ УсловияРасчетаСЦеновымиГруппами
	               |ИЗ
	               |	Справочник.ВидыЦен.ЦеновыеГруппы КАК ВидыЦенПоЦеновымГруппам
	               |ГДЕ
	               |	ВидыЦенПоЦеновымГруппам.Ссылка В
	               |			(ВЫБРАТЬ
	               |				Таблица.ВидЦенРасчетный
	               |			ИЗ
	               |				Таблица КАК Таблица)
	               |	И ВидыЦенПоЦеновымГруппам.БазовыйВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ВидыЦенПоЦеновымГруппам.Ссылка,
	               |	ВидыЦенПоЦеновымГруппам.ЦеноваяГруппа
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	&Период КАК Период,
	               |	ИСТИНА КАК Актуальность,
	               |	ЛОЖЬ КАК ПересчетВыполнен,
	               |	&Автор КАК Автор,
	               |	Таблица.ВидЦенРасчетный КАК ВидЦен,
	               |	Таблица.ТипВидаЦен КАК ТипВидаЦен,
	               |	Таблица.Номенклатура КАК Номенклатура,
	               |	Таблица.Характеристика КАК Характеристика,
	               |	Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки,
	               |	Таблица.ЗначениеЦеныРасчетной КАК Цена,
	               |	Таблица.ЗначениеЦеныРасчетной КАК ЗначениеЦеныРасчетной,
	               |	Таблица.ЗначениеЦеныСтарой КАК ЗначениеЦеныСтарой,
	               |	УсловияРасчетаСЦеновымиГруппами.ЦеноваяГруппа КАК ЦеноваяГруппа,
	               |	ИСТИНА КАК ТребуетсяНовыйРасчет,
	               |	Таблица.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	&ВключаяХарактеристики КАК ВключаяХарактеристики,
	               |	ВЫБОР
	               |		КОГДА УсловияРасчетаСЦеновымиГруппами.ЦеноваяГруппа ЕСТЬ NULL
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ФормулаИзВидаЦен,
	               |	Таблица.ВидЦенРасчетный.ЦеновыеГруппы.(
	               |		Формула КАК ВидЦенРасчетныйФормула,
	               |		ЦеноваяГруппа КАК ВидЦенРасчетныйЦеноваяГруппа
	               |	) КАК ЦеновыеГруппы,
	               |	Таблица.Приоритет КАК Приоритет,
	               |	Таблица.ВалютаЦеныРасчетной КАК ВалютаЦеныРасчетной
	               |ИЗ
	               |	Таблица КАК Таблица
	               |		ЛЕВОЕ СОЕДИНЕНИЕ УсловияРасчетаСЦеновымиГруппами КАК УсловияРасчетаСЦеновымиГруппами
	               |		ПО Таблица.Номенклатура.ЦеноваяГруппа = УсловияРасчетаСЦеновымиГруппами.ЦеноваяГруппа
	               |			И Таблица.ВидЦенРасчетный = УсловияРасчетаСЦеновымиГруппами.ВидЦенРасчетный
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Таблица.Приоритет
	               |ИТОГИ ПО
	               |	ВидЦен";
	РезультатЗапроса = Запрос.Выполнить();
	
	ДеревоПоВидамЦен = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДеревоПоВидамЦен.Колонки.Добавить("Формула", ОбщегоНазначения.ОписаниеТипаСтрока(0)); 
	
	Результат = ПолучитьПустуюТаблицуДляРасчетаЗависимыхЦен();
	
	КлючСвязи = 0;
	Для каждого СтрокаВидаЦен Из ДеревоПоВидамЦен.Строки Цикл
		
		СтрокиПоВидуЦен = СтрокаВидаЦен.Строки;
		
		ТаблицаДляРасчета = СоздатьПустуюТаблицуСКолонкамиДерева(ДеревоПоВидамЦен.Колонки); 
		
		ИспользуемыеФормулы = Новый Массив;
		Для каждого СтрокаПоВидуЦен Из СтрокиПоВидуЦен Цикл
			
			Если СтрокаПоВидуЦен.ФормулаИзВидаЦен Тогда
				
				ИспользуемыеФормулы.Добавить(СтрокаПоВидуЦен.ВидЦен.Формула);
				СтрокаПоВидуЦен.Формула = СтрокаПоВидуЦен.ВидЦен.Формула;
				
			Иначе
				
				НайденаСтрока = СтрокаПоВидуЦен.ЦеновыеГруппы.Найти(СтрокаПоВидуЦен.ЦеноваяГруппа, "ВидЦенРасчетныйЦеноваяГруппа");
				Если НайденаСтрока <> Неопределено Тогда
					
					ИспользуемыеФормулы.Добавить(НайденаСтрока.ВидЦенРасчетныйФормула);
					СтрокаПоВидуЦен.Формула = НайденаСтрока.ВидЦенРасчетныйФормула;
					
				КонецЕсли;
				
			КонецЕсли; 
			
			ЗаписьДляРасчета = ТаблицаДляРасчета.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьДляРасчета, СтрокаПоВидуЦен);
			
			Отбор = Новый Структура("ВидЦенРасчетный, ИдентификаторСтроки", СтрокаВидаЦен.ВидЦен,
				СтрокаПоВидуЦен.ИдентификаторСтроки);
			ЗаписиТаблицыТиповЦен = ТаблицаПоТипуЦен.НайтиСтроки(Отбор);
			Для каждого ЗаписьТаблицыТиповЦен Из ЗаписиТаблицыТиповЦен Цикл
				
				СтруктураБазовыхЦен = ЗаписьТаблицыТиповЦен.СтруктураБазовыхЦен;
				
				Если СоответствиеБазовыхЦен.Получить(СтрокаПоВидуЦен.ИдентификаторСтроки) <> Неопределено Тогда 
					
					ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураБазовыхЦен,
						СоответствиеБазовыхЦен.Получить(СтрокаПоВидуЦен.ИдентификаторСтроки), Истина);
					
				КонецЕсли;
				
				СоответствиеБазовыхЦен.Вставить(СтрокаПоВидуЦен.ИдентификаторСтроки, СтруктураБазовыхЦен);
				
			КонецЦикла;
		
		КонецЦикла;
		
		ПараметрыРасчетаКоллекции = Новый Структура;
		ПараметрыРасчетаКоллекции.Вставить("ВидЦен", СтрокаПоВидуЦен.ВидЦен);
		ПараметрыРасчетаКоллекции.Вставить("ВалютаЦеныРасчетной", СтрокаПоВидуЦен.ВалютаЦеныРасчетной);
		
		КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтрокаПоВидуЦен.ВалютаЦеныРасчетной, ПериодЗаписи);
		ПараметрыРасчетаКоллекции.Вставить("Курс", ?(ЗначениеЗаполнено(КурсВалюты.Курс), КурсВалюты.Курс, 1));
		ПараметрыРасчетаКоллекции.Вставить("Кратность", ?(ЗначениеЗаполнено(КурсВалюты.Кратность), КурсВалюты.Кратность, 1)); 
		
		ПараметрыРасчетаКоллекции.Вставить("СоответствиеБазовыхЦен", СоответствиеБазовыхЦен);
		ПараметрыРасчетаКоллекции.Вставить("КурсыВалютДокумента", ПараметрыРасчета.КурсыВалютДокумента);
		
		ТаблицаОперандов = ЦенообразованиеФормулыСервер.ПолучитьТаблицуОперандовФормулы(ПериодЗаписи, ИспользуемыеФормулы);
		ЦенообразованиеСервер.ЗначенияЦенВТаблицуОперандов(НачалоДня(ПериодЗаписи), ТаблицаОперандов, ТаблицаДляРасчета);
		ЦенообразованиеФормулыСервер.РассчитатьДанныеКоллекции(ТаблицаДляРасчета, ТаблицаОперандов, ПараметрыРасчетаКоллекции);
		
		Для каждого СтрокаТаблицыДляРасчета Из ТаблицаДляРасчета Цикл
		
			НоваяЗапись = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицыДляРасчета);
			
			ЗначениеЦеныРасчетной = СтрокаТаблицыДляРасчета.Цена;
			
			ЗначениеЦеныРасчетной = ЦенообразованиеСервер.ОкруглитьЦенуПоВидуЦен(ЗначениеЦеныРасчетной, СтрокаТаблицыДляРасчета.ВидЦен);
			
			ЗначениеЦеныРасчетной = ПолучитьЦенуСУчетомПороговСрабатывания(ЗначениеЦеныРасчетной, СтрокаТаблицыДляРасчета);
			
			НоваяЗапись.ВидЦенРасчетный = СтрокаТаблицыДляРасчета.ВидЦен;
			НоваяЗапись.ЗначениеЦеныРасчетной = ЗначениеЦеныРасчетной;
			
			НоваяЗапись.ВалютаЦеныСтарой = СтрокаТаблицыДляРасчета.ВидЦен.ВалютаЦены;
			НоваяЗапись.ВалютаЦеныРасчетной = СтрокаТаблицыДляРасчета.ВидЦен.ВалютаЦены;

			СтруктураЗначений = Новый Структура("ЗначениеЦены, ИдентификаторФормул, ВалютаЦены", НоваяЗапись.ЗначениеЦеныРасчетной,
				НоваяЗапись.ВидЦенРасчетный.ИдентификаторФормул, НоваяЗапись.ВалютаЦеныРасчетной);
			СтруктураРассчитаннойЦены = Новый Структура(НоваяЗапись.ВидЦенРасчетный.ИдентификаторФормул,
				СтруктураЗначений);

			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СоответствиеБазовыхЦен[НоваяЗапись.ИдентификаторСтроки],
				СтруктураРассчитаннойЦены, Истина);
			
			НоваяЗапись.КлючСвязи = КлючСвязи;
			КлючСвязи = КлючСвязи + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПрименитьПорогиСрабатыванияДляТаблицыРасчетныхЦен(Результат, ПараметрыРасчета);
	
	Возврат Результат;
	
КонецФункции

Функция РассчитатьЗависимыеЦеныНаПроцент(Знач ТаблицаРасчета, ПараметрыРасчета)
	
	Перем СоответствиеБазовыхЦен;
	
	КурсыВалютДокумента = ПараметрыРасчета.КурсыВалютДокумента;

	СоответствиеБазовыхЦен	= Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таблица", ТаблицаРасчета);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(Таблица.ВидЦенРасчетный КАК Справочник.ВидыЦен) КАК ВидЦенРасчетный,
	               |	Таблица.ТипВидаЦен КАК ТипВидаЦен,
	               |	ВЫРАЗИТЬ(Таблица.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	               |	Таблица.Характеристика КАК Характеристика,
	               |	Таблица.ВалютаЦеныРасчетной КАК ВалютаЦеныРасчетной,
	               |	Таблица.ВалютаЦеныСтарой КАК ВалютаЦеныСтарой,
	               |	Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки,
	               |	Таблица.ИндексВидаЦены КАК ИндексВидаЦены,
	               |	Таблица.Приоритет КАК ПриоритетВидаЦены,
	               |	Таблица.ЗначениеЦеныСтарой КАК ЗначениеЦеныСтарой,
	               |	Таблица.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	               |ПОМЕСТИТЬ Таблица
	               |ИЗ
	               |	&Таблица КАК Таблица
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВидыЦенПоЦеновымГруппам.Ссылка КАК ВидЦенРасчетный,
	               |	ВидыЦенПоЦеновымГруппам.ЦеноваяГруппа КАК ЦеноваяГруппа,
	               |	ВидыЦенПоЦеновымГруппам.БазовыйВидЦен КАК БазовыйВидЦен,
	               |	ВидыЦенПоЦеновымГруппам.Процент КАК Процент
	               |ПОМЕСТИТЬ УсловияРасчетаСЦеновымиГруппами
	               |ИЗ
	               |	Справочник.ВидыЦен.ЦеновыеГруппы КАК ВидыЦенПоЦеновымГруппам
	               |ГДЕ
	               |	ВидыЦенПоЦеновымГруппам.Ссылка В
	               |			(ВЫБРАТЬ
	               |				Таблица.ВидЦенРасчетный
	               |			ИЗ
	               |				Таблица КАК Таблица)
	               |	И ВидыЦенПоЦеновымГруппам.БазовыйВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ВидыЦенПоЦеновымГруппам.Ссылка,
	               |	ВидыЦенПоЦеновымГруппам.ЦеноваяГруппа
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Таблица.ВидЦенРасчетный КАК ВидЦенРасчетный,
	               |	Таблица.ТипВидаЦен КАК ТипВидаЦен,
	               |	Таблица.ВидЦенРасчетный.ИдентификаторФормул КАК ИдентификаторФормул,
	               |	Таблица.ВидЦенРасчетный.БазовыйВидЦен.ИдентификаторФормул КАК ИдентификаторФормулБазовогоВидаЦен,
	               |	Таблица.Номенклатура КАК Номенклатура,
	               |	Таблица.Характеристика КАК Характеристика,
	               |	Таблица.ВалютаЦеныРасчетной КАК ВалютаЦеныРасчетной,
	               |	Таблица.ВалютаЦеныСтарой КАК ВалютаЦеныСтарой,
	               |	Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки,
	               |	Таблица.ИндексВидаЦены КАК ИндексВидаЦены,
	               |	Таблица.ИндексВидаЦены + Таблица.ПриоритетВидаЦены + Таблица.ИдентификаторСтроки КАК КлючПоиска,
	               |	Таблица.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	Таблица.ЗначениеЦеныСтарой КАК ЗначениеЦеныСтарой,
	               |	ЕСТЬNULL(УсловияРасчетаСЦеновымиГруппами.Процент, Таблица.ВидЦенРасчетный.Процент) КАК Процент
	               |ИЗ
	               |	Таблица КАК Таблица
	               |		ЛЕВОЕ СОЕДИНЕНИЕ УсловияРасчетаСЦеновымиГруппами КАК УсловияРасчетаСЦеновымиГруппами
	               |		ПО Таблица.Номенклатура.ЦеноваяГруппа = УсловияРасчетаСЦеновымиГруппами.ЦеноваяГруппа
	               |			И Таблица.ВидЦенРасчетный = УсловияРасчетаСЦеновымиГруппами.ВидЦенРасчетный";
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаСПроцентами = РезультатЗапроса.Выгрузить();
	
	ТаблицаСПроцентами.Индексы.Добавить("КлючПоиска");
	
	КлючСвязи = 0;
	Для каждого СтрокаТаблицыРасчета Из ТаблицаРасчета Цикл 
		
		Если ЗначениеЗаполнено(СтрокаТаблицыРасчета.ЗначениеЦеныРасчетной) Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("КлючПоиска", СтрокаТаблицыРасчета.Приоритет + СтрокаТаблицыРасчета.ИндексВидаЦены
			+ СтрокаТаблицыРасчета.ИдентификаторСтроки);
		СтрокиСПроцентами = ТаблицаСПроцентами.НайтиСтроки(Отбор);
		Для Каждого СтрокаСПроцентом Из СтрокиСПроцентами Цикл

			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыРасчета.СтруктураБазовыхЦен,
				СтрокаСПроцентом.ИдентификаторФормулБазовогоВидаЦен) 
					И СтрокаТаблицыРасчета.ВидЦенРасчетный = СтрокаСПроцентом.ВидЦенРасчетный Тогда
				
				ИдентификаторБазовогоВидаЦен = СтрокаСПроцентом.ИдентификаторФормулБазовогоВидаЦен;
				БазовоеЗначение = СтрокаТаблицыРасчета.СтруктураБазовыхЦен[ИдентификаторБазовогоВидаЦен].ЗначениеЦены;
				БазоваяВалюта = СтрокаТаблицыРасчета.СтруктураБазовыхЦен[ИдентификаторБазовогоВидаЦен].ВалютаЦены;
				
			Иначе
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(БазоваяВалюта)
				И ЗначениеЗаполнено(СтрокаТаблицыРасчета.ВалютаЦеныРасчетной)
				И БазоваяВалюта <> СтрокаТаблицыРасчета.ВалютаЦеныРасчетной Тогда
				
				БазовоеЗначение = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
						БазовоеЗначение, 
						КурсыВалютДокумента[БазоваяВалюта],
						КурсыВалютДокумента[СтрокаТаблицыРасчета.ВалютаЦеныРасчетной]);

			КонецЕсли;

			ЗначениеЦеныРасчетной = БазовоеЗначение * СтрокаСПроцентом.Процент / 100 + БазовоеЗначение;

			ЗначениеЦеныРасчетной = ЦенообразованиеСервер.ОкруглитьЦенуПоВидуЦен(ЗначениеЦеныРасчетной,
				СтрокаСПроцентом.ВидЦенРасчетный);

			СтруктураПорогов = Новый Структура;
			СтруктураПорогов.Вставить("ВидЦен", СтрокаСПроцентом.ВидЦенРасчетный);
			СтруктураПорогов.Вставить("Номенклатура", СтрокаСПроцентом.Номенклатура);
			СтруктураПорогов.Вставить("ЗначениеЦеныСтарой", СтрокаСПроцентом.ЗначениеЦеныСтарой);
			ЗначениеЦеныРасчетной = ПолучитьЦенуСУчетомПороговСрабатывания(ЗначениеЦеныРасчетной, СтруктураПорогов);
			
			

			СтрокаТаблицыРасчета.ЗначениеЦеныРасчетной = ЗначениеЦеныРасчетной;
			
			СтрокаТаблицыРасчета.ВалютаЦеныСтарой = БазоваяВалюта;
			
			Если СтрокаТаблицыРасчета.ВидЦенРасчетный.НесколькоВалютДляЦен Тогда
				СтрокаТаблицыРасчета.ВалютаЦеныРасчетной = БазоваяВалюта;
			Иначе
				СтрокаТаблицыРасчета.ВалютаЦеныРасчетной = СтрокаТаблицыРасчета.ВидЦенРасчетный.ВалютаЦены;
			КонецЕсли;

			СтруктураЗначений = Новый Структура("ЗначениеЦены, ИдентификаторФормул, ВалютаЦены", 
				ЗначениеЦеныРасчетной, СтрокаСПроцентом.ИдентификаторФормул, СтрокаТаблицыРасчета.ВалютаЦеныРасчетной);
			
			СтруктураРассчитаннойЦены = Новый Структура(СтрокаСПроцентом.ИдентификаторФормул, СтруктураЗначений);

			Если СоответствиеБазовыхЦен.Получить(СтрокаСПроцентом.ИдентификаторСтроки) = Неопределено Тогда

				СоответствиеБазовыхЦен.Вставить(СтрокаСПроцентом.ИдентификаторСтроки, СтруктураРассчитаннойЦены);

			Иначе

				ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
					СоответствиеБазовыхЦен[СтрокаСПроцентом.ИдентификаторСтроки], СтруктураРассчитаннойЦены, Истина);

			КонецЕсли;
		
		КонецЦикла;
		
		СтрокаТаблицыРасчета.КлючСвязи = КлючСвязи;
		КлючСвязи = КлючСвязи + 1;
		
	КонецЦикла;
	
	ПараметрыРасчета.Вставить("СоответствиеБазовыхЦен", СоответствиеБазовыхЦен);
	
	Возврат ТаблицаРасчета;
	
КонецФункции

Функция ПолучитьЦенуСУчетомПороговСрабатывания(Знач ЗначениеЦены, Знач СтрокаТаблицы)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидЦен", СтрокаТаблицы.ВидЦен);
	СтруктураПараметров.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
	СтруктураПараметров.Вставить("Цена", ЗначениеЦены);
	СтруктураПараметров.Вставить("ЦенаСтарая", СтрокаТаблицы.ЗначениеЦеныСтарой);
	
	Возврат ЦенообразованиеСервер.ПолучитьЦенуСУчетомПороговСрабатывания(СтруктураПараметров);
	
КонецФункции

Процедура ДобавитьВыбранноеПолеСКД(ГруппировкаКомпоновкиДанных, Поле)
	
	ВыбранноеПоле               = ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных(Поле);
	ВыбранноеПоле.Использование = Истина;
	
КонецПроцедуры

Процедура ДобавитьПолеНабораДанныхСКД(НаборДанных, ИмяПоля, ТипЗначения, Ограничение = Ложь)
	
	ПолеНабораДанных             = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНабораДанных.Поле        = ИмяПоля;
	ПолеНабораДанных.ПутьКДанным = ИмяПоля;  
	
	ПолеНабораДанных.ТипЗначения = Новый ОписаниеТипов(ТипЗначения);
	
	ПолеНабораДанных.ОграничениеИспользованияРеквизитов.Условие = Ограничение;	
	ПолеНабораДанных.ОграничениеИспользования.Условие = Ограничение;
	
КонецПроцедуры

Процедура ДобавитьСвязьНаборовДанныхСКД(СКД, НаборДанныхНоменклатура, РабочийНаборДанных, Поле)
	
	Связь                     = СКД.СвязиНаборовДанных.Добавить();
	Связь.НаборДанныхИсточник = НаборДанныхНоменклатура.Имя;
	Связь.НаборДанныхПриемник = РабочийНаборДанных.Имя;
	Связь.ВыражениеИсточник   = Поле;
	Связь.ВыражениеПриемник   = Поле;
	Связь.Обязательная        = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныеПоляСКДСтрокиВидаЦены(СтрокаДереваВидаЦен, УникальныйИдентификаторФормы, СтрокаУдалена)
	
	Если ЗначениеЗаполнено(СтрокаДереваВидаЦен.ВидЦен.СхемаКомпоновкиДанных) Тогда
		
		ОписаниеИСхема = Справочники.ВидыЦен.ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(СтрокаДереваВидаЦен.ВидЦен, 
			СтрокаДереваВидаЦен.ВидЦен.СхемаКомпоновкиДанных);
		СхемаКомпоновкиДанных = ОписаниеИСхема.СхемаКомпоновкиДанных;
		
	Иначе
		
		СхемаКомпоновкиДанных = СтрокаДереваВидаЦен.ВидЦен.ХранилищеСхемыКомпоновкиДанных.Получить();
		
	КонецЕсли;
	
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		СтрокаДереваВидаЦен.Родитель.Строки.Удалить(СтрокаДереваВидаЦен);
		СтрокаУдалена = Истина;
		Возврат;
	КонецЕсли;
	
	НастройкиКомпоновкиДанных = СтрокаДереваВидаЦен.ВидЦен.ХранилищеНастроекКомпоновкиДанных.Получить();
	
	// схема
	СтрокаДереваВидаЦен.АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификаторФормы);
	
	// параметры   
	Если НЕ ЗначениеЗаполнено(НастройкиКомпоновкиДанных) Тогда
		
		НастройкиКомпоновкиДанных = ЦенообразованиеСервер.ПолучитьНастройкиКомпоновкиПоУмолчанию(СхемаКомпоновкиДанных);
		
	КонецЕсли;
	
	СтрокаДереваВидаЦен.АдресНастроекСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(НастройкиКомпоновкиДанных, УникальныйИдентификаторФормы);
	
	// представление параметров
	СтрокаДереваВидаЦен.Параметры = ЦенообразованиеСервер.ПолучитьОписаниеПараметровКомпоновщикаНастроек(СтрокаДереваВидаЦен, СтрокаДереваВидаЦен.АдресНастроекСхемыКомпоновкиДанных);
		
КонецПроцедуры

Процедура ЗаполнитьОбязательныеПараметрыМакетаКомпоновкиПриЗаполнении(МакетКомпоновки, СтруктураПараметров)
	
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("Основание");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = СтруктураПараметров.ДокументОснование;
	КонецЕсли;
	
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ДатаДокумента");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = КонецДня(СтруктураПараметров.ДатаДокумента);
	КонецЕсли;
	
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ВидЦены");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = СтруктураПараметров.ВидЦен;
	КонецЕсли;
	
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ЭтоВводНаОсновании");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = СтруктураПараметров.ЭтоВводНаОсновании;
	КонецЕсли;
	
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ВалютаУчета");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = Константы.ВалютаУчета.Получить();
	КонецЕсли;
	
КонецПроцедуры

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//   @skip-warning
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ИнтерфейсПечати

Процедура ДобавитьПолеКД(НаборПолейДанных, Поле, Заголовок, ПутьКДанным)
	
	Если НаборПолейДанных.Найти(ПутьКДанным) = Неопределено Тогда
		
		НовоеПолеКД				= НаборПолейДанных.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПолеКД.Поле 		= Поле;
		НовоеПолеКД.Заголовок	= Заголовок;
		НовоеПолеКД.ПутьКДанным	= ПутьКДанным;
		Формат = НовоеПолеКД.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Формат"));
		Формат.Значение = "ЧДЦ=2;";
		Формат.Использование = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПолеИтогаКД(ПоляИтогов, Выражение, ПутьКДанным)
	
	Если ПоляИтогов.Найти(ПутьКДанным) = Неопределено Тогда
		
		ПолеРесурса 			= ПоляИтогов.Добавить();
		ПолеРесурса.Выражение	= Выражение;
		ПолеРесурса.ПутьКДанным = ПутьКДанным;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьОписаниеВыбранныхПолей(ТаблицаОписанияПолей, ВидЦен, ПутьКДанным, Заголовок, Использование = Истина)
	
	НоваяСтрока					= ТаблицаОписанияПолей.Добавить();
	НоваяСтрока.Поле			= Новый ПолеКомпоновкиДанных(ПутьКДанным);
	НоваяСтрока.Заголовок		= Заголовок;
	НоваяСтрока.Использование	= Использование;
	НоваяСтрока.Родитель		= ВидЦен;
	
	Возврат НоваяСтрока;
	
КонецФункции

Процедура ДобавитьПоляТекущихЦенВПечатнуюФорму(ВидЦен, НаборПолейДанных, ПоляИтогов, ВычисляемыеПоля, ТаблицаОписанияПолей)
	
	ОписаниеПоля	= ВидЦен.ИдентификаторФормул + "_ЦенаДо";
	Заголовок		= НСтр("ru ='Цена старая'");

	ДобавитьПолеКД(НаборПолейДанных, ОписаниеПоля, Заголовок, ОписаниеПоля);
	ДобавитьПолеИтогаКД(ПоляИтогов, ОписаниеПоля, ОписаниеПоля);
	НоваяСтрока = ДобавитьОписаниеВыбранныхПолей(ТаблицаОписанияПолей, ВидЦен, ОписаниеПоля, Заголовок);
	
	Если ВидЦен.НесколькоВалютДляЦен Тогда
		
		ОписаниеПоляПредставление	= ВидЦен.ИдентификаторФормул + "_ВалютаДоПредставление";
		
		ДобавитьПоляВалютыВПечатнуюФорму(ВидЦен, НаборПолейДанных, ПоляИтогов, ТаблицаОписанияПолей,
			ОписаниеПоляПредставление, Заголовок);
			
		ПутьКДанным = ДобавитьВычисляемоеПолеВалютыВПечатнуюФорму(ВычисляемыеПоля, ПоляИтогов, ОписаниеПоля,
			ОписаниеПоляПредставление, Заголовок);
		НоваяСтрока.КолонкаВалюта = ПутьКДанным;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПоляОтклоненийЦенВПечатнуюФорму(ВидЦен, НаборПолейДанных, ПоляИтогов, ВычисляемыеПоля,
	ТаблицаОписанияПолей)

	ОписаниеПоля	= ВидЦен.ИдентификаторФормул + "_Дельта";
	Заголовок		= НСтр("ru ='Δ'");

	ДобавитьПолеКД(НаборПолейДанных, ОписаниеПоля, Заголовок, ОписаниеПоля);
	ДобавитьПолеИтогаКД(ПоляИтогов, ОписаниеПоля, ОписаниеПоля);
	НоваяСтрока = ДобавитьОписаниеВыбранныхПолей(ТаблицаОписанияПолей, ВидЦен, ОписаниеПоля, Заголовок);

	Если ВидЦен.НесколькоВалютДляЦен Тогда

		ОписаниеПоляПредставление	= ВидЦен.ИдентификаторФормул + "_ВалютаДельтаПредставление";

		ДобавитьПоляВалютыВПечатнуюФорму(ВидЦен, НаборПолейДанных, ПоляИтогов, ТаблицаОписанияПолей,
			ОписаниеПоляПредставление, Заголовок);

		ПутьКДанным = ДобавитьВычисляемоеПолеВалютыВПечатнуюФорму(ВычисляемыеПоля, ПоляИтогов, ОписаниеПоля,
			ОписаниеПоляПредставление, Заголовок);
		НоваяСтрока.КолонкаВалюта = ПутьКДанным;

	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьПоляНовыхЦенВПечатнуюФорму(ВидЦен, НаборПолейДанных, ПоляИтогов, ВычисляемыеПоля, ТаблицаОписанияПолей)

	ОписаниеПоля	= ВидЦен.ИдентификаторФормул + "_ЦенаНовая";
	Заголовок		= НСтр("ru ='Новая цена'");

	ДобавитьПолеКД(НаборПолейДанных, ОписаниеПоля, Заголовок, ОписаниеПоля);
	ДобавитьПолеИтогаКД(ПоляИтогов, ОписаниеПоля, ОписаниеПоля);
	НоваяСтрока = ДобавитьОписаниеВыбранныхПолей(ТаблицаОписанияПолей, ВидЦен, ОписаниеПоля, Заголовок);

	Если ВидЦен.НесколькоВалютДляЦен Тогда

		ОписаниеПоляПредставление	= ВидЦен.ИдентификаторФормул + "_ВалютаНоваяПредставление";

		ДобавитьПоляВалютыВПечатнуюФорму(ВидЦен, НаборПолейДанных, ПоляИтогов, ТаблицаОписанияПолей,
			ОписаниеПоляПредставление, Заголовок);

		ПутьКДанным = ДобавитьВычисляемоеПолеВалютыВПечатнуюФорму(ВычисляемыеПоля, ПоляИтогов, ОписаниеПоля,
			ОписаниеПоляПредставление, Заголовок);
		НоваяСтрока.КолонкаВалюта = ПутьКДанным;

	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьПоляЕдиницИзмеренияВПечатнуюФорму(ВидЦен, НаборПолейДанных, ПоляИтогов, ТаблицаОписанияПолей)
	
	ОписаниеПоля	= ВидЦен.ИдентификаторФормул + "_ЕдИзм";
	Заголовок		= НСтр("ru ='Ед. изм.'");
	
	ДобавитьПолеКД(НаборПолейДанных, ОписаниеПоля, Заголовок, ОписаниеПоля);
	ДобавитьПолеИтогаКД(ПоляИтогов, ОписаниеПоля, ОписаниеПоля);
	ДобавитьОписаниеВыбранныхПолей(ТаблицаОписанияПолей, ВидЦен, ОписаниеПоля, Заголовок);
	
КонецПроцедуры

Процедура ДобавитьПоляВалютыВПечатнуюФорму(ВидЦен, НаборПолейДанных, ПоляИтогов, ТаблицаОписанияПолей, ОписаниеПоля, Заголовок)
	
	ДобавитьПолеКД(НаборПолейДанных, ОписаниеПоля, Заголовок, ОписаниеПоля);
	ДобавитьПолеИтогаКД(ПоляИтогов, ОписаниеПоля, ОписаниеПоля);
	ДобавитьОписаниеВыбранныхПолей(ТаблицаОписанияПолей, ВидЦен, ОписаниеПоля, Заголовок, Ложь);
	
КонецПроцедуры

Функция ДобавитьВычисляемоеПолеВалютыВПечатнуюФорму(ВычисляемыеПоля, ПоляИтога, ИмяПоляЦена, ИмяПоляВалюта, Заголовок)
	
	ВычисляемоеПоле = ВычисляемыеПоля.Добавить();
	ВычисляемоеПоле.Выражение = СтрШаблон("
	|	ВЫБОР КОГДА Строка(%1) = ""0"" 
	|			ТОГДА """" 
	|		ИНАЧЕ Формат(%2, ""ЧДЦ=2; ЧН=' ';"") + "" "" + %3
	|	КОНЕЦ", ИмяПоляЦена, ИмяПоляЦена, ИмяПоляВалюта);
	ВычисляемоеПоле.ТипЗначения = Новый ОписаниеТипов("Строка");
	ВычисляемоеПоле.ПутьКДанным = ИмяПоляЦена + "_Вычисляемое";
	ВычисляемоеПоле.Заголовок = Заголовок;
	Параметр = ВычисляемоеПоле.Оформление.НайтиЗначениеПараметра(
			Новый ПараметрКомпоновкиДанных("ГоризонтальноеПоложение"));
	Параметр.Использование = Истина;
	Параметр.Значение = ГоризонтальноеПоложение.Право;

	ПолеРесурса 			= ПоляИтога.Добавить();
	ПолеРесурса.Выражение	=  ВычисляемоеПоле.Выражение;
	ПолеРесурса.ПутьКДанным = ВычисляемоеПоле.ПутьКДанным;
	
	Возврат ВычисляемоеПоле.ПутьКДанным;
	
КонецФункции

Процедура ДобавитьПоляСКД(СхемаКомпоновкиДанных, ПараметрыПечати, ТаблицаОписанияПолей)
	
	ИмяНабораДанных = "КоллекцияНоменклатуры";
	ВыбранныеВидыЦен	= ПараметрыПечати.ВыбранныеВидыЦен;
	НаборПолейДанных	= СхемаКомпоновкиДанных.НаборыДанных[ИмяНабораДанных].Поля;
	ПоляИтогов			= СхемаКомпоновкиДанных.ПоляИтога;
	ВычисляемыеПоля		= СхемаКомпоновкиДанных.ВычисляемыеПоля;
	
	Для каждого ЭлементСоответствия Из ВыбранныеВидыЦен Цикл
		
		ВидЦен = ЭлементСоответствия.Ключ;
		
		ДобавитьПоляВПечатнуюФормуДляВидаЦены(ВидЦен, НаборПолейДанных, ПоляИтогов, ВычисляемыеПоля, ТаблицаОписанияПолей,
			ПараметрыПечати);
		
		Если ПараметрыПечати.ПоказыватьЗависимыеЦены Тогда

			Для Каждого ЭлементСоответствияЗависимый Из ЭлементСоответствия.Значение Цикл
				
				ВидЦенЗависимый = ЭлементСоответствияЗависимый.Ключ;
				ДобавитьПоляВПечатнуюФормуДляВидаЦены(ВидЦенЗависимый, НаборПолейДанных, ПоляИтогов, ВычисляемыеПоля,
					ТаблицаОписанияПолей, ПараметрыПечати);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПоляВПечатнуюФормуДляВидаЦены(ВидЦен, НаборПолейДанных, ПоляИтогов, ВычисляемыеПоля, ТаблицаОписанияПолей,
	ПараметрыПечати)

	Если ПараметрыПечати.ПоказыватьДействующуюЦену Тогда

		ДобавитьПоляТекущихЦенВПечатнуюФорму(ВидЦен, НаборПолейДанных, ПоляИтогов, ВычисляемыеПоля, ТаблицаОписанияПолей);

	КонецЕсли;
	
	Если ПараметрыПечати.ПоказыватьОтклонениеЦен Тогда

		ДобавитьПоляОтклоненийЦенВПечатнуюФорму(ВидЦен, НаборПолейДанных, ПоляИтогов, ВычисляемыеПоля, ТаблицаОписанияПолей);

	КонецЕсли;
	
	ДобавитьПоляНовыхЦенВПечатнуюФорму(ВидЦен, НаборПолейДанных, ПоляИтогов, ВычисляемыеПоля, ТаблицаОписанияПолей);

	Если ПараметрыПечати.ПоказыватьЕдиницыИзмерения Тогда

		ДобавитьПоляЕдиницИзмеренияВПечатнуюФорму(ВидЦен, НаборПолейДанных, ПоляИтогов, ТаблицаОписанияПолей);

	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьВыбранныеЭлементыКД(ТаблицаОписанияПолей, СтруктураКД)
	
	Для каждого ЭлементНастройкиКД Из СтруктураКД Цикл
		
		Если ЭлементНастройкиКД.Имя = "Подпись" Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекущийРодитель 			= Неопределено;
		КоллекцияВыбранныхПолейКД	= ЭлементНастройкиКД.Выбор.Элементы;
		Для каждого СтрокаТаблицы Из ТаблицаОписанияПолей Цикл
			
			Если ТекущийРодитель <> СтрокаТаблицы.Родитель Тогда
				
				ТекущийРодитель					= СтрокаТаблицы.Родитель;
				
				ГруппаВыбранныхПолей			= КоллекцияВыбранныхПолейКД.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				Заголовок = ТекущийРодитель.Наименование;
				ГруппаВыбранныхПолей.Заголовок	= Заголовок;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.КолонкаВалюта) Тогда
				
				ВычисляемоеПоле = ГруппаВыбранныхПолей.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ВычисляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(СтрокаТаблицы.КолонкаВалюта);
				ВычисляемоеПоле.Заголовок = СтрокаТаблицы.Заголовок;
				
//				ЭлементОформления = ЭлементНастройкиКД.УсловноеОформление.Элементы.Добавить();
//				ЭлементОформления.Использование = Истина;
//				ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", "");
//				
//				ОтборОформления = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//				ОтборОформления.Использование = Истина;
//				ОтборОформления.ЛевоеЗначение = ВычисляемоеПоле.Поле;
//				ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
//				
//				ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
//				ОформляемоеПоле.Использование = Истина;
//				ОформляемоеПоле.Поле = КолонкаВалюта.Поле;
				
//				ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
//				ОформляемоеПоле.Использование = Истина;
//				ОформляемоеПоле.Поле = ВыбранноеПоле.Поле;

// 				TODO: добавить пользовательское поле и вывести в группировке
				
			Иначе
				
				ВыбранноеПоле 			= ГруппаВыбранныхПолей.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(ВыбранноеПоле, СтрокаТаблицы);
				
				
		
			КонецЕсли;
			
			

		КонецЦикла;
		
		Если ЭлементНастройкиКД.Структура.Количество() > 0 Тогда
			
			ДобавитьВыбранныеЭлементыКД(ТаблицаОписанияПолей, ЭлементНастройкиКД.Структура)
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьЕдиныйНаборДанных(ПараметрыПечати)
	
	КоллекцияНоменклатуры = ПараметрыПечати.КоллекцииДанныхФормы.ТаблицаФормыНоменклатуры.Скопировать();
	КоллекцияНоменклатуры.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	НовыеКолонкиВалюты = Новый Массив;
	Для каждого КолонкаТаблицы Из КоллекцияНоменклатуры.Колонки Цикл
		
		КолонкаТаблицы.Имя = СтрЗаменить(КолонкаТаблицы.Имя, "ТЧНоменклатура", "");
		Если СтрНайти(КолонкаТаблицы.Имя, "_ВалютаДо") <> 0 
			Или СтрНайти(КолонкаТаблицы.Имя, "_ВалютаНовая") <> 0 
			Или СтрНайти(КолонкаТаблицы.Имя, "_ВалютаДельта") <> 0 Тогда
				
			НоваяКолонка = Новый Структура("КолонкаВалюта, КолонкаПредставление", КолонкаТаблицы.Имя,
				КолонкаТаблицы.Имя + "Представление");
			НовыеКолонкиВалюты.Добавить(НоваяКолонка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТипСтрока20 = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(20));
	
	Для Каждого НоваяКолонкаВалюты Из НовыеКолонкиВалюты Цикл
		
		КоллекцияНоменклатуры.Колонки.Добавить(НоваяКолонкаВалюты.КолонкаПредставление, ТипСтрока20);
		
	КонецЦикла;
	
	Для Каждого СтрокаНоменклатуры Из КоллекцияНоменклатуры Цикл
		
		Для Каждого НоваяКолонкаВалюты Из НовыеКолонкиВалюты Цикл
			
			Если ЗначениеЗаполнено(СтрокаНоменклатуры[НоваяКолонкаВалюты.КолонкаВалюта]) Тогда
				
				СтрокаНоменклатуры[НоваяКолонкаВалюты.КолонкаПредставление] 
					= СтрокаНоменклатуры[НоваяКолонкаВалюты.КолонкаВалюта].СимвольноеПредставление;
					
			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;
	
	Если ПараметрыПечати.ПоказыватьХарактеристики Тогда
		
		Для каждого КолонкаТаблицы Из ПараметрыПечати.КоллекцииДанныхФормы.ТаблицаФормыХарактеристик.Колонки Цикл
			
			КолонкаТаблицы.Имя = СтрЗаменить(КолонкаТаблицы.Имя, "ТЧХарактеристики", "");
			
		КонецЦикла;
		
		Для каждого СтрокаТаблицы Из ПараметрыПечати.КоллекцииДанныхФормы.ТаблицаФормыХарактеристик Цикл
			
			НоваяЗапись = КоллекцияНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
			
			Для Каждого НоваяКолонкаВалюты Из НовыеКолонкиВалюты Цикл

				Если ЗначениеЗаполнено(НоваяЗапись[НоваяКолонкаВалюты.КолонкаВалюта]) Тогда

					НоваяЗапись[НоваяКолонкаВалюты.КолонкаПредставление] 
						= НоваяЗапись[НоваяКолонкаВалюты.КолонкаВалюта].СимвольноеПредставление;

				КонецЕсли;

			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат КоллекцияНоменклатуры;
	
КонецФункции

Функция СформироватьТабличныйДокументПоДеревуДанных(ПараметрыПечати) Экспорт
	
	ТабличныйДокумент	= Новый ТабличныйДокумент;
	
	КоллекцияНоменклатуры = СоздатьЕдиныйНаборДанных(ПараметрыПечати);
	
	// 1. Получим СКД
	СхемаКомпоновкиДанных = ПолучитьМакет("ТабличнаяЧастьФормированияЦен");
	
	ТаблицаОписанияПолей = Новый ТаблицаЗначений;
	ТаблицаОписанияПолей.Колонки.Добавить("Поле");
	ТаблицаОписанияПолей.Колонки.Добавить("Заголовок");
	ТаблицаОписанияПолей.Колонки.Добавить("Использование");
	ТаблицаОписанияПолей.Колонки.Добавить("Родитель"); // Содержит вид цен (ссылка)
	
	ДобавитьПоляСКД(СхемаКомпоновкиДанных, ПараметрыПечати, ТаблицаОписанияПолей);
	
	// 2. создаем настройки для схемы 
	НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	СтруктураКД						= НастройкиКомпоновкиДанных.Структура;
	ДобавитьВыбранныеЭлементыКД(ТаблицаОписанияПолей, СтруктураКД);
	
	// 3. готовим макет 
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, ДанныеРасшифровки);
	
	// 4. исполняем макет 
	ВнешниеНаборыДанных = Новый Структура("КоллекцияНоменклатуры", КоллекцияНоменклатуры);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	ПроцессорКомпоновки.Сбросить();
	
	// 5. выводим результат 
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	// 6. Запишем СКД и данные расшифровки
	// не требуется
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьПараметрыПечатиПоОбъекту(ОбъектПечати)
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ПоказыватьДействующуюЦену");
	ПараметрыПечати.Вставить("ПоказыватьЕдиницыИзмерения");
	ПараметрыПечати.Вставить("ПоказыватьЗависимыеЦены");
	ПараметрыПечати.Вставить("ПоказыватьОтклонениеЦен");
	ПараметрыПечати.Вставить("ПоказыватьХарактеристики");
	ПараметрыПечати.Вставить("УстанавливатьХарактеристикамБезЦен");
	ПараметрыПечати.Вставить("КурсыВалютДокумента", КурсыВалютДокумента(ОбъектПечати.Дата));
	ПараметрыПечати.Вставить("ФОУчетВалютныхОпераций", ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций"));
		
	ЗаполнитьЗначенияСвойств(ПараметрыПечати, ОбъектПечати);
	ПараметрыПечати.Вставить("ВыбранныеВидыЦен", ПолучитьВыбранныеВидыЦенПоОбъекту(ОбъектПечати));
	Возврат ПараметрыПечати;
	
КонецФункции

Функция ПолучитьВыбранныеВидыЦенПоОбъекту(ОбъектПечати)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УстановкаЦенНоменклатурыЗапасы.ВидЦены КАК ВидЦены
	               |ИЗ
	               |	Документ.УстановкаЦенНоменклатуры.Запасы КАК УстановкаЦенНоменклатурыЗапасы
	               |ГДЕ
	               |	УстановкаЦенНоменклатурыЗапасы.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	УстановкаЦенНоменклатурыЗапасы.ВидЦены";
	Запрос.УстановитьПараметр("Ссылка", ОбъектПечати);
	МассивВидовЦен = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидЦены");
	
	Результат = Новый Соответствие;
	
	Если МассивВидовЦен.Количество()>0 Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ДеревоРезультата", Новый ДеревоЗначений);
		СтруктураПараметров.Вставить("МассивВидовЦен", МассивВидовЦен);
		СтруктураПараметров.Вставить("ВключаяЦеныНоменклатуры", Истина);
		СтруктураПараметров.Вставить("ВключаяЦеныКонтрагентов", Ложь);
		СтруктураПараметров.Вставить("ВидыЦенВыбраныПриЗаполнении", Ложь);
		СтруктураПараметров.Вставить("УникальныйИдентификаторФормы", );
		ПолучитьДеревоВидовЦен(СтруктураПараметров);
		
		Для каждого КорневойЭлемент Из СтруктураПараметров.ДеревоРезультата.Строки Цикл
			
			ЗаполнитьСоответствиеВыбранныхВидовЦенПоДеревуВидовЦен(Результат, КорневойЭлемент, МассивВидовЦен);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСоответствиеВыбранныхВидовЦенПоДеревуВидовЦен(Соответствие, Дерево, МассивВидовЦен)
	
		Для каждого БазовыйВидЦены Из Дерево.Строки Цикл
		
			Если БазовыйВидЦены.Использование И МассивВидовЦен.Найти(БазовыйВидЦены.ВидЦен) <> Неопределено Тогда
				
				СоответствиеПодчиненных = Новый Соответствие;
				ЗаполнитьСоответствиеВыбранныхВидовЦенПоДеревуВидовЦен(СоответствиеПодчиненных, БазовыйВидЦены, МассивВидовЦен);
				Соответствие.Вставить(БазовыйВидЦены.ВидЦен, СоответствиеПодчиненных);
				
			КонецЕсли;
		
		КонецЦикла;
	
КонецПроцедуры

Функция СоздатьКоллекциюНоменклатурыДляПечатиТабличнойЧасти(ОбъектПечати, ПараметрыПечати)
	
	ВыбранныеВидыЦен = ПараметрыПечати.ВыбранныеВидыЦен;
	
	АдресВременногоХранилища = РазобратьМассивНоменклатурыИХарактеристикПоДокументу(ОбъектПечати.Запасы.Выгрузить(), 
		ОбъектПечати.ПоказыватьХарактеристики, ОбъектПечати.ПоказыватьНедействительныеХарактеристики);
	СтруктураТаблицДанных = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	ПараметрыКопирования = Новый Структура;
	ПараметрыКопирования.Вставить("ИменаКолонокКопирования", Неопределено);
	ПараметрыКопирования.Вставить("ИменаКолонокИсключений", Неопределено);
	ПараметрыКопирования.Вставить("ВыбранныеВидыЦен", ВыбранныеВидыЦен);
	ПараметрыКопирования.Вставить("ЗаполнитьТекущиеЦены", Истина);
	ПараметрыКопирования.Вставить("ИмяТабличнойЧасти", "ТЧНоменклатура");
	ПараметрыКопирования.Вставить("МаксимальныйКлючСвязи", 0);
	ПараметрыКопирования.Вставить("МаксимальныйКлючСвязиПослеДобавления", 0);
	ПараметрыКопирования.Вставить("ПоДокументу", Истина);
	ПараметрыКопирования.Вставить("ТаблицаЦен", ?(СтруктураТаблицДанных.Свойство("ТаблицаЦен"), СтруктураТаблицДанных.ТаблицаЦен, Неопределено));
	ПараметрыКопирования.Вставить("Период", ОбъектПечати.Дата);
	ПараметрыКопирования.Вставить("Автор", ОбъектПечати.Автор);
	ПараметрыКопирования.Вставить("ВключаяХарактеристики", ПараметрыПечати.УстанавливатьХарактеристикамБезЦен);
	ПараметрыКопирования.Вставить("Сортировать", Ложь);
	ПараметрыКопирования.Вставить("КурсыВалютДокумента", ПараметрыПечати.КурсыВалютДокумента);
	ПараметрыКопирования.Вставить("ФОУчетВалютныхОпераций", ПараметрыПечати.ФОУчетВалютныхОпераций);
		
	ТаблицаЦен = СтруктураТаблицДанных.ТаблицаЦен;
	
	ТаблицаФормыНоменклатуры = СтруктураТаблицДанных.ТаблицаНоменклатуры.СкопироватьКолонки();
	ТаблицаКопирования = ТаблицаФормыНоменклатуры.Скопировать(); 	
	ДобавитьИЗаполнитьКолонкиТекущихЦен(ВыбранныеВидыЦен, "ТЧНоменклатура", ТаблицаКопирования, ТаблицаФормыНоменклатуры, ТаблицаЦен, ПараметрыКопирования);	
	КопироватьДобавлениемСтрокТаблицЗначений(СтруктураТаблицДанных.ТаблицаНоменклатуры, ТаблицаФормыНоменклатуры, ПараметрыКопирования);
	ТаблицаФормыНоменклатуры.Колонки.Удалить("Характеристика");
	
	ПараметрыКопирования.Вставить("ИмяТабличнойЧасти", "ТЧХарактеристики");
	ТаблицаФормыХарактеристик = СтруктураТаблицДанных.ТаблицаХарактеристик.СкопироватьКолонки();
	ТаблицаКопирования = ТаблицаФормыХарактеристик.Скопировать();
	ДобавитьИЗаполнитьКолонкиТекущихЦен(ВыбранныеВидыЦен, "ТЧХарактеристики", ТаблицаКопирования, ТаблицаФормыХарактеристик, ТаблицаЦен, ПараметрыКопирования);	
	КопироватьДобавлениемСтрокТаблицЗначений(СтруктураТаблицДанных.ТаблицаХарактеристик, ТаблицаФормыХарактеристик, ПараметрыКопирования);	
	
	КоллекцииДанныхФормы = Новый Структура("ТаблицаФормыНоменклатуры, ТаблицаФормыХарактеристик",
		ТаблицаФормыНоменклатуры, ТаблицаФормыХарактеристик);
	ПараметрыПечати.Вставить("КоллекцииДанныхФормы", КоллекцииДанныхФормы);
	
	Возврат СоздатьЕдиныйНаборДанных(ПараметрыПечати);
		
КонецФункции

Функция ПечатнаяФормаТабличнаяЧасть(МассивОбъектов, ОбъектыПечати)
	
	Перем ПервыйДокумент, НомерСтрокиНачало;
	
	ТабличныйДокументОбщий	= Новый ТабличныйДокумент;
	Для каждого ДокументСсылка Из МассивОбъектов Цикл
		
		ПечатьДокументовУНФ.ПередНачаломФормированияДокумента(ТабличныйДокументОбщий, ПервыйДокумент, НомерСтрокиНачало);		
		
		ТабличныйДокумент	= Новый ТабличныйДокумент;		
		ПараметрыПечати = ПолучитьПараметрыПечатиПоОбъекту(ДокументСсылка);	
		
		КоллекцияНоменклатуры = СоздатьКоллекциюНоменклатурыДляПечатиТабличнойЧасти(ДокументСсылка, ПараметрыПечати);
		
		// 1. Получим СКД
		СхемаКомпоновкиДанных = Документы.УстановкаЦенНоменклатуры.ПолучитьМакет("ТабличнаяЧастьФормированияЦен");
		
		ТаблицаОписанияПолей = Новый ТаблицаЗначений;
		ТаблицаОписанияПолей.Колонки.Добавить("Поле");
		ТаблицаОписанияПолей.Колонки.Добавить("Заголовок");
		ТаблицаОписанияПолей.Колонки.Добавить("Использование");
		ТаблицаОписанияПолей.Колонки.Добавить("Родитель");
		ТаблицаОписанияПолей.Колонки.Добавить("КолонкаВалюта");
		
		ДобавитьПоляСКД(СхемаКомпоновкиДанных, ПараметрыПечати, ТаблицаОписанияПолей);
		
		// 2. создаем настройки для схемы 
		НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		

		
		
		
		
		СтруктураКД						= НастройкиКомпоновкиДанных.Структура;
		ДобавитьВыбранныеЭлементыКД(ТаблицаОписанияПолей, СтруктураКД);
		
		// 3. готовим макет 
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		Макет = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, ДанныеРасшифровки);
		
		// 4. исполняем макет 
		ВнешниеНаборыДанных = Новый Структура("КоллекцияНоменклатуры", КоллекцияНоменклатуры);
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(Макет, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
		ПроцессорКомпоновки.Сбросить();
		
		// 5. выводим результат 
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
		// 6. Запишем СКД и данные расшифровки
		ТабличныйДокументОбщий.Вывести(ТабличныйДокумент);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокументОбщий, НомерСтрокиНачало, ОбъектыПечати,
			ДокументСсылка);
	
	КонецЦикла;
		
	ТабличныйДокументОбщий.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УстановкаЦен_ТабличнаяЧасть";
	Возврат ТабличныйДокументОбщий;
		
КонецФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТабличнаяЧасть") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТабличнаяЧасть", НСтр("ru = 'Табличная часть'"), ПечатнаяФормаТабличнаяЧасть(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
			
	// параметры отправки печатных форм по электронной почте
	ЭлектроннаяПочтаУНФ.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов,
		КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Обработки.ПечатьЭтикетокИЦенников)
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ЦеныНоменклатуры)
		И ПолучитьФункциональнуюОпцию("ПечатьЭтикетокИЦенников") Тогда
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "ПечатьДокументовУНФКлиент.ПечатьЭтикетокИЦенниковИзДокументов";
		КомандаПечати.Идентификатор = "ПечатьЦенниковИзУстановкиЦенНоменклатуры";
		КомандаПечати.Представление = НСтр("ru = 'Печать ценников'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.Порядок = 20;
		
	КонецЕсли;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТабличнаяЧасть";
	КомандаПечати.Представление = НСтр("ru = 'Табличная часть'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 4;	
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхИзВнешнегоИсточника

// Поля загрузки данных из внешнего источника.
// 
// Параметры:
//  ТаблицаПолейЗагрузки - см. ЗагрузкаДанныхИзВнешнегоИсточника.СоздатьТаблицуПолейОписанияЗагрузки
//  НастройкиЗагрузкиДанных - см. ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере
//
Процедура ПоляЗагрузкиДанныхИзВнешнегоИсточника(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных) Экспорт
	
	ОписанияТиповПолей = ЗагрузкаДанныхИзВнешнегоИсточника.НовыйОписанияТиповПолейЗагрузки();

	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПоляНоменклатуры(ТаблицаПолейЗагрузки, ОписаниеТиповКолонка,
		ОписанияТиповПолей, НастройкиЗагрузкиДанных);

	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПоляГруппыНоменклатуры(ТаблицаПолейЗагрузки, ОписанияТиповПолей,
		ОписаниеТиповКолонка);

	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПоляХарактеристики(ТаблицаПолейЗагрузки, ОписанияТиповПолей);

	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЭтоУслуга", НСтр(
		"ru = 'Это услуга'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписанияТиповПолей.ОписаниеТиповСтрока11,
		ОписанияТиповПолей.ОписаниеТиповБулево, );
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Картинка", НСтр(
		"ru = 'Картинка'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписанияТиповПолей.ОписаниеТиповСтрока1000,
		ОписанияТиповПолей.ОписаниеТиповСтрока1000, , , , , Ложь);

	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ВидыЦен");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ВидЦен", НСтр(
		"ru = 'Вид цен (наименование)'", ОбщегоНазначения.КодОсновногоЯзыка()),
		ОписанияТиповПолей.ОписаниеТиповСтрока100, ОписаниеТиповКолонка, , , , , Ложь);

	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения, СправочникСсылка.ЕдиницыИзмерения");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЕдиницаИзмерения", НСтр(
		"ru = 'Ед. изм.'"), ОписанияТиповПолей.ОписаниеТиповСтрока25, ОписаниеТиповКолонка, , , , ,
		ПолучитьФункциональнуюОпцию(
		"УчетВРазличныхЕдиницахИзмерения"));

	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Цена", НСтр("ru = 'Цена'"),
		ОписанияТиповПолей.ОписаниеТиповСтрока25, ОписанияТиповПолей.ОписаниеТиповЧисло15_2, , , Истина);

	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СтавкаНДС", НСтр(
		"ru = 'Ставка НДС'"), ОписанияТиповПолей.ОписаниеТиповСтрока50, ОписаниеТиповКолонка);

КонецПроцедуры

Процедура ПриОпределенииОбразцовЗагрузкиДанных(НастройкиЗагрузкиДанных, УникальныйИдентификатор) Экспорт
	
	Образец_xlsx = ПолучитьМакет("ОбразецЗагрузкиДанных_xlsx_ru");
	ОбразецЗагрузкиДанных_xlsx = ПоместитьВоВременноеХранилище(Образец_xlsx, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_xlsx", ОбразецЗагрузкиДанных_xlsx);
	
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_mxl", "ОбразецЗагрузкиДанных_mxl_ru");
	
	Образец_csv = ПолучитьМакет("ОбразецЗагрузкиДанных_csv_ru");
	ОбразецЗагрузкиДанных_csv = ПоместитьВоВременноеХранилище(Образец_csv, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_csv", ОбразецЗагрузкиДанных_csv);
	
КонецПроцедуры

// АПК:299-выкл используется в модуле обработки ПомощникЗагрузкиДанныхИзВнешнегоИсточника
// Сопоставляет загружаемые данные
// 
// Параметры:
//  ПараметрыСопоставления - Структура - Параметры сопоставления
//  АдресРезультата - Структура - Адрес результата
Процедура СопоставитьЗагружаемыеДанныеИзВнешнегоИсточника(ПараметрыСопоставления, АдресРезультата) Экспорт
	
	ТаблицаСопоставленияДанных	= ПараметрыСопоставления.ТаблицаСопоставленияДанных;
	РазмерТаблицыДанных			= ТаблицаСопоставленияДанных.Количество();
	НастройкиЗагрузкиДанных		= ПараметрыСопоставления.НастройкиЗагрузкиДанных;
	НастройкиПоиска				= НастройкиЗагрузкиДанных.НастройкиПоиска;
	ВидЦен						= НастройкиЗагрузкиДанных.ВидЦен;

	ТаблицаДублирующихСтрок = ЗагрузкаДанныхИзВнешнегоИсточника.ПустаяТаблицаДублирующихСтрокНоменклатуры();
	НастройкиПоиска.Вставить("ТаблицаДублирующихСтрок", ТаблицаДублирующихСтрок);
	
	ПолноеИмяОбъектаЗаполнения = НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения;
	
	// ТаблицаСопоставленияДанных - Тип ДанныеФормыКоллекция
	Для каждого СтрокаТаблицыФормы Из ТаблицаСопоставленияДанных Цикл
		
		НоменклатураСопоставлена = Ложь;
		
		СтрокаТаблицыФормы.СчетУчетаЗапасов = Справочники.Номенклатура.СчетУчетаЗапасов();
		СтрокаТаблицыФормы.СчетУчетаЗатрат = ?(ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство"), 
			ПланыСчетов.Управленческий.НезавершенноеПроизводство, ПланыСчетов.Управленческий.КоммерческиеРасходы);
		СтрокаТаблицыФормы.СчетУчетаДоходов = ?(СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"), 
			ПланыСчетов.Управленческий.ПрочиеДоходы, ПланыСчетов.Управленческий.ПустаяСсылка());
			
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "НаправлениеДеятельности") Тогда
				
			ЗначениеПоУмолчанию = Справочники.НаправленияДеятельности.Прочее;
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНаправлениеДеятельности(СтрокаТаблицыФормы.НаправлениеДеятельности, СтрокаТаблицыФормы.НаправлениеДеятельности_ВходящиеДанные, ЗначениеПоУмолчанию);
			
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "МетодОценки") Тогда
				
			ЗначениеПоУмолчанию = Перечисления.МетодОценкиЗапасов.ПоСредней;
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьМетодОценки(СтрокаТаблицыФормы.МетодОценки, СтрокаТаблицыФормы.МетодОценки_ВходящиеДанные, ЗначениеПоУмолчанию);
			
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "СпособПополнения") Тогда
				
			ЗначениеПоУмолчанию = Перечисления.СпособыПополненияЗапасов.Закупка;
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСпособПополнения(СтрокаТаблицыФормы.СпособПополнения, СтрокаТаблицыФормы.СпособПополнения_ВходящиеДанные, ЗначениеПоУмолчанию);
			
		КонецЕсли;
		
		Если НЕ НоменклатураСопоставлена Тогда
		
			// Номенклатура по ШтрихКоду, Артикулу, Наименованию, НаименованиеПолное
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНоменклатуру(СтрокаТаблицыФормы, НастройкиПоиска);
		
		КонецЕсли; 
		
		// ВидыЦен по наименованию
		ЗначениеПоУмолчанию = ?(ЗначениеЗаполнено(ВидЦен), ВидЦен, Справочники.Контрагенты.ПолучитьОсновнойВидЦенПродажи());
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьВидЦен(СтрокаТаблицыФормы.ВидЦен, СтрокаТаблицыФормы.ВидЦен_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "Родитель")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "РодительНаименование")
			И ЗначениеЗаполнено(СтрокаТаблицыФормы.РодительНаименование) Тогда
			
			ЗначениеПоУмолчанию = Справочники.Номенклатура.ПустаяСсылка();
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьРодителяНоменклатуры(СтрокаТаблицыФормы.Родитель, "", СтрокаТаблицыФормы.РодительНаименование, ЗначениеПоУмолчанию);
			
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "ЭтоУслуга_ВходящиеДанные") Тогда
			
			Если ЗначениеЗаполнено(СтрокаТаблицыФормы.ЭтоУслуга_ВходящиеДанные) Тогда
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВБулево(СтрокаТаблицыФормы.ЭтоУслуга,
					СтрокаТаблицыФормы.ЭтоУслуга_ВходящиеДанные);
			Иначе
				СтрокаТаблицыФормы.ЭтоУслуга = НастройкиЗагрузкиДанных.ЗагрузкаТабличнойЧастиУслуги;
				СтрокаТаблицыФормы.ЭтоУслуга_ВходящиеДанные = НастройкиЗагрузкиДанных.ЗагрузкаТабличнойЧастиУслуги;
			КонецЕсли;			
			                      			
		КонецЕсли; 		
		
		
		Если НЕ НоменклатураСопоставлена 
			И ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") 
			И ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
			
			// Характеристика по Владельцу и Наименованию
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьХарактеристику(СтрокаТаблицыФормы);
			
		КонецЕсли;
		
		// ЕдиницыИзмерения по Наименованию
		ЗначениеПоУмолчанию = ?(ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура), СтрокаТаблицыФормы.Номенклатура.ЕдиницаИзмерения, Справочники.КлассификаторЕдиницИзмерения.шт);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЕдиницыИзмерения(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.ЕдиницаИзмерения, СтрокаТаблицыФормы.ЕдиницаИзмерения_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// Цена
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Цена, СтрокаТаблицыФормы.Цена_ВходящиеДанные, 1);
		 				
		ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения);
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ПрогрессСопоставленияДанных(ТаблицаСопоставленияДанных.Индекс(СтрокаТаблицыФормы), РазмерТаблицыДанных);
		
	КонецЦикла;
	
	ТаблицаСопоставленияДанных.ЗагрузитьКолонку(ТаблицаДублирующихСтрок.ВыгрузитьКолонку("КлючСвязи"), "_КлючСвязи");
	ПоместитьВоВременноеХранилище(ТаблицаСопоставленияДанных, АдресРезультата);
	
КонецПроцедуры
// АПК:299-вкл

Процедура ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения = "") Экспорт

	ИмяСлужебногоПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();

	НоменклатураЗаполнена = ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура);
	ЗагрузкаНоменклатурыВозможна = (ЗначениеЗаполнено(СтрокаТаблицыФормы.НоменклатураНаименование) ИЛИ ЗначениеЗаполнено(СтрокаТаблицыФормы.НоменклатураНаименованиеПолное));
	
	Если НоменклатураЗаполнена Тогда
		
		СтрокаТаблицыФормы._СтрокаСопоставлена = НоменклатураЗаполнена;
		СтрокаТаблицыФормы[ИмяСлужебногоПоля] = НЕ СтрокаТаблицыФормы.Номенклатура.ЭтоНабор // Исключая наборы
		И СтрокаТаблицыФормы.Цена <> 0;           		
		
	Иначе   				
		
		СтрокаТаблицыФормы[ИмяСлужебногоПоля] = ЗагрузкаНоменклатурыВозможна;
		
	КонецЕсли;			
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли