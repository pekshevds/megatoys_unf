#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполнить по основанию.
// 
// Параметры:
//  СтруктураЗаполнения - Структура:
//		* Основание - ДокументСсылка - документ основание
//
Процедура ЗаполнитьПоОснованию(СтруктураЗаполнения) Экспорт
	
	Если НЕ СтруктураЗаполнения.Свойство("Основание") Тогда		
		Возврат;	
	КонецЕсли;

	Основание = СтруктураЗаполнения.Основание;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		
		ЗаполнитьПоПриходнойНакладной(СтруктураЗаполнения);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		ЗаполнитьПоАвансовомуОтчету(СтруктураЗаполнения);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОприходованиеЗапасов") Тогда
		
		ЗаполнитьПоОприходованиюЗапасов(СтруктураЗаполнения);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СборкаЗапасов") Тогда
		
		ЗаполнитьПоСборкеЗапасов(СтруктураЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицу запасы по данным приходной накладной
//
// Параметры:
//  ДанныеЗаполнения - Структура - структура заполнения
//
Процедура ЗаполнитьПоПриходнойНакладной(ДанныеЗаполнения) Экспорт
	
	ДокументОснование = ДанныеЗаполнения.Основание;
	ВидыЦен = ДанныеЗаполнения.ВидыЦен;
	
	Если ВидыЦен.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных  = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("Документ.ПриходнаяНакладная");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ДокументОснование);
		БлокировкаДанных.Заблокировать();
		
		// Заполнение табличной части.
		Запасы.Очистить();
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПриходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
		|	ПриходнаяНакладнаяЗапасы.Характеристика КАК Характеристика,
		|	ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	МАКСИМУМ(ВЫБОР
		|		КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.СуммаВключаетНДС
		|			ТОГДА ПриходнаяНакладнаяЗапасы.Цена
		|		ИНАЧЕ ПриходнаяНакладнаяЗапасы.Цена + ПриходнаяНакладнаяЗапасы.СтавкаНДС.Ставка / 100 *
		|			ПриходнаяНакладнаяЗапасы.Цена
		|	КОНЕЦ) КАК Цена,
		|	МИНИМУМ(ПриходнаяНакладнаяЗапасы.НомерСтроки) КАК НомерСтроки,
		|	ПриходнаяНакладнаяЗапасы.Ссылка.Курс КАК Курс,
		|	ПриходнаяНакладнаяЗапасы.Ссылка.Кратность КАК Кратность,
		|	ПриходнаяНакладнаяЗапасы.Ссылка.ВалютаДокумента КАК ВалютаДокумента
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
		|ГДЕ
		|	ПриходнаяНакладнаяЗапасы.Ссылка = &ДокументОснование
		|СГРУППИРОВАТЬ ПО
		|	ПриходнаяНакладнаяЗапасы.Номенклатура,
		|	ПриходнаяНакладнаяЗапасы.Характеристика,
		|	ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения,
		|	ПриходнаяНакладнаяЗапасы.Ссылка.Курс,
		|	ПриходнаяНакладнаяЗапасы.Ссылка.Кратность,
		|	ПриходнаяНакладнаяЗапасы.Ссылка.ВалютаДокумента
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПриходнаяНакладнаяРасходы.Номенклатура,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
		|	ПриходнаяНакладнаяРасходы.ЕдиницаИзмерения,
		|	МАКСИМУМ(ВЫБОР
		|		КОГДА ПриходнаяНакладнаяРасходы.Ссылка.СуммаВключаетНДС
		|			ТОГДА ПриходнаяНакладнаяРасходы.Цена
		|		ИНАЧЕ ПриходнаяНакладнаяРасходы.Цена + ПриходнаяНакладнаяРасходы.СтавкаНДС.Ставка / 100 *
		|			ПриходнаяНакладнаяРасходы.Цена
		|	КОНЕЦ),
		|	МИНИМУМ(ПриходнаяНакладнаяРасходы.НомерСтроки),
		|	ПриходнаяНакладнаяРасходы.Ссылка.Курс,
		|	ПриходнаяНакладнаяРасходы.Ссылка.Кратность,
		|	ПриходнаяНакладнаяРасходы.Ссылка.ВалютаДокумента
		|ИЗ
		|	Документ.ПриходнаяНакладная.Расходы КАК ПриходнаяНакладнаяРасходы
		|ГДЕ
		|	ПриходнаяНакладнаяРасходы.Ссылка = &ДокументОснование
		|СГРУППИРОВАТЬ ПО
		|	ПриходнаяНакладнаяРасходы.Номенклатура,
		|	ПриходнаяНакладнаяРасходы.ЕдиницаИзмерения,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
		|	ПриходнаяНакладнаяРасходы.Ссылка.Курс,
		|	ПриходнаяНакладнаяРасходы.Ссылка.Кратность,
		|	ПриходнаяНакладнаяРасходы.Ссылка.ВалютаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыЦен.Ссылка КАК ВидЦены
		|ПОМЕСТИТЬ ВидыЦен
		|ИЗ
		|	Справочник.ВидыЦен КАК ВидыЦен
		|ГДЕ
		|	ВидыЦен.Ссылка В (&ВидыЦен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
		|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
		|	ТаблицаНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаНоменклатуры.Цена КАК Цена,
		|	ЕСТЬNULL(ВидыЦен.ВидЦены, НЕОПРЕДЕЛЕНО) КАК ВидЦены,
		|	ТаблицаНоменклатуры.Курс КАК КурсОснования,
		|	ТаблицаНоменклатуры.Кратность КАК КратностьОснования,
		|	ТаблицаНоменклатуры.ВалютаДокумента КАК ВалютаОснования,
		|	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) КАК КурсВидаЦены,
		|	ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 1) КАК КратностьВидаЦены
		|ИЗ
		|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВидыЦен КАК ВидыЦен
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаСреза,) КАК КурсыВалютСрезПоследних
		|			ПО ВидыЦен.ВидЦены.ВалютаЦены = КурсыВалютСрезПоследних.Валюта
		|		ПО ИСТИНА
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаНоменклатуры.НомерСтроки
		|ИТОГИ
		|ПО
		|	Номенклатура,
		|	ВидЦены,
		|	ЕдиницаИзмерения";
		
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		Запрос.УстановитьПараметр("ВидыЦен", ВидыЦен);
		Запрос.УстановитьПараметр("ДатаСреза", ДокументОснование.Дата);
		
		Результат = Запрос.Выполнить();
		
		ОбработатьРезультатЗапросаЗаполнения(Результат);
		
		ЗафиксироватьТранзакцию();
		
	Исключение

		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка заполнения табличной части по основанию'",
			ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

	КонецПопытки;
		
КонецПроцедуры

// Процедура - Заполнить по авансовому отчету
//
// Параметры:
//  ДанныеЗаполнения - Структура - структура заполнения
//
Процедура ЗаполнитьПоАвансовомуОтчету(ДанныеЗаполнения) Экспорт
	
	ДокументОснование = ДанныеЗаполнения.Основание;
	ВидыЦен = ДанныеЗаполнения.ВидыЦен;
	
	Если ВидыЦен.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных  = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("Документ.АвансовыйОтчет");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ДокументОснование);
		БлокировкаДанных.Заблокировать();
		
		// Заполнение табличной части.
		Запасы.Очистить();
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	АвансовыйОтчетЗапасы.Номенклатура КАК Номенклатура,
		               |	АвансовыйОтчетЗапасы.Характеристика КАК Характеристика,
		               |	АвансовыйОтчетЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |	МАКСИМУМ(ВЫБОР
		               |			КОГДА АвансовыйОтчетЗапасы.Ссылка.СуммаВключаетНДС
		               |				ТОГДА АвансовыйОтчетЗапасы.Цена
		               |			ИНАЧЕ АвансовыйОтчетЗапасы.Цена + АвансовыйОтчетЗапасы.СтавкаНДС.Ставка / 100 * АвансовыйОтчетЗапасы.Цена
		               |		КОНЕЦ) КАК Цена,
		               |	МИНИМУМ(АвансовыйОтчетЗапасы.НомерСтроки) КАК НомерСтроки,
		               |	АвансовыйОтчетЗапасы.Ссылка.Курс КАК Курс,
		               |	АвансовыйОтчетЗапасы.Ссылка.Кратность КАК Кратность,
		               |	АвансовыйОтчетЗапасы.Ссылка.ВалютаДокумента КАК ВалютаДокумента
		               |ПОМЕСТИТЬ ТаблицаНоменклатуры
		               |ИЗ
		               |	Документ.АвансовыйОтчет.Запасы КАК АвансовыйОтчетЗапасы
		               |ГДЕ
		               |	АвансовыйОтчетЗапасы.Ссылка = &ДокументОснование
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	АвансовыйОтчетЗапасы.Номенклатура,
		               |	АвансовыйОтчетЗапасы.Характеристика,
		               |	АвансовыйОтчетЗапасы.ЕдиницаИзмерения,
		               |	АвансовыйОтчетЗапасы.Номенклатура.ЕдиницаИзмерения,
		               |	АвансовыйОтчетЗапасы.Ссылка.Курс,
		               |	АвансовыйОтчетЗапасы.Ссылка.Кратность,
		               |	АвансовыйОтчетЗапасы.Ссылка.ВалютаДокумента
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	АвансовыйОтчетРасходы.Номенклатура,
		               |	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
		               |	АвансовыйОтчетРасходы.ЕдиницаИзмерения,
		               |	МАКСИМУМ(ВЫБОР
		               |			КОГДА АвансовыйОтчетРасходы.Ссылка.СуммаВключаетНДС
		               |				ТОГДА АвансовыйОтчетРасходы.Цена
		               |			ИНАЧЕ АвансовыйОтчетРасходы.Цена + АвансовыйОтчетРасходы.СтавкаНДС.Ставка / 100 * АвансовыйОтчетРасходы.Цена
		               |		КОНЕЦ),
		               |	МИНИМУМ(АвансовыйОтчетРасходы.НомерСтроки),
		               |	АвансовыйОтчетРасходы.Ссылка.Курс ,
		               |	АвансовыйОтчетРасходы.Ссылка.Кратность ,
		               |	АвансовыйОтчетРасходы.Ссылка.ВалютаДокумента 
		               |ИЗ
		               |	Документ.АвансовыйОтчет.Расходы КАК АвансовыйОтчетРасходы
		               |ГДЕ
		               |	АвансовыйОтчетРасходы.Ссылка = &ДокументОснование
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	АвансовыйОтчетРасходы.Номенклатура,
		               |	АвансовыйОтчетРасходы.ЕдиницаИзмерения,
		               |	АвансовыйОтчетРасходы.Ссылка.Курс,
		               |	АвансовыйОтчетРасходы.Ссылка.Кратность,
		               |	АвансовыйОтчетРасходы.Ссылка.ВалютаДокумента
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВидыЦен.Ссылка КАК ВидЦены
		               |ПОМЕСТИТЬ ВидыЦен
		               |ИЗ
		               |	Справочник.ВидыЦен КАК ВидыЦен
		               |ГДЕ
		               |	ВидыЦен.Ссылка В (&ВидыЦен)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
		               |	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
		               |	ТаблицаНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |	ТаблицаНоменклатуры.Цена КАК Цена,
		               |	ЕСТЬNULL(ВидыЦен.ВидЦены, НЕОПРЕДЕЛЕНО) КАК ВидЦены,
		               |	ТаблицаНоменклатуры.Курс КАК КурсОснования,
		               |	ТаблицаНоменклатуры.Кратность КАК КратностьОснования,
		               |	ТаблицаНоменклатуры.ВалютаДокумента КАК ВалютаОснования,
		               |	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) КАК КурсВидаЦены,
		               |	ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 1) КАК КратностьВидаЦены
		               |ИЗ
		               |	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВидыЦен КАК ВидыЦен
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаСреза,) КАК КурсыВалютСрезПоследних
		               |			ПО ВидыЦен.ВидЦены.ВалютаЦены = КурсыВалютСрезПоследних.Валюта
		               |		ПО ИСТИНА
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ТаблицаНоменклатуры.НомерСтроки
		               |ИТОГИ ПО
		               |	Номенклатура,
		               |	ВидЦены,
		               |	ЕдиницаИзмерения";
		
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		Запрос.УстановитьПараметр("ВидыЦен", ВидыЦен);
		Запрос.УстановитьПараметр("ДатаСреза", ДокументОснование.Дата);
		
		Результат = Запрос.Выполнить();
		
		ОбработатьРезультатЗапросаЗаполнения(Результат);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка заполнения табличной части по основанию'", 
			ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	
	КонецПопытки;
	
КонецПроцедуры

// Процедура - Заполнить по оприходованию запасов
//
// Параметры:
//  ДанныеЗаполнения - Структура - структура заполнения
//
Процедура ЗаполнитьПоОприходованиюЗапасов(ДанныеЗаполнения) Экспорт
	
	ДокументОснование = ДанныеЗаполнения.Основание;
	ВидыЦен = ДанныеЗаполнения.ВидыЦен;
	
	Если ВидыЦен.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных  = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("Документ.ОприходованиеЗапасов");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ДокументОснование);
		БлокировкаДанных.Заблокировать();
		
		// Заполнение табличной части.
		Запасы.Очистить();
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОприходованиеЗапасовЗапасы.Номенклатура КАК Номенклатура,
		|	ОприходованиеЗапасовЗапасы.Характеристика КАК Характеристика,
		|	ОприходованиеЗапасовЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	МАКСИМУМ(ОприходованиеЗапасовЗапасы.Цена) КАК Цена,
		|	МИНИМУМ(ОприходованиеЗапасовЗапасы.НомерСтроки) КАК НомерСтроки,
		|	ISNULL(КурсыВалют.Курс, 1) КАК Курс,
		|	ISNULL(КурсыВалют.Кратность, 1) КАК Кратность,
		|	ISNULL(КурсыВалют.Валюта, &ВалютаУчета) КАК ВалютаДокумента
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	Документ.ОприходованиеЗапасов.Запасы КАК ОприходованиеЗапасовЗапасы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаСреза, Валюта = &ВалютаУчета) КАК КурсыВалют
		|		ПО ИСТИНА
		|ГДЕ
		|	ОприходованиеЗапасовЗапасы.Ссылка = &ДокументОснование
		|СГРУППИРОВАТЬ ПО
		|	ОприходованиеЗапасовЗапасы.Номенклатура,
		|	ОприходованиеЗапасовЗапасы.Характеристика,
		|	ОприходованиеЗапасовЗапасы.ЕдиницаИзмерения,
		|	КурсыВалют.Курс,
		|	КурсыВалют.Кратность,
		|	КурсыВалют.Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыЦен.Ссылка КАК ВидЦены
		|ПОМЕСТИТЬ ВидыЦен
		|ИЗ
		|	Справочник.ВидыЦен КАК ВидыЦен
		|ГДЕ
		|	ВидыЦен.Ссылка В (&ВидыЦен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
		|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
		|	ТаблицаНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаНоменклатуры.Цена КАК Цена,
		|	ЕСТЬNULL(ВидыЦен.ВидЦены, НЕОПРЕДЕЛЕНО) КАК ВидЦены,		
		|	ТаблицаНоменклатуры.Курс КАК КурсОснования,
		|	ТаблицаНоменклатуры.Кратность КАК КратностьОснования,
		|	ТаблицаНоменклатуры.ВалютаДокумента КАК ВалютаОснования,
		|	ТаблицаНоменклатуры.Курс КАК КурсВидаЦены,
		|	ТаблицаНоменклатуры.Кратность КАК КратностьВидаЦены
		|ИЗ
		|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВидыЦен КАК ВидыЦен
		|		ПО (ИСТИНА)
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаНоменклатуры.НомерСтроки
		|ИТОГИ
		|ПО
		|	Номенклатура,
		|	ВидЦены,
		|	ЕдиницаИзмерения";
		
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		Запрос.УстановитьПараметр("ДатаСреза", ДокументОснование.Дата);
		Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
		Запрос.УстановитьПараметр("ВидыЦен", ВидыЦен);
		Результат = Запрос.Выполнить();
		
		ОбработатьРезультатЗапросаЗаполнения(Результат);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка заполнения табличной части по основанию'", 
			ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	
	КонецПопытки;
	
КонецПроцедуры

// Процедура - Заполнить по оприходованию запасов
//
// Параметры:
//  ДанныеЗаполнения - Структура - структура заполнения
//
Процедура ЗаполнитьПоСборкеЗапасов(ДанныеЗаполнения) Экспорт
	
	ДокументОснование = ДанныеЗаполнения.Основание;
	ВидыЦен = ДанныеЗаполнения.ВидыЦен;
	
	Если ВидыЦен.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных  = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("Документ.СборкаЗапасов");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ДокументОснование);
		БлокировкаДанных.Заблокировать();
		
		// Заполнение табличной части.
		Запасы.Очистить();
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СборкаЗапасовПродукция.Номенклатура КАК Номенклатура,
		|	СборкаЗапасовПродукция.Характеристика КАК Характеристика,
		|	СборкаЗапасовПродукция.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	0 КАК Цена,
		|	МИНИМУМ(СборкаЗапасовПродукция.НомерСтроки) КАК НомерСтроки,
		|	ISNULL(КурсыВалют.Курс, 1) КАК Курс,
		|	ISNULL(КурсыВалют.Кратность, 1) КАК Кратность,
		|	ISNULL(КурсыВалют.Валюта, &ВалютаУчета) КАК ВалютаДокумента
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	Документ.СборкаЗапасов.Продукция КАК СборкаЗапасовПродукция
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаСреза, Валюта = &ВалютаУчета) КАК КурсыВалют
		|		ПО ИСТИНА
		|ГДЕ
		|	СборкаЗапасовПродукция.Ссылка = &ДокументОснование
		|СГРУППИРОВАТЬ ПО
		|	СборкаЗапасовПродукция.Номенклатура,
		|	СборкаЗапасовПродукция.Характеристика,
		|	СборкаЗапасовПродукция.ЕдиницаИзмерения,
		|	КурсыВалют.Курс,
		|	КурсыВалют.Кратность,
		|	КурсыВалют.Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыЦен.Ссылка КАК ВидЦены
		|ПОМЕСТИТЬ ВидыЦен
		|ИЗ
		|	Справочник.ВидыЦен КАК ВидыЦен
		|ГДЕ
		|	ВидыЦен.Ссылка В (&ВидыЦен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
		|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
		|	ТаблицаНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаНоменклатуры.Цена КАК Цена,
		|	ЕСТЬNULL(ВидыЦен.ВидЦены, НЕОПРЕДЕЛЕНО) КАК ВидЦены,
		|	ТаблицаНоменклатуры.Курс КАК КурсОснования,
		|	ТаблицаНоменклатуры.Кратность КАК КратностьОснования,
		|	ТаблицаНоменклатуры.ВалютаДокумента КАК ВалютаОснования,
		|	ТаблицаНоменклатуры.Курс КАК КурсВидаЦены,
		|	ТаблицаНоменклатуры.Кратность КАК КратностьВидаЦены
		|ИЗ
		|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВидыЦен КАК ВидыЦен
		|		ПО (ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаНоменклатуры.НомерСтроки
		|ИТОГИ
		|ПО
		|	Номенклатура,
		|	ВидЦены,
		|	ЕдиницаИзмерения";
		
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		Запрос.УстановитьПараметр("ДатаСреза", ДокументОснование.Дата);
		Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
		Запрос.УстановитьПараметр("ВидыЦен", ВидыЦен);
		Результат = Запрос.Выполнить();
		
		ОбработатьРезультатЗапросаЗаполнения(Результат);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка заполнения табличной части по основанию'", 
			ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		
		СтруктураЗаполнения = Новый Структура;
		СтруктураЗаполнения.Вставить("Основание", ДанныеЗаполнения);
		СтруктураЗаполнения.Вставить("ВидыЦен", ВидыЦенЗаполнятьИзОснования());
		
	Иначе
		
		СтруктураЗаполнения = ДанныеЗаполнения;
		
	КонецЕсли;
		
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("Структура")] 	= "ЗаполнитьПоОснованию";
		
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, СтруктураЗаполнения, СтратегияЗаполнения, "");
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Запасы.Количество() = 0 Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Необходимо указать запасы в табличной части'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
		Возврат;
	КонецЕсли;
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность()
		И НЕ ПометкаУдаления Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	// Конец МобильноеПриложение
		
	Если ЭтоНовый() И НЕ ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	УдалитьЦеныПоДокументу(Отказ);
	СтруктураДанных = ИнициализироватьДанныеДокумента();
	Документы.УстановкаЦенНоменклатуры.ЗаписатьНовыеЦены(СтруктураДанных);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ЗаполнитьОчередьРасчетаЦенПоДокументу();
	УдалитьЦеныПоДокументу(Отказ); 	
	
КонецПроцедуры  

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПометкаУдаления И Ссылка.ПометкаУдаления Тогда
		УдалитьЦеныПоДокументу(Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование = Документы.ПриходнаяНакладная.ПустаяСсылка();
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВидыЦенЗаполнятьИзОснования()
	
	Запрос = Новый Запрос;
	// АПК:96-выкл проектное решение
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВидыЦен.Ссылка КАК ВидЦен
	               |ПОМЕСТИТЬ Базовые
	               |ИЗ
	               |	Справочник.ВидыЦен КАК ВидыЦен
	               |ГДЕ
	               |	ВидыЦен.ЗаполнятьИзОснования
	               |	И НЕ ВидыЦен.Недействителен
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Базовые.ВидЦен КАК ВидЦен,
	               |	Базовые.ВидЦен.ИдентификаторФормул КАК ИдентификаторФормул
	               |ИЗ
	               |	Базовые КАК Базовые
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	Проценты.Ссылка,
	               |	Проценты.ИдентификаторФормул
	               |ИЗ
	               |	Справочник.ВидыЦен КАК Проценты
	               |ГДЕ
	               |	Проценты.БазовыйВидЦен В
	               |			(ВЫБРАТЬ
	               |				Б.ВидЦен
	               |			ИЗ
	               |				Базовые КАК Б)
	               |	И НЕ Проценты.Недействителен
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВидыЦен.Ссылка КАК ВидЦен,
	               |	ВидыЦен.Формула КАК Формула
	               |ИЗ
	               |	Справочник.ВидыЦен КАК ВидыЦен
	               |ГДЕ
	               |	НЕ ВидыЦен.Формула ПОДОБНО """"
	               |	И НЕ ВидыЦен.Недействителен";
	// АПК:96-вкл
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ТаблицаВидовЦен = РезультатЗапроса[1].Выгрузить();
	ТаблицаФормул = РезультатЗапроса[2].Выгрузить();
	Результат = Новый Массив;
	Для каждого ЗаписьВидаЦены Из ТаблицаВидовЦен Цикл
	
		Результат.Добавить(ЗаписьВидаЦены.ВидЦен);
		Для каждого ЗаписьФормул Из ТаблицаФормул Цикл
		
			Если СтрНайти(ЗаписьФормул.Формула, ЗаписьВидаЦены.ИдентификаторФормул) <> 0 
				И Результат.Найти(ЗаписьФормул.ВидЦен) = Неопределено Тогда
				Результат.Добавить(ЗаписьФормул.ВидЦен);
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ИнициализироватьДанныеДокумента()
	
	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("ПериодЗаписи", Дата);
	СтруктураДанных.Вставить("ПоказыватьХарактеристики", ПоказыватьХарактеристики);
	СтруктураДанных.Вставить("УстанавливатьХарактеристикамБезЦен", УстанавливатьХарактеристикамБезЦен);
	СтруктураДанных.Вставить("ЗаписыватьНовыеЦеныПоверхУстановленных", ЗаписыватьНовыеЦеныПоверхУстановленных);
	СтруктураДанных.Вставить("ТаблицаНоменклатуры", ПолучитьЗапасыДляЗаписи());
	СтруктураДанных.Вставить("ДокументУстановки", Ссылка);

	ЦенообразованиеСервер.ИсключитьЗаписиСтарыхЦенИзТаблицы(СтруктураДанных.ТаблицаНоменклатуры); 
	
	МассивВидовЦенДокумента = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
		СтруктураДанных.ТаблицаНоменклатуры.ВыгрузитьКолонку("ВидЦены"));
	МассивВидовЦен = Новый Массив;
	Для каждого ВидЦены Из МассивВидовЦенДокумента Цикл
		
		МассивВидовЦен.Добавить(ВидЦены);
		Если ЗначениеЗаполнено(ВидЦены.БазовыйВидЦен) Тогда
			МассивВидовЦен.Добавить(ВидЦены.БазовыйВидЦен);
		КонецЕсли;
		
	КонецЦикла;
	
	КэшЗначений = Новый Структура;
	КэшЗначений.Вставить("АвторизированныйПользователь", Пользователи.АвторизованныйПользователь());
	КэшЗначений.Вставить("ВыбранныеВидыЦен", МассивВидовЦен);
	КэшЗначений.Вставить("ИсключенныеВидыЦен", ПолучитьИсключенныеЦеныДляПроведения());
	КэшЗначений.Вставить("ЗаписиРегистраЗаПериода");
	
	СтруктураДанных.Вставить("КэшЗначений", КэшЗначений);

	Возврат СтруктураДанных;
	
КонецФункции

Функция ПолучитьИсключенныеЦеныДляПроведения()
	
	Результат = Новый Массив;
	МассивВидовЦен = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Запасы.ВыгрузитьКолонку("ВидЦены"));
	Для каждого ВидЦены Из МассивВидовЦен Цикл
		
		Если ВидЦены.РассчитыватьАвтоматически Тогда
			
			Результат.Добавить(ВидЦены);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура УдалитьЦеныПоДокументу(Отказ)
	
	НачатьТранзакцию();
	
	Попытка
	
		БлокировкаДанных		= Новый БлокировкаДанных;		
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ЦеныНоменклатуры");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = Запасы;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Характеристика", "Характеристика");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ВидЦен", "ВидЦены");
		ЭлементБлокировки.УстановитьЗначение("Период", НачалоДня(Дата)); 		
		БлокировкаДанных.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументУстановки", Ссылка);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ЦеныНоменклатуры.Период КАК Период,
		               |	ЦеныНоменклатуры.ВидЦен КАК ВидЦен,
		               |	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
		               |	ЦеныНоменклатуры.Характеристика КАК Характеристика
		               |ИЗ
		               |	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		               |ГДЕ
		               |	ЦеныНоменклатуры.ДокументУстановки = &ДокументУстановки
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ЦеныНоменклатуры.Характеристика,
		               |	ЦеныНоменклатуры.ВидЦен,
		               |	ЦеныНоменклатуры.Период,
		               |	ЦеныНоменклатуры.Номенклатура";
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
				НаборЗаписей.Отбор.ВидЦен.Установить(Выборка.ВидЦен);
				НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
				НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика);				
				НаборЗаписей.ДополнительныеСвойства.Вставить("ОтменаПроведения", Истина); 				
				НаборЗаписей.Записать(Истина);
								
			КонецЦикла;		
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		 	
	Исключение
		
		ОтменитьТранзакцию();		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка удаления записей по документу'",
			ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Отказ = Истина;
	
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьОчередьРасчетаЦенПоДокументу()
	
	НачатьТранзакцию();
	
	Попытка
	
		БлокировкаДанных		= Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ЦеныНоменклатуры");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = Запасы;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Характеристика", "Характеристика");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ВидЦен", "ВидЦены");
		ЭлементБлокировки.УстановитьЗначение("Период", НачалоДня(Дата));
		БлокировкаДанных.Заблокировать();
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументУстановки", Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЦеныНоменклатуры.Период КАК ПериодЗаписи,
		               |	ЦеныНоменклатуры.ВидЦен КАК ВидЦенРасчетный,
		               |	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
		               |	ЦеныНоменклатуры.Характеристика КАК Характеристика
		               |ИЗ
		               |	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		               |ГДЕ
		               |	ЦеныНоменклатуры.ДокументУстановки = &ДокументУстановки
		               |	И НЕ ЦеныНоменклатуры.ВидЦен.ТипВидаЦен В (ЗНАЧЕНИЕ(Перечисление.ТипыВидовЦен.Статический), ЗНАЧЕНИЕ(Перечисление.ТипыВидовЦен.ПроизвольныйЗапрос))
		               |ИТОГИ ПО
		               |	ВидЦенРасчетный";
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			ВыборкаВидаЦен = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаВидаЦен.Следующий() Цикл
				
				Набор = РегистрыСведений.ОчередьРасчетаЦен.СоздатьНаборЗаписей();
				НомерОчередиЦен = ЦенообразованиеСервер.УстановитьРабочийНомерОчередиЦен();
				Выборка = ВыборкаВидаЦен.Выбрать();
				Пока Выборка.Следующий() Цикл
					Запись = Набор.Добавить();
					ЗаполнитьЗначенияСвойств(Запись, Выборка);
					Запись.НомерОчередиЦен = НомерОчередиЦен;
				КонецЦикла;		
				Набор.Записать(Ложь);
				ВидЦеныРасчетныйОбъект = ВыборкаВидаЦен.ВидЦенРасчетный.ПолучитьОбъект();
				ВидЦеныРасчетныйОбъект.Заблокировать();
				ВидЦеныРасчетныйОбъект.ЦеныАктуальны = Ложь;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидЦеныРасчетныйОбъект, Ложь, Ложь);
				
			КонецЦикла;
		КонецЕсли;
		
	ЗафиксироватьТранзакцию();
		 	
	Исключение
		
		ОтменитьТранзакцию();		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка заполнения очереди расчета цен по документу'", 
			ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , , 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаЗаполнения(Знач Результат)
	
	Если НЕ Результат.Пустой() Тогда
		
		ДеревоЗаполнения = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		ПоказыватьХарактеристики = Ложь;
		
		Для каждого СтрокаНоменклатуры Из ДеревоЗаполнения.Строки Цикл
			
			Для каждого СтрокаВидаЦены Из СтрокаНоменклатуры.Строки Цикл 
			
				Для каждого СтрокаЕдиницы Из СтрокаВидаЦены.Строки Цикл
					
					Для каждого СтрокаДетали Из СтрокаЕдиницы.Строки Цикл
						
						Запись = Запасы.Добавить();
						Запись.Номенклатура = СтрокаНоменклатуры.Номенклатура;
						Запись.ВидЦены = СтрокаВидаЦены.ВидЦены;
						Запись.Характеристика = СтрокаДетали.Характеристика;
						Запись.ЕдиницаИзмерения = СтрокаЕдиницы.ЕдиницаИзмерения;
						
						Запись.Валюта = СтрокаДетали.ВалютаОснования;
						
						Если Запись.ВидЦены <> Неопределено
							И (Запись.ВидЦены.ТипВидаЦен = Перечисления.ТипыВидовЦен.ПроизвольныйЗапрос
							ИЛИ Запись.ВидЦены.ТипВидаЦен = Перечисления.ТипыВидовЦен.Расширение) Тогда
							
							Запись.Цена = 0;
						
						Иначе
							
							Запись.Цена = СтрокаДетали.Цена;
							
						КонецЕсли;
						
						Если ЗначениеЗаполнено(Запись.ВидЦены) 
							И СтрокаДетали.ВалютаОснования <> Запись.ВидЦены.ВалютаЦены
							И Не Запись.ВидЦены.НесколькоВалютДляЦен Тогда
							
							Запись.Цена = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
								Запись.Цена, 
								СтрокаДетали.КурсОснования,
								СтрокаДетали.КурсВидаЦены, 
								СтрокаДетали.КратностьОснования,
								СтрокаДетали.КратностьВидаЦены);
							Запись.Валюта = Запись.ВидЦены.ВалютаЦены;
							
							Запись.Цена = ЦенообразованиеСервер.ОкруглитьЦенуПоВидуЦен(Запись.Цена, Запись.ВидЦены);
							
						КонецЕсли;
						
						Если НЕ ПоказыватьХарактеристики Тогда
							
							ПоказыватьХарактеристики = ЗначениеЗаполнено(Запись.Характеристика);
							
						КонецЕсли;
					
					КонецЦикла;
				
				КонецЦикла;
				
			КонецЦикла;
		
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьЗапасыДляЗаписи()
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		Возврат Запасы.Выгрузить();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УстановкаЦенНоменклатурыЗапасы.Ссылка КАК Ссылка,
	               |	УстановкаЦенНоменклатурыЗапасы.НомерСтроки КАК НомерСтроки,
	               |	УстановкаЦенНоменклатурыЗапасы.Номенклатура КАК Номенклатура,
	               |	УстановкаЦенНоменклатурыЗапасы.Характеристика КАК Характеристика,
	               |	УстановкаЦенНоменклатурыЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	УстановкаЦенНоменклатурыЗапасы.ВидЦены КАК ВидЦены,
	               |	УстановкаЦенНоменклатурыЗапасы.Цена КАК Цена,
	               |	УстановкаЦенНоменклатурыЗапасы.ЦенаСтарая КАК ЦенаСтарая,
	               |	УстановкаЦенНоменклатурыЗапасы.Валюта КАК Валюта,
	               |	УстановкаЦенНоменклатурыЗапасы.ВалютаСтарая КАК ВалютаСтарая
	               |ИЗ
	               |	Документ.УстановкаЦенНоменклатуры.Запасы КАК УстановкаЦенНоменклатурыЗапасы
	               |ГДЕ
	               |	УстановкаЦенНоменклатурыЗапасы.Ссылка = &Ссылка
	               |	И ВЫБОР
	               |			КОГДА УстановкаЦенНоменклатурыЗапасы.Номенклатура.ПроверятьЗаполнениеХарактеристики
	               |					И УстановкаЦенНоменклатурыЗапасы.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	               |				ТОГДА ЛОЖЬ
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли