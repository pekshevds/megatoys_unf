#Область ОписаниеПеременных

&НаКлиенте
Перем ЦенаДоИзменения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	Перем МассивВидовЦен;
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	МассивВидовЦен = Новый Массив;
	Если Объект.Запасы.Количество() > 0 Тогда
		ТаблицаВидовЦен = Объект.Запасы.Выгрузить();
		МассивВидовЦен = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаВидовЦен.ВыгрузитьКолонку("ВидЦены"));
	КонецЕсли;

	УстановитьКэшЗначений();

	КэшЗначений.Вставить("ВидыЦенВыбраныПриЗаполнении", МассивВидовЦен.Количество() > 0);

	ЗаполнитьДеревоОперандов(МассивВидовЦен);

	ТЧНоменклатура.Очистить();
	ТЧХарактеристики.Очистить();

	Если Объект.Запасы.Количество() > 0 И КэшЗначений.ВидыЦенВыбраныПриЗаполнении Тогда

		ЗаполнитьКэшЗначенийВидамиЦен(КэшЗначений);
		ИзменитьСоставРеквизитовИЭлементовТабличнойЧасти("ТЧНоменклатура");
		ИзменитьСоставРеквизитовИЭлементовТабличнойЧасти("ТЧХарактеристики");

		Если Объект.Запасы.Количество() < 50 Тогда
			ЗаполнитьТаблицуНоменклатурыИХарактеристикПоДокументу(Ложь, Ложь);
			УстановитьВидимостьГруппыБазовыхЦен();
			КэшЗначений.ОтключенныеВидыЦен.Очистить();
		Иначе
			КэшЗначений.Вставить("ЗаполнитьДокументФоновымЗаданием", Истина);
		КонецЕсли;

	КонецЕсли;

	СортироватьКолонкиВидовЦенНаФорме();

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Перем МассивВидовЦен;

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(
		Метаданные.Документы.УстановкаЦенНоменклатуры.ТабличныеЧасти.Запасы, НастройкиЗагрузкиДанных, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиУНФ.ЗаполнитьДополнительныеПараметры(Объект,
		"ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);

	МассивВидовЦен = Новый Массив;
	Если Объект.Запасы.Количество() > 0 Тогда

		ТаблицаВидовЦен = Объект.Запасы.Выгрузить();
		МассивВидовЦен = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаВидовЦен.ВыгрузитьКолонку("ВидЦены"));

	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда

		Если Параметры.Свойство("РасчетИзВидаЦен") Тогда
			Если Параметры.ВидЦен.ТипВидаЦен = Перечисления.ТипыВидовЦен.Статический Или Параметры.ВидЦен.ТипВидаЦен
				= Перечисления.ТипыВидовЦен.ПроизвольныйЗапрос Или Параметры.ВидЦен.ТипВидаЦен
				= Перечисления.ТипыВидовЦен.Расширение Тогда

				МассивВидовЦен.Добавить(Параметры.ВидЦен);

			КонецЕсли;
		КонецЕсли;

		Объект.ПоказыватьЗависимыеЦены = Истина;

	КонецЕсли;

	Если Параметры.Свойство("ВидЦен") Тогда
		МассивВидовЦен.Добавить(Параметры.ВидЦен);
		Документы.УстановкаЦенНоменклатуры.ЗаполнитьЗапасыПоОчередиРасчета(Объект.Запасы, Параметры.ВидЦен,
			Объект.ПоказыватьХарактеристики);
	КонецЕсли;

	Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(
		Объект.ДокументОснование);
	ЗаполнитьСписокДокументОснование();

	Если КэшЗначений = Неопределено Тогда
		УстановитьКэшЗначений();
	КонецЕсли;
	
	КэшЗначений.Вставить("НетВидовЦенСАвтовыборомВводаНаОсновании"	, НетВидовЦенСАвтовыборомВводаНаОсновании());
    КэшЗначений.Вставить("ИзмененСоставКолонокВидовЦен"				, Ложь); 
	
	КэшЗначений.Вставить("ВыбраныЦеныПоступленияСКДИЗаполненоОснование",
		ВыбраныЦеныПоступленияСКДИЗаполненоОснование(КэшЗначений.ВыбранныеВидыЦен, ЗначениеЗаполнено(Объект.ДокументОснование)));
	

	КэшЗначений.Вставить("ВидыЦенВыбраныПриЗаполнении", МассивВидовЦен.Количество() > 0 И ЗначениеЗаполнено(
		МассивВидовЦен[0]));

	ЗаполнитьДеревоОперандов(МассивВидовЦен);

	Если Объект.Запасы.Количество() > 0 И КэшЗначений.ВидыЦенВыбраныПриЗаполнении И Не ЗначениеЗаполнено(Объект.Ссылка) Тогда

		ЗаполнитьКэшЗначенийВидамиЦен(КэшЗначений);
		ИзменитьСоставРеквизитовИЭлементовТабличнойЧасти("ТЧНоменклатура");
		ИзменитьСоставРеквизитовИЭлементовТабличнойЧасти("ТЧХарактеристики");
		Запасы = Объект.Запасы.Выгрузить();
		ЦенообразованиеСервер.ИзменитьЦенуВТаблицеПоПорогамСрабатывания(Запасы, КэшЗначений.ВыбранныеВидыЦен,
			Объект.Дата);
		Объект.Запасы.Загрузить(Запасы);
		ЗаполнитьТаблицуНоменклатурыИХарактеристикПоДокументу(Истина, Ложь);

		ЗаполнитьСписокВыбораДатДокументаИзОчередиРасчета(МассивВидовЦен);

	КонецЕсли;

	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВидыЦенИспользование", "Вид",
			ВидПоляФормы.ПолеНадписи);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВидыЦенИспользование", "Формат",
			"БЛ=пропустить; БИ=рассчитывается");
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТабличнаяЧастьГруппа1", "Заголовок",
			НСтр("ru ='Подобрать'"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияЧетыре", "Картинка",
			БиблиотекаКартинок.Информация);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияШесть", "Картинка",
			БиблиотекаКартинок.Информация);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияЧетыре", "Ширина", 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияШесть", "Ширина", 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияЧетыре", "Высота", 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияШесть", "Высота", 0);

	КонецЕсли;
	
	РаботаСФормойДокумента.НастроитьВидимостьГруппыИнформации(ЭтотОбъект, "ГруппаИнформацияПоНастройкеВидимостиПолей",
		"ПоказыватьИнформациюНовоеПоВидимостиПолей");

	СортироватьКолонкиВидовЦенНаФорме();

	ПрочитатьИУстановитьНастройкиИнформационногоПоля();

	УстановитьУсловноеОформление();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	Если Объект.Запасы.Количество() > 0 И КэшЗначений.ВидыЦенВыбраныПриЗаполнении Тогда

		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаТовары;
		КэшЗначений.НовыеВидыЦен.Очистить();
		КэшЗначений.ПервоеПереключениеНаОсновании = Ложь;

		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда

			НачатьЗаполнениеЦенПоДаннымИБНаКлиенте();

		КонецЕсли;

	Иначе

		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВидыЦен;

	КонецЕсли;

	ЗагрузитьНастройкиФормы();

	УстановитьВидимостьЭлементов();

	УстановитьВидимостьИнформационногоПоля();

	РазвернутьДеревоВидовЦен();
	
	ОбновитьОтображениеКолонокВРазрезеЗапасов();
	
	ОбновитьКоличествоЗаписейПоДокументу();

	ИзменитьЭлементыФормыПоВыбраннымВидамЦен();

	ЗаполнитьТабличнуюЧастьПриОткрытии();

	ОбработатьПодключениеОборудованияПриОткрытии();

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	СтатистикаИспользованияФормКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы);

	Если Не ЗавершениеРаботы Тогда

		СохраняемыеНастройки = Новый Структура;
		СохраняемыеНастройки.Вставить("ПоказыватьХарактеристики", Объект.ПоказыватьХарактеристики);
		СохраняемыеНастройки.Вставить("ПоказыватьНедействительныеХарактеристики",
			Объект.ПоказыватьНедействительныеХарактеристики);
		СохраняемыеНастройки.Вставить("ПоказыватьОтклонениеЦен", Объект.ПоказыватьОтклонениеЦен);
		СохраняемыеНастройки.Вставить("ПоказыватьДействующуюЦену", Объект.ПоказыватьДействующуюЦену);
		СохраняемыеНастройки.Вставить("ПоказыватьЕдиницыИзмерения", Объект.ПоказыватьЕдиницыИзмерения);
		СохраняемыеНастройки.Вставить("ПоказыватьЗависимыеЦены", Объект.ПоказыватьЗависимыеЦены);
		СохраняемыеНастройки.Вставить("ГруппаНастроекСвернута", Элементы.ГруппаНастройки.Скрыта());
		СохраняемыеНастройки.Вставить("ОтображатьПанельИнформации", Элементы.ГруппаПанельИнформации.Видимость);
		СохраняемыеНастройки.Вставить("ПраваяПанельВидимость", ПраваяПанельВидимость);
		
		НастройкиТабличныхЧастей = Новый Структура;
		НастройкиТабличныхЧастей.Вставить("НоменклатураАртикул", Элементы.ТЧНоменклатураНоменклатураАртикул.Видимость);
		НастройкиТабличныхЧастей.Вставить("НоменклатураШтрихкод", Элементы.ТЧНоменклатураНоменклатураШтрихкод.Видимость);
		НастройкиТабличныхЧастей.Вставить("НоменклатураКод", Элементы.ТЧНоменклатураНоменклатураКод.Видимость);
		
		НастройкиТабличныхЧастей.Вставить("ХарактеристикаАртикул",
			Элементы.ТЧХарактеристикиХарактеристикаАртикул.Видимость);
		НастройкиТабличныхЧастей.Вставить("ХарактеристикаШтрихкод",
			Элементы.ТЧХарактеристикиХарактеристикаШтрихкод.Видимость);
		НастройкиТабличныхЧастей.Вставить("ХарактеристикаКод", Элементы.ТЧХарактеристикиХарактеристикаКод.Видимость);
		
		СохраняемыеНастройки.Вставить("НастройкиТабличныхЧастей", НастройкиТабличныхЧастей);

		КлючНастроек = "НовыйДокументУстановкаЦенНоменклатуры";
		СохранитьНастройкиФормы(СохраняемыеНастройки, КлючНастроек);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда

		ВыбратьМассивНоменклатуры(ВыбранноеЗначение);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

	Если ИмяСобытия = "ИзменитьФлагЗаполнятьИзОснования" Тогда

		ИзменитьФлагЗаполнятьИзОснованияДляВидаЦены(Параметр.ВидЦен, Параметр.Значение);
		УстановитьВидимостьИнформационногоПоля();

	КонецЕсли;

	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда

		ОбработатьСобытиеОповещенияПодключаемогоОборудования(ИмяСобытия, Параметр);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("Проведение"
			+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ИмяФормы));
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности

	Если ВидыЦенВыбраны() Тогда
		
		МассивИменТабличныхЧастей = ПолучитьМассивИменТЧДляИзменения();
		ИзменитьСоставРеквизитовИЭлементовТабличнойЧасти(МассивИменТабличныхЧастей); 

		Если ЗначениеЗаполнено(Объект.ДокументОснование) И ТЧНоменклатура.Количество() = 0 Тогда

			ЗаполнитьПоОснованиюЗавершение(КодВозвратаДиалога.Да, Неопределено);
			КэшЗначений.ПервоеПереключениеНаОсновании = Ложь;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность", Модифицированность);
	// Конец Обсуждения

	Если Модифицированность Или ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда

		УдалитьДубли();
		УдалитьДублиХарактеристики();
		ПоместитьЦеныВТабличнуюЧасть(ТекущийОбъект);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	ОбновитьОтображениеКолонокВРазрезеЗапасов();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СобытияФормИСКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияИнформацияПоВидимостиПолейОбработкаНавигационнойСсылки(Элемент,
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьНастройкуФормы();

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗакрытьНажатие(Элемент)

	ДекорацияИнформацияЗакрытьНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура НомерПриИзменении(Элемент)

	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	ОбработатьИзменениеДатыНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьХарактеристикиПриИзменении(Элемент)

	Объект.УстанавливатьХарактеристикамБезЦен = Ложь;
	УстановитьВидимостьЭлементов();

КонецПроцедуры

&НаКлиенте
Процедура УстанавливатьХарактеристикамБезЦенПриИзменении(Элемент)

	Объект.ПоказыватьХарактеристики = Ложь;
	УстановитьВидимостьЭлементов();

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВернутьсяКНоменклатуреОбработкаНавигационнойСсылки(Элемент,
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ВернутьсяКТаблицеНоменклатуры();

КонецПроцедуры

&НаКлиенте
Процедура ЗаписыватьНовыеЦеныПоверхУстановленныхПриИзменении(Элемент)

	Если Не Объект.ПоказыватьХарактеристики Тогда

		Элементы.УстанавливатьХарактеристикамБезЦен.Заголовок = ?(Объект.ЗаписыватьНовыеЦеныПоверхУстановленных, НСтр(
			" ru='Устанавливать цены номенклатуры характеристикам'"), НСтр(
			" ru='Устанавливать цены номенклатуры характеристикам без цен'"));

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НоваяЦенаПриИзменении(Элемент)

	Если ТекущийЭлемент = Элементы.ТЧХарактеристики Тогда

		ДанныеТекущейСтроки = Элементы.ТЧХарактеристики.ТекущиеДанные;
		Если ДанныеТекущейСтроки <> Неопределено Тогда

			ИдентификаторВидаЦен = СтрЗаменить(СтрЗаменить(Элемент.Имя, "ТЧХарактеристики", ""), "_ЦенаНовая", "");
			Идентификатор = "ТЧХарактеристики" + ИдентификаторВидаЦен;
			ДанныеТекущейСтроки[Идентификатор + "_ЦенуИзменили"] = Истина;

			ОтразитьИзменениеНовойЦены(ДанныеТекущейСтроки, ИдентификаторВидаЦен, "ТЧХарактеристики");

			СтрокиНоменклатуры = ТЧНоменклатура.НайтиСтроки(Новый Структура("КлючСвязи", ДанныеТекущейСтроки.КлючСвязи));
			СтрокиНоменклатуры[0]["ТЧНоменклатура" + ИдентификаторВидаЦен + "_ЦенуИзменили"] = Истина;

		КонецЕсли;

	Иначе

		ДанныеТекущейСтроки = Элементы.ТЧНоменклатура.ТекущиеДанные;
		Если ДанныеТекущейСтроки <> Неопределено Тогда

			ИдентификаторВидаЦен = СтрЗаменить(СтрЗаменить(Элемент.Имя, "ТЧНоменклатура", ""), "_ЦенаНовая", "");
			Идентификатор = "ТЧНоменклатура" + ИдентификаторВидаЦен;
			ДанныеТекущейСтроки[Идентификатор + "_ЦенуИзменили"] = Истина;

			ОтразитьИзменениеНовойЦены(ДанныеТекущейСтроки, ИдентификаторВидаЦен, "ТЧНоменклатура");
			ОтразитьНовуюЦенуВХарактеристиках(ИдентификаторВидаЦен, ДанныеТекущейСтроки[Элемент.Имя],
				ДанныеТекущейСтроки.КлючСвязи, ЦенаДоИзменения);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВалютаНоваяПриИзменении(Элемент)

	Если ТекущийЭлемент = Элементы.ТЧХарактеристики Тогда
		ИмяТЧ = "ТЧХарактеристики";
	Иначе
		ИмяТЧ = "ТЧНоменклатура";
	КонецЕсли;
	ДанныеТекущейСтроки = Элементы[ИмяТЧ].ТекущиеДанные;

	Если ДанныеТекущейСтроки <> Неопределено Тогда

		ИдентификаторВидаЦен = СтрЗаменить(СтрЗаменить(Элемент.Имя, ИмяТЧ, ""), "_ВалютаНовая", "");
		Идентификатор = ИмяТЧ + ИдентификаторВидаЦен;

		ПолеЦенуИзменили = Идентификатор + "_ЦенуИзменили";
		ПолеВалютаДельта = Идентификатор + "_ВалютаДельта";
		ПолеВалютаНовая = Идентификатор + "_ВалютаНовая";

		ДанныеТекущейСтроки[ПолеЦенуИзменили] = Истина;
		ДанныеТекущейСтроки[ПолеВалютаДельта] = ДанныеТекущейСтроки[ПолеВалютаНовая];

		Если ИмяТЧ = "ТЧНоменклатура" Тогда
			ОтразитьНовуюВалютуВХарактеристиках(ИдентификаторВидаЦен, ДанныеТекущейСтроки[Элемент.Имя],
				ДанныеТекущейСтроки.КлючСвязи, ДанныеТекущейСтроки[ПолеВалютаНовая]);
		КонецЕсли;
		
		ОтразитьИзменениеНовойЦены(ДанныеТекущейСтроки, ИдентификаторВидаЦен, "ТЧНоменклатура");
		
		Если ЗначениеЗаполнено(ВалютаДоИзменения) Тогда
			ПересчитатьДельтуВПолеНаКлиенте(ДанныеТекущейСтроки, Идентификатор);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЕдиницаИзмеренияПриИзменении(Элемент)

	Если ТекущийЭлемент = Элементы.ТЧХарактеристики Тогда

		Возврат;

	КонецЕсли;

	ДанныеТекущейСтроки = Элементы.ТЧНоменклатура.ТекущиеДанные;
	Если ДанныеТекущейСтроки <> Неопределено Тогда

		ИдентификаторВидаЦен = СтрЗаменить(СтрЗаменить(Элемент.Имя, "ТЧНоменклатура", ""), "_ЕдИзм", "");

		ОтразитьЕдиницуИзмеренийВХарактеристиках(ИдентификаторВидаЦен, ДанныеТекущейСтроки[Элемент.Имя],
			ДанныеТекущейСтроки.КлючСвязи);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "удалить" Тогда

		Объект.ДокументОснование = Неопределено;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(
			Неопределено);
		Модифицированность = Истина;
		ИзменитьЭлементыФормыПоВыбраннымВидамЦен();
		УстановитьВидимостьИнформационногоПоля();

	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "выбрать" Тогда

		Если ВидыЦенВыбраны() Тогда

			ОписаниеОповещения = Новый ОписаниеОповещения("ВыборТипаОснованияЗавершение", ЭтотОбъект);
			ПоказатьВыборИзМеню(ОписаниеОповещения, СписокДокументОснование, Элементы.ДокументОснованиеНадпись);

		Иначе

			ВыбратьВидыЦенДляВводаНаОсновании();
			Если ВидыЦенВыбраны() Тогда

				ОписаниеОповещения = Новый ОписаниеОповещения("ВыборТипаОснованияЗавершение", ЭтотОбъект);
				ПоказатьВыборИзМеню(ОписаниеОповещения, СписокДокументОснование, Элементы.ДокументОснованиеНадпись);

			Иначе

				ТекстСообщения = НСтр(
					"ru = 'Необходимо указать виды цен, для которых планируется установка новых цен.'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ВидыЦен", , );
				УстановитьВидимостьИнформационногоПоля(Истина);

			КонецЕсли;

		КонецЕсли;

	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "заполнить" Тогда

		ЗаполнитьПоОснованиюНачало();

	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "открыть" Тогда

		РаботаСФормойДокументаКлиент.ОткрытьФормуДокументаПоСсылке(Объект.ДокументОснование);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)

	Если ТекущаяСтраница = Элементы.СтраницаВидыЦен Тогда

		УстановитьДоступностьЭлементовСтраницыВидыЦен();

	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаТовары Тогда

		Отказ = Ложь;

		ЗаполнитьКэшЗначенийВидамиЦен(КэшЗначений);

		Если ВидыЦенВыбраны() Тогда

			МассивИменТабличныхЧастей = ПолучитьМассивИменТЧДляИзменения();
			ИзменитьСоставРеквизитовИЭлементовТабличнойЧасти(МассивИменТабличныхЧастей); 
			
		Иначе

			ТекстСообщения = НСтр("ru = 'Необходимо указать виды цен, для которых планируется установка новых цен.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ВидыЦен", , Отказ);
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВидыЦен;
			Возврат;

		КонецЕсли;

		Отказ = Не ЦенообразованиеКлиент.ЗаполненыОбязательныеПараметрыСхемКомпоновкиДанных(ЭтотОбъект);

		Если Отказ Тогда

			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВидыЦен;

		Иначе
			
			ИзменитьВидимостьЭлементовТабличныхЧастей();
			
			Если ЗначениеЗаполнено(Объект.ДокументОснование) И ТЧНоменклатура.Количество() = 0 Тогда

				Если КэшЗначений.ПервоеПереключениеНаОсновании Тогда

					ЗаполнитьПоОснованиюЗавершение(КодВозвратаДиалога.Да, Неопределено);
					КэшЗначений.ПервоеПереключениеНаОсновании = Ложь;

				КонецЕсли;

			КонецЕсли;

			Если КэшЗначений.НовыеВидыЦен.Количество() <> 0 И ТЧНоменклатура.Количество() <> 0 Тогда

				ЗаполнитьНовыеВидыЦенВТабличныхЧастях();

			КонецЕсли;

		КонецЕсли;

		СортироватьКолонкиВидовЦенНаФорме();

		ИзменитьЭлементыФормыПоВыбраннымВидамЦен();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанель(Элемент)

	ПраваяПанельВидимость = Не ПраваяПанельВидимость;

	УстановитьВидимостьПравойПанели();

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПредупреждениеНажатие(Элемент)

	ТекстПредупреждения = НСтр(" ru='Изменение параметра невозможно из-за заполненной табличной части номенклатуры'");
	ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнформацияПоВидимостиПолейНажатие(Элемент)

	Элементы.ГруппаИнформацияПоНастройкеВидимостиПолей.Видимость = Ложь;
	СохранитьНастройкуПоказыватьИнформациюПоВидимостиПолей();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВидыЦен

&НаКлиенте
Процедура ВидыЦенИспользованиеПриИзменении(Элемент)
	
	ВидыЦенИспользованиеПриИзмененииПоДаннымТекущейСтроки(Элементы.ВидыЦен.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ВидыЦенВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// Обход ошибки платформы 30163126
#Если МобильныйКлиент Тогда
	СтандартнаяОбработка = Ложь;
#КонецЕсли

	ТекущиеДанные = Элемент.ТекущиеДанные;

	Если ТекущиеДанные <> Неопределено Тогда

		Если Поле = Элементы.ВидыЦенПараметры Тогда

			РедактироватьНастройки(Неопределено);

		ИначеЕсли Поле = Элементы.ВидыЦенПредставление Или Поле = Элементы.ВидыЦенПредставлениеРасчета Тогда

			ВыделитьЗаполнениеНаОсновании = Элементы.ГруппаПанельИнформации.Видимость;

			ПараметрыФормыВидаЦен = Новый Структура;
			Если ВыделитьЗаполнениеНаОсновании Тогда

				ПараметрыФормыВидаЦен.Вставить("ТекущийЭлемент", "ЗаполнятьИзОснования");

			КонецЕсли;

			ПараметрыФормыВидаЦен.Вставить("Ключ", ТекущиеДанные.ВидЦен);

			ОткрытьФорму("Справочник.ВидыЦен.Форма.ФормаЭлемента", ПараметрыФормыВидаЦен, ЭтотОбъект,
				УникальныйИдентификатор);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидыЦенПриАктивизацииСтроки(Элемент)

#Если Не МобильныйКлиент Тогда

	Возврат;

#КонецЕсли

	ДанныеТекущейСтроки = Элементы.ВидыЦен.ТекущиеДанные;
	Если ДанныеТекущейСтроки = Неопределено Тогда

		Возврат;

	КонецЕсли;

	ДанныеТекущейСтроки.Использование = Не ДанныеТекущейСтроки.Использование;
	
	ВидыЦенИспользованиеПриИзмененииПоДаннымТекущейСтроки(ДанныеТекущейСтроки);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТЧНоменклатура

&НаКлиенте
Процедура ТЧНоменклатураПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	ОткрытьФормуДобавленияПроизвольнойНоменклатуры("Элементы");
	Отказ = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ТЧНоменклатураПередУдалением(Элемент, Отказ)

	ТекущиеДанные = Элементы.ТЧНоменклатура.ТекущиеДанные; 
	
	Если ТекущиеДанные.ИспользоватьХарактеристики Тогда
		УдалитьСвязанныеСтрокиХарактеристик(); 
	КонецЕсли;

	ОбновитьКоличествоЗаписейПоДокументу();

КонецПроцедуры

&НаКлиенте
Процедура УдалитьСвязанныеСтрокиХарактеристик()  
	
	МассивСтроки = Элементы.ТЧНоменклатура.ВыделенныеСтроки;
	Если МассивСтроки.Количество() > 0 Тогда
		
		Для Каждого Строка Из МассивСтроки Цикл
			
			НайденнаяСтрокаНоменклатура = ТЧНоменклатура.НайтиПоИдентификатору(Строка);
			Если НайденнаяСтрокаНоменклатура <> Неопределено Тогда
				
				УдалитьСтрокиХарактеристикПоКлючуСвязи(НайденнаяСтрокаНоменклатура.КлючСвязи, ТЧХарактеристики);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТЧНоменклатураПередНачаломИзменения(Элемент, Отказ)

	ДанныеТекущейСтроки = Элементы.ТЧНоменклатура.ТекущиеДанные;

	ИмяЭлемента = Элемент.ТекущийЭлемент.Имя;

	Если СтрНайти(ИмяЭлемента, "_ВалютаНовая") > 0 Тогда
		ВалютаДоИзменения = ДанныеТекущейСтроки[ИмяЭлемента];
	КонецЕсли;

	Если Объект.ПоказыватьХарактеристики Тогда

		Если ДанныеТекущейСтроки <> Неопределено И Элемент.Имя = "ТЧНоменклатура" Тогда

			Если СтрНайти(ИмяЭлемента, "_ЕдИзм") > 0 Тогда
				ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "_ЕдИзм", "_ЦенаНовая");
			КонецЕсли;

			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеТекущейСтроки, ИмяЭлемента) Тогда
				ЦенаДоИзменения = ДанныеТекущейСтроки[ИмяЭлемента];
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если Объект.УстанавливатьХарактеристикамБезЦен Тогда
		Если ДанныеТекущейСтроки <> Неопределено И Элемент.Имя = "ТЧНоменклатура" Тогда

			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеТекущейСтроки, ИмяЭлемента) Тогда
				ЦенаДоИзменения = ДанныеТекущейСтроки[ИмяЭлемента];
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТЧНоменклатураПриИзменении(Элемент)

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ТЧНоменклатураПриАктивизацииСтроки(Элемент)

	Если ПраваяПанельВидимость Тогда

		ТекущиеДанные = Элементы.ТЧНоменклатура.ТекущиеДанные;
		РеквизитыНоменклатуры.Очистить();
		Если ТекущиеДанные <> Неопределено Тогда

			ОбновитьРеквизитыНоменклатуры(ТекущиеДанные);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТЧНоменклатураПослеУдаления(Элемент)

	ОбновитьКоличествоЗаписейПоДокументу();

КонецПроцедуры

&НаКлиенте
Процедура ТЧНоменклатураВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Объект.ПоказыватьХарактеристики Тогда

		Если Поле.Имя = "ТЧНоменклатураНоменклатура" Или Поле.Имя = "ТЧНоменклатураЛупа" Тогда

			СтандартнаяОбработка = Ложь;

			ДанныеСтрокиФормы = ТЧНоменклатура.НайтиПоИдентификатору(ВыбраннаяСтрока);
			Если ДанныеСтрокиФормы.ИспользоватьХарактеристики Тогда

				Отбор = Новый Структура("КлючСвязи", ДанныеСтрокиФормы.КлючСвязи);
				ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
				Элементы.ТЧХарактеристики.ОтборСтрок = ОтборСтрок;

				Элементы.СтраницыПредварительныйРезультат.ТекущаяСтраница = Элементы.СтраницаПР_Характеристики;

				Элементы.СтраницаТовары.Заголовок = НСтр("ru='Характеристики'");
				ТоварыКоличествоСтрок = ТЧХарактеристики.НайтиСтроки(Отбор).Количество();

				УстановитьВидимостьПравойПанели();
				
				Если РежимОстаткиИРезервы Тогда   
					ВыбранныйТовар = ДанныеСтрокиФормы.Номенклатура;
					Если ЗначениеЗаполнено(ВыбранныйТовар) Тогда
						Если ТЧХарактеристики.Количество() < 50 Тогда 
							ЗаполнитьЗначенияОстатковХарактеристикВТабличнойЧастиНаСервере(ВыбранныйТовар); 
						Иначе
							ЗаполнитьЗначенияОстатковХарактеристикВТабличнойЧастиНаСервере_ДлительнаяОперация(ВыбранныйТовар); 
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;   
				
			КонецЕсли;

		КонецЕсли;

	КонецЕсли; 
	
	Если Поле.Имя = "ТЧНоменклатураОстатокОбщий" Тогда
		ОбработкаВыборПоляОстатокОбщийТЧНоменклатура(Элемент);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТЧХарактеристики

&НаКлиенте
Процедура ТЧХарактеристикиПриАктивизацииСтроки(Элемент)

	Если ПраваяПанельВидимость Тогда

		ТекущиеДанные = Элементы.ТЧХарактеристики.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Или Элементы.СтраницыПредварительныйРезультат.ТекущаяСтраница
			<> Элементы.СтраницаПР_Характеристики Тогда

			Возврат;

		КонецЕсли;

		ОбновитьРеквизитыХарактеристики(ТекущиеДанные);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТЧХарактеристикиПриИзменении(Элемент)

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ТЧХарактеристикиПередНачаломИзменения(Элемент, Отказ)

	ДанныеТекущейСтроки = Элементы.ТЧХарактеристики.ТекущиеДанные;

	ИмяЭлемента = Элемент.ТекущийЭлемент.Имя;

	Если СтрНайти(ИмяЭлемента, "_ВалютаНовая") > 0 Тогда
		ВалютаДоИзменения = ДанныеТекущейСтроки[ИмяЭлемента];
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СортироватьПоВозрастанию(Команда)
	
	Если Элементы.СтраницыПредварительныйРезультат.ТекущаяСтраница = Элементы.СтраницаПР_Номенклатура Тогда
		ТЧНоменклатура.Сортировать("Номенклатура Возр");
	ИначеЕсли Элементы.СтраницыПредварительныйРезультат.ТекущаяСтраница = Элементы.СтраницаПР_Характеристики Тогда
		ТЧХарактеристики.Сортировать("Характеристика Возр");
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоУбыванию(Команда)
	
	Если Элементы.СтраницыПредварительныйРезультат.ТекущаяСтраница = Элементы.СтраницаПР_Номенклатура Тогда
		ТЧНоменклатура.Сортировать("Номенклатура Убыв");
	ИначеЕсли Элементы.СтраницыПредварительныйРезультат.ТекущаяСтраница = Элементы.СтраницаПР_Характеристики Тогда
		ТЧХарактеристики.Сортировать("Характеристика Убыв");
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	Если Элементы.СтраницыПредварительныйРезультат.ТекущаяСтраница = Элементы.СтраницаПР_Номенклатура 
		И Элементы.ТЧНоменклатура.ТекущаяСтрока <> Неопределено Тогда
		
		Индекс = ТЧНоменклатура.Индекс(ТЧНоменклатура.НайтиПоИдентификатору(Элементы.ТЧНоменклатура.ТекущаяСтрока));
		Если Индекс > 0 Тогда
			ТЧНоменклатура.Сдвинуть(Индекс, -1);
		КонецЕсли;
	
	ИначеЕсли Элементы.СтраницыПредварительныйРезультат.ТекущаяСтраница = Элементы.СтраницаПР_Характеристики
		И Элементы.ТЧХарактеристики.ТекущаяСтрока <> Неопределено Тогда 
			
		Индекс = ТЧХарактеристики.Индекс(ТЧХарактеристики.НайтиПоИдентификатору(Элементы.ТЧХарактеристики.ТекущаяСтрока));
		Если Индекс > 0 Тогда
			ТЧХарактеристики.Сдвинуть(Индекс, -1);
		КонецЕсли;
				
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	Если Элементы.СтраницыПредварительныйРезультат.ТекущаяСтраница = Элементы.СтраницаПР_Номенклатура 
		И Элементы.ТЧНоменклатура.ТекущаяСтрока <> Неопределено Тогда
		
		Индекс = ТЧНоменклатура.Индекс(ТЧНоменклатура.НайтиПоИдентификатору(Элементы.ТЧНоменклатура.ТекущаяСтрока));
		Если Индекс < ТЧНоменклатура.Количество() - 1 Тогда
			ТЧНоменклатура.Сдвинуть(Индекс, 1);
		КонецЕсли;
	
	ИначеЕсли Элементы.СтраницыПредварительныйРезультат.ТекущаяСтраница = Элементы.СтраницаПР_Характеристики
		И Элементы.ТЧХарактеристики.ТекущаяСтрока <> Неопределено Тогда
			
		Индекс = ТЧХарактеристики.Индекс(ТЧХарактеристики.НайтиПоИдентификатору(Элементы.ТЧХарактеристики.ТекущаяСтрока));
		Если Индекс < ТЧХарактеристики.Количество() - 1 Тогда
			ТЧХарактеристики.Сдвинуть(Индекс, 1);
		КонецЕсли;

	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНастройкиСКД(Команда)

	ТекущиеДанные = Элементы.ВидыЦен.ТекущиеДанные;

	Если ТекущиеДанные <> Неопределено Тогда

		РедактироватьНастройки(Неопределено);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсейНоменклатурой(Команда)

	МассивНоменклатуры = ПолучитьМассивВсейНоменклатуры();
	ВыбратьМассивНоменклатуры(МассивНоменклатуры);

КонецПроцедуры

&НаКлиенте
Процедура ПорядокСортировки(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыСортировкиКолонок", ЭтотОбъект);

	ПараметрыОткрытия = Новый Структура;

	ОткрытьФорму("Справочник.ВидыЦен.Форма.ФормаСортировкиКолонок", ПараметрыОткрытия, ЭтотОбъект, , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура СвернутьДеревоВидовЦенКоманда(Команда)

	СвернутьДеревоВидовЦен();

КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоВидовЦенКоманда(Команда)

	РазвернутьДеревоВидовЦен();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВидЦены(Команда)

	ДанныеТекущейСтроки = Элементы.ВидыЦен.ТекущиеДанные;
	Если ДанныеТекущейСтроки <> Неопределено Тогда

		ОткрытьФорму("Справочник.ВидыЦен.ФормаОбъекта", Новый Структура("Ключ", ДанныеТекущейСтроки.ВидЦен), ЭтотОбъект);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличнуюЧасть(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВопросОчисткиЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Очистить табличную часть?'"), РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНоменклатуру(Команда)

	ВернутьсяКТаблицеНоменклатуры();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНоменклатуру(Команда)

	ИмяТабличнойЧасти = ?(ТекущийЭлемент = Элементы.ТЧХарактеристики, "ТЧХарактеристики", "ТЧНоменклатура");

	ДанныеТекущейСтроки = Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
	Если ДанныеТекущейСтроки <> Неопределено Тогда

		ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", Новый Структура("Ключ", ДанныеТекущейСтроки.Номенклатура),
			ЭтотОбъект);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьХарактеристику(Команда)

	ДанныеТекущейСтроки = Элементы.ТЧХарактеристики.ТекущиеДанные;
	Если ДанныеТекущейСтроки <> Неопределено Тогда

		ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаОбъекта", Новый Структура("Ключ",
			ДанныеТекущейСтроки.Характеристика), ЭтотОбъект);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)

	Если КэшЗначений.ФОИспользоватьХарактеристики И Элементы.ПоказыватьХарактеристики.Доступность Тогда

		Объект.ПоказыватьХарактеристики = Истина;

	КонецЕсли;

	Объект.ПоказыватьДействующуюЦену = Истина;
	Объект.ПоказыватьОтклонениеЦен = Истина;

	Если КэшЗначений.ФОИспользоватьЕдиницыИзмерения Тогда

		Объект.ПоказыватьЕдиницыИзмерения = Истина;

	КонецЕсли;

	Объект.ПоказыватьЗависимыеЦены = Истина;

КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)

	Если КэшЗначений.ФОИспользоватьХарактеристики И Элементы.ПоказыватьХарактеристики.Доступность Тогда

		Объект.ПоказыватьХарактеристики = Ложь;

	КонецЕсли;

	Объект.ПоказыватьДействующуюЦену = Ложь;
	Объект.ПоказыватьОтклонениеЦен = Ложь;

	Если КэшЗначений.ФОИспользоватьЕдиницыИзмерения Тогда

		Объект.ПоказыватьЕдиницыИзмерения = Ложь;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзФайла(Команда)

	НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.УстановкаЦенНоменклатуры.ТабличнаяЧасть.Запасы";

	НастройкиЗагрузкиДанных.Вставить("ПолноеИмяТабличнойЧасти", "УстановкаЦенНоменклатуры.Запасы");
	НастройкиЗагрузкиДанных.Вставить("ИмяМакетаСШаблоном", "ЗагрузкаИзФайлаЗапасы");
	НастройкиЗагрузкиДанных.Вставить("Заголовок", НСтр("ru = 'Загрузка запасов из файла'"));
	НастройкиЗагрузкиДанных.Вставить("СодержаниеВидимо", Истина);
	НастройкиЗагрузкиДанных.Вставить("ЗагрузкаТабличнойЧастиУслуги", Ложь);
	Если КэшЗначений.ВыбранныеВидыЦен.Количество() > 1 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Выбрано больше 1 вида цен.'"));
		Возврат;
	КонецЕсли;

	Для Каждого ВыбранныйВидЦен Из КэшЗначений.ВыбранныеВидыЦен Цикл
		НастройкиЗагрузкиДанных.Вставить("ВидЦен", ВыбранныйВидЦен.Ключ);
		Прервать;
	КонецЦикла;

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект,
		НастройкиЗагрузкиДанных);

	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных,
		ОписаниеОповещения, ЭтотОбъект);

	ОбновитьКоличествоЗаписейПоДокументу();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоДаннымиИБ(Команда)
	
	НачатьЗаполнениеЦенПоДаннымИБНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)

	Штрихкод = "";

	ДополнительныеПараметры = Новый Структура("Штрихкод", Штрихкод);
	ОбработкаЗавершения = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, ДополнительныеПараметры);

#Если МобильныйКлиент Тогда
	ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду", , , , , , ОбработкаЗавершения);
#Иначе
		ПоказатьВводЗначения(ОбработкаЗавершения, Штрихкод, НСтр("ru = 'Введите штрихкод'"));
#КонецЕсли

КонецПроцедуры

#Область ПодборНоменклатуры

&НаКлиенте
Процедура ЗаполнитьПоВидуЦен(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КэшЗначений", КэшЗначений);
	ПараметрыОткрытия.Вставить("ХарактеристикиВидны", Объект.ПоказыватьХарактеристики);
	ПараметрыОткрытия.Вставить("ПоказыватьНедействительныеХарактеристики",
		Объект.ПоказыватьНедействительныеХарактеристики);

	ОбработкаОписание = Новый ОписаниеОповещения("ПослеДобавленияНоменклатуры", ЭтотОбъект);
	ОткрытьФорму("Документ.УстановкаЦенНоменклатуры.Форма.ФормаЗаполненияПоВидамЦен", ПараметрыОткрытия, ЭтотОбъект, ,
		, , ОбработкаОписание);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПриходнымНакладным(Команда)
	
	МассивВидовЦен = Новый Массив;
	ЗаполнитьМассивВыбранныхВидовЦен(МассивВидовЦен, КэшЗначений.ВыбранныеВидыЦен);

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ХарактеристикиВидны", Объект.ПоказыватьХарактеристики);
	ПараметрыОткрытия.Вставить("ПоказыватьНедействительныеХарактеристики",
		Объект.ПоказыватьНедействительныеХарактеристики);
	ПараметрыОткрытия.Вставить("МассивВидовЦен", МассивВидовЦен);

	ОбработкаОписание = Новый ОписаниеОповещения("ПослеДобавленияНоменклатуры", ЭтотОбъект);
	ОткрытьФорму("Документ.УстановкаЦенНоменклатуры.Форма.ФормаЗаполненияПоПриходнымНакладным", ПараметрыОткрытия,
		ЭтотОбъект, , , , ОбработкаОписание);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКатегорииНоменклатуры(Команда)

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ХарактеристикиВидны", Объект.ПоказыватьХарактеристики);
	ПараметрыОткрытия.Вставить("ПоказыватьНедействительныеХарактеристики",
		Объект.ПоказыватьНедействительныеХарактеристики);

	ОбработкаОписание = Новый ОписаниеОповещения("ПослеДобавленияНоменклатуры", ЭтотОбъект);
	ОткрытьФорму("Документ.УстановкаЦенНоменклатуры.Форма.ФормаЗаполненияПоКатегорииНоменклатуры", ПараметрыОткрытия,
		ЭтотОбъект, , , , ОбработкаОписание);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЦеновойГруппе(Команда)

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ХарактеристикиВидны", Объект.ПоказыватьХарактеристики);
	ПараметрыОткрытия.Вставить("ПоказыватьНедействительныеХарактеристики",
		Объект.ПоказыватьНедействительныеХарактеристики);

	ОбработкаОписание = Новый ОписаниеОповещения("ПослеДобавленияНоменклатуры", ЭтотОбъект);
	ОткрытьФорму("Документ.УстановкаЦенНоменклатуры.Форма.ФормаЗаполненияПоЦеновымГруппам", ПараметрыОткрытия,
		ЭтотОбъект, , , , ОбработкаОписание);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЭлементамНоменклатуры(Команда)

	ОткрытьФормуДобавленияПроизвольнойНоменклатуры("Элементы");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоГруппамНоменклатуры(Команда)

	ОткрытьФормуДобавленияПроизвольнойНоменклатуры("Группы");

КонецПроцедуры

&НаКлиенте
Процедура ПодобратьПоОтбору(Команда)

	ПараметрыОткрытия = Новый Структура("ПоказыватьНедействительныеХарактеристики",
		Объект.ПоказыватьНедействительныеХарактеристики);
	ОбработкаОписание = Новый ОписаниеОповещения("ПослеДобавленияНоменклатуры", ЭтотОбъект);
	ОткрытьФорму("Документ.УстановкаЦенНоменклатуры.Форма.ФормаПроизвольногоПодбора", ПараметрыОткрытия, ЭтотОбъект, ,
		, , ОбработкаОписание, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры
#КонецОбласти

#Область ИзменениеЦен

&НаКлиенте
Процедура ИзменитьНаСумму(Команда)

	ВидРасчета = "Сумма";
	ИзменитьКолонку(ВидРасчета);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНаПроцент(Команда)

	ВидРасчета = "Процент";
	ИзменитьКолонку(ВидРасчета);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОкругление(Команда)

	ВидРасчета = "Округление";
	ИзменитьКолонку(ВидРасчета);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОчистить(Команда)

	ВидРасчета = "Очистить";
	ИзменитьКолонку(ВидРасчета);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФормула(Команда)

	ВидРасчета = "Формула";
	ИзменитьКолонку(ВидРасчета);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВалюту(Команда)
	
	ВидРасчета = "Валюта";
	ИзменитьКолонку(ВидРасчета)
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИзменение(Команда)

	ВосстановитьТабличныеЧастиИзКопий();

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", КэшЗначений.НаборСвойств_Документ_УстановкаЦенНоменклатуры);
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);

	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы, , , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура НастройкаФормы(Команда)
	
	ОткрытьНастройкуФормы();
	
КонецПроцедуры


#Область РежимОстаткиИРезервы

&НаСервере
Функция НачатьЗаполнениеКолонкиОстатокТЧНоменклатураНаСервере()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Установка цен (ТЧНоменклатура): Заполнение колонки ОстатокОбщий'");
	ПараметрыВыполнения.ЗапуститьНеВФоне    		= Ложь;
	ПараметрыВыполнения.ЗапуститьВФоне      		= Истина;
	
	ИмяМетода = "НоменклатураВДокументахСервер.ЗаполнитьЗначенияОстатковТЧНоменклатураУстановкаЦен_ВФоне";

	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода, ТЧНоменклатура.Выгрузить(), Неопределено); 
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧасти_ДлительнаяОперация() 
		
	ДлительнаяОперация = НачатьЗаполнениеКолонкиОстатокТЧНоменклатураНаСервере();  
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПриЗавершенииЗаполненияКолонкиОстатокОбщий", ЭтотОбъект, 
		Новый Структура("ТЧНоменклатура, ТЧХарактеристики", Истина, Ложь)); 
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Заполнение остатка ...'");
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииЗаполненияКолонкиОстатокОбщий(Результат, ДополнительныеПараметры) Экспорт
	
	// Пользователь отменил задание.
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	Если Результат <> Неопределено И ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
		ОбработатьРезультатЗаполненияКолонкиОстатокОбщийНаСервере(Результат.АдресРезультата, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ОбработатьРезультатЗаполненияКолонкиОстатокОбщийНаСервере(АдресРезультата, ДополнительныеПараметры) 
	
	ТаблицаРезультатОстатки = ПолучитьИзВременногоХранилища(АдресРезультата); 
	
	Если ТипЗнч(ТаблицаРезультатОстатки) = Тип("ТаблицаЗначений") Тогда 		
		
		Заполнить_ТЧНоменклатура 	= Ложь; 
		Заполнить_ТЧХарактеристики 	= Ложь;
		
		ДополнительныеПараметры.Свойство("ТЧНоменклатура"	, Заполнить_ТЧНоменклатура);
		ДополнительныеПараметры.Свойство("ТЧХарактеристики"	, Заполнить_ТЧХарактеристики); 
		
		Если Заполнить_ТЧНоменклатура Тогда
			
			ТаблицаФормыНоменклатуры = РеквизитФормыВЗначение("ТЧНоменклатура");   
			СоздатьКопиюТекущихДанных(ТаблицаФормыНоменклатуры.Скопировать(), КэшЗначений.ДоИзмененияНоменклатура);	
			ЗначениеВРеквизитФормы(ТаблицаРезультатОстатки, "ТЧНоменклатура"); 
			
		КонецЕсли;
		
		Если Заполнить_ТЧХарактеристики Тогда
				
			ТаблицаФормыХарактеристик = РеквизитФормыВЗначение("ТЧХарактеристики");  	
			СоздатьКопиюТекущихДанных(ТаблицаФормыХарактеристик.Скопировать(), КэшЗначений.ДоИзмененияХарактеристики);	
			ЗначениеВРеквизитФормы(ТаблицаРезультатОстатки, "ТЧХарактеристики");

		КонецЕсли;
		
	КонецЕсли;   
	
	УдалитьИзВременногоХранилища(АдресРезультата);

КонецПроцедуры

&НаСервере
Функция НачатьЗаполнениеКолонкиОстатокТЧХарактеристикиНаСервере(НоменклатураОтбора)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Установка цен (ТЧХарактеристики): Заполнение колонки ОстатокОбщий'");
	ПараметрыВыполнения.ЗапуститьНеВФоне    		= Ложь;
	ПараметрыВыполнения.ЗапуститьВФоне      		= Истина;
	
	ИмяМетода = "НоменклатураВДокументахСервер.ЗаполнитьЗначенияОстатковНоменклатурыТЧХарактеристикиУстановкаЦен_ВФоне";

	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода, ТЧХарактеристики.Выгрузить(), НоменклатураОтбора); 
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьЗначенияОстатковХарактеристикВТабличнойЧастиНаСервере_ДлительнаяОперация(НоменклатураОтбора)  
	
	ДлительнаяОперация = НачатьЗаполнениеКолонкиОстатокТЧХарактеристикиНаСервере(НоменклатураОтбора);  
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПриЗавершенииЗаполненияКолонкиОстатокОбщий", ЭтотОбъект, 
		Новый Структура("ТЧНоменклатура, ТЧХарактеристики", Ложь, Истина)); 
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Заполнение колонки остаток ...'");
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьСценарийЗаполненияЗначенияОстатковТЧНоменклатура() 
	
	Если ТЧНоменклатура.Количество() < 50 Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере(); 
	Иначе
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧасти_ДлительнаяОперация();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОстаткиИРезервы(Команда) 
	
	РежимОстаткиИРезервы = Не РежимОстаткиИРезервы;
	Элементы.ОстаткиИРезервы.Пометка = Не Элементы.ОстаткиИРезервы.Пометка;
		
	ОбновитьОтображениеКолонокВРазрезеЗапасов();
		
	Если РежимОстаткиИРезервы Тогда			
		ВыполнитьСценарийЗаполненияЗначенияОстатковТЧНоменклатура();		
	КонецЕсли;   
	
КонецПроцедуры  

&НаКлиенте
Процедура ОбновитьОтображениеКолонокВРазрезеЗапасов()
		
	Если РежимОстаткиИРезервы Тогда
		Элементы.ЗапасыОстатки.Видимость = Истина;
		Элементы.ХарактеристикиОстатки.Видимость = Истина;
	Иначе
		
		Элементы.ЗапасыОстатки.Видимость = Ложь;
		Элементы.ХарактеристикиОстатки.Видимость = Ложь;
	КонецЕсли;
		
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере(НоменклатураОтбора = Неопределено)
	
	НоменклатураВДокументахСервер.ЗаполнитьЗначенияОстатковТЧНоменклатураУстановкаЦен(
		ТЧНоменклатура, НоменклатураОтбора);  
		
КонецПроцедуры 
	
&НаСервере
Процедура ЗаполнитьЗначенияОстатковХарактеристикВТабличнойЧастиНаСервере(НоменклатураОтбора)
	
	НоменклатураВДокументахСервер.ЗаполнитьЗначенияОстатковНоменклатурыТЧХарактеристикиУстановкаЦен( 
		ТЧХарактеристики, НоменклатураОтбора);
			
КонецПроцедуры

&НаСервере
Функция СформироватьСписокСкладовОстатки(ИмяТаблицыДанныхФормы, СтруктураПараметров)  
	
	Возврат НоменклатураВДокументахСервер.СформироватьСписокСкладовОстаткиУстановкаЦен(ИмяТаблицыДанныхФормы, СтруктураПараметров);
	
КонецФункции

&НаКлиенте
Процедура ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		Возврат 
	КонецЕсли;
	
	Если Параметры.ВыбранноеПоле = "ТЧНоменклатураОстатокОбщий" Тогда
		
		ТекущиеДанные = Элементы.ТЧНоменклатура.ТекущиеДанные;	
		Если ТекущиеДанные = Неопределено ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда 
			Возврат 
		КонецЕсли;
			
		Если Результат.Значение = "ОтчетОстаткиНаСкладах" Тогда
									
			ОтборРасшифровки = Новый Структура;
			ОтборРасшифровки.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
			
			ОткрытьФормуВариантаОтчетаСОтбором(ОтборРасшифровки);

		КонецЕсли;
		
	ИначеЕсли Параметры.ВыбранноеПоле = "ТЧХарактеристикиОстатокОбщий" Тогда   
		
		ТекущиеДанные = Элементы.ТЧХарактеристики.ТекущиеДанные;	
		Если ТекущиеДанные = Неопределено ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.Характеристика) Тогда 
			Возврат; 
		КонецЕсли;
	
		Если Результат.Значение = "ОтчетОстаткиНаСкладах" Тогда
											
			ОтборРасшифровки = Новый Структура;
			ОтборРасшифровки.Вставить("Номенклатура"	, ТекущиеДанные.Номенклатура);
			ОтборРасшифровки.Вставить("Характеристика"	, ТекущиеДанные.Характеристика);
			
			ОткрытьФормуВариантаОтчетаСОтбором(ОтборРасшифровки);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры  

&НаКлиенте
Процедура ОткрытьФормуВариантаОтчетаСОтбором(ОтборРасшифровки) 
	
	Вариант = РаботаСФормойДокументаКлиентСервер.ВариантОтчета("ОстаткиТоваров", "ПоМестамХранения");
		
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыОткрытия.Вставить("Отбор"					, ОтборРасшифровки);
	
	ВариантыОтчетовКлиент.ОткрытьФормуОтчета(, Вариант, ПараметрыОткрытия); 

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыборПоляОстатокОбщийТЧНоменклатура(Элемент)
	
	ТекущиеДанные = Элементы.ТЧНоменклатура.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;	
	ПараметрыОтбора.Вставить("Номенклатура"		, ТекущиеДанные.Номенклатура);
	ПараметрыОтбора.Вставить("ЕдиницаИзмерения"	, ТекущиеДанные.ЕдиницаИзмеренияШаблон);
	
	Если Элемент.ТекущийЭлемент = Элементы.ТЧНоменклатураОстатокОбщий Тогда
		
		ЗначениеПоля = ТекущиеДанные.ОстатокОбщий;
		
		Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
			
			ПараметрыОповещения = Новый Структура("ВыбранноеПоле", "ТЧНоменклатураОстатокОбщий");
			Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти", ЭтотОбъект, 
				ПараметрыОповещения);
				
			СписокСкладовКонтекст 	= Новый СписокЗначений;
			СписокСкладовОстатки 	= СформироватьСписокСкладовОстатки("ТЧНоменклатура", ПараметрыОтбора);
			
			Для Каждого ЭлементСписка Из СписокСкладовОстатки Цикл
				СписокСкладовКонтекст.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление, ,
					ЭлементСписка.Картинка);
			КонецЦикла; 
			
			СписокСкладовКонтекст.Добавить("ОтчетОстаткиНаСкладах", НСтр("ru = 'Остатки на складах (отчет)'"), ,
				БиблиотекаКартинок.Отчет);
			
			Если Элемент.ТекущийЭлемент = Элементы.ТЧНоменклатураОстатокОбщий Тогда
				ПоказатьВыборИзМеню(Оповещение, СписокСкладовКонтекст, Элемент.ТекущийЭлемент);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаВыборПоляОстатокОбщийТЧХарактеристики(Элемент)
	
	ТекущиеДанные = Элементы.ТЧХарактеристики.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.Характеристика) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;	
	ПараметрыОтбора.Вставить("Номенклатура"		, ТекущиеДанные.Номенклатура);
	ПараметрыОтбора.Вставить("Характеристика"	, ТекущиеДанные.Характеристика);
	ПараметрыОтбора.Вставить("ЕдиницаИзмерения"	, ТекущиеДанные.ЕдиницаИзмеренияШаблон);
	
	Если Элемент.ТекущийЭлемент = Элементы.ТЧХарактеристикиОстатокОбщий Тогда
		
		ЗначениеПоля = ТекущиеДанные.ОстатокОбщий;
		
		Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
			
			ПараметрыОповещения = Новый Структура("ВыбранноеПоле", "ТЧХарактеристикиОстатокОбщий");
			Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти", ЭтотОбъект, 
				ПараметрыОповещения);
				
			СписокСкладовКонтекст 	= Новый СписокЗначений;
			СписокСкладовОстатки 	= СформироватьСписокСкладовОстатки("ТЧХарактеристики", ПараметрыОтбора);
			
			Для Каждого ЭлементСписка Из СписокСкладовОстатки Цикл
				СписокСкладовКонтекст.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление, ,
					ЭлементСписка.Картинка);
			КонецЦикла; 
			
			СписокСкладовКонтекст.Добавить("ОтчетОстаткиНаСкладах", НСтр("ru = 'Остатки на складах (отчет)'"), ,
				БиблиотекаКартинок.Отчет);
			
			Если Элемент.ТекущийЭлемент = Элементы.ТЧХарактеристикиОстатокОбщий Тогда
				ПоказатьВыборИзМеню(Оповещение, СписокСкладовКонтекст, Элемент.ТекущийЭлемент);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТЧХарактеристикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) 
	
	Если Поле.Имя = "ТЧХарактеристикиОстатокОбщий" Тогда
		ОбработкаВыборПоляОстатокОбщийТЧХарактеристики(Элемент);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти  

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СортировкаКолонок

&НаСервере
Процедура СортироватьКолонкиВидовЦенНаФорме()

	МассивСортировки = ПолучитьМассивСортировкиКолонок(КэшЗначений.ВыбранныеВидыЦен);

	Для Каждого ТекущаяКолонка Из МассивСортировки Цикл

		Если Элементы.Найти("ТЧНоменклатура" + ТекущаяКолонка) = Неопределено Тогда

			Продолжить;

		КонецЕсли;

		Элементы.Переместить(Элементы["ТЧНоменклатура" + ТекущаяКолонка], Элементы.ТЧНоменклатура);
		Элементы.Переместить(Элементы["ТЧХарактеристики" + ТекущаяКолонка], Элементы.ТЧХарактеристики);

	КонецЦикла;

	Элементы.Переместить(Элементы.ТЧНоменклатураПустаяКолонка, Элементы.ТЧНоменклатура);
	Элементы.Переместить(Элементы.ТЧХарактеристикиПустаяКолонка, Элементы.ТЧХарактеристики);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыСортировкиКолонок(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда

		СортироватьКолонкиВидовЦенНаФорме();

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивСортировкиКолонок(ВыбранныеВидыЦен)

	МаксимальныйПорядок = Справочники.ВидыЦен.ПолучитьМаксимальныйПорядокКолонок();

	Если МаксимальныйПорядок = 0 Тогда

		Возврат ПолучитьСортированныйМассивКолонокВидовЦенПоУмолчанию(ВыбранныеВидыЦен);

	Иначе

		Таблица = Справочники.ВидыЦен.ПолучитьСортированнуюТаблицуВидовЦен();
		Возврат Таблица.ВыгрузитьКолонку("ИдентификаторФормул");

	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСортированныйМассивКолонокВидовЦенПоУмолчанию(ВыбранныеВидыЦен)

	РезультатСсылки = Новый Массив;
	СортироватьВыбранныеВидыЦенПоУмолчанию(ВыбранныеВидыЦен, РезультатСсылки);
	Результат = Новый Массив;
	Для Каждого ВидЦеныСсылка Из РезультатСсылки Цикл

		Результат.Добавить(ВидЦеныСсылка.ИдентификаторФормул);

	КонецЦикла;

	Возврат Результат;

КонецФункции

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивИменТЧДляИзменения()
	
	МассивИменТабличныхЧастей = Новый Массив;
	МассивИменТабличныхЧастей.Добавить("ТЧНоменклатура");
	МассивИменТабличныхЧастей.Добавить("ТЧХарактеристики"); 
	
	Возврат Новый ФиксированныйМассив(МассивИменТабличныхЧастей);
КонецФункции

&НаКлиенте
Процедура ОткрытьНастройкуФормы()
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ЗаголовокДекорацияВидимостьКолонок", НСтр("ru = 'Показывать колонки:'"));
		
	СтруктураПараметров.Вставить("ВидДокумента", НСтр("ru = 'установка цен'"));		 
	СтруктураПараметров.Вставить("ПоказыватьКолонкуАртикулВНоменклатуреУстановкиЦен", 
		Элементы.ТЧНоменклатураНоменклатураАртикул.Видимость);		
	СтруктураПараметров.Вставить("ПоказыватьКолонкуШтрихкодВНоменклатуреУстановкиЦен", 
		Элементы.ТЧНоменклатураНоменклатураШтрихкод.Видимость);
	СтруктураПараметров.Вставить("ПоказыватьКолонкуКодВНоменклатуреУстановкиЦен", 
		Элементы.ТЧНоменклатураНоменклатураКод.Видимость);
		 
	СтруктураПараметров.Вставить("ПоказыватьКолонкуАртикулВХарактеристикахУстановкиЦен", 
		Элементы.ТЧХарактеристикиХарактеристикаАртикул.Видимость);
	СтруктураПараметров.Вставить("ПоказыватьКолонкуШтрихкодВХарактеристикахУстановкиЦен", 
		Элементы.ТЧХарактеристикиХарактеристикаШтрихкод.Видимость);
	СтруктураПараметров.Вставить("ПоказыватьКолонкуКодВХарактеристикахУстановкиЦен", 
		Элементы.ТЧХарактеристикиХарактеристикаКод.Видимость);

	ОткрытьФорму("ОбщаяФорма.ШапкаТабличнаяЧасть", СтруктураПараметров, , , , , 
		Новый ОписаниеОповещения("НастройкаФормыЗавершение", ЭтотОбъект));
		
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкуПоказыватьИнформациюПоВидимостиПолей()

	РаботаСФормойДокумента.СохранитьВидимостьГруппыИнформации(ИмяФормы,
		"ПоказыватьИнформациюНовоеПоВидимостиПолей", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.БылиВнесеныИзменения Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТЧНоменклатураНоменклатураАртикул", 
			"Видимость", Результат.ПоказыватьКолонкуАртикулВНоменклатуреУстановкиЦен);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТЧХарактеристикиХарактеристикаАртикул", 
			"Видимость", Результат.ПоказыватьКолонкуАртикулВХарактеристикахУстановкиЦен);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТЧНоменклатураНоменклатураШтрихкод", 
			"Видимость", Результат.ПоказыватьКолонкуШтрихкодВНоменклатуреУстановкиЦен);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТЧХарактеристикиХарактеристикаШтрихкод", 
			"Видимость", Результат.ПоказыватьКолонкуШтрихкодВХарактеристикахУстановкиЦен);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТЧНоменклатураНоменклатураКод", 
			"Видимость", Результат.ПоказыватьКолонкуКодВНоменклатуреУстановкиЦен);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТЧХарактеристикиХарактеристикаКод", 
			"Видимость", Результат.ПоказыватьКолонкуКодВХарактеристикахУстановкиЦен);
						
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыОкругленияВКэше(ВидЦен)
	
	Перем ПараметрыОкругленияДокумента;
	
	КэшЗначений.Свойство("ПараметрыОкругленияДокумента", ПараметрыОкругленияДокумента);
	
	Если ПараметрыОкругленияДокумента = Неопределено Тогда
		ПараметрыОкругленияДокумента = Новый Соответствие;
	КонецЕсли;
	
	СтруктураОкругления = Новый Структура;
	СтруктураОкругления.Вставить("ПорядокОкругления", ВидЦен.ПорядокОкругления);
	СтруктураОкругления.Вставить("ОкруглятьВБольшуюСторону", ВидЦен.ОкруглятьВБольшуюСторону);
	СтруктураОкругления.Вставить("ПсихологическоеОкругление", ВидЦен.ПсихологическоеОкругление);
	
	ПравилаОкругленияЦены = Новый Соответствие;
	Для Каждого Правило Из ВидЦен.ПравилаОкругленияЦены Цикл
		ЗначениеПравила = Новый Массив;
		ЗначениеПравила.Добавить(Правило.ТочностьОкругления);
		ЗначениеПравила.Добавить(Правило.ПсихологическоеОкругление);
		ПравилаОкругленияЦены.Вставить(Правило.НижняяГраницаДиапазонаЦен, ЗначениеПравила);
	КонецЦикла;
	
	СтруктураОкругления.Вставить("ПравилаОкругленияЦены", ПравилаОкругленияЦены);	
	
	ПараметрыОкругленияДокумента.Вставить(ВидЦен.ИдентификаторФормул, СтруктураОкругления);
	
	КэшЗначений.Вставить("ПараметрыОкругленияДокумента", ПараметрыОкругленияДокумента);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыКопированияТаблицы(СтруктураТаблицДанных)
	
	ПараметрыКопирования = Новый Структура;
	ПараметрыКопирования.Вставить("ИменаКолонокКопирования"	, Неопределено);
	ПараметрыКопирования.Вставить("ИменаКолонокИсключений"	, Неопределено);
	ПараметрыКопирования.Вставить("ВыбранныеВидыЦен"		, КэшЗначений.ВыбранныеВидыЦен);
	ПараметрыКопирования.Вставить("ЗаполнитьТекущиеЦены"	, Истина);
	ПараметрыКопирования.Вставить("ИмяТабличнойЧасти"		, "");
	ПараметрыКопирования.Вставить("МаксимальныйКлючСвязи"	, КэшЗначений.МаксимальныйКлючСвязи); 
	ПараметрыКопирования.Вставить("ПоДокументу"				, Ложь);

	ПараметрыКопирования.Вставить("МаксимальныйКлючСвязиПослеДобавления", КэшЗначений.МаксимальныйКлючСвязи);
	ПараметрыКопирования.Вставить("ТаблицаЦен", ?(СтруктураТаблицДанных.Свойство("ТаблицаЦен"),
		СтруктураТаблицДанных.ТаблицаЦен, Неопределено)); 
		
	ПараметрыКопирования.Вставить("Период"					, Объект.Дата);   	
	ПараметрыКопирования.Вставить("ПараметрыВидовЦенСКД"	, ПолучитьСтруктуруПараметровВидовЦенСКД());
	ПараметрыКопирования.Вставить("ВключаяХарактеристики"	, Объект.УстанавливатьХарактеристикамБезЦен);
	ПараметрыКопирования.Вставить("Автор"					, Объект.Автор);
	ПараметрыКопирования.Вставить("КурсыВалютДокумента"		, КэшЗначений.КурсыВалютДокумента);
	ПараметрыКопирования.Вставить("ФОУчетВалютныхОпераций"	, КэшЗначений.ФОУчетВалютныхОпераций);

	Возврат ПараметрыКопирования;
	
КонецФункции

&НаКлиенте
Процедура НачатьЗаполнениеЦенПоДаннымИБНаКлиенте()
	
	ДлительнаяОперация = НачатьЗаполнениеЦенПоДаннымИБ();

	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатЗаполненияЦенПоДаннымИБ", ЭтотОбъект);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Заполнить цены по схемам компоновки и расширениям'");
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНовыеЦеныПоУказаннымУсловиям(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") И Результат.ВыборПроизведен Тогда

		ДлительнаяОперация = НачатьРасчетНовыхЦенНаСервере(Результат);
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатИзмененияНовыхЦен", ЭтотОбъект);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Изменение цен'");
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеДобавленияНоменклатуры(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") И Результат.ВыборПроизведен Тогда

		Если ДополнительныеПараметры = Неопределено Тогда
			ДополнительныеПараметры = Новый Структура;
		КонецЕсли;

		ДополнительныеПараметры.Вставить("ПересчитыватьЦены", Истина);
		ДополнительныеПараметры.Вставить("Сортировать", Ложь);
		ДополнительныеПараметры.Вставить("ЭтоНовый", Не ЗначениеЗаполнено(Объект.Ссылка));
		ОбработатьРезультатЗаполненияНаСервере(Результат, ДополнительныеПараметры);
		ПроверитьНеобходимостьПодключенияОбработчикаОжидания();

	КонецЕсли;

	ОбновитьКоличествоЗаписейПоДокументу();

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДельтуВПолеНаКлиенте(ДанныеТекущейСтроки, Идентификатор)

	ПолеДельта = Идентификатор + "_Дельта";
	ПолеДельтаКартинка = Идентификатор + "_ДельтаКартинка";
	ПолеЦенаНовая = Идентификатор + "_ЦенаНовая";
	ПолеЦенаДо = Идентификатор + "_ЦенаДо";
	ПолеВалютаДо = Идентификатор + "_ВалютаДо";
	ПолеВалютаНовая = Идентификатор + "_ВалютаНовая";

	ВалютаДо = ДанныеТекущейСтроки[ПолеВалютаДо];
	ВалютаНовая = ДанныеТекущейСтроки[ПолеВалютаНовая];

	Если ДанныеТекущейСтроки[ПолеВалютаДо] <> ДанныеТекущейСтроки[ПолеВалютаНовая] Тогда

		ЦенаДоВНовойВалюте = ПересчитатьЦенуИзВалютыВВалюту(ДанныеТекущейСтроки[ПолеЦенаДо], ВалютаДо, ВалютаНовая,
			КэшЗначений.КурсыВалютДокумента);
		ДанныеТекущейСтроки[ПолеДельта] = ДанныеТекущейСтроки[ПолеЦенаНовая] - ЦенаДоВНовойВалюте;

	Иначе

		ДанныеТекущейСтроки[ПолеДельта] = ДанныеТекущейСтроки[ПолеЦенаНовая] - ДанныеТекущейСтроки[ПолеЦенаДо];

	КонецЕсли;
	
	Если ДанныеТекущейСтроки[ПолеДельта] > 0 Тогда
		ДанныеТекущейСтроки[ПолеДельтаКартинка] = 0;
	ИначеЕсли ДанныеТекущейСтроки[ПолеДельта] < 0 Тогда
		ДанныеТекущейСтроки[ПолеДельтаКартинка] = 1;
	Иначе
		ДанныеТекущейСтроки[ПолеДельтаКартинка] = -1;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПересчитатьЦенуИзВалютыВВалюту(Знач Цена, ИсходнаяВалюта, НоваяВалюта, КурсыВалютДокумента)

	ПараметрыТекущегоКурса = КурсыВалютДокумента.Получить(ИсходнаяВалюта);
	ПараметрыНовогоКурса = КурсыВалютДокумента.Получить(НоваяВалюта);
	Если ПараметрыТекущегоКурса <> Неопределено И ПараметрыНовогоКурса <> Неопределено Тогда
		Возврат РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(Цена, ПараметрыТекущегоКурса, ПараметрыНовогоКурса);
	Иначе
		Возврат Цена;
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция КурсыВалютДокумента(Дата)

	Возврат Документы.УстановкаЦенНоменклатуры.КурсыВалютДокумента(Дата);

КонецФункции

&НаКлиенте
Процедура ВыбратьМассивНоменклатуры(МассивНоменклатуры)

	Если МассивНоменклатуры.Количество() > 30 Тогда

		ДлительнаяОперация = НачатьДобавлениеНоменклатурыНаСервере(МассивНоменклатуры);
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатДобавленияНоменклатуры", ЭтотОбъект);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Добавление номенклатуры в табличную часть'");
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);

	Иначе

		ДобавитьПроизвольнуюНоменклатуру(МассивНоменклатуры);

	КонецЕсли;

	Модифицированность = Истина;

	ОбновитьКоличествоЗаписейПоДокументу();

КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяКТаблицеНоменклатуры()

	Элементы.СтраницыПредварительныйРезультат.ТекущаяСтраница = Элементы.СтраницаПР_Номенклатура;
	ТекущиеДанные = Элементы.ТЧНоменклатура.ТекущиеДанные;
	РеквизитыНоменклатуры.Очистить();
	Если ТекущиеДанные <> Неопределено Тогда
		ОбновитьРеквизитыНоменклатуры(ТекущиеДанные);
	КонецЕсли;

	Элементы.СтраницаТовары.Заголовок = НСтр("ru='Товары, услуги'");
	ОбновитьКоличествоЗаписейПоДокументу();

	УстановитьВидимостьПравойПанели();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивВсейНоменклатуры()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				   |	Номенклатура.Ссылка
				   |ИЗ
				   |	Справочник.Номенклатура КАК Номенклатура
				   |ГДЕ
				   |	НЕ Номенклатура.ЭтоГруппа
				   |	И НЕ Номенклатура.Недействителен
				   |	И НЕ Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
				   |	И НЕ Номенклатура.ЭтоНабор";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// вид цен использование только просмотр
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ВидыЦен.РазрешитьВыбирать",
		Ложь, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ВидыЦенИспользование");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста",
		ЦветаСтиля.СкрытыйВариантОтчетаЦвет);
	
	// вид цен цвет текста
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ВидыЦен.РазрешитьВыбирать",
		Ложь, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ВидыЦенПредставление");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ВидыЦенВид");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста",
		ЦветаСтиля.СкрытыйВариантОтчетаЦвет);
		
	// вид цен шрифт
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ВидыЦен.ВидЦен", "",
		ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ВидыЦенПредставление");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ВидыЦенВид");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Шрифт", ШрифтыСтиля.ЖирныйШрифтБЭД);
		
	// виды цен основные цвет фона
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();

	ГруппаИли = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИли, "ВидыЦен.Вид", НСтр("ru='Статический'"),
		ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИли, "ВидыЦен.Вид", НСтр("ru='Произвольный запрос'"),
		ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИли, "ВидыЦен.Вид", НСтр("ru='Расширение'"),
		ВидСравненияКомпоновкиДанных.Равно);

	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ВидыЦенВид");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветФона", WebЦвета.АкварельноСиний);
	
	// виды цен зависимые цвет фона	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	ГруппаИли = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИли, "ВидыЦен.Вид", "Динамический",
		ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИли, "ВидыЦен.Вид", "Формула",
		ВидСравненияКомпоновкиДанных.Равно);

	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ВидыЦенВид");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветФона", WebЦвета.ЦветокБелый);
		
	// вид цен требуется заполнение параметра
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор,
		"ВидыЦен.ТребуетсяЗаполнениеПараметра", Истина, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ВидыЦенПараметры");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста",
		ЦветаСтиля.ЦветОсобогоТекста);
		
	// вид цен авторасчет
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор,
		"ВидыЦен.РассчитыватьАвтоматически", Истина, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ВидыЦенПредставление");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ВидыЦенВид");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ВидыЦенПараметры");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста",
		ЦветаСтиля.СкрытыйВариантОтчетаЦвет);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
		
	// Реквизиты номенклатуры выделить проверку заполнения характеристик таблицы номенклатуры
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	ГруппаИ = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИ, "ТЧНоменклатура.ПроверятьЗаполнениеХарактеристики",
		Истина, ВидСравненияКомпоновкиДанных.Равно);

	ГруппаИВложенная = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(ГруппаИ,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИВложенная, "РеквизитыНоменклатуры.ОформлениеРеквизита",
		Истина, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИВложенная, "РеквизитыНоменклатуры.ИмяРеквизитаОбъекта",
		"ПроверятьЗаполнениеХарактеристики", ВидСравненияКомпоновкиДанных.Содержит);

	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "РеквизитыНоменклатурыПредставлениеРеквизита");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "РеквизитыНоменклатурыЗначениеРеквизита");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста",
		ЦветаСтиля.ЦветТекстаПредупреждениеОбОкончанииДоговора);
		
	// Реквизиты характеристик скрыть колонки для заголовка цен
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор,
		"РеквизитыНоменклатуры.ЗначениеРеквизита", Истина, ВидСравненияКомпоновкиДанных.НеЗаполнено);

	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "РеквизитыХарактеристикЗначениеРеквизита");

	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Отображать", Ложь);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
	
	// Реквизиты характеристик надпись цен слева и шрифт
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор,
		"РеквизитыНоменклатуры.ЗначениеРеквизита", Истина, ВидСравненияКомпоновкиДанных.НеЗаполнено);

	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "РеквизитыХарактеристикПредставлениеРеквизита");

	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ГоризонтальноеПоложение",
		ГоризонтальноеПоложение.Лево);

	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Шрифт", ШрифтыСтиля.ЖирныйШрифтБЭД);
		
	// Реквизиты характеристик цвет видов цен основных	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();

	ГруппаИли = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИли, "РеквизитыНоменклатуры.ТипВидаЦен",
		Перечисления.ТипыВидовЦен.Статический, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИли, "РеквизитыНоменклатуры.ТипВидаЦен",
		Перечисления.ТипыВидовЦен.Расширение, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИли, "РеквизитыНоменклатуры.ТипВидаЦен",
		Перечисления.ТипыВидовЦен.ПроизвольныйЗапрос, ВидСравненияКомпоновкиДанных.Равно);

	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "РеквизитыХарактеристикПредставлениеРеквизита");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветФона", WebЦвета.АкварельноСиний);

	// Реквизиты характеристик цвет видов цен зависимых	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();

	ГруппаИли = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИли, "РеквизитыНоменклатуры.ТипВидаЦен",
		Перечисления.ТипыВидовЦен.ДинамическийПроцент, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИли, "РеквизитыНоменклатуры.ТипВидаЦен",
		Перечисления.ТипыВидовЦен.ДинамическийФормула, ВидСравненияКомпоновкиДанных.Равно);

	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "РеквизитыХарактеристикПредставлениеРеквизита");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветФона", WebЦвета.ЦветокБелый);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗаполненияНовыхВидовЦен(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено И ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда

		ОбработатьРезультатЗаполненияНовыхВидовЦенНаСервере(Результат, ДополнительныеПараметры);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатЗаполненияНовыхВидовЦенНаСервере(Результат, ДополнительныеПараметры)

	Если Результат <> Неопределено И ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда

		СтруктураТаблицДанных = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если ЗначениеЗаполнено(СтруктураТаблицДанных) Тогда

			ТаблицаФормыНоменклатуры = РеквизитФормыВЗначение("ТЧНоменклатура");
			СоздатьКопиюТекущихДанных(ТаблицаФормыНоменклатуры.Скопировать(), КэшЗначений.ДоИзмененияНоменклатура);
			ЗначениеВРеквизитФормы(СтруктураТаблицДанных.ТЧНоменклатура, "ТЧНоменклатура");

			ТаблицаФормыХарактеристик = РеквизитФормыВЗначение("ТЧХарактеристики");
			СоздатьКопиюТекущихДанных(ТаблицаФормыХарактеристик.Скопировать(), КэшЗначений.ДоИзмененияХарактеристики);
			ЗначениеВРеквизитФормы(СтруктураТаблицДанных.ТЧХарактеристики, "ТЧХарактеристики");

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНовыеВидыЦенВТабличныхЧастях()

	ДлительнаяОперация = НачатьЗаполнениеНовыхВидовЦенНаСервере();
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатЗаполненияНовыхВидовЦен", ЭтотОбъект);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Заполнение новых видов цен'");
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);

КонецПроцедуры

&НаСервере
Функция НачатьЗаполнениеНовыхВидовЦенНаСервере()

	СтруктураПараметров = Новый Структура;
	ТаблицаФормыНоменклатуры = РеквизитФормыВЗначение("ТЧНоменклатура", Тип("ТаблицаЗначений"));
	ТаблицаФормыХарактеристик = РеквизитФормыВЗначение("ТЧХарактеристики", Тип("ТаблицаЗначений"));

	СоздатьКопиюТекущихДанных(ТаблицаФормыНоменклатуры.Скопировать(), КэшЗначений.ДоИзмененияНоменклатура);
	СоздатьКопиюТекущихДанных(ТаблицаФормыХарактеристик.Скопировать(), КэшЗначений.ДоИзмененияХарактеристики);

	СтруктураПараметров.Вставить("ПараметрыВидовЦенСКД", ПолучитьСтруктуруПараметровВидовЦенСКД());

	МассивВидовЦен = Новый Массив;
	Для Каждого ВыбранныйВидЦен Из КэшЗначений.НовыеВидыЦен Цикл

		Если ВыбранныйВидЦен.ТипВидаЦен = КэшЗначений.ПроизвольныйЗапрос Или ВыбранныйВидЦен.ТипВидаЦен
			= КэшЗначений.Расширение Тогда

			МассивВидовЦен.Добавить(ВыбранныйВидЦен);

		КонецЕсли;

	КонецЦикла;

	ТаблицаНоменклатуры = СформироватьТаблицуЗапасовПоТабличнымЧастям(Объект, МассивВидовЦен);
	СтруктураПараметров.Вставить("ТаблицаНоменклатуры", ТаблицаНоменклатуры);

	СтруктураПараметров.Вставить("УстанавливатьХарактеристикамБезЦен", Объект.УстанавливатьХарактеристикамБезЦен);
	СтруктураПараметров.Вставить("ПоказыватьНедействительныеХарактеристики",
		Объект.ПоказыватьНедействительныеХарактеристики);
	СтруктураПараметров.Вставить("ТЧНоменклатура", ТаблицаФормыНоменклатуры);
	СтруктураПараметров.Вставить("ТЧХарактеристики", ТаблицаФормыХарактеристик);
	СтруктураПараметров.Вставить("КэшЗначений", КэшЗначений);
	СтруктураПараметров.Вставить("ВыбранныеВидыЦен", КэшЗначений.ВыбранныеВидыЦен);
	СтруктураПараметров.Вставить("Период", Объект.Дата);
	СтруктураПараметров.Вставить("ВключаяХарактеристики", Объект.УстанавливатьХарактеристикамБезЦен);
	СтруктураПараметров.Вставить("ПоказыватьХарактеристики", Объект.ПоказыватьХарактеристики);
	СтруктураПараметров.Вставить("Автор", Объект.Автор);
	СтруктураПараметров.Вставить("КурсыВалютДокумента", КэшЗначений.КурсыВалютДокумента);

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);

	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"Документы.УстановкаЦенНоменклатуры.ЗаполнитьНовыеВидыЦенВТабличныхЧастях", СтруктураПараметров);

КонецФункции

&НаСервере
Функция НачатьЗаполнениеЦенПоДаннымИБ()

	МассивВидовЦен = Новый Массив;
	Для Каждого ЭлементВидаЦен Из КэшЗначений.ВыбранныеВидыЦен Цикл
		Если ЭлементВидаЦен.Ключ.ТипВидаЦен = КэшЗначений.Расширение Или ЭлементВидаЦен.Ключ.ТипВидаЦен
			= КэшЗначений.ПроизвольныйЗапрос Тогда

			МассивВидовЦен.Добавить(ЭлементВидаЦен.Ключ);

		КонецЕсли;
	КонецЦикла;

	Если МассивВидовЦен.Количество() = 0 Тогда

		Возврат Неопределено;

	КонецЕсли;

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПараметрыВидовЦенСКД", ПолучитьСтруктуруПараметровВидовЦенСКД());
	СтруктураПараметров.Вставить("ТЧНоменклатура", РеквизитФормыВЗначение("ТЧНоменклатура"));
	СтруктураПараметров.Вставить("ТЧХарактеристики", РеквизитФормыВЗначение("ТЧХарактеристики"));
	СтруктураПараметров.Вставить("УстанавливатьХарактеристикамБезЦен", Объект.УстанавливатьХарактеристикамБезЦен);
	СтруктураПараметров.Вставить("ПоказыватьНедействительныеХарактеристики",
		Объект.ПоказыватьНедействительныеХарактеристики);
	СтруктураПараметров.Вставить("Автор", Объект.Автор);
	СтруктураПараметров.Вставить("Период", Объект.Дата);
	СтруктураПараметров.Вставить("ВыбранныеВидыЦен", КэшЗначений.ВыбранныеВидыЦен);
	СтруктураПараметров.Вставить("КурсыВалютДокумента", КэшЗначений.КурсыВалютДокумента);

	ТаблицаНоменклатуры = СформироватьТаблицуЗапасовПоТабличнымЧастям(Объект, МассивВидовЦен);
	СтруктураПараметров.Вставить("ТаблицаНоменклатуры", ТаблицаНоменклатуры);

	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"Документы.УстановкаЦенНоменклатуры.ЗаполнитьЦеныПоДаннымИБ", СтруктураПараметров);

КонецФункции

&НаСервере
Процедура ДобавитьРеквизитыИЭлементыТабличнойЧастиЗависимыхВидовЦенПоВидуЦен(Знач ПодчиненныеВидыЦен,
	СтруктураПараметров)

	МассивРеквизитов = СтруктураПараметров.МассивРеквизитов;

	Для Каждого ЗависимаяЦена Из ПодчиненныеВидыЦен Цикл

		ИдентификаторФормул = ЗависимаяЦена.Ключ.ИдентификаторФормул;
		
		ИмяРеквизитаЦенаДо = ИдентификаторФормул + "_ЦенаДо";
		ИмяРеквизитаДельта = ИдентификаторФормул + "_Дельта";
		ИмяРеквизитаЦенаНовая = ИдентификаторФормул + "_ЦенаНовая";
		ИмяРеквизитаЕдиницаИзмерения = ИдентификаторФормул + "_ЕдИзм";
		ИмяРеквизитаЦенуИзменили = ИдентификаторФормул + "_ЦенуИзменили";
		ИмяРеквизитаВалютаДо = ИдентификаторФормул + "_ВалютаДо";
		ИмяРеквизитаВалютаВидимость = ИдентификаторФормул + "_ВалютаВидимость";
		ИмяРеквизитаВалютаНовая = ИдентификаторФормул + "_ВалютаНовая";
		ИмяРеквизитаВалютаДельта = ИдентификаторФормул + "_ВалютаДельта";
		ИмяРеквизитаДельтаКартинка = ИдентификаторФормул + "_ДельтаКартинка";

		МассивРеквизитов.Очистить();

		СтруктураПараметров.Вставить("ИмяРеквизитаДельта", ИмяРеквизитаДельта);
		СтруктураПараметров.Вставить("ИмяРеквизитаЦенаДо", ИмяРеквизитаЦенаДо);
		СтруктураПараметров.Вставить("ИмяРеквизитаЕдиницаИзмерения", ИмяРеквизитаЕдиницаИзмерения);
		СтруктураПараметров.Вставить("ИмяРеквизитаЦенаНовая", ИмяРеквизитаЦенаНовая);
		СтруктураПараметров.Вставить("ИмяРеквизитаЦенуИзменили", ИмяРеквизитаЦенуИзменили);
		СтруктураПараметров.Вставить("ИмяРеквизитаВалютаДо", ИмяРеквизитаВалютаДо);
		СтруктураПараметров.Вставить("ИмяРеквизитаВалютаВидимость", ИмяРеквизитаВалютаВидимость);
		СтруктураПараметров.Вставить("ИмяРеквизитаВалютаНовая", ИмяРеквизитаВалютаНовая);
		СтруктураПараметров.Вставить("ИмяРеквизитаВалютаДельта", ИмяРеквизитаВалютаДельта);
		СтруктураПараметров.Вставить("ИмяРеквизитаДельтаКартинка", ИмяРеквизитаДельтаКартинка);

		ЭлементыЕстьНаФорме = ДобавитьРеквизитыТабличнойЧастиЗависимыхВидовЦенПоВидуЦен(СтруктураПараметров);

		Если Не ЭлементыЕстьНаФорме Тогда

			КэшЗначений.НовыеВидыЦен.Добавить(ЗависимаяЦена.Ключ);

			СтруктураПараметров.Вставить("ЗависимаяЦена", ЗависимаяЦена.Ключ);
			ДобавитьЭлементыЗависимогоВидаЦенТабличнойЧастиПоВидуЦен(СтруктураПараметров);

		КонецЕсли;

		Если ЗависимаяЦена.Значение.Количество() > 0 Тогда

			ДобавитьРеквизитыИЭлементыТабличнойЧастиЗависимыхВидовЦенПоВидуЦен(ЗависимаяЦена.Значение,
				СтруктураПараметров);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ДобавитьРеквизитыТабличнойЧастиЗависимыхВидовЦенПоВидуЦен(Знач СтруктураПараметров)

	ИмяТабличнойЧасти = СтруктураПараметров.ИмяТабличнойЧасти;
	МассивРеквизитов = СтруктураПараметров.МассивРеквизитов;
	ИмяРеквизитаДельта = СтруктураПараметров.ИмяРеквизитаДельта;
	ИмяРеквизитаЦенаДо = СтруктураПараметров.ИмяРеквизитаЦенаДо;
	ИмяРеквизитаВалютаДо = СтруктураПараметров.ИмяРеквизитаВалютаДо;
	ИмяРеквизитаВалютаВидимость = СтруктураПараметров.ИмяРеквизитаВалютаВидимость;
	ИмяРеквизитаВалютаНовая = СтруктураПараметров.ИмяРеквизитаВалютаНовая;
	ИмяРеквизитаВалютаДельта = СтруктураПараметров.ИмяРеквизитаВалютаДельта;
	ИмяРеквизитаДельтаКартинка = СтруктураПараметров.ИмяРеквизитаДельтаКартинка;
	
	ИмяРеквизитаЕдиницаИзмерения = СтруктураПараметров.ИмяРеквизитаЕдиницаИзмерения;
	ИмяРеквизитаЦенаНовая = СтруктураПараметров.ИмяРеквизитаЦенаНовая;
	ИмяРеквизитаЦенуИзменили = СтруктураПараметров.ИмяРеквизитаЦенуИзменили;
	ПутьРеквизита = СтруктураПараметров.ПутьРеквизита;
	ТипЕдИзмерения = СтруктураПараметров.ТипЕдИзмерения;
	ТипЧислоЛюбое = СтруктураПараметров.ТипЧислоЛюбое;
	ТипЧислоПлюс = СтруктураПараметров.ТипЧислоПлюс;
	ТипБулево = СтруктураПараметров.ТипБулево;
	
	ТипВалюта = СтруктураПараметров.ТипВалюта;

	ПолноеИмяРеквизитаЦенаДо = ИмяТабличнойЧасти + ИмяРеквизитаЦенаДо;
	Если Не РеквизитДобавленРаннее(ИмяТабличнойЧасти, ПолноеИмяРеквизитаЦенаДо) Тогда

		РеквизитЦенаЗависимаяДо 	= Новый РеквизитФормы(ПолноеИмяРеквизитаЦенаДо, ТипЧислоПлюс, ПутьРеквизита, 
			НСтр("ru='Цена старая'"));
		МассивРеквизитов.Добавить(РеквизитЦенаЗависимаяДо);

	КонецЕсли;
	
	ПолноеИмяРеквизитаВалютаДо = ИмяТабличнойЧасти + ИмяРеквизитаВалютаДо; 
	Если Не РеквизитДобавленРаннее(ИмяТабличнойЧасти, ПолноеИмяРеквизитаВалютаДо) Тогда

		РеквизитВалютаДо	= Новый РеквизитФормы(ПолноеИмяРеквизитаВалютаДо, ТипВалюта, ПутьРеквизита, 
			НСтр("ru ='Валюта до'"));
		МассивРеквизитов.Добавить(РеквизитВалютаДо);

	КонецЕсли;
	
	ПолноеИмяРеквизитаВалютаВидимость = ИмяТабличнойЧасти + ИмяРеквизитаВалютаВидимость;
	Если Не РеквизитДобавленРаннее(ИмяТабличнойЧасти, ПолноеИмяРеквизитаВалютаВидимость) Тогда

		РеквизитВалютаВидимость = Новый РеквизитФормы(ПолноеИмяРеквизитаВалютаВидимость, ТипБулево, ПутьРеквизита, 
			НСтр("ru ='Валюта видимость'"));
		МассивРеквизитов.Добавить(РеквизитВалютаВидимость);

	КонецЕсли;

	ПолноеИмяРеквизитаДельта = ИмяТабличнойЧасти + ИмяРеквизитаДельта;
	Если Не РеквизитДобавленРаннее(ИмяТабличнойЧасти, ПолноеИмяРеквизитаДельта) Тогда

		РеквизитЦенаЗависимаяДельта 	= Новый РеквизитФормы(ПолноеИмяРеквизитаДельта,
			ТипЧислоЛюбое, ПутьРеквизита, "Δ");
		МассивРеквизитов.Добавить(РеквизитЦенаЗависимаяДельта);

	КонецЕсли;

	ПолноеИмяРеквизитаЦенаНовая = ИмяТабличнойЧасти + ИмяРеквизитаЦенаНовая;
	Если Не РеквизитДобавленРаннее(ИмяТабличнойЧасти, ПолноеИмяРеквизитаЦенаНовая) Тогда

		РеквизитЦенаЗависимаяНовая 	= Новый РеквизитФормы(ПолноеИмяРеквизитаЦенаНовая,
			ТипЧислоПлюс, ПутьРеквизита, НСтр("ru='Цена новая'"));
		МассивРеквизитов.Добавить(РеквизитЦенаЗависимаяНовая);

	КонецЕсли;

	ПолноеИмяРеквизитаЕдиницаИзмерения = ИмяТабличнойЧасти + ИмяРеквизитаЕдиницаИзмерения;
	Если Не РеквизитДобавленРаннее(ИмяТабличнойЧасти, ПолноеИмяРеквизитаЕдиницаИзмерения) Тогда

		РеквизитЦенаЗависимаяЕдИзм 	= Новый РеквизитФормы(ПолноеИмяРеквизитаЕдиницаИзмерения,
			ТипЕдИзмерения, ПутьРеквизита, НСтр("ru='Ед.изм.'"));
		МассивРеквизитов.Добавить(РеквизитЦенаЗависимаяЕдИзм);

	КонецЕсли;

	ПолноеИмяРеквизитаЦенуИзменили = ИмяТабличнойЧасти + ИмяРеквизитаЦенуИзменили;
	Если Не РеквизитДобавленРаннее(ИмяТабличнойЧасти, ПолноеИмяРеквизитаЦенуИзменили) Тогда

		РеквизитЦенаЗависимаяЦенуИзменили 	= Новый РеквизитФормы(ПолноеИмяРеквизитаЦенуИзменили, ТипБулево,
			ПутьРеквизита, НСтр("ru ='_Служебный'"));
		МассивРеквизитов.Добавить(РеквизитЦенаЗависимаяЦенуИзменили);

	КонецЕсли;
	
	ПолноеИмяРеквизитаВалютаНовая = ИмяТабличнойЧасти + ИмяРеквизитаВалютаНовая;
	Если Не РеквизитДобавленРаннее(ИмяТабличнойЧасти, ПолноеИмяРеквизитаВалютаНовая) Тогда

		РеквизитВалютаНовая = Новый РеквизитФормы(ПолноеИмяРеквизитаВалютаНовая, ТипВалюта, ПутьРеквизита, 
			НСтр("ru ='Валюта'"));
		МассивРеквизитов.Добавить(РеквизитВалютаНовая);

	КонецЕсли;

	ПолноеИмяРеквизитаВалютаДельта = ИмяТабличнойЧасти + ИмяРеквизитаВалютаДельта;
	Если Не РеквизитДобавленРаннее(ИмяТабличнойЧасти, ПолноеИмяРеквизитаВалютаДельта) Тогда

		РеквизитВалютаДельта = Новый РеквизитФормы(ПолноеИмяРеквизитаВалютаДельта, ТипВалюта, ПутьРеквизита, 
			НСтр("ru ='Валюта'"));
		МассивРеквизитов.Добавить(РеквизитВалютаДельта);

	КонецЕсли;
	
	ПолноеИмяРеквизитаДельтаКартинка = ИмяТабличнойЧасти + ИмяРеквизитаДельтаКартинка;
	Если Не РеквизитДобавленРаннее(ИмяТабличнойЧасти, ПолноеИмяРеквизитаДельтаКартинка) Тогда

		РеквизитДельтаКартинка = Новый РеквизитФормы(ПолноеИмяРеквизитаДельтаКартинка, ТипЧислоЛюбое, ПутьРеквизита, 
			НСтр("ru ='Картинка'"));
		МассивРеквизитов.Добавить(РеквизитДельтаКартинка);

	КонецЕсли;

	ЭлементыЕстьНаФорме = Истина;
	Если МассивРеквизитов.Количество() > 0 Тогда

		ИзменитьРеквизиты(МассивРеквизитов);
		ЭлементыЕстьНаФорме = Ложь;

	КонецЕсли;
	Возврат ЭлементыЕстьНаФорме;

КонецФункции

&НаСервере
Процедура УстановитьЗначенияЗависимыхЦенПоСтроке(Знач ИдентификаторТекущейСтроки,
	Знач ИдентификаторФормулыИзмененнойЦены, Знач ИмяТабличнойЧасти)

	ДанныеТекущейСтроки = ЭтотОбъект[ИмяТабличнойЧасти].НайтиПоИдентификатору(ИдентификаторТекущейСтроки);

	ТаблицаРасчета = Документы.УстановкаЦенНоменклатуры.ПолучитьПустуюТаблицуДляРасчетаЗависимыхЦен();
	ТаблицаИсточникСЦеной = СформироватьТаблицуИсточникСЦенойПоОднойЗаписи(ДанныеТекущейСтроки, ИмяТабличнойЧасти);

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НовыеВидыЦен", Новый Массив);
	СтруктураПараметров.Вставить("Период", Объект.Дата);
	СтруктураПараметров.Вставить("КэшФормул", Новый Структура);
	СтруктураПараметров.Вставить("ИдентификаторИсключение", ИдентификаторФормулыИзмененнойЦены);

	Документы.УстановкаЦенНоменклатуры.ЗаполнитьТаблицуДляРасчетаЗависимыхПоТаблицеБазовых(ТаблицаРасчета,
		КэшЗначений.ВыбранныеВидыЦен, ИмяТабличнойЧасти, ТаблицаИсточникСЦеной, СтруктураПараметров);

	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ТаблицаРасчета", ТаблицаРасчета);
	ПараметрыРасчета.Вставить("Период", Объект.Дата);
	ПараметрыРасчета.Вставить("ВключаяХарактеристики", Объект.УстанавливатьХарактеристикамБезЦен);
	ПараметрыРасчета.Вставить("Автор", Объект.Автор);
	ПараметрыРасчета.Вставить("КурсыВалютДокумента", КэшЗначений.КурсыВалютДокумента);

	ТаблицаРезультат = Документы.УстановкаЦенНоменклатуры.РассчитатьЗависимыеЦеныПоБазовой(ПараметрыРасчета);

	Для Каждого СтрокаРезультат Из ТаблицаРезультат Цикл

		ИдентификаторФормул = СтрокаРезультат.ВидЦенРасчетный.ИдентификаторФормул;
		
		ИмяПоляЦенаНовая = ИмяТабличнойЧасти + ИдентификаторФормул + "_ЦенаНовая";
		ИмяПоляЦенаДельта = ИмяТабличнойЧасти + ИдентификаторФормул + "_Дельта";
		ИмяПоляЦенаДельтаКартинка = ИмяТабличнойЧасти + ИдентификаторФормул + "_ДельтаКартинка";
		ИмяПоляЦенаДо = ИмяТабличнойЧасти + ИдентификаторФормул + "_ЦенаДо";
		
		ДанныеТекущейСтроки[ИмяПоляЦенаНовая] = СтрокаРезультат.ЗначениеЦеныРасчетной;
		ДанныеТекущейСтроки[ИмяПоляЦенаДельта] 
			= ДанныеТекущейСтроки[ИмяПоляЦенаНовая] - ДанныеТекущейСтроки[ИмяПоляЦенаДо];

		Если ДанныеТекущейСтроки[ИмяПоляЦенаДельта] > 0 Тогда
			ДанныеТекущейСтроки[ИмяПоляЦенаДельтаКартинка] = 0;
		ИначеЕсли ДанныеТекущейСтроки[ИмяПоляЦенаДельта] < 0 Тогда
			ДанныеТекущейСтроки[ИмяПоляЦенаДельтаКартинка] = 1;
		Иначе
			ДанныеТекущейСтроки[ИмяПоляЦенаДельтаКартинка] = -1;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКоличествоЗаписейПоДокументу()

	ТоварыКоличествоСтрок = ТЧНоменклатура.Количество();

	МассивВидовЦен = Новый Массив;
	ЗаполнитьМассивВыбранныхВидовЦен(МассивВидовЦен, КэшЗначений.ВыбранныеВидыЦен);

	ОбщееКоличествоЗаписейДокумента = (ТоварыКоличествоСтрок + ТЧХарактеристики.Количество())
		* МассивВидовЦен.Количество();
	Если ОбщееКоличествоЗаписейДокумента > 99999 Тогда

		ТекстЗаголовка = СтрШаблон(НСтр("ru='Количество записей по документу %1 превысило предельное количество 99 999. 
										|Отключите неиспользуемые виды цен или удалите часть номенклатуры.'"),
			ОбщееКоличествоЗаписейДокумента);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияЗаголовокПревышение",
			"Заголовок", ТекстЗаголовка);

	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПанельИнформацияПоДокументу",
		"Видимость", ОбщееКоличествоЗаписейДокумента > 99999);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьИспользованиеВидаЦенВнизПоДереву(ДанныеСтроки, Знач Использование)

	ДанныеСтроки.Использование = Использование;
	ИзменитьИспользованиеВидаЦеныФормулойВДереве(ДанныеСтроки, Использование);
	ПодчиненныеСтроки = ДанныеСтроки.ПолучитьЭлементы();
	Если ПодчиненныеСтроки <> Неопределено Тогда

		Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл

			УстановитьИспользованиеВидаЦенВнизПоДереву(ПодчиненнаяСтрока, Использование);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьИспользованиеВидаЦенВверхПоДереву(ДанныеСтроки, Знач Использование)

	ДанныеСтроки.Использование = Использование;
	РодительСтроки = ДанныеСтроки.ПолучитьРодителя();
	Если РодительСтроки <> Неопределено Тогда

		УстановитьИспользованиеВидаЦенВверхПоДереву(РодительСтроки, Использование);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СвернутьДеревоВидовЦен()

	Для Каждого ПервыйУровеньВидЦены Из ВидыЦен.ПолучитьЭлементы() Цикл

		Для Каждого ВторойУровеньВидЦены Из ПервыйУровеньВидЦены.ПолучитьЭлементы() Цикл

			Элементы.ВидыЦен.Свернуть(ВторойУровеньВидЦены.ПолучитьИдентификатор());

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоВидовЦен()

	Для Каждого ВидЦены Из ВидыЦен.ПолучитьЭлементы() Цикл

		Элементы.ВидыЦен.Развернуть(ВидЦены.ПолучитьИдентификатор(), Истина);

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОчисткиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда

		ОчиститьТабличныеЧастиНаСервере();
		ОбновитьКоличествоЗаписейПоДокументу();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтразитьИзменениеЗависимыхЦенПоСтроке(ДанныеТекущейСтроки, ИдентификаторФормул, ИмяТабличнойЧасти)

	УстановитьЗначенияЗависимыхЦенПоСтроке(ДанныеТекущейСтроки.ПолучитьИдентификатор(), ИдентификаторФормул,
		ИмяТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатИзмененияНовыхЦен(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено И ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда

		ОбработатьРезультатИзмененияНовыхЦенНаСервере(Результат, ДополнительныеПараметры);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатИзмененияНовыхЦенНаСервере(Результат, ДополнительныеПараметры)

	Если Результат <> Неопределено И ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда

		СтруктураТаблицДанных = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если ЗначениеЗаполнено(СтруктураТаблицДанных) Тогда

			ТаблицаФормыНоменклатуры = РеквизитФормыВЗначение("ТЧНоменклатура");
			СоздатьКопиюТекущихДанных(ТаблицаФормыНоменклатуры.Скопировать(), КэшЗначений.ДоИзмененияНоменклатура);
			ЗначениеВРеквизитФормы(СтруктураТаблицДанных.ТЧНоменклатура, "ТЧНоменклатура");

			ТаблицаФормыХарактеристик = РеквизитФормыВЗначение("ТЧХарактеристики");
			СоздатьКопиюТекущихДанных(ТаблицаФормыХарактеристик.Скопировать(), КэшЗначений.ДоИзмененияХарактеристики);
			ЗначениеВРеквизитФормы(СтруктураТаблицДанных.ТЧХарактеристики, "ТЧХарактеристики");

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗаполненияЦенПоДаннымИБ(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено И ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда

		ОбработатьРезультатЗаполненияЦенПоДаннымИБНаСервере(Результат, ДополнительныеПараметры);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатЗаполненияЦенПоДаннымИБНаСервере(Результат, ДополнительныеПараметры)

	Если Результат <> Неопределено И ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда

		СтруктураТаблицДанных = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если ЗначениеЗаполнено(СтруктураТаблицДанных) Тогда

			ТаблицаФормыНоменклатуры = РеквизитФормыВЗначение("ТЧНоменклатура");
			СоздатьКопиюТекущихДанных(ТаблицаФормыНоменклатуры.Скопировать(), КэшЗначений.ДоИзмененияНоменклатура);
			ЗначениеВРеквизитФормы(СтруктураТаблицДанных.ТЧНоменклатура, "ТЧНоменклатура");

			ТаблицаФормыХарактеристик = РеквизитФормыВЗначение("ТЧХарактеристики");
			СоздатьКопиюТекущихДанных(ТаблицаФормыХарактеристик.Скопировать(), КэшЗначений.ДоИзмененияХарактеристики);
			ЗначениеВРеквизитФормы(СтруктураТаблицДанных.ТЧХарактеристики, "ТЧХарактеристики");

			ПоместитьЦеныВТабличнуюЧасть(Объект);
			Запасы = Объект.Запасы.Выгрузить();
			ЦенообразованиеСервер.ИзменитьЦенуВТаблицеПоПорогамСрабатывания(Запасы, КэшЗначений.ВыбранныеВидыЦен,
				Объект.Дата - 1);
			Объект.Запасы.Загрузить(Запасы);
			ЗаполнитьТаблицуНоменклатурыИХарактеристикПоДокументу(Истина, Ложь);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатДобавленияНоменклатуры(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено И ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда

		ОбработатьРезультатДобавленияНоменклатурыНаСервере(Результат, ДополнительныеПараметры);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатДобавленияНоменклатурыНаСервере(Результат, ДополнительныеПараметры)

	Если Результат <> Неопределено И ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда

		СтруктураТаблицДанных = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если ЗначениеЗаполнено(СтруктураТаблицДанных) Тогда

			ТаблицаФормыНоменклатуры = РеквизитФормыВЗначение("ТЧНоменклатура");
			СоздатьКопиюТекущихДанных(ТаблицаФормыНоменклатуры.Скопировать(), КэшЗначений.ДоИзмененияНоменклатура);
			ЗначениеВРеквизитФормы(СтруктураТаблицДанных.ТаблицаФормыНоменклатуры, "ТЧНоменклатура");

			ТаблицаФормыХарактеристик = РеквизитФормыВЗначение("ТЧХарактеристики");
			СоздатьКопиюТекущихДанных(ТаблицаФормыХарактеристик.Скопировать(), КэшЗначений.ДоИзмененияХарактеристики);
			ЗначениеВРеквизитФормы(СтруктураТаблицДанных.ТаблицаФормыХарактеристик, "ТЧХарактеристики");

			КэшЗначений.МаксимальныйКлючСвязи = СтруктураТаблицДанных.МаксимальныйКлючСвязи;
			
			Если РежимОстаткиИРезервы Тогда
				МассивВыбранныхСтрок = СтруктураТаблицДанных.ТаблицаФормыНоменклатуры.ВыгрузитьКолонку("Номенклатура");
				ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере(МассивВыбранныхСтрок);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	ТоварыКоличествоСтрок = ТЧНоменклатура.Количество();

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗаполненияДокументаПриОткрытии(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено И ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда

		ОбработатьЗаполненияДокументаНаСервереПриОткрытии(Результат, ДополнительныеПараметры);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаполненияДокументаНаСервереПриОткрытии(Результат, ДополнительныеПараметры)

	Если Результат <> Неопределено И ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда

		СтруктураТаблицДанных = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если ЗначениеЗаполнено(СтруктураТаблицДанных) Тогда

			ЗначениеВРеквизитФормы(СтруктураТаблицДанных.ТЧНоменклатура, "ТЧНоменклатура");
			ЗначениеВРеквизитФормы(СтруктураТаблицДанных.ТЧХарактеристики, "ТЧХарактеристики");

			КэшЗначений.МаксимальныйКлючСвязи = СтруктураТаблицДанных.МаксимальныйКлючСвязи;

		КонецЕсли;

	КонецЕсли;

	УстановитьВидимостьГруппыБазовыхЦен();
	КэшЗначений.ОтключенныеВидыЦен.Очистить();
	ТоварыКоличествоСтрок = ТЧНоменклатура.Количество();

КонецПроцедуры

&НаКлиенте
Процедура НайтиСтрокиВДеревеПоВидуЦен(ВидыЦенЭлементы, ВидЦен, МассивСтрок)

	Для Каждого ЭлементДерева Из ВидыЦенЭлементы Цикл

		Если ЭлементДерева["ВидЦен"] = ВидЦен Тогда
			МассивСтрок.Добавить(ЭлементДерева);
		КонецЕсли;

		ПодчиненныеЭлементыСтроки = ЭлементДерева.ПолучитьЭлементы();
		Если ПодчиненныеЭлементыСтроки.Количество() > 0 Тогда
			НайтиСтрокиВДеревеПоВидуЦен(ПодчиненныеЭлементыСтроки, ВидЦен, МассивСтрок);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИспользованиеВидаЦеныФормулойВДереве(ДанныеСтроки, Знач Использование)

	Перем МассивСтрок, ЭлементМассиваСтрок;

	Если ДанныеСтроки.Вид = КэшЗначений.ДинамическийФормулаСтрокой Тогда

		МассивСтрок = Новый Массив;
		НайтиСтрокиВДеревеПоВидуЦен(ВидыЦен.ПолучитьЭлементы(), ДанныеСтроки.ВидЦен, МассивСтрок);

		Для Каждого ЭлементМассиваСтрок Из МассивСтрок Цикл

			ЭлементМассиваСтрок.Использование = Использование;
			Если Использование Тогда
				УстановитьИспользованиеВидаЦенВверхПоДереву(ЭлементМассиваСтрок.ПолучитьРодителя(), Истина);
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьКэшЗначений()

	ПроизвольныйЗапросПредставление = НСтр("ru = 'Произвольный запрос'");
	ФормулаПредставление = НСтр("ru = 'Формула'");
	ФормулаАвтоПредставление = НСтр("ru = 'Формула (авто)'");
	ДинамическийПредставление = НСтр("ru = 'Динамический'");
	ДинамическийАвтоПредставление = НСтр("ru = 'Динамический (авто)'");
	СтатическийПредставление = НСтр("ru = 'Статический'");

	КэшЗначений = Новый Структура;
	КэшЗначений.Вставить("ФОУчетЦенКонтрагентов", ПолучитьФункциональнуюОпцию("УчетЦенКонтрагентов"));
	КэшЗначений.Вставить("ФОИспользоватьХарактеристики", ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики"));
	КэшЗначений.Вставить("ФОИспользоватьЕдиницыИзмерения", ПолучитьФункциональнуюОпцию(
		"УчетВРазличныхЕдиницахИзмерения"));
	КэшЗначений.Вставить("ФОУчетВалютныхОпераций", ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций"));

	КэшЗначений.Вставить("Статический", Перечисления.ТипыВидовЦен.Статический);
	КэшЗначений.Вставить("ДинамическийПроцент", Перечисления.ТипыВидовЦен.ДинамическийПроцент);
	КэшЗначений.Вставить("ДинамическийФормула", Перечисления.ТипыВидовЦен.ДинамическийФормула);
	КэшЗначений.Вставить("ПроизвольныйЗапрос", Перечисления.ТипыВидовЦен.ПроизвольныйЗапрос);
	КэшЗначений.Вставить("Расширение", Перечисления.ТипыВидовЦен.Расширение);

	КэшЗначений.Вставить("ДинамическийПроцентСтрокой", ДинамическийПредставление);
	КэшЗначений.Вставить("ДинамическийАвтоПроцентСтрокой", ДинамическийАвтоПредставление);
	КэшЗначений.Вставить("ДинамическийФормулаСтрокой", ФормулаПредставление);
	КэшЗначений.Вставить("ДинамическийАвтоФормулаСтрокой", ФормулаАвтоПредставление);
	КэшЗначений.Вставить("ПроизвольныйЗапросСтрокой", ПроизвольныйЗапросПредставление);
	КэшЗначений.Вставить("СтатическийСтрокой", СтатическийПредставление);

	КэшЗначений.Вставить("ВыбранныеВидыЦен", Новый Соответствие);
	КэшЗначений.Вставить("ОтключенныеВидыЦен", Новый Массив);
	КэшЗначений.Вставить("ИсключенныеВидыЦен", Новый Массив);
	КэшЗначений.Вставить("НовыеВидыЦен", Новый Массив);
	КэшЗначений.Вставить("МаксимальныйКлючСвязи", 0);
	КэшЗначений.Вставить("КоличествоСтрокПриемлемогоБыстродействия", 500);
	КэшЗначений.Вставить("АвторизированныйПользователь", Пользователи.АвторизованныйПользователь());
	КэшЗначений.Вставить("ДоИзмененияНоменклатура", ПоместитьВоВременноеХранилище(Новый ТаблицаЗначений,
		УникальныйИдентификатор));
	КэшЗначений.Вставить("ДоИзмененияХарактеристики", ПоместитьВоВременноеХранилище(Новый ТаблицаЗначений,
		УникальныйИдентификатор));
	КэшЗначений.Вставить("ЦветТемноЗеленый", ЦветаСтиля.ЦветТемноЗеленый);
	КэшЗначений.Вставить("ЦветСветлоЗеленый", ЦветаСтиля.ЦветСветлоЗеленый);
	КэшЗначений.Вставить("ВводНаОснованииПриходныхНакладных", Ложь);
	КэшЗначений.Вставить("ЗаполнениеНаОснованииПриходныхНакладныхВыполнено", Неопределено);
	КэшЗначений.Вставить("ОткрыватьПрайсЛистОрганизацииКакСписок",
		УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОткрыватьПрайсЛистОрганизацииКакСписок"));
	КэшЗначений.Вставить("ПараметрыДлительнойОперации", Новый Структура);
	КэшЗначений.Вставить("ПервоеПереключениеНаОсновании", Истина);
	КэшЗначений.Вставить("ОтображатьИнформационноеПоле", Ложь);

	КэшЗначений.ПараметрыДлительнойОперации.Вставить("РезультатДлОперации", Неопределено);
	КэшЗначений.ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания", "");
	КэшЗначений.ПараметрыДлительнойОперации.Вставить("ТекстСообщенияДлительнойОперации", "");
	КэшЗначений.ПараметрыДлительнойОперации.Вставить("ЗаданиеЗапущено", Ложь);
	
	КэшЗначений.Вставить("КурсыВалютДокумента", КурсыВалютДокумента(Объект.Дата));

	Если Параметры.Свойство("ВводНаОснованииПриходныхНакладных") Тогда

		КэшЗначений.ВводНаОснованииПриходныхНакладных = Истина;
		КэшЗначений.ЗаполнениеНаОснованииПриходныхНакладныхВыполнено = Ложь;
		КэшЗначений.Вставить("МассивПриходныхНакладных", Параметры.МассивПриходныхНакладных);

	КонецЕсли;

	НаборСвойств_Документ_УстановкаЦенНоменклатуры = УправлениеСвойствами.НаборСвойствПоИмени(
		"Документ_УстановкаЦенНоменклатуры");
	КэшЗначений.Вставить("НаборСвойств_Документ_УстановкаЦенНоменклатуры",
		НаборСвойств_Документ_УстановкаЦенНоменклатуры);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СортироватьВыбранныеВидыЦенПоУмолчанию(ВыбранныеВидыЦен, Результат)

	Справочники.ВидыЦен.СортироватьСоответствиеВидовЦенПоУмолчанию(ВыбранныеВидыЦен, Результат);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДокументОснование()

	СписокДокументОснование.Добавить("Документ.ПриходнаяНакладная.ФормаВыбора", НСтр("ru = 'Приходная накладная'"));
	СписокДокументОснование.Добавить("Документ.АвансовыйОтчет.ФормаВыбора", НСтр("ru = 'Авансовый отчет'"));
	СписокДокументОснование.Добавить("Документ.ОприходованиеЗапасов.ФормаВыбора", НСтр("ru = 'Оприходование запасов'"));
	СписокДокументОснование.Добавить("Документ.СборкаЗапасов.ФормаВыбора", НСтр("ru = 'Производство'"));

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЭлементыФормыПоВыбраннымВидамЦен()

	Кнопка = Элементы.ЗаполнитьЦеныПоДаннымиИБ;
	
	УсловиеЗаголовка = КэшЗначений.ВыбраныЦеныПоступленияСКДИЗаполненоОснование; 
	
	Если КэшЗначений.ИзмененСоставКолонокВидовЦен Тогда  
		
		ВыбранныеВидыЦен = КэшЗначений.ВыбранныеВидыЦен;  
		УсловиеЗаголовка = ВыбраныЦеныПоступленияСКДИЗаполненоОснование(КэшЗначений.ВыбранныеВидыЦен,
			ЗначениеЗаполнено(Объект.ДокументОснование)); 
		
	КонецЕсли;
	
	Если УсловиеЗаголовка Тогда
		Кнопка.Заголовок = НСтр("ru = 'Заполнить цены по схемам компоновки, расширениям или основанию'");
	Иначе
		Кнопка.Заголовок = НСтр("ru = 'Заполнить цены по схемам компоновки и расширениям'");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоОперандов(МассивВидовЦен)
	Перем ВключаяЦеныНоменклатуры, ВключаяЦеныКонтрагентов;

	ДеревоРезультата = Новый ДеревоЗначений;

	Параметры.Свойство("ЦеныНоменклатуры", ВключаяЦеныНоменклатуры);
	Если ВключаяЦеныНоменклатуры = Неопределено Тогда

		ВключаяЦеныНоменклатуры = Истина;

	КонецЕсли;

	Если КэшЗначений.ФОУчетЦенКонтрагентов Тогда
		Параметры.Свойство("ЦеныКонтрагентов", ВключаяЦеныКонтрагентов);
	КонецЕсли;

	Если ВключаяЦеныКонтрагентов = Неопределено Тогда
		ВключаяЦеныКонтрагентов = Ложь;
	КонецЕсли;

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДеревоРезультата", ДеревоРезультата);
	СтруктураПараметров.Вставить("МассивВидовЦен", МассивВидовЦен);
	СтруктураПараметров.Вставить("ВключаяЦеныНоменклатуры", ВключаяЦеныНоменклатуры);
	СтруктураПараметров.Вставить("ВключаяЦеныКонтрагентов", ВключаяЦеныКонтрагентов);
	СтруктураПараметров.Вставить("ВидыЦенВыбраныПриЗаполнении", КэшЗначений.ВидыЦенВыбраныПриЗаполнении);
	СтруктураПараметров.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификатор);

	Документы.УстановкаЦенНоменклатуры.ПолучитьДеревоВидовЦен(СтруктураПараметров);

	ЗначениеВРеквизитФормы(СтруктураПараметров.ДеревоРезультата, "ВидыЦен");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшЗначенийВидамиЦен(КэшЗначений)

	КэшЗначений.ВыбранныеВидыЦен = Новый Соответствие;

	СтрокиГруппВидовЦен = ВидыЦен.ПолучитьЭлементы();
	Для Каждого ГруппаВидовЦен Из СтрокиГруппВидовЦен Цикл

		СтрокиБазовыхВидовЦен = ГруппаВидовЦен.ПолучитьЭлементы();
		Для Каждого СтрокаБазовогоВидаЦен Из СтрокиБазовыхВидовЦен Цикл

			ТекущиеВидыЦен.Добавить(СтрокаБазовогоВидаЦен.ВидЦен, СтрокаБазовогоВидаЦен.Представление, Истина);

			ПодчиненныеВидыЦен = ЗаполнитьКэшЗначенийПодчиненнымиВидамиЦен(КэшЗначений, СтрокаБазовогоВидаЦен);

			Если СтрокаБазовогоВидаЦен.Использование Или ПодчиненныеВидыЦен.Количество() > 0 Тогда

				СтрокаБазовогоВидаЦен.Использование = Истина;
				КэшЗначений.ВыбранныеВидыЦен.Вставить(СтрокаБазовогоВидаЦен.ВидЦен, ПодчиненныеВидыЦен);

				Отключена = КэшЗначений.ОтключенныеВидыЦен.Найти(СтрокаБазовогоВидаЦен.ВидЦен);
				Если Отключена <> Неопределено Тогда

					КэшЗначений.ОтключенныеВидыЦен.Удалить(Отключена);

				КонецЕсли;

			Иначе

				ПодчиненныеВидыЦен = Новый Массив;
				ЗаполнитьПодчиненныеВидыЦен(СтрокаБазовогоВидаЦен, ПодчиненныеВидыЦен);

				Отключена = КэшЗначений.ОтключенныеВидыЦен.Найти(СтрокаБазовогоВидаЦен.ВидЦен);
				Если Отключена = Неопределено Тогда

					КэшЗначений.ОтключенныеВидыЦен.Добавить(СтрокаБазовогоВидаЦен.ВидЦен);

				КонецЕсли;

			КонецЕсли;

			ДобавитьВКэшОтключенныеВидыЦенПоРодителю(СтрокаБазовогоВидаЦен, КэшЗначений);

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодчиненныеВидыЦен(СтрокаВидаЦенРодитель, МассивПодчиненныхЦен)

	СтрокиРасчетныхВидовЦен = СтрокаВидаЦенРодитель.ПолучитьЭлементы();
	Если СтрокиРасчетныхВидовЦен.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для Каждого СтрокаВидаЦен Из СтрокиРасчетныхВидовЦен Цикл

		Если СтрокаВидаЦен.Использование Тогда
			МассивПодчиненныхЦен.Добавить(СтрокаВидаЦен.ВидЦен);
		КонецЕсли;
		ЗаполнитьПодчиненныеВидыЦен(СтрокаВидаЦен, МассивПодчиненныхЦен);

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуНоменклатурыИХарактеристикПоДокументу(ПересчитыватьЦены = Истина, Сортировать = Истина)

	ТЧНоменклатура.Очистить();
	ТЧХарактеристики.Очистить();
	Запасы = Объект.Запасы.Выгрузить();
	АдресВременногоХранилища = Документы.УстановкаЦенНоменклатуры.РазобратьМассивНоменклатурыИХарактеристикПоДокументу(
		Запасы, Объект.ПоказыватьХарактеристики, Объект.ПоказыватьНедействительныеХарактеристики);

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПересчитыватьЦены", ПересчитыватьЦены);
	ДополнительныеПараметры.Вставить("Сортировать", Сортировать);
	ДополнительныеПараметры.Вставить("ЭтоНовый", Не ЗначениеЗаполнено(Объект.Ссылка));

	Результат = Новый Структура;
	Результат.Вставить("ВыборПроизведен", Истина);
	Результат.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);

	ОбработатьРезультатЗаполненияНаСервере(Результат, ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьПриОткрытии()

	Если КэшЗначений.Свойство("ЗаполнитьДокументФоновымЗаданием") Тогда

		ДлительнаяОперация = НачатьЗаполнениеДокументаНаСервереПриОткрытии();
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗаполненияДокументаПриОткрытии", ЭтотОбъект);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Открытие документа'");
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		КэшЗначений.Удалить("ЗаполнитьДокументФоновымЗаданием");

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ВидыЦенВыбраны()

	Возврат (КэшЗначений.ВыбранныеВидыЦен.Количество() <> 0);

КонецФункции

&НаСервере
Процедура ОбработатьРезультатЗаполненияНаСервере(Результат, ДополнительныеПараметры)

	Если ЗначениеЗаполнено(Результат.АдресВременногоХранилища) Тогда

		СтруктураТаблицДанных = ПолучитьИзВременногоХранилища(Результат.АдресВременногоХранилища);
		Если ЗначениеЗаполнено(СтруктураТаблицДанных) Тогда

			ДобавитьНоменклатуру(СтруктураТаблицДанных, ДополнительныеПараметры);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличныеЧастиНаСервере()

	ТЧНоменклатура.Очистить();
	ТЧХарактеристики.Очистить();
	Объект.Запасы.Очистить();
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДобавленияПроизвольнойНоменклатуры(СпособЗаполнения)

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыОткрытия.Вставить("МножественныйВыбор", Истина);
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
	МассивТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	МассивТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	МассивТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ВидРабот"));
	МассивТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Операция"));

	ТипНоменклатуры = Новый ФиксированныйМассив(МассивТипов);
	ПараметрыОткрытия.Вставить("ТипНоменклатуры", ТипНоменклатуры);

	Если СпособЗаполнения = "Группы" Тогда

		ИмяФормыВыбораНоменклатуры = "Справочник.Номенклатура.ФормаВыбораГруппы";

	ИначеЕсли СпособЗаполнения = "Элементы" Тогда

		ИмяФормыВыбораНоменклатуры = "Справочник.Номенклатура.ФормаВыбора";

	КонецЕсли;

	ОткрытьФорму(ИмяФормыВыбораНоменклатуры, ПараметрыОткрытия, ЭтотОбъект, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьСтрокиХарактеристикПоКлючуСвязи(КлючСвязи, ТЧХарактеристики)

	НайденныеСтрокиХарактеристики = ТЧХарактеристики.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи));
	Для Каждого СтрокаХарактеристики Из НайденныеСтрокиХарактеристики Цикл

		ТЧХарактеристики.Удалить(СтрокаХарактеристики);

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СообщитьОНаборах(МассивНоменклатуры)

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНаборы") Или ТипЗнч(МассивНоменклатуры) <> Тип("Массив") Тогда

		Возврат;

	КонецЕсли;

	НазваниеСвойства = Метаданные.Перечисления.СпособыРасчетаЦеныНабора.ЗначенияПеречисления.СкладыватьИзЦенКомплектующих.Синоним;

	Для Каждого ЭлементМассива Из МассивНоменклатуры Цикл

		Если Не ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.Номенклатура") Тогда

			Продолжить;

		КонецЕсли;

		Если ЭлементМассива.ЭтоНабор = Истина И ЭлементМассива.СпособРасчетаЦеныНабора
			= Перечисления.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих Тогда

			ТекстСообщения = НСтр("ru ='Нельзя устанавливать цены для наборов с установленным свойством ""%1"".
								  |Выбор номенклатуры [%2] проигнорирован.'");

			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ТекстСообщения, НазваниеСвойства, ЭлементМассива));

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УдалитьДубли()

	ТаблицаНоменклатуры = РеквизитФормыВЗначение("ТЧНоменклатура", Тип("ТаблицаЗначений"));

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);

	Запрос.Текст =
	"ВЫБРАТЬ ТаблицаНоменклатуры.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ &ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|; //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	|ВЫБРАТЬ ТаблицаНоменклатуры.Номенклатура
	|СГРУППИРОВАТЬ ПО ТаблицаНоменклатуры.Номенклатура ИМЕЮЩИЕ Количество(*) > 1";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		Если ЗначениеЗаполнено(Выборка.Номенклатура) Тогда

			НайденныеСтрокиНоменклатуры = ТЧНоменклатура.НайтиСтроки(Новый Структура("Номенклатура",
				Выборка.Номенклатура));
			НайденныеСтрокиНоменклатуры.Удалить(0); // Первую запись оставляем
			Для Каждого СтрокаНоменклатуры Из НайденныеСтрокиНоменклатуры Цикл

				Если Объект.ПоказыватьХарактеристики Тогда

					УдалитьСтрокиХарактеристикПоКлючуСвязи(СтрокаНоменклатуры.КлючСвязи, ТЧХарактеристики);

				КонецЕсли;

				ТЧНоменклатура.Удалить(СтрокаНоменклатуры);

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УдалитьДублиХарактеристики()
	
	Если НЕ ТЧХарактеристики.Количество() Тогда
		Возврат
	КонецЕсли;
	
	ТаблицаХарактеристики = РеквизитФормыВЗначение("ТЧХарактеристики", Тип("ТаблицаЗначений"));

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаХарактеристики", ТаблицаХарактеристики);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	&ТаблицаХарактеристики КАК ТаблицаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика КАК Характеристика
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНоменклатуры.Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(*) > 1";

	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрыПоиска = Новый Структура("Номенклатура, Характеристика");
	
	Пока Выборка.Следующий() Цикл

		Если ЗначениеЗаполнено(Выборка.Номенклатура) И ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			
			ЗаполнитьЗначенияСвойств(ПараметрыПоиска, Выборка);
			
			НайденныеСтрокиНоменклатуры = ТЧХарактеристики.НайтиСтроки(ПараметрыПоиска);
			НайденныеСтрокиНоменклатуры.Удалить(0); // Первую запись оставляем
			
			Для Каждого СтрокаНоменклатуры Из НайденныеСтрокиНоменклатуры Цикл
				ТЧХарактеристики.Удалить(СтрокаНоменклатуры);
			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснованиеЗавершение(ВыбранноеОснование, Параметры) Экспорт

	Если ВыбранноеОснование = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Объект.ДокументОснование = ВыбранноеОснование;
	Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(
		ВыбранноеОснование);
	Модифицированность = Истина;

	ЗаполнитьПоОснованиюНачало();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюНачало()

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения, НСтр("ru = 'Заполнить запасы по выбранному основанию?'"), РежимДиалогаВопрос.ДаНет, 0);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументу(ДокументОснование)

	ТЧНоменклатура.Очистить();
	ТЧХарактеристики.Очистить();
	Объект.Запасы.Очистить();
	Документ = РеквизитФормыВЗначение("Объект");

	МассивВыбранныхВидовЦен = Новый Массив;
	ЗаполнитьМассивВыбранныхВидовЦен(МассивВыбранныхВидовЦен, КэшЗначений.ВыбранныеВидыЦен);
	
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("Основание", ДокументОснование);
	СтруктураЗаполнения.Вставить("ВидыЦен", МассивВыбранныхВидовЦен);
	
	Документ.Заполнить(СтруктураЗаполнения);
	ЗначениеВРеквизитФормы(Документ, "Объект");

	Если Объект.Запасы.Количество() > 0 Тогда
		
		Запасы = Объект.Запасы.Выгрузить();
		ЦенообразованиеСервер.ИзменитьЦенуВТаблицеПоПорогамСрабатывания(Запасы, КэшЗначений.ВыбранныеВидыЦен,
			Объект.Дата);
		Объект.Запасы.Загрузить(Запасы);

		ИзменитьСоставРеквизитовИЭлементовТабличнойЧасти("ТЧНоменклатура");
		ИзменитьСоставРеквизитовИЭлементовТабличнойЧасти("ТЧХарактеристики");
		ЗаполнитьТаблицуНоменклатурыИХарактеристикПоДокументу(Истина, Ложь);
		КэшЗначений.ОтключенныеВидыЦен.Очистить();

	КонецЕсли;
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт

	УстановитьВидимостьИнформационногоПоля();
	Ответ = Результат;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		ТекущаяСтраницаВидыЦен = Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВидыЦен;

		Если КэшЗначений.ПервоеПереключениеНаОсновании Тогда
			КэшЗначений.ПервоеПереключениеНаОсновании = Не ТекущаяСтраницаВидыЦен;
		КонецЕсли;

		Возврат;
	КонецЕсли;

	ЗаполнитьПоДокументу(Объект.ДокументОснование);
	НачатьЗаполнениеЦенПоДаннымИБНаКлиенте();
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаТовары;
	ИзменитьЭлементыФормыПоВыбраннымВидамЦен();

	ОбновитьКоличествоЗаписейПоДокументу();

КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеДатыНаСервере()

	ПерезаполнитьТабличнуюЧастьПоОчередиНаДатуДокумента();
	КэшЗначений.Вставить("КурсыВалютДокумента", КурсыВалютДокумента(Объект.Дата));

КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьТабличнуюЧастьПоОчередиНаДатуДокумента()

	Если Объект.РасчетИзВидаЦен Тогда
		ВидЦеныРасчетная = ПолучитьПервуюРасчетнуюЦенуИзВыбранных();
		Если ВидЦеныРасчетная <> Неопределено Тогда
			Объект.Запасы.Очистить();
			Документы.УстановкаЦенНоменклатуры.ЗаполнитьЗапасыПоОчередиРасчета(Объект.Запасы, ВидЦеныРасчетная,
				Объект.ПоказыватьХарактеристики, Объект.Дата);
			ЗаполнитьТаблицуНоменклатурыИХарактеристикПоДокументу(Истина, Ложь);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьПервуюРасчетнуюЦенуИзВыбранных()

	Для Каждого БазовыйВидЦены Из КэшЗначений.ВыбранныеВидыЦен Цикл
		Для Каждого РасчетныйВидЦены Из БазовыйВидЦены.Значение Цикл
			Возврат РасчетныйВидЦены;
		КонецЦикла;
	КонецЦикла;

КонецФункции

&НаСервере
Процедура ПоместитьЦеныВТабличнуюЧасть(ТекущийОбъект)

	ТекущийОбъект.Запасы.Очистить();
	МассивВыбранныхВидовЦен = Новый Массив;

	ЗаполнитьМассивВыбранныхВидовЦен(МассивВыбранныхВидовЦен, КэшЗначений.ВыбранныеВидыЦен);

	ТекущийОбъект.Запасы.Загрузить(СформироватьТаблицуЗапасовПоТабличнымЧастям(ТекущийОбъект, МассивВыбранныхВидовЦен));

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОписаниеПараметровКомпоновщикаНастроек(АдресХранилищаНастройкиКомпоновщика, СтруктураСтроки)

	Возврат ЦенообразованиеСервер.ПолучитьОписаниеПараметровКомпоновщикаНастроек(СтруктураСтроки,
		АдресХранилищаНастройкиКомпоновщика);

КонецФункции

&НаСервере
Функция ПолучитьСтруктуруПараметровВидовЦенСКД()

	Структура = Новый Структура;
	Для Каждого СтрокаТипВидовЦен Из ВидыЦен.ПолучитьЭлементы() Цикл

		Для Каждого СтрокаВидЦены Из СтрокаТипВидовЦен.ПолучитьЭлементы() Цикл

			Если СтрокаВидЦены.ВидЦен.ТипВидаЦен = КэшЗначений.ПроизвольныйЗапрос И СтрокаВидЦены.Использование Тогда

				СтруктураНастройки = Новый Структура;
				СтруктураНастройки.Вставить("АдресСхемыКомпоновкиДанных", СтрокаВидЦены.АдресСхемыКомпоновкиДанных);
				СтруктураНастройки.Вставить("АдресНастроекСхемыКомпоновкиДанных",
					СтрокаВидЦены.АдресНастроекСхемыКомпоновкиДанных);
				СтруктураНастройки.Вставить("ВидЦен", СтрокаВидЦены.ВидЦен);
				СтруктураНастройки.Вставить("СхемаКомпоновкиДанных", ПолучитьИзВременногоХранилища(
					СтрокаВидЦены.АдресСхемыКомпоновкиДанных));
				СтруктураНастройки.Вставить("НастройкиСхемыКомпоновкиДанных", ПолучитьИзВременногоХранилища(
					СтрокаВидЦены.АдресНастроекСхемыКомпоновкиДанных));

				СтруктураНастройки.Вставить("ДокументОснование", Объект.ДокументОснование);
				СтруктураНастройки.Вставить("ДатаДокумента", Объект.Дата);
				СтруктураНастройки.Вставить("ЭтоВводНаОсновании", ЗначениеЗаполнено(Объект.ДокументОснование));

				Структура.Вставить(СтрокаВидЦены.ВидЦен.ИдентификаторФормул, СтруктураНастройки);

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;
	Возврат Структура;

КонецФункции

&НаСервере
Функция СформироватьТаблицуЗапасовПоТабличнымЧастям(ТекущийОбъект, МассивСтрокЦен)

	Возврат Документы.УстановкаЦенНоменклатуры.СформироватьТаблицуЗапасовПоТабличнымЧастям(ТекущийОбъект,
		ТЧНоменклатура, ТЧХарактеристики, МассивСтрокЦен);

КонецФункции

&НаКлиенте
Процедура РедактироватьНастройки(Команда)

	ТекущиеДанные = Элементы.ВидыЦен.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда

		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Редактировать настройки невозможно. Не выбран вид цены'"));
		Возврат;

	КонецЕсли;

	Если Не ЗначениеЗаполнено(ТекущиеДанные.АдресСхемыКомпоновкиДанных) Тогда

		ПоказатьПредупреждение(Неопределено, НСтр(
			"ru = 'Редактировать настройки схемы компоновки можно только для выбранных видов цен с типом ""Произвольный запрос""'"));
		Возврат;

	КонецЕсли;

	Если Не ТекущиеДанные.Использование Тогда

		ПоказатьПредупреждение(Неопределено, НСтр(
			"ru = 'Редактировать настройки схемы компоновки можно только для выбранных видов цен'"));
		Возврат;

	КонецЕсли;
	
	// Открыть редактор настроек схемы компоновки данных
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = НСтр("ru = 'Настройте параметры для вида цены ""%1""'");
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = СтрЗаменить(ЗаголовокФормыНастройкиСхемыКомпоновкиДанных, "%1",
		ТекущиеДанные.Представление);

	АдресНастроекСхемыКомпоновкиДанных = ТекущиеДанные.АдресНастроекСхемыКомпоновкиДанных;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПомещатьНастройкиВСхемуКомпоновкиДанных", Ложь);
	ПараметрыФормы.Вставить("РедактироватьСхемуКомпоновкиДанных", Ложь);
	ПараметрыФормы.Вставить("ЗагрузитьСхемуИзФайла", Ложь);
	ПараметрыФормы.Вставить("НастраиватьУсловноеОформление", Ложь);
	ПараметрыФормы.Вставить("НастраиватьВыбор", Ложь);
	ПараметрыФормы.Вставить("НастраиватьПорядок", Ложь);
	ПараметрыФормы.Вставить("НастраиватьПараметры", Истина);
	ПараметрыФормы.Вставить("НастраиватьОтбор", Истина);
	ПараметрыФормы.Вставить("АдресСхемыКомпоновкиДанных", ТекущиеДанные.АдресСхемыКомпоновкиДанных);
	ПараметрыФормы.Вставить("АдресНастроекКомпоновкиДанных", АдресНастроекСхемыКомпоновкиДанных);
	ПараметрыФормы.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыФормы.Вставить("Заголовок", ЗаголовокФормыНастройкиСхемыКомпоновкиДанных);

	ТекущиеДанные = Новый Структура("ТекущиеДанные", ТекущиеДанные);
	Оповещение = Новый ОписаниеОповещения("РедактироватьНастройкиЗавершение", ЭтотОбъект, ТекущиеДанные);
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;

	ОткрытьФорму("ОбщаяФорма.УпрощеннаяНастройкаСхемыКомпоновкиДанных", ПараметрыФормы, , , , , Оповещение,
		РежимОткрытия);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт

	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;

	АдресХранилищаНастройкиКомпоновщика = Результат;

	Если АдресХранилищаНастройкиКомпоновщика <> Неопределено Тогда

		ТекущиеДанные.АдресНастроекСхемыКомпоновкиДанных = АдресХранилищаНастройкиКомпоновщика;
		СтруктураСтроки = Новый Структура("ТребуетсяЗаполнениеПараметра", ТекущиеДанные.ТребуетсяЗаполнениеПараметра);
		ТекущиеДанные.Параметры = ПолучитьОписаниеПараметровКомпоновщикаНастроек(АдресХранилищаНастройкиКомпоновщика,
			СтруктураСтроки);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураСтроки);
		Модифицированность = Истина;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ВидЦеныВыбран(ЗависимаяЦена)

	ДеревоВидовЦен = РеквизитФормыВЗначение("ВидыЦен");
	Найден = ДеревоВидовЦен.Строки.Найти(ЗависимаяЦена, "ВидЦен", Истина);
	Если Найден <> Неопределено И Найден.Использование Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ДобавитьВКэшОтключенныеВидыЦенПоРодителю(СтрокаБазовогоВидаЦен, КэшЗначений)

	ПодчиненныеВидыЦен = СтрокаБазовогоВидаЦен.ПолучитьЭлементы();

	Для Каждого ПодчиненныйВидЦен Из ПодчиненныеВидыЦен Цикл

		Если ПодчиненныйВидЦен.Использование Тогда

			Отключена = КэшЗначений.ОтключенныеВидыЦен.Найти(ПодчиненныйВидЦен.ВидЦен);
			Если Отключена <> Неопределено Тогда

				КэшЗначений.ОтключенныеВидыЦен.Удалить(Отключена);

			КонецЕсли;

		Иначе

			Отключена = КэшЗначений.ОтключенныеВидыЦен.Найти(ПодчиненныйВидЦен.ВидЦен);
			Если Отключена = Неопределено Тогда

				КэшЗначений.ОтключенныеВидыЦен.Добавить(ПодчиненныйВидЦен.ВидЦен);

			КонецЕсли;

		КонецЕсли;

		ДобавитьВКэшОтключенныеВидыЦенПоРодителю(ПодчиненныйВидЦен, КэшЗначений);
	
	КонецЦикла

КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитыИЭлементыТабличнойЧастиПоВидуЦен(ИмяТабличнойЧасти, ВыбранныйВидЦенСоответствие)

	ВыбранныйВидЦен		= ВыбранныйВидЦенСоответствие.Ключ;
	ПодчиненныеВидыЦен	= ВыбранныйВидЦенСоответствие.Значение;
	
	ОбновитьПараметрыОкругленияВКэше(ВыбранныйВидЦен);

	ПутьРеквизита		= ИмяТабличнойЧасти;
	ПрефиксРеквизитов	= ИмяТабличнойЧасти + ВыбранныйВидЦен.ИдентификаторФормул;
	ТипЧислоПлюс 		= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный));
	ТипЧислоЛюбое 		= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой));
	ТипБулево			= Новый ОписаниеТипов("Булево");
	ТипВалюта			= Новый ОписаниеТипов("СправочникСсылка.Валюты");

	МассивТипов			= Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ЕдиницыИзмерения"));
	МассивТипов.Добавить(Тип("СправочникСсылка.КлассификаторЕдиницИзмерения"));

	ТипЕдИзмерения		= Новый ОписаниеТипов(МассивТипов);

	МассивРеквизитов 	= Новый Массив;

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
	СтруктураПараметров.Вставить("МассивРеквизитов", МассивРеквизитов);
	СтруктураПараметров.Вставить("ПрефиксРеквизитов", ПрефиксРеквизитов);
	СтруктураПараметров.Вставить("ПутьРеквизита", ПутьРеквизита);
	СтруктураПараметров.Вставить("ТипБулево", ТипБулево);
	СтруктураПараметров.Вставить("ТипЕдИзмерения", ТипЕдИзмерения);
	СтруктураПараметров.Вставить("ТипЧислоЛюбое", ТипЧислоЛюбое);
	СтруктураПараметров.Вставить("ТипЧислоПлюс", ТипЧислоПлюс);
	СтруктураПараметров.Вставить("ТипВалюта", ТипВалюта);

	ДобавитьРеквизитыТабличнойЧастиОсновногоВидаЦенПоВидуЦен(СтруктураПараметров);

	Если МассивРеквизитов.Количество() > 0 Тогда

		КэшЗначений.НовыеВидыЦен.Добавить(ВыбранныйВидЦен);
		ИзменитьРеквизиты(МассивРеквизитов);

		ДобавитьЭлементыТабличнойЧастиОсновногоВидаЦенПоВидуЦен(ВыбранныйВидЦен, ИмяТабличнойЧасти, ПрефиксРеквизитов,
			ПутьРеквизита);

	КонецЕсли;

	Если ПодчиненныеВидыЦен.Количество() > 0 Тогда

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
		СтруктураПараметров.Вставить("МассивРеквизитов", МассивРеквизитов);
		СтруктураПараметров.Вставить("ПутьРеквизита", ПутьРеквизита);
		СтруктураПараметров.Вставить("ТипЕдИзмерения", ТипЕдИзмерения);
		СтруктураПараметров.Вставить("ТипЧислоЛюбое", ТипЧислоЛюбое);
		СтруктураПараметров.Вставить("ТипЧислоПлюс", ТипЧислоПлюс);
		СтруктураПараметров.Вставить("ТипБулево", ТипБулево);
		СтруктураПараметров.Вставить("ТипВалюта", ТипВалюта);

		ДобавитьРеквизитыИЭлементыТабличнойЧастиЗависимыхВидовЦенПоВидуЦен(ПодчиненныеВидыЦен, СтруктураПараметров);

	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьМассивВыбранныхВидовЦен(МассивВыбранныхВидовЦен, ВыбранныеВидыЦен)

	Для Каждого СтрокаВидаЦен Из ВыбранныеВидыЦен Цикл

		Если МассивВыбранныхВидовЦен.Найти(СтрокаВидаЦен.Ключ) = Неопределено Тогда
			МассивВыбранныхВидовЦен.Добавить(СтрокаВидаЦен.Ключ);
		КонецЕсли;

		ЗаполнитьМассивВыбранныхВидовЦен(МассивВыбранныхВидовЦен, СтрокаВидаЦен.Значение);

	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКартинкуДляВидаЦены(ВидЦен)

	Если ВидЦен.РассчитыватьАвтоматически Тогда
		Возврат БиблиотекаКартинок.СпособыЗаданияЦенЗадаватьАвтоматически;
	КонецЕсли;

	Если ВидЦен.ТипВидаЦен = Перечисления.ТипыВидовЦен.Статический Тогда
		Возврат БиблиотекаКартинок.СпособыЗаданияЦенЗадаватьВручную;
	КонецЕсли;

	Если ВидЦен.ТипВидаЦен = Перечисления.ТипыВидовЦен.ДинамическийПроцент Или ВидЦен.ТипВидаЦен
		= Перечисления.ТипыВидовЦен.ДинамическийФормула Тогда
		Возврат БиблиотекаКартинок.СпособыЗаданияЦенРассчитыватьПоДругимВидамЦен;
	КонецЕсли;

	Если ВидЦен.ТипВидаЦен = Перечисления.ТипыВидовЦен.ПроизвольныйЗапрос Тогда
		Возврат БиблиотекаКартинок.СпособыЗаданияЦенСКД;
	КонецЕсли;

	Если ВидЦен.ТипВидаЦен = Перечисления.ТипыВидовЦен.Расширение Тогда
		Возврат БиблиотекаКартинок.СпособыЗаданияЦенРасширение;
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция ВыбраныЦеныПоступленияСКДИЗаполненоОснование(ВыбранныеВидыЦен, ЗаполненоОснование)

	Результат = Ложь;

	Для Каждого ВыбранныйВидЦены Из ВыбранныеВидыЦен Цикл

		Если ЗаполненоОснование И ВыбранныйВидЦены.Ключ.ТипВидаЦен = ПредопределенноеЗначение(
			"Перечисление.ТипыВидовЦен.ПроизвольныйЗапрос") И ВыбранныйВидЦены.Ключ.СхемаКомпоновкиДанных
			= "ЦеныПоступленияПредопределенный" Тогда

			Возврат Истина;

		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ВыборТипаОснованияЗавершение(ВыбранноеИмяФормы, Параметры) Экспорт

	Если ВыбранноеИмяФормы <> Неопределено Тогда

		СтруктураПараметровОтбора = Новый Структура;

		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
		ОткрытьФорму(ВыбранноеИмяФормы.Значение, СтруктураПараметровОтбора, ЭтотОбъект, , , , ОповещениеОЗакрытии);

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция НетВидовЦенСАвтовыборомВводаНаОсновании()

	Возврат Не Справочники.ВидыЦен.ЕстьВидыЦенСАвтовыборомВводаНаОсновании();

КонецФункции

&НаКлиенте
Процедура ВидыЦенИспользованиеПриИзмененииПоДаннымТекущейСтроки(Знач ДанныеТекущейСтроки)

	Перем ЗависимыеЭлементы, Зависимый, Использование, РодительСтроки;

	Если ДанныеТекущейСтроки <> Неопределено Тогда

		Использование = ДанныеТекущейСтроки.Использование;

		Если Использование Тогда

			РодительСтроки = ДанныеТекущейСтроки.ПолучитьРодителя();
			Если РодительСтроки <> Неопределено Тогда

				УстановитьИспользованиеВидаЦенВверхПоДереву(РодительСтроки, Использование);

			КонецЕсли;

		КонецЕсли;

		ЗависимыеЭлементы = ДанныеТекущейСтроки.ПолучитьЭлементы();
		Если ЗависимыеЭлементы <> Неопределено Тогда

			Для Каждого Зависимый Из ЗависимыеЭлементы Цикл

				УстановитьИспользованиеВидаЦенВнизПоДереву(Зависимый, Использование);

			КонецЦикла;

		КонецЕсли;

		ИзменитьИспользованиеВидаЦеныФормулойВДереве(ДанныеТекущейСтроки, Использование);

	КонецЕсли;
	
	КэшЗначений.ИзмененСоставКолонокВидовЦен = Истина; 
	
	ЗаполнитьКэшЗначенийВидамиЦен(КэшЗначений);

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВидыЦенДляВводаНаОсновании()

	Для Каждого ГруппаВидовЦен Из ВидыЦен.ПолучитьЭлементы() Цикл

		Для Каждого ВидЦенТекущаяСтрока Из ГруппаВидовЦен.ПолучитьЭлементы() Цикл

			Если ВидЦенТекущаяСтрока.ЗаполнятьИзОснования Тогда

				ВидЦенТекущаяСтрока.Использование = Истина;
				ВидыЦенИспользованиеПриИзмененииПоДаннымТекущейСтроки(ВидЦенТекущаяСтрока);

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнформацияЗакрытьНаСервере()

	Элементы.ГруппаПанельИнформации.Видимость = Ложь;
	СохранитьНастройкиИнформационногоПоля();

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФлагЗаполнятьИзОснованияДляВидаЦены(ВидЦен, Значение)

	Для Каждого СтрокаВидовЦен Из ВидыЦен.ПолучитьЭлементы() Цикл

		Для Каждого СтрокаВидаЦены Из СтрокаВидовЦен.ПолучитьЭлементы() Цикл

			Если СтрокаВидаЦены.ВидЦен = ВидЦен Тогда

				СтрокаВидаЦены.ЗаполнятьИзОснования = Значение;
				Прервать;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УдалитьДублиНоменклатурыПередДобавлением(ТаблицаНоменклатуры, ТаблицаХарактеристик)

	ТаблицаФормы = РеквизитФормыВЗначение("ТЧНоменклатура");

	ИндексТекущейСтроки = ТаблицаНоменклатуры.Количество() - 1;
	Пока ИндексТекущейСтроки >= 0 Цикл

		СтрокаТаблицы = ТаблицаНоменклатуры[ИндексТекущейСтроки];

		Если ТаблицаФормы.Найти(СтрокаТаблицы.Номенклатура, "Номенклатура") <> Неопределено Тогда

			Отбор = Новый Структура("КлючСвязи", СтрокаТаблицы.КлючСвязи);
			СтрокиХарактеристик = ТаблицаХарактеристик.НайтиСтроки(Отбор);

			Для Каждого СтрокаХарактеристик Из СтрокиХарактеристик Цикл

				ТаблицаХарактеристик.Удалить(СтрокаХарактеристик);

			КонецЦикла;

			Сообщение = СтрШаблон(НСтр("ru = 'Номенклатура %1 уже есть в документе и не может быть добавлена'"),
				СтрокаТаблицы.Номенклатура);
			ОбщегоНазначения.СообщитьПользователю(Сообщение);

			ТаблицаНоменклатуры.Удалить(СтрокаТаблицы);

		КонецЕсли;

		ИндексТекущейСтроки = ИндексТекущейСтроки - 1;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьИнформационногоПоля(ПоказатьБезусловно = Ложь)

	ВидимостьПанелиИнформации = КэшЗначений.НетВидовЦенСАвтовыборомВводаНаОсновании И (ЗначениеЗаполнено(
		Объект.ДокументОснование) Или ПоказатьБезусловно) И КэшЗначений.ОтображатьИнформационноеПоле;

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПанельИнформации", "Видимость",
		ВидимостьПанелиИнформации);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьОбщиеРеквизитыДанныхНоменклатуры(Номенклатура, РеквизитыНоменклатуры, СтруктураРеквизитов)

	Для Каждого ЭлементРеквизита Из СтруктураРеквизитов Цикл

		НоваяСтрока = РеквизитыНоменклатуры.Добавить();
		ЗначениеРеквизита = ?(Не ЗначениеЗаполнено(ЭлементРеквизита.Ключ), НСтр("ru='<не заполнено>'"), Строка(
			Номенклатура[ЭлементРеквизита.Ключ]));
		НоваяСтрока.ПредставлениеРеквизита = СтрШаблон("%1: ", ЭлементРеквизита.Значение);
		НоваяСтрока.ЗначениеРеквизита = ЗначениеРеквизита;
		НоваяСтрока.ИмяРеквизитаОбъекта = ЭлементРеквизита.Ключ;

	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьИнформациюПоДаннымНоменклатуры(Знач Номенклатура, РеквизитыНоменклатуры)

	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Артикул", НСтр("ru='Артикул'"));
	ДобавитьОбщиеРеквизитыДанныхНоменклатуры(Номенклатура, РеквизитыНоменклатуры, СтруктураРеквизитов);

	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") И Номенклатура.ПроверятьЗаполнениеХарактеристики Тогда

		НоваяСтрока = РеквизитыНоменклатуры.Добавить();
		ЗначениеРеквизита = Строка(Номенклатура.ПроверятьЗаполнениеХарактеристики);
		ПредставлениеРеквизита = НСтр("ru='Обязательное заполнение характеристики'");
		ЗначениеРеквизита = НСтр("ru='Цена без характеристики записана не будет'");
		НоваяСтрока.ПредставлениеРеквизита = ПредставлениеРеквизита;
		НоваяСтрока.ЗначениеРеквизита = ЗначениеРеквизита;
		НоваяСтрока.ИмяРеквизитаОбъекта = "ПроверятьЗаполнениеХарактеристики";
		НоваяСтрока.ОформлениеРеквизита = Истина;

	КонецЕсли;

	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ЦеноваяГруппа", НСтр("ru='Ценовая группа'"));
	СтруктураРеквизитов.Вставить("КатегорияНоменклатуры", НСтр("ru='Категория'"));
	СтруктураРеквизитов.Вставить("Родитель", НСтр("ru='В группе'"));
	СтруктураРеквизитов.Вставить("Код", НСтр("ru='Код'"));
	ДобавитьОбщиеРеквизитыДанныхНоменклатуры(Номенклатура, РеквизитыНоменклатуры, СтруктураРеквизитов);

	НоваяСтрока = РеквизитыНоменклатуры.Добавить();
	ЗначениеРеквизита = ?(Не ЗначениеЗаполнено(Номенклатура.Комментарий), НСтр("ru='<не заполнено>'"),
		Номенклатура.Комментарий);
	НоваяСтрока.ПредставлениеРеквизита = СтрШаблон("%1 ", НСтр("ru='Описание:'"));
	НоваяСтрока.ЗначениеРеквизита = ЗначениеРеквизита;
	НоваяСтрока.ИмяРеквизитаОбъекта = "Комментарий";

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьИнформациюПоДаннымХарактеристики(Знач Номенклатура, Знач Характеристика, РеквизитыНоменклатуры,
	ВыбранныеВидыЦен, ИдентификаторыВыбранныхВидовЦен)

	ИдентификаторыВыбранныхВидовЦен = ИдентификаторыВыбранныхВидовЦен(ВыбранныеВидыЦен);
	РеквизитыНоменклатуры.Очистить();

	НоваяСтрока = РеквизитыНоменклатуры.Добавить();
	ЗначениеРеквизита = ?(Не ЗначениеЗаполнено(Характеристика.Артикул), НСтр("ru='<не заполнено>'"),
		Характеристика.Артикул);
	НоваяСтрока.ПредставлениеРеквизита = СтрШаблон("%1 ", НСтр("ru='Артикул характеристики:'"));
	НоваяСтрока.ЗначениеРеквизита = ЗначениеРеквизита;
	НоваяСтрока.ИмяРеквизитаОбъекта = "ХарактеристикаАртикул";

	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ЦеноваяГруппа", НСтр("ru='Ценовая группа'"));
	СтруктураРеквизитов.Вставить("КатегорияНоменклатуры", НСтр("ru='Категория'"));
	СтруктураРеквизитов.Вставить("Родитель", НСтр("ru='В группе'"));
	СтруктураРеквизитов.Вставить("Код", НСтр("ru='Код'"));

	ДобавитьОбщиеРеквизитыДанныхНоменклатуры(Номенклатура, РеквизитыНоменклатуры, СтруктураРеквизитов);

	НоваяСтрока = РеквизитыНоменклатуры.Добавить();
	ЗначениеРеквизита = ?(Не ЗначениеЗаполнено(Номенклатура.Комментарий), НСтр("ru='<не заполнено>'"),
		Номенклатура.Комментарий);
	НоваяСтрока.ПредставлениеРеквизита = СтрШаблон("%1 ", НСтр("ru='Описание:'"));
	НоваяСтрока.ЗначениеРеквизита = ЗначениеРеквизита;
	НоваяСтрока.ИмяРеквизитаОбъекта = "Комментарий";

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДанныеПоЦенамВРеквизитыНоменклатуры(КлючСвязи, ТаблицаРеквизиты, ИдентификаторыВыбранныхВидовЦен)

	Отбор = Новый Структура("КлючСвязи", КлючСвязи);
	Строки = ТЧНоменклатура.НайтиСтроки(Отбор);
	Если Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СтрокаНоменклатуры = Строки[0];
	НоваяСтрока = ТаблицаРеквизиты.Добавить();
	НоваяСтрока.ПредставлениеРеквизита = НСтр("ru='Цены без характеристик'");

	Для Каждого Идентификатор Из ИдентификаторыВыбранныхВидовЦен Цикл
		НоваяСтрока = ТаблицаРеквизиты.Добавить();
		НоваяСтрока.ПредставлениеРеквизита = Идентификатор.Значение.Наименование;
		НоваяСтрока.ЗначениеРеквизита = СтрокаНоменклатуры["ТЧНоменклатура" + Идентификатор.Представление
			+ "_ЦенаНовая"];
		НоваяСтрока.ТипВидаЦен = Идентификатор.Значение.ТипВидаЦен;
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ИдентификаторыВыбранныхВидовЦен(ВыбранныеВидыЦен, ИдентификаторыДокумента = Неопределено)

	ПерваяИтерация = Ложь;
	Если ИдентификаторыДокумента = Неопределено Тогда

		ИдентификаторыДокумента = Новый Структура;
		СортированныеИдентификаторы = ПолучитьМассивСортировкиКолонок(ВыбранныеВидыЦен);
		ПерваяИтерация = Истина;

	КонецЕсли;

	Для Каждого Элемент Из ВыбранныеВидыЦен Цикл

		СтруктураВидаЦены = Новый Структура("Наименование, ТипВидаЦен", Элемент.Ключ.Наименование,
			Элемент.Ключ.ТипВидаЦен);
		ИдентификаторыДокумента.Вставить(Элемент.Ключ.ИдентификаторФормул, СтруктураВидаЦены);
		ИдентификаторыВыбранныхВидовЦен(Элемент.Значение, ИдентификаторыДокумента);

	КонецЦикла;

	Если ПерваяИтерация Тогда

		Результат = Новый СписокЗначений;
		Для Каждого Идентификатор Из СортированныеИдентификаторы Цикл

			Если ИдентификаторыДокумента.Свойство(Идентификатор) Тогда

				Результат.Добавить(ИдентификаторыДокумента[Идентификатор], Идентификатор);

			КонецЕсли;

		КонецЦикла;
		Возврат Результат;

	КонецЕсли;

	Возврат ИдентификаторыДокумента;

КонецФункции

&НаКлиенте
Процедура ОбновитьРеквизитыНоменклатуры(ТекущиеДанные)

	ТекстЗаголовка = СтрШаблон("%1", ТекущиеДанные.Номенклатура);
	Если СтрДлина(ТекстЗаголовка) > 35 Тогда

		ТекстЗаголовка = Лев(ТекстЗаголовка, 32) + "...";

	КонецЕсли;

	Элементы.ГруппаРеквизитыТабличнаяЧастьНоменклатура.Заголовок = ТекстЗаголовка;

	ТаблицаРеквизиты = РеквизитыНоменклатуры;
	ОбновитьИнформациюПоДаннымНоменклатуры(ТекущиеДанные.Номенклатура, ТаблицаРеквизиты);
	Для Каждого Строка Из ТаблицаРеквизиты Цикл

		ЗаполнитьЗначенияСвойств(РеквизитыНоменклатуры.Добавить(), Строка);

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыХарактеристики(ТекущиеДанные)

	ТекстЗаголовка = СтрШаблон("%1", ТекущиеДанные.Номенклатура);
	Если СтрДлина(ТекстЗаголовка) > 30 Тогда

		ТекстЗаголовка = Лев(ТекстЗаголовка, 27) + "...";

	КонецЕсли;

	Элементы.ГруппаРеквизитыТабличнаяЧастьХарактеристики.Заголовок = ТекстЗаголовка;

	ТаблицаРеквизиты = РеквизитыНоменклатуры;

	ИдентификаторыВыбранныхВидовЦен = Неопределено;
	ОбновитьИнформациюПоДаннымХарактеристики(ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика,
		ТаблицаРеквизиты, КэшЗначений.ВыбранныеВидыЦен, ИдентификаторыВыбранныхВидовЦен);

	ДобавитьДанныеПоЦенамВРеквизитыНоменклатуры(ТекущиеДанные.КлючСвязи, ТаблицаРеквизиты,
		ИдентификаторыВыбранныхВидовЦен);

	РеквизитыНоменклатуры.Очистить();
	Для Каждого Строка Из ТаблицаРеквизиты Цикл

		ЗаполнитьЗначенияСвойств(РеквизитыНоменклатуры.Добавить(), Строка);

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПравойПанели()

	РеквизитыНоменклатуры.Очистить();
	Если Элементы.СтраницыПредварительныйРезультат.ТекущаяСтраница = Элементы.СтраницаПР_Номенклатура Тогда

		СтруктураИменЭлементов = Новый Структура;
		СтруктураИменЭлементов.Вставить("ПраваяПанель", "ПраваяПанельТабличнаяЧастьНоменклатура");
		СтруктураИменЭлементов.Вставить("ДекорацияРазвернутьОтборы", "ДекорацияРазвернутьОтборыНоменклатура");
		СтруктураИменЭлементов.Вставить("ФильтрыНастройкиИДопИнфо", "ГруппаРеквизитыТабличнаяЧастьНоменклатура");
		РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, ПраваяПанельВидимость, СтруктураИменЭлементов);

		ТекущиеДанные = Элементы.ТЧНоменклатура.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено И ПраваяПанельВидимость Тогда

			ОбновитьРеквизитыНоменклатуры(ТекущиеДанные);

		КонецЕсли;

	ИначеЕсли Элементы.СтраницыПредварительныйРезультат.ТекущаяСтраница = Элементы.СтраницаПР_Характеристики Тогда

		СтруктураИменЭлементов = Новый Структура;
		СтруктураИменЭлементов.Вставить("ПраваяПанель", "ПраваяПанельТабличнаяЧастьХарактеристики");
		СтруктураИменЭлементов.Вставить("ДекорацияРазвернутьОтборы", "ДекорацияРазвернутьОтборыХарактеристики");
		СтруктураИменЭлементов.Вставить("ФильтрыНастройкиИДопИнфо", "ГруппаРеквизитыТабличнаяЧастьХарактеристики");
		РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, ПраваяПанельВидимость, СтруктураИменЭлементов);

		ТекущиеДанные = Элементы.ТЧХарактеристики.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено И ПраваяПанельВидимость Тогда

			ОбновитьРеквизитыХарактеристики(ТекущиеДанные);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#Область ПересчетКолонок

&НаКлиенте
Процедура ИзменитьКолонку(ВидРасчета)

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КэшЗначений", КэшЗначений);
	ПараметрыОткрытия.Вставить("ВидРасчета", ВидРасчета);
	ПараметрыОткрытия.Вставить("ДатаДокумента", Объект.Дата);

	Если ТипЗнч(ТекущийЭлемент) = Тип("ТаблицаФормы") И ТипЗнч(Элементы[ТекущийЭлемент.Имя].ТекущийЭлемент) = Тип(
		"ПолеФормы") Тогда

		ПараметрыОткрытия.Вставить("ТекущаяКолонка", Элементы[ТекущийЭлемент.Имя].ТекущийЭлемент.Имя);

	КонецЕсли;

	ОбработкаОписание = Новый ОписаниеОповещения("РассчитатьНовыеЦеныПоУказаннымУсловиям", ЭтотОбъект);
	ОткрытьФорму("Документ.УстановкаЦенНоменклатуры.Форма.ФормаИзмененияЦен", ПараметрыОткрытия, ЭтотОбъект, , , ,
		ОбработкаОписание);
	Модифицированность = Истина;

КонецПроцедуры

#КонецОбласти

&НаСервере
Функция НачатьРасчетНовыхЦенНаСервере(Результат)

	СтруктураПараметров = Новый Структура;
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураПараметров, Результат);

	ТаблицаФормыНоменклатуры = РеквизитФормыВЗначение("ТЧНоменклатура", Тип("ТаблицаЗначений"));
	ТаблицаФормыХарактеристик = РеквизитФормыВЗначение("ТЧХарактеристики", Тип("ТаблицаЗначений"));

	СоздатьКопиюТекущихДанных(ТаблицаФормыНоменклатуры.Скопировать(), КэшЗначений.ДоИзмененияНоменклатура);
	СоздатьКопиюТекущихДанных(ТаблицаФормыХарактеристик.Скопировать(), КэшЗначений.ДоИзмененияХарактеристики);

	ИндексыСтрок = Новый Массив;
	Для Каждого ИдентификаторСтроки Из Элементы.ТЧНоменклатура.ВыделенныеСтроки Цикл

		ИндексыСтрок.Добавить(ТЧНоменклатура.Индекс(ТЧНоменклатура.НайтиПоИдентификатору(ИдентификаторСтроки)));

	КонецЦикла;

	СтруктураПараметров.Вставить("ВыделенныеСтрокиНоменклатуры", ИндексыСтрок);
	СтруктураПараметров.Вставить("ТЧНоменклатура", ТаблицаФормыНоменклатуры);
	СтруктураПараметров.Вставить("ТЧХарактеристики", ТаблицаФормыХарактеристик);
	СтруктураПараметров.Вставить("КэшЗначений", КэшЗначений);
	СтруктураПараметров.Вставить("Период", Объект.Дата);
	СтруктураПараметров.Вставить("ВключаяХарактеристики", Объект.УстанавливатьХарактеристикамБезЦен);
	СтруктураПараметров.Вставить("ПоказыватьХарактеристики", Объект.ПоказыватьХарактеристики);
	СтруктураПараметров.Вставить("Автор", Объект.Автор);
	СтруктураПараметров.Вставить("КурсыВалютДокумента", КэшЗначений.КурсыВалютДокумента);

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);

	Если Результат.ВариантИзменения = "Сумма" 
		Или Результат.ВариантИзменения = "Процент" 
		Или Результат.ВариантИзменения = "Округление" 
		Или Результат.ВариантИзменения = "Очистить"
		Или Результат.ВариантИзменения = "Валюта" Тогда

		Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
			"Документы.УстановкаЦенНоменклатуры.ПересчетПоПростымПравилам", СтруктураПараметров);

	ИначеЕсли Результат.ВариантИзменения = "Формула" Тогда

		Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
			"Документы.УстановкаЦенНоменклатуры.ПересчетПоФормуле", СтруктураПараметров);

	КонецЕсли;

КонецФункции

&НаСервере
Функция НачатьЗаполнениеДокументаНаСервереПриОткрытии()

	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ТЧНоменклатура", РеквизитФормыВЗначение("ТЧНоменклатура"));
	ПараметрыПроцедуры.Вставить("ТЧХарактеристики", РеквизитФормыВЗначение("ТЧХарактеристики"));
	ПараметрыПроцедуры.Вставить("МаксимальныйКлючСвязи", КэшЗначений.МаксимальныйКлючСвязи);
	ПараметрыПроцедуры.Вставить("ВыбранныеВидыЦен", КэшЗначений.ВыбранныеВидыЦен);
	ПараметрыПроцедуры.Вставить("ПоказыватьХарактеристики", Объект.ПоказыватьХарактеристики);
	ПараметрыПроцедуры.Вставить("ПоказыватьНедействительныеХарактеристики",
		Объект.ПоказыватьНедействительныеХарактеристики);
	ПараметрыПроцедуры.Вставить("Период", Объект.Дата);
	ПараметрыПроцедуры.Вставить("УстанавливатьХарактеристикамБезЦен", Объект.УстанавливатьХарактеристикамБезЦен);
	ПараметрыПроцедуры.Вставить("Автор", Объект.Автор);
	ПараметрыПроцедуры.Вставить("Запасы", Объект.Запасы.Выгрузить());
	ПараметрыПроцедуры.Вставить("ПараметрыВидовЦенСКД", ПолучитьСтруктуруПараметровВидовЦенСКД());
	ПараметрыПроцедуры.Вставить("ПересчитыватьЦены", Ложь);	
	ПараметрыПроцедуры.Вставить("Сортировать", Ложь);
	ПараметрыПроцедуры.Вставить("ЭтоНовый", Не ЗначениеЗаполнено(Объект.Ссылка));
	ПараметрыПроцедуры.Вставить("КурсыВалютДокумента", КэшЗначений.КурсыВалютДокумента);
	ПараметрыПроцедуры.Вставить("ФОУчетВалютныхОпераций", КэшЗначений.ФОУчетВалютныхОпераций);

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"Документы.УстановкаЦенНоменклатуры.ЗаполнитьДокументПриОткрытии", ПараметрыПроцедуры);

КонецФункции

&НаСервере
Функция НачатьДобавлениеНоменклатурыНаСервере(МассивНоменклатуры)

	СообщитьОНаборах(МассивНоменклатуры);

	АдресВременногоХранилища = Документы.УстановкаЦенНоменклатуры.РазобратьМассивНоменклатуры(МассивНоменклатуры,
		Объект.ПоказыватьХарактеристики, Объект.ПоказыватьНедействительныеХарактеристики);

	Если Не ЭтоАдресВременногоХранилища(АдресВременногоХранилища) Тогда

		Возврат Неопределено;

	КонецЕсли;

	СтруктураТаблицДанных = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);

	Если Не ЗначениеЗаполнено(СтруктураТаблицДанных) Тогда

		Возврат Неопределено;

	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТабличнаяЧастьОтменитьИзменение",
		"Доступность", Ложь);

	ПараметрыКопирования = ПараметрыКопированияТаблицы(СтруктураТаблицДанных);
	ПараметрыКопирования.Вставить("ТаблицаФормыНоменклатуры", РеквизитФормыВЗначение("ТЧНоменклатура"));
	ПараметрыКопирования.Вставить("ТаблицаФормыХарактеристик", РеквизитФормыВЗначение("ТЧХарактеристики"));
	ПараметрыКопирования.Вставить("СтруктураТаблицДанных", СтруктураТаблицДанных);
	ПараметрыКопирования.Вставить("Сортировать", Ложь);
	ПараметрыКопирования.Вставить("ЭтоНовый", Не ЗначениеЗаполнено(Объект.Ссылка));

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);

	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"Документы.УстановкаЦенНоменклатуры.ДобавитьНоменклатуруВТабличнуюЧасть", ПараметрыКопирования);

КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьЭлементовСтраницыВидыЦен()

	ЕстьДанные = (ТЧНоменклатура.Количество() > 0);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоказыватьХарактеристики", "Доступность",
		Не ЕстьДанные);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияПредупреждение", "Видимость",
		ЕстьДанные);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаПоказыватьХарактеристикиДополнительно", "Доступность", Не ЕстьДанные);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоказыватьДействующуюЦену", "Видимость",
		Не Объект.РасчетИзВидаЦен);

КонецПроцедуры

&НаСервере
Функция ПолучитьИдентификаторБазовогоВидаЦены(ВидЦен)

	ИдентификаторЗависимого = ВидЦен.ИдентификаторФормул;
	Для Каждого ВыбранныйВидЦен Из КэшЗначений.ВыбранныеВидыЦен Цикл

		Для Каждого ПодчиненныйВидЦен Из ВыбранныйВидЦен.Значение Цикл

			Если ПодчиненныйВидЦен.Ключ.ИдентификаторФормул = ИдентификаторЗависимого Тогда

				Возврат ВыбранныйВидЦен.Ключ.ИдентификаторФормул;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;
	Возврат Неопределено;

КонецФункции

&НаСервере
Функция ЗаполнитьКэшЗначенийПодчиненнымиВидамиЦен(КэшЗначений, Знач СтрокаБазовогоВидаЦен)

	Перем Найдено, ПодчиненныеВидыЦен, СтрокаВидаЦен, СтрокиПодчиненныхВидовЦен;

	СоответствиеВидовЦен		= Новый Соответствие;
	СтрокиПодчиненныхВидовЦен = СтрокаБазовогоВидаЦен.ПолучитьЭлементы();
	Для Каждого СтрокаВидаЦен Из СтрокиПодчиненныхВидовЦен Цикл

		ПодчиненныеВидыЦен = ЗаполнитьКэшЗначенийПодчиненнымиВидамиЦен(КэшЗначений, СтрокаВидаЦен);

		Если СтрокаВидаЦен.Использование Или ПодчиненныеВидыЦен.Количество() > 0 Тогда

			СтрокаВидаЦен.Использование = Истина;
			СоответствиеВидовЦен.Вставить(СтрокаВидаЦен.ВидЦен, ПодчиненныеВидыЦен);

			Найдено = КэшЗначений.ОтключенныеВидыЦен.Найти(СтрокаВидаЦен.ВидЦен);
			Если Найдено <> Неопределено Тогда
				КэшЗначений.ОтключенныеВидыЦен.Удалить(Найдено);
			КонецЕсли;

		Иначе

			Найдено = КэшЗначений.ОтключенныеВидыЦен.Найти(СтрокаВидаЦен.ВидЦен);
			Если Найдено = Неопределено Тогда
				КэшЗначений.ОтключенныеВидыЦен.Добавить(СтрокаВидаЦен.ВидЦен);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;
	Возврат СоответствиеВидовЦен;

КонецФункции

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Штрихкод = ?(Результат = Неопределено, СокрЛП(ДополнительныеПараметры.Штрихкод), СокрЛП(Результат));

	Если Не ПустаяСтрока(Штрихкод) Тогда

		Штрихкоды = Новый Массив;
		Штрихкоды.Добавить(Штрихкод);
		ДанныеШтрихкодов = МенеджерОборудованияУНФКлиент.ПреобразоватьДанныеСоСканераВМассив(Штрихкоды);
		ОбработатьПолучениеШтрихкода(ДанныеШтрихкодов);

	КонецЕсли;

	ОбновитьКоличествоЗаписейПоДокументу();

КонецПроцедуры

#Область ДлительныеОперации

#Область ОбщееДлительныеОперации
&НаКлиенте
Процедура ПроверитьНеобходимостьПодключенияОбработчикаОжидания()

	Если КэшЗначений.ПараметрыДлительнойОперации.РезультатДлОперации = Неопределено Тогда

		Возврат;

	КонецЕсли;

	Если КэшЗначений.ПараметрыДлительнойОперации.РезультатДлОперации.Статус <> "Выполняется" Тогда

		ОбработатьРезультатВыполненияФоновогоЗадания(КэшЗначений.ПараметрыДлительнойОперации.РезультатДлОперации,
			Неопределено);
		Возврат;

	КонецЕсли;

	Обработчик = Новый ОписаниеОповещения("ОбработатьРезультатВыполненияФоновогоЗадания", ЭтотОбъект, Неопределено);

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения		= КэшЗначений.ПараметрыДлительнойОперации.ТекстСообщенияДлительнойОперации;
	ПараметрыОжидания.ВыводитьОкноОжидания	= Истина;

	ДлительныеОперацииКлиент.ОжидатьЗавершение(КэшЗначений.ПараметрыДлительнойОперации.РезультатДлОперации, Обработчик,
		ПараметрыОжидания);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатВыполненияФоновогоЗадания(РезультатДлОперации, ДополнительныеПараметры) Экспорт

	Если РезультатДлОперации = Неопределено Тогда

		Возврат;

	КонецЕсли;

	КэшЗначений.ПараметрыДлительнойОперации.РезультатДлОперации = РезультатДлОперации;
	КэшЗначений.ПараметрыДлительнойОперации.ЗаданиеЗапущено		= Ложь;

	Если КэшЗначений.ПараметрыДлительнойОперации.РезультатДлОперации.Статус = "Выполнено" Тогда

		ЗагрузитьРезультатДлительнойОперации();

	ИначеЕсли КэшЗначений.ПараметрыДлительнойОперации.РезультатДлОперации.Статус = "Ошибка" Тогда

		ПоказатьОповещениеПользователя(
			КэшЗначений.ПараметрыДлительнойОперации.РезультатДлОперации.КраткоеПредставлениеОшибки, , НСтр(
			"ru ='Изменение цен номенклатуры'"));

	КонецЕсли;

	КэшЗначений.ПараметрыДлительнойОперации.РезультатДлОперации = Неопределено;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатДлительнойОперации()

	СтруктураКоллекцийДанныхФормы = ПолучитьИзВременногоХранилища(
		КэшЗначений.ПараметрыДлительнойОперации.РезультатДлОперации.АдресРезультата);

	РезультатЗагрузки = Неопределено;
	Если КэшЗначений.ПараметрыДлительнойОперации.Свойство("РезультатЗагрузки", РезультатЗагрузки) Тогда
		Если РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" И СтруктураКоллекцийДанныхФормы
			<> Неопределено Тогда

			ЗагрузитьДанныеВТабличноеПолеЗапасы(СтруктураКоллекцийДанныхФормы.ТаблицаСопоставленияДанных);
			КэшЗначений.ПараметрыДлительнойОперации.Удалить("РезультатЗагрузки");

		КонецЕсли;

	Иначе

		ЗначениеВРеквизитФормы(СтруктураКоллекцийДанныхФормы.ТаблицаФормыНоменклатуры, "ТЧНоменклатура");
		ЗначениеВРеквизитФормы(СтруктураКоллекцийДанныхФормы.ТаблицаФормыХарактеристик, "ТЧХарактеристики");

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РаботаСДанными

&НаСервере
Функция ЦеныХарактеристикПоНоменклатуреРавны(КлючСвязи, Идентификатор)

	МассивСтрокХарактеристик = ТЧХарактеристики.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи));
	
	ЦеныРавны = Истина;
	Если МассивСтрокХарактеристик.Количество() = 0 Тогда
		Возврат ЦеныРавны;
	КонецЕсли;

	ИмяЦенаНовая = Идентификатор + "_ЦенаНовая";
	ПерваяЦена = МассивСтрокХарактеристик[0][ИмяЦенаНовая];
	Для Каждого Строка Из МассивСтрокХарактеристик Цикл

		Если ПерваяЦена <> Строка[ИмяЦенаНовая] Тогда
			Возврат Ложь;
		КонецЕсли;

	КонецЦикла;

	Возврат ЦеныРавны;

КонецФункции

&НаСервере
Процедура ДобавитьНоменклатуру(СтруктураТаблицДанных, ДополнительныеПараметры)

	УдалитьДублиНоменклатурыПередДобавлением(СтруктураТаблицДанных.ТаблицаНоменклатуры,
		СтруктураТаблицДанных.ТаблицаХарактеристик);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТабличнаяЧастьОтменитьИзменение",
		"Доступность", Ложь);

	ПараметрыКопирования = ПараметрыКопированияТаблицы(СтруктураТаблицДанных);
	ПараметрыКопирования.Вставить("ПересчитыватьЦены", ДополнительныеПараметры.ПересчитыватьЦены);
	ПараметрыКопирования.Вставить("Сортировать", ДополнительныеПараметры.Сортировать);
	ПараметрыКопирования.Вставить("КурсыВалютДокумента", КэшЗначений.КурсыВалютДокумента);
	ПараметрыКопирования.Вставить("ЭтоНовый", Не ЗначениеЗаполнено(Объект.Ссылка));

	Если СтруктураТаблицДанных.ТаблицаНоменклатуры.Количество() > 0 Тогда

		ПараметрыКопирования.ИмяТабличнойЧасти = "ТЧНоменклатура";
		ТаблицаФормыНоменклатуры = РеквизитФормыВЗначение("ТЧНоменклатура", Тип("ТаблицаЗначений"));

		СоздатьКопиюТекущихДанных(ТаблицаФормыНоменклатуры.Скопировать(), КэшЗначений.ДоИзмененияНоменклатура);
		Документы.УстановкаЦенНоменклатуры.КопироватьДобавлениемСтрокТаблицЗначений(
			СтруктураТаблицДанных.ТаблицаНоменклатуры, ТаблицаФормыНоменклатуры, ПараметрыКопирования);
		ЗначениеВРеквизитФормы(ТаблицаФормыНоменклатуры, "ТЧНоменклатура");
		
		Если РежимОстаткиИРезервы Тогда
			МассивВыбранныхСтрок = СтруктураТаблицДанных.ТаблицаНоменклатуры.ВыгрузитьКолонку("Номенклатура");
			ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере(МассивВыбранныхСтрок);
		КонецЕсли;

		Если СтруктураТаблицДанных.ТаблицаХарактеристик.Количество() > 0 Тогда

			ПараметрыКопирования.ИмяТабличнойЧасти = "ТЧХарактеристики";
			ТаблицаФормыХарактеристик = РеквизитФормыВЗначение("ТЧХарактеристики", Тип("ТаблицаЗначений"));

			СоздатьКопиюТекущихДанных(ТаблицаФормыХарактеристик.Скопировать(), КэшЗначений.ДоИзмененияХарактеристики);
			Документы.УстановкаЦенНоменклатуры.КопироватьДобавлениемСтрокТаблицЗначений(
				СтруктураТаблицДанных.ТаблицаХарактеристик, ТаблицаФормыХарактеристик, ПараметрыКопирования);
			ЗначениеВРеквизитФормы(ТаблицаФормыХарактеристик, "ТЧХарактеристики");

		КонецЕсли;

		КэшЗначений.МаксимальныйКлючСвязи = ПараметрыКопирования.МаксимальныйКлючСвязиПослеДобавления;

	КонецЕсли;

	ТоварыКоличествоСтрок = ТЧНоменклатура.Количество();

КонецПроцедуры

&НаСервере
Процедура ДобавитьПроизвольнуюНоменклатуру(МассивНоменклатуры)

	СообщитьОНаборах(МассивНоменклатуры);

	АдресВременногоХранилища = Документы.УстановкаЦенНоменклатуры.РазобратьМассивНоменклатуры(МассивНоменклатуры,
		Объект.ПоказыватьХарактеристики, Объект.ПоказыватьНедействительныеХарактеристики);

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПересчитыватьЦены", Истина);
	ДополнительныеПараметры.Вставить("Сортировать", Ложь);
	ДополнительныеПараметры.Вставить("ЭтоНовый", Не ЗначениеЗаполнено(Объект.Ссылка));

	Результат = Новый Структура;
	Результат.Вставить("ВыборПроизведен", Истина);
	Результат.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);

	ОбработатьРезультатЗаполненияНаСервере(Результат, ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ОтразитьНовуюЦенуВХарактеристиках(ИдентификаторВидаЦен, ЦенаНовая, КлючСвязи, ЦенаДоИзменения,
	ДобавлятьПрефикс = Истина)

	СтрокиХарактеристик = ТЧХарактеристики.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи));

	Если ДобавлятьПрефикс Тогда
		Идентификатор = "ТЧХарактеристики" + ИдентификаторВидаЦен;
	Иначе
		Идентификатор = ИдентификаторВидаЦен;
	КонецЕсли;

	ЦеныХарактеристикРавны = ЦеныХарактеристикПоНоменклатуреРавны(КлючСвязи, Идентификатор);

	Для Каждого ПодчиненнаяСтрока Из СтрокиХарактеристик Цикл

		Если ПодчиненнаяСтрока[Идентификатор + "_ЦенаНовая"] = 0 Или ЦеныХарактеристикРавны Тогда
			
			ИмяКолонкиДельта = Идентификатор + "_Дельта";
			ИмяКолонкиДельтаКартинка = Идентификатор + "_ДельтаКартинка";
			
			ПодчиненнаяСтрока[Идентификатор + "_ЦенаНовая"] = ЦенаНовая;
			ПодчиненнаяСтрока[ИмяКолонкиДельта] = ПодчиненнаяСтрока[Идентификатор + "_ЦенаНовая"]
				- ПодчиненнаяСтрока[Идентификатор + "_ЦенаДо"];

			Если ПодчиненнаяСтрока[ИмяКолонкиДельта] > 0 Тогда
				ПодчиненнаяСтрока[ИмяКолонкиДельтаКартинка] = 0;
			ИначеЕсли ПодчиненнаяСтрока[ИмяКолонкиДельта] < 0 Тогда
				ПодчиненнаяСтрока[ИмяКолонкиДельтаКартинка] = 1;
			Иначе
				ПодчиненнаяСтрока[ИмяКолонкиДельтаКартинка] = -1;
			КонецЕсли;

			УстановитьЗначенияЗависимыхЦенПоСтроке(ПодчиненнаяСтрока.ПолучитьИдентификатор(), Идентификатор,
				"ТЧХарактеристики");

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОтразитьНовуюВалютуВХарактеристиках(ИдентификаторВидаЦен, ЦенаНовая, КлючСвязи, НоваяВалюта)

	СтрокиХарактеристик = ТЧХарактеристики.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи));
	Идентификатор = "ТЧХарактеристики" + ИдентификаторВидаЦен;

	ЦеныХарактеристикРавны = ЦеныХарактеристикПоНоменклатуреРавны(КлючСвязи, Идентификатор);

	Для Каждого ПодчиненнаяСтрока Из СтрокиХарактеристик Цикл

		Если ПодчиненнаяСтрока[Идентификатор + "_ЦенаНовая"] = 0 Или ЦеныХарактеристикРавны Тогда

			ПодчиненнаяСтрока[Идентификатор + "_ВалютаНовая"] = НоваяВалюта;
			ПодчиненнаяСтрока[Идентификатор + "_ВалютаДельта"] = НоваяВалюта;
			УстановитьЗначенияЗависимыхЦенПоСтроке(ПодчиненнаяСтрока.ПолучитьИдентификатор(), Идентификатор,
				"ТЧХарактеристики");

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОтразитьИзменениеНовойЦены(ДанныеТекущейСтроки, Идентификатор, ИмяТабличнойЧасти)

	Если ДанныеТекущейСтроки.Свойство(ИмяТабличнойЧасти + Идентификатор + "_Дельта") 
		И ДанныеТекущейСтроки.Свойство(ИмяТабличнойЧасти + Идентификатор + "_ЦенаНовая") 
		И ДанныеТекущейСтроки.Свойство(ИмяТабличнойЧасти + Идентификатор + "_ЦенаДо") Тогда

		ПересчитатьДельтуВПолеНаКлиенте(ДанныеТекущейСтроки, ИмяТабличнойЧасти + Идентификатор);
		ОтразитьИзменениеЗависимыхЦенПоСтроке(ДанныеТекущейСтроки, Идентификатор, ИмяТабличнойЧасти);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтразитьЕдиницуИзмеренийВХарактеристиках(ИдентификаторВидаЦен, ЕдиницаИзмерения, КлючСвязи)

	СтрокиХарактеристик = ТЧХарактеристики.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи));
	Идентификатор = "ТЧХарактеристики" + ИдентификаторВидаЦен;

	Для Каждого ПодчиненнаяСтрока Из СтрокиХарактеристик Цикл

		Если ПодчиненнаяСтрока[Идентификатор + "_ЦенаНовая"] = 0 Или ПодчиненнаяСтрока[Идентификатор + "_ЦенаДо"] = 0
			Или ЦенаДоИзменения = ПодчиненнаяСтрока[Идентификатор + "_ЦенаНовая"] Тогда

			ПодчиненнаяСтрока[Идентификатор + "_ЕдИзм"] = ЕдиницаИзмерения;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область РаботаСРеквизитамиИЭлементами

&НаСервере
Процедура ИзменитьВидимостьПодчиненныхЭлементовТабличнойЧасти(Знач ИмяТабличнойЧасти, Знач ПараметрВидимости,
	Знач ПараметрВидимостиПодчиненный, Знач ПодчиненныеВидыЦен)

	Перем ЗависимаяЦена, ЗначениеКлюча, ИмяЭлемента;

	Для Каждого ЗависимаяЦена Из ПодчиненныеВидыЦен Цикл

		ИмяЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрВидимостиПодчиненный.Значение,
			ИмяТабличнойЧасти, ЗависимаяЦена.Ключ.ИдентификаторФормул);
		ЗначениеКлюча = Объект[ПараметрВидимостиПодчиненный.Ключ] И ВидЦеныВыбран(ЗависимаяЦена.Ключ)
			И Объект[ПараметрВидимости.Ключ];
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, "Видимость", ЗначениеКлюча);

		ИзменитьВидимостьПодчиненныхЭлементовТабличнойЧасти(ИмяТабличнойЧасти, ПараметрВидимости,
			ПараметрВидимостиПодчиненный, ЗависимаяЦена.Значение);

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитыТабличнойЧастиОсновногоВидаЦенПоВидуЦен(СтруктураПараметров)

	Перем ИмяРеквизитаДельта, ИмяРеквизитаДо, ИмяРеквизитаЕдИзмерения, ИмяРеквизитаЦенаНовая, ИмяРеквизитаЦенуИзменили, РеквизитДельта, РеквизитЕдИзмерения, РеквизитЦенаДо, РеквизитЦенаНовая, РеквизитЦенуИзменили;

	ИмяТабличнойЧасти 	= СтруктураПараметров.ИмяТабличнойЧасти;
	МассивРеквизитов 	= СтруктураПараметров.МассивРеквизитов;
	ПрефиксРеквизитов 	= СтруктураПараметров.ПрефиксРеквизитов;
	ПутьРеквизита 		= СтруктураПараметров.ПутьРеквизита;
	ТипБулево 			= СтруктураПараметров.ТипБулево;
	ТипЕдИзмерения 		= СтруктураПараметров.ТипЕдИзмерения;
	ТипЧислоЛюбое 		= СтруктураПараметров.ТипЧислоЛюбое;
	ТипЧислоПлюс 		= СтруктураПараметров.ТипЧислоПлюс;
	ТипВалюта			= СтруктураПараметров.ТипВалюта;

	ИмяРеквизитаДо = ПрефиксРеквизитов + "_ЦенаДо";
	Если Не РеквизитДобавленРаннее(ИмяТабличнойЧасти, ИмяРеквизитаДо) Тогда

		РеквизитЦенаДо = Новый РеквизитФормы(ИмяРеквизитаДо, ТипЧислоПлюс, ПутьРеквизита, НСтр("ru ='Цена старая'"));
		МассивРеквизитов.Добавить(РеквизитЦенаДо);

	КонецЕсли;

	ИмяРеквизитаВалютаДо = ПрефиксРеквизитов + "_ВалютаДо";
	Если Не РеквизитДобавленРаннее(ИмяТабличнойЧасти, ИмяРеквизитаВалютаДо) Тогда

		РеквизитВалюта	= Новый РеквизитФормы(ИмяРеквизитаВалютаДо, ТипВалюта, ПутьРеквизита, НСтр("ru ='Валюта до'"));
		МассивРеквизитов.Добавить(РеквизитВалюта);

	КонецЕсли;
	
	ИмяРеквизитаВалютаВидимость = ПрефиксРеквизитов + "_ВалютаВидимость";
	Если Не РеквизитДобавленРаннее(ИмяТабличнойЧасти, ИмяРеквизитаВалютаВидимость) Тогда

		РеквизитВалюта	= Новый РеквизитФормы(ИмяРеквизитаВалютаВидимость, ТипБулево, ПутьРеквизита, НСтр(
			"ru ='Валюта видимость'"));
		МассивРеквизитов.Добавить(РеквизитВалюта);

	КонецЕсли;

	ИмяРеквизитаДельта = ПрефиксРеквизитов + "_Дельта";
	Если Не РеквизитДобавленРаннее(ИмяТабличнойЧасти, ИмяРеквизитаДельта) Тогда

		РеквизитДельта = Новый РеквизитФормы(ИмяРеквизитаДельта, ТипЧислоЛюбое, ПутьРеквизита, "Δ");
		МассивРеквизитов.Добавить(РеквизитДельта);

	КонецЕсли;

	ИмяРеквизитаЦенаНовая = ПрефиксРеквизитов + "_ЦенаНовая";
	Если Не РеквизитДобавленРаннее(ИмяТабличнойЧасти, ИмяРеквизитаЦенаНовая) Тогда

		РеквизитЦенаНовая	= Новый РеквизитФормы(ИмяРеквизитаЦенаНовая, ТипЧислоПлюс, ПутьРеквизита, НСтр(
			"ru ='Цена новая'"));
		МассивРеквизитов.Добавить(РеквизитЦенаНовая);

	КонецЕсли;

	ИмяРеквизитаЦенуИзменили = ПрефиксРеквизитов + "_ЦенуИзменили";
	Если Не РеквизитДобавленРаннее(ИмяТабличнойЧасти, ИмяРеквизитаЦенуИзменили) Тогда

		РеквизитЦенуИзменили= Новый РеквизитФормы(ИмяРеквизитаЦенуИзменили, ТипБулево, ПутьРеквизита, НСтр(
			"ru ='_Служебный'"));
		МассивРеквизитов.Добавить(РеквизитЦенуИзменили);

	КонецЕсли;

	ИмяРеквизитаЕдИзмерения = ПрефиксРеквизитов + "_ЕдИзм";
	Если Не РеквизитДобавленРаннее(ИмяТабличнойЧасти, ИмяРеквизитаЕдИзмерения) Тогда

		РеквизитЕдИзмерения	= Новый РеквизитФормы(ИмяРеквизитаЕдИзмерения, ТипЕдИзмерения, ПутьРеквизита, НСтр(
			"ru ='Ед. изм.'"));
		МассивРеквизитов.Добавить(РеквизитЕдИзмерения);

	КонецЕсли;

	ИмяРеквизитаВалютаНовая = ПрефиксРеквизитов + "_ВалютаНовая";
	Если Не РеквизитДобавленРаннее(ИмяТабличнойЧасти, ИмяРеквизитаВалютаНовая) Тогда

		РеквизитВалюта	= Новый РеквизитФормы(ИмяРеквизитаВалютаНовая, ТипВалюта, ПутьРеквизита, НСтр("ru ='Валюта'"));
		МассивРеквизитов.Добавить(РеквизитВалюта);

	КонецЕсли;

	ИмяРеквизитаВалютаДельта = ПрефиксРеквизитов + "_ВалютаДельта";
	Если Не РеквизитДобавленРаннее(ИмяТабличнойЧасти, ИмяРеквизитаВалютаДельта) Тогда

		РеквизитВалюта	= Новый РеквизитФормы(ИмяРеквизитаВалютаДельта, ТипВалюта, ПутьРеквизита, НСтр(
			"ru ='Валюта'"));
		МассивРеквизитов.Добавить(РеквизитВалюта);

	КонецЕсли;
	
	ИмяРеквизитаДельтаКартинка = ПрефиксРеквизитов + "_ДельтаКартинка";
	Если Не РеквизитДобавленРаннее(ИмяТабличнойЧасти, ИмяРеквизитаДельтаКартинка) Тогда

		РеквизитДельтаКартинка	= Новый РеквизитФормы(ИмяРеквизитаДельтаКартинка, ТипЧислоЛюбое, ПутьРеквизита, НСтр(
			"ru ='Дельта картинка'"));
		МассивРеквизитов.Добавить(РеквизитДельтаКартинка);

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыЗависимогоВидаЦенТабличнойЧастиПоВидуЦен(Знач СтруктураПараметров)
	
	ШиринаГруппы = 10;
	
	ЗависимаяЦена = СтруктураПараметров.ЗависимаяЦена;
	ИмяТабличнойЧасти = СтруктураПараметров.ИмяТабличнойЧасти;
	ИмяРеквизитаДельта = СтруктураПараметров.ИмяРеквизитаДельта;
	ИмяРеквизитаЦенаДо = СтруктураПараметров.ИмяРеквизитаЦенаДо;
	ИмяРеквизитаЕдиницаИзмерения = СтруктураПараметров.ИмяРеквизитаЕдиницаИзмерения;
	ИмяРеквизитаЦенаНовая = СтруктураПараметров.ИмяРеквизитаЦенаНовая;
	ИмяРеквизитаВалютаНовая = СтруктураПараметров.ИмяРеквизитаВалютаНовая;
	ИмяРеквизитаВалютаДо = СтруктураПараметров.ИмяРеквизитаВалютаДо;
	ИмяРеквизитаВалютаДельта = СтруктураПараметров.ИмяРеквизитаВалютаДельта;
	ИмяРеквизитаДельтаКартинка = СтруктураПараметров.ИмяРеквизитаДельтаКартинка;
	
	ПутьРеквизита = СтруктураПараметров.ПутьРеквизита;
	
	ПрефиксРеквизитов = ПутьРеквизита + ЗависимаяЦена.ИдентификаторФормул;
	
	НесколькоВалютДляЦен = ЗависимаяЦена.НесколькоВалютДляЦен;
	
	// группа для вида цены
	ГруппаЦены = Элементы.Добавить(ПутьРеквизита + ЗависимаяЦена.ИдентификаторФормул, 
		Тип("ГруппаФормы"), Элементы[ИмяТабличнойЧасти]);
	ВалютаЗаголовка = "";
	Если КэшЗначений.ФОУчетВалютныхОпераций И НЕ НесколькоВалютДляЦен Тогда
		ВалютаЗаголовка = ", " + ЗависимаяЦена.ВалютаЦены.СимвольноеПредставление;
	КонецЕсли;
	ГруппаЦены.Заголовок = ЗависимаяЦена.Наименование + ВалютаЗаголовка;
	ГруппаЦены.Группировка = ГруппировкаКолонок.Горизонтальная;
	ГруппаЦены.ОтображатьВШапке= Истина;
	ГруппаЦены.КартинкаШапки = ПолучитьКартинкуДляВидаЦены(ЗависимаяЦена);
	Если ЗависимаяЦена.РассчитыватьАвтоматически Тогда
		ГруппаЦены.Подсказка = НСтр("ru = 'Цены будут рассчитаны автоматически заданием'");
		ГруппаЦены.КартинкаШапки = БиблиотекаКартинок.СпособыЗаданияЦенЗадаватьАвтоматически;
	КонецЕсли;
	
	// группа цены до
	ГруппаЦеныДо = Элементы.Добавить(ПрефиксРеквизитов + "_ГруппаЦеныДо", Тип("ГруппаФормы"), ГруппаЦены);
	ГруппаЦеныДо.Группировка = ГруппировкаКолонок.ВЯчейке;
	ГруппаЦеныДо.Ширина = ШиринаГруппы;
	ГруппаЦеныДо.ОтображатьВШапке = Ложь;
	ГруппаЦеныДо.ОтображатьЗаголовок = Ложь;
	ГруппаЦеныДо.РастягиватьПоГоризонтали = Ложь;
	
	// цена до
	ПолноеИмяРеквизитаЦенаДо = ПутьРеквизита + ИмяРеквизитаЦенаДо;
	ЭлементЦенаДо = Элементы.Добавить(ПолноеИмяРеквизитаЦенаДо, Тип("ПолеФормы"), ГруппаЦеныДо);
	ЭлементЦенаДо.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветРамки;
	ЭлементЦенаДо.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементЦенаДо.ПутьКДанным = ПутьРеквизита + "." + ПолноеИмяРеквизитаЦенаДо;
	ЭлементЦенаДо.Ширина = 8;
	ЭлементЦенаДо.ТолькоПросмотр = Истина;
	ЭлементЦенаДо.ЦветТекста = ЦветаСтиля.НедоступныеДанныеЦвет;
	ЭлементЦенаДо.ПропускатьПриВводе = Истина;
	ЭлементЦенаДо.Видимость = Истина;
	ЭлементЦенаДо.ЦветФона = WebЦвета.ЦветокБелый;
	Если ЗависимаяЦена.РассчитыватьАвтоматически Тогда
		ЭлементЦенаДо.ЦветТекста = ЦветаСтиля.НедоступныеДанныеЦвет;
		ЭлементЦенаДо.ЦветТекстаЗаголовка = ЦветаСтиля.НедоступныеДанныеЦвет;
		ЭлементЦенаДо.Подсказка = НСтр("ru = 'Цены будут рассчитаны автоматически заданием'");
	КонецЕсли;
	
	// валюта до
	ПолноеИмяРеквизитаВалютаДо = ПутьРеквизита + ИмяРеквизитаВалютаДо;
	ЭлементВалютаДо = Элементы.Добавить(ПолноеИмяРеквизитаВалютаДо, Тип("ПолеФормы"), ГруппаЦеныДо);
	ЭлементВалютаДо.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементВалютаДо.ПутьКДанным	= ПутьРеквизита + "." + ПрефиксРеквизитов + "_ВалютаДо.СимвольноеПредставление";
	ЭлементВалютаДо.Ширина = 2;
	ЭлементВалютаДо.Видимость = Истина;
	ЭлементВалютаДо.ЦветФона		= WebЦвета.АкварельноСиний;
	ЭлементВалютаДо.РастягиватьПоГоризонтали = Ложь;
	ЭлементВалютаДо.ОтображатьВШапке = Ложь;
	ЭлементВалютаДо.КнопкаОткрытия = Ложь;
	
	// группа дельта
	ГруппаДельта = Элементы.Добавить(ПрефиксРеквизитов + "_ГруппаДельта", Тип("ГруппаФормы"), ГруппаЦены);
	ГруппаДельта.Группировка = ГруппировкаКолонок.ВЯчейке;
	ГруппаДельта.Ширина = ШиринаГруппы;
	ГруппаДельта.ОтображатьВШапке = Ложь;
	ГруппаДельта.ОтображатьЗаголовок = Ложь;
	ГруппаДельта.РастягиватьПоГоризонтали = Ложь;
	
	// картинка дельта
	ПолноеИмяРеквизитаДельтаКартинка = ПутьРеквизита + ИмяРеквизитаДельтаКартинка;
	ЭлементДельтаКартинка = Элементы.Добавить(ПолноеИмяРеквизитаДельтаКартинка, Тип("ПолеФормы"), ГруппаДельта);
	ЭлементДельтаКартинка.Вид = ВидПоляФормы.ПолеКартинки;
	ЭлементДельтаКартинка.КартинкаЗначений = БиблиотекаКартинок.КоллекцияИзменениеЦен;
	ЭлементДельтаКартинка.ПутьКДанным = ПутьРеквизита + "." + ПолноеИмяРеквизитаДельтаКартинка;
	ЭлементДельтаКартинка.ОтображатьВШапке = Ложь;
	ЭлементДельтаКартинка.Ширина = 2;
	
	// цена дельта
	ПолноеИмяРеквизитаЦенаДельта = ПутьРеквизита + ИмяРеквизитаДельта;
	ЭлементЦенаДельта = Элементы.Добавить(ПолноеИмяРеквизитаЦенаДельта, Тип("ПолеФормы"), ГруппаДельта);
	ЭлементЦенаДельта.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветРамки;
	ЭлементЦенаДельта.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементЦенаДельта.ПутьКДанным = ПутьРеквизита + "." + ПолноеИмяРеквизитаЦенаДельта;
	ЭлементЦенаДельта.Ширина = 6;
	ЭлементЦенаДельта.ТолькоПросмотр = Истина;
	ЭлементЦенаДельта.ЦветТекста = ЦветаСтиля.НедоступныеДанныеЦвет;
	ЭлементЦенаДельта.ПропускатьПриВводе = Истина;
	ЭлементЦенаДельта.ЦветФона = WebЦвета.ЦветокБелый;
	Если ЗависимаяЦена.РассчитыватьАвтоматически Тогда
		ЭлементЦенаДельта.ЦветТекста = ЦветаСтиля.НедоступныеДанныеЦвет;
		ЭлементЦенаДельта.ЦветТекстаЗаголовка = ЦветаСтиля.НедоступныеДанныеЦвет;
		ЭлементЦенаДельта.Подсказка = НСтр("ru = 'Цены будут рассчитаны автоматически заданием'");
	КонецЕсли;
	
	// валюта дельта
	ПолноеИмяРеквизитаВалютаДельта = ПутьРеквизита + ИмяРеквизитаВалютаДельта;
	ЭлементВалютаДельта = Элементы.Добавить(ПолноеИмяРеквизитаВалютаДельта, Тип("ПолеФормы"), ГруппаДельта);
	ЭлементВалютаДельта.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементВалютаДельта.ПутьКДанным = ПутьРеквизита + "." + ПрефиксРеквизитов + "_ВалютаДельта.СимвольноеПредставление";
	ЭлементВалютаДельта.Ширина = 2;
	ЭлементВалютаДельта.Видимость = НесколькоВалютДляЦен И КэшЗначений.ФОУчетВалютныхОпераций;
	ЭлементВалютаДельта.РастягиватьПоГоризонтали = Ложь;
	ЭлементВалютаДельта.ОтображатьВШапке = Ложь;
	ЭлементВалютаДельта.КнопкаОткрытия = Ложь;
	
	// группа новых цен
	ГруппаЦеныНовая = Элементы.Добавить(ПрефиксРеквизитов + "_ГруппаЦеныНовые", Тип("ГруппаФормы"), ГруппаЦены);
	Если НесколькоВалютДляЦен Тогда
		ГруппаЦеныНовая.Группировка = ГруппировкаКолонок.Горизонтальная;
	Иначе
		ГруппаЦеныНовая.Группировка = ГруппировкаКолонок.ВЯчейке;
	КонецЕсли;	
	ГруппаЦеныНовая.Ширина = ШиринаГруппы;
	ГруппаЦеныНовая.ОтображатьВШапке = Ложь;
	ГруппаЦеныНовая.ОтображатьЗаголовок = Ложь;
	ГруппаЦеныНовая.РастягиватьПоГоризонтали = Ложь;
	
	// цена новая
	ПолноеИмяРеквизитЦенаНовая = ПутьРеквизита + ИмяРеквизитаЦенаНовая;
	ЭлементЦенаНовая = Элементы.Добавить(ПолноеИмяРеквизитЦенаНовая, Тип("ПолеФормы"), ГруппаЦеныНовая);
	ЭлементЦенаНовая.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементЦенаНовая.ПутьКДанным = ПутьРеквизита + "." + ПолноеИмяРеквизитЦенаНовая;
	ЭлементЦенаНовая.Ширина = 8;
	ЭлементЦенаНовая.ПропускатьПриВводе = Истина;
	ЭлементЦенаНовая.Видимость = Истина;
	ЭлементЦенаНовая.УстановитьДействие("ПриИзменении", "Подключаемый_НоваяЦенаПриИзменении");
	ЭлементЦенаНовая.ЦветФона = WebЦвета.ЦветокБелый;
	Если ЗависимаяЦена.РассчитыватьАвтоматически Тогда
		ЭлементЦенаНовая.ЦветТекста = ЦветаСтиля.НедоступныеДанныеЦвет;
		ЭлементЦенаНовая.ЦветТекстаЗаголовка = ЦветаСтиля.НедоступныеДанныеЦвет;
		ЭлементЦенаНовая.Подсказка = НСтр("ru = 'Цены будут рассчитаны автоматически заданием'");
		ЭлементЦенаНовая.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// валюта новая
	ПолноеИмяРеквизитВалютаНовая = ПутьРеквизита + ИмяРеквизитаВалютаНовая;
	ЭлементВалютаНовая = Элементы.Добавить(ПолноеИмяРеквизитВалютаНовая, Тип("ПолеФормы"), ГруппаЦеныНовая);
	ЭлементВалютаНовая.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементВалютаНовая.Видимость = НесколькоВалютДляЦен И КэшЗначений.ФОУчетВалютныхОпераций;
	ЭлементВалютаНовая.ЦветФона = WebЦвета.ЦветокБелый;
	Если НесколькоВалютДляЦен Тогда
		ЭлементВалютаНовая.ОтображатьВШапке = Истина;
		ЭлементВалютаНовая.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
		ЭлементВалютаНовая.ПутьКДанным = ПутьРеквизита + "." + ПолноеИмяРеквизитВалютаНовая;
		ЭлементВалютаНовая.Ширина = 4;
	Иначе
		ЭлементВалютаНовая.ОтображатьВШапке = Ложь;
		ЭлементВалютаНовая.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементВалютаНовая.ПутьКДанным = ПутьРеквизита + "." + ПрефиксРеквизитов + "_ВалютаНовая.СимвольноеПредставление";
		ЭлементВалютаНовая.Ширина = 2;
	КонецЕсли;
	ЭлементВалютаНовая.КнопкаОткрытия = Ложь;
	ЭлементВалютаНовая.РастягиватьПоГоризонтали = Ложь;
	ЭлементВалютаНовая.ОтображатьВШапке = Истина;
	ЭлементВалютаНовая.УстановитьДействие("ПриИзменении", "Подключаемый_ВалютаНоваяПриИзменении");
	
	// единица измерения
	ПолноеИмяРеквизитЕдиницаИзмерения = ПутьРеквизита + ИмяРеквизитаЕдиницаИзмерения;
	ЭлементЕдиницаИзмерения = Элементы.Добавить(ПолноеИмяРеквизитЕдиницаИзмерения, Тип("ПолеФормы"), ГруппаЦены);
	ЭлементЕдиницаИзмерения.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементЕдиницаИзмерения.ПутьКДанным = ПутьРеквизита + "." + ПолноеИмяРеквизитЕдиницаИзмерения;
	ЭлементЕдиницаИзмерения.Ширина = 8;
	ЭлементЕдиницаИзмерения.ПропускатьПриВводе = Истина;
	ЭлементЕдиницаИзмерения.Видимость = Объект.ПоказыватьЕдиницыИзмерения;
	ЭлементЕдиницаИзмерения.ЦветФона = WebЦвета.ЦветокБелый;
	ЭлементЕдиницаИзмерения.ВыбиратьТип = Ложь;
	ЭлементЕдиницаИзмерения.КнопкаВыпадающегоСписка = Истина;
	ЭлементЕдиницаИзмерения.КнопкаВыбора = Ложь;

	НовыйПараметр = Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы." + ИмяТабличнойЧасти
		+ ".ТекущиеДанные.Номенклатура", РежимИзмененияСвязанногоЗначения.Очищать);
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(НовыйПараметр);
	ЭлементЕдиницаИзмерения.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
	// цену изменили
	ЭлементИзменили = Элементы.Добавить(ПрефиксРеквизитов + "_ЦенуИзменили", Тип("ПолеФормы"), ГруппаЦены);
	ЭлементИзменили.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементИзменили.ПутьКДанным = ПутьРеквизита + "." + ПрефиксРеквизитов + "_ЦенуИзменили";
	ЭлементИзменили.Видимость = Ложь;

	// валюта видимость
	ЭлементВалютаВидимость = Элементы.Добавить(ПрефиксРеквизитов + "_ВалютаВидимость", Тип("ПолеФормы"), ГруппаЦены);
	ЭлементВалютаВидимость.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементВалютаВидимость.ПутьКДанным = ПутьРеквизита + "." + ПрефиксРеквизитов + "_ВалютаВидимость";
	ЭлементВалютаВидимость.Видимость = Ложь;

	Если ЗависимаяЦена.РассчитыватьАвтоматически Тогда
		ЭлементЕдиницаИзмерения.ЦветТекста				= ЦветаСтиля.НедоступныеДанныеЦвет;
		ЭлементЕдиницаИзмерения.ЦветТекстаЗаголовка 	= ЦветаСтиля.НедоступныеДанныеЦвет;
		ЭлементЕдиницаИзмерения.Подсказка 				= НСтр("ru = 'Цены будут рассчитаны автоматически заданием'");
		ЭлементЕдиницаИзмерения.ТолькоПросмотр			= Истина;
	КонецЕсли;
	
	// добавить условное оформление новой цены
	Если ИмяТабличнойЧасти = "ТЧНоменклатура" И Не ЗависимаяЦена.РассчитыватьАвтоматически Тогда

		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор,
			"ТЧНоменклатура.ПроверятьЗаполнениеХарактеристики", Истина, ВидСравненияКомпоновкиДанных.Равно);
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ПолноеИмяРеквизитЦенаНовая);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста",
			ЦветаСтиля.ЦветТекстаПредупреждениеОбОкончанииДоговора);

	КонецЕсли;
	
	// Условное оформление валюты дельты - скрыть валюту, если дельта пустая
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ИмяТабличнойЧасти + "."
		+ ЭлементЦенаДельта.Имя, Истина, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ЭлементВалютаДельта.Имя);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "");
	
	// Условное оформление видимость валюты - скрыть валюту по флагу
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ИмяТабличнойЧасти + "."
		+ ЭлементВалютаВидимость.Имя, Ложь, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ЭлементВалютаДо.Имя);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Отображать", Ложь);

КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыТабличнойЧастиОсновногоВидаЦенПоВидуЦен(Знач ВыбранныйВидЦен, Знач ИмяТабличнойЧасти,
	Знач ПрефиксРеквизитов, Знач ПутьРеквизита)
	
	ШиринаГруппы = 10;
	НесколькоВалютДляЦен = ВыбранныйВидЦен.НесколькоВалютДляЦен;
	
	ГруппаЦены = Элементы.Добавить(ПрефиксРеквизитов, Тип("ГруппаФормы"), Элементы[ИмяТабличнойЧасти]);
	ВалютаЗаголовка = "";
	Если КэшЗначений.ФОУчетВалютныхОпераций И НЕ НесколькоВалютДляЦен Тогда
		ВалютаЗаголовка = ", " + ВыбранныйВидЦен.ВалютаЦены.СимвольноеПредставление;
	КонецЕсли;
	ГруппаЦены.Заголовок = ВыбранныйВидЦен.Наименование + ВалютаЗаголовка;
	ГруппаЦены.Группировка = ГруппировкаКолонок.Горизонтальная;
	ГруппаЦены.ОтображатьВШапке	= Истина;
	ГруппаЦены.ОтображатьЗаголовок = Истина;
	ГруппаЦены.КартинкаШапки = ПолучитьКартинкуДляВидаЦены(ВыбранныйВидЦен);

	ГруппаЦеныДо = Элементы.Добавить(ПрефиксРеквизитов + "_ГруппаЦеныДо", Тип("ГруппаФормы"), ГруппаЦены);
	ГруппаЦеныДо.Группировка = ГруппировкаКолонок.ВЯчейке;
	ГруппаЦеныДо.Ширина = ШиринаГруппы;
	ГруппаЦеныДо.ОтображатьВШапке = Ложь;
	ГруппаЦеныДо.ОтображатьЗаголовок = Ложь;
	ГруппаЦеныДо.РастягиватьПоГоризонтали = Ложь;
	ГруппаЦеныДо.Видимость = Объект.ПоказыватьДействующуюЦену;

	ЭлементЦенаДо = Элементы.Добавить(ПрефиксРеквизитов + "_ЦенаДо", Тип("ПолеФормы"), ГруппаЦеныДо);
	ЭлементЦенаДо.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементЦенаДо.ПутьКДанным = ПутьРеквизита + "." + ПрефиксРеквизитов + "_ЦенаДо";
	ЭлементЦенаДо.Ширина = 8;
	ЭлементЦенаДо.ТолькоПросмотр= Истина;
	ЭлементЦенаДо.ЦветТекста = ЦветаСтиля.НедоступныеДанныеЦвет;
	ЭлементЦенаДо.ЦветФона = WebЦвета.АкварельноСиний;
	ЭлементЦенаДо.Формат = "";
	ЭлементЦенаДо.ЦветТекстаЗаголовка = ЦветаСтиля.НедоступныеДанныеЦвет;
	ЭлементЦенаДо.РастягиватьПоГоризонтали = Ложь;

	ЭлементВалютаДо = Элементы.Добавить(ПрефиксРеквизитов + "_ВалютаДо", Тип("ПолеФормы"), ГруппаЦеныДо);
	ЭлементВалютаДо.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементВалютаДо.ПутьКДанным = ПутьРеквизита + "." + ПрефиксРеквизитов + "_ВалютаДо.СимвольноеПредставление";
	ЭлементВалютаДо.Ширина = 2;
	ЭлементВалютаДо.Видимость = Истина;
	ЭлементВалютаДо.ЦветФона = WebЦвета.АкварельноСиний;
	ЭлементВалютаДо.РастягиватьПоГоризонтали = Ложь;
	ЭлементВалютаДо.ОтображатьВШапке = Ложь;
	ЭлементВалютаДо.КнопкаОткрытия = Ложь;

	ГруппаДельта = Элементы.Добавить(ПрефиксРеквизитов + "_ГруппаДельта", Тип("ГруппаФормы"), ГруппаЦены);
	ГруппаДельта.Группировка = ГруппировкаКолонок.ВЯчейке;
	ГруппаДельта.Ширина = ШиринаГруппы;
	ГруппаДельта.ОтображатьВШапке = Ложь;
	ГруппаДельта.ОтображатьЗаголовок = Ложь;
	ГруппаДельта.РастягиватьПоГоризонтали = Ложь;
	ГруппаДельта.Видимость = Объект.ПоказыватьОтклонениеЦен;
	
	ЭлементДельтаКартинка = Элементы.Добавить(ПрефиксРеквизитов + "_ДельтаКартинка", 
		Тип("ПолеФормы"), ГруппаДельта);
	ЭлементДельтаКартинка.Вид = ВидПоляФормы.ПолеКартинки;
	ЭлементДельтаКартинка.КартинкаЗначений = БиблиотекаКартинок.КоллекцияИзменениеЦен;
	ЭлементДельтаКартинка.ПутьКДанным = ПутьРеквизита + "." + ПрефиксРеквизитов + "_ДельтаКартинка";
	ЭлементДельтаКартинка.ОтображатьВШапке = Ложь;
	ЭлементДельтаКартинка.Ширина = 2;

	ЭлементДельта = Элементы.Добавить(ПрефиксРеквизитов + "_Дельта", Тип("ПолеФормы"), ГруппаДельта);
	ЭлементДельта.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементДельта.ПутьКДанным = ПутьРеквизита + "." + ПрефиксРеквизитов + "_Дельта";
	ЭлементДельта.Ширина = 6;
	ЭлементДельта.ТолькоПросмотр= Истина;
	ЭлементДельта.ЦветТекста = ЦветаСтиля.НедоступныеДанныеЦвет;
	ЭлементДельта.ЦветТекстаЗаголовка = ЦветаСтиля.НедоступныеДанныеЦвет;
	ЭлементДельта.РастягиватьПоГоризонтали = Ложь;
	ЭлементДельта.ЦветФона = WebЦвета.АкварельноСиний;

	ЭлементВалютаДельта = Элементы.Добавить(ПрефиксРеквизитов + "_ВалютаДельта", Тип("ПолеФормы"), ГруппаДельта);
	ЭлементВалютаДельта.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементВалютаДельта.ПутьКДанным	= ПутьРеквизита + "." + ПрефиксРеквизитов + "_ВалютаДельта.СимвольноеПредставление";
	ЭлементВалютаДельта.Ширина = 2;
	ЭлементВалютаДельта.Видимость = НесколькоВалютДляЦен И КэшЗначений.ФОУчетВалютныхОпераций;
	ЭлементВалютаДельта.РастягиватьПоГоризонтали = Ложь;
	ЭлементВалютаДельта.ОтображатьВШапке = Ложь;
	ЭлементВалютаДельта.КнопкаОткрытия = Ложь;

	ГруппаЦеныНовая = Элементы.Добавить(ПрефиксРеквизитов + "_ГруппаЦеныНовые", Тип("ГруппаФормы"), ГруппаЦены);
	Если НесколькоВалютДляЦен Тогда
		ГруппаЦеныНовая.Группировка = ГруппировкаКолонок.Горизонтальная;
	Иначе
		ГруппаЦеныНовая.Группировка = ГруппировкаКолонок.ВЯчейке;
	КонецЕсли;	
	ГруппаЦеныНовая.Ширина = ШиринаГруппы;
	ГруппаЦеныНовая.ОтображатьВШапке = Ложь;
	ГруппаЦеныНовая.ОтображатьЗаголовок = Ложь;
	ГруппаЦеныНовая.РастягиватьПоГоризонтали = Ложь;
	ГруппаЦеныНовая.Видимость = Объект.ПоказыватьНовуюЦену;

	ЭлементНовая = Элементы.Добавить(ПрефиксРеквизитов + "_ЦенаНовая", Тип("ПолеФормы"), ГруппаЦеныНовая);
	ЭлементНовая.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементНовая.ПутьКДанным = ПутьРеквизита + "." + ПрефиксРеквизитов + "_ЦенаНовая";
	ЭлементНовая.Ширина = 10;
	ЭлементНовая.УстановитьДействие("ПриИзменении", "Подключаемый_НоваяЦенаПриИзменении");
	ЭлементНовая.РастягиватьПоГоризонтали = Ложь;
	ЭлементНовая.ЦветФона = WebЦвета.АкварельноСиний;

	ЭлементВалютаНовая = Элементы.Добавить(ПрефиксРеквизитов + "_ВалютаНовая", Тип("ПолеФормы"), ГруппаЦеныНовая);
	ЭлементВалютаНовая.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементВалютаНовая.Видимость = НесколькоВалютДляЦен И КэшЗначений.ФОУчетВалютныхОпераций;
	ЭлементВалютаНовая.ЦветФона = WebЦвета.АкварельноСиний;
	Если НесколькоВалютДляЦен Тогда
		ЭлементВалютаНовая.ОтображатьВШапке = Истина;
		ЭлементВалютаНовая.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
		ЭлементВалютаНовая.ПутьКДанным = ПутьРеквизита + "." + ПрефиксРеквизитов + "_ВалютаНовая";
		ЭлементВалютаНовая.Ширина = 4;
	Иначе
		ЭлементВалютаНовая.ОтображатьВШапке = Ложь;
		ЭлементВалютаНовая.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементВалютаНовая.ПутьКДанным = ПутьРеквизита + "." + ПрефиксРеквизитов + "_ВалютаНовая.СимвольноеПредставление";
		ЭлементВалютаНовая.Ширина = 2;
	КонецЕсли;
	ЭлементВалютаНовая.КнопкаОткрытия = Ложь;
	ЭлементВалютаНовая.РастягиватьПоГоризонтали = Ложь;
	ЭлементВалютаНовая.ОтображатьВШапке = Истина;
	ЭлементВалютаНовая.УстановитьДействие("ПриИзменении", "Подключаемый_ВалютаНоваяПриИзменении");

	ЭлементЕдИзм = Элементы.Добавить(ПрефиксРеквизитов + "_ЕдИзм", Тип("ПолеФормы"), ГруппаЦены);
	ЭлементЕдИзм.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементЕдИзм.ПутьКДанным = ПутьРеквизита + "." + ПрефиксРеквизитов + "_ЕдИзм";
	ЭлементЕдИзм.Ширина = 8;
	ЭлементЕдИзм.УстановитьДействие("ПриИзменении", "Подключаемый_ЕдиницаИзмеренияПриИзменении");
	ЭлементЕдИзм.РастягиватьПоГоризонтали = Ложь;
	ЭлементЕдИзм.Видимость = Объект.ПоказыватьЕдиницыИзмерения;
	ЭлементЕдИзм.ЦветФона = WebЦвета.АкварельноСиний;
	ЭлементЕдИзм.ВыбиратьТип = Ложь;
	ЭлементЕдИзм.КнопкаВыпадающегоСписка = Истина;
	ЭлементЕдИзм.КнопкаВыбора = Ложь;

	ЭлементИзменили = Элементы.Добавить(ПрефиксРеквизитов + "_ЦенуИзменили", Тип("ПолеФормы"), ГруппаЦены);
	ЭлементИзменили.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементИзменили.ПутьКДанным = ПутьРеквизита + "." + ПрефиксРеквизитов + "_ЦенуИзменили";
	ЭлементИзменили.Видимость = Ложь;

	ЭлементВалютаВидимость = Элементы.Добавить(ПрефиксРеквизитов + "_ВалютаВидимость", Тип("ПолеФормы"), ГруппаЦены);
	ЭлементВалютаВидимость.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементВалютаВидимость.ПутьКДанным = ПутьРеквизита + "." + ПрефиксРеквизитов + "_ВалютаВидимость";
	ЭлементВалютаВидимость.Видимость = Ложь;

	НовыйПараметр = Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы." + ИмяТабличнойЧасти
		+ ".ТекущиеДанные.Номенклатура", РежимИзмененияСвязанногоЗначения.Очищать);

	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(НовыйПараметр);
	ЭлементЕдИзм.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
	// Условное оформление новой цены
	Если ИмяТабличнойЧасти = "ТЧНоменклатура" Тогда

		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор,
			"ТЧНоменклатура.ПроверятьЗаполнениеХарактеристики", Истина, ВидСравненияКомпоновкиДанных.Равно);
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ПрефиксРеквизитов + "_ЦенаНовая");
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста",
			ЦветаСтиля.ЦветТекстаПредупреждениеОбОкончанииДоговора);

	КонецЕсли;
	
	// Условное оформление валюты дельты
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ИмяТабличнойЧасти + "."
		+ ЭлементДельта.Имя, Истина, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ЭлементВалютаДельта.Имя);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "");
	
	// Условное оформление видимость валюты 
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ИмяТабличнойЧасти + "."
		+ ЭлементВалютаВидимость.Имя, Ложь, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ЭлементВалютаДо.Имя);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Отображать", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидимостьЭлементовТабличныхЧастей();
	
	ИзменитьВидимостьЭлементовТабличнойЧасти("ТЧНоменклатура");

	Если Объект.ПоказыватьХарактеристики Тогда
		ИзменитьВидимостьЭлементовТабличнойЧасти("ТЧХарактеристики");
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидимостьЭлементовТабличнойЧасти(ИмяТабличнойЧасти)

	ЭлементыТЧ = Элементы[ИмяТабличнойЧасти].ПодчиненныеЭлементы;

	ПараметрыВидимостиЗависимые = Новый Соответствие;
	ПараметрыВидимостиЗависимые.Вставить("ПоказыватьОтклонениеЦен", "%1%2_ГруппаДельта");
	ПараметрыВидимостиЗависимые.Вставить("ПоказыватьДействующуюЦену", "%1%2_ГруппаЦеныДо");
	ПараметрыВидимостиЗависимые.Вставить("ПоказыватьЕдиницыИзмерения", "%1%2_ЕдИзм");
	ПараметрыВидимостиЗависимые.Вставить("ПоказыватьНовуюЦену", "%1%2_ЦенаНовая");
	ПараметрыВидимостиЗависимые.Вставить("ПоказыватьЗависимыеЦены", "%1%2");
	
	ПараметрыВидимостиВалюты = Новый Соответствие;

	ПараметрыВидимостиОсновные = Новый Соответствие;
	ПараметрыВидимостиОсновные.Вставить("ПоказыватьХарактеристики", "%1Лупа");
	ПараметрыВидимостиОсновные.Вставить("ПоказыватьДействующуюЦену", "%1_ГруппаЦеныДо");
	ПараметрыВидимостиОсновные.Вставить("ПоказыватьВалюты", ПараметрыВидимостиВалюты);
	ПараметрыВидимостиОсновные.Вставить("ПоказыватьОтклонениеЦен", "%1_ГруппаДельта");
	ПараметрыВидимостиОсновные.Вставить("ПоказыватьЕдиницыИзмерения", "%1_ЕдИзм");
	ПараметрыВидимостиОсновные.Вставить("ПоказыватьНовуюЦену", "%1");
	ПараметрыВидимостиОсновные.Вставить("ПоказыватьЗависимыеЦены", ПараметрыВидимостиЗависимые);

	Для Каждого ВыбранныйВидЦенСоответствие Из КэшЗначений.ВыбранныеВидыЦен Цикл

		ВыбранныйВидЦен		= ВыбранныйВидЦенСоответствие.Ключ;
		ПодчиненныеВидыЦен	= ВыбранныйВидЦенСоответствие.Значение;

		ОбщаяЧастьИмен = ИмяТабличнойЧасти + ВыбранныйВидЦен.ИдентификаторФормул;
		Если ЭлементыТЧ.Найти(ОбщаяЧастьИмен) <> Неопределено Тогда

			Для Каждого ПараметрВидимости Из ПараметрыВидимостиОсновные Цикл

				Если ПараметрВидимости.Ключ = "ПоказыватьЗависимыеЦены" Тогда

					Для Каждого ПараметрВидимостиПодчиненный Из ПараметрВидимости.Значение Цикл

						ИзменитьВидимостьПодчиненныхЭлементовТабличнойЧасти(ИмяТабличнойЧасти, ПараметрВидимости,
							ПараметрВидимостиПодчиненный, ПодчиненныеВидыЦен);

					КонецЦикла;

				ИначеЕсли ПараметрВидимости.Ключ = "ПоказыватьВалюты" Тогда

					Для Каждого ПараметрВидимостиПодчиненный Из ПараметрВидимости.Значение Цикл

						ИмяЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ПараметрВидимостиПодчиненный.Ключ, ОбщаяЧастьИмен);
						ЗначениеКлюча =  ВыбранныйВидЦенСоответствие.Ключ.НесколькоВалютДляЦен;

						ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, "Видимость",
							ЗначениеКлюча);

					КонецЦикла;
					
				ИначеЕсли ПараметрВидимости.Ключ = "ПоказыватьХарактеристики" Тогда
					
					ИмяЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрВидимости.Значение,
						ИмяТабличнойЧасти);
					ЗначениеКлюча =  Объект[ПараметрВидимости.Ключ];

					ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, "Видимость",
						ЗначениеКлюча);

				Иначе

					ИмяЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрВидимости.Значение,
						ОбщаяЧастьИмен);
					ЗначениеКлюча =  Объект[ПараметрВидимости.Ключ];

					ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, "Видимость",
						ЗначениеКлюча);

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция РеквизитДобавленРаннее(ИмяТабличнойЧасти, ПутьКРеквизитуИИмяЭлемента)

	МассивРеквизитов = ПолучитьРеквизиты(ИмяТабличнойЧасти);
	Для Каждого РеквизитФормы Из МассивРеквизитов Цикл

		Если РеквизитФормы.Имя = ПутьКРеквизитуИИмяЭлемента Тогда

			Возврат Истина;

		КонецЕсли;

	КонецЦикла;

	Возврат Ложь;

КонецФункции

&НаСервере
Процедура ИспользоватьВидЦенВТабличнойЧасти(ИмяТабличнойЧасти, ВыбранныйВидЦенСоответствие)

	ДобавитьРеквизитыИЭлементыТабличнойЧастиПоВидуЦен(ИмяТабличнойЧасти, ВыбранныйВидЦенСоответствие);

КонецПроцедуры

&НаСервере
Процедура ОтключитьИспользованиеВидовЦенВТабличнойЧасти(ИмяТабличнойЧасти, ОтключенныйВидЦен)

	ИмяГруппыЭлементов = ИмяТабличнойЧасти + ОтключенныйВидЦен.ИдентификаторФормул;
	Если Элементы.Найти(ИмяГруппыЭлементов) <> Неопределено Тогда

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяГруппыЭлементов, "Видимость", Ложь);

	КонецЕсли;

	Если Не (ОтключенныйВидЦен.ТипВидаЦен = КэшЗначений.Статический Или ОтключенныйВидЦен.ТипВидаЦен
		= КэшЗначений.ПроизвольныйЗапрос) Тогда

		ИдентификаторБазовогоВида = ПолучитьИдентификаторБазовогоВидаЦены(ОтключенныйВидЦен);
		Если ИдентификаторБазовогоВида <> Неопределено Тогда

			ИмяГруппыЭлементов = ИмяТабличнойЧасти + ИдентификаторБазовогоВида + ОтключенныйВидЦен.ИдентификаторФормул;

			Если Элементы.Найти(ИмяГруппыЭлементов) <> Неопределено Тогда

				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяГруппыЭлементов, "Видимость",
					Ложь);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИзменитьСоставРеквизитовИЭлементовТабличнойЧасти(Знач ДанныеИменТабличныхЧастей)
	
	Если ТипЗнч(ДанныеИменТабличныхЧастей) = Тип("ФиксированныйМассив") Тогда 
		Для Каждого ИмяТабличнойЧасти Из ДанныеИменТабличныхЧастей Цикл
			ИзменитьСоставРеквизитовИЭлементовТекущейТабличнойЧасти(ИмяТабличнойЧасти);	
		КонецЦикла;
	Иначе
		ИзменитьСоставРеквизитовИЭлементовТекущейТабличнойЧасти(ДанныеИменТабличныхЧастей);	
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура ИзменитьСоставРеквизитовИЭлементовТекущейТабличнойЧасти(ИмяТабличнойЧасти)
		
	КэшЗначений.НовыеВидыЦен.Очистить();
	Для Каждого ВыбранныйВидЦенСоответствие Из КэшЗначений.ВыбранныеВидыЦен Цикл

		ИспользоватьВидЦенВТабличнойЧасти(ИмяТабличнойЧасти, ВыбранныйВидЦенСоответствие);
		
	КонецЦикла;

	Для Каждого ОтключенныйВидЦен Из КэшЗначений.ОтключенныеВидыЦен Цикл

		ОтключитьИспользованиеВидовЦенВТабличнойЧасти(ИмяТабличнойЧасти, ОтключенныйВидЦен);

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементов()

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УстанавливатьХарактеристикамБезЦен",
		"Видимость", Не Объект.ПоказыватьХарактеристики);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаПоказыватьХарактеристикиДополнительно", "Видимость", Объект.ПоказыватьХарактеристики);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКоманднаяПанельТовары", "Видимость",
		Не Объект.РасчетИзВидаЦен);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДокументОснованиеНадпись", "Видимость",
		Не Объект.РасчетИзВидаЦен);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПоказыватьХарактеристики",
		"Видимость", КэшЗначений.ФОИспользоватьХарактеристики);

	Если Объект.РасчетИзВидаЦен Тогда
		Для Каждого ЭлементПервогоУровня Из ВидыЦен.ПолучитьЭлементы() Цикл
			Для Каждого ЭлементВторогоУровня Из ЭлементПервогоУровня.ПолучитьЭлементы() Цикл

				Для Каждого Элемент Из ЭлементВторогоУровня.ПолучитьЭлементы() Цикл

					Если Элемент.Использование Тогда
						Элементы.ВидыЦен.Развернуть(ЭлементВторогоУровня.ПолучитьИдентификатор());
						Прервать;
					КонецЕсли;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	УстановитьВидимостьПравойПанели();

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьГруппыБазовыхЦен()

	Если Объект.РасчетИзВидаЦен Тогда
		Для Каждого БазовыйВидЦен Из КэшЗначений.ВыбранныеВидыЦен Цикл
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТЧНоменклатура"
				+ БазовыйВидЦен.Ключ.ИдентификаторФормул, "ОтображатьВШапке", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТЧХарактеристики"
				+ БазовыйВидЦен.Ключ.ИдентификаторФормул, "ОтображатьВШапке", Ложь);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораДатДокументаИзОчередиРасчета(МассивВидовЦен)

	Если Не Объект.РасчетИзВидаЦен Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
						  |	РС.ПериодЗаписи КАК ПериодЗаписи
						  |ИЗ
						  |	РегистрСведений.ОчередьРасчетаЦен КАК РС
						  |ГДЕ
						  |	РС.ВидЦенРасчетный = &ВидЦенРасчетный
						  |	И РС.ВидЦенРасчетный.КоличествоПопытокСлужебный < 2
						  |	И НЕ РС.ВидЦенРасчетный.РассчитыватьАвтоматически
						  |
						  |УПОРЯДОЧИТЬ ПО
						  |	РС.ПериодЗаписи УБЫВ");

	Запрос.УстановитьПараметр("ВидЦенРасчетный", МассивВидовЦен[0]);

	Результат = Запрос.Выполнить();
	Элементы.Дата.КнопкаВыпадающегоСписка = Не Результат.Пустой();
	Выборка = Результат.Выбрать();
	ПериодЗаписи = Неопределено;
	Пока Выборка.Следующий() Цикл

		Элементы.Дата.СписокВыбора.Добавить(Выборка.ПериодЗаписи, Формат(Выборка.ПериодЗаписи, "ДЛФ=DD"));
		Если Не ЗначениеЗаполнено(ПериодЗаписи) Тогда
			ПериодЗаписи = Выборка.ПериодЗаписи;
		КонецЕсли;

	КонецЦикла;
	Объект.Дата = ПериодЗаписи;

КонецПроцедуры

&НаСервере
Функция СформироватьТаблицуИсточникСЦенойПоОднойЗаписи(Знач ДанныеТекущейСтроки, Знач ИмяТабличнойЧасти)

	МассивСтрока = Новый Массив;
	МассивСтрока.Добавить(ДанныеТекущейСтроки);
	Результат = ЭтотОбъект[ИмяТабличнойЧасти].Выгрузить(МассивСтрока);
	Если Результат.Колонки.Найти("Характеристика") = Неопределено Тогда

		Результат.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));

	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область КопияДанныхДоИзменения

&НаСервере
Процедура ВосстановитьТабличнуюЧастьИзКопии(ИмяТабличнойЧасти, АдресВоВременномХранилище)

	ТаблицаДанных = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);

	Если ТаблицаДанных.Количество() > 0 Тогда

		ЗначениеВРеквизитФормы(ТаблицаДанных, ИмяТабличнойЧасти);

	Иначе

		ЭтотОбъект[ИмяТабличнойЧасти].Очистить();

	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТабличнаяЧастьОтменитьИзменение",
		"Доступность", Ложь);

КонецПроцедуры

&НаСервере
Процедура ВосстановитьТабличныеЧастиИзКопий()

	ВосстановитьТабличнуюЧастьИзКопии("ТЧНоменклатура", КэшЗначений.ДоИзмененияНоменклатура);
	ВосстановитьТабличнуюЧастьИзКопии("ТЧХарактеристики", КэшЗначений.ДоИзмененияХарактеристики);

КонецПроцедуры

&НаСервере
Процедура СоздатьКопиюТекущихДанных(ТаблицаДанных, АдресВоВременномХранилище)

	ПоместитьВоВременноеХранилище(ТаблицаДанных, АдресВоВременномХранилище);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТабличнаяЧастьОтменитьИзменение",
		"Доступность", Истина);

КонецПроцедуры

#КонецОбласти

#Область ПодключаемоеОборудование

&НаКлиенте
Функция ЗаполнитьТоварыПоШтрихкодам(Знач ДанныеШтрихкодов)

	НеизвестныеШтрихкоды = Новый Массив;
	НекорректныеШтрихкоды = Новый Массив;

	ДанныеПоШтрихкодам = ПолучитьДанныеПоШтрихкодам(ДанныеШтрихкодов);

	ДоступныеТипыНоменклатуры = Новый Массив;
	ДоступныеТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
	ДоступныеТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	ДоступныеТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));

	Для Каждого СтруктураШтрихкода Из ДанныеШтрихкодов Цикл

		ДанныеШтрихкода = ДанныеПоШтрихкодам[СтруктураШтрихкода.Штрихкод];
		
		// несколько одинаковых штрихкодов
		Если ДанныеШтрихкода.Количество() > 1 Тогда

			ПараметрыОткрытияФормыДублейШтрихкодов 
				= Новый Структура("МассивНоменклатуры, ТекШтрихкод", ДанныеШтрихкода, СтруктураШтрихкода);

			СтруктураДанные = Новый Структура;
			ДополнительныеПараметрыОповещения = Новый Структура("СтруктураДанные", СтруктураДанные);
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоДаннымШтрихкодовЗавершение", ЭтотОбъект,
				ДополнительныеПараметрыОповещения);

			ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ДублиНоменклатурыПоШтрихКодам",
				ПараметрыОткрытияФормыДублейШтрихкодов, ЭтотОбъект, , , , ОповещениеОЗакрытии,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

			Продолжить;

		КонецЕсли;
		
		// новый штрихкод
		Если ДанныеШтрихкода <> Неопределено И ДанныеШтрихкода.Количество() = 0 Тогда

			НеизвестныеШтрихкоды.Добавить(СтруктураШтрихкода);
			
		// некорректный штрихкод
		ИначеЕсли ДоступныеТипыНоменклатуры.Найти(ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры)
			= Неопределено Тогда

			СтруктураНекорректногоШтрихкода = Новый Структура;
			СтруктураНекорректногоШтрихкода.Вставить("Штрихкод", СтруктураШтрихкода.Штрихкод);
			СтруктураНекорректногоШтрихкода.Вставить("Номенклатура", ДанныеШтрихкода[0].Номенклатура);
			СтруктураНекорректногоШтрихкода.Вставить("ТипНоменклатуры",
				ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры);

			НекорректныеШтрихкоды.Добавить(СтруктураНекорректногоШтрихкода);
			
		// обработать добавление штрихкода в табличную часть
		Иначе

			ДанныеШтрихкода = ДанныеШтрихкода[0];
			СтруктураОтбора = Новый Структура("Номенклатура", ДанныеШтрихкода.Номенклатура);
			НайденыСтроки = ТЧНоменклатура.НайтиСтроки(СтруктураОтбора);
			Если НайденыСтроки.Количество() = 0 Тогда
				
				// обработать добавление номенклатуры
				МассивНоменклатуры = Новый Массив;
				МассивНоменклатуры.Добавить(ДанныеШтрихкода.Номенклатура);
				ДобавитьПроизвольнуюНоменклатуру(МассивНоменклатуры);
				ОбновитьКоличествоЗаписейПоДокументу();

			Иначе
				
				// номенклатура уже найдена, сообщить
				Индекс = ТЧНоменклатура.Индекс(НайденыСтроки[0]);
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Номенклатура уже есть в табличной части'");
				Сообщение.Поле = СтрШаблон("ТЧНоменклатура[%1].Номенклатура", Индекс);
				Сообщение.Сообщить();

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Результат = Новый Структура;
	Результат.Вставить("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды);
	Результат.Вставить("НекорректныеШтрихкоды", НекорректныеШтрихкоды);

	Возврат Результат;

КонецФункции

#КонецОбласти

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоШтрихкодам(Штрихкоды)

	ДанныеПоШтрихкодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодамВМассиве(Штрихкоды);

	Для Каждого СтруктураШтрихкода Из Штрихкоды Цикл

		МассивДанныхШтрихкода = ДанныеПоШтрихкодам[СтруктураШтрихкода.Штрихкод];

		Если МассивДанныхШтрихкода <> Неопределено И МассивДанныхШтрихкода.Количество() <> 0 Тогда

			Для Каждого ДанныеШтрихкода Из МассивДанныхШтрихкода Цикл

				СтруктураДанныеНоменклатуры = Новый Структура;
				СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);

				ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", СтруктураДанныеНоменклатуры);

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	Возврат ДанныеПоШтрихкодам;

КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоДаннымШтрихкодовЗавершение(СтруктураНоменклатуры, Параметры) Экспорт

	Если СтруктураНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли
	;

	ДанныеШтрихкода = СтруктураНоменклатуры.МассивНоменклатуры[0];
	ТекШтрихкод = СтруктураНоменклатуры.ТекШтрихкод;
	ШтрихкодыНекорректногоТипа = Новый Массив;

	ДоступныеТипыНоменклатуры = Новый Массив;
	ДоступныеТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
	ДоступныеТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	ДоступныеТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	ДоступныеТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Операция"));
	ДоступныеТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ВидРабот"));

	Если ДоступныеТипыНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) Тогда
		ОписаниеШтрихкода = Новый Структура;
		ОписаниеШтрихкода.Вставить("Штрихкод", ТекШтрихкод.Штрихкод);
		ОписаниеШтрихкода.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
		ОписаниеШтрихкода.Вставить("ТипНоменклатуры", ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры);
		ШтрихкодыНекорректногоТипа.Добавить(ОписаниеШтрихкода);
	Иначе
		СтруктураОтбора = Новый Структура("Номенклатура", ДанныеШтрихкода.Номенклатура);
		НайденыСтроки = ТЧНоменклатура.НайтиСтроки(СтруктураОтбора);
		Если НайденыСтроки.Количество() = 0 Тогда
			
			// обработать добавление номенклатуры
			МассивНоменклатуры = Новый Массив;
			МассивНоменклатуры.Добавить(ДанныеШтрихкода.Номенклатура);
			ДобавитьПроизвольнуюНоменклатуру(МассивНоменклатуры);
			ОбновитьКоличествоЗаписейПоДокументу();

		Иначе
			
			// номенклатура уже найдена, сообщить
			Индекс = ТЧНоменклатура.Индекс(НайденыСтроки[0]);
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Номенклатура уже есть в табличной части'");
			Сообщение.Поле = СтрШаблон("ТЧНоменклатура[%1].Номенклатура", Индекс);
			Сообщение.Сообщить();

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНазначениеНовыхШтрихкодов(Результат, ДополнительныеПараметры) Экспорт

	НеизвестныеШтрихкоды = ДополнительныеПараметры;

	Если Результат <> Неопределено Тогда

		МассивШтрихкодов = Новый Массив;

		Для Каждого ЭлементМассива Из Результат.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;

		Для Каждого ЭлементМассива Из Результат.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;

		СтруктураЗаполненияШтрихкодов = ЗаполнитьТоварыПоШтрихкодам(МассивШтрихкодов);
		НеизвестныеШтрихкоды = СтруктураЗаполненияШтрихкодов.НеизвестныеШтрихкоды;
		НекорректныеШтрихкоды = СтруктураЗаполненияШтрихкодов.НекорректныеШтрихкоды;

		СообщитьОНекорректныхШтрихкодах(НекорректныеШтрихкоды);

	КонецЕсли;

	СообщитьОНеизвестныхШтрихкодах(НеизвестныеШтрихкоды);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПодключениеОборудованияПриОткрытии()

	ПоддерживаемыеТипыОборудования = Новый Массив;
	ПоддерживаемыеТипыОборудования.Добавить("СканерШтрихкода");
	ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоТипу(ОповещенияПриПодключении, УникальныйИдентификатор,
		ПоддерживаемыеТипыОборудования);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолучениеШтрихкода(Знач ДанныеШтрихкодов)

	Модифицированность = Истина;

	СтруктураЗаполненияШтрихкодов = ЗаполнитьТоварыПоШтрихкодам(ДанныеШтрихкодов);
	НеизвестныеШтрихкоды = СтруктураЗаполненияШтрихкодов.НеизвестныеШтрихкоды;
	НекорректныеШтрихкоды = СтруктураЗаполненияШтрихкодов.НекорректныеШтрихкоды;

	СообщитьОНекорректныхШтрихкодах(НекорректныеШтрихкоды);

	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда

		ОповещениеПолученыШтрихкоды = Новый ОписаниеОповещения("ОбработатьНазначениеНовыхШтрихкодов", ЭтотОбъект,
			НеизвестныеШтрихкоды);

		ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект, , , ,
			ОповещениеПолученыШтрихкоды);

		Возврат;

	КонецЕсли;

	СообщитьОНеизвестныхШтрихкодах(НеизвестныеШтрихкоды);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСобытиеОповещенияПодключаемогоОборудования(ИмяСобытия, Параметр)

	Если Параметр.Количество() > 0 Тогда

		Если ИмяСобытия = "ScanData" И Элементы.СтраницыПредварительныйРезультат.ТекущаяСтраница
			= Элементы.СтраницаПР_Номенклатура Тогда

			ДанныеШтрихкодов = МенеджерОборудованияУНФКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
			ОбработатьПолучениеШтрихкода(ДанныеШтрихкодов);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт

	Если Не РезультатВыполнения.Результат Тогда

		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:""%1"".'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СообщитьОНеизвестныхШтрихкодах(НеизвестныеШтрихкоды)

	Для Каждого НеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл

		СтрокаСообщения = СтрШаблон(НСтр("ru = 'Данные по штрихкоду не найдены: %1; количество: %2'"),
			НеизвестныйШтрихкод.Штрихкод, НеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СообщитьОНекорректныхШтрихкодах(ШтрихкодыНекорректногоТипа)

	Для Каждого НекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл

		СтрокаСообщения = СтрШаблон(
			НСтр(
			"ru = 'Найденная по штрихкоду %1 номенклатура %2 имеет тип %3, который не подходит для этой табличной части'"),
			НекорректныйШтрихкод.Штрихкод, НекорректныйШтрихкод.Номенклатура, НекорректныйШтрихкод.ТипНоменклатуры);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);

	КонецЦикла;

КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено,
	СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));

КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(АдресЗагруженныхДанных)

	Если АдресЗагруженныхДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных);

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных)

	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);

	ТоварыДобавлены = Ложь;
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл

		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;

		Если СтрокаТаблицы.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрокаТовары = Объект.Запасы.Добавить();
		НоваяСтрокаТовары.Характеристика = СтрокаТаблицы.Характеристика;

		НоваяСтрокаТовары.Номенклатура = СтрокаТаблицы.Номенклатура;
		НоваяСтрокаТовары.Цена = СтрокаТаблицы.Цена;
		НоваяСтрокаТовары.ЕдиницаИзмерения = СтрокаТаблицы.ЕдиницаИзмерения;

		ТоварыДобавлены = Истина;

	КонецЦикла;

	Если ТоварыДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;

	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда

		Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда

			ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(
				НастройкиЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);

			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата",
				ЭтотОбъект, НастройкиЗагрузкиДанных);
			ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(
				НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);

		ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда

			ДлительнаяОперация = ОбработатьПодготовленныеДанныеНоменклатуры(РезультатЗагрузки);

			КэшЗначений.ПараметрыДлительнойОперации.РезультатДлОперации = ДлительнаяОперация;
			КэшЗначений.ПараметрыДлительнойОперации.Вставить("РезультатЗагрузки", РезультатЗагрузки);
			ПроверитьНеобходимостьПодключенияОбработчикаОжидания();

		КонецЕсли;

	Иначе

		ЗагрузитьИзФайлаЗавершение(РезультатЗагрузки);

	КонецЕсли;

	ОбновитьКоличествоЗаписейПоДокументу();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ИменаСвойств()

	ИменаСвойств = "Номенклатура, ЕдиницаИзмерения, Цена";
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда

		ИменаСвойств = ИменаСвойств + ", Характеристика";

	КонецЕсли;

	Возврат ИменаСвойств;

КонецФункции

&НаСервере
Процедура ЗагрузитьДанныеВТабличноеПолеЗапасы(ТаблицаСопоставленияДанных)

	ИменаСвойств = ИменаСвойств();
	МассивВидовЦен = Новый Массив;
	НачатьТранзакцию();

	Попытка

		ВидЦены = Неопределено;
		Для Каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл

			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда

				НоваяСтрока = Объект.Запасы.Добавить();

				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, ИменаСвойств);
				Если ВидЦены = Неопределено Тогда
					ВидЦены = СтрокаТаблицы.ВидЦен;
				КонецЕсли;

				НоваяСтрока.ВидЦены = ВидЦены;

			КонецЕсли;

		КонецЦикла;

		Если ВидЦены <> Неопределено И ЗначениеЗаполнено(ВидЦены) Тогда

			МассивВидовЦен.Добавить(ВидЦены);
			ЗаполнитьДеревоОперандов(МассивВидовЦен);
			Если Объект.Запасы.Количество() > 0 Тогда

				ЗаполнитьКэшЗначенийВидамиЦен(КэшЗначений);
				ИзменитьСоставРеквизитовИЭлементовТабличнойЧасти("ТЧНоменклатура");
				ИзменитьСоставРеквизитовИЭлементовТабличнойЧасти("ТЧХарактеристики");
				ЗаполнитьТаблицуНоменклатурыИХарактеристикПоДокументу(Истина, Ложь);
				КэшЗначений.ОтключенныеВидыЦен.Очистить();

			КонецЕсли;

		КонецЕсли;

		ЗафиксироватьТранзакцию();

	Исключение

		ОтменитьТранзакцию();

		ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка данных'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.УстановкаЦенНоменклатуры, , ПредставлениеОшибки);

		ВызватьИсключение ПредставлениеОшибки;

	КонецПопытки;

КонецПроцедуры

&НаСервере
Функция ОбработатьПодготовленныеДанныеНоменклатуры(РезультатЗагрузки)

	ПараметрыВызоваСервера = Новый Структура;
	ПараметрыВызоваСервера.Вставить("НастройкиЗагрузкиДанных", РезультатЗагрузки.НастройкиЗагрузкиДанных);
	ПараметрыВызоваСервера.Вставить("ТаблицаСопоставленияДанных", ДанныеФормыВЗначение(
		РезультатЗагрузки.ТаблицаСопоставленияДанных, Тип("ТаблицаЗначений")));

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр(
		"ru = 'Подсистема ЗагрузкаДанныхИзВнешнегоИсточника: Выполнение серверного метода загрузки результата'");
	ПараметрыВыполнения.ЗапуститьНеВФоне    = Ложь;
	ПараметрыВыполнения.ЗапуститьВФоне      = Истина;

	ИмяМетода = "Справочники.Номенклатура.ОбработатьПодготовленныеДанные";

	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыВызоваСервера, ПараметрыВыполнения);

КонецФункции
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

#КонецОбласти

#Область Настройки

&НаСервереБезКонтекста
Процедура СохранитьНастройкиФормы(СохраняемыеНастройки, КлючНастроек)

	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(
		"Документ.УстановкаЦенНоменклатуры.ФормаДокумента", КлючНастроек, СохраняемыеНастройки);

КонецПроцедуры

// Получает настройки формы и загружает их в реквизиты
// Если настройки не были сохранены ранее, то будут загружены настройки по умолчанию
// из процедуры ПолучитьНастройкиФормыПоУмолчанию()
//
&НаКлиенте
Процедура ЗагрузитьНастройкиФормы()

	ЗагружаемыеНастройкиПоУмолчанию = ПолучитьНастройкиФормыПоУмолчанию();
	КлючНастроек 					= "НовыйДокументУстановкаЦенНоменклатуры";
	ЗагружаемыеНастройки 			= ПолучитьНастройкиФормы(ЗагружаемыеНастройкиПоУмолчанию, КлючНастроек);
	ПоказыватьХарактеристики		= Объект.ПоказыватьХарактеристики;

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьЗначенияСвойств(Объект, ЗагружаемыеНастройки);
	КонецЕсли;

	Если ЗагружаемыеНастройки.ГруппаНастроекСвернута Тогда
		Элементы.ГруппаНастройки.Скрыть();
	КонецЕсли;
	
	Если Не ЭтаФорма.ТолькоПросмотр Тогда
		Объект.ПоказыватьХарактеристики = ПоказыватьХарактеристики;
	КонецЕсли;

	Если ЗагружаемыеНастройки.Свойство("ПраваяПанельВидимость") Тогда
		ПраваяПанельВидимость = ЗагружаемыеНастройки.ПраваяПанельВидимость;
	Иначе
		ПраваяПанельВидимость = ЗагружаемыеНастройкиПоУмолчанию.ПраваяПанельВидимость;
	КонецЕсли;

	Если Объект.РасчетИзВидаЦен И Не ЭтаФорма.ТолькоПросмотр Тогда
		Объект.ПоказыватьНовуюЦену 		= Истина;
		Объект.ПоказыватьОтклонениеЦен 	= Ложь;
		Объект.ПоказыватьДействующуюЦену = Ложь;
	КонецЕсли;
	
	Если Не ЭтаФорма.ТолькоПросмотр Тогда
		Объект.ПоказыватьЗависимыеЦены = Истина;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЗагружаемыеНастройки, "НастройкиТабличныхЧастей") Тогда
		
		НастройкиТабличныхЧастей = ЗагружаемыеНастройки.НастройкиТабличныхЧастей;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТЧНоменклатураНоменклатураАртикул", 
			"Видимость", НастройкиТабличныхЧастей.НоменклатураАртикул);
		
		Если НастройкиТабличныхЧастей.Свойство("НоменклатураШтрихкод") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТЧНоменклатураНоменклатураШтрихкод", 
				"Видимость", НастройкиТабличныхЧастей.НоменклатураШтрихкод);
		КонецЕсли;
		
		Если НастройкиТабличныхЧастей.Свойство("НоменклатураКод") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТЧНоменклатураНоменклатураКод", 
				"Видимость", НастройкиТабличныхЧастей.НоменклатураКод);
		КонецЕсли;
		
					
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТЧХарактеристикиХарактеристикаАртикул", 
			"Видимость", НастройкиТабличныхЧастей.ХарактеристикаАртикул);
		
		Если НастройкиТабличныхЧастей.Свойство("ХарактеристикаШтрихкод") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ТЧХарактеристикиХарактеристикаШтрихкод", "Видимость", НастройкиТабличныхЧастей.ХарактеристикаШтрихкод);
		КонецЕсли;
		
		Если НастройкиТабличныхЧастей.Свойство("ХарактеристикаКод") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ТЧХарактеристикиХарактеристикаКод", "Видимость", НастройкиТабличныхЧастей.ХарактеристикаКод);
		КонецЕсли;
		
	КонецЕсли;
	
	ИзменитьВидимостьЭлементовТабличныхЧастей();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНастройкиФормыПоУмолчанию()

	ЗагружаемыеНастройкиПоУмолчанию = Новый Структура;
	ЗагружаемыеНастройкиПоУмолчанию.Вставить("ПоказыватьХарактеристики", Объект.ПоказыватьХарактеристики);
	ЗагружаемыеНастройкиПоУмолчанию.Вставить("ПоказыватьНедействительныеХарактеристики",
		Объект.ПоказыватьНедействительныеХарактеристики);
	ЗагружаемыеНастройкиПоУмолчанию.Вставить("ПоказыватьОтклонениеЦен", Истина);
	ЗагружаемыеНастройкиПоУмолчанию.Вставить("ПоказыватьДействующуюЦену", Истина);
	ЗагружаемыеНастройкиПоУмолчанию.Вставить("ПоказыватьЕдиницыИзмерения", Объект.ПоказыватьЕдиницыИзмерения);
	ЗагружаемыеНастройкиПоУмолчанию.Вставить("ПоказыватьЗависимыеЦены", Истина);
	ЗагружаемыеНастройкиПоУмолчанию.Вставить("ГруппаНастроекСвернута", Ложь);
	ЗагружаемыеНастройкиПоУмолчанию.Вставить("ПраваяПанельВидимость", Ложь);
	
	НастройкиТабличныхЧастей = Новый Структура;
	НастройкиТабличныхЧастей.Вставить("НоменклатураАртикул", Ложь);
	НастройкиТабличныхЧастей.Вставить("НоменклатураШтрихкод", Ложь);
	НастройкиТабличныхЧастей.Вставить("НоменклатураКод", Ложь);
	НастройкиТабличныхЧастей.Вставить("ХарактеристикаАртикул", Ложь);
	НастройкиТабличныхЧастей.Вставить("ХарактеристикаШтрихкод", Ложь);
	НастройкиТабличныхЧастей.Вставить("ХарактеристикаКод", Ложь);
	
	ЗагружаемыеНастройкиПоУмолчанию.Вставить("НастройкиТабличныхЧастей", НастройкиТабличныхЧастей);
	
	Возврат ЗагружаемыеНастройкиПоУмолчанию;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНастройкиФормы(ЗагружаемыеНастройки, КлючНастроек)

	Возврат ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(
		"Документ.УстановкаЦенНоменклатуры.ФормаДокумента", КлючНастроек, ЗагружаемыеНастройки);

КонецФункции

&НаСервере
Процедура ПрочитатьИУстановитьНастройкиИнформационногоПоля()

	КлючОбъекта			= ИмяФормы + "/НастройкиФормы";
	КлючНастройки = "ОтображатьПанельИнформации";
	ТекущиеНастройки 	= ХранилищеСистемныхНастроек.Загрузить(КлючОбъекта, КлючНастройки);

	Если ТекущиеНастройки <> Неопределено И ТипЗнч(ТекущиеНастройки) = Тип("ХранилищеЗначения") Тогда

		Элементы.ГруппаПанельИнформации.Видимость = ТекущиеНастройки.Получить().Видимость;

	Иначе

		Элементы.ГруппаПанельИнформации.Видимость = Истина;

	КонецЕсли;

	КэшЗначений.ОтображатьИнформационноеПоле = Элементы.ГруппаПанельИнформации.Видимость;

КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиИнформационногоПоля()

	Элементы.ГруппаПанельИнформации.Видимость = Ложь;

	КлючОбъекта			= ИмяФормы + "/НастройкиФормы";
	КлючНастройки = "ОтображатьПанельИнформации";
	ТекущиеНастройки 	= ХранилищеСистемныхНастроек.Загрузить(КлючОбъекта, КлючНастройки);

	Если ТекущиеНастройки = Неопределено Тогда
		ТекущиеНастройки = Новый ХранилищеЗначения(Новый Структура("Видимость", Ложь));
	КонецЕсли;

	ХранилищеСистемныхНастроек.Сохранить(КлючОбъекта, КлючНастройки, ТекущиеНастройки);

КонецПроцедуры

#КонецОбласти

#КонецОбласти