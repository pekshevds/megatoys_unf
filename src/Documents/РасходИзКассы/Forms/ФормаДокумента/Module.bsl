
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ФормыДокументовДеньги.ПриСозданииНаСервере(ЭтаФорма);
	
	КэшЗначений = Новый Структура;
	КэшЗначений.Вставить("ВерсияПодчиненногоСчетФактуры", Неопределено);
	КэшЗначений.Вставить("МодифицированностьФормы", Ложь);
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Покупателю") Тогда
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПриходнаяНакладная") 
			ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
			СуммаВозврата = ДвиженияДенежныхСредствВызовСервера.ПолучитьСуммуПоДокументу(Объект.ДокументОснование);
			КэшЗначений.Вставить("СуммаВозврата", СуммаВозврата);
			НомерЧекаДокументаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "НомерЧекаККМ");
			КэшЗначений.Вставить("ЧекПробит", ЗначениеЗаполнено(НомерЧекаДокументаОснования));
		КонецЕсли;
	КонецЕсли;
	
	НаборСвойств_Документ_РасходИзКассы = УправлениеСвойствами.НаборСвойствПоИмени("Документ_РасходИзКассы");
	КэшЗначений.Вставить("НаборСвойств_Документ_РасходИзКассы", НаборСвойств_Документ_РасходИзКассы);
	
	КэшЗначений.Вставить("ЗапретКомиссионныхПартийБезВладельца", Константы.ЗапретКомиссионныхПартийБезВладельца.Получить());
	
	Если Объект.Ссылка.Пустая() И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		Объект.СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Объект.Организация,,Объект.Дата);
		
	КонецЕсли;
	
	СтруктурнаяЕдиницаПодразделение = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		И НЕ ЗначениеЗаполнено(Параметры.Основание)
		И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ФормыДокументовДеньги.ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС(ЭтаФорма);
	КонецЕсли;
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		СтавкаНДСПоУмолчанию = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
	ИначеЕсли Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	Иначе
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
	КонецЕсли;
	// Зачет долгов
	СтавкаНДСПоУмолчаниюЧисло = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДСПоУмолчанию);
	// Конец Зачет долгов
	
	ВалютаДенежныхСредств = Объект.ВалютаДенежныхСредств;
	Корреспонденция = Объект.Корреспонденция;
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	УстановитьВидимостьПечатиЧека();
	Если ИспользоватьПодключаемоеОборудование И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Справочники.Контрагенты.ДанныеКИКонтрагентаДляВыбораНаФорме(Объект.Контрагент, Элементы, ПоляКИДляОтправкиЧека());
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	
	// Зачет долгов
	Если Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиВручную Тогда
		Элементы.СтраницыРасчетовСКонтрагентом.ТекущаяСтраница = Элементы.СтраницаРучноеЗаполнение;
	КонецЕсли;
	
	ОбновитьИнформациюОбАвансеВРасшифровкеПлатежа();
	ПересчитатьИтогиПриИзмененииАвансаНаСервере();
	
	ИсходнаяСуммаРавнаНулю = (Объект.СуммаДокумента = 0);
	// Конец Зачет долгов
	
	ВестиРасчетыПоДокументам = Объект.Контрагент.ВестиРасчетыПоДокументам;
	ВестиУчетОплатыПоСчетам = Объект.Контрагент.ВестиУчетОплатыПоСчетам;
	
	ОтображениеПериодаРегистрации = Формат(Объект.ПериодРегистрации, "ДФ='MMMM yyyy'");
	
	// Заполнение табличной части при вводе документа из рабочего места.
	Если ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура")
	   И Параметры.ЗначенияЗаполнения.Свойство("ЗаполнитьРасшифровкаПлатежа")
	   И Параметры.ЗначенияЗаполнения.ЗаполнитьРасшифровкаПлатежа Тогда
		
		СтрокаТабличнойЧасти = Объект.РасшифровкаПлатежа[0];
		
		СтрокаТабличнойЧасти.СуммаПлатежа = Объект.СуммаДокумента;
		СтрокаТабличнойЧасти.Курс = ?(
			СтрокаТабличнойЧасти.Курс = 0,
			1,
			СтрокаТабличнойЧасти.Курс);

		
		СтрокаТабличнойЧасти.Кратность = ?(
			СтрокаТабличнойЧасти.Кратность = 0,
			1,
			СтрокаТабличнойЧасти.Кратность);

		
		СтрокаТабличнойЧасти.СуммаРасчетов = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
			СтрокаТабличнойЧасти.СуммаПлатежа,
			Курс,
			СтрокаТабличнойЧасти.Курс,
			Кратность,
			СтрокаТабличнойЧасти.Кратность);

		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.СуммаПлатежа - (СтрокаТабличнойЧасти.СуммаПлатежа) / ((СтрокаТабличнойЧасти.СтавкаНДС.Ставка + 100) / 100);
		
	КонецЕсли;
	
	ФормыДокументовДеньги.УстановитьВидимостьРеквизитовРасчетов(ЭтаФорма);
	УстановитьВидимостьИДоступность();
	УстановитьУсловноеОформление();

	
	ТекущийПользовательСистемы = Пользователи.ТекущийПользователь();
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ВзносНаличнымиВБанк") Тогда
		ЗаполнитьТаблицуОписьСдаваемыхНаличныхДенег();
	КонецЕсли;
	
	АвтоподборКонтактов.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект);
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// Остатки ДС и взаиморасчетов на форме
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	ОбновитьВидимостьИОстаткиДС();
	// Конец Остатки ДС и взаиморасчетов на форме
	
	УстановитьСвязиПараметровВыбораДоступныеТипы();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	НапоминанияПользователяУНФ.УстановитьОтображениеКомандОрганайзера(Элементы);
	ЭлектроннаяПочтаУНФ.УстановитьОтображениеКомандОтправкиСообщений(Элементы);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиУНФ.ЗаполнитьДополнительныеПараметры(Объект, "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	ФормыДокументовДеньги.ОпределитьВидимостьНастроекУчетаВНалогообложении(ЭтаФорма);
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		Элементы.РасчетыСКонтрагентом.Видимость = Ложь;
		Элементы.РасчетыПрочие.Видимость = Ложь;
		Элементы.ГруппаКасса.Видимость = Ложь;
		Элементы.ВидОперации.Видимость = Ложь;
		Элементы.НалогообложениеНДС.Видимость = Ложь;
		Элементы.АвторДокумента.Видимость = Ложь;
		Элементы.ФормаОбщаяКомандаНапомнить.Видимость = Ложь;
		Элементы.ГруппаГлобальныеКоманды.Видимость = Ложь;
		Элементы.ГруппаСсылки.Видимость = Ложь;
		Элементы.РасшифровкаПлатежаЗаказ.Видимость = Ложь;
		Элементы.РасшифровкаПлатежаСчетНаОплату.Видимость = Ложь;
		Элементы.РасшифровкаПлатежаПризнакАванса.Видимость = Ложь;
		
		Элементы.ФормаЗаписать.Видимость = Ложь;
		Элементы.ФормаПровести.Видимость = Ложь;
		Элементы.ФормаОтменаПроведения.Видимость = Ложь;
		Элементы.ФормаПоказатьВСписке.Видимость = Ложь;
		Элементы.ФормаПровестиИЗакрыть.Заголовок = НСтр("ru = 'Готово'");
	КонецЕсли;
	// Конец МобильноеПриложение
	
	ИспользуетсяОтчетность = ПолучитьФункциональнуюОпцию("ИспользоватьОтчетность");
	
	// МобильныйКлиент
	МобильныйКлиентУНФ.НастроитьФормуОбъектаМобильныйКлиент(Элементы);
	// Конец МобильныйКлиент
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УставитьТекущуюСтраницу();
	
	УправлениеНебольшойФирмойКлиент.ЗаполнитьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП);
	УправлениеНебольшойФирмойКлиент.УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьДоступностьПечатиЧека();
	
	УстановитьОтборВидаНалога();
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
		И СтрНайти(ИсточникВыбора.ИмяФормы, "ФормаКалендаря") > 0 Тогда
		
		Объект.ПериодРегистрации = КонецДня(ВыбранноеЗначение);
		ЗарплатаИПерсоналКлиент.ПриИзмененииПериодаРегистрации(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Контрагент" Тогда
		Если ЗначениеЗаполнено(Параметр)
		   И Объект.Контрагент = Параметр Тогда
			УстановитьВидимостьРеквизитовРасчетов();
		КонецЕсли;
	КонецЕсли;
	
	// Прочие расчеты
	Если ИмяСобытия = "Запись_ПланСчетовУправленческий" Тогда
		Если ЗначениеЗаполнено(Параметр)
		   И Объект.Корреспонденция = Параметр Тогда
			УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденцииНаСервере(Ложь);
		КонецЕсли;
	КонецЕсли;
	// Конец Прочие расчеты
	
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
Процедура УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденцииНаСервере(ОчиститьАналитику)
	
	ФормыДокументовДеньги.УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(ЭтаФорма, ОчиститьАналитику);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Взаиморасчеты
	Если ФормаСоздана Тогда
		ТаблицаДокументовДляИзменения.Очистить();
		НадписьДокументЗачетаПредоплаты = "";
		Элементы.ГруппаЗачетПредоплатыПоСтроке.Видимость = Ложь;
		ФормыДокументовДеньги.НастроитьЭлементыРаспределенияДолговНаСервере(ЭтаФорма);
	КонецЕсли;
	
	СпособЗачетаПоУмолчаниюДляКонтрагента = РасчетыРаботаСФормамиВызовСервера.СпособРазнесенияОплатыДляКонтрагента(Объект.Контрагент);
	// Конец Взаиморасчеты
	
	ВестиРасчетыПоДокументам = Объект.Контрагент.ВестиРасчетыПоДокументам;
	ВестиУчетОплатыПоСчетам = Объект.Контрагент.ВестиУчетОплатыПоСчетам;
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Не ТипЗнч(КэшЗначений) = Тип("Структура") Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	КэшЗначений.Вставить("ЗапретКомиссионныхПартийБезВладельца", Константы.ЗапретКомиссионныхПартийБезВладельца.Получить());
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	УправлениеНебольшойФирмойКлиент.УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП, Истина);
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("Проведение"
			+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	КэшЗначений.МодифицированностьФормы = Модифицированность;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Взаиморасчеты
	РасчетыРаботаСФормамиВызовСервера.ПередЗаписьюНаСервереДеньги(ЭтотОбъект, ТекущийОбъект);
	// Конец Взаиморасчеты
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ТекстСообщения = "";
		Справочники.ДоговорыКонтрагентов.ПроверитьСоответствиеДоговораУсловиямДокумента(
			ТекстСообщения,
			,
			Объект.Ссылка,
			Объект.Организация,
			Объект.Контрагент,
			Отказ,
			Объект.ВидОперации,
			Объект.РасшифровкаПлатежа,
			Объект.ДоговорКредитаЗайма);
		
		Если ТекстСообщения <> "" Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Если Отказ Тогда
				Сообщение.Текст = СтрШаблон(НСтр("ru = 'Документ не проведен. %1'"), ТекстСообщения);
			Иначе
				Сообщение.Текст = ТекстСообщения;
			КонецЕсли;
			Сообщение.Сообщить();
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьОписьСдаваемыхДенег")
			И Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ВзносНаличнымиВБанк Тогда
			
			Если Объект.СуммаДокумента <> ТаблицаОписьСдаваемыхНаличныхДенег.Итог("Сумма") Тогда
				Текст = НСтр("ru = 'Сумма описи документа должна равняться сумме документа.'");
				ОбщегоНазначения.СообщитьПользователю(Текст,,,, Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОписьСдаваемыхДенег")
			И Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ВзносНаличнымиВБанк Тогда
		Если ТаблицаОписьСдаваемыхНаличныхДенег.Количество() > 0 Тогда
			ТекущийОбъект.ОписьСдаваемыхНаличныхДенег.Загрузить(ТаблицаОписьСдаваемыхНаличныхДенег.Выгрузить());
		КонецЕсли;
	КонецЕсли;
			
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДополнительныеСвойства.Свойство("ВерсияПодчиненногоСчетФактуры", КэшЗначений.ВерсияПодчиненногоСчетФактуры);
	
	// Прочие расчеты
	Если ТекущийОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ВыдачаЗаймаСотруднику") Или
		ТекущийОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.РасчетыПоКредитам") Тогда
		ФормыДокументовДеньги.ЗаполнитьИнформациюПоКредитуЗаймуНаСервере(ЭтаФорма);
	КонецЕсли;
	
	// Конец Прочие расчеты
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	ОбновитьВидимостьИОстаткиДС();
	
	// Зачет долгов
	ОбновитьИнформациюОбАвансеВРасшифровкеПлатежа();
	
	ИсходнаяСуммаРавнаНулю = (Объект.СуммаДокумента = 0);
	
	НадписьДокументЗачетаПредоплаты = "";
	Элементы.ГруппаЗачетПредоплатыПоСтроке.Видимость = Ложь;
	
	ДатаПриСозданииНаСервере = Объект.Дата;
	
	Если ТекущийОбъект.Проведен ИЛИ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ТаблицаДокументовДляИзменения.Очистить();
		ЗаполнитьТаблицуПросмотраНаСервере(ТекущийОбъект.Проведен);
	КонецЕсли;
	// Конец Зачет долгов

	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);	
	// Конец Обсуждения
	
	Если ТекущийОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Поставщику")
		ИЛИ ТекущийОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.НашейОрганизации") Тогда
		Справочники.ДоговорыКонтрагентов.ЗаписатьСпособЗаполненияСтавкиНДСПоДокументамОплаты(
			ТекущийОбъект.РасшифровкаПлатежа, ТекущийОбъект.Ссылка);
	КонецЕсли;
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	Если КэшЗначений.МодифицированностьФормы = Истина
		И КэшЗначений.ВерсияПодчиненногоСчетФактуры = "1.6.11" Тогда
		
		ТекстВопроса = НСтр("ru = 'В накладную были внесены изменения.
			|Требуется самостоятельно поправить подчиненный документ счет-фактура'");
		
		ПоказатьПредупреждение(, ТекстВопроса, 0, НСтр("ru ='Счет-фактура'"));
		
	КонецЕсли;
	
	Если СозданПоКомандеИзФормыСписка Тогда
		ПараметрыОповещения = Новый Структура("Ссылка", Объект.Ссылка);
		Оповестить("Запись_РасходИзКассы", ПараметрыОповещения);
	КонецЕсли;
	
	// Оповещение об оплате.
	ОповеститьОбОплатеСчета = Ложь;
	ОповеститьОбОплатеЗаказа = Ложь;
	
	Для каждого ТекСтрока Из Объект.РасшифровкаПлатежа Цикл
		ОповеститьОбОплатеСчета = ?(
			ОповеститьОбОплатеСчета,
			ОповеститьОбОплатеСчета,
			ЗначениеЗаполнено(ТекСтрока.СчетНаОплату));
		ОповеститьОбОплатеЗаказа = ?(
			ОповеститьОбОплатеЗаказа,
			ОповеститьОбОплатеЗаказа,
			ЗначениеЗаполнено(ТекСтрока.Заказ));
	КонецЦикла;
	
	Если ОповеститьОбОплатеСчета Тогда
		ОповеститьОбИзменении(Тип("ДокументСсылка.СчетНаОплату"));
		ОповеститьОбИзменении(Тип("ДокументСсылка.СчетНаОплатуПоставщика"));
	КонецЕсли;
	
	Если ОповеститьОбОплатеЗаказа Тогда
		Оповестить("ОповещениеОбОплатеЗаказа");
	КонецЕсли;
	
	Оповестить("ОповещениеОбИзмененииДолга");
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры // ПослеЗаписи()

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьВНУПриИзменении(Элемент)
	Если Объект.УчитыватьВНУ Тогда
		Объект.Патент = ПредопределенноеЗначение("Справочник.Патенты.ПустаяСсылка");
	КонецЕсли;
	Элементы.Патент.Доступность = Не Объект.УчитыватьВНУ;
	УстановитьНалоговыйСпецРежим();
КонецПроцедуры  

&НаКлиенте
Процедура УстановитьНалоговыйСпецРежим()
	Если ЗначениеЗаполнено(Объект.Патент) Тогда
		Объект.СпециальныйНалоговыйРежим = ПредопределенноеЗначение("Перечисление.СпециальныеНалоговыеРежимы.ПСН");
	Иначе
		Если Объект.СпециальныйНалоговыйРежим = ПредопределенноеЗначение("Перечисление.СпециальныеНалоговыеРежимы.ПСН") Тогда
			Объект.СпециальныйНалоговыйРежим = ПредопределенноеЗначение("Перечисление.СпециальныеНалоговыеРежимы.НеПрименяется");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПатентПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Патент) Тогда
		Объект.УчитыватьВНУ = Ложь;
	КонецЕсли;
	УстановитьНалоговыйСпецРежим();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДокументОснованиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ФормыДокументовДеньгиКлиент.ДокументОснованиеНадписьОбработкаНавигационнойСсылки(ЭтаФорма, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	
	ДанныеКонтрагента = ДанныеКонтрагентаДляИзменения(Объект.Контрагент, КонтрагентПередИзменением, Объект.Организация,
		Объект.Дата);
	
	ВладелецДоговораПоУмолчанию = Объект.Контрагент;
	ДоговорКонтрагентаПоУмолчанию = ДанныеКонтрагента.Договор;
	
	// Поменяем Выдать, если оно пустое или пользователь не менял его вручную.
	Если Не ЗначениеЗаполнено(Объект.Выдать)
		Или (СокрЛП(Объект.Выдать) = СокрЛП(ДанныеКонтрагента.КонтрагентПередИзменениемНаименованиеПолное)) Тогда
		Объект.Выдать = ДанныеКонтрагента.КонтрагентНаименованиеПолное;
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда 
		
		Объект.РасшифровкаПлатежа[0].Договор = ДанныеКонтрагента.Договор;
		Объект.РасшифровкаПлатежа[0].СтавкаНДС = РасчетыРаботаСФормамиВызовСервера.СтавкаНДСПоОрганизацииНалогообложениеНДСИСпособуЗаполнения(Объект.Организация, Объект.Дата, ДанныеКонтрагента.СпособЗаполненияСтавкиНДС);
		
		Если ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].Договор) Тогда
			Объект.РасшифровкаПлатежа[0].Курс = ?(
				ДанныеКонтрагента.ДоговорВалютаКурсКратность.Курс = 0,
				1,
				ДанныеКонтрагента.ДоговорВалютаКурсКратность.Курс);
			Объект.РасшифровкаПлатежа[0].Кратность = ?(
				ДанныеКонтрагента.ДоговорВалютаКурсКратность.Кратность = 0,
				1,
				ДанныеКонтрагента.ДоговорВалютаКурсКратность.Кратность);
		КонецЕсли;
		
		Объект.РасшифровкаПлатежа[0].Курс = ?(
			Объект.РасшифровкаПлатежа[0].Курс = 0,
			1,
			Объект.РасшифровкаПлатежа[0].Курс);
		Объект.РасшифровкаПлатежа[0].Кратность = ?(
			Объект.РасшифровкаПлатежа[0].Кратность = 0,
			1,
			Объект.РасшифровкаПлатежа[0].Кратность);
		
		Объект.РасшифровкаПлатежа[0].СуммаРасчетов = ВалютыУНФКлиентСервер.Пересчитать(
			Объект.РасшифровкаПлатежа[0].СуммаПлатежа, Курс, Объект.РасшифровкаПлатежа[0].Курс, Кратность,
			Объект.РасшифровкаПлатежа[0].Кратность);
		
		Если Объект.ВидОперации = ВидОперацииПоставщику
			ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации Тогда
			Объект.РасшифровкаПлатежа[0].СпособЗачета = ДанныеКонтрагента.СпособЗачета;
		Иначе
			Объект.РасшифровкаПлатежа[0].СпособЗачета = СпособЗачетаВручную;
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство("Проект") Тогда
			Объект.РасшифровкаПлатежа[0].Проект = ДанныеКонтрагента.Проект;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеКонтрагента.Свойство("Проект") Тогда
		Объект.Проект = ДанныеКонтрагента.Проект;
	КонецЕсли;
	
	// Статьи ДДС
	УстановитьСтатьиДДСВРасшифровкеПлатежа();
	// Конец Статьи ДДС
	
	// Прочие расчеты
	Если ДанныеКонтрагента.Свойство("ДоговорКредитаЗаймаПоУмолчанию") Тогда
		Объект.ДоговорКредитаЗайма = ДанныеКонтрагента.ДоговорКредитаЗаймаПоУмолчанию;
		ОбработатьИзменениеДоговораКредитаИлиЗайма();
	КонецЕсли;
	// Конец Прочие расчеты
	
	Если ЗначениеЗаполнено(ДанныеКонтрагента.СтатьяДДСПоУмолчанию) Тогда
		Объект.Статья = ДанныеКонтрагента.СтатьяДДСПоУмолчанию;
		Объект.УчитыватьВНУ = ДанныеКонтрагента.УчитыватьВНУ;
	КонецЕсли;
	
	ВестиРасчетыПоДокументам = ДанныеКонтрагента.ВестиРасчетыПоДокументам;
	ВестиУчетОплатыПоСчетам = ДанныеКонтрагента.ВестиУчетОплатыПоСчетам;
	Если ВестиРасчетыПоДокументам И Объект.ВидОперации = ВидОперацииПокупателю Тогда
		Для Каждого ТекущаяСтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
			ТекущаяСтрокаРасшифровки.ПризнакАванса = Ложь;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьТаблицуПросмотраНаКлиенте();
	
	// Видимость флага "ПризнакАванса" зависит от установленных флагов учета в карточке контрагента.
	УстановитьУсловноеОформлениеПоДаннымКонтрагента();
	
КонецПроцедуры // КонтрагентПриИзменении()

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ВидОперацииПередИзменением = ВидОперации;
	ВидОперации = Объект.ВидОперации;
	
	Если ВидОперации <> ВидОперацииПередИзменением Тогда
		УставитьТекущуюСтраницу();
		ОчиститьРеквизитыНеОтносящиесяКОперации();
		ВидОперацииПриИзмененииНаСервере();
		Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
		КонецЕсли;
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику") Тогда 
			ЗарплатаИПерсоналКлиент.ПриИзмененииПериодаРегистрации(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчанию();
	УстановитьОтборВидаНалога();
	
КонецПроцедуры // ВидОперацииПриИзменении()

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДанныеДляИзмененияДаты = ДокументыУНФКлиент.ДанныеДляИзмененияДаты(ЭтотОбъект, Объект);
	Если ДанныеДляИзмененияДаты.ДатаНеМенялась Тогда
		Возврат;
	КонецЕсли;
	
	ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты);
	
	// Обновление курсов расчетов
	ДанныеДляИзмененияДаты.Вставить("ОбновитьКурсыРасчетов", (Объект.РасшифровкаПлатежа.Количество() > 0
		И Объект.РасшифровкаПлатежа.Итог("Курс") > 0 И Объект.РасшифровкаПлатежа.Количество()
		<> Объект.РасшифровкаПлатежа.Итог("Курс")));
	ДанныеДляИзмененияДаты.Вставить("ОбновитьКурсыРасчетовТекстВопроса", НСтр(
		"ru = 'Изменилась дата документа. Установить курс расчетов в соответствии с курсом валюты договора?'"));
	// Конец Обновление курсов расчетов
	
	ТекстСообщения = НСтр("ru = 'Изменился курс валюты кассы. Пересчитать суммы документа?'");
	ПересчитатьСуммыПриИзмененииКурсаВалютыДенежныхСредств(ДанныеДляИзмененияДаты, ТекстСообщения);
	
	Если ЗначениеЗаполнено(Объект.ВидНалога) Тогда
		Объект.СрокУплаты = ПолучитьСрокУплаты(Объект.ВидНалога, Объект.Дата);
	КонецЕсли;
	
	ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчанию();
	
	УстановитьОтборВидаНалога();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	КассаДоИзменения = Объект.Касса;
	
	ОрганизацияПриИзмененииНаСервере();
	УстановитьОтборВидаНалога();
	ЗаполнитьТаблицуПросмотраНаКлиенте();
	
	Если КассаДоИзменения <> Объект.Касса Тогда
		КассаПриИзменении(Неопределено);
	КонецЕсли;
	
	УстановитьОтборВидаНалога();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДенежныхСредствПриИзменении(Элемент)
	
	ВалютаДенежныхСредствПередИзменением = ВалютаДенежныхСредств;
	ВалютаДенежныхСредств = Объект.ВалютаДенежныхСредств;
	
	// Если валюта не изменилась, то ничего не делаем.
	Если ВалютаДенежныхСредств = ВалютаДенежныхСредствПередИзменением Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Зарплата") Тогда
		ТекстСообщения = НСтр("ru = 'Изменилась валюта кассы. Список ""Платежные ведомости"" будет очищен.'");
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ВалютаДенежныхСредствПриИзмененииЗавершение", ЭтотОбъект,
			Новый Структура("ТекстСообщения", ТекстСообщения)), ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ВалютаДенежныхСредствПриИзмененииФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДенежныхСредствПриИзмененииЗавершение(ДополнительныеПараметры) Экспорт
	
	Объект.ВыплатаЗаработнойПлаты.Очистить();
	Объект.ВыплатаРегламентированнойЗаработнойПлаты.Очистить();
	
	ВалютаДенежныхСредствПриИзмененииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ВалютаДенежныхСредствПриИзмененииФрагмент()
	
	Перем СтруктураДанные, ТекстСообщения;
	
	СтруктураДанные = ПолучитьДанныеВалютаДенежныхСредствПриИзменении(Объект.Дата, Объект.ВалютаДенежныхСредств);
	
	ТекстСообщения = НСтр("ru = 'Пересчитать суммы документа?'");
	ПересчитатьСуммыПриИзмененииКурсаВалютыДенежныхСредств(СтруктураДанные, ТекстСообщения);

	УстановитьЗаголовкиКолонокТабличныхЧастей(Объект.ВалютаДенежныхСредств);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодотчетникПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику") Тогда
		Объект.Подразделение = РасчетыРаботаСФормамиВызовСервера.ПолучитьТекущееПодразделениеСотрудника(Объект.Подотчетник);
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеПодотчетникПриИзменении(Объект.Подотчетник, Объект.Дата);
	Объект.Выдать = СтруктураДанные.ПодотчетникНаименование;
	Объект.ПоДокументу = СтрШаблон(НСтр("ru = '%1 серия %2, номер %3, выданный %4 %5'"), СтруктураДанные.ДокументВид,
		СтруктураДанные.ДокументСерия, СтруктураДанные.ДокументНомер, Формат(СтруктураДанные.ДокументДатаВыдачи,
		"ДЛФ=D;"), СтруктураДанные.ДокументКемВыдан);
	
КонецПроцедуры

&НаКлиенте
Процедура КорреспонденцияПриИзменении(Элемент)
	
	Если Корреспонденция <> Объект.Корреспонденция Тогда
		УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденцииНаСервере(Истина);
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Корреспонденция = Объект.Корреспонденция;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	// Зачет долгов
	ИсходнаяСуммаРавнаНулю = (Объект.СуммаДокумента = 0);
	// Конец Зачет долгов
	
	СуммаДокументаПриИзмененииФрагмент();
	ЗаполнитьПризнакСпособаРасчетаНаКлиенте();
	
КонецПроцедуры // СуммаДокументаПриИзменении()

&НаКлиенте
Процедура СуммаДокументаПриИзмененииФрагмент()
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		
		СтрокаТабличнойЧасти = Объект.РасшифровкаПлатежа[0];
		
		СтрокаТабличнойЧасти.СуммаПлатежа = Объект.СуммаДокумента;
		СтрокаТабличнойЧасти.Курс = ?(
			СтрокаТабличнойЧасти.Курс = 0,
			1,
			СтрокаТабличнойЧасти.Курс);
		
		СтрокаТабличнойЧасти.Кратность = ?(
			СтрокаТабличнойЧасти.Кратность = 0,
			1,
			СтрокаТабличнойЧасти.Кратность);
		
		СтрокаТабличнойЧасти.СуммаРасчетов = ВалютыУНФКлиентСервер.Пересчитать(
			СтрокаТабличнойЧасти.СуммаПлатежа, Курс, СтрокаТабличнойЧасти.Курс, Кратность,
			СтрокаТабличнойЧасти.Кратность);
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Аванс = ?(СтрокаТабличнойЧасти.ПризнакАванса, СтрокаТабличнойЧасти.СуммаПлатежа, 0);
		
		РасчетыРаботаСФормамиКлиент.РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
	Если Объект.ВидОперации = ВидОперацииПоставщику 
		ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации Тогда
		ПересчитатьИтогиПриИзмененииАвансаНаСервере();
	Иначе
		СуммаПлатежаДляУсловногоОформления = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
	ЗаполнитьТаблицуПросмотраНаКлиенте();
	
КонецПроцедуры // СуммаДокументаПриИзменении()

&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	
	ФормыДокументовДеньгиКлиент.КассаПриИзменении(ЭтотОбъект);
	ОбновитьВидимостьИОстаткиДС();
	
КонецПроцедуры // КассаПриИзменении()

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыВедомостьПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные;
	ПараметрыВедомости = ПолучитьДанныеВыплатаЗаработнойПлатыВедомостьПриИзменении(СтрокаТабличнойЧасти.Ведомость);
	СтрокаТабличнойЧасти.Подразделение = ПараметрыВедомости.Подразделение;
	СтрокаТабличнойЧасти.СуммаПлатежа = ПараметрыВедомости.СуммаПлатежа;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаРегламентированнойЗаработнойПлатыВедомостьПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВыплатаРегламентированнойЗаработнойПлаты.ТекущиеДанные;
	ПараметрыВедомости = ПолучитьДанныеВыплатаРегламентированнойЗаработнойПлатыВедомостьПриИзменении(СтрокаТабличнойЧасти.Ведомость);
	СтрокаТабличнойЧасти.СуммаПлатежа = ПараметрыВедомости.СуммаПлатежа;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаИПерсоналКлиент.ПриРегулированииПериодаРегистрации(ЭтотОбъект, Направление);
	ЗарплатаИПерсоналКлиент.ПриИзмененииПериодаРегистрации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		ДатаКалендаряПриОткрытии = Объект.ПериодРегистрации;
	Иначе
		ДатаКалендаряПриОткрытии = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ФормаКалендаря", ОбщегоНазначенияУНФКлиент.ПараметрыОткрытияФормыКалендаря(
		ДатаКалендаряПриОткрытии), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	
	ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяПриИзменении(Элемент)
	ФормыДокументовДеньгиКлиент.СтатьяПриИзменении(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОстатокВзаиморасчетовНажатие(Элемент)
	
	РаботаСФормойДокументаКлиент.ОткрытьОтчетВзаиморасчетыСКонтрагентом(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокВзаиморасчетовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	РаботаСФормойДокументаКлиент.ОткрытьОтчетВзаиморасчетыСКонтрагентом(Объект.Контрагент);

КонецПроцедуры

&НаКлиенте
Процедура ОстатокДенежныхСредствНажатие(Элемент)
	
	РаботаСФормойДокументаКлиент.ОткрытьОтчетДенежныеСредства(Объект.Касса, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокДенежныхСредствОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСФормойДокументаКлиент.ОткрытьОтчетДенежныеСредства(Объект.Касса, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаполненияРасшифровкиПриИзменении(Элемент)
	
	НастроитьЭлементыРаспределенияДолговНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыРаспределенияДолговНаСервере()
	
	ФормыДокументовДеньги.НастроитьЭлементыРаспределенияДолговНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Если Объект.ВидОперации = ВидОперацииПоставщику
		ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации Тогда
		
		СуммаИтог = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
		Если СуммаИтог <> 0 И СуммаИтог <> Объект.СуммаДокумента Тогда
			НадписьВСкобках = ?(Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиВручную, 
				НСтр("ru = 'разнесено вручную'"), 
				НСтр("ru = 'зачтено + аванс'"));
			
			Элемент.СписокВыбора.Добавить(СуммаИтог, ""+СуммаИтог+" ("+НадписьВСкобках+")");
		КонецЕсли;
		
		Если ОстатокВзаиморасчетов < 0 И (-ОстатокВзаиморасчетов) <> Объект.СуммаДокумента Тогда
			Элемент.СписокВыбора.Добавить(-ОстатокВзаиморасчетов, ""+(-ОстатокВзаиморасчетов)+НСтр("ru = ' (мы должны)'"));
		КонецЕсли;
		
		Если ОстатокДенежныхСредств > 0 И (ОстатокДенежныхСредств) <> Объект.СуммаДокумента Тогда
			Элемент.СписокВыбора.Добавить(ОстатокДенежныхСредств, ""+(ОстатокДенежныхСредств)+НСтр("ru = ' (остаток в кассе)'"));
		КонецЕсли;
		
		Если Элемент.СписокВыбора.Количество() = 0 Тогда
			Элемент.СписокВыбора.Добавить(Объект.СуммаДокумента, НСтр("ru = 'Нет данных для заполнения'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.Подотчетник.Пустая() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Сначала нужно выбрать подотчетника'"), ,
			"Объект.Подотчетник");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "НачалоВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидНалогаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ВидНалога) Тогда
		Объект.СрокУплаты = ПолучитьСрокУплаты(Объект.ВидНалога, Объект.Дата);
	КонецЕсли;
	
	ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчанию();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПослеУдаления(Элемент)
	
	ПересчитатьИтогиПриИзмененииАвансаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	РасчетыРаботаСФормамиКлиент.ОбработатьИзменениеДоговораКонтрагента(ЭтотОбъект, СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасчетыРаботаСФормамиКлиент.ОбработатьНачалоВыбораДоговораКонтрагента(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Владелец", Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ВидДоговора", ВидДоговораПриСоздании(Объект.ВидОперации));
	ПараметрыФормы.Вставить("ОповеститьОЗаписиДоговора", Истина);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, Элемент);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидДоговораПриСоздании(ВидОперации)
	Если ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю  Тогда
		Возврат Перечисления.ВидыДоговоров.СПокупателем;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации Тогда
		Возврат Перечисления.ВидыДоговоров.СПоставщиком;
	Иначе
		Возврат Перечисления.ВидыДоговоров.Прочее;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура РасшифровкаПлатежаПризнакАвансаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Поставщику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.НашейОрганизации") Тогда
		Если СтрокаТабличнойЧасти.ПризнакАванса Тогда
			СтрокаТабличнойЧасти.Документ = Неопределено;
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Покупателю")
		И ВестиРасчетыПоДокументам Тогда
		Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеВКассу")
		 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеНаСчет")
		 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ОперацияПоПлатежнымКартам") Тогда
			СтрокаТабличнойЧасти.ПризнакАванса = Истина;
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Для данного типа документа расчетов признак аванса всегда установлен.'"));
		ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.Взаимозачет") Тогда
			СтрокаТабличнойЧасти.ПризнакАванса = Ложь;
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Для данного типа документа расчетов нельзя установить признак аванса.'"));
		КонецЕсли;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Аванс = ?(СтрокаТабличнойЧасти.ПризнакАванса , СтрокаТабличнойЧасти.СуммаПлатежа, 0);
	ПересчитатьИтогиПриИзмененииАвансаНаКлиенте();
	
КонецПроцедуры // РасшифровкаПлатежаПризнакАвансаПриИзменении()

&НаКлиенте
Процедура РасшифровкаПлатежаДокументПриИзменении(Элемент)
	
	ВыполнитьДействияПриИзмененииДокументаРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено И СтрокаТабличнойЧасти.СпособЗачета = СпособЗачетаАвтоматически Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоРасчетыСПокупателями = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Покупателю");
	
	СтруктураОтбор = Новый Структура();
	СтруктураОтбор.Вставить("Контрагент", Объект.Контрагент);
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда
		СтруктураОтбор.Вставить("Договор", СтрокаТабличнойЧасти.Договор);
	КонецЕсли;
	Если НЕ УчетПоКомпании Тогда
		СтруктураОтбор.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура("Отбор, ЭтоРасчетыСПокупателями, ТипДокумента",
		СтруктураОтбор,
		ЭтоРасчетыСПокупателями,
		ТипЗнч(Объект.Ссылка));
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыборДокументаРасчетов", СтруктураПараметры, Элемент);
	
КонецПроцедуры // РасшифровкаПлатежаДокументНачалоВыбора()

&НаКлиенте
Процедура РасшифровкаПлатежаДокументОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьВыборДокументаРасчетов(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаРасчетовПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуПлатежаНаКлиенте(ЭтотОбъект, Элементы.РасшифровкаПлатежа.ТекущиеДанные);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 ИЛИ ИсходнаяСуммаРавнаНулю Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
	ЗаполнитьПризнакСпособаРасчетаНаКлиенте();
	
КонецПроцедуры // РасшифровкаПлатежаСуммаРасчетовПриИзменении()

&НаКлиенте
Процедура РасшифровкаПлатежаКурсПриИзменении(Элемент)
	
	РасшифровкаПлатежаКурсПриИзмененииФрагмент(Элементы.РасшифровкаПлатежа.ТекущиеДанные);
	
КонецПроцедуры // РасшифровкаПлатежаКурсПриИзменении()

&НаКлиенте
Процедура РасшифровкаПлатежаКурсПриИзмененииФрагмент(ТекущиеДанные)
	
	Если ТекущиеДанные.СуммаПлатежа = 0 И ТекущиеДанные.СуммаРасчетов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуПлатежаНаКлиенте(ЭтотОбъект, ТекущиеДанные, "Курс");
		
	Если Объект.РасшифровкаПлатежа.Количество() = 1 ИЛИ ИсходнаяСуммаРавнаНулю Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
КонецПроцедуры // РасшифровкаПлатежаКурсПриИзменении()

&НаКлиенте
Процедура РасшифровкаПлатежаКурсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасчетыРаботаСФормамиКлиент.ПредоплатаКурсНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, "РасшифровкаПлатежа");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКратностьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ТекущиеДанные.СуммаПлатежа = 0 И ТекущиеДанные.СуммаРасчетов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуПлатежаНаКлиенте(ЭтотОбъект, Элементы.РасшифровкаПлатежа.ТекущиеДанные, "Кратность");
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 ИЛИ ИсходнаяСуммаРавнаНулю Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
КонецПроцедуры // РасшифровкаПлатежаКратностьПриИзменении()

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	РасчетыРаботаСФормамиКлиент.РасшифровкаПлатежаСуммаПлатежаПриИзмененииЗавершениеНаКлиенте(СтрокаТабличнойЧасти,
		Объект.Дата, Объект.ВалютаДенежныхСредств, Курс, Кратность, СтавкаНДСПоУмолчанию);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 ИЛИ ИсходнаяСуммаРавнаНулю Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
		
	ПересчитатьИтогиПриИзмененииАвансаНаКлиенте();
	ЗаполнитьПризнакСпособаРасчетаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСчетНаОплатуПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ВидОперацииПоставщику
		ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации Тогда
		РасшифровкаПлатежаСчетНаОплатуПриИзмененииФрагмент(Элементы.РасшифровкаПлатежа.ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаСчетНаОплатуПриИзмененииФрагмент(ТекущиеДанныеИдентификатор)
	
	ТекущиеДанные = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	
	ФормыДокументовДеньгиВызовСервера.ЗаполнитьПодразделениеИзСчетаНаОплату(ТекущиеДанные.Подразделение,
		ТекущиеДанные.СчетНаОплату);
	
	Если Объект.Контрагент.ВестиРасчетыПоЗаказам Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.СчетНаОплату) Тогда
			ТекущиеДанные.СпособЗачета = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
			Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Заказ) И
				ТипЗнч(ТекущиеДанные.СчетНаОплату) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") И
				ТипЗнч(ТекущиеДанные.СчетНаОплату.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				
				ТекущиеДанные.Заказ = ТекущиеДанные.СчетНаОплату.ДокументОснование;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаказПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ВидОперацииПоставщику
		ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации Тогда
		ИзменилиСуммуПлатежа = РасшифровкаПлатежаЗаказПриИзмененииФрагмент(Элементы.РасшифровкаПлатежа.ТекущиеДанные.ПолучитьИдентификатор());
		Если ИзменилиСуммуПлатежа И Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
			СуммаДокументаПриИзменении(Элемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РасшифровкаПлатежаЗаказПриИзмененииФрагмент(ТекущиеДанныеИдентификатор)
	
	Возврат РасчетыРаботаСФормамиВызовСервера.РасшифровкаПлатежаЗаказПриИзмененииФрагмент(Объект, ТекущиеДанныеИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура РасчетыСПодотчетникомРасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДокументыПланированияРасшифровкаПлатежа.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущаяСтрока.СуммаРасчетов = ТекущаяСтрока.СуммаПлатежа;
	КонецЕсли;
	ПересчитатьИтогиПриИзмененииАвансаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДокументПланированияПриИзменении(Элемент)
	
	ФормыДокументовДеньгиКлиент.ДокументПланированияПриИзменении(ЭтотОбъект, "РасшифровкаПлатежа");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыСчетНаОплатуПриИзменении(Элемент)
	
	ФормыДокументовДеньгиКлиент.ДокументПланированияПриИзменении(ЭтотОбъект, "ВыплатаЗаработнойПлаты");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПризнакСпособаРасчетаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;	
	
	Если СтрокаТабличнойЧасти <> Неопределено И СтрокаТабличнойЧасти.СпособЗачета = СпособЗачетаАвтоматически Тогда
		Возврат;
	КонецЕсли;   
	Для каждого стрРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		Если стрРасшифровки.Заказ = СтрокаТабличнойЧасти.Заказ
			И стрРасшифровки.Документ = СтрокаТабличнойЧасти.Документ 
 			И стрРасшифровки.ПризнакАванса = СтрокаТабличнойЧасти.ПризнакАванса
			И стрРасшифровки.Договор = СтрокаТабличнойЧасти.Договор Тогда
			стрРасшифровки.ПризнакСпособаРасчета = СтрокаТабличнойЧасти.ПризнакСпособаРасчета;
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПовторнаяПечатьЧека()
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПовторнаяПечатьЧекаПродолжение", ЭтотОбъект);
		МассивОборудования = Новый Массив;
		МассивОборудования.Добавить("ФискальныйРегистратор");
		МассивОборудования.Добавить("ККТ");
		ОтборОборудования = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();
		ОтборОборудования.Вставить("ТипыПО", МассивОборудования);
		ОтборОборудования.Вставить("Организация", Объект.Организация);
		МенеджерОборудованияКлиент.ВыбратьУстройство(ОписаниеОповещения, ОтборОборудования,
				НСтр("ru='Выберите оборудование'"), НСтр("ru='Оборудование не подключено.'"));
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторнаяПечатьЧекаПродолжение(РезультатВыбора, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		ИдентификаторУстройстваФискальногоРегистратора = РезультатВыбора.ИдентификаторУстройства;
	КонецЕсли;
	
	Если ИдентификаторУстройстваФискальногоРегистратора = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗавершитьПовторнуюПечатьФискальногоЧека", ЭтотОбъект);
	
	Если ЗначениеЗаполнено(ИдентификаторУстройстваФискальногоРегистратора) Тогда
		
		ПараметрыОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПечатьКопииЧека();
		ПараметрыОперации.ДокументСсылка = Объект.Ссылка;
		ПараметрыОперации.Аппаратно = Ложь;
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПечатьКопииЧека(ОповещениеПриЗавершении,
			ЭтаФорма, ИдентификаторУстройстваФискальногоРегистратора, ПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПовторнуюПечатьФискальногоЧека(РезультатВыполнения, ПараметрДействия) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РезультатВыполнения, "Результат") И НЕ РезультатВыполнения.Результат Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Произошла ошибка при попытке повторной печати фискального чека.
			|Причина: %1'"), РезультатВыполнения.ОписаниеОшибки);
		ПоказатьПредупреждение(, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРеквизитыПечатиНажатие(Элемент)
	
	ОткрытьФормуРеквизитыПечати();
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите вначале контрагента.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите вначале валюту.'"));
		Возврат;
	КонецЕсли;
	
	АдресРасшифровкаПлатежаВХранилище = ПоместитьРасшифровкаПлатежаВХранилище();
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("АдресРасшифровкаПлатежаВХранилище", АдресРасшифровкаПлатежаВХранилище);
	ПараметрыПодбора.Вставить("Компания", Компания);
	ПараметрыПодбора.Вставить("Дата", Объект.Дата);
	ПараметрыПодбора.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("ВидОперации", Объект.ВидОперации);
	ПараметрыПодбора.Вставить("ВалютаДенежныхСредств", Объект.ВалютаДенежныхСредств);
	ПараметрыПодбора.Вставить("СуммаДокумента", Объект.СуммаДокумента);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораДолговПоставщикам", ПараметрыПодбора, , , , ,
		Новый ОписаниеОповещения("ПодборЗавершение", ЭтотОбъект, Новый Структура("АдресРасшифровкаПлатежаВХранилище",
		АдресРасшифровкаПлатежаВХранилище)));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗавершение(Результат1, ДополнительныеПараметры) Экспорт
	
	АдресРасшифровкаПлатежаВХранилище = ДополнительныеПараметры.АдресРасшифровкаПлатежаВХранилище;
	
	Результат = Результат1;
	Если Результат = КодВозвратаДиалога.OK Тогда
		
		ПолучитьРасшифровкаПлатежаИзХранилища(АдресРасшифровкаПлатежаВХранилище);
		Для каждого СтрокаРасшифровкаПлатежа Из Объект.РасшифровкаПлатежа Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаРасшифровкаПлатежа.СтавкаНДС) Тогда
				СтрокаРасшифровкаПлатежа.СтавкаНДС = СтавкаНДСПоУмолчанию;
			КонецЕсли;
			РасчетыРаботаСФормамиКлиент.РассчитатьСуммуПлатежаНаКлиенте(ЭтотОбъект, СтрокаРасшифровкаПлатежа);
			СтрокаРасшифровкаПлатежа.СпособЗачета = СпособЗачетаВручную;
		КонецЦикла;
		
		УставитьТекущуюСтраницу();
		
		Если Объект.РасшифровкаПлатежа.Количество() = 1 ИЛИ ИсходнаяСуммаРавнаНулю Тогда
			Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // Подбор()

&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru='Не выбран документ основание.'"));
		Возврат;
	КонецЕсли;
	
	Если (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПеремещениеДСПлан")
		ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РасходДСПлан"))
		И НЕ ДокументУтвержден(Объект.ДокументОснование) Тогда
		ВызватьИсключение НСтр("ru = 'Нельзя ввести перемещение денег на основании неутвержденного планового документа.'");
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект), НСтр(
		"ru = 'Документ будет полностью перезаполнен по ""Документу-основанию"". Продолжить выполнение операции?'"),
		РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.РасшифровкаПлатежа.Очистить();
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Объект.ВыплатаРегламентированнойЗаработнойПлаты.Очистить();
		
		ЗаполнитьПоДокументу(Объект.ДокументОснование);
		
		Если Объект.РасшифровкаПлатежа.Количество() = 0
			И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Зарплата") Тогда
			ДобавитьПервуюСтрокуРасшифровкиНаКлиенте();
		КонецЕсли;
		
		ВидОперации = Объект.ВидОперации;
		ВалютаДенежныхСредств = Объект.ВалютаДенежныхСредств;
		ДатаДокумента = Объект.Дата;
		
		УставитьТекущуюСтраницу();
		ЗаполнитьПоОснованиюЗавершениеНаСервере();
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоОснованию()

&НаКлиенте
Процедура НапечататьЧек(Команда)
	
	Если Объект.ВалютаДенежныхСредств <> УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту() Тогда
		ТекстСообщения = НСтр("ru = 'Валюта оплаты отличается от национальной.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат
	КонецЕсли;
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на оборудовании.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
		
	ЕстьПартииБезВладельца = ВТабличнойЧастиЕстьКомиссионнаяПартияБезВладельца();
	
	Если ЕстьПартииБезВладельца Тогда
		ТекстСообщения = НСтр("ru = 'В табличной части есть документы с комиссионными партиями в которых не указан владелец. Печать чека невозможна.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат
	КонецЕсли;
	
	Если ПечатьДокументовУНФКлиент.ПечатьЧекаНевозможна(ЭтотОбъект, НСтр("ru = 'Не удалось провести документ'")) Тогда
		Возврат;
	КонецЕсли;

	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключенияФискальногоРегистратораЗавершение", ЭтотОбъект);
		МассивОборудования = ЧекопечатающееОборудование();
		ОтборОборудования = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();
		ОтборОборудования.Вставить("ТипыПО", МассивОборудования);
		ОтборОборудования.Вставить("Организация", Объект.Организация);
		МенеджерОборудованияКлиент.ВыбратьУстройство(ОписаниеОповещения, ОтборОборудования,
				НСтр("ru='Выберите оборудование'"), НСтр("ru='Оборудование не подключено.'"));
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // НапечататьЧекВыполнить()

&НаСервере
Функция ВТабличнойЧастиЕстьКомиссионнаяПартияБезВладельца()
	
	Возврат РаботаСКомиссионерамиКомитентамиСервер.ВТабличнойЧастиЕстьКомиссионнаяПартияБезВладельца(Объект);
	
КонецФункции

&НаСервере
Функция ПодготовитьДанныеДляПробитияЧека(ИдентификаторУстройстваФР)
	
	Возврат РозничныеПродажиСервер.ПолучитьДанныеДляФискализации(Объект.Ссылка, ИдентификаторУстройстваФР);
	
КонецФункции // ПодготовитьДанныеДляПробитияЧека()

&НаКлиенте
Процедура ПодключенияФискальногоРегистратораЗавершение(РезультатВыбора, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		ИдентификаторУстройстваФР = РезультатВыбора.ИдентификаторУстройства;
	КонецЕсли;
	
	Если ИдентификаторУстройстваФР = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЭтоВозврат = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Покупателю");
	
	ОбщиеПараметры = ПодготовитьДанныеДляПробитияЧека(ИдентификаторУстройстваФР);
	
	Если ОбщиеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры.ДатаВремя = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбщиеПараметры", ОбщиеПараметры);
	ДополнительныеПараметры.Вставить("ИдентификаторУстройстваФР", ИдентификаторУстройстваФР);
	ДополнительныеПараметры.Вставить("КассаККМ", ОбщиеПараметры.КассаККМ);
	
	Если ОбщиеПараметры.Свойство("ЭтоВозвратПродукцииИСМПБезМарки") Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаВозвратПродукцииИСМПБезМарки", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Не указаны коды маркировки для товаров. Продолжить пробитие чека?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
	Иначе
		ПроверитьКодМаркировкиСредствамиККТ(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаВозвратПродукцииИСМПБезМарки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПроверитьКодМаркировкиСредствамиККТ(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКодМаркировкиСредствамиККТ(ДополнительныеПараметры)
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверитьКодМаркировкиСредствамиККТЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РозничныеПродажиКлиент.ПроверитьКодМаркировкиСредствамиККТ(ДополнительныеПараметры.ОбщиеПараметры, 
		ЭтотОбъект, НСтр("ru = 'Пробить чек'"), ОповещениеОЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКодМаркировкиСредствамиККТЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ШтрихкодированиеИСМПКлиент.РезультатПроверкиСредствамиККТТребуетФискализации(Результат)
		И ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ОбщиеПараметры") Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПробитьЧекЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
			Оповещение,  
			УникальныйИдентификатор,  
			ДополнительныеПараметры.ИдентификаторУстройстваФР,   
			ДополнительныеПараметры.ОбщиеПараметры);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		
		// Установить полученное значение номера чека реквизиту документа.
		Объект.НомерСменыККМ = РезультатВыполнения.НомерСменыККТ;
		Объект.НомерЧекаККМ = РезультатВыполнения.НомерЧекаККТ;
		Объект.КассаККМ = Параметры.КассаККМ;
		Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		Если НЕ ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
			Объект.НомерЧекаККМ = 1;
		КонецЕсли;
		
		Модифицированность = Истина;
		
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		
	Иначе
		
		ТекстСообщения = СтрШаблон(НСтр(
		"ru = 'При печати чека произошла ошибка.
		|Чек не напечатан на фискальном регистраторе.
		|Дополнительное описание:
		|%1'"), РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	УстановитьДоступностьПечатиЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРасшифровку(Команда)
	
	Если Объект.СуммаДокумента = 0 Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru='Укажите вначале сумму документа.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите вначале валюту.'"));
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьРасшифровкуЗавершение", ЭтотОбъект), НСтр(
		"ru='Расшифровка будет полностью перезаполнена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРасшифровкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.РасшифровкаПлатежа.Очистить();
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Поставщику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.НашейОрганизации") Тогда
		
		ЗаполнитьРасшифровкуПлатежа();
		
	КонецЕсли;
	
	УставитьТекущуюСтраницу();
	
КонецПроцедуры // ЗаполнитьРасшифровку()

&НаКлиенте
Процедура ОбновитьКурсВТекущейСтрокеРасшифровки(Команда)
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Покупателю") 
		И ЗначениеЗаполнено(ТекущиеДанные.Документ) И ТекущиеДанные.ПризнакАванса Тогда
		
		КурсКратностьДокументаРасчетов = РасчетыРаботаСФормамиВызовСервера.ПолучитьКурсКратностьДокументаРасчетов(ТекущиеДанные.Документ);
		ТекущиеДанные.Курс = КурсКратностьДокументаРасчетов.Курс;
		ТекущиеДанные.Кратность = КурсКратностьДокументаРасчетов.Кратность;
		
	Иначе
		СтруктураДанных = РасчетыРаботаСФормамиВызовСервера.ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении(Объект.Дата, ТекущиеДанные.Договор);
		ТекущиеДанные.Курс = СтруктураДанных.ДоговорВалютаКурсКратность.Курс;
		ТекущиеДанные.Кратность = СтруктураДанных.ДоговорВалютаКурсКратность.Кратность;
	КонецЕсли;
	
	РасшифровкаПлатежаКурсПриИзмененииФрагмент(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонАдресЭППриИзменении(Элемент)
	
	УправлениеНебольшойФирмойКлиент.УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", КэшЗначений.НаборСвойств_Документ_РасходИзКассы);
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы, , , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрЧека(Команда)
	
	Если Модифицированность Тогда
		Если Объект.Проведен Тогда
			ТекстВопроса = НСтр("ru = 'Для выполнения команды ""Предварительный просмотр""
				|документ будет проведен. Продолжить?'");
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Провести и продолжить'"));
		Иначе
			ТекстВопроса = НСтр("ru = 'Для выполнения команды ""Предварительный просмотр""
				|документ будет записан. Продолжить?'");
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Записать и продолжить'"));
		КонецЕсли;
		Обработчик = Новый ОписаниеОповещения("ПредварительныйПросмотрЧекаПродолжение", ЭтотОбъект);
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки);
	Иначе
		ПредварительныйПросмотрЧекаПродолжение(Неопределено, "");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрЧекаПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда
		Если Объект.Проведен Тогда
			РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		Иначе
			РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		КонецЕсли;
		Если Не РезультатЗаписи Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПредварительныйПросмотрЧекаЗавершение", ЭтотОбъект);
		МассивОборудования = ЧекопечатающееОборудование();
		ОтборОборудования = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();
		ОтборОборудования.Вставить("ТипыПО", МассивОборудования);
		ОтборОборудования.Вставить("Организация", Объект.Организация);
		МенеджерОборудованияКлиент.ВыбратьУстройство(ОписаниеОповещения, ОтборОборудования,
				НСтр("ru='Выберите оборудование'"), НСтр("ru='Оборудование не подключено.'"));
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрЧекаЗавершение(РезультатВыбора, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		ИдентификаторУстройстваФР = РезультатВыбора.ИдентификаторУстройства;
	КонецЕсли;
	
	Если ИдентификаторУстройстваФР = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЭтоВозврат = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Покупателю");
	
	ОбщиеПараметры = ПодготовитьДанныеДляПробитияЧека(ИдентификаторУстройстваФР);
	
	Если ОбщиеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры.ДатаВремя = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	РабочееМестоКассираКлиент.ПредпросмотрЧекаДенежныхДокументов(ОбщиеПараметры, ЭтаФорма, ИдентификаторУстройстваФР);
	
КонецПроцедуры

&НаКлиенте
Процедура ШапкаТабличнаяЧасть(Команда)
	
	ФормыДокументовДеньгиКлиент.ШапкаТабличнаяЧасть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ШапкаТабличнаяЧастьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.БылиВнесеныИзменения Тогда
		ШапкаТабличнаяЧастьЗавершениеНаСервере(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ШапкаТабличнаяЧастьЗавершениеНаСервере(Знач Результат)
	
	ФормыДокументовДеньги.ШапкаТабличнаяЧастьЗавершение(ЭтаФорма, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьИзмененияРеквизитовПечати(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ПечатьДокументовУНФКлиент.ОбновитьЗначенияРеквизитовПечати(ЭтотОбъект, Результат.ИзмененныеРеквизиты);
		
		Если Результат.Свойство("Команда") Тогда
			
			Подключаемый_ВыполнитьКоманду(Результат.Команда);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТипаОснованияЗавершение(ВыбранноеИмяФормы, Параметры) Экспорт
	
	Если ВыбранноеИмяФормы<>Неопределено Тогда
		
		СтруктураПараметровОтбора = Новый Структура();
		Для каждого элОтбора Из ПараметрыВыбораДокументаОснования Цикл
			ИмяПоляОтбора = СтрЗаменить(элОтбора.Имя,"Отбор.","");
			СтруктураПараметровОтбора.Вставить(ИмяПоляОтбора, элОтбора.Значение);
		КонецЦикла;
		
		Если Объект.ВидОперации = ВидОперацииВыдачаЗаймаСотруднику И
			СтрНайти(ВыбранноеИмяФормы.Значение, "ДоговорКредитаИЗайма") > 0 Тогда
			Если Не Объект.Подотчетник.Пустая() Тогда
				СтруктураПараметровОтбора.Вставить("Сотрудник", Объект.Подотчетник);
			КонецЕсли;
		Иначе
			Если НЕ Объект.Контрагент.Пустая() Тогда
				СтруктураПараметровОтбора.Вставить("Контрагент", Объект.Контрагент);
			КонецЕсли;
		КонецЕсли;
		ПараметрыОткрытияФормы = Новый Структура("Отбор", СтруктураПараметровОтбора);
		
		_ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
		ОткрытьФорму(ВыбранноеИмяФормы.Значение, ПараметрыОткрытияФормы, ЭтотОбъект, ,,,_ОповещениеОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснованиеЗавершение(ВыбранноеЗначение, Параметры) Экспорт

	Если ВыбранноеЗначение<>Неопределено Тогда
		Объект.ДокументОснование = ВыбранноеЗначение;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(ВыбранноеЗначение);
		Модифицированность = Истина;
		
		// МобильноеПриложение
		Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
			Возврат;
		КонецЕсли;
		// Конец МобильноеПриложение
	
		ФормыДокументовДеньгиКлиент.ЗаполнитьПоОснованиюНачало(ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиУчетаВНалогообложении()
	
	ФормыДокументовДеньги.ОпределитьВидимостьНастроекУчетаВНалогообложении(ЭтаФорма);
	Если ЗначениеЗаполнено(Объект.Статья) Тогда
		Объект.УчитыватьВНУ = РегламентированнаяОтчетностьУСН.НужноУчитыватьВНУ(Объект.Статья, Объект.ВидОперации, Объект.Организация, Объект.Дата);
	КонецЕсли;
	Объект.СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Объект.Организация,,Объект.Дата);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатьюДДСПриСменеВидаОперации()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю
		И (Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам
		ИЛИ Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее
		ИЛИ Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей) Тогда
		Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
	ИначеЕсли (Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации)
		И (Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей
		ИЛИ Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее
		ИЛИ Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам) Тогда
		Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
	ИначеЕсли (Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей
		ИЛИ Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам) Тогда
		Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
	КонецЕсли;
	
	Если Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее
		И ( Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Налоги) Тогда
		Объект.УчитыватьВНУ = Истина;
	Иначе
		Если ЗначениеЗаполнено(Объект.Статья) Тогда
			Объект.УчитыватьВНУ = Объект.Статья.УчитыватьВНУ;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВидОперацииПриИзмененииНаСервере()

&НаСервере
Процедура ЗаполнитьПоДокументу(ДокОснование)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(ДокОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
	ФормыДокументовДеньги.ЗаполнитьСтавкуНДСПоНалогообложениеНДС(ЭтаФорма, Ложь);
	ФормыДокументовДеньги.УстановитьВидимостьРеквизитовРасчетов(ЭтаФорма);
	
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.ВалютаДенежныхСредств));
	Курс = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Курс);
	Кратность = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Кратность);
	
КонецПроцедуры // ЗаполнитьПоДокументу()

&НаСервере
Функция ПоместитьРасшифровкаПлатежаВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(
		Объект.РасшифровкаПлатежа.Выгрузить(,
			"Договор,
			|ПризнакАванса,
			|Документ,
			|Заказ,
			|СуммаРасчетов,
			|Курс,
			|Кратность,
			|СпособЗачета,
			|СуммаПлатежа"
		),
		УникальныйИдентификатор);
	
КонецФункции // ПоместитьРасшифровкаПлатежаВХранилище()

&НаСервере
Процедура ПолучитьРасшифровкаПлатежаИзХранилища(АдресРасшифровкаПлатежаВХранилище, Очищать = Истина)
	
	ТаблицаРасшифровкаПлатежа = ПолучитьИзВременногоХранилища(АдресРасшифровкаПлатежаВХранилище);
	Если Очищать Тогда
		Объект.РасшифровкаПлатежа.Очистить();
	КонецЕсли;
	Для каждого СтрокаРасшифровкаПлатежа Из ТаблицаРасшифровкаПлатежа Цикл
		Строка = Объект.РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, СтрокаРасшифровкаПлатежа);
		Если НЕ Строка.Договор.Пустая() Тогда
			Строка.СтатьяДДС = Строка.Договор.СтатьяДДСПоУмолчанию;
		КонецЕсли;
		Если Строка.СпособЗачета.Пустая() 
			И (Объект.ВидОперации = ВидОперацииПоставщику ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации)Тогда
			Строка.СпособЗачета = РасчетыРаботаСФормамиВызовСервера.СпособРазнесенияОплатыДляДоговора(Строка.Договор, Объект.Контрагент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьРасшифровкаПлатежаИзХранилища()

&НаСервере
Процедура ПересчитатьСуммыДокумента(Курс, Кратность, ПересчитатьСуммуПлатежа, ДополнительныеПараметры)
	
	Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
		Если СтрокаТабличнойЧасти.Договор.ВалютаРасчетов = Объект.ВалютаДенежныхСредств Тогда
			Если ПересчитатьСуммуПлатежа Тогда
				СтрокаТабличнойЧасти.СуммаПлатежа = СтрокаТабличнойЧасти.СуммаРасчетов;
				СтрокаТабличнойЧасти.Аванс = ?(СтрокаТабличнойЧасти.ПризнакАванса, СтрокаТабличнойЧасти.СуммаПлатежа, 0);
				РасчетыРаботаСФормамиВызовСервера.РассчитатьСуммуНДСНаСервере(СтрокаТабличнойЧасти);
			Иначе
				СтрокаТабличнойЧасти.СуммаРасчетов = СтрокаТабличнойЧасти.СуммаПлатежа;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		Если ПересчитатьСуммуПлатежа Тогда
			СтрокаТабличнойЧасти.СуммаПлатежа = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТабличнойЧасти.СуммаРасчетов,
				СтрокаТабличнойЧасти.Курс,
				Курс,
				СтрокаТабличнойЧасти.Кратность,
				Кратность);
			СтрокаТабличнойЧасти.Аванс = ?(СтрокаТабличнойЧасти.ПризнакАванса, СтрокаТабличнойЧасти.СуммаПлатежа, 0);
			РасчетыРаботаСФормамиВызовСервера.РассчитатьСуммуНДСНаСервере(СтрокаТабличнойЧасти);
		Иначе
			СтрокаТабличнойЧасти.Курс = ?(
				СтрокаТабличнойЧасти.Курс = 0,
				1,
				СтрокаТабличнойЧасти.Курс);
			СтрокаТабличнойЧасти.Кратность = ?(
				СтрокаТабличнойЧасти.Кратность = 0,
				1,
				СтрокаТабличнойЧасти.Кратность);
			СтрокаТабличнойЧасти.СуммаРасчетов = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТабличнойЧасти.СуммаПлатежа,
				Курс,
				СтрокаТабличнойЧасти.Курс,
				Кратность,
				СтрокаТабличнойЧасти.Кратность);
		КонецЕсли;
	КонецЦикла;
	
	// Если нужно, то пересчитаем суммы в ТЧ ДоговорыАвтоЗачетаДолгов.
	Если ПересчитатьСуммуПлатежа Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
	ПересчитатьИтогиПриИзмененииАвансаНаСервере();
	Если Объект.ВидОперации = ВидОперацииПомощника Тогда
		ЗаполнитьТаблицуПросмотраНаСервере();
	КонецЕсли;
	
КонецПроцедуры // ПересчитатьСуммыДокумента()

&НаКлиенте
Процедура ПересчитатьСуммыПриИзмененииКурсаВалютыДенежныхСредств(СтруктураДанные, ТекстСообщения)
	
	КурсПередИзменением = Курс;
	КратностьПередИзменением = Кратность;
	
	Если ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) Тогда
		Курс = ?(
			СтруктураДанные.ВалютаКурсКратность.Курс = 0,
			1,
			СтруктураДанные.ВалютаКурсКратность.Курс);
		Кратность = ?(
			СтруктураДанные.ВалютаКурсКратность.Кратность = 0,
			1,
			СтруктураДанные.ВалютаКурсКратность.Кратность);
	КонецЕсли;
	
	// Если курс валюты не изменился или не заполнена валюта денежных средств
	// или документ не заполнен, то ничего не делаем.
	Если (Курс = КурсПередИзменением
		И Кратность = КратностьПередИзменением)
	 ИЛИ (НЕ ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств)) 
	 ИЛИ (Объект.РасшифровкаПлатежа.Итог("СуммаРасчетов") = 0
	 И НЕ ЗначениеЗаполнено(Объект.СуммаДокумента)) Тогда
		
		// Обновить курсы расчетов
		// Если в расшифровке платежа есть курс <> 1, то предложим его перезаполнить.
		Если СтруктураДанные.Свойство("ОбновитьКурсыРасчетов") И СтруктураДанные.ОбновитьКурсыРасчетов Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбновитьКурсВРасшифровкеПлатежаИПересчитатьСуммы", ЭтотОбъект), СтруктураДанные.ОбновитьКурсыРасчетовТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		// Конец Обновить курсы расчетов
		
		Возврат;
	КонецЕсли; 
	
	ПараметрыВопроса = Новый Структура;
	ПараметрыВопроса.Вставить("КурсПередИзменением", КурсПередИзменением);
	ПараметрыВопроса.Вставить("КратностьПередИзменением", КратностьПередИзменением);
	
	// Обновить курсы расчетов
	Если СтруктураДанные.Свойство("ОбновитьКурсыРасчетов") Тогда
		ПараметрыВопроса.Вставить("ОбновитьКурсыРасчетов", СтруктураДанные.ОбновитьКурсыРасчетов);
		ПараметрыВопроса.Вставить("ОбновитьКурсыРасчетовТекстВопроса", СтруктураДанные.ОбновитьКурсыРасчетовТекстВопроса);
	КонецЕсли;
	// Конец Обновить курсы расчетов
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОПересчетеСуммыПриИзмененииКурсаВалютыДенежныхСредствЗавершение", ЭтотОбъект, ПараметрыВопроса);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры // ПересчитатьСуммыПриИзмененииКурсаВалютыДенежныхСредств()

&НаКлиенте
Процедура ВопросОПересчетеСуммыПриИзмененииКурсаВалютыДенежныхСредствЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		КурсПередИзменением = ДополнительныеПараметры.КурсПередИзменением;
		КратностьПередИзменением = ДополнительныеПараметры.КратностьПередИзменением;
		
		Если Объект.РасшифровкаПлатежа.Количество() > 0 
		   И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Зарплата") Тогда // для вида операции "Зарплата" пересчитывается только шапка.
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Покупателю")
			ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Поставщику")
			ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.НашейОрганизации") Тогда
				ПересчитатьСуммыДокумента(Курс, Кратность, Истина, ДополнительныеПараметры);
			// Прочие расчеты
			ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.РасчетыПоКредитам")
				ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ПрочиеРасчеты") Тогда
				ПересчитатьСуммыДокумента(Курс, Кратность, Истина, ДополнительныеПараметры);
			// Конец Прочие расчеты
			Иначе
				СуммаДокументаРавнаИтогуСуммыПлатежа = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа") = Объект.СуммаДокумента;
				
				Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл // для видов операций с планируемыми платежами пересчитываем сумму плана.
					СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
						СтрокаТабличнойЧасти.СуммаПлатежа, КурсПередИзменением, Курс, КратностьПередИзменением,
						Кратность);
					
					РасчетыРаботаСФормамиКлиент.РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
				КонецЦикла;
					
				Если СуммаДокументаРавнаИтогуСуммыПлатежа Тогда
					Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
				Иначе
					Объект.СуммаДокумента = ВалютыУНФКлиентСервер.Пересчитать(
						Объект.СуммаДокумента, КурсПередИзменением, Курс, КратностьПередИзменением, Кратность);
				КонецЕсли;
				
				ПересчитатьИтогиПриИзмененииАвансаНаКлиенте();
			КонецЕсли;
		Иначе
			Объект.СуммаДокумента = ВалютыУНФКлиентСервер.Пересчитать(
				Объект.СуммаДокумента, КурсПередИзменением, Курс, КратностьПередИзменением, Кратность);
		КонецЕсли;
	Иначе
		Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
			ПересчитатьСуммыДокумента(Курс, Кратность, Ложь, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
    ЗаполнитьПризнакСпособаРасчетаНаКлиенте();
	
	// Обновить курсы расчетов
	Если ДополнительныеПараметры.Свойство("ОбновитьКурсыРасчетов")  И ДополнительныеПараметры.ОбновитьКурсыРасчетов Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбновитьКурсВРасшифровкеПлатежаИПересчитатьСуммы", ЭтотОбъект),
			ДополнительныеПараметры.ОбновитьКурсыРасчетовТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	// Конец Обновить курсы расчетов
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРеквизитовРасчетов()
	
	ФормыДокументовДеньги.УстановитьВидимостьРеквизитовРасчетов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеВалютаДенежныхСредствПриИзменении(Дата, ВалютаДенежныхСредств)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
			Дата,
			Новый Структура("Валюта", ВалютаДенежныхСредств)));
	
	СтруктураДанные.Вставить("ВалютаДенежныхСредств", ВалютаДенежныхСредств);
	ОбновитьВидимостьИОстаткиДС();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеВалютаДенежныхСредствПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеПодотчетникПриИзменении(Подотчетник, Дата)
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("ПодотчетникНаименование", "");
	СтруктураДанные.Вставить("ДокументВид", "");
	СтруктураДанные.Вставить("ДокументСерия", "");
	СтруктураДанные.Вставить("ДокументНомер", "");
	СтруктураДанные.Вставить("ДокументДатаВыдачи", "");
	СтруктураДанные.Вставить("ДокументКемВыдан", "");
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыФизическихЛицСрезПоследних.Период,
	|	ДокументыФизическихЛицСрезПоследних.Физлицо,
	|	ПРЕДСТАВЛЕНИЕ(ДокументыФизическихЛицСрезПоследних.Физлицо) КАК ПодотчетникНаименование,
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента,
	|	ДокументыФизическихЛицСрезПоследних.Серия,
	|	ДокументыФизическихЛицСрезПоследних.Номер,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи,
	|	ДокументыФизическихЛицСрезПоследних.СрокДействия,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан,
	|	ДокументыФизическихЛицСрезПоследних.КодПодразделения,
	|	ДокументыФизическихЛицСрезПоследних.ЯвляетсяДокументомУдостоверяющимЛичность,
	|	ДокументыФизическихЛицСрезПоследних.Представление,
	|	ДокументыФизическихЛицСрезПоследних.УдалитьВидДокумента
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&Дата, ) КАК ДокументыФизическихЛицСрезПоследних
	|ГДЕ
	|	ДокументыФизическихЛицСрезПоследних.Физлицо = &Подотчетник
	|	И ДокументыФизическихЛицСрезПоследних.ЯвляетсяДокументомУдостоверяющимЛичность";
	
	Запрос.УстановитьПараметр("Подотчетник", Подотчетник.ФизЛицо);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	СтруктураДанные.ПодотчетникНаименование = Подотчетник.Наименование;
	
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
	
		СтруктураДанные.ПодотчетникНаименование = ВыборкаРезультатаЗапроса.ПодотчетникНаименование;
		СтруктураДанные.ДокументВид = ВыборкаРезультатаЗапроса.ВидДокумента;
		СтруктураДанные.ДокументСерия = ВыборкаРезультатаЗапроса.Серия;
		СтруктураДанные.ДокументНомер = ВыборкаРезультатаЗапроса.Номер;
		СтруктураДанные.ДокументДатаВыдачи = ВыборкаРезультатаЗапроса.ДатаВыдачи;
		СтруктураДанные.ДокументКемВыдан = ВыборкаРезультатаЗапроса.КемВыдан;
		
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеПодотчетникПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыплатаЗаработнойПлатыВедомостьПриИзменении(Ведомость)
	
	ПараметрыВедомости = Новый Структура;
	ПараметрыВедомости.Вставить("Подразделение", Ведомость.СтруктурнаяЕдиница);
	ПараметрыВедомости.Вставить("СуммаПлатежа", Ведомость.Сотрудники.Итог("СуммаПлатежа"));
	
	Возврат ПараметрыВедомости;
	
КонецФункции // ПолучитьДанныеВыплатаЗаработнойПлатыВедомостьПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыплатаРегламентированнойЗаработнойПлатыВедомостьПриИзменении(Ведомость)
	
	ПараметрыВедомости = Новый Структура;
	ПараметрыВедомости.Вставить("СуммаПлатежа", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ведомость, "СуммаПоДокументу"));
	
	Возврат ПараметрыВедомости;
	
КонецФункции // ПолучитьДанныеВыплатаРегламентированнойЗаработнойПлатыВедомостьПриИзменении()

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере(ЗаполнятьНалогообложение = Истина)
	
	УстановитьСвязиПараметровВыбораДоступныеТипы();
	
	УстановитьВидимостьПечатиЧека();
	
	// Прочие расчеты
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты Тогда
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Объект.РасшифровкаПлатежа[0].СтавкаНДС = СтавкаНДСПоУмолчанию;
		СтавкаНДСПоУмолчаниюЧисло = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДСПоУмолчанию);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.РасчетыПоКредитам Тогда
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		СтавкаНДСПоУмолчаниюЧисло = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДСПоУмолчанию);
	// Конец Прочие расчеты
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЛичныеСредстваПредпринимателя Тогда
		Объект.Корреспонденция = ПланыСчетов.Управленческий.НераспределеннаяПрибыль;
		Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ЛичныеСредстваПредпринимателя;
		Если Объект.Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			Объект.Организация = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НаРасходы
		Или Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее Тогда
		Объект.Корреспонденция = ПланыСчетов.Управленческий.ПрочиеРасходы;
	ИначеЕсли ЗаполнятьНалогообложение Тогда
		ФормыДокументовДеньги.ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС(ЭтаФорма);
	КонецЕсли;
	
	// БЗКБ
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата Тогда
		ПоказыватьЭлементыБЗКБ = Справочники.Организации.НужноПоказыватьЭлементыБЗКБДляОрганизации(Объект.Организация);
	Иначе
		ПоказыватьЭлементыБЗКБ = Ложь;
	КонецЕсли;
	// Конец БЗКБ
	
	ФормыДокументовДеньги.УстановитьВидимостьЭлементовВЗависимостиОтВидаОперации(ЭтаФорма);
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ВзносНаличнымиВБанк") Тогда
		ЗаполнитьТаблицуОписьСдаваемыхНаличныхДенег();
	КонецЕсли;
	
	УстановитьСтатьюДДСПриСменеВидаОперации();
	
КонецПроцедуры // ВидОперацииПриИзмененииНаСервере()

&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС(ВосстанавливатьСтавкиНДС = Истина)
	
	ФормыДокументовДеньги.ЗаполнитьСтавкуНДСПоНалогообложениеНДС(ЭтаФорма, ВосстанавливатьСтавкиНДС);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКурсыРасчетовРасшифровкиПлатежаНаСервере()
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
			
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда
			СтруктураДанные = РасчетыРаботаСФормамиВызовСервера.ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении(
				Объект.Дата,
				СтрокаТабличнойЧасти.Договор);
			СтрокаТабличнойЧасти.Курс = ?(
				СтруктураДанные.ДоговорВалютаКурсКратность.Курс = 0,
				1,
				СтруктураДанные.ДоговорВалютаКурсКратность.Курс);
			СтрокаТабличнойЧасти.Кратность = ?(
				СтруктураДанные.ДоговорВалютаКурсКратность.Кратность = 0,
				1,
				СтруктураДанные.ДоговорВалютаКурсКратность.Кратность);
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СуммаРасчетов = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
			СтрокаТабличнойЧасти.СуммаПлатежа,
			Курс,
			СтрокаТабличнойЧасти.Курс,
			Кратность,
			СтрокаТабличнойЧасти.Кратность);
		
	КонецЦикла;
		
	Если Объект.ВидОперации = ВидОперацииПоставщику
		ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации Тогда
		ПересчитатьИтогиПриИзмененииАвансаНаСервере();
		ЗаполнитьТаблицуПросмотраНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКурсВРасшифровкеПлатежаИПересчитатьСуммы(КнопкаРезультат, ДополнительныеПараметры) Экспорт

	Если КнопкаРезультат = КодВозвратаДиалога.Да Тогда
		ОбновитьКурсыРасчетовРасшифровкиПлатежаНаСервере();
	КонецЕсли;

КонецПроцедуры // ОбновитьКурсВРасшифровкеПлатежаИПересчитатьСуммыЗавершение()

&НаКлиенте
Процедура ОбработатьВыборДокументаРасчетов(ДанныеДокумента)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ТипЗнч(ДанныеДокумента) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти.Документ = ДанныеДокумента.Документ;
		Если ДанныеДокумента.УстановитьЗаказ Тогда
			СтрокаТабличнойЧасти.Заказ = ДанныеДокумента.Заказ;
		КонецЕсли;
		СтрокаТабличнойЧасти.СчетНаОплату = ДанныеДокумента.СчетНаОплату;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда
			СтрокаТабличнойЧасти.Договор = ДанныеДокумента.Договор;
			РасчетыРаботаСФормамиКлиент.ОбработатьИзменениеДоговораКонтрагента(ЭтотОбъект, СтрокаТабличнойЧасти);
		КонецЕсли;
		
		ВыполнитьДействияПриИзмененииДокументаРасчетов();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборДокументаРасчетов()

&НаКлиенте
Процедура ВыполнитьДействияПриИзмененииДокументаРасчетов()
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если Объект.ВидОперации = ВидОперацииПокупателю Тогда
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеВКассу")
			ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеНаСчет")
			ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ОперацияПоПлатежнымКартам")
			ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПриходнаяНакладная")
			ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.КорректировкаРеализации")
			ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ЧекККМ") Тогда
			
			СтрокаТабличнойЧасти.ПризнакАванса = Истина;
			
			КурсКратностьДокументаРасчетов = РасчетыРаботаСФормамиВызовСервера.ПолучитьКурсКратностьДокументаРасчетов(СтрокаТабличнойЧасти.Документ);
			
			Если ЗначениеЗаполнено(КурсКратностьДокументаРасчетов) Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, КурсКратностьДокументаРасчетов);
				РасшифровкаПлатежаКурсПриИзмененииФрагмент(СтрокаТабличнойЧасти);
			КонецЕсли;
			
		Иначе
			
			СтрокаТабличнойЧасти.ПризнакАванса = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = ВидОперацииПоставщику
		ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации Тогда
		
		СтрокаТабличнойЧасти.ПризнакАванса = НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Документ);
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Документ) Тогда
			СтрокаТабличнойЧасти.СпособЗачета = СпособЗачетаВручную;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЭтоВзаимозачет = (ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.Взаимозачет"));
	
	ФормыДокументовДеньгиВызовСервера.ЗаполнитьПодразделениеИзДокументаРасчетов(СтрокаТабличнойЧасти.Подразделение,
		СтрокаТабличнойЧасти.Документ);
	
КонецПроцедуры // ВыполнитьДействияПриИзмененииДокументаРасчетов()

&НаСервере
Процедура ЗаполнитьРасшифровкуПлатежа(ТекущийОбъект = Неопределено)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьРасшифровкуПлатежа();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДокументУтвержден(ДокументОснование)
	
	Возврат ДокументОснование.СтатусУтвержденияПлатежа = Перечисления.СтатусыУтвержденияПлатежей.Утвержден;
	
КонецФункции

&НаСервере
Процедура ОбновитьВидимостьИОстаткиВзаиморасчетов()
	
	Элементы.ОстатокВзаиморасчетов.Видимость = НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.Контрагент);
	ОстатокВзаиморасчетов = 0;
	
	Если НЕ Элементы.ОстатокВзаиморасчетов.Видимость Тогда
		// Только для новых объектов
		Элементы.Контрагент.АвтоМаксимальнаяШирина = Истина;
	Иначе
		Элементы.Контрагент.АвтоМаксимальнаяШирина = Ложь;
		Элементы.Контрагент.МаксимальнаяШирина = 22;
	КонецЕсли;
	
	Элементы.ОстатокВзаиморасчетов.Заголовок = РаботаСКонтрагентамиУНФ.ЗаголовокНадписиВзаиморасчетов(Объект.Контрагент, ОстатокВзаиморасчетов);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьИОстаткиДС()
	
	Элементы.ОстатокДенежныхСредств.Видимость = НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.Касса);
	ОстатокДенежныхСредств = 0;
	
	Если НЕ Элементы.ОстатокДенежныхСредств.Видимость Тогда
		// Только для новых объектов
		Элементы.Касса.АвтоМаксимальнаяШирина = Истина;
		
		Если ТолькоПросмотр Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Элементы.Касса.АвтоМаксимальнаяШирина = Ложь;
		Элементы.Касса.МаксимальнаяШирина = 22;
	КонецЕсли;
	
	Элементы.ОстатокДенежныхСредств.Заголовок = ДвиженияДенежныхСредствВызовСервера.ЗаголовокНадписиОстатковДС(
		Объект.Касса, Объект.Организация, ОстатокДенежныхСредств, Объект.ВалютаДенежныхСредств);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИтогиПриИзмененииАвансаНаКлиенте() Экспорт
	
	СуммаПлатежаАванс = Объект.РасшифровкаПлатежа.Итог("Аванс");
	СуммаПлатежаДляУсловногоОформления = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьИтогиПриИзмененииАвансаНаСервере()
	
	СуммаПлатежаАванс = Объект.РасшифровкаПлатежа.Итог("Аванс");
	СуммаПлатежаДляУсловногоОформления = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
	РассчитатьСуммуНДСПоУмолчаниюНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуНДСПоУмолчаниюНаСервере()
	
	ИтогоРазнесено = Объект.ДоговорыАвтоЗачетаДолгов.Итог("СуммаПлатежа");
	СуммаНДСПоУмолчанию = ИтогоРазнесено - (ИтогоРазнесено) / ((СтавкаНДСПоУмолчаниюЧисло + 100) / 100);
	
КонецПроцедуры

&НаСервере
Функция ПоляКИДляОтправкиЧека()
	
	ПоляКИ = Новый Соответствие;
	ПоляКИ.Вставить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Элементы.АдресЭП.Имя);
	ПоляКИ.Вставить(Перечисления.ТипыКонтактнойИнформации.Телефон, Элементы.Телефон.Имя);
	
	Возврат ПоляКИ;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоляКИДляОтправкиЧекаПоУмолчанию(ДанныеКИ)
	
	Если ДанныеКИ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.АдресЭП = ДанныеКИ.Получить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Объект.Телефон = ДанныеКИ.Получить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСрокУплаты(ВидНалога, Дата)
	Возврат РегламентированнаяОтчетностьУСН.СрокУплатыПоНалогуИДате(ВидНалога, Дата);
КонецФункции

&НаКлиенте
Процедура ТаблицаОписьСдаваемыхНаличныхДенегКоличествоБанкнотПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаОписьСдаваемыхНаличныхДенег.ТекущиеДанные;
	ТекущиеДанные.Сумма = ТекущиеДанные.Номинал * ТекущиеДанные.КоличествоБанкнот / ТекущиеДанные.Коэффициент;
	СуммаБанкнот = ТаблицаОписьСдаваемыхНаличныхДенег.Итог("Сумма");
	Объект.СуммаДокумента = СуммаБанкнот;
	СуммаДокументаПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОписьСдаваемыхНаличныхДенегПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОписьСдаваемыхНаличныхДенегПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуОписьСдаваемыхНаличныхДенег()
	
	Если НЕ (ПолучитьФункциональнуюОпцию("ИспользоватьОписьСдаваемыхДенег")
		И Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ВзносНаличнымиВБанк) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОписьСдаваемыхНаличныхДенег.Очистить();
	
	Если Объект.ОписьСдаваемыхНаличныхДенег.Количество() = 0 Тогда
		
		// Таблица ТаблицаОписьСдаваемыхНаличныхДенег заполняется один раз при создании на сервере или при чтении на сервере.
		// В случае, если форма перечитывается на сервере неоднократно, таблицу ТаблицаОписьСдаваемыхНаличныхДенег не нужно
		// перезаполнять.
		// Таблица ТаблицаОписьСдаваемыхНаличныхДенег заполняется константными строками(значениями) из макета
		// НоминалыБанкнот.
		
		МакетНоминалыБанкнот = Документы.РасходИзКассы.ПолучитьМакет("ПФ_MXL_ПрепроводительнаяВедомостьНакладнаяКСумке");
		ОбластьНоминалыБанкнот = МакетНоминалыБанкнот.ПолучитьОбласть("НоминалыБанкнотСтроки|ВертикальнаяСекция");
		ОбластьКоличествоБанкнот = МакетНоминалыБанкнот.ПолучитьОбласть("НоминалыБанкнотСтроки|КоличествоБанкнот");
		ОбластьСуммаБанкнотБанкнот = МакетНоминалыБанкнот.ПолучитьОбласть("НоминалыБанкнотСтроки|СуммаБанкнот");
		
		Для Высота = 1 По ОбластьНоминалыБанкнот.ВысотаТаблицы Цикл
			СтрокаОписьБанкнот = ТаблицаОписьСдаваемыхНаличныхДенег.Добавить();
			
			// Данный программный блок получает строку с параметром, например "коп_1_100" или "руб_1000_1".
			// Данная строка структурирована символом "_", этот символ заменяется на символ "ПС",
			// в результате получаем строку состоящую из трех строк:
			// Первая строка "коп" - наименование банкноты.
			// Вторая строка "1"   - достоинство банкноты.
			// Третья строка "100" - коэффициент пересчета к рублю
			// или.
			// Первая строка "руб"  - наименование банкноты.
			// Вторая строка "1000" - достоинство банкноты.
			// Третья строка "1"    - коэффициент пересчета к рублю.
			
			СтрокаСФорматированнымПараметром = ОбластьКоличествоБанкнот.ПолучитьОбласть(высота, 1, высота, 1).ТекущаяОбласть.Параметр;
			СтрокаСФорматированнымПараметромМногоСтрочная = СтрЗаменить(СтрокаСФорматированнымПараметром, "_", Символы.ПС);
			СтрокаОписьБанкнот.НаименованиеБанкноты = СтрПолучитьСтроку(СтрокаСФорматированнымПараметромМногоСтрочная, 1) + ".";
			Если СтрокаОписьБанкнот.НаименованиеБанкноты = "руб1." Тогда
				СтрокаОписьБанкнот.НаименованиеБанкноты = "руб.банкноты"
			ИначеЕсли СтрокаОписьБанкнот.НаименованиеБанкноты = "руб2." Тогда
				СтрокаОписьБанкнот.НаименованиеБанкноты = "руб.монеты"
			КонецЕсли;
			СтрокаОписьБанкнот.Номинал = Число(СтрПолучитьСтроку(СтрокаСФорматированнымПараметромМногоСтрочная, 2));
			СтрокаОписьБанкнот.Коэффициент = Число(СтрПолучитьСтроку(СтрокаСФорматированнымПараметромМногоСтрочная, 3));
			СтрокаОписьБанкнот.ПараметрКоличествоБанкнот = СтрокаСФорматированнымПараметром;
			СтрокаОписьБанкнот.ПараметрСуммаБанкнот = ОбластьСуммаБанкнотБанкнот.ПолучитьОбласть(высота, 1, высота, 1).ТекущаяОбласть.Параметр;
		КонецЦикла;
		
	Иначе
		ТаблицаОписьСдаваемыхНаличныхДенег.Загрузить(Объект.ОписьСдаваемыхНаличныхДенег.Выгрузить());
	КонецЕсли;
	
	ТаблицаОписьСдаваемыхНаличныхДенег.Сортировать("Коэффициент Возр, Номинал Убыв");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЧекопечатающееОборудование()
		МассивОборудования = Новый Массив;
		МассивОборудования.Добавить("ФискальныйРегистратор");
		МассивОборудования.Добавить("ККТ");
		Возврат МассивОборудования;
КонецФункции

&НаСервере 
Функция ИспользоватьЧеки()
	
	НапечататьЧекВидимость = ложь;
	ИспользоватьПО = ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование");
	
	Если ИспользоватьПО Тогда
		МассивОборудования = ЧекопечатающееОборудование();
		СписокДоступныхУстройств =  МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам(МассивОборудования);
		НапечататьЧекВидимость = СписокДоступныхУстройств.Количество() > 0;
	КонецЕсли;
	
	Возврат НапечататьЧекВидимость;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПризнакСпособаРасчетаНаКлиенте()
	СуммаВозврата = 0;
	Если КэшЗначений.Свойство("СуммаВозврата",СуммаВозврата) Тогда
		Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			// Для чека возврата необходимо анализировать, полная или не полная сумма указана в чеке, 
			// исходя из этого устанавливается признак способа расчета
			ЧекПробит = Неопределено;
			КэшЗначений.Свойство("ЧекПробит",ЧекПробит);			
			Если НЕ ЧекПробит Тогда
				ДвиженияДенежныхСредствКлиентСервер.ЗаполнитьПризнакСпособаРасчета(Объект,, СуммаВозврата, ЧекПробит);
			КонецЕсли;
		Иначе
			// В сложных случаях, ПСР возможно указать вручную. Если не указан - сработает автоматическое назначение при
			// формировании чека.
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ДанныеКонтрагентаДляИзменения(Знач Контрагент, Знач КонтрагентПередИзменением, Знач Организация, Знач Дата)
	
	ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПоДокументуКонтрагентуОрганизацииИВидуОперации(Объект.Ссылка,
		Контрагент, Организация, Объект.ВидОперации);
	
	Результат = Новый Структура;
	Результат.Вставить("КонтрагентНаименованиеПолное", Контрагент.НаименованиеПолное);
	Результат.Вставить("КонтрагентПередИзменениемНаименованиеПолное", КонтрагентПередИзменением.НаименованиеПолное);
	Результат.Вставить("Договор", ДоговорПоУмолчанию);
	
	Результат.Вставить(
		"ДоговорВалютаКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
			Дата,
			Новый Структура("Валюта", ДоговорПоУмолчанию.ВалютаРасчетов)));
	
	Результат.Вставить(
		"ВестиРасчетыПоДокументам",
		Контрагент.ВестиРасчетыПоДокументам);
	
	Результат.Вставить("ВестиРасчетыПоДоговорам", Контрагент.ВестиРасчетыПоДоговорам);
	Результат.Вставить("ВестиРасчетыПоЗаказам", Контрагент.ВестиРасчетыПоЗаказам);
	Результат.Вставить("ВестиУчетОплатыПоСчетам", Контрагент.ВестиУчетОплатыПоСчетам);
	
	// Прочие расчеты
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.РасчетыПоКредитам Тогда
		ДоговорКредитаЗаймаПоУмолчанию = ПолучитьДоговорКредитаЗаймаПоУмолчанию(Объект.Ссылка, Контрагент, Организация, Объект.ВидОперации);
		Результат.Вставить(
			"ДоговорКредитаЗаймаПоУмолчанию",
			ДоговорКредитаЗаймаПоУмолчанию);
	КонецЕсли;
	// Конец Прочие расчеты
	
	ФормыДокументовДеньги.УстановитьВидимостьРеквизитовРасчетов(ЭтаФорма);
	
	Результат.Вставить("СтатьяДДСПоУмолчанию", Контрагент.СтатьяДДСПоУмолчанию);
	Если ЗначениеЗаполнено(Контрагент.СтатьяДДСПоУмолчанию) Тогда
		Результат.Вставить("УчитыватьВНУ", РегламентированнаяОтчетностьУСН.НужноУчитыватьВНУ(Контрагент.СтатьяДДСПоУмолчанию, Объект.ВидОперации, Организация, Дата));
	Иначе
		СтруктураДанных = ФормыДокументовДеньги.ПолучитьДанныеСтатьиДДС(ЭтотОбъект);
		Результат.Вставить("СтатьяДДСПоУмолчанию", СтруктураДанных.Статья);
		Результат.Вставить("УчитыватьВНУ", СтруктураДанных.УчитыватьВНУ);
	КонецЕсли;
	
	Результат.Вставить("СпособЗачета", РасчетыРаботаСФормамиВызовСервера.СпособРазнесенияОплатыДляДоговора(ДоговорПоУмолчанию, Контрагент));
	СпособЗачетаПоУмолчаниюДляКонтрагента = РасчетыРаботаСФормамиВызовСервера.СпособРазнесенияОплатыДляКонтрагента(Объект.Контрагент);
	Результат.Вставить("СпособЗаполненияСтавкиНДС", Справочники.ДоговорыКонтрагентов.СпособЗаполненияСтавкиНДСПоДоговору(
			ДоговорПоУмолчанию));
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ДанныеКИКонтрагента = Справочники.Контрагенты.ДанныеКИКонтрагентаДляВыбораНаФорме(Контрагент, Элементы,
			ПоляКИДляОтправкиЧека());
		ЗаполнитьПоляКИДляОтправкиЧекаПоУмолчанию(ДанныеКИКонтрагента);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УчетПоПроектам") И ЗначениеЗаполнено(ДоговорПоУмолчанию) И НЕ ЗначениеЗаполнено(Объект.Проект) Тогда
		Результат.Вставить("Проект", Справочники.Проекты.ПолучитьПроектПоДоговору(ДоговорПоУмолчанию));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты)
	
	ДокументыУНФ.ДатаПриИзменении(ДанныеДляИзмененияДаты, ЭтотОбъект, Объект);
	
	ФормыДокументовДеньги.ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС(ЭтотОбъект);
	ФормыДокументовДеньги.ЗаполнитьИнформациюПоКредитуЗаймуНаСервере(ЭтотОбъект); // Прочие расчеты 
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ДокументыУНФ.ОрганизацияПриИзменении(ЭтотОбъект, Объект);
	
	ВалютаИКассаПоУмолчанию = Справочники.Организации.ВалютаИКассаПоУмолчанию(Объект, Объект.ВалютаДенежныхСредств,
		"ВалютаДенежныхСредств");
	Если ЗначениеЗаполнено(ВалютаИКассаПоУмолчанию) Тогда
		Объект.Касса = ВалютаИКассаПоУмолчанию.Касса;
		Объект.ВалютаДенежныхСредств = ВалютаИКассаПоУмолчанию.ВалютаДенежныхСредств;
	КонецЕсли;
	
	ОбновитьВидимостьИОстаткиДС();
	УстановитьНастройкиУчетаВНалогообложении();
	ФормыДокументовДеньги.ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС(ЭтотОбъект);
	
	// БКЗБ
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата Тогда
		ПоказыватьЭлементыБЗКБ = Справочники.Организации.НужноПоказыватьЭлементыБЗКБДляОрганизации(Объект.Организация);
		Элементы.ВыплатыРегламентированнойЗаработнойПлаты.Видимость = ПоказыватьЭлементыБЗКБ;
	КонецЕсли;
	// Конец БЗКБ
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРеквизитыПечати()

	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзмененияРеквизитовПечати", ЭтотОбъект);
	ОткрытьФорму("Обработка.РеквизитыПечати.Форма.РеквизитыПечатиРасходИзКассы", 
		Новый Структура("КонтекстПечати", Объект), ЭтотОбъект, , , , ОписаниеОповещения);
		
КонецПроцедуры 

// Заполняет реквизиты платежа в бюджет по умолчанию.
//
&НаКлиенте
Процедура ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчанию()
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Налоги") Тогда
		Если ЗначениеЗаполнено(Объект.ВидНалога)
			И Объект.ВидНалога = ПредопределенноеЗначение("Справочник.ВидыНалогов.ЕдиныйНалоговыйПлатеж") Тогда
			Объект.Контрагент = ДанныеПолучаетляПоЕНП(Объект.ВидНалога, Объект.Организация, Объект.Дата);
			Объект.СрокУплаты = РегламентированнаяОтчетностьУСН.ОпределитьСрокПлатежаПоЕНП(Объект.Дата);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеПолучаетляПоЕНП(Налог, Организация, Дата)
	
	Возврат ДанныеГосударственныхОрганов.АдминистраторНалогаОрганизации(Налог, Организация, Дата);
	
КонецФункции

#КонецОбласти

#Область УправлениеВнешнимВидомФормы

&НаСервере
Процедура УстановитьВидимостьПечатиЧека()
	
	ВидОперацииПодразумеваетЧек = Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НаРасходы
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Налоги
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее;
	ИспользоватьЧеки = ИспользоватьЧеки();
	НапечататьЧекВидимость = ИспользоватьЧеки И ВидОперацииПодразумеваетЧек И Не ТолькоПросмотр;
	
	Элементы.НомерЧекаККМ.Видимость = ВидОперацииПодразумеваетЧек;
	Элементы.НапечататьЧек.Видимость = НапечататьЧекВидимость;
	Элементы.ГруппаОтправкаЧека.Видимость = НапечататьЧекВидимость;
	Элементы.ПредварительныйПросмотрЧека.Видимость = НапечататьЧекВидимость;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПовторнаяПечатьЧека",
		"Видимость",
		ИспользоватьЧеки И ВидОперацииПодразумеваетЧек);
	
	УстановитьВидимостьПризнакаСпособаРасчета(НапечататьЧекВидимость);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПечатиЧека()
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		Элементы.ГруппаОтправкаЧека.Доступность = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПовторнаяПечатьЧека",
		"Доступность",
		Объект.НомерЧекаККМ <> 0);
	
КонецПроцедуры

&НаКлиенте
Процедура УставитьТекущуюСтраницу()
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		ДобавитьПервуюСтрокуРасшифровкиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры // УставитьТекущуюСтраницу()

&НаКлиенте
Процедура ОчиститьРеквизитыНеОтносящиесяКОперации()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Поставщику")
	ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Покупателю")
	ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.НашейОрганизации")Тогда
		Объект.Корреспонденция = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Объект.ВыплатаРегламентированнойЗаработнойПлаты.Очистить();
		Объект.Подразделение = Неопределено;
		Объект.НаправлениеДеятельности = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.Заказ = Неопределено;
		Объект.КассаККМ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
		Объект.СчетОрганизации = Неопределено;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Подотчетнику") Тогда
		Объект.Корреспонденция = Неопределено;
		Объект.Контрагент = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.Подразделение = Неопределено;
		Объект.НаправлениеДеятельности = Неопределено;
		Объект.Заказ = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.КассаККМ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Объект.ВыплатаРегламентированнойЗаработнойПлаты.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
		Объект.СчетОрганизации = Неопределено;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Зарплата") Тогда
		Объект.Корреспонденция = Неопределено;
		Объект.Контрагент = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.Подразделение = Неопределено;
		Если НЕ ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов Тогда
			Объект.НаправлениеДеятельности = Неопределено;
		КонецЕсли;
		Объект.Заказ = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.КассаККМ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.РасшифровкаПлатежа.Очистить();
		Объект.СчетОрганизации = Неопределено;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику") Тогда
		Объект.Корреспонденция = Неопределено;
		Объект.Контрагент = Неопределено;
		Объект.Документ = Неопределено;
		Объект.Подразделение = Неопределено;
		Если НЕ ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов Тогда
			Объект.НаправлениеДеятельности = Неопределено;
		КонецЕсли;
		Объект.Заказ = Неопределено;
		Объект.КассаККМ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Объект.ВыплатаРегламентированнойЗаработнойПлаты.Очистить();
		Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
			ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекущийПользовательСистемы, "ОсновноеПодразделение");
			Объект.Подразделение = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, СтруктурнаяЕдиницаПодразделение);
		КонецЕсли;
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
		Объект.СчетОрганизации = Неопределено;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Прочее") 
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ЛичныеСредстваПредпринимателя") Тогда
		
		Объект.Контрагент = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.КассаККМ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.Корреспонденция = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Объект.ВыплатаРегламентированнойЗаработнойПлаты.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
		Объект.СчетОрганизации = Неопределено;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.НаРасходы") Тогда
		Объект.Контрагент = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.КассаККМ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.Корреспонденция = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Объект.ВыплатаРегламентированнойЗаработнойПлаты.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
		Объект.СчетОрганизации = Неопределено;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ПеремещениеВКассуККМ") Тогда
		Объект.Контрагент = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.Корреспонденция = Неопределено;
		Объект.Подразделение = Неопределено;
		Объект.НаправлениеДеятельности = Неопределено;
		Объект.Заказ = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Объект.ВыплатаРегламентированнойЗаработнойПлаты.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
		Объект.СчетОрганизации = Неопределено;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Налоги") Тогда
		Объект.Контрагент = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.Корреспонденция = Неопределено;
		Объект.Подразделение = Неопределено;
		Если НЕ ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов Тогда
			Объект.НаправлениеДеятельности = Неопределено;
		КонецЕсли;
		Объект.Заказ = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.КассаККМ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Объект.ВыплатаРегламентированнойЗаработнойПлаты.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
		Объект.СчетОрганизации = Неопределено;
	// Прочие расчеты
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ВыдачаЗаймаСотруднику") Тогда
		Объект.Корреспонденция = Неопределено;
		Объект.Контрагент = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.Подразделение = Неопределено;
		Объект.НаправлениеДеятельности = Неопределено;
		Объект.Заказ = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.КассаККМ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Объект.ВыплатаРегламентированнойЗаработнойПлаты.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
		Объект.СчетОрганизации = Неопределено;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.РасчетыПоКредитам") Тогда
		Объект.Корреспонденция = Неопределено;
		Объект.Контрагент = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.Подразделение = Неопределено;
		Объект.НаправлениеДеятельности = Неопределено;
		Объект.Заказ = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.КассаККМ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Объект.ВыплатаРегламентированнойЗаработнойПлаты.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
		Объект.СчетОрганизации = Неопределено;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ПрочиеРасчеты") Тогда
		Объект.Корреспонденция = Неопределено;
		Объект.Контрагент = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.КассаККМ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.Заказ = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Объект.ВыплатаРегламентированнойЗаработнойПлаты.Очистить();
		Объект.РасшифровкаПлатежа.Очистить();
		ДобавитьПервуюСтрокуРасшифровкиНаКлиенте();
	// Конец Прочие расчеты
		Объект.СчетОрганизации = Неопределено;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ВзносНаличнымиВБанк") Тогда
		Объект.Контрагент = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.КассаККМ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.Корреспонденция = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Объект.ВыплатаРегламентированнойЗаработнойПлаты.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
		Объект.СчетОрганизации = Неопределено;
	КонецЕсли;
	
	Корреспонденция = Объект.Корреспонденция;
	
КонецПроцедуры // ОчиститьРеквизитыНеОтносящиесяКОперации()

&НаСервере
Процедура УстановитьСвязиПараметровВыбораДоступныеТипы()
	
	// Прочие расчеты
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ПрочиеРасчеты") Тогда
		УстановитьПараметрыВыбораПоУчетуПрочихРасчетовНаСервереДляЭлементаСчетаКорреспонденции();
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.НаРасходы") Тогда
		УстановитьПараметрыВыбораНаРасходыНаСервереДляЭлементаСчетаКорреспонденции();
	Иначе
		УстановитьПараметрыВыбораПоМетаданнымДляЭлементаСчетаКорреспонденции();
	КонецЕсли;
	// Конец Прочие расчеты
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Поставщику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.НашейОрганизации") Тогда
		
		Массив = Новый Массив();
		Массив.Добавить(Тип("ДокументСсылка.ДополнительныеРасходы"));
		Массив.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
		Массив.Добавить(Тип("ДокументСсылка.РасходнаяНакладная"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетКомитенту"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетПереработчика"));
		Массив.Добавить(Тип("ДокументСсылка.Взаимозачет"));
		
		ДопустимыеТипы = Новый ОписаниеТипов(Массив, , );
		Элементы.РасшифровкаПлатежаДокумент.ОграничениеТипа = ДопустимыеТипы;
		
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику", , );
		Элементы.РасшифровкаПлатежаЗаказ.ОграничениеТипа = ДопустимыеТипы;
		
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПоставщика", , );
		Элементы.РасшифровкаПлатежаСчетНаОплату.ОграничениеТипа = ДопустимыеТипы;
		
		Элементы.РасшифровкаПлатежаДокумент.Подсказка = НСтр("ru = 'Оплачиваемый документ отгрузки товаров, работ и услуг контрагентом'");

	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Покупателю") Тогда
		
		Массив = Новый Массив();
		Массив.Добавить(Тип("ДокументСсылка.ПоступлениеВКассу"));
		Массив.Добавить(Тип("ДокументСсылка.ПоступлениеНаСчет"));
		Массив.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
		Массив.Добавить(Тип("ДокументСсылка.Взаимозачет"));
		Массив.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетКомиссионера"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетОПереработке"));
		Массив.Добавить(Тип("ДокументСсылка.ПередачаВА"));
		Массив.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
		Массив.Добавить(Тип("ДокументСсылка.РасходнаяНакладная"));
		
		ДопустимыеТипы = Новый ОписаниеТипов(Массив, , );
		Элементы.РасшифровкаПлатежаДокумент.ОграничениеТипа = ДопустимыеТипы;
		
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя", ,);
		Элементы.РасшифровкаПлатежаЗаказ.ОграничениеТипа = ДопустимыеТипы;
		
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.СчетНаОплату", , );
		Элементы.РасшифровкаПлатежаСчетНаОплату.ОграничениеТипа = ДопустимыеТипы;
		
		Элементы.РасшифровкаПлатежаДокумент.Подсказка = НСтр("ru = 'Документ расчетов с контрагентом, по которому осуществляется возврат денежных средств'");
		
	КонецЕсли;
	
	// Интеркампани
	Связи = Новый Массив;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.НашейОрганизации") Тогда
		Связи.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация", РежимИзмененияСвязанногоЗначения.Очищать));
		Связи.Добавить(Новый СвязьПараметраВыбора("ВидОперации", "Объект.ВидОперации", РежимИзмененияСвязанногоЗначения.НеИзменять));
	Иначе
		Связи.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент", РежимИзмененияСвязанногоЗначения.Очищать));
	КонецЕсли;
	Элементы.РасшифровкаПлатежаДоговор.СвязиПараметровВыбора = Новый ФиксированныйМассив(Связи);
	// Конец Интеркампани
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступность(ИзмененВидОперации = Ложь)
	
	// Документ основание.
	НовыйМассив = Новый Массив();
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	ПараметрыВыбораДокументаОснования = НовыеПараметры;
	// Конец Документ основание.
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		Элементы.Статья.Видимость = Истина;
	// Конец МобильноеПриложение
	КонецЕсли;
	
	Если ТолькоПросмотр И НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Элементы.ДокументОснованиеНадпись.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьИДоступность()

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	РасчетыРаботаСФормамиВызовСервера.УстановитьУсловноеОформлениеРасчетов(ЭтотОбъект, Перечисления.ВидыОперацийРасходИзКассы.Покупателю);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПоДаннымКонтрагента()
	
	РасчетыРаботаСФормамиВызовСервера.УстановитьУсловноеОформлениеРасчетовПоДаннымКонтрагента(ЭтотОбъект, Перечисления.ВидыОперацийРасходИзКассы.Покупателю);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПризнакаСпособаРасчета(Знач НапечататьЧекВидимость = неопределено)
	Если НапечататьЧекВидимость = неопределено Тогда
		НапечататьЧекВидимость = ИспользоватьЧеки() И Не ТолькоПросмотр;
	КонецЕсли;
	Элементы.РасшифровкаПлатежаПризнакСпособаРасчета.Видимость = НапечататьЧекВидимость
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Покупателю");
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборВидаНалога()
	
	ПлательщикЕНП = РегламентированнаяОтчетностьУСН.ПлательщикЕНП(Объект.Организация, Объект.Дата);
	
	НовыеПараметры = Новый Массив;
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ПрименяетсяОсобыйПорядокУплатыНалога", ПлательщикЕНП));
	Элементы.ВидНалога.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область ПрочиеРасчеты

#Область ПроцедурыОбработчикиСобытийРеквизитовШапки

&НаКлиенте
Процедура ДоговорЗаймаСотрудникуПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговораКредитаИлиЗайма();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеДоговораКредитаИлиЗайма()
	
	ДанныеДоговораЗаймаСотруднику = ДоговорКредитаЗаймаПриИзмененииНаСервере(Объект.ДоговорКредитаЗайма, Объект.Дата);
	Объект.ВалютаДенежныхСредств = ДанныеДоговораЗаймаСотруднику.ВалютаРасчетов;
	
	ЗаполнитьИнформациюПоКредитуЗаймуНаСервере();
	
	ВалютаДенежныхСредствПередИзменением = ВалютаДенежныхСредств;
	ВалютаДенежныхСредств = Объект.ВалютаДенежныхСредств;
	
	// Если валюта не изменилась, то ничего не делаем.
	Если ВалютаДенежныхСредств = ВалютаДенежныхСредствПередИзменением Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаДенежныхСредствПриИзмененииФрагмент();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоговорКредитаЗаймаПриИзмененииНаСервере(ДоговорКредитаЗайма, Дата)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить("ВалютаРасчетов", ДоговорКредитаЗайма.ВалютаРасчетов);
	СтруктураДанные.Вставить("Контрагент", ДоговорКредитаЗайма.Контрагент);
	СтруктураДанные.Вставить("Сотрудник", ДоговорКредитаЗайма.Сотрудник);
	СтруктураДанные.Вставить("ЭтоДоговорЗайма", ДоговорКредитаЗайма.ВидДоговора = Перечисления.ВидыДоговоровКредитаИЗайма.ДоговорЗаймаСотруднику);
		
	Возврат СтруктураДанные;
	
КонецФункции

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	СтруктураДанные = ПолучитьДанныеСотрудникПриИзменении(Объект.Подотчетник, Объект.Дата, Объект.Организация);
	Объект.Выдать = СтруктураДанные.ПодотчетникНаименование;
	Объект.ПоДокументу =
		Строка(СтруктураДанные.ДокументВид)
	  + " серия "
	  + СтруктураДанные.ДокументСерия
	  + ", номер "
	  + СтруктураДанные.ДокументНомер
	  + ", выданный "
	  + Формат(СтруктураДанные.ДокументДатаВыдачи, "ДФ=dd.MM.yyyy")
	  + " "
	  + СтруктураДанные.ДокументКемВыдан;
	  
	Объект.ДоговорКредитаЗайма = СтруктураДанные.ДоговорКредитаЗайма;
	ОбработатьИзменениеДоговораКредитаИлиЗайма();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеСотрудникПриИзменении(Сотрудник, Дата, Организация)
	
	СтруктураДанные = ПолучитьДанныеПодотчетникПриИзменении(Сотрудник, Дата);
	
	СтруктураДанные.Вставить("ДоговорКредитаЗайма", Документы.ДоговорКредитаИЗайма.ПолучитьДоговорКредитаИЗаймаПоУмолчаниюПоОрганизацииВидуДоговора(Сотрудник, Организация));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеПодотчетникПриИзменении()

&НаКлиенте
Процедура ВидНалогаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) > 13 Тогда
		
		СтрокаПоискаПоКБК = СтрЗаменить(ПараметрыПолученияДанных.СтрокаПоиска, " ", "");
		
		Если СтрДлина(СтрокаПоискаПоКБК) <= 20 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаПоискаПоКБК) Тогда
			
			// Строка поиска похожа на КБК. Код включает код подвида доходов.
			ДанныеВыбора = ДвиженияДенежныхСредствВызовСервера.ДанныеВыбораНалогаПоКБК(СтрокаПоискаПоКБК);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюПоКредитуЗаймуНаСервере()
	ФормыДокументовДеньги.ЗаполнитьИнформациюПоКредитуЗаймуНаСервере(ЭтаФорма);
КонецПроцедуры
#КонецОбласти

#Область ПроцедурыОбработчикиСобытийРеквизитовТабличнойЧасти

&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыСуммаРасчетовПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуПлатежаНаКлиенте(ЭтотОбъект, Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыПередУдалением(Элемент, Отказ)
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыПослеУдаления(Элемент)
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		УставитьТекущуюСтраницу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыКурсПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуПлатежаНаКлиенте(ЭтотОбъект, Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыКурсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасчетыРаботаСФормамиКлиент.ПредоплатаКурсНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, "РасшифровкаПлатежаПрочиеРасчеты");
	
КонецПроцедуры

&НаКлиенте
Процедура КурсРасчетовОбработкаВыбораЗавершение(ДатаКурса, ДополнительныеПараметры) Экспорт
	
	Если ДатаКурса <> Неопределено Тогда
		КурсНаДату = ПолучитьКурсВалютыНаСервере(ЭтаФорма.Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные.Договор, ДатаКурса);
		ЭтаФорма.Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные.Курс = КурсНаДату.Курс;
		ЭтаФорма.Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные.Кратность = КурсНаДату.Кратность;
		РасшифровкаПлатежаПрочиеРасчетыКурсПриИзменении(Элементы.ПрочиеРасчетыКурс);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКурсВалютыНаСервере(Договор, ДатаКурса) Экспорт
	
	Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(Договор.ВалютаРасчетов, ДатаКурса);
	
КонецФункции

&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыКратностьПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуПлатежаНаКлиенте(ЭтотОбъект, Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс);
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
		1,
		СтрокаТабличнойЧасти.Кратность);
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.СуммаРасчетов = 0,
		1,
		СтрокаТабличнойЧасти.СуммаПлатежа / СтрокаТабличнойЧасти.СуммаРасчетов * Курс);
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
	КонецЕсли;
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыДоговорПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговораКонтрагентаПрочиеРасчеты();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеДоговораКонтрагентаПрочиеРасчеты()
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда
		СтруктураДанные = РасчетыРаботаСФормамиВызовСервера.ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении(
			Объект.Дата,
			СтрокаТабличнойЧасти.Договор,
			СтрокаТабличнойЧасти.ДокументПланирования,
			СтрокаТабличнойЧасти.СтатьяДДС);
		СтрокаТабличнойЧасти.Курс = ?(
			СтруктураДанные.ДоговорВалютаКурсКратность.Курс = 0,
			1,
			СтруктураДанные.ДоговорВалютаКурсКратность.Курс);
		СтрокаТабличнойЧасти.Кратность = ?(
			СтруктураДанные.ДоговорВалютаКурсКратность.Кратность = 0,
			1,
			СтруктураДанные.ДоговорВалютаКурсКратность.Кратность);
		
		СтрокаТабличнойЧасти.СтатьяДДС = Неопределено; //Выводятся данные только одной строки, т.ч. статью будем брать из подвала.
	Иначе
		СтрокаТабличнойЧасти.СтатьяДДС = Неопределено;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СуммаРасчетов = ВалютыУНФКлиентСервер.Пересчитать(
		СтрокаТабличнойЧасти.СуммаПлатежа, Курс, СтрокаТабличнойЧасти.Курс, Кратность, СтрокаТабличнойЧасти.Кратность);
	
	РасчетыРаботаСФормамиКлиент.ЗаполнитьСписокВыбораВалютЭлементаФормы(Элементы.РасшифровкаПлатежаПрочиеРасчетыКурс,
		Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные.Договор, Объект.Дата);
	
КонецПроцедуры // ОбработатьИзменениеДоговораКонтрагента()

&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.Контрагент.Пустая() Тогда
		СтандартнаяОбработка = Ложь;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Сначала выберите контрагента'");
		Сообщение.Поле = "Объект.Контрагент";
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	ОбработатьНачалоВыбораДоговораКонтрагентаПрочиеРасчеты(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНачалоВыбораДоговораКонтрагентаПрочиеРасчеты(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = РасчетыРаботаСФормамиВызовСервера.ПолучитьПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, СтрокаТабличнойЧасти.Договор, Объект.ВидОперации);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные;
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамСуммаРасчетовПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуПлатежаНаКлиенте(ЭтотОбъект, Элементы.РасшифровкаПлатежаРасчетыПоКредитам.ТекущиеДанные);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамКурсПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуПлатежаНаКлиенте(ЭтотОбъект, Элементы.РасшифровкаПлатежаРасчетыПоКредитам.ТекущиеДанные);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамКурсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасчетыРаботаСФормамиКлиент.ПредоплатаКурсНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, "РасшифровкаПлатежаРасчетыПоКредитам");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамКратностьПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуПлатежаНаКлиенте(ЭтотОбъект, Элементы.РасшифровкаПлатежаРасчетыПоКредитам.ТекущиеДанные);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежаРасчетыПоКредитам.ТекущиеДанные;
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежаРасчетыПоКредитам.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс);
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
		1,
		СтрокаТабличнойЧасти.Кратность);
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.СуммаРасчетов = 0,
		1,
		СтрокаТабличнойЧасти.СуммаПлатежа / СтрокаТабличнойЧасти.СуммаРасчетов * Курс);
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
	КонецЕсли;
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамПередУдалением(Элемент, Отказ)
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыДействияКоманд

&НаСервере
Процедура ЗаполнитьПоДоговоруЗаймаНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыПоКредитамИЗаймамОбороты.ДоговорКредитаЗайма.ВалютаРасчетов КАК ВалютаРасчетов,
		|	РасчетыПоКредитамИЗаймамОбороты.ОсновнойДолгВалПриход
		|ПОМЕСТИТЬ ВременнаяТаблицаВыданныеРанееСуммы
		|ИЗ
		|	РегистрНакопления.РасчетыПоКредитамИЗаймам.Обороты(
		|			,
		|			,
		|			,
		|			ДоговорКредитаЗайма = &ДоговорКредитаЗайма
		|				И Организация = &Организация) КАК РасчетыПоКредитамИЗаймамОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасчетыПоКредитамИЗаймам.ДоговорКредитаЗайма.ВалютаРасчетов,
		|	ВЫБОР
		|		КОГДА РасчетыПоКредитамИЗаймам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА -РасчетыПоКредитамИЗаймам.ОсновнойДолгВал
		|		ИНАЧЕ РасчетыПоКредитамИЗаймам.ОсновнойДолгВал
		|	КОНЕЦ
		|ИЗ
		|	РегистрНакопления.РасчетыПоКредитамИЗаймам КАК РасчетыПоКредитамИЗаймам
		|ГДЕ
		|	РасчетыПоКредитамИЗаймам.Регистратор = &Ссылка
		|	И РасчетыПоКредитамИЗаймам.ДоговорКредитаЗайма = &ДоговорКредитаЗайма
		|	И РасчетыПоКредитамИЗаймам.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаВыданныеРанееСуммы.ВалютаРасчетов,
		|	СУММА(ВременнаяТаблицаВыданныеРанееСуммы.ОсновнойДолгВалПриход) КАК ОсновнойДолгВалПриход,
		|	ДоговорКредитаЗайма.СуммаДокумента
		|ИЗ
		|	ВременнаяТаблицаВыданныеРанееСуммы КАК ВременнаяТаблицаВыданныеРанееСуммы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДоговорКредитаИЗайма КАК ДоговорКредитаЗайма
		|		ПО ВременнаяТаблицаВыданныеРанееСуммы.ВалютаРасчетов = ДоговорКредитаЗайма.ВалютаРасчетов
		|ГДЕ
		|	ДоговорКредитаЗайма.Ссылка = &ДоговорКредитаЗайма
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаВыданныеРанееСуммы.ВалютаРасчетов,
		|	ДоговорКредитаЗайма.СуммаДокумента";
	
	Запрос.УстановитьПараметр("ДоговорКредитаЗайма", Объект.ДоговорКредитаЗайма);
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Объект.ВалютаДенежныхСредств = Выборка.ВалютаРасчетов;
		ТекстСообщения = "";
		Если Выборка.СуммаДокумента < Выборка.ОсновнойДолгВалПриход Тогда
			ТекстСообщения = "По договору займа уже выдано "+Выборка.ОсновнойДолгВалПриход+" ("+Выборка.ВалютаРасчетов+").";
		ИначеЕсли Выборка.СуммаДокумента = Выборка.ОсновнойДолгВалПриход Тогда
			ТекстСообщения = "По договору займа уже выдана вся сумма "+Выборка.ОсновнойДолгВалПриход+" ("+Выборка.ВалютаРасчетов+").";
		Иначе
			Объект.СуммаДокумента = Выборка.СуммаДокумента - Выборка.ОсновнойДолгВалПриход;
		КонецЕсли;
		
		Если ТекстСообщения <> "" Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Поле = "ДоговорКредитаЗайма";
			Сообщение.Сообщить();
		КонецЕсли;
	Иначе
		Объект.СуммаДокумента = Объект.ДоговорКредитаЗайма.СуммаДокумента;
		Объект.ВалютаДенежныхСредств = Объект.ДоговорКредитаЗайма.ВалютаРасчетов;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДоговоруЗайма(Команда)
	
	Если Объект.ДоговорКредитаЗайма.Пустая() Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Выберите договор'"));
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоДоговоруЗаймаНаСервере();
	СуммаДокументаПриИзменении(Элементы.СуммаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДоговоруКредита(Команда)
	
	Если Объект.ДоговорКредитаЗайма.Пустая() Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Выберите договор'"));
		Возврат;
	КонецЕсли;
	
	АдресРасшифровкиПлатежаВХранилище = ПоместитьРасшифровкаПлатежаВХранилище();
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("АдресРасшифровкиПлатежаВХранилище", АдресРасшифровкиПлатежаВХранилище);
	ПараметрыОтбора.Вставить("Организация", Объект.Организация);
	ПараметрыОтбора.Вставить("Регистратор", Объект.Ссылка);
	ПараметрыОтбора.Вставить("ИдентификаторФормыДокумента", УникальныйИдентификатор);
	ПараметрыОтбора.Вставить("ВидОперации", Объект.ВидОперации);
	ПараметрыОтбора.Вставить("Дата", Объект.Дата);
	ПараметрыОтбора.Вставить("Валюта", Объект.ВалютаДенежныхСредств);
	ПараметрыОтбора.Вставить("ДоговорКредитаЗайма", Объект.ДоговорКредитаЗайма);
	ПараметрыОтбора.Вставить("СуммаДокумента", Объект.СуммаДокумента);
	ПараметрыОтбора.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыОтбора.Вставить("СтавкаНДСПоУмолчанию", СтавкаНДСПоУмолчанию);
	ПараметрыОтбора.Вставить("СуммаПлатежа", Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа"));
	ПараметрыОтбора.Вставить("Курс", Курс);
	ПараметрыОтбора.Вставить("Кратность", Кратность);
	ПараметрыОтбора.Вставить("Сотрудник", Объект.Подотчетник);
	
	ОткрытьФорму("ОбщаяФорма.ФормаЗаполненияРасшифровкиПлатежаПоКредитамИЗаймам", ПараметрыОтбора, ЭтотОбъект, , , ,
		Новый ОписаниеОповещения("ЗаполнитьПоДоговоруКредитаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДоговоруКредитаЗавершение(РезультатЗаполнения, ПараметрыЗавершения) Экспорт

	Если ТипЗнч(РезультатЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьСуммуДокумента = Ложь;
		Если РезультатЗаполнения.Свойство("ОчищатьТабличнуюЧастьПриЗаполнении") И РезультатЗаполнения.ОчищатьТабличнуюЧастьПриЗаполнении Тогда
			Объект.РасшифровкаПлатежа.Очистить();
			ЗаполнитьСуммуДокумента = Истина;
		КонецЕсли;
		Если РезультатЗаполнения.Свойство("АдресРасшифровкиПлатежаВХранилище") Тогда
			ПолучитьРасшифровкаПлатежаИзХранилища(РезультатЗаполнения.АдресРасшифровкиПлатежаВХранилище, Ложь);
			
			Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
				Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
			КонецЕсли;
		КонецЕсли;
		Если ЗаполнитьСуммуДокумента Тогда
			Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
			СуммаДокументаПриИзменении(Элементы.СуммаДокумента);
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
Процедура УстановитьПараметрыВыбораПоУчетуПрочихРасчетовНаСервереДляЭлементаСчетаКорреспонденции()

	Элемент = Элементы.Корреспонденция;
	
	ПараметрыВыбораЭлемента = Новый Массив;
	ОтборПоТипуСчета = Новый Массив;
	
	Для Каждого Параметр Из Элемент.ПараметрыВыбора Цикл
		Если Параметр.Имя = "Отбор.ТипСчета" Тогда
			ОтборПоТипуСчета.Добавить(Перечисления.ТипыСчетов.Дебиторы);
			ОтборПоТипуСчета.Добавить(Перечисления.ТипыСчетов.Кредиторы);
			
			ПараметрыВыбораЭлемента.Добавить(Новый ПараметрВыбора("Отбор.ТипСчета", Новый ФиксированныйМассив(ОтборПоТипуСчета)));
		Иначе
			ПараметрыВыбораЭлемента.Добавить(Параметр);
		КонецЕсли;
	КонецЦикла;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораЭлемента);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораНаРасходыНаСервереДляЭлементаСчетаКорреспонденции()

	Элемент = Элементы.Корреспонденция;
	
	ПараметрыВыбораЭлемента = Новый Массив;
	ОтборПоТипуСчета = Новый Массив;
	
	Для Каждого Параметр Из Элемент.ПараметрыВыбора Цикл
		Если Параметр.Имя = "Отбор.ТипСчета" Тогда
			ОтборПоТипуСчета.Добавить(Перечисления.ТипыСчетов.Расходы);
			ОтборПоТипуСчета.Добавить(Перечисления.ТипыСчетов.ПрочиеРасходы);
			
			ПараметрыВыбораЭлемента.Добавить(Новый ПараметрВыбора("Отбор.ТипСчета", Новый ФиксированныйМассив(ОтборПоТипуСчета)));
		ИначеЕсли Параметр.Имя = "ЗаголовокСчета" Тогда
			ПараметрыВыбораЭлемента.Добавить(Новый ПараметрВыбора("ЗаголовокСчета", "Статья расходов"));
		Иначе
			ПараметрыВыбораЭлемента.Добавить(Параметр);
		КонецЕсли;
	КонецЦикла;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораЭлемента);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораПоМетаданнымДляЭлементаСчетаКорреспонденции()

	Элемент = Элементы.Корреспонденция;
	
	ПараметрыВыбораЭлемента = Новый Массив;
	
	ПараметрыВыбораИзМетаданных = Объект.Ссылка.Метаданные().Реквизиты.Корреспонденция.ПараметрыВыбора;
	Для Каждого Параметр Из ПараметрыВыбораИзМетаданных Цикл
		ПараметрыВыбораЭлемента.Добавить(Параметр);
	КонецЦикла;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораЭлемента);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДоговорКредитаЗаймаПоУмолчанию(Документ, Контрагент, Организация, ВидОперации)
	
	МенеджерДокумента = Документы.ДоговорКредитаИЗайма;
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(?(ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.РасчетыПоКредитам, 
		Перечисления.ВидыДоговоровКредитаИЗайма.КредитПолученный,
		Перечисления.ВидыДоговоровКредитаИЗайма.ДоговорЗаймаСотруднику));
	
	ДоговорКредитаЗаймаПоУмолчанию = МенеджерДокумента.ПолучитьДоговорКредитаИЗаймаПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорКредитаЗаймаПоУмолчанию;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область АвтоподборКонтактов

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_ОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_АвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, Параметры, Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область Разобрать

&НаКлиенте
Процедура СуммаДокументаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Объект.СуммаДокумента = ВыбранноеЗначение;
	СуммаДокументаПриИзменении(Элемент);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиКолонокТабличныхЧастей(ВалютаСсылка)
	РасчетыРаботаСФормамиВызовСервера.УстановитьЗаголовкиКолонокТабличныхЧастей(ЭтотОбъект, ВалютаСсылка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОбАвансеВРасшифровкеПлатежа()
	
	Для каждого ТекущаяСтрока Из Объект.РасшифровкаПлатежа Цикл
		ТекущаяСтрока.Аванс = ?(ТекущаяСтрока.ПризнакАванса , ТекущаяСтрока.СуммаПлатежа, 0);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено,
	СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПодотчетникомРасшифровкаПлатежаСчетНаОплатуПриИзменении(Элемент)
	
	ФормыДокументовДеньгиКлиент.ДокументПланированияПриИзменении(ЭтотОбъект, "ДокументыПланированияРасшифровкаПлатежа");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамДокументПланированияПриИзменении(Элемент)
	
	ФормыДокументовДеньгиКлиент.ДокументПланированияПриИзменении(ЭтотОбъект, "РасшифровкаПлатежаРасчетыПоКредитам");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованиюЗавершениеНаСервере()
	
	УстановитьСвязиПараметровВыбораДоступныеТипы();
	ВидОперацииПриИзмененииНаСервере(Ложь);
	
	Если (Объект.ВидОперации = ВидОперацииПоставщику ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации)И Объект.ВариантЗаполненияРасшифровки <> ВариантЗаполненияРасшифровкиВручную Тогда
		Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиВручную;
		ФормыДокументовДеньги.НастроитьЭлементыРаспределенияДолговНаСервере(ЭтаФорма);
	КонецЕсли;
	
	Если НЕ (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РасходДСПлан")
		ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПеремещениеДСПлан")) Тогда
		
		ФормыДокументовДеньги.УстановитьСтатьюДДС(ЭтотОбъект);
		Если НЕ Объект.Контрагент.Пустая() Тогда
			ФормыДокументовДеньги.УстановитьСтатьиДДСВРасшифровкеПлатежа(ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	РасчетыРаботаСФормамиВызовСервера.ЗаполнитьРеквизитыКурсИКратность(ЭтотОбъект);
	ОбновитьВидимостьИОстаткиДС();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатьиДДСВРасшифровкеПлатежа();
	ФормыДокументовДеньги.УстановитьСтатьиДДСВРасшифровкеПлатежа(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

#КонецОбласти

#Область Взаиморасчеты

#Область РаботаСФормойРаспределенияСуммыПлатежа

&НаКлиенте
Процедура РаспределитьСуммуПлатежаПослеРаспределения(РезультатЗакрытия, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") И РезультатЗакрытия.Свойство("ДеревоРаспределенияСуммыПлатежа") Тогда
		
		СтруктураВидыИзменяемыхДокументов = РасчетыРаботаСФормамиКлиент.ЗаполнитьРасшифровкуПлатежаДеньгиПоДеревуРаспределения(ЭтотОбъект, РезультатЗакрытия, ДопПараметры);
		ЗаполнитьРасшифровкуПлатежаПоДеревуРаспределенияЗавершение(РезультатЗакрытия, ДопПараметры);
		
		РасчетыРаботаСФормамиКлиент.НастроитьЭлементыДляИзменяемыхДокументов(Истина, ЭтотОбъект, СтруктураВидыИзменяемыхДокументов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРасшифровкуПлатежаПоДеревуРаспределенияЗавершение(РезультатЗакрытия, ДопПараметры)
	
	// Если больше строк не осталось, то добавить одну строку с автораспределением всей суммы на основной договор.
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		Объект.РасшифровкаПлатежа.Добавить();
		Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
		Объект.РасшифровкаПлатежа[0].Договор = РезультатЗакрытия.ДоговорПоУмолчанию;
		Объект.РасшифровкаПлатежа[0].СпособЗачета = РасчетыРаботаСФормамиВызовСервера.СпособРазнесенияОплатыДляДоговора(Объект.РасшифровкаПлатежа[0].Договор, Объект.Контрагент);
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
		РасшифровкаПлатежаСуммаПлатежаПриИзменении(Неопределено);
	КонецЕсли;
	
	Если Элементы.СтраницыРасчетовСКонтрагентом.ТекущаяСтраница <> Элементы.СтраницаПросмотр Тогда
		ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиПросмотр;
		НастроитьЭлементыРаспределенияДолговНаСервере();
	КонецЕсли;
	ЗаполнитьТаблицуПросмотраНаКлиенте();
	
	Если Объект.СуммаДокумента = 0 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура РаспределитьСуммуПлатежа(Команда) Экспорт
	
	Если Объект.Контрагент.Пустая() Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите вначале контрагента.'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая()
		ИЛИ Объект.Дата <> ДатаПриСозданииНаСервере Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗаписатьИОткрытьФормуРаспределенияПлатежа", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, 
		НСтр("ru = 'Вызов Помощника возможен только после записи данных.
					|Данные будут записаны.'"),
		РежимДиалогаВопрос.ОКОтмена);
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФормуРаспределенияПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИОткрытьФормуРаспределенияПлатежа(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Записать();
		Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
			Возврат; // Запись не удалась, сообщения о причинах выводит платформа.
		КонецЕсли;
		ОткрытьФормуРаспределенияПлатежа();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРаспределенияПлатежа()
	
	СтруктураПараметров = Новый Структура();
	СтруктураАдресов = ПолучитьСтруктуруАдресовВХранилище();
	СтруктураПараметров.Вставить("СтруктураАдресов", СтруктураАдресов);
	СтруктураПараметров.Вставить("ЭтоРасчетыСПоставщиком", Истина);
	СтруктураПараметров.Вставить("ВалютаДокумента", Объект.ВалютаДенежныхСредств);
	
	РасчетыРаботаСФормамиКлиент.ОткрытьФормуРаспределенияСуммыПлатежа(Истина, ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПросмотра(Команда)
	ЗаполнитьТаблицуПросмотраНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПросмотраНаКлиенте(пПоДвижениям = Ложь)
	
	Если ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиПросмотр
		И (Объект.ВидОперации = ВидОперацииПоставщику 
		ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации) Тогда
		ЗаполнитьТаблицуПросмотраНаСервере(пПоДвижениям, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПросмотраНаСервере(пПоДвижениям = Ложь, пПроверилиНаКлиенте = Ложь)
	
	РасчетыРаботаСФормамиВызовСервера.ЗаполнитьТаблицуПросмотраВДенежномДокументеНаСервере(ЭтотОбъект, пПоДвижениям, пПроверилиНаКлиенте);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДляПросмотраОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если СтрНайти(Расшифровка, "ПереходитьВРежимРедактирования") <> 0 Тогда
		ВариантЗаполненияРасшифровки = СтруктураПараметровРасчетов.ВариантЗаполненияРасшифровкиВручную;
		ВариантЗаполненияРасшифровкиПриИзменении(Элементы.ВариантЗаполненияРасшифровки);
	КонецЕсли;
	
	РасчетыРаботаСФормамиКлиент.ТаблицаДляПросмотраОбработкаРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка, СтруктураПараметровРасчетов);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеНадписиСписокИзменяемыхДокументовНажатие(Элемент, СтандартнаяОбработка)
	
	СписокСсылок = РасчетыРаботаСФормамиКлиент.ДанныеНадписиСписокИзменяемыхДокументовНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка, 2);
	Если СписокСсылок <> Неопределено Тогда
		ОписаниеОповещенияВыбораИзМеню = Новый ОписаниеОповещения("ДанныеНадписиСписокИзменяемыхДокументовНажатиеЗавершение",
			РасчетыРаботаСФормамиКлиент);
		ПоказатьВыборИзМеню(ОписаниеОповещенияВыбораИзМеню, СписокСсылок, Элементы.НадписьДокументЗачетаПредоплаты);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруАдресовВХранилище()
	
	СтруктураДляВозврата = Новый Структура();
	
	СтруктураДляВозврата.Вставить("АдресРасшифровкаПлатежаВХранилище",
		ПоместитьВоВременноеХранилище(
			Объект.РасшифровкаПлатежа.Выгрузить(),
			УникальныйИдентификатор));
	
	СтруктураДляВозврата.Вставить("АдресТаблицаДокументовДляИзмененияВХранилище",
		ПоместитьВоВременноеХранилище(
			ТаблицаДокументовДляИзменения.Выгрузить(),
			УникальныйИдентификатор));
	
	Возврат СтруктураДляВозврата;
	
КонецФункции

&НаКлиенте
Процедура РасшифровкаПлатежаСпособЗачетаПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.РасшифровкаПлатежаСпособЗачетаПриИзменении(Элементы.РасшифровкаПлатежа.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриАктивизацииСтроки(Элемент)
	
	// Выведем информацию о документе, в котором будет зачтена предоплата.
	Если ТаблицаДокументовДляИзменения.Количество() > 0 Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьАктивизациюСтрокиРасшифровкиПлатежа", 0.2, Истина);
	Иначе
		Элементы.ГруппаЗачетПредоплатыПоСтроке.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьАктивизациюСтрокиРасшифровкиПлатежа()
	
	РасчетыРаботаСФормамиКлиент.Подключаемый_ОбработатьАктивизациюСтрокиРасшифровкиПлатежа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовДляИзмененияКартинка1Нажатие(Элемент, СтандартнаяОбработка)
	РасчетыРаботаСФормамиКлиент.ДанныеНадписиСписокИзменяемыхДокументовНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПервуюСтрокуРасшифровкиНаКлиенте()
	
	Объект.РасшифровкаПлатежа.Добавить();
	Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
	Объект.РасшифровкаПлатежа[0].СпособЗачета = РасчетыРаботаСФормамиВызовСервера.СпособРазнесенияОплатыДляДоговора(Объект.РасшифровкаПлатежа[0].Договор, Объект.Контрагент);
	Объект.РасшифровкаПлатежа[0].ПризнакАванса = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		ПересчитатьИтогиПриИзмененииАвансаНаКлиенте();
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущиеДанные.СпособЗачета.Пустая() Тогда
				ТекущиеДанные.СпособЗачета = СпособЗачетаПоУмолчаниюДляКонтрагента;
			КонецЕсли;
			
			Если НЕ Копирование Тогда
				РасчетыРаботаСФормамиКлиент.ЗаполнитьДоговорВНовойСтрокеРасшифровки(ЭтотОбъект, ТекущиеДанные);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти
