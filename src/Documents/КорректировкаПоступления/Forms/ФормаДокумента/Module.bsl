
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДоступенОрдерныйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныйСклад");
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Объект.ОтражатьВУчете  = Истина;
		
		ПодготовитьФормуНаСервере();
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			ДокументСсылка = ПолучитьИсправляемыйДокументПоступления(Объект.ДокументОснование, Ложь);
			ДокументОснование = Документы.КорректировкаПоступления.ПолучитьПоследнийКорректирующийДокумент(ДокументСсылка, Объект.Ссылка);
			
			Если ЗначениеЗаполнено(ДокументОснование) Тогда
				РеквизитыДокументаПоступления 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДокументОснование, "Дата");
				РеквизитыДокументаОснования		= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Дата");
			
				Если Объект.ДокументОснование <> ДокументОснование 
					И РеквизитыДокументаПоступления.Дата < РеквизитыДокументаОснования.Дата Тогда
					ПоследнийДокументИсправления = ДокументОснование;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	КэшЗначений.Вставить("ВерсияПодчиненногоСчетФактуры", Неопределено);
	КэшЗначений.Вставить("МодифицированностьФормы", Ложь);
	КэшЗначений.Вставить("ОбрабатываемыеРеквизиты", Новый Массив);
	
	НаборСвойств_Документ_КорректировкаПоступления = УправлениеСвойствами.НаборСвойствПоИмени(
		"Документ_КорректировкаПоступления");
	КэшЗначений.Вставить("НаборСвойств_Документ_КорректировкаПоступления",
		НаборСвойств_Документ_КорректировкаПоступления);
	
	// Установить надписи счет-фактура и основание
	СчетФактураСсылка = СчетаФактурыУНФ.ПолучитьПодчиненныйСчетФактуру(Объект.Ссылка, Истина);
	Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(СчетФактураСсылка, Истина);
	КэшЗначений.Вставить("СчетФактураСсылка", ?(ТипЗнч(СчетФактураСсылка) = Тип("Структура"), СчетФактураСсылка.Ссылка, Неопределено));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСчетФактураНомерДата", "Видимость",
		Элементы.СчетФактураНадпись.Видимость И Не ЗначениеЗаполнено(КэшЗначений.СчетФактураСсылка));
	
	// ЭДО
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.КомандыЭДО_ФормаДокумента(ЭтотОбъект);
	// Конец ЭДО
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиУНФ.ЗаполнитьДополнительныеПараметры(Объект, "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента);
	
	// Характеристики
	Если Параметры.Ключ.Пустая() Тогда
		НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект, Истина);
	КонецЕсли;
	
	// ГТД и РНПТ
	ИменаТЧИПолей = ГрузовыеТаможенныеДекларацииСервер.ИменаТЧИПолейДляТаблицыЗапасы_БазовыеПоляСПрослеживаемостью();
	ИменаТЧИПолей[0].Вставить("ИмяПоляОформления", "ЗапасыРНПТКорректировка");
	ИменаТЧИПолей[0].Вставить("ДополнительноеПолеПроверки", "ЕстьВДокументеПоступления");
	
	Если Не ИсходныйДокумент = Неопределено Тогда
		КэшЗначений.Вставить("ПоставщикРезидентТаможенногоСоюза", Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(ИсходныйДокумент.Контрагент));
	Иначе
		КэшЗначений.Вставить("ПоставщикРезидентТаможенногоСоюза", Ложь);
	КонецЕсли;
	
	ГрузовыеТаможенныеДекларацииСервер.ПриСозданииНаСервереДляДокументаСПрослеживаемостью(ЭтаФорма, ИменаТЧИПолей, КэшЗначений);
	
	Если ПоставщикРезидентТаможенногоСоюза И КэшЗначений.Свойство("УчетГТД")
		И КэшЗначений.УчетГТД Тогда
		Элементы.ЗапасыГруппаРНПТ.Видимость = Ложь;
		Элементы.ЗапасыНомерГТД.Видимость = Истина;
	КонецЕсли;
	
	// Конец ГТД и РНПТ
	
	УчетОстатковПоСкладскимОрдерам = УчетОстатковВРазрезеСкладскихОрдеров();
	Элементы.ЗапасыДокументПоступления.Видимость = УчетОстатковПоСкладскимОрдерам;
	
	МобильныйКлиентУНФ.НастроитьФормуОбъектаМобильныйКлиент(Элементы, "Запасы,Расходы");
	НапоминанияПользователяУНФ.УстановитьОтображениеКомандОрганайзера(Элементы);
	
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "КорректировкаПоступления", НастройкиФормыВыбораНоменклатуры);
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "КорректировкаПоступления", НастройкиФормыВыбораНоменклатуры,,"Расходы");
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Расходы");
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
	Элементы.ЗапасыГруппаСерииНоменклатурыОбщая.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры")
	И ТипЗнч(Объект.ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.ПриходнаяНакладная");
	
	НастройкиКоличества = ПолучитьНастройкиИзмененияКоличества();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиКоличества);

	Пользователь = Пользователи.ТекущийПользователь();
	ПоказыватьКолонкуСодержаниеВКорректировкеПоступленияЗапасы = 
		УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,
			"ПоказыватьКолонкуСодержаниеВКорректировкеПоступленияЗапасы");
	ПоказыватьКолонкуСодержаниеВКорректировкеПоступленияРасходы = 
		УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,
			"ПоказыватьКолонкуСодержаниеВКорректировкеПоступленияРасходы");
	УстановитьВидимостьОтПользовательскихНастроек(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ПоследнийДокументИсправления) Тогда
		ТекстВопроса = НСтр("ru = 'Для указанного документа существуют более поздние корректировки.
								|Использовать последнюю введенную корректировку?'");
		Оповещение = Новый ОписаниеОповещения("ВопросИспользоватьПоследнююКорректировкуЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
	// ЭДО
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭДО
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	// Прослеживаемость
	Если ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаПодбораРНПТ" Тогда
		
		ОбработкаВыбораРНПТННаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаВыбора" Тогда
		
		ОбработкаВыбораГТДНаКлиенте(ВыбранноеЗначение);
		
		// Конец Прослеживаемость
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		
		ОбновитьЭлементыДополнительныхРеквизитов();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" Тогда
		
		ЭтаФорма.Прочитать();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновлениеТекстаПроСчетФактуруПолученный" Тогда
		
		ПредставлениеЗаголовка = РаботаСФормойДокументаКлиент.ПредставлениеЗаголовкаПодчиненногоСчетаФактуры(Объект.Ссылка, Источник, Параметр, КэшЗначений);
		Если ПредставлениеЗаголовка <> Неопределено Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СчетФактураНадпись", "Заголовок", ПредставлениеЗаголовка);
			
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСчетФактураНомерДата", "Видимость", Ложь);
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище	= Параметр;
		
		ТекущаяСтраницаЗапасы	= Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаЗапасы;
		ИмяТабличнойЧасти 		= ?(ТекущаяСтраницаЗапасы, "Запасы", "Расходы");
		
		ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ТекущаяСтраницаЗапасы, ТекущаяСтраницаЗапасы);
		
		ОбновитьПодвалФормы(ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "ПодборСерий"
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		ПараметрыИменаПолей = Новый Структура;
		
		ПараметрыИменаПолей.Вставить("ИмяТЧЗапасы", "Запасы");
		ПараметрыИменаПолей.Вставить("ИмяТЧСерииНоменклатуры", "СерииНоменклатуры");
		ПараметрыИменаПолей.Вставить("ИмяПоляКлючСвязи", "КлючСвязи");
		
		ИзменилосьКоличество = ПолучитьСерииНоменклатурыИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки, ПараметрыИменаПолей);
		Если ИзменилосьКоличество Тогда
			ОбновитьПодвалФормы(ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект.Ссылка);
	// Конец Обсуждения
	
	// ЭДО
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец ЭДО

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	УчетОстатковПоСкладскимОрдерам = УчетОстатковВРазрезеСкладскихОрдеров();
	Элементы.ЗапасыДокументПоступления.Видимость = УчетОстатковПоСкладскимОрдерам;
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
	// ЭДО
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.КомандыЭДО_ПриЧтенииФормыДокумента(ЭтотОбъект);
	// Конец ЭДО
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("Проведение"+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	КэшЗначений.МодифицированностьФормы = Модифицированность;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ТекстСообщения = "";
		Справочники.ДоговорыКонтрагентов.ПроверитьСоответствиеДоговораУсловиямДокумента(
			ТекстСообщения,
			Объект.Договор,
			Объект.Ссылка,
			Объект.Организация,
			Объект.Контрагент,
			Отказ,
			Объект.ВидОперации);
		
		Если ТекстСообщения <> "" Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Если Отказ Тогда
				Сообщение.Текст = СтрШаблон(НСтр("ru = 'Документ не проведен. %1'"), ТекстСообщения);
			Иначе
				Сообщение.Текст = ТекстСообщения;
			КонецЕсли;
			
			Если Отказ Тогда
				Сообщение.ПутьКДанным = "Объект";
				Сообщение.Поле = "Договор";
				Сообщение.Сообщить();
				Возврат;
			Иначе
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
		
		Если УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройкиЗачетаАвансов() = Перечисления.ДаНет.Да
			И ТекущийОбъект.Предоплата.Количество() = 0 Тогда
			ЗаполнитьПредоплату(ТекущийОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Обработчик механизма "Свойства"
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	// ЭДО
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец ЭДО
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	ТекущийОбъект.ДополнительныеСвойства.Свойство("ВерсияПодчиненногоСчетФактуры", КэшЗначений.ВерсияПодчиненногоСчетФактуры);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	ЗаполненЗаказ = Ложь;
	Для каждого СтрокаТЧ Из Объект.Запасы Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Заказ) Тогда
			Если ТипЗнч(СтрокаТЧ.Заказ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				ЗаполненЗаказ = Истина;
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаполненЗаказ Тогда
		ОповеститьОбИзменении(Тип("ДокументСсылка.ЗаказПоставщику"));
	КонецЕсли;
	
	Оповестить("ОповещениеОбИзмененииДолга");
	
	// РМК
	Если ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("ФормаКлиентскогоПриложения") И Найти(ЭтаФорма.ВладелецФормы.ИмяФормы,
		"ФормаДокумента_РМК") > 0 Тогда
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Ссылка", Объект.Ссылка);
		ПараметрыОповещения.Вставить("Номер", Объект.Номер);
		ПараметрыОповещения.Вставить("Дата", Объект.Дата);
		ПараметрыОповещения.Вставить("ВидОперации", Объект.ВидОперации);
		Оповестить("РМК_Запись_ПриходнаяНакладнаяВозврат", ПараметрыОповещения);
	КонецЕсли;
	// Конец РМК
	
	Если КэшЗначений.МодифицированностьФормы = Истина
		И КэшЗначений.ВерсияПодчиненногоСчетФактуры = "1.6.11" Тогда
		
		ТекстВопроса = НСтр("ru = 'В накладную были внесены изменения.
			|Требуется самостоятельно поправить подчиненный документ счет-фактура'");
		
		ПоказатьПредупреждение(, ТекстВопроса, 0, НСтр("ru ='Счет-фактура'"));
		
	КонецЕсли;
	
	// Прослеживаемость
	Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	КонецЦикла; 
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДанныеДляИзмененияДаты = ДокументыУНФКлиент.ДанныеДляИзмененияДаты(ЭтотОбъект, Объект);
	Если ДанныеДляИзмененияДаты.ДатаНеМенялась Тогда
		Возврат;
	КонецЕсли;
	
	ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты);
	
	ЦеныИВалютаКлиент.ПересчитатьКурсКратностьВалютыРасчетов(ДанныеДляИзмененияДаты.ВалютаКурсКратность, Объект,
		ЭтотОбъект);
		
	УстановитьВидимостьИДоступность();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ОбработатьИзменениеВидаОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключатьРасходыВСебестоимостьПриИзменении(Элемент)
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ДополнительныеРасходы") Тогда
		Элементы.РаспределитьРасходы.Видимость = Истина;
		Элементы.ЗапасыГруппаСуммаУслуг.Видимость = Истина;
	ИначеЕсли Объект.ВключатьРасходыВСебестоимость Тогда
		Элементы.Расходы.ПодчиненныеЭлементы.РасходыЗаказ.Видимость = Ложь;
		Элементы.Расходы.ПодчиненныеЭлементы.РасходыСтруктурнаяЕдиница.Видимость = Ложь;
		Элементы.Расходы.ПодчиненныеЭлементы.РасходыНаправлениеДеятельности.Видимость = Ложь;
		Элементы.РаспределитьРасходы.Видимость = Истина;
		Элементы.ЗапасыГруппаСуммаУслуг.Видимость = Истина;
	Иначе
		Элементы.Расходы.ПодчиненныеЭлементы.РасходыЗаказ.Видимость = Истина;
		Элементы.Расходы.ПодчиненныеЭлементы.РасходыСтруктурнаяЕдиница.Видимость = Истина;
		Элементы.Расходы.ПодчиненныеЭлементы.РасходыНаправлениеДеятельности.Видимость = Истина;
		Элементы.РаспределитьРасходы.Видимость = Ложь;
		Элементы.ЗапасыГруппаСуммаУслуг.Видимость = Ложь;
		
		Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
			СтрокаЗапасы.СуммаРасходов = 0;
		КонецЦикла;
		
		Для каждого СтрокаРасходы Из Объект.Расходы Цикл
			СтрокаРасходы.СтруктурнаяЕдиница = ОсновноеПодразделение;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ВключатьРасходыВСебестоимостьПриИзменении()

&НаКлиенте
Процедура КорректироватьПриИзменении(Элемент)
	
	Объект.ОтражатьВУчете = Корректировать = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	ЗаполнитьПоОснованиюКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение)=Тип("Тип") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.АктОРасхождениях") Тогда
		Возврат;
	КонецЕсли;
	
	ПоследнийДокумент = ПолучитьПоследнийДокументИсправления(ВыбранноеЗначение, Объект.Ссылка);
	
	Если ЗначениеЗаполнено(ПоследнийДокумент)
		И ВыбранноеЗначение <> ПоследнийДокумент Тогда
		СтандартнаяОбработка = Ложь;
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПоследнийДокумент", ПоследнийДокумент);
		ДополнительныеПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
		ТекстВопроса = НСтр("ru = 'Для указанного документа существуют более поздние корректировки.
			|Использовать последнюю введенную корректировку?'");
		Оповещение = Новый ОписаниеОповещения("ВопросИспользоватьПоследнююВведеннуюКорректировкуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуРедактированияМногострочногоТекста(Знач ОповещениеОЗакрытии, 
	Знач МногострочныйТекст, Знач Заголовок = Неопределено) Экспорт
	
	Если Заголовок = Неопределено Тогда
		ПоказатьВводСтроки(ОповещениеОЗакрытии, МногострочныйТекст,,, Истина);
	Иначе
		ПоказатьВводСтроки(ОповещениеОЗакрытии, МногострочныйТекст, Заголовок,, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
		
КонецПроцедуры

&НаКлиенте
Процедура СчетФактураНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ГруппаСчетФактураНомерДата.Видимость Тогда
		
		ОшибкиЗаполнения = Ложь;
		
		Если Не ЗначениеЗаполнено(СчетФактураНомер) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не заполнен номер счет-фактуры.'");
			Сообщение.Поле = "СчетФактураНомер";
			Сообщение.Сообщить();
			ОшибкиЗаполнения = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СчетФактураДата) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не заполнена дата счет-фактуры.'");
			Сообщение.Поле = "СчетФактураДата";
			Сообщение.Сообщить();
			ОшибкиЗаполнения = Истина;
		КонецЕсли;
		
		Если ОшибкиЗаполнения Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СчетаФактурыУНФКлиент.ОткрытьСчетФактуру(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнформацияПоОсвобождениюАвансаЗакрытьНажатие(Элемент)
	
	Элементы.ГруппаИнформацияПоОсвобождениюАванса.Видимость = Ложь;
	ПоказыватьИнформациюПоОсвобождениюАванса = Ложь;
	СохранитьНастройкуПоказыватьИнформациюПоОсвобождениюАванса();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкуПоказыватьИнформациюПоОсвобождениюАванса()

	ИмяКлючаОбъекта = "КорректировкаПоступленияОсвобождатьАванс";
	ХранилищеСистемныхНастроек.Сохранить(ИмяКлючаОбъекта,
		ИмяКлючаОбъекта + "_" + "ПоказыватьИнформациюПоОсвобождениюАванса", ПоказыватьИнформациюПоОсвобождениюАванса);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнформацияПоОсвобождениюАвансаШапкаЗакрытьНажатие(Элемент)
	
	Элементы.ГруппаИнформацияПоОсвобождениюАвансаШапка.Видимость = Ложь;
	ПоказыватьИнформациюПоОсвобождениюАвансаШапка = Ложь;
	СохранитьНастройкуПоказыватьИнформациюПоОсвобождениюАвансаШапка();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкуПоказыватьИнформациюПоОсвобождениюАвансаШапка()

	ИмяКлючаОбъекта = "КорректировкаПоступленияОсвобождатьАванс";
	ХранилищеСистемныхНастроек.Сохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта + "_"
		+ "ПоказыватьИнформациюПоОсвобождениюАвансаШапка", ПоказыватьИнформациюПоОсвобождениюАвансаШапка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасы

&НаКлиенте
Процедура ЗапасыПриИзменении(Элемент)
	
	ОбновитьПодвалФормы(ЭтотОбъект);
	
	УстановитьВидимостьКолонкиДокументаПоступления(Элемент);
	
КонецПроцедуры // ЗапасыПриИзменении()

&НаКлиенте
Процедура ЗапасыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекСтрокаТабличнойЧасти = Объект.Запасы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	// Прослеживаемость
	Если Поле = Элементы.ЗапасыРНПТКорректировка
		И ТекСтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
		ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтаФорма,, Истина);
		СтандартнаяОбработка = Ложь;
	ИначеЕсли Поле = Элементы.ЗапасыРНПТДоКорректировки И ТекСтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда 
		ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПросмотраРНПТИсходногоДокумента(ЭтотОбъект, , Истина);
		СтандартнаяОбработка = Ложь;
	ИначеЕсли Поле = Элементы.ЗапасыРНПТДоИсправления И ТекСтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда 
		ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПросмотраРНПТИсходногоДокумента(ЭтотОбъект);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	Если Поле.Имя = "ЗапасыПрослеживаемыйТовар" Тогда
		ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
		Если ТекущиеДанные.ПрослеживаемыйТовар Тогда
			ПрослеживаемостьФормыКлиентУНФ.ПоказатьПредупреждениеПрослеживаемыйТовар();
		КонецЕсли;
	КонецЕсли;
	
	// Конец Прослеживаемость
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриАктивизацииЯчейки(Элемент)
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Прослеживаемость
	Если ЭтоНоваяСтрокаЗапасы
		И (ТекущиеДанные.ПрослеживаемыйТовар Или Не ТекущиеДанные.ЕстьВДокументеПоступления)
		И Элементы.Запасы.ТекущийЭлемент = Элементы.ЗапасыРНПТКорректировка
		И Не ЗначениеЗаполнено(ТекущиеДанные.РНПТ) Тогда
		ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтаФорма, , Ложь);
	КонецЕсли;
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		ИтогВсего = Объект.Запасы.Итог("Всего") + Объект.Расходы.Итог("Всего") + Элемент.ТекущиеДанные.Всего;
		ИтогСуммаНДС = Объект.Запасы.Итог("СуммаНДС") + Объект.Расходы.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
    КонецЕсли;
	
КонецПроцедуры // ЗапасыПередНачаломДобавления()

&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	
	СтрокаТаблицы = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТаблицы.ЕстьВДокументеПоступления И Объект.ОтражатьВУчете Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Вместо удаления строки исходного документа очистите суммовые и количественные показатели.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Подчиненные табличные части
	Если НЕ Отказ Тогда
		Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
			СтрокаТаблицы = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
			// Прослеживаемость
			УдалитьСвязанныеЗаписи(СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
	
	// Серии номенклатуры
	Если НЕ Отказ И Объект.СерииНоменклатуры.Количество() Тогда
		Для Каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
			СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, ТекущиеДанныеСтроки, Истина);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элементы.Запасы.ТекущиеДанные;
	
	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыСерииНоменклатуры Тогда
		ОткрытьПодборСерииНоменклатуры();
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыСерииНоменклатурыДоКорректировки Тогда
		ОткрытьПодборСерииНоменклатуры(Истина);
		Возврат;
	КонецЕсли;
	
	Если Не НоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы.ЕстьВДокументеПоступления = Ложь;
	
	ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСкладВСтрокеТЧЗапасы(СтрокаТаблицы, Объект, Неопределено);
	
	Если Не Объект.ОтражатьВУчете Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы.КоличествоДоИзменения     = 0;
	СтрокаТаблицы.ЦенаДоИзменения           = 0;
	СтрокаТаблицы.СуммаДоИзменения          = 0;
	СтрокаТаблицы.СуммаНДСДоИзменения       = 0;
	СтрокаТаблицы.ВсегоДоИзменения          = 0;
	СтрокаТаблицы.СтавкаНДСДоИзменения      = ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка");
	СтрокаТаблицы.СодержаниеДоИзменения     = "";
	
	СтрокаТаблицы.КоличествоДоКорректировки = 0;
	СтрокаТаблицы.ЦенаДоКорректировки       = 0;
	СтрокаТаблицы.СуммаДоКорректировки      = 0;
	СтрокаТаблицы.СуммаНДСДоКорректировки   = 0;
	СтрокаТаблицы.ВсегоДоКорректировки      = 0;
	
	Если НоваяСтрока И Копирование Тогда
		СтрокаТаблицы.КлючСвязи = 0;
		СтрокаТаблицы.СерииНоменклатуры = "";
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТаблицы);
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТаблицы, "СерииНоменклатурыДоКорректировки");
	КонецЕсли;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТаблицы.Количество = НовоеКоличествоПриИзмененииНоменклатуры;
	КонецЕсли;
	
	ЭтоНоваяСтрокаЗапасы = НоваяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьПодвалФормы(ЭтотОбъект);
	КонецЕсли;
	
	ЭтоНоваяСтрокаЗапасы = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьСбросКоличества И СбрасыватьКоличество
		И СтрокаТабличнойЧасти.Количество <> НовоеКоличествоПриИзмененииНоменклатуры Тогда
		
		ДопПараметр = Новый Структура();
		ДопПараметр.Вставить("Элемент", Элемент);
		ДопПараметр.Вставить("Количество", СтрокаТабличнойЧасти.Количество);
		Оповещение = Новый ОписаниеОповещения("ЗапасыПодтверждениеСбросаКоличестваЗавершение", ЭтотОбъект, ДопПараметр);
		ОткрытьФорму("ОбщаяФорма.ПодтверждениеСбросаКоличества", , , , , , Оповещение);
		
	Иначе
		
		Если СбрасыватьКоличество Тогда
			НовоеКоличество = НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
		ЗапасыНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество);
		
	КонецЕсли;	
	
КонецПроцедуры // ЗапасыНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗапасыПодтверждениеСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗапрашиватьСбросКоличества = Результат.ЗапрашиватьСбросКоличества;
		Если НЕ ЗапрашиватьСбросКоличества Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		КонецЕсли;
		Если Результат.СбрасыватьКоличество Тогда
			НовоеКоличество = Результат.НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = ДополнительныеПараметры.Количество;
		КонецЕсли;
	Иначе
		НовоеКоличество = ДополнительныеПараметры.Количество;
	КонецЕсли;
	
	ЗапасыНоменклатураПриИзмененииПродолжить(ДополнительныеПараметры.Элемент, НовоеКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество)

	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
	
	Если ЗначениеЗаполнено(Объект.ВидЦенКонтрагента) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
		СтруктураДанные.Вставить("ВидЦенКонтрагента", Объект.ВидЦенКонтрагента);
		СтруктураДанные.Вставить("Коэффициент", 1);
		
	КонецЕсли;
	
	СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанные);
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = Неопределено;
	СтрокаТабличнойЧасти.Количество = НовоеКоличество;
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
	СтрокаТабличнойЧасти.Содержание = "";
	
	ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСкладВСтрокеТЧЗапасы(СтрокаТабличнойЧасти, Объект, СтруктураДанные);
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если СтруктураДанные.ИспользоватьХарактеристики Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
			СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
		КонецЕсли;
	КонецЕсли;
	
	//Партии
	СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
	
	Если СтруктураДанные.ИспользоватьПартии Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Партия = СтруктураВыбораНоменклатуры.Партия;
			СтруктураВыбораНоменклатуры.Партия = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
		КонецЕсли;
	КонецЕсли;
	// Конец Партии
	
	СтрокаТабличнойЧасти.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
	
	// Прослеживаемость
	Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
		СтрокаТабличнойЧасти.ПрослеживаемыйТовар = СтруктураДанные.ПрослеживаемыйТовар;
		СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = СтруктураДанные.ПрослеживаемыйКомплект;
		СтрокаТабличнойЧасти.КодТНВЭД = СтруктураДанные.ТоварнаяНоменклатураВЭД;
	Иначе
		СтрокаТабличнойЧасти.ПрослеживаемыйТовар = Ложь;
		СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = Ложь;
		СтрокаТабличнойЧасти.КодТНВЭД = Неопределено;
	КонецЕсли;
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
	ПодборНоменклатурыИзСписка = Ложь;
	
	ЗаполнитьЗаголовкиСтрок(СтрокаТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "КорректировкаПоступления", НастройкиФормыВыбораНоменклатуры, Истина, "Запасы", ВыбранноеЗначение.СтруктураНастроек);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура",	 СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",	 СтрокаТабличнойЧасти.Характеристика);
		
	Если ЗначениеЗаполнено(Объект.ВидЦенКонтрагента) Тогда
	
		СтруктураДанные.Вставить("ДатаОбработки", 			Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", 		Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", 		Объект.СуммаВключаетНДС);
		
		СтруктураДанные.Вставить("СтавкаНДС", 				СтрокаТабличнойЧасти.СтавкаНДС);
		СтруктураДанные.Вставить("Цена", 					СтрокаТабличнойЧасти.Цена);
		
		СтруктураДанные.Вставить("ВидЦенКонтрагента", Объект.ВидЦенКонтрагента);
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);		
		
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
		
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.Содержание = "";
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
КонецПроцедуры // ЗапасыХарактеристикаПриИзменении()

&НаКлиенте
Процедура ЗапасыПартияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаПриИзменении(Элемент)
	
	Если ДоступенОрдерныйУчет Тогда
		
		ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат
		КонецЕсли;
		
		ТекущиеДанные.ДокументПоступления = Неопределено;
		
		ЗапасыСтруктурнаяЕдиницаПриИзмененииСервер();
		Элементы.ЗапасыДокументПоступления.Видимость = УчетОстатковПоСкладскимОрдерам;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗапасыСтруктурнаяЕдиницаПриИзмененииСервер()
	УчетОстатковПоСкладскимОрдерам = УчетОстатковВРазрезеСкладскихОрдеров();
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыДокументПоступленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Организация", Объект.Организация);
	СтруктураОткрытия.Вставить("ТолькоПоДокументам", Ложь);
	СтруктураОткрытия.Вставить("СтруктурнаяЕдиница", ТекущиеДанные.СтруктурнаяЕдиница);
	СтруктураОткрытия.Вставить("ТолькоПоОрдерам", Истина);
	СтруктураОткрытия.Вставить("КПоступлению", Истина);
	СтруктураОткрытия.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	СтруктураОткрытия.Вставить("Характеристика", ТекущиеДанные.Характеристика);
	СтруктураОткрытия.Вставить("Партия", ТекущиеДанные.Партия);
	СтруктураОткрытия.Вставить("Контрагент", Объект.Контрагент);
	
	ОткрытьФорму("ОбщаяФорма.ПодборПоОстаткамТоваровКПоступлениюРеализации", СтруктураОткрытия, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСерииНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерииНоменклатуры();
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСерииНоменклатурыДоКорректировкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерииНоменклатуры(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерииНоменклатуры(СерииДоКорректировки = Ложь)
		
	ТекущиеДанныеИдентификатор = Элементы.Запасы.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыСерийНоменклатуры = ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор, СерииДоКорректировки);
	ПараметрыСерийНоменклатуры.Вставить("СерииДоКорректировки", СерииДоКорректировки);
	
	ОткрытьФорму("Обработка.ПодборСерийНоменклатуры.Форма", ПараметрыСерийНоменклатуры, ЭтотОбъект);

КонецПроцедуры

&НаСервере
Функция ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор, СерииДоКорректировки = Ложь)
	
	Если СерииДоКорректировки Тогда
		Возврат СерииНоменклатурыУНФ.ПараметрыПодбораСерийНоменклатуры(Объект, ЭтотОбъект.УникальныйИдентификатор, ТекущиеДанныеИдентификатор, Истина, "Запасы", "СерииНоменклатурыДоКорректировки", "КлючСвязи");
	Иначе
		Возврат СерииНоменклатурыУНФ.ПараметрыПодбораСерийНоменклатуры(Объект, ЭтотОбъект.УникальныйИдентификатор, ТекущиеДанныеИдентификатор, Истина, "Запасы", "СерииНоменклатуры", "КлючСвязи");
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗапасыСодержаниеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		ШаблонСодержания = ТекстСодержания(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика);
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ШаблонСодержания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
	
	// Прослеживаемость
	Если Не СтрокаТабличнойЧасти.ПрослеживаемыйКомплект Тогда
		УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры // ЗапасыКоличествоПриИзменении()

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение 
	 ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");
	
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
		
КонецПроцедуры // ЗапасыЕдиницаИзмеренияОбработкаВыбора()

&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");
		
КонецПроцедуры // ЗапасыЦенаПриИзменении()

&НаКлиенте
Процедура ЗапасыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // ЗапасыСуммаПриИзменении()

&НаКлиенте
Процедура ЗапасыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры  // ЗапасыСтавкаНДСПриИзменении()

&НаКлиенте
Процедура ЗапасыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // ЗапасыСуммаНДСПриИзменении()

&НаКлиенте
Процедура ЗапасыСодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.Запасы.ТекущиеДанные;
	СтруктураРеквизита = Новый Структура();
	СтруктураРеквизита.Вставить("Объект", "Объект");
	СтруктураРеквизита.Вставить("ТабЧасть", "Запасы");
	СтруктураРеквизита.Вставить("НомерСтроки", ТекСтрока.НомерСтроки-1);
	СтруктураРеквизита.Вставить("ИмяРеквизита", "Содержание");
	
	ОбщегоНазначенияУНФКлиент.ПоказатьФормуРедактированияРеквизита(Элемент.ТекстРедактирования, ЭтотОбъект, СтруктураРеквизита, Строка(ТекСтрока.Номенклатура)+": содержание");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНомерГТДПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
		
		ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
		Если ДатаГТД > КонецДня(Объект.Дата) Тогда
			
			ТекстСообщения = НСтр("ru ='Внимание: выбранная ГТД датирована более поздней датой, чем текущий документ.'");
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Запасы",
				СтрокаТабличнойЧасти.НомерСтроки, "НомерГТД");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , КонтекстноеПоле);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРНПТКорректировкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтаФорма, , Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРНПТКорректировкаОчистка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		Если СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
			УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
		Иначе
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
		КонецЕсли;
		
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтранаПроисхожденияПриИзменении(Элемент)
	
	Если КэшЗначений.УчетГТД Тогда
	
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения)
			ИЛИ СтрокаТабличнойЧасти.СтранаПроисхождения = КэшЗначений.Россия Тогда
			
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасходы

&НаКлиенте
Процедура РасходыПриИзменении(Элемент)
	
	ОбновитьПодвалФормы(ЭтотОбъект);
	
КонецПроцедуры // РасходыПриИзменении()

&НаКлиенте
Процедура РасходыПередУдалением(Элемент, Отказ)
	
	СтрокаТаблицы = Элементы.Расходы.ТекущиеДанные;
	Если СтрокаТаблицы.ЕстьВДокументеПоступления И Объект.ОтражатьВУчете Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Вместо удаления строки исходного документа очистите суммовые и количественные показатели.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		ИтогВсего = Объект.Запасы.Итог("Всего") + Объект.Расходы.Итог("Всего") + Элемент.ТекущиеДанные.Всего;
		ИтогСуммаНДС = Объект.Запасы.Итог("СуммаНДС") + Объект.Расходы.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
    КонецЕсли;
	
КонецПроцедуры // РасходыПередНачаломДобавления()

&НаКлиенте
Процедура РасходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элементы.Расходы.ТекущиеДанные;
	Если НоваяСтрока Тогда
		СтрокаТаблицы.ЕстьВДокументеПоступления = Ложь;
		Если Объект.ОтражатьВУчете Тогда
			СтрокаТаблицы.КоличествоДоИзменения     = 0;
			СтрокаТаблицы.ЦенаДоИзменения           = 0;
			СтрокаТаблицы.СуммаДоИзменения          = 0;
			СтрокаТаблицы.СуммаНДСДоИзменения       = 0;
			СтрокаТаблицы.ВсегоДоИзменения          = 0;
			СтрокаТаблицы.СтавкаНДСДоИзменения      = ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка");
			СтрокаТаблицы.СодержаниеДоИзменения     = "";
			
			СтрокаТаблицы.КоличествоДоКорректировки = 0;
			СтрокаТаблицы.ЦенаДоКорректировки       = 0;
			СтрокаТаблицы.СуммаДоКорректировки      = 0;
			СтрокаТаблицы.СуммаНДСДоКорректировки   = 0;
			СтрокаТаблицы.ВсегоДоКорректировки      = 0;
		КонецЕсли;
		СтрокаТаблицы.СтруктурнаяЕдиница = ОсновноеПодразделение;
	КонецЕсли;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТаблицы.Количество = НовоеКоличествоПриИзмененииНоменклатуры;
	КонецЕсли;
	
КонецПроцедуры // РасходыПриНачалеРедактирования()

&НаКлиенте
Процедура РасходыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьПодвалФормы(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьСбросКоличества И СбрасыватьКоличество
		И СтрокаТабличнойЧасти.Количество <> НовоеКоличествоПриИзмененииНоменклатуры Тогда
		
		ДопПараметр = Новый Структура();
		ДопПараметр.Вставить("Элемент", Элемент);
		ДопПараметр.Вставить("Количество", СтрокаТабличнойЧасти.Количество);
		Оповещение = Новый ОписаниеОповещения("РасходыПодтверждениеСбросаКоличестваЗавершение", ЭтотОбъект, ДопПараметр);
		ОткрытьФорму("ОбщаяФорма.ПодтверждениеСбросаКоличества", , , , , , Оповещение);
		
	Иначе
		
		Если СбрасыватьКоличество Тогда
			НовоеКоличество = НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
		РасходыНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество);
		
	КонецЕсли;
	
КонецПроцедуры // РасходыНоменклатураПриИзменении()

&НаКлиенте
Процедура РасходыПодтверждениеСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗапрашиватьСбросКоличества = Результат.ЗапрашиватьСбросКоличества;
		Если НЕ ЗапрашиватьСбросКоличества Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		КонецЕсли;
		Если Результат.СбрасыватьКоличество Тогда
			НовоеКоличество = Результат.НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = ДополнительныеПараметры.Количество;
		КонецЕсли;
	Иначе
		НовоеКоличество = ДополнительныеПараметры.Количество;
	КонецЕсли;
	
	РасходыНоменклатураПриИзмененииПродолжить(ДополнительныеПараметры.Элемент, НовоеКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество)

	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", "");
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = НовоеКоличество;
	СтрокаТабличнойЧасти.Цена = 0;
	СтрокаТабличнойЧасти.Сумма = 0;
	СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
	СтрокаТабличнойЧасти.СуммаНДС = 0;
	СтрокаТабличнойЧасти.Всего = 0;
	СтрокаТабличнойЧасти.Содержание = "";
	
	Если СтруктураДанные.ОчиститьЗаказИПодразделение Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Неопределено;
		СтрокаТабличнойЧасти.Заказ = Неопределено;
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиница) Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ОсновноеПодразделение;
	КонецЕсли;
	
	Если СтруктураДанные.ОчиститьНаправлениеДеятельности Тогда
		СтрокаТабличнойЧасти.НаправлениеДеятельности = Неопределено;
	Иначе
		СтрокаТабличнойЧасти.НаправлениеДеятельности = СтруктураДанные.НаправлениеДеятельности;
	КонецЕсли;
	
	ЗаполнитьЗаголовкиСтрок(СтрокаТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура РасходыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "КорректировкаПоступления", НастройкиФормыВыбораНоменклатуры, Истина, "Расходы", ВыбранноеЗначение.СтруктураНастроек);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Расходы");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РасходыСодержаниеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
		ШаблонСодержания = ТекстСодержания(СтрокаТабличнойЧасти.Номенклатура, Неопределено);
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ШаблонСодержания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Расходы");
	
КонецПроцедуры // РасходыКоличествоПриИзменении()

&НаКлиенте
Процедура РасходыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение
	 ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Расходы");
	
КонецПроцедуры // РасходыЕдиницаИзмеренияОбработкаВыбора()

&НаКлиенте
Процедура РасходыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Расходы");
	
КонецПроцедуры // РасходыЦенаПриИзменении()

&НаКлиенте
Процедура РасходыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // РасходыСуммаПриИзменении()

&НаКлиенте
Процедура РасходыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // РасходыСтавкаНДСПриИзменении()

&НаКлиенте
Процедура РасходыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // РасходыСуммаНДСПриИзменении()

&НаКлиенте
Процедура РасходыНаправлениеДеятельностиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеНаправлениеДеятельностиНачалоВыбора(СтрокаТабличнойЧасти.Номенклатура);
	
	Если НЕ СтруктураДанные.ВозможностьУказанияНаправленияДеятельности Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(, НСтр("ru = 'Для данного расхода направление деятельности не указывается!'"));
	КонецЕсли;
	
КонецПроцедуры // РасходыНаправлениеДеятельностиНачалоВыбора()

&НаКлиенте
Процедура РасходыСтруктурнаяЕдиницаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеСтруктурнаяЕдиницаНачалоВыбора(СтрокаТабличнойЧасти.Номенклатура);
	
	Если НЕ СтруктураДанные.ВозможностьУказанияПодразделения Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(, НСтр("ru = 'Для этого расхода подразделение не указывается!'"));
	КонецЕсли;
	
КонецПроцедуры // РасходыСтруктурнаяЕдиницаНачалоВыбора()

&НаКлиенте
Процедура РасходыЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеЗаказНачалоВыбора(СтрокаТабличнойЧасти.Номенклатура);
	
	Если НЕ СтруктураДанные.ВозможностьУказанияЗаказа Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(, НСтр("ru = 'Для этого расхода заказ не указывается!'"));
	КонецЕсли;
	
КонецПроцедуры // РасходыЗаказНачалоВыбора()

&НаКлиенте
Процедура РасходыСодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Расходы.ТекущиеДанные;
	СтруктураРеквизита = Новый Структура;
	СтруктураРеквизита.Вставить("Объект", "Объект");
	СтруктураРеквизита.Вставить("ТабЧасть", "Расходы");
	СтруктураРеквизита.Вставить("НомерСтроки", ТекущаяСтрока.НомерСтроки - 1);
	СтруктураРеквизита.Вставить("ИмяРеквизита", "Содержание");
	ЗаголовокФормыРедактирования = СтрШаблон(НСтр("ru='%1: содержание'"), Строка(ТекущаяСтрока.Номенклатура));
	ОбщегоНазначенияУНФКлиент.ПоказатьФормуРедактированияРеквизита(Элемент.ТекстРедактирования, ЭтотОбъект,
		СтруктураРеквизита, ЗаголовокФормыРедактирования);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредоплата

&НаКлиенте
Процедура ПредоплатаПередУдалением(Элемент, Отказ)
	
	СтрокаТаблицы = Элементы.Предоплата.ТекущиеДанные;
	Если СтрокаТаблицы.ЕстьВДокументеПоступления И Объект.ОтражатьВУчете Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Вместо удаления строки исходного документа очистите сумму.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаДокументПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	ЗаполнитьЗаголовкиСтрок(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаСуммаРасчетовПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
		
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
			?(Объект.Курс = 0,
			1,
			Объект.Курс),
		СтрокаТабличнойЧасти.Курс);
	
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
			?(Объект.Кратность = 0,
			1,
			Объект.Кратность),
		СтрокаТабличнойЧасти.Кратность);
	
	СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
		СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс,
		?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
		СтрокаТабличнойЧасти.Кратность,
		?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность));

КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКурсПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.ПриИзмененииКурсаВСтрокеПредоплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКурсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасчетыРаботаСФормамиКлиент.ПредоплатаКурсНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКратностьПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.ПриИзмененииКурсаВСтрокеПредоплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс);
	
	СтрокаТабличнойЧасти.Кратность = 1;
	
	СтрокаТабличнойЧасти.Курс =
		?(СтрокаТабличнойЧасти.СуммаРасчетов = 0,
			1,
			СтрокаТабличнойЧасти.СуммаПлатежа
		  / СтрокаТабличнойЧасти.СуммаРасчетов
		  * Объект.Курс);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПриИзменении(Элемент)
	
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗапасыПодбор(Команда)
	
	ИмяТабличнойЧасти	= "Запасы";
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти);

КонецПроцедуры // ЗапасыПодбор()

&НаКлиенте
Процедура РасходыПодбор(Команда)
	
	ИмяТабличнойЧасти	= "Расходы";
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти);
	
КонецПроцедуры // ПодборВыполнить()

&НаКлиенте
Процедура РаспределитьРасходыПоКоличеству(Команда)
	
	РаспределитьТабЧастьРасходыПоКоличеству();
		
КонецПроцедуры // РаспределитьРасходыПоКоличеству()

&НаКлиенте
Процедура РаспределитьРасходыПоСумме(Команда)
	
	РаспределитьТабЧастьРасходыПоСумме();
		
КонецПроцедуры // РаспределитьРасходыПоСумме()

&НаКлиенте
Процедура РедактироватьЗачетПредоплаты(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале корректируемый документ.'"));
		Возврат;
	КонецЕсли;
	
	ЕстьЗаказ = ТипЗнч(Объект.ДокументОснование) <> Тип("ДокументСсылка.ДополнительныеРасходы");
	
	МассивЗаказов = Новый Массив;
	Для каждого ТекЭлемент Из Объект.Запасы Цикл
		СтруктураЗаказа = Новый Структура("Заказ, Всего");
		СтруктураЗаказа.Заказ = ?(ТекЭлемент.Заказ = Неопределено, ПредопределенноеЗначение("Документ.ЗаказПоставщику.ПустаяСсылка"), ТекЭлемент.Заказ);
		СтруктураЗаказа.Всего = ТекЭлемент.Всего;
		МассивЗаказов.Добавить(СтруктураЗаказа);
	КонецЦикла;
	Для каждого ТекЭлемент Из Объект.Расходы Цикл
		СтруктураЗаказа = Новый Структура("Заказ, Всего");
		СтруктураЗаказа.Заказ = ТекЭлемент.ЗаказПоставщику;
		СтруктураЗаказа.Всего = ТекЭлемент.Всего;
		МассивЗаказов.Добавить(СтруктураЗаказа);
	КонецЦикла;
	
	АдресПредоплатаВХранилище = ПоместитьПредоплатаВХранилище();
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("АдресПредоплатаВХранилище", АдресПредоплатаВХранилище);
	ПараметрыПодбора.Вставить("Подбор", Истина);
	ПараметрыПодбора.Вставить("ЕстьЗаказ", ЕстьЗаказ);
	ПараметрыПодбора.Вставить("ЗаказВШапке", Ложь);
	ПараметрыПодбора.Вставить("Компания", Компания);
	ПараметрыПодбора.Вставить("Заказ", Неопределено);
	Если КонтрагентВестиРасчетыПоЗаказам Тогда
		ПараметрыПодбора.Заказ = МассивЗаказов;
	КонецЕсли;
	ПараметрыПодбора.Вставить("Дата", Объект.Дата);
	ПараметрыПодбора.Вставить("Ссылка", ИсходныйДокумент);
	ПараметрыПодбора.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыПодбора.Вставить("Договор", Объект.Договор);
	ПараметрыПодбора.Вставить("Курс", Объект.Курс);
	ПараметрыПодбора.Вставить("Кратность", Объект.Кратность);
	ПараметрыПодбора.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("СуммаДокумента", Объект.Запасы.Итог("Всего") + Объект.Расходы.Итог("Всего"));
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораАвансовПоставщикам", ПараметрыПодбора, , , , ,
		Новый ОписаниеОповещения("РедактироватьЗачетПредоплатыЗавершение1", ЭтотОбъект,
		Новый Структура("АдресПредоплатаВХранилище, ПараметрыПодбора", АдресПредоплатаВХранилище, ПараметрыПодбора)));
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыЗавершение1(Результат, ДополнительныеПараметры) Экспорт

	АдресПредоплатаВХранилище = ДополнительныеПараметры.АдресПредоплатаВХранилище;

	КодВозврата = Результат;

	РедактироватьЗачетПредоплатыФрагмент1(АдресПредоплатаВХранилище, КодВозврата);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыФрагмент1(Знач АдресПредоплатаВХранилище, Знач КодВозврата)

	РедактироватьЗачетПредоплатыФрагмент(АдресПредоплатаВХранилище, КодВозврата);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт

	АдресПредоплатаВХранилище = ДополнительныеПараметры.АдресПредоплатаВХранилище;

	КодВозврата = Результат;

	РедактироватьЗачетПредоплатыФрагмент(АдресПредоплатаВХранилище, КодВозврата);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыФрагмент(Знач АдресПредоплатаВХранилище, Знач КодВозврата)

	Если КодВозврата = КодВозвратаДиалога.OK Тогда
		ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)
	
	ЗаполнитьПоОснованиюКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимГТД(Команда)

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыРежимГТД", "Пометка",
		Не Элементы.ЗапасыРежимГТД.Пометка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыРежимГТДКонтекст", "Пометка",
		Не Элементы.ЗапасыРежимГТДКонтекст.Пометка);

	ИзменитьРежимРаботаГТД(Элементы.ЗапасыРежимГТД.Пометка);

КонецПроцедуры

&НаКлиенте
Процедура НомераГТДПодобрать(Команда)
	
	// Обход ошибки платформы 30160575,
	// когда обнуляются значения массива, который хранится в переменной формы.
	//
	// Идея проста: если массив обнулился, вернем его к исходному состоянию из переменной КопияМассива.
	КопияМассива = КэшЗначений.ОбрабатываемыеРеквизиты;
	
	НомераГТДПодобратьНаСервере(Истина);
	
	Если НЕ КопияМассива.Количество() = КэшЗначений.ОбрабатываемыеРеквизиты.Количество() Тогда
		
		КэшЗначений.ОбрабатываемыеРеквизиты = КопияМассива;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", КэшЗначений.НаборСвойств_Документ_КорректировкаПоступления);
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы, , , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСбросаКоличества(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтрокаПоиска", НСтр("ru = 'Сбрасывать количество при изменении номенклатуры'"));
	Оповещение = Новый ОписаниеОповещения("НастройкаСбросаКоличестваЗавершение", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.НастройкиПользователей.Форма.ФормаНастройкиПользователя", СтруктураПараметров, , , , ,
		Оповещение);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, 
		Элементы.ЗапасыКонтекстноеМенюНастройкаСбросаКоличества, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НастройкиКоличества = ПолучитьНастройкиИзмененияКоличества();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиКоличества);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьНовуюСхемуУменьшенияДолга(Команда)
	
	Элементы.ВключитьНовуюСхемуУменьшенияДолга.Видимость = Ложь;
	Элементы.ВключитьСтаруюСхемуУменьшенияДолга.Видимость = Истина;
	Элементы.Предоплата.Видимость = Ложь;
	Объект.ВариантОсвобожденияАванса =
		ПредопределенноеЗначение("Перечисление.ВариантыОсвобожденияАвансаВКорректировках.ОсвобождатьАвансВСтаромДокументе");
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьСтаруюСхемуУменьшенияДолга(Команда)
	
	Элементы.ВключитьНовуюСхемуУменьшенияДолга.Видимость = Истина;
	Элементы.ВключитьСтаруюСхемуУменьшенияДолга.Видимость = Ложь;
	Элементы.Предоплата.Видимость = Истина;
	Элементы.Предоплата.Доступность = Истина;
	Если ЗначениеЗаполнено(Объект.ВариантОсвобожденияАванса) Тогда
		Объект.ВариантОсвобожденияАванса =
			ПредопределенноеЗначение("Перечисление.ВариантыОсвобожденияАвансаВКорректировках.ПустаяСсылка");
		Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаФормы(Команда)
	
	ОткрытьФормуНастройки(Истина);
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элементы.ФормаНастройкаФормы, "Нажатие");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьВидимостьКолонкиДокументаПоступления(Элемент, ПослеУдаления = Ложь)
	
	Если Элемент = Неопределено ИЛИ (ПослеУдаления Или (Не Элемент.ТекущийЭлемент = Неопределено 
		И (Элемент.ТекущийЭлемент.Имя = "ЗапасыНоменклатура" Или Элемент.ТекущийЭлемент.Имя = "ЗапасыСтруктурнаяЕдиница"))) Тогда
			
			ПараметрыПоиска = Новый Структура("УказыватьДокументПоступления", Истина);
			
			НайденныеСтроки = Объект.Запасы.НайтиСтроки(ПараметрыПоиска);
			Элементы.ЗапасыДокументПоступления.Видимость = НайденныеСтроки.Количество();
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов()
	ДополнительныеСвойства = Новый Структура("ИзменениеКлючевыхРеквизитов", Истина);
	СерииНоменклатурыУНФ.ЗаполнитьПризнакиИспользованияСерий(Объект, ДополнительныеСвойства);
КонецПроцедуры

&НаСервере
Функция ПолучитьСерииНоменклатурыИзХранилища(АдресВоВременномХранилище, КлючСтроки, ПараметрыИменаПолей)
	
	Модифицированность = Истина;
	Возврат СерииНоменклатурыУНФ.ПолучитьСерииНоменклатурыИзХранилища(Объект, АдресВоВременномХранилище, КлючСтроки,
		ПараметрыИменаПолей);
	
КонецФункции

&НаСервере
Процедура ОпределитьВидимостьНастроекУчетаВНалогообложении()
	
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда
		Элементы.ЗапасыТоварыНеДляПродажи.Видимость = Ложь;
		
		Возврат;
	Иначе
		Элементы.ЗапасыТоварыНеДляПродажи.Видимость = Истина;
	КонецЕсли;
	
	СистемаНалогообложенияСтруктура = РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(Объект.Организация, Объект.Дата);
	
	Если Не СистемаНалогообложенияСтруктура.ПлательщикУСН Тогда
		Элементы.ЗапасыТоварыНеДляПродажи.Видимость = Ложь;
	Иначе
		Элементы.ЗапасыТоварыНеДляПродажи.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРежимРаботаГТД()
	
	НеизменяемыеРеквизиты = Новый Массив;
	НеизменяемыеРеквизиты.Добавить("ЗапасыПометка");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНомерСтроки");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНоменклатура");
	НеизменяемыеРеквизиты.Добавить("ЗапасыХарактеристика");
	НеизменяемыеРеквизиты.Добавить("ЗапасыПартия");
	НеизменяемыеРеквизиты.Добавить("ЗапасыГруппаЗаголовкиСтрок");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНадписьДоКорректировки");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНадписьДоИзменения");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНадписьПослеИзменения");
	НеизменяемыеРеквизиты.Добавить("ЗапасыГруппаКоличество");
	НеизменяемыеРеквизиты.Добавить("ЗапасыКоличествоДоКорректировки");
	НеизменяемыеРеквизиты.Добавить("ЗапасыКоличествоДоИзменения");
	НеизменяемыеРеквизиты.Добавить("ЗапасыКоличество");
	НеизменяемыеРеквизиты.Добавить("ЗапасыЕдиницаИзмерения");
	НеизменяемыеРеквизиты.Добавить("ЗапасыСтранаПроисхождения");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНомерГТД");
	
	Для каждого ЭлементФормы Из Элементы.Запасы.ПодчиненныеЭлементы Цикл
		
		Если НеизменяемыеРеквизиты.Найти(ЭлементФормы.Имя) = Неопределено
			И ЭлементФормы.Видимость = Истина Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементФормы.Имя, "Видимость", Ложь);
			КэшЗначений.ОбрабатываемыеРеквизиты.Добавить(ЭлементФормы.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЕдиницаИзмерения", "Доступность", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьРежимРаботаГТД()
	
	Для каждого ИмяЭлементаФормы Из КэшЗначений.ОбрабатываемыеРеквизиты Цикл
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлементаФормы, "Видимость", Истина);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЕдиницаИзмерения", "Доступность", Истина);
	
	КэшЗначений.ОбрабатываемыеРеквизиты = Новый Массив;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимРаботаГТД(ВключитьРежимГТД)
	
	Если НЕ КэшЗначений.Свойство("ОбрабатываемыеРеквизиты") Тогда
		
		КэшЗначений.Вставить("ОбрабатываемыеРеквизиты", Новый Массив);
		
	КонецЕсли;
	
	Если ВключитьРежимГТД Тогда
		
		ВключитьРежимРаботаГТД();
		
	Иначе
		
		ВыключитьРежимРаботаГТД();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументу(ДокОснование)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(ДокОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Элементы.ЗапасыГруппаСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыГруппаСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыГруппаВсего.Видимость = Истина;
		
		Элементы.РасходыГруппаСтавкаНДС.Видимость = Истина;
		Элементы.РасходыГруппаСуммаНДС.Видимость = Истина;
		Элементы.РасходыГруппаВсего.Видимость = Истина;
		
	Иначе
		
		Элементы.ЗапасыГруппаСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыГруппаСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыГруппаВсего.Видимость = Ложь;
		
		Элементы.РасходыГруппаСтавкаНДС.Видимость = Ложь;
		Элементы.РасходыГруппаСуммаНДС.Видимость = Ложь;
		Элементы.РасходыГруппаВсего.Видимость = Ложь;
		
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры // ЗаполнитьПоДокументу()

&НаКлиенте
Процедура ЗаполнитьПоОснованиюКлиент()
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Если Объект.Запасы.Количество() > 0 ИЛИ Объект.Запасы.Количество() > 0 Тогда 
			ТекстВопроса = НСтр("ru = 'Документ будет полностью заполнен по ""Основанию""! Продолжить выполнение операции?'");
			Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, НСтр("ru = 'Заполнить документ'"));
		Иначе
			ЗаполнитьПоОснованиюСервер();
		КонецЕсли;
	Иначе
		ЗаполнитьПоОснованиюСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьПоОснованиюСервер();
		
	Иначе
		
		Объект.ДокументОснование = ДокументОснование;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованиюСервер()
	
	Объект.ДокументПоступления = Неопределено;

	ЗаполнитьПоДокументу(Объект.ДокументОснование);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	УстановитьВидимостьИДоступность();
	ОбновитьПодвалФормы(ЭтотОбъект);
	
	ДокументОснование = Объект.ДокументОснование;
	ИсходныйДокумент = ПолучитьИсправляемыйДокументПоступления(Объект.ДокументОснование, Истина);
	
	ПоставщикРезидентТаможенногоСоюза = Ложь;
	Если Не ИсходныйДокумент = Неопределено Тогда
		ПоставщикРезидентТаможенногоСоюза = Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(ИсходныйДокумент.Контрагент);
	КонецЕсли;
	
	Если ПоставщикРезидентТаможенногоСоюза И КэшЗначений.Свойство("УчетГТД")
		И КэшЗначений.УчетГТД Тогда
		Элементы.ЗапасыГруппаРНПТ.Видимость = Ложь;
		Элементы.ЗапасыНомерГТД.Видимость = Истина;
	Иначе

		ИменаТЧИПолей = ГрузовыеТаможенныеДекларацииСервер.ИменаТЧИПолейДляТаблицыЗапасы_БазовыеПоляСПрослеживаемостью();
		ИменаТЧИПолей[0].Вставить("ИмяПоляОформления", "ЗапасыРНПТКорректировка");
		ИменаТЧИПолей[0].Вставить("ДополнительноеПолеПроверки", "ЕстьВДокументеПоступления");
		
		ГрузовыеТаможенныеДекларацииСервер.ПриСозданииНаСервереДляДокументаСПрослеживаемостью(ЭтаФорма, ИменаТЧИПолей, КэшЗначений);
		
		// Прослеживаемость
		ОбновитьОтображениеПрослеживаемости(); 
		// Конец Прослеживаемость

	КонецЕсли;
	
	КонтрагентВестиРасчетыПоЗаказам = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ВестиРасчетыПоЗаказам");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	Для Каждого СтрокаТаблицы Из Объект.Запасы Цикл
		ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы);
	КонецЦикла;

	Для Каждого СтрокаТаблицы Из Объект.Расходы Цикл
		ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Объект.Предоплата Цикл
		ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы);
	КонецЦикла;
	
	// Прослеживаемость
	Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
		ПрослеживаемостьФормыУНФ.ЗаполнитьРНПТИсходныеДанные(ЭтотОбъект);
	КонецЕсли;
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы)
	
	СтрокаТаблицы.НадписьДоКорректировки =  НСтр("ru = 'до корректировки:'");
	СтрокаТаблицы.НадписьДоИзменения     =  НСтр("ru = 'до изменения:'");
	СтрокаТаблицы.НадписьПослеИзменения  =  НСтр("ru = 'после изменения:'");
	
КонецПроцедуры

// Процедура заполняет колонку "Сумма расчетов", т.ч. Запасы.
//
&НаСервере
Процедура РаспределитьТабЧастьРасходыПоКоличеству()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.РаспределитьТабЧастьРасходыПоКоличеству();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры // РаспределитьТабЧастьРасходыПоКоличеству()

// Процедура заполняет колонку "Сумма расчетов", т.ч. Запасы.
//
&НаСервере
Процедура РаспределитьТабЧастьРасходыПоСумме()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.РаспределитьТабЧастьРасходыПоСумме();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
КонецПроцедуры // РаспределитьТабЧастьРасходыПоСумме()

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты)
	
	ДокументыУНФ.ДатаПриИзменении(ДанныеДляИзмененияДаты, ЭтотОбъект, Объект);
	
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
	// Прослеживаемость
	КэшЗначений.Вставить("ВестиУчетПрослеживаемыхТоваров", ПрослеживаемостьУНФ.ВедетсяУчетПрослеживаемыхТоваров(
		Объект.Дата));
	ОбновитьПризнакПрослеживаемости();
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ДокументыУНФ.ОрганизацияПриИзменении(ЭтотОбъект, Объект);
	
	Объект.Договор = Справочники.ДоговорыКонтрагентов.ПоДокументуКонтрагентуОрганизацииИВидуОперации(
		Объект.Ссылка, Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
	
	ОпределитьВидимостьНастроекУчетаВНалогообложении();
	ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов();
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
	СтруктураДанные.Вставить("ТоварнаяНоменклатураВЭД", СтруктураДанные.Номенклатура.ТоварнаяНоменклатураВЭД);
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС") 
		И НЕ СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли;
	
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.ВидСтавкиНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки), СтруктураДанные.ДатаОбработки, ТекущаяДатаСеанса())));
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки), СтруктураДанные.ДатаОбработки, ТекущаяДатаСеанса())));
	КонецЕсли;
	
	// Характеристики
	СтруктураДанные.Вставить("ИспользоватьХарактеристики",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",Ложь);
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьХарактеристики
		Тогда
		ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура);
		
		Если Не ЗначенияПоУмолчанию = Неопределено
			Тогда
			ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
		КонецЕсли;
		
		Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика",ХарактеристикаПоУмолчанию);
		Иначе
			СтруктураДанные.Характеристика = ?(ЗначениеЗаполнено(СтруктураДанные.Характеристика), СтруктураДанные.Характеристика, ХарактеристикаПоУмолчанию);
		КонецЕсли;
		
		СтруктураДанные.Вставить("ИспользоватьХарактеристики",Истина);
		СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",СтруктураДанные.Номенклатура.ПроверятьЗаполнениеХарактеристики);
	КонецЕсли; 
	// Конец Характеристики
	
	Если СтруктураДанные.Свойство("ВидЦенКонтрагента") Тогда
		
		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦенКонтрагента(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("ОчиститьЗаказИПодразделение", Ложь);
	СтруктураДанные.Вставить("ОчиститьНаправлениеДеятельности", Ложь);
	СтруктураДанные.Вставить("НаправлениеДеятельности", СтруктураДанные.Номенклатура.НаправлениеДеятельности);
	
	Если СтруктураДанные.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Расходы
		И СтруктураДанные.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Доходы
		И СтруктураДанные.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.НезавершенноеПроизводство
		И СтруктураДанные.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.КосвенныеЗатраты Тогда
		СтруктураДанные.ОчиститьЗаказИПодразделение = Истина;
	КонецЕсли;
	
	Если СтруктураДанные.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Расходы
		И СтруктураДанные.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.СебестоимостьПродаж
		И СтруктураДанные.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Доходы Тогда
		СтруктураДанные.ОчиститьНаправлениеДеятельности = Истина;
	КонецЕсли;
	
	//Партии
	
	Если НЕ СтруктураДанные.Свойство("Партия") Тогда
		СтруктураДанные.Вставить("Партия", Неопределено);
	КонецЕсли;
	
	СтруктураДанные.Вставить("ИспользоватьПартии",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеПартий",Ложь);
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьПартии
		Тогда
		
		Если Не СтруктураДанные.Свойство("ВидОперации")
			Тогда
			ВидОперации = Неопределено
		Иначе
			ВидОперации = СтруктураДанные.ВидОперации
		КонецЕсли;
		
		СтатусПартии = НоменклатураВДокументахСервер.СоответствиеВидаОперацииИлиХозОперацииСтатусуПартии(, ВидОперации);
		ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтатусПартии);
		
		ПартияПоУмолчанию = Справочники.ПартииНоменклатуры.ПустаяСсылка();
		
		Если Не ЗначенияПартииПоУмолчанию = Неопределено
			Тогда
			ПартияПоУмолчанию = ЗначенияПартииПоУмолчанию;
		КонецЕсли;
		
		СтруктураДанные.Партия = ?(ЗначениеЗаполнено(СтруктураДанные.Партия), СтруктураДанные.Партия, ПартияПоУмолчанию);
		
		СтруктураДанные.ПроверятьЗаполнениеПартий = СтруктураДанные.Номенклатура.ПроверятьЗаполнениеПартий;
		СтруктураДанные.ИспользоватьПартии = Истина;
		
	КонецЕсли;
	// Конец Партии
	
	// Прослеживаемость
	СтруктураДанные.Вставить("ПрослеживаемыйТовар", СтруктураДанные.Номенклатура.ПрослеживаемыйТовар 
		И СтруктураДанные.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас);
	СтруктураДанные.Вставить("ПрослеживаемыйКомплект", СтруктураДанные.Номенклатура.ПрослеживаемыйКомплект
		И СтруктураДанные.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас);
	// Конец Прослеживаемость
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьСерииНоменклатуры Тогда
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", СерииНоменклатурыУНФ.СтатусСерийНоменклатурыПриИзменении(СтруктураДанные));
	Иначе
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", 0);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	Если СтруктураДанные.Свойство("ВидЦенКонтрагента") Тогда
		
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
		Иначе
			СтруктураДанные.Вставить("Коэффициент", 1);
		КонецЕсли;		
		
		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦенКонтрагента(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
				
	КонецЕсли;	
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура;
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеНаправлениеДеятельностиНачалоВыбора(Номенклатура)
	
	СтруктураДанные = Новый Структура;
	
	ВозможностьУказанияНаправленияДеятельности = Истина;
	
	Если Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Расходы
	   И Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.СебестоимостьПродаж
	   И Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Доходы Тогда
		ВозможностьУказанияНаправленияДеятельности = Ложь;
	КонецЕсли;
	
	СтруктураДанные.Вставить("ВозможностьУказанияНаправленияДеятельности", ВозможностьУказанияНаправленияДеятельности);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНаправлениеДеятельностиНачалоВыбора()

&НаСервереБезКонтекста
Функция ПолучитьДанныеСтруктурнаяЕдиницаНачалоВыбора(Номенклатура)
	
	СтруктураДанные = Новый Структура;
	
	ВозможностьУказанияПодразделения = Истина;
	
	Если Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Расходы
	   И Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Доходы
	   И Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.НезавершенноеПроизводство
	   И Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.КосвенныеЗатраты Тогда
		ВозможностьУказанияПодразделения = Ложь;
	КонецЕсли;
	
	СтруктураДанные.Вставить("ВозможностьУказанияПодразделения", ВозможностьУказанияПодразделения);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеСтруктурнаяЕдиницаНачалоВыбора()

&НаСервереБезКонтекста
Функция ПолучитьДанныеЗаказНачалоВыбора(Номенклатура)
	
	СтруктураДанные = Новый Структура;
	
	ВозможностьУказанияЗаказа = Истина;
	
	Если Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Расходы
	   И Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Доходы
	   И Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.НезавершенноеПроизводство
	   И Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.КосвенныеЗатраты Тогда
		ВозможностьУказанияЗаказа = Ложь;
	КонецЕсли;
	
	СтруктураДанные.Вставить("ВозможностьУказанияЗаказа", ВозможностьУказанияЗаказа);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеСтруктурнаяЕдиницаНачалоВыбора()

&НаСервере
Процедура ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС()
	
	НалогообложениеПередИзменением = Объект.НалогообложениеНДС;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратСОтветХранения Тогда
		
		Объект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Объект.Организация,, Объект.Дата);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.НалогообложениеНДС) Тогда
		
		Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		
	КонецЕсли;
	
	Если НЕ НалогообложениеПередИзменением = Объект.НалогообложениеНДС Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Элементы.ЗапасыГруппаСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыГруппаСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыГруппаВсего.Видимость = Истина;
					
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
			КонецЕсли;	
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;
		
		Элементы.РасходыГруппаСтавкаНДС.Видимость = Истина;
		Элементы.РасходыГруппаСуммаНДС.Видимость = Истина;
		Элементы.РасходыГруппаВсего.Видимость = Истина;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Расходы Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
			КонецЕсли;	
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;
		
	Иначе
		
		Элементы.ЗапасыГруппаСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыГруппаСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыГруппаВсего.Видимость = Ложь;
			
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда	
		    СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
		КонецЕсли;	
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;
		
		Элементы.РасходыГруппаСтавкаНДС.Видимость = Ложь;
		Элементы.РасходыГруппаСуммаНДС.Видимость = Ложь;
		Элементы.РасходыГруппаВсего.Видимость = Ложь;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Расходы Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;
		
	КонецЕсли;	
	
	// Обновим подвал формы.
	ИтогВсего = Объект.Запасы.Итог("Всего") + Объект.Расходы.Итог("Всего");
	ИтогСуммаНДС = Объект.Запасы.Итог("СуммаНДС") + Объект.Расходы.Итог("СуммаНДС");
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()	

&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // РассчитатьСуммуНДС()

&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТабличнойЧасти, СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПодвалФормы(Форма)
	
	Объект = Форма.Объект;
	
	Форма.ИтогВсего = Объект.Запасы.Итог("Всего") + Объект.Расходы.Итог("Всего");
	Форма.ИтогСуммаНДС = Объект.Запасы.Итог("СуммаНДС") + Объект.Расходы.Итог("СуммаНДС");
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеВидаОперации()
	
	КорректировкаКорректировочногоСчетаФактуры = Ложь;
	
	ПараметрыИсправления = Документы.КорректировкаПоступления.СформироватьПараметрыИсправленияКорректировочногоДокумента(
		Объект.ВидОперации, Объект.Дата, Объект.ДокументОснование);
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыИсправления); 
		
	Если ТипЗнч(ПолучитьИсправляемыйДокументПоступления(Объект.ДокументОснование, Ложь)) = Тип("ДокументСсылка.КорректировкаПоступления") 
		И Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		КорректировкаКорректировочногоСчетаФактуры = Истина;
	КонецЕсли;	
				
	Если Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Если КорректировкаКорректировочногоСчетаФактуры Тогда
			Объект.ИсправляемыйДокументПоступления = ПолучитьИсправляемыйДокументПоступления(Объект.ДокументОснование, Ложь);
		Иначе
			Объект.ИсправляемыйДокументПоступления = ПолучитьИсправляемыйДокументПоступления(Объект.ДокументОснование, Истина);
		КонецЕсли;
		ИсправлениеКорректировки = Ложь;
	Иначе
		Объект.ИсправляемыйДокументПоступления = ПолучитьИсправляемыйДокументПоступления(Объект.ДокументОснование, Ложь);
		ИсправлениеКорректировки = ТипЗнч(Объект.ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления");
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Для Каждого СтрокаТаблицы Из Объект.Запасы Цикл
			Если СтрокаТаблицы.ЕстьВДокументеПоступления И СтрокаТаблицы.СтавкаНДС <> СтрокаТаблицы.СтавкаНДСДоИзменения Тогда
				СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСДоИзменения;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТаблицы Из Объект.Расходы Цикл
			Если СтрокаТаблицы.ЕстьВДокументеПоступления И СтрокаТаблицы.СтавкаНДС <> СтрокаТаблицы.СтавкаНДСДоИзменения Тогда
				СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСДоИзменения;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ИсходныйДокумент = ПолучитьИсправляемыйДокументПоступления(Объект.ДокументОснование, Истина);
	
	ПоставщикРезидентТаможенногоСоюза = Ложь;
	Если Не ИсходныйДокумент = Неопределено Тогда
		ПоставщикРезидентТаможенногоСоюза = Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(ИсходныйДокумент.Контрагент);
	КонецЕсли;
	
	КонтрагентВестиРасчетыПоЗаказам = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ВестиРасчетыПоЗаказам");
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИсправляемыйДокументПоступления(ВыбранноеЗначение, Исходный)
	
	Возврат Документы.КорректировкаПоступления.ПолучитьИсправляемыйДокументПоступления(ВыбранноеЗначение, Исходный);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПоследнийДокументИсправления(ВыбранноеЗначение, СсылкаНаТекущийДокумент)
	
	ДокументСсылка 		= ПолучитьИсправляемыйДокументПоступления(ВыбранноеЗначение, Ложь);
	
	ПоследнийДокумент 	= Документы.КорректировкаПоступления.ПолучитьПоследнийКорректирующийДокумент(
		ДокументСсылка, СсылкаНаТекущийДокумент);
		
	Возврат ПоследнийДокумент;
			
КонецФункции

&НаКлиенте
Процедура ВопросИспользоватьПоследнююВведеннуюКорректировкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ДокументОснование = ДополнительныеПараметры.ПоследнийДокумент;
	Иначе
		Объект.ДокументОснование = ДополнительныеПараметры.ВыбранноеЗначение;
	КонецЕсли;
	
	ЗаполнитьПоОснованиюСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросИспользоватьПоследнююКорректировкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УстановитьДокументПоступления(ПоследнийДокументИсправления);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДокументПоступления(НовыйДокументПоступления)
	
	Объект.ДокументОснование = НовыйДокументПоступления;
	ЗаполнитьПоОснованиюСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Если КэшЗначений = Неопределено Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	
	Если Объект.Контрагент.Пустая() Тогда
		КэшЗначений.Вставить("РеализацияВЕАЭС", Ложь);
	Иначе
		КэшЗначений.Вставить("РеализацияВЕАЭС", Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Объект.Контрагент));
	КонецЕсли;
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ДокументОснование = Объект.ДокументОснование;
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	Контрагент = Объект.Контрагент;
	Договор = Объект.Договор;
	Заказ = Объект.Заказ;
	ВалютаРасчетов = Объект.Договор.ВалютаРасчетов;
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	НациональнаяВалютаКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НациональнаяВалюта, ДатаДокумента);
	КурсНациональнаяВалюта = НациональнаяВалютаКурсКратность.Курс;
	КратностьНациональнаяВалюта = НациональнаяВалютаКурсКратность.Кратность;
	КонтрагентВестиРасчетыПоЗаказам = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ВестиРасчетыПоЗаказам");
	
	ИсходныйДокумент = ПолучитьИсправляемыйДокументПоступления(Объект.ДокументОснование, Истина);
	
	ПоставщикРезидентТаможенногоСоюза = Ложь;
	Если Не ИсходныйДокумент = Неопределено Тогда
		ПоставщикРезидентТаможенногоСоюза = Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(ИсходныйДокумент.Контрагент);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если НЕ ЗначениеЗаполнено(Параметры.Основание) И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
		КонецЕсли;
	КонецЕсли;
	
	ИсправлениеКорректировки = 
		Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки
		И ТипЗнч(Объект.ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления");
	
	Корректировать = ?(Объект.ОтражатьВУчете, 0, 1);
	//
	
	ПодготовитьФормуНаСервереФрагментВременнаяПодсказка();
	
	// Выбор схемы по освобождению аванса
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Объект.ВариантОсвобожденияАванса =
			ПредопределенноеЗначение("Перечисление.ВариантыОсвобожденияАвансаВКорректировках.ОсвобождатьАванс");
	КонецЕсли;
	
	УстановитьВидимостьИДоступность();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	// Обновим подвал формы.
	ИтогВсего = Объект.Запасы.Итог("Всего") + Объект.Расходы.Итог("Всего");
	ИтогСуммаНДС = Объект.Запасы.Итог("СуммаНДС") + Объект.Расходы.Итог("СуммаНДС");
	
	// Сформируем надпись цены и валюты.
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойСклад");
	ОсновнойСклад = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
	
	ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновноеПодразделение");
	ОсновноеПодразделение = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервереФрагментВременнаяПодсказка()
	
	Перем ЗначениеНастройки, ИмяКлючаОбъекта;
	
	ИмяКлючаОбъекта = "КорректировкаПоступленияОсвобождатьАванс";
	
	ЗначениеНастройки = ХранилищеСистемныхНастроек.Загрузить(ИмяКлючаОбъекта,
		ИмяКлючаОбъекта + "_" + "ПоказыватьИнформациюПоОсвобождениюАванса");
	
	Если ЗначениеНастройки = Неопределено Тогда
		ПоказыватьИнформациюПоОсвобождениюАванса = Истина;
	Иначе
		ПоказыватьИнформациюПоОсвобождениюАванса = ЗначениеНастройки;
	КонецЕсли;
	
	ЗначениеНастройки = ХранилищеСистемныхНастроек.Загрузить(ИмяКлючаОбъекта,
		ИмяКлючаОбъекта + "_" + "ПоказыватьИнформациюПоОсвобождениюАвансаШапка");
	
	Если ЗначениеНастройки = Неопределено Тогда
		ПоказыватьИнформациюПоОсвобождениюАвансаШапка = Истина;
	Иначе
		ПоказыватьИнформациюПоОсвобождениюАвансаШапка = ЗначениеНастройки;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступность()
	
	Элементы.ГруппаНомерДата.Видимость = НЕ ЗначениеЗаполнено(Объект.ВидОперации) 
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение");
	Элементы.ИсправлениеНомерДата.Видимость = 
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки");
	Элементы.ГруппаНомерДатаЗаписиВИБ.Видимость = 
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки");
	
	Если Не ЗначениеЗаполнено(Объект.ДокументОснование) 
		ИЛИ Объект.ДокументОснование = Объект.ИсправляемыйДокументПоступления Тогда
		Элементы.ГруппаИсправляемыйДокументПоступления.ТекущаяСтраница = Элементы.ГруппаТотЖеИсправляемыйДокумент;
	Иначе
		Элементы.ГруппаИсправляемыйДокументПоступления.ТекущаяСтраница = Элементы.ГруппаДругойИсправляемыйДокумент;
	КонецЕсли; 
	
	УсловноеОформление.Элементы.Очистить();
	
	// Реквизиты ТЧ Запасы, используемые только при исправления корректировки
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыКоличествоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыЦенаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыСуммаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыСуммаНДСДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыВсегоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыСуммаРасходовДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыНадписьДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыРНПТДоКорректировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ИсправлениеКорректировки", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	// Реквизиты ТЧ Расходы, используемые только при исправления корректировки
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасходыКоличествоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасходыЦенаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасходыСуммаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасходыСуммаНДСДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасходыВсегоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасходыНадписьДоКорректировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ИсправлениеКорректировки", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Реквизиты ЗапасыСтавкаНДСДоИзменения, РасходыСтавкаНДСДоИзменения
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыСтавкаНДСДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасходыСтавкаНДСДоИзменения");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Запасы
	
	// При отражении в учете недоступны для редактирования
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыКоличествоДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыЦенаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыСуммаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыСтавкаНДСДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыСуммаНДСДоИзменения");
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыКоличествоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыЦенаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыСуммаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыСуммаНДСДоКорректировки");
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыСуммаРасходовДоИзменения");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОтражатьВУчете", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	// Определяются из документа-основания
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыНоменклатура");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыХарактеристика");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыПартия");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыЕдиницаИзмерения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыЗаказ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыСтранаПроисхождения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыНомерГТД");
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Запасы.ЕстьВДокументеПоступления", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОтражатьВУчете", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// ЗапасыСтавкаНДС
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыСтавкаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Запасы.ЕстьВДокументеПоступления", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОтражатьВУчете", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	// Расходы
	
	// При отражении в учете недоступны для редактирования
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасходыСодержаниеДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасходыКоличествоДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасходыЦенаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасходыСуммаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасходыСтавкаНДСДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасходыСуммаНДСДоИзменения");
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасходыКоличествоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасходыЦенаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасходыСуммаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасходыСуммаНДСДоКорректировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОтражатьВУчете", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	// Прослеживаемость
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыРНПТДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыРНПТДоИсправления");
	
	ГруппаИли = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(ЭлементУО.Отбор, "ГруппаИЛИ");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИли, //ЭлементУО.Отбор,
		"Объект.Запасы.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИли,
		"Объект.Запасы.ЕстьВДокументеПоступления", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИли,
		"ПоставщикРезидентТаможенногоСоюза", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Определяются по данным документа - основания
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасходыНоменклатура");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасходыЕдиницаИзмерения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасходыЗаказПоставщику");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасходыПроект");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасходыЗаказ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасходыСтруктурнаяЕдиница");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасходыНаправлениеДеятельности");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Расходы.ЕстьВДокументеПоступления", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОтражатьВУчете", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// РасходыСтавкаНДС
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасходыСтавкаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Расходы.ЕстьВДокументеПоступления", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОтражатьВУчете", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ДополнительныеРасходы") Тогда
		Элементы.ВключатьРасходыВСебестоимость.Доступность = Ложь;
	Иначе
		Элементы.ВключатьРасходыВСебестоимость.Доступность = Истина;
	КонецЕсли;
	
	Если Объект.ВключатьРасходыВСебестоимость Тогда
		Элементы.Расходы.ПодчиненныеЭлементы.РасходыЗаказ.Видимость = Ложь;
		Элементы.Расходы.ПодчиненныеЭлементы.РасходыСтруктурнаяЕдиница.Видимость = Ложь;
		Элементы.Расходы.ПодчиненныеЭлементы.РасходыНаправлениеДеятельности.Видимость = Ложь;
		Элементы.РаспределитьРасходы.Видимость = Истина;
		Элементы.ЗапасыГруппаСуммаУслуг.Видимость = Истина;
	Иначе
		Элементы.Расходы.ПодчиненныеЭлементы.РасходыЗаказ.Видимость = Истина;
		Элементы.Расходы.ПодчиненныеЭлементы.РасходыСтруктурнаяЕдиница.Видимость = Истина;
		Элементы.Расходы.ПодчиненныеЭлементы.РасходыНаправлениеДеятельности.Видимость = Истина;
		Элементы.РаспределитьРасходы.Видимость = Ложь;
		Элементы.ЗапасыГруппаСуммаУслуг.Видимость = Ложь;
	КонецЕсли;
	
	// Предоплата
	
	// Реквизиты ТЧ Запасы, используемые только при исправления корректировки
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПредоплатаСуммаРасчетовДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПредоплатаСуммаПлатежаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПредоплатаНадписьДоКорректировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ИсправлениеКорректировки", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// При отражении в учете недоступны для редактирования
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПредоплатаСуммаРасчетовДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПредоплатаСуммаПлатежаДоИзменения");
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПредоплатаСуммаРасчетовДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПредоплатаСуммаПлатежаДоКорректировки");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОтражатьВУчете", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	// Определяются из документа-основания
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПредоплатаДокумент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПредоплатаЗаказ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПредоплатаКурс");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПредоплатаКратность");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Предоплата.ЕстьВДокументеПоступления", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОтражатьВУчете", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Зачет предоплаты.
	Если Объект.ОтражатьВУчете Тогда
		Элементы.Предоплата.Видимость = Истина;
	Иначе
		Элементы.Предоплата.Видимость = Ложь;
	КонецЕсли;
	
	// Аналитика расходов.
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ДополнительныеРасходы") Тогда
		Элементы.Расходы.ПодчиненныеЭлементы.РасходыГруппаСведения.Видимость = Ложь;
		Элементы.Расходы.ПодчиненныеЭлементы.РасходыЗаказПоставщику.Видимость = Ложь;
		Элементы.Расходы.ПодчиненныеЭлементы.РасходыЗаказ.Видимость = Ложь;
		Элементы.Расходы.ПодчиненныеЭлементы.РасходыСтруктурнаяЕдиница.Видимость = Ложь;
		Элементы.Расходы.ПодчиненныеЭлементы.РасходыНаправлениеДеятельности.Видимость = Ложь;
	ИначеЕсли Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница
		ИЛИ Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет Тогда
		Элементы.Расходы.ПодчиненныеЭлементы.РасходыЗаказ.Видимость = Ложь;
	Иначе
		Элементы.Расходы.ПодчиненныеЭлементы.РасходыЗаказ.Видимость = Истина;
	КонецЕсли;
	
	// Ставка НДС, Сумма НДС, Всего.
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		Элементы.ЗапасыГруппаСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыГруппаСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыГруппаВсего.Видимость = Истина;
		Элементы.РасходыГруппаСтавкаНДС.Видимость = Истина;
		Элементы.РасходыГруппаСуммаНДС.Видимость = Истина;
		Элементы.РасходыГруппаВсего.Видимость = Истина;
	Иначе
		Элементы.ЗапасыГруппаСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыГруппаСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыГруппаВсего.Видимость = Ложь;
		Элементы.РасходыГруппаСтавкаНДС.Видимость = Ложь;
		Элементы.РасходыГруппаСуммаНДС.Видимость = Ложь;
		Элементы.РасходыГруппаВсего.Видимость = Ложь;
	КонецЕсли;
	ОпределитьВидимостьНастроекУчетаВНалогообложении();
	
	// Прослеживаемость
	Если Не КэшЗначений.Свойство("УчетГТД") Тогда
		КэшЗначений.Вставить("УчетГТД", ПолучитьФункциональнуюОпцию("УчетГТД"));
	КонецЕсли;
	
	ОбновитьОтображениеПрослеживаемости();
	ПрослеживаемостьФормыКлиентСерверУНФ.НастроитьВидимостьКолонокРНПТ(ЭтотОбъект,,,,ПоставщикРезидентТаможенногоСоюза);
	// Конец Прослеживаемость
	
	// Обновим подвал формы.
	ИтогВсего = Объект.Запасы.Итог("Всего") + Объект.Расходы.Итог("Всего");
	ИтогСуммаНДС = Объект.Запасы.Итог("СуммаНДС") + Объект.Расходы.Итог("СуммаНДС");
	
	НоменклатураВДокументахСервер.ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристик(ЭтаФорма);

	УстановитьВидимостьВременнойПодсказки();
	
	СкладскойУчетСервер.УстановитьУсловноеОформлениеДокументовПоступления(УсловноеОформление,,, ТипЗнч(Объект.Ссылка));
	
	Элементы.ЗапасыДокументПоступления.Видимость = УчетОстатковПоСкладскимОрдерам;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьВременнойПодсказки()
	
	ВыводитьПодсказку = РасчетыРаботаСФормамиВызовСервера.ПроверитьНеобходимостьВыводитьПодсказкуДляРелиза3_0_2();
	ЭтоНовыйДокумент = Объект.ВариантОсвобожденияАванса = 
		ПредопределенноеЗначение("Перечисление.ВариантыОсвобожденияАвансаВКорректировках.ОсвобождатьАванс"); 
		
	Элементы.ГруппаИнформацияПоОсвобождениюАвансаШапка.Видимость = ВыводитьПодсказку
		И ПоказыватьИнформациюПоОсвобождениюАвансаШапка И ЭтоНовыйДокумент;
		
	Элементы.ГруппаИнформацияПоОсвобождениюАванса.Видимость = ВыводитьПодсказку И ПоказыватьИнформациюПоОсвобождениюАванса;
	Элементы.ГруппаПредоплата.Видимость = Не ЭтоНовыйДокумент;
	Элементы.Предоплата.Видимость = Не ЗначениеЗаполнено(Объект.ВариантОсвобожденияАванса);
	Элементы.ВключитьНовуюСхемуУменьшенияДолга.Видимость = Не ЗначениеЗаполнено(Объект.ВариантОсвобожденияАванса);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредоплату(ТекущийОбъект)
	
	ТекущийОбъект.ЗаполнитьПредоплату();
	
КонецПроцедуры // ЗаполнитьПредоплату()

&НаСервере
Процедура НомераГТДПодобратьНаСервере(ЭтоКонтекстныйВызов)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ТаблицаЗапасы", Неопределено);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	
	ГрузовыеТаможенныеДекларацииСервер.ПодготовитьТаблицуЗапасовИзТаблицыФормы(ПараметрыПодбора, Объект.Запасы);
	ГрузовыеТаможенныеДекларацииСервер.ПодобратьНомераГТДПоПредыдущимПоступлениям(ПараметрыПодбора);
	ГрузовыеТаможенныеДекларацииСервер.ПеренестиНомераГТДВТаблицуФормы(Объект.Запасы, ПараметрыПодбора);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстСодержания(Знач Номенклатура, Знач Характеристика)
	Возврат ТабличныеЧастиУНФ.ТекстСодержания(Номенклатура, Характеристика);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНастройкиИзмененияКоличества()
	
	НастройкиКоличества = ДокументыУНФКлиентСервер.ПараметрыСбросаКоличества();
	ДокументыУНФ.ЗаполнитьНастройкиКоличества(НастройкиКоличества);
	Возврат НастройкиКоличества;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуНастройки(ПередаватьВидДокумента)

	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ВидДокумента", НСтр("ru = 'корректировка поступления'"));
	
	СтруктураПараметров.Вставить("ПоказыватьКолонкуСодержаниеВКорректировкеПоступленияЗапасы", 
		ПоказыватьКолонкуСодержаниеВКорректировкеПоступленияЗапасы);

	СтруктураПараметров.Вставить("ПоказыватьКолонкуСодержаниеВКорректировкеПоступленияРасходы", 
		ПоказыватьКолонкуСодержаниеВКорректировкеПоступленияРасходы);
	
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	
	ОткрытьФорму("ОбщаяФорма.ШапкаТабличнаяЧасть", СтруктураПараметров, , , , , 
		Новый ОписаниеОповещения("ШапкаТабличнаяЧастьЗавершение", ЭтотОбъект));
		
КонецПроцедуры

&НаКлиенте
Процедура ШапкаТабличнаяЧастьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.БылиВнесеныИзменения Тогда
		
		ПоказыватьКолонкуСодержаниеВКорректировкеПоступленияЗапасы = 
			Результат.ПоказыватьКолонкуСодержаниеВКорректировкеПоступленияЗапасы;
		ПоказыватьКолонкуСодержаниеВКорректировкеПоступленияРасходы = 
			Результат.ПоказыватьКолонкуСодержаниеВКорректировкеПоступленияРасходы;
		УстановитьВидимостьОтПользовательскихНастроек(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьОтПользовательскихНастроек(Форма)

	Элементы = Форма.Элементы;
	
	// Видимость колонок, настроенная пользователем
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСодержание", "Видимость",
		Форма.ПоказыватьКолонкуСодержаниеВКорректировкеПоступленияЗапасы);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РасходыГруппаСведения", "Видимость",
		Форма.ПоказыватьКолонкуСодержаниеВКорректировкеПоступленияРасходы);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РасходыСодержание", "Видимость",
		Форма.ПоказыватьКолонкуСодержаниеВКорректировкеПоступленияРасходы);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РасходыСодержаниеДоИзменения", "Видимость",
		Форма.ПоказыватьКолонкуСодержаниеВКорректировкеПоступленияРасходы);
	
КонецПроцедуры
	
#КонецОбласти

#Область Подбор

&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
		ЗаполнитьЗаголовкиСтрок(НоваяСтрока);
		
		Если ИмяТабличнойЧасти = "Запасы"
			Тогда
			// Характеристики
			СтруктураДанныеНоменклатуры = Новый Структура();
			СтруктураДанныеНоменклатуры.Вставить("Номенклатура", СтрокаЗагрузки.Номенклатура);
			СтруктураДанныеНоменклатуры.Вставить("Характеристика", СтрокаЗагрузки.Характеристика);
			СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
			СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
			
			СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанныеНоменклатуры);
			СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
			
			НоваяСтрока.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
			НоваяСтрока.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
			НоваяСтрока.ЗаполнениеХарактеристикиПроверено = Истина;
			
			Если СтруктураДанные.ИспользоватьХарактеристики
				Тогда
				НоваяСтрока.Характеристика = СтруктураДанные.Характеристика;
			КонецЕсли;
			// Конец Характеристики
			
			//Партии
			НоваяСтрока.ИспользоватьПартии = СтрокаЗагрузки.Номенклатура.ИспользоватьПартии;
			НоваяСтрока.ПроверятьЗаполнениеПартий = СтрокаЗагрузки.Номенклатура.ПроверятьЗаполнениеПартий;
			
			СтатусПартии = ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы");
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтрокаЗагрузки.Номенклатура, СтатусПартии);
			
			НоваяСтрока.Партия = ?(ЗначениеЗаполнено(СтрокаЗагрузки.Партия), СтрокаЗагрузки.Партия, ЗначенияПартииПоУмолчанию);;
			// Конец Партии
			
			// Прослеживаемость
			Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
				НоваяСтрока.ПрослеживаемыйТовар = СтрокаЗагрузки.Номенклатура.ПрослеживаемыйТовар;
				НоваяСтрока.ПрослеживаемыйКомплект = СтрокаЗагрузки.Номенклатура.ПрослеживаемыйКомплект;
				ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, НоваяСтрока);
			Иначе
				НоваяСтрока.ПрослеживаемыйТовар = Ложь;
				НоваяСтрока.ПрослеживаемыйКомплект = Ложь;
			КонецЕсли;
			Если НоваяСтрока.ПрослеживаемыйТовар Тогда
				НоваяСтрока.НомерГТД = Неопределено;
			КонецЕсли; 
			// Конец Прослеживаемость
			
			НоваяСтрока.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
			ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект[ИмяТабличнойЧасти], НоваяСтрока, "КлючСвязи");

			
		КонецЕсли;
		
	КонецЦикла;
	
	УчетОстатковПоСкладскимОрдерам = УчетОстатковВРазрезеСкладскихОрдеров();
	Элементы.ЗапасыДокументПоступления.Видимость = УчетОстатковПоСкладскимОрдерам;
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

Функция УчетОстатковВРазрезеСкладскихОрдеров(СтруктурнаяЕдиница = Неопределено)
	
	Если НЕ СтруктурнаяЕдиница = Неопределено Тогда
		Возврат СкладскойУчетСервер.УчетОстатковВРазрезеСкладскихОрдеров(СтруктурнаяЕдиница);
	КонецЕсли;
	
	МассивКонтроля = СкладскойУчетСервер.МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам(Объект.Запасы.Выгрузить(,"СтруктурнаяЕдиница"));
	Возврат МассивКонтроля.Количество();
	
КонецФункции

&НаСервере
Функция ПоместитьПредоплатаВХранилище()
	
	ТаблицаПредоплата = Объект.Предоплата.Выгрузить(, "Документ, Заказ, СуммаРасчетов, Курс, Кратность, СуммаПлатежа");
	
	ПустыеСтроки = ТаблицаПредоплата.НайтиСтроки(Новый Структура("СуммаРасчетов", 0));
	Для каждого СтрокаТаблицы Из ПустыеСтроки Цикл
		ТаблицаПредоплата.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(
		ТаблицаПредоплата,
		УникальныйИдентификатор);
	
КонецФункции // ПоместитьПредоплатаВХранилище()

&НаСервере
Процедура ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресПредоплатаВХранилище);
	Для каждого СтрокаТаблицы Из ТаблицаДляЗагрузки Цикл
		
		НайденныеСтроки = Новый Массив;
		Если ТаблицаДляЗагрузки.Колонки.Найти("Заказ") <> Неопределено Тогда
			НайденныеСтроки = Объект.Предоплата.НайтиСтроки(Новый Структура("Документ, Заказ", СтрокаТаблицы.Документ, СтрокаТаблицы.Заказ));
		ИначеЕсли ТаблицаДляЗагрузки.Колонки.Найти("Документ") <> Неопределено Тогда
			НайденныеСтроки = Объект.Предоплата.НайтиСтроки(Новый Структура("Документ", СтрокаТаблицы.Документ));
		ИначеЕсли Объект.Предоплата.Количество() > 0 Тогда
			НайденныеСтроки = Объект.Предоплата[0];
		КонецЕсли;
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].СуммаРасчетов = СтрокаТаблицы.СуммаРасчетов;
			НайденныеСтроки[0].Курс = СтрокаТаблицы.Курс;
			НайденныеСтроки[0].Кратность = СтрокаТаблицы.Кратность;
			НайденныеСтроки[0].СуммаПлатежа = СтрокаТаблицы.СуммаПлатежа;
		Иначе
			НоваяСтрока = Объект.Предоплата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента);
	
КонецПроцедуры // ПолучитьПредоплатаИзХранилища()

#КонецОбласти

#Область ОбработчикиБиблиотек

// ЭДО
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДОНажатие(Элемент, СтандартнаяОбработка)
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект, СтандартнаяОбработка);
КонецПроцедуры
// Конец ЭДО

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойство

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено,
	СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_РедактироватьСоставСвойств()

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

// Конец СтандартныеПодсистемы.Свойство

#КонецОбласти

#Область Прослеживаемость

&НаКлиенте
Процедура ОбработкаВыбораРНПТННаКлиенте(ВыбранноеЗначение)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторСтроки) Тогда
			СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;
		ОбработкаВыбораРНПТННаСервере(СтрокаТабличнойЧасти.ИдентификаторСтроки, ВыбранноеЗначение);
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбработкаВыбораГТДНаКлиенте(ВыбранноеЗначение)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		// Если в результате выбора пришло только значение,
		// то переложим его в структуру.
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.НомераГТД") Тогда
			ВыбранноеЗначение = Новый Структура("НомерГТД", ВыбранноеЗначение);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
			
			ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
			Если ДатаГТД > КонецДня(Объект.Дата) Тогда
				
				ТекстСообщения = НСтр("ru ='Внимание: выбранная ГТД датирована более поздней датой, чем текущий документ.'");
				КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Запасы",
					СтрокаТабличнойЧасти.НомерСтроки, "НомерГТД");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , КонтекстноеПоле);
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаТабличнойЧасти);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораРНПТННаСервере(ИдентификаторСтроки, ВыбранноеЗначение)
	
	ПрослеживаемостьФормыУНФ.ОбработкаВыбораРНПТН(ЭтотОбъект, ИдентификаторСтроки, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСвязанныеЗаписи(СтрокаЗапасы)
	
	СтруктураОтбора = Новый Структура("ИдентификаторСтроки", СтрокаЗапасы.ИдентификаторСтроки);
	МассивСтрокСведенияПрослеживаемости = Объект.СведенияПрослеживаемости.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаТЧ Из МассивСтрокСведенияПрослеживаемости Цикл
		Объект.СведенияПрослеживаемости.Удалить(СтрокаТЧ);
	КонецЦикла;
	ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаЗапасы);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПризнакПрослеживаемости()
	
	ПрослеживаемостьФормыУНФ.ОбновитьПризнакПрослеживаемости(Объект.Запасы, Объект.СведенияПрослеживаемости, КэшЗначений.ВестиУчетПрослеживаемыхТоваров);
	Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеПрослеживаемости()
	
	ПрослеживаемостьФормыУНФ.ПриСозданииФормы(ЭтотОбъект, КэшЗначений);
	Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти
