
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	ОбновитьРеквизитыВидимостиФормы();

	Для Каждого ТекущаяСтрока Из Объект.Расходы Цикл
		ТекущаяСтрока.ТипСчета = ТекущаяСтрока.СчетЗатрат.ТипСчета;
	КонецЦикла;
	
	УправлениеФормой(ЭтаФорма);
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Прочие расчеты
	Если ИмяСобытия = "Запись_ПланСчетовУправленческий" Тогда
		Если ЗначениеЗаполнено(Параметр)
			И Объект.Корреспонденция = Параметр Тогда
			
			ОбновитьРеквизитыВидимостиФормы();
			УправлениеФормой(ЭтотОбъект);
			
		КонецЕсли;
	КонецЕсли;
	// Конец Прочие расчеты
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДанныеДляИзмененияДаты = ДокументыУНФКлиент.ДанныеДляИзмененияДаты(ЭтотОбъект, Объект);
	Если ДанныеДляИзмененияДаты.ДатаНеМенялась Тогда
		Возврат;
	КонецЕсли;
	
	ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ДанныеКонтрагента = ДанныеКонтрагентаДляИзменения(Объект.Контрагент, Объект.Организация, Объект.Дата);
	
	Объект.Договор = ДанныеКонтрагента.Договор;
	
	Если ДанныеКонтрагента.Свойство("Проект") Тогда
		Объект.Проект = ДанныеКонтрагента.Проект;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект,
		"Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасходы

&НаКлиенте
Процедура РасходыСчетЗатратПриИзменении(Элемент)
	
	ПараметрыСчета = ПолучитьПараметрыСчетаЗатратПриИзменении(Элементы.Расходы.ТекущиеДанные.СчетЗатрат);
	ТекущиеДанные = Элементы.Расходы.ТекущиеДанные;
	ТекущиеДанные.АналитикаПрочихДоходовИРасходов = ПараметрыСчета.АналитикаПрочихДоходовИРасходов;
	ТекущиеДанные.ТипСчета = ПараметрыСчета.ТипСчета;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыАналитикаПрочихДоходовИРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.Расходы.ТекущиеДанные.АналитикаПрочихДоходовИРасходов = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Для данного типа счета не требуется указывать аналитику доходов и расходов'");
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыКонтрагентПриИзменении(Элемент)
	РасходыКонтрагентПриИзмененииНаСервере()
КонецПроцедуры

&НаКлиенте
Процедура РасходыКонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Расходы.ТекущиеДанные;
	Если ТекущиеДанные.ТипСчета <> ПредопределенноеЗначение("Перечисление.ТипыСчетов.Кредиторы")
		И ТекущиеДанные.ТипСчета <> ПредопределенноеЗначение("Перечисление.ТипыСчетов.Дебиторы") Тогда
		СтандартнаяОбработка = Ложь;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Для данного типа счета не требуется указывать контрагента'");
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти.ТипСчета <> ПредопределенноеЗначение("Перечисление.ТипыСчетов.Кредиторы")
		И СтрокаТабличнойЧасти.ТипСчета <> ПредопределенноеЗначение("Перечисление.ТипыСчетов.Дебиторы") Тогда
		
		СтандартнаяОбработка = Ложь;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Для данного типа счета не требуется указывать договор'");
		Сообщение.Сообщить();
		
	ИначеЕсли СтрокаТабличнойЧасти <> Неопределено Тогда
		
		ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация,
			СтрокаТабличнойЧасти.Контрагент, СтрокаТабличнойЧасти.Договор);
		Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
			
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, Объект.Договор);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетПрочихРасчетовПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КорреспонденцияПриИзменении(Элемент)
	
	ОбновитьРеквизитыВидимостиФормы();
	
	УправлениеФормой(ЭтотОбъект);
	Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьРеквизитыВидимостиФормы()
	
	СтрокаРеквизитов = "ВестиРасчетыПоДоговорам";
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Контрагент, СтрокаРеквизитов);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ЗначенияРеквизитов, СтрокаРеквизитов);
	
	СтрокаРеквизитов = "ТипСчета";
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Корреспонденция, СтрокаРеквизитов);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ЗначенияРеквизитов, СтрокаРеквизитов);
	
	Если ЗначениеЗаполнено(Объект.Корреспонденция) Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Корреспонденция, "АналитикаДоходовИРасходов");
		АналитикаПрочихДоходовИРасходов = ЗначенияРеквизитов.АналитикаДоходовИРасходов;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.Договор.Видимость = Форма.ВестиРасчетыПоДоговорам;
	
	Элементы.АналитикаПрочихДоходовИРасходов.Видимость = Ложь;
	Элементы.Контрагент.Видимость = Ложь;
	Элементы.Договор.Видимость = Ложь;
	
	Элементы.РасходыДоговор.Видимость = Объект.УчетПрочихРасчетов;
	Элементы.РасходыКонтрагент.Видимость = Объект.УчетПрочихРасчетов;
	
	// Прочие расчеты
	Если (Форма.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.ПрочиеДоходы")
		ИЛИ Форма.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.ПрочиеРасходы") ИЛИ Форма.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.ПрочиеОборотныеАктивы")) Тогда
		Если ЗначениеЗаполнено(Форма.АналитикаПрочихДоходовИРасходов) Тогда
			Элементы.АналитикаПрочихДоходовИРасходов.Видимость = Истина;
			Элементы.АналитикаПрочихДоходовИРасходов.ОграничениеТипа = Новый ОписаниеТипов(Форма.АналитикаПрочихДоходовИРасходов);
			Элементы.АналитикаПрочихДоходовИРасходов.Заголовок = Строка(Элементы.АналитикаПрочихДоходовИРасходов.ОграничениеТипа);
			Элементы.АналитикаПрочихДоходовИРасходов.Доступность = Истина;
			Элементы.АналитикаПрочихДоходовИРасходов.ПодсказкаВвода = "";
		Иначе
			Элементы.АналитикаПрочихДоходовИРасходов.Видимость = Истина;
			Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
			Элементы.АналитикаПрочихДоходовИРасходов.Заголовок = НСтр("ru = 'Аналитика прочих доходов и расходов'");
			Элементы.АналитикаПрочихДоходовИРасходов.ПодсказкаВвода = НСтр("ru = '<Не настроена у этого счета>'");
			Элементы.АналитикаПрочихДоходовИРасходов.Доступность = Ложь;
			Элементы.АналитикаПрочихДоходовИРасходов.Видимость = Истина;
		КонецЕсли;
	Иначе
		Элементы.АналитикаПрочихДоходовИРасходов.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.УчетПрочихРасчетов И (Форма.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.Дебиторы")
		ИЛИ Форма.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.Кредиторы")) Тогда
		Элементы.Контрагент.Видимость = Истина;
		Элементы.Договор.Видимость = Форма.ВестиРасчетыПоДоговорам;
	КонецЕсли;
	
	УстановитьПараметрыВыбораПоУчетуПрочихРасчетовНаСервере(Форма);
	
КонецПроцедуры

// Процедура устанавливает видимость реквизитов расчетов.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьРеквизитовРасчетов(Форма)
	УправлениеФормой(Форма);
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты)
	
	ДокументыУНФ.ДатаПриИзменении(ДанныеДляИзмененияДаты, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ДокументыУНФ.ОрганизацияПриИзменении(ЭтотОбъект, Объект);
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ДанныеКонтрагентаДляИзменения(Знач Контрагент, Знач Организация, Знач Дата)
	
	ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПоДокументуКонтрагентуОрганизацииИВидуОперации(
		Объект.Ссылка, Контрагент, Организация);
	
	Результат = Новый Структура;
	Результат.Вставить("КонтрагентНаименованиеПолное", Контрагент.НаименованиеПолное);	
	Результат.Вставить("Договор", ДоговорПоУмолчанию);
	Результат.Вставить("ДоговорВалютаКурсКратность", РаботаСКурсамиВалют.ПолучитьКурсВалюты(
		ДоговорПоУмолчанию.ВалютаРасчетов, Дата));
	
	ВестиРасчетыПоДоговорам = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ВестиРасчетыПоДоговорам");
	
	Если ПолучитьФункциональнуюОпцию("УчетПоПроектам") И ЗначениеЗаполнено(ДоговорПоУмолчанию) И НЕ ЗначениеЗаполнено(Объект.Проект) Тогда
		Результат.Вставить("Проект", Справочники.Проекты.ПолучитьПроектПоДоговору(ДоговорПоУмолчанию));
	КонецЕсли;
	
	УстановитьВидимостьРеквизитовРасчетов(ЭтаФорма);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыСчетаЗатратПриИзменении(Счет)
	
	Параметры = Новый Структура("АналитикаПрочихДоходовИРасходов, ТипСчета");
	
	Если ЗначениеЗаполнено(Счет.АналитикаДоходовИРасходов) И (Счет.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.ПрочиеДоходы")
		ИЛИ Счет.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.ПрочиеРасходы") ИЛИ Счет.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.ПрочиеОборотныеАктивы")
		ИЛИ Счет.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.Расходы")) Тогда
		Параметры.Вставить("АналитикаПрочихДоходовИРасходов", Новый(Счет.АналитикаДоходовИРасходов));
	Иначе
		Параметры.Вставить("АналитикаПрочихДоходовИРасходов", Неопределено);
	КонецЕсли;
	Параметры.Вставить("ТипСчета", Счет.ТипСчета);
	
	Возврат Параметры;
	
КонецФункции

&НаСервере
Процедура РасходыКонтрагентПриИзмененииНаСервере()
	ТекущиеДанные = Элементы.Расходы.ТекущиеДанные;
	ТекущиеДанные.Договор = Справочники.ДоговорыКонтрагентов.ПоДокументуКонтрагентуОрганизацииИВидуОперации(
		Объект.Ссылка, ТекущиеДанные.Контрагент, Объект.Организация);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораПоУчетуПрочихРасчетовНаСервере(Форма)

	УстановитьПараметрыВыбораПоУчетуПрочихРасчетовНаСервереДляЭлемента(Форма, Форма.Элементы.Корреспонденция);
	УстановитьПараметрыВыбораПоУчетуПрочихРасчетовНаСервереДляЭлемента(Форма, Форма.Элементы.РасходыСчетЗатрат);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораПоУчетуПрочихРасчетовНаСервереДляЭлемента(Форма, Элемент)

	Элементы = Форма.Элементы;
	
	ПараметрыВыбораЭлемента = Новый Массив;
	ОтборПоТипуСчета = Новый Массив;
	
	Для Каждого Параметр Из Элемент.ПараметрыВыбора Цикл
		Если Параметр.Имя = "Отбор.ТипСчета" Тогда
			
			Для Каждого ТипСчета Из Параметр.Значение Цикл
				Если ТипСчета <> ПредопределенноеЗначение("Перечисление.ТипыСчетов.Кредиторы")
					И ТипСчета <> ПредопределенноеЗначение("Перечисление.ТипыСчетов.Дебиторы")
					И ТипСчета <> ПредопределенноеЗначение("Перечисление.ТипыСчетов.Капитал") Тогда
					ОтборПоТипуСчета.Добавить(ТипСчета);
				КонецЕсли;
			КонецЦикла;
			
			Если Форма.Объект.УчетПрочихРасчетов Тогда
				Если ОтборПоТипуСчета.Найти(ПредопределенноеЗначение("Перечисление.ТипыСчетов.Дебиторы")) = Неопределено Тогда
					ОтборПоТипуСчета.Добавить(ПредопределенноеЗначение("Перечисление.ТипыСчетов.Дебиторы"));
				КонецЕсли;
				Если ОтборПоТипуСчета.Найти(ПредопределенноеЗначение("Перечисление.ТипыСчетов.Кредиторы")) = Неопределено Тогда
					ОтборПоТипуСчета.Добавить(ПредопределенноеЗначение("Перечисление.ТипыСчетов.Кредиторы"));
				КонецЕсли;
				Если Элемент = Элементы.Корреспонденция Тогда
					Если ОтборПоТипуСчета.Найти(ПредопределенноеЗначение("Перечисление.ТипыСчетов.Капитал")) = Неопределено Тогда
						ОтборПоТипуСчета.Добавить(ПредопределенноеЗначение("Перечисление.ТипыСчетов.Капитал"));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ПараметрыВыбораЭлемента.Добавить(Новый ПараметрВыбора("Отбор.ТипСчета", Новый ФиксированныйМассив(ОтборПоТипуСчета)));
		Иначе
			ПараметрыВыбораЭлемента.Добавить(Параметр);
		КонецЕсли;
	КонецЦикла;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораЭлемента);
	
КонецПроцедуры

// Получает структуру параметров формы выбора договора контрагента.
//
&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбора(Документ, Организация, Контрагент, Договор)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтаФорма);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
