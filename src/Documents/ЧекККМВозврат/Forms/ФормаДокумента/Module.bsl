#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПоменятьМестамиПредоплатуИБезналичнуюОплату()
	
	СтраницаПредоплата = Элементы.Найти("СтраницаПредоплата");
	СтраницаБезналичнаяОплата = Элементы.Найти("СтраницаБезналичнаяОплата");
	РодительЭлементов = Элементы.Найти("Страницы");
	
	Если Объект.ОперацияСДенежнымиСредствами Тогда
		Элементы.Переместить(СтраницаПредоплата, РодительЭлементов, СтраницаБезналичнаяОплата);
	Иначе
		Элементы.Переместить(СтраницаБезналичнаяОплата, РодительЭлементов, СтраницаПредоплата);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьТабличныхЧастей()
	
	Если Не Объект.ОперацияСДенежнымиСредствами Тогда
		Возврат;
	КонецЕсли;
	
	ВыбраныЗапасы = Объект.Запасы.Количество();
	
	Элементы.ДекорацияБлокировкаТабличнойЧастиПредоплата.Видимость = ВыбраныЗапасы;
	Элементы.СтраницыРасчетовСКонтрагентом.Доступность = Не ВыбраныЗапасы;
	
	ВыбраныДолги = Объект.Предоплата.Количество();
	
	Элементы.ДекорацияБлокировкаТабличнойЧасти.Видимость = ВыбраныДолги;
	Элементы.Запасы.Доступность = Не ВыбраныДолги;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьПослеФискализации(ДатаСеанса, НомерСменыККТ = 0, НомерЧекаККТ = 0)
	
	Объект.НомерЧекаККМ = НомерЧекаККТ;
	Объект.НомерСменыККМ = НомерСменыККТ;
	Объект.Дата = ДатаСеанса;
	
	Если НЕ ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
		Объект.НомерЧекаККМ = 1;
	КонецЕсли;
	
	ЭтотОбъект.ПриЗаписиПерепроводить = Ложь;
	РезультатЗаписи = Записать();
	ЭтотОбъект.ПриЗаписиПерепроводить = Истина;
	
	Возврат РезультатЗаписи;
	
КонецФункции

&НаКлиенте
Процедура ВернутьСтатусПриНеудачнойФискализации()
	
	Объект.НомерЧекаККМ = 0;
	РезультатПроведения = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПередачиОтменыЧекаЕГАИС(Изменения, ПараметрыВыполнения) Экспорт
	
	ЕстьОшибки = (Изменения.Количество() <> 1);
	
	Ошибки = Новый Массив;
	Для Каждого ЭлементДанных Из Изменения Цикл
		Если ЗначениеЗаполнено(ЭлементДанных.ТекстОшибки) Тогда
			ЕстьОшибки = Истина;
			Ошибки.Добавить(ЭлементДанных.ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	Если Ошибки.Количество() > 0 Тогда
		Ошибки.Вставить(0, НСтр("ru = 'В процессе передачи данных в ЕГАИС возникли ошибки:'"));
	КонецЕсли;
	ОписаниеОшибки = СтрСоединить(Ошибки, Символы.ПС);
	
	Если ЕстьОшибки Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКодМаркировкиСредствамиККТЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ШтрихкодированиеИСМПКлиент.РезультатПроверкиСредствамиККТТребуетФискализации(Результат)
		И ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ОбщиеПараметры") Тогда
	
		ЕстьАлкогольнаяПродукцияЕГАИС = ДополнительныеПараметры.ЕстьАлкогольнаяПродукцияЕГАИС;
		ТранспортныйМодуль = ДополнительныеПараметры.ТранспортныйМодуль;
		ОбщиеПараметры = ДополнительныеПараметры.ОбщиеПараметры;
		ИдентификаторУстройстваФР = ДополнительныеПараметры.ИдентификаторУстройстваФР;
			
		Контекст = Новый Структура();
		Контекст.Вставить("ЕстьАлкогольнаяПродукцияЕГАИС", ЕстьАлкогольнаяПродукцияЕГАИС);
		Контекст.Вставить("АдресТорговогоОбъекта", ОбщиеПараметры.АдресМагазина);
		
		Если ЕстьАлкогольнаяПродукцияЕГАИС Тогда
			Контекст.Вставить("ТранспортныйМодуль", ТранспортныйМодуль);
		КонецЕсли;
		
		ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("ЧекККМВозврат_ФискализацияЧекаНаУстройстве_"+Объект.Запасы.Количество(), Истина, Ложь);
		Контекст.Вставить("ИДЗамера", ИДЗамера);
		
		Оповещение = Новый ОписаниеОповещения("ПробитьЧекЗавершение", ЭтотОбъект, Контекст);
		ОповещениеПослеОткрытииЧека   = Новый ОписаниеОповещения("ПечатьЧека_ПослеОткрытияЧека", ЭтотОбъект, Контекст);
		ОповещениеПриОшибкеПечатиЧека = Новый ОписаниеОповещения("ПечатьЧека_ПослеОшибкиПечатиЧека", ЭтотОбъект, Контекст);
		
		ДополнительныеПараметрыОперации = МенеджерОборудованияКлиентСервер.ДополнительныеПараметрыОперации();
		ДополнительныеПараметрыОперации.Вставить("ОповещениеПослеОткрытииЧека", ОповещениеПослеОткрытииЧека);
		ДополнительныеПараметрыОперации.Вставить("ОповещениеПриОшибкеПечатиЧека", ОповещениеПриОшибкеПечатиЧека);
		
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФискализациюЧекаНаФискальномУстройстве( 
			Оповещение,
			УникальныйИдентификатор, 
			ИдентификаторУстройстваФР,   
			ОбщиеПараметры,
			ДополнительныеПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(Параметры.ИДЗамера, Ложь);
	
	ЭтотОбъект.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		
		ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("ЧекККМВозврат_ПробитьЧекЗавершение_"+Объект.Запасы.Количество(), Истина, Ложь);
		
		ЗаписатьПослеФискализации(ОбщегоНазначенияКлиент.ДатаСеанса(),
								  РезультатВыполнения.НомерСменыККТ,
								  РезультатВыполнения.НомерЧекаККТ);
		
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
		
		Если НЕ КассаККМИспользоватьБезПодключенияОборудования Тогда
			УстановитьРежимТолькоПросмотр();
		КонецЕсли;
		
		Если ИспользоватьОплатуСертификатамиНСПК Тогда
			СтрокиОплатНСПК = Объект.БезналичнаяОплата.НайтиСтроки(Новый Структура("ВидОплаты", ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.СертификатНСПК")));
			Если СтрокиОплатНСПК.Количество() Тогда
				ПередатьДанныеФискальногоЧекаНСПК();
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ВернутьСтатусПриНеудачнойФискализации();
		
		ТекстСообщения = НСтр(
			"ru = 'При печати чека произошла ошибка.
			|Чек не напечатан на фискальном регистраторе.
			|Дополнительное описание:
			|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%ДополнительноеОписание%",
			РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеДоговора(ДанныеДоговора = Неопределено)
	
	ДоговорПередИзменением = Договор;
	Договор = Объект.Договор;
		
	Если ДоговорПередИзменением <> Объект.Договор Тогда
		
		Если ДанныеДоговора = Неопределено Тогда
			
			ДанныеДоговора = ДанныеДоговораДляИзменения(ДатаДокумента, Объект.Договор, Объект.Контрагент);
			
		КонецЕсли;
		
		Если Объект.Предоплата.Количество() > 0
			И Объект.Договор <> ДоговорПередИзменением Тогда
			
			ПараметрыДокумента = Новый Структура;
			ПараметрыДокумента.Вставить("ДоговорПередИзменением", ДоговорПередИзменением);
			ПараметрыДокумента.Вставить("ДанныеДоговора", ДанныеДоговора);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОбОчисткеПредоплатыЗавершение", ЭтотОбъект,
				ПараметрыДокумента);
			ТекстВопроса = НСтр("ru = 'Зачет предоплаты будет очищен, продолжить?'");
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
			Возврат;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьБонусыПропорционально(СтрокаТабличнойЧасти, СуммаПередРасчетом)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
	
	ОбрабатываемыеСтроки = Объект.БонусныеБаллыКНачислению.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаТаблицы Из ОбрабатываемыеСтроки Цикл
		
		СтрокаТаблицы.КоличествоБонусныхБаллов = СтрокаТаблицы.КоличествоБонусныхБаллов*СтрокаТабличнойЧасти.Сумма/СуммаПередРасчетом;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЭтоВозвратЧастичнойПредоплаты()
	
	Если Объект.ОперацияСДенежнымиСредствами Тогда
		Если Объект.СуммаДокумента <> Объект.Запасы.Итог("Всего")
			И Объект.Запасы.Итог("Всего") <> 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЭтоВозвратАванса()
	
	Если Объект.ОперацияСДенежнымиСредствами Тогда
		Если ЗначениеЗаполнено(Объект.ЧекККМ) Тогда
			Если Объект.ЧекККМ.Запасы.Количество() = 0 Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияХарактеристик()
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов()
	ДополнительныеСвойства = Новый Структура("ИзменениеКлючевыхРеквизитов", Истина);
	СерииНоменклатурыУНФ.ЗаполнитьПризнакиИспользованияСерий(Объект, ДополнительныеСвойства);
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	// Наборы
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.НоменклатураНабора", Справочники.Номенклатура.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыНоменклатура,ЗапасыХарактеристика,ЗапасыКоличество,ЗапасыЕдиницаИзмерения");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	// Конец Наборы
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	ГруппаОтборов = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Объект.Запасы.ПроцентСкидкиНаценки", 100);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Объект.Запасы.СуммаСкидкиНаценки", Новый ПолеКомпоновкиДанных("Объект.Запасы.Сумма"),ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСумма");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
	
	// Скидки
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ПроцентСкидкиНаценки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыПроцентСкидкиНаценки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "%");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.СуммаСкидкиНаценки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСуммаСкидкиНаценки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = 'сумма'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ПроцентАвтоматическойСкидки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыПроцентАвтоматическойСкидки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "%");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.СуммаАвтоматическойСкидки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСуммаАвтоматическойСкидки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = 'сумма'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);	
	// Конец Скидки
	
	// Ячейки
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ЯчейкаДоступна", Ложь);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыЯчейка");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыЯчейкаДляРежимаОстатки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "");
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	// Доступность колонки СтруктурнаяЕдиница
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ТипНоменклатурыЗапас", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСтруктурнаяЕдиница,ЗапасыЯчейка,ЗапасыСтруктурнаяЕдиницаДляРежимаОстатки,ЗапасыЯчейкаДляРежимаОстатки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Для товаров>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
	// Характеристики
	НоменклатураВДокументахСервер.ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристик(ЭтаФорма);
	// КонецХарактеристики
	
	// Минимальные цены
	ЦенообразованиеСервер.УстановитьУсловноеОформлениеМинимальнойЦены(УсловноеОформление, "Запасы", ?(КэшЗначений.Свойство("ИспользоватьМинимальныеЦены"), КэшЗначений.ИспользоватьМинимальныеЦены, Ложь));
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	// Наборы
	Элементы.ЗапасыКартинкаНабора.Видимость = Ложь;
	Для каждого Стр Из Объект.Запасы Цикл
		Если Стр.КартинкаНабора>0 Тогда
			Элементы.ЗапасыКартинкаНабора.Видимость = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	// Конец Наборы
	
	// ВводНаОсновании
	ВводНаОсновании = ЗначениеЗаполнено(Объект.ЧекККМ);
	Если ВводНаОсновании Тогда
		БылЗачетПредоплаты = Объект.ЧекККМ.Предоплата.Количество() > 0;
	Иначе
		БылЗачетПредоплаты = Ложь;
	КонецЕсли;
	ОплатаСБП		= Ложь;

	Если Не ВводНаОсновании Тогда

		Интеграции 		  = ИнтеграцияСПлатежнымиСистемамиУНФ.НастройкиИнтеграции(
			Объект.Организация, 
			Объект.СтруктурнаяЕдиница);
	
		Если Интеграции <> Неопределено
			И Интеграции.Количество() Тогда
			ОплатаСБП = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Заказ", "Видимость", ВводНаОсновании);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЗаказ", "Видимость", ВводНаОсновании);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекККМ", "Видимость", ВводНаОсновании);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОперацияСДенежнымиСредствами", "Доступность", Не ВводНаОсновании);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "СтраницаПредоплата", "Видимость", ВводНаОсновании И Не Объект.ЧекККМ.ОперацияСДенежнымиСредствами);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НадписьОтменитьОплату", "Видимость", Не ВводНаОсновании Или БылЗачетПредоплаты);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОплатаПлатежнымиКартамиОтменитьОплату", "Видимость", ВводНаОсновании);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВозвратОплатыКартой", "Видимость", Не ВводНаОсновании Или БылЗачетПредоплаты);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВозвратОплатыСБП", "Видимость", ОплатаСБП);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ОплатаПлатежнымиКартамиОперацияОтменена", "ТолькоПросмотр", Не ВводНаОсновании);
	
	Если Не ВводНаОсновании Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Контрагент", "Вид", ВидПоляФормы.ПолеВвода);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Договор", "Вид", ВидПоляФормы.ПолеВвода);
		Объект.ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		Объект.ПоложениеОтветственный = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		УстановитьВидимостьДоговора();
	КонецЕсли;
	// Конец ВводНаОсновании
	
	// Бонусы
	ФОБонусы = ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммы");
	Команды["РассчитатьСкидкиНаценки"].Подсказка = Команды["РассчитатьСкидкиНаценки"].Подсказка
		+ ?(ФОБонусы И Не ВводНаОсновании, НСтр("ru = ' и бонусы'"), "");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницаБонусы", "Видимость", ВводНаОсновании И ФОБонусы);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСуммаСкидкиОплатыБонусом", "Видимость", ВводНаОсновании И ФОБонусы);
	// Конец Бонусы
	
	// Сертификаты
	ФОСертификаты = ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПанельСертификат",
		"Видимость",
		(Не ВводНаОсновании Или БылЗачетПредоплаты) И ФОСертификаты);
	// Конец Сертификаты
	
	Если ИспользоватьРассрочкуПлатежа И ЗначениеЗаполнено(Объект.ЧекККМ) Тогда
		
		Если Объект.ОперацияСДенежнымиСредствами Тогда
			
			ЗаголовокЗачтенаПредоплата = НСтр("ru='Зачтена рассрочка (%Валюта%)'");
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницаПредоплата", "Заголовок", НСтр("ru = 'Чеки с рассрочкой'"));
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПредоплатаСуммаРасчетов", "Заголовок", НСтр("ru = 'Сумма платежа'"));
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницаПредоплата", "Видимость", Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьПоРассрочке", "Видимость", Истина);
			
			МассивПараметрыВыбора = Новый Массив;
			МассивПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ОперацияСДенежнымиСредствами", Ложь));
			НовыеПараметры = Новый ФиксированныйМассив(МассивПараметрыВыбора);
			Элементы.ПредоплатаДокумент.ПараметрыВыбора = НовыеПараметры
			
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьПоРассрочке", "Видимость", Ложь);
			
			МассивПараметрыВыбора = Новый Массив;
			МассивПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ОперацияСДенежнымиСредствами", Истина));
			НовыеПараметры = Новый ФиксированныйМассив(МассивПараметрыВыбора);
			Элементы.ПредоплатаДокумент.ПараметрыВыбора = НовыеПараметры
			 
		КонецЕсли;
		
		ПоменятьМестамиПредоплатуИБезналичнуюОплату();
		
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьПоРассрочке", "Видимость", Ложь);
		
		МассивПараметрыВыбора = Новый Массив;
		МассивПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ОперацияСДенежнымиСредствами", Истина));
		НовыеПараметры = Новый ФиксированныйМассив(МассивПараметрыВыбора);
		Элементы.ПредоплатаДокумент.ПараметрыВыбора = НовыеПараметры
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияРеквизитовПечати(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ПечатьДокументовУНФКлиент.ОбновитьЗначенияРеквизитовПечати(ЭтотОбъект, Результат.ИзмененныеРеквизиты);
		
		Если Результат.Свойство("Команда") Тогда
			
			Подключаемый_ВыполнитьКоманду(Результат.Команда);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчитывает документ на клиенте.
//
&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
	
    СуммаПредоплаты = 0;
	
	Если Объект.ОперацияСДенежнымиСредствами И Объект.Предоплата.Количество() Тогда
		Объект.СуммаДокумента = Объект.Предоплата.Итог("СуммаРасчетов");
		Возврат;
	Иначе
		СуммаПредоплаты = Объект.Предоплата.Итог("СуммаРасчетов");
	КонецЕсли;
	
	Если Не ЭтоВозвратЧастичнойПредоплаты И Не ЭтоВозвратАванса Тогда
		Объект.СуммаДокумента = Объект.Запасы.Итог("Всего");
	КонецЕсли;
	
	Если Не РежимПросмотра Тогда
		
		СуммаТоваров = Объект.Запасы.Итог("Всего");
		
		Если Не Объект.ОперацияСДенежнымиСредствами Тогда
			Объект.СуммаДокумента = СуммаТоваров;
		КонецЕсли;
		
		Элементы.СуммаДокумента.СписокВыбора.Очистить();
		Если СуммаТоваров > 0 Тогда
			ПредставлениеСуммы = НСтр("ru = 'Сумма товаров (%1)'");
			ПредставлениеСуммы = СтрШаблон(ПредставлениеСуммы, СуммаТоваров);
			Элементы.СуммаДокумента.СписокВыбора.Добавить(СуммаТоваров, ПредставлениеСуммы);
		КонецЕсли;
		
	КонецЕсли;
	
	СуммаСдачи = Объект.БезналичнаяОплата.Итог("Сумма")
			   + СуммаПредоплаты
			   + Объект.ПолученоНаличными
			   - Объект.СуммаДокумента;

	СформироватьПодсказкиКРеквизитам();
	
	ПересчитатьДокументНаСервере();
	
КонецПроцедуры // ПересчитатьДокументНаКлиенте()

&НаСервере
Процедура УстановитьВидимостьОтправкиЭлектронныхЧеков()
	
	ВидимостьОтправкиЧека = Ложь;
	
	Если КассаККМИспользоватьБезПодключенияОборудования Тогда
		
		ВидимостьОтправкиЧека = Ложь;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.КассаККМ)
		И Объект.КассаККМ.ТипКассы = Перечисления.ТипыКассККМ.ФискальныйРегистратор Тогда
		
		Если Объект.КассаККМ.ПодключаемоеОборудование.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
			ВидимостьОтправкиЧека = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНомерЧекаПраваяКолонка", "Видимость", ВидимостьОтправкиЧека);
	
	Если ВидимостьОтправкиЧека Тогда
		Если НеПечататьБумажныйЧек Тогда
			Если Элементы.ТелефонАдресЭП.СписокВыбора.Количество() = 3 Тогда
				Элементы.ТелефонАдресЭП.СписокВыбора.Удалить(0);
				ТелефонАдресЭП = "Телефон";
			КонецЕсли;
		ИначеЕсли Элементы.ТелефонАдресЭП.СписокВыбора.Количество() = 2 Тогда
			Элементы.ТелефонАдресЭП.СписокВыбора.Вставить(0, "НеОтправлять", "Не отправлять");
			ТелефонАдресЭП = "НеОтправлять";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Телефон", "АвтоОтметкаНезаполненного", НеПечататьБумажныйЧек);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АдресЭП", "АвтоОтметкаНезаполненного", НеПечататьБумажныйЧек);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения списка видов платежных карт.
//
&НаСервере
Процедура ПолучитьСписокВыбораВидовПлатежныхКарт()
	
	МассивВидовПлатежныхКарт = Справочники.СпособыОплаты.ВидыПлатежныхКарт(Объект.ЭквайринговыйТерминал);
	
	Элементы.ОплатаПлатежнымиКартамиВидПлатежнойКарты.СписокВыбора.ЗагрузитьЗначения(МассивВидовПлатежныхКарт);
	
КонецПроцедуры // ПолучитьСписокВыбораВидовПлатежныхКарт()

// Получает ссылки на внешнее оборудование.
//
&НаСервере
Процедура ПолучитьСсылкиНаОборудование()
	
	ФискальныйРегистратор = ?(
		ЗначениеЗаполнено(Объект.КассаККМ) И ЗначениеЗаполнено(Объект.КассаККМ.ПодключаемоеОборудование),
		Объект.КассаККМ.ПодключаемоеОборудование.Ссылка,
		Справочники.ПодключаемоеОборудование.ПустаяСсылка());
	
	ЭквайринговыйТерминал = ?(
		ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал) И ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал.ПодключаемоеОборудование),
		Объект.ЭквайринговыйТерминал.ПодключаемоеОборудование,
		Справочники.ПодключаемоеОборудование.ПустаяСсылка());
	
	Элементы.ОплатаПлатежнымиКартамиОтменитьОплату.Доступность = ЗначениеЗаполнено(ЭквайринговыйТерминал)
		ИЛИ ПлатежнаяСистема_ВозможенВозврат;
	
КонецПроцедуры // ПолучитьСсылкиНаОборудование()

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения
// организации.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС()
	
	НалогообложениеПередИзменением = Объект.НалогообложениеНДС;
	Объект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Объект.Организация, Объект.СтруктурнаяЕдиница, Объект.Дата);
	
	Если НЕ НалогообложениеПередИзменением = Объект.НалогообложениеНДС Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
			КонецЕсли;	
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;	
		
	Иначе
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда	
		    СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
		КонецЕсли;	
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;	
		
	КонецЕсли;
		
	УстановитьВидимостьПатента();
		
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	// Наборы
	Если НЕ СтруктураДанные.Свойство("ЕдиницаИзмерения") Тогда
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	КонецЕсли; 
	Если НЕ СтруктураДанные.Свойство("Коэффициент") Тогда
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения)=Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
		Иначе
			СтруктураДанные.Вставить("Коэффициент", 1);
		КонецЕсли; 
	КонецЕсли;
	// Конец Наборы
	
	СтруктураДанные.Вставить("ЭтоЗапас", (СтруктураДанные.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"))
								ИЛИ (СтруктураДанные.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат")));
	
	СтруктураДанные.Вставить(
		"Содержание",
		ПечатьДокументовУНФ.ПредставлениеНоменклатурыДляПечати(
			?(ЗначениеЗаполнено(СтруктураДанные.Номенклатура.НаименованиеПолное),
			СтруктураДанные.Номенклатура.НаименованиеПолное, СтруктураДанные.Номенклатура.Наименование),
			СтруктураДанные.Характеристика, СтруктураДанные.Номенклатура.Артикул));
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС") 
		И НЕ СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли;
	
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.ВидСтавкиНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки), СтруктураДанные.ДатаОбработки, ТекущаяДатаСеанса())));
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки), СтруктураДанные.ДатаОбработки, ТекущаяДатаСеанса())));
	КонецЕсли;
	
	// Характеристики
	СтруктураДанные.Вставить("ИспользоватьХарактеристики",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",Ложь);
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьХарактеристики
		Тогда
		ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура);
		
		Если Не ЗначенияПоУмолчанию = Неопределено
			Тогда
			ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
		КонецЕсли;
		
		Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика",ХарактеристикаПоУмолчанию);
		Иначе
			СтруктураДанные.Характеристика = ?(ЗначениеЗаполнено(СтруктураДанные.Характеристика), СтруктураДанные.Характеристика, ХарактеристикаПоУмолчанию);
		КонецЕсли;
		
		СтруктураДанные.Вставить("ИспользоватьХарактеристики",Истина);
		СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",СтруктураДанные.Номенклатура.ПроверятьЗаполнениеХарактеристики);
	КонецЕсли;
	// Конец Характеристики
	
	//Партии
	СтруктураДанные.Вставить("ИспользоватьПартии",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеПартий",Ложь);
	
	Если НЕ СтруктураДанные.Свойство("Партия") Тогда
		СтруктураДанные.Вставить("Партия", Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьПартии
		Тогда
		
		Если СтруктураДанные.Свойство("СтатусПартии")
			Тогда
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтруктураДанные.СтатусПартии);
		Иначе
			Если Не СтруктураДанные.Свойство("ВидОперации")
				Тогда
				ВидОперации = Неопределено
			Иначе
				ВидОперации = СтруктураДанные.ВидОперации
			КонецЕсли;
			
			СтатусПартии = НоменклатураВДокументахСервер.СоответствиеВидаОперацииИлиХозОперацииСтатусуПартии(, ВидОперации);
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтатусПартии);
		КонецЕсли;
		
		ПартияПоУмолчанию = Справочники.ПартииНоменклатуры.ПустаяСсылка();
		
		Если Не ЗначенияПартииПоУмолчанию = Неопределено
			Тогда
			ПартияПоУмолчанию = ЗначенияПартииПоУмолчанию;
		КонецЕсли;
		
		СтруктураДанные.Партия = ?(ЗначениеЗаполнено(СтруктураДанные.Партия), СтруктураДанные.Партия, ПартияПоУмолчанию);
		
		СтруктураДанные.ПроверятьЗаполнениеПартий = СтруктураДанные.Номенклатура.ПроверятьЗаполнениеПартий;
		СтруктураДанные.ИспользоватьПартии = Истина;
		
	КонецЕсли;
	// Конец Партии
	
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
	Иначе
		СтруктураДанные.Вставить("Цена", 0);
	КонецЕсли;
	
	СтруктураДанные.Вставить("МинимальнаяЦена", ЦенообразованиеСервер.ПолучитьМинимальнуюЦенуНоменклатуры(СтруктураДанные));
	
	Если СтруктураДанные.Свойство("ВидСкидкиНаценки") 
		И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки) Тогда
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки.Процент);
	Иначе
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", 0);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ПроцентСкидкиПоДисконтнойКарте") 
		И ЗначениеЗаполнено(СтруктураДанные.ДисконтнаяКарта) Тогда
		ТекПроцент = СтруктураДанные.ПроцентСкидкиНаценки;
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", ТекПроцент + СтруктураДанные.ПроцентСкидкиПоДисконтнойКарте);
	КонецЕсли;
	
	НеобходимостьВводаАкцизнойМарки = Ложь;
	НеобходимостьВводаКодаМаркировки = Ложь;
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) Тогда
		ДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураДанные.Номенклатура, "ВидПродукцииИС, ВидАлкогольнойПродукции, ПродаетсяВРозлив");
		
		Если ЗначениеЗаполнено(ДанныеНоменклатуры.ВидАлкогольнойПродукции) Тогда
			НеобходимостьВводаАкцизнойМарки = Не ДанныеНоменклатуры.ПродаетсяВРозлив
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеНоменклатуры.ВидАлкогольнойПродукции, "Маркируемый");
		КонецЕсли;
		
		Если СтруктураДанные.Свойство("ДатаОбработки") И ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки) Тогда
			ДатаПроверки = СтруктураДанные.ДатаОбработки;
		Иначе
			ДатаПроверки = ТекущаяДатаСеанса();
		КонецЕсли;
		
		НеобходимостьВводаКодаМаркировки = ИнтеграцияИСМПКлиентСерверПовтИсп.ОбязательнаяРегистрацияОборотаМаркируемойПродукции(ДанныеНоменклатуры.ВидПродукцииИС, ДатаПроверки);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("НеобходимостьВводаАкцизнойМарки", НеобходимостьВводаАкцизнойМарки);
	СтруктураДанные.Вставить("НеобходимостьВводаКодаМаркировки", НеобходимостьВводаКодаМаркировки);
	
	Если Не СтруктураДанные.Свойство("Склад") Тогда
		СтруктураДанные.Вставить("Склад", СтруктураДанные.Номенклатура.Склад);
		СтруктураДанные.Вставить("Ячейка", СтруктураДанные.Номенклатура.Ячейка);
	КонецЕсли;
	
	// Наборы
	НаборыСервер.ДобавитьИнформациюОНабореПриПолученииДанныхНоменклатуры(СтруктураДанные);
	// Конец Наборы
	
	//Партии
	СтруктураДанные.Вставить("ИспользоватьПартии",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеПартий",Ложь);
	
	Если НЕ СтруктураДанные.Свойство("Партия") Тогда
		СтруктураДанные.Вставить("Партия", Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьПартии
		Тогда
		
		Если СтруктураДанные.Свойство("СтатусПартии")
			Тогда
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтруктураДанные.СтатусПартии);
		Иначе
			Если Не СтруктураДанные.Свойство("ВидОперации")
				Тогда
				ВидОперации = Неопределено
			Иначе
				ВидОперации = СтруктураДанные.ВидОперации
			КонецЕсли;
			
			СтатусПартии = НоменклатураВДокументахСервер.СоответствиеВидаОперацииИлиХозОперацииСтатусуПартии(, ВидОперации);
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтатусПартии);
		КонецЕсли;
		
		ПартияПоУмолчанию = Справочники.ПартииНоменклатуры.ПустаяСсылка();
		
		Если Не ЗначенияПартииПоУмолчанию = Неопределено
			Тогда
			ПартияПоУмолчанию = ЗначенияПартииПоУмолчанию;
		КонецЕсли;
		
		СтруктураДанные.Партия = ?(ЗначениеЗаполнено(СтруктураДанные.Партия), СтруктураДанные.Партия, ПартияПоУмолчанию);
		
		СтруктураДанные.ПроверятьЗаполнениеПартий = СтруктураДанные.Номенклатура.ПроверятьЗаполнениеПартий;
		СтруктураДанные.ИспользоватьПартии = Истина;
		
	КонецЕсли;
	// Конец Партии
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьСерииНоменклатуры Тогда
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", СерииНоменклатурыУНФ.СтатусСерийНоменклатурыПриИзменении(СтруктураДанные));
	Иначе
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", 0);
	КонецЕсли;
	
	// Агентские платежи
	АгентскиеПлатежиУНФ.ЗаполнитьДоговорПлатежногоАгентаВСтроке(СтруктураДанные);
	
	//НСПК
	ЭлектронныеСертификатыНСПКРМКУНФ.ЗаполнитьВозможностьОплатыЭСВСтрокеНаСервере(СтруктураДанные);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Получает набор данных с сервера для процедуры ХарактеристикаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
		Иначе
			СтруктураДанные.Вставить("Коэффициент", 1);
		КонецЕсли;
		
		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("МинимальнаяЦена", ЦенообразованиеСервер.ПолучитьМинимальнуюЦенуНоменклатуры(СтруктураДанные));

	// Наборы
	НаборыСервер.ДобавитьИнформациюОНабореПриПолученииДанныхНоменклатуры(СтруктураДанные);
	// Конец Наборы
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты)
	
	ДокументыУНФ.ДатаПриИзменении(ДанныеДляИзмененияДаты, ЭтотОбъект, Объект);
	
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Подписи = Новый Структура();
	ПодписьДокументовУНФ.ДополнитьПодписямиОрганизации(Подписи, Объект);
	Объект.ПодписьРуководителя = Подписи.ПодписьРуководителя;
	
	УстановитьНастройкиУчетаВНалогообложении();
	ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов();
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	УстановитьНастройкиУчетаВНалогообложении();
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры ЕдиницаИзмеренияПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура();
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()

// Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(
		Объект.СуммаВключаетНДС,
		СтрокаТабличнойЧасти.Сумма
	  - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
	  СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // РассчитатьСуммуНДС()

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	СуммаПередРасчетом = СтрокаТабличнойЧасти.Сумма;
	
	Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
		СтрокаТабличнойЧасти.Сумма = 0;
	ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0
		    И СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма * (1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	СтрокаТабличнойЧасти.СуммаСкидки = СуммаПередРасчетом - СтрокаТабличнойЧасти.Сумма;
	
	// АвтоматическиеСкидки.
	ТребуетсяПересчет = СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти");
	
	СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки = 0;
	СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = 0;
	СтрокаТабличнойЧасти.ОбщаяСуммаСкидкиБольшеСуммы = Ложь;
	
	// Если была изменена картинка, то фокус уходит из ТЧ и процедура ПересчитатьДокументНаКлиенте() не вызывается.
	Если ТребуетсяПересчет Тогда
		ПересчитатьДокументНаКлиенте();
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	// Серии номенклатуры
	Если ИспользоватьСерииНоменклатурыОстатки<>Неопределено Тогда
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСерииНоменклатурыКоличество(Объект, СтрокаТабличнойЧасти);
	КонецЕсли;

КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

// Процедура рассчитывает % скидки в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьПроцентСкидки(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена < СтрокаТабличнойЧасти.СуммаСкидки Тогда
		СтрокаТабличнойЧасти.СуммаСкидки = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена - СтрокаТабличнойЧасти.СуммаСкидки;
	Если СтрокаТабличнойЧасти.Цена <> 0
	   И СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = (1 - СтрокаТабличнойЧасти.Сумма / (СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество)) * 100;
	Иначе
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;
	КонецЕсли;
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // РассчитатьПроцентСкидки()

&НаСервере
Функция ПоляКИДляОтправкиЧека()
	
	ПоляКИ = Новый Соответствие;
	ПоляКИ.Вставить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Элементы.АдресЭП.Имя);
	ПоляКИ.Вставить(Перечисления.ТипыКонтактнойИнформации.Телефон, Элементы.Телефон.Имя);
	
	Возврат ПоляКИ;
	
КонецФункции

&НаСервере
Процедура ПолучитьСсылкуНаЭквайринговыйТерминал(ТерминалСтроки, ОплатаОтменена)
	
	ЭквайринговыйТерминал = ?(
	ЗначениеЗаполнено(ТерминалСтроки) И ЗначениеЗаполнено(ТерминалСтроки.ПодключаемоеОборудование),
	ТерминалСтроки.ПодключаемоеОборудование,
	Справочники.ПодключаемоеОборудование.ПустаяСсылка());
	
	Элементы.ОплатаПлатежнымиКартамиОтменитьОплату.Доступность = Не ОплатаОтменена
		И (ЗначениеЗаполнено(ЭквайринговыйТерминал) ИЛИ ПлатежнаяСистема_ВозможенВозврат);
	
КонецПроцедуры

&НаСервере
Функция ОпределитьТипТранзакцииОплаты(СсылочныйНомер, СуммаОперации)
	
	ТипТранзакции = "";
	
	Если Не ЗначениеЗаполнено(Объект.ЧекККМ) Тогда
		ТипТранзакции = "AuthorizeRefund";
	ИначеЕсли Объект.ЧекККМ.КассоваяСмена = Объект.КассоваяСмена Тогда
		ПараметрыОтбора = Новый Структура("СсылочныйНомер, Сумма", СсылочныйНомер, СуммаОперации);
		МассивСтрок = Объект.ЧекККМ.БезналичнаяОплата.НайтиСтроки(ПараметрыОтбора);
		Если МассивСтрок.Количество() Тогда
			ТипТранзакции = "AuthorizeVoid";
		Иначе
			ТипТранзакции = "AuthorizeRefund";
		КонецЕсли;
	Иначе
		ТипТранзакции = "AuthorizeRefund";
	КонецЕсли;
	
	Возврат ТипТранзакции;
	
КонецФункции

&НаСервере
Процедура УстановитьНастройкиУчетаВНалогообложении()
	
	Объект.СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Объект.Организация, Объект.СтруктурнаяЕдиница, Объект.Дата);
	Если Объект.СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.ПСН Тогда
		ЗаполнитьПатент();		
	КонецЕсли;
    ОбновитьЦеныИВалютуНаСервере();		

	ДоступноПробитиеАвтономнаяККМ = Объект.КассаККМ.ТипКассы = Перечисления.ТипыКассККМ.АвтономнаяККМ
		И ПодключаемоеОборудованиеУНФ.ЕстьККТСАвтоматическойФискализацией(Объект.Организация);
	
КонецПроцедуры

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь)
	
	ПараметрыФормыЦеныИВалюта = ЦеныИВалютаКлиентСервер.НовыеПараметрыФормыЦеныИВалюта(Объект, ТолькоПросмотр,
		Компания, Ложь, ПересчитатьЦены);
	ПараметрыФормыЦеныИВалюта.ЗапретитьИзменениеВалюты = Истина;
	
	ЦенообразованиеКлиент.ДополнитьСтруктуруВызоваФормыЦеныИВалютыСтруктурнойЕдиницей(Объект, Объект.Запасы,
		Элементы.Запасы.ТекущиеДанные, ПараметрыФормыЦеныИВалюта);

	Если Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") 
		И Элементы.ЗапасыПартия.Видимость Тогда
		РаботаСНоменклатуройКлиентУНФ.ДополнитьСтруктуруВызоваФормыЦеныИВалютыМассивомПартийНоменклатуры(Объект.Запасы, ПараметрыФормыЦеныИВалюта);
	КонецЕсли;
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуЦеныИВалютаЗавершение", ЭтотОбъект,
		Новый Структура("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением));
	ОткрытьФорму("ОбщаяФорма.ЦеныИВалюта", ПараметрыФормыЦеныИВалюта, ЭтотОбъект, , , , ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

// Процедура-обработчик результата открытия формы "Цены и валюты"
//
&НаКлиенте
Процедура ОткрытьФормуЦеныИВалютаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РезультатЗакрытия.БылиВнесеныИзменения Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Объект.ВидЦен = РезультатЗакрытия.ВидЦен;
	Объект.НалогообложениеНДС = РезультатЗакрытия.НалогообложениеНДС;
	Если НЕ Объект.СпециальныйНалоговыйРежим = РезультатЗакрытия.СпециальныйНалоговыйРежим
		И РезультатЗакрытия.СпециальныйНалоговыйРежим = ПредопределенноеЗначение("Перечисление.СпециальныеНалоговыеРежимы.ПСН") Тогда
		Объект.Патент = ПолучитьПатент(Объект.Организация, Объект.СтруктурнаяЕдиница, Объект.Дата);
	ИначеЕсли НЕ РезультатЗакрытия.СпециальныйНалоговыйРежим = ПредопределенноеЗначение("Перечисление.СпециальныеНалоговыеРежимы.ПСН") Тогда
		Объект.Патент = ПредопределенноеЗначение("Справочник.Патенты.ПустаяСсылка");
	КонецЕсли;
	Объект.СпециальныйНалоговыйРежим = РезультатЗакрытия.СпециальныйНалоговыйРежим;
	Объект.СуммаВключаетНДС = РезультатЗакрытия.СуммаВключаетНДС;
	Объект.НДСВключатьВСтоимость = РезультатЗакрытия.НДСВключатьВСтоимость;

	
	// Пересчитываем сумму если изменился признак Налогообложение НДС.
	Если РезультатЗакрытия.НалогообложениеНДС <> РезультатЗакрытия.ПредНалогообложениеНДС Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		ЗаполнитьСуммыСкидок();
	КонецЕсли;
	
	// Пересчитываем сумму если изменился признак "Сумма включает НДС".
	Если НЕ РезультатЗакрытия.ПерезаполнитьЦены
		И НЕ РезультатЗакрытия.СуммаВключаетНДС = РезультатЗакрытия.ПредСуммаВключаетНДС Тогда
		ЦенообразованиеКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтотОбъект, "Запасы");
		ЗаполнитьСуммыСкидок();
	КонецЕсли;
	
	// АвтоматическиеСкидки
	Если РезультатЗакрытия.ПерезаполнитьСкидки ИЛИ РезультатЗакрытия.ПерезаполнитьЦены ИЛИ РезультатЗакрытия.ПересчитатьЦены Тогда
		СброситьФлагСкидкиРассчитаныКлиент("ПерезаполнениеПоДаннымФормыЦеныИВалюта");
	КонецЕсли;
	
	// Сформируем надпись цены и валюты.
	ОбновитьЦеныИВалюту();
	
	// Обновим подвал документа
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры // ОткрытьФормуЦеныИВалютаЗавершение()

&НаСервереБезКонтекста
Функция ДанныеДляФормированияНадписиЦеныИВалюта(пВалютаДокумента, пДата)
	
	СтруктураДляВозврата = Новый Структура();
	
	СтруктураДляВозврата.Вставить("УчетВалютныхОпераций", Константы.ФункциональнаяУчетВалютныхОпераций.Получить());
	
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(пДата, Новый Структура("Валюта", пВалютаДокумента));
	Курс = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Курс);
	СтруктураДляВозврата.Вставить("КурсВалютаДокумента", Курс);
	
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	Если пВалютаДокумента = НациональнаяВалюта Тогда
		СтруктураДляВозврата.Вставить("КурсНациональнаяВалюта", Курс);
	Иначе
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(пДата, Новый Структура("Валюта", НациональнаяВалюта));
		СтруктураДляВозврата.Вставить("КурсНациональнаяВалюта", СтруктураПоВалюте.Курс);
	КонецЕсли;
	
	Возврат СтруктураДляВозврата;
	
КонецФункции

// Заполняет суммы скидок на клиенте.
//
&НаКлиенте
Процедура ЗаполнитьСуммыСкидок()
	
	Для каждого ТекСтрока Из Объект.Запасы Цикл
		РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКомиссиюЭквайрераПоСтроке(ИдентификаторСтроки)
	
	СтрокаОплаты = Объект.БезналичнаяОплата.НайтиПоИдентификатору(ИдентификаторСтроки);
	Терминал = СтрокаОплаты.ЭквайринговыйТерминал;
	
	Если Не ЗначениеЗаполнено(Терминал) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаКомиссий = Терминал.ВидыПлатежныхКарт.Найти(СтрокаОплаты.ВидПлатежнойКарты, "ВидПлатежнойКарты");
	Если СтрокаКомиссий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.КассоваяСмена = Объект.ЧекККМ.КассоваяСмена Тогда
		СтрокаОплаты.СуммаКомиссии = СтрокаОплаты.Сумма * СтрокаКомиссий.ПроцентКомиссииПриОтмене/100;
	Иначе
		СтрокаОплаты.СуммаКомиссии = СтрокаОплаты.Сумма * СтрокаКомиссий.ПроцентКомиссииПриВозврате/100;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплатуЗавершение(Результат, Параметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		
		Если ТакойСертификатУжеЕсть(Результат) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'В таблице оплат уже есть такой сертификат. Повторное добавление невозможно'"));
			Возврат;
		КонецЕсли;
		
		ДобавитьСтрокуОплаты(Результат);
		
	КонецЕсли;
	
	Если Не Объект.ОперацияСДенежнымиСредствами Тогда
		ПересчитатьДокументНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуОплаты(ДанныеСтроки)
	
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки 
		И ДанныеСтроки.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.БанковскаяКарта") Тогда
		
		СуммыПоДоговорамПлатежныхАгентов = Объект.Запасы.Выгрузить();
		СуммыПоДоговорамПлатежныхАгентов.Свернуть("ДоговорПлатежногоАгента", "Всего");
		СуммыПоДоговорамПлатежныхАгентов.Сортировать("ДоговорПлатежногоАгента");
		
		Если СуммыПоДоговорамПлатежныхАгентов.Количество() = 1 Тогда
			
			ДанныеСтроки.Вставить("ДоговорПлатежногоАгента", СуммыПоДоговорамПлатежныхАгентов[0].ДоговорПлатежногоАгента);
			
		ИначеЕсли СуммыПоДоговорамПлатежныхАгентов.Количество() > 1 Тогда
			
			ОплаченоНаличнымиОстаток = Объект.Сумма - ДанныеСтроки.Сумма;
			ОплаченоБезналичнымиОстаток = ДанныеСтроки.Сумма;
			
			Для каждого СтрокаСуммы Из СуммыПоДоговорамПлатежныхАгентов Цикл
				
				Если СтрокаСуммы.Всего >= ОплаченоНаличнымиОстаток Тогда
					СтрокаСуммы.Всего = СтрокаСуммы.Всего - ОплаченоНаличнымиОстаток;
				Иначе
					СтрокаСуммы.Всего = 0;
				КонецЕсли;
				
				Если СтрокаСуммы.Всего = 0 Тогда
					Продолжить;
				Иначе
					
					ДанныеСтроки.Вставить("ДоговорПлатежногоАгента", СтрокаСуммы.ДоговорПлатежногоАгента);
					
					СтрокаОплаты = Объект.БезналичнаяОплата.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаОплаты, ДанныеСтроки);
					СтрокаОплаты.Сумма = ОплаченоБезналичнымиОстаток;
					
					Если СтрокаСуммы.Всего >= ОплаченоБезналичнымиОстаток Тогда
						Прервать;
					Иначе
						СтрокаОплаты.Сумма = СтрокаСуммы.Всего;
						ОплаченоБезналичнымиОстаток = ОплаченоБезналичнымиОстаток - СтрокаСуммы.Всего;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Записать();
			РозничныеПродажиСервер.ЗаполнитьОписаниеОплаты(СтрокаОплаты);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаОплаты = Объект.БезналичнаяОплата.Добавить();
	
	ЗаполнитьЗначенияСвойств(СтрокаОплаты, ДанныеСтроки);
	Если СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.БанковскаяКарта") Тогда
		Записать();
	ИначеЕсли СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.СБП") Тогда
		
		СтрокаОплаты.ОплатаОтменена = Истина;
		
		Записать();
	КонецЕсли;
	
	РозничныеПродажиСервер.ЗаполнитьОписаниеОплаты(СтрокаОплаты);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьОплатуЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(Элементы.БезналичнаяОплата.ТекущиеДанные, Результат);
		
		ПересчитатьДокументНаКлиенте();
		
	ИначеЕсли Результат = "Удалить строку" Тогда
		
		Объект.БезналичнаяОплата.Удалить(Элементы.БезналичнаяОплата.ТекущаяСтрока);
		Записать();
		ПересчитатьДокументНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеПоОперацииСДС()
	
	Если Объект.ОперацияСДенежнымиСредствами Тогда
		
		Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ТекстОшибки = НСтр("ru='Необходимо указать контрагента'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,, "Объект.Контрагент");
			Возврат Ложь;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Договор) Тогда
			ТекстОшибки = НСтр("ru='Необходимо указать договор контрагента'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,, "Объект.Договор");
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура УправлениеЭлементамиИОплатойПриИзмененииОперацииСДС(ОткрытиеФормы = Ложь)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Запасы", "АвтоОтметкаНезаполненного", Не Объект.ОперацияСДенежнымиСредствами);
	Если Не ЗначениеЗаполнено(Объект.ЧекККМ) Тогда
		// Если возврат вводится на основании, то эти поля не просто недоступны - они имеют вид "ПолеНадписи"
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Контрагент", "АвтоОтметкаНезаполненного", Объект.ОперацияСДенежнымиСредствами);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Договор", "АвтоОтметкаНезаполненного", Объект.ОперацияСДенежнымиСредствами);
	КонецЕсли;
	
	// Итог по документу
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммаДокумента", "ТолькоПросмотр", Не Объект.ОперацияСДенежнымиСредствами);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыИтогВсего", "Видимость", Объект.ОперацияСДенежнымиСредствами);
	Шрифт = Новый Шрифт(, ?(Объект.ОперацияСДенежнымиСредствами, 10, 20), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммаДокумента", "Шрифт", Шрифт);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СуммаДокумента",
		"Заголовок",
		?(Объект.ОперацияСДенежнымиСредствами, НСтр("ru = 'Сумма чека'"), НСтр("ru = 'Всего'")));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СуммаДокумента",
		"КнопкаВыпадающегоСписка",
		?(Объект.ОперацияСДенежнымиСредствами, Истина, Неопределено));
	
	Если Объект.ОперацияСДенежнымиСредствами Тогда
		УдалитьОплатуНедоступныхВидов();
	КонецЕсли;
	
	Если Объект.ОперацияСДенежнымиСредствами Тогда
		Объект.Предоплата.Очистить();
		ЭтаФорма.ТекущийЭлемент = Элементы.СуммаДокумента;
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОплатуНедоступныхВидов()
	
	Для Индекс = 1 - Объект.БезналичнаяОплата.Количество() По 0 Цикл
		Строка = Объект.БезналичнаяОплата.Получить(-Индекс);
		Если Строка.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.Бонусы")
			ИЛИ Строка.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.Кредит") Тогда
			Объект.БезналичнаяОплата.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из Объект.Запасы Цикл
		Строка.СуммаСкидкиОплатыБонусом = 0;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Проверяет дубли сертификата в таблице оплат
//
// Параметры:
//  ПараметрыСтрокиОплаты - Структура - результат работы формы добавления оплаты (см. ДобавитьОплату)
//
// Возвращаемое значение
//  Булево - Истина, если в таблице уже есть такой сертификат
//
Функция ТакойСертификатУжеЕсть(ПараметрыСтрокиОплаты)
	
	Если ПараметрыСтрокиОплаты.ВидОплаты <> ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыСтрокиОплаты.НомерСертификата) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураПоиска = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыСтрокиОплаты);
	Если СтруктураПоиска.Свойство("Сумма") Тогда
		СтруктураПоиска.Удалить("Сумма");
	КонецЕсли;
	Если СтруктураПоиска.Свойство("СуммаПогашенияСертификата") Тогда
		СтруктураПоиска.Удалить("СуммаПогашенияСертификата");
	КонецЕсли;
	
	Если Объект.БезналичнаяОплата.НайтиСтроки(СтруктураПоиска).Количество() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Функция получает список товаров из временного хранилища
//
&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	НоваяСтрока = Неопределено;
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
		Если ЗначениеЗаполнено(СтрокаЗагрузки.Номенклатура) Тогда
			
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаЗагрузки.Номенклатура, "ТипНоменклатуры, Вес, Объем, ЭтоНабор, СпособРасчетаЦеныНабора");
			
			Если ИмяТабличнойЧасти="Запасы" Тогда
				ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Ответственный", "ПоложениеОтветственный");			
			КонецЕсли; 
			
			СтруктураДанныеНоменклатуры = Новый Структура();
			СтруктураДанныеНоменклатуры.Вставить("Номенклатура", СтрокаЗагрузки.Номенклатура);
			СтруктураДанныеНоменклатуры.Вставить("Характеристика", СтрокаЗагрузки.Характеристика);
			
			СтатусПартии = Новый СписокЗначений;
			СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
			СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
			
			СтруктураДанныеНоменклатуры.Вставить("СтатусПартии", СтатусПартии);
			СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
			СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ЗначенияРеквизитов.ТипНоменклатуры);
			СтруктураДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", СтрокаЗагрузки.ЕдиницаИзмерения);
			СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
			СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
			
			Если ЗначенияРеквизитов.ЭтоНабор Тогда
				
				// Наборы
				Если ЗначениеЗаполнено(НоваяСтрока.Цена) 
					И ЗначенияРеквизитов.СпособРасчетаЦеныНабора <> Перечисления.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих Тогда
					СтруктураДанныеНоменклатуры.Вставить("Цена", НоваяСтрока.Цена);
				КонецЕсли;
				Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
					СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
					СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
					СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
					СтруктураДанныеНоменклатуры.Вставить("ВидЦен", Объект.ВидЦен);
					СтруктураДанныеНоменклатуры.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
				КонецЕсли;
				
				// ДисконтныеКарты
				СтруктураДанныеНоменклатуры.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
				СтруктураДанныеНоменклатуры.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
				// Конец ДисконтныеКарты
				
				ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, НоваяСтрока, СтруктураДанныеНоменклатуры);
				
				СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
				Если СтруктураДанные.Свойство("Склад") Тогда
					Если СписокДоступныхСкладов.НайтиПоЗначению(СтруктураДанные.Склад) = Неопределено Тогда
						СтруктураДанные.Склад = Объект.СтруктурнаяЕдиница;
						СтруктураДанные.Ячейка = ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка");
					КонецЕсли;
				КонецЕсли;
				СтруктураДанные.Вставить("СписокДоступныхСкладов", СписокДоступныхСкладов);
				
				ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, НоваяСтрока, СтруктураДанные);
				
				ЗаполнитьПризнакиИспользованияХарактеристик();
				
				Продолжить;
				// Конец Наборы
				
			Иначе
				
				НоваяСтрока.ТипНоменклатурыЗапас = (ЗначенияРеквизитов.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"))
												ИЛИ (ЗначенияРеквизитов.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
				
				Если НоваяСтрока.НеобходимостьВводаАкцизнойМарки
					И ЗначениеЗаполнено(СтрокаЗагрузки.КодАкцизнойМарки) Тогда
					ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект[ИмяТабличнойЧасти], НоваяСтрока, "КлючСвязи");
					
					СтрокаАкцизнаяМарка = Объект.АкцизныеМарки.Добавить();
					СтрокаАкцизнаяМарка.КлючСвязи = НоваяСтрока.КлючСвязи;
					СтрокаАкцизнаяМарка.КодАкцизнойМарки = СтрокаЗагрузки.КодАкцизнойМарки;
					
					Если НЕ ЗначениеЗаполнено(СтрокаАкцизнаяМарка.АкцизнаяМарка) Тогда
						СтрокаАкцизнаяМарка.АкцизнаяМарка = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода", СтрокаАкцизнаяМарка.КодАкцизнойМарки);
					КонецЕсли;
					
					НоваяСтрока.СтатусПроверкиГосИС = ?(ЗначениеЗаполнено(СтрокаАкцизнаяМарка.КодАкцизнойМарки), 1, 2);
				КонецЕсли;
				
				НоваяСтрока.СуммаСкидкиНаценки = (НоваяСтрока.Количество * НоваяСтрока.Цена) - НоваяСтрока.Сумма - НоваяСтрока.СуммаАвтоматическойСкидки;
				
				ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, НоваяСтрока, СтруктураДанныеНоменклатуры);

				СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанныеНоменклатуры);
				СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
				
				Если НоваяСтрока.Свойство("СтруктурнаяЕдиница") Тогда
					Если СписокДоступныхСкладов.НайтиПоЗначению(НоваяСтрока.СтруктурнаяЕдиница) = Неопределено Тогда
						НоваяСтрока.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
						НоваяСтрока.Ячейка = ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка");
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			// Характеристики
			НоваяСтрока.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
			НоваяСтрока.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
			НоваяСтрока.ЗаполнениеХарактеристикиПроверено = Истина;
			
			Если СтруктураДанные.ИспользоватьХарактеристики
				Тогда
				НоваяСтрока.Характеристика = СтруктураДанные.Характеристика;
			КонецЕсли;
			// Конец Характеристики
			
			//Партии
			НоваяСтрока.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
			НоваяСтрока.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
			
			НоваяСтрока.Партия = ?(ЗначениеЗаполнено(СтрокаЗагрузки.Партия), СтрокаЗагрузки.Партия, СтруктураДанные.Партия);
			// Конец Партии
			
			НоваяСтрока.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
			ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект[ИмяТабличнойЧасти], НоваяСтрока, "КлючСвязи");
			
			// Агентские платежи
			Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
				НоваяСтрока.ДоговорПлатежногоАгента = СтруктураДанные.ДоговорКонтрагента;
				НоваяСтрока.ДанныеАгентскогоДоговора = СтруктураДанные.ДанныеАгентскогоДоговора;
				АгентскиеПлатежиУНФКлиентСервер.ВыделитьАгентскоеВознаграждениеВТаблице(Объект, НоваяСтрока);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы");
	
	Если НоваяСтрока <> Неопределено Тогда
		Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	//Ячейки
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	// Конец Ячейки
	
	// ИнтеграцияГосИС
	СобытияФормИСУНФ.ПриИзмененииЭлемента(ЭтотОбъект, "ТабличнаяЧасть", Новый Структура("ТребуетсяЗаполнениеСлужебныхРеквизитов"));
	// Конец ИнтеграцияГосИС
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

&НаСервере
Процедура ЗаполнитьПоляКИДляОтправкиЧекаПоУмолчанию(ДанныеКИ)
	
	Если ДанныеКИ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.АдресЭП = ДанныеКИ.Получить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Объект.Телефон = ДанныеКИ.Получить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	Объект.КонтактноеЛицоПодписант = Объект.Контрагент.КонтактноеЛицоПодписант;
	
	Если НеПечататьБумажныйЧек Тогда
		ЗаполнитьКонтактнуюИнформациюДляЧека();
	КонецЕсли;
	
	Объект.Договор = Справочники.ДоговорыКонтрагентов.ПоДокументуКонтрагентуОрганизацииИВидуОперации(Объект.Ссылка,
		Объект.Контрагент, Объект.Организация);
	
	УстановитьВидимостьДоговора();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеДоговораДляИзменения(Знач Дата, Знач Договор, Знач Контрагент)

	Результат = Новый Структура;
	Результат.Вставить("ВалютаРасчетов", Договор.ВалютаРасчетов);
	ОтборВалюта = Новый Структура("Валюта", Договор.ВалютаРасчетов);
	ВалютаРасчетовКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, ОтборВалюта);
	Результат.Вставить("ВалютаРасчетовКурсКратность", ВалютаРасчетовКурсКратность);
	Результат.Вставить("ВидЦен", Договор.ВидЦен);
	Результат.Вставить("ВидСкидкиНаценки", Договор.ВидСкидкиНаценки);
	Результат.Вставить("РасчетыВУсловныхЕдиницах", Договор.РасчетыВУсловныхЕдиницах);
	Результат.Вставить("СуммаВключаетНДС", Неопределено);
	Если ЗначениеЗаполнено(Договор.ВидЦен) Тогда
		Результат.СуммаВключаетНДС = Договор.ВидЦен.ЦенаВключаетНДС;
	КонецЕсли;
	Результат.Вставить("ОснованиеПечатиЗаказПокупателя", Константы.ОснованиеПечатиЗаказПокупателя.Получить());
	СпособЗачетаПредоплаты = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляДоговора(Договор, Контрагент,
		Истина);
	Результат.Вставить("СпособЗачетаПредоплаты", СпособЗачетаПредоплаты);
	Возврат Результат;

КонецФункции

&НаСервере
Процедура УстановитьВидимостьДоговора()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ВестиРасчетыПоДоговорам = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ВестиРасчетыПоДоговорам");
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Договор",
			"Видимость",
			ВестиРасчетыПоДоговорам);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Договор",
			"Видимость",
			Ложь);
		
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ПересчитатьДокументНаСервере() 
	
	ПримененныеСкидки = РассчитатьСкидкиНаценкиПоДокументуОснованиюСервер();
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	ОбновитьТаблицуБезналичныхОплат();  
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПовторнуюПечатьФискальногоЧека(РезультатВыполнения, ПараметрДействия) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РезультатВыполнения, "Результат") И НЕ РезультатВыполнения.Результат Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Произошла ошибка при попытке повторной печати фискального чека.
			|Причина: %1'"), РезультатВыполнения.ОписаниеОшибки);
		ПоказатьПредупреждение(, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтактнуюИнформациюДляЧека()
	
	ДанныеКИКонтрагента = Справочники.Контрагенты.ДанныеКИКонтрагентаДляВыбораНаФорме(Объект.Контрагент, Элементы,
		ПоляКИДляОтправкиЧека());
	ЗаполнитьПоляКИДляОтправкиЧекаПоУмолчанию(ДанныеКИКонтрагента)
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПатент()
	
	Объект.Патент = ПолучитьПатент(Объект.Организация, Объект.СтруктурнаяЕдиница, Объект.Дата);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПатент(Организация,СтруктурнаяЕдиница, Дата)
	
	Результат = НалогиУНФ.ПатентПоСкладу(Организация, СтруктурнаяЕдиница, Дата);
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = Справочники.Патенты.ПолучитьПатентПоУмолчанию(Организация, Дата);
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаСервере
Процедура УстановитьВидимостьПатента()
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда
		Элементы.Патент.Видимость = Ложь;
	Иначе
		СистемаНалогообложенияСтруктура = РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(Объект.Организация, Объект.Дата);
		Если СистемаНалогообложенияСтруктура.ПрименяетсяПатент Тогда
			Элементы.Патент.Видимость = Истина;
		Иначе
			Элементы.Патент.Видимость = Ложь;
		КонецЕсли;
		// Если только патент и он только один, подставим его
		Если СистемаНалогообложенияСтруктура.СистемаНалогообложения = Перечисления.СистемыНалогообложения.ОсобыйПорядок
			И СистемаНалогообложенияСтруктура.ПрименяетсяПатент 
			И Элементы.Патент.Видимость
			И Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
				ЗаполнитьПатент();
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыВСтрокахТабличнойЧастиПоВидуМаркируемойПродукции(ВидМаркируемойПродукции)
	
	Для Каждого Строка Из Объект.Запасы Цикл
		
		Если Строка.ВидПродукцииИС = ВидМаркируемойПродукции Тогда
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЦеныИВалюту()
	ДанныеДляНадписиЦеныИВалюта = ДанныеДляФормированияНадписиЦеныИВалюта(Объект.ВалютаДокумента, Объект.Дата);
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, Объект.ВалютаДокумента,
		ДанныеДляНадписиЦеныИВалюта.КурсНациональнаяВалюта, ДанныеДляНадписиЦеныИВалюта.УчетВалютныхОпераций);
КонецПроцедуры 
	
&НаСервере
Процедура ОбновитьЦеныИВалютуНаСервере()
	ДанныеДляНадписиЦеныИВалюта = ДанныеДляФормированияНадписиЦеныИВалюта(Объект.ВалютаДокумента, Объект.Дата);
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, Объект.ВалютаДокумента,
		ДанныеДляНадписиЦеныИВалюта.КурсНациональнаяВалюта, ДанныеДляНадписиЦеныИВалюта.УчетВалютныхОпераций);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНалоговыйСпецРежим()
	НовыйСпециальныйНалоговыйРежим = ПолучитьЗначениеСпецРежима(Объект.Патент, Объект.СпециальныйНалоговыйРежим);
	Если НЕ Объект.СпециальныйНалоговыйРежим = НовыйСпециальныйНалоговыйРежим Тогда
		Объект.СпециальныйНалоговыйРежим = НовыйСпециальныйНалоговыйРежим;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЗначениеСпецРежима(Патент, СпециальныйНалоговыйРежим)
	
	НовыйСпециальныйНалоговыйРежим = СпециальныйНалоговыйРежим; 
	Если ЗначениеЗаполнено(Патент) Тогда
		НовыйСпециальныйНалоговыйРежим = ПредопределенноеЗначение("Перечисление.СпециальныеНалоговыеРежимы.ПСН");
	Иначе
		Если СпециальныйНалоговыйРежим = ПредопределенноеЗначение("Перечисление.СпециальныеНалоговыеРежимы.ПСН") Тогда
			НовыйСпециальныйНалоговыйРежим = ПредопределенноеЗначение("Перечисление.СпециальныеНалоговыеРежимы.НеПрименяется");
		КонецЕсли;
	КонецЕсли;
	
	Возврат НовыйСпециальныйНалоговыйРежим;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРеквизитыПечати()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзмененияРеквизитовПечати", ЭтотОбъект);
	ОткрытьФорму("Обработка.РеквизитыПечати.Форма.РеквизитыПечатиЧекККМВозврат", Новый Структура("КонтекстПечати",
		Объект), ЭтотОбъект, , , , ОписаниеОповещения);
		
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьПодписьКассира()
	
	Подпись = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ПодписьКассира", Объект.Организация);
	
	Если ЗначениеЗаполнено(Подпись) Тогда
		Объект.ПодписьКассира = Подпись
	Иначе
		Объект.ПодписьКассира = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Подразделение, "ПодписьМОЛ");
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНастройкиИзмененияКоличества()
	
	НастройкиКоличества = ДокументыУНФКлиентСервер.ПараметрыСбросаКоличества();
	ДокументыУНФ.ЗаполнитьНастройкиКоличества(НастройкиКоличества);
	Возврат НастройкиКоличества;
	
КонецФункции

#Область ИнтеграцияГосИС

&НаКлиенте
Процедура ОповещениеПриОкончанииРедактированияТабличнойЧастиИС(Результат, ДополнительныеПараметры) Экспорт
	ПриОкончанииРедактированияТабличнойЧастиИСНаСервере(ДополнительныеПараметры);
КонецПроцедуры

&НаСервере
Процедура ПриОкончанииРедактированияТабличнойЧастиИСНаСервере(ДополнительныеПараметры)
	СобытияФормИСУНФ.ПриИзмененииЭлемента(ЭтотОбъект, "ТабличнаяЧасть", ДополнительныеПараметры);
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник)

	ДополнительныеПараметры = Новый Структура("ИмяСобытия, Параметр, Источник", ИмяСобытия, Параметр, Источник);
	СобытияФормИСУНФ.ПриИзмененииЭлемента(ЭтотОбъект, "Событие", ДополнительныеПараметры);

КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормИСУНФКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

// Процедура пересчитывает документ на клиенте.
//
&НаКлиенте
Процедура СформироватьПодсказкиКРеквизитам()
	
	ЗаголовокСуммаЧека = НСтр("ru='Сумма возврата (%Валюта%)'");
	ЗаголовокСуммаЧека = СтрЗаменить(ЗаголовокСуммаЧека, "%Валюта%", Объект.ВалютаДокумента);
	Элементы.СуммаДокумента.Подсказка = ЗаголовокСуммаЧека;
	
	ЗаголовокПолученоНаличными = НСтр("ru='Возвращено наличными (%Валюта%)'");
	ЗаголовокПолученоНаличными = СтрЗаменить(ЗаголовокПолученоНаличными, "%Валюта%", Объект.ВалютаДокумента);
	Элементы.ПолученоНаличными.Подсказка = ЗаголовокПолученоНаличными;
	
	ЗаголовокОплатаПлатежнымиКартами = НСтр("ru='Безналичный возврат (%Валюта%)'");
	ЗаголовокОплатаПлатежнымиКартами = СтрЗаменить(ЗаголовокОплатаПлатежнымиКартами, "%Валюта%", Объект.ВалютаДокумента);
	Элементы.ОплатаПлатежнымиКартамиИтогСумма.Подсказка = ЗаголовокОплатаПлатежнымиКартами;
	
	Если Объект.ОперацияСДенежнымиСредствами И ИспользоватьРассрочкуПлатежа Тогда
		ЗаголовокЗачтенаПредоплата = НСтр("ru='Отмена зачета рассрочки (%Валюта%)'");
	Иначе
		ЗаголовокЗачтенаПредоплата = НСтр("ru='Отмена зачета предоплаты (%Валюта%)'");
	КонецЕсли;
	
	ЗаголовокЗачтенаПредоплата = СтрЗаменить(ЗаголовокЗачтенаПредоплата, "%Валюта%", Объект.ВалютаДокумента);
	Элементы.ПредоплатаИтогСуммаПлатежа.Подсказка = ЗаголовокЗачтенаПредоплата;
	
	ЗаголовокСуммаСдачи = НСтр("ru='Сдача (%Валюта%)'");
	ЗаголовокСуммаСдачи = СтрЗаменить(ЗаголовокСуммаСдачи, "%Валюта%", Объект.ВалютаДокумента);
	Элементы.СуммаСдачи.Подсказка = ЗаголовокСуммаСдачи;
	
	ЗаголовокСуммаТоваров = НСтр("ru='Сумма товаров (%Валюта%)'");
	ЗаголовокСуммаТоваров = СтрЗаменить(ЗаголовокСуммаТоваров, "%Валюта%", Объект.ВалютаДокумента);
	Элементы.ЗапасыИтогВсего.Подсказка = ЗаголовокСуммаТоваров;
	
КонецПроцедуры // ПересчитатьДокументНаКлиенте()

&НаСервере
Процедура ОбновитьТипНоменклатурыЗапас()
	
	Если НЕ КэшЗначений.Свойство("ТипНоменклатурыЗапас") Тогда
		КэшЗначений.Вставить("ТипНоменклатурыЗапас", Новый Соответствие);
	КонецЕсли;
	
	Кешировать = Новый Массив;
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		Если КэшЗначений.ТипНоменклатурыЗапас.Получить(СтрокаТабличнойЧасти.Номенклатура) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Кешировать.Добавить(СтрокаТабличнойЧасти.Номенклатура);
	КонецЦикла;
	
	Если Кешировать.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Кешировать", Кешировать);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)) КАК ТипНоменклатурыЗапас
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&Кешировать)";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			КэшЗначений.ТипНоменклатурыЗапас.Вставить(Выборка.Номенклатура, Выборка.ТипНоменклатурыЗапас);	
		КонецЦикла;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТабличнойЧасти.ТипНоменклатурыЗапас = КэшЗначений.ТипНоменклатурыЗапас.Получить(СтрокаТабличнойЧасти.Номенклатура);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область УправлениеВнешнимВидомФормы

// Процедура устанавливает режим Только просмотр.
//
&НаСервере
Процедура УстановитьРежимТолькоПросмотр()
	
	ТолькоПросмотр = Истина; // Чек пробит. Изменение информации запрещено.
	Элементы.ПробитьЧек.Доступность = Ложь;
	Элементы.ОплатаПлатежнымиКартамиОтменитьОплату.Доступность = Ложь;
	Элементы.ТелефонАдресЭП.Доступность = Ложь;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПовторнаяПечатьЧека", "Доступность", Истина);
	
КонецПроцедуры // УстановитьРежимТолькоПросмотр()

// Процедура устанавливает видимость элементов формы.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьВидимостьОтПользовательскихНастроек()
	
	ЗначениеВидимости = (Объект.ПоложениеЗаказаПокупателя = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке"));
	
	Элементы.Заказ.Видимость 		= ЗначениеВидимости;
	Элементы.ЗапасыЗаказ.Видимость	= НЕ ЗначениеВидимости;
	
	ЗначениеВидимостиОтветственного = (Объект.ПоложениеОтветственный = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке"));
	
	Элементы.Ответственный.Видимость 		= ЗначениеВидимостиОтветственного;
	Элементы.ЗапасыОтветственный.Видимость	= НЕ ЗначениеВидимостиОтветственного; 
	
	Если Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиница", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Ячейка", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСтруктурнаяЕдиница", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЯчейка", "Видимость", Истина);
		СкладВШапке = Ложь;
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиница", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Ячейка", "Видимость", Не Объект.СтруктурнаяЕдиница.ОрдерныйСклад);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСтруктурнаяЕдиница", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЯчейка", "Видимость", Ложь);
		СкладВШапке = Истина;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьОтПользовательскихНастроек()

&НаСервере
Процедура ОбновитьТаблицуБезналичныхОплат()
	
	Для Каждого СтрокаОплаты Из Объект.БезналичнаяОплата Цикл
		РозничныеПродажиСервер.ЗаполнитьОписаниеОплаты(СтрокаОплаты);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РежимПросмотра = Не ПравоДоступа("Редактирование", Метаданные.Документы.ЧекККМВозврат);
	ЭтоМобильныйКлиент = ОбщегоНазначения.ЭтоМобильныйКлиент();
	
	Если ТипЗнч(КэшЗначений) <> Тип("Структура") Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;;
	
	КэшЗначений.Вставить("ИспользоватьМинимальныеЦены", ЦенообразованиеСерверПовтИсп.МинимальныеЦеныИспользуются());
	ИспользоватьРассрочкуПлатежа = ПолучитьФункциональнуюОпцию("ИспользоватьРассрочкуПлатежаВЧекахККМ");
	
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы", Истина);

	УстановитьУсловноеОформлениеФормы();
	
	ДатаДокумента = Объект.Дата;
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	
	КассаККМИспользоватьБезПодключенияОборудования = Объект.КассаККМ.ИспользоватьБезПодключенияОборудования;
	ДоступноПробитиеАвтономнаяККМ = Объект.КассаККМ.ТипКассы = Перечисления.ТипыКассККМ.АвтономнаяККМ
			И ПодключаемоеОборудованиеУНФ.ЕстьККТСАвтоматическойФискализацией(Объект.Организация);
	
	Если ЗначениеЗаполнено(Объект.НомерЧекаККМ)
	И НЕ КассаККМИспользоватьБезПодключенияОборудования Тогда
		УстановитьРежимТолькоПросмотр();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПолучитьСписокВыбораВидовПлатежныхКарт();
		ОбновитьТипНоменклатурыЗапас();
	КонецЕсли;
	
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПолучитьСсылкиНаОборудование();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		И НЕ ЗначениеЗаполнено(Параметры.Основание) 
		И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
		Объект.СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Объект.Организация, Объект.СтруктурнаяЕдиница, Объект.Дата);
		Если Объект.СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.ПСН
			И НЕ ЗначениеЗаполнено(Объект.Патент) Тогда
			ЗаполнитьПатент();
		КонецЕсли;
	ИначеЕсли Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда	
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
	Иначе
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьПатента();
	Если НЕ ЗначениеЗаполнено(Объект.СпециальныйНалоговыйРежим) Тогда
		Объект.СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Объект.Организация, Объект.СтруктурнаяЕдиница, Объект.Дата);
		Если Объект.СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.ПСН 
			И НЕ ЗначениеЗаполнено(Объект.Патент) Тогда
			ЗаполнитьПатент();
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьЦеныИВалютуНаСервере();

	ПараметрыВозврата 				 = ИнтеграцияСПлатежнымиСистемамиУНФ.ПолучитьПараметрыДокументаОплаты(Объект.ЧекККМ);
	ПлатежнаяСистема_ВозможенВозврат = ЗначениеЗаполнено(ПараметрыВозврата.ВидОплатыВозврата);
	
	ЭТИспользоватьБезПодключенияОборудования = Объект.ЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования;
	Элементы.ОплатаПлатежнымиКартамиОтменитьОплату.Видимость = НЕ ЭТИспользоватьБезПодключенияОборудования ИЛИ ПлатежнаяСистема_ВозможенВозврат;
	
	ИспользоватьРучныеСкидки = Константы.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи.Получить();
	Элементы.ЗапасыСуммаСкидки.Видимость = ИспользоватьРучныеСкидки;
	Элементы.ЗапасыПроцентСкидкиНаценки.Видимость = ИспользоватьРучныеСкидки;
	
	// Установка доступности цен для редактирования.
	РазрешеноРедактированиеЦенДокументов = УправлениеДоступомУНФ.РазрешеноРедактированиеЦенДокументов();
	
	Элементы.ЗапасыЦена.ТолькоПросмотр 					= НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСумма.ТолькоПросмотр 				= НЕ РазрешеноРедактированиеЦенДокументов; 
	Элементы.ЗапасыПроцентСкидкиНаценки.ТолькоПросмотр  = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСуммаСкидки.ТолькоПросмотр 			= НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСуммаНДС.ТолькоПросмотр 				= НЕ РазрешеноРедактированиеЦенДокументов;
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	НеПечататьБумажныйЧек = Объект.КассаККМ.НеПечататьБумажныйЧек;
	УстановитьВидимостьОтправкиЭлектронныхЧеков();
	Если НеПечататьБумажныйЧек И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЗаполнитьКонтактнуюИнформациюДляЧека();
	КонецЕсли;
	
	ЗаголовокСуммаЧека = НСтр("ru='Сумма чека (%Валюта%)'");
	ЗаголовокСуммаЧека = СтрЗаменить(ЗаголовокСуммаЧека, "%Валюта%", Объект.ВалютаДокумента);
	Элементы.СуммаДокумента.Подсказка = ЗаголовокСуммаЧека;
	
	ЗаголовокПолученоНаличными = НСтр("ru='Возвращено наличными (%Валюта%)'");
	ЗаголовокПолученоНаличными = СтрЗаменить(ЗаголовокПолученоНаличными, "%Валюта%", Объект.ВалютаДокумента);
	Элементы.ПолученоНаличными.Подсказка = ЗаголовокПолученоНаличными;
	
	ЗаголовокОплатаПлатежнымиКартами = НСтр("ru='Безналичный возврат (%Валюта%)'");
	ЗаголовокОплатаПлатежнымиКартами = СтрЗаменить(ЗаголовокОплатаПлатежнымиКартами, "%Валюта%", Объект.ВалютаДокумента);
	Элементы.ОплатаПлатежнымиКартамиИтогСумма.Подсказка = ЗаголовокОплатаПлатежнымиКартами;
	
	ЗаголовокЗачтенаПредоплата = НСтр("ru='Отменен зачет предоплаты (%Валюта%)'");
	ЗаголовокЗачтенаПредоплата = СтрЗаменить(ЗаголовокЗачтенаПредоплата, "%Валюта%", Объект.ВалютаДокумента);
	Элементы.ПредоплатаИтогСуммаПлатежа.Подсказка = ЗаголовокЗачтенаПредоплата;
	
	ЗаголовокСуммаСдачи = НСтр("ru='Сдача (%Валюта%)'");
	ЗаголовокСуммаСдачи = СтрЗаменить(ЗаголовокСуммаСдачи, "%Валюта%", Объект.ВалютаДокумента);
	Элементы.СуммаСдачи.Подсказка = ЗаголовокСуммаСдачи;

	// Заказы покупателей в Рознице
	// Установка видимости реквизитов от пользовательских настроек
	УстановитьВидимостьОтПользовательскихНастроек(); 
	// Конец. Заказы покупателей в Рознице
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	ЭлектроннаяПочтаУНФ.УстановитьОтображениеКомандОтправкиСообщений(Элементы);
	
	// АвтоматическиеСкидки.
	АвтоматическиеСкидкиПриСозданииНаСервере();

	// Серии номенклатуры
	ИспользоватьСерииНоменклатурыОстатки = СерииНоменклатурыУНФ.ИспользоватьСерииНоменклатурыОстатки();
	
	// Наборы
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы);
		ОбновитьПризнакиНабора(Объект.Запасы);
	КонецЕсли;
	// Конец Наборы
	
	// Заполнение безналичной оплаты для старых документов
	Если ЗначениеЗаполнено(Объект.Ссылка) И Объект.БезналичнаяОплата.Количество() > 0 Тогда
		РаботаСПодарочнымиСертификатами.ПроверитьЗаполнитьБезналичнуюОплатуДокумента(Объект);
	КонецЕсли;
	
	УправлениеФормой();
	
	НастроитьЭлементыСтруктурныхЕдиниц();
	
	// ИнтеграцияГосИС
	СобытияФормИСУНФ.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// Конец ИнтеграцияГосИС
	
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ЧекККМВозврат", НастройкиФормыВыбораНоменклатуры);
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
	РазрешитьСкладыВТабличныхЧастях = ПолучитьФункциональнуюОпцию("РазрешитьСкладыВТабличныхЧастях");
	
	// Ячейки
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		КэшЗначений.Вставить("УчетПоЯчейкам", ПолучитьФункциональнуюОпцию("УчетПоЯчейкам"));
		ОбновитьДоступностьЯчеек();
		ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	КонецЕсли; 
	// Конец Ячейки
	
	Элементы.ЗапасыГруппаСерииНоменклатуры.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	
	Если Параметры.Ключ.Пустая() Тогда
		НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект, Истина)
	КонецЕсли;
	
	ЭтоВозвратЧастичнойПредоплаты = ЭтоВозвратЧастичнойПредоплаты();
	// частичная предоплата возвращается полностью
	Если ЭтоВозвратЧастичнойПредоплаты Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Запасы", "ТолькоПросмотр", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаТорговоеОборудование", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыПодбор", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыРассчитатьСкидкиНаценки", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПодсказкаПредоплата", "Видимость", Истина);
	КонецЕсли;
	
	ЭтоВозвратАванса = ЭтоВозвратАванса();
	Если ЭтоВозвратАванса Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Запасы", "ТолькоПросмотр", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаТорговоеОборудование", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыПодбор", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыРассчитатьСкидкиНаценки", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммаДокумента", "ТолькоПросмотр", Ложь);
	КонецЕсли;
	
	ИспользоватьАгентскиеПлатежиИРазделениеВыручки = ПолучитьФункциональнуюОпцию("ИспользоватьАгентскиеПлатежиИРазделениеВыручки");
	
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
		АгентскиеПлатежиУНФ.УправлениеЭлементамиАгентскогоВознаграждения(ЭтотОбъект, Объект);
	КонецЕсли;
	
	//НСПК
	ИспользоватьОплатуСертификатамиНСПК = ПолучитьФункциональнуюОпцию("ИспользоватьОплатуСертификатамиНСПК");
	Если ИспользоватьОплатуСертификатамиНСПК Тогда
		ЭлектронныеСертификатыНСПКРМКУНФ.ДополнитьСведеньяОТоварах(Объект.Запасы);
		ПредставлениеОшибкиНСПК = ЭлектронныеСертификатыНСПК.ПолучитьПредставлениеОшибкиНСПК(Параметры.Ключ);
		Элементы.ПредставлениеОшибкиНСПК.Видимость = ЗначениеЗаполнено(ПредставлениеОшибкиНСПК);
	КонецЕсли;
	
	НастройкиКоличества = ПолучитьНастройкиИзмененияКоличества();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиКоличества);
		
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриОткрытии формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	Для каждого ТекСтрока Из Объект.Запасы Цикл
		ТекСтрока.СуммаСкидки = ТекСтрока.Цена * ТекСтрока.Количество - ТекСтрока.Сумма - ТекСтрока.СуммаАвтоматическойСкидки;
	КонецЦикла;
	
	ПересчитатьДокументНаКлиенте();
	
	УправлениеНебольшойФирмойКлиент.ЗаполнитьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП);
	УправлениеНебольшойФирмойКлиент.УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП);
	
	Если УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеКонстанты("ФункциональнаяОпцияИспользоватьПредоплатуВЧекахККМ") Тогда
		УправлениеЭлементамиИОплатойПриИзмененииОперацииСДС(Истина);
	КонецЕсли;

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	НастроитьЭлементыЯчеек();
	
	Если ИспользоватьРассрочкуПлатежа Тогда
		УстановитьДоступностьТабличныхЧастей();
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события ПриЧтенииНаСервере формы.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	ПолучитьСписокВыбораВидовПлатежныхКарт();
	Элементы.ПробитьЧек.Доступность = НЕ Объект.ПометкаУдаления;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Наборы
	ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы); 
	ОбновитьПризнакиНабора(Объект.Запасы);
	// Конец Наборы
	
	// ИнтеграцияГосИС
	СобытияФормИСУНФ.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец ИнтеграцияГосИС
	
	Если ТипЗнч(КэшЗначений) <> Тип("Структура") Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	
	ОбновитьТипНоменклатурыЗапас();
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
	// Ячейки
	КэшЗначений.Вставить("УчетПоЯчейкам", ПолучитьФункциональнуюОпцию("УчетПоЯчейкам"));
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	// Конец Ячейки
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	ОбновитьТаблицуБезналичныхОплат();
	
	ИспользоватьРассрочкуПлатежа = ПолучитьФункциональнуюОпцию("ИспользоватьРассрочкуПлатежаВЧекахККМ");
	
КонецПроцедуры // ПриЧтенииНаСервере()

// Процедура - обработчик события ПриЗакрытии формы.
//
&НаКлиенте
Процедура ПриЗакрытии()

	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование

	// АвтоматическиеСкидки
	СкидкиНаценкиКлиент.ПриЗакрытииФормы(Объект.Ссылка, ИспользоватьАвтоматическиеСкидки, СкидкиРассчитаныПередЗаписью);
	// Конец АвтоматическиеСкидки

КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ИнтеграцияГосИС
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КэшированныеЗначения",    КэшированныеЗначения);
	ДополнительныеПараметры.Вставить("СтандартнаяОбработка",    Истина);
	ДополнительныеПараметры.Вставить("ТребуетсяСерверныйВызов", Ложь);
	СобытияФормИСУНФКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры);
	КэшированныеЗначения = ДополнительныеПараметры.КэшированныеЗначения;
	Если ДополнительныеПараметры.ТребуетсяСерверныйВызов Тогда
		ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	Если СтрНачинаетсяС(ИмяСобытия, "ЗакрытиеФормыПроверкиИПодбораГосИС") Тогда
		ИндексВидаПродукции     = Число(СтрЗаменить(ИмяСобытия, "ЗакрытиеФормыПроверкиИПодбораГосИС", ""));
		ВидМаркируемойПродукции = ИнтеграцияИСКлиентСервер.ИндексВидаПродукцииИС(ИндексВидаПродукции);
		РассчитатьСуммыВСтрокахТабличнойЧастиПоВидуМаркируемойПродукции(ВидМаркируемойПродукции);
		ПересчитатьДокументНаКлиенте();
	КонецЕсли;
	Если Не ДополнительныеПараметры.СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	// Конец ИнтеграцияГосИС
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
	   И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			// Преобразуем предварительно к ожидаемому формату
			Данные = Новый Массив();
			Если Параметр[1] = Неопределено Тогда
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[0], 1)); // Достаем штрихкод из основных данных
			Иначе
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[1][1], 1)); // Достаем штрихкод из дополнительных данных
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ОбновитьФормуСпискаДокументовЧекККМ" Тогда
		Для каждого ТекСтрока Из Объект.Запасы Цикл
			ТекСтрока.СуммаСкидки = ТекСтрока.Цена * ТекСтрока.Количество - ТекСтрока.Сумма;
		КонецЦикла;
		
	ИначеЕсли ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		АдресЗапасовВХранилище = Параметр;
		
		ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, "Запасы", Истина, Истина);
		
		ПересчитатьДокументНаКлиенте();
		
	ИначеЕсли ИмяСобытия = "ПодборСерий"
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		ИзменилосьКоличество = ПолучитьСерииНоменклатурыИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки);
		Если ИзменилосьКоличество Тогда
			РассчитатьСуммуВСтрокеТабличнойЧасти();
		КонецЕсли; 
		
	КонецЕсли;
	
	// Наборы
	Если НаборыКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Источник) Тогда
		ОбновитьСоставНабора(Параметр.НоменклатураНабора, Параметр.ХарактеристикаНабора, Параметр.Количество, 
			Параметр.Цена, Параметр.СоставНабора);
		ПересчитатьДокументНаКлиенте();
	КонецЕсли; 
	// Конец Наборы
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	// ИнтеграцияГосИС
	СобытияФормИСУНФКлиент.ОбработкаНавигационнойСсылки(ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	// Конец ИнтеграцияГосИС
	
КонецПроцедуры

// Процедура обработчик события ПередЗаписью.
//
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	УправлениеНебольшойФирмойКлиент.УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП, Истина);
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("Проведение"
			+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	// АвтоматическиеСкидки
	СкидкиРассчитаныПередЗаписью = Ложь;
	// Если документ проводится, проверим рассчитанность скидок.
	Если ИспользоватьАвтоматическиеСкидки Тогда
		Если Не Объект.СкидкиРассчитаны И СкидкиИзменились() Тогда
			РассчитатьСкидкиНаценкиКлиент();
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Рассчитаны автоматические скидки (наценки)'");
			Сообщение.КлючДанных = Объект.Ссылка;
			Сообщение.Сообщить();
			
			СкидкиРассчитаныПередЗаписью = Истина;
		Иначе
			Объект.СкидкиРассчитаны = Истина;
			ОбновитьКартинкуАвтоСкидкиПослеЗаписи = Истина;
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
		КонецЕсли;
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи формы.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	Оповестить("ОбновитьФормуСпискаДокументовЧекККМ");
	
	ЗаполненЗаказ = Ложь;
	Для каждого СтрокаТЧ Из Объект.Запасы Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Заказ) Тогда
			ЗаполненЗаказ = Истина;
			Прервать;
		КонецЕсли;		
	КонецЦикла;	
	
	Если ЗаполненЗаказ Тогда
		Оповестить("Запись_ЧекККМВозврат_с_ЗаказомПокупателя", Новый Структура("Ссылка, Номер, Дата", Объект.Ссылка, Объект.Номер, Объект.Дата));
	КонецЕсли;
	
	// РМК
	Если ТипЗнч(ЭтотОбъект.ВладелецФормы) = Тип("ФормаКлиентскогоПриложения")
		И СтрНайти(ЭтотОбъект.ВладелецФормы.ИмяФормы, "ФормаДокумента_РМК") > 0 
		Тогда
		Оповестить("РМК_Запись_ЧекККМВозврат", Новый Структура("Ссылка, Номер, Дата", Объект.Ссылка, Объект.Номер, Объект.Дата));
	КонецЕсли;
	// Конец РМК
	
	// Наборы
	ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы); 
	// Конец Наборы 
	
	Если ЗначениеЗаполнено(ТекстОшибкиУдаленнойФискализации) Тогда
		ПоказатьПредупреждение(, ТекстОшибкиУдаленнойФискализации);
	КонецЕсли;
	
КонецПроцедуры // ПослеЗаписи()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// АвтоматическиеСкидки
	Если ОбновитьКартинкуАвтоСкидкиПослеЗаписи Тогда
		ОбновитьКартинкуАвтоСкидкиПослеЗаписи = Ложь;
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	// Наборы
	ОбновитьПризнакиНабора(Объект.Запасы);	
	// Конец Наборы
	
	ОбновитьТипНоменклатурыЗапас();
	
	//Ячейки
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	// Конец Ячейки
	
	// ИнтеграцияГосИС
	СобытияФормИСУНФ.ПослеЗаписиНаСервере(ЭтаФорма);
	// Конец ИнтеграцияГосИС
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	ОбновитьТаблицуБезналичныхОплат();
	
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы", Истина);
	
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
		АгентскиеПлатежиУНФ.УправлениеЭлементамиАгентскогоВознаграждения(ЭтотОбъект, Объект);
	КонецЕсли;
	
	ТекстОшибкиУдаленнойФискализации = "";
	Если ЭтоЧекУдаленнойФискализации Тогда
		ПодключаемоеОборудованиеУНФ.ДобавитьВОчередьФискализации(Объект.Ссылка, ТекстОшибкиУдаленнойФискализации);   
		ЭтоЧекУдаленнойФискализации = Ложь;
	КонецЕсли;
	
	//НСПК
	Если ИспользоватьОплатуСертификатамиНСПК Тогда
		ЭлектронныеСертификатыНСПКРМКУНФ.ДополнитьСведеньяОТоварах(Объект.Запасы);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаССериямиНоменклатуры

&НаКлиенте
Процедура ЗапасыСерииНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ТекущиеДанныеИдентификатор = Элементы.Запасы.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыСерийНоменклатуры = ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор);
	ОткрытьФорму("Обработка.ПодборСерийНоменклатуры.Форма", ПараметрыСерийНоменклатуры, ЭтотОбъект);

КонецПроцедуры

&НаСервере
Функция ПолучитьСерииНоменклатурыИзХранилища(АдресВоВременномХранилище, КлючСтроки)
	
	Возврат СерииНоменклатурыУНФ.ПолучитьСерииНоменклатурыИзХранилища(Объект, АдресВоВременномХранилище, КлючСтроки);
	
КонецФункции

&НаСервере
Функция ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор)
	
	Возврат СерииНоменклатурыУНФ.ПараметрыПодбораСерийНоменклатуры(Объект, ЭтотОбъект.УникальныйИдентификатор, ТекущиеДанныеИдентификатор, Ложь);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область АвтоматическиеСкидки

&НаКлиенте
Процедура РассчитатьСкидкиНаценки(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Если Объект.СкидкиНаценки.Количество() > 0 Тогда
			Объект.СкидкиНаценки.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	РассчитатьСкидкиНаценкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.РабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	
	ЦенообразованиеКлиент.ПоказатьОповещениеПользователяОКорректировкеЦены(СтруктураПараметры);

	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаСервере
Функция СкидкиИзменились()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	
	ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	
	СкидкиИзменились = Ложь;
	
	КоличествоСтрок = ПримененныеСкидки.ТаблицаСкидкиНаценки.Количество();
	Если КоличествоСтрок <> Объект.СкидкиНаценки.Количество() Тогда
		СкидкиИзменились = Истина;
	Иначе
		
		Если Объект.Запасы.Итог("СуммаАвтоматическойСкидки") <> Объект.СкидкиНаценки.Итог("Сумма") Тогда
			СкидкиИзменились = Истина;
		КонецЕсли;
		
		Если Не СкидкиИзменились Тогда
			Для НомерСтроки = 1 По КоличествоСтрок Цикл
				Если    Объект.СкидкиНаценки[НомерСтроки-1].Сумма <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].Сумма
					ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].КлючСвязи <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].КлючСвязи
					ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].СкидкаНаценка <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].СкидкаНаценка Тогда
					СкидкиИзменились = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СкидкиИзменились Тогда
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат СкидкиИзменились;
	
КонецФункции

// Процедура - обработчик команды "РассчитатьСкидкиНаценки".
//
&НаСервере
Процедура РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры)
	
	ПримененныеСкидки = РассчитатьСкидкиНаценкиПоДокументуОснованиюСервер();
	СтруктураПараметры.Вставить("ПрименятьКОбъекту", Ложь);
	
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
	Модифицированность = Истина;
	
	СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект, "Запасы");
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
	
		Объект.СкидкиРассчитаны = Истина;
	
	КонецЕсли;
	
	Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
	
	ЕстьРучныеСкидки = Константы.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи.Получить();
	Для Каждого ТекущаяСтрока Из Объект.Запасы Цикл
		ТекСуммаРучнойСкидки = ?(ЕстьРучныеСкидки, ТекущаяСтрока.Цена * ТекущаяСтрока.Количество * ТекущаяСтрока.ПроцентСкидкиНаценки / 100, 0);
		ТекСуммаСкидки = ТекСуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки;
		Если ТекСуммаСкидки >= ТекущаяСтрока.Сумма И ТекущаяСтрока.Цена > 0 Тогда
			ТекущаяСтрока.ОбщаяСуммаСкидкиБольшеСуммы = Истина;
		Иначе
			ТекущаяСтрока.ОбщаяСуммаСкидкиБольшеСуммы = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьИнформациюОСкидкахКлиент()
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.РабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
		ТекстВопроса = НСтр("ru='Скидки (наценки) не рассчитаны, рассчитать?'");
		
		ДополнительныеПараметры = Новый Структура; 
		ДополнительныеПараметры.Вставить("СтруктураПараметры", СтруктураПараметры);
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросРассчитатьСкидки", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросРассчитатьСкидки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	СтруктураПараметры = ДополнительныеПараметры.СтруктураПараметры;
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры);
	
КонецПроцедуры

&НаСервере
Функция РассчитатьСкидкиНаценкиПоДокументуОснованиюСервер()

	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Запасы");
	
	МассивЧековККМ = Новый Массив;
	МассивЧековККМ.Добавить(Объект.ЧекККМ);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка КАК Заказ,
	|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	СкидкиНаценки.Сумма КАК СуммаАвтоматическойСкидки,
	|	ВЫБОР
	|		КОГДА ЧекККМЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТипНоменклатурыЗапас,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЧекККМЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЧекККМЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Коэффициент,
	|	ЧекККМЗапасы.Номенклатура КАК Номенклатура,
	|	ЧекККМЗапасы.Характеристика КАК Характеристика,
	|	ЧекККМЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЧекККМЗапасы.Количество КАК Количество,
	|	СкидкиНаценки.ЗначениеСкидкиНаценки КАК ЗначениеСкидкиНаценки,
	|	СкидкиНаценки.СкидкаНаценка.СпособПредоставления КАК СпособПредоставления
	|ИЗ
	|	Документ.ЧекККМ.СкидкиНаценки КАК СкидкиНаценки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
	|		ПО СкидкиНаценки.Ссылка = ЧекККМЗапасы.Ссылка
	|			И СкидкиНаценки.КлючСвязи = ЧекККМЗапасы.КлючСвязи
	|ГДЕ
	|	СкидкиНаценки.Ссылка В(&МассивЧековККМ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка,
	|	СкидкиНаценки.СкидкаНаценка,
	|	СкидкиНаценки.Сумма,
	|	ВЫБОР
	|		КОГДА ЧекККМПодарки.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЧекККМПодарки.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЧекККМПодарки.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ,
	|	ЧекККМПодарки.Номенклатура,
	|	ЧекККМПодарки.Характеристика,
	|	ЧекККМПодарки.ЕдиницаИзмерения,
	|	ЧекККМПодарки.Количество,
	|	СкидкиНаценки.ЗначениеСкидкиНаценки,
	|	СкидкиНаценки.СкидкаНаценка.СпособПредоставления
	|ИЗ
	|	Документ.ЧекККМ.СкидкиНаценки КАК СкидкиНаценки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Подарки КАК ЧекККМПодарки
	|		ПО СкидкиНаценки.Ссылка = ЧекККМПодарки.Ссылка
	|			И (СкидкиНаценки.КлючСвязи = 0)
	|ГДЕ
	|	СкидкиНаценки.Ссылка В(&МассивЧековККМ)";
	
	Запрос.УстановитьПараметр("МассивЧековККМ", МассивЧековККМ);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СкидкиНаценкиЗаказа = МассивРезультатов[0].Выгрузить();
	
	Объект.СкидкиНаценки.Очистить();
	Для Каждого ТекущаяСтрокаДокумента Из Объект.Запасы Цикл
		ТекущаяСтрокаДокумента.ПроцентАвтоматическойСкидки = 0;
		ТекущаяСтрокаДокумента.СуммаАвтоматическойСкидки = 0;
	КонецЦикла;
	
	РезультатРасчетаСкидокНаценок = Объект.СкидкиНаценки.Выгрузить();
	
	Для Каждого ТекущаяСтрокаЗаказа Из СкидкиНаценкиЗаказа Цикл
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Номенклатура", ТекущаяСтрокаЗаказа.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", ТекущаяСтрокаЗаказа.Характеристика);
		
		МассивСтрокДокумента = Объект.Запасы.НайтиСтроки(СтруктураДляПоиска);
		Если МассивСтрокДокумента.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоВЗаказе = ТекущаяСтрокаЗаказа.Количество * ТекущаяСтрокаЗаказа.Коэффициент;
		Для Каждого ТекущаяСтрокаДокумента Из МассивСтрокДокумента Цикл
			КоличествоКСписанию = ТекущаяСтрокаДокумента.Количество * 
									?(ТипЗнч(ТекущаяСтрокаДокумента.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения"), 1, ТекущаяСтрокаДокумента.ЕдиницаИзмерения.Коэффициент);
						
			ПересчитатьСуммы = КоличествоВЗаказе <> КоличествоКСписанию;
			КоэффициентПересчетаСкидки = ?(ПересчитатьСуммы, КоличествоКСписанию / КоличествоВЗаказе, 1);
			Если КоэффициентПересчетаСкидки = 1 Тогда
				ТекущаяСуммаАвтоматическойСкидки = ТекущаяСтрокаЗаказа.СуммаАвтоматическойСкидки;
			Иначе
				ТекущаяСуммаАвтоматическойСкидки = ОКР(ТекущаяСтрокаЗаказа.СуммаАвтоматическойСкидки * КоэффициентПересчетаСкидки, 2);
			КонецЕсли;
			
			СтрокаСкидки = РезультатРасчетаСкидокНаценок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСкидки, ТекущаяСтрокаЗаказа);
			СтрокаСкидки.Сумма = ТекущаяСуммаАвтоматическойСкидки;
			СтрокаСкидки.КлючСвязи = ТекущаяСтрокаДокумента.КлючСвязи;
			
			ТекущаяСтрокаЗаказа.СуммаАвтоматическойСкидки = ТекущаяСтрокаЗаказа.СуммаАвтоматическойСкидки - ТекущаяСуммаАвтоматическойСкидки;
			КоличествоВЗаказе = КоличествоВЗаказе - КоличествоКСписанию;
			Если КоличествоВЗаказе <=0 Или ТекущаяСтрокаЗаказа.СуммаАвтоматическойСкидки <=0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, "Запасы", РезультатРасчетаСкидокНаценок);
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	
	ПримененныеСкидкиДерево = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);

	Возврат ПримененныеСкидкиДерево;
	
КонецФункции

&НаКлиенте
Процедура РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры)
	
	Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		РассчитатьСкидкиНаценкиКлиент();
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция СброситьФлагСкидкиРассчитаныКлиент(Действие, КолонкаТЧ = "")
	
	ТребуетсяПересчет = Ложь;
	Если ИспользоватьАвтоматическиеСкидки И Объект.Запасы.Количество() > 0 И (Объект.СкидкиРассчитаны ИЛИ УстановленСерыйЦвет) Тогда
		ТребуетсяПересчет = СброситьФлагСкидкиРассчитаны(Действие, КолонкаТЧ);
		Если ТребуетсяПересчет Тогда
			ПодключитьОбработчикОжидания("ОбновитьКартинкиСкидкиРассчитаны", 0.2, Истина);
		КонецЕсли;
	КонецЕсли;
	Возврат ТребуетсяПересчет;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьКартинкиСкидкиРассчитаны()
	СкидкиНаценкиКлиент.ОбновитьКартинкиСкидкиРассчитаны(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция СброситьФлагСкидкиРассчитаны(Действие, КолонкаТЧ = "")
	
	СброшенФлаг = СкидкиНаценкиСервер.СброситьФлагСкидкиРассчитаны(ЭтотОбъект, Действие, КолонкаТЧ);
	
	// ИнтеграцияГосИС
	Если СброшенФлаг Тогда
		// При сбрасывании флага смещается фокус с ТЧ и не выполняются события формы.
		СобытияФормИСУНФ.ПриИзмененииЭлемента(ЭтотОбъект, "ТабличнаяЧасть", Новый Структура("ТребуетсяЗаполнениеСлужебныхРеквизитов"));
	КонецЕсли;
	// Конец ИнтеграцияГосИС
	
	Возврат СброшенФлаг;
	
КонецФункции

&НаСервере
Процедура АвтоматическиеСкидкиПриСозданииНаСервере()
	
	ВводНаОсновании = ЗначениеЗаполнено(Объект.ЧекККМ);
	УстановленСерыйЦвет = Ложь;
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки");
	Если ИспользоватьАвтоматическиеСкидки Тогда
		Если ВводНаОсновании Тогда
			Если Объект.Запасы.Количество() = 0 Тогда
				Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.ОбновитьСерый;
				УстановленСерыйЦвет = Истина;
			ИначеЕсли НЕ Объект.СкидкиРассчитаны Тогда
				Объект.СкидкиРассчитаны = Ложь;
				Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.ОбновитьКрасный;
			Иначе
				Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыРассчитатьСкидкиНаценки", "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыПроцентАвтоматическойСкидки", "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСуммаАвтоматическойСкидки", "Видимость", Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПримененныеСкидки(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстВопроса = "Данные еще не записаны.
		|Переход к ""Примененные скидки"" возможен только после записи данных.
		|Данные будут записаны.";
		ОписаниеОповещения = Новый ОписаниеОповещения("ПримененныеСкидкиЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ПараметрыФормы = Новый Структура("ДокументСсылка", Объект.Ссылка);
		ОткрытьФорму("Отчет.ПримененныеСкидкиВДокументе.Форма.ФормаОтчета", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПримененныеСкидкиЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;

	Если Записать() Тогда
		ПараметрыФормы = Новый Структура("ДокументСсылка", Объект.Ссылка);
		ОткрытьФорму("Отчет.ПримененныеСкидкиВДокументе.Форма.ФормаОтчета", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры // ПримененныеСкидкиЗавершение()

#КонецОбласти

#Область Наборы

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаменитьСтрокуЗапасовДаннымиНабора(Форма, СтрокаТабличнойЧасти, СтруктураДанные)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, СтрокаТабличнойЧасти,
		Форма.ИспользоватьСерииНоменклатурыОстатки);
	
	НаборыКлиентСервер.ЗаменитьСтрокуДаннымиНабора(Объект, "Запасы", СтрокаТабличнойЧасти, СтруктураДанные); 
	
	Элементы.ЗапасыКартинкаНабора.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСоставНабора(СтрокаТабличнойЧасти)
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.НоменклатураНабора);
	СтруктураОткрытия.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.ХарактеристикаНабора);
	ДобавленныеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОткрытия);
	СтрокиНабора = Объект.Запасы.НайтиСтроки(СтруктураОткрытия);
	Если ДобавленныеСтроки.Количество() = 0 Тогда
		СтруктураОткрытия.Вставить("Количество", 1);
	Иначе
		СтруктураОткрытия.Вставить("Количество", ДобавленныеСтроки[0].Количество);
	КонецЕсли; 
	СтруктураОткрытия.Вставить("СоставНабора", Новый Массив);
	Для каждого Стр Из СтрокиНабора Цикл
		СвойстваСтроки = Новый Структура;
		СвойстваСтроки.Вставить("Номенклатура");
		СвойстваСтроки.Вставить("Характеристика");
		СвойстваСтроки.Вставить("Количество");
		СвойстваСтроки.Вставить("Цена");
		СвойстваСтроки.Вставить("ДоляСтоимости");
		СвойстваСтроки.Вставить("ЕдиницаИзмерения");
		СвойстваСтроки.Вставить("Активная");
		ЗаполнитьЗначенияСвойств(СвойстваСтроки, Стр);
		СвойстваСтроки.Активная = (Стр = СтрокаТабличнойЧасти); 
		СтруктураОткрытия.СоставНабора.Добавить(СвойстваСтроки);
	КонецЦикла; 
	ОткрытьФорму("РегистрСведений.СоставНаборов.Форма.ФормаРедактированияСостава", СтруктураОткрытия, ЭтотОбъект, , , , , 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоставНабора(НоменклатураНабора, ХарактеристикаНабора, КоличествоНаборов, ЦенаНабора, СоставНабора)
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("НоменклатураНабора", НоменклатураНабора);
	СтруктураДанных.Вставить("ХарактеристикаНабора", ХарактеристикаНабора);
	СтруктураДанных.Вставить("ИмяТабличнойЧасти", "Запасы");
	СтруктураДанных.Вставить("СоставНабора", СоставНабора);
	СтруктураДанных.Вставить("КоличествоНаборов", КоличествоНаборов);
	СтруктураДанных.Вставить("ЦенаНабора", ЦенаНабора);
	НаборыСервер.ОбновитьСоставНабораВДокументе(СтруктураДанных, Объект);
	Модифицированность = Истина;

	// АвтоматическиеСкидки.
	СброситьФлагСкидкиРассчитаны("ОбработкаПодбора");
	// Конец АвтоматическиеСкидки
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДанныеКартинокНаборов(Запасы, ДобавленныеНаборы)
	
	Для каждого Стр Из Запасы Цикл
		Стр.КартинкаНабора = НаборыКлиентСервер.КартинкаНабора(Стр, ДобавленныеНаборы);
		Если Стр.КартинкаНабора>5 Тогда
			Стр.КартинкаНабора = ((Стр.КартинкаНабора - 1) % 5) + 1;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры
 
&НаСервереБезКонтекста
Процедура ОбновитьПризнакиНабора(Запасы)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНаборы") Тогда
		Возврат;
	КонецЕсли; 
	
	МассивНоменклатуры = Новый Массив;
	Для каждого Стр Из Запасы Цикл
		Если ЗначениеЗаполнено(Стр.Номенклатура) И НЕ ЗначениеЗаполнено(Стр.НоменклатураНабора) И ТипЗнч(Стр.Номенклатура)=Тип("СправочникСсылка.Номенклатура") Тогда
			МассивНоменклатуры.Добавить(Стр.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивНоменклатуры.Количество()>0 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&МассивНоменклатуры)
		|	И Номенклатура.ЭтоНабор";
		Выборка = Запрос.Выполнить().Выбрать();
		ПараметрыНоменклатуры = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			ПараметрыНоменклатуры.Вставить(Выборка.Ссылка, Истина);	
		КонецЦикла; 
		
		Для каждого Стр Из Запасы Цикл
			Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) ИЛИ ЗначениеЗаполнено(Стр.НоменклатураНабора) ИЛИ ТипЗнч(Стр.Номенклатура)<>Тип("СправочникСсылка.Номенклатура") Тогда
				Стр.ЭтоНабор = Ложь;
			Иначе
				Стр.ЭтоНабор = ПараметрыНоменклатуры.Получить(Стр.Номенклатура);
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция  ХарактеристикиНабора(Номенклатура, Текст)
	
	СтруктураПараметров = Новый Структура();
	Если ПустаяСтрока(Текст) Тогда
		СтруктураПараметров.Вставить("СтрокаПоиска", Неопределено);
	Иначе
		СтруктураПараметров.Вставить("СтрокаПоиска", Текст);
	КонецЕсли; 
	СтруктураПараметров.Вставить("Отбор", Новый Структура);
	СтруктураПараметров.Отбор.Вставить("Владелец", Номенклатура);
	Возврат Справочники.ХарактеристикиНоменклатуры.ПолучитьДанныеВыбора(СтруктураПараметров);
	
КонецФункции

#КонецОбласти 

#Область СтруктурныеЕдиницы

&НаСервере
Процедура ОбновитьДоступностьЯчеек()
	
	Если Не КэшЗначений.УчетПоЯчейкам Тогда
		Возврат;
	КонецЕсли;
	
	Если Не КэшЗначений.Свойство("ДоступностьЯчеек") Тогда
		КэшЗначений.Вставить("ДоступностьЯчеек", Новый ФиксированноеСоответствие(Новый Соответствие));
	КонецЕсли;
	
	МассивСтруктурныхЕдиниц = Новый Массив;
	Если Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			МассивСтруктурныхЕдиниц.Добавить(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
		КонецЦикла;
	Иначе
		МассивСтруктурныхЕдиниц.Добавить(Объект.СтруктурнаяЕдиница);
	КонецЕсли;
	МассивСтруктурныхЕдиниц = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСтруктурныхЕдиниц);
	ДополнитьДоступностьЯчеек(МассивСтруктурныхЕдиниц, КэшЗначений.ДоступностьЯчеек);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПризнакиДоступностиЯчеек(Форма)

	Объект = Форма.Объект;
	КэшЗначений = Форма.КэшЗначений;
	
	Если Не КэшЗначений.УчетПоЯчейкам Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ПоложениеСклада <> ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		Результат = КэшЗначений.ДоступностьЯчеек.Получить(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
		Если Результат = Неопределено Тогда
			Результат = Ложь;
		КонецЕсли;
		СтрокаТабличнойЧасти.ЯчейкаДоступна = Результат И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьДоступностьЯчеек(СтруктурныеЕдиницы, СоответствиеСтруктурныхЕдиниц)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтруктурныеЕдиницы", СтруктурныеЕдиницы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Ссылка,
	|	СтруктурныеЕдиницы.ОрдерныйСклад КАК ОрдерныйСклад,
	|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.Ссылка В(&СтруктурныеЕдиницы)";
	Выборка = Запрос.Выполнить().Выбрать();
	Соответствие = Новый Соответствие(СоответствиеСтруктурныхЕдиниц);
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.Ссылка, Не Выборка.ОрдерныйСклад И Выборка.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад);
	КонецЦикла;
	СоответствиеСтруктурныхЕдиниц = Новый ФиксированноеСоответствие(Соответствие);
	
КонецПроцедуры

&НаКлиенте
Функция ЯчейкаДоступна(СтруктурнаяЕдиница)
	
	Если НЕ КэшЗначений.УчетПоЯчейкам Тогда
		Возврат Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) ИЛИ ТипЗнч(СтруктурнаяЕдиница)<>Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		Возврат Ложь;
	КонецЕсли; 
	Если НЕ КэшЗначений.Свойство("ДоступностьЯчеек") Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Результат = КэшЗначений.ДоступностьЯчеек.Получить(СтруктурнаяЕдиница);
	Если Результат = Неопределено Тогда
		МассивСтруктурныхЕдиниц = Новый Массив;
		МассивСтруктурныхЕдиниц.Добавить(СтруктурнаяЕдиница);
		ДополнитьДоступностьЯчеек(МассивСтруктурныхЕдиниц, КэшЗначений.ДоступностьЯчеек);
		Результат = КэшЗначений.ДоступностьЯчеек.Получить(СтруктурнаяЕдиница);
		Если Результат=Неопределено Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура НастроитьЭлементыСтруктурныхЕдиниц()
	
	РабочееМесто = МенеджерОборудованияВызовСервера.РабочееМестоКлиента();
	Если Не ЗначениеЗаполнено(РабочееМесто) Тогда
		Возврат;
	КонецЕсли;
	НастройкаРМК = РабочееМестоКассираВызовСервера.ПолучитьНастройкуРМК(РабочееМесто);
	Если Не ЗначениеЗаполнено(НастройкаРМК) Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкаРМК.СтруктурныеЕдиницы.Количество() Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиница", "ТолькоПросмотр", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиница", "Заголовок", НСтр("ru = 'Склад продажи'"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиница", "Видимость", СкладВШапке);
		
		СписокДоступныхСкладов.Очистить();
		СписокДоступныхСкладов.Добавить(Объект.КассаККМ.СтруктурнаяЕдиница);
		Для Каждого СтрокаСтруктурнойЕдиницы Из НастройкаРМК.СтруктурныеЕдиницы Цикл
			СписокДоступныхСкладов.Добавить(СтрокаСтруктурнойЕдиницы.СтруктурнаяЕдиница);
		КонецЦикла;
		
		Элементы.СтруктурнаяЕдиница.СписокВыбора.Очистить();
		Элементы.ЗапасыСтруктурнаяЕдиница.СписокВыбора.Очистить();
		Для Каждого ЭлементСписка Из СписокДоступныхСкладов Цикл
			Элементы.СтруктурнаяЕдиница.СписокВыбора.Добавить(ЭлементСписка.Значение);
			Элементы.ЗапасыСтруктурнаяЕдиница.СписокВыбора.Добавить(ЭлементСписка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	УстановитьВидимостьПатента();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЭлементыЯчеек()
	
	ВидимостьЯчейки = ЕстьЯчейки(Объект.СтруктурнаяЕдиница);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Ячейка", "Видимость", ВидимостьЯчейки И СкладВШапке);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьЯчейки(СтруктурнаяЕдиница)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Ячейки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Ячейки КАК Ячейки
	|ГДЕ
	|	Ячейки.Владелец = &СтруктурнаяЕдиница");
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	ЕстьЯчейки = Не Запрос.Выполнить().Пустой();
	
	Возврат ЕстьЯчейки;
	
КонецФункции

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Элементы.Запасы.ТекущиеДанные.ЯчейкаДоступна = ЯчейкаДоступна(Элементы.Запасы.ТекущиеДанные.СтруктурнаяЕдиница);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВозвратОплаты(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ДобавитьОплатуЗавершение", ЭтаФорма);
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("КОплате", Объект.СуммаДокумента - Объект.ПолученоНаличными - Объект.БезналичнаяОплата.Итог("Сумма"));
	СтруктураПараметров.Вставить("Сумма", СтруктураПараметров.КОплате);
	СтруктураПараметров.Вставить("КассаККМ", Объект.КассаККМ);
	СтруктураПараметров.Вставить("Документ", Объект);
	СтруктураПараметров.Вставить("ВозвратОплаты", Истина);
	
	Если Команда.Имя = "ВозвратОплатыКартой" Тогда
		ОткрытьФорму("Справочник.СпособыОплаты.Форма.ФормаОплатыКартой", СтруктураПараметров, ЭтотОбъект,,,, Оповещение);
	ИначеЕсли Команда.Имя = "ВозвратОплатыСБП" Тогда

		КлючКонтроля 	= Новый Структура("ВидОплаты", ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.СБП"));
		СтрокиОплатСБП  = Объект.БезналичнаяОплата.НайтиСтроки(КлючКонтроля);
		
		Если СтрокиОплатСБП.Количество() Тогда
			
			ШаблонПоля = "Объект.БезналичнаяОплата[%1].ВидОплаты";
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Оплату СБП можно провести только один раз'"),, СтрШаблон(ШаблонПоля, СтрокиОплатСБП[0].НомерСтроки-1));
			
			Возврат;
			
		КонецЕсли;

		Если СтруктураПараметров.КОплате > 0 Тогда
			
			Если Не ЗначениеЗаполнено(Объект.Ссылка) 
				И Не Записать() Тогда
				Возврат;
			КонецЕсли;
		
			СтруктураПараметров.Вставить("ВидОперацииПродажа", 	Ложь);
			СтруктураПараметров.Вставить("СтруктурнаяЕдиница",	Объект.СтруктурнаяЕдиница);
		
			ОткрытьФорму("ОбщаяФорма.ФормаОплатыПлатежнойСистемой", СтруктураПараметров, ЭтотОбъект,,,, Оповещение);
			
		КонецЕсли;
		
	ИначеЕсли Команда.Имя = "ВозвратОплатыСертификатом" Тогда
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаОплатыСертификатом", СтруктураПараметров, ЭтотОбъект,,,, Оповещение);
		
	ИначеЕсли Команда.Имя = "ВозвратОплатыНСПК" Тогда
		
		СтруктураПараметров.Вставить("Сумма", Объект.СуммаДокумента);
		ВозвратЭСНСПКНаКлиенте(СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	
	// Поиск подарочного сертификата
	Если Элементы.Страницы.ТекущаяСтраница.Имя = "СтраницаБезналичнаяОплата" Тогда
		ОбработкаЗавершения = Новый ОписаниеОповещения("ПоискСертификатаПоНомеруЗавершение", ЭтотОбъект, Новый Структура("ТекШтрихкод", ТекШтрихкод));
	Иначе
		ОбработкаЗавершения = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, Новый Структура("ТекШтрихкод", ТекШтрихкод));
	КонецЕсли;
	
	#Если МобильныйКлиент Тогда
		ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду",,,,,,ОбработкаЗавершения);
	#Иначе
		ОткрытьФорму(
			"Документ.ЧекККМ.Форма.ФормаВводаШтрихкода",
			Новый Структура("ТекШтрихкод", ТекШтрихкод),,,,,
			ОбработкаЗавершения);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", "Запасы");
	
	ПодключаемоеОборудованиеУНФКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтотОбъект, "Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ИмяТабличнойЧасти = "Запасы";
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти);
	
КонецПроцедуры

// Процедура рассчитывает сумму возврата наличными.
//
&НаКлиенте
Процедура РассчитатьСуммуВозвратаНаличными(Команда)
	
	Если Объект.ОперацияСДенежнымиСредствами Тогда
		СуммаПредоплаты = 0;
	Иначе
		СуммаПредоплаты = Объект.Предоплата.Итог("СуммаРасчетов");
	КонецЕсли;
	
	СуммаОплатыПлатежнымиКартами = Объект.БезналичнаяОплата.Итог("Сумма");
	СуммаБезналичнойОплаты = СуммаОплатыПлатежнымиКартами + СуммаПредоплаты;
	Объект.ПолученоНаличными = Объект.СуммаДокумента
							 - ?(СуммаБезналичнойОплаты > Объект.СуммаДокумента, 0, СуммаБезналичнойОплаты);
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРеквизитыПечатиНажатие(Элемент)
	
	ОткрытьФормуРеквизитыПечати();
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеДляПробитияЧека(ТранспортныйМодуль, ЕстьАлкогольнаяПродукцияЕГАИС = Неопределено)
	
	ОбщиеПараметры = Документы.ЧекККМ.ПодготовитьДанныеДляПробитияЧека(Объект, Объект.Ссылка, ТранспортныйМодуль, ЕстьАлкогольнаяПродукцияЕГАИС, Истина);
	Возврат ОбщиеПараметры;
	
КонецФункции

// Процедура печати чека на фискальном регистраторе.
//
&НаКлиенте
Процедура ПробитьЧек()
	
	Если Объект.НомерЧекаККМ <> 0
	И НЕ КассаККМИспользоватьБезПодключенияОборудования Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;   
	
	ЭтоЧекУдаленнойФискализации = Ложь;
	Если ЭтоМобильныйКлиент 
		И ДоступноПробитиеАвтономнаяККМ Тогда
		// Необходимо добавить в очередь на пробитие
		ЭтоЧекУдаленнойФискализации = Истина;
		
		Модифицированность = Истина;
		РезультатПроведения = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		
		Если РезультатПроведения = Истина Тогда
			УстановитьРежимТолькоПросмотр();
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Для каждого ТекСтрока Из Объект.БезналичнаяОплата Цикл
		
		Если ТекСтрока.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.БанковскаяКарта")
			И НЕ ТекСтрока.ОплатаОтменена Тогда
			
			Если ЭТИспользоватьБезПодключенияОборудования Тогда
				ТекстСообщения = НСтр("ru = 'Установите флаг ""Отмена"" на закладке ""Безналичная оплата"", если деньги на карту уже возвращены.'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Вначале нужно выполнить возврат оплаты по картам.'");
			КонецЕсли;
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			Возврат;

		ИначеЕсли ТекСтрока.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.СБП")
			И НЕ ТекСтрока.ОплатаОтменена Тогда
			
			ТекстСообщения = НСтр("ru = 'Вначале нужно выполнить возврат оплаты по СБП.'");
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			Возврат;
			
		ИначеЕсли ТекСтрока.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.СертификатНСПК")
			И НЕ ТекСтрока.ОплатаОтменена Тогда
			
			ТекстСообщения = НСтр("ru = 'Вначале нужно выполнить возврат оплаты по электронному сертификату.'");
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.НомерЧекаККМ = 1;
	Если ПечатьДокументовУНФКлиент.ПечатьЧекаНевозможна(ЭтотОбъект, НСтр("ru = 'Не удалось провести документ'")) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ИспользоватьПодключаемоеОборудование // Проверка на включенную ФО "Использовать ПО"
		ИЛИ КассаККМИспользоватьБезПодключенияОборудования Тогда 
		// Внешнее оборудование не используется
		
		ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("ЧекККМВозврат_ПробитьЧек_БезПодключения_"+Объект.Запасы.Количество(), Истина, Ложь);
		РезультатЗаписи = ЗаписатьПослеФискализации(ОбщегоНазначенияКлиент.ДатаСеанса());
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
		
		Если РезультатЗаписи = Истина
		И НЕ КассаККМИспользоватьБезПодключенияОборудования Тогда
			УстановитьРежимТолькоПросмотр();
		КонецЕсли;
		Возврат;
	КонецЕсли;
		
	ИдентификаторУстройстваФР = ?(ЗначениеЗаполнено(ФискальныйРегистратор),
		ФискальныйРегистратор,
		Неопределено);
	
	Если ИдентификаторУстройстваФР <> Неопределено Тогда
		
		ЭтотОбъект.Доступность = Ложь;
		
		// Готовим данные
		ЕстьАлкогольнаяПродукцияЕГАИС = Неопределено;
		ТранспортныйМодуль = Неопределено;
		
		ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("ЧекККМВозврат_ПодготовитьДанныеДляПробитияЧека_"+Объект.Запасы.Количество(), Истина, Ложь);
		ОбщиеПараметры = ПодготовитьДанныеДляПробитияЧека(ТранспортныйМодуль, ЕстьАлкогольнаяПродукцияЕГАИС);
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
		
		ОбщиеПараметры.ДатаВремя = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбщиеПараметры", ОбщиеПараметры);
		ДополнительныеПараметры.Вставить("ЕстьАлкогольнаяПродукцияЕГАИС", ЕстьАлкогольнаяПродукцияЕГАИС);
		ДополнительныеПараметры.Вставить("ТранспортныйМодуль", ТранспортныйМодуль);
		ДополнительныеПараметры.Вставить("ИдентификаторУстройстваФР", ИдентификаторУстройстваФР);
		
		Если ОбщиеПараметры.Свойство("ЭтоВозвратПродукцииИСМПБезМарки") Тогда
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаВозвратПродукцииИСМПБезМарки", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru = 'Не указаны коды маркировки для товаров. Продолжить пробитие чека?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
		Иначе
			ПроверитьКодМаркировкиСредствамиККТ(ДополнительныеПараметры);
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // ПробитьЧек()

&НаКлиенте
Процедура ПослеЗакрытияВопросаВозвратПродукцииИСМПБезМарки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПроверитьКодМаркировкиСредствамиККТ(ДополнительныеПараметры);
	Иначе
		ЭтотОбъект.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКодМаркировкиСредствамиККТ(ДополнительныеПараметры)
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверитьКодМаркировкиСредствамиККТЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РозничныеПродажиКлиент.ПроверитьКодМаркировкиСредствамиККТ(ДополнительныеПараметры.ОбщиеПараметры, 
		ЭтотОбъект, НСтр("ru = 'Пробить чек'"), ОповещениеОЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ЕстьАлкогольнаяПродукцияЕГАИС Тогда
		
		НомерСмены = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерСмены);
		Если НомерСмены = 0 Тогда
			НомерСмены = 1;
		КонецЕсли;
		
		НомерЧека = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерЧека);
		Если НомерЧека = 0 Тогда
			НомерЧека = 1;
		КонецЕсли;
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("НомерСмены",    НомерСмены);
		ПараметрыОперации.Вставить("НомерЧека",     НомерЧека);
		ПараметрыОперации.Вставить("АдресТорговогоОбъекта", ДополнительныеПараметры.АдресТорговогоОбъекта);
		ПараметрыОперации.Вставить("СерийныйНомер", "");
		Если ПараметрыВыполнения.Свойство("ЗаводскойНомерФН") И ЗначениеЗаполнено(ПараметрыВыполнения.ЗаводскойНомерФН) Тогда
			ПараметрыОперации.СерийныйНомер = ПараметрыВыполнения.ЗаводскойНомерФН;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыОперации.СерийныйНомер) Тогда
			ПараметрыОперации.СерийныйНомер = "1";
		КонецЕсли;
		
		ИнтеграцияЕГАИСКлиент.ПередатьНемедленно(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные"),
			ПараметрыОперации,
			Новый ОписаниеОповещения("ПослеПередачиЧекаЕГАИС", ЭтотОбъект, ПараметрыВыполнения));
		
	Иначе
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеПередачиЧекаЕГАИС(Изменения, ПараметрыВыполнения) Экспорт
	
	ЕстьОшибки = (Изменения.Количество() <> 1);
	
	Ошибки = Новый Массив;
	Для Каждого ЭлементДанных Из Изменения Цикл
		Если ЗначениеЗаполнено(ЭлементДанных.ТекстОшибки) Тогда
			ЕстьОшибки = Истина;
			Ошибки.Добавить(ЭлементДанных.ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	Если Ошибки.Количество() > 0 Тогда
		Ошибки.Вставить(0, НСтр("ru = 'В процессе передачи данных в ЕГАИС возникли ошибки:'"));
	КонецЕсли;
	ОписаниеОшибки = СтрСоединить(Ошибки, Символы.ПС);
	
	ПараметрыВыполнения.ПродолжитьПечать = Не ЕстьОшибки;
	ПараметрыВыполнения.ОписаниеОшибки   = ОписаниеОшибки;
	
	ПараметрыВыполнения.Вставить("АдресЧека",   Изменения[0].ИдентификаторЗапроса);
	ПараметрыВыполнения.Вставить("ПодписьЧека", Изменения[0].Подпись);
	
	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеОшибкиПечатиЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ШапкаЧека = ПараметрыВыполнения.ВходныеПараметры;
	Попытка
		ШапкаЧека.НомерЧекаККТ = ШапкаЧека.НомерЧека + 1000000;
	Исключение
		ШапкаЧека.НомерЧекаККТ = 1000000;
	КонецПопытки;
	
	Если ШапкаЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств") Тогда
		ШапкаЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств");
	Иначе
		ШапкаЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств");
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЕстьАлкогольнаяПродукцияЕГАИС Тогда
		
		НомерСмены = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерСмены);
		Если НомерСмены = 0 Тогда
			НомерСмены = 1;
		КонецЕсли;
		
		НомерЧека = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерЧека);
		Если НомерЧека = 0 Тогда
			НомерЧека = 1;
		КонецЕсли;
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("НомерСмены",    НомерСмены);
		ПараметрыОперации.Вставить("НомерЧека",     НомерЧека + 1000000);
		ПараметрыОперации.Вставить("АдресТорговогоОбъекта", ДополнительныеПараметры.АдресТорговогоОбъекта);
		ПараметрыОперации.Вставить("СерийныйНомер", "");
		Если ПараметрыВыполнения.Свойство("ЗаводскойНомерФН") И ЗначениеЗаполнено(ПараметрыВыполнения.ЗаводскойНомерФН) Тогда
			ПараметрыОперации.СерийныйНомер = ПараметрыВыполнения.ЗаводскойНомерФН;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыОперации.СерийныйНомер) Тогда
			ПараметрыОперации.СерийныйНомер = "1";
		КонецЕсли;
		
		ИнтеграцияЕГАИСКлиент.ПередатьНемедленно(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию"),
			ПараметрыОперации,
			Новый ОписаниеОповещения("ПослеПередачиОтменыЧекаЕГАИС", ЭтотОбъект, ПараметрыВыполнения));
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаКоличестваЧековНаВозврат(ЧекККМ, Ссылка)
	
	Если Не ЗначениеЗаполнено(ЧекККМ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЧекККМВозврат.Ссылка
	|ИЗ
	|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|ГДЕ
	|	ЧекККМВозврат.Ссылка <> &Ссылка
	|	И ЧекККМВозврат.Проведен
	|	И ЧекККМВозврат.ЧекККМ = &ЧекККМ";
	
	Запрос.УстановитьПараметр("ЧекККМ", ЧекККМ);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Истина
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Процедура вызывается при нажатии кнопки НапечататьЧек командной панели.
//
&НаКлиенте
Процедура ПробитьЧекВыполнить()
	
	ЕстьПартииБезВладельца = ВТабличнойЧастиЕстьКомиссионнаяПартияБезВладельца();
	
	Если ЕстьПартииБезВладельца Тогда
		ТекстСообщения = НСтр("ru = 'В табличной части есть комиссионные партии в которых не указан владелец. Печать чека невозможна.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат
	КонецЕсли;
	
	Если НеПечататьБумажныйЧек Тогда
		Если (Не ЗначениеЗаполнено(Объект.Телефон) И ТелефонАдресЭП = "Телефон")
			Или (Не ЗначениеЗаполнено(Объект.АдресЭП) И ТелефонАдресЭП = "АдресЭП") Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Необходимо указать адрес электронной почты или телефон'"));
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПроверитьЗаполнениеПоОперацииСДС() Тогда
	
		ЕстьДругиеЧеки = ПроверкаКоличестваЧековНаВозврат(Объект.ЧекККМ, Объект.Ссылка);
		ДополнительныеПараметрыВопроса = Новый Структура("ЕстьДругиеЧеки", ЕстьДругиеЧеки);
		Если ЕстьДругиеЧеки Тогда
			ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ПробитьЧекВыполнитьЗавершение", ЭтотОбъект, ДополнительныеПараметрыВопроса);
			ТекстВопроса = НСтр("ru='Для выбранного чека уже введен чек на возврат. Продолжить пробивать текущий чек на возврат?'");
			ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Иначе
			ПробитьЧекВыполнитьЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметрыВопроса);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекВыполнитьЗавершение(КнопкаОтвета, ДополнительныеПараметры) Экспорт
	
	Если КнопкаОтвета <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ОчиститьСообщения();
	
	Если Объект.ПометкаУдаления Тогда
		
		ТекстОшибки = НСтр("ru='Документ помечен на удаление'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
		
		Отказ = Истина;
		
	КонецЕсли;
	
	ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("ЧекККМВозврат_ПроверкаЗаполнения_"+Объект.Запасы.Количество(), Истина, Ложь);
	ПроверкаЗаполненияПрошлаУспешно = ПроверитьЗаполнение();
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
	ПроверитьСуммыОплат(Отказ);
	
	Если НЕ Отказ И ПроверкаЗаполненияПрошлаУспешно Тогда
		
		Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
		ПробитьЧек();
		
		Если ДополнительныеПараметры.ЕстьДругиеЧеки Тогда
			ТекстСообщения = НСтр("ru='Для информации: для выбранного чека уже введен чек на возврат.'");
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПробитьЧекВыполнить()

&НаСервере
Функция ВТабличнойЧастиЕстьКомиссионнаяПартияБезВладельца()
	
	Возврат РаботаСКомиссионерамиКомитентамиСервер.ВТабличнойЧастиЕстьКомиссионнаяПартияБезВладельца(Объект);
	
КонецФункции

&НаКлиенте
Процедура ПроверитьСуммыОплат(Отказ)
	Если Объект.СуммаДокумента > Объект.ПолученоНаличными
		+ Объект.БезналичнаяОплата.Итог("Сумма")
		+ Объект.Предоплата.Итог("СуммаРасчетов") Тогда
		
		ТекстОшибки = НСтр("ru='Сумма оплаты меньше суммы чека'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Поле = "СуммаСдачи";
		Сообщение.Сообщить();
		
		Отказ = Истина;
		
	КонецЕсли;
КонецПроцедуры
	
&НаКлиенте
Процедура ТелефонАдресЭППриИзменении(Элемент)
	
	УправлениеНебольшойФирмойКлиент.УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрЧека(Команда)
	
	ИдентификаторУстройстваФР = ?(ЗначениеЗаполнено(ФискальныйРегистратор),
		ФискальныйРегистратор,
		Неопределено);
	
	Если ИдентификаторУстройстваФР <> Неопределено Тогда
		
		ЕстьАлкогольнаяПродукцияЕГАИС = Неопределено;
		ТранспортныйМодуль = Неопределено;
		
		ОбщиеПараметры = ПодготовитьДанныеДляПробитияЧека(ТранспортныйМодуль, ЕстьАлкогольнаяПродукцияЕГАИС);
		ОбщиеПараметры.ДатаВремя = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		РабочееМестоКассираКлиент.ПредпросмотрЧекаДенежныхДокументов(ОбщиеПараметры, ЭтаФорма, ИдентификаторУстройстваФР);

	Иначе
		
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторнаяПечатьЧека()
	
	ИдентификаторУстройстваФискальногоРегистратора = ФискальныйРегистратор;
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗавершитьПовторнуюПечатьФискальногоЧека", ЭтотОбъект);
	
	Если ЗначениеЗаполнено(ИдентификаторУстройстваФискальногоРегистратора) Тогда
		
		ПараметрыОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПечатьКопииЧека();
		ПараметрыОперации.ДокументСсылка = Объект.Ссылка;
		ПараметрыОперации.Аппаратно = Ложь;
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПечатьКопииЧека(ОповещениеПриЗавершении,
			ЭтаФорма, ИдентификаторУстройстваФискальногоРегистратора, ПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСбросаКоличества(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтрокаПоиска", НСтр("ru = 'Сбрасывать количество при изменении номенклатуры'"));
	Оповещение = Новый ОписаниеОповещения("НастройкаСбросаКоличестваЗавершение", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.НастройкиПользователей.Форма.ФормаНастройкиПользователя", СтруктураПараметров, , , , ,
		Оповещение);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, 
		Элементы.ЗапасыКонтекстноеМенюНастройкаСбросаКоличества, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НастройкиКоличества = ПолучитьНастройкиИзмененияКоличества();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиКоличества);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийРеквизитовШапкиФормы

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияСДенежнымиСредствамиПриИзменении(Элемент)
	
	ОперацияСДенежнымиСредствамиПриИзмененииНаСервере();
	УправлениеЭлементамиИОплатойПриИзмененииОперацииСДС();
	
КонецПроцедуры

&НаСервере
Процедура ОперацияСДенежнымиСредствамиПриИзмененииНаСервере()
	
	ЭтоВозвратЧастичнойПредоплаты = ЭтоВозвратЧастичнойПредоплаты();
	ЭтоВозвратАванса = ЭтоВозвратАванса();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ЗаполнитьПодписьКассира();
		
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля КассаККМ на сервере.
//
&НаСервере
Процедура КассаККМПриИзмененииНаСервере()
	
	НастроитьЭлементыСтруктурныхЕдиниц();
	
	СостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСменыНаДату(Объект.КассаККМ, ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДатаСеанса()));
	
	Если ЗначениеЗаполнено(СостояниеКассовойСмены.СтатусКассовойСмены) Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, СостояниеКассовойСмены);
		
	КонецЕсли;
	
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	
	Объект.ЭквайринговыйТерминал = Справочники.СпособыОплаты.ПолучитьЭквайринговыйТерминалПоУмолчанию(Объект.КассаККМ);
	
	ПолучитьСсылкиНаОборудование();
	
	Объект.Подразделение = Объект.КассаККМ.Подразделение;
	
	Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		
		Пользователь = Пользователи.ТекущийПользователь();
		ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновноеПодразделение");
		ОсновноеПодразделение = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		Объект.Подразделение = ОсновноеПодразделение;
		
	КонецЕсли;
	
	ЗаполнитьПодписьКассира();	
	
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
	КассаККМИспользоватьБезПодключенияОборудования = Объект.КассаККМ.ИспользоватьБезПодключенияОборудования;
	ДоступноПробитиеАвтономнаяККМ = Объект.КассаККМ.ТипКассы = Перечисления.ТипыКассККМ.АвтономнаяККМ
			И ПодключаемоеОборудованиеУНФ.ЕстьККТСАвтоматическойФискализацией(Объект.Организация);
	НеПечататьБумажныйЧек = Объект.КассаККМ.НеПечататьБумажныйЧек;
	
КонецПроцедуры // КассаККМПриИзмененииНаСервере()

// Процедура - обработчик события ПриИзменении поля КассаККМ.
//
&НаКлиенте
Процедура КассаККМПриИзменении(Элемент)
	
	КассаККМПриИзмененииНаСервере();
	НастроитьЭлементыЯчеек();
	ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтотОбъект, "Запасы", Истина);
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры // КассаККМПриИзменении()

// Процедура - обработчик события ПриИзменении поля СуммаДокумент.
//
&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	СуммаДокументаПриИзмененииНаСервере();
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура СуммаДокументаПриИзмененииНаСервере()
	
	ЭтоВозвратЧастичнойПредоплаты = ЭтоВозвратЧастичнойПредоплаты();
	ЭтоВозвратАванса = ЭтоВозвратАванса();

КонецПроцедуры
	

// Процедура - обработчик события ПриИзменении поля СуммаОплатыНаличными.
//
&НаКлиенте
Процедура ПолученоНаличнымиПриИзменении(Элемент)
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры // ПолученоНаличнымиПриИзменении()

// Процедура - обработчик события ПриИзменении поля ЭквайринговыйТерминал.
//
&НаКлиенте
Процедура ЭквайринговыйТерминалПриИзменении(Элемент)
	
	ЭквайринговыйТерминалПриИзмененииНаСервере();
	
КонецПроцедуры // ЭквайринговыйТерминалПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДанныеДляИзмененияДаты = ДокументыУНФКлиент.ДанныеДляИзмененияДаты(ЭтотОбъект, Объект);
	Если ДанныеДляИзмененияДаты.ДатаНеМенялась Тогда
		Возврат;
	КонецЕсли;
	
	ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты);
	
	// АвтоматическиеСкидки
	ДатаДокументаИзмененаВручную = Истина;
	СброситьФлагСкидкиРассчитаныКлиент("ДатаПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля СтруктурнаяЕдиница.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)
	
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
	НастроитьЭлементыЯчеек();
	
КонецПроцедуры // СтруктурнаяЕдиницаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
	
КонецПроцедуры // КомментарийПриИзменении()

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	
	РаботаСФормойКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	
КонецПроцедуры // РедактироватьЦеныИВалюту()

&НаКлиенте
Процедура ПатентПриИзменении(Элемент)
	УстановитьНалоговыйСпецРежим();
	ОбновитьЦеныИВалюту();
КонецПроцедуры
	
#КонецОбласти 

#Область ОбработчикиСобытийРеквизитовТабличнойЧастиЗапасы

&НаКлиенте
Процедура ЗапасыПередНачаломИзменения(Элемент, Отказ)
	
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
		
		// Строка не редактируется вообще
		Если Элемент.ТекущиеДанные.УслугаАгента Тогда
			Отказ = Истина
		КонецЕсли;
		
		// Поле не редактируется если агентский договор не заполнен
		Если Элемент.ТекущийЭлемент = Элементы.ЗапасыЦенаСАгентскимВознаграждением
			И Элемент.ТекущиеДанные.ДанныеАгентскогоДоговора = Неопределено Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьСбросКоличества И СбрасыватьКоличество
		И СтрокаТабличнойЧасти.Количество <> НовоеКоличествоПриИзмененииНоменклатуры Тогда
		
		ДопПараметр = Новый Структура();
		ДопПараметр.Вставить("Элемент", Элемент);
		ДопПараметр.Вставить("Количество", СтрокаТабличнойЧасти.Количество);
		Оповещение = Новый ОписаниеОповещения("ЗапасыПодтверждениеСбросаКоличестваЗавершение", ЭтотОбъект, ДопПараметр);
		ОткрытьФорму("ОбщаяФорма.ПодтверждениеСбросаКоличества", , , , , , Оповещение);
		
	Иначе
		
		Если СбрасыватьКоличество Тогда
			НовоеКоличество = НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
		ЗапасыНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество);
		
	КонецЕсли;	
	
КонецПроцедуры // ЗапасыНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗапасыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
	
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ЧекККМВозврат", НастройкиФормыВыбораНоменклатуры, Истина, "Запасы", ВыбранноеЗначение.СтруктураНастроек);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Характеристика.
//
&НаКлиенте
Процедура ЗапасыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура",	 СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",	 СтрокаТабличнойЧасти.Характеристика);
		
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки",	 	Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента",	 	Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
		
		СтруктураДанные.Вставить("СтавкаНДС", 			СтрокаТабличнойЧасти.СтавкаНДС);
		СтруктураДанные.Вставить("Цена",			 	СтрокаТабличнойЧасти.Цена);
		
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
		
	КонецЕсли;

	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, СтрокаТабличнойЧасти, СтруктураДанные);

	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	Если СтруктураДанные.Свойство("МинимальнаяЦена") 
		И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
		СтрокаТабличнойЧасти.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;			
	КонецЕсли;
	
	Если СтруктураДанные.ЭтоНабор Тогда
		
		// Наборы
		ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, СтрокаТабличнойЧасти, СтруктураДанные);
		
		// АвтоматическиеСкидки.
		СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
		// Конец АвтоматическиеСкидки
	
		#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
		Элементы.Запасы.ЗакончитьРедактированиеСтроки(Истина);
		#КонецЕсли 
		
	Иначе
		
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти();
		
	КонецЕсли;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры // ЗапасыХарактеристикаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	СуммаПередРасчетом = СтрокаТабличнойЧасти.Сумма;
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	ПересчитатьБонусыПропорционально(СтрокаТабличнойЧасти, СуммаПередРасчетом);
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
	
КонецПроцедуры // ЗапасыКоличествоПриИзменении()

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат 
	КонецЕсли;
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаВыбора поля ввода ЕдиницаИзмерения.
//
&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение 
		ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	// Цена.
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		Если КэшЗначений.ИспользоватьМинимальныеЦены
			И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
			
			СтрокаТабличнойЧасти.МинимальнаяЦена = СтрокаТабличнойЧасти.МинимальнаяЦена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
		
		КонецЕсли;
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыЕдиницаИзмеренияОбработкаВыбора()

// Процедура - обработчик события ПриИзменении поля ввода Цена.
//
&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		АгентскиеПлатежиУНФКлиентСервер.ВыделитьАгентскоеВознаграждениеВТаблице(Объект, СтрокаТабличнойЧасти);
		АгентскиеПлатежиУНФКлиентСервер.ЗаполнитьРасчетныеПоляАгентскогоВознаграждения(Объект,, ЭтаФорма);
		СтрокаУслуги = АгентскиеПлатежиУНФКлиентСервер.СтрокаУслугаАгента(Объект.Запасы, СтрокаТабличнойЧасти);
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаУслуги);
	КонецЕсли;
	
КонецПроцедуры // ЗапасыЦенаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода ПроцентСкидкиНаценки.
//
&НаКлиенте
Процедура ЗапасыПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыПроцентСкидкиНаценкиПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СуммаСкидки.
//
&НаКлиенте
Процедура ЗапасыСуммаСкидкиПриИзменении(Элемент)
	
	РассчитатьПроцентСкидки();
	
КонецПроцедуры // ЗапасыСуммаСкидкиПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ЗапасыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	// Скидка.
	Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0 И СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / ((1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100) * СтрокаТабличнойЧасти.Количество);
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	СтрокаТабличнойЧасти.СуммаСкидки = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена - СтрокаТабличнойЧасти.Сумма;
	
	// АвтоматическиеСкидки.
	СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", ЭтотОбъект.ТекущийЭлемент.ТекущийЭлемент.Имя);
		
	СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки = 0;
	СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = 0;
	СтрокаТабличнойЧасти.ОбщаяСуммаСкидкиБольшеСуммы = Ложь;
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры // ЗапасыСуммаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДС.
//
&НаКлиенте
Процедура ЗапасыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // ЗапасыСтавкаНДСПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДС.
//
&НаКлиенте
Процедура ЗапасыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);	
	
КонецПроцедуры // ЗапасыСуммаНДСПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриОкончанииРедактирования строки списка Запасы.
//
Процедура ЗапасыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПересчитатьДокументНаКлиенте();
	
	// ИнтеграцияГосИС
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПриОкончанииРедактирования");
	ДополнительныеПараметры.Вставить("ОповещениеСерверногоВызова", "ОповещениеПриОкончанииРедактированияТабличнойЧастиИС");
	СобытияФормИСУНФКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "ТабличнаяЧасть", ДополнительныеПараметры);
	// Конец ИнтеграцияГосИС
	
КонецПроцедуры

// Процедура - обработчик события ПередУдалением строки списка Запасы.
//
&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	
	// ИнтеграцияГосИС
	СобытияФормИСУНФКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "ТабличнаяЧасть", Новый Структура("ПередУдалением"));
	// Конец ИнтеграцияГосИС
	
	// Наборы
	Если Элементы.Запасы.ВыделенныеСтроки.Количество()=Объект.Запасы.Количество() Тогда
		// Если выделены все строки - проверки удаления наборов не выполняются
		Объект.ДобавленныеНаборы.Очистить();
	Иначе
		ДанныеНабора = Новый Структура("НоменклатураНабора, ХарактеристикаНабора");
		Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
			Если ДанныеНабора.НоменклатураНабора=Неопределено Тогда
				ДанныеНабора.НоменклатураНабора = ТекущиеДанныеСтроки.НоменклатураНабора;
				ДанныеНабора.ХарактеристикаНабора = ТекущиеДанныеСтроки.ХарактеристикаНабора;
			ИначеЕсли ДанныеНабора.НоменклатураНабора<>ТекущиеДанныеСтроки.НоменклатураНабора 
				ИЛИ ДанныеНабора.ХарактеристикаНабора<>ТекущиеДанныеСтроки.ХарактеристикаНабора Тогда
				// Выделены строки разных наборов
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Действие недоступно для наборов'");
				Сообщение.Поле = "Объект.Запасы";
				Сообщение.Сообщить();
				Отказ = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		Если НЕ Отказ И ЗначениеЗаполнено(ДанныеНабора.НоменклатураНабора) Тогда
			// Набор можно удалить только целиком
			Отказ = Истина;
			ДобавленныеНаборы = Объект.ДобавленныеНаборы.НайтиСтроки(ДанныеНабора);
			Оповещение = Новый ОписаниеОповещения("ЗапасыПередУдалениемЗавершение", ЭтотОбъект, ДанныеНабора);
			СписокКнопок = Новый СписокЗначений;
			Если ДобавленныеНаборы.Количество()>0 И ДобавленныеНаборы[0].Количество>1 Тогда
				// в ТЧ есть несколько одинаковых наборов
				ТекстВопроса = НСтр("ru = 'Набор можно удалить только целиком. В табличную часть добавлено несколько экземпляров данного набора'");
				СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить все'"));
				СписокКнопок.Добавить("УдалитьОдин", НСтр("ru = 'Удалить один экземпляр'"));
			Иначе
				ТекстВопроса = НСтр("ru = 'Набор можно удалить только целиком'");
				СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить'"));
			КонецЕсли; 
			СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Редактировать состав'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
			ПоказатьВопрос(Оповещение, ТекстВопроса, СписокКнопок, 0, КодВозвратаДиалога.Да);
		КонецЕсли; 
	КонецЕсли; 
	// Конец Наборы
	
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
		ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
		Если ТекущиеДанные.УслугаАгента Тогда
			Отказ = Истина;
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ДоговорПлатежногоАгента) Тогда
			АгентскиеПлатежиУНФКлиентСервер.УдалитьСтрокиАгентскогоВознаграждения(Объект.Запасы, ТекущиеДанные);
		КонецЕсли;
	КонецЕсли;
	
	// Связанные ТЧ
	Если НЕ Отказ Тогда
		Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
			СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, ТекущиеДанныеСтроки,
				ИспользоватьСерииНоменклатурыОстатки);
			ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.АкцизныеМарки, ТекущиеДанныеСтроки);
			ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.СкидкиНаценки, ТекущиеДанныеСтроки);
			ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.БонусныеБаллыКНачислению, ТекущиеДанныеСтроки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередУдалениемЗавершение(Результат, ДанныеНабора) Экспорт
	
	// Наборы
	Если Результат=Неопределено ИЛИ Результат=КодВозвратаДиалога.Отмена Тогда
		Возврат
	КонецЕсли;
	
	СтрокиНабора = Объект.Запасы.НайтиСтроки(ДанныеНабора);
	Если СтрокиНабора.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	СтрокаТабличнойЧасти = СтрокиНабора[0];
	
	Если Результат=КодВозвратаДиалога.Нет Тогда
		
		РедактироватьСоставНабора(СтрокаТабличнойЧасти);
		
	ИначеЕсли Результат=КодВозвратаДиалога.Да Тогда
		
		Для каждого Стр Из СтрокиНабора Цикл
			СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, Стр,
				ИспользоватьСерииНоменклатурыОстатки);
		КонецЦикла; 
		НаборыКлиент.УдалитьСтрокиНабора(СтрокаТабличнойЧасти.НоменклатураНабора, СтрокаТабличнойЧасти.ХарактеристикаНабора, , Объект.Запасы, Объект.ДобавленныеНаборы);
		
		Модифицированность = Истина;
		ВыполнитьДействияПослеУдаленияСтрокиЗапасов();
	
	ИначеЕсли Результат="УдалитьОдин" Тогда
		
		ДобавленныеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(ДанныеНабора);
		Если ДобавленныеСтроки.Количество()=0 ИЛИ ДобавленныеСтроки[0].Количество<=1 Тогда
			Для каждого Стр Из СтрокиНабора Цикл
				СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, Стр,
					ИспользоватьСерииНоменклатурыОстатки);
			КонецЦикла; 
			НаборыКлиент.УдалитьСтрокиНабора(СтрокаТабличнойЧасти.НоменклатураНабора, СтрокаТабличнойЧасти.ХарактеристикаНабора, , Объект.Запасы, Объект.ДобавленныеНаборы);
		Иначе
			СтароеКоличество = ДобавленныеСтроки[0].Количество;
			ДобавленныеСтроки[0].Количество = СтароеКоличество-1;
			НаборыКлиентСервер.УдалитьЭкземплярНабора(СтрокаТабличнойЧасти.НоменклатураНабора, СтрокаТабличнойЧасти.ХарактеристикаНабора, , Объект.Запасы, , СтароеКоличество);
			НаборыКлиент.УдалитьЛишниеСтрокиПодчиненнойТЧ(Объект.Запасы, Объект.СерииНоменклатуры);
			СтрокиНабора = Объект.Запасы.НайтиСтроки(ДанныеНабора);
			Для каждого Стр Из СтрокиНабора Цикл
				РассчитатьСуммуВСтрокеТабличнойЧасти(Стр);
			КонецЦикла;
		КонецЕсли;
		
		Модифицированность = Истина;
		ВыполнитьДействияПослеУдаленияСтрокиЗапасов();
	
	КонецЕсли; 
	// Конец Наборы
	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления строки списка Запасы.
//
&НаКлиенте
Процедура ЗапасыПослеУдаления(Элемент)
	
	ВыполнитьДействияПослеУдаленияСтрокиЗапасов();
	
	// ИнтеграцияГосИС
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПослеУдаления");
	ДополнительныеПараметры.Вставить("ОповещениеСерверногоВызова", "ОповещениеПриОкончанииРедактированияТабличнойЧастиИС");
	СобытияФормИСУНФКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "ТабличнаяЧасть", ДополнительныеПараметры);
	// Конец ИнтеграцияГосИС
	
КонецПроцедуры // ЗапасыПослеУдаления()

&НаКлиенте
Процедура ВыполнитьДействияПослеУдаленияСтрокиЗапасов()
	
	ПересчитатьДокументНаКлиенте();
	
	// АвтоматическиеСкидки.
	СброситьФлагСкидкиРассчитаныКлиент("УдалениеСтроки");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// Наборы
	СтрокаТабличнойЧасти = Объект.Запасы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если НЕ ТолькоПросмотр И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураНабора) И  
		(Элемент.ТекущийЭлемент = Элементы.ЗапасыНоменклатура ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗапасыХарактеристика ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗапасыКартинкаНабора ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗапасыКоличество ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗапасыЕдиницаИзмерения) Тогда 
		
		СтандартнаяОбработка = Ложь;
		РедактироватьСоставНабора(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	// Конец Наборы
	
	// АвтоматическиеСкидки
	// Размещать в конце процедуры. Возможно перезаполнение табличной части
	Если (Элемент.ТекущийЭлемент = Элементы.ЗапасыПроцентАвтоматическойСкидки ИЛИ Элемент.ТекущийЭлемент = Элементы.ЗапасыСуммаАвтоматическойСкидки)
		И НЕ ТолькоПросмотр Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьИнформациюОСкидкахКлиент()
		
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки
			И НЕ ТолькоПросмотр
			И(Элемент.ТекущийЭлемент = Элементы.ЗапасыЦенаСАгентскимВознаграждением
			ИЛИ Элемент.ТекущийЭлемент = Элементы.ЗапасыЦена) Тогда
			
			Если ЗначениеЗаполнено(ТекущиеДанные.ДанныеАгентскогоДоговора) Тогда
				ВводПараметровАгентскогоПлатежа(ТекущиеДанные, Элемент.ТекущийЭлемент);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриИзменении(Элемент)
	УстановитьДоступностьТабличныхЧастей()
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПриИзменении(Элемент)
	УстановитьДоступностьТабличныхЧастей()
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Наборы
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если Копирование И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураНабора) Тогда
		// Состав набора не копируется
		Отказ = Истина;
	КонецЕсли; 
	// Конец Наборы
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// ИнтеграцияГосИС
	СобытияФормИСУНФКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "ТабличнаяЧасть", Новый Структура("ПриНачалеРедактирования"));
	// Конец ИнтеграцияГосИС
	
	Если НоваяСтрока Тогда
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(Элемент.ТекущиеДанные, Объект, "Заказ", "ПоложениеЗаказаПокупателя");
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(Элемент.ТекущиеДанные, Объект, "Ответственный", "ПоложениеОтветственный");		
	КонецЕсли;
	
	// АвтоматическиеСкидки
	Если НоваяСтрока И Копирование И
		(Элемент.ТекущиеДанные.ПроцентАвтоматическойСкидки <> 0 ИЛИ Элемент.ТекущиеДанные.СуммаАвтоматическойСкидки <> 0) Тогда
		Элемент.ТекущиеДанные.ПроцентАвтоматическойСкидки = 0;
		Элемент.ТекущиеДанные.СуммаАвтоматическойСкидки = 0;
		РассчитатьСуммуВСтрокеТабличнойЧасти();
	ИначеЕсли ИспользоватьАвтоматическиеСкидки И НоваяСтрока И Копирование Тогда
		// Автоматические скидки стали неактуальны.
		СброситьФлагСкидкиРассчитаныКлиент("ПриНачалеРедактирования");
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	Если НоваяСтрока И Копирование Тогда
		Элемент.ТекущиеДанные.КлючСвязи = 0;
		Элемент.ТекущиеДанные.СерииНоменклатуры = "";
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, Элемент.ТекущиеДанные);
	КонецЕсли;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.Количество = НовоеКоличествоПриИзмененииНоменклатуры;
	КонецЕсли;
		
	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыСерииНоменклатуры Тогда
		ТекущиеДанныеИдентификатор = Элементы.Запасы.ТекущиеДанные.ПолучитьИдентификатор();
		ПараметрыСерийНоменклатуры = ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор);
		ОткрытьФорму("Обработка.ПодборСерийНоменклатуры.Форма", ПараметрыСерийНоменклатуры, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
		
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ХарактеристикиНабора(СтрокаТабличнойЧасти.Номенклатура, Текст);
	КонецЕсли;                              
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		СтандартнаяОбработка = Ложь;
		СтруктураОткрытия = Новый Структура;
		СтруктураОткрытия.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураОткрытия.Вставить("РежимВыбора", Истина);
		СтруктураОткрытия.Вставить("ЗакрыватьПриВыборе", Истина);
		ОткрытьФорму("РегистрСведений.СоставНаборов.Форма.ФормаРедактированияСостава", СтруктураОткрытия, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	КонецЕсли;                              
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПодтверждениеСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗапрашиватьСбросКоличества = Результат.ЗапрашиватьСбросКоличества;
		Если НЕ ЗапрашиватьСбросКоличества Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		КонецЕсли;
		Если Результат.СбрасыватьКоличество Тогда
			НовоеКоличество = Результат.НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = ДополнительныеПараметры.Количество;
		КонецЕсли;
	Иначе
		НовоеКоличество = ДополнительныеПараметры.Количество;
	КонецЕсли;
	
	ЗапасыНоменклатураПриИзмененииПродолжить(ДополнительныеПараметры.Элемент, НовоеКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество)
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия",	 СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("ДатаОбработки",	 Объект.Дата);
		
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки",	 Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента",  Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("Содержание", "");
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
		
	КонецЕсли;
	
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);		
	// Конец ДисконтныеКарты
	
	Если СкладВШапке Тогда
		СтруктураДанные.Вставить("Склад", Объект.СтруктурнаяЕдиница);
		СтруктураДанные.Вставить("Ячейка", Объект.Ячейка);
	КонецЕсли;
	
	СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанные);
	
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, СтрокаТабличнойЧасти, СтруктураДанные);

	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	Если СтруктураДанные.Свойство("МинимальнаяЦена") 
		И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
		СтрокаТабличнойЧасти.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;			
	КонецЕсли;
	
	Если СтруктураДанные.ЭтоНабор И НЕ СтруктураДанные.ИспользоватьХарактеристики Тогда
		
		// Наборы
		ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, СтрокаТабличнойЧасти, СтруктураДанные);
		
		// АвтоматическиеСкидки.
		СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
		// Конец АвтоматическиеСкидки
	
		#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
		Элементы.Запасы.ЗакончитьРедактированиеСтроки(Истина);
		#КонецЕсли 
		
	Иначе
		
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Количество = НовоеКоличество;
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
		СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		СтрокаТабличнойЧасти.НеобходимостьВводаАкцизнойМарки = СтруктураДанные.НеобходимостьВводаАкцизнойМарки;
		СтрокаТабличнойЧасти.ЯчейкаДоступна = ЯчейкаДоступна(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
		// Наборы
		СтрокаТабличнойЧасти.ЭтоНабор = СтруктураДанные.ЭтоНабор;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти();
		
		// Серии номенклатуры
		Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
			СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, ТекущиеДанныеСтроки,
				ИспользоватьСерииНоменклатурыОстатки);
		КонецЦикла;
		
		СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
		СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
		СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
		
		Если СтруктураДанные.ИспользоватьХарактеристики Тогда
			Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
				СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
				СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
			Иначе
				СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
			КонецЕсли;
		КонецЕсли;
		
		//Партии
		СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
		СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
		
		Если СтруктураДанные.ИспользоватьПартии Тогда
			Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
				СтрокаТабличнойЧасти.Партия = СтруктураВыбораНоменклатуры.Партия;
				СтруктураВыбораНоменклатуры.Партия = Неопределено;
			Иначе
				СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
			КонецЕсли;
		КонецЕсли;
		// Конец Партии
		
		СтрокаТабличнойЧасти.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
		
	КонецЕсли;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
	ПодборНоменклатурыИзСписка = Ложь;
	
	// Агентские платежи
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
		СтрокаТабличнойЧасти.ЦенаСАгентскимВознаграждением = 0;
		СтрокаТабличнойЧасти.ДоговорПлатежногоАгента = СтруктураДанные.ДоговорКонтрагента;
		СтрокаТабличнойЧасти.ДанныеАгентскогоДоговора = СтруктураДанные.ДанныеАгентскогоДоговора;
		АгентскиеПлатежиУНФКлиентСервер.ВыделитьАгентскоеВознаграждениеВТаблице(Объект, СтрокаТабличнойЧасти);
		Если СтрокаТабличнойЧасти.Цена <> 0 Тогда
			АгентскиеПлатежиУНФКлиентСервер.ЗаполнитьРасчетныеПоляАгентскогоВознаграждения(Объект,, ЭтаФорма);
			СтрокаУслуги = АгентскиеПлатежиУНФКлиентСервер.СтрокаУслугаАгента(Объект.Запасы, СтрокаТабличнойЧасти);
			РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаУслуги);
			ПересчитатьДокументНаКлиенте();
		КонецЕсли;
	КонецЕсли;
	
	//НСПК
	Если ИспользоватьОплатуСертификатамиНСПК Тогда
		СтрокаТабличнойЧасти.КодТРУ = СтруктураДанные.КодТРУ;
		СтрокаТабличнойЧасти.ВозможнаОплатаЭС = СтруктураДанные.ВозможнаОплатаЭС;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийРеквизитовТабличнойЧастиБезналичнаяОплата

&НаКлиенте
Процедура БезналичнаяОплатаПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные.ОплатаОтменена
		И Не УправлениеНебольшойФирмойВызовСервера.ЗначениеРеквизитаОбъекта(
			ТекущиеДанные.ЭквайринговыйТерминал, "ИспользоватьБезПодключенияОборудования") Тогда
		
		Отказ = Истина;
		
		СтрокаВопроса = НСтр("ru = 'Данные о возврате отправлены в банк.'") + Символы.ПС;
		СтрокаВопроса = СтрокаВопроса + НСтр("ru = 'Уверены, что хотите удалить строку?'"); 
		
		Оповещение = Новый ОписаниеОповещения("БезналичнаяОплатаПередУдалениемЗавершение", ЭтотОбъект, ТекущиеДанные);
		ПоказатьВопрос(Оповещение, СтрокаВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БезналичнаяОплатаПередУдалениемЗавершение(Результат, ТекущиеДанные) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.СуммаБонусов <> 0 Тогда
		
		Для Каждого СтрокаЗапаса Из Объект.Запасы Цикл
			СтрокаЗапаса.СуммаСкидкиОплатыБонусом = 0;
			РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаЗапаса);
		КонецЦикла;
		ПересчитатьДокументНаКлиенте();
		
	КонецЕсли;
	
	Объект.БезналичнаяОплата.Удалить(ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обработчик события ПриОкончанииРедактирования строки списка БезналичнаяОплата.
//
&НаКлиенте
Процедура БезналичнаяОплатаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не Объект.ОперацияСДенежнымиСредствами Тогда
		ПересчитатьДокументНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры // БезналичнаяОплатаПриОкончанииРедактирования()

&НаКлиенте
Процедура БезналичнаяОплатаПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.БезналичнаяОплата.ТекущиеДанные;
	
	Если ТекущаяСтрока <> Неопределено И ЗначениеЗаполнено(Объект.ЧекККМ) Тогда
		ПолучитьСсылкуНаЭквайринговыйТерминал(ТекущаяСтрока.ЭквайринговыйТерминал, ТекущаяСтрока.ОплатаОтменена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БезналичнаяОплатаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные.ОплатаОтменена Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ЧекККМ) Тогда
		
		СтандартнаяОбработка = Ложь;
		Если Элемент.ТекущиеДанные.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.Бонусы") Тогда
			ИмяКолонки = "СуммаБонусов";
		Иначе
			ИмяКолонки = "Сумма";
		КонецЕсли;
		Оповещение = Новый ОписаниеОповещения("ПослеВводаСуммыОплаты", ЭтотОбъект, Новый Структура("ИмяКолонки", ИмяКолонки));
		ПоказатьВводЧисла(Оповещение, Элемент.ТекущиеДанные[ИмяКолонки],, 15, 2);
		
	Иначе
		РозничныеПродажиКлиент.РедактироватьОплату(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаСуммыОплаты(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаОплаты = Элементы.БезналичнаяОплата.ТекущиеДанные;
	
	ТекущаяСтрокаОплаты[ДополнительныеПараметры.ИмяКолонки] = Результат;
	
	Если ТекущаяСтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.БанковскаяКарта") Тогда
		ЗаполнитьКомиссиюЭквайрераПоСтроке(Элементы.БезналичнаяОплата.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПлатежнымиКартамиОперацияОтмененаПриИзменении(Элемент)
	
	БезналичнаяОплатаПриАктивизацииСтроки(Элементы.БезналичнаяОплата);
	
КонецПроцедуры

#КонецОбласти 

#Область АгентскиеПлатежи

&НаКлиенте
Процедура ВводПараметровАгентскогоПлатежа(ТекущиеДанные, Элемент)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РедактируемаяСтрока", ТекущиеДанные);
	
	ПараметрыФормы = Новый Структура;
	Если Элемент = Элементы.ЗапасыСумма Тогда
		ПараметрыФормы.Вставить("Платеж", ТекущиеДанные.Сумма);
		ДополнительныеПараметры.Вставить("ПересчиталиСумму", Истина);
	Иначе
		ПараметрыФормы.Вставить("Платеж", ТекущиеДанные.Цена);
	КонецЕсли;
	ПараметрыФормы.Вставить("ДанныеАгентскогоДоговора",         ТекущиеДанные.ДанныеАгентскогоДоговора);
	ПараметрыФормы.Вставить("ВознаграждениеВключеноВСтоимость", Элемент = Элементы.ЗапасыЦенаСАгентскимВознаграждением);
	
	ОбработчикОповещения = Новый ОписаниеОповещения(
									"ОповещениеВводПараметровАгентскогоПлатежа" ,
									ЭтотОбъект,
									ДополнительныеПараметры);
									
	ОткрытьФорму("ОбщаяФорма.ВводПараметровАгентскогоПлатежа", ПараметрыФормы, ЭтотОбъект,,,,ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВводПараметровАгентскогоПлатежа(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	РедактируемаяСтрока = ДополнительныеПараметры.РедактируемаяСтрока;
	Если ДополнительныеПараметры.Свойство("ПересчиталиСумму") И ДополнительныеПараметры.ПересчиталиСумму Тогда
		РедактируемаяСтрока.Сумма = Результат.Платеж;
		ЗапасыСуммаПриИзменении(Неопределено);
	Иначе
		РедактируемаяСтрока.Цена = Результат.Платеж;
		ЗапасыЦенаПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Штрихкодирование

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Свойство("Штрихкод") Тогда
			ТекШтрихкод = Результат.Штрихкод;
		Иначе
			ТекШтрихкод = "";
		КонецЕсли;
	ИначеЕсли Результат <> Неопределено Тогда
		ТекШтрихкод = Результат;
	ИначеЕсли ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ТекШтрихкод") Тогда
		ТекШтрихкод = ДополнительныеПараметры.ТекШтрихкод;
	Иначе
		ТекШтрихкод = "";
	КонецЕсли;
	
	Если ПустаяСтрока(ТекШтрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	Данные = Новый Массив();
	Данные.Добавить(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1)); 
	
	ПолученыШтрихкоды(Данные);
	
КонецПроцедуры // ПоискПоШтрихкоду()

&НаКлиенте
Процедура ПоискСертификатаПоНомеруЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Свойство("Штрихкод") Тогда
			ТекНомер = Результат.Штрихкод;
		Иначе
			ТекНомер = "";
		КонецЕсли;
	ИначеЕсли Результат = Неопределено Тогда
		ТекНомер = ДополнительныеПараметры.ТекШтрихкод;
	КонецЕсли;
	
	НуженВыборИзСписка = Ложь;
	
	Если Не ПустаяСтрока(ТекНомер) Тогда
		НуженВыборИзСписка = ВыполнитьПоискСертификатаПоНомеру(ТекНомер);
	КонецЕсли;
	
	Если НуженВыборИзСписка Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВыбранныйСертификат", ЭтаФорма);
		СтруктураПараметров = Новый Структура("Адрес", АдресВыбранногоСертификатаХранилище);
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбораСертификата", СтруктураПараметров, , , , ,
			ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПоискСертификатаПоНомеру(Номер)
	
	Результат = РаботаСПодарочнымиСертификатами.ВыполнитьПоискСертификатаПоНомеру(Номер);
	
	Если Результат.Количество() = 0 Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не найден сертификат по номеру: %1'"), Номер);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	ИначеЕсли Результат.Количество() = 1 Тогда
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("ВидОплаты", Перечисления.ВидыБезналичныхОплат.ПодарочныйСертификат);
		СтруктураСтроки.Вставить("ПодарочныйСертификат", Результат[0].ПодарочныйСертификат);
		СтруктураСтроки.Вставить("НомерСертификата", Результат[0].НомерСертификата);
		СтруктураСтроки.Вставить("Сумма", Объект.СуммаДокумента
										- Объект.ПолученоНаличными
										- Объект.БезналичнаяОплата.Итог("Сумма")
										- Объект.Предоплата.Итог("СуммаРасчетов"));
		СтруктураСтроки.Вставить("СуммаПогашенияСертификата", СтруктураСтроки.Сумма);
		Если ТакойСертификатУжеЕсть(СтруктураСтроки) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'В таблице оплат уже есть такой сертификат. Повторное добавление невозможно'"));
			Возврат Ложь;
		КонецЕсли;
		ДобавитьСтрокуОплаты(СтруктураСтроки);
		ОбновитьТаблицуБезналичныхОплат();
		Возврат Ложь;
	Иначе
		АдресВыбранногоСертификатаХранилище = ПоместитьВоВременноеХранилище(Результат);
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов) Экспорт
	
	Если КэшДанныхГОСИС.Свойство("ИнтеграцияИСМП")
		ИЛИ КэшДанныхГОСИС.Свойство("ИнтеграцияЕГАИС") Тогда
		
		Для Каждого Элемент Из ДанныеШтрихкодов Цикл
			ОбработатьКодМаркировки(Элемент);
		КонецЦикла;
		
	Иначе
		
		ПолученыШтрихкодыБезГОСИС(ДанныеШтрихкодов);
		
	КонецЕсли;
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			ЗаполняемыйЭлемент = ЭлементМассива;
			Для каждого ТекЭлемент Из НеизвестныеШтрихкоды Цикл
				Если ЭлементМассива.Штрихкод = ТекЭлемент.Штрихкод Тогда
					ЗаполняемыйЭлемент = ТекЭлемент;
				КонецЕсли;
			КонецЦикла;
			МассивШтрихкодов.Добавить(ЗаполняемыйЭлемент);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыБезГОСИС(ДанныеШтрихкодов)
	
	Модифицированность = Истина;
	
	НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов);
	НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтаФорма, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтаФорма,,,,Оповещение);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкодыБезГОСИС()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	ДобавленныеСтроки = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	// Удалим пустые значения.
	ИндексЭлемента = МассивШтрихкодов.Количество() - 1;
	Пока ИндексЭлемента >= 0 Цикл
		Если НЕ ЗначениеЗаполнено(МассивШтрихкодов[ИндексЭлемента].Штрихкод) Тогда
			МассивШтрихкодов.Удалить(ИндексЭлемента);
		КонецЕсли;
			
		ИндексЭлемента = ИндексЭлемента - 1;
	КонецЦикла;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураДанные.Вставить("Дата", Объект.Дата);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	// Конец ДисконтныеКарты
	СтруктураДанные.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиница);
	СтруктураДанные.Вставить("Ячейка", Объект.Ячейка);
	
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, Неопределено, СтруктураДанные);

	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода.Количество() > 1 Тогда
			
			ПараметрыОткрытия = Новый Структура("МассивНоменклатуры, ТекШтрихкод", ДанныеШтрихкода, ТекШтрихкод);
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоДаннымШтрихкодовЗавершение"
			, ЭтотОбъект, Новый Структура("СтруктураДанные, ДобавленныеСтроки", СтруктураДанные, ДобавленныеСтроки));
			
			ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ДублиНоменклатурыПоШтрихКодам", ПараметрыОткрытия, ЭтаФорма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Продолжить;
		КонецЕсли;
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры"
			, ТекШтрихкод.Штрихкод, ДанныеШтрихкода[0].Номенклатура, ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры));
		Иначе
			
			ДанныеШтрихкода = ДанныеШтрихкода[0];
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
			ПараметрыПоиска.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			ПараметрыПоиска.Вставить("ЕдиницаИзмерения", ДанныеШтрихкода.ЕдиницаИзмерения);
			ПараметрыПоиска.Вставить("НоменклатураНабора", ПредопределенноеЗначение(
				"Справочник.Номенклатура.ПустаяСсылка"));
			МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(ПараметрыПоиска);
			Если КэшДанныхГОСИС.Свойство("ИнтеграцияИСМП")
				И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки
				И ТекШтрихкод.Свойство("ДанныеМаркировки")
				И ТекШтрихкод.ДанныеМаркировки.Разобран 
				И ЗначениеЗаполнено(ТекШтрихкод.ДанныеМаркировки.КодМаркировки) Тогда
				МассивСтрокТЧСМаркировкой = Объект.Запасы.НайтиСтроки(Новый Структура("КодМаркировки", ТекШтрихкод.ДанныеМаркировки.КодМаркировки));
				Если МассивСтрокТЧСМаркировкой.Количество() > 0 Тогда
					СтрокаСообщения = НСтр("ru = 'Код маркировки уже присутствует в чеке'");
					ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если МассивСтрокТЧ.Количество() = 0
				ИЛИ (КэшДанныхГОСИС.Свойство("ИнтеграцияЕГАИС") И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаАкцизнойМарки)
				ИЛИ (КэшДанныхГОСИС.Свойство("ИнтеграцияИСМП") И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки) Тогда
				НоваяСтрока = Объект.Запасы.Добавить();
				ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Заказ", "ПоложениеЗаказаПокупателя");
				ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Ответственный", "ПоложениеОтветственный");			
				НоваяСтрока.ТипНоменклатурыЗапас = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоЗапас;
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.ИспользоватьХарактеристики = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ИспользоватьХарактеристики;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
				Если КэшЗначений.ИспользоватьМинимальныеЦены
					И НоваяСтрока.Свойство("МинимальнаяЦена")
					И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("МинимальнаяЦена") Тогда
					
					НоваяСтрока.МинимальнаяЦена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.МинимальнаяЦена;
					
				КонецЕсли;
				НоваяСтрока.ПроцентСкидкиНаценки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПроцентСкидкиНаценки;
				НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
				НоваяСтрока.НеобходимостьВводаАкцизнойМарки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаАкцизнойМарки;
				НоваяСтрока.НеобходимостьВводаКодаМаркировки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки;
				Если НоваяСтрока.НеобходимостьВводаКодаМаркировки
					И ТекШтрихкод.Свойство("ДанныеМаркировки")
					И ТекШтрихкод.ДанныеМаркировки.Разобран Тогда
					НоваяСтрока.КодМаркировки = ТекШтрихкод.ДанныеМаркировки.КодМаркировки;
				КонецЕсли;
				Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("Склад") Тогда
					Если СписокДоступныхСкладов.НайтиПоЗначению(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Склад) = Неопределено Тогда
						ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Склад = Объект.СтруктурнаяЕдиница;
						ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Ячейка = ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка");
					КонецЕсли;
				КонецЕсли;
				ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Вставить("СписокДоступныхСкладов", СписокДоступныхСкладов);
				НоваяСтрока.СтруктурнаяЕдиница = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Склад;
				НоваяСтрока.Ячейка = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Ячейка;
				Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
					// Наборы
					ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, НоваяСтрока, ДанныеШтрихкода.СтруктураДанныеНоменклатуры);
					// Конец Наборы
					// АвтоматическиеСкидки.
					СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
					// Конец АвтоматическиеСкидки
				Иначе
					РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
					Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
					Если НоваяСтрока.НеобходимостьВводаАкцизнойМарки
						ИЛИ (НоваяСтрока.НеобходимостьВводаКодаМаркировки И НЕ ЗначениеЗаполнено(НоваяСтрока.КодМаркировки)) Тогда
						ДобавленныеСтроки.Добавить(НоваяСтрока);
					КонецЕсли;
				КонецЕсли;
			Иначе
				НоваяСтрока = МассивСтрокТЧ[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				Если НоваяСтрока.НеобходимостьВводаАкцизнойМарки 
					ИЛИ (НоваяСтрока.НеобходимостьВводаКодаМаркировки И НЕ ЗначениеЗаполнено(НоваяСтрока.КодМаркировки)) Тогда
					ДобавленныеСтроки.Добавить(НоваяСтрока);
				КонецЕсли;
			КонецЕсли;
			
			Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
				СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
			КонецЕсли;
			
			// Агентские платежи
			Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
				НоваяСтрока.ЦенаСАгентскимВознаграждением = 0;
				НоваяСтрока.ДоговорПлатежногоАгента = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ДоговорКонтрагента;
				НоваяСтрока.ДанныеАгентскогоДоговора = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ДанныеАгентскогоДоговора;
				АгентскиеПлатежиУНФКлиентСервер.ВыделитьАгентскоеВознаграждениеВТаблице(Объект, НоваяСтрока);
				Если НоваяСтрока.Цена <> 0 Тогда
					АгентскиеПлатежиУНФКлиентСервер.ЗаполнитьРасчетныеПоляАгентскогоВознаграждения(Объект,, ЭтаФорма);
					СтрокаУслуги = АгентскиеПлатежиУНФКлиентСервер.СтрокаУслугаАгента(Объект.Запасы, НоваяСтрока);
					РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаУслуги);
					ПересчитатьДокументНаКлиенте();
				КонецЕсли;
			КонецЕсли;
			
			// НСПК
			Если ИспользоватьОплатуСертификатамиНСПК Тогда
				НоваяСтрока.КодТРУ = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.КодТРУ;
				НоваяСтрока.ВозможнаОплатаЭС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ВозможнаОплатаЭС;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ПересчитатьДокументНаКлиенте();
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа, ДобавленныеСтроки",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа, ДобавленныеСтроки);
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаКлиенте
Процедура ЗаполнитьПоДаннымШтрихкодовЗавершение(СтруктураНоменклатуры, Параметры) Экспорт 
	
	Если СтруктураНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеШтрихкода = СтруктураНоменклатуры.МассивНоменклатуры[0];
	ТекШтрихкод = СтруктураНоменклатуры.ТекШтрихкод;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	СтруктураДанные = Параметры.СтруктураДанные;
	ДобавленныеСтроки = Параметры.ДобавленныеСтроки;
	
	Если СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено Тогда
		ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры", ТекШтрихкод.Штрихкод, ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры));
	Иначе
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
		ПараметрыПоиска.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
		ПараметрыПоиска.Вставить("ЕдиницаИзмерения", ДанныеШтрихкода.ЕдиницаИзмерения);
		ПараметрыПоиска.Вставить("НоменклатураНабора", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
		МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(ПараметрыПоиска);
		Если КэшДанныхГОСИС.Свойство("ИнтеграцияИСМП")
			И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки
			И ТекШтрихкод.Свойство("ДанныеМаркировки")
			И ТекШтрихкод.ДанныеМаркировки.Разобран 
			И ЗначениеЗаполнено(ТекШтрихкод.ДанныеМаркировки.КодМаркировки) Тогда
			МассивСтрокТЧСМаркировкой = Объект.Запасы.НайтиСтроки(Новый Структура("КодМаркировки", ТекШтрихкод.ДанныеМаркировки.КодМаркировки));
			Если МассивСтрокТЧСМаркировкой.Количество() > 0 Тогда
				СтрокаСообщения = НСтр("ru = 'Код маркировки уже присутствует в чеке'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если МассивСтрокТЧ.Количество() = 0
			ИЛИ (КэшДанныхГОСИС.Свойство("ИнтеграцияЕГАИС") И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаАкцизнойМарки)
			ИЛИ (КэшДанныхГОСИС.Свойство("ИнтеграцияИСМП") И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки) Тогда
			НоваяСтрока = Объект.Запасы.Добавить();
			ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Заказ", "ПоложениеЗаказаПокупателя");
			НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
			НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
			НоваяСтрока.ИспользоватьХарактеристики = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ИспользоватьХарактеристики;
			НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
			НоваяСтрока.Количество = ТекШтрихкод.Количество;
			НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
			НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
			НоваяСтрока.ПроцентСкидкиНаценки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПроцентСкидкиНаценки;
			НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
			НоваяСтрока.НеобходимостьВводаАкцизнойМарки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаАкцизнойМарки;
			НоваяСтрока.НеобходимостьВводаКодаМаркировки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки;
			НоваяСтрока.ТипНоменклатурыЗапас = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоЗапас;
			Если НоваяСтрока.НеобходимостьВводаКодаМаркировки
				И ТекШтрихкод.Свойство("ДанныеМаркировки")
				И ТекШтрихкод.ДанныеМаркировки.Разобран Тогда
				НоваяСтрока.КодМаркировки = ТекШтрихкод.ДанныеМаркировки.КодМаркировки;
			КонецЕсли;
			Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
				// Наборы
				ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, НоваяСтрока, ДанныеШтрихкода.СтруктураДанныеНоменклатуры);
				// Конец Наборы
				// АвтоматическиеСкидки.
				СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
				// Конец АвтоматическиеСкидки
			Иначе
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				Если НоваяСтрока.НеобходимостьВводаАкцизнойМарки
					ИЛИ (НоваяСтрока.НеобходимостьВводаКодаМаркировки И НЕ ЗначениеЗаполнено(НоваяСтрока.КодМаркировки)) Тогда
					ДобавленныеСтроки.Добавить(НоваяСтрока);
				КонецЕсли;
			КонецЕсли;
		Иначе
			НоваяСтрока = МассивСтрокТЧ[0];
			НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
			РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
			Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Если НоваяСтрока.НеобходимостьВводаАкцизнойМарки 
				ИЛИ (НоваяСтрока.НеобходимостьВводаКодаМаркировки И НЕ ЗначениеЗаполнено(НоваяСтрока.КодМаркировки)) Тогда
				ДобавленныеСтроки.Добавить(НоваяСтрока);
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
			СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
		КонецЕсли;
		
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);

	ВыполнитьДействияПоЗавершениюДобавленияШКСервер();

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКодМаркировки(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ИсходныеДанные.Свойство("Количество") Тогда
		ПересчитатьДокументНаКлиенте();
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования = ШтрихкодированиеИСКлиент.ПараметрыСканирования(ЭтотОбъект);
	
	ШтрихкодКоличество = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ИсходныеДанные, Ложь);
	// ++( ГосИС 1.1.1.12
	//ШтрихкодКоличество.Штрихкод = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(ИсходныеДанные.Штрихкод);
	ШтрихкодированиеИСКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ШтрихкодКоличество);
	//)++
	
	РезультатОбработки = ОбработатьВводШтрихкода(ШтрихкодКоличество, Неопределено, ПараметрыСканирования);
	
	ПересчитатьДокументНаКлиенте();
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования);
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") 
		И ДополнительныеПараметры.Свойство("ЭтоВызовОповещенияОбработкиКодаМаркировки")
		И ДополнительныеПараметры.ЭтоВызовОповещенияОбработкиКодаМаркировки Тогда
		
		ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода.ТребуетсяСопоставлениеНоменклатуры = Ложь;
		
	КонецЕсли;
	ШтрихкодированиеИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
	Если ТребуетсяОбработкаШтрихкода Тогда
		
		// приводим к ожидаемому типу
		Если ТипЗнч(ИсходныеДанные) = Тип("Структура") Тогда
			МассивШтрихкодов = Новый Массив();
			МассивШтрихкодов.Добавить(ИсходныеДанные);
		ИначеЕсли  ТипЗнч(ИсходныеДанные) = Тип("Массив") Тогда
			МассивШтрихкодов = ИсходныеДанные;
		КонецЕсли;
		
		ПолученыШтрихкодыБезГОСИС(МассивШтрихкодов);
		ТребуетсяОбработкаШтрихкода = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОбработкаКодаМаркировкиВыполнитьДействие(ДанныеДляВыполненияДействия, ДополнительныеПараметры) Экспорт
	
	РезультатВыбора             = ДанныеДляВыполненияДействия.РезультатВыбора;
	РезультатОбработкиШтрихкода = ДанныеДляВыполненияДействия.РезультатОбработкиШтрихкода;
	КэшированныеЗначения        = ДанныеДляВыполненияДействия.КэшированныеЗначения;
	ПараметрыСканирования       = ДанныеДляВыполненияДействия.ПараметрыСканирования;
	
	Действие = ДанныеДляВыполненияДействия.Действие;
	РезультатОбработкиШтрихкода = ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(
		ДанныеДляВыполненияДействия.ИсходныеДанные, РезультатОбработкиШтрихкода, ДанныеДляВыполненияДействия.ПараметрыСканирования);
	ШтрихкодированиеИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецФункции

&НаСервере
Функция ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения)
	
	ПараметрыОбработкиВыбора    = ШтрихкодированиеИС.ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ВыполнитьДействие(ЭтотОбъект, Действие, ПараметрыОбработкиВыбора);
	
	ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
	ПересчитатьДокументНаКлиенте();
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	// Преобразование весовых штрихкодов, т. к. они не были преобразованы библиотекой
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодамВМассиве(СтруктураДанные.МассивШтрихкодов, СтруктураДанные.СтруктурнаяЕдиница);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		МассивДанныхШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если МассивДанныхШтрихкода <> Неопределено
			И МассивДанныхШтрихкода.Количество() <> 0 Тогда
			
			Для Каждого ДанныеШтрихкода Из МассивДанныхШтрихкода Цикл 
				
				СтруктураДанныеНоменклатуры = Новый Структура();
				СтруктураДанныеНоменклатуры.Вставить("Организация", СтруктураДанные.Организация);
				СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
				СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
				СтруктураДанныеНоменклатуры.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
				СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", СтруктураДанные.НалогообложениеНДС);
				СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", СтруктураДанные.Дата);
				Если ЗначениеЗаполнено(СтруктураДанные.ВидЦен) Тогда
					СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", СтруктураДанные.Дата);
					СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", СтруктураДанные.ВалютаДокумента);
					СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", СтруктураДанные.СуммаВключаетНДС);
					СтруктураДанныеНоменклатуры.Вставить("ВидЦен", СтруктураДанные.ВидЦен);
					Если ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения)
						И ТипЗнч(ДанныеШтрихкода.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
						СтруктураДанныеНоменклатуры.Вставить("Коэффициент", ДанныеШтрихкода.ЕдиницаИзмерения.Коэффициент);
					Иначе
						СтруктураДанныеНоменклатуры.Вставить("Коэффициент", 1);
					КонецЕсли;
					СтруктураДанныеНоменклатуры.Вставить("Содержание", "");
					СтруктураДанныеНоменклатуры.Вставить("ВидСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки);
				КонецЕсли;
				// ДисконтныеКарты
				СтруктураДанныеНоменклатуры.Вставить("ПроцентСкидкиПоДисконтнойКарте", СтруктураДанные.ПроцентСкидкиПоДисконтнойКарте);
				СтруктураДанныеНоменклатуры.Вставить("ДисконтнаяКарта", СтруктураДанные.ДисконтнаяКарта);
				// Конец ДисконтныеКарты 
				
				// МинимальныеЦены
				Если СтруктураДанные.Свойство("СтруктурнаяЕдиница") Тогда
					СтруктураДанныеНоменклатуры.Вставить("СтруктурнаяЕдиница", СтруктураДанные.СтруктурнаяЕдиница);					
				КонецЕсли;
				// Конец МинимальныеЦены
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтруктураДанные, "ЭтоНовыйОбъект") Тогда
					СтруктураДанныеНоменклатуры.Вставить("ЭтоНовыйОбъект", СтруктураДанные.ЭтоНовыйОбъект);
				КонецЕсли;
				
				ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
				
				Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
					ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	Для каждого парам Из Метаданные.Документы.ЧекККМВозврат.ТабличныеЧасти.Запасы.Реквизиты.Номенклатура.ПараметрыВыбора Цикл
		Если парам.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(парам.Значение)=Тип("ФиксированныйМассив") Тогда
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", парам.Значение);
			Иначе
			    МассивТипов = Новый Массив;
				МассивТипов.Добавить(парам.Значение);
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаСервере
Процедура ВыполнитьДействияПоЗавершениюДобавленияШКСервер()
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаСервере
Функция ОбработатьВводШтрихкода(ШтрихкодКоличество, КэшированныеЗначения, ПараметрыСканирования = Неопределено)
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ОбработатьВводШтрихкода(
		ЭтотОбъект, ШтрихкодКоличество, КэшированныеЗначения, ПараметрыСканирования);
		
	ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	Если ТипЗнч(РезультатОбработкиШтрихкода.ДобавленныеСтроки) = Тип("Массив") Тогда
		
		Для Каждого ДобавленнаяСтрока Из РезультатОбработкиШтрихкода.ДобавленныеСтроки Цикл
			
			СерииНоменклатурыУНФКлиентСервер.ОбновитьСтроковоеПредставлениеСерийНоменклатурыСтроки(ДобавленнаяСтрока, Объект, "КлючСвязи", "СерииНоменклатуры");
			
		КонецЦикла;
		
	КонецЕсли;

	Если ТипЗнч(РезультатОбработкиШтрихкода.ИзмененныеСтроки) = Тип("Массив") Тогда
		
		Для Каждого ИзмененнаяСтрока Из РезультатОбработкиШтрихкода.ИзмененныеСтроки Цикл
			
			СерииНоменклатурыУНФКлиентСервер.ОбновитьСтроковоеПредставлениеСерийНоменклатурыСтроки(ИзмененнаяСтрока, Объект, "КлючСвязи", "СерииНоменклатуры");
			
		КонецЦикла;
		
	КонецЕсли;
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаСервере
Процедура ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения, ПараметрыСканирования)
	
	ТребуетсяОбработкаШтрихкода = РезультатОбработкиШтрихкода.ТребуетсяОбработкаШтрихкода;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования)
	
	ПараметрыЗавершенияВводаШтрихкода = ШтрихкодированиеИСКлиент.ПараметрыЗавершенияОбработкиШтрихкода();
	ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода  = РезультатОбработки;
	ПараметрыЗавершенияВводаШтрихкода.Форма                        = ЭтотОбъект;
	ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования        = ПараметрыСканирования;
	ПараметрыЗавершенияВводаШтрихкода.ДанныеШтрихкода              = ИсходныеДанные;
	ПараметрыЗавершенияВводаШтрихкода.ЗавершениеОбработки          = "ОбработатьКодМаркировки";
	
	Возврат ПараметрыЗавершенияВводаШтрихкода;
	
КонецФункции

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОткрытьФормуУточненияДанных()
	
	ШтрихкодированиеИСКлиент.Подключаемый_ОткрытьФормуУточненияДанных(ЭтотОбъект, ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

&НаКлиенте
Функция ОписаниеОповещенияОбработкиКодаМаркировки()
	
	Возврат Новый ОписаниеОповещения("ОбработатьКодМаркировки", ЭтотОбъект, Новый Структура("ЭтоВызовОповещенияОбработкиКодаМаркировки", Истина));
	
КонецФункции

&НаСервере
Функция Подключаемый_ОбработатьВводШтрихкода(ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДанныеШтрихкода"            , ДанныеШтрихкода);
	ДополнительныеПараметры.Вставить("КэшированныеЗначения"       , КэшированныеЗначения);
	ДополнительныеПараметры.Вставить("РезультатОбработкиШтрихкода", Неопределено);
	ДополнительныеПараметры.Вставить("ПараметрыСканирования",       ПараметрыСканирования);

	СобытияФормИС.ПриИзмененииЭлемента(ЭтотОбъект, "Подключаемый_ОбработатьВводШтрихкода", ДополнительныеПараметры);

	РезультатОбработкиШтрихкода = ДополнительныеПараметры.РезультатОбработкиШтрихкода;
	КэшированныеЗначения = ДополнительныеПараметры.КэшированныеЗначения;

	ПослеОбработкиШтрихкодов(РезультатОбработкиШтрихкода, КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаСервере
Функция Подключаемый_ВыполнитьДействие(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения) Экспорт
	
	ПараметрыОбработкиВыбора	= ШтрихкодированиеИС.ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	РезультатОбработкиШтрихкода	= ВыполнитьДействиеНаСервере(Действие, ПараметрыОбработкиВыбора);
	
	ПослеОбработкиШтрихкодов(
		РезультатОбработкиШтрихкода,
		КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаСервере
Функция ВыполнитьДействиеНаСервере(Действие, ПараметрыОбработкиВыбора)
	
	Возврат ШтрихкодированиеИС.ВыполнитьДействие(ЭтотОбъект, Действие, ПараметрыОбработкиВыбора);
	
КонецФункции

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ПослеОбработкиШтрихкодов()
	
	Если ЗначениеЗаполнено(ШтрихкодДляОбработки) Тогда
		
		Штрихкод = ШтрихкодДляОбработки;
		ШтрихкодДляОбработки = Неопределено;
		
		НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(Штрихкод);
		НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
		
		Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
			
			Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);
			
			ОткрытьФорму(
				"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
				Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект,,,,Оповещение);
			
			Возврат;
			
		КонецЕсли;
		
		ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
		
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ПослеОбработкиШтрихкодов(РезультатОбработкиШтрихкода, КэшированныеЗначения) Экспорт
	
	Модифицированность = Истина;
	Если РезультатОбработкиШтрихкода.ТребуетсяОбработкаШтрихкода Тогда
		
		ШтрихкодДляОбработки = РезультатОбработкиШтрихкода.ИсходныеДанные;
		
		Если ШтрихкодДляОбработки.Свойство("Номенклатура") Тогда
		
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Номенклатура", ШтрихкодДляОбработки.Номенклатура);
			ПараметрыПоиска.Вставить("Характеристика", ШтрихкодДляОбработки.Характеристика);
			ПараметрыПоиска.Вставить("Партия", ?(ШтрихкодДляОбработки.Серия = Неопределено,
												 Справочники.ПартииНоменклатуры.ПустаяСсылка(),
												 ШтрихкодДляОбработки.Серия));
			ПараметрыПоиска.Вставить("МаркируемаяПродукция", Ложь);
			
			НайденныеСтроки = Объект.Запасы.НайтиСтроки(ПараметрыПоиска);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				НайденнаяСтрока = НайденныеСтроки[0];
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + ШтрихкодДляОбработки.Количество;
				
			Иначе
				
				НоваяСтрока = Объект.Запасы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ШтрихкодДляОбработки);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыПоиска);
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ШтрихкодДляОбработки, "ВидПродукции") Тогда
					НоваяСтрока.ВидПродукцииИС = ШтрихкодДляОбработки.ВидПродукции;
				ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ШтрихкодДляОбработки, "ВидыПродукции") Тогда
					Если ШтрихкодДляОбработки.ВидыПродукции.Количество() > 0 Тогда
						НоваяСтрока.ВидПродукцииИС = ШтрихкодДляОбработки.ВидыПродукции[0];
					КонецЕсли;
				КонецЕсли;
				
				Настройки = ИнтеграцияИСУНФ.НастройкиИсточникаКешаЧека();
				ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(ЭтотОбъект, Настройки);
				ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(ЭтотОбъект, Настройки);
				ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(ЭтотОбъект);
				
				НоменклатураВДокументахСервер.ЗаполнитьДанныеВСтрокеТабличнойЧасти(Объект, "Запасы", НоваяСтрока);
				
				НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СуммаТоваров = Объект.Запасы.Итог("Всего");
		Если Не Объект.ОперацияСДенежнымиСредствами Тогда
			Объект.СуммаДокумента = СуммаТоваров;
		КонецЕсли;
		Элементы.СуммаДокумента.СписокВыбора.Очистить();
		Если СуммаТоваров > 0 Тогда
			ПредставлениеСуммы = НСтр("ru = 'Сумма товаров (%1)'");
			ПредставлениеСуммы = СтрШаблон(ПредставлениеСуммы, СуммаТоваров);
			Элементы.СуммаДокумента.СписокВыбора.Добавить(СуммаТоваров, ПредставлениеСуммы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Процедура - обработчик команды УдалитьОплатуКартой.
//
&НаКлиенте
Процедура ОтменитьОплату(Команда)
	
	// Проверка выбранной строки в таблице оплат платежными картами
	ТекущиеДанные = Элементы.БезналичнаяОплата.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Выберите строку удаляемой оплаты картой.'"));
		Возврат;
	КонецЕсли;
	
	Если ПечатьДокументовУНФКлиент.ПечатьЧекаНевозможна(ЭтотОбъект, НСтр(
		"ru = 'Не удалось выполнить возврат оплаты картой.'")) Тогда
		Возврат;
	КонецЕсли;
		
	СуммаОперации       = ТекущиеДанные.Сумма;
	НомерСсылкиОперации = ТекущиеДанные.СсылочныйНомер;
	НомерЧекаЭТ         = ТекущиеДанные.НомерЧекаЭТ;
	
	Если ИспользоватьПодключаемоеОборудование Тогда // Проверка на включенную ФО "Использовать ВО"
	
		// Выбор устройства ЭТ
		ИдентификаторУстройстваЭТ = ?(
			ЗначениеЗаполнено(ЭквайринговыйТерминал),
			ЭквайринговыйТерминал,
			Неопределено);
		
		// Выбор устройства ФР
		ИдентификаторУстройстваФР = ?(
			ЗначениеЗаполнено(ФискальныйРегистратор),
			ФискальныйРегистратор,
			Неопределено);

	КонецЕсли;
	
	Если ТекущиеДанные.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.СБП") Тогда
		
		ЭтотОбъект.Доступность = Ложь; // Блокируем интерфейс пользователя.
		
		ДополнительныеПараметры = Новый Структура; 
		ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("ОплатаКартой_НачатьВыполнениеОперацииНаВПлатежнойСистеме", Истина, Ложь);
		ДополнительныеПараметры.Вставить("ИДЗамера", 				 ИДЗамера);
		
		Оповещение = Новый ОписаниеОповещения("ОтменаОперацииПоПлатежнойКартеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("КОплате", 			СуммаОперации);
		СтруктураПараметров.Вставить("Сумма", 				СуммаОперации);
		СтруктураПараметров.Вставить("КассаККМ", 			Объект.КассаККМ);
		СтруктураПараметров.Вставить("Документ", 			Объект);
		СтруктураПараметров.Вставить("ДокументОплаты",		Объект.ЧекККМ);  
		СтруктураПараметров.Вставить("СтруктурнаяЕдиница",	Объект.СтруктурнаяЕдиница);
		СтруктураПараметров.Вставить("ВидОперацииПродажа", 	Ложь);
		
		ОткрытьФорму("ОбщаяФорма.ФормаОплатыПлатежнойСистемой", СтруктураПараметров, ЭтотОбъект,,,, Оповещение);
		
	ИначеЕсли ТекущиеДанные.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.СертификатНСПК") Тогда
	ИначеЕсли ИдентификаторУстройстваЭТ <> Неопределено 
			И (ИдентификаторУстройстваФР <> Неопределено ИЛИ КассаККМИспользоватьБезПодключенияОборудования) Тогда
		
		ЭтотОбъект.Доступность = Ложь; // Блокируем интерфейс пользователя.
		
		ТипТранзакции = ОпределитьТипТранзакцииОплаты(НомерСсылкиОперации, СуммаОперации);
		
		ПараметрыОперации = ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
		ПараметрыОперации.ТипТранзакции  = ТипТранзакции;
		ПараметрыОперации.СуммаОперации  = СуммаОперации;
		ПараметрыОперации.НомерЧека      = НомерЧекаЭТ;
		ПараметрыОперации.СсылочныйНомер = НомерСсылкиОперации;
		
		ДополнительныеПараметры = Новый Структура; 
		ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("ОплатаКартой_НачатьВыполнениеОперацииНаЭквайринговомТерминале_"+ТипТранзакции, Истина, Ложь);
		ДополнительныеПараметры.Вставить("ИДЗамера", ИДЗамера);
		
		Оповещение = Новый ОписаниеОповещения("ОтменаОперацииПоПлатежнойКартеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОборудованиеПлатежныеСистемыКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(
			Оповещение,
			УникальныйИдентификатор, 
			ИдентификаторУстройстваЭТ,
			ПараметрыОперации,
			,
			ИдентификаторУстройстваФР);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРассрочке(Команда)
	
	Если Объект.Предоплата.Количество() > 0 Тогда
		
		ПараметрыДокумента = Новый Структура;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОбОчисткеОплатыДолгаЗавершение", ЭтотОбъект, ПараметрыДокумента);
		ТекстВопроса = НСтр("ru = 'Табличная часть будет очищена. Продожить?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьДолгиПоРассрочке()
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОбОчисткеОплатыДолгаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьДолгиПоРассрочке();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДолгиПоРассрочке()
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Дата", Объект.Дата);
	СтруктураПараметров.Вставить("Контрагент", Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор", Объект.Договор);
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("Заказ", Объект.Заказ);
	
	РозничныеПродажиСервер.ЗаполнитьДолгиПоРассрочке(Объект.Предоплата, Объект.СуммаДокумента, СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаОперацииПоПлатежнойКартеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(Параметры.ИДЗамера, Ложь);
	
	ЭтотОбъект.Доступность = Истина; // Разблокировка интерфейса пользователя.

	Если Элементы.БезналичнаяОплата.ТекущиеДанные.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.СБП") Тогда
	
		Если РезультатВыполнения <> Неопределено
			И РезультатВыполнения.Результат Тогда
			ТекущиеДанные = Элементы.БезналичнаяОплата.ТекущиеДанные;
			ТекущиеДанные.ОплатаОтменена = Истина;
			Записать();
		КонецЕсли;
			
	ИначеЕсли РезультатВыполнения.Результат Тогда
		ТекущиеДанные = Элементы.БезналичнаяОплата.ТекущиеДанные;
		ТекущиеДанные.ОплатаОтменена = Истина;
		ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("ЧекККМВозврат_ЗаписьЧекаВОтменаОперацииПоПлатежнойКартеЗавершение_"+Объект.Запасы.Количество(), Истина, Ложь);
		Записать();
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
	Иначе
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ЭквайринговыйТерминал на сервере.
//
&НаСервере
Процедура ЭквайринговыйТерминалПриИзмененииНаСервере()
	
	ПолучитьСсылкиНаОборудование();
	ПолучитьСписокВыбораВидовПлатежныхКарт();
	ЭТИспользоватьБезПодключенияОборудования = Объект.ЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования;
	Элементы.ОплатаПлатежнымиКартамиОтменитьОплату.Видимость = НЕ ЭТИспользоватьБезПодключенияОборудования ИЛИ ПлатежнаяСистема_ВозможенВозврат;
	
КонецПроцедуры // ЭквайринговыйТерминалПриИзмененииНаСервере()

#Область ОплатаНСПК

&НаКлиенте
Процедура ВозвратЭСНСПКНаКлиенте(СтруктураПараметров)
	
	СтрокиСПустымКоличеством = Объект.Запасы.НайтиСтроки(Новый Структура("Количество", 0));
	Для Каждого СтрокаСПустымКоличеством Из СтрокиСПустымКоличеством Цикл
		ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'В строке товаров не указано количество'"),, "Объект.Товары");
		Возврат;
	КонецЦикла;
	
	СтрокиДляОплатыЭС = Объект.Запасы.НайтиСтроки(Новый Структура("ВозможнаОплатаЭС", Истина));
	
	Если СтрокиДляОплатыЭС.Количество() = 0 Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'В документе не выбраны товары из классификатора ФСС, либо у товаров не указан код ТРУ ФСС.'"));
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ЧекККМ) Тогда
		ТекущиеДанные = Элементы.БезналичнаяОплата.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено
			ИЛИ НЕ ТекущиеДанные.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.СертификатНСПК") Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Выберите строку с видом оплаты платежной системой ЭС (ФЗ-491)'"));
				
			Возврат;
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ЧекККМ) Тогда
		СтрокиДляОплатыЭС = Объект.Запасы.НайтиСтроки(Новый Структура("ВозможнаОплатаЭС", Ложь));
		
		Если СтрокиДляОплатыЭС.Количество() > 0 Тогда
			ПоказатьПредупреждение(,
			НСтр("ru = 'При возврате без основания в документе должны быть выбраны товары только из классификатора ФСС'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("КассаККМ", Объект.КассаККМ);
	ДополнительныеПараметры.Вставить("ЭтоВозврат", Истина);
	ДополнительныеПараметры.Вставить("ИмяОбработкиОповещения", "ОповещениеВозвратаЭСНСПК");
	
	Если ЗначениеЗаполнено(Объект.ЧекККМ) Тогда
		
		СуммаПК = 0;
		ЗаполнитьЛимитВозвратаНаКартуНСПКНаСервере(СуммаПК, Объект.ЧекККМ);
		
		ДополнительныеПараметры.Вставить("СуммаЧека", СтруктураПараметров.Сумма);
		ДополнительныеПараметры.Вставить("СуммаПК", СуммаПК);
		ДополнительныеПараметры.Вставить("ИдентификаторКорзины", ТекущиеДанные.СсылочныйНомер);
		ДополнительныеПараметры.Вставить("ИдентификаторСтрокиВозврата", ТекущиеДанные.ПолучитьИдентификатор());
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ЧекККМ) Тогда
		
		ДополнительныеПараметры.Вставить("СуммаЧека", СтруктураПараметров.Сумма);
		
	КонецЕсли;
	
	ОповещениеВозвратаЭСНСПК(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВозвратаЭСНСПК(ДополнительныеПараметры)
	
	ТоварныеПозиции = Новый Массив();
	СтрокиДляОплатыЭС = Объект.Запасы.НайтиСтроки(Новый Структура("ВозможнаОплатаЭС", Истина));
	
	Для Каждого СтрокаТоваров Из СтрокиДляОплатыЭС Цикл
		ТоварнаяПозиция = Новый Структура();
		ТоварнаяПозиция.Вставить("Номенклатура", СтрокаТоваров.Номенклатура);
		ТоварнаяПозиция.Вставить("КодТовараТРУ", СтрокаТоваров.КодТРУ);
		ТоварнаяПозиция.Вставить("Количество", СтрокаТоваров.Количество);
		ТоварнаяПозиция.Вставить("Цена", Окр(СтрокаТоваров.Всего/СтрокаТоваров.Количество, 2));
		ТоварнаяПозиция.Вставить("Сумма", СтрокаТоваров.Всего);
		ТоварныеПозиции.Добавить(ТоварнаяПозиция);
	КонецЦикла;
	
	ДополнительныеПараметры.Вставить("ТоварныеПозиции", ТоварныеПозиции);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВозвратаЭСНСПК", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.ФормаОплатыЭСНСПК",
		ДополнительныеПараметры,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатВозвратаЭСНСПК(Знач РезультатВыполнения = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатВыполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВыполнения.Результат Тогда
		
		ИдентификаторСтрокиВозврата = Неопределено;
		
		Если НЕ ДополнительныеПараметры = Неопределено Тогда
			ДополнительныеПараметры.Свойство("ИдентификаторСтрокиВозврата", ИдентификаторСтрокиВозврата);
		КонецЕсли;
		
		ОбработатьРезультатВозвратаЭСНСПКНаСервере(РезультатВыполнения, ИдентификаторСтрокиВозврата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатВозвратаЭСНСПКНаСервере(РезультатВыполнения, ИдентификаторСтрокиВозврата)
	
	ЭквайринговыйТерминалНСПК = Неопределено;
	
	Если РезультатВыполнения.Свойство("СуммаЭлектронногоСертификата") И РезультатВыполнения.СуммаЭлектронногоСертификата > 0 Тогда
		
		ВидОплатыПлатежнаяСистемаНСПК = Неопределено;
		ЭлектронныеСертификатыНСПКРМКУНФ.ЗаполнитьВидОплатыПлатежнаяСистемаНСПК(ВидОплатыПлатежнаяСистемаНСПК);
		
		Если ЗначениеЗаполнено(Объект.ЧекККМ) Тогда
			СтрокаЭСНСПК = Объект.БезналичнаяОплата.НайтиПоИдентификатору(ИдентификаторСтрокиВозврата);
			Если СтрокаЭСНСПК = Неопределено ИЛИ
				НЕ СтрокаЭСНСПК.ВидОплаты = ВидОплатыПлатежнаяСистемаНСПК Тогда
				
				СтрокиЭСНСПК = Объект.БезналичнаяОплата.НайтиСтроки(Новый Структура("ВидОплаты", ВидОплатыПлатежнаяСистемаНСПК));
				Если СтрокиЭСНСПК.Количество() > 0 Тогда
					СтрокаЭСНСПК = СтрокиЭСНСПК[0];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаЭСНСПК = Неопределено Тогда
			СтрокаЭСНСПК = Объект.БезналичнаяОплата.Добавить();
			СтрокаЭСНСПК.ВидОплаты = ВидОплатыПлатежнаяСистемаНСПК;
		КонецЕсли;
		
		СтрокаЭСНСПК.Сумма = РезультатВыполнения.СуммаЭлектронногоСертификата;
		
		Если НЕ ЗначениеЗаполнено(ЭквайринговыйТерминалНСПК) Тогда
			ЭквайринговыйТерминалНСПК = Справочники.СпособыОплаты.НайтиПоРеквизиту(
					"ПодключаемоеОборудование", РезультатВыполнения.ИдентификаторУстройства);
		КонецЕсли;
		
		СтрокаЭСНСПК.ЭквайринговыйТерминал = ЭквайринговыйТерминалНСПК;
		СтрокаЭСНСПК.НомерЧекаЭТ = РезультатВыполнения.НомерЧекаЭТ;
		СтрокаЭСНСПК.НомерПлатежнойКарты = РезультатВыполнения.НомерКарты;
		СтрокаЭСНСПК.СсылочныйНомер = РезультатВыполнения.ИдентификаторКорзины;
		
		СтрокаЭСНСПК.ОплатаОтменена = Истина;
		
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("СуммаСобственныхСредств") И РезультатВыполнения.СуммаСобственныхСредств >0 Тогда
		
		ВидОплатыПлатежнаяКартаНСПК = Неопределено;
		ЭлектронныеСертификатыНСПКРМКУНФ.ЗаполнитьВидОплатыПлатежнаяКартаНСПК(ВидОплатыПлатежнаяКартаНСПК);
		
		Если ЗначениеЗаполнено(Объект.ЧекККМ) Тогда
			СтрокиПКНСПК = Объект.БезналичнаяОплата.НайтиСтроки(
				Новый Структура("ВидОплаты", ВидОплатыПлатежнаяКартаНСПК));
			Если СтрокиПКНСПК.Количество() > 0 Тогда
				СтрокаПКНСПК = СтрокиПКНСПК[0];
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаПКНСПК = Неопределено Тогда
			СтрокаПКНСПК = Объект.БезналичнаяОплата.Добавить();
			СтрокаПКНСПК.ВидОплаты = ВидОплатыПлатежнаяКартаНСПК;
		КонецЕсли;
		
		СтрокаПКНСПК.Сумма = РезультатВыполнения.СуммаСобственныхСредств;
		
		Если НЕ ЗначениеЗаполнено(ЭквайринговыйТерминалНСПК) Тогда
			ЭквайринговыйТерминалНСПК = Справочники.СпособыОплаты.НайтиПоРеквизиту(
				"ПодключаемоеОборудование",
				РезультатВыполнения.ИдентификаторУстройства);
		КонецЕсли;
			
		СтрокаПКНСПК.ЭквайринговыйТерминал = ЭквайринговыйТерминалНСПК;
		СтрокаПКНСПК.НомерЧекаЭТ = РезультатВыполнения.НомерЧекаЭТ;
		СтрокаПКНСПК.НомерПлатежнойКарты = РезультатВыполнения.НомерКарты;
		СтрокаПКНСПК.СсылочныйНомер = РезультатВыполнения.СсылочныйНомер;
		
		Если ЗначениеЗаполнено(ЭквайринговыйТерминалНСПК) Тогда
			СтруктураПоиска = Новый Структура("ПлатежнаяСистема", Перечисления.ТипыПлатежнойСистемыККТ.СертификатНСПК);
			МассивВидовОплат = ЭквайринговыйТерминалНСПК.ВидыПлатежныхКарт.НайтиСтроки(СтруктураПоиска);
			Если МассивВидовОплат.Количество() > 0 Тогда
				СтрокаПКНСПК.ВидПлатежнойКарты = МассивВидовОплат[0].ВидПлатежнойКарты;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаПКНСПК.ОплатаОтменена = Истина;
	Иначе
		
		ВидОплатыПлатежнаяКартаНСПК = Неопределено;
		ЭлектронныеСертификатыНСПКРМКУНФ.ЗаполнитьВидОплатыПлатежнаяКартаНСПК(ВидОплатыПлатежнаяКартаНСПК);
		СтрокаПКНСПК = Неопределено;
		
		СтрокиПКНСПК = Объект.БезналичнаяОплата.НайтиСтроки(
			Новый Структура("ВидОплаты, ОплатаОтменена", ВидОплатыПлатежнаяКартаНСПК, Ложь));
		Если СтрокиПКНСПК.Количество() > 0 Тогда
			СтрокаПКНСПК = СтрокиПКНСПК[0];
		КонецЕсли;
		Если НЕ СтрокаПКНСПК = Неопределено Тогда
			Объект.БезналичнаяОплата.Удалить(СтрокаПКНСПК);
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("Наличными") И РезультатВыполнения.Наличными > 0 Тогда
		Объект.ПолученоНаличными = РезультатВыполнения.Наличными;
	КонецЕсли;
	
	СуммаСдачи = 0;
	Если РезультатВыполнения.Свойство("Сдача") И РезультатВыполнения.Сдача > 0 Тогда
		СуммаСдачи = РезультатВыполнения.Сдача;
	КонецЕсли;
	
	РежимЗаписи = Новый Структура("РежимЗаписи, РежимПроведения",
	РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
	
	РежимЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Если НЕ Объект.Проведен Тогда
		Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаСеанса()) Тогда
			РежимЗаписи.РежимПроведения = РежимПроведенияДокумента.Оперативный;
		Иначе
			РежимЗаписи.РежимПроведения = РежимПроведенияДокумента.Неоперативный;
		КонецЕсли;
	КонецЕсли;
	
	Записать(РежимЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛимитВозвратаНаКартуНСПКНаСервере(СуммаПК, ЧекККМ)
	
	ЭлектронныеСертификатыНСПКРМКУНФ.ЗаполнитьЛимитВозвратаНаКартуНСПК(СуммаПК, ЧекККМ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьДанныеФискальногоЧекаНСПК()
	
	ПараметрыОперации = ПолучитьПараметрыФискальнойОперацииНСПКНаСервере(Объект.Ссылка);
	Если ПараметрыОперации = Неопределено Тогда
		Сообщение = СтрШаблон(НСтр("ru = 'Отсутствуют данные о фискализации чека: %1'"), СокрЛП(Объект.Ссылка));
		ПоказатьПредупреждение(, Сообщение, , НСтр("ru = 'Оплата сертификатом (ФЗ-491)'"));
	Иначе
		ОповещениеМетода = Новый ОписаниеОповещения("ПередатьДанныеФискальногоЧекаНСПКЗавершение", ЭтотОбъект, ПараметрыОперации);
		ЭлектронныеСертификатыНСПККлиент.НачатьПередачуДанныхФискальногоЧека(ОповещениеМетода, ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФискальнойОперацииНСПКНаСервере(ЧекККМ)
	
	ПараметрыФискальнойОперации = ЭлектронныеСертификатыНСПК.ПараметрыОперацииНСПК();
	ЭлектронныеСертификатыНСПКРМКПереопределяемый.ЗаполнитьПараметрыФискальнойОперацииНСПК(ПараметрыФискальнойОперации, ЧекККМ);
	
	Возврат ПараметрыФискальнойОперации;
	
КонецФункции

&НаКлиенте
Процедура ПередатьДанныеФискальногоЧекаНСПКЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	РезультатПередачи = Новый Структура("Результат, КодРезультата, ОписаниеОшибки", Ложь, 999, "");
	ЗаполнитьЗначенияСвойств(РезультатПередачи, РезультатВыполнения);
	
	Если Не РезультатПередачи.Результат Тогда
		Сообщение = СтрШаблон(
			НСтр("ru = 'При отправке подтверждения операции %1 на сервер произошла ошибка (код %2):
			|%3'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()),
			ДополнительныеПараметры.ИдентификаторКорзины,
			Строка(РезультатПередачи.КодРезультата),
			РезультатПередачи.ОписаниеОшибки);
			
			ПоказатьПредупреждение(, Сообщение, , НСтр("ru = 'Оплата сертификатом (ФЗ-491)'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

