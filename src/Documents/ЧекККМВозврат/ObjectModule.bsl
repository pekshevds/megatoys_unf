#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Функция СуммаРассрочки()
	
	ПараметрыПоиска = Новый Структура("ВидОплаты", Перечисления.ВидыБезналичныхОплат.ОплатаВРассрочку);
	НайденныеСтрокиРассрочки = БезналичнаяОплата.НайтиСтроки(ПараметрыПоиска);
	
	Если Не НайденныеСтрокиРассрочки.Количество() Тогда
		Возврат 0
	КонецЕсли;

	Возврат НайденныеСтрокиРассрочки[0].Сумма;
	
КонецФункции

// Процедура заполнения документа на основании расходного кассового ордера.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоЧекуККМ(ДанныеЗаполнения) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("ДокументСсылка.ЧекККМ") Тогда
		
		ВызватьИсключение НСтр("ru = 'Чеки ККМ на возврат должны вводиться на основании чеков ККМ'");
		
	КонецЕсли;
	
	// Заполним данные шапки документа.
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЧекККМ.ВалютаДокумента КАК ВалютаДокумента,
	|	ЧекККМ.Ссылка КАК ЧекККМ,
	|	ЧекККМ.ВидЦен КАК ВидЦен,
	|	ЧекККМ.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
	|	ЧекККМ.Организация КАК Организация,
	|	ЧекККМ.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ЧекККМ.КассаККМ КАК КассаККМ,
	|	ЧекККМ.КассоваяСмена КАК КассоваяСмена,
	|	ЧекККМ.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЧекККМ.Ячейка КАК Ячейка,
	|	ЧекККМ.Подразделение КАК Подразделение,
	|	ЧекККМ.ПоложениеОтветственный КАК ПоложениеОтветственный,
	|	ЧекККМ.Ответственный КАК Ответственный,
	|	ЧекККМ.Организация.ПодписьРуководителя КАК ПодписьРуководителя,
	|	ЧекККМ.ПодписьКассира КАК ПодписьКассира,
	|	ЧекККМ.КонтактноеЛицоПодписант КАК КонтактноеЛицоПодписант,
	|	ЧекККМ.СуммаДокумента КАК СуммаДокумента,
	|	ЧекККМ.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЧекККМ.НДСВключатьВСтоимость КАК НДСВключатьВСтоимость,
	|	ЧекККМ.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|	ЧекККМ.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ЧекККМ.ПроцентСкидкиПоДисконтнойКарте КАК ПроцентСкидкиПоДисконтнойКарте,
	|	ЧекККМ.СпециальныйНалоговыйРежим КАК СпециальныйНалоговыйРежим,
	|	ЧекККМ.Патент КАК Патент,
	|	ЧекККМ.Запасы.(
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	|		Партия КАК Партия,
	|		Количество КАК Количество,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Цена КАК Цена,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|		Сумма КАК Сумма,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|		СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|		КлючСвязи КАК КлючСвязи,
	|		Заказ КАК Заказ,
	|		СерииНоменклатуры КАК СерииНоменклатуры,
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		ДоляСтоимости КАК ДоляСтоимости,
	|		НеобходимостьВводаАкцизнойМарки КАК НеобходимостьВводаАкцизнойМарки,
	|		НоменклатураЕГАИС КАК НоменклатураЕГАИС,
	|		Штрихкод КАК Штрихкод,
	|		СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом,
	|		КодМаркировки КАК КодМаркировки,
	|		СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		Ячейка КАК Ячейка,
	|		ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента,
	|		МРЦ КАК МРЦ,
	|		Ответственный КАК Ответственный
	|	) КАК Запасы,
	|	ЧекККМ.Подарки.(
	|		СкидкаНаценка КАК СкидкаНаценка,
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	|		Количество КАК Количество,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		КлючСвязи КАК КлючСвязи,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СерииНоменклатуры КАК СерииНоменклатуры,
	|		ШтрихкодУпаковки КАК ШтрихкодУпаковки
	|	) КАК Подарки,
	|	ЧекККМ.СерииПодарков.(
	|		Серия КАК Серия,
	|		Количество КАК Количество,
	|		КлючСвязи КАК КлючСвязи
	|	) КАК СерииПодарков,
	|	ЧекККМ.ДобавленныеНаборы.(
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		Количество КАК Количество
	|	) КАК ДобавленныеНаборы,
	|	ЧекККМ.БезналичнаяОплата.(
	|		ВидПлатежнойКарты КАК ВидПлатежнойКарты,
	|		НомерПлатежнойКарты КАК НомерПлатежнойКарты,
	|		ИдентификаторПлатежнойСистемы КАК ИдентификаторПлатежнойСистемы,
	|		Сумма КАК Сумма,
	|		СсылочныйНомер КАК СсылочныйНомер,
	|		НомерЧекаЭТ КАК НомерЧекаЭТ,
	|		ВидОплаты КАК ВидОплаты,
	|		ПодарочныйСертификат КАК ПодарочныйСертификат,
	|		НомерСертификата КАК НомерСертификата,
	|		ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|		БонуснаяКарта КАК БонуснаяКарта,
	|		СуммаБонусов КАК СуммаБонусов
	|	) КАК БезналичнаяОплата,
	|	ЧекККМ.НомерЧекаККМ КАК НомерЧекаККМ,
	|	ЧекККМ.Проведен КАК Проведен,
	|	ЧекККМ.СкидкиНаценки.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		КлючСвязи КАК КлючСвязи,
	|		СкидкаНаценка КАК СкидкаНаценка,
	|		Сумма КАК Сумма
	|	) КАК СкидкиНаценки,
	|	ЧекККМ.СкидкиРассчитаны КАК СкидкиРассчитаны,
	|	ЧекККМ.ПоложениеЗаказаПокупателя КАК ПоложениеЗаказаПокупателя,
	|	ЧекККМ.Заказ КАК Заказ,
	|	ЧекККМ.Контрагент КАК Контрагент,
	|	ЧекККМ.БонусныеБаллыКНачислению.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		КлючСвязи КАК КлючСвязи,
	|		СкидкаНаценка КАК СкидкаНаценка,
	|		ДатаНачисления КАК ДатаНачисления,
	|		ДатаСписания КАК ДатаСписания,
	|		КоличествоБонусныхБаллов КАК КоличествоБонусныхБаллов
	|	) КАК БонусныеБаллыКНачислению,
	|	ЧекККМ.Договор КАК Договор,
	|	ЧекККМ.СпособЗачетаПредоплаты КАК СпособЗачетаПредоплаты,
	|	ЧекККМ.Кратность КАК Кратность,
	|	ЧекККМ.Курс КАК Курс,
	|	ЧекККМ.ОперацияСДенежнымиСредствами КАК ОперацияСДенежнымиСредствами,
	|	ЧекККМ.Предоплата.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Документ КАК Документ,
	|		Заказ КАК Заказ,
	|		СуммаРасчетов КАК СуммаРасчетов,
	|		Курс КАК Курс,
	|		Кратность КАК Кратность,
	|		СуммаПлатежа КАК СуммаПлатежа
	|	) КАК Предоплата,
	|	ЧекККМ.ПоложениеСклада КАК ПоложениеСклада
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка, ,"НомерЧекаККМ, Проведен, КассоваяСмена");
	
	ТекстОшибки = "";
	
	Если НЕ Выборка.Проведен Тогда
		
		ТекстОшибки = НСтр("ru='Чек ККМ не проведен. Ввод на основании невозможен'");
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Выборка.НомерЧекаККМ) Тогда
		
		ТекстОшибки = НСтр("ru='Чек ККМ не пробит. Ввод на основании невозможен'");
	
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Если РозничныеПродажиСервер.СменаОткрыта(Выборка.КассоваяСмена, ТекущаяДата(), ТекстОшибки) Тогда
		
		КассоваяСмена = Выборка.КассоваяСмена;
		
	Иначе
		
		СостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(Выборка.КассаККМ);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СостояниеКассовойСмены,, "Ответственный");
		КассоваяСмена = СостояниеКассовойСмены.ОтчетОРозничныхПродажах;
		
	КонецЕсли;
	
	Запасы.Загрузить(Выборка.Запасы.Выгрузить());
	ДобавленныеНаборы.Загрузить(Выборка.ДобавленныеНаборы.Выгрузить());
	БезналичнаяОплата.Загрузить(Выборка.БезналичнаяОплата.Выгрузить());
	ЗаполнитьКомиссиюЭквайрера();
	БонусныеБаллыКНачислению.Загрузить(Выборка.БонусныеБаллыКНачислению.Выгрузить());
	Предоплата.Загрузить(Выборка.Предоплата.Выгрузить());
	
	СерииНоменклатурыУНФ.ЗаполнитьТЧСерииНоменклатурыПоКлючуСвязи(ЭтотОбъект, ДанныеЗаполнения);
	
	УдалитьОдноразовыеСертификаты(БезналичнаяОплата);
	УдалитьОплатуБонусами(БезналичнаяОплата);
	
	// АвтоматическиеСкидки
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		ТаблицаСкидкиНаценки = Выборка.СкидкиНаценки.Выгрузить();
		ТаблицаСкидкиНаценкиБезПодарков = ТаблицаСкидкиНаценки.СкопироватьКолонки();
		Для Каждого СтрокаСкидки Из ТаблицаСкидкиНаценки Цикл
			Если НЕ СтрокаСкидки.КлючСвязи = 0 Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаСкидкиНаценкиБезПодарков.Добавить(), СтрокаСкидки);
			КонецЕсли;
		КонецЦикла;
		СкидкиНаценки.Загрузить(ТаблицаСкидкиНаценкиБезПодарков);
		ТаблицаСкидкиНаценки = Неопределено;
		ТаблицаСкидкиНаценкиБезПодарков = Неопределено;
		// Подарки, выданные при продаже, можно принять к возврату по нулевой цене. Если подарки покупатель не возвращает - их
		// можно удалить из табличной части.
		Подарки = Выборка.Подарки.Выгрузить();
		СерииПодарковЧека = Выборка.СерииПодарков.Выгрузить();
		Для Каждого ВыданныйПодарок Из Подарки Цикл
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыданныйПодарок, ,"Сумма, КлючСвязи");
			НоваяСтрока.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
			НоваяСтрока.Заказ = Заказ;
			НоваяСтрока.Ответственный = Ответственный;
			НоваяСтрока.ПроцентАвтоматическойСкидки = 100;
			НоваяСтрока.СуммаАвтоматическойСкидки = ВыданныйПодарок.Сумма;
			НоваяСтрока.ПродажаПодарка = Истина;
			ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Запасы, НоваяСтрока, "КлючСвязи");		
			СтрокаСкидки = СкидкиНаценки.Добавить();
			СтрокаСкидки.КлючСвязи = НоваяСтрока.КлючСвязи;
			СтрокаСкидки.СкидкаНаценка = ВыданныйПодарок.СкидкаНаценка;
			СтрокаСкидки.Сумма = НоваяСтрока.СуммаАвтоматическойСкидки;
			
			// Ставка НДС
			ВидСтавкиНДСПодарка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура,"ВидСтавкиНДС");
			Если НЕ НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
				Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
					НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
				Иначе
					НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(ВидСтавкиНДСПодарка) Тогда
				НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(ВидСтавкиНДСПодарка, ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
			Иначе
				ВидСтавкиНДСПодарка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ВидСтавкиНДСПоУмолчанию");
				НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(ВидСтавкиНДСПодарка, ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
			КонецЕсли;

			ТабличныеЧастиУНФКлиентСервер.РассчитатьСуммуНДСИВсего(НоваяСтрока, Новый Структура("СуммаВключаетНДС", СуммаВключаетНДС));
			
			СерииТекущегоПодарка = СерииПодарковЧека.НайтиСтроки(Новый Структура("КлючСвязи", ВыданныйПодарок.КлючСвязи));
			Для Каждого ВыданныйПодарокСерия Из СерииТекущегоПодарка Цикл 
				СерияПодарка = СерииНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(СерияПодарка, ВыданныйПодарокСерия,, "КлючСвязи");
				СерияПодарка.КлючСвязи = НоваяСтрока.КлючСвязи;
			КонецЦикла;

		КонецЦикла;               
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	// Отмена ЕНВД
	Если ТекущаяДатаСеанса() >= УправлениеНебольшойФирмойСервер.ДатаОтменыЕНВД()
		И СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.ЕНВД Тогда
		СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Организация, СтруктурнаяЕдиница, ТекущаяДатаСеанса());
	КонецЕсли;

	// Сумма возврата наличными
	СуммаПредоплаты = 0;
	Если НЕ ОперацияСДенежнымиСредствами Тогда
		СуммаПредоплаты = Предоплата.Итог("СуммаРасчетов");
	КонецЕсли;	
	СуммаОплатыПлатежнымиКартами = БезналичнаяОплата.Итог("Сумма");
	СуммаБезналичнойОплаты = СуммаОплатыПлатежнымиКартами + СуммаПредоплаты;
	ПолученоНаличными = СуммаДокумента - ?(СуммаБезналичнойОплаты > СуммаДокумента, 0, СуммаБезналичнойОплаты);	
	
КонецПроцедуры // ЗаполнитьПоРасходномуКассовомуОрдеру()

// Добавляет дополнительные реквизиты, необходимые для проведения документа в
// переданную структуру.
//
// Параметры:
//  СтруктураДополнительныеСвойства - Структура дополнительных свойств документа.
//
Процедура ДобавитьРеквизитыВДополнительныеСвойстваДляПроведения(СтруктураДополнительныеСвойства)
	
	Если КассаККМ.ТипКассы = Перечисления.ТипыКассККМ.АвтономнаяККМ Тогда
		Если ПодключаемоеОборудованиеУНФ.ЕстьККТСАвтоматическойФискализацией(Организация) Тогда
			СтруктураДополнительныеСвойства.ДляПроведения.Вставить("ЧекПробит", ЗначениеЗаполнено(НомерЧекаККМ));
		Иначе
			СтруктураДополнительныеСвойства.ДляПроведения.Вставить("ЧекПробит", Истина);
		КонецЕсли;    
	Иначе
		СтруктураДополнительныеСвойства.ДляПроведения.Вставить("ЧекПробит", ЗначениеЗаполнено(НомерЧекаККМ));
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("Архивный", Архивный);
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("ДвиженияПоЗапасамУдалять", ДвиженияПоЗапасамУдалять);
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("ОперацияСДенежнымиСредствами", ОперацияСДенежнымиСредствами);
	
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("СуммаРассрочки", СуммаРассрочки());
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("ВозвратРассрочки", ОперацияСДенежнымиСредствами И Предоплата.Количество() >0);
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("СуммаВозвратаРассрочки", Предоплата.Итог("СуммаПлатежа"));
	
	Если ЗначениеЗаполнено(КассоваяСмена) Тогда
		ИспользоватьОптимизированнуюСхемуДвижений = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КассоваяСмена, "ОптимизированнаяСхемаДвижений");
	Иначе
		ИспользоватьОптимизированнуюСхемуДвижений = Ложь;
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.Вставить("ОптимизированнаяСхемаДвижений", ИспользоватьОптимизированнуюСхемуДвижений);
	
КонецПроцедуры // ДобавитьРеквизитыВДополнительныеСвойстваДляПроведения()

Процедура УдалитьОдноразовыеСертификаты(ТабличнаяЧасть)
	
	Для Индекс = 1 - ТабличнаяЧасть.Количество() По 0 Цикл
		Строка = ТабличнаяЧасть.Получить(-Индекс);
		Если Строка.ВидОплаты = Перечисления.ВидыБезналичныхОплат.ПодарочныйСертификат Тогда
			Если ЗначениеЗаполнено(Строка.ПодарочныйСертификат) Тогда
				Если Не Строка.ПодарочныйСертификат.ЧастичноеПогашение Тогда
					ТабличнаяЧасть.Удалить(Строка);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьОплатуБонусами(ТабличнаяЧасть)
	
	Для Индекс = 1 - ТабличнаяЧасть.Количество() По 0 Цикл
		Строка = ТабличнаяЧасть.Получить(-Индекс);
		Если Строка.ВидОплаты = Перечисления.ВидыБезналичныхОплат.Бонусы Тогда
			Если ЗначениеЗаполнено(Строка.БонуснаяКарта) Тогда
				РеквизитыБонуснойПрограммы = РаботаСБонусами.РеквизитыБонуснойПрограммы(Строка.БонуснаяКарта);
				Если Не РеквизитыБонуснойПрограммы.НачислятьБонусыПриВозврате Тогда
					ТабличнаяЧасть.Удалить(Строка);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура АссистентУправленияПриСрабатыванииСобытия()
	
	Если Не ДополнительныеСвойства.ДляПроведения.ЧекПробит Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("Начислено", -БонусныеБаллыКНачислению.Итог("КоличествоБонусныхБаллов"));
	ПараметрыСообщения.Вставить("Списано", -БезналичнаяОплата.Итог("СуммаБонусов"));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрыСообщения", ПараметрыСообщения);
	
	ЕстьНачисление = ДополнительныеПараметры.ПараметрыСообщения.Начислено <> 0;
	ЕстьСписание = ДополнительныеПараметры.ПараметрыСообщения.Списано <> 0;
	
	Событие = Неопределено;
	Если ЕстьНачисление И ЕстьСписание Тогда
		Событие = "СписаниеНачислениеБонусовПриПродаже";
	ИначеЕсли ЕстьНачисление Тогда
		Событие = "НачислениеБонусовПриПродаже";
	ИначеЕсли ЕстьСписание Тогда
		Событие = "СписаниеБонусовПриПродаже";
	КонецЕсли;
	
	Если Событие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АссистентУправления.ПриСрабатыванииСобытия(ДисконтнаяКарта, Событие, Ссылка, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ЗаполнитьКомиссиюЭквайрера()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЧекККМБезналичнаяОплата.НомерСтроки КАК НомерСтроки,
	|	ЧекККМБезналичнаяОплата.Сумма * ВЫБОР
	|		КОГДА &ЭтоОтмена
	|			ТОГДА ЭквайринговыеТерминалыВидыПлатежныхКарт.ПроцентКомиссииПриОтмене / 100
	|		ИНАЧЕ ЭквайринговыеТерминалыВидыПлатежныхКарт.ПроцентКомиссииПриВозврате / 100
	|	КОНЕЦ КАК СуммаКомиссии
	|ИЗ
	|	Документ.ЧекККМ.БезналичнаяОплата КАК ЧекККМБезналичнаяОплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОплаты.ВидыПлатежныхКарт КАК ЭквайринговыеТерминалыВидыПлатежныхКарт
	|		ПО ЧекККМБезналичнаяОплата.ЭквайринговыйТерминал = ЭквайринговыеТерминалыВидыПлатежныхКарт.Ссылка
	|			И ЧекККМБезналичнаяОплата.ВидПлатежнойКарты = ЭквайринговыеТерминалыВидыПлатежныхКарт.ВидПлатежнойКарты
	|ГДЕ
	|	ЧекККМБезналичнаяОплата.Ссылка = &Ссылка
	|	И ЧекККМБезналичнаяОплата.ВидОплаты В (ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.БанковскаяКарта), ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.СБП))");
	Запрос.УстановитьПараметр("Ссылка", ЧекККМ);
	Запрос.УстановитьПараметр("ЭтоОтмена", КассоваяСмена = ЧекККМ.КассоваяСмена);
	ТаблицаСумм = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаОплаты Из БезналичнаяОплата Цикл
		
		Если СтрокаОплаты.ВидОплаты <> Перечисления.ВидыБезналичныхОплат.БанковскаяКарта 
			И СтрокаОплаты.ВидОплаты <> Перечисления.ВидыБезналичныхОплат.СБП Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаКомиссии = ТаблицаСумм.Найти(СтрокаОплаты.НомерСтроки, "НомерСтроки");
		Если СтрокаКомиссии = Неопределено Тогда
			СтрокаОплаты.СуммаКомиссии = 0;
		Иначе
			СтрокаОплаты.СуммаКомиссии = СтрокаКомиссии.СуммаКомиссии;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоКассеККМ(КассаККМ) Экспорт
	
	СостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(КассаККМ);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СостояниеКассовойСмены);
	Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойОтветственный");
	КассоваяСмена = СостояниеКассовойСмены.ОтчетОРозничныхПродажах;
	
КонецПроцедуры // ЗаполнитьДокументПоКассеККМ()

Процедура ЗаполнитьДокументПоОтбору(ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения.Свойство("КассаККМ") Тогда
		
		ЗаполнитьДокументПоКассеККМ(ДанныеЗаполнения.КассаККМ);
		ДанныеЗаполнения.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДокументПоОтбору()

Функция ПроверитьОграниченияВозвратаНаСертификаты()
	Результат = Истина;
	ТекстПредупреждения = "";
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодарочныеСертификатыОбороты.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	ПодарочныеСертификатыОбороты.НомерСертификата КАК НомерСертификата,
	|	-СУММА(ПодарочныеСертификатыОбороты.СуммаОборот) КАК МожноВернуть
	|ИЗ
	|	РегистрНакопления.ПодарочныеСертификаты.Обороты(, , Регистратор, ) КАК ПодарочныеСертификатыОбороты
	|ГДЕ
	|	ПодарочныеСертификатыОбороты.Регистратор В
	|			(ВЫБРАТЬ
	|				ЧекККМПродажа.Ссылка КАК Ссылка
	|			ИЗ
	|				Документ.ЧекККМ КАК ЧекККМПродажа
	|			ГДЕ
	|				ЧекККМПродажа.Ссылка = &Продажа
	|				И НЕ &Продажа = ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка)
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ
	|				ВсеВозвраты.Ссылка
	|			ИЗ
	|				Документ.ЧекККМВозврат КАК ВсеВозвраты
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|					ПО
	|						ВсеВозвраты.ЧекККМ = ЧекККМВозврат.ЧекККМ
	|			ГДЕ
	|				ЧекККМВозврат.ЧекККМ = &Продажа
	|				И НЕ ВсеВозвраты.ссылка = &ЭтотВозврат
	|				И НЕ &Продажа = ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПодарочныеСертификатыОбороты.ПодарочныйСертификат,
	|	ПодарочныеСертификатыОбороты.НомерСертификата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Сертификат.Ссылка,
	|	ЕСТЬNULL(НомераСертификатов.Ссылка, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)),
	|	ВЫБОР
	|		КОГДА Сертификат.ПроизвольныйНоминал
	|			ТОГДА -1
	|		КОГДА Сертификат.Номинал > ПодарочныеСертификатыОстатки.СуммаОстаток
	|			ТОГДА Сертификат.Номинал - ПодарочныеСертификатыОстатки.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	Справочник.Номенклатура КАК Сертификат
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Серии.Ссылка КАК Ссылка,
	|			Серии.Владелец КАК Владелец
	|		ИЗ
	|			Справочник.СерииНоменклатуры КАК Серии
	|		ГДЕ
	|			Серии.Ссылка В(&НомераСертификатов)) КАК НомераСертификатов
	|		ПО Сертификат.Ссылка = НомераСертификатов.Владелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПодарочныеСертификаты.Остатки(&МоментВремени, ПодарочныйСертификат В (&Сертификаты)) КАК ПодарочныеСертификатыОстатки
	|		ПО (ПодарочныеСертификатыОстатки.ПодарочныйСертификат = Сертификат.Ссылка)
	|			И (ПодарочныеСертификатыОстатки.НомерСертификата = ЕСТЬNULL(НомераСертификатов.Ссылка, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)))
	|ГДЕ
	|	Сертификат.Ссылка В(&Сертификаты)
	|	И &Продажа = ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка)";
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	Запрос.УстановитьПараметр("Продажа",ЧекККМ);	
	Запрос.УстановитьПараметр("ЭтотВозврат",Ссылка);	
	Запрос.УстановитьПараметр("Сертификаты",БезналичнаяОплата.ВыгрузитьКолонку("ПодарочныйСертификат"));
	Запрос.УстановитьПараметр("НомераСертификатов",БезналичнаяОплата.ВыгрузитьКолонку("НомерСертификата"));
	
	ДоступноКВозврату = Запрос.Выполнить().Выгрузить();	 
	Для Каждого строкаОплатыВозврата Из БезналичнаяОплата Цикл
		
		Если НЕ строкаОплатыВозврата.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат") Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаКВозврату = строкаОплатыВозврата.Сумма;
		Отбор = Новый СТруктура("ПодарочныйСертификат, НомерСертификата", строкаОплатыВозврата.ПодарочныйСертификат, строкаОплатыВозврата.НомерСертификата);
		СтрокиОстатка = ДоступноКВозврату.НайтиСтроки(Отбор);
		Для Каждого СтрокаСертификатаМожноВернуть Из СтрокиОстатка Цикл
			Если СтрокаСертификатаМожноВернуть.МожноВернуть = -1 Тогда
				// Сертификат с произвольным номиналом, не контролируем сумму возврата на сертификат
				ВернутьПоСертификату = СуммаКВозврату;
			Иначе
				ВернутьПоСертификату = Мин(СуммаКВозврату, СтрокаСертификатаМожноВернуть.МожноВернуть);
			КонецЕсли;
			СтрокаСертификатаМожноВернуть.МожноВернуть = СтрокаСертификатаМожноВернуть.МожноВернуть - ВернутьПоСертификату;
			СуммаКВозврату = СуммаКВозврату - ВернутьПоСертификату;
			Если СуммаКВозврату = 0 Тогда 
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СуммаКВозврату > 0 Тогда
			// Общая сумма возврратов на сертификат, включая текущий, будет превышать номинал сертификата,
			// Либо общая сумма возвратов на сертификат по данной продаже будет превышать сумму списания с сертификата при данной прдаже
			// (нельзя вернуть на сертификат больше, чем было с него списано)
			Результат = Ложь;
		КонецЕсли;
	КонецЦикла;
   	Возврат Результат;
КонецФункции

Функция ЧекСодержитОплатуВстречнымПредоставлением()
	
	Результат = Ложь;
	
	Для Каждого СтрокаБезналичнойОплаты Из БезналичнаяОплата Цикл
		Если СтрокаБезналичнойОплаты.ВидОплаты = Перечисления.ВидыБезналичныхОплат.ВстречноеПредоставление Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьЗаполнениеОплат(Отказ)
	
	ОплаченоВсего = БезналичнаяОплата.Итог("Сумма") + Предоплата.Итог("СуммаРасчетов") + ПолученоНаличными;
	
	Если ОплаченоВсего < СуммаДокумента И (НЕ ОперацияСДенежнымиСредствами 
		ИЛИ Запасы.Количество() <> 0) Тогда
		
		Текст = НСтр("ru = 'Сумма всех типов оплат меньше суммы документа.'");
		ОбщегоНазначения.СообщитьПользователю(
		Текст,
		ЭтотОбъект,
		,
		,
		Отказ);
		
	КонецЕсли;
	
	Если ОплаченоВсего = 0 И СуммаДокумента > 0 Тогда
		Текст = НСтр("ru = 'Не задана оплата.'");
		ОбщегоНазначения.СообщитьПользователю(
		Текст,
		ЭтотОбъект,
		,
		,
		Отказ);
		
	КонецЕсли;
	
	ЭтоАванс = ОперацияСДенежнымиСредствами И Запасы.Количество() = 0;
	
	Если НЕ ЭтоАванс Тогда
		Если БезналичнаяОплата.Итог("Сумма") > СуммаДокумента Тогда
			
			Текст = НСтр("ru = 'Сумма безналичной оплаты не может быть больше суммы документа.'");
			ОбщегоНазначения.СообщитьПользователю(
			Текст,
			ЭтотОбъект,
			,
			,
			Отказ);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события "При копировании".
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ЧекККМ = Документы.ЧекККМ.ПустаяСсылка();
	
	НомерЧекаККМ = 0;
	НомерСменыККМ = 0;
	Телефон = "";
	АдресЭП = "";
	Архивный = Ложь;
	ДвиженияПоЗапасамУдалять = Ложь;
	СкидкиРассчитаны = Ложь;
	Оплачивается = Ложь;
	
	АкцизныеМарки.Очистить();
	
	// Очистим информацию о заказе покупателя.
	Заказ = Документы.ЗаказПокупателя.ПустаяСсылка();
	Для Каждого ТекущаяСтрока Из Запасы Цикл
		ТекущаяСтрока.Заказ = Заказ;
	КонецЦикла;
	
	БезналичнаяОплата.Очистить();
	Запасы.ЗагрузитьКолонку(Новый Массив, "КодМаркировки");
	
	СостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(КассаККМ);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СостояниеКассовойСмены);
	КассоваяСмена = СостояниеКассовойСмены.ОтчетОРозничныхПродажах;
	
	Если ОперацияСДенежнымиСредствами И Не ЗначениеЗаполнено(ЧекККМ) Тогда
		Предоплата.Очистить();
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") И
		ТипЗнч(ДанныеЗаполнения) <> Тип("ДокументСсылка.ЧекККМ") Тогда
		ДанныеЗаполнения = Справочники.КассыККМ.ПолучитьКассуККМПоУмолчанию();
	КонецЕсли;
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("Структура")] = "ЗаполнитьДокументПоОтбору";
	СтратегияЗаполнения[Тип("СправочникСсылка.КассыККМ")] = "ЗаполнитьДокументПоКассеККМ";
	СтратегияЗаполнения[Тип("ДокументСсылка.ЧекККМ")] = "ЗаполнитьПоЧекуККМ";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения, "Контрагент");
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "Обработка проверки заполнения".
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ КассаККМ.ТипКассы = Перечисления.ТипыКассККМ.АвтономнаяККМ 
		И НЕ КассаККМ.ТипКассы = Перечисления.ТипыКассККМ.ККМED Тогда
		
		Если ЗначениеЗаполнено(ЧекККМ) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЧекККМ.КассоваяСмена КАК КассоваяСмена,
			|	ЧекККМ.Дата КАК Дата,
			|	ЧекККМ.Проведен КАК Проведен,
			|	ЧекККМ.НомерЧекаККМ КАК НомерЧекаККМ
			|ИЗ
			|	Документ.ЧекККМ КАК ЧекККМ
			|ГДЕ
			|	ЧекККМ.Ссылка = &ЧекККМ";
			
			Запрос.УстановитьПараметр("ЧекККМ", ЧекККМ);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Если Не Выборка.Проведен Тогда
					ТекстСообщения = НСтр("ru='Чек ККМ не проведен.'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ЧекККМ", , Отказ);
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Выборка.НомерЧекаККМ) Тогда
					ТекстСообщения = НСтр("ru='Чек ККМ продажи не пробит.'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ЧекККМ", , Отказ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Не РозничныеПродажиСервер.СменаОткрыта(КассоваяСмена, Дата, ТекстСообщения) Тогда
			ТекстСообщения = НСтр("ru = 'Кассовая смена не открыта.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "КассоваяСмена", , Отказ);
		КонецЕсли;
		
	Иначе
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "КассоваяСмена");
	КонецЕсли;
	
	// Скидка 100%.
	ЕстьРучныеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиНаценкиПродажи");
	ЕстьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки"); // АвтоматическиеСкидки
	ЕстьОплатыБонусами = ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммы"); // ОплатыБонусами
	Если ЕстьРучныеСкидки ИЛИ ЕстьАвтоматическиеСкидки ИЛИ ЕстьОплатыБонусами Тогда
		Для каждого СтрокаЗапасы Из Запасы Цикл
			// АвтоматическиеСкидки
			ТекСумма = Окр(СтрокаЗапасы.Цена * СтрокаЗапасы.Количество, 2);
			ТекСуммаРучнойСкидки = ?(ЕстьРучныеСкидки, СтрокаЗапасы.СуммаСкидкиНаценки, 0);
			ТекСуммаАвтоматическойСкидки = ?(ЕстьАвтоматическиеСкидки, СтрокаЗапасы.СуммаАвтоматическойСкидки, 0);
			ТекСуммаОплатыБонусами = ?(ЕстьОплатыБонусами, СтрокаЗапасы.СуммаСкидкиОплатыБонусом, 0);
			ТекСуммаСкидки = ТекСуммаРучнойСкидки + ТекСуммаАвтоматическойСкидки + ТекСуммаОплатыБонусами;
			Если СтрокаЗапасы.ПроцентСкидкиНаценки <> 100 И ТекСуммаСкидки < ТекСумма
				И НЕ ЗначениеЗаполнено(СтрокаЗапасы.Сумма) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнена колонка ""Сумма"" в строке %1 списка ""Запасы"".'"),
					СтрокаЗапасы.НомерСтроки);
				КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", СтрокаЗапасы.НомерСтроки,
					"Сумма");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Серии номенклатуры
	Если Не ОперацияСДенежнымиСредствами Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Объект", ЭтотОбъект);
		ДополнительныеПараметры.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
		СерииНоменклатурыУНФ.ПроверитьЗаполнениеСерийНоменклатуры(Отказ, Запасы, СерииНоменклатуры, 
			ДополнительныеПараметры);
	КонецЕсли;
	
	// Наборы
	НаборыСервер.ПроверитьТабличнуюЧасть(ЭтотОбъект, "Запасы", Отказ);
	// КонецНаборы
	
	// ПодарочныеCертификаты
	Если Константы.ФункциональнаяОпцияИспользоватьПодарочныеСертификаты.Получить() Тогда
		
		Если Не РаботаСПодарочнымиСертификатами.УказанКонтрагентДляПредоплаты() Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена константа ""Служебный контрагент для подарочных сертификатов"".
								  |Необходимо указать контрагента: Продажи - Еще больше возможностей.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	РаботаСПодарочнымиСертификатами.ПроверитьСрокДействия(ЭтотОбъект, "Запасы", Отказ);
	// Конец ПодарочныеСертификаты
	
	// Контроль сумм в табличных частях
	Если ОперацияСДенежнымиСредствами Тогда
		
		Если Предоплата.Количество() Тогда
			СуммаДляКонтроля = Предоплата.Итог("СуммаРасчетов");
		Иначе
			СуммаДляКонтроля = СуммаДокумента;
		КонецЕсли;
		
	Иначе
		СуммаДляКонтроля = Запасы.Итог("Всего");
	КонецЕсли;
	Если СуммаДляКонтроля < БезналичнаяОплата.Итог("Сумма") Тогда
		ТекстСообщения = НСтр("ru = 'Сумма безналичной оплаты больше суммы документа.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
	КонецЕсли;
	
	Если НЕ ПроверитьОграниченияВозвратаНаСертификаты() Тогда
		ТекстСообщения = НСтр("ru = 'Нельзя вернуть на сертификат сумму больше его номинала или суммы оплаты сертификатом при продаже (с учетом других возвратов).'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
	КонецЕсли;
	// Конец Контроль сумм в табличных частях
	
	// Бонусы
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммы") Тогда
		Если Не БезналичнаяОплата.Найти(Перечисления.ВидыБезналичныхОплат.Бонусы, "ВидОплаты") = Неопределено Тогда
			
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("БезналичнаяОплата.Сумма"));
			
			Для Каждого СтрокаОплаты Из БезналичнаяОплата Цикл
				
				Если СтрокаОплаты.ВидОплаты = Перечисления.ВидыБезналичныхОплат.Бонусы Тогда
					Если Не ЗначениеЗаполнено(СтрокаОплаты.СуммаБонусов) Тогда
						ТекстСообщения = СтрШаблон(НСтр("ru = 'В строке №%1 не указана сумма оплаты.'"),
							СтрокаОплаты.НомерСтроки);
						КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("БезналичнаяОплата",
							СтрокаОплаты.НомерСтроки, "СуммаБонусов");
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
					КонецЕсли;
				Иначе
					Если Не ЗначениеЗаполнено(СтрокаОплаты.Сумма) Тогда
						ТекстСообщения = СтрШаблон(НСтр("ru = 'В строке №%1 не указана сумма оплаты.'"),
							СтрокаОплаты.НомерСтроки);
						КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("БезналичнаяОплата",
							СтрокаОплаты.НомерСтроки, "Сумма");
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	// Конец Бонусы
	
	Если Не ОперацияСДенежнымиСредствами Тогда
		Если Предоплата.Количество() = 0 Тогда
			ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Курс");
			ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Кратность");
		КонецЕсли;
	КонецЕсли;
	
	// ИнтеграцияГосИС
	Если КассаККМ.ТипКассы <> Перечисления.ТипыКассККМ.ККМED
		И НЕ ОперацияСДенежнымиСредствами Тогда
		
		// ЕГАИС.
		ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(
			Организация, СтруктурнаяЕдиница, Дата);
		Если ИспользуетсяРегистрацияРозничныхПродажВЕГАИС Тогда
			ИнтеграцияЕГАИСУНФ.ПроверитьЗаполнениеДокумента(ЭтотОбъект, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	// Конец ИнтеграцияГосИС
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерЧекаККМ) Тогда
		ПроверитьЗаполнениеОплат(Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерЧекаККМ)
	   И РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
	   И НЕ КассаККМ.ИспользоватьБезПодключенияОборудования Тогда
		
		Отказ = Истина;
		
		ТекстОшибки = НСтр("ru='Чек ККМ на возврат пробит на фискальном регистраторе. Отмена проведения невозможна'");
		
		ОбщегоНазначения.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект);
			
		Возврат;
		
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
	   И КассаККМ.ИспользоватьБезПодключенияОборудования
	   И КассоваяСмена.Проведен
	   И КассоваяСмена.СтатусКассовойСмены = Перечисления.СтатусыОтчетаОРозничныхПродажах.Закрыта Тогда
		
		ТекстСообщения = НСтр("ru='Кассовая смена закрыта. Отмена проведения невозможна.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
		Возврат;
		
	КонецЕсли;
	
	// Заказы покупателей в розничной торговле
	Если ПоложениеЗаказаПокупателя <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		ЕстьЗаказы = НЕ Заказ.Пустая();
		Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
			СтрокаТабличнойЧасти.Заказ = ?(ЗначениеЗаполнено(Заказ), Заказ, Неопределено);
		КонецЦикла;
	Иначе
		ЕстьЗаказы = Ложь;
		Заказ = ЗаполнениеОбъектовУНФ.ЗначениеДляШапки(Запасы, "Заказ");
	КонецЕсли;
	
	Если НЕ ЕстьЗаказы Тогда
		Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
			Если НЕ СтрокаТабличнойЧасти.Заказ.Пустая() Тогда
				ЕстьЗаказы = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// Конец Заказы покупателей в розничной торговле
	
	// Заполнение безналичной оплаты для старых документов
	Если БезналичнаяОплата.Количество() > 0 Тогда
		РаботаСПодарочнымиСертификатами.ПроверитьЗаполнитьБезналичнуюОплатуДокумента(ЭтотОбъект);
	КонецЕсли;
	
	// При замене товара расчет бонусов не выполняется
	Если ЧекСодержитОплатуВстречнымПредоставлением() Тогда
		БонусныеБаллыКНачислению.Очистить();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	// До включения автоматических скидок будем считать, что скидки рассчитаны.
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		СкидкиРассчитаны = Истина;
	КонецЕсли;
	
	Если ОперацияСДенежнымиСредствами И Предоплата.Количество() Тогда
		СуммаРассрочки = Предоплата.Итог("СуммаРасчетов");
		СуммаДокумента = СуммаРассрочки;
		Иначе
		СуммаРассрочки = 0;
	КонецЕсли;;
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	// Взаиморасчеты
	РасчетыПроведениеДокументов.ИнициализироватьДополнительныеСвойстваДляПроведения(ЭтотОбъект, ДополнительныеСвойства, Отказ, Ложь);
	
	ДобавитьРеквизитыВДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.ЧекККМВозврат.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Проверим, можно ли продолжать и не было ли отказа в процедурах формирования движений.
	Отказ = ДополнительныеСвойства.Отказ;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовка наборов записей.
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ПроведениеДокументовУНФ.ОтразитьДвижения("Запасы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыНаСкладах", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДенежныеСредстваВКассахККМ", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыКассовыйМетод", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыНераспределенные", ТаблицыДляДвижений, Движения, Отказ);
	
	ПроведениеДокументовУНФ.ОтразитьДвижения("Продажи", ТаблицыДляДвижений, Движения, Отказ);
	
	// ДисконтныеКарты
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПродажиПоДисконтнымКартам", ТаблицыДляДвижений, Движения, Отказ);
	// АвтоматическиеСкидки
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПредоставленныеСкидки", ТаблицыДляДвижений, Движения, Отказ);
	// Эквайринг
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОплатаПлатежнымиКартами", ТаблицыДляДвижений, Движения, Отказ);
    // СБП
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОплатаСБП", ТаблицыДляДвижений, Движения, Отказ);
	// Заказы покупателей в розничной торговле
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗаказыПокупателей", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПлатежныйКалендарь", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОплатаСчетовИЗаказов", ТаблицыДляДвижений, Движения, Отказ);
	
	ПроведениеДокументовУНФ.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);
	
	// СерииНоменклатуры
	ПроведениеДокументовУНФ.ОтразитьДвижения("СерииНоменклатурыГарантии", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДвиженияСерииНоменклатуры", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("СерииНоменклатуры", ТаблицыДляДвижений, Движения, Отказ);
	
	// Подарочные сертификаты
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПодарочныеСертификаты", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОплатаПодарочнымиСертификатами", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыСПокупателями", ТаблицыДляДвижений, Движения, Отказ);
	
	// Бонусы
	ПроведениеДокументовУНФ.ОтразитьДвижения("БонусныеБаллы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("НачисленияБонусныхБаллов", ТаблицыДляДвижений, Движения, Отказ);
	
	АссистентУправленияПриСрабатыванииСобытия();
	
	// Акцизные марки
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОстаткиАлкогольнойПродукцииЕГАИС", ТаблицыДляДвижений, Движения, Отказ);
	
	// Запись наборов записей.
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Если КассаККМ.ТипКассы <> Перечисления.ТипыКассККМ.ККМED Тогда
		Документы.ЧекККМВозврат.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	КонецЕсли;
	
	ПроведениеДокументовУНФ.ЗакрытьМенеджерВременныхТаблиц(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаУдаленияПроведения".
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Если КассаККМ.ТипКассы <> Перечисления.ТипыКассККМ.ККМED Тогда
		Документы.ЧекККМВозврат.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли