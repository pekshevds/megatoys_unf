#Область ОписаниеПеременных

&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолей Экспорт;

&НаКлиенте
Перем СтароеЗначениеФизическогоЛица;

&НаКлиенте
Перем СотрудникиПередУдалением;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем СотрудникиКРасчету Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПриСозданииНаСервере(ЭтотОбъект, Документы.РезервыПоОплатеТруда.ОписаниеПодписейДокумента());
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	Если Параметры.Ключ.Пустая() Тогда
		
		КлючиИдентификаторовЗаполнения = "Организация, Ответственный, МесяцРасчета";
		
		ЗначенияДляЗаполнения = Новый Структура(КлючиИдентификаторовЗаполнения, "Объект.Организация", "Объект.Ответственный", "Объект.МесяцНачисления");
		
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		
		ПриПолученииДанныхНаСервере(РеквизитФормыВЗначение("Объект"));
		
	КонецЕсли;
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.КоманднаяПанельФормы;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
	ЗаполнитьДобавленныеКолонкиТаблицПоказателямиУчета();
	
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗаполнитьПриОткрытии Тогда
		
		ПодключитьОбработчикОжидания("ЗаполнитьДанныеФормыНаКлиенте", 0.1, Истина);
		ЗаполнитьПриОткрытии = Ложь;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтотОбъект, Ложь, Не РассчитыватьДокументыПриРедактировании);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив")
		И ВыбранноеЗначение.Количество() > 0
		И ТипЗнч(ВыбранноеЗначение[0]) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		ОбработкаПодбораНаКлиенте(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыПоказателиДокументаРезервыПоОплатеТруда" И Источник.ВладелецФормы = ЭтотОбъект Тогда
		Если Параметр.Количество() > 0 Тогда 
			ОбработатьИзменениеПоказателейНаСервере(Параметр);
			СотрудникиКРасчету.Очистить();
			РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтотОбъект, Истина, Не РассчитыватьДокументыПриРедактировании);
			ДанныеСтроки = Элементы.Начисления.ТекущиеДанные;
			РезервыПоОплатеТрудаКлиентБазовый.УстановитьЗначенияКонтролируемыхПолей(
				"Начисления",
				ДанныеСтроки,
				ЭтотОбъект["КонтролируемыеПоляНачисления"],
				СтарыеЗначенияКонтролируемыхПолей);
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ЗаполнениеВыполнено = Ложь;
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаБЗК.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если СотрудникиКРасчету.Количество() > 0 Тогда
	
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюОкончание", ЭтотОбъект, ПараметрыЗаписи);
		
		ТекстВопроса = НСтр("ru='Перед записью документа необходимо провести перерасчет измененных строк.
			|Продолжить?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		// Если документ проведен, то имитируем режим ПриЗаписиПерепроводить.
		Если Объект.Проведен И ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения Тогда
			ПровестиДокументНаКлиенте();
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РеквизитыВДанные(ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Отказ);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнениеВыполнено = Ложь;
	ПриПолученииДанныхНаСервере(ТекущийОбъект, Ложь);
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаБЗК.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПослеЗаписиНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ЗакрыватьПослеЗаписи = Истина;
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗакрытием(ЭтотОбъект, Объект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_НачислениеЗарплаты", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитыВДанные(ТекущийОбъект);
	
	Если НЕ ТекущийОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Объект");
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РезервПриИзменении(Элемент)
	
	Если РезервПредыдущий = Объект.Резерв Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНачисление Или ЭтоИнвентаризация Тогда
		Если Объект.Начисления.Количество() > 0
			Или Объект.Взносы.Количество() > 0
			Или Объект.РасчетРезервов.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("РезервПриИзмененииЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные о расчете резерва будут очищены.
		                         |Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе
		РезервПриИзмененииЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбработатьИзменениеОрганизацииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	ОчиститьТаблицыДокументаНаСервере();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Редактирование месяца строкой.

&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтотОбъект, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", Модифицированность);
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтотОбъект, ЭтотОбъект, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтотОбъект, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", Направление, Модифицированность);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияМесяцНачисленияПриИзменении", 0.3, Истина);
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОбязательстваОтраженыВБухучетеПриИзменении(Элемент)
	
	Если Объект.ОбязательстваОтраженыВБухучете Тогда
		Объект.Бухгалтер = ПользователиКлиент.ТекущийПользователь();
	Иначе
		Объект.Бухгалтер = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подсистемы "ПодписиДокументов".
&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементПриИзменении(Элемент) 
	ПодписиДокументовКлиент.ПриИзмененииПодписывающегоЛица(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементНажатие(Элемент) 
	ПодписиДокументовКлиент.РасширеннаяПодсказкаНажатие(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры
// Конец Обработчик подсистемы "ПодписиДокументов".

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисления

&НаКлиенте
Процедура НачисленияПриАктивизацииСтроки(Элемент)
	
	РезервыПоОплатеТрудаКлиентБазовый.СтрокаРасчетаПриАктивацииСтроки(ЭтотОбъект, "Начисления");
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	РезервыПоОплатеТрудаКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтотОбъект, "Начисления", ТекущиеДанные, НоваяСтрока, Копирование);
	Если НоваяСтрока Тогда
		ЗаполнитьНадписиВСтроке(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезервыПоОплатеТрудаКлиентБазовый.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Начисления",
		ТекущиеДанные.ФизическоеЛицо,
		ТекущиеДанные.Сотрудник);
		
	ОписаниеТаблицы = ОписаниеТаблицыНачислений();
	Если НоваяСтрока Тогда
		ДобавитьИдентификаторСтрокиФизическогоЛица(ТекущиеДанные.ФизическоеЛицо, ОписаниеТаблицы.ИмяТаблицы, ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
	РезервыПоОплатеТрудаКлиентБазовый.СтрокаРасчетаПриОкончанииРедактирования(ЭтотОбъект, ОписаниеТаблицы);
	
	РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтотОбъект, Истина, Не РассчитыватьДокументыПриРедактировании);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПередУдалением(Элемент, Отказ)
	
	СотрудникиПередУдалением = ВыделенныеСотрудникиКоллекции(Объект.Начисления, Элементы.Начисления.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПослеУдаления(Элемент) 
	
	ПересчитатьНачисленияПослеУдаленияСтроки(СотрудникиПередУдалением);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНачисленияПослеУдаленияСтроки(СотрудникиПередУдалением)
	
	РассчитатьСотрудника(СотрудникиПередУдалением, ОписаниеТаблицыНачислений());
	РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтотОбъект, Истина, Не РассчитыватьДокументыПриРедактировании);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияСотрудникПриИзменении(Элемент)
	ОписаниеТаблицы = ОписаниеТаблицыНачислений();
	ПриИзмененииСотрудника(Элемент, ОписаниеТаблицы.ИмяТаблицы);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВзносы

&НаКлиенте
Процедура ВзносыПриАктивизацииСтроки(Элемент)
	
	РезервыПоОплатеТрудаКлиентБазовый.СтрокаРасчетаПриАктивацииСтроки(ЭтотОбъект, "Взносы");
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Взносы.ТекущиеДанные;
	РезервыПоОплатеТрудаКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтотОбъект, "Взносы", ТекущиеДанные, НоваяСтрока, Копирование);
	Если ТекущиеДанные <> Неопределено Тогда
		СтароеЗначениеФизическогоЛица = ТекущиеДанные.ФизическоеЛицо;
	КонецЕсли;
	Если НоваяСтрока Тогда
		ЗаполнитьНадписиВСтроке(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ДобавитьИдентификаторСтрокиФизическогоЛица(ТекущиеДанные.ФизическоеЛицо, "Взносы", ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	РезервыПоОплатеТрудаКлиентБазовый.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Взносы",
		ТекущиеДанные.ФизическоеЛицо);
		
	ОписаниеТаблицы = ОписаниеТаблицыВзносов();
	Если НоваяСтрока Тогда
		ДобавитьИдентификаторСтрокиФизическогоЛица(ТекущиеДанные.ФизическоеЛицо, ОписаниеТаблицы.ИмяТаблицы, ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	РезервыПоОплатеТрудаКлиентБазовый.СтрокаРасчетаПриОкончанииРедактирования(ЭтотОбъект, ОписаниеТаблицы);
	РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтотОбъект, Истина, Не РассчитыватьДокументыПриРедактировании);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносыПослеУдаления(Элемент)
	
	РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтотОбъект, Истина, Не РассчитыватьДокументыПриРедактировании);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносыФизическоеЛицоПриИзменении(Элемент)
	ПриИзмененииФизическогоЛица(Элемент, "Взносы");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасчетРезервов

&НаКлиенте
Процедура РасчетРезервовПриАктивизацииСтроки(Элемент)
	
	РезервыПоОплатеТрудаКлиентБазовый.СтрокаРасчетаПриАктивацииСтроки(ЭтотОбъект, "РасчетРезервов");
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетРезервовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.РасчетРезервов.ТекущиеДанные;
	РезервыПоОплатеТрудаКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтотОбъект, "РасчетРезервов", ТекущиеДанные, НоваяСтрока, Копирование);
	Если НоваяСтрока Тогда
		ЗаполнитьНадписиВСтроке(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетРезервовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	РезервыПоОплатеТрудаКлиентБазовый.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"РасчетРезервов",
		,
		ТекущиеДанные.Сотрудник);
		
	ОписаниеТаблицы = ОписаниеТаблицыРасчетаРезервов();
	Если НоваяСтрока Тогда
		ДобавитьИдентификаторСтрокиФизическогоЛица(ТекущиеДанные.ФизическоеЛицо, ОписаниеТаблицы.ИмяТаблицы, ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	РезервыПоОплатеТрудаКлиентБазовый.СтрокаРасчетаПриОкончанииРедактирования(ЭтотОбъект, ОписаниеТаблицы);
	РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтотОбъект, Истина, Не РассчитыватьДокументыПриРедактировании);
	
	ТекущийСотрудник = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетРезервовПослеУдаления(Элемент)
	
	РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтотОбъект, Истина, Не РассчитыватьДокументыПриРедактировании);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОценочныеОбязательстваПоСотрудникам

&НаКлиенте
Процедура ОценочныеОбязательстваПоСотрудникамПриАктивизацииСтроки(Элемент)
	
	РезервыПоОплатеТрудаКлиентБазовый.СтрокаРасчетаПриАктивацииСтроки(ЭтотОбъект, "ОценочныеОбязательстваПоСотрудникам");
	
КонецПроцедуры

&НаКлиенте
Процедура ОценочныеОбязательстваПоСотрудникамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ОценочныеОбязательстваПоСотрудникам.ТекущиеДанные;
	РезервыПоОплатеТрудаКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтотОбъект, "ОценочныеОбязательстваПоСотрудникам", ТекущиеДанные, НоваяСтрока, Копирование);
	Если НоваяСтрока Тогда
		ЗаполнитьНадписиВСтроке(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОценочныеОбязательстваПоСотрудникамПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	РезервыПоОплатеТрудаКлиентБазовый.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"ОценочныеОбязательстваПоСотрудникам",
		,
		ТекущиеДанные.Сотрудник);
		
	ОписаниеТаблицы = ОписаниеТаблицыОценочныхОбязательствПоСотрудникам();
	Если НоваяСтрока Тогда
		ДобавитьИдентификаторСтрокиФизическогоЛица(ТекущиеДанные.ФизическоеЛицо, ОписаниеТаблицы.ИмяТаблицы, ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	РезервыПоОплатеТрудаКлиентБазовый.СтрокаРасчетаПриОкончанииРедактирования(ЭтотОбъект, ОписаниеТаблицы);
	РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтотОбъект, Истина, Не РассчитыватьДокументыПриРедактировании);
	
КонецПроцедуры

&НаКлиенте
Процедура ОценочныеОбязательстваПоСотрудникамПослеУдаления(Элемент)
	
	РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтотОбъект, Истина, Не РассчитыватьДокументыПриРедактировании);
	Если РассчитыватьДокументыПриРедактировании Тогда
		ОбновитьОтражениеВУчетеНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОценочныеОбязательства

&НаКлиенте
Процедура ОценочныеОбязательстваПриАктивизацииСтроки(Элемент)
	
	РезервыПоОплатеТрудаКлиентБазовый.СтрокаРасчетаПриАктивацииСтроки(ЭтотОбъект, "ОценочныеОбязательства");
	
КонецПроцедуры

&НаКлиенте
Процедура ОценочныеОбязательстваПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.ОценочныеОбязательства.ТекущиеДанные;
	РезервыПоОплатеТрудаКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтотОбъект, "ОценочныеОбязательства", ТекущиеДанные, НоваяСтрока, Копирование);
	Если НоваяСтрока Тогда
		ЗаполнитьНадписиВСтроке(Элементы.ОценочныеОбязательства.ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОценочныеОбязательстваПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ОписаниеТаблицы = ОписаниеТаблицыОценочныеОбязательства();
	РезервыПоОплатеТрудаКлиентБазовый.СтрокаРасчетаПриОкончанииРедактирования(ЭтотОбъект, ОписаниеТаблицы);
	РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтотОбъект, Истина, Не РассчитыватьДокументыПриРедактировании);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Команда, Объект)
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Контекст, Объект);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийСледующемуНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Заполнить(Команда) Экспорт
	
	ОчиститьСообщения();
	
	Если НЕ ЗарплатаКадрыКлиент.ОрганизацияЗаполнена(Объект) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.Начисления.Количество() > 0 Или Объект.Взносы.Количество() > 0
		Или Объект.РасчетРезервов.Количество() > 0
		Или Объект.ОценочныеОбязательстваПоСотрудникам.Количество() > 0
		Или Объект.ОценочныеОбязательства.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличные части документа будут очищены. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУволенными(Команда)
	
	ЗаполнитьДанныеФормыНаКлиенте(Новый Структура("ИмяПоказателяДопОтбора", "Уволен"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПереведенными(Команда)
	
	ЗаполнитьДанныеФормыНаКлиенте(Новый Структура("ИмяПоказателяДопОтбора", "Перемещен"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборСотрудников(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ПодборСотрудникаВФормеДокументаРезервыПоОплатеТруда");
	
	ВладелецОтбора = ЭтотОбъект;
	
	ПараметрыОткрытия = Новый Структура;
	Отборы = Новый Структура;
	Отборы.Вставить("ПоказыватьПодработки", Ложь);
	Отборы.Вставить("ПоказыватьДоговорниковГПХ", Ложь);
	ПараметрыОткрытия.Вставить("Отбор", Отборы);
	
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихВПериодеПоПараметрамОткрытияФормыСписка(
		ВладелецОтбора,
		Объект.Организация,
		Объект.Подразделение,
		Объект.МесяцНачисления, 
		КонецМесяца(Объект.МесяцНачисления),
		,
		АдресСпискаПодобранныхСотрудников(),
		ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоказатели(Команда)
	
	ОткрытьФорму("Документ.РезервыПоОплатеТруда.Форма.ГрупповоеЗаполнениеПоказателейДокументов", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
	ОчиститьТаблицыДокументаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДанныеФормы(Команда)
	
	ЗакрыватьПослеЗаписи = Ложь;
	
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровести(Команда)
	
	ЗакрыватьПослеЗаписи = Ложь;
	
	ПровестиДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровестиИЗакрыть(Команда)
	
	ЗакрыватьПослеЗаписи = Истина;
	
	ПровестиДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДокумент(Команда)
	ПересчитатьДокументНаКлиенте();
КонецПроцедуры

#Область ПодключаемыеКомандыУдалитьСотрудника

&НаКлиенте
Процедура Подключаемый_НачисленияУдалитьСотрудника(Команда)
	
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		УдалитьСотрудникаНаСервере(ТекущиеДанные.Сотрудник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВзносыУдалитьСотрудника(Команда)
	
	ТекущиеДанные = Элементы.Взносы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		УдалитьДанныеСотрудникаНаСервере(ТекущиеДанные.ФизическоеЛицо);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ТаблицыДокумента = ТаблицыДокумента();
	
	Для Каждого ИмяТаблицы Из ТаблицыДокумента Цикл
		
		ТекущийШрифт = Элементы[ИмяТаблицы].Шрифт;
		ЖирныйШрифт = Новый Шрифт(ТекущийШрифт, , , Истина);
		
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		// Вид оформления
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ЖирныйШрифт);
		// Условие для оформления
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект." + ИмяТаблицы + ".ФиксСтрока");
		ЭлементОтбора.ПравоеЗначение = Истина;
		// Оформляемое поле
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#Область ИнициализацияФормы

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект, ДополнятьФорму = Истина)
	
	РезервПредыдущий = ТекущийОбъект.Резерв;
	
	РассчитыватьДокументыПриРедактировании = Константы.РассчитыватьДокументыПриРедактировании.Получить();
	
	РезервыРассчитываютсяАвтоматически = Истина;
	РезервыПоОплатеТрудаПереопределяемый.РезервыРассчитываютсяАвтоматически(РезервыРассчитываютсяАвтоматически);
	ИспользоватьНачислениеЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	ИнициализацияФормы(ТекущийОбъект, ДополнятьФорму);
	
	ПроверитьИспользованиеОбмена();
	ОбновитьДоступностьЗарплатаОтраженаВБухучете();
	
КонецПроцедуры

&НаСервере
Процедура НачатьИнициализациюФормы(ДополнятьФорму, НовыйДокумент = Истина)
	
	ЗаполнитьВидыОпераций();
	
	ПолучитьНастройкиРезерва();
	// Устанавливаем значения реквизитов формы.
	УстановитьФункциональныеОпцииФормы();
	
	Если Не ФормаДополнена И ДополнятьФорму Тогда
		ДополнитьФорму();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьИнициализациюФормы(ТекущийОбъект, ДополнятьФорму, НовыйДокумент = Истина)

	Если Не ФормаДополнена И ДополнятьФорму Тогда 
		ДополнитьФорму();
	КонецЕсли;
	
	// чтение данных
	ДанныеВРеквизиты(ТекущийОбъект);
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаНачисления",
		"Видимость",
		ИспользоватьНачисление);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаВзносы",
		"Видимость",
		ИспользоватьВзносы);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаРасчетРезервов",
		"Видимость",
		ИспользоватьРасчет);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЗаполнитьПоказатели",
		"Видимость",
		ЭтоРезервПремии И ЭтоИнвентаризация);
		
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой();
	
	// Команды
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СправкаРасчет",
		"Видимость",
		ЭтоНачисление);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Заполнить",
		"Видимость",
		ЭтоНачисление
		Или ЭтоИнвентаризация
		Или ЭтоСписание);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПодборСотрудников",
		"Видимость",
		ЭтоНачисление
		Или ЭтоИнвентаризация);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЗаполнитьУволенными",
		"Видимость",
		ЭтоСписание);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЗаполнитьПереведенными",
		"Видимость",
		ЭтоСписание
		И ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделения"));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЗаполнитьССохранениемИсправлений",
		"Видимость",
		ЭтоНачисление
		Или ЭтоИнвентаризация);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПересчитатьДокумент",
		"Видимость",
		Не РассчитыватьДокументыПриРедактировании 
			И Не ЭтоКорректировка
			И Не ЭтоСписание);
			
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПодвалШапки",
		"Видимость",
		РезервыРассчитываютсяАвтоматически);
	
	// Страницы
	Если Не РезервыРассчитываютсяАвтоматически И Не ИспользоватьНачислениеЗарплаты Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Страницы",
			"ТекущаяСтраница",
			Элементы.ГруппаОценочныеОбязательства);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Страницы",
			"ОтображениеСтраниц",
			ОтображениеСтраницФормы.Нет);
	КонецЕсли;
		
	Если Не ИспользоватьНачислениеЗарплаты Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаНачисления",
			"Видимость",
			Ложь);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаВзносы",
			"Видимость",
			Ложь);
			
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаРасчетРезервов",
			"Видимость",
			Ложь);
	КонецЕсли;
	
	// Начисления
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НачисленияГруппаПоказателиУчета",
		"Видимость",
		ФормироватьРезервНУ);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НачисленияРезультатНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НачисленияГруппаНормативы",
		"Видимость",
		Не ЭтоИнвентаризация);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НачисленияГруппаПоказатели",
		"Видимость",
		ЭтоИнвентаризация);
		
	// Взносы
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВзносыГруппаПоказателиУчета",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВзносыСуммаСтраховыхВзносовНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВзносыСуммаФССНесчастныеСлучаиНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВзносыТекущаяСтавкаСтраховыхВзносов",
		"Видимость",
		ЭтоИнвентаризация);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВзносыТекущаяСтавкаФССНесчастныеСлучаи",
		"Видимость",
		ЭтоИнвентаризация);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВзносыСтраховыеВзносы",
		"Видимость",
		Не ЭтоИнвентаризация);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВзносыФССНесчастныеСлучаи",
		"Видимость",
		Не ЭтоИнвентаризация);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВзносыНормативОтчисленийВРезервСтраховыеВзносы",
		"Видимость",
		Не ЭтоИнвентаризация);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВзносыНормативОтчисленийВРезервФССНесчастныеСлучаи",
		"Видимость",
		Не ЭтоИнвентаризация);
		
	// Расчет резервов
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РасчетРезерваОтпусковГруппаПоказателиУчета",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РасчетРезервовСуммаРезерваИсчисленоНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РасчетРезервовСуммаРезерваНакопленоНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РасчетРезервовСуммаРезерваНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РасчетРезервовСуммаРезерваСтраховыхВзносовИсчисленоНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РасчетРезервовСуммаРезерваСтраховыхВзносовНакопленоНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РасчетРезервовСуммаРезерваСтраховыхВзносовНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РасчетРезервовСуммаРезерваФССНесчастныеСлучаиИсчисленоНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РасчетРезервовСуммаРезерваФССНесчастныеСлучаиНакопленоНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РасчетРезервовСуммаРезерваФССНесчастныеСлучаиНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	// Обязательства по сотрудникам
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОценочныеОбязательстваПоСотрудникамГруппаПоказателиУчета",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОценочныеОбязательстваПоСотрудникамСуммаРезерваНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОценочныеОбязательстваПоСотрудникамСуммаРезерваСтраховыхВзносовНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОценочныеОбязательстваПоСотрудникамСуммаРезерваФССНесчастныеСлучаиНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОценочныеОбязательстваПоСотрудникамКорректировкаОбязательств",
		"Видимость",
		ЭтоКорректировка);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДекорацияПодсказка",
		"Видимость",
		ЭтоКорректировка);
		
	// Обязательства итоговые
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОценочныеОбязательстваГруппаПоказателиУчета",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОценочныеОбязательстваСуммаРезерваНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОценочныеОбязательстваСуммаРезерваСтраховыхВзносовНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОценочныеОбязательстваСуммаРезерваФССНесчастныеСлучаиНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	КонецПроцедуры

// Подключение универсальных механизмов.
&НаСервере
Процедура ДополнитьФорму()
	
	КонтролируемыеПоля = ПолучитьКонтролируемыеПоля();
	
	МассивТаблиц = Новый Массив;
	МассивТаблиц.Добавить("Начисления");
	МассивТаблиц.Добавить("Взносы");
	МассивТаблиц.Добавить("РасчетРезервов");
	МассивТаблиц.Добавить("ОценочныеОбязательстваПоСотрудникам");
	МассивТаблиц.Добавить("ОценочныеОбязательства");
	
	Для Каждого ИмяТаблицы Из МассивТаблиц Цикл 
		КонтролируемыеПоляТаблицы = КонтролируемыеПоля[ИмяТаблицы];
		
		КонтролируемыеПоляСФиксированнымиМассивами = Новый Структура;
		Для Каждого ЭлементСтруктуры Из КонтролируемыеПоляТаблицы Цикл
			КонтролируемыеПоляСФиксированнымиМассивами.Вставить(ЭлементСтруктуры.Ключ, 
				Новый ФиксированныйМассив(ЭлементСтруктуры.Значение));
		КонецЦикла;
		
		ЭтотОбъект["КонтролируемыеПоля" + ИмяТаблицы] = Новый ФиксированнаяСтруктура(КонтролируемыеПоляСФиксированнымиМассивами);
		
	КонецЦикла;

	ДобавитьКомандуУдалитьСотрудника();
	ФормаДополнена = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблицПоказателямиУчета(ИмяТаблицы = "")
	
	Если ИмяТаблицы = "" Тогда
		Для Каждого СтрокаТаблицы Из Объект.Начисления Цикл
			ЗаполнитьНадписиВСтроке(СтрокаТаблицы);
		КонецЦикла;
		Для Каждого СтрокаТаблицы Из Объект.Взносы Цикл
			ЗаполнитьНадписиВСтроке(СтрокаТаблицы);
		КонецЦикла;
		Для Каждого СтрокаТаблицы Из Объект.РасчетРезервов Цикл
			ЗаполнитьНадписиВСтроке(СтрокаТаблицы);
		КонецЦикла;
		Для Каждого СтрокаТаблицы Из Объект.ОценочныеОбязательстваПоСотрудникам Цикл
			ЗаполнитьНадписиВСтроке(СтрокаТаблицы);
		КонецЦикла;
		Для Каждого СтрокаТаблицы Из Объект.ОценочныеОбязательства Цикл
			ЗаполнитьНадписиВСтроке(СтрокаТаблицы);
		КонецЦикла;
	Иначе
		Для Каждого СтрокаТаблицы Из Объект[ИмяТаблицы] Цикл
			ЗаполнитьНадписиВСтроке(СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНадписиВСтроке(ТекущиеДанные)
	
	ТекущиеДанные.НадписьБУ = НСтр("ru = 'БУ:'");
	ТекущиеДанные.НадписьНУ = НСтр("ru = 'НУ:'");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы() Экспорт
	
	ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Резервы по оплате труда: %1'"), Строка(Объект.ВидОперации));
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2'"), Объект.Номер, Объект.Дата);
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' (создание)'");
	КонецЕсли;
	
	ЭтотОбъект.Заголовок = ТекстЗаголовка;

КонецПроцедуры

#КонецОбласти 

&НаСервере
Процедура ОбновитьДоступностьЗарплатаОтраженаВБухучете()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаОтраженияВБухУчете",
		"Видимость",
		ОбменИспользуется);
	
	Если ОбменИспользуется Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадры") Тогда
			ТолькоПросмотр = Объект.ОбязательстваОтраженыВБухучете;
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ОбязательстваОтраженыВБухучете",
				"ТолькоПросмотр",
				Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"Бухгалтер",
				"ТолькоПросмотр",
				Истина);
		Иначе
			
			ПользователюРазрешеноФормированиеПроводок = ПравоДоступа("Редактирование", Метаданные.Документы.РезервыПоОплатеТруда);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ОбязательстваОтраженыВБухучете",
				"ТолькоПросмотр",
				Не ПользователюРазрешеноФормированиеПроводок);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"Бухгалтер",
				"ТолькоПросмотр",
				Не ПользователюРазрешеноФормированиеПроводок);
			
			Если НЕ ПользователюРазрешеноФормированиеПроводок Тогда
				ТолькоПросмотр = Объект.ОбязательстваОтраженыВБухучете;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИспользованиеОбмена()
	
	ОбменИспользуется = Ложь;
	
	РезервыПоОплатеТруда.ПроверитьИспользованиеОбмена(ОбменИспользуется, Объект.Организация);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыОпераций()
	
	ЭтоНачисление     = Объект.ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Начисление;
	ЭтоИнвентаризация = Объект.ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Инвентаризация;
	ЭтоКорректировка  = Объект.ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Корректировка;
	ЭтоСписание       = Объект.ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Списание;
	
	ИспользоватьРасчет     = ЭтоНачисление Или ЭтоИнвентаризация;
	ИспользоватьВзносы     = ИспользоватьРасчет;
	ИспользоватьНачисление = ИспользоватьРасчет;
	
КонецПроцедуры

// Месяц начисления
&НаКлиенте
Процедура ОбработчикОжиданияМесяцНачисленияПриИзменении()

	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииМесяцаНачисления()
	
	ОбработатьИзменениеМесяцНачисленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСотрудника(Элемент, ИмяТаблицы)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Идентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	Если ЗначениеЗаполнено(ТекущиеДанные.ФизическоеЛицо) Тогда
		УдалитьИдентификаторСтрокиФизическогоЛица(ТекущиеДанные.ФизическоеЛицо, ИмяТаблицы, Идентификатор);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда
		ТекущиеДанные.ФизическоеЛицо = СотрудникиКлиентСерверПовтИсп.ФизическиеЛицаСотрудников(ТекущиеДанные.Сотрудник)[0];
		ДобавитьИдентификаторСтрокиФизическогоЛица(ТекущиеДанные.ФизическоеЛицо, ИмяТаблицы, Идентификатор);
		ТекущиеДанные.Подразделение = ПодразделениеСотрудника(ТекущиеДанные.Сотрудник, Объект.МесяцНачисления);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодразделениеСотрудника(Сотрудник, ДатаСведений)
	
	КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник), "Подразделение", ДатаСведений);
	Если КадровыеДанныеСотрудника.Количество() > 0 Тогда
		Возврат КадровыеДанныеСотрудника[0].Подразделение;
	КонецЕсли;
	
	Возврат Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииФизическогоЛица(Элемент, ИмяТаблицы) Экспорт
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Идентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	Если ЗначениеЗаполнено(СтароеЗначениеФизическогоЛица) Тогда
		УдалитьИдентификаторСтрокиФизическогоЛица(СтароеЗначениеФизическогоЛица, ИмяТаблицы, Идентификатор);
	КонецЕсли;
	ДобавитьИдентификаторСтрокиФизическогоЛица(ТекущиеДанные.ФизическоеЛицо, ИмяТаблицы, Идентификатор); 
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеМесяцНачисленияНаСервере()
	
	ОчиститьТаблицыДокументаНаСервере();
	УстановитьФункциональныеОпцииФормы();
	
	ЗаполнениеВыполнено = Ложь;
	
КонецПроцедуры

// Заполнение и расчет начислений.

#Область ПересчетПриРедактировании

&НаСервере
Функция СоздатьМенеджерРасчетаРезервов( НастройкаРезервов)
	
	МенеджерРасчета = Новый Структура;
	МенеджерРасчета.Вставить("ИсключаемыйРегистратор", Объект.Ссылка);
	МенеджерРасчета.Вставить("НастройкаРезервов",      НастройкаРезервов);
	МенеджерРасчета.Вставить("Зарплата",               РезервыПоОплатеТрудаДляНебольшихОрганизаций.ДетальноеОписаниеДанныхДляЗаполненияТаблицДокумента());
	
	Возврат МенеджерРасчета;
	
КонецФункции

#Область ПересчетСотрудникаПоТаблицеНачисления

// Процедура используется для инициации расчета начислений из вне (на клиенте).
&НаКлиенте   
Процедура РассчитатьСотрудника(Сотрудник, ОписаниеТаблицы) Экспорт
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Сотрудник) <> Тип("Массив") Тогда
		Сотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник);
	Иначе
		Сотрудники = Сотрудник;
	КонецЕсли;
	
	МассивСотрудниковКРасчету = Новый Массив;
	Для Каждого СотрудникРасчета Из Сотрудники Цикл
		МассивСотрудниковКРасчету.Добавить(СотрудникРасчета);
	КонецЦикла;
	
	Если МассивСотрудниковКРасчету.Количество() > 0 Тогда
		РассчитатьСотрудникаНаСервере(МассивСотрудниковКРасчету, ОписаниеТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСотрудникаНаСервере(Сотрудник, ОписаниеТаблицы = Неопределено)
	
	Отбор = СотрудникиФизическиеЛицаОтбор(Сотрудник);
	Если Отбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПорядокРасчета = 0;
	Если ЗначениеЗаполнено(ОписаниеТаблицы) Тогда
		Если ОписаниеТаблицы.Свойство("ПутьКДанным") Тогда
			РедактируемаяТаблица = СтрЗаменить(ОписаниеТаблицы.ПутьКДанным, "Объект.","");
			Если РедактируемаяТаблица = "Начисления" Или РедактируемаяТаблица = "Взносы" Тогда
				ПорядокРасчета = 1;
			ИначеЕсли РедактируемаяТаблица = "РасчетРезервов" Тогда
				ПорядокРасчета = 2;
			ИначеЕсли РедактируемаяТаблица = "ОценочныеОбязательстваПоСотрудникам" Тогда
				ПорядокРасчета = 3;
			ИначеЕсли РедактируемаяТаблица = "ОценочныеОбязательства" Тогда
				ПорядокРасчета = 4;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НастройкаРезервов = РезервыПоОплатеТруда.НастройкиРасчетаРезервов(Объект.Организация, Объект.Резерв, Объект.МесяцНачисления, Объект.Ссылка, Объект.ВидОперации);
	
	СотрудникиКРасчетуОтбор = Отбор.СотрудникиКРасчету;
	ПозицииВставки = Новый Структура;
	
	МенеджерРасчетаРезервов = СоздатьМенеджерРасчетаРезервов(НастройкаРезервов);
	РассчитатьСотрудникаДанныеФормыВДанныеМенеджераРасчета(МенеджерРасчетаРезервов, Отбор, ПозицииВставки);
	
	Если ПорядокРасчета <= 1 Тогда // требуется расчет резерва по формуле
		РезервыПоОплатеТрудаДляНебольшихОрганизаций.РассчитатьРезервы(МенеджерРасчетаРезервов.Зарплата, НастройкаРезервов);
	КонецЕсли;
	
	Если ЭтоНачисление Или ЭтоИнвентаризация Тогда
		
		Если ПорядокРасчета <= 1 Тогда // требуется расчет резерва по формуле
			РезервыПоОплатеТруда.РассчитатьТекущийМесяц(МенеджерРасчетаРезервов.Зарплата,
				Объект.Организация,
				Объект.Резерв,
				Объект.МесяцНачисления,
				МенеджерРасчетаРезервов.ИсключаемыйРегистратор,
				Объект.ВидОперации);
		КонецЕсли;
		
		Если ПорядокРасчета <= 2 Тогда // требуется пересчет сумм зачитываемого резерва
			РезервыПоОплатеТруда.РассчитатьСуммыРезерваПоСотрудникам(МенеджерРасчетаРезервов.Зарплата,
				Объект.Организация,
				Объект.Резерв,
				Объект.МесяцНачисления,
				МенеджерРасчетаРезервов.ИсключаемыйРегистратор,
				Объект.ВидОперации);
		КонецЕсли;
		
		ДанныеЗаполнения = РезервыПоОплатеТруда.ОписаниеДанныхДляЗаполненияТаблицДокумента();
		
		ДанныеЗаполнения.Начисления
			= МенеджерРасчетаРезервов.Зарплата.Начисления;
		ДанныеЗаполнения.Взносы
			= МенеджерРасчетаРезервов.Зарплата.Взносы;
		ДанныеЗаполнения.РасчетРезервов
			= МенеджерРасчетаРезервов.Зарплата.РасчетРезервов;
		ДанныеЗаполнения.ОценочныеОбязательстваПоСотрудникам
			= МенеджерРасчетаРезервов.Зарплата.ОценочныеОбязательстваПоСотрудникам;
		РезервыПоОплатеТруда.СвернутьТаблицуРасчетаРезервов(ДанныеЗаполнения.РасчетРезервов);
		ДанныеДляЗаполненияВДанныеФормы(ДанныеЗаполнения, Объект, ПозицииВставки, СотрудникиКРасчетуОтбор, НЕ НормативныйМетодБУ);
		
	Иначе
		
		РассчитатьОценочныеОбязательства(МенеджерРасчетаРезервов, ДанныеЗаполнения);
		
	КонецЕсли;
	
	Если ЭтоИнвентаризация Тогда
		ВводНачисленийЗаполнитьВторичныеДанныеПоказателей();
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблицПоказателямиУчета();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьОценочныеОбязательства(МенеджерРасчетаРезервов = Неопределено, ДанныеЗаполнения = Неопределено)
	
	Если МенеджерРасчетаРезервов = Неопределено Тогда
		НастройкаРезервов = РезервыПоОплатеТруда.НастройкиРасчетаРезервов(Объект.Организация, Объект.Резерв, Объект.МесяцНачисления, Объект.Ссылка, Объект.ВидОперации);
		МенеджерРасчетаРезервов = СоздатьМенеджерРасчетаРезервов(НастройкаРезервов);
	КонецЕсли;
	
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполнения = РезервыПоОплатеТруда.ОписаниеДанныхДляЗаполненияТаблицДокумента();
	КонецЕсли;
	
	РассчитанныеДанныеФормыВДанныеМенеджераРасчета(МенеджерРасчетаРезервов);
	РезервыПоОплатеТруда.РассчитатьСуммыРезерва(МенеджерРасчетаРезервов.Зарплата,
		Объект.Организация,
		Объект.Резерв,
		Объект.МесяцНачисления,
		Объект.Ссылка,
		Объект.ВидОперации);
	ДанныеЗаполнения.ОценочныеОбязательства
		= МенеджерРасчетаРезервов.Зарплата.ОценочныеОбязательства;
	РассчитанныеДанныеДляЗаполненияВДанныеФормы(Объект, ДанныеЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСотрудникаДанныеФормыВДанныеМенеджераРасчета(МенеджерРасчета, Отбор, ПозицииВставки)
	
	//Начисления
	РезервыПоОплатеТрудаДляНебольшихОрганизацийФормы.НачисленияВДанныеМенеджераРасчета(
		Объект.Начисления,
		МенеджерРасчета,
		Объект.Организация,
		Отбор,
		ПозицииВставки,
		МаксимальноеКоличествоПоказателейНачисления);
	
	//Взносы
	РезервыПоОплатеТрудаДляНебольшихОрганизацийФормы.ВзносыВДанныеМенеджераРасчета(
		Объект.Взносы,
		МенеджерРасчета,
		Отбор,
		ПозицииВставки);
	
	//Расчет резервов
	РезервыПоОплатеТрудаДляНебольшихОрганизацийФормы.РасчетРезервовВДанныеМенеджераРасчета(
		Объект.РасчетРезервов,
		МенеджерРасчета,
		Объект.Организация,
		Отбор,
		ПозицииВставки);
		
	//Оценочные обязательства по сотрудникам
	РезервыПоОплатеТрудаДляНебольшихОрганизацийФормы.ОценочныеОбязательстваПоСотрудникамВДанныеМенеджераРасчета(
		Объект.ОценочныеОбязательстваПоСотрудникам,
		МенеджерРасчета,
		Объект.Организация,
		Отбор,
		ПозицииВставки);
	
КонецПроцедуры

#КонецОбласти

#Область ПересчетСотрудникаПоТаблицеВзносы

#КонецОбласти

#Область ПересчетСотрудникаПоТаблицеРасчетРезервов

// Процедура используется для инициации расчета начислений из вне (на клиенте).
&НаКлиенте   
Процедура РассчитатьРасчетРезервовСотрудника(Сотрудник, ОписаниеТаблицы) Экспорт
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Сотрудник) <> Тип("Массив") Тогда
		Сотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник);
	Иначе
		Сотрудники = Сотрудник;
	КонецЕсли;
	
	МассивСотрудниковКРасчету = Новый Массив;
	Для Каждого СотрудникРасчета Из Сотрудники Цикл
		МассивСотрудниковКРасчету.Добавить(СотрудникРасчета);
	КонецЦикла;
	
	Если МассивСотрудниковКРасчету.Количество() > 0 Тогда
		РассчитатьРасчетРезервовСотрудникаНаСервере(МассивСотрудниковКРасчету, ОписаниеТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьРасчетРезервовСотрудникаНаСервере(Сотрудник, ОписаниеТаблицы = Неопределено)
	
	Отбор = СотрудникиФизическиеЛицаОтбор(Сотрудник);
	Если Отбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаРезервов = РезервыПоОплатеТруда.НастройкиРасчетаРезервов(Объект.Организация, Объект.Резерв, Объект.МесяцНачисления, Объект.Ссылка, Объект.ВидОперации);
	
	НастройкаРезервов = РезервыПоОплатеТруда.НастройкиРасчетаРезервов(Объект.Организация, Объект.Резерв, Объект.МесяцНачисления, Объект.Ссылка, Объект.ВидОперации);
	МенеджерРасчетаРезервов = СоздатьМенеджерРасчетаРезервов(НастройкаРезервов);
	
	СотрудникиКРасчетуОтбор = Отбор.СотрудникиКРасчету;
	ПозицииВставки = Новый Структура;
	РассчитатьРасчетРезервовСотрудникаДанныеФормыВДанныеМенеджераРасчета(МенеджерРасчетаРезервов, Отбор, ПозицииВставки);
	
	РезервыПоОплатеТруда.РассчитатьТекущийМесяц(МенеджерРасчетаРезервов.Зарплата,
		Объект.Организация,
		Объект.Резерв,
		Объект.МесяцНачисления,
		МенеджерРасчетаРезервов.ИсключаемыйРегистратор,
		Объект.ВидОперации);
		
	РезервыПоОплатеТруда.РассчитатьСуммыРезерваПоСотрудникам(МенеджерРасчетаРезервов.Зарплата,
		Объект.Организация,
		Объект.Резерв,
		Объект.МесяцНачисления,
		МенеджерРасчетаРезервов.ИсключаемыйРегистратор,
		Объект.ВидОперации);
	
	ДанныеЗаполнения = РезервыПоОплатеТруда.ОписаниеДанныхДляЗаполненияТаблицДокумента();
	
	ДанныеЗаполнения.РасчетРезервов
		= МенеджерРасчетаРезервов.Зарплата.РасчетРезервов;
	ДанныеЗаполнения.ОценочныеОбязательстваПоСотрудникам
		= МенеджерРасчетаРезервов.Зарплата.ОценочныеОбязательстваПоСотрудникам;
	РезервыПоОплатеТруда.СвернутьТаблицуРасчетаРезервов(ДанныеЗаполнения.РасчетРезервов);
	ДанныеДляЗаполненияВДанныеФормы(ДанныеЗаполнения, Объект, ПозицииВставки, СотрудникиКРасчетуОтбор, НЕ НормативныйМетодБУ);
	
	РассчитатьОценочныеОбязательства(МенеджерРасчетаРезервов, ДанныеЗаполнения);
	
	Если ЭтоИнвентаризация Тогда
		ВводНачисленийЗаполнитьВторичныеДанныеПоказателей();
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблицПоказателямиУчета();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьРасчетРезервовСотрудникаДанныеФормыВДанныеМенеджераРасчета(МенеджерРасчета, Отбор, ПозицииВставки)
	
	//Расчет резервов
	РезервыПоОплатеТрудаДляНебольшихОрганизацийФормы.РасчетРезервовВДанныеМенеджераРасчета(
		Объект.РасчетРезервов,
		МенеджерРасчета,
		Объект.Организация,
		Отбор,
		ПозицииВставки);
		
	//Оценочные обязательства по сотрудникам
	РезервыПоОплатеТрудаДляНебольшихОрганизацийФормы.ОценочныеОбязательстваПоСотрудникамВДанныеМенеджераРасчета(
		Объект.ОценочныеОбязательстваПоСотрудникам,
		МенеджерРасчета,
		Объект.Организация,
		Отбор,
		ПозицииВставки);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура РассчитанныеДанныеФормыВДанныеМенеджераРасчета(МенеджерРасчета)
	
	//Оценочные обязательства
	МенеджерРасчета.Зарплата.ОценочныеОбязательстваПоСотрудникам = Объект.ОценочныеОбязательстваПоСотрудникам.Выгрузить();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеФормыНаКлиенте();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДанныеДляЗаполненияВДанныеФормы(ДанныеЗаполнения, Объект, ПозицииВставки = Неопределено, Сотрудники = Неопределено, ЗаполнятьПоказатели)
	
	РезервыПоОплатеТруда.СортироватьДанныеДляЗаполнения(ДанныеЗаполнения, Объект.Организация, Объект.МесяцНачисления);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Инвентаризация
		Или Объект.ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Начисление Тогда
		
		//Начисления
		РезервыПоОплатеТрудаФормы.РасчетРезервовНачисленияВДанныеФормы(Объект.Начисления,
			ДанныеЗаполнения.Начисления,
			Объект.Организация,
			Объект.ВидОперации,
			ПозицииВставки,
			ЗаполнятьПоказатели);
		
		//Взносы
		РезервыПоОплатеТрудаФормы.РасчетРезервовВзносыВДанныеФормы(Объект.Взносы,
			ДанныеЗаполнения.Взносы,
			ПозицииВставки);
	
	КонецЕсли;
	
	// Расчет резервов
	РезервыПоОплатеТрудаФормы.РасчетРезервовРасчетВДанныеФормы(Объект.РасчетРезервов,
		ДанныеЗаполнения.РасчетРезервов,
		ПозицииВставки);
	
	//Оценочные обязательства по сотрудникам
	РезервыПоОплатеТрудаФормы.ОценочныеОбязательстваПоСотрудникамВДанныеФормы(Объект.ОценочныеОбязательстваПоСотрудникам,
		ДанныеЗаполнения.ОценочныеОбязательстваПоСотрудникам,
		ПозицииВставки);
	
	//Оценочные обязательства
	Дополнять = ЗначениеЗаполнено(ПозицииВставки);
	РезервыПоОплатеТрудаФормы.ОценочныеОбязательстваВДанныеФормы(Объект.ОценочныеОбязательства,
		?(Дополнять, Объект.ОценочныеОбязательстваПоСотрудникам.Выгрузить(), ДанныеЗаполнения.ОценочныеОбязательства),
		Не Дополнять);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РассчитанныеДанныеДляЗаполненияВДанныеФормы(Объект, ДанныеЗаполнения)
	
	//Оценочные обязательства
	РезервыПоОплатеТрудаФормы.ОценочныеОбязательстваВДанныеФормы(Объект.ОценочныеОбязательства,
		ДанныеЗаполнения.ОценочныеОбязательства);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеФормыНаКлиенте(ДопПараметрыОтбора = Неопределено) Экспорт
	
	Результат = РезультатЗаполненияВДлительнойОперации(ДопПараметрыОтбора);
	
	Если Результат.ЗаданиеВыполнено Тогда
		
		ОповеститьОбИзмененииОбъекта();
		ОчиститьСписокСотрудниковКРасчету();
		РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтотОбъект, Ложь, РассчитыватьДокументыПриРедактировании);
	
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПерезаполнитьДанныеФормыНаСервере(Сотрудники = Неопределено, СохранятьИсправления = Истина, СотрудникиКРасчету = Неопределено)
	
	ИспользоватьДлительнуюОперацию = Истина;
	Если Сотрудники <> Неопределено Тогда
		// Если заполнение выполняется по ограниченному составу сотрудников, то обходимся без длительной операции.
		Если ТипЗнч(Сотрудники) <> Тип("Массив") Или Сотрудники.Количество() < 10 Тогда 
			ИспользоватьДлительнуюОперацию = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СписокСотрудников = Неопределено;
	Если Сотрудники <> Неопределено Тогда
		СписокСотрудников = СотрудникиДляРасчета(Сотрудники);
	КонецЕсли;
	
	Результат = РезервыПоОплатеТрудаДляНебольшихОрганизаций.ПерезаполнитьДанныеФормы(
		ЭтотОбъект,
		ОписаниеДокумента(ЭтотОбъект),
		СписокСотрудников,
		ИспользоватьДлительнуюОперацию);
		
	Если Результат <> Неопределено Тогда
		АдресХранилища = Результат.АдресХранилища;
	КонецЕсли;
	
	Если Результат <> Неопределено И Результат.ЗаданиеВыполнено Тогда
		ЗаполнениеПослеВыполненияДлительнойОперации();
	КонецЕсли;
			
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьСотрудника(ИмяТаблицы, ВыбранныеСтроки, ВедущееПоле, ТипВедущегоПоля, СохранятьИсправления = Истина) Экспорт
	
	ОчиститьСообщения();
	
	ТабличнаяЧасть = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(ЭтотОбъект, "Объект." + ИмяТаблицы);
	
	ФизическиеЛицаСотрудников = Новый Массив;
	Для Каждого ИдентификаторСтроки Из ВыбранныеСтроки Цикл
		
		ПерерассчитываемаяСтрока = ТабличнаяЧасть.НайтиПоИдентификатору(ИдентификаторСтроки);
		Сотрудник = ПерерассчитываемаяСтрока[ВедущееПоле];
		Если ТипЗнч(Сотрудник) = Тип("СправочникСсылка.Сотрудники") Тогда
			ФизическиеЛицаСотрудников.Добавить(СотрудникиКлиентСерверПовтИсп.ФизическиеЛицаСотрудников(Сотрудник)[0]);
		Иначе
			ФизическиеЛицаСотрудников.Добавить(Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	ФизическиеЛицаСотрудников = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ФизическиеЛицаСотрудников);
	Сотрудники = Новый Массив;
	ОписаниеДокумента = ОписаниеДокумента(ЭтотОбъект);
	
	СодержимоеДокумента = СодержимоеСотрудниковДокумента(ФизическиеЛицаСотрудников, Сотрудники, ТипВедущегоПоля);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.ДокументСсылка      = Объект.Ссылка;
	СтруктураПараметров.ВидОперации         = Объект.ВидОперации;
	СтруктураПараметров.Резерв              = Объект.Резерв;
	СтруктураПараметров.Организация         = Объект.Организация;
	СтруктураПараметров.Подразделение       = Объект.Подразделение;
	СтруктураПараметров.МесяцНачисления     = Объект.МесяцНачисления;
	СтруктураПараметров.Сотрудники          = Сотрудники;
	СтруктураПараметров.ФизическиеЛица      = ФизическиеЛицаСотрудников;
	СтруктураПараметров.ОписаниеДокумента   = ОписаниеДокумента;
	СтруктураПараметров.СодержимоеДокумента = СодержимоеДокумента;
	СтруктураПараметров.ПозицииВставки      = Неопределено;
	
	Результат = ПересчитатьСотрудникаНаСервере(СтруктураПараметров, УникальныйИдентификатор, СохранятьИсправления);
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат <> Неопределено Тогда
		АдресХранилища = Результат.АдресХранилища;
	КонецЕсли;
		
	Если Результат <> Неопределено И Результат.ЗаданиеВыполнено Тогда
		ЗаполнениеПослеВыполненияДлительнойОперацииНаКлиенте();	
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ОчиститьСписокСотрудниковКРасчету();
		УстановитьЗначенияКонтролируемыхПолей();
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		ПересчетСотрудникаВДлительнойОперации = Истина;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьСотрудниковКРасчету(Сотрудники, ФизическиеЛица, Организация)
	
	ПараметрыЗапроса = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыЗапроса.СписокФизическихЛиц           = ФизическиеЛица;
	ПараметрыЗапроса.Организация                   = Организация;
	ПараметрыЗапроса.ОтбиратьПоГоловнойОрганизации = Истина;
	
	СотрудникиОрганизации = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыЗапроса);
	СотрудникиФизическихЛиц = ОбщегоНазначения.ВыгрузитьКолонку(СотрудникиОрганизации, "Сотрудник", Истина);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Сотрудники, СотрудникиФизическихЛиц);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПересчитатьСотрудникаНаСервере(Знач СтруктураПараметров, УникальныйИдентификатор, СохранятьИсправления)
	
	ИспользоватьДлительнуюОперацию = Истина;
	// Если заполнение выполняется по ограниченному составу сотрудников, то обходимся без длительной операции.
	Если ТипЗнч(СтруктураПараметров.Сотрудники) <> Тип("Массив") Или СтруктураПараметров.Сотрудники.Количество() < 10 Тогда 
		ИспользоватьДлительнуюОперацию = Ложь;
	КонецЕсли;
	
	СтруктураПараметров.КонтролируемыеПоля = КонтролируемыеПоля();
	
	Если Не ИспользоватьДлительнуюОперацию Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		РезервыПоОплатеТрудаДляНебольшихОрганизаций.ПодготовитьДанныеДляПерезаполнения(СтруктураПараметров, АдресХранилища);
		Возврат Новый Структура("ЗаданиеВыполнено, АдресХранилища", Истина, АдресХранилища);
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru = 'Заполнение документа ""Резервы по оплате труда""'");
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"РезервыПоОплатеТрудаДляНебольшихОрганизаций.ПодготовитьДанныеДляПерезаполнения",
		СтруктураПараметров,
		НаименованиеЗадания);
			
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НоваяСтрокаТаблицыСодержимогоДокумента(ТабличнаяЧасть, Идентификатор, СтруктураТаблицДокумента, ИмяТаблицы)
	
	СодержимоеДокумента = СтруктураТаблицДокумента.СодержимоеДокумента;
	ШаблонСтрокТаблиц = СтруктураТаблицДокумента.ШаблонСтрокТаблиц;
	
	СтрокаТаблицы = ТабличнаяЧасть.НайтиПоИдентификатору(Идентификатор);
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НоваяСтрока = НоваяСтрокаДанныхПоСотрудникам(СодержимоеДокумента[ИмяТаблицы], ШаблонСтрокТаблиц[ИмяТаблицы]);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервере
Функция РезультатЗаполненияВДлительнойОперации(ДопПараметрыОтбора = Неопределено)
	
	ОчиститьТаблицыДокументаНаСервере();
	
	СтруктураПараметров = РезервыПоОплатеТрудаДляНебольшихОрганизаций.ПараметрыПолученияДанныхЗаполненияДокумента();
	СтруктураПараметров.ОписаниеДокумента  = ОписаниеДокумента(ЭтотОбъект);
	СтруктураПараметров.Организация        = Объект.Организация;
	СтруктураПараметров.ДокументСсылка     = Объект.Ссылка;
	СтруктураПараметров.Подразделение      = Объект.Подразделение;
	СтруктураПараметров.МесяцНачисления    = Объект.МесяцНачисления;
	СтруктураПараметров.Резерв             = Объект.Резерв;
	СтруктураПараметров.ВидОперации        = Объект.ВидОперации;
	СтруктураПараметров.ДопПараметрыОтбора = ДопПараметрыОтбора;
	
	НаименованиеЗадания = НСтр("ru = 'Заполнение документа ""Резервы по оплате труда""'");
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Документы.РезервыПоОплатеТруда.ПодготовитьДанныеДляЗаполнения",
		СтруктураПараметров,
		НаименованиеЗадания);
	
	АдресХранилища = Результат.АдресХранилища;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗаполнениеПослеВыполненияДлительнойОперации();
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВыделенныеСотрудникиКоллекции(Знач Коллекция, Знач ИдентификаторыСтрок, ПолеСотрудник = "Сотрудник")
	
	Сотрудники = Новый Массив;
	
	Для Каждого	ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		Строка = Коллекция.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если Строка <> Неопределено
			И ЗначениеЗаполнено(Строка[ПолеСотрудник]) Тогда
			
			Сотрудники.Добавить(Строка[ПолеСотрудник]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Сотрудники;
	
КонецФункции

&НаСервере
Функция СотрудникиДляРасчета(Сотрудники)
	
	Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.ФизическиеЛица")
		Или ТипЗнч(Сотрудники) = Тип("Массив") И Сотрудники.Количество() > 0 И ТипЗнч(Сотрудники[0]) = Тип("СправочникСсылка.ФизическиеЛица") Тогда 
		Возврат Сотрудники;
	КонецЕсли;
	
	СотрудникиДокумента = СотрудникиДокумента();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("СотрудникиДокумента", СотрудникиДокумента);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Сотрудники.ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТФизическиеЛица
	               |ИЗ
	               |	Справочник.Сотрудники КАК Сотрудники
	               |ГДЕ
	               |	Сотрудники.Ссылка В(&Сотрудники)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Сотрудники.Ссылка
	               |ИЗ
	               |	Справочник.Сотрудники КАК Сотрудники
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ФизическиеЛица
	               |		ПО Сотрудники.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
	               |			И (Сотрудники.Ссылка В (&СотрудникиДокумента))
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	Сотрудники.Ссылка
	               |ИЗ
	               |	Справочник.Сотрудники КАК Сотрудники
	               |ГДЕ
	               |	Сотрудники.Ссылка В(&Сотрудники)";
				   
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");			   
	
КонецФункции

&НаСервере
Функция СотрудникиФизическиеЛицаОтбор(Сотрудники)
	
	СотрудникиДокумента = СотрудникиДокумента();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("СотрудникиДокумента", СотрудникиДокумента);
	
	Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.ФизическиеЛица")
		Или ТипЗнч(Сотрудники) = Тип("Массив") И Сотрудники.Количество() > 0 И ТипЗнч(Сотрудники[0]) = Тип("СправочникСсылка.ФизическиеЛица") Тогда 
		
		ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.Ссылка КАК Сотрудник,
			|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.Ссылка В(&СотрудникиДокумента)
			|	И Сотрудники.ФизическоеЛицо В(&Сотрудники)";
			
		СотрудникиФизическиеЛица = Запрос.Выполнить().Выбрать();
		Если ТипЗнч(Сотрудники) <> Тип("Массив") Тогда
			ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
		Иначе
			ФизическиеЛица = Сотрудники;
		КонецЕсли;
	Иначе
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Сотрудники.ФизическоеЛицо
			|ПОМЕСТИТЬ ВТФизическиеЛица
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.Ссылка В(&Сотрудники)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Сотрудники.Ссылка КАК Сотрудник,
			|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ФизическиеЛица
			|		ПО Сотрудники.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
			|			И (Сотрудники.Ссылка В (&СотрудникиДокумента))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТФизическиеЛица.ФизическоеЛицо
			|ИЗ
			|	ВТФизическиеЛица КАК ВТФизическиеЛица";
			
		Результат = Запрос.ВыполнитьПакет();
		ФизическиеЛица = Результат[2].Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
		СотрудникиФизическиеЛица = Результат[1].Выбрать();
		
	КонецЕсли;
	
	Отбор = Новый Структура("СотрудникиКРасчету, ФизическиеЛицаСотрудников, ФизическиеЛицаОтбор, ФизическиеЛица");
	Отбор.ФизическиеЛица = ФизическиеЛица;
	Отбор.ФизическиеЛицаСотрудников = Новый Соответствие;
	Отбор.ФизическиеЛицаОтбор = Новый Соответствие;
	Отбор.СотрудникиКРасчету = Новый Массив;
	
	Пока СотрудникиФизическиеЛица.Следующий() Цикл
		Отбор.ФизическиеЛицаСотрудников.Вставить(СотрудникиФизическиеЛица.Сотрудник, СотрудникиФизическиеЛица.ФизическоеЛицо);
		Отбор.СотрудникиКРасчету.Добавить(СотрудникиФизическиеЛица.Сотрудник);
	КонецЦикла;
	
	Для каждого ФизическоеЛицо Из ФизическиеЛица Цикл
		Отбор.ФизическиеЛицаОтбор.Вставить(ФизическоеЛицо, Истина)
	КонецЦикла; 
	
	Возврат Отбор;
	
КонецФункции

&НаСервере
Функция СотрудникиДокумента()
	
	СотрудникиДокумента = Новый Массив;
	
	ОписанияТаблиц = ОписанияТаблицНачислений();
	Для Каждого ОписаниеТаблицы Из ОписанияТаблиц Цикл 
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СотрудникиДокумента, ОбщегоНазначения.ВыгрузитьКолонку(Объект[ОписаниеТаблицы], "Сотрудник", Истина));
	КонецЦикла;
	
	Возврат СотрудникиДокумента;
	
КонецФункции

&НаСервере
Процедура ОбработатьИзменениеПоказателейНаСервере(ЗначенияПоказателей)
	
	АдресОбщихПоказателей    = ЗначенияПоказателей.АдресОбщихПоказателей;
	ЗначенияОбщихПоказателей = ПолучитьИзВременногоХранилища(АдресОбщихПоказателей);
	Если Не ЗначениеЗаполнено(ЗначенияОбщихПоказателей) Тогда
		Возврат;
	КонецЕсли;
	
	Сотрудники = Новый Массив;
	УникальныеСотрудники = Новый Соответствие;
	
	ЗначениеПоказателя = ЗначенияОбщихПоказателей["ПроцентГодовойПремии"];
	
	Для Каждого СтрокаСотрудника Из Объект.Начисления Цикл
		СтрокаСотрудника["Значение1"] = ЗначениеПоказателя;
		Если УникальныеСотрудники[СтрокаСотрудника.Сотрудник] = Неопределено Тогда 
			Сотрудники.Добавить(СтрокаСотрудника.Сотрудник);
			УникальныеСотрудники.Вставить(СтрокаСотрудника.Сотрудник, Истина);
		КонецЕсли;
	КонецЦикла;
	
	РассчитатьСотрудникаНаСервере(Сотрудники);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент()
	
	ОчиститьСообщения();
	
	Если Объект.ПометкаУдаления Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Помеченный на удаление документ не может быть проведен.'"));
		Возврат;
	КонецЕсли;
	
	Если СотрудникиКРасчету.Количество() > 0 Тогда
		
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПровестиДокументОкончание", ЭтотОбъект);
		
		ТекстВопроса = НСтр("ru='Перед записью документа необходимо провести перерасчет измененных строк.
			|Продолжить?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
		
	Иначе
		ПровестиДокументНаКлиенте();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокументОкончание(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПересчитатьДокументНаКлиенте();
		ПровестиДокументНаКлиенте();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокументНаКлиенте()
	
	Результат = РезультатПроведенияВДлительнойОперации();
	
	Если Результат.Свойство("ОшибкиПроверкиЗаполнения") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ОповеститьОбИзмененииОбъекта();
		ПроведениеВДлительнойОперации = Ложь;
		Если ЗакрыватьПослеЗаписи Тогда
			ПодключитьОбработчикОжидания("ЗакрытьФорму", 0.1, Истина);
		КонецЕсли;
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РезультатПроведенияВДлительнойОперации()
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ОшибкиПроверкиЗаполнения", Истина);
	КонецЕсли;
	
	ДокументОбъект = Неопределено;
	// Преобразовываем данные формы в объект, чтобы записать его.
	Если Модифицированность Или Объект.Проведен Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		РеквизитыВДанные(ДокументОбъект);
		ДокументОбъект.ДополнительныеСвойства.Вставить("Проведен", ДокументОбъект.Проведен);
		ДанныеДокумента = ЗарплатаКадры.СериализоватьОбъектВДвоичныеДанные(ДокументОбъект);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДокументСсылка", Объект.Ссылка);
	СтруктураПараметров.Вставить("ДанныеДокумента", ДанныеДокумента);
	СтруктураПараметров.Вставить("Отказ", Ложь);
	СтруктураПараметров.Вставить("УстановитьПроведениеДокумента", Истина);
	СтруктураПараметров.Вставить("ВидОперации", Объект.ВидОперации);
	
	Если ДокументОбъект <> Неопределено Тогда
		
		Если ДокументОбъект.ДополнительныеСвойства.Свойство("ПериодыРасчетаСотрудников") Тогда
			СтруктураПараметров.Вставить("ПериодыРасчетаСотрудников", ДокументОбъект.ДополнительныеСвойства.ПериодыРасчетаСотрудников);
		КонецЕсли; 
		
	КонецЕсли; 
	
	НаименованиеЗадания = НСтр("ru = 'Проведение документа ""Резервы по оплате труда""'");
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Документы.РезервыПоОплатеТруда.ВыполнитьПроведение",
		СтруктураПараметров,
		НаименованиеЗадания);
	
	АдресХранилища = Результат.АдресХранилища;
	
	ПроведениеВДлительнойОперации = Не Результат.ЗаданиеВыполнено;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ПроведениеПослеВыполненияДлительнойОперации();
		ПроведениеВДлительнойОперации = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнениеПослеВыполненияДлительнойОперации()
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляЗаполнения = Неопределено;
	Сотрудники          = Неопределено;
	ПозицииВставки      = Неопределено;
	
	Если СтруктураДанных.Свойство("ДанныеДляЗаполненияТаблицДокумента", ДанныеДляЗаполнения) Тогда
		// Заполнение табличных частей и вторичных данных коллекций, которые с ней связаны.
		ОчиститьТаблицыДокументаНаСервере();
		ДанныеДляЗаполненияВДанныеФормы(ДанныеДляЗаполнения, Объект, , , ЭтоИнвентаризация);
		Если ЭтоИнвентаризация Тогда
			ВводНачисленийЗаполнитьВторичныеДанныеПоказателей();
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ДанныеДляПерезаполненияТаблицДокумента", ДанныеДляЗаполнения) Тогда
		Сотрудники = СтруктураДанных.СтруктураПараметров.Сотрудники;
		ПозицииВставки = СтруктураДанных.СтруктураПараметров.ПозицииВставки;
		ДанныеДляЗаполненияВДанныеФормы(ДанныеДляЗаполнения, Объект, ПозицииВставки, Сотрудники, ЭтоИнвентаризация);
		Если ЭтоИнвентаризация Тогда
			ВводНачисленийЗаполнитьВторичныеДанныеПоказателей();
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнениеВыполнено = Истина;
	
	ЗаполнитьДобавленныеКолонкиТаблицПоказателямиУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеПослеВыполненияДлительнойОперацииНаКлиенте()
	
	СодержимоеДокумента = СодержимоеДокументаПослеРасчета(
		АдресХранилища,
		МассивОписанийТаблицФормы(ЭтотОбъект),
		ЭтоИнвентаризация);
		
	ФизическиеЛица = СодержимоеДокумента.ФизическиеЛица;
	СтрокиТаблицРасчетаПоФизическимЛицам = СодержимоеДокумента.СтрокиТаблицРасчетаПоФизическимЛицам;
	Если СодержимоеДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаменитьСтрокиТаблицДокумента(Объект, ФизическиеЛица, СтрокиТаблицДокументаПоФизическимЛицам, СтрокиТаблицРасчетаПоФизическимЛицам);
	
	ЗаполнениеВыполнено = Истина;
	ПересчетСотрудникаВДлительнойОперации = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаменитьСтрокиТаблицДокумента(Объект, ФизическиеЛица, СтрокиТаблицДокумента, СтрокиТаблицРасчета, ТаблицыДокумента = Неопределено)
	
	Если ТаблицыДокумента = Неопределено Тогда
		ТаблицыДокумента = ТаблицыДокументаСДаннымиФизическихЛиц();
	КонецЕсли;
	
	Для Каждого ФизическоеЛицо Из ФизическиеЛица Цикл
		
		ТаблицыДокументаФизическогоЛица = СтрокиТаблицДокумента[ФизическоеЛицо];
		ТаблицыРасчетаФизическогоЛица = СтрокиТаблицРасчета[ФизическоеЛицо];
		
		Для Каждого ИмяТаблицы Из ТаблицыДокумента Цикл
			СтрокиТаблицыДокумента = Неопределено;
			Если Не ТаблицыДокументаФизическогоЛица.Свойство(ИмяТаблицы, СтрокиТаблицыДокумента) Тогда
				СтрокиТаблицыДокумента = Новый Массив;
				ТаблицыДокументаФизическогоЛица.Вставить(ИмяТаблицы, СтрокиТаблицыДокумента);
			КонецЕсли;
			
			СтрокиТаблицыРасчета = Неопределено;
			ОбходТаблицыИдентификаторов = НовыйОбходИдентификаторовТаблицы(СтрокиТаблицыДокумента);
			
			Если ТаблицыРасчетаФизическогоЛица <> Неопределено
				И ТаблицыРасчетаФизическогоЛица.Свойство(ИмяТаблицы, СтрокиТаблицыРасчета) Тогда
				
				Для Каждого СтрокаИсточника Из СтрокиТаблицыРасчета Цикл
					СтрокаФормы = СтрокаТаблицыПоНачальнойПозиции(Объект[ИмяТаблицы], ОбходТаблицыИдентификаторов);
					ЗаполнитьЗначенияСвойств(СтрокаФормы, СтрокаИсточника);
				КонецЦикла;
			КонецЕсли;
			
			Пока ОбходТаблицыИдентификаторов.ТекущаяПозиция < ОбходТаблицыИдентификаторов.Количество Цикл
				СтрокаФормы = СтрокаТаблицыПоНачальнойПозиции(Объект[ИмяТаблицы], ОбходТаблицыИдентификаторов);
				Объект[ИмяТаблицы].Удалить(СтрокаФормы);
				УдалитьИдентификаторТаблицыФормы(ОбходТаблицыИдентификаторов);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаТаблицыПоНачальнойПозиции(ТаблицаИсточник, ОбходТаблицыИдентификаторов = Неопределено) Экспорт
	
	Если ОбходТаблицыИдентификаторов = Неопределено Тогда
		Возврат ТаблицаИсточник.Добавить();
	КонецЕсли;
	
	Если ОбходТаблицыИдентификаторов.ТекущаяПозиция >= ОбходТаблицыИдентификаторов.Количество Тогда
		Если ОбходТаблицыИдентификаторов.ТекущаяПозиция = 0 Тогда
			СтрокаФормы = ТаблицаИсточник.Добавить();
		Иначе
			ПредыдущийИдентификатор = ОбходТаблицыИдентификаторов.Идентификаторы[ОбходТаблицыИдентификаторов.ТекущаяПозиция - 1];
			ПредыдущаяСтрокаФормы = ТаблицаИсточник.НайтиПоИдентификатору(ПредыдущийИдентификатор);
			ПозицияВставки = ТаблицаИсточник.Индекс(ПредыдущаяСтрокаФормы) + 1;
			СтрокаФормы = ТаблицаИсточник.Вставить(ПозицияВставки);
		КонецЕсли;
		ОбходТаблицыИдентификаторов.Идентификаторы.Добавить(СтрокаФормы.ПолучитьИдентификатор());
	Иначе
		Идентификатор = ОбходТаблицыИдентификаторов.Идентификаторы[ОбходТаблицыИдентификаторов.ТекущаяПозиция];
		СтрокаФормы = ТаблицаИсточник.НайтиПоИдентификатору(Идентификатор);
	КонецЕсли;
	
	ОбходТаблицыИдентификаторов.ТекущаяПозиция = ОбходТаблицыИдентификаторов.ТекущаяПозиция + 1;
	Если СтрокаФормы = Неопределено Тогда
		УдалитьИдентификаторТаблицыФормы(ОбходТаблицыИдентификаторов);
		Возврат СтрокаТаблицыПоНачальнойПозиции(ТаблицаИсточник, ОбходТаблицыИдентификаторов);
	КонецЕсли;
	
	Возврат СтрокаФормы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьИдентификаторТаблицыФормы(ОбходТаблицыИдентификаторов)
	
	ОбходТаблицыИдентификаторов.ТекущаяПозиция = ОбходТаблицыИдентификаторов.ТекущаяПозиция - 1;
	ОбходТаблицыИдентификаторов.Идентификаторы.Удалить(ОбходТаблицыИдентификаторов.ТекущаяПозиция);
	ОбходТаблицыИдентификаторов.Количество = ОбходТаблицыИдентификаторов.Количество - 1;
	
КонецПроцедуры

&НаКлиенте
Функция СодержимоеСотрудниковДокумента(ФизическиеЛицаСотрудников, Сотрудники, ТипВедущегоПоля)
	
	СтруктураТаблицДокумента = НовыйСтруктураТаблицДокумента();
	СодержимоеДокумента = СтруктураТаблицДокумента.СодержимоеДокумента;
	ШаблонСтрокТаблиц = СтруктураТаблицДокумента.ШаблонСтрокТаблиц;
	
	Для Каждого ФизическоеЛицоСотрудника Из ФизическиеЛицаСотрудников Цикл
		
		СтрокиТаблицПоФизическомуЛицу = СтрокиТаблицДокументаПоФизическимЛицам.Получить(ФизическоеЛицоСотрудника);
		Если СтрокиТаблицПоФизическомуЛицу = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из СтрокиТаблицПоФизическомуЛицу Цикл
			ИмяТаблицыФизическогоЛица = КлючИЗначение.Ключ;
			
			Идентификаторы = КлючИЗначение.Значение;
			ТабличнаяЧасть = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(ЭтотОбъект, "Объект." + ИмяТаблицыФизическогоЛица);
			
			Для Каждого Идентификатор Из Идентификаторы Цикл
				НоваяСтрока = НоваяСтрокаТаблицыСодержимогоДокумента(ТабличнаяЧасть, Идентификатор, СтруктураТаблицДокумента, ИмяТаблицыФизическогоЛица);
				Если НоваяСтрока = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если НоваяСтрока.Свойство("Сотрудник")
					И ЗначениеЗаполнено(НоваяСтрока.Сотрудник)
					И ТипЗнч(НоваяСтрока.Сотрудник) = Тип("СправочникСсылка.Сотрудники") Тогда
						
					Сотрудники.Добавить(НоваяСтрока.Сотрудник);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если ТипВедущегоПоля = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ДополнитьСотрудниковКРасчету(Сотрудники, ФизическиеЛицаСотрудников, Объект.Организация);
	КонецЕсли;
	
	Сотрудники = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Сотрудники);
	
	Возврат СодержимоеДокумента;
	
КонецФункции

&НаСервере
Функция СодержимоеДокументаПослеРасчета(АдресХранилища, ОписаниеТаблиц, ЗаполнятьПоказатели)
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеДляЗаполнения = Неопределено;
	Если Не СтруктураДанных.Свойство("ДанныеДляПерезаполненияТаблицДокумента", ДанныеДляЗаполнения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПараметров = СтруктураДанных.СтруктураПараметров;
	
	СодержимоеДокумента = РезервыПоОплатеТруда.НовыйСодержимоеДокументаРасчетаРезервов();
	СодержимоеДокумента.Вставить("Ссылка",          СтруктураПараметров.ДокументСсылка);
	СодержимоеДокумента.Вставить("Сотрудники",      СтруктураПараметров.Сотрудники);
	СодержимоеДокумента.Вставить("Организация",     СтруктураПараметров.Организация);
	СодержимоеДокумента.Вставить("МесяцНачисления", СтруктураПараметров.МесяцНачисления);
	СодержимоеДокумента.Вставить("ВидОперации",     СтруктураПараметров.ВидОперации);
	
	СодержимоеФормыДляЗаполнения = Новый Структура("Объект", СодержимоеДокумента);
	Сотрудники = СтруктураПараметров.Сотрудники;
	
	ДанныеДляЗаполненияВДанныеФормы(ДанныеДляЗаполнения, СодержимоеДокумента, , Сотрудники, ЗаполнятьПоказатели);
	Если ЗаполнятьПоказатели Тогда
		ВводНачисленийЗаполнитьВторичныеДанныеПоказателей();
	КонецЕсли;
	
	СтрокиТаблицПоФизическимЛицам = СтрокиТаблицПоФизическимЛицам(СодержимоеДокумента, Ложь);
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ФизическиеЛица) Тогда
		ФизическиеЛица = СтруктураПараметров.ФизическиеЛица;
	Иначе
		ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиТаблицПоФизическимЛицам, "Ключ");
	КонецЕсли;
		
	Результат = Новый Структура;
	Результат.Вставить("СтрокиТаблицРасчетаПоФизическимЛицам", СтрокиТаблицПоФизическимЛицам);
	Результат.Вставить("ФизическиеЛица", ФизическиеЛица);
		
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПроведениеПослеВыполненияДлительнойОперации()
	
	Модифицированность = Ложь;
	Если Не ЗакрыватьПослеЗаписи Тогда
		ДокументОбъект = ЗарплатаКадры.ДесериализоватьОбъектИзДвоичныхДанных(ПолучитьИзВременногоХранилища(АдресХранилища));
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		ПриПолученииДанныхНаСервере(ДокументОбъект, Ложь);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОтложенноеПроведениеДокументов") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОтражениеДокументовВУчетеСтраховыхВзносов");
		Модуль.ОтразитьДокументыВУчетеСтраховыхВзносовВДлительнойОперации(Объект.Организация, Объект.Ссылка);
	КонецЕсли;
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Функция СообщенияФоновогоЗадания(ИдентификаторЗадания)
	
	СообщенияПользователю = Новый Массив;
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если ФоновоеЗадание <> Неопределено Тогда
		СообщенияПользователю = ФоновоеЗадание.ПолучитьСообщенияПользователю();
	КонецЕсли;
	
	Возврат СообщенияПользователю;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	ЗаданиеВыполненоВДлительнойОперации = Ложь;
	
	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				Если ПроведениеВДлительнойОперации Тогда
					ПроведениеПослеВыполненияДлительнойОперации();
				Иначе
					ОчиститьСписокСотрудниковКРасчету();
					Если ПересчетСотрудникаВДлительнойОперации Тогда
						ЗаполнениеПослеВыполненияДлительнойОперацииНаКлиенте();
					Иначе
						ЗаполнениеПослеВыполненияДлительнойОперации();
					КонецЕсли;
				КонецЕсли;
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				ЗаданиеВыполненоВДлительнойОперации = Истина;
				ОповеститьОбИзмененииОбъекта();
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
					"Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал,
					Истина);
			КонецЕсли;
		ИначеЕсли Не ФормаДлительнойОперации.Открыта() И ПроведениеВДлительнойОперации Тогда
			ПроведениеВДлительнойОперации = Ложь;
			ЗакрыватьПослеЗаписи = Ложь;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		
		СообщенияПользователю = СообщенияФоновогоЗадания(ИдентификаторЗадания);
		Если СообщенияПользователю <> Неопределено Тогда
			Для каждого СообщениеФоновогоЗадания Из СообщенияПользователю Цикл
				СообщениеФоновогоЗадания.Сообщить();
			КонецЦикла;
		КонецЕсли;
		
		ВызватьИсключение;
	КонецПопытки;
	
	Если ПроведениеВДлительнойОперации И ЗаданиеВыполненоВДлительнойОперации Тогда
		Если ЗакрыватьПослеЗаписи Тогда
			ПодключитьОбработчикОжидания("ЗакрытьФорму", 0.1, Истина);
		КонецЕсли;
		ПроведениеВДлительнойОперации = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	МассивСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(Объект.Начисления, "Сотрудник", Истина);
	
	Возврат ПоместитьВоВременноеХранилище(МассивСотрудников, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ОбработкаПодбораНаКлиенте(Сотрудники)
	
	МассивСотрудников = ПодобранныеСотрудники(Сотрудники);
	
	Если МассивСотрудников.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Результат = ПерезаполнитьДанныеФормыНаСервере(МассивСотрудников, Ложь);
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ОчиститьСписокСотрудниковКРасчету(Сотрудники);
 		ОповеститьОбИзмененииОбъекта();
		УстановитьЗначенияКонтролируемыхПолей();
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодобранныеСотрудники(Сотрудники)
	
	// Оставляем только сотрудников, которых нет в документе.
	МассивСотрудников = Новый Массив;
	
	ИменаТаблиц = Новый Массив;
	ИменаТаблиц.Добавить("Начисления");
	
	УникальныеСотрудники = Новый Соответствие;
	СписокСотрудниковДокумента = Новый Массив;
	
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл
		Для Каждого СтрокаСотрудника Из Объект[ИмяТаблицы] Цикл 
			Если УникальныеСотрудники[СтрокаСотрудника.Сотрудник] = Неопределено Тогда 
				СписокСотрудниковДокумента.Добавить(СтрокаСотрудника.Сотрудник);
				УникальныеСотрудники.Вставить(СтрокаСотрудника.Сотрудник, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Сотрудник Из Сотрудники Цикл
		Если УникальныеСотрудники[Сотрудник] = Неопределено Тогда 
			МассивСотрудников.Добавить(Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	// Для корректного пересчета зависимых таблиц добавляем сотрудников из документа с совпадающими физическими лицами.
	ФизическиеЛицаПодобранныхСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСотрудников, "ФизическоеЛицо");
	
	ФизическиеЛица = Новый Соответствие;
	Для Каждого КлючИЗначение Из ФизическиеЛицаПодобранныхСотрудников Цикл 
		ФизическиеЛица.Вставить(КлючИЗначение.Значение, Истина);
	КонецЦикла;
	
	ФизическиеЛицаСотрудниковДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокСотрудниковДокумента, "ФизическоеЛицо");
	
	Для Каждого КлючИЗначение Из ФизическиеЛицаСотрудниковДокумента Цикл 
		Если ФизическиеЛица[КлючИЗначение.Значение] <> Неопределено Тогда 
			МассивСотрудников.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСотрудников;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеДокумента(Форма)
	
	Описание = Новый Структура("Резерв, ВидОперации,
		|НачисленияИмя, ВзносыИмя, РасчетРезервовИмя, ОценочныеОбязательстваПоСотрудникамИмя, ОценочныеОбязательстваИмя,
		|НачисленияКоманднаяПанельИмя, ВзносыКоманднаяПанельИмя, РасчетРезервовКоманднаяПанельИмя, ОценочныеОбязательстваПоСотрудникамКоманднаяПанельИмя, ОценочныеОбязательстваКоманднаяПанельИмя");
	
	Если Форма.ИспользоватьНачисление Тогда 
		Описание.НачисленияИмя = "Начисления";
		Описание.НачисленияКоманднаяПанельИмя = "НачисленияАвтоКоманды";
	КонецЕсли;
	
	Если Форма.ИспользоватьВзносы Тогда 
		Описание.ВзносыИмя = "Взносы";
		Описание.ВзносыКоманднаяПанельИмя = "ВзносыАвтоКоманды";
	КонецЕсли;
	
	Если Форма.ИспользоватьРасчет Тогда
		Описание.РасчетРезервовИмя = "РасчетРезервов";
		Описание.РасчетРезервовКоманднаяПанельИмя = "РасчетРезервовАвтоКоманды";
	КонецЕсли;
	
	Описание.ОценочныеОбязательстваПоСотрудникамИмя = "ОценочныеОбязательстваПоСотрудникам";
	Описание.ОценочныеОбязательстваПоСотрудникамКоманднаяПанельИмя = "ОценочныеОбязательстваПоСотрудникамАвтоКоманды";
	
	Описание.ОценочныеОбязательстваИмя = "ОценочныеОбязательства";
	Описание.ОценочныеОбязательстваКоманднаяПанельИмя = "ОценочныеОбязательстваАвтоКоманды";
	
	Описание.Вставить("Резерв", Форма.Объект.Резерв);
	Описание.Вставить("ВидОперации", Форма.Объект.ВидОперации);
	Описание.Вставить("ДокументСсылка", Форма.Объект.Ссылка);
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыРасчета()
	
	Описание = Новый Структура("ИмяТаблицы,
		|СодержитПолеСотрудник,
		|ИмяРеквизитаСотрудник,
		|НомерТаблицы,
		|ПутьКДанным,
		|ИмяРеквизитаФиксРасчет");
	
	Возврат Описание;
	
КонецФункции


&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыНачислений()
	
	Описание = ОписаниеТаблицыРасчета();
	Описание.ИмяТаблицы             = "Начисления";
	Описание.СодержитПолеСотрудник  = Истина;
	Описание.ИмяРеквизитаСотрудник  = "Сотрудник";
	Описание.НомерТаблицы           = 0;
	Описание.ПутьКДанным            = "Объект.Начисления";
	Описание.ИмяРеквизитаФиксРасчет = "НачисленияФиксРасчет";
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыВзносов()
	
	Описание = ОписаниеТаблицыРасчета();
	Описание.ИмяТаблицы             = "Взносы";
	Описание.СодержитПолеСотрудник  = Ложь;
	Описание.ИмяРеквизитаСотрудник  = "ФизическоеЛицо";
	Описание.НомерТаблицы           = 1;
	Описание.ПутьКДанным            = "Объект.Взносы";
	Описание.ИмяРеквизитаФиксРасчет = "ВзносыФиксРасчет";
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыРасчетаРезервов()
	
	Описание = ОписаниеТаблицыРасчета();
	Описание.ИмяТаблицы             = "РасчетРезервов";
	Описание.СодержитПолеСотрудник  = Истина;
	Описание.ИмяРеквизитаСотрудник  = "Сотрудник";
	Описание.НомерТаблицы           = 2;
	Описание.ПутьКДанным            = "Объект.РасчетРезервов";
	Описание.ИмяРеквизитаФиксРасчет = "РасчетРезервовФиксРасчет";
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыОценочныхОбязательствПоСотрудникам()
	
	Описание = ОписаниеТаблицыРасчета();
	Описание.ИмяТаблицы             = "ОценочныеОбязательстваПоСотрудникам";
	Описание.СодержитПолеСотрудник  = Истина;
	Описание.ИмяРеквизитаСотрудник  = "Сотрудник";
	Описание.НомерТаблицы           = 3;
	Описание.ПутьКДанным            = "Объект.ОценочныеОбязательстваПоСотрудникам";
	Описание.ИмяРеквизитаФиксРасчет = "ОценочныеОбязательстваПоСотрудникамФиксРасчет";
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыОценочныеОбязательства()
	
	Описание = ОписаниеТаблицыРасчета();
	Описание.ИмяТаблицы             = "ОценочныеОбязательства";
	Описание.СодержитПолеСотрудник  = Ложь;
	Описание.ИмяРеквизитаСотрудник  = "";
	Описание.НомерТаблицы           = 4;
	Описание.ПутьКДанным            = "Объект.ОценочныеОбязательства";
	Описание.ИмяРеквизитаФиксРасчет = "ОценочныеОбязательстваФиксРасчет";
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МассивОписанийТаблицФормы(Форма)
	
	МассивОписанийТаблицФормы = Новый Структура;
	
	Если Форма.ИспользоватьНачисление Тогда 
		МассивОписанийТаблицФормы.Вставить("Начисления", ОписаниеТаблицыНачислений());
	КонецЕсли;
	
	Возврат МассивОписанийТаблицФормы;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьСписокСотрудниковКРасчету(Сотрудники = Неопределено) Экспорт
	
	Если Сотрудники = Неопределено Тогда
		СотрудникиКРасчету.Очистить();
	Иначе
		
		Если ТипЗнч(Сотрудники) =  Тип("СправочникСсылка.Сотрудники")
			Или ТипЗнч(Сотрудники) =  Тип("СправочникСсылка.ФизическиеЛица") Тогда
			СотрудникиКРасчетуВр = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
		Иначе
			СотрудникиКРасчетуВр = Сотрудники;
		КонецЕсли;
		
		Для каждого СотрудникКРасчету Из СотрудникиКРасчетуВр Цикл
			
			Если ТипЗнч(СотрудникКРасчету) = Тип("СправочникСсылка.Сотрудники") Тогда
				УдаляемоеФизическоеЛицо = ФизическоеЛицоСотрудника(СотрудникКРасчету);
			Иначе
				УдаляемоеФизическоеЛицо = СотрудникКРасчету;
			КонецЕсли;
			
			ПричиныРасчетаКУдалению = Новый Массив;
			Для каждого ПричинаРасчета Из СотрудникиКРасчету Цикл
				
				ПричинаРасчета.Значение.СписокСотрудников.Удалить(УдаляемоеФизическоеЛицо);
				Если ПричинаРасчета.Значение.СписокСотрудников.Количество() = 0 Тогда
					ПричиныРасчетаКУдалению.Добавить(ПричинаРасчета.Ключ);
				КонецЕсли;
				
			КонецЦикла;
			
			Для каждого ПричинаРасчетаКУдалению Из  ПричиныРасчетаКУдалению Цикл
				СотрудникиКРасчету.Удалить(ПричинаРасчетаКУдалению);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтотОбъект, СотрудникиКРасчету.Количество() > 0);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФизическоеЛицоСотрудника(Сотрудник)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
	
КонецФункции

&НаСервере
Процедура ДанныеВРеквизиты(ТекущийОбъект)
	
	ПолучитьКонтролируемыеПоля();
	
	Если ЭтоИнвентаризация Тогда
		ЗаполнитьТаблицуВидовРасчетаПоДаннымОбъекта(ЭтотОбъект, ТекущийОбъект);
		ВводНачисленийЗаполнитьВторичныеДанныеПоказателей();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуВидовРасчетаПоДаннымОбъекта(Форма, ДокументОбъект)
	
	ДанныеФормы = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "Объект.Начисления");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТПоказатели(ДокументОбъект, МенеджерВременныхТаблиц);
	СоздатьВТДанныеОсновнойТаблицы(ДокументОбъект, МенеджерВременныхТаблиц);
	ВыборкаСвойствВидовРасчета = ВыборкаСвойствВидовРасчета(Форма, ДокументОбъект, МенеджерВременныхТаблиц);
	
	ФизическиеЛицаСотрудников = Неопределено;
	Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ДокументОбъект.Начисления, "Сотрудник");
	Если Сотрудники.Количество() > 0
		И ТипЗнч(Сотрудники[0]) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Сотрудники, "ФизическоеЛицо");
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеФормы Цикл
		
		Если ВыборкаСвойствВидовРасчета <> Неопределено Тогда
			ВыборкаСвойствВидовРасчета.Следующий();
			ЗаполнитьЗначенияСвойств(СтрокаДанных, ВыборкаСвойствВидовРасчета);
		КонецЕсли;
		
		Если ФизическиеЛицаСотрудников <> Неопределено
			И ЗначениеЗаполнено(СтрокаДанных.Сотрудник) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДанных, ФизическиеЛицаСотрудников[СтрокаДанных.Сотрудник]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьВТДанныеОсновнойТаблицы(ДокументОбъект, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Таблица", ДокументОбъект.Начисления);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Сотрудник КАК Сотрудник,
	|	Таблица.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТДанныеОсновнойТаблицы
	|ИЗ
	|	&Таблица КАК Таблица";
	
	Запрос.Выполнить();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВТПоказатели(ТекущийОбъект, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Таблица.НомерСтроки,
	               |	Таблица.Показатель КАК Показатель,
	               |	Таблица.Значение,
	               |	Таблица.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета
	               |ПОМЕСТИТЬ ВТПоказатели
	               |ИЗ
	               |	&ТаблицаПоказателей КАК Таблица
				   |ГДЕ
				   |	&Условие";
	Если Параметры.Ключ.Пустая()
		И Параметры.Свойство("ЗначениеКопирования")
		И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаПоказателей", "Документ.РезервыПоОплатеТруда.Показатели");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие", "Таблица.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Параметры.ЗначениеКопирования);
	Иначе
		Запрос.УстановитьПараметр("ТаблицаПоказателей", ТекущийОбъект.Показатели);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие", "ИСТИНА");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыборкаСвойствВидовРасчета(Форма, ДокументОбъект, МенеджерВременныхТаблиц);
	
	КоличествоПоказателей = Форма.МаксимальноеКоличествоПоказателейНачисления;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДанныеОсновнойТаблицы.НомерСтроки КАК НомерСтроки,
		|	&ПоляСвойствПоказателей КАК ПоляСвойствПоказателей,
		|	ДанныеОсновнойТаблицы.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ПОМЕСТИТЬ ВТОсновнаяТаблицаСПоказателями
		|ИЗ
		|	ВТДанныеОсновнойТаблицы КАК ДанныеОсновнойТаблицы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&ПоляЗначенийПоказателей КАК ПоляЗначенийПоказателей,
		|	&ПоляСвойствПоказателейОсновнойТаблицы КАК ПоляСвойствПоказателейОсновнойТаблицы,
		|	ДанныеОсновнойТаблицы.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТОсновнаяТаблицаСПоказателями КАК ДанныеОсновнойТаблицы
		|		ЛЕВОЕ СОЕДИНЕНИЕ #ИсточникиЗначенийПоказателей КАК ИсточникиЗначенийПоказателей
		|		ПО (ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТОсновнаяТаблицаСПоказателями";
	
	ШаблонПолейСвойствПоказателей = "
		|	&Показатель1 КАК Показатель1,
		|	&ПредставлениеПоказателя1 КАК ПредставлениеПоказателя1,";
	
	ШаблонПолейСвойствПоказателейОсновнойТаблицы = "
		|	ДанныеОсновнойТаблицы.Показатель1 КАК Показатель1,
		|	ДанныеОсновнойТаблицы.ПредставлениеПоказателя1 КАК ПредставлениеПоказателя1,";
	
	ШаблонПолейЗначенийПоказателей = "
		|	Показатели1.Значение КАК Значение1,";
	
	ШаблонИсточниковЗначенийПоказателей = "
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели1
		|		ПО ДанныеОсновнойТаблицы.ИдентификаторСтроки = Показатели1.ИдентификаторСтрокиВидаРасчета
		|			И (ДанныеОсновнойТаблицы.Показатель1 = Показатели1.Показатель)";
		
	ПоляСвойствПоказателей = "";
	ПоляСвойствПоказателейОсновнойТаблицы = "";
	ПоляЗначенийПоказателя = "";
	ИсточникиЗначенийПоказателей = "";
	
	Для Сч = 1 По КоличествоПоказателей Цикл
		ПоляСвойствПоказателей = ПоляСвойствПоказателей + СтрЗаменить(ШаблонПолейСвойствПоказателей, "1", Строка(Сч));	
		ПоляСвойствПоказателейОсновнойТаблицы = ПоляСвойствПоказателейОсновнойТаблицы + СтрЗаменить(ШаблонПолейСвойствПоказателейОсновнойТаблицы, "1", Строка(Сч));	
		ИсточникиЗначенийПоказателей = ИсточникиЗначенийПоказателей + СтрЗаменить(ШаблонИсточниковЗначенийПоказателей, "1", Строка(Сч));
		ПоляЗначенийПоказателя = ПоляЗначенийПоказателя + СтрЗаменить(ШаблонПолейЗначенийПоказателей, "1", Строка(Сч));	
	КонецЦикла;	
	
	ПодстрокаПоиска = "&ПоляСвойствПоказателейОсновнойТаблицы КАК ПоляСвойствПоказателейОсновнойТаблицы,";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПодстрокаПоиска, ПоляСвойствПоказателейОсновнойТаблицы); 
	
	ПодстрокаПоиска = "&ПоляСвойствПоказателей КАК ПоляСвойствПоказателей,";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПодстрокаПоиска, ПоляСвойствПоказателей); 
	
	ПодстрокаПоиска = "&ПоляЗначенийПоказателей КАК ПоляЗначенийПоказателей,";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПодстрокаПоиска, ПоляЗначенийПоказателя); 
	
	ПодстрокаПоиска = "ЛЕВОЕ СОЕДИНЕНИЕ #ИсточникиЗначенийПоказателей КАК ИсточникиЗначенийПоказателей
					  |		ПО (ИСТИНА)";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПодстрокаПоиска, ИсточникиЗначенийПоказателей); 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Для Сч = 1 По КоличествоПоказателей Цикл
		Показатель              = Форма.ОписаниеПоказателей.МассивПоказателей[Сч-1];
		ПредставлениеПоказателя = Форма.ОписаниеПоказателей.Представление[Показатель];
		Запрос.УстановитьПараметр("Показатель" + Сч,              Показатель);
		Запрос.УстановитьПараметр("ПредставлениеПоказателя" + Сч, ПредставлениеПоказателя);
	КонецЦикла;	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

&НаСервере
Процедура ВводНачисленийЗаполнитьВторичныеДанныеПоказателей()
	
	ПустойПоказатель = "";
	Для Каждого СтрокаНачислений Из Объект.Начисления Цикл
		
		Для НомерПоказателя = 1 По МаксимальноеКоличествоПоказателейНачисления Цикл
			Показатель = СтрокаНачислений["Показатель" + НомерПоказателя];
			Если Не ЗначениеЗаполнено(Показатель) Тогда
				СтрокаНачислений["Показатель" + НомерПоказателя] = ПустойПоказатель;
				Продолжить;
			КонецЕсли;
			СтрокаНачислений["ТочностьПоказателя" + НомерПоказателя]      = 2;
			СтрокаНачислений["ПредставлениеПоказателя" + НомерПоказателя] = ОписаниеПоказателей.Представление[ОписаниеПоказателей.МассивПоказателей[НомерПоказателя-1]];
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РеквизитыВДанные(ТекущийОбъект)
	
	ТекущийОбъект.Показатели.Очистить();
	
	ВводНачисленийРеквизитВДанные(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ВводНачисленийРеквизитВДанные(Форма, Объект)
	
	// Коллекция в данных формы
	ДанныеФормыКоллекция = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "Объект.Начисления");
	
	// Табличная часть объекта
	ТаблицаОбъекта = Объект.Начисления;
	
	КоличествоПоказателей = МаксимальноеКоличествоПоказателейНачисления;
	
	ИдентификаторСтроки = 1;
	Индекс = 0;
	Пока Индекс < ДанныеФормыКоллекция.Количество() Цикл
		
		// Устанавливаем номер-идентификатор строкам коллекций.
		ТаблицаОбъекта[Индекс].ИдентификаторСтрокиВидаРасчета = ИдентификаторСтроки;
		
		СтрокаКоллекции = ДанныеФормыКоллекция[Индекс];
		СтрокаКоллекции.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтроки;
		
		Для НомерПоказателя = 1 По КоличествоПоказателей Цикл
			Если ПустаяСтрока(СтрокаКоллекции["Показатель" + НомерПоказателя]) Тогда
				// Нашли пустой показатель
				Прервать;
			КонецЕсли;
			
			НоваяСтрокаПоказателя = Объект.Показатели.Добавить();
			НоваяСтрокаПоказателя.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтроки;
			НоваяСтрокаПоказателя.Показатель = СтрокаКоллекции["Показатель" + НомерПоказателя];
			НоваяСтрокаПоказателя.Значение   = СтрокаКоллекции["Значение" + НомерПоказателя];
			
		КонецЦикла;
			
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	ПараметрыФО = Новый Структура("Организация, Период", Объект.Организация, НачалоДня(Объект.МесяцНачисления));
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
КонецПроцедуры

&НаКлиенте
Процедура РезервПриИзмененииЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Объект.Резерв = РезервПредыдущий;
		Возврат;
	КонецЕсли;
	
	РезервПредыдущий = Объект.Резерв;
	
	ОчиститьТаблицыДокументаНаСервере();
	РезервПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РезервПриИзмененииНаСервере()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ИнициализацияФормы(ТекущийОбъект, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияФормы(ТекущийОбъект, ДополнятьФорму)
	
	НовыйДокумент = Параметры.Ключ.Пустая();
	НачатьИнициализациюФормы(ДополнятьФорму, НовыйДокумент);
	ЗавершитьИнициализациюФормы(ТекущийОбъект, ДополнятьФорму, НовыйДокумент);
	
	РеквизитыКДобавлению.Очистить();
	РеквизитыКУдалению.Очистить();
	
	ЗаполнитьСтрокиТаблицПоКлючевымПолям();
	
	ЗаполнитьДобавленныеКолонкиТаблицПоказателямиУчета();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьНастройкиРезерва()
	
	ПараметрыТекущегоРезерва = РезервыПоОплатеТруда.НастройкиРасчетаРезервов(Объект.Организация, Объект.Резерв, Объект.МесяцНачисления, Объект.Ссылка, Объект.ВидОперации);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыТекущегоРезерва);
	
	Если ЗначениеЗаполнено(Объект.Резерв) Тогда
		
		ВидРезерва = ПараметрыТекущегоРезерва.ВидРезерва;
		
		ЭтоРезервОтпусков = ВидРезерва = Перечисления.ВидыРезервовПоОплатеТруда.Отпуск;
		ЭтоРезервПремии   = ВидРезерва = Перечисления.ВидыРезервовПоОплатеТруда.ГодоваяПремия;
		
		Если ЭтоИнвентаризация Тогда
			Если ЭтоРезервОтпусков Тогда
				ОписаниеПоказателей = РезервыПоОплатеТрудаДляНебольшихОрганизаций.ОписаниеПоказателейРасчетаРезерваОтпусков();
			ИначеЕсли ЭтоРезервПремии Тогда
				ОписаниеПоказателей = РезервыПоОплатеТрудаДляНебольшихОрганизаций.ОписаниеПоказателейРасчетаРезерваПремии();
			Иначе
				ОписаниеПоказателей = Неопределено;
			КонецЕсли;
			Если ОписаниеПоказателей <> Неопределено Тогда
				МаксимальноеКоличествоПоказателейНачисления = ОписаниеПоказателей.МассивПоказателей.Количество();
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ЭтоРезервОтпусков   = Ложь;
		ЭтоРезервПремии     = Ложь;
		ОписаниеПоказателей = Неопределено;
		МаксимальноеКоличествоПоказателейНачисления = 0;
		
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеОрганизацииНаСервере()
	
	ПроверитьИспользованиеОбмена();
	ОбновитьДоступностьЗарплатаОтраженаВБухучете();
	ОчиститьТаблицыДокументаНаСервере();
	ЗаполнитьДанныеФормыПоОрганизации();
	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияКонтролируемыхПолей()
	
	// Выполняет заполнение сведений о значениях контролируемых полей, 
	// которые могли измениться в результате не интерактивного обновления значений.
	РезервыПоОплатеТрудаКлиентБазовый.СтрокаРасчетаПриАктивацииСтроки(ЭтотОбъект, "Начисления");
	РезервыПоОплатеТрудаКлиентБазовый.СтрокаРасчетаПриАктивацииСтроки(ЭтотОбъект, "Взносы");
	РезервыПоОплатеТрудаКлиентБазовый.СтрокаРасчетаПриАктивацииСтроки(ЭтотОбъект, "РасчетРезервов");
	РезервыПоОплатеТрудаКлиентБазовый.СтрокаРасчетаПриАктивацииСтроки(ЭтотОбъект, "ОценочныеОбязательстваПоСотрудникам");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыПоОрганизации()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапрашиваемыеЗначения = Новый Структура("Организация, МесяцРасчета", "Объект.Организация", "Объект.МесяцНачисления");
	ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтотОбъект, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой");
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ЗаполнитьПодписиПоОрганизации(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте() Экспорт
	
	ПересчитатьДокументНаСервере(СотрудникиКРасчету);
	ОчиститьСписокСотрудниковКРасчету();
	РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтотОбъект, Ложь, РассчитыватьДокументыПриРедактировании);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьДокументНаСервере(СотрудникиКРасчету)
	
	Для каждого ТаблицаССотрудниками Из СотрудникиКРасчету Цикл
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаССотрудниками.Значение.СписокСотрудников, "Ключ");
		РассчитатьСотрудникаНаСервере(Сотрудники, ТаблицаССотрудниками.Значение.ОписаниеТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюОкончание(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПересчитатьДокументНаКлиенте();
		Записать(Параметры);
	Иначе
		ЗакрыватьПослеЗаписи = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму()
	Закрыть();
КонецПроцедуры

&НаСервере
Функция ОписанияТаблицНачислений() Экспорт 
	
	ОписанияТаблиц = Новый Массив;
	
	Если ИспользоватьНачисление Тогда 
		ОписанияТаблиц.Добавить("Начисления");
	КонецЕсли;
	Если ИспользоватьРасчет Тогда
		ОписанияТаблиц.Добавить("РасчетРезервов");
	КонецЕсли;
	ОписанияТаблиц.Добавить("ОценочныеОбязательстваПоСотрудникам");
	
	Возврат ОписанияТаблиц;
	
КонецФункции

&НаКлиенте
Процедура ОповеститьОбИзмененииОбъекта()
	
	ОповеститьОбИзменении(Объект.Ссылка);
	
	ПараметрыОповещения = Новый Структура("Организация,МесяцНачисления");
	ЗаполнитьЗначенияСвойств(ПараметрыОповещения, Объект);
	
	Оповестить("Запись_РезервыПоОплатеТруда", ПараметрыОповещения, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицыДокументаНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого ТабличнаяЧасть Из Метаданные.Документы.РезервыПоОплатеТруда.ТабличныеЧасти Цикл 
		Если Объект.Свойство(ТабличнаяЧасть.Имя) Тогда 
			Объект[ТабличнаяЧасть.Имя].Очистить();
		КонецЕсли;
	КонецЦикла;
	СтрокиТаблицДокументаПоФизическимЛицам = Неопределено;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуУдалитьСотрудника()
	
	ОписаниеДокумента = ОписаниеДокумента(ЭтотОбъект);
	
	ТаблицыДокумента = ТаблицыДокумента();
	
	Для Каждого ТаблицаДокумента Из ТаблицыДокумента Цикл
		
		ИмяТаблицы = ОписаниеДокумента[ТаблицаДокумента + "Имя"];
		Если ИмяТаблицы <> Неопределено Тогда
			
			ИмяКоманднойПанели = Неопределено;
			
			ОписаниеДокумента.Свойство(ТаблицаДокумента + "КоманднаяПанельИмя", ИмяКоманднойПанели);
			ДобавитьКомандуУдалитьСотрудникаВТаблицуДокумента(ИмяТаблицы, ИмяКоманднойПанели);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТаблицыДокумента()
	
	ТаблицыДокумента = Новый Массив;
	ТаблицыДокумента.Добавить("Начисления");
	ТаблицыДокумента.Добавить("Взносы");
	ТаблицыДокумента.Добавить("РасчетРезервов");
	ТаблицыДокумента.Добавить("ОценочныеОбязательстваПоСотрудникам");
	
	Возврат ТаблицыДокумента;
	
КонецФункции

&НаСервере
Процедура ДобавитьКомандуУдалитьСотрудникаВТаблицуДокумента(ИмяТаблицы, ИмяКоманднойПанели)
	
	Если Элементы.Найти(ИмяТаблицы) = Неопределено Тогда
		// Такой таблицы нет в форме
		Возврат;
	КонецЕсли;
	
	Если Команды.Найти(ИмяТаблицы + "УдалитьСотрудника") <> Неопределено Тогда
		// Команда уже существует
		Возврат;
	КонецЕсли;
	
	// Добавляем команду формы
	КомандаУдалитьСотрудника = Команды.Добавить(ИмяТаблицы + "УдалитьСотрудника");
	КомандаУдалитьСотрудника.Действие = "Подключаемый_" + ИмяТаблицы + "УдалитьСотрудника";
	КомандаУдалитьСотрудника.Заголовок = НСтр("ru = 'Удалить сотрудника'");
	КомандаУдалитьСотрудника.Подсказка = НСтр("ru = 'Данные по выбранному сотруднику удаляются со всех таблиц документа'");
	КомандаУдалитьСотрудника.Картинка = БиблиотекаКартинок.Удалить;
	КомандаУдалитьСотрудника.Отображение = ОтображениеКнопки.КартинкаИТекст;
	КомандаУдалитьСотрудника.ИзменяетСохраняемыеДанные = Истина;
	
	// Добавляем элементы (группу кнопок и кнопку) в командную панель.
	Если ИмяКоманднойПанели = Неопределено Тогда
		ИмяКоманднойПанели = ИмяТаблицы + "КоманднаяПанель";
	КонецЕсли;
	
	КоманднаяПанельТаблицы = Элементы.Найти(ИмяКоманднойПанели);
	Если КоманднаяПанельТаблицы <> Неопределено Тогда
		Если КоманднаяПанельТаблицы.ПодчиненныеЭлементы.Количество() = 0 Тогда
			МестоВставки = Неопределено;
		Иначе
			МестоВставки = КоманднаяПанельТаблицы.ПодчиненныеЭлементы[0];
		КонецЕсли;
		
		ИмяЭлемента = ИмяТаблицы + "КоманднаяПанельПересчитатьСотрудникаГруппа";
		ГруппаКнопок = Элементы.Найти(ИмяЭлемента);
		Если ГруппаКнопок = Неопределено Тогда
			ГруппаКнопок = Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), КоманднаяПанельТаблицы, МестоВставки);
			ГруппаКнопок.Вид = ВидГруппыФормы.ГруппаКнопок;
			ГруппаКнопок.Заголовок = НСтр("ru = 'Обновление строк документа'");
		КонецЕсли;
		
		ИмяЭлемента = ИмяТаблицы + "КоманднаяПанельУдалитьСотрудника";
		Если Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
			КнопкаУдалитьСотрудника = Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), ГруппаКнопок);
			КнопкаУдалитьСотрудника.ИмяКоманды = ИмяТаблицы + "УдалитьСотрудника";
			КнопкаУдалитьСотрудника.ТолькоВоВсехДействиях = Истина;
		КонецЕсли;
		
		// Добавляем элементы в контекстное меню.
		КонтекстноеМеню = Элементы[ИмяТаблицы].КонтекстноеМеню;
		
		МестоВставки = Неопределено;
		Если КонтекстноеМеню.ПодчиненныеЭлементы.Количество() > 0 Тогда
			МестоВставки = КонтекстноеМеню.ПодчиненныеЭлементы[0];
		КонецЕсли;
		
		ИмяЭлемента = ИмяТаблицы + "КонтекстноеМенюПересчитатьСотрудникаГруппа";
		ГруппаКнопок = Элементы.Найти(ИмяЭлемента);
		Если ГруппаКнопок = Неопределено Тогда
			ГруппаКнопок = Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), КонтекстноеМеню, МестоВставки);
			ГруппаКнопок.Вид = ВидГруппыФормы.ГруппаКнопок;
			ГруппаКнопок.Заголовок = НСтр("ru = 'Обновление строк документа'");
		КонецЕсли;
		
		ИмяЭлемента = ИмяТаблицы + "КонтекстноеМенюУдалитьСотрудника";
		Если Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
			КнопкаУдалитьСотрудника = Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), ГруппаКнопок);
			КнопкаУдалитьСотрудника.ИмяКоманды = ИмяТаблицы + "УдалитьСотрудника";
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСотрудникаНаСервере(Сотрудник)
	
	Если Не УдалитьДанныеСотрудникаНаСервере(Сотрудник) Тогда 
		РассчитатьСотрудникаНаСервере(Сотрудник);
	Иначе
		РассчитатьОценочныеОбязательства();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УдалитьДанныеСотрудникаНаСервере(СотрудникФизическоеЛицо)
	
	УдаляемыеСотрудники = Новый Соответствие;
	ДополнительныеСотрудники = Новый Соответствие;
	
	Если ТипЗнч(СотрудникФизическоеЛицо) = Тип("СправочникСсылка.Сотрудники") Тогда 
		УдаляемыеСотрудники.Вставить(СотрудникФизическоеЛицо, Истина);
		Если ЗначениеЗаполнено(СотрудникФизическоеЛицо) Тогда
			ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СотрудникФизическоеЛицо, "ФизическоеЛицо");
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Сотрудник", СотрудникФизическоеЛицо);
			Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	Сотрудники.Ссылка
			               |ИЗ
			               |	Справочник.Сотрудники КАК Сотрудники
			               |ГДЕ
			               |	Сотрудники.Ссылка <> &Сотрудник
			               |	И Сотрудники.ФизическоеЛицо = &ФизическоеЛицо";
						   
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл 
				ДополнительныеСотрудники.Вставить(Выборка.Ссылка, Истина);
			КонецЦикла;
		Иначе
			ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли;
	Иначе 
		
		ФизическоеЛицо = СотрудникФизическоеЛицо;
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Сотрудники.Ссылка
		               |ИЗ
		               |	Справочник.Сотрудники КАК Сотрудники
		               |ГДЕ
		               |	Сотрудники.ФизическоеЛицо = &ФизическоеЛицо";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			УдаляемыеСотрудники.Вставить(Выборка.Ссылка, Истина);
		КонецЦикла;
		
	КонецЕсли;
	
	ОчиститьВзносы = Истина;
	
	ИменаТаблиц = Новый Массив;
	ИменаТаблиц.Добавить("Начисления");
	ИменаТаблиц.Добавить("РасчетРезервов");
	ИменаТаблиц.Добавить("ОценочныеОбязательстваПоСотрудникам");
	
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл 
	
		СтрокиСотрудника = Новый Массив;
		Для Каждого СтрокаСотрудника Из Объект[ИмяТаблицы] Цикл 
			Если УдаляемыеСотрудники[СтрокаСотрудника.Сотрудник] <> Неопределено Тогда 
		    	СтрокиСотрудника.Добавить(СтрокаСотрудника);
			ИначеЕсли ДополнительныеСотрудники[СтрокаСотрудника.Сотрудник] <> Неопределено Тогда 
				ОчиститьВзносы = Ложь;
			КонецЕсли;
		КонецЦикла;
	
		Для Каждого СтрокаСотрудника Из СтрокиСотрудника Цикл 
			Объект[ИмяТаблицы].Удалить(СтрокаСотрудника);
		КонецЦикла;
		
	КонецЦикла;
	
	Если Не ОчиститьВзносы Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ИменаТаблиц = Новый Массив;
	ИменаТаблиц.Добавить("Взносы");
	
	СтрокиТаблицФизическогоЛица = СтрокиТаблицФизическогоЛица(СтрокиТаблицДокументаПоФизическимЛицам, ФизическоеЛицо);
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл 
		Если Не СтрокиТаблицФизическогоЛица.Свойство(ИмяТаблицы) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиФизическогоЛица = СтрокиТаблицФизическогоЛица[ИмяТаблицы];
		Для Каждого СтрокаФизическогоЛица Из СтрокиФизическогоЛица Цикл 
			СтрокаТаблицы = Объект[ИмяТаблицы].НайтиПоИдентификатору(СтрокаФизическогоЛица);
			Если СтрокаТаблицы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Объект[ИмяТаблицы].Удалить(СтрокаТаблицы);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Контролируемые поля
&НаСервере
Функция ПолучитьКонтролируемыеПоля() Экспорт
	
	Возврат КонтролируемыеПоля();
	
КонецФункции

&НаСервереБезКонтекста
Функция КонтролируемыеПоля() Экспорт
	
	КонтролируемыеПоля = Новый Структура;
	
	// Начисления
	НачисленияФиксРасчет = Новый Массив;
	НачисленияФиксРасчет.Добавить("Результат");
	НачисленияФиксРасчет.Добавить("РезультатНУ");
	
	НачисленияФиксСтрока = Новый Массив;
	НачисленияФиксСтрока.Добавить("Сотрудник");
	НачисленияФиксСтрока.Добавить("Подразделение");
	НачисленияФиксСтрока.Добавить("ДатаНачала");
	НачисленияФиксСтрока.Добавить("ДатаОкончания");
	
	НачисленияФиксЗаполнение = Новый Массив;
	НачисленияФиксЗаполнение.Добавить("ФондОплатыТруда");
	НачисленияФиксЗаполнение.Добавить("НормативОтчисленийВРезерв");
	
	НачисленияПоля = Новый Структура;
	НачисленияПоля.Вставить("ФиксРасчет",        НачисленияФиксРасчет);
	НачисленияПоля.Вставить("ФиксЗаполнение",    НачисленияФиксЗаполнение);
	НачисленияПоля.Вставить("ФиксСтрока",        НачисленияФиксСтрока);
	
	КонтролируемыеПоля.Вставить("Начисления", НачисленияПоля);
	
	// Взносы
	ВзносыФиксРасчет = Новый Массив;
	ВзносыФиксРасчет.Добавить("СуммаСтраховыхВзносов");
	ВзносыФиксРасчет.Добавить("СуммаСтраховыхВзносовНУ");
	ВзносыФиксРасчет.Добавить("СуммаФССНесчастныеСлучаи");
	ВзносыФиксРасчет.Добавить("СуммаФССНесчастныеСлучаиНУ");
	
	ВзносыФиксСтрока = Новый Массив;
	ВзносыФиксСтрока.Добавить("ФизическоеЛицо");
	
	ВзносыФиксЗаполнение = Новый Массив;
	ВзносыФиксЗаполнение.Добавить("ФондОплатыТруда");
	ВзносыФиксЗаполнение.Добавить("СтраховыеВзносы");
	ВзносыФиксЗаполнение.Добавить("ТекущаяСтавкаСтраховыхВзносов");
	ВзносыФиксЗаполнение.Добавить("ФССНесчастныеСлучаи");
	ВзносыФиксЗаполнение.Добавить("ТекущаяСтавкаФССНесчастныеСлучаи");
	ВзносыФиксЗаполнение.Добавить("НормативОтчисленийВРезервСтраховыеВзносы");
	ВзносыФиксЗаполнение.Добавить("НормативОтчисленийВРезервФССНесчастныеСлучаи");
	
	ВзносыПоля = Новый Структура;
	ВзносыПоля.Вставить("ФиксРасчет",     ВзносыФиксРасчет);
	ВзносыПоля.Вставить("ФиксЗаполнение", ВзносыФиксЗаполнение);
	ВзносыПоля.Вставить("ФиксСтрока",     ВзносыФиксСтрока);
	
	КонтролируемыеПоля.Вставить("Взносы", ВзносыПоля);
	
	// Расчет резервов
	РасчетРезервовФиксРасчет = Новый Массив;
	РасчетРезервовФиксРасчет.Добавить("СуммаРезерва");
	РасчетРезервовФиксРасчет.Добавить("СуммаРезерваНУ");
	РасчетРезервовФиксРасчет.Добавить("СуммаРезерваСтраховыхВзносов");
	РасчетРезервовФиксРасчет.Добавить("СуммаРезерваСтраховыхВзносовНУ");
	РасчетРезервовФиксРасчет.Добавить("СуммаРезерваФССНесчастныеСлучаи");
	РасчетРезервовФиксРасчет.Добавить("СуммаРезерваФССНесчастныеСлучаиНУ");
	
	РасчетРезервовФиксСтрока = Новый Массив;
	РасчетРезервовФиксСтрока.Добавить("Сотрудник");
	
	РасчетРезервовФиксЗаполнение = Новый Массив;
	РасчетРезервовФиксЗаполнение.Добавить("СуммаРезерваНакоплено");
	РасчетРезервовФиксЗаполнение.Добавить("СуммаРезерваНакопленоНУ");
	РасчетРезервовФиксЗаполнение.Добавить("СуммаРезерваИсчислено");
	РасчетРезервовФиксЗаполнение.Добавить("СуммаРезерваИсчисленоНУ");
	РасчетРезервовФиксЗаполнение.Добавить("СуммаРезерваСтраховыхВзносовНакоплено");
	РасчетРезервовФиксЗаполнение.Добавить("СуммаРезерваСтраховыхВзносовНакопленоНУ");
	РасчетРезервовФиксЗаполнение.Добавить("СуммаРезерваСтраховыхВзносовИсчислено");
	РасчетРезервовФиксЗаполнение.Добавить("СуммаРезерваСтраховыхВзносовИсчисленоНУ");
	РасчетРезервовФиксЗаполнение.Добавить("СуммаРезерваФССНесчастныеСлучаиНакоплено");
	РасчетРезервовФиксЗаполнение.Добавить("СуммаРезерваФССНесчастныеСлучаиНакопленоНУ");
	РасчетРезервовФиксЗаполнение.Добавить("СуммаРезерваФССНесчастныеСлучаиИсчислено");
	РасчетРезервовФиксЗаполнение.Добавить("СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ");
	
	РасчетРезервовПоля = Новый Структура;
	РасчетРезервовПоля.Вставить("ФиксРасчет",     РасчетРезервовФиксРасчет);
	РасчетРезервовПоля.Вставить("ФиксЗаполнение", РасчетРезервовФиксЗаполнение);
	РасчетРезервовПоля.Вставить("ФиксСтрока",     РасчетРезервовФиксСтрока);
	
	КонтролируемыеПоля.Вставить("РасчетРезервов", РасчетРезервовПоля);
	
	// Обязательства и резервы по сотрудникам
	ОценочныеОбязательстваПоСотрудникамФиксРасчет = Новый Массив;
	ОценочныеОбязательстваПоСотрудникамФиксРасчет.Добавить("СуммаРезерва");
	ОценочныеОбязательстваПоСотрудникамФиксРасчет.Добавить("СуммаРезерваНУ");
	ОценочныеОбязательстваПоСотрудникамФиксРасчет.Добавить("СуммаРезерваСтраховыхВзносов");
	ОценочныеОбязательстваПоСотрудникамФиксРасчет.Добавить("СуммаРезерваСтраховыхВзносовНУ");
	ОценочныеОбязательстваПоСотрудникамФиксРасчет.Добавить("СуммаРезерваФССНесчастныеСлучаи");
	ОценочныеОбязательстваПоСотрудникамФиксРасчет.Добавить("СуммаРезерваФССНесчастныеСлучаиНУ");
	
	ОценочныеОбязательстваПоСотрудникамФиксСтрока = Новый Массив;
	ОценочныеОбязательстваПоСотрудникамФиксСтрока.Добавить("Сотрудник");
	ОценочныеОбязательстваПоСотрудникамФиксСтрока.Добавить("Подразделение");
	ОценочныеОбязательстваПоСотрудникамФиксСтрока.Добавить("СпособОтраженияЗарплатыВБухучете");
	ОценочныеОбязательстваПоСотрудникамФиксСтрока.Добавить("СтатьяФинансирования");
	ОценочныеОбязательстваПоСотрудникамФиксСтрока.Добавить("КорректировкаОбязательств");
	
	ОценочныеОбязательстваПоСотрудникамФиксЗаполнение = Новый Массив;
	
	ОценочныеОбязательстваПоСотрудникамПоля = Новый Структура;
	ОценочныеОбязательстваПоСотрудникамПоля.Вставить("ФиксРасчет",     ОценочныеОбязательстваПоСотрудникамФиксРасчет);
	ОценочныеОбязательстваПоСотрудникамПоля.Вставить("ФиксЗаполнение", ОценочныеОбязательстваПоСотрудникамФиксЗаполнение);
	ОценочныеОбязательстваПоСотрудникамПоля.Вставить("ФиксСтрока",     ОценочныеОбязательстваПоСотрудникамФиксСтрока);
	
	КонтролируемыеПоля.Вставить("ОценочныеОбязательстваПоСотрудникам", ОценочныеОбязательстваПоСотрудникамПоля);
	
	// Обязательства и резервы текущего месяца
	ОценочныеОбязательстваФиксРасчет = Новый Массив;
	ОценочныеОбязательстваФиксРасчет.Добавить("СуммаРезерва");
	ОценочныеОбязательстваФиксРасчет.Добавить("СуммаРезерваНУ");
	ОценочныеОбязательстваФиксРасчет.Добавить("СуммаРезерваСтраховыхВзносов");
	ОценочныеОбязательстваФиксРасчет.Добавить("СуммаРезерваСтраховыхВзносовНУ");
	ОценочныеОбязательстваФиксРасчет.Добавить("СуммаРезерваФССНесчастныеСлучаи");
	ОценочныеОбязательстваФиксРасчет.Добавить("СуммаРезерваФССНесчастныеСлучаиНУ");
	
	ОценочныеОбязательстваФиксСтрока = Новый Массив;
	ОценочныеОбязательстваФиксСтрока.Добавить("Подразделение");
	ОценочныеОбязательстваФиксСтрока.Добавить("СпособОтраженияЗарплатыВБухучете");
	ОценочныеОбязательстваФиксСтрока.Добавить("СтатьяФинансирования");
	
	ОценочныеОбязательстваФиксЗаполнение = Новый Массив;
	
	ОценочныеОбязательстваПоля = Новый Структура;
	ОценочныеОбязательстваПоля.Вставить("ФиксРасчет",     ОценочныеОбязательстваФиксРасчет);
	ОценочныеОбязательстваПоля.Вставить("ФиксЗаполнение", ОценочныеОбязательстваФиксЗаполнение);
	ОценочныеОбязательстваПоля.Вставить("ФиксСтрока",     ОценочныеОбязательстваФиксСтрока);
	
	КонтролируемыеПоля.Вставить("ОценочныеОбязательства", ОценочныеОбязательстваПоля);
	
	Возврат КонтролируемыеПоля;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтарыеЗначенияКонтролируемыхПолей() Экспорт
	Возврат СтарыеЗначенияКонтролируемыхПолей;
КонецФункции

&НаКлиенте
Функция ПустаяСтрокаНачисления() Экспорт
	
	СтрокаНачисления = Новый Структура;
	СтрокаНачисления.Вставить("Организация");
	СтрокаНачисления.Вставить("Сотрудник");
	СтрокаНачисления.Вставить("ФизическоеЛицо");
	СтрокаНачисления.Вставить("Подразделение");
	СтрокаНачисления.Вставить("Начисление");
	СтрокаНачисления.Вставить("Строка");
	СтрокаНачисления.Вставить("ФиксСтрока");
	СтрокаНачисления.Вставить("ФиксЗаполнение");
	СтрокаНачисления.Вставить("ФиксРасчет");
	СтрокаНачисления.Вставить("Сумма");
	СтрокаНачисления.Вставить("Результат");
	СтрокаНачисления.Вставить("ИдентификаторСтроки");
	СтрокаНачисления.Вставить("ИдентификаторСтрокиВидаРасчета");
	
	Для Счетчик = 1 По МаксимальноеКоличествоПоказателейНачисления Цикл
		СтрокаНачисления.Вставить("Показатель" + Счетчик);
		СтрокаНачисления.Вставить("Значение" + Счетчик);
	КонецЦикла;

	Возврат СтрокаНачисления;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокиТаблицПоКлючевымПолям(ПозицииВставки = Неопределено, Сотрудники = Неопределено)
	
	Если ПозицииВставки = Неопределено Тогда
		СтрокиТаблицДокументаПоФизическимЛицам = Новый ФиксированноеСоответствие(СтрокиТаблицПоФизическимЛицам(Объект));
	Иначе
		ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
		ПозицииСотрудника = Новый Соответствие;
		
		Для Каждого СотрудникиТаблицы Из ПозицииВставки Цикл
			ИмяТаблицы = СотрудникиТаблицы.Ключ;
			ОбработанныеФизическиеЛица = Новый Соответствие;
			Для Каждого СтрокаСотрудника Из СотрудникиТаблицы.Значение Цикл
				Если ТипЗнч(СтрокаСотрудника.Ключ) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
					ФизическоеЛицо = СтрокаСотрудника.Ключ;
				ИначеЕсли ФизическиеЛицаСотрудников[СтрокаСотрудника.Ключ] <> Неопределено Тогда
					ФизическоеЛицо = ФизическиеЛицаСотрудников[СтрокаСотрудника.Ключ];
				Иначе
					ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаСотрудника.Ключ, "ФизическоеЛицо");
				КонецЕсли;
				
				Если ОбработанныеФизическиеЛица[ФизическоеЛицо] = Неопределено Тогда
					ДополнятьИдентификаторы = Ложь;
					ОбработанныеФизическиеЛица.Вставить(ФизическоеЛицо, Истина);
				Иначе
					ДополнятьИдентификаторы = Истина;
				КонецЕсли;
				ОбновитьИдентификаторыСтрокФизическогоЛица(ФизическоеЛицо, ИмяТаблицы, СтрокаСотрудника.Значение, ДополнятьИдентификаторы);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтрокиТаблицПоФизическимЛицам(Документ, ЗаполнятьИдентификаторы = Истина, ТаблицыДокумента = Неопределено)
	
	Если ТаблицыДокумента = Неопределено Тогда
		ТаблицыДокумента = ТаблицыДокументаСДаннымиФизическихЛиц();
	КонецЕсли;
	
	Если Не ЗаполнятьИдентификаторы Тогда
		ШаблонСтрок = НовыйСтруктураТаблицДокумента().ШаблонСтрокТаблиц;
	КонецЕсли;
	
	ФизическиеЛицаПоИдентификаторам = Новый Соответствие;
	СтрокиПоФизическимЛицам = Новый Соответствие;
	
	Для Каждого ИмяТаблицы Из ТаблицыДокумента Цикл
		Для Каждого СтрокаТаблицы Из Документ[ИмяТаблицы] Цикл
			ФизическоеЛицо = СтрокаТаблицы.ФизическоеЛицо;
			
			Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокиПоФизическимЛицам[ФизическоеЛицо] = Неопределено Тогда
				ТаблицыФизическогоЛица = Новый Структура;
				СтрокиПоФизическимЛицам.Вставить(ФизическоеЛицо, ТаблицыФизическогоЛица);
			Иначе
				ТаблицыФизическогоЛица = СтрокиПоФизическимЛицам[ФизическоеЛицо];
			КонецЕсли;
			
			Если Не ТаблицыФизическогоЛица.Свойство(ИмяТаблицы) Тогда
				ТаблицыФизическогоЛица.Вставить(ИмяТаблицы, Новый Массив);
			КонецЕсли;
			
			Если ЗаполнятьИдентификаторы Тогда
				ТаблицыФизическогоЛица[ИмяТаблицы].Добавить(СтрокаТаблицы.ПолучитьИдентификатор());
			Иначе
				НоваяСтрока = НоваяСтрокаДанныхПоСотрудникам(ТаблицыФизическогоЛица[ИмяТаблицы], ШаблонСтрок[ИмяТаблицы]);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СтрокиПоФизическимЛицам;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьИдентификаторСтрокиФизическогоЛица(ФизическоеЛицо, ИмяТаблицы, Идентификатор)
	ДобавитьИдентификаторСтрокиФизическогоЛицаБезКонтекста(СтрокиТаблицДокументаПоФизическимЛицам, ФизическоеЛицо, ИмяТаблицы, Идентификатор);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьИдентификаторСтрокиФизическогоЛицаБезКонтекста(СтрокиТаблицДокументаПоФизическимЛицам, ФизическоеЛицо, ИмяТаблицы, Идентификатор)
	
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиТаблицФизическогоЛица = СтрокиТаблицФизическогоЛица(СтрокиТаблицДокументаПоФизическимЛицам, ФизическоеЛицо);
	
	СтрокиТаблицы = Неопределено;
	Если Не СтрокиТаблицФизическогоЛица.Свойство(ИмяТаблицы, СтрокиТаблицы) Тогда
		СтрокиТаблицы = Новый Массив;
		СтрокиТаблицФизическогоЛица.Вставить(ИмяТаблицы, СтрокиТаблицы);
	КонецЕсли;
	
	Если СтрокиТаблицы.Найти(Идентификатор) = Неопределено Тогда
		СтрокиТаблицы.Добавить(Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИдентификаторСтрокиФизическогоЛица(ФизическоеЛицо, ИмяТаблицы, Идентификатор)
	
	СтрокиТаблицФизическогоЛица = СтрокиТаблицДокументаПоФизическимЛицам.Получить(ФизическоеЛицо);
	Если СтрокиТаблицФизическогоЛица = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиТаблицы = Неопределено;
	Если Не СтрокиТаблицФизическогоЛица.Свойство(ИмяТаблицы, СтрокиТаблицы) Тогда
		Возврат
	КонецЕсли;
	
	Индекс = СтрокиТаблицы.Найти(Идентификатор);
	Если Индекс = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиТаблицы.Удалить(Индекс);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИдентификаторыСтрокФизическогоЛица(ФизическоеЛицо, ИмяТаблицы, Идентификаторы, ДополнятьИдентификаторы)
	
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиТаблицФизическогоЛица = СтрокиТаблицФизическогоЛица(СтрокиТаблицДокументаПоФизическимЛицам, ФизическоеЛицо);
	Если ДополнятьИдентификаторы Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиТаблицФизическогоЛица[ИмяТаблицы], Идентификаторы);
	Иначе
		СтрокиТаблицФизическогоЛица.Вставить(ИмяТаблицы, Идентификаторы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокиТаблицФизическогоЛица(СтрокиТаблицДокументаПоФизическимЛицам, ФизическоеЛицо)
	
	Если СтрокиТаблицДокументаПоФизическимЛицам = Неопределено Тогда
		СтрокиТаблицПоФизическимЛицам = Новый Соответствие;
	ИначеЕсли СтрокиТаблицДокументаПоФизическимЛицам.Получить(ФизическоеЛицо) = Неопределено Тогда
		СтрокиТаблицПоФизическимЛицам = Новый Соответствие(СтрокиТаблицДокументаПоФизическимЛицам);
	Иначе
		Возврат СтрокиТаблицДокументаПоФизическимЛицам[ФизическоеЛицо];
	КонецЕсли;
	
	СтрокиТаблицФизическогоЛица = Новый Структура;
	СтрокиТаблицПоФизическимЛицам.Вставить(ФизическоеЛицо, СтрокиТаблицФизическогоЛица);
	СтрокиТаблицДокументаПоФизическимЛицам = Новый ФиксированноеСоответствие(СтрокиТаблицПоФизическимЛицам);
	
	Возврат СтрокиТаблицДокументаПоФизическимЛицам[ФизическоеЛицо];
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТаблицыДокументаСДаннымиФизическихЛиц()
	
	ТаблицыДокумента = Новый Массив;
	ТаблицыДокумента.Добавить("Начисления");
	ТаблицыДокумента.Добавить("Взносы");
	
	Возврат ТаблицыДокумента;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НоваяСтрокаДанныхПоСотрудникам(ТаблицаДанных, ШаблонСтроки)
	
	НоваяСтрока = Новый Структура(ШаблонСтроки);
	ТаблицаДанных.Добавить(НоваяСтрока);
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыйСтруктураТаблицДокумента()
	
	СтруктураТаблиц = Новый Структура("СодержимоеДокумента,ШаблонСтрокТаблиц", Новый Структура, Новый Структура);
	ТаблицыСодержимогоДокумента = РезервыПоОплатеТруда.НовыйСодержимоеДокументаРасчетаРезервов();
	Для Каждого КлючИЗначение Из ТаблицыСодержимогоДокумента Цикл
		ТаблицаЗначений = КлючИЗначение.Значение;
		СтруктураСтрокой = "";
		НужнаЗапятая = Ложь;
		Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
			Если НужнаЗапятая Тогда
				СтруктураСтрокой = СтруктураСтрокой + ",";
			КонецЕсли;
			СтруктураСтрокой = СтруктураСтрокой + Колонка.Имя;
			НужнаЗапятая = Истина;
		КонецЦикла;
		СтруктураТаблиц.ШаблонСтрокТаблиц.Вставить(КлючИЗначение.Ключ, Новый ФиксированнаяСтруктура(СтруктураСтрокой));
		СтруктураТаблиц.СодержимоеДокумента.Вставить(КлючИЗначение.Ключ, Новый Массив);
	КонецЦикла;
	
	Возврат СтруктураТаблиц;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьОтражениеВУчетеНаКлиенте()
	
	Результат = ОбновитьОтражениеВУчетеНаСервере();
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
	Иначе
		РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтотОбъект, Ложь, РассчитыватьДокументыПриРедактировании);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьОтражениеВУчетеНаСервере()
	
	ПараметрыЗаполнения = Новый Структура("Объект", СформироватьОписаниеДокумента());
	
	НаименованиеЗадания = НСтр("ru = 'Пересчет документа ""Начисление оценочных обязательств по отпускам""'");
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Документы.РезервыПоОплатеТруда.ОбновитьОтражениеВУчете", 
		ПараметрыЗаполнения, 
		НаименованиеЗадания);
	
	АдресХранилища = Результат.АдресХранилища;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗагрузитьРезультат();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СформироватьОписаниеДокумента()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	ОписаниеДокумента = Новый Структура("Ссылка,
		|Организация, Дата, МесяцНачисления,
		|КорректировкаОбязательств");
	ЗаполнитьЗначенияСвойств(ОписаниеДокумента, ТекущийОбъект);
	
	ОписаниеДокумента.Вставить("Начисления",                          ТекущийОбъект.Начисления.Выгрузить());
	ОписаниеДокумента.Вставить("Взносы",                              ТекущийОбъект.Взносы.Выгрузить());
	ОписаниеДокумента.Вставить("РасчетРезервов",                      ТекущийОбъект.РасчетРезервов.Выгрузить());
	ОписаниеДокумента.Вставить("ОценочныеОбязательства",              ТекущийОбъект.ОценочныеОбязательства.Выгрузить());
	ОписаниеДокумента.Вставить("ФизическиеЛица",                      ТекущийОбъект.ФизическиеЛица.Выгрузить());
	ОписаниеДокумента.Вставить("ОценочныеОбязательстваПоСотрудникам", ТекущийОбъект.ОценочныеОбязательстваПоСотрудникам.Выгрузить());
	ОписаниеДокумента.Вставить("ИзмененныеДанные",                    ИзмененныеДанные.Выгрузить());
	
	Возврат ОписаниеДокумента;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьРезультат()
		
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если Результат.Свойство("Объект") Тогда
		
		ТекущийОбъект = РеквизитФормыВЗначение("Объект");
		
		РезультатОбъект = Результат.Объект;
		
		ТекущийОбъект.РасчетРезервов.Загрузить(РезультатОбъект.РасчетРезервов);
		ТекущийОбъект.ОценочныеОбязательства.Загрузить(РезультатОбъект.ОценочныеОбязательства);
		ТекущийОбъект.ОценочныеОбязательстваПоСотрудникам.Загрузить(РезультатОбъект.ОценочныеОбязательстваПоСотрудникам);
		ТекущийОбъект.ФизическиеЛица.Загрузить(РезультатОбъект.ФизическиеЛица);
		
		ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
		
	КонецЕсли;
	
	ИзмененныеДанные.Очистить();
	
	ЗаполнитьДобавленныеКолонкиТаблицПоказателямиУчета();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НовыйОбходИдентификаторовТаблицы(Идентификаторы) Экспорт
	
	ОбходТаблицыИдентификаторов = Новый Структура;
	ОбходТаблицыИдентификаторов.Вставить("Идентификаторы", Идентификаторы);
	ОбходТаблицыИдентификаторов.Вставить("Количество", Идентификаторы.Количество());
	ОбходТаблицыИдентификаторов.Вставить("ТекущаяПозиция", 0);
	
	Возврат ОбходТаблицыИдентификаторов;
	
КонецФункции

#КонецОбласти

#Область Инициализация

СтарыеЗначенияКонтролируемыхПолей = Новый Соответствие;
СотрудникиКРасчету = Новый Соответствие;

#КонецОбласти
