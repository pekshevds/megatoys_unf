#Область ОписаниеПеременных

&НаКлиенте
Перем КопированиеСтрокиЗапасы;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(
		Метаданные.Документы.ПриходнаяНакладная.ТабличныеЧасти.Запасы, НастройкиЗагрузкиДанных, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиУНФ.ЗаполнитьДополнительныеПараметры(Объект,
		"ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ТипЗнч(КэшЗначений) <> Тип("Структура") Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	
	КэшЗначений.Вставить("ИспользоватьМинимальныеЦены", ЦенообразованиеСерверПовтИсп.МинимальныеЦеныИспользуются());
	
	НаборСвойств_Документ_ОтчетКомиссионераОСписании = УправлениеСвойствами.НаборСвойствПоИмени(
		"Документ_ОтчетКомиссионераОСписании");
	КэшЗначений.Вставить("НаборСвойств_Документ_ОтчетКомиссионераОСписании",
		НаборСвойств_Документ_ОтчетКомиссионераОСписании);
	
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы", Истина);
	
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	НапоминанияПользователяУНФ.УстановитьОтображениеКомандОрганайзера(Элементы);
	ЭлектроннаяПочтаУНФ.УстановитьОтображениеКомандОтправкиСообщений(Элементы);

	Элементы.ДобавитьДополнительныйРеквизит.Видимость = Элементы.ГруппаДополнительныеРеквизиты.Видимость;
	
	УстановитьУсловноеОформлениеФормы();
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	ЭтотОбъект.ОснованиеСоздания = Параметры.Основание;
	
	// Установка видимости договора.
	УстановитьВидимостьДоговора();
	
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	Контрагент = Объект.Контрагент;
	Договор = Объект.Договор;
	Заказ = Объект.Заказ;
	ВалютаРасчетов = Объект.Договор.ВалютаРасчетов;
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	НациональнаяВалютаКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НациональнаяВалюта, ДатаДокумента);
	КурсНациональнаяВалюта = НациональнаяВалютаКурсКратность.Курс;
	КратностьНациональнаяВалюта = НациональнаяВалютаКурсКратность.Кратность;
	
	РаботаСФормойДокумента.НастроитьГруппуЦеныИВалюты(ЭтотОбъект);
	
	ИтогВсего = Объект.Запасы.Итог("Сумма");
	
	УчетВалютныхОпераций = Константы.ФункциональнаяУчетВалютныхОпераций.Получить();
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	
	НеУчитыватьЗаказыПриПередачеНаКомиссию = Договор.НеУчитыватьЗаказыПриПередачеНаКомиссию;
	
	Если ЗначениеЗаполнено(Договор) И Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОпределитьВидимостьЗаказовПокупателяКомиссия(ЭтотОбъект);
	КонецЕсли;
	
	// Серии номенклатуры
	ИспользоватьСерииНоменклатурыОстатки = СерииНоменклатурыУНФ.ИспользоватьСерииНоменклатурыОстатки();
	Элементы.ЗапасыГруппаСерииНоменклатуры.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновноеПодразделение");
	ОсновноеПодразделение = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
	
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, ИмяТЧЗапасы());
	
	Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Объект.ДокументОснование);
	ЗаполнитьСписокДокументОснование();
	
	АвтоподборКонтактов.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект);
	
	ЗаполнитьСписокДействий(ИмяТЧЗапасы());
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧЗапасы()), ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
	ЗапасыИзменениеСтрокДействиеПриОткрытии = ЗапасыИзменениеСтрокДействие;
	УстановитьПометку(ИмяТЧЗапасы(), Истина);
	
	Если ЗапасыИзменениеСтрокДействиеПриОткрытии = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.СоздатьПартииНоменклатуры") Тогда
		ЗапасыИзменениеСтрокЗначение = НСтр("ru = 'Партия создана автоматически'");
	КонецЕсли;
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	СписокЭлектронныхВесов = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("ЭлектронныеВесы", ,
		МенеджерОборудованияВызовСервера.РабочееМестоКлиента());
	Если СписокЭлектронныхВесов.Количество() = 0 Тогда
		// Нет подключенных весов.
		Элементы.ЗапасыПолучитьВес.Видимость = Ложь;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
	Элементы.ФормаОбщаяКомандаНапомнить.Видимость = Ложь;
		Элементы.ГруппаГлобальныеКоманды.Видимость = Ложь;
		Элементы.ШапкаТабличнаяЧасть.Видимость = Ложь;
		Элементы.ЗаказКонтекстноеМенюШапкаТабличнаяЧасть.Видимость = Ложь;
		Элементы.ЗапасыКонтекстноеМенюШапкаТабличнаяЧасть.Видимость = Ложь;
		Элементы.ГруппаДополнительно.Видимость = Ложь;
		Элементы.ГруппаСсылки.Видимость = Ложь;
		Элементы.ГруппаЦеныИВалюта.Видимость = Ложь;
		Элементы.ЗапасыГруппаКопированиеСтрок.Видимость = Ложь;
		Элементы.ЗапасыЗапасыПодбор.Видимость = Ложь;
		Элементы.ЗапасыЗагрузкаИзФайлаЗапасы.Видимость = Ложь;
		Элементы.ЗапасыИзменитьСтроки.Видимость = Ложь;
		Элементы.ВключатьРасходыВСебестоимость.Видимость = Ложь;
		Элементы.ГруппаЗаказОснование.Видимость = Ложь;
		
		Элементы.ФормаЗаписать.Видимость = Ложь;
		Элементы.ФормаПровести.Видимость = Ложь;
		Элементы.ФормаОтменаПроведения.Видимость = Ложь;
		Элементы.ФормаПоказатьВСписке.Видимость = Ложь;
		Элементы.ФормаКоманднаяПанельКомандыЭДО.Видимость = Ложь;
		Элементы.ФормаПровестиИЗакрыть.Заголовок = НСтр("ru = 'Готово'");
	КонецЕсли;
	// Конец МобильноеПриложение
	
	Если Параметры.Ключ.Пустая() Тогда
		НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект, Истина);
	КонецЕсли;
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	РазрешитьСкладыВТабличныхЧастях = ПолучитьФункциональнуюОпцию("РазрешитьСкладыВТабличныхЧастях");
	МобильныйКлиентУНФ.НастроитьФормуОбъектаМобильныйКлиент(Элементы, "Запасы");
	
	// ГТД
	ИменаТЧ = Новый Массив;
	ИменаТЧ.Добавить(Новый Структура("ИмяПоляПроверки, ИмяПоляОформления", "Объект.Запасы.СтранаПроисхождения", "ЗапасыНомерГТД"));
	ГрузовыеТаможенныеДекларацииСервер.ПриСозданииНаСервере(ЭтаФорма, ИменаТЧ, КэшЗначений);
	
// Прослеживаемость
	Если КэшЗначений = Неопределено Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	Если Объект.Контрагент.Пустая() Тогда
		КэшЗначений.Вставить("РеализацияВЕАЭС", Ложь);
	Иначе
		КэшЗначений.Вставить("РеализацияВЕАЭС", Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Объект.Контрагент));
	КонецЕсли;
	РеализацияВЕАЭС = КэшЗначений.РеализацияВЕАЭС;
	Если Объект.Ссылка.Пустая() Тогда
		
		ОбновитьПризнакПрослеживаемости = (ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ЗаказПокупателя"));
		
		Если ОбновитьПризнакПрослеживаемости Тогда
			ОбновитьПризнакПрослеживаемости();
		КонецЕсли;
		
		ОбновитьОтображениеПрослеживаемости();
		
	КонецЕсли;
	
	НастройкиКоличества = ПолучитьНастройкиИзмененияКоличества();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиКоличества);
	
	// ГТД и РНПТ.
	ИменаТЧИПолей = ГрузовыеТаможенныеДекларацииСервер.ИменаТЧИПолейДляТаблицыЗапасы_БазовыеПоляСПрослеживаемостью();
	ГрузовыеТаможенныеДекларацииСервер.ПриСозданииНаСервереДляДокументаСПрослеживаемостью(ЭтаФорма, ИменаТЧИПолей, КэшЗначений);
	// Конец ГТД и РНПТ.
	
	ПрослеживаемостьФормыУНФ.ОбновитьУсловноеОформлениеТабличнойЧастиДляПрослеживаемости(ЭтаФорма);
	
	// Конец Прослеживаемость
	
	УстановитьВидимостьИДоступность(Не ЗначениеЗаполнено(Объект.Ссылка));
	УстановитьВидимостьОтПользовательскихНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ГрупповоеИзменениеСтрок
	ОпределитьОбъектИзменений(ИмяТЧЗапасы());
	// Конец ГрупповоеИзменениеСтрок
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		// ГрупповоеИзменениеСтрок
		СохранитьТекущееДействиеИзмененияСтрок();
	КонецЕсли;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Данные = МенеджерОборудованияУНФКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" Тогда
		
		ЭтотОбъект.Прочитать();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		АдресЗапасовВХранилище	= Параметр;
		
		ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТЧЗапасы());
		
		Для каждого СтрокаТаблицы Из Объект.Запасы Цикл 
			РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТаблицы);
		КонецЦикла;
		
		ОбновитьПодвалФормы();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПодборСерий"
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		ИзменилосьКоличество = ПолучитьСерииНоменклатурыИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки);
		Если ИзменилосьКоличество Тогда
			РассчитатьСуммуВСтрокеТабличнойЧасти();
		КонецЕсли; 
		
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, ИмяТЧЗапасы());
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры // ОбработкаОповещения()

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Документ.ОтчетКомиссионера.Форма.ФормаПодбораПоОстаткам" Тогда
		
		ИдентификаторыНовыхСтрок = Новый Массив;
		ПолучитьЗапасыИзХранилищаКомиссия(ВыбранноеЗначение, ИдентификаторыНовыхСтрок);
		
		Для Каждого ИдентификаторСтроки Из ИдентификаторыНовыхСтрок Цикл
			
			СтрокаТабличнойЧасти = Объект.Запасы.НайтиПоИдентификатору(ИдентификаторСтроки);
			
			Если СтрокаТабличнойЧасти = Неопределено Тогда Продолжить КонецЕсли;
			
		КонецЦикла;
		
		ЭтаФорма.Модифицированность = Истина;
		
		// Прослеживаемость
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаПодбораРНПТ" Тогда
		
		ОбработкаВыбораРНПТННаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаВыбора" Тогда
		
		ОбработкаВыбораГТДНаКлиенте(ВыбранноеЗначение);
		
		// Конец Прослеживаемость
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы", Истина);
	
	// ГрупповоеИзменениеСтрок
	Если Элементы.ГруппаЗапасыИзменениеСтрок.Видимость Тогда
		УстановитьПометку(ИмяТЧЗапасы(), Истина);
	КонецЕсли;
	// Конец ГрупповоеИзменениеСтрок
	
	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);
	// Конец Обсуждения
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		КонтрольДоговоров = ПолучитьФункциональнуюОпцию("КонтрольДоговоров");
		
		Если Не КонтрольДоговоров = Перечисления.ВидыКонтроляДоговоровПриПроведении.НеКонтролировать Тогда
			
			ТекстСообщения = РаботаСКомиссионерамиКомитентамиСервер.ДоговорСоответствуетДокументу(Объект);
			
			Если ТекстСообщения <> "" Тогда
				
				Если КонтрольДоговоров = Перечисления.ВидыКонтроляДоговоровПриПроведении.НеПроводить Тогда
					Отказ = Истина;
				КонецЕсли;
				
				Сообщение = Новый СообщениеПользователю;
				Если Отказ Тогда
					Сообщение.Текст = СтрШаблон(НСтр("ru = 'Документ не проведен. %1'"), ТекстСообщения);
				Иначе
					Сообщение.Текст = ТекстСообщения;
				КонецЕсли;
				Сообщение.ПутьКДанным = "Объект";
				Сообщение.Поле = "Договор";
				Сообщение.Сообщить();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	// Комиссия
	НеУчитыватьЗаказыПриПередачеНаКомиссию = ?(ЗначениеЗаполнено(Объект.Договор), Объект.Договор.НеУчитыватьЗаказыПриПередачеНаКомиссию, Ложь);
	ОпределитьВидимостьЗаказовПокупателяКомиссия(ЭтотОбъект);
	
	// Прослеживаемость
	Если КэшЗначений = Неопределено Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	КэшЗначений.Вставить("РеализацияВЕАЭС", Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Объект.Контрагент));
	РеализацияВЕАЭС = КэшЗначений.РеализацияВЕАЭС;
	ОбновитьОтображениеПрослеживаемости(); 
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
		// Прослеживаемость
	Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	КонецЦикла;
	// Конец Прослеживаемость
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		Объект.ДокументОснование = Неопределено;
		ДанныеКонтрагента = ДанныеКонтрагентаДляИзменения(ДатаДокумента, Объект.Контрагент, Объект.Организация);
		Объект.Договор = ДанныеКонтрагента.Договор;
		Объект.КонтактноеЛицоПодписант = ДанныеКонтрагента.КонтактноеЛицоПодписант;
		
		ДоговорПередИзменением = Договор;
		Договор = Объект.Договор;
		
		ДоговорПриИзменении(Неопределено);
		
		КонтрагентПриИзмененииФрагмент(ДоговорПередИзменением, ДанныеКонтрагента);
		
		// Прослеживаемость
		НастроитьЭлементыПрослеживаемостиПриИзмененииКонтрагента(ДанныеКонтрагента);
		// Конец Прослеживаемость
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)

	ДоговорПередИзменением = Договор;
	Договор = Объект.Договор;
	
	Если ДоговорПередИзменением <> Объект.Договор Тогда
		Объект.ДокументОснование = Неопределено;
		ОбработатьИзменениеДоговораФрагмент(ДоговорПередИзменением);
	КонецЕсли;
	
	Объект.Проект = ПолучитьПроектПоДоговору(Договор);

КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоров.СКомиссионером"));
	
	ПараметрыФормы = Новый Структура;

	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Истина);
	ПараметрыФормы.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.Договор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент)

КонецПроцедуры

&НаКлиенте
Процедура ДоговорСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Владелец", Объект.Контрагент);
	ПараметрыОткрытия.Вставить("Организация", Объект.Организация);
	ПараметрыОткрытия.Вставить("ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоров.СКомиссионером"));
	ПараметрыОткрытия.Вставить("ОповеститьОЗаписиДоговора", Истина);
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказПриИзменении(Элемент)
	
	ЗаказПередИзменением = Заказ;
	Заказ = Объект.Заказ;
	
	Если ЗаказПередИзменением = Объект.Заказ Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		СтрокаТабличнойЧасти.Заказ = Объект.Заказ;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДанныеДляИзмененияДаты = ДокументыУНФКлиент.ДанныеДляИзмененияДаты(ЭтотОбъект, Объект);
	Если ДанныеДляИзмененияДаты.ДатаНеМенялась Тогда
		Возврат;
	КонецЕсли;
	
	ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты);
	
	ЦеныИВалютаКлиент.ПересчитатьКурсКратностьВалютыРасчетов(ДанныеДляИзмененияДаты.ВалютаКурсКратность, Объект,
		ЭтотОбъект);
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.Номер = "";
	
	КомпанияИДоговорПоУмолчанию = КомпанияИДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация);
	
	Компания = КомпанияИДоговорПоУмолчанию.Компания;
	
	Объект.Договор = КомпанияИДоговорПоУмолчанию.Договор;
	
	ДоговорПередИзменением = Договор;
	Договор = Объект.Договор;
	
	Если ДоговорПередИзменением <> Объект.Договор Тогда
		Объект.ДокументОснование = Неопределено;
		ОбработатьИзменениеДоговораФрагмент(ДоговорПередИзменением);
	КонецЕсли;
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "удалить" Тогда
		Объект.ДокументОснование = Неопределено;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Неопределено);
		Модифицированность = Истина;
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "заполнить" Тогда
		ЗаполнитьПоОснованиюНачало();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "выбрать" Тогда
		// Выбрать основание
		
		Если СписокДокументОснование.Количество() = 1 Тогда
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
			ВидОперацииРасходнаяНакладная = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию");
			СтруктураПараметровОтбора = Новый Структура("Отбор", Новый Структура("Контрагент, Договор, ВидОперации", Контрагент, Договор, ВидОперацииРасходнаяНакладная));
			
			ОткрытьФорму("Документ.РасходнаяНакладная.ФормаВыбора", СтруктураПараметровОтбора, ЭтотОбъект,,,, ОповещениеОЗакрытии);
			Возврат;
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборТипаОснованияЗавершение", ЭтотОбъект);
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокДокументОснование, Элементы.ДокументОснованиеНадпись);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "открыть" Тогда
		
		РаботаСФормойДокументаКлиент.ОткрытьФормуДокументаПоСсылке(Объект.ДокументОснование);
		
	КонецЕсли;
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ОбработкаНавигационнойСсылки");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТипаОснованияЗавершение(ТипОснования, Параметры) Экспорт
	
	Если ТипОснования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
	
	СтруктураПараметровОтбора = Новый Структура("Отбор", Новый Структура("Контрагент, Договор", Контрагент, Договор));
	
	ОткрытьФорму(ТипОснования.Значение, СтруктураПараметровОтбора, ЭтотОбъект,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснованиеЗавершение(ВыбранноеОснование, Параметры) Экспорт
	
	Если ВыбранноеОснование = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДокументОснование = ВыбранноеОснование;
	Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(ВыбранноеОснование);
	Модифицированность = Истина;
	
	ЗаполнитьПоОснованиюНачало();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюНачало() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Заполнить документ по выбранному основанию?'"), РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменениеСтрокДействиеПриИзменении(Элемент)
	
	ОпределитьОбъектИзменений(ИмяТЧЗапасы());
	НастроитьОформлениеПанелиРедактирования(ИмяТЧЗапасы(), 2);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокВзаиморасчетовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РаботаСФормойДокументаКлиент.ОткрытьОтчетВзаиморасчетыСКонтрагентом(Объект.Контрагент);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтборПоДублямОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элементы.Запасы.ОтборСтрок = Неопределено;
	Элементы.ЗапасыКонтекстноеМенюПоказатьДублиСтроки.Пометка = Ложь;
	Элементы.ДекорацияОтборПоДублям.Видимость = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасы

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьСбросКоличества И СбрасыватьКоличество
		И СтрокаТабличнойЧасти.Количество <> НовоеКоличествоПриИзмененииНоменклатуры Тогда
		
		ДопПараметр = Новый Структура();
		ДопПараметр.Вставить("Элемент", Элемент);
		ДопПараметр.Вставить("Количество", СтрокаТабличнойЧасти.Количество);
		Оповещение = Новый ОписаниеОповещения("ЗапасыПодтверждениеСбросаКоличестваЗавершение", ЭтотОбъект, ДопПараметр);
		ОткрытьФорму("ОбщаяФорма.ПодтверждениеСбросаКоличества", , , , , , Оповещение);
		
	Иначе
		
		Если СбрасыватьКоличество Тогда
			НовоеКоличество = НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
		ЗапасыНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПодтверждениеСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗапрашиватьСбросКоличества = Результат.ЗапрашиватьСбросКоличества;
		Если НЕ ЗапрашиватьСбросКоличества Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		КонецЕсли;
		Если Результат.СбрасыватьКоличество Тогда
			НовоеКоличество = Результат.НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = ДополнительныеПараметры.Количество;
		КонецЕсли;
	Иначе
		НовоеКоличество = ДополнительныеПараметры.Количество;
	КонецЕсли;
	
	ЗапасыНоменклатураПриИзмененииПродолжить(ДополнительныеПараметры.Элемент, НовоеКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество)

	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("Контрагент", Объект.Контрагент);
	СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
	КонецЕсли;
	
	СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанные);
	
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, Неопределено, СтруктураДанные);

	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	// Серии
	Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
		СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, ТекущиеДанныеСтроки,,ИспользоватьСерииНоменклатурыОстатки);
	КонецЦикла;
	
	СтрокаТабличнойЧасти.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = СтруктураДанные.НомерГТД;
	СтрокаТабличнойЧасти.Количество = НовоеКоличество;
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	
	Если СтруктураДанные.Свойство("МинимальнаяЦена") 
		И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
		СтрокаТабличнойЧасти.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если СтруктураДанные.ИспользоватьХарактеристики
		Тогда
		СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
	
	Если СтруктураДанные.ИспользоватьПартии
		Тогда
		СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
	КонецЕсли;
	
	// Прослеживаемость
	Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
		СтрокаТабличнойЧасти.ПрослеживаемыйТовар = СтруктураДанные.ПрослеживаемыйТовар;
		СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = СтруктураДанные.ПрослеживаемыйКомплект;
		СтрокаТабличнойЧасти.КодТНВЭД = СтруктураДанные.ТоварнаяНоменклатураВЭД;
	Иначе
		СтрокаТабличнойЧасти.ПрослеживаемыйТовар = Ложь;
		СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = Ложь;
		СтрокаТабличнойЧасти.КодТНВЭД = Неопределено;
	КонецЕсли;
	// Конец Прослеживаемость
	
	// Прослеживаемость
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	КонецЕсли;
	// Конец Прослеживаемость
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "РасходнаяНакладная", НастройкиФормыВыбораНоменклатуры, Истина, "Запасы", ВыбранноеЗначение.СтруктураНастроек);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("СтранаПроисхождения",	СтрокаТабличнойЧасти.СтранаПроисхождения);
		
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
	
		СтруктураДанные.Вставить("ДатаОбработки", 			Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", 		Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("Цена", 					СтрокаТабличнойЧасти.Цена);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
		
	КонецЕсли;    
	
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, Неопределено, СтруктураДанные);
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);

	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = СтруктураДанные.НомерГТД;
	
	Если СтруктураДанные.Свойство("МинимальнаяЦена") 
		И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
		СтрокаТабличнойЧасти.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;
	КонецЕсли; 
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	
	// Прослеживаемость
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	КонецЕсли;
	// Конец Прослеживаемость

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПартияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация",			Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура",		СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",		СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия",				СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("СтранаПроисхождения",	СтрокаТабличнойЧасти.СтранаПроисхождения);
	СтруктураДанные.Вставить("СтранаПроисхождения",	СтрокаТабличнойЧасти.СтранаПроисхождения);

	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = СтруктураДанные.НомерГТД;
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура)
		Тогда
		ТекстСообщения = НСтр("ru = 'Для выбора партии необходимо заполнить номенклатуру'");
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера");
	
	Владелец = Новый Структура("Владелец",ТекущиеДанные.Номенклатура);
	ПараметрыВыбораПартии = Новый Структура("ОперацияДокумента, Отбор, РежимВыбора", ВидОперации, Владелец, Истина);
	ОткрытьФорму("Справочник.ПартииНоменклатуры.ФормаСписка",ПараметрыВыбораПартии, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСерииНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерииНоменклатуры();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерииНоменклатуры()
	
	ТекущиеДанныеИдентификатор = Элементы.Запасы.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыСерийНоменклатуры = ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор);
	
	ОткрытьФорму("Обработка.ПодборСерийНоменклатуры.Форма", ПараметрыСерийНоменклатуры, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор)
	
	Возврат СерииНоменклатурыУНФ.ПараметрыПодбораСерийНоменклатуры(Объект, ЭтотОбъект.УникальныйИдентификатор,
	ТекущиеДанныеИдентификатор);
	
КонецФункции

&НаСервере
Функция ПолучитьСерииНоменклатурыИзХранилища(АдресВоВременномХранилище, КлючСтроки)
	
	Модифицированность = Истина;
	Возврат СерииНоменклатурыУНФ.ПолучитьСерииНоменклатурыИзХранилища(Объект, АдресВоВременномХранилище, КлючСтроки);
	
КонецФункции

&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение
		Или СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		Если КэшЗначений.ИспользоватьМинимальныеЦены
			И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
			
			СтрокаТабличнойЧасти.МинимальнаяЦена = СтрокаТабличнойЧасти.МинимальнаяЦена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
		
		КонецЕсли;
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриИзменении(Элемент)
	
	Если КопированиеСтрокиЗапасы = Неопределено ИЛИ НЕ КопированиеСтрокиЗапасы Тогда
		ОбновитьПодвалФормы();
	Иначе
		КопированиеСтрокиЗапасы = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// Прослеживаемость
	СтрокаТабличнойЧасти = Объект.Запасы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Поле = Элементы.ЗапасыРНПТ И СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
		ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Запасы", Ложь);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	Если Поле.Имя = "ЗапасыПрослеживаемыйТовар" Тогда
		ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
		Если ТекущиеДанные.ПрослеживаемыйТовар Тогда
			ПрослеживаемостьФормыКлиентУНФ.ПоказатьПредупреждениеПрослеживаемыйТовар();
		КонецЕсли;
	КонецЕсли;
	
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		ОбновитьПодвалФормы();
		КопированиеСтрокиЗапасы = Истина;
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "Заказ", "ПоложениеЗаказа");
	КонецЕсли;
	
	Если НоваяСтрока И Копирование Тогда
		Элемент.ТекущиеДанные.КлючСвязи = 0;
		Элемент.ТекущиеДанные.СерииНоменклатуры = "";
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, Элемент.ТекущиеДанные);
		
		// Прослеживаемость
		Элемент.ТекущиеДанные.ИдентификаторСтроки = "";
		Элемент.ТекущиеДанные.РНПТ = "";
		
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыСерииНоменклатуры Тогда
		ОткрытьПодборСерииНоменклатуры();
	КонецЕсли;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТабличнойЧасти.Количество = НовоеКоличествоПриИзмененииНоменклатуры;
	КонецЕсли;
		
	// ГрупповоеИзменениеСтрок
	Элемент.ТекущиеДанные.Пометка = Истина;
	// Конец ГрупповоеИзменениеСтрок
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	Для Каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
		// Прослеживаемость
		УдалитьСвязанныеЗаписи(ТекущиеДанныеСтроки);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияРеквизитовПечати(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ПечатьДокументовУНФКлиент.ОбновитьЗначенияРеквизитовПечати(ЭтотОбъект, Результат.ИзмененныеРеквизиты);
		
		Если Результат.Свойство("Команда") Тогда
			
			Подключаемый_ВыполнитьКоманду(Результат.Команда);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтранаПроисхожденияПриИзменении(Элемент)
	
	Если КэшЗначений.УчетГТД Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения)
			ИЛИ СтрокаТабличнойЧасти.СтранаПроисхождения = КэшЗначений.Россия Тогда
			
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
			
		КонецЕсли;
		
		// Прослеживаемость
		УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
		// Конец Прослеживаемость
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНомерГТДПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
		
		ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
		Если ДатаГТД > КонецДня(Объект.Дата) Тогда
			
			ТекстСообщения = НСтр("ru ='Внимание: выбранная ГТД датирована более поздней датой, чем текущий документ.'");
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Запасы",
				СтрокаТабличнойЧасти.НомерСтроки, "НомерГТД");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , КонтекстноеПоле);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНомерГТДПриРНПТПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
		
		ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
		Если ДатаГТД > КонецДня(Объект.Дата) Тогда
			
			ТекстСообщения = НСтр("ru ='Внимание: выбранная ГТД датирована более поздней датой, чем текущий документ.'");
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Запасы",
				СтрокаТабличнойЧасти.НомерСтроки, "НомерГТД");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , КонтекстноеПоле);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРНПТНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Запасы", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРНПТОчистка(Элемент, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		Если СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
			УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
		Иначе
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
		КонецЕсли;
		
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", КэшЗначений.НаборСвойств_Документ_ОтчетКомиссионераОСписании);
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы, , , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", "Запасы");
	
	ПодключаемоеОборудованиеУНФКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Ложь, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзФайлаЗапасы(Команда)
	
	НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ОтчетКомиссионераОСписании.ТабличнаяЧасть.Запасы";
	
	НастройкиЗагрузкиДанных.Вставить("ПолноеИмяТабличнойЧасти", "ОтчетКомиссионераОСписании.Запасы");
	НастройкиЗагрузкиДанных.Вставить("ИмяМакетаСШаблоном","ЗагрузкаИзФайлаЗапасы");
	НастройкиЗагрузкиДанных.Вставить("Заголовок", НСтр("ru = 'Загрузка запасов из файла'"));
	НастройкиЗагрузкиДанных.Вставить("СодержаниеВидимо", Истина);
	НастройкиЗагрузкиДанных.Вставить("ЗагрузкаТабличнойЧастиУслуги", Ложь);

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВставитьСтроки(Команда)
	
	ВставитьСтроки(ИмяТЧЗапасы());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыКопироватьСтроки(Команда)
	КопироватьСтроки(ИмяТЧЗапасы());
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВыполнитьДействие(Команда)
	
	ОбработатьТаблицу(ИмяТЧЗапасы());
	НастроитьОформлениеПанелиРедактирования(ИмяТЧЗапасы(), 4);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменитьСтроки(Команда)
	
	ПоказатьСкрытьПанельРедактирования(ИмяТЧЗапасы(), Истина);

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыОтменитьИзменения(Команда)
	
	ПоказатьСкрытьПанельРедактирования(ИмяТЧЗапасы());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПодбор(Команда)
	
	ИмяТабличнойЧасти	= ИмяТЧЗапасы();
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПодобратьПоОстаткамКомиссия(Команда)
	
	Отказ = ЗаполнениеОстаткамиНеВозможно();
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	ЗаказПокупателя = Неопределено;
	
	Если Объект.ПоложениеЗаказа = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке")
		И ЗначениеЗаполнено(Объект.Заказ) И ТипЗнч(Объект.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ЗаказПокупателя = Объект.Заказ
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыПодбора.Вставить("Договор", Объект.Договор);
	ПараметрыПодбора.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("ДатаДокумента", Объект.Дата);
	ПараметрыПодбора.Вставить("ЗаказПокупателя", ЗаказПокупателя);
	
	ПараметрыПодбора.Вставить("Проведен", Объект.Проведен);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	
	ОткрытьФорму("Документ.ОтчетКомиссионера.Форма.ФормаПодбораПоОстаткам", ПараметрыПодбора, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСнятьФлажки(Команда)
	УстановитьПометку(ИмяТЧЗапасы(), Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыУстановитьФлажки(Команда)
	УстановитьПометку(ИмяТЧЗапасы(), Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаказу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоЗаказуЗавершение", ЭтотОбъект);
	
	ПоказатьВопрос(ОписаниеОповещения,
	НСтр("ru = 'Документ будет полностью перезаполнен по ""Заказу"". Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаказуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоДокументу(Объект.Заказ);
		УстановитьВидимостьИДоступность();
		
		ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
			УчетВалютныхОпераций);
		
		ОбновитьПодвалФормы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоЗаказамКомиссия(Команда)
	
	Отказ = ЗаполнениеОстаткамиНеВозможно();
	Если Отказ Тогда Возврат КонецЕсли;
	
	Если Не Объект.Запасы.Количество() Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Распределение производится по номенклатуре которая предварительно добавлена в таблицу.'"),, НСтр("ru = 'Добавьте номенклатуру в таблицу'"));
		Возврат
	КонецЕсли;
	
	РаспределитьПоЗаказамСервер();
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	ПроверитьПоложениеЗаказа();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Документ будет полностью перезаполнен по ""Основанию"". Продолжить?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоДокументу(Объект.ДокументОснование);
	
	УстановитьВидимостьИДоступность();
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьПоЗаказамСервер()
	
	РаботаСКомиссионерамиКомитентамиСервер.РаспределитьНоменклатуруПоЗаказам(ЭтотОбъект, Неопределено, "Запасы");

	ЭтаФорма.Модифицированность = Истина;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамКомиссия(Команда)
	
	Отказ = ЗаполнениеОстаткамиНеВозможно();
	Если Отказ Тогда Возврат КонецЕсли;
	
	Если Объект.Запасы.Количество() Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросОчиститьЗапасы", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Перед заполнением табличная часть будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура("ВыгрузитьВХранилище", Истина);
	
	ЗапасыПереданные = ТаблицаОстатковТоваровУКомиссионера(ПараметрыЗаполнения);
	
	ИдентификаторыНовыхСтрок = Новый Массив;
	ПолучитьЗапасыИзХранилищаКомиссия(ЗапасыПереданные, ИдентификаторыНовыхСтрок);
	
	Для Каждого ИдентификаторСтроки Из ИдентификаторыНовыхСтрок Цикл
		
		СтрокаТабличнойЧасти = Объект.Запасы.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда Продолжить КонецЕсли;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		
	КонецЦикла;
	
	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьЗапасы(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда Возврат КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура("ВыгрузитьВХранилище", Истина);
	
	ЗапасыПереданные = ТаблицаОстатковТоваровУКомиссионера(ПараметрыЗаполнения);
	
	ИдентификаторыНовыхСтрок = Новый Массив;
	ПолучитьЗапасыИзХранилищаКомиссия(ЗапасыПереданные, ИдентификаторыНовыхСтрок);
	
	Для Каждого ИдентификаторСтроки Из ИдентификаторыНовыхСтрок Цикл
		
		СтрокаТабличнойЧасти = Объект.Запасы.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда Продолжить КонецЕсли;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		
	КонецЦикла;
	
	ЭтаФорма.Модифицированность = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	
	ОбработкаЗавершения = Новый ОписаниеОповещения(
	"ПоискПоШтрихкодуЗавершение",
	ЭтотОбъект, 
	Новый Структура("ТекШтрихкод", ТекШтрихкод));
	
	#Если МобильныйКлиент Тогда
		ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду",,,,,,
		ОбработкаЗавершения);
	#Иначе
		ПоказатьВводЗначения(ОбработкаЗавершения, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, СокрЛП(ДополнительныеПараметры.ТекШтрихкод), СокрЛП(Результат));
	
	Если ПустаяСтрока(ТекШтрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеШтрихкодов = Новый Структура;
	ДанныеШтрихкодов.Вставить("Штрихкод", ТекШтрихкод);
	ДанныеШтрихкодов.Вставить("Количество", 1);
	
	ПолученыШтрихкоды(ДанныеШтрихкодов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДублиСтроки(Команда)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Запасы.ОтборСтрок = Неопределено Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
		ПараметрыОтбора.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
		
		НайденныеСтроки = Объект.Запасы.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() <= 1 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Дубли строки не найдены.'"),, "Объект.Запасы");
			Возврат
		КонецЕсли;
		
		Элементы.Запасы.ОтборСтрок = Новый ФиксированнаяСтруктура(ПараметрыОтбора);
		Элементы.ЗапасыКонтекстноеМенюПоказатьДублиСтроки.Пометка = Истина;
		
		Элементы.ДекорацияОтборПоДублям.Заголовок = ИнформацияОбОтборе(
		СтрШаблон(НСтр("ru = 'Дубли строки %1'"), СтрокаТабличнойЧасти.НомерСтроки));
		
		Элементы.ДекорацияОтборПоДублям.Видимость = Истина;
		
	Иначе
		Элементы.Запасы.ОтборСтрок = Неопределено;
		Элементы.ЗапасыКонтекстноеМенюПоказатьДублиСтроки.Пометка = Ложь;
		Элементы.ДекорацияОтборПоДублям.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтотОбъект, ИмяТЧЗапасы());
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
	"РазбитьСтрокуТабличнойЧастиЗавершение",
	ЭтотОбъект,
	СтрокаТабличнойЧасти);
	
	ПоказатьВводЧисла(ОписаниеОповещения,
	СтрокаТабличнойЧасти.Количество,
	НСтр("ru = 'Количество в новой строке'"),
	15, 3);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуТабличнойЧастиЗавершение(Знач КоличествоВНовойСтроке, Знач СтрокаТабличнойЧасти) Экспорт
	
	Если КоличествоВНовойСтроке = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКДанным = СтрШаблон("Объект.Запасы[%1].Количество",
	Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧГ="));
	
	Если КоличествоВНовойСтроке <= 0 Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
		НСтр("ru = 'Количество в новой строке должно быть больше нуля.'"),,
		ПутьКДанным);
		
		Возврат;
		
	КонецЕсли;
	
	Если КоличествоВНовойСтроке >= СтрокаТабличнойЧасти.Количество Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
		НСтр("ru = 'Количество в новой строке должно быть меньше чем в текущей.'"),,
		ПутьКДанным);
		
		Возврат;
		
	КонецЕсли;
	
	НоваяСтрока = Объект.Запасы.Вставить(СтрокаТабличнойЧасти.НомерСтроки);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
	
	СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество - КоличествоВНовойСтроке;
	НоваяСтрока.Количество = КоличествоВНовойСтроке;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
	
	ОбновитьПодвалФормы();
	
	Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаФормы(Команда)
	
	ОткрытьФормуНастройки(Истина);
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элементы.ФормаНастройкаФормы, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура ШапкаТабличнаяЧасть(Команда)
	
	ОткрытьФормуНастройки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимГТД(Команда)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РежимГТД", "Пометка", НЕ Элементы.РежимГТД.Пометка);
	
	ИзменитьРежимРаботаГТД(Элементы.РежимГТД.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура НомераГТДЗаполнитьПоФактическимОстаткам(Команда)
	
	НомераГТДЗаполнитьПоФактическимОстаткамНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НомераГТДПодобрать(Команда)
	
	НомераГТДПодобратьНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСбросаКоличества(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтрокаПоиска", НСтр("ru = 'Сбрасывать количество при изменении номенклатуры'"));
	Оповещение = Новый ОписаниеОповещения("НастройкаСбросаКоличестваЗавершение", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.НастройкиПользователей.Форма.ФормаНастройкиПользователя", СтруктураПараметров, , , , ,
		Оповещение);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, 
		Элементы.ЗапасыКонтекстноеМенюНастройкаСбросаКоличества, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НастройкиКоличества = ПолучитьНастройкиИзмененияКоличества();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиКоличества);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте 
Процедура ИзменитьРежимРаботаГТД(ВключитьРежимГТД)
	
	Если НЕ КэшЗначений.Свойство("ОбрабатываемыеРеквизиты") Тогда
		
		КэшЗначений.Вставить("ОбрабатываемыеРеквизиты", Новый Массив);
		
	КонецЕсли;
	
	Если ВключитьРежимГТД Тогда
		
		ВключитьРежимРаботаГТД();
		
	Иначе
		
		ВыключитьРежимРаботаГТД();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьРежимРаботаГТД()
	
	Для каждого ИмяЭлементаФормы Из КэшЗначений.ОбрабатываемыеРеквизиты Цикл
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлементаФормы, "Видимость", Истина);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЕдиницаИзмерения", "Доступность", Истина);
	
	КэшЗначений.ОбрабатываемыеРеквизиты = Новый Массив;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРежимРаботаГТД()
	
	НеизменяемыеРеквизиты = Новый Массив;
	НеизменяемыеРеквизиты.Добавить("ЗапасыПометка");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНомерСтроки");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНоменклатура");
	НеизменяемыеРеквизиты.Добавить("ЗапасыХарактеристика");
	НеизменяемыеРеквизиты.Добавить("ЗапасыПартия");
	НеизменяемыеРеквизиты.Добавить("ЗапасыКоличество");
	НеизменяемыеРеквизиты.Добавить("ЗапасыЕдиницаИзмерения");
	НеизменяемыеРеквизиты.Добавить("ЗапасыСтранаПроисхождения");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНомерГТД");
	
	ПрослеживаемостьФормыКлиентСерверУНФ.ДобавитьНеизменяемыеРеквизитыДляРежимаГТД(НеизменяемыеРеквизиты);
	
	Для каждого ЭлементФормы Из Элементы.Запасы.ПодчиненныеЭлементы Цикл
		
		Если НеизменяемыеРеквизиты.Найти(ЭлементФормы.Имя) = Неопределено
			И ЭлементФормы.Видимость = Истина Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементФормы.Имя, "Видимость", Ложь);
			КэшЗначений.ОбрабатываемыеРеквизиты.Добавить(ЭлементФормы.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЕдиницаИзмерения", "Доступность", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура НомераГТДПодобратьНаСервере(ЭтоКонтекстныйВызов)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ТаблицаЗапасы", Неопределено);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	
	Если НЕ ЭтоКонтекстныйВызов Тогда
		
		ПараметрыПодбора.Вставить("ПроверятьПометку", Истина);
		
	КонецЕсли;
	
	ГрузовыеТаможенныеДекларацииСервер.ПодготовитьТаблицуЗапасовИзТаблицыФормы(ПараметрыПодбора, Объект.Запасы);
	ГрузовыеТаможенныеДекларацииСервер.ПодобратьНомераГТДПоПредыдущимПоступлениям(ПараметрыПодбора);
	ГрузовыеТаможенныеДекларацииСервер.ПеренестиНомераГТДВТаблицуФормы(Объект.Запасы, ПараметрыПодбора);
	
	// Прослеживаемость
	ОбновитьОтображениеПрослеживаемости();
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаСервере
Процедура НомераГТДЗаполнитьПоФактическимОстаткамНаСервере(ЭтоКонтекстныйВызов)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ТаблицаЗапасы", Неопределено);
	ПараметрыПодбора.Вставить("ОстаткиПоГТД", Неопределено);
	ПараметрыПодбора.Вставить("Дата", Объект.Дата);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("ИндексТекущейСтроки", ?(ЗначениеЗаполнено(Элементы.Запасы.ТекущаяСтрока), Объект.Запасы.Индекс(Объект.Запасы.НайтиПоИдентификатору(Элементы.Запасы.ТекущаяСтрока)), 0));
		
	Если НЕ ЭтоКонтекстныйВызов Тогда
		
		ПараметрыПодбора.Вставить("ПроверятьПометку", Истина);
		
	КонецЕсли;
	
	МассивИменПолей = Новый Массив;
	
	ПараметрыПодбора.Вставить("ИменаПолей", МассивИменПолей);
	
	ГрузовыеТаможенныеДекларацииСервер.ПодготовитьТаблицуЗапасовИзТаблицыФормы(ПараметрыПодбора, Объект.Запасы);
	ГрузовыеТаможенныеДекларацииСервер.СформироватьОстаткиНомеровГТД(ПараметрыПодбора);
	ГрузовыеТаможенныеДекларацииСервер.ПеренестиОстаткиНомеровГТДВТаблицуФормы(Объект.Запасы, ПараметрыПодбора);
	
	Если ПараметрыПодбора.ИндексТекущейСтроки <> -1 Тогда
		
		СтрокаКоллекции = Объект.Запасы.Получить(ПараметрыПодбора.ИндексТекущейСтроки);
		Элементы.Запасы.ТекущаяСтрока = СтрокаКоллекции.ПолучитьИдентификатор();
		
	КонецЕсли;
	
	// Прослеживаемость
	ОбновитьОтображениеПрослеживаемости(); 
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоговора()
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПараметрыРасчетовСКонтрагентом = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Контрагент, "ВестиРасчетыПоДоговорам");
		Элементы.Договор.Видимость = ПараметрыРасчетовСКонтрагентом.ВестиРасчетыПоДоговорам;
	Иначе
		Элементы.Договор.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроверитьПоложениеЗаказа()
	
	Если Объект.ПоложениеЗаказа = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Возврат
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
		Если Не СтрокаТабличнойЧасти.Заказ = Объект.Заказ Тогда
			Объект.ПоложениеЗаказа = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
			УстановитьВидимостьОтПользовательскихНастроек();
			Прервать
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДокументОснование()
	СписокДокументОснование.Добавить("Документ.РасходнаяНакладная.ФормаВыбора", НСтр("ru = 'Расходная накладная'"));
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройки(ПередаватьВидДокумента)
	
	ЗаполнениеОбъектовУНФКлиент.ЗаполнитьПустыеПоложения(Объект, "ПоложениеЗаказа");
	
	ПараметрыДиалога = Новый Структура;
	ПараметрыДиалога.Вставить("ПоложениеЗаказаПокупателяВДокументахОтгрузки", Объект.ПоложениеЗаказа);
	ПараметрыДиалога.Вставить("БылиВнесеныИзменения", Ложь);
	
	Если ПередаватьВидДокумента Тогда
		ПараметрыДиалога.Вставить("ВидДокумента", НСтр("ru = 'отчет комиссионера о списании'"));
	КонецЕсли;	
	
	ОткрытьФорму(
	"ОбщаяФорма.ШапкаТабличнаяЧасть",
	ПараметрыДиалога,,,,,
	Новый ОписаниеОповещения("ШапкаТабличнаяЧастьЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ШапкаТабличнаяЧастьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.БылиВнесеныИзменения Тогда
		
		Если Объект.ПоложениеЗаказа<>Результат.ПоложениеЗаказаПокупателяВДокументахОтгрузки Тогда
			Объект.ПоложениеЗаказа = Результат.ПоложениеЗаказаПокупателяВДокументахОтгрузки;
			ЗаполнениеОбъектовУНФКлиент.ОбработатьИзменениеПоложения(Объект, "Запасы", "Заказ", "ПоложениеЗаказа");
		КонецЕсли;
		
		ШапкаТабличнаяЧастьЗавершениеНаСервере(Результат);
		
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура") 
		И Результат.БылиИзмененыПерсональныеНастройки Тогда
		НастройкиКоличества = ПолучитьНастройкиИзмененияКоличества();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиКоличества);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ШапкаТабличнаяЧастьЗавершениеНаСервере(Знач Результат)
	
	УстановитьВидимостьОтПользовательскихНастроек();
	
	Если Объект.ПоложениеЗаказа = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Объект.Заказ = Неопределено
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОтПользовательскихНастроек()
	
	Если Объект.ПоложениеЗаказа = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Заказ", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьПоЗаказу", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЗаказ", "Видимость", Истина);
		ЗаказВШапке = Ложь;
		
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Заказ", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьПоЗаказу", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЗаказ", "Видимость", Ложь);
		ЗаказВШапке = Истина;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ИнформацияОбОтборе(Знач НаименованиеМетки)
	
	Возврат НоменклатураВДокументахСервер.ИнформацияОбОтборе(НаименованиеМетки);
	
КонецФункции

&НаСервере
Процедура ПолучитьЗапасыИзХранилищаКомиссия(АдресЗапасовВХранилище, ИдентификаторыНовыхСтрок)
	ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, "Запасы", ИдентификаторыНовыхСтрок);
КонецПроцедуры

&НаСервере
Функция ТаблицаОстатковТоваровУКомиссионера(ПараметрыЗаполнения)
	Возврат РаботаСКомиссионерамиКомитентамиСервер.ТаблицаОстатковТоваровУКомиссионера(Объект, ПараметрыЗаполнения);
КонецФункции

&НаСервере
Процедура ЗаполнитьПоДокументу(ДокОснование)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(ДокОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
	ПроверитьПоложениеЗаказа();
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	// Прослеживаемость
	ОбновитьОтображениеПрослеживаемости(); 
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометку(ИмяТЧ, Пометка)
	
	НаборЭлементов = НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ);
	НаборЭлементов.КнопкаСнятьФлажки.Видимость = НЕ НаборЭлементов.КнопкаСнятьФлажки.Видимость;
	НаборЭлементов.КнопкаУстановитьФлажки.Видимость = НЕ НаборЭлементов.КнопкаУстановитьФлажки.Видимость;
	
	Для каждого Строка Из Объект[НаборЭлементов.ИмяТЧ] Цикл
		Строка.Пометка = Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнениеОстаткамиНеВозможно() 
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Организация"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Организация", , Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Контрагент"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Контрагент", , Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Договор) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Договор"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Договор", , Отказ);
	КонецЕсли;
	
	Возврат Отказ;

КонецФункции

&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСкрытьПанельРедактирования(ИмяТЧ, ИзменяетДанные = Неопределено)
	
	Перем СостояниеПерехода;
	ГрупповоеИзменениеСтрокСервер.ПоказатьСкрытьПанельРедактирования(ЭтотОбъект, НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ),
		СостояниеПерехода,
		ИзменяетДанные);
	
	УправлениеРезервнымиКопиямиТаблицы(ИмяТЧ, СостояниеПерехода, ИзменяетДанные);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеРезервнымиКопиямиТаблицы(ИмяТЧ, СостояниеПерехода, ИзменяетДанные)

	РеквизитРезервнаяКопияТаблицыАдрес = "ЗапасыРезервнаяКопияТаблицыАдрес";
	ГрупповоеИзменениеСтрокСервер.УправлениеРезервнымиКопиями(ЭтотОбъект, Объект[ИмяТЧ],
	ЭтотОбъект[РеквизитРезервнаяКопияТаблицыАдрес], СостояниеПерехода, ИзменяетДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОформлениеПанелиРедактирования(ИмяТЧ, Состояние, СохранитьИзменения = Неопределено)
	
	Если ИмяТЧ = ИмяТЧЗапасы() Тогда
		РеквизитЗначение = "ЗапасыИзменениеСтрокЗначение";
	КонецЕсли;
	
	Результат = ГрупповоеИзменениеСтрокКлиент.НастроитьОформлениеПанелиРедактирования(ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокКлиент(ИмяТЧ),
		Состояние,
		ЭтотОбъект[РеквизитЗначение]);
	
	Если Результат.Свойство("УстановитьСвязиПараметровВыбора") И Результат.УстановитьСвязиПараметровВыбора Тогда
		УстановитьСвязиПараметровВыбораДляЗначения(ИмяТЧ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиПараметровВыбораДляЗначения(ИмяТЧ)
	
	ГрупповоеИзменениеСтрокСервер.УстановитьСвязиПараметровВыбора(НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ));
	
КонецПроцедуры

&НаКлиенте
Функция НаборЭлементовГрупповогоИзмененияСтрокКлиент(ИмяТЧ)
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", ИмяТЧЗапасы());
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаЗапасыИзменениеСтрок);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.ЗапасыУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.ЗапасыСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ЗапасыВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.ЗапасыПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.ЗапасыНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.ЗапасыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.ЗапасыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.ЗапасыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         ЗапасыИзменениеСтрокОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(ЗапасыИзменениеСтрокОбъектИзмененийЭлемент), 
		                                                     Элементы[ЗапасыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	
	Возврат НаборЭлементов;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьТаблицу(ИмяТЧ)
	
	Если ИмяТЧ = ИмяТЧЗапасы() Тогда
		ВыполненноеДействие = ЗапасыИзменениеСтрокДействие;
	КонецЕсли;
	
	ОбработатьТаблицуНаСервере(ИмяТЧ);
	
	ИзменяемыеСтроки = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("Пометка", Истина));
	Для каждого Строка Из ИзменяемыеСтроки Цикл
		
		Если ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент")
			ИЛИ ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки")
			ИЛИ ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду")
			ИЛИ ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦены") Тогда
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(Строка);
			
		ИначеЕсли ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента")
			И ИмяТЧ = ИмяТЧЗапасы() Тогда
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(Строка);
			
		ИначеЕсли ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьСуммы") Тогда
			
			Если Строка.Количество <> 0 Тогда
				Строка.Цена = Строка.Сумма / Строка.Количество;
			КонецЕсли;
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(Строка);
			
		ИначеЕсли ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству")
			ИЛИ ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			
			Если Строка.Количество <> 0 Тогда
				Строка.Цена = Строка.Сумма / Строка.Количество;
			КонецЕсли;
			
			ОбновитьПодвалФормы();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьТаблицуНаСервере(ИмяТЧ)
	
	Если ИмяТЧ = ИмяТЧЗапасы() Тогда
		
		ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(ЭтотОбъект,
			Объект.Запасы,
			ЗапасыИзменениеСтрокДействие,
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит,
			ЗапасыИзменениеСтрокЗначение,
			"ЗапасыНоменклатура");
		
		Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
			
			ИзменяемыеСтроки = Объект.Запасы.НайтиСтроки(Новый Структура("Пометка", Истина));
			Для каждого Строка Из ИзменяемыеСтроки Цикл
				
				СтруктураДанные = Новый Структура;

				СтруктураДанные.Вставить("Организация", Объект.Организация);
				СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
				СтруктураДанные.Вставить("Характеристика", Строка.Характеристика);
				СтруктураДанные.Вставить("Контрагент", Объект.Контрагент);
				СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
				
				Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
					
					СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
					СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
					СтруктураДанные.Вставить("Характеристика", Строка.Характеристика);
					СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
					СтруктураДанные.Вставить("Коэффициент", 1);
					
				КонецЕсли;   
				
				ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, Неопределено, СтруктураДанные);
				
				СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
				
				Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
				Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
					Строка.Количество = 1;
				КонецЕсли;
				Строка.Цена = СтруктураДанные.Цена;
				
				// Прослеживаемость
				Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
					Строка.ПрослеживаемыйТовар = СтруктураДанные.ПрослеживаемыйТовар;
					Строка.ПрослеживаемыйКомплект = СтруктураДанные.ПрослеживаемыйКомплект;
				Иначе
					Строка.ПрослеживаемыйТовар = Ложь;
					Строка.ПрослеживаемыйКомплект = Ложь;
				КонецЕсли; 
				// Конец Прослеживаемость
				
			КонецЦикла;
			
			// Прослеживаемость
			ОбновитьОтображениеПрослеживаемости();
			// Конец Прослеживаемость
			
		КонецЕсли;
		
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтроки(ИмяТЧ, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация",        Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура",       Строка.Номенклатура);
		СтруктураДанные.Вставить("Контрагент", Объект.Контрагент);
		СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		КонецЕсли;
		
		// Прослеживаемость
		Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
			Строка.ПрослеживаемыйТовар = СтруктураДанные.ПрослеживаемыйТовар;
			Строка.ПрослеживаемыйКомплект = СтруктураДанные.ПрослеживаемыйКомплект;
			Строка.КодТНВЭД = СтруктураДанные.ТоварнаяНоменклатураВЭД;
		Иначе
			Строка.ПрослеживаемыйТовар = Ложь;
			Строка.ПрослеживаемыйКомплект = Ложь;
			Строка.КодТНВЭД = Неопределено;
		КонецЕсли;
		// КонецПрослеживаемость
		
	КонецЦикла;
	
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы", Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВставленныеСтроки(ИмяТЧ, КоличествоВставленных)
	
	Если ИмяТЧ = ИмяТЧЗапасы() Тогда
		Количество = Объект[ИмяТЧ].Количество();
		
		Для Итератор = 1 По КоличествоВставленных Цикл
			
			СтрокаЗапасы = Объект[ИмяТЧ][Количество - Итератор];
			РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаЗапасы);
			
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодвалФормы()
	ИтогВсего = Объект.Запасы.Итог("Сумма");
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекущееДействиеИзмененияСтрок()
	
	СохраняемыеНастройки = "";
	
	Если ЗапасыИзменениеСтрокДействие <> ЗапасыИзменениеСтрокДействиеПриОткрытии Тогда
		СохраняемыеНастройки = ИмяТЧЗапасы();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СохраняемыеНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьТекущееДействиеИзмененияСтрокСервер(СохраняемыеНастройки);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьТекущееДействиеИзмененияСтрокСервер(СохраняемыеНастройки)
	
	ИменаТЧ = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СохраняемыеНастройки);
	Для каждого ИмяТЧ Из ИменаТЧ Цикл
		ГрупповоеИзменениеСтрокСервер.СохранитьНастройки(НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ));
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияХарактеристик()
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ИдентификаторыНовыхСтрок = Неопределено)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	ЭтоПодборПоОстаткам = Ложь;
	
	Если Не ТаблицаДляЗагрузки.Колонки.Найти("СуммаРасчетов") = Неопределено
		И Не ТаблицаДляЗагрузки.Колонки.Найти("ЗаказПокупателя") = Неопределено Тогда
		ЭтоПодборПоОстаткам = Истина;
	КонецЕсли;
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
		Если ЭтоПодборПоОстаткам Тогда
			НоваяСтрока.Сумма = СтрокаЗагрузки.СуммаРасчетов;
			Если НоваяСтрока.Количество > 0 Тогда
				НоваяСтрока.Цена = Окр(НоваяСтрока.Сумма/НоваяСтрока.Количество,2, РежимОкругления.Окр15как20);
			КонецЕсли;
			НоваяСтрока.Заказ = СтрокаЗагрузки.ЗаказПокупателя;
			
			Если Объект.ПоложениеЗаказа = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
				Если Не НоваяСтрока.Заказ = Объект.Заказ Тогда
					Объект.ПоложениеЗаказа = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
					УстановитьВидимостьОтПользовательскихНастроек();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(ИдентификаторыНовыхСтрок) = Тип("Массив") Тогда
			ИдентификаторыНовыхСтрок.Добавить(НоваяСтрока.ПолучитьИдентификатор());
		КонецЕсли;
		
		ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Заказ", "ПоложениеЗаказа");
		
		Если НоваяСтрока.Свойство("Пометка") Тогда
			
			НоваяСтрока.Пометка = Истина;
			
		КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаЗагрузки.Номенклатура) Тогда
				
				ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаЗагрузки.Номенклатура, "ТипНоменклатуры");
				
				СтруктураДанныеНоменклатуры = Новый Структура();
				СтруктураДанныеНоменклатуры.Вставить("Номенклатура", СтрокаЗагрузки.Номенклатура);
				СтруктураДанныеНоменклатуры.Вставить("Характеристика", СтрокаЗагрузки.Характеристика);
				СтруктураДанныеНоменклатуры.Вставить("Партия", СтрокаЗагрузки.Партия);
				СтруктураДанныеНоменклатуры.Вставить("Контрагент", Объект.Контрагент);
				СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
				СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ЗначенияРеквизитов.ТипНоменклатуры);
				СтруктураДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", СтрокаЗагрузки.ЕдиницаИзмерения);
				СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
				
				СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанныеНоменклатуры);
				СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
				
				НоваяСтрока.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
				ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект[ИмяТабличнойЧасти], НоваяСтрока, "КлючСвязи");
				
				// Характеристики
				НоваяСтрока.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
				НоваяСтрока.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
				НоваяСтрока.ЗаполнениеХарактеристикиПроверено = Истина;
				
				Если СтруктураДанные.ИспользоватьХарактеристики
					Тогда
					НоваяСтрока.Характеристика = СтруктураДанные.Характеристика;
				КонецЕсли;
				// Конец Характеристики
				
				//Партии
				НоваяСтрока.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
				НоваяСтрока.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
				
				Если СтруктураДанные.ИспользоватьПартии
					Тогда
					НоваяСтрока.Партия = СтруктураДанные.Партия;
				КонецЕсли;
				// Конец Партии
				
				// Серии номенклатуры
				Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьСерииНоменклатуры Тогда
					СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", СерииНоменклатурыУНФ.СтатусСерийНоменклатурыПриИзменении(СтруктураДанные));
				Иначе
					СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", 0);
				КонецЕсли;
				
				НоваяСтрока.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
				НоваяСтрока.НомерГТД = СтруктураДанные.НомерГТД;
				
				// Прослеживаемость
				НоваяСтрока.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
				Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
					НоваяСтрока.ПрослеживаемыйТовар = СтруктураДанные.ПрослеживаемыйТовар;
					НоваяСтрока.ПрослеживаемыйКомплект = СтруктураДанные.ПрослеживаемыйКомплект;
					ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, НоваяСтрока);
					НоваяСтрока.КодТНВЭД = СтруктураДанные.ТоварнаяНоменклатураВЭД;
				Иначе
					НоваяСтрока.ПрослеживаемыйТовар = Ложь;
					НоваяСтрока.ПрослеживаемыйКомплект = Ложь;
				КонецЕсли;
				Если НЕ НоваяСтрока.ПрослеживаемыйТовар Тогда
					НоваяСтрока.НомерГТД = СтруктураДанные.НомерГТД;
				Иначе
					НоваяСтрока.НомерГТД = Неопределено;
				КонецЕсли; 
				// Конец Прослеживаемость
				
			КонецЕсли;
		
		КонецЦикла;

	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьОбъектИзменений(ИмяТЧ)
	
	Если ИмяТЧ = ИмяТЧЗапасы() Тогда
		
		Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьСуммы") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦены") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
		
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "";
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.СоздатьПартииНоменклатуры") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Партия";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыПартия";
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура;
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено, РассчитатьЦену = Ложь)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	КонецЕсли;
	
	Если Не РассчитатьЦену Тогда
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	Иначе
		КоличествоСтроки = СтрокаТабличнойЧасти.Количество;
		СтрокаТабличнойЧасти.Цена = ?(КоличествоСтроки=0, 0, СтрокаТабличнойЧасти.Сумма / КоличествоСтроки);
	КонецЕсли;
	
	// Серии номенклатуры
	Если ИспользоватьСерииНоменклатурыОстатки<>Неопределено Тогда
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСерииНоменклатурыКоличество(Объект, СтрокаТабличнойЧасти,,"КлючСвязи");
	КонецЕсли;

	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанные.СтранаПроисхождения) Тогда
		
		СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("НомерГТД", Неопределено);
	
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
		Иначе
			СтруктураДанные.Вставить("Коэффициент", 1);
		КонецЕсли;
		
		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("МинимальнаяЦена", ЦенообразованиеСервер.ПолучитьМинимальнуюЦенуНоменклатуры(СтруктураДанные));

	ГрузовыеТаможенныеДекларацииСервер.АвтоматическийПодборВРеализацииНомераГТД(СтруктураДанные);
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)

	СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
	СтруктураДанные.Вставить("НомерГТД", Неопределено);
	
	// Прослеживаемость
	СтруктураДанные.Вставить("ТоварнаяНоменклатураВЭД", СтруктураДанные.Номенклатура.ТоварнаяНоменклатураВЭД);
	
	Если НЕ СтруктураДанные.Свойство("ЕдиницаИзмерения") Тогда
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	КонецЕсли;
	
	// Характеристики
	СтруктураДанные.Вставить("ИспользоватьХарактеристики",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",Ложь);
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьХарактеристики
		Тогда
		ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура);
		
		Если Не ЗначенияПоУмолчанию = Неопределено
			Тогда
			ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
		КонецЕсли;
		
		Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика",ХарактеристикаПоУмолчанию);
		Иначе
			СтруктураДанные.Характеристика = ?(ЗначениеЗаполнено(СтруктураДанные.Характеристика), СтруктураДанные.Характеристика, ХарактеристикаПоУмолчанию);
		КонецЕсли;
		
		СтруктураДанные.Вставить("ИспользоватьХарактеристики",Истина);
		СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",СтруктураДанные.Номенклатура.ПроверятьЗаполнениеХарактеристики);
	КонецЕсли; 
	// Конец Характеристики
	
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		
		Если СтруктураДанные.Свойство("Характеристика") И СтруктураДанные.Характеристика = Неопределено Тогда
			СтруктураДанные.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка()
		ИначеЕсли НЕ СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика",Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		КонецЕсли;
		
		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("МинимальнаяЦена", ЦенообразованиеСервер.ПолучитьМинимальнуюЦенуНоменклатуры(СтруктураДанные));
	
	//Партии
	СтруктураДанные.Вставить("ИспользоватьПартии",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеПартий",Ложь);
	
	Если НЕ СтруктураДанные.Свойство("Партия") Тогда
		СтруктураДанные.Вставить("Партия", Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьПартии
		Тогда
		ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура, Перечисления.СтатусыПартий.СобственныеЗапасы, СтруктураДанные.Контрагент);
		
		ПартияПоУмолчанию = Справочники.ПартииНоменклатуры.ПустаяСсылка();
		
		Если Не ЗначенияПартииПоУмолчанию = Неопределено
			Тогда
			ПартияПоУмолчанию = ЗначенияПартииПоУмолчанию;
		КонецЕсли;
		
		СтруктураДанные.Партия = ?(ЗначениеЗаполнено(СтруктураДанные.Партия), СтруктураДанные.Партия, ПартияПоУмолчанию);
		
		СтруктураДанные.ПроверятьЗаполнениеПартий = СтруктураДанные.Номенклатура.ПроверятьЗаполнениеПартий;
		СтруктураДанные.ИспользоватьПартии = Истина;
		
	КонецЕсли;
	// Конец Партии
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьСерииНоменклатуры Тогда
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", СерииНоменклатурыУНФ.СтатусСерийНоменклатурыПриИзменении(СтруктураДанные));
	Иначе
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", 0);
	КонецЕсли;
	
	ГрузовыеТаможенныеДекларацииСервер.АвтоматическийПодборВРеализацииНомераГТД(СтруктураДанные);
	
	// Прослеживаемость
	СтруктураДанные.Вставить("ПрослеживаемыйТовар", СтруктураДанные.Номенклатура.ПрослеживаемыйТовар 
	И СтруктураДанные.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас);
	СтруктураДанные.Вставить("ПрослеживаемыйКомплект", СтруктураДанные.Номенклатура.ПрослеживаемыйКомплект
	И СтруктураДанные.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас);
	Если СтруктураДанные.ПрослеживаемыйТовар 
		И ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров") Тогда
		СтруктураДанные.Вставить("НомерГТД", Неопределено);
	КонецЕсли; 
	// Конец Прослеживаемость
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервереБезКонтекста
Функция КомпанияИДоговорПоУмолчанию(Документ, Контрагент, Организация)
	
	Результат = Новый Структура;
	
	Результат.Вставить("Компания", Константы.УчетПоКомпании.Компания(Организация));
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
	ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПоКонтрагентуПоОрганизации(Контрагент, Организация,
		СписокВидовДоговоров);
	
	Результат.Вставить("Договор", ДоговорПоУмолчанию);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты)
	
	ДокументыУНФ.ДатаПриИзменении(ДанныеДляИзмененияДаты, ЭтотОбъект, Объект);
	
	// Прослеживаемость
	КэшЗначений.Вставить("ВестиУчетПрослеживаемыхТоваров", ПрослеживаемостьУНФ.ВедетсяУчетПрослеживаемыхТоваров(
		Объект.Дата));
	ОбновитьПризнакПрослеживаемости();
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзмененииФрагмент(ДоговорПередИзменением, СтруктураДанные)
	
	ВалютаРасчетовПередИзменением = ВалютаРасчетов;
	ВалютаРасчетов = СтруктураДанные.ВалютаРасчетов;
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда 
		Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
		Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
	КонецЕсли;
	
	ИзменилсяВидЦен = Объект.ВидЦен <> СтруктураДанные.ВидЦен 
		И ЗначениеЗаполнено(СтруктураДанные.ВидЦен) И СтруктураДанные.УчетЦенКонтрагентов;
		
	НовыйДоговорИВалютаРасчетов = ЗначениеЗаполнено(Объект.Договор) И ЗначениеЗаполнено(ВалютаРасчетов) 
		И Объект.Договор <> ДоговорПередИзменением И ВалютаРасчетовПередИзменением <> СтруктураДанные.ВалютаРасчетов;
		
	ОткрытьФормуЦеныИВалюты = НовыйДоговорИВалютаРасчетов И Объект.ВалютаДокумента <> СтруктураДанные.ВалютаРасчетов
		И Объект.Запасы.Количество() > 0;
	
	СтруктураДанные.Вставить("ИзменилсяВидЦен", ИзменилсяВидЦен);
	
	Если ИзменилсяВидЦен Тогда Объект.ВидЦен = СтруктураДанные.ВидЦен КонецЕсли;
	Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
	
	Если ОткрытьФормуЦеныИВалюты Тогда
		
		ТекстПредупреждения = "";
		
		Если ИзменилсяВидЦен Тогда
			ТекстПредупреждения = НСтр("ru = 'Договор с контрагентом предусматривает условия цен, 
				|отличные от установленных в документе.
				|Возможно, необходимо перезаполнить цены.'") + Символы.ПС + Символы.ПС;
		КонецЕсли;
		
		ТекстПредупреждения = ТекстПредупреждения + НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом.
			|Необходимо проверить валюту документа.'");
		ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаРасчетовПередИзменением, Истина, ИзменилсяВидЦен, ТекстПредупреждения);
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Договор) 
		И ИзменилсяВидЦен Тогда
		
		ПересчетНеобходим = Объект.Запасы.Количество() > 0;
		
		Объект.ВидЦен = СтруктураДанные.ВидЦен;
		ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
			УчетВалютныхОпераций);
		
		Если ПересчетНеобходим Тогда
			
			Сообщение = НСтр("ru = 'Договор с контрагентом предусматривает вид цен, отличный от установленного в документе.
									|Пересчитать документ в соответствии с договором?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьИзменениеДоговораФрагментЗавершение", ЭтотОбъект,
				Новый Структура("ДоговорПередИзменением, ВалютаРасчетовПередИзменением, СтруктураДанные",
				ДоговорПередИзменением, ВалютаРасчетовПередИзменением, СтруктураДанные)), Сообщение,
				РежимДиалогаВопрос.ДаНет);
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
			УчетВалютныхОпераций);
		
	КонецЕсли;
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ФормаДокумента, ИмяТабличнойЧасти) Экспорт
	
	СтруктураДанных = Новый Структура;
	ТабличнаяЧастьДокумента = Новый Массив;

	СтруктураДанных.Вставить("Дата",				ФормаДокумента.Объект.Дата);
	СтруктураДанных.Вставить("Организация",			ФормаДокумента.Компания);
	СтруктураДанных.Вставить("ВидЦен",				ФормаДокумента.Объект.ВидЦен);
	СтруктураДанных.Вставить("ВалютаДокумента",		ФормаДокумента.Объект.ВалютаДокумента);
	
	Для каждого СтрокаТЧ Из ФормаДокумента.Объект[ИмяТабличнойЧасти] Цикл
		
		СтрокаТЧ.Цена = 0;
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			Продолжить;
		КонецЕсли; 
		
		СтрокаТабличнойЧасти = Новый Структура();
		СтрокаТабличнойЧасти.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		
		Если СтрокаТЧ.Свойство("Характеристика") Тогда
			
			СтрокаТабличнойЧасти.Вставить("Характеристика", СтрокаТЧ.Характеристика);
			
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Вставить("ЕдиницаИзмерения", СтрокаТЧ.ЕдиницаИзмерения);
		СтрокаТабличнойЧасти.Вставить("Цена", 0);  
		
		ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, СтрокаТЧ, СтрокаТабличнойЧасти);
		
		ТабличнаяЧастьДокумента.Добавить(СтрокаТабличнойЧасти);
		
	КонецЦикла;
		
	ЦенообразованиеСервер.ПолучитьЦеныТабличнойЧастиПоВидуЦен(СтруктураДанных, ТабличнаяЧастьДокумента);
		
	Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		
		Если СтрокаТЧ.Свойство("Характеристика") Тогда
			
			СтруктураПоиска.Вставить("Характеристика", СтрокаТЧ.Характеристика);
			
		КонецЕсли;
		
		СтруктураПоиска.Вставить("ЕдиницаИзмерения", СтрокаТЧ.ЕдиницаИзмерения);
		
		РезультатПоиска = ФормаДокумента.Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаРезультат Из РезультатПоиска Цикл
			СтрокаРезультат.Цена = СтрокаТЧ.Цена;
			РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаРезультат);
			
		КонецЦикла;
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь,
	ПерезаполнитьЦены = Ложь, ТекстПредупреждения = "")
	
	ПараметрыФормыЦеныИВалюта = ЦеныИВалютаКлиентСервер.НовыеПараметрыФормыЦеныИВалюта(Объект, ТолькоПросмотр,
		Компания, ПерезаполнитьЦены, ПересчитатьЦены, ТекстПредупреждения);
	ПараметрыФормыЦеныИВалюта.ВалютаПередИзменением = ВалютаРасчетовПередИзменением;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект,
		Новый Структура("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением));
	ОткрытьФорму("ОбщаяФорма.ЦеныИВалюта", ПараметрыФормыЦеныИВалюта, ЭтотОбъект, , , , ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаСервереБезКонтекста
Функция ПолучитьПроектПоДоговору(Договор)

	Возврат Справочники.Проекты.ПолучитьПроектПоДоговору(Договор);

КонецФункции 


// Обработать изменения по кнопке цены и валюты завершение.
// 
// Параметры:
//  РезультатФормыЦеныИВалюта - см. ЦеныИВалютаКлиентСервер.РезультатФормыЦеныИВалюта
//  ДополнительныеПараметры - Структура
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатФормыЦеныИВалюта, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатФормыЦеныИВалюта) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РезультатФормыЦеныИВалюта.БылиВнесеныИзменения Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Объект.ВалютаДокумента = РезультатФормыЦеныИВалюта.ВалютаДокумента;
	Объект.Курс = РезультатФормыЦеныИВалюта.КурсРасчетов;
	Объект.Кратность = РезультатФормыЦеныИВалюта.КратностьРасчетов;
	Объект.ВидЦен = РезультатФормыЦеныИВалюта.ВидЦен;
	
	// Пересчитываем цены по виду цен.
	Если РезультатФормыЦеныИВалюта.ПерезаполнитьЦены Тогда
		ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтотОбъект, ИмяТЧЗапасы());
	КонецЕсли;
	
	// Пересчитываем цены по валюте.
	Если Не РезультатФормыЦеныИВалюта.ПерезаполнитьЦены И РезультатФормыЦеныИВалюта.ПересчитатьЦены Тогда
		ЦенообразованиеКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтотОбъект,
			ДополнительныеПараметры.ВалютаРасчетовПередИзменением, ИмяТЧЗапасы(),
			РезультатФормыЦеныИВалюта.КурсПересчетаЦен);
	КонецЕсли;
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеДоговораФрагмент(ДоговорПередИзменением)
	
	ДанныеДоговора = ДанныеДоговораДляИзменения(ДатаДокумента, Объект.Договор, Объект.Контрагент);
	
	НеУчитыватьЗаказыПриПередачеНаКомиссию = ДанныеДоговора.НеУчитыватьЗаказыПриПередачеНаКомиссию;
	
	Если НеУчитыватьЗаказыПриПередачеНаКомиссию Тогда
		Для Каждого СтрокаЗапасы Из Объект.Запасы Цикл
			СтрокаЗапасы.Заказ = Неопределено
		КонецЦикла;
		Объект.Заказ = Неопределено
	КонецЕсли;
	
	ВалютаРасчетовПередИзменением = ВалютаРасчетов;
	ВалютаРасчетов = ДанныеДоговора.ВалютаРасчетов;
	
	Объект.Курс      = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс = 0, 1, ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс);
	Объект.Кратность = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность = 0, 1, ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность);

	ИзменилсяВидЦен = Объект.ВидЦен <> ДанныеДоговора.ВидЦен 
		И ЗначениеЗаполнено(ДанныеДоговора.ВидЦен);
		
	НовыйДоговорИВалютаРасчетов = ЗначениеЗаполнено(Объект.Договор) И ЗначениеЗаполнено(ВалютаРасчетов) 
		И Объект.Договор <> ДоговорПередИзменением И ВалютаРасчетовПередИзменением <> ДанныеДоговора.ВалютаРасчетов;
		
	ОткрытьФормуЦеныИВалюты = НовыйДоговорИВалютаРасчетов И Объект.ВалютаДокумента <> ДанныеДоговора.ВалютаРасчетов
		И Объект.Запасы.Количество() > 0;
		
	ДанныеДоговора.Вставить("ИзменилсяВидЦен", ИзменилсяВидЦен);
	
	Если ИзменилсяВидЦен Тогда Объект.ВидЦен = ДанныеДоговора.ВидЦен КонецЕсли;
	Объект.ВалютаДокумента = ДанныеДоговора.ВалютаРасчетов;
	
	Если ОткрытьФормуЦеныИВалюты Тогда
		
		ТекстПредупреждения = "";
		
		Если ИзменилсяВидЦен Тогда
			ТекстПредупреждения = НСтр("ru = 'Договор с контрагентом предусматривает условия цен, 
				|отличные от установленных в документе.
				|Возможно, необходимо перезаполнить цены.'") + Символы.ПС + Символы.ПС;
		КонецЕсли;
		
		ТекстПредупреждения = ТекстПредупреждения + НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом.
									|Необходимо проверить валюту документа.'");
		ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаРасчетовПередИзменением, Истина, ИзменилсяВидЦен, ТекстПредупреждения);
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Договор) 
		И ИзменилсяВидЦен Тогда
		
		ПересчетНеобходим = Объект.Запасы.Количество() > 0;
		
		Объект.ВидЦен	= ДанныеДоговора.ВидЦен;
		ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
			УчетВалютныхОпераций);
		
		Если ПересчетНеобходим Тогда
			
			Сообщение = НСтр("ru = 'Договор с контрагентом предусматривает вид цен, отличный от установленного в документе.
									|Пересчитать документ в соответствии с договором?'");
										
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьИзменениеДоговораФрагментЗавершение", ЭтотОбъект,
				Новый Структура("ДоговорПередИзменением, ВалютаРасчетовПередИзменением, СтруктураДанные",
				ДоговорПередИзменением, ВалютаРасчетовПередИзменением, ДанныеДоговора)), Сообщение,
				РежимДиалогаВопрос.ДаНет);
			
			ОпределитьВидимостьЗаказовПокупателяКомиссия(ЭтотОбъект);
			
			Возврат;
		
		КонецЕсли;
		
	Иначе
		
		ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
			УчетВалютныхОпераций);
		
	КонецЕсли;
	
	ОпределитьВидимостьЗаказовПокупателяКомиссия(ЭтотОбъект);
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьИОстаткиВзаиморасчетов()
	
	Элементы.ОстатокВзаиморасчетов.Видимость = НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.Контрагент.АвтоМаксимальнаяШирина = Не Элементы.ОстатокВзаиморасчетов.Видимость;
	
	Если НЕ Элементы.ОстатокВзаиморасчетов.Видимость Тогда
		// Только для новых объектов
		Возврат;
	КонецЕсли;
	
	Элементы.ОстатокВзаиморасчетов.Заголовок = РаботаСКонтрагентамиУНФ.ЗаголовокНадписиВзаиморасчетов(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеДоговораФрагментЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтотОбъект, ИмяТЧЗапасы());
		ОбновитьПодвалФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеКонтрагентаДляИзменения(Знач Дата, Знач Контрагент, Знач Организация)
	
	УстановитьВидимостьДоговора();
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
	
	ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПоКонтрагентуПоОрганизации(Контрагент, Организация,
		СписокВидовДоговоров);
	
	Результат = Новый Структура;
	
	Результат.Вставить("Договор", ДоговорПоУмолчанию);
	ДанныеДоговора = ДанныеДоговораДляИзменения(Дата, ДоговорПоУмолчанию, Контрагент);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат, ДанныеДоговора);
	
	Результат.Вставить("КонтактноеЛицоПодписант", Контрагент.КонтактноеЛицоПодписант);
	Результат.Вставить("УчетЦенКонтрагентов", ПолучитьФункциональнуюОпцию("УчетЦенКонтрагентов"));
	
	// Прослеживаемость
	Результат.Вставить(
	"РеализацияВЕАЭС",
	Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Объект.Контрагент));
	РеализацияВЕАЭС = КэшЗначений.РеализацияВЕАЭС;
	// Конец Прослеживаемость
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеДоговораДляИзменения(Знач Дата, Знач Договор, Знач Контрагент)

	Результат = Новый Структура;
	Результат.Вставить("ВалютаРасчетов", Договор.ВалютаРасчетов);
	Результат.Вставить("ВалютаРасчетовКурсКратность", РаботаСКурсамиВалют.ПолучитьКурсВалюты(Договор.ВалютаРасчетов, Дата)); 
	Результат.Вставить("РасчетыВУсловныхЕдиницах", Договор.РасчетыВУсловныхЕдиницах);
	Результат.Вставить("ВидЦен", Договор.ВидЦен);
	Результат.Вставить("НеУчитыватьЗаказыПриПередачеНаКомиссию", Ложь);
	Если ЗначениеЗаполнено(Договор) Тогда
		Результат.НеУчитыватьЗаказыПриПередачеНаКомиссию = Договор.НеУчитыватьЗаказыПриПередачеНаКомиссию;
	КонецЕсли;
	Возврат Результат;

КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	УстановитьУсловноеОформлениеЗаказов();
	НоменклатураВДокументахСервер.ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристик(ЭтаФорма);
	
	ЦенообразованиеСервер.УстановитьУсловноеОформлениеМинимальнойЦены(УсловноеОформление, "Запасы", ?(КэшЗначений.Свойство("ИспользоватьМинимальныеЦены"), КэшЗначений.ИспользоватьМинимальныеЦены, Ложь));

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеЗаказов()

	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.Заказ",
		Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.Заказ",
		Неопределено, ВидСравненияКомпоновкиДанных.Заполнено);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыЗаказ");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Авто>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста",
		ЦветаСтиля.НедоступныеДанныеЦвет);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНастройкиИзмененияКоличества()
	
	НастройкиКоличества = ДокументыУНФКлиентСервер.ПараметрыСбросаКоличества();
	ДокументыУНФ.ЗаполнитьНастройкиКоличества(НастройкиКоличества);
	Возврат НастройкиКоличества;
	
КонецФункции

// ПодключаемоеОборудование
&НаСервереБезКонтекста
Процедура ДополнитьДанныеПоШтрихкодам(Контекст)
	
	// Преобразование весовых штрихкодов.
	Для Каждого ТекШтрихкод Из Контекст.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихкодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодамВМассиве(Контекст.МассивШтрихкодов);
	
	Для Каждого ТекШтрихкод Из Контекст.МассивШтрихкодов Цикл
		
		МассивДанныхШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если МассивДанныхШтрихкода <> Неопределено
			И МассивДанныхШтрихкода.Количество() <> 0 Тогда
			
			Для Каждого ДанныеШтрихкода Из МассивДанныхШтрихкода Цикл
				
				ДанныеНоменклатуры = Новый Структура();
				ДанныеНоменклатуры.Вставить("Организация", Контекст.Организация);
				ДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
				ДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
				ДанныеНоменклатуры.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
				ДанныеНоменклатуры.Вставить("Контрагент", Контекст.Контрагент);
				ДанныеНоменклатуры.Вставить("ДатаОбработки", Контекст.Дата);
				Если ЗначениеЗаполнено(Контекст.ВидЦен) Тогда
					ДанныеНоменклатуры.Вставить("ДатаОбработки", Контекст.Дата);
					ДанныеНоменклатуры.Вставить("ВалютаДокумента", Контекст.ВалютаДокумента);
					ДанныеНоменклатуры.Вставить("ВидЦен", Контекст.ВидЦен);
					Если ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения)
						И ТипЗнч(ДанныеШтрихкода.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
						ДанныеНоменклатуры.Вставить("Коэффициент", ДанныеШтрихкода.ЕдиницаИзмерения.Коэффициент);
					Иначе
						ДанныеНоменклатуры.Вставить("Коэффициент", 1);
					КонецЕсли;
				КонецЕсли;   
				
				// МинимальныеЦены
				ДанныеНоменклатуры.Вставить("СтруктурнаяЕдиница", 	Неопределено);
				// Конец МинимальныеЦены
				
				ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(ДанныеНоменклатуры));
				
				Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
					ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Контекст.Вставить("ДанныеПоШтрихкодам", ДанныеПоШтрихкодам);
	
	ДополнитьДанныеПоШтрихкодамОтборТипНоменклатуры(Контекст);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьДанныеПоШтрихкодамОтборТипНоменклатуры(Знач Контекст)
	
	Для Каждого ТекПараметр Из Метаданные.Документы.ПриходнаяНакладная.ТабличныеЧасти.Запасы.Реквизиты.Номенклатура.ПараметрыВыбора Цикл
		Если ТекПараметр.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(ТекПараметр.Значение) = Тип("ФиксированныйМассив") Тогда
				Контекст.Вставить("ОтборТипНоменклатуры", ТекПараметр.Значение);
			Иначе
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(ТекПараметр.Значение);
				Контекст.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов)
	
	Результат = Новый Структура;
	Результат.Вставить("НеизвестныеШтрихкоды", Новый Массив);
	Результат.Вставить("ШтрихкодыНекорректногоТипа", Новый Массив);
	Результат.Вставить("ДобавленныеСтроки", Новый Массив);
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	Контекст.Вставить("Организация", Объект.Организация);
	Контекст.Вставить("ВидЦен", Объект.ВидЦен);
	Контекст.Вставить("Дата", Объект.Дата);
	Контекст.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	Контекст.Вставить("Контрагент", Объект.Контрагент);
	
	ДополнитьДанныеПоШтрихкодам(Контекст);
	
	Для Каждого ТекШтрихкод Из Контекст.МассивШтрихкодов Цикл
		
		ДанныеШтрихкода = Контекст.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода.Количество() > 1 Тогда
			
			ПараметрыОткрытия = Новый Структура("МассивНоменклатуры, ТекШтрихкод", ДанныеШтрихкода, ТекШтрихкод);
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоДаннымШтрихкодовЗавершение", ЭтотОбъект, Новый Структура("СтруктураДанные",Контекст));
			
			ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ДублиНоменклатурыПоШтрихКодам", ПараметрыОткрытия, ЭтаФорма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Продолжить;
		КонецЕсли;
		
		Если ДанныеШтрихкода <> Неопределено И ДанныеШтрихкода.Количество() = 0 Тогда
			
			Результат.НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
			
		ИначеЕсли Контекст.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено Тогда
			
			ОписаниеШтрихкодаНекорректногоТипа = Новый Структура;
			ОписаниеШтрихкодаНекорректногоТипа.Вставить("Штрихкод", ТекШтрихкод.Штрихкод);
			ОписаниеШтрихкодаНекорректногоТипа.Вставить("Номенклатура", ДанныеШтрихкода[0].Номенклатура);
			ОписаниеШтрихкодаНекорректногоТипа.Вставить("ТипНоменклатуры", ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры);
			
			Результат.ШтрихкодыНекорректногоТипа.Добавить(ОписаниеШтрихкодаНекорректногоТипа);
		
		Иначе
			
			ДанныеШтрихкода = ДанныеШтрихкода[0];
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
			ПараметрыПоиска.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			ПараметрыПоиска.Вставить("ЕдиницаИзмерения", ДанныеШтрихкода.ЕдиницаИзмерения);
			
			НайденныеСтроки = Объект.Запасы.НайтиСтроки(ПараметрыПоиска);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				НоваяСтрока = Объект.Запасы.Добавить();
				
				ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Заказ", "ПоложениеЗаказа");
				
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				
				Если ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
					НоваяСтрока.ЕдиницаИзмерения = ДанныеШтрихкода.ЕдиницаИзмерения;
				Иначе
					НоваяСтрока.ЕдиницаИзмерения = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения;
				КонецЕсли;
				
				НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
				
				Если КэшЗначений.ИспользоватьМинимальныеЦены
					И НоваяСтрока.Свойство("МинимальнаяЦена")
					И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("МинимальнаяЦена") Тогда
					
					НоваяСтрока.МинимальнаяЦена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.МинимальнаяЦена;
					
				КонецЕсли;
				
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
				
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				
				// Прослеживаемость
				НоваяСтрока.СтранаПроисхождения = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтранаПроисхождения;
				Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
					НоваяСтрока.ПрослеживаемыйТовар = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПрослеживаемыйТовар;
					НоваяСтрока.ПрослеживаемыйКомплект = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПрослеживаемыйКомплект;
					ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, НоваяСтрока);
					НоваяСтрока.КодТНВЭД = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТоварнаяНоменклатураВЭД;
				Иначе
					НоваяСтрока.ПрослеживаемыйТовар = Ложь;
					НоваяСтрока.ПрослеживаемыйКомплект = Ложь;
				КонецЕсли;
				Если НЕ НоваяСтрока.ПрослеживаемыйТовар Тогда
					ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("НомерГТД", НоваяСтрока.НомерГТД);
				КонецЕсли;
				// Конец Прослеживаемость
				
			Иначе
				
				НоваяСтрока = НайденныеСтроки[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
				
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоДаннымШтрихкодовЗавершение(СтруктураНоменклатуры, Параметры) Экспорт
	
	Если СтруктураНоменклатуры = Неопределено Тогда Возврат КонецЕсли;
	
	ДанныеШтрихкода = СтруктураНоменклатуры.МассивНоменклатуры[0];
	ТекШтрихкод = СтруктураНоменклатуры.ТекШтрихкод;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	СтруктураДанные = Параметры.СтруктураДанные;
	
	Если СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено Тогда
		
		ОписаниеШтрихкодаНекорректногоТипа = Новый Структура;
		ОписаниеШтрихкодаНекорректногоТипа.Вставить("Штрихкод", ТекШтрихкод.Штрихкод);
		ОписаниеШтрихкодаНекорректногоТипа.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
		ОписаниеШтрихкодаНекорректногоТипа.Вставить("ТипНоменклатуры", ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры);
		
		ШтрихкодыНекорректногоТипа.Добавить(ОписаниеШтрихкодаНекорректногоТипа);
		
	Иначе
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
		ПараметрыПоиска.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
		ПараметрыПоиска.Вставить("ЕдиницаИзмерения", ДанныеШтрихкода.ЕдиницаИзмерения);
		
		НайденныеСтроки = Объект.Запасы.НайтиСтроки(ПараметрыПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			НоваяСтрока = Объект.Запасы.Добавить();
			
			ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Заказ", "ПоложениеЗаказа");
			
			НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
			НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
			НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
			НоваяСтрока.Количество = ТекШтрихкод.Количество;
			
			Если ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
				НоваяСтрока.ЕдиницаИзмерения = ДанныеШтрихкода.ЕдиницаИзмерения;
			Иначе
				НоваяСтрока.ЕдиницаИзмерения = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения;
			КонецЕсли;
			
			НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
			
			Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			
			// Прослеживаемость
			НоваяСтрока.СтранаПроисхождения = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтранаПроисхождения;
			Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
				НоваяСтрока.ПрослеживаемыйТовар = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПрослеживаемыйТовар;
				НоваяСтрока.ПрослеживаемыйКомплект = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПрослеживаемыйКомплект;
				ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, НоваяСтрока);
			Иначе
				НоваяСтрока.ПрослеживаемыйТовар = Ложь;
				НоваяСтрока.ПрослеживаемыйКомплект = Ложь;
			КонецЕсли;
			Если НЕ НоваяСтрока.ПрослеживаемыйТовар Тогда
				ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("НомерГТД", НоваяСтрока.НомерГТД);
			КонецЕсли; 
			// Конец Прослеживаемость
			
		Иначе
			
			НоваяСтрока = НайденныеСтроки[0];
			НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
			
			Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов) Экспорт
	
	Модифицированность = Истина;
	
	РезультатЗаполнения = ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов);
	НеизвестныеШтрихкоды = РезультатЗаполнения.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа = РезультатЗаполнения.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда

		ОписаниеОповещения = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды);

		ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры", ПараметрыФормы,
			ЭтотОбъект, , , , ОписаниеОповещения);

		Возврат;

	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для Каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры
// Конец ПодключаемоеОборудование

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
&НаСервере
Процедура ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	ТоварыДобавлены = Ложь;
	Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТовары = Объект.Запасы.Добавить();
		НоваяСтрокаТовары.Номенклатура = СтрокаТаблицы.Номенклатура;
		ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрокаТовары, Объект, "Заказ", "ПоложениеЗаказаПокупателя");
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			НоваяСтрокаТовары.Характеристика = СтрокаТаблицы.Характеристика;
			
		КонецЕсли;
		
		НоваяСтрокаТовары.Цена = СтрокаТаблицы.Цена;
		НоваяСтрокаТовары.Количество = СтрокаТаблицы.Количество;
		
		Если ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения") Тогда
			
			НоваяСтрокаТовары.ЕдиницаИзмерения = СтрокаТаблицы.ЕдиницаИзмерения;
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрокаТовары.Номенклатура) Тогда
			
			НоваяСтрокаТовары.ЕдиницаИзмерения = СтрокаТаблицы.Номенклатура.ЕдиницаИзмерения;
			
		КонецЕсли;
		
		ТоварыДобавлены = Истина;
		
	КонецЦикла;
	
	Если ТоварыДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(АдресЗагруженныхДанных) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных);
	
	Для каждого СтрокаТаблицы Из Объект.Запасы Цикл 
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТаблицы);
	КонецЦикла;
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда
		
		Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда
		
			ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
			ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
			
		ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда
			
			ДлительнаяОперация = ОбработатьПодготовленныеДанныеНоменклатуры(РезультатЗагрузки);
			
			СтруктураПараметров = Новый Структура;
			ПроверитьНеобходимостьПодключенияОбработчикаОжидания(ДлительнаяОперация, СтруктураПараметров);
			
		КонецЕсли;
		
	Иначе
		
		ЗагрузитьИзФайлаЗавершение(РезультатЗагрузки);
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Функция ОбработатьПодготовленныеДанныеНоменклатуры(РезультатЗагрузки)
	
	ПараметрыВызоваСервера = Новый Структура;
	ПараметрыВызоваСервера.Вставить("НастройкиЗагрузкиДанных", РезультатЗагрузки.НастройкиЗагрузкиДанных);
	ПараметрыВызоваСервера.Вставить("ТаблицаСопоставленияДанных", ДанныеФормыВЗначение(РезультатЗагрузки.ТаблицаСопоставленияДанных, Тип("ТаблицаЗначений")));
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Подсистема ЗагрузкаДанныхИзВнешнегоИсточника: Выполнение серверного метода загрузки результата'");
	ПараметрыВыполнения.ЗапуститьНеВФоне    = Ложь;
	ПараметрыВыполнения.ЗапуститьВФоне      = Истина;	
	
	ИмяМетода = "Справочники.Номенклатура.ОбработатьПодготовленныеДанные";
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыВызоваСервера, ПараметрыВыполнения);
	
КонецФункции

&НаСервере
Процедура ОбработатьПодготовленныеДанные(АдресРезультатаЗагрузки)
	
	Попытка
		
		НачатьТранзакцию();
		
		РезультатЗагрузки = ПолучитьИзВременногоХранилища(АдресРезультатаЗагрузки);
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = Объект.Запасы.Добавить();
				
				ИменаСвойств = "Номенклатура, Количество, ЕдиницаИзмерения, Заказ";
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
					
					ИменаСвойств = ИменаСвойств + ", Характеристика";
					
				КонецЕсли;
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
					
					ИменаСвойств = ИменаСвойств + ", Партия";
					
				КонецЕсли;
				
		
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, ИменаСвойств);
				ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Заказ", "ПоложениеЗаказа");
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "Цена_ВходящиеДанные")
					И ЗначениеЗаполнено(СтрокаТаблицы.Цена_ВходящиеДанные) Тогда
						НоваяСтрока.Цена = СтрокаТаблицы.Цена_ВходящиеДанные;
					НоваяСтрока.Сумма = НоваяСтрока.Цена * НоваяСтрока.Количество;
				ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.Сумма_ВходящиеДанные) Тогда
					НоваяСтрока.Сумма = СтрокаТаблицы.Сумма_ВходящиеДанные;
					НоваяСтрока.Цена = НоваяСтрока.Сумма / НоваяСтрока.Количество;
				КонецЕсли;				
				
			КонецЕсли;
			
			// Серии номенклатуры
			Если ИспользоватьСерииНоменклатурыОстатки<>Неопределено Тогда
				СерииНоменклатурыУНФКлиентСервер.ОбновитьСерииНоменклатурыКоличество(Объект, НоваяСтрока,,"КлючСвязи");
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка данных'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы", Истина);

	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияФоновогоЗадания(Прогресс, ДополнительныеПараметры) Экспорт
	
	Если НЕ Прогресс = Неопределено Тогда
		ОбработатьПодготовленныеДанные(Прогресс.АдресРезультата);
		ОбновитьПодвалФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеобходимостьПодключенияОбработчикаОжидания(ДлительнаяОперация, СтруктураПараметров = Неопределено)
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ПослеВыполненияФоновогоЗадания(ДлительнаяОперация, СтруктураПараметров);
		
	Иначе
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеВыполненияФоновогоЗадания", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Идет загрузка данных.'");
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);		
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника

// СтандартныеПодсистемы.Свойства
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

//@skip-check module-unused-method
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства


#Область АвтоподборКонтактов

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_ОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_АвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, Параметры, Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеВнешнимВидомФормы

&НаСервере
Процедура УстановитьВидимостьИДоступность(ЭтоНовыйОбъект = Ложь)

	РазрешеноРедактированиеЦенДокументов = УправлениеДоступомУНФ.РазрешеноРедактированиеЦенДокументов();
	
	ИтогВсего = Объект.Запасы.Итог("Сумма");
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, ИмяТЧЗапасы());
	Элементы.ЗапасыЦена.ТолькоПросмотр 		= НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСумма.ТолькоПросмотр 	= НЕ РазрешеноРедактированиеЦенДокументов;
	
	Если Не ЭтоНовыйОбъект Тогда
		ОпределитьВидимостьЗаказовПокупателяКомиссия(ЭтотОбъект);
	КонецЕсли;
	
	// Прослеживаемость
	ПрослеживаемостьФормыКлиентСерверУНФ.НастроитьВидимостьКолонокРНПТ(ЭтотОбъект);
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьВидимостьЗаказовПокупателяКомиссия(Форма)
	
	Если Форма.Объект.ПоложениеЗаказа = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда 
		Форма.Элементы.ГруппаЗаказОснование.Видимость = Истина;
	Иначе
		Форма.Элементы.ЗапасыЗаказ.Видимость = Истина;
	КонецЕсли;
	
	НеУчитыватьЗаказыПриПередачеНаКомиссию = Форма.НеУчитыватьЗаказыПриПередачеНаКомиссию;
	
	Форма.Элементы.ЗапасыКонтекстноеМенюШапкаТабличнаяЧасть.Доступность = Не НеУчитыватьЗаказыПриПередачеНаКомиссию;
	
	Если Форма.Объект.ПоложениеЗаказа = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда 
		Форма.Элементы.ГруппаЗаказОснование.Видимость = Не НеУчитыватьЗаказыПриПередачеНаКомиссию Или (НеУчитыватьЗаказыПриПередачеНаКомиссию И ЗначениеЗаполнено(Форма.Объект.Заказ));
	Иначе
		ЕстьЗаказВТабличнойЧасти = Ложь;
		Для Каждого СтрокаТабличнойЧасти Из Форма.Объект.Запасы Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Заказ) Тогда
				ЕстьЗаказВТабличнойЧасти = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Форма.Элементы.ЗапасыЗаказ.Видимость = Не НеУчитыватьЗаказыПриПередачеНаКомиссию Или (НеУчитыватьЗаказыПриПередачеНаКомиссию И ЕстьЗаказВТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ГрупповоеИзменениеСтрок

&НаСервере
Процедура ЗаполнитьСписокДействий(ИмяТЧ)
	
	РазрешеноРедактированиеЦенДокументов = УправлениеДоступомУНФ.РазрешеноРедактированиеЦенДокументов();
	
	Если ИмяТЧ = ИмяТЧЗапасы() Тогда
		
		Действия = Новый Массив;
		Если РазрешеноРедактированиеЦенДокументов Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент);
		КонецЕсли;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОкруглитьСуммы);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду);
		Если РазрешеноРедактированиеЦенДокументов Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЦены);
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству);
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам);
		КонецЕсли;
		
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки);
		
		Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Очистить();
		Для каждого Действие Из Действия Цикл
			ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
			Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ)
	
	Если ИмяТЧ = ИмяТЧЗапасы() Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", ИмяТЧЗапасы());
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаЗапасыИзменениеСтрок);
		НаборЭлементов.Вставить("КнопкаИзменитьСтроки",    Элементы.ЗапасыИзменитьСтроки);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.ЗапасыУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.ЗапасыСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ЗапасыВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.ЗапасыПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.ЗапасыНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.ЗапасыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.ЗапасыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.ЗапасыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         ЗапасыИзменениеСтрокОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(ЗапасыИзменениеСтрокОбъектИзмененийЭлемент),
			Элементы[ЗапасыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	КонецЕсли;
	
	Возврат НаборЭлементов;
	
КонецФункции


#КонецОбласти

#Область Константы

&НаКлиентеНаСервереБезКонтекста
Функция ИмяТЧЗапасы()
	Возврат "Запасы"; // Не локализуется
КонецФункции

#КонецОбласти

#КонецОбласти 

#Область Прослеживаемость

&НаКлиенте
Процедура ОбработкаВыбораРНПТННаКлиенте(ВыбранноеЗначение)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторСтроки) Тогда
			СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;
		ОбработкаВыбораРНПТННаСервере(СтрокаТабличнойЧасти.ИдентификаторСтроки, ВыбранноеЗначение);
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбработкаВыбораГТДНаКлиенте(ВыбранноеЗначение)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		// Если в результате выбора пришло только значение,
		// то переложим его в структуру.
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.НомераГТД") Тогда
			ВыбранноеЗначение = Новый Структура("НомерГТД", ВыбранноеЗначение);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
			
			ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
			Если ДатаГТД > КонецДня(Объект.Дата) Тогда
				
				ТекстСообщения = НСтр("ru ='Выбранная ГТД датирована более поздней датой, чем текущий документ'");
				ТекстПутьКДанным = СтрШаблон("Объект.Запасы[%1].РНПТ", СтрокаТабличнойЧасти.ПолучитьИдентификатор());
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , ТекстПутьКДанным);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораРНПТННаСервере(ИдентификаторСтроки, ВыбранноеЗначение)
	
	ПрослеживаемостьФормыУНФ.ОбработкаВыбораРНПТН(ЭтотОбъект, ИдентификаторСтроки, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСвязанныеЗаписи(СтрокаЗапасы)
	
	СтруктураОтбора = Новый Структура("ИдентификаторСтроки", СтрокаЗапасы.ИдентификаторСтроки);
	МассивСтрокСведенияПрослеживаемости = Объект.СведенияПрослеживаемости.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаТЧ Из МассивСтрокСведенияПрослеживаемости Цикл
		Объект.СведенияПрослеживаемости.Удалить(СтрокаТЧ);
	КонецЦикла;
	ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаЗапасы);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПризнакПрослеживаемости()
	
	Если Не КэшЗначений.Свойство("ВестиУчетПрослеживаемыхТоваров") Тогда
		КэшЗначений.Вставить("ВестиУчетПрослеживаемыхТоваров", ПрослеживаемостьУНФ.ВедетсяУчетПрослеживаемыхТоваров(Объект.Дата));
	КонецЕсли;
	ИспользуетсяПрослеживаемость = КэшЗначений.ВестиУчетПрослеживаемыхТоваров;
	ПрослеживаемостьФормыУНФ.ОбновитьПризнакПрослеживаемости(Объект.Запасы, Объект.СведенияПрослеживаемости, ИспользуетсяПрослеживаемость);
	Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеПрослеживаемости()
	
	ПрослеживаемостьФормыУНФ.ПриСозданииФормы(ЭтотОбъект, КэшЗначений);
	Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыПрослеживаемостиПриИзмененииКонтрагента(СтруктураДанные);
	
	Если КэшЗначений.РеализацияВЕАЭС <> СтруктураДанные.РеализацияВЕАЭС Тогда
		КэшЗначений.Вставить("РеализацияВЕАЭС", СтруктураДанные.РеализацияВЕАЭС);
		РеализацияВЕАЭС = СтруктураДанные.РеализацияВЕАЭС;
		Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
			ПрослеживаемостьФормыКлиентСерверУНФ.НастроитьВидимостьКолонокРНПТ(
				ЭтотОбъект,
				,,,
				КэшЗначений.РеализацияВЕАЭС);
			
			Объект.СведенияПрослеживаемости.Очистить();
			ОбновитьОтображениеПрослеживаемости();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

