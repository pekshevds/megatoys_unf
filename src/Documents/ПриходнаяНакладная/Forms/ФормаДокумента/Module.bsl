
#Область ОписаниеПеременных

&НаКлиенте
Перем КопированиеСтрокиЗапасы;

&НаКлиенте
Перем КопированиеСтрокиРасходы;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.ПриходнаяНакладная.ТабличныеЧасти.Запасы, НастройкиЗагрузкиДанных, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиУНФ.ЗаполнитьДополнительныеПараметры(Объект, "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	УстановитьУсловноеОформлениеФормы();
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	НапоминанияПользователяУНФ.УстановитьОтображениеКомандОрганайзера(Элементы);
	ЭлектроннаяПочтаУНФ.УстановитьОтображениеКомандОтправкиСообщений(Элементы);
	
	ДоступенОрдерныйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныйСклад");
	
	// Прослеживаемость
	Если КэшЗначений = Неопределено Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	Если Объект.Контрагент.Пустая() Тогда
		КэшЗначений.Вставить("ПоставщикРезидентТаможенногоСоюза", Ложь);
		ПоставщикРезидентТаможенногоСоюза = КэшЗначений.ПоставщикРезидентТаможенногоСоюза;
	Иначе
		КэшЗначений.Вставить("ПоставщикРезидентТаможенногоСоюза", Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Объект.Контрагент));
		ПоставщикРезидентТаможенногоСоюза = КэшЗначений.ПоставщикРезидентТаможенногоСоюза;
	КонецЕсли;
	Если Объект.Ссылка.Пустая() Тогда
		ОбновитьОтображениеПрослеживаемости();
	КонецЕсли;
	
	КэшЗначений.Вставить("ЗапретКомиссионныхПартийБезВладельца", Константы.ЗапретКомиссионныхПартийБезВладельца.Получить());
	
	УстановитьПредставлениеНадписиУведомлениеОВвозе();
	
	// Конец Прослеживаемость
	
	НаборСвойств_Документ_ПриходнаяНакладная = УправлениеСвойствами.НаборСвойствПоИмени("Документ_ПриходнаяНакладная");
	КэшЗначений.Вставить("НаборСвойств_Документ_ПриходнаяНакладная", НаборСвойств_Документ_ПриходнаяНакладная);
	
	// Запомним предопределенные значения
	ВариантЗаполненияРасшифровкиПросмотр = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияРасшифровкиПлатежа.Просмотр");
	ВариантЗаполненияРасшифровкиВручную = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияРасшифровкиПлатежа.Вручную");
	
	СпособыЗачетаВручную = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Вручную");
	СпособыЗачетаАвто = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто");
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	ЭтотОбъект.ОснованиеСоздания = Параметры.Основание;
	ДатаПриСозданииНаСервере = Объект.Дата;
	
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	Контрагент = Объект.Контрагент;
	Договор = Объект.Договор;
	Заказ = Объект.Заказ;
	ВалютаРасчетов = Объект.Договор.ВалютаРасчетов;
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	НациональнаяВалютаКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НациональнаяВалюта, ДатаДокумента);
	КурсНациональнаяВалюта = НациональнаяВалютаКурсКратность.Курс;
	КратностьНациональнаяВалюта = НациональнаяВалютаКурсКратность.Кратность;
	СпособЗаполненияСтавкиНДС = Справочники.ДоговорыКонтрагентов.СпособЗаполненияСтавкиНДСПоДоговору(Договор);
	ИспользоватьПроекты = ПолучитьФункциональнуюОпцию("УчетПоПроектам");
	
	Если Объект.Ссылка.Пустая() Тогда
		
		// Установить надписи счет-фактура и основание
		СчетФактураСсылка = СчетаФактурыУНФ.ПолучитьПодчиненныйСчетФактуру(Объект.Ссылка, Истина, Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура);
		Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(СчетФактураСсылка, Истина,
		, Объект.ЭтоУниверсальныйДокумент, Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура);
		КэшЗначений.Вставить("СчетФактураСсылка", ?(ТипЗнч(СчетФактураСсылка) = Тип("Структура"), СчетФактураСсылка.Ссылка, Неопределено));
		
		Если Параметры.Свойство("ВидОперацииВозврат") Тогда
			УстановитьВидОперацииВозврата();
		КонецЕсли;
		ПодходящееОснованиеДляЗаполненияНДС = Не ЗначениеЗаполнено(Параметры.Основание) ИЛИ ТипЗнч(Параметры.Основание) = Тип("СправочникСсылка.ДоговорыКонтрагентов");
		Если ПодходящееОснованиеДляЗаполненияНДС
			И Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования)
			И Не ЗаполнениеОбъектовУНФ.ЭтоЗаполнениеПоШаблону(Параметры.ЗначенияЗаполнения) Тогда
			ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС(Истина);
			НалогиУНФ.ЗаполнитьНДСВключенВСтоимостьВДокументе(Объект);
		КонецЕсли;
		
		СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер();
		ОбновитьРеквизитыОбменаСГИСМ();
		УстановитьВидимостьПредупрежденияПодчиненныеДокументы();
		
	КонецЕсли;
	
	РаботаСФормойДокумента.НастроитьГруппуЦеныИВалюты(ЭтотОбъект);
	
	ИнициализироватьРасхожденияВНовомПоступленииОтПоставщика();
	ОбновитьРасхождения();
	
	ЗаполнитьСписокВыбораВидОперации();
	
	// Обновим подвал формы.
	ИтогВсего = Объект.Запасы.Итог("Всего") + Объект.Расходы.Итог("Всего");
	ИтогСуммаНДС = Объект.Запасы.Итог("СуммаНДС") + Объект.Расходы.Итог("СуммаНДС");
	
	// Сформируем надпись цены и валюты.
	УчетВалютныхОпераций = Константы.ФункциональнаяУчетВалютныхОпераций.Получить();
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	
	// Наборы
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЭтоВозвратОтПокупателя(Объект.ВидОперации) Тогда
		ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы);
		ОбновитьПризнакиНабора(Объект.Запасы);
	КонецЕсли;
	// Конец Наборы
	
	НеУчитыватьЗаказыПриПередачеНаКомиссию = ?(ЗначениеЗаполнено(Объект.Договор), Объект.Договор.НеУчитыватьЗаказыПриПередачеНаКомиссию, Ложь);
	
	ЭтоНовыйОбъект = ЗначениеЗаполнено(Объект.Ссылка);
	
	// ГТД и РНПТ
	ИменаТЧИПолей = ГрузовыеТаможенныеДекларацииСервер.ИменаТЧИПолейДляТаблицыЗапасы_БазовыеПоляСПрослеживаемостью();
	ГрузовыеТаможенныеДекларацииСервер.ПриСозданииНаСервереДляДокументаСПрослеживаемостью(ЭтаФорма, ИменаТЧИПолей, КэшЗначений);
	// Конец ГТД и РНПТ
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			Объект.ПоложениеДокументаПоступления = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
		КонецЕсли;
		
		УчетОстатковПоСкладскимОрдерам = УчетОстатковВРазрезеСкладскихОрдеров();
		
	КонецЕсли;

	Пользователь = Пользователи.ТекущийПользователь();
	
	ПоказыватьКолонкуСодержаниеВПриходнойНакладнойЗапасы = 
		УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,
			"ПоказыватьКолонкуСодержаниеВПриходнойНакладнойЗапасы");
	ПоказыватьКолонкуСодержаниеВПриходнойНакладнойРасходы = 
		УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,
			"ПоказыватьКолонкуСодержаниеВПриходнойНакладнойРасходы");
	
	УстановитьВидимостьИДоступность(,ЭтоНовыйОбъект);
	Если Объект.Ссылка.Пустая() Тогда // В ином случае будет процедура будет вызвана ПриЧтенииНаСервере
		УстановитьСвязиПараметровВыбораДоступныеТипы();
	КонецЕсли;
	
	ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойСклад");
	ОсновнойСклад = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
	
	ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновноеПодразделение");
	ОсновноеПодразделение = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
	
	КонтрольНаСкладеОтключен = НЕ Константы.КонтролироватьОстаткиПриПроведении.Получить();
	
	КэшЗначений.Вставить("ВерсияПодчиненногоСчетФактуры", Неопределено);
	КэшЗначений.Вставить("МодифицированностьФормы", Ложь);
	КэшЗначений.Вставить("ОбрабатываемыеРеквизиты", Новый Массив);
	КэшЗначений.Вставить("Заказы", Новый Соответствие);
	ЗаполнитьСоответствиеЗаказов();
	ОбновитьВидимостьПоляЗаказыПокупателей(ЭтотОбъект);
	
	// Ячейки
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		КэшЗначений.Вставить("УчетПоЯчейкам", ПолучитьФункциональнуюОпцию("УчетПоЯчейкам"));
		ОбновитьДоступностьЯчеек();
		ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	КонецЕсли; 
	// Конец Ячейки
	
	Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Объект.ДокументОснование);
	ЗаполнитьСписокДокументОснование();
	
	// Установка видимости договора.
	УстановитьВидимостьДоговора();
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, ИмяТЧЗапасы());
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, ИмяТЧРасходы());
	
	АвтоподборКонтактов.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект);
	// Доставка
	УстановитьВидимостьДанныхПоДоставке();

	// ГрупповоеИзменениеСтрок
	ЗаполнитьСписокДействий(ИмяТЧЗапасы());
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧЗапасы()), ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
	ЗапасыИзменениеСтрокДействиеПриОткрытии = ЗапасыИзменениеСтрокДействие;
	УстановитьПометку(ИмяТЧЗапасы(), Истина);
	
	Если ЗапасыИзменениеСтрокДействиеПриОткрытии = Перечисления.ДействияГрупповогоИзмененияСтрок.СоздатьПартииНоменклатуры Тогда
		ЗапасыИзменениеСтрокЗначение = НСтр("ru = 'Партия создана автоматически'");
	КонецЕсли;
	
	ЗаполнитьСписокДействий(ИмяТЧРасходы());
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧРасходы()), ЭтотОбъект.РасходыИзменениеСтрокДействие);
	РасходыИзменениеСтрокДействиеПриОткрытии = РасходыИзменениеСтрокДействие;
	УстановитьПометку(ИмяТЧРасходы(), Истина);
	// Конец ГрупповоеИзменениеСтрок
	
	// ЭДО
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.КомандыЭДО_ФормаДокумента(ЭтотОбъект);
	// Конец ЭДО
	
	// ИнтеграцияЕГАИС
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		ТТНВходящаяЕГАИС = Объект.ДокументОснование;
	КонецЕсли;
	// Конец ИнтеграцияЕГАИС
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	СписокЭлектронныхВесов = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("ЭлектронныеВесы", ,
		МенеджерОборудованияВызовСервера.РабочееМестоКлиента());
	Если СписокЭлектронныхВесов.Количество() = 0 Тогда
		// Нет подключенных весов.
		Элементы.ЗапасыПолучитьВес.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	УстановитьВидимостьПечатиЧека();
	Если ИспользоватьПодключаемоеОборудование И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Справочники.Контрагенты.ДанныеКИКонтрагентаДляВыбораНаФорме(Объект.Контрагент, Элементы, ПоляКИДляОтправкиЧека());
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Ручные скидки
	РазрешитьРучныеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиНаценкиЗакупки");
	Элементы.Скидки.Видимость = РазрешитьРучныеСкидки;
	РассчитатьСуммуИПроцентСкидкиРасходыЗапасы(Объект, СкидкаСумма, СкидкаПроцент);
	// Конец Ручные скидки
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	// Серии номенклатуры
	ИспользоватьСерииНоменклатурыОстатки = СерииНоменклатурыУНФ.ИспользоватьСерииНоменклатурыОстатки();
	Элементы.ЗапасыГруппаСерииНоменклатуры.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	
	// МобильноеПриложение
	НастроитьЭлементыМобильноеПриложение();
	// Конец МобильноеПриложение
	
	ОпределитьВидимостьНастроекУчетаВНалогообложении();
	
	Если Параметры.Ключ.Пустая() Тогда
		НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект, Истина);
	КонецЕсли;
	
	// Взаиморасчеты
	ВзаиморасчетыПриСозданииНаСервере();
	// Конец Взаиморасчеты
	
	// ИнтеграцияГосИС
	СобытияФормИСУНФ.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// Конец ИнтеграцияГосИС
	
	РазрешитьСкладыВТабличныхЧастях = ПолучитьФункциональнуюОпцию("РазрешитьСкладыВТабличныхЧастях");
	
	МобильныйКлиентУНФ.НастроитьФормуОбъектаМобильныйКлиент(Элементы, "Запасы,Расходы");
	
	Если Объект.Расходы.Количество() > 0 И Объект.Запасы.Количество() = 0 Тогда
		Элементы.страницы.ТекущаяСтраница = Элементы.ГруппаРасходы;
	КонецЕсли; 
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовУНФ.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

	НастройкиКоличества = ПолучитьНастройкиИзмененияКоличества();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиКоличества);
		
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию") И ЭтоВозвратОтПокупателя(Объект.ВидОперации) Тогда
		
		Если Не Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
			Если РаботаСКомиссионерамиКомитентамиСервер.ВТабличнойЧастиЕстьКомиссионнаяПартияСНалогообложениемНДС(Объект) Тогда
				ТребуетсяИзменениеНалогообложениеНаСНДС = Истина;
				Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
				ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
				ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
				УчетВалютныхОпераций);
			КонецЕсли;
		ИначеЕсли РаботаСКомиссионерамиКомитентамиСервер.ВТабличнойЧастиЕстьКомиссионнаяПартияСНалогообложением(Объект) Тогда
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		КонецЕсли;;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуИПроцентСкидкиРасходыЗапасы(Объект, СкидкаСумма, СкидкаПроцент)
	
	ОбщаяСуммаБезСкидок = 0;
	Для каждого стр Из Объект.Расходы Цикл
		ОбщаяСуммаБезСкидок = ОбщаяСуммаБезСкидок + стр.Цена * стр.Количество;
	КонецЦикла;
	Для каждого стр Из Объект.Запасы Цикл
		ОбщаяСуммаБезСкидок = ОбщаяСуммаБезСкидок + стр.Цена * стр.Количество;
	КонецЦикла;
	
	СкидкаСумма = Объект.Расходы.Итог("СуммаСкидкиНаценки") + Объект.Запасы.Итог("СуммаСкидкиНаценки");
	СкидкаПроцент = ?(ОбщаяСуммаБезСкидок=0, 0, СкидкаСумма / ОбщаяСуммаБезСкидок * 100);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СтатистикаИспользованияФормКлиент.ПроверитьЗаписатьСтатистикуКоманды(
	"СоздатьНаОсновании.ПриходнаяНакладная",
	ЭтотОбъект.ВладелецФормы,
	ЭтотОбъект.ОснованиеСоздания);
	
	// ГрупповоеИзменениеСтрок
	ОпределитьОбъектИзменений(ИмяТЧЗапасы());
	ОпределитьОбъектИзменений(ИмяТЧРасходы());
	// Конец ГрупповоеИзменениеСтрок
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	УправлениеНебольшойФирмойКлиент.ЗаполнитьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП);
	УправлениеНебольшойФирмойКлиент.УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП);
	// Конец ПодключаемоеОборудование
	
	// ЭДО
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭДО
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьДоступностьПечатиЧека();
	
	ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОбУведомленияхОВвозе", 0.1, Истина);
	
	Если ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
		РаботаСНоменклатуройКлиентУНФ.ВывестиОповещениеПользователяОбИзмененииРежимаНалогообложенияНаСДНС(ТребуетсяИзменениеНалогообложениеНаСНДС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		// ГрупповоеИзменениеСтрок
		СохранитьТекущееДействиеИзмененияСтрок();
	КонецЕсли;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Данные = МенеджерОборудованияУНФКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" Тогда
		
		ЭтотОбъект.Прочитать();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновлениеТекстаПроСчетФактуруПолученный" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура") И Не Параметр.Свойство("Корректировочный") Тогда
			Параметр.Вставить("Корректировочный", Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура);
		КонецЕсли;
		
		ПредставлениеЗаголовка = РаботаСФормойДокументаКлиент.ПредставлениеЗаголовкаПодчиненногоСчетаФактуры(
			Объект.Ссылка, Источник, Параметр, КэшЗначений);
		Если ПредставлениеЗаголовка <> Неопределено Тогда

			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СчетФактураНадпись", "Заголовок",
				ПредставлениеЗаголовка);
				
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСчетФактураНомерДата", "Видимость", Ложь);
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_Контрагент" 
		И ЗначениеЗаполнено(Параметр)
		И Объект.Контрагент = Параметр Тогда
		
		УстановитьВидимостьДоговора();
		
	ИначеЕсли ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		АдресЗапасовВХранилище	= Параметр;
		
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаЗапасы Тогда
			ИмяТабличнойЧасти = ИмяТЧЗапасы();
		Иначе
			ИмяТабличнойЧасти = ИмяТЧРасходы();
		КонецЕсли;
		
		МассивНомеровДобавленныхСтрок = Новый Массив;
		
		ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти,,, МассивНомеровДобавленныхСтрок);
		ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОбУведомленияхОВвозе", 0.1, Истина);
		
		РаботаСНоменклатуройКлиентУНФ.ВывестиОповещениеПользователяОбИзмененииРежимаНалогообложенияНаСДНС(ТребуетсяИзменениеНалогообложениеНаСНДС);
		
		Если ИмяТабличнойЧасти = ИмяТЧРасходы() Тогда 
			Для каждого СтрокаТаблицы Из Объект.Расходы Цикл 
				РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧРасходы(), СтрокаТаблицы);
			КонецЦикла;
		Иначе
			
			// Ручная скидка - заполнение полей ввода на форме
			РассчитатьСуммуИПроцентСкидкиРасходыЗапасы(Объект, СкидкаСумма, СкидкаПроцент);
			// Конец Ручная скидка
			
			Для Каждого НомерДобавленнойСтроки Из МассивНомеровДобавленныхСтрок Цикл
				
				СтрокаТаблицы = Объект.Запасы[НомерДобавленнойСтроки];
				
				ВыполнитьОбработкуТабличнойЧастиПослеПодбора(ИмяТЧЗапасы(), СтрокаТаблицы);
				СтрокаТаблицы.ЯчейкаДоступна = ЯчейкаДоступна(СтрокаТаблицы.СтруктурнаяЕдиница);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ОбновитьПодвалФормы();
		
	ИначеЕсли ИмяСобытия = "ПодборСерий"
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		ИзменилосьКоличество = ПолучитьСерииНоменклатурыИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки);
		Если ИзменилосьКоличество Тогда
			РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧЗапасы());
		КонецЕсли; 
		
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, ИмяТЧЗапасы());
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, ИмяТЧРасходы());
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
	// ЭДО
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец ЭДО
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтеграцияГИСМ
	Если ИмяСобытия = "Запись_УведомлениеОВвозеМаркированныхТоваровИзЕАЭСГИСМ"
		Или ИмяСобытия = "Запись_УведомлениеОбИмпортеМаркированныхТоваровГИСМ"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер();
		
	КонецЕсли;
		
	Если ИмяСобытия = "ОбновитьСписокЗаказовНаДоставку" Тогда
		УстановитьВидимостьДанныхПоДоставке();
	КонецЕсли;

	Если ИмяСобытия = "ИзменениеСостоянияГИСМ"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер();
		ОбновитьРеквизитыОбменаСГИСМ();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменГИСМ"
		И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусГИСМФормахВДокументах)) Тогда
		
		СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер();
		ОбновитьРеквизитыОбменаСГИСМ();
	КонецЕсли;
	
		Если ИмяСобытия = "Запись_МаркировкаТоваровГИСМ"
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		ОбновитьРеквизитыОбменаСГИСМ();
		
	КонецЕсли;
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияГосИС
	СобытияФормИСУНФКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтеграцияГосИС
	
	//Прослеживаемость
	Если ИмяСобытия = "Запись_УведомлениеОВвозеПрослеживаемыхТоваров" 
		И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ПервичныйДокумент") 
		И Объект.Ссылка = Параметр.ПервичныйДокумент 
		ИЛИ ИмяСобытия = "СозданыУведомленияВПомощникеПолученияРНПТ"
		ИЛИ ИмяСобытия = "СозданыКорректировочныеУведомленияВПомощникеПолученияРНПТ" Тогда
		
		УстановитьПредставлениеНадписиУведомлениеОВвозе();
		ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОбУведомленияхОВвозе", 0.1, Истина);
	КонецЕсли;
	
	
	// Наборы
	Если ЭтоВозвратОтПокупателя(Объект.ВидОперации) И НаборыКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Источник) Тогда
		ОбновитьСоставНабора(Параметр.НоменклатураНабора, Параметр.ХарактеристикаНабора, Параметр.Количество, 
			Параметр.Цена, Параметр.СоставНабора);
	КонецЕсли; 
	// Конец Наборы
	
	Если ИмяСобытия = "ОповещениеОбИзмененииДолга" Тогда
		ОбновитьРасхождения();
	КонецЕсли;
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовУНФКлиент.ОбработчикОповещенияФормаДокумента(ИмяСобытия, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ДоступенОрдерныйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныйСклад");
	
	// Прослеживаемость
	Если КэшЗначений = Неопределено Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	КэшЗначений.Вставить("ПоставщикРезидентТаможенногоСоюза", Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Объект.Контрагент));
	ПоставщикРезидентТаможенногоСоюза = КэшЗначений.ПоставщикРезидентТаможенногоСоюза;
	ОбновитьОтображениеПрослеживаемости();
	
	УстановитьПредставлениеНадписиУведомлениеОВвозе();
	// Конец Прослеживаемость
	
	// ИнтеграцияГИСМ
	СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер();
	ОбновитьРеквизитыОбменаСГИСМ();
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияГосИС
	СобытияФормИСУНФ.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец ИнтеграцияГосИС
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Наборы
	Если ЭтоВозвратОтПокупателя(Объект.ВидОперации) Тогда
		ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы);
		ОбновитьПризнакиНабора(Объект.Запасы); 
	КонецЕсли; 
	// Конец Наборы
	
	// Ячейки
	Если ТипЗнч(КэшЗначений) <> Тип("Структура") Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	КэшЗначений.Вставить("УчетПоЯчейкам", ПолучитьФункциональнуюОпцию("УчетПоЯчейкам"));
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	// Конец Ячейки
	
	Если Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Объект.ПоложениеДокументаПоступления = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
	КонецЕсли;

	УчетОстатковПоСкладскимОрдерам = УчетОстатковВРазрезеСкладскихОрдеров();
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокОплаты(Объект.СпособЗачетаПредоплаты, Объект.Предоплата);
	
	УстановитьСвязиПараметровВыбораДоступныеТипы();
	
	ПроверятьРасхожденияСЗаказом = ТекущийОбъект.ПроверятьРасхожденияСЗаказом;
	ОбновитьРасхождения();
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
	// Комиссия
	НеУчитыватьЗаказыПриПередачеНаКомиссию = ?(ЗначениеЗаполнено(Объект.Договор), Объект.Договор.НеУчитыватьЗаказыПриПередачеНаКомиссию, Ложь);
	ОпределитьВидимостьЗаказовПокупателяКомиссия(ЭтотОбъект);
	
	УстановитьВидимостьПредупрежденияПодчиненныеДокументы();
	
	// ЭДО
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.КомандыЭДО_ПриЧтенииФормыДокумента(ЭтотОбъект);
	// Конец ЭДО
	
	СчетФактураСсылка = СчетаФактурыУНФ.ПолучитьПодчиненныйСчетФактуру(Объект.Ссылка, Истина, Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура);
	Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(СчетФактураСсылка, Истина,
	, Объект.ЭтоУниверсальныйДокумент, Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура);
	КэшЗначений.Вставить("СчетФактураСсылка", ?(ТипЗнч(СчетФактураСсылка) = Тип("Структура"), СчетФактураСсылка.Ссылка, Неопределено));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСчетФактураНомерДата", "Видимость"
	, Элементы.СчетФактураНадпись.Видимость И Не ЗначениеЗаполнено(КэшЗначений.СчетФактураСсылка) И Не Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНДС", "Видимость"
	, Элементы.СчетФактураНадпись.Видимость И Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя);
	
	Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Объект.ДокументОснование);
	
	КэшЗначений.Вставить("ЗапретКомиссионныхПартийБезВладельца", Константы.ЗапретКомиссионныхПартийБезВладельца.Получить());
	
	ПриИзмененииВидаУчетаСклада();
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		КлючеваяОперация = СтрШаблон("Проведение%1",
			РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
		ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	КэшЗначений.МодифицированностьФормы = Модифицированность;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ТекстСообщения = "";
		Справочники.ДоговорыКонтрагентов.ПроверитьСоответствиеДоговораУсловиямДокумента(
			ТекстСообщения,
			Объект.Договор,
			Объект.Ссылка,
			Объект.Организация,
			Объект.Контрагент,
			Отказ,
			Объект.ВидОперации);
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Если Отказ Тогда
				Сообщение.Текст = СтрШаблон(НСтр("ru = 'Документ не проведен %1'"), ТекстСообщения);
				Сообщение.ПутьКДанным = "Объект";
				Сообщение.Поле = "Договор";
				Сообщение.Сообщить();
				Возврат;
			Иначе
				Сообщение.Текст = ТекстСообщения;
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ТаблицаДокументовДляИзменения", ТаблицаДокументовДляИзменения);
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Обработчик механизма "Свойства"
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// ЭДО
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец ЭДО
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	ТекущийОбъект.ДополнительныеСвойства.Свойство("ВерсияПодчиненногоСчетФактуры", КэшЗначений.ВерсияПодчиненногоСчетФактуры);
	
	// ГрупповоеИзменениеСтрок
	Если Элементы.ГруппаЗапасыИзменениеСтрок.Видимость Тогда
		УстановитьПометку(ИмяТЧЗапасы(), Истина);
	КонецЕсли;
	Если Элементы.ГруппаРасходыИзменениеСтрок.Видимость Тогда
		УстановитьПометку(ИмяТЧРасходы(), Истина);
	КонецЕсли;
	// Конец ГрупповоеИзменениеСтрок
	
	УстановитьДоступностьЭлементовЕГАИС();
	
	//+ ГИСМ
	СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер();
	ОбновитьРеквизитыОбменаСГИСМ();
	//- ГИСМ
	
	// ИнтеграцияЕГАИС
	Если Не ЗначениеЗаполнено(ТТНВходящаяЕГАИС) Тогда
		Если ТипЗнч(ТекущийОбъект.ДокументОснование) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
			ТТНВходящаяЕГАИС = ТекущийОбъект.ДокументОснование;
		КонецЕсли;
	КонецЕсли;
	
	ТТНВходящаяЕГАИСОбновитьФорму = Ложь;
	Если ЗначениеЗаполнено(ТТНВходящаяЕГАИС) Тогда
		
		ТТНВходящаяЕГАИСДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТТНВходящаяЕГАИС, "ДокументОснование");
		Если Не ЗначениеЗаполнено(ТТНВходящаяЕГАИСДокументОснование) Тогда
			ИнтеграцияЕГАИСВызовСервера.ЗаписатьСвязьДокументаПоступленияИТТНЕГАИС(
				ТТНВходящаяЕГАИС,
				Объект.Ссылка);
			ТТНВходящаяЕГАИСОбновитьФорму = Истина;
		КонецЕсли;
	КонецЕсли;
	// Конец ИнтеграцияЕГАИС
	
	// ИнтеграцияГосИС
	СобытияФормИСУНФ.ПослеЗаписиНаСервере(ЭтаФорма);
	// Конец ИнтеграцияГосИС
	
	// Наборы
	Если ЭтоВозвратОтПокупателя(Объект.ВидОперации) Тогда
		ОбновитьПризнакиНабора(Объект.Запасы);
	КонецЕсли; 
	// Конец Наборы
	
	//Ячейки
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	// Конец Ячейки
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);	
	// Конец Обсуждения
	
	АссистентУправления.ПослеЗаписиНаСервере(ТекущийОбъект);
	
	// Взаиморасчеты
	ДатаПриСозданииНаСервере = Объект.Дата;
	
	Если ТекущийОбъект.Проведен ИЛИ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ТаблицаДокументовДляИзменения.Очистить();
	КонецЕсли;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаПредоплата
		И Элементы.СтраницыРасчетовСКонтрагентом.ТекущаяСтраница = Элементы.СтраницаПросмотр Тогда
		ИстинаПослеЗаписиНаСервере = Истина;
		РасчетыРаботаСФормамиВызовСервера.ЗаполнитьТаблицуПросмотраНаСервере(ЭтотОбъект, ИстинаПослеЗаписиНаСервере);
	КонецЕсли;
	// Конец Взаиморасчеты
	
	Если ЭтоПоступлениеОтПоставщика(ТекущийОбъект.ВидОперации) Тогда
		Справочники.ДоговорыКонтрагентов.ЗаписатьСпособЗаполненияСтавкиНДСПоДокументу(ТекущийОбъект.Договор,
			ТекущийОбъект.Ссылка, ТекущийОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС);
	КонецЕсли;
	
	ОбновитьРасхождения();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ОбработатьСчетФактурыПослеЗаписиНаСервере();
	
	Справочники.ДоговорыКонтрагентов.СохранитьСпособВыставленияДокументов(ТекущийОбъект.Договор, ТекущийОбъект.ЭтоУниверсальныйДокумент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	ЗаполненЗаказ = Ложь;
	Для каждого СтрокаТЧ Из Объект.Запасы Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Заказ) Тогда
			Если ТипЗнч(СтрокаТЧ.Заказ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				ЗаполненЗаказ = Истина;
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаполненЗаказ Тогда
		ОповеститьОбИзменении(Тип("ДокументСсылка.ЗаказПоставщику"));
	КонецЕсли;
	
	Оповестить("ОповещениеОбИзмененииДолга");
	
	// РМК
	Если ТипЗнч(ВладелецФормы) = Тип("ФормаКлиентскогоПриложения")
		И СтрНайти(ВладелецФормы.ИмяФормы, "ФормаДокумента_РМК") > 0 Тогда
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Ссылка", Объект.Ссылка);
		ПараметрыОповещения.Вставить("Номер", Объект.Номер);
		ПараметрыОповещения.Вставить("Дата", Объект.Дата);
		ПараметрыОповещения.Вставить("ВидОперации", Объект.ВидОперации);
		Оповестить("РМК_Запись_ПриходнаяНакладнаяВозврат", ПараметрыОповещения);
	КонецЕсли;
	// Конец РМК
	
	// Наборы
	Если ЭтоВозвратОтПокупателя(Объект.ВидОперации) Тогда
		ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы); 
	КонецЕсли; 
	// Конец Наборы
	
	Если КэшЗначений.МодифицированностьФормы = Истина
		И КэшЗначений.ВерсияПодчиненногоСчетФактуры = "1.6.11" Тогда
		
		ТекстВопроса = НСтр("ru = 'В накладную были внесены изменения.
			|Требуется самостоятельно поправить подчиненный документ счет-фактура'");
		
		ПоказатьПредупреждение(, ТекстВопроса, 0, НСтр("ru ='Счет-фактура'"));
		
	КонецЕсли;
	
	// ИнтеграцияЕГАИС
	Если ТТНВходящаяЕГАИСОбновитьФорму Тогда
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Ссылка",     Объект.ДокументОснование);
		ПараметрыОповещения.Вставить("Основание",  Объект.Ссылка);
		ПараметрыОповещения.Вставить("Перечитать", Истина);
		
		Оповестить("Запись_ТТНВходящаяЕГАИС", ПараметрыОповещения, Объект.Ссылка);
		ТТНВходящаяЕГАИСОбновитьФорму = Ложь;
		
	КонецЕсли;
	// Конец ИнтеграцияЕГАИС
	
	// Прослеживаемость
	Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
		ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы, КэшЗначений);
	КонецЦикла; 
	// Конец Прослеживаемость
	
	Если Объект.ВалютаДокумента <> НациональнаяВалюта И ЕстьКорректировкиПоДокументу(Объект.Ссылка) Тогда
		
		ТекстСообщения = НСтр("ru ='По документу создана корректировка, необходимо проверить ее актуальность'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	Оповестить("ОбновитьСписокДокументовКПоступлению");
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		ТекстСообщения = НСтр("ru = 'Для выбора партии необходимо заполнить номенклатуру'");
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	Владелец = Новый Структура("Владелец",ТекущиеДанные.Номенклатура);
	
	ПараметрыВыбораПартии = Новый Структура();
	ПараметрыВыбораПартии.Вставить("ОперацияДокумента", Объект.ВидОперации);
	ПараметрыВыбораПартии.Вставить("Отбор", Владелец);
	ПараметрыВыбораПартии.Вставить("РежимВыбора", Истина);
	ПараметрыВыбораПартии.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	
	ОткрытьФорму("Справочник.ПартииНоменклатуры.ФормаСписка",ПараметрыВыбораПартии, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	// ИнтеграцияГосИС
	СобытияФормИСУНФКлиент.ОбработкаНавигационнойСсылки(ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	// Конец ИнтеграцияГосИС
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.ОтчетКомиссионера.Форма.ФормаПодбораПоОстаткам" Тогда
		
		ИдентификаторыНовыхСтрок = Новый Массив;
		ПолучитьЗапасыИзХранилищаКомиссия(ВыбранноеЗначение, ИдентификаторыНовыхСтрок);
		
		ПараметрыРасчета = Новый Структура("РассчитатьЦену", Истина);
		
		Для Каждого ИдентификаторСтроки Из ИдентификаторыНовыхСтрок Цикл
			
			СтрокаТабличнойЧасти = Объект.Запасы.НайтиПоИдентификатору(ИдентификаторСтроки);
			
			Если СтрокаТабличнойЧасти = Неопределено Тогда Продолжить КонецЕсли;
			
			РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", СтрокаТабличнойЧасти, ПараметрыРасчета);
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Заказ) Тогда
				ЗаказыПокупателейИзКэша(СтрокаТабличнойЧасти.Заказ);
			КонецЕсли;
			
		КонецЦикла;
		
		ЭтаФорма.Модифицированность = Истина;
		ОбновитьВидимостьПоляЗаказыПокупателей(ЭтотОбъект);
		
	// Прослеживаемость
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаПодбораРНПТ" Тогда
		
		ОбработкаВыбораРНПТННаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаВыбора" Тогда
		
		ОбработкаВыбораГТДНаКлиенте(ВыбранноеЗначение);
		
	// Конец Прослеживаемость
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КартинкаЗакрытьБаннерНажатие(Элемент)
	ОтключитьБаннерУведомленийОВвозе = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОбУведомленияхОВвозе", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДанныеДляИзмененияДаты = ДокументыУНФКлиент.ДанныеДляИзмененияДаты(ЭтотОбъект, Объект);
	Если ДанныеДляИзмененияДаты.ДатаНеМенялась Тогда
		Возврат;
	КонецЕсли;
	
	ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты);
	
	ЦеныИВалютаКлиент.ПересчитатьКурсКратностьВалютыРасчетов(ДанныеДляИзмененияДаты.ВалютаКурсКратность, Объект,
		ЭтотОбъект);
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
		
	ОбновитьСрокОтправкиУведомлений = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОбУведомленияхОВвозе", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВходящегоДокументаПриИзменении(Элемент)
	ОбновитьСрокОтправкиУведомлений = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОбУведомленияхОВвозе", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ОтключитьПроверкуРасхожденийПриИзмененииВидаОперации();
	ОбработатьИзменениеВидаОперации();
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)
	
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
		СтрокаТабличнойЧасти.ДокументПоступления = Неопределено;
	КонецЦикла;
	
	Объект.ДокументПоступления = Неопределено;
	УчетОстатковПоСкладскимОрдерам = УчетОстатковВРазрезеСкладскихОрдеров();
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	
	ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов();
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ЯчейкаПриИзменении(Элемент)
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		СтрокаТабличнойЧасти.Ячейка = Объект.Ячейка;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВключатьРасходыВСебестоимостьПриИзменении(Элемент)
	
	Если Объект.ВключатьРасходыВСебестоимость Тогда
		Элементы.Расходы.ПодчиненныеЭлементы.РасходыСтруктурнаяЕдиница.Видимость = Ложь;
		Элементы.Расходы.ПодчиненныеЭлементы.РасходыНаправлениеДеятельности.Видимость = Ложь;
		Элементы.РаспределитьРасходы.Видимость = Истина;
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыСуммаРасходов.Видимость = Истина;
	Иначе
		Элементы.Расходы.ПодчиненныеЭлементы.РасходыСтруктурнаяЕдиница.Видимость = Истина;
		Элементы.Расходы.ПодчиненныеЭлементы.РасходыНаправлениеДеятельности.Видимость = Истина;
		Элементы.РаспределитьРасходы.Видимость = Ложь;
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыСуммаРасходов.Видимость = Ложь;
		Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
			СтрокаЗапасы.СуммаРасходов = 0;
		КонецЦикла;
		Для каждого СтрокаРасходы Из Объект.Расходы Цикл
			СтрокаРасходы.СтруктурнаяЕдиница = ОсновноеПодразделение;
			СтрокаРасходы.Заказ = ПредопределенноеЗначение("Документ.ЗаказПокупателя.ПустаяСсылка");
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьВидимостьПоляЗаказыПокупателей(ЭтотОбъект);
	
КонецПроцедуры // ВключатьРасходыВСебестоимостьПриИзменении()

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	КонтрагентВестиРасчетыПоЗаказамПередИзменением = КонтрагентВестиРасчетыПоЗаказам;
	Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		
		ОчиститьОснованиеПриИзменениеКонтрагентаДоговора();
		
		ВидимостьДоговораПередИзменением = Элементы.Договор.Видимость;
		
		ДанныеКонтрагента = ДанныеКонтрагентаДляИзменения(ДатаДокумента, Объект.Контрагент, Объект.Организация);
		
		Объект.ЭтоУниверсальныйДокумент = ДанныеКонтрагента.ЭтоУниверсальныйДокумент;
		УстановитьНастройкиФормыУПД(ЭтаФорма, КэшЗначений.СчетФактураСсылка, Истина);
		
		// Прослеживаемость
		НастроитьЭлементыПрослеживаемостиПриИзмененииКонтрагента(ДанныеКонтрагента);
		// Конец Прослеживаемость
		
		НеУчитыватьЗаказыПриПередачеНаКомиссию = ДанныеКонтрагента.НеУчитыватьЗаказыПриПередачеНаКомиссию;
		
		Объект.Договор = ДанныеКонтрагента.Договор;
		Объект.КонтактноеЛицоПодписант = ДанныеКонтрагента.КонтактноеЛицоПодписант;
		
		ДоговорПередИзменением = Договор;
		Договор = Объект.Договор;
		
		Если Объект.Договор <> ДоговорПередИзменением
				И Объект.СпособЗачетаПредоплаты <> ДанныеКонтрагента.СпособЗачетаПредоплаты Тогда
			Объект.СпособЗачетаПредоплаты = ДанныеКонтрагента.СпособЗачетаПредоплаты;
			
			СпособЗачетаПредоплатыПриИзмененииНаСервере();
			
		КонецЕсли;
		
		Если Объект.Договор <> ДоговорПередИзменением Тогда
			СпособЗаполненияСтавкиНДСДоИзменения = СпособЗаполненияСтавкиНДС;
			СпособЗаполненияСтавкиНДС = ДанныеКонтрагента.СпособЗаполненияСтавкиНДС;
			Если СпособЗаполненияСтавкиНДСДоИзменения <> СпособЗаполненияСтавкиНДС
					И ЭтоПоступлениеОтПоставщика(Объект.ВидОперации) Тогда
				ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.Предоплата.Количество() > 0 И Объект.Договор <> ДоговорПередИзменением Тогда
			
			ПараметрыИзмененияКонтрагента = Новый Структура;
			ПараметрыИзмененияКонтрагента.Вставить("КонтрагентПередИзменением", КонтрагентПередИзменением);
			ПараметрыИзмененияКонтрагента.Вставить("ДоговорПередИзменением", ДоговорПередИзменением);
			ПараметрыИзмененияКонтрагента.Вставить("КонтрагентВестиРасчетыПоЗаказамПередИзменением",
				КонтрагентВестиРасчетыПоЗаказамПередИзменением);
			ПараметрыИзмененияКонтрагента.Вставить("ВидимостьДоговораПередИзменением",
				ВидимостьДоговораПередИзменением);
			ПараметрыИзмененияКонтрагента.Вставить("СтруктураДанные", ДанныеКонтрагента);
			КонтрагентПриИзмененииЗавершение = Новый ОписаниеОповещения("КонтрагентПриИзмененииЗавершение", ЭтотОбъект,
				ПараметрыИзмененияКонтрагента);
			ПоказатьВопрос(КонтрагентПриИзмененииЗавершение, НСтр("ru = 'Зачет предоплаты будет очищен, продолжить?'"),
				РежимДиалогаВопрос.ДаНет);
			Возврат;
			
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство("Проект") Тогда
			Объект.Проект = ДанныеКонтрагента.Проект;
		КонецЕсли;
		
		КонтрагентПриИзмененииФрагмент(ДоговорПередИзменением, ДанныеКонтрагента);
		
	Иначе
		Объект.Договор = Договор; // Восстанавливаем автоматически очищенный договор.
		Объект.Заказ = Элементы.Заказ.ОграничениеТипа.ПривестиЗначение(Заказ);
		ОпределитьВидимостьЗаказовПокупателяКомиссия(ЭтотОбъект);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОбУведомленияхОВвозе", 0.1, Истина);
	
КонецПроцедуры // КонтрагентПриИзменении()

&НаКлиенте
Процедура КонтрагентПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Предоплата.Очистить();
	Иначе 
		Объект.Контрагент = ДополнительныеПараметры.КонтрагентПередИзменением;
		Контрагент = ДополнительныеПараметры.КонтрагентПередИзменением;
		Объект.Договор = ДополнительныеПараметры.ДоговорПередИзменением;
		Договор = ДополнительныеПараметры.ДоговорПередИзменением;
		Объект.Заказ = Элементы.Заказ.ОграничениеТипа.ПривестиЗначение(Заказ);
		КонтрагентВестиРасчетыПоЗаказам = ДополнительныеПараметры.КонтрагентВестиРасчетыПоЗаказамПередИзменением;
		Элементы.Договор.Видимость = ДополнительныеПараметры.ВидимостьДоговораПередИзменением;
		Возврат;
	КонецЕсли;
	
	КонтрагентПриИзмененииФрагмент(ДополнительныеПараметры.ДоговорПередИзменением, ДополнительныеПараметры.СтруктураДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзмененииФрагмент(ДоговорПередИзменением, СтруктураДанные)
	
	ВалютаРасчетовПередИзменением = ВалютаРасчетов;
	ВалютаРасчетов = СтруктураДанные.ВалютаРасчетов;
	
	Если НЕ СтруктураДанные.СуммаВключаетНДС = Неопределено Тогда
		Объект.СуммаВключаетНДС = СтруктураДанные.СуммаВключаетНДС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда 
		Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
		Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
	КонецЕсли;
	
	ИзменилсяВидЦен = Объект.ВидЦенКонтрагента <> СтруктураДанные.ВидЦенКонтрагента 
		И ЗначениеЗаполнено(СтруктураДанные.ВидЦенКонтрагента) И СтруктураДанные.УчетЦенКонтрагентов;
	НовыйДоговорИВалютаРасчетов = ЗначениеЗаполнено(Объект.Договор) И ЗначениеЗаполнено(ВалютаРасчетов) 
		И Объект.Договор <> ДоговорПередИзменением И ВалютаРасчетовПередИзменением <> СтруктураДанные.ВалютаРасчетов;
	ОткрытьФормуЦеныИВалюты = НовыйДоговорИВалютаРасчетов И Объект.ВалютаДокумента <> СтруктураДанные.ВалютаРасчетов
		И (Объект.Запасы.Количество() > 0 ИЛИ Объект.Расходы.Количество() > 0);
	
	СтруктураДанные.Вставить("ИзменилсяВидЦен", ИзменилсяВидЦен);
	
	ЗаполнитьСоответствиеЗаказов();
	ОбновитьВидимостьПоляЗаказыПокупателей(ЭтотОбъект);
	
	Заказ = Объект.Заказ;
	
	Если ИзменилсяВидЦен Тогда
		
		Объект.ВидЦенКонтрагента = СтруктураДанные.ВидЦенКонтрагента;
		
	КонецЕсли;
	
	Объект.РегистрироватьЦеныПоставщика = СтруктураДанные.РегистрироватьЦеныПоставщика;
	Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
	
	Если ОткрытьФормуЦеныИВалюты Тогда
		
		ТекстПредупреждения = "";
		
		Если ИзменилсяВидЦен Тогда
			ТекстПредупреждения = НСтр("ru = 'Договор с контрагентом предусматривает условия цен и скидок, 
				|отличные от установленных в документе.
				|Возможно, необходимо перезаполнить цены.'") + Символы.ПС + Символы.ПС;
		КонецЕсли;
		
		ТекстПредупреждения = ТекстПредупреждения + НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом.
			|Необходимо проверить валюту документа.'");
		ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаРасчетовПередИзменением, Истина, ИзменилсяВидЦен, ТекстПредупреждения);
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Договор) 
		И ИзменилсяВидЦен Тогда
		
		ПересчетНеобходим = (Объект.Запасы.Количество() > 0 ИЛИ Объект.Расходы.Количество() > 0);
		
		Объект.ВидЦенКонтрагента	= СтруктураДанные.ВидЦенКонтрагента;
		Объект.ВидЦенВозврата		= СтруктураДанные.ВидЦен;
		ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
			УчетВалютныхОпераций);
		
		Если ПересчетНеобходим Тогда
			
			Сообщение = НСтр("ru = 'Договор с контрагентом предусматривает вид цен, отличный от установленного в документе.
									|Пересчитать документ в соответствии с договором?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("КонтрагентПриИзмененииФрагментЗавершение", ЭтотОбъект, Новый Структура("ДоговорПередИзменением, ВалютаРасчетовПередИзменением, СтруктураДанные", ДоговорПередИзменением, ВалютаРасчетовПередИзменением, СтруктураДанные)), 
				Сообщение,
				РежимДиалогаВопрос.ДаНет);
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
			УчетВалютныхОпераций);
		
	КонецЕсли;
	
	ОбновитьПодвалФормы();
	
	ОпределитьВидимостьЗаказовПокупателяКомиссия(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзмененииФрагментЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПерезаполнитьЦеныВТабличныхЧастях();
		
		ОбновитьПодвалФормы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, Объект.Договор, Объект.ВидОперации);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказПриИзменении(Элемент)
	
	ЗаказПередИзменением = Заказ;
	Заказ = Объект.Заказ;
	
	Если ЗаказПередИзменением=Объект.Заказ Тогда
		Возврат;
	КонецЕсли; 
	
	ДополнительныеПараметры = Новый Структура("ЗаказПередИзменением", ЗаказПередИзменением);
	Если Объект.Предоплата.Количество() > 0 И ЭтоПоступлениеОтПоставщика(Объект.ВидОперации) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаказПриИзмененииЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		НСтр("ru = 'Зачет предоплаты будет очищен, продолжить?'"), РежимДиалогаВопрос.ДаНет, 0);
	Иначе
		ЗаказПриИзмененииЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаказПередИзменением = ДополнительныеПараметры.ЗаказПередИзменением;
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаказПриИзмененииСервер();
	Иначе
		Объект.Заказ = ЗаказПередИзменением;
		Заказ = ЗаказПередИзменением;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаказПриИзмененииСервер()
	
	Объект.Предоплата.Очистить();
	КэшЗначений.Заказы.Очистить();
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		СтрокаТабличнойЧасти.Заказ = Объект.Заказ;
		СтрокаТабличнойЧасти.ЗаказПокупателя = ПредопределенноеЗначение("Документ.ЗаказПокупателя.ПустаяСсылка");
	КонецЦикла; 
	Для каждого СтрокаТабличнойЧасти Из Объект.Расходы Цикл
		СтрокаТабличнойЧасти.ЗаказПоставщику = Объект.Заказ;
		СтрокаТабличнойЧасти.Заказ = ПредопределенноеЗначение("Документ.ЗаказПокупателя.ПустаяСсылка");
	КонецЦикла; 
	ЗаполнитьСоответствиеЗаказов();
	ОбновитьВидимостьПоляЗаказыПокупателей(ЭтотОбъект);
	Если ЗначениеЗаполнено(Объект.Заказ) Тогда
		Элементы.ПроверятьРасхожденияСЗаказом.Доступность = Истина;
	КонецЕсли;
	Если ПроверятьРасхожденияСЗаказом Тогда
		ОбновитьРасхождения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокВзаиморасчетовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСФормойДокументаКлиент.ОткрытьОтчетВзаиморасчетыСКонтрагентом(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
		
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "удалить" Тогда
		Объект.ДокументОснование = Неопределено;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Неопределено);
		Модифицированность = Истина;
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "заполнить" Тогда
		ЗаполнитьПоОснованиюНачало();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "выбрать" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборТипаОснованияЗавершение", ЭтотОбъект);
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокДокументОснование, Элементы.ДокументОснованиеНадпись);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "открыть" Тогда
		
		РаботаСФормойДокументаКлиент.ОткрытьФормуДокументаПоСсылке(Объект.ДокументОснование);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДокументОснование()

	СписокДокументОснование.Добавить("Документ.ЗаказПокупателя.ФормаВыбора", НСтр("ru = 'Заказ покупателя'"));
	СписокДокументОснование.Добавить("Документ.ЗаказПоставщику.ФормаВыбора", НСтр("ru = 'Заказ поставщику'"));
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРемонты") Тогда
		СписокДокументОснование.Добавить("Документ.ПриемИПередачаВРемонт.ФормаВыбора",
			НСтр("ru = 'Прием и передача в ремонт'"));
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныйСклад") Тогда
		СписокДокументОснование.Добавить("Документ.ПриходныйОрдер.ФормаВыбора", НСтр("ru = 'Приходный ордер'"));
	КонецЕсли;
	СписокДокументОснование.Добавить("Документ.РасходнаяНакладная.ФормаВыбора", НСтр("ru = 'Расходная накладная'"));
	СписокДокументОснование.Добавить("Документ.СчетНаОплатуПоставщика.ФормаВыбора", НСтр("ru = 'Счет на оплату поставщика'"));
	Если ПолучитьФункциональнуюОпцию("УчетРозничныхПродаж") Тогда
		СписокДокументОснование.Добавить("Документ.ЧекККМ.ФормаВыбора", НСтр("ru = 'Чек ККМ'"));
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
		СписокДокументОснование.Добавить("Документ.ТТНВходящаяЕГАИС.ФормаВыбора",
			НСтр("ru = 'Товарно-транспортная накладная ЕГАИС'"));
	КонецЕсли;
	СписокДокументОснование.Добавить("Документ.ПоступлениеНаСчет.ФормаВыбора", НСтр("ru = 'Поступление на счет'"));

КонецПроцедуры

&НаКлиенте
Процедура СчетФактураНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ГруппаСчетФактураНомерДата.Видимость Тогда
		
		ОшибкиЗаполнения = Ложь;
		
		Если Не ЗначениеЗаполнено(СчетФактураНомер) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не заполнен номер счет-фактуры.'");
			Сообщение.Поле = "СчетФактураНомер";
			Сообщение.Сообщить();
			ОшибкиЗаполнения = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СчетФактураДата) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не заполнена дата счет-фактуры.'");
			Сообщение.Поле = "СчетФактураДата";
			Сообщение.Сообщить();
			ОшибкиЗаполнения = Истина;
		КонецЕсли;
		
		Если ОшибкиЗаполнения Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СчетаФактурыУНФКлиент.ОткрытьСчетФактуру(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтоУниверсальныйДокументПриИзменении(Элемент)
	УстановитьНастройкиФормыУПД(ЭтаФорма, КэшЗначений.СчетФактураСсылка, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СкидкаПроцентПриИзменении(Элемент)
	
	ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение(
		"Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки");
	ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "ПроцентСкидкиНаценки";
	ЗапасыИзменениеСтрокЗначение = СкидкаПроцент;
	
	РасходыИзменениеСтрокДействие = ПредопределенноеЗначение(
		"Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки");
	РасходыИзменениеСтрокОбъектИзмененийРеквизит = "ПроцентСкидкиНаценки";
	РасходыИзменениеСтрокЗначение = СкидкаПроцент;
	
	Если Объект.Расходы.Количество()>0 Тогда
		ОбработатьТаблицу(ИмяТЧРасходы());
	КонецЕсли;
	Если Объект.Запасы.Количество()>0 Тогда
		ОбработатьТаблицу(ИмяТЧЗапасы());
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаСуммаПриИзменении(Элемент)
	
	ПроцентСкидкиРасходы = Объект.Расходы.Итог("Всего") / (Объект.Расходы.Итог("Всего") + Объект.Запасы.Итог("Всего"));
	ПроцентСкидкиЗапасы = 1 - ПроцентСкидкиРасходы;
	
	РасходыИзменениеСтрокДействие = ПредопределенноеЗначение(
		"Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСкидкуСуммой");
	РасходыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
	РасходыИзменениеСтрокЗначение = СкидкаСумма * ПроцентСкидкиРасходы;
	
	ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение(
		"Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСкидкуСуммой");
	ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
	ЗапасыИзменениеСтрокЗначение = СкидкаСумма * ПроцентСкидкиЗапасы;
	
	ОбработатьТаблицу(ИмяТЧРасходы());
	ОбработатьТаблицу(ИмяТЧЗапасы());
	
	Модифицированность = Истина;
	
КонецПроцедуры

// ИнтеграцияГИСМ
&НаКлиенте
Процедура ТекстМаркировкаТоваровОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьПротоколОбмена" Тогда
		
		ИнтеграцияГИСМКлиент.ОткрытьПротоколОбмена(Объект.Ссылка, ЭтотОбъект);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОформитьМаркировкуТоваров" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
		ОткрытьФорму("Документ.МаркировкаТоваровГИСМ.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;

КонецПроцедуры
// Конец ИнтеграцияГИСМ

&НаКлиенте
Процедура ПроверятьРасхожденияСВходящимДокументомПриИзменении(Элемент)
	
	ОбработатьИзменениеНастроекРасхождений(
		Объект.ПринятьПоКолонке = ПредопределенноеЗначение("Перечисление.ПринятьПоКолонке.КоличествоПоФакту"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьРасхожденияРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент,
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	Если НавигационнаяСсылкаФорматированнойСтроки = "СохранитьРежимПроверкиРасхождений" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуНастройки(Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверятьРасхожденияСЗаказомПриИзменении(Элемент)
	
	ПроверятьРасхожденияСЗаказомПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьПоКолонкеПриИзменении(Элемент)
	
	ОбработатьИзменениеНастроекРасхождений(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КорректировкаПоступленияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(КорректировкаПоступления) Тогда
		ПоказатьЗначение(, КорректировкаПоступления);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
	ОткрытьФорму("Документ.КорректировкаПоступления.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыДокументыПодтверждающиеРасхожденияПриИзменении(Элемент)
	
	ОбновитьРасхождения();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРегистрацииСчетФактурыПриИзменении(Элемент)
	
	Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура = (СпособРегистрацииСчетФактуры = 0);
	Объект.ПокупателемВыставляетсяСчетФактураНаВозврат       = (СпособРегистрацииСчетФактуры = 1);
	
	СпособРегистрацииСчетФактурыПриИзмененииСервер();
	
	ЭтотОбъект.Модифицированность = Истина;
	
	УстановитьНастройкиФормыУПД(ЭтаФорма, КэшЗначений.СчетФактураСсылка, Истина);

КонецПроцедуры

&НаСервере
Процедура СпособРегистрацииСчетФактурыПриИзмененииСервер()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСчетФактураНомерДата", "Видимость"
	, Элементы.СчетФактураНадпись.Видимость И Не ЗначениеЗаполнено(КэшЗначений.СчетФактураСсылка) И Не Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура);
	
	СчетФактураСсылка = СчетаФактурыУНФ.ПолучитьПодчиненныйСчетФактуру(Объект.Ссылка, Истина, Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура);
	Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(СчетФактураСсылка, Истина,
	, Объект.ЭтоУниверсальныйДокумент, Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура);
	КэшЗначений.Вставить("СчетФактураСсылка", ?(ТипЗнч(СчетФактураСсылка) = Тип("Структура"), СчетФактураСсылка.Ссылка, Неопределено));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСчетФактураНомерДата", "Видимость"
	, Элементы.СчетФактураНадпись.Видимость И Не ЗначениеЗаполнено(КэшЗначений.СчетФактураСсылка) И Не Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСпособРегистрацииСчетФактуры(Форма)
	
	Объект = Форма.Объект;
	
	Если Не Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя") Тогда
		Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура = Ложь;
		Объект.ПокупателемВыставляетсяСчетФактураНаВозврат = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Не Объект.ПокупателемВыставляетсяСчетФактураНаВозврат
		И Не Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура Тогда
		Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументПоступленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Организация", Объект.Организация);
	СтруктураОткрытия.Вставить("ТолькоПоДокументам", Истина);
	СтруктураОткрытия.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиница);
	СтруктураОткрытия.Вставить("ТолькоПоОрдерам", Истина);
	СтруктураОткрытия.Вставить("КПоступлению", Истина);
	СтруктураОткрытия.Вставить("Контрагент", Объект.Контрагент);
	
	ОткрытьФорму("ОбщаяФорма.ПодборПоОстаткамТоваровКПоступлениюРеализации", СтруктураОткрытия, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументПоступленияПриИзменении(Элемент)
	
	ЗначениеЗаполнения = ?(ЗначениеЗаполнено(Объект.ДокументПоступления), Объект.ДокументПоступления, Неопределено);
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		СтрокаТабличнойЧасти.ДокументПоступления = ЗначениеЗаполнения;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасы

&НаКлиенте
Процедура ЗапасыДокументПоступленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Организация", Объект.Организация);
	СтруктураОткрытия.Вставить("ТолькоПоДокументам", Ложь);
	СтруктураОткрытия.Вставить("СтруктурнаяЕдиница", ТекущиеДанные.СтруктурнаяЕдиница);
	СтруктураОткрытия.Вставить("ТолькоПоОрдерам", Истина);
	СтруктураОткрытия.Вставить("КПоступлению", Истина);
	СтруктураОткрытия.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	СтруктураОткрытия.Вставить("Характеристика", ТекущиеДанные.Характеристика);
	СтруктураОткрытия.Вставить("Партия", ТекущиеДанные.Партия);
	СтруктураОткрытия.Вставить("Контрагент", Объект.Контрагент);
	
	ОткрытьФорму("ОбщаяФорма.ПодборПоОстаткамТоваровКПоступлениюРеализации", СтруктураОткрытия, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// ИнтеграцияГосИС
	СобытияФормИСУНФКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "ТабличнаяЧасть", Новый Структура("ПриНачалеРедактирования"));
	// Конец ИнтеграцияГосИС
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока И Копирование Тогда
		СтрокаТабличнойЧасти.КлючСвязи = 0;
		СтрокаТабличнойЧасти.СерииНоменклатуры = "";
		СтрокаТабличнойЧасти.РНПТ = "";
		СтрокаТабличнойЧасти.ИдентификаторСтроки = "";
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "СтруктурнаяЕдиница", "ПоложениеСклада");
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "Ячейка", "ПоложениеСклада");
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "Заказ", "ПоложениеЗаказаПоставщику");
	КонецЕсли; 
	
	// ГрупповоеИзменениеСтрок
	Элемент.ТекущиеДанные.Пометка = Истина;
	// Конец ГрупповоеИзменениеСтрок
	
	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыСерииНоменклатуры Тогда
		ОткрытьПодборСерииНоменклатуры();
	КонецЕсли;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТабличнойЧасти.Количество = НовоеКоличествоПриИзмененииНоменклатуры;
	КонецЕсли;
		
	ЭтоНоваяСтрокаЗапасы = НоваяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтеграцияГосИС
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПриОкончанииРедактирования");
	ДополнительныеПараметры.Вставить("ОповещениеСерверногоВызова", "ОповещениеПриОкончанииРедактированияТабличнойЧастиИС");
	СобытияФормИСУНФКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "ТабличнаяЧасть", ДополнительныеПараметры);
	// Конец ИнтеграцияГосИС
	
	ЭтоНоваяСтрокаЗапасы = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриИзменении(Элемент)
	
	Если КопированиеСтрокиЗапасы = Неопределено ИЛИ НЕ КопированиеСтрокиЗапасы Тогда
		ОбновитьПодвалФормы();
	Иначе
		Если Объект.ПроверятьРасхожденияСВходящимДокументом Или Объект.ПроверятьРасхожденияСЗаказом Тогда
			РассчитатьРасхождения(Элемент.ТекущиеДанные.ПолучитьИдентификатор());
		КонецЕсли;
		КопированиеСтрокиЗапасы = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьКолонкиДокументаПоступления(Элемент);
	
	ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОбУведомленияхОВвозе", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		ИтогВсего = Объект.Запасы.Итог("Всего") + Объект.Расходы.Итог("Всего")
			+ Элемент.ТекущиеДанные.Всего;
		ИтогСуммаНДС = Объект.Запасы.Итог("СуммаНДС")
			+ Объект.Расходы.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		КопированиеСтрокиЗапасы = Истина;
	КонецЕсли;
	
	// Наборы
	Если ЭтоВозвратОтПокупателя(Объект.ВидОперации) Тогда
		СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
		Если Копирование И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураНабора) Тогда
			// Состав набора не копируется
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли; 
	// Конец Наборы
	
КонецПроцедуры // ЗапасыПередНачаломДобавления()

&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	
	// ИнтеграцияГосИС
	СобытияФормИСУНФКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "ТабличнаяЧасть", Новый Структура("ПередУдалением"));
	// Конец ИнтеграцияГосИС
	
	Если ЭтоВозвратОтПокупателя(Объект.ВидОперации) Тогда
		ВыполнитьДействияПередУдалениемСтрокиЗапасов(Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	//ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.АкцизныеМарки, ТекущиеДанные);
	
	// Серии номенклатуры
	Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
		
		ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.АкцизныеМарки, ТекущиеДанныеСтроки);
		СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры,
			ТекущиеДанныеСтроки,
			ИспользоватьСерииНоменклатурыОстатки);
		// Прослеживаемость
		УдалитьСвязанныеЗаписи(ТекущиеДанныеСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПослеУдаления(Элемент)
	
	Если ЭтоВозвратОтПокупателя(Объект.ВидОперации) Тогда
		ВыполнитьДействияПослеУдаленияСтрокиЗапасов();
	КонецЕсли;
	
	Если Объект.ПроверятьРасхожденияСВходящимДокументом Или ПроверятьРасхожденияСЗаказом Тогда
		ОбновитьРасхождения();
	КонецЕсли;
	
	// ИнтеграцияГосИС
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПослеУдаления");
	ДополнительныеПараметры.Вставить("ОповещениеСерверногоВызова", "ОповещениеПриОкончанииРедактированияТабличнойЧастиИС");
	СобытияФормИСУНФКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "ТабличнаяЧасть", ДополнительныеПараметры);
	// Конец ИнтеграцияГосИС
	
	УстановитьВидимостьКолонкиДокументаПоступления(Неопределено, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьСбросКоличества И СбрасыватьКоличество
		И СтрокаТабличнойЧасти.Количество <> НовоеКоличествоПриИзмененииНоменклатуры Тогда
		
		ДопПараметр = Новый Структура();
		ДопПараметр.Вставить("Элемент", Элемент);
		ДопПараметр.Вставить("Количество", СтрокаТабличнойЧасти.Количество);
		Оповещение = Новый ОписаниеОповещения("ЗапасыПодтверждениеСбросаКоличестваЗавершение", ЭтотОбъект, ДопПараметр);
		ОткрытьФорму("ОбщаяФорма.ПодтверждениеСбросаКоличества", , , , , , Оповещение);
		
	Иначе
		
		Если СбрасыватьКоличество Тогда
			НовоеКоличество = НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
		ЗапасыНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество);
		
	КонецЕсли;
	
КонецПроцедуры // ЗапасыНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗапасыПодтверждениеСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗапрашиватьСбросКоличества = Результат.ЗапрашиватьСбросКоличества;
		Если НЕ ЗапрашиватьСбросКоличества Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		КонецЕсли;
		Если Результат.СбрасыватьКоличество Тогда
			НовоеКоличество = Результат.НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = ДополнительныеПараметры.Количество;
		КонецЕсли;
	Иначе
		НовоеКоличество = ДополнительныеПараметры.Количество;
	КонецЕсли;
	
	ЗапасыНоменклатураПриИзмененииПродолжить(ДополнительныеПараметры.Элемент, НовоеКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество)

	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("ВидОперации", Объект.ВидОперации);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("Контрагент", Объект.Контрагент);
	СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
	СтруктураДанные.Вставить("ПроверятьРасхожденияСЗаказом", Объект.ПроверятьРасхожденияСЗаказом);
	СтруктураДанные.Вставить("Заказ", СтрокаТабличнойЧасти.Заказ);
	СтруктураДанные.Вставить("КоличествоВЗаказе", СтрокаТабличнойЧасти.КоличествоВЗаказе);
	СтруктураДанные.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиница);
	
	СтруктураПоискаПартииСНДС = Новый Структура("КомиссияСНДС", Истина);
	ЕстьПартииСНДС = Объект.Запасы.НайтиСтроки(СтруктураПоискаПартииСНДС).Количество() > 0;
	СтруктураДанные.Вставить("ЕстьПартииСНДС", ЕстьПартииСНДС);
	
	Если ЭтоВозвратОтПокупателя(Объект.ВидОперации) 
		И НовыйСпособВидовЦенДляВозвратовИспользуется() Тогда
		
		Если ЗначениеЗаполнено(Объект.ВидЦенВозврата) Тогда
			
			СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
			СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
			СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦенВозврата);
			СтруктураДанные.Вставить("Коэффициент", 1);
			
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.ВидЦенКонтрагента) Тогда
			
			СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
			СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
			СтруктураДанные.Вставить("ВидЦенКонтрагента", Объект.ВидЦенКонтрагента);
			СтруктураДанные.Вставить("Коэффициент", 1);
			
		КонецЕсли;
		
	КонецЕсли;
	
	СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанные);
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	Если ЭтоВозвратОтПокупателя(Объект.ВидОперации)
		И СтруктураДанные.ЭтоНабор
		И НЕ СтруктураДанные.ИспользоватьХарактеристики Тогда
		
		// Наборы
		ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, СтрокаТабличнойЧасти, СтруктураДанные, КэшЗначений);
		
		ЗаполнитьПризнакиИспользованияХарактеристик();
		ОбновитьДоступностьЯчеек();
		ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
		
		#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
		Элементы.Запасы.ЗакончитьРедактированиеСтроки(Истина);
		#КонецЕсли 
		
	Иначе
		
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
		СтрокаТабличнойЧасти.НомерГТД = Неопределено;
		СтрокаТабличнойЧасти.Количество = НовоеКоличество;
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
		СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		СтрокаТабличнойЧасти.Содержание = "";
		СтрокаТабличнойЧасти.НеобходимостьВводаАкцизнойМарки = СтруктураДанные.НеобходимостьВводаАкцизнойМарки;
		
		СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
		СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
		СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
		
		Если СтруктураДанные.ИспользоватьХарактеристики Тогда
			Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
				СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
				СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
			Иначе
				СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
			КонецЕсли;
		КонецЕсли;
		
		//Партии
		СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
		СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
		
		Если СтруктураДанные.ИспользоватьПартии Тогда
			Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
				СтрокаТабличнойЧасти.Партия = СтруктураВыбораНоменклатуры.Партия;
				СтруктураВыбораНоменклатуры.Партия = Неопределено;
			Иначе
				СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
			КонецЕсли;
			СтрокаТабличнойЧасти.КомиссияСНДС = СтруктураДанные.КомиссияСНДС;
		КонецЕсли;
		//Конец Партии
		
		СтрокаТабличнойЧасти.УказыватьДокументПоступления = СтруктураДанные.УказыватьДокументПоступления;
		СтрокаТабличнойЧасти.ДокументПоступления = Неопределено;
		
		// Наборы
		Если ЭтоВозвратОтПокупателя(Объект.ВидОперации) Тогда
			СтрокаТабличнойЧасти.ЭтоНабор = СтруктураДанные.ЭтоНабор;
		КонецЕсли;
		// Конец Наборы
		
		// Прослеживаемость
		Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров
			И ПрослеживаемаяОперация(Объект.ВидОперации) Тогда
			СтрокаТабличнойЧасти.ПрослеживаемыйТовар = СтруктураДанные.ПрослеживаемыйТовар;
			СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = СтруктураДанные.ПрослеживаемыйКомплект;
		Иначе
			СтрокаТабличнойЧасти.ПрослеживаемыйТовар = Ложь;
			СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = Ложь;
		КонецЕсли; 
		// Конец Прослеживаемость
		
		Если Не (ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиница) И ПодборНоменклатурыИзСписка) Тогда
			ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСкладВСтрокеТЧЗапасы(СтрокаТабличнойЧасти, Объект, СтруктураДанные);
		КонецЕсли;
		
		СтрокаТабличнойЧасти.ЯчейкаДоступна = ЯчейкаДоступна(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
		
		// Серии номенклатуры
		Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
			СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, ТекущиеДанныеСтроки,
				ИспользоватьСерииНоменклатурыОстатки);
		КонецЦикла;
			
		СтрокаТабличнойЧасти.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
		
		СтрокаТабличнойЧасти.КоличествоВЗаказе = СтруктураДанные.КоличествоВЗаказе;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧЗапасы());
		
	КонецЕсли;
	
	ПодборНоменклатурыИзСписка = Ложь;
	
	// Прослеживаемость
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	КонецЕсли;
	// Конец Прослеживаемость
	
	Если ЭтоВозвратОтПокупателя(Объект.ВидОперации) И СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
		Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС");
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,УчетВалютныхОпераций);
		ТребуетсяИзменениеНалогообложениеНаСНДС = СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС;
		РаботаСНоменклатуройКлиентУНФ.ВывестиОповещениеПользователяОбИзмененииРежимаНалогообложенияНаСДНС(ТребуетсяИзменениеНалогообложениеНаСНДС);
	КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтотОбъект, "ПриходнаяНакладная",
				НастройкиФормыВыбораНоменклатуры, Истина, ИмяТЧЗапасы(), ВыбранноеЗначение.СтруктураНастроек);
		КонецЕсли;
		
		Если РазрешитьСкладыВТабличныхЧастях Тогда
			Если Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти")
				Или Объект.СтруктурнаяЕдиница = ВыбранноеЗначение.Склад
				Или Не ЗначениеЗаполнено(ВыбранноеЗначение.Склад) Тогда
				
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
				
				Если СтрокаТабличнойЧасти.Свойство("СтруктурнаяЕдиница") Тогда
					СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ВыбранноеЗначение.Склад;
				КонецЕсли;
				
				НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, ИмяТЧЗапасы());
			ИначеЕсли ЗначениеЗаполнено(ВыбранноеЗначение.Склад) И Не Объект.СтруктурнаяЕдиница = ВыбранноеЗначение.Склад Тогда
				Режим = РежимДиалогаВопрос.ДаНет;
				ПараметрыОповещения = ВыбранноеЗначение;
				Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаСкладВТЧ", ЭтотОбъект, ПараметрыОповещения);
				ПоказатьВопрос(Оповещение, НСтр("ru = 'Выбранный склад отличен от склада в шапке. Отобразить склад в табличной части?'"), Режим, 0);
				СтандартнаяОбработка = Ложь;
				Возврат;
			Иначе
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
				НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, ИмяТЧЗапасы());
			КонецЕсли;
		Иначе
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, ИмяТЧЗапасы());
		КонецЕсли;
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаСкладВТЧ(Результат, ПараметрыОповещения) Экспорт
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ПараметрыОповещения);
		ЗапасыНоменклатураПриИзменении(Неопределено);
		Возврат;
	КонецЕсли;
	
	Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");
	
	ОбновитьДанныеПослеПереключенияСкладШапка();
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ПараметрыОповещения);
	
	Если СтрокаТабличнойЧасти.Свойство("СтруктурнаяЕдиница") Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ПараметрыОповещения.Склад;
	КонецЕсли;
	
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, ИмяТЧЗапасы());
	
	ЗапасыНоменклатураПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;

	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("ВидОперации", Объект.ВидОперации);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("ПроверятьРасхожденияСЗаказом", Объект.ПроверятьРасхожденияСЗаказом);
	СтруктураДанные.Вставить("Заказ", СтрокаТабличнойЧасти.Заказ);
	СтруктураДанные.Вставить("КоличествоВЗаказе", СтрокаТабличнойЧасти.КоличествоВЗаказе);

	Если ЭтоВозвратОтПокупателя(Объект.ВидОперации) 
		И НовыйСпособВидовЦенДляВозвратовИспользуется() Тогда
		
		Если ЗначениеЗаполнено(Объект.ВидЦенКонтрагента) Тогда
			
			СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
			СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
			СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
			
			СтруктураДанные.Вставить("СтавкаНДС", СтрокаТабличнойЧасти.СтавкаНДС);
			СтруктураДанные.Вставить("Цена", СтрокаТабличнойЧасти.Цена);
			
			СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦенВозврата);
			СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
			
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.ВидЦенКонтрагента) Тогда
			
			СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
			СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
			СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
			
			СтруктураДанные.Вставить("СтавкаНДС", СтрокаТабличнойЧасти.СтавкаНДС);
			СтруктураДанные.Вставить("Цена", СтрокаТабличнойЧасти.Цена);
			
			СтруктураДанные.Вставить("ВидЦенКонтрагента", Объект.ВидЦенКонтрагента);
			СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
			
		КонецЕсли;
		
	КонецЕсли;

	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);

	Если ЭтоВозвратОтПокупателя(Объект.ВидОперации) И СтруктураДанные.ЭтоНабор Тогда
		
		// Наборы
		ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, СтрокаТабличнойЧасти, СтруктураДанные, КэшЗначений);

		ЗаполнитьПризнакиИспользованияХарактеристик();

	Иначе

		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
		СтрокаТабличнойЧасти.Содержание = "";
		СтрокаТабличнойЧасти.КоличествоВЗаказе = СтруктураДанные.КоличествоВЗаказе;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧЗапасы());

	КонецЕсли;

	// Прослеживаемость
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	КонецЕсли;
	// Конец Прослеживаемость
	
КонецПроцедуры // ЗапасыХарактеристикаПриИзменении()

&НаКлиенте
Процедура ЗапасыПартияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
	Если НЕ ЭтоВозвратОтПокупателя(Объект.ВидОперации) Тогда
		Возврат
	КонецЕсли;
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("ВидОперации", Объект.ВидОперации);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
	СтруктураДанные.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиница);
	
	ЗапасыПартияПриИзмененииНаСервереБезКонтекста(СтруктураДанные);
	
	СтрокаТабличнойЧасти.КомиссияСНДС = СтруктураДанные.КомиссияСНДС;
	
	Если ЗначениеЗаполнено(СтруктураДанные.СтавкаНДС) И НЕ СтруктураДанные.СтавкаНДС = СтрокаТабличнойЧасти.СтавкаНДС Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧЗапасы());
	КонецЕсли;
	
	Если СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
		Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС");
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,УчетВалютныхОпераций);
		ТребуетсяИзменениеНалогообложениеНаСНДС = СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС;
		РаботаСНоменклатуройКлиентУНФ.ВывестиОповещениеПользователяОбИзмененииРежимаНалогообложенияНаСДНС(ТребуетсяИзменениеНалогообложениеНаСНДС);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗапасыПартияПриИзмененииНаСервереБезКонтекста(СтруктураДанные)

	ДатаОбработки = ?(СтруктураДанные.Свойство("ДатаОбработки"), ДатаОбработки, ТекущаяДатаСеанса());
	НалогообложениеНДСОрганизации = НалогиУНФ.НалогообложениеНДС(СтруктураДанные.Организация,, ДатаОбработки);
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС")
		И (НЕ СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС")
		ИЛИ НалогообложениеНДСОрганизации = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС")) Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС")
			ИЛИ НалогообложениеНДСОрганизации = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли
		
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.ВидСтавкиНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Номенклатура.ВидСтавкиНДС));
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Организация.ВидСтавкиНДСПоУмолчанию));
	КонецЕсли;
	
	СтруктураДанные.Вставить("ТребуетсяИзменениеНалогообложениеНаСНДС", Ложь);
	СтруктураДанные.Вставить("КомиссияСНДС", СтруктураДанные.Партия.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС);
	РаботаСКомиссионерамиКомитентамиСервер.СкорректироватьСтавкуНДСКомиссионногоТовара(СтруктураДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСодержаниеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		ШаблонСодержания = ТекстСодержания(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика);
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ШаблонСодержания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧЗапасы());
	
	СтрокаТабличнойЧасти = Элементы["Запасы"].ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
	
	// Прослеживаемость
	Если ЭтоВозвратОтПокупателя(Объект.ВидОперации)
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера") Тогда
		УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы["Запасы"].ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат 
	КонецЕсли;
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыКоличествоСправочноПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧЗапасы());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыКоличествоФактПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧЗапасы());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение
		Или СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧЗапасы());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧЗапасы());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	ПараметрыРасчета = Новый Структура("РассчитатьЦену", Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧЗапасы(), СтрокаТабличнойЧасти, ПараметрыРасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(СтрокаТабличнойЧасти, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // ЗапасыСуммаНДСПриИзменении()

&НаКлиенте
Процедура ЗапасыПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	ПараметрыРасчета = Новый Структура("РассчитатьСуммуСкидки", Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧЗапасы(), СтрокаТабличнойЧасти, ПараметрыРасчета);
	
КонецПроцедуры
 
&НаКлиенте
Процедура РасходыПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	ПараметрыРасчета = Новый Структура("РассчитатьСуммуСкидки", Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧРасходы(), СтрокаТабличнойЧасти, ПараметрыРасчета);

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СодержаниеНачалоВыбора(Элемент, ИмяТЧЗапасы());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтранаПроисхожденияПриИзменении(Элемент)
	
	Если КэшЗначений.УчетГТД Тогда
	
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения)
			ИЛИ СтрокаТабличнойЧасти.СтранаПроисхождения = КэшЗначений.Россия Тогда
			
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Прослеживаемость
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекСтрокаТабличнойЧасти = Объект.Запасы.НайтиПоИдентификатору(ВыбраннаяСтрока);

	// Наборы
	Если ЭтоВозвратОтПокупателя(Объект.ВидОперации) Тогда
		Если НЕ ТолькоПросмотр
			И ЗначениеЗаполнено(ТекСтрокаТабличнойЧасти.НоменклатураНабора)
			И (Элемент.ТекущийЭлемент = Элементы.ЗапасыНоменклатура
			ИЛИ Элемент.ТекущийЭлемент = Элементы.ЗапасыХарактеристика
			ИЛИ Элемент.ТекущийЭлемент = Элементы.ЗапасыКоличество
			ИЛИ Элемент.ТекущийЭлемент = Элементы.ЗапасыЕдиницаИзмерения) Тогда
			
			СтандартнаяОбработка = Ложь;
			РедактироватьСоставНабора(ТекСтрокаТабличнойЧасти);
			
		КонецЕсли;
	КонецЕсли; 
	// Конец Наборы
	
	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыКоличествоВЗаказе
			Или Элемент.ТекущийЭлемент = Элементы.ЗапасыРасхождениеСЗаказом Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуЗаказаИОповестить("ПерейтиКСтрокеТЧЗапасы", ТекСтрокаТабличнойЧасти, "ЗапасыКоличество");
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыЦенаВЗаказе Тогда
		СтандартнаяОбработка = Ложь;
		Если ТекСтрокаТабличнойЧасти.ЦенаВЗаказеПредставление = ПредставлениеПоляНесколькоЦенВЗаказе() Тогда
			ОткрытьФормуЗаказаИОповестить("ОтобратьЗапасыПоНоменклатуре", ТекСтрокаТабличнойЧасти, "ЗапасыЦена");
		Иначе
			ОткрытьФормуЗаказаИОповестить("ПерейтиКСтрокеТЧЗапасы", ТекСтрокаТабличнойЧасти, "ЗапасыЦена");
		КонецЕсли;
	КонецЕсли;
	
	// Прослеживаемость
	Если Поле = Элементы.ЗапасыРНПТ
		И ТекСтрокаТабличнойЧасти.ПрослеживаемыйТовар
		И Не КэшЗначений.ПоставщикРезидентТаможенногоСоюза Тогда
		Если ЭтоВозвратОтПокупателя(Объект.ВидОперации) Тогда
			ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Запасы", , Истина);
		Иначе
			ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Запасы");
		КонецЕсли; 
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	Если Поле.Имя = "ЗапасыПрослеживаемыйТовар" Тогда
		ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
		Если ТекущиеДанные.ПрослеживаемыйТовар Тогда
			ПрослеживаемостьФормыКлиентУНФ.ПоказатьПредупреждениеПрослеживаемыйТовар();
		КонецЕсли;
	КонецЕсли;
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередУдалениемЗавершение(Результат, ДанныеНабора) Экспорт
	
	// Наборы
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиНабора = Объект.Запасы.НайтиСтроки(ДанныеНабора);
	Если СтрокиНабора.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СтрокаТабличнойЧасти = СтрокиНабора[0];
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		
		РедактироватьСоставНабора(СтрокаТабличнойЧасти);
		
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		
		Для каждого Стр Из СтрокиНабора Цикл
			ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.АкцизныеМарки, Стр);
			// Серии номенклатуры
			СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, Стр,
				ИспользоватьСерииНоменклатурыОстатки);
		КонецЦикла;
		НаборыКлиент.УдалитьСтрокиНабора(СтрокаТабличнойЧасти.НоменклатураНабора, СтрокаТабличнойЧасти.ХарактеристикаНабора,,
			Объект.Запасы, Объект.ДобавленныеНаборы);
		Модифицированность = Истина;
		ВыполнитьДействияПослеУдаленияСтрокиЗапасов();
		
	ИначеЕсли Результат = "УдалитьОдин" Тогда
		
		ДобавленныеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(ДанныеНабора);
		Если ДобавленныеСтроки.Количество() = 0 ИЛИ ДобавленныеСтроки[0].Количество <= 1 Тогда
			Для каждого Стр Из СтрокиНабора Цикл
				ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.АкцизныеМарки, Стр);
				// Серии номенклатуры
				СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, Стр,
					ИспользоватьСерииНоменклатурыОстатки);
				Объект.Запасы.Удалить(Стр);
			КонецЦикла;
			Для каждого Стр Из ДобавленныеСтроки Цикл
				Объект.ДобавленныеСтроки.Удалить(Стр);
			КонецЦикла;
			Возврат;
		КонецЕсли;
		СтароеКоличество = ДобавленныеСтроки[0].Количество;
		ДобавленныеСтроки[0].Количество = СтароеКоличество-1;
		НаборыКлиентСервер.УдалитьЭкземплярНабора(СтрокаТабличнойЧасти.НоменклатураНабора,
			СтрокаТабличнойЧасти.ХарактеристикаНабора, , Объект.Запасы, , СтароеКоличество);
		СтрокиНабора = Объект.Запасы.НайтиСтроки(ДанныеНабора);
		Для каждого Стр Из СтрокиНабора Цикл
			РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧЗапасы(), Стр);
		КонецЦикла;
		Модифицированность = Истина;
		ВыполнитьДействияПослеУдаленияСтрокиЗапасов();
		
	КонецЕсли; 
	// Конец Наборы
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	// Наборы
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ХарактеристикиНабора(СтрокаТабличнойЧасти.Номенклатура, Текст);
	КонецЕсли;
	// Конец Наборы
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	// Наборы
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		СтандартнаяОбработка = Ложь;
		СтруктураОткрытия = Новый Структура;
		СтруктураОткрытия.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураОткрытия.Вставить("РежимВыбора", Истина);
		СтруктураОткрытия.Вставить("ЗакрыватьПриВыборе", Истина);
		ОткрытьФорму("РегистрСведений.СоставНаборов.Форма.ФормаРедактированияСостава",
			СтруктураОткрытия, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	// Конец Наборы
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСуммаСкидкиНаценкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	ПараметрыРасчета = Новый Структура("РассчитатьПроцентСкидки", Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧЗапасы(), СтрокаТабличнойЧасти, ПараметрыРасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыСуммаСкидкиНаценкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	ПараметрыРасчета = Новый Структура("РассчитатьПроцентСкидки", Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧРасходы(), СтрокаТабличнойЧасти, ПараметрыРасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЗаказПриИзменении(Элемент)
	
	Элементы.Запасы.ТекущиеДанные.ЗаказПокупателя = ПредопределенноеЗначение("Документ.ЗаказПокупателя.ПустаяСсылка");
	ЗаказыПокупателейИзКэша(Элементы.Запасы.ТекущиеДанные.Заказ);
	ОбновитьВидимостьПоляЗаказыПокупателей(ЭтотОбъект);
	Если ЗначениеЗаполнено(Элементы.Запасы.ТекущиеДанные.Заказ) Тогда
		Элементы.ПроверятьРасхожденияСЗаказом.Доступность = Истина;
	КонецЕсли;
	Если ПроверятьРасхожденияСЗаказом Тогда
		ОбновитьРасхождения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЗаказПокупателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УстановитьДоступностьПоляЗаказПокупателя(Элементы.Запасы.ТекущиеДанные, ИмяТЧЗапасы(), СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	СтрокаТабличнойЧасти.ЯчейкаДоступна = ЯчейкаДоступна(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
	ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(СтрокаТабличнойЧасти.НомерСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(НомерСтроки)
	
	ДополнительныеСвойства = Новый Структура("НомерСтроки", НомерСтроки);
	СерииНоменклатурыУНФ.ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(Объект,, ДополнительныеСвойства);
	
	Если ДоступенОрдерныйУчет И Объект.ПоложениеДокументаПоступления = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		
		СтрокаТабличнойЧасти = Объект.Запасы[НомерСтроки - 1];
		СтрокаТабличнойЧасти.УказыватьДокументПоступления = СкладскойУчетСервер.УказыватьДокументПоступления(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
		СтрокаТабличнойЧасти.ДокументПоступления = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтборПоДублямОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.Запасы.ОтборСтрок = Неопределено;
	Элементы.ЗапасыКонтекстноеМенюПоказатьДублиСтроки.Пометка = Ложь;
	Элементы.ДекорацияОтборПоДублям.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтборПоРасхождениямОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.Запасы.ОтборСтрок = Неопределено;
	Элементы.ЗапасыКонтекстноеМенюПоказыватьТолькоРасхождения.Пометка = Ложь;
	Элементы.ПоказыватьТолькоРасхождения.Пометка = Ложь;
	Элементы.ДекорацияОтборПоРасхождениям.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Прослеживаемость
	Если ЭтоНоваяСтрокаЗапасы
		И Элементы.Запасы.ТекущийЭлемент = Элементы.ЗапасыРНПТ
		И Не ЗначениеЗаполнено(ТекущиеДанные.РНПТ) Тогда
		Если ЭтоВозвратОтПокупателя(Объект.ВидОперации) Тогда
			ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Запасы", , Истина, КэшЗначений.ПоставщикРезидентТаможенногоСоюза);
		Иначе
			ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Запасы",,, КэшЗначений.ПоставщикРезидентТаможенногоСоюза);
		КонецЕсли; 
	КонецЕсли;
	// Конец Прослеживаемость
		
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРНПТНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтоВозвратОтПокупателя(Объект.ВидОперации) Тогда
		ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Запасы", , Истина, КэшЗначений.ПоставщикРезидентТаможенногоСоюза);
	Иначе
		ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Запасы",,, КэшЗначений.ПоставщикРезидентТаможенногоСоюза);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРНПТОчистка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		Если СтрокаТабличнойЧасти.ПрослеживаемыйТовар И Не КэшЗначений.ПоставщикРезидентТаможенногоСоюза Тогда
			УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
		Иначе
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
		КонецЕсли;
		
		ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаТабличнойЧасти, КэшЗначений);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасходы

&НаКлиенте
Процедура РасходыПриИзменении(Элемент)
	
	Если КопированиеСтрокиРасходы = Неопределено ИЛИ НЕ КопированиеСтрокиРасходы Тогда
		ОбновитьПодвалФормы();
	Иначе
		КопированиеСтрокиРасходы = Ложь;
	КонецЕсли;
	
КонецПроцедуры // РасходыПриИзменении()

&НаКлиенте
Процедура РасходыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		ИтогВсего = Объект.Запасы.Итог("Всего") + Объект.Расходы.Итог("Всего") + Элемент.ТекущиеДанные.Всего;
		ИтогСуммаНДС = Объект.Запасы.Итог("СуммаНДС") + Объект.Расходы.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		КопированиеСтрокиРасходы = Истина;
    КонецЕсли;
	
КонецПроцедуры // РасходыПередНачаломДобавления()

&НаКлиенте
Процедура РасходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ОсновноеПодразделение;
		Если Объект.ПоложениеЗаказаПоставщику<>ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
			СтрокаТабличнойЧасти.ЗаказПоставщику = Объект.Заказ;
		КонецЕсли; 
		ОбновитьВидимостьПоляЗаказыПокупателей(ЭтотОбъект);
	КонецЕсли; 
	
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТабличнойЧасти.Количество = НовоеКоличествоПриИзмененииНоменклатуры;
	КонецЕсли;
		
	// ГрупповоеИзменениеСтрок
	СтрокаТабличнойЧасти.Пометка = Истина;
	// Конец ГрупповоеИзменениеСтрок
	
КонецПроцедуры

 // РасходыПриНачалеРедактирования()

&НаКлиенте
Процедура РасходыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьСбросКоличества И СбрасыватьКоличество
		И СтрокаТабличнойЧасти.Количество <> НовоеКоличествоПриИзмененииНоменклатуры Тогда
		
		ДопПараметр = Новый Структура();
		ДопПараметр.Вставить("Элемент", Элемент);
		ДопПараметр.Вставить("Количество", СтрокаТабличнойЧасти.Количество);
		Оповещение = Новый ОписаниеОповещения("РасходыПодтверждениеСбросаКоличестваЗавершение", ЭтотОбъект, ДопПараметр);
		ОткрытьФорму("ОбщаяФорма.ПодтверждениеСбросаКоличества", , , , , , Оповещение);
		
	Иначе
		
		Если СбрасыватьКоличество Тогда
			НовоеКоличество = НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
		РасходыНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество);
		
	КонецЕсли;
		
КонецПроцедуры // РасходыНоменклатураПриИзменении()

&НаКлиенте
Процедура РасходыПодтверждениеСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗапрашиватьСбросКоличества = Результат.ЗапрашиватьСбросКоличества;
		Если НЕ ЗапрашиватьСбросКоличества Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		КонецЕсли;
		Если Результат.СбрасыватьКоличество Тогда
			НовоеКоличество = Результат.НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = ДополнительныеПараметры.Количество;
		КонецЕсли;
	Иначе
		НовоеКоличество = ДополнительныеПараметры.Количество;
	КонецЕсли;
	
	РасходыНоменклатураПриИзмененииПродолжить(ДополнительныеПараметры.Элемент, НовоеКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество)

	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("ДатаОбработки",			Объект.Дата);
	СтруктураДанные.Вставить("Организация",				Объект.Организация);
	СтруктураДанные.Вставить("НалогообложениеНДС",		Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("Контрагент",				Объект.Контрагент);
	СтруктураДанные.Вставить("Номенклатура",			СтрокаТабличнойЧасти.Номенклатура);
	
	Если ЗначениеЗаполнено(Объект.ВидЦенКонтрагента) Тогда
		
		СтруктураДанные.Вставить("ВалютаДокумента",		Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("ВидЦенКонтрагента",	Объект.ВидЦенКонтрагента);
		СтруктураДанные.Вставить("СуммаВключаетНДС",	Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("Коэффициент",			1);
		
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Содержание = "";
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = НовоеКоличество;
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Расходы");
	
	Если СтруктураДанные.ОчиститьЗаказИПодразделение Тогда
		
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Неопределено;
		СтрокаТабличнойЧасти.Заказ = Неопределено;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиница) Тогда
		
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ОсновноеПодразделение;
		
	КонецЕсли;
	
	Если СтруктураДанные.ОчиститьНаправлениеДеятельности Тогда
		
		СтрокаТабличнойЧасти.НаправлениеДеятельности = Неопределено;
		
	Иначе
		
		СтрокаТабличнойЧасти.НаправлениеДеятельности = СтруктураДанные.НаправлениеДеятельности;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РасходыСодержаниеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
		ШаблонСодержания = ТекстСодержания(СтрокаТабличнойЧасти.Номенклатура, Неопределено);
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ШаблонСодержания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧРасходы());
	
КонецПроцедуры // РасходыКоличествоПриИзменении()

&НаКлиенте
Процедура РасходыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение
	 ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧРасходы());
	
КонецПроцедуры // РасходыЕдиницаИзмеренияОбработкаВыбора()

&НаКлиенте
Процедура РасходыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧРасходы());
	
КонецПроцедуры // РасходыЦенаПриИзменении()

&НаКлиенте
Процедура РасходыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(СтрокаТабличнойЧасти, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
	
КонецПроцедуры // РасходыСуммаПриИзменении()

&НаКлиенте
Процедура РасходыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(СтрокаТабличнойЧасти, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
	
КонецПроцедуры // РасходыСтавкаНДСПриИзменении()

&НаКлиенте
Процедура РасходыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // РасходыСуммаНДСПриИзменении()

&НаКлиенте
Процедура РасходыНаправлениеДеятельностиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеНаправлениеДеятельностиНачалоВыбора(СтрокаТабличнойЧасти.Номенклатура);
	
	Если НЕ СтруктураДанные.ВозможностьУказанияНаправленияДеятельности Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(, НСтр("ru = 'Для данного расхода направление деятельности не указывается.'"));
	КонецЕсли;
	
КонецПроцедуры // РасходыНаправлениеДеятельностиНачалоВыбора()

&НаКлиенте
Процедура РасходыСтруктурнаяЕдиницаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПроверитьВозможностьВыбораПодразделения(СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыСтруктурнаяЕдиницаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПроверитьВозможностьВыбораПодразделения(СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьВыбораПодразделения(СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеСтруктурнаяЕдиницаНачалоВыбора(СтрокаТабличнойЧасти.Номенклатура);
	
	Если НЕ СтруктураДанные.ВозможностьУказанияПодразделения Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(, НСтр("ru = 'Для этого расхода подразделение не указывается.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеЗаказНачалоВыбора(СтрокаТабличнойЧасти.Номенклатура);
	
	Если НЕ СтруктураДанные.ВозможностьУказанияЗаказа Тогда
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для этого расхода заказ не указывается.'"));
		Возврат;
	КонецЕсли;
	
	УстановитьДоступностьПоляЗаказПокупателя(СтрокаТабличнойЧасти, ИмяТЧРасходы(), СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыЗаказПоставщикуПриИзменении(Элемент)
	
	Элементы.Расходы.ТекущиеДанные.Заказ = ПредопределенноеЗначение("Документ.ЗаказПокупателя.ПустаяСсылка");
	ЗаказыПокупателейИзКэша(Элементы.Расходы.ТекущиеДанные.ЗаказПоставщику);
	ОбновитьВидимостьПоляЗаказыПокупателей(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыСодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СодержаниеНачалоВыбора(Элемент, ИмяТЧРасходы());
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыЗаказПриИзменении(Элемент)
	Если Объект.ПоложениеПроекта = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		Элементы.Расходы.ТекущиеДанные.Проект = ПроектИзЗаказа(Элементы.Расходы.ТекущиеДанные.Заказ);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредоплата

&НаКлиенте
Процедура ПредоплатаСуммаРасчетовПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Курс = 0 Тогда
		Если Объект.Курс = 0 Тогда
			СтрокаТабличнойЧасти.Курс = 1;
		Иначе
			СтрокаТабличнойЧасти.Курс = Объект.Курс;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Кратность = 0 Тогда
		Если Объект.Кратность = 0 Тогда
			СтрокаТабличнойЧасти.Кратность = 1;
		Иначе
			СтрокаТабличнойЧасти.Кратность = Объект.Кратность;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВалютаДокумента = НациональнаяВалюта Тогда
		СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
		СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс,
		КурсНациональнаяВалюта,
		СтрокаТабличнойЧасти.Кратность,
		КратностьНациональнаяВалюта);
	Иначе
		СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
		СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс,
		Объект.Курс,
		СтрокаТабличнойЧасти.Кратность,
		Объект.Кратность);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКурсПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.ПриИзмененииКурсаВСтрокеПредоплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКурсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасчетыРаботаСФормамиКлиент.ПредоплатаКурсНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКратностьПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.ПриИзмененииКурсаВСтрокеПредоплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс);
	
	СтрокаТабличнойЧасти.Кратность = 1;
	
	СтрокаТабличнойЧасти.Курс =
		?(СтрокаТабличнойЧасти.СуммаРасчетов = 0,
			1,
			СтрокаТабличнойЧасти.СуммаПлатежа
		  / СтрокаТабличнойЧасти.СуммаРасчетов
		  * Объект.Курс);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаДокументПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Документ) Тогда
		
		СтруктураДанные =
			ПолучитьДанныеДокументПриИзменении(СтрокаТабличнойЧасти.Документ, Объект.Контрагент, Объект.Договор);
		
		СтрокаТабличнойЧасти.СуммаРасчетов = СтруктураДанные.СуммаРасчетов;
		
		УстановитьКурсИКратность(СтрокаТабличнойЧасти, СтруктураДанные);
		
		СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
			СтрокаТабличнойЧасти.СуммаРасчетов,
			СтрокаТабличнойЧасти.Курс,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
			СтрокаТабличнойЧасти.Кратность,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КратностьНациональнаяВалюта, Объект.Кратность));
		
		СтруктураДанные.Свойство("ОплатаСертификатом", СтрокаТабличнойЧасти.ОплатаСертификатом);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКурсИКратность(СтрокаТабличнойЧасти, СтруктураДанные)
	
	Если СтруктураДанные.Свойство("Курс") Тогда
		СтрокаТабличнойЧасти.Курс = СтруктураДанные.Курс;
	Иначе
		Курс01 = ?(Объект.Курс = 0, 1, Объект.Курс);
		СтрокаТабличнойЧасти.Курс = 
			?(СтрокаТабличнойЧасти.Курс = 0,
			Курс01,
			СтрокаТабличнойЧасти.Курс);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("Кратность") Тогда
		СтрокаТабличнойЧасти.Кратность = СтруктураДанные.Кратность;
	Иначе
		Кратность01 = ?(Объект.Кратность = 0, 1, Объект.Кратность);
		СтрокаТабличнойЧасти.Кратность =
			?(СтрокаТабличнойЧасти.Кратность = 0,
			Кратность01,
			СтрокаТабличнойЧасти.Кратность);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеДокументПриИзменении(Документ, Контрагент, Договор)
	
	СтруктураДанные = Новый Структура();
	
	ЭтоНакладныеИлиКорректировки = ТипЗнч(Документ) = Тип("ДокументСсылка.РасходнаяНакладная") 
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ПриходнаяНакладная") 
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаПоступления") 
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализации");
		
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.Взаимозачет") Тогда
		
		СуммаРасчетовПоДокументу = СуммаРасчетовПоДокументуВзаимозачет(Договор, Документ, Контрагент);
		СтруктураДанные.Вставить("СуммаРасчетов", СуммаРасчетовПоДокументу);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		СтруктураДанные.Вставить("СуммаРасчетов", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Номинал"));
		СтруктураДанные.Вставить("ОплатаСертификатом", Истина);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ЧекККМ") Тогда
		
		СтруктураДанные.Вставить("СуммаРасчетов", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "СуммаДокумента"));
		
	ИначеЕсли ЭтоНакладныеИлиКорректировки Тогда
		
		СуммаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "СуммаДокумента");
		СтруктураДанные.Вставить("СуммаРасчетов", СуммаДокумента);
		
	Иначе
		
		ОпределитьСуммуРасчетовПоПрочимДокументам(Договор, Документ, СтруктураДанные);
		
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервереБезКонтекста
Функция СуммаРасчетовПоДокументуВзаимозачет(Договор, Документ, Контрагент)
	
	СуммаРасчетовПоДокументу = 0;
		
	Если Документ.КонтрагентИсточник = Контрагент Тогда
		ТЧДляАнализа = Документ.Дебитор;
	Иначе
		ТЧДляАнализа = Документ.Кредитор;
	КонецЕсли;
	
	Для Каждого СтрокаДляАнализа Из ТЧДляАнализа Цикл
		Если СтрокаДляАнализа.Договор = Договор Тогда
			СуммаРасчетовПоДокументу = СуммаРасчетовПоДокументу + СтрокаДляАнализа.СуммаРасчетов;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СуммаРасчетовПоДокументу;

КонецФункции // СуммаРасчетовПоДокументуВзаимозачет()

&НаСервереБезКонтекста
Процедура ОпределитьСуммуРасчетовПоПрочимДокументам(Договор, Документ, СтруктураДанные)
	
	СуммаРасчетовПоДокументу = 0;
	СуммаПлатежаПоДокументу = 0;
	Кратность = 0;
	Курс = 0;
	КоличествоСтрок = 0;
	
	// Нужно обойти все строки, чтобы получить данные только по нужному нам договору.
	Для Каждого СтрокаДляАнализа Из Документ.РасшифровкаПлатежа Цикл
		Если СтрокаДляАнализа.Договор = Договор Тогда
			СуммаРасчетовПоДокументу = СуммаРасчетовПоДокументу + СтрокаДляАнализа.СуммаРасчетов;
			СуммаПлатежаПоДокументу = СуммаПлатежаПоДокументу + СтрокаДляАнализа.СуммаПлатежа;
			Курс = СтрокаДляАнализа.Курс;
			Кратность = СтрокаДляАнализа.Кратность;
			КоличествоСтрок = КоличествоСтрок + 1;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДанные.Вставить("СуммаРасчетов", СуммаРасчетовПоДокументу);
	Если КоличествоСтрок = 1 Тогда
		СтруктураДанные.Вставить("Курс", Курс);
	Иначе
		Если СуммаРасчетовПоДокументу > 0 Тогда
			СтруктураДанные.Вставить("Курс", Окр(СуммаПлатежаПоДокументу / СуммаРасчетовПоДокументу * Кратность, 4));
		КонецЕсли;
	КонецЕсли;
	
	Если Кратность > 0 Тогда
		СтруктураДанные.Вставить("Кратность", Кратность);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные.ОплатаСертификатом Тогда
		СтандартнаяОбработка = Ложь;
		РедактироватьОплату();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПриИзменении(Элемент)
	
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокОплаты(Объект.СпособЗачетаПредоплаты, Объект.Предоплата);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьОплату()
	
	Оповещение = Новый ОписаниеОповещения("РедактироватьОплатуЗавершение", ЭтаФорма);
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("КОплате", Объект.СуммаДокумента - Объект.Предоплата.Итог("СуммаРасчетов"));
	СтруктураПараметров.Вставить("ПодарочныйСертификат", Элементы.Предоплата.ТекущиеДанные.Документ);
	СтруктураПараметров.Вставить("НомерСертификата", Элементы.Предоплата.ТекущиеДанные.НомерСертификата);
	СтруктураПараметров.Вставить("Сумма", Элементы.Предоплата.ТекущиеДанные.СуммаРасчетов);
	СтруктураПараметров.Вставить("Документ", Объект.Ссылка);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаОплатыСертификатом", СтруктураПараметров,,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьОплатуЗавершение(Результат, Параметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		
		СтрокаОплаты = Элементы.Предоплата.ТекущиеДанные;
		
		СтрокаОплаты.Документ = Результат.ПодарочныйСертификат;
		СтрокаОплаты.НомерСертификата = Результат.НомерСертификата;
		СтрокаОплаты.СуммаРасчетов = Результат.Сумма;
		
		СтрокаОплаты.Курс = 
			?(СтрокаОплаты.Курс = 0,
				?(Объект.Курс = 0,
				1,
				Объект.Курс),
			СтрокаОплаты.Курс);
			
		СтрокаОплаты.Кратность =
			?(СтрокаОплаты.Кратность = 0,
				?(Объект.Кратность = 0,
				1,
				Объект.Кратность),
			СтрокаОплаты.Кратность);
			
		СтрокаОплаты.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
			СтрокаОплаты.СуммаРасчетов,
			СтрокаОплаты.Курс,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
			СтрокаОплаты.Кратность,
			?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Владелец", Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ВидДоговора", ВидДоговораПриСоздании(Объект.ВидОперации));
	ПараметрыФормы.Вставить("ОповеститьОЗаписиДоговора", Истина);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, Элемент);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидДоговораПриСоздании(ВидОперации)
	Если ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемВПереработку 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаОтветХранение Тогда
		Возврат Перечисления.ВидыДоговоров.СПокупателем;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратСОтветХранения Тогда
		Возврат Перечисления.ВидыДоговоров.СПоставщиком;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера Тогда
		Возврат Перечисления.ВидыДоговоров.СКомиссионером;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию Тогда
		Возврат Перечисления.ВидыДоговоров.СКомитентом;
	Иначе
		Возврат Перечисления.ВидыДоговоров.СПоставщиком;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПредоплатаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	СуммаРасчетов = Объект.Предоплата.Итог("СуммаРасчетов");
	
	Для Каждого СтрокаПредоплаты Из Объект.Предоплата Цикл
		Если СтрокаПредоплаты.ОплатаБонусами Тогда
			СуммаРасчетов = СуммаРасчетов - СтрокаПредоплаты.СуммаРасчетов; // Бонусы уже учтены в сумме документа
		КонецЕсли;
	КонецЦикла;
	
	РасчетыРаботаСФормамиВызовСервера.ВыполнитьКонтрольСуммыОплатыДобавлениеСтроки(
		СуммаРасчетов, ИтогВсего, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПредоплатаПриОкончанииРедактированияНаСервере(Элементы.Предоплата.ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура ПредоплатаПриОкончанииРедактированияНаСервере(ИдентификаторСтроки)
	
	РасчетыРаботаСФормамиВызовСервера.ВыполнитьКонтрольСуммыОплатыВСтроке(ЭтотОбъект, ИдентификаторСтроки, ИтогВсего);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоОстаткамПриходныхОрдеров(Команда)
	
	Отказ = ЗаполнениеПоОрдерамНеВозможно();
	
	Если Отказ Тогда
		Возврат 
	КонецЕсли;
	
	Если Объект.Запасы.Количество() Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросОчиститьЗапасыИЗаполнитьПоОрдерам", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Перед заполнением табличная часть будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат
	КонецЕсли;
	
	Объект.Запасы.Очистить();
	Объект.СведенияПрослеживаемости.Очистить();
	Объект.СерииНоменклатуры.Очистить();
	Объект.АкцизныеМарки.Очистить();
	
	Если Объект.ПоложениеДокументаПоступления = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке")
		И Не ЗначениеЗаполнено(Объект.ДокументПоступления) Тогда
		Объект.ПоложениеДокументаПоступления = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");
		ПриИзмененииВидаУчетаСклада(Истина);
	КонецЕсли;
		
	ИдентификаторыНовыхСтрок = Новый Массив;
	ЗагрузитьПоОстаткамНаСервере(ИдентификаторыНовыхСтрок);
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", СтрокаТабличнойЧасти);
	КонецЦикла;
	
	Если Объект.Запасы.Количество() Тогда
		ЭтаФорма.Модифицированность = Истина;
		ОбновитьПодвалФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПриходныеОрдераПоНоменклатуре(Команда)
	
	Отказ = ЗаполнениеПоОрдерамНеВозможно();
	
	Если Отказ Тогда
		Возврат 
	КонецЕсли;
	
	Если Не Объект.Запасы.Количество() Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Распределение производится по номенклатуре которая предварительно добавлена в таблицу.'"),, НСтр("ru = 'Добавьте номенклатуру в таблицу'"));
		Возврат
	КонецЕсли;
	
	Объект.СерииНоменклатуры.Очистить();
	
	ЗаполнитьПриходныеОрдераПоНоменклатуреСервер();
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда Продолжить КонецЕсли;
		
		ПараметрыРасчета = Новый Структура("РассчитатьЦену", Истина);
		
		РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументуПоступления(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоДокументуЗавершение", ЭтотОбъект);
	
	ПоказатьВопрос(
	ОписаниеОповещения,
	НСтр("ru = 'Документ будет полностью перезаполнен по ""Приходному ордеру"". Продолжить выполнение операции?'"),
	РежимДиалогаВопрос.ДаНет,
	0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоДокументу(Объект.ДокументПоступления);
		УстановитьВидимостьИДоступность();
		
		ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
			УчетВалютныхОпераций);
		
		ОбновитьПодвалФормы();
		
	Если ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
		РаботаСНоменклатуройКлиентУНФ.ВывестиОповещениеПользователяОбИзмененииРежимаНалогообложенияНаСДНС(ТребуетсяИзменениеНалогообложениеНаСНДС);
	КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторнаяПечатьЧека()
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПовторнаяПечатьЧекаПродолжение", ЭтотОбъект);
		МассивОборудования = Новый Массив;
		МассивОборудования.Добавить("ФискальныйРегистратор");
		МассивОборудования.Добавить("ККТ");
		ОтборОборудования = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();
		ОтборОборудования.Вставить("ТипыПО", МассивОборудования);
		ОтборОборудования.Вставить("Организация", Объект.Организация);
		МенеджерОборудованияКлиент.ВыбратьУстройство(ОписаниеОповещения, ОтборОборудования,
				НСтр("ru='Выберите оборудование'"), НСтр("ru='Оборудование не подключено.'"));
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторнаяПечатьЧекаПродолжение(РезультатВыбора, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		ИдентификаторУстройстваФискальногоРегистратора = РезультатВыбора.ИдентификаторУстройства;
	КонецЕсли;
	
	Если ИдентификаторУстройстваФискальногоРегистратора = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗавершитьПовторнуюПечатьФискальногоЧека", ЭтотОбъект);
	
	Если ЗначениеЗаполнено(ИдентификаторУстройстваФискальногоРегистратора) Тогда
		
		ПараметрыОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПечатьКопииЧека();
		ПараметрыОперации.ДокументСсылка = Объект.Ссылка;
		ПараметрыОперации.Аппаратно = Ложь;
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПечатьКопииЧека(ОповещениеПриЗавершении,
			ЭтаФорма, ИдентификаторУстройстваФискальногоРегистратора, ПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПовторнуюПечатьФискальногоЧека(РезультатВыполнения, ПараметрДействия) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РезультатВыполнения, "Результат") И НЕ РезультатВыполнения.Результат Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Произошла ошибка при попытке повторной печати фискального чека.
			|Причина: %1'"), РезультатВыполнения.ОписаниеОшибки);
		ПоказатьПредупреждение(, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРеквизитыПечатиНажатие(Элемент)
	
	ОткрытьФормуРеквизитыПечати();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьРасходыПоКоличеству(Команда)
	
	РаспределитьТабЧастьРасходыПоКоличеству();
	
КонецПроцедуры // РаспределитьРасходыПоКоличеству()

&НаКлиенте
Процедура РаспределитьРасходыПоСумме(Команда)
	
	РаспределитьТабЧастьРасходыПоСумме();
	
КонецПроцедуры // РаспределитьРасходыПоСумме()

&НаКлиенте
Процедура РедактироватьЗачетПредоплаты(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале контрагента.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале договор контрагента.'"));
		Возврат;
	КонецЕсли;
	
	АдресПредоплатаВХранилище = ПоместитьПредоплатаВХранилище();
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("АдресПредоплатаВХранилище", АдресПредоплатаВХранилище);
	ПараметрыПодбора.Вставить("Подбор", ЭтоПоступлениеОтПоставщика(Объект.ВидОперации));
	ПараметрыПодбора.Вставить("ЕстьЗаказ", Истина);
	ПараметрыПодбора.Вставить("ЗаказВШапке", ЗаказВШапке);
	ПараметрыПодбора.Вставить("Компания", Компания);
	ПараметрыПодбора.Вставить("Заказ", ДанныеЗаказовДляПодбора());
	ПараметрыПодбора.Вставить("Дата", Объект.Дата);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыПодбора.Вставить("Договор", Объект.Договор);
	ПараметрыПодбора.Вставить("Курс", Объект.Курс);
	ПараметрыПодбора.Вставить("Кратность", Объект.Кратность);
	ПараметрыПодбора.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("СуммаДокумента", Объект.Запасы.Итог("Всего") + Объект.Расходы.Итог("Всего"));
	
	Если ЭтоПоступлениеОтПоставщика(Объект.ВидОперации) Тогда
		КодВозврата = Неопределено;
		ОткрытьФорму("ОбщаяФорма.ФормаПодбораАвансовПоставщикам", ПараметрыПодбора, , , , ,
			Новый ОписаниеОповещения("РедактироватьЗачетПредоплатыЗавершение1", ЭтотОбъект,
				Новый Структура("АдресПредоплатаВХранилище, ПараметрыПодбора", АдресПредоплатаВХранилище, ПараметрыПодбора)));
		Возврат;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя") Тогда
		ОткрытьФорму("ОбщаяФорма.ФормаПодбораАвансовПокупателей", ПараметрыПодбора, , , , ,
			Новый ОписаниеОповещения("РедактироватьЗачетПредоплатыЗавершение", ЭтотОбъект,
				Новый Структура("АдресПредоплатаВХранилище", АдресПредоплатаВХранилище)));
		Возврат;
	КонецЕсли;
	
	РедактироватьЗачетПредоплатыФрагмент1(АдресПредоплатаВХранилище, КодВозврата);
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеЗаказовДляПодбора()
	
	Если ЗаказВШапке Тогда
		Возврат Объект.Заказ;
	КонецЕсли;
	
	Результат = Новый Массив;
	Для каждого ТекЭлемент Из Объект.Запасы Цикл
		ДанныеЗаказа = Новый Структура;
		Если ТекЭлемент.Заказ = Неопределено Тогда
			ДанныеЗаказа.Вставить("Заказ", ПредопределенноеЗначение("Документ.ЗаказПоставщику.ПустаяСсылка"));
		Иначе
			ДанныеЗаказа.Вставить("Заказ", ТекЭлемент.Заказ);
		КонецЕсли;
		ДанныеЗаказа.Вставить("Всего", ТекЭлемент.Всего);
		Результат.Добавить(ДанныеЗаказа);
		
		ДанныеЗаказа = Новый Структура;
		Если ЗначениеЗаполнено(ТекЭлемент.ЗаказПокупателя) Тогда
			ДанныеЗаказа.Вставить("Заказ", ТекЭлемент.ЗаказПокупателя);
		Иначе
			ДанныеЗаказа.Вставить("Заказ", ПредопределенноеЗначение("Документ.ЗаказПокупателя.ПустаяСсылка"));
		КонецЕсли;
		
		ДанныеЗаказа.Вставить("Всего", ТекЭлемент.Всего);
		Результат.Добавить(ДанныеЗаказа);
		
	КонецЦикла;
	
	Для каждого ТекЭлемент Из Объект.Расходы Цикл
		ДанныеЗаказа = Новый Структура;
		ДанныеЗаказа.Вставить("Заказ", ТекЭлемент.ЗаказПоставщику);
		ДанныеЗаказа.Вставить("Всего", ТекЭлемент.Всего);
		Результат.Добавить(ДанныеЗаказа);
		
		ДанныеЗаказа = Новый Структура;
		ДанныеЗаказа.Вставить("Заказ", ТекЭлемент.Заказ);
		ДанныеЗаказа.Вставить("Всего", ТекЭлемент.Всего);
		Результат.Добавить(ДанныеЗаказа);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыЗавершение1(Результат, ДополнительныеПараметры) Экспорт
	
	АдресПредоплатаВХранилище = ДополнительныеПараметры.АдресПредоплатаВХранилище;
	
	КодВозврата = Результат;
	
	РедактироватьЗачетПредоплатыФрагмент1(АдресПредоплатаВХранилище, КодВозврата);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыФрагмент1(Знач АдресПредоплатаВХранилище, Знач КодВозврата)
	
	РедактироватьЗачетПредоплатыФрагмент(АдресПредоплатаВХранилище, КодВозврата);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	АдресПредоплатаВХранилище = ДополнительныеПараметры.АдресПредоплатаВХранилище;
	
	КодВозврата = Результат;
	
	РедактироватьЗачетПредоплатыФрагмент(АдресПредоплатаВХранилище, КодВозврата);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыФрагмент(Знач АдресПредоплатаВХранилище, Знач КодВозврата)
	
	Если КодВозврата <> КодВозвратаДиалога.OK Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоПоступлениеОтПоставщика(Объект.ВидОперации)
		ИЛИ ЭтоВозвратОтПокупателя(Объект.ВидОперации) Тогда
		ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Документ будет полностью перезаполнен по ""Основанию"". Продолжить?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДокументПоступления = Неопределено;
	
	ЗаполнитьПоДокументу(Объект.ДокументОснование);
	
	// Наборы
	Если ЭтоВозвратОтПокупателя(Объект.ВидОперации) Тогда
		ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы);
		
		Если ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
			РаботаСНоменклатуройКлиентУНФ.ВывестиОповещениеПользователяОбИзмененииРежимаНалогообложенияНаСДНС(ТребуетсяИзменениеНалогообложениеНаСНДС);
		КонецЕсли;
		
	КонецЕсли; 
	// Конец Наборы
	
	УстановитьВидимостьИДоступность();
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	
	Если Объект.ПроверятьРасхожденияСВходящимДокументом Тогда
		ОбработатьИзменениеНастроекРасхождений(
			Объект.ПринятьПоКолонке = ПредопределенноеЗначение("Перечисление.ПринятьПоКолонке.КоличествоПоФакту"));
	Иначе
		ОбновитьПодвалФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаказу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоЗаказуЗавершение", ЭтотОбъект);
	
	ПоказатьВопрос(
	ОписаниеОповещения,
	НСтр("ru = 'Документ будет полностью перезаполнен по ""Заказу"". Продолжить выполнение операции?'"),
	РежимДиалогаВопрос.ДаНет,
	0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаказуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоДокументу(Объект.Заказ);
		УстановитьВидимостьИДоступность();
		
		ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
			УчетВалютныхОпераций);
		
		ОбновитьПодвалФормы();
		
	Если ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
		РаботаСНоменклатуройКлиентУНФ.ВывестиОповещениеПользователяОбИзмененииРежимаНалогообложенияНаСДНС(ТребуетсяИзменениеНалогообложениеНаСНДС);
	КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект,
		Новый Структура("ТекШтрихкод", ТекШтрихкод));
	
	#Если МобильныйКлиент Тогда
		ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду", , , , , , ОбработкаЗавершения);
	#Иначе
		ПоказатьВводЗначения(ОбработкаЗавершения, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, СокрЛП(ДополнительныеПараметры.ТекШтрихкод), СокрЛП(Результат));
	
	Если ПустаяСтрока(ТекШтрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеШтрихкодов = Новый Структура;
	ДанныеШтрихкодов.Вставить("Штрихкод", ТекШтрихкод);
	ДанныеШтрихкодов.Вставить("Количество", 1);
	
	ПолученыШтрихкоды(ДанныеШтрихкодов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтотОбъект, ИмяТЧЗапасы());
	
КонецПроцедуры // ПолучитьВес()

&НаКлиенте
Процедура ПолучитьВесЗавершение(Параметры) Экспорт
	
	СтрокаТабличнойЧасти = Параметры;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧЗапасы(), СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", "Запасы");
	
	ПодключаемоеОборудованиеУНФКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина, ДополнительныеПараметры);
	
КонецПроцедуры

// Конец ПодключаемоеОборудование

&НаКлиенте
Процедура ШапкаТабличнаяЧасть(Команда)
	
	ОткрытьФормуНастройки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаФормы(Команда)
	
	ОткрытьФормуНастройки(Истина);
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элементы.ФормаНастройкаФормы, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСбросаКоличества(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтрокаПоиска", НСтр("ru = 'Сбрасывать количество при изменении номенклатуры'"));
	Оповещение = Новый ОписаниеОповещения("НастройкаСбросаКоличестваЗавершение", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.НастройкиПользователей.Форма.ФормаНастройкиПользователя", СтруктураПараметров, , , , ,
		Оповещение);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, 
		Элементы.ЗапасыКонтекстноеМенюНастройкаСбросаКоличества, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НастройкиКоличества = ПолучитьНастройкиИзмененияКоличества();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиКоличества);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаголовкиПоВидуОперации(ПараметрыДиалога)
	
	ПараметрыДиалога.Вставить("Заголовки", Новый Структура);
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера") Тогда
		ПараметрыДиалога.Заголовки.Вставить(
		"ПоложениеЗаказаПоставщикуВДокументахПоступления", 
		НСтр("ru = 'Положение заказа покупателя в документах возврата'"));
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку") Тогда
		ПараметрыДиалога.Заголовки.Вставить(
		"ПоложениеЗаказаПоставщикуВДокументахПоступления", 
		НСтр("ru = 'Положение заказа покупателя в документах поступления'"));
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика") Тогда
		ПараметрыДиалога.Заголовки.Вставить(
		"ПоложениеЗаказаПоставщикуВДокументахПоступления", 
		НСтр("ru = 'Положение заказа поставщику в документах возврата'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимГТД(Команда)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РежимГТД", "Пометка", НЕ Элементы.РежимГТД.Пометка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РежимГТДКонтекст", "Пометка", НЕ Элементы.РежимГТДКонтекст.Пометка);
	
	ИзменитьРежимРаботаГТД(Элементы.РежимГТД.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплатуСертификатом(Команда)
	
	ТекстПредупреждения = "";
	Если РаботаСПодарочнымиСертификатамиКлиентСервер.ИспользованиеСертификатовЗапрещено(
			Объект.ВалютаДокумента,
			УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеКонстанты("НациональнаяВалюта"),
			ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ДобавитьОплатуСертификатомЗавершение", ЭтаФорма);
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("КОплате", Объект.СуммаДокумента
										- Объект.Предоплата.Итог("СуммаРасчетов"));
	СтруктураПараметров.Вставить("Документ", Объект.Ссылка);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаОплатыСертификатом", СтруктураПараметров,,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплатуСертификатомЗавершение(Результат, Параметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		
		СтрокаОплаты = Объект.Предоплата.Добавить();
		
		СтрокаОплаты.ОплатаСертификатом	= Истина;
		СтрокаОплаты.Документ			= Результат.ПодарочныйСертификат;
		СтрокаОплаты.НомерСертификата	= Результат.НомерСертификата;
		СтрокаОплаты.СуммаРасчетов		= Результат.Сумма;
		
		СтрокаОплаты.Курс = 
			?(СтрокаОплаты.Курс = 0,
				?(Объект.Курс = 0,
				1,
				Объект.Курс),
			СтрокаОплаты.Курс);
			
		СтрокаОплаты.Кратность =
			?(СтрокаОплаты.Кратность = 0,
				?(Объект.Кратность = 0,
				1,
				Объект.Кратность),
			СтрокаОплаты.Кратность);
			
		СтрокаОплаты.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
			СтрокаОплаты.СуммаРасчетов,
			СтрокаОплаты.Курс,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
			СтрокаОплаты.Кратность,
			?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность));
		
		Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокОплаты(Объект.СпособЗачетаПредоплаты, Объект.Предоплата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомераГТДПодобрать(Команда)
	
	// Обход ошибки платформы 30160575,
	// когда обнуляются значения массива, который хранится в переменной формы.
	//
	// Идея проста: если массив обнулился, вернем его к исходному состоянию из переменной КопияМассива.
	КопияМассива = КэшЗначений.ОбрабатываемыеРеквизиты;
	
	НомераГТДПодобратьНаСервере(Истина);
	
	Если НЕ КопияМассива.Количество() = КэшЗначений.ОбрабатываемыеРеквизиты.Количество() Тогда
		
		КэшЗначений.ОбрабатываемыеРеквизиты = КопияМассива;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНомерГТД(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораНомераГТД", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ПриходнаяНакладная.Форма.ФормаВыбораНомераГТД", , ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораНомераГТД(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для каждого СтрокаТаблицыЗапасы Из Объект.Запасы Цикл
		
		Если Результат.ЭтоПоступлениеИзОднойСтраны Тогда
			
			СтрокаТаблицыЗапасы.СтранаПроисхождения = Результат.СтранаПроисхождения;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапасы.СтранаПроисхождения) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаТаблицыЗапасы.НомерГТД = Результат.НомерГТД;
		
	КонецЦикла;
	
	ОбновитьОтображениеПрослеживаемости();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКЗаказуВСервисе(Команда)
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДокументОснование", Объект.Ссылка);
	ПараметрыФормы.Вставить("ОрганизацияБизнесСети", Объект.Организация);
	ПараметрыФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыФормы.Вставить("ИдентификаторЗаказа", ИдентификаторЗаказаНаДоставку);
	ПараметрыФормы.Вставить("РежимМастера", 2);
	СервисДоставкиКлиент.ОткрытьФормуКарточкиЗаказаНаДоставку(ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", КэшЗначений.НаборСвойств_Документ_ПриходнаяНакладная);
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы, , , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрЧека(Команда)
	
	Если Модифицированность Тогда
		Если Объект.Проведен Тогда
			ТекстВопроса = НСтр("ru = 'Для выполнения команды ""Предварительный просмотр""
				|документ будет проведен. Продолжить?'");
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Провести и продолжить'"));
		Иначе
			ТекстВопроса = НСтр("ru = 'Для выполнения команды ""Предварительный просмотр""
				|документ будет записан. Продолжить?'");
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Записать и продолжить'"));
		КонецЕсли;
		Обработчик = Новый ОписаниеОповещения("ПредварительныйПросмотрЧекаПродолжение", ЭтотОбъект);
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки);
	Иначе
		ПредварительныйПросмотрЧекаПродолжение(Неопределено, "");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрЧекаПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда
		Если Объект.Проведен Тогда
			РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		Иначе
			РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		КонецЕсли;
		Если Не РезультатЗаписи Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПредварительныйПросмотрЧекаЗавершение", ЭтотОбъект);
		МассивОборудования = Новый Массив;
		МассивОборудования.Добавить("ФискальныйРегистратор");
		МассивОборудования.Добавить("ККТ");
		ОтборОборудования = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();
		ОтборОборудования.Вставить("ТипыПО", МассивОборудования);
		ОтборОборудования.Вставить("Организация", Объект.Организация);
		МенеджерОборудованияКлиент.ВыбратьУстройство(ОписаниеОповещения, ОтборОборудования,
				НСтр("ru='Выберите оборудование'"), НСтр("ru='Оборудование не подключено.'"));
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрЧекаЗавершение(РезультатВыбора, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		ИдентификаторУстройстваФР = РезультатВыбора.ИдентификаторУстройства;
	КонецЕсли;
	
	Если ИдентификаторУстройстваФР = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры = ПодготовитьДанныеДляПробитияЧека(ИдентификаторУстройстваФР);
	
	Если ОбщиеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры.ДатаВремя = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	РабочееМестоКассираКлиент.ПредпросмотрЧекаДенежныхДокументов(ОбщиеПараметры, ЭтаФорма, ИдентификаторУстройстваФР);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьТолькоРасхождения(Команда)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Запасы.ОтборСтрок = Неопределено Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ЕстьРасхождение", Истина);
		
		НайденныеСтроки = Объект.Запасы.НайтиСтроки(ПараметрыОтбора);
		
		Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Расхождения не найдены.'"),, "Объект.Запасы");
			Возврат;
		КонецЕсли;
		
		Элементы.Запасы.ОтборСтрок = Новый ФиксированнаяСтруктура(ПараметрыОтбора);
		Элементы.ЗапасыКонтекстноеМенюПоказыватьТолькоРасхождения.Пометка = Истина;
		Элементы.ПоказыватьТолькоРасхождения.Пометка = Истина;
		
		Элементы.ДекорацияОтборПоРасхождениям.Заголовок = ИнформацияОбОтборе(НСтр("ru = 'Расхождения'"));
		Элементы.ДекорацияОтборПоРасхождениям.Видимость = Истина;
		
	Иначе
		Элементы.Запасы.ОтборСтрок = Неопределено;
		Элементы.ЗапасыКонтекстноеМенюПоказыватьТолькоРасхождения.Пометка = Ложь;
		Элементы.ПоказыватьТолькоРасхождения.Пометка = Ложь;
		Элементы.ДекорацияОтборПоРасхождениям.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ЗапасыКонтекстноеМенюПоказатьДублиСтроки.Пометка = Ложь;
	Элементы.ДекорацияОтборПоДублям.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДублиСтроки(Команда)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Запасы.ОтборСтрок = Неопределено Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
		ПараметрыОтбора.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
		
		НайденныеСтроки = Объект.Запасы.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() <= 1 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Дубли строки не найдены.'"), , "Объект.Запасы");
			Возврат;
		КонецЕсли;
		
		Элементы.Запасы.ОтборСтрок = Новый ФиксированнаяСтруктура(ПараметрыОтбора);
		Элементы.ЗапасыКонтекстноеМенюПоказатьДублиСтроки.Пометка = Истина;
		
		Элементы.ДекорацияОтборПоДублям.Заголовок = ИнформацияОбОтборе(
		СтрШаблон(НСтр("ru = 'Дубли строки %1'"), СтрокаТабличнойЧасти.НомерСтроки));
		
		Элементы.ДекорацияОтборПоДублям.Видимость = Истина;
		
	Иначе
		Элементы.Запасы.ОтборСтрок = Неопределено;
		Элементы.ЗапасыКонтекстноеМенюПоказатьДублиСтроки.Пометка = Ложь;
		Элементы.ДекорацияОтборПоДублям.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ЗапасыКонтекстноеМенюПоказыватьТолькоРасхождения.Пометка = Ложь;
	Элементы.ПоказыватьТолькоРасхождения.Пометка = Ложь;
	Элементы.ДекорацияОтборПоРасхождениям.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
	"РазбитьСтрокуТабличнойЧастиЗавершение",
	ЭтотОбъект,
	СтрокаТабличнойЧасти);
	
	ПоказатьВводЧисла(ОписаниеОповещения,
	СтрокаТабличнойЧасти.Количество,
	НСтр("ru = 'Количество в новой строке'"),
	15, 3);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоКоличествуВЗаказе(Команда)
	
	КоличествоСтрокДоРаспределения = Объект.Запасы.Количество();
	ПередРаспределениемПоКоличествуВЗаказе();
	
	ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение(
		"Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьПоКоличествуВЗаказе");
	
	Если Не Элементы.ГруппаЗапасыИзменениеСтрок.Видимость Тогда
		ПоказатьСкрытьПанельРедактирования(ИмяТЧЗапасы(), Истина);
	КонецЕсли;
	ОпределитьОбъектИзменений(ИмяТЧЗапасы());
	ОбработатьТаблицу(ИмяТЧЗапасы());
	НастроитьОформлениеПанелиРедактирования(ИмяТЧЗапасы(), 4);
	
	ПослеРаспределенияПоКоличествуВЗаказе(КоличествоСтрокДоРаспределения);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПодобратьПоОстаткамКомиссия(Команда)
	
	Отказ = ЗаполнениеОстаткамиНеВозможно();
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаказПокупателя = Неопределено;
	
	Если Объект.ПоложениеЗаказаПоставщику = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке")
		И ЗначениеЗаполнено(Объект.Заказ) И ТипЗнч(Объект.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ЗаказПокупателя = Объект.Заказ
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыПодбора.Вставить("Договор", Объект.Договор);
	ПараметрыПодбора.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("ДатаДокумента", Объект.Дата);
	ПараметрыПодбора.Вставить("ЗаказПокупателя", ЗаказПокупателя);
	ПараметрыПодбора.Вставить("Проведен", Объект.Проведен);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	
	ОткрытьФорму("Документ.ОтчетКомиссионера.Форма.ФормаПодбораПоОстаткам", ПараметрыПодбора, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамКомиссия(Команда)
	
	Отказ = ЗаполнениеОстаткамиНеВозможно();
	Если Отказ Тогда Возврат КонецЕсли;
	
	Если Объект.Запасы.Количество() Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросОчиститьЗапасы", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Перед заполнением табличная часть будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура("ВыгрузитьВХранилище", Истина);
	
	ЗапасыПереданные = ТаблицаОстатковТоваровУКомиссионера(ПараметрыЗаполнения);
	
	ИдентификаторыНовыхСтрок = Новый Массив;
	ПолучитьЗапасыИзХранилищаКомиссия(ЗапасыПереданные, ИдентификаторыНовыхСтрок);
	
	ПараметрыРасчета = Новый Структура("РассчитатьЦену", Истина);
	
	Для Каждого ИдентификаторСтроки Из ИдентификаторыНовыхСтрок Цикл
		
		СтрокаТабличнойЧасти = Объект.Запасы.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда Продолжить КонецЕсли;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", СтрокаТабличнойЧасти, ПараметрыРасчета);
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Заказ) Тогда
			ЗаказыПокупателейИзКэша(СтрокаТабличнойЧасти.Заказ);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.Запасы.Количество() Тогда
		ЭтаФорма.Модифицированность = Истина;
		ОбновитьВидимостьПоляЗаказыПокупателей(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьЗапасы(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда Возврат КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура("ВыгрузитьВХранилище", Истина);
	
	ЗапасыПереданные = ТаблицаОстатковТоваровУКомиссионера(ПараметрыЗаполнения);
	
	ИдентификаторыНовыхСтрок = Новый Массив;
	ПолучитьЗапасыИзХранилищаКомиссия(ЗапасыПереданные, ИдентификаторыНовыхСтрок);
	
	ПараметрыРасчета = Новый Структура("РассчитатьЦену", Истина);
	
	Для Каждого ИдентификаторСтроки Из ИдентификаторыНовыхСтрок Цикл
		
		СтрокаТабличнойЧасти = Объект.Запасы.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда Продолжить КонецЕсли;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", СтрокаТабличнойЧасти, ПараметрыРасчета);
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Заказ) Тогда
			ЗаказыПокупателейИзКэша(СтрокаТабличнойЧасти.Заказ);
		КонецЕсли;
		
	КонецЦикла;
	
	ЭтаФорма.Модифицированность = Истина;
	ОбновитьВидимостьПоляЗаказыПокупателей(ЭтотОбъект);
	Если ПроверятьРасхожденияСЗаказом Тогда
		ОбновитьРасхождения();
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоЗаказамКомиссия(Команда)
	
	Отказ = ЗаполнениеОстаткамиНеВозможно();
	Если Отказ Тогда Возврат КонецЕсли;
	
	Если Не Объект.Запасы.Количество() Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Распределение производится по номенклатуре которая предварительно добавлена в таблицу.'"),, НСтр("ru = 'Добавьте номенклатуру в таблицу'"));
		Возврат
	КонецЕсли;
	
	РаспределитьПоЗаказамСервер();
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда Продолжить КонецЕсли;
		
		ПараметрыРасчета = Новый Структура("РассчитатьЦену", Истина);
		
		РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", СтрокаТабличнойЧасти, ПараметрыРасчета);
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Заказ) Тогда
			ЗаказыПокупателейИзКэша(СтрокаТабличнойЧасти.Заказ);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьВидимостьПоляЗаказыПокупателей(ЭтотОбъект);

КонецПроцедуры

#Область ИнтеграцияИС

// ИнтеграцияИС
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ПолеИнтеграцииИСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)

	ИнтеграцияИСКлиент.ОбработкаНавигационнойСсылкиВФормеДокументаОснования(
		ЭтотОбъект, Объект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);

КонецПроцедуры
// Конец ИнтеграцияИС

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВопросОчиститьЗапасыИЗаполнитьПоОрдерам(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда 
		Возврат 
	КонецЕсли;
	
	Объект.Запасы.Очистить();
	Объект.СведенияПрослеживаемости.Очистить();
	Объект.СерииНоменклатуры.Очистить();
	Объект.АкцизныеМарки.Очистить();
	
	Если Объект.ПоложениеДокументаПоступления = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке")
		И Не ЗначениеЗаполнено(Объект.ДокументПоступления) Тогда
		Объект.ПоложениеДокументаПоступления = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");
		ПриИзмененииВидаУчетаСклада(Истина);
	КонецЕсли;
		
	ИдентификаторыНовыхСтрок = Новый Массив;
	ЗагрузитьПоОстаткамНаСервере(ИдентификаторыНовыхСтрок);
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", СтрокаТабличнойЧасти);
	КонецЦикла;
	
	Если Объект.Запасы.Количество() Тогда
		ЭтаФорма.Модифицированность = Истина;
		ОбновитьПодвалФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПоОстаткамНаСервере(ИдентификаторыНовыхСтрок)
	
	ДополнительныеПараметры = Новый Структура("ПоложениеСклада, ПоложениеДокументаПоступления", Объект.ПоложениеСклада, Объект.ПоложениеДокументаПоступления);
	ЗапасыКПоступлению = СкладскойУчетСервер.ПолучитьТаблицуОстатковПоПриходнымОрдерам(Объект, ДополнительныеПараметры);
	ПолучитьЗапасыИзХранилища(ЗапасыКПоступлению, "Запасы", ИдентификаторыНовыхСтрок, Истина);
	СерииНоменклатурыУНФ.УдалитьСерииНоменклатурыВТабличнойЧастиВЗависимостиОтПолитики(Объект);
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПриходныеОрдераПоНоменклатуреСервер()
	
	ДополнительныеПараметры = Новый Структура("ПоложениеСклада, ПоложениеДокументаПоступления", Объект.ПоложениеСклада, Объект.ПоложениеДокументаПоступления);
	СкладскойУчетСервер.РаспределитьНоменклатуруПоОрдерам(ЭтотОбъект, ДополнительныеПараметры, "Запасы");
	СерииНоменклатурыУНФ.УдалитьСерииНоменклатурыВТабличнойЧастиВЗависимостиОтПолитики(Объект);
	
	ЭтаФорма.Модифицированность = Истина;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаУчетаСклада(ШапкаТабличнаяЧасть = Ложь)
	
	Если Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		
		Если ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
			Если Не ЗначениеЗаполнено(Объект.ПоложениеДокументаПоступления) Или Объект.ПоложениеДокументаПоступления = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
				Элементы.ГруппаДокументПоступления.Видимость = УчетОстатковПоСкладскимОрдерам;
				Элементы.ЗапасыДокументПоступления.Видимость = Ложь;
				Элементы.ЗаполнитьПриходныеОрдераПоНоменклатуре.Видимость = Ложь;
				
				Если ШапкаТабличнаяЧасть Тогда
					
					Если ЗначениеЗаполнено(Объект.ДокументПоступления) Тогда
						ДокументПоступленияВСтроке = Объект.ДокументПоступления;
					Иначе
						ДокументПоступленияВСтроке = Неопределено;
					КонецЕсли;
					
					Для Каждого СтрокаЗапасов Из Объект.Запасы Цикл
						СтрокаЗапасов.ДокументПоступления = ДокументПоступленияВСтроке;
					КонецЦикла;
					
				КонецЕсли;
				
			Иначе
				Элементы.ЗапасыДокументПоступления.Видимость = УчетОстатковПоСкладскимОрдерам;
				Элементы.ГруппаДокументПоступления.Видимость = Ложь;
				Элементы.ЗаполнитьПриходныеОрдераПоНоменклатуре.Видимость = УчетОстатковПоСкладскимОрдерам;
				
				Если ШапкаТабличнаяЧасть Тогда
					Объект.ДокументПоступления = Неопределено;
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			Элементы.ГруппаДокументПоступления.Видимость = Ложь;
			Элементы.ЗапасыДокументПоступления.Видимость = Ложь;
			
			Если ШапкаТабличнаяЧасть Тогда
				Для Каждого СтрокаЗапасов Из Объект.Запасы Цикл
					СтрокаЗапасов.ДокументПоступления = Неопределено;
				КонецЦикла;
				Объект.ДокументПоступления = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Если ШапкаТабличнаяЧасть Тогда
			
			Объект.ПоложениеДокументаПоступления = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
			Объект.ДокументПоступления = Неопределено;
			
			Для Каждого СтрокаЗапасов Из Объект.Запасы Цикл
				СтрокаЗапасов.ДокументПоступления = Неопределено;
			КонецЦикла;
			
		КонецЕсли;
		
		Элементы.ГруппаДокументПоступления.Видимость = Ложь;
		Элементы.ЗапасыДокументПоступления.Видимость = СкладскойУчетСервер.ПоказыватьКолонкуДокументПоступления(ЭтаФорма);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнениеПоОрдерамНеВозможно()
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Организация"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Организация", , Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Контрагент"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Контрагент", , Отказ);
	КонецЕсли;
	
	Если Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
		
		Если Не ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
			ТекстСообщения = НСтр("ru = 'Поле ""Склад"" не заполнено'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.СтруктурнаяЕдиница", , Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьКолонкиДокументаПоступления(Элемент, ПослеУдаления = Ложь)
	
	Если Элемент = Неопределено ИЛИ (ПослеУдаления Или (Не Элемент.ТекущийЭлемент = Неопределено 
		И (Элемент.ТекущийЭлемент.Имя = "ЗапасыНоменклатура" Или Элемент.ТекущийЭлемент.Имя = "ЗапасыСтруктурнаяЕдиница"))) Тогда
		
		Если Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
			
			ПараметрыПоиска = Новый Структура("УказыватьДокументПоступления", Истина);
			
			НайденныеСтроки = Объект.Запасы.НайтиСтроки(ПараметрыПоиска);
			Элементы.ЗапасыДокументПоступления.Видимость = НайденныеСтроки.Количество();
			Элементы.ЗаполнитьПриходныеОрдераПоНоменклатуре.Видимость = Элементы.ЗапасыДокументПоступления.Видимость;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УчетОстатковВРазрезеСкладскихОрдеров(СтруктурнаяЕдиница = Неопределено)
	
	Если НЕ СтруктурнаяЕдиница = Неопределено Тогда
		Возврат СкладскойУчетСервер.УчетОстатковВРазрезеСкладскихОрдеров(СтруктурнаяЕдиница);
	КонецЕсли;
	
	Если Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			МассивКонтроля = СкладскойУчетСервер.МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам(Объект.Запасы.Выгрузить(,"СтруктурнаяЕдиница"));
			Возврат МассивКонтроля.Количество();
	КонецЕсли;
	
	Возврат СкладскойУчетСервер.УчетОстатковВРазрезеСкладскихОрдеров(Объект.СтруктурнаяЕдиница);
	
КонецФункции

&НаСервере
Процедура ОбработатьСчетФактурыПослеЗаписиНаСервере()
	
	Если Не Объект.ЭтоУниверсальныйДокумент Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика
		И Не Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя Тогда
		Возврат;
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(Объект.НомерВходящегоДокумента) И ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента))
		Или Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура Тогда
		
		СчетФактураСсылка = СчетаФактурыУНФ.ПолучитьПодчиненныйСчетФактуру(Объект.Ссылка, Истина, Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура);
		СтруктураСистемаНалогообложения = Справочники.Организации.ПолучитьСистемуНалогообложения(Объект.Дата, Объект.Организация);
		
		Если СчетФактураСсылка = Неопределено 
			И СтруктураСистемаНалогообложения.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
			
			СчетФактураСоздана = Ложь;
			Если Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура Тогда
				
				ОшибкаПроверки = Ложь;
				
				Если Не ЗначениеЗаполнено(Объект.ДокументОснование)
					Или Не ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
					
					ОбщегоНазначения.СообщитьПользователю(НСтр("ru ='Корректировочный счет-фактура не создан. Необходимо выбрать документ основание ""Расходная накладная"".'"));
					ОшибкаПроверки = Истина;
				КонецЕсли;
				
				НайденныйСчетФактура = СчетаФактурыУНФВызовСервера.ПолучитьПодчиненныйСчетФактуру(Объект.ДокументОснование);
				Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РасходнаяНакладная") И Не ЗначениеЗаполнено(НайденныйСчетФактура) Тогда
					ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Для ввода корректировочной счет-фактуры у документа основания должна быть введена счет-фактура.'"));
					ОшибкаПроверки = Истина;
				КонецЕсли;
				
				Если Не ОшибкаПроверки Тогда
					ПараметрыСчетФактуры = СчетаФактурыУНФВызовСервера.СоздатьСчетФактуру(Объект.Ссылка, Объект.Дата);
					СчетФактураСоздана = Истина;
				КонецЕсли;
				
			Иначе
				
				ПараметрыСчетФактуры = СчетаФактурыУНФ.СоздатьСчетФактуру(Объект.Ссылка, Объект.ДатаВходящегоДокумента, Объект.НомерВходящегоДокумента);
				СчетФактураСоздана = Истина;
				
			КонецЕсли;
			
			Если СчетФактураСоздана Тогда
				КэшЗначений.Вставить("СчетФактураСсылка", ?(ТипЗнч(ПараметрыСчетФактуры) = Тип("Структура"), ПараметрыСчетФактуры.Ссылка, Неопределено));
				
				Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(КэшЗначений.СчетФактураСсылка, Истина,
				, Объект.ЭтоУниверсальныйДокумент, Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура);
			КонецЕсли;
			
		Иначе
			
			Если ТипЗнч(СчетФактураСсылка) = Тип("Структура") Тогда
				КэшЗначений.Вставить("СчетФактураСсылка", СчетФактураСсылка.Ссылка);
			ИначеЕсли ТипЗнч(СчетФактураСсылка) = Тип("ДокументСсылка.СчетФактураПолученный") Или ТипЗнч(СчетФактураСсылка) = Тип("ДокументСсылка.СчетФактура") Тогда
				КэшЗначений.Вставить("СчетФактураСсылка", СчетФактураСсылка);
			Иначе
				КэшЗначений.Вставить("СчетФактураСсылка", Неопределено);
			КонецЕсли;
			
			Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(КэшЗначений.СчетФактураСсылка, Истина,
			, Объект.ЭтоУниверсальныйДокумент, Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидОперацииВозврата()
	
	ВидОперацииВозврата = "";
	
	Если НЕ Параметры.Свойство("ВидОперации", ВидОперацииВозврата) Тогда
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя");
		Возврат;
	КонецЕсли;
	
	Если ВидОперацииВозврата = "ВозвратОтКомиссионера" Тогда
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера");
	ИначеЕсли ВидОперацииВозврата = "ВозвратОтПереработчика" Тогда
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика");
	ИначеЕсли ВидОперацииВозврата = "ВозвратСОтветХранения" Тогда
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратСОтветХранения");
	Иначе
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов()
	ДополнительныеСвойства = Новый Структура("ИзменениеКлючевыхРеквизитов", Истина);
	СерииНоменклатурыУНФ.ЗаполнитьПризнакиИспользованияСерий(Объект, ДополнительныеСвойства);
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыМобильноеПриложение()
	
	Если Не МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ВидОперации.Видимость = Ложь;
	Элементы.ФормаОбщаяКомандаНапомнить.Видимость = Ложь;
	Элементы.ГруппаГлобальныеКоманды.Видимость = Ложь;
	Элементы.ШапкаТабличнаяЧасть.Видимость = Ложь;
	Элементы.ЗаказКонтекстноеМенюШапкаТабличнаяЧасть.Видимость = Ложь;
	Элементы.СтруктурнаяЕдиницаКонтекстноеМенюШапкаТабличнаяЧасть.Видимость = Ложь;
	Элементы.ЯчейкаКонтекстноеМенюШапкаТабличнаяЧасть.Видимость = Ложь;
	Элементы.ЗапасыКонтекстноеМенюШапкаТабличнаяЧасть.Видимость = Ложь;
	Элементы.ПоказатьВЖурналеКонтрагентов.Видимость = Ложь;
	Элементы.ГруппаПредоплата.Видимость = Ложь;
	Элементы.ГруппаДополнительно.Видимость = Ложь;
	Элементы.ЗапасыИтогСуммаНДС.Видимость = Ложь;
	Элементы.ГруппаСсылки.Видимость = Ложь;
	Элементы.ГруппаЦеныИВалюта.Видимость = Ложь;
	Элементы.ЗапасыГруппаКопированиеСтрок.Видимость = Ложь;
	Элементы.ЗапасыЗапасыПодбор.Видимость = Ложь;
	Элементы.ЗапасыЗагрузкаИзФайлаЗапасы.Видимость = Ложь;
	Элементы.ЗапасыИзменитьСтроки.Видимость = Ложь;
	Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
	Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
	Элементы.ВключатьРасходыВСебестоимость.Видимость = Ложь;
	Элементы.РасходыГруппаКопированиеСтрок.Видимость = Ложь;
	Элементы.РасходыЗагрузкаИзФайлаУслуги.Видимость = Ложь;
	Элементы.РасходыИзменитьСтроки.Видимость = Ложь;
	Элементы.РасходыРасходыПодбор.Видимость = Ложь;
	Элементы.РасходыСтавкаНДС.Видимость = Ложь;
	Элементы.РасходыСуммаНДС.Видимость = Ложь;
	Элементы.ГруппаЗаказОснование.Видимость = Ложь;
	Элементы.РасходыЗаказПоставщику.Видимость = Ложь;
	Элементы.Скидки.Видимость = Ложь;
	Элементы.ЗапасыЗаполнениеКомиссия.Видимость = Ложь;
	Элементы.ФормаЗаписать.Видимость = Ложь;
	Элементы.ФормаПровести.Видимость = Ложь;
	Элементы.ФормаОтменаПроведения.Видимость = Ложь;
	Элементы.ФормаПоказатьВСписке.Видимость = Ложь;
	Элементы.ФормаКоманднаяПанельКомандыЭДО.Видимость = Ложь;
	Элементы.ФормаПровестиИЗакрыть.Заголовок = НСтр("ru = 'Готово'");
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьПоЗаказамСервер()
	
	РаботаСКомиссионерамиКомитентамиСервер.РаспределитьНоменклатуруПоЗаказам(ЭтотОбъект, Неопределено, "Запасы");

	ЭтаФорма.Модифицированность = Истина;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаСервере
Функция ТаблицаОстатковТоваровУКомиссионера(ПараметрыЗаполнения)
	Возврат РаботаСКомиссионерамиКомитентамиСервер.ТаблицаОстатковТоваровУКомиссионера(Объект, ПараметрыЗаполнения);
КонецФункции

&НаКлиенте
Функция ЗаполнениеОстаткамиНеВозможно() 
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Организация"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Организация", , Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Контрагент"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Контрагент", , Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Договор) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Договор"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Договор", , Отказ);
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуНастройки(ПередаватьВидДокумента)
	
	ЗаполнениеОбъектовУНФКлиент.ЗаполнитьПустыеПоложения(Объект, "ПоложениеЗаказаПоставщику, ПоложениеСклада");
	
	ЭтоОтветХранение = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаОтветХранение")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратСОтветХранения"));
	
	ПараметрыДиалога = Новый Структура;
	Если НЕ ЭтоОтветХранение Тогда
		
		Если Не (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера")
			И НеУчитыватьЗаказыПриПередачеНаКомиссию) Тогда
			ПараметрыДиалога.Вставить("ПоложениеЗаказаПоставщикуВДокументахПоступления", Объект.ПоложениеЗаказаПоставщику);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьПроекты Тогда
		ПараметрыДиалога.Вставить("ПоложениеПроекта", Объект.ПоложениеПроекта);
	КонецЕсли;
	
	ПараметрыДиалога.Вставить("ПоложениеСкладаВДокументахПоступления", Объект.ПоложениеСклада);
	
	ПараметрыДиалога.Вставить("БылиВнесеныИзменения", Ложь);
	
	Если ЭтоПоступлениеОтПоставщика(Объект.ВидОперации) Тогда
		ПараметрыДиалога.Вставить("ПроверятьРасхожденияСВходящимДокументом", Объект.ПроверятьРасхожденияСВходящимДокументом);
		ПараметрыДиалога.Вставить("ПроверятьРасхожденияСЗаказом", Объект.ПроверятьРасхожденияСЗаказом
			Или ПроверятьРасхожденияСЗаказом);
	КонецЕсли;
	ЗаполнитьЗаголовкиПоВидуОперации(ПараметрыДиалога);
	
	Если ПередаватьВидДокумента Тогда
		ПараметрыДиалога.Вставить("ВидДокумента", НСтр("ru = 'приходная накладная'"));
	КонецЕсли;
	
	ПараметрыДиалога.Вставить("ПоказыватьКолонкуСодержаниеВПриходнойНакладнойЗапасы",
		ПоказыватьКолонкуСодержаниеВПриходнойНакладнойЗапасы);

	ПараметрыДиалога.Вставить("ПоказыватьКолонкуСодержаниеВПриходнойНакладнойРасходы",
		ПоказыватьКолонкуСодержаниеВПриходнойНакладнойРасходы);
		
	Если Не ЗначениеЗаполнено(Объект.ПоложениеДокументаПоступления) Тогда 
		Объект.ПоложениеДокументаПоступления = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке");
	КонецЕсли;
	
	Если Элементы.ГруппаДокументПоступления.Видимость Или (Элементы.ЗапасыДокументПоступления.Видимость 
		И Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке")) Тогда
		ПараметрыДиалога.Вставить("ПоложениеДокументаПоступления", Объект.ПоложениеДокументаПоступления);
		ПараметрыДиалога.Вставить("Доступность", Новый Структура("ПоложениеДокументаПоступления", Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке")));
	ИначеЕсли Элементы.ЗапасыДокументПоступления.Видимость 
		И Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		ПараметрыДиалога.Вставить("ПоложениеДокументаПоступления", Объект.ПоложениеДокументаПоступления);
		ПараметрыДиалога.Вставить("Доступность", Новый Структура("ПоложениеДокументаПоступления", Ложь));
	Иначе
		ПараметрыДиалога.Вставить("Видимость", Новый Структура("ПоложениеДокументаПоступления", Ложь));
	КонецЕсли;
	
	Заголовки = Новый Структура("ПоложениеДокументаПоступления", "Положение приходного ордера");
	ПараметрыДиалога.Вставить("Заголовки", Заголовки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ШапкаТабличнаяЧастьЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ШапкаТабличнаяЧасть", ПараметрыДиалога, , , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ШапкаТабличнаяЧастьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Результат.Свойство("БылиВнесеныИзменения") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Результат.БылиВнесеныИзменения Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПоложениеЗаказаПоставщику(Результат.ПоложениеЗаказаПоставщикуВДокументахПоступления);
	
	Если Результат.Свойство("ПроверятьРасхожденияСВходящимДокументом")
			И Объект.ПроверятьРасхожденияСВходящимДокументом <> Результат.ПроверятьРасхожденияСВходящимДокументом Тогда
		Объект.ПроверятьРасхожденияСВходящимДокументом = Результат.ПроверятьРасхожденияСВходящимДокументом;
		ОбработатьИзменениеНастроекРасхождений(
			Объект.ПринятьПоКолонке = ПредопределенноеЗначение("Перечисление.ПринятьПоКолонке.КоличествоПоФакту"));
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.БылиИзмененыПерсональныеНастройки Тогда
		НастройкиКоличества = ПолучитьНастройкиИзмененияКоличества();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиКоличества);
	КонецЕсли;
	
	Если Результат.Свойство("ПоложениеПроекта") Тогда
		Если Объект.ПоложениеПроекта <> Результат.ПоложениеПроекта Тогда
			Объект.ПоложениеПроекта = Результат.ПоложениеПроекта;
			ЗаполнениеОбъектовУНФКлиент.ОбработатьИзменениеПоложения(Объект, "Расходы", "Проект", "ПоложениеПроекта");
		КонецЕсли;
	КонецЕсли;
	
	ПоказыватьКолонкуСодержаниеВПриходнойНакладнойЗапасы = 
		Результат.ПоказыватьКолонкуСодержаниеВПриходнойНакладнойЗапасы;

	ПоказыватьКолонкуСодержаниеВПриходнойНакладнойРасходы = 
		Результат.ПоказыватьКолонкуСодержаниеВПриходнойНакладнойРасходы;
		
	Если Результат.Свойство("ПоложениеДокументаПоступления")
		И Объект.ПоложениеДокументаПоступления <> Результат.ПоложениеДокументаПоступления Тогда
		Объект.ПоложениеДокументаПоступления = Результат.ПоложениеДокументаПоступления;
	КонецЕсли;
	
	ШапкаТабличнаяЧастьЗавершениеНаСервере(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПоложениеЗаказаПоставщику(ПоложениеЗаказаПоставщику)
	
	Если Объект.ПоложениеЗаказаПоставщику = ПоложениеЗаказаПоставщику Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПоложениеЗаказаПоставщику = ПоложениеЗаказаПоставщику;
	Если Объект.ПоложениеЗаказаПоставщику <> ПредопределенноеЗначение(
		"Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		Если Объект.Запасы.Количество() > 0 Тогда
			Объект.Заказ = ЗаполнениеОбъектовУНФКлиент.ЗначениеДляШапки(Объект.Запасы, "Заказ");
		ИначеЕсли Объект.Расходы.Количество() > 0 Тогда
			Объект.Заказ = ЗаполнениеОбъектовУНФКлиент.ЗначениеДляШапки(Объект.Расходы, "ЗаказПоставщику");
		Иначе
			Объект.Заказ = Неопределено;
		КонецЕсли;
	КонецЕсли;
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		СтрокаТабличнойЧасти.Заказ = Объект.Заказ;
	КонецЦикла;
	Для каждого СтрокаТабличнойЧасти Из Объект.Расходы Цикл
		СтрокаТабличнойЧасти.ЗаказПоставщику = Объект.Заказ;
	КонецЦикла;
	Заказ = Объект.Заказ;
	
	ЗаполнитьСоответствиеЗаказов();
	ОбновитьВидимостьПоляЗаказыПокупателей(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ШапкаТабличнаяЧастьЗавершениеНаСервере(Результат)
	
	Если Объект.ПоложениеСклада <> Результат.ПоложениеСкладаВДокументахПоступления Тогда
		Объект.ПоложениеСклада = Результат.ПоложениеСкладаВДокументахПоступления;
		Если Объект.ПоложениеСклада <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			СтруктураПолей = ЗаполнениеОбъектовУНФ.СтруктурнаяЕдиницаИЯчейкаДляШапки(Объект.Запасы);
			ЗаполнитьЗначенияСвойств(Объект, СтруктураПолей);
			Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
				Объект.СтруктурнаяЕдиница = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
					Пользователи.ТекущийПользователь(), 
					"ОсновнойСклад");
				Объект.Ячейка = Справочники.Ячейки.ПустаяСсылка();
			КонецЕсли; 
		КонецЕсли;
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
			СтрокаТабличнойЧасти.Ячейка = Объект.Ячейка;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьВидимостьОтПользовательскихНастроек();
	ЗаполнитьСписокДействий(ИмяТЧЗапасы());
	
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	
	Если Результат.Свойство("ПроверятьРасхожденияСЗаказом") Тогда
		УстановитьФлажокПроверятьРасхожденияСЗаказом(Результат.ПроверятьРасхожденияСЗаказом);
	КонецЕсли;
	
	Если ПроверятьРасхожденияСЗаказом Тогда
		ОбновитьРасхождения();
	КонецЕсли;

	ПриИзмененииВидаУчетаСклада(Истина);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры

// Устанавливает флажок "Проверять расхождения с заказом" если он доступен.
// Также значение сохраняется в реквизите формы "ПроверятьРасхожденияСЗаказом"
// и используется в дальнейшем при заполнении заказа.
// 
// Параметры:
// 	ЗначениеФлажка - Булево
&НаСервере
Процедура УстановитьФлажокПроверятьРасхожденияСЗаказом(Знач ЗначениеФлажка)
	
	ПроверятьРасхожденияСЗаказом = ЗначениеФлажка;
	
	Если Элементы.ПроверятьРасхожденияСЗаказом.Доступность Тогда
		Объект.ПроверятьРасхожденияСЗаказом = ПроверятьРасхожденияСЗаказом;
	Иначе 
		Объект.ПроверятьРасхожденияСЗаказом = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПослеПереключенияСкладШапка()
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьТаблицуПоШапке(Объект, ИмяТЧЗапасы(), "СтруктурнаяЕдиница", "ПоложениеСклада");
	Если КэшЗначений.УчетПоЯчейкам Тогда
		ЗаполнениеОбъектовУНФ.ЗаполнитьТаблицуПоШапке(Объект, ИмяТЧЗапасы(), "Ячейка", "ПоложениеСклада");
	КонецЕсли; 
	УстановитьВидимостьОтПользовательскихНастроек();
	ЗаполнитьСписокДействий(ИмяТЧЗапасы());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиПараметровВыбораДоступныеТипы()
	
	Массив = Новый Массив();
	Массив.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
	Массив.Добавить(Тип("ДокументСсылка.Взаимозачет")); // Корректировка долга
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя") Тогда
		Массив.Добавить(Тип("ДокументСсылка.ОперацияПоПлатежнымКартам"));
	КонецЕсли;
	Массив.Добавить(Тип("ДокументСсылка.ПоступлениеВКассу"));
	Массив.Добавить(Тип("ДокументСсылка.ПоступлениеНаСчет"));
	Массив.Добавить(Тип("ДокументСсылка.РасходИзКассы"));
	Массив.Добавить(Тип("ДокументСсылка.РасходСоСчета"));
	Массив.Добавить(Тип("ДокументСсылка.ЧекККМ"));
	Массив.Добавить(Тип("ДокументСсылка.ОтчетКомиссионера"));
	Массив.Добавить(Тип("ДокументСсылка.РасходнаяНакладная"));
	Массив.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
	Массив.Добавить(Тип("ДокументСсылка.КорректировкаПоступления"));
	Массив.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
	
	ДопустимыеТипы = Новый ОписаниеТипов(Массив, , );
	Элементы.ПредоплатаДокумент.ОграничениеТипа = ДопустимыеТипы;
	
КонецПроцедуры // УстановитьСвязиПараметровВыбораДоступныеТипы()

&НаКлиенте
Процедура ОбработатьИзмененияРеквизитовПечати(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ПечатьДокументовУНФКлиент.ОбновитьЗначенияРеквизитовПечати(ЭтотОбъект, Результат.ИзмененныеРеквизиты);
		
		Если Результат.Свойство("Команда") Тогда
			
			Подключаемый_ВыполнитьКоманду(Результат.Команда);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик выбора типа основания
//
// Параметры:
//  ТипОснования - ЭлементСпискаЗначений - элемент списка типов оснований
//  Параметры - Неопределено - не используется
//
&НаКлиенте
Процедура ВыборТипаОснованияЗавершение(ТипОснования, Параметры) Экспорт
	
	Если ТипОснования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
	Если ТипОснования.Значение = "Документ.ТТНВходящаяЕГАИС.ФормаВыбора" Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", Объект.Организация);
		Отбор.Вставить("ТорговыйОбъект", Объект.СтруктурнаяЕдиница);
		Отбор.Вставить("ПоставщикКонтрагент", Объект.Контрагент);
		Отбор.Вставить("ТолькоБезПоступлений", Истина);
		Отбор.Вставить("ТолькоСопоставленныеТовары", Ложь);
		Отбор.Вставить("ТекущееПоступление", Объект.Ссылка);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		ОткрытьФорму(ТипОснования.Значение, ПараметрыФормы, ЭтотОбъект,,,, ОповещениеОЗакрытии);
	Иначе
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Контрагент", Контрагент);
		СтруктураОтбора.Вставить("Договор", Договор);
		Если ТипОснования.Значение = "Документ.ПоступлениеНаСчет.ФормаВыбора" Тогда
			СтруктураОтбора.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.ОтКурьерскойКомпанииПочты"));
		КонецЕсли;
		
		СтруктураПараметровОтбора = Новый Структура();
		СтруктураПараметровОтбора.Вставить("Отбор", СтруктураОтбора);
		
		Если ТипОснования.Значение = "Документ.СчетНаОплату.ФормаВыбора" Тогда
			СтруктураПараметровОтбора.Вставить("РежимВыбора", Истина);
		КонецЕсли; 
		
		ОткрытьФорму(ТипОснования.Значение, СтруктураПараметровОтбора, ЭтотОбъект,,,, ОповещениеОЗакрытии);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснованиеЗавершение(ВыбранноеОснование, Параметры) Экспорт
	
	Если ВыбранноеОснование = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДокументОснование = ВыбранноеОснование;
	Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(ВыбранноеОснование);
	Модифицированность = Истина;
	
	ДокументОснованиеПриИзменении();
	
	ЗаполнитьПоОснованиюНачало();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюНачало() Экспорт

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения, 
		НСтр("ru = 'Заполнить документ по выбранному основанию?'"),
		РежимДиалогаВопрос.ДаНет, 0);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументу(ДокОснование)

	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(ДокОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
	// Прослеживаемость
	ОбновитьОтображениеПрослеживаемости();
	// Конец Прослеживаемость
	
	Если ЭтоВозвратОтПокупателя(Объект.ВидОперации) И ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию") Тогда
		
		Если Не Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
			Если РаботаСКомиссионерамиКомитентамиСервер.ВТабличнойЧастиЕстьКомиссионнаяПартияСНалогообложениемНДС(Объект) Тогда
				ТребуетсяИзменениеНалогообложениеНаСНДС = Истина;
				Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
				ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
				ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
				УчетВалютныхОпераций);
			КонецЕсли;
		ИначеЕсли РаботаСКомиссионерамиКомитентамиСервер.ВТабличнойЧастиЕстьКомиссионнаяПартияСНалогообложением(Объект) Тогда
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		
		Элементы.РасходыСтавкаНДС.Видимость = Истина;
		Элементы.РасходыСуммаНДС.Видимость = Истина;
		Элементы.РасходыВсего.Видимость = Истина;
		Элементы.СчетФактураНадпись.Видимость = Истина;
		
	Иначе
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		
		Элементы.РасходыСтавкаНДС.Видимость = Ложь;
		Элементы.РасходыСуммаНДС.Видимость = Ложь;
		Элементы.РасходыВсего.Видимость = Ложь;
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НаЭкспорт Тогда
			Элементы.СчетФактураНадпись.Видимость = Истина;
		Иначе
			Элементы.СчетФактураНадпись.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСчетФактураНомерДата", "Видимость"
	, Элементы.СчетФактураНадпись.Видимость И Не ЗначениеЗаполнено(КэшЗначений.СчетФактураСсылка) И Не Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНДС", "Видимость"
	, Элементы.СчетФактураНадпись.Видимость И Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя);
	
	УстановитьВидимостьДоговора();
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	//Ячейки
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	// Конец Ячейки
	
	ОбновитьРасхождения();
	
	ЗаполнитьСоответствиеЗаказов();
	ОбновитьВидимостьПоляЗаказыПокупателей(ЭтотОбъект);
	
КонецПроцедуры // ЗаполнитьПоДокументу()

&НаКлиенте
Процедура ОчиститьОснованиеПриИзменениеКонтрагентаДоговора()
	
	Если НЕ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПриходныйОрдер") 
		И НЕ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЧекККМ")
		И НЕ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		
		Объект.ДокументОснование = Неопределено;
		
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Объект.ДокументОснование);
		
	КонецЕсли;
	
КонецПроцедуры // ОчиститьОснованиеПриИзменениеКонтрагентаДоговора()

&НаСервере
Процедура РаспределитьТабЧастьРасходыПоКоличеству()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.РаспределитьТабЧастьРасходыПоКоличеству();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	// Прослеживаемость
	ОбновитьОтображениеПрослеживаемости(); 
	// Конец Прослеживаемость
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	//Ячейки
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	// Конец Ячейки
	
	ОбновитьРасхождения();
	
КонецПроцедуры // РаспределитьТабЧастьРасходыПоКоличеству()

&НаСервере
Процедура РаспределитьТабЧастьРасходыПоСумме()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.РаспределитьТабЧастьРасходыПоСумме();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	// Прослеживаемость
	ОбновитьОтображениеПрослеживаемости(); 
	// Конец Прослеживаемость
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	//Ячейки
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	// Конец Ячейки
	
	ОбновитьРасхождения();
	
КонецПроцедуры // РаспределитьТабЧастьРасходыПоСумме()

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты)
	
	ДокументыУНФ.ДатаПриИзменении(ДанныеДляИзмененияДаты, ЭтотОбъект, Объект);
	
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
	// Прослеживаемость
	КэшЗначений.Вставить("ВестиУчетПрослеживаемыхТоваров", ВестиУчетПрослеживаемыхТоваров());
	ОбновитьПризнакПрослеживаемости();
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ДокументыУНФ.ОрганизацияПриИзменении(ЭтотОбъект, Объект);
	
	Объект.Договор = Справочники.ДоговорыКонтрагентов.ПоДокументуКонтрагентуОрганизацииИВидуОперации(Объект.Ссылка,
		Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
	
	ОпределитьВидимостьНастроекУчетаВНалогообложении();
	ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов();
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	// Наборы
	Если НЕ СтруктураДанные.Свойство("ЕдиницаИзмерения") Тогда
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	КонецЕсли; 
	Если НЕ СтруктураДанные.Свойство("Коэффициент") Тогда
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения)=Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
		Иначе
			СтруктураДанные.Вставить("Коэффициент", 1);
		КонецЕсли; 
	КонецЕсли;
	// Конец Наборы
	
	СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
	
	ЭтоВозвратПокупателя = СтруктураДанные.Свойство("ВидОперации") И ЭтоВозвратОтПокупателя(СтруктураДанные.ВидОперации);
	
	Если Не СтруктураДанные.Свойство("ЕстьПартииСНДС") Тогда
		СтруктураДанные.Вставить("ЕстьПартииСНДС", Ложь);
	КонецЕсли;
	
	Если ЭтоВозвратПокупателя Тогда
		
		ДатаОбработки = ?(СтруктураДанные.Свойство("ДатаОбработки"), ДатаОбработки, ТекущаяДатаСеанса());
		НалогообложениеНДСОрганизации = НалогиУНФ.НалогообложениеНДС(СтруктураДанные.Организация,, ДатаОбработки);
		
	Если СтруктураДанные.Свойство("НалогообложениеНДС")
		И (НЕ СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС")
		ИЛИ (НалогообложениеНДСОрганизации = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") И СтруктураДанные.ЕстьПартииСНДС)) Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС")
			ИЛИ (НалогообложениеНДСОрганизации = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") И СтруктураДанные.ЕстьПартииСНДС) Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли
			
		ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.ВидСтавкиНДС) Тогда
			СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Номенклатура.ВидСтавкиНДС));
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Организация.ВидСтавкиНДСПоУмолчанию));
		КонецЕсли;
		
	Иначе
		
		Если СтруктураДанные.Свойство("НалогообложениеНДС") 
			И НЕ СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
			
			Если СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
				СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
			Иначе
				СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.ВидСтавкиНДС) Тогда
			СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки), СтруктураДанные.ДатаОбработки, ТекущаяДатаСеанса())));
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки), СтруктураДанные.ДатаОбработки, ТекущаяДатаСеанса())));
		КонецЕсли;
		
	КонецЕсли;
	
	// Характеристики
	СтруктураДанные.Вставить("ИспользоватьХарактеристики",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",Ложь);
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьХарактеристики
		Тогда
		ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура);
		
		Если Не ЗначенияПоУмолчанию = Неопределено
			Тогда
			ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
		КонецЕсли;
		
		Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика",ХарактеристикаПоУмолчанию);
		Иначе
			СтруктураДанные.Характеристика = ?(ЗначениеЗаполнено(СтруктураДанные.Характеристика), СтруктураДанные.Характеристика, ХарактеристикаПоУмолчанию);
		КонецЕсли;
		
		СтруктураДанные.Вставить("ИспользоватьХарактеристики",Истина);
		СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",СтруктураДанные.Номенклатура.ПроверятьЗаполнениеХарактеристики);
	КонецЕсли; 
	// Конец Характеристики
	
	Если СтруктураДанные.Свойство("Цена") И ЗначениеЗаполнено(СтруктураДанные.Цена) Тогда
		// При подборе наборов расчет цены не требуется - используется цена, указанная в подборе
	ИначеЕсли СтруктураДанные.Свойство("ВидЦенКонтрагента") Тогда
		
		Если СтруктураДанные.Свойство("Характеристика") И СтруктураДанные.Характеристика = Неопределено Тогда
			СтруктураДанные.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка()
		ИначеЕсли НЕ СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика",Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		КонецЕсли;
		
		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦенКонтрагента(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
		
	ИначеЕсли СтруктураДанные.Свойство("ВидЦен") Тогда
		
		Если СтруктураДанные.Свойство("Характеристика") И СтруктураДанные.Характеристика = Неопределено Тогда
			СтруктураДанные.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка()
		ИначеЕсли НЕ СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика",Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		КонецЕсли;
		
		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("ОчиститьЗаказИПодразделение", Ложь);
	СтруктураДанные.Вставить("ОчиститьНаправлениеДеятельности", Ложь);
	СтруктураДанные.Вставить("НаправлениеДеятельности", СтруктураДанные.Номенклатура.НаправлениеДеятельности);
	
	Если СтруктураДанные.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Расходы
	   И СтруктураДанные.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.ПрочиеРасходы
	   И СтруктураДанные.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Доходы
	   И СтруктураДанные.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.НезавершенноеПроизводство
	   И СтруктураДанные.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.КосвенныеЗатраты Тогда
		СтруктураДанные.ОчиститьЗаказИПодразделение = Истина;
	КонецЕсли;
	
	Если СтруктураДанные.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Расходы
	   И СтруктураДанные.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.СебестоимостьПродаж
	   И СтруктураДанные.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Доходы Тогда
		СтруктураДанные.ОчиститьНаправлениеДеятельности = Истина;
	КонецЕсли;
	
	НеобходимостьВводаАкцизнойМарки = Ложь;
	ДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураДанные.Номенклатура, "ВидАлкогольнойПродукции, ПродаетсяВРозлив");
	Если ЗначениеЗаполнено(ДанныеНоменклатуры.ВидАлкогольнойПродукции) Тогда
		НеобходимостьВводаАкцизнойМарки = Не ДанныеНоменклатуры.ПродаетсяВРозлив
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеНоменклатуры.ВидАлкогольнойПродукции, "Маркируемый")
	КонецЕсли;
	СтруктураДанные.Вставить("НеобходимостьВводаАкцизнойМарки", НеобходимостьВводаАкцизнойМарки);
	
	СтруктураДанные.Вставить("Склад", СтруктураДанные.Номенклатура.Склад);
	СтруктураДанные.Вставить("Ячейка", СтруктураДанные.Номенклатура.Ячейка);
	
	// Наборы
	Если ЭтоВозвратПокупателя Тогда
		НаборыСервер.ДобавитьИнформациюОНабореПриПолученииДанныхНоменклатуры(СтруктураДанные);
	Иначе
		СтруктураДанные.Вставить("ЭтоНабор", СтруктураДанные.Номенклатура.ЭтоНабор);
	КонецЕсли; 
	// Конец Наборы
	
	//Партии
	СтруктураДанные.Вставить("ИспользоватьПартии",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеПартий",Ложь);
	
	Если Не СтруктураДанные.Свойство("ТребуетсяИзменениеНалогообложениеНаСНДС") Тогда
		СтруктураДанные.Вставить("ТребуетсяИзменениеНалогообложениеНаСНДС", Ложь);
	КонецЕсли;
	
	Если НЕ СтруктураДанные.Свойство("Партия") Тогда
		СтруктураДанные.Вставить("Партия", Неопределено);
	КонецЕсли;
	
	Если НЕ СтруктураДанные.Свойство("КомиссияСНДС") Тогда
		СтруктураДанные.Вставить("КомиссияСНДС", Ложь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьПартии
		Тогда
		СтатусПартии = НоменклатураВДокументахСервер.СоответствиеВидаОперацииИлиХозОперацииСтатусуПартии(Неопределено, СтруктураДанные.ВидОперации);
		ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтатусПартии,СтруктураДанные.Контрагент);
		
		ПартияПоУмолчанию = Справочники.ПартииНоменклатуры.ПустаяСсылка();
		
		Если Не ЗначенияПартииПоУмолчанию = Неопределено
			Тогда
			ПартияПоУмолчанию = ЗначенияПартииПоУмолчанию;
		КонецЕсли;
		
		СтруктураДанные.Партия = ?(ЗначениеЗаполнено(СтруктураДанные.Партия), СтруктураДанные.Партия, ПартияПоУмолчанию);
		
		СтруктураДанные.ПроверятьЗаполнениеПартий = СтруктураДанные.Номенклатура.ПроверятьЗаполнениеПартий;
		СтруктураДанные.ИспользоватьПартии = Истина;
		
		Если ЭтоВозвратПокупателя Тогда
			
			Если Не СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
				РаботаСКомиссионерамиКомитентамиСервер.СкорректироватьСтавкуНДСКомиссионногоТовара(СтруктураДанные);
			КонецЕсли;
			
			СтруктураДанные.КомиссияСНДС = СтруктураДанные.Партия.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
			
		КонецЕсли;
		
	КонецЕсли;
	// Конец Партии
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьСерииНоменклатуры Тогда
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", СерииНоменклатурыУНФ.СтатусСерийНоменклатурыПриИзменении(СтруктураДанные));
	Иначе
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", 0);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ПроверятьРасхожденияСЗаказом") Тогда
		СтруктураДанные.Вставить("КоличествоВЗаказе", КоличествоВЗаказе(СтруктураДанные));
	КонецЕсли;
	
	// Прослеживаемость
	СтруктураДанные.Вставить("ПрослеживаемыйТовар", СтруктураДанные.Номенклатура.ПрослеживаемыйТовар
		И СтруктураДанные.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас);
	СтруктураДанные.Вставить("ПрослеживаемыйКомплект", СтруктураДанные.Номенклатура.ПрослеживаемыйКомплект
		И СтруктураДанные.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас);
	// Конец Прослеживаемость
	
	СтруктураДанные.Вставить("УказыватьДокументПоступления", СкладскойУчетСервер.УказыватьДокументПоступления(СтруктураДанные.Склад));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервереБезКонтекста
Функция КоличествоВЗаказе(СтруктураДанные)
	
	Если Не СтруктураДанные.ПроверятьРасхожденияСЗаказом Тогда
		Возврат СтруктураДанные.КоличествоВЗаказе;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ЗаказыПоставщикамОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, Организация = &Организация
	|	И ЗаказПоставщику = &ЗаказПоставщику
	|	И Номенклатура = &Номенклатура
	|	И Характеристика = &Характеристика) КАК ЗаказыПоставщикамОстатки");
	Запрос.УстановитьПараметр("Организация", СтруктураДанные.Организация);
	Запрос.УстановитьПараметр("ЗаказПоставщику", СтруктураДанные.Заказ);
	Запрос.УстановитьПараметр("Номенклатура", СтруктураДанные.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", СтруктураДанные.Характеристика);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КоличествоОстаток;
	
КонецФункции 

&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	Если СтруктураДанные.Свойство("ВидЦенКонтрагента") Тогда
		
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
		Иначе
			СтруктураДанные.Вставить("Коэффициент", 1);
		КонецЕсли;
		
		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦенКонтрагента(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
		
	ИначеЕсли СтруктураДанные.Свойство("ВидЦен") Тогда
	
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
		Иначе
			СтруктураДанные.Вставить("Коэффициент", 1);
		КонецЕсли;
		
		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		
	КонецЕсли;
	
	// Наборы
	Если СтруктураДанные.Свойство("ВидОперации") И ЭтоВозвратОтПокупателя(СтруктураДанные.ВидОперации) Тогда
		НаборыСервер.ДобавитьИнформациюОНабореПриПолученииДанныхНоменклатуры(СтруктураДанные);
	КонецЕсли;
	// Конец Наборы
	
	Если СтруктураДанные.Свойство("ПроверятьРасхожденияСЗаказом") Тогда
		СтруктураДанные.Вставить("КоличествоВЗаказе", КоличествоВЗаказе(СтруктураДанные));
	КонецЕсли;
	
	Возврат СтруктураДанные;

КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура;
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеНаправлениеДеятельностиНачалоВыбора(Номенклатура)
	
	СтруктураДанные = Новый Структура;
	
	ВозможностьУказанияНаправленияДеятельности = Истина;
	
	Если Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Расходы
	   И Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.СебестоимостьПродаж
	   И Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Доходы Тогда
		ВозможностьУказанияНаправленияДеятельности = Ложь;
	КонецЕсли;
	
	СтруктураДанные.Вставить("ВозможностьУказанияНаправленияДеятельности", ВозможностьУказанияНаправленияДеятельности);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНаправлениеДеятельностиНачалоВыбора()

&НаСервереБезКонтекста
Функция ПолучитьДанныеСтруктурнаяЕдиницаНачалоВыбора(Номенклатура)
	
	СтруктураДанные = Новый Структура;
	
	ВозможностьУказанияПодразделения = Истина;
	
	Если Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Расходы
	   И Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.ПрочиеРасходы
	   И Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Доходы
	   И Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.НезавершенноеПроизводство
	   И Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.КосвенныеЗатраты Тогда
		ВозможностьУказанияПодразделения = Ложь;
	КонецЕсли;
	
	СтруктураДанные.Вставить("ВозможностьУказанияПодразделения", ВозможностьУказанияПодразделения);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеСтруктурнаяЕдиницаНачалоВыбора()

&НаСервереБезКонтекста
Функция ПолучитьДанныеЗаказНачалоВыбора(Номенклатура)
	
	СтруктураДанные = Новый Структура;
	
	ВозможностьУказанияЗаказа = Истина;
	
	Если Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Расходы
	   И Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Доходы
	   И Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.НезавершенноеПроизводство
	   И Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.КосвенныеЗатраты Тогда
		ВозможностьУказанияЗаказа = Ложь;
	КонецЕсли;
	
	СтруктураДанные.Вставить("ВозможностьУказанияЗаказа", ВозможностьУказанияЗаказа);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеСтруктурнаяЕдиницаНачалоВыбора()

&НаСервере
Функция ДанныеКонтрагентаДляИзменения(Знач Дата, Знач Контрагент, Знач Организация)
	
	ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПоДокументуКонтрагентуОрганизацииИВидуОперации(Объект.Ссылка,
		Контрагент, Организация, Объект.ВидОперации);
	
	Результат = Новый Структура;
	Результат.Вставить("Договор", ДоговорПоУмолчанию);
	
	ДанныеДоговора = ДанныеДоговораДляИзменения(ДатаДокумента, ДоговорПоУмолчанию, Объект.Контрагент);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат, ДанныеДоговора);
	
	Результат.Вставить("КонтактноеЛицоПодписант", Контрагент.КонтактноеЛицоПодписант);
	
	Если ПолучитьФункциональнуюОпцию("УчетПоПроектам") И ЗначениеЗаполнено(ДоговорПоУмолчанию) И Не ЗначениеЗаполнено(
		Объект.Проект) Тогда
		Результат.Вставить("Проект", Справочники.Проекты.ПолучитьПроектПоДоговору(ДоговорПоУмолчанию));
	КонецЕсли;
	
	УстановитьВидимостьДоговора();
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ДанныеКИКонтрагента = Справочники.Контрагенты.ДанныеКИКонтрагентаДляВыбораНаФорме(Контрагент,
			Элементы, ПоляКИДляОтправкиЧека());
		ЗаполнитьПоляКИДляОтправкиЧекаПоУмолчанию(ДанныеКИКонтрагента);
	КонецЕсли;
	
	Результат.Вставить(
		"НеУчитыватьЗаказыПриПередачеНаКомиссию",
		?(ЗначениеЗаполнено(ДоговорПоУмолчанию), ДоговорПоУмолчанию.НеУчитыватьЗаказыПриПередачеНаКомиссию, Ложь));
		
	// Прослеживаемость
	Результат.Вставить(
		"ПоставщикРезидентТаможенногоСоюза",
		Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Объект.Контрагент));
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеДоговораДляИзменения(Знач Дата, Знач Договор, Знач Контрагент)
	
	Результат = Новый Структура;
	Результат.Вставить("ВалютаРасчетов", Договор.ВалютаРасчетов);
	Результат.Вставить("ВалютаРасчетовКурсКратность", РаботаСКурсамиВалют.ПолучитьКурсВалюты(Договор.ВалютаРасчетов,
		Дата));
	Результат.Вставить("РасчетыВУсловныхЕдиницах", Договор.РасчетыВУсловныхЕдиницах);
	Результат.Вставить("ВидЦенКонтрагента", Договор.ВидЦенКонтрагента);
	Результат.Вставить("РегистрироватьЦеныПоставщика", Ложь);
	Если ЗначениеЗаполнено(Результат.ВидЦенКонтрагента) И ЗначениеЗаполнено(Договор) Тогда
		Результат.РегистрироватьЦеныПоставщика = Договор.АвтоматическиРегистрироватьЦены;
	КонецЕсли;
	Результат.Вставить("СуммаВключаетНДС", Неопределено);
	Если ЗначениеЗаполнено(Договор.ВидЦенКонтрагента) Тогда
		Результат.СуммаВключаетНДС = Договор.ВидЦенКонтрагента.ЦенаВключаетНДС;
	КонецЕсли;
	Результат.Вставить("УчетЦенКонтрагентов", ПолучитьФункциональнуюОпцию("УчетЦенКонтрагентов"));
	Результат.Вставить("СпособЗачетаПредоплаты", РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляДоговора(
		Договор, Контрагент, Истина));
	Результат.Вставить("СпособЗаполненияСтавкиНДС", Справочники.ДоговорыКонтрагентов.СпособЗаполненияСтавкиНДСПоДоговору(
			Договор));
	Результат.Вставить("НеУчитыватьЗаказыПриПередачеНаКомиссию", Договор.НеУчитыватьЗаказыПриПередачеНаКомиссию);
	Результат.Вставить("ВидЦен", Договор.ВидЦен);
	
	ПараметрыДоговора = Справочники.ДоговорыКонтрагентов.ПараметрыДоговора(Договор);
	Результат.Вставить("ЭтоУниверсальныйДокумент", ПараметрыДоговора.ЭтоУниверсальныйДокумент);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ДокументОснованиеПриИзменении()

	Элементы.ЗапасыСебестоимость.Видимость = ВидимостьКолонкиЗапасыСебестоимость();
	Если Элементы.ЗапасыСебестоимость.Видимость Тогда
		Возврат;
	КонецЕсли;

	Для Каждого СтрокаЗапасы Из Объект.Запасы Цикл
		СтрокаЗапасы.Себестоимость = 0;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ВидимостьКолонкиЗапасыСебестоимость()
	
	Если Не ЭтоВозвратОтПокупателя(Объект.ВидОперации) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЧекККМ") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя")
			И ЭтоЗаказНаряд(Объект.ДокументОснование) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоЗаказНаряд(Знач ДокументСсылка)
	
	ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ВидОперации");
	Возврат ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС(ЭтоОткрытие = Ложь)
	
	НалогообложениеПередИзменением = Объект.НалогообложениеНДС;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратСОтветХранения Тогда
		
		Объект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Объект.Организация,, Объект.Дата);
		
	ИначеЕсли ЭтоПоступлениеОтПоставщика(Объект.ВидОперации) Тогда
		Если Не ЗначениеЗаполнено(СпособЗаполненияСтавкиНДС) Тогда
			Если НЕ ЗначениеЗаполнено(Объект.НалогообложениеНДС) Тогда
				Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
			КонецЕсли;
		ИначеЕсли СпособЗаполненияСтавкиНДС = ПредопределенноеЗначение("Перечисление.СпособыЗаполненияСтавкиНДС.БезНДС") Тогда
			Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС");
		Иначе
			Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.НалогообложениеНДС) Тогда
		
		Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		
	КонецЕсли;
	
	Если НЕ НалогообложениеПередИзменением = Объект.НалогообложениеНДС ИЛИ ЭтоОткрытие Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС(НалогообложениеПередИзменением);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСчетФактураНомерДата", "Видимость"
		, Элементы.СчетФактураНадпись.Видимость И Не ЗначениеЗаполнено(КэшЗначений.СчетФактураСсылка) И Не Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНДС", "Видимость"
		, Элементы.СчетФактураНадпись.Видимость И Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя); 
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС(НалогообложениеПередИзменением = Неопределено)
	
	Если ЭтоВозвратОтПокупателя(Объект.ВидОперации) Тогда
		Если НалогообложениеПередИзменением = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС 
			И Не Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС
			И РаботаСКомиссионерамиКомитентамиСервер.ВТабличнойЧастиЕстьКомиссионнаяПартияСНалогообложениемНДС(Объект) Тогда
			Объект.НалогообложениеНДС = НалогообложениеПередИзменением;
			СтрокаСообщения = НСтр("ru = 'В табличной части присутствует комиссионная номенклатура облагаемая НДС. Тип налогообложения НДС не изменен.'");
			ОбщегоНазначения.СообщитьПользователю(СтрокаСообщения);
			Возврат;
		КонецЕсли;
		
		НалогообложениеНДСОрганизации = НалогиУНФ.НалогообложениеНДС(Объект.Организация,, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
		ОрганизацияБезНДС = НалогообложениеНДСОрганизации = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС;
	КонецЕсли;
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		Элементы.СчетФактураНадпись.Видимость = Истина;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСчетФактураНомерДата", "Видимость"
		, Элементы.СчетФактураНадпись.Видимость И Не ЗначениеЗаполнено(КэшЗначений.СчетФактураСсылка) И Не Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНДС", "Видимость"
		, Элементы.СчетФактураНадпись.Видимость И Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя);
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			
			Если ЭтоВозвратОтПокупателя(Объект.ВидОперации) Тогда
				
				Партия = СтрокаТабличнойЧасти.Партия;
				Если ОрганизацияБезНДС Тогда
					
					СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.БезНДС);
					
					Если ЗначениеЗаполнено(Партия) И Партия.Статус = Перечисления.СтатусыПартий.ТоварыНаКомиссии 
						И Партия.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
						
						Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС) Тогда
							СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
						Иначе
							СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					
					Если ЗначениеЗаполнено(Партия) И Партия.Статус = Перечисления.СтатусыПартий.ТоварыНаКомиссии 
						И Партия.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
						
						СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.БезНДС);;
					Иначе
						
						Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС) Тогда
							СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
						Иначе
							СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС) Тогда
					СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
				Иначе
					СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
				КонецЕсли;
				
			КонецЕсли;
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;
		
		Элементы.РасходыСтавкаНДС.Видимость = Истина;
		Элементы.РасходыСуммаНДС.Видимость = Истина;
		Элементы.РасходыВсего.Видимость = Истина;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Расходы Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
			КонецЕсли;	
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;
		
	Иначе
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
			
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда	
		    СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			Элементы.СчетФактураНадпись.Видимость = Ложь;
		Иначе
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
			Элементы.СчетФактураНадпись.Видимость = Истина;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСчетФактураНомерДата", "Видимость"
		, Элементы.СчетФактураНадпись.Видимость И Не ЗначениеЗаполнено(КэшЗначений.СчетФактураСсылка) И Не Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНДС", "Видимость"
		, Элементы.СчетФактураНадпись.Видимость И Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя);
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;
		
		Элементы.РасходыСтавкаНДС.Видимость = Ложь;
		Элементы.РасходыСуммаНДС.Видимость = Ложь;
		Элементы.РасходыВсего.Видимость = Ложь;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Расходы Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;
		
	КонецЕсли;	
	
	// Обновим подвал формы.
	ИтогВсего = Объект.Запасы.Итог("Всего") + Объект.Расходы.Итог("Всего");
	ИтогСуммаНДС = Объект.Запасы.Итог("СуммаНДС") + Объект.Расходы.Итог("СуммаНДС");
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()	

&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТабличнойЧасти,
		СтрокаТабличнойЧасти = Неопределено, ПараметрыРасчета = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
	КонецЕсли;
	
	Если ПараметрыРасчета=Неопределено Тогда
		ПараметрыРасчета = Новый Структура();
	КонецЕсли;
	ПараметрыРасчета.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	ТабличныеЧастиУНФКлиент.РассчитатьСуммыВСтрокеТЧ(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	// Ручная скидка - заполнение полей ввода на форме
	РассчитатьСуммуИПроцентСкидкиРасходыЗапасы(Объект, СкидкаСумма, СкидкаПроцент);
	// Конец Ручная скидка
	
	// Серии номенклатуры
	Если ИспользоватьСерииНоменклатурыОстатки <> Неопределено
		И ИмяТабличнойЧасти = ИмяТЧЗапасы() Тогда
			СерииНоменклатурыУНФКлиентСервер.ОбновитьСерииНоменклатурыКоличество(Объект, СтрокаТабличнойЧасти);
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = ИмяТЧЗапасы() Тогда
		Если Объект.ПроверятьРасхожденияСВходящимДокументом Или Объект.ПроверятьРасхожденияСЗаказом Тогда
			РассчитатьРасхождения(СтрокаТабличнойЧасти.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработкуТабличнойЧастиПослеПодбора(ИмяТабличнойЧасти,
		СтрокаТабличнойЧасти = Неопределено, ПараметрыРасчета = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
	КонецЕсли;
	
	// Серии номенклатуры
	Если ИспользоватьСерииНоменклатурыОстатки <> Неопределено
		И ИмяТабличнойЧасти = ИмяТЧЗапасы() Тогда
			СерииНоменклатурыУНФКлиентСервер.ОбновитьСерииНоменклатурыКоличество(Объект, СтрокаТабличнойЧасти);
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = ИмяТЧЗапасы() Тогда
		Если Объект.ПроверятьРасхожденияСВходящимДокументом Или Объект.ПроверятьРасхожденияСЗаказом Тогда
			РассчитатьРасхождения(СтрокаТабличнойЧасти.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением,
		ПересчитатьЦены = Ложь, ПерезаполнитьЦены = Ложь, ТекстПредупреждения = "")

	ПараметрыФормыЦеныИВалюта = ЦеныИВалютаКлиентСервер.НовыеПараметрыФормыЦеныИВалюта(Объект, ТолькоПросмотр,
		Компания, ПерезаполнитьЦены, ПересчитатьЦены, ТекстПредупреждения);
	ПараметрыФормыЦеныИВалюта.ВалютаПередИзменением = ВалютаРасчетовПередИзменением;
	ЭтоВозвратОтПокупателя = ЭтоВозвратОтПокупателя(Объект.ВидОперации);
	ПараметрыФормыЦеныИВалюта.ДисконтнаяКартаЕстьРеквизит = ЭтоВозвратОтПокупателя;
	
	ПараметрыФормыЦеныИВалюта.ЭтоВозврат = ЭтоВозвратОтПокупателя;
	ПараметрыФормыЦеныИВалюта.ТипОбъектаВладельца = "ПриходнаяНакладная";
	
	ЦенообразованиеКлиентСервер.ИзменитьПараметрыФормыЦеныИВалютыДляВозвратов(ПараметрыФормыЦеныИВалюта, 
		НовыйСпособВидовЦенДляВозвратовИспользуется());
		
	Если ЭтоВозвратОтПокупателя(Объект.ВидОперации) И Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") 
		И Элементы.ЗапасыПартия.Видимость Тогда
		РаботаСНоменклатуройКлиентУНФ.ДополнитьСтруктуруВызоваФормыЦеныИВалютыМассивомПартийНоменклатуры(Объект.Запасы, ПараметрыФормыЦеныИВалюта);
	КонецЕсли;
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект,
		Новый Структура("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением));
	ОткрытьФорму("ОбщаяФорма.ЦеныИВалюта", ПараметрыФормыЦеныИВалюта, ЭтотОбъект, , , , ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодвалФормы()
	
	ИтогВсего = Объект.Запасы.Итог("Всего") + Объект.Расходы.Итог("Всего");
	ИтогСуммаНДС = Объект.Запасы.Итог("СуммаНДС") + Объект.Расходы.Итог("СуммаНДС");
	// Ручная скидка - заполнение полей ввода на форме
	РассчитатьСуммуИПроцентСкидкиРасходыЗапасы(Объект, СкидкаСумма, СкидкаПроцент);
	// Конец Ручная скидка
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НовыйСпособВидовЦенДляВозвратовИспользуется()
	
	Возврат ЦенообразованиеВызовСервера.НовыйСпособВидовЦенДляВозвратовИспользуется();
	
КонецФункции

&НаКлиенте
Процедура ПерезаполнитьЦеныВТабличныхЧастях()
	
	Если ЭтоВозвратОтПокупателя(Объект.ВидОперации)
		И НовыйСпособВидовЦенДляВозвратовИспользуется() Тогда
		
		ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтотОбъект, ИмяТЧЗапасы());
		ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтотОбъект, ИмяТЧРасходы());
		
	Иначе
		
		ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенКонтрагента(ЭтотОбъект, ИмяТЧЗапасы());
		ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенКонтрагента(ЭтотОбъект, ИмяТЧРасходы());
		
	КонецЕсли;
	
КонецПроцедуры

// ПодключаемоеОборудование
&НаСервереБезКонтекста
Процедура ДополнитьДанныеПоШтрихкодам(Контекст)
	
	// Преобразование весовых штрихкодов.
	Для Каждого ТекШтрихкод Из Контекст.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихкодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодамВМассиве(Контекст.МассивШтрихкодов);
	
	Для Каждого ТекШтрихкод Из Контекст.МассивШтрихкодов Цикл
		
		МассивДанныхШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если МассивДанныхШтрихкода <> Неопределено
			И МассивДанныхШтрихкода.Количество() <> 0 Тогда
			
			Для Каждого ДанныеШтрихкода Из МассивДанныхШтрихкода Цикл
				
				ДанныеНоменклатуры = Новый Структура();
				ДанныеНоменклатуры.Вставить("ВидОперации", Контекст.ВидОперации);
				ДанныеНоменклатуры.Вставить("Организация", Контекст.Организация);
				ДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
				ДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
				ДанныеНоменклатуры.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
				ДанныеНоменклатуры.Вставить("НалогообложениеНДС", Контекст.НалогообложениеНДС);
				ДанныеНоменклатуры.Вставить("Контрагент", Контекст.Контрагент);
				ДанныеНоменклатуры.Вставить("ДатаОбработки", Контекст.Дата);
				ДанныеНоменклатуры.Вставить("Партия", ДанныеШтрихкода.Партия);
				ДанныеНоменклатуры.Вставить("СтруктурнаяЕдиница", Контекст.СтруктурнаяЕдиница);
				Если ЗначениеЗаполнено(Контекст.ВидЦенКонтрагента) Тогда
					ДанныеНоменклатуры.Вставить("ВалютаДокумента", Контекст.ВалютаДокумента);
					ДанныеНоменклатуры.Вставить("СуммаВключаетНДС", Контекст.СуммаВключаетНДС);
					ДанныеНоменклатуры.Вставить("ВидЦенКонтрагента", Контекст.ВидЦенКонтрагента);
					Если ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения)
						И ТипЗнч(ДанныеШтрихкода.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
						ДанныеНоменклатуры.Вставить("Коэффициент", ДанныеШтрихкода.ЕдиницаИзмерения.Коэффициент);
					Иначе
						ДанныеНоменклатуры.Вставить("Коэффициент", 1);
					КонецЕсли;
				КонецЕсли;
				
				ДанныеНоменклатуры.Вставить("ЕстьПартииСНДС", Контекст.ЕстьПартииСНДС);
				
				ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(ДанныеНоменклатуры));
				
				Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
					ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	
	КонецЦикла;
	
	Контекст.Вставить("ДанныеПоШтрихкодам", ДанныеПоШтрихкодам);
	
	ДополнитьДанныеПоШтрихкодамОтборТипНоменклатуры(Контекст);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьДанныеПоШтрихкодамОтборТипНоменклатуры(Знач Контекст)
	
	Для Каждого ТекПараметр Из Метаданные.Документы.ПриходнаяНакладная.ТабличныеЧасти.Запасы.Реквизиты.Номенклатура.ПараметрыВыбора Цикл
		Если ТекПараметр.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(ТекПараметр.Значение) = Тип("ФиксированныйМассив") Тогда
				Контекст.Вставить("ОтборТипНоменклатуры", ТекПараметр.Значение);
			Иначе
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(ТекПараметр.Значение);
				Контекст.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов)
	
	Результат = Новый Структура;
	Результат.Вставить("НеизвестныеШтрихкоды", Новый Массив);
	Результат.Вставить("ШтрихкодыНекорректногоТипа", Новый Массив);
	Результат.Вставить("ДобавленныеСтроки", Новый Массив);
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	Контекст.Вставить("ВидОперации", Объект.ВидОперации);
	Контекст.Вставить("Организация", Объект.Организация);
	Контекст.Вставить("ВидЦенКонтрагента", Объект.ВидЦенКонтрагента);
	Контекст.Вставить("Дата", Объект.Дата);
	Контекст.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	Контекст.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	Контекст.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	Контекст.Вставить("Контрагент", Объект.Контрагент);
	Контекст.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиница);
	
	СтруктураПоискаПартииСНДС = Новый Структура("КомиссияСНДС", Истина);
	ЕстьПартииСНДС = Объект.Запасы.НайтиСтроки(СтруктураПоискаПартииСНДС).Количество() > 0;
	Контекст.Вставить("ЕстьПартииСНДС", ЕстьПартииСНДС);
	
	ДополнитьДанныеПоШтрихкодам(Контекст);
	
	Для Каждого ТекШтрихкод Из Контекст.МассивШтрихкодов Цикл
		ДанныеШтрихкода = Контекст.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		
		Если ДанныеШтрихкода.Количество() > 1 Тогда
			
			ПараметрыОткрытия = Новый Структура("МассивНоменклатуры, ТекШтрихкод", ДанныеШтрихкода, ТекШтрихкод);
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоДаннымШтрихкодовЗавершение", ЭтотОбъект
			, Новый Структура("СтруктураДанные, ДобавленныеСтроки", Контекст, Результат.ДобавленныеСтроки));
			
			ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ДублиНоменклатурыПоШтрихКодам", ПараметрыОткрытия, ЭтаФорма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Продолжить;
		КонецЕсли;
		
		Если ДанныеШтрихкода <> Неопределено
			И ДанныеШтрихкода.Количество() = 0 Тогда
			Результат.НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли Контекст.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено
			Или (НЕ ЭтоВозвратОтПокупателя(Объект.ВидОперации) И ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ЭтоНабор) Тогда
			ОписаниеШтрихкодаНекорректногоТипа = Новый Структура;
			ОписаниеШтрихкодаНекорректногоТипа.Вставить("Штрихкод", ТекШтрихкод.Штрихкод);
			ОписаниеШтрихкодаНекорректногоТипа.Вставить("Номенклатура", ДанныеШтрихкода[0].Номенклатура);
			ОписаниеШтрихкодаНекорректногоТипа.Вставить("ТипНоменклатуры", ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры);
			ОписаниеШтрихкодаНекорректногоТипа.Вставить("ЭтоНабор", ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ЭтоНабор);
			Результат.ШтрихкодыНекорректногоТипа.Добавить(ОписаниеШтрихкодаНекорректногоТипа);
		Иначе
			
			ДанныеШтрихкода = ДанныеШтрихкода[0];
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
			ПараметрыПоиска.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			ПараметрыПоиска.Вставить("Партия", ДанныеШтрихкода.Партия);
			ПараметрыПоиска.Вставить("ЕдиницаИзмерения", ДанныеШтрихкода.ЕдиницаИзмерения);
			ПараметрыПоиска.Вставить("НоменклатураНабора", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
			НайденныеСтроки = Объект.Запасы.НайтиСтроки(ПараметрыПоиска);
			Если НайденныеСтроки.Количество() = 0
				Или (КэшДанныхГОСИС.Свойство("ИнтеграцияЕГАИС") И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаАкцизнойМарки) Тогда
				НоваяСтрока = Объект.Запасы.Добавить();
				ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "СтруктурнаяЕдиница", "ПоложениеСклада");
				ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Ячейка", "ПоложениеСклада");
				ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Заказ", "ПоложениеЗаказаПоставщику");
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				Если ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
					НоваяСтрока.ЕдиницаИзмерения = ДанныеШтрихкода.ЕдиницаИзмерения;
				Иначе
					НоваяСтрока.ЕдиницаИзмерения = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения;
				КонецЕсли;
				НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
				НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
				НоваяСтрока.НеобходимостьВводаАкцизнойМарки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаАкцизнойМарки;
				
				// Прослеживаемость
				ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("СтранаПроисхождения", НоваяСтрока.СтранаПроисхождения);
				Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров И ПрослеживаемаяОперация(Объект.ВидОперации) Тогда
					НоваяСтрока.ПрослеживаемыйТовар = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПрослеживаемыйТовар;
					НоваяСтрока.ПрослеживаемыйКомплект = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПрослеживаемыйКомплект;
					ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, НоваяСтрока, КэшЗначений);
				Иначе
					НоваяСтрока.ПрослеживаемыйТовар = Ложь;
					НоваяСтрока.ПрослеживаемыйКомплект = Ложь;
				КонецЕсли;
				Если НЕ НоваяСтрока.ПрослеживаемыйТовар Или КэшЗначений.ПоставщикРезидентТаможенногоСоюза Тогда
					ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("НомерГТД", НоваяСтрока.НомерГТД);
				КонецЕсли; 
				// Конец Прослеживаемость
				
				ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСкладВСтрокеТЧЗапасы(НоваяСтрока, Объект, ДанныеШтрихкода.СтруктураДанныеНоменклатуры);
				НоваяСтрока.ЯчейкаДоступна = ЯчейкаДоступна(НоваяСтрока.СтруктурнаяЕдиница);
				
				НоваяСтрока.УказыватьДокументПоступления = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.УказыватьДокументПоступления;
				
				Если ЭтоВозвратОтПокупателя(Объект.ВидОперации) И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
					// Наборы
					ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, НоваяСтрока, ДанныеШтрихкода.СтруктураДанныеНоменклатуры, КэшЗначений);
					// Конец Наборы
				Иначе
					РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧЗапасы(), НоваяСтрока);
					Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
					Если НоваяСтрока.НеобходимостьВводаАкцизнойМарки Тогда
						Результат.ДобавленныеСтроки.Добавить(НоваяСтрока);
					КонецЕсли;
				КонецЕсли;
				
				Если ЭтоВозвратОтПокупателя(Объект.ВидОперации) И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
					Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС");
					ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
					ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,УчетВалютныхОпераций);
					ТребуетсяИзменениеНалогообложениеНаСНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТребуетсяИзменениеНалогообложениеНаСНДС;
					РаботаСНоменклатуройКлиентУНФ.ВывестиОповещениеПользователяОбИзмененииРежимаНалогообложенияНаСДНС(ТребуетсяИзменениеНалогообложениеНаСНДС);
				КонецЕсли;
				
			Иначе
				НоваяСтрока = НайденныеСтроки[0];
				Если Объект.ПроверятьРасхожденияСВходящимДокументом
					И Объект.ПринятьПоКолонке = ПредопределенноеЗначение("Перечисление.ПринятьПоКолонке.КоличествоПоВходящемуДокументу") Тогда
					НоваяСтрока.КоличествоСправочно = НоваяСтрока.КоличествоСправочно + ТекШтрихкод.Количество;
				Иначе
					НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				КонецЕсли;
				РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧЗапасы(), НоваяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				Если НоваяСтрока.НеобходимостьВводаАкцизнойМарки Тогда
					Результат.ДобавленныеСтроки.Добавить(НоваяСтрока);
				КонецЕсли;
			КонецЕсли;
			
			Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
				СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоДаннымШтрихкодовЗавершение(СтруктураНоменклатуры, Параметры) Экспорт
	
	Если СтруктураНоменклатуры = Неопределено Тогда Возврат КонецЕсли;
	
	ДанныеШтрихкода = СтруктураНоменклатуры.МассивНоменклатуры[0];
	ТекШтрихкод = СтруктураНоменклатуры.ТекШтрихкод;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	СтруктураДанные = Параметры.СтруктураДанные;
	ДобавленныеСтроки = Параметры.ДобавленныеСтроки;
	
	Если СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено
			Или (НЕ ЭтоВозвратОтПокупателя(Объект.ВидОперации) И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор) Тогда
			ОписаниеШтрихкодаНекорректногоТипа = Новый Структура;
			ОписаниеШтрихкодаНекорректногоТипа.Вставить("Штрихкод", ТекШтрихкод.Штрихкод);
			ОписаниеШтрихкодаНекорректногоТипа.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
			ОписаниеШтрихкодаНекорректногоТипа.Вставить("ТипНоменклатуры", ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры);
			ОписаниеШтрихкодаНекорректногоТипа.Вставить("ЭтоНабор", ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор);
			ШтрихкодыНекорректногоТипа.Добавить(ОписаниеШтрихкодаНекорректногоТипа);
		Иначе
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
			ПараметрыПоиска.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			ПараметрыПоиска.Вставить("Партия", ДанныеШтрихкода.Партия);
			ПараметрыПоиска.Вставить("ЕдиницаИзмерения", ДанныеШтрихкода.ЕдиницаИзмерения);
			ПараметрыПоиска.Вставить("НоменклатураНабора", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
			НайденныеСтроки = Объект.Запасы.НайтиСтроки(ПараметрыПоиска);
			Если НайденныеСтроки.Количество() = 0
				Или (КэшДанныхГОСИС.Свойство("ИнтеграцияЕГАИС") И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаАкцизнойМарки) Тогда
				НоваяСтрока = Объект.Запасы.Добавить();
				ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "СтруктурнаяЕдиница", "ПоложениеСклада");
				ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Ячейка", "ПоложениеСклада");
				ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Заказ", "ПоложениеЗаказаПоставщику");
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				Если ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
					НоваяСтрока.ЕдиницаИзмерения = ДанныеШтрихкода.ЕдиницаИзмерения;
				Иначе
					НоваяСтрока.ЕдиницаИзмерения = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения;
				КонецЕсли;
				НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
				НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
				НоваяСтрока.НеобходимостьВводаАкцизнойМарки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаАкцизнойМарки;
				
				// Прослеживаемость
				НоваяСтрока.СтранаПроисхождения = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтранаПроисхождения;
				Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров И ПрослеживаемаяОперация(Объект.ВидОперации) Тогда
					НоваяСтрока.ПрослеживаемыйТовар = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПрослеживаемыйТовар;
					НоваяСтрока.ПрослеживаемыйКомплект = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПрослеживаемыйКомплект;
					ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, НоваяСтрока, КэшЗначений);
				Иначе
					НоваяСтрока.ПрослеживаемыйТовар = Ложь;
					НоваяСтрока.ПрослеживаемыйКомплект = Ложь;
				КонецЕсли;
				Если НЕ НоваяСтрока.ПрослеживаемыйТовар Или КэшЗначений.ПоставщикРезидентТаможенногоСоюза Тогда
					ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("НомерГТД", НоваяСтрока.НомерГТД);
				КонецЕсли; 
				// Конец Прослеживаемость
				
				ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСкладВСтрокеТЧЗапасы(НоваяСтрока, Объект, ДанныеШтрихкода.СтруктураДанныеНоменклатуры);
				НоваяСтрока.ЯчейкаДоступна = ЯчейкаДоступна(НоваяСтрока.СтруктурнаяЕдиница);
				Если ЭтоВозвратОтПокупателя(Объект.ВидОперации) И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
					// Наборы
					ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, НоваяСтрока, ДанныеШтрихкода.СтруктураДанныеНоменклатуры, КэшЗначений);
					// Конец Наборы
				Иначе
					РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧЗапасы(), НоваяСтрока);
					Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
					Если НоваяСтрока.НеобходимостьВводаАкцизнойМарки Тогда
						ДобавленныеСтроки.Добавить(НоваяСтрока);
					КонецЕсли;
				КонецЕсли; 
			Иначе
				НоваяСтрока = НайденныеСтроки[0];
				Если Объект.ПроверятьРасхожденияСВходящимДокументом
					И Объект.ПринятьПоКолонке = ПредопределенноеЗначение("Перечисление.ПринятьПоКолонке.КоличествоПоВходящемуДокументу") Тогда
					НоваяСтрока.КоличествоСправочно = НоваяСтрока.КоличествоСправочно + ТекШтрихкод.Количество;
				Иначе
					НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				КонецЕсли;
				РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧЗапасы(), НоваяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				Если НоваяСтрока.НеобходимостьВводаАкцизнойМарки Тогда
					ДобавленныеСтроки.Добавить(НоваяСтрока);
				КонецЕсли;
			КонецЕсли;
			
			Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
				СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
			КонецЕсли;
		КонецЕсли;
		
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
		ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов) Экспорт
	
	Модифицированность = Истина;
	
	РезультатЗаполнения = ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов);
	НеизвестныеШтрихкоды = РезультатЗаполнения.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа = РезультатЗаполнения.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды);
		
		ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры", ПараметрыФормы,
		ЭтотОбъект, , , , ОписаниеОповещения);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		РезультатЗаполнения = ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды = РезультатЗаполнения.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа = РезультатЗаполнения.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	УстановитьВидимостьКолонкиДокументаПоступления(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияХарактеристик()
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для Каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		Если Не ЭтоВозвратОтПокупателя(Объект.ВидОперации)
			И ТекНекорректныйШтрихкод.Свойство("ЭтоНабор")
			И ТекНекорректныйШтрихкод.ЭтоНабор Тогда
			// Наборы
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", НСтр("ru = 'Набор'"));
		Иначе
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		КонецЕсли; 
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры
// Конец ПодключаемоеОборудование

&НаСервере
Процедура УстановитьВидимостьДоговора()
	
	КонтрагентВестиРасчетыПоЗаказам = Объект.Контрагент.ВестиРасчетыПоЗаказам;
	Элементы.Договор.Видимость = Объект.Контрагент.ВестиРасчетыПоДоговорам;
	
КонецПроцедуры // УстановитьВидимостьДоговора()

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбора(Документ, Организация, Контрагент, Договор, ВидОперации)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ОтключитьПроверкуРасхожденийПриИзмененииВидаОперации()

	Если ЭтоПоступлениеОтПоставщика(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;

	Если Объект.ПроверятьРасхожденияСВходящимДокументом Или Объект.ПроверятьРасхожденияСЗаказом Тогда
		Объект.ПроверятьРасхожденияСВходящимДокументом = Ложь;
		ПроверятьРасхожденияСЗаказом = Ложь;
		Объект.ПроверятьРасхожденияСЗаказом = Ложь;
		Объект.ЕстьРасхождения = Ложь;
		ОбновитьРасхождения();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеВидаОперации()
	
	// Прослеживаемость
	КэшЗначений.Вставить("ВестиУчетПрослеживаемыхТоваров", ВестиУчетПрослеживаемыхТоваров());
	// Конец Прослеживаемость
	
	УстановитьСвязиПараметровВыбораДоступныеТипы();
	
	Объект.СтруктурнаяЕдиница = ОсновнойСклад;
	
	УчетОстатковПоСкладскимОрдерам = УчетОстатковВРазрезеСкладскихОрдеров();
	
	ЗаполнитьСтруктурнуюЕдиницуВТЧЗапасы();
	
	Объект.Предоплата.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		Объект.Договор = Справочники.ДоговорыКонтрагентов.ПоДокументуКонтрагентуОрганизацииИВидуОперации(Объект.Ссылка,
			Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
	Иначе
		ТекстСообщения = "";
		Отказ = Ложь;
		Справочники.ДоговорыКонтрагентов.ПроверитьСоответствиеДоговораУсловиямДокумента(
			ТекстСообщения,
			Объект.Договор,
			Объект.Ссылка,
			Объект.Организация,
			Объект.Контрагент,
			Отказ,
			Объект.ВидОперации);
		
		Если ТекстСообщения <> "" Тогда
			Объект.Договор = Справочники.ДоговорыКонтрагентов.ПоДокументуКонтрагентуОрганизацииИВидуОперации(
				Объект.Ссылка, Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
		КонецЕсли;
	КонецЕсли;
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	
	// Наборы
	Если НЕ ЭтоВозвратОтПокупателя(Объект.ВидОперации) Тогда
		СтрокиКУдалению = Новый Массив;
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
				СтрокиКУдалению.Добавить(СтрокаТабличнойЧасти);
				Продолжить;
			КонецЕсли; 
			СтрокаТабличнойЧасти.НоменклатураНабора = Справочники.Номенклатура.ПустаяСсылка();
			СтрокаТабличнойЧасти.ХарактеристикаНабора = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			СтрокаТабличнойЧасти.ДоляСтоимости = 0;
			СтрокаТабличнойЧасти.КартинкаНабора = 0;
		КонецЦикла;
		Для каждого СтрокаТабличнойЧасти Из СтрокиКУдалению Цикл
			Объект.Запасы.Удалить(СтрокаТабличнойЧасти);
		КонецЦикла; 
	КонецЕсли; 
	// Конец Наборы
	
	
	УстановитьСпособРегистрацииСчетФактуры(ЭтотОбъект);
	СчетФактураСсылка = СчетаФактурыУНФ.ПолучитьПодчиненныйСчетФактуру(Объект.Ссылка, Истина, Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура);
	Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(СчетФактураСсылка, Истина,
	, Объект.ЭтоУниверсальныйДокумент, Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура);
	КэшЗначений.Вставить("СчетФактураСсылка", ?(ТипЗнч(СчетФактураСсылка) = Тип("Структура"), СчетФактураСсылка.Ссылка, Неопределено));
	
	УстановитьВидимостьИДоступность(Истина);
	
	//Партии
	НоменклатураВДокументахСервер.ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристик(ЭтаФорма);
	
	Если ЭтоПоступлениеОтПоставщика(Объект.ВидОперации)
		И ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.СоздатьПартииНоменклатуры
		Тогда
		УстановитьПометкиСтрокДляСозданияПартий();
	КонецЕсли;
	
	СтатусыПартийПоВидуОперации = Новый Соответствие;
	
	СтатусыПартийПоВидуОперации.Вставить(
	Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика,
	Перечисления.СтатусыПартий.СобственныеЗапасы);
	
	СтатусыПартийПоВидуОперации.Вставить(
	Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию,
	Перечисления.СтатусыПартий.ТоварыНаКомиссии);
	
	СтатусыПартийПоВидуОперации.Вставить(
	Перечисления.ВидыОперацийПриходнаяНакладная.ПриемВПереработку,
	Перечисления.СтатусыПартий.ДавальческоеСырье);
	
	СтатусыПартийПоВидуОперации.Вставить(
	Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаОтветХранение,
	Перечисления.СтатусыПартий.ОтветственноеХранение);
	
	СтатусПартии = СтатусыПартийПоВидуОперации.Получить(Объект.ВидОперации);
	
	ЗаполнятьПартииВсегда = Ложь;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию
		Или Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемВПереработку
		Или Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаОтветХранение Тогда
		ЗаполнятьПартииВсегда = Истина;
	КонецЕсли;
	
	Если Не СтатусПартии = Неопределено Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			Если СтрокаТабличнойЧасти.ИспользоватьПартии ИЛИ ЗаполнятьПартииВсегда Тогда
				
				СтатусыПартии = Новый СписокЗначений;
				СтатусыПартии.Добавить(СтатусПартии);
				
				ЗначениеПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура,СтатусыПартии);
				
				СтрокаТабличнойЧасти.Партия = ЗначениеПартииПоУмолчанию;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	//Конец Партии
	
	// Взаиморасчеты
	Если Объект.ВидОперации <> ВидОперацииПомощника Тогда
		Объект.СпособЗачетаПредоплаты = СпособыЗачетаВручную;
		СпособЗачетаПредоплатыПриИзмененииНаСервере();
		ВариантЗаполненияРасшифровки = Перечисления.ВариантыЗаполненияРасшифровкиПлатежа.Вручную;
		ВариантЗаполненияРасшифровкиПриИзмененииНаСервере();
	КонецЕсли;
	// Конец Взаиморасчеты
	
	// ПодключаемоеОборудование
	УстановитьВидимостьПечатиЧека();
	// Конец ПодключаемоеОборудование
	
	ЗаполнитьСоответствиеЗаказов();
	ОбновитьВидимостьПоляЗаказыПокупателей(ЭтотОбъект);
	
	ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов();
	
	// Прослеживаемость
	ОбновитьПризнакПрослеживаемости();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктурнуюЕдиницуВТЧЗапасы()
	
	Если Объект.ПоложениеСклада <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Запасы) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаЗапасы.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаЗапасы.Ячейка КАК Справочник.Ячейки) КАК Ячейка
	|ПОМЕСТИТЬ ВТ_Запасы
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаЗапасы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Запасы.НомерСтроки КАК НомерСтроки,
	|	ВТ_Запасы.Номенклатура КАК Номенклатура,
	|	ВТ_Запасы.Номенклатура.Склад КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ВТ_Запасы.Ячейка.Владелец = ВТ_Запасы.Номенклатура.Склад
	|			ТОГДА ВТ_Запасы.Ячейка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК Ячейка
	|ИЗ
	|	ВТ_Запасы КАК ВТ_Запасы");
	Запрос.УстановитьПараметр("ТаблицаЗапасы", Объект.Запасы.Выгрузить(, "НомерСтроки, Номенклатура, Ячейка"));
	ТаблицаХранениеНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекСтрокаЗапасы Из Объект.Запасы Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("НомерСтроки", ТекСтрокаЗапасы.НомерСтроки);
		ПараметрыОтбора.Вставить("Номенклатура", ТекСтрокаЗапасы.Номенклатура);
		
		СтрокиХранениеНоменклатуры = ТаблицаХранениеНоменклатуры.НайтиСтроки(ПараметрыОтбора);
		
		Если ЗначениеЗаполнено(СтрокиХранениеНоменклатуры) Тогда
			ТекСтрокаЗапасы.СтруктурнаяЕдиница = СтрокиХранениеНоменклатуры[0].СтруктурнаяЕдиница;
			ТекСтрокаЗапасы.Ячейка = СтрокиХранениеНоменклатуры[0].Ячейка;
			ТекСтрокаЗапасы.ЯчейкаДоступна = ЗначениеЗаполнено(ТекСтрокаЗапасы.СтруктурнаяЕдиница) И НЕ ТекСтрокаЗапасы.СтруктурнаяЕдиница.ОрдерныйСклад;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеДоговора()
	
	ДоговорПередИзменением = Договор;
	Договор = Объект.Договор;
	
	Если ДоговорПередИзменением <> Объект.Договор Тогда
		
		ОчиститьОснованиеПриИзменениеКонтрагентаДоговора();
		
		Если Объект.Предоплата.Количество() > 0 И Объект.Договор <> ДоговорПередИзменением Тогда
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьИзменениеДоговораЗавершение", ЭтотОбъект,
				Новый Структура("ДоговорПередИзменением", ДоговорПередИзменением)),
				НСтр("ru = 'Зачет предоплаты будет очищен, продолжить?'"), РежимДиалогаВопрос.ДаНет);
			Возврат;
			
		КонецЕсли;
		
		ОбработатьИзменениеДоговораФрагмент(ДоговорПередИзменением);
		
	Иначе
		
		Объект.Договор = Договор; // Восстанавливаем автоматически очищенный договор.
		
		Если Не НеУчитыватьЗаказыПриПередачеНаКомиссию Тогда
		Объект.Заказ = Заказ;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеДоговораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Предоплата.Очистить();
		Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента);
	Иначе
		Объект.Договор = ДополнительныеПараметры.ДоговорПередИзменением;
		Договор = ДополнительныеПараметры.ДоговорПередИзменением;
		Если Объект.ПоложениеЗаказаПоставщику=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
			Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
				СтрокаТабличнойЧасти.Заказ = Элементы.ЗапасыЗаказ.ОграничениеТипа.ПривестиЗначение(СтрокаТабличнойЧасти.Заказ);
			КонецЦикла; 
		Иначе
			Объект.Заказ = Элементы.Заказ.ОграничениеТипа.ПривестиЗначение(Заказ);
		КонецЕсли; 
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеДоговораФрагмент(ДополнительныеПараметры.ДоговорПередИзменением);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеДоговораФрагмент(ДоговорПередИзменением)
	
	ДанныеДоговора = ДанныеДоговораДляИзменения(ДатаДокумента, Объект.Договор, Объект.Контрагент);
	
	Если ЭтоПоступлениеОтПоставщика(Объект.ВидОперации) Тогда
		Если Объект.СпособЗачетаПредоплаты <> ДанныеДоговора.СпособЗачетаПредоплаты Тогда
			Объект.СпособЗачетаПредоплаты = ДанныеДоговора.СпособЗачетаПредоплаты;
			СпособЗачетаПредоплатыПриИзмененииНаСервере();
		КонецЕсли;
	ИначеЕсли Объект.СпособЗачетаПредоплаты <> СпособыЗачетаВручную Тогда
		Объект.СпособЗачетаПредоплаты = СпособыЗачетаВручную;
		СпособЗачетаПредоплатыПриИзмененииНаСервере();
	КонецЕсли;
	
	ВалютаРасчетовПередИзменением = ВалютаРасчетов;
	ВалютаРасчетов = ДанныеДоговора.ВалютаРасчетов;
	
	Если НЕ ДанныеДоговора.СуммаВключаетНДС = Неопределено Тогда
		Объект.СуммаВключаетНДС = ДанныеДоговора.СуммаВключаетНДС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда 
		Объект.Курс      = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс = 0, 1, ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс);
		Объект.Кратность = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность = 0, 1, ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность);
	КонецЕсли;
	
	ИзменилсяВидЦен = Объект.ВидЦенКонтрагента <> ДанныеДоговора.ВидЦенКонтрагента 
		И ЗначениеЗаполнено(ДанныеДоговора.ВидЦенКонтрагента) И ДанныеДоговора.УчетЦенКонтрагентов;
	НовыйДоговорИВалютаРасчетов = ЗначениеЗаполнено(Объект.Договор) И ЗначениеЗаполнено(ВалютаРасчетов) 
		И Объект.Договор <> ДоговорПередИзменением И ВалютаРасчетовПередИзменением <> ДанныеДоговора.ВалютаРасчетов;
	ОткрытьФормуЦеныИВалюты = НовыйДоговорИВалютаРасчетов И Объект.ВалютаДокумента <> ДанныеДоговора.ВалютаРасчетов
		И (Объект.Запасы.Количество() > 0 ИЛИ Объект.Расходы.Количество() > 0);
		
	ДанныеДоговора.Вставить("ИзменилсяВидЦен", ИзменилсяВидЦен);
	
	ЗаполнитьСоответствиеЗаказов();
	ОбновитьВидимостьПоляЗаказыПокупателей(ЭтотОбъект);
	
	Заказ = Объект.Заказ;
	
	Если ИзменилсяВидЦен Тогда
		
		Объект.ВидЦенКонтрагента = ДанныеДоговора.ВидЦенКонтрагента;
		Объект.ВидЦенВозврата = ДанныеДоговора.ВидЦен;
		
	КонецЕсли;
	
	Объект.РегистрироватьЦеныПоставщика = ДанныеДоговора.РегистрироватьЦеныПоставщика;
	Объект.ВалютаДокумента = ДанныеДоговора.ВалютаРасчетов;
	СпособЗаполненияСтавкиНДСДоИзменения = СпособЗаполненияСтавкиНДС;
	СпособЗаполненияСтавкиНДС = ДанныеДоговора.СпособЗаполненияСтавкиНДС;
	Если СпособЗаполненияСтавкиНДСДоИзменения <> СпособЗаполненияСтавкиНДС И ЭтоПоступлениеОтПоставщика(Объект.ВидОперации) Тогда
		ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	КонецЕсли;
	
	Если ОткрытьФормуЦеныИВалюты Тогда
		
		ТекстПредупреждения = "";
		
		Если ИзменилсяВидЦен Тогда
			ТекстПредупреждения = НСтр("ru = 'Договор с контрагентом предусматривает условия цен и скидок, 
				|отличные от установленных в документе.
				|Возможно, необходимо перезаполнить цены.'") + Символы.ПС + Символы.ПС;
		КонецЕсли;
		
		ТекстПредупреждения = ТекстПредупреждения + НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом.
									|Необходимо проверить валюту документа.'");
		ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаРасчетовПередИзменением, Истина, ИзменилсяВидЦен, ТекстПредупреждения);
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Договор) 
		И ИзменилсяВидЦен Тогда
		
		ПересчетНеобходим = (Объект.Запасы.Количество() > 0 ИЛИ Объект.Расходы.Количество() > 0);
		
		Объект.ВидЦенКонтрагента	= ДанныеДоговора.ВидЦенКонтрагента;
		Объект.ВидЦенВозврата = ДанныеДоговора.ВидЦен;
		
		ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
			УчетВалютныхОпераций);
		
		Если ПересчетНеобходим Тогда
			
			Сообщение = НСтр("ru = 'Договор с контрагентом предусматривает вид цен, отличный от установленного в документе.
									|Пересчитать документ в соответствии с договором?'");
										
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьИзменениеДоговораФрагментЗавершение", ЭтотОбъект, Новый Структура("ДоговорПередИзменением, ВалютаРасчетовПередИзменением, СтруктураДанные", ДоговорПередИзменением, ВалютаРасчетовПередИзменением, ДанныеДоговора)), 
				Сообщение,
				РежимДиалогаВопрос.ДаНет);
			Возврат;
		
		КонецЕсли;
		
	Иначе
		
		ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
			УчетВалютныхОпераций);
		
	КонецЕсли;
	
	ОбновитьПодвалФормы();
	ЗаполнитьТаблицуПросмотраНаКлиенте();
	
	// Комиссия
	НеУчитыватьЗаказыПриПередачеНаКомиссию = ДанныеДоговора.НеУчитыватьЗаказыПриПередачеНаКомиссию;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера") 
		И НеУчитыватьЗаказыПриПередачеНаКомиссию Тогда
		
		Если Объект.ПоложениеЗаказаПоставщику = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда 
			Объект.Заказ = Неопределено;
		Иначе
			Для Каждого СтрокаЗапасы Из Объект.Запасы Цикл
				СтрокаЗапасы.Заказ = Неопределено;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ОпределитьВидимостьЗаказовПокупателяКомиссия(ЭтотОбъект); 
	
	Объект.ЭтоУниверсальныйДокумент = ДанныеДоговора.ЭтоУниверсальныйДокумент;
	УстановитьНастройкиФормыУПД(ЭтаФорма, КэшЗначений.СчетФактураСсылка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеДоговораФрагментЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПерезаполнитьЦеныВТабличныхЧастях();
		
		ОбновитьПодвалФормы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьИОстаткиВзаиморасчетов()
	
	Элементы.ОстатокВзаиморасчетов.Видимость = НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.Контрагент.АвтоМаксимальнаяШирина = НЕ Элементы.ОстатокВзаиморасчетов.Видимость;
	
	Если (ОбщегоНазначения.ЭтоМобильныйКлиент() ИЛИ НЕ Элементы.ГруппаПредоплата.Видимость) И НЕ Элементы.ОстатокВзаиморасчетов.Видимость Тогда
		Элементы.ОстатокВзаиморасчетовСтраницаОплата.Видимость = Ложь;
		Возврат;
	Иначе
		Элементы.ОстатокВзаиморасчетовСтраницаОплата.Видимость = НЕ Элементы.ОстатокВзаиморасчетов.Видимость И НЕ Объект.Контрагент.Ссылка.Пустая();
	КонецЕсли;
	
	Элементы.ОстатокВзаиморасчетов.Заголовок = РаботаСКонтрагентамиУНФ.ЗаголовокНадписиВзаиморасчетов(Объект.Контрагент);
	Элементы.ОстатокВзаиморасчетовСтраницаОплата.Заголовок = Элементы.ОстатокВзаиморасчетов.Заголовок;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРежимРаботаГТД()
	
	НеизменяемыеРеквизиты = Новый Массив;
	НеизменяемыеРеквизиты.Добавить("ЗапасыПометка");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНомерСтроки");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНоменклатура");
	НеизменяемыеРеквизиты.Добавить("ЗапасыХарактеристика");
	НеизменяемыеРеквизиты.Добавить("ЗапасыПартия");
	НеизменяемыеРеквизиты.Добавить("ЗапасыКоличество");
	НеизменяемыеРеквизиты.Добавить("ЗапасыЕдиницаИзмерения");
	НеизменяемыеРеквизиты.Добавить("ЗапасыСтранаПроисхождения");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНомерГТД");
	ПрослеживаемостьФормыКлиентСерверУНФ.ДобавитьНеизменяемыеРеквизитыДляРежимаГТД(НеизменяемыеРеквизиты);
	
	Для каждого ЭлементФормы Из Элементы.Запасы.ПодчиненныеЭлементы Цикл
		
		Если НеизменяемыеРеквизиты.Найти(ЭлементФормы.Имя) = Неопределено
			И ЭлементФормы.Видимость = Истина Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементФормы.Имя, "Видимость", Ложь);
			КэшЗначений.ОбрабатываемыеРеквизиты.Добавить(ЭлементФормы.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЕдиницаИзмерения", "Доступность", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьРежимРаботаГТД()
	
	Для каждого ИмяЭлементаФормы Из КэшЗначений.ОбрабатываемыеРеквизиты Цикл
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлементаФормы, "Видимость", Истина);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЕдиницаИзмерения", "Доступность", Истина);
	
	КэшЗначений.ОбрабатываемыеРеквизиты = Новый Массив;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимРаботаГТД(ВключитьРежимГТД)
	
	Если НЕ КэшЗначений.Свойство("ОбрабатываемыеРеквизиты") Тогда
		
		КэшЗначений.Вставить("ОбрабатываемыеРеквизиты", Новый Массив);
		
	КонецЕсли;
	
	Если ВключитьРежимГТД Тогда
		
		ВключитьРежимРаботаГТД();
		
	Иначе
		
		ВыключитьРежимРаботаГТД();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НомераГТДПодобратьНаСервере(ЭтоКонтекстныйВызов)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ТаблицаЗапасы", Неопределено);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	
	ИменаПолей = Новый Массив;
	ИменаПолей.Добавить("Сумма");
	ИменаПолей.Добавить("СуммаНДС");
	ИменаПолей.Добавить("Всего");
	ПараметрыПодбора.Вставить("ИменаПолей", ИменаПолей);
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ПараметрыПодбора.Вставить("Контрагент", Объект.Контрагент);
		
	КонецЕсли;
	
	Если НЕ ЭтоКонтекстныйВызов Тогда
		
		ПараметрыПодбора.Вставить("ПроверятьПометку", Истина);
		
	КонецЕсли;
	
	ГрузовыеТаможенныеДекларацииСервер.ПодготовитьТаблицуЗапасовИзТаблицыФормы(ПараметрыПодбора, Объект.Запасы);
	ГрузовыеТаможенныеДекларацииСервер.ПодобратьНомераГТДПоПредыдущимПоступлениям(ПараметрыПодбора);
	ГрузовыеТаможенныеДекларацииСервер.ПеренестиНомераГТДВТаблицуФормы(Объект.Запасы, ПараметрыПодбора);
	
	ОбновитьОтображениеПрослеживаемости();
	
КонецПроцедуры

// Обработать изменения по кнопке цены и валюты завершение.
// 
// Параметры:
//  РезультатФормыЦеныИВалюта - см. ЦеныИВалютаКлиентСервер.РезультатФормыЦеныИВалюта
//  ДополнительныеПараметры - Структура
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатФормыЦеныИВалюта, ДополнительныеПараметры) Экспорт

	ПерезаполнитьТЧЗапасыЕслиБылиВнесеныИзмененияВФормеЦеныИВалюта(РезультатФормыЦеныИВалюта, ДополнительныеПараметры);

	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);

	ОбновитьПодвалФормы();

КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьТЧЗапасыЕслиБылиВнесеныИзмененияВФормеЦеныИВалюта(ПараметрыЗаполнения, ДополнительныеПараметры)
	
	Если ТипЗнч(ПараметрыЗаполнения) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыЗаполнения.БылиВнесеныИзменения Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Объект.ВалютаДокумента = ПараметрыЗаполнения.ВалютаДокумента;
	Объект.Курс = ПараметрыЗаполнения.КурсРасчетов;
	Объект.Кратность = ПараметрыЗаполнения.КратностьРасчетов;
	Объект.НалогообложениеНДС = ПараметрыЗаполнения.НалогообложениеНДС;
	Объект.СпециальныйНалоговыйРежим = ПараметрыЗаполнения.СпециальныйНалоговыйРежим;
	Объект.СуммаВключаетНДС = ПараметрыЗаполнения.СуммаВключаетНДС;
	Объект.НДСВключатьВСтоимость = ПараметрыЗаполнения.НДСВключатьВСтоимость;
	Объект.ВидЦенКонтрагента = ПараметрыЗаполнения.ВидЦенКонтрагента;
	Объект.ВидЦенВозврата = ПараметрыЗаполнения.ВидЦен;
	Объект.РегистрироватьЦеныПоставщика = ПараметрыЗаполнения.РегистрироватьЦеныПоставщика;
	
	ПерезаполнитьДисконтныеКарты(ПараметрыЗаполнения);
	ПересчитатьЦеныПоВидуЦен(ПараметрыЗаполнения);
	ПересчитатьЦеныПоВалюте(ПараметрыЗаполнения, ДополнительныеПараметры);
	ПересчитатьСуммуЕслиИзменилсяПризнакНалогообложениеНДС(ПараметрыЗаполнения);
	ПересчитатьСуммуЕслиИзменилсяПризнакСуммаВключаетНДС(ПараметрыЗаполнения);
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
		СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
			СтрокаТабличнойЧасти.СуммаРасчетов,
			СтрокаТабличнойЧасти.Курс,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
			СтрокаТабличнойЧасти.Кратность,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КратностьНациональнаяВалюта, Объект.Кратность));
	КонецЦикла;
	
	Если ПроверятьРасхожденияСЗаказом Тогда
		ОбновитьРасхождения();
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию") Тогда
		
		НовыйМассив = Новый Массив();
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
		НовыйМассив.Добавить(НовыйПараметр);
		
		НовыйПараметр = Новый ПараметрВыбора("Дополнительно.ОграничениеСтатуса", ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
		НовыйМассив.Добавить(НовыйПараметр);
		
		НовыйПараметр = Новый ПараметрВыбора("Дополнительно.НалогообложениеНДС", Объект.НалогообложениеНДС);
		НовыйМассив.Добавить(НовыйПараметр);
		
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыПартия.ПараметрыВыбора = НовыеПараметры;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЦеныПоВалюте(Знач ПараметрыЗаполнения, Знач ДополнительныеПараметры)
	
	Если НЕ ПараметрыЗаполнения.ПерезаполнитьЦены
		И ПараметрыЗаполнения.ПересчитатьЦены Тогда
		ЦенообразованиеКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтотОбъект,
			ДополнительныеПараметры.ВалютаРасчетовПередИзменением, ИмяТЧЗапасы(), ПараметрыЗаполнения.КурсПересчетаЦен);
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ПересчитатьЦены Тогда
		ЦенообразованиеКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтотОбъект,
			ДополнительныеПараметры.ВалютаРасчетовПередИзменением, ИмяТЧРасходы(), ПараметрыЗаполнения.КурсПересчетаЦен);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьДисконтныеКарты(Знач ПараметрыЗаполнения)
	
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.ДисконтнаяКарта)
		И ЗначениеЗаполнено(ПараметрыЗаполнения.Контрагент)
		И Не Объект.Контрагент.Пустая() Тогда
		Если ПараметрыЗаполнения.Контрагент = Объект.Контрагент Тогда
			Объект.ДисконтнаяКарта = ПараметрыЗаполнения.ДисконтнаяКарта;
		Иначе // Сообщить пользователю и не менять данные о дисконтной карте.
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Дисконтная карта не считана.
			|Владелец дисконтной карты не совпадает с контрагентом в документе.'"), , "Контрагент", "Объект");
		КонецЕсли;
	Иначе
		Объект.ДисконтнаяКарта = ПараметрыЗаполнения.ДисконтнаяКарта;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЦеныПоВидуЦен(Знач ПараметрыЗаполнения)
	
	Если Не ПараметрыЗаполнения.ПерезаполнитьЦены Тогда
		Возврат;
	КонецЕсли;
	
	ПерезаполнитьЦеныВТабличныхЧастях();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуЕслиИзменилсяПризнакНалогообложениеНДС(Знач ПараметрыЗаполнения)
	
	Если ПараметрыЗаполнения.НалогообложениеНДС <> ПараметрыЗаполнения.ПредНалогообложениеНДС Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуЕслиИзменилсяПризнакСуммаВключаетНДС(Знач ПараметрыЗаполнения)
	
	Если НЕ ПараметрыЗаполнения.ПерезаполнитьЦены
		И ПараметрыЗаполнения.СуммаВключаетНДС <> ПараметрыЗаполнения.ПредСуммаВключаетНДС Тогда
		ЦенообразованиеКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтотОбъект, ИмяТЧЗапасы());
	КонецЕсли;
	
	Если ПараметрыЗаполнения.СуммаВключаетНДС <> ПараметрыЗаполнения.ПредСуммаВключаетНДС Тогда
		ЦенообразованиеКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтотОбъект, ИмяТЧРасходы());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПоступлениеОтПоставщика(ВидОперации)
	
	Возврат ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоВозвратОтПокупателя(ВидОперации)
	
	Возврат ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя");
	
КонецФункции

&НаКлиенте
Процедура УказатьЦенуСертификата(Результат, ВыбраннаяСтрока) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ВыбраннаяСтрока.Цена = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоответствиеЗаказов()

	КэшЗначений.Заказы.Очистить();

	Если Объект.ВидОперации <> Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика
			И Объект.ВидОперации <> Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика
			И Объект.ВидОперации <> Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию Тогда
		Возврат;
	КонецЕсли;

	ЗаказыПоставщикам = Новый Массив;
	Если Объект.ПоложениеЗаказаПоставщику = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке")
			И ЗначениеЗаполнено(Объект.Заказ) Тогда
		ЗаказыПоставщикам.Добавить(Объект.Заказ);
	ИначеЕсли Объект.ПоложениеЗаказаПоставщику = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
			Если ЗначениеЗаполнено(СтрокаЗапасы.Заказ)
					И ЗаказыПоставщикам.Найти(СтрокаЗапасы.Заказ) = Неопределено Тогда
				ЗаказыПоставщикам.Добавить(СтрокаЗапасы.Заказ);
			КонецЕсли;
		КонецЦикла;
		Для каждого СтрокаЗапасы Из Объект.Расходы Цикл
			Если ЗначениеЗаполнено(СтрокаЗапасы.ЗаказПоставщику)
					И ЗаказыПоставщикам.Найти(СтрокаЗапасы.ЗаказПоставщику) = Неопределено Тогда
				ЗаказыПоставщикам.Добавить(СтрокаЗапасы.ЗаказПоставщику);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат;
	КонецЕсли;

	Если ЗаказыПоставщикам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ДополнитьСоответствиеЗаказов(КэшЗначений.Заказы, ЗаказыПоставщикам);

КонецПроцедуры

&НаКлиенте
Функция ЗаказыПокупателейИзКэша(ЗаказПоставщику)

	Если НЕ ЗначениеЗаполнено(ЗаказПоставщику) Тогда
		Возврат Новый Массив;
	КонецЕсли;

	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика")
			И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика")
			И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию") Тогда
		Возврат Новый Массив;
	КонецЕсли;

	Результат = КэшЗначений.Заказы.Получить(ЗаказПоставщику);
	Если Результат = Неопределено Тогда
		МассивЗаказов = Новый Массив;
		МассивЗаказов.Добавить(ЗаказПоставщику);
		ДополнитьСоответствиеЗаказов(КэшЗначений.Заказы, МассивЗаказов);
		Результат = КэшЗначений.Заказы.Получить(ЗаказПоставщику);
	КонецЕсли;

	Возврат Результат.ВыгрузитьЗначения();

КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьСоответствиеЗаказов(СоответствиеЗаказов, ЗаказыПоставщикам)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказыПоставщикам", ЗаказыПоставщикам);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка КАК ЗаказПоставщику,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ЗаказПоставщику.ПоложениеЗаказаПокупателя = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|				ТОГДА ЗаказПоставщикуЗапасы.ЗаказПокупателя
	|			ИНАЧЕ ЗаказПоставщику.ЗаказПокупателя
	|		КОНЕЦ, ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)) КАК ЗаказПокупателя
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Запасы КАК ЗаказПоставщикуЗапасы
	|		ПО (ЗаказПоставщикуЗапасы.Ссылка = ЗаказПоставщику.Ссылка)
	|ГДЕ
	|	ЗаказПоставщику.Ссылка В(&ЗаказыПоставщикам)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПоставщику.Ссылка,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ЗаказПоставщику.ПоложениеЗаказаПокупателя = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|				ТОГДА ЗаказПоставщикуЗапасы.ЗаказПокупателя
	|			ИНАЧЕ ЗаказПоставщику.ЗаказПокупателя
	|		КОНЕЦ, ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))
	|ИТОГИ ПО
	|	ЗаказПоставщику";
	ВыборкаЗаказы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаказы.Следующий() Цикл
		СписокЗаказов = Новый СписокЗначений;
		ВыборкаДетали = ВыборкаЗаказы.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаДетали.ЗаказПокупателя) Тогда
				Продолжить;
			КонецЕсли; 
			СписокЗаказов.Добавить(ВыборкаДетали.ЗаказПокупателя);	
		КонецЦикла;
		СоответствиеЗаказов.Вставить(ВыборкаЗаказы.ЗаказПоставщику, СписокЗаказов);
	КонецЦикла; 
	
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьДоступностьПоляЗаказПокупателя(ТекущаяСтрока,
		ИмяТабличнойЧасти, СтандартнаяОбработка)

	Если Объект.ПоложениеЗаказаПоставщику = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти")
			И ИмяТабличнойЧасти = ИмяТЧЗапасы()
			И ЗначениеЗаполнено(ТекущаяСтрока.Заказ) Тогда
		ЗаказПоставщику = ТекущаяСтрока.Заказ;
		ДоступныеЗаказы = ЗаказыПокупателейИзКэша(ЗаказПоставщику);
	ИначеЕсли Объект.ПоложениеЗаказаПоставщику = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти")
			И ИмяТабличнойЧасти = ИмяТЧРасходы()
			И ЗначениеЗаполнено(ТекущаяСтрока.ЗаказПоставщику) Тогда
		ЗаказПоставщику = ТекущаяСтрока.ЗаказПоставщику;
		ДоступныеЗаказы = ЗаказыПокупателейИзКэша(ЗаказПоставщику);
	ИначеЕсли Объект.ПоложениеЗаказаПоставщику = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке")
			И ЗначениеЗаполнено(Объект.Заказ) Тогда
		ЗаказПоставщику = Объект.Заказ;
		ДоступныеЗаказы = ЗаказыПокупателейИзКэша(ЗаказПоставщику);
	Иначе
		ЗаказПоставщику = Неопределено;
		ДоступныеЗаказы = Новый Массив;
	КонецЕсли;
	ИспользоватьОграничение = (ДоступныеЗаказы.Количество() > 0
		ИЛИ ЗначениеЗаполнено(ЗаказПоставщику)
		ИЛИ ИмяТабличнойЧасти = ИмяТЧЗапасы());

	МассивПараметров = Новый Массив;
	Если ИспользоватьОграничение Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", ДоступныеЗаказы));
	КонецЕсли;
	Если ИмяТабличнойЧасти = ИмяТЧЗапасы() Тогда
		Элементы.ЗапасыЗаказПокупателя.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Иначе
		Элементы.РасходыЗаказ.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	КонецЕсли;

	Если ДоступныеЗаказы.Количество() = 0 И ИспользоватьОграничение Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'В заказе поставщику не указаны заказы покупателей'"));
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьПоляЗаказыПокупателей(Форма)
	
	Объект = Форма.Объект;
	Если НЕ Форма.ТолькоПросмотр Тогда
		// Очистка некорректно заполненных заказов покупателей
		ПустойЗаказ = ПредопределенноеЗначение("Документ.ЗаказПокупателя.ПустаяСсылка");
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя) Тогда
				Продолжить;
			КонецЕсли; 
			Если Объект.ПоложениеЗаказаПоставщику = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
				ЗаказПоставщику = СтрокаТабличнойЧасти.Заказ;
			Иначе
				ЗаказПоставщику = Объект.Заказ;
			КонецЕсли; 
			ЗаказыПокупателей = Форма.КэшЗначений.Заказы.Получить(ЗаказПоставщику);
			Если ТипЗнч(ЗаказыПокупателей) <> Тип("СписокЗначений") ИЛИ ЗаказыПокупателей.НайтиПоЗначению(СтрокаТабличнойЧасти.ЗаказПокупателя) = Неопределено Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = ПустойЗаказ;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	// Видимость заказов покупателей в таблице запасов
	ЕстьЗаказыПокупателей = Ложь;
	Если Объект.ПоложениеЗаказаПоставщику <> ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти")
		И ЗначениеЗаполнено(Объект.Заказ) Тогда
		ЗаказыПокупателей = Форма.КэшЗначений.Заказы.Получить(Объект.Заказ);
		Если ТипЗнч(ЗаказыПокупателей) = Тип("СписокЗначений") И ЗаказыПокупателей.Количество() > 0 Тогда
			ЕстьЗаказыПокупателей = Истина;
		КонецЕсли; 
	ИначеЕсли Объект.ПоложениеЗаказаПоставщику = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя) Тогда
				// Если заказы заполнены в ТЧ - колонку выводим в любом случае
				ЕстьЗаказыПокупателей = Истина;
				Прервать;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Заказ) Тогда
				Продолжить;
			КонецЕсли;
			ЗаказыПокупателей = Форма.КэшЗначений.Заказы.Получить(СтрокаТабличнойЧасти.Заказ);
			Если ТипЗнч(ЗаказыПокупателей) = Тип("СписокЗначений") И ЗаказыПокупателей.Количество() > 0 Тогда
				ЕстьЗаказыПокупателей = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
	// Видимость заказов покупателей в таблице расходов
	ЕстьЗаказПокупателяРасходы = ЕстьЗаказыПокупателей;
	Если НЕ ЕстьЗаказПокупателяРасходы Тогда
		Если Форма.ЗаказВШапке Тогда
			ЕстьЗаказПокупателяРасходы = НЕ ЗначениеЗаполнено(Объект.Заказ);
		ИначеЕсли Объект.Расходы.Количество()=0 Тогда
			ЕстьЗаказПокупателяРасходы = Истина;
		Иначе
			Для каждого СтрокаТабличнойЧасти Из Объект.Расходы Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПоставщику) Тогда
					ЕстьЗаказПокупателяРасходы = Истина;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	Если НЕ ЕстьЗаказПокупателяРасходы Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект.Расходы Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Заказ) Тогда
				// Если заказы заполнены в ТЧ - колонку выводим в любом случае
				ЕстьЗаказПокупателяРасходы = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ЗапасыЗаказПокупателя", "Видимость",
		ЕстьЗаказыПокупателей);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "РасходыЗаказ", "Видимость",
		НЕ Объект.ВключатьРасходыВСебестоимость И ЕстьЗаказПокупателяРасходы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьКорректировкиПоДокументу(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорректировкаПоступления.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
		|ГДЕ
		|	КорректировкаПоступления.ДокументОснование = &ДокументОснование
		|	И НЕ КорректировкаПоступления.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

&НаКлиенте
Процедура СодержаниеНачалоВыбора(Элемент, ИмяТабличнойЧасти)
	
	ТекущаяСтрока = Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
	
	СвойстваРеквизита = Новый Структура;
	СвойстваРеквизита.Вставить("Объект", "Объект");
	СвойстваРеквизита.Вставить("ТабЧасть", ИмяТабличнойЧасти);
	СвойстваРеквизита.Вставить("НомерСтроки", ТекущаяСтрока.НомерСтроки - 1);
	СвойстваРеквизита.Вставить("ИмяРеквизита", "Содержание");
	ЗаголовокФормыРедактирования = СтрШаблон(НСтр("ru='%1: содержание'"), Строка(ТекущаяСтрока.Номенклатура));
	
	ОбщегоНазначенияУНФКлиент.ПоказатьФормуРедактированияРеквизита(Элемент.ТекстРедактирования, ЭтотОбъект,
		СвойстваРеквизита, ЗаголовокФормыРедактирования);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнформацияОбОтборе(Знач НаименованиеМетки)
	
	Возврат НоменклатураВДокументахСервер.ИнформацияОбОтборе(НаименованиеМетки);
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстСодержания(Знач Номенклатура, Знач Характеристика)
	Возврат ТабличныеЧастиУНФ.ТекстСодержания(Номенклатура, Характеристика);
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРеквизитыПечати()

	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзмененияРеквизитовПечати", ЭтотОбъект);
	ОткрытьФорму("Обработка.РеквизитыПечати.Форма.РеквизитыПечатиПриходнаяНакладная", Новый Структура("КонтекстПечати", Объект), ЭтотОбъект, , , , ОписаниеОповещения);
		
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьНастройкиИзмененияКоличества()
	
	НастройкиКоличества = ДокументыУНФКлиентСервер.ПараметрыСбросаКоличества();
	ДокументыУНФ.ЗаполнитьНастройкиКоличества(НастройкиКоличества);
	Возврат НастройкиКоличества;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроектИзЗаказа(ЗаказПокупателя)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказПокупателя, "Проект");

КонецФункции

#Область Подбор

&НаКлиенте
Процедура ЗапасыПодбор(Команда)
	
	ИмяТабличнойЧасти	= ИмяТЧЗапасы();
	
	СтруктураПоискаПартииСНДС = Новый Структура("КомиссияСНДС", Истина);
	ЕстьПартииСНДС = Объект.Запасы.НайтиСтроки(СтруктураПоискаПартииСНДС).Количество() > 0;
	ПараметрыПодбора = Новый Структура("ЕстьПартииСНДС, ПолностьюОбновить", ЕстьПартииСНДС, Истина);
	
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти, ПараметрыПодбора);
	
КонецПроцедуры // ЗапасыПодбор()

&НаКлиенте
Процедура РасходыПодбор(Команда)
	
	ИмяТабличнойЧасти	= ИмяТЧРасходы();
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти);
	
КонецПроцедуры // ПодборВыполнить()

&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ИдентификаторыНовыхСтрок = Неопределено, ЗаполнениеПоОстаткам = Ложь, МассивНомеровДобавленныхСтрок = Неопределено)
	
	ЯчейкиВТабличнойЧасти = ПолучитьФункциональнуюОпцию("УчетПоЯчейкам") 
		И Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
	ЭтоВозвратОтПокупателя = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя"));
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Если МассивНомеровДобавленныхСтрок = Неопределено Тогда
		МассивНомеровДобавленныхСтрок = Новый Массив;
	КонецЕсли;
	
	ЗаказПокупателяИзДобавляемойСтроки = Неопределено;
	ЕстьСтруктурнаяЕдинцаВПодборе = НЕ ТаблицаДляЗагрузки.Колонки.Найти("СтруктурнаяЕдиница") = Неопределено;
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
		МассивНомеровДобавленныхСтрок.Добавить(НоваяСтрока.НомерСтроки - 1);
		
		Если ИмяТабличнойЧасти=ИмяТЧРасходы() Тогда 
			Если Объект.ПоложениеЗаказаПоставщику<>ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
				НоваяСтрока.ЗаказПоставщику = Объект.Заказ;
			КонецЕсли; 
		Иначе
			ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "СтруктурнаяЕдиница", "ПоложениеСклада");
			
			Если Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке И РазрешитьСкладыВТабличныхЧастях Тогда
				Если ЕстьСтруктурнаяЕдинцаВПодборе И ЗначениеЗаполнено(СтрокаЗагрузки.СтруктурнаяЕдиница) И Не СтрокаЗагрузки.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница Тогда
					Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
					УстановитьВидимостьОтПользовательскихНастроек();
				КонецЕсли;
			КонецЕсли;
			
			ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Ячейка", "ПоложениеСклада");
			ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Заказ", "ПоложениеЗаказаПоставщику");
		КонецЕсли;
		
		Если НоваяСтрока.Свойство("Пометка") Тогда
			
			НоваяСтрока.Пометка = Истина;
			
		КонецЕсли;
		
		Если НЕ СкладВШапке = Истина Тогда
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтруктурнаяЕдиница) Тогда
				
				НоваяСтрока.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИмяТабличнойЧасти = ИмяТЧЗапасы() Тогда
			
			Если ЗначениеЗаполнено(СтрокаЗагрузки.Номенклатура) Тогда
				
				ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаЗагрузки.Номенклатура, "ТипНоменклатуры, ЭтоНабор, СпособРасчетаЦеныНабора, Ячейка");
				
				СтруктураДанныеНоменклатуры = Новый Структура();
				СтруктураДанныеНоменклатуры.Вставить("ВидОперации", Объект.ВидОперации);
				СтруктураДанныеНоменклатуры.Вставить("Номенклатура", СтрокаЗагрузки.Номенклатура);
				СтруктураДанныеНоменклатуры.Вставить("Характеристика", СтрокаЗагрузки.Характеристика);
				СтруктураДанныеНоменклатуры.Вставить("Партия", СтрокаЗагрузки.Партия);
				СтруктураДанныеНоменклатуры.Вставить("Контрагент", Объект.Контрагент);
				СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
				СтруктураДанныеНоменклатуры.Вставить("СтруктурнаяЕдиница", НоваяСтрока.СтруктурнаяЕдиница);
				СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ЗначенияРеквизитов.ТипНоменклатуры);
				СтруктураДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", СтрокаЗагрузки.ЕдиницаИзмерения);
				СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
				СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
				
				Если ЗначениеЗаполнено(НоваяСтрока.Цена) И ЗначенияРеквизитов.ЭтоНабор И ЭтоВозвратОтПокупателя 
					И ЗначенияРеквизитов.СпособРасчетаЦеныНабора <> Перечисления.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих Тогда
					СтруктураДанныеНоменклатуры.Вставить("Цена", НоваяСтрока.Цена);
				КонецЕсли;
				Если ЗначениеЗаполнено(Объект.ВидЦенКонтрагента) Тогда
					СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
					СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
					СтруктураДанныеНоменклатуры.Вставить("ВидЦенКонтрагента", Объект.ВидЦенКонтрагента);
					СтруктураДанныеНоменклатуры.Вставить("Коэффициент", 1);
				КонецЕсли;
				
				СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанныеНоменклатуры);
				СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
				
				Если ЭтоВозвратОтПокупателя И ЗначенияРеквизитов.ЭтоНабор Тогда
					
					// Наборы
					ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, НоваяСтрока, СтруктураДанные, КэшЗначений);
					ЗаполнитьПризнакиИспользованияХарактеристик();
					
					Если СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
						Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
						ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
						ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,УчетВалютныхОпераций);
						
						ТребуетсяИзменениеНалогообложениеНаСНДС = СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС;
					КонецЕсли;
					
					Продолжить;
					// Конец Наборы
					
				Иначе
					
					Если НоваяСтрока.НеобходимостьВводаАкцизнойМарки
						И ЗначениеЗаполнено(СтрокаЗагрузки.КодАкцизнойМарки) Тогда
						ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект[ИмяТабличнойЧасти], НоваяСтрока, "КлючСвязи");
						
						СтрокаАкцизнаяМарка = Объект.АкцизныеМарки.Добавить();
						СтрокаАкцизнаяМарка.КлючСвязи = НоваяСтрока.КлючСвязи;
						СтрокаАкцизнаяМарка.КодАкцизнойМарки = СтрокаЗагрузки.КодАкцизнойМарки;
					КонецЕсли;
					
				КонецЕсли;
				
				// Прослеживаемость
				Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров И ПрослеживаемаяОперация(Объект.ВидОперации) Тогда
					НоваяСтрока.ПрослеживаемыйТовар = СтруктураДанные.ПрослеживаемыйТовар;
					НоваяСтрока.ПрослеживаемыйКомплект = СтруктураДанные.ПрослеживаемыйКомплект;
					ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, НоваяСтрока, КэшЗначений);
				Иначе
					НоваяСтрока.ПрослеживаемыйТовар = Ложь;
					НоваяСтрока.ПрослеживаемыйКомплект = Ложь;
				КонецЕсли;
				Если НоваяСтрока.ПрослеживаемыйТовар И Не КэшЗначений.ПоставщикРезидентТаможенногоСоюза Тогда
					НоваяСтрока.НомерГТД = Неопределено;
				КонецЕсли; 
				// Конец Прослеживаемость
				
				ВозвратОтКомиссионера = Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера;
				Если ЗаполнениеПоОстаткам Или ВозвратОтКомиссионера Тогда
					
					НоваяСтрока.Заказ = СтрокаЗагрузки.ЗаказПокупателя;
					НоваяСтрока.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
					НоваяСтрока.НомерГТД = Неопределено;
					НоваяСтрока.СтавкаНДС = СтруктураДанные.СтавкаНДС;
					НоваяСтрока.Сумма = ?(ВозвратОтКомиссионера, СтрокаЗагрузки.СуммаРасчетов, 0);
					НоваяСтрока.Цена = ?(УчетОстатковПоСкладскимОрдерам, СтруктураДанные.Цена, НоваяСтрока.Цена);
					
					Если ТипЗнч(ИдентификаторыНовыхСтрок) = Тип("Массив") Тогда
						ИдентификаторыНовыхСтрок.Добавить(НоваяСтрока.ПолучитьИдентификатор());
					КонецЕсли;
					
					Если Не ЗаказПокупателяИзДобавляемойСтроки = Неопределено
						И НЕ ЗаказПокупателяИзДобавляемойСтроки = НоваяСтрока.Заказ И СкладВШапке Тогда
						СкладВШапке = Ложь;
						Объект.ПоложениеЗаказаПоставщику = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
					КонецЕсли;
					
					ЗаказПокупателяИзДобавляемойСтроки = НоваяСтрока.Заказ;
					
				КонецЕсли;
				
				Если ЯчейкиВТабличнойЧасти Тогда
					НоваяСтрока.Ячейка = ?(ЗаполнениеПоОстаткам И УчетОстатковПоСкладскимОрдерам, СтрокаЗагрузки.Ячейка, ЗначенияРеквизитов.Ячейка);
				КонецЕсли;
				
				// Характеристики
				НоваяСтрока.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
				НоваяСтрока.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
				НоваяСтрока.ЗаполнениеХарактеристикиПроверено = Истина;
				
				Если СтруктураДанные.ИспользоватьХарактеристики
					Тогда
					НоваяСтрока.Характеристика = СтруктураДанные.Характеристика;
				КонецЕсли;
				// Конец Характеристики
				
				//Партии
				НоваяСтрока.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
				НоваяСтрока.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
				НоваяСтрока.КомиссияСНДС = СтруктураДанные.КомиссияСНДС;
				
				Если СтруктураДанные.ИспользоватьПартии
					Тогда
					НоваяСтрока.Партия = СтруктураДанные.Партия;
				КонецЕсли;
				// Конец Партии
				
				НоваяСтрока.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
				ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект[ИмяТабличнойЧасти], НоваяСтрока, "КлючСвязи");
				
				НоваяСтрока.УказыватьДокументПоступления = СтруктураДанные.УказыватьДокументПоступления;
				
				Если ЭтоВозвратОтПокупателя И СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
					Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
					ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
					ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,УчетВалютныхОпераций);
					
					ТребуетсяИзменениеНалогообложениеНаСНДС = СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяТабличнойЧасти = ИмяТЧРасходы() Тогда
			
			Если СтрокаЗагрузки.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Расходы
				И СтрокаЗагрузки.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Доходы
				И СтрокаЗагрузки.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.НезавершенноеПроизводство
				И СтрокаЗагрузки.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.КосвенныеЗатраты Тогда
				
				// Не указывается
				
			Иначе
				
				НоваяСтрока.СтруктурнаяЕдиница = ОсновноеПодразделение;
				
			КонецЕсли;
			
			Если СтрокаЗагрузки.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Расходы
				И СтрокаЗагрузки.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.СебестоимостьПродаж
				И СтрокаЗагрузки.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Доходы Тогда
				
				// Не указывается
				
			Иначе
				
				НоваяСтрока.НаправлениеДеятельности = СтрокаЗагрузки.Номенклатура.НаправлениеДеятельности;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.ПоложениеДокументаПоступления = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Элементы.ЗапасыДокументПоступления.Видимость = СкладскойУчетСервер.ПоказыватьКолонкуДокументПоступления(ЭтаФорма);
	КонецЕсли;
	
	// Ручная скидка - заполнение полей ввода на форме
	РассчитатьСуммуИПроцентСкидкиРасходыЗапасы(Объект, СкидкаСумма, СкидкаПроцент);
	// Конец Ручная скидка
	
	Если ИмяТабличнойЧасти = ИмяТЧЗапасы() Тогда
		ОбновитьДоступностьЯчеек();
		ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	КонецЕсли; 
	
	// ИнтеграцияГосИС
	СобытияФормИСУНФ.ПриИзмененииЭлемента(ЭтотОбъект, "ТабличнаяЧасть", Новый Структура("ТребуетсяЗаполнениеСлужебныхРеквизитов"));
	// Конец ИнтеграцияГосИС
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера Тогда
		Если ЗначениеЗаполнено(ЗаказПокупателяИзДобавляемойСтроки) И СкладВШапке Тогда
			Объект.Заказ = ЗаказПокупателяИзДобавляемойСтроки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

&НаСервере
Процедура ПолучитьЗапасыИзХранилищаКомиссия(АдресЗапасовВХранилище, ИдентификаторыНовыхСтрок)
	ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, "Запасы", ИдентификаторыНовыхСтрок, Истина);
	УстановитьВидимостьОтПользовательскихНастроек();
КонецПроцедуры

&НаСервере
Функция ПоместитьПредоплатаВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(
		Объект.Предоплата.Выгрузить(,
			"Документ,
			|Заказ,
			|СуммаРасчетов,
			|Курс,
			|Кратность,
			|СуммаПлатежа"),
		УникальныйИдентификатор);
	
КонецФункции // ПоместитьПредоплатаВХранилище()

&НаСервере
Процедура ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресПредоплатаВХранилище);
	Объект.Предоплата.Загрузить(ТаблицаДляЗагрузки);
	
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокОплаты(Объект.СпособЗачетаПредоплаты, Объект.Предоплата);
	
КонецПроцедуры // ПолучитьПредоплатаИзХранилища()

&НаСервере
Процедура ОпределитьВидимостьНастроекУчетаВНалогообложении()
	
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда
		Элементы.ЗапасыТоварыНеДляПродажи.Видимость = Ложь;
		
		Возврат;
	Иначе
		Элементы.ЗапасыТоварыНеДляПродажи.Видимость = Истина;
	КонецЕсли;
	
	СистемаНалогообложенияСтруктура = РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(Объект.Организация, Объект.Дата);
	
	Если Не СистемаНалогообложенияСтруктура.ПлательщикУСН Тогда
		Элементы.ЗапасыТоварыНеДляПродажи.Видимость = Ложь;
	Иначе
		Элементы.ЗапасыТоварыНеДляПродажи.Видимость = Истина;
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеВнешнимВидомФормы

&НаСервере
Процедура УстановитьВидимостьИДоступность(ИзмененВидОперации = Ложь, ЭтоНовыйОбъект = Ложь)
	
	Объект.ПодписьКладовщика = Объект.СтруктурнаяЕдиница.ПодписьМОЛ;
	
	ДопустимыеТипыЗаказа = Документы.ПриходнаяНакладная.ДопустимыеТипыЗаказа(Объект.ВидОперации);
	Если ДопустимыеТипыЗаказа.СодержитТип(Тип("ДокументСсылка.ЗаказПоставщику")) Тогда
		Элементы.ЗапасыЗаказ.Заголовок = НСтр("ru = 'Заказ поставщику'");
	ИначеЕсли ДопустимыеТипыЗаказа.СодержитТип(Тип("ДокументСсылка.ЗаказПокупателя")) Тогда
		Элементы.ЗапасыЗаказ.Заголовок = НСтр("ru = 'Заказ покупателя'");
	Иначе
		Элементы.ЗапасыЗаказ.Заголовок = "";
	КонецЕсли;
	
	Если НЕ МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера Тогда
			
			Элементы.ЗапасыЗапасыПодбор.Видимость = Ложь;
			Элементы.ЗапасыЗаполнение.Видимость = Истина;
			
			Элементы.ЗаполнитьПоОстаткамКомиссия.Видимость = Истина;
			Элементы.РаспределитьПоЗаказамКомиссия.Видимость = Истина;
			Элементы.ЗапасыПодобратьПоОстаткамКомиссия.Видимость = Истина;
			
			Элементы.ГруппаЗапасыПодборОрдер.Видимость = Ложь;
			Элементы.ГруппаЗапасыПодбор.Видимость = Истина;
			
			Элементы.ЗапасыЗаполнитьОрдер.Видимость = УчетОстатковПоСкладскимОрдерам;
			Элементы.ЗаполнитьПриходныеОрдераПоНоменклатуре.Видимость = УчетОстатковПоСкладскимОрдерам И Объект.ПоложениеДокументаПоступления = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
			
		Иначе
			
			Если УчетОстатковПоСкладскимОрдерам Тогда
				
				Элементы.ЗапасыЗапасыПодбор.Видимость = Истина;
				Элементы.ЗапасыЗаполнение.Видимость = Истина;
			
				Элементы.ГруппаЗапасыПодборОрдер.Видимость = Ложь;
				Элементы.ГруппаЗапасыПодбор.Видимость = Ложь;
				
				Элементы.ЗапасыЗаполнитьОрдер.Видимость = Истина;
				Элементы.ЗаполнитьПриходныеОрдераПоНоменклатуре.Видимость = Объект.ПоложениеДокументаПоступления = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
				
				Элементы.ЗаполнитьПоОстаткамКомиссия.Видимость = Ложь;
				Элементы.РаспределитьПоЗаказамКомиссия.Видимость = Ложь;
				Элементы.ЗапасыПодобратьПоОстаткамКомиссия.Видимость = Ложь;
				
			Иначе
				Элементы.ЗапасыЗапасыПодбор.Видимость = Истина;
				Элементы.ЗапасыЗаполнение.Видимость = Ложь;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Заказ.ОграничениеТипа = ДопустимыеТипыЗаказа;
	Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыЗаказ.ОграничениеТипа = ДопустимыеТипыЗаказа;
	
	// ГрупповоеИзменениеСтрок
	Если ИзмененВидОперации Тогда
		ЗаполнитьСписокДействий(ИмяТЧЗапасы());
	КонецЕсли;

	Если ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЗаказПоставщикуЗаказПокупателя Тогда
		Элементы.ЗапасыИзменениеСтрокЗначение.ОграничениеТипа = ДопустимыеТипыЗаказа;
	КонецЕсли;
	// Конец ГрупповоеИзменениеСтрок
	
	ЭтоРозничныйСклад = (Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница
	ИЛИ Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет);
	
	Элементы.ВключатьРасходыВСебестоимость.Видимость = ЭтоПоступлениеОтПоставщика(Объект.ВидОперации);
	Элементы.ТаблицаКомандныеПанелиРасходы.Видимость = ЭтоПоступлениеОтПоставщика(Объект.ВидОперации);
	Элементы.ЗапасыСуммаРасходов.Видимость = ЭтоПоступлениеОтПоставщика(Объект.ВидОперации);
	Элементы.РаспределитьРасходы.Видимость = ЭтоПоступлениеОтПоставщика(Объект.ВидОперации);
	Элементы.Расхождения.Видимость = ЭтоПоступлениеОтПоставщика(Объект.ВидОперации);
	
	Если ЭтоРозничныйСклад И Элементы.РасходыЗаказ.Видимость Тогда
		Элементы.РасходыЗаказ.Видимость = Ложь;
	КонецЕсли; 
	Элементы.РасходыСтруктурнаяЕдиница.Видимость = НЕ Объект.ВключатьРасходыВСебестоимость;
	Элементы.РасходыНаправлениеДеятельности.Видимость = НЕ Объект.ВключатьРасходыВСебестоимость;
	Элементы.РаспределитьРасходы.Видимость = Объект.ВключатьРасходыВСебестоимость;
	Элементы.ЗапасыСуммаРасходов.Видимость = Объект.ВключатьРасходыВСебестоимость;
	
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ПриходнаяНакладная",
		НастройкиФормыВыбораНоменклатуры, Истина);
	
	Если ЭтоПоступлениеОтПоставщика(Объект.ВидОперации) Тогда
		
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Склад);
		НовыйМассив.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Розница);
		НовыйМассив.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет);
		МассивСобственныеЗапасыИТоварыНаКомиссии = Новый ФиксированныйМассив(НовыйМассив);
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСтруктурнойЕдиницы", МассивСобственныеЗапасыИТоварыНаКомиссии);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.СтруктурнаяЕдиница.ПараметрыВыбора = НовыеПараметры;
		
	Иначе
		
		Объект.ВключатьРасходыВСебестоимость = Ложь;
		Объект.Расходы.Очистить();
		
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыСуммаРасходов.Видимость = Ложь;
		Если Объект.Запасы.Количество() > 0 Тогда
			
			Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
				
				СтрокаЗапасы.СуммаРасходов = 0;
				
			КонецЦикла;
			
		КонецЕсли;
		
		НовыйМассив = Новый Массив();
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию
				ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя Тогда
			НовыйМассив.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Склад);
			НовыйМассив.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Розница);
		Иначе
			НовыйМассив.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Склад);
		КонецЕсли;
		
		МассивСобственныеЗапасыИТоварыНаКомиссии = Новый ФиксированныйМассив(НовыйМассив);
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСтруктурнойЕдиницы", МассивСобственныеЗапасыИТоварыНаКомиссии);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.СтруктурнаяЕдиница.ПараметрыВыбора = НовыеПараметры;
		
	КонецЕсли;
	
	Если ЭтоВозвратОтПокупателя(Объект.ВидОперации)
		И (НЕ ЗначениеЗаполнено(Объект.ДокументОснование)
		ИЛИ (ЗначениеЗаполнено(Объект.ДокументОснование)
			И ТипЗнч(Объект.ДокументОснование) <> Тип("ДокументСсылка.РасходнаяНакладная")
			И ТипЗнч(Объект.ДокументОснование) <> Тип("ДокументСсылка.ЧекККМ")
			И (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя")
			И Объект.ДокументОснование.ВидОперации <> Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд)))
		Тогда
		
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыСебестоимость.Видимость = Истина;
		
	Иначе
		
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыСебестоимость.Видимость = Ложь;
		Если Объект.Запасы.Количество() > 0 Тогда
			Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
				СтрокаЗапасы.Себестоимость = 0;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	МассивВидовОпераций = Новый Массив(4);
	МассивВидовОпераций[0] = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика;
	МассивВидовОпераций[1] = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя;
	МассивВидовОпераций[2] = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию;
	МассивВидовОпераций[3] = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера;
	
	// ГТД и РНПТ.
	ЭлементыГТД = Новый Массив;
	ЭлементыГТД.Добавить("ЗапасыСтранаПроисхождения");
	ЭлементыГТД.Добавить("РежимГТД");
	ЭлементыГТД.Добавить("НомераГТДПодобрать");
	ЭлементыГТД.Добавить("РежимГТДКонтекст");
	ЭлементыГТД.Добавить("НомераГТДКонтекстПодобрать");
	ЭлементыГТД.Добавить("ВыбратьНомерГТД");
	
	СведенияОбИмпортеВидны = (МассивВидовОпераций.Найти(Объект.ВидОперации) <> Неопределено) И КэшЗначений.УчетГТД;
	Для Каждого ТекЭлемент Из ЭлементыГТД Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ТекЭлемент, "Видимость", СведенияОбИмпортеВидны);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыГруппаРНПТ", "Видимость",
		СведенияОбИмпортеВидны И КэшЗначений.ВестиУчетПрослеживаемыхТоваров);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыНомерГТД", "Видимость",
		СведенияОбИмпортеВидны И Не КэшЗначений.ВестиУчетПрослеживаемыхТоваров);
	
	Если НЕ СведенияОбИмпортеВидны Тогда
		Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
			СтрокаЗапасы.НомерГТД = Неопределено;
		КонецЦикла;
	КонецЕсли;
	// Конец ГТД и РНПТ.
	
	
	ЭтоНеВозврат = Объект.ВидОперации <> Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика
		И Объект.ВидОперации <> Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя
		// И Объект.ВидОперации <> Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера
		И Объект.ВидОперации <> Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратСОтветХранения;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЗагрузкаИзФайлаЗапасы", "Видимость", ЭтоНеВозврат);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РасходыЗагрузкаИзФайлаУслуги", "Видимость", ЭтоНеВозврат);
	
	// Партии.
	
	Элементы.ЗапасыПартия.АвтоОтметкаНезаполненного = Ложь;
	
	МассивСтатусовДляВыбораНоменклатуры = Новый Массив;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию Тогда
		
		НовыйМассив = Новый Массив();
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыПартий.ТоварыНаКомиссии);
		НовыйМассив.Добавить(НовыйПараметр);
		
		МассивСтатусовДляВыбораНоменклатуры.Добавить(Перечисления.СтатусыПартий.ТоварыНаКомиссии);
		
		НовыйПараметр = Новый ПараметрВыбора("Дополнительно.ОграничениеСтатуса", Перечисления.СтатусыПартий.ТоварыНаКомиссии);
		НовыйМассив.Добавить(НовыйПараметр);
		
		НовыйПараметр = Новый ПараметрВыбора("Дополнительно.НалогообложениеНДС", Объект.НалогообложениеНДС);
		НовыйМассив.Добавить(НовыйПараметр);
		
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыПартия.ПараметрыВыбора = НовыеПараметры;
		Элементы.ЗапасыПартия.АвтоОтметкаНезаполненного = Истина;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемВПереработку Тогда
		
		НовыйМассив = Новый Массив();
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыПартий.ДавальческоеСырье);
		НовыйМассив.Добавить(НовыйПараметр);
		
		МассивСтатусовДляВыбораНоменклатуры.Добавить(Перечисления.СтатусыПартий.ДавальческоеСырье);
		
		НовыйПараметр = Новый ПараметрВыбора("Дополнительно.ОграничениеСтатуса", Перечисления.СтатусыПартий.ДавальческоеСырье);
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыПартия.ПараметрыВыбора = НовыеПараметры;
		Элементы.ЗапасыПартия.АвтоОтметкаНезаполненного = Истина;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаОтветХранение Тогда
		
		НовыйМассив = Новый Массив();
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыПартий.ОтветственноеХранение);
		МассивСтатусовДляВыбораНоменклатуры.Добавить(Перечисления.СтатусыПартий.ОтветственноеХранение);
		НовыйМассив.Добавить(НовыйПараметр);
		НовыйПараметр = Новый ПараметрВыбора("Дополнительно.ОграничениеСтатуса", Перечисления.СтатусыПартий.ОтветственноеХранение);
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыПартия.ПараметрыВыбора = НовыеПараметры;
		Элементы.ЗапасыПартия.АвтоОтметкаНезаполненного = Истина;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя Тогда
		
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(Перечисления.СтатусыПартий.СобственныеЗапасы);
		НовыйМассив.Добавить(Перечисления.СтатусыПартий.ТоварыНаКомиссии);
		
		МассивСтатусовДляВыбораНоменклатуры.Добавить(Перечисления.СтатусыПартий.СобственныеЗапасы);
		МассивСтатусовДляВыбораНоменклатуры.Добавить(Перечисления.СтатусыПартий.ТоварыНаКомиссии);
		
		МассивСобственныеЗапасыИТоварыНаКомиссии = Новый ФиксированныйМассив(НовыйМассив);
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", МассивСобственныеЗапасыИТоварыНаКомиссии);
		НовыйПараметр2 = Новый ПараметрВыбора("Дополнительно.ОграничениеСтатуса", МассивСобственныеЗапасыИТоварыНаКомиссии);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыйМассив.Добавить(НовыйПараметр2);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыПартия.ПараметрыВыбора = НовыеПараметры;
		
	Иначе
		
		НовыйМассив = Новый Массив();
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыПартий.СобственныеЗапасы);
		НовыйМассив.Добавить(НовыйПараметр);
		
		МассивСтатусовДляВыбораНоменклатуры.Добавить(Перечисления.СтатусыПартий.СобственныеЗапасы);
		
		НовыйПараметр = Новый ПараметрВыбора("Дополнительно.ОграничениеСтатуса", Перечисления.СтатусыПартий.СобственныеЗапасы);
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыПартия.ПараметрыВыбора = НовыеПараметры;
		
	КонецЕсли;
	
	Если Объект.ПокупателемВыставляетсяСчетФактураНаВозврат Тогда
		ЭтаФорма.СпособРегистрацииСчетФактуры = 1;
	ИначеЕсли Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура Тогда
		ЭтаФорма.СпособРегистрацииСчетФактуры = 0;
	КонецЕсли;
	
	// Зачет предоплаты.
	Если ЭтоПоступлениеОтПоставщика(Объект.ВидОперации) ИЛИ ЭтоВозвратОтПокупателя(Объект.ВидОперации) Тогда
		Элементы.ГруппаПредоплата.Видимость = Истина;
		Элементы.СпособЗачетаПредоплаты.Доступность = ЭтоПоступлениеОтПоставщика(Объект.ВидОперации);
		Элементы.ВариантЗаполненияРасшифровки.Доступность = Элементы.СпособЗачетаПредоплаты.Доступность;
		Элементы.ОткрытьПомощникЗачетаПредоплаты.Доступность = Элементы.СпособЗачетаПредоплаты.Доступность;
	Иначе
		Элементы.ГруппаПредоплата.Видимость = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПредоплатаДобавитьОплатуСертификатом",
		"Видимость", ЭтоВозвратОтПокупателя(Объект.ВидОперации));
	
	// Ставка НДС, Сумма НДС, Всего.
	Если ИзмененВидОперации Тогда
		ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	Иначе
		
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
			
			Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
			Элементы.ЗапасыСуммаНДС.Видимость = Истина;
			Элементы.ЗапасыВсего.Видимость = Истина;
			Элементы.РасходыСтавкаНДС.Видимость = Истина;
			Элементы.РасходыСуммаНДС.Видимость = Истина;
			Элементы.РасходыВсего.Видимость = Истина;
			Элементы.СчетФактураНадпись.Видимость = Истина;
			
		Иначе
			
			Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
			Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
			Элементы.ЗапасыВсего.Видимость = Ложь;
			Элементы.РасходыСтавкаНДС.Видимость = Ложь;
			Элементы.РасходыСуммаНДС.Видимость = Ложь;
			Элементы.РасходыВсего.Видимость = Ложь;
			Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НаЭкспорт Тогда
				Элементы.СчетФактураНадпись.Видимость = Истина;
			Иначе
				Элементы.СчетФактураНадпись.Видимость = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСчетФактураНомерДата", "Видимость"
		, Элементы.СчетФактураНадпись.Видимость И Не ЗначениеЗаполнено(КэшЗначений.СчетФактураСсылка) И Не Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНДС", "Видимость"
		, Элементы.СчетФактураНадпись.Видимость И Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя);
		
	КонецЕсли;
	
	Элементы.Контрагент.Заголовок = ЗаголовокПоляКонтрагент();
	
	// Установка доступности цен для редактирования.
	РазрешеноРедактированиеЦенДокументов = УправлениеДоступомУНФ.РазрешеноРедактированиеЦенДокументов();
	
	Элементы.ЗапасыЦена.ТолькоПросмотр 		= НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСумма.ТолькоПросмотр 	= НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыПроцентСкидкиНаценки.ТолькоПросмотр = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСуммаСкидкиНаценки.ТолькоПросмотр = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСуммаНДС.ТолькоПросмотр 	= НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.Скидки.ТолькоПросмотр			= НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.РасходыПроцентСкидкиНаценки.ТолькоПросмотр = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.РасходыСуммаСкидкиНаценки.ТолькоПросмотр = НЕ РазрешеноРедактированиеЦенДокументов;
	
	// Обновим подвал формы.
	ИтогВсего = Объект.Запасы.Итог("Всего") + Объект.Расходы.Итог("Всего");
	ИтогСуммаНДС = Объект.Запасы.Итог("СуммаНДС") + Объект.Расходы.Итог("СуммаНДС");
	
	// Установка видимости и доступности элементов ЕГАИС
	УстановитьДоступностьЭлементовЕГАИС();
	
	УстановитьВидимостьОтПользовательскихНастроек();
	Элементы.СтруктурнаяЕдиница.АвтоМаксимальнаяШирина = НЕ УправлениеНебольшойФирмойПовтИсп.ВключеноИспользованиеЯчеек() ИЛИ НЕ Элементы.Ячейка.Видимость;
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	// Наборы
	Элементы.ЗапасыКартинкаНабора.Видимость			= Ложь;
	Если ЭтоВозвратОтПокупателя(Объект.ВидОперации) Тогда
		Для каждого Стр Из Объект.Запасы Цикл
			Если Стр.КартинкаНабора>0 Тогда
				Элементы.ЗапасыКартинкаНабора.Видимость = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
	МассивПараметров = Новый Массив;
	МассивСтатусов = Новый ФиксированныйМассив(МассивСтатусовДляВыбораНоменклатуры);
	Для каждого ЭлементМассива Из Элементы.ЗапасыНоменклатура.ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя="Отбор.ЭтоНабор" Тогда
			Продолжить;
		КонецЕсли;
		Если ЭлементМассива.Имя="Дополнительно.СтатусыПартий" Тогда 
			Продолжить;
		КонецЕсли;
		Если ЭлементМассива.Имя="Дополнительно.ВидОперации" Тогда 
			Продолжить;
		КонецЕсли;
		МассивПараметров.Добавить(ЭлементМассива);
	КонецЦикла; 
	Если НЕ ЭтоВозвратОтПокупателя(Объект.ВидОперации) Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЭтоНабор", Ложь));
	КонецЕсли;
	
	МассивПараметров.Добавить(Новый ПараметрВыбора("Дополнительно.ВидОперации", Объект.ВидОперации));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Дополнительно.СтатусыПартий", МассивСтатусов));
	Элементы.ЗапасыНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	// Конец Наборы
	
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, ИмяТЧЗапасы());
	
	// Комиссия
	Если Не ЭтоНовыйОбъект Тогда
		ОпределитьВидимостьЗаказовПокупателяКомиссия(ЭтотОбъект);
	КонецЕсли;
	
	// Прослеживаемость
	ПрослеживаемостьФормыКлиентСерверУНФ.НастроитьВидимостьКолонокРНПТ(
		ЭтотОбъект,
		,,
		ПрослеживаемаяОперация(Объект.ВидОперации),
		КэшЗначений.ПоставщикРезидентТаможенногоСоюза);
	// Конец Прослеживаемость
	
	УстановитьНастройкиФормыУПД(ЭтаФорма, КэшЗначений.СчетФактураСсылка);
	
	ПриИзмененииВидаУчетаСклада();
	
КонецПроцедуры // УстановитьВидимостьИДоступность()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНастройкиФормыУПД(Форма, СчетФактураСсылка, ИзменениеУПД = Ложь)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.ЭтоУниверсальныйДокумент Тогда

		АвтоОтметкаНезаполненного = Ложь;
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика") 
			Или (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя")
			И НЕ Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура) Тогда
			АвтоОтметкаНезаполненного = Истина;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НомерВходящегоДокумента", "АвтоОтметкаНезаполненного", АвтоОтметкаНезаполненного);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаВходящегоДокумента", "АвтоОтметкаНезаполненного", АвтоОтметкаНезаполненного);
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НомерВходящегоДокумента", "ОтметкаНезаполненного", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаВходящегоДокумента", "ОтметкаНезаполненного", Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСчетФактураНомерДата", "Видимость", Ложь);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НомерВходящегоДокумента", "АвтоОтметкаНезаполненного", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаВходящегоДокумента", "АвтоОтметкаНезаполненного", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НомерВходящегоДокумента", "ОтметкаНезаполненного", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаВходящегоДокумента", "ОтметкаНезаполненного", Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСчетФактураНомерДата", "Видимость"
			, Элементы.СчетФактураНадпись.Видимость И Не ЗначениеЗаполнено(СчетФактураСсылка) И Не Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура);
	
	КонецЕсли;
	
	Если ИзменениеУПД Тогда
		Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(СчетФактураСсылка, Истина,
		, Объект.ЭтоУниверсальныйДокумент, Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьВидимостьЗаказовПокупателяКомиссия(Форма)
	
	Если Не Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера") Тогда
		
		Если Форма.Объект.ПоложениеЗаказаПоставщику = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда 
			Форма.Элементы.ГруппаЗаказОснование.Видимость = Истина;
		Иначе
			Форма.Элементы.ЗапасыЗаказ.Видимость = Истина;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	НеУчитыватьЗаказыПриПередачеНаКомиссию = Форма.НеУчитыватьЗаказыПриПередачеНаКомиссию;
	Если Форма.Объект.ПоложениеЗаказаПоставщику = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда 
		Форма.Элементы.ГруппаЗаказОснование.Видимость = Не НеУчитыватьЗаказыПриПередачеНаКомиссию Или (НеУчитыватьЗаказыПриПередачеНаКомиссию И ЗначениеЗаполнено(Форма.Объект.Заказ));
	Иначе
		ЕстьЗаказВТабличнойЧасти = Ложь;
		Для Каждого СтрокаТабличнойЧасти Из Форма.Объект.Запасы Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Заказ) Тогда
				ЕстьЗаказВТабличнойЧасти = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Форма.Элементы.ЗапасыЗаказ.Видимость = Не НеУчитыватьЗаказыПриПередачеНаКомиссию Или (НеУчитыватьЗаказыПриПередачеНаКомиссию И ЕстьЗаказВТабличнойЧасти);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗаголовокПоляКонтрагент()
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат НСтр("ru = 'Поставщик'");
	КонецЕсли;

	Если Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика Тогда
		Возврат НСтр("ru = 'Поставщик'");
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию Тогда
		Возврат НСтр("ru = 'Поставщик'");
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика Тогда
		Возврат НСтр("ru = 'Поставщик'");
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаОтветХранение Тогда
		Возврат НСтр("ru = 'Поставщик'");
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратСОтветХранения Тогда
		Возврат НСтр("ru = 'Получатель'");
	КонецЕсли;
	
	Возврат НСтр("ru = 'Покупатель'");
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьОтПользовательскихНастроек()
	
	ЭтоОтветХранение = (Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаОтветХранение
	ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратСОтветХранения);
	
	Если Объект.ПоложениеЗаказаПоставщику = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Заказ", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьПоЗаказу", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЗаказ", "Видимость", НЕ ЭтоОтветХранение);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РасходыЗаказПоставщику", "Видимость", Истина);
		ЗаказВШапке = Ложь;
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Заказ", "Видимость", НЕ ЭтоОтветХранение);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьПоЗаказу", "Видимость", НЕ ЭтоОтветХранение);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЗаказ", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РасходыЗаказПоставщику", "Видимость", Ложь);
		ЗаказВШапке = Истина;
	КонецЕсли;
	
	Если Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиница", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Ячейка", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСтруктурнаяЕдиница", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЯчейка", "Видимость", Истина);
		СкладВШапке = Ложь;
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиница", "Видимость", Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Ячейка", "Видимость", Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСтруктурнаяЕдиница", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЯчейка", "Видимость", Ложь);
		СкладВШапке = Истина;
	КонецЕсли;
	
	Если Объект.ПоложениеПроекта = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Элементы.РасходыПроект.Видимость = Истина;
		Элементы.Проект.Видимость = Ложь;
	Иначе
		Элементы.РасходыПроект.Видимость = Ложь;
		Элементы.Проект.Видимость = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСодержание", "Видимость",
		ПоказыватьКолонкуСодержаниеВПриходнойНакладнойЗапасы);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РасходыСодержание", "Видимость",
		ПоказыватьКолонкуСодержаниеВПриходнойНакладнойРасходы);	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораВидОперации()

	Элементы.ВидОперации.СписокВыбора.Очистить();

	РазрешеныЗакупки = УправлениеДоступомУНФ.ДоступноСозданиеДокументовРазделаЗакупки();

	Если РазрешеныЗакупки И Не Параметры.Свойство("ВидОперацииВозврат") Тогда

		Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика);

		Если ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию") Тогда
			Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию);
		КонецЕсли;

		Если ПолучитьФункциональнуюОпцию("ПереработкаДавальческогоСырья") Тогда
			Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ПриемВПереработку);
		КонецЕсли;

		Если ПолучитьФункциональнуюОпцию("ПриемЗапасовНаОтветХранение") Тогда
			Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаОтветХранение);
		КонецЕсли;

	КонецЕсли;

	Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя);

	Если ПолучитьФункциональнуюОпцию("ПередачаТоваровНаКомиссию") Тогда
		Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера);
	КонецЕсли;

	Если ПолучитьФункциональнуюОпцию("ПередачаСырьяВПереработку") Тогда
		Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика);
	КонецЕсли;

	Если ПолучитьФункциональнуюОпцию("ПередачаЗапасовНаОтветХранение") Тогда
		Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратСОтветХранения);
	КонецЕсли;

	Если Элементы.ВидОперации.СписокВыбора.НайтиПоЗначению(Объект.ВидОперации) = Неопределено Тогда
		Элементы.ВидОперации.СписокВыбора.Добавить(Объект.ВидОперации);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПечатиЧека()
	
	ИспользоватьПО = ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование"); 
	ВидОперацииПодразумеваетЧек = ИспользоватьПО 
		И (ЭтоПоступлениеОтПоставщика(Объект.ВидОперации)
			ИЛИ ЭтоВозвратОтПокупателя(Объект.ВидОперации));
	НапечататьЧекВидимость = ВидОперацииПодразумеваетЧек И НЕ ТолькоПросмотр;
	
	РасчетыРаботаСФормамиВызовСервера.УстановитьВидимостьЭлементовПечатиЧека(ЭтотОбъект, НапечататьЧекВидимость, ВидОперацииПодразумеваетЧек);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПовторнаяПечатьЧека",
		"Видимость",
		ИспользоватьПО);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПечатиЧека()
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		Элементы.ГруппаЧек.Доступность = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПовторнаяПечатьЧека",
		"Доступность",
		Объект.НомерЧекаККМ <> 0);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовЕГАИС()
	
	ДоступнаОтправкаЕГАИС = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя");
	
	Если Элементы.Найти("ФормаОбщаяКомандаВыгрузитьВЕГАИС") <> Неопределено Тогда
		
		Элементы.ФормаОбщаяКомандаВыгрузитьВЕГАИС.Видимость = ДоступнаОтправкаЕГАИС;
		Элементы.ФормаОбщаяКомандаВыгрузитьВЕГАИС.Доступность = Объект.Проведен И НЕ ЭтотОбъект.ТолькоПросмотр;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	УстановитьУсловноеОформлениеНаборов();
	УстановитьУсловноеОформлениеКоличества();
	УстановитьУсловноеОформлениеСебестоимости();
	УстановитьУсловноеОформлениеСкидок();
	УстановитьУсловноеОформлениеЗаказов();
	НоменклатураВДокументахСервер.ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристик(ЭтаФорма);
	УстановитьУсловноеОформлениеЯчеек();
	УстановитьУсловноеОформлениеРасхождений();
	
	// Прослеживаемость
	ПрослеживаемостьФормыУНФ.ОбновитьУсловноеОформлениеТабличнойЧастиДляПрослеживаемости(ЭтаФорма);
	
	СкладскойУчетСервер.УстановитьУсловноеОформлениеДокументовПоступления(УсловноеОформление);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеНаборов()
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.НоменклатураНабора", Справочники.Номенклатура.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ВидОперации", Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыНоменклатура,ЗапасыХарактеристика,ЗапасыКоличество,ЗапасыЕдиницаИзмерения");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеКоличества()

	УсловноеОформлениеКоличество = УсловноеОформление.Элементы.Добавить();

	РаботаСФормой.ДобавитьОформляемыеПоля(УсловноеОформлениеКоличество, "ЗапасыКоличество,ЗапасыКоличествоФакт");

	РаботаСФормой.ДобавитьЭлементУсловногоОформления(УсловноеОформлениеКоличество, "Текст",
		Новый ПолеКомпоновкиДанных("Объект.Запасы.КоличествоПредставление"));

	ГруппаОтборКоличество = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(
		УсловноеОформлениеКоличество.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборКоличество,
		"Объект.ПроверятьРасхожденияСЗаказом", Истина, ВидСравненияКомпоновкиДанных.Равно);

	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборКоличество,
		"Объект.ПроверятьРасхожденияСВходящимДокументом", Истина, ВидСравненияКомпоновкиДанных.Равно);

	УсловноеОформлениеКоличествоСправочно = УсловноеОформление.Элементы.Добавить();

	РаботаСФормой.ДобавитьОформляемыеПоля(УсловноеОформлениеКоличествоСправочно, "ЗапасыКоличествоСправочно");

	РаботаСФормой.ДобавитьЭлементУсловногоОформления(УсловноеОформлениеКоличествоСправочно, "Текст",
		Новый ПолеКомпоновкиДанных("Объект.Запасы.КоличествоСправочноПредставление"));

	ГруппаОтборКоличествоСправочно = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(
		УсловноеОформлениеКоличествоСправочно.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборКоличествоСправочно,
		"Объект.ПроверятьРасхожденияСЗаказом", Истина, ВидСравненияКомпоновкиДанных.Равно);

	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборКоличествоСправочно,
		"Объект.ПроверятьРасхожденияСВходящимДокументом", Истина, ВидСравненияКомпоновкиДанных.Равно);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеСебестоимости()
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.Себестоимость", 0);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСебестоимость");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Авто>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеСкидок()
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	ГруппаОтборов = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Объект.Запасы.ПроцентСкидкиНаценки", 100);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Объект.Запасы.СуммаСкидкиНаценки", Новый ПолеКомпоновкиДанных("Объект.Запасы.Сумма"),ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСумма");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ПроцентСкидкиНаценки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыПроцентСкидкиНаценки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "%");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.СуммаСкидкиНаценки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСуммаСкидкиНаценки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = 'сумма'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	ГруппаОтборов = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Объект.Расходы.ПроцентСкидкиНаценки", 100);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Объект.Расходы.СуммаСкидкиНаценки", Новый ПолеКомпоновкиДанных("Объект.Расходы.Сумма"),ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "РасходыСумма");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Расходы.ПроцентСкидкиНаценки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "РасходыПроцентСкидкиНаценки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "%");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Расходы.СуммаСкидкиНаценки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "РасходыСуммаСкидкиНаценки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = 'сумма'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеЗаказов()
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ЗаказПокупателя", Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.Заказ", Неопределено, ВидСравненияКомпоновкиДанных.Заполнено);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыЗаказПокупателя");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Авто>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Расходы.Заказ", Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Расходы.ЗаказПоставщику", Неопределено, ВидСравненияКомпоновкиДанных.Заполнено);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "РасходыЗаказ");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Авто>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеЯчеек()
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор,
		"Объект.Запасы.ЯчейкаДоступна", Ложь);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыЯчейка");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеРасхождений()
	
	КогдаПроверятьВсеРасхожденияИНетРасхождений();
	КогдаПроверятьВсеРасхожденияИЕстьРасхождения();
	КогдаПроверятьРасхожденияСВходящимДокументомЕстьИстинаИНетРасхождений();
	КогдаПроверятьРасхожденияСВходящимДокументомЕстьИстинаИЕстьРасхождения();
	КогдаПроверятьРасхожденияСЗаказомЕстьИстинаИНетРасхожденийСЗаказом();
	КогдаПроверятьРасхожденияСЗаказомЕстьИстинаИЕстьРасхожденияСЗаказом();
	КогдаПроверятьВсеРасхожденияИНетРасхожденийСВходящимДокументомИЕстьРасхожденияСЗаказом();
	КогдаПроверятьВсеРасхожденияИЕстьРасхожденияСВходящимДокументомИНетРасхожденийСЗаказом();
	УстановитьУсловноеОформлениеРасхожденийСЦенойВЗаказе();
	
КонецПроцедуры

&НаСервере
Процедура КогдаПроверятьВсеРасхожденияИНетРасхождений()
	
	УсловноеОформлениеЗеленыеКолонки = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(УсловноеОформлениеЗеленыеКолонки, "ЦветТекста", WebЦвета.Зеленый);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(УсловноеОформлениеЗеленыеКолонки.Отбор,
		"Объект.ПроверятьРасхожденияСЗаказом", Истина, ВидСравненияКомпоновкиДанных.Равно);
		
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(УсловноеОформлениеЗеленыеКолонки.Отбор,
		"Объект.ПроверятьРасхожденияСВходящимДокументом", Истина, ВидСравненияКомпоновкиДанных.Равно);
		
	ГруппаОтборовЗеленыеКолонки = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(
		УсловноеОформлениеЗеленыеКолонки.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборовЗеленыеКолонки,
		"Объект.Запасы.Расхождение", 0, ВидСравненияКомпоновкиДанных.Равно);
		
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборовЗеленыеКолонки,
		"Объект.Запасы.РасхождениеСЗаказом", 0, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(УсловноеОформлениеЗеленыеКолонки,
		"ЗапасыКоличество,ЗапасыКоличествоСправочно,ЗапасыКоличествоФакт");
	
	РаботаСФормой.ДобавитьОформляемыеПоля(УсловноеОформлениеЗеленыеКолонки,
		"ЗапасыКоличествоВЗаказе,ЗапасыРасхождение,ЗапасыРасхождениеСЗаказом");
	
КонецПроцедуры

&НаСервере
Процедура КогдаПроверятьВсеРасхожденияИЕстьРасхождения()
	
	УсловноеОформлениеКрасныеКолонки = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(УсловноеОформлениеКрасныеКолонки, "ЦветТекста", WebЦвета.Красный);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(УсловноеОформлениеКрасныеКолонки,
		"ЗапасыКоличество,ЗапасыКоличествоСправочно,ЗапасыКоличествоФакт");
	
	РаботаСФормой.ДобавитьОформляемыеПоля(УсловноеОформлениеКрасныеКолонки,
		"ЗапасыКоличествоВЗаказе,ЗапасыРасхождение,ЗапасыРасхождениеСЗаказом");
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(УсловноеОформлениеКрасныеКолонки.Отбор,
		"Объект.ПроверятьРасхожденияСЗаказом", Истина, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(УсловноеОформлениеКрасныеКолонки.Отбор,
		"Объект.ПроверятьРасхожденияСВходящимДокументом", Истина, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(УсловноеОформлениеКрасныеКолонки.Отбор,
		"Объект.Запасы.Расхождение", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(УсловноеОформлениеКрасныеКолонки.Отбор,
		"Объект.Запасы.РасхождениеСЗаказом", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	
КонецПроцедуры

&НаСервере
Процедура КогдаПроверятьРасхожденияСВходящимДокументомЕстьИстинаИНетРасхождений()
	
	УсловноеОформлениеЗеленаяСтрока = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(УсловноеОформлениеЗеленаяСтрока, "ЦветТекста", WebЦвета.Зеленый);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(УсловноеОформлениеЗеленаяСтрока, "Запасы");
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(УсловноеОформлениеЗеленаяСтрока.Отбор,
		"Объект.ПроверятьРасхожденияСВходящимДокументом", Истина, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(УсловноеОформлениеЗеленаяСтрока.Отбор,
		"Объект.ПроверятьРасхожденияСЗаказом", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(УсловноеОформлениеЗеленаяСтрока.Отбор,
		"Объект.Запасы.Расхождение", 0, ВидСравненияКомпоновкиДанных.Равно);
	
КонецПроцедуры

&НаСервере
Процедура КогдаПроверятьРасхожденияСВходящимДокументомЕстьИстинаИЕстьРасхождения()
	
	УсловноеОформлениеКраснаяСтрока = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(УсловноеОформлениеКраснаяСтрока, "ЦветТекста", WebЦвета.Красный);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(УсловноеОформлениеКраснаяСтрока, "Запасы");
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(УсловноеОформлениеКраснаяСтрока.Отбор,
		"Объект.ПроверятьРасхожденияСВходящимДокументом", Истина, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(УсловноеОформлениеКраснаяСтрока.Отбор,
		"Объект.ПроверятьРасхожденияСЗаказом", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(УсловноеОформлениеКраснаяСтрока.Отбор,
		"Объект.Запасы.Расхождение", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	
	УсловноеОформлениеКолонкаРасхождение = УсловноеОформление.Элементы.Добавить();
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(УсловноеОформлениеКолонкаРасхождение.Отбор,
		"Объект.Запасы.Расхождение", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(УсловноеОформлениеКолонкаРасхождение, "ЗапасыРасхождение");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(УсловноеОформлениеКолонкаРасхождение, "Шрифт", ПолужирныйШрифт());
	
КонецПроцедуры

&НаСервере
Процедура КогдаПроверятьРасхожденияСЗаказомЕстьИстинаИНетРасхожденийСЗаказом()
	
	ЗеленыеКолонкиКоличество = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(ЗеленыеКолонкиКоличество, "ЦветТекста", WebЦвета.Зеленый);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(ЗеленыеКолонкиКоличество,
		"ЗапасыКоличество,ЗапасыКоличествоВЗаказе,ЗапасыРасхождениеСЗаказом");
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ЗеленыеКолонкиКоличество.Отбор,
		"Объект.ПроверятьРасхожденияСЗаказом", Истина, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ЗеленыеКолонкиКоличество.Отбор,
		"Объект.ПроверятьРасхожденияСВходящимДокументом", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ЗеленыеКолонкиКоличество.Отбор,
		"Объект.Запасы.РасхождениеСЗаказом", 0, ВидСравненияКомпоновкиДанных.Равно);

КонецПроцедуры

&НаСервере
Процедура КогдаПроверятьРасхожденияСЗаказомЕстьИстинаИЕстьРасхожденияСЗаказом()
	
	УсловноеОформлениеКраснаяСтрока = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(УсловноеОформлениеКраснаяСтрока, "ЦветТекста", WebЦвета.Красный);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(УсловноеОформлениеКраснаяСтрока,
		"ЗапасыКоличество,ЗапасыКоличествоВЗаказе,ЗапасыРасхождениеСЗаказом");
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(УсловноеОформлениеКраснаяСтрока.Отбор,
		"Объект.ПроверятьРасхожденияСЗаказом", Истина, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(УсловноеОформлениеКраснаяСтрока.Отбор,
		"Объект.ПроверятьРасхожденияСВходящимДокументом", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(УсловноеОформлениеКраснаяСтрока.Отбор,
		"Объект.Запасы.РасхождениеСЗаказом", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	
	УсловноеОформлениеРасхождениеСЗаказом = УсловноеОформление.Элементы.Добавить();
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(УсловноеОформлениеРасхождениеСЗаказом.Отбор,
		"Объект.Запасы.РасхождениеСЗаказом", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(УсловноеОформлениеРасхождениеСЗаказом, "ЗапасыРасхождениеСЗаказом");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(УсловноеОформлениеРасхождениеСЗаказом, "Шрифт", ПолужирныйШрифт());
	
КонецПроцедуры

&НаСервере
Процедура КогдаПроверятьВсеРасхожденияИНетРасхожденийСВходящимДокументомИЕстьРасхожденияСЗаказом()
	
	УсловноеОформлениеКрасныеКолонки = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(УсловноеОформлениеКрасныеКолонки, "ЦветТекста", WebЦвета.Красный);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(УсловноеОформлениеКрасныеКолонки,
		"ЗапасыРасхождениеСЗаказом,ЗапасыКоличествоВЗаказе,ЗапасыКоличество,ЗапасыКоличествоФакт");
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(УсловноеОформлениеКрасныеКолонки.Отбор,
		"Объект.ПроверятьРасхожденияСЗаказом", Истина, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(УсловноеОформлениеКрасныеКолонки.Отбор,
		"Объект.ПроверятьРасхожденияСВходящимДокументом", Истина, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(УсловноеОформлениеКрасныеКолонки.Отбор,
		"Объект.Запасы.Расхождение", 0, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(УсловноеОформлениеКрасныеКолонки.Отбор,
		"Объект.Запасы.РасхождениеСЗаказом", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	
	УсловноеОформлениеЗеленыеКолонки = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(УсловноеОформлениеЗеленыеКолонки, "ЦветТекста", WebЦвета.Зеленый);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(УсловноеОформлениеЗеленыеКолонки,
		"ЗапасыКоличествоСправочно,ЗапасыРасхождение");
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(УсловноеОформлениеЗеленыеКолонки.Отбор,
		"Объект.ПроверятьРасхожденияСЗаказом", Истина, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(УсловноеОформлениеЗеленыеКолонки.Отбор,
		"Объект.ПроверятьРасхожденияСВходящимДокументом", Истина, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(УсловноеОформлениеЗеленыеКолонки.Отбор,
		"Объект.Запасы.Расхождение", 0, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(УсловноеОформлениеЗеленыеКолонки.Отбор,
		"Объект.Запасы.РасхождениеСЗаказом", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	
КонецПроцедуры

&НаСервере
Процедура КогдаПроверятьВсеРасхожденияИЕстьРасхожденияСВходящимДокументомИНетРасхожденийСЗаказом()
	
	УсловноеОформлениеКрасныеКолонки = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(УсловноеОформлениеКрасныеКолонки, "ЦветТекста", WebЦвета.Красный);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(УсловноеОформлениеКрасныеКолонки,
		"ЗапасыКоличество,ЗапасыКоличествоФакт,ЗапасыКоличествоСправочно,ЗапасыРасхождение");
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(УсловноеОформлениеКрасныеКолонки.Отбор,
		"Объект.ПроверятьРасхожденияСЗаказом", Истина, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(УсловноеОформлениеКрасныеКолонки.Отбор,
		"Объект.ПроверятьРасхожденияСВходящимДокументом", Истина, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(УсловноеОформлениеКрасныеКолонки.Отбор,
		"Объект.Запасы.Расхождение", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(УсловноеОформлениеКрасныеКолонки.Отбор,
		"Объект.Запасы.РасхождениеСЗаказом", 0, ВидСравненияКомпоновкиДанных.Равно);
	
	УсловноеОформлениеЗеленыеКолонки = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(УсловноеОформлениеЗеленыеКолонки, "ЦветТекста", WebЦвета.Зеленый);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(УсловноеОформлениеЗеленыеКолонки,
		"ЗапасыРасхождениеСЗаказом,ЗапасыКоличествоВЗаказе");
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(УсловноеОформлениеЗеленыеКолонки.Отбор,
		"Объект.ПроверятьРасхожденияСЗаказом", Истина, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(УсловноеОформлениеЗеленыеКолонки.Отбор,
		"Объект.ПроверятьРасхожденияСВходящимДокументом", Истина, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(УсловноеОформлениеЗеленыеКолонки.Отбор,
		"Объект.Запасы.Расхождение", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(УсловноеОформлениеЗеленыеКолонки.Отбор,
		"Объект.Запасы.РасхождениеСЗаказом", 0, ВидСравненияКомпоновкиДанных.Равно);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеРасхожденийСЦенойВЗаказе()
	
	ЧернаяКолонкаЦена = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(ЧернаяКолонкаЦена, "ЦветТекста", WebЦвета.Черный);
	РаботаСФормой.ДобавитьОформляемыеПоля(ЧернаяКолонкаЦена, "ЗапасыЦенаВЗаказе");
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ЧернаяКолонкаЦена.Отбор,
		"Объект.ПроверятьРасхожденияСЗаказом", Истина, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ЧернаяКолонкаЦена.Отбор,
		Новый ПолеКомпоновкиДанных("Объект.Запасы.ЦенаВЗаказеПредставление"),
		ПредставлениеПоляНесколькоЦенВЗаказе(),
		ВидСравненияКомпоновкиДанных.Равно);
	
	ЗеленаяКолонкаЦена = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(ЗеленаяКолонкаЦена, "ЦветТекста", WebЦвета.Зеленый);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(ЗеленаяКолонкаЦена, "ЗапасыЦенаВЗаказе");
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ЗеленаяКолонкаЦена.Отбор,
		"Объект.ПроверятьРасхожденияСЗаказом", Истина, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ЗеленаяКолонкаЦена.Отбор,
		Новый ПолеКомпоновкиДанных("Объект.Запасы.Цена"),
		Новый ПолеКомпоновкиДанных("Объект.Запасы.ЦенаВЗаказе"),
		ВидСравненияКомпоновкиДанных.Равно);
		
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ЗеленаяКолонкаЦена.Отбор,
		Новый ПолеКомпоновкиДанных("Объект.Запасы.ЦенаВЗаказеПредставление"),
		ПредставлениеПоляНесколькоЦенВЗаказе(),
		ВидСравненияКомпоновкиДанных.НеРавно);
		
	КраснаяКолонкаЦена = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(КраснаяКолонкаЦена, "ЦветТекста", WebЦвета.Красный);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(КраснаяКолонкаЦена, "ЗапасыЦенаВЗаказе");
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(КраснаяКолонкаЦена.Отбор,
		"Объект.ПроверятьРасхожденияСЗаказом", Истина, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(КраснаяКолонкаЦена.Отбор,
		Новый ПолеКомпоновкиДанных("Объект.Запасы.Цена"),
		Новый ПолеКомпоновкиДанных("Объект.Запасы.ЦенаВЗаказе"),
		ВидСравненияКомпоновкиДанных.НеРавно);
		
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(КраснаяКолонкаЦена.Отбор,
		Новый ПолеКомпоновкиДанных("Объект.Запасы.ЦенаВЗаказеПредставление"),
		ПредставлениеПоляНесколькоЦенВЗаказе(),
		ВидСравненияКомпоновкиДанных.НеРавно);
	
КонецПроцедуры

&НаСервере
Функция ПолужирныйШрифт()
	Возврат Новый Шрифт(, , Истина);
КонецФункции

&НаКлиенте
Функция ЯчейкаДоступна(СтруктурнаяЕдиница)
	
	Если НЕ КэшЗначений.УчетПоЯчейкам Тогда
		Возврат Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) ИЛИ ТипЗнч(СтруктурнаяЕдиница)<>Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		Возврат Ложь;
	КонецЕсли; 
	Если НЕ КэшЗначений.Свойство("ДоступностьЯчеек") Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Результат = КэшЗначений.ДоступностьЯчеек.Получить(СтруктурнаяЕдиница);
	Если Результат = Неопределено Тогда
		МассивСтруктурныхЕдиниц = Новый Массив;
		МассивСтруктурныхЕдиниц.Добавить(СтруктурнаяЕдиница);
		ДополнитьДоступностьЯчеек(МассивСтруктурныхЕдиниц, КэшЗначений.ДоступностьЯчеек);
		Результат = КэшЗначений.ДоступностьЯчеек.Получить(СтруктурнаяЕдиница);
		Если Результат=Неопределено Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьДоступностьЯчеек()
	
	Если НЕ КэшЗначений.УчетПоЯчейкам Тогда
		Возврат;
	КонецЕсли; 	
	
	Если НЕ КэшЗначений.Свойство("ДоступностьЯчеек") Тогда
		КэшЗначений.Вставить("ДоступностьЯчеек", Новый ФиксированноеСоответствие(Новый Соответствие));
	КонецЕсли; 
	
	МассивСтруктурныхЕдиниц = Новый Массив;
	Если Объект.ПоложениеСклада=Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			МассивСтруктурныхЕдиниц.Добавить(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
		КонецЦикла; 
	Иначе
		МассивСтруктурныхЕдиниц.Добавить(Объект.СтруктурнаяЕдиница);
	КонецЕсли;
	МассивСтруктурныхЕдиниц = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСтруктурныхЕдиниц);
	ДополнитьДоступностьЯчеек(МассивСтруктурныхЕдиниц, КэшЗначений.ДоступностьЯчеек);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьДоступностьЯчеек(СтруктурныеЕдиницы, СоответствиеСтруктурныхЕдиниц)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтруктурныеЕдиницы", СтруктурныеЕдиницы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Ссылка,
	|	СтруктурныеЕдиницы.ОрдерныйСклад КАК ОрдерныйСклад,
	|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
	|	СтруктурныеЕдиницы.УчетОстатковПоЯчейкам КАК УчетОстатковПоЯчейкам
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.Ссылка В(&СтруктурныеЕдиницы)";
	Выборка = Запрос.Выполнить().Выбрать();
	Соответствие = Новый Соответствие(СоответствиеСтруктурныхЕдиниц);
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.Ссылка, Выборка.ТипСтруктурнойЕдиницы=Перечисления.ТипыСтруктурныхЕдиниц.Склад);
	КонецЦикла; 
	СоответствиеСтруктурныхЕдиниц = Новый ФиксированноеСоответствие(Соответствие);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПризнакиДоступностиЯчеек(Форма)

	Объект = Форма.Объект;
	КэшЗначений = Форма.КэшЗначений;
	Если НЕ КэшЗначений.УчетПоЯчейкам Тогда
		Возврат;
	КонецЕсли;
	Если Объект.ПоложениеСклада<>ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		Возврат;
	КонецЕсли; 
	 
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		Результат = КэшЗначений.ДоступностьЯчеек.Получить(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
		Если Результат=Неопределено Тогда
			Результат = Ложь;
		КонецЕсли; 
		СтрокаТабличнойЧасти.ЯчейкаДоступна = Результат И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
	КонецЦикла; 
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьВидимостьПредупрежденияПодчиненныеДокументы()
	
	Если Объект.Ссылка.Пустая() ИЛИ ТолькоПросмотр Тогда
		ВидимостьПредупреждения = Ложь;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДополнительныеРасходыЗапасы.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ДополнительныеРасходы.Запасы КАК ДополнительныеРасходыЗапасы
		|ГДЕ
		|	ДополнительныеРасходыЗапасы.ДокументПоступления = &Ссылка
		|	И ДополнительныеРасходыЗапасы.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	РасходыПриИмпорте.Ссылка
		|ИЗ
		|	Документ.РасходыПриИмпорте КАК РасходыПриИмпорте
		|ГДЕ
		|	РасходыПриИмпорте.Проведен
		|	И РасходыПриИмпорте.ДокументПоступления = &Ссылка";
		ВидимостьПредупреждения = НЕ Запрос.Выполнить().Пустой();
	КонецЕсли; 
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПредупреждениеПодчиненныеДокументы", "Видимость", ВидимостьПредупреждения);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

&НаКлиенте
Процедура ЗапасыКопироватьСтроки(Команда)
	
	КопироватьСтроки(ИмяТЧЗапасы());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВставитьСтроки(Команда)
	
	ВставитьСтроки(ИмяТЧЗапасы());
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыКопироватьСтроки(Команда)
	
	КопироватьСтроки(ИмяТЧРасходы());
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыВставитьСтроки(Команда)
	
	ВставитьСтроки(ИмяТЧРасходы());
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтроки(ИмяТЧ, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВставленныеСтроки(ИмяТЧ, КоличествоВставленных)
	
	Если ИмяТЧ = ИмяТЧЗапасы() Тогда
		Количество = Объект[ИмяТЧ].Количество();
		
		Для Итератор = 1 По КоличествоВставленных Цикл
			
			Строка = Объект[ИмяТЧ][Количество - Итератор];
			РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧЗапасы(), Строка);
			
			// Наборы
			Строка.НоменклатураНабора = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
			Строка.ХарактеристикаНабора = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
			Строка.ДоляСтоимости = 0;
			// Конец Наборы
			
			Строка.ЯчейкаДоступна = ЯчейкаДоступна(Строка.СтруктурнаяЕдиница);
			
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("ВидОперации",        Объект.ВидОперации);
		СтруктураДанные.Вставить("Организация",        Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура",       Строка.Номенклатура);
		СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		СтруктураДанные.Вставить("Контрагент", Объект.Контрагент);
		СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		Если ИмяТЧ = ИмяТЧЗапасы() Тогда
			
			Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
			
		ИначеЕсли ИмяТЧ = ИмяТЧРасходы() Тогда
			
			Строка.СтруктурнаяЕдиница = ОсновноеПодразделение;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ГрупповоеИзменениеСтрок

&НаКлиенте
Процедура ЗапасыСнятьФлажки(Команда)
	УстановитьПометку(ИмяТЧЗапасы(), Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыУстановитьФлажки(Команда)
	УстановитьПометку(ИмяТЧЗапасы(), Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменитьСтроки(Команда)
	
	ПоказатьСкрытьПанельРедактирования(ИмяТЧЗапасы(), Истина);
	
	//Партии
	Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.СоздатьПартииНоменклатуры")
		Тогда
		ЗапасыИзменениеСтрокЗначение = "Партия создана автоматически";
		УстановитьПометкиСтрокДляСозданияПартий();
	КонецЕсли;
	//Конец Партии

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВыполнитьДействие(Команда)
	
	ОбработатьТаблицу(ИмяТЧЗапасы());
	НастроитьОформлениеПанелиРедактирования(ИмяТЧЗапасы(), 4);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыОтменитьИзменения(Команда)
	
	// В версии платформы 8.3.16.1224, при переходе на сервер
	// обнуляется массив КэшЗначений.ОбрабатываемыеРеквизиты,
	// т.е. происходит удаление всех реквизитов.
	// По этой причине нет возможности включить видимость элементов,
	// когда отменяем режим ГТД.
	ОбрабатываемыеРеквизиты = КэшЗначений.ОбрабатываемыеРеквизиты;
	
	ПоказатьСкрытьПанельРедактирования(ИмяТЧЗапасы());
	
	КэшЗначений.ОбрабатываемыеРеквизиты = ОбрабатываемыеРеквизиты;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыСнятьФлажки(Команда)
	УстановитьПометку(ИмяТЧРасходы(), Ложь);
КонецПроцедуры

&НаКлиенте
Процедура РасходыУстановитьФлажки(Команда)
	УстановитьПометку(ИмяТЧРасходы(), Истина);
КонецПроцедуры

&НаКлиенте
Процедура РасходыИзменитьСтроки(Команда)
	
	ПоказатьСкрытьПанельРедактирования(ИмяТЧРасходы(), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыВыполнитьДействие(Команда)
	
	ОбработатьТаблицу(ИмяТЧРасходы());
	НастроитьОформлениеПанелиРедактирования(ИмяТЧРасходы(), 4);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыОтменитьИзменения(Команда)
	
	ПоказатьСкрытьПанельРедактирования(ИмяТЧРасходы());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменениеСтрокДействиеПриИзменении(Элемент)
	
	ОпределитьОбъектИзменений(ИмяТЧЗапасы());
	НастроитьОформлениеПанелиРедактирования(ИмяТЧЗапасы(), 2);
	
	//Партии
	Если ЗапасыИзменениеСтрокДействиеПриОткрытии = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.СоздатьПартииНоменклатуры")
		Тогда
		ЗапасыИзменениеСтрокЗначение = "Партия создана автоматически";
		УстановитьПометкиСтрокДляСозданияПартий();
	КонецЕсли;
	//Конец Партии
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменениеСтрокЗначениеПриИзменении(Элемент)
	
	НастроитьОформлениеПанелиРедактирования(ИмяТЧЗапасы(), 3);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыИзменениеСтрокДействиеПриИзменении(Элемент)
	
	ОпределитьОбъектИзменений(ИмяТЧРасходы());
	НастроитьОформлениеПанелиРедактирования(ИмяТЧРасходы(), 2);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыИзменениеСтрокЗначениеПриИзменении(Элемент)
	
	НастроитьОформлениеПанелиРедактирования(ИмяТЧРасходы(), 3);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометку(ИмяТЧ, Пометка)
	
	НаборЭлементов = НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ);
	НаборЭлементов.КнопкаСнятьФлажки.Видимость = НЕ НаборЭлементов.КнопкаСнятьФлажки.Видимость;
	НаборЭлементов.КнопкаУстановитьФлажки.Видимость = НЕ НаборЭлементов.КнопкаУстановитьФлажки.Видимость;
	
	Для каждого Строка Из Объект[НаборЭлементов.ИмяТЧ] Цикл
		Строка.Пометка = Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСкрытьПанельРедактирования(ИмяТЧ, ИзменяетДанные = Неопределено)
	
	Перем СостояниеПерехода;
	ГрупповоеИзменениеСтрокСервер.ПоказатьСкрытьПанельРедактирования(ЭтотОбъект, НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ),
		СостояниеПерехода,
		ИзменяетДанные);
	
	УправлениеРезервнымиКопиямиТаблицы(ИмяТЧ, СостояниеПерехода, ИзменяетДанные);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеРезервнымиКопиямиТаблицы(ИмяТЧ, СостояниеПерехода, ИзменяетДанные)
	
	Если ИмяТЧ = ИмяТЧЗапасы() Тогда
		РеквизитРезервнаяКопияТаблицыАдрес = "ЗапасыРезервнаяКопияТаблицыАдрес";
	ИначеЕсли ИмяТЧ = ИмяТЧРасходы() Тогда
		РеквизитРезервнаяКопияТаблицыАдрес = "РасходыРезервнаяКопияТаблицыАдрес";
	КонецЕсли;
	
	ГрупповоеИзменениеСтрокСервер.УправлениеРезервнымиКопиями(ЭтотОбъект, Объект[ИмяТЧ],
		ЭтотОбъект[РеквизитРезервнаяКопияТаблицыАдрес], СостояниеПерехода, ИзменяетДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОформлениеПанелиРедактирования(ИмяТЧ, Состояние, СохранитьИзменения = Неопределено)
	
	Если ИмяТЧ = ИмяТЧЗапасы() Тогда
		РеквизитЗначение = "ЗапасыИзменениеСтрокЗначение";
	ИначеЕсли ИмяТЧ = ИмяТЧРасходы() Тогда
		РеквизитЗначение = "РасходыИзменениеСтрокЗначение";
	КонецЕсли;
	
	Результат = ГрупповоеИзменениеСтрокКлиент.НастроитьОформлениеПанелиРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокКлиент(ИмяТЧ),
		Состояние,
		ЭтотОбъект[РеквизитЗначение]);
	
	Если Результат.Свойство("УстановитьСвязиПараметровВыбора") И Результат.УстановитьСвязиПараметровВыбора Тогда
		УстановитьСвязиПараметровВыбораДляЗначения(ИмяТЧ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиПараметровВыбораДляЗначения(ИмяТЧ)
	
	ГрупповоеИзменениеСтрокСервер.УстановитьСвязиПараметровВыбора(
		НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ));
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекущееДействиеИзмененияСтрок()
	
	СохраняемыеНастройки = "";
	
	Если ЗапасыИзменениеСтрокДействие <> ЗапасыИзменениеСтрокДействиеПриОткрытии Тогда
		СохраняемыеНастройки = ИмяТЧЗапасы();
	КонецЕсли;
	
	Если РасходыИзменениеСтрокДействие <> РасходыИзменениеСтрокДействиеПриОткрытии Тогда
		Если ЗначениеЗаполнено(СохраняемыеНастройки) Тогда
			СохраняемыеНастройки = СохраняемыеНастройки + ",";
		КонецЕсли;
		СохраняемыеНастройки = СохраняемыеНастройки + ИмяТЧРасходы();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СохраняемыеНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьТекущееДействиеИзмененияСтрокСервер(СохраняемыеНастройки);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьТекущееДействиеИзмененияСтрокСервер(СохраняемыеНастройки)
	
	ИменаТЧ = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СохраняемыеНастройки);
	Для каждого ИмяТЧ Из ИменаТЧ Цикл
		ГрупповоеИзменениеСтрокСервер.СохранитьНастройки(НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТаблицу(ИмяТЧ)
	
	Если ИмяТЧ = ИмяТЧЗапасы() Тогда
		ВыполненноеДействие = ЗапасыИзменениеСтрокДействие;
	ИначеЕсли ИмяТЧ = ИмяТЧРасходы() Тогда
		ВыполненноеДействие = РасходыИзменениеСтрокДействие;
	КонецЕсли;
	
	// Наборы
	Если ЭтоВозвратОтПокупателя(Объект.ВидОперации) И ИмяТЧ = ИмяТЧЗапасы()
			И ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки") Тогда
		
		ИзменяемыеСтроки = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("Пометка", Истина));
		Если ИзменяемыеСтроки.Количество() = Объект[ИмяТЧ].Количество() Тогда
		// Если выделены все строки - проверки удаления наборов не выполняются
			Объект.ДобавленныеНаборы.Очистить();
		Иначе
			Для каждого Строка Из ИзменяемыеСтроки Цикл
				Если ЗначениеЗаполнено(Строка.НоменклатураНабора) Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Действие недоступно для наборов.'");
					Сообщение.Поле = "Объект." + ИмяТЧ;
					Сообщение.Сообщить();
					Возврат;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	// Конец Наборы
	
	//Партии
	Если ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.СоздатьПартииНоменклатуры")
		Тогда
		
		ИзменяемыеСтроки = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("Пометка", Истина));
		
		Если Не ИзменяемыеСтроки.Количество()
			Тогда
			Возврат
		КонецЕсли;
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СоздатьПартииНоменклатурыНаКлиенте", ЭтотОбъект,
			Неопределено);
		ТекстВопроса = НСтр("ru = 'Установить владельцем партии: %Поставщик%?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Поставщик%", Строка(Объект.Контрагент));
		
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		Возврат;
		
	КонецЕсли;
	//Конец Партии
	
	Если ВыполненноеДействие = ПредопределенноеЗначение(
		"Перечисление.ДействияГрупповогоИзмененияСтрок.ВыбратьНомерГТД") Тогда
			
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыборНомераГТДДляУказанныхСтрок", ЭтотОбъект);
		
		ОткрытьФорму("Документ.ПриходнаяНакладная.Форма.ФормаВыбораНомераГТД", , ЭтотОбъект, , , , ОписаниеОповещения);
		Возврат;
		
	КонецЕсли;
	
	Если ВыполненноеДействие = ПредопределенноеЗначение(
		"Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьПоКоличествуВЗаказе") Тогда
			
		КоличествоСтрокДоРаспределения = Объект.Запасы.Количество();
		ПередРаспределениемПоКоличествуВЗаказе();
		
	КонецЕсли;
	
	ОбработатьТаблицуНаСервере(ИмяТЧ);
	
	ИзменяемыеСтроки = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("Пометка", Истина));
	Для каждого Строка Из ИзменяемыеСтроки Цикл
		
		Если ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент")
			ИЛИ ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки")
			ИЛИ ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду")
			ИЛИ ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦены")
			ИЛИ ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныИзПоследнихПриходныхНакладных")
			ИЛИ ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьПоКоличествуВЗаказе") Тогда
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧ, Строка);
			
		ИначеЕсли ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента")
			И ИмяТЧ = ИмяТЧЗапасы() Тогда
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧ, Строка);
			
		ИначеЕсли ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСкидкуСуммой") Тогда
			
			ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(Строка, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));	
			
			// Ручные скидки
			РассчитатьСуммуИПроцентСкидкиРасходыЗапасы(Объект, СкидкаСумма, СкидкаПроцент);
			// Конец Ручные скидки
			
		ИначеЕсли ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьСуммы") Тогда
			
			Если Строка.Количество <> 0 Тогда
				Строка.Цена = Строка.Сумма / Строка.Количество;
			КонецЕсли;
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧ, Строка);
			
			// Ручная скидка - заполнение полей ввода на форме
			РассчитатьСуммуИПроцентСкидкиРасходыЗапасы(Объект, СкидкаСумма, СкидкаПроцент);
			// Конец Ручная скидка
			
		ИначеЕсли ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
			
			ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(Строка, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));	
			ОбновитьПодвалФормы();
			
		ИначеЕсли ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству")
			ИЛИ ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			
			Если Строка.Количество <> 0 Тогда
				Строка.Цена = Строка.Сумма / Строка.Количество;
			КонецЕсли;
			
			ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(Строка, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));	
			ОбновитьПодвалФормы();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВыполненноеДействие = ПредопределенноеЗначение(
			"Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьПоКоличествуВЗаказе") Тогда
		ПослеРаспределенияПоКоличествуВЗаказе(КоличествоСтрокДоРаспределения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьТаблицуНаСервере(ИмяТЧ)
	
	Если ИмяТЧ = ИмяТЧЗапасы() Тогда
		
		ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
			ЭтотОбъект,
			Объект.Запасы,
			ЗапасыИзменениеСтрокДействие,
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит,
			ЗапасыИзменениеСтрокЗначение,
			"ЗапасыНоменклатура");
		
		Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
			
			ИзменяемыеСтроки = Объект.Запасы.НайтиСтроки(Новый Структура("Пометка", Истина));
			Для каждого Строка Из ИзменяемыеСтроки Цикл
				
				СтруктураДанные = Новый Структура;
				СтруктураДанные.Вставить("ВидОперации", Объект.ВидОперации);
				СтруктураДанные.Вставить("Организация", Объект.Организация);
				СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
				СтруктураДанные.Вставить("Характеристика", Строка.Характеристика);
				СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
				СтруктураДанные.Вставить("Контрагент", Объект.Контрагент);
				СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
				
				Если ЗначениеЗаполнено(Объект.ВидЦенКонтрагента) Тогда
					
					СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
					СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
					СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
					СтруктураДанные.Вставить("Характеристика", Строка.Характеристика);
					СтруктураДанные.Вставить("ВидЦенКонтрагента", Объект.ВидЦенКонтрагента);
					СтруктураДанные.Вставить("Коэффициент", 1);
					
				КонецЕсли;
				
				СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
				
				Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
				Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
					Строка.Количество = 1;
				КонецЕсли;
				Строка.Цена = СтруктураДанные.Цена;
				Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
				Строка.Содержание = "";
				
				// Прослеживаемость
				Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров
					И ПрослеживаемаяОперация(Объект.ВидОперации) Тогда
					Строка.ПрослеживаемыйТовар = СтруктураДанные.ПрослеживаемыйТовар;
					Строка.ПрослеживаемыйКомплект = СтруктураДанные.ПрослеживаемыйКомплект;
				Иначе
					Строка.ПрослеживаемыйТовар = Ложь;
					Строка.ПрослеживаемыйКомплект = Ложь;
				КонецЕсли; 
				// Конец Прослеживаемость
				
			КонецЦикла;
			
			// Прослеживаемость
			ОбновитьОтображениеПрослеживаемости();
			// Конец Прослеживаемость
			
		КонецЕсли;
		
		Если ЗапасыИзменениеСтрокДействие =Перечисления.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента
			ИЛИ ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСклад Тогда
			
			ОбновитьДоступностьЯчеек();
			ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
			
		КонецЕсли; 
		
		Если ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.ПодобратьНомераГТД Тогда
			
			НомераГТДПодобратьНаСервере(Ложь);
			
		КонецЕсли;
		
		Если ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.ОчиститьНомераГТДИСтраныПроисхождения Тогда
			
			ГрузовыеТаможенныеДекларацииСервер.ОчиститьНомераГТДИСтраныПроисхождения(Объект.Запасы);
			ОбновитьОтображениеПрослеживаемости();
			
		КонецЕсли;
		
		Если ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьПоКоличествуВЗаказе Тогда
			ОбновитьРасхождения();
		КонецЕсли;
		
	ИначеЕсли ИмяТЧ = ИмяТЧРасходы() Тогда
		
		ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
			ЭтотОбъект,
			Объект.Расходы,
			РасходыИзменениеСтрокДействие,
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит,
			РасходыИзменениеСтрокЗначение,
			"РасходыНоменклатура");
		
		Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
		
			ИзменяемыеСтроки = Объект.Расходы.НайтиСтроки(Новый Структура("Пометка", Истина));
			Для каждого Строка Из ИзменяемыеСтроки Цикл
				
				СтруктураДанные = Новый Структура();
				СтруктураДанные.Вставить("Организация", Объект.Организация);
				СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
				СтруктураДанные.Вставить("Характеристика", "");
				СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
				СтруктураДанные.Вставить("Контрагент", Объект.Контрагент);
				СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
				
				СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
				
				Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
				Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
					Строка.Количество = 1;
				КонецЕсли;
				Строка.Цена = 0;
				Строка.Сумма = 0;
				Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
				Строка.СуммаНДС = 0;
				Строка.Всего = 0;
				Строка.Содержание = "";
				
				Если СтруктураДанные.ОчиститьЗаказИПодразделение Тогда
					Строка.СтруктурнаяЕдиница = Неопределено;
					Строка.Заказ = Неопределено;
				ИначеЕсли НЕ ЗначениеЗаполнено(Строка.СтруктурнаяЕдиница) Тогда
					Строка.СтруктурнаяЕдиница = ОсновноеПодразделение;
				КонецЕсли;
				
				Если СтруктураДанные.ОчиститьНаправлениеДеятельности Тогда
					Строка.НаправлениеДеятельности = Неопределено;
				Иначе
					Строка.НаправлениеДеятельности = СтруктураДанные.НаправлениеДеятельности;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьОбъектИзменений(ИмяТЧ)
	
	Если ИмяТЧ = ИмяТЧЗапасы() Тогда
		
		Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьСуммы") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦены") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "СтавкаНДС";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСтавкаНДС";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЗаказПоставщикуЗаказПокупателя") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Заказ";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЗаказ";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьПоКоличествуВЗаказе") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "";

		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСклад") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "СтруктурнаяЕдиница";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСтруктурнаяЕдиница";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЯчейку") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Ячейка";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЯчейка";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "";
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.СоздатьПартииНоменклатуры") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Партия";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыПартия";
			
		КонецЕсли;
	
	ИначеЕсли ИмяТЧ = ИмяТЧРасходы() Тогда
		
		Если РасходыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент") Тогда
			
			РасходыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
			РасходыИзменениеСтрокОбъектИзмененийЭлемент = "РасходыЦена";
			
		ИначеЕсли РасходыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены") Тогда
			
			РасходыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
			РасходыИзменениеСтрокОбъектИзмененийЭлемент = "РасходыЦена";
			
		ИначеЕсли РасходыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству") Тогда
			
			РасходыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
			РасходыИзменениеСтрокОбъектИзмененийЭлемент = "РасходыСумма";
			
		ИначеЕсли РасходыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			
			РасходыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
			РасходыИзменениеСтрокОбъектИзмененийЭлемент = "РасходыСумма";
			
		ИначеЕсли РасходыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
			
			РасходыИзменениеСтрокОбъектИзмененийРеквизит = "СтавкаНДС";
			РасходыИзменениеСтрокОбъектИзмененийЭлемент = "РасходыСтавкаНДС";
			
		ИначеЕсли РасходыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки")
			ИЛИ РасходыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
			
			РасходыИзменениеСтрокОбъектИзмененийРеквизит = "";
			РасходыИзменениеСтрокОбъектИзмененийЭлемент = "";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НаборЭлементовГрупповогоИзмененияСтрокКлиент(ИмяТЧ)
	
	Если ИмяТЧ = ИмяТЧЗапасы() Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", ИмяТЧЗапасы());
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаЗапасыИзменениеСтрок);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.ЗапасыУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.ЗапасыСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ЗапасыВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.ЗапасыПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.ЗапасыНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.ЗапасыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.ЗапасыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.ЗапасыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         ЗапасыИзменениеСтрокОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(ЗапасыИзменениеСтрокОбъектИзмененийЭлемент), 
		                                                     Элементы[ЗапасыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	ИначеЕсли ИмяТЧ = ИмяТЧРасходы() Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", ИмяТЧРасходы());
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаРасходыИзменениеСтрок);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.РасходыУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.РасходыСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.РасходыВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.РасходыПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.РасходыНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.РасходыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.РасходыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.РасходыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.РасходыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         РасходыИзменениеСтрокОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(РасходыИзменениеСтрокОбъектИзмененийЭлемент), 
		                                                     Элементы[РасходыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	КонецЕсли;
	
	Возврат НаборЭлементов;
	
КонецФункции

&НаСервере
Функция НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ)
	
	Если ИмяТЧ = ИмяТЧЗапасы() Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", ИмяТЧЗапасы());
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаЗапасыИзменениеСтрок);
		НаборЭлементов.Вставить("КнопкаИзменитьСтроки",    Элементы.ЗапасыИзменитьСтроки);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.ЗапасыУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.ЗапасыСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ЗапасыВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.ЗапасыПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.ЗапасыНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.ЗапасыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.ЗапасыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.ЗапасыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         ЗапасыИзменениеСтрокОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(ЗапасыИзменениеСтрокОбъектИзмененийЭлемент), 
		                                                     Элементы[ЗапасыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	ИначеЕсли ИмяТЧ = ИмяТЧРасходы() Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", ИмяТЧРасходы());
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаРасходыИзменениеСтрок);
		НаборЭлементов.Вставить("КнопкаИзменитьСтроки",    Элементы.РасходыИзменитьСтроки);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.РасходыУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.РасходыСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.РасходыВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.РасходыПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.РасходыНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.РасходыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.РасходыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.РасходыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.РасходыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         РасходыИзменениеСтрокОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(РасходыИзменениеСтрокОбъектИзмененийЭлемент), 
		                                                     Элементы[РасходыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	КонецЕсли;
	
	Возврат НаборЭлементов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокДействий(ИмяТЧ)
	
	РазрешеноРедактированиеЦенДокументов = УправлениеДоступомУНФ.РазрешеноРедактированиеЦенДокументов();
	
	Если ИмяТЧ = ИмяТЧЗапасы() Тогда
		
		Действия = Новый Массив;
		Если РазрешеноРедактированиеЦенДокументов Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент);
		КонецЕсли;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОкруглитьСуммы);
		
		Если РазрешеноРедактированиеЦенДокументов Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЦены);
		КонецЕсли;
		
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду);
		
		Если ЭтоВозвратОтПокупателя(Объект.ВидОперации) Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныИзПоследнихРасходныхНакладных);
		КонецЕсли;
		
		Если РазрешеноРедактированиеЦенДокументов Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству);
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам);
		КонецЕсли;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС);
		Если Не ЗаказВШапке Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЗаказПоставщикуЗаказПокупателя);
		КонецЕсли;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьПоКоличествуВЗаказе);
		Если Не СкладВШапке Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСклад);
			Если ПолучитьФункциональнуюОпцию("УчетПоЯчейкам") Тогда
				Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЯчейку);
			КонецЕсли;
		КонецЕсли;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки);
		
		Если ЭтоПоступлениеОтПоставщика(Объект.ВидОперации) Тогда
			
			ГрузовыеТаможенныеДекларацииСервер.ЗаполнитьСписокДействий(Действия, Ложь, ИмяТЧ);
			
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.СоздатьПартииНоменклатуры);
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию Тогда
			
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ВыбратьНомерГТД);
			
		КонецЕсли;
		
		Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Очистить();
		Для каждого Действие Из Действия Цикл
			ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
			Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
		КонецЦикла;
		
		Если ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЗаказПоставщикуЗаказПокупателя
			И Действия.Найти(ЗапасыИзменениеСтрокДействие) = Неопределено Тогда
			
			ЗапасыИзменениеСтрокДействие = Неопределено;
			ГрупповоеИзменениеСтрокСервер.НастроитьИсходнуюПанельРедактирования(ЗапасыИзменениеСтрокЗначение, НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ));
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ЗаполнитьСерииНоменклатуры);
		КонецЕсли;
		
	ИначеЕсли ИмяТЧ = ИмяТЧРасходы() Тогда
		
		Действия = Новый Массив;
		Если РазрешеноРедактированиеЦенДокументов Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент);
		КонецЕсли;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены);
		Если РазрешеноРедактированиеЦенДокументов Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству);
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам);
		КонецЕсли;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки);
		
		Элементы.РасходыИзменениеСтрокДействие.СписокВыбора.Очистить();
		Для каждого Действие Из Действия Цикл
			ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
			Элементы.РасходыИзменениеСтрокДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПометкаПриИзменении(Элемент)
	ГрупповоеИзменениеСтрокКлиент.СтрокаПометкаПриИзменении(Объект.Запасы, Элементы.ЗапасыУстановитьФлажки, Элементы.ЗапасыСнятьФлажки);
КонецПроцедуры

// Создание Партий Номенклатуры
&НаКлиенте
Процедура СоздатьПартииНоменклатурыНаКлиенте(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВладелецПартии = Неопределено;
	
	НаименованиеПартий = ЗапасыИзменениеСтрокЗначение;
	
	Если Не ЗначениеЗаполнено(СокрЛП(НаименованиеПартий))
		Тогда
		НаименованиеПартий = "Партия создана автоматически";
	КонецЕсли;
		
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВладелецПартии = Объект.Контрагент;
	КонецЕсли;
	
	СоздатьПартииНоменклатурыНаСервере(ВладелецПартии, НаименованиеПартий)
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПартииНоменклатурыНаСервере(ВладелецПартии, НаименованиеПартий)
	
	СтатусПартии = НоменклатураВДокументахСервер.СоответствиеВидаОперацииИлиХозОперацииСтатусуПартии(ЭтотОбъект,
		Объект.ВидОперации);
	
	Если Не ЗначениеЗаполнено(СтатусПартии) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	ИзменяемыеСтроки = Объект.Запасы.НайтиСтроки(Новый Структура("Пометка", Истина));
	
	Для каждого Строка Из ИзменяемыеСтроки Цикл
		
		Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			
			НоваяПартия = СоздатьПартиюНоменклатуры(Строка.Номенклатура, ВладелецПартии, СтатусПартии, НаименованиеПартий);
			
			Если ЗначениеЗаполнено(НоваяПартия) Тогда
				Строка.Партия = НоваяПартия;
				Строка.ИспользоватьПартии = Истина;
			Иначе
				ОтменитьТранзакцию();
				Возврат
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаСервере
Функция СоздатьПартиюНоменклатуры(Номенклатура, ВладелецПартии, СтатусПартии, НаименованиеПартий)
	
	НоваяПартия = Справочники.ПартииНоменклатуры.СоздатьЭлемент();
	НоваяПартия.Владелец = Номенклатура;
	НоваяПартия.ВладелецПартии = ВладелецПартии;
	НоваяПартия.Статус = СтатусПартии[0].Значение;
	НоваяПартия.Наименование = НаименованиеПартий;
	
	Если НоваяПартия.Статус = Перечисления.СтатусыПартий.ТоварыНаКомиссии Тогда
		НоваяПартия.НалогообложениеНДС = Объект.НалогообложениеНДС;
	КонецЕсли;
	
	Если Не Номенклатура.ИспользоватьПартии
		Тогда
		ОбъектНоменклатура = Номенклатура.ПолучитьОбъект();
		ОбъектНоменклатура.ИспользоватьПартии = Истина;
		Попытка
			ОбъектНоменклатура.Записать();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			КраткоеПредставлениеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			ШаблонСообщения = НСтр(
				"ru = 'При установке признака ""Использовать партии"", для номенклатуры ""%1"" произошла ошибка:
				|%2'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Номенклатура.Наименование, КраткоеПредставлениеОшибки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	
	Попытка
		НоваяПартия.Записать();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		КраткоеПредставлениеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ШаблонСообщения = НСтр(
			"ru = 'При создании партии для номенклатуры ""%1"" произошла ошибка:
			|%2'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Номенклатура.Наименование, КраткоеПредставлениеОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат НоваяПартия.Ссылка;
	
КонецФункции

&НаСервере
Процедура УстановитьПометкиСтрокДляСозданияПартий()
	
	Если ЭтоПоступлениеОтПоставщика(Объект.ВидОперации) Тогда
		Для Каждого Строка Из Объект.Запасы Цикл
			Строка.Пометка = ЗначениеЗаполнено(Строка.Номенклатура)
				И Строка.Номенклатура.ПроверятьЗаполнениеПартий
				И Не ЗначениеЗаполнено(Строка.Партия);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
// Конец Создание Партий Номенклатуры

&НаКлиенте
Процедура ПослеВыборНомераГТДДляУказанныхСтрок(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для каждого СтрокаТаблицыЗапасы Из Объект.Запасы Цикл
		
		Если НЕ СтрокаТаблицыЗапасы.Пометка Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если Результат.ЭтоПоступлениеИзОднойСтраны Тогда
			
			СтрокаТаблицыЗапасы.СтранаПроисхождения = Результат.СтранаПроисхождения;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапасы.СтранаПроисхождения) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаТаблицыЗапасы.НомерГТД = Результат.НомерГТД;
		
	КонецЦикла;
	
	ОбновитьОтображениеПрослеживаемости();
	
КонецПроцедуры

#КонецОбласти

#Область АвтоподборКонтактов

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	АвтоподборКонтактовКлиент.Подключаемый_ОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);

КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_АвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, Параметры, Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССериямиНоменклатуры

&НаКлиенте
Процедура ЗапасыСерииНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерииНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерииНоменклатуры()
		
	ТекущиеДанныеИдентификатор = Элементы.Запасы.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыСерийНоменклатуры = ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор);
	ОткрытьФорму("Обработка.ПодборСерийНоменклатуры.Форма", ПараметрыСерийНоменклатуры, ЭтотОбъект);

КонецПроцедуры

&НаСервере
Функция ПолучитьСерииНоменклатурыИзХранилища(АдресВоВременномХранилище, КлючСтроки)
	
	Модифицированность = Истина;
	Возврат СерииНоменклатурыУНФ.ПолучитьСерииНоменклатурыИзХранилища(Объект, АдресВоВременномХранилище, КлючСтроки);
	
КонецФункции

&НаСервере
Функция ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор)
	
	Возврат СерииНоменклатурыУНФ.ПараметрыПодбораСерийНоменклатуры(Объект, ЭтотОбъект.УникальныйИдентификатор, ТекущиеДанныеИдентификатор, Ложь);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиБиблиотек

// ЭДО
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДОНажатие(Элемент, СтандартнаяОбработка)
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект, СтандартнаяОбработка);
КонецПроцедуры
// Конец ЭДО

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныйПараметр) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных, ДополнительныйПараметр);
	Если ДополнительныйПараметр = "Услуги" Тогда 
		Для каждого СтрокаТаблицы Из Объект.Расходы Цикл 
			РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧРасходы(), СтрокаТаблицы);
		КонецЦикла;
	Иначе
		Для каждого СтрокаТаблицы Из Объект.Запасы Цикл 
			РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧЗапасы(), СтрокаТаблицы);
			СтрокаТаблицы.ЯчейкаДоступна = ЯчейкаДоступна(СтрокаТаблицы.СтруктурнаяЕдиница);
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных, ТипЗагрузки)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	ТоварыДобавлены = Ложь;
	Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗагрузки = "Услуги" Тогда
			Если СтрокаТаблицы.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрокаТовары = Объект.Расходы.Добавить();
			НоваяСтрокаТовары.НаправлениеДеятельности = СтрокаТаблицы.НаправлениеДеятельности;
			Если Объект.ПоложениеЗаказаПоставщику<>ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
				НоваяСтрокаТовары.ЗаказПоставщику = Объект.Заказ;
			КонецЕсли; 
		Иначе
			Если СтрокаТаблицы.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрокаТовары = Объект.Запасы.Добавить();
			НоваяСтрокаТовары.Характеристика = СтрокаТаблицы.Характеристика;
			НоваяСтрокаТовары.Партия = СтрокаТаблицы.Партия;
			ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрокаТовары, Объект, "СтруктурнаяЕдиница", "ПоложениеСклада");
			ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрокаТовары, Объект, "Ячейка", "ПоложениеСклада");
			ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрокаТовары, Объект, "Заказ", "ПоложениеЗаказаПоставщику");
		КонецЕсли;
		
		НоваяСтрокаТовары.Номенклатура = СтрокаТаблицы.Номенклатура;
		НоваяСтрокаТовары.Цена = СтрокаТаблицы.Цена;
		НоваяСтрокаТовары.Количество = СтрокаТаблицы.Количество;
		НоваяСтрокаТовары.ЕдиницаИзмерения = СтрокаТаблицы.ЕдиницаИзмерения;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
			НоваяСтрокаТовары.СтавкаНДС = СтрокаТаблицы.СтавкаНДС;
		Иначе
			НоваяСтрокаТовары.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТаблицы.Номенклатура.ВидСтавкиНДС);
		КонецЕсли;
		
		ТоварыДобавлены = Истина;
		
	КонецЦикла;
	
	Если ТоварыДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзФайлаУслуги(Команда)
	
	НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ПриходнаяНакладная.ТабличнаяЧасть.Расходы";
	
	НастройкиЗагрузкиДанных.Вставить("ПолноеИмяТабличнойЧасти", "ПриходнаяНакладная.Расходы");
	НастройкиЗагрузкиДанных.Вставить("ИмяМакетаСШаблоном","ЗагрузкаИзФайлаЗапасы");
	НастройкиЗагрузкиДанных.Вставить("Заголовок", НСтр("ru = 'Загрузка услуг из файла'"));
	НастройкиЗагрузкиДанных.Вставить("СодержаниеВидимо", Истина);
	НастройкиЗагрузкиДанных.Вставить("ВидОперации", Объект.ВидОперации);
	НастройкиЗагрузкиДанных.Вставить("ЗагрузкаТабличнойЧастиУслуги", Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзФайлаЗапасы(Команда)
	
	НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ПриходнаяНакладная.ТабличнаяЧасть.Запасы";
	
	НастройкиЗагрузкиДанных.Вставить("ПолноеИмяТабличнойЧасти", "ПриходнаяНакладная.Запасы");
	НастройкиЗагрузкиДанных.Вставить("ИмяМакетаСШаблоном","ЗагрузкаИзФайлаЗапасы");
	НастройкиЗагрузкиДанных.Вставить("Заголовок", НСтр("ru = 'Загрузка запасов из файла'"));
	НастройкиЗагрузкиДанных.Вставить("СодержаниеВидимо", Истина);
	НастройкиЗагрузкиДанных.Вставить("ПоложениеСклада", Объект.ПоложениеСклада);
	НастройкиЗагрузкиДанных.Вставить("КонтрагентПоставщик", Объект.Контрагент);
	НастройкиЗагрузкиДанных.Вставить("ВидОперации", Объект.ВидОперации);
	НастройкиЗагрузкиДанных.Вставить("ЗагрузкаТабличнойЧастиУслуги", Ложь);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда
		
		Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда
		
			ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
			ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
			
		ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда
			
			Если РезультатЗагрузки.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ПриходнаяНакладная.ТабличнаяЧасть.Запасы" Тогда
				Для каждого СтрокаТаблицы Из Объект.Запасы Цикл
					СтрокаТаблицы.ЯчейкаДоступна = ЯчейкаДоступна(СтрокаТаблицы.СтруктурнаяЕдиница);
				КонецЦикла; 
			КонецЕсли;
			
			ДлительнаяОперация = ОбработатьПодготовленныеДанныеНоменклатуры(РезультатЗагрузки);
			
			СтруктураПараметров = Новый Структура;
			ПроверитьНеобходимостьПодключенияОбработчикаОжидания(ДлительнаяОперация, СтруктураПараметров);
			
			ОбновитьПодвалФормы();
			
		КонецЕсли;
		
	Иначе
		
		ТипЗагрузки = ?(ДополнительныеПараметры.ПолноеИмяОбъектаЗаполнения = "Документ.ПриходнаяНакладная.ТабличнаяЧасть.Расходы", "Услуги", "Запасы");
		ЗагрузитьИзФайлаЗавершение(РезультатЗагрузки, ТипЗагрузки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИменаСвойств()
	
	ИменаСвойств = "Номенклатура, Содержание, Количество, ЕдиницаИзмерения, СтавкаНДС";
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		
		ИменаСвойств = ИменаСвойств + ", Характеристика";
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
		
		ИменаСвойств = ИменаСвойств + ", Партия";
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам") Тогда
		
		ИменаСвойств = ИменаСвойств + ", СтруктурнаяЕдиница";
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УчетГТД") Тогда
		
		ИменаСвойств = ИменаСвойств + ", СтранаПроисхождения, НомерГТД";
		
	КонецЕсли;
	
	Возврат ИменаСвойств;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьДанныеВТабличноеПолеЗапасы(ТаблицаСопоставленияДанных)
	
	СтруктураПоискаПартииСНДС = Новый Структура("КомиссияСНДС", Истина);
	ЕстьПартииСНДС = Объект.Запасы.НайтиСтроки(СтруктураПоискаПартииСНДС).Количество() > 0;

	НалогообложениеНДСОрганизации = НалогиУНФ.НалогообложениеНДС(Объект.Организация,, Объект.Дата);
	ОрганизацияБезНДС = НалогообложениеНДСОрганизации = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС;
	
	ДобавлениеБезНДС = ЕстьПартииСНДС И ОрганизацияБезНДС;
	
	ТребуетсяИзменениеНалогообложениеНаСНДС = Ложь;
	
	ИменаСвойств = ИменаСвойств();
	
	НачатьТранзакцию();
	
	Попытка
		
		Для Каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = Объект.Запасы.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, ИменаСвойств);
				ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "СтруктурнаяЕдиница", "ПоложениеСклада");
				ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Ячейка", "ПоложениеСклада");
				ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Заказ", "ПоложениеЗаказаПоставщику");
			
				НоваяСтрока.Цена = СтрокаТаблицы.Цена;
				НоваяСтрока.Сумма = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
				
				ПартияСНДС = Ложь;
				Если ЗначениеЗаполнено(НоваяСтрока.Партия) И НоваяСтрока.Партия.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС 
					И НЕ Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
					ТребуетсяИзменениеНалогообложениеНаСНДС = Истина;
					ПартияСНДС = Истина;
				КонецЕсли;
				
				Если (Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС И НЕ ДобавлениеБезНДС) Или ПартияСНДС Тогда
					
					Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
						
						НоваяСтрока.СтавкаНДС = ?(ЗначениеЗаполнено(НоваяСтрока.Номенклатура.ВидСтавкиНДС), Справочники.СтавкиНДС.СтавкаНДС(НоваяСтрока.Номенклатура.ВидСтавкиНДС), Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса())));
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаТаблицы.СуммаНДС) Тогда
						
						НоваяСтрока.СуммаНДС = СтрокаТаблицы.СуммаНДС;
						
					Иначе
						
						СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
						
						НоваяСтрока.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
						НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((СтавкаНДС + 100) / 100),
						НоваяСтрока.Сумма * СтавкаНДС / 100);
						
					КонецЕсли;
					
				Иначе
					Если ДобавлениеБезНДС Тогда
						НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
					Иначе
						НоваяСтрока.СтавкаНДС = ?(Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС,
						УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС(),
						УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
					КонецЕсли;
					
					НоваяСтрока.СуммаНДС = 0;
					
				КонецЕсли;
				
				НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(Объект.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
				НоваяСтрока.Заказ = СтрокаТаблицы.Заказ;
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "СтранаПроисхождения")
					И ЗначениеЗаполнено(СтрокаТаблицы.СтранаПроисхождения)
					И СтрокаТаблицы.СтранаПроисхождения <> Справочники.СтраныМира.Россия
					И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "НомерГТД")
					И НЕ ЗначениеЗаполнено(СтрокаТаблицы.НомерГТД)
					И НЕ ПустаяСтрока(СтрокаТаблицы.НомерГТД_ВходящиеДанные)
					Тогда
					
					СправочникОбъект = Справочники.НомераГТД.СоздатьЭлемент();
					СправочникОбъект.Код = СтрокаТаблицы.НомерГТД_ВходящиеДанные;
					СправочникОбъект.ДопускаетсяЗаписьСОшибкой = Ложь;
					
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект, Истина, Истина);
					
					НоваяСтрока.НомерГТД = СправочникОбъект.Ссылка;
					
					СтрокиСНомеромГТД = ТаблицаСопоставленияДанных.НайтиСтроки(Новый Структура("НомерГТД_ВходящиеДанные", СтрокаТаблицы.НомерГТД_ВходящиеДанные));
					Для каждого СтрокаТаблицы Из СтрокиСНомеромГТД Цикл
						
						СтрокаТаблицы.НомерГТД = СправочникОбъект.Ссылка;
						
					КонецЦикла;
					
				КонецЕсли;
				
				// заполнить Серии номенклатуры
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "Серия_ВходящиеДанные")  
					И ЗначениеЗаполнено(СтрокаТаблицы.Серия_ВходящиеДанные) 
					И НоваяСтрока.Номенклатура.ИспользоватьСерииНоменклатуры Тогда
					
						Если СтрНайти(СтрокаТаблицы.Серия_ВходящиеДанные, Символы.ПС) > 0 Тогда
							Разделитель = Символы.ПС;
						ИначеЕсли СтрНайти(СтрокаТаблицы.Серия_ВходящиеДанные, ",") > 0 Тогда
							Разделитель = ",";
						ИначеЕсли СтрНайти(СтрокаТаблицы.Серия_ВходящиеДанные, ";") > 0 Тогда
							Разделитель = ";";
						ИначеЕсли СтрНайти(СтрокаТаблицы.Серия_ВходящиеДанные, " ") > 0 Тогда
							Разделитель = " ";
						КонецЕсли;
						МассивСерийных = СтрРазделить(СтрокаТаблицы.Серия_ВходящиеДанные, Разделитель);
						
						Для каждого СерийныйНомер Из МассивСерийных Цикл
							
							СерийныйНомерСсылка = Справочники.СерииНоменклатуры.НайтиПоНаименованию(
									СокрЛП(СерийныйНомер), 
									Истина, , 
									НоваяСтрока.Номенклатура);
									
							Если НЕ ЗначениеЗаполнено(СерийныйНомерСсылка) Тогда
								
								СерийныйНомерОбъект = Справочники.СерииНоменклатуры.СоздатьЭлемент();
								СерийныйНомерОбъект.Владелец = НоваяСтрока.Номенклатура;
								СерийныйНомерОбъект.Наименование	= СокрЛП(СерийныйНомер);
								СерийныйНомерОбъект.Записать();
								СерийныйНомерСсылка = СерийныйНомерОбъект.Ссылка;
								
							КонецЕсли;
							
							СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, СерийныйНомерСсылка, Объект); 
						
						КонецЦикла;
				
					КонецЕсли;
					
					НоваяСтрока.УказыватьДокументПоступления = СкладскойУчетСервер.УказыватьДокументПоступления(НоваяСтрока.СтруктурнаяЕдиница); //BG
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка данных'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , ПодробноеПредставлениеОшибки);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Если ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
		Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, Объект.Курс, КурсНациональнаяВалюта,УчетВалютныхОпераций);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеВТабличноеПолеРасходы(ТаблицаСопоставленияДанных)
	
	НачатьТранзакцию();
	
	Попытка
		
		Для Каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = Объект.Расходы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, "Номенклатура, Содержание, Количество, ЕдиницаИзмерения, СтавкаНДС");
				Если Объект.ПоложениеЗаказаПоставщику<>ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
					НоваяСтрока.ЗаказПоставщику = Объект.Заказ;
				КонецЕсли; 
				
				НоваяСтрока.Цена = СтрокаТаблицы.Цена;
				НоваяСтрока.Сумма = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
				
				Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
					
					Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
						
						НоваяСтрока.СтавкаНДС = ?(ЗначениеЗаполнено(НоваяСтрока.Номенклатура.ВидСтавкиНДС), Справочники.СтавкиНДС.СтавкаНДС(НоваяСтрока.Номенклатура.ВидСтавкиНДС), Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса())));
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаТаблицы.СуммаНДС) Тогда
						
						НоваяСтрока.СуммаНДС = СтрокаТаблицы.СуммаНДС;
						
					Иначе
						
						СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
						
						НоваяСтрока.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
						НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((СтавкаНДС + 100) / 100),
						НоваяСтрока.Сумма * СтавкаНДС / 100);
						
					КонецЕсли;
					
				Иначе
					
					НоваяСтрока.СтавкаНДС = ?(Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС,
					УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС(),
					УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
					
					НоваяСтрока.СуммаНДС = 0;
					
				КонецЕсли;
				
				НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(Объект.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
				НоваяСтрока.Заказ = СтрокаТаблицы.Заказ;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка данных'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, ,
			ПодробноеПредставлениеОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанные(АдресРезультатаЗагрузки)
	
	РезультатЗагрузки = ПолучитьИзВременногоХранилища(АдресРезультатаЗагрузки);	
	Если РезультатЗагрузки <> Неопределено Тогда
		
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Если РезультатЗагрузки.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ПриходнаяНакладная.ТабличнаяЧасть.Запасы" Тогда
			
			ЗагрузитьДанныеВТабличноеПолеЗапасы(ТаблицаСопоставленияДанных);
			ОбновитьОтображениеПрослеживаемости();
			
		ИначеЕсли РезультатЗагрузки.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ПриходнаяНакладная.ТабличнаяЧасть.Расходы" Тогда
			
			ЗагрузитьДанныеВТабличноеПолеРасходы(ТаблицаСопоставленияДанных);
			
		КонецЕсли;
		
		НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
		
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Функция ОбработатьПодготовленныеДанныеНоменклатуры(РезультатЗагрузки)
	
	ПараметрыВызоваСервера = Новый Структура;
	ПараметрыВызоваСервера.Вставить("НастройкиЗагрузкиДанных", РезультатЗагрузки.НастройкиЗагрузкиДанных);
	ПараметрыВызоваСервера.Вставить("ТаблицаСопоставленияДанных", ДанныеФормыВЗначение(РезультатЗагрузки.ТаблицаСопоставленияДанных, Тип("ТаблицаЗначений")));
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Подсистема ЗагрузкаДанныхИзВнешнегоИсточника: Выполнение серверного метода загрузки результата'");
	ПараметрыВыполнения.ЗапуститьНеВФоне    = Ложь;
	ПараметрыВыполнения.ЗапуститьВФоне      = Истина;	
	
	ИмяМетода = "Справочники.Номенклатура.ОбработатьПодготовленныеДанные";
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыВызоваСервера, ПараметрыВыполнения);
	
КонецФункции
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено,
	СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

//+ ГИСМ
&НаКлиенте
Процедура ТекстУведомленияГИСМОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияГИСМУНФКлиент.ТекстУведомленияОбИмпортеВвозеИзЕАЭСОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер()
	
	ИнтеграцияГИСМУНФ.СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭС(ЭтаФорма);
	
КонецПроцедуры

// ИнтеграцияГИСМ
&НаСервере
Процедура СформироватьНадписьМаркировкаПродукции()
	
	Элементы.ТекстМаркировкаТоваров.Видимость = Ложь;
	Если НЕ Объект.ЕстьМаркируемаяПродукцияГИСМ  Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеМаркировки = Метаданные.Документы.МаркировкаТоваровГИСМ;
	ПравоДобавления      = ПравоДоступа("Добавление", МетаданныеМаркировки);
	ПравоЧтения          = ПравоДоступа("Чтение", МетаданныеМаркировки);

	Если Не ПравоЧтения Тогда
		Возврат;
	КонецЕсли;
	
	Если ПравоДобавления Тогда
		ТекстНадписи = НСтр("ru = 'Оформить маркировку товаров'");
		ИмяКоманды   = "ОформитьМаркировкуТоваров";
	Иначе
		ТекстНадписи = НСтр("ru = 'Маркировка товаров не создана'");
		ИмяКоманды   = "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МаркировкаТоваровГИСМ.Ссылка,
	|	СтатусыИнформированияГИСМ.Статус
	|ИЗ
	|	Документ.МаркировкаТоваровГИСМ КАК МаркировкаТоваровГИСМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|		ПО (СтатусыИнформированияГИСМ.Документ = МаркировкаТоваровГИСМ.Ссылка)
	|ГДЕ
	|	МаркировкаТоваровГИСМ.Основание = &ОснованиеСсылка
	|	И НЕ МаркировкаТоваровГИСМ.ПометкаУдаления";

	Запрос.УстановитьПараметр("ОснованиеСсылка", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ТекстНадписи  = СтрШаблон(НСтр("ru = 'Маркировка товаров: %1'"), НРег (Строка(Выборка.Статус)));
		ИмяКоманды    = "ОткрытьПротоколОбмена";
		
	КонецЕсли;
	
	ТекстМаркировкаТоваров = Новый ФорматированнаяСтрока(
		ТекстНадписи,
		,
		ЦветаСтиля.ЦветГиперссылки,
		,
		ИмяКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусГИСМОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусГИСМОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Возврат товаров от клиента был изменен. Записать?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусГИСМОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Возврат товаров от клиента не записан. Записать?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПередатьДанные" Тогда
		
		ИнтеграцияГИСМКлиент.ПодготовитьСообщениеКПередаче(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ОперацииОбменаГИСМ.ПередачаДанных"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусГИСМОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		Записать();
	КонецЕсли;
	
	Если Не Модифицированность И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусГИСМ()
	
	ВидимостьКомандГИСМ = Объект.ЕстьМаркируемаяПродукцияГИСМ
		И Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя;
	
	Элементы.СтатусГИСМ.Видимость = ВидимостьКомандГИСМ;
	
	Если НЕ Объект.ЕстьМаркируемаяПродукцияГИСМ ИЛИ НЕ Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтатусГИСМ         = Перечисления.СтатусыИнформированияГИСМ.Черновик;
	ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПустаяСсылка();
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СтатусыИнформированияГИСМ.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.Черновик)) КАК СтатусГИСМ,
		|	ВЫБОР
		|		КОГДА СтатусыИнформированияГИСМ.ДальнейшееДействие В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПустаяСсылка)
		|		ИНАЧЕ ЕСТЬNULL(СтатусыИнформированияГИСМ.ДальнейшееДействие, ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные))
		|	КОНЕЦ КАК ДальнейшееДействие
		|ИЗ
		|	Документ.ПриходнаяНакладная КАК ВозвратТоваровОтКлиента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
		|		ПО (СтатусыИнформированияГИСМ.Документ = ВозвратТоваровОтКлиента.Ссылка)
		|ГДЕ
		|	ВозвратТоваровОтКлиента.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
		Запрос.УстановитьПараметр("МассивДальнейшиеДействия", ИнтеграцияГИСМ.НеотображаемыеВДокументахДальнейшиеДействия());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			СтатусГИСМ         = Выборка.СтатусГИСМ;
			ДальнейшееДействие = Выборка.ДальнейшееДействие;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтатусГИСМПредставление = ИнтеграцияГИСМ.ПредставлениеСтатусаГИСМ(
		СтатусГИСМ,
		ДальнейшееДействие,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыОбменаСГИСМ()
	
	СформироватьНадписьМаркировкаПродукции();
	ОбновитьСтатусГИСМ();
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ДекорацияСостояниеОригиналаНажатие(Элемент)
	УчетОригиналовПервичныхДокументовКлиент.ОткрытьМенюВыбораСостояния(ЭтотОбъект, Элементы.ДекорацияСостояниеОригинала);
КонецПроцедуры
//Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

#КонецОбласти

#Область Доставка

&НаСервере
Процедура УстановитьВидимостьДанныхПоДоставке()
	ДоставкаСервер.ОбновитьДанныеПоДоставкеИзСервиса(Объект.Ссылка, "ГруппаДоставка", Объект.Организация, ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область Наборы

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаменитьСтрокуЗапасовДаннымиНабора(Форма, СтрокаТабличнойЧасти, СтруктураДанные, КэшЗначений)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.АкцизныеМарки, СтрокаТабличнойЧасти);
	СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, СтрокаТабличнойЧасти,
		Форма.ИспользоватьСерииНоменклатурыОстатки);
	
	НаборыКлиентСервер.ЗаменитьСтрокуДаннымиНабора(Объект, ИмяТЧЗапасы(), СтрокаТабличнойЧасти, СтруктураДанные); 
	
	// Ручная скидка - заполнение полей ввода на форме
	РассчитатьСуммуИПроцентСкидкиРасходыЗапасы(Форма.Объект, Форма.СкидкаСумма, Форма.СкидкаПроцент);
	// Конец Ручная скидка
	
	Элементы.ЗапасыКартинкаНабора.Видимость = Истина;
	
	// Прослеживаемость
	Если Форма.КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
		Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
			ЗаполнитьПредставлениеРНПТ(Форма, СтрокаЗапасы, КэшЗначений);
		КонецЦикла; 
	КонецЕсли; 
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСоставНабора(СтрокаТабличнойЧасти)
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.НоменклатураНабора);
	СтруктураОткрытия.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.ХарактеристикаНабора);
	ДобавленныеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОткрытия);
	СтрокиНабора = Объект.Запасы.НайтиСтроки(СтруктураОткрытия);
	Если ДобавленныеСтроки.Количество() = 0 Тогда
		СтруктураОткрытия.Вставить("Количество", 1);
	Иначе
		СтруктураОткрытия.Вставить("Количество", ДобавленныеСтроки[0].Количество);
	КонецЕсли; 
	СтруктураОткрытия.Вставить("СоставНабора", Новый Массив);
	Для Каждого Стр Из СтрокиНабора Цикл
		ПоляСтроки = Новый Структура;
		ПоляСтроки.Вставить("Номенклатура");
		ПоляСтроки.Вставить("Характеристика");
		ПоляСтроки.Вставить("Количество");
		ПоляСтроки.Вставить("Цена");
		ПоляСтроки.Вставить("ДоляСтоимости");
		ПоляСтроки.Вставить("ЕдиницаИзмерения");
		ПоляСтроки.Вставить("Активная");
		ЗаполнитьЗначенияСвойств(ПоляСтроки, Стр);
		ПоляСтроки.Активная = (Стр = СтрокаТабличнойЧасти);
		СтруктураОткрытия.СоставНабора.Добавить(ПоляСтроки);
	КонецЦикла; 
	ОткрытьФорму("РегистрСведений.СоставНаборов.Форма.ФормаРедактированияСостава",
		СтруктураОткрытия, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоставНабора(НоменклатураНабора, ХарактеристикаНабора, КоличествоНаборов, ЦенаНабора, СоставНабора)
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("НоменклатураНабора", НоменклатураНабора);
	СтруктураДанных.Вставить("ХарактеристикаНабора", ХарактеристикаНабора);
	СтруктураДанных.Вставить("ИмяТабличнойЧасти", "Запасы");
	СтруктураДанных.Вставить("СоставНабора", СоставНабора);
	СтруктураДанных.Вставить("КоличествоНаборов", КоличествоНаборов);
	СтруктураДанных.Вставить("ЦенаНабора", ЦенаНабора);
	НаборыСервер.ОбновитьСоставНабораВДокументе(СтруктураДанных, Объект);
	Модифицированность = Истина;

	// Ручная скидка - заполнение полей ввода на форме
	РассчитатьСуммуИПроцентСкидкиРасходыЗапасы(Объект, СкидкаСумма, СкидкаПроцент);
	// Конец Ручная скидка
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДанныеКартинокНаборов(Запасы, ДобавленныеНаборы)
	
	Для каждого Стр Из Запасы Цикл
		Стр.КартинкаНабора = НаборыКлиентСервер.КартинкаНабора(Стр, ДобавленныеНаборы);
		Если Стр.КартинкаНабора>5 Тогда
			Стр.КартинкаНабора = ((Стр.КартинкаНабора - 1) % 5) + 1;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьПризнакиНабора(Запасы)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНаборы") Тогда
		Возврат;
	КонецЕсли; 
	
	МассивНоменклатуры = Новый Массив;
	Для каждого Стр Из Запасы Цикл
		Если ЗначениеЗаполнено(Стр.Номенклатура)
			И НЕ ЗначениеЗаполнено(Стр.НоменклатураНабора)
			И ТипЗнч(Стр.Номенклатура)=Тип("СправочникСсылка.Номенклатура") Тогда
			МассивНоменклатуры.Добавить(Стр.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивНоменклатуры.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&МассивНоменклатуры)
		|	И Номенклатура.ЭтоНабор";
		Выборка = Запрос.Выполнить().Выбрать();
		ПараметрыНоменклатуры = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			ПараметрыНоменклатуры.Вставить(Выборка.Ссылка, Истина);
		КонецЦикла; 
		
		Для каждого Стр Из Запасы Цикл
			Если НЕ ЗначениеЗаполнено(Стр.Номенклатура)
				ИЛИ ЗначениеЗаполнено(Стр.НоменклатураНабора)
				ИЛИ ТипЗнч(Стр.Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
				Стр.ЭтоНабор = Ложь;
			Иначе
				Стр.ЭтоНабор = ПараметрыНоменклатуры.Получить(Стр.Номенклатура);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция  ХарактеристикиНабора(Номенклатура, Текст)
	
	СтруктураПараметров = Новый Структура();
	Если ПустаяСтрока(Текст) Тогда
		СтруктураПараметров.Вставить("СтрокаПоиска", Неопределено);
	Иначе
		СтруктураПараметров.Вставить("СтрокаПоиска", Текст);
	КонецЕсли; 
	СтруктураПараметров.Вставить("Отбор", Новый Структура);
	СтруктураПараметров.Отбор.Вставить("Владелец", Номенклатура);
	Возврат Справочники.ХарактеристикиНоменклатуры.ПолучитьДанныеВыбора(СтруктураПараметров);
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьДействияПередУдалениемСтрокиЗапасов(Отказ)
	
	Если Элементы.Запасы.ВыделенныеСтроки.Количество() = Объект.Запасы.Количество() Тогда
		// Если выделены все строки - проверки удаления наборов не выполняются
		Объект.ДобавленныеНаборы.Очистить();
		Возврат;
	КонецЕсли;
	
	ДанныеНабора = Новый Структура("НоменклатураНабора, ХарактеристикаНабора");
	Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
		Если ДанныеНабора.НоменклатураНабора = Неопределено Тогда
			ДанныеНабора.НоменклатураНабора = ТекущиеДанныеСтроки.НоменклатураНабора;
			ДанныеНабора.ХарактеристикаНабора = ТекущиеДанныеСтроки.ХарактеристикаНабора;
		ИначеЕсли ДанныеНабора.НоменклатураНабора <> ТекущиеДанныеСтроки.НоменклатураНабора 
			ИЛИ ДанныеНабора.ХарактеристикаНабора <> ТекущиеДанныеСтроки.ХарактеристикаНабора Тогда
			// Выделены строки разных наборов
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Действие недоступно для наборов.'");
			Сообщение.Поле = "Объект.Запасы";
			Сообщение.Сообщить();
			Отказ = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеНабора.НоменклатураНабора) Тогда
		Возврат;
	КонецЕсли;
	
	// Набор можно удалить только целиком
	Отказ = Истина;
	ДобавленныеНаборы = Объект.ДобавленныеНаборы.НайтиСтроки(ДанныеНабора);
	Оповещение = Новый ОписаниеОповещения("ЗапасыПередУдалениемЗавершение", ЭтотОбъект, ДанныеНабора);
	СписокКнопок = Новый СписокЗначений;
	Если ДобавленныеНаборы.Количество() > 0
		И ДобавленныеНаборы[0].Количество > 1 Тогда
		// в ТЧ есть несколько одинаковых наборов
		ТекстВопроса = НСтр("ru = 'Набор можно удалить только целиком. В табличную часть добавлено несколько экземпляров данного набора'");
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить все'"));
		СписокКнопок.Добавить("УдалитьОдин", НСтр("ru = 'Удалить один экземпляр'"));
	Иначе
		ТекстВопроса = НСтр("ru = 'Набор можно удалить только целиком'");
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить'"));
	КонецЕсли; 
	СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Редактировать состав'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
	ПоказатьВопрос(Оповещение, ТекстВопроса, СписокКнопок, 0, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПослеУдаленияСтрокиЗапасов()
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры

#КонецОбласти 

#Область УчетОригиналовПервичныхДокументов

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ИзменитьСостояниеОригинала(Команда)
	УчетОригиналовПервичныхДокументовУНФКлиент.ИзменитьСостояниеОригинала(Команда, ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ПечатьЧековККМ

&НаКлиенте
Процедура НапечататьЧек(Команда)
	
	Если Объект.ВалютаДокумента <> УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту() Тогда
		ТекстСообщения = НСтр("ru = 'Валюта документа отличается от национальной.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат
	КонецЕсли;
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на оборудовании.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
		
	ЕстьПартииБезВладельца = ВТабличнойЧастиЕстьКомиссионнаяПартияБезВладельца();
	
	Если ЕстьПартииБезВладельца Тогда
		ТекстСообщения = НСтр("ru = 'В табличной части есть комиссионные партии в которых не указан владелец. Печать чека невозможна.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат
	КонецЕсли;
	
	Если ПечатьДокументовУНФКлиент.ПечатьЧекаНевозможна(ЭтотОбъект, НСтр("ru = 'Не удалось провести документ'")) Тогда
		Возврат;
	КонецЕсли;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключенияФискальногоРегистратораЗавершение", ЭтотОбъект);
		МассивОборудования = Новый Массив;
		МассивОборудования.Добавить("ФискальныйРегистратор");
		МассивОборудования.Добавить("ККТ");
		ОтборОборудования = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();
		ОтборОборудования.Вставить("ТипыПО", МассивОборудования);
		ОтборОборудования.Вставить("Организация", Объект.Организация);
		МенеджерОборудованияКлиент.ВыбратьУстройство(ОписаниеОповещения, ОтборОборудования,
				НСтр("ru='Выберите оборудование'"), НСтр("ru='Оборудование не подключено.'"));
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // НапечататьЧек()

&НаСервере
Функция ВТабличнойЧастиЕстьКомиссионнаяПартияБезВладельца()
	
	Возврат РаботаСКомиссионерамиКомитентамиСервер.ВТабличнойЧастиЕстьКомиссионнаяПартияБезВладельца(Объект);
	
КонецФункции

&НаСервере
Функция ПодготовитьДанныеДляПробитияЧека(ИдентификаторУстройстваФР) 
	
	Возврат РозничныеПродажиСервер.ПолучитьДанныеДляФискализации(Объект.Ссылка, ИдентификаторУстройстваФР);
	
КонецФункции // ПодготовитьДанныеДляПробитияЧека()

&НаКлиенте
Процедура ПодключенияФискальногоРегистратораЗавершение(РезультатВыбора, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		ИдентификаторУстройстваФР = РезультатВыбора.ИдентификаторУстройства;
	КонецЕсли;
	
	Если ИдентификаторУстройстваФР = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры = ПодготовитьДанныеДляПробитияЧека(ИдентификаторУстройстваФР);
	
	Если ОбщиеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры.ДатаВремя = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбщиеПараметры", ОбщиеПараметры);
	ДополнительныеПараметры.Вставить("ИдентификаторУстройстваФР", ИдентификаторУстройстваФР);
	
	Если ОбщиеПараметры.Свойство("ЭтоВозвратПродукцииИСМПБезМарки") Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаВозвратПродукцииИСМПБезМарки", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Не указаны коды маркировки для товаров. Продолжить пробитие чека?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
	Иначе
		ПроверитьКодМаркировкиСредствамиККТ(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаВозвратПродукцииИСМПБезМарки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПроверитьКодМаркировкиСредствамиККТ(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКодМаркировкиСредствамиККТ(ДополнительныеПараметры)
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверитьКодМаркировкиСредствамиККТЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РозничныеПродажиКлиент.ПроверитьКодМаркировкиСредствамиККТ(ДополнительныеПараметры.ОбщиеПараметры, 
		ЭтотОбъект, НСтр("ru = 'Пробить чек'"), ОповещениеОЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКодМаркировкиСредствамиККТЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ШтрихкодированиеИСМПКлиент.РезультатПроверкиСредствамиККТТребуетФискализации(Результат)
		И ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ОбщиеПараметры") Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПробитьЧекЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
			Оповещение,
			УникальныйИдентификатор,
			ДополнительныеПараметры.ИдентификаторУстройстваФР,  
			ДополнительныеПараметры.ОбщиеПараметры);
			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		
		// Установить полученное значение номера чека реквизиту документа.
		Объект.НомерСменыККМ = РезультатВыполнения.НомерСменыККТ;
		Объект.НомерЧекаККМ = РезультатВыполнения.НомерЧекаККТ;
		Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		Если НЕ ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
			Объект.НомерЧекаККМ = 1;
		КонецЕсли;
		
		Модифицированность = Истина;
		
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		
	Иначе
		
		ТекстСообщения = СтрШаблон(НСтр(
		"ru = 'При печати чека произошла ошибка.
		|Чек не напечатан на фискальном регистраторе.
		|Дополнительное описание:
		|%1'"), РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	УстановитьДоступностьПечатиЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонАдресЭППриИзменении(Элемент)
	
	УправлениеНебольшойФирмойКлиент.УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП);
	
КонецПроцедуры

&НаСервере
Функция ПоляКИДляОтправкиЧека()
	
	ПоляКИ = Новый Соответствие;
	ПоляКИ.Вставить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Элементы.АдресЭП.Имя);
	ПоляКИ.Вставить(Перечисления.ТипыКонтактнойИнформации.Телефон, Элементы.Телефон.Имя);
	
	Возврат ПоляКИ;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоляКИДляОтправкиЧекаПоУмолчанию(ДанныеКИ)
	
	Если ДанныеКИ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.АдресЭП = ДанныеКИ.Получить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Объект.Телефон = ДанныеКИ.Получить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	
КонецПроцедуры

#КонецОбласти

#Область Взаиморасчеты

&НаКлиенте
Процедура СпособЗачетаПредоплатыПриИзменении(Элемент)
	СпособЗачетаПредоплатыПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СпособЗачетаПредоплатыПриИзмененииНаСервере()
	РасчетыРаботаСФормамиВызовСервера.СпособЗачетаПредоплатыПриИзмененииНаСервере(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ВариантЗаполненияРасшифровкиПриИзмененииНаСервере(ПриСозданииНаСервере = Ложь)
	РасчетыРаботаСФормамиВызовСервера.ВариантЗаполненияРасшифровкиПриИзмененииНаСервере(ЭтотОбъект, ПриСозданииНаСервере);
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаполненияРасшифровкиПриИзменении(Элемент)
	ВариантЗаполненияРасшифровкиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПросмотра(Команда)
	ЗаполнитьТаблицуПросмотраНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПросмотраНаКлиенте()
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаПредоплата
		И ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиПросмотр Тогда
		ЗаполнитьТаблицуПросмотраНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПросмотраНаСервере()
	РасчетыРаботаСФормамиВызовСервера.ЗаполнитьТаблицуПросмотраНаСервере(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникЗачетаПредоплаты(Команда) Экспорт
	
	Если Объект.Контрагент.Пустая() Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите вначале контрагента.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите вначале договор контрагента.'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая()
		ИЛИ Объект.Дата <> ДатаПриСозданииНаСервере Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗаписатьИОткрытьФормуРаспределенияПлатежа", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, 
		НСтр("ru = 'Перед открытием помощника данные будут записаны.
					|Продолжить?'"),
		РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФормуРаспределенияПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИОткрытьФормуРаспределенияПлатежа(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Записать();
		Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
			Возврат; // Запись не удалась, сообщения о причинах выводит платформа.
		КонецЕсли;
		ОткрытьФормуРаспределенияПлатежа();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРаспределенияПлатежа()
	
	СтруктураПараметров = Новый Структура();
	СтруктураАдресов = АдресаВХранилище();
	СтруктураПараметров.Вставить("СтруктураАдресов", СтруктураАдресов);
	
	СоответствиеИменТЧИРеквизитовДляИтогов = Новый Соответствие;
	СоответствиеИменТЧИРеквизитовДляИтогов.Вставить(ИмяТЧЗапасы(), "Всего");
	СоответствиеИменТЧИРеквизитовДляИтогов.Вставить(ИмяТЧРасходы(), "Всего");
	СтруктураПараметров.Вставить("СоответствиеИменТЧИРеквизитовДляИтогов", СоответствиеИменТЧИРеквизитовДляИтогов);
	СтруктураПараметров.Вставить("СоответствиеИменТЧИРеквизитаЗаказ", ПолучитьСоответствиеИменТЧИРеквизитаЗаказ());
	СтруктураПараметров.Вставить("ВалютаРасчетов", ВалютаРасчетов);
	СтруктураПараметров.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	
	СтруктураПараметров.Вставить("ЭтоРасчетыСПоставщиком", Истина);
	
	РасчетыРаботаСФормамиКлиент.ОткрытьФормуРаспределенияСуммыПлатежа(Ложь, ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Функция АдресаВХранилище()
	
	Результат = Новый Структура;
	
	Результат.Вставить(
	"АдресРасшифровкаПлатежаВХранилище",
	ПоместитьВоВременноеХранилище(Объект.Предоплата.Выгрузить(), УникальныйИдентификатор));
	
	Результат.Вставить(
	"АдресТаблицаДокументовДляИзмененияВХранилище",
	ПоместитьВоВременноеХранилище(ТаблицаДокументовДляИзменения.Выгрузить(), УникальныйИдентификатор));
	
	// Суммы в разрезе заказов.
	ТЗЗаказыИСуммы = Объект.Запасы.Выгрузить(, "Заказ, Всего");
	Для Каждого ТекущаяСтрока Из Объект.Расходы Цикл
		НоваяСтрока = ТЗЗаказыИСуммы.Добавить();
		НоваяСтрока.Заказ = ТекущаяСтрока.ЗаказПоставщику;
		НоваяСтрока.Всего = ТекущаяСтрока.Всего;
	КонецЦикла;
	ТЗЗаказыИСуммы.Свернуть("Заказ", "Всего");
	Если Объект.ПоложениеЗаказаПоставщику = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		Для каждого ТекущаяСтрока Из ТЗЗаказыИСуммы Цикл
			ТекущаяСтрока.Заказ = Объект.Заказ;
		КонецЦикла;
	КонецЕсли;
	
	Результат.Вставить("АдресТаблицаЗаказыИСумма", ПоместитьВоВременноеХранилище(ТЗЗаказыИСуммы, УникальныйИдентификатор));
	
	Возврат Результат;
	
КонецФункции // ПоместитьРасшифровкаПлатежаВХранилище()

&НаКлиенте
Процедура РаспределитьСуммуПлатежаПослеРаспределения(РезультатЗакрытия, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") И РезультатЗакрытия.Свойство("ДеревоРаспределенияСуммыПлатежа") Тогда
		
		РасчетыРаботаСФормамиКлиент.РаспределитьСуммуПлатежаПослеРаспределения(ЭтотОбъект, РезультатЗакрытия, ДопПараметры);
		
		РаспределитьСуммуПлатежаПослеРаспределенияЗавершение();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьСуммуПлатежаПослеРаспределенияЗавершение()
	
	РасчетыРаботаСФормамиВызовСервера.РаспределитьСуммуПлатежаПослеРаспределенияЗавершение(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ЗаполнитьТаблицуПросмотраНаКлиенте();
	УстановитьВидимостьДанныхПоДоставке();
КонецПроцедуры

&НаСервере
Функция ПолучитьСоответствиеИменТЧИРеквизитаЗаказ()
	
	СоответствиеИменТЧИРеквизитаЗаказ = Новый Соответствие;
	СоответствиеИменТЧИРеквизитаЗаказ.Вставить(ИмяТЧЗапасы(), "Заказ");
	СоответствиеИменТЧИРеквизитаЗаказ.Вставить(ИмяТЧРасходы(), "ЗаказПоставщику");
	Возврат СоответствиеИменТЧИРеквизитаЗаказ;
	
КонецФункции

&НаСервере
Процедура ВзаиморасчетыПриСозданииНаСервере()
	
	ВидОперацииПомощника = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика;
	Если Объект.Ссылка.Пустая() Тогда
		Если ЭтоПоступлениеОтПоставщика(Объект.ВидОперации) Тогда
			Объект.СпособЗачетаПредоплаты = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляДоговора(Объект.Договор, Объект.Контрагент, Истина);
		Иначе
			Объект.СпособЗачетаПредоплаты = СпособыЗачетаВручную;
		КонецЕсли;
	ИначеЕсли Объект.СпособЗачетаПредоплаты.Пустая() Тогда
		Объект.СпособЗачетаПредоплаты = СпособыЗачетаВручную;
	КонецЕсли;
	ВариантЗаполненияРасшифровки = РасчетыРаботаСФормамиВызовСервера.ПолучитьВариантЗаполненияРасшифровкиДляДокументаОтгрузки(Объект.Проведен, Объект.СпособЗачетаПредоплаты);
	ИстинаПриСозданииНаСервере = Истина;
	ВариантЗаполненияРасшифровкиПриИзмененииНаСервере(ИстинаПриСозданииНаСервере);
	
	РасчетыРаботаСФормамиВызовСервера.ЗаполнитьРеквизитыРасчетов(ЭтотОбъект, СтруктураПараметровРасчетов, Неопределено, Истина);
	
	РасчетыРаботаСФормамиВызовСервера.СпособЗачетаПредоплатыПриИзмененииНаСервере(ЭтотОбъект);
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокОплаты(Объект.СпособЗачетаПредоплаты, Объект.Предоплата);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДляПросмотраОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	РасчетыРаботаСФормамиКлиент.ТаблицаДляПросмотраОбработкаРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка, СтруктураПараметровРасчетов, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Расхождения

&НаСервере
Процедура ИнициализироватьРасхожденияВНовомПоступленииОтПоставщика()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоПоступлениеОтПоставщика(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ПроверятьРасхожденияСЗаказом.Доступность = ДоступностьФлажкаПроверятьРасхожденияСЗаказом();
	
	ПроверятьРасхожденияСЗаказом = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		Пользователи.ТекущийПользователь(), "ПроверятьРасхожденияСЗаказом");
	
	УстановитьФлажокПроверятьРасхожденияСЗаказом(ПроверятьРасхожденияСЗаказом);
	
	Объект.ПроверятьРасхожденияСВходящимДокументом = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		Пользователи.ТекущийПользователь(), "ПроверятьРасхожденияСВходящимДокументом");
	
	Если Не Объект.ПроверятьРасхожденияСВходящимДокументом Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПринятьПоКолонке = ПринятьПоКолонке();
	
	Если Объект.ПринятьПоКолонке = ПредопределенноеЗначение("Перечисление.ПринятьПоКолонке.КоличествоПоФакту") Тогда
		Для Каждого ТекСтрока Из Объект.Запасы Цикл
			ТекСтрока.КоличествоСправочно = ТекСтрока.Количество;
			ТекСтрока.Количество = 0;
			ТекСтрока.Всего = 0;
			ТекСтрока.Сумма = 0;
			ТекСтрока.СуммаНДС = 0;
			ТекСтрока.СуммаСкидкиНаценки = 0;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПринятьПоКолонке()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПриходнаяНакладная.ПринятьПоКолонке КАК ПринятьПоКолонке
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
	|ГДЕ
	|	ПриходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика)
	|	И ПриходнаяНакладная.ПроверятьРасхожденияСВходящимДокументом
	|	И НЕ ПриходнаяНакладная.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриходнаяНакладная.Дата УБЫВ");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Если ЗначениеЗаполнено(Выборка.ПринятьПоКолонке) Тогда
			Возврат Выборка.ПринятьПоКолонке;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредопределенноеЗначение("Перечисление.ПринятьПоКолонке.КоличествоПоФакту");
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеНастроекРасхождений(СледуетПереместитьКоличество)

	Если СледуетПереместитьКоличество Тогда
		Для Каждого ТекСтрока Из Объект.Запасы Цикл
			ВременноеЗначение = ТекСтрока.КоличествоСправочно;
			ТекСтрока.КоличествоСправочно = ТекСтрока.Количество;
			ТекСтрока.Количество = ВременноеЗначение;
			РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧЗапасы(), ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	ОбновитьРасхождения();
	ОбновитьПодвалФормы();

КонецПроцедуры

&НаСервере
Процедура ПроверятьРасхожденияСЗаказомПриИзмененииНаСервере()
	
	ПроверятьРасхожденияСЗаказом = Объект.ПроверятьРасхожденияСЗаказом;
	ОбновитьРасхождения();
	ЗаполнитьСписокДействий(ИмяТЧЗапасы());
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРасхождения()
	
	Если Объект.ПроверятьРасхожденияСВходящимДокументом Тогда
		
		Элементы.ПринятьПоКолонке.Доступность = Истина;
		Элементы.ПолученыДокументыПодтверждающиеРасхождения.Доступность = Истина;
		Элементы.ЗапасыРасхождение.Видимость = Истина;
		Элементы.ЗапасыКоличествоСправочно.Видимость = Истина;
		Элементы.КорректировкаПоступленияПредставление.Доступность = Истина;
		Элементы.ЗапасыКонтекстноеМенюПоказыватьТолькоРасхождения.Видимость = Истина;
		Элементы.ПоказыватьТолькоРасхождения.Видимость = Истина;
		ОтметитьЦветомКолонкуПоКоторойПринимаетсяТовар();
		
		ПереключитьВидимостьКолонокКоличество();
		
	Иначе
		
		Элементы.ПринятьПоКолонке.Доступность = Ложь;
		Элементы.КорректировкаПоступленияПредставление.Доступность = Ложь;
		Элементы.ПолученыДокументыПодтверждающиеРасхождения.Доступность = Ложь;
		Элементы.ЗапасыКоличество.Видимость = Истина;
		Элементы.ЗапасыКоличество.Заголовок = НСтр("ru = 'Количество'");
		Элементы.ЗапасыКоличество.ЦветФонаЗаголовка = Новый Цвет;
		Элементы.ЗапасыКоличествоФакт.Видимость = Ложь;
		Элементы.ЗапасыКоличествоСправочно.Видимость = Ложь;
		Элементы.ЗапасыРасхождение.Видимость = Ложь;
		Элементы.ЗапасыКонтекстноеМенюПоказыватьТолькоРасхождения.Видимость = Ложь;
		Элементы.ПоказыватьТолькоРасхождения.Видимость = Ложь;
		
	КонецЕсли;
	
	Элементы.ПроверятьРасхожденияСЗаказом.Доступность = ДоступностьФлажкаПроверятьРасхожденияСЗаказом();
	УстановитьФлажокПроверятьРасхожденияСЗаказом(ПроверятьРасхожденияСЗаказом);
	
	Элементы.ЗапасыКоличествоВЗаказе.Видимость = Объект.ПроверятьРасхожденияСЗаказом;
	Элементы.ЗапасыРасхождениеСЗаказом.Видимость = Объект.ПроверятьРасхожденияСЗаказом;
	Элементы.ЗапасыЦенаВЗаказе.Видимость = Объект.ПроверятьРасхожденияСЗаказом;
	
	Если Объект.ПроверятьРасхожденияСВходящимДокументом Или Объект.ПроверятьРасхожденияСЗаказом Тогда
		ТаблицаЗапасы = ТаблицаЗапасы();
		ОбновитьДанныеЗаказаВТЧЗапасы(ТаблицаЗапасы);
		ОбновитьРасхожденияВТЧЗапасы(ТаблицаЗапасы);
		Элементы.ЗапасыКомментарийРасхождения.Видимость = Истина;
		Элементы.ЗапасыКомментарий.Видимость = Ложь;
	Иначе
		Элементы.ЗапасыКомментарийРасхождения.Видимость = Ложь;
		Элементы.ЗапасыКомментарий.Видимость = Истина;
	КонецЕсли;
	
	УстановитьЗаголовокОформлениеРасхождений();
	УстановитьЦветЗаголовкаИКартинкуРасхождения();
	
КонецПроцедуры

&НаСервере
Функция ДоступностьФлажкаПроверятьРасхожденияСЗаказом()
	
	Если Объект.ПоложениеЗаказаПоставщику <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти
			И ЗначениеЗаполнено(Объект.Заказ)
			И ТипЗнч(Объект.Заказ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект.Запасы Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Заказ)
				И ТипЗнч(ТекСтрока.Заказ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ОтметитьЦветомКолонкуПоКоторойПринимаетсяТовар()
	
	Элементы.ЗапасыКоличество.ЦветФонаЗаголовка = ЦветаСтиля.ФонУправляющегоПоля;
	
КонецПроцедуры

// Элементы "ЗапасыКоличество" и "ЗапасыКоличествоФакт" ссылаются на одни и те же данные "Объект.Запасы.Количество".
// Чтобы в разных режимах "ОприходоватьПоКолонке" визуально положение колонок не изменялось,
// переключается видимость колонок "ЗапасыКоличество" и "ЗапасыКоличествоФакт".
&НаСервере
Процедура ПереключитьВидимостьКолонокКоличество()
	
	Если Объект.ПринятьПоКолонке = ПредопределенноеЗначение("Перечисление.ПринятьПоКолонке.КоличествоПоФакту") Тогда
		Элементы.ЗапасыКоличество.Видимость = Ложь;
		Элементы.ЗапасыКоличествоФакт.Видимость = Истина;
		Элементы.ЗапасыКоличествоСправочно.Заголовок = НСтр("ru = 'Количество
																  |по вх. документу'");
		Элементы.КорректировкаПоступленияПредставление.Видимость = Ложь;
	Иначе
		Элементы.ЗапасыКоличество.Видимость = Истина;
		Элементы.ЗапасыКоличество.Заголовок = НСтр("ru = 'Количество
														 |по вх. документу'");
		Элементы.ЗапасыКоличествоФакт.Видимость = Ложь;
		Элементы.ЗапасыКоличествоСправочно.Заголовок = НСтр("ru = 'Количество
																  |по факту'");
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКорректировкиПоступлений") Тогда
			Элементы.КорректировкаПоступленияПредставление.Видимость = Истина;
			ОбновитьКорректировкаПоступленияПредставление();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРасхожденияВТЧЗапасы(Знач ТаблицаЗапасы)
	
	ЕстьРасхождения = Ложь;
	
	Для Каждого ТекСтрока Из Объект.Запасы Цикл
		
		ПараметрыОтбора = ПоляДляПредставленияКоличества(ТекСтрока);
		Итоги = ИтогиДляПредставления(ПараметрыОтбора, ТаблицаЗапасы);
		
		КоэффициентЕдиницыИзмерения = Коэффициент(ТекСтрока.ЕдиницаИзмерения);
		ТекСтрока.КоличествоПредставление = КоличествоПредставление(ТекСтрока.Количество, Итоги.Количество,
			КоэффициентЕдиницыИзмерения);
		ТекСтрока.КоличествоСправочноПредставление = КоличествоПредставление(ТекСтрока.КоличествоСправочно,
			Итоги.КоличествоСправочно, КоэффициентЕдиницыИзмерения);
		
		Если Объект.ПринятьПоКолонке = ПредопределенноеЗначение("Перечисление.ПринятьПоКолонке.КоличествоПоФакту") Тогда
			ТекСтрока.Расхождение = ТекСтрока.Количество - ТекСтрока.КоличествоСправочно;
		Иначе
			ТекСтрока.Расхождение = ТекСтрока.КоличествоСправочно - ТекСтрока.Количество;
		КонецЕсли;
		
		ТекСтрока.РасхождениеПредставление = РасхождениеПредставление(ТекСтрока.Расхождение);
		
		ТекСтрока.ЕстьРасхождение = ЗначениеЗаполнено(ТекСтрока.Расхождение);
		
		Если ТекСтрока.Расхождение <> 0 Тогда
			ЕстьРасхождения = Истина;
		КонецЕсли;
		
		Если УказанЗаказПоставщику(ТекСтрока) Тогда
			ТекСтрока.РасхождениеСЗаказом = Итоги.Количество - ТекСтрока.КоличествоВЗаказе;
			ТекСтрока.РасхождениеСЗаказомПредставление = РасхождениеПредставление(ТекСтрока.РасхождениеСЗаказом);
		Иначе
			ТекСтрока.РасхождениеСЗаказомПредставление = "";
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.ЕстьРасхождения <> ЕстьРасхождения Тогда
		Объект.ЕстьРасхождения = ЕстьРасхождения;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КоличествоПредставление(Знач Количество, Знач КоличествоИтог, Знач КоэффициентЕдиницыИзмерения)
	
	Если КоэффициентЕдиницыИзмерения = 1 Тогда
		Если Количество = КоличествоИтог Тогда
			Возврат Формат(Количество, "ЧДЦ=3");
		Иначе
			Возврат СтрШаблон("%1 / %2",
				Формат(Количество, "ЧДЦ=3; ЧН=0;"), Формат(КоличествоИтог, "ЧДЦ=3"));
		КонецЕсли;
	КонецЕсли; 
	
	Если Количество = КоличествоИтог * КоэффициентЕдиницыИзмерения Тогда
		Возврат Формат(Количество, "ЧДЦ=3");
	КонецЕсли;
	
	Возврат СтрШаблон("%1 / %2",
		Формат(Количество, "ЧДЦ=3; ЧН=0;"),
		Формат(КоличествоИтог / КоэффициентЕдиницыИзмерения, "ЧДЦ=3"));
	
КонецФункции

&НаСервере
Функция ИтогиДляПредставления(Знач ПараметрыОтбора, Знач ТаблицаЗапасы)
	
	Результат = Новый Структура;
	Результат.Вставить("Количество", 0);
	Результат.Вставить("КоличествоСправочно", 0);
	
	Для Каждого ТекСтрока Из ТаблицаЗапасы.НайтиСтроки(ПараметрыОтбора) Цикл
		Результат.Количество = Результат.Количество + ТекСтрока.Количество;
		Результат.КоличествоСправочно = Результат.КоличествоСправочно + ТекСтрока.КоличествоСправочно;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПоляДляПредставленияКоличества(Знач СтрокаТаблицыЗапасы)
	
	Результат = Новый Структура;
	Результат.Вставить("Номенклатура", СтрокаТаблицыЗапасы.Номенклатура);
	Результат.Вставить("Характеристика", СтрокаТаблицыЗапасы.Характеристика);
	Результат.Вставить("Партия", СтрокаТаблицыЗапасы.Партия);
	Если ЗначениеЗаполнено(СтрокаТаблицыЗапасы.Заказ) Тогда
		Результат.Вставить("Заказ", СтрокаТаблицыЗапасы.Заказ);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция УказанЗаказПоставщику(Знач СтрокаТаблицыЗапасы)
	
	Если Объект.ПоложениеЗаказаПоставщику = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Возврат ЗначениеЗаполнено(СтрокаТаблицыЗапасы.Заказ);
	Иначе
		Возврат ЗначениеЗаполнено(Объект.Заказ);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РасхождениеПредставление(Знач Расхождение)
	
	Результат = Формат(Расхождение, "ЧЦ=15; ЧДЦ=3; ЧН=0");
	
	Если Расхождение > 0 Тогда
		Возврат СтрШаблон("+%1", Результат);
	Иначе
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеЗаказаВТЧЗапасы(Знач ТаблицаЗапасы)
	
	Если Не ЗначениеЗаполнено(Объект.Запасы) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаказыПоставщику = ЗаказыПоставщику();
	
	Если Не ЗначениеЗаполнено(ЗаказыПоставщику) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВТ_Запасы.Индекс КАК Индекс,
	|	ВТ_Запасы.Номенклатура КАК Номенклатура,
	|	ВТ_Запасы.Характеристика КАК ХарактеристикаНоменклатуры,
	|	ВТ_Запасы.Заказ КАК ЗаказПоставщику
	|ПОМЕСТИТЬ ВТ_Запасы
	|ИЗ
	|	&ВТ_Запасы КАК ВТ_Запасы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	ЗаказПоставщику
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПоставщикамОстатки.Характеристика КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВТ_КПоступлению
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|			,
	|			Организация = &Организация
	|				И ЗаказПоставщику В (&ЗаказыПоставщику)) КАК ЗаказыПоставщикамОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	ЗаказПоставщику
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыПоставщикам.Номенклатура КАК Номенклатура,
	|	ЗаказыПоставщикам.Характеристика КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПоставщикам.ЗаказПоставщику КАК ЗаказПоставщику,
	|	СУММА(ЗаказыПоставщикам.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_ДвиженияТекущегоДокумента
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
	|ГДЕ
	|	ЗаказыПоставщикам.Регистратор = &Регистратор
	|	И &Регистратор <> ЗНАЧЕНИЕ(Документ.ПриходнаяНакладная.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПоставщикам.Номенклатура,
	|	ЗаказыПоставщикам.Характеристика,
	|	ЗаказыПоставщикам.ЗаказПоставщику
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПоставщикуЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПоставщикуЗапасы.Характеристика КАК ХарактеристикаНоменклатуры,
	|	ЗаказПоставщикуЗапасы.Ссылка КАК ЗаказПоставщику,
	|	ЗаказПоставщикуЗапасы.Цена КАК Цена,
	|	ЗаказПоставщикуЗапасы.Ссылка.ВалютаДокумента КАК Валюта,
	|	ЗаказПоставщикуЗапасы.Ссылка.Курс КАК Курс,
	|	ЗаказПоставщикуЗапасы.Ссылка.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВТ_ЗаказПоставщикуЗапасы
	|ИЗ
	|	Документ.ЗаказПоставщику.Запасы КАК ЗаказПоставщикуЗапасы
	|ГДЕ
	|	ЗаказПоставщикуЗапасы.Ссылка В(&ЗаказыПоставщику)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	ЗаказПоставщику
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Запасы.Индекс КАК Индекс,
	|	ЕСТЬNULL(ВТ_КПоступлению.КоличествоОстаток, 0) + ЕСТЬNULL(ВТ_ДвиженияТекущегоДокумента.Количество, 0) КАК
	|		КоличествоВЗаказе,
	|	ВТ_ЗаказПоставщикуЗапасы.Валюта КАК ВалютаВЗаказе,
	|	ВТ_ЗаказПоставщикуЗапасы.Цена КАК ЦенаВЗаказе
	|ИЗ
	|	ВТ_Запасы КАК ВТ_Запасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КПоступлению КАК ВТ_КПоступлению
	|		ПО ВТ_Запасы.ЗаказПоставщику = ВТ_КПоступлению.ЗаказПоставщику
	|			И ВТ_Запасы.Номенклатура = ВТ_КПоступлению.Номенклатура
	|			И ВТ_Запасы.ХарактеристикаНоменклатуры = ВТ_КПоступлению.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗаказПоставщикуЗапасы КАК ВТ_ЗаказПоставщикуЗапасы
	|		ПО ВТ_Запасы.ЗаказПоставщику = ВТ_ЗаказПоставщикуЗапасы.ЗаказПоставщику
	|			И ВТ_Запасы.Номенклатура = ВТ_ЗаказПоставщикуЗапасы.Номенклатура
	|			И ВТ_Запасы.ХарактеристикаНоменклатуры = ВТ_ЗаказПоставщикуЗапасы.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДвиженияТекущегоДокумента КАК ВТ_ДвиженияТекущегоДокумента
	|		ПО ВТ_Запасы.ЗаказПоставщику = ВТ_ДвиженияТекущегоДокумента.ЗаказПоставщику
	|			И ВТ_Запасы.Номенклатура = ВТ_ДвиженияТекущегоДокумента.Номенклатура
	|			И ВТ_Запасы.ХарактеристикаНоменклатуры = ВТ_ДвиженияТекущегоДокумента.ХарактеристикаНоменклатуры");
	Запрос.УстановитьПараметр("ВТ_Запасы", ТаблицаЗапасы);
	Запрос.УстановитьПараметр("ЗаказыПоставщику", ЗаказыПоставщику);
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТекущегоКурса = НовыеПараметрыКурсаВалюты();
	
	ПараметрыНовогоКурса = НовыеПараметрыКурсаВалюты();
	ПараметрыНовогоКурса.Валюта = Объект.ВалютаДокумента;
	Если Объект.ВалютаДокумента = НациональнаяВалюта Тогда
		ПараметрыНовогоКурса.Курс = КурсНациональнаяВалюта;
		ПараметрыНовогоКурса.Кратность = КратностьНациональнаяВалюта;
	Иначе
		ПараметрыНовогоКурса.Курс = Объект.Курс;
		ПараметрыНовогоКурса.Кратность = Объект.Кратность;
	КонецЕсли;
	
	НайденныеЦеныВЗаказе = Новый Соответствие;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект.Запасы[Выборка.Индекс].КоличествоВЗаказе = Выборка.КоличествоВЗаказе;
		ПараметрыТекущегоКурса.Валюта = Выборка.ВалютаВЗаказе;
		ПараметрыТекущегоКурса.Курс = Объект.Курс;
		ПараметрыТекущегоКурса.Кратность = Объект.Кратность;
		ЦенаВЗаказе = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(Выборка.ЦенаВЗаказе, ПараметрыТекущегоКурса,
			ПараметрыНовогоКурса);
		Если ЗначениеЗаполнено(НайденныеЦеныВЗаказе[Выборка.Индекс])
				И НайденныеЦеныВЗаказе[Выборка.Индекс] <> ЦенаВЗаказе Тогда
			Объект.Запасы[Выборка.Индекс].ЦенаВЗаказеПредставление = ПредставлениеПоляНесколькоЦенВЗаказе();
		Иначе
			Объект.Запасы[Выборка.Индекс].ЦенаВЗаказе = ЦенаВЗаказе;
			Объект.Запасы[Выборка.Индекс].ЦенаВЗаказеПредставление = Формат(Объект.Запасы[Выборка.Индекс].ЦенаВЗаказе,
				"ЧЦ=15; ЧДЦ=2; ЧН=0;");
			НайденныеЦеныВЗаказе[Выборка.Индекс] = ЦенаВЗаказе;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НовыеПараметрыКурсаВалюты()
	
	Возврат Новый Структура("Валюта, Курс, Кратность");
	
КонецФункции

// Возвращает выгрузку из табличной части Запасы для подсчета количества и расхождений по строкам
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
//   * Индекс - Число - индекс строки табличной части Запасы 
//   * Номенклатура - СправочникСсылка.Номенклатура - номенклатура
//   * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика номенклатуры
//   * Партия - СправочникСсылка.ПартииНоменклатуры - партия
//   * Количество - Число - Количество умноженное на коэффициент единицы измерения
//   * КоличествоСправочно - Число - КоличествоСправочно умноженное на коэффициент единицы измерения
//   * Заказ - ДокументСсылка.ЗаказПоставщику - заказ поставщику 
&НаСервере
Функция ТаблицаЗапасы()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Результат.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Результат.Колонки.Добавить("Партия", Новый ОписаниеТипов("СправочникСсылка.ПартииНоменклатуры"));
	Результат.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("КоличествоСправочно", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику"));
	
	Результат.Индексы.Добавить("Номенклатура,Характеристика,Партия,Заказ");
	
	Для Каждого ТекСтрокаЗапасы Из Объект.Запасы Цикл
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Индекс = Объект.Запасы.Индекс(ТекСтрокаЗапасы);
		НоваяСтрока.Идентификатор = ТекСтрокаЗапасы.ПолучитьИдентификатор();
		НоваяСтрока.Номенклатура = ТекСтрокаЗапасы.Номенклатура;
		НоваяСтрока.Характеристика = ТекСтрокаЗапасы.Характеристика;
		НоваяСтрока.Партия = ТекСтрокаЗапасы.Партия;
		КоэффициентЕдиницыИзмерения = Коэффициент(ТекСтрокаЗапасы.ЕдиницаИзмерения);
		НоваяСтрока.Количество = ТекСтрокаЗапасы.Количество * КоэффициентЕдиницыИзмерения;
		НоваяСтрока.КоличествоСправочно = ТекСтрокаЗапасы.КоличествоСправочно * КоэффициентЕдиницыИзмерения;
		Если Объект.ПоложениеЗаказаПоставщику <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			НоваяСтрока.Заказ = Объект.Заказ;
		Иначе
			НоваяСтрока.Заказ = ТекСтрокаЗапасы.Заказ;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция Коэффициент(Знач ЕдиницаИзмерения)

	Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		Возврат 1;
	КонецЕсли;
	
	Если ТипЗнч(ЕдиницаИзмерения) <> Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
		Возврат 1;
	КонецЕсли;
	
	Возврат ЕдиницаИзмерения.Коэффициент;

КонецФункции

&НаСервере
Функция ЗаказыПоставщику()

	Результат = Новый Массив;

	Если Объект.ПоложениеЗаказаПоставщику <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Если ЗначениеЗаполнено(Объект.Заказ) Тогда
			Результат.Добавить(Объект.Заказ);
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;

	Для Каждого ТекЗначение Из Объект.Запасы Цикл
		Если ЗначениеЗаполнено(ТекЗначение.Заказ)
				И ТипЗнч(ТекЗначение.Заказ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			Результат.Добавить(ТекЗначение.Заказ);
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

&НаСервере
Процедура ОбновитьКорректировкаПоступленияПредставление()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		КорректировкаПоступленияПредставление = НСтр("ru = '<можно создать после записи накладной>'");
		Элементы.КорректировкаПоступленияПредставление.Гиперссылка = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.КорректировкаПоступленияПредставление.Гиперссылка = Истина;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КорректировкаПоступления.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(КорректировкаПоступления.Ссылка) КАК СсылкаПредставление
	|ИЗ
	|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
	|ГДЕ
	|	КорректировкаПоступления.ДокументОснование = &ДокументОснование
	|	И НЕ КорректировкаПоступления.ПометкаУдаления");
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		КорректировкаПоступления = Документы.КорректировкаПоступления.ПустаяСсылка();
		КорректировкаПоступленияПредставление = НСтр("ru = 'создать'");
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	КорректировкаПоступления = Выборка.Ссылка;
	КорректировкаПоступленияПредставление = Выборка.СсылкаПредставление;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокОформлениеРасхождений()
	
	Если Не Объект.ПроверятьРасхожденияСВходящимДокументом Тогда
		ЗаголовокОформлениеРасхождений = "";
		Возврат;
	КонецЕсли;
	
	Если Не Объект.ЕстьРасхождения Тогда
		ЗаголовокОформлениеРасхождений = НСтр("ru = 'отсутствуют'");
		Возврат;
	КонецЕсли;
	
	КомпонентыЗаголовка = Новый Массив;
	
	Если Объект.ПолученыДокументыПодтверждающиеРасхождения Тогда
		КомпонентыЗаголовка.Добавить(НСтр("ru = 'документы получены'"));
	Иначе
		КомпонентыЗаголовка.Добавить(НСтр("ru = 'есть'"));
	КонецЕсли;
	
	Если Объект.ПринятьПоКолонке = Перечисления.ПринятьПоКолонке.КоличествоПоВходящемуДокументу Тогда
		КомпонентыЗаголовка.Добавить(НСтр("ru = 'принять как в документе'"));
	КонецЕсли;
	
	Если Объект.ПринятьПоКолонке = Перечисления.ПринятьПоКолонке.КоличествоПоФакту Тогда
		КомпонентыЗаголовка.Добавить(НСтр("ru = 'принять по факту'"));
	КонецЕсли;
	
	ЗаголовокОформлениеРасхождений = СтрСоединить(КомпонентыЗаголовка, " • ");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветЗаголовкаИКартинкуРасхождения()
	
	Если Не Объект.ПроверятьРасхожденияСВходящимДокументом Тогда
		Элементы.Расхождения.ЦветТекстаЗаголовка = ЦветаСтиля.ГиперссылкаЦвет;
		Элементы.ГруппаЗапасы.Картинка = Новый Картинка;
		Возврат;
	КонецЕсли;
	
	Если Не Объект.ЕстьРасхождения Тогда
		Элементы.Расхождения.ЦветТекстаЗаголовка = ЦветаСтиля.РезультатУспехЦвет;
		Элементы.ГруппаЗапасы.Картинка = Новый Картинка;
		Возврат;
	КонецЕсли;
	
	Если Объект.ПолученыДокументыПодтверждающиеРасхождения Тогда
		Элементы.Расхождения.ЦветТекстаЗаголовка = ЦветаСтиля.РезультатУспехЦвет;
		Элементы.ГруппаЗапасы.Картинка = Новый Картинка;
		Возврат;
	КонецЕсли;
	
	Элементы.Расхождения.ЦветТекстаЗаголовка = ЦветаСтиля.ПоясняющийОшибкуТекст;
	Элементы.ГруппаЗапасы.Картинка = БиблиотекаКартинок.ЕстьРасхождения;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьРасхождения(Знач ИдентификаторСтроки)
	
	СтрокаТабличнойЧасти = Объект.Запасы.НайтиПоИдентификатору(ИдентификаторСтроки);
	ТаблицаЗапасы = ТаблицаЗапасы();
	ПараметрыОтбора = ПоляДляПредставленияКоличества(СтрокаТабличнойЧасти);
	Итоги = ИтогиДляПредставления(ПараметрыОтбора, ТаблицаЗапасы);
	Для Каждого ТекСтрока Из Объект.Запасы.НайтиСтроки(ПараметрыОтбора) Цикл
		КоэффициентЕдиницыИзмерения = Коэффициент(ТекСтрока.ЕдиницаИзмерения);
		ТекСтрока.КоличествоПредставление = КоличествоПредставление(ТекСтрока.Количество, Итоги.Количество,
			КоэффициентЕдиницыИзмерения);
		ТекСтрока.КоличествоСправочноПредставление = КоличествоПредставление(ТекСтрока.КоличествоСправочно,
			Итоги.КоличествоСправочно, КоэффициентЕдиницыИзмерения);
		Если УказанЗаказПоставщику(ТекСтрока) Тогда
			ТекСтрока.РасхождениеСЗаказом = Итоги.Количество - ТекСтрока.КоличествоВЗаказе;
			ТекСтрока.РасхождениеСЗаказомПредставление = РасхождениеПредставление(ТекСтрока.РасхождениеСЗаказом);
		Иначе
			ТекСтрока.РасхождениеСЗаказомПредставление = "";
		КонецЕсли;
	КонецЦикла;
	
	РассчитатьРасхождениеСВхДокументом(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьРасхождениеСВхДокументом(Знач СтрокаТабличнойЧасти)
	
	Если Не Объект.ПроверятьРасхожденияСВходящимДокументом Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ПринятьПоКолонке = ПредопределенноеЗначение("Перечисление.ПринятьПоКолонке.КоличествоПоФакту") Тогда
		СтрокаТабличнойЧасти.Расхождение = СтрокаТабличнойЧасти.Количество - СтрокаТабличнойЧасти.КоличествоСправочно;
	Иначе
		СтрокаТабличнойЧасти.Расхождение = СтрокаТабличнойЧасти.КоличествоСправочно - СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.РасхождениеПредставление = РасхождениеПредставление(СтрокаТабличнойЧасти.Расхождение);
	
	СтрокаТабличнойЧасти.ЕстьРасхождение = ЗначениеЗаполнено(СтрокаТабличнойЧасти.Расхождение);
	
	Если ИзменилисьРасхождения(СтрокаТабличнойЧасти.Расхождение) Тогда
		ОбновитьРасхождения();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИзменилисьРасхождения(Знач РасхождениеВСтроке)
	
	Если Объект.ЕстьРасхождения И РасхождениеВСтроке = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не Объект.ЕстьРасхождения И РасхождениеВСтроке <> 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура РазбитьСтрокуТабличнойЧастиЗавершение(Знач КоличествоВНовойСтроке, Знач СтрокаТабличнойЧасти) Экспорт
	
	Если КоличествоВНовойСтроке = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКДанным = СтрШаблон("Объект.Запасы[%1].Количество",
	Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧГ="));
	
	Если КоличествоВНовойСтроке <= 0 Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Количество в новой строке должно быть больше нуля.'"), , ПутьКДанным);
		
		Возврат;
		
	КонецЕсли;
	
	Если КоличествоВНовойСтроке >= СтрокаТабличнойЧасти.Количество Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Количество в новой строке должно быть меньше чем в текущей.'"), , ПутьКДанным);
		
		Возврат;
		
	КонецЕсли;
	
	НоваяСтрока = Объект.Запасы.Вставить(СтрокаТабличнойЧасти.НомерСтроки);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
	
	СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество - КоличествоВНовойСтроке;
	НоваяСтрока.Количество = КоличествоВНовойСтроке;
	НоваяСтрока.КлючСвязи = 0;
	НоваяСтрока.СерииНоменклатуры = "";
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, НоваяСтрока);
	
	// ИнтеграцияГосИС
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПриОкончанииРедактирования");
	ДополнительныеПараметры.Вставить("ОповещениеСерверногоВызова", "ОповещениеПриОкончанииРедактированияТабличнойЧастиИС");
	СобытияФормИСУНФКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "ТабличнаяЧасть", ДополнительныеПараметры);
	// Конец ИнтеграцияГосИС
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧЗапасы(), СтрокаТабличнойЧасти);
	РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧЗапасы(), НоваяСтрока);
	
	ОбновитьПодвалФормы();
	
	Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗаказаИОповестить(Знач ИмяСобытия, Знач СтрокаТабличнойЧасти, Знач ИмяКолонки)
	
	Если Объект.ПоложениеЗаказаПоставщику = ПредопределенноеЗначение(
		"Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		ЗаказПоставщику = СтрокаТабличнойЧасти.Заказ;
	Иначе
		ЗаказПоставщику = Объект.Заказ;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗаказПоставщику) Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Документ.ЗаказПоставщику.ФормаОбъекта", Новый Структура("Ключ", ЗаказПоставщику));
	
	ПараметрПерехода =  Новый Структура;
	ПараметрПерехода.Вставить("ЗаказПоставщику", ЗаказПоставщику);
	ПараметрПерехода.Вставить("ИмяКолонки", ИмяКолонки);
	ПараметрПерехода.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	ПараметрПерехода.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	Оповестить(ИмяСобытия, ПараметрПерехода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередРаспределениемПоКоличествуВЗаказе()
	
	УстановитьПоложениеЗаказаПоставщику(
		ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти"));
	
	Если Не Объект.ПроверятьРасхожденияСЗаказом Тогда
		Объект.ПроверятьРасхожденияСЗаказом = Истина;
		ПроверятьРасхожденияСЗаказомПриИзмененииНаСервере();
	КонецЕсли;
	
	УстановитьВидимостьОтПользовательскихНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРаспределенияПоКоличествуВЗаказе(Знач КоличествоСтрокДоРаспределения)
	Если КоличествоСтрокДоРаспределения <> Объект.Запасы.Количество() Тогда
		ПоказатьОповещениеПользователя(НСтр(
			"ru = 'Заказ перемещен в табличную часть. Количество распределено по заказам.'"));
	Иначе
		ПоказатьОповещениеПользователя(НСтр(
			"ru = 'Заказ перемещен в табличную часть. Распределение по заказам не требуется.'"));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Константы

&НаКлиентеНаСервереБезКонтекста
Функция ИмяТЧЗапасы()
	
	Возврат "Запасы"; // Не локализуется
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяТЧРасходы()
	
	Возврат "Расходы"; // Не локализуется
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПоляНесколькоЦенВЗаказе()
	
	Возврат НСтр("ru = '<несколько>'");
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияГосИС

&НаКлиенте
Процедура ОповещениеПриОкончанииРедактированияТабличнойЧастиИС(Результат, ДополнительныеПараметры) Экспорт
	ПриОкончанииРедактированияТабличнойЧастиИСНаСервере(ДополнительныеПараметры);
КонецПроцедуры

&НаСервере
Процедура ПриОкончанииРедактированияТабличнойЧастиИСНаСервере(ДополнительныеПараметры)
	СобытияФормИСУНФ.ПриИзмененииЭлемента(ЭтотОбъект, "ТабличнаяЧасть", ДополнительныеПараметры);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормИСУНФКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеОбработчики

&НаКлиенте
Процедура ПослеВыполненияФоновогоЗадания(Прогресс, ДополнительныеПараметры) Экспорт
	
	Если НЕ Прогресс = Неопределено Тогда
		ОбработатьПодготовленныеДанные(Прогресс.АдресРезультата);
		ОбновитьПодвалФормы();
		
		УстановитьВидимостьКолонкиДокументаПоступления(Неопределено);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеобходимостьПодключенияОбработчикаОжидания(ДлительнаяОперация, СтруктураПараметров = Неопределено)
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ПослеВыполненияФоновогоЗадания(ДлительнаяОперация, СтруктураПараметров);
		
	Иначе
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеВыполненияФоновогоЗадания", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Идет загрузка данных.'");
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прослеживаемость

&НаКлиенте
Процедура ОбработкаВыбораРНПТННаКлиенте(ВыбранноеЗначение)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторСтроки) Тогда
			СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;
		ОбработкаВыбораРНПТННаСервере(СтрокаТабличнойЧасти.ИдентификаторСтроки, ВыбранноеЗначение);
		ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти, КэшЗначений);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбработкаВыбораГТДНаКлиенте(ВыбранноеЗначение)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		// Если в результате выбора пришло только значение,
		// то переложим его в структуру.
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.НомераГТД") Тогда
			ВыбранноеЗначение = Новый Структура("НомерГТД", ВыбранноеЗначение);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
	КонецЕсли;
	
	ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти, КэшЗначений);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораРНПТННаСервере(ИдентификаторСтроки, ВыбранноеЗначение)
	
	ПрослеживаемостьФормыУНФ.ОбработкаВыбораРНПТН(ЭтотОбъект, ИдентификаторСтроки, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСвязанныеЗаписи(СтрокаЗапасы)
	
	СтруктураОтбора = Новый Структура("ИдентификаторСтроки", СтрокаЗапасы.ИдентификаторСтроки);
	МассивСтрокСведенияПрослеживаемости = Объект.СведенияПрослеживаемости.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаТЧ Из МассивСтрокСведенияПрослеживаемости Цикл
		Объект.СведенияПрослеживаемости.Удалить(СтрокаТЧ);
	КонецЦикла;
	ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаЗапасы, КэшЗначений);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПризнакПрослеживаемости()
	
	ИспользуетсяПрослеживаемость = КэшЗначений.ВестиУчетПрослеживаемыхТоваров
		И ПрослеживаемаяОперация(Объект.ВидОперации);
	ПрослеживаемостьФормыУНФ.ОбновитьПризнакПрослеживаемости(Объект.Запасы, Объект.СведенияПрослеживаемости, ИспользуетсяПрослеживаемость);
	Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
		ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы, КэшЗначений);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Функция ВестиУчетПрослеживаемыхТоваров()
	
	ВестиУчетПрослеживаемыхТоваров = ПрослеживаемостьУНФ.ВедетсяУчетПрослеживаемыхТоваров(Объект.Дата)
		И ПрослеживаемаяОперация(Объект.ВидОперации);
	
	Возврат ВестиУчетПрослеживаемыхТоваров;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПрослеживаемаяОперация(Операция)
	
	Если Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика")
		ИЛИ Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя")
		ИЛИ Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера")
		ИЛИ Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	
КонецФункции 

&НаСервере
Процедура ОбновитьОтображениеПрослеживаемости()
	
	ПрослеживаемостьФормыУНФ.ПриСозданииФормы(ЭтотОбъект, КэшЗначений, ПрослеживаемаяОперация(Объект.ВидОперации));
	Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
		ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы, КэшЗначений);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеРНПТ(пФорма, СтрокаЗапасы, КэшЗначений)
	
	ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(
		пФорма,
		СтрокаЗапасы,
		,
		КэшЗначений.ПоставщикРезидентТаможенногоСоюза);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыПрослеживаемостиПриИзмененииКонтрагента(СтруктураДанные);
	
	Если КэшЗначений.ПоставщикРезидентТаможенногоСоюза <> СтруктураДанные.ПоставщикРезидентТаможенногоСоюза Тогда
		КэшЗначений.Вставить("ПоставщикРезидентТаможенногоСоюза", СтруктураДанные.ПоставщикРезидентТаможенногоСоюза);
		ПоставщикРезидентТаможенногоСоюза = КэшЗначений.ПоставщикРезидентТаможенногоСоюза;
		Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
			ПрослеживаемостьФормыКлиентСерверУНФ.НастроитьВидимостьКолонокРНПТ(
				ЭтотОбъект,
				,,
				ПрослеживаемаяОперация(Объект.ВидОперации),
				КэшЗначений.ПоставщикРезидентТаможенногоСоюза);
			
			Объект.СведенияПрослеживаемости.Очистить();
			ОбновитьОтображениеПрослеживаемости();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НапоминатьОбУведомленияхОВвозе()
	
	ТребуетсяНапоминаниеДо = ТребуетсяНапоминание;
	ПоказыватьБаннерДо     = ПоказыватьБаннер;
	
	ТребуетсяНапоминание = ТребуетсяНапоминаниеОбУведомленииОВвозе();
	ПоказыватьБаннер     = ТребуетсяНапоминание И СписокУведомлений.Количество() = 0 И НЕ ОтключитьБаннерУведомленийОВвозе;
	
	Если ТребуетсяНапоминаниеДо <> ТребуетсяНапоминание
		ИЛИ ПоказыватьБаннерДо <> ПоказыватьБаннер 
		ИЛИ ОбновитьСрокОтправкиУведомлений Тогда
		
		НапоминатьОбУведомленияхОВвозе();
		ОбновитьСрокОтправкиУведомлений = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТребуетсяНапоминаниеОбУведомленииОВвозе()
	
	ПрослеживаемыеТовары     = Объект.Запасы.НайтиСтроки(Новый Структура("ПрослеживаемыйТовар", Истина));
	ЕстьПрослеживаемыеТовары = ПрослеживаемыеТовары.Количество() > 0;
	
	Возврат ЕстьПрослеживаемыеТовары И ПоставщикРезидентТаможенногоСоюза;

КонецФункции

&НаСервере
Процедура НапоминатьОбУведомленияхОВвозе()
	
	УстановитьВидимостьИДоступность();
	Если ПоказыватьБаннер Тогда
		// Дата отсчета срока - 5 дней со дня принятия на учет.
		СрокУведомления = ПрослеживаемостьУНФ.СрокПодачиУведомления(Объект.Дата);
		
		ШаблонТекста = НСтр("ru = 'В документе присутствуют прослеживаемые товары. До %1 необходимо создать и отправить уведомление о ввозе в налоговую инспекцию и получить РНПТ.
		|Для создания уведомления необходимо в меню ""Создать на основании"" выбрать пункт ""Уведомление о ввозе прослеживаемых товаров"".'");
		Элементы.ДекорацияУведомление.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекста, Формат(СрокУведомления, "ДФ='дд ММММ'"));
		Элементы.ГруппаБаннерУведомлениеОВвозе.Видимость = Истина;
	Иначе
		Элементы.ГруппаБаннерУведомлениеОВвозе.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеНадписиУведомлениеОВвозе()
	
	ПрослеживаемостьФормыУНФ.УстановитьПредставлениеНадписиУведомлениеОВвозе(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти 

#Область Инициализация

ЭтоНоваяСтрокаЗапасы = Ложь;

#КонецОбласти
