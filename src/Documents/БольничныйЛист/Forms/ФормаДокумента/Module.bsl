#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Заполнение списков выбора, которые не зависят от данных (могут использоваться при обновлении подсказок).
	ОбменЛисткамиНетрудоспособностиФСС.КодыПричинИсправления(Элементы.КодПричиныИсправленияЭЛН.СписокВыбора);
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ЗапланироватьПолноеОбновлениеСведенийДляФСС();
		
		// Заполнение "пустого" документа.
		ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный, Месяц",
			"Объект.Организация",
			"Объект.Ответственный",
			"Объект.ПериодРегистрации");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		
		ОбновитьГоловнуюОрганизацию();
		
		ЗаполнитьПоКадровымДаннымСотрудника();
		
		ЗаполнитьУсловияИсчисления();
		
		Если ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
			Объект.ПланируемаяДатаВыплаты = КонецМесяца(Объект.ПериодРегистрации) + 5 * 86400;
			ПересчитатьНДФЛ();
		КонецЕсли;
		
		ПриПолученииДанныхНаСервере();
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// БлокировкаИзмененияОбъектов
	БлокировкаИзмененияОбъектов.ПриСозданииНаСервереФормыОбъекта(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец БлокировкаИзмененияОбъектов
	
	// КадровыйЭДО
	КадровыйЭДО.ПриСозданииНаСервереФормыОбъекта(ЭтотОбъект, Отказ, СтандартнаяОбработка, Объект);
	// Конец КадровыйЭДО
	
	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность = ОбщегоНазначения.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональность");
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗапланироватьЧтениеСведенийДляФСС();
	
	// Вместо обработчика обновления.
	ТекущийОбъект.ВключитьАвтозаполнениеПериодовОплаты();
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	Если Объект.ДоляНеполногоВремени = 0 Тогда
		Объект.ДоляНеполногоВремени = 1;
	КонецЕсли;
	
	ПриПолученииДанныхНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаБЗК.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// БлокировкаИзмененияОбъектов
	БлокировкаИзмененияОбъектов.ПриЧтенииНаСервереФормыОбъекта(ЭтотОбъект, ТекущийОбъект);
	// Конец БлокировкаИзмененияОбъектов
	
	// КадровыйЭДО
	КадровыйЭДО.ПриЧтенииНаСервереФормыОбъекта(ЭтотОбъект, ТекущийОбъект, Объект);
	// Конец КадровыйЭДО
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЗаявлениеСотрудникаНаВыплатуПособия" Тогда
		ОбновитьЭлементыПрямыхВыплатФСС();
	ИначеЕсли ИмяСобытия = "Запись_РеестрДанныхЭЛНЗаполняемыхРаботодателем" Тогда
		ТребуетсяПрочитатьСведенияОбЭЛН = Истина;
		ОбновитьСведенияДляФСС();
	ИначеЕсли ИмяСобытия = "Запись_ИсходящееСообщениеОСтраховомСлучаеФСС"
		Или ИмяСобытия = "Запись_ВходящийЗапросФССДляРасчетаПособия"
		Или ИмяСобытия = "Запись_ОтветНаЗапросФССДляРасчетаПособия" Тогда
		ОбновитьЭлементыСЭДО();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// КадровыйЭДО
	КадровыйЭДОКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец КадровыйЭДО
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность = ОбщегоНазначения.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональность");
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(
			ЭтотОбъект,
			ТекущийОбъект,
			ПараметрыЗаписи);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
	ПередЗаписьюНаСервереЭЛН(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_БольничныйЛист", ПараметрыЗаписи, Объект.Ссылка);
	
	Если ПараметрыЗаписи.Свойство("ИмяПроцедурыПослеЗаписи") Тогда
		Обработчик = Новый ОписаниеОповещения(ПараметрыЗаписи.ИмяПроцедурыПослеЗаписи, ЭтотОбъект, ПараметрыЗаписи);
		ПараметрыЗаписи.Удалить("ИмяПроцедурыПослеЗаписи");
		ВыполнитьОбработкуОповещения(Обработчик, Истина);
	КонецЕсли;
	
	Оповестить("ЗаявкиСотрудниковЗаписанДокумент", Объект.Ссылка, ВладелецФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		И ЗначениеЗаполнено(Объект.НомерЛисткаНетрудоспособности)
		И ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		ПодключитьОбработчикОжидания("ПолучитьЭЛНИзФССПослеОткрытияФормы", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ОбработкаПроверкиЗаполненияНаСервереЭЛН(Отказ, ПроверяемыеРеквизиты);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗапланироватьЧтениеСведенийДляФСС();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаБЗК.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
	// БлокировкаИзмененияОбъектов
	БлокировкаИзмененияОбъектов.ПослеЗаписиНаСервереФормыОбъекта(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец БлокировкаИзмененияОбъектов
	
	// КадровыйЭДО
	КадровыйЭДО.ПослеЗаписиНаСервереФормыОбъекта(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Объект);
	// Конец КадровыйЭДО
	
	ОбновитьСведенияДляФСС();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НомерЛисткаНетрудоспособностиПриИзменении(Элемент)
	НомерЛисткаНетрудоспособностиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	СотрудникПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтотОбъект, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Модифицированность);
	
	ПериодРегистрацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтотОбъект, ЭтотОбъект, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПериодРегистрацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтотОбъект, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Направление, Модифицированность);
	ПериодРегистрацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЯвляетсяПродолжениемБолезниПриИзменении(Элемент)
	
	ЯвляетсяПродолжениемБолезниПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПервичныйЛистокНетрудоспособностиНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		ПараметрыОтбора.Вставить("ДатаОкончания", НачалоДня(НачалоДня(Объект.ДатаНачала)-1));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		ПараметрыОтбора.Вставить("Сотрудник", Объект.Сотрудник);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ПричинаНетрудоспособности) Тогда
		ПараметрыОтбора.Вставить("ПричинаНетрудоспособности", Объект.ПричинаНетрудоспособности);
	КонецЕсли;
	
	ПараметрыОткрытияФормыВыбора = Новый Структура;
	ПараметрыОткрытияФормыВыбора.Вставить("РежимВыбораПервичногоБольничногоЛиста", Истина);
	Если ПараметрыОтбора.Количество() > 0 Тогда
		ПараметрыОткрытияФормыВыбора.Вставить("Отбор", ПараметрыОтбора);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ПервичныйБольничныйЛист) Тогда
		ПараметрыОткрытияФормыВыбора.Вставить("ПервичныйБольничныйЛист", Объект.ПервичныйБольничныйЛист);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыОткрытияФормыВыбора.Вставить("ТекущийДокумент", Объект.Ссылка);
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ПервичныйБольничныйЛистЗавершениеВыбора", ЭтотОбъект);
	
	ОткрытьФорму("Документ.БольничныйЛист.ФормаВыбора", ПараметрыОткрытияФормыВыбора, , , , , Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПричиныНетрудоспособностиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Или Не ЗначениеЗаполнено(Текст) Тогда
		// Событие было вызвано для формирования списка быстрого выбора.
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = КодыПричин;
	Иначе
		// Событие было вызвано при вводе текста.
		СписокДляПодбора = Новый СписокЗначений;
		Для Каждого ЭлементСписка Из КодыПричин Цикл
			Если СтрНайти(НРег(ЭлементСписка.Представление), НРег(Текст)) > 0 Тогда
				ЗаполнитьЗначенияСвойств(СписокДляПодбора.Добавить(), ЭлементСписка);
			КонецЕсли;
		КонецЦикла;
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокДляПодбора;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПричиныНетрудоспособностиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ДатаНачалаСобытия, НомерЛисткаНетрудоспособности, ПериодыУходаЗаРодственниками,
		|КодПричиныНетрудоспособности, ПричинаНетрудоспособности, СлучайУходаЗаБольнымРебенком, ГоловнаяОрганизация,
		|ПоУходуФИО1, ПоУходуВозрастЛет1, ПоУходуВозрастМесяцев1, ПоУходуФИО2, ПоУходуВозрастЛет2, ПоУходуВозрастМесяцев2");
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Объект);
	ПараметрыФормы.ПериодыУходаЗаРодственниками = ПериодыУхода();
	Обработчик = Новый ОписаниеОповещения("ПослеВыбораПричиныНетрудоспособности", ЭтотОбъект);
	ОткрытьФорму("Документ.БольничныйЛист.Форма.ВыборПричиныНетрудоспособности", ПараметрыФормы, , , , , Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПричиныНетрудоспособностиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПослеВыбораПричиныНетрудоспособности(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПричиныНетрудоспособностиПриИзменении(Элемент)
	Если ТипЗнч(ПредставлениеПричиныНетрудоспособности) = Тип("Строка")
		И КодыПричин.НайтиПоЗначению(ПредставлениеПричиныНетрудоспособности) <> Неопределено Тогда
		ПослеВыбораПричиныНетрудоспособности(ПредставлениеПричиныНетрудоспособности);
	Иначе
		ПредставлениеПричиныНетрудоспособности = ПредставлениеПричиныНетрудоспособности();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПереключательПричиныНетрудоспособности01ПриИзменении(Элемент)
	Если ПредставлениеПричиныНетрудоспособности = "" Тогда
		ПредставлениеПричиныНетрудоспособности = ПредставлениеПричиныНетрудоспособностиДоИзменения;
		ПредставлениеПричиныНетрудоспособностиНачалоВыбора(Элемент, Неопределено, Истина);
	Иначе
		ПослеВыбораПричиныНетрудоспособности(ПредставлениеПричиныНетрудоспособности);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПереключательПричиныНетрудоспособности02ПриИзменении(Элемент)
	Если ПредставлениеПричиныНетрудоспособности = "" Тогда
		ПредставлениеПричиныНетрудоспособности = ПредставлениеПричиныНетрудоспособностиДоИзменения;
		ПредставлениеПричиныНетрудоспособностиНачалоВыбора(Элемент, Неопределено, Истина);
	Иначе
		ПослеВыбораПричиныНетрудоспособности(ПредставлениеПричиныНетрудоспособности);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КарантинПоКоронавирусуПриИзменении(Элемент)
	КарантинПоКоронавирусуПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	ДатаНачалаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	ДатаОкончанияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДатаНарушенияРежимаПриИзменении(Элемент)
	
	РассчитатьНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентОплатыПриИзменении(Элемент)
	
	РассчитатьНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименятьЛьготыПриНачисленииПособияПриИзменении(Элемент)
	ПрименятьЛьготыПриНачисленииПособияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ФинансированиеФедеральнымБюджетомПриИзменении(Элемент)
	ФинансированиеФедеральнымБюджетомПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СреднийДневнойЗаработокПриИзменении(Элемент)
	
	РассчитатьНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура РайонныйКоэффициентРФНаНачалоСобытияПриИзменении(Элемент)
	
	РассчитатьНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоляНеполногоВремениПриИзменении(Элемент)
	
	Если Объект.ДоляНеполногоВремени = 0 Тогда
		Объект.ДоляНеполногоВремени = 1;
	КонецЕсли;
	РассчитатьСреднийЗаработок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничениеПособияПриИзменении(Элемент)
	
	РассчитатьНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентОплатыБезЛьготПриИзменении(Элемент)
	
	РассчитатьНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничениеПособияБезЛьготПриИзменении(Элемент)
	
	РассчитатьНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПоловиннойОплатыПриИзменении(Элемент)
	
	РассчитатьНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланируемаяДатаВыплатыПриИзменении(Элемент)
	
	ПересчитатьНДФЛ();
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьПособиеПриИзменении(Элемент)
	
	НазначитьПособиеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаОплатыПриИзменении(Элемент)
	
	ДатаНачалаОплатыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияОплатыПриИзменении(Элемент)
	
	ДатаОкончанияОплатыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаСобытияПриИзменении(Элемент)
	ДатаНачалаСобытияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИсключаемыеПериодыВШапкеНадписьНажатие(Элемент)
	ИзменитьИсключаемыеПериоды(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИсключаемыеПериодыНадписьНажатие(Элемент)
	ИзменитьИсключаемыеПериоды(Элемент);
КонецПроцедуры

#Область Стаж

&НаКлиенте
Процедура СтажЛетПриИзменении(Элемент)
	ПриИзмененииСтажаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СтажМесяцевПриИзменении(Элемент)
	ПриИзмененииСтажаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СтажДнейПриИзменении(Элемент)
	ПриИзмененииСтажаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СтажРасширенныйЛетПриИзменении(Элемент)
	ПриИзмененииСтажаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СтажРасширенныйМесяцевПриИзменении(Элемент)
	ПриИзмененииСтажаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СтажРасширенныйДнейПриИзменении(Элемент)
	ПриИзмененииСтажаНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ПрямыеВыплатыФСС

&НаКлиенте
Процедура ПособиеВыплачиваетсяФССПриИзменении(Элемент)
	ОбновитьСведенияДляФСС();
КонецПроцедуры

&НаКлиенте
Процедура СсылкиПрямыхВыплатФССОбработкаНавигационнойСсылки(Элемент, Адрес, СтандартнаяОбработка)
	Если Адрес = "СоздатьСведения" Тогда
		СтандартнаяОбработка = Ложь;
		СоздатьСведенияДляПрямыхВыплатФСС();
	ИначеЕсли Адрес = "ПоказатьВсе" Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьВсеСведенияДляПрямыхВыплатФСС();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ЭЛН

&НаКлиенте
Процедура ОтправитьЭЛНПриИзменении(Элемент)
	ОтправитьЭЛНПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИсправлениеЭЛНПриИзменении(Элемент)
	ИсправлениеЭЛНПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИсправлениеЭЛНЧисломПриИзменении(Элемент)
	ИсправлениеЭЛНЧисломПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КодПричиныИсправленияЭЛНПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(ОписаниеПричиныИсправленияЭЛН)
		Или ОписаниеПричиныИсправленияЭЛН = Элементы.КодПричиныИсправленияЭЛН.Подсказка Тогда
		ОписаниеПричиныИсправленияЭЛН = НаименованиеПричиныИсправленияЭЛН(ЭтотОбъект);
	КонецЕсли;
	ОбновитьЭлементыЭЛН();
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПричиныИсправленияЭЛННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.КомментарийНачалоВыбора(
		ЭтотОбъект,
		Элемент,
		ДанныеВыбора,
		СтандартнаяОбработка,
		"ОписаниеПричиныИсправленияЭЛН",
		Элемент.ПодсказкаВвода);
КонецПроцедуры

&НаКлиенте
Процедура СсылкиРеестровЭЛНОбработкаНавигационнойСсылки(Элемент, Адрес, СтандартнаяОбработка)
	
	Если Адрес = "ПринятыйРеестрЭЛН" Тогда
		
		СтандартнаяОбработка = Ложь;
		УчетПособийСоциальногоСтрахованияКлиент.ОткрытьРеестрЭЛН(
			СведенияОбЭЛН.ПринятыйРеестр,
			Объект.НомерЛисткаНетрудоспособности);
		
	ИначеЕсли Адрес = "ПодготовленныйРеестрЭЛН" Тогда
		
		СтандартнаяОбработка = Ложь;
		УчетПособийСоциальногоСтрахованияКлиент.ОткрытьРеестрЭЛН(
			СведенияОбЭЛН.ПодготовленныйРеестр,
			Объект.НомерЛисткаНетрудоспособности);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Подвал

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.КомментарийНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка)
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисления

&НаКлиенте
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	ПодключитьОбработчикОжидания("ПослеИзмененияНачисленийНаКлиенте", 0.1, Истина);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы


&НаКлиенте
Процедура ОткрытьСреднийЗаработок(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ФизическоеЛицо)
		Или Не ЗначениеЗаполнено(Объект.ПричинаНетрудоспособности)
		Или Не ЗначениеЗаполнено(Объект.ДатаНачалаСобытия) Тогда
		
		ВызватьИсключение НСтр("ru='Необходимо заполнить обязательные для заполнения поля'");
		
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресПараметровВХранилище", АдресПараметровВХранилище());
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", Объект.ЯвляетсяПродолжениемБолезни);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьОповещениеОбИзмененииСреднегоЗаработкаФСС", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ВводДанныхДляРасчетаСреднегоЗаработкаФСС", ПараметрыОткрытия, ЭтотОбъект, , , ,Оповещение , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеЛисткаНетрудоспособностиНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИменаРеквизитов = ИменаРеквизитовЛисткаНетрудоспособности();
	ПараметрыФормы = Новый Структура(ИменаРеквизитов);
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Объект);
	ПараметрыФормы.Вставить("СтрокаВозвращаемыхРеквизитов", ИменаРеквизитов);
	ПараметрыФормы.Вставить("НомерЛисткаНетрудоспособности", Объект.НомерЛисткаНетрудоспособности);
	ПараметрыФормы.Вставить("ДатаНачалаСобытия", Объект.ДатаНачалаСобытия);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ГоловнаяОрганизация", Объект.ГоловнаяОрганизация);
	ПараметрыФормы.Вставить("ФизическоеЛицо", Объект.ФизическоеЛицо);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ПараметрыФормы.Вставить("Номер", Объект.Номер);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("ПериодыУходаЗаРодственниками", ПериодыУхода());
	
	ОбработчикВыбора = Новый ОписаниеОповещения("ПослеВводаДанныхЛисткаНетрудоспособности", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВводДанныхЛисткаНетрудоспособности", ПараметрыФормы, ЭтотОбъект, , , , ОбработчикВыбора);
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееОРасчетеНДФЛ(Команда)
	
	ОбработчикВыбора = Новый ОписаниеОповещения("ПослеИзмененияСведенийОРасчетеНДФЛ", ЭтотОбъект);
	
	УчетНДФЛКлиент.ОткрытьФормуПодробнееОРасчетеНДФЛ(Объект.Организация, ЭтотОбъект, Объект.ПериодРегистрации, Объект.Сотрудник, , ОбработчикВыбора);
	
КонецПроцедуры

#Область ЭЛН

&НаКлиенте
Процедура ПолучитьИзФСС(Команда)
	ОчиститьСообщения();
	Если Не РазрешеноПолучениеИзФСС() Тогда
		Возврат;
	КонецЕсли;
	Результат = ПолучитьИзФССНаСервере();
	Если Результат.БольничныйЗаполнен Тогда
		ПослеУспешнойЗагрузкиЭЛН();
	Иначе
		НачатьПолучениеДанныхИзФСС(Результат.ЗапросДляПолученияЭЛН);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИзФССБезКэша(Команда)
	НачатьПолучениеДанныхИзФСС(ВыгрузитьЗапросДляПолученияЭЛН());
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	Обработчик = Новый ОписаниеОповещения("ПослеВыбораФайлаЭЛН", ЭтотОбъект);
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.ИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыЗагрузки.Диалог.Фильтр = НСтр("ru = 'Файлы XML (*.xml)|*.xml|Все файлы (*.*)|*'");
	ПараметрыЗагрузки.Диалог.ИндексФильтра = 0;
	ПараметрыЗагрузки.Диалог.Заголовок = НСтр("ru = 'Выберите файл ЭЛН, полученный из ФСС'");
	
	ФайловаяСистемаКлиент.ЗагрузитьФайл(Обработчик, ПараметрыЗагрузки);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайл(Команда)
	ОписаниеФайла = ОписаниеФайлаЭЛН(Объект.НомерЛисткаНетрудоспособности, Объект.ГоловнаяОрганизация, УникальныйИдентификатор);
	УчетПособийСоциальногоСтрахованияКлиент.СохранитьФайлXML(ОписаниеФайла);
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьБольничный(Команда)
	ЗаполнитьБольничныйПоДаннымЛисткаНетрудоспособности();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеРеестрыЭЛН(Команда)
	ОтборыСписка = Новый Структура;
	ОтборыСписка.Вставить("ГоловнаяОрганизация", Объект.ГоловнаяОрганизация);
	ОтборыСписка.Вставить("Организация",         Объект.Организация);
	
	ПараметрыСписка = Новый Структура;
	ПараметрыСписка.Вставить("Отбор", ОтборыСписка);
	ПараметрыСписка.Вставить("НомерЛисткаНетрудоспособности", Объект.НомерЛисткаНетрудоспособности);
	
	УникальностьСписка = Объект.НомерЛисткаНетрудоспособности;
	
	ОткрытьФорму("Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ФормаСписка", ПараметрыСписка, , УникальностьСписка);
КонецПроцедуры

#КонецОбласти

#Область ИсключаемыеПериоды

&НаКлиенте
Процедура ИзменитьИсключаемыеПериоды(Команда)
	Если Не ПроверкиБЗККлиентСервер.ПериодСоответствуетТребованиям(
			ЭтотОбъект,
			"Объект",
			"ДатаНачала",
			"ДатаОкончания",
			НСтр("ru = 'нетрудоспособности'")) Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы = ПараметрыВводаИсключаемыхПериодов();
	Обработчик     = Новый ОписаниеОповещения("ПослеВводаИсключаемыхПериодов", ЭтотОбъект);
	ОткрытьФорму("Документ.БольничныйЛист.Форма.ИсключаемыеПериоды", ПараметрыФормы, ЭтотОбъект, , , , Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИсключаемыеПериоды(Команда)
	ОчиститьИсключаемыеПериодыНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ПриостановленияТрудовыхДоговоров

&НаКлиенте
Процедура ИзменитьПриостановленияТрудовыхДоговоров(Команда)
	Если Не ПроверкиБЗККлиентСервер.ПериодСоответствуетТребованиям(
			ЭтотОбъект,
			"Объект",
			"ДатаНачала",
			"ДатаОкончания",
			НСтр("ru = 'нетрудоспособности'")) Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ДатаНачалаСобытия) Тогда
		СообщенияБЗККлиентСервер.СообщитьВФорме(НСтр("ru = 'Не заполнена дата начала нетрудоспособности.'"), "Объект.ДатаНачалаСобытия");
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ГоловнаяОрганизация) Тогда
		СообщенияБЗККлиентСервер.СообщитьВФорме(НСтр("ru = 'Не выбрана организация.'"), "Объект.Организация");
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ФизическоеЛицо) Тогда
		СообщенияБЗККлиентСервер.СообщитьВФорме(НСтр("ru = 'Не выбран сотрудник.'"), "Объект.Сотрудник");
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод) Тогда
		СообщенияБЗККлиентСервер.СообщитьВФорме(НСтр("ru = 'Не определен первый год расчета среднего заработка.'"), "Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод");
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ПериодРасчетаСреднегоЗаработкаВторойГод) Тогда
		СообщенияБЗККлиентСервер.СообщитьВФорме(НСтр("ru = 'Не определен второй год расчета среднего заработка.'"), "Объект.ПериодРасчетаСреднегоЗаработкаВторойГод");
		Возврат;
	КонецЕсли;
	Если Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод > Объект.ПериодРасчетаСреднегоЗаработкаВторойГод Тогда
		СообщенияБЗККлиентСервер.СообщитьВФорме(НСтр("ru = 'Первый год расчета среднего заработка больше второго.'"), "Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод");
		Возврат;
	ИначеЕсли Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод = Объект.ПериодРасчетаСреднегоЗаработкаВторойГод Тогда
		СообщенияБЗККлиентСервер.СообщитьВФорме(НСтр("ru = 'Совпадают годы расчета среднего заработка.'"), "Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод");
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура("АдресСтруктурыБольничного", АдресСтруктурыБольничногоДляФормыПриостановленияТрудовыхДоговоров());
	Обработчик     = Новый ОписаниеОповещения("ПослеВводаПриостановленийТрудовыхДоговоров", ЭтотОбъект, ПараметрыФормы);
	ОткрытьФорму("Документ.БольничныйЛист.Форма.ПриостановленияТрудовыхДоговоров", ПараметрыФормы, ЭтотОбъект, , , , Обработчик);
КонецПроцедуры

#КонецОбласти

#Область БлокировкаИзмененияОбъектов

// БлокировкаИзмененияОбъектов
&НаКлиенте
Процедура Подключаемый_РазблокироватьФормуОбъекта(Команда)
	
	БлокировкаИзмененияОбъектовКлиент.РазблокироватьФормуОбъекта(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры
// Конец БлокировкаИзмененияОбъектов

#КонецОбласти

#Область ИнтеграцияС1СДокументооборотом

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент");
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(
			Команда,
			ЭтотОбъект,
			Объект);
	КонецЕсли;
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ОбновитьПодключаемыеКоманды(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область КонтрольВеденияУчета

// СтандартныеПодсистемы.КонтрольВеденияУчета
&НаКлиенте
Процедура Подключаемый_ОткрытьОтчетПоПроблемам(ЭлементИлиКоманда, НавигационнаяСсылка, СтандартнаяОбработка)
	
	КонтрольВеденияУчетаКлиентБЗК.ОткрытьОтчетПоПроблемамОбъекта(ЭтотОбъект, Объект.Ссылка, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтрольВеденияУчета

#КонецОбласти

#Область Свойства

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ИнициализацияФормы

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	Кэш = Новый Соответствие;
	ВидОплатыЗаСчетРаботодателя = Документы.БольничныйЛист.ВидОплатыЗаСчетРаботодателя(Объект, Кэш);
	ВидОплатыПособия = Документы.БольничныйЛист.ВидОплатыПособия(Объект, Кэш);
	ВидНеоплачиваемогоВремени = Документы.БольничныйЛист.ВидНеоплачиваемогоВремени(Объект, Кэш);
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой");
	
	НастроитьЭлементыДополненияПричиныНетрудоспособности();
	УстановитьДоступностьЭлементовПоПервичномуБольничномуЛисту(ЭтотОбъект);
	УстановитьСвойстваПоляПервичногоБольничногоЛиста(ЭтотОбъект);
	ОбновитьНадписьДнейОсвобожденияОтРаботы();
	УстановитьДоступностьФинансированиеФедеральнымБюджетом(ЭтотОбъект);
	УстановитьСвойстваПоляРезультатаЗаСчетФБ(ЭтотОбъект, Объект.ПрименятьЛьготыПриНачисленииПособия);
	
	ЗаполнитьРеквизитыФормыПоКадровымДаннымСотрудника(КадровыеДанныеСотрудника());
	ЗаполнитьИтоговыеСуммыНачислений();
	
	ГодНачалаСобытия = Год(Объект.ДатаНачалаСобытия);
	
	НДФЛ = Объект.НДФЛ.Итог("Налог") + Объект.НДФЛ.Итог("НалогСПревышения");
	
	ОбновитьГиперссылкуВводаДанныхЛисткаНетрудоспособности();
	ОбновитьСведенияДляФСС();
	
	ОбновитьЭлементыПараметровОплаты();
	
	ПроверитьПриостановленияТрудовыхДоговоров(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область Организации

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	ОбновитьГоловнуюОрганизацию();
	УстановитьФункциональныеОпцииФормы();
	СотрудникПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьГоловнуюОрганизацию()
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Объект.Организация);
	Иначе
		Объект.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Сотрудники

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	
	ПроверитьПодменитьСотрудника();
	
	ЗапланироватьПолноеОбновлениеСведенийДляФСС();
	
	Объект.ПрименятьЛьготыПриНачисленииПособия 	= Ложь;
	Объект.ФинансированиеФедеральнымБюджетом 	= Неопределено;
	
	ЗаполнитьПоКадровымДаннымСотрудника();
	
	ЗаполнитьУсловияИсчисления();
	
	ГодНачалаСобытия = Неопределено;
	
	РассчитатьСреднийЗаработок();
	
	ОбновитьСведенияДляФСС();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПодменитьСотрудника()
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(
		Истина,
		Объект.Сотрудник,
		"ВидЗанятости",
		Объект.ДатаНачалаСобытия);
	Если КадровыеДанныеСотрудников.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ДанныеСотрудника = КадровыеДанныеСотрудников[0];
	Если ДанныеСотрудника.ВидЗанятости = Перечисления.ВидыЗанятости.ВнутреннееСовместительство
		ИЛИ НЕ ЗначениеЗаполнено(ДанныеСотрудника.ВидЗанятости) Тогда
		ОсновнойСотрудник = КадровыйУчет.ОсновнойСотрудникФизическогоЛица(ДанныеСотрудника.ФизическоеЛицо, Объект.Организация, Объект.ДатаНачалаСобытия);
		Если ЗначениеЗаполнено(ОсновнойСотрудник)
			И ОсновнойСотрудник <> Объект.Сотрудник Тогда
			КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ОсновнойСотрудник, "ДатаУвольнения", Объект.ДатаНачалаСобытия);
			Если КадровыеДанныеСотрудников.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(КадровыеДанныеСотрудников[0].ДатаУвольнения)
				ИЛИ (КадровыеДанныеСотрудников[0].ДатаУвольнения>=Объект.ДатаНачалаСобытия) Тогда
				Объект.Сотрудник = ОсновнойСотрудник;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция КадровыеДанныеСотрудника()
	
	ИменаПолей = "ФизическоеЛицо,Подразделение,ДатаУвольнения,ВидЗанятости,ДоляНеполногоРабочегоВремени,РайонныйКоэффициентРФ";
	Результат = Новый Структура(ИменаПолей);
	Результат.Вставить("ЕстьДоговорыГПХ", Ложь);
	
	Если Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		Возврат Результат;
	КонецЕсли;
	ДатаНачалаСобытия = ?(ЗначениеЗаполнено(Объект.ДатаНачалаСобытия), Объект.ДатаНачалаСобытия, ТекущаяДатаСеанса());
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Объект.Сотрудник, ИменаПолей, ДатаНачалаСобытия);
	Если КадровыеДанные.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Результат,КадровыеДанные[0]);
	Результат.ЕстьДоговорыГПХ = КадровыйУчет.ЕстьДоговорыГПХ(КадровыеДанные[0].ФизическоеЛицо, Объект.Организация, ДатаНачалаСобытия);
	Возврат Результат; 
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыФормыПоКадровымДаннымСотрудника(КадровыеДанныеСотрудника)
	ДатаУвольненияСотрудника = КадровыеДанныеСотрудника.ДатаУвольнения;
	ПодразделениеСотрудника  = КадровыеДанныеСотрудника.Подразделение;
	ЕстьДоговорыГПХ = КадровыеДанныеСотрудника.ЕстьДоговорыГПХ;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоКадровымДаннымСотрудника()
	КадровыеДанныеСотрудника = КадровыеДанныеСотрудника();
	
	ЗаполнитьРеквизитыФормыПоКадровымДаннымСотрудника(КадровыеДанныеСотрудника);
	
	Объект.ФизическоеЛицо       = КадровыеДанныеСотрудника.ФизическоеЛицо;
	Объект.ОсновноеМестоРаботы  = КадровыеДанныеСотрудника.ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы;
	Объект.ДоляНеполногоВремени = УчетПособийСоциальногоСтрахования.ДоляНеполногоРабочегоВремени(
		КадровыеДанныеСотрудника.ДоляНеполногоРабочегоВремени);
	Объект.РайонныйКоэффициентРФНаНачалоСобытия = КадровыеДанныеСотрудника.РайонныйКоэффициентРФ;
	
	Объект.СтажЛет                = 1;
	Объект.СтажМесяцев            = 0;
	Объект.СтажДней               = 0;
	Объект.СтажРасширенныйЛет     = 0;
	Объект.СтажРасширенныйМесяцев = 0;
	Объект.СтажРасширенныйДней    = 0;
	
	// Приостановления трудовых договоров.
	ЗаполнитьПриостановленияТрудовыхДоговоров();
КонецПроцедуры

#КонецОбласти

#Область ПричинаНетрудоспособности

&НаСервере
Процедура ПричинаНетрудоспособностиПриИзмененииНаСервере(ЗаполнитьПричинуИСлучайУхода = Ложь)
	
	Если ЗаполнитьПричинуИСлучайУхода Тогда
		ОбменЛисткамиНетрудоспособностиФСС.ЗаполнитьПричинуНетрудоспособностиИСлучайУходаЗаРебенком(Объект);
	КонецЕсли;
	
	Документы.БольничныйЛист.ОчиститьСлучайУходаПриНеобходимости(Объект);
	
	Если Не ОбменЛисткамиНетрудоспособностиФСС.ЭтоКарантинныйЭЛН(
			Объект.ПричинаНетрудоспособности,
			Объект.НомерЛисткаНетрудоспособности) Тогда
		Объект.ЭЛНКарантинПоКоронавирусу = Ложь;
	КонецЕсли;
	
	Кэш = Новый Соответствие;
	ВидОплатыПособия = Документы.БольничныйЛист.ВидОплатыПособия(Объект, Кэш);
	
	ЗаполнитьДатуНачалаПоловиннойОплаты();
	ЗаполнитьПроцентОплатыИОграничениеПособия();
	
	Объект.АвтозаполнениеПериодовОплаты = Истина;
	ЗаполнитьПараметрыОплаты(Неопределено, Кэш);
	
	ГодНачалаСобытия = Неопределено;
	РассчитатьСреднийЗаработок();
	РассчитатьНачисления();
	
	НастроитьЭлементыДополненияПричиныНетрудоспособности();
	ОбновитьНадписьДнейОсвобожденияОтРаботы();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыДополненияПричиныНетрудоспособности()
	
	ПредставлениеПричиныНетрудоспособности = ПредставлениеПричиныНетрудоспособности();
	
	ЭтоУходЗаРебенком = (Объект.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком);
	
	Если ЭтоУходЗаРебенком Тогда
		ТекущаяСтраница = Элементы.СтраницаУточнениеПричиныНет;
		Элементы.КарантинПоКоронавирусу.Видимость = Ложь;
	ИначеЕсли ОбменЛисткамиНетрудоспособностиФСС.ЭтоКарантинныйЭЛН(
			Объект.ПричинаНетрудоспособности,
			Объект.НомерЛисткаНетрудоспособности) Тогда
		ТекущаяСтраница = Элементы.СтраницаУточнениеПричиныКарантин;
		Элементы.КарантинПоКоронавирусу.Видимость = Истина;
	Иначе
		ТекущаяСтраница = Элементы.СтраницаУточнениеПричиныНет;
		Элементы.КарантинПоКоронавирусу.Видимость = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СтраницыУточнениеПричины",
		"ТекущаяСтраница",
		ТекущаяСтраница);
	
	Если ЭтоУходЗаРебенком Тогда
		Элементы.ПредставлениеПричиныНетрудоспособности.МаксимальнаяШирина = 60;
	Иначе
		Элементы.ПредставлениеПричиныНетрудоспособности.МаксимальнаяШирина = 45;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеПричиныНетрудоспособности()
	ДатаНачалаСобытия = Объект.ДатаНачалаСобытия;
	КодПричины        = Объект.КодПричиныНетрудоспособности;
	Причина           = Объект.ПричинаНетрудоспособности;
	СлучайУхода       = Объект.СлучайУходаЗаБольнымРебенком;
	
	ВидимостьПоляВыбора      = Ложь;
	ВидимостьПереключателя01 = Ложь;
	ВидимостьПереключателя02 = Ложь;
	Если КодПричины = "01"
		И УчетПособийСоциальногоСтрахования.ДействуетПорядокНСПЗ_2022(ДатаНачалаСобытия) Тогда
		ВидимостьПереключателя01 = Истина;
	ИначеЕсли КодПричины = "02"
		И УчетПособийСоциальногоСтрахования.ДействуетПорядокНСПЗ_2022(ДатаНачалаСобытия) Тогда
		ВидимостьПереключателя02 = Истина;
	Иначе
		ВидимостьПоляВыбора = Истина;
	КонецЕсли;
	Если Элементы.ПредставлениеПричиныНетрудоспособности.Видимость <> ВидимостьПоляВыбора
		Или Элементы.ПереключательПричиныНетрудоспособности01.Видимость <> ВидимостьПереключателя01
		Или Элементы.ПереключательПричиныНетрудоспособности02.Видимость <> ВидимостьПереключателя02
		Или КодыПричин.Количество() = 0 Тогда
		Элементы.ПредставлениеПричиныНетрудоспособности.Видимость   = ВидимостьПоляВыбора;
		Элементы.ПереключательПричиныНетрудоспособности01.Видимость = ВидимостьПереключателя01;
		Элементы.ПереключательПричиныНетрудоспособности02.Видимость = ВидимостьПереключателя02;
		
		КодыПричин.Очистить();
		ТаблицаКодовПричин = Перечисления.ПричиныНетрудоспособности.ТаблицаВыбораКодовПричин(ДатаНачалаСобытия);
		Для Каждого СтрокаТаблицы Из ТаблицаКодовПричин Цикл
			Код = СтрокаТаблицы.КодПричины;
			Если Код = "09" И Не СтрокаТаблицы.УходЗаРебенком Тогда
				Код = "09*";
			ИначеЕсли Код = "01" И СтрокаТаблицы.ЭтоНСПЗ Тогда
				Код = "01*";
			ИначеЕсли Код = "02" И СтрокаТаблицы.ЭтоНСПЗ Тогда
				Код = "02*";
			КонецЕсли;
			Представление = "(" + СтрокаТаблицы.КодПричины + ") " + СтрокаТаблицы.Представление;
			КодыПричин.Добавить(Код, Представление);
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КодПричины) И ЗначениеЗаполнено(Причина) Тогда
		КодПричины = Перечисления.ПричиныНетрудоспособности.КодПричины(ДатаНачалаСобытия, Причина, СлучайУхода);
	ИначеЕсли ЗначениеЗаполнено(КодПричины) И Не ЗначениеЗаполнено(Причина) Тогда
		ОбменЛисткамиНетрудоспособностиФСС.ЗаполнитьПричинуНетрудоспособностиИСлучайУходаЗаРебенком(Объект);
		Причина     = Объект.ПричинаНетрудоспособности;
		СлучайУхода = Объект.СлучайУходаЗаБольнымРебенком;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КодПричины) Тогда
		// ОбщееЗаболевание или ПоУходуЗаРебенком и не заполнен СлучайУхода.
		Представление = Строка(Причина);
	ИначеЕсли Причина = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком
		И ЗначениеЗаполнено(СлучайУхода) Тогда
		Представление = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПредставлениеСлучая(СлучайУхода, ДатаНачалаСобытия);
	Иначе
		Если КодПричины = "09"
			И Не ЗначениеЗаполнено(СлучайУхода)
			И Причина = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаВзрослым Тогда
			Код = "09*";
		ИначеЕсли КодПричины = "01"
			И Причина = Перечисления.ПричиныНетрудоспособности.Профзаболевание Тогда
			Код = "01*";
		ИначеЕсли КодПричины = "02"
			И Причина = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве Тогда
			Код = "02*";
		Иначе
			Код = КодПричины;
		КонецЕсли;
		Если ВидимостьПереключателя01 Или ВидимостьПереключателя02 Тогда
			Представление = Код;
		Иначе
			ЭлементСписка = КодыПричин.НайтиПоЗначению(Код);
			Если ЭлементСписка <> Неопределено Тогда
				Представление = ЭлементСписка.Представление;
			Иначе
				Представление = КодПричины;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ПредставлениеПричиныНетрудоспособностиДоИзменения = Представление;
	Возврат Представление;
КонецФункции

&НаКлиенте
Процедура ПослеВыбораПричиныНетрудоспособности(ВыбранноеЗначение, ПустойПараметр = Неопределено) Экспорт
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Модифицированность = Истина;
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		ПричинаНетрудоспособностиПриИзмененииНаСервере();
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка")
		И ВыбранноеЗначение <> ПредставлениеПричиныНетрудоспособностиДоИзменения
		И КодыПричин.НайтиПоЗначению(ВыбранноеЗначение) <> Неопределено Тогда
		Модифицированность = Истина;
		Если ВыбранноеЗначение = "09*" Тогда
			Объект.КодПричиныНетрудоспособности = "09";
			Объект.СлучайУходаЗаБольнымРебенком = Неопределено;
			Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПоУходуЗаВзрослым");
			ЗаполнитьПричинуИСлучайУхода = Ложь;
		ИначеЕсли ВыбранноеЗначение = "01*" Тогда
			Объект.КодПричиныНетрудоспособности = "01";
			Объект.СлучайУходаЗаБольнымРебенком = Неопределено;
			Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.Профзаболевание");
			ЗаполнитьПричинуИСлучайУхода = Ложь;
		ИначеЕсли ВыбранноеЗначение = "02*" Тогда
			Объект.КодПричиныНетрудоспособности = "02";
			Объект.СлучайУходаЗаБольнымРебенком = Неопределено;
			Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ТравмаНаПроизводстве");
			ЗаполнитьПричинуИСлучайУхода = Ложь;
		ИначеЕсли ВыбранноеЗначение = "01" Или ВыбранноеЗначение = "02" Тогда
			Объект.КодПричиныНетрудоспособности = ВыбранноеЗначение;
			Объект.СлучайУходаЗаБольнымРебенком = Неопределено;
			Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ОбщееЗаболевание");
			ЗаполнитьПричинуИСлучайУхода = Ложь;
		Иначе
			Объект.КодПричиныНетрудоспособности = ВыбранноеЗначение;
			Объект.ПричинаНетрудоспособности = Неопределено;
			ЗаполнитьПричинуИСлучайУхода = Истина;
		КонецЕсли;
		ПричинаНетрудоспособностиПриИзмененииНаСервере(ЗаполнитьПричинуИСлучайУхода);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ДанныеЛисткаНетрудоспособности

&НаКлиенте
Процедура ПослеВводаДанныхЛисткаНетрудоспособности(РезультатВыбора, ПустойПараметр) Экспорт
	Если ТипЗнч(РезультатВыбора) = Тип("Структура") Тогда
		ОбновитьДанныеЛисткаНетрудоспособностиПослеРедактированияНаСервере(РезультатВыбора);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеЛисткаНетрудоспособностиПослеРедактированияНаСервере(РезультатВыбора)
	ЗаполнитьЗначенияСвойств(Объект, РезультатВыбора, ИменаРеквизитовЛисткаНетрудоспособности());
	
	Если РезультатВыбора.ЗаполнитьБольничный Тогда
		ЗаполнитьБольничныйПоДаннымЛисткаНетрудоспособности();
	КонецЕсли;
	
	НастроитьЭлементыДополненияПричиныНетрудоспособности();
	ОбновитьГиперссылкуВводаДанныхЛисткаНетрудоспособности();
	УстановитьСвойстваПоляПервичногоБольничногоЛиста(ЭтотОбъект);
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБольничныйПоДаннымЛисткаНетрудоспособности()
	Объект.ПериодыУходаЗаРодственниками.Очистить();
	
	ОбменЛисткамиНетрудоспособностиФСС.ЗаполнитьПериодНетрудоспособности(Объект);
	ОбменЛисткамиНетрудоспособностиФСС.ЗаполнитьПричинуНетрудоспособностиИСлучайУходаЗаРебенком(Объект);
	
	Если СведенияОбЭЛН.ЭтоЭЛН И СведенияОбЭЛН.ДоступенИсходныйXML Тогда
		ДанныеЭЛН = ДанныеЭЛНДляЗаполнения();
		ОбменЛисткамиНетрудоспособностиФСС.ЗаполнитьРеквизитыШапкиПоУходу(Объект, ДанныеЭЛН);
		Документы.БольничныйЛист.ЗаполнитьТаблицуУходаЗаРодственниками(Объект, ДанныеЭЛН);
	КонецЕсли;
	
	ОбновитьФормуПослеЗагрузкиЭЛН();
КонецПроцедуры

&НаСервере
Функция ДанныеЭЛНДляЗаполнения()
	// Заполнение из ЭЛН.
	Если СведенияОбЭЛН.ЭтоЭЛН И СведенияОбЭЛН.ДоступенИсходныйXML Тогда
		ТекстXML = РегистрыСведений.СведенияОбЭЛН.ИсходныйXML(
			Объект.НомерЛисткаНетрудоспособности,
			Объект.ГоловнаяОрганизация);
		СтруктураDOM = СериализацияБЗК.СтруктураDOM(ТекстXML);
		ДанныеЭЛН = ОбменЛисткамиНетрудоспособностиФСС.ДанныеЭЛН(СтруктураDOM);
	Иначе
		ДанныеЭЛН = Неопределено;
	КонецЕсли;
	
	// Заполнение из бумажного ЛН.
	Если ДанныеЭЛН = Неопределено Тогда
		ДанныеЭЛН = Новый Структура;
		ДанныеЭЛН.Вставить("АктуальныйФормат", Ложь); // Отключается проверка заполнения даты рождения родственника.
		ПериодыЛечения = ОбменЛисткамиНетрудоспособностиФСС.СоздатьТаблицуПериодовЛеченияРодственников(ДанныеЭЛН);
		ЗаполнитьПериодыЛеченияПоДаннымБумажногоЛН(ПериодыЛечения);
	КонецЕсли;
	
	Возврат ДанныеЭЛН;
КонецФункции

&НаСервере
Процедура ЗаполнитьПериодыЛеченияПоДаннымБумажногоЛН(ПериодыЛечения)
	
	Если Не Перечисления.ПричиныНетрудоспособности.ЭтоУходЗаРодственником(Объект.ПричинаНетрудоспособности) Тогда
		Возврат;
	КонецЕсли;
	
	ПериодыИРежимыЛечения = ПериодыЛечения.СкопироватьКолонки("ДатаНачала, ДатаОкончания, РежимЛечения");
	
	РежимЛечения = Перечисления.РежимыЛечения.НайтиПоСлучаюУхода(Объект.СлучайУходаЗаБольнымРебенком);
	
	Если Не ЗначениеЗаполнено(Объект.КодПричиныНетрудоспособности) Тогда
		Объект.КодПричиныНетрудоспособности = Перечисления.ПричиныНетрудоспособности.КодПричины(
			Объект.ДатаНачалаСобытия,
			Объект.ПричинаНетрудоспособности,
			Объект.СлучайУходаЗаБольнымРебенком);
	КонецЕсли;
	
	Если РежимЛечения <> Перечисления.РежимыЛечения.Стационар
		И Объект.ДатаНачала <= Объект.ПериодНахожденияВСтационареСРебенкомС
		И Объект.ПериодНахожденияВСтационареСРебенкомС <= Объект.ДатаОкончания Тогда
		
		Если Объект.ДатаНачала < Объект.ПериодНахожденияВСтационареСРебенкомС Тогда
			ПериодИРежимЛечения = ПериодыИРежимыЛечения.Добавить();
			ПериодИРежимЛечения.ДатаНачала    = Объект.ДатаНачала;
			ПериодИРежимЛечения.ДатаОкончания = Объект.ПериодНахожденияВСтационареСРебенкомС - 86400;
			ПериодИРежимЛечения.РежимЛечения  = РежимЛечения;
		КонецЕсли;
		
		ДатаОкончанияСтационара = Мин(Объект.ПериодНахожденияВСтационареСРебенкомПо, Объект.ДатаОкончания);
		
		ПериодИРежимЛечения = ПериодыИРежимыЛечения.Добавить();
		ПериодИРежимЛечения.ДатаНачала    = Объект.ПериодНахожденияВСтационареСРебенкомС;
		ПериодИРежимЛечения.ДатаОкончания = ДатаОкончанияСтационара;
		ПериодИРежимЛечения.РежимЛечения  = Перечисления.РежимыЛечения.Стационар;
		
		Если ДатаОкончанияСтационара < Объект.ДатаОкончания Тогда
			ПериодИРежимЛечения = ПериодыИРежимыЛечения.Добавить();
			ПериодИРежимЛечения.ДатаНачала    = ДатаОкончанияСтационара + 86400;
			ПериодИРежимЛечения.ДатаОкончания = Объект.ДатаОкончания;
			ПериодИРежимЛечения.РежимЛечения  = РежимЛечения;
		КонецЕсли;
		
	Иначе
		
		ПериодИРежимЛечения = ПериодыИРежимыЛечения.Добавить();
		ПериодИРежимЛечения.ДатаНачала    = Объект.ДатаНачала;
		ПериодИРежимЛечения.ДатаОкончания = Объект.ДатаОкончания;
		ПериодИРежимЛечения.РежимЛечения  = РежимЛечения;
		
	КонецЕсли;
	
	Для НомерРодственника = 1 По 2 Цикл
		Номер = Формат(НомерРодственника, "ЧГ=");
		ФИО = Объект["ПоУходуФИО" + Номер];
		Если Не ЗначениеЗаполнено(ФИО) Тогда
			Продолжить;
		КонецЕсли;
		СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФИО);
		Для Каждого ПериодИРежимЛечения Из ПериодыИРежимыЛечения Цикл
			СтрокаТаблицы = ПериодыЛечения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПериодИРежимЛечения, "ДатаНачала, ДатаОкончания, РежимЛечения");
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураФИО, "Фамилия, Имя, Отчество");
			СтрокаТаблицы.КодПричины        = Объект.КодПричиныНетрудоспособности;
			СтрокаТаблицы.СлучайУхода       = Объект.СлучайУходаЗаБольнымРебенком;
			СтрокаТаблицы.ФИО               = ФИО;
			СтрокаТаблицы.ВозрастЛет        = Объект["ПоУходуВозрастЛет"       + Номер];
			СтрокаТаблицы.ВозрастМесяцев    = Объект["ПоУходуВозрастМесяцев"   + Номер];
			СтрокаТаблицы.КодСвязи          = Объект["ПоУходуРодственнаяСвязь" + Номер];
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИменаРеквизитовЛисткаНетрудоспособности()
	Возврат
	"ПредоставленДубликатЛисткаНетрудоспособности,
	|МедицинскаяОрганизация,
	|НаименованиеМедицинскойОрганизации,
	|АдресМедицинскойОрганизации,
	|ОГРНМедицинскойОрганизации,
	|ДатаВыдачиЛисткаНетрудоспособности,
	|КодПричиныНетрудоспособности,
	|ДополнительныйКодПричиныНетрудоспособности,
	|ВторойКодПричиныНетрудоспособности,
	|НаименованиеОрганизацииВЛисткеНетрудоспособности,
	|ОсновноеМестоРаботы,
	|НомерЛисткаПоОсновномуМестуРаботы,
	|ДатаИзмененияКодаПричиныНетрудоспособности,
	|ДатаОкончанияПутевки,
	|НомерПутевки,
	|ОГРН_Санатория,
	|ПоУходуВозрастЛет1,
	|ПоУходуВозрастМесяцев1,
	|ПоУходуРодственнаяСвязь1,
	|ПоУходуФИО1,
	|ПоУходуИспользованоДней1,
	|ПоУходуВозрастЛет2,
	|ПоУходуВозрастМесяцев2,
	|ПоУходуРодственнаяСвязь2,
	|ПоУходуФИО2,
	|ПоУходуИспользованоДней2,
	|ПоставленаНаУчетВРанниеСрокиБеременности,
	|КодНарушенияРежима,
	|ДатаНарушенияРежима,
	|ПериодНахожденияВСтационареСРебенкомС,
	|ПериодНахожденияВСтационареСРебенкомПо,
	|ДатаНаправленияВБюроМСЭ,
	|ДатаРегистрацииДокументовМСЭ,
	|ДатаОсвидетельствованияМСЭ,
	|ГруппаИнвалидности,
	|УтратаТрудоспобности,
	|ПрерывистыйМетод,
	|ОсвобождениеДатаНачала1,
	|ОсвобождениеДатаОкончания1,
	|ОсвобождениеДолжностьВрача1,
	|ОсвобождениеФИОВрача1,
	|ОсвобождениеИдентификационныйНомерВрача1,
	|ОсвобождениеФИОВрачаПредседателяВК1,
	|ОсвобождениеДолжностьВрачаПредседателяВК1,
	|ОсвобождениеИдентификационныйНомерВрачаПредседателяВК1,
	|ОсвобождениеДатаНачала2,
	|ОсвобождениеДатаОкончания2,
	|ОсвобождениеДолжностьВрача2,
	|ОсвобождениеФИОВрача2,
	|ОсвобождениеИдентификационныйНомерВрача2,
	|ОсвобождениеФИОВрачаПредседателяВК2,
	|ОсвобождениеДолжностьВрачаПредседателяВК2,
	|ОсвобождениеИдентификационныйНомерВрачаПредседателяВК2,
	|ОсвобождениеДатаНачала3,
	|ОсвобождениеДатаОкончания3,
	|ОсвобождениеДолжностьВрача3,
	|ОсвобождениеФИОВрача3,
	|ОсвобождениеИдентификационныйНомерВрача3,
	|ОсвобождениеФИОВрачаПредседателяВК3,
	|ОсвобождениеДолжностьВрачаПредседателяВК3,
	|ОсвобождениеИдентификационныйНомерВрачаПредседателяВК3,
	|ПриступитьКРаботеС,
	|ДатаНовыйСтатусНетрудоспособного,
	|НовыйСтатусНетрудоспособного,
	|НомерЛисткаПродолжения,
	|УсловияИсчисленияКод1,
	|УсловияИсчисленияКод2,
	|УсловияИсчисленияКод3,
	|ДатаАктаН1,
	|ДатаНачалаРаботы";
КонецФункции

&НаСервере
Процедура ОбновитьГиперссылкуВводаДанныхЛисткаНетрудоспособности()
	
	Если ЗначениеЗаполнено(Объект.НомерЛисткаНетрудоспособности)
		И ЗначениеЗаполнено(Объект.ДатаВыдачиЛисткаНетрудоспособности) Тогда
		ПредставлениеЛисткаНетрудоспособности = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Заполнены данные листка нетрудоспособности %1 от %2'"),
			Объект.НомерЛисткаНетрудоспособности,
			Формат(Объект.ДатаВыдачиЛисткаНетрудоспособности, "ДЛФ=D"));
	Иначе
		ПредставлениеЛисткаНетрудоспособности = НСтр("ru = 'Заполнить данные листка нетрудоспособности'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УсловияИсчисления

&НаСервере
Процедура ЗаполнитьУсловияИсчисления()
	
	Если ЗначениеЗаполнено(ДатаУвольненияСотрудника)
		И Объект.ДатаНачалаСобытия > ДатаУвольненияСотрудника
		И НЕ ЕстьДоговорыГПХ Тогда
		УчетПособийСоциальногоСтрахования.УстановитьУсловиеИсчисления(Объект, "47");
	Иначе
		УчетПособийСоциальногоСтрахования.УдалитьУсловиеИсчисления(Объект, "47");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПриостановленияТрудовыхДоговоров

&НаСервере
Функция АдресСтруктурыБольничногоДляФормыПриостановленияТрудовыхДоговоров()
	ИменаСвойств = 
	"Ссылка, ДатаНачала, ДатаОкончания, ДатаНачалаСобытия,
	|Организация, ГоловнаяОрганизация, Сотрудник, ФизическоеЛицо,
	|ПричинаНетрудоспособности,
	|ДнейПриостановленияТДЗаГод1, ДнейПриостановленияТДЗаГод2,
	|ПериодРасчетаСреднегоЗаработкаПервыйГод, ПериодРасчетаСреднегоЗаработкаВторойГод";
	
	СтруктураБольничного = Новый Структура(ИменаСвойств);
	ЗаполнитьЗначенияСвойств(СтруктураБольничного, Объект, ИменаСвойств);
	
	СтруктураБольничного.Вставить("ПриостановленияТрудовыхДоговоров", Объект.ПриостановленияТрудовыхДоговоров.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураБольничного, УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура ПослеВводаПриостановленийТрудовыхДоговоров(РезультатВыбора, ПараметрыФормы) Экспорт
	Если ТипЗнч(РезультатВыбора) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	Модифицированность = Истина;
	ПослеВводаПриостановленийТрудовыхДоговоровНаСервере(РезультатВыбора, ПараметрыФормы);
КонецПроцедуры

&НаСервере
Процедура ПослеВводаПриостановленийТрудовыхДоговоровНаСервере(Знач РезультатВыбора, Знач ПараметрыФормы)
	УдалитьИзВременногоХранилища(ПараметрыФормы.АдресСтруктурыБольничного);
	Объект.ПриостановленияТрудовыхДоговоров.Очистить();
	Для Каждого Структура Из РезультатВыбора.ПриостановленияТрудовыхДоговоров Цикл
		Период = Объект.ПриостановленияТрудовыхДоговоров.Добавить();
		ЗаполнитьЗначенияСвойств(Период, Структура);
	КонецЦикла;
	ПроверитьПриостановленияТрудовыхДоговоров(Истина);
	РассчитатьНачисления();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПриостановленияТрудовыхДоговоров()
	ПриостановленияТД = УчетПособийСоциальногоСтрахования.ПриостановленияТрудовыхДоговоров(Объект);
	Объект.ПриостановленияТрудовыхДоговоров.Загрузить(ПриостановленияТД);
	ПроверитьПриостановленияТрудовыхДоговоров(Истина);
КонецПроцедуры

&НаСервере
Процедура ПроверитьПриостановленияТрудовыхДоговоров(ИзмененияРазрешены)
	ПриостановленияТД = Объект.ПриостановленияТрудовыхДоговоров.Выгрузить();
	ПриостановленияТД.Колонки.Добавить("Год",         Новый ОписаниеТипов("Число"));
	ПриостановленияТД.Колонки.Добавить("Ошибка",      Новый ОписаниеТипов("Булево"));
	ПриостановленияТД.Колонки.Добавить("ТекстОшибки", Новый ОписаниеТипов("Строка"));
	
	УчетПособийСоциальногоСтрахования.ПроверитьПриостановленияТрудовыхДоговоров(
		Объект,
		ПриостановленияТД,
		ИзмененияРазрешены);
	
	Объект.ПриостановленияТрудовыхДоговоров.Загрузить(ПриостановленияТД);
	
	Если ПриостановленияТД.Найти(Истина, "Ошибка") = Неопределено Тогда
		Элементы.ДнейПриостановленияТД.ЦветТекста = Новый Цвет;
	Иначе
		Элементы.ДнейПриостановленияТД.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
	КонецЕсли;
	
	ДнейПриостановленияТД = Объект.ДнейПриостановленияТДЗаГод1 + Объект.ДнейПриостановленияТДЗаГод2;
КонецПроцедуры

#КонецОбласти

#Область СведенияДляФСС

&НаСервере
Процедура ЗапланироватьПолноеОбновлениеСведенийДляФСС()
	
	ЗапланироватьЧтениеСведенийДляФСС();
	ЗапланироватьЗаполнениеСведенийДляФССЗависящихОтНачислений();
	
КонецПроцедуры

&НаСервере
Процедура ЗапланироватьЧтениеСведенийДляФСС()
	
	ТребуетсяПрочитатьФлажокИспользоватьПрямыеВыплатыФСС = Истина;
	ТребуетсяПрочитатьСведенияОбЭЛН = Истина;
	ТребуетсяПрочитатьРеквизитыЭЛН = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗапланироватьЗаполнениеСведенийДляФССЗависящихОтНачислений()
	
	ЕстьПособияЗаСчетФСС = Неопределено;
	
	ТребуетсяЗаполнитьПараметрыПрямыхВыплатФСС = Истина;
	ТребуетсяЗаполнитьПараметрыОтправкиЭЛН = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСведенияДляФСС()
	
	// Чтение данных из базы данных.
	Если ТребуетсяПрочитатьФлажокИспользоватьПрямыеВыплатыФСС Тогда
		ПрочитатьФлажокИспользоватьПрямыеВыплатыФСС();
	КонецЕсли;
	ПрочитатьСведенияОбЭЛНЕслиТребуется();
	Если ТребуетсяПрочитатьРеквизитыЭЛН Тогда
		ПрочитатьРеквизитыЭЛН();
	КонецЕсли;
	
	// Заполнение вторичных данных.
	Если ТребуетсяЗаполнитьПараметрыПрямыхВыплатФСС Тогда
		ЗаполнитьПараметрыПрямыхВыплатФСС();
	КонецЕсли;
	Если ТребуетсяЗаполнитьПараметрыОтправкиЭЛН Тогда
		ЗаполнитьПараметрыОтправкиЭЛН();
	КонецЕсли;
	
	// Обновление элементов формы.
	ОбновитьЭлементыСЭДО();
	ОбновитьЭлементыЭЛН();
	ОбновитьЭлементыПрямыхВыплатФСС();
	
	// Обновление страницы.
	ВидимостьСтраницы = Элементы.ГруппаПрямыеВыплатыФСС.Видимость Или Элементы.ГруппаЭЛН.Видимость;
	Элементы.СтраницаОтправкаСведенийВФСС.Видимость = ВидимостьСтраницы;
	
	Если ВидимостьСтраницы Тогда
		
		Элементы.ГруппаПомеченНаУдаление.Видимость = Объект.ПометкаУдаления;
		Элементы.ГруппаНеПроведен.Видимость        = Не Объект.Проведен И Не Объект.ПометкаУдаления;
		Элементы.НеЗакрытГруппа.Видимость          = СведенияОбЭЛН.ЭтоЭЛН И Не СведенияОбЭЛН.Закрыт;
		
		Если СведенияОбЭЛН.ЭтоПоследнийБольничный Или Не ЗначениеЗаполнено(Объект.НомерЛисткаНетрудоспособности) Тогда
			Элементы.СсылкиБольничныхЭтогоЭЛН.Видимость = Ложь;
		Иначе
			Если Не Объект.Проведен И Не Объект.ПометкаУдаления Тогда
				Если СведенияОбЭЛН.БольничныйПроведен Тогда
					ЗаголовокНадписи = НСтр("ru = 'Последний проведенный больничный: <a href=""%1"">%2</a>.'");
				Иначе
					ЗаголовокНадписи = НСтр("ru = 'Последний больничный: <a href=""%1"">%2</a>.'");
				КонецЕсли;
			Иначе
				ЗаголовокНадписи = НСтр("ru = 'Данный больничный не является последним для ЭЛН %3.
					|Сведения для ФСС можно изменить в <a href=""%1"">%2</a>.'");
			КонецЕсли;
			ЗаголовокНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ЗаголовокНадписи,
				ПолучитьНавигационнуюСсылку(СведенияОбЭЛН.Больничный),
				СведенияОбЭЛН.БольничныйПредставление,
				Объект.НомерЛисткаНетрудоспособности);
			Элементы.СсылкиБольничныхЭтогоЭЛН.Видимость = Истина;
			Элементы.СсылкиБольничныхЭтогоЭЛН.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ЗаголовокНадписи);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьПособияЗаСчетФСС()
	Если ЕстьПособияЗаСчетФСС = Неопределено Тогда
		ЕстьПособияЗаСчетФСС = ПрямыеВыплатыПособийСоциальногоСтрахования.КоллекцияСодержитПособияЗаСчетФСС(
			Объект.Начисления.Выгрузить(, "Начисление").ВыгрузитьКолонку("Начисление"));
	КонецЕсли;
	Возврат ЕстьПособияЗаСчетФСС;
КонецФункции

&НаСервере
Функция ЭтоНСПЗ()
	Возврат Объект.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве
		Или Объект.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.Профзаболевание;
КонецФункции

#КонецОбласти

#Область СЭДО

&НаСервере
Процедура ОбновитьЭлементыСЭДО()
	// СЭДО по выплате пособий - Только для вступивших в прямые выплаты.
	Если Не ИспользоватьПрямыеВыплатыФСС Тогда
		Элементы.СЭДОГруппа.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	// СЭДО - только для ЭЛН.
	Если Не СведенияОбЭЛН.ЭтоЭЛН Тогда
		Элементы.СЭДОГруппа.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	// СЭДО с 2022 года.
	Если ЗначениеЗаполнено(Объект.ДатаНачалаСобытия)
		И Объект.ДатаНачалаСобытия < '20220101' Тогда
		Элементы.СЭДОГруппа.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.СЭДОГруппа.Видимость = Истина;
	
	ЕстьВходящийЗапрос            = ЗначениеЗаполнено(ВходящийЗапрос);
	ЕстьОтветНаЗапрос             = ЗначениеЗаполнено(ОтветНаЗапрос);
	ЕстьСообщениеОСтраховомСлучае = ЗначениеЗаполнено(СообщениеОСтраховомСлучае);
	Выплачивается                 = Объект.ПособиеВыплачиваетсяФСС И Не СведенияОбЭЛН.Аннулирован;
	
	Элементы.ВходящийЗапросОтсутствуетГруппа.Видимость = Выплачивается И Не ЕстьВходящийЗапрос И Не ЕстьОтветНаЗапрос;
	Элементы.СообщитьОСтраховомСлучаеГруппа.Видимость  = Не ЕстьСообщениеОСтраховомСлучае;
	Элементы.СообщениеОСтраховомСлучае.Видимость       = ЕстьСообщениеОСтраховомСлучае;
	Элементы.ВходящийЗапрос.Видимость                  = ЕстьВходящийЗапрос;
	Элементы.ОтветНаЗапросОтсутствуетГруппа.Видимость  = Не ЕстьОтветНаЗапрос И ЕстьВходящийЗапрос;
	Элементы.ОтветНаЗапросГруппа.Видимость             = ЕстьОтветНаЗапрос;
	
	Если СведенияОбЭЛН.Аннулирован Тогда
		Элементы.АннулированГруппа.Видимость = Истина;
		Если ЗначениеЗаполнено(СведенияОбЭЛН.ДубликатБольничный) Тогда
			Элементы.ДубликатНадпись.Видимость = Истина;
			Элементы.ДубликатНадпись.Заголовок = СтрШаблон(
				НСтр("ru = 'Взамен выдан <a href=""%1"">%2</a>'"),
				ПолучитьНавигационнуюСсылку(СведенияОбЭЛН.ДубликатБольничный),
				СведенияОбЭЛН.ДубликатБольничный);
		ИначеЕсли ЗначениеЗаполнено(СведенияОбЭЛН.ДубликатНомерЛН) Тогда
			Элементы.ДубликатНадпись.Видимость = Истина;
			Элементы.ДубликатНадпись.Заголовок = СтрШаблон(НСтр("ru = 'Взамен выдан ЭЛН № %1'"), СведенияОбЭЛН.ДубликатНомерЛН);
		Иначе
			Элементы.ДубликатНадпись.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.АннулированГруппа.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрямыеВыплатыФСС

&НаСервере
Процедура ПрочитатьФлажокИспользоватьПрямыеВыплатыФСС()
	
	ТребуетсяПрочитатьФлажокИспользоватьПрямыеВыплатыФСС = Ложь;
	
	ИспользоватьПрямыеВыплатыФСС = ПрямыеВыплатыПособийСоциальногоСтрахования.ПособиеПлатитУчастникПилотногоПроекта(
		Объект.Организация,
		Объект.ПериодРегистрации,
		Объект.ЭЛНКарантинПоКоронавирусу);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыПрямыхВыплатФСС()
	
	ТребуетсяЗаполнитьПараметрыПрямыхВыплатФСС = Ложь;
	
	Объект.ПособиеВыплачиваетсяФСС = ИспользоватьПрямыеВыплатыФСС
		И ЗначениеЗаполнено(Объект.НомерЛисткаНетрудоспособности)
		И ЕстьПособияЗаСчетФСС();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыПрямыхВыплатФСС()
	
	Элементы.ГруппаПрямыеВыплатыФСС.Видимость = ИспользоватьПрямыеВыплатыФСС;
	
	Если ИспользоватьПрямыеВыплатыФСС Тогда
		ПрямыеВыплатыПособийСоциальногоСтрахования.ОбновитьНадписьВБольничном(
			Элементы.СсылкиПрямыхВыплатФСС,
			Объект.Ссылка,
			Объект.ПособиеВыплачиваетсяФСС И Не СведенияОбЭЛН.Аннулирован);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСведенияДляПрямыхВыплатФСС()
	Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыЗаписи = Новый Структура("РежимЗаписи, ИмяПроцедурыПослеЗаписи");
		ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись;
		ПараметрыЗаписи.ИмяПроцедурыПослеЗаписи = "ОткрытьЗаявлениеСотрудникаНаВыплатуПособия";
		Записать(ПараметрыЗаписи);
	Иначе
		ОткрытьЗаявлениеСотрудникаНаВыплатуПособия(Неопределено, Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаявлениеСотрудникаНаВыплатуПособия(ОбъектЗаписан, ПараметрыЗаписи) Экспорт
	ПрямыеВыплатыПособийСоциальногоСтрахованияКлиент.ОткрытьЗаявлениеСотрудникаПоОснованию(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеСведенияДляПрямыхВыплатФСС()
	ОтборыСписка = Новый Структура;
	ОтборыСписка.Вставить("ГоловнаяОрганизация",           Объект.ГоловнаяОрганизация);
	ОтборыСписка.Вставить("Организация",                   Объект.Организация);
	ОтборыСписка.Вставить("Сотрудник",                     Объект.Сотрудник);
	ОтборыСписка.Вставить("НомерЛисткаНетрудоспособности", Объект.НомерЛисткаНетрудоспособности);
	
	ПараметрыСписка = Новый Структура;
	ПараметрыСписка.Вставить("Отбор", ОтборыСписка);
	
	УникальностьСписка = Объект.НомерЛисткаНетрудоспособности;
	
	ОткрытьФорму("Документ.ЗаявлениеСотрудникаНаВыплатуПособия.ФормаСписка", ПараметрыСписка, , УникальностьСписка);
КонецПроцедуры

#КонецОбласти

#Область ЭЛН

&НаКлиенте
Процедура ПолучитьЭЛНИзФССПослеОткрытияФормы()
	Если Не РазрешеноПолучениеИзФСС() Тогда
		Возврат;
	КонецЕсли;
	Результат = ПолучитьИзФССНаСервере();
	Если Результат.БольничныйЗаполнен Тогда
		ПослеУспешнойЗагрузкиЭЛН();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачатьПолучениеДанныхИзФСС(ЗапросДляПолученияЭЛН)
	Если ЗапросДляПолученияЭЛН = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Подписание и отправка запроса, указание на обработчик расшифровки ответа.
	Оповещение = Новый ОписаниеОповещения("ПолучитьДанныеИзФССЗавершение", ЭтотОбъект);
	ЭлектронныйДокументооборотСФССКлиент.ПолучитьДанныеЭЛНИзФСС(Оповещение, ЗапросДляПолученияЭЛН);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеИзФССЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбменВыполненУспешно = ЗагрузитьОтветСервисаФСС(Результат.АдресРасшифрованногоОтветаSOAP, Ложь);
	Если ОбменВыполненУспешно Тогда
		ПодписьПрошлаПроверку = (Результат.ПодписьВалидна <> Ложь);
		Если ПодписьПрошлаПроверку Тогда
			ПараметрыЗаписи = Новый Структура;
			ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
			ПараметрыЗаписи.Вставить("ОчиститьСообщения", Ложь);
			Записать(ПараметрыЗаписи);
		КонецЕсли;
		ПослеУспешнойЗагрузкиЭЛН();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеУспешнойЗагрузкиЭЛН()
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Загружены данные ЛН №%1.'"),
		Объект.НомерЛисткаНетрудоспособности);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Данные ЭЛН загружены из ФСС'"), , ТекстОповещения, БиблиотекаКартинок.Успешно32);
КонецПроцедуры

&НаКлиенте
Функция РазрешеноПолучениеИзФСС()
	Если Не ЗначениеЗаполнено(Объект.ГоловнаяОрганизация) Тогда
		СообщенияБЗККлиентСервер.СообщитьВФорме(НСтр("ru = 'Не выбрана организация.'"), "Объект.Организация");
		Возврат Ложь;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.НомерЛисткаНетрудоспособности) Тогда
		СообщенияБЗККлиентСервер.СообщитьВФорме(НСтр("ru = 'Не заполнен номер листка нетрудоспособности.'"), "Объект.НомерЛисткаНетрудоспособности");
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаСервере
Функция ПолучитьИзФССНаСервере()
	Результат = Новый Структура("БольничныйЗаполнен, ЗапросДляПолученияЭЛН");
	Результат.БольничныйЗаполнен = Ложь;
	
	ПроверятьВозможностьЗагрузки = Истина;
	ТекстXML = РегистрыСведений.СведенияОбЭЛН.ИсходныйXML(
		Объект.НомерЛисткаНетрудоспособности,
		Объект.ГоловнаяОрганизация,
		ПроверятьВозможностьЗагрузки);
	Если ЗначениеЗаполнено(ТекстXML) Тогда
		Адрес = ПоместитьВоВременноеХранилище(ТекстXML);
		Результат.БольничныйЗаполнен = ЗагрузитьОтветСервисаФСС(Адрес, Ложь);
	КонецЕсли;
	
	Если Не Результат.БольничныйЗаполнен Тогда
		// Формирование параметров запроса к сервису получения ЭЛН.
		Результат.ЗапросДляПолученияЭЛН = ВыгрузитьЗапросДляПолученияЭЛН();
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ВыгрузитьЗапросДляПолученияЭЛН()
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		СообщенияБЗККлиентСервер.СообщитьВФорме(НСтр("ru = 'Не выбрана организация.'"), "Организация", "Объект");
		Возврат Неопределено;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		СообщенияБЗККлиентСервер.СообщитьВФорме(НСтр("ru = 'Не выбран сотрудник.'"), "Сотрудник", "Объект");
		Возврат Неопределено;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.НомерЛисткаНетрудоспособности) Тогда
		Текст = НСтр("ru = 'Не заполнен номер листка нетрудоспособности.'");
		СообщенияБЗККлиентСервер.СообщитьВФорме(Текст, "НомерЛисткаНетрудоспособности", "Объект");
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбменЛисткамиНетрудоспособностиФСС.ВыгрузитьЗапросДляПолученияЭЛН(Объект);
КонецФункции

&НаСервере
Функция ЗагрузитьОтветСервисаФСС(Знач АдресРасшифрованногоОтветаSOAP, Знач ЗагрузкаИзФайла)
	Документ = РеквизитФормыВЗначение("Объект");
	
	РезультатОбмена = ОбменЛисткамиНетрудоспособностиФСС.ЗагрузитьОтветСервисаФСС(
		Документ,
		"getPrivateLNData",
		АдресРасшифрованногоОтветаSOAP,
		ЗагрузкаИзФайла);
	ОбменВыполненУспешно = Не РезультатОбмена.Отказ;
	
	Если ОбменВыполненУспешно Тогда
		ЗначениеВРеквизитФормы(Документ, "Объект");
		ОбновитьФормуПослеЗагрузкиЭЛН();
		Модифицированность = Истина;
	КонецЕсли;
	
	Возврат ОбменВыполненУспешно;
КонецФункции

&НаСервере
Процедура ОбновитьФормуПослеЗагрузкиЭЛН()
	Документы.БольничныйЛист.ОчиститьСлучайУходаПриНеобходимости(Объект);
	ЗаполнитьПериодРасчетаСреднегоЗаработка();
	ЗапланироватьПолноеОбновлениеСведенийДляФСС();
	ЗаполнитьПоПервичномуБольничномуЛисту();
	ПричинаНетрудоспособностиПриИзмененииНаСервере();
	ЯвляетсяПродолжениемБолезниПриИзмененииНаСервере();
	ДатаНачалаПриИзмененииНаСервере();
	ДатаОкончанияПриИзмененииНаСервере();
	ОбновитьГиперссылкуВводаДанныхЛисткаНетрудоспособности();
	ОбновитьСведенияДляФСС();
	ПроверитьПриостановленияТрудовыхДоговоров(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайлаЭЛН(ОписаниеФайла, ПустойПараметр) Экспорт
	Если ОписаниеФайла = Неопределено Или Не ЗначениеЗаполнено(ОписаниеФайла.Хранение) Тогда
		Возврат;
	КонецЕсли;
	ОчиститьСообщения();
	
	Попытка
		ФайлЗагружен = ЗагрузитьОтветСервисаФСС(ОписаниеФайла.Хранение, Истина);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Кратко = СтрШаблон(
			НСтр("ru = 'При загрузке ЭЛН из файла возникла ошибка: ""%1"".'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		Подробно = СтрШаблон(
			НСтр("ru = 'Ошибка загрузки файла ""%1"":
				|%2
				|
				|Вероятно, файл не соответствует спецификации ответа веб-сервиса ФСС ЭЛН.'"), 
			ОписаниеФайла.Имя,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ИнформированиеПользователяКлиент.Предупредить(Кратко, Подробно, НСтр("ru = 'Ошибка загрузки ЭЛН из файла'"));
		ФайлЗагружен = Ложь;
	КонецПопытки;
	Если ФайлЗагружен Тогда
		Записать(Новый Структура("ОчиститьСообщения", Ложь));
		ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Загружены данные ЛН №%1.'"),
			Объект.НомерЛисткаНетрудоспособности);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Данные ЭЛН загружены из ФСС'"), , ТекстОповещения, БиблиотекаКартинок.Успешно32);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеФайлаЭЛН(Знач НомерЛН, Знач ГоловнаяОрганизация, Знач ИдентификаторФормы)
	Возврат ОбменЛисткамиНетрудоспособностиФСС.ОписаниеФайлаЭЛН(НомерЛН, ГоловнаяОрганизация, ИдентификаторФормы);
КонецФункции

&НаСервере
Процедура ПередЗаписьюНаСервереЭЛН(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПрочитатьСведенияОбЭЛНЕслиТребуется();
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЭтоПоследнийБольничныйЭЛН", СведенияОбЭЛН.ЭтоПоследнийБольничныйЭЛН);
	
	Если СведенияОбЭЛН.ЭтоПоследнийБольничныйЭЛН Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ОтправитьЭЛН", ОтправитьЭЛН);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ИсправлениеЭЛН", ИсправлениеЭЛН);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("КодПричиныИсправленияЭЛН", КодПричиныИсправленияЭЛН);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ОписаниеПричиныИсправленияЭЛН", ОписаниеПричиныИсправленияЭЛН);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервереЭЛН(Отказ, ПроверяемыеРеквизиты)
	
	Если ОтправитьЭЛН И ИсправлениеЭЛН И СведенияОбЭЛН.ЭтоПоследнийБольничныйЭЛН Тогда
		Если Не ЗначениеЗаполнено(КодПричиныИсправленияЭЛН) Тогда
			Текст = НСтр("ru = 'Не заполнен код причины исправления ЭЛН'");
			СообщенияБЗККлиентСервер.СообщитьОбОшибкеВФорме(Отказ, Текст, "КодПричиныИсправленияЭЛН");
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ОписаниеПричиныИсправленияЭЛН) Тогда
			Текст = НСтр("ru = 'Не заполнено описание причины исправления ЭЛН'");
			СообщенияБЗККлиентСервер.СообщитьОбОшибкеВФорме(Отказ, Текст, "ОписаниеПричиныИсправленияЭЛН");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСведенияОбЭЛНЕслиТребуется()
	Если Не ТребуетсяПрочитатьСведенияОбЭЛН Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяПрочитатьСведенияОбЭЛН = Ложь;
	СведенияОбЭЛН = СведенияОбЭЛН(Объект.НомерЛисткаНетрудоспособности, Объект.ГоловнаяОрганизация);
	
	Элементы.КодПричиныИсправленияЭЛН.Подсказка = НаименованиеПричиныИсправленияЭЛН(ЭтотОбъект);
	
	ЭтоПоследний = Не ЗначениеЗаполнено(СведенияОбЭЛН.Больничный) Или СведенияОбЭЛН.Больничный = Объект.Ссылка;
	Закрыт = СтрНачинаетсяС(Объект.НомерЛисткаНетрудоспособности, "9990")
		Или (СведенияОбЭЛН.СостояниеФСС <> Перечисления.СостоянияЭЛНВФСС.Открыт
			И СведенияОбЭЛН.СостояниеФСС <> Перечисления.СостоянияЭЛНВФСС.Продлен
			И СведенияОбЭЛН.СостояниеФСС <> Перечисления.СостоянияЭЛНВФСС.НаправленНаМСЭ
			И СведенияОбЭЛН.СостояниеФСС <> Перечисления.СостоянияЭЛНВФСС.ДополненДаннымиМСЭ);
	
	СведенияОбЭЛН.Вставить("ЭтоПоследнийБольничный", ЭтоПоследний);
	СведенияОбЭЛН.Вставить("ЭтоПоследнийБольничныйЭЛН", СведенияОбЭЛН.ЭтоЭЛН И ЭтоПоследний);
	СведенияОбЭЛН.Вставить("Закрыт", Закрыт);
	СведенияОбЭЛН.Вставить("ЭтоЗакрытыйЭЛН", СведенияОбЭЛН.ЭтоЭЛН И Закрыт);
	
	ВходящийЗапрос            = СведенияОбЭЛН.ВходящийЗапрос;
	ОтветНаЗапрос             = СведенияОбЭЛН.ОтветНаЗапрос;
	СообщениеОСтраховомСлучае = СведенияОбЭЛН.СообщениеОСтраховомСлучае;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОбЭЛН(НомерЛН, ГоловнаяОрганизация) Экспорт
	Результат = Новый Структура(
	"ДоступенИсходныйXML,
	|СостояниеФСС,
	|Аннулирован,
	|ДубликатНомерЛН,
	|ДубликатБольничный,
	|ДатаНачала,
	|ДатаОкончания,
	|ЭтоЭЛН,
	|ИзмененияПринятыФСС,
	|ТребуетсяРеестрЭЛН,
	|Исправление,
	|КодПричиныИсправления,
	|ОписаниеПричиныИсправления,
	|Больничный,
	|БольничныйПроведен,
	|БольничныйПредставление,
	|ВходящийЗапрос,
	|ОтветНаЗапрос,
	|СообщениеОСтраховомСлучае,
	|ПодготовленныйРеестр,
	|ПодготовленныйРеестрНомер,
	|ПодготовленныйРеестрДата,
	|ПринятыйРеестр,
	|ПринятыйРеестрНомер,
	|ПринятыйРеестрДата");
	
	УстановитьПривилегированныйРежим(Истина);
	Если ЗначениеЗаполнено(НомерЛН)
		И ЗначениеЗаполнено(ГоловнаяОрганизация)
		И ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияОбЭЛН.ДоступенИсходныйXML КАК ДоступенИсходныйXML,
		|	СведенияОбЭЛН.ДоступенИсходныйXML
		|		ИЛИ СведенияОбЭЛН.Хеш <> """" КАК ЭтоЭЛН,
		|	СведенияОбЭЛН.СостояниеФСС КАК СостояниеФСС,
		|	СведенияОбЭЛН.ПериодНетрудоспособностиНачало КАК ДатаНачала,
		|	СведенияОбЭЛН.ПериодНетрудоспособностиОкончание КАК ДатаОкончания,
		|	СведенияОбЭЛН.ИзмененияПринятыФСС КАК ИзмененияПринятыФСС,
		|	СведенияОбЭЛН.ТребуетсяРеестрЭЛН КАК ТребуетсяРеестрЭЛН,
		|	СведенияОбЭЛН.Исправление КАК Исправление,
		|	СведенияОбЭЛН.КодПричиныИсправления КАК КодПричиныИсправления,
		|	СведенияОбЭЛН.ОписаниеПричиныИсправления КАК ОписаниеПричиныИсправления,
		|	СведенияОбЭЛН.Больничный КАК Больничный,
		|	БольничныйЛист.Проведен КАК БольничныйПроведен,
		|	БольничныйЛист.Представление КАК БольничныйПредставление,
		|	СведенияОбЭЛН.ВходящийЗапрос КАК ВходящийЗапрос,
		|	СведенияОбЭЛН.ОтветНаЗапрос КАК ОтветНаЗапрос,
		|	СведенияОбЭЛН.СообщениеОСтраховомСлучае КАК СообщениеОСтраховомСлучае,
		|	СведенияОбЭЛН.ПодготовленныйКОтправкеРеестр КАК ПодготовленныйРеестр,
		|	Подготовленный.Номер КАК ПодготовленныйРеестрНомер,
		|	Подготовленный.Дата КАК ПодготовленныйРеестрДата,
		|	СведенияОбЭЛН.ПринятыйРеестр КАК ПринятыйРеестр,
		|	Принятый.Номер КАК ПринятыйРеестрНомер,
		|	Принятый.Дата КАК ПринятыйРеестрДата,
		|	ДубликатЭЛН.НомерЛисткаНетрудоспособности КАК ДубликатНомерЛН,
		|	ДубликатЭЛН.Больничный КАК ДубликатБольничный
		|ИЗ
		|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК БольничныйЛист
		|		ПО СведенияОбЭЛН.Больничный = БольничныйЛист.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем КАК Подготовленный
		|		ПО СведенияОбЭЛН.ПодготовленныйКОтправкеРеестр = Подготовленный.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем КАК Принятый
		|		ПО СведенияОбЭЛН.ПринятыйРеестр = Принятый.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбЭЛН КАК ДубликатЭЛН
		|		ПО СведенияОбЭЛН.НомерЛисткаНетрудоспособности = ДубликатЭЛН.НомерЗаменяемогоЛН
		|ГДЕ
		|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности = &НомерЛН
		|	И СведенияОбЭЛН.ГоловнаяОрганизация = &ГоловнаяОрганизация";
		Запрос.УстановитьПараметр("НомерЛН", НомерЛН);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
		Таблица = Запрос.Выполнить().Выгрузить();
		Если Таблица.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(Результат, Таблица[0]);
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.ЭтоЭЛН = Неопределено Тогда
		Результат.ЭтоЭЛН              = Ложь;
		Результат.ДоступенИсходныйXML = Ложь;
		Результат.ИзмененияПринятыФСС = Ложь;
		Результат.ТребуетсяРеестрЭЛН  = Ложь;
		Результат.Исправление         = Ложь;
		Результат.КодПричиныИсправления      = "";
		Результат.ОписаниеПричиныИсправления = "";
	КонецЕсли;
	
	Если Результат.Больничный = Неопределено Тогда
		Поля = "Ссылка, Проведен, Представление";
		Последний = Документы.БольничныйЛист.ПоследнийДокументВЦепочкеИсправлений(НомерЛН, ГоловнаяОрганизация, , Поля);
		Если Последний <> Неопределено Тогда
			Результат.Больничный              = Последний.Ссылка;
			Результат.БольничныйПроведен      = Последний.Проведен;
			Результат.БольничныйПредставление = Последний.Представление;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат.Больничный) Тогда
		Результат.Больничный              = Документы.БольничныйЛист.ПустаяСсылка();
		Результат.БольничныйПроведен      = Ложь;
		Результат.БольничныйПредставление = "";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Результат.ПодготовленныйРеестр) Тогда
		Результат.ПодготовленныйРеестр      = Документы.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ПустаяСсылка();
		Результат.ПодготовленныйРеестрНомер = "";
		Результат.ПодготовленныйРеестрДата  = '00010101';
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Результат.ПринятыйРеестр) Тогда
		Результат.ПринятыйРеестр      = Документы.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ПустаяСсылка();
		Результат.ПринятыйРеестрНомер = "";
		Результат.ПринятыйРеестрДата  = '00010101';
	КонецЕсли;
	
	Результат.Аннулирован = Результат.ЭтоЭЛН И Результат.СостояниеФСС = Перечисления.СостоянияЭЛНВФСС.Аннулирован;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ПрочитатьРеквизитыЭЛН()
	ТребуетсяПрочитатьРеквизитыЭЛН = Ложь;
	ОтправитьЭЛН                   = СведенияОбЭЛН.ТребуетсяРеестрЭЛН И Не ЗначениеЗаполнено(ВходящийЗапрос);
	ИсправлениеЭЛН                 = СведенияОбЭЛН.Исправление;
	КодПричиныИсправленияЭЛН       = СведенияОбЭЛН.КодПричиныИсправления;
	ОписаниеПричиныИсправленияЭЛН  = СведенияОбЭЛН.ОписаниеПричиныИсправления;
	ИсправлениеЭЛНЧислом           = Число(ИсправлениеЭЛН);
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДанныеПринятогоРеестраЭЛН()
	Если СведенияОбЭЛН.Свойство("ДанныеПринятогоРеестра") Тогда
		Возврат; // Данные уже подготовлены и закэшированы.
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбЭЛН.ПринятыйРеестр) Тогда
		ДанныеПринятогоРеестра = ОбменЛисткамиНетрудоспособностиФСС.ДанныеРеестраВЧастиБольничногоОтправляемыеВФСС(
			СведенияОбЭЛН.ПринятыйРеестр,
			Объект.НомерЛисткаНетрудоспособности);
	Иначе
		ДанныеПринятогоРеестра = ОбменЛисткамиНетрудоспособностиФСС.СтруктураДанныхРеестровВЧастиБольничного();
	КонецЕсли;
	
	СведенияОбЭЛН.Вставить("ДанныеПринятогоРеестра", ДанныеПринятогоРеестра);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыОтправкиЭЛН()
	ТребуетсяЗаполнитьПараметрыОтправкиЭЛН = Ложь;
	
	Если Не СведенияОбЭЛН.ЭтоЭЛН Тогда
		// По бумажному ЛН часть работодателя заполняется на бумаге.
		ОтправитьЭЛН   = Ложь;
		ИсправлениеЭЛН = Ложь;
		
	ИначеЕсли СтрНачинаетсяС(Объект.НомерЛисткаНетрудоспособности, "9990") Тогда
		// Для 65+ не требуется отправка реестров ЭЛН.
		ОтправитьЭЛН   = Ложь;
		ИсправлениеЭЛН = Ложь;
		
	ИначеЕсли Не ЕстьПособияЗаСчетФСС() Тогда
		// Если пособие не назначается то сведения для ЭЛН направлять не нужно.
		// Фонд не требует представления документов, если не было исчислено пособие.
		ОтправитьЭЛН   = Ложь;
		ИсправлениеЭЛН = Ложь;
		
	ИначеЕсли Не ЭтоНСПЗ() Тогда
		// Для обычных пособий сдаваемых в электронной форме не требуется отправлять сведения об ЭЛН,
		// т.к. данные для ЭЛН заполняются из других источников.
		ОтправитьЭЛН   = Ложь;
		ИсправлениеЭЛН = Ложь;
		
	ИначеЕсли ЗначениеЗаполнено(ВходящийЗапрос) Тогда
		// Для пособий отправляемых через СЭДО не требуется отправлять сведения об ЭЛН,
		// т.к. данные для ЭЛН заполняются из данных ответа на запрос СЭДО.
		ОтправитьЭЛН   = Ложь;
		ИсправлениеЭЛН = Ложь;
		
	ИначеЕсли Не ЗначениеЗаполнено(СведенияОбЭЛН.ПринятыйРеестр) Тогда
		// Требуется первичная отправка ЭЛН.
		ОтправитьЭЛН   = Истина;
		ИсправлениеЭЛН = Ложь;
		
	Иначе
		
		ПодготовитьДанныеПринятогоРеестраЭЛН();
		Если СведенияОбЭЛН.ДанныеПринятогоРеестра.ОсновноеМестоРаботы = Неопределено Тогда
			ИзменилисьДанные = Истина; // Нештатная ситуация - строка ЭЛН исчезла из принятого реестра.
		Иначе
			ДанныеБольничного = ОбменЛисткамиНетрудоспособностиФСС.ДанныеБольничногоОтправляемыеВФСС(Объект);
			ИзменилисьДанные = Не ОбщегоНазначенияБЗК.ЗначенияСовпадают(СведенияОбЭЛН.ДанныеПринятогоРеестра, ДанныеБольничного);
		КонецЕсли;
		
		ОтправитьЭЛН   = ИзменилисьДанные;
		ИсправлениеЭЛН = ИзменилисьДанные;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыЭЛН()
	
	Элементы.ПодменюЭЛНВыгрузитьФайл.Видимость           = СведенияОбЭЛН.ДоступенИсходныйXML;
	Элементы.ПодменюЭЛНПерезаполнитьБольничный.Видимость = СведенияОбЭЛН.ДоступенИсходныйXML;
	
	ЕстьПраво    = ПравоДоступа("Просмотр", Метаданные.Документы.РеестрДанныхЭЛНЗаполняемыхРаботодателем);
	ЭтоПоследний = СведенияОбЭЛН.ЭтоПоследнийБольничныйЭЛН И Не СведенияОбЭЛН.Аннулирован;
	
	Элементы.ГруппаЭЛН.Видимость = ЭтоПоследний Или (ЕстьПраво И СведенияОбЭЛН.ЭтоЭЛН);
	Если Не Элементы.ГруппаЭЛН.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.КодПричиныИсправленияЭЛН.Подсказка = НаименованиеПричиныИсправленияЭЛН(ЭтотОбъект);
	
	ЕстьПодготовленный = ЗначениеЗаполнено(СведенияОбЭЛН.ПодготовленныйРеестр) И СведенияОбЭЛН.ПринятыйРеестр <> СведенияОбЭЛН.ПодготовленныйРеестр;
	ЕстьПринятый       = ЗначениеЗаполнено(СведенияОбЭЛН.ПринятыйРеестр);
	ЕстьРеестр         = (ЕстьПодготовленный Или ЕстьПринятый);
	
	Если ЕстьРеестр Или (ЕстьПраво И Не СведенияОбЭЛН.Аннулирован) Тогда
		Если ЕстьПодготовленный Или ЕстьПринятый Тогда
			Если ЕстьПринятый Тогда
				ЗаголовокНадписи = НСтр("ru = 'Последний принятый реестр ЭЛН: <a href=""ПринятыйРеестрЭЛН"">№ %1 от %2</a>'");
				Если ЕстьПодготовленный Тогда
					ЗаголовокНадписи = ЗаголовокНадписи + "   " + НСтр("ru = 'Подготовленный: <a href=""ПодготовленныйРеестрЭЛН"">№ %3 от %4</a>'");
				КонецЕсли;
			Иначе
				ЗаголовокНадписи = НСтр("ru = 'Последний подготовленный реестр ЭЛН: <a href=""ПодготовленныйРеестрЭЛН"">№ %3 от %4</a>'");
			КонецЕсли;
			ЗаголовокНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ЗаголовокНадписи,
				СведенияОбЭЛН.ПринятыйРеестрНомер,
				Формат(СведенияОбЭЛН.ПринятыйРеестрДата, "ДЛФ=D"),
				СведенияОбЭЛН.ПодготовленныйРеестрНомер,
				Формат(СведенияОбЭЛН.ПодготовленныйРеестрДата, "ДЛФ=D"));
		Иначе
			ЗаголовокНадписи = НСтр("ru = 'Для этого ЭЛН еще не создан реестр ЭЛН'");
		КонецЕсли;
		Элементы.СсылкиРеестровЭЛН.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ЗаголовокНадписи);
		Элементы.ГруппаСсылкиРеестровЭЛН.Видимость = Истина;
	Иначе
		Элементы.ГруппаСсылкиРеестровЭЛН.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаОтправитьПервичныйЭЛН.Видимость   = ЭтоПоследний И Не ЕстьПринятый;
	Элементы.ГруппаОтправитьИсправлениеЭЛН.Видимость = ЭтоПоследний И ЕстьПринятый;
	Элементы.ГруппаПричинаИсправленияЭЛН.Видимость   = ЭтоПоследний И ОтправитьЭЛН И ИсправлениеЭЛН;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НаименованиеПричиныИсправленияЭЛН(Форма)
	ЭлементСписка = Форма.Элементы.КодПричиныИсправленияЭЛН.СписокВыбора.НайтиПоЗначению(Форма.КодПричиныИсправленияЭЛН);
	Если ЭлементСписка <> Неопределено Тогда
		Если КодСимвола(ЭлементСписка.Представление, 3) = КодСимвола(".") Тогда
			Возврат СокрЛП(Сред(ЭлементСписка.Представление, 4));
		Иначе
			Возврат СокрЛП(ЭлементСписка.Представление)
		КонецЕсли;
	КонецЕсли;
	Возврат "";
КонецФункции

&НаСервере
Процедура ОтправитьЭЛНПриИзмененииНаСервере()
	ОбновитьЭлементыЭЛН();
КонецПроцедуры

&НаСервере
Процедура ИсправлениеЭЛНПриИзмененииНаСервере()
	ОтправитьЭЛН = ИсправлениеЭЛН;
	ИсправлениеЭЛНЧислом = Число(ИсправлениеЭЛН);
	ОбновитьЭлементыЭЛН();
КонецПроцедуры

&НаСервере
Процедура ИсправлениеЭЛНЧисломПриИзмененииНаСервере()
	ОтправитьЭЛН = Истина;
	ИсправлениеЭЛН = Булево(ИсправлениеЭЛНЧислом);
	ОбновитьЭлементыЭЛН();
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЯвляетсяПродолжениемБолезниПриИзмененииНаСервере()
	
	Если НЕ Объект.ЯвляетсяПродолжениемБолезни Тогда
		
		Объект.ПервичныйБольничныйЛист = Документы.БольничныйЛист.ПустаяСсылка();
		Объект.НомерПервичногоЛисткаНетрудоспособности = "";
		УстановитьДоступностьЭлементовПоПервичномуБольничномуЛисту(ЭтотОбъект);
		
	КонецЕсли; 
	УстановитьСвойстваПоляПервичногоБольничногоЛиста(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементовПоПервичномуБольничномуЛисту(Форма)
	
	ИменаЭлементов = Новый Массив;
	ИменаЭлементов.Добавить("ПроцентОплатыБезЛьгот");
	ИменаЭлементов.Добавить("ОграничениеПособияБезЛьгот");
	ИменаЭлементов.Добавить("ПрименятьЛьготыПриНачисленииПособия");
	ИменаЭлементов.Добавить("ФинансированиеФедеральнымБюджетом");
	ИменаЭлементов.Добавить("ДатаНачала");
	ИменаЭлементов.Добавить("ДатаНачалаСобытия");
	ИменаЭлементов.Добавить("ПроцентОплаты");
	ИменаЭлементов.Добавить("ОграничениеПособия");
	ИменаЭлементов.Добавить("РайонныйКоэффициентРФНаНачалоСобытия");

	ДоступностьЭлементов = Не ЗначениеЗаполнено(Форма.Объект.ПервичныйБольничныйЛист);
	
	Для Каждого ИмяЭлемента Из ИменаЭлементов Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяЭлемента, "Доступность", ДоступностьЭлементов);
	КонецЦикла;
	
	Если ДоступностьЭлементов Тогда
		ЗаголовокКомандыОткрытьСреднийЗаработок = НСтр("ru='Изменить'");
	Иначе
		ЗаголовокКомандыОткрытьСреднийЗаработок = НСтр("ru='Подробнее'");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ОткрытьСреднийЗаработок",
		"Заголовок",
		ЗаголовокКомандыОткрытьСреднийЗаработок);
	
	МассивПараметровВыбора = Новый Массив;
	
	Если Не ДоступностьЭлементов И ЗначениеЗаполнено(Форма.Объект.ПричинаНетрудоспособности) Тогда
		
		ПричиныНетрудоспособности = Новый Массив;
		ПричиныНетрудоспособности.Добавить(Форма.Объект.ПричинаНетрудоспособности);
		ПособиеПриДолечивании = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПособиеПриДолечивании");
		
		Если Форма.Объект.ПричинаНетрудоспособности <> ПособиеПриДолечивании Тогда
			ПричиныНетрудоспособности.Добавить(ПособиеПриДолечивании);
		КонецЕсли; 
		
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(ПричиныНетрудоспособности)));
		
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ПричинаНетрудоспособности",
		"ПараметрыВыбора",
		Новый ФиксированныйМассив(МассивПараметровВыбора));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваПоляПервичногоБольничногоЛиста(Форма)

	Форма.Элементы.НадписьПервичныйЛистокНетрудоспособности.Доступность = Форма.Объект.ЯвляетсяПродолжениемБолезни;
	Если ЗначениеЗаполнено(Форма.Объект.ПервичныйБольничныйЛист) Тогда
		Форма.НадписьПервичныйЛистокНетрудоспособности = Строка(Форма.Объект.ПервичныйБольничныйЛист);
	Иначе
		Форма.НадписьПервичныйЛистокНетрудоспособности = НСтр("ru = 'Выбрать листок нетрудоспособности...'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваПоляРезультатаЗаСчетФБ(Форма, Видимость, ИмяПоляРезультатЗаСчетФБ = "НачисленияРезультатВТомЧислеЗаСчетФБ")

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяПоляРезультатЗаСчетФБ, "Видимость", Видимость);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьДнейОсвобожденияОтРаботы()
	
	НадписьДнейОсвобожденияОтРаботы = ОбщегоНазначенияБЗК.ПредставлениеКоличестваДней(
		Объект.ДатаНачала,
		Объект.ДатаОкончания);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПервичномуБольничномуЛисту()
	Если Не ЗначениеЗаполнено(Объект.ПервичныйБольничныйЛист) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьПоПервичномуБольничномуЛисту(Объект.ПервичныйБольничныйЛист);
	ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
	
	ГодНачалаСобытия = Неопределено;
	РассчитатьСреднийЗаработок();
	
	УстановитьДоступностьЭлементовПоПервичномуБольничномуЛисту(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыОплаты(Знач ФлажокНазначитьПособие = Неопределено, Знач Кэш = Неопределено)
	Если Кэш = Неопределено Тогда
		Кэш = Новый Соответствие;
	КонецЕсли;
	
	Документы.БольничныйЛист.ЗаполнитьПараметрыОплаты(Объект, Кэш);
	
	Если ТипЗнч(ФлажокНазначитьПособие) = Тип("Булево")
		И Объект.НазначитьПособие <> ФлажокНазначитьПособие Тогда
		Объект.НазначитьПособие = ФлажокНазначитьПособие;
		Объект.АвтозаполнениеПериодовОплаты = Ложь;
	КонецЕсли;
	
	ОбновитьЭлементыПараметровОплаты(Кэш);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьФинансированиеФедеральнымБюджетом(Форма)
	
	ДоступностьЭлементов = Форма.Объект.ПрименятьЛьготыПриНачисленииПособия;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ФинансированиеФедеральнымБюджетом",
		"Доступность",
		ДоступностьЭлементов);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ПроцентОплатыБезЛьгот",
		"Доступность",
		ДоступностьЭлементов);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ОграничениеПособияБезЛьгот",
		"Доступность",
		ДоступностьЭлементов);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПроцентОплатыИОграничениеПособия()
	Структура = УчетПособийСоциальногоСтрахования.ПроцентОплатыИОграничениеПособия(Объект);
	ЗаполнитьЗначенияСвойств(Объект, Структура);
КонецПроцедуры

&НаСервере
Процедура НомерЛисткаНетрудоспособностиПриИзмененииНаСервере()
	
	ОбновитьГиперссылкуВводаДанныхЛисткаНетрудоспособности();
	
	ЗапланироватьПолноеОбновлениеСведенийДляФСС();
	ОбновитьСведенияДляФСС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПервичныйБольничныйЛистЗавершениеВыбора(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(ВыбранноеЗначение) И ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.БольничныйЛист") Тогда
		Объект.ПервичныйБольничныйЛист = ВыбранноеЗначение;
		УстановитьСвойстваПоляПервичногоБольничногоЛиста(ЭтотОбъект);
		ЗаполнитьПоПервичномуБольничномуЛисту();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияНачисленийНаКлиенте()
	ПослеИзмененияНачисленийНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПослеИзмененияНачисленийНаСервере()
	
	ЗапланироватьПолноеОбновлениеСведенийДляФСС();
	
	ПересчитатьНДФЛ();
	ЗаполнитьИтоговыеСуммыНачислений();
	
	ОбновитьСведенияДляФСС();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСреднийЗаработок()
	
	Если ЗначениеЗаполнено(Объект.ДатаНачалаСобытия)
		И ЗначениеЗаполнено(Объект.Сотрудник)
		И ЗначениеЗаполнено(Объект.ПричинаНетрудоспособности)  Тогда
		
		ОбновитьДанныеОЗаработкеИОтработанномВремениДляРасчетаСреднегоЗаработка();
		
		УстановитьПривилегированныйРежим(Истина);
		
		ПараметрыРасчета = ПараметрыРасчетаСреднегоДневногоЗаработкаФСС();
		
		Объект.СреднийДневнойЗаработок = УчетПособийСоциальногоСтрахования.СреднийДневнойЗаработокФСС(ПараметрыРасчета);
		Объект.МинимальныйСреднедневнойЗаработок = УчетПособийСоциальногоСтрахования.МинимальныйСреднедневнойЗаработокФСС(ПараметрыРасчета);
		
		РассчитатьНачисления();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОЗаработкеИОтработанномВремениДляРасчетаСреднегоЗаработка()
	
	Если Не Объект.ЯвляетсяПродолжениемБолезни Тогда
	
		Если ГодНачалаСобытия <> Год(Объект.ДатаНачалаСобытия) Тогда
			
			Объект.СреднийЗаработокФСС.Очистить();
			Объект.ОтработанноеВремяДляСреднегоФСС.Очистить();
			
			РасчетныеГоды = Новый Массив;
			РасчетныеГоды.Добавить(Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод);
			РасчетныеГоды.Добавить(Объект.ПериодРасчетаСреднегоЗаработкаВторойГод);
			
			СведенияОЗаработке = РасчетЗарплатыДляНебольшихОрганизаций.ДанныеОЗаработкеДляРасчетаСреднегоФСС(
				Объект.Сотрудник, Объект.Организация, Объект.ДатаНачалаСобытия, РасчетныеГоды);
			
			Если СведенияОЗаработке.Количество() = 0 Тогда
				
				Документы.БольничныйЛист.ЗаполнитьДанныеСреднегоЗаработкаПоПредыдущемуДокументу(
					Объект, РасчетныеГоды);
				
			ИначеЕсли СведенияОЗаработке.Количество() = 1 Тогда
				
				Если СведенияОЗаработке.Получить(Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод) = Неопределено Тогда
					
					Документы.БольничныйЛист.ЗаполнитьДанныеСреднегоЗаработкаПоПредыдущемуДокументу(
						Объект, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод));
					
				Иначе
					
					Документы.БольничныйЛист.ЗаполнитьДанныеСреднегоЗаработкаПоПредыдущемуДокументу(
						Объект, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.ПериодРасчетаСреднегоЗаработкаВторойГод));
					
				КонецЕсли;
				
			КонецЕсли;
			
			ДнейБолезниУходаЗаДетьми = 0;
			
			ПособиеЗаНеполныйРасчетныйПериод = УчетПособийСоциальногоСтрахования.ПособиеЗаНеполныйРасчетныйПериод(Объект.ФизическоеЛицо, Объект.ДатаНачалаСобытия);
			
			Для каждого СведенияГода Из СведенияОЗаработке Цикл
				
				ЗаработокГода = 0;
				Для каждого СведенияМесяца Из СведенияГода.Значение Цикл
					
					Если СведенияМесяца.Значение.Сумма <> 0 Тогда
						
						СтрокаСведений = Объект.СреднийЗаработокФСС.Добавить();
						СтрокаСведений.ФизическоеЛицо = Объект.ФизическоеЛицо;
						СтрокаСведений.Период = Дата(СведенияГода.Ключ, СведенияМесяца.Ключ, 1);
						СтрокаСведений.Сумма = СведенияМесяца.Значение.Сумма;
						
						Если НЕ УчетПособийСоциальногоСтрахования.НеВключатьПериодВДанныеДляРасчета(СтрокаСведений.Период, ПособиеЗаНеполныйРасчетныйПериод) Тогда
							ЗаработокГода = ЗаработокГода + СтрокаСведений.Сумма;
						КонецЕсли;
						
					КонецЕсли;
					
					Если СведенияМесяца.Значение.ДнейБолезниУходаЗаДетьми <> 0 Тогда
						
						СтрокаСведений = Объект.ОтработанноеВремяДляСреднегоФСС.Добавить();
						СтрокаСведений.ФизическоеЛицо = Объект.ФизическоеЛицо;
						СтрокаСведений.Период = Дата(СведенияГода.Ключ, СведенияМесяца.Ключ, 1);
						СтрокаСведений.ДнейБолезниУходаЗаДетьми = СведенияМесяца.Значение.ДнейБолезниУходаЗаДетьми;
						
						Если НЕ УчетПособийСоциальногоСтрахования.НеВключатьПериодВДанныеДляРасчета(СтрокаСведений.Период, ПособиеЗаНеполныйРасчетныйПериод)  Тогда
							ДнейБолезниУходаЗаДетьми = ДнейБолезниУходаЗаДетьми + СтрокаСведений.ДнейБолезниУходаЗаДетьми;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			ГодНачалаСобытия = Год(Объект.ДатаНачалаСобытия);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыРасчетаСреднегоДневногоЗаработкаФСС()
	
	ПараметрыРасчета = УчетПособийСоциальногоСтрахованияКлиентСервер.ПараметрыРасчетаСреднегоДневногоЗаработкаФСС();
	ПараметрыРасчета.ДатаНачалаСобытия = Объект.ДатаНачалаСобытия;
	ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаНачало = Дата(Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод, 1, 1) ;
	ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаОкончание = КонецДня(Дата(Объект.ПериодРасчетаСреднегоЗаработкаВторойГод, 12, 31));
	ПараметрыРасчета.РасчетныеГоды = УчетПособийСоциальногоСтрахования.ГодыПериодаРасчетаСреднего(Объект);
	
	ФизическоеЛицо = Неопределено;
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Объект.Сотрудник, "ФизическоеЛицо", Объект.ДатаНачалаСобытия);
	Если НЕ КадровыеДанные.Количество() = 0 Тогда
		ФизическоеЛицо = КадровыеДанные[0].ФизическоеЛицо;
	КонецЕсли;
	ПараметрыРасчета.НеполныйРасчетныйПериод = УчетПособийСоциальногоСтрахования.ПособиеЗаНеполныйРасчетныйПериод(ФизическоеЛицо, Объект.ДатаНачалаСобытия);
	ПараметрыРасчета.ПрименяетсяФЗ_20_2023 = УчетПособийСоциальногоСтрахования.ПрименяетсяФЗ_20_2023(ФизическоеЛицо, Объект.ДатаНачалаСобытия);
	
	ПараметрыРасчета.ДанныеНачислений = ДанныеОЗаработкеДляРасчетаСреднегоЗаработка();
	ПараметрыРасчета.ДанныеВремени = ДанныеОбОтработанномВремениДляРасчетаСреднегоЗаработка();
	ПараметрыРасчета.ДанныеСтрахователей = УчетПособийСоциальногоСтрахования.ПустаяТаблицаДанныеСтрахователейСреднийЗаработокФСС();
	ПараметрыРасчета.ИспользоватьДниБолезниУходаЗаДетьми = Документы.БольничныйЛист.ИспользоватьДниБолезниУходаЗаДетьми(Объект);
	ПараметрыРасчета.УчитыватьДниПриостановленияТД = Документы.БольничныйЛист.УчитыватьДниПриостановленияТД(Объект);
	ПараметрыРасчета.ДнейПриостановленияТДЗаГод1 = Объект.ДнейПриостановленияТДЗаГод1;
	ПараметрыРасчета.ДнейПриостановленияТДЗаГод2 = Объект.ДнейПриостановленияТДЗаГод2;
	ПараметрыРасчета.ПрименятьПредельнуюВеличину = Объект.ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве
													И Объект.ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.Профзаболевание; 
	ПараметрыРасчета.ПорядокРасчета = УчетПособийСоциальногоСтрахованияКлиентСервер.ПорядокРасчетаСреднегоЗаработкаФСС(Объект.ДатаНачалаСобытия);
	ПараметрыРасчета.РайонныйКоэффициентРФ = Объект.РайонныйКоэффициентРФНаНачалоСобытия;
	ПараметрыРасчета.ДоляНеполногоВремени = Объект.ДоляНеполногоВремени;
	ПараметрыРасчета.Сотрудник = Объект.Сотрудник;
		
	Возврат ПараметрыРасчета;
	
КонецФункции

&НаСервере
Функция ДанныеОЗаработкеДляРасчетаСреднегоЗаработка()
	
	ДанныеОЗаработкеДляРасчетаСреднегоЗаработка = УчетПособийСоциальногоСтрахования.ПустаяТаблицаНачисленийСреднийЗаработокФСС();
	
	Для каждого СтрокаДанных Из Объект.СреднийЗаработокФСС Цикл
		СтрокаДанныхОЗаработке = ДанныеОЗаработкеДляРасчетаСреднегоЗаработка.Добавить();
		СтрокаДанныхОЗаработке.ФизическоеЛицо = СтрокаДанных.ФизическоеЛицо;
		СтрокаДанныхОЗаработке.ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаФСС.Постановление2011;
		СтрокаДанныхОЗаработке.Период = СтрокаДанных.Период;
		СтрокаДанныхОЗаработке.Сумма = СтрокаДанных.Сумма;
	КонецЦикла;
	
	Возврат ДанныеОЗаработкеДляРасчетаСреднегоЗаработка;
	
КонецФункции

&НаСервере
Функция ДанныеОбОтработанномВремениДляРасчетаСреднегоЗаработка()
	
	ДанныеОбОтработанномВремениДляРасчетаСреднегоЗаработка = УчетПособийСоциальногоСтрахования.ПустаяТаблицаОтработанноеВремяСреднийЗаработокФСС();
	
	Для каждого СтрокаДанных Из Объект.ОтработанноеВремяДляСреднегоФСС Цикл
		СтрокаДанныхОбОтработанномВремени = ДанныеОбОтработанномВремениДляРасчетаСреднегоЗаработка.Добавить();
		СтрокаДанныхОбОтработанномВремени.ФизическоеЛицо = СтрокаДанных.ФизическоеЛицо;
		СтрокаДанныхОбОтработанномВремени.Период = СтрокаДанных.Период;
		СтрокаДанныхОбОтработанномВремени.ДнейБолезниУходаЗаДетьми = СтрокаДанных.ДнейБолезниУходаЗаДетьми;
	КонецЦикла;
	
	Возврат ДанныеОбОтработанномВремениДляРасчетаСреднегоЗаработка;
	
КонецФункции

&НаСервере
Процедура РассчитатьНачисления()
	
	// От флажка ИспользоватьПрямыеВыплатыФСС зависят начисления,
	// а от начислений - флажки Объект.ПособиеВыплачиваетсяФСС и ОтправитьЭЛН.
	ЕстьПособияЗаСчетФСС                       = Неопределено;
	ТребуетсяЗаполнитьПараметрыПрямыхВыплатФСС = Истина;
	ТребуетсяЗаполнитьПараметрыОтправкиЭЛН     = Истина;
	ПрочитатьФлажокИспользоватьПрямыеВыплатыФСС();
	
	// Заполнение начислений
	Объект.Начисления.Очистить();
	ТаблицаРасчета = Объект.Начисления.Выгрузить();
	ТаблицаРасчета.Колонки.Добавить("МРОТ", Новый ОписаниеТипов("Число"));
	ТаблицаРасчета.Колонки.Добавить("КалендарныеДни", Новый ОписаниеТипов("Число"));
	ТаблицаРасчета.Колонки.Добавить("РайонныйКоэффициентРФ", Новый ОписаниеТипов("Число"));
	
	Кэш = Новый Соответствие;
	ПериодыНачислений = Документы.БольничныйЛист.ПериодыНачислений(Объект, Кэш);
	МРОТ = ЗарплатаКадры.МинимальныйРазмерОплатыТрудаРФ(Объект.ДатаНачалаСобытия);
	
	Для Каждого Период Из ПериодыНачислений Цикл
		Если Не ЗначениеЗаполнено(Период.ВидРасчета) Тогда
			Продолжить;
		КонецЕсли;
		ДатаНачала    = НачалоДня(Период.ДатаНачала);
		ДатаОкончания = КонецДня(Период.ДатаОкончания);
		Пока ДатаНачала <= ДатаОкончания Цикл
			СтрокаНачислений = ТаблицаРасчета.Добавить();
			СтрокаНачислений.Начисление = Период.ВидРасчета;
			СтрокаНачислений.ДатаНачала = ДатаНачала;
			СтрокаНачислений.ДатаОкончания = Мин(КонецМесяца(ДатаНачала), ДатаОкончания);
			СтрокаНачислений.Сотрудник = Объект.Сотрудник;
			СтрокаНачислений.Подразделение = ПодразделениеСотрудника;
			СтрокаНачислений.КалендарныеДни = ОбщегоНазначенияБЗК.КоличествоДнейВПериоде(
				СтрокаНачислений.ДатаНачала,
				СтрокаНачислений.ДатаОкончания);
			СтрокаНачислений.МРОТ = МРОТ;
			СтрокаНачислений.РайонныйКоэффициентРФ = Объект.РайонныйКоэффициентРФНаНачалоСобытия;
			ДатаНачала = НачалоДня(СтрокаНачислений.ДатаОкончания + 86400);
		КонецЦикла;
	КонецЦикла;
	
	СтруктурыЗаписей = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаРасчета);
	
	ТаблицаРасчета.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	ТаблицаРасчета.Колонки.Добавить("Сторно", Новый ОписаниеТипов("Булево"));
	ТаблицаРасчета.Колонки.Добавить("ФиксСторно", Новый ОписаниеТипов("Булево"));
	
	ТаблицаСДанными = Новый ТаблицаЗначений;
	ТаблицаСДанными.Колонки.Добавить("ЗаписьРасчета");
	ТаблицаСДанными.Колонки.Добавить("Показатели");
	ТаблицаСДанными.Колонки.Добавить("ДатаНачала");
	ТаблицаСДанными.Колонки.Добавить("Результат");
	ТаблицаСДанными.Колонки.Добавить("Дополнительно", Новый ОписаниеТипов("Структура"));
	ТаблицаСДанными.Колонки.Добавить("ТерриторииУсловияТруда", Новый ОписаниеТипов("Массив"));
	
	Для НомерСтроки = 0 По ТаблицаРасчета.Количество() - 1 Цикл
		
		СтрокаТаблицыРасчета = ТаблицаРасчета[НомерСтроки];
		Если СтрокаТаблицыРасчета.Начисление = ВидНеоплачиваемогоВремени Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСДанными = ТаблицаСДанными.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСДанными, СтрокаТаблицыРасчета);
		СтрокаСДанными.ЗаписьРасчета = СтрокаТаблицыРасчета;
		СтрокаСДанными.Показатели = СтруктурыЗаписей[НомерСтроки];
		
	КонецЦикла;
	
	ПараметрыОплаты = Новый Структура("ПараметрыРасчетаПособияПоНетрудоспособности");
	ПараметрыОплаты.ПараметрыРасчетаПособияПоНетрудоспособности = Объект;
	
	УчетПособийСоциальногоСтрахования.РассчитатьПособиеПоНетрудоспособности(ТаблицаСДанными, ПараметрыОплаты, Ложь);
	
	
	Для Каждого СтрокаТаблицыСДанными Из ТаблицаСДанными Цикл
		
		СтрокаНачисления = Объект.Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНачисления, СтрокаТаблицыСДанными.Показатели);
		СтрокаНачисления.ОплаченоДней = СтрокаТаблицыСДанными.Показатели.КалендарныеДни;
		СтрокаНачисления.Результат = СтрокаТаблицыСДанными.Результат;
		СтрокаНачисления.РезультатВТомЧислеЗаСчетФБ = СтрокаТаблицыСДанными.Дополнительно.РезультатВТомЧислеЗаСчетФБ;
		
		Если СтрокаТаблицыСДанными.Показатели.Начисление <> ВидОплатыПособия Тогда
			СтрокаНачисления.РезультатВТомЧислеЗаСчетФБ = 0;
		КонецЕсли;
		
		Если ИспользоватьПрямыеВыплатыФСС И СтрокаТаблицыСДанными.Показатели.Начисление = ВидОплатыПособия Тогда
			СтрокаНачисления.Результат = 0;
			СтрокаНачисления.РезультатВТомЧислеЗаСчетФБ = 0;
		КонецЕсли;
		
		ТаблицаРасчета.Удалить(СтрокаТаблицыСДанными.ЗаписьРасчета);
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицыРасчета Из ТаблицаРасчета Цикл
		СтрокаНачисления = Объект.Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНачисления, СтрокаТаблицыРасчета);
		СтрокаНачисления.ОплаченоДней = СтрокаТаблицыРасчета.КалендарныеДни;
	КонецЦикла;
	
	ЗаполнитьИтоговыеСуммыНачислений();
	
	ПересчитатьНДФЛ();
	
	ОбновитьСведенияДляФСС();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьНДФЛ()
	
	Объект.НДФЛ.Очистить();
	Объект.ПримененныеВычетыНаДетейИИмущественные.Очистить();
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	
	ОбъектФормы = РеквизитФормыВЗначение("Объект");
	
	ДокументОбъект = ОбъектФормы.Скопировать();
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ДокументОбъект.СформироватьДоходыНДФЛ();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	БольничныйЛист.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ
		|	Документ.БольничныйЛист КАК БольничныйЛист
		|ГДЕ
		|	БольничныйЛист.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	Запрос.Выполнить();
	
	РезультатРасчетаНДФЛ = УчетНДФЛ.РезультатРасчетаНДФЛ(
		Запрос.МенеджерВременныхТаблиц, Объект.Ссылка, Объект.Организация, Объект.ПериодРегистрации, Ложь, Объект.ПланируемаяДатаВыплаты, ДокументОбъект.Движения);
	
	ОтменитьТранзакцию();
	УстановитьПривилегированныйРежим(Ложь);
	
	Для каждого ДанныеНДФЛ Из РезультатРасчетаНДФЛ.НДФЛ Цикл
		ЗаполнитьЗначенияСвойств(Объект.НДФЛ.Добавить(), ДанныеНДФЛ);
	КонецЦикла;
	
	Для каждого ДанныеВычетов Из РезультатРасчетаНДФЛ.ПримененныеВычетыНаДетейИИмущественные Цикл
		ЗаполнитьЗначенияСвойств(Объект.ПримененныеВычетыНаДетейИИмущественные.Добавить(), ДанныеВычетов);
	КонецЦикла;
	
	НДФЛ = Объект.НДФЛ.Итог("Налог") + Объект.НДФЛ.Итог("НалогСПревышения");
	
	РасчетЗарплатыБазовый.ЗаполнитьКорректировкиВыплаты(Объект, "ПериодРегистрации");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИтоговыеСуммыНачислений()
	
	СтрокиЗаСчетРаботодателя = Объект.Начисления.НайтиСтроки(Новый Структура("Начисление", ВидОплатыЗаСчетРаботодателя));
	НачисленоРаботодатель = 0;
	Для каждого СтрокаЗаСчетРаботодателя Из СтрокиЗаСчетРаботодателя Цикл
		НачисленоРаботодатель = НачисленоРаботодатель + СтрокаЗаСчетРаботодателя.Результат;
	КонецЦикла;
	
	СтрокиПособия = Объект.Начисления.НайтиСтроки(Новый Структура("Начисление", ВидОплатыПособия));
	НачисленоФСС = 0;
	Для каждого СтрокаЗаСчетФСС Из СтрокиПособия Цикл
		НачисленоФСС = НачисленоФСС + СтрокаЗаСчетФСС.Результат;
	КонецЦикла;
	
	НачисленоИтог = НачисленоРаботодатель + НачисленоФСС;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуНачалаПоловиннойОплаты()
	
	Объект.ДатаНачалаПоловиннойОплаты = '00010101';
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНачалаСобытия)
		Или Не ЗначениеЗаполнено(Объект.ДатаНачала)
		Или Не ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		Возврат;
	КонецЕсли;
	
	ДнейПолнойОплаты = УчетПособийСоциальногоСтрахования.ДнейПолнойОплатыПередПоловинной(
		Объект.СлучайУходаЗаБольнымРебенком,
		Объект.ДатаНачалаСобытия);
	Если ДнейПолнойОплаты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачалаПоловиннойОплаты = Объект.ДатаНачалаСобытия + ДнейПолнойОплаты * 86400;
	Если Объект.ДатаОкончания < НачалоДня(ДатаНачалаПоловиннойОплаты) - 1 Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДатаНачалаПоловиннойОплаты = ДатаНачалаПоловиннойОплаты;
	
КонецПроцедуры

&НаСервере
Процедура ПрименятьЛьготыПриНачисленииПособияПриИзмененииНаСервере()
	УстановитьДоступностьФинансированиеФедеральнымБюджетом(ЭтотОбъект);
	УстановитьСвойстваПоляРезультатаЗаСчетФБ(ЭтотОбъект, Объект.ПрименятьЛьготыПриНачисленииПособия);
	Если Не Объект.ПрименятьЛьготыПриНачисленииПособия Тогда
		Объект.ФинансированиеФедеральнымБюджетом = Неопределено;
	КонецЕсли;
	ЗаполнитьПроцентОплатыИОграничениеПособия();
	РассчитатьНачисления();
КонецПроцедуры

&НаСервере
Процедура ФинансированиеФедеральнымБюджетомПриИзмененииНаСервере()
	ЗаполнитьПроцентОплатыИОграничениеПособия();
	РассчитатьНачисления();
КонецПроцедуры

&НаСервере
Процедура КарантинПоКоронавирусуПриИзмененииНаСервере()
	ЗапланироватьПолноеОбновлениеСведенийДляФСС();
	ПричинаНетрудоспособностиПриИзмененииНаСервере();
	ОбновитьСведенияДляФСС();
КонецПроцедуры

&НаСервере
Процедура ДатаНачалаПриИзмененииНаСервере()
	
	Объект.АвтозаполнениеПериодовОплаты = Истина;
	
	Если ЗначениеЗаполнено(Объект.ДатаОкончания) И Объект.ДатаОкончания < Объект.ДатаНачала Тогда
		Объект.ДатаОкончания = Объект.ДатаНачала;
	КонецЕсли;
	
	Если Не Объект.ЯвляетсяПродолжениемБолезни Тогда
		Объект.ДатаНачалаСобытия = Объект.ДатаНачала;
	КонецЕсли;
	
	ЗаполнитьПериодРасчетаСреднегоЗаработка();
	
	ДатаНачалаСобытияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодРасчетаСреднегоЗаработка()
	
	ПериодРасчетаСреднего = УчетПособийСоциальногоСтрахованияКлиентСервер.ПериодРасчетаСреднегоЗаработкаФСС(Объект.ДатаНачалаСобытия);
	
	Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод = Год(ПериодРасчетаСреднего.ДатаНачала);
	Объект.ПериодРасчетаСреднегоЗаработкаВторойГод = Год(ПериодРасчетаСреднего.ДатаОкончания);
	
КонецПроцедуры

&НаСервере
Процедура ДатаОкончанияПриИзмененииНаСервере()
	
	ЗаполнитьДатуНачалаПоловиннойОплаты();
	
	Объект.АвтозаполнениеПериодовОплаты = Истина;
	ЗаполнитьПараметрыОплаты(Неопределено);
	
	ОбновитьНадписьДнейОсвобожденияОтРаботы();
	
	РассчитатьСреднийЗаработок();
	
КонецПроцедуры

&НаСервере
Процедура ПериодРегистрацииПриИзмененииНаСервере()
	
	ЗапланироватьПолноеОбновлениеСведенийДляФСС();
	
	ЗаполнитьУсловияИсчисления();
	
	Если ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		Объект.ПланируемаяДатаВыплаты = КонецМесяца(Объект.ПериодРегистрации) + 5 * 86400;
		ПересчитатьНДФЛ();
	КонецЕсли;
	
	ОбновитьСведенияДляФСС();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Организация));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РайонныйКоэффициентРФНаНачалоСобытия",
		"Видимость",
		ПолучитьФункциональнуюОпциюФормы("ПрименятьРайонныйКоэффициент"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещениеОбИзмененииСреднегоЗаработкаФСС(Знач Результат, Знач ПараметрКоманды) Экспорт
	
	Если НЕ ПустаяСтрока(Результат) Тогда
		
		ПеренестиДанныеУчетаСреднегоЗаработкаВДокумент(Результат);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиДанныеУчетаСреднегоЗаработкаВДокумент(АдресВХранилище)
	
	Объект.СреднийЗаработокФСС.Очистить();
	Объект.ОтработанноеВремяДляСреднегоФСС.Очистить();
	
	ПараметрыОповещения = ПолучитьИзВременногоХранилища(АдресВХранилище);
	Для каждого СведенияОСреднемЗаработке Из ПараметрыОповещения.СреднийЗаработокФСС Цикл
		ЗаполнитьЗначенияСвойств(Объект.СреднийЗаработокФСС.Добавить(), СведенияОСреднемЗаработке);
	КонецЦикла;
	
	Для каждого СведенияОбОтработанномВремениДляСреднегоФСС Из ПараметрыОповещения.ОтработанноеВремяДляСреднегоФСС Цикл
		ЗаполнитьЗначенияСвойств(Объект.ОтработанноеВремяДляСреднегоФСС.Добавить(), СведенияОбОтработанномВремениДляСреднегоФСС);
	КонецЦикла;
	
	Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод = ПараметрыОповещения.ПервыйГод;
	Объект.ПериодРасчетаСреднегоЗаработкаВторойГод = ПараметрыОповещения.ВторойГод;
	Объект.СреднийДневнойЗаработок = ПараметрыОповещения.СреднийДневнойЗаработок;
	Объект.МинимальныйСреднедневнойЗаработок = ПараметрыОповещения.МинимальныйСреднедневнойЗаработок;
	
	ЗаполнитьПриостановленияТрудовыхДоговоров();
	
	Модифицированность = Истина;
	
	РассчитатьНачисления();
	
КонецПроцедуры

&НаСервере
Функция АдресПараметровВХранилище()
	
	ПараметрыРасчетаСреднегоЗаработка = Новый Структура;
	ПараметрыРасчетаСреднегоЗаработка.Вставить("ДатаНачалаСобытия", Объект.ДатаНачалаСобытия);
	ПараметрыРасчетаСреднегоЗаработка.Вставить("Сотрудник", Объект.Сотрудник);
	ПараметрыРасчетаСреднегоЗаработка.Вставить("Организация", Объект.Организация);
	ПараметрыРасчетаСреднегоЗаработка.Вставить("РайонныйКоэффициентРФНаНачалоСобытия", Объект.РайонныйКоэффициентРФНаНачалоСобытия);
	ПараметрыРасчетаСреднегоЗаработка.Вставить("ПричинаНетрудоспособности", Объект.ПричинаНетрудоспособности);
	ПараметрыРасчетаСреднегоЗаработка.Вставить("ПервыйГод", Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод);
	ПараметрыРасчетаСреднегоЗаработка.Вставить("ВторойГод", Объект.ПериодРасчетаСреднегоЗаработкаВторойГод);
	ПараметрыРасчетаСреднегоЗаработка.Вставить("СреднийЗаработокФСС", Объект.СреднийЗаработокФСС.Выгрузить());
	ПараметрыРасчетаСреднегоЗаработка.Вставить("ОтработанноеВремяДляСреднегоФСС", Объект.ОтработанноеВремяДляСреднегоФСС.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(ПараметрыРасчетаСреднегоЗаработка, УникальныйИдентификатор);
	
КонецФункции

#Область НДФЛ

&НаСервере
Функция СведенияОбНДФЛ(ФизическоеЛицо = Неопределено) Экспорт
	
	ДополнительныеСведения = УчетНДФЛФормы.ДополнительныеДанныеДляПолученияСведенийОДоходахНДФЛДокумента();
	ДополнительныеСведения.МесяцНачисления = Объект.ПериодРегистрации;
	ДополнительныеСведения.ПланируемаяДатаВыплаты = Объект.ПланируемаяДатаВыплаты;
	
	СведенияОДоходахНДФЛ = УчетНДФЛФормы.СведенияОДоходахНДФЛДокумента(Объект, "Начисления", ДополнительныеСведения);	
	АдресСведенийОбНДФЛ = УчетНДФЛФормы.СведенияОбНДФЛ(ЭтотОбъект);
	
	ДанныеОбНДФЛ = ПолучитьИзВременногоХранилища(АдресСведенийОбНДФЛ);
	ДанныеОбНДФЛ.Вставить("СведенияОДоходах", СведенияОДоходахНДФЛ.СведенияОДоходах);
	ДанныеОбНДФЛ.Вставить("ВычетыКДоходам", СведенияОДоходахНДФЛ.ВычетыКДоходам);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеОбНДФЛ, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция НДФЛПодробнееНаСервере(ФизическиеЛица) Экспорт
	
	Если ТипЗнч(ФизическиеЛица) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическиеЛица);
	Иначе
		СписокФизическихЛиц = ФизическиеЛица;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	НДФЛПодробнее = Новый Массив;
	НДФЛПодробнее.Добавить(ДокументОбъект.Ссылка);
	НДФЛПодробнее.Добавить(УчетНДФЛФормы.РегистрНалоговогоУчетаПоНДФЛ(ДокументОбъект, Модифицированность, СписокФизическихЛиц, Объект.ПериодРегистрации));
	
	Возврат НДФЛПодробнее;
	
КонецФункции

&НаКлиенте
Процедура ПослеИзмененияСведенийОРасчетеНДФЛ(РезультатВыбора, ПустойПараметр) Экспорт
	Если ТипЗнч(РезультатВыбора) = Тип("Строка") И ЭтоАдресВременногоХранилища(РезультатВыбора) Тогда
		ОбновитьДанныеНДФЛНаСервере(РезультатВыбора);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНДФЛНаСервере(АдресВременногоХранилища)
	
	Параметр = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Объект.НДФЛ.Загрузить(Параметр.НДФЛ);
	Объект.ПримененныеВычетыНаДетейИИмущественные.Загрузить(Параметр.ПримененныеВычетыНаДетейИИмущественные);
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбновитьЭлементыПараметровОплаты(Кэш = Неопределено)
	Если Кэш = Неопределено Тогда
		Кэш = Новый Соответствие;
	КонецЕсли;
	
	ОплачиваемыеДатыНачислений = Документы.БольничныйЛист.ОплачиваемыеДатыНачислений(Объект, Кэш);
	ОплачиваемыеПериоды = ОбщегоНазначенияБЗК.ТаблицаПериодовИзТаблицыДат(ОплачиваемыеДатыНачислений, "");
	
	Объект.ДнейОплаты = ОплачиваемыеДатыНачислений.Количество();
	Если Объект.ИсключаемыеПериоды.Количество() = 0 Тогда
		Элементы.ДатаНачалаОплаты.Видимость               = Истина;
		Элементы.ДатаОкончанияОплаты.Видимость            = Истина;
		Элементы.ДатаНачалаОплаты.Доступность             = Объект.НазначитьПособие;
		Элементы.ДатаОкончанияОплаты.Доступность          = Объект.НазначитьПособие;
		Элементы.ИсключаемыеПериодыГруппа.Видимость       = Ложь;
		Элементы.ИсключаемыеПериодыВШапкеГруппа.Видимость = Ложь;
		Элементы.НазначитьПособие.Заголовок               = "";
		Если Объект.ДнейОплаты > 0 Тогда
			НадписьДнейОплатыПособия = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru = ';%1 день;;%1 дня;%1 дней;'"),
				Объект.ДнейОплаты);
		Иначе
			НадписьДнейОплатыПособия = "";
		КонецЕсли;
	Иначе
		Элементы.ДатаНачалаОплаты.Видимость               = Ложь;
		Элементы.ДатаОкончанияОплаты.Видимость            = Ложь;
		Элементы.ИсключаемыеПериодыГруппа.Видимость       = Истина;
		Элементы.ИсключаемыеПериодыВШапкеГруппа.Видимость = Истина;
		НадписьДнейОплатыПособия = "";
		ОбновитьГруппуИсключаемыеПериоды(Кэш, ОплачиваемыеПериоды);
	КонецЕсли;
	
	Элементы.ДатаНачалаПоловиннойОплаты.Видимость = (ЗначениеЗаполнено(Объект.ДатаНачалаПоловиннойОплаты)
		Или Объект.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьГруппуИсключаемыеПериоды(Кэш, ОплачиваемыеПериоды)
	// Формирование заголовка и текста гиперссылки исключаемых периодов.
	ПредставленияИсключаемыхПериодов = Новый Массив;
	Если Объект.НазначитьПособие Тогда
		Для Каждого ИсключаемыйПериод Из Объект.ИсключаемыеПериоды Цикл
			ПредставленияИсключаемыхПериодов.Добавить(
				ОбщегоНазначенияБЗК.НаименованиеПериода(ИсключаемыйПериод.ДатаНачала, ИсключаемыйПериод.ДатаОкончания));
		КонецЦикла;
		НеоплачиваемыхДней = Объект.ИсключаемыеПериоды.Итог("КалендарныхДней");
	Иначе
		ПредставленияИсключаемыхПериодов.Добавить(
			ОбщегоНазначенияБЗК.НаименованиеПериода(Объект.ДатаНачала, Объект.ДатаОкончания));
		НеоплачиваемыхДней = ОбщегоНазначенияБЗК.КоличествоДнейВПериоде(Объект.ДатаНачала, Объект.ДатаОкончания);
	КонецЕсли;
	ЗаголовокНадписи = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		НСтр("ru = ';Не оплачивается %1 день;;Не оплачивается %1 дня;Не оплачивается %1 дней;'"),
		НеоплачиваемыхДней) + ": ";
	ЗаголовокНадписи = СтроковыеФункции.ФорматированнаяСтрока(ЗаголовокНадписи);
	Элементы.ИсключаемыеПериодыВШапкеЗаголовок.Заголовок = ЗаголовокНадписи;
	Элементы.ИсключаемыеПериодыЗаголовок.Заголовок       = ЗаголовокНадписи;
	ТекстНадписи = СтрСоединить(ПредставленияИсключаемыхПериодов, ", ");
	Элементы.ИсключаемыеПериодыНадпись.Заголовок         = ТекстНадписи;
	Элементы.ИсключаемыеПериодыВШапкеНадпись.Заголовок   = ТекстНадписи;
	// Формирование заголовка флажка "Назначить пособие".
	Если Объект.ДнейОплаты = 0 И ОплачиваемыеПериоды.Количество() = 0 Тогда
		ЗаголовокФлажка = "";
	Иначе
		ПредставленияОплачиваемыхПериодов = Новый Массив;
		Для Каждого ОплачиваемыйПериод Из ОплачиваемыеПериоды Цикл
			ПредставленияОплачиваемыхПериодов.Добавить(
				ОбщегоНазначенияБЗК.НаименованиеПериода(ОплачиваемыйПериод.ДатаНачала, ОплачиваемыйПериод.ДатаОкончания));
		КонецЦикла;
		ЗаголовокФлажка = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';Назначить пособие на %1 день;;Назначить пособие на %1 дня;Назначить пособие на %1 дней;'"),
			Объект.ДнейОплаты);
		ЗаголовокФлажка = ЗаголовокФлажка + ": " + СтрСоединить(ПредставленияОплачиваемыхПериодов, ", ");
	КонецЕсли;
	Элементы.НазначитьПособие.Заголовок = ЗаголовокФлажка;
КонецПроцедуры

&НаСервере
Процедура НазначитьПособиеПриИзмененииНаСервере()
	
	Если Объект.НазначитьПособие Тогда
		// Если флажок "Оплачивать" включен пользователем, тогда:
		// - Выполняется полное заполнение;
		// - Если после заполнения флажок "Оплачивать" оказался отключен, то он принудительно снова включается.
		Объект.АвтозаполнениеПериодовОплаты = Истина;
		ЗаполнитьПараметрыОплаты(Объект.НазначитьПособие);
	Иначе
		// Если флажок "Оплачивать" отключен пользователем, тогда период оплаты очищается,
		// а таблица исключаемых периодов НЕ очищается, поскольку она может содержать причины неоплаты пособия.
		Объект.АвтозаполнениеПериодовОплаты = Ложь;
		Объект.ДатаНачалаОплаты    = Неопределено;
		Объект.ДатаОкончанияОплаты = Неопределено;
		Объект.ДнейОплаты          = 0;
		ОбновитьЭлементыПараметровОплаты();
	КонецЕсли;
	
	РассчитатьНачисления();
	
КонецПроцедуры

&НаСервере
Процедура ДатаНачалаОплатыПриИзмененииНаСервере()
	
	Объект.АвтозаполнениеПериодовОплаты = Ложь;
	ОбновитьЭлементыПараметровОплаты();
	РассчитатьНачисления();
	
КонецПроцедуры

&НаСервере
Процедура ДатаОкончанияОплатыПриИзмененииНаСервере()
	
	Объект.АвтозаполнениеПериодовОплаты = Ложь;
	ЗаполнитьДатуНачалаПоловиннойОплаты();
	ОбновитьЭлементыПараметровОплаты();
	РассчитатьНачисления();
	
КонецПроцедуры

&НаСервере
Процедура ДатаНачалаСобытияПриИзмененииНаСервере()
	
	ЗаполнитьПоКадровымДаннымСотрудника();
	
	ЗаполнитьДатуНачалаПоловиннойОплаты();
	
	ЗаполнитьПараметрыОплаты(Неопределено);
	
	ЗаполнитьУсловияИсчисления();
	
	ЗаполнитьПроцентОплатыИОграничениеПособия();
	
	РассчитатьСреднийЗаработок();
	
	НастроитьЭлементыДополненияПричиныНетрудоспособности();
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыВводаИсключаемыхПериодов()
	ИсключаемыеПериоды = Новый Массив;
	Для Каждого СтрокаТаблицы Из Объект.ИсключаемыеПериоды Цикл
		Структура = Новый Структура("ДатаНачала, ДатаОкончания, Регистрировать, Причина, Изменил, Комментарий");
		ЗаполнитьЗначенияСвойств(Структура, СтрокаТаблицы);
		ИсключаемыеПериоды.Добавить(Структура);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ссылка",              Объект.Ссылка);
	ПараметрыФормы.Вставить("Организация",         Объект.Организация);
	ПараметрыФормы.Вставить("ПериодРегистрации",   Объект.ПериодРегистрации);
	ПараметрыФормы.Вставить("Сотрудник",           Объект.Сотрудник);
	ПараметрыФормы.Вставить("ДатаНачала",          Объект.ДатаНачала);
	ПараметрыФормы.Вставить("ДатаОкончания",       Объект.ДатаОкончания);
	ПараметрыФормы.Вставить("НазначитьПособие",    Объект.НазначитьПособие);
	ПараметрыФормы.Вставить("ДатаНачалаСобытия",   Объект.ДатаНачалаСобытия);
	ПараметрыФормы.Вставить("ДатаНачалаОплаты",    Объект.ДатаНачалаОплаты);
	ПараметрыФормы.Вставить("ДатаОкончанияОплаты", Объект.ДатаОкончанияОплаты);
	ПараметрыФормы.Вставить("ДнейОплаты",          Объект.ДнейОплаты);
	ПараметрыФормы.Вставить("ИсключаемыеПериоды",  ИсключаемыеПериоды);
	ПараметрыФормы.Вставить("ПериодыУходаЗаРодственниками", ПериодыУхода());
	ПараметрыФормы.Вставить("АвтозаполнениеПериодовОплаты", Объект.АвтозаполнениеПериодовОплаты);
	ПараметрыФормы.Вставить("ПричинаНетрудоспособности",    Объект.ПричинаНетрудоспособности);
	ПараметрыФормы.Вставить("КодПричиныНетрудоспособности", Объект.КодПричиныНетрудоспособности);
	ПараметрыФормы.Вставить("СлучайУходаЗаБольнымРебенком", Объект.СлучайУходаЗаБольнымРебенком);
	ПараметрыФормы.Вставить("ДатаНачалаПоловиннойОплаты",   Объект.ДатаНачалаПоловиннойОплаты);
	ПараметрыФормы.Вставить("ДатаНарушенияРежима",          Объект.ДатаНарушенияРежима);
	ПараметрыФормы.Вставить("ЭтоЭЛН",                       СведенияОбЭЛН.ЭтоЭЛН);
	ПараметрыФормы.Вставить("ПрерывистыйМетод",             Объект.ПрерывистыйМетод);
	
	ПериодЛН = УчетПособийСоциальногоСтрахованияКлиентСервер.ПериодЛН(Объект);
	ПараметрыФормы.Вставить("ДатаНачалаЛН",    ПериодЛН.ДатаНачала);
	ПараметрыФормы.Вставить("ДатаОкончанияЛН", ПериодЛН.ДатаОкончания);
	Возврат ПараметрыФормы;
КонецФункции

&НаКлиенте
Функция ПериодыУхода()
	ПериодыУхода = Новый Массив;
	ИменаПолей = "КодПричины, ДатаНачала, ДатаОкончания, КодСвязи,
		|Фамилия, Имя, Отчество, СНИЛС, ДатаРождения,
		|РежимЛечения, ВозрастЛет, ВозрастМесяцев, СлучайУхода";
	Для Каждого СтрокаТаблицы Из Объект.ПериодыУходаЗаРодственниками Цикл
		Структура = Новый Структура(ИменаПолей);
		ЗаполнитьЗначенияСвойств(Структура, СтрокаТаблицы, ИменаПолей);
		ПериодыУхода.Добавить(Структура);
	КонецЦикла;
	Возврат ПериодыУхода;
КонецФункции

&НаКлиенте
Процедура ПослеВводаИсключаемыхПериодов(РезультатВыбора, ПустойПараметр) Экспорт
	Если ТипЗнч(РезультатВыбора) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	Модифицированность = Истина;
	ПослеВводаИсключаемыхПериодовНаСервере(РезультатВыбора);
КонецПроцедуры

&НаСервере
Процедура ПослеВводаИсключаемыхПериодовНаСервере(Знач РезультатВыбора)
	Объект.АвтозаполнениеПериодовОплаты = РезультатВыбора.АвтозаполнениеПериодовОплаты;
	Объект.ИсключаемыеПериоды.Очистить();
	Для Каждого Структура Из РезультатВыбора.ИсключаемыеПериоды Цикл
		ИсключаемыйПериод = Объект.ИсключаемыеПериоды.Добавить();
		ЗаполнитьЗначенияСвойств(ИсключаемыйПериод, Структура);
		ИсключаемыйПериод.КалендарныхДней = ОбщегоНазначенияБЗК.КоличествоДнейВПериоде(
			ИсключаемыйПериод.ДатаНачала,
			ИсключаемыйПериод.ДатаОкончания);
	КонецЦикла;
	ЗаполнитьПараметрыОплаты();
	РассчитатьНачисления();
КонецПроцедуры

&НаСервере
Процедура ОчиститьИсключаемыеПериодыНаСервере()
	
	Объект.АвтозаполнениеПериодовОплаты = Ложь;
	Объект.ИсключаемыеПериоды.Очистить();
	ЗаполнитьПараметрыОплаты();
	ЗаполнитьДатуНачалаПоловиннойОплаты();
	РассчитатьНачисления();
	
КонецПроцедуры

// КадровыйЭДО

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПодключаемыеКоманды(УправляемаяФорма)
	КадровыйЭДОКлиентСервер.ОбновитьКоманды(УправляемаяФорма, УправляемаяФорма.Объект, Истина);
КонецПроцедуры

// Конец КадровыйЭДО

&НаСервере
Процедура ПриИзмененииСтажаНаСервере()
	ЗаполнитьЛьготыНаОснованииСтажа();
	ЗаполнитьПроцентОплатыИОграничениеПособия();
	УстановитьДоступностьФинансированиеФедеральнымБюджетом(ЭтотОбъект);
	УстановитьСвойстваПоляРезультатаЗаСчетФБ(ЭтотОбъект, Объект.ПрименятьЛьготыПриНачисленииПособия);
	РассчитатьНачисления();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛьготыНаОснованииСтажа()
	ЗачетНестраховыхПериодов = Перечисления.ОснованияФинансированияПособияФедеральнымБюджетом.ЗачетНестраховыхПериодов;
	Если Не ЗначениеЗаполнено(Объект.ФинансированиеФедеральнымБюджетом)
		Или Объект.ФинансированиеФедеральнымБюджетом = ЗачетНестраховыхПериодов Тогда
		ВсегоСтажМесяцев            = Объект.СтажЛет * 12 + Объект.СтажМесяцев;
		ВсегоСтажРасширенныйМесяцев = Объект.СтажРасширенныйЛет * 12 + Объект.СтажРасширенныйМесяцев;
		Если ЗначениеЗаполнено(ВсегоСтажМесяцев)
			И ВсегоСтажРасширенныйМесяцев > ВсегоСтажМесяцев Тогда
			Объект.ПрименятьЛьготыПриНачисленииПособия = Истина;
			Объект.ФинансированиеФедеральнымБюджетом   = ЗачетНестраховыхПериодов;
		Иначе
			Объект.ПрименятьЛьготыПриНачисленииПособия = Ложь;
			Объект.ФинансированиеФедеральнымБюджетом   = Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
