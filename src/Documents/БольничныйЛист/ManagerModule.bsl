#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.МенеджерПечати = "Документ.БольничныйЛист";
	КомандаПечати.Идентификатор = "РасчетСреднегоЗаработка";
	КомандаПечати.Представление = НСтр("ru = 'Расчет среднего заработка'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнительныеПараметры.Вставить("ТребуетсяЧтениеБезОграничений", Истина);
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов - Массив - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати - СписокЗначений - значение - ссылка на объект;
//                                   представление - имя области, в которой был выведен объект (выходной параметр);
//  ПараметрыВывода - Структура - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработка") Тогда
		ДанныеДокументов = ДанныеДокументовДляПечатиРасчетаСреднегоЗаработкаФСС(МассивОбъектов);
		ТабличныйДокумент = Обработки.ПечатьРасчетаСреднегоЗаработкаФСС.ТабличныйДокументРасчетаСреднегоЗаработка(ДанныеДокументов, ОбъектыПечати);
		Если НЕ ТабличныйДокумент = Неопределено Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработка", НСтр("ru = 'Расчет среднего заработка'"), ТабличныйДокумент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(ФизическоеЛицо)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Получает данные для заполнения документа по первичному листку нетрудоспособности.
//
// Параметры:
//  ПервичныйБольничныйЛист - ДокументСсылка.БольничныйЛист
//                 первичный листок нетрудоспособности.
//  ИсключаемыеДокументы - массив из ДокументСсылка.БольничныйЛист
//                 см. описание метода ПоследнийДеньБолезни.
//
// Возвращаемое значение:
//   Дата - последний день болезни, зарегистрированной по переданному б/л.
//
Функция ДанныеБольничногоЛиста(ПервичныйБольничныйЛист) Экспорт
	Отбор = Новый Структура;
	Если ТипЗнч(ПервичныйБольничныйЛист) = Тип("Строка") Тогда
		Отбор.Вставить("НомерЛисткаНетрудоспособности", ПервичныйБольничныйЛист);
	Иначе
		Отбор.Вставить("Ссылка", ПервичныйБольничныйЛист);
	КонецЕсли;
	Запрос = ЗапросПоБольничным(Отбор, "Проведен УБЫВ, ПометкаУдаления, ПериодРегистрации УБЫВ", 1);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ДанныеБольничного = Новый Структура;
	Для Каждого КолонкаРезультата Из РезультатЗапроса.Колонки Цикл
		ДанныеБольничного.Вставить(КолонкаРезультата.Имя, Выборка[КолонкаРезультата.Имя]);
	КонецЦикла;
	Возврат ДанныеБольничного;
КонецФункции

// Определяет последний день болезни, оформленной несколькими листками нетрудоспособности.
//
// Параметры:
//  ПервичныйБольничныйЛист - ДокументСсылка.БольничныйЛист
//                 первичный листок нетрудоспособности.
//  ИсключаемыеДокументы - массив из ДокументСсылка.БольничныйЛист
//                 массив листков нетрудоспособности, которые не нужно учитывать при определении последнего дня болезни.
//
// Возвращаемое значение:
//   Дата - последний день болезни, зарегистрированной по переданному б/л.
//
Функция ПоследнийДеньБолезни(ПервичныйБольничныйЛист, ИсключаемыеДокументы = Неопределено) Экспорт 

	ДатаОкончанияБолезни = '00010101';
	
	Если Не ЗначениеЗаполнено(ПервичныйБольничныйЛист) Тогда
		Возврат	ДатаОкончанияБолезни;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	БольничныйЛист.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.Ссылка = &ПервичныйБольничныйЛист
	|	И БольничныйЛист.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БольничныйЛист.ДатаОкончания
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.ПервичныйБольничныйЛист = &ПервичныйБольничныйЛист
	|	И НЕ БольничныйЛист.Ссылка В (&ИсключаемыеДокументы)
	|	И БольничныйЛист.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОкончания УБЫВ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПервичныйБольничныйЛист", ПервичныйБольничныйЛист);
	Запрос.УстановитьПараметр("ИсключаемыеДокументы", ?(ИсключаемыеДокументы = Неопределено, Новый Массив, ИсключаемыеДокументы));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		ДатаОкончанияБолезни = Выборка.ДатаОкончания;
	КонецЕсли;

	Возврат	ДатаОкончанияБолезни;
	
КонецФункции

Функция ДанныеДляРегистрацииВУчетаСтажаПФР(МассивСсылок) Экспорт
	ДанныеДляРегистрацииВУчете = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БольничныйЛист.Организация КАК Организация,
	|	БольничныйЛист.ПериодРегистрации КАК ПериодРегистрации,
	|	БольничныйЛист.Сотрудник КАК Сотрудник,
	|	БольничныйЛист.ДатаНачала КАК ДатаНачала,
	|	БольничныйЛист.ДатаОкончания КАК ДатаОкончания,
	|	БольничныйЛист.ДатаНачалаОплаты КАК ДатаНачалаОплаты,
	|	БольничныйЛист.ДатаОкончанияОплаты КАК ДатаОкончанияОплаты,
	|	БольничныйЛист.Ссылка КАК Ссылка,
	|	БольничныйЛист.ДатаНачалаПоловиннойОплаты КАК ДатаНачалаПоловиннойОплаты,
	|	БольничныйЛист.ДатаНарушенияРежима КАК ДатаНарушенияРежима,
	|	БольничныйЛист.НазначитьПособие КАК НазначитьПособие,
	|	БольничныйЛист.ПричинаНетрудоспособности КАК ПричинаНетрудоспособности,
	|	БольничныйЛист.ДатаНачалаСобытия КАК ДатаНачалаСобытия,КодПричиныНетрудоспособности,СлучайУходаЗаБольнымРебенком,
	|	БольничныйЛист.ПрерывистыйМетод КАК ПрерывистыйМетод,
	|	БольничныйЛист.ОсвобождениеДатаНачала1 КАК ОсвобождениеДатаНачала1,
	|	БольничныйЛист.ОсвобождениеДатаНачала2 КАК ОсвобождениеДатаНачала2,
	|	БольничныйЛист.ОсвобождениеДатаНачала3 КАК ОсвобождениеДатаНачала3,
	|	БольничныйЛист.ОсвобождениеДатаОкончания1 КАК ОсвобождениеДатаОкончания1,
	|	БольничныйЛист.ОсвобождениеДатаОкончания2 КАК ОсвобождениеДатаОкончания2,
	|	БольничныйЛист.ОсвобождениеДатаОкончания3 КАК ОсвобождениеДатаОкончания3,
	|	БольничныйЛист.ИсключаемыеПериоды.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ДатаНачала КАК ДатаНачала,
	|		ДатаОкончания КАК ДатаОкончания,
	|		КалендарныхДней КАК КалендарныхДней,
	|		Регистрировать КАК Регистрировать,
	|		Причина КАК Причина
	|	) КАК ИсключаемыеПериоды,
	|	БольничныйЛист.ПериодыУходаЗаРодственниками.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		КодПричины КАК КодПричины,
	|		ДатаНачала КАК ДатаНачала,
	|		ДатаОкончания КАК ДатаОкончания,
	|		КодСвязи КАК КодСвязи,
	|		Фамилия КАК Фамилия,
	|		Имя КАК Имя,
	|		Отчество КАК Отчество,
	|		СНИЛС КАК СНИЛС,
	|		ДатаРождения КАК ДатаРождения,
	|		РежимЛечения КАК РежимЛечения,
	|		ВозрастЛет КАК ВозрастЛет,
	|		ВозрастМесяцев КАК ВозрастМесяцев,
	|		СлучайУхода КАК СлучайУхода
	|	) КАК ПериодыУходаЗаРодственниками
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.Ссылка В(&МассивСсылок)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Больничный = Новый Структура("Организация, ПериодРегистрации, Сотрудник,
	|ДатаНачала, ДатаОкончания, НазначитьПособие, ДатаНачалаОплаты, ДатаОкончанияОплаты,
	|ПричинаНетрудоспособности, ДатаНачалаСобытия, Ссылка,
	|ИсключаемыеПериоды, ПериодыУходаЗаРодственниками,
	|ДатаНачалаПоловиннойОплаты, ДатаНарушенияРежима,
	|КодПричиныНетрудоспособности, СлучайУходаЗаБольнымРебенком, ПрерывистыйМетод,
	|ОсвобождениеДатаНачала1, ОсвобождениеДатаНачала2, ОсвобождениеДатаНачала3,
	|ОсвобождениеДатаОкончания1, ОсвобождениеДатаОкончания2, ОсвобождениеДатаОкончания3");
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Больничный, Выборка, , "ИсключаемыеПериоды");
		Больничный.ИсключаемыеПериоды           = Выборка.ИсключаемыеПериоды.Выгрузить();
		Больничный.ПериодыУходаЗаРодственниками = Выборка.ПериодыУходаЗаРодственниками.Выгрузить();
		ДанныеДляРегистрацииВУчете.Вставить(Выборка.Ссылка, ПериодыСтажаПФР(Больничный));
	КонецЦикла;	

	Возврат ДанныеДляРегистрацииВУчете;
														
КонецФункции	

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
Функция ОписаниеСоставаОбъекта() Экспорт
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаФизическоеЛицоВШапке();
КонецФункции

#Область Печать

// Заполняет таблицу значений - параметры формирования печатной формы расчета среднего заработка.
//
// Параметры:
//	 МассивСсылок 		- массив, печатаемые документы.
//   ДанныеДокумента 	- таблица значений, определяется в
//                      Обработки.ПечатьРасчетаСреднегоЗаработка.ДанныеДокументовРасчетаСреднегоЗаработка.
//   ИмяМакета          - строка, вариант печати расчета среднего заработка.
//
Функция ДанныеДокументовДляПечатиРасчетаСреднегоЗаработкаФСС(МассивСсылок) Экспорт
	
	ДанныеДокументов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	УчетПособийСоциальногоСтрахования.СоздатьВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС(Запрос.МенеджерВременныхТаблиц, МассивСсылок);
	
	СоздатьВТКадровыеДанныеСотрудниковБольничныхЛистов(Запрос, МассивСсылок);	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка,
	|	ДанныеДокументов.Сотрудник,
	|	ДанныеДокументов.ДатаНачалаСобытия,
	|	ДанныеДокументов.ПрименятьПредельнуюВеличину,
	|	ДанныеДокументов.ИспользоватьДниБолезниУходаЗаДетьми,
	|	ДанныеДокументов.УчитыватьДниПриостановленияТД,
	|	ДанныеДокументов.ДнейПриостановленияТДЗаГод1,
	|	ДанныеДокументов.ДнейПриостановленияТДЗаГод2,
	|	ДанныеДокументов.ПериодРасчетаСреднегоЗаработкаПервыйГод,
	|	ДанныеДокументов.ПериодРасчетаСреднегоЗаработкаВторойГод,
	|	ДанныеДокументов.РайонныйКоэффициентРФ,
	|	ДанныеДокументов.МинимальныйРазмерОплатыТрудаРФ,
	|	БольничныйЛист.Организация,
	|	БольничныйЛист.Дата КАК ДатаДокумента,
	|	БольничныйЛист.Номер КАК НомерДокумента,
	|	БольничныйЛист.ДатаНачала КАК ДатаНачалаОтсутствия,
	|	БольничныйЛист.ДатаОкончания КАК ДатаОкончанияОтсутствия,
	|	Организации.НаименованиеПолное КАК ПолноеНаименованиеОрганизации,
	|	Организации.Наименование КАК НаименованиеОрганизации,
	|	ВТКадровыеДанныеСотрудников.Организация КАК Страхователь,
	|	ВТКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТКадровыеДанныеСотрудников.ФИОПолные КАК ФИОПолные,
	|	ВТКадровыеДанныеСотрудников.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТКадровыеДанныеСотрудников.Подразделение КАК Подразделение,
	|	ВТКадровыеДанныеСотрудников.Должность КАК Должность,
	|	ВТКадровыеДанныеСотрудников.ВидЗанятости КАК ВидЗанятости
	|ИЗ
	|	ВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК БольничныйЛист
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|			ПО БольничныйЛист.Организация = Организации.Ссылка
	|		ПО ДанныеДокументов.Ссылка = БольничныйЛист.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ВТКадровыеДанныеСотрудников
	|		ПО ДанныеДокументов.Сотрудник = ВТКадровыеДанныеСотрудников.Сотрудник
	|			И ДанныеДокументов.ДатаНачалаСобытия = ВТКадровыеДанныеСотрудников.Период";	
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ТаблицыДанныхОСреднем = УчетПособийСоциальногоСтрахования.ТаблицыДанныхСреднегоЗаработкаФСС("БольничныйЛист", МассивСсылок);
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ДанныеДокумента = Обработки.ПечатьРасчетаСреднегоЗаработкаФСС.ПустаяСтруктураДанныхДляПечатиСреднегоЗаработка();
			
			ЗаполнитьЗначенияСвойств(ДанныеДокумента.РеквизитыДокумента, Выборка);
			ЗаполнитьЗначенияСвойств(ДанныеДокумента.КадровыеДанныеСотрудника, Выборка);
			
			РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС = УчетПособийСоциальногоСтрахования.РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС();
			ЗаполнитьЗначенияСвойств(РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС, Выборка);
			РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС.ПериодРасчетаСреднегоЗаработкаНачало = Дата(РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС.ПериодРасчетаСреднегоЗаработкаПервыйГод, 1, 1) ;
			РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС.ПериодРасчетаСреднегоЗаработкаОкончание = КонецДня(Дата(РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС.ПериодРасчетаСреднегоЗаработкаВторойГод, 12, 31));

			ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС = УчетПособийСоциальногоСтрахования.ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС(
				РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС,
				ТаблицыДанныхОСреднем);
			ДанныеДокумента.ПараметрыРасчета = ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС.ПараметрыРасчета;
			ДанныеДокумента.ДанныеРасчетаСреднего = ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС.ДанныеРасчетаСреднего;
			
			ДанныеДокументов.Добавить(ДанныеДокумента);
			
		КонецЦикла;	
		
	КонецЕсли;
	
	Возврат ДанныеДокументов;
	
КонецФункции

#КонецОбласти

// Возвращает описание документов с полями ПараметрыРасчета и ДанныеРасчетаСреднего. 
// 	ПараметрыРасчета - см. УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.ПараметрыРасчетаСреднегоДневногоЗаработкаФСС()
// 	ДанныеРасчетаСреднего - см. УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.ДанныеРасчетаСреднегоЗаработкаФСС.
//
// Параметры:
//	 МассивСсылок 		- массив ссылок на документ БольничныйЛист, по которым получаем данные.
// 
// Возвращаемое значение: Соответствие, ключ - ссылка на больничный лист, значение - Структура("ПараметрыРасчета,ДанныеРасчетаСреднего").
//
Функция ДанныеДокументовДляРасчетаСреднегоЗаработкаФСС(МассивСсылок) Экспорт
	
	ДанныеДокументов = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	УчетПособийСоциальногоСтрахования.СоздатьВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС(Запрос.МенеджерВременныхТаблиц, МассивСсылок);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка КАК Ссылка,
	|	ДанныеДокументов.Сотрудник КАК Сотрудник,
	|	ДанныеДокументов.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеДокументов.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	ДанныеДокументов.ПрименятьПредельнуюВеличину КАК ПрименятьПредельнуюВеличину,
	|	ДанныеДокументов.ИспользоватьДниБолезниУходаЗаДетьми КАК ИспользоватьДниБолезниУходаЗаДетьми,
	|	ДанныеДокументов.УчитыватьДниПриостановленияТД КАК УчитыватьДниПриостановленияТД,
	|	ДанныеДокументов.ДнейПриостановленияТДЗаГод1 КАК ДнейПриостановленияТДЗаГод1,
	|	ДанныеДокументов.ДнейПриостановленияТДЗаГод2 КАК ДнейПриостановленияТДЗаГод2,
	|	ДанныеДокументов.ПериодРасчетаСреднегоЗаработкаПервыйГод КАК ПериодРасчетаСреднегоЗаработкаПервыйГод,
	|	ДанныеДокументов.ПериодРасчетаСреднегоЗаработкаВторойГод КАК ПериодРасчетаСреднегоЗаработкаВторойГод,
	|	ДанныеДокументов.РайонныйКоэффициентРФ КАК РайонныйКоэффициентРФ,
	|	ДанныеДокументов.ДоляНеполногоВремени КАК ДоляНеполногоВремени,
	|	ДанныеДокументов.МинимальныйРазмерОплатыТрудаРФ КАК МинимальныйРазмерОплатыТрудаРФ
	|ИЗ
	|	ВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС КАК ДанныеДокументов";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ТаблицыДанныхОСреднем = УчетПособийСоциальногоСтрахования.ТаблицыДанныхСреднегоЗаработкаФСС("БольничныйЛист", МассивСсылок);
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Попытка
				РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС = УчетПособийСоциальногоСтрахования.РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС();
				ЗаполнитьЗначенияСвойств(РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС, Выборка);
				РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС.ПериодРасчетаСреднегоЗаработкаНачало = Дата(РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС.ПериодРасчетаСреднегоЗаработкаПервыйГод, 1, 1) ;
				РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС.ПериодРасчетаСреднегоЗаработкаОкончание = Дата(РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС.ПериодРасчетаСреднегоЗаработкаВторойГод, 12, 31);
				
				ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС = УчетПособийСоциальногоСтрахования.ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС(РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС, ТаблицыДанныхОСреднем);
			Исключение
				Суть = СтрШаблон(
					НСтр("ru = 'Не удалось рассчитать средний заработок по документу ""%1"". Вероятно, документ заполнен не полностью.'"),
					Выборка.Ссылка);
				Кратко = Суть + " " + НСтр("ru = 'Подробности в журнале регистрации.'");
				Подробно = Суть + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				СообщенияБЗК.СообщитьОПроблеме(Кратко, Выборка.Ссылка, "ДатаНачала");
				УчетПособийСоциальногоСтрахования.ЗаписатьОшибкуВЖурнал(Подробно, Выборка.Ссылка);
				Продолжить;
			КонецПопытки;
			
			ДанныеДокументов.Вставить(Выборка.Ссылка, ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеДокументов;
КонецФункции

// Возвращает данные больничного для расчета среднего заработка ФСС.
//
// Параметры:
//   БольничныйОбъект - ДокументОбъект.БольничныйЛист
//
// Возвращаемое значение:
//   Структура - См. УчетПособийСоциальногоСтрахования.ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС.
//
Функция ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС(БольничныйОбъект) Экспорт
	
	Попытка
		ТаблицыДанныхОСреднем = ТаблицыДанныхОСреднем(БольничныйОбъект);
		РеквизитыДокумента = РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС(БольничныйОбъект);
		Возврат УчетПособийСоциальногоСтрахования.ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС(РеквизитыДокумента, ТаблицыДанныхОСреднем);
	Исключение
		Суть = СтрШаблон(
			НСтр("ru = 'Не удалось рассчитать средний заработок по документу ""%1"". Вероятно, документ заполнен не полностью.'"),
			БольничныйОбъект);
		Кратко = Суть + " " + НСтр("ru = 'Подробности в журнале регистрации.'");
		Подробно = Суть + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщенияБЗК.СообщитьОПроблеме(Кратко, БольничныйОбъект.Ссылка, "ДатаНачала");
		УчетПособийСоциальногоСтрахования.ЗаписатьОшибкуВЖурнал(Подробно, БольничныйОбъект.Ссылка);
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ТаблицыДанныхОСреднем(БольничныйОбъект)
	
	ФиксированныеЗначенияНачислений = Новый Структура;
	ФиксированныеЗначенияНачислений.Вставить("ПорядокРасчета", Перечисления.ПорядокРасчетаСреднегоЗаработкаФСС.Постановление2011);
	ФиксированныеЗначенияНачислений.Вставить("СтатьяФинансирования", Справочники.СтатьиФинансированияЗарплата.ПустаяСсылка());
	ФиксированныеЗначенияНачислений.Вставить("СпособОтраженияЗарплатыВБухучете", Справочники.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка());
	ФиксированныеЗначенияНачислений.Вставить("СтатьяРасходов", Справочники.СтатьиРасходовЗарплата.ПустаяСсылка());
	ФиксированныеЗначенияНачислений.Вставить("ОблагаетсяЕНВД", Ложь);
	
	ДанныеОНачислениях = УчетПособийСоциальногоСтрахования.ПустаяТаблицаНачисленийСреднийЗаработокФСС();
	ДанныеОНачислениях.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.БольничныйЛист"));
	Для Каждого СтрокаБольничного Из БольничныйОбъект.СреднийЗаработокФСС Цикл
		СтрокаТаблицы = ДанныеОНачислениях.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаБольничного);
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ФиксированныеЗначенияНачислений);
		СтрокаТаблицы.Ссылка = БольничныйОбъект.Ссылка;
	КонецЦикла;
	
	ДанныеВремени = УчетПособийСоциальногоСтрахования.ПустаяТаблицаОтработанноеВремяСреднийЗаработокФСС();
	ДанныеВремени.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.БольничныйЛист"));
	Для Каждого СтрокаБольничного Из БольничныйОбъект.ОтработанноеВремяДляСреднегоФСС Цикл
		СтрокаТаблицы = ДанныеВремени.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаБольничного);
		СтрокаТаблицы.Ссылка = БольничныйОбъект.Ссылка;
	КонецЦикла;
	
	ДанныеСтрахователей = УчетПособийСоциальногоСтрахования.ПустаяТаблицаДанныеСтрахователейСреднийЗаработокФСС();
	
	ТаблицыДанныхОСреднем = Новый Структура;
	ТаблицыДанныхОСреднем.Вставить("ДанныеОНачислениях",  ДанныеОНачислениях);
	ТаблицыДанныхОСреднем.Вставить("ДанныеОВремени",      ДанныеВремени);
	ТаблицыДанныхОСреднем.Вставить("ДанныеСтрахователей", ДанныеСтрахователей);
	
	Возврат ТаблицыДанныхОСреднем;
КонецФункции

Функция РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС(БольничныйОбъект)
	РеквизитыДокумента = УчетПособийСоциальногоСтрахования.РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС();
	ЗаполнитьЗначенияСвойств(РеквизитыДокумента, БольничныйОбъект);
	РеквизитыДокумента.РайонныйКоэффициентРФ = БольничныйОбъект.РайонныйКоэффициентРФНаНачалоСобытия;
	РеквизитыДокумента.ПрименятьПредельнуюВеличину = 
		БольничныйОбъект.ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве
		И БольничныйОбъект.ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.Профзаболевание;
	РеквизитыДокумента.ИспользоватьДниБолезниУходаЗаДетьми = ИспользоватьДниБолезниУходаЗаДетьми(БольничныйОбъект);
	РеквизитыДокумента.УчитыватьДниПриостановленияТД = УчитыватьДниПриостановленияТД(БольничныйОбъект);
	РеквизитыДокумента.ДнейПриостановленияТДЗаГод1 = БольничныйОбъект.ДнейПриостановленияТДЗаГод1;
	РеквизитыДокумента.ДнейПриостановленияТДЗаГод2 = БольничныйОбъект.ДнейПриостановленияТДЗаГод2;
	РеквизитыДокумента.ПериодРасчетаСреднегоЗаработкаНачало = Дата(РеквизитыДокумента.ПериодРасчетаСреднегоЗаработкаПервыйГод, 1, 1) ;
	РеквизитыДокумента.ПериодРасчетаСреднегоЗаработкаОкончание = Дата(РеквизитыДокумента.ПериодРасчетаСреднегоЗаработкаВторойГод, 12, 31);
	РеквизитыДокумента.МинимальныйРазмерОплатыТрудаРФ = ЗарплатаКадры.МинимальныйРазмерОплатыТрудаРФ(БольничныйОбъект.ДатаНачалаСобытия);
	Возврат РеквизитыДокумента;
КонецФункции

Функция ИспользоватьДниБолезниУходаЗаДетьми(Больничный) Экспорт
	Возврат Больничный.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам
		И Больничный.ДатаНачалаСобытия >= УчетПособийСоциальногоСтрахованияКлиентСервер.ДатаОтдельногоРасчетаПособийПоМатеринству();
КонецФункции

Функция УчитыватьДниПриостановленияТД(Больничный) Экспорт
	Возврат Больничный.ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам
		И ЗначениеЗаполнено(Больничный.ПричинаНетрудоспособности);
КонецФункции

Процедура СоздатьВТКадровыеДанныеСотрудниковБольничныхЛистов(Запрос, МассивСсылок)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БольничныйЛист.Сотрудник,
	|	БольничныйЛист.ДатаНачалаСобытия КАК Период
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.Ссылка В(&МассивСсылок)";
	Запрос.Выполнить();
	
	Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(Описатель, Истина, "Организация,ФизическоеЛицо,ФИОПолные,ТабельныйНомер,Подразделение,Должность,ВидЗанятости");
	
КонецПроцедуры

Процедура ЗаполнитьДанныеСреднегоЗаработкаПоПредыдущемуДокументу(Объект, Годы) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("Сотрудник", Объект.Сотрудник);
		Запрос.УстановитьПараметр("Годы", Годы);
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	БольничныйЛист.Ссылка,
			|	БольничныйЛист.ПериодРасчетаСреднегоЗаработкаПервыйГод КАК Год,
			|	БольничныйЛист.Дата КАК Дата
			|ПОМЕСТИТЬ ВТДокументыСГодами
			|ИЗ
			|	Документ.БольничныйЛист КАК БольничныйЛист
			|ГДЕ
			|	БольничныйЛист.Проведен
			|	И БольничныйЛист.Сотрудник = &Сотрудник
			|	И БольничныйЛист.Ссылка.ПериодРасчетаСреднегоЗаработкаПервыйГод В(&Годы)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	БольничныйЛист.Ссылка,
			|	БольничныйЛист.ПериодРасчетаСреднегоЗаработкаВторойГод,
			|	БольничныйЛист.Дата
			|ИЗ
			|	Документ.БольничныйЛист КАК БольничныйЛист
			|ГДЕ
			|	БольничныйЛист.Проведен
			|	И БольничныйЛист.Сотрудник = &Сотрудник
			|	И БольничныйЛист.Ссылка.ПериодРасчетаСреднегоЗаработкаВторойГод В(&Годы)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДокументыСГодами.Год,
			|	МАКСИМУМ(ДокументыСГодами.Дата) КАК Дата
			|ПОМЕСТИТЬ ВТДокументыГодовСПоследнимиДатами
			|ИЗ
			|	ВТДокументыСГодами КАК ДокументыСГодами
			|
			|СГРУППИРОВАТЬ ПО
			|	ДокументыСГодами.Год
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(ДокументыСГодами.Ссылка) КАК Ссылка,
			|	ДокументыСГодами.Год
			|ПОМЕСТИТЬ ВТДокументыСоСреднимЗаработком
			|ИЗ
			|	ВТДокументыСГодами КАК ДокументыСГодами
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыГодовСПоследнимиДатами КАК ДокументыГодовСПоследнимиДатами
			|		ПО ДокументыСГодами.Год = ДокументыГодовСПоследнимиДатами.Год
			|			И ДокументыСГодами.Дата = ДокументыГодовСПоследнимиДатами.Дата
			|
			|СГРУППИРОВАТЬ ПО
			|	ДокументыСГодами.Год";
		
		Запрос.Выполнить();
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	БольничныйЛистСреднийЗаработокФСС.ФизическоеЛицо,
			|	БольничныйЛистСреднийЗаработокФСС.Период,
			|	БольничныйЛистСреднийЗаработокФСС.Сумма
			|ИЗ
			|	ВТДокументыСоСреднимЗаработком КАК ПоследнийБольничный
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БольничныйЛист.СреднийЗаработокФСС КАК БольничныйЛистСреднийЗаработокФСС
			|		ПО ПоследнийБольничный.Ссылка = БольничныйЛистСреднийЗаработокФСС.Ссылка
			|			И ПоследнийБольничный.Год = БольничныйЛистСреднийЗаработокФСС.Ссылка.ПериодРасчетаСреднегоЗаработкаПервыйГод
			|			И (ПоследнийБольничный.Год = ГОД(БольничныйЛистСреднийЗаработокФСС.Период))
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	БольничныйЛистСреднийЗаработокФСС.ФизическоеЛицо,
			|	БольничныйЛистСреднийЗаработокФСС.Период,
			|	БольничныйЛистСреднийЗаработокФСС.Сумма
			|ИЗ
			|	ВТДокументыСоСреднимЗаработком КАК ПоследнийБольничный
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БольничныйЛист.СреднийЗаработокФСС КАК БольничныйЛистСреднийЗаработокФСС
			|		ПО ПоследнийБольничный.Ссылка = БольничныйЛистСреднийЗаработокФСС.Ссылка
			|			И ПоследнийБольничный.Год = БольничныйЛистСреднийЗаработокФСС.Ссылка.ПериодРасчетаСреднегоЗаработкаВторойГод
			|			И (ПоследнийБольничный.Год = ГОД(БольничныйЛистСреднийЗаработокФСС.Период))";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(Объект.СреднийЗаработокФСС.Добавить(), Выборка);
			КонецЦикла;
			
		КонецЕсли;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	БольничныйЛистОтработанноеВремяДляСреднегоФСС.ФизическоеЛицо,
			|	БольничныйЛистОтработанноеВремяДляСреднегоФСС.Период,
			|	БольничныйЛистОтработанноеВремяДляСреднегоФСС.ДнейБолезниУходаЗаДетьми
			|ИЗ
			|	ВТДокументыСоСреднимЗаработком КАК ПоследнийБольничный
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БольничныйЛист.ОтработанноеВремяДляСреднегоФСС КАК БольничныйЛистОтработанноеВремяДляСреднегоФСС
			|		ПО ПоследнийБольничный.Ссылка = БольничныйЛистОтработанноеВремяДляСреднегоФСС.Ссылка
			|			И ПоследнийБольничный.Год = БольничныйЛистОтработанноеВремяДляСреднегоФСС.Ссылка.ПериодРасчетаСреднегоЗаработкаПервыйГод
			|			И (ПоследнийБольничный.Год = ГОД(БольничныйЛистОтработанноеВремяДляСреднегоФСС.Период))
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	БольничныйЛистОтработанноеВремяДляСреднегоФСС.ФизическоеЛицо,
			|	БольничныйЛистОтработанноеВремяДляСреднегоФСС.Период,
			|	БольничныйЛистОтработанноеВремяДляСреднегоФСС.ДнейБолезниУходаЗаДетьми
			|ИЗ
			|	ВТДокументыСоСреднимЗаработком КАК ПоследнийБольничный
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БольничныйЛист.ОтработанноеВремяДляСреднегоФСС КАК БольничныйЛистОтработанноеВремяДляСреднегоФСС
			|		ПО ПоследнийБольничный.Ссылка = БольничныйЛистОтработанноеВремяДляСреднегоФСС.Ссылка
			|			И ПоследнийБольничный.Год = БольничныйЛистОтработанноеВремяДляСреднегоФСС.Ссылка.ПериодРасчетаСреднегоЗаработкаВторойГод
			|			И (ПоследнийБольничный.Год = ГОД(БольничныйЛистОтработанноеВремяДляСреднегоФСС.Период))";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(Объект.ОтработанноеВремяДляСреднегоФСС.Добавить(), Выборка);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ЭЛН

// Вызывается после загрузки ЭЛН.
Процедура ПослеЗагрузкиЭЛН(ДокументОбъект, ДанныеИзСервиса) Экспорт
	Возврат; // Обработка не требуется.
КонецПроцедуры

// Получает предыдущий проведенный документ в цепочке исправлений по переданной ссылке на документ.
Функция ПредыдущийПроведенныйДокументИзЦепочкиИсправлений(БольничныйОбъект, НомерЛН, ГоловнаяОрганизация, Поля = Неопределено) Экспорт
	ОтборКД = Новый ОтборКомпоновкиДанных;
	ЗапросыБЗК.ДобавитьОтбор(ОтборКД, "Проведен", "=", Истина);
	ЗапросыБЗК.ДобавитьОтбор(ОтборКД, "Ссылка", "<>", БольничныйОбъект.Ссылка);
	Возврат ПоследнийДокументВЦепочкеИсправлений(НомерЛН, ГоловнаяОрганизация, ОтборКД, Поля);
КонецФункции

// Получает последний больничный по номеру ЛН.
Функция ПоследнийДокументВЦепочкеИсправлений(НомерЛН, ГоловнаяОрганизация, Отбор = Неопределено, Поля = Неопределено) Экспорт
	// В случае отсутствия статистики СУБД важен порядок добавления отборов. Сначала - самые селективный (по номеру ЛН).
	ОтборКД = Новый ОтборКомпоновкиДанных;
	ЗапросыБЗК.ДобавитьОтбор(ОтборКД, "НомерЛисткаНетрудоспособности", "=", НомерЛН);
	ЗапросыБЗК.ДобавитьОтбор(ОтборКД, "ГоловнаяОрганизация", "=", ГоловнаяОрганизация);
	ЗапросыБЗК.ДополнитьОтбор(ОтборКД, Отбор);
	ЗапросыБЗК.ДобавитьОтбор(ОтборКД, "ПометкаУдаления", "=", Ложь);
	
	// Вызов требует привилегированного режима, поэтому ключевое слово Разрешенные не используется.
	Если Поля = Неопределено Тогда
		Поля = "Ссылка, Проведен, Дата, ПериодРегистрации";
	КонецЕсли;
	
	НастройкиЗапроса = ЗапросыБЗК.НастройкиЗапросаКТаблице();
	НастройкиЗапроса.Отбор      = ОтборКД;
	НастройкиЗапроса.Порядок    = "ПериодРегистрации УБЫВ, Дата УБЫВ, Проведен УБЫВ, Ссылка УБЫВ";
	НастройкиЗапроса.Количество = 1;
	
	Запрос = ЗапросыБЗК.ЗапросКТаблице("Документ.БольничныйЛист", Поля, НастройкиЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область УходЗаДетьми

// Очищает реквизиты ухода если установлена несоответствующая причина нетрудоспособности.
Процедура ОчиститьСлучайУходаПриНеобходимости(Больничный) Экспорт
	
	Если Больничный.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком Тогда
		Возврат;
	КонецЕсли;
	
	Больничный.СлучайУходаЗаБольнымРебенком = Неопределено;
	
КонецПроцедуры

// Заполнение таблицы периодов ухода за родственниками.
Процедура ЗаполнитьТаблицуУходаЗаРодственниками(Больничный, ДанныеЭЛН) Экспорт
	
	Больничный.ПериодыУходаЗаРодственниками.Очистить();
	
	ОбменЛисткамиНетрудоспособностиФСС.ЗаполнитьДатыУходаЗаРодственниками(
		ДанныеЭЛН,
		Больничный.ГоловнаяОрганизация,
		Больничный.ФизическоеЛицо);
	
	ДатыУхода = ДанныеЭЛН.ДатыУхода;
	Измерения = "НомерРодственника, Родственник, Год, КодПричины, РежимЛечения";
	Ресурсы   = "";
	Реквизиты = "";
	
	ПериодыУхода = ОбщегоНазначенияБЗК.ТаблицаПериодовИзТаблицыДат(ДатыУхода, Измерения, Ресурсы, Реквизиты, Истина);
	Для Каждого ПериодУхода Из ПериодыУхода Цикл
		СтрокаТаблицы = Больничный.ПериодыУходаЗаРодственниками.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПериодУхода, "ДатаНачала, ДатаОкончания, КодПричины, РежимЛечения");
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПериодУхода.Родственник, "КодСвязи, Фамилия, Имя, Отчество, СНИЛС, ДатаРождения, ВозрастЛет, ВозрастМесяцев");
		СтрокаТаблицы.СлучайУхода = УчетПособийСоциальногоСтрахования.СлучайУхода(
			Больничный.ДатаНачалаСобытия,
			СтрокаТаблицы.КодПричины,
			СтрокаТаблицы.ВозрастЛет,
			СтрокаТаблицы.РежимЛечения);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПрямыеВыплаты

// Возникает при заполнении документа ЗаявлениеСотрудникаНаВыплатуПособия на основании текущего документа.
Процедура ЗаполнитьЗаявлениеСотрудникаНаВыплатуПособияПоОснованию(Больничный, Заявление, РеквизитыДокумента, ДанныеДляРасчетаСреднегоЗаработка) Экспорт
	ДанныеДляРасчетаСреднегоЗаработка = ДанныеДокументовДляРасчетаСреднегоЗаработкаФСС(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Больничный)).Получить(Больничный);
	
	НеобходимыеРеквизиты = "Организация, Сотрудник, ПричинаНетрудоспособности, НомерЛисткаНетрудоспособности, "
		+ "ДатаНачала, ДатаОкончания, ФинансированиеФедеральнымБюджетом, "
		+ "ДатаВыдачиЛисткаНетрудоспособности, СреднийДневнойЗаработок, МинимальныйСреднедневнойЗаработок, "
		+ "ПоставленаНаУчетВРанниеСрокиБеременности, Дата, Номер, РайонныйКоэффициентРФнаНачалоСобытия, ДатаНачалаСобытия";
	РеквизитыБольничного = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Больничный, НеобходимыеРеквизиты);
	
	ПричинаНетрудоспособности = РеквизитыБольничного.ПричинаНетрудоспособности;
	Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
		Если РеквизитыБольничного.ПоставленаНаУчетВРанниеСрокиБеременности = Перечисления.ПостановкаНаУчетВРанниеСрокиБеременности.Поставлена
			И УчетПособийСоциальногоСтрахования.ДоступноПособиеВставшимНаУчетВРанниеСроки(РеквизитыБольничного.ДатаНачалаСобытия) Тогда
			РеквизитыДокумента.Вставить("ВидПособия", Перечисления.ПособияНазначаемыеФСС.ПособиеПоБеременностиИРодамВставшимНаУчетВРанниеСроки);
		Иначе
			РеквизитыДокумента.Вставить("ВидПособия", Перечисления.ПособияНазначаемыеФСС.ПособиеПоБеременностиИРодам);
		КонецЕсли;
		РеквизитыДокумента.Вставить("ДатаПриказаОПредоставленииОтпускаПоУходуЗаРебенком",  РеквизитыБольничного.Дата);
		РеквизитыДокумента.Вставить("НомерПриказаОПредоставленииОтпускаПоУходуЗаРебенком", ЗарплатаКадрыОтчеты.НомерНаПечать(РеквизитыБольничного.Номер));
	ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве
		Или ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.Профзаболевание Тогда
		РеквизитыДокумента.Вставить("ВидПособия", Перечисления.ПособияНазначаемыеФСС.ПособиеВСвязиСНесчастнымСлучаемНаПроизводстве);
	Иначе
		РеквизитыДокумента.Вставить("ВидПособия", Перечисления.ПособияНазначаемыеФСС.ПособиеПоВременнойНетрудоспособности);
	КонецЕсли;
	
	РеквизитыДокумента.Вставить("Организация", РеквизитыБольничного.Организация);
	РеквизитыДокумента.Вставить("Сотрудник", РеквизитыБольничного.Сотрудник);
	РеквизитыДокумента.Вставить("НомерЛисткаНетрудоспособности", РеквизитыБольничного.НомерЛисткаНетрудоспособности);
	РеквизитыДокумента.Вставить("ДатаЛисткаНетрудоспособности", РеквизитыБольничного.ДатаВыдачиЛисткаНетрудоспособности);
	МинимальныйСреднедневнойЗаработок = УчетПособийСоциальногоСтрахования.МинимальныйСреднедневнойЗаработокДляСравненияСМРОТ(
		РеквизитыБольничного.МинимальныйСреднедневнойЗаработок,
		РеквизитыБольничного.РайонныйКоэффициентРФнаНачалоСобытия,
		РеквизитыБольничного.ДатаНачалаСобытия);
	РеквизитыДокумента.Вставить("СреднийДневнойЗаработок", РеквизитыБольничного.СреднийДневнойЗаработок);
	РеквизитыДокумента.Вставить("СреднийЗаработокЗаРасчетныйПериод", Макс(РеквизитыБольничного.СреднийДневнойЗаработок, МинимальныйСреднедневнойЗаработок));
	РеквизитыДокумента.Вставить("ДатаПредставленияПакетаДокументов", РеквизитыБольничного.Дата);
	РеквизитыДокумента.Вставить("ДатаНачалаОтпускаПоУходуЗаРебенком",    РеквизитыБольничного.ДатаНачала);
	РеквизитыДокумента.Вставить("ДатаОкончанияОтпускаПоУходуЗаРебенком", РеквизитыБольничного.ДатаОкончания);
	РеквизитыДокумента.Вставить("ФинансированиеФедеральнымБюджетом",     РеквизитыБольничного.ФинансированиеФедеральнымБюджетом);
КонецПроцедуры

#КонецОбласти

#Область СЭДО

// Возникает при заполнении документов ВходящийЗапросФССДляРасчетаПособия и ОтветНаЗапросФССДляРасчетаПособия.
// Получает последний больничный по № ЛН.
Процедура ЗаполнитьПервичныйДокументДляРасчетаПособияФСС(ДокументСЭДО, Реквизиты) Экспорт
	Если ТипЗнч(ДокументСЭДО.ПервичныйДокумент) = Тип("ДокументСсылка.БольничныйЛист")
		И ЗначениеЗаполнено(ДокументСЭДО.ПервичныйДокумент) Тогда
		ИменаРеквизитов = "ГоловнаяОрганизация, ФизическоеЛицо";
		Больничный = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСЭДО.ПервичныйДокумент, ИменаРеквизитов);
		Если Больничный.ГоловнаяОрганизация = ДокументСЭДО.ГоловнаяОрганизация
			И Больничный.ФизическоеЛицо = ДокументСЭДО.ФизическоеЛицо Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ФизическоеЛицо", ДокументСЭДО.ФизическоеЛицо);
	Больничный = ПоследнийДокументВЦепочкеИсправлений(ДокументСЭДО.НомерЛН, ДокументСЭДО.ГоловнаяОрганизация, Отбор);
	Если Больничный <> Неопределено Тогда
		Реквизиты.Вставить("ПервичныйДокумент", Больничный.Ссылка);
	КонецЕсли;
КонецПроцедуры

// Возникает при заполнении документа ОтветНаЗапросФССДляРасчетаПособия на основании больничного.
Процедура ЗаполнитьОтветНаЗапросФССДляРасчетаПособия(Больничный, ДокументСЭДО, Реквизиты, ДанныеДляРасчетаСреднегоЗаработка) Экспорт
	Массив = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Больничный);
	ДанныеДляРасчетаСреднегоЗаработка = ДанныеДокументовДляРасчетаСреднегоЗаработкаФСС(Массив).Получить(Больничный);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БольничныйЛист.Организация КАК Организация,
	|	БольничныйЛист.Сотрудник КАК Сотрудник,
	|	БольничныйЛист.ПричинаНетрудоспособности КАК ПричинаНетрудоспособности,
	|	БольничныйЛист.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	БольничныйЛист.ДатаНачала КАК ДатаНачала,
	|	БольничныйЛист.ДатаОкончания КАК ДатаОкончания,
	|	БольничныйЛист.ФинансированиеФедеральнымБюджетом КАК ФинансированиеФедеральнымБюджетом,
	|	БольничныйЛист.ДатаВыдачиЛисткаНетрудоспособности КАК ДатаВыдачиЛисткаНетрудоспособности,
	|	БольничныйЛист.СреднийДневнойЗаработок КАК СреднийДневнойЗаработок,
	|	БольничныйЛист.МинимальныйСреднедневнойЗаработок КАК МинимальныйСреднедневнойЗаработок,
	|	БольничныйЛист.ПоставленаНаУчетВРанниеСрокиБеременности КАК ПоставленаНаУчетВРанниеСрокиБеременности,
	|	БольничныйЛист.Дата КАК Дата,
	|	БольничныйЛист.Номер КАК Номер,
	|	БольничныйЛист.РайонныйКоэффициентРФНаНачалоСобытия КАК РайонныйКоэффициентРФНаНачалоСобытия,
	|	БольничныйЛист.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	БольничныйЛист.СтажЛет КАК СтажЛет,
	|	БольничныйЛист.СтажМесяцев КАК СтажМесяцев,
	|	БольничныйЛист.СтажДней КАК СтажДней,
	|	БольничныйЛист.СтажРасширенныйЛет КАК СтажРасширенныйЛет,
	|	БольничныйЛист.СтажРасширенныйМесяцев КАК СтажРасширенныйМесяцев,
	|	БольничныйЛист.СтажРасширенныйДней КАК СтажРасширенныйДней,
	|	БольничныйЛист.УсловияИсчисленияКод1 КАК УсловияИсчисленияКод1,
	|	БольничныйЛист.УсловияИсчисленияКод2 КАК УсловияИсчисленияКод2,
	|	БольничныйЛист.УсловияИсчисленияКод3 КАК УсловияИсчисленияКод3,
	|	БольничныйЛист.ИсключаемыеПериоды.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ДатаНачала КАК ДатаНачала,
	|		ДатаОкончания КАК ДатаОкончания,
	|		КалендарныхДней КАК КалендарныхДней,
	|		Регистрировать КАК Регистрировать,
	|		Изменил КАК Изменил,
	|		Комментарий КАК Комментарий,
	|		Причина КАК Причина
	|	) КАК ИсключаемыеПериоды,
	|	БольничныйЛист.ПриостановленияТрудовыхДоговоров.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ДатаНачала КАК ДатаНачала,
	|		ДатаОкончания КАК ДатаОкончания,
	|		КалендарныхДней КАК КалендарныхДней,
	|		ОснованиеНПА КАК ОснованиеНПА
	|	) КАК ПриостановленияТрудовыхДоговоров
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Больничный);
	РеквизитыБольничного = Запрос.Выполнить().Выгрузить()[0];
	
	ПричинаНетрудоспособности = РеквизитыБольничного.ПричинаНетрудоспособности;
	Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
		Реквизиты.Вставить("ВидПособия", Перечисления.ПособияНазначаемыеФСС.ПособиеПоБеременностиИРодам);
	ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве
		Или ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.Профзаболевание Тогда
		Реквизиты.Вставить("ВидПособия", Перечисления.ПособияНазначаемыеФСС.ПособиеВСвязиСНесчастнымСлучаемНаПроизводстве);
	Иначе
		Реквизиты.Вставить("ВидПособия", Перечисления.ПособияНазначаемыеФСС.ПособиеПоВременнойНетрудоспособности);
	КонецЕсли;
	
	НомерНаПечать = ЗарплатаКадрыОтчеты.НомерНаПечать(РеквизитыБольничного.Номер);
	
	Реквизиты.Вставить("Организация",         РеквизитыБольничного.Организация);
	Реквизиты.Вставить("Сотрудник",           РеквизитыБольничного.Сотрудник);
	Реквизиты.Вставить("НомерЛН",             РеквизитыБольничного.НомерЛисткаНетрудоспособности);
	Реквизиты.Вставить("ДатаНачалаСобытия",   РеквизитыБольничного.ДатаНачалаСобытия);
	Реквизиты.Вставить("РайонныйКоэффициент", РеквизитыБольничного.РайонныйКоэффициентРФНаНачалоСобытия);
	
	Реквизиты.Вставить("ДатаНачала",          РеквизитыБольничного.ДатаНачала);
	Реквизиты.Вставить("ДатаОкончания",       РеквизитыБольничного.ДатаОкончания);
	
	Реквизиты.Вставить("ОтпускПоУходуДата",          РеквизитыБольничного.Дата);
	Реквизиты.Вставить("ОтпускПоУходуДатаНачала",    РеквизитыБольничного.ДатаНачала);
	Реквизиты.Вставить("ОтпускПоУходуДатаОкончания", РеквизитыБольничного.ДатаОкончания);
	Реквизиты.Вставить("ОтпускПоУходуНомер",         НомерНаПечать);
	
	Реквизиты.Вставить("ПричинаПредоставленияЛьготы", РеквизитыБольничного.ФинансированиеФедеральнымБюджетом);
	Реквизиты.Вставить("УсловияИсчисленияКод1",       РеквизитыБольничного.УсловияИсчисленияКод1);
	Реквизиты.Вставить("УсловияИсчисленияКод2",       РеквизитыБольничного.УсловияИсчисленияКод2);
	Реквизиты.Вставить("УсловияИсчисленияКод3",       РеквизитыБольничного.УсловияИсчисленияКод3);
	Реквизиты.Вставить("ИсключаемыеПериоды",          РеквизитыБольничного.ИсключаемыеПериоды);
	
	Реквизиты.Вставить("ПриостановленияТрудовыхДоговоров", РеквизитыБольничного.ПриостановленияТрудовыхДоговоров);
	
	МинимальныйСреднедневной = УчетПособийСоциальногоСтрахования.МинимальныйСреднедневнойЗаработокДляСравненияСМРОТ(
		РеквизитыБольничного.МинимальныйСреднедневнойЗаработок,
		РеквизитыБольничного.РайонныйКоэффициентРФнаНачалоСобытия,
		РеквизитыБольничного.ДатаНачалаСобытия);
	Среднедневной = Макс(РеквизитыБольничного.СреднийДневнойЗаработок, МинимальныйСреднедневной);
	Реквизиты.Вставить("СреднемесячныйЗаработок", Окр(Среднедневной * 30.4, 2));
	
	НестраховойСтаж = УчетПособийСоциальногоСтрахования.НестраховойСтаж(РеквизитыБольничного);
	Если НестраховойСтаж.Лет <> 0 Или НестраховойСтаж.Месяцев <> 0 Тогда
		Реквизиты.Вставить("СтраховойСтажЛет",       РеквизитыБольничного.СтажРасширенныйЛет);
		Реквизиты.Вставить("СтраховойСтажМесяцев",   РеквизитыБольничного.СтажРасширенныйМесяцев);
		Реквизиты.Вставить("НестраховойСтажЛет",     НестраховойСтаж.Лет);
		Реквизиты.Вставить("НестраховойСтажМесяцев", НестраховойСтаж.Месяцев);
	Иначе
		Реквизиты.Вставить("СтраховойСтажЛет",       РеквизитыБольничного.СтажЛет);
		Реквизиты.Вставить("СтраховойСтажМесяцев",   РеквизитыБольничного.СтажМесяцев);
		Реквизиты.Вставить("НестраховойСтажЛет",     0);
		Реквизиты.Вставить("НестраховойСтажМесяцев", 0);
	КонецЕсли;
	
КонецПроцедуры

// Возникает при заполнении документа ИсходящееСообщениеОСтраховомСлучаеФСС на основании больничного.
Процедура ЗаполнитьИсходящееСообщениеОСтраховомСлучаеФСС(Больничный, ДокументСЭДО, Реквизиты) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БольничныйЛист.Организация КАК Организация,
	|	БольничныйЛист.Сотрудник КАК Сотрудник,
	|	БольничныйЛист.ПричинаНетрудоспособности КАК ПричинаНетрудоспособности,
	|	БольничныйЛист.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	БольничныйЛист.ДатаНачала КАК ДатаНачала,
	|	БольничныйЛист.ДатаОкончания КАК ДатаОкончания,
	|	БольничныйЛист.ДатаНачалаСобытия КАК ДатаНачалаСобытия
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Больничный);
	РеквизитыБольничного = Запрос.Выполнить().Выгрузить()[0];
	
	Причина                              = РеквизитыБольничного.ПричинаНетрудоспособности;
	Реквизиты.ВидПособия                 = Перечисления.ПособияНазначаемыеФСС.НайтиПоПричинеНетрудоспособности(Причина);
	Реквизиты.Организация                = РеквизитыБольничного.Организация;
	Реквизиты.Сотрудник                  = РеквизитыБольничного.Сотрудник;
	Реквизиты.НомерЛН                    = РеквизитыБольничного.НомерЛисткаНетрудоспособности;
	Реквизиты.ДатаНачалаСобытия          = РеквизитыБольничного.ДатаНачалаСобытия;
	Реквизиты.ОтпускПоУходуДатаНачала    = РеквизитыБольничного.ДатаНачала;
	Реквизиты.ОтпускПоУходуДатаОкончания = РеквизитыБольничного.ДатаОкончания;
КонецПроцедуры

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать ПоследнийДокументВЦепочкеИсправлений.
// Получает последний больничный по номеру ЛН.
Функция ПоследнийБольничныйПоНомеру(НомерЛисткаНетрудоспособности, УдаляемыйБольничный = Неопределено, Отбор = Неопределено) Экспорт
	// Вызов требует привилегированного режима, поэтому ключевое слово Разрешенные не используется.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Больничный.Ссылка КАК Ссылка,
	|	Больничный.Проведен КАК Проведен,
	|	Больничный.Дата КАК Дата,
	|	Больничный.ПериодРегистрации КАК ПериодРегистрации
	|ИЗ
	|	Документ.БольничныйЛист КАК Больничный
	|ГДЕ
	|	Больничный.НомерЛисткаНетрудоспособности = &НомерЛисткаНетрудоспособности
	|	И НЕ Больничный.ПометкаУдаления
	|	И Больничный.Ссылка <> &УдаляемыйБольничный
	|	И &ТекстДополнительныхУсловий
	|
	|УПОРЯДОЧИТЬ ПО
	|	Проведен УБЫВ,
	|	ПериодРегистрации УБЫВ,
	|	Дата УБЫВ,
	|	Ссылка УБЫВ";
	Запрос.УстановитьПараметр("НомерЛисткаНетрудоспособности", НомерЛисткаНетрудоспособности);
	Запрос.УстановитьПараметр("УдаляемыйБольничный", УдаляемыйБольничный);
	
	// Отборы.
	Если Отбор = Неопределено Или Отбор.Количество() = 0 Тогда
		ТекстДополнительныхУсловий = "";
	Иначе
		ФрагментыУсловий = ФрагментыУсловийОтбора(Запрос, "Больничный", Отбор);
		ТекстДополнительныхУсловий = "И " + СтрСоединить(ФрагментыУсловий, " И ");
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ТекстДополнительныхУсловий", ТекстДополнительныхУсловий);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Устарела. Следует использовать СЭДОФСС.ЗаполнитьСсылкиРодственников.
Процедура ПриЗаполненииСсылокРодственников(Больничный, РодственникиЭЛН) Экспорт
	Возврат; // Обработка не требуется.
КонецПроцедуры

#КонецОбласти


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает запрос по начислениям по указанному отборы и параметрам.
Функция ЗапросПоБольничным(Отбор, ПоляУпорядочивания, КоличествоПервых) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	БольничныйЛист.Ссылка КАК Ссылка,
	|	БольничныйЛист.ПометкаУдаления КАК ПометкаУдаления,
	|	БольничныйЛист.Номер КАК Номер,
	|	БольничныйЛист.Дата КАК Дата,
	|	БольничныйЛист.Проведен КАК Проведен,
	|	БольничныйЛист.АдресМедицинскойОрганизации КАК АдресМедицинскойОрганизации,
	|	БольничныйЛист.ВторойКодПричиныНетрудоспособности КАК ВторойКодПричиныНетрудоспособности,
	|	БольничныйЛист.ГруппаИнвалидности КАК ГруппаИнвалидности,
	|	БольничныйЛист.УтратаТрудоспобности КАК УтратаТрудоспобности,
	|	БольничныйЛист.ДатаАктаН1 КАК ДатаАктаН1,
	|	БольничныйЛист.ДатаВыдачиЛисткаНетрудоспособности КАК ДатаВыдачиЛисткаНетрудоспособности,
	|	БольничныйЛист.ДатаИзмененияКодаПричиныНетрудоспособности КАК ДатаИзмененияКодаПричиныНетрудоспособности,
	|	БольничныйЛист.ДатаНаправленияВБюроМСЭ КАК ДатаНаправленияВБюроМСЭ,
	|	БольничныйЛист.ДатаНарушенияРежима КАК ДатаНарушенияРежима,
	|	БольничныйЛист.ДатаНачала КАК ДатаНачала,
	|	БольничныйЛист.ДатаНачалаОплаты КАК ДатаНачалаОплаты,
	|	БольничныйЛист.ДатаНачалаПоловиннойОплаты КАК ДатаНачалаПоловиннойОплаты,
	|	БольничныйЛист.ДатаНачалаРаботы КАК ДатаНачалаРаботы,
	|	БольничныйЛист.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	БольничныйЛист.ДатаНовыйСтатусНетрудоспособного КАК ДатаНовыйСтатусНетрудоспособного,
	|	БольничныйЛист.ДатаОкончания КАК ДатаОкончания,
	|	БольничныйЛист.ДатаОкончанияОплаты КАК ДатаОкончанияОплаты,
	|	БольничныйЛист.ДатаОкончанияПутевки КАК ДатаОкончанияПутевки,
	|	БольничныйЛист.ДатаОсвидетельствованияМСЭ КАК ДатаОсвидетельствованияМСЭ,
	|	БольничныйЛист.ДатаРегистрацииДокументовМСЭ КАК ДатаРегистрацииДокументовМСЭ,
	|	БольничныйЛист.ДнейОплаты КАК ДнейОплаты,
	|	БольничныйЛист.ДоляНеполногоВремени КАК ДоляНеполногоВремени,
	|	БольничныйЛист.ДополнительныйКодПричиныНетрудоспособности КАК ДополнительныйКодПричиныНетрудоспособности,
	|	БольничныйЛист.КодНарушенияРежима КАК КодНарушенияРежима,
	|	БольничныйЛист.КодПричиныНетрудоспособности КАК КодПричиныНетрудоспособности,
	|	БольничныйЛист.Комментарий КАК Комментарий,
	|	БольничныйЛист.МедицинскаяОрганизация КАК МедицинскаяОрганизация,
	|	БольничныйЛист.МинимальныйСреднедневнойЗаработок КАК МинимальныйСреднедневнойЗаработок,
	|	БольничныйЛист.НазначитьПособие КАК НазначитьПособие,
	|	БольничныйЛист.НаименованиеМедицинскойОрганизации КАК НаименованиеМедицинскойОрганизации,
	|	БольничныйЛист.НаименованиеОрганизацииВЛисткеНетрудоспособности КАК НаименованиеОрганизацииВЛисткеНетрудоспособности,
	|	БольничныйЛист.Начислено КАК Начислено,
	|	БольничныйЛист.НовыйСтатусНетрудоспособного КАК НовыйСтатусНетрудоспособного,
	|	БольничныйЛист.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	БольничныйЛист.НомерЛисткаПоОсновномуМестуРаботы КАК НомерЛисткаПоОсновномуМестуРаботы,
	|	БольничныйЛист.НомерЛисткаПродолжения КАК НомерЛисткаПродолжения,
	|	БольничныйЛист.НомерПервичногоЛисткаНетрудоспособности КАК НомерПервичногоЛисткаНетрудоспособности,
	|	БольничныйЛист.НомерПутевки КАК НомерПутевки,
	|	БольничныйЛист.ОграничениеПособия КАК ОграничениеПособия,
	|	БольничныйЛист.ОграничениеПособияБезЛьгот КАК ОграничениеПособияБезЛьгот,
	|	БольничныйЛист.ОГРН_Санатория КАК ОГРН_Санатория,
	|	БольничныйЛист.ОГРНМедицинскойОрганизации КАК ОГРНМедицинскойОрганизации,
	|	БольничныйЛист.Организация КАК Организация,
	|	БольничныйЛист.ОсвобождениеДатаНачала1 КАК ОсвобождениеДатаНачала1,
	|	БольничныйЛист.ОсвобождениеДатаНачала2 КАК ОсвобождениеДатаНачала2,
	|	БольничныйЛист.ОсвобождениеДатаНачала3 КАК ОсвобождениеДатаНачала3,
	|	БольничныйЛист.ОсвобождениеДатаОкончания1 КАК ОсвобождениеДатаОкончания1,
	|	БольничныйЛист.ОсвобождениеДатаОкончания2 КАК ОсвобождениеДатаОкончания2,
	|	БольничныйЛист.ОсвобождениеДатаОкончания3 КАК ОсвобождениеДатаОкончания3,
	|	БольничныйЛист.ОсвобождениеДолжностьВрача1 КАК ОсвобождениеДолжностьВрача1,
	|	БольничныйЛист.ОсвобождениеДолжностьВрача2 КАК ОсвобождениеДолжностьВрача2,
	|	БольничныйЛист.ОсвобождениеДолжностьВрача3 КАК ОсвобождениеДолжностьВрача3,
	|	БольничныйЛист.ОсвобождениеДолжностьВрачаПредседателяВК1 КАК ОсвобождениеДолжностьВрачаПредседателяВК1,
	|	БольничныйЛист.ОсвобождениеДолжностьВрачаПредседателяВК2 КАК ОсвобождениеДолжностьВрачаПредседателяВК2,
	|	БольничныйЛист.ОсвобождениеДолжностьВрачаПредседателяВК3 КАК ОсвобождениеДолжностьВрачаПредседателяВК3,
	|	БольничныйЛист.ОсвобождениеИдентификационныйНомерВрача1 КАК ОсвобождениеИдентификационныйНомерВрача1,
	|	БольничныйЛист.ОсвобождениеИдентификационныйНомерВрача2 КАК ОсвобождениеИдентификационныйНомерВрача2,
	|	БольничныйЛист.ОсвобождениеИдентификационныйНомерВрача3 КАК ОсвобождениеИдентификационныйНомерВрача3,
	|	БольничныйЛист.ОсвобождениеИдентификационныйНомерВрачаПредседателяВК1 КАК ОсвобождениеИдентификационныйНомерВрачаПредседателяВК1,
	|	БольничныйЛист.ОсвобождениеИдентификационныйНомерВрачаПредседателяВК2 КАК ОсвобождениеИдентификационныйНомерВрачаПредседателяВК2,
	|	БольничныйЛист.ОсвобождениеИдентификационныйНомерВрачаПредседателяВК3 КАК ОсвобождениеИдентификационныйНомерВрачаПредседателяВК3,
	|	БольничныйЛист.ОсвобождениеФИОВрача1 КАК ОсвобождениеФИОВрача1,
	|	БольничныйЛист.ОсвобождениеФИОВрача2 КАК ОсвобождениеФИОВрача2,
	|	БольничныйЛист.ОсвобождениеФИОВрача3 КАК ОсвобождениеФИОВрача3,
	|	БольничныйЛист.ОсвобождениеФИОВрачаПредседателяВК1 КАК ОсвобождениеФИОВрачаПредседателяВК1,
	|	БольничныйЛист.ОсвобождениеФИОВрачаПредседателяВК2 КАК ОсвобождениеФИОВрачаПредседателяВК2,
	|	БольничныйЛист.ОсвобождениеФИОВрачаПредседателяВК3 КАК ОсвобождениеФИОВрачаПредседателяВК3,
	|	БольничныйЛист.ОсновноеМестоРаботы КАК ОсновноеМестоРаботы,
	|	БольничныйЛист.Ответственный КАК Ответственный,
	|	БольничныйЛист.ПервичныйБольничныйЛист КАК ПервичныйБольничныйЛист,
	|	БольничныйЛист.ПериодНахожденияВСтационареСРебенкомПо КАК ПериодНахожденияВСтационареСРебенкомПо,
	|	БольничныйЛист.ПериодНахожденияВСтационареСРебенкомС КАК ПериодНахожденияВСтационареСРебенкомС,
	|	БольничныйЛист.ПериодРасчетаСреднегоЗаработкаВторойГод КАК ПериодРасчетаСреднегоЗаработкаВторойГод,
	|	БольничныйЛист.ПериодРасчетаСреднегоЗаработкаПервыйГод КАК ПериодРасчетаСреднегоЗаработкаПервыйГод,
	|	БольничныйЛист.ПериодРегистрации КАК ПериодРегистрации,
	|	БольничныйЛист.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты,
	|	БольничныйЛист.ПособиеВыплачиваетсяФСС КАК ПособиеВыплачиваетсяФСС,
	|	БольничныйЛист.ПоставленаНаУчетВРанниеСрокиБеременности КАК ПоставленаНаУчетВРанниеСрокиБеременности,
	|	БольничныйЛист.ПоУходуВозрастЛет1 КАК ПоУходуВозрастЛет1,
	|	БольничныйЛист.ПоУходуВозрастЛет2 КАК ПоУходуВозрастЛет2,
	|	БольничныйЛист.ПоУходуВозрастМесяцев1 КАК ПоУходуВозрастМесяцев1,
	|	БольничныйЛист.ПоУходуВозрастМесяцев2 КАК ПоУходуВозрастМесяцев2,
	|	БольничныйЛист.ПоУходуИспользованоДней1 КАК ПоУходуИспользованоДней1,
	|	БольничныйЛист.ПоУходуИспользованоДней2 КАК ПоУходуИспользованоДней2,
	|	БольничныйЛист.ПоУходуРодственнаяСвязь1 КАК ПоУходуРодственнаяСвязь1,
	|	БольничныйЛист.ПоУходуРодственнаяСвязь2 КАК ПоУходуРодственнаяСвязь2,
	|	БольничныйЛист.ПоУходуФИО1 КАК ПоУходуФИО1,
	|	БольничныйЛист.ПоУходуФИО2 КАК ПоУходуФИО2,
	|	БольничныйЛист.ПредоставленДубликатЛисткаНетрудоспособности КАК ПредоставленДубликатЛисткаНетрудоспособности,
	|	БольничныйЛист.ПрименятьЛьготыПриНачисленииПособия КАК ПрименятьЛьготыПриНачисленииПособия,
	|	БольничныйЛист.ПриступитьКРаботеС КАК ПриступитьКРаботеС,
	|	БольничныйЛист.ПричинаНетрудоспособности КАК ПричинаНетрудоспособности,
	|	БольничныйЛист.ПроцентОплаты КАК ПроцентОплаты,
	|	БольничныйЛист.ПроцентОплатыБезЛьгот КАК ПроцентОплатыБезЛьгот,
	|	БольничныйЛист.РайонныйКоэффициентРФНаНачалоСобытия КАК РайонныйКоэффициентРФнаНачалоСобытия,
	|	БольничныйЛист.СлучайУходаЗаБольнымРебенком КАК СлучайУходаЗаБольнымРебенком,
	|	БольничныйЛист.Сотрудник КАК Сотрудник,
	|	БольничныйЛист.СреднийДневнойЗаработок КАК СреднийДневнойЗаработок,
	|	БольничныйЛист.СтажЛет КАК СтажЛет,
	|	БольничныйЛист.СтажМесяцев КАК СтажМесяцев,
	|	БольничныйЛист.СтажДней КАК СтажДней,
	|	БольничныйЛист.СтажРасширенныйЛет КАК СтажРасширенныйЛет,
	|	БольничныйЛист.СтажРасширенныйМесяцев КАК СтажРасширенныйМесяцев,
	|	БольничныйЛист.СтажРасширенныйДней КАК СтажРасширенныйДней,
	|	БольничныйЛист.Удержано КАК Удержано,
	|	БольничныйЛист.УсловияИсчисленияКод1 КАК УсловияИсчисленияКод1,
	|	БольничныйЛист.УсловияИсчисленияКод2 КАК УсловияИсчисленияКод2,
	|	БольничныйЛист.УсловияИсчисленияКод3 КАК УсловияИсчисленияКод3,
	|	БольничныйЛист.ФизическоеЛицо КАК ФизическоеЛицо,
	|	БольничныйЛист.ФинансированиеФедеральнымБюджетом КАК ФинансированиеФедеральнымБюджетом,
	|	БольничныйЛист.ЯвляетсяПродолжениемБолезни КАК ЯвляетсяПродолжениемБолезни,
	|	БольничныйЛист.Представление КАК Представление
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист";
	
	Если КоличествоПервых <> 1 Тогда
		Если КоличествоПервых = 0 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ ПЕРВЫЕ 1", "ВЫБРАТЬ");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ ПЕРВЫЕ 1", "ВЫБРАТЬ ПЕРВЫЕ " + Формат(КоличествоПервых, "ЧГ="));
		КонецЕсли;
	КонецЕсли;
	
	// Отборы.
	Если Отбор.Количество() > 0 Тогда
		ФрагментыУсловий = ФрагментыУсловийОтбора(Запрос, "БольничныйЛист", Отбор);
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	" + СтрСоединить(ФрагментыУсловий, " И ");
	КонецЕсли;
	
	// Порядок.
	Если ЗначениеЗаполнено(ПоляУпорядочивания) Тогда
		Запрос.Текст = Запрос.Текст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	" + ПоляУпорядочивания;
	КонецЕсли;
	
	Возврат Запрос;
КонецФункции

Функция ФрагментыУсловийОтбора(Запрос, ИмяТаблицы, Отбор)
	ФрагментыУсловий = Новый Массив;
	Для Каждого КлючИЗначение Из Отбор Цикл
		ИмяОтбора = КлючИЗначение.Ключ;
		ЗначениеОтбора = КлючИЗначение.Значение;
		Если ТипЗнч(ЗначениеОтбора) = Тип("ФиксированныйМассив") Тогда
			ЗначениеОтбора = Новый Массив(ЗначениеОтбора);
		КонецЕсли;
		Запрос.УстановитьПараметр(ИмяОтбора, ЗначениеОтбора);
		Если ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
			ФрагментыУсловий.Добавить(СтрШаблон("%1.%2 В (&%2)", ИмяТаблицы, ИмяОтбора))
		Иначе
			ФрагментыУсловий.Добавить(СтрШаблон("%1.%2 = &%2", ИмяТаблицы, ИмяОтбора))
		КонецЕсли;
	КонецЦикла;
	Возврат ФрагментыУсловий;
КонецФункции

Процедура ЗаполнитьПараметрыОплаты(Больничный, Кэш) Экспорт
	
	// Включается флажок "Оплачивать" и период оплаты приравнивается к периоду нетрудоспособности.
	Больничный.НазначитьПособие    = Истина;
	Больничный.ДатаНачалаОплаты    = Больничный.ДатаНачала;
	Больничный.ДатаОкончанияОплаты = Больничный.ДатаОкончания;
	
	// Таблица исключаемых периодов очищается.
	Если Больничный.АвтозаполнениеПериодовОплаты Тогда
		ЗаполнитьИсключаемыеПериоды(Больничный, Кэш);
	КонецЕсли;
	
	// Определяется набор оплачиваемых дней (исходя из периода нетрудоспособности, периода оплаты и исключаемых периодов).
	// Если количество дней в наборе больше максимального, то набор оплачиваемых дней сокращается.
	ОплачиваемыеДатыНачислений = ОплачиваемыеДатыНачислений(Больничный, Кэш);
	
	// Если количество дней в наборе больше максимального, и таблица исключаемых периодов не пустая,
	// то добавляется период с причиной, соответствующей неоплачиваемому начислению больничного.
	НеучтенныеИсключаемыеДаты = НеучтенныеИсключаемыеДаты(Больничный, Кэш);
	Если НеучтенныеИсключаемыеДаты <> Неопределено И Больничный.ИсключаемыеПериоды.Количество() > 0 Тогда
		НеучтенныеПериоды = ОбщегоНазначенияБЗК.ПериодыИзМассиваДат(НеучтенныеИсключаемыеДаты);
		Для Каждого НеучтенныйПериод Из НеучтенныеПериоды Цикл
			ИсключаемыйПериод = Больничный.ИсключаемыеПериоды.Добавить();
			ИсключаемыйПериод.Регистрировать  = Истина;
			ИсключаемыйПериод.ДатаНачала      = НачалоДня(Макс(НеучтенныйПериод.ДатаНачала, Больничный.ДатаНачала));
			ИсключаемыйПериод.ДатаОкончания   = НачалоДня(Мин(НеучтенныйПериод.ДатаОкончания, Больничный.ДатаОкончания));
			ИсключаемыйПериод.КалендарныхДней = ОбщегоНазначенияБЗК.КоличествоДнейВПериоде(
				ИсключаемыйПериод.ДатаНачала,
				ИсключаемыйПериод.ДатаОкончания);
		КонецЦикла;
	КонецЕсли;
	
	// На основании набора оплачиваемых дней заполняется количество оплачиваемых дней,
	// флажок "Назначить пособие" и период оплаты.
	Больничный.ДнейОплаты = ОплачиваемыеДатыНачислений.Количество();
	Если Больничный.ДнейОплаты = 0 Тогда
		Больничный.НазначитьПособие    = Ложь;
		Больничный.ДатаНачалаОплаты    = Неопределено;
		Больничный.ДатаОкончанияОплаты = Неопределено;
	Иначе
		Больничный.НазначитьПособие    = Истина;
		Больничный.ДатаНачалаОплаты    = ОплачиваемыеДатыНачислений[0].Дата;
		Больничный.ДатаОкончанияОплаты = ОплачиваемыеДатыНачислений[Больничный.ДнейОплаты - 1].Дата;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИсключаемыеПериоды(Больничный, Кэш)
	Больничный.ИсключаемыеПериоды.Очистить();
	ДобавитьДатыДоНачалаПериодаНетрудоспособности(Больничный);
КонецПроцедуры

Процедура ДобавитьДатыДоНачалаПериодаНетрудоспособности(Больничный)
	Если Больничный.ЯвляетсяПродолжениемБолезни Тогда
		Возврат;
	КонецЕсли;
	ПериодЛН = УчетПособийСоциальногоСтрахованияКлиентСервер.ПериодЛН(Больничный);
	Если Больничный.ДатаНачала > ПериодЛН.ДатаНачала Тогда
		ИсключаемыйПериод = Больничный.ИсключаемыеПериоды.Добавить();
		ИсключаемыйПериод.ДатаНачала     = ПериодЛН.ДатаНачала;
		ИсключаемыйПериод.ДатаОкончания  = Больничный.ДатаНачала - 86400;
		ИсключаемыйПериод.Причина        = Перечисления.ПричиныНеоплатыБольничных.Иное;
		ИсключаемыйПериод.Регистрировать = Ложь;
	КонецЕсли;
КонецПроцедуры

Функция ОплачиваемыеДатыНачислений(Больничный, Кэш) Экспорт
	Значение = Кэш["ОплачиваемыеДатыНачислений"];
	Если Значение <> Неопределено Тогда
		Возврат Значение;
	КонецЕсли;
	ДатыНачислений             = ДатыНачислений(Больничный, Кэш);
	ОплачиваемыеДатыНачислений = ДатыНачислений.Скопировать(Новый Структура("Оплачивать", Истина));
	Кэш.Вставить("ОплачиваемыеДатыНачислений", ОплачиваемыеДатыНачислений);
	Возврат ОплачиваемыеДатыНачислений;
КонецФункции

Функция НеучтенныеИсключаемыеДаты(Больничный, Кэш)
	Значение = Кэш["НеучтенныеИсключаемыеДаты"];
	Если Значение <> Неопределено Тогда
		Возврат Значение;
	КонецЕсли;
	ДатыНачислений(Больничный, Кэш);
	Возврат Кэш["НеучтенныеИсключаемыеДаты"];
КонецФункции

Функция ИсключенныеДаты(Больничный, Кэш) Экспорт
	Таблица = Кэш["ИсключенныеДаты"];
	Если Таблица <> Неопределено Тогда
		Возврат Таблица;
	КонецЕсли;
	
	// Получение таблицы дат на основании таблицы исключаемых периодов.
	ИсключенныеДаты = ОбщегоНазначенияБЗК.ТаблицаДатИзТаблицыПериодов(
		Больничный.ИсключаемыеПериоды,
		Больничный.ДатаНачала,
		Больничный.ДатаОкончания);
	ИсключенныеДаты.Свернуть("Дата, Регистрировать, Причина");
	ИсключенныеДаты.Сортировать("Дата");
	
	// Кэширование.
	Кэш.Вставить("ИсключенныеДаты", ИсключенныеДаты);
	
	// Добавление дат в которые сотрудник работал.
	ДобавитьДатыИсключенныеПоПричинеРаботы(Больничный, ИсключенныеДаты);
	
	Возврат ИсключенныеДаты;
КонецФункции

Процедура ДобавитьДатыИсключенныеПоПричинеРаботы(Больничный, ИсключенныеДаты)
	
	Если Перечисления.ПричиныНетрудоспособности.ЭтоУходЗаРодственником(Больничный.ПричинаНетрудоспособности)
		И Больничный.ПериодыУходаЗаРодственниками.Количество() > 0 Тогда
		ДатаНачала = Больничный.ДатаНачала;
		Если Больничный.ДатаНачалаСобытия < ДатаНачала И ЗначениеЗаполнено(Больничный.ДатаНачалаСобытия) Тогда
			ДатаНачала = Больничный.ДатаНачалаСобытия;
		КонецЕсли;
		Если Больничный.ОсвобождениеДатаНачала1 < ДатаНачала И ЗначениеЗаполнено(Больничный.ОсвобождениеДатаНачала1) Тогда
			ДатаНачала = Больничный.ОсвобождениеДатаНачала1;
		КонецЕсли;
		ДатаОкончания = Макс(Больничный.ДатаОкончания,
			Больничный.ОсвобождениеДатаОкончания1,
			Больничный.ОсвобождениеДатаОкончания2,
			Больничный.ОсвобождениеДатаОкончания3);
		ПериодыУхода = Больничный.ПериодыУходаЗаРодственниками;
		ДатыУхода = ОбщегоНазначенияБЗК.ТаблицаДатИзТаблицыПериодов(ПериодыУхода, ДатаНачала, ДатаОкончания);
		ДатыЛН = ДатыУхода.ВыгрузитьКолонку("Дата");
	ИначеЕсли Больничный.ПрерывистыйМетод Тогда
		ИспользованныеДаты1 = ОбщегоНазначенияБЗК.МассивДатИзПериода(
			Больничный.ОсвобождениеДатаНачала1,
			Больничный.ОсвобождениеДатаОкончания1);
		ИспользованныеДаты2 = ОбщегоНазначенияБЗК.МассивДатИзПериода(
			Больничный.ОсвобождениеДатаНачала2,
			Больничный.ОсвобождениеДатаОкончания2);
		ИспользованныеДаты3 = ОбщегоНазначенияБЗК.МассивДатИзПериода(
			Больничный.ОсвобождениеДатаНачала3,
			Больничный.ОсвобождениеДатаОкончания3);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИспользованныеДаты1, ИспользованныеДаты2, Ложь);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИспользованныеДаты1, ИспользованныеДаты3, Ложь);
		ДатыЛН = СвернутьМассив(ИспользованныеДаты1);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ДатыЛН.Количество() = 0 Тогда
		Возврат; // Ошибка в данных больничного.
	КонецЕсли;
	
	ВсеДаты = ОбщегоНазначенияБЗК.МассивДатИзПериода(Больничный.ДатаНачала, Больничный.ДатаОкончания);
	Для Каждого Дата Из ВсеДаты Цикл
		Если ДатыЛН.Найти(Дата) <> Неопределено Тогда
			Продолжить; // Дата зарегистрирована в периодах ухода.
		КонецЕсли;
		Если ИсключенныеДаты.Найти(Дата, "Дата") <> Неопределено Тогда
			Продолжить; // Дата зарегистрирована в исключаемых периодах.
		КонецЕсли;
		ИсключеннаяДата = ИсключенныеДаты.Добавить();
		ИсключеннаяДата.Дата           = Дата;
		ИсключеннаяДата.Причина        = Перечисления.ПричиныНеоплатыБольничных.Работа;
		ИсключеннаяДата.Регистрировать = Ложь;
	КонецЦикла;
КонецПроцедуры

Функция СвернутьМассив(Массив)
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("П");
	Для НомерЭлемента = 1 По Массив.Количество() Цикл
		Таблица.Добавить();
	КонецЦикла;
	Таблица.ЗагрузитьКолонку(Массив, "П");
	Таблица.Свернуть("П");
	Возврат Таблица.ВыгрузитьКолонку("П");
КонецФункции

Функция ДатыНачислений(Больничный, Кэш)
	Таблица = Кэш["ДатыНачислений"];
	Если Таблица <> Неопределено Тогда
		Возврат Таблица;
	КонецЕсли;
	
	ДатыНачислений = Новый ТаблицаЗначений;
	ДатыНачислений.Колонки.Добавить("Дата",            Новый ОписаниеТипов("Дата"));
	ДатыНачислений.Колонки.Добавить("ВидРасчета",      Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ДатыНачислений.Колонки.Добавить("Регистрировать",  Новый ОписаниеТипов("Булево"));
	ДатыНачислений.Колонки.Добавить("Оплачивать",      Новый ОписаниеТипов("Булево"));
	ДатыНачислений.Колонки.Добавить("ПоловинаОплаты",  Новый ОписаниеТипов("Булево"));
	ДатыНачислений.Колонки.Добавить("НарушениеРежима", Новый ОписаниеТипов("Булево"));
	ДатыНачислений.Колонки.Добавить("Категория",       Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииНачисленийИНеоплаченногоВремени"));
	ДатыНачислений.Колонки.Добавить("ВидСтажаПФР2014", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыСтажаПФР2014"));
	ДатыНачислений.Колонки.Добавить("Состояние",       Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияСотрудника"));
	ДатыНачислений.Колонки.Добавить("КодПричины",      Новый ОписаниеТипов("Строка"));
	ДатыНачислений.Колонки.Добавить("СлучайУхода",     Новый ОписаниеТипов("ПеречислениеСсылка.СлучаиУходаЗаБольнымиДетьми"));
	Кэш.Вставить("ДатыНачислений", ДатыНачислений);
	
	Если Не ОбщегоНазначенияБЗК.ПериодСоответствуетТребованиям(Больничный.ДатаНачала, Больничный.ДатаОкончания) Тогда
		Возврат ДатыНачислений;
	КонецЕсли;
	
	// Заполнение дат и ссылок начислений.
	ИсключенныеДаты = ИсключенныеДаты(Больничный, Кэш);
	
	ДатыУхода = ОбщегоНазначенияБЗК.ТаблицаДатИзТаблицыПериодов(Больничный.ПериодыУходаЗаРодственниками);
	ЕстьДатыУхода = ДатыУхода.Количество() > 0;
	
	ДатаНачалаПоловиннойОплаты = Больничный.ДатаНачалаПоловиннойОплаты;
	Если Не Больничный.НазначитьПособие
		Или Больничный.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание
		Или ДатаНачалаПоловиннойОплаты <= Больничный.ДатаНачалаОплаты
		Или ДатаНачалаПоловиннойОплаты > Больничный.ДатаОкончанияОплаты Тогда
		ДатаНачалаПоловиннойОплаты = '39991231235959';
	КонецЕсли;
	
	ДатаНарушенияРежима = Больничный.ДатаНарушенияРежима;
	Если Не Больничный.НазначитьПособие
		Или ДатаНарушенияРежима = ДатаНачалаПоловиннойОплаты
		Или ДатаНарушенияРежима <= Больничный.ДатаНачалаОплаты
		Или ДатаНарушенияРежима > Больничный.ДатаОкончанияОплаты Тогда
		ДатаНарушенияРежима = '39991231235959';
	КонецЕсли;
	
	ДатаНачалаОплатыЗаСчетФСС = УчетПособийСоциальногоСтрахования.ДатаНачалаОплатыЗаСчетФСС(
		Больничный.ДатаНачалаСобытия,
		Больничный.ПричинаНетрудоспособности);
	
	СсылкиНачислений = Новый Массив;
	
	МассивДат = ОбщегоНазначенияБЗК.МассивДатИзПериода(Больничный.ДатаНачала, Больничный.ДатаОкончания);
	Для Каждого Дата Из МассивДат Цикл
		ДатаНачисления = ДатыНачислений.Добавить();
		ДатаНачисления.Дата = Дата;
		
		ИсключеннаяДата = ИсключенныеДаты.Найти(Дата, "Дата");
		Если ИсключеннаяДата <> Неопределено Тогда
			ДатаНачисления.Регистрировать = ИсключеннаяДата.Регистрировать;
			ДатаНачисления.Оплачивать     = Ложь;
		ИначеЕсли Не Больничный.НазначитьПособие
			Или Дата < Больничный.ДатаНачалаОплаты
			Или Дата > Больничный.ДатаОкончанияОплаты Тогда
			ДатаНачисления.Регистрировать = Истина;
			ДатаНачисления.Оплачивать     = Ложь;
		ИначеЕсли Дата < ДатаНачалаОплатыЗаСчетФСС Тогда
			ДатаНачисления.Регистрировать = Истина;
			ДатаНачисления.Оплачивать     = Истина;
		Иначе
			ДатаНачисления.Регистрировать = Истина;
			ДатаНачисления.Оплачивать     = Истина;
		КонецЕсли;
		
		Если ЕстьДатыУхода Тогда
			ДатаУхода = ДатыУхода.Найти(Дата, "Дата");
			Если ДатаУхода = Неопределено Тогда
				// Неоплачиваемая дата с пустой причиной и случаем ухода.
				Если ДатаНачисления.Оплачивать Тогда
					ДатаНачисления.Регистрировать = Ложь;
					ДатаНачисления.Оплачивать     = Ложь;
					ДатаНачисления.ВидРасчета     = ВидНеоплачиваемогоВремени(Больничный, Кэш);
				КонецЕсли;
			Иначе
				// Код причины и случай ухода определяются на основании реквизита таблицы (по правилам ЭЛН 2.0).
				ЗаполнитьЗначенияСвойств(ДатаНачисления, ДатаУхода, "КодПричины, СлучайУхода");
			КонецЕсли;
		Иначе // Код причины и случай ухода определяются на основании реквизита шапки (по старым правилам).
			ДатаНачисления.КодПричины  = Больничный.КодПричиныНетрудоспособности;
			ДатаНачисления.СлучайУхода = Больничный.СлучайУходаЗаБольнымРебенком;
		КонецЕсли;
		
		Если Не ДатаНачисления.Регистрировать Или Не ДатаНачисления.Оплачивать Тогда
			ДатаНачисления.ВидРасчета = ВидНеоплачиваемогоВремени(Больничный, Кэш);
		ИначеЕсли Дата < ДатаНачалаОплатыЗаСчетФСС Тогда
			ДатаНачисления.ВидРасчета = ВидОплатыЗаСчетРаботодателя(Больничный, Кэш);
		Иначе
			ДатаНачисления.ВидРасчета = ВидОплатыПособия(Больничный, Кэш); // За счет ФСС.
		КонецЕсли;
		
		Если ДатаНачисления.Регистрировать
			И ЗначениеЗаполнено(ДатаНачисления.ВидРасчета)
			И СсылкиНачислений.Найти(ДатаНачисления.ВидРасчета) = Неопределено Тогда
			СсылкиНачислений.Добавить(ДатаНачисления.ВидРасчета);
		КонецЕсли;
		
		ДатаНачисления.ПоловинаОплаты  = (Дата >= ДатаНачалаПоловиннойОплаты И Дата <= Больничный.ДатаОкончанияОплаты);
		ДатаНачисления.НарушениеРежима = (Дата >= ДатаНарушенияРежима        И Дата <= Больничный.ДатаОкончанияОплаты);
	КонецЦикла;
	
	Если Больничный.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
		ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.Декрет;
	Иначе
		ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.ВременнаяНетрудоспособность;
	КонецЕсли;
	
	// Заполнение реквизитов начислений.
	Если СсылкиНачислений.Количество() > 0 Тогда
		ИменаРеквизитов = "КатегорияНачисленияИлиНеоплаченногоВремени";
		РеквизитыНачислений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СсылкиНачислений, ИменаРеквизитов);
		
		КатегорииБезОплаты = КатегорииБезОплаты();
		КатегорииСОплатой = КатегорииСОплатой();
		
		Для Каждого КлючИЗначение Из РеквизитыНачислений Цикл
			СсылкаНачисления    = КлючИЗначение.Ключ;
			РеквизитыНачисления = КлючИЗначение.Значение;
			
			Категория = РеквизитыНачисления.КатегорияНачисленияИлиНеоплаченногоВремени;
			
			Если КатегорииБезОплаты.Найти(Категория) <> Неопределено Тогда
				Состояние = Перечисления.СостоянияСотрудника.Болезнь;
			ИначеЕсли КатегорииСОплатой.Найти(Категория) <> Неопределено Тогда
				Состояние = Перечисления.СостоянияСотрудника.Болезнь;
			Иначе
				Состояние = Перечисления.СостоянияСотрудника.ПустаяСсылка();
			КонецЕсли;
			
			Найденные = ДатыНачислений.НайтиСтроки(Новый Структура("ВидРасчета", СсылкаНачисления));
			Для Каждого СтрокаТаблицы Из Найденные Цикл
				СтрокаТаблицы.Категория       = Категория;
				СтрокаТаблицы.Состояние       = Состояние;
				СтрокаТаблицы.ВидСтажаПФР2014 = ВидСтажаПФР2014;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДатыНачислений;
КонецФункции

Функция ПериодыНачислений(Больничный, Кэш) Экспорт
	ДатыНачислений = ДатыНачислений(Больничный, Кэш);
	
	ПериодыНачислений = ДатыНачислений.СкопироватьКолонки("ВидРасчета, Категория, ПоловинаОплаты, НарушениеРежима");
	ПериодыНачислений.Колонки.Добавить("ДатаНачала",    ДатыНачислений.Колонки.Дата.ТипЗначения);
	ПериодыНачислений.Колонки.Добавить("ДатаОкончания", ДатыНачислений.Колонки.Дата.ТипЗначения);
	
	Если ДатыНачислений.Количество() = 0 Тогда
		Возврат ПериодыНачислений;
	КонецЕсли;
	
	ТекущийПериод = Неопределено;
	Для Каждого ДатаНачисления Из ДатыНачислений Цикл
		Если Не ДатаНачисления.Регистрировать Или Не ЗначениеЗаполнено(ДатаНачисления.Состояние) Тогда
			Продолжить;
		КонецЕсли;
		Если ТекущийПериод = Неопределено
			Или ДатаНачисления.Дата > ТекущийПериод.ДатаОкончания + 86400
			Или ДатаНачисления.ВидРасчета <> ТекущийПериод.ВидРасчета
			Или ДатаНачисления.ПоловинаОплаты <> ТекущийПериод.ПоловинаОплаты
			Или ДатаНачисления.НарушениеРежима <> ТекущийПериод.НарушениеРежима Тогда
			ТекущийПериод = ПериодыНачислений.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущийПериод, ДатаНачисления);
			ТекущийПериод.ДатаНачала = ДатаНачисления.Дата;
		КонецЕсли;
		ТекущийПериод.ДатаОкончания = КонецДня(ДатаНачисления.Дата);
	КонецЦикла;
	
	Возврат ПериодыНачислений;
КонецФункции

Функция ПериодыСтажаПФР(Больничный, Кэш = Неопределено)
	Результат = УчетСтажаПФР.ДанныеДляРегистрацииВУчетеСтажаПФР();
	
	Если Кэш = Неопределено Тогда
		Кэш = Новый Соответствие
	КонецЕсли;
	
	ДатыНачислений = ДатыНачислений(Больничный, Кэш);
	Если ДатыНачислений.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПериодыПФР = ДатыНачислений.СкопироватьКолонки("ВидСтажаПФР2014, Состояние");
	ПериодыПФР.Колонки.Добавить("ДатаНачала",    ДатыНачислений.Колонки.Дата.ТипЗначения);
	ПериодыПФР.Колонки.Добавить("ДатаОкончания", ДатыНачислений.Колонки.Дата.ТипЗначения);
	
	ТекущийПериод = Неопределено;
	Для Каждого ДатаНачисления Из ДатыНачислений Цикл
		Если Не ДатаНачисления.Регистрировать Или Не ЗначениеЗаполнено(ДатаНачисления.Состояние) Тогда
			Продолжить;
		КонецЕсли;
		Если ТекущийПериод = Неопределено
			Или ДатаНачисления.Дата > ТекущийПериод.ДатаОкончания + 86400
			Или ДатаНачисления.ВидСтажаПФР2014 <> ТекущийПериод.ВидСтажаПФР2014
			Или ДатаНачисления.Состояние       <> ТекущийПериод.Состояние Тогда
			ТекущийПериод = ПериодыПФР.Добавить();
			ТекущийПериод.ДатаНачала      = ДатаНачисления.Дата;
			ТекущийПериод.ВидСтажаПФР2014 = ДатаНачисления.ВидСтажаПФР2014;
			ТекущийПериод.Состояние       = ДатаНачисления.Состояние;
		КонецЕсли;
		ТекущийПериод.ДатаОкончания = ДатаНачисления.Дата;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ПериодыПФР Цикл
		ОписаниеПериода = УчетСтажаПФР.ОписаниеРегистрируемогоПериода();
		ОписаниеПериода.Сотрудник = Больничный.Сотрудник;
		ОписаниеПериода.ДатаНачалаПериода    = СтрокаТаблицы.ДатаНачала;
		ОписаниеПериода.ДатаОкончанияПериода = СтрокаТаблицы.ДатаОкончания;
		ОписаниеПериода.Состояние            = СтрокаТаблицы.Состояние;
		РегистрируемыйПериод = УчетСтажаПФР.ДобавитьЗаписьВДанныеДляРегистрацииВУчета(Результат, ОписаниеПериода);
		УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "ВидСтажаПФР", СтрокаТаблицы.ВидСтажаПФР2014);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ВидОплатыЗаСчетРаботодателя(Больничный, Кэш) Экспорт
	Начисление = Кэш["ВидОплатыЗаСчетРаботодателя"];
	Если Начисление = Неопределено Тогда
		Категория = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя;
		Отбор = Новый Структура("КатегорияНачисленияИлиНеоплаченногоВремени", Категория);
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.РасчетЗарплаты") Тогда
			МодульРасчетЗарплатыДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
			МодульРасчетЗарплатыДляНебольшихОрганизаций.ДополнитьОтборНачислений(Отбор, Больничный.Организация, Больничный.ПериодРегистрации);
		КонецЕсли;
		Начисление = ПланыВидовРасчета.Начисления.НачислениеПоУмолчанию(Отбор);
		Кэш.Вставить("ВидОплатыЗаСчетРаботодателя", Начисление);
	КонецЕсли;
	Возврат Начисление;
КонецФункции

Функция ВидОплатыПособия(Больничный, Кэш) Экспорт
	Начисление = Кэш["ВидОплатыПособия"];
	Если Начисление = Неопределено Тогда
		Категория = Перечисления.ПричиныНетрудоспособности.КатегорияОплатыПособия(Больничный.ПричинаНетрудоспособности);
		Отбор = Новый Структура("КатегорияНачисленияИлиНеоплаченногоВремени", Категория);
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.РасчетЗарплаты") Тогда
			МодульРасчетЗарплатыДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
			МодульРасчетЗарплатыДляНебольшихОрганизаций.ДополнитьОтборНачислений(Отбор, Больничный.Организация, Больничный.ПериодРегистрации);
		КонецЕсли;
		Начисление = ПланыВидовРасчета.Начисления.НачислениеПоУмолчанию(Отбор);
		Кэш.Вставить("ВидОплатыПособия", Начисление);
	КонецЕсли;
	Возврат Начисление;
КонецФункции

Функция ВидНеоплачиваемогоВремени(Больничный, Кэш) Экспорт
	Начисление = Кэш["ВидНеоплачиваемогоВремени"];
	Если Начисление = Неопределено Тогда
		Категория = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.БолезньБезОплаты;
		Отбор = Новый Структура("КатегорияНачисленияИлиНеоплаченногоВремени", Категория);
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.РасчетЗарплаты") Тогда
			МодульРасчетЗарплатыДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
			МодульРасчетЗарплатыДляНебольшихОрганизаций.ДополнитьОтборНачислений(Отбор, Больничный.Организация, Больничный.ПериодРегистрации);
		КонецЕсли;
		Начисление = ПланыВидовРасчета.Начисления.НачислениеПоУмолчанию(Отбор);
		Кэш.Вставить("ВидНеоплачиваемогоВремени", Начисление);
	КонецЕсли;
	Возврат Начисление;
КонецФункции

Функция КатегорииБезОплаты()
	КатегорииБезОплаты = Новый Массив;
	КатегорииБезОплаты.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.БолезньБезОплаты);
	Возврат КатегорииБезОплаты;
КонецФункции

Функция КатегорииСОплатой()
	КатегорииСОплатой = Новый Массив;
	КатегорииСОплатой.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
	КатегорииСОплатой.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам);
	КатегорииСОплатой.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	КатегорииСОплатой.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве);
	КатегорииСОплатой.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание);
	Возврат КатегорииСОплатой;
КонецФункции

#КонецОбласти

#КонецЕсли
