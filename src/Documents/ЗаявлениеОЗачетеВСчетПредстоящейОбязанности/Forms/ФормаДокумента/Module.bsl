#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	КонтекстныйВызов = Параметры.КонтекстныйВызов;
	
	Если Параметры.Ключ.Пустая() Тогда
		Если Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) И КонтекстныйВызов Тогда
			Объект.Организация = Параметры.Организация;
			ПараметрыАвтозаполнения = "КонтекстныйВызов, АдресХранилищаТаблицыНалоги, ПериодСобытия, ЗаписьКалендаря";
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры, ПараметрыАвтозаполнения);
			ЗаполнитьТаблицуНалоги();
		КонецЕсли;
		Объект.Уведомление = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьСсылку();
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(
		ЭтотОбъект, "ФНС");
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Объект.Уведомление);
	
	ПоказыватьСчетаУчетаВДокументах = Истина;
	Элементы.НалогиСчетУчета.Видимость    = ПоказыватьСчетаУчетаВДокументах;
	Элементы.НалогиВидНалогаНДС.Видимость = Не ПоказыватьСчетаУчетаВДокументах;
	
	#Область СтандартныеПодсистемы

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ПодменюПечать;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	#КонецОбласти
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Параметры.Ключ.Пустая() Тогда
		ОбновитьИтоги();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗаписьКалендаря",     ЗаписьКалендаря);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ПериодСобытия", ПериодСобытия);

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок", Объект.Уведомление);
	СтруктураРеквизитовФормы.Вставить("Организация",     ГоловнаяОрганизация);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// ПанельОтправкиВКонтролирующиеОрганы
	СохранитьСтатусОтправки(ЭтотОбъект, Объект.Уведомление);
	// Конец ПанельОтправкиВКонтролирующиеОрганы
	
	ЗаполнитьДобавленныеКолонкиТаблицы();
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Организация", Объект.Организация);
	ПараметрыОповещения.Вставить("Период",      Объект.Дата);
	
	Оповестить("Запись_ЗаявлениеОЗачетеВСчетПредстоящейОбязанности", ПараметрыОповещения, Объект.Ссылка);
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения", ПараметрыОповещения, Объект.Уведомление);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтотОбъект);
	ПараметрыИзменения.Вставить("Организация", Объект.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьСтатусОтправки(Форма, Ссылка)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Форма",          Форма);
	СтруктураПараметров.Вставить("СсылкаНаОбъект", Ссылка);
	СтруктураПараметров.Вставить("ЭтоОтчет",       Ложь);
	СтруктураПараметров.Вставить("НовСтатус",      Форма.Элементы.НаименованиеЭтапа.Заголовок);
	
	РегламентированнаяОтчетностьВызовСервера.СохранитьСтатусОтправки(СтруктураПараметров, Форма.УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧастиНалоги

&НаКлиенте
Процедура НалогиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Или Копирование Тогда
		Если НоваяСтрока И Не Копирование Тогда
			ТекущиеДанные.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
			ПараметрыСтроки = ОписаниеСтрокиДокумента();
			ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекущиеДанные);
			РегистрацияВНалоговомОрганеПриИзмененииНаСервере(ПараметрыСтроки);
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыСтроки);
		КонецЕсли;
		ПараметрыСтроки = ОписаниеСтрокиДокумента();
		ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекущиеДанные);
		ТекущиеДанные.СрокУплаты = СрокУплаты(ПараметрыСтроки,
			СписокСчетовАгентскогоНДФЛ.НайтиПоЗначению(ТекущиеДанные.СчетУчета) <> Неопределено);
	КонецЕсли;
	ТекущийСчетУчета = ТекущиеДанные.СчетУчета;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиНалогПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСтроки = ОписаниеСтрокиДокумента();
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекущиеДанные);
	НалогПриИзмененииНаСервере(ПараметрыСтроки);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиСчетУчетаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийСчетУчета = ТекущиеДанные.СчетУчета;
	
	ТекущиеДанные.НалоговыйАгент =
		СписокСчетовАгентскогоНДС.НайтиПоЗначению(ТекущиеДанные.СчетУчета) <> Неопределено
		Или СписокСчетовАгентскогоНДФЛ.НайтиПоЗначению(ТекущиеДанные.СчетУчета) <> Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиРегистрацияВНалоговомОрганеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСтроки = ОписаниеСтрокиДокумента();
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекущиеДанные);
	РегистрацияВНалоговомОрганеПриИзмененииНаСервере(ПараметрыСтроки);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиВидНалогаНДСОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиВидНалогаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.СчетУчета = ТекущиеДанные.ВидНалогаНДС;
	ТекущийСчетУчета = ТекущиеДанные.СчетУчета;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиПриИзменении(Элемент)
	
	ОбновитьИтоги();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьНаДиск(Команда)
	Оповещение = Новый ОписаниеОповещения("ЗаписатьНаДискЗавершение", ЭтотОбъект);
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	Оповещение = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОчиститьСообщения();
	Отказ               = Ложь;
	ЕстьКритичныеОшибки = Ложь;
	ТаблицаОшибок       = Новый СписокЗначений;
	
	ДополнительныеПараметры = Новый Структура();
	
	Если Не Объект.Проведен Или Модифицированность Тогда 
		ТекстВопроса = НСтр("ru = 'Для выполнения команды необходимо предварительно провести документ.
			|Выполнить проведение документа и продолжить?'");
		Оповещение =
			Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
	Иначе
		ПроверитьВыгрузкуЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	Если Не Объект.Проведен Или Модифицированность Тогда 
		ТекстВопроса = НСтр("ru = 'Для выполнения команды необходимо предварительно провести документ.
			|Выполнить проведение документа и продолжить?'");
		Оповещение =
			Новый ОписаниеОповещения("ПроверитьПроверитьВИнтернетеЗавершение", ЭтотОбъект);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
	Иначе
		ПроверитьПроверитьВИнтернетеЗавершение(КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры


#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ПоказыватьСчетаУчетаВДокументах = Истина;
	
	ПолучитьРеквизитыОрганизации();
	
	ЗаполнитьОграничениеСчетовУчета();
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок", Объект.Уведомление);
	СтруктураРеквизитовФормы.Вставить("Организация",     ГоловнаяОрганизация);
	
	ЗаполнитьДобавленныеКолонкиТаблицы();
	
	УправлениеФормой();
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	ПериодПримененияЕНП =
		Объект.Дата >= '20230101';
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОграничениеСчетовУчета()
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(Перечисления.ТипыСчетов.Расходы);
	НовыйМассив.Добавить(Перечисления.ТипыСчетов.ПрочиеРасходы);
	НовыйМассив.Добавить(Перечисления.ТипыСчетов.НезавершенноеПроизводство);
	НовыйМассив.Добавить(Перечисления.ТипыСчетов.КосвенныеЗатраты);
	НовыйМассив.Добавить(Перечисления.ТипыСчетов.НалогНаПрибыль);
	
	МассивТипыСчетов = Новый ФиксированныйМассив(НовыйМассив);
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСчета", МассивТипыСчетов);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	
	НовыйПараметр = Новый ПараметрВыбора("ВключатьВРасходыПрочие", Истина);
	НовыйМассив.Добавить(НовыйПараметр);
	
	НовыйПараметр = Новый ПараметрВыбора("ВключатьВДоходыПрочие", Истина);
	НовыйМассив.Добавить(НовыйПараметр);
	
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.НалогиСчетУчета.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуНалоги()
	
	Если ЗначениеЗаполнено(АдресХранилищаТаблицыНалоги) Тогда
		ТаблицыЗаполнения = ПолучитьИзВременногоХранилища(АдресХранилищаТаблицыНалоги);
		Если ЗначениеЗаполнено(ТаблицыЗаполнения.ТаблицаНалоги) Тогда
			Объект.Налоги.Загрузить(ТаблицыЗаполнения.ТаблицаНалоги);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеСтрокиДокумента()
	
	ОписаниеСтроки = Новый Структура("НомерСтроки, Налог, КодБК, СчетУчета, НалоговыйАгент,
		|РегистрацияВНалоговомОргане, КодПоОКТМО, Сумма, СрокУплаты, ПоказыватьСчетУчета, ВидНалогаНДС");
	
	Возврат ОписаниеСтроки;
	
КонецФункции

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ПолучитьРеквизитыОрганизации();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ПолучитьРеквизитыОрганизации();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьРеквизитыОрганизации()
	
	ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка();
	ЭтоЮрЛицо           = Истина;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ГоловнаяОрганизация = Объект.Организация.ГоловнаяОрганизация;
		ЭтоЮрЛицо           = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоЮрЛицо(Объект.Организация);
	КонецЕсли;
	
	Если Не КонтекстныйВызов Тогда
		РегистрацияВНалоговомОргане = "";
	ИначеЕсли Объект.Организация <> Параметры.Организация Тогда
		РегистрацияВНалоговомОргане = "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РегистрацияВНалоговомОргане)  И ЗначениеЗаполнено(Объект.Организация) Тогда
		РегистрацияВНалоговомОргане = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "РегистрацияВНалоговомОргане");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НалогПриИзмененииНаСервере(ПараметрыСтроки)
	
	Если ЗначениеЗаполнено(ПараметрыСтроки.Налог) Тогда
		ПараметрыСтроки.КодБК     = Справочники.ВидыНалогов.КБК(ПараметрыСтроки.Налог, , Объект.Дата);
		ПараметрыСтроки.СчетУчета = ПараметрыСтроки.Налог.СчетУчета;
		
		ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыСтроки.Налог, "ВидНалога");
		Если ЗначениеЗаполнено(ВидНалога) Тогда
			
			ПорядокУплаты = Неопределено;
			
			Если ПорядокУплаты <> Неопределено Тогда
				ПараметрыСтроки.СрокУплаты = ПорядокУплаты.Срок;
			Иначе
				ПараметрыСтроки.СрокУплаты = СрокУплаты(ПараметрыСтроки,
					ВидНалога <> Справочники.ВидыНалогов.НДФЛСотрудники);
			КонецЕсли;
			
			//Если ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_СвышеПредела Тогда
			//	Обработки.РасчетСтраховыхВзносовИП.УточнитьСрокУплатыВзносовСвышеПредела(ПараметрыСтроки.СрокУплаты);
			//КонецЕсли;
			//Если ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_СтраховыеВзносыЕдиныйТариф Тогда
			//	Обработки.РасчетСтраховыхВзносовИП.УточнитьСрокУплатыВзносовЕдиныйТариф(ПараметрыСтроки.СрокУплаты);
			//КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ПараметрыСтроки.СрокУплаты = СрокУплаты(ПараметрыСтроки,
			СписокСчетовАгентскогоНДФЛ.НайтиПоЗначению(ПараметрыСтроки.СчетУчета) <> Неопределено);
	КонецЕсли;
	
	Если Объект.Дата >= '20230101' Тогда
		Если ЗначениеЗаполнено(ПараметрыСтроки.СрокУплаты) Тогда
			ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
			ГрафикПереноса = КалендарныеГрафики.БлижайшиеРабочиеДаты(
				ПроизводственныйКалендарь,
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыСтроки.СрокУплаты));
			ПараметрыСтроки.СрокУплаты = ГрафикПереноса[ПараметрыСтроки.СрокУплаты];
		КонецЕсли;
	КонецЕсли;
	
	ТекущийСчетУчета = ПараметрыСтроки.СчетУчета;
	
	Если ПараметрыСтроки.Налог = Налог_НДС Тогда
		ПараметрыСтроки.ВидНалогаНДС = ПараметрыСтроки.СчетУчета;
	КонецЕсли;
	
	ПараметрыСтроки.НалоговыйАгент =
		СписокСчетовАгентскогоНДС.НайтиПоЗначению(ПараметрыСтроки.СчетУчета) <> Неопределено
		Или СписокСчетовАгентскогоНДФЛ.НайтиПоЗначению(ПараметрыСтроки.СчетУчета) <> Неопределено;
	
	ЗаполнитьДобавленнуюКолонкуТаблицы(ПараметрыСтроки);
	
КонецПроцедуры

&НаСервере
Процедура РегистрацияВНалоговомОрганеПриИзмененииНаСервере(ПараметрыСтроки)
	
	Если ЗначениеЗаполнено(ПараметрыСтроки.РегистрацияВНалоговомОргане) Тогда
		ПараметрыСтроки.КодПоОКТМО =
			РегламентированнаяОтчетностьУСН.КодТерритории(ПараметрыСтроки.РегистрацияВНалоговомОргане);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СрокУплаты(ПараметрыСтроки, ЭтоНДФЛ, ТринадцатыйПериод = Ложь)
	
	ОтчетныйПериод = РегламентированнаяОтчетностьУСН.ОпределитьСрокПлатежаПоЕНП(Объект.Дата);
	Если Не ЭтоНДФЛ Тогда
		ОтчетныйПериод = КонецМесяца(ОтчетныйПериод) + 1;
	КонецЕсли;
	
	ГодУплаты   = Год(ОтчетныйПериод);
	МесяцУплаты = Месяц(ОтчетныйПериод);
	ДеньУплаты = 28;// все уплаты в один день
	Если ЭтоНДФЛ И ТринадцатыйПериод Тогда
		ДеньУплаты = 31; // исключение
	КонецЕсли;
	
	СрокУплаты = Дата(ГодУплаты, МесяцУплаты, ДеньУплаты);
	
	Возврат СрокУплаты;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьИтоги()
	
	Объект.СуммаДокумента = Объект.Налоги.Итог("Сумма");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Если Не ПоказыватьСчетаУчетаВДокументах Тогда
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НалогиВидНалогаНДС");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Налоги.Налог", ВидСравненияКомпоновкиДанных.НеРавно, Налог_НДС);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		Для Каждого ОписаниеСчета Из СписокОписанийСчетовНДС Цикл
			ЭлементУО = УсловноеОформление.Элементы.Добавить();
			КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НалогиВидНалогаНДС");
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
				"Объект.Налоги.ВидНалогаНДС", ВидСравненияКомпоновкиДанных.Равно, ОписаниеСчета.Значение);
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", ОписаниеСчета.Представление);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблицы()
	
	Для каждого СтрокаТаблицы Из Объект.Налоги Цикл
		ЗаполнитьДобавленнуюКолонкуТаблицы(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленнуюКолонкуТаблицы(СтрокаТаблицы)
	
	ПоказыватьСчетУчета = Ложь;
	Если ПоказыватьСчетаУчетаВДокументах Тогда
		ПоказыватьСчетУчета = Истина;
	ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.Налог) Тогда
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
			ПоказыватьСчетУчета = Истина;
		Иначе
			ПоказыватьСчетУчета =
				СтрокаТаблицы.Налог <> Налог_НДС
				И СтрокаТаблицы.СчетУчета <> ПланыСчетов.Управленческий.Налоги;
		КонецЕсли;
	КонецЕсли;
	Если СтрокаТаблицы.Налог = Налог_НДС Тогда
		СтрокаТаблицы.ВидНалогаНДС = СтрокаТаблицы.СчетУчета;
	КонецЕсли;
	СтрокаТаблицы.ПоказыватьСчетУчета = ПоказыватьСчетУчета;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ПрослеживаемостьПереопределяемый.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

#Область РаботаСУведомлениемКакСОтчетом

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайлаНаСервере(ДокументСсылка, УникальныйИдентификатор)
	
	Возврат Документы.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.ВыгрузитьЗаявлениеОЗачетеВСчетПредстоящейОбязанности(
		ДокументСсылка,
		УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьНаДискЗавершение(Результат, Параметры) Экспорт
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка, УникальныйИдентификатор);
	Если ДанныеФайла <> Неопределено Тогда
		РегламентированнаяОтчетностьКлиент.ВыгрузитьФайлы(ДанныеФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Результат, Параметры) Экспорт
	Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;

	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект, , , Ложь, Объект.Уведомление);
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаСервере(Отказ = Ложь, ЕстьКритичныеОшибки = Ложь, ТаблицаОшибок)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ДокументОбъект.ПроверитьОбязательныеПоля(ЕстьКритичныеОшибки);
	Если ЕстьКритичныеОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.ПроверитьДанныеДокумента(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УведомлениеОбъект = ДокументОбъект.Уведомление.ПолучитьОбъект();
	ТаблицаОшибок = УведомлениеОбъект.ПроверитьДокументСВыводомВТаблицу(УникальныйИдентификатор);
	Отказ = ТаблицаОшибок.Количество() > 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействия(ОповещениеЗавершения = Неопределено)
	ОчиститьСообщения();
	
	ДополнительныеПараметры = Новый Структура("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Если Не Объект.Проведен Или Модифицированность Тогда 
		ТекстВопроса = НСтр("ru = 'Для выполнения команды необходимо предварительно провести документ.
			|Выполнить проведение документа и продолжить?'");
		Оповещение =
			Новый ОписаниеОповещения("ПроверитьСЗапросомДальнейшегоДействияПродолжение", ЭтотОбъект, ДополнительныеПараметры);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
	Иначе 
		ПроверитьСЗапросомДальнейшегоДействияПродолжение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействияПродолжение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		Если Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Отказ               = Ложь;
	ЕстьКритичныеОшибки = Ложь;
	ТаблицаОшибок       = Новый СписокЗначений;
	
	ПроверитьНаСервере(Отказ, ЕстьКритичныеОшибки, ТаблицаОшибок);
	ДополнительныеПараметры.Вставить("ТаблицаОшибок", ТаблицаОшибок);
	
	Если ЕстьКритичныеОшибки Тогда 
		ТекстПредупреждения = НСтр("ru = 'Не заполнены обязательные поля.'");
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		ТекстВопроса = НСтр("ru = 'В уведомлении обнаружены ошибки.
							|Продолжить (не рекомендуется)?'");
							
		Оповещение =
			Новый ОписаниеОповещения("ПроверитьСЗапросомДальнейшегоДействияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = 'Предупреждение.'"));
	Иначе
		ПроверитьСЗапросомДальнейшегоДействияЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействияЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Если ДополнительныеПараметры.Свойство("ТаблицаОшибок") Тогда
			Если ДополнительныеПараметры.ТаблицаОшибок.Количество() > 0 Тогда
				ОткрытьФорму("Документ.УведомлениеОСпецрежимахНалогообложения.Форма.НавигацияПоОшибкам",
					Новый Структура("ТаблицаОшибок", ДополнительныеПараметры.ТаблицаОшибок),
					ЭтотОбъект,
					Истина);
			КонецЕсли;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		Если Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Отказ               = Ложь;
	ЕстьКритичныеОшибки = Ложь;
	ТаблицаОшибок       = Новый СписокЗначений;
	
	ПроверитьНаСервере(Отказ, ЕстьКритичныеОшибки, ТаблицаОшибок);
	ДополнительныеПараметры.Вставить("ТаблицаОшибок", ТаблицаОшибок);
	
	Если ЕстьКритичныеОшибки Тогда 
		ТекстПредупреждения = НСтр("ru = 'Не заполнены обязательные поля.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если Не Отказ И ТаблицаОшибок.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибок не обнаружено");
	Иначе
		ОткрытьФорму("Документ.УведомлениеОСпецрежимахНалогообложения.Форма.НавигацияПоОшибкам",
			Новый Структура("ТаблицаОшибок", ТаблицаОшибок),
			ЭтотОбъект,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПроверитьВИнтернетеЗавершение(Ответ, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		Если Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
