#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ДинамическиеСпискиУНФ.ОтображатьТолькоВремяДляТекущейДаты(Список);
	
	// УНФ.ОтборыСписка
	РаботаСОтборами.ОпределитьПорядокПредопределенныхОтборов(ЭтотОбъект);
	РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, Список);
	//Конец УНФ.ОтборыСписка
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		//УНФ.ОтборыСписка
		СохранитьНастройкиОтборов();
		//Конец УНФ.ОтборыСписка
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)

	Для Каждого Строка Из Строки Цикл
		Строка = Строки[Строка.Ключ];
		Если Строка.Оформление.Получить("ВыбранныеМагазины") = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Прервать;
	КонецЦикла;

	Ключи = Строки.ПолучитьКлючи();
	Ссылки = Новый Массив;
	Для Каждого Ключ Из Ключи Цикл
		Ссылки.Добавить(Ключ.Ссылка);
	КонецЦикла;

	ВыбранныеМагазины = Новый Соответствие;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Магазины.Ссылка КАК ДокументСсылка,
	|	Магазины.Магазин.Наименование КАК НаименованиеМагазина
	|ИЗ
	|	Документ.ПоложениеОПремировании.Магазины КАК Магазины
	|ГДЕ
	|	Магазины.Ссылка В(&Ссылки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Магазины.НомерСтроки";
	Запрос.УстановитьПараметр("Ссылки", Ссылки);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ВыбранныеМагазины[Выборка.ДокументСсылка] = Неопределено Тогда
			
			ВыбранныеМагазины[Выборка.ДокументСсылка] = Новый Массив;
			
		КонецЕсли;
		
		ВыбранныеМагазины[Выборка.ДокументСсылка].Добавить(Выборка.НаименованиеМагазина);
		
	КонецЦикла;

	Для Каждого Строка Из Строки Цикл
		
		Строка = Строки[Строка.Ключ];
		Если ВыбранныеМагазины[Строка.Данные["Ссылка"]] = Неопределено Тогда 
			
			Строка.Данные["ВыбранныеМагазины"] = НСтр("ru = 'Общее положение для всех подразделений'");
			
		Иначе
			
			Строка.Данные["ВыбранныеМагазины"] = СтрСоединить(ВыбранныеМагазины[Строка.Данные["Ссылка"]], ", ");
			
		КонецЕсли;
		
		Строка.Оформление["ВыбранныеМагазины"].УстановитьЗначениеПараметра("ЦветТекста",
				ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
				
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОтборДействуетНа = Настройки.Получить("ОтборДействуетНа");
	
	Если ЗначениеЗаполнено(ОтборДействуетНа) Тогда
		УстановитьОтборДействуетНаСервер();
		РаботаСОтборамиКлиентСервер.УстановитьОтображениеКомандыСброситьВсеОтборы(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура НастроитьОтборы(Команда)
	
	ИмяРеквизитаСписка = "Список";
	ИмяТЧДанныеМеток = "ДанныеМеток";
	ИмяТЧДанныеОтборов = "ДанныеОтборов";
	ИмяГруппыОтборов = "ГруппаОтборы";
	ИмяПредопределенныеОтборыПоУмолчанию = "ПредопределенныеОтборыПоУмолчанию";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРеквизитаСписка", ИмяРеквизитаСписка);
	ДополнительныеПараметры.Вставить("ИмяТЧДанныеМеток", ИмяТЧДанныеМеток);
	ДополнительныеПараметры.Вставить("ИмяТЧДанныеОтборов", ИмяТЧДанныеОтборов);
	ДополнительныеПараметры.Вставить("ИмяГруппыОтборов", ИмяГруппыОтборов);
	ДополнительныеПараметры.Вставить("ИмяПредопределенныеОтборыПоУмолчанию", ИмяПредопределенныеОтборыПоУмолчанию);
	
	РаботаСОтборамиКлиент.НастроитьОтборыНажатие(ЭтотОбъект, ПараметрыОткрытияФормыСНастройкамиОтборов(ДополнительныеПараметры), ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОтборАвторОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Автор", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборов(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
	
	Если Элементы.ФильтрыНастройкиИДопИнфо.Видимость Тогда
		Элементы.ПраваяПанель.Ширина = 28;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОтборДействуетНаПриИзменении(Элемент)
	УстановитьОтборДействуетНаСервер();
	РаботаСОтборамиКлиентСервер.УстановитьОтображениеКомандыСброситьВсеОтборы(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСОтборамиКлиент.ПредставлениеПериодаВыбратьПериод(ЭтотОбъект, "Список", "Дата");
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область Отбор

&НаКлиенте
Процедура ОтборОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Организация", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВариантИспользованияПоложенияДляМагазинаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("ВариантИспользованияПоложенияДляМагазина", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли;
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, ИмяПоляОтбораСписка);
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_") + 1);
	УдалитьМеткуОтбора(МеткаИД);

КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, Список, МеткаИД);

КонецПроцедуры

&НаСервере
Функция ПараметрыОткрытияФормыСНастройкамиОтборов(ДополнительныеПараметры)
	
	Возврат РаботаСОтборами.ПараметрыДляОткрытияФормыСНастройкамиОтборов(ЭтотОбъект, ДополнительныеПараметры);
	
КонецФункции

&НаКлиенте
Процедура НастройкаОтборовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОтборовЗавершениеНаСервере(Результат.АдресВыбранныеОтборы, Результат.АдресУдаленныеОтборы, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура НастройкаОтборовЗавершениеНаСервере(АдресВыбранныеОтборы, АдресУдаленныеОтборы, ДополнительныеПараметры)
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ИмяРеквизитаСписка = "Список";
		ИмяТЧДанныеМеток = "ДанныеМеток";
		ИмяТЧДанныеОтборов = "ДанныеОтборов";
	Иначе
		ИмяРеквизитаСписка = ДополнительныеПараметры.ИмяРеквизитаСписка;
		ИмяТЧДанныеМеток = ДополнительныеПараметры.ИмяТЧДанныеМеток;
		ИмяТЧДанныеОтборов = ДополнительныеПараметры.ИмяТЧДанныеОтборов;
	КонецЕсли;
	
	РаботаСОтборами.НастройкаОтборовЗавершение(ЭтотОбъект, АдресВыбранныеОтборы, АдресУдаленныеОтборы, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДействуетНаСервер()
	
	ЧислоИзмененныхДатаНачалаДействия = ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(
		Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
		"ДатаНачалаДействия",
		,
		ОтборДействуетНа,
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		ЗначениеЗаполнено(ОтборДействуетНа),
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	ЧислоИзмененныхДатаОкончанияДействия = ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(
		Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
		"ДатаОкончанияДействия",
		,
		ОтборДействуетНа,
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		ЗначениеЗаполнено(ОтборДействуетНа),
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	ЧислоИзмененныхДействуетБессрочно = ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(
		Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
		"ДействуетБессрочно",
		,
		Истина,
		ВидСравненияКомпоновкиДанных.Равно,
		ЗначениеЗаполнено(ОтборДействуетНа),
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	Если ЧислоИзмененныхДатаНачалаДействия = 0 
		ИЛИ ЧислоИзмененныхДатаОкончанияДействия = 0 
		ИЛИ ЧислоИзмененныхДействуетБессрочно = 0 Тогда
		
		ГруппаДействуетИЛИ = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(
			Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы, "ГруппаДействуетИЛИ");
			
		Если ГруппаДействуетИЛИ = Неопределено Тогда
			
			ГруппаДействуетИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы,
				"ГруппаДействуетИЛИ",
				ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
				
			ГруппаДействуетИПериод = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				ГруппаДействуетИЛИ,
				"ГруппаДействуетИПериод",
				ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
				
			ГруппаДействуетИБессрочно = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				ГруппаДействуетИЛИ,
				"ГруппаДействуетИБессрочно",
				ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
				
		Иначе
			
			ГруппаДействуетИПериод = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(
				ГруппаДействуетИЛИ.Элементы, "ГруппаДействуетИПериод");
			
			ГруппаДействуетИБессрочно = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(
				ГруппаДействуетИЛИ.Элементы, "ГруппаДействуетИБессрочно");
			
		КонецЕсли;
		
		// ГруппаДействуетИПериод
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаДействуетИПериод,
			"ДатаНачалаДействия",
			ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
			ОтборДействуетНа,
			,
			ЗначениеЗаполнено(ОтборДействуетНа),
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто);
			
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаДействуетИПериод,
			"ДатаОкончанияДействия",
			ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
			ОтборДействуетНа,
			,
			ЗначениеЗаполнено(ОтборДействуетНа),
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто);
			
		// ГруппаДействуетИБессрочно
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаДействуетИБессрочно,
			"ДатаНачалаДействия",
			ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
			ОтборДействуетНа,
			,
			ЗначениеЗаполнено(ОтборДействуетНа),
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаДействуетИБессрочно,
			"ДействуетБессрочно",
			ВидСравненияКомпоновкиДанных.Равно,
			Истина,
			,
			ЗначениеЗаполнено(ОтборДействуетНа),
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	КонецЕсли;
		
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОтборПриИзменении(Элемент)
	
	Подключаемый_ОтборПриИзмененииНаСервере(Элемент.Имя, Элемент.Родитель.Имя)
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОтборПриИзмененииНаСервере(ЭлементИмя, ЭлементРодительИмя)
	
	РаботаСОтборами.Подключаемый_ОтборПриИзменении(ЭтотОбъект, ЭлементИмя, ЭлементРодительИмя);
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОтборОчистка(Элемент)
	
	Подключаемый_ОтборОчисткаНаСервере(Элемент.Имя, Элемент.Родитель.Имя)
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОтборОчисткаНаСервере(ЭлементИмя, ЭлементРодительИмя)
	
	РаботаСОтборами.Подключаемый_ОтборОчистка(ЭтотОбъект, ЭлементИмя);

КонецПроцедуры

&НаКлиенте
Процедура СброситьВсеОтборы(Команда)
	ОтборДействуетНа = Неопределено;
	УстановитьОтборДействуетНаСервер();
	РаботаСОтборамиКлиент.СброситьОтборПоПериоду(ЭтотОбъект, "Список", "Дата");
	СброситьВсеМеткиОтбораНаСервере();
КонецПроцедуры

&НаСервере
Процедура СброситьВсеМеткиОтбораНаСервере()
	РаботаСОтборами.УдалитьМеткиОтбораСервер(ЭтотОбъект, Список);
КонецПроцедуры

#КонецОбласти

#КонецОбласти
