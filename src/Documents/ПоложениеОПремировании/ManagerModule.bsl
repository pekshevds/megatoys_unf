#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Инициализирует таблицы значений, содержащие данные документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.АктОРасхожденияхПриПриемкеТоваров - документ для инициализации данных.
//  ДополнительныеСвойства - Структура - структура дополнительных свойств.
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Если ДокументСсылка.ВариантИспользованияПоложенияДляМагазина =
		Перечисления.ВариантыИспользованияПоложенийДляРасчетаПремий.ОдноПоложениеДляВсехМагазинов 
		ИЛИ ДокументСсылка.ВариантИспользованияПоложенияДляМагазина <>
			Перечисления.ВариантыИспользованияПоложенийДляРасчетаПремий.ОдноПоложениеДляВсехМагазинов Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПоложениеОПремированииПравилаРасчетаПремий.Ссылка КАК Ссылка,
		|	ПоложениеОПремированииПравилаРасчетаПремий.НомерСтроки КАК НомерСтроки,
		|	ПоложениеОПремированииПравилаРасчетаПремий.Ссылка.ДатаНачалаДействия КАК ПЕРИОД,
		|	ПоложениеОПремированииПравилаРасчетаПремий.Ссылка.ДатаОкончанияДействия КАК ДатаОкончания,
		|	ПоложениеОПремированииПравилаРасчетаПремий.Магазин КАК Магазин,
		|	ПоложениеОПремированииПравилаРасчетаПремий.Ссылка.Организация КАК Организация,
		|	ПоложениеОПремированииПравилаРасчетаПремий.ПравилоРасчетаПремий КАК ПравилоРасчетаПремий
		|ИЗ
		|	Документ.ПоложениеОПремировании.ПравилаРасчетаПремий КАК ПоложениеОПремированииПравилаРасчетаПремий
		|ГДЕ
		|	ПоложениеОПремированииПравилаРасчетаПремий.Ссылка = &Ссылка";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПоложениеОПремированииПравилаРасчетаПремий.Ссылка КАК Ссылка,
		|	ПоложениеОПремированииПравилаРасчетаПремий.Ссылка.Организация КАК Организация,
		|	ПоложениеОПремированииПравилаРасчетаПремий.НомерСтроки КАК НомерСтроки,
		|	ПоложениеОПремированииПравилаРасчетаПремий.Ссылка.ДатаНачалаДействия КАК ПЕРИОД,
		|	ПоложениеОПремированииПравилаРасчетаПремий.Ссылка.ДатаОкончанияДействия КАК ДатаОкончания,
		|	ПоложениеОПремированииПравилаРасчетаПремий.ПравилоРасчетаПремий КАК ПравилоРасчетаПремий
		|ПОМЕСТИТЬ ТаблицаПравилаРасчетаПремий
		|ИЗ
		|	Документ.ПоложениеОПремировании.ПравилаРасчетаПремий КАК ПоложениеОПремированииПравилаРасчетаПремий
		|ГДЕ
		|	ПоложениеОПремированииПравилаРасчетаПремий.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоложениеОПремированииМагазины.Ссылка КАК Ссылка,
		|	ПоложениеОПремированииМагазины.Магазин КАК Магазин
		|ПОМЕСТИТЬ ТаблицаМагазины
		|ИЗ
		|	Документ.ПоложениеОПремировании.Магазины КАК ПоложениеОПремированииМагазины
		|ГДЕ
		|	ПоложениеОПремированииМагазины.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ТаблицаМагазины.Магазин, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК Магазин,
		|	ТаблицаПравилаРасчетаПремий.НомерСтроки КАК НомерСтроки,
		|	ТаблицаПравилаРасчетаПремий.ПЕРИОД КАК ПЕРИОД,
		|	ТаблицаПравилаРасчетаПремий.ДатаОкончания КАК ДатаОкончания,
		|	ТаблицаПравилаРасчетаПремий.ПравилоРасчетаПремий КАК ПравилоРасчетаПремий,
		|	ТаблицаПравилаРасчетаПремий.Организация КАК Организация
		|ИЗ
		|	ТаблицаМагазины КАК ТаблицаМагазины,
		|	ТаблицаПравилаРасчетаПремий КАК ТаблицаПравилаРасчетаПремий";
		
	КонецЕсли;
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ТаблицыДляДвижений.Вставить("ТаблицаДействующихПравил", ТаблицаРезультат);
	
КонецПроцедуры

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом

// При заполнении ограничений доступа
//
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ДляВсехСтрок(ЗначениеРазрешено(ЕстьNull(Магазины.Магазин, Значение(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))))";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнтерфейсПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПоложениеОПремировании";
	КомандаПечати.Представление = НСтр("ru = 'Положение о премировании'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 4;	
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПоложениеОПремировании") Тогда
		
		ДанныеДляПечати = ПолучитьДанныеДляПечати(МассивОбъектов);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПоложениеОПремировании", НСтр("ru = 'ПоложениеОПремировании'"), 
				ПечатнаяФормаПоложениеОПремировании(ДанныеДляПечати, ОбъектыПечати));
		
	КонецЕсли;
			
	// параметры отправки печатных форм по электронной почте
	ЭлектроннаяПочтаУНФ.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов,
		КоллекцияПечатныхФорм);
	
КонецПроцедуры

Функция ПолучитьДанныеДляПечати(МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоложениеОПремировании.Ссылка КАК ДокументСсылка,
	               |	ПоложениеОПремировании.Номер КАК Номер,
	               |	ПоложениеОПремировании.Дата КАК Дата,
	               |	ПоложениеОПремировании.Проведен КАК Проведен,
	               |	ПоложениеОПремировании.ДатаНачалаДействия КАК ДатаНачалаДействия,
	               |	ПоложениеОПремировании.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	               |	ПоложениеОПремировании.ВариантИспользованияПоложенияДляМагазина КАК ВариантИспользованияПоложенияДляМагазина,
	               |	ПоложениеОПремировании.Автор КАК Автор,
	               |	ВЫРАЗИТЬ(ПоложениеОПремировании.Комментарий КАК СТРОКА(1000)) КАК Комментарий,
	               |	ПоложениеОПремировании.Организация КАК Организация,
	               |	ПоложениеОПремировании.Магазины.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		Магазин КАК Магазин
	               |	) КАК Магазины,
	               |	ПоложениеОПремировании.ПравилаРасчетаПремий.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		ПравилоРасчетаПремий КАК ПравилоРасчетаПремий,
	               |		Магазин КАК Магазин
	               |	) КАК ПравилаРасчетаПремий,
	               |	ПоложениеОПремировании.Организация.Префикс КАК Префикс
	               |ИЗ
	               |	Документ.ПоложениеОПремировании КАК ПоложениеОПремировании
	               |ГДЕ
	               |	ПоложениеОПремировании.Ссылка В(&МассивОбъектов)";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПечатнаяФормаПоложениеОПремировании(ДанныеДляПечати, ОбъектыПечати)
	
	Перем ПервыйДокумент, НомерСтрокиНачало, Ошибки;
	
	ТабличныйДокументОбщий = Новый ТабличныйДокумент;
	
	Для каждого ДанныеПоДокументу Из ДанныеДляПечати Цикл
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		
		ПечатьДокументовУНФ.ПередНачаломФормированияДокумента(ТабличныйДокументОбщий, ПервыйДокумент, НомерСтрокиНачало);
		
		Макет = Документы.ПоложениеОПремировании.ПолучитьМакет("ПФ_MXL_ПоложениеОПремировании");
		
		// Организация
		СведенияОбОрганизации = ПечатьДокументовУНФ.СведенияОЮрФизЛице(ДанныеПоДокументу.Организация,
			ДанныеПоДокументу.Дата);
		ОбластьОрганизация = ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "Организация", "", Ошибки);
		ОбластьОрганизация.Параметры.СведенияОбОрганизации = СведенияОбОрганизации.ПолноеНаименование;
		ТабличныйДокумент.Вывести(ОбластьОрганизация);
		
		// Заголовок
		НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(ДанныеПоДокументу.Дата,
			ДанныеПоДокументу.Номер, ДанныеПоДокументу.Префикс);
			
		ПредставлениеДокументаДляСохранения = СокрЛП(СтрШаблон(НСтр("ru ='Положение о премировании № %1 от %2'"),
			НомерДокумента, Формат(ДанныеПоДокументу.Дата, "ДЛФ=DD")));
			
		ПредставлениеДокументаДляПечати = СокрЛП(СтрШаблон(НСтр("ru ='Положение о премировании № %1 от %2'"), НомерДокумента,
			Формат(ДанныеПоДокументу.Дата, "ДЛФ=DD")));
			
		ОбластьЗаголовок = ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "Заголовок", "", Ошибки);
		Если ОбластьЗаголовок <> Неопределено Тогда

			ОбластьЗаголовок.Параметры.ТекстЗаголовка = ПредставлениеДокументаДляПечати;
			ТабличныйДокумент.Вывести(ОбластьЗаголовок);

		КонецЕсли;
		
		// Вариант использования и дата
		
		ПервыйПараметр = ДанныеПоДокументу.ВариантИспользованияПоложенияДляМагазина;
		ВторойПараметр = Формат(ДанныеПоДокументу.ДатаНачалаДействия, "ДЛФ=DD");
		
		Если ЗначениеЗаполнено(ДанныеПоДокументу.ДатаОкончанияДействия) Тогда
			
			ДатаОкончания = Формат(ДанныеПоДокументу.ДатаОкончанияДействия, "ДЛФ=DD");
			ТретийПараметр = СтрШаблон(НСтр("ru = 'по %1'"), ДатаОкончания);
			
		Иначе
			
			ТретийПараметр = НСтр("ru = 'бессрочно'");
			
		КонецЕсли;
		
		ВариантИспользованияПредставление = СокрЛП(СтрШаблон(НСтр("ru = '%1 за период с %2 %3'"), 
			ПервыйПараметр,
			ВторойПараметр,
			ТретийПараметр));
			
		ОбластьВариантИспользования = ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "ВариантИспользования", "", Ошибки);
		Если ОбластьВариантИспользования <> Неопределено Тогда
			
			ОбластьВариантИспользования.Параметры.ВариантИспользования = ВариантИспользованияПредставление;
			ТабличныйДокумент.Вывести(ОбластьВариантИспользования);
			
		КонецЕсли;
			
		// Табличные части
		Если ДанныеПоДокументу.ВариантИспользованияПоложенияДляМагазина 
				= Перечисления.ВариантыИспользованияПоложенийДляРасчетаПремий.ИндивидуальноеДляМагазина Тогда
				
				ОбластьШапкаТаблицы = ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "ШапкаТаблицы", "", Ошибки);
				Если ОбластьШапкаТаблицы <> Неопределено Тогда
					
					ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
					
				КонецЕсли;
				
				ПравилаРасчетаПремий = ДанныеПоДокументу.ПравилаРасчетаПремий;
				Для каждого СтрокаПравил Из ПравилаРасчетаПремий Цикл
				
					ОбластьСтрока = ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "Строка", "", Ошибки);
					Если ОбластьСтрока <> Неопределено Тогда
						
						ОбластьСтрока.Параметры.Заполнить(СтрокаПравил);
						ТабличныйДокумент.Вывести(ОбластьСтрока);
						
					КонецЕсли;
					
				КонецЦикла;
				
		ИначеЕсли ДанныеПоДокументу.ВариантИспользованияПоложенияДляМагазина 
				= Перечисления.ВариантыИспользованияПоложенийДляРасчетаПремий.ОдноПоложениеДляВсехМагазинов Тогда
				
				ОбластьШапкаТаблицы = ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "ШапкаТаблицыОдноДляВсех", "", Ошибки);
				Если ОбластьШапкаТаблицы <> Неопределено Тогда
					
					ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
					
				КонецЕсли;
				
				ПравилаРасчетаПремий = ДанныеПоДокументу.ПравилаРасчетаПремий;
				Для каждого СтрокаПравил Из ПравилаРасчетаПремий Цикл
				
					ОбластьСтрока = ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "СтрокаОдноДляВсех", "", Ошибки);
					Если ОбластьСтрока <> Неопределено Тогда
						
						ОбластьСтрока.Параметры.Заполнить(СтрокаПравил);
						ТабличныйДокумент.Вывести(ОбластьСтрока);
						
					КонецЕсли;
					
				КонецЦикла;
				
		ИначеЕсли ДанныеПоДокументу.ВариантИспользованияПоложенияДляМагазина 
				= Перечисления.ВариантыИспользованияПоложенийДляРасчетаПремий.ОдноДляВыбранныхМагазинов Тогда
				
				ОбластьШапкаТаблицы = ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "ШапкаТаблицы", "", Ошибки);
				Если ОбластьШапкаТаблицы <> Неопределено Тогда
					
					ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
					
				КонецЕсли;
				
				Магазины = ДанныеПоДокументу.Магазины;
				ПравилаРасчетаПремий = ДанныеПоДокументу.ПравилаРасчетаПремий;
				
				ТаблицаСортировки = Новый ТаблицаЗначений;
				ТаблицаСортировки.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(10));
				ТаблицаСортировки.Колонки.Добавить("Таблица", Новый ОписаниеТипов("ТаблицаЗначений"));
				
				Запись = ТаблицаСортировки.Добавить();
				Запись.Количество = Магазины.Количество();
				Запись.Таблица = Магазины;
				
				Запись = ТаблицаСортировки.Добавить();
				Запись.Количество = ПравилаРасчетаПремий.Количество();
				ПравилаРасчетаПремий.Колонки.Удалить("Магазин");
				Запись.Таблица = ПравилаРасчетаПремий;
				
				ТаблицаСортировки.Сортировать("Количество Убыв");
				
				Таблица1 = ТаблицаСортировки[0].Таблица;
				Таблица2 = ТаблицаСортировки[1].Таблица;
				
				Для каждого СтрокаТаблицы1 Из Таблица1 Цикл
					
					ОбластьСтрока = ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "Строка", "", Ошибки);
					
					Индекс = Таблица1.Индекс(СтрокаТаблицы1);
					Если Таблица2.Количество() >= Индекс + 1 Тогда
						СтрокаТаблицы2 = Таблица2[Индекс];
					Иначе
						СтрокаТаблицы2 = Неопределено;
					КонецЕсли;
					
					Если ОбластьСтрока <> Неопределено Тогда
						
						ОбластьСтрока.Параметры.Заполнить(СтрокаТаблицы1);
						Если СтрокаТаблицы2 <> Неопределено Тогда
							ОбластьСтрока.Параметры.Заполнить(СтрокаТаблицы2);
						КонецЕсли;
						ТабличныйДокумент.Вывести(ОбластьСтрока);
						
					КонецЕсли;
				
				КонецЦикла;
				
		КонецЕсли;
		
		ОбластьПодвал = ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "Подвал", "", Ошибки);
		Если ОбластьПодвал <> Неопределено Тогда
			
			ТабличныйДокумент.Вывести(ОбластьПодвал);
			
		КонецЕсли;
		
		ТабличныйДокументОбщий.Вывести(ТабличныйДокумент);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокументОбщий, НомерСтрокиНачало, ОбъектыПечати,
			ДанныеПоДокументу.ДокументСсылка);
	
	КонецЦикла;

	Возврат ТабличныйДокументОбщий;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли