#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ОбновитьЗаголовокДняНедели();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиУНФ.ЗаполнитьДополнительныеПараметры(Объект,
		"ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	НаборСвойств_Документ_ЕжедневныйОтчет = УправлениеСвойствами.НаборСвойствПоИмени("Документ_ЕжедневныйОтчет");
	// Конец СтандартныеПодсистемы.Свойства
	
	ОбновитьЗаголовокДняНедели();
	ПрочитатьИУстановитьНастройкиФормы();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбработатьПодключениеОборудованияПриОткрытии();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		
		ОбработатьСобытиеОповещенияПодключаемогоОборудования(ИмяСобытия, Параметр);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.СтруктурныеЕдиницы.Форма.ФормаСписка" Тогда
		
		Объект.Склад = ВыбранноеЗначение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Для каждого Строка Из Объект.ОтработанноеВремя Цикл
	
		Если ЗначениеЗаполнено(Строка.ОкончаниеРаботы)
			И Строка.ОкончаниеРаботы < Строка.НачалоРаботы Тогда
			
			ТекстСообщения = НСтр("ru='Время окончания работы не может быть меньше времени начала'");
			Поле = "Объект.ОтработанноеВремя[" + Объект.ОтработанноеВремя.Индекс(Строка) + "].ОкончаниеРаботы";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , Поле, , Отказ);
			
		КонецЕсли;
	
	КонецЦикла;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Обработчик механизма "Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура ДатаОтчетаПриИзменении(Элемент)
	
	ОбновитьЗаголовокДняНедели();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтчетаОчистка(Элемент, СтандартнаяОбработка)
	
	ОбновитьЗаголовокДняНедели();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗакрытьНажатие(Элемент)
	
	ДекорацияИнформацияЗакрытьНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтработанноеВремя

&НаКлиенте
Процедура ОтработанноеВремяНачалоРаботыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ОтработанноеВремя.ТекущиеДанные;
	ОбновитьПоказателиВремени(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработанноеВремяОкончаниеРаботыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ОтработанноеВремя.ТекущиеДанные;
	ОбновитьПоказателиВремени(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработанноеВремяПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РассчитатьПродолжительностьДня();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработанноеВремяПослеУдаления(Элемент)
	
	РассчитатьПродолжительностьДня();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработанноеВремяПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьПродолжительностьДня();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсторияСообщений

&НаКлиенте
Процедура СписокСообщенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "СписокСообщенийСсылкаНаСообщение" Тогда
		
		ОбработатьНажатиеСсылкиВИсторииСообщений(ВыбраннаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьСмену(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		
		ЗаполнитьСменуНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСменуНаСервере()
	
	Объект.ОтработанноеВремя.Очистить();
	
	Документы.ЕжедневныйОтчет.ЗаполнитьТабличнуюЧастьСотрудникиСмены(Объект);
	
	ОбновитьПоказателиВремениНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", НаборСвойств_Документ_ЕжедневныйОтчет);
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы, , , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьЗаголовокДняНедели()
	
	Если ЗначениеЗаполнено(Объект.ДатаОтчета) Тогда
		
		НомерДняНедели = ДеньНедели(Объект.ДатаОтчета);
		ЗначениеПеречисления = Перечисления.ДниНедели.Получить(НомерДняНедели - 1);
		ИмяПеречисления = ЗначениеПеречисления.Метаданные().ЗначенияПеречисления.Получить(НомерДняНедели - 1).Имя;
		Элементы.ДеньНедели.Заголовок = ИмяПеречисления;
		
	Иначе
		
		Элементы.ДеньНедели.Заголовок = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПродолжительностьДня()
	
	Разность = 0.00;
	ТекущаяСтрока = Элементы.ОтработанноеВремя.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		
		ТекСтрока = Объект.ОтработанноеВремя.НайтиПоИдентификатору(Элементы.ОтработанноеВремя.ТекущаяСтрока);
		
		Если ЗначениеЗаполнено(ТекСтрока.ОкончаниеРаботы)
			И ЗначениеЗаполнено(ТекСтрока.НачалоРаботы) Тогда
			
			Разность = Разность + (ТекСтрока.ОкончаниеРаботы - ТекСтрока.НачалоРаботы);
			
			Если Разность > 0.00 Тогда
				
				Продолжительность = ЗарплатаИПерсоналКлиентСервер.ПреобразоватьСекундыВДату(Разность);
				
			ИначеЕсли Разность < 0.00 Тогда
				
				Продолжительность = Дата(1, 1, 1);
				
			Иначе
				
				ТекСтрока.ПродолжительностьДня = Дата("00010101");
				
			КонецЕсли;
			
			Если Продолжительность <> Неопределено Тогда
				
				ТекСтрока.ПродолжительностьДня = Продолжительность;
				
			Иначе
				
				ТекСтрока.ПродолжительностьДня = Дата("00010101");
				
			КонецЕсли;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекСтрока.ОкончаниеРаботы)
			И ЗначениеЗаполнено(ТекСтрока.НачалоРаботы) Тогда
			
			ОтметкаНачалаРаботы = ТекСтрока.НачалоРаботы - Дата(1, 1, 1);
			ОтметкаКонцаСуток = 86400;
			
			Разность = ОтметкаКонцаСуток - ОтметкаНачалаРаботы;
			Продолжительность = ЗарплатаИПерсоналКлиентСервер.ПреобразоватьСекундыВДату(Разность);
			ТекСтрока.ПродолжительностьДня = Продолжительность;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПоказателиВремениНаСервере()
	
	Для каждого ТекущаяСтрока Из Объект.ОтработанноеВремя Цикл
		
		РазностьВСекундах = ТекущаяСтрока.ОкончаниеРаботы - ТекущаяСтрока.НачалоРаботы;
		
		Если РазностьВСекундах > 0.00 Тогда
			
			ТекущаяСтрока.Всего = ЗарплатаИПерсоналКлиентСервер.ПреобразоватьСекундыВДату(РазностьВСекундах);
			
		Иначе
			
			ТекущаяСтрока.Всего = 0.00;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоказателиВремени(ТекущаяСтрока)
	
	РазностьВСекундах = ТекущаяСтрока.ОкончаниеРаботы - ТекущаяСтрока.НачалоРаботы;
	
	Если РазностьВСекундах > 0.00 Тогда
		
		ТекущаяСтрока.Всего = ЗарплатаИПерсоналКлиентСервер.ПреобразоватьСекундыВДату(РазностьВСекундах);
		
	Иначе
		
		ТекущаяСтрока.Всего = 0.00;
		
	КонецЕсли;
	
	РассчитатьПродолжительностьДня();
	
КонецПроцедуры

&НаСервере
Процедура ДекорацияИнформацияЗакрытьНаСервере()
	
	Элементы.ГруппаШапкаИнформация.Видимость = Ложь;
	
	КлючОбъекта			= ИмяФормы + "/НастройкиФормы";
	КлючНастройки = "ОтображатьПанельИнформации";
	ТекущиеНастройки 	= ХранилищеСистемныхНастроек.Загрузить(КлючОбъекта, КлючНастройки);
	
	Если ТекущиеНастройки = Неопределено Тогда
		ТекущиеНастройки = Новый ХранилищеЗначения(Новый Структура("Видимость", Ложь));
	КонецЕсли;
	
	ХранилищеСистемныхНастроек.Сохранить(КлючОбъекта, КлючНастройки, ТекущиеНастройки);

КонецПроцедуры

&НаСервере
Процедура ПрочитатьИУстановитьНастройкиФормы()
	
	КлючОбъекта			= ИмяФормы + "/НастройкиФормы";
	КлючНастройки = "ОтображатьПанельИнформации";
	ТекущиеНастройки 	= ХранилищеСистемныхНастроек.Загрузить(КлючОбъекта, КлючНастройки);
	
	Если ТекущиеНастройки <> Неопределено 
		И ТипЗнч(ТекущиеНастройки) = Тип("ХранилищеЗначения") Тогда
		
		Элементы.ГруппаШапкаИнформация.Видимость = ТекущиеНастройки.Получить().Видимость;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеСсылкиВИсторииСообщений(ВыбраннаяСтрока)
	
	ТекущиеДанные = СписокСообщений.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ТипКода", ТекущиеДанные.ТипКода);
	ПараметрыОткрытияФормы.Вставить("Код", ТекущиеДанные.Код);
	
	ОткрытьФорму("Документ.ЕжедневныйОтчет.Форма.ФормаНазначенияКодаСотруднику",
		ПараметрыОткрытияФормы, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#Область ПодключаемоеОборудование

&НаКлиенте
Процедура ОбработатьПодключениеОборудованияПриОткрытии()
	
	ПоддерживаемыеТипыОборудования = Новый Массив();
	ПоддерживаемыеТипыОборудования.Добавить("СчитывательМагнитныхКарт");
	ПоддерживаемыеТипыОборудования.Добавить("СканерШтрихкода");
	ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект); 
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоТипу(ОповещенияПриПодключении, УникальныйИдентификатор, ПоддерживаемыеТипыОборудования);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:""%1"".'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСобытиеОповещенияПодключаемогоОборудования(ИмяСобытия, Параметр)
	
	Если Параметр.Количество() > 0 Тогда
		
		Если ИмяСобытия = "TracksData" Тогда
			
			ОбработатьПолучениеКода(Параметр[0], "МагнитныйКод");
			
		ИначеЕсли ИмяСобытия = "ScanData" Тогда
			
			ОбработатьПолучениеКода(Параметр[0], "Штрихкод");
			
		ИначеЕсли ИмяСобытия = "ScanDataBase64" Тогда
			
			СимволыШтрихкодBase64 = Base64Значение(Параметр[0]);
			ОбработатьПолучениеКода(СимволыШтрихкодBase64, "Штрихкод");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолучениеКода(Знач Код, Знач ТипКода)
	
	Код = СокрЛП(Код);
	СотрудникиМассив = Неопределено;
	Если ПустаяСтрока(Код) Тогда
		Сообщение = НСтр("ru='Получен пустой код. Попробуйте еще раз'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(Сообщение); 
		Возврат;
	Иначе
		СотрудникиМассив = НайтиСотрудникаПоПерсональномуКоду(Код, ТипКода);
	КонецЕсли;
	
	Если СотрудникиМассив = Неопределено
		ИЛИ СотрудникиМассив.Количество() = 0 Тогда
		
		ПараметрыСообщения = Новый Структура;
		ПараметрыСообщения.Вставить("Код", Код);
		ПараметрыСообщения.Вставить("ТипКода", ТипКода);
		ПараметрыСообщения.Вставить("Сообщение", СтрШаблон(НСтр("ru='Сотрудник не найден по коду %1'"), Код));
		ПараметрыСообщения.Вставить("Дата", ТекущаяДатаСеансаСервер());
		ПараметрыСообщения.Вставить("Ссылка", НСтр("ru='Назначить код сотруднику'"));
		
		ДобавитьНовоеСообщениеПриСканировании(ПараметрыСообщения);
		
	Иначе
		
		Если СотрудникиМассив.Количество() > 1 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			ШаблонСообщения = НСтр("ru='По коду %1 найдено несколько сотрудников %2. Исправьте, либо выберите вручную'");
			СтрокаСотрудников = СтрСоединить(СотрудникиМассив, ", ");
			Сообщение.Текст = СтрШаблон(ШаблонСообщения, Код, СтрокаСотрудников);
			Сообщение.Сообщить();
			
		Иначе
			
			ОбработатьДобавлениеСотрудникаПоКоду(СотрудникиМассив[0]);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовоеСообщениеПриСканировании(ПараметрыСообщения)
	
	НоваяЗапись = СписокСообщений.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, ПараметрыСообщения);
	
	КодОсновногоЯзыка = ОбщегоНазначенияКлиент.КодОсновногоЯзыка();
	
	Количество = СписокСообщений.Количество();
	
	КоличествоПрописью = ЗагрузкаДанныхИзВнешнегоИсточника.ЧислоИПредметИсчисления(
		Количество,
		НСтр("ru ='запись'", КодОсновногоЯзыка), 
		НСтр("ru ='записи'", КодОсновногоЯзыка),
		НСтр("ru ='записей'", КодОсновногоЯзыка),
		"ж");
	
	СтрокаШаблонСообщения = НСтр("ru='%1 %2 в регистрации нового кода сотрудника'");
	СтрокаСообщения = СтрШаблон(СтрокаШаблонСообщения, Количество, КоличествоПрописью);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ГруппаИсторияСообщений", "ЗаголовокСвернутогоОтображения", СтрокаСообщения);
		
	Если НЕ Элементы.ГруппаИсторияСообщений.Видимость Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ГруппаИсторияСообщений", "Видимость", Истина);
		Элементы.ГруппаИсторияСообщений.Показать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДобавлениеСотрудникаПоКоду(Сотрудник)
	
	Модифицированность = Истина;
	ОтборПоСотруднику = Новый Структура("Сотрудник", Сотрудник);
	СтрокиПоСотруднику = Объект.ОтработанноеВремя.НайтиСтроки(ОтборПоСотруднику);
	
	ПустаяДата = Дата(1, 1, 1);
	ТекущееВремя = ТекущаяДатаСеанса();
	Если СтрокиПоСотруднику.Количество() = 0 Тогда
		
		НоваяЗапись = Объект.ОтработанноеВремя.Добавить();
		НоваяЗапись.Сотрудник = Сотрудник;
		НоваяЗапись.НачалоРаботы = ТекущееВремя;
		
	Иначе
		
		ЗаписьНайдена = Ложь;
		Для каждого Запись Из СтрокиПоСотруднику Цикл
		
			Если Запись.ОкончаниеРаботы = ПустаяДата
				И Запись.НачалоРаботы < ТекущееВремя Тогда
				
				Запись.ОкончаниеРаботы = ТекущееВремя;
				ПродолжительностьДня = ПустаяДата + (ТекущееВремя - Запись.НачалоРаботы);
				Если Час(ПродолжительностьДня) = 0 
						И Минута(ПродолжительностьДня) = 0 Тогда
						
						// меньше минуты
						ПродолжительностьДня = Дата(1, 1, 1, 0, 0, 0);
						
				КонецЕсли;
					
				Запись.ПродолжительностьДня = ПродолжительностьДня;
				ЗаписьНайдена = Истина;
				Прервать;
				
			КонецЕсли;
		
		КонецЦикла;
		
		Если НЕ ЗаписьНайдена Тогда
			
			НоваяЗапись = Объект.ОтработанноеВремя.Добавить();
			НоваяЗапись.Сотрудник = Сотрудник;
			НоваяЗапись.НачалоРаботы = ТекущееВремя;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиСотрудникаПоПерсональномуКоду(Код, ИмяРеквизита)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Сотрудники.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Сотрудники КАК Сотрудники
	               |ГДЕ
	               |	Сотрудники.%1 = &Код";
	Запрос.УстановитьПараметр("Код", Код);
	Запрос.Текст = СтрШаблон(Запрос.Текст, ИмяРеквизита);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#КонецОбласти

&НаСервереБезКонтекста
Функция ТекущаяДатаСеансаСервер()
	Возврат ТекущаяДатаСеанса();
КонецФункции

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

//@skip-check module-unused-method
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти
#КонецОбласти