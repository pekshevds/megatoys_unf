#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ОчиститьДатуНомерВходящегоДокумента(ЭтотОбъект);
	ШтрихкодыУпаковок.Очистить();
	
	// Прослеживаемость
	СведенияПрослеживаемости.Очистить();
	ПрослеживаемостьУНФ.ОбновитьПризнакПрослеживаемости(Запасы, Дата);
	// Конец Прослеживаемость
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	// Прослеживаемость
	СведенияПрослеживаемости.Очистить();
	// Конец Прослеживаемость
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ПриходнаяНакладная")] = "ЗаполнитьПоПоступлению";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
	// Прослеживаемость
	ПрослеживаемостьУНФ.ОбновитьПризнакПрослеживаемости(Запасы, Дата);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьСуммыДоКорректировки();
	СуммаДокумента = Запасы.Итог("Всего") + Расходы.Итог("Всего");
	
	Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимНаправлениямДеятельности.Получить() Тогда
		
		Если НЕ ВключатьРасходыВСебестоимость Тогда
			
			Для Каждого СтрокаРасходы Из Расходы Цикл
				
				Если СтрокаРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = Перечисления.ТипыСчетов.Расходы Тогда
					
					СтрокаРасходы.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент)
		И НЕ Контрагент.ВестиРасчетыПоДоговорам
		И НЕ ЗначениеЗаполнено(Договор) Тогда
		Договор = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;
	
	// Прослеживаемость
	ПрослеживаемыйТовар = Запасы.НайтиСтроки(Новый Структура("ПрослеживаемыйТовар", Истина));
	ЕстьПрослеживаемыйТовар = ПрослеживаемыйТовар.Количество() <> 0;
	Если ЕстьПрослеживаемыйТовар Тогда
		ПрослеживаемостьУНФ.ПодобратьРНПТКорректировка(ЭтотОбъект, Отказ);
	Иначе
		СведенияПрослеживаемости.Очистить();
	КонецЕсли;
	// Конец Прослеживаемость
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Проверка наличия розничной цены.
	ПроверитьНаличиеРозничнойЦены(Отказ);
	
	Если Запасы.Количество() > 0 Тогда
		ПроверяемыеРеквизиты.Добавить("СтруктурнаяЕдиница");
	КонецЕсли;
	
	Если НЕ ВключатьРасходыВСебестоимость
		И ТипЗнч(ДокументОснование) <> Тип("ДокументСсылка.ДополнительныеРасходы") Тогда
		
		Для Каждого СтрокаРасходы Из Расходы Цикл
			
			Если Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить()
				И (СтрокаРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = Перечисления.ТипыСчетов.НезавершенноеПроизводство
				ИЛИ СтрокаРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = Перечисления.ТипыСчетов.КосвенныеЗатраты
				ИЛИ СтрокаРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = Перечисления.ТипыСчетов.Доходы
				ИЛИ СтрокаРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = Перечисления.ТипыСчетов.Расходы)
				И НЕ ЗначениеЗаполнено(СтрокаРасходы.СтруктурнаяЕдиница) Тогда
				ТекстСообщения = СтрШаблон(НСтр(
					"ru = 'Для номенклатуры ""%1"" указанной в строке %2 списка ""Услуги"", должен быть заполнен реквизит ""Подразделение"".'"),
					СокрЛП(СтрокаРасходы.Номенклатура), СтрокаРасходы.НомерСтроки);
				КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Расходы", СтрокаРасходы.НомерСтроки,
					"СтруктурнаяЕдиница");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Если (ВключатьРасходыВСебестоимость
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ДополнительныеРасходы"))
		И Запасы.Итог("СуммаРасходов") <> Расходы.Итог("Всего") Тогда
		
		ТекстСообщения = НСтр("ru = 'Сумма услуг не равна распределенной сумме по запасам.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
		
	КонецЕсли;
	
	ТаблицаЗапасы = Запасы.Выгрузить(, "Заказ, Всего");
	ТаблицаЗапасы.Свернуть("Заказ", "Всего");
	
	ТаблицаРасходы = Расходы.Выгрузить(, "ЗаказПоставщику, Всего");
	ТаблицаРасходы.Свернуть("ЗаказПоставщику", "Всего");
	
	Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Договор");
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, Отказ, Истина);
	
	ГрузовыеТаможенныеДекларацииСервер.ПриОбработкеПроверкиЗаполнения(Отказ, ЭтотОбъект);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Заполнение

// АПК:299-выкл вызывается из внешней процедуры
Процедура ЗаполнитьПоПоступлению(ДанныеЗаполнения) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриходнаяНакладная")
		И ДанныеЗаполнения.ВидОперации <> Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика Тогда
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Акт о расхождениях можно вводить только по операции ""Поступление от поставщика"".'"),
		ДанныеЗаполнения);
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	ВидОперацииЗаполнения = Неопределено;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		ВидОперацииЗаполнения = ?(ДанныеЗаполнения.Свойство("ВидОперации"), ДанныеЗаполнения.ВидОперации, Неопределено);
		ДокументОснование = ДанныеЗаполнения.ДокументОснование;
	Иначе
		ДокументОснование = ДанныеЗаполнения;
	КонецЕсли;
	
	ЗаполнитьСвойстваШапки(ВидОперацииЗаполнения);
	
	Запасы.Очистить();
	Расходы.Очистить();
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса(ДанныеЗаполнения.Метаданные().Имя);
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = МассивРезультатов[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	
	ВыборкаЗапасы = МассивРезультатов[1].Выбрать();
	Пока ВыборкаЗапасы.Следующий() Цикл
		
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗапасы);
		
	КонецЦикла;
	
	ВыборкаПрослеживаемость = МассивРезультатов[3].Выбрать();
	Пока ВыборкаПрослеживаемость.Следующий() Цикл
		
		НоваяСтрока = СведенияПрослеживаемости.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПрослеживаемость);
		
	КонецЦикла;
	
	ВыборкаРасходы = МассивРезультатов[2].Выбрать();
	Пока ВыборкаРасходы.Следующий() Цикл
		
		НоваяСтрока = Расходы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРасходы);
		
	КонецЦикла;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОснование, "Проект") Тогда
		Проект = ДокументОснование.Проект;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения) И НЕ ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И Не ДанныеЗаполнения.Метаданные().ТабличныеЧасти.Найти("СерииНоменклатуры") = Неопределено Тогда
		
		СерииНоменклатуры.Очистить();
		ПеренестиСерииНоменклатуры(ДанныеЗаполнения.СерииНоменклатуры, ДанныеЗаполнения.Запасы);
		
		Если Не ДанныеЗаполнения.Метаданные().ТабличныеЧасти.Найти("СерииНоменклатурыДоКорректировки") = Неопределено Тогда
			СерииНоменклатурыДоКорректировки.Очистить();
			ПеренестиСерииНоменклатуры(ДанныеЗаполнения.СерииНоменклатурыДоКорректировки, ДанныеЗаполнения.Запасы, Истина);
		Иначе
			СерииНоменклатурыДоКорректировки.Очистить();
			ПеренестиСерииНоменклатуры(ДанныеЗаполнения.СерииНоменклатуры, ДанныеЗаполнения.Запасы, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
// АПК:299-вкл

Процедура ПеренестиСерииНоменклатуры(ТаблицаСерииНоменклатурыДокумента, ТаблицаЗапасыДокумента, СерииДоКорректировки = Ложь)
	
	Если Не ТаблицаСерииНоменклатурыДокумента.Количество() Тогда
		Возврат
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Партия");
	СтруктураПоискаКлючСвязи = Новый Структура("КлючСвязи");
	
	ТаблицаСтрокЗапасовССериями = Новый ТаблицаЗначений;
	ТаблицаСтрокЗапасовССериями.Колонки.Добавить("КлючСвязи");
	
	Для Каждого СтрокаСерийДокумента Из ТаблицаСерииНоменклатурыДокумента Цикл
		
		СтруктураПоискаКлючСвязи.КлючСвязи = СтрокаСерийДокумента.КлючСвязи;
		
		НайденныеСтрокиЗапасыДокументаОснования = ТаблицаЗапасыДокумента.НайтиСтроки(СтруктураПоискаКлючСвязи);
		
		Если Не НайденныеСтрокиЗапасыДокументаОснования.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		НайденнаяСтрока = НайденныеСтрокиЗапасыДокументаОснования[0];
		
		СтруктураПоиска.Номенклатура = НайденнаяСтрока.Номенклатура;
		СтруктураПоиска.Характеристика = НайденнаяСтрока.Характеристика;
		СтруктураПоиска.Партия = НайденнаяСтрока.Партия;
		
		НайденныеСтрокиЗапасы = Запасы.НайтиСтроки(СтруктураПоиска);
		
		Если Не НайденныеСтрокиЗапасы.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаЗапасовССериями = ТаблицаСтрокЗапасовССериями.Добавить();
		СтрокаЗапасовССериями.КлючСвязи = НайденныеСтрокиЗапасы[0].КлючСвязи;
		
		Если СерииДоКорректировки Тогда
			НоваяСтрокаСерии = СерииНоменклатурыДоКорректировки.Добавить();
		Иначе
			НоваяСтрокаСерии = СерииНоменклатуры.Добавить();
		КонецЕсли;
	
		НоваяСтрокаСерии.КлючСвязи = НайденныеСтрокиЗапасы[0].КлючСвязи;
		НоваяСтрокаСерии.Количество = СтрокаСерийДокумента.Количество;
		НоваяСтрокаСерии.Серия = СтрокаСерийДокумента.Серия;
		
	КонецЦикла;
	
	ТаблицаСтрокЗапасовССериями.Свернуть("КлючСвязи");
	
	// Заполним строковое представление серий
	
	Для Каждого СтрокаТаблицыЗапасовССериями Из ТаблицаСтрокЗапасовССериями Цикл
		
		СтроковоеПредставлениеСерийНоменклатуры = "";
		СтруктураПоискаКлючСвязи.КлючСвязи = СтрокаТаблицыЗапасовССериями.КлючСвязи;
		
		Если СерииДоКорректировки Тогда
			НайденныеСтрокиСерии = СерииНоменклатурыДоКорректировки.НайтиСтроки(СтруктураПоискаКлючСвязи);
		Иначе
			НайденныеСтрокиСерии = СерииНоменклатуры.НайтиСтроки(СтруктураПоискаКлючСвязи);
		КонецЕсли;
		
		Если Не НайденныеСтрокиСерии.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаСерий Из НайденныеСтрокиСерии Цикл
			
			СтроковоеПредставлениеСерийНоменклатуры = СтроковоеПредставлениеСерийНоменклатуры + СтрокаСерий.Серия+"; ";
			
		КонецЦикла;
		
		СтроковоеПредставлениеСерийНоменклатуры = Лев(СтроковоеПредставлениеСерийНоменклатуры, Мин(СтрДлина(СтроковоеПредставлениеСерийНоменклатуры)-2,150));
		
		НайденныеСтрокиЗапасы = Запасы.НайтиСтроки(СтруктураПоискаКлючСвязи);
		
		Если Не НайденныеСтрокиЗапасы.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		Если СерииДоКорректировки Тогда
			НайденныеСтрокиЗапасы[0].СерииНоменклатурыДоКорректировки = СтроковоеПредставлениеСерийНоменклатуры;
		Иначе
			НайденныеСтрокиЗапасы[0].СерииНоменклатуры = СтроковоеПредставлениеСерийНоменклатуры;
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

Функция ТекстЗапроса(Знач ИмяВидаДокумента)
	
	Результат =
	"ВЫБРАТЬ
	|	ПриходнаяНакладная.Ссылка КАК ДокументОснование,
	|	ПриходнаяНакладная.Организация КАК Организация,
	|	ПриходнаяНакладная.Контрагент КАК Контрагент,
	|	ПриходнаяНакладная.Договор КАК Договор,
	|	ПриходнаяНакладная.Заказ КАК Заказ,
	|	ПриходнаяНакладная.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ПриходнаяНакладная.Ячейка КАК Ячейка,
	|	ПриходнаяНакладная.ВключатьРасходыВСебестоимость КАК ВключатьРасходыВСебестоимость,
	|	ПриходнаяНакладная.ВалютаДокумента КАК ВалютаДокумента,
	|	ПриходнаяНакладная.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ПриходнаяНакладная.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ПриходнаяНакладная.НДСВключатьВСтоимость КАК НДСВключатьВСтоимость,
	|	ПриходнаяНакладная.Курс КАК Курс,
	|	ПриходнаяНакладная.Кратность КАК Кратность,
	|	ПриходнаяНакладная.СуммаДокумента КАК СуммаДокумента,
	|	ПриходнаяНакладная.ВидЦенКонтрагента КАК ВидЦенКонтрагента,
	|	ПриходнаяНакладная.РегистрироватьЦеныПоставщика КАК РегистрироватьЦеныПоставщика,
	|	ПриходнаяНакладная.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ПриходнаяНакладная.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ПриходнаяНакладная.Подразделение КАК Подразделение,
	|	ПриходнаяНакладная.Ответственный КАК Ответственный,
	|	ПриходнаяНакладная.ДокументПоступления КАК ДокументПоступления
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
	|ГДЕ
	|	ПриходнаяНакладная.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходнаяНакладнаяЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ПриходнаяНакладнаяЗапасы.НомерГТД КАК НомерГТД,
	|	ПриходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
	|	ПриходнаяНакладнаяЗапасы.Характеристика КАК Характеристика,
	|	ПриходнаяНакладнаяЗапасы.Партия КАК Партия,
	|	ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПриходнаяНакладнаяЗапасы.Количество КАК Количество,
	|	ПриходнаяНакладнаяЗапасы.Цена КАК Цена,
	|	ПриходнаяНакладнаяЗапасы.Сумма КАК Сумма,
	|	ПриходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ПриходнаяНакладнаяЗапасы.СуммаНДС КАК СуммаНДС,
	|	ПриходнаяНакладнаяЗапасы.Заказ КАК Заказ,
	|	ПриходнаяНакладнаяЗапасы.Всего КАК Всего,
	|	ПриходнаяНакладнаяЗапасы.Себестоимость КАК Себестоимость,
	|	ПриходнаяНакладнаяЗапасы.СуммаРасходов КАК СуммаРасходов,
	|	ПриходнаяНакладнаяЗапасы.Содержание КАК Содержание,
	|	ПриходнаяНакладнаяЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ПриходнаяНакладнаяЗапасы.Ячейка КАК Ячейка,
	|	ПриходнаяНакладнаяЗапасы.Количество КАК КоличествоДоИзменения,
	|	ПриходнаяНакладнаяЗапасы.Цена КАК ЦенаДоИзменения,
	|	ПриходнаяНакладнаяЗапасы.Сумма КАК СуммаДоИзменения,
	|	ПриходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДСДоИзменения,
	|	ПриходнаяНакладнаяЗапасы.СуммаНДС КАК СуммаНДСДоИзменения,
	|	ПриходнаяНакладнаяЗапасы.Всего КАК ВсегоДоИзменения,
	|	ПриходнаяНакладнаяЗапасы.СуммаРасходов КАК СуммаРасходовДоИзменения,
	|	ПриходнаяНакладнаяЗапасы.НомерСтроки КАК КлючСвязи,
	|	ПриходнаяНакладнаяЗапасы.Содержание КАК СодержаниеДоИзменения,
	|	ИСТИНА КАК ЕстьВДокументеПоступления,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяНакладнаяЗапасы.Ссылка) = ТИП(Документ.ПриходнаяНакладная)
	|			ТОГДА ПриходнаяНакладнаяЗапасы.ТоварыДляПроизводства
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТоварыДляПроизводства,
	|	ПриходнаяНакладнаяЗапасы.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
	|	ПриходнаяНакладнаяЗапасы.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ПриходнаяНакладнаяЗапасы.ДокументПоступления КАК ДокументПоступления
	|ИЗ
	|	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
	|ГДЕ
	|	ПриходнаяНакладнаяЗапасы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходнаяНакладнаяРасходы.Номенклатура КАК Номенклатура,
	|	ПриходнаяНакладнаяРасходы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПриходнаяНакладнаяРасходы.Количество КАК Количество,
	|	ПриходнаяНакладнаяРасходы.Цена КАК Цена,
	|	ПриходнаяНакладнаяРасходы.Сумма КАК Сумма,
	|	ПриходнаяНакладнаяРасходы.СтавкаНДС КАК СтавкаНДС,
	|	ПриходнаяНакладнаяРасходы.СуммаНДС КАК СуммаНДС,
	|	ПриходнаяНакладнаяРасходы.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ПриходнаяНакладнаяРасходы.Всего КАК Всего,
	|	ПриходнаяНакладнаяРасходы.Заказ КАК Заказ,
	|	ПриходнаяНакладнаяРасходы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ПриходнаяНакладнаяРасходы.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ПриходнаяНакладнаяРасходы.Содержание КАК Содержание,
	|	ПриходнаяНакладнаяРасходы.Количество КАК КоличествоДоИзменения,
	|	ПриходнаяНакладнаяРасходы.Цена КАК ЦенаДоИзменения,
	|	ПриходнаяНакладнаяРасходы.Сумма КАК СуммаДоИзменения,
	|	ПриходнаяНакладнаяРасходы.СтавкаНДС КАК СтавкаНДСДоИзменения,
	|	ПриходнаяНакладнаяРасходы.СуммаНДС КАК СуммаНДСДоИзменения,
	|	ПриходнаяНакладнаяРасходы.Всего КАК ВсегоДоИзменения,
	|	ПриходнаяНакладнаяРасходы.НомерСтроки КАК КлючСвязи,
	|	ПриходнаяНакладнаяРасходы.Содержание КАК СодержаниеДоИзменения,
	|	ИСТИНА КАК ЕстьВДокументеПоступления
	|ИЗ
	|	Документ.ПриходнаяНакладная.Расходы КАК ПриходнаяНакладнаяРасходы
	|ГДЕ
	|	ПриходнаяНакладнаяРасходы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходнаяНакладнаяСведенияПрослеживаемости.Ссылка КАК Ссылка,
	|	ПриходнаяНакладнаяСведенияПрослеживаемости.НомерСтроки КАК НомерСтроки,
	|	ПриходнаяНакладнаяСведенияПрослеживаемости.РНПТ КАК РНПТ,
	|	ПриходнаяНакладнаяСведенияПрослеживаемости.Количество КАК Количество,
	|	ПриходнаяНакладнаяСведенияПрослеживаемости.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
	|	ПриходнаяНакладнаяСведенияПрослеживаемости.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ПриходнаяНакладнаяСведенияПрослеживаемости.Номенклатура КАК Номенклатура,
	|	ПриходнаяНакладнаяСведенияПрослеживаемости.Сумма КАК Сумма,
	|	ПриходнаяНакладнаяСведенияПрослеживаемости.СтранаПроисхождения КАК СтранаПроисхождения
	|ИЗ
	|	Документ.ПриходнаяНакладная.СведенияПрослеживаемости КАК ПриходнаяНакладнаяСведенияПрослеживаемости
	|ГДЕ
	|	ПриходнаяНакладнаяСведенияПрослеживаемости.Ссылка = &Ссылка";
	
	Результат = СтрЗаменить(Результат,
	"Документ.ПриходнаяНакладная КАК ПриходнаяНакладная",
	СтрШаблон("Документ.%1 КАК ПриходнаяНакладная", ИмяВидаДокумента));
	
	Результат = СтрЗаменить(Результат,
	"Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы",
	СтрШаблон("Документ.%1.Запасы КАК ПриходнаяНакладнаяЗапасы", ИмяВидаДокумента));
	
	Результат = СтрЗаменить(Результат,
	"Документ.ПриходнаяНакладная.Расходы КАК ПриходнаяНакладнаяРасходы",
	СтрШаблон("Документ.%1.Расходы КАК ПриходнаяНакладнаяРасходы", ИмяВидаДокумента));
	
	Результат = СтрЗаменить(Результат,
	"Документ.ПриходнаяНакладная.Предоплата КАК ПриходнаяНакладнаяПредоплата",
	СтрШаблон("Документ.%1.Предоплата КАК ПриходнаяНакладнаяПредоплата", ИмяВидаДокумента));
	
	Если ИмяВидаДокумента = "ПриходнаяНакладная" Тогда
		
		МодифицироватьТекстЗапросаПриходнаяНакладная(Результат);
		
	ИначеЕсли ИмяВидаДокумента = "КорректировкаПоступления" Тогда
		
		МодифицироватьТекстЗапросаКорректировкаПоступления(Результат);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Недопустимый вид документа: ""%1"".'"), ИмяВидаДокумента);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура МодифицироватьТекстЗапросаКорректировкаПоступления(Результат)
	
	Результат = СтрЗаменить(Результат,
	"	ПриходнаяНакладнаяЗапасы.Содержание КАК СодержаниеДоИзменения,",
	"	ПриходнаяНакладнаяЗапасы.Содержание КАК СодержаниеДоИзменения,
	|	ПриходнаяНакладнаяЗапасы.КоличествоДоКорректировки,
	|	ПриходнаяНакладнаяЗапасы.ЦенаДоКорректировки,
	|	ПриходнаяНакладнаяЗапасы.СуммаДоКорректировки,
	|	ПриходнаяНакладнаяЗапасы.СуммаНДСДоКорректировки,
	|	ПриходнаяНакладнаяЗапасы.ВсегоДоКорректировки,
	|	ПриходнаяНакладнаяЗапасы.СуммаРасходовДоКорректировки,");
	
	Результат = СтрЗаменить(Результат,
	"	ПриходнаяНакладнаяРасходы.Содержание КАК СодержаниеДоИзменения,",
	"	ПриходнаяНакладнаяРасходы.Содержание КАК СодержаниеДоИзменения,
	|	ПриходнаяНакладнаяРасходы.КоличествоДоКорректировки,
	|	ПриходнаяНакладнаяРасходы.ЦенаДоКорректировки,
	|	ПриходнаяНакладнаяРасходы.СуммаДоКорректировки,
	|	ПриходнаяНакладнаяРасходы.СуммаНДСДоКорректировки,
	|	ПриходнаяНакладнаяРасходы.ВсегоДоКорректировки,");
	
	Результат = СтрЗаменить(Результат,
	"	ПриходнаяНакладнаяПредоплата.СуммаПлатежа КАК СуммаПлатежаДоИзменения,",
	"	ПриходнаяНакладнаяПредоплата.СуммаПлатежа КАК СуммаПлатежаДоИзменения,
	|	ПриходнаяНакладнаяПредоплата.СуммаРасчетовДоКорректировки,
	|	ПриходнаяНакладнаяПредоплата.СуммаПлатежаДоКорректировки,");

КонецПроцедуры

Процедура МодифицироватьТекстЗапросаПриходнаяНакладная(Результат)
	
	Результат = СтрЗаменить(Результат,
	"ПриходнаяНакладнаяЗапасы.Количество КАК Количество,",
	"ВЫБОР
	|		КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.ПроверятьРасхожденияСВходящимДокументом
	|			И ПриходнаяНакладнаяЗапасы.Ссылка.ПринятьПоКолонке = ЗНАЧЕНИЕ(Перечисление.ПринятьПоКолонке.КоличествоПоВходящемуДокументу)
	|			ТОГДА ПриходнаяНакладнаяЗапасы.КоличествоСправочно
	|		ИНАЧЕ ПриходнаяНакладнаяЗапасы.Количество
	|	КОНЕЦ КАК Количество,");
	
	Результат = СтрЗаменить(Результат,
	"ПриходнаяНакладнаяЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,",
	"ВЫБОР
	|		КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|			ТОГДА ПриходнаяНакладнаяЗапасы.СтруктурнаяЕдиница
	|		ИНАЧЕ ПриходнаяНакладнаяЗапасы.Ссылка.СтруктурнаяЕдиница
	|	КОНЕЦ КАК СтруктурнаяЕдиница,");
	
	Результат = СтрЗаменить(Результат,
	"ПриходнаяНакладнаяЗапасы.Ячейка КАК Ячейка,",
	"ВЫБОР
	|		КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|			ТОГДА ПриходнаяНакладнаяЗапасы.Ячейка
	|		ИНАЧЕ ПриходнаяНакладнаяЗапасы.Ссылка.Ячейка
	|	КОНЕЦ КАК Ячейка,");
	
КонецПроцедуры

Процедура ЗаполнитьСвойстваШапки(ВидОперацииЗаполнения = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыИсправления = Документы.КорректировкаПоступления.СформироватьПараметрыИсправленияКорректировочногоДокумента(
		ВидОперацииЗаполнения <> Неопределено, Дата, ДокументОснование);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыИсправления);

	ДокументПоступленияСсылка = Документы.КорректировкаПоступления.ПолучитьИсправляемыйДокументПоступления(ДокументОснование, Истина);
	
	Если НЕ ЗначениеЗаполнено(ДокументПоступленияСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ИсправляемыйДокументПоступления = Документы.КорректировкаПоступления.ПолучитьИсправляемыйДокументПоступления(ДокументОснование, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Распределяет затраты по количеству.
//
Процедура РаспределитьТабЧастьРасходыПоКоличеству() Экспорт
	
	ИсхСумма = 0;
	БазаРаспределенияКоличество = Запасы.Итог("Количество");
	ВсегоРасходы = Расходы.Итог("Всего");
	Для каждого СтрокаЗапасы Из Запасы Цикл
		
		СтрокаЗапасы.СуммаРасходов = ?(БазаРаспределенияКоличество <> 0, Окр((ВсегоРасходы - ИсхСумма) * СтрокаЗапасы.Количество / БазаРаспределенияКоличество, 2, 1),0);
		БазаРаспределенияКоличество = БазаРаспределенияКоличество - СтрокаЗапасы.Количество;
		ИсхСумма = ИсхСумма + СтрокаЗапасы.СуммаРасходов;
		
	КонецЦикла;
	
КонецПроцедуры // РаспределитьТабЧастьРасходыПоКоличеству()

// Распределяет затраты по сумме.
//
Процедура РаспределитьТабЧастьРасходыПоСумме() Экспорт
	
	ИсхСумма = 0;
	БазаРаспределенияСумма = Запасы.Итог("Всего");
	ВсегоРасходы = Расходы.Итог("Всего");
	Для каждого СтрокаЗапасы Из Запасы Цикл
		
		СтрокаЗапасы.СуммаРасходов = ?(БазаРаспределенияСумма <> 0, Окр((ВсегоРасходы - ИсхСумма) * СтрокаЗапасы.Всего / БазаРаспределенияСумма, 2, 1),0);
		БазаРаспределенияСумма = БазаРаспределенияСумма - СтрокаЗапасы.Всего;
		ИсхСумма = ИсхСумма + СтрокаЗапасы.СуммаРасходов;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура проверяет наличие розничной цены.
//
Процедура ПроверитьНаличиеРозничнойЦены(Отказ)
	
	Если СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница
		ИЛИ СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("ТаблицаДокумента", Запасы);
		Запрос.УстановитьПараметр("РозничныйВидЦен", СтруктурнаяЕдиница.РозничныйВидЦен);
		Запрос.УстановитьПараметр("СписокНоменклатура", Запасы.ВыгрузитьКолонку("Номенклатура"));
		Запрос.УстановитьПараметр("СписокХарактеристика", Запасы.ВыгрузитьКолонку("Характеристика"));
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Характеристика КАК Характеристика,
		|	ТаблицаДокумента.Партия КАК Партия
		|ПОМЕСТИТЬ ПеремещениеЗапасовЗапасы
		|ИЗ
		|	&ТаблицаДокумента КАК ТаблицаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПеремещениеЗапасовЗапасы.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕ(ПеремещениеЗапасовЗапасы.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ПеремещениеЗапасовЗапасы.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ПеремещениеЗапасовЗапасы.Партия) КАК ПартияПредставление
		|ИЗ
		|	ПеремещениеЗапасовЗапасы КАК ПеремещениеЗапасовЗапасы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&Дата,
		|				ВидЦен = &РозничныйВидЦен
		|					И Номенклатура В (&СписокНоменклатура)
		|					И Характеристика В (&СписокХарактеристика)) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ПеремещениеЗапасовЗапасы.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И ПеремещениеЗапасовЗапасы.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
		|ГДЕ
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) = 0";
		
		ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
			
			ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'Для номенклатуры %1 в строке %2 списка ""Запасы"" не установлена розничная цена.'"),
				Справочники.Номенклатура.Представление(ВыборкаРезультатаЗапроса.НоменклатураПредставление,
					ВыборкаРезультатаЗапроса.ХарактеристикаПредставление, ВыборкаРезультатаЗапроса.ПартияПредставление),
				ВыборкаРезультатаЗапроса.НомерСтроки);
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы",
				ВыборкаРезультатаЗапроса.НомерСтроки, "Номенклатура");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНаличиеРозничнойЦены()

Процедура ОбработатьСуммыДоКорректировки()
	
	Запасы.ЗагрузитьКолонку(Запасы.ВыгрузитьКолонку("КоличествоДоИзменения"), "КоличествоДоКорректировки");
	Запасы.ЗагрузитьКолонку(Запасы.ВыгрузитьКолонку("ЦенаДоИзменения"), "ЦенаДоКорректировки");
	Запасы.ЗагрузитьКолонку(Запасы.ВыгрузитьКолонку("СуммаДоИзменения"), "СуммаДоКорректировки");
	Запасы.ЗагрузитьКолонку(Запасы.ВыгрузитьКолонку("СуммаНДСДоИзменения"), "СуммаНДСДоКорректировки");
	Запасы.ЗагрузитьКолонку(Запасы.ВыгрузитьКолонку("ВсегоДоИзменения"), "ВсегоДоКорректировки");
	
	Расходы.ЗагрузитьКолонку(Расходы.ВыгрузитьКолонку("КоличествоДоИзменения"), "КоличествоДоКорректировки");
	Расходы.ЗагрузитьКолонку(Расходы.ВыгрузитьКолонку("ЦенаДоИзменения"), "ЦенаДоКорректировки");
	Расходы.ЗагрузитьКолонку(Расходы.ВыгрузитьКолонку("СуммаДоИзменения"), "СуммаДоКорректировки");
	Расходы.ЗагрузитьКолонку(Расходы.ВыгрузитьКолонку("СуммаНДСДоИзменения"), "СуммаНДСДоКорректировки");
	Расходы.ЗагрузитьКолонку(Расходы.ВыгрузитьКолонку("ВсегоДоИзменения"), "ВсегоДоКорректировки");

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли