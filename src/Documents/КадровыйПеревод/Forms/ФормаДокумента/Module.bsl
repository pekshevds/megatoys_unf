#Область ОписаниеПеременных

&НаКлиенте
Перем ЗакрытьПослеЗаписи;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	КадровыйУчетФормы.ФормаКадровогоДокументаПриСозданииНаСервере(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Параметры.Ключ) Тогда
		
		Если ЗначениеЗаполнено(Параметры.Основание) И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения) Тогда
			ЗаполнитьЗначенияСвойств(Объект, Параметры.ЗначенияЗаполнения);
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
			Объект.ДатаНачала = ТекущаяДатаСеанса();
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Объект.Начисления.Очистить();
		КонецЕсли; 
		
		Если Параметры.Свойство("Сотрудник") И ЗначениеЗаполнено(Параметры.Сотрудник) Тогда 
			Объект.Сотрудник = Параметры.Сотрудник;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
			ЗаполнитьСоставДействующихНачисленийСотрудника();
			УстановитьТекущиеКадровыеДанные();
			УстановитьДанныеРабочегоМеста(ЭтотОбъект);
		КонецЕсли;
		
		Если ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура")
			И ЗначениеЗаполнено(Объект.Сотрудник) Тогда
			
			Если Параметры.ЗначенияЗаполнения.Свойство("Подразделение")
				И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.Подразделение) Тогда
				
				Объект.Подразделение = Параметры.ЗначенияЗаполнения.Подразделение;
				РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Подразделение, "Владелец,ГоловнаяОрганизация");
				Если РеквизитыПодразделения.ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сотрудник, "ГоловнаяОрганизация") Тогда
					Объект.ОбособленноеПодразделение = РеквизитыПодразделения.Владелец;
				Иначе
					Объект.ОбособленноеПодразделение = Неопределено;
				КонецЕсли;
				Объект.ИзменитьПодразделениеИДолжность = Истина;
			КонецЕсли;
			Если Параметры.ЗначенияЗаполнения.Свойство("Должность")
				И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.Должность) Тогда
				
				Объект.Должность = Параметры.ЗначенияЗаполнения.Должность;
				Объект.ИзменитьПодразделениеИДолжность = Истина;
			КонецЕсли;
		КонецЕсли;
		
		УстановитьФункциональныеОпцииФормы();
		РасчетЗарплатыКлиентСервер.УстановитьПоказРазмераАванса(ЭтотОбъект);	
		
		// ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
		ЭлектронныеТрудовыеКнижки.ЗаполнитьНаименованиеДокумента(Объект, "КадровыйПеревод");
		ЭлектронныеТрудовыеКнижкиКлиентСервер.УстановитьОтображениеНомеровДокумента(ЭтотОбъект);
		// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
		
		ПриПолученииДанныхНаСервере(Объект);
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементов(ЭтотОбъект);
	
	ПрочитатьРазмерАвансаПоУмолчанию();
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// БлокировкаИзмененияОбъектов
	БлокировкаИзмененияОбъектов.ПриСозданииНаСервереФормыОбъекта(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец БлокировкаИзмененияОбъектов
	
	// КадровыйЭДО
	КадровыйЭДО.ПриСозданииНаСервереФормыОбъекта(ЭтотОбъект, Отказ, СтандартнаяОбработка, Объект);
	// Конец КадровыйЭДО
	
	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность = ОбщегоНазначения.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональность");
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ЗакрытьПослеЗаписи = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// КадровыйЭДО
	КадровыйЭДОКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец КадровыйЭДО
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	УстановитьТекущиеКадровыеДанные();
	
	УстановитьПараметрыВыбораНачислений();
	УстановитьФункциональныеОпцииФормы();
	РасчетЗарплатыКлиентСервер.УстановитьПоказРазмераАванса(ЭтотОбъект);
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаБЗК.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	ЭлектронныеТрудовыеКнижки.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	
	// БлокировкаИзмененияОбъектов
	БлокировкаИзмененияОбъектов.ПриЧтенииНаСервереФормыОбъекта(ЭтотОбъект, ТекущийОбъект);
	// Конец БлокировкаИзмененияОбъектов
	
	// КадровыйЭДО
	КадровыйЭДО.ПриЧтенииНаСервереФормыОбъекта(ЭтотОбъект, ТекущийОбъект, Объект);
	// Конец КадровыйЭДО
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.ИзменитьПодразделениеИДолжность Тогда
		РасчетЗарплатыДляНебольшихОрганизаций.ЗапомнитьТекущееКоличествоСотрудников(ЭтотОбъект, Объект.ОбособленноеПодразделение);
	КонецЕсли; 

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность = ОбщегоНазначения.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональность");
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(
			ЭтотОбъект,
			ТекущийОбъект,
			ПараметрыЗаписи);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	КадровыйУчетКлиент.ОповеститьОбИзмененииРабочегоМеста(ЭтотОбъект);
	
	ПредупреждениеПоказано = Ложь;
	Если Объект.ИзменитьПодразделениеИДолжность Тогда
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.РасчетЗарплаты") Тогда
			МодульРасчетЗарплатыДляНебольшихОрганизацийКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизацийКлиент");
			ПредупреждениеПоказано = МодульРасчетЗарплатыДляНебольшихОрганизацийКлиент.ПоказатьПредупреждениеОбОграниченияхРежимаРасчетаЗарплатыДляНебольшихОрганизаций(
				ЭтотОбъект, Объект.ОбособленноеПодразделение);
		КонецЕсли;
	КонецЕсли; 
	
	Если НЕ ПредупреждениеПоказано Тогда
		ПоказатьПредупреждениеОбОграниченияхРежимаРасчетаЗарплатыДляНебольшихОрганизацийЗавершение();
	КонецЕсли; 
	
	Оповестить("Запись_КадровыйПеревод", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаБЗК.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
	// ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	ЭлектронныеТрудовыеКнижкиКлиентСервер.УстановитьОтображениеНомеровДокумента(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	
	// БлокировкаИзмененияОбъектов
	БлокировкаИзмененияОбъектов.ПослеЗаписиНаСервереФормыОбъекта(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец БлокировкаИзмененияОбъектов
	
	// КадровыйЭДО
	КадровыйЭДО.ПослеЗаписиНаСервереФормыОбъекта(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Объект);
	// Конец КадровыйЭДО
	
	СинхронизацияДанныхЗарплатаКадры.ЗапуститьОтложеннуюОбработкуЗаполненияДанныхПоФизическимЛицам(ТекущийОбъект);
	СинхронизацияДанныхЗарплатаКадры.ЗапуститьОтложеннуюОбработкуЗаполненияДанныхПоСотрудникам(ТекущийОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НомерПриИзменении(Элемент)
	
	// ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	ЭлектронныеТрудовыеКнижкиКлиентСервер.УстановитьОтображениеНомеровДокумента(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	СотрудникПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ДатаНачалаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПодразделениеИДолжностьПриИзменении(Элемент)
	
	УстановитьДанныеРабочегоМеста(ЭтотОбъект);
		
	УстановитьДоступностьЭлементов(ЭтотОбъект);
	
	УстановитьКомментарии();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбособленноеПодразделениеПриИзменении(Элемент)
	ОбособленноеПодразделениеПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИзменилисьНачисленияПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементов(ЭтотОбъект);
	
	УстановитьКомментарии();
	
	Если НЕ Объект.ИзменитьНачисления Тогда
		ЗаполнитьСоставДействующихНачисленийСотрудника();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьАвансПриИзменении(Элемент)
	
	ИзменитьАвансПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаАвансаПриИзменении(Элемент)
	
	ПрименитьИзменениеРасчетаАванса(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьПриИзменении(Элемент)
	
	ДолжностьПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоСтавокПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ПриИзмененииКоличестваСтавок", ЭтотОбъект);
	КадровыйУчетКлиент.ИзменитьКоличествоСтавок(ЭтотОбъект, "Объект.КоличествоСтавок", СтандартнаяОбработка, "КоличествоСтавокПредставление", Оповещение);
	
КонецПроцедуры

// ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки

&НаКлиенте
Процедура ОтразитьВТрудовойКнижкеПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементов(ЭтотОбъект);
	
	Если Не Объект.ОтразитьВТрудовойКнижке Тогда
		Элементы.ВторойДокументОснованиеГруппа.Скрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаПриИзменении(Элемент)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаПриИзменении(Объект.Организация, "КадровыйПеревод", Объект.НаименованиеДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаОбработкаВыбора(
		Объект.НаименованиеДокумента, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеВторогоДокументаОснованияПриИзменении(Элемент)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаПриИзменении(Объект.Организация, "КадровыйПеревод", Объект.НаименованиеВторогоДокументаОснования);
	ЭлектронныеТрудовыеКнижкиКлиентСервер.УстановитьЗаголовокГруппыВторогоДокументаОснования(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеВторогоДокументаОснованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	ЭлектронныеТрудовыеКнижкиКлиентСервер.УстановитьЗаголовокГруппыВторогоДокументаОснования(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеВторогоДокументаОснованияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаОбработкаВыбора(
		Объект.НаименованиеВторогоДокументаОснования, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеВторогоДокументаОснованияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
	ЭлектронныеТрудовыеКнижкиКлиентСервер.УстановитьЗаголовокГруппыВторогоДокументаОснования(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВторогоДокументаОснованияПриИзменении(Элемент)
	
	ЭлектронныеТрудовыеКнижкиКлиентСервер.УстановитьЗаголовокГруппыВторогоДокументаОснования(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СерияВторогоДокументаОснованияПриИзменении(Элемент)
	
	ЭлектронныеТрудовыеКнижкиКлиентСервер.УстановитьЗаголовокГруппыВторогоДокументаОснования(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерВторогоДокументаОснованияПриИзменении(Элемент)
	
	ЭлектронныеТрудовыеКнижкиКлиентСервер.УстановитьЗаголовокГруппыВторогоДокументаОснования(ЭтотОбъект);
	
КонецПроцедуры

// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ОбновитьПодключаемыеКоманды(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ЗакрытьПослеЗаписи = Истина;
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	
КонецПроцедуры

// СтандартныеПодсистемы.КонтрольВеденияУчета

&НаКлиенте
Процедура Подключаемый_ОткрытьОтчетПоПроблемам(ЭлементИлиКоманда, НавигационнаяСсылка, СтандартнаяОбработка)
	
	КонтрольВеденияУчетаКлиентБЗК.ОткрытьОтчетПоПроблемамОбъекта(ЭтотОбъект, Объект.Ссылка, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтрольВеденияУчета

// БлокировкаИзмененияОбъектов

&НаКлиенте
Процедура Подключаемый_РазблокироватьФормуОбъекта(Команда)
	
	БлокировкаИзмененияОбъектовКлиент.РазблокироватьФормуОбъекта(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

// Конец БлокировкаИзмененияОбъектов

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент");
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(
			Команда,
			ЭтотОбъект,
			Объект);
	КонецЕсли;
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиентеНаСервереБезКонтекста
Процедура ПрименитьИзменениеРасчетаАванса(Форма)
	
	Если Форма.Объект.СпособРасчетаАванса = ПредопределенноеЗначение("Перечисление.СпособыРасчетаАванса.ПроцентомОтТарифа") Тогда
		Форма.Объект.Аванс = Форма.РазмерАвансаВПроцентахПоУмолчанию;
	Иначе
		Форма.Объект.Аванс = 0;
	КонецЕсли;
	
	РасчетЗарплатыКлиентСервер.УстановитьПоказРазмераАванса(Форма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы() 
	
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Объект.Организация);
	
	ПараметрыФО = Новый Структура("Организация", ГоловнаяОрганизация);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	КадровыйУчетФормы.ЗаполнитьОтветственныхЛицПоОрганизации(ЭтотОбъект);
	
	УстановитьПараметрыВыбораНачислений();
	УстановитьФункциональныеОпцииФормы();
	УстановитьДоступностьЭлементов(ЭтотОбъект);
	
	ЕстьОбособленныеПодразделения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГоловнаяОрганизация, "ЕстьОбособленныеПодразделения");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОбособленноеПодразделение",
		"Видимость",
		ЕстьОбособленныеПодразделения = Истина);
	
	ЭлектронныеТрудовыеКнижки.ЗаполнитьНаименованиеДокумента(Объект, "КадровыйПеревод");
	
	// ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	ЭлектронныеТрудовыеКнижки.ЗаполнитьНаименованиеДокумента(Объект, "КадровыйПеревод");
	// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	
КонецПроцедуры

&НаСервере
Процедура ОбособленноеПодразделениеПриИзмененииНаСервере()
	
	УстановитьПараметрыВыбораНачислений();
	ПрочитатьРазмерАвансаПоУмолчанию();
	ПрименитьИзменениеРасчетаАванса(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	
	ЗаполнитьСоставДействующихНачисленийСотрудника();
	УстановитьТекущиеКадровыеДанные();
	
	УстановитьДанныеРабочегоМеста(ЭтотОбъект);
	УстановитьДоступностьЭлементов(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДатаНачалаПриИзмененииНаСервере()
	
	УстановитьПараметрыВыбораНачислений();
	ЗаполнитьСоставДействующихНачисленийСотрудника();
	
	УстановитьТекущиеКадровыеДанные();
	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЗанятостиПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементов(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРазмерАвансаПоУмолчанию()
	
	Если ЗначениеЗаполнено(Объект.ОбособленноеПодразделение) Тогда
		РазмерАвансаВПроцентахПоУмолчанию = РасчетЗарплатыФормы.РазмерАвансаВПроцентахПоУмолчанию(Объект.ОбособленноеПодразделение);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДанныеРабочегоМеста(Форма)
	
	Объект = Форма.Объект;
	
	Если ЗначениеЗаполнено(Форма.ТекущееОбособленноеПодразделение) Тогда
		Объект.ОбособленноеПодразделение 	= Форма.ТекущееОбособленноеПодразделение;
	Иначе
		Объект.ОбособленноеПодразделение 	= Объект.Организация;
	КонецЕсли;
	
	Объект.Подразделение 				= Форма.ТекущееПодразделение;
	Объект.Должность 					= Форма.ТекущаяДолжность;
	Объект.ВидЗанятости 				= Форма.ТекущийВидЗанятости;
	Объект.КоличествоСтавок				= Форма.ТекущееКоличествоСтавок;
	
	Форма.КоличествоСтавокПредставление = КадровыйУчетКлиентСервер.ПредставлениеКоличестваСтавок(Объект.КоличествоСтавок);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущиеКадровыеДанные()
	
	Отбор = Новый Массив;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Отбор, "Регистратор", "<>", Объект.Ссылка);
	
	ПоляОтбораПериодическихДанных = Новый Структура;
	ПоляОтбораПериодическихДанных.Вставить("КадроваяИсторияСотрудников", Отбор);
	Поля = "Подразделение,Должность,Организация,ВидЗанятости,КоличествоСтавок";
	
	ДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, Объект.Сотрудник, Поля, Объект.ДатаНачала, ПоляОтбораПериодическихДанных);
	
	Если ДанныеСотрудников.Количество() > 0 Тогда
		
		ТекущиеКадровыеДанныеСотрудника = ДанныеСотрудников[0];
		
		ТекущееОбособленноеПодразделение 	= ТекущиеКадровыеДанныеСотрудника.Организация;
		ТекущееПодразделение 				= ТекущиеКадровыеДанныеСотрудника.Подразделение;
		ТекущаяДолжность 					= ТекущиеКадровыеДанныеСотрудника.Должность;
		ТекущийВидЗанятости					= ТекущиеКадровыеДанныеСотрудника.ВидЗанятости;
		ТекущееКоличествоСтавок 			= ТекущиеКадровыеДанныеСотрудника.КоличествоСтавок;
		
	КонецЕсли;
	
	ПрочитатьТекущийАванс();
	
	УстановитьКомментарии();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьТекущийАванс()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	СтрокаТаблицы = ТаблицаСотрудников.Добавить();
	СтрокаТаблицы.Сотрудник = Объект.Сотрудник;
	СтрокаТаблицы.Период = Объект.ДатаНачала;
	
	ДанныеОбАвансе = РасчетЗарплаты.АвансыСотрудников(ТаблицаСотрудников, Объект.Ссылка);
	
	Если ДанныеОбАвансе.Количество() > 0 Тогда
		ТекущийАванс				= ДанныеОбАвансе[0].Аванс;
		ТекущийСпособРасчетаАванса	= ДанныеОбАвансе[0].СпособРасчетаАванса
	КонецЕсли;	
	
	УстановитьТекущиеЗначенияРасчетаАванса(ЭтотОбъект);

	УстановитьКомментарийКАвансу(ЭтотОбъект)

КонецПроцедуры	

&НаСервере
Процедура УстановитьКомментарии()
	
	Если Объект.ИзменитьПодразделениеИДолжность Тогда
		
		Если ЗначениеЗаполнено(ТекущееПодразделение) Тогда
			
			ПозицияКомментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ранее сотрудник занимал должность ""%1"" в подразделении ""%2""'"),
				ТекущаяДолжность, ТекущееПодразделение);
				
			Если ПолучитьФункциональнуюОпцию("ИспользоватьРаботуНаНеполнуюСтавку") Тогда
					ПозицияКомментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '%1 (колич.ставок: %2)'"),
						ПозицияКомментарий, КадровыйУчетКлиентСервер.ПредставлениеКоличестваСтавок(ТекущееКоличествоСтавок));
			КонецЕсли;
			
		Иначе
				
			ПозицияКомментарий = НСтр("ru = 'Сотрудник еще не принят на работу'");
			
		КонецЕсли;
		
	Иначе
		
		ПозицияКомментарий = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоставДействующихНачисленийСотрудника()
	
	ПредыдущиеНачисления = Объект.Начисления.Выгрузить();
	
	Объект.Начисления.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	СтрокаСотрудник = ТаблицаСотрудников.Добавить();
	СтрокаСотрудник.Сотрудник = Объект.Сотрудник;
	СтрокаСотрудник.Период = ?(ЗначениеЗаполнено(Объект.ДатаНачала), НачалоДня(Объект.ДатаНачала) - 1, ТекущаяДатаСеанса());
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц, 
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ТаблицаСотрудников));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.Размер
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
		|ГДЕ
		|	ПлановыеНачисления.Размер <> 0";
	
	Объект.Начисления.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Если Объект.ИзменитьНачисления Тогда
		
		Если Объект.Начисления.Количество() > 0 Тогда
			
			Если ПредыдущиеНачисления.Количество() > 0 Тогда
				
				Для каждого СтрокаНачисления Из Объект.Начисления Цикл
					
					ПредыдущиеСтроки = ПредыдущиеНачисления.НайтиСтроки(Новый Структура("Начисление", СтрокаНачисления.Начисление));
					Если ПредыдущиеСтроки.Количество() > 0 Тогда
						СтрокаНачисления.Размер = ПредыдущиеСтроки[0].Размер;;
					КонецЕсли; 
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			Объект.Начисления.Загрузить(ПредыдущиеНачисления);
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементов(Форма)
	
	ИзменитьПозициюДолжность	= Форма.Объект.ИзменитьПодразделениеИДолжность;
	ИзменитьНачисления			= Форма.Объект.ИзменитьНачисления;
	ИзменитьАванс				= Форма.Объект.ИзменитьАванс;
	
	Форма.Элементы.Подразделение.Доступность = ИзменитьПозициюДолжность;
	Форма.Элементы.Должность.Доступность = ИзменитьПозициюДолжность;
	Форма.Элементы.ВидЗанятости.Доступность = ИзменитьПозициюДолжность;
	Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьОбособленныеПодразделения") Тогда
		Форма.Элементы.ОбособленноеПодразделение.Доступность = ИзменитьПозициюДолжность;
	Иначе
		Форма.Элементы.ОбособленноеПодразделение.Доступность = Ложь;
	КонецЕсли;
	
	Форма.Элементы.Начисления.Доступность = ИзменитьНачисления;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"КоличествоСтавок",
		"Доступность",
		ИзменитьПозициюДолжность);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"АвансКомментарийГруппа",
		"Доступность",
		ИзменитьАванс);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ОтразитьВТрудовойКнижке",
		"Доступность",
		ИзменитьПозициюДолжность);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"СведенияТрудовойКнижкиГруппа",
		"Доступность",
		ИзменитьПозициюДолжность
			И Форма.Объект.ОтразитьВТрудовойКнижке);
	
	ЭлектронныеТрудовыеКнижкиКлиентСервер.УстановитьЗаголовокГруппыВторогоДокументаОснования(Форма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеОбОграниченияхРежимаРасчетаЗарплатыДляНебольшихОрганизацийЗавершение(ОписаниеОповещения = Неопределено) Экспорт
	
	Если ЗакрытьПослеЗаписи И Открыта() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКомментарийКАвансу(Форма)
	
	Если Форма.Объект.ИзменитьАванс Тогда
		ТекстПодсказки = 
			РасчетЗарплатыКлиентСервер.КомментарийИзмененияАванса(
			Форма.ТекущийСпособРасчетаАванса, 
			Форма.ТекущийАванс)
	Иначе
		ТекстПодсказки = "";
	КонецЕсли;
	
	ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(
		Форма,
		"АвансКомментарийГруппа",
		ТекстПодсказки);
			
КонецПроцедуры	

&НаСервере
Процедура ИзменитьАвансПриИзмененииНаСервере()
	
	УстановитьТекущиеЗначенияРасчетаАванса(ЭтотОбъект);
	
	УстановитьДоступностьЭлементов(ЭтотОбъект);
	УстановитьКомментарийКАвансу(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущиеЗначенияРасчетаАванса(Форма)
	
	Если НЕ Форма.Объект.ИзменитьАванс Тогда
		
		Форма.Объект.СпособРасчетаАванса = Форма.ТекущийСпособРасчетаАванса;
		Форма.Объект.Аванс = Форма.ТекущийАванс;
		РасчетЗарплатыКлиентСервер.УстановитьПоказРазмераАванса(Форма);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ДолжностьПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Должность) Тогда
		
		Объект.ТрудоваяФункция = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Должность, "ТрудоваяФункция");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличестваСтавок(Результат, ДополнительныеПараметры) Экспорт
	
	УстановитьКомментарии();
	
КонецПроцедуры

#Область ИнициализацияФормы

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект)
	
	КоличествоСтавокПредставление = КадровыйУчетКлиентСервер.ПредставлениеКоличестваСтавок(Объект.КоличествоСтавок);
	
КонецПроцедуры

#КонецОбласти

// КадровыйЭДО

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПодключаемыеКоманды(УправляемаяФорма)
	КадровыйЭДОКлиентСервер.ОбновитьКоманды(УправляемаяФорма, УправляемаяФорма.Объект, Истина);
КонецПроцедуры

// Конец КадровыйЭДО

&НаСервере
Процедура УстановитьПараметрыВыбораНачислений()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.РасчетЗарплаты") Тогда
		МодульРасчетЗарплатыДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
		МодульРасчетЗарплатыДляНебольшихОрганизаций.ФормаДокументаУстановитьПараметрыВыбораНачислений(
			ЭтотОбъект, Объект.Организация, Объект.ДатаНачала);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ЗакрытьПослеЗаписи = Ложь;

#КонецОбласти
