#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗапрещенныеРасширения = РаботаСФайламиСлужебный.СписокЗапрещенныхРасширений();
	УстановитьУсловноеОформление();
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Если Не Объект.Внешний Тогда
				ВызватьИсключение НСтр("ru = 'Допустимо копировать только документы, добавленные вручную'");
			КонецЕсли;
			Объект.ЭлектронныйДокумент = Неопределено;
			Объект.ИдентификаторДокумента = "";
			Объект.ИдентификаторЗаявкиКабинетСотрудника = "";
			Объект.ОснованиеДокумента = Неопределено;
		КонецЕсли;
		
		ЗапрашиваемыеЗначения = Новый Структура;
		ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
		ЗапрашиваемыеЗначения.Вставить("Ответственный", "Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗапрашиваемыеЗначения);
		
		Если Не ЗначениеЗаполнено(Объект.СодержимоеДокумента) Тогда
			Объект.СодержимоеДокумента = КадровыйЭДО.МаксимальноДоступноеСодержимоеДокументовПользователя();
		КонецЕсли;
		
		Объект.Внешний = Истина;
		
		ПриПолученииДанныхНаСервере();
		ТребуетсяПодписьОрганизации = ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи();
		
	Иначе
		ПеревестиВРежимПросмотраОсновныхДанных();
	КонецЕсли;
	
	ПараметрВыбораСодержимого = Новый ПараметрВыбора("Отбор.Ссылка",
		КадровыйЭДО.ДоступныеСодержанияДокументовПользователя(Пользователи.ТекущийПользователь()));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СодержимоеДокумента",
		"ПараметрыВыбора",
		Новый ФиксированныйМассив(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрВыбораСодержимого)));
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"КодДокументаКадровогоМероприятия",
		"ПодсказкаВвода",
		КадровыйЭДОПовтИсп.СвойстваКодаКадровогоДокумента().Код);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаСкопировать",
		"Видимость",
		Объект.Внешний);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ПолучитьОтпечаткиПодписей Тогда
		ЗаполнитьОтпечаткиПодписейСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ОбновленыДанныеДокументовКЭДО"
		И (Источник = Объект.Ссылка
			Или Источник = Неопределено) Тогда
		
		Прочитать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаБЗК.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
	ПриПолученииДанныхНаСервере();
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
		
		ТекущийОбъектСсылка = Документы.ДокументКадровогоЭДО.ПолучитьСсылку();
		ТекущийОбъект.ОснованиеДокумента = ТекущийОбъектСсылка;
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СсылкаНового", ТекущийОбъектСсылка);
		ТекущийОбъект.Расширение = Расширение;
		
		ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
		ПараметрыФайла.ВладелецФайлов     = ТекущийОбъектСсылка;
		ПараметрыФайла.ИмяБезРасширения   = СтрЗаменить(ИмяФайлаСРасширением, "." + Расширение, "");
		ПараметрыФайла.РасширениеБезТочки = Расширение;
		
		УстановитьПривилегированныйРежим(Истина);
		ТекущийОбъект.ЭлектронныйДокумент = РаботаСФайлами.ДобавитьФайл(
			ПараметрыФайла, ДанныеЭлектронногоДокумента.СсылкаНаДвоичныеДанные);
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Отказ);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаБЗК.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
	ПриПолученииДанныхНаСервере();
	ПеревестиВРежимПросмотраОсновныхДанных();
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗакрытием(ЭтотОбъект, Объект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не ЗначениеЗаполнено(Объект.ВнешниеПодписанты) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не выбраны ознакомляемые с документом сотрудники.'"),
			Объект.Ссылка, "Ознакомляемые", "", Отказ);
		
	КонецЕсли;
	
	Если Не ДанныеФайлаЗаполнены(ЭтотОбъект) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не выбраны файл электронного документа.'"),
			Объект.Ссылка, "ИмяФайлаСРасширением", "", Отказ);
		
	КонецЕсли;
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.ДополнительныеСвойства.Вставить("НеПроверятьЭлектронныйДокумент", Истина);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Объект");
	Если Не ТекущийОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьОтображениеЭлементовПоОрганизации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаСРасширениемНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(Объект.ЭлектронныйДокумент) Тогда
		ВыбратьФайлСДиска();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеДокументаНажатие(Элемент, СтандартнаяОбработка)
	
	БизнесПроцессыЗаявокСотрудниковКлиент.ПоказатьОснованиеДокументаКадровогоЭДО(
		Объект.ОснованиеДокумента, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборОдногоОзнакомляемогоПриИзменении(Элемент)
	
	ВыборОдногоОзнакомляемогоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОзнакомляемоеФизическоеЛицоПриИзменении(Элемент)
	
	ОзнакомляемоеФизическоеЛицоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборНесколькихОзнакомляемыхПриИзменении(Элемент)
	
	УстановитьОтображениеОзнакомляемых(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектронныеПодписиСотрудниковОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ОбработатьВыборСотрудников(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектронныеПодписиСотрудниковПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	СтрокиКУдалению = Новый Массив;
	СтрокиПодписантовКУдалению = Новый Массив;
	Для Каждого УдаляемаяСтрока Из Элементы.ЭлектронныеПодписиСотрудников.ВыделенныеСтроки Цикл
		СтрокаПодписи = ЭлектронныеПодписи.НайтиПоИдентификатору(УдаляемаяСтрока);
		Если СтрокаПодписи <> Неопределено Тогда
			СтрокиПодписанта = Объект.ВнешниеПодписанты.НайтиСтроки(Новый Структура("ФизическоеЛицо", СтрокаПодписи.ФизическоеЛицо));
			Для Каждого СтрокаПодписанта Из СтрокиПодписанта Цикл
				СтрокиПодписантовКУдалению.Добавить(СтрокаПодписанта);
			КонецЦикла;
			Если ЗначениеЗаполнено(СтрокаПодписи.ДатаПодписи) Тогда
				СтрокаПодписи.ПодписьСотрудника = Ложь;
			Иначе
				СтрокиКУдалению.Добавить(СтрокаПодписи);
			КонецЕсли;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемаяСтрока Из СтрокиПодписантовКУдалению Цикл
		Если ФизическоеЛицо = УдаляемаяСтрока.ФизическоеЛицо Тогда
			ФизическоеЛицо = Неопределено;
		КонецЕсли;
		Объект.ВнешниеПодписанты.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	Для Каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
		ЭлектронныеПодписи.Удалить(УдаляемаяСтрока);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	КадровыйЭДОВызовСервера.УдалитьФайлыИзОбработкиПользователя(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.ЭлектронныйДокумент),
		ПредопределенноеЗначение("Перечисление.ДействияСФайламиДокументовКЭДО.Ознакомиться"));
	ОбновитьКомментарии();
	
КонецПроцедуры

&НаКлиенте
Процедура КодДокументаКадровогоМероприятияПриИзменении(Элемент)
	
	УстановитьОтображениеПодсказкиКодаДокумента();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Отправить(Команда)
	
	Если ЗначениеЗаполнено(Объект.ЭлектронныйДокумент) Тогда
		ОтправитьПечатныеФормыПоПочте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписи(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ЭлектронныйДокумент) Тогда
		Возврат
	КонецЕсли;
	
	КоллекцияПодписей = ЗаполнитьКоллекцииПодписей();
	ПодписиДляПроверки = Новый Массив;
	Для каждого Идентификатор Из КоллекцияПодписей.ПодписиИБ Цикл
		ПодписиДляПроверки.Добавить(ЭлектронныеПодписи.НайтиПоИдентификатору(Идентификатор));
	КонецЦикла;
	
	ОписаниеОбъекта = Новый Структура;
	ОписаниеОбъекта.Вставить("Ссылка", Объект.ЭлектронныйДокумент);
	ОписаниеОбъекта.Вставить("Зашифрован", ДанныеЭлектронногоДокумента.Зашифрован);
	
	ПараметрыФормы = Новый Структура("Объект", ОписаниеОбъекта);
	ПараметрыФормы.Вставить("ЭлектронныеПодписи", ПодписиДляПроверки);
	
	РаботаСФайламиСлужебныйКлиент.ПроверитьПодписи(
		ПараметрыФормы,
		ДанныеЭлектронногоДокумента.СсылкаНаДвоичныеДанные);
		
	ПодписиДляПроверки = Новый Массив;
	Для каждого Идентификатор Из КоллекцияПодписей.ПодписиСервиса Цикл
		ПодписьСервиса = ЭлектронныеПодписи.НайтиПоИдентификатору(Идентификатор);
		Если Не ПодписьСервиса.ПодписьВерна Или ЗначениеЗаполнено(ПодписьСервиса.ОписаниеОшибки) Тогда
			ПодписьСервиса.ОписаниеОшибки = "";
			ПодписьСервиса.ПодписьВерна = Ложь;
			ПодписьСервиса.Статус = "";
			ПодписиДляПроверки.Добавить(ПодписьСервиса);
		КонецЕсли;
	КонецЦикла;
	
	Если ПодписиДляПроверки.Количество() > 0 Тогда
		ПроверитьПодписиСервиса(ПодписиДляПроверки, ДанныеЭлектронногоДокумента.СсылкаНаДвоичныеДанные);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("СохранитьРезультатыПроверкиПодписей", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьРезультатыПроверкиПодписей()
	СохранитьРезультатыПроверкиПодписейНаСервере();
	КадровыйЭДОКлиент.ОповеститьОбОбновленииДанныхДокументовКЭДО(Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура СохранитьРезультатыПроверкиПодписейНаСервере()
	ПроверкаПодписейМенялась = Ложь;
	Для Каждого ДанныеПодписи Из ЭлектронныеПодписи Цикл
		Если ЗначениеЗаполнено(ДанныеПодписи.ДатаПодписи) Тогда
			СвойстваПодписи = ЭлектроннаяПодписьКлиентСервер.НовыеСвойстваПодписи();
			ЗаполнитьЗначенияСвойств(СвойстваПодписи, ДанныеПодписи, "ПорядковыйНомер,ДатаПроверкиПодписи,ПодписьВерна");
			УстановитьПривилегированныйРежим(Истина);
			ЭлектроннаяПодпись.ОбновитьПодпись(Объект.ЭлектронныйДокумент, СвойстваПодписи, Истина);
			УстановитьПривилегированныйРежим(Ложь);
			ПроверкаПодписейМенялась = Истина;
		КонецЕсли;
	КонецЦикла;
	Если ПроверкаПодписейМенялась Тогда
		КадровыйЭДОВызовСервера.ДокументГотовДляАрхивирования(Объект.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередатьВ1СКабинетСотрудника(Команда)
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Перед подписанием и передачей документа в ""1С:Кабинет сотрудника"", его необходимо записать.
			|Продолжить?'");
		
		Оповещение = Новый ОписаниеОповещения("ПодписатьИПередатьДокумент", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	Иначе
		ПодписатьИПередатьДокумент(КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьИПередатьДокумент(Ответ, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Если Модифицированность Тогда
			
			Если Не ПроверитьЗаполнение() Тогда
				Возврат;
			КонецЕсли;
			Записать();
			
		КонецЕсли;
		
		Если ТребуетсяПодписьОрганизации Тогда
			
			ОповещениеЗавершения = Новый ОписаниеОповещения("ПослеПодписанияФайла", ЭтотОбъект, Новый Структура);
			
			ПодписываемыеФайлы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.ЭлектронныйДокумент);
			КадровыйЭДОКлиент.ПодписатьФайлы(
				КадровыйЭДОВызовСервера.ДанныеФайловНаПодпись(ПодписываемыеФайлы, УникальныйИдентификатор),
				ОповещениеЗавершения,
				ЭтотОбъект,
				ПредопределенноеЗначение("Перечисление.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников"));
			
		Иначе
			ПослеПодписанияФайла(Истина, Новый Структура);
		КонецЕсли;
		 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодписанияФайла(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы <> Неопределено Тогда
		ПослеПодписанияФайлаНаСервере();
		Если ТребуетсяПодписьОрганизации Тогда
			КадровыйЭДОКлиент.ПоказатьСостояниеОтправленныхНаПодпись(ДополнительныеПараметры);
			КадровыйЭДОКлиент.ОповеститьОНеобходимостиОбновленияФорм(Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеПодписанияФайлаНаСервере()
	
	Если ТребуетсяПодписьОрганизации Тогда
		КадровыйЭДОВызовСервера.УдалитьФайлыИзОбработкиПользователя(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.ЭлектронныйДокумент));
	КонецЕсли;
	
	КадровыйЭДОВызовСервера.ЗапланироватьДействияСПечатнымиФормами(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.ЭлектронныйДокумент),
		ПредопределенноеЗначение("Перечисление.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников"));
	
	ПрочитатьЭлектронныеПодписи();
	Если ТребуетсяПодписьОрганизации Тогда
		ОбновитьЗначениеТребуетсяПодписьОрганизации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСотрудников(Команда)
	
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихНаДатуПоПараметрамОткрытияФормыСписка(
		Элементы.ЭлектронныеПодписиСотрудников, Объект.Организация, , Объект.Дата, Истина, АдресСпискаПодобранных());
	
КонецПроцедуры

&НаКлиенте
Процедура Задания(Команда)
	
	Отборы = Новый Структура("ПрисоединенныйФайл", Объект.ЭлектронныйДокумент);
	ПараметрыОткрытия = Новый Структура("Отбор", Отборы);
	ПараметрыОткрытия.Вставить("Организация", Объект.Организация);
	
	ОткрытьФорму("РегистрСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.ФормаСписка",
		ПараметрыОткрытия, ЭтотОбъект, Истина, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);

КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Команда, Объект)
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Контекст, Объект);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийСледующемуНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ОбновитьПодключаемыеКоманды(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.КонтрольВеденияУчета

&НаКлиенте
Процедура Подключаемый_ОткрытьОтчетПоПроблемам(ЭлементИлиКоманда, НавигационнаяСсылка, СтандартнаяОбработка)
	
	КонтрольВеденияУчетаКлиентБЗК.ОткрытьОтчетПоПроблемамОбъекта(ЭтотОбъект, Объект.Ссылка, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтрольВеденияУчета

&НаКлиенте
Процедура ВыбратьФайлСДиска()
	
	ПараметрыЗагрузкиФайла = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузкиФайла.ИдентификаторФормы = УникальныйИдентификатор;
	
	ПараметрыЗагрузкиФайла.Диалог.МножественныйВыбор = Ложь;
	ПараметрыЗагрузкиФайла.Диалог.Заголовок = НСтр("ru = 'Выберите документ'");
	
	ФайлыФильтра = Новый Массив;
	ФайлыФильтра.Добавить(СтрШаблон(
		НСтр("ru = 'Электронные документы (%1)|%1'"),
		КадровыйЭДОКлиентСервер.РасширенияФайловЭлектронныхДокументов()));
	ФайлыФильтра.Добавить(НСтр("ru = 'Все файлы (*.*)|*.*'"));
	
	ПараметрыЗагрузкиФайла.Диалог.Фильтр = СтрСоединить(ФайлыФильтра, "|");
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыборФайлаСДиска", ЭтотОбъект);
	ФайловаяСистемаКлиент.ЗагрузитьФайлы(Оповещение, ПараметрыЗагрузкиФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФайлаСДиска(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранныеФайлы) Тогда
		ПрочитатьДанныеФайлаСДиска(ВыбранныеФайлы[0]);
		УстановитьОтображениеЭлементовФормы(ЭтотОбъект, ЭлектроннаяПодписьКлиент.ИспользоватьЭлектронныеПодписи());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	ДоступноПравоУправлятьЗаданиями = Пользователи.ЭтоПолноправныйПользователь();
	
	Если Параметры.Ключ.Пустая() Тогда
		Заголовок = НСтр("ru = 'Карточка электронного документа (создание)'");
	Иначе
		
		Заголовок = СтрШаблон(
			НСтр("ru = 'Карточка электронного документа. %1'"),
			Объект.КатегорияДокумента);
		
	КонецЕсли;
	
	Если Объект.ВнешниеПодписанты.Количество() = 1 Тогда
		ФизическоеЛицо = Объект.ВнешниеПодписанты[0].ФизическоеЛицо;
	КонецЕсли;
	
	ПрочитатьДанныеФайла();
	ПрочитатьЭлектронныеПодписи();
	
	Если ЭлектронныеПодписи.Выгрузить(Новый Структура("ПодписьСотрудника", Истина)).Количество() > 1 Тогда
		
		ВыборОзнакомляемых = 1;
	Иначе
		ВыборОзнакомляемых = 0;
	КонецЕсли;
	
	УстановитьОтображениеЭлементовФормы(ЭтотОбъект, ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи());
	
	ОбновитьКомментарии();
	
	Если Объект.Ссылка.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ИмяФайлаСРасширением",
			"Шрифт",
			ШрифтыСтиля.ОбычныйШрифтТекста);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ИмяФайлаСРасширением",
			"Шрифт",
			ШрифтыСтиля.ВажнаяНадписьШрифт);
	КонецЕсли;
	
	УстановитьОтображениеПодсказкиКодаДокумента();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"КодДокументаКадровогоМероприятия",
		"Видимость",
		Не Объект.Внешний
			И КадровыйЭДО.ЭтоФайлПечатнойФормы(Объект.ЭлектронныйДокумент));
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьЭлектронныеПодписи(РезультатыПроверки = Неопределено, ОбновитьТребуетсяПодписьОрганизации = Ложь)
	
	ЭлектронныеПодписи.Очистить();
	
	ИдентификаторыКоманд = Новый Соответствие;
	ИдентификаторыКоманд.Вставить("БЗК_ДокументСВерсиейДляПечати", Ложь);
	
	ЕстьПодписиДокумента = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументКЭДО", Объект.Ссылка);
	Запрос.УстановитьПараметр(
		"ФизическиеЛица", Объект.ВнешниеПодписанты.Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
		|	ЕСТЬNULL(ПодписиДокументовКЭДО.Отпечаток, """") КАК Отпечаток,
		|	ПодписиДокументовКЭДО.ДатаПодписи КАК ДатаПодписи,
		|	ФизическиеЛица.ФИО КАК КомуВыданСертификат,
		|	ПодписиДокументовКЭДО.РезультатСогласования КАК РезультатСогласования
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодписиДокументовКЭДО КАК ПодписиДокументовКЭДО
		|		ПО ФизическиеЛица.Ссылка = ПодписиДокументовКЭДО.ФизическоеЛицо
		|			И (ПодписиДокументовКЭДО.Объект = &ДокументКЭДО)
		|ГДЕ
		|	ФизическиеЛица.Ссылка В(&ФизическиеЛица)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПодписиДокументовКЭДО.ФизическоеЛицо,
		|	ПодписиДокументовКЭДО.Отпечаток,
		|	ПодписиДокументовКЭДО.ДатаПодписи,
		|	ПодписиДокументовКЭДО.ФизическоеЛицо.ФИО,
		|	ПодписиДокументовКЭДО.РезультатСогласования
		|ИЗ
		|	РегистрСведений.ПодписиДокументовКЭДО КАК ПодписиДокументовКЭДО
		|ГДЕ
		|	ПодписиДокументовКЭДО.Объект = &ДокументКЭДО
		|	И НЕ ПодписиДокументовКЭДО.ФизическоеЛицо В (&ФизическиеЛица)";
	
	УстановитьПривилегированныйРежим(Истина);
	ПодписиФизическихЛицДокумента = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Запрос.УстановитьПараметр("ПодписанныйОбъект", Объект.ЭлектронныйДокумент);
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ЭлектронныеПодписи.ПодписанныйОбъект КАК ПодписанныйОбъект,
			|	ЭлектронныеПодписи.ПорядковыйНомер КАК ПорядковыйНомер,
			|	ЭлектронныеПодписи.ДатаПроверкиПодписи КАК ДатаПроверкиПодписи,
			|	ЭлектронныеПодписи.ИмяФайлаПодписи КАК ИмяФайлаПодписи,
			|	ЭлектронныеПодписи.Комментарий КАК Комментарий,
			|	ЭлектронныеПодписи.КомуВыданСертификат КАК КомуВыданСертификат,
			|	ЭлектронныеПодписи.Подпись КАК Подпись,
			|	ЭлектронныеПодписи.ПодписьВерна КАК ПодписьВерна,
			|	ЭлектронныеПодписи.ДатаПодписи КАК ДатаПодписи,
			|	ЭлектронныеПодписи.УстановившийПодпись КАК УстановившийПодпись,
			|	ЭлектронныеПодписи.Отпечаток КАК Отпечаток,
			|	ЭлектронныеПодписи.ТипПодписи КАК ТипПодписи,
			|	ЭлектронныеПодписи.СрокДействияПоследнейМеткиВремени КАК СрокДействияПоследнейМеткиВремени,
			|	ЭлектронныеПодписи.ТребуетсяПроверка КАК ТребуетсяПроверка
			|ИЗ
			|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
			|ГДЕ
			|	ЭлектронныеПодписи.ПодписанныйОбъект = &ПодписанныйОбъект";
		
		ЭлектронныеПодписи.Очистить();
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		ЕстьПодписиДокумента = Выборка.Количество() > 0;
		Пока Выборка.Следующий() Цикл
			
			СтрокаПодписи = ЭлектронныеПодписи.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПодписи, Выборка);
			СтрокаПодписи.АдресПодписи = ПоместитьВоВременноеХранилище(Выборка.Подпись.Получить(), УникальныйИдентификатор);
			РаботаСФайламиСлужебныйКлиентСервер.ЗаполнитьСтатусПодписи(СтрокаПодписи, ТекущаяДатаСеанса());
			Если ЗначениеЗаполнено(СтрокаПодписи.Отпечаток) Тогда
				СотрудникПодписи = ПодписиФизическихЛицДокумента.Найти(СтрокаПодписи.Отпечаток, "Отпечаток");
				Если СотрудникПодписи <> Неопределено Тогда
					СтрокаПодписи.ФизическоеЛицо = СотрудникПодписи.ФизическоеЛицо;
					СтрокаПодписи.ПодписьСотрудника = Истина;
					СтрокаПодписи.РезультатСогласования = СотрудникПодписи.РезультатСогласования;
					ПодписиФизическихЛицДокумента.Удалить(СотрудникПодписи);
				КонецЕсли;
			КонецЕсли;
			Если РезультатыПроверки <> Неопределено Тогда
				
				РезультатПроверки = РезультатыПроверки.Получить(СтрокаПодписи.Отпечаток);
				Если РезультатПроверки <> Неопределено Тогда
					СтрокаПодписи.Статус = РезультатПроверки.Статус;
					СтрокаПодписи.ПодписьВерна = РезультатПроверки.ПодписьВерна;
					СтрокаПодписи.ОписаниеОшибки = РезультатПроверки.ОписаниеОшибки;
					СтрокаПодписи.ДатаПроверкиПодписи = РезультатПроверки.ДатаПроверкиПодписи;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПолучитьОтпечаткиПодписей = ПодписиФизическихЛицДокумента.НайтиСтроки(
		Новый Структура("Отпечаток", "")).Количество() > 0;
	Для Каждого СотрудникПодписи Из ПодписиФизическихЛицДокумента Цикл
		СтрокаПодписи = ЭлектронныеПодписи.Добавить();
		СтрокаПодписи.ФизическоеЛицо = СотрудникПодписи.ФизическоеЛицо;
		СтрокаПодписи.КомуВыданСертификат = СотрудникПодписи.КомуВыданСертификат;
		СтрокаПодписи.ДатаПодписи = СотрудникПодписи.ДатаПодписи;
		СтрокаПодписи.РезультатСогласования = СотрудникПодписи.РезультатСогласования;
		Если ЗначениеЗаполнено(СотрудникПодписи.ДатаПодписи) Тогда
			СтрокаПодписи.Статус = НСтр("ru = 'Требуется собственноручная подпись'");
		КонецЕсли;
		СтрокаПодписи.ПодписьСотрудника = Истина;
	КонецЦикла;
	
	ОбновитьПорядокПодписей();
	
	Если ЕстьПодписиДокумента Тогда
		Если КадровыйЭДО.ЭтоФайлПечатнойФормы(Объект.ЭлектронныйДокумент) Тогда
			Если Объект.Внешний Тогда
				ИдентификаторыКоманд["БЗК_ДокументСВерсиейДляПечати"] = КадровыйЭДОКлиентСервер.ЭтоРасширениеФайлаСПредставлением(Расширение);
			Иначе
				ИдентификаторыКоманд["БЗК_ДокументСВерсиейДляПечати"] = Не КадровыйЭДОКлиентСервер.ЭтоРасширениеJSONДокумента(Расширение);
			КонецЕсли;
		Иначе
			ИдентификаторыКоманд["БЗК_ДокументСВерсиейДляПечати"] = КадровыйЭДОКлиентСервер.ЭтоРасширениеФайлаСПредставлением(Расширение);
		КонецЕсли;
	Иначе
		ИдентификаторыКоманд["БЗК_ДокументСВерсиейДляПечати"] = Ложь;
	КонецЕсли;
	
	Элементы.ЭлектронныеПодписиСотрудников.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("ПодписьСотрудника", Истина));
	Элементы.ЭлектронныеПодписи.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("ПодписьСотрудника", Ложь));
	
	УстановитьПодсказкуСотруднику(ЭтотОбъект);
	Если ОбновитьТребуетсяПодписьОрганизации
		И ТребуетсяПодписьОрганизации Тогда
		
		ОбновитьЗначениеТребуетсяПодписьОрганизации();
	КонецЕсли;
	
	ИдентификаторыФайловСЭЦП = Новый ФиксированноеСоответствие(ИдентификаторыКоманд);
	ОбновитьПодключаемыеКоманды(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДанныеФайлаСДиска(ВыбранныйФайл)
	
	Если РазмерФайла(ВыбранныйФайл.Хранение) = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Допустимо выбирать файлы, размер которых больше 0.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	Иначе
		
		Модифицированность = Истина;
		
		Файл = Новый Файл(ВыбранныйФайл.ИмяФайла);
		ИмяФайлаСРасширением = Файл.Имя;
		Расширение = СтрЗаменить(Файл.Расширение, ".", "");
		
		ДанныеПрисоединенногоФайла = Новый Структура;
		ДанныеПрисоединенногоФайла.Вставить("Зашифрован", Ложь);
		ДанныеПрисоединенногоФайла.Вставить("СсылкаНаДвоичныеДанные", ВыбранныйФайл.Хранение);
		
		ПрименитьДанныеПрисоединенногоФайла(ЭтотОбъект, ДанныеПрисоединенногоФайла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РазмерФайла(АдресВХранилище)
	Возврат ПолучитьИзВременногоХранилища(АдресВХранилище).Размер();
КонецФункции

&НаСервере
Процедура ПрочитатьДанныеФайла()
	
	Если Не ЗначениеЗаполнено(Объект.ЭлектронныйДокумент) Тогда
		ИмяФайлаСРасширением = НСтр("ru = 'Выбрать'");
		Возврат;
	КонецЕсли;
	
	ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ПараметрыДанныхФайла.ИдентификаторФормы = УникальныйИдентификатор;
	
	Попытка
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(Объект.ЭлектронныйДокумент, ПараметрыДанныхФайла);
	Исключение
		Ошибка = ИнформацияОбОшибке();
		ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(
			ЭтотОбъект,
			"ИмяФайлаСРасширением",
			КраткоеПредставлениеОшибки(Ошибка));
		ПараметрыДанныхФайла.ПолучатьСсылкуНаДвоичныеДанные = Ложь;
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(Объект.ЭлектронныйДокумент, ПараметрыДанныхФайла);
	КонецПопытки;
	
	ИмяФайлаСРасширением = ДанныеФайла.ИмяФайла;
	Расширение = ДанныеФайла.Расширение;
	Если ЗначениеЗаполнено(Расширение)
		И Не СтрЗаканчиваетсяНа(ИмяФайлаСРасширением, Расширение) Тогда
		
		ИмяФайлаСРасширением = СтрШаблон("%1.%2", ИмяФайлаСРасширением, Расширение);
	КонецЕсли;
	
	ДанныеПрисоединенногоФайла = Новый Структура;
	ДанныеПрисоединенногоФайла.Вставить("Зашифрован", ДанныеФайла.Зашифрован);
	ДанныеПрисоединенногоФайла.Вставить("СсылкаНаДвоичныеДанные", ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	
	ПрименитьДанныеПрисоединенногоФайла(ЭтотОбъект, ДанныеПрисоединенногоФайла);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПрименитьДанныеПрисоединенногоФайла(УправляемаяФорма, ДанныеПрисоединенногоФайла)
	
	УправляемаяФорма.ДанныеЭлектронногоДокумента = Новый ФиксированнаяСтруктура(ДанныеПрисоединенногоФайла);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ЭлектронныеПодписи.ДатаПроверкиПодписи");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ЭлектронныеПодписи.ПодписьВерна");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЭлектронныеПодписи");
	ОформляемоеПоле.Использование = Истина;
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ЭлектронныеПодписи.ПодписьСотрудника");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ЭлектронныеПодписи.КомуВыданСертификат");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ЭлектронныеПодписи.ФизическоеЛицо"));
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЭлектронныеПодписиСотрудниковКомуВыданСертификат");
	ОформляемоеПоле.Использование = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПечатныеФормыПоПочте()
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьПечатныеФормыПоПочтеНастройкаУчетнойЗаписиПредложена", ЭтотОбъект);
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
		МодульРаботаСПочтовымиСообщениямиКлиент.ПроверитьНаличиеУчетнойЗаписиДляОтправкиПочты(ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПечатныеФормыПоПочтеНастройкаУчетнойЗаписиПредложена(УчетнаяЗаписьНастроена, ДополнительныеПараметры) Экспорт
	
	Если УчетнаяЗаписьНастроена <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	СписокВложений = Новый Массив;
	
	ОписанияФайлов = КадровыйЭДОВызовСервера.ФайлыПечатныхФормДляСохраненияНаДиск(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.ЭлектронныйДокумент));
	
	Для Каждого ОписанияФайла Из ОписанияФайлов Цикл
		ОписаниеФайла = Новый Структура;
		ОписаниеФайла.Вставить("Представление", ОписанияФайла.Имя);
		ОписаниеФайла.Вставить("АдресВоВременномХранилище", ОписанияФайла.Хранение);
		СписокВложений.Добавить(ОписаниеФайла);
	КонецЦикла;
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Получатель");
	ПараметрыОтправки.Вставить("Тема", Строка(Объект.ЭлектронныйДокумент));
	ПараметрыОтправки.Вставить("Текст", ПараметрыОтправки.Тема);
	ПараметрыОтправки.Вставить("Вложения", СписокВложений);
	ПараметрыОтправки.Вставить("УдалятьФайлыПослеОтправки", Истина);
	
	МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
	МодульРаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыОтправки);
	
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранных()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическиеЛица",
		Объект.ВнешниеПодписанты.Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ФизическоеЛицо В(&ФизическиеЛица)";
	
	УстановитьПривилегированныйРежим(Истина);
	ВыбранныеСотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПоместитьВоВременноеХранилище(ВыбранныеСотрудники, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработатьВыборСотрудников(ВыбранныеСотрудники)
	
	ОбновитьПредставление = Ложь;
	ОбновитьПорядокПодписей = Ложь;
	Для Каждого Сотрудник Из ВыбранныеСотрудники Цикл
		
		ФизическоеЛицо = КадровыйУчетПовтИсп.ФизическоеЛицоСотрудника(Сотрудник);
		СтруктураПоиска = Новый Структура("ФизическоеЛицо", ФизическоеЛицо);
		Если Объект.ВнешниеПодписанты.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			ОбновитьПредставление = Истина;
			НовыйПодписант = Объект.ВнешниеПодписанты.Добавить();
			НовыйПодписант.ФизическоеЛицо = ФизическоеЛицо;
			Если ДобавитьПодпись(ФизическоеЛицо) Тогда
				ОбновитьПорядокПодписей = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбновитьПорядокПодписей Тогда
		ОбновитьПорядокПодписей();
	КонецЕсли;
	
	Если ОбновитьПредставление Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеФайлаЗаполнены(УправляемаяФорма)
	Возврат ЗначениеЗаполнено(УправляемаяФорма.Объект.ЭлектронныйДокумент)
		Или (УправляемаяФорма.ДанныеЭлектронногоДокумента <> Неопределено
			И ЗначениеЗаполнено(УправляемаяФорма.ДанныеЭлектронногоДокумента.СсылкаНаДвоичныеДанные))
КонецФункции

// Работа с подписями

&НаСервере
Функция ЗаполнитьКоллекцииПодписей()

	ПодписиСервиса = Новый Массив;
	ПодписиИБ = Новый Массив;
	
	Для каждого СтрокаПодписи Из ЭлектронныеПодписи Цикл
		Если ЗначениеЗаполнено(СтрокаПодписи.ДатаПодписи) Тогда
			Если ЗначениеЗаполнено(СтрокаПодписи.АдресПодписи) Тогда
				Если КабинетСотрудника.ЭтоПодписанСервиса(СтрокаПодписи.Комментарий) Тогда
					ПодписиСервиса.Добавить(СтрокаПодписи.ПолучитьИдентификатор());
				Иначе
					ПодписиИБ.Добавить(СтрокаПодписи.ПолучитьИдентификатор());
				КонецЕсли;
			Иначе
				СтрокаПодписи.Статус = НСтр("ru = 'Требуется собственноручная подпись'");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	КоллекцияПодписей = Новый Структура();
	КоллекцияПодписей.Вставить("ПодписиСервиса", ПодписиСервиса);
	КоллекцияПодписей.Вставить("ПодписиИБ", ПодписиИБ);
	
	Возврат КоллекцияПодписей;

КонецФункции

&НаКлиенте
Функция ЗаполнитьОтпечаткиПодписейСервиса(ОповещениеЗавершения = Неопределено)
	
	ПодписиСервиса = ПодписиЗагруженныеИзСервиса();
	Если ПодписиСервиса.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПодписиБезОтпечатков = Новый Массив;
	Для Каждого ДанныеПодписиСервиса Из ПодписиСервиса Цикл
		Если ПустаяСтрока(ДанныеПодписиСервиса.Отпечаток) Тогда
			ПодписиБезОтпечатков.Добавить(ДанныеПодписиСервиса);
		КонецЕсли;
	КонецЦикла;
	
	Если ПодписиБезОтпечатков.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПодписиБезОтпечатков", ПодписиБезОтпечатков);
	Если ОповещениеЗавершения <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПриПолученииМенеджераКриптографииДляЗаполнитьОтпечатков", ЭтотОбъект, ДополнительныеПараметры);
	ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(Оповещение, "ПроверкаПодписи");
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПриПолученииМенеджераКриптографииДляЗаполнитьОтпечатков(МенеджерКриптографии, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(МенеджерКриптографии) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, МенеджерКриптографии);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	ДополнительныеПараметры.Вставить("ИндексТекущейПодписи", 0);
	
	ВыполнитьИтерациюЗаполненияОтпечатка(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьИтерациюЗаполненияОтпечатка(ДополнительныеПараметры)
	
	Оповещение = Новый ОписаниеОповещения("ПриПолученииДанныхСертификата", ЭтотОбъект, ДополнительныеПараметры);
	КадровыйЭДОКлиент.НачатьПолучениеДанныхСертификатаПодписи(
		Оповещение.ДополнительныеПараметры.МенеджерКриптографии,
			ПолучитьИзВременногоХранилища(
				Оповещение.ДополнительныеПараметры.ПодписиБезОтпечатков[Оповещение.ДополнительныеПараметры.ИндексТекущейПодписи].АдресПодписи),
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииДанныхСертификата(ДанныеСертификата, ДополнительныеПараметры) Экспорт
	
	Если ДанныеСертификата <> Неопределено Тогда
		ПодписьБезСертификата = ДополнительныеПараметры.ПодписиБезОтпечатков[ДополнительныеПараметры.ИндексТекущейПодписи];
		ПодписьБезСертификата.Отпечаток = ДанныеСертификата.Отпечаток;
		ПодписьБезСертификата.АдресСертификата = ДанныеСертификата.АдресСертификата;
		ОбновитьДанныеСертификатов(Объект.ЭлектронныйДокумент, ПодписьБезСертификата.ПорядковыйНомер,
			ПодписьБезСертификата.Отпечаток, ПодписьБезСертификата.АдресСертификата);
	КонецЕсли;
	
	ДополнительныеПараметры.ИндексТекущейПодписи = ДополнительныеПараметры.ИндексТекущейПодписи + 1;
	Если ДополнительныеПараметры.ИндексТекущейПодписи < ДополнительныеПараметры.ПодписиБезОтпечатков.Количество() Тогда
		ВыполнитьИтерациюЗаполненияОтпечатка(ДополнительныеПараметры);
	ИначеЕсли ДополнительныеПараметры.Свойство("ОповещениеЗавершения") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписиСервисаПослеСозданияМенеджера(МенеджерКриптографии, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(МенеджерКриптографии) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, МенеджерКриптографии);
		Возврат;
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ПослеПроверкиПодписей", ЭтотОбъект, ДополнительныеПараметры);
	
	ДополнительныеПараметры.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	ДополнительныеПараметры.Вставить("ПеречитатьПодписи", Ложь);
	ДополнительныеПараметры.Вставить("ИндексТекущейПодписи", 0);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	НачатьПроверкуПодписи(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуПодписи(ДополнительныеПараметры)
	
	Попытка
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДополнительныеПараметры.СсылкаНаДвоичныеДанные);
		АдресПодписи = ДополнительныеПараметры.ТаблицаПодписей[ДополнительныеПараметры.ИндексТекущейПодписи].АдресПодписи;
		ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(АдресПодписи);
		
		Оповещение = Новый ОписаниеОповещения("НачатьПроверкуСертификата", ЭтотОбъект, ДополнительныеПараметры, "ПроверкаПодписиВыполнитьПриОшибке", ЭтотОбъект);
		ДополнительныеПараметры.МенеджерКриптографии.НачатьПроверкуПодписи(Оповещение, ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи);
	Исключение
		Ошибка = ИнформацияОбОшибке();
		ПроверкаПодписиЗавершение(КраткоеПредставлениеОшибки(Ошибка), ДополнительныеПараметры);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПодписиВыполнитьПриОшибке(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт

	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	Иначе
		ОписаниеОшибки = Строка(ИнформацияОбОшибке);
	КонецЕсли;
	
	ПроверкаПодписиЗавершение(ОписаниеОшибки, Контекст);	

КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуСертификата(Сертификат, ДополнительныеПараметры) Экспорт
	
	Если Сертификат <> Неопределено Тогда
		
		Попытка
			
			ДополнительныеПараметры.Вставить("Сертификат", Сертификат);
			Оповещение = Новый ОписаниеОповещения("ПроверкаСертификатаЗавершение", ЭтотОбъект, ДополнительныеПараметры,
					"ПроверкаСертификатаВыполнитьПриОшибке", ЭтотОбъект);
			
			МассивРежимовПроверки = Новый Массив;
			МассивРежимовПроверки.Добавить(РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
			МассивРежимовПроверки.Добавить(РежимПроверкиСертификатаКриптографии.ИгнорироватьПроверкуВСпискеОтозванныхСертификатов);
			ДополнительныеПараметры.МенеджерКриптографии.НачатьПроверкуСертификата(
				Оповещение, Сертификат, МассивРежимовПроверки);
			
		Исключение
			Ошибка = ИнформацияОбОшибке();
			ПроверкаПодписиЗавершение(КраткоеПредставлениеОшибки(Ошибка), ДополнительныеПараметры);
		КонецПопытки;
		
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСертификатаВыполнитьПриОшибке(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	Иначе
		ОписаниеОшибки = Строка(ИнформацияОбОшибке);
	КонецЕсли;
	
	ПроверкаПодписиЗавершение(ОписаниеОшибки, Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСертификатаЗавершение(ДополнительныеПараметры) Экспорт
	
	ДанныеСтроки = ДополнительныеПараметры.ТаблицаПодписей[ДополнительныеПараметры.ИндексТекущейПодписи];
	ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресПодписи);
	
	Попытка
		
		Оповещение = Новый ОписаниеОповещения("ПроверкаПодписиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ЗаполнитьДанныеСертификатаПодписи(
			ДополнительныеПараметры.МенеджерКриптографии,
			ДанныеСтроки,
			ДополнительныеПараметры.Сертификат,
			ДвоичныеДанныеПодписи,
			Оповещение);
		
	Исключение
		Ошибка = ИнформацияОбОшибке();
		ПроверкаПодписиЗавершение(КраткоеПредставлениеОшибки(Ошибка), ДополнительныеПараметры);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПодписиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДанныеСтроки = ДополнительныеПараметры.ТаблицаПодписей[ДополнительныеПараметры.ИндексТекущейПодписи];
	Если Результат = Истина Тогда
		ДанныеСтроки.Статус = НСтр("ru = 'Верна'");
		ДанныеСтроки.ПодписьВерна = Истина;
		ДанныеСтроки.ОписаниеОшибки = "";
	Иначе
		ДанныеСтроки.Статус = НСтр("ru = 'Не верна'");
		ДанныеСтроки.ПодписьВерна = Ложь;
		ДанныеСтроки.ОписаниеОшибки = Результат;
	КонецЕсли;
	ДанныеСтроки.ДатаПроверкиПодписи = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	ДополнительныеПараметры.ИндексТекущейПодписи = ДополнительныеПараметры.ИндексТекущейПодписи + 1;
	Если ДополнительныеПараметры.ИндексТекущейПодписи  < ДополнительныеПараметры.ТаблицаПодписей.Количество() Тогда
		НачатьПроверкуПодписи(ДополнительныеПараметры);
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиПодписей(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ПеречитатьПодписи Тогда
		ЗапланироватьПеречитатьЭлектронныеПодписи();
	Иначе
		УстановитьПодсказкуСотруднику(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСертификатыПодписейСервисаПослеСозданияМенеджера(МенеджерКриптографии, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(МенеджерКриптографии) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, МенеджерКриптографии);
		Возврат;
	КонецЕсли;
	
	ПеречитатьПодписи = Ложь;
	Для Каждого ДанныеСтроки Из ДополнительныеПараметры.ТаблицаПодписей Цикл
		ЗаполнитьДанныеСертификатаПодписи(МенеджерКриптографии, ДанныеСтроки, Неопределено,
			ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресПодписи), ДополнительныеПараметры.ОповещениеЗавершения);
		Если ЗначениеЗаполнено(ДанныеСтроки.Отпечаток) Тогда
			ОбновитьДанныеСертификатов(Объект.ЭлектронныйДокумент, ДанныеСтроки.ПорядковыйНомер,
				ДанныеСтроки.Отпечаток, ДанныеСтроки.АдресСертификата);
			ПеречитатьПодписи = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ПеречитатьПодписи Тогда
		ЗапланироватьПеречитатьЭлектронныеПодписи();
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеЗавершения") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапланироватьПеречитатьЭлектронныеПодписи()
	
	ПодключитьОбработчикОжидания("ПрочитатьЭлектронныеПодписиНаКлиенте", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьЭлектронныеПодписиНаКлиенте()
	
	РезультатыПроверки = Новый Соответствие;
	Для Каждого ДанныеПодписи Из ЭлектронныеПодписи Цикл
		Если ЗначениеЗаполнено(ДанныеПодписи.Отпечаток) Тогда
			РезультатыПроверки.Вставить(ДанныеПодписи.Отпечаток,
				Новый Структура("Статус,ПодписьВерна,ОписаниеОшибки,ДатаПроверкиПодписи",
					ДанныеПодписи.Статус,
					ДанныеПодписи.ПодписьВерна,
					ДанныеПодписи.ОписаниеОшибки,
					ДанныеПодписи.ДатаПроверкиПодписи));
		КонецЕсли;
	КонецЦикла;
	ПрочитатьЭлектронныеПодписи(РезультатыПроверки, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеСертификатаПодписи(МенеджерКриптографии, ДанныеСтроки, Сертификат, ДвоичныеДанныеПодписи, ОповещениеЗавершения)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Сертификат", Сертификат);
	ДополнительныеПараметры.Вставить("ДанныеСтроки", ДанныеСтроки);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Оповещение = Новый ОписаниеОповещения("ПриПолученииДанныхСертификатаПодписи", ЭтотОбъект, ДополнительныеПараметры);
	КадровыйЭДОКлиент.НачатьПолучениеДанныхСертификатаПодписи(
		МенеджерКриптографии, ДвоичныеДанныеПодписи, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииДанныхСертификатаПодписи(ДанныеСертификата, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДанныеСертификата) Тогда
		
		ДополнительныеПараметры.Сертификат = ДанныеСертификата.Сертификат;
		
		ДанныеСтроки = ДополнительныеПараметры.ДанныеСтроки;
		ДанныеСтроки.Отпечаток = ДанныеСертификата.Отпечаток;
		ДанныеСтроки.АдресСертификата = ДанныеСертификата.АдресСертификата;
		
		ОбновитьДанныеСертификатов(Объект.ЭлектронныйДокумент, ДанныеСтроки.ПорядковыйНомер,
			ДанныеСтроки.Отпечаток, ДанныеСтроки.АдресСертификата);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеЗавершения") Тогда
		Если ЗначениеЗаполнено(ДополнительныеПараметры.ДанныеСтроки.Отпечаток) Тогда
			ДополнительныеПараметры.ОповещениеЗавершения.ДополнительныеПараметры.ПеречитатьПодписи = Истина;
		КонецЕсли;
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеСертификатов(ПодписанныйОбъект, ПорядковыйНомер, Отпечаток, АдресСертификата)
	
	КадровыйЭДО.СохранитьСертификатПодписи(Объект.ЭлектронныйДокумент, ПорядковыйНомер, Отпечаток, АдресСертификата);
	ПодписиСотрудников = ЭлектронныеПодписи.Выгрузить(Новый Структура("ПодписьСотрудника,Отпечаток", Истина, ""));
	Если ПодписиСотрудников.Количество() > 0 Тогда
		СтрокиПодписи = ЭлектронныеПодписи.НайтиСтроки(Новый Структура(
			"ПорядковыйНомер,Отпечаток", ПорядковыйНомер, Отпечаток));
		Если СтрокиПодписи.Количество() > 0 Тогда
			СтрокаПодписи = СтрокиПодписи[0];
			Если СтрокаПодписи <> Неопределено Тогда
				Для Каждого СтрокаПодписиСотрудника Из ПодписиСотрудников Цикл
					Если СтрокаПодписиСотрудника.КомуВыданСертификат = СтрокаПодписи.КомуВыданСертификат Тогда
						КадровыйЭДО.СохранитьПодписьДокументаКЭДО(Объект.Ссылка, СтрокаПодписиСотрудника.ФизическоеЛицо,
							СтрокаПодписи.Отпечаток, СтрокаПодписи.ДатаПодписи);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Управление отображением элементов формы

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеЭлементовФормы(УправляемаяФорма, ИспользоватьЭлектронныеПодписи)
	
	Объект = УправляемаяФорма.Объект;
	Элементы = УправляемаяФорма.Элементы;
	
	Если Объект.КатегорияДокумента = ПредопределенноеЗначение("Перечисление.КатегорииДокументовКадровогоЭДО.РасчетныйЛисток") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ФизическоеЛицо",
			"Заголовок",
			НСтр("ru = 'Ознакомить'"));
			
	КонецЕсли;
	
	УстановитьПодсказкуСотруднику(УправляемаяФорма);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаПередатьВ1СКабинетСотрудника",
		"Видимость",
		Объект.Внешний);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаПередатьВ1СКабинетСотрудника",
		"Доступность",
		ДанныеФайлаЗаполнены(УправляемаяФорма));
	
	// Ознакомляемые печатных форм
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФизическоеЛицо",
		"Видимость",
		ЗначениеЗаполнено(УправляемаяФорма.ФизическоеЛицо)
			И Не Объект.НаСписокСотрудников 
			И Не Объект.Внешний);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЭлектронныеПодписиСотрудниковГруппа",
		"Видимость",
		Не ЗначениеЗаполнено(УправляемаяФорма.ФизическоеЛицо)
			Или Объект.НаСписокСотрудников
			Или Объект.Внешний);
	
	// Ознакомляемые внешних документов
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОзнакомляемыеВнешнегоДокументаГруппа",
		"Видимость",
		Объект.Внешний);
	
	УстановитьОтображениеЭлементовПоОрганизации(УправляемаяФорма);
	УстановитьОтображениеОзнакомляемых(УправляемаяФорма);
	УстановитьОтображениеЭлектронногоДокумента(УправляемаяФорма);
	
	// Основание
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОснованиеДокумента",
		"Видимость",
		ЗначениеЗаполнено(Объект.Ссылка)
			И Объект.Ссылка <> Объект.ОснованиеДокумента);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ИмяФайлаСРасширением",
		"Видимость",
		ЗначениеЗаполнено(УправляемаяФорма.ИмяФайлаСРасширением)
			Или ЗначениеЗаполнено(Объект.ЭлектронныйДокумент));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаПросмотреть",
		"Видимость",
		ЗначениеЗаполнено(Объект.ЭлектронныйДокумент));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаОтправить",
		"Видимость",
		ЗначениеЗаполнено(Объект.ЭлектронныйДокумент)
			И СтрНайти(УправляемаяФорма.Расширение, "PDF") > 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЭлектронныеПодписи",
		"Доступность",
		ЗначениеЗаполнено(Объект.ЭлектронныйДокумент));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТребуетсяПодписьОрганизации",
		"Видимость",
		ИспользоватьЭлектронныеПодписи);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаЗадания",
		"Видимость",
		УправляемаяФорма.ДоступноПравоУправлятьЗаданиями
			И ЗначениеЗаполнено(Объект.Ссылка));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ИмяФайлаСРасширением",
		"ГиперСсылка",
		Объект.Ссылка.Пустая());
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеОзнакомляемых(УправляемаяФорма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		УправляемаяФорма.Элементы,
		"ОзнакомляемоеФизическоеЛицо",
		"Доступность",
		УправляемаяФорма.ВыборОзнакомляемых = 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		УправляемаяФорма.Элементы,
		"ВыбратьСотрудников",
		"Доступность",
		УправляемаяФорма.ВыборОзнакомляемых = 1);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеЭлектронногоДокумента(УправляемаяФорма)
	
	ТекстПодсказки = "";
	Если СтрНайти(КадровыйЭДОКлиентСервер.РасширенияФайловЭлектронныхДокументов(), "." + НРег(УправляемаяФорма.Расширение)) = 0 Тогда
		ТекстПодсказки = НСтр("ru = 'Просмотр документа может быть недоступен на устройствах сотрудников. Рекомендуем
			|- либо конвертировать документ в pdf-формат, который может быть просмотрен почти на любом устройстве
			|- либо отсканировать документ'");
	КонецЕсли;
	
	ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(
		УправляемаяФорма,
		"ИмяФайлаСРасширением",
		ТекстПодсказки);
	
	ДоступностьЭлементов =
		УправляемаяФорма.ДанныеЭлектронногоДокумента <> Неопределено
			И УправляемаяФорма.ДанныеЭлектронногоДокумента.СсылкаНаДвоичныеДанные <> Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		УправляемаяФорма.Элементы,
		"ФормаПросмотреть",
		"Доступность",
		ДоступностьЭлементов);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		УправляемаяФорма.Элементы,
		"ФормаОтправить",
		"Доступность",
		ДоступностьЭлементов);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		УправляемаяФорма.Элементы,
		"ЭлектронныеПодписиГруппа",
		"Доступность",
		ДоступностьЭлементов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПодсказкуСотруднику(УправляемаяФорма)
	
	ПодсказкаСотрудника = "";
	Если ЗначениеЗаполнено(УправляемаяФорма.ФизическоеЛицо) Тогда
		
		ПодписиСотрудника = УправляемаяФорма.ЭлектронныеПодписи.НайтиСтроки(
			Новый Структура("ФизическоеЛицо,ПодписьСотрудника", УправляемаяФорма.ФизическоеЛицо, Истина));
		
		Если ПодписиСотрудника.Количество() > 0 Тогда
			
			Для Каждого ПодписьСотрудника Из ПодписиСотрудника Цикл
				
				Если ЗначениеЗаполнено(ПодписьСотрудника.ДатаПодписи) Тогда
					
					Если ПодписьСотрудника.РезультатСогласования = ПредопределенноеЗначение("Перечисление.РезультатыСогласованияБЗК.Согласовано") Тогда
						РезультатСогласования = НСтр("ru = 'Подписан'")
					Иначе
						РезультатСогласования = Строка(ПодписьСотрудника.РезультатСогласования);
					КонецЕсли;
					ПодсказкаСотрудника = СтрШаблон(
						"%1: %2",
						РезультатСогласования,
						Формат(ПодписьСотрудника.ДатаПодписи, "ДЛФ=DT"));
					Если ЗначениеЗаполнено(ПодписьСотрудника.Статус) Тогда
						
						ЧастиИнформацииОПроверке = Новый Массив;
						ЧастиИнформацииОПроверке.Добавить(ПодписьСотрудника.Статус);
						
						Если ЗначениеЗаполнено(ПодписьСотрудника.ОписаниеОшибки) Тогда
							ЧастиИнформацииОПроверке.Добавить(ПодписьСотрудника.ОписаниеОшибки);
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ПодписьСотрудника.ДатаПроверкиПодписи) Тогда
							ЧастиИнформацииОПроверке.Добавить(Формат(ПодписьСотрудника.ДатаПроверкиПодписи, "ДЛФ=DT"));
						КонецЕсли;
						
						ПодсказкаСотрудника = СтрШаблон(
							"%1 (%2)",
							ПодсказкаСотрудника,
							СтрСоединить(ЧастиИнформацииОПроверке, ", "));
					КонецЕсли;
					
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(
		УправляемаяФорма, "ФизическоеЛицо", ПодсказкаСотрудника);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеЭлементовПоОрганизации(УправляемаяФорма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		УправляемаяФорма.Элементы,
		"ОзнакомляемыеВнешнегоДокументаГруппа",
		"Доступность",
		ЗначениеЗаполнено(УправляемаяФорма.Объект.Организация));
	
КонецПроцедуры

&НаСервере
Процедура ОзнакомляемоеФизическоеЛицоПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		
		ПрежнееФизическоеЛицо = Неопределено;
		Если Объект.ВнешниеПодписанты.Количество() = 0 Тогда
			СтрокаПодписанта = Объект.ВнешниеПодписанты.Добавить();
		Иначе
			СтрокаПодписанта = Объект.ВнешниеПодписанты[0];
			ПрежнееФизическоеЛицо = СтрокаПодписанта.ФизическоеЛицо;
		КонецЕсли;
		
		СтрокаПодписанта.ФизическоеЛицо = ФизическоеЛицо;
		
		Если ЗначениеЗаполнено(ПрежнееФизическоеЛицо) Тогда
			УдалитьПодпись(ПрежнееФизическоеЛицо);
		КонецЕсли;
		
		Если ДобавитьПодпись(ФизическоеЛицо) Тогда
			ОбновитьПорядокПодписей();
		КонецЕсли;
		
	Иначе
		Если Объект.ВнешниеПодписанты.Количество() > 0 Тогда
			УдалитьПодпись(Объект.ВнешниеПодписанты[0].ФизическоеЛицо);
			Объект.ВнешниеПодписанты.Удалить(0);
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьПодпись(ФизическоеЛицо)
	
	Добавлена = Ложь;
	СтрокиПодписи = ЭлектронныеПодписи.НайтиСтроки(Новый Структура("ФизическоеЛицо", ФизическоеЛицо));
	Если СтрокиПодписи.Количество() = 0 Тогда
		СтрокаПодписи = ЭлектронныеПодписи.Добавить();
		СтрокаПодписи.ФизическоеЛицо = ФизическоеЛицо;
		СтрокаПодписи.ПодписьСотрудника = Истина;
		Добавлена = Истина;
	КонецЕсли;
	
	Возврат Добавлена;
	
КонецФункции

&НаСервере
Процедура УдалитьПодпись(ФизическоеЛицо)
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		СтрокиПодписи = ЭлектронныеПодписи.НайтиСтроки(
			Новый Структура("ФизическоеЛицо", ФизическоеЛицо));
		
		Если СтрокиПодписи.Количество() > 0 Тогда
			Если Не ЗначениеЗаполнено(СтрокиПодписи[0].ДатаПодписи) Тогда
				ЭлектронныеПодписи.Удалить(СтрокиПодписи[0]);
			Иначе
				СтрокиПодписи[0].ПодписьСотрудника = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПорядокПодписей()
	
	ЭлектронныеПодписи.Сортировать("ФизическоеЛицо");
	
КонецПроцедуры

&НаСервере
Процедура ВыборОдногоОзнакомляемогоПриИзмененииНаСервере()
	
	Если ВыборОзнакомляемых = 0 Тогда
		Если Объект.ВнешниеПодписанты.Количество() > 0 Тогда
			
			ОставляемоеФизическоеЛицо = Неопределено;
			Если Элементы.ЭлектронныеПодписиСотрудников.ТекущаяСтрока <> Неопределено Тогда
				ТекущиеДанные = ЭлектронныеПодписи.НайтиПоИдентификатору(
					Элементы.ЭлектронныеПодписиСотрудников.ТекущаяСтрока);
				ОставляемоеФизическоеЛицо = ТекущиеДанные.ФизическоеЛицо;
			КонецЕсли;
			
			Если ОставляемоеФизическоеЛицо = Неопределено Тогда
				ОставляемоеФизическоеЛицо = Объект.ВнешниеПодписанты[0].ФизическоеЛицо
			КонецЕсли;
			
			УдаляемыеСтроки = Новый Массив;
			Для Каждого СтрокаОзнакомляемого Из Объект.ВнешниеПодписанты Цикл
				Если СтрокаОзнакомляемого.ФизическоеЛицо <> ОставляемоеФизическоеЛицо Тогда
					УдаляемыеСтроки.Добавить(СтрокаОзнакомляемого);
					УдалитьПодпись(СтрокаОзнакомляемого.ФизическоеЛицо);
				Иначе
					ФизическоеЛицо = ОставляемоеФизическоеЛицо
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СтрокаОзнакомляемого Из УдаляемыеСтроки Цикл
				Объект.ВнешниеПодписанты.Удалить(СтрокаОзнакомляемого);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	УстановитьОтображениеОзнакомляемых(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ПодписиЗагруженныеИзСервиса()
	
	КоллекцияПодписей = ЗаполнитьКоллекцииПодписей();
	ПодписиСервиса = Новый Массив;
	Для каждого Идентификатор Из КоллекцияПодписей.ПодписиСервиса Цикл
		СтрокаПодписи = ЭлектронныеПодписи.НайтиПоИдентификатору(Идентификатор);
		Если Не ЗначениеЗаполнено(СтрокаПодписи.Отпечаток) Тогда
			ПодписиСервиса.Добавить(СтрокаПодписи);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодписиСервиса;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПодписиСервисаНаКлиенте(ОписаниеОповещения)
	
	ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(ОписаниеОповещения, "ПроверкаПодписи");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписиСервиса(ПодписиСервиса, СсылкаНаДвоичныеДанные)

	Если ПодписиСервиса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ТехнологияСервиса.ЭлектроннаяПодписьВМоделиСервиса") Тогда
		МодульЭлектроннаяПодписьВМоделиСервисаКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьВМоделиСервисаКлиент");
		ИспользоватьЭлектроннуюПодписьВМоделиСервиса = МодульЭлектроннаяПодписьВМоделиСервисаКлиент.ИспользованиеВозможно();
	Иначе
		ИспользоватьЭлектроннуюПодписьВМоделиСервиса = Ложь;
	КонецЕсли;
	
	ИспользоватьОблачнуюПодпись = Ложь;
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодписьСервисаDSS") Тогда
		МодульСервисКриптографииDSSКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СервисКриптографииDSSКлиент");
		ИспользоватьОблачнуюПодпись = МодульСервисКриптографииDSSКлиент.ИспользоватьСервисОблачнойПодписи();
	КонецЕсли;
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	
	Если ИспользоватьЭлектроннуюПодписьВМоделиСервиса
		Или ИспользоватьОблачнуюПодпись
		Или Не МодульЭлектроннаяПодписьКлиент.ПроверятьЭлектронныеПодписиНаСервере() Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТаблицаПодписей", ПодписиСервиса);
		ДополнительныеПараметры.Вставить("СсылкаНаДвоичныеДанные", СсылкаНаДвоичныеДанные);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПроверитьПодписиСервисаПослеСозданияМенеджера", ЭтотОбъект, ДополнительныеПараметры);
		
		ОбработатьПодписиСервисаНаКлиенте(ОписаниеОповещения);
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеСтрок = Новый Массив;
	Для каждого СтрокаПодписи Из ПодписиСервиса Цикл
		ДанныеСтроки = Новый Структура;
		ДанныеСтроки.Вставить("АдресПодписи",        СтрокаПодписи.АдресПодписи);
		ДанныеСтроки.Вставить("Статус",              СтрокаПодписи.Статус);
		ДанныеСтроки.Вставить("ПодписьВерна",        СтрокаПодписи.ПодписьВерна);
		ДанныеСтроки.Вставить("ДатаПодписи",         СтрокаПодписи.ДатаПодписи);
		ДанныеСтроки.Вставить("ОписаниеОшибки",      СтрокаПодписи.ОписаниеОшибки);
		ДанныеСтроки.Вставить("ДатаПроверкиПодписи", СтрокаПодписи.ДатаПроверкиПодписи);
		ДанныеСтрок.Добавить(ДанныеСтроки);
	КонецЦикла;
	
	ПроверитьПодписиНаСервере(ДанныеСтрок, СсылкаНаДвоичныеДанные);
	
	Индекс = 0;
	Для каждого СтрокаПодписи Из ПодписиСервиса Цикл
		
		СтрокаПодписи.ПодписьВерна        = ДанныеСтрок[Индекс].ПодписьВерна;
		СтрокаПодписи.ДатаПроверкиПодписи = ДанныеСтрок[Индекс].ДатаПроверкиПодписи;
		СтрокаПодписи.ОписаниеОшибки      = ДанныеСтрок[Индекс].ОписаниеОшибки;
		СтрокаПодписи.Статус              = ДанныеСтрок[Индекс].Статус;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	УстановитьПодсказкуСотруднику(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьПодписиНаСервере(ПодписиСервиса, СсылкаНаДвоичныеДанные)

	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(СсылкаНаДвоичныеДанные);
	
	Для Каждого СтрокаПодписи Из ПодписиСервиса Цикл
		
		ОписаниеОшибки = "";
		ПодписьВерна = Ложь;
		Статус = "";
		
		ПараметрыСоздания = ЭлектроннаяПодписьСлужебный.ПараметрыСозданияМенеджераКриптографии();
		
		ПодписьДляПроверки = ПолучитьИзВременногоХранилища(СтрокаПодписи.АдресПодписи);
		ПараметрыСоздания.АлгоритмПодписи = ЭлектроннаяПодписьСлужебныйКлиентСервер.АлгоритмСформированнойПодписи(ПодписьДляПроверки);
		
		МенеджерКриптографии = ЭлектроннаяПодписьСлужебный.МенеджерКриптографии("ПроверкаПодписи", ПараметрыСоздания);
		Если МенеджерКриптографии = Неопределено Тогда
			ОписаниеОшибки = ПараметрыСоздания.ОписаниеОшибки;
		Иначе
			
			Сертификат = Неопределено;
			Попытка
				
				МенеджерКриптографии.ПроверитьПодпись(ДвоичныеДанныеФайла, ПодписьДляПроверки, Сертификат);
				
				МассивРежимовПроверки = Новый Массив;
				МассивРежимовПроверки.Добавить(РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
				МассивРежимовПроверки.Добавить(РежимПроверкиСертификатаКриптографии.ИгнорироватьПроверкуВСпискеОтозванныхСертификатов);
				МенеджерКриптографии.ПроверитьСертификат(Сертификат, МассивРежимовПроверки);
				
				ПодписьВерна = Истина;
				Статус = НСтр("ru = 'Верна'");
				
			Исключение
				
				Статус = НСтр("ru = 'Не верна'");
				Инфо = ИнформацияОбОшибке();
				Если Инфо.Причина <> Неопределено Тогда
					Статус = Статус + ": " + Инфо.Причина.Описание;
				КонецЕсли;
				ПодписьВерна = Ложь;
				
			КонецПопытки;
			
			СтрокаПодписи.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
			СтрокаПодписи.ПодписьВерна   = ПодписьВерна;
			СтрокаПодписи.ОписаниеОшибки = ОписаниеОшибки;
			СтрокаПодписи.Статус 		 = Статус;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПеревестиВРежимПросмотраОсновныхДанных()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Основное",
		"ТолькоПросмотр",
		Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОсновныеДанныеГруппа",
		"ТолькоПросмотр",
		Не Объект.Внешний);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначениеТребуетсяПодписьОрганизации()
	
	Если ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
		Если Объект.Внешний Тогда
			// Проверка наличия подписи орагнизации
			ТребуетсяПодписьОрганизации = ЭлектронныеПодписи.Выгрузить(
				Новый Структура("ПодписьСотрудника", Ложь)).Количество() = 0;
			Если ТребуетсяПодписьОрганизации Тогда
				// Проверка существования запланированного подписания
				НаправленияНаПодпись =
					РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.НаправленияНаПодпись(
						Объект.ЭлектронныйДокумент);
				Если Не ЗначениеЗаполнено(НаправленияНаПодпись) Тогда
					ТребуетсяПодписьОрганизации = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТребуетсяПодписьОрганизации = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомментарии()
	
	УстановитьПривилегированныйРежим(Истина);
	Комментарии = РегистрыСведений.КомментарииФайловДокументовКЭДО.КомментарииФайла(Объект.ЭлектронныйДокумент);
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Элементы.КомментарииГруппа.ПодчиненныеЭлементы.Количество() > 0 Цикл
		Элементы.Удалить(Элементы.КомментарииГруппа.ПодчиненныеЭлементы[0]);
	КонецЦикла;
	
	НомерКомментария = 0;
	Ознакомиться = Ложь;
	Для Каждого КомментарийДокумента Из Комментарии Цикл
		Декорация = Элементы.Добавить("КомментарийДокумента" + НомерКомментария, Тип("ДекорацияФормы"), Элементы.КомментарииГруппа);
		Декорация.Вид = ВидДекорацииФормы.Надпись;
		Декорация.АвтоМаксимальнаяШирина = Ложь;
		Декорация.Заголовок = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(
				СтрШаблон("%1 (%2)", КомментарийДокумента.Исполнитель, Формат(КомментарийДокумента.ДатаКомментария, "ДЛФ=DT")),
				Новый Шрифт(Декорация.Шрифт, , , Истина)),
			Символы.ПС,
			КомментарийДокумента.Комментарий);
		Если КомментарийДокумента.Ознакомиться Тогда
			Ознакомиться = Истина;
		КонецЕсли;
		НомерКомментария = НомерКомментария + 1;
	КонецЦикла;
	Если Ознакомиться Тогда
		Декорация = Элементы.Добавить("КомментарийДокументаОзнакомиться", Тип("ДекорацияФормы"), Элементы.КомментарииГруппа);
		Декорация.Вид = ВидДекорацииФормы.Надпись;
		Декорация.Заголовок = Новый ФорматированнаяСтрока(НСтр("ru = 'Ознакомлено'"), , , , Декорация.Имя);
		Декорация.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылки");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"КомментарииОтветственныхЛицГруппа",
		"Видимость",
		ЗначениеЗаполнено(Комментарии));
	
КонецПроцедуры

// КадровыйЭДО

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПодключаемыеКоманды(УправляемаяФорма)
	КадровыйЭДОКлиентСервер.ОбновитьКоманды(УправляемаяФорма, УправляемаяФорма.Объект, Истина);
КонецПроцедуры

// Конец КадровыйЭДО

&НаСервере
Процедура УстановитьОтображениеПодсказкиКодаДокумента()
	
	КодДокументаКадровогоМероприятия = Объект.КодДокументаКадровогоМероприятия;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"КодДокументаКадровогоМероприятия",
		"Подсказка",
		КадровыйЭДОПовтИсп.СвойстваКодаКадровогоДокумента(
			КодДокументаКадровогоМероприятия).НаименованиеПолное);
	
КонецПроцедуры

#КонецОбласти