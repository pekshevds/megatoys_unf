#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоНовый = Параметры.Ключ.Пустая();
	ОднаОрганизация = РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация();
	
	Если ОднаОрганизация И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Справочники.Организации");
		Объект.Организация = Модуль.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СкрытьЭлементыФормыПриИспользованииОднойОрганизации(
		ЭтотОбъект, 
		"Организация");
		
	ВидыДокументов = ЭлектронныйДокументооборотСФСС.ВидыДокументовСЭДОФССДоходнаяЧасть();
	Элементы.ПредоставленныеДокументыВидДокумента.СписокВыбора.Очистить();
	Для каждого КлючЗначение Из ВидыДокументов Цикл
		Элементы.ПредоставленныеДокументыВидДокумента.СписокВыбора.Добавить(
			Число(КлючЗначение.Ключ), КлючЗначение.Значение);
		Элементы.ПредоставленныеДокументыПредставлениеВида.СписокВыбора.Добавить(
			Число(КлючЗначение.Ключ), КлючЗначение.Значение);
	КонецЦикла;
	
	РезультатЛогическогоКонтроля = ПолучитьРезультатЛогическогоКонтроля();
	Элементы.БлокОшибокИИзвещений.Видимость = РезультатЛогическогоКонтроля.БылиОшибки;
	Если РезультатЛогическогоКонтроля.БылиОшибки Тогда
		Элементы.КритическиеОшибки.Заголовок =
			"Обнаружены критические ошибки. " + РезультатЛогическогоКонтроля.СодержимоеОшибки;
	КонецЕсли;
	
	ОбновитьПредставлениеВидовДокументов(ВидыДокументов);
	
	СвойстваУведомления = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.
		ТабДокументУведомленияФСС(Объект.Ссылка, Истина);
	
	Если НЕ СвойстваУведомления = Неопределено И СвойстваУведомления.Свойство("СтатусыДокументов") Тогда
		Элементы.УведомлениеОПриеме.Видимость = Истина;
		
		СвойстваУведомления.СтатусыДокументов.Свернуть("ТребованиеФСС", "КолНепр, КолПр");
		
		СтатусыДокументов = СвойстваУведомления.СтатусыДокументов;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ТребованиеФСС", Объект.Основание);
		НайденныеСтроки = СвойстваУведомления.СтатусыДокументов.НайтиСтроки(ПараметрыОтбора);
		
		Если СтатусыДокументов[0].КолПр > 0 И СтатусыДокументов[0].КолНепр > 0 Тогда
			Элементы.ЗаголовокСтатуса.Заголовок	= НСтр("ru='Принято частично'");
			Элементы.БлокСтатуса.ЦветФона		= ЦветаСтиля.ЦветФонаТекущейОтправки;
		ИначеЕсли СтатусыДокументов[0].КолПр = 0 И СтатусыДокументов[0].КолНепр > 0 Тогда
			Элементы.ЗаголовокСтатуса.Заголовок	= НСтр("ru='Не принято'");
			Элементы.БлокСтатуса.ЦветФона		= ЦветаСтиля.ЦветФонаОшибкиОтправки;
		ИначеЕсли СтатусыДокументов[0].КолПр > 0 И СтатусыДокументов[0].КолНепр = 0 Тогда
			Элементы.ЗаголовокСтатуса.Заголовок	= НСтр("ru='Принято'");
			Элементы.БлокСтатуса.ЦветФона		= ЦветаСтиля.ЦветФонаУдачнойОтправки;
		КонецЕсли;
		
	Иначе
		Элементы.УведомлениеОПриеме.Видимость = Ложь;
	КонецЕсли;
	
	Если ЭтоНовый Тогда
		Объект.ДатаОтправкиВФСС = Неопределено;
		Объект.ИдентификаторСообщенияОтвета = "";
		Для каждого Строка из Объект.ПредоставленныеДокументы Цикл
			Строка.ДатаОтправкиВФСС = Неопределено;
			Строка.ИдентификаторСообщенияОтвета = "";
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьПредставлениеСсылок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьПредставлениеСсылок();
	
	Оповестить("Создан ответ страхователя СФР");
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДатыЗапретаИзменения") Тогда
		ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьПредставлениеВидовДокументов();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоставленныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ПредоставленныеДокументыСсылкаНаСодержимое" Тогда
		ТекущиеДанные = Элементы.ПредоставленныеДокументы.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Записать();
		Если ТекущиеДанные.Содержимое.Пустая() Тогда
			Оповещение = Новый ОписаниеОповещения("ИзменитьВложениеИзФайлаПослеВыбораФайла",
				ЭтотОбъект);
			ОткрытьВыборФайла(Оповещение);
		Иначе
			ДанныеФайла = ДанныеФайла(ТекущиеДанные.Содержимое, ЭтотОбъект.УникальныйИдентификатор);
			РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СопроводительноеПисьмоДекорацияНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	Если Объект.СопроводительноеПисьмо.Пустая() Тогда
		
		Если Объект.Ссылка.Пустая() Тогда
			Записать();
		КонецЕсли;
		Оповещение = Новый ОписаниеОповещения("ДобавитьПисьмоИзФайлаПослеВыбораФайла",
			ЭтотОбъект);
		ОткрытьВыборФайла(Оповещение);
		
	Иначе
		
		ДанныеФайла = ДанныеФайла(Объект.СопроводительноеПисьмо, ЭтотОбъект.УникальныйИдентификатор);
		ОткрыватьФормуФайла = Ложь;
		Если ОткрыватьФормуФайла Тогда
			РаботаСФайламиКлиент.ОткрытьФормуФайла(Объект.СопроводительноеПисьмо);
		Иначе
			РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Отправить(Команда)
	
	Если Объект.ПредоставленныеДокументы.Количество() = 0 Тогда
		Шаблон = НСтр("ru='Заполните список вложений, отправляемых в %1.'");
		НаименованиеОргана = НаименованиеФСС();
		ТекстСообщения = СтрШаблон(Шаблон, НаименованиеОргана);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ПредоставленныеДокументы");
		Возврат;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	Для каждого Вложение Из Объект.ПредоставленныеДокументы Цикл
		Если Вложение.Содержимое.Пустая() Тогда
			ИмяКолонки = НСтр("ru = 'Содержимое документа'");
			Текст = НСтр("ru = 'Не выбран файл документа'");
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка", "Корректность", ИмяКолонки,
					Вложение.НомерСтроки, "Предоставленные документы",
					Текст);
					
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"ПредоставленныеДокументы", Вложение.НомерСтроки, "Содержимое");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , Поле);
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Основание.Пустая() Тогда
		ИмяПоля = НСтр("ru = 'Основание'");
		Текст = НСтр("ru = 'Не выбрано основание документа'");
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Корректность", ИмяПоля, , ,
				Текст);
				
		Поле = "Основание";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , Поле);
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ОтправитьОтветНаТребованиеФССПослеВопросаОСохранении", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Перед отправкой ответа необходимо сохранить документ. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
		Возврат;
	КонецЕсли;
	
	ОтправитьОтветНаТребованиеФССПослеВопросаОСохранении(КодВозвратаДиалога.ОК, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложение(Команда)
	
	Записать();
	Оповещение = Новый ОписаниеОповещения("ДобавитьВложениеИзФайлаПослеВыбораФайла",
		ЭтотОбъект);
	ОткрытьВыборФайла(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСопроводительноеПисьмо(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ДобавитьПисьмоИзФайлаПослеВыбораФайла",
		ЭтотОбъект);
	ОткрытьВыборФайла(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСопроводительноеПисьмо(Команда)
	
	ОчиститьСодержимоеПисьма();
	ОбновитьПредставлениеСсылок();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВложение(Команда)
	
	ТекущиеДанные = Элементы.ПредоставленныеДокументы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ИзменитьВложениеИзФайлаПослеВыбораФайла",
		ЭтотОбъект);
	ОткрытьВыборФайла(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьВложение(Команда)
	
	ТекущиеДанные = Элементы.ПредоставленныеДокументы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ИзменитьВложениеИзФайлаПослеВыбораФайла",
		ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьВыборФайла(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВложение(Команда)
	
	ТекущиеДанные = Элементы.ПредоставленныеДокументы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПредоставленныеДокументы.Удалить(
		Элементы.ПредоставленныеДокументы.ТекущиеДанные.НомерСтроки - 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоТребованию(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПерезаполнитьПоТребованиюПослеВопроса", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Перед заполнениеим данные таблицы поставляемых документов будут очищены. Продолжить?'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ДопустимыеРасширения() 
	
	ДопустимыеРасширения = Новый Массив;
	ДопустимыеРасширения.Добавить("pdf");
	ДопустимыеРасширения.Добавить("doc");
	ДопустимыеРасширения.Добавить("docx");
	ДопустимыеРасширения.Добавить("xls");
	ДопустимыеРасширения.Добавить("xlsx");
	ДопустимыеРасширения.Добавить("*");
	
	Возврат ДопустимыеРасширения;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьВыборФайла(Оповещение)
	
	ДопустимыеРасширения = ДопустимыеРасширения();
	ТипыФильтра = Новый Массив;
	Для каждого Тип Из ДопустимыеРасширения Цикл
		ТипыФильтра.Добавить("*." + Тип);
	КонецЦикла;
	СтрокаРасширений = СтрСоединить(ТипыФильтра, ";");
	ФильтрШаблон = НСтр("ru = 'Все разрешенные типы (%1)|%1'");
	Фильтр = СтрШаблон(ФильтрШаблон, СтрокаРасширений);
	РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка,
		УникальныйИдентификатор,
		Фильтр, , Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПисьмоИзФайлаПослеВыбораФайла(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		Если ТипЗнч(Результат) = Тип("Массив") Тогда
			Файл = Результат[0];
		Иначе
			Файл = Результат;
		КонецЕсли;
		
		ТекстОшибки = ПроверитьФайл(файл);
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			ЗаголовокПредупреждения = НСтр("ru = 'Ошибка при добавлении вложения'");
			ПоказатьПредупреждение( ,ТекстОшибки, , ЗаголовокПредупреждения);
			Возврат;
		КонецЕсли;
		
		Объект.СопроводительноеПисьмо = Файл;
		
		ОбновитьПредставлениеСсылок();
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьФайл(Файл)
	
	Файл.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеИзФайлаПослеВыбораФайла(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		Если ТипЗнч(Результат) = Тип("Массив") Тогда
			Файл = Результат[0];
		Иначе
			Файл = Результат;
		КонецЕсли;
		
		ТекстОшибки = ПроверитьФайл(файл);
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			ЗаголовокПредупреждения = НСтр("ru = 'Ошибка при добавлении вложения'");
			ПоказатьПредупреждение( ,ТекстОшибки, , ЗаголовокПредупреждения);
			Возврат;
		КонецЕсли;
		
		Строка = Объект.ПредоставленныеДокументы.Добавить();
		Строка.Содержимое = Файл;
		Строка.ДатаДокумента = ТекущаяДата();
		Строка.КоличествоДокументовВоВложении = 1;
		Строка.СсылкаНаСодержимое = НСтр("ru='Открыть'");
		Строка.НаборДокументов = ОпределитьИдентификаторНабораДокументов();
		
		ОбновитьПредставлениеСсылок();
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьИдентификаторНабораДокументов()
	
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПредоставленныеДокументы.НаборДокументов КАК НаборДокументов,
	|	ПредоставленныеДокументы.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОтветСтрахователяНаТребованиеПроверкиФСС.ПредоставленныеДокументы КАК ПредоставленныеДокументы
	|ГДЕ
	|	ПредоставленныеДокументы.Ссылка.Основание = &Основание
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаборДокументов УБЫВ";
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Основание", Объект.Основание);
	Выборка = Запрос.Выполнить();
	
	Если НЕ Выборка.Пустой() Тогда
		СтрокаВыборки = Выборка.Выгрузить()[0];
		НаборДокументов = СтрокаВыборки.НаборДокументов;
		Если СтрокаВыборки.Ссылка = Объект.Ссылка Тогда
			ИдентификаторНабораДокументов = НаборДокументов;
		Иначе
			ИдентификаторНабораДокументов = НаборДокументов + 1;
		КонецЕсли;
	Иначе
		ИдентификаторНабораДокументов = 1;
	КонецЕсли;
	
	Возврат ИдентификаторНабораДокументов;
	
КонецФункции

&НаСервере
Функция ПроверитьФайл(файл)
	
	БайтВКилоБайте = 1024;
	МаксимальныйРазмерВМегабайтах = 4.7;
	ПредставлениеРазмера = ОбщегоНазначенияЭДКОКлиентСервер.ТекстовоеПредставлениеРазмераФайла(Файл.Размер);
	РазмерВМегабайтах = Файл.Размер / БайтВКилоБайте / БайтВКилоБайте;
	Если РазмерВМегабайтах > МаксимальныйРазмерВМегабайтах  Тогда
		Шаблон = НСтр("ru = 'Файл имеет размер %1, превышающий максимально допустимый размер 4.7 МБ. Выберите файл меньшего размера.'");
		ТекстОшибки = СтрШаблон(Шаблон, ПредставлениеРазмера);
		УдалитьФайл(Файл);
		Возврат ТекстОшибки;
	КонецЕсли;
	
	// На 313 и 314 сообщения принимаются любые файлы кроме исполняемых:
	// bat, cmd, com, exe, msi.
	НедопустимыТипы = Новый Массив;
	НедопустимыТипы.Добавить("bat");
	НедопустимыТипы.Добавить("cmd");
	НедопустимыТипы.Добавить("com");
	НедопустимыТипы.Добавить("exe");
	НедопустимыТипы.Добавить("msi");
	Если НЕ НедопустимыТипы.Найти(Файл.Расширение) = Неопределено Тогда
		НаименованиеОргана = НаименованиеФСС();
		Шаблон = НСтр("ru = 'Расширение файла %1 не принимается %2. Выберите файл любого типа, за исключением: bat, cmd, com, exe, msi.'");
		ТекстОшибки = СтрШаблон(Шаблон, Файл.Расширение, НаименованиеОргана);
		УдалитьФайл(Файл);
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура ИзменитьВложениеИзФайлаПослеВыбораФайла(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ТекущиеДанные = Элементы.ПредоставленныеДокументы.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ДополнительныеПараметры = Неопределено Тогда
			НоваяСтрока = Объект.ПредоставленныеДокументы.Добавить();
			НоваяСтрока.ДатаДокумента = ОбщегоНазначенияКлиент.ДатаСеанса();
			НоваяСтрока.НаборДокументов = ТекущиеДанные.НаборДокументов;
			НоваяСтрока.ВидДокумента = ТекущиеДанные.ВидДокумента;
			НоваяСтрока.КоличествоДокументовВоВложении = ТекущиеДанные.КоличествоДокументовВоВложении;
		КонецЕсли;
			
		Если ТипЗнч(Результат) = Тип("Массив") Тогда
			Файл = Результат[0];
		Иначе
			Файл = Результат;
		КонецЕсли;
		
		ТекстОшибки = ПроверитьФайл(файл);
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			ЗаголовокПредупреждения = НСтр("ru = 'Ошибка при добавлении вложения'");
			ПоказатьПредупреждение( ,ТекстОшибки, , ЗаголовокПредупреждения);
			Возврат;
		КонецЕсли;
		
		Если НЕ ДополнительныеПараметры = Неопределено Тогда
			ТекущиеДанные = НоваяСтрока;
		Иначе
			ТекущиеДанные = Элементы.ПредоставленныеДокументы.ТекущиеДанные;
			Если ТекущиеДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ТекущиеДанные.Содержимое = Файл;
		
		ОбновитьПредставлениеВидовДокументов();
		ОбновитьПредставлениеСсылок();
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоставленныеДокументыПредставлениеВидаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Значение = Элементы.ПредоставленныеДокументыПредставлениеВида.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	ТекущиеДанные = Элементы.ПредоставленныеДокументы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ТекущиеДанные.ВидДокумента = Значение.Значение;
	ТекущиеДанные.ПредставлениеВида = Значение.Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОтветНаТребованиеФСС(
		ОповещениеОбратногоВызова,
		ДокументОтвета,
		ЗадаватьВопросОТестовомСервере = Истина) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова",		ОповещениеОбратногоВызова);
	ДополнительныеПараметры.Вставить("ДокументОтвета",					ДокументОтвета);
	ДополнительныеПараметры.Вставить("ЗадаватьВопросОТестовомСервере",	ЗадаватьВопросОТестовомСервере);
	ДополнительныеПараметры.Вставить("НомерОтправленнойСтрокиОтвета",	0);
	ДополнительныеПараметры.Вставить("ИдентификаторыСообщенияОтвета",	Новый Соответствие);
	ДополнительныеПараметры.Вставить("КонтекстЭДОКлиент",				Неопределено);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтправитьОтветНаТребованиеФССПослеПолученияКонтекста",
		ЭтотОбъект,
		ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОтветНаТребованиеФССПослеВопросаОСохранении(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаОтправкиВФСС) Тогда
		Оповещение = Новый ОписаниеОповещения("ОтправитьОтветНаТребованиеФССПослеВопросаОПовторе", ЭтотОбъект);
		Шаблон = НСтр("ru='Ответ на требование был отправлен %1. Отправить повторно?'");
		ТекстВопроса = СтрШаблон(Шаблон, Объект.ДатаОтправкиВФСС);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.Отмена);
		Возврат;
	КонецЕсли;
	
	ОтправитьОтветНаТребованиеФССПослеВопросаОПовторе(КодВозвратаДиалога.ОК, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОтветНаТребованиеФССПослеВопросаОПовторе(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	// Изменяем идентификатор набора документов.
	Для каждого Строка Из Объект.ПредоставленныеДокументы Цикл
		Строка.НаборДокументов = Строка.НаборДокументов + 1;
	КонецЦикла;
	Записать();
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтправитьОтветНаТребованиеФССПослеОтправки",
		ЭтотОбъект);
		
	ОтправитьОтветНаТребованиеФСС(ОписаниеОповещения, Объект.Ссылка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОтветНаТребованиеФССПослеПолученияКонтекста(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеОбратногоВызова 		= ДополнительныеПараметры.ОповещениеОбратногоВызова;
	
	КонтекстЭДОКлиент 						= Результат.КонтекстЭДО;
	ТекстОшибкиИнициализацииКонтекстаЭДО 	= Результат.ТекстОшибки;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Неопределено);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.КонтекстЭДОКлиент = КонтекстЭДОКлиент;
	ОтправитьОтветНаТребованиеФССЦикл(Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОтветНаТребованиеФССЦикл(Результат, ДополнительныеПараметры) Экспорт
	
	НомерОтправленнойСтрокиОтвета	= ДополнительныеПараметры.НомерОтправленнойСтрокиОтвета;
	ИдентификаторыСообщенияОтвета 	= ДополнительныеПараметры.ИдентификаторыСообщенияОтвета;
	ЗадаватьВопросОТестовомСервере 	= ДополнительныеПараметры.ЗадаватьВопросОТестовомСервере;
	ОповещениеОбратногоВызова 		= ДополнительныеПараметры.ОповещениеОбратногоВызова;
	ДокументОтвета 					= ДополнительныеПараметры.ДокументОтвета;
	КонтекстЭДОКлиент 				= ДополнительныеПараметры.КонтекстЭДОКлиент;
	
	Если НЕ Результат = Неопределено
		И НЕ Результат.Выполнено Тогда
		Результат.Вставить("ИдентификаторыСообщенияОтвета", ИдентификаторыСообщенияОтвета);
		ОтправитьОтветНаТребованиеФССПослеОтправки(Результат, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	КонечныйНомерСтроки = 0;
	МаксимальноеКоличествоСтрокВОтвете = МаксимальноеКоличествоСтрокВОтвете();
	МаксимальныйНомерСтроки = НомерОтправленнойСтрокиОтвета
		+ МаксимальноеКоличествоСтрокВОтвете;
	КоличествоСтрок = Объект.ПредоставленныеДокументы.Количество();
	Если НЕ Результат = Неопределено
		И КоличествоСтрок <= МаксимальныйНомерСтроки Тогда
		
		КонечныйНомерСтроки = Мин(МаксимальныйНомерСтроки, КоличествоСтрок);
		Для НомерСтроки = НомерОтправленнойСтрокиОтвета + 1 По КонечныйНомерСтроки Цикл
			ИдентификаторыСообщенияОтвета.Вставить(НомерСтроки, Результат.ИдентификаторЗапроса);
		КонецЦикла;
		
		Результат.Вставить("ИдентификаторыСообщенияОтвета", ИдентификаторыСообщенияОтвета);
		ОтправитьОтветНаТребованиеФССПослеОтправки(Результат, ДополнительныеПараметры);
		Возврат;
		
	КонецЕсли;
	
	Если НомерОтправленнойСтрокиОтвета > 0 Тогда
		КонечныйНомерСтроки = Мин(МаксимальныйНомерСтроки, КоличествоСтрок);
		Для НомерСтроки = НомерОтправленнойСтрокиОтвета + 1 По КонечныйНомерСтроки Цикл
			ИдентификаторыСообщенияОтвета.Вставить(НомерСтроки, Результат.ИдентификаторЗапроса);
		КонецЦикла;
	КонецЕсли;
	
	ДополнительныеПараметры.НомерОтправленнойСтрокиОтвета = КонечныйНомерСтроки;
	НомерОтправленнойСтрокиОтвета = КонечныйНомерСтроки;
	МаксимальныйНомерСтроки = НомерОтправленнойСтрокиОтвета
		+ МаксимальноеКоличествоСтрокВОтвете;
	КонечныйНомерСтроки = Мин(МаксимальныйНомерСтроки, КоличествоСтрок);
	
	ПараметрыОтправкаСообщения = КонтекстЭДОКлиент.ПараметрыОтправитьСообщениеСЭДОФСС();
	ПараметрыОтправкаСообщения.Вставить("РегистрационныйНомерФСС", "");
	ПараметрыОтправкаСообщения.Вставить("ТипВзаимодействия", 		Неопределено);
	ПараметрыОтправкаСообщения.Вставить("СвойстваДляОбмена", 		Неопределено);
	ПараметрыОтправкаСообщения.Вставить("НастройкиЗаписиОтправки", 	Неопределено);
	
	ЗаполнитьПараметрыОтправкиПоДокументу(ПараметрыОтправкаСообщения, ДокументОтвета, НомерОтправленнойСтрокиОтвета);
	
	Оповещение = Новый ОписаниеОповещения("ОтправитьОтветНаТребованиеФССЦикл",
		ЭтотОбъект,
		ДополнительныеПараметры);
	ПараметрыОтправкаСообщения.ОповещениеОбратногоВызова = Оповещение;
	ПараметрыОтправкаСообщения.ОписаниеОшибки =
		НСтр("ru='Не удалось отправить ответ на требование.'")
		+ Символы.ПС + "%1";
	
	КонтекстЭДОКлиент.ОтправитьСообщениеСЭДОФСС(ПараметрыОтправкаСообщения, ЗадаватьВопросОТестовомСервере);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОтветНаТребованиеФССПослеОтправки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Выполнено Тогда
		СохранитьРезультатОтправки(Результат);
		ИмяСобытия = "Ответ страхователя на запрос, отправлен";
		Оповестить(ИмяСобытия, Объект.Ссылка);
		ЗаголовокПредупреждения = НСтр("ru = 'Отправка ответа в ФСС'");
		ЗаголовокПредупреждения = ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(Заголовок, Истина);
		ТекстСообщения = НСтр("ru = 'Ответ на требование был успешно отправлен в ФСС.'");
		ТекстСообщения = ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(ТекстСообщения, Истина);
		ПоказатьПредупреждение( , ТекстСообщения, , ЗаголовокПредупреждения);
	Иначе
		ЗаголовокПредупреждения = НСтр("ru = 'Ошибка при отправке ответа на требование в ФСС'");
		ЗаголовокПредупреждения = ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(ЗаголовокПредупреждения, Истина);
		ПоказатьПредупреждение( ,Результат.ОписаниеОшибки, , ЗаголовокПредупреждения);
	КонецЕсли;
	
	ОбновитьПредставлениеСсылок();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьРезультатОтправки(РезультатОтправки)
	
	ОбъектОснование = Объект.Основание.ПолучитьОбъект();
	ОбъектОснование.ДатаОтправкиОтветаНаЗапрос = ТекущаяДатаСеанса();
	ОбъектОснование.Записать();
	
	ИдентификаторыСообщенияОтвета = РезультатОтправки.ИдентификаторыСообщенияОтвета;
	Объект.ДатаОтправкиВФСС = ТекущаяДатаСеанса();
	Для Каждого Строка из Объект.ПредоставленныеДокументы Цикл
		Строка.ИдентификаторСообщенияОтвета = ИдентификаторыСообщенияОтвета[Строка.НомерСтроки];
	КонецЦикла;
	Записать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыОтправкиПоДокументу(ПараметрыОтправкаСообщения, ДокументОтвета, НачальныйНомерСтроки)
	
	ДанныеШапки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДокументОтвета, "ТипСообщенияОтвета, Организация");
	ПараметрыОтправкаСообщения.ТипСообщения = ДанныеШапки.ТипСообщенияОтвета;
	ПараметрыОтправкаСообщения.Организация = ДанныеШапки.Организация;
	ПараметрыОтправкаСообщения.СодержимоеСообщения =
		СодержимоеСообщенияПоДокументуОтвета(ДокументОтвета, НачальныйНомерСтроки);
	
КонецПроцедуры

&НаСервере
Функция СодержимоеСообщенияПоДокументуОтвета(ДокументОтвета, НачальныйНомерСтроки)
	
	// <?xml version="1.0"?>
	// Выездная проверка
	// <v01:responseDocVp xmlns:v011="http://www.fss.ru/integration/type/ResponseDocType/v01" 
	// xmlns:v01="http://www.fss.ru/integration/rvz/RvzResponseDocsAsv/v01">
	// Камеральная проверка
	// <v01:responseDocKp xmlns:v011="http://www.fss.ru/integration/type/ResponseDocType/v01"
	// xmlns:v01="http://www.fss.ru/integration/kp/KpResponseDocsAsv/v01">
	// 
	//	<v011:responseOn>b342f144-3079-409b-9009-1c0378b222c2</v011:responseOn>
	//	<v011:idMessage>09093a59-53cb-495f-82e9-3cefbdeb2eb3</v011:idMessage>
	//	<v011:letter>
	//		<v011:content>ZQ==</v011:content>
	//		<v011:ext>string</v011:ext>
	//		<v011:mimeType>text</v011:mimeType>
	//		<v011:size>2</v011:size>
	//		<v011:name>fileLetter.txt</v011:name>
	//	</v011:letter>
	//	<v011:provideDocs>
	//		<v011:idDocumentsGroup>1</v011:idDocumentsGroup>
	//		<v011:typeDocument>395</v011:typeDocument>
	//		<v011:count>1</v011:count>
	//		<v011:attachment>
	//			<v011:content>Y29udGVudGNvbnRlbnRjb250ZW50Y29udGVudGNvbnRlbnRjb250ZW50Y29udGVudA==</v011:content>
	//			<v011:ext>txt</v011:ext>
	//			<v011:mimeType>text</v011:mimeType>
	//			<v011:size>39</v011:size>
	//			<v011:name>fileName101.txt</v011:name>
	//		</v011:attachment>
	//		<v011:date>2022-09-12</v011:date>
	//		<v011:number>101</v011:number>
	//		<v011:description>ТУИРВзаРП+</v011:description>
	//	</v011:provideDocs>
	// </v01:responseDocKp>
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОтветСтрахователяНаТребованиеПроверкиФСС.Организация КАК Организация,
	|	ОтветСтрахователяНаТребованиеПроверкиФСС.ТипСообщенияОтвета КАК ТипСообщенияОтвета,
	|	ОтветСтрахователяНаТребованиеПроверкиФСС.СопроводительноеПисьмо КАК СопроводительноеПисьмо,
	|	ОтветСтрахователяНаТребованиеПроверкиФСС.Основание.ИдентификаторСообщения КАК ОснованиеИдентификаторСообщения
	|ИЗ
	|	Документ.ОтветСтрахователяНаТребованиеПроверкиФСС КАК ОтветСтрахователяНаТребованиеПроверкиФСС
	|ГДЕ
	|	ОтветСтрахователяНаТребованиеПроверкиФСС.Ссылка = &ДокументОтвета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПредоставленныеДокументы.Ссылка КАК Ссылка,
	|	ПредоставленныеДокументы.НомерСтроки КАК НомерСтроки,
	|	ПредоставленныеДокументы.НаборДокументов КАК НаборДокументов,
	|	ПредоставленныеДокументы.ВидДокумента КАК ВидДокумента,
	|	ПредоставленныеДокументы.КоличествоДокументовВоВложении КАК КоличествоДокументовВоВложении,
	|	ПредоставленныеДокументы.ДатаДокумента КАК ДатаДокумента,
	|	ПредоставленныеДокументы.НомерДокумента КАК НомерДокумента,
	|	ПредоставленныеДокументы.Комментарий КАК Комментарий,
	|	ПредоставленныеДокументы.Содержимое КАК Содержимое
	|ИЗ
	|	Документ.ОтветСтрахователяНаТребованиеПроверкиФСС.ПредоставленныеДокументы КАК ПредоставленныеДокументы
	|ГДЕ
	|	ПредоставленныеДокументы.Ссылка = &ДокументОтвета
	|	И ПредоставленныеДокументы.НомерСтроки > &НачальныйНомерСтроки
	|	И ПредоставленныеДокументы.НомерСтроки <= &КонечныйНомерСтроки";
	
	МаксимальноеКоличествоСтрокВОтвете = МаксимальноеКоличествоСтрокВОтвете();
	Запрос.УстановитьПараметр("ДокументОтвета", ДокументОтвета);
	Запрос.УстановитьПараметр("НачальныйНомерСтроки", НачальныйНомерСтроки);
	Запрос.УстановитьПараметр("КонечныйНомерСтроки",
		НачальныйНомерСтроки + МаксимальноеКоличествоСтрокВОтвете());
	РезультатПакета = Запрос.ВыполнитьПакет();
	ДанныеШапки = РезультатПакета[0].Выгрузить()[0];
	ЗапрашиваемыеДокументы = РезультатПакета[1].Выгрузить();
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	// создаем XML-дерево извещения
	ДеревоОтвета = КонтекстЭДО.СоздатьДеревоXML();
	
	Если НЕ ЗначениеЗаполнено(ДанныеШапки.ТипСообщенияОтвета) Тогда
		ОписаниеОшибки = НСтр("ru = 'Не заполнен тип сообщения ответа.'");
		ВызватьИсключение(ОписаниеОшибки);
	КонецЕсли;
	
	ТипОтветаКамеральнаяПроверка = 313;
	ТипОтветаВыезднаяПроверка = 314;
	
	Если ДанныеШапки.ТипСообщенияОтвета = ТипОтветаКамеральнаяПроверка Тогда
		ИмяКорневогоЭлемента = "v01:responseDocKp";
		ПространствоИмен = "http://www.fss.ru/integration/kp/KpResponseDocsAsv/v01";
	ИначеЕсли ДанныеШапки.ТипСообщенияОтвета = ТипОтветаВыезднаяПроверка Тогда
		ИмяКорневогоЭлемента = "v01:responseDocVp";
		ПространствоИмен = "http://www.fss.ru/integration/rvz/RvzResponseDocsAsv/v01";
	Иначе
		ОписаниеОшибки = НСтр("ru = 'Неизвестный тип сообщения ответа '") + ДанныеШапки.ТипСообщенияОтвета;
		ВызватьИсключение(ОписаниеОшибки);
	КонецЕсли;
	
	// иниицализируем атрибуты корневого элемента
	КонтекстЭДО.ДобавитьУзелXML(ДеревоОтвета, "v011:responseOn", Ложь, ДанныеШапки.ОснованиеИдентификаторСообщения);
	КонтекстЭДО.ДобавитьУзелXML(ДеревоОтвета, "v011:idMessage", Ложь, ДанныеШапки.ОснованиеИдентификаторСообщения);
	Если ЗначениеЗаполнено(ДанныеШапки.СопроводительноеПисьмо) Тогда
		Письмо = КонтекстЭДО.ДобавитьУзелXML(ДеревоОтвета, "v011:letter", Ложь);
		ДанныеФайла = ПолучитьДанныеФайлаБСП(ДанныеШапки.СопроводительноеПисьмо);
		ДвоичныеДанныеПриложения =
			ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		Контент = Base64Строка(ДвоичныеДанныеПриложения);
		Контент = СтрЗаменить(Контент, Символы.ПС, "");
		КонтекстЭДО.ДобавитьУзелXML(Письмо, "v011:content", Ложь, Контент);
		КонтекстЭДО.ДобавитьУзелXML(Письмо, "v011:ext", Ложь, ДанныеФайла.Расширение);
		КонтекстЭДО.ДобавитьУзелXML(Письмо, "v011:mimeType", Ложь, "text");
		Размер = XMLСтрока(ДанныеФайла.Размер);
		КонтекстЭДО.ДобавитьУзелXML(Письмо, "v011:size", Ложь, Размер);
		КонтекстЭДО.ДобавитьУзелXML(Письмо, "v011:name", Ложь, ДанныеФайла.Наименование);
	КонецЕсли;
	Для каждого СтрокаДокумента Из ЗапрашиваемыеДокументы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Содержимое) Тогда
			Продолжить;
		КонецЕсли;
		Вложение = КонтекстЭДО.ДобавитьУзелXML(ДеревоОтвета, "v011:provideDocs", Ложь);
		КонтекстЭДО.ДобавитьУзелXML(Вложение, "v011:idDocumentsGroup", Ложь,
			СтрокаДокумента.НаборДокументов);
		КонтекстЭДО.ДобавитьУзелXML(Вложение, "v011:typeDocument",
			Ложь, СтрокаДокумента.ВидДокумента);
		КонтекстЭДО.ДобавитьУзелXML(Вложение, "v011:count",
			Ложь, СтрокаДокумента.КоличествоДокументовВоВложении);
		// Данные файла.
		ДанныеФайла = ПолучитьДанныеФайлаБСП(СтрокаДокумента.Содержимое);
		ДвоичныеДанныеПриложения =
			ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		Контент = Base64Строка(ДвоичныеДанныеПриложения);
		Контент = СтрЗаменить(Контент, Символы.ПС, "");
		СодержимоеВложения = КонтекстЭДО.ДобавитьУзелXML(Вложение, "v011:attachment", Ложь);
		КонтекстЭДО.ДобавитьУзелXML(СодержимоеВложения, "v011:content", Ложь, Контент);
		КонтекстЭДО.ДобавитьУзелXML(СодержимоеВложения, "v011:ext", Ложь, ДанныеФайла.Расширение);
		КонтекстЭДО.ДобавитьУзелXML(СодержимоеВложения, "v011:mimeType", Ложь, "text");
		Размер = XMLСтрока(ДанныеФайла.Размер);
		КонтекстЭДО.ДобавитьУзелXML(СодержимоеВложения, "v011:size", Ложь, Размер);
		КонтекстЭДО.ДобавитьУзелXML(СодержимоеВложения, "v011:name", Ложь, ДанныеФайла.Наименование);
		// Дата, номер, описание
		Если ЗначениеЗаполнено(СтрокаДокумента.ДатаДокумента) Тогда
			ДатаДокумента = Формат(СтрокаДокумента.ДатаДокумента, "ДФ=yyyy-MM-dd");
			КонтекстЭДО.ДобавитьУзелXML(Вложение, "v011:date", Ложь, ДатаДокумента);
		КонецЕсли;
		КонтекстЭДО.ДобавитьУзелXML(Вложение, "v011:number",
			Ложь, СтрокаДокумента.НомерДокумента, Истина);
		КонтекстЭДО.ДобавитьУзелXML(Вложение, "v011:description",
			Ложь, СтрокаДокумента.Комментарий, Истина);
	КонецЦикла;
	
	Текст = ВыгрузитьДеревоВXML(ДеревоОтвета, ИмяКорневогоЭлемента, ПространствоИмен);
	Возврат Текст;
	
КонецФункции

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ИмяКорневогоЭлемента, ПространствоИмен = "")
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		Если ЗначениеЗаполнено(ИмяКорневогоЭлемента) Тогда
			ПотокXML.ЗаписатьНачалоЭлемента(ИмяКорневогоЭлемента);
			ПотокXML.ЗаписатьАтрибут("xmlns:v011", "http://www.fss.ru/integration/type/ResponseDocType/v01");
			ПотокXML.ЗаписатьАтрибут("xmlns:v01", ПространствоИмен);
		КонецЕсли;
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ИмяКорневогоЭлемента);
		КонецЦикла;
		Если ЗначениеЗаполнено(ИмяКорневогоЭлемента) Тогда
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист Из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ИмяКорневогоЭлемента);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СоздатьНовыйПотокXML()
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.УстановитьСтроку("");
	ПотокXML.ЗаписатьОбъявлениеXML();
	ПотокXML.Отступ = Истина;
	Возврат ПотокXML;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ИмяКорневогоЭлемента = Неопределено, ПространствоИмен = "") Экспорт
	
	ПотокXML = СоздатьНовыйПотокXML();
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ИмяКорневогоЭлемента, ПространствоИмен);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеФайлаБСП(Знач ПрисоединенныйФайл,
			Знач ИдентификаторФормы = Неопределено,
			Знач ПолучатьСсылкуНаДвоичныеДанные = Истина) Экспорт
	
	ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл,
		ИдентификаторФормы, ПолучатьСсылкуНаДвоичныеДанные);
	
	Возврат ДанныеФайла;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеФайла(СсылкаНаФайл, Идентификатор)
	
	ПараметрыФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ПараметрыФайла.ИдентификаторФормы = Идентификатор;
	Возврат РаботаСФайлами.ДанныеФайла(СсылкаНаФайл, ПараметрыФайла);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеФайла(СсылкаНаФайл)
	
	Идентификатор = Строка(Новый УникальныйИдентификатор);
	ДанныеФайла = ДанныеФайла(СсылкаНаФайл, Идентификатор);
	Размер = ОбщегоНазначенияЭДКОКлиентСервер.ТекстовоеПредставлениеРазмераФайла(ДанныеФайла.Размер);
	Представление = ДанныеФайла.Наименование + "." + ДанныеФайла.Расширение
		+ " (" + Размер + ")";
	
	// Заменяем пробелы на неразрывные, чтобы платформа не переносила имена файлов.
	Представление = СтрЗаменить(Представление, " ", Символы.НПП);
	Возврат Представление;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьПредставлениеСсылок()
	
	ОтветОтправлен = ЗначениеЗаполнено(Объект.ДатаОтправкиВФСС);
	
	Если Объект.СопроводительноеПисьмо.Пустая() Тогда
		Если ОтветОтправлен Тогда
			Элементы.СопроводительноеПисьмоДекорация.Заголовок = НСтр("ru='<Не приложено>'");
			Элементы.СопроводительноеПисьмоДекорация.Гиперссылка = Ложь;
			Элементы.СопроводительноеПисьмоДекорация.Ширина = 12;
			Элементы.УказательСопроводительноеПисьмо.Видимость = Ложь;
		Иначе
			Элементы.СопроводительноеПисьмоДекорация.Заголовок = НСтр("ru='Выберите файл'");
			Элементы.СопроводительноеПисьмоДекорация.Гиперссылка = Истина;
			Элементы.СопроводительноеПисьмоДекорация.Ширина = 10;
			Элементы.УказательСопроводительноеПисьмо.Видимость = Истина;
		КонецЕсли;
		
		Элементы.СопроводительноеПисьмоДекорация.АвтоМаксимальнаяШирина = Ложь;
		
	Иначе
		ПредставлениеФайла = ПредставлениеФайла(Объект.СопроводительноеПисьмо);
		Элементы.СопроводительноеПисьмоДекорация.Заголовок = ПредставлениеФайла;
		Элементы.СопроводительноеПисьмоДекорация.Ширина = 0;
		Элементы.СопроводительноеПисьмоДекорация.АвтоМаксимальнаяШирина = Истина;
		Элементы.УказательСопроводительноеПисьмо.Видимость = Истина;
	КонецЕсли;
	
	Для каждого Строка Из Объект.ПредоставленныеДокументы Цикл
		Если Строка.Содержимое.Пустая() Тогда
			Строка.СсылкаНаСодержимое = НСтр("ru='Выберите файл'");
		Иначе
			Строка.СсылкаНаСодержимое = ПредставлениеФайла(Строка.Содержимое);
		КонецЕсли;
	КонецЦикла;
	
	СопроводительноеПисьмоПриложено = ЗначениеЗаполнено(Объект.СопроводительноеПисьмо);
	Элементы.УдалитьСопроводительноеПисьмо.Видимость = ЗначениеЗаполнено(Объект.СопроводительноеПисьмо)
		И НЕ ОтветОтправлен;
	Элементы.ГруппаСтатусаОтправки.Видимость = ОтветОтправлен;
	Элементы.ФормаОтправить.Видимость = НЕ ОтветОтправлен;
	Элементы.ФормаЗаписать.Видимость = НЕ ОтветОтправлен;
	
	ТолькоПросмотр = ОтветОтправлен;
	ЭтотОбъект.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.ПредоставленныеДокументы.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.КоманднаяПанельДокументов.Видимость = НЕ ТолькоПросмотр;
	Элементы.СопроводительноеПисьмоДекорация.Доступность = НЕ ТолькоПросмотр
		ИЛИ СопроводительноеПисьмоПриложено;
		
	ЗаголовокСтатуса = НРег(Элементы.ЗаголовокСтатуса.Заголовок);
	Если СтрНайти(ЗаголовокСтатуса, "принят") = 0 Тогда
		Элементы.ЗаголовокСтатуса.Заголовок = НСтр("ru='Отправлено в '") + НаименованиеФСС();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеВидовДокументов(ВидыДокументов = Неопределено)
	
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.Основание, "Отправитель, ВходящаяДата, ВходящийНомер, КодОтправителя");
	ОтправительТребования = НаименованиеФСС() + " "
		+ РеквизитыОснования.Отправитель + " (" + РеквизитыОснования.КодОтправителя + ")";
	ВходящаяДата = Формат(РеквизитыОснования.ВходящаяДата, "ДЛФ=D");
	ВходящийНомер = Формат(РеквизитыОснования.ВходящийНомер, "ЧГ=0");
	Шаблон = НСтр("ru='Ответ страхователя на требование о предоставлении документов в %3 № %1 от %2'");
	НаименованиеОргана = НаименованиеФСС();
	ЭтотОбъект.Заголовок = СтрШаблон(Шаблон, ВходящийНомер, ВходящаяДата, НаименованиеОргана);
	ДатаТребования = РеквизитыОснования.ВходящаяДата;
	
	Если НЕ ЗначениеЗаполнено(ВидыДокументов) Тогда
		ВидыДокументов = ЭлектронныйДокументооборотСФСС.ВидыДокументовСЭДОФССДоходнаяЧасть();
	КонецЕсли;
	
	Для каждого Строка Из Объект.ПредоставленныеДокументы Цикл
		Если ЗначениеЗаполнено(Строка.ВидДокумента) Тогда
			ВидСтрока = Строка(Строка.ВидДокумента);
			Строка.ПредставлениеВида = ВидыДокументов[ВидСтрока];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УведомлениеОПриемеНажатие(Элемент)
	
	ЭлектронныйДокументооборотСФССКлиент.ОткрытьУведомлениеИзПанелиСтатуса(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НаименованиеФСС()
	
	Наименование = НСтр("ru='ФСС'");
	Наименование = ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(Наименование, Истина);
	Возврат Наименование;
	
КонецФункции

&НаСервереБезКонтекста
Функция МаксимальноеКоличествоСтрокВОтвете()
	
	Возврат 25;
	
КонецФункции

&НаСервере
Функция ПолучитьРезультатЛогическогоКонтроля()
	
	Результат = Новый Структура;
	Результат.Вставить("БылиОшибки", Ложь);
	Результат.Вставить("СодержимоеОшибки", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ОшибкиЛогическогоКонтроля.СодержимоеОшибки КАК СодержимоеОшибки
	|ИЗ
	|	Документ.ВходящийДокументСЭДОФСС.ОшибкиЛогическогоКонтроля КАК ОшибкиЛогическогоКонтроля
	|ГДЕ
	|	ОшибкиЛогическогоКонтроля.ОтветНаТребованиеФСС = &ОтветНаТребованиеФСС";
	
	Запрос.УстановитьПараметр("ОтветНаТребованиеФСС", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.БылиОшибки 		= Истина;
			Результат.СодержимоеОшибки 	= Выборка.СодержимоеОшибки;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОчиститьСодержимоеПисьма()
	
	Объект.СопроводительноеПисьмо =
		Справочники.ОтветСтрахователяНаТребованиеПроверкиФССПрисоединенныеФайлы.ПустаяСсылка();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоТребованиюПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ПерезаполнитьПоТребованиюНаСервере();
	ОбновитьПредставлениеСсылок();
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПоТребованиюНаСервере()
	
	ДанныеЗаполнения = Объект.Основание;
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПредоставленныеДокументы.НаборДокументов КАК НаборДокументов
	|ИЗ
	|	Документ.ОтветСтрахователяНаТребованиеПроверкиФСС.ПредоставленныеДокументы КАК ПредоставленныеДокументы
	|ГДЕ
	|	ПредоставленныеДокументы.Ссылка.Основание = &Основание
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаборДокументов УБЫВ";
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Основание", ДанныеЗаполнения.Ссылка);
	Выборка = Запрос.Выполнить();
	
	Если НЕ Выборка.Пустой() Тогда
		ИдентификаторНабораДокументов = Выборка.Выгрузить()[0].НаборДокументов + 1;
	Иначе
		ИдентификаторНабораДокументов = 1;
	КонецЕсли;
	
	Объект.ПредоставленныеДокументы.Очистить();
	Для Каждого ТекСтрокаЗапрашиваемыеДокументы Из ДанныеЗаполнения.ЗапрашиваемыеДокументы Цикл
		НоваяСтрока = Объект.ПредоставленныеДокументы.Добавить();
		НоваяСтрока.ДатаДокумента = ТекущаяДатаСеанса();
		НоваяСтрока.НаборДокументов = ИдентификаторНабораДокументов;
		НоваяСтрока.ВидДокумента = ТекСтрокаЗапрашиваемыеДокументы.ВидДокумента;
		НоваяСтрока.КоличествоДокументовВоВложении = ТекСтрокаЗапрашиваемыеДокументы.КоличествоДокументов;
	КонецЦикла;
	
	ВидыДокументов = ЭлектронныйДокументооборотСФСС.ВидыДокументовСЭДОФССДоходнаяЧасть();
	ОбновитьПредставлениеВидовДокументов(ВидыДокументов);
	
КонецПроцедуры

#КонецОбласти