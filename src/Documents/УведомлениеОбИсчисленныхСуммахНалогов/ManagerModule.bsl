#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 21, 0);
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

Функция ВыгрузитьУведомлениеОбИсчисленныхСуммахНалогов(ДокументСсылка, УникальныйИдентификатор = Неопределено) Экспорт
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	УведомлениеОбъект = ДокументОбъект.Уведомление.ПолучитьОбъект();
	Возврат УведомлениеОбъект.ВыгрузитьДокумент(УникальныйИдентификатор)
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ОписаниеТаблицНалогов() Экспорт
	
	ТаблицыНалогов = Новый Структура();
	ТаблицыНалогов.Вставить("ТаблицаНалоги",            ОписаниеТаблицыНалогов());
	
	Возврат ТаблицыНалогов;
	
КонецФункции

Функция ОписаниеТаблицыНалогов() Экспорт
	
	ТаблицаНалогов = Новый ТаблицаЗначений;
	ТаблицаНалогов.Колонки.Добавить("Налог",                       Новый ОписаниеТипов("СправочникСсылка.ВидыНалогов"));
	ТаблицаНалогов.Колонки.Добавить("КодБК",                       Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(20)));
	ТаблицаНалогов.Колонки.Добавить("СчетУчета",                   Новый ОписаниеТипов("ПланСчетовСсылка.Управленческий"));
	ТаблицаНалогов.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	ТаблицаНалогов.Колонки.Добавить("КодПоОКТМО",                  Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(11)));
	ТаблицаНалогов.Колонки.Добавить("Сумма",                       Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаНалогов.Колонки.Добавить("СрокУплаты",                  Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаНалогов.Колонки.Добавить("КлючСтроки",                  Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(36)));
	ТаблицаНалогов.Колонки.Добавить("НачалоПериода",               Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаНалогов.Колонки.Добавить("КонецПериода",                Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	
	Возврат ТаблицаНалогов;
	
КонецФункции

Функция ОписаниеДокумента(ДокументСсылка) Экспорт
	
	ОписаниеДокумента = Новый Структура("Наименование, Сумма");
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		РеквизитыДокумента    = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка,
			"Номер, Дата, СуммаДокумента, Уведомление");
		
		НаименованиеДокумента = ДокументСсылка.Метаданные().Синоним;
		НомерДокумента        = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыДокумента.Номер, Истина, Истина);
		ДатаДокумента         = Формат(РеквизитыДокумента.Дата,"ДЛФ=D");
		Статус                = ИнтерфейсыВзаимодействияБРО.ПредставлениеСостоянияДокумента(РеквизитыДокумента.Уведомление);
		
		ШаблонПредставления = НСтр("ru = '%1 %2 от %3 (%4)'");
		
		ОписаниеДокумента.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
			НаименованиеДокумента, НомерДокумента, ДатаДокумента, Статус);
		ОписаниеДокумента.Сумма = РеквизитыДокумента.СуммаДокумента;
	КонецЕсли;
	
	Возврат ОписаниеДокумента;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//   Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.УведомлениеОСпецрежимахНалогообложения";
	КомандаПечати.Обработчик     = "ЕдиныйНалоговыйСчетКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор  = "Уведомление";
	КомандаПечати.Представление  = НСтр("ru = 'Уведомление об исчисленных суммах налога'");
	КомандаПечати.Порядок        = 10;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры  

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
//@skip-warning
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ПроведениеДокумента

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	ПараметрыПроведения.Вставить("ДокументСсылка", ДокументСсылка);
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",                    ДокументСсылка);
	//Запрос.УстановитьПараметр("СписокСчетовАгентскогоНДС", УчетНДСБП.СписокСчетовАгентскогоНДС());
	
	ПодготовитьПараметрыРеквизитыДокумента(Запрос, ПараметрыПроведения, Отказ);
	
	Реквизиты = ПараметрыПроведения.ТаблицаРеквизиты[0];
	Если Отказ ИЛИ НЕ ПрослеживаемостьПереопределяемый.УчетнаяПолитикаСуществует(Реквизиты.Организация, Реквизиты.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	Для Каждого Колонка Из ПараметрыПроведения.ТаблицаРеквизиты.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
		+ ТекстЗапросаУведомлениеОбИсчисленныхСуммахНалогов(НомераТаблиц, ПараметрыПроведения, Реквизиты);
	Результат = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции

Процедура ПодготовитьПараметрыРеквизитыДокумента(Запрос, ПараметрыПроведения, Отказ)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Проведен КАК Проведен,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.УведомлениеОбИсчисленныхСуммахНалогов КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Проведен КАК Проведен,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	ТаблицаРеквизиты = Запрос.Выполнить().Выгрузить();
	
	ПараметрыПроведения.Вставить("ТаблицаРеквизиты", ТаблицаРеквизиты);
	
КонецПроцедуры

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация
	|ИЗ
	|	Документ.УведомлениеОбИсчисленныхСуммахНалогов КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";

	Возврат ТекстЗапроса + ОбщегоНазначенияУНФКлиентСервер.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаУведомлениеОбИсчисленныхСуммахНалогов(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	НомераТаблиц.Вставить("УведомлениеОбИсчисленныхСуммахНалогов", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	УведомлениеОбИсчисленныхСуммахНалоговНалоги.Ссылка КАК Ссылка,
	|	УведомлениеОбИсчисленныхСуммахНалоговНалоги.Налог КАК Налог,
	|	УведомлениеОбИсчисленныхСуммахНалоговНалоги.КодБК КАК КодБК,
	|	УведомлениеОбИсчисленныхСуммахНалоговНалоги.СчетУчета КАК СчетУчета,
	|	УведомлениеОбИсчисленныхСуммахНалоговНалоги.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	УведомлениеОбИсчисленныхСуммахНалоговНалоги.КодПоОКТМО КАК КодПоОКТМО,
	|	УведомлениеОбИсчисленныхСуммахНалоговНалоги.Сумма КАК Сумма,
	|	УведомлениеОбИсчисленныхСуммахНалоговНалоги.СрокУплаты КАК СрокУплаты,
	|	УведомлениеОбИсчисленныхСуммахНалоговНалоги.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ЛОЖЬ КАК КорректировкаЕНС
	|ИЗ
	|	Документ.УведомлениеОбИсчисленныхСуммахНалогов.Налоги КАК УведомлениеОбИсчисленныхСуммахНалоговНалоги
	|ГДЕ
	|	УведомлениеОбИсчисленныхСуммахНалоговНалоги.Ссылка = &Ссылка";

	Возврат ТекстЗапроса + ОбщегоНазначенияУНФКлиентСервер.ТекстРазделителяЗапросовПакета();

КонецФункции


#КонецОбласти

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылкаНачислениеНалогов, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	&ОрганизацияДляРегОтчетности КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНачислениеНалогов.Начисление)
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ КАК ВидДвижения,
	|	ТаблицаДокумента.Ссылка.Дата КАК Период,
	|	ТаблицаДокумента.ВидНалога КАК ВидНалога,
	|	ТаблицаДокумента.ВидНалога.СчетУчета КАК СчетУчета,
	|	ТаблицаДокумента.Сумма,
	|	ТаблицаДокумента.СрокУплаты,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНачислениеНалогов.Начисление)
	|			ТОГДА &НачисленНалог
	|		ИНАЧЕ &ВозмещенНалог
	|	КОНЕЦ КАК СодержаниеПроводки
	|ИЗ
	|	Документ.НачислениеНалогов.Налоги КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.Дата КАК Период,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Корреспонденция.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.ПрочиеРасходы)
	|				ИЛИ ТаблицаДокумента.Корреспонденция.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.ПрочиеДоходы)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее)
	|		ИНАЧЕ ТаблицаДокумента.НаправлениеДеятельности
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|	ТаблицаДокумента.ВидНалога КАК ВидНалога,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Корреспонденция.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.ПрочиеРасходы)
	|				ИЛИ ТаблицаДокумента.Корреспонденция.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.ПрочиеДоходы)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Подразделение
	|	КОНЕЦ КАК СтруктурнаяЕдиница,
	|	ТаблицаДокумента.Корреспонденция КАК СчетУчета,
	|	ТаблицаДокумента.ВидНалога КАК Аналитика,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Корреспонденция.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.ПрочиеРасходы)
	|				ИЛИ ТаблицаДокумента.Корреспонденция.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.ПрочиеДоходы)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаДокумента.ЗаказПокупателя
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНачислениеНалогов.Начисление)
	|			ТОГДА &Расходы
	|		ИНАЧЕ &Доходы
	|	КОНЕЦ КАК СодержаниеПроводки,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНачислениеНалогов.Начисление)
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаДокумента.Сумма
	|	КОНЕЦ КАК СуммаДоходов,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНачислениеНалогов.Начисление)
	|			ТОГДА ТаблицаДокумента.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРасходов,
	|	ТаблицаДокумента.Сумма КАК Сумма
	|ИЗ
	|	Документ.НачислениеНалогов.Налоги КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И (ТаблицаДокумента.Корреспонденция.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.Расходы)
	|			ИЛИ ТаблицаДокумента.Корреспонденция.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.ПрочиеРасходы)
	|			ИЛИ ТаблицаДокумента.Корреспонденция.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.Доходы)
	|			ИЛИ ТаблицаДокумента.Корреспонденция.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.ПрочиеДоходы))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Ссылка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНачислениеНалогов.Начисление)
	|			ТОГДА ТаблицаДокумента.Корреспонденция
	|		ИНАЧЕ ТаблицаДокумента.ВидНалога.СчетУчетаКВозмещению
	|	КОНЕЦ КАК СчетДт,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
	|	0 КАК СуммаВалДт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНачислениеНалогов.Начисление)
	|			ТОГДА ТаблицаДокумента.ВидНалога.СчетУчета
	|		ИНАЧЕ ТаблицаДокумента.Корреспонденция
	|	КОНЕЦ КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
	|	0 КАК СуммаВалКт,
	|	ТаблицаДокумента.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНачислениеНалогов.Начисление)
	|			ТОГДА &НачисленНалог
	|		ИНАЧЕ &ВозмещенНалог
	|	КОНЕЦ КАК Содержание
	|ИЗ
	|	Документ.НачислениеНалогов.Налоги КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНачислениеНалогов.Начисление)
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ КАК ВидДвижения,
	|	ТаблицаДокумента.Ссылка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Подразделение КАК СтруктурнаяЕдиница,
	|	ТаблицаДокумента.Корреспонденция КАК СчетУчета,
	|	ТаблицаДокумента.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаДокумента.Сумма КАК Сумма,
	|	ТаблицаДокумента.Сумма КАК СуммаБезНДС,
	|	ИСТИНА КАК ФиксированнаяСтоимость,
	|	&НачисленНалог КАК СодержаниеПроводки
	|ИЗ
	|	Документ.НачислениеНалогов.Налоги КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И (ТаблицаДокумента.Корреспонденция.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство)
	|			ИЛИ ТаблицаДокумента.Корреспонденция.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты))");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаНачислениеНалогов);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ОрганизацияДляРегОтчетности", СтруктураДополнительныеСвойства.ДляПроведения.ОрганизацияДляРегОтчетности);
	Запрос.УстановитьПараметр("НачисленНалог", НСтр("ru = 'Начислен налог'"));
	Запрос.УстановитьПараметр("ВозмещенНалог", НСтр("ru = 'Возмещен налог'"));
	Запрос.УстановитьПараметр("Доходы", НСтр("ru = 'Доходы'")); 
	Запрос.УстановитьПараметр("Расходы", НСтр("ru = 'Расходы'")); 
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыПоНалогам", МассивРезультатов[0].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходы", МассивРезультатов[1].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаУправленческий", МассивРезультатов[2].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасы", МассивРезультатов[3].Выгрузить());
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

#КонецОбласти

#КонецЕсли