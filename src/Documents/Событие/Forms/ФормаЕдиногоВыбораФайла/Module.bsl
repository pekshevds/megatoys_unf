#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВыборФайла = Параметры.ВыборФайлов;
	Документ = Параметры.Ссылка;
	ТекстПредупреждение = НСтр("ru = 'Файлы не найдены'");
	ЗаполнитьПапкиСортировки(Параметры.Участники);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ПапкиСортировки.Развернуть(0);
	
	Если Не ВыборФайла Тогда
		Элементы.СписокФайлов.Видимость = Ложь;
		ЭтотОбъект.Заголовок = НСтр("ru = 'Сохранить файлы в основании'");
		Элементы.Выбрать.Заголовок = НСтр("ru = 'Сохранить файлы'");
		Элементы.ПапкиСортировкиЕстьФайлы.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДеревоФормыПапкиСортировки

&НаКлиенте
Процедура ПапкиСортировкиПриАктивизацииСтроки(Элемент)
	
	Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Ссылка) Тогда
		Элементы.Выбрать.Доступность = Ложь;
	Иначе
		Элементы.Выбрать.Доступность = Истина;
	КонецЕсли;
	
	Если Не ВыборФайла Тогда
		Возврат;
	КонецЕсли;
	
	СписокФайлов.Очистить();
	Файлы = ФайлыПоВладельцу(Элемент.ТекущиеДанные.Ссылка);
	НастроитьВидимостьЭлементов(ЗначениеЗаполнено(Файлы));
	
	Если Не ЗначениеЗаполнено(Файлы) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Файл Из Файлы Цикл
		НоваяСтрока = СписокФайлов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Файл);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выбрать(Команда)
	
	Ссылка = Элементы.ПапкиСортировки.ТекущиеДанные.Ссылка;
	
	Если Не ВыборФайла Тогда
		
		Если Элементы.ПапкиСортировки.ТекущиеДанные.ВидКонтакта = 0 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Контакт не сохранен в CRM. Сохранение файлов невозможно'"));
			Возврат; 
		ИначеЕсли Не ЭтоВладелецПрисоединенныхФайлов(Ссылка) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выбранный объект не может хранить файлы. Сохранение файлов невозможно'"));
			Возврат;
		КонецЕсли;
		
		Результат = Новый Структура;
		Результат.Вставить("Значение", Ссылка);
		АдресВХранилище = Результат;
	Иначе
		Если Элементы.СписокФайлов.Видимость = Ложь Тогда
			АдресВХранилище = Неопределено;
			Возврат;
		КонецЕсли;
		
		ВыделенныеДокументы = Новый Массив;
		
		Для Каждого ВыделеннаяСтрока Из Элементы.ПапкиСортировки.ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = Элементы.ПапкиСортировки.ДанныеСтроки(ВыделеннаяСтрока);
			Если ТекущиеДанныеСтроки.ЕстьФайлы = 0 Тогда
				Продолжить;
			КонецЕсли;
			ВыделенныеДокументы.Добавить(ТекущиеДанныеСтроки.Ссылка);
		КонецЦикла;
		АдресВХранилище = АдресВыбранныхФайловВХранилище(ВыделенныеДокументы);
		
	КонецЕсли;
	
	Закрыть(АдресВХранилище);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ФайлыПоВладельцу(ВладелецФайла)
	
	Если ВладелецФайла = Неопределено Или Не ЭтоВладелецПрисоединенныхФайлов(ВладелецФайла) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПолноеИмяСправочника = "Справочник." + РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(ВладелецФайла);
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Файлы.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА Файлы.ПометкаУдаления = ИСТИНА
	|			ТОГДА ЕСТЬNULL(Файлы.ИндексКартинки, 2) + 1
	|		ИНАЧЕ ЕСТЬNULL(Файлы.ИндексКартинки, 2)
	|	КОНЕЦ КАК ИндексКартинки,
	|	Файлы.Наименование КАК Наименование,
	|	Файлы.Автор КАК Автор,
	|	Файлы.ДатаСоздания КАК ДатаСоздания,
	|	Файлы.Расширение КАК Расширение,
	|	Файлы.ВладелецФайла КАК ВладелецФайла
	|ИЗ
	|	&ИмяСправочника КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайлов";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСправочника", ПолноеИмяСправочника);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВладелецФайлов", ВладелецФайла);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ОбработатьПолученныеФайлы(Выборка);
КонецФункции

&НаСервереБезКонтекста
Функция ОбработатьПолученныеФайлы(Выборка)
	
	МассивФайлов = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ДанныеФайла = Новый Структура(
		"Автор, ДатаСоздания, ИндексКартинки, Наименование, Расширение, Ссылка");
		ЗаполнитьЗначенияСвойств(ДанныеФайла, Выборка);
		МассивФайлов.Добавить(ДанныеФайла);
	КонецЦикла;
	
	Возврат МассивФайлов;
КонецФункции

&НаСервере
Процедура ЗаполнитьПапкиСортировки(Участники)
	
	ДеревоПапок = РеквизитФормыВЗначение("ПапкиСортировки", Тип("ДеревоЗначений"));
	МассивВладельцевФайлов = Новый Массив;
	
	ЗаполнитьДанныеУчастников(ДеревоПапок, Участники, МассивВладельцевФайлов);
	ЗаполнитьОснования(ДеревоПапок, Параметры.Основания, МассивВладельцевФайлов);
	Если ВыборФайла Тогда
		ЗаполнитьСвязанныеПисьма(ДеревоПапок, МассивВладельцевФайлов);
	КонецЕсли;
	
	ПроверитьНаНаличиеФайлов(ДеревоПапок, МассивВладельцевФайлов);
	ЗначениеВРеквизитФормы(ДеревоПапок, "ПапкиСортировки");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеУчастников(ДеревоПапок, Участники, МассивВладельцевФайлов)
	
	Контакты = ДеревоПапок.Строки.Добавить();
	Контакты.Наименование = СтрШаблон(НСтр("ru='Участники (%1)'"), Участники.Количество());
	Контакты.ВидКонтакта = -1;
	
	МассивСсылокКонтрагентов = Новый Массив;
	Для Каждого Участник Из Участники Цикл
		
		Если Участник.ИндексКартинки = 5 Тогда
			Участник.ИндексКартинки = 3;
		КонецЕсли;
		МассивВладельцевФайлов.Добавить(Участник.КонтактCRM);
		
		СтрокаУчастникаПисьма = Контакты.Строки.Добавить();
		СтрокаУчастникаПисьма.Наименование = Участник.КонтактCRM;
		СтрокаУчастникаПисьма.Ссылка = Участник.КонтактCRM;
		СтрокаУчастникаПисьма.ВидКонтакта = Участник.ИндексКартинки;
		
		Если ЗначениеЗаполнено(Участник.Дубли) Тогда
			КоличествоДублей = Участник.Дубли.Количество();
			КоличествоДублей = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				";%1 контакт;;%1 контакта;%1 контактов;%1 контакта",
				Участник.Дубли.Количество());
			СтрокаДублей = СтрокаУчастникаПисьма.Строки.Добавить();
			СтрокаДублей.Наименование = СтрШаблон(НСтр("ru='Еще %1 с таким email'"), КоличествоДублей);
			СтрокаДублей.ВидКонтакта = 5;
			Для Каждого Дубль Из Участник.Дубли Цикл
				СтрокаДубля = СтрокаДублей.Строки.Добавить();
				СтрокаДубля.Наименование = Дубль.КонтактCRM;
				СтрокаДубля.Ссылка = Дубль.КонтактCRM;
				СтрокаДубля.ВидКонтакта = Дубль.ИндексКартинки;
				МассивВладельцевФайлов.Добавить(Дубль.КонтактCRM);
			КонецЦикла;
		КонецЕсли;
		
		Если Не ТипЗнч(Участник.КонтактCRM) = Тип("СправочникСсылка.Контрагенты") Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСсылокКонтрагентов.Добавить(Участник.КонтактCRM);
	КонецЦикла;
	
	ДокументыКонтрагентов = СчетаИЗаказыКонтрагентов(МассивСсылокКонтрагентов);
	КонтактыКонтрагентов = КонтактыКонтрагентов(МассивСсылокКонтрагентов);
	Головные = ГоловныеКонтрагенты(МассивСсылокКонтрагентов);
	
	Для Каждого Контрагент Из МассивСсылокКонтрагентов Цикл
		
		ДокументыКонтрагента = ДокументыКонтрагентов.НайтиСтроки(Новый Структура("Контрагент", Контрагент));
		КонтактыКонтрагента = КонтактыКонтрагентов.НайтиСтроки(Новый Структура("Контрагент", Контрагент));
		Головной = Головные.НайтиСтроки(Новый Структура("Контрагент", Контрагент));
		СтрокаКонтрагента = Контакты.Строки.НайтиСтроки(Новый Структура("Ссылка", Контрагент))[0];
		
		Если ЗначениеЗаполнено(Головной) Тогда
			ГоловнойСтрока = СтрокаКонтрагента.Строки.Добавить();
			ГоловнойСтрока.Наименование = СтрШаблон(НСтр("ru='%1 (Головной контрагент)'"), Головной[0].Наименование);
			ГоловнойСтрока.Ссылка = Головной[0].ГоловнойКонтрагент;
			ГоловнойСтрока.ВидКонтакта = 3;
			МассивВладельцевФайлов.Добавить(Головной[0].ГоловнойКонтрагент);
		КонецЕсли;
		
		Для Каждого Контакт Из КонтактыКонтрагента Цикл
			СтрокаКонтакта = СтрокаКонтрагента.Строки.Добавить();
			Контакт.Наименование = СтрШаблон(НСтр("ru='%1 (Связанный контакт)'"), Контакт.Наименование);
			ЗаполнитьЗначенияСвойств(СтрокаКонтакта, Контакт);
			СтрокаКонтакта.ВидКонтакта = 4;
			МассивВладельцевФайлов.Добавить(Контакт.Ссылка);
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ДокументыКонтрагента) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДокументов = СтрокаКонтрагента.Строки.Добавить();
		СтрокаДокументов.Наименование = НСтр("ru='Заказы и счета'");
		СтрокаДокументов.ВидКонтакта = -1;
		Для Каждого ДокументКонтрагента Из ДокументыКонтрагента Цикл
			СтрокаДокумента = СтрокаДокументов.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДокумента, ДокументКонтрагента);
			МассивВладельцевФайлов.Добавить(ДокументКонтрагента.Ссылка);
			СтрокаДокумента.ВидКонтакта = 8;
		КонецЦикла;
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСвязанныеПисьма(ДеревоПапок, МассивВладельцевФайлов)
	
	СтрокаСвязанныхПисем = ДеревоПапок.Строки.Добавить();
	УжеВСписке = Новый Соответствие;
	мДерево = ДеревоСтруктурыПодчиненности;
	
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда
		ДокументыУНФ.ЗаполнитьДеревоСтруктуройПодчинения(Документ.Ссылка, мДерево, УжеВСписке, Истина);
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	Для Каждого Ссылка Из УжеВСписке Цикл
		Если Ссылка.Ключ = Документ Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(Ссылка.Ключ) = Тип("ДокументСсылка.Событие") Тогда
			МассивСсылок.Добавить(Ссылка.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаСобытий = ТаблицаСобытийСТипами(МассивСсылок);
	МассивСсылок = Новый Массив;
	
	Для Каждого Событие Из ТаблицаСобытий Цикл
		Если Событие.ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
			СтрокаПисьма = СтрокаСвязанныхПисем.Строки.Добавить();
			СтрокаПисьма.Наименование = Событие.Представление;
			СтрокаПисьма.Ссылка = Событие.Ссылка;
			Если Событие.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
				СтрокаПисьма.ВидКонтакта = 13;
			Иначе 
				СтрокаПисьма.ВидКонтакта = 14;
			КонецЕсли;
			МассивСсылок.Добавить(СтрокаПисьма.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВладельцевФайлов, МассивСсылок);
	СтрокаСвязанныхПисем.Наименование = СтрШаблон(НСтр("ru='Связанные письма (%1)'"), СтрокаСвязанныхПисем.Строки.Количество());
	СтрокаСвязанныхПисем.ВидКонтакта = -1;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОснования(ДеревоПапок, Основания, МассивВладельцевФайлов)
	
	СтрокаОснований = ДеревоПапок.Строки.Добавить();
	СтрокаОснований.Наименование = СтрШаблон(НСтр("ru='Основания (%1)'"), Основания.Количество());
	СтрокаОснований.ВидКонтакта = -1;
	
	Для Каждого Основание Из Основания Цикл
		СтрокаОснование = СтрокаОснований.Строки.Добавить();
		СтрокаОснование.Наименование = Основание.Значение;
		СтрокаОснование.Ссылка = Основание.Значение;
		СтрокаОснование.ВидКонтакта = 8;
		МассивВладельцевФайлов.Добавить(Основание.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаНаличиеФайлов(ДеревоПапок, МассивВладельцевФайлов)
	
	ТаблицаПроверки = СписокДокументовСФайлами(МассивВладельцевФайлов);
	Для Каждого Значение Из ТаблицаПроверки Цикл
		
		Если Не Значение.ЕстьФайлы Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Ссылка", Значение.Ссылка);
		СтрокиПоПоиску = ДеревоПапок.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
		
		Для Каждого Строка Из СтрокиПоПоиску Цикл
			Строка.ЕстьФайлы = 1;
		КонецЦикла;
		
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция АдресВыбранныхФайловВХранилище(ВыделенныеДокументы)
	
	МассивФайлов = Новый Массив;
	Для Каждого ВладелецФайла Из ВыделенныеДокументы Цикл
		
		ФайлыПоВладельцу = ФайлыПоВладельцу(ВладелецФайла);
		Если ФайлыПоВладельцу = Неопределено ИЛИ ТипЗнч(ФайлыПоВладельцу) <> Тип("Массив") Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ФайлВладельца Из ФайлыПоВладельцу Цикл
			МассивФайлов.Добавить(ФайлВладельца);
		КонецЦикла;
	КонецЦикла;
	
	Результат = Новый Массив;
	Для Каждого ФайлВладельца Из МассивФайлов Цикл
		
		Если Не ЗначениеЗаполнено(ФайлВладельца.Ссылка) Тогда
			СтрокиПапки = ФайлВладельца.ПолучитьЭлементы();
			Для Каждого Строка Из СтрокиПапки Цикл
				Результат.Добавить(Строка.Ссылка);
			КонецЦикла;
		Иначе
			Результат.Добавить(ФайлВладельца.Ссылка);
		КонецЕсли;
	КонецЦикла;
		
	МассивВложений = Новый Массив;
	МассивПисемВложений = Новый Массив;
	Для Каждого Ссылка Из Результат Цикл
		ОписаниеВложения = Новый Структура("Данные, Расширение, Имя, Ссылка");
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(Ссылка);
		ЗаполнитьЗначенияСвойств(ОписаниеВложения, ДанныеФайла);
		ОписаниеВложения.Имя = ДанныеФайла.ИмяФайла;
		ОписаниеВложения.Вставить("Идентификатор", "");
		ОписаниеВложения.Данные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		
		Если ОписаниеВложения.Расширение = "eml" Тогда 
			ИнтернетПочтовоеСообщение = Новый ИнтернетПочтовоеСообщение;
			ИнтернетПочтовоеСообщение.УстановитьИсходныеДанные(ОписаниеВложения.Данные);
			ОписаниеВложения.Данные = ИнтернетПочтовоеСообщение;
			МассивПисемВложений.Добавить(ОписаниеВложения.Ссылка);
		КонецЕсли;
		
		МассивВложений.Добавить(ОписаниеВложения);
	КонецЦикла;
	
	ПолучитьСсылкуНаПисьмаИзБазы(МассивПисемВложений);
	Для Каждого ПисьмоСКарточкой Из МассивПисемВложений Цикл
		Для Каждого Вложение Из МассивВложений Цикл
			Если Не Вложение.Расширение = "eml" Тогда
				Продолжить;
			Иначе
				Если ПисьмоСКарточкой.Ссылка = Вложение.Ссылка Тогда
					Вложение.Вставить("Письмо", ПисьмоСКарточкой.Письмо);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Адрес = ПоместитьВоВременноеХранилище(МассивВложений);
	Возврат Адрес;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПолучитьСсылкуНаПисьмаИзБазы(МассивПисем)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныеПисьма.Письмо КАК Письмо,
	|	ВложенныеПисьма.ВложенноеПисьмо КАК ВложенноеПисьмо
	|ИЗ
	|	РегистрСведений.ВложенныеПисьма КАК ВложенныеПисьма
	|ГДЕ
	|	ВложенныеПисьма.ВложенноеПисьмо В(&Письма)";
	
	Запрос.УстановитьПараметр("Письма", МассивПисем);
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивПисемСКарточками = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураПисьмаВложения = Новый Структура("Ссылка, Письмо", Выборка.ВложенноеПисьмо, Выборка.Письмо);
		МассивПисемСКарточками.Добавить(СтруктураПисьмаВложения);
	КонецЦикла;
	
	МассивПисем = МассивПисемСКарточками;
КонецПроцедуры 

&НаСервере
Процедура ОчиститьСписокФайлов()
	
	Список = РеквизитФормыВЗначение("СписокФайлов");
	Список.Очистить();
	ЗначениеВРеквизитФормы(Список, "СписокФайлов");
	
КонецПроцедуры

&НаСервере
Функция КонтактыКонтрагентов(Контрагенты)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(СвязиКонтрагентКонтактСрезПоследних.Контакт) КАК Наименование,
	|	СвязиКонтрагентКонтактСрезПоследних.Контакт КАК Ссылка,
	|	СвязиКонтрагентКонтактСрезПоследних.Контрагент КАК Контрагент
	|ИЗ
	|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних КАК СвязиКонтрагентКонтактСрезПоследних
	|ГДЕ
	|	СвязиКонтрагентКонтактСрезПоследних.Контрагент В(&Контрагенты)
	|	И СвязиКонтрагентКонтактСрезПоследних.СвязьНедействительна = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Контрагенты", Контрагенты);
	ТаблицаКонтактов = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаКонтактов;
КонецФункции

&НаСервере
Функция СчетаИЗаказыКонтрагентов(Контрагенты);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ЗаказПокупателя.Ссылка) КАК Наименование,
	|	ЗаказПокупателя.Ссылка КАК Ссылка,
	|	ЗаказПокупателя.Дата КАК Дата,
	|	ЗаказПокупателя.Контрагент КАК Контрагент
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Контрагент В(&Контрагенты)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ЗаказПоставщику.Ссылка),
	|	ЗаказПоставщику.Ссылка,
	|	ЗаказПоставщику.Дата,
	|	ЗаказПоставщику.Контрагент
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Контрагент В(&Контрагенты)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(СчетНаОплату.Ссылка),
	|	СчетНаОплату.Ссылка,
	|	СчетНаОплату.Дата,
	|	СчетНаОплату.Контрагент
	|ИЗ
	|	Документ.СчетНаОплату КАК СчетНаОплату
	|ГДЕ
	|	СчетНаОплату.Контрагент В(&Контрагенты)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(СчетНаОплатуПоставщика.Ссылка),
	|	СчетНаОплатуПоставщика.Ссылка,
	|	СчетНаОплатуПоставщика.Дата,
	|	СчетНаОплатуПоставщика.Контрагент
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
	|ГДЕ
	|	СчетНаОплатуПоставщика.Контрагент В(&Контрагенты)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	Запрос.УстановитьПараметр("Контрагенты", Контрагенты);
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаДокументов;
	
КонецФункции

&НаСервере
Функция ГоловныеКонтрагенты(Контрагенты)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(Контрагенты.ГоловнойКонтрагент) КАК Наименование,
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.ГоловнойКонтрагент КАК ГоловнойКонтрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ГоловнойКонтрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)";
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаГоловных = РезультатЗапроса.Выгрузить();
	Возврат ТаблицаГоловных;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТаблицаСобытийСТипами(События)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Событие.Ссылка КАК Ссылка,
		|	Событие.ТипСобытия КАК ТипСобытия,
		|	Событие.Представление КАК Представление,
		|	Событие.ВходящееИсходящееСобытие КАК ВходящееИсходящееСобытие
		|ИЗ
		|	Документ.Событие КАК Событие
		|ГДЕ
		|	Событие.Ссылка В(&События)";
	
	Запрос.УстановитьПараметр("События", События);
	ТаблицаСобытий = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаСобытий;
КонецФункции

&НаСервере
Функция СписокДокументовСФайлами(Файлы)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(НаличиеФайлов.ОбъектСФайлами) КАК Наименование,
	|	НаличиеФайлов.ОбъектСФайлами КАК Ссылка,
	|	НаличиеФайлов.ЕстьФайлы КАК ЕстьФайлы
	|ИЗ
	|	РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
	|ГДЕ
	|	НаличиеФайлов.ОбъектСФайлами В(&Файлы)";
	Запрос.УстановитьПараметр("Файлы", Файлы);
	
	ТаблицаРезультатов = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаРезультатов
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоВладелецПрисоединенныхФайлов(Ссылка)
	Возврат Метаданные.ОпределяемыеТипы.ВладелецПрисоединенныхФайлов.Тип.СодержитТип(ТипЗнч(Ссылка));
КонецФункции

#КонецОбласти

#Область НастройкаВидимостьЭлементовФормы

&НаКлиенте
Процедура НастроитьВидимостьЭлементов(Найдено)
	
	Элементы.ТекстПредупреждение.Видимость = Не Найдено;
	Элементы.СписокФайлов.Видимость = Найдено;
	
КонецПроцедуры

#КонецОбласти
