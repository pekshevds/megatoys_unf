
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	АвторизованныйПользователь = Пользователи.АвторизованныйПользователь();
	УстановитьУсловноеОформление();
	УстановитьУсловноеОформлениеПоСостояниямСобытий();
	УстановитьОтборТекущиеДела();
	
	Если Параметры.Свойство("ТипСобытия") И Параметры.ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		ЗаполнитьПочтовыеЯщики();
		УстановитьОтборПоПочтовомуЯщикуНаСервере();
	КонецЕсли;
	
	Если Параметры.Свойство("Контакт") И ЗначениеЗаполнено(Параметры.Контакт) Тогда
		КонтекстКонтакт = Параметры.Контакт;
	КонецЕсли;

	УправлениеФормойСервер();
	
	ЕстьДоступКЛидам = ПравоДоступа("Чтение",Метаданные.Справочники.Лиды);
	Если НЕ ЕстьДоступКЛидам Тогда
		Список.Параметры.УстановитьЗначениеПараметра("НетДоступаКЛидам",Истина);
	КонецЕсли;
	
	Список.Параметры.УстановитьЗначениеПараметра("ОтборСпам", ОтборСпам);
	
	Если Элементы.СписокГруппаСоздать.Видимость Тогда
		Элементы.СписокГруппаСоздать.Видимость = ПравоДоступа("Добавление", Метаданные.Документы.Событие);
	КонецЕсли;
	
	УстановитьОтборПоКонтактам();
	
	Если Параметры.Свойство("ДокументОснование") И ЗначениеЗаполнено(Параметры.ДокументОснование) Тогда
		УстановитьОтборПоДокументОснование(Параметры.ДокументОснование);
	КонецЕсли;
	
	КонтекстноеОткрытие = Параметры.Свойство("ТекущиеДела") Или Параметры.Свойство("Контакт") Или Параметры.Свойство("ДокументОснование");
	
	// УНФ.ОтборыСписка
	РаботаСОтборами.ОпределитьПорядокПредопределенныхОтборов(ЭтотОбъект);
	// Конец УНФ.ОтборыСписка
	Если НЕ КонтекстноеОткрытие Тогда
		
		// УНФ.ОтборыСписка
		СтруктураИменПолейОтборов = Новый Структура("ОтборПериод", "НачалоСобытия");
		РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, Список,,,СтруктураИменПолейОтборов,ОтборТипСобытия);
		// Конец УНФ.ОтборыСписка
		
	ИначеЕсли ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		РаботаСОтборами.НастроитьПанельОтборовМобильныйКлиент(ЭтотОбъект,,,
			"ОтборКонтрагент,ОтборОтветственный,ОтборТипСобытия,ОтборСостояние,ОтборВажность,ОтборПроект,ОтборУчетнаяЗапись",,Истина);
		РаботаСОтборамиКлиентСервер.УстановитьОтображениеКомандыСброситьВсеОтборы(ЭтотОбъект);
	Иначе
		РаботаСОтборамиКлиентСервер.УстановитьОтображениеКомандыСброситьВсеОтборы(ЭтотОбъект);
	КонецЕсли;
	
	НастроитьГруппуПочтоваяСлужба();
	
	ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(ОтборПериод);
	
	// УНФ.ПанельКонтактнойИнформации
	КонтактнаяИнформацияПанельУНФ.ПриСозданииНаСервере(ЭтотОбъект, "КонтактнаяИнформация", "СписокКонтекстноеМеню");
	// Конец УНФ.ПанельКонтактнойИнформации
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	НапоминанияПользователяУНФ.УстановитьОтображениеКомандОрганайзера(Элементы);
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Элементы.Список.РежимВыбора = Параметры.РежимВыбора;
	ЭтаФорма.РежимОткрытияОкна = ?(Параметры.РежимВыбора,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца, РежимОткрытияОкнаФормы.Независимый);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаСоздатьЗапись", "Видимость", ПолучитьФункциональнуюОпцию("ПланироватьЗагрузкуРесурсовПредприятияЖурналЗаписи"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОтобразитьПочтовыеЯщикиПриОткрытии();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы И НЕ КонтекстноеОткрытие Тогда
		//УНФ.ОтборыСписка
		СохранитьНастройкиОтборов();
		//Конец УНФ.ОтборыСписка
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_СостоянияСобытий" Тогда
		УстановитьУсловноеОформлениеПоСостояниямСобытий();
	КонецЕсли;
	
	Если ИмяСобытия = ЭлектроннаяПочтаУНФКлиентСервер.ИмяСобытияУчетнаяЗаписьОбновлена() Тогда
		Если НЕ ПочтовыеСлужбыПодключены Тогда
			НастроитьГруппуПочтоваяСлужба();
			НачатьПроверкуПочтыНаКлиенте(ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиНовыеСообщения());
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьСеансовыеДанные" Тогда
		ОбработатьРезультатЗапросаТокена(Параметр, );
	КонецЕсли;
	
	ОбработкаОповещенияУчетныеЗаписи(ИмяСобытия, Параметр, Источник);
	ОбработкаОповещенияЗагруженыНовыеПисьма(ИмяСобытия, Параметр, Источник);
	
	// УНФ.ПанельКонтактнойИнформации
	Если КонтактнаяИнформацияПанельУНФКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьПанельКонтактнойИнформацииСервер();
	КонецЕсли;
	// Конец УНФ.ПанельКонтактнойИнформации
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	КонтактнаяИнформацияПанельУНФКлиент.ПриАктивизацииДинамическогоСписка(ЭтотОбъект, Элемент, ТекущееСобытие,
		"Ссылка");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("СозданиеФормы"
		+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	
	ЗаполняемоеЗначение = Новый Структура;
	Если Копирование Тогда
		ЗаполняемоеЗначение.Вставить("ТипСобытия", Элемент.ТекущиеДанные.ТипСобытия);
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.ТипСобытия)Тогда
		ЗаполняемоеЗначение.Вставить("ТипСобытия", Параметры.ТипСобытия);
	КонецЕсли;
	ПараметрыФормы = Новый Структура;
	
	Если ЗначениеЗаполнено(ОтборОснование) Тогда
		
		Отказ = Истина;
		
		ЗаполняемоеЗначение.Вставить("ОснованиеЗаполнения", ОтборОснование);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗаполняемоеЗначение);
		ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыФормы);
		
	ИначеЕсли ЗначениеЗаполнено(КонтекстКонтакт) Тогда
		
		Отказ = Истина;
		
		ЗаполняемоеЗначение.Вставить("ОснованиеЗаполнения", КонтекстКонтакт);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗаполняемоеЗначение);
		ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыФормы);
		
	Иначе
		
		ОтборПоКонтрагенту = ПолучитьОтборПоКонтрагенту();
		
		Если ОтборПоКонтрагенту <> Неопределено Тогда
			
			Отказ = Истина;
			
			ЗаполняемоеЗначение.Вставить("ОснованиеЗаполнения", ОтборПоКонтрагенту);
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗаполняемоеЗначение);
			ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыФормы);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормы"
		+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	ОбновитьСкрепку(Строки);
	ОбновитьСвойстваПрочитанныхПисем(Строки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСОтборамиКлиент.ПредставлениеПериодаВыбратьПериод(ЭтотОбъект, , "НачалоСобытия");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ОтборКонтакты = Новый Массив;
	ОтборКонтакты.Добавить(ВыбранноеЗначение);
	
	ДополнитьОтборПоКонтрагентуЛидами(ОтборКонтакты, КонтекстКонтакт);
	ДополнитьОтборПоКонтрагентуКонтактами(ОтборКонтакты, ВыбранноеЗначение);
	ДополнитьОтборАдресатамиПисем(ОтборКонтакты, ВыбранноеЗначение);
	
	УстановитьМеткуИОтборСписка("ТЧУчастники.Контакт", Элемент.Родитель.Имя, ОтборКонтакты, Строка(ВыбранноеЗначение));
	
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПропущенныеПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Неотвеченный", ОтборПропущенные, , ,
	ОтборПропущенные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСпамПриИзменении(Элемент)
	
	Список.Параметры.УстановитьЗначениеПараметра("ОтборСпам", ОтборСпам);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтветственныйОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Ответственный", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТипСобытияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("ТипСобытия", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Состояние", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВажностьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Важность", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПроектОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Проект", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборовНажатие(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПочтовыеЯщики

&НаКлиенте
Процедура ПочтовыеЯщикиПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.ПочтовыеЯщикиКонтекстноеМенюНастроитьПочтовыеЯщикиУчетнойЗаписи.Видимость = ЗначениеЗаполнено(Элемент.ТекущиеДанные.УчетнаяЗапись);
	ПодключитьОбработчикОжидания("УстановитьОтборПоПочтовомуЯщику", 0.3, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыеЯщикиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;
	
	СтрокаПочтовыеЯщики = ПочтовыеЯщики.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	ДоступноПеретаскивание = ТипЗнч(СтрокаПочтовыеЯщики.ПочтовыйЯщик) = Тип("СправочникСсылка.ПочтовыеЯщикиУчетныхЗаписей")
		И ЗначениеЗаполнено(СтрокаПочтовыеЯщики.ПочтовыйЯщик);
	Если ДоступноПеретаскивание Тогда
		Выполнение = Истина;
	Иначе
		Выполнение = Ложь;
	КонецЕсли;
	
	Если Не Выполнение Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПеретаскивания.Значение = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаПочтовыеЯщики.ПочтовыйЯщик);
	
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыеЯщикиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Строка = Неопределено Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	СтрокаПочтовыеЯщики = ПочтовыеЯщики.НайтиПоИдентификатору(Строка);
	ДоступноПеретаскивание = ТипЗнч(СтрокаПочтовыеЯщики.ПочтовыйЯщик) = Тип("СправочникСсылка.ПочтовыеЯщикиУчетныхЗаписей")
		И ЗначениеЗаполнено(СтрокаПочтовыеЯщики.ПочтовыйЯщик);
	Если Не ДоступноПеретаскивание Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыеЯщикиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив")
		Или ПараметрыПеретаскивания.Значение.Количество() = 0
		Или ТипЗнч(ПараметрыПеретаскивания.Значение[0]) <> Тип("ДокументСсылка.Событие")Тогда
		Возврат;
	КонецЕсли;
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПочтовыеЯщики = ПочтовыеЯщики.НайтиПоИдентификатору(Строка);
	ДоступноПеретаскивание = ТипЗнч(СтрокаПочтовыеЯщики.ПочтовыйЯщик) = Тип("СправочникСсылка.ПочтовыеЯщикиУчетныхЗаписей")
		И ЗначениеЗаполнено(СтрокаПочтовыеЯщики.ПочтовыйЯщик);
	Если Не ДоступноПеретаскивание Тогда
		Возврат;
	КонецЕсли;
	
	ПоместитьПисьмаВПочтовыйЯщикНаСервере(ПараметрыПеретаскивания.Значение, СтрокаПочтовыеЯщики.ПочтовыйЯщик);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьСобытие(Команда)
	
	ЗаполняемоеЗначение = Новый Структура;
	ЗаполняемоеЗначение.Вставить("ТипСобытия", ПредопределенноеЗначение("Перечисление.ТипыСобытий." + Сред(Команда.Имя, 8)));
	Если ЗначениеЗаполнено(ОтборОснование) Тогда
		ЗаполняемоеЗначение.Вставить("ОснованиеЗаполнения", ОтборОснование);
	ИначеЕсли ЗначениеЗаполнено(КонтекстКонтакт) Тогда
		ЗаполняемоеЗначение.Вставить("ОснованиеЗаполнения", КонтекстКонтакт);
	Иначе
		ЗаполняемоеЗначение.Вставить("ОснованиеЗаполнения", Новый Структура);
		Если ЗначениеЗаполнено(ОтборОтветственный) Тогда
			ЗаполняемоеЗначение.ОснованиеЗаполнения.Вставить("Ответственный", ОтборОтветственный);
		КонецЕсли;
		Если ЗначениеЗаполнено(ОтборСостояние) Тогда
			ЗаполняемоеЗначение.ОснованиеЗаполнения.Вставить("Состояние", ОтборСостояние);
		КонецЕсли;
		ОтборПоКонтрагенту = ПолучитьОтборПоКонтрагенту();
		Если ЗначениеЗаполнено(ОтборПоКонтрагенту) Тогда
			ЗаполняемоеЗначение.ОснованиеЗаполнения.Вставить("Контакт", ОтборПоКонтрагенту);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗаполняемоеЗначение);
	Если ЗначениеЗаполнено("КонтекстКонтакт") Тогда
		ПараметрыФормы.Вставить("КонтекстКонтакт", КонтекстКонтакт);
	КонецЕсли;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗаполняемоеЗначение);
	
	ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьКакПрочтенныеНепрочтенные(Команда)
	
	ВыделенныеСобытия = ВыделенныеСобытия();
	Если ВыделенныеСобытия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПометитьКакПрочтенныеНепрочтенныеНаСервере(ВыделенныеСобытия);
	ОповеститьОбИзменении(Тип("ДокументСсылка.Событие"));
	Если ВыделенныеСобытия.Количество() > 1 Тогда
		ЗаголовокОповещения = НСтр("ru = 'Установлена прочитанность писем'");
		ПоказатьОповещениеПользователя(ЗаголовокОповещения,,, БиблиотекаКартинок.Информация32);
	Иначе
		ЗаголовокОповещения = НСтр("ru = 'Установлена прочитанность письма'");
		ПоказатьОповещениеПользователя(ЗаголовокОповещения,
			ПолучитьНавигационнуюСсылку(ВыделенныеСобытия[0]), ВыделенныеСобытия[0], БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьКакСпамНеСпам(Команда)
	
	ВыделенныеСобытия = ВыделенныеСобытия();
	Если ВыделенныеСобытия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПометитьКакСпамНеСпамНаСервереБезКонтекста(ВыделенныеСобытия);
	ОповеститьОбИзменении(Тип("ДокументСсылка.Событие"));
	
КонецПроцедуры

&НаКлиенте
Процедура Ответить(Команда)
	
	ОтветитьПереслать(ЭлектроннаяПочтаУНФКлиентСервер.КомандаОтветить());
	
КонецПроцедуры

&НаКлиенте
Процедура Переслать(Команда)
	
	ОтветитьПереслать(ЭлектроннаяПочтаУНФКлиентСервер.КомандаПереслать());
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьВсем(Команда)
	
	ОтветитьПереслать(ЭлектроннаяПочтаУНФКлиентСервер.КомандаОтветитьВсем());
	
КонецПроцедуры

&НаКлиенте
Процедура ВажностьВысокая(Команда)
	
	УстановитьВажность("Высокая");
	
КонецПроцедуры

&НаКлиенте
Процедура ВажностьНормальная(Команда)
	
	УстановитьВажность("Нормальная");
	
КонецПроцедуры

&НаКлиенте
Процедура ВажностьНизкая(Команда)
	
	УстановитьВажность("Низкая");

КонецПроцедуры

&НаКлиенте
Процедура НастройкаФормы(Команда)
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзменениеНастроекФормы", ЭтотОбъект);
	ОткрытьФорму("Документ.Событие.Форма.ФормаНастройкаСписка",,,,,,ОповещениеОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьУчетныеЗаписи(Команда)
	ОткрытьФорму("РегистрСведений.УчетныеЗаписиПользователя.Форма.НастройкаУчетныхЗаписейПользователя");
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПочтовыеЯщикиУчетнойЗаписи(Команда)
	ПараметрыФормы = Новый Структура("УчетнаяЗапись", Элементы.ПочтовыеЯщики.ТекущиеДанные.УчетнаяЗапись);
	ОткрытьФорму("РегистрСведений.НастройкиЗагрузкиПисем.Форма.ФормаНастройки",  ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ПереслатьПисьмоКакВложение(Команда)
	Результат = ПолучитьДанныеПисемДляВложения(
	Элементы.Список.ВыделенныеСтроки);
	ТипСобытия = Результат.ТипСобытия;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ТипСобытия", ТипСобытия);
	ЗначенияЗаполнения.Вставить("АдресВременногоХранилища", Результат.Адрес);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьИзменениеНастроекФормы(Результат, ДополнительныеПараметры) Экспорт
	УстановитьНастройкиСпискаПисем();
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьПереслать(ПараметрКоманды)
	
	Если Элементы.Список.ТекущиеДанные.Ссылка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееПисьмо = Элементы.Список.ТекущиеДанные.Ссылка;
	РеквизитыСобытия = РеквизитыСобытияПисьма(ТекущееПисьмо);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", Новый Структура);
	ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("Команда", ПараметрКоманды);
	ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("ТипСобытия", ПредопределенноеЗначение("Перечисление.ТипыСобытий.ЭлектронноеПисьмо"));
	ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("ОснованиеЗаполнения", ТекущееПисьмо);
	ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("ПараметрыОснования", Новый Структура);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("Ссылка", ТекущееПисьмо);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("НачалоСобытия", РеквизитыСобытия.НачалоСобытия);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("СписокУчастников", РеквизитыСобытия.СписокУчастников);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("ОтКого", РеквизитыСобытия.ОтКого);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("Тема", РеквизитыСобытия.Тема);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("Содержание", РеквизитыСобытия.Содержание);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("СодержаниеHTML", РеквизитыСобытия.СодержаниеHTML);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("КартинкиHTML", РеквизитыСобытия.КартинкиHTML);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("ИсточникПривлечения", РеквизитыСобытия.ИсточникПривлечения);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("ЗагрузитьПриОткрытии", РеквизитыСобытия.ЗагрузитьПриОткрытии);
	
	ВложенияСобытия = РеквизитыСобытия.Вложения;
	Если ПараметрКоманды = ЭлектроннаяПочтаУНФКлиентСервер.КомандаПереслать()
		И ВложенияСобытия.Количество() Тогда
		
		ПараметрыОткрытия.Вставить("Вложения", Новый СписокЗначений);
		Для Каждого ТекВложение Из ВложенияСобытия Цикл
			ПараметрыОткрытия.Вложения.Добавить(ТекВложение.АдресВоВременномХранилище, ТекВложение.Представление);
		КонецЦикла;
		
	КонецЕсли;
		
	ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

&НаСервере
Функция РеквизитыСобытияПисьма(Письмо)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Событие.Ссылка КАК Ссылка,
		|	Событие.ТипСобытия КАК ТипСобытия,
		|	Событие.НачалоСобытия КАК НачалоСобытия,
		|	Событие.СписокУчастников КАК СписокУчастников,
		|	Событие.Тема КАК Тема,
		|	Событие.Содержание КАК Содержание,
		|	Событие.СодержаниеHTML КАК СодержаниеHTML,
		|	Событие.КартинкиHTML КАК КартинкиHTML,
		|	Событие.ИсточникПривлечения КАК ИсточникПривлечения,
		|	Событие.ЗагрузитьПриОткрытии КАК ЗагрузитьПриОткрытии,
		|	Событие.УчетнаяЗапись КАК УчетнаяЗапись,
		|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
		|	ЕСТЬNULL(СвязиАдресатКонтактCRM.КонтактCRM, СобытиеУчастники.Контакт) КАК КонтактCRM,
		|	СобытиеУчастники.ТипПолучателяЭлектронногоПисьма КАК ТипПолучателяЭлектронногоПисьма,
		|	СобытиеУчастники.КакСвязаться КАК КакСвязаться
		|ИЗ
		|	Документ.Событие КАК Событие
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Событие.Участники КАК СобытиеУчастники
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиАдресатКонтактCRM КАК СвязиАдресатКонтактCRM
		|			ПО СобытиеУчастники.Контакт = СвязиАдресатКонтактCRM.Адресат
		|		ПО Событие.Ссылка = СобытиеУчастники.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
		|		ПО Событие.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
		|ГДЕ
		|	Событие.Ссылка = &Ссылка
		|ИТОГИ
		|	МАКСИМУМ(АдресЭлектроннойПочты)
		|ПО
		|	Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Письмо);
	
	Результат = Новый Структура;
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);;
	Если Выборка.Следующий() Тогда
		
		Результат.Вставить("Ссылка", Выборка.Ссылка);
		Результат.Вставить("ТипСобытия", Выборка.ТипСобытия);
		Результат.Вставить("НачалоСобытия", Выборка.НачалоСобытия);
		Результат.Вставить("СписокУчастников", Выборка.СписокУчастников);
		Результат.Вставить("Тема", Выборка.Тема);
		Результат.Вставить("Содержание", Выборка.Содержание);
		Результат.Вставить("СодержаниеHTML", Выборка.СодержаниеHTML);
		Результат.Вставить("КартинкиHTML", Выборка.КартинкиHTML);
		Результат.Вставить("ИсточникПривлечения", Выборка.ИсточникПривлечения);
		Результат.Вставить("ЗагрузитьПриОткрытии", Выборка.ЗагрузитьПриОткрытии);
		
		ОтКого = Неопределено;
		
		ВыборкаКонтактов = Выборка.Выбрать();
		Пока ВыборкаКонтактов.Следующий() Цикл
			
			Если ВыборкаКонтактов.ТипПолучателяЭлектронногоПисьма =
				ПредопределенноеЗначение("Перечисление.ТипыПолучателейЭлектронногоПисьма.ОтКого") Тогда
				
				ОтКого = СтрШаблон("%1 <%2>", ВыборкаКонтактов.КонтактCRM, ВыборкаКонтактов.КакСвязаться);
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОтКого = Неопределено Тогда
			ОтКого = СтрШаблон("%1 <%2>", Выборка.УчетнаяЗапись, Выборка.АдресЭлектроннойПочты);
		КонецЕсли;
		
		Результат.Вставить("ОтКого", ОтКого);
		
	КонецЕсли;
	
	ВложенияСобытия = Документы.Событие.ВложенияСобытия(Письмо, УникальныйИдентификатор);
	Результат.Вставить("Вложения", ВложенияСобытия);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьОтборАдресатамиПисем(Отбор, Контакт)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СвязиАдресатКонтактCRM.Адресат КАК СсылкаКакСвязаться
	|ИЗ
	|	РегистрСведений.СвязиАдресатКонтактCRM КАК СвязиАдресатКонтактCRM
	|ГДЕ
	|	СвязиАдресатКонтактCRM.КонтактCRM В(&ОтборКонтакт)";
	
	Запрос.УстановитьПараметр("ОтборКонтакт", Отбор);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Отбор.Добавить(Выборка.СсылкаКакСвязаться);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	МетаданныеСобытия = Метаданные.НайтиПоТипу(Тип("ДокументСсылка.Событие"));
	
	УсловноеОформление.Элементы.Очистить();
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Список.ЭтоЗвонок", Истина, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.СписокОкончаниеСобытия.Имя);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Формат", "ДФ='Ч:мм:сс'; ДП=0:00:00");
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Список.ЭтоЗвонок", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.СписокОкончаниеСобытия.Имя);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Формат", МетаданныеСобытия.Реквизиты.ОкончаниеСобытия.Формат);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПоСостояниямСобытий()
	
	// Раскраска списка
	СписокУдаляемыхЭлементов = Новый СписокЗначений;
	Для каждого ЭлементУсловногоОформления Из Список.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный" Тогда
			СписокУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	Для каждого Элемент Из СписокУдаляемыхЭлементов Цикл
		Список.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Удалить(Элемент.Значение);
	КонецЦикла;
	
	ВыборкаСостоянияСобытия = Справочники.СостоянияСобытий.Выбрать();
	Пока ВыборкаСостоянияСобытия.Следующий() Цикл
		
		ЦветФона = ВыборкаСостоянияСобытия.Цвет.Получить();
		Если ТипЗнч(ЦветФона) <> Тип("Цвет") Тогда
			Продолжить;
		КонецЕсли; 
		
		ЭлементУсловногоОформления = Список.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Состояние");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ВыборкаСостоянияСобытия.Ссылка;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветФона);
		ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный";
		ЭлементУсловногоОформления.Представление = "По состоянию события " + ВыборкаСостоянияСобытия.Наименование;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборТекущиеДела()
	
	Если НЕ Параметры.Свойство("ТекущиеДела") Тогда
		Возврат;
	КонецЕсли;
	
	АвтоЗаголовок = Ложь;
	Заголовок = НСтр("ru='События'");
	ТекДата = ТекущаяДатаСеанса();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"ПометкаУдаления",
		Ложь);
	
	СписокСостояний = Новый Массив;
	СписокСостояний.Добавить(Справочники.СостоянияСобытий.Отменено);
	СписокСостояний.Добавить(Справочники.СостоянияСобытий.Завершено);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостоянияСобытий.Ссылка
		|ИЗ
		|	Справочник.СостоянияСобытий КАК СостоянияСобытий
		|ГДЕ
		|	СостоянияСобытий.ПометкаУдаления = ЛОЖЬ
		|	И НЕ СостоянияСобытий.Ссылка В(&СписокСостояний)";
	
	Запрос.УстановитьПараметр("СписокСостояний", СписокСостояний);
	Выборка = Запрос.Выполнить().Выбрать();
	СписокСостояний.Очистить();
	
	Пока Выборка.Следующий() Цикл
		СписокСостояний.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	СотрудникиПользователя = РегистрыСведений.СотрудникиПользователя.ПолучитьСотрудниковПользователя();
	
	РаботаСОтборами.ПрикрепитьМеткиОтбораИзМассива(ЭтотОбъект, "Состояние", "Состояния", СписокСостояний);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, "Состояние");
	
	РаботаСОтборами.ПрикрепитьМеткиОтбораИзМассива(ЭтотОбъект, "Ответственный", "Ответственные", СотрудникиПользователя);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, "Ответственный");
	
	Если Параметры.Свойство("ПросроченоВыполнение") Тогда
		
		Заголовок = Заголовок + ": " + НСтр("ru='просрочено выполнение'");
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"НачалоСобытия",
			'00010101',
			ВидСравненияКомпоновкиДанных.НеРавно);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"ОкончаниеСобытия",
			НачалоДня(ТекДата),
			ВидСравненияКомпоновкиДанных.Меньше);
		Элементы.ПредставлениеПериода.Видимость = Ложь;
		
	ИначеЕсли Параметры.Свойство("НаСегодня") Тогда
		
		Заголовок = Заголовок + ": " + НСтр("ru='на сегодня'");
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"НачалоСобытия",
			КонецДня(ТекДата),
			ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"ОкончаниеСобытия",
			НачалоДня(ТекДата),
			ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		Элементы.ПредставлениеПериода.Видимость = Ложь;
		
	ИначеЕсли Параметры.Свойство("ВРаботе") Тогда
		
		Заголовок = Заголовок + ": " + НСтр("ru='в работе'");
		
	КонецЕсли;
	
	Если Элементы.ПредставлениеПериода.Видимость Тогда
		ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(ОтборПериод);
	КонецЕсли;
	
	РаботаСОтборами.ОбновитьЭлементыМеток(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоКонтактам()
	
	Если Не ЗначениеЗаполнено(КонтекстКонтакт) Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ОтборУчастники", Ложь);
		Список.Параметры.УстановитьЗначениеПараметра("ОтобранныеКонтакты", Новый Массив);
		Возврат;
	КонецЕсли;
	
	ОтборКонтакты = Новый Массив;
	ОтборКонтакты.Добавить(КонтекстКонтакт);
	
	Если ТипЗнч(КонтекстКонтакт) = Тип("СправочникСсылка.Контрагенты") Тогда
		ДополнитьОтборПоКонтрагентуЛидами(ОтборКонтакты, КонтекстКонтакт);
		ДополнитьОтборПоКонтрагентуКонтактами(ОтборКонтакты, КонтекстКонтакт);
	КонецЕсли;
	
	Если ТипЗнч(КонтекстКонтакт) = Тип("СправочникСсылка.Лиды") Тогда
		ДополнитьОтборПоЛидуКонтактамиЛида(ОтборКонтакты, КонтекстКонтакт);
	КонецЕсли;
	
	ДополнитьОтборАдресатамиПисем(ОтборКонтакты, КонтекстКонтакт);
	
	Список.Параметры.УстановитьЗначениеПараметра("ОтборУчастники", Истина);
	Список.Параметры.УстановитьЗначениеПараметра("ОтобранныеКонтакты", ОтборКонтакты);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьОтборПоКонтрагентуЛидами(Отбор, Контрагент)
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Справочники.Лиды) Тогда
		Возврат;
	КонецЕсли;
	
	ЛидОснование = Справочники.Контрагенты.ЛидОснование(Контрагент);
	
	Если НЕ ЗначениеЗаполнено(ЛидОснование) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор.Добавить(ЛидОснование);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьОтборПоКонтрагентуКонтактами(Отбор, Контрагент)
	
	СвязанныеКонтакты = Справочники.Контрагенты.СвязанныеКонтакты(Контрагент);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Отбор, СвязанныеКонтакты);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьОтборПоЛидуКонтактамиЛида(ОтборКонтакты, КонтекстКонтакт);
	
	КонтактыЛида = Справочники.КонтактыЛидов.КонтактыЛида(КонтекстКонтакт);
	Для Каждого Контакт Из КонтактыЛида Цикл
		ОтборКонтакты.Добавить(Контакт.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоДокументОснование(ДокументОснование)
	
	ОтборОснование = ДокументОснование;
	СобытияОснования = СобытияОснованияДокумента(ОтборОснование);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ДокументОснование", ОтборОснование);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "СобытияОснования", СобытияОснования);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОтборПоКонтрагенту()
	
	НайденныеСтроки = ДанныеМеток.НайтиСтроки(Новый Структура("ИмяПоляОтбора", "ТЧУчастники.Контакт"));
	ОтборПоКонтрагенту = Неопределено;
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если ТипЗнч(НайденнаяСтрока.Метка) = Тип("СписокЗначений") Тогда
			Для Каждого ЭлементСписка Из НайденнаяСтрока.Метка Цикл
				Если ТипЗнч(ЭлементСписка.Значение) = Тип("СправочникСсылка.Контрагенты") Тогда
					ОтборПоКонтрагенту = ЭлементСписка.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОтборПоКонтрагенту;
	
КонецФункции

&НаСервере
Функция СобытияОснованияДокумента(Документ)
	
	МетаданныеДокумента = Документ.Метаданные();
	СобытияОснования = Новый СписокЗначений;
	
	Для Каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл
		Если НЕ Реквизит.Тип.СодержитТип(Тип("ДокументСсылка.Событие")) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеРеквизита = Документ[Реквизит.Имя];
		Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СобытияОснования.НайтиПоЗначению(ЗначениеРеквизита) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СобытияОснования.Добавить(ЗначениеРеквизита);
	КонецЦикла;
	
	Для Каждого ТЧ Из МетаданныеДокумента.ТабличныеЧасти Цикл
		
		СтрРеквизитов = "";
		Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
			Если НЕ Реквизит.Тип.СодержитТип(Тип("ДокументСсылка.Событие")) Тогда
				Продолжить;
			КонецЕсли;
			СтрРеквизитов = СтрРеквизитов + ?(СтрРеквизитов = "", "", ", ") + Реквизит.Имя;
		КонецЦикла;
		
		Если СтрРеквизитов = "" Тогда
			Продолжить;
		КонецЕсли;
		
		СодержимоеТЧ = Документ[ТЧ.Имя].Выгрузить(,СтрРеквизитов);
		СодержимоеТЧ.Свернуть(СтрРеквизитов);
		Для Каждого КолонкаТЧ Из СодержимоеТЧ.Колонки Цикл
			Для Каждого СтрокаТЧ Из СодержимоеТЧ Цикл
				ЗначениеРеквизита = СтрокаТЧ[КолонкаТЧ.Имя];
				Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
					Продолжить;
				КонецЕсли;
				Если СобытияОснования.НайтиПоЗначению(ЗначениеРеквизита) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				СобытияОснования.Добавить(ЗначениеРеквизита);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СобытияОснования;
	
КонецФункции

&НаКлиенте
Процедура УправлениеФормой()
	
	Элементы.Контрагенты.Видимость = НЕ ЗначениеЗаполнено(КонтекстКонтакт);
	
	Элементы.ОтборПропущенные.Видимость = ОтборТипСобытия = ПредопределенноеЗначение("Перечисление.ТипыСобытий.ТелефонныйЗвонок")
		И ОтборВходящееИсходящее = ПредопределенноеЗначение("Перечисление.ВходящееИсходящееСобытие.Входящее");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьСкрепку(СтрокиСписка)
	
	Если СтрокиСписка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтключенаКолонкаЕстьФайлы(СтрокиСписка) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НаличиеФайлов.ОбъектСФайлами КАК Событие,
	|	НаличиеФайлов.ЕстьФайлы КАК ЕстьФайлы
	|ИЗ
	|	РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
	|ГДЕ
	|	НаличиеФайлов.ОбъектСФайлами В(&События)
	|	И НаличиеФайлов.ЕстьФайлы");
	Запрос.УстановитьПараметр("События", СтрокиСписка.ПолучитьКлючи());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если СтрокиСписка[Выборка.Событие].Данные.Свойство("ЕстьФайлы") Тогда
			СтрокиСписка[Выборка.Событие].Данные.ЕстьФайлы = 1;
		КонецЕсли;
		
		Если СтрокиСписка[Выборка.Событие].Данные.Свойство("ЕстьФайлыСписокПисем") Тогда
			СтрокиСписка[Выборка.Событие].Данные.ЕстьФайлыСписокПисем = 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтключенаКолонкаЕстьФайлы(СтрокиСписка)
	
	Для Каждого ТекСтрока Из СтрокиСписка Цикл
		Возврат НЕ ТекСтрока.Значение.Данные.Свойство("ЕстьФайлы")
			И НЕ ТекСтрока.Значение.Данные.Свойство("ЕстьФайлыСписокПисем");
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбновитьСвойстваПрочитанныхПисем(СтрокиСписка)
	
	Если СтрокиСписка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ФлагиПисем.Событие КАК Событие,
	|	ФлагиПисем.Непрочитанное КАК Непрочитанное
	|ИЗ
	|	РегистрСведений.ФлагиПисем КАК ФлагиПисем
	|ГДЕ
	|	ФлагиПисем.Событие В(&События)");
	Запрос.УстановитьПараметр("События", СтрокиСписка.ПолучитьКлючи());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Непрочитанное Тогда
			СтрокаСписка = СтрокиСписка[Выборка.Событие];
			СтрокаСписка.Данные.Непрочитанное = Выборка.Непрочитанное;
			Для Каждого ТекЯчейка Из СтрокаСписка.Оформление Цикл
				ТекЯчейка.Значение.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,Истина));
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ВыделенныеСобытия()
	
	ВыделенныеСобытия = Новый Массив;
	Для каждого Строка Из Элементы.Список.ВыделенныеСтроки Цикл
		ТекущаяСтрока = Элементы.Список.ДанныеСтроки(Строка);
		Если ТекущаяСтрока <> Неопределено Тогда
			ВыделенныеСобытия.Добавить(ТекущаяСтрока.Ссылка);
		КонецЕсли;
	КонецЦикла;
	Возврат ВыделенныеСобытия;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеПисемДляВложения(Знач Письма)
	
	ПисьмаФайлами = ЭлектроннаяПочтаУНФ.ИнтернетПочтовыеСообщенияПисем(Письма);
	
	СтруктураВложений = Новый Структура;
	СтруктураВложений.Вставить("Вложения", ПисьмаФайлами);
	
	Адрес = ПоместитьВоВременноеХранилище(СтруктураВложений);
	
	СтруктураРезультата = Новый Структура("ТипСобытия, Адрес");
	СтруктураРезультата.ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо;
	СтруктураРезультата.Адрес = Адрес;
	
	Возврат СтруктураРезультата;
КонецФункции

#КонецОбласти

#Область ПанельКонтактнойИнформации

// УНФ.ПанельКонтактнойИнформации
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбработатьАктивизациюСтрокиСписка()
	
	ОбновитьПанельКонтактнойИнформацииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПанельКонтактнойИнформацииСервер()
	
	Если НЕ ЗначениеЗаполнено(ТекущееСобытие) Тогда
		КонтактнаяИнформацияПанельУНФ.ОбновитьДанныеПанели(ЭтотОбъект, ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Документ.Событие.Участники КАК СобытиеУчастники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиАдресатКонтактCRM КАК СвязиАдресатКонтактCRM
	|		ПО (СвязиАдресатКонтактCRM.Адресат = СобытиеУчастники.Контакт)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО (СобытиеУчастники.Контакт = Контрагенты.Ссылка
	|				ИЛИ СвязиАдресатКонтактCRM.КонтактCRM = Контрагенты.Ссылка)
	|ГДЕ
	|	СобытиеУчастники.Ссылка = &Событие";
	
	Запрос.УстановитьПараметр("Событие", ТекущееСобытие);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТекущийВладелецКИ = Выборка.Контрагент;
	Иначе
		ТекущийВладелецКИ = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	КонтактнаяИнформацияПанельУНФ.ОбновитьДанныеПанели(ЭтотОбъект, ТекущийВладелецКИ);
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	КонтактнаяИнформацияПанельУНФКлиент.ДанныеПанелиКонтактнойИнформацииВыбор(ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииПриАктивизацииСтроки(Элемент)
	
	КонтактнаяИнформацияПанельУНФКлиент.ДанныеПанелиКонтактнойИнформацииПриАктивизацииСтроки(ЭтотОбъект, Элемент);
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииВыполнитьКоманду(Команда)
	
	КонтактнаяИнформацияПанельУНФКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, ТекущийВладелецКИ);
	
КонецПроцедуры
// Конец УНФ.ПанельКонтактнойИнформации

#КонецОбласти

#Область Отборы

&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения = "" Тогда
		ПредставлениеЗначения = Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, ИмяПоляОтбораСписка);
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_") + 1);
	УдалитьМеткуОтбора(МеткаИД);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, Список, МеткаИД);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект,,, ОтборТипСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтборы(Команда)
	
	ИмяРеквизитаСписка = "Список";
	ИмяТЧДанныеМеток = "ДанныеМеток";
	ИмяТЧДанныеОтборов = "ДанныеОтборов";
	ИмяГруппыОтборов = "ГруппаОтборы";
	ИмяПредопределенныеОтборыПоУмолчанию = "ПредопределенныеОтборыПоУмолчанию";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРеквизитаСписка", ИмяРеквизитаСписка);
	ДополнительныеПараметры.Вставить("ИмяТЧДанныеМеток", ИмяТЧДанныеМеток);
	ДополнительныеПараметры.Вставить("ИмяТЧДанныеОтборов", ИмяТЧДанныеОтборов);
	ДополнительныеПараметры.Вставить("ИмяГруппыОтборов", ИмяГруппыОтборов);
	ДополнительныеПараметры.Вставить("ИмяПредопределенныеОтборыПоУмолчанию", ИмяПредопределенныеОтборыПоУмолчанию);
	
	ОтборыДляИсключения = Новый Массив;
	ОтборыДляИсключения.Добавить("Просмотрено");
	ОтборыДляИсключения.Добавить("Неотвеченный");
	ДополнительныеПараметры.Вставить("ОтборыДляИсключения", ОтборыДляИсключения);
	
	РаботаСОтборамиКлиент.НастроитьОтборыНажатие(ЭтотОбъект, ПараметрыОткрытияФормыСНастройкамиОтборов(ДополнительныеПараметры), ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыОткрытияФормыСНастройкамиОтборов(ДополнительныеПараметры)
	
	Возврат РаботаСОтборами.ПараметрыДляОткрытияФормыСНастройкамиОтборов(ЭтотОбъект, ДополнительныеПараметры);
	
КонецФункции

&НаКлиенте
Процедура НастройкаОтборовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОтборовЗавершениеНаСервере(Результат.АдресВыбранныеОтборы, Результат.АдресУдаленныеОтборы, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура НастройкаОтборовЗавершениеНаСервере(АдресВыбранныеОтборы, АдресУдаленныеОтборы, ДополнительныеПараметры)
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ИмяРеквизитаСписка = "Список";
		ИмяТЧДанныеМеток = "ДанныеМеток";
		ИмяТЧДанныеОтборов = "ДанныеОтборов";
	Иначе
		ИмяРеквизитаСписка = ДополнительныеПараметры.ИмяРеквизитаСписка;
		ИмяТЧДанныеМеток = ДополнительныеПараметры.ИмяТЧДанныеМеток;
		ИмяТЧДанныеОтборов = ДополнительныеПараметры.ИмяТЧДанныеОтборов;
	КонецЕсли;
	
	РаботаСОтборами.НастройкаОтборовЗавершение(ЭтотОбъект, АдресВыбранныеОтборы, АдресУдаленныеОтборы, ДополнительныеПараметры);
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОтборПриИзменении(Элемент)
	
	Подключаемый_ОтборПриИзмененииНаСервере(Элемент.Имя, Элемент.Родитель.Имя)
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОтборПриИзмененииНаСервере(ЭлементИмя, ЭлементРодительИмя)
	
	РаботаСОтборами.Подключаемый_ОтборПриИзменении(ЭтотОбъект, ЭлементИмя, ЭлементРодительИмя);
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОтборОчистка(Элемент)
	
	Подключаемый_ОтборОчисткаНаСервере(Элемент.Имя, Элемент.Родитель.Имя)
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОтборОчисткаНаСервере(ЭлементИмя, ЭлементРодительИмя)
	
	РаботаСОтборами.Подключаемый_ОтборОчистка(ЭтотОбъект, ЭлементИмя);

КонецПроцедуры

&НаКлиенте
Процедура СброситьВсеОтборы(Команда)
	РаботаСОтборамиКлиент.СброситьОтборПоПериоду(ЭтотОбъект, , "НачалоСобытия");
	СброситьВсеМеткиОтбораНаСервере();
КонецПроцедуры

&НаСервере
Процедура СброситьВсеМеткиОтбораНаСервере()
	РаботаСОтборами.УдалитьМеткиОтбораСервер(ЭтотОбъект, Список);
КонецПроцедуры

#КонецОбласти

#Область ЭлектроннаяПочтаУНФ

&НаКлиенте
Процедура ОтборВходящееИсходящееПриИзменении(Элемент)
	
	УстановитьОтборВходящееИсходящее();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборУчетнаяЗаписьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("УчетнаяЗапись", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПриОшибкеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "повторить" Тогда
		
		СтандартнаяОбработка = Ложь;
		НачатьПроверкуПочтыНаКлиенте(РежимЗагрузки);
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПочту(Команда)
	
	Если Не ПочтовыеСлужбыПодключены Тогда
		Возврат;
	КонецЕсли;
	
	НачатьПроверкуПочтыНаКлиенте(ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиНовыеСообщения());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПредыдущиеПисьма(Команда)
	
	Если Не ПочтовыеСлужбыПодключены Тогда
		Возврат;
	КонецЕсли;
	
	НачатьПроверкуПочтыНаКлиенте(ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиПредыдущиеСообщения());
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьПочтовуюСлужбуОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "IMAP" Тогда
		ОткрытьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.ФормаОбъекта");
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Gmail" Тогда
		НачатьАвторизацию();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборВходящееИсходящее()
	
	Если ЗначениеЗаполнено(ОтборВходящееИсходящее) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ВходящееИсходящее",
			ОтборВходящееИсходящее);
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "ВходящееИсходящее");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьГруппуПочтоваяСлужба()
	
	Если ЗначениеЗаполнено(Параметры.ТипСобытия)
		И Параметры.ТипСобытия <> Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		Возврат;
	КонецЕсли;
	
	ПочтовыеСлужбыПодключены = РегистрыСведений.УчетныеЗаписиПользователя.ПочтовыеСлужбыПодключены();
	
	Если ПочтовыеСлужбыПодключены Тогда
		Элементы.ГруппаПочтоваяСлужба.Видимость = Истина;
		Элементы.ГруппаПочтоваяСлужба.ТекущаяСтраница = Элементы.СтраницаЗагрузитьПочту;
		Элементы.ГруппаУчетныеЗаписиОтключены.Видимость = ВидимостьГруппыУчетныеЗаписиОтключены();
		Если ЗначениеЗаполнено(КонтекстКонтакт) Тогда
			Команды.ПроверитьПочту.Заголовок = НСтр("ru = 'Загрузить переписку'");
			Команды.ПроверитьПочту.Подсказка = СтрШаблон(НСтр("ru = 'Загрузить переписку с ""%1""'"), КонтекстКонтакт);
			Элементы.ЗагрузитьПредыдущиеПисьма.Видимость = Ложь;
		Иначе
			Элементы.ЗагрузитьПредыдущиеПисьма.Видимость = Истина;
		КонецЕсли;
	ИначеЕсли РегистрыСведений.УчетныеЗаписиПользователя.ПочтовыеСлужбыДоступны() Тогда
		Элементы.ГруппаПочтоваяСлужба.Видимость = Истина;
		Элементы.ГруппаПочтоваяСлужба.ТекущаяСтраница = Элементы.СтраницаНастроитьУчетныеЗаписи;
	Иначе
		Элементы.ГруппаПочтоваяСлужба.Видимость = Элементы.ПодключитьУчетнуюЗапись.Видимость;
		Элементы.ГруппаПочтоваяСлужба.ТекущаяСтраница = Элементы.СтраницаПодключитьПочтовуюСлужбу;
		Элементы.ЗагрузитьПредыдущиеПисьма.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойСервер()
	
	РежимОткрытияСписка = "ОбщийСписок";
	ЭтоСписокПисем = Ложь;
	
	Если ЗначениеЗаполнено(Параметры.ТипСобытия) Тогда
		РежимОткрытияСписка = "СписокСОтборомПоТипу";
		Если Параметры.ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
			ЭтоСписокПисем = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если РежимОткрытияСписка = "ОбщийСписок" ИЛИ РежимОткрытияСписка = "СписокСОтборомПоТипу" Тогда
		Элементы.ЛеваяПанель.Видимость = Ложь;
		Элементы.ГруппаКоманднаяПанель.Видимость = Истина;
		Элементы.ГруппаКоманднаяПанельЭлектронноеПисьмо.Видимость = Ложь;
		Элементы.ВходящееИсходящее.Видимость = Истина;
		Элементы.ГруппаКоманднаяПанель.Видимость = Истина;
		Элементы.ФормаУчетныеЗаписи.Видимость = Ложь;
		Элементы.Список.ПутьКДаннымКартинкиСтроки = "Список.ИндексПиктограммы";
		Элементы.ВажностьЭлектронноеПисьмо.Видимость = Ложь;
		Элементы.СписокВажность.Видимость = Истина;
		Элементы.Непрочитанное.Видимость = Ложь;
		Элементы.СписокКонтекстноеМенюГруппаЭлектронноеПисьмо.Видимость = Ложь;
		Элементы.СписокКонтекстноеМенюГруппаСтандартные.Видимость = Истина;
		Элементы.ЕстьФайлыСписокПисем.Видимость = Ложь;
	КонецЕсли;
	
	Если РежимОткрытияСписка = "СписокСОтборомПоТипу" Тогда
		Элементы.ГруппаКоманднаяПанель.Видимость = НЕ ЭтоСписокПисем;
		Элементы.ГруппаКоманднаяПанельЭлектронноеПисьмо.Видимость = ЭтоСписокПисем;
		Элементы.СписокКонтекстноеМенюГруппаСтандартные.Видимость = НЕ ЭтоСписокПисем;
		Элементы.СписокКонтекстноеМенюГруппаЭлектронноеПисьмо.Видимость = ЭтоСписокПисем;
		Элементы.ВходящееИсходящее.Видимость = Параметры.ТипСобытия <> Перечисления.ТипыСобытий.СообщениеSMS;
		АвтоЗаголовок = Ложь;
		Элементы.ОтборТипСобытия.Видимость = Ложь;
		Элементы.СписокГруппаСоздать.Видимость = Ложь;
		Элементы.ФормаГруппаСоздать.Видимость = Истина;
		ОтборТипСобытия = Параметры.ТипСобытия;
		Элементы.ГруппаПочтоваяСлужба.Видимость = ЭтоСписокПисем;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список, "ТипСобытия", Параметры.ТипСобытия);
		Элементы.СписокОкончаниеСобытия.Видимость = НЕ ЭтоСписокПисем;
		Если Элементы.Найти("ПодменюОтчеты") <> Неопределено И ЭтоСписокПисем Тогда
			Элементы.Переместить(Элементы.ПодменюОтчеты, Элементы.ФормаГруппаСервисЕще);
		КонецЕсли;
		
		Элементы.Непрочитанное.Видимость = ЭтоСписокПисем;
		
		Элементы.Проекты.Видимость = Не (Параметры.ТипСобытия = Перечисления.ТипыСобытий.СообщениеSMS
			ИЛИ Параметры.ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо);
		
		Если Параметры.ТипСобытия = Перечисления.ТипыСобытий.ТелефонныйЗвонок Тогда
			Заголовок = НСтр("ru='События: телефонные звонки'");
		ИначеЕсли Параметры.ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
			Заголовок = НСтр("ru='События: электронные письма'");
		ИначеЕсли Параметры.ТипСобытия = Перечисления.ТипыСобытий.СообщениеSMS Тогда
			Заголовок = НСтр("ru='События: сообщения SMS'");
		ИначеЕсли Параметры.ТипСобытия = Перечисления.ТипыСобытий.ЛичнаяВстреча Тогда
			Заголовок = НСтр("ru='События: личные встречи'");
		ИначеЕсли Параметры.ТипСобытия = Перечисления.ТипыСобытий.Прочее Тогда
			Заголовок = НСтр("ru='События: прочие'");
		ИначеЕсли Параметры.ТипСобытия = Перечисления.ТипыСобытий.Запись Тогда
			Заголовок = НСтр("ru='События: запись'");
			Элементы.СписокТема.Видимость = Ложь;
			Элементы.ОтборВходящееИсходящее.Видимость = Ложь;
			Элементы.ОтборПроект.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.ВажностьЭлектронноеПисьмо.Видимость = ЭтоСписокПисем;
		Элементы.СписокВажность.Видимость = НЕ ЭтоСписокПисем;
		Элементы.Список.ПутьКДаннымКартинкиСтроки = "Список.ИндексПиктограммы";
		
	КонецЕсли;
	
	Если ЭтоСписокПисем Тогда
		
		Элементы.ЕстьФайлы.Видимость = Ложь;
		Элементы.ПодключитьУчетнуюЗапись.Видимость = ПравоДоступа("Добавление", 
			Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты);
		Элементы.Список.ПутьКДаннымКартинкиСтроки = "Список.КартинкаПисем";
		Элементы.СписокНачалоСобытия.Заголовок = НСтр("ru = 'Дата'");
		УстановитьНастройкиСпискаПисем();
		
	КонецЕсли;
	
	НастроитьГруппуПочтоваяСлужба();
	Элементы.ПроверитьПочтуОбщийСписок.Видимость = ПочтовыеСлужбыПодключены;

КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиСпискаПисем()
	
	НастройкиСпискаПапок = ХранилищеСистемныхНастроек.Загрузить("НастройкиСпискаПапок", 
	"ГруппаОтбораСписокПисем_НастройкиСпискаПапок");
	
	НастройкаВидСписка = Неопределено;
	НастройкаВидПапок = Неопределено;
	
	Если НастройкиСпискаПапок = Неопределено ИЛИ ТипЗнч(НастройкиСпискаПапок) <> Тип("Структура") Тогда
		Элементы.ЛеваяПанель.Видимость = Истина;
		Элементы.ВходящееИсходящее.Видимость = Ложь;
		Элементы.ФормаУчетныеЗаписи.Видимость = Ложь;
		Элементы.ОтборУчетнаяЗапись.Видимость = Ложь;
		Элементы.ЕстьФайлыСписокПисем.Видимость = Истина;
	Иначе
		НастройкаВидСписка = НастройкиСпискаПапок.ВидСписка;
		НастройкаВидПапок = НастройкиСпискаПапок.ВидПапок;
		
		Если НастройкаВидСписка = "Расширенный" ИЛИ НЕ ЗначениеЗаполнено(НастройкаВидСписка) Тогда
			Элементы.Переместить(Элементы.СписокСписокУчастников, 
				Элементы.ГруппаНижняяСтрокаКолонок);
		Иначе
			Элементы.Переместить(Элементы.СписокСписокУчастников, 
				Элементы.ГруппаВерхняяСтрокаКолонок, 
				Элементы.СписокТема);
		КонецЕсли;
		
		Если НастройкаВидПапок = "Использовать" ИЛИ НЕ ЗначениеЗаполнено(НастройкаВидПапок) Тогда
			Элементы.ЛеваяПанель.Видимость = Истина;
			Элементы.ВходящееИсходящее.Видимость = Ложь;
			Элементы.ФормаУчетныеЗаписи.Видимость = Ложь;
			Элементы.ОтборУчетнаяЗапись.Видимость = Ложь;
			Если ОтборВходящееИсходящее <> Перечисления.ВходящееИсходящееСобытие.ПустаяСсылка() Тогда
				ОтборВходящееИсходящее = Перечисления.ВходящееИсходящееСобытие.ПустаяСсылка();
			КонецЕсли;
		Иначе
			Элементы.ПочтовыеЯщики.ТекущаяСтрока = 0;
			Элементы.ПочтовыеЯщики.Обновить();
			Элементы.ЛеваяПанель.Видимость = Ложь;
			Элементы.ВходящееИсходящее.Видимость = Истина;
			Элементы.ФормаУчетныеЗаписи.Видимость = Истина;
			Элементы.ОтборУчетнаяЗапись.Видимость = Истина;
		КонецЕсли;
		
		Элементы.ЕстьФайлыСписокПисем.Видимость = НастройкиСпискаПапок.ОтображатьКолонкуВложения;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВидимостьГруппыУчетныеЗаписиОтключены()
	
	Для Каждого ТекНастройка Из РегистрыСведений.УчетныеЗаписиПользователя.НастройкаПользователя(Пользователи.ТекущийПользователь()) Цикл
		
		КоличествоОшибокПодключения = РегистрыСведений.ОшибкиПодключенияЭлектроннойПочтыУНФ.КоличествоОшибокПодключения(ТекНастройка.УчетнаяЗапись);
		Если КоличествоОшибокПодключения = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекНастройка.ЗагружатьПочту Тогда
			Продолжить;
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура НачатьПроверкуПочтыНаКлиенте(Режим)
	
	РежимЗагрузки = Режим;
	Элементы.ГруппаПочтоваяСлужба.ТекущаяСтраница = Элементы.СтраницаВыполняетсяСинхронизация;
	Состояние(ЗаголовокПрогресса(Режим, КонтекстКонтакт),,, БиблиотекаКартинок.ПолучитьОтправитьПочту);
	Прогресс = "";
	ПодключитьОбработчикОжидания("ЗагрузитьЗаголовкиСообщений", 0.1, Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокПрогресса(Режим, Контакт)
	
	Если ЗначениеЗаполнено(Контакт) Тогда
		Возврат НСтр("ru = 'Загрузка переписки'");
	КонецЕсли;
	
	Если Режим = ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиНовыеСообщения() Тогда
		Возврат НСтр("ru = 'Проверка почты'");
	КонецЕсли;
	
	Если Режим = ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиНовыеСообщения() Тогда
		Возврат НСтр("ru = 'Загрузка предыдущих сообщений'");
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьЗаголовкиСообщений()
	
	Задание = ЗаданиеЗагрузитьЗаголовкиСообщенийНаСервере();
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеЗадания", ЭтотОбъект);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ОтобразитьПрогресс", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Задание, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПрогресс(СостояниеЗадания, Параметры) Экспорт
	
	Если ПустаяСтрока(Прогресс) Тогда
		Прогресс = ЗаголовокПрогресса(РежимЗагрузки, КонтекстКонтакт);
	КонецЕсли;
	
	Если ТипЗнч(СостояниеЗадания) = Тип("Структура") 
		И ТипЗнч(СостояниеЗадания.Прогресс) = Тип("Структура") Тогда
		ПрогрессТекст = "";
		СостояниеЗадания.Прогресс.Свойство("Текст", ПрогрессТекст);
		Если ЗначениеЗаполнено(ПрогрессТекст) Тогда
			Прогресс = ПрогрессТекст;
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.ДекорацияПрогресс.Заголовок = Прогресс Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ДекорацияПрогресс.Заголовок = Прогресс;
	Состояние(Прогресс,,, БиблиотекаКартинок.ПолучитьОтправитьПочту);
	
КонецПроцедуры

&НаСервере
Функция ЗаданиеЗагрузитьЗаголовкиСообщенийНаСервере()
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("РежимЗагрузки", РежимЗагрузки);
	ПараметрыПроцедуры.Вставить("ОтборПоКонтакту", КонтекстКонтакт);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
	"ЭлектроннаяПочтаУНФ.ЗагрузитьПочтуПоКомандеПользователя",
	ПараметрыПроцедуры,
	ПараметрыВыполнения);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЗавершениеЗадания(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Результат.Свойство("Статус") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		Состояние(НСтр("ru = 'ПроизошлаОшибка'"),,, БиблиотекаКартинок.Ошибка32);
		Элементы.ГруппаПочтоваяСлужба.ТекущаяСтраница = Элементы.СтраницаПроизошлаОшибка;
		Элементы.ПроизошлаОшибка.Подсказка = Результат.ПодробноеПредставлениеОшибки;
		Состояние(НСтр("ru = 'При загрузке почты происходили ошибки'"),,, БиблиотекаКартинок.Ошибка32);
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ОбработатьРезультатВыполненияЗаданияНаСервере(Результат.АдресРезультата);
		
		Если Элементы.ГруппаПочтоваяСлужба.ТекущаяСтраница = Элементы.СтраницаПроизошлаОшибка Тогда
			Состояние(Элементы.РезультатЗагрузки.Заголовок,
			,
			НСтр("ru = 'При загрузке почты происходили ошибки'"), 
			БиблиотекаКартинок.Ошибка32);
		Иначе
			Состояние(Элементы.РезультатЗагрузки.Заголовок,,, БиблиотекаКартинок.ЗеленаяГалка);
		КонецЕсли;

		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатВыполненияЗаданияНаСервере(АдресРезультата)
	
	НастроитьГруппуПочтоваяСлужба();
	
	Элементы.Список.Обновить();
	РезультатыЗагрузкиЗаголовков = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если ТипЗнч(РезультатыЗагрузкиЗаголовков) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	ЗагруженоПисем = 0;
	БылиОшибки = Ложь;
	СсылкаНаПоследнееЗагруженноеСобытие = Документы.Событие.ПустаяСсылка();
	
	Для Каждого ТекРезультат Из РезультатыЗагрузкиЗаголовков Цикл
		Если ЗначениеЗаполнено(ТекРезультат.ТекстОшибки) И НЕ БылиОшибки Тогда
			БылиОшибки = Истина;
			Элементы.ГруппаПочтоваяСлужба.ТекущаяСтраница = Элементы.СтраницаПроизошлаОшибка;
			Элементы.ПроизошлаОшибка.Подсказка = ТекРезультат.ТекстОшибки;
		КонецЕсли;
		ЗагруженоПисем = ЗагруженоПисем + ТекРезультат.ЗагруженоПисем;
		СсылкаНаПоследнееЗагруженноеСобытие = ТекРезультат.СсылкаНаСобытие;
	КонецЦикла;
	
	ШаблонСообщения = НСтр("ru = ';%1 письмо;;%1 письма;%1 писем;%1 письма'");
	ЗагруженоПрописью = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
	ШаблонСообщения, ЗагруженоПисем, ВидЧисловогоЗначения.Количественное, "ЧН=0");
	
	Элементы.РезультатЗагрузки.Заголовок = СтрШаблон(НСтр("ru = 'Загружено %1'"), ЗагруженоПрописью);
	
	Если ЗначениеЗаполнено(СсылкаНаПоследнееЗагруженноеСобытие) Тогда
		Элементы.Список.ТекущаяСтрока = СсылкаНаПоследнееЗагруженноеСобытие;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗаписьУчетнойЗаписи(Результат, Параметры) Экспорт
	
	НачатьПроверкуПочтыНаКлиенте(ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиНовыеСообщения());
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьАвторизацию()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатЗапросаТокена", ЭтотОбъект);
	ОткрытьФорму(
	"РегистрСведений.СеансовыеДанныеGoogle.Форма.ЗапросТокена",
	Новый Структура("ОписанияОбластейДоступа", ОбменСGoogleКлиентСервер.ОписанияОбластейДоступаПочта()),
	ЭтаФорма,,,,
	ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗапросаТокена(Результат, Параметры) Экспорт
	
	Если ОбменСGoogleКлиентСервер.НеЗаполненТокенДоступа(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьУчетнуюЗаписьGoogleНаСервере(Результат);
	
	НачатьПроверкуПочтыНаКлиенте(ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиНовыеСообщения());
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУчетнуюЗаписьGoogleНаСервере(СеансовыеДанные)
	
	УчетнаяЗаписьGoogle = ОбменСGoogle.СоздатьУчетнуюЗаписьGoogle(СеансовыеДанные);
	
	РегистрыСведений.СеансовыеДанныеGoogle.ЗаписатьСеансовыеДанные(
	СеансовыеДанные,
	Пользователи.ТекущийПользователь(),
	Перечисления.ОбластиДоступаGoogle.Почта,
	УчетнаяЗаписьGoogle);
	
	НастроитьГруппуПочтоваяСлужба();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПометитьКакПрочтенныеНепрочтенныеНаСервере(События)
	
	Если События.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектроннаяПочтаУНФ.ПометитьКакПрочтенныеНепрочтенные(События);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВажность(ИмяВажности)
	
	ВыделенныеСобытия = ВыделенныеСобытия();
	Если ВыделенныеСобытия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьВажностьНаСервере(ВыделенныеСобытия, ИмяВажности);
	ОповеститьОбИзменении(Тип("ДокументСсылка.Событие"));
	
	Если ИмяВажности = "Высокая" Тогда
		ЗаголовокОповещения = НСтр("ru = 'Установлена высокая важность письма'");
	ИначеЕсли ИмяВажности = "Нормальная" Тогда
		ЗаголовокОповещения = НСтр("ru = 'Установлена нормальная важность письма'");
	ИначеЕсли ИмяВажности = "Низкая" Тогда
		ЗаголовокОповещения = НСтр("ru = 'Установлена низкая важность письма'");
	Иначе
		ЗаголовокОповещения = НСтр("ru = 'Установлена важность письма'");
	КонецЕсли;
	
	Если ВыделенныеСобытия.Количество() > 1 Тогда
		ПоказатьОповещениеПользователя(ЗаголовокОповещения,,, БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьОповещениеПользователя(ЗаголовокОповещения,
			ПолучитьНавигационнуюСсылку(ВыделенныеСобытия[0]), ВыделенныеСобытия[0], БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьВажностьНаСервере(События, Важность)
	
	Если Важность = "Высокая" Тогда
		ВажностьПисьма = Перечисления.ВариантыВажности.Высокая;
	ИначеЕсли Важность = "Нормальная" Тогда
		ВажностьПисьма = Перечисления.ВариантыВажности.Обычная;
	Иначе
		ВажностьПисьма = Перечисления.ВариантыВажности.Низкая;
	КонецЕсли;
	
	Для каждого Событие Из События Цикл
		СобытиеОбъект = Событие.ПолучитьОбъект();
		СобытиеОбъект.Заблокировать();
		СобытиеОбъект.Важность = ВажностьПисьма;
		СобытиеОбъект.Записать();
		СобытиеОбъект.Разблокировать();
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПометитьКакСпамНеСпамНаСервереБезКонтекста(События)
	
	Если События.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭлектроннаяПочтаУНФ.ЭтоСпам(События) Тогда
		ЭлектроннаяПочтаУНФ.ПометитьКакСпам(События);
	Иначе
		ЭлектроннаяПочтаУНФ.УбратьИзСпама(События);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВсеДоступныеУчетныеЗаписи()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	НЕ УчетныеЗаписиЭлектроннойПочты.Недействителен";
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат.ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Функция ВсеЗагружаемыеПользователемУчетныеЗаписи()
	
	Результат = Новый Массив;
	НастройкиУчетныхЗаписей = РегистрыСведений.УчетныеЗаписиПользователя.НастройкаПользователя(АвторизованныйПользователь);
	Для каждого НастройкаУчетнойЗаписи Из НастройкиУчетныхЗаписей Цикл
		Если НастройкаУчетнойЗаписи.ЗагружатьПочту Тогда
			Результат.Добавить(НастройкаУчетнойЗаписи.УчетнаяЗапись);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВсеЗагружаемыеПользователемУчетныеЗаписиСПочтовымиЯщиками()
	
	Результат = Новый Массив;
	УчетныеЗаписи = ВсеЗагружаемыеПользователемУчетныеЗаписи();
	Для каждого УчетнаяЗапись Из УчетныеЗаписи Цикл
		Если ЭлектроннаяПочтаУНФ.ИспользуютсяПочтовыеЯщики(УчетнаяЗапись) Тогда
			Результат.Добавить(УчетнаяЗапись);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИндексКартинкиПоТипуПочтовогоЯщика(ТипПочтовогоЯщика)
	
	ИндексыКартинок = Новый Соответствие;
	ИндексыКартинок.Вставить(Перечисления.ТипыПочтовыхЯщиков.Входящие, 1);
	ИндексыКартинок.Вставить(Перечисления.ТипыПочтовыхЯщиков.Исходящие, 4);
	ИндексыКартинок.Вставить(Перечисления.ТипыПочтовыхЯщиков.Отправленные, 2);
	ИндексыКартинок.Вставить(Перечисления.ТипыПочтовыхЯщиков.Спам, 5);
	ИндексыКартинок.Вставить(Перечисления.ТипыПочтовыхЯщиков.Удаленные, 6);
	ИндексыКартинок.Вставить(Перечисления.ТипыПочтовыхЯщиков.Черновики, 3);
	ИндексыКартинок.Вставить(Перечисления.ТипыПочтовыхЯщиков.ПустаяСсылка(), 7);
	Возврат ИндексыКартинок.Получить(ТипПочтовогоЯщика);
	
КонецФункции

&НаКлиенте
Процедура ОтобразитьПочтовыеЯщикиПриОткрытии()
	
	Для каждого Строка Из ПочтовыеЯщикиДляРазворачиванияПоУмолчанию Цикл
		ИдентификаторСтроки = Строка.Значение;
		Элементы.ПочтовыеЯщики.Развернуть(ИдентификаторСтроки, Ложь);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПочтовыеЯщики()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПочтовыеЯщики.Ссылка КАК Ссылка,
	|	ПочтовыеЯщики.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА ПочтовыеЯщики.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ТипыПочтовыхЯщиков.Входящие)
	|			ТОГДА 1
	|		КОГДА ПочтовыеЯщики.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ТипыПочтовыхЯщиков.ПустаяСсылка)
	|			ТОГДА 2
	|		КОГДА ПочтовыеЯщики.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ТипыПочтовыхЯщиков.Исходящие)
	|			ТОГДА 3
	|		КОГДА ПочтовыеЯщики.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ТипыПочтовыхЯщиков.Отправленные)
	|			ТОГДА 4
	|		КОГДА ПочтовыеЯщики.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ТипыПочтовыхЯщиков.Удаленные)
	|			ТОГДА 5
	|		КОГДА ПочтовыеЯщики.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ТипыПочтовыхЯщиков.Черновики)
	|			ТОГДА 6
	|		КОГДА ПочтовыеЯщики.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ТипыПочтовыхЯщиков.Спам)
	|			ТОГДА 7
	|		ИНАЧЕ 8
	|	КОНЕЦ КАК Порядок,
	|	ПочтовыеЯщики.ВидПапки КАК ВидПапки
	|ИЗ
	|	Справочник.ПочтовыеЯщики КАК ПочтовыеЯщики
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Строки = ПочтовыеЯщики.ПолучитьЭлементы();
	Строки.Очистить();
	
	Строки = ПочтовыеЯщики.ПолучитьЭлементы();
	СтрокаВсяПочта = Строки.Добавить();
	СтрокаВсяПочта.ПочтовыйЯщик = Справочники.ПочтовыеЯщики.ПустаяСсылка();
	СтрокаВсяПочта.Наименование = НСтр("ru='Вся почта'");
	СтрокаВсяПочта.УчетнаяЗапись = Неопределено;
	СтрокаВсяПочта.ИндексКартинки = 0;
	ПочтовыеЯщикиДляРазворачиванияПоУмолчанию.Добавить(СтрокаВсяПочта.ПолучитьИдентификатор());
	
	СтрокиВсяПочта = СтрокаВсяПочта.ПолучитьЭлементы();
	УчетныеЗаписи = ВсеДоступныеУчетныеЗаписи();
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		СтрокаПочтовыйЯщик = СтрокиВсяПочта.Добавить();
		СтрокаПочтовыйЯщик.ПочтовыйЯщик = Результат.Ссылка;
		СтрокаПочтовыйЯщик.Наименование = Результат.Наименование;
		СтрокаПочтовыйЯщик.УчетнаяЗапись = Неопределено;
		СтрокаПочтовыйЯщик.ИндексКартинки = ИндексКартинкиПоТипуПочтовогоЯщика(Результат.ВидПапки);
		СтрокиПочтовогоЯщика = СтрокаПочтовыйЯщик.ПолучитьЭлементы();
		Для каждого УчетнаяЗапись Из УчетныеЗаписи Цикл
			СтрокаУчетнаяЗапись = СтрокиПочтовогоЯщика.Добавить();
			СтрокаУчетнаяЗапись.ПочтовыйЯщик = СтрокаПочтовыйЯщик.ПочтовыйЯщик;
			СтрокаУчетнаяЗапись.Наименование = УчетнаяЗапись;
			СтрокаУчетнаяЗапись.УчетнаяЗапись = УчетнаяЗапись;
			СтрокаУчетнаяЗапись.ИндексКартинки = 0;
		КонецЦикла;
	КонецЦикла;
	
	УчетныеЗаписи = ВсеЗагружаемыеПользователемУчетныеЗаписиСПочтовымиЯщиками();
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПочтовыеЯщикиУчетныхЗаписей.Ссылка КАК ПочтовыйЯщик,
	|	ПочтовыеЯщикиУчетныхЗаписей.Владелец КАК УчетнаяЗапись,
	|	ПочтовыеЯщикиУчетныхЗаписей.Наименование КАК Наименование,
	|	ПочтовыеЯщикиУчетныхЗаписей.НаименованиеНаСервере КАК НаименованиеНаСервере,
	|	ПочтовыеЯщикиУчетныхЗаписей.Родитель КАК Родитель,
	|	ПочтовыеЯщикиУчетныхЗаписей.ВидПапки КАК ВидПапки,
	|	ВЫБОР
	|		КОГДА ПочтовыеЯщикиУчетныхЗаписей.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ТипыПочтовыхЯщиков.Входящие)
	|			ТОГДА 1
	|		КОГДА ПочтовыеЯщикиУчетныхЗаписей.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ТипыПочтовыхЯщиков.ПустаяСсылка)
	|			ТОГДА 2
	|		КОГДА ПочтовыеЯщикиУчетныхЗаписей.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ТипыПочтовыхЯщиков.Исходящие)
	|			ТОГДА 3
	|		КОГДА ПочтовыеЯщикиУчетныхЗаписей.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ТипыПочтовыхЯщиков.Отправленные)
	|			ТОГДА 4
	|		КОГДА ПочтовыеЯщикиУчетныхЗаписей.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ТипыПочтовыхЯщиков.Удаленные)
	|			ТОГДА 5
	|		КОГДА ПочтовыеЯщикиУчетныхЗаписей.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ТипыПочтовыхЯщиков.Черновики)
	|			ТОГДА 6
	|		КОГДА ПочтовыеЯщикиУчетныхЗаписей.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ТипыПочтовыхЯщиков.Спам)
	|			ТОГДА 7
	|		ИНАЧЕ 8
	|	КОНЕЦ КАК Порядок,
	|	ЕСТЬNULL(НастройкиЗагрузкиПисем.ВариантЗагрузки, ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиПисем.ПустаяСсылка)) КАК ВариантЗагрузки
	|ИЗ
	|	Справочник.ПочтовыеЯщикиУчетныхЗаписей КАК ПочтовыеЯщикиУчетныхЗаписей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЗагрузкиПисем КАК НастройкиЗагрузкиПисем
	|		ПО ПочтовыеЯщикиУчетныхЗаписей.Владелец = НастройкиЗагрузкиПисем.УчетнаяЗапись
	|			И ПочтовыеЯщикиУчетныхЗаписей.НаименованиеНаСервере = НастройкиЗагрузкиПисем.ПочтоваяПапка
	|ГДЕ
	|	ПочтовыеЯщикиУчетныхЗаписей.Владелец В(&Владельцы)
	|	И ПочтовыеЯщикиУчетныхЗаписей.ВидПапки <> ЗНАЧЕНИЕ(Перечисление.ТипыПочтовыхЯщиков.Исходящие)
	|	И НЕ ПочтовыеЯщикиУчетныхЗаписей.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	Запрос.УстановитьПараметр("Владельцы", УчетныеЗаписи);
	ПочтовыеЯщикиУчетныхЗаписей = Запрос.Выполнить().Выгрузить();
	
	Для каждого УчетнаяЗапись Из УчетныеЗаписи Цикл
		Строки = ПочтовыеЯщики.ПолучитьЭлементы();
		СтрокаУчетнаяЗапись = Строки.Добавить();
		СтрокаУчетнаяЗапись.ПочтовыйЯщик = Справочники.ПочтовыеЯщикиУчетныхЗаписей.ПустаяСсылка();
		СтрокаУчетнаяЗапись.Наименование = УчетнаяЗапись;
		СтрокаУчетнаяЗапись.УчетнаяЗапись = УчетнаяЗапись;
		
		ПараметрыОтбора = Новый Структура("УчетнаяЗапись", УчетнаяЗапись);
		ПочтовыеЯщикиУчетнойЗаписи = ПочтовыеЯщикиУчетныхЗаписей.НайтиСтроки(ПараметрыОтбора);
		СтрокиПочтовыеЯщикиУчетнойЗаписи = СтрокаУчетнаяЗапись.ПолучитьЭлементы();
		Для каждого ПочтовыйЯщик Из ПочтовыеЯщикиУчетнойЗаписи Цикл
			Если Не ЗначениеЗаполнено(ПочтовыйЯщик.ВидПапки) 
				И (ПочтовыйЯщик.ВариантЗагрузки = Перечисления.ВариантыЗагрузкиПисем.НеЗагружать
				Или Не ЗначениеЗаполнено(ПочтовыйЯщик.ВариантЗагрузки)) Тогда
				Продолжить;
			КонецЕсли;
			ПочтовыйЯщикУчетнойЗаписи = СтрокиПочтовыеЯщикиУчетнойЗаписи.Добавить();
			ПочтовыйЯщикУчетнойЗаписи.ПочтовыйЯщик = ПочтовыйЯщик.ПочтовыйЯщик;
			ПочтовыйЯщикУчетнойЗаписи.Наименование = ПочтовыйЯщик.ПочтовыйЯщик;
			ПочтовыйЯщикУчетнойЗаписи.УчетнаяЗапись = УчетнаяЗапись;
			ПочтовыйЯщикУчетнойЗаписи.ИндексКартинки = ИндексКартинкиПоТипуПочтовогоЯщика(ПочтовыйЯщик.ВидПапки);
		КонецЦикла;
	КонецЦикла;
	
	ТекущийПочтовыйЯщик = Справочники.ПочтовыеЯщики.ПустаяСсылка();
	ТекущаяУчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияУчетныеЗаписи(ИмяСобытия, Параметр, Источник)
	
	ОбработкаОповещенияУчетныеЗаписиСервер(ИмяСобытия);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияУчетныеЗаписиСервер(ИмяСобытия)
	
	Если ИмяСобытия = "Запись_ПочтовыеЯщикиУчетныхЗаписей"
		Или ИмяСобытия = ЭлектроннаяПочтаУНФКлиентСервер.ИмяСобытияИзмененСоставПодключенныхУчетныхЗаписей() Тогда
		ЗаполнитьПочтовыеЯщики();
	КонецЕсли;
	
	Если ИмяСобытия = ЭлектроннаяПочтаУНФКлиентСервер.ИмяСобытияИзмененСоставПодключенныхУчетныхЗаписей() Тогда
		НастроитьГруппуПочтоваяСлужба();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияЗагруженыНовыеПисьма(ИмяСобытия, РезультатыЗагрузки, Источник)
	
	Если ИмяСобытия <> "События_ЗагрузитьПочту" Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьЗагруженныеПисьма = Ложь;
	ЗагруженоПисем = 0;
	БылиОшибки = Ложь;
	
	Для каждого РезультатЗагрузки Из РезультатыЗагрузки Цикл
		
		Если ЗначениеЗаполнено(РезультатЗагрузки.ТекстОшибки) И НЕ БылиОшибки Тогда
			БылиОшибки = Истина;
		КонецЕсли;
		
		Если РезультатЗагрузки.Пользователи.Найти(АвторизованныйПользователь) <> Неопределено Тогда
			ЕстьЗагруженныеПисьма = РезультатЗагрузки.ЗагруженоПисем <> 0;
			ЗагруженоПисем = ЗагруженоПисем + РезультатЗагрузки.ЗагруженоПисем;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЕстьЗагруженныеПисьма Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОповещениеОНовыхПисьмах", ЭтотОбъект); 
	ШаблонСообщения = НСтр("ru = ';%1 письмо;;%1 письма;%1 писем;%1 письма'");
	ЗагруженоПрописью = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
	ШаблонСообщения, ЗагруженоПисем, ВидЧисловогоЗначения.Количественное, "ЧН=0");
	
	ЗаголовокОповещения = СтрШаблон(НСтр("ru = 'Загружено %1'"), ЗагруженоПрописью);
	Если БылиОшибки Тогда
		ПояснениеОповещения = НСтр("ru='При загрузке почты происходили ошибки'");
		ПоказатьОповещениеПользователя(ЗаголовокОповещения, ОписаниеОповещения, ПояснениеОповещения, БиблиотекаКартинок.Ошибка32);
	Иначе
		ПояснениеОповещения = НСтр("ru='Перейти к списку писем'");
		ПоказатьОповещениеПользователя(ЗаголовокОповещения, ОписаниеОповещения, ПояснениеОповещения, БиблиотекаКартинок.ПолучитьОтправитьПочту);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьПисьмаВПочтовыйЯщикНаСервере(События, ПочтовыйЯщик)
	
	ТипПочтовогоЯщика = Справочники.ПочтовыеЯщикиУчетныхЗаписей.ТипПочтовогоЯщика(ПочтовыйЯщик);
	Если ТипПочтовогоЯщика = Перечисления.ТипыПочтовыхЯщиков.Удаленные Тогда
		Для каждого Событие Из События Цикл
			СобытиеОбъект = Событие.ПолучитьОбъект();
			СобытиеОбъект.УстановитьПометкуУдаления(Истина);
			СобытиеОбъект.Записать();
		КонецЦикла;
	Иначе
		ЭлектроннаяПочтаУНФ.ПереместитьВПочтовыйЯщик(События, ПочтовыйЯщик);
	КонецЕсли;
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоПочтовомуЯщику()
	
	Если Элементы.ПочтовыеЯщики.ТекущиеДанные <> Неопределено Тогда
		ТекущийПочтовыйЯщик = Элементы.ПочтовыеЯщики.ТекущиеДанные.ПочтовыйЯщик;
		ТекущаяУчетнаяЗапись = Элементы.ПочтовыеЯщики.ТекущиеДанные.УчетнаяЗапись;
		
		УстановитьОтборПоПочтовомуЯщикуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПочтовомуЯщикуНаСервере()
	
	Если ЗначениеЗаполнено(ТекущийПочтовыйЯщик) Тогда
		Список.ТекстЗапроса = ТекстЗапросаОтборПочтовыеЯщики();
	Иначе
		Список.ТекстЗапроса = ТекстЗапросаВсеПочтовыеЯщики();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийПочтовыйЯщик) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПочтовыйЯщик", ТекущийПочтовыйЯщик, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		Если ТипЗнч(ТекущийПочтовыйЯщик) = Тип("СправочникСсылка.ПочтовыеЯщики")
			И ЗначениеЗаполнено(ТекущаяУчетнаяЗапись) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "УчетнаяЗапись", ТекущаяУчетнаяЗапись, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "УчетнаяЗапись", ТекущаяУчетнаяЗапись, ВидСравненияКомпоновкиДанных.Равно,, Ложь);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ТекущаяУчетнаяЗапись) Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "ПочтовыйЯщик");
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "УчетнаяЗапись", ТекущаяУчетнаяЗапись, ВидСравненияКомпоновкиДанных.Равно,, Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "ПочтовыйЯщик");
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "УчетнаяЗапись", ТекущаяУчетнаяЗапись, ВидСравненияКомпоновкиДанных.Равно,, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаВсеПочтовыеЯщики()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДокументСобытие.Ссылка КАК Ссылка,
	|	ДокументСобытие.ПометкаУдаления КАК ПометкаУдаления,
	|	ДокументСобытие.Номер КАК Номер,
	|	ДокументСобытие.Дата КАК Дата,
	|	ДокументСобытие.Проведен КАК Проведен,
	|	ДокументСобытие.ВходящееИсходящееСобытие КАК ВходящееИсходящее,
	|	ДокументСобытие.ТипСобытия КАК ТипСобытия,
	|	ДокументСобытие.Состояние КАК Состояние,
	|	ДокументСобытие.Тема КАК Тема,
	|	ДокументСобытие.Содержание КАК Содержание,
	|	ДокументСобытие.ДокументОснование КАК ДокументОснование,
	|	ДокументСобытие.НачалоСобытия КАК НачалоСобытия,
	|	ВЫБОР
	|		КОГДА НЕ ДанныеЗвонков.ДлительностьРазговора ЕСТЬ NULL
	|			ТОГДА ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), СЕКУНДА, ДанныеЗвонков.ДлительностьРазговора)
	|		ИНАЧЕ ДокументСобытие.ОкончаниеСобытия
	|	КОНЕЦ КАК ОкончаниеСобытия,
	|	ДокументСобытие.Важность КАК Важность,
	|	ДокументСобытие.Автор КАК Автор,
	|	ВЫБОР
	|		КОГДА НЕ ДанныеЗвонков.Сотрудник ЕСТЬ NULL
	|			ТОГДА ДанныеЗвонков.Сотрудник
	|		ИНАЧЕ ДокументСобытие.Ответственный
	|	КОНЕЦ КАК Ответственный,
	|	ДокументСобытие.МоментВремени КАК МоментВремени,
	|	ДокументСобытие.СписокУчастников КАК СписокУчастников,
	|	ДокументСобытие.УчетнаяЗапись КАК УчетнаяЗапись,
	|	ДокументСобытие.Проект КАК Проект,
	|	ВЫБОР
	|		КОГДА НЕ ДокументСобытие.ПометкаУдаления
	|			ТОГДА ВЫБОР
	|					КОГДА ДокументСобытие.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.ЭлектронноеПисьмо)
	|						ТОГДА ВЫБОР
	|								КОГДА ДокументСобытие.ВходящееИсходящееСобытие = ЗНАЧЕНИЕ(Перечисление.ВходящееИсходящееСобытие.Входящее)
	|									ТОГДА 0
	|								ИНАЧЕ 1
	|							КОНЕЦ
	|					КОГДА ДокументСобытие.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.ТелефонныйЗвонок)
	|						ТОГДА ВЫБОР
	|								КОГДА НЕ ДанныеЗвонков.Неотвеченный ЕСТЬ NULL
	|										И ДанныеЗвонков.Неотвеченный
	|									ТОГДА 4
	|								КОГДА ДокументСобытие.ВходящееИсходящееСобытие = ЗНАЧЕНИЕ(Перечисление.ВходящееИсходящееСобытие.Входящее)
	|									ТОГДА 2
	|								ИНАЧЕ 3
	|							КОНЕЦ
	|					КОГДА ДокументСобытие.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.ЛичнаяВстреча)
	|						ТОГДА 5
	|					КОГДА ДокументСобытие.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.СообщениеSMS)
	|						ТОГДА 6
	|					КОГДА ДокументСобытие.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.Прочее)
	|						ТОГДА 7
	|					КОГДА ДокументСобытие.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.Запись)
	|						ТОГДА 8
	|					ИНАЧЕ -1
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДокументСобытие.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.ЭлектронноеПисьмо)
	|					ТОГДА ВЫБОР
	|							КОГДА ДокументСобытие.ВходящееИсходящееСобытие = ЗНАЧЕНИЕ(Перечисление.ВходящееИсходящееСобытие.Входящее)
	|								ТОГДА 9
	|							ИНАЧЕ 10
	|						КОНЕЦ
	|				КОГДА ДокументСобытие.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.ТелефонныйЗвонок)
	|					ТОГДА ВЫБОР
	|							КОГДА НЕ ДанныеЗвонков.Неотвеченный ЕСТЬ NULL
	|									И ДанныеЗвонков.Неотвеченный
	|								ТОГДА 13
	|							КОГДА ДокументСобытие.ВходящееИсходящееСобытие = ЗНАЧЕНИЕ(Перечисление.ВходящееИсходящееСобытие.Входящее)
	|								ТОГДА 11
	|							ИНАЧЕ 12
	|						КОНЕЦ
	|				КОГДА ДокументСобытие.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.ЛичнаяВстреча)
	|					ТОГДА 14
	|				КОГДА ДокументСобытие.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.СообщениеSMS)
	|					ТОГДА 15
	|				КОГДА ДокументСобытие.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.Прочее)
	|					ТОГДА 16
	|				КОГДА ДокументСобытие.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.Запись)
	|					ТОГДА 17
	|				ИНАЧЕ -1
	|			КОНЕЦ
	|	КОНЕЦ КАК ИндексПиктограммы,
	|	ДокументСобытие.Участники.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Контакт КАК Контакт,
	|		КакСвязаться КАК КакСвязаться
	|	) КАК ТЧУчастники,
	|	ДокументСобытие.ДокументыОснования.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ДокументОснование КАК ДокументОснование
	|	) КАК ДокументыОснования,
	|	ВЫБОР
	|		КОГДА НЕ ДанныеЗвонков.Неотвеченный ЕСТЬ NULL
	|			ТОГДА ДанныеЗвонков.Неотвеченный
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Неотвеченный,
	|	ВЫБОР
	|		КОГДА НЕ ДанныеЗвонков.Событие ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоЗвонок,
	|	0 КАК ЕстьФайлы,
	|	0 КАК ЕстьФайлыСписокПисем,
	|	ВЫБОР
	|		КОГДА ДокументСобытие.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажности.Обычная)
	|			ТОГДА 1
	|		КОГДА ДокументСобытие.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажности.Низкая)
	|			ТОГДА 0
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ВажностьЭлектронноеПисьмо,
	|	-1 КАК КартинкаПисем,
	|	ЛОЖЬ КАК Непрочитанное,
	|	NULL КАК ПочтовыйЯщик
	|ИЗ
	|	Документ.Событие КАК ДокументСобытие
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеЗвонков КАК ДанныеЗвонков
	|		ПО (ДокументСобытие.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.ТелефонныйЗвонок))
	|			И ДокументСобытие.Ссылка = ДанныеЗвонков.Событие
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпамСобытий КАК СпамСобытий
	|		ПО (ДокументСобытие.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.ЭлектронноеПисьмо))
	|			И ДокументСобытие.Ссылка = СпамСобытий.Событие
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтборСпам
	|				ТОГДА СпамСобытий.Событие ЕСТЬ НЕ NULL 
	|			ИНАЧЕ СпамСобытий.Событие ЕСТЬ NULL
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ОтборУчастники
	|				ТОГДА ДокументСобытие.Ссылка В
	|						(ВЫБРАТЬ
	|							ДокументСобытиеУчастники.Ссылка
	|						ИЗ
	|							Документ.Событие.Участники КАК ДокументСобытиеУчастники
	|						ГДЕ
	|							ДокументСобытиеУчастники.Контакт В (&ОтобранныеКонтакты))
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|{ГДЕ
	|	(&НетДоступаКЛидам
	|			И НЕ(ДокументСобытие.Участники.НомерСтроки = 1
	|					И ТИПЗНАЧЕНИЯ(ДокументСобытие.Участники.Контакт) = ТИП(Справочник.Лиды))) КАК Поле2,
	|	(ДокументСобытие.ДокументОснование = &ДокументОснование
	|			ИЛИ ДокументСобытие.ДокументыОснования.ДокументОснование = &ДокументОснование
	|			ИЛИ ДокументСобытие.Ссылка В (&СобытияОснования)) КАК Поле4}";
	ИзменитьТекстЗапросаПоРегиструПочтовыхЯщиков(ТекстЗапроса);
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаОтборПочтовыеЯщики()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДокументСобытие.Ссылка КАК Ссылка,
	|	ДокументСобытие.ПометкаУдаления КАК ПометкаУдаления,
	|	ДокументСобытие.Номер КАК Номер,
	|	ДокументСобытие.Дата КАК Дата,
	|	ДокументСобытие.Проведен КАК Проведен,
	|	ДокументСобытие.ВходящееИсходящееСобытие КАК ВходящееИсходящее,
	|	ДокументСобытие.ТипСобытия КАК ТипСобытия,
	|	ДокументСобытие.Состояние КАК Состояние,
	|	ДокументСобытие.Тема КАК Тема,
	|	ДокументСобытие.Содержание КАК Содержание,
	|	ДокументСобытие.ДокументОснование КАК ДокументОснование,
	|	ДокументСобытие.НачалоСобытия КАК НачалоСобытия,
	|	ВЫБОР
	|		КОГДА НЕ ДанныеЗвонков.ДлительностьРазговора ЕСТЬ NULL
	|			ТОГДА ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), СЕКУНДА, ДанныеЗвонков.ДлительностьРазговора)
	|		ИНАЧЕ ДокументСобытие.ОкончаниеСобытия
	|	КОНЕЦ КАК ОкончаниеСобытия,
	|	ДокументСобытие.Важность КАК Важность,
	|	ДокументСобытие.Автор КАК Автор,
	|	ВЫБОР
	|		КОГДА НЕ ДанныеЗвонков.Сотрудник ЕСТЬ NULL
	|			ТОГДА ДанныеЗвонков.Сотрудник
	|		ИНАЧЕ ДокументСобытие.Ответственный
	|	КОНЕЦ КАК Ответственный,
	|	ДокументСобытие.МоментВремени КАК МоментВремени,
	|	ДокументСобытие.СписокУчастников КАК СписокУчастников,
	|	ДокументСобытие.УчетнаяЗапись КАК УчетнаяЗапись,
	|	ДокументСобытие.Проект КАК Проект,
	|	ВЫБОР
	|		КОГДА НЕ ДокументСобытие.ПометкаУдаления
	|			ТОГДА ВЫБОР
	|					КОГДА ДокументСобытие.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.ЭлектронноеПисьмо)
	|						ТОГДА ВЫБОР
	|								КОГДА ДокументСобытие.ВходящееИсходящееСобытие = ЗНАЧЕНИЕ(Перечисление.ВходящееИсходящееСобытие.Входящее)
	|									ТОГДА 0
	|								ИНАЧЕ 1
	|							КОНЕЦ
	|					КОГДА ДокументСобытие.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.ТелефонныйЗвонок)
	|						ТОГДА ВЫБОР
	|								КОГДА НЕ ДанныеЗвонков.Неотвеченный ЕСТЬ NULL
	|										И ДанныеЗвонков.Неотвеченный
	|									ТОГДА 4
	|								КОГДА ДокументСобытие.ВходящееИсходящееСобытие = ЗНАЧЕНИЕ(Перечисление.ВходящееИсходящееСобытие.Входящее)
	|									ТОГДА 2
	|								ИНАЧЕ 3
	|							КОНЕЦ
	|					КОГДА ДокументСобытие.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.ЛичнаяВстреча)
	|						ТОГДА 5
	|					КОГДА ДокументСобытие.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.СообщениеSMS)
	|						ТОГДА 6
	|					КОГДА ДокументСобытие.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.Прочее)
	|						ТОГДА 7
	|					КОГДА ДокументСобытие.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.Запись)
	|						ТОГДА 8
	|					ИНАЧЕ -1
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДокументСобытие.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.ЭлектронноеПисьмо)
	|					ТОГДА ВЫБОР
	|							КОГДА ДокументСобытие.ВходящееИсходящееСобытие = ЗНАЧЕНИЕ(Перечисление.ВходящееИсходящееСобытие.Входящее)
	|								ТОГДА 9
	|							ИНАЧЕ 10
	|						КОНЕЦ
	|				КОГДА ДокументСобытие.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.ТелефонныйЗвонок)
	|					ТОГДА ВЫБОР
	|							КОГДА НЕ ДанныеЗвонков.Неотвеченный ЕСТЬ NULL
	|									И ДанныеЗвонков.Неотвеченный
	|								ТОГДА 13
	|							КОГДА ДокументСобытие.ВходящееИсходящееСобытие = ЗНАЧЕНИЕ(Перечисление.ВходящееИсходящееСобытие.Входящее)
	|								ТОГДА 11
	|							ИНАЧЕ 12
	|						КОНЕЦ
	|				КОГДА ДокументСобытие.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.ЛичнаяВстреча)
	|					ТОГДА 14
	|				КОГДА ДокументСобытие.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.СообщениеSMS)
	|					ТОГДА 15
	|				КОГДА ДокументСобытие.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.Прочее)
	|					ТОГДА 16
	|				КОГДА ДокументСобытие.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.Запись)
	|					ТОГДА 17
	|				ИНАЧЕ -1
	|			КОНЕЦ
	|	КОНЕЦ КАК ИндексПиктограммы,
	|	ДокументСобытие.Участники.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Контакт КАК Контакт,
	|		КакСвязаться КАК КакСвязаться
	|	) КАК ТЧУчастники,
	|	ДокументСобытие.ДокументыОснования.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ДокументОснование КАК ДокументОснование
	|	) КАК ДокументыОснования,
	|	ВЫБОР
	|		КОГДА НЕ ДанныеЗвонков.Неотвеченный ЕСТЬ NULL
	|			ТОГДА ДанныеЗвонков.Неотвеченный
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Неотвеченный,
	|	ВЫБОР
	|		КОГДА НЕ ДанныеЗвонков.Событие ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоЗвонок,
	|	0 КАК ЕстьФайлы,
	|	0 КАК ЕстьФайлыСписокПисем,
	|	ВЫБОР
	|		КОГДА ДокументСобытие.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажности.Обычная)
	|			ТОГДА 1
	|		КОГДА ДокументСобытие.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажности.Низкая)
	|			ТОГДА 0
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ВажностьЭлектронноеПисьмо,
	|	-1 КАК КартинкаПисем,
	|	ЛОЖЬ КАК Непрочитанное,
	|	СодержимоеПочтовыхЯщиков.ПочтовыйЯщик КАК ПочтовыйЯщик
	|ИЗ
	|	РегистрСведений.СодержимоеПочтовыхЯщиков КАК СодержимоеПочтовыхЯщиков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Событие КАК ДокументСобытие
	|		ПО СодержимоеПочтовыхЯщиков.Событие = ДокументСобытие.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеЗвонков КАК ДанныеЗвонков
	|		ПО (ДокументСобытие.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.ТелефонныйЗвонок))
	|			И (ДокументСобытие.Ссылка = ДанныеЗвонков.Событие)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпамСобытий КАК СпамСобытий
	|		ПО (ДокументСобытие.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.ЭлектронноеПисьмо))
	|			И (ДокументСобытие.Ссылка = СпамСобытий.Событие)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтборСпам
	|				ТОГДА СпамСобытий.Событие ЕСТЬ НЕ NULL 
	|			ИНАЧЕ СпамСобытий.Событие ЕСТЬ NULL
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ОтборУчастники
	|				ТОГДА ДокументСобытие.Ссылка В
	|						(ВЫБРАТЬ
	|							ДокументСобытиеУчастники.Ссылка
	|						ИЗ
	|							Документ.Событие.Участники КАК ДокументСобытиеУчастники
	|						ГДЕ
	|							ДокументСобытиеУчастники.Контакт В (&ОтобранныеКонтакты))
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|{ГДЕ
	|	(&НетДоступаКЛидам
	|			И НЕ(ДокументСобытие.Участники.НомерСтроки = 1
	|					И ТИПЗНАЧЕНИЯ(ДокументСобытие.Участники.Контакт) = ТИП(Справочник.Лиды))) КАК Поле2,
	|	(ДокументСобытие.ДокументОснование = &ДокументОснование
	|			ИЛИ ДокументСобытие.ДокументыОснования.ДокументОснование = &ДокументОснование
	|			ИЛИ ДокументСобытие.Ссылка В (&СобытияОснования)) КАК Поле4}";
	ИзменитьТекстЗапросаПоРегиструПочтовыхЯщиков(ТекстЗапроса);
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура ИзменитьТекстЗапросаПоРегиструПочтовыхЯщиков(ТекстЗапроса)
	
	Если ТипЗнч(ТекущийПочтовыйЯщик) = Тип("СправочникСсылка.ПочтовыеЯщикиУчетныхЗаписей") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.СодержимоеПочтовыхЯщиков", "РегистрСведений.СодержимоеПочтовыхЯщиковУчетныхЗаписей");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещениеОНовыхПисьмах(Результат) Экспорт
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
