
// ------------------------------------------------------------------------------
// СПЕЦИФИКАЦИЯ ПАРАМЕТРОВ ПЕРЕДАВАЕМЫХ В ФОРМУ
//
// см. ОбщиеФормы.ОтправкаСообщения
// ------------------------------------------------------------------------------
// СПЕЦИФИКАЦИЯ ФУНКЦИОНИРОВАНИЯ ФОРМЫ
//
//   Если учетные записи не передаются, то учетная запись заполняется значением 
// настройки пользователя по умолчанию. Если настройка не задана, то пользователю
// предлагаются доступные ему учетные записи. 
//
//   Если файлы для вложения существует на сервере 1С:Предприятие, в качестве
// параметра необходимо не двоичные данные, а ссылку на данные во временном
// хранилище.
//
// ------------------------------------------------------------------------------
                                                                                   
#Область ОписаниеПеременных

&НаКлиенте
Перем ПриведенныйПочтовыйАдресКому; // Преобразованный почтовый адрес Кому

&НаКлиенте
Перем ПриведенныйПочтовыйАдресКопия; // Преобразованный почтовый адрес Копия

&НаКлиенте
Перем ПриведенныйПочтовыйАдресСкрытаяКопия; // Преобразованный почтовый адрес Скрытая копия

&НаКлиенте
Перем ОкноHTMLДокумента; // см ТекстПисьмаДокументСформирован

&НаКлиенте
Перем ДокументHTML; // см ТекстПисьмаДокументСформирован

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ЭтоОткрытиеПисьмаВложения") Тогда
		
		АвтоЗаголовок = Ложь;
		ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Вложенное письмо: %1'"),
			Параметры.ЗначенияЗаполнения.ИмяДокумента);
		Если СтрДлина(ТекстЗаголовка) > 35 Тогда
			ТекстЗаголовка = СтрШаблон(НСтр("ru = '%1...'"), Сред(ТекстЗаголовка, 1, 35));
			ТекстЗаголовка = ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(ТекстЗаголовка);
		Иначе
			ТекстЗаголовка = СтрШаблон(НСтр("ru = '%1'"), ТекстЗаголовка);
		КонецЕсли; 
		Заголовок = ТекстЗаголовка;
		
		Для Каждого Вложение Из Параметры.ЗначенияЗаполнения.Вложения Цикл
			Если Вложение.Свойство("ЭтоПисьмо") Тогда
				ИнтернетПС = Новый ИнтернетПочтовоеСообщение;
				ИнтернетПС.УстановитьИсходныеДанные(Вложение.Данные);
				Вложение.Данные = ИнтернетПС;
			КонецЕсли;
		КонецЦикла;
		
		ПриСозданииПриЧтенииНаСервере(Объект);
		ЭтоПисьмоВложение = Истина;
		ЗаполнитьВложения(Параметры.ЗначенияЗаполнения);
		
		Содержание = Объект.Содержание;
		СодержаниеHTML = Гипертекст.ОбработатьТекстHTML(Объект.СодержаниеHTML,, ТаблицаВложений());
		СодержаниеHTML = Гипертекст.ТекстHTMLСКартинкамиВДвоичныхДанных(СодержаниеHTML);
		
		Если Объект.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
			НежелательныеHTTPОчищены = Гипертекст.ОчиститьНежелательныеHTTP(СодержаниеHTML);
		КонецЕсли;
		
		НастроитьФормуПисьмаВложения();
		ДополнительныеПараметры = УправлениеСвойствамиУНФ.ЗаполнитьДополнительныеПараметры(Объект,
		"ГруппаДополнительныеРеквизиты");
		УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Документы.Событие.ПроверитьВозможностьВводаПоЛиду(Объект, Параметры.ЗначенияЗаполнения, Отказ);
	КонецЕсли;
	
	ДоступнаРаботаСЛидами = ПравоДоступа("Добавление", Метаданные.Справочники.Лиды);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	Элементы.ПолучателиКонтакт.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыСтроки(100));
	Элементы.Тема.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыСтроки(200));
	ЭтоИсходящееПисьмо = Объект.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Исходящее;
	
	Если Параметры.Свойство("ЗначенияЗаполнения") Тогда
		Команда = "";
		Параметры.ЗначенияЗаполнения.Свойство("Команда", Команда);
		ЭтоОтветНаПисьмо = Команда = "КомандаОтветить" ИЛИ Команда = "КомандаОтветитьВсем";
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ЗаполнитьНовоеПисьмоПоУмолчанию(Параметры);
		
		Если Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			
			ОбработатьПереданныеПараметры(Параметры);
			
		Иначе // Копирование
			
			ДополнитьКартинкиHTML(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ЗначениеКопирования, "КартинкиHTML").Получить());
			
			ПрочитатьВложения(Параметры.ЗначениеКопирования);
			
			Если Не СтрНайти(Объект.СодержаниеHTML, "<body") Тогда
				
				ТекстПисьма = Гипертекст.РазложитьТекстHTML(Объект.СодержаниеHTML).Тело;
				ТекстПисьма = СтрШаблон("<html><body contenteditable>%1</body></html>", ТекстПисьма);
				
			Иначе
				ТекстПисьма = СтрЗаменить(Объект.СодержаниеHTML, "<body", "<body contenteditable");
			КонецЕсли;
			
			Объект.СодержаниеHTML = ТекстПисьма;
			
		КонецЕсли;
		
		ПриСозданииПриЧтенииНаСервере(Объект);
		
	Иначе
		Если Объект.НачалоСобытия = '00010101' Тогда
			
			Если Не СтрНайти(Объект.СодержаниеHTML, "contenteditable") Тогда
				Объект.СодержаниеHTML = СтрЗаменить(Объект.СодержаниеHTML, "<body", "<body contenteditable");
			КонецЕсли;
			
			ДобавитьJSКод(Объект.СодержаниеHTML);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		СеансовыеДанные = РегистрыСведений.СеансовыеДанныеGoogle.СеансовыеДанные(
		Пользователи.ТекущийПользователь(),
		Перечисления.ОбластиДоступаGoogle.Почта,
		Объект.УчетнаяЗапись);
	КонецЕсли;
	
	Содержание = Объект.Содержание;
	Если СтрНайти(Объект.СодержаниеHTML, "<html") Тогда
		
		СодержаниеHTML = Гипертекст.ОбработатьТекстHTML(Объект.СодержаниеHTML,, ТаблицаВложений());
		СодержаниеHTML = Гипертекст.ТекстHTMLСКартинкамиВДвоичныхДанных(СодержаниеHTML);
		
		Если Объект.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
			
			НежелательныеHTTPОчищены = Гипертекст.ОчиститьНежелательныеHTTP(СодержаниеHTML);
			Если НежелательныеHTTPОчищены Тогда
				Элементы.НебезопасноеСодержимое.Видимость = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если Не ПустаяСтрока(Объект.СодержаниеHTML) Тогда
			СодержаниеHTML = HTMLИзПростогоТекста(Объект.СодержаниеHTML);
		Иначе
			СодержаниеHTML = HTMLИзПростогоТекста(Объект.Содержание);
		КонецЕсли;
		
	КонецЕсли;
	
	ИдентификаторСобытия = РегистрыСведений.ИдентификаторыСобытий.ИдентификаторСобытия(Объект.УчетнаяЗапись, Объект.Ссылка);
	
	Если Объект.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Входящее
		Или ЗначениеЗаполнено(ИдентификаторСобытия)
		Или ПисьмоСозданоНаОснованииРассылкиСервиса() Тогда
		НастроитьФормуПолученногоПисьма();
	Иначе
		
		ЗагрузитьИсходноеСообщение = Неопределено;
		Если ЗначениеЗаполнено(ДанныеИсходногоСообщения) Тогда
			ДанныеИсходногоСообщения.Свойство("ЗагрузитьПриОткрытии", ЗагрузитьИсходноеСообщение);
		КонецЕсли;
		
		Если ЗагрузитьИсходноеСообщение <> Неопределено И ЗагрузитьИсходноеСообщение Тогда
			Элементы.СодержаниеПисьма.ТекущаяСтраница = Элементы.Загрузка;
		КонецЕсли;
		
		НастроитьФормуИсходящегоПисьма(Параметры);
		
	КонецЕсли;
	
	УстановитьЗаголовокГиперссылкиДокументовОснований();
	
	Если Параметры.ЗначенияЗаполнения.Свойство("АдресВременногоХранилища") Тогда
		СтруктураВложений = ПолучитьИзВременногоХранилища(
		Параметры.ЗначенияЗаполнения.АдресВременногоХранилища);
		ЗаполнитьВложения(СтруктураВложений);
	КонецЕсли;
	
	ОбязательноЗаполнятьИсточникВПисьмах = 
	РегистрыСведений.ОбязательностьЗаполненияРеквизитов.ОбязательностьЗаполненияРеквизита("ЭлектронноеПисьмо", "ИсточникПривлечения");
	
	Если ОбязательноЗаполнятьИсточникВПисьмах Тогда
		Элементы.ИсточникПривлечения.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	// История темы для автоподбора
	ЗагрузитьИсториюТемСтрокой();
	ЗаполнитьСтатусПисьмаМассовойРассылки();
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	НапоминанияПользователяУНФ.УстановитьОтображениеКомандОрганайзера(Элементы);
		
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиУНФ.ЗаполнитьДополнительныеПараметры(Объект,
		"ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	НаборСвойств_Документ_Событие = УправлениеСвойствами.НаборСвойствПоИмени("Документ_Событие");
	// Конец СтандартныеПодсистемы.Свойства
	
	ПриАвтоматическомСнятииПрочитанностиПисьма();
	
	Если Объект.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
		Элементы.ПолучателиТипПолучателяЭлектронногоПисьма.ТолькоПросмотр = Истина;
		Элементы.ПолучателиКонтакт.РедактированиеТекста = Ложь;
		
		Элементы.ПолучателиТипПолучателяЭлектронногоПисьма.СписокВыбора.Добавить(
		Перечисления.ТипыПолучателейЭлектронногоПисьма.ОтКого, НСтр("ru = 'От кого:'"));
		
	КонецЕсли;
	
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	НастроитьФормуМобильныйКлиент();
	ТекущийЭлемент = Элементы.Получатели;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	НачатьОжиданиеЗавершенияДлительнойОперации();
	НачатьЗагрузкуСообщенияСПочтовогоСервера();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОповеститьОбИзменении(Объект.Ссылка);
	
	ОбновитьКонтактСтрокойНаКлиенте();
	
	#Если ВебКлиент Тогда
		ПодключитьОбработчикОжидания("УстановитьТекущийЭлементПисьма", 0.1, Истина);
	#Иначе
		УстановитьТекущийЭлементПисьма();
	#КонецЕсли
	
	УстановитьОтображениеДополнительныхКоманд();
	
	Если НЕ Объект.КонтактыПеренесены И Объект.УдалитьУчастники.Количество() > 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Контрагент" 
		ИЛИ ИмяСобытия = "Запись_КонтактноеЛицо" 
		ИЛИ ИмяСобытия = "Запись_Лид" Тогда
		ОбработатьЗаписьКонтактаCRM(Параметр);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ЗаполнитьДокументОснованиеПисьма(ТекущийОбъект);
	ДополнитьКартинкиHTML(ТекущийОбъект.КартинкиHTML.Получить());
	
	ПриСозданииПриЧтенииНаСервере(ТекущийОбъект);
	ПрочитатьВложения(Объект.Ссылка);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Элементы.АктивныйВидПисьма.Заголовок = "HTML" Тогда
		
		ТекстСПереопределеннымиКартинками = ГипертекстКлиент.ТелоHTMLСКартинкамиВДвоичныхДанных(ДокументHTML);
		Если ТекстСПереопределеннымиКартинками = Неопределено Тогда
			Отказ = Истина;
		КонецЕсли;
		
		ТекстПисьма = СтрШаблон("<html>%1</html>", ТекстСПереопределеннымиКартинками);
		ПараметрыЗаписи.Вставить("ТекстПисьма", ТекстПисьма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЭтоПисьмоВложение Тогда
		ТекстСообщения = НСтр("ru = 'Вложенные письма недоступны для записи.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСодержаниеПисьма(ТекущийОбъект, ПараметрыЗаписи);
	
	Если ТекущийОбъект.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Входящее
		ИЛИ ЗначениеЗаполнено(РегистрыСведений.ИдентификаторыСобытий.ИдентификаторСобытия(ТекущийОбъект.УчетнаяЗапись, ТекущийОбъект.Ссылка)) Тогда
		
		ПередЗаписьюНаСервереВходящегоСобытия(ТекущийОбъект);
	Иначе
		ПередЗаписьюНаСервереИсходящегоСобытия(ТекущийОбъект);
	КонецЕсли;
	
	ЗаполнитьКонтактыПисьма(ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если НЕ Константы.ПереносАдресатовЗавершен.Получить() Тогда
		
		ТаблицаСвязей = Новый ТаблицаЗначений;
		ТаблицаСвязей.Колонки.Добавить("ИндексСтроки");
		ТаблицаСвязей.Колонки.Добавить("КонтактCRM");
		
		Для Каждого Участник Из ТаблицаУчастников Цикл
			Если НЕ Участник.НеобходимоУстановитьСвязь Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ТаблицаСвязей.Добавить();
			НоваяСтрока.КонтактCRM = Участник.КонтактCRM;
			НоваяСтрока.ИндексСтроки = ТаблицаУчастников.Индекс(Участник);
		КонецЦикла;
		Если ТаблицаСвязей.Количество() > 0 Тогда
			ТекущийОбъект.ДополнительныеСвойства.Вставить("СвязиУчастников", ТаблицаСвязей);
		КонецЕсли;
	КонецЕсли;
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ВложенияПисьма = Вложения.Выгрузить();
	ТекущийОбъект.СохранитьВложения(ВложенияПисьма);
	Вложения.Очистить();
	
	Для Каждого Вложение Из ВложенияПисьма Цикл
		
		НовоеВложениеНаФорме = Вложения.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеВложениеНаФорме, Вложение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(КонтактИАдресЭПДляСопоставления) Тогда
		
		ЭлектроннаяПочтаУНФ.СопоставитьВФонеКонтактИАдресЭПВСобытиях(
		КонтактИАдресЭПДляСопоставления.Контакт,
		КонтактИАдресЭПДляСопоставления.АдресЭП,
		УникальныйИдентификатор);
		
		КонтактИАдресЭПДляСопоставления = Неопределено;
		
	КонецЕсли;
	
	Если НЕ Объект.ЗагрузитьПриОткрытии Тогда
		ДобавитьУчетнуюЗаписьВПолучатели();
	КонецЕсли;
	
	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьТаблицуУчастников(Объект);
	УстановитьСвязиСОбъектамиCRM();
	УстановитьКартинкиУчастников();
	
	Для Каждого Стр Из ТаблицаУчастников Цикл
		ОбновитьПредставлениеСтрокиПолучателя(Стр);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	Заголовок = "";
	АвтоЗаголовок = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПроверитьЗаполнениеОбязательныхРеквизитов(Отказ);
	
	Если Объект.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Входящее
		ИЛИ ЭтоОтправленноеИсходящееПисьмо Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаУчастников.Количество() = 1 
		И НЕ ЗначениеЗаполнено(ТаблицаУчастников[0].КакСвязаться) 
		И НЕ ЗначениеЗаполнено(ТаблицаУчастников[0].КонтактCRM) Тогда
		Возврат;
	КонецЕсли;
	
	МассивДублей  = Новый Массив;
	Для Каждого Участник Из ТаблицаУчастников Цикл
		
		Если НЕ ЗначениеЗаполнено(Участник.КакСвязаться) Тогда
			Индекс = ТаблицаУчастников.Индекс(Участник);
			ИмяРеквизита = "ТаблицаУчастников";
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Нельзя отправить письмо. Почтовый адрес контакта ""%1"" в строке %2 не указан.'"),
				?(ЗначениеЗаполнено(Участник.Контакт), Участник.Контакт, Участник.КонтактCRM), Индекс + 1),,,ИмяРеквизита);
			Отказ = Истина;
			Продолжить;
		КонецЕсли;
		
		ДублиКИ = ТаблицаУчастников.НайтиСтроки(Новый Структура("КакСвязаться", Участник.КакСвязаться));
		Если ДублиКИ.Количество() = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Если МассивДублей.Найти(Участник.КакСвязаться) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивДублей.Добавить(Участник.КакСвязаться);
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Нельзя отправить письмо. Почтовый адрес ""%1"" указан дважды.'"),
			Участник.КакСвязаться), , "Получатели");
			
	КонецЦикла;
	
	Если Отказ = Ложь И МассивДублей.Количество() > 0 Тогда
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТемаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	Если ТипЗнч(Объект.Тема) = Тип("СправочникСсылка.ТемыСобытий") И ЗначениеЗаполнено(Объект.Тема) Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.Тема);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ТемыСобытий.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Объект.Тема = ВыбранноеЗначение;
		ЗаполнитьСодержаниеСобытия(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание <> 0 И НЕ ПустаяСтрока(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьСписокВыбораТемы(Текст, ИсторияТемСтрокой);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьПриИзменении(Элемент)
	УчетнаяЗаписьПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПолучатели

&НаКлиенте
Процедура ПолучателиПослеУдаления(Элемент)
	Элементы.КоличествоПолучателей.Заголовок = СтрШаблон(НСтр("ru = 'Получатели: %1'"),
		ТаблицаУчастников.Количество());
	Элементы.КоличествоПолучателей.Видимость = ТаблицаУчастников.Количество() > 2;
	ПолучателиКонтактОбработкаПослеВыборкиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриИзменении(Элемент)
	
	Элементы.КоличествоПолучателей.Заголовок = СтрШаблон(НСтр("ru = 'Получатели: %1'"),
		ТаблицаУчастников.Количество());
	Элементы.КоличествоПолучателей.Видимость = ТаблицаУчастников.Количество() > 2;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
		
	ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.КонтактСтрокой) Тогда
		ТекущиеДанные.ИндексКартинки = 1;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ТипПолучателяЭлектронногоПисьма) Тогда
		ТекущиеДанные.ТипПолучателяЭлектронногоПисьма =
		ПредопределенноеЗначение("Перечисление.ТипыПолучателейЭлектронногоПисьма.Кому");
	КонецЕсли;
	
	Если РежимДобавленияАдресата Тогда
		Элемент.ТекущийЭлемент = Элементы.ПолучателиКонтакт;
		РежимДобавленияАдресата = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипКИ", "АдресЭлектроннойПочты");
	ПараметрыФормы.Вставить("АдресТаблицыВыбранныхАдресатов", АдресТаблицыДляАдреснойКниги());
	
	Если ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Контакт) Тогда
		
		Контакт = ТаблицаУчастников.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока).КонтактCRM;
		Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Контрагенты") Тогда
			ПараметрыФормы.Вставить("ТекущийКонтрагент", Контакт);
		КонецЕсли;
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучателиКонтактВыборЗавершение", ЭтаФорма);
	ОткрытьФорму("ОбщаяФорма.ФормаАдреснойКниги", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактОчистка(Элемент, СтандартнаяОбработка)
	
	Если Элементы.ПолучателиКакСвязаться.ТолькоПросмотр Тогда
		СтандартнаяОбработка = Ложь;
	Иначе
		Элементы.Получатели.ТекущиеДанные.ИндексКартинки = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Контакт)
		И НЕ ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.КонтактCRM) Тогда
		Возврат;
	КонецЕсли;
	
	ИндексСтроки = ТаблицаУчастников.Индекс(Элементы.Получатели.ТекущиеДанные);
	Если ЗначениеЗаполнено(ТаблицаУчастников[ИндексСтроки].КонтактCRM) Тогда
		Контакт = ТаблицаУчастников[ИндексСтроки].КонтактCRM;
	Иначе
		Контакт = ТаблицаУчастников[ИндексСтроки].Контакт;
	КонецЕсли;
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактыЛидов") Тогда
		ПоказатьЗначение(, ПолучитьЛидаПоКонтакту(Контакт));	
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.АдресатыПисем") Тогда
		ПоказатьМенюСозданияКонтакта(Элементы.Получатели);
	ИначеЕсли ТипЗнч(Контакт) = Тип("Строка") Тогда
		ПоказатьМенюСозданияКонтакта(Элементы.Получатели);
	Иначе
		ПоказатьЗначение(,Контакт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты")
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица")
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Лиды")
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		// Выбор осуществлен механизмом автоподбора
		ОбработатьВыборКонтактаИзСписка(ВыбранноеЗначение, Элементы.Получатели.ТекущиеДанные, Элемент.ТекстРедактирования);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.АдресатыПисем") Тогда
		
		ТекущийАдресат = Элементы.Получатели.ТекущиеДанные;
		Элементы.Получатели.ЗакончитьРедактированиеСтроки(Ложь);
		
		ТекущийАдресат.Контакт = ВыбранноеЗначение;
		ТекущийАдресат.КакСвязаться = КонтактКакСвязаться(ВыбранноеЗначение);
		
		ОбновитьПредставлениеСтрокиПолучателя(Элементы.Получатели.ТекущиеДанные);
		ПолучателиКонтактОбработкаПослеВыборкиНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Элементы.Получатели.ТекущаяСтрока = Неопределено Тогда
		Возврат
	КонецЕсли; 
	
	СтрокаДанных = ТаблицаУчастников.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		СтрокаДанных.КонтактCRM = Неопределено;
		СтрокаДанных.Контакт = "";
		СтрокаДанных.КакСвязаться = "";
		УстановитьКартинкиУчастников();
		Возврат;
	КонецЕсли;
	
	Если СтрДлина(Текст) < 2 Тогда
		Возврат;
	КонецЕсли;
	
	НовыйТекст = Текст;
	СтрокаДанных.КонтактCRM = Неопределено;
	СтрокаДанных.Контакт = "";

	Если ЗначениеЗаполнено(Текст) Тогда
		Если СтрНайти(Текст, ";") <> 0 Или СтрНайти(Текст, ",") <> 0 
			Или СтрНайти(Текст, "¶") <> 0 Тогда
			
			Адресаты = Текст;
			Адресаты = СтрЗаменить(Адресаты, ",", ";");
			Адресаты = СтрЗаменить(Адресаты, "¶", ";");
			Адресаты = ОбщегоНазначенияКлиентСервер.АдресаЭлектроннойПочтыИзСтроки(Адресаты);
			
			АдресВХранилище = ПолучитьТаблицуПолучателейИзСтроки(Адресаты,
			СтрокаДанных.ТипПолучателяЭлектронногоПисьма);
			ПолучателиИзСтрок(АдресВХранилище,);
			Возврат;
			
		КонецЕсли;
				
		РезультатВыбора = Неопределено;
		АдресатПисьма = ПолучитьДанныеАдресатов(Текст);
				
		Если АдресатПисьма.Количество() > 0 Тогда
			
			СтрокаДанных.Контакт = АдресатПисьма[0];
			СтрокаДанных.КакСвязаться = КонтактКакСвязаться(АдресатПисьма[0]);
			ПолучателиКонтактОбработкаПослеВыборкиНаСервере();
			ОбновитьПредставлениеСтрокиПолучателя(СтрокаДанных);
			Возврат;
			
		КонецЕсли;
		
		СтрокаДанных.КакСвязаться = СтрЗаменить(НовыйТекст,"<", "");
		СтрокаДанных.КакСвязаться = СтрЗаменить(НовыйТекст, ">", "");
		
		ПолучателиКонтактОбработкаПослеВыборкиНаСервере();
		ОбновитьПредставлениеСтрокиПолучателя(СтрокаДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборКонтактаИзСписка(ВыбранноеЗначение, СтрокаДанных, Текст)
	
	ЭлектронныеПочтыКонтакта = ПолучитьЭлектронныеПочтыАдресатовНаСервереБезКонтекста(ВыбранноеЗначение);
	
	ТекстРедактирования = Текст;
	Если СтрНайти(ТекстРедактирования, "@") <> 0 И ЭлектронныеПочтыКонтакта.Количество() > 1 Тогда
		
		УбратьДублиЭлектронныхПочтКонтакта(ЭлектронныеПочтыКонтакта, ТекстРедактирования);
		
	КонецЕсли;
	
	Если ЭлектронныеПочтыКонтакта.Количество() Тогда
		
		ТекущиеДанные = СтрокаДанных;
		Элементы.Получатели.ЗакончитьРедактированиеСтроки(Ложь);
		
		//часть контактов может быть еще не обновлена на новый справочник
		Если ЗначениеЗаполнено(ЭлектронныеПочтыКонтакта[0].АдресатСсылка) Тогда
			ТекущиеДанные.Контакт = ЭлектронныеПочтыКонтакта[0].АдресатСсылка;
			ТекущиеДанные.КакСвязаться = ЭлектронныеПочтыКонтакта[0].АдресЭП;
			ТекущиеДанные.КонтактCRM = ВыбранноеЗначение;
		Иначе
			ТекущиеДанные.Контакт = ЭлектронныеПочтыКонтакта[0].АдресЭП;
			ТекущиеДанные.КакСвязаться = ЭлектронныеПочтыКонтакта[0].АдресЭП;
			ТекущиеДанные.КонтактCRM = ВыбранноеЗначение;
			ТекущиеДанные.НеобходимоУстановитьСвязь = Истина;
		КонецЕсли;
				
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ТекущиеДанные.ЭтоСотрудник = Истина;
		КонецЕсли;
		
		ОбновитьПредставлениеСтрокиПолучателя(ТекущиеДанные);
		
		Для Н = 1 По ЭлектронныеПочтыКонтакта.ВГраница() Цикл
			НовСтр = ТаблицаУчастников.Добавить();
			НовСтр.ТипПолучателяЭлектронногоПисьма = ТекущиеДанные.ТипПолучателяЭлектронногоПисьма;
			
			//часть контактов может быть еще не обновлена на новый справочник
			Если ЗначениеЗаполнено(ЭлектронныеПочтыКонтакта[Н].АдресатСсылка) Тогда
				НовСтр.Контакт = ЭлектронныеПочтыКонтакта[Н].АдресатСсылка;
				НовСтр.КакСвязаться = ЭлектронныеПочтыКонтакта[Н].АдресЭП;
				НовСтр.КонтактCRM = ВыбранноеЗначение;
			Иначе
				ТекущиеДанные.Контакт = ЭлектронныеПочтыКонтакта[Н].АдресЭП;
				ТекущиеДанные.КакСвязаться = ЭлектронныеПочтыКонтакта[Н].АдресЭП;
				ТекущиеДанные.КонтактCRM = ВыбранноеЗначение;
				ТекущиеДанные.НеобходимоУстановитьСвязь = Истина;
			КонецЕсли;

			Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				ТекущиеДанные.ЭтоСотрудник = Истина;
			КонецЕсли;

			ОбновитьПредставлениеСтрокиПолучателя(НовСтр);
		КонецЦикла;
		
		ПолучателиКонтактОбработкаПослеВыборкиНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьДублиЭлектронныхПочтКонтакта(ЭлектронныеПочтыКонтакта, ТекстРедактирования)
	
	ДляУдаления = Новый Массив;
	Для Каждого ЭлЭлектроннаяПочта Из ЭлектронныеПочтыКонтакта Цикл
		Если СтрНайти(ЭлЭлектроннаяПочта.АдресЭП, ТекстРедактирования) = 0 Тогда
			ДляУдаления.Добавить(ЭлЭлектроннаяПочта);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлЭлектроннаяПочта Из ДляУдаления Цикл
		ЭлектронныеПочтыКонтакта.Удалить(ЭлектронныеПочтыКонтакта.Найти(ЭлЭлектроннаяПочта));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеСтрокиПолучателя(ТекСтр)
	
	ТекСтр.КонтактСтрокой = "";
	ТекСтр.КакСвязаться = СокрЛП(ТекСтр.КакСвязаться);
	
	Если ЗначениеЗаполнено(ТекСтр.КонтактCRM) Тогда
		Контакт = ТекСтр.КонтактCRM;
	Иначе
		Контакт = ТекСтр.Контакт
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакт)  Тогда
		ТекСтр.КонтактСтрокой = СтрШаблон(НСтр("ru = '%1 <%2>'"), Контакт, ТекСтр.КакСвязаться);
	ИначеЕсли ЗначениеЗаполнено(ТекСтр.КакСвязаться) Тогда
		ТекСтр.КонтактСтрокой = СтрШаблон(НСтр("ru = '%1 <%2>'"), ТекСтр.КакСвязаться, ТекСтр.КакСвязаться);
	Иначе
		ТекСтр.КонтактСтрокой = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучателиКонтактОбработкаПослеВыборкиНаСервере()
	
	УстановитьСвязиСОбъектамиCRM();
	УстановитьКартинкиУчастников();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЭлектронныеПочтыАдресатовНаСервереБезКонтекста(Контакт)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АдресатыПисем.Адресат КАК АдресЭП,
	|	АдресатыПисем.Ссылка КАК АдресатСсылка
	|ИЗ
	|	Справочник.АдресатыПисем КАК АдресатыПисем
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиАдресатКонтактCRM КАК СвязиАдресатКонтактCRM
	|		ПО (СвязиАдресатКонтактCRM.Адресат = АдресатыПисем.Ссылка)
	|ГДЕ
	|	СвязиАдресатКонтактCRM.КонтактCRM В(&Контакты)";
	
	Контакты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Контакт);
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Лиды") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Контакты,
			Справочники.КонтактыЛидов.КонтактыЛида(Контакт).ВыгрузитьКолонку("Ссылка"));
		КонецЕсли;
		
	Запрос.УстановитьПараметр("Контакты", Контакты);
	ТаблицаВсехЭлектронныхПочт = Запрос.Выполнить().Выгрузить();
	
	КоличествоАдресатов = ТаблицаВсехЭлектронныхПочт.Количество();
	
	Если КоличествоАдресатов = 0 И НЕ Константы.ПереносАдресатовЗавершен.Получить() Тогда
		ЭлектронныеПочтыКонтакта =  ПолучитьЭлектронныеПочтыКонтактаНаСервереБезКонтекста(Контакт);
		Для Каждого Почта Из ЭлектронныеПочтыКонтакта Цикл
			НоваяСтрока = ТаблицаВсехЭлектронныхПочт.Добавить();
			НоваяСтрока.АдресЭП = Почта;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаВсехЭлектронныхПочт);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЭлектронныеПочтыКонтактаНаСервереБезКонтекста(Контакт)
	
	ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.Лиды") Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКомпанииЛида;
	Иначе
		ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
	КонецЕсли;
	
	ТаблицаВсехЭлектронныхПочт = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Контакт, ВидКИ, ТекущаяДатаСеанса(), Ложь);
	
	ТаблицаВсехЭлектронныхПочт.Свернуть("Представление");
	
	Возврат ТаблицаВсехЭлектронныхПочт.ВыгрузитьКолонку("Представление");
	
КонецФункции

&НаКлиенте
Процедура ПолучателиКонтактАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если СтрНайти(Текст, ",") <> 0 ИЛИ СтрНайти(Текст, ";") <> 0 
		ИЛИ СтрНайти(Текст, "¶") <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Ожидание <> 0 И НЕ ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьСписокВыбораКонтактов(Текст, ДоступнаРаботаСЛидами);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ПолучателиКомандаCRM" Тогда
		
		СтрокаДанных = Элементы.Получатели.ТекущиеДанные;
		
		Если СтрокаДанных = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ИндексСтроки = ТаблицаУчастников.Индекс(СтрокаДанных);
		СписокДублей = ДублиПолучателей.НайтиСтроки(Новый Структура("ИндексПолучателя", ИндексСтроки));
		
		Если СписокДублей.Количество() > 0 Тогда
			
			СписокВыбораКонтактов = Новый СписокЗначений;
			ОповещениеОткрытьДубльПолучателя = Новый ОписаниеОповещения("ОткрытьДубльПолучателя", ЭтотОбъект);
			
			Для Каждого ДубльАдресата Из СписокДублей Цикл
				ПредставлениеДубля 	= СтрШаблон(НСтр("ru = '%1 <%2>'"), Строка(ДубльАдресата.ДубльПолучателя), Элементы.Получатели.ТекущиеДанные.КакСвязаться);
				КартинкаДубля 		= КартинкаКонтактаПоИндексу(ДубльАдресата.ИндексКартинки);
				
				СписокВыбораКонтактов.Добавить(ДубльАдресата.ДубльПолучателя, 
					ПредставлениеДубля, , КартинкаДубля);
					
			КонецЦикла;
				
			ПоказатьВыборИзСписка(ОповещениеОткрытьДубльПолучателя, СписокВыбораКонтактов, Элемент);
			
			Возврат;
			
		КонецЕсли;
		
		ПоказатьМенюСозданияКонтакта(Элемент);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередНачаломИзменения(Элемент, Отказ)
	
	АвтоматическиНачатоРедактированиеАдреса = Ложь;
	Если ЗначениеЗаполнено(Объект.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Возврат;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	РежимДобавленияАдресата = Истина;
	
	//Элементы.КоличествоПолучателей.Видимость = ТаблицаУчастников.Количество() >= 3;
	//Элементы.КоличествоПолучателей.Заголовок = СтрШаблон(НСтр("ru ='Получатели: %1'"), ТаблицаУчастников.Количество());
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередУдалением(Элемент, Отказ)
		
	Если Элементы.Получатели.ТекущиеДанные <> Неопределено Тогда
		
		Если ТаблицаУчастников.Количество() = Элементы.Получатели.ВыделенныеСтроки.Количество() Тогда
			
			Отказ = Истина;
			
			ЧислоУдаляемыхПолучателей = ТаблицаУчастников.Количество() - 1;
			
			Для Индекс = 0 По ЧислоУдаляемыхПолучателей - 1 Цикл
				ТаблицаУчастников.Удалить(ЧислоУдаляемыхПолучателей - Индекс);
			КонецЦикла;
			
			Если  ТаблицаУчастников.Количество() = 1 Тогда
				Строка = ТаблицаУчастников[0];
				Строка.КакСвязаться = "";
				Строка.Контакт = "";
				Строка.КонтактСтрокой = "";
				Строка.КонтактCRM = "";
				Строка.КомандаCRM = "";
				Строка.ИндексКартинки = 1;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТекстПисьмаДокументСформирован(Элемент)
	
	ДокументHTML = Элемент.Документ;
	ОкноHTMLДокумента = ДокументHTML.defaultView;
	
	ГипертекстКлиент.ПрименитьНастройкиОтображения(ДокументHTML);
	
	Если Объект.НачалоСобытия <> '00010101' Тогда
		ГипертекстКлиент.СтилизоватьПерепискуСЦитированием(ДокументHTML);
	Иначе
		ЗаписатьHTMLВИсторию();
	КонецЕсли;
	
	Если ТекущийЭлемент = Элемент Тогда
		ГипертекстКлиент.УстановитьКурсорВначале(ДокументHTML);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПисьмаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ЭлементыКомандВставкиТаблиц = Новый Массив;
	ЭлементыКомандВставкиТаблиц.Добавить(Элементы.КомандаВставитьТаблицу);
	
	ЭлементыКомандИзмененияТаблиц = Новый Массив;
	ЭлементыКомандИзмененияТаблиц.Добавить(Элементы.КомандаИзменитьТаблицу);
	ЭлементыКомандИзмененияТаблиц.Добавить(Элементы.ТекстПисьмаКонтекстноеМенюКомандаИзменитьТаблицу);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияДляЗаписиВИсторию", ЭтотОбъект);
	
	ГипертекстКлиент.ПолеHTMLДокументаПриНажатии(
		ДанныеСобытия,
		СтандартнаяОбработка,
		Элементы,
		НазваниеКоманднойПанели(),
		ЭлементыКомандВставкиТаблиц,
		ЭлементыКомандИзмененияТаблиц,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура НебезопасноеСодержимоеСообщениеНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОповещенияНебезопасноеСодержимое", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения,
		НСтр("ru = 'Для отображения всех картинок данные будут записаны. Продолжить?'"),
		РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВложения

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьВложение();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ДобавлениеФайлаКВложениям();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВложенияПеретаскиваниеЗавершение", ЭтотОбъект,
			Новый Структура("Имя", ПараметрыПеретаскивания.Значение.Имя));
		НачатьПомещениеФайла(ОписаниеОповещения, , ПараметрыПеретаскивания.Значение.ПолноеИмя, Ложь);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскиваниеЗавершение(Результат, АдресВременногоХранилища, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Файлы = Новый Массив;
	ПередаваемыйФайл = Новый ОписаниеПередаваемогоФайла(ДополнительныеПараметры.Имя, АдресВременногоХранилища);
	Файлы.Добавить(ПередаваемыйФайл);
	ДобавитьФайлыВСписок(Файлы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Отправить(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.УчетнаяЗапись)
		И ОбменСGoogleКлиентСервер.НеЗаполненТокенДоступа(СеансовыеДанные) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
		НСтр("ru = 'Выберите учетную запись для отправки почты.'"), ,
		"Объект.УчетнаяЗапись");
		Возврат;
	КонецЕсли;
	
	Если ДокументHTML = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Пожалуйста, подождите загрузку содержания письма'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	АдресаПолучателейКому = Новый Массив;
	ЗаполнитьАдресаПолучателейПоТипу(АдресаПолучателейКому,
	ПредопределенноеЗначение("Перечисление.ТипыПолучателейЭлектронногоПисьма.Кому"));
	
	Попытка
		ПриведенныйПочтовыйАдресКому = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(СтрСоединить(АдресаПолучателейКому, "; "));
	Исключение
		ОбщегоНазначенияКлиент.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	АдресаПолучателейКопия = Новый Массив;
	ЗаполнитьАдресаПолучателейПоТипу(АдресаПолучателейКопия,
	ПредопределенноеЗначение("Перечисление.ТипыПолучателейЭлектронногоПисьма.Копия"));
	
	Попытка
		ПриведенныйПочтовыйАдресКопия = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(СтрСоединить(АдресаПолучателейКопия, "; "));
	Исключение
		ОбщегоНазначенияКлиент.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	АдресаПолучателейСкрытаяКопия = Новый Массив;
	ЗаполнитьАдресаПолучателейПоТипу(АдресаПолучателейСкрытаяКопия,
	ПредопределенноеЗначение("Перечисление.ТипыПолучателейЭлектронногоПисьма.СкрытаяКопия"));
	
	Попытка
		ПриведенныйПочтовыйАдресСкрытаяКопия = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(
		СтрСоединить(АдресаПолучателейСкрытаяКопия, "; "));
	Исключение
		ОбщегоНазначенияКлиент.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжитьОтправкуПисьма", ЭтотОбъект);
	СписокОтветов = Новый СписокЗначений;
	СписокОтветов.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Продублировать отправку'"));
	СписокОтветов.Добавить(КодВозвратаДиалога.Отмена);
	Если ЗначениеЗаполнено(ИдентификаторСобытия) Тогда
		ПоказатьВопрос(
		ОписаниеОповещения,
		СтрШаблон(НСтр("ru = 'Это письмо уже отправлялось %1'"), Объект.НачалоСобытия),
		СписокОтветов, 30,
		КодВозвратаДиалога.Отмена,
		НСтр("ru = 'Это письмо уже отправлялось'"),
		КодВозвратаДиалога.Отмена)
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.ОК);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАдресаПолучателейПоТипу(АдресаПолучателей, ТипКонтакта)
	
	УчастникиПоТипу = ТаблицаУчастников.НайтиСтроки(Новый Структура("ТипПолучателяЭлектронногоПисьма", ТипКонтакта));
	Для Каждого Получатель Из УчастникиПоТипу Цикл
		Если ЗначениеЗаполнено(Получатель.КакСвязаться) Тогда
			АдресаПолучателей.Добавить(Получатель.КакСвязаться);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Ответить(Команда)
	
	Если ЭтоИсходящееПисьмо Тогда
		ОтветитьПереслать(ЭлектроннаяПочтаУНФКлиентСервер.КомандаОтветитьВсем());
	Иначе
		ОтветитьПереслать(ЭлектроннаяПочтаУНФКлиентСервер.КомандаОтветить());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Переслать(Команда)
	
	ОтветитьПереслать(ЭлектроннаяПочтаУНФКлиентСервер.КомандаПереслать());
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПисьмо(Команда)
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТипСобытия",
		ПолучитьТипСобытияПисьма());
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",Истина);
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);

	ОбработкаВыбора = Новый ОписаниеОповещения("ПолучитьПисьмаДляВложения", ЭтаФорма);

	ОткрытьФорму("Документ.Событие.ФормаВыбора",ПараметрыФормы,
	ЭтаФорма, , , , ОбработкаВыбора);
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьВсем(Команда)
	ОтветитьПереслать(ЭлектроннаяПочтаУНФКлиентСервер.КомандаОтветитьВсем());
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	ОткрытьВложение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыОснования(Команда)
	
	Если Объект.ДокументыОснования.Количество() <> 0 Тогда
		АдресВХранилищеДокументовОснований = ПоместитьДокументыОснованияВХранилище();
		ПараметрыФормы = Новый Структура("АдресВХранилищеДокументовОснований", АдресВХранилищеДокументовОснований);
		ОткрытьФорму("Документ.Событие.Форма.ДокументыОснованияЭлектронногоПисьма", ПараметрыФормы
		,,,,, Новый ОписаниеОповещения("ОткрытьДокументыОснованияЗавершение", ЭтотОбъект, Новый Структура("АдресВХранилищеДокументовОснований", АдресВХранилищеДокументовОснований)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОповещениеПослеВыбора = Новый ОписаниеОповещения("ВыборТипаОснованияЗавершение", ЭтотОбъект);
		СписокВыбора = ПолучитьСписокВыбораОснований();
		СписокВыбора.ПоказатьВыборЭлемента(ОповещениеПослеВыбора, НСтр("ru = 'Выберите тип данных'"), ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	Если Объект.ДокументыОснования.Количество() = 0 Тогда
		
		Участники = ПолучитьУчастниковСсылочногоТипа();
		
		Если Участники.Количество() = 0 Тогда
			
			ОткрытьВыборШаблонаПоПредмету();
			
		ИначеЕсли Участники.Количество() = 1 Тогда
			
			ОткрытьВыборШаблонаПоПредмету(Участники[0]);
			
		Иначе
			
			СписокПредметов = Новый СписокЗначений;
			СписокПредметов.ЗагрузитьЗначения(Участники);
			ОткрытьВыборПредметаШаблона(СписокПредметов);
			
		КонецЕсли;
		
	ИначеЕсли Объект.ДокументыОснования.Количество() = 1 Тогда
		
		ОткрытьВыборШаблонаПоПредмету(Объект.ДокументыОснования[0].ДокументОснование);
		
	Иначе
		
		СписокПредметов = Новый СписокЗначений;
		Для Каждого Основание Из Объект.ДокументыОснования Цикл
			СписокПредметов.Добавить(Основание.ДокументОснование);
		КонецЦикла;
		
		ОткрытьВыборПредметаШаблона(СписокПредметов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьПодпись(Команда)
	
	Если ДокументHTML = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Пожалуйста, подождите загрузку содержания письма'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВставитьПодписьЗавершение", ЭтотОбъект);
	ПараметрыПодписи = Новый Структура("ЭтоПересылкаОтветНаСообщение", ЭтоОтветНаПисьмо);
	ОткрытьФорму("Справочник.ПодписиПисем.Форма.ФормаВыбора", ПараметрыПодписи,
	ЭтаФорма, , , ,
	ОписаниеОповещения,
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПовторитьЗагрузкуСообщения(Команда)
	ПовторитьЗагрузкуСообщения();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКонтакты(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипКИ", "АдресЭлектроннойПочты");
	ПараметрыФормы.Вставить("АдресТаблицыВыбранныхАдресатов", АдресТаблицыДляАдреснойКниги());
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучателиКонтактВыборЗавершение", ЭтаФорма);
	ОткрытьФорму("ОбщаяФорма.ФормаАдреснойКниги", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", НаборСвойств_Документ_Событие);
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы, , , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлИзОснования(Команда)
	
	ОткрытьФормуРаботыСОснованиями(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлВОсновании(Команда)
	
	Если Элементы.Вложения.ВыделенныеСтроки.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нет файлов для сохранения.'"));
		Возврат;
	КонецЕсли;
	
	ВыбранныеПрисоединенныеФайлы = Новый Массив;
	Для каждого ИдентификаторСтроки Из Элементы.Вложения.ВыделенныеСтроки Цикл
		СтрокаТаблицы = Вложения.НайтиПоИдентификатору(ИдентификаторСтроки);
		ВыбранныеПрисоединенныеФайлы.Добавить(СтрокаТаблицы.Ссылка);
	КонецЦикла;
	
	Для каждого ВыбранныйФайл Из ВыбранныеПрисоединенныеФайлы Цикл
		Если НЕ ЗначениеЗаполнено(ВыбранныйФайл) Тогда
			ТекстПредупреждения = НСтр("ru='Письмо еще не записано.
			|Работа с присоединенными файлами возможна только после записи данных.
			|Письмо будет записано.'");
			ПредложитьСохранитьДокумент(ТекстПредупреждения);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ОткрытьФормуРаботыСОснованиями(Ложь, ВыбранныеПрисоединенныеФайлы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонтакт(Команда)
	
	ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИндексСтроки = ТаблицаУчастников.Индекс(Элементы.Получатели.ТекущиеДанные);
	Контакт = ТаблицаУчастников[ИндексСтроки].КонтактCRM;
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактыЛидов") Тогда
		ПоказатьЗначение(, ПолучитьЛидаПоКонтакту(Контакт));	
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.АдресатыПисем") Тогда
		ПоказатьМенюСозданияКонтакта(Элементы.Получатели.ТекущийЭлемент);	
	Иначе
		ПоказатьЗначение(,Контакт);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВажностьВысокая(Команда)
	
	Объект.Важность = ПредопределенноеЗначение("Перечисление.ВариантыВажности.Высокая");
	Элементы.ГруппаВажность.Картинка = БиблиотекаКартинок.ВосклицательныйЗнакКрасный;
	Элементы.ГруппаВажность.Подсказка = НСтр("ru = 'Высокая важность'");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВажностьНормальная(Команда)
	
	Объект.Важность = ПредопределенноеЗначение("Перечисление.ВариантыВажности.Обычная");
	Элементы.ГруппаВажность.Картинка = БиблиотекаКартинок.ВосклицательныйЗнакСерый;
	Элементы.ГруппаВажность.Подсказка = НСтр("ru = 'Обычная важность'");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВажностьНизкая(Команда)
	
	Объект.Важность = ПредопределенноеЗначение("Перечисление.ВариантыВажности.Низкая");
	Элементы.ГруппаВажность.Картинка = БиблиотекаКартинок.ВходящийЗапросГосИС;
	Элементы.ГруппаВажность.Подсказка = НСтр("ru = 'Низкая важность'");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлНаДиск(Команда)
	
	Если Элементы.Вложения.ТекущаяСтрока = Неопределено Тогда
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Файлы для сохранения не обнаружены'"));
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписьФайлаЗавершение", ЭтотОбъект);	
	
	Если Не ЗначениеЗаполнено(Элементы.Вложения.ТекущиеДанные.Ссылка) Тогда
		Если Элементы.Вложения.ВыделенныеСтроки.Количество() > 1 Тогда
			
			МассивДанных = Новый Массив;
			Для каждого ЭлементКоллекции Из Элементы.Вложения.ВыделенныеСтроки Цикл
				Вложение = Элементы.Вложения.ДанныеСтроки(ЭлементКоллекции);
				ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(
				Вложение.Представление,
				Вложение.АдресВоВременномХранилище);
				МассивДанных.Добавить(ОписаниеФайла);
			КонецЦикла;
			
			Если МассивДанных.Количество() > 0 Тогда
				ФайловаяСистемаКлиент.СохранитьФайлы(,МассивДанных);
			КонецЕсли;
		Иначе
			ФайловаяСистемаКлиент.СохранитьФайл(
			ОписаниеОповещения,
			Элементы.Вложения.ТекущиеДанные.АдресВоВременномХранилище,
			Элементы.Вложения.ТекущиеДанные.Представление);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если Элементы.Вложения.ВыделенныеСтроки.Количество() > 1 Тогда
		
		МассивСсылок = Новый Массив;
		Для каждого ЭлементКоллекции Из Элементы.Вложения.ВыделенныеСтроки Цикл
			МассивСсылок.Добавить(ЭлементКоллекции.Ссылка);
		КонецЦикла;
		
		ПолучаемыеФайлы = ПолучаемыеФайлы(МассивСсылок, УникальныйИдентификатор);
		
		Если МассивСсылок.Количество() > 0 Тогда
			ФайловаяСистемаКлиент.СохранитьФайлы(ОписаниеОповещения, ПолучаемыеФайлы);
		КонецЕсли;
	Иначе
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(
		Элементы.Вложения.ТекущиеДанные.Ссылка,
		УникальныйИдентификатор);
		РаботаСФайламиКлиент.СохранитьФайлКак(ДанныеФайла, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВсеФайлыНаДиск(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписьФайлаЗавершение", ЭтотОбъект);
	
	Если ЗначениеЗаполнено(Вложения) И Не ЗначениеЗаполнено(Вложения[0].Ссылка) Тогда
		
		МассивДанных = Новый Массив;
		Для Каждого ЭлементКоллекции Из Вложения Цикл
			ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(
			ЭлементКоллекции.Представление,
			ЭлементКоллекции.АдресВоВременномХранилище);
			МассивДанных.Добавить(ОписаниеФайла);
		КонецЦикла;
		
		ФайловаяСистемаКлиент.СохранитьФайлы(ОписаниеОповещения, МассивДанных);
		Возврат;
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	Для каждого ЭлементКоллекции Из Вложения Цикл
		МассивСсылок.Добавить(ЭлементКоллекции.Ссылка);
	КонецЦикла;
	
	ПолучаемыеФайлы = ПолучаемыеФайлы(МассивСсылок, УникальныйИдентификатор);
	
	ФайловаяСистемаКлиент.СохранитьФайлы(ОписаниеОповещения, ПолучаемыеФайлы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьКакПрочтенныеНепрочтенные(Команда)
	
	ПометитьКакПрочтенныеНепрочтенныеНаСервере(Объект.УчетнаяЗапись, Объект.Ссылка);
	ОповеститьОбИзменении(Тип("ДокументСсылка.Событие"));
	
	Если ПисьмоПросмотрено Тогда
		ЗаголовокОповещения = НСтр("ru = 'Письмо отмечено как просмотренное'");
	Иначе
		ЗаголовокОповещения = НСтр("ru = 'Письмо помечено как непрочитанное'");
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ЗаголовокОповещения,
		ПолучитьНавигационнуюСсылку(Объект.Ссылка),
		Объект.Ссылка,
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьКакСпамНеСпам(Команда)
	
	ПометитьКакСпамНеСпамНаСервереБезКонтекста(Объект.Ссылка, ПисьмоСпам);
	
	Если ПисьмоСпам Тогда
		ЗаголовокОповещения = НСтр("ru = 'Письмо отмечено как спам'");
	Иначе
		ЗаголовокОповещения = НСтр("ru = 'Письмо отмечено как не спам'");
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ЗаголовокОповещения,
	ПолучитьНавигационнуюСсылку(Объект.Ссылка),
	Объект.Ссылка,
	БиблиотекаКартинок.Информация32
	); 
	ОповеститьОбИзменении(Тип("ДокументСсылка.Событие"));
	
КонецПроцедуры

&НаКлиенте
Процедура АдреснаяКнига(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипКИ", "АдресЭлектроннойПочты");
	ПараметрыФормы.Вставить("АдресТаблицыВыбранныхАдресатов", АдресТаблицыДляАдреснойКниги());
	
	Если ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Контакт) Тогда
		
		Контакт = ТаблицаУчастников.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока).КонтактCRM;
		Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Контрагенты") Тогда
			ПараметрыФормы.Вставить("ТекущийКонтрагент", Контакт);
		КонецЕсли;
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучателиКонтактВыборЗавершение", ЭтаФорма);
	ОткрытьФорму("ОбщаяФорма.ФормаАдреснойКниги", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура КоличествоПолучателей(Команда)
	АдресТаблицыУчастников = АдресТаблицыУчатниковВоВременномХранилище();
	ПараметрыФормы = Новый Структура("АдресТаблицыУчастников", АдресТаблицыУчастников);
	ОткрытьФорму("Документ.Событие.Форма.СписокПолучателей", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСписокАдресатов(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучателиИзСтрок", ЭтаФорма);
	ОткрытьФорму("ОбщаяФорма.ОбработкаСпискаАдресовЭП", , ЭтаФорма, , , ,
	ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПросмотрФайлов(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Не ЭтоПисьмоВложение Тогда
			ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ВопросОЗаписиФайлаПослеЗакрытия", ЭтотОбъект);
			ТекстВопроса = НСтр("ru = 'Редактирование вложений доступно только после записи письма. Записать?'");
			ПоказатьВопрос(ОбработчикОповещенияОЗакрытии, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФормуПредпросмотраВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуФайла(Команда)
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПрисоединенныйФайл", ТекущиеДанные.Ссылка);
	ПараметрыФормы.Вставить("ТолькоПросмотр", Истина);
	
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныйФайл", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ВставитьФайлы(Команда)
	
	ПолучитьФайлыИзБуфера();
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьФайлы(Команда)
	
	Если Не ЗначениеЗаполнено(Элементы.Вложения.ВыделенныеСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	СкопироватьВыделенныеФайлы(Элементы.Вложения.ВыделенныеСтроки);
	ПоказатьОповещениеПользователя(
	НСтр("ru = 'Скопировать файлы'"),,
	НСтр("ru='Выделенные строки скопированы'"),
	БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

#Область КомандыHTMLПоля

&НаКлиенте
Процедура ОбработатьHTMLКоманду(Команда)
	
	ИмяКоманды = Команда.Имя;
	ВыполнитьHTMLКоманду(Сред(ИмяКоманды, 8, СтрДлина(ИмяКоманды)));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьШрифт(Команда)
	
	ГипертекстКлиент.ИзменитьШрифт(ПараметрыДляПередачиВМодульГипертекст());
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьШрифт(Команда)
	
	ГипертекстКлиент.ИзменитьРазмерШрифта(ПараметрыДляПередачиВМодульГипертекст(), 1);
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьШрифт(Команда)
	
	ГипертекстКлиент.ИзменитьРазмерШрифта(ПараметрыДляПередачиВМодульГипертекст(), -1);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветТекста(Команда)
	
	ГипертекстКлиент.ИзменитьЦветТекста(ПараметрыДляПередачиВМодульГипертекст(), "ВыбранныйЦветТекстаHTML");
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветФона(Команда)
	
	ГипертекстКлиент.ИзменитьЦветФонаСТаблицей(ПараметрыДляПередачиВМодульГипертекст(), "ВыбранныйЦветФонаHTML");
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьГиперссылку(Команда)
	
	ГипертекстКлиент.ВставитьГиперссылку(ПараметрыДляПередачиВМодульГипертекст());
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСимвол(Команда)
	
	ГипертекстКлиент.ВставитьСимвол(ПараметрыДляПередачиВМодульГипертекст());
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьИзменитьТаблицу(Команда)
	
	ГипертекстКлиент.ВставитьИзменитьТаблицу(ПараметрыДляПередачиВМодульГипертекст());
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТаблицу(Команда)
	
	ГипертекстКлиент.ИзменитьТаблицу(ПараметрыДляПередачиВМодульГипертекст());
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВставить(Команда)
	
	ГипертекстКлиент.КомандаВставить(ПараметрыДляПередачиВМодульГипертекст());
	
КонецПроцедуры

&НаКлиенте
Процедура Цитирование(Команда)
	
	ГипертекстКлиент.Цитировать(ПараметрыДляПередачиВМодульГипертекст());
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьИзображение(Команда)
	
	ГипертекстКлиент.ВставитьИзображение(ПараметрыДляПередачиВМодульГипертекст());
	
КонецПроцедуры

&НаКлиенте
Процедура МеждустрочныйИнтервал(Команда)
	
	ГипертекстКлиент.ИзменитьМеждустрочныйИнтервал(ПараметрыДляПередачиВМодульГипертекст());
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВернуть(Команда)
	ОкноHTMLДокумента.redo();
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтменить(Команда)
	ОкноHTMLДокумента.undo();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательHTML(Команда)
	
	Если Элементы.АктивныйВидПисьма.Заголовок = "HTML" Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОписаниеОповещенияПриПереключенииНаHTML", ЭтотОбъект);
	ГипертекстКлиент.ПереключательHTML(СодержаниеHTML, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательПростойТекст(Команда)
	
	ЗаголовокКоманды = НСтр("ru = 'Простой текст'");
	Если Элементы.АктивныйВидПисьма.Заголовок = ЗаголовокКоманды Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОписаниеОповещенияПриПереключенииНаПростойТекст", ЭтотОбъект);
	ГипертекстКлиент.ПереключательПростойТекст(ДокументHTML, ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция АдресТаблицыДляАдреснойКниги()
	
	ТаблицаУчастниковДляАдреснойКниги = ДанныеФормыВЗначение(ТаблицаУчастников, Тип("ТаблицаЗначений"));
	Возврат ПоместитьВоВременноеХранилище(ТаблицаУчастниковДляАдреснойКниги);
КонецФункции

#Область ДлительнаяОперация

&НаКлиенте
Процедура НачатьОжиданиеЗавершенияДлительнойОперации()
	
	Если Не ЗначениеЗаполнено(ДлительнаяОперацияЗавершение) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗавершенияДлительнойОперации", ЭтотОбъект);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияДлительнойОперации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперацияЗавершение = "ПолучитьСтатусПисьмаМассовойРассылкиЗавершение" Тогда
		ПолучитьСтатусПисьмаМассовойРассылкиЗавершение(Результат.АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МассоваяРассылкаСервиса

&НаСервере
Процедура ЗаполнитьДокументОснованиеПисьма(ТекущийОбъект)
	
	ДокументОснование = Неопределено;
	
	Если ТекущийОбъект.ДокументыОснования.Количество() = 1 Тогда
		ДокументОснование = ТекущийОбъект.ДокументыОснования[0].ДокументОснование;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПисьмоСозданоНаОснованииРассылкиСервиса()
	
	Возврат ЗначениеЗаполнено(ДокументОснование)
	И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.МассоваяРассылка")
	И ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "СервисРассылкиИдентификатор"));
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтатусПисьмаМассовойРассылки()
	
	Если Не ПисьмоСозданоНаОснованииРассылкиСервиса() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПодсказки = СтрШаблон(
	НСтр("ru='Письмо сформировано автоматически из <a href = ""%1"">%2</a>'"),
	ПолучитьНавигационнуюСсылку(ДокументОснование),
	Строка(ДокументОснование));
	Элементы.СтатусПисьмаПодсказка.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ТекстПодсказки);
	
	НачатьПолучениеСтатусаПисьмаМассовойРассылки();
	
КонецПроцедуры

&НаСервере
Процедура НачатьПолучениеСтатусаПисьмаМассовойРассылки()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = Ложь;
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьФункцию(
	ПараметрыВыполнения,
	"Документы.Событие.ЗагрузитьДанныеРассылкиСервисаДляДанныхФормы",
	ДокументОснование,
	Объект.Ссылка);
	ДлительнаяОперацияЗавершение = "ПолучитьСтатусПисьмаМассовойРассылкиЗавершение";
	
	Элементы.СтатусПисьмаМассовойРассылкиОжидание.Видимость = Истина;
	Элементы.СтатусПисьмаМассовойРассылки.Видимость = Ложь;
	Элементы.СодержаниеПисьма.ТекущаяСтраница = Элементы.Загрузка;
	Элементы.СтраницыВложения.ТекущаяСтраница = Элементы.СтраницаВложенияЗагрузка;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтатусПисьмаМассовойРассылкиЗавершение(АдресРезультата)
	
	ДанныеРассылки = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	СтатусПисьмаМассовойРассылки = "";
	Если ДанныеРассылки.Получатели.Количество() <> 0 Тогда
		СтатусПисьмаМассовойРассылки = ДанныеРассылки.Получатели[0].Состояние;
	КонецЕсли;
	
	СодержаниеHTML = ПредпросмотрВебВерсииПисьмаСервисаРассылок(ДанныеРассылки.ВнешниеСсылки.ВебВерсияПисьма);
	
	Элементы.СтатусПисьмаМассовойРассылки.Заголовок = СтатусПисьмаМассовойРассылки;
	Элементы.СтатусПисьмаМассовойРассылкиОжидание.Видимость = Ложь;
	Элементы.СтатусПисьмаМассовойРассылки.Видимость = Истина;
	Элементы.СодержаниеПисьма.ТекущаяСтраница = Элементы.HTML;
	Элементы.СтраницыВложения.ТекущаяСтраница = Элементы.СтраницаВложения;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредпросмотрВебВерсииПисьмаСервисаРассылок(Url)
	
	Если ЗначениеЗаполнено(Url) Тогда
		Возврат Url;
	Иначе
		ТекстПодсказки = НСтр("ru='Нет данных для просмотра письма, возможно сообщение еще не отправлялось.'");
		ПустойПредпросмотр =
		"<html>
		|<body>
		|<p>%1</p>
		|</body>
		|</html>";
		Возврат СтрШаблон(ПустойПредпросмотр, ТекстПодсказки);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СохранениеДобавлениеФайловВОснования

&НаКлиенте
Функция ПолучитьСписокВыбораОснований()

	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("Документ.АктВыполненныхРабот.ФормаВыбора", НСтр("ru = 'Акт выполненных работ'"));
	СписокВыбора.Добавить("Документ.ЗаданиеНаРаботу.ФормаВыбора", НСтр("ru = 'Задание на работу'"));
	СписокВыбора.Добавить("Документ.ЗаказНаПроизводство.ФормаВыбора", НСтр("ru = 'Заказ на производство'"));
	СписокВыбора.Добавить("Документ.ЗаказПокупателя.ФормаВыбора", НСтр("ru = 'Заказ покупателя'"));
	СписокВыбора.Добавить("Документ.ЗаказПоставщику.ФормаВыбора", НСтр("ru = 'Заказ поставщику'"));
	СписокВыбора.Добавить("Документ.ОтчетКомиссионера.ФормаВыбора", НСтр("ru = 'Отчет комиссионера'"));
	СписокВыбора.Добавить("Документ.ОтчетКомитенту.ФормаВыбора", НСтр("ru = 'Отчет комитенту'"));
	СписокВыбора.Добавить("Документ.ОтчетОПереработке.ФормаВыбора", НСтр("ru = 'Отчет о переработке'"));
	СписокВыбора.Добавить("Документ.ОтчетПереработчика.ФормаВыбора", НСтр("ru = 'Отчет переработчика'"));
	СписокВыбора.Добавить("Документ.ПлатежноеПоручение.ФормаВыбора", НСтр("ru = 'Платежное поручение'"));
	СписокВыбора.Добавить("Документ.ПоступлениеВКассу.ФормаВыбора", НСтр("ru = 'Поступление в кассу'"));
	СписокВыбора.Добавить("Документ.ПоступлениеНаСчет.ФормаВыбора", НСтр("ru = 'Поступление на счет'"));
	СписокВыбора.Добавить("Справочники.ПрайсЛисты.ФормаВыбора", НСтр("ru = 'Прайс-листы'"));
	СписокВыбора.Добавить("Документ.ПриемИПередачаВРемонт.ФормаВыбора", НСтр("ru = 'Прием и передача в ремонт'"));
	СписокВыбора.Добавить("Документ.ПриходнаяНакладная.ФормаВыбора", НСтр("ru = 'Приходная накладная'"));
	СписокВыбора.Добавить("Документ.МассоваяРассылка.ФормаВыбора", НСтр("ru = 'Рассылка E-mail, SMS'"));
	СписокВыбора.Добавить("Документ.РасходИзКассы.ФормаВыбора", НСтр("ru = 'Расход из кассы'"));
	СписокВыбора.Добавить("Документ.РасходСоСчета.ФормаВыбора", НСтр("ru = 'Расход со счета'"));
	СписокВыбора.Добавить("Документ.РасходнаяНакладная.ФормаВыбора", НСтр("ru = 'Расходная накладная'"));
	СписокВыбора.Добавить("Документ.СверкаВзаиморасчетов.ФормаВыбора", НСтр("ru = 'Сверка взаиморасчетов'"));
	СписокВыбора.Добавить("Документ.Событие.ФормаВыбора", НСтр("ru = 'Событие'"));
	СписокВыбора.Добавить("Документ.СчетНаОплату.ФормаВыбора", НСтр("ru = 'Счет на оплату'"));
	СписокВыбора.Добавить("Документ.СчетНаОплатуПоставщика.ФормаВыбора", НСтр("ru = 'Счет на оплату (полученный)'"));
	СписокВыбора.Добавить("Документ.СчетФактура.ФормаВыбора", НСтр("ru = 'Счет-фактура'"));
	
	Возврат СписокВыбора;
	
КонецФункции

&НаКлиенте
Процедура ВыборТипаОснованияЗавершение(ВыбранноеИмяФормы, Параметры) Экспорт
	
	Если ВыбранноеИмяФормы <> Неопределено Тогда
		
		СтруктураПараметровОтбора = Новый Структура();
				
		ПараметрыОткрытияФормы = Новый Структура();
		ПараметрыОткрытияФормы.Вставить("Отбор", СтруктураПараметровОтбора);
		
		Если ВыбранноеИмяФормы.Значение = "Документ.СчетНаОплату.ФормаВыбора" Тогда
			ПараметрыОткрытияФормы.Вставить("РежимВыбора", Истина);
		КонецЕсли;
		
		_ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
		ОткрытьФорму(ВыбранноеИмяФормы.Значение, ПараметрыОткрытияФормы, ЭтотОбъект, ,,,_ОповещениеОЗакрытии);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснованиеЗавершение(ВыбранноеЗначение, Параметры) Экспорт

	Если ВыбранноеЗначение <> Неопределено Тогда
		НовоеОснование = Объект.ДокументыОснования.Добавить();
		НовоеОснование.ДокументОснование = ВыбранноеЗначение;
		Модифицированность = Истина;
		УстановитьЗаголовокГиперссылкиДокументовОснований();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайловОснований(ВыбранныеПрисоединенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеПрисоединенныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПрисоединенныеФайлыВСписок(ВыбранныеПрисоединенныеФайлы);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПрисоединенныеФайлыВСписок(ВыбранныеПрисоединенныеФайлы)
	
	Для каждого ПрисоединенныйФайл Из ВыбранныеПрисоединенныеФайлы Цикл
		ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
		ПараметрыДанныхФайла = УникальныйИдентификатор;
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, ПараметрыДанныхФайла);
		
		Вложение = Вложения.Добавить();
		Вложение.Представление = ДанныеФайла.ИмяФайла;
		Вложение.АдресВоВременномХранилище = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
		Вложение.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
	КонецЦикла;
	
	НастроитьФормуМобильныйКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлыПослеВыбораОснования(ВыбранныйДокумент, ВыбранныеПрисоединенныеФайлы) Экспорт
	
	Если ВыбранныйДокумент = Неопределено Или ВыбранныйДокумент.Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьПрисоединенныйФайлИзВложенийВОбъекте(ВыбранныйДокумент.Значение, ВыбранныеПрисоединенныеФайлы);
	
	Если ВыбранныеПрисоединенныеФайлы.Количество() = 1 Тогда
		ТекстОповещения = НСтр("ru='Сохранение файла'");
	Иначе
		ТекстОповещения = НСтр("ru='Сохранение файлов'");
	КонецЕсли;
	ПоказатьОповещениеПользователя(
	ТекстОповещения,
	ПолучитьНавигационнуюСсылку(ВыбранныйДокумент.Значение),
	Строка(ВыбранныйДокумент.Значение));
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПрисоединенныйФайлИзВложенийВОбъекте(ВладелецФайлов, ВыбранныеПрисоединенныеФайлы)
	
	Для каждого ВыбранныйПрисоединенныйФайл Из ВыбранныеПрисоединенныеФайлы Цикл
		ДополнительныеПараметры = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
		ДополнительныеПараметры.ИдентификаторФормы = УникальныйИдентификатор;
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ВыбранныйПрисоединенныйФайл, ДополнительныеПараметры);
		
		ПараметрыДобавления = РаботаСФайлами.ПараметрыДобавленияФайла();
		ПараметрыДобавления.ВладелецФайлов = ВладелецФайлов;
		ПараметрыДобавления.ИмяБезРасширения = ДанныеФайла.ИмяФайла;
		ПараметрыДобавления.РасширениеБезТочки = ДанныеФайла.Расширение;
		ПараметрыДобавления.ВремяИзмененияУниверсальное = ДанныеФайла.ДатаМодификацииУниверсальная;
		РаботаСФайлами.ДобавитьФайл(ПараметрыДобавления, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРаботыСОснованиями(ВыборФайла, ВыбранныеПрисоединенныеФайлы = Неопределено)
	
	МассивУчастников = СписокКонтактовСДублями();
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВыборФайлов", ВыборФайла);
	ПараметрыОткрытия.Вставить("Основания", ДокументыОснованияСпискомЗначений());
	ПараметрыОткрытия.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("Участники", МассивУчастников);
	
	Если ВыборФайла Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьФайлыИзБазыЗавершение", ЭтотОбъект);
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьФайлыПослеВыбораОснования", ЭтотОбъект, ВыбранныеПрисоединенныеФайлы);
	КонецЕсли;
	ОткрытьФорму("Документ.Событие.Форма.ФормаЕдиногоВыбораФайла",ПараметрыОткрытия, ЭтаФорма, , , ,
	ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСHTML

&НаКлиенте
Процедура ОписаниеОповещенияПриПереключенииНаПростойТекст(Результат, ДополнительныеПараметры) Экспорт
	
	СодержаниеHTML = СокрП(ТекстИзHTML(Результат));
	ЗаписатьHTMLВИсторию();
	
	НастроитьФормуПоФорматуСодержания(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуПоФорматуСодержания(ЭтоФорматHTML = Истина)
	
	Если ЭтоФорматHTML И Элементы.АктивныйВидПисьма.Заголовок = "HTML" Тогда
		Возврат;
	ИначеЕсли Не ЭтоФорматHTML И Не Элементы.АктивныйВидПисьма.Заголовок = "HTML" Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.КоманднаяПанельТекстаПисьма.Видимость = ЭтоФорматHTML;
	Элементы.СодержаниеПисьма.ТекущаяСтраница = ?(ЭтоФорматHTML, Элементы.ТекстHTML, Элементы.ПростойТекст);
	Элементы.АктивныйВидПисьма.Заголовок = ?(ЭтоФорматHTML, "HTML", НСтр("ru = 'Простой текст'"));
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоФорматуСодержанияНаСервере(ЭтоФорматHTML = Истина)
	
	Если ЭтоФорматHTML И Элементы.АктивныйВидПисьма.Заголовок = "HTML" Тогда
		Возврат;
	ИначеЕсли Не ЭтоФорматHTML И Не Элементы.АктивныйВидПисьма.Заголовок = "HTML" Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.КоманднаяПанельТекстаПисьма.Видимость = ЭтоФорматHTML;
	Элементы.СодержаниеПисьма.ТекущаяСтраница = ?(ЭтоФорматHTML, Элементы.ТекстHTML, Элементы.ПростойТекст);
	Элементы.АктивныйВидПисьма.Заголовок = ?(ЭтоФорматHTML, "HTML", НСтр("ru = 'Простой текст'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОповещенияПриПереключенииНаHTML(ТекстПисьма, ДополнительныеПараметры) Экспорт
	
	ДобавитьJSКод(ТекстПисьма);
	
	СодержаниеHTML = ТекстПисьма;
	ЗаписатьHTMLВИсторию();
	
	НастроитьФормуПоФорматуСодержания(Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьJSКод(ТекстПисьма)
	
	Гипертекст.ДобавитьJSКод(ТекстПисьма);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыДляПередачиВМодульГипертекст()
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработчикОповещенияДляЗаписиВИсторию", ЭтотОбъект);
	
	Возврат ГипертекстКлиент.ПараметрыДляПередачи(
		ЭтотОбъект,
		ДокументHTML,
		"ТекстПисьма",
		НазваниеКоманднойПанели(),
		ОписаниеОповещения);
	
КонецФункции

&НаКлиенте
Процедура ОбработчикОповещенияДляЗаписиВИсторию(Результат, ДополнительныеПараметры) Экспорт
	ЗаписатьHTMLВИсторию();
КонецПроцедуры

// Записывает текст письма в историю для команд отмены/возврата (Ctrl+Z/Y)
&НаКлиенте
Процедура ЗаписатьHTMLВИсторию()
	
	ГипертекстКлиент.ЗаписатьHTMLВИсторию(ОкноHTMLДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьHTMLКоманду(НазваниеКоманды, Параметр = Неопределено)
	
	ГипертекстКлиент.ВыполнитьHTMLКоманду(НазваниеКоманды, ПараметрыДляПередачиВМодульГипертекст(), Параметр);
	
КонецПроцедуры

&НаКлиенте
Функция НазваниеКоманднойПанели()
	Возврат Элементы.КоманднаяПанельТекстаПисьма.Имя;
КонецФункции

&НаСервереБезКонтекста
Функция HTMLИзПростогоТекста(ПростойТекст, ПолныйHTML = Истина)
	Возврат ГипертекстВызовСервера.HTMLИзПростогоТекста(ПростойТекст, ПолныйHTML);
КонецФункции

&НаСервереБезКонтекста
Функция ТекстИзHTML(ТекстHTML)
	Возврат Гипертекст.ПолучитьТекстИзHTML(ТекстHTML);
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещенияНебезопасноеСодержимое(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ГипертекстКлиент.ПереопределитьHTTPИзАтрибута(ДокументHTML);
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.НебезопасноеСодержимое.Видимость = Ложь;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ЗаполнитьСодержание", Истина);
	Записать(ПараметрыЗаписи);
	
	ЗаписатьHTMLВИсторию();
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьСодержаниеПисьма(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьСодержание = Неопределено;
	ПараметрыЗаписи.Свойство("ЗаполнитьСодержание", ЗаполнитьСодержание);
	
	Если ЗаполнитьСодержание <> Неопределено И Не ЗаполнитьСодержание Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПисьма = Неопределено;
	ПараметрыЗаписи.Свойство("ТекстПисьма", ТекстПисьма);
	
	// Для записи со стороны сервера, так как ТекстПисьма получается из события ПередЗаписью
	Если Не ЗначениеЗаполнено(ТекстПисьма) Тогда
		
		Если Не ПустаяСтрока(СодержаниеHTML) Тогда
			ТекстПисьма = СодержаниеHTML;
			ЗаполнитьСодержание = Истина;
		Иначе
			ТекущийОбъект.СодержаниеHTML = "";
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗаполнитьСодержание = Неопределено
		И ТекущийОбъект.НачалоСобытия <> '00010101'
		И Не ТекущийОбъект.Ссылка.Пустая() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Элементы.АктивныйВидПисьма.Заголовок = "HTML" Тогда
		ТекстПисьма = Гипертекст.ОбработатьТекстHTML(ТекстПисьма, , ТаблицаВложений());
		ТекстПисьма = Гипертекст.ТекстHTMLСКартинкамиВДвоичныхДанных(ТекстПисьма);
	Иначе
		ТекстПисьма = HTMLИзПростогоТекста(ТекстПисьма, Истина);
	КонецЕсли;
	
	// Для сохранения возможности редактирования черновиков
	Если ТекущийОбъект.НачалоСобытия = '00010101' Тогда
		Если Не СтрНайти(ТекстПисьма, "contenteditable") Тогда
			ТекстПисьма = СтрЗаменить(ТекстПисьма, "<body", "<body contenteditable");
		КонецЕсли;
	Иначе
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "contenteditable", "");
	КонецЕсли;
	
	ТекущийОбъект.СодержаниеHTML = ТекстПисьма;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеАдресатов(Текст)
	
	Адресаты = Справочники.АдресатыПисем.АдресатыПисемПоКакСвязаться(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Текст));
	Возврат Адресаты.ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуПолучателейИзСтроки(Адресаты, ТипПолучателя)
	
	АдресВХранилище = ЭлектроннаяПочтаУНФ.АдресАдресатовВоВременномХранилище(Адресаты,
	ТипПолучателя);
	Возврат АдресВХранилище;
	
КонецФункции

&НаСервере
Функция АдресТаблицыУчатниковВоВременномХранилище()
	Возврат ПоместитьВоВременноеХранилище(ТаблицаУчастников.Выгрузить(), УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура УстановитьТекущийЭлементПисьма()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И ТаблицаУчастников.Количество() = 0 Тогда
		ПодключитьОбработчикОжидания("УстановитьТекущийЭлементПолучатель", 0.2, Истина);
	ИначеЕсли ЗначениеЗаполнено(Объект.Тема)
		И Не Объект.ЗагрузитьПриОткрытии
		И Элементы.СодержаниеПисьма.ТекущаяСтраница = Элементы.ТекстHTML Тогда
		
		ТекущийЭлемент = Элементы.ТекстПисьма;
		
	Иначе
		ТекущийЭлемент = Элементы.Тема;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементПолучатель();
	
	АвтоматическиНачатоРедактированиеАдреса = Истина;
	Элементы.Получатели.ДобавитьСтроку();
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеДополнительныхКоманд()
	
	Если Элементы.Найти("ПодменюОтчеты") <> Неопределено Тогда
		Элементы.Переместить(Элементы.ПодменюОтчеты, Элементы.ФормаГруппаПодменюНастройки);
	КонецЕсли;
	
	Если Элементы.Найти("РедактироватьСоставДополнительныхРеквизитов") <> Неопределено Тогда
		Элементы.Переместить(Элементы.РедактироватьСоставДополнительныхРеквизитов, 
			Элементы.ФормаГруппаПодменюНастройки);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
	"ПодменюПечатьОбычное_ПечатьСобытия", 
	"ПоложениеВКоманднойПанели", 
	ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПометитьКакПрочтенныеНепрочтенныеНаСервере(УчетнаяЗапись, Ссылка)
	
	ФлагиПисьма = РегистрыСведений.ФлагиПисем.ФлагиПисьма(Ссылка);
	Если ФлагиПисьма.Непрочитанное Тогда
		ФлагиПисьма.Непрочитанное = Ложь;
		РегистрыСведений.ФлагиПисем.ИзменитьФлагиПисьма(УчетнаяЗапись, Ссылка, ФлагиПисьма);
		ПисьмоПросмотрено = Истина;
	Иначе
		ФлагиПисьма.Непрочитанное = Истина;
		РегистрыСведений.ФлагиПисем.ИзменитьФлагиПисьма(УчетнаяЗапись, Ссылка, ФлагиПисьма);
		ПисьмоПросмотрено = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПометитьКакСпамНеСпамНаСервереБезКонтекста(Событие, ПисьмоСпам)
	
	ЭтоСпам = ЭлектроннаяПочтаУНФ.ЭтоСпам(Событие);
	Если НЕ ЭтоСпам Тогда
		ЭлектроннаяПочтаУНФ.ПометитьКакСпам(Событие);
		ПисьмоСпам = Истина;
	Иначе
		ЭлектроннаяПочтаУНФ.УбратьИзСпама(Событие);
		ПисьмоСпам = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено ИЛИ (ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() = 0)
		ИЛИ НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		ПутьДоКаталога = Результат[0].ПолноеИмя;
	Иначе
		ПутьДоКаталога = Результат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ПутьДоКаталога", ПутьДоКаталога);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьКаталогПриНажатии", ЭтотОбъект, ПараметрыОповещения);
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Сохранение файлов успешно завершено'"),
	ОписаниеОповещения,
	ПараметрыОповещения.ПутьДоКаталога,
	БиблиотекаКартинок.ВыполненоУспешно
	); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДубльПолучателя(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(,Результат.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогПриНажатии(ДополнительныеПараметры) Экспорт
	
	ФайловаяСистемаКлиент.ОткрытьПроводник(ДополнительныеПараметры.ПутьДоКаталога);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучаемыеФайлы(Знач МассивСсылок, Знач УникальныйИдентификатор)
	
	МассивВозврата = Новый Массив;
	Для каждого ЭлементКоллекции Из МассивСсылок Цикл
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ЭлементКоллекции, УникальныйИдентификатор);
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ДанныеФайла.ИмяФайла, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		МассивВозврата.Добавить(ОписаниеФайла);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНовоеПисьмоПоУмолчанию(Параметры)
	
	АвтоЗаголовок = Ложь;
	Заголовок = НСтр("ru = 'Исходящее письмо  (создание)'");
	
	Объект.НачалоСобытия = '00010101';
	Объект.ОкончаниеСобытия = '00010101';
	
	Если Не ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		Объект.УчетнаяЗапись = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Объект.Автор,
		"ОсновнаяУчетнаяЗаписьЭлектроннойПочты");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВводитсяНаОснованииПисьма(Знач Основание)
	
	ОснованиеЗаполнения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Основание, "ОснованиеЗаполнения");
	
	Если ТипЗнч(ОснованиеЗаполнения) = Тип("ДокументСсылка.Событие") Тогда
		
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеЗаполнения, "ТипСобытия") =
		Перечисления.ТипыСобытий.ЭлектронноеПисьмо;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбработатьПереданныеПараметры(Параметры)
	
	Если Не ЗначениеЗаполнено(Объект.Тема) Тогда
		Объект.Тема = Параметры.Тема;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.ДокументыОснования) = Тип("Массив") 
		ИЛИ ТипЗнч(Параметры.ДокументыОснования) = Тип("ФиксированныйМассив") Тогда
		
		ДопустимыеТипыОснований = 
		Метаданные.Документы.Событие.ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип;
		
		Для Каждого Документ Из Параметры.ДокументыОснования Цикл
			Если ДопустимыеТипыОснований.СодержитТип(ТипЗнч(Документ)) Тогда
				НоваяСтрока = Объект.ДокументыОснования.Добавить();
				НоваяСтрока.ДокументОснование = Документ;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.УчетнаяЗапись) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
			// учетная запись не передана - выбираем первую доступную
			
			ДоступныеУчетныеЗаписи = РаботаСПочтовымиСообщениями.ДоступныеУчетныеЗаписи(Истина);
			
			Если ДоступныеУчетныеЗаписи.Количество() > 0 Тогда
				
				Объект.УчетнаяЗапись = ДоступныеУчетныеЗаписи[0].Ссылка;
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Параметры.УчетнаяЗапись) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
		
		Объект.УчетнаяЗапись = Параметры.УчетнаяЗапись;
		
	КонецЕсли;
	
	ТипПолучателяЭлектронногоПисьмаКому = Перечисления.ТипыПолучателейЭлектронногоПисьма.Кому;
	
	Если ТипЗнч(Параметры.Кому) = Тип("СписокЗначений") Тогда
		Для Каждого ЭлементПочтовыйАдрес Из Параметры.Кому Цикл
			Адреса = ОбщегоНазначенияКлиентСервер.АдресаЭлектроннойПочтыИзСтроки(ЭлементПочтовыйАдрес.Значение);
			Для Каждого Адрес Из Адреса Цикл
				Если ЗначениеЗаполнено(Адрес.ОписаниеОшибки) Тогда
					Продолжить;
				КонецЕсли;
				НоваяСтрока = Объект.Участники.Добавить();
				НоваяСтрока.КакСвязаться = Адрес.Адрес;
				Если ЗначениеЗаполнено(Адрес.Псевдоним) Тогда
					НоваяСтрока.Контакт = Адрес.Псевдоним;
				КонецЕсли;
				НоваяСтрока.ТипПолучателяЭлектронногоПисьма = ТипПолучателяЭлектронногоПисьмаКому;
				ОбновитьПредставлениеСтрокиПолучателя(НоваяСтрока);
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Параметры.Кому) = Тип("Строка") Тогда
		
		Адреса = ОбщегоНазначенияКлиентСервер.АдресаЭлектроннойПочтыИзСтроки(Параметры.Кому);
		Для Каждого Адрес Из Адреса Цикл
			
			Если ЗначениеЗаполнено(Адрес.ОписаниеОшибки) Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока =  Объект.Участники.Добавить();
			НоваяСтрока.КакСвязаться = Адрес.Адрес;
			НоваяСтрока.ТипПолучателяЭлектронногоПисьма = ТипПолучателяЭлектронногоПисьмаКому;
			
			ОбновитьПредставлениеСтрокиПолучателя(НоваяСтрока);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Параметры.Кому) = Тип("Массив") Тогда
		МассивКакСвязаться = Новый Массив;
		Для Каждого СтруктураПолучателя Из Параметры.Кому Цикл
			Адреса = ОбщегоНазначенияКлиентСервер.АдресаЭлектроннойПочтыИзСтроки(СтруктураПолучателя.Адрес);
			Для Каждого Адрес Из Адреса Цикл
				МассивКакСвязаться.Добавить(Адрес.Адрес);
			КонецЦикла;
		КонецЦикла;
		АдресатыПисем = Справочники.АдресатыПисем.АдресатыПисемПоКакСвязаться(МассивКакСвязаться);
		
		Для Каждого СтруктураПолучателя Из Параметры.Кому Цикл
			Адреса = ОбщегоНазначенияКлиентСервер.АдресаЭлектроннойПочтыИзСтроки(СтруктураПолучателя.Адрес);
			Для Каждого Адрес Из Адреса Цикл
				
				НоваяСтрока = Объект.Участники.Добавить();
				СтрокаАдресат = АдресатыПисем.НайтиСтроки(Новый Структура("Адресат", НРег(СокрЛП(Адрес.Адрес))));
				
				Если СтрокаАдресат.Количество() > 0 Тогда
					НоваяСтрока.Контакт = СтрокаАдресат[0].Ссылка;
				Иначе
					НоваяСтрока.Контакт = Адрес.Адрес;
				КонецЕсли;
				
				Если СтруктураПолучателя.Свойство("ИсточникКонтактнойИнформации") 
					И ЗначениеЗаполнено(СтруктураПолучателя.ИсточникКонтактнойИнформации) Тогда
					НоваяСтрока.КонтактCRM = СтруктураПолучателя.ИсточникКонтактнойИнформации;
				КонецЕсли;
				
				НоваяСтрока.КакСвязаться = Адрес.Адрес;
				НоваяСтрока.ТипПолучателяЭлектронногоПисьма = ТипПолучателяЭлектронногоПисьмаКому;
				
				ОбновитьПредставлениеСтрокиПолучателя(НоваяСтрока);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьВложенияИзПараметров(Параметры);
	ЗаполнитьТекстПисьмаПоУмолчанию(Параметры);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекстПисьмаПоУмолчанию(Параметры)
	
	ДанныеИсходногоСообщения = ДанныеИсходногоСообщения();
	Если ЗначениеЗаполнено(ДанныеИсходногоСообщения) Тогда
		
		Параметры.Тема = Документы.Событие.ТемаСПрефиксомОтвета(
		ДанныеИсходногоСообщения.Тема,
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Параметры.ЗначенияЗаполнения,
		"Команда",
		ЭлектроннаяПочтаУНФКлиентСервер.КомандаОтветить()));
		
		ЗаполнитьТекстОтвета(ДанныеИсходногоСообщения);
		
	Иначе
		ЗаполнитьТекстНовогоПисьма(Параметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекстНовогоПисьма(Параметры)
	
	Подпись = "";
	Если Параметры <> Неопределено И ВключатьПодписьДляНовыхСообщений(Параметры) Тогда
		
		СтруктураПодписи = Справочники.ПодписиПисем.ПолучитьПодпись(Объект.УчетнаяЗапись);
		Если СтруктураПодписи <> Неопределено И СтруктураПодписи.ВключатьПодписьДляНовыхСообщений Тогда
			
			КартинкиHTML = Новый Структура;
			СтруктураПодписи.ПодписьДляНовыхФорматированныйДокумент.Получить().ПолучитьHTML(Подпись, КартинкиHTML);
			
			ТекстHTMLИзФорматированногоДокументаПеревестиВОбычныйHTML(Подпись, КартинкиHTML);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстПисьма = "";
	Если Параметры.Свойство("Тело") Тогда
		
		ЗаполненоПростымТекстом = ЗаполнитьТелоНовогоПисьмаПоПараметрам(ТекстПисьма, Параметры);
		Если ЗаполненоПростымТекстом Тогда
			Объект.СодержаниеHTML = ТекстПисьма;
			НастроитьФормуПоФорматуСодержанияНаСервере(Ложь);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстПисьма = СтрШаблон("
	|<html>
	|	<body contenteditable style=""line-height: 1.15;"">
	|	%1
	|	%2
	|	<div><br></div>
	|	</body>
	|</html>", Подпись, ТекстПисьма);
	
	ДобавитьJSКод(ТекстПисьма);
	
	Объект.СодержаниеHTML = ТекстПисьма;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьТелоНовогоПисьмаПоПараметрам(ТелоПисьма, Параметры)
	
	Тело = "";
	Параметры.Свойство("Тело", Тело);
	Если ПустаяСтрока(Тело) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не СтрНайти(ВРег(Тело), ВРег("doctype html")) Тогда
		ТелоПисьма = Тело;
		Возврат Истина;
	КонецЕсли;
	
	ТелоПисьма = Гипертекст.РазложитьТекстHTML(Тело).Тело;
	
	ТелоПисьма = СтрЗаменить(ТелоПисьма, "<p", "<div");
	ТелоПисьма = СтрЗаменить(ТелоПисьма, "</p>", "</div>");
	
	ВложенияВПараметрах = Неопределено;
	Параметры.Свойство("Вложения", ВложенияВПараметрах);
	Если ТипЗнч(ВложенияВПараметрах) = Тип("Массив") Тогда
		
		Для Каждого Вложение Из ВложенияВПараметрах Цикл
			ТелоПисьма = СтрЗаменить(ТелоПисьма,
				Вложение.Представление, Вложение.АдресВоВременномХранилище);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ВключатьПодписьДляНовыхСообщений(Параметры)
	
	Если Параметры.Свойство("Тело") 
		И ЗначениеЗаполнено(Параметры.Тело) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Параметры.ЗначенияЗаполнения.Свойство("Команда") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВводитсяНаОснованииПисьма(Параметры.Основание) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Ложь;
	
	СтруктураПодписи = Справочники.ПодписиПисем.ПолучитьПодпись(Объект.УчетнаяЗапись);
	Если СтруктураПодписи <> Неопределено Тогда
		Результат = СтруктураПодписи.ВключатьПодписьДляНовыхСообщений;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТекстОтвета(ДанныеИсходногоСообщения)
	
	Если ЗначениеЗаполнено(ДанныеИсходногоСообщения.СодержаниеHTML) Тогда
		ТекстHTML = ДанныеИсходногоСообщения.СодержаниеHTML;
	Иначе
		ТекстHTML = HTMLИзПростогоТекста(ДанныеИсходногоСообщения.Содержание);
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("СодержаниеHTML", ТекстHTML);
	ДанныеЗаполнения.Вставить("НачалоСобытия", ДанныеИсходногоСообщения.НачалоСобытия);
	
	ОтКого = Неопределено;
	ДанныеИсходногоСообщения.Свойство("ОтКого", ОтКого);
	ДанныеЗаполнения.Вставить("ОтКого", ОтКого);
	
	ЗаполнитьОтветКакГипертекст(ДанныеЗаполнения);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьОтветКакГипертекст(ДанныеЗаполнения)
	
	Шаблон = "
	|<html>
	|	<body contenteditable style=""line-height: 1.15;"">
	|		%1
	|		<div><br></div>
	|		<blockquote>%2%3</blockquote>
	|		<div><br></div>
	|	</body>
	|</html>";
	
	// Подпись
	СтруктураПодписи = Справочники.ПодписиПисем.ПолучитьПодпись(Объект.УчетнаяЗапись);
	Если СтруктураПодписи <> Неопределено И (СтруктураПодписи.ВключатьПодписьПриОтветеИлиПересылке) Тогда
		
		ПодписьПриОтветеHTML = "";
		КартинкиHTML = Новый Структура;
		ФД = СтруктураПодписи.ПодписьПриОтветеФорматированныйДокумент.Получить();
		ФД.ПолучитьHTML(ПодписьПриОтветеHTML, КартинкиHTML);
		
		ТекстHTMLИзФорматированногоДокументаПеревестиВОбычныйHTML(ПодписьПриОтветеHTML, КартинкиHTML);
		
	Иначе
		ПодписьПриОтветеHTML = "";
	КонецЕсли;
	
	// Блок информации об отправителе
	БлокКонтакта = "";
	ОтКого = Неопределено;
	Если ДанныеЗаполнения.Свойство("ОтКого", ОтКого) Тогда
		
		ШаблонКонтакта = "<div>%1 %2 %3</div><br>";
		
		ПредставлениеДаты = Формат(
			ДанныеЗаполнения.НачалоСобытия,
			НСтр("ru = 'ДФ=''ddd, dd MMM yyyy ""г."", HH:mm'''"));
		
		ОтКого = СтрЗаменить(ОтКого, "<", "&lt;");
		ОтКого = СтрЗаменить(ОтКого, ">", "&gt;");
		
		БлокКонтакта = СтрШаблон(ШаблонКонтакта,
			ПредставлениеДаты,
			НСтр("ru = 'от'"),
			ОтКого);
		
	КонецЕсли;
	
	// Цитируемое письмо
	ЦитируемыйТекст = Гипертекст.РазложитьТекстHTML(ДанныеЗаполнения.СодержаниеHTML).Тело;
	
	// Готовый текст ответа
	ТекстОтвета = СтрШаблон(
		Шаблон,
		ПодписьПриОтветеHTML,
		БлокКонтакта,
		ЦитируемыйТекст);
	
	ДобавитьJSКод(ТекстОтвета);
	
	Объект.СодержаниеHTML = ТекстОтвета;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВложенияИзПараметров(Параметры)
	
	Если ТипЗнч(Параметры.Вложения) <> Тип("СписокЗначений")
		И ТипЗнч(Параметры.Вложения) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	КартинкиИзВложений = Новый Структура;
	
	Для Каждого Вложение Из Параметры.Вложения Цикл
		
		Если ТипЗнч(Параметры.Вложения) = Тип("СписокЗначений") Тогда
			
			ОписаниеВложения = Вложения.Добавить();
			ОписаниеВложения.Представление = Вложение.Представление;
			ЧастиИмениФайла = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Вложение.Представление, ".", Ложь);
			
			Если ЧастиИмениФайла.Количество() > 1 Тогда
				РасширениеБезТочки = ЧастиИмениФайла[ЧастиИмениФайла.Количество()-1];
				ОписаниеВложения.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(РасширениеБезТочки);
			КонецЕсли;
			
			Если ТипЗнч(Вложение.Значение) = Тип("ДвоичныеДанные") Тогда
				ОписаниеВложения.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Вложение.Значение, УникальныйИдентификатор);
			ИначеЕсли ЭтоАдресВременногоХранилища(Вложение.Значение) Тогда
				ОписаниеВложения.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(
				ПолучитьИзВременногоХранилища(Вложение.Значение), УникальныйИдентификатор);
			Иначе
				ОписаниеВложения.ПутьКФайлу = Вложение.Значение;
			КонецЕсли;
			
		Иначе // ТипЗнч(Параметры.Вложения) = "массив структур"
			
			Если Вложение.Свойство("Идентификатор") И ЗначениеЗаполнено(Вложение.Идентификатор) Тогда
				КартинкиИзВложений.Вставить(
				Вложение.Представление,
				Новый Картинка(ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище)));
				
			Иначе
				
				ОписаниеВложения = Вложения.Добавить();
				ЗаполнитьЗначенияСвойств(ОписаниеВложения, Вложение);
				
				ЧастиИмениФайла = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеВложения.Представление, ".", Ложь);
				Если ЧастиИмениФайла.Количество() > 1 Тогда
					РасширениеБезТочки = ЧастиИмениФайла[ЧастиИмениФайла.Количество()-1];
					
					// АПК:278-выкл Используется механизм БСП обращения к картинке по индексу.
					ОписаниеВложения.ИндексКартинки = 
					РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(РасширениеБезТочки);
					// АПК:278-вкл
				КонецЕсли;
				
				Если Не ПустаяСтрока(ОписаниеВложения.АдресВоВременномХранилище) Тогда
					ОписаниеВложения.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(
					ПолучитьИзВременногоХранилища(ОписаниеВложения.АдресВоВременномХранилище), УникальныйИдентификатор);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДополнитьКартинкиHTML(КартинкиИзВложений);
	
КонецПроцедуры

&НаСервере
Функция СформироватьПараметрыПисьмаНаСервере(
	ПриведенныйПочтовыйАдресКому,
	ПриведенныйПочтовыйАдресКопия,
	ПриведенныйПочтовыйАдресСкрытаяКопия,
	Знач ТекстПисьма = Неопределено)
	
	ПараметрыПисьма = Новый Структура;
	
	Если ЗначениеЗаполнено(ПриведенныйПочтовыйАдресКому) Тогда
		ПараметрыПисьма.Вставить("Кому", ПриведенныйПочтовыйАдресКому);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПриведенныйПочтовыйАдресКопия) Тогда
		ПараметрыПисьма.Вставить("Копии", ПриведенныйПочтовыйАдресКопия);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Тема) Тогда
		ПараметрыПисьма.Вставить("Тема", Строка(Объект.Тема));
	КонецЕсли;
	
	АдресПолучателяСкрытойКопии = ПолучитьАдресПолучателяСкрытойКопии();
	
	Если ЗначениеЗаполнено(АдресПолучателяСкрытойКопии) Тогда
		ПриведенныйПочтовыйАдресСкрытаяКопияДоп = 
		ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(АдресПолучателяСкрытойКопии);
		Для Каждого СтрАдрес Из ПриведенныйПочтовыйАдресСкрытаяКопияДоп Цикл
			ПриведенныйПочтовыйАдресСкрытаяКопия.Добавить(СтрАдрес);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПриведенныйПочтовыйАдресСкрытаяКопия) Тогда
		ПараметрыПисьма.Вставить("СлепыеКопии", ПриведенныйПочтовыйАдресСкрытаяКопия);
	КонецЕсли;
	
	ИдентификаторОснования = ИдентификаторыОснований(Истина);
	Если ЗначениеЗаполнено(ИдентификаторОснования) Тогда
		ПараметрыПисьма.Вставить("ИдентификаторОснования", ИдентификаторОснования);
	КонецЕсли;
	
	ИдентификаторыОснований = ИдентификаторыОснований(Ложь);
	Если ЗначениеЗаполнено(ИдентификаторыОснований) Тогда
		ПараметрыПисьма.Вставить("ИдентификаторыОснований", ИдентификаторыОснований);
	КонецЕсли;
	
	ВложенияПисьма = Новый Соответствие;
	ДобавитьВложенияФайлыНаСервере(ВложенияПисьма);
	
	Если СтрНайти(ТекстПисьма, "<html") Тогда
		ПараметрыПисьма.Вставить("ТипТекста", "HTML");
		Гипертекст.ПеренестиКартинкиВСоответствие(ТекстПисьма, ВложенияПисьма);
	Иначе
		ПараметрыПисьма.Вставить("ТипТекста", "ПростойТекст");
	КонецЕсли;
	
	ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
	ПараметрыПисьма.Вставить("Вложения", ВложенияПисьма);
	
	Возврат ПараметрыПисьма;
	
КонецФункции

&НаСервере
Функция ИдентификаторыОснований(ТолькоОдин)
	
	Основания = Новый Массив;
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Основания.Добавить(Объект.ДокументОснование);
	КонецЕсли;
	
	ДокументыОснования = Объект.ДокументыОснования.Выгрузить().ВыгрузитьКолонку("ДокументОснование");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Основания, ДокументыОснования, Истина);
	
	МассивИдентификаторов = РегистрыСведений.ИдентификаторыСообщений.ИдентификаторыСообщений(Объект.УчетнаяЗапись, Основания);
	Если Не ЗначениеЗаполнено(МассивИдентификаторов) Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = Новый Массив;
	
	Для Каждого ТекИдентификатор Из МассивИдентификаторов Цикл
		
		Если Не ЗначениеЗаполнено(ТекИдентификатор) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(СтрШаблон("<%1>", ТекИдентификатор));
		
		Если ТолькоОдин Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрСоединить(Результат, " ");
	
КонецФункции

&НаСервереБезКонтекста
Функция ОтправитьПочтовоеСообщение(Знач ПараметрыПисьма, Знач УчетнаяЗапись, Знач СеансовыеДанные)
	
	Возврат ЭлектроннаяПочтаУНФ.ОтправитьПочтовоеСообщение(ПараметрыПисьма, УчетнаяЗапись);
	
КонецФункции

&НаКлиенте
Процедура ПолучателиКонтактВыборЗавершение(АдресВХранилище, ДополнительныеПараметры) Экспорт
	
	Если ЭтоАдресВременногоХранилища(АдресВХранилище) Тогда
		
		ЗаблокироватьДанныеФормыДляРедактирования();
		Модифицированность = Истина;
		ЗаполнитьКонтактыПоАдреснойКниге(АдресВХранилище);
		Элементы.Получатели.ЗакончитьРедактированиеСтроки(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиИзСтрок(АдресВХранилище, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресВХранилище) Тогда 
		Возврат;
	КонецЕсли;
	
	ПолучитьСписокКонтактовИзСкопированныхАдресатов(АдресВХранилище);
	
	Если ЭтоАдресВременногоХранилища(АдресВХранилище) Тогда 
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АдресВХранилище", АдресВХранилище);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьСписокВариантов", ЭтаФорма);
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораВариантовПолучателей", ПараметрыФормы, ЭтаФорма,
		, , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
	Элементы.Получатели.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлыИзБазыЗавершение(АдресВХранилище, ДополнительныеПараметры) Экспорт
	
	Если Не ЭтоАдресВременногоХранилища(АдресВХранилище) Тогда 
		Возврат;
	КонецЕсли;
	ЗаполнитьВложенияВыбраннымиФайлами(АдресВХранилище);
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотрВложенийЗавершение(АдресВХранилище, ДополнительныеПараметры) Экспорт
	
	Если Не ЭтоАдресВременногоХранилища(АдресВХранилище) Тогда 
		Возврат;
	КонецЕсли;
	
	ОбновитьВложения(АдресВХранилище);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСписокВариантов(АдресВХранилище, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресВХранилище) Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьКонтактыВариантамиПолучателей(АдресВХранилище);
	Элементы.Получатели.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтактыВариантамиПолучателей(АдресВХранилище)
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	Модифицированность = Истина;
	
	ТаблицаАдресатов = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	ОбработатьТекущуюСтроку = Элементы.Получатели.ТекущаяСтрока <> Неопределено;
	
	Для Каждого ПодобраннаяСтрока Из ТаблицаАдресатов Цикл
		
		СтрокаУчастники = Неопределено;
		
		Если ОбработатьТекущуюСтроку Тогда
			ОбработатьТекущуюСтроку = Ложь;
			СтрокаУчастники = ТаблицаУчастников.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
		КонецЕсли;
		
		Если СтрокаУчастники <> Неопределено 
			И ЗначениеЗаполнено(СтрокаУчастники.КонтактСтрокой) Тогда
			СтрокаУчастники = Неопределено;
		КонецЕсли;
		
		Если СтрокаУчастники = Неопределено Тогда
			СтрокаУчастники = ТаблицаУчастников.Добавить();
		КонецЕсли;
		
		СтрокаУчастники.Контакт = ПодобраннаяСтрока.Контакт;
		СтрокаУчастники.КакСвязаться = ПодобраннаяСтрока.АдресЭП;
		СтрокаУчастники.КонтактCRM = ПодобраннаяСтрока.КонтактCRM;
		
		Если ТипЗнч(СтрокаУчастники.КонтактCRM) = Тип("СправочникСсылка.Сотрудники") Тогда
			СтрокаУчастники.ЭтоФизическоеЛицо = Истина;
		КонецЕсли;
		
		СтрокаУчастники.ТипПолучателяЭлектронногоПисьма = ПодобраннаяСтрока.ТипПолучателя;
		
		ОбновитьПредставлениеСтрокиПолучателя(СтрокаУчастники);
		
	КонецЦикла;
	
	ПолучателиКонтактОбработкаПослеВыборкиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВложенияВыбраннымиФайлами(АдресВХранилище)
	
	МассивВложений = ПолучитьИзВременногоХранилища(АдресВХранилище);
	СтруктураВложений = Новый Структура("Вложения", МассивВложений);
	ЗаполнитьВложения(СтруктураВложений);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВложения(АдресВХранилище);
	
	ТаблицаВложенийИзПросмотра = ПолучитьИзВременногоХранилища(АдресВХранилище);
	Для Каждого Вложение Из ТаблицаВложенийИзПросмотра Цикл 
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище);
		Вложение.АдресВоВременномХранилище =
		ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	КонецЦикла;
	ЗначениеВРеквизитФормы(ТаблицаВложенийИзПросмотра, "Вложения");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтактСтрокойТаблицы(Строка, ТипПолучателя)
	
	ОбработатьТекущуюСтроку = Элементы.Получатели.ТекущаяСтрока <> Неопределено;
	
	СтрокаУчастники = Неопределено;
	
	Если ОбработатьТекущуюСтроку Тогда
		ОбработатьТекущуюСтроку = Ложь;
		СтрокаУчастники = ТаблицаУчастников.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
	КонецЕсли;
	
	Если СтрокаУчастники <> Неопределено
		И ЗначениеЗаполнено(СтрокаУчастники.КакСвязаться) Тогда
		СтрокаУчастники = Неопределено;
	КонецЕсли;
	
	Если СтрокаУчастники = Неопределено Тогда
		СтрокаУчастники = ТаблицаУчастников.Добавить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Строка.Контакт) Тогда
		СтрокаУчастники.КакСвязаться = Строка.АдресЭП;
		СтрокаУчастники.Контакт = Строка.Псевдоним;
	Иначе 
		СтрокаУчастники.Контакт = Строка.Контакт;
		СтрокаУчастники.КакСвязаться = Строка.АдресЭП;
		СтрокаУчастники.КонтактCRM = Строка.КонтактCRM;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаУчастники.КонтактCRM) = Тип("СправочникСсылка.Сотрудники") Тогда
		СтрокаУчастники.ЭтоФизическоеЛицо = Истина;
	КонецЕсли;
	
	СтрокаУчастники.ТипПолучателяЭлектронногоПисьма = ТипПолучателя;
	
	ОбновитьПредставлениеСтрокиПолучателя(СтрокаУчастники);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтактыПоАдреснойКниге(АдресВХранилище)
	
	ТаблицаАдресатов = ПолучитьИзВременногоХранилища(АдресВХранилище);
	АдресатыПолучателей = ПолучитьАдресатовПоКонтактам(ТаблицаАдресатов.ВыгрузитьКолонку("Контакт"));
	
	ОбработатьТекущуюСтроку = Элементы.Получатели.ТекущаяСтрока <> Неопределено;
	Если ТаблицаАдресатов.Количество() > 0 Тогда
		ТаблицаУчастников.Очистить();
	КонецЕсли;
	
	Для Каждого ПодобраннаяСтрока Из ТаблицаАдресатов Цикл
		СтрокаУчастники = Неопределено;
		
		НайденныеАдресаты = ТаблицаУчастников.НайтиСтроки(Новый Структура("КонтактCRM, КакСвязаться", ПодобраннаяСтрока.Контакт, ПодобраннаяСтрока.КакСвязаться));
		
		Если НайденныеАдресаты.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныеАдресаты = ТаблицаУчастников.НайтиСтроки(Новый Структура("Контакт", ПодобраннаяСтрока.КакСвязаться));
		
		Если НайденныеАдресаты.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;

		Если СтрокаУчастники = Неопределено Тогда
			СтрокаУчастники = ТаблицаУчастников.Добавить();
		КонецЕсли;
		
		МассивАдресатов = АдресатыПолучателей.НайтиСтроки(Новый Структура("КонтактCRM, Адресат", ПодобраннаяСтрока.Контакт, ПодобраннаяСтрока.КакСвязаться));
		Если МассивАдресатов.Количество() > 0 Тогда
			СтрокаУчастники.Контакт = МассивАдресатов[0].АдресатСсылка;
			СтрокаУчастники.КонтактCRM = ПодобраннаяСтрока.Контакт;
			СтрокаУчастники.КакСвязаться = ПодобраннаяСтрока.КакСвязаться;
		Иначе
			СтрокаУчастники.Контакт = ПодобраннаяСтрока.Контакт;
			СтрокаУчастники.КакСвязаться = ПодобраннаяСтрока.КакСвязаться;
			СтрокаУчастники.КонтактCRM = ПодобраннаяСтрока.Контакт;
			СтрокаУчастники.НеобходимоУстановитьСвязь = Истина;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаУчастники.КонтактCRM) = Тип("СправочникСсылка.Сотрудники") Тогда
			СтрокаУчастники.ЭтоФизическоеЛицо = Истина;
		КонецЕсли;
		
		СтрокаУчастники.ТипПолучателяЭлектронногоПисьма = ПодобраннаяСтрока.ТипПолучателя;
		
		ОбновитьПредставлениеСтрокиПолучателя(СтрокаУчастники);
		
	КонецЦикла;
	
	ПолучателиКонтактОбработкаПослеВыборкиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьВложения(Событие)
	
	Вложения.Очистить();
	
	ВложенияСобытия = Документы.Событие.ВложенияСобытия(Событие, УникальныйИдентификатор);
	Для Каждого ТекОписаниеВложения Из ВложенияСобытия Цикл
		НоваяСтрокаВложения = Вложения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаВложения, ТекОписаниеВложения);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВложенияФайлыНаСервере(ВложенияПисьма)
	
	Для Каждого Вложение Из Вложения Цикл
		ОписаниеВложения = Новый Структура("ДвоичныеДанные, Идентификатор");
		ОписаниеВложения.ДвоичныеДанные = ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище);
		ОписаниеВложения.Идентификатор = "";
		Если СтрНайти(Вложение.Представление, ".eml") <> 0 Тогда
			ОписаниеВложения.Вставить("ЭтоПисьмоВложение", Истина);
		КонецЕсли;
		ВложенияПисьма.Вставить(Вложение.Представление, ОписаниеВложения);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаКВложениям()
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ДобавитьФайлВоВложенияПриПомещенииФайлов", ЭтотОбъект);
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.Диалог.МножественныйВыбор = Истина;
	
	ФайловаяСистемаКлиент.ЗагрузитьФайлы(ОбработчикЗавершения, ПараметрыЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлВоВложенияПриПомещенииФайлов(ПомещенныеФайлы, Параметры) Экспорт
	
	Если ПомещенныеФайлы = Неопределено Или ПомещенныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьФайлыВСписок(ПомещенныеФайлы);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФайлыВСписок(ПомещенныеФайлы)
	
	Для Каждого ОписаниеФайла Из ПомещенныеФайлы Цикл
		
		Файл = Новый Файл(ОписаниеФайла.Имя);
		ПозицияТочки = СтрНайти(Файл.Расширение, ".");
		РасширениеБезТочки = Сред(Файл.Расширение, ПозицияТочки + 1);
		
		Вложение = Вложения.Добавить();
		Вложение.Представление = Файл.Имя;
		Вложение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(
		ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение), УникальныйИдентификатор);
		Вложение.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(РасширениеБезТочки);
		Вложение.ЭтоВложениеЭлектронногоПисьма = Истина;
		
	КонецЦикла;
	
	НастроитьФормуМобильныйКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложение()
	
	Если Элементы.Вложения.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеВложение = Вложения.НайтиПоИдентификатору(Элементы.Вложения.ТекущаяСтрока);
	
	Если ЗначениеЗаполнено(ВыбранноеВложение.Письмо) Тогда
		ПоказатьЗначение(, ВыбранноеВложение.Письмо);
		Возврат;
	КонецЕсли;
	
	Расширение = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ВыбранноеВложение.Представление);
	Если Расширение = "eml" Или ВыбранноеВложение.Представление = ".eml" Тогда
		ПараметрыФормы = ДанныеДляОткрытияПисьмаВложения(
		ВыбранноеВложение.АдресВоВременномХранилище,
		ВыбранноеВложение.Представление);
		
		ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, Истина);
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
		ПолучитьФайл(ВыбранноеВложение.АдресВоВременномХранилище, ВыбранноеВложение.Представление, Истина);
	#Иначе
		ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
		СоздатьКаталог(ИмяВременнойПапки);
		
		ИмяВременногоФайла = 
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ВыбранноеВложение.Представление;
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ВыбранноеВложение.АдресВоВременномХранилище);
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
		Файл = Новый Файл(ИмяВременногоФайла);
		Файл.УстановитьТолькоЧтение(Истина);
		Если Файл.Расширение = ".mxl" Тогда
			ТабличныйДокумент = ПолучитьТабличныйДокументПоДвоичнымДанным(ВыбранноеВложение.АдресВоВременномХранилище);
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("ИмяДокумента", ВыбранноеВложение.Представление);
			ПараметрыОткрытия.Вставить("ТабличныйДокумент", ТабличныйДокумент);
			ПараметрыОткрытия.Вставить("ПутьКФайлу", ИмяВременногоФайла);
			ОткрытьФорму("ОбщаяФорма.РедактированиеТабличногоДокумента", ПараметрыОткрытия, ЭтотОбъект);
		Иначе
			ФайловаяСистемаКлиент.ОткрытьФайл(ИмяВременногоФайла);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция АдресТаблицВложений()

	ТаблицаЗначений = РеквизитФормыВЗначение("Вложения", Тип("ТаблицаЗначений"));
	Адрес = ПоместитьВоВременноеХранилище(ТаблицаЗначений, УникальныйИдентификатор);
	Возврат Адрес;

КонецФункции

&НаСервере
Функция ПолучитьТипСобытияПисьма()
	
	Возврат Перечисления.ТипыСобытий.ЭлектронноеПисьмо;
	
КонецФункции

&НаСервере
Функция ДанныеДляОткрытияПисьмаВложения(Знач АдресВоВременномХранилище, Знач Представление)
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	ВременныйФайл = ПолучитьИмяВременногоФайла("eml");
	ДвоичныеДанные.Записать(ВременныйФайл);

	ИнтернетПочтовоеСообщение = Новый ИнтернетПочтовоеСообщение;
	ИнтернетПочтовоеСообщение.УстановитьИсходныеДанные(ДвоичныеДанные);
		
	ВложенияПисьма = Новый Массив;
	Для Каждого Вложение Из ИнтернетПочтовоеСообщение.Вложения Цикл
		СтруктураВложения = Новый Структура("Данные, Идентификатор, Имя, ТипСодержимого");
		ЗаполнитьЗначенияСвойств(СтруктураВложения, Вложение);
		СтруктураВложения.Вставить("ЭтоВложениеПисьмаВложения", Истина);
		Если ТипЗнч(СтруктураВложения.Данные) = Тип("ИнтернетПочтовоеСообщение") Тогда
			СтруктураВложения.Данные = СтруктураВложения.Данные.ПолучитьИсходныеДанные();
			СтруктураВложения.Вставить("ЭтоПисьмо", Истина);
		КонецЕсли;
		ВложенияПисьма.Добавить(СтруктураВложения);
	КонецЦикла;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИмяДокумента", Представление);
	ПараметрыОткрытия.Вставить("ИнтернетПочтовоеСообщение", ДвоичныеДанные);
	ПараметрыОткрытия.Вставить("ПутьКФайлу", ВременныйФайл);
	ПараметрыОткрытия.Вставить("ТипСобытия", ПолучитьТипСобытияПисьма());
	ПараметрыОткрытия.Вставить("Вложения", ВложенияПисьма);
	ПараметрыОткрытия.Вставить("ЭтоОткрытиеСтороннегоВложенногоПисьма", Истина);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ПараметрыОткрытия);
	ПараметрыФормы.Вставить("ЭтоОткрытиеПисьмаВложения", Истина);
	
	Возврат ПараметрыФормы;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТабличныйДокументПоДвоичнымДанным(Знач ДвоичныеДанные)
	
	Если ТипЗнч(ДвоичныеДанные) = Тип("Строка") Тогда
		// передан адрес двоичных данных во временном хранилище
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДвоичныеДанные);
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("mxl");
	ДвоичныеДанные.Записать(ИмяФайла);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(ИмяФайла);
	
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
		ИмяСобытия = НСтр("ru = 'Получение табличного документа'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , 
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаСервере
Функция ПоместитьДокументыОснованияВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(
	Объект.ДокументыОснования.Выгрузить(,
	"ДокументОснование"
	),
	УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ЗначенияОснований()
	
	Возврат ПоместитьВоВременноеХранилище(
	ДокументыОснованияСпискомЗначений(),
	УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьДокументыОснованияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	АдресВХранилищеДокументовОснований = ДополнительныеПараметры.АдресВХранилищеДокументовОснований;
	
	Если Результат = КодВозвратаДиалога.OK Тогда
		Модифицированность = Истина;
		ПолучитьДокументыОснованияИзХранилища(АдресВХранилищеДокументовОснований);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДокументыОснованияИзХранилища(АдресВХранилищеДокументовОснований)
	
	ТаблицаДокументыОснования = ПолучитьИзВременногоХранилища(АдресВХранилищеДокументовОснований);
	Объект.ДокументыОснования.Очистить();
	Для каждого СтрокаДокументыОснования Из ТаблицаДокументыОснования Цикл
		Строка = Объект.ДокументыОснования.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, СтрокаДокументыОснования);
	КонецЦикла;
	
	УстановитьЗаголовокГиперссылкиДокументовОснований();
	
КонецПроцедуры // ПолучитьДокументыОснованияИзХранилища()

&НаКлиенте
Процедура ВопросОЗаписиФайлаПослеЗакрытия(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Записать();
	КонецЕсли;
	
	ОткрытьФормуПредпросмотраВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПредпросмотраВложений()
	
	СтруктураДанных = ПолучитьДанныеВложенийОснованийИУчастников();
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("Основание", СтруктураДанных.АдресДокументовОснования);
	ПараметрыОткрытия.Вставить("Вложения", СтруктураДанных.АдресВХранилище);
	ПараметрыОткрытия.Вставить("Участники", СтруктураДанных.Участники);
	ПараметрыОткрытия.Вставить("РедактированиеРазрешено", Не ЭтоПисьмоВложение И Объект.НачалоСобытия = Дата('00010101'));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПросмотрВложенийЗавершение", ЭтаФорма);
	
	#Если МобильныйКлиент Тогда
		ОткрытьФорму("Документ.Событие.Форма.МобильнаяФормаЕдиногоПросмотраВложений", ПараметрыОткрытия, ЭтаФорма, Истина,,,ОписаниеОповещения);
		Возврат;
	#КонецЕсли
	ОткрытьФорму("Документ.Событие.Форма.ФормаЕдиногоПросмотраВложений", ПараметрыОткрытия, ЭтаФорма, Истина,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеВложенийОснованийИУчастников()
	
	АдресВХранилище = АдресТаблицВложений();
	АдресДокументовОснования = ЗначенияОснований();
	
	Результат = Новый Структура;
	Результат.Вставить("АдресДокументовОснования", АдресДокументовОснования);
	Результат.Вставить("АдресВХранилище", АдресВХранилище);
	Результат.Вставить("Участники", СписокКонтактовСДублями());
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовокГиперссылкиДокументовОснований()
	
	Если Объект.ДокументыОснования.Количество() = 0 Тогда
		Элементы.ОткрытьДокументыОснования.Заголовок = НСтр("ru = 'выбрать'");
		Возврат;
	КонецЕсли;
	
	ПервыйДокумент = Объект.ДокументыОснования[0].ДокументОснование;
	
	Если Объект.ДокументыОснования.Количество() = 1 Тогда
		Элементы.ОткрытьДокументыОснования.Заголовок = ПервыйДокумент;
		Возврат;
	КонецЕсли;
	
	ОснованияПрописью = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(";%1 основание;;%1 основания;%1 оснований;%1 основания", Объект.ДокументыОснования.Количество() - 1);
	Элементы.ОткрытьДокументыОснования.Заголовок = СтрШаблон(НСтр("ru = '%1 и еще %2.'"), ПервыйДокумент, ОснованияПрописью);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьАдресПолучателяСкрытойКопии()
	
	Возврат УправлениеНебольшойФирмойВзаимодействия.ПолучитьАдресПолучателяСкрытойКопии();
	
КонецФункции

&НаСервере
Процедура СохранитьКонтактнуюИнформациюПолучателейПисьма()
	СобытиеОбъект = РеквизитФормыВЗначение("Объект");
	СобытиеОбъект.СохранитьКонтактнуюИнформациюПолучателейПисьма();
КонецПроцедуры

&НаСервереБезКонтекста
Функция КонтактКакСвязаться(ЭлементАдресата)
	
	АдресЭП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементАдресата, "Адресат");
	Возврат АдресЭП;
	
КонецФункции

&НаСервере
Процедура УчетнаяЗаписьПриИзмененииНаСервере()
	
	Если ОбменСGoogle.ЭтоУчетнаяЗаписьGoogle(Объект.УчетнаяЗапись) Тогда
		СеансовыеДанные = РегистрыСведений.СеансовыеДанныеGoogle.СеансовыеДанные(
		Пользователи.ТекущийПользователь(),
		Перечисления.ОбластиДоступаGoogle.Почта,
		Объект.УчетнаяЗапись);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьПереслать(ПараметрКоманды)
	
	ОтКого = ОтКогоПоУчастникам();
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", Новый Структура);
	ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("Команда", ПараметрКоманды);
	ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("ТипСобытия", ПредопределенноеЗначение("Перечисление.ТипыСобытий.ЭлектронноеПисьмо"));
	ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("ОснованиеЗаполнения", Объект.Ссылка);
	ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("ПараметрыОснования", Новый Структура);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("НачалоСобытия", Объект.НачалоСобытия);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("СписокУчастников", Объект.СписокУчастников);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("ОтКого", ОтКого);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("Тема", Объект.Тема);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("Содержание", Объект.Содержание);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("СодержаниеHTML", Объект.СодержаниеHTML);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("КартинкиHTML", КартинкиHTML);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("ИсточникПривлечения", Объект.ИсточникПривлечения);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("ЗагрузитьПриОткрытии", Объект.ЗагрузитьПриОткрытии);
	
	Если ПараметрКоманды = ЭлектроннаяПочтаУНФКлиентСервер.КомандаПереслать()
		И Вложения.Количество() > 0 Тогда
		ПараметрыОткрытия.Вставить("Вложения", Новый СписокЗначений);
		Для Каждого ТекВложение Из Вложения Цикл
			ПараметрыОткрытия.Вложения.Добавить(ТекВложение.АдресВоВременномХранилище, ТекВложение.Представление);
		КонецЦикла;
	КонецЕсли;
	
	ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыОткрытия);
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Функция ОтКогоПоУчастникам()
	
	Для Каждого Участник Из Объект.Участники Цикл
		Если Участник.ТипПолучателяЭлектронногоПисьма
			= ПредопределенноеЗначение("Перечисление.ТипыПолучателейЭлектронногоПисьма.ОтКого") Тогда
			
			Если ПустаяСтрока(Участник.КонтактCRM) Тогда
				Контакт = Участник.Контакт;
			Иначе
				Контакт = Участник.КонтактCRM;
			КонецЕсли;
			
			Возврат СтрШаблон("%1 <%2>", Контакт, Участник.КакСвязаться);
			
		КонецЕсли;
	КонецЦикла;
	
	ЗначенияРеквизитов = ЗначенияРеквизитовУчетнойЗаписи(Объект.УчетнаяЗапись);
	ИмяПользователя = ЗначенияРеквизитов.ИмяПользователя;
	АдресЭлектроннойПочты = ЗначенияРеквизитов.АдресЭлектроннойПочты;
	
	Если ПустаяСтрока(ИмяПользователя) Тогда
		ИмяПользователя = АдресЭлектроннойПочты;
	КонецЕсли;
	
	Возврат СтрШаблон("%1 <%2>", ИмяПользователя, АдресЭлектроннойПочты);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначенияРеквизитовУчетнойЗаписи(УчетнаяЗапись)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяЗапись, "ИмяПользователя, АдресЭлектроннойПочты");
	
КонецФункции

&НаКлиенте
Процедура ПовторитьЗагрузкуСообщения()
	
	Элементы.СодержаниеПисьма.ТекущаяСтраница = Элементы.Загрузка;
	
	Если Не ЗначениеЗаполнено(ДанныеИсходногоСообщения) Тогда
		Элементы.СтраницыВложения.ТекущаяСтраница = Элементы.СтраницаВложенияЗагрузка;
	КонецЕсли;
	
	НачатьЗагрузкуСообщенияСПочтовогоСервера();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеУчетнойЗаписи(Результат, Параметры) Экспорт
	
	Оповестить(ЭлектроннаяПочтаУНФКлиентСервер.ИмяСобытияУчетнаяЗаписьОбновлена(), Объект.УчетнаяЗапись);
	ПовторитьЗагрузкуСообщения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗапросаТокена(Результат, Параметры) Экспорт
	
	СеансовыеДанные = Результат;
	
	Если ОбменСGoogleКлиентСервер.НеЗаполненТокенДоступа(СеансовыеДанные) Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("ОбновитьСеансовыеДанные", СеансовыеДанные);
	ПовторитьЗагрузкуСообщения();
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьКартинкиHTML(Знач Источник)
	
	Если КартинкиHTML = Неопределено Тогда
		КартинкиHTML = Новый Структура;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ХранилищеЗначения") Тогда
		Источник = Источник.Получить();
	КонецЕсли;
	
	Если ТипЗнч(Источник) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(КартинкиHTML, Источник, Истина);
	
КонецПроцедуры

&НаСервере
Функция ДанныеИсходногоСообщения()
	
	Если Параметры.ЗначенияЗаполнения.Свойство("ПараметрыОснования")
		И ТипЗнч(Параметры.ЗначенияЗаполнения.ПараметрыОснования) = Тип("Структура") Тогда
		ПереопределитьИдентификаторыКартинокHTML(Параметры.ЗначенияЗаполнения.ПараметрыОснования);
		Возврат Параметры.ЗначенияЗаполнения.ПараметрыОснования;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.Основание) <> Тип("Структура") Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	ОснованиеЗаполнения = Неопределено;
	Параметры.Основание.Свойство("ОснованиеЗаполнения", ОснованиеЗаполнения);
	
	Если ТипЗнч(ОснованиеЗаполнения) <> Тип("ДокументСсылка.Событие") Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
	ОснованиеЗаполнения,
	"ТипСобытия,НачалоСобытия,СписокУчастников,Тема,Содержание,СодержаниеHTML,КартинкиHTML,УчетнаяЗапись,ЗагрузитьПриОткрытии");
	
	Если Результат.ТипСобытия <> Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	ЗначениеКартинкиHTML = Результат.КартинкиHTML.Получить();
	Если ТипЗнч(ЗначениеКартинкиHTML) = Тип("Структура") Тогда
		Результат.КартинкиHTML = ЗначениеКартинкиHTML;
	Иначе
		Результат.КартинкиHTML = Новый Структура;
	КонецЕсли;
	
	Результат.Вставить("Ссылка", ОснованиеЗаполнения);
	
	Если ЗначениеЗаполнено(Результат.СодержаниеHTML) Тогда
		ПереопределитьИдентификаторыКартинокHTML(Результат);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат.Содержание)
		И Не ЗначениеЗаполнено(Результат.СодержаниеHTML) Тогда
		Результат.Вставить("ИдентификаторСобытия",
		РегистрыСведений.ИдентификаторыСобытий.ИдентификаторСобытия(Результат.УчетнаяЗапись, ОснованиеЗаполнения));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// При ответе на письмо нужно поменять идентификаторы картинок
// "cid:..." на адреса ВХ "eclib/...
&НаСервере
Процедура ПереопределитьИдентификаторыКартинокHTML(Знач ДанныеИсходногоСообщения)
	
	ВложенияВходящегоСобытия = Документы.Событие.ВложенияСобытия(ДанныеИсходногоСообщения.Ссылка, УникальныйИдентификатор);
	Для Каждого Вложение Из ВложенияВходящегоСобытия Цикл
		
		ДанныеИсходногоСообщения.СодержаниеHTML = СтрЗаменить(
			ДанныеИсходногоСообщения.СодержаниеHTML,
			СтрШаблон("cid:%1", Вложение.Идентификатор),
			Вложение.АдресВоВременномХранилище);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПолученногоПисьма()
	
	Если Объект.ТипСобытия <> Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФормаОтправить.Видимость = Ложь;
	Элементы.ФормаОтправитьЕще.Видимость = Ложь;
	
	Элементы.ФормаОтветить.Видимость = Истина;
	Элементы.ФормаОтветитьЕще.Видимость = Истина;
	
	Элементы.АктивныйВидПисьма.Видимость = Ложь;
	
	Если Объект.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
		Элементы.ФормаОтветить.КнопкаПоУмолчанию = Истина;
		Элементы.ФормаОтветитьВсем.Видимость = Истина;
		Элементы.ФормаОтветитьВсемЕще.Видимость = Истина;
		Элементы.ФормаОтветитьВсем.Отображение = ОтображениеКнопки.Картинка;
		Элементы.ФормаПереслать.Отображение = ОтображениеКнопки.Картинка; 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаСкопировать", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаСкопироватьЕще", "Видимость", Ложь);
		Элементы.ФормаПометитьКакСпамНеСпамЕще.Видимость = Истина;
		Элементы.ФормаПометитьКакСпамНеСпам.Видимость = Истина;
	Иначе
		Элементы.ФормаПереслать.КнопкаПоУмолчанию = Истина;
		Элементы.ФормаПереслать.Отображение= ОтображениеКнопки.Текст;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаСкопировать", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаСкопироватьЕще", "Видимость", Истина);
		Элементы.ФормаОтветить.Отображение = ОтображениеКнопки.Текст;
		Элементы.ФормаПометитьКакСпамНеСпам.Видимость = Ложь;
		Элементы.ФормаПометитьКакСпамНеСпамЕще.Видимость = Ложь;
		Элементы.ФормаОтветитьВсем.Видимость = Ложь;
		Элементы.ФормаОтветитьВсемЕще.Видимость = Ложь;
		Элементы.Переместить(Элементы.ФормаОтветить, Элементы.ГруппаВажныеКоманды, Элементы.ФормаЗаписать);
		Элементы.Переместить(Элементы.ФормаОтветитьВсем, Элементы.ГруппаВажныеКоманды, Элементы.ФормаЗаписать);
		Элементы.Переместить(Элементы.ФормаОтветитьЕще, Элементы.ФормаГруппаПисьмоЕще, Элементы.ФормаЗаписатьЕще);
		Элементы.Переместить(Элементы.ФормаОтветитьВсемЕще, Элементы.ФормаГруппаПисьмоЕще, Элементы.ФормаЗаписатьЕще);
		
		ЭтоОтправленноеИсходящееПисьмо = Истина;
	КонецЕсли;

	Элементы.ФормаПереслать.Видимость = Истина;
	Элементы.ФормаПереслатьЕще.Видимость = Истина;
	Элементы.ФормаГруппаАдресаты.Видимость = Ложь;
	Элементы.Получатели.ИзменятьПорядокСтрок = Ложь;
	Элементы.Получатели.ИзменятьСоставСтрок = Ложь;
	Элементы.ПолучателиКонтакт.РедактированиеТекста = Ложь;
	Элементы.ПолучателиКонтакт.КнопкаВыбора = Ложь;
	Элементы.ДобавитьВложение.Видимость = Ложь;
	Элементы.ДобавитьВложениеЕще.Видимость = Ложь;
	
	Элементы.УчетнаяЗапись.КнопкаВыпадающегоСписка = Ложь;
	Элементы.УчетнаяЗапись.Ширина = 15;
	
	Элементы.ФормаПометитьКакПрочтенныеНепрочтенныеЕще.Видимость = Истина;
	Элементы.ФормаПометитьКакПрочтенныеНепрочтенные.Видимость = Истина;
	
	Элементы.ДобавитьФайлИзОснования.Видимость = Ложь;
	Элементы.ДобавитьФайлИзОснованияЕще.Видимость = Ложь;
	Элементы.ВложенияКонтекстноеМенюДобавитьФайлИзОснования.Видимость = Ложь;
	Элементы.ГруппаДобавитьУдалитьФайл.Видимость = Ложь;
	Элементы.ГруппаПереместитьВверхВниз.Видимость = Ложь;
	Элементы.ДобавитьПисьмоКакФайл.Видимость = Ложь;
	Элементы.ФормаДобавитьПисьмоЕще.Видимость = Ложь;
	Элементы.ВложенияКонтекстноеМенюДобавитьПисьмо.Видимость = Ложь;
	Элементы.ВложенияКонтекстноеМенюУдалить.Видимость = Ложь;
	Элементы.ВложенияКонтекстноеМенюВставитьФайлы.Видимость = Ложь;
	
	Элементы.ДобавитьПолучателя.Видимость = Ложь;
	Элементы.ПолучателиКонтакт.КнопкаОчистки = Ложь;
	Элементы.ПолучателиКакСвязаться.РедактированиеТекста = Ложь;
	
	Элементы.Вложения.ТолькоПросмотр = Истина;
	Элементы.Тема.ТолькоПросмотр = Истина;
	Элементы.Тема.КнопкаВыбора = Ложь;
	Элементы.ГруппаСтатусПисьмаМассовойРассылки.Видимость = ПисьмоСозданоНаОснованииРассылкиСервиса();
	Элементы.КоманднаяПанельТекстаПисьма.Видимость = Ложь;
	Элементы.УчетнаяЗапись.ТолькоПросмотр = Истина;
	Элементы.УчетнаяЗапись.Видимость = Не Элементы.ГруппаСтатусПисьмаМассовойРассылки.Видимость;
	Элементы.ФормаЗаполнитьПоШаблону.Видимость = Ложь;
	Элементы.ФормаЗаполнитьПоШаблонуЕще.Видимость = Ложь;
	Элементы.ФормаВставитьПодписьЕще.Видимость = Ложь;
	
	Если ЗначениеЗаполнено(СодержаниеHTML) Тогда
		
		Элементы.СодержаниеПисьма.ТекущаяСтраница = Элементы.ТекстHTML;
		
		Элементы.СтраницыВложения.ТекущаяСтраница =
		?(Объект.ЗагрузитьПриОткрытии, Элементы.СтраницаВложенияЗагрузка, Элементы.СтраницаВложения);
		ТекущийЭлемент = Элементы.ТекстПисьма;
		
		Если СтрНайти(СодержаниеHTML, "<body") = 0 Тогда
			СодержаниеHTML = HTMLИзПростогоТекста(СодержаниеHTML);
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Содержание) Тогда
		
		СодержаниеHTML = HTMLИзПростогоТекста(Содержание);
		
		Элементы.СтраницыВложения.ТекущаяСтраница =
		?(Объект.ЗагрузитьПриОткрытии, Элементы.СтраницаВложенияЗагрузка, Элементы.СтраницаВложения);
		
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторСобытия)
		И ЗначениеЗаполнено(Объект.УчетнаяЗапись)
		И Объект.ЗагрузитьПриОткрытии Тогда
		Элементы.СодержаниеПисьма.ТекущаяСтраница = Элементы.Загрузка;
		Элементы.СтраницыВложения.ТекущаяСтраница = Элементы.СтраницаВложенияЗагрузка;
		Элементы.ФормаОтветить.Доступность = Ложь;
		Элементы.ФормаПереслать.Доступность = Ложь;
		Элементы.ФормаЗаписать.Доступность = Ложь;
	КонецЕсли;
	
	НастроитьВидимостьДат();
	УстановитьОтображениеДополнительныхКоманд();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуИсходящегоПисьма(Параметры = Неопределено)
	
	Если Объект.ТипСобытия <> Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.АктивныйВидПисьма.Видимость = Истина;
	Элементы.ФормаЗаполнитьПоШаблону.Видимость = Истина;
	Элементы.ФормаЗаполнитьПоШаблонуЕще.Видимость = Истина;
	Элементы.ФормаВставитьПодписьЕще.Видимость = Истина;
	
	Если ЗначениеЗаполнено(Объект.Тема)
		И Элементы.СодержаниеПисьма.ТекущаяСтраница = Элементы.ТекстHTML Тогда
		
		ТекущийЭлемент = Элементы.ТекстПисьма;
		
	КонецЕсли;
	
	Элементы.ПолучателиКонтакт.КнопкаВыбора = Истина;
	Элементы.ФормаСкопировать.Видимость = ЗначениеЗаполнено(Объект.Ссылка);
	Элементы.ФормаСкопироватьЕще.Видимость = ЗначениеЗаполнено(Объект.Ссылка);
	
	Элементы.УчетнаяЗапись.КнопкаВыпадающегоСписка = Истина;
	Элементы.УчетнаяЗапись.Ширина = 13;
	
	Если Объект.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Исходящее
		И ЗначениеЗаполнено(Объект.НачалоСобытия) Тогда
		Элементы.Переместить(Элементы.ФормаОтветить, Элементы.ГруппаВажныеКоманды, Элементы.ФормаЗаписать);
		Элементы.Переместить(Элементы.ФормаОтветитьВсем, Элементы.ГруппаВажныеКоманды, Элементы.ФормаЗаписать);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И ТаблицаУчастников.Количество() = 0 Тогда
		НовыйКонтакт = ТаблицаУчастников.Добавить();
		НовыйКонтакт.ТипПолучателяЭлектронногоПисьма = Перечисления.ТипыПолучателейЭлектронногоПисьма.Кому;
		НовыйКонтакт.ИндексКартинки = 1;
		Модифицированность = Ложь;
	КонецЕсли;
	
	НастроитьВидимостьДат();
	УстановитьОтображениеДополнительныхКоманд();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПисьмаВложения()
	
	Если Объект.ТипСобытия <> Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Переместить(Элементы.ГруппаСодержание, Элементы.ГруппаПодвалПисьма);
	
	Элементы.ГруппаСодержаниеИРеквизиты.Видимость = Ложь;
	Элементы.ГруппаПодвалПисьма.Объединенная = Истина;
	Элементы.ГруппаПолучателиИФайлы.Объединенная = Истина;
	Элементы.Отступ.Видимость = Истина;
	Элементы.ОтступДаты.Видимость = Истина;
	Элементы.ГруппаСодержание.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Полуторный;
	Элементы.ГруппаНадписи.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Полуторный;
	Элементы.ТекстHTML.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
	Элементы.ФормаГруппаКнопкиФормы.Видимость = Ложь;
	Элементы.ФормаКоманднаяПанель.Видимость = Ложь;
	Элементы.ГруппаОснование.Видимость = Ложь;
	Элементы.ГруппаДополнительныеРеквизиты.Видимость = Ложь;
	Элементы.ГруппаСвойРеквизит.Видимость = Ложь;
	Элементы.ГруппаРеквизиты.Видимость = Ложь;
	Элементы.ГруппаРеквизитыОтступ.Видимость = Ложь;
	
	Элементы.Получатели.ИзменятьПорядокСтрок = Ложь;
	Элементы.Получатели.ИзменятьСоставСтрок = Ложь;
	Элементы.ПолучателиКонтакт.РедактированиеТекста = Ложь;
	Элементы.ПолучателиКонтакт.КнопкаВыбора = Ложь;
	Элементы.ДобавитьВложение.Видимость = Ложь;
	Элементы.ДобавитьВложениеЕще.Видимость = Ложь;
	Элементы.ДобавитьПисьмоКакФайл.Видимость = Ложь;
	Элементы.ФормаДобавитьПисьмоЕще.Видимость = Ложь;
	Элементы.СохранитьФайлВОсновании.Видимость = Ложь;
	Элементы.ВложенияКонтекстноеМенюСохранитьФайлВОсновании.Видимость = Ложь;
	Элементы.ВложенияКонтекстноеМенюДобавитьПисьмо.Видимость = Ложь;
	Элементы.ВложенияКонтекстноеМенюУдалить.Видимость = Ложь;
	Элементы.ВложенияКонтекстноеМенюВставитьФайлы.Видимость = Ложь;
	
	Элементы.ФормаПометитьКакПрочтенныеНепрочтенныеЕще.Видимость = Ложь;
	Элементы.ФормаПометитьКакПрочтенныеНепрочтенные.Видимость = Ложь;
	
	Элементы.ДобавитьФайлИзОснования.Видимость = Ложь;
	Элементы.ДобавитьФайлИзОснованияЕще.Видимость = Ложь;
	Элементы.ВложенияКонтекстноеМенюДобавитьФайлИзОснования.Видимость = Ложь;
	Элементы.ГруппаДобавитьУдалитьФайл.Видимость = Ложь;
	Элементы.ГруппаПереместитьВверхВниз.Видимость = Ложь;
	
	Элементы.ДобавитьПолучателя.Видимость = Ложь;
	Элементы.ПолучателиКонтакт.КнопкаОчистки = Ложь;
	Элементы.ПолучателиКакСвязаться.РедактированиеТекста = Ложь;
	
	Элементы.Вложения.ТолькоПросмотр = Истина;
	Элементы.Тема.ТолькоПросмотр = Истина;
	Элементы.Тема.КнопкаВыбора = Ложь;
	Элементы.ГруппаСтатусПисьмаМассовойРассылки.Видимость = ПисьмоСозданоНаОснованииРассылкиСервиса();
	Элементы.КоманднаяПанельТекстаПисьма.Видимость = Ложь;
	Элементы.ФормаЗаполнитьПоШаблону.Видимость = Ложь;
	Элементы.ФормаЗаполнитьПоШаблонуЕще.Видимость = Ложь;
	Элементы.ФормаВставитьПодписьЕще.Видимость = Ложь;
	
	Если ЗначениеЗаполнено(СодержаниеHTML) Тогда
		
		Элементы.СодержаниеПисьма.ТекущаяСтраница = Элементы.ТекстHTML;
		
		Элементы.СтраницыВложения.ТекущаяСтраница =
		?(Объект.ЗагрузитьПриОткрытии, Элементы.СтраницаВложенияЗагрузка, Элементы.СтраницаВложения);
		ТекущийЭлемент = Элементы.ТекстПисьма;
		
		Если СтрНайти(СодержаниеHTML, "<body") = 0 Тогда
			СодержаниеHTML = HTMLИзПростогоТекста(СодержаниеHTML);
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Содержание) Тогда
		
		СодержаниеHTML = HTMLИзПростогоТекста(Содержание);
		
		Элементы.СтраницыВложения.ТекущаяСтраница =
		?(Объект.ЗагрузитьПриОткрытии, Элементы.СтраницаВложенияЗагрузка, Элементы.СтраницаВложения);
		
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторСобытия)
		И ЗначениеЗаполнено(Объект.УчетнаяЗапись)
		И Объект.ЗагрузитьПриОткрытии Тогда
		Элементы.СодержаниеПисьма.ТекущаяСтраница = Элементы.Загрузка;
		Элементы.СтраницыВложения.ТекущаяСтраница = Элементы.СтраницаВложенияЗагрузка;
		Элементы.ФормаОтветить.Доступность = Ложь;
		Элементы.ФормаПереслать.Доступность = Ложь;
		Элементы.ФормаЗаписать.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.НадписьДатаОтправки.Видимость = Ложь;
	Элементы.НадписьДатаПолучения.Видимость = Истина;
	Элементы.НадписьДатаПолучения.Заголовок = ЗаголовокНачалаСобытия();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииПриЧтенииНаСервере(ТекущийОбъект)
	
	ДоступнаРаботаСЛидами = ПравоДоступа("Добавление", Метаданные.Справочники.Лиды);
	
	Если НЕ ТекущийОбъект.КонтактыПеренесены И ТекущийОбъект.УдалитьУчастники.Количество() > 0 Тогда
		Документы.Событие.ПеренестиУчастниковСобытия(ТекущийОбъект);
		ЗначениеВДанныеФормы(ТекущийОбъект, Объект);
	КонецЕсли;

	АдресЭПУчетнойЗаписи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.УчетнаяЗапись, "АдресЭлектроннойПочты");
	
	ЗаполнитьТаблицуУчастников(ТекущийОбъект);
	УстановитьСвязиСОбъектамиCRM();
	УстановитьКартинкиУчастников();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьДат()
	
	Если Объект.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
		Элементы.НадписьДатаОтправки.Видимость = Ложь;
		Элементы.НадписьДатаПолучения.Видимость = Истина;
	Иначе
		Элементы.НадписьДатаОтправки.Видимость = ЗначениеЗаполнено(Объект.НачалоСобытия);
		Элементы.НадписьДатаПолучения.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.НадписьДатаОтправки.Заголовок = СтрШаблон(НСтр("ru = '%1, %2'"), Строка(Объект.Автор), 
		ЗаголовокНачалаСобытия());
	Элементы.НадписьДатаПолучения.Заголовок = ЗаголовокНачалаСобытия();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуУчастников(Объект)
	
	ТаблицаУчастников.Очистить();
	
	Для Каждого СтрокаУчастники Из Объект.Участники Цикл
		
		СтрокаКонтакты = ТаблицаУчастников.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКонтакты, СтрокаУчастники);
		
		Если ТипЗнч(СтрокаКонтакты.Контакт) <> Тип("Строка") 
			И ТипЗнч(СтрокаКонтакты.Контакт) <> Тип("СправочникСсылка.АдресатыПисем") Тогда
			СтрокаКонтакты.КонтактCRM = СтрокаКонтакты.Контакт;
			СтрокаКонтакты.Контакт = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаУчастников.Количество() = 0 И НеобходимоДобавитьСтроку Тогда
		ТаблицаУчастников.Добавить();
		Модифицированность = Ложь;
	КонецЕсли;
	
	ДобавитьУчетнуюЗаписьВПолучатели();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУчетнуюЗаписьВПолучатели()
	
	Если Объект.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
		Возврат;
	КонецЕсли;
	
	АдресУжеДобавлен = ТаблицаУчастников.НайтиСтроки(Новый Структура("КакСвязаться", АдресЭПУчетнойЗаписи));
	Если АдресУжеДобавлен.Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаУчастников.Количество() = 0 Тогда
		ДанныеУчетнойЗаписи = ТаблицаУчастников.Вставить(0);
	Иначе
		ДанныеУчетнойЗаписи = ТаблицаУчастников.Вставить(1);
	КонецЕсли;
	
	ДанныеУчетнойЗаписи.КакСвязаться = АдресЭПУчетнойЗаписи;
	ДанныеУчетнойЗаписи.КонтактCRM = Объект.УчетнаяЗапись;
	ДанныеУчетнойЗаписи.ЭтоУчетнаяЗапись = Истина;
	ДанныеУчетнойЗаписи.ТипПолучателяЭлектронногоПисьма = Перечисления.ТипыПолучателейЭлектронногоПисьма.Кому;
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьУчетнуюЗаписьИзПолучателей()
	
	Если Объект.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоПолучателей = ТаблицаУчастников.Количество() - 1;
	
	Пока КоличествоПолучателей >= 0 Цикл
		Если НЕ ТаблицаУчастников[КоличествоПолучателей].ЭтоУчетнаяЗапись Тогда
			КоличествоПолучателей = КоличествоПолучателей - 1;
			Продолжить;
		КонецЕсли;
		
		ТаблицаУчастников.Удалить(КоличествоПолучателей);
		КоличествоПолучателей = КоличествоПолучателей - 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗаголовокНачалаСобытия()
	
	СекундВДне = 86400;
	ДеньНачала  = Формат(Объект.НачалоСобытия, "ДФ=дд.ММ.гг");
	ВремяНачала = Формат(Объект.НачалоСобытия, "ДФ=Ч:мм");
	
	Если НачалоДня(Объект.НачалоСобытия) = НачалоДня(ТекущаяДатаСеанса()) Тогда
		ДеньНачала = НСтр("ru = 'сегодня'");
	ИначеЕсли НачалоДня(Объект.НачалоСобытия) = НачалоДня(ТекущаяДатаСеанса() - СекундВДне) Тогда
		ДеньНачала = НСтр("ru = 'вчера'");
	КонецЕсли;
	
	Возврат СтрШаблон(НСтр("ru = '%1 %2'"), ДеньНачала, ВремяНачала);
	
КонецФункции

&НаСервере
Процедура ПередЗаписьюНаСервереВходящегоСобытия(ТекущийОбъект)
	
	Если ЗначениеЗаполнено(Содержание) Тогда
		ТекущийОбъект.Содержание = Содержание;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервереИсходящегоСобытия(ТекущийОбъект)
	
	Если ЗначениеЗаполнено(ИдентификаторСобытия) Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("Идентификатор", ИдентификаторСобытия);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторыСообщений) Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ИдентификаторыСообщений", ИдентификаторыСообщений);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Содержание) Тогда
		ТекущийОбъект.Содержание = Содержание;
	КонецЕсли;
	
	СохранитьТемуСобытияВИсторииАвтоподбора(ТекущийОбъект.Тема, ИсторияТемСтрокой);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОтправкуПисьма(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.АктивныйВидПисьма.Заголовок = "HTML" Тогда
		ТекстПисьма = СтрШаблон("<html><body>%1</body></html>", ДокументHTML.body.innerHTML);
	Иначе
		ТекстПисьма = СодержаниеHTML;
	КонецЕсли;
	
	ПараметрыПисьма = СформироватьПараметрыПисьмаНаСервере(ПриведенныйПочтовыйАдресКому,
	ПриведенныйПочтовыйАдресКопия,
	ПриведенныйПочтовыйАдресСкрытаяКопия, ТекстПисьма);
	
	Если ПараметрыПисьма = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Ошибка формирования параметров почтового сообщения'"));
		Возврат;
	КонецЕсли;
	
	Попытка
		РезультатОтправки = ОтправитьПочтовоеСообщение(ПараметрыПисьма, Объект.УчетнаяЗапись, СеансовыеДанные);
		ИдентификаторСобытия = РезультатОтправки.Идентификатор;
		ИдентификаторыСообщений = РезультатОтправки.ИдентификаторыСообщений;
		Успешно = Истина;
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЗаписьЖурналаРегистрацииНаСервереБезКонтекста(ПодробноеПредставлениеОшибки);
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		РаботаСПочтовымиСообщениямиКлиент.СообщитьОбОшибкеПодключения(Объект.УчетнаяЗапись, 
			НСтр("ru = 'Письмо не отправлено'"), КраткоеПредставлениеОшибки);
			
		Успешно = Ложь;
	КонецПопытки;
	
	Если Не Успешно Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Состояние = ПредопределенноеЗначение("Справочник.СостоянияСобытий.Завершено");
	Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	Объект.НачалоСобытия = Объект.Дата;
	Объект.ОкончаниеСобытия = Объект.Дата;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ЗаполнитьСодержание", Истина);
	Записать(ПараметрыЗаписи);
	
	СохранитьКонтактнуюИнформациюПолучателейПисьма();
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Сообщение успешно отправлено'"), ПолучитьНавигационнуюСсылку(Объект.Ссылка), Строка(Объект.Ссылка), БиблиотекаКартинок.Информация32);
	Закрыть(Успешно);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписьЖурналаРегистрацииНаСервереБезКонтекста(Знач ПодробноеПредставлениеОшибки)
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'ОтправитьПочтовоеСообщение'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка, Неопределено, Неопределено, ПодробноеПредставлениеОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗагрузкуСообщенияСПочтовогоСервера()
	
	Если ТребуетсяЗагрузитьСообщениеСПочтовогоСервера() Тогда
		ПодключитьОбработчикОжидания("ЗагрузитьСообщениеСПочтовогоСервера", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ТребуетсяЗагрузитьСообщениеСПочтовогоСервера()
	
	Если Объект.ТипСобытия <> ПредопределенноеЗначение("Перечисление.ТипыСобытий.ЭлектронноеПисьмо") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.ЗагрузитьПриОткрытии И ЗначениеЗаполнено(ИдентификаторСобытия) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не Объект.ВходящееИсходящееСобытие =
		ПредопределенноеЗначение("Перечисление.ВходящееИсходящееСобытие.Исходящее") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;

	ЗагрузитьПриОткрытии = Неопределено;
	Если ЗначениеЗаполнено(ДанныеИсходногоСообщения)
		И ДанныеИсходногоСообщения.Свойство("ЗагрузитьПриОткрытии", ЗагрузитьПриОткрытии)
		И ЗагрузитьПриОткрытии Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьСообщениеСПочтовогоСервера()
	
	Задание = ЗаданиеЗагрузитьСообщениеСПочтовогоСервера();
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеЗадания", ЭтотОбъект);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Задание, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ЗаданиеЗагрузитьСообщениеСПочтовогоСервера()
	
	Если ЗначениеЗаполнено(ДанныеИсходногоСообщения) Тогда
		Событие = ДанныеИсходногоСообщения.Ссылка;
	Иначе
		Событие = Объект.Ссылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИсходногоСообщения) Тогда
		Идентификатор = Неопределено;
	Иначе
		Идентификатор = ИдентификаторСобытия;
	КонецЕсли;
	
	Возврат ЭлектроннаяПочтаУНФ.ЗагрузитьСообщениеСПочтовогоСервера(
		Событие, УникальныйИдентификатор, Идентификатор, СеансовыеДанные);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЗавершениеЗадания(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Результат.Свойство("Статус") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		Элементы.СодержаниеПисьма.ТекущаяСтраница = Элементы.ПроизошлаОшибка;
		ОписаниеОшибки = Результат.ПодробноеПредставлениеОшибки;
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ОбработатьЗагруженноеСПочтовогоСервераСообщениеНаСервере(Результат.АдресРезультата);
		
		Если ЗначениеЗаполнено(ДанныеИсходногоСообщения) Тогда
			ОповеститьОбИзменении(ДанныеИсходногоСообщения.Ссылка);
		Иначе
			ОповеститьОбИзменении(Объект.Ссылка);
		КонецЕсли;
		
		ОбновитьКонтактСтрокойНаКлиенте();
		
		Если ДокументHTML <> Неопределено Тогда
			
			ДокументHTML.documentElement.innerHTML = СодержаниеHTML;
			ГипертекстКлиент.ПрименитьНастройкиОтображения(ДокументHTML);
			Если Объект.НачалоСобытия <> '00010101' Тогда
				ГипертекстКлиент.СтилизоватьПерепискуСЦитированием(ДокументHTML);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗагруженноеСПочтовогоСервераСообщениеНаСервере(АдресРезультата)
	
	ДанныеСообщения = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(ДанныеСообщения) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФормаОтветить.Доступность = Истина;
	Элементы.ФормаПереслать.Доступность = Истина;
	Элементы.ФормаЗаписать.Доступность = Истина;
	
	Объект.Тема = ДанныеСообщения.Тема;
	
	Если ЗначениеЗаполнено(ДанныеИсходногоСообщения) Тогда
		ОбработатьСообщениеПоИсходномуСообщению(ДанныеСообщения);
	Иначе
		ОбработатьПростуюЗагрузкуСообщения(ДанныеСообщения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СодержаниеHTML) Или ЗначениеЗаполнено(Содержание) Тогда
		Элементы.СодержаниеПисьма.ТекущаяСтраница = Элементы.ТекстHTML;
		ТекущийЭлемент = Элементы.ТекстПисьма;
	КонецЕсли;
	
	Элементы.СтраницыВложения.ТекущаяСтраница =
	?(Объект.ЗагрузитьПриОткрытии, Элементы.СтраницаВложенияЗагрузка, Элементы.СтраницаВложения);
	
	ПриАвтоматическомСнятииПрочитанностиПисьма();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСообщениеПоИсходномуСообщению(ДанныеСообщения)
	
	// Проверка обоих содержаний
	Если ЗначениеЗаполнено(ДанныеСообщения.СодержаниеHTML) Тогда
		
		ТекстПисьма = ДанныеСообщения.СодержаниеHTML;
		ТекстПисьма = Гипертекст.ОчищенныйHTMLОтНежелательногоКонтента(ТекстПисьма);
		ТекстПисьма = Гипертекст.ТекстHTMLСКартинкамиВДвоичныхДанных(ТекстПисьма);
		
	Иначе
		ТекстПисьма = ГипертекстВызовСервера.HTMLИзПростогоТекста(ДанныеСообщения.Содержание);
	КонецЕсли;
	
	// Получение вложений
	ВходящиеВложения = Неопределено;
	ДанныеСообщения.Свойство("Вложения", ВходящиеВложения);
	ЕстьВложения = (ВходящиеВложения <> Неопределено) И ВходящиеВложения.Количество();
	Если ЕстьВложения Тогда
		ВложенияИсходногоСообщения = Документы.Событие.ФорматированныеВложенияПослеЗагрузкиПисьма(
			ВходящиеВложения, УникальныйИдентификатор);
	КонецЕсли;
	
	// Запись исходного сообщения
	// Происходит до изменения ТекстаПисьма по вложения, 
	// чтобы сохранились идентификаторы (cid...), а не адреса Временного Хранилища (e1cib/...)
	Если Не ТолькоПросмотр Тогда
		
		ОбъектИсходногоСообщения = ДанныеИсходногоСообщения.Ссылка.ПолучитьОбъект();
		ОбъектИсходногоСообщения.Заблокировать();
		
		ОбъектИсходногоСообщения.Тема = ДанныеСообщения.Тема;
		ОбъектИсходногоСообщения.Содержание = ДанныеСообщения.Содержание;
		ОбъектИсходногоСообщения.СодержаниеHTML = ТекстПисьма;
		ОбъектИсходногоСообщения.ЗагрузитьПриОткрытии = Ложь;
		ОбъектИсходногоСообщения.Записать();
		
		Если ЕстьВложения Тогда
			ОбъектИсходногоСообщения.СохранитьВложения(ВложенияИсходногоСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьВложения Тогда
		ТекстПисьма = Гипертекст.ОбработатьТекстHTML(ТекстПисьма, , ВложенияИсходногоСообщения);
	КонецЕсли;
	
	// Данные помещаются в Объект
	ДанныеИсходногоСообщения.Содержание = ДанныеСообщения.Содержание;
	ДанныеИсходногоСообщения.СодержаниеHTML = ТекстПисьма;
	ЗаполнитьТекстОтвета(ДанныеИсходногоСообщения);
	
	Содержание = Объект.Содержание;
	СодержаниеHTML = Объект.СодержаниеHTML;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПростуюЗагрузкуСообщения(ДанныеСообщения)
	
	Если Не ЭлектроннаяПочтаУНФ.ЕстьЛиПрисоединенныеФайлы(Объект.Ссылка) Тогда
		ЗаполнитьВложения(ДанныеСообщения);
	КонецЕсли;
	
	Содержание = ДанныеСообщения.Содержание;
	
	Если ЗначениеЗаполнено(ДанныеСообщения.СодержаниеHTML) Тогда
		
		СодержаниеHTML = ДанныеСообщения.СодержаниеHTML;
		СодержаниеHTML = Гипертекст.ОчищенныйHTMLОтНежелательногоКонтента(СодержаниеHTML);
		
	Иначе
		
		СодержаниеHTML = ГипертекстВызовСервера.HTMLИзПростогоТекста(Содержание);
		
	КонецЕсли;
	
	Объект.ЗагрузитьПриОткрытии = Ложь;
	Если Не ТолькоПросмотр Тогда
		Записать();
	КонецЕсли;
	ДобавитьУчетнуюЗаписьВПолучатели();
	
	Если Вложения.Количество() > 0 Тогда
		СодержаниеHTML = Гипертекст.ОбработатьТекстHTML(ДанныеСообщения.СодержаниеHTML, , Вложения);
	КонецЕсли;
	
	НежелательныеHTTPОчищены = Гипертекст.ОчиститьНежелательныеHTTP(СодержаниеHTML);
	Если НежелательныеHTTPОчищены Тогда
		Элементы.НебезопасноеСодержимое.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВложения(ДанныеСобытия)
	
	Если Не ДанныеСобытия.Свойство("Вложения") Тогда
		Возврат;
	КонецЕсли;
	
	ВложенияТЗ = Документы.Событие.ФорматированныеВложенияПослеЗагрузкиПисьма(
		ДанныеСобытия.Вложения, УникальныйИдентификатор);
	
	Для Каждого Вложение Из ВложенияТЗ Цикл
		
		НовоеВложениеНаФорме = Вложения.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеВложениеНаФорме, Вложение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкиУчастников()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	Контрагенты.ВидКонтрагента
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка В(&Контрагенты)");
	
	Контрагенты = ТаблицаУчастников.Выгрузить().ВыгрузитьКолонку("КонтактCRM");
	Дубли = ДублиПолучателей.Выгрузить().ВыгрузитьКолонку("ДубльПолучателя");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Контрагенты, Дубли);
	Запрос.УстановитьПараметр("Контрагенты", Контрагенты);
	
	ВидыКонтрагентов = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидыКонтрагентов[Выборка.Ссылка] = Выборка.ВидКонтрагента;
	КонецЦикла;
	
	Для Каждого ТекСтрокаУчастники Из ТаблицаУчастников Цикл
		ТекСтрокаУчастники.КомандаCRM = "";
		
		Если ЗначениеЗаполнено(ТекСтрокаУчастники.КонтактCRM) Тогда
			Контакт = ТекСтрокаУчастники.КонтактCRM;
		Иначе
			Контакт = ТекСтрокаУчастники.Контакт;
		КонецЕсли;
				
		ТекСтрокаУчастники.ИндексКартинки = КартинкаУчастникаПоТипуКонтакта(Контакт, ВидыКонтрагентов);
		Если (ТипЗнч(Контакт) = Тип("СправочникСсылка.АдресатыПисем") 
			ИЛИ ТипЗнч(Контакт) = Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(Контакт)) И ЗначениеЗаполнено(ТекСтрокаУчастники.КакСвязаться) Тогда
			ТекСтрокаУчастники.КомандаCRM = НСтр("ru = 'сохранить в CRM'");
		КонецЕсли;
	
		ИндексКонтакта = ТаблицаУчастников.Индекс(ТекСтрокаУчастники);
		ДублиАдресата = ДублиПолучателей.НайтиСтроки(Новый Структура("ИндексПолучателя", ИндексКонтакта));
		
		Если ДублиАдресата.Количество() > 0 Тогда
			СтрокаКонтакт = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(";%1 контакт;;%1 контакта;%1 контактов;%1 контакта", ДублиАдресата.Количество());
			ТекСтрокаУчастники.КомандаCRM 		 = СтрШаблон(НСтр("ru = 'еще %1 с таким e-mail'"), СтрокаКонтакт);
			ТекСтрокаУчастники.ИндексКартинки 	 = 5;
		КонецЕсли;
		
		Для Каждого Дубль Из ДублиПолучателей Цикл
			Дубль.ИндексКартинки = КартинкаУчастникаПоТипуКонтакта(Дубль.ДубльПолучателя, ВидыКонтрагентов);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиСОбъектамиCRM()
	
	ДублиПолучателей.Очистить();
	
	Если ДоступнаРаботаСЛидами Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязиАдресатКонтактCRM.КонтактCRM КАК КонтактCRM,
		|	СвязиАдресатКонтактCRM.Адресат КАК Адресат,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СвязиАдресатКонтактCRM.КонтактCRM) = ТИП(Справочник.Контрагенты)
		|			ТОГДА 0
		|		КОГДА ТИПЗНАЧЕНИЯ(СвязиАдресатКонтактCRM.КонтактCRM) = ТИП(Справочник.КонтактныеЛица)
		|			ТОГДА 1
		|		КОГДА ТИПЗНАЧЕНИЯ(СвязиАдресатКонтактCRM.КонтактCRM) = ТИП(Справочник.Лиды)
		|			ТОГДА 2
		|		КОГДА ТИПЗНАЧЕНИЯ(СвязиАдресатКонтактCRM.КонтактCRM) = ТИП(Справочник.КонтактыЛидов)
		|			ТОГДА 3
		|		ИНАЧЕ 4
		|	КОНЕЦ КАК ТипКонтакта,
		|	Лиды.ВариантЗавершения КАК ВариантЗавершения
		|ИЗ
		|	РегистрСведений.СвязиАдресатКонтактCRM КАК СвязиАдресатКонтактCRM
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Лиды КАК Лиды
		|		ПО СвязиАдресатКонтактCRM.КонтактCRM = Лиды.Ссылка
		|ГДЕ
		|	СвязиАдресатКонтактCRM.Адресат В(&МассивУчастников)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТипКонтакта";
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязиАдресатКонтактCRM.КонтактCRM КАК КонтактCRM,
		|	СвязиАдресатКонтактCRM.Адресат КАК Адресат,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СвязиАдресатКонтактCRM.КонтактCRM) = ТИП(Справочник.Контрагенты)
		|			ТОГДА 0
		|		КОГДА ТИПЗНАЧЕНИЯ(СвязиАдресатКонтактCRM.КонтактCRM) = ТИП(Справочник.КонтактныеЛица)
		|			ТОГДА 1
		|		КОГДА ТИПЗНАЧЕНИЯ(СвязиАдресатКонтактCRM.КонтактCRM) = ТИП(Справочник.Лиды)
		|			ТОГДА 2
		|		КОГДА ТИПЗНАЧЕНИЯ(СвязиАдресатКонтактCRM.КонтактCRM) = ТИП(Справочник.КонтактыЛидов)
		|			ТОГДА 3
		|		ИНАЧЕ 4
		|	КОНЕЦ КАК ТипКонтакта,
		|	NULL КАК ВариантЗавершения
		|ИЗ
		|	РегистрСведений.СвязиАдресатКонтактCRM КАК СвязиАдресатКонтактCRM
		|ГДЕ
		|	СвязиАдресатКонтактCRM.Адресат В(&МассивУчастников)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТипКонтакта";
	КонецЕсли;
	
	МассивУчастников = Новый Массив;
	МассивКИ = Новый Массив;
	
	Для Каждого Участник Из ТаблицаУчастников Цикл
		Если Участник.ЭтоУчетнаяЗапись Тогда
			Продолжить;
		КонецЕсли;
		МассивУчастников.Добавить(Участник.Контакт);
		МассивКИ.Добавить(Участник.КакСвязаться);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МассивУчастников", МассивУчастников);
	ТаблицаАдресатов = Запрос.Выполнить().Выгрузить();
	
	Если НЕ Константы.ПереносАдресатовЗавершен.Получить() Тогда
		УстановитьСвязиСКонтактамиПоСправочникам(МассивУчастников, МассивКИ, ТаблицаАдресатов);
	КонецЕсли;

	Для Каждого Участник Из ТаблицаУчастников Цикл
		
		АдресатыУчастника = ТаблицаАдресатов.НайтиСтроки(Новый Структура("Адресат", Участник.Контакт));
		Если АдресатыУчастника.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого АдресатУчастника Из АдресатыУчастника Цикл
			
			Если НЕ ЗначениеЗаполнено(Участник.КонтактCRM) Тогда
				Участник.КонтактCRM 	= АдресатУчастника.КонтактCRM;
				Продолжить;
			КонецЕсли;
			
			Если АдресатыУчастника.Количество() > 1 И АдресатУчастника.КонтактCRM <> Участник.КонтактCRM Тогда
				Если ЗначениеЗаполнено(АдресатУчастника.ВариантЗавершения) Тогда
					Продолжить;
				КонецЕсли;
				
				НовыйДубль = ДублиПолучателей.Добавить();
				НовыйДубль.ИндексПолучателя = ТаблицаУчастников.Индекс(Участник);
				НовыйДубль.ДубльПолучателя  = АдресатУчастника.КонтактCRM;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПисьмаДляВложения(Письма, ДопПараметры) Экспорт
	
	Если Письма = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьВложенияПолученнымиПисьмами(Письма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВложенияПолученнымиПисьмами(Письма)
	
	МассивДанных = ЭлектроннаяПочтаУНФ.ИнтернетПочтовыеСообщенияПисем(Письма);
	
	СтруктураВложений = Новый Структура;
	СтруктураВложений.Вставить("Вложения", МассивДанных);
	
	ЗаполнитьВложения(СтруктураВложений);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтактыПисьма(Объект)
	
	УдалитьУчетнуюЗаписьИзПолучателей();
	
	Если ТаблицаУчастников.Количество() = 1 
		И НЕ ЗначениеЗаполнено(ТаблицаУчастников[0].КакСвязаться) 
		И НЕ ЗначениеЗаполнено(ТаблицаУчастников[0].КонтактCRM) Тогда
		НеобходимоДобавитьСтроку = Истина;
		Возврат;
	КонецЕсли;
	
	Объект.Участники.Очистить();
	
	Для Каждого СтрокаКонтакты Из ТаблицаУчастников Цикл
		ЗаполнитьЗначенияСвойств(Объект.Участники.Добавить(), СтрокаКонтакты);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция КартинкаУчастникаПоТипуКонтакта(Контакт, ВидыКонтрагентов)
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Возврат 4;
	ИначеЕсли ВидыКонтрагентов[Контакт] = Перечисления.ВидыКонтрагентов.ФизическоеЛицо Тогда
		Возврат 3;
	ИначеЕсли ВидыКонтрагентов[Контакт] = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель Тогда
		Возврат 3;
	ИначеЕсли ВидыКонтрагентов[Контакт] <> Неопределено Тогда
		Возврат 2;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.АдресатыПисем") ИЛИ НЕ ЗначениеЗаполнено(Контакт) Тогда
		Возврат 0;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Возврат 6;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
		Возврат 0;
	Иначе
		Возврат 1;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьСвязиСКонтактамиПоСправочникам(МассивУчастников, МассивКИ, ТаблицаАдресатов)
	
	Запрос = Новый Запрос;
	Если ДоступнаРаботаСЛидами Тогда
		Запрос.Текст = ТекстЗапросаСвязиВключаяЛидов();
	Иначе
		Запрос.Текст = ТекстЗапросаСвязиБезЛидов();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("АдресатыПисем", МассивУчастников);
	Запрос.УстановитьПараметр("МассивКИ", МассивКИ);
	Результат = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ТаблицаАдресатов);
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаСвязиБезЛидов()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтрагентыКИ.Ссылка КАК КонтактCRM,
	|	АдресатыПисем.Ссылка КАК Адресат,
	|	0 КАК ТипКонтакта,
	|	NULL КАК ВариантЗавершения
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКИ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АдресатыПисем КАК АдресатыПисем
	|		ПО (АдресатыПисем.Адресат = КонтрагентыКИ.АдресЭП)
	|ГДЕ
	|	(АдресатыПисем.Адресат В (&АдресатыПисем)
	|			ИЛИ КонтрагентыКИ.АдресЭП В (&МассивКИ))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КонтактыКИ.Ссылка,
	|	АдресатыПисем.Ссылка,
	|	1,
	|	NULL
	|ИЗ
	|	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактыКИ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АдресатыПисем КАК АдресатыПисем
	|		ПО (АдресатыПисем.Адресат = КонтактыКИ.АдресЭП)
	|ГДЕ
	|	(АдресатыПисем.Ссылка В (&АдресатыПисем)
	|			ИЛИ КонтактыКИ.АдресЭП В (&МассивКИ))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ФизЛицаКИ.Ссылка,
	|	АдресатыПисем.Ссылка,
	|	4,
	|	NULL
	|ИЗ
	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизЛицаКИ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АдресатыПисем КАК АдресатыПисем
	|		ПО (АдресатыПисем.Адресат = ФизЛицаКИ.АдресЭП)
	|ГДЕ
	|	(АдресатыПисем.Ссылка В (&АдресатыПисем)
	|			ИЛИ ФизЛицаКИ.АдресЭП В (&МассивКИ))";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаСвязиВключаяЛидов()
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтрагентыКИ.Ссылка КАК КонтактCRM,
	|	АдресатыПисем.Ссылка КАК Адресат,
	|	0 КАК ТипКонтакта,
	|	NULL КАК ВариантЗавершения
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКИ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АдресатыПисем КАК АдресатыПисем
	|		ПО (АдресатыПисем.Адресат = КонтрагентыКИ.АдресЭП)
	|ГДЕ
	|	(АдресатыПисем.Адресат В (&АдресатыПисем)
	|			ИЛИ КонтрагентыКИ.АдресЭП В (&МассивКИ))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КонтактыКИ.Ссылка,
	|	АдресатыПисем.Ссылка,
	|	1,
	|	NULL
	|ИЗ
	|	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактыКИ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АдресатыПисем КАК АдресатыПисем
	|		ПО (АдресатыПисем.Адресат = КонтактыКИ.АдресЭП)
	|ГДЕ
	|	(АдресатыПисем.Ссылка В (&АдресатыПисем)
	|			ИЛИ КонтактыКИ.АдресЭП В (&МассивКИ))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЛидыКИ.Ссылка,
	|	АдресатыПисем.Ссылка,
	|	2,
	|	ЛидыКИ.Ссылка.ВариантЗавершения
	|ИЗ
	|	Справочник.Лиды.КонтактнаяИнформация КАК ЛидыКИ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АдресатыПисем КАК АдресатыПисем
	|		ПО (АдресатыПисем.Адресат = ЛидыКИ.АдресЭП)
	|ГДЕ
	|	(АдресатыПисем.Ссылка В (&АдресатыПисем)
	|			ИЛИ ЛидыКИ.АдресЭП В (&МассивКИ))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КонтактыЛидовКИ.Ссылка,
	|	АдресатыПисем.Ссылка,
	|	4,
	|	NULL
	|ИЗ
	|	Справочник.КонтактыЛидов.КонтактнаяИнформация КАК КонтактыЛидовКИ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АдресатыПисем КАК АдресатыПисем
	|		ПО (АдресатыПисем.Адресат = КонтактыЛидовКИ.АдресЭП)
	|ГДЕ
	|	(АдресатыПисем.Ссылка В (&АдресатыПисем)
	|			ИЛИ КонтактыЛидовКИ.АдресЭП В (&МассивКИ))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ФизЛицаКИ.Ссылка,
	|	АдресатыПисем.Ссылка,
	|	4,
	|	NULL
	|ИЗ
	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизЛицаКИ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АдресатыПисем КАК АдресатыПисем
	|		ПО (АдресатыПисем.Адресат = ФизЛицаКИ.АдресЭП)
	|ГДЕ
	|	(АдресатыПисем.Ссылка В (&АдресатыПисем)
	|			ИЛИ ФизЛицаКИ.АдресЭП В (&МассивКИ))";
	
	Возврат ТекстЗапроса;
КонецФункции

&НаСервере
Процедура ПолучитьСписокКонтактовИзСкопированныхАдресатов(АдресВХранилище)
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	Модифицированность = Истина;
	
	Если ЭтоАдресВременногоХранилища(АдресВХранилище) Тогда
		ТаблицаПолучателей = ПолучитьИзВременногоХранилища(АдресВХранилище);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТаблицаПолучателей) Тогда
		АдресВХранилище = Неопределено;
		Возврат;
	КонецЕсли;
	
	ТипПолучателя = ТаблицаПолучателей[0].ТипПолучателя;
	ТаблицаАдресантов = ВариантыПолучателейИзСтроки(ТаблицаПолучателей);
	
	ВариантыПолучателей = Новый Соответствие;
	ТаблицаАдресантов.Колонки.Добавить("ТипПолучателя",
	Новый ОписаниеТипов("ПеречислениеСсылка.ТипыПолучателейЭлектронногоПисьма"));
	ТаблицаАдресантов.ЗаполнитьЗначения(ТипПолучателя, "ТипПолучателя");
	
	Для Каждого Строка Из ТаблицаАдресантов Цикл
		
		ПараметрыПоискаЭП = Новый Структура("АдресЭП", Строка.АдресЭП);
		МассивСовпадений = ТаблицаПолучателей.НайтиСтроки(ПараметрыПоискаЭП);
		
		Если МассивСовпадений.Количество() > 0 Тогда
			ПараметрыПоиска = Новый Структура("КакСвязаться", Строка.АдресЭП);
			МассивСтрок = ТаблицаУчастников.НайтиСтроки(ПараметрыПоиска); 
			Если (МассивСтрок.Количество() > 0) Тогда
				Продолжить;
			КонецЕсли;
			ЗаполнитьКонтактСтрокойТаблицы(Строка, ТипПолучателя);
			Продолжить;
		КонецЕсли;
		
		Если ВариантыПолучателей[Строка.Псевдоним] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыПоиска = Новый Структура("КакСвязаться", Строка.АдресЭП);
		МассивКонтактов = ТаблицаУчастников.НайтиСтроки(ПараметрыПоиска);
		
		Если МассивКонтактов.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборПоПсевдониму = Новый Структура("Псевдоним", Строка.Псевдоним);
		Варианты = ТаблицаАдресантов.НайтиСтроки(ОтборПоПсевдониму);
		НеоднозначныйКонтакт = Ложь;
		ТекущийКонтакт = Неопределено;
		
		Для Каждого Строка Из Варианты Цикл
			
			Если ТекущийКонтакт = Неопределено Тогда 
				ТекущийКонтакт = Строка.Контакт;
			КонецЕсли;
			
			Если ТекущийКонтакт <> Строка.Контакт Тогда
				НеоднозначныйКонтакт = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НеоднозначныйКонтакт Тогда
			ВариантыПолучателей.Вставить(Строка.Псевдоним, Варианты);
			Продолжить;
		КонецЕсли;
		
		Для Каждого Строка Из Варианты Цикл
			ЗаполнитьКонтактСтрокойТаблицы(Строка, ТипПолучателя);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаПолучателей Цикл
		
		Адрес = Строка.АдресЭП;
		Псевдоним = Строка.Псевдоним;
		ОтборПоАдресу = Новый Структура("КакСвязаться", Адрес);
		ОтборПоПсевдониму = Новый Структура("Псевдоним", Псевдоним);
		ПроверкаВхожденийАдреса = ТаблицаУчастников.НайтиСтроки(ОтборПоАдресу);
		ПроверкаВхожденийПсевдонима = ТаблицаАдресантов.НайтиСтроки(ОтборПоПсевдониму);
		
		Если ЗначениеЗаполнено(Псевдоним) 
			И ПроверкаВхожденийПсевдонима.Количество() <> 0 Тогда
				Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Адрес) 
			И ПроверкаВхожденийАдреса.Количество() <> 0 Тогда
				Продолжить;
		КонецЕсли;
		
		СтрокаПредставления = СтрШаблон("%1 %2", Псевдоним, Адрес);
		
		НоваяСтрока = ТаблицаАдресантов.Добавить();
		НоваяСтрока.АдресЭП = СтрокаПредставления;
		ЗаполнитьКонтактСтрокойТаблицы(НоваяСтрока, ТипПолучателя);
		
	КонецЦикла;
	
	ПолучателиКонтактОбработкаПослеВыборкиНаСервере();
	
	Если ЗначениеЗаполнено(ВариантыПолучателей) Тогда
		АдресВХранилище = ПоместитьВоВременноеХранилище(ВариантыПолучателей);
	Иначе
		АдресВХранилище = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВариантыПолучателейИзСтроки(ТаблицаПолучателей)
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Источник.ПсевдонимДляПоиска КАК ПсевдонимДляПоиска,
	|	Источник.Псевдоним КАК Псевдоним,
	|	Источник.АдресЭП КАК АдресЭП
	|ПОМЕСТИТЬ Получатели
	|ИЗ
	|	&Источник КАК Источник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	АдресатыПисем.Ссылка КАК Контакт,
	|	Адресаты.Псевдоним КАК Псевдоним,
	|	Адресаты.ПсевдонимДляПоиска КАК ПсевдонимДляПоиска,
	|	СвязиАдресатКонтактCRM.КонтактCRM КАК КонтактCRM,
	|	"""" КАК Наименование,
	|	Адресаты.АдресЭП КАК АдресЭП
	|ИЗ
	|	Получатели КАК Адресаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АдресатыПисем КАК АдресатыПисем
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиАдресатКонтактCRM КАК СвязиАдресатКонтактCRM
	|			ПО АдресатыПисем.Ссылка = СвязиАдресатКонтактCRM.Адресат
	|		ПО Адресаты.АдресЭП = АдресатыПисем.Адресат
	|ГДЕ
	|	Адресаты.АдресЭП <> """"
	|	И АдресатыПисем.Ссылка <> ЗНАЧЕНИЕ(Справочник.АдресатыПисем.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АдресатыПисем.Ссылка,
	|	Адресаты.Псевдоним,
	|	Адресаты.ПсевдонимДляПоиска,
	|	СвязиАдресатКонтактCRM.КонтактCRM,
	|	Контрагенты.Наименование,
	|	АдресатыПисем.Адресат
	|ИЗ
	|	Получатели КАК Адресаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиАдресатКонтактCRM КАК СвязиАдресатКонтактCRM
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АдресатыПисем КАК АдресатыПисем
	|				ПО СвязиАдресатКонтактCRM.Адресат = АдресатыПисем.Ссылка
	|			ПО (СвязиАдресатКонтактCRM.КонтактCRM = Контрагенты.Ссылка)
	|		ПО (Контрагенты.Наименование ПОДОБНО Адресаты.ПсевдонимДляПоиска)
	|ГДЕ
	|	Адресаты.Псевдоним <> """"
	|	И АдресатыПисем.Ссылка <> ЗНАЧЕНИЕ(Справочник.АдресатыПисем.ПустаяСсылка)
	|	И Адресаты.АдресЭП = """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АдресатыПисем.Ссылка,
	|	Адресаты.Псевдоним,
	|	Адресаты.ПсевдонимДляПоиска,
	|	СвязиАдресатКонтактCRM.КонтактCRM,
	|	Лиды.Наименование,
	|	АдресатыПисем.Адресат
	|ИЗ
	|	Получатели КАК Адресаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Лиды КАК Лиды
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиАдресатКонтактCRM КАК СвязиАдресатКонтактCRM
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АдресатыПисем КАК АдресатыПисем
	|				ПО СвязиАдресатКонтактCRM.Адресат = АдресатыПисем.Ссылка
	|			ПО (СвязиАдресатКонтактCRM.КонтактCRM = Лиды.Ссылка)
	|		ПО (Лиды.Наименование ПОДОБНО Адресаты.ПсевдонимДляПоиска)
	|ГДЕ
	|	Адресаты.Псевдоним <> """"
	|	И АдресатыПисем.Ссылка <> ЗНАЧЕНИЕ(Справочник.АдресатыПисем.ПустаяСсылка)
	|	И Адресаты.АдресЭП = """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АдресатыПисем.Ссылка,
	|	Адресаты.Псевдоним,
	|	Адресаты.ПсевдонимДляПоиска,
	|	СвязиАдресатКонтактCRM.КонтактCRM,
	|	КонтактыЛидов.Наименование,
	|	АдресатыПисем.Адресат
	|ИЗ
	|	Получатели КАК Адресаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактыЛидов КАК КонтактыЛидов
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиАдресатКонтактCRM КАК СвязиАдресатКонтактCRM
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АдресатыПисем КАК АдресатыПисем
	|				ПО СвязиАдресатКонтактCRM.Адресат = АдресатыПисем.Ссылка
	|			ПО (СвязиАдресатКонтактCRM.КонтактCRM = КонтактыЛидов.Ссылка)
	|		ПО (КонтактыЛидов.Наименование ПОДОБНО Адресаты.ПсевдонимДляПоиска)
	|ГДЕ
	|	Адресаты.Псевдоним <> """"
	|	И АдресатыПисем.Ссылка <> ЗНАЧЕНИЕ(Справочник.АдресатыПисем.ПустаяСсылка)
	|	И Адресаты.АдресЭП = """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АдресатыПисем.Ссылка,
	|	Адресаты.Псевдоним,
	|	Адресаты.ПсевдонимДляПоиска,
	|	СвязиАдресатКонтактCRM.КонтактCRM,
	|	КонтактныеЛица.Наименование,
	|	АдресатыПисем.Адресат
	|ИЗ
	|	Получатели КАК Адресаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица КАК КонтактныеЛица
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиАдресатКонтактCRM КАК СвязиАдресатКонтактCRM
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АдресатыПисем КАК АдресатыПисем
	|				ПО СвязиАдресатКонтактCRM.Адресат = АдресатыПисем.Ссылка
	|			ПО (СвязиАдресатКонтактCRM.КонтактCRM = КонтактныеЛица.Ссылка)
	|		ПО (КонтактныеЛица.Наименование ПОДОБНО Адресаты.ПсевдонимДляПоиска)
	|ГДЕ
	|	Адресаты.Псевдоним <> """"
	|	И АдресатыПисем.Ссылка <> ЗНАЧЕНИЕ(Справочник.АдресатыПисем.ПустаяСсылка)
	|	И Адресаты.АдресЭП = """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АдресатыПисем.Ссылка,
	|	Адресаты.Псевдоним,
	|	Адресаты.ПсевдонимДляПоиска,
	|	СвязиАдресатКонтактCRM.КонтактCRM,
	|	АдресатыПисем.Наименование,
	|	АдресатыПисем.Адресат
	|ИЗ
	|	Получатели КАК Адресаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиАдресатКонтактCRM КАК СвязиАдресатКонтактCRM
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АдресатыПисем КАК АдресатыПисем
	|				ПО СвязиАдресатКонтактCRM.Адресат = АдресатыПисем.Ссылка
	|			ПО (СвязиАдресатКонтактCRM.КонтактCRM = ФизическиеЛица.Ссылка)
	|		ПО (ФизическиеЛица.Наименование ПОДОБНО Адресаты.ПсевдонимДляПоиска)
	|ГДЕ
	|	Адресаты.Псевдоним <> """"
	|	И АдресатыПисем.Ссылка <> ЗНАЧЕНИЕ(Справочник.АдресатыПисем.ПустаяСсылка)
	|	И Адресаты.АдресЭП = """"";
	
	Запрос.УстановитьПараметр("Источник", ТаблицаПолучателей);
	ТаблицаАдресантов = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаАдресантов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокВыбораКонтактов(знач СтрокаПоиска, ДоступнаРаботаСЛидами)
	
	МассивКонтрагентов = Новый Массив;
	МассивКонтактов = Новый Массив;
	МассивЛидов = Новый Массив;
	МассивКонтактовЛидов = Новый Массив;
	
	ДанныеВыбораКонтактов = Новый СписокЗначений;
	
	НомерВхожденияКонец = СтрНайти(СтрокаПоиска, ">", НаправлениеПоиска.СКонца);
	Если НомерВхожденияКонец <> 0 Тогда
		НомерВхожденияНачало = СтрНайти(СтрокаПоиска, "<", НаправлениеПоиска.СКонца, НомерВхожденияКонец);
		СтрокаЭлектроннаяПочта = Сред(СтрокаПоиска, НомерВхожденияНачало, НомерВхожденияКонец - НомерВхожденияНачало + 1);
		Если СтрНайти(СтрокаЭлектроннаяПочта, "@") <> 0 Тогда
			СтрокаПоиска = СокрЛП(СтрЗаменить(СтрокаПоиска, СтрокаЭлектроннаяПочта, ""));
		КонецЕсли;
	КонецЕсли;
	
	Если СтрДлина(СтрокаПоиска) < 3 Тогда
		Возврат ДанныеВыбораКонтактов;
	КонецЕсли;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("ПометкаУдаления", Ложь));
	ПараметрыВыбора.Вставить("СтрокаПоиска", СтрокаПоиска);
	
	ДанныеВыбораКонтрагентов = Справочники.Контрагенты.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Для Каждого ЭлементСписка Из ДанныеВыбораКонтрагентов Цикл
		МассивКонтрагентов.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
	
	ДанныеВыбораКонтактныхЛиц = Справочники.КонтактныеЛица.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Для Каждого ЭлементСписка Из ДанныеВыбораКонтактныхЛиц Цикл
		МассивКонтактов.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
	
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("ВариантЗавершения", Перечисления.ВариантЗавершенияРаботыСЛидом.ПустаяСсылка()));
	ДанныеВыбораЛидов = Справочники.Лиды.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Для Каждого ЭлементСписка Из ДанныеВыбораЛидов Цикл
		МассивЛидов.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
	
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("ПометкаУдаления", Ложь)); 
	ДанныеВыбораКонтактовЛидов = Справочники.КонтактыЛидов.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Для Каждого ЭлементСписка Из ДанныеВыбораКонтактовЛидов Цикл
		МассивКонтактовЛидов.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
	
	Если ДоступнаРаботаСЛидами Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка,
		|	Контрагенты.АдресЭПДляПоиска КАК АдресЭПДляПоиска
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка В(&МассивКонтрагентов)
		|	И Контрагенты.АдресЭПДляПоиска <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтактныеЛица.Ссылка КАК Ссылка,
		|	КонтактныеЛица.АдресЭПДляПоиска КАК АдресЭПДляПоиска
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛица
		|ГДЕ
		|	КонтактныеЛица.Ссылка В(&МассивКонтактов)
		|	И КонтактныеЛица.АдресЭПДляПоиска <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Лиды.Ссылка КАК Ссылка,
		|	Лиды.АдресЭПДляПоиска КАК АдресЭПДляПоиска
		|ИЗ
		|	Справочник.Лиды КАК Лиды
		|ГДЕ
		|	Лиды.Ссылка В(&МассивЛидов)
		|	И Лиды.АдресЭПДляПоиска <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтактыЛидов.Ссылка КАК Ссылка,
		|	Лиды.АдресЭПДляПоиска КАК АдресЭПДляПоиска
		|ИЗ
		|	Справочник.КонтактыЛидов КАК КонтактыЛидов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Лиды КАК Лиды
		|		ПО КонтактыЛидов.Владелец = Лиды.Ссылка
		|ГДЕ
		|	Лиды.Ссылка В(&МассивКонтактовЛидов)
		|	И Лиды.АдресЭПДляПоиска <> """"";
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка,
		|	Контрагенты.АдресЭПДляПоиска КАК АдресЭПДляПоиска
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка В(&МассивКонтрагентов)
		|	И Контрагенты.АдресЭПДляПоиска <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтактныеЛица.Ссылка КАК Ссылка,
		|	КонтактныеЛица.АдресЭПДляПоиска КАК АдресЭПДляПоиска
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛица
		|ГДЕ
		|	КонтактныеЛица.Ссылка В(&МассивКонтактов)
		|	И КонтактныеЛица.АдресЭПДляПоиска <> """"";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивКонтактов", МассивКонтактов);
	Запрос.УстановитьПараметр("МассивКонтрагентов", МассивКонтрагентов);
	Если ДоступнаРаботаСЛидами Тогда
		Запрос.УстановитьПараметр("МассивЛидов", МассивЛидов);
		Запрос.УстановитьПараметр("МассивКонтактовЛидов", МассивКонтактовЛидов);
	КонецЕсли;

	ПредставлениеКонтрагент = НСтр("ru = '(контрагент)'");
	ПредставлениеКонтактноеЛицо = НСтр("ru = '(контактное лицо)'");
	ПредставлениеЛид = НСтр("ru = '(лид)'");
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаДетальныеЗаписи = РезультатЗапроса[0].Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДанныеВыбораКонтактов.Добавить(ВыборкаДетальныеЗаписи.Ссылка, Новый ФорматированнаяСтрока(
		Новый ФорматированнаяСтрока(ДанныеВыбораКонтрагентов.НайтиПоЗначению(ВыборкаДетальныеЗаписи.Ссылка).Представление,
		ПредставлениеКонтрагент), " <" + ВыборкаДетальныеЗаписи.АдресЭПДляПоиска + ">"));
	КонецЦикла;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[1].Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДанныеВыбораКонтактов.Добавить(ВыборкаДетальныеЗаписи.Ссылка, Новый ФорматированнаяСтрока(
		Новый ФорматированнаяСтрока(ДанныеВыбораКонтактныхЛиц.НайтиПоЗначению(ВыборкаДетальныеЗаписи.Ссылка).Представление,
		ПредставлениеКонтактноеЛицо), " <" + ВыборкаДетальныеЗаписи.АдресЭПДляПоиска + ">"));
	КонецЦикла;
	
	Если ДоступнаРаботаСЛидами Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса[2].Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ДанныеВыбораКонтактов.Добавить(ВыборкаДетальныеЗаписи.Ссылка, Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(ДанныеВыбораЛидов.НайтиПоЗначению(ВыборкаДетальныеЗаписи.Ссылка).Представление,
			ПредставлениеЛид), " <" + ВыборкаДетальныеЗаписи.АдресЭПДляПоиска + ">"));
		КонецЦикла;
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса[3].Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ДанныеВыбораКонтактов.Добавить(ВыборкаДетальныеЗаписи.Ссылка, Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(ДанныеВыбораКонтактовЛидов.НайтиПоЗначению(ВыборкаДетальныеЗаписи.Ссылка).Представление,
			ПредставлениеЛид), " <" + ВыборкаДетальныеЗаписи.АдресЭПДляПоиска + ">"));
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("Недействителен, ПометкаУдаления", Ложь, Ложь));
	ПараметрыВыбора.Вставить("СтрокаПоиска", СтрокаПоиска);
	
	ДанныеВыбораСотрудников = ДанныеВыбораСотрудников(ПараметрыВыбора);
	Для Каждого ЭлементСписка Из ДанныеВыбораСотрудников Цикл
		ДанныеВыбораКонтактов.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("ПометкаУдаления", Ложь));
	ПараметрыВыбора.Вставить("СтрокаПоиска", СтрокаПоиска);
	
	ДанныеВыбораАдресатовПисьма = Справочники.АдресатыПисем.ПолучитьДанныеВыбора(ПараметрыВыбора);
	Для Каждого ЭлементСписка Из ДанныеВыбораАдресатовПисьма Цикл
		ДанныеВыбораКонтактов.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление,, ЭлементСписка.Картинка);
	КонецЦикла;

	Возврат ДанныеВыбораКонтактов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокВыбораТемы(знач СтрокаПоиска, знач ИсторияТемСтрокой)
	
	СписокВыбораТемы = Новый СписокЗначений;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("ПометкаУдаления", Ложь));
	ПараметрыВыбора.Вставить("СтрокаПоиска", СтрокаПоиска);
	ПараметрыВыбора.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	
	ДанныеВыбораТемы = Справочники.ТемыСобытий.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Для Каждого ЭлементСписка Из ДанныеВыбораТемы Цикл
		СписокВыбораТемы.Добавить(ЭлементСписка.Значение, Новый ФорматированнаяСтрока(ЭлементСписка.Представление, " (тема события)"));
	КонецЦикла;
	
	Для Каждого ЭлементИстории Из ИсторияТемСтрокой Цикл
		Если Лев(ЭлементИстории.Значение, СтрДлина(СтрокаПоиска)) = СтрокаПоиска Тогда
			СписокВыбораТемы.Добавить(ЭлементИстории.Значение, 
			Новый ФорматированнаяСтрока(Новый ФорматированнаяСтрока(СтрокаПоиска,Новый Шрифт(,,Истина),WebЦвета.Зеленый), Сред(ЭлементИстории.Значение, СтрДлина(СтрокаПоиска)+1)));
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокВыбораТемы;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьИсториюТемСтрокой()
	
	СписокВыбораТемы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("СписокВыбораТемыСобытия", "");
	Если СписокВыбораТемы <> Неопределено Тогда
		ИсторияТемСтрокой.ЗагрузитьЗначения(СписокВыбораТемы);
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьСписокВыбораТемыСобытия()

&НаКлиенте
Процедура ЗаполнитьСодержаниеСобытия(ТемаСобытия)
	
	Если ТипЗнч(ТемаСобытия) <> Тип("СправочникСсылка.ТемыСобытий") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДокументHTML.body.innerHTML) Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьСодержаниеСобытияЗавершение", ЭтотОбъект, Новый Структура("ТемаСобытия", ТемаСобытия)),
		НСтр("ru = 'Перезаполнить содержание по выбранной теме?'"), РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьСодержаниеСобытияФрагмент(ТемаСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСодержаниеСобытияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСодержаниеСобытияФрагмент(ДополнительныеПараметры.ТемаСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСодержаниеСобытияФрагмент(Знач ТемаСобытия)
	
	ДокументHTML.body.innerHTML = СодержаниеПоТемеСобытия(ТемаСобытия);
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция СодержаниеПоТемеСобытия(ТемаСобытия)
	Возврат HTMLИзПростогоТекста(ТемаСобытия.Содержание, Ложь);
КонецФункции

&НаСервере
Функция ТаблицаВложений()
	
	Результат = Вложения.Выгрузить();
	
	Если Не ЗначениеЗаполнено(КартинкиHTML) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ТекКартинка Из КартинкиHTML Цикл
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТекКартинка.Значение.ПолучитьДвоичныеДанные(), УникальныйИдентификатор);
		НоваяСтрока.Идентификатор = ТекКартинка.Ключ;
		НоваяСтрока.Представление = ТекКартинка.Ключ;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПисьмоПоШаблону(ДанныеСообщения)
	
	Если ТипЗнч(ДанныеСообщения.Получатель) = Тип("Массив") И ДанныеСообщения.Получатель.Количество() > 0 Тогда
		ТаблицаУчастников.Очистить();
		
		КонтактыCRM = Новый Массив;
		Для Каждого Получатель Из ДанныеСообщения.Получатель  Цикл
			КонтактыCRM.Добавить(Получатель.ИсточникКонтактнойИнформации);
		КонецЦикла;
		
		АдресатыПолучателей = ПолучитьАдресатовПоКонтактам(КонтактыCRM);
		Для Каждого Получатель Из ДанныеСообщения.Получатель Цикл
			
			КонтактУжеДобавлен = ТаблицаУчастников.НайтиСтроки(Новый Структура("КакСвязаться", Получатель.Адрес));
			Если КонтактУжеДобавлен.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Участник = ТаблицаУчастников.Добавить();
			МассивАдресатов = АдресатыПолучателей.НайтиСтроки(Новый Структура("КонтактCRM, Адресат", Получатель.ИсточникКонтактнойИнформации, Получатель.Адрес));
			Если МассивАдресатов.Количество() > 0 Тогда
				Участник.Контакт = МассивАдресатов[0].АдресатСсылка;
				Участник.КонтактCRM = Получатель.ИсточникКонтактнойИнформации;
				Участник.КакСвязаться = Получатель.Адрес;
			Иначе
				Участник.Контакт = Получатель.Представление;
				Участник.КакСвязаться = Получатель.Адрес;
				Участник.КонтактCRM = Получатель.ИсточникКонтактнойИнформации;
				Участник.НеобходимоУстановитьСвязь = Истина;
			КонецЕсли;
			
			Участник.ТипПолучателяЭлектронногоПисьма = ПредопределенноеЗначение("Перечисление.ТипыПолучателейЭлектронногоПисьма.Кому");
			ОбновитьПредставлениеСтрокиПолучателя(Участник);
			
		КонецЦикла;
		УстановитьСвязиСОбъектамиCRM();
		УстановитьКартинкиУчастников();
	КонецЕсли;
	
	КартинкиФД = Новый Структура;
	Если ДанныеСообщения.Вложения <> Неопределено Тогда
		Для Каждого Вложение Из ДанныеСообщения.Вложения Цикл
			Если ЗначениеЗаполнено(Вложение.Идентификатор) Тогда
				КартинкиФД.Вставить(
				Вложение.Представление,
				Новый Картинка(ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище)));
			Иначе
				
				НовоеВложение = Вложения.Добавить();
				НовоеВложение.Представление = Вложение.Представление;
				НовоеВложение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(
				ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище), ЭтотОбъект.УникальныйИдентификатор);
				
				ЧастиИмениФайла = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Вложение.Представление, ".", Ложь);
				Если ЧастиИмениФайла.Количество() > 1 Тогда
					РасширениеБезТочки = ЧастиИмениФайла[ЧастиИмениФайла.Количество()-1];
					НовоеВложение.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(РасширениеБезТочки);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Объект.Тема = ДанныеСообщения.Тема;
	
	ТекстПисьма = ДанныеСообщения.Текст;
	Если СтрНайти(ТекстПисьма, "<html") Тогда
		ТекстHTMLИзФорматированногоДокументаПеревестиВОбычныйHTML(ТекстПисьма, КартинкиФД);
	КонецЕсли;
	
	Возврат ТекстПисьма;
	
КонецФункции

&НаСервере
Процедура ТекстHTMLИзФорматированногоДокументаПеревестиВОбычныйHTML(ТекстФД, СтруктураКартинок)
	
	ТекстФД = Гипертекст.РазложитьТекстHTML(ТекстФД).Тело;
	
	ПоместитьКартинкиИзСтруктурыВHTML(ТекстФД, СтруктураКартинок);
	
	ТекстФД = СтрЗаменить(ТекстФД, "<p", "<div");
	ТекстФД = СтрЗаменить(ТекстФД, "</p>", "</div>");
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьКартинкиИзСтруктурыВHTML(ТекстHTML, СтруктураКартинок)
	
	Для Каждого Картинка Из СтруктураКартинок Цикл
		
		ДвоичныеДанные = Картинка.Значение.ПолучитьДвоичныеДанные();
		ДанныеСтрокой = Base64Строка(ДвоичныеДанные);
		
		СтарыйSRC = СтрШаблон("src=""%1""", Картинка.Ключ);
		НовыйSRC = СтрШаблон("src=""data:image/jpg;base64,%1""", ДанныеСтрокой);
		ТекстHTML = СтрЗаменить(ТекстHTML, СтарыйSRC, НовыйSRC);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресатовПоКонтактам(КонтактыCRM)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АдресатыПисем.Адресат КАК Адресат,
	|	СвязиАдресатКонтактCRM.КонтактCRM КАК КонтактCRM,
	|	АдресатыПисем.Ссылка КАК АдресатСсылка
	|ИЗ
	|	Справочник.АдресатыПисем КАК АдресатыПисем
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиАдресатКонтактCRM КАК СвязиАдресатКонтактCRM
	|		ПО (СвязиАдресатКонтактCRM.Адресат = АдресатыПисем.Ссылка)
	|ГДЕ
	|	СвязиАдресатКонтактCRM.КонтактCRM В(&Контакты)";
	
	Запрос.УстановитьПараметр("Контакты", КонтактыCRM);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаКлиенте
Процедура ОткрытьВыборШаблонаПоПредмету(ПредметШаблона = Неопределено)
	
	Если Не ЕстьДоступныеШаблоны(ПредметШаблона) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
		НСтр("ru='Нет доступных шаблонов. Добавить новые шаблоны можно в списке шаблонов: CRM — Шаблоны писем, SMS'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоШаблонуПослеВыбораШаблона", ЭтотОбъект);
	ШаблоныСообщенийКлиент.ПодготовитьСообщениеПоШаблону(ПредметШаблона, "Письмо", ОписаниеОповещения,, Новый Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьПодписьЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ВставитьПодписьПоСсылке(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьПодписьПоСсылке(СсылкаНаПодпись = Неопределено)
	
	ПодписьHTML = ПолучитьПодписьНаСервере(СсылкаНаПодпись);
	Если ПодписьHTML = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументHTML.body.innerHTML = ПодписьHTML + ДокументHTML.body.innerHTML;
	
	Попытка
		ОкноHTMLДокумента.setResizableToImages();
	Исключение
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
			НСтр("ru = 'ГипертекстКлиент.Вызов команды HTML снаружи HTML'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()),
			"Ошибка",
			ТекстОшибки);
		
	КонецПопытки;
	
	ЗаписатьHTMLВИсторию();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПодписьНаСервере(СсылкаНаПодпись)
	
	СтруктураПодписи = Справочники.ПодписиПисем.ПолучитьПодпись(Объект.УчетнаяЗапись, СсылкаНаПодпись);
	
	Если СтруктураПодписи <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ДанныеИсходногоСообщения) Тогда
			ФорматированныйДокументПодписи = СтруктураПодписи.ПодписьПриОтветеФорматированныйДокумент.Получить();
		Иначе
			ФорматированныйДокументПодписи = СтруктураПодписи.ПодписьДляНовыхФорматированныйДокумент.Получить();
		КонецЕсли;
		
		ТекстHTML = "";
		СтруктураКартинок = Новый Структура;
		ФорматированныйДокументПодписи.ПолучитьHTML(ТекстHTML, СтруктураКартинок);
		
		ТекстHTMLИзФорматированногоДокументаПеревестиВОбычныйHTML(ТекстHTML, СтруктураКартинок);
		
		Возврат ТекстHTML;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоШаблонуПослеВыбораШаблона(ДанныеСообщения, ДополнительныеПараметры) Экспорт
	
	Если ДанныеСообщения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПисьма = ПисьмоПоШаблону(ДанныеСообщения);
	
	Если СтрНайти(ДанныеСообщения.Текст, "<html") Тогда
		
		ДокументHTML.body.innerHTML = ТекстПисьма;
		
		Попытка
			ОкноHTMLДокумента.setResizableToImages();
		Исключение
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
				НСтр("ru = 'ГипертекстКлиент.Вызов команды HTML снаружи HTML'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()),
				"Ошибка",
				ТекстОшибки);
			
		КонецПопытки;
		
		ЗаписатьHTMLВИсторию();
		
		НастроитьФормуПоФорматуСодержания(Истина);
		
	Иначе
		
		СодержаниеHTML = ТекстПисьма;
		НастроитьФормуПоФорматуСодержания(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВыборПредметаШаблона(СписокПредметов)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоШаблонуПослеВыбораПредмета", ЭтотОбъект);
	СписокПредметов.Вставить(0, "Общий", НСтр("ru='<Общие шаблоны>'"));
	
	СписокПредметов.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru='Выбор предмета шаблона'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуПослеВыбораПредмета(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = "Общий" Тогда
		ОткрытьВыборШаблонаПоПредмету();
	Иначе
		ОткрытьВыборШаблонаПоПредмету(ВыбранныйЭлемент.Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьДоступныеШаблоны(ПредметШаблона)
	Возврат ШаблоныСообщенийУНФ.ЕстьДоступныеШаблоны(Истина, ПредметШаблона);
КонецФункции

&НаКлиенте
Процедура ПоказатьМенюСозданияКонтакта(Элемент)
	
	СтрокаКИ = Элемент.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	
	ДополнительныеПараметры.Вставить("Контакт", СтрокаКИ.Контакт);
	ДополнительныеПараметры.Вставить("КакСвязаться", СтрокаКИ.КакСвязаться);
	ДополнительныеПараметры.Вставить("КонтактCRM", СтрокаКИ.КонтактCRM);
	
	ОповещениеСоздатьКонтакт = Новый ОписаниеОповещения("СоздатьКонтактCRMНаОсновании", ЭтотОбъект, ДополнительныеПараметры);
	
	СписокВыбораКонтактов = Новый СписокЗначений;
	СписокВыбораКонтактов.Добавить("Контрагент", НСтр("ru = 'Создать контрагента'"), , КартинкаКонтактаПоИндексу(2));
	СписокВыбораКонтактов.Добавить("Контакт", НСтр("ru = 'Создать контакт'"), , КартинкаКонтактаПоИндексу(4));
	СписокВыбораКонтактов.Добавить("Лид", НСтр("ru = 'Создать лид'"), ,КартинкаКонтактаПоИндексу(1));
	
	ПоказатьВыборИзСписка(ОповещениеСоздатьКонтакт, СписокВыбораКонтактов, Элемент);
		
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаписьКонтактаCRM(Параметр)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СвязиАдресатКонтактCRM.Адресат КАК Адресат
	|ИЗ
	|	РегистрСведений.СвязиАдресатКонтактCRM КАК СвязиАдресатКонтактCRM
	|ГДЕ
	|	СвязиАдресатКонтактCRM.КонтактCRM В(&Контакт)";
	
	Контакты = Новый Массив;
	
	Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("КонтактноеЛицо") Тогда
		Параметр = Параметр.КонтактноеЛицо;
	КонецЕсли;
	
	Контакты.Добавить(Параметр);
	ДополнитьОтборПодчиненнымиКонтактами(Контакты, Параметр);
	
	Запрос.УстановитьПараметр("Контакт", Контакты);
	ТаблицаАдресатов = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаАдресатов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СвязиОбновлены = Ложь;
	
	Для Каждого Адресат Из ТаблицаУчастников Цикл
		
		Если ЗначениеЗаполнено(Адресат.КонтактCRM) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивАдресатов = ТаблицаАдресатов.НайтиСтроки(Новый Структура("Адресат", Адресат.Контакт));
		
		Если МассивАдресатов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Адресат.КонтактCRM = Параметр;
		ОбновитьПредставлениеСтрокиПолучателя(Адресат);
		СвязиОбновлены = Истина;
	КонецЦикла;
	
	Если СвязиОбновлены Тогда
		УстановитьКартинкиУчастников();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьОтборПодчиненнымиКонтактами(Контакты, Параметр)
	
	Если ТипЗнч(Параметр) <> Тип("СправочникСсылка.Лиды") Тогда
		Возврат;
	КонецЕсли;
	
	КонтактыЛида = Справочники.КонтактыЛидов.КонтактыЛида(Параметр);
	
	Для Каждого Контакт Из КонтактыЛида Цикл
		Контакты.Добавить(Контакт.Ссылка)
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтактCRMНаОсновании(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтактCRMУжеСоздан(Результат.Значение, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = "АдреснаяКнига" Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		ДополнительныеПараметры.Вставить("Результат", Результат);
		Оповещение = Новый ОписаниеОповещения("ОбработатьВопросСозданиеКонтактаНаОсновании", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
		|Сохранение контакта возможно только после записи данных.
		|Данные будут записаны'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	КИКонтактнойФормы = ПодготовитьКонтактнуюИнформациюПоДаннымКФ(Объект.Ссылка, ДополнительныеПараметры.КакСвязаться);
	
	Если КИКонтактнойФормы <> Неопределено Тогда
		ПараметрыФормы = ПараметрыФормыПоКФ(Объект.Ссылка, КИКонтактнойФормы, ДополнительныеПараметры.Контакт);
		ОткрытьФорму(ФормаОбъектаКонтактаCRM(Результат.Значение), ПараметрыФормы);
		Возврат;
	КонецЕсли;	
			
	Если Не ЭлектроннаяПочтаУНФКлиент.АдресЭлектроннойПочтыЗаполнен(ЭтотОбъект, ДополнительныеПараметры.КакСвязаться) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПараметрыФормыСозданияКонтакта(
		Результат.Значение,
		Объект.Ссылка,
		ДополнительныеПараметры.Контакт,
		ДополнительныеПараметры.КонтактCRM,
		ДополнительныеПараметры.КакСвязаться);
	
	ОткрытьФорму(ФормаОбъектаКонтактаCRM(Результат.Значение),
		ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросСозданиеКонтактаНаОсновании(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Записать();
	СоздатьКонтактCRMНаОсновании(ДополнительныеПараметры.Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросСохраненияФайловНаДиск(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Записать();
	Если ДополнительныеПараметры.Команда.Действие = "СохранитьФайлНаДиск" Тогда
		СохранитьФайлНаДиск(ДополнительныеПараметры.Команда);
	КонецЕсли;
	
	Если ДополнительныеПараметры.Команда.Действие = "СохранитьВсеФайлыНаДиск" Тогда
		СохранитьВсеФайлыНаДиск(ДополнительныеПараметры.Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыФормыПоКФ(ПараметрКоманды, КИКонтактнойФормы, Контакт)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Контакт", Контакт);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ИсточникПривлечения = Объект.ИсточникПривлечения;
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура);
	ПараметрыФормы.ЗначенияЗаполнения.Вставить("Покупатель", Истина);
	ПараметрыФормы.ЗначенияЗаполнения.Вставить("ИсточникПривлечения", ИсточникПривлечения);
	ПараметрыФормы.Вставить("ДанныеИзКонтактнойФормы", КИКонтактнойФормы);
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Функция ПодготовитьКонтактнуюИнформациюПоДаннымКФ(Событие, КакСвязаться)
	Возврат Справочники.КонтактныеФормыGoogle.ПодготовитьКонтактнуюИнформациюПоДаннымКФ(Событие, КакСвязаться);
КонецФункции

&НаСервере
Функция ПараметрыФормыСозданияКонтакта(ВидКонтакта, Событие, Контакт, КонтактCRM, КакСвязаться)
	
	Результат = Новый Структура;
	Результат.Вставить("ЗначенияЗаполнения", Новый Структура);
	
	Если ВидКонтакта = "Контрагент" Тогда
		Результат.ЗначенияЗаполнения.Вставить("Покупатель", Истина);
	КонецЕсли;
	
	ИсточникПривлечения = Объект.ИсточникПривлечения;
	Результат.ЗначенияЗаполнения.Вставить("ИсточникПривлеченияПокупателя", ИсточникПривлечения);
	
	Если ВидКонтакта = "Контрагент" И ТипЗнч(КонтактCRM) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Результат.Вставить("Контакт", КонтактCRM);
		Возврат Результат;
	КонецЕсли;
	
	Если ВидКонтакта = "Контакт" И ТипЗнч(КонтактCRM) = Тип("СправочникСсылка.Контрагенты") Тогда
		Результат.Вставить("Контакт", КонтактCRM);
		Возврат Результат;
	КонецЕсли;
	
	Результат.Вставить("КонтактКакСвязаться", Новый Структура);
	Результат.КонтактКакСвязаться.Вставить("ВидКонтакта", ВидКонтакта);
	Результат.КонтактКакСвязаться.Вставить("Контакт", Контакт);
	Результат.КонтактКакСвязаться.Вставить("КакСвязаться", КакСвязаться);
	Результат.КонтактКакСвязаться.Вставить("ТипКИ", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция КонтактCRMУжеСоздан(ТипКонтакта, ДанныеКонтакта)
	
	Если ТипКонтакта = "АдреснаяКнига" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипКонтакта = "Контрагент" Тогда
		
		Возврат ЭлектроннаяПочтаУНФКлиент.КонтрагентУжеСоздан(
			ДанныеКонтакта.КонтактCRM,
			НСтр("ru = 'Контрагент уже создан.'"),
			ЭтотОбъект);
	КонецЕсли;
	
	Если ТипКонтакта = "Контакт" Тогда
		
		Возврат ЭлектроннаяПочтаУНФКлиент.КонтактУжеСоздан(
			ДанныеКонтакта.КонтактCRM,
			НСтр("ru = 'Контакт уже создан.'"),
			ЭтотОбъект);
		
	КонецЕсли;
	
	Если ТипКонтакта = "Лид" Тогда
		
		Возврат НЕ МожноСоздатьЛид(ДанныеКонтакта.КонтактCRM);
		
	КонецЕсли;
		
КонецФункции

&НаКлиенте
Функция МожноСоздатьЛид(Контакт)
	
	МожноСоздатьЛид = Истина;
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		МожноСоздатьЛид = Ложь;
		ТекстСообщения = НСтр("ru='Контакт уже создан.'");
	КонецЕсли;
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Контрагенты") Тогда
		МожноСоздатьЛид = Ложь;
		ТекстСообщения = НСтр("ru='Контрагент уже создан.'");
	КонецЕсли;
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Лиды") Тогда
		МожноСоздатьЛид = Ложь;
		ТекстСообщения = НСтр("ru='Лид уже создан.'");
	КонецЕсли;
	
	Если НЕ МожноСоздатьЛид Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения,,
			СтрШаблон(
				"ТаблицаУчастников[%1].Контакт", 
				Формат(ТаблицаУчастников.Индекс(Элементы.Получатели.ТекущиеДанные), "ЧГ=")
			));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ФормаОбъектаКонтактаCRM(ВидКонтакта)
	
	Если ВидКонтакта = "Контрагент" Тогда
		Возврат "Справочник.Контрагенты.ФормаОбъекта";
	ИначеЕсли ВидКонтакта = "Контакт" Тогда
		Возврат "Справочник.КонтактныеЛица.ФормаОбъекта";
	Иначе
		Возврат "Справочник.Лиды.ФормаОбъекта";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьУчастниковСсылочногоТипа()
	
	Участники = ТаблицаУчастников.Выгрузить(,"Контакт").ВыгрузитьКолонку("Контакт");
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияТипаИзМассива(Участники, Тип("Строка"));
	Индекс = Участники.ВГраница();
	Пока Индекс >= 0 Цикл
		Если Не ЗначениеЗаполнено(Участники[Индекс]) Тогда
			Участники.Удалить(Индекс);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Возврат Участники;
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнениеОбязательныхРеквизитов(Отказ)
	
	ОбязательныеДляЗаполненияРеквизиты = РегистрыСведений.ОбязательностьЗаполненияРеквизитов.ОбязательныеДляЗаполненияРеквизитыОбъекта("ЭлектронноеПисьмо");
	
	Для Каждого Реквизит Из ОбязательныеДляЗаполненияРеквизиты Цикл
		
		Если ЗначениеЗаполнено(Объект[Реквизит]) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(
		ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", 
		"Источник привлечения"),,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Объект[%1]", Реквизит),,
		Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЛидаПоКонтакту(Контакт)
	Возврат Справочники.КонтактыЛидов.ВладелецКонтакта(Контакт);
КонецФункции

&НаСервере
Функция ДокументыОснованияСпискомЗначений()
	
	Результат = Новый СписокЗначений;
	
	Для каждого Строка Из Объект.ДокументыОснования Цикл
		Если Результат.НайтиПоЗначению(Строка.ДокументОснование) = Неопределено Тогда
			Результат.Добавить(Строка.ДокументОснование);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПредложитьСохранитьДокумент(ТекстПредупреждения, ОписаниеОповещения = Неопределено)
	
	ЗаписьОбъектаДляПродолжения = Новый ОписаниеОповещения("ЗаписьОбъектаДляПродолжения", ЭтотОбъект, ОписаниеОповещения);
	ПоказатьВопрос(ЗаписьОбъектаДляПродолжения, ТекстПредупреждения, РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьОбъектаДляПродолжения(Результат, ОписаниеОповещения) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектЗаписан = Записать();
	
	Если ОбъектЗаписан И ОписаниеОповещения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция КартинкаКонтактаПоИндексу(Индекс)
	
	Если Индекс = 1 Тогда
		Возврат БиблиотекаКартинок.КонтактнаяИнформацияЭлПочта;
	ИначеЕсли Индекс = 2 Тогда
		Возврат БиблиотекаКартинок.КоллекцияКонтрагентыКомпания;
	ИначеЕсли Индекс = 3 Тогда
		Возврат БиблиотекаКартинок.КоллекцияКонтрагентыФизическоеЛицо;
	ИначеЕсли Индекс = 4 Тогда
		Возврат БиблиотекаКартинок.ИконкаКонтактногоЛица;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьКонтактСтрокойНаКлиенте()
	
	Для Каждого Стр Из ТаблицаУчастников Цикл
		Стр.КонтактСтрокой = "";
		
		Если ЗначениеЗаполнено(Стр.КонтактCRM) Тогда
			Контакт = Стр.КонтактCRM;
		Иначе
			Контакт = Стр.Контакт
		КонецЕсли;
		Если ЗначениеЗаполнено(Контакт) Тогда
			Стр.КонтактСтрокой = СтрШаблон(НСтр("ru = '%1 <%2>'"), Контакт, Стр.КакСвязаться);
		ИначеЕсли ЗначениеЗаполнено(Стр.КакСвязаться) Тогда
			Стр.КонтактСтрокой = СтрШаблон(НСтр("ru = '%1 <%2>'"), Стр.КакСвязаться, Стр.КакСвязаться);
		Иначе
			Стр.КонтактСтрокой = "";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьФайлыИзБуфера()
	
	Если ОбщегоНазначения.ПустойБуферОбмена() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИзБуфераОбмена = ОбщегоНазначения.СтрокиИзБуфераОбмена();
	Для Каждого Вложение Из ДанныеИзБуфераОбмена.Данные Цикл
		
		НовоеВложение = Вложения.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеВложение, ДанныеИзБуфераОбмена.Данные[0]);
		Если Не ЗначениеЗаполнено(НовоеВложение.АдресВоВременномХранилище) 
			Или Не ЗначениеЗаполнено(НовоеВложение.Представление) Тогда
			ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайла(Вложение.Ссылка);
			НовоеВложение.АдресВоВременномХранилище = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
			НовоеВложение.Представление = СтрШаблон("%1.%2", ДанныеФайла.Наименование, ДанныеФайла.Расширение);
		КонецЕсли;
		
	КонецЦикла;
	
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура СкопироватьВыделенныеФайлы(Знач Строки)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Вложения, Строки);
	
КонецПроцедуры

&НаСервере
Функция СписокКонтактовСДублями()
	
	ИндексПолучателя = 0;
	МассивУчастников = Новый Массив;
	Для Каждого Участник Из ТаблицаУчастников Цикл
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ИндексПолучателя", ИндексПолучателя);
		ДублиИзТаблицы = ДублиПолучателей.НайтиСтроки(СтруктураОтбора);
		Дубли = Новый Массив;
		
		Для Каждого Дубль Из ДублиИзТаблицы Цикл
			СтруктураДубля = Новый Структура();
			СтруктураДубля.Вставить("КонтактCRM", Дубль.ДубльПолучателя);
			СтруктураДубля.Вставить("ИндексКартинки", Дубль.ИндексКартинки);
			Дубли.Добавить(СтруктураДубля);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Участник.КонтактCRM) Или ЗначениеЗаполнено(Участник.Контакт) Тогда
			СтруктураУчастника = Новый Структура("КонтактCRM, ИндексКартинки, Дубли");
			ЗаполнитьЗначенияСвойств(СтруктураУчастника, Участник);
			СтруктураУчастника.Дубли = Дубли;
			СтруктураУчастника.КонтактCRM = ?(ЗначениеЗаполнено(Участник.КонтактCRM), Участник.КонтактCRM, Участник.Контакт);
			МассивУчастников.Добавить(СтруктураУчастника); 
		КонецЕсли;
		
		ИндексПолучателя = ИндексПолучателя + 1;
	КонецЦикла;
	
	Возврат МассивУчастников;
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеВыбораСотрудников(Параметры)
	
	ДанныеВыбораСотрудников = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизическиеЛица.Ссылка КАК Ссылка,
	|	ФизическиеЛица.Наименование КАК НаименованиеФизЛица,
	|	ФизическиеЛицаКИ.Представление КАК АдресЭП,
	|	Сотрудники.Наименование КАК НаименованиеСотрудника
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКИ
	|		ПО (ФизическиеЛицаКИ.Ссылка = ФизическиеЛица.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ФизическиеЛица.Ссылка = Сотрудники.Физлицо
	|ГДЕ
	|	(Сотрудники.Наименование ПОДОБНО &СтрокаПоиска
	|			ИЛИ ФизическиеЛицаКИ.Представление ПОДОБНО &СтрокаПоиска
	|				И ФизическиеЛицаКИ.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|ИТОГИ ПО
	|	Ссылка,
	|	НаименованиеФизЛица,
	|	АдресЭП";
	
	Запрос.УстановитьПараметр("СтрокаПоиска", "%"+Параметры.СтрокаПоиска+"%");
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	АдресЭП = "";
	Пока Выборка.Следующий() Цикл
		
		МассивСотрудников 	 = Новый Массив;
		ВыборкаСотрудники = Выборка.Выбрать();
		
		Пока ВыборкаСотрудники.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаСотрудники.НаименованиеСотрудника) Тогда
				Продолжить;
			КонецЕсли;
			МассивСотрудников.Добавить(ВыборкаСотрудники.НаименованиеСотрудника);
			Если ЗначениеЗаполнено(ВыборкаСотрудники.АдресЭП) Тогда
				АдресЭП = ВыборкаСотрудники.АдресЭП;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаСотрудники = "";
		Если МассивСотрудников.Количество() > 0 Тогда
			СтрокаСотрудники = СтрСоединить(МассивСотрудников, ", ");
		КонецЕсли;
		
		ПредставлениеФизЛица = СтрШаблон(НСтр("ru = '%1 <%2> (физ.лицо)'"), 
			Выборка.НаименованиеФизЛица, 
			АдресЭП);
			
		Если ЗначениеЗаполнено(СтрокаСотрудники) Тогда
			ПредставлениеФизЛица = СтрШаблон(НСтр("ru = '%1 (сотрудники: %2)'"), ПредставлениеФизЛица, СтрокаСотрудники);
		КонецЕсли;
		
		ДанныеВыбораСотрудников.Добавить(Выборка.Ссылка, ПредставлениеФизЛица);
	КонецЦикла;
	
	Возврат ДанныеВыбораСотрудников;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьТемуСобытияВИсторииАвтоподбора(Знач Тема, ИсторияТемСтрокой)
	
	Если ТипЗнч(Тема) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	Тема = СокрЛП(Тема);
	ЭлементИстории = ИсторияТемСтрокой.НайтиПоЗначению(Тема);
	Если ЭлементИстории <> Неопределено Тогда
		ИсторияТемСтрокой.Удалить(ЭлементИстории);
	КонецЕсли;
	ИсторияТемСтрокой.Вставить(0, Тема);
	ИсторияТем = ИсторияТемСтрокой.ВыгрузитьЗначения();
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("СписокВыбораТемыСобытия", "", ИсторияТем);
	
КонецПроцедуры

&НаСервере
Процедура ПриАвтоматическомСнятииПрочитанностиПисьма()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ЗагрузитьПриОткрытии Тогда
		Возврат;
	КонецЕсли;
	
	ФлагиПисьма = РегистрыСведений.ФлагиПисем.ФлагиПисьма(Объект.Ссылка);
	ПисьмоПрочитано = Не ФлагиПисьма.Непрочитанное;
	
	Если ПисьмоПрочитано Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьПравоИзмененияПросмотра = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ФлагиПисем);
	Если Не ЕстьПравоИзмененияПросмотра Тогда
		Возврат;
	КонецЕсли;
	
	// Флаг прочитанности письма снимается автоматически, если пользователь открыл письмо на просмотр.
	ФлагиПисьма.Непрочитанное = Ложь;
	РегистрыСведений.ФлагиПисем.ИзменитьФлагиПисьма(Объект.УчетнаяЗапись, Объект.Ссылка, ФлагиПисьма);
	ПисьмоПросмотрено = Истина;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область НастройкаВидимостьЭлементовФормы

// Процедура выполняет настройку элементов формы для корректного отображения в мобильном клиенте
//
&НаСервере
Процедура НастроитьФормуМобильныйКлиент()
	
	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаШапкаПисьма", "Группировка", ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПодвалПисьма", "Группировка", ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНадписи", "Группировка", ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСодержаниеИРеквизиты", "Группировка", ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОснованиеАвторИДаты", "Группировка", ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияОтступОснование", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПолучатели", "ОтображатьЗаголовок", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаВложения", "ОтображатьЗаголовок", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаВложения", "Заголовок", НСтр("ru = 'Вложения ('") + Строка(Вложения.Количество()) + ")");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДобавитьПолучателя", "Видимость", ЭтоИсходящееПисьмо);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаВложения", "Отображение", ОтображениеОбычнойГруппы.СлабоеВыделение);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КоманднаяПанельТекстаПисьма", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТекстПисьмаКонтекстноеМенюКоманды3", "Видимость", Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.Свойства
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

//@skip-check module-unused-method
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПовторноЗагрузитьСообщенияСПочтовогоСервера(Команда)
	
	Объект.ЗагрузитьПриОткрытии = Истина;
	Записать();
	
	НачатьЗагрузкуСообщенияСПочтовогоСервера();
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти
