
#Область Служебные

&НаКлиенте
Процедура ЗаглавиеДокументовОснований()
	
	Если Объект.ДокументыОснования.Количество() = 0 Тогда
		
		Содержание = НСтр("ru ='Выбор'");
		
	Иначе
		
		Содержание = Строка(Объект.ДокументыОснования[0].ДокументОснование);
		Если Объект.ДокументыОснования.Количество() > 1 Тогда
			
			Содержание = Содержание + СтрШаблон(НСтр("ru =' (и еще %1 док.)'"), Объект.ДокументыОснования.Количество() - 1);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПредставлениеДокументаОснования = Содержание;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОснованиеСчетФактуры()
	
	АдресДокументовОснований = ПоместитьВХранилищеТабличнуюЧасть("ДокументыОснования");
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Ссылка",			Объект.Ссылка);
	ПараметрыПодбора.Вставить("ВидОперации",	Объект.ВидОперации);
	ПараметрыПодбора.Вставить("Организация",	Объект.Организация);
	ПараметрыПодбора.Вставить("Контрагент",		Объект.Контрагент);
	ПараметрыПодбора.Вставить("Договор",		Объект.Договор);
	ПараметрыПодбора.Вставить("Валюта",			Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("Исправление",	Объект.Исправление);
	ПараметрыПодбора.Вставить("ЭтоВозврат",		Объект.ЭтоВозврат);
	ПараметрыПодбора.Вставить("АдресОснований",	АдресДокументовОснований);
	ПараметрыПодбора.Вставить("АвансыДоступны",	Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактураПолученный.Аванс"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьСписокДокументовОснованийЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.СчетФактураПолученный.Форма.ФормаДокументыОснования", ПараметрыПодбора, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

// Выполняет действия при изменении договора контрагента.
//
&НаКлиенте
Процедура ОбработатьИзменениеДоговора()

	ДоговорПередИзменением	= КэшЗначений.Договор;
	КэшЗначений.Договор		= Объект.Договор;

	Если ДоговорПередИзменением <> Объект.Договор Тогда

		ДанныеДоговора = ДанныеДоговораДляИзменения(ДатаДокумента, Объект.Договор);

		Если ЗначениеЗаполнено(Объект.Договор) Тогда

			Объект.Курс		= ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс = 0, 1,
				ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс);
			Объект.Кратность= ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность = 0, 1,
				ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность);

		КонецЕсли;

		Объект.ВалютаДокумента = ДанныеДоговора.ВалютаРасчетов;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыДокумента(СтруктураДанные)

	Если СтруктураДанные.ВалютаКурсКратность.Курс <> 0 Тогда
		КурсНовый = СтруктураДанные.ВалютаКурсКратность.Курс;
	Иначе
		КурсНовый = 1;
	КонецЕсли;
	
	Если СтруктураДанные.ВалютаКурсКратность.Кратность <> 0 Тогда
		КратностьНовый = СтруктураДанные.ВалютаКурсКратность.Кратность;
	Иначе
		КратностьНовый = 1;
	КонецЕсли;
	
	Если Объект.Курс <> КурсНовый Или Объект.Кратность <> КратностьНовый Тогда

		КурсВалютыСтрокой = СтрШаблон(НСтр("ru = '%1 %2 = %3 %4'"), Объект.Кратность, Объект.ВалютаДокумента,
			Объект.Курс, СокрЛП(КэшЗначений.НациональнаяВалюта));
		КурсНовыйВалютыСтрокой = СтрШаблон(НСтр("ru = '%1 %2 = %3 %4'"), КратностьНовый, СокрЛП(
			Объект.ВалютаДокумента), КурсНовый, СокрЛП(КэшЗначений.НациональнаяВалюта));

		ТекстВопроса = СтрШаблон(НСтр("ru = 'На дату документа у валюты документа (%1) был задан курс.
									  |Установить курс документа (%2) в соответствии с курсом валюты?'"),
			КурсВалютыСтрокой, КурсНовыйВалютыСтрокой);

		НовыйКурсКратность = Новый Структура;
		НовыйКурсКратность.Вставить("КурсНовый", КурсНовый);
		НовыйКурсКратность.Вставить("КратностьНовый", КратностьНовый);

		ОписаниеОповещения = Новый ОписаниеОповещения("ОпределитьНеобходимостьУстановкиНовогоКурсаИКратности",
			ЭтотОбъект, НовыйКурсКратность);

		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОпределитьНеобходимостьУстановкиНовогоКурсаИКратности(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		
		Объект.Курс = ДополнительныеПараметры.КурсНовый;
		Объект.Кратность = ДополнительныеПараметры.КратностьНовый;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодвалФормы()
	
	ИтогВсего = Объект.СуммаДокумента + Объект.СуммаНДСДокумента;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументамОснованиямНаКлиенте(АдресДокументыОснованияВХранилище)
	
	ЗаполнитьПоДокументуОснованию(АдресДокументыОснованияВХранилище);
	ЗаглавиеДокументовОснований();
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты)
	
	ДокументыУНФ.ДатаПриИзменении(ДанныеДляИзмененияДаты, ЭтотОбъект, Объект);
	
КонецПроцедуры

// Получает структуру параметров формы выбора договора контрагента.
//
&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбора(Документ, Организация, Контрагент, Договор, ВидОперации)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ДанныеДоговораДляИзменения(Знач Дата, Знач Договор)
		
	Результат = Новый Структура;
	Результат.Вставить("ВалютаРасчетов", Договор.ВалютаРасчетов);
	Результат.Вставить("ВалютаРасчетовКурсКратность", РаботаСКурсамиВалют.ПолучитьКурсВалюты(Договор.ВалютаРасчетов,
		Дата));
	Результат.Вставить("РасчетыВУсловныхЕдиницах", Договор.РасчетыВУсловныхЕдиницах);
	Результат.Вставить("СуммаВключаетНДС", Ложь);
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСчетаФактурыПокупателей(АдресРасшифровкиПокупателей)
	
	ТаблицаРасшифровкаСчетовФактурПокупателей = ПолучитьИзВременногоХранилища(АдресРасшифровкиПокупателей);
	
	Объект.СчетаФактурыВыданныеПокупателям.Очистить();
	Объект.СчетаФактурыВыданныеПокупателям.Загрузить(ТаблицаРасшифровкаСчетовФактурПокупателей);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасшифровкуАванса(АдресРасшифровкиАвансаВХранилище)
	
	ТаблицаРасшифровкаАванса = ПолучитьИзВременногоХранилища(АдресРасшифровкиАвансаВХранилище);
	
	Объект.Авансы.Очистить();
	Объект.Авансы.Загрузить(ТаблицаРасшифровкаАванса);
	
	Объект.СуммаНДСДокумента = Объект.Авансы.Итог("СуммаНДС") - Объект.Авансы.Итог("СуммаНДСДоКорректировки");
	Объект.СуммаДокумента = Объект.Авансы.Итог("Сумма") - Объект.Авансы.Итог("СуммаДоКорректировки") - Объект.СуммаНДСДокумента;
	
	ИтогВсего = Объект.СуммаНДСДокумента + Объект.СуммаДокумента;
	
КонецПроцедуры

// Процедура устанавливает видимость договора в зависимости от установленного параметра контрагенту.
//
&НаСервере
Процедура УстановитьСвойстваРеквизитовФормы()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Договор", "Видимость", Объект.Контрагент.ВестиРасчетыПоДоговорам);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВходящийНомерДата", "Видимость", Не Объект.Исправление);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИсправлениеНомерДата", "Видимость", Объект.Исправление);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаИсправляемый", "Видимость", Объект.Исправление ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Корректировка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РасшифровкаАванса", "Видимость", Объект.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Аванс ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.КорректировкаАванса);
	
	ПоказатьРасшифровкуПокупателейКомиссионногоТовара = ТипЗнч(Объект.УдалитьДокументОснование) = Тип("ДокументСсылка.ОтчетКомитенту") И (НЕ ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) ИЛИ Объект.ДатаВходящегоДокумента >= '20150101');
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияПокупателиКомиссионногоТовара", "Видимость", ПоказатьРасшифровкуПокупателейКомиссионногоТовара);
	
	Если Объект.Исправление
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Корректировка Тогда
		
		Для Каждого СтрокаОснования Из Объект.ДокументыОснования Цикл
			
			СимволРазделения = ?(ПустаяСтрока(НадписьСчетФактура), "", ", ");
			НадписьСчетФактура = НадписьСчетФактура + СимволРазделения + СтрШаблон(НСтр("ru = '%1 от %2'"), СтрокаОснования.НомерИсходногоДокумента, Формат(СтрокаОснования.ДатаИсходногоДокумента,"ДЛФ=Д"));
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.СуммовыеРазницы Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммаДокумента", "ТолькоПросмотр", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммаНДСДокумента", "ТолькоПросмотр", Ложь);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтавкаНДССуммовойРазницы", "Видимость", Ложь);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаПолучения", "Доступность", Объект.ВыставленСтатус = 2);
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Аванс Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Договор", "Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммыДокумента()
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДССуммовойРазницы);
	
	Объект.СуммаНДСДокумента = ОКР(Объект.СуммаДокумента * СтавкаНДС / 100, 2);
	ИтогВсего = Объект.СуммаДокумента + Объект.СуммаНДСДокумента;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументуОснованию(АдресДокументыОснованияВХранилище)
	
	Если АдресДокументыОснованияВХранилище = Неопределено Тогда
		
		Если Объект.ДокументыОснования.Количество() < 1 Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ТаблицаДокументыОснования = Объект.ДокументыОснования.Выгрузить();
		
	Иначе
		
		ТаблицаДокументыОснования = ПолучитьИзВременногоХранилища(АдресДокументыОснованияВХранилище);
		
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.КорректировкаАванса
		И ТаблицаДокументыОснования.Количество() > 1 Тогда
		
		ВызватьИсключение НСтр("ru ='Корректировка аванса может содержать только один документ-основание.'");
		
	КонецЕсли;
	
	Документ = РеквизитФормыВЗначение("Объект");
	
	Если Документ.ВидОперации = Перечисления.ВидыОперацийСчетФактура.СуммовыеРазницы Тогда
		
		Документ.ДополнительныеСвойства.Вставить("ЭтоСуммоваяРазница", Истина);
		
	КонецЕсли;
	
	Документ.Заполнить(ТаблицаДокументыОснования);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент)
	
	ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПоДокументуКонтрагентуОрганизацииИВидуОперации(Объект.Ссылка,
		Контрагент, Объект.Организация, Объект.ВидОперации);
	
	Результат = Новый Структура;
	Результат.Вставить("Договор", ДоговорПоУмолчанию);
	Результат.Вставить("ВалютаРасчетов", ДоговорПоУмолчанию.ВалютаРасчетов);
	УстановитьСвойстваРеквизитовФормы();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПоместитьВХранилищеТабличнуюЧасть(ИмяТабличнойЧасти)
	
	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбновитьДокументЛокально()
	
	Если Объект.УдалитьОбновлениеЗавершено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.УдалитьДокументОснование) Тогда
		
		НоваяСтрока = Объект.ДокументыОснования.Добавить();
		НоваяСтрока.ДокументОснование						= Объект.УдалитьДокументОснование;
		НоваяСтрока.ДатаИсправленияИсходногоДокумента		= Объект.УдалитьДатаИсправленияИсходногоДокумента;
		НоваяСтрока.ДатаИсходногоДокумента					= Объект.УдалитьДатаИсходногоДокумента;
		НоваяСтрока.НомерИсправленияИсходногоДокумента		= Объект.УдалитьНомерИсправленияИсходногоДокумента;
		НоваяСтрока.НомерИсходногоДокумента					= Объект.УдалитьНомерИсходногоДокумента;
		НоваяСтрока.УчитыватьИсправлениеИсходногоДокумента	= Объект.УдалитьУчитыватьИсправлениеИсходногоДокумента;
		
	КонецЕсли;
	
	Если ТипЗнч(Объект.УдалитьДокументОснование) = Тип("ДокументСсылка.ПриходнаяНакладная")
		И (Объект.УдалитьДокументОснование.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя
			ИЛИ Объект.УдалитьДокументОснование.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика
			ИЛИ Объект.УдалитьДокументОснование.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера
			ИЛИ Объект.УдалитьДокументОснование.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратСОтветХранения)
		Тогда
		
		Объект.ЭтоВозврат = Перечисления.ДаНет.Да;
		
	Иначе
		
		Объект.ЭтоВозврат = Перечисления.ДаНет.Нет;
		
	КонецЕсли;
	
	Объект.УдалитьОбновлениеЗавершено = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИспользоватьСчетаФактурыВходящие()
	
	ИспользоватьСчетаФактурыВходящие = ПолучитьФункциональнуюОпцию("ИспользоватьСчетаФактурыВходящие");
	Если ИспользоватьСчетаФактурыВходящие Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.Константы.ФункциональнаяОпцияИспользоватьСчетаФактурыВходящие) Тогда
		Возврат;
	КонецЕсли;
	
	Константы.ФункциональнаяОпцияИспользоватьСчетаФактурыВходящие.Установить(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Форма

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭДО
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.КомандыЭДО_ПриЧтенииФормыДокумента(ЭтотОбъект);
	// Конец ЭДО
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьИспользоватьСчетаФактурыВходящие();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	ЭлектроннаяПочтаУНФ.УстановитьОтображениеКомандОтправкиСообщений(Элементы);
		
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	КэшЗначений = Новый Структура;
	КэшЗначений.Вставить("Контрагент", Объект.Контрагент);
	КэшЗначений.Вставить("Договор", Объект.Договор);
	КэшЗначений.Вставить("НациональнаяВалюта", Константы.НациональнаяВалюта.Получить());
	
	УстановитьСвойстваРеквизитовФормы();
	
	АвтоподборКонтактов.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект);
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// ЭДО
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.КомандыЭДО_ФормаДокумента(ЭтотОбъект);
	// Конец ЭДО
	
	ОбновитьДокументЛокально();
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовУНФ.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	// ЭДО
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭДО
	
	ЗаглавиеДокументовОснований();
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаВыбора" Тогда
		
		Для каждого ИдентификаторСтроки Из Элементы.Запасы.ВыделенныеСтроки Цикл
			
			СтрокаЗапасы = Объект.Запасы.НайтиПоИдентификатору(ИдентификаторСтроки);
			Если СтрокаЗапасы = Неопределено Тогда
				Продолжить;
			Иначе
				СтрокаЗапасы.НомерГТД = ВыбранноеЗначение;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" Тогда
		
		ЭтотОбъект.Прочитать();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Контрагент" И ЗначениеЗаполнено(Параметр) И Объект.Контрагент = Параметр Тогда

		УстановитьСвойстваРеквизитовФормы();

	КонецЕсли;
	
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
	// ЭДО
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец ЭДО
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовУНФКлиент.ОбработчикОповещенияФормаДокумента(ИмяСобытия, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("Проведение"
			+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ТекстСообщения = "";
		Если Не Объект.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Аванс Тогда
		Справочники.ДоговорыКонтрагентов.ПроверитьСоответствиеДоговораУсловиямДокумента(
			ТекстСообщения,
			Объект.Договор,
			Объект.Ссылка,
			Объект.Организация,
			Объект.Контрагент,
			Отказ,
			Объект.ВидОперации);   
		КонецЕсли;
		
		Если ТекстСообщения <> "" Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Если Отказ Тогда
				Сообщение.Текст = СтрШаблон(НСтр("ru = 'Документ не проведен. %1'"), ТекстСообщения);
			Иначе
				Сообщение.Текст = ТекстСообщения;
			КонецЕсли;
			
			Если Отказ Тогда
				Сообщение.ПутьКДанным = "Объект";
				Сообщение.Поле = "Договор";
			КонецЕсли;
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// ЭДО
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец ЭДО
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ПредставлениеСчетФактуры", Неопределено);
	ПараметрыОповещения.Вставить("ДокументыОснования", Объект.ДокументыОснования.Выгрузить().ВыгрузитьКолонку("ДокументОснование"));
	
	ПараметрыЗаписи.Вставить("ПараметрыОповещения", ПараметрыОповещения);
	
	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);	
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);

	ДатаВПредставление = ?(ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента), Объект.ДатаВходящегоДокумента,
		Объект.Дата);

	ПараметрыЗаписи.ПараметрыОповещения.ПредставлениеСчетФактуры = СчетаФактурыУНФКлиент.ПредставлениеСчетаФактуры(
		ДатаВПредставление, Объект.НомерВходящегоДокумента);
	
	Оповестить("ОбновлениеТекстаПроСчетФактуруПолученный", ПараметрыЗаписи.ПараметрыОповещения, Объект.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти

#Область Библиотеки

#Область БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ДекорацияСостояниеОригиналаНажатие(Элемент)
	УчетОригиналовПервичныхДокументовКлиент.ОткрытьМенюВыбораСостояния(ЭтотОбъект,Элементы.ДекорацияСостояниеОригинала);
КонецПроцедуры
//Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

#КонецОбласти

#Область ЭДО

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДОНажатие(Элемент, СтандартнаяОбработка)
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Реквизиты

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение( , Объект.ИсправляемыйСчетФактура);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДанныеДляИзмененияДаты = ДокументыУНФКлиент.ДанныеДляИзмененияДаты(ЭтотОбъект, Объект);
	Если ДанныеДляИзмененияДаты.ДатаНеМенялась Тогда
		Возврат;
	КонецЕсли;
	
	ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты);
		
	Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		ПересчитатьКурсКратностьВалютыДокумента(ДанныеДляИзмененияДаты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ДокументыУНФ.ОрганизацияПриИзменении(ЭтотОбъект, Объект);
	
	Объект.Договор = Справочники.ДоговорыКонтрагентов.ПоДокументуКонтрагентуОрганизацииИВидуОперации(Объект.Ссылка,
		Объект.Контрагент, Объект.Организация, Объект.ВидОперации);

КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
// Выполняет очистку договора и табличной части.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = КэшЗначений.Контрагент;
	КэшЗначений.Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		
		СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент);
		Объект.Договор = СтруктураДанные.Договор;
		
		ОбработатьИзменениеДоговора();
		
	Иначе
		
		Объект.Договор = КэшЗначений.Договор; // Восстанавливаем автоматически очищенный договор.
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Договор.
// Заполняет реквизиты формы курс и кратность.
//
&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Договор.
//
&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, Объект.Договор, Объект.ВидОперации);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.ДокументыОснования.Количество() < 1 Тогда
		
		ОткрытьСписокДокументовОснований(Неопределено);
		Возврат;
		
	КонецЕсли;
	
	ПоказатьЗначение(Неопределено, Объект.ДокументыОснования[0].ДокументОснование);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерВходящегоДокументаПриИзменении(Элемент)
	
	УстановитьСвойстваРеквизитовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВходящегоДокументаПриИзменении(Элемент)
	
	УстановитьСвойстваРеквизитовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура КодСпособаВыставленияПриИзменении(Элемент)
	
	Объект.ВыставленСтатус = ?(Объект.КодСпособаВыставления = 2, 1, 2);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаПолучения", "Доступность", Объект.ВыставленСтатус = 2);
	Объект.ДатаПолучения = ?(Объект.ВыставленСтатус = 2, Объект.Дата, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставленСтатусПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаПолучения", "Доступность", Объект.ВыставленСтатус = 2);
	Объект.ДатаПолучения = ?(Объект.ВыставленСтатус = 2, Объект.Дата, Неопределено);
	
КонецПроцедуры

#Область АвтоподборКонтактов

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_ОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_АвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, Параметры, Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Команды

&НаКлиенте
Процедура ОткрытьСписокДокументовОснований(Команда)
	
	ИзменитьОснованиеСчетФактуры()
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокДокументовОснованийЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатВыбора) = Тип("Структура")
		И РезультатВыбора.ВыполненаКоманда = КодВозвратаДиалога.OK Тогда
		
		ЗаполнитьПоДокументамОснованиямНаКлиенте(РезультатВыбора.АдресОснований);
		
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента)
		И Объект.ДокументыОснования.Количество() > 1 
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактураПолученный.Аванс") Тогда
		УстановитьВалюту();		
	КонецЕсли; 
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьВалюту()
	
	Документ = Объект.ДокументыОснования[0].ДокументОснование;
	Если Документ.Свойство("ВалютаДенежныхСредств") И ЗначениеЗаполнено(Документ.ВалютаДенежныхСредств) Тогда
		Объект.ВалютаДокумента = Документ.ВалютаДенежныхСредств; 			
	ИначеЕсли Документ.Свойство("ВалютаДокумента") И ЗначениеЗаполнено(Документ.ВалютаДокумента) Тогда	
		Объект.ВалютаДокумента = Документ.ВалютаДокумента;
	КонецЕсли; 
	
	ВалютаРасчетовКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента,
	ДатаДокумента);
	
	Объект.Курс		= ?(ВалютаРасчетовКурсКратность.Курс = 0, 1,
	ВалютаРасчетовКурсКратность.Курс);
	Объект.Кратность= ?(ВалютаРасчетовКурсКратность.Кратность = 0, 1,
	ВалютаРасчетовКурсКратность.Кратность); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПокупателиНажатие(Элемент)
	
	АдресРасшифровкиПокупателей = ПоместитьВХранилищеТабличнуюЧасть("СчетаФактурыВыданныеПокупателям");
	
	ПараметрыОткрываемойФормы = Новый Структура;
	ПараметрыОткрываемойФормы.Вставить("Ссылка",			Объект.Ссылка);
	ПараметрыОткрываемойФормы.Вставить("Организация",		Объект.Организация);
	ПараметрыОткрываемойФормы.Вставить("СуммаНДСДокумента",	Объект.СуммаНДСДокумента);
	ПараметрыОткрываемойФормы.Вставить("СуммаДокумента",	Объект.СуммаДокумента);
	ПараметрыОткрываемойФормы.Вставить("АдресРасшифровкиПокупателей", АдресРасшифровкиПокупателей);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ТаблицаПокупателиЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.СчетФактураПолученный.Форма.ФормаПокупателиКомиссионногоТовара", ПараметрыОткрываемойФормы, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПокупателиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.ВыполненаКоманда = КодВозвратаДиалога.OK Тогда
		
		ЗаполнитьСчетаФактурыПокупателей(Результат.АдресРасшифровкиПокупателей);
		
		Результат.Свойство("СуммаДокумента",	Объект.СуммаДокумента);
		Результат.Свойство("СуммаНДСДокумента",	Объект.СуммаНДСДокумента);
		
		ИтогВсего = Объект.СуммаДокумента + Объект.СуммаНДСДокумента;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаАвансаНажатие(Элемент)
	
	АдресРасшифровки = ПоместитьВХранилищеТабличнуюЧасть("Авансы");
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Ссылка",			Объект.Ссылка);
	ПараметрыПодбора.Вставить("Дата",			Объект.Дата);
	ПараметрыПодбора.Вставить("ВидОперации",	Объект.ВидОперации);
	ПараметрыПодбора.Вставить("Организация",	Объект.Организация);
	ПараметрыПодбора.Вставить("Контрагент",		Объект.Контрагент);
	ПараметрыПодбора.Вставить("Договор",		Объект.Договор);
	ПараметрыПодбора.Вставить("Валюта",			Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("ЭтоВозврат",		Объект.ЭтоВозврат);
	ПараметрыПодбора.Вставить("СуммаНДС",		Объект.СуммаНДСДокумента);
	ПараметрыПодбора.Вставить("Сумма",			Объект.СуммаДокумента);
	ПараметрыПодбора.Вставить("АдресРасшифровки",АдресРасшифровки);
	ПараметрыПодбора.Вставить("ДопустимаКорректировка", Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РасшифровкаАвансаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.СчетФактураПолученный.Форма.ФормаРасшифровкаАванса", ПараметрыПодбора, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаАвансаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатВыбора) = Тип("Структура") Тогда
		
		Если РезультатВыбора.ВыполненаКоманда = КодВозвратаДиалога.OK Тогда
			
			Модифицированность = Истина;
			ЗаполнитьРасшифровкуАванса(РезультатВыбора.АдресРасшифровки);
			
			ИмяПредопределенного = "Перечисление.ВидыОперацийСчетФактураПолученный." + ?(РезультатВыбора.ЭтоКорректировкаАвансаНДС20 = Истина, "КорректировкаАванса", "Аванс");
			НовыйВидОперации = ПредопределенноеЗначение(ИмяПредопределенного);
			Если Объект.ВидОперации <> НовыйВидОперации Тогда
				
				Объект.ВидОперации = НовыйВидОперации;
				ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДССуммовойРазницыПриИзменении(Элемент)
	
	РассчитатьСуммыДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	РассчитатьСуммыДокумента();
	
КонецПроцедуры

#Область УчетОригиналовПервичныхДокументов

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ИзменитьСостояниеОригинала(Команда)
	УчетОригиналовПервичныхДокументовУНФКлиент.ИзменитьСостояниеОригинала(Команда, ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#КонецОбласти
