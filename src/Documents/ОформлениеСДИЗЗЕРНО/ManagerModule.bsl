#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиОформлениеСДИЗЗЕРНО - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.Черновик;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиОформлениеСДИЗЗЕРНО- Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОформленияСДИЗОшибкаПередачи);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает конечные статусы документа.
// 
// Параметры:
//  ТребуетсяПовторноеОформление - Булево - Требуется повторное оформление
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиОформлениеСДИЗЗЕРНО -- Конечные статусы.
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Если Не ТребуетсяПовторноеОформление Тогда
		Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СДИЗОформлен);
	КонецЕсли;
	Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗАннулировано);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Параметры:
//  СтруктураПараметров - Неопределено - Структура параметров
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО -- Дальнейшее действие по-умолчанию.
Функция ДальнейшееДействиеПоУмолчанию(СтруктураПараметров = Неопределено) Экспорт
	
	ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные;
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура")
		И СтруктураПараметров.Свойство("ОбъектРасчета") Тогда
		Объект = СтруктураПараметров.ОбъектРасчета;
	Иначе
		Объект = СтруктураПараметров;
	КонецЕсли;
	
	Если Объект <> Неопределено
		И ТребуетсяСформироватьПартии(Объект) Тогда
		ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.СформируйтеПартии;
	КонецЕсли;
	
	Возврат ДальнейшееДействие;
	
КонецФункции

Функция СтатусИДальнейшиеДействияОформлениеСДИЗ(ДанныеДокумента) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Статус", Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ПустаяСсылка());
	Результат.Вставить("ДальнейшиеДействия", Новый Массив);
	
	Если ДанныеДокумента.ТребуетсяВыделитьПартии Тогда
		
		Результат.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.Черновик;
		Результат.ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.СформируйтеПартии);
		
	Иначе
		
		Результат.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.Черновик;
		Результат.ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает статусы документа в которых требуется пересчет движений.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиФормированиеПартийЗЕРНО - статусы пересчета движений.
//
Функция СтатусыПересчетаДвижений()
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СДИЗОформлен);
	Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗАннулировано);
	
	Возврат Статусы;
	
КонецФункции

#КонецОбласти

#Область ПанельОбменЗЕРНО

// Возвращает массив дальнейших действий с документом, требующих участия пользователя
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - дальшейшие действия.
//
Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ВыполнитеОбмен);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.СформируйтеПартии);
	
	Возврат МассивДействий;
	
КонецФункции

Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
	
	Возврат МассивДействий;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеЗЕРНО

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОформлениеСДИЗЗЕРНО - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция ЗЕРНО
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Неопределено - не требуется
//  См. РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ВозвращаемоеЗначениеДальнейшиеДействияСтатус - 
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗИмпорт
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРасчетСтатуса Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗКПередаче);
			
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИзДругихПартий Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ФормированиеПартииКПередаче);
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗ
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОформленияСДИЗКПередаче);
			
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии Тогда
		
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаПринята;
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОформленияСДИЗОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОформленияСДИЗОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросПогашенийСДИЗ Тогда
		
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаПринята;
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОформлениеСДИЗЗЕРНО - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция ЗЕРНО
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЗЕРНО - Статус обработки сообщения
//
// Возвращаемое значение:
//  Неопределено - не требуется
//  См. РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ВозвращаемоеЗначениеДальнейшиеДействияСтатус - 
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаПринята;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗИмпорт
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросПогашенийСДИЗ  Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИзДругихПартий Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ФормированиеПартииОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ФормированиеПартииОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.СформируйтеПартии);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗ
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОформленияСДИЗОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОформленияСДИЗОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.СформируйтеПартии);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
		
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных из ЗЕРНО.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОформлениеСДИЗЗЕРНО - Документ, для которого требуется обновить статус
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция обмена с ЗЕРНО
//  ДополнительныеПараметры - Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЗЕРНО - Статус обработки сообщения
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция, на которую получена квитанция
//
// Возвращаемое значение:
//  Неопределено - не требуется
//  См. РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ВозвращаемоеЗначениеДальнейшиеДействияСтатус - 
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗИмпорт
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросПогашенийСДИЗ Тогда
		
		Статусы = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СДИЗОформлен;
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗОбрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗОшибкаПередачи;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИзДругихПартий Тогда
		
		Статусы = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ПартииСформированы;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ФормированиеПартииОбрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ФормированиеПартииОшибкаПередачи;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗ
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии Тогда
		
		Статусы = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗАннулировано;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОформленияСДИЗОбрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОформленияСДИЗОшибкаПередачи;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗРасчетСтатуса Тогда
		
		Статусы = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		РезультирующийСтатусДокумента = РезультирующийСтатусДокумента(ДокументСсылка);
		Статусы.Принят = РезультирующийСтатусДокумента.Статус;
		
		Если ЗначениеЗаполнено(РезультирующийСтатусДокумента.ДальнейшееДействие) Тогда
			Статусы.ПринятДействия.Добавить(РезультирующийСтатусДокумента.ДальнейшееДействие);
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаВыполнена,
			Статусы);
			
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОформлениеСДИЗЗЕРНО - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиОформлениеСДИЗЗЕРНО - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(
		ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ПараметрыОбновления.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
	КонецЕсли;
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОформлениеСДИЗЗЕРНО - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЗЕРНО - Статус обработки сообщения
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиОформлениеСДИЗЗЕРНО - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ДополнительныеПараметры <> Неопределено Тогда
		ПараметрыОбновления.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
	КонецЕсли;
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных из ЗЕРНО.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОформлениеСДИЗЗЕРНО - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция обмена с ЗЕРНО.
//  ДополнительныеПараметры - Неопределено, Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЗЕРНО - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиОформлениеСДИЗЗЕРНО - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ПараметрыОбновления.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
	КонецЕсли;
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Изменяет и возвращает статус документа ЗЕРНО.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ ЗЕРНО.
//  ПараметрыОбновления - Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиОформлениеСДИЗЗЕРНО - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 3.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиОформлениеСДИЗЗЕРНО - новый статус документа ЗЕРНО.
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОформлениеСДИЗЗЕРНО - Документ, для которого требуется обновить статус.
//  ЛинейныйСписок - Булево - не используется для документа
//
// Возвращаемое значение:
//  см. ИнтеграцияИС.ПустаяТаблицаПоследовательностьОпераций.
//
Функция ПоследовательностьОпераций(ДокументСсылка, ЛинейныйСписок = Ложь) Экспорт
	
	Таблица = ИнтеграцияИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	
	ОперацияВПоследовательности = ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 1,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииРасчетСтатуса);
	ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 11,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИзДругихПартий);
	
	ОперацияВПоследовательности = ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 1,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРасчетСтатуса);
	ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 11,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ);
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 12,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗИмпорт);
		
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 13,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт);
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 14,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор);
		
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 142,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.ЗапросПогашенийСДИЗ);
	
	ОперацияВПоследовательности = ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 2,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗРасчетСтатуса);
	ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 21,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗ);
		
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 22,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии);
		
	Возврат Таблица;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОформлениеСДИЗЗЕРНО - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиОформлениеСДИЗЗЕРНО - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиОформлениеСДИЗЗЕРНО - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияЗЕРНО.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияЗЕРНОПереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	//Получение конечного статуса требующего повторного оформления
	Если КонечныеСтатусы().Найти(НовыйСтатус)<>Неопределено
		И КонечныеСтатусы().Найти(ПредыдущийСтатус)=Неопределено Тогда
		РасчетСтатусовОформленияЗЕРНО.РассчитатьСтатусыОформленияДокументов(ДокументСсылка);
	КонецЕсли;
	
	Если СтатусыПересчетаДвижений().Найти(НовыйСтатус) <> Неопределено И НовыйСтатус <> ПредыдущийСтатус Тогда
		
		РегистрыНакопления.ОстаткиПартийЗЕРНО.ОбновитьДвиженияПриИзмененииСтатусаДокумента(ДокументСсылка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сообщения

// Сообщение к передаче XML
//
// Параметры:
//  СсылкаНаОбъект          - ДокументСсылка.ОформлениеСДИЗЗЕРНО - Ссылка на объект.
//  ДальнейшееДействие      - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - дальнейшее действие.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
// Возвращаемое значение:
//  Массив из см. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML - Сообщения к передаче.
//
Функция СообщениеКПередачеXML(СсылкаНаОбъект, ДальнейшееДействие, ДополнительныеПараметры) Экспорт
		
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные Тогда
		
		Возврат ОформлениеСДИЗЗЕРНО(СсылкаНаОбъект, ДополнительныеПараметры);
	
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.СформируйтеПартии Тогда
		
		Возврат СформироватьПартииЗЕРНО(СсылкаНаОбъект, ДополнительныеПараметры);
	
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.АннулируйтеОперацию Тогда
		
		Возврат АннулированиеСДИЗЗЕРНО(СсылкаНаОбъект, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Серии

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(Метаданные.Документы.ОформлениеСДИЗЗЕРНО);
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Произвольный - (См. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий) - особенности указания серий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ИнтеграцияИС.ПараметрыУказанияСерий(Метаданные.Документы.ОформлениеСДИЗЗЕРНО, Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
// Параметры:
//   ПараметрыУказанияСерий - См. ПараметрыУказанияСерий
// Возвращаемое значение:
//   Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(Метаданные.Документы.ОформлениеСДИЗЗЕРНО, ПараметрыУказанияСерий);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область Отчеты

// Заполняет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//   Параметры - Структура - Вспомогательные параметры. См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
	КомандаОтчет = Отчеты.АнализРасхожденийПриДвиженииЗЕРНО.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// СДИЗ расширенная этикетка
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор                  = "СДИЗРасширеннаяЭтикетка";
	КомандаПечати.МенеджерПечати                 = "Обработка.ПечатьЭтикетокЗЕРНО";
	КомандаПечати.Представление                  = НСтр("ru = 'СДИЗ с расширенной информацией'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ФорматСохранения               = ТипФайлаТабличногоДокумента.PDF;
	КомандаПечати.Картинка                       = БиблиотекаКартинок.Печать;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Возврат;
	
КонецПроцедуры

Функция ПолучитьДанныеДляПечатнойФормыРасширеннойЭтикеткиСДИЗ(ПараметрыПечати, МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОформлениеСДИЗЗЕРНО.Ссылка                                        КАК Ссылка,
	|	ЗафиксированныйСДИЗЗерно.ДатаОформления                           КАК ДатаДокумента,
	|	ЗафиксированныйСДИЗЗерно.Идентификатор                            КАК НомерДокумента,
	|	ЗафиксированныйСДИЗЗерно.ИдентификаторФГИС                        КАК ИдентификаторСДИЗ,
	|	ОформлениеСДИЗЗЕРНО.Организация                                   КАК Отправитель,
	|	ОформлениеСДИЗЗЕРНО.ВидПродукции                                  КАК ВидПродукции,
	|	ОформлениеСДИЗЗЕРНО.Покупатель                                    КАК Получатель,
	|	ВЫБОР
	|		КОГДА ОформлениеСДИЗЗЕРНО.Грузоотправитель = НЕОПРЕДЕЛЕНО
	|			ТОГДА ОформлениеСДИЗЗЕРНО.Организация
	|		ИНАЧЕ ОформлениеСДИЗЗЕРНО.Грузоотправитель
	|	КОНЕЦ                                                             КАК Грузоотправитель,
	|	ОформлениеСДИЗЗЕРНО.ПунктОтправления                              КАК ГрузоотправительАдрес,
	|	ВЫБОР
	|		КОГДА ОформлениеСДИЗЗЕРНО.Грузополучатель = НЕОПРЕДЕЛЕНО
	|			ТОГДА ОформлениеСДИЗЗЕРНО.Покупатель
	|		ИНАЧЕ ОформлениеСДИЗЗЕРНО.Грузополучатель
	|	КОНЕЦ                                                             КАК Грузополучатель,
	|	ОформлениеСДИЗЗЕРНО.ПунктНазначенияСтрокой                        КАК ГрузополучательАдрес,
	|	ВЫБОР
	|		КОГДА ОформлениеСДИЗЗЕРНОТовары.ВыделеннаяПартия = ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
	|			ТОГДА ОформлениеСДИЗЗЕРНОТовары.Партия
	|		ИНАЧЕ ОформлениеСДИЗЗЕРНОТовары.ВыделеннаяПартия
	|	КОНЕЦ                                                             КАК Партия,
	|	ВЫБОР
	|		КОГДА ОформлениеСДИЗЗЕРНОТовары.ВыделеннаяПартия = ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
	|			ТОГДА ОформлениеСДИЗЗЕРНОТовары.Партия.Идентификатор
	|		ИНАЧЕ ОформлениеСДИЗЗЕРНОТовары.ВыделеннаяПартия.Идентификатор
	|	КОНЕЦ                                                             КАК НомерПартии,
	|	ОформлениеСДИЗЗЕРНОТовары.Номенклатура                            КАК Номенклатура,
	|	ОформлениеСДИЗЗЕРНОТовары.Характеристика                          КАК Характеристика,
	|	ОформлениеСДИЗЗЕРНОТовары.Серия                                   КАК Серия,
	|	ОформлениеСДИЗЗЕРНОТовары.КоличествоЗЕРНО                         КАК Количество
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО                                      КАК ОформлениеСДИЗЗЕРНО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОформлениеСДИЗЗЕРНО.Товары КАК ОформлениеСДИЗЗЕРНОТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СДИЗЗЕРНО КАК ЗафиксированныйСДИЗЗерно
	|			ПО ОформлениеСДИЗЗЕРНОТовары.СДИЗ = ЗафиксированныйСДИЗЗерно.Ссылка
	|		ПО ОформлениеСДИЗЗЕРНО.Ссылка = ОформлениеСДИЗЗЕРНОТовары.Ссылка
	|ГДЕ
	|	ОформлениеСДИЗЗЕРНО.Ссылка В (&Ссылка)
	|	И ОформлениеСДИЗЗЕРНО.Реализация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформлениеСДИЗЗЕРНО.Ссылка                                         КАК Ссылка,
	|	ЗафиксированныйСДИЗЗерно.ДатаОформления                            КАК ДатаДокумента,
	|	ЗафиксированныйСДИЗЗерно.Идентификатор                             КАК НомерДокумента,
	|	ЗафиксированныйСДИЗЗерно.ИдентификаторФГИС                         КАК ИдентификаторСДИЗ,
	|	ОформлениеСДИЗЗЕРНО.Организация                                    КАК Отправитель,
	|	ОформлениеСДИЗЗЕРНО.ВидПродукции                                   КАК ВидПродукции,
	|	ОформлениеСДИЗЗЕРНО.Организация                                    КАК Получатель,
	|	ВЫБОР
	|		КОГДА ОформлениеСДИЗЗЕРНО.Грузоотправитель = НЕОПРЕДЕЛЕНО
	|			ТОГДА ОформлениеСДИЗЗЕРНО.Организация
	|		ИНАЧЕ ОформлениеСДИЗЗЕРНО.Грузоотправитель
	|	КОНЕЦ                                                              КАК Грузоотправитель,
	|	ОформлениеСДИЗЗЕРНО.ПунктОтправления                               КАК ГрузоотправительАдрес,
	|	ВЫБОР
	|		КОГДА ОформлениеСДИЗЗЕРНО.Грузополучатель = НЕОПРЕДЕЛЕНО
	|			ТОГДА ОформлениеСДИЗЗЕРНО.Организация
	|		ИНАЧЕ ОформлениеСДИЗЗЕРНО.Грузополучатель
	|	КОНЕЦ                                                              КАК Грузополучатель,
	|	ОформлениеСДИЗЗЕРНО.ПунктНазначенияСтрокой                         КАК ГрузополучательАдрес,
	|	ВЫБОР
	|		КОГДА ОформлениеСДИЗЗЕРНОТовары.ВыделеннаяПартия = ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
	|			ТОГДА ОформлениеСДИЗЗЕРНОТовары.Партия
	|		ИНАЧЕ ОформлениеСДИЗЗЕРНОТовары.ВыделеннаяПартия
	|	КОНЕЦ                                                              КАК Партия,
	|	ВЫБОР
	|		КОГДА ОформлениеСДИЗЗЕРНОТовары.ВыделеннаяПартия = ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
	|			ТОГДА ОформлениеСДИЗЗЕРНОТовары.Партия.Идентификатор
	|		ИНАЧЕ ОформлениеСДИЗЗЕРНОТовары.ВыделеннаяПартия.Идентификатор
	|	КОНЕЦ                                                              КАК НомерПартии,
	|	ОформлениеСДИЗЗЕРНОТовары.Номенклатура                             КАК Номенклатура,
	|	ОформлениеСДИЗЗЕРНОТовары.Характеристика                           КАК Характеристика,
	|	ОформлениеСДИЗЗЕРНОТовары.Серия                                    КАК Серия,
	|	ОформлениеСДИЗЗЕРНОТовары.КоличествоЗЕРНО                          КАК Количество
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО КАК ОформлениеСДИЗЗЕРНО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОформлениеСДИЗЗЕРНО.Товары КАК ОформлениеСДИЗЗЕРНОТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СДИЗЗЕРНО КАК ЗафиксированныйСДИЗЗерно
	|			ПО ОформлениеСДИЗЗЕРНОТовары.СДИЗ = ЗафиксированныйСДИЗЗерно.Ссылка
	|		ПО ОформлениеСДИЗЗЕРНО.Ссылка = ОформлениеСДИЗЗЕРНОТовары.Ссылка
	|ГДЕ
	|	ОформлениеСДИЗЗЕРНО.Ссылка В (&Ссылка)
	|	И (ОформлениеСДИЗЗЕРНО.Перевозка
	|	И НЕ ОформлениеСДИЗЗЕРНО.Реализация)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента
	|ИТОГИ ПО
	|	Ссылка";
	Возврат Запрос.Выполнить();
	
КонецФункции

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	УправлениеДоступомИСПереопределяемый.ПриЗаполненииОграниченияДоступа(
		Метаданные.Документы.ОформлениеСДИЗЗЕРНО, Ограничение);

КонецПроцедуры

#КонецОбласти

#Область ОбработкаЗаполнения

Функция ЗаполнитьПартии(Объект, СписокСтрок = Неопределено, ЗаполнитьОстаткиПартии = Ложь) Экспорт
	
	РезультатЗаполнения = Новый Структура;
	РезультатЗаполнения.Вставить("ВсегоСтрок",       0);
	РезультатЗаполнения.Вставить("ЗаполненоСтрок",   0);
	РезультатЗаполнения.Вставить("ПроблемныхСтрок",  0);
	РезультатЗаполнения.Вставить("ИзмененныеСтроки", Новый Массив);
	
	РезультатЗаполнения.Вставить("НоменклатураНеЗаполнена", 0);
	РезультатЗаполнения.Вставить("КоличествоНеЗаполнено"  , 0);
	
	ВсеСтроки      = Новый Массив;
	СтрокиССериями = Новый Массив;
	СтрокиБезСерий = Новый Массив;
	
	Для каждого СтрокаДокумента Из Объект.Товары Цикл
		
		Если ЗначениеЗаполнено(СтрокаДокумента.Партия) Тогда
			Продолжить;
		ИначеЕсли СписокСтрок <> Неопределено И СписокСтрок.Найти(СтрокаДокумента) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВсеСтроки.Добавить(СтрокаДокумента);
		
		Если Не ЗначениеЗаполнено(СтрокаДокумента.Номенклатура) Тогда
			
			РезультатЗаполнения.ПроблемныхСтрок = РезультатЗаполнения.ПроблемныхСтрок + 1;
			РезультатЗаполнения.НоменклатураНеЗаполнена = РезультатЗаполнения.НоменклатураНеЗаполнена + 1;
			
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаДокумента.Количество) Тогда
			
			РезультатЗаполнения.ПроблемныхСтрок = РезультатЗаполнения.ПроблемныхСтрок + 1;
			РезультатЗаполнения.КоличествоНеЗаполнено = РезультатЗаполнения.КоличествоНеЗаполнено + 1;
			
		Иначе

			Если ЗначениеЗаполнено(СтрокаДокумента.Серия) Тогда
				СтрокиССериями.Добавить(СтрокаДокумента);
			Иначе
				СтрокиБезСерий.Добавить(СтрокаДокумента);
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
	РезультатЗаполнения.ВсегоСтрок = СтрокиССериями.Количество() + СтрокиБезСерий.Количество() + РезультатЗаполнения.ПроблемныхСтрок;
	
	ПодготовитьСообщениеОЗавершенииЗаполненияПартий(РезультатЗаполнения);
	
	ТаблицаИсточникиРеквизитов = ИнтеграцияЗЕРНО.НоваяТаблицаОрганизацияКонтрагентПодразделение();
	ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(
		ТаблицаИсточникиРеквизитов, Объект.Организация, Объект.Подразделение);
	ВладелецПартии = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.КлючиПоОрганизациямКонтрагентам(ТаблицаИсточникиРеквизитов);
	
	Элеватор = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.ПустаяСсылка();
	Если Объект.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор Тогда
		Элеватор = ВладелецПартии;
		ТаблицаИсточникиРеквизитов = ИнтеграцияЗЕРНО.НоваяТаблицаОрганизацияКонтрагентПодразделение();
		ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(
			ТаблицаИсточникиРеквизитов, Объект.ВладелецПартии, Объект.ПодразделениеВладельцаПартии);
		ВладелецПартии = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.КлючиПоОрганизациямКонтрагентам(ТаблицаИсточникиРеквизитов);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПунктОтправления) Тогда
		Местоположение = Справочники.КлючиАдресовЗЕРНО.СопоставленныеКлючиАдресов(Объект.ПунктОтправления);
	Иначе
		Местоположение = Неопределено;
	КонецЕсли;
	Если РезультатЗаполнения.ВсегоСтрок = 0 Тогда
		Возврат РезультатЗаполнения.СообщениеПользователю;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура   КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Серия          КАК Серия,
	|	ТаблицаТовары.КодТНВЭД       КАК КодТНВЭД,
	|	ТаблицаТовары.ОКПД2          КАК ОКПД2,
	|	ТаблицаТовары.Партия         КАК Партия,
	|	ТаблицаТовары.КоличествоЗЕРНО КАК КоличествоЗЕРНО
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&Товары КАК ТаблицаТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	КодТНВЭД,
	|	ОКПД2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Партия КАК Партия,
	|	СУММА(ТаблицаТовары.КоличествоЗЕРНО) КАК КоличествоЗЕРНО
	|ПОМЕСТИТЬ ПартииВДокументе
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Партия <> ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Партия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСоответствия.Номенклатура   КАК Номенклатура,
	|	ТаблицаСоответствия.Характеристика КАК Характеристика,
	|	ТаблицаСоответствия.Серия          КАК Серия,
	|	ТаблицаСоответствия.Партия         КАК Партия,
	|	0                                  КАК Порядок
	|ПОМЕСТИТЬ ТаблицаСоответствия
	|ИЗ
	|	РегистрСведений.СоответствиеПартийЗЕРНО КАК ТаблицаСоответствия
	|ГДЕ
	|	(ТаблицаСоответствия.Номенклатура, ТаблицаСоответствия.Характеристика, ТаблицаСоответствия.Серия) В
	|			(ВЫБРАТЬ
	|				ТаблицаТоварыСПродукцией.Номенклатура,
	|				ТаблицаТоварыСПродукцией.Характеристика,
	|				ТаблицаТоварыСПродукцией.Серия
	|			ИЗ
	|				ТаблицаТовары КАК ТаблицаТоварыСПродукцией
	|			ГДЕ
	|				НЕ ТаблицаТоварыСПродукцией.Серия В (&НезаполненныеЗначенияСерии))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСоответствия.Номенклатура,
	|	ТаблицаСоответствия.Характеристика,
	|	&ПустаяСерия,
	|	ТаблицаСоответствия.Партия,
	|	1
	|ИЗ
	|	РегистрСведений.СоответствиеПартийЗЕРНО КАК ТаблицаСоответствия
	|ГДЕ
	|	(ТаблицаСоответствия.Номенклатура, ТаблицаСоответствия.Характеристика) В
	|			(ВЫБРАТЬ
	|				ТаблицаТоварыСПродукцией.Номенклатура,
	|				ТаблицаТоварыСПродукцией.Характеристика
	|			ИЗ
	|				ТаблицаТовары КАК ТаблицаТоварыСПродукцией
	|			ГДЕ
	|				ТаблицаТоварыСПродукцией.Серия В (&НезаполненныеЗначенияСерии))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия,
	|	ТаблицаСоответствияПоКодам.Партия,
	|	2
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеПартийЗЕРНО КАК ТаблицаСоответствияНетПартий
	|		ПО ТаблицаСоответствияНетПартий.Номенклатура = ТаблицаТовары.Номенклатура
	|		И ТаблицаСоответствияНетПартий.Характеристика = ТаблицаТовары.Характеристика
	|		И (ТаблицаСоответствияНетПартий.Серия = ТаблицаТовары.Серия
	|			ИЛИ ТаблицаТовары.Серия В (&НезаполненныеЗначенияСерии))
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КлючиПартийЗЕРНО КАК ТаблицаСоответствияПоКодам
	|		ПО ТаблицаСоответствияПоКодам.ВидПродукции = &ВидПродукции
	|		И ТаблицаСоответствияПоКодам.ВладелецПартии В (&ВладелецПартии)
	|		И (&ЛюбоеМестоположение ИЛИ ТаблицаСоответствияПоКодам.Местоположение В (&Местоположение))
	|		И ТаблицаСоответствияПоКодам.Элеватор В (&Элеватор)
	|		И ТаблицаСоответствияПоКодам.ОКПД2 = ТаблицаТовары.ОКПД2
	|		И ТаблицаСоответствияПоКодам.КодТНВЭД = ТаблицаТовары.КодТНВЭД
	|		И ТаблицаСоответствияПоКодам.Партия В (ВЫБРАТЬ Партия Из РегистрНакопления.ОстаткиПартийЗЕРНО.Остатки)
	|ГДЕ
	|	ТаблицаСоответствияНетПартий.Серия ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлючиПартийЗЕРНО.ОКПД2     КАК ОКПД2,
	|	КлючиПартийЗЕРНО.КодТНВЭД  КАК КодТНВЭД,
	|	ТаблицаОстатков.Партия     КАК Партия,
	|	ТаблицаОстатков.КоличествоЗЕРНООстаток - ТаблицаОстатков.ВОбработкеЗЕРНООстаток КАК КоличествоЗЕРНО
	|ПОМЕСТИТЬ ТаблицаОстатков
	|ИЗ
	|	РегистрНакопления.ОстаткиПартийЗЕРНО.Остатки(,
	|		Партия В (ВЫБРАТЬ СписокПродукции.Партия ИЗ ТаблицаСоответствия КАК СписокПродукции)
	|		И Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартийЗЕРНО.Подписано)
	|		И &ЭтоЭкспорт = (Партия.НазначениеПартии = ЗНАЧЕНИЕ(Справочник.КлассификаторНСИЗЕРНО.НазначениеПартииВывозСТерриторииРФ))) КАК ТаблицаОстатков
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КлючиПартийЗЕРНО КАК КлючиПартийЗЕРНО
	|		ПО КлючиПартийЗЕРНО.ВидПродукции = &ВидПродукции
	|		И КлючиПартийЗЕРНО.ВладелецПартии В (&ВладелецПартии)
	|		И (&ЛюбоеМестоположение ИЛИ КлючиПартийЗЕРНО.Местоположение В (&Местоположение))
	|		И КлючиПартийЗЕРНО.Элеватор В (&Элеватор)
	|		И КлючиПартийЗЕРНО.Партия = ТаблицаОстатков.Партия
	|ГДЕ
	|	ТаблицаОстатков.КоличествоЗЕРНООстаток > ТаблицаОстатков.ВОбработкеЗЕРНООстаток
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатков.ОКПД2           КАК ОКПД2,
	|	ТаблицаОстатков.КодТНВЭД        КАК КодТНВЭД,
	|	ТаблицаОстатков.Партия          КАК Партия,
	|	ТаблицаОстатков.КоличествоЗЕРНО КАК КоличествоЗЕРНО,
	|	ТаблицаОстатков.КоличествоЗЕРНО КАК КоличествоОстатокПартииЗЕРНО
	|ИЗ
	|	ТаблицаОстатков КАК ТаблицаОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСоответствия.Номенклатура            КАК Номенклатура,
	|	ТаблицаСоответствия.Характеристика          КАК Характеристика,
	|	ТаблицаСоответствия.Серия                   КАК Серия,
	|	ТаблицаСоответствия.Партия                  КАК Партия";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВидПродукции",        Объект.ВидПродукции);
	Запрос.УстановитьПараметр("ВладелецПартии",      ВладелецПартии);
	Запрос.УстановитьПараметр("Местоположение",      Местоположение);
	Запрос.УстановитьПараметр("ЛюбоеМестоположение", Местоположение = Неопределено);
	Запрос.УстановитьПараметр("Элеватор",            Элеватор);
	Запрос.УстановитьПараметр("ЭтоЭкспорт",          Объект.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт);
	
	Запрос.УстановитьПараметр("НезаполненныеЗначенияСерии", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("СерияНоменклатуры"));
	Запрос.УстановитьПараметр("ПустаяСерия",                ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"));
	
	СписокКолонок = "Номенклатура, Характеристика, Серия, Партия, КодТНВЭД, ОКПД2, КоличествоЗЕРНО";
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить(, СписокКолонок));
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаОстатки = Результат[Результат.ВГраница()-1].Выгрузить();
	
	Если ТаблицаОстатки.Количество() = 0 Тогда
		Возврат РезультатЗаполнения.СообщениеПользователю;
	КонецЕсли; 
	
	ТаблицаСоответствия = Результат[Результат.ВГраница()].Выгрузить();
	ТаблицаСоответствия.Индексы.Добавить("Номенклатура, Характеристика, Серия");
	ТаблицаСоответствия.Индексы.Добавить("Номенклатура, Характеристика");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Товары", Объект.Товары);
	ПараметрыЗаполнения.Вставить("ТаблицаОстатки", ТаблицаОстатки);
	ПараметрыЗаполнения.Вставить("ТаблицаСоответствия", ТаблицаСоответствия);
	ПараметрыЗаполнения.Вставить("ЗаполнитьОстаткиПартии", ЗаполнитьОстаткиПартии);
	
	ЗаполнитьВСтрокахПартии(СтрокиССериями, ПараметрыЗаполнения, РезультатЗаполнения);
	ЗаполнитьВСтрокахПартии(СтрокиБезСерий, ПараметрыЗаполнения, РезультатЗаполнения);
	
	ПодготовитьСообщениеОЗавершенииЗаполненияПартий(РезультатЗаполнения);
	
	Возврат РезультатЗаполнения.СообщениеПользователю;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных;

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаОстаткиПартийЗЕРНО(Запрос, ТекстыЗапроса, Регистры);
	ИнтеграцияИСПереопределяемый.ТекстыЗапросовТаблицыДвижения(Запрос, ТекстыЗапроса, Регистры, ДокументСсылка, ДополнительныеСвойства);
	
	ИнтеграцияИС.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеШапки.Дата         КАК Период,
	|	ДанныеШапки.Ссылка       КАК Ссылка,
	|	СтатусыДокументов.Статус КАК СтатусОбработки
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО КАК ДанныеШапки
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусыДокументов
	|		ПО СтатусыДокументов.ОбъектСинхронизации = &Ссылка
	|		И СтатусыДокументов.ИдентификаторСтроки = """"
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",          Реквизиты.Период);
	Запрос.УстановитьПараметр("Ссылка",          Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("СтатусОбработки", Реквизиты.СтатусОбработки);
	Запрос.УстановитьПараметр("ТребуетРезервированияБезВыделенияПартии", Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ТребуетРезервированияПартии(Ложь));
	Запрос.УстановитьПараметр("ТребуетРезервированияСВыделениемПартии", Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ТребуетРезервированияПартии(Истина));
	Запрос.УстановитьПараметр("ТребуетСписанияПартии", Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ТребуетСписанияПартии());
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаОстаткиПартийЗЕРНО(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОстаткиПартийЗЕРНО";
	
	Если НЕ ИнтеграцияИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &СтатусОбработки В (&ТребуетСписанияПартии)
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	КОНЕЦ КАК ВидДвижения,
	|	&Период                                 КАК Период,
	|	ТаблицаТовары.Партия                    КАК Партия,
	|	ВЫБОР
	|		КОГДА &СтатусОбработки В (&ТребуетСписанияПартии)
	|			ТОГДА ТаблицаТовары.КоличествоЗЕРНО
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоЗЕРНО,
	|	ВЫБОР
	|		КОГДА &СтатусОбработки В (&ТребуетРезервированияБезВыделенияПартии)
	|			ТОГДА ТаблицаТовары.КоличествоЗЕРНО
	|		КОГДА ТаблицаТовары.ВыделеннаяПартия <> ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
	|				И &СтатусОбработки В (&ТребуетРезервированияСВыделениемПартии)
	|			ТОГДА ТаблицаТовары.КоличествоЗЕРНО
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВОбработкеЗЕРНО
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И (&СтатусОбработки В (&ТребуетСписанияПартии)
	|		ИЛИ &СтатусОбработки В (&ТребуетРезервированияБезВыделенияПартии)
	|		ИЛИ (ТаблицаТовары.ВыделеннаяПартия <> ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
	|			И &СтатусОбработки В (&ТребуетРезервированияСВыделениемПартии)))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|	&Период                                 КАК Период,
	|	ТаблицаТовары.НоваяПартия               КАК Партия,
	|	ТаблицаТовары.КоличествоЗЕРНО КАК КоличествоЗЕРНО,
	|	0 КАК ВОбработкеЗЕРНО
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И (&СтатусОбработки В (&ТребуетСписанияПартии)
	|		И ТаблицаТовары.НоваяПартия <> ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеЗЕРНО

Процедура ОбработкаЗагрузкиПолученныхДанных(ЭлементОчереди, ПараметрыОбмена, ПолученныеДанные, ИзмененныеОбъекты) Экспорт
	
	ВидПродукции                 = ЭлементОчереди.ВидПродукции;
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	ПараметрыЗапроса             = РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРасчетСтатуса
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииРасчетСтатуса
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗРасчетСтатуса Тогда
		
		Если ЭлементОчереди.Операция <> Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗРасчетСтатуса Тогда
			
			ПараметрыОбработки  = Новый Массив;
			
			Если ПараметрыЗапроса.Свойство("ОбработанныеСтроки") Тогда
				
				Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРасчетСтатуса Тогда
					ИмяКолонки = "СДИЗ";
				ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииРасчетСтатуса Тогда
					ИмяКолонки = "ВыделеннаяПартия";
				КонецЕсли;
				
				ПараметрыОбработки.Добавить(Новый Структура("ИсточникДанных, ИмяКолонки", "ОбработанныеСтроки", ИмяКолонки));
				
			КонецЕсли;
			
			Если ПараметрыЗапроса.Свойство("СформированныеПартии") Тогда
				
				ПараметрыОбработки.Добавить(Новый Структура("ИсточникДанных, ИмяКолонки", "СформированныеПартии", "НоваяПартия"));
				
			КонецЕсли;
			
			Если ПараметрыОбработки.Количество() Тогда
				
				Блокировка = Новый БлокировкаДанных();
				ЭлементБлокировки = Блокировка.Добавить(Метаданные.Документы.ОформлениеСДИЗЗЕРНО.ПолноеИмя());
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементОчереди.СсылкаНаОбъект);
				
				Попытка
					
					Блокировка.Заблокировать();
					ДокументОбъект = ЭлементОчереди.СсылкаНаОбъект.ПолучитьОбъект();
					
					Для Каждого ПараметрОбработки Из ПараметрыОбработки Цикл
						
						Для Каждого КлючИЗначение Из ПараметрыЗапроса[ПараметрОбработки.ИсточникДанных] Цикл
							
							СтруктураПоиска = Новый Структура();
							СтруктураПоиска.Вставить("Идентификатор", КлючИЗначение.Ключ);
							
							СтрокиДокумента = ДокументОбъект.Товары.НайтиСтроки(СтруктураПоиска);
							Для Каждого СтрокаТаблицыТовары Из СтрокиДокумента Цикл
								СтрокаТаблицыТовары[ПараметрОбработки.ИмяКолонки] = КлючИЗначение.Значение;
							КонецЦикла;
							
						КонецЦикла;
					
					КонецЦикла;
					
					ДокументОбъект.Записать();
					ИзмененныеОбъекты.Добавить(ЭлементОчереди.СсылкаНаОбъект);
					
				Исключение
					ВызватьИсключение;
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Статусы = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		РезультирующийСтатусДокумента = РезультирующийСтатусДокумента(ЭлементОчереди.СсылкаНаОбъект);
		Статусы.Принят = РезультирующийСтатусДокумента.Статус;
		
		Если ЗначениеЗаполнено(РезультирующийСтатусДокумента.ДальнейшееДействие) Тогда
			Статусы.ПринятДействия.Добавить(РезультирующийСтатусДокумента.ДальнейшееДействие);
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(
			ЭлементОчереди.СсылкаНаОбъект,
			Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаВыполнена,
			Статусы);
		
		РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
			ЭлементОчереди.СсылкаНаОбъект,
			ПараметрыОбновления);
		ИзмененныеОбъекты.Добавить(ЭлементОчереди.СсылкаНаОбъект);
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИзДругихПартий Тогда
		
		ДанныеДляОбработки = ИнтеграцияЗЕРНОСлужебный.МассивДанныхПоляXDTO(ПолученныеДанные);
		
		Блокировка = Новый БлокировкаДанных();
		
		Для Каждого КлючИЗначение Из ПараметрыОбмена.ПараметрыПреобразования.БлокируемыеОбъекты Цикл
			
			ЭлементБлокировки = Блокировка.Добавить(КлючИЗначение.Ключ);
			БлокируемыеДанные = КлючИЗначение.Значение;
			
			Если БлокируемыеДанные <> Неопределено Тогда
				Для Каждого Колонка Из БлокируемыеДанные.Колонки Цикл
					ЭлементБлокировки.ИспользоватьИзИсточникаДанных(Колонка.Имя, Колонка.Имя);
				КонецЦикла;
				ЭлементБлокировки.ИсточникДанных = БлокируемыеДанные;
			КонецЕсли;
			
		КонецЦикла;
		
		ЭлементОчередиОснование = ИнтеграцияЗЕРНОСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		ПараметрыЗапросаКОбновлению = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
		ОбработанныеСтроки = Неопределено;
		ПараметрыЗапросаКОбновлению.Свойство("ОбработанныеСтроки", ОбработанныеСтроки);
		Если ОбработанныеСтроки = Неопределено Тогда
			ОбработанныеСтроки = Новый Соответствие;
			ПараметрыЗапросаКОбновлению.Вставить("ОбработанныеСтроки", ОбработанныеСтроки);
		КонецЕсли;
		
		Попытка
			
			Блокировка.Заблокировать();
			УстановитьПривилегированныйРежим(Истина);
			
			ИнтеграцияЗЕРНОСлужебный.СсылкиПоИдентификаторам(ПараметрыОбмена);
			
			ПараметрыЗагрузкиПартии = Справочники.РеестрПартийЗЕРНО.ПараметрыЗагрузкиПартии();
			ПараметрыЗагрузкиПартии.Организация     = ЭлементОчереди.Организация;
			ПараметрыЗагрузкиПартии.Подразделение   = ЭлементОчереди.Подразделение;
			ПараметрыЗагрузкиПартии.ВидПродукции    = ЭлементОчереди.ВидПродукции;
			ПараметрыЗагрузкиПартии.ПараметрыОбмена = ПараметрыОбмена;
			
			Для Каждого СтрокаДанных Из ДанныеДляОбработки Цикл
				
				ДанныеРодительскоййПартии = Новый Структура;
				ИнициализироватьСтруктуруПараметрыСообщенияДляСопоставленияПартии(ДанныеРодительскоййПартии);
				
				ДанныеРодительскоййПартии.ВладелецПартии = ПараметрыЗапроса.ВладелецПартии;
				ДанныеРодительскоййПартии.Местоположение = ПараметрыЗапроса.Местоположение;
				ДанныеРодительскоййПартии.Элеватор       = ПараметрыЗапроса.Элеватор;
				ДанныеРодительскоййПартии.Производитель  = ПараметрыЗапроса.Производитель;
				
				ДанныеСопоставления = Новый Соответствие();
				ДанныеСопоставления.Вставить("ДанныеРодительскоййПартии", ДанныеРодительскоййПартии);
				
				ПартияЗерна = Справочники.РеестрПартийЗЕРНО.ЗагрузитьПартиюЗерна(
					СтрокаДанных,
					ПараметрыЗагрузкиПартии,,
					ДанныеСопоставления);
				
				ИзмененныеОбъекты.Добавить(ПартияЗерна);
				
				ОбработанныеСтроки.Вставить(РеквизитыИсходящегоСообщения.ИдентификаторСтроки, ПартияЗерна);
				
			КонецЦикла;
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗИмпорт
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор Тогда
		
		ДанныеДляОбработки = ИнтеграцияЗЕРНОСлужебный.МассивДанныхПоляXDTO(ПолученныеДанные);
		
		Блокировка = Новый БлокировкаДанных();
		
		Для Каждого КлючИЗначение Из ПараметрыОбмена.ПараметрыПреобразования.БлокируемыеОбъекты Цикл
			
			ЭлементБлокировки = Блокировка.Добавить(КлючИЗначение.Ключ);
			БлокируемыеДанные = КлючИЗначение.Значение;
			
			Если БлокируемыеДанные <> Неопределено Тогда
				Для Каждого Колонка Из БлокируемыеДанные.Колонки Цикл
					ЭлементБлокировки.ИспользоватьИзИсточникаДанных(Колонка.Имя, Колонка.Имя);
				КонецЦикла;
				ЭлементБлокировки.ИсточникДанных = БлокируемыеДанные;
			КонецЕсли;
			
		КонецЦикла;
		
		ЭлементОчередиОснование = ИнтеграцияЗЕРНОСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		ПараметрыЗапросаКОбновлению = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
		ОбработанныеСтроки = Неопределено;
		ПараметрыЗапросаКОбновлению.Свойство("ОбработанныеСтроки", ОбработанныеСтроки);
		Если ОбработанныеСтроки = Неопределено Тогда
			ОбработанныеСтроки = Новый Соответствие;
			ПараметрыЗапросаКОбновлению.Вставить("ОбработанныеСтроки", ОбработанныеСтроки);
		КонецЕсли;
		
		Попытка
			
			Блокировка.Заблокировать();
			УстановитьПривилегированныйРежим(Истина);
			
			ИнтеграцияЗЕРНОСлужебный.СсылкиПоИдентификаторам(ПараметрыОбмена);
			
			Для Каждого СтрокаДанных Из ДанныеДляОбработки Цикл
				
				СДИЗ = Справочники.СДИЗЗЕРНО.ЗагрузитьСДИЗ(
					СтрокаДанных,
					ЭлементОчереди.Организация,
					ЭлементОчереди.Подразделение,
					ВидПродукции,
					ПараметрыОбмена);
				
				ИзмененныеОбъекты.Добавить(СДИЗ);
				
				ОбработанныеСтроки.Вставить(РеквизитыИсходящегоСообщения.ИдентификаторСтроки, СДИЗ);
				
				Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор
					И ЗначениеЗаполнено(СтрокаДанных.number)
					И ИнтеграцияЗЕРНОСлужебный.СтатусСДИЗ(СтрокаДанных.status) = Перечисления.СтатусыСДИЗЗЕРНО.Погашен Тогда
					
					// При автогашении СДИЗ получить список гашений, чтобы загрузить созданную партию.
					ПараметрыОбработкиСообщений = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений();
					ПараметрыОбработкиСообщений.Ссылка        = ЭлементОчереди.СсылкаНаОбъект;
					ПараметрыОбработкиСообщений.ВидПродукции  = ЭлементОчереди.ВидПродукции;
					ПараметрыОбработкиСообщений.Организация   = ЭлементОчереди.Организация;
					ПараметрыОбработкиСообщений.Подразделение = ЭлементОчереди.Подразделение;
					ПараметрыОбработкиСообщений.ЭтоЭлеватор   = Истина;
					ПараметрыОбработкиСообщений.Операция      = Перечисления.ВидыОперацийЗЕРНО.ЗапросПогашенийСДИЗ;
					
					ПараметрыОбработкиСообщений.ПараметрыЗапроса = Новый Структура;
					ПараметрыОбработкиСообщений.ПараметрыЗапроса.Вставить("НомерСДИЗ", СтрокаДанных.number);
					
					ДополнительныеПараметрыЗагрузки = Новый Структура();
					ДополнительныеПараметрыЗагрузки.Вставить("ПараметрыОбмена", ПараметрыОбмена);
					ДополнительныеПараметрыЗагрузки.Вставить(
						"ПараметрыОбработкиДокумента",
						ПараметрыОбработкиСообщений);
					
					СформированныеСообщенияXML = Справочники.СДИЗЗЕРНО.СообщениеКПередачеXML(
						ДополнительныеПараметрыЗагрузки.ПараметрыОбработкиДокумента.Ссылка,
						Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные,
						ДополнительныеПараметрыЗагрузки);
					
					Для Каждого СообщениеXML Из СформированныеСообщенияXML Цикл
						
						СообщениеXML.ЗагружатьДо         = ЭлементОчередиОснование.Сообщение;
						СообщениеXML.ИдентификаторСтроки = ЭлементОчереди.ИдентификаторСтроки;
						СообщениеXML.СсылкаНаОбъект      = ЭлементОчереди.СсылкаНаОбъект;
						СообщениеXML.ПараметрыЗапроса    = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыЗапроса);
						СообщениеXML.Версия              = РеквизитыИсходящегоСообщения.Версия;
						ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, ЭлементОчередиОснование.РеквизитыИсходящегоСообщения);
						
						СообщениеXML.ПараметрыЗапроса.Вставить("НомерСДИЗ", СтрокаДанных.number);
						
					КонецЦикла;
					
					ИнтеграцияЗЕРНОСлужебный.ПодготовитьКПередачеИсходныеСообщения(СформированныеСообщенияXML, ПараметрыОбмена);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ИзмененныеОбъекты.Добавить(ЭлементОчереди.СсылкаНаОбъект);
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросПогашенийСДИЗ Тогда
		
		ЭлементОчередиОснование = ИнтеграцияЗЕРНОСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		ПараметрыЗапросаКОбновлению = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		
		СформированныеПартии = Неопределено;
		ПараметрыЗапросаКОбновлению.Свойство("СформированныеПартии", СформированныеПартии);
		Если СформированныеПартии = Неопределено Тогда
			СформированныеПартии = Новый Соответствие;
			ПараметрыЗапросаКОбновлению.Вставить("СформированныеПартии", СформированныеПартии);
		КонецЕсли;
		
		ДанныеДляОбработки = ИнтеграцияЗЕРНОСлужебный.МассивДанныхПоляXDTO(ПолученныеДанные.Record);
		
		Блокировка = Новый БлокировкаДанных();
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.Справочники.РеестрПартийЗЕРНО.ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ПараметрыЗапроса.ИсходнаяПартия.Ссылка);
		
		Попытка
			
			Блокировка.Заблокировать();
			УстановитьПривилегированныйРежим(Истина);
			
			Для Каждого СтрокаДанных Из ДанныеДляОбработки Цикл
				
				СДИЗ = ПараметрыЗапросаКОбновлению.ОбработанныеСтроки[РеквизитыИсходящегоСообщения.ИдентификаторСтроки];
				
				ПараметрыОбновленияИстории = РегистрыСведений.ИсторияПогашенийСДИЗЗЕРНО.СтруктураОбновленияЗаписи();
			
				ПараметрыОбновленияИстории.ИдентификаторЗаявки = Формат(СтрокаДанных.id, "ЧГ=0;");
				ПараметрыОбновленияИстории.ВидОперации         = Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗ;
				ПараметрыОбновленияИстории.Статус              = Перечисления.СтатусыЗаписейЗЕРНО.Подписано;
				ПараметрыОбновленияИстории.ДатаОперации        = СтрокаДанных.dateRegistration;
				ПараметрыОбновленияИстории.ПолноеПогашение     = Истина;
				
				РегистрыСведений.ИсторияПогашенийСДИЗЗЕРНО.ОбновитьЗаписьРегистра(
					СДИЗ, СтрокаДанных.createLotNumber, ПараметрыОбновленияИстории, Истина);
				
				// Создадим и заполним новую партию по данным исходной.
				// Для заполнения ИдентификаторФГИС нужен отдельный запрос.
				
				РеквизитыПартии = Новый Структура();
			
				РеквизитыПартии.Вставить("Количество",          СтрокаДанных.amount);
				РеквизитыПартии.Вставить("КоличествоНачальное", СтрокаДанных.amount);
				РеквизитыПартии.Вставить("Дата",                СтрокаДанных.dateRegistration);
				РеквизитыПартии.Вставить("Статус",              Перечисления.СтатусыПартийЗЕРНО.Подписано);
				
				Для Каждого КлючИЗначение Из ПараметрыЗапроса.ИсходнаяПартия Цикл
					Если КлючИЗначение.Ключ = "Ссылка" Тогда
						Продолжить;
					КонецЕсли;
					РеквизитыПартии.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
				КонецЦикла;
				
				РеквизитыПартии.Вставить("ПредшествующиеПартии", Новый Массив);
				
				ДанныеПредшествующиеПартии = Новый Структура();
				ДанныеПредшествующиеПартии.Вставить("Партия",     ПараметрыЗапроса.ИсходнаяПартия.Ссылка);
				ДанныеПредшествующиеПартии.Вставить("Количество", СтрокаДанных.amount);
				РеквизитыПартии.ПредшествующиеПартии.Добавить(ДанныеПредшествующиеПартии);
				
				ПараметрыПолученияПартии = Справочники.РеестрПартийЗЕРНО.ПараметрыПолученияПартии();
				ПараметрыПолученияПартии.ДанныеПартии       = РеквизитыПартии;
				ПараметрыПолученияПартии.ДобавлятьКЗагрузке = Ложь;
				
				НоваяПартия = Справочники.РеестрПартийЗЕРНО.ПартияЗерна(
					СтрокаДанных.createLotNumber,
					ЭлементОчереди.Организация,
					ЭлементОчереди.Подразделение,
					ЭлементОчереди.ВидПродукции,
					ПараметрыОбмена,
					ПараметрыПолученияПартии);
				
				ИзмененныеОбъекты.Добавить(НоваяПартия.Ссылка);
				
				СформированныеПартии.Вставить(РеквизитыИсходящегоСообщения.ИдентификаторСтроки, НоваяПартия.Ссылка);
				
				ИсходнаяПартияОбъект = ПараметрыЗапроса.ИсходнаяПартия.Ссылка.ПолучитьОбъект();
				ИсходнаяПартияОбъект.Статус     = Перечисления.СтатусыПартийЗЕРНО.ВАрхиве;
				ИсходнаяПартияОбъект.Количество = 0;
				ИсходнаяПартияОбъект.Записать();
				ИзмененныеОбъекты.Добавить(ПараметрыЗапроса.ИсходнаяПартия.Ссылка);
				
			КонецЦикла;
		
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗ Тогда
		
		Если ВРег(ПолученныеДанные.resultOperation) = "DONE" Тогда
			
			НомерПартии                  = ПараметрыЗапроса.НомерПартии;
			ИмяПоляНомерСДИЗ             = ИнтеграцияЗЕРНОСлужебный.ИмяПоляНомерСДИЗПоВидуПродукции(ЭлементОчереди.ВидПродукции);
			НомерСДИЗ                    = ПолученныеДанные[ИмяПоляНомерСДИЗ];
			
			Блокировка = Новый БлокировкаДанных();
			
			ЭлементБлокировки = Блокировка.Добавить(Метаданные.Справочники.СДИЗЗЕРНО.ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Идентификатор", НомерСДИЗ);
			Если Не ПараметрыЗапроса.ЭтоВыделеннаяПартия Тогда
				ЭлементБлокировки = Блокировка.Добавить(Метаданные.Справочники.РеестрПартийЗЕРНО.ПолноеИмя());
				ЭлементБлокировки.УстановитьЗначение("Идентификатор", НомерПартии);
			КонецЕсли;
			
			ЭлементОчередиОснование = ИнтеграцияЗЕРНОСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
			ПараметрыЗапросаКОбновлению = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
			
			ОбработанныеСтроки = Неопределено;
			ПараметрыЗапросаКОбновлению.Свойство("ОбработанныеСтроки", ОбработанныеСтроки);
			Если ОбработанныеСтроки = Неопределено Тогда
				ОбработанныеСтроки = Новый Соответствие;
				ПараметрыЗапросаКОбновлению.Вставить("ОбработанныеСтроки", ОбработанныеСтроки);
			КонецЕсли;
		
			Попытка
				
				Блокировка.Заблокировать();
				УстановитьПривилегированныйРежим(Истина);
				
				СДИЗ = Справочники.СДИЗЗЕРНО.СДИЗ(
					НомерСДИЗ,
					ЭлементОчереди.Организация,
					ЭлементОчереди.Подразделение,
					ЭлементОчереди.ВидПродукции,
					ПараметрыОбмена);
				СДИЗОбъект        = СДИЗ.ПолучитьОбъект();
				СДИЗОбъект.Статус = Перечисления.СтатусыСДИЗЗЕРНО.Аннулирован;
				СДИЗОбъект.Записать();
				ИзмененныеОбъекты.Добавить(СДИЗ);
				
				ОбработанныеСтроки.Вставить(РеквизитыИсходящегоСообщения.ИдентификаторСтроки, СДИЗ);
				
				Если ПараметрыЗапроса.ЭтоВыделеннаяПартия Тогда
					
					// При аннулировании СДИЗ аннулировать выделенную партию.
					СообщениеXML = СообщениеАннулированияПартии(
						ЭлементОчереди,
						ПараметрыЗапроса,
						ПараметрыОбмена);
						
					СообщениеXML.ЗагружатьДо = ЭлементОчередиОснование.Сообщение;
					СообщениеXML.Версия      = РеквизитыИсходящегоСообщения.Версия;
					ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, ЭлементОчередиОснование.РеквизитыИсходящегоСообщения);
					
					ИнтеграцияЗЕРНОСлужебный.ПодготовитьКПередачеИсходныеСообщения(
						ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СообщениеXML),
						ПараметрыОбмена);
					
				Иначе
					
					Партия = Справочники.РеестрПартийЗЕРНО.ПартияЗерна(
						НомерПартии,
						ЭлементОчереди.Организация,
						ЭлементОчереди.Подразделение,
						ЭлементОчереди.ВидПродукции,
						ПараметрыОбмена);
					ПартияОбъект        = Партия.ПолучитьОбъект();
					ПартияОбъект.Статус = Перечисления.СтатусыПартийЗЕРНО.Подписано;
					ПартияОбъект.Записать();
					ИзмененныеОбъекты.Добавить(Партия);
				
				КонецЕсли;
				
			Исключение
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЕсли;
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии Тогда
		
		НомерПартии = ПараметрыЗапроса.НомерПартии;
		
		Блокировка = Новый БлокировкаДанных();
		
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.Справочники.РеестрПартийЗЕРНО.ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Идентификатор", НомерПартии);
		
		Попытка
			
			Блокировка.Заблокировать();
			
			УстановитьПривилегированныйРежим(Истина);
			
			Партия = Справочники.РеестрПартийЗЕРНО.ПартияЗерна(
				НомерПартии,
				ЭлементОчереди.Организация,
				ЭлементОчереди.Подразделение,
				ЭлементОчереди.ВидПродукции,
				ПараметрыОбмена);
			ПартияОбъект        = Партия.ПолучитьОбъект();
			ПартияОбъект.Статус = Перечисления.СтатусыПартийЗЕРНО.Аннулировано;
			ПартияОбъект.Записать();
			ИзмененныеОбъекты.Добавить(Партия);
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Функция РезультирующийСтатусДокумента(ДокументСсылка) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Статус",             Неопределено);
	Результат.Вставить("ДальнейшееДействие", Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Товары.Идентификатор                          КАК Идентификатор,
		|	ЕСТЬNULL(СтатусыОбъектовСинхронизацииЗЕРНО.Статус, НЕОПРЕДЕЛЕНО) КАК Статус
		|ИЗ
		|	Документ.ОформлениеСДИЗЗЕРНО.Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусыОбъектовСинхронизацииЗЕРНО
		|		ПО Товары.Ссылка = СтатусыОбъектовСинхронизацииЗЕРНО.ОбъектСинхронизации
		|		И СтатусыОбъектовСинхронизацииЗЕРНО.ИдентификаторСтроки = Товары.Идентификатор
		|ГДЕ
		|	Товары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ЕстьСформированыПартии = Ложь;
	ЕстьОформленыСДИЗ      = Ложь;
	ЕстьАннулировано       = Ложь;
	ЕстьОшибкиСДИЗ         = Ложь;
	ЕстьОшибкиПартии       = Ложь;
	Пока Выборка.Следующий() Цикл
		Если Выборка.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ПартииСформированы Тогда
			ЕстьСформированыПартии = Истина;
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СДИЗОформлен Тогда
			ЕстьОформленыСДИЗ = Истина;
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗАннулировано Тогда
			ЕстьАннулировано = Истина;
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ФормированиеПартииОбрабатывается
			Или Выборка.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОформленияСДИЗОбрабатывается
			Или Выборка.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗОбрабатывается Тогда
			Результат.Статус = Выборка.Статус;
			Результат.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных;
			Возврат Результат;
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ФормированиеПартииОшибкаПередачи Тогда
			ЕстьОшибкиПартии = Истина;
		Иначе
			ЕстьОшибкиСДИЗ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ДальнейшееДействие = Неопределено;
	
	Если ЕстьАннулировано И Не ЕстьОформленыСДИЗ Тогда
		Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗАннулировано;
	ИначеЕсли ЕстьОформленыСДИЗ И ЕстьАннулировано
		Или ЕстьОформленыСДИЗ И ЕстьОшибкиСДИЗ Тогда
		Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СДИЗОформленЧастично;
		Если Не ЕстьАннулировано Тогда
			ДальнейшееДействие = ДальнейшееДействиеПоУмолчанию();
		КонецЕсли;
	ИначеЕсли Не ЕстьАннулировано И ЕстьОформленыСДИЗ Тогда
		Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СДИЗОформлен;
	ИначеЕсли ЕстьАннулировано Или ЕстьОшибкиСДИЗ Тогда
		Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗОшибкаПередачи;
		Если Не ЕстьАннулировано Тогда
			ДальнейшееДействие = ДальнейшееДействиеПоУмолчанию();
		КонецЕсли;
	ИначеЕсли ЕстьСформированыПартии И ЕстьОшибкиПартии Тогда
		Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ПартииСформированыЧастично;
		ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.СформируйтеПартии;
	ИначеЕсли ЕстьСформированыПартии И Не ЕстьОшибкиПартии Тогда
		Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ПартииСформированы;
		ДальнейшееДействие = ДальнейшееДействиеПоУмолчанию();
	Иначе // ЕстьОшибкиПартии
		Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ФормированиеПартииОшибкаПередачи;
		ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.СформируйтеПартии;
	КонецЕсли;
	
	Результат.Статус = Статус;
	Результат.ДальнейшееДействие = ДальнейшееДействие;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует JSON сообщения для выделения новых партий..
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОформлениеСДИЗЗЕРНО - Документ Формирование партий.
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML - Сообщения к передаче
Функция СформироватьПартииЗЕРНО(ДокументСсылка, ДополнительныеПараметры)
	
	СообщенияXML   = Новый Массив();
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлыЗЕРНО.Документ           КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПрисоединенныеФайлыЗЕРНО.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЗЕРНОПрисоединенныеФайлы КАК ПрисоединенныеФайлыЗЕРНО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОформлениеСДИЗЗЕРНО КАК Шапка
	|		ПО Шапка.Ссылка   = &Ссылка
	|		 И Шапка.Операция = ПрисоединенныеФайлыЗЕРНО.Операция
	|		 И Шапка.Ссылка   = ПрисоединенныеФайлыЗЕРНО.Документ
	|ГДЕ
	|	ПрисоединенныеФайлыЗЕРНО.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ПрисоединенныеФайлыЗЕРНО.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	
	|	Шапка.Операция          КАК Операция,
	|	Шапка.ВидПродукции      КАК ВидПродукции,
	|
	|	Шапка.Организация                КАК Организация,
	|	Шапка.Подразделение              КАК Подразделение,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|
	|	Шапка.Ссылка КАК Ссылка
	|
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.Партия КАК Партия,
	|	Товары.КоличествоЗЕРНО КАК КоличествоЗЕРНО
	|ПОМЕСТИТЬ ПартииКПолучениюОстатков
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.ВыделеннаяПартия = ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
	|ИНДЕКСИРОВАТЬ ПО
	|	Партия
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПартииКПолучениюОстатков.Партия КАК Партия,
	|	ОстаткиПартийЗЕРНООстатки.КоличествоЗЕРНООстаток КАК КоличествоОстатокЗЕРНО
	|ПОМЕСТИТЬ ПартииКОформлению
	|ИЗ
	|	ПартииКПолучениюОстатков КАК ПартииКПолучениюОстатков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиПартийЗЕРНО.Остатки(, Партия В
	|			(ВЫБРАТЬ
	|				ПартииКПолучениюОстатков.Партия КАК Партия
	|			ИЗ
	|				ПартииКПолучениюОстатков)) КАК ОстаткиПартийЗЕРНООстатки
	|		ПО ПартииКПолучениюОстатков.Партия = ОстаткиПартийЗЕРНООстатки.Партия
	|ГДЕ
	|	ПартииКПолучениюОстатков.КоличествоЗЕРНО <> ОстаткиПартийЗЕРНООстатки.КоличествоЗЕРНООстаток
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.НомерСтроки    КАК НомерСтроки,
	|	Товары.Идентификатор  КАК ИдентификаторСтроки,
	|	Товары.КодТНВЭД       КАК КодТНВЭД,
	|	Товары.ОКПД2          КАК ОКПД2,
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия          КАК Серия,
	|
	|	Товары.Партия                            КАК Партия,
	|	Товары.КоличествоЗЕРНО                   КАК КоличествоЗЕРНО,
	|	ПартииКОформлению.КоличествоОстатокЗЕРНО КАК КоличествоОстатокЗЕРНО,
	|
	|	РеестрПартийЗЕРНО.ВладелецПартии  КАК ВладелецПартии,
	|	РеестрПартийЗЕРНО.Элеватор        КАК Элеватор,
	|	РеестрПартийЗЕРНО.Производитель   КАК Товаропроизводитель,
	|	Представление(РеестрПартийЗЕРНО.Производитель) КАК ТоваропроизводительПредставление,
	|
	|	РеестрПартийЗЕРНО.Идентификатор    КАК НомерПартии,
	|	РеестрПартийЗЕРНО.ГодУрожая        КАК ГодУрожая,
	|	РеестрПартийЗЕРНО.ДатаИзготовления КАК ДатаИзготовления,
	|	РеестрПартийЗЕРНО.Местоположение               КАК Местоположение,
	|	РеестрПартийЗЕРНО.Местоположение.Идентификатор КАК МестоположениеСтрокой,
	|	РеестрПартийЗЕРНО.Местоположение.Индекс        КАК Индекс,
	|
	|	РеестрПартийЗЕРНО.НазначениеПартии                КАК Назначение,
	|	РеестрПартийЗЕРНО.НазначениеПартии.Идентификатор  КАК НазначениеПартииИдентификатор,
	|	РеестрПартийЗЕРНО.ЦельИспользования.Идентификатор КАК ЦельИспользованияИдентификатор,
	|
	|	РеестрПартийЗЕРНО.КодСтраныНазначения КАК КодСтраныНазначения
	|
	|ИЗ
	|	ПартииКОформлению КАК ПартииКОформлению
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОформлениеСДИЗЗЕРНО.Товары КАК Товары
	|		ПО Товары.Партия = ПартииКОформлению.Партия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РеестрПартийЗЕРНО КАК РеестрПартийЗЕРНО
	|		ПО Товары.Партия = РеестрПартийЗЕРНО.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|",
	"Партии");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПотребительскиеСвойства.ПотребительскоеСвойство    КАК ПотребительскоеСвойство,
	|	ПотребительскиеСвойства.Значение                   КАК Значение,
	|	ПартииКОформлению.Партия                           КАК Партия,
	|
	|	ЕСТЬNULL(ПотребительскиеСвойства.ПотребительскоеСвойство.Идентификатор, """") КАК ПотребительскоеСвойствоИдентификатор
	|
	|ИЗ
	|	ПартииКОформлению КАК ПартииКОформлению
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РеестрПартийЗЕРНО.ПотребительскиеСвойства КАК ПотребительскиеСвойства
	|		ПО ПартииКОформлению.Партия = ПотребительскиеСвойства.Ссылка
	|",
	"ПотребительскиеСвойства");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	Партии            = РезультатЗапроса["Партии"].Выгрузить();
	//@skip-warning
	ПотребительскиеСвойства = РезультатЗапроса["ПотребительскиеСвойства"].Выгрузить();
	
	АбстрактнаяОперация = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииРасчетСтатуса;
	
	Если Не Шапка.Следующий()
		Или Партии.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
		СообщениеXML.Операция               = Шапка.Операция;
		СообщениеXML.СсылкаНаОбъект         = ДокументСсылка;
		СообщениеXML.ДополнительноеОписание = СтрШаблон(НСтр("ru = 'по документу %1'"), ДокументСсылка);
		ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	ВидПродукции = Шапка.ВидПродукции;
	
	АбстрактноеСообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(Шапка, АбстрактнаяОперация, НомерВерсии);
	АбстрактноеСообщениеXML.ТребуетсяПодписание = Ложь;
	
	ЭтоЗерно = ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно;
	Если ЭтоЗерно Тогда
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_lots");
		ИмяСвойстваЗапроса = "RequestCreateLot";
	Иначе
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_gpb");
		ИмяСвойстваЗапроса = "RequestCreateGpb";
	КонецЕсли;
	
	АбстрактноеСообщениеXML.ПараметрыЗапроса.Вставить("ВидПродукции", ВидПродукции);
	
	Если Не ЭтоЗерно Тогда
		
		Производители = Новый Массив;
		Для Каждого СтрокаПартии Из Партии Цикл
			Если ЗначениеЗаполнено(СтрокаПартии.Товаропроизводитель) Тогда
				Производители.Добавить(СтрокаПартии.Товаропроизводитель);
			Иначе
				Производители.Добавить(СтрокаПартии.Организация);
			КонецЕсли;
		КонецЦикла;
		РеквизитыОрганизаций = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.КлючиРеквизитовПоСсылкеЗЕРНО(Производители);
		
	КонецЕсли;
	
	Для Каждого СтрокаПартии Из Партии Цикл
		
		Если СтрокаПартии.КоличествоЗЕРНО > СтрокаПартии.КоличествоОстатокЗЕРНО Тогда
			
			ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(
				АбстрактноеСообщениеXML,
				СтрШаблон(
					НСтр("ru = 'В строке %1 недостаточно остатков для формирования партии. Доступный остаток %2, к оформлению %3'"),
					СтрокаПартии.НомерСтроки,
					СтрокаПартии.КоличествоОстатокЗЕРНО,
					СтрокаПартии.КоличествоЗЕРНО));
			Продолжить;
			
		КонецЕсли;
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(
			Шапка, Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИзДругихПартий, НомерВерсии);
		СообщениеXML.ЗагружатьДо         = АбстрактноеСообщениеXML.Идентификатор;
		СообщениеXML.ИдентификаторСтроки = СтрокаПартии.ИдентификаторСтроки;
		СообщениеXML.ПараметрыЗапроса.Вставить("ВидПродукции", ВидПродукции);
		ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, АбстрактноеСообщениеXML);
		
		ФормированиеПартииXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапроса);
		
		ИсходаяПартия = Новый Структура;
		ИсходаяПартия.Вставить("КоличествоЗЕРНО", СтрокаПартии.КоличествоЗЕРНО);
		ИсходаяПартия.Вставить("НомерПартии", СтрокаПартии.НомерПартии);
		
		ПредшествующиеПартии = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИсходаяПартия);
		
		Если ЭтоЗерно Тогда
			
			ЭлементПартииXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "LotFromAnother", ФормированиеПартииXDTO);
			// ParentLotType
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьПредшествующиеПартииXDTO(ПредшествующиеПартии, ЭлементПартииXDTO, ПространствоИмен, АбстрактноеСообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "LotFromAnother", ЭлементПартииXDTO, АбстрактноеСообщениеXML);
			
			//GrainProductType
			ВидКультурыXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Crop", ФормированиеПартииXDTO);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ВидКультурыXDTO, "OKPD2", СтрокаПартии.ОКПД2, АбстрактноеСообщениеXML);
			Если ИнтеграцияЗЕРНОКлиентСервер.ТребуетсяЗаполнениеКодаТНВЭД(СтрокаПартии.Назначение) Тогда
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ВидКультурыXDTO, "TNVED", СтрокаПартии.КодТНВЭД, АбстрактноеСообщениеXML);
			КонецЕсли;
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "Crop", ВидКультурыXDTO, АбстрактноеСообщениеXML);
			
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "Target", СтрокаПартии.ЦельИспользованияИдентификатор, АбстрактноеСообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "Purpose", СтрокаПартии.НазначениеПартииИдентификатор, АбстрактноеСообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "HarvestYear", СтрокаПартии.ГодУрожая, АбстрактноеСообщениеXML);
			
			//AddressRFType
			МестоположениеXDTO = ИнтеграцияЗЕРНОСлужебный.АдресРФПоКлючуАдресовXDTO(СтрокаПартии.МестоположениеСтрокой, СтрокаПартии.Индекс, АбстрактноеСообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "StoragePlace", МестоположениеXDTO, АбстрактноеСообщениеXML);
			
		Иначе
			
			// CreateGpbFromAnotherType
			ЭлементПартииXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "GpbFromAnother", ФормированиеПартииXDTO);
			// ParentGpbType
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьПредшествующиеПартииПродуктовПереработкиXDTO(ПредшествующиеПартии, ЭлементПартииXDTO, ПространствоИмен, АбстрактноеСообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "GpbFromAnother", ЭлементПартииXDTO, АбстрактноеСообщениеXML);
		
			//GrainProductType
			ВидКультурыXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Product", ФормированиеПартииXDTO);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ВидКультурыXDTO, "OKPD2", СтрокаПартии.ОКПД2, АбстрактноеСообщениеXML);
			Если ИнтеграцияЗЕРНОКлиентСервер.ТребуетсяЗаполнениеКодаТНВЭД(СтрокаПартии.Назначение) Тогда
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ВидКультурыXDTO, "TNVED", СтрокаПартии.КодТНВЭД, АбстрактноеСообщениеXML);
			КонецЕсли;
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "Product", ВидКультурыXDTO, АбстрактноеСообщениеXML);
			
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "Target", СтрокаПартии.ЦельИспользованияИдентификатор, АбстрактноеСообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "Purpose", СтрокаПартии.НазначениеПартииИдентификатор, АбстрактноеСообщениеXML);
			
			//AddressRFType
			МестоположениеXDTO = ИнтеграцияЗЕРНОСлужебный.АдресРФПоКлючуАдресовXDTO(СтрокаПартии.МестоположениеСтрокой, СтрокаПартии.Индекс, АбстрактноеСообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "StoragePlace", МестоположениеXDTO, АбстрактноеСообщениеXML);
		
			Если ЗначениеЗаполнено(СтрокаПартии.Товаропроизводитель) Тогда
				Производитель = СтрокаПартии.Товаропроизводитель;
				ПредставлениеИсточника = СтрШаблон(НСтр("ru = 'Производитель партии %1'"), СтрокаПартии.ТоваропроизводительПредставление);
			Иначе
				Производитель = СтрокаПартии.Организация;
				ПредставлениеИсточника = СтрШаблон(НСтр("ru = 'Производитель партии %1'"), Шапка.ОрганизацияПредставление);
			КонецЕсли;
			
			// Производитель - ключ реквизитов организации
			
			ИсточникДанныхПроизводитель = РеквизитыОрганизаций[Производитель];
			Если ИсточникДанныхПроизводитель = Неопределено Тогда
				
				ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(
					АбстрактноеСообщениеXML,
					СтрШаблон(
						НСтр("ru = 'В строке %1 не удалось определить данные производителя по ключу %2'"),
						СтрокаПартии.НомерСтроки,
						Производитель));
				
			ИначеЕсли ИсточникДанныхПроизводитель.Свойство("ТекстОшибки") Тогда
				
				ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(
					АбстрактноеСообщениеXML,
					СтрШаблон(
						НСтр("ru = 'В строке %1 для производителя партии %2'"),
						СтрокаПартии.НомерСтроки,
						ИсточникДанныхПроизводитель.ТекстОшибки));
					Продолжить;
			Иначе
				
				ПроизводительXDTO = ИнтеграцияЗЕРНОСлужебный.ОрганизацияКонтрагентXDTO(
					ИсточникДанныхПроизводитель,
					АбстрактноеСообщениеXML,
					ПредставлениеИсточника);
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "Manufacturer", ПроизводительXDTO, АбстрактноеСообщениеXML);
				
			КонецЕсли;
			
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ФормированиеПартииXDTO, "createDate", Формат(СтрокаПартии.ДатаИзготовления, "ДФ=yyyy-MM-dd;"), АбстрактноеСообщениеXML);
			
		КонецЕсли;
		
		ПараметрыОтбораПоСтроке = Новый Структура("Партия", СтрокаПартии.Партия);
		ИсточникДанных = ПотребительскиеСвойства.НайтиСтроки(ПараметрыОтбораПоСтроке);
		
		//ListValueQualityIndicatorType
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьПотребительскиеСвойстваXDTO(
			ИсточникДанных,
			"",
			ФормированиеПартииXDTO,
			ПространствоИмен,
			АбстрактноеСообщениеXML);
		
		Если СтрокаПартии.Назначение = Справочники.КлассификаторНСИЗЕРНО.НазначениеПартииВывозСТерриторииРФ Тогда
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСтрануНазначения(
				ФормированиеПартииXDTO, СтрокаПартии.КодСтраныНазначения, ПространствоИмен, АбстрактноеСообщениеXML);
		КонецЕсли;
		
		СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
			ФормированиеПартииXDTO, ПространствоИмен, ИмяСвойстваЗапроса,
			ДополнительныеПараметры.ПараметрыОбмена);
		
		ИнициализироватьСтруктуруПараметрыСообщенияДляСопоставленияПартии(СообщениеXML.ПараметрыЗапроса);
		
		СообщениеXML.ПараметрыЗапроса.ВладелецПартии = СтрокаПартии.ВладелецПартии;
		СообщениеXML.ПараметрыЗапроса.Местоположение = СтрокаПартии.Местоположение;
		СообщениеXML.ПараметрыЗапроса.Элеватор       = СтрокаПартии.Элеватор;
		СообщениеXML.ПараметрыЗапроса.Производитель  = СтрокаПартии.Товаропроизводитель;
		
		СообщенияXML.Добавить(СообщениеXML);
		
	КонецЦикла;
	
	Если АбстрактноеСообщениеXML.Ошибки.Количество() Тогда
		СообщенияXML = Новый Массив;
	КонецЕсли;
	
	СообщенияXML.Добавить(АбстрактноеСообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

// Формирует JSON сообщения для оформления СДИЗ.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОформлениеСДИЗЗЕРНО - Документ Формирование партий.
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML - Сообщения к передаче
Функция ОформлениеСДИЗЗЕРНО(ДокументСсылка, ДополнительныеПараметры)
	
	СообщенияXML   = Новый Массив();
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлыЗЕРНО.Документ           КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПрисоединенныеФайлыЗЕРНО.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЗЕРНОПрисоединенныеФайлы КАК ПрисоединенныеФайлыЗЕРНО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОформлениеСДИЗЗЕРНО КАК Шапка
	|		ПО Шапка.Ссылка   = &Ссылка
	|		 И Шапка.Операция = ПрисоединенныеФайлыЗЕРНО.Операция
	|		 И Шапка.Ссылка   = ПрисоединенныеФайлыЗЕРНО.Документ
	|ГДЕ
	|	ПрисоединенныеФайлыЗЕРНО.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ПрисоединенныеФайлыЗЕРНО.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	
	|	Шапка.Операция          КАК Операция,
	|	Шапка.ВидПродукции      КАК ВидПродукции,
	|
	|	Шапка.Грузоотправитель                КАК Грузоотправитель,
	|	Представление(Шапка.Грузоотправитель) КАК ГрузоотправительПредставление,
	|	Шапка.Грузополучатель                 КАК Грузополучатель,
	|	Представление(Шапка.Грузополучатель)  КАК ГрузополучательПредставление,
	|	Шапка.Покупатель                      КАК Покупатель,
	|	Представление(Шапка.Покупатель)       КАК ПокупательПредставление,
	|	Шапка.ЭлеваторПолучатель  КАК ЭлеваторПолучатель,
	|	ЕСТЬNULL(Шапка.ЭлеваторПолучатель.Идентификатор, """")  КАК ЭлеваторПолучательИдентификатор,
	|
	|	Шапка.ПодразделениеГрузоотправителя КАК ПодразделениеГрузоотправителя,
	|	Шапка.ПодразделениеГрузополучателя  КАК ПодразделениеГрузополучателя,
	|	Шапка.ПодразделениеПокупателя       КАК ПодразделениеПокупателя,
	|	Шапка.ПодразделениеВладельцаПартии  КАК ПодразделениеВладельцаПартии,
	|
	|	Шапка.ПунктНазначения         КАК ПунктНазначения,
	|	Шапка.ПунктНазначенияСтрокой  КАК ПунктНазначенияСтрокой,
	|
	|	Шапка.Отгрузка   КАК Отгрузка,
	|	Шапка.Перевозка  КАК Перевозка,
	|	Шапка.Приемка    КАК Приемка,
	|	Шапка.Реализация КАК Реализация,
	|
	|	Шапка.ДатаГПД    КАК ДатаГПД,
	|	Шапка.НомерГПД   КАК НомерГПД,
	|	Шапка.ЗакупкаЕИС КАК ЗакупкаЕИС,
	|
	|	Шапка.ДатаГосКонтракта        КАК ДатаГосКонтракта,
	|	Шапка.НомерГосКонтракта       КАК НомерГосКонтракта,
	|	Шапка.НомерЗакупкиЕИС         КАК НомерЗакупкиЕИС,
	|	Шапка.ГосударственныйКонтракт КАК ГосударственныйКонтракт,
	|
	|	Шапка.Организация                КАК Организация,
	|	Шапка.Подразделение              КАК Подразделение,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|
	|	Шапка.Лаборатория                КАК Лаборатория,
	|	Представление(Шапка.Лаборатория) КАК ЛабораторияПредставление,
	|
	|	Шапка.НомерПротоколаИспытаний   КАК НомерПротоколаИспытаний,
	|	Шапка.ДатаПротоколаИспытаний    КАК ДатаПротоколаИспытаний,
	|	Шапка.НомерТаможеннойДекларации КАК НомерТаможеннойДекларации,
	|	Шапка.ДатаКонтрактаВЭД          КАК ДатаКонтрактаВЭД,
	|	Шапка.НомерКонтрактаВЭД         КАК НомерКонтрактаВЭД,
	|	Шапка.ДатаДопСоглашенияВЭД      КАК ДатаДопСоглашенияВЭД,
	|	Шапка.НомерДопСоглашенияВЭД     КАК НомерДопСоглашенияВЭД,
	|
	|// СДИЗ Элеватор
	|	ЕСТЬNULL(ДоговорыХранения.ДатаДоговора, """")         КАК ДатаДоговораХранения,
	|	ЕСТЬNULL(ДоговорыХранения.НомерДоговора, """")        КАК НомерДоговораХранения,
	|	ЕСТЬNULL(ДоговорыХранения.СрокХранения, """")         КАК СрокХранения,
	|	ЕСТЬNULL(ДоговорыХранения.УсловияХранения, """")      КАК УсловияХранения,
	|	ЕСТЬNULL(ДоговорыХранения.МестоХранения, """")        КАК МестоХранения,
	|	ЕСТЬNULL(ДоговорыХранения.МестоХраненияСтрокой, """") КАК МестоХраненияСтрокой,
	|	ЕСТЬNULL(ДоговорыХранения.ТипХранения.Идентификатор, """")    КАК ТипХранения,
	|	ЕСТЬNULL(ДоговорыХранения.ЗакрепленнаяПлощадь, """")          КАК ЗакрепленнаяПлощадь,
	|
	|	Шапка.ПеремещениеПартийЗерна             КАК ПеремещениеПартийЗерна,
	|	Шапка.ДатаПеремещения                    КАК ДатаПеремещения,
	|	Шапка.МестоХраненияПриПеремещении        КАК МестоХраненияПриПеремещении,
	|	Шапка.МестоХраненияПриПеремещенииСтрокой КАК МестоХраненияПриПеремещенииСтрокой,
	|	Шапка.ТипХраненияПриПеремещении.Идентификатор КАК ТипХраненияПриПеремещении,
	|	Шапка.УсловияХраненияПриПеремещении           КАК УсловияХраненияПриПеремещении,
	|
	|	Шапка.Ссылка КАК Ссылка
	|
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыХраненияПартийЗЕРНО КАК ДоговорыХранения
	|		ПО Шапка.ДоговорХраненияПартий = ДоговорыХранения.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.Идентификатор  КАК Идентификатор,
	|	Товары.КодТНВЭД       КАК КодТНВЭД,
	|	Товары.ОКПД2          КАК ОКПД2,
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия          КАК Серия,
	|
	|	РеестрПартийЗЕРНО.Ссылка        КАК Партия,
	|	РеестрПартийЗЕРНО.Идентификатор КАК НомерПартии,
	|
	|	ЕСТЬNULL(РеестрПартийЗЕРНО.Местоположение.Идентификатор, """") КАК МестоположениеСтрокой,
	|	ЕСТЬNULL(РеестрПартийЗЕРНО.Местоположение.Индекс, """")        КАК МестоположениеИндекс,
	|
	|	Товары.КоличествоЗЕРНО КАК КоличествоЗЕРНО,
	|
	|	Товары.Лаборатория                КАК Лаборатория,
	|	Представление(Товары.Лаборатория) КАК ЛабораторияПредставление,
	|	Товары.НомерПротоколаИспытаний    КАК НомерПротоколаИспытаний,
	|	Товары.ДатаПротоколаИспытаний     КАК ДатаПротоколаИспытаний
	|
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.Товары КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РеестрПартийЗЕРНО КАК РеестрПартийЗЕРНО
	|		ПО ВЫБОР
	|			КОГДА Товары.ВыделеннаяПартия = ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
	|				ТОГДА Товары.Партия = РеестрПартийЗЕРНО.Ссылка
	|			ИНАЧЕ Товары.ВыделеннаяПартия = РеестрПартийЗЕРНО.Ссылка
	|		КОНЕЦ
	|
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.СДИЗ = ЗНАЧЕНИЕ(Справочник.СДИЗЗЕРНО.ПустаяСсылка)
	|",
	"Товары");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.Идентификатор КАК Идентификатор,
	|
	|	РеестрПартийЗЕРНО.Ссылка            КАК ИсходнаяПартия,
	|	РеестрПартийЗЕРНО.ВладелецПартии    КАК ВладелецПартии,
	|	РеестрПартийЗЕРНО.Местоположение    КАК Местоположение,
	|	РеестрПартийЗЕРНО.ОКПД2             КАК ОКПД2,
	|	РеестрПартийЗЕРНО.КодТНВЭД          КАК КодТНВЭД,
	|	РеестрПартийЗЕРНО.ГодУрожая         КАК ГодУрожая,
	|	РеестрПартийЗЕРНО.НазначениеПартии  КАК НазначениеПартии,
	|	РеестрПартийЗЕРНО.ЦельИспользования КАК ЦельИспользования,
	|	РеестрПартийЗЕРНО.Элеватор          КАК Элеватор,
	|	РеестрПартийЗЕРНО.Производитель     КАК Производитель,
	|	РеестрПартийЗЕРНО.ДатаИзготовления  КАК ДатаИзготовления,
	|	РеестрПартийЗЕРНО.ПотребительскиеСвойства.(
	|		Ссылка,
	|		НомерСтроки,
	|		ПотребительскоеСвойство,
	|		Значение)
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РеестрПартийЗЕРНО КАК РеестрПартийЗЕРНО
	|		ПО ВЫБОР
	|			КОГДА Товары.ВыделеннаяПартия = ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
	|				ТОГДА Товары.Партия = РеестрПартийЗЕРНО.Ссылка
	|			ИНАЧЕ Товары.ВыделеннаяПартия = РеестрПартийЗЕРНО.Ссылка
	|		КОНЕЦ
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.СДИЗ = ЗНАЧЕНИЕ(Справочник.СДИЗЗЕРНО.ПустаяСсылка)
	|",
	"ИсходныеПартии");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Перевозчики.Перевозчик    КАК Перевозчик,
	|	Представление(Перевозчики.Перевозчик) КАК ПеревозчикПредставление,
	|	Перевозчики.Подразделение КАК Подразделение
	|
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.ТранспортныеСредства КАК Перевозчики
	|ГДЕ
	|	Перевозчики.Ссылка = &Ссылка
	|",
	"Перевозчики");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ТранспортныеСредства.Перевозчик                    КАК Перевозчик,
	|	ТранспортныеСредства.Подразделение                 КАК Подразделение,
	|	ТранспортныеСредства.ТипТранспорта.Идентификатор   КАК ТипТранспорта,
	|	ТранспортныеСредства.ТранспортноеСредство          КАК ТранспортноеСредство,
	|	ТранспортныеСредства.НомерТранспортногоСредства    КАК НомерТранспортногоСредства,
	|	ТранспортныеСредства.НомерАвтомобильногоКонтейнера КАК НомерАвтомобильногоКонтейнера
	|
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.ТранспортныеСредства КАК ТранспортныеСредства
	|ГДЕ
	|	ТранспортныеСредства.Ссылка = &Ссылка
	|",
	"ТранспортныеСредства");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	МестаПерегрузки.Перевозчик         КАК Перевозчик,
	|	МестаПерегрузки.Подразделение      КАК Подразделение,
	|	МестаПерегрузки.Адрес              КАК Адрес,
	|	МестаПерегрузки.АдресСтрокой КАК АдресСтрокой
	|
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.МестаПерегрузки КАК МестаПерегрузки
	|ГДЕ
	|	МестаПерегрузки.Ссылка = &Ссылка
	|",
	"МестаПерегрузки");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	СвязанныеДокументы.ТипДокумента КАК ТипДокумента,
	|	СвязанныеДокументы.ТипДокумента.Идентификатор КАК ИдентификаторТипДокумента,
	|	СвязанныеДокументы.Номер        КАК Номер,
	|	СвязанныеДокументы.Дата         КАК Дата
	|
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.СвязанныеДокументы КАК СвязанныеДокументы
	|ГДЕ
	|	СвязанныеДокументы.Ссылка = &Ссылка
	|",
	"СвязанныеДокументы");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	СвязанныеДокументыПрочие.ТипДокумента  КАК ТипДокумента,
	|	СвязанныеДокументыПрочие.Номер         КАК Номер,
	|	СвязанныеДокументыПрочие.Дата          КАК Дата
	|
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.СвязанныеДокументыПрочие КАК СвязанныеДокументыПрочие
	|ГДЕ
	|	СвязанныеДокументыПрочие.Ссылка = &Ссылка
	|",
	"СвязанныеДокументыПрочие");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ДокументыСертификации.ИдентификаторСтрокиТоваров КАК ИдентификаторСтрокиТоваров,
	|	ДокументыСертификации.ТипДокумента    КАК ТипДокумента,
	|	ДокументыСертификации.Дата            КАК Дата,
	|	ДокументыСертификации.Номер           КАК Номер,
	|	ДокументыСертификации.СрокДействия    КАК СрокДействия,
	|	ДокументыСертификации.ИдентификаторПроисхожденияВЕТИС        КАК ИдентификаторПроисхожденияВЕТИС,
	|	ДокументыСертификации.ИдентификаторПроисхожденияВЕТИССтрокой КАК ИдентификаторПроисхожденияВЕТИССтрокой,
	|	ДокументыСертификации.ВидДокументаВСД КАК ВидДокументаВСД,
	|	ДокументыСертификации.СерияВСД        КАК СерияВСД
	|
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.ДокументыСертификации КАК ДокументыСертификации
	|ГДЕ
	|	ДокументыСертификации.Ссылка = &Ссылка
	|",
	"ДокументыСертификации");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	УслугиЭлеватора.УслугаЭлеватора.Идентификатор КАК ИдентификаторУслуги,
	|	УслугиЭлеватора.УслугаЭлеватора.Наименование  КАК УслугаЭлеватора
	|
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО КАК Шапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыХраненияПартийЗЕРНО.УслугиЭлеватора КАК УслугиЭлеватора
	|		ПО Шапка.ДоговорХраненияПартий = УслугиЭлеватора.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"УслугиЭлеватора");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	Товары            = РезультатЗапроса["Товары"].Выбрать();
	
	Если Не Шапка.Следующий()
		Или Не Товары.Следующий() Тогда
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
		СообщениеXML.Операция               = Шапка.Операция;
		СообщениеXML.СсылкаНаОбъект         = ДокументСсылка;
		СообщениеXML.ДополнительноеОписание = СтрШаблон(НСтр("ru = 'по документу %1'"), ДокументСсылка);
		ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	ЭтоЭлеватор = Шапка.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор;
	
	Если ЭтоЭлеватор Тогда
		
		СообщенияXML = ОформлениеСДИЗЭлеватор(Шапка, РезультатЗапроса, ДополнительныеПараметры);
		
	Иначе
		
		Если Шапка.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ Тогда
			
			СообщенияXML = ОформлениеСДИЗРФ(Шапка, РезультатЗапроса, ДополнительныеПараметры);
			
		ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт Тогда
			
			СообщенияXML = ОформлениеСДИЗЭкспорт(Шапка, РезультатЗапроса, ДополнительныеПараметры);
			
		ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗИмпорт Тогда
			
			СообщенияXML = ОформлениеСДИЗИМпорт(Шапка, РезультатЗапроса, ДополнительныеПараметры);
			
		Иначе
			
			ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(
				СообщениеXML,
				СтрШаблон(НСтр("ru = 'Операция не поддерживается: %1.'"), Шапка.Операция));
			СообщенияXML.Добавить(СообщениеXML);
			Возврат СообщенияXML;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СообщенияXML;
	
КонецФункции

// Формирует JSON сообщения для аннулирования СДИЗ.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОформлениеСДИЗЗЕРНО - Документ Формирование партий.
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML - Сообщения к передаче
Функция АннулированиеСДИЗЗЕРНО(ДокументСсылка, ДополнительныеПараметры)
	
	СообщенияXML   = Новый Массив();
	СписокЗапросов = Новый СписокЗначений;
	Операция         = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗ;
	ПараметрыЗапроса = ДополнительныеПараметры.ПараметрыОбработкиДокумента.ПараметрыЗапроса;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлыЗЕРНО.Документ                      КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПрисоединенныеФайлыЗЕРНО.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЗЕРНОПрисоединенныеФайлы КАК ПрисоединенныеФайлыЗЕРНО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОформлениеСДИЗЗЕРНО КАК Шапка
	|		ПО Шапка.Ссылка                      = &Ссылка
	|		 И ПрисоединенныеФайлыЗЕРНО.Операция = &Операция
	|		 И Шапка.Ссылка                      = ПрисоединенныеФайлыЗЕРНО.Документ
	|ГДЕ
	|	ПрисоединенныеФайлыЗЕРНО.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ПрисоединенныеФайлыЗЕРНО.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|
	|	Шапка.Организация                КАК Организация,
	|	Шапка.Подразделение              КАК Подразделение,
	|	Шапка.ВидПродукции               КАК ВидПродукции,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|	Шапка.Ссылка                     КАК Ссылка
	|	
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.Идентификатор    КАК ИдентификаторСтроки,
	|	СДИЗЗЕРНО.Идентификатор КАК ИдентификаторСДИЗ,
	|	СДИЗЗЕРНО.НомерПартии   КАК НомерПартии,
	|	Товары.ВыделеннаяПартия КАК ВыделеннаяПартия
	|
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СДИЗЗЕРНО КАК СДИЗЗЕРНО
	|		ПО Товары.СДИЗ = СДИЗЗЕРНО.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.Идентификатор В (&ИдентификаторСтроки)
	|",
	"Товары");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",              ДокументСсылка);
	Запрос.УстановитьПараметр("Операция",            Операция);
	Запрос.УстановитьПараметр("ИдентификаторСтроки", ПараметрыЗапроса);
	
	РезультатЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	Товары = РезультатЗапроса["Товары"].Выгрузить();
	
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
		СообщениеXML.Операция               = Операция;
		СообщениеXML.СсылкаНаОбъект         = ДокументСсылка;
		СообщениеXML.ДополнительноеОписание = СтрШаблон(НСтр("ru = 'по документу %1'"), ДокументСсылка);
		ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	ВидПродукции      = Шапка.ВидПродукции;
	НомерВерсии       = Шапка.ПоследнийНомерВерсии + 1;
	
	Если Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно Тогда
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_sdiz");
		ИмяСвойстваЗапроса = "RequestCanceledSDIZ";
	Иначе
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_gpb_sdiz");
		ИмяСвойстваЗапроса = "RequestCanceledGpbSDIZ";
	КонецЕсли;
	
	АбстрактноеСообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(
		Шапка, Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗРасчетСтатуса, НомерВерсии);
	АбстрактноеСообщениеXML.ТребуетсяПодписание = Ложь;
	
	ИмяПоляНомерСДИЗ = ИнтеграцияЗЕРНОСлужебный.ИмяПоляНомерСДИЗПоВидуПродукции(ВидПродукции);
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(Шапка, Операция, НомерВерсии);
		СообщениеXML.ЗагружатьДо         = АбстрактноеСообщениеXML.Идентификатор;
		СообщениеXML.ИдентификаторСтроки = СтрокаТовары.ИдентификаторСтроки;
		СообщениеXML.ПараметрыЗапроса.Вставить("НомерПартии", СтрокаТовары.НомерПартии);
		СообщениеXML.ПараметрыЗапроса.Вставить("ЭтоВыделеннаяПартия", ЗначениеЗаполнено(СтрокаТовары.ВыделеннаяПартия));
		ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, АбстрактноеСообщениеXML);
		
		АннулированиеПартииXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапроса);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(АннулированиеПартииXDTO, ИмяПоляНомерСДИЗ, СтрокаТовары.ИдентификаторСДИЗ, АбстрактноеСообщениеXML);
		
		СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
			АннулированиеПартииXDTO, ПространствоИмен, ИмяСвойстваЗапроса,
			ДополнительныеПараметры.ПараметрыОбмена);
		
		СообщенияXML.Добавить(СообщениеXML);
		
	КонецЦикла;
	
	Если АбстрактноеСообщениеXML.Ошибки.Количество() Тогда
		СообщенияXML = Новый Массив;
	КонецЕсли;
	
	СообщенияXML.Добавить(АбстрактноеСообщениеXML);
	Возврат СообщенияXML;
	
КонецФункции

// Сообщение аннулирования выделенных партий после аннулирования СДИЗ
//
// Параметры:
//  ЭлементОчереди - см. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML.
//  ПараметрыЗапроса - Структура - дополнительные параметры сообщения.
//  ПараметрыОбмена             - см. ИнтеграцияЗЕРНО.ПараметрыОбмена
// Возвращаемое значение:
//  см. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML
Функция СообщениеАннулированияПартии(ЭлементОчереди, ПараметрыЗапроса, ПараметрыОбмена)
	
	СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
	СообщениеXML.Операция         = Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии;
	СообщениеXML.ВидПродукции     = ЭлементОчереди.ВидПродукции;
	СообщениеXML.ТипСообщения     = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.Версия           = 1;
	СообщениеXML.СсылкаНаОбъект   = ЭлементОчереди.СсылкаНаОбъект;
	СообщениеXML.Организация      = ЭлементОчереди.Организация;
	СообщениеXML.Подразделение    = ЭлементОчереди.Подразделение;
	
	СообщениеXML.ИдентификаторСтроки = ЭлементОчереди.ИдентификаторСтроки;
	СообщениеXML.ПараметрыЗапроса    = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыЗапроса);
	
	ВидПродукции = ЭлементОчереди.ВидПродукции;
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗерна Тогда
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_gpb");
		ИмяСвойстваЗапроса = "RequestCanceledGpb";
	Иначе
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_lots");
		ИмяСвойстваЗапроса = "RequestCanceledLot";
	КонецЕсли;
	
	АннулированиеПартииXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапроса);
	ИмяПоляНомерПартии = ИнтеграцияЗЕРНОСлужебный.ИмяПоляНомерПартииПоВидуПродукции(ВидПродукции);
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
		АннулированиеПартииXDTO, ИмяПоляНомерПартии, ПараметрыЗапроса.НомерПартии, СообщениеXML);
	
	СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
		АннулированиеПартииXDTO, ПространствоИмен, ИмяСвойстваЗапроса, ПараметрыОбмена);
	
	Возврат СообщениеXML;
	
КонецФункции

Функция ДанныеКонтрагентовОрганизацийПриОформленииСДИЗ(Шапка, Перевозчики, Товары = Неопределено)
	
	ТаблицаИсточникиРеквизитов = ИнтеграцияЗЕРНО.НоваяТаблицаОрганизацияКонтрагентПодразделение();
	ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(
		ТаблицаИсточникиРеквизитов, Шапка.Организация, Шапка.Подразделение);
	
	Если Шапка.Реализация Тогда
		ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(
			ТаблицаИсточникиРеквизитов, Шапка.Покупатель, Шапка.ПодразделениеПокупателя);
	КонецЕсли;
	
	Если Шапка.Перевозка Тогда
		
		Если ЗначениеЗаполнено(Шапка.Грузоотправитель) Тогда
			ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(
				ТаблицаИсточникиРеквизитов, Шапка.Грузоотправитель, Шапка.ПодразделениеГрузоотправителя);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шапка.Грузополучатель) Тогда
			ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(
				ТаблицаИсточникиРеквизитов, Шапка.Грузополучатель, Шапка.ПодразделениеГрузополучателя);
		КонецЕсли;
		
		Для Каждого СтрокаПеревозчика Из Перевозчики Цикл
			ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(
				ТаблицаИсточникиРеквизитов, СтрокаПеревозчика.Перевозчик, СтрокаПеревозчика.Подразделение);
		КонецЦикла;
		
		Если Шапка.Операция <> Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ Тогда
			ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(ТаблицаИсточникиРеквизитов, Шапка.Лаборатория);
			Если Товары <> Неопределено Тогда
				Для Каждого СтрокаТовары Из Товары Цикл
					ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(
						ТаблицаИсточникиРеквизитов, СтрокаТовары.Лаборатория);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Если Шапка.Отгрузка И ЗначениеЗаполнено(Шапка.Грузоотправитель) Тогда
			ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(
				ТаблицаИсточникиРеквизитов, Шапка.Грузоотправитель, Шапка.ПодразделениеГрузоотправителя);
		КонецЕсли;
		
		Если Шапка.Приемка И ЗначениеЗаполнено(Шапка.Грузополучатель) Тогда
			ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(
				ТаблицаИсточникиРеквизитов, Шапка.Грузополучатель, Шапка.ПодразделениеГрузополучателя);
		КонецЕсли;
		
	КонецЕсли;
	
	ИнтеграцияЗЕРНОВызовСервера.РеквизитыОрганизацийКонтрагентов(ТаблицаИсточникиРеквизитов);
	
	Возврат ТаблицаИсточникиРеквизитов;
	
КонецФункции

Функция ОформлениеСДИЗРФ(Шапка, РезультатЗапроса, ДополнительныеПараметры)
	
	СообщенияXML = Новый Массив;
	
	//@skip-warning
	Товары = РезультатЗапроса["Товары"].Выгрузить();
	Товары.Индексы.Добавить("Идентификатор");
	//@skip-warning
	Перевозчики = РезультатЗапроса["Перевозчики"].Выгрузить();
	//@skip-warning
	ТранспортныеСредства = РезультатЗапроса["ТранспортныеСредства"].Выгрузить();
	//@skip-warning
	МестаПерегрузки = РезультатЗапроса["МестаПерегрузки"].Выгрузить();
	//@skip-warning
	СвязанныеДокументы = РезультатЗапроса["СвязанныеДокументы"].Выгрузить();
	//@skip-warning
	СвязанныеДокументыПрочие = РезультатЗапроса["СвязанныеДокументыПрочие"].Выгрузить();
	//@skip-warning
	ДокументыСертификации = РезультатЗапроса["ДокументыСертификации"].Выгрузить();
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	АбстрактнаяОперация = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРасчетСтатуса;
	
	АбстрактноеСообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(Шапка, АбстрактнаяОперация, НомерВерсии);
	АбстрактноеСообщениеXML.ТребуетсяПодписание = Ложь;
	
	ЭтоЗерно = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно;
	Если ЭтоЗерно Тогда
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_sdiz");
		ИмяСвойстваЗапроса = "RequestCreateSDIZ";
	Иначе
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_gpb_sdiz");
		ИмяСвойстваЗапроса = "RequestCreateGpbSDIZ";
	КонецЕсли;
	
	РеквизитыОрганизаций = ДанныеКонтрагентовОрганизацийПриОформленииСДИЗ(Шапка, Перевозчики);
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		ОформлениеСДИЗXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапроса);
		
		ЭлементСДИЗXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "OperationInRF", ОформлениеСДИЗXDTO);
		
		Если Шапка.Реализация Тогда
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO, "OperationSDIZ", "REALIZATION", АбстрактноеСообщениеXML);
		КонецЕсли;
		
		Если Шапка.Перевозка Тогда
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO, "OperationSDIZ", "SHIPPING", АбстрактноеСообщениеXML);
		Иначе
			Если Шапка.Приемка Тогда
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO, "OperationSDIZ", "ACCEPTANCE", АбстрактноеСообщениеXML);
			КонецЕсли;
			Если Шапка.Отгрузка Тогда
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO, "OperationSDIZ", "SHIPMENT", АбстрактноеСообщениеXML);
			КонецЕсли;
		КонецЕсли;
		
		Если Шапка.Реализация Тогда
			
			ДанныеЗаполнения = Новый Структура;
			
			ДанныеЗаполнения.Вставить("РеквизитыОрганизаций",     РеквизитыОрганизаций);
			ДанныеЗаполнения.Вставить("Шапка",                    Шапка);
			ДанныеЗаполнения.Вставить("СвязанныеДокументы",       СвязанныеДокументы);
			
			ЭлементРеализацияXDTO = РеализацияОформлениеСДИЗXDTO(ДанныеЗаполнения, ЭлементСДИЗXDTO, ПространствоИмен, АбстрактноеСообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO,  "Realization", ЭлементРеализацияXDTO, АбстрактноеСообщениеXML);
			
		КонецЕсли;
		
		Если Шапка.Перевозка Тогда
			
			ДанныеЗаполнения = Новый Структура;
			
			ДанныеЗаполнения.Вставить("РеквизитыОрганизаций", РеквизитыОрганизаций);
			ДанныеЗаполнения.Вставить("Шапка",                Шапка);
			ДанныеЗаполнения.Вставить("Перевозчики",          Перевозчики);
			ДанныеЗаполнения.Вставить("МестаПерегрузки",      МестаПерегрузки);
			ДанныеЗаполнения.Вставить("ТранспортныеСредства", ТранспортныеСредства);
			ДанныеЗаполнения.Вставить("СтрокаТовары",         СтрокаТовары);
			
			ЭлементПеревозкаXDTO = ПеревозкаОформлениеСДИЗXDTO(ДанныеЗаполнения, ЭлементСДИЗXDTO, ПространствоИмен, АбстрактноеСообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO,  "Shipping", ЭлементПеревозкаXDTO, АбстрактноеСообщениеXML);
			
		Иначе
			
			Если Шапка.Приемка Тогда
				
				ЭлементПриемкаXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Acceptance", ЭлементСДИЗXDTO);
				
				ЗаполнитьГрузополучательXDTO(ЭлементПриемкаXDTO, Шапка, РеквизитыОрганизаций, АбстрактноеСообщениеXML);
				
				ПунктНазначенияXDTO = ИнтеграцияЗЕРНОСлужебный.АдресРФXDTO(Шапка.ПунктНазначения, Шапка.ПунктНазначенияСтрокой, АбстрактноеСообщениеXML);
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементПриемкаXDTO, "ConsigneeAddress", ПунктНазначенияXDTO, АбстрактноеСообщениеXML);
				
				Если ЭтоЗерно Тогда
					ЗаполнитьЭлеваторXDTO(
						ЭлементПриемкаXDTO,
						Шапка.ЭлеваторПолучатель,
						Шапка.ЭлеваторПолучательИдентификатор,
						ПространствоИмен,
						АбстрактноеСообщениеXML)
				КонецЕсли;
				
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO,  "Acceptance", ЭлементПриемкаXDTO, АбстрактноеСообщениеXML);
				
			КонецЕсли;
			
			Если Шапка.Отгрузка Тогда
				
				ЭлементОтгрузкаXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Shipment", ЭлементСДИЗXDTO);
				
				ЗаполнитьГрузоотправительXDTO(ЭлементОтгрузкаXDTO, Шапка, РеквизитыОрганизаций, АбстрактноеСообщениеXML);
				
				ПунктОтправленияXDTO = ИнтеграцияЗЕРНОСлужебный.АдресРФПоКлючуАдресовXDTO(
					СтрокаТовары.МестоположениеСтрокой, СтрокаТовары.МестоположениеИндекс,  АбстрактноеСообщениеXML);
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементОтгрузкаXDTO, "ShipperAddress", ПунктОтправленияXDTO, АбстрактноеСообщениеXML);
				
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO,  "Shipment", ЭлементОтгрузкаXDTO, АбстрактноеСообщениеXML);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// DocOtherNumberDateType - иные сопроводительные документы при перевозке.
		Если СвязанныеДокументыПрочие.Количество() И (Шапка.Отгрузка Или Шапка.Приемка Или Шапка.Перевозка) Тогда
			
			ПараметрыРасширенияТипаXDTO = Новый Структура("KindDoc", "ТипДокумента");
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьТаблицуДокументНомерДатаXDTO(
				СвязанныеДокументыПрочие,
				ПараметрыРасширенияТипаXDTO,
				"OtherTransportDocument",
				ЭлементСДИЗXDTO,
				ПространствоИмен,
				АбстрактноеСообщениеXML);
			
		КонецЕсли;
		
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ОформлениеСДИЗXDTO, "OperationInRF", ЭлементСДИЗXDTO, АбстрактноеСообщениеXML);
		
		ИмяПоляНомерПартии = ИнтеграцияЗЕРНОСлужебный.ИмяПоляНомерПартииПоВидуПродукции(Шапка.ВидПродукции);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ОформлениеСДИЗXDTO, ИмяПоляНомерПартии, СтрокаТовары.НомерПартии, АбстрактноеСообщениеXML);
		
		ЗаполнитьДокументыСертификации(
			ОформлениеСДИЗXDTO,
			ДокументыСертификации,
			СтрокаТовары.Идентификатор,
			ПространствоИмен,
			АбстрактноеСообщениеXML);
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(Шапка, Шапка.Операция, НомерВерсии);
		СообщениеXML.ЗагружатьДо         = АбстрактноеСообщениеXML.Идентификатор;
		СообщениеXML.ИдентификаторСтроки = СтрокаТовары.Идентификатор;
		ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, АбстрактноеСообщениеXML);
		СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
			ОформлениеСДИЗXDTO, ПространствоИмен, ИмяСвойстваЗапроса,
			ДополнительныеПараметры.ПараметрыОбмена);
		СообщенияXML.Добавить(СообщениеXML);
		
	КонецЦикла;
	
	Если АбстрактноеСообщениеXML.Ошибки.Количество() Тогда
		СообщенияXML = Новый Массив;
	КонецЕсли;
	
	СообщенияXML.Добавить(АбстрактноеСообщениеXML);
	Возврат СообщенияXML;
	
КонецФункции

Функция ОформлениеСДИЗЭкспорт(Шапка, РезультатЗапроса, ДополнительныеПараметры)
	
	СообщенияXML = Новый Массив;
	
	//@skip-warning
	Товары = РезультатЗапроса["Товары"].Выгрузить();
	Товары.Индексы.Добавить("Идентификатор");
	//@skip-warning
	Перевозчики = РезультатЗапроса["Перевозчики"].Выгрузить();
	//@skip-warning
	ТранспортныеСредства = РезультатЗапроса["ТранспортныеСредства"].Выгрузить();
	//@skip-warning
	МестаПерегрузки = РезультатЗапроса["МестаПерегрузки"].Выгрузить();
	//@skip-warning
	СвязанныеДокументы = РезультатЗапроса["СвязанныеДокументы"].Выгрузить();
	//@skip-warning
	СвязанныеДокументыПрочие = РезультатЗапроса["СвязанныеДокументыПрочие"].Выгрузить();
	//@skip-warning
	ДокументыСертификации = РезультатЗапроса["ДокументыСертификации"].Выгрузить();
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	АбстрактнаяОперация = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРасчетСтатуса;
	
	АбстрактноеСообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(Шапка, АбстрактнаяОперация, НомерВерсии);
	АбстрактноеСообщениеXML.ТребуетсяПодписание = Ложь;
	
	ЭтоЗерно = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно;
	Если ЭтоЗерно Тогда
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_sdiz");
		ИмяСвойстваЗапроса = "RequestCreateSDIZ";
	Иначе
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_gpb_sdiz");
		ИмяСвойстваЗапроса = "RequestCreateGpbSDIZ";
	КонецЕсли;
	
	РеквизитыОрганизаций = ДанныеКонтрагентовОрганизацийПриОформленииСДИЗ(Шапка, Перевозчики, Товары);
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		ОформлениеСДИЗXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапроса);
		
		ЭлементСДИЗXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "OperationExportRF", ОформлениеСДИЗXDTO);
		
		Если Шапка.Перевозка Тогда
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO, "OperationSDIZ", "SHIPPING", АбстрактноеСообщениеXML);
		Иначе
			Если Шапка.Отгрузка Тогда
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO, "OperationSDIZ", "SHIPMENT", АбстрактноеСообщениеXML);
			КонецЕсли;
		КонецЕсли;
		
		ДанныеЗаполнения = Новый Структура;
		
		ДанныеЗаполнения.Вставить("РеквизитыОрганизаций", РеквизитыОрганизаций);
		ДанныеЗаполнения.Вставить("Шапка",                Шапка);
		ДанныеЗаполнения.Вставить("Перевозчики",          Перевозчики);
		ДанныеЗаполнения.Вставить("МестаПерегрузки",      МестаПерегрузки);
		ДанныеЗаполнения.Вставить("ТранспортныеСредства", ТранспортныеСредства);
		ДанныеЗаполнения.Вставить("СтрокаТовары",         СтрокаТовары);
		
		// Shipping 
		ЭлементПеревозкаXDTO = ПеревозкаОформлениеСДИЗXDTO(ДанныеЗаполнения, ЭлементСДИЗXDTO, ПространствоИмен, АбстрактноеСообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO,  "Shipping", ЭлементПеревозкаXDTO, АбстрактноеСообщениеXML);
		
		// AdditionalInformationImportExport
		ДопСведенияИмпортЭкспортXDTO = ДополнительныеСведенияИмпортЭкспортXDTO(ДанныеЗаполнения, ЭлементСДИЗXDTO, ПространствоИмен, АбстрактноеСообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO,  "AdditionalInformationImportExport", ДопСведенияИмпортЭкспортXDTO, АбстрактноеСообщениеXML);
		
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ОформлениеСДИЗXDTO, "OperationExportRF", ЭлементСДИЗXDTO, АбстрактноеСообщениеXML);
		
		ИмяПоляНомерПартии = ИнтеграцияЗЕРНОСлужебный.ИмяПоляНомерПартииПоВидуПродукции(Шапка.ВидПродукции);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ОформлениеСДИЗXDTO, ИмяПоляНомерПартии, СтрокаТовары.НомерПартии, АбстрактноеСообщениеXML);
		
		ЗаполнитьДокументыСертификации(
			ОформлениеСДИЗXDTO,
			ДокументыСертификации,
			СтрокаТовары.Идентификатор,
			ПространствоИмен,
			АбстрактноеСообщениеXML);
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(Шапка, Шапка.Операция, НомерВерсии);
		СообщениеXML.ЗагружатьДо         = АбстрактноеСообщениеXML.Идентификатор;
		СообщениеXML.ИдентификаторСтроки = СтрокаТовары.Идентификатор;
		ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, АбстрактноеСообщениеXML);
		СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
			ОформлениеСДИЗXDTO, ПространствоИмен, ИмяСвойстваЗапроса,
			ДополнительныеПараметры.ПараметрыОбмена);
		СообщенияXML.Добавить(СообщениеXML);
		
	КонецЦикла;
	
	Если АбстрактноеСообщениеXML.Ошибки.Количество() Тогда
		СообщенияXML = Новый Массив;
	КонецЕсли;
	
	СообщенияXML.Добавить(АбстрактноеСообщениеXML);
	Возврат СообщенияXML;
	
КонецФункции

Функция ОформлениеСДИЗИмпорт(Шапка, РезультатЗапроса, ДополнительныеПараметры)
	
	СообщенияXML = Новый Массив;
	
	//@skip-warning
	Товары = РезультатЗапроса["Товары"].Выгрузить();
	Товары.Индексы.Добавить("Идентификатор");
	//@skip-warning
	Перевозчики = РезультатЗапроса["Перевозчики"].Выгрузить();
	//@skip-warning
	ТранспортныеСредства = РезультатЗапроса["ТранспортныеСредства"].Выгрузить();
	//@skip-warning
	МестаПерегрузки = РезультатЗапроса["МестаПерегрузки"].Выгрузить();
	//@skip-warning
	СвязанныеДокументы = РезультатЗапроса["СвязанныеДокументы"].Выгрузить();
	//@skip-warning
	СвязанныеДокументыПрочие = РезультатЗапроса["СвязанныеДокументыПрочие"].Выгрузить();
	//@skip-warning
	ДокументыСертификации = РезультатЗапроса["ДокументыСертификации"].Выгрузить();
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	АбстрактнаяОперация = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРасчетСтатуса;
	
	АбстрактноеСообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(Шапка, АбстрактнаяОперация, НомерВерсии);
	АбстрактноеСообщениеXML.ТребуетсяПодписание = Ложь;
	
	ЭтоЗерно = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно;
	Если ЭтоЗерно Тогда
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_sdiz");
		ИмяСвойстваЗапроса = "RequestCreateSDIZ";
	Иначе
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_gpb_sdiz");
		ИмяСвойстваЗапроса = "RequestCreateGpbSDIZ";
	КонецЕсли;
	
	РеквизитыОрганизаций = ДанныеКонтрагентовОрганизацийПриОформленииСДИЗ(Шапка, Перевозчики, Товары);
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		ОформлениеСДИЗXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапроса);
		
		ЭлементСДИЗXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "OperationImportRF", ОформлениеСДИЗXDTO);
		
		Если Шапка.Перевозка Тогда
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO, "OperationSDIZ", "SHIPPING", АбстрактноеСообщениеXML);
		Иначе
			Если Шапка.Приемка Тогда
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO, "OperationSDIZ", "ACCEPTANCE", АбстрактноеСообщениеXML);
			КонецЕсли;
		КонецЕсли;
		
		// Shipping 
		ДанныеЗаполнения = Новый Структура;
		
		ДанныеЗаполнения.Вставить("РеквизитыОрганизаций", РеквизитыОрганизаций);
		ДанныеЗаполнения.Вставить("Шапка",                Шапка);
		ДанныеЗаполнения.Вставить("Перевозчики",          Перевозчики);
		ДанныеЗаполнения.Вставить("МестаПерегрузки",      МестаПерегрузки);
		ДанныеЗаполнения.Вставить("ТранспортныеСредства", ТранспортныеСредства);
		ДанныеЗаполнения.Вставить("СтрокаТовары",         СтрокаТовары);
		
		ЭлементПеревозкаXDTO = ПеревозкаОформлениеСДИЗXDTO(ДанныеЗаполнения, ЭлементСДИЗXDTO, ПространствоИмен, АбстрактноеСообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO,  "Shipping", ЭлементПеревозкаXDTO, АбстрактноеСообщениеXML);
		
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ОформлениеСДИЗXDTO, "OperationImportRF", ЭлементСДИЗXDTO, АбстрактноеСообщениеXML);
		
		// AdditionalInformationImportExport
		ДопСведенияИмпортЭкспортXDTO = ДополнительныеСведенияИмпортЭкспортXDTO(ДанныеЗаполнения, ЭлементСДИЗXDTO, ПространствоИмен, АбстрактноеСообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO,  "AdditionalInformationImportExport", ДопСведенияИмпортЭкспортXDTO, АбстрактноеСообщениеXML);
		
		ИмяПоляНомерПартии = ИнтеграцияЗЕРНОСлужебный.ИмяПоляНомерПартииПоВидуПродукции(Шапка.ВидПродукции);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ОформлениеСДИЗXDTO, ИмяПоляНомерПартии, СтрокаТовары.НомерПартии, АбстрактноеСообщениеXML);
		
		ЗаполнитьДокументыСертификации(
			ОформлениеСДИЗXDTO,
			ДокументыСертификации,
			СтрокаТовары.Идентификатор,
			ПространствоИмен,
			АбстрактноеСообщениеXML);
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(Шапка, Шапка.Операция, НомерВерсии);
		СообщениеXML.ЗагружатьДо         = АбстрактноеСообщениеXML.Идентификатор;
		СообщениеXML.ИдентификаторСтроки = СтрокаТовары.Идентификатор;
		ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, АбстрактноеСообщениеXML);
		
		СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
			ОформлениеСДИЗXDTO, ПространствоИмен, ИмяСвойстваЗапроса,
			ДополнительныеПараметры.ПараметрыОбмена);
		СообщенияXML.Добавить(СообщениеXML);
		
	КонецЦикла;
	
	Если АбстрактноеСообщениеXML.Ошибки.Количество() Тогда
		СообщенияXML = Новый Массив;
	КонецЕсли;
	
	СообщенияXML.Добавить(АбстрактноеСообщениеXML);
	Возврат СообщенияXML;
	
КонецФункции

Функция ОформлениеСДИЗЭлеватор(Шапка, РезультатЗапроса, ДополнительныеПараметры)
	
	СообщенияXML = Новый Массив;
	
	//@skip-warning
	Товары = РезультатЗапроса["Товары"].Выгрузить();
	Товары.Индексы.Добавить("Идентификатор");
	
	//@skip-warning
	УслугиЭлеватора = РезультатЗапроса["УслугиЭлеватора"].Выгрузить();
	
	//@skip-warning
	ДокументыСертификации = РезультатЗапроса["ДокументыСертификации"].Выгрузить();
	
	//@skip-warning
	ИсходныеПартии = РезультатЗапроса["ИсходныеПартии"].Выгрузить();
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	АбстрактнаяОперация = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРасчетСтатуса;
	
	АбстрактноеСообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(Шапка, АбстрактнаяОперация, НомерВерсии);
	АбстрактноеСообщениеXML.ТребуетсяПодписание = Ложь;
	
	ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_sdiz");
	ИмяСвойстваЗапроса = "RequestCreateSDIZElevator";
	
	Если Шапка.Приемка Тогда
		
		ИсходныеПартииДокумента = Новый Соответствие;
		
		Для Каждого СтрокаТаблицы Из ИсходныеПартии Цикл
		
			ИсходнаяПартия = Новый Структура();
			
			ИсходнаяПартия.Вставить("ВладелецПартии",      СтрокаТаблицы.ВладелецПартии);
			ИсходнаяПартия.Вставить("Местоположение",      СтрокаТаблицы.Местоположение);
			ИсходнаяПартия.Вставить("ОКПД2",               СтрокаТаблицы.ОКПД2);
			ИсходнаяПартия.Вставить("КодТНВЭД",            СтрокаТаблицы.КодТНВЭД);
			ИсходнаяПартия.Вставить("Ссылка",              СтрокаТаблицы.ИсходнаяПартия);
			ИсходнаяПартия.Вставить("ГодУрожая",           СтрокаТаблицы.ГодУрожая);
			ИсходнаяПартия.Вставить("НазначениеПартии",    СтрокаТаблицы.НазначениеПартии);
			ИсходнаяПартия.Вставить("ЦельИспользования",   СтрокаТаблицы.ЦельИспользования);
			ИсходнаяПартия.Вставить("Элеватор",            СтрокаТаблицы.Элеватор);
			ИсходнаяПартия.Вставить("Производитель",       СтрокаТаблицы.Производитель);
			ИсходнаяПартия.Вставить("ДатаИзготовления",    СтрокаТаблицы.ДатаИзготовления);
			
			ИсходнаяПартия.Вставить("ПотребительскиеСвойства", Новый Массив);
			
			Для Каждого СтрокаТаблицыПотребительскиеСвойства Из СтрокаТаблицы.ПотребительскиеСвойства Цикл
				ДанныеСвойства = Новый Структура("ПотребительскоеСвойство,Значение");
				ЗаполнитьЗначенияСвойств(ДанныеСвойства, СтрокаТаблицыПотребительскиеСвойства);
				ИсходнаяПартия.ПотребительскиеСвойства.Добавить(ДанныеСвойства);
			КонецЦикла;
			
			ИсходныеПартииДокумента.Вставить(СтрокаТаблицы.Идентификатор, ИсходнаяПартия);
		
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		ПараметрыЗапроса = Новый Структура;
		
		ОформлениеСДИЗXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапроса);
		ЭлементСДИЗXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "OperationSDIZElevator", ОформлениеСДИЗXDTO);
		
		Если Шапка.Приемка Тогда
			
			ОперацияСДИЗXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "AcceptanceElevator", ЭлементСДИЗXDTO);
			
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ОперацияСДИЗXDTO, "dateDogovor", Формат(Шапка.ДатаДоговораХранения, "ДФ=yyyy-MM-dd;"), АбстрактноеСообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ОперацияСДИЗXDTO, "numberDogovor", Шапка.НомерДоговораХранения, АбстрактноеСообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ОперацияСДИЗXDTO, "storageArea", Шапка.ЗакрепленнаяПлощадь, АбстрактноеСообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ОперацияСДИЗXDTO, "storagePeriod", Шапка.СрокХранения, АбстрактноеСообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ОперацияСДИЗXDTO, "storageConditions", Шапка.УсловияХранения, АбстрактноеСообщениеXML);
			
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ОперацияСДИЗXDTO, "Operation", "ACCEPTANCE", АбстрактноеСообщениеXML);
			
			ТипХраненияXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "StorageType", ОперацияСДИЗXDTO);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ТипХраненияXDTO, "code", Шапка.ТипХранения, АбстрактноеСообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ОперацияСДИЗXDTO, "StorageType", ТипХраненияXDTO, АбстрактноеСообщениеXML);
			
			МестоХраненияXDTO = ИнтеграцияЗЕРНОСлужебный.АдресРФXDTO(Шапка.МестоХранения, Шапка.МестоХраненияСтрокой, АбстрактноеСообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ОперацияСДИЗXDTO, "StoragePlace", МестоХраненияXDTO, АбстрактноеСообщениеXML);
			
			Для Каждого СтрокаУслуги Из УслугиЭлеватора Цикл
				УслугиХраненияXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "ElevatorService", ОперацияСДИЗXDTO);
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
					УслугиХраненияXDTO, "code", СтрокаУслуги.ИдентификаторУслуги, АбстрактноеСообщениеXML);
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ОперацияСДИЗXDTO, "ElevatorService", УслугиХраненияXDTO, АбстрактноеСообщениеXML);
			КонецЦикла;
			
			Если Шапка.ПеремещениеПартийЗерна Тогда
				
				ПеремещениеXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Moving", ОперацияСДИЗXDTO);
				МестоХраненияПеремещенияXDTO = ИнтеграцияЗЕРНОСлужебный.АдресРФXDTO(
					Шапка.МестоХраненияПриПеремещении, Шапка.МестоХраненияПриПеремещенииСтрокой, АбстрактноеСообщениеXML);
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ПеремещениеXDTO, "MovingStoragePlace", МестоХраненияПеремещенияXDTO, АбстрактноеСообщениеXML);
				
				ТипХраненияXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "StorageType", ПеремещениеXDTO);
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ТипХраненияXDTO, "code", Шапка.ТипХраненияПриПеремещении, АбстрактноеСообщениеXML);
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ПеремещениеXDTO, "StorageType", ТипХраненияXDTO, АбстрактноеСообщениеXML);
				
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
					ПеремещениеXDTO, "movingDate", Формат(Шапка.ДатаПеремещения, "ДФ=yyyy-MM-dd;"), АбстрактноеСообщениеXML);
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
					ПеремещениеXDTO, "movingStorageConditions", Шапка.УсловияХраненияПриПеремещении, АбстрактноеСообщениеXML);
				
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ОперацияСДИЗXDTO, "Moving", ПеремещениеXDTO, АбстрактноеСообщениеXML);
				
			КонецЕсли;
			
			ПараметрыЗапроса.Вставить("ИсходнаяПартия",  ИсходныеПартииДокумента[СтрокаТовары.Идентификатор]);
			
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO, "AcceptanceElevator", ОперацияСДИЗXDTO, АбстрактноеСообщениеXML);
			
		ИначеЕсли Шапка.Отгрузка Тогда
			
			ОперацияСДИЗXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "ShipmentElevator", ЭлементСДИЗXDTO);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ОперацияСДИЗXDTO, "Operation", "SHIPMENT", АбстрактноеСообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO,  "ShipmentElevator", ОперацияСДИЗXDTO, АбстрактноеСообщениеXML);
			
		Иначе
			
			СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
			СообщениеXML.Операция               = Шапка.Операция;
			СообщениеXML.СсылкаНаОбъект         = Шапка.Ссылка;
			СообщениеXML.ДополнительноеОписание = СтрШаблон(НСтр("ru = 'по документу %1'"), Шапка.Ссылка);
			ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Не указан тип операции (приемка или отгрузка).'"));
			СообщенияXML.Добавить(СообщениеXML);
			
			Возврат СообщенияXML;
			
		КонецЕсли;
		
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ОформлениеСДИЗXDTO, "OperationSDIZElevator", ЭлементСДИЗXDTO, АбстрактноеСообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ОформлениеСДИЗXDTO, "lotNumber", СтрокаТовары.НомерПартии, АбстрактноеСообщениеXML);
		
		ЗаполнитьДокументыСертификации(
			ОформлениеСДИЗXDTO,
			ДокументыСертификации,
			СтрокаТовары.Идентификатор,
			ПространствоИмен,
			СообщениеXML);
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(Шапка, Шапка.Операция, НомерВерсии);
		СообщениеXML.ЗагружатьДо         = АбстрактноеСообщениеXML.Идентификатор;
		СообщениеXML.ИдентификаторСтроки = СтрокаТовары.Идентификатор;
		СообщениеXML.ПараметрыЗапроса    = ПараметрыЗапроса;
		ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, АбстрактноеСообщениеXML);
		
		СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
			ОформлениеСДИЗXDTO, ПространствоИмен, ИмяСвойстваЗапроса,
			ДополнительныеПараметры.ПараметрыОбмена);
		СообщенияXML.Добавить(СообщениеXML);
		
	КонецЦикла;
	
	Если АбстрактноеСообщениеXML.Ошибки.Количество() Тогда
		СообщенияXML = Новый Массив;
	КонецЕсли;
	
	СообщенияXML.Добавить(АбстрактноеСообщениеXML);
	Возврат СообщенияXML;
	
КонецФункции

Функция РеализацияОформлениеСДИЗXDTO(ДанныеЗаполнения, ЭлементСДИЗXDTO, ПространствоИмен, СообщениеXML)
	
	ТаблицаИсточникиРеквизитов = ДанныеЗаполнения.РеквизитыОрганизаций;
	Шапка                      = ДанныеЗаполнения.Шапка;
	СвязанныеДокументы         = ДанныеЗаполнения.СвязанныеДокументы;
	
	ИсточникДанных = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
		ТаблицаИсточникиРеквизитов, Шапка.Организация, Шапка.Подразделение);
	
	ЭлементXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Realization", ЭлементСДИЗXDTO);
	ПродавецXDTO = ИнтеграцияЗЕРНОСлужебный.ОрганизацияКонтрагентXDTO(
		ИсточникДанных,
		СообщениеXML,
		СтрШаблон(НСтр("ru = 'Организация %1'"), Шапка.ОрганизацияПредставление));
	
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементXDTO, "Seller", ПродавецXDTO, СообщениеXML);
	
	ИсточникДанных = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
		ТаблицаИсточникиРеквизитов, Шапка.Покупатель, Шапка.ПодразделениеПокупателя);
	
	ПокупательXDTO = ИнтеграцияЗЕРНОСлужебный.ОрганизацияКонтрагентXDTO(
		ИсточникДанных,
		СообщениеXML,
		СтрШаблон(НСтр("ru = 'Покупатель %1'"), Шапка.ПокупательПредставление));
	
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементXDTO, "Buyer", ПокупательXDTO, СообщениеXML);
	
	// DocNumberDateType
	ДокументГПДXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Contract", ЭлементXDTO);
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ДокументГПДXDTO, "number", СокрЛП(Шапка.НомерГПД), СообщениеXML);
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ДокументГПДXDTO, "date", Формат(Шапка.ДатаГПД, "ДФ=yyyy-MM-dd;"), СообщениеXML);
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементXDTO, "Contract", ДокументГПДXDTO, СообщениеXML);
	
	Если СвязанныеДокументы.Количество() Тогда
		
		ПараметрыРасширенияТипаXDTO = Новый Структура("KindDoc", "ИдентификаторТипДокумента");
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьТаблицуДокументНомерДатаXDTO(
			СвязанныеДокументы,
			ПараметрыРасширенияТипаXDTO,
			"ConfirmingDocument",
			ЭлементXDTO,
			ПространствоИмен,
			СообщениеXML);
		
	КонецЕсли;
	
	Если Шапка.ЗакупкаЕИС Тогда
		
		// GovernmentPurchaseType
		ЗакупкаЕИСXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "GovernmentPurchase", ЭлементXDTO);
		
		// DocNumberDateType
		ГосКонтрактXDTO =  ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "GovernmentContract", ЗакупкаЕИСXDTO);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ГосКонтрактXDTO, "number", СокрЛП(Шапка.НомерГосКонтракта), СообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ГосКонтрактXDTO, "date", Формат(Шапка.ДатаГосКонтракта, "ДФ=yyyy-MM-dd;"), СообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ГосКонтрактXDTO, "GovernmentContract", ГосКонтрактXDTO, СообщениеXML);
		
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЗакупкаЕИСXDTO, "numberGovernmentPurchase", СокрЛП(Шапка.НомерЗакупкиЕИС), СообщениеXML);
		
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементXDTO, "GovernmentContract", ЗакупкаЕИСXDTO, СообщениеXML);
		
	КонецЕсли;
	
	Возврат ЭлементXDTO;
	
КонецФункции

Функция ПеревозкаОформлениеСДИЗXDTO(ДанныеЗаполнения, ЭлементСДИЗXDTO, ПространствоИмен, СообщениеXML)
	
	ТаблицаИсточникиРеквизитов = ДанныеЗаполнения.РеквизитыОрганизаций;
	Шапка                = ДанныеЗаполнения.Шапка;
	Перевозчики          = ДанныеЗаполнения.Перевозчики;
	МестаПерегрузки      = ДанныеЗаполнения.МестаПерегрузки;
	ТранспортныеСредства = ДанныеЗаполнения.ТранспортныеСредства;
	СтрокаТовары         = ДанныеЗаполнения.СтрокаТовары;
	
	ЭлементXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Shipping", ЭлементСДИЗXDTO);
	
	ЗаполнитьГрузоотправительXDTO(ЭлементXDTO, Шапка, ТаблицаИсточникиРеквизитов, СообщениеXML);
	
	ПунктОтправленияXDTO = ИнтеграцияЗЕРНОСлужебный.АдресРФПоКлючуАдресовXDTO(
		СтрокаТовары.МестоположениеСтрокой, СтрокаТовары.МестоположениеИндекс,  СообщениеXML);
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементXDTO, "ShipperAddress", ПунктОтправленияXDTO, СообщениеXML);
	
	ЗаполнитьГрузополучательXDTO(ЭлементXDTO, Шапка, ТаблицаИсточникиРеквизитов, СообщениеXML);
	
	ПунктНазначенияXDTO = ИнтеграцияЗЕРНОСлужебный.АдресРФXDTO(Шапка.ПунктНазначения, Шапка.ПунктНазначенияСтрокой, СообщениеXML);
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементXDTO, "ConsigneeAddress", ПунктНазначенияXDTO, СообщениеXML);
	
	Если Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно Тогда
		ЗаполнитьЭлеваторXDTO(
			ЭлементXDTO,
			Шапка.ЭлеваторПолучатель,
			Шапка.ЭлеваторПолучательИдентификатор,
			ПространствоИмен,
			СообщениеXML)
	КонецЕсли;
	
	// CarrierBlockType
	ПеревозчикиXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "CarrierBlock", ЭлементXDTO);
	
	ПараметрыОтбора = Новый Структура("Перевозчик, Подразделение");
	
	Для Каждого СтрокаПеревозчика Из Перевозчики Цикл
		
		ИсточникДанных = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
			ТаблицаИсточникиРеквизитов, СтрокаПеревозчика.Перевозчик, СтрокаПеревозчика.Подразделение);
		
		ПеревозчикXDTO = ИнтеграцияЗЕРНОСлужебный.ОрганизацияКонтрагентXDTO(
			ИсточникДанных,
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Перевозчик %1'"), СтрокаПеревозчика.ПеревозчикПредставление));
		
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ПеревозчикиXDTO, "Carrier", ПеревозчикXDTO, СообщениеXML);
		
		ПараметрыОтбора.Перевозчик    = СтрокаПеревозчика.Перевозчик;
		ПараметрыОтбора.Подразделение = СтрокаПеревозчика.Подразделение;
		
		СтрокиМестПерегрузки = МестаПерегрузки.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаМестаПерегрузки Из СтрокиМестПерегрузки Цикл
			
			//AddressRFType
			АдресXDTO = ИнтеграцияЗЕРНОСлужебный.АдресРФXDTO(СтрокаМестаПерегрузки.Адрес, СтрокаМестаПерегрузки.АдресСтрокой, СообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ПеревозчикиXDTO, "CarrierAddress", АдресXDTO, СообщениеXML);
			
		КонецЦикла;
		
		СтрокиТранспортныхСредств = ТранспортныеСредства.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого СтрокаТС Из СтрокиТранспортныхСредств Цикл
			
			// TransportInfoType
			ТранспортXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "TransportInfo", ПеревозчикиXDTO);
			
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ТранспортXDTO, "TransportCode", Строка(СтрокаТС.ТипТранспорта), СообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ТранспортXDTO, "numberTransport", СтрокаТС.НомерТранспортногоСредства, СообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ТранспортXDTO, "numberContainer", СтрокаТС.НомерАвтомобильногоКонтейнера, СообщениеXML);
			
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ПеревозчикиXDTO, "TransportInfo", ТранспортXDTO, СообщениеXML);
			
		КонецЦикла;
		
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ПеревозчикиXDTO, "Carrier", ПеревозчикXDTO, СообщениеXML);
		
	КонецЦикла;
	
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементXDTO, "CarrierBlock", ПеревозчикиXDTO, СообщениеXML);
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO,  "Shipping", ЭлементXDTO, СообщениеXML);
	
	Возврат ЭлементXDTO;
	
КонецФункции

Функция ДополнительныеСведенияИмпортЭкспортXDTO(ДанныеЗаполнения, ЭлементСДИЗXDTO, ПространствоИмен, СообщениеXML)
	
	ТаблицаИсточникиРеквизитов = ДанныеЗаполнения.РеквизитыОрганизаций;
	Шапка                      = ДанныеЗаполнения.Шапка;
	СтрокаТовары               = ДанныеЗаполнения.СтрокаТовары;
	
	ЭлементXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "AdditionalInformationImportExport", ЭлементСДИЗXDTO);
	
	// В текущей схеме нет ревизитов для НомерТаможеннойДекларации
	
	Если ЗначениеЗаполнено(СтрокаТовары.Лаборатория) Тогда
		ИсточникДанных = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
			ТаблицаИсточникиРеквизитов, СтрокаТовары.Лаборатория);
		ПредставлениеИсточника = СтрШаблон(НСтр("ru = 'Лаборатория %1'"), СтрокаТовары.ЛабораторияПредставление);
	Иначе
		ИсточникДанных = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
			ТаблицаИсточникиРеквизитов, Шапка.Лаборатория);
		ПредставлениеИсточника = СтрШаблон(НСтр("ru = 'Лаборатория %1'"), Шапка.ЛабораторияПредставление);
	КонецЕсли;
	
	ЛабораторияXDTO = ИнтеграцияЗЕРНОСлужебный.ОрганизацияКонтрагентXDTO(
		ИсточникДанных,
		СообщениеXML,
		ПредставлениеИсточника);
	
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементXDTO, "AccreditedLaboratory", ЛабораторияXDTO, СообщениеXML);
	
	ПротоколИспытанийXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "TestProtocol", ЭлементXDTO);
	Если ЗначениеЗаполнено(СтрокаТовары.НомерПротоколаИспытаний) Тогда
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ПротоколИспытанийXDTO, "number", СокрЛП(СтрокаТовары.НомерПротоколаИспытаний), СообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ПротоколИспытанийXDTO, "date", Формат(СтрокаТовары.ДатаПротоколаИспытаний, "ДФ=yyyy-MM-dd;"), СообщениеXML);
	Иначе
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ПротоколИспытанийXDTO, "number", СокрЛП(Шапка.НомерПротоколаИспытаний), СообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ПротоколИспытанийXDTO, "date", Формат(Шапка.ДатаПротоколаИспытаний, "ДФ=yyyy-MM-dd;"), СообщениеXML);
	КонецЕсли;
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементXDTO, "TestProtocol", ПротоколИспытанийXDTO, СообщениеXML);
	
	КонтрактВЭДXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "ContractVED", ЭлементXDTO);
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(КонтрактВЭДXDTO, "number", СокрЛП(Шапка.НомерКонтрактаВЭД), СообщениеXML);
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(КонтрактВЭДXDTO, "date", Формат(Шапка.ДатаКонтрактаВЭД, "ДФ=yyyy-MM-dd;"), СообщениеXML);
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементXDTO, "ContractVED", КонтрактВЭДXDTO, СообщениеXML);
	
	Если ЗначениеЗаполнено(Шапка.ДатаДопСоглашенияВЭД) Тогда
		ДопСоглашениеВЭДXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "AdditionalAgreement", ЭлементXDTO);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ДопСоглашениеВЭДXDTO, "number", СокрЛП(Шапка.НомерДопСоглашенияВЭД), СообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ДопСоглашениеВЭДXDTO, "date", Формат(Шапка.ДатаДопСоглашенияВЭД, "ДФ=yyyy-MM-dd;"), СообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементXDTO, "AdditionalAgreement", ДопСоглашениеВЭДXDTO, СообщениеXML);
	КонецЕсли;
	
	Возврат ЭлементXDTO;
	
КонецФункции

Процедура ЗаполнитьГрузополучательXDTO(ЭлементXDTO, Шапка, ТаблицаИсточникиРеквизитов, СообщениеXML)
	
	Если ЗначениеЗаполнено(Шапка.Грузополучатель) Тогда
		ИсточникДанных = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
			ТаблицаИсточникиРеквизитов, Шапка.Грузополучатель, Шапка.ПодразделениеГрузополучателя);
		ПредставлениеИсточника = СтрШаблон(НСтр("ru = 'Грузополучатель %1'"), Шапка.ГрузополучательПредставление);
	ИначеЕсли Шапка.Реализация И ЗначениеЗаполнено(Шапка.Покупатель) Тогда
		ИсточникДанных = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
			ТаблицаИсточникиРеквизитов, Шапка.Покупатель, Шапка.ПодразделениеПокупателя);
		ПредставлениеИсточника = СтрШаблон(НСтр("ru = 'Покупатель %1'"), Шапка.ПокупательПредставление);
	Иначе
		ИсточникДанных = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
			ТаблицаИсточникиРеквизитов, Шапка.Организация, Шапка.Подразделение);
		ПредставлениеИсточника = СтрШаблон(НСтр("ru = 'Организация %1'"), Шапка.ОрганизацияПредставление);
	КонецЕсли;
	
	ГрузополучательXDTO = ИнтеграцияЗЕРНОСлужебный.ОрганизацияКонтрагентXDTO(
		ИсточникДанных,
		СообщениеXML,
		ПредставлениеИсточника);
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементXDTO, "Consignee", ГрузополучательXDTO, СообщениеXML);
	
КонецПроцедуры

Процедура ЗаполнитьЭлеваторXDTO(ЭлементXDTO, Элеватор, Идентификатор, ПространствоИмен, СообщениеXML)
	
	Если ЗначениеЗаполнено(Элеватор) Тогда
		// ElevatorNumberType
		ЭлеваторXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(
			ПространствоИмен, "ConsigneeElevatorNumber", ЭлементXDTO);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
			ЭлеваторXDTO, "number", Идентификатор, СообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
			ЭлементXDTO, "ConsigneeElevatorNumber", ЭлеваторXDTO, СообщениеXML);
	Конецесли;
	
КонецПроцедуры

Процедура ЗаполнитьГрузоотправительXDTO(ЭлементXDTO, Шапка, ТаблицаИсточникиРеквизитов, СообщениеXML)
	
	Если ЗначениеЗаполнено(Шапка.Грузоотправитель) Тогда
		ИсточникДанных = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
			ТаблицаИсточникиРеквизитов, Шапка.Грузоотправитель, Шапка.ПодразделениеГрузоотправителя);
		ПредставлениеИсточника = СтрШаблон(НСтр("ru = 'Грузоотправитель %1'"), Шапка.ГрузоотправительПредставление);
	Иначе
		ИсточникДанных = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
			ТаблицаИсточникиРеквизитов, Шапка.Организация, Шапка.Подразделение);
		ПредставлениеИсточника = СтрШаблон(НСтр("ru = 'Организация %1'"), Шапка.ОрганизацияПредставление);
	КонецЕсли;
	
	ГрузоотправительXDTO = ИнтеграцияЗЕРНОСлужебный.ОрганизацияКонтрагентXDTO(
		ИсточникДанных,
		СообщениеXML,
		ПредставлениеИсточника);
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементXDTO, "Shipper", ГрузоотправительXDTO, СообщениеXML);
	
КонецПроцедуры

#Область ОбработкаЗаполнения

Процедура ЗаполнитьВСтрокахПартии(СписокСтрокДокумента, ПараметрыЗаполнения, РезультатЗаполнения)
	
	ТаблицаСоответствия = ПараметрыЗаполнения.ТаблицаСоответствия;
	
	Для каждого СтрокаДокумента Из СписокСтрокДокумента Цикл
		
		ОсталосьЗаполнить = СтрокаДокумента.КоличествоЗЕРНО;
		
		Если ЗначениеЗаполнено(СтрокаДокумента.Партия) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",   СтрокаДокумента.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаДокумента.Характеристика);
		Если ЗначениеЗаполнено(СтрокаДокумента.Серия) Тогда
			СтруктураПоиска.Вставить("Серия", СтрокаДокумента.Серия);
		КонецЕсли;
		СписокСтрокСоответствия = ТаблицаСоответствия.НайтиСтроки(СтруктураПоиска);
		
		ЗаполнитьПартииПоСтрокеДокументаИСоответствию(
			СтрокаДокумента,
			СписокСтрокСоответствия,
			ПараметрыЗаполнения,
			ОсталосьЗаполнить,
			РезультатЗаполнения);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПартииПоСтрокеДокументаИСоответствию(СтрокаДокумента, СписокСтрокСоответствия, ПараметрыЗаполнения, ОсталосьЗаполнить, РезультатЗаполнения)
	
	Для каждого СтрокаСоответствие Из СписокСтрокСоответствия Цикл
		
		ЗаполнитьПартиюПоСтрокеДокумента(
			СтрокаДокумента,
			СтрокаСоответствие.Партия,
			ПараметрыЗаполнения,
			ОсталосьЗаполнить,
			РезультатЗаполнения);
			
		Если ОсталосьЗаполнить = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПартиюПоСтрокеДокумента(СтрокаДокумента, Партия, ПараметрыЗаполнения, ОсталосьЗаполнить, РезультатЗаполнения)

	Товары = ПараметрыЗаполнения.Товары;
	ТаблицаОстатки = ПараметрыЗаполнения.ТаблицаОстатки;
	
	Отбор = Новый Структура("Партия", Партия);
	ОстаткиПоПартии = ТаблицаОстатки.НайтиСтроки(Отбор);
	Для Каждого СтрокаОстатки Из ОстаткиПоПартии Цикл
		
		Если СтрокаОстатки.КоличествоЗЕРНО <= 0 Тогда
			Продолжить;
		ИначеЕсли ОсталосьЗаполнить = 0 Тогда
			Прервать;
		КонецЕсли;
		
		// Выделим новую строку если остатка не хватит
		Если СтрокаОстатки.КоличествоЗЕРНО < ОсталосьЗаполнить Тогда
			
			НоваяСтрока = Товары.Вставить(Товары.Индекс(СтрокаДокумента) + 1);
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);
			НоваяСтрока.Партия = СтрокаОстатки.Партия;
			
			Коэффициент = СтрокаОстатки.КоличествоЗЕРНО / НоваяСтрока.КоличествоЗЕРНО;
			НоваяСтрока.КоличествоЗЕРНО = СтрокаОстатки.КоличествоЗЕРНО;
			НоваяСтрока.Количество = НоваяСтрока.Количество * Коэффициент;
			Если ПараметрыЗаполнения.ЗаполнитьОстаткиПартии Тогда
				НоваяСтрока.КоличествоОстатокПартииЗЕРНО = СтрокаОстатки.КоличествоОстатокПартииЗЕРНО;
			КонецЕсли;
			
			СтрокаДокумента.КоличествоЗЕРНО = СтрокаДокумента.КоличествоЗЕРНО - НоваяСтрока.КоличествоЗЕРНО;
			СтрокаДокумента.Количество = СтрокаДокумента.Количество - НоваяСтрока.Количество;
			
			ОсталосьЗаполнить = ОсталосьЗаполнить - СтрокаОстатки.КоличествоЗЕРНО;
			СтрокаОстатки.КоличествоЗЕРНО = 0;
			
			РезультатЗаполнения.ВсегоСтрок = РезультатЗаполнения.ВсегоСтрок + 1;
			
		Иначе
			
			СтрокаДокумента.Партия = СтрокаОстатки.Партия;
			Коэффициент = ОсталосьЗаполнить / СтрокаДокумента.КоличествоЗЕРНО;
			СтрокаДокумента.КоличествоЗЕРНО = ОсталосьЗаполнить;
			СтрокаДокумента.Количество = СтрокаДокумента.Количество * Коэффициент;
			Если ПараметрыЗаполнения.ЗаполнитьОстаткиПартии Тогда
				СтрокаДокумента.КоличествоОстатокПартииЗЕРНО = СтрокаОстатки.КоличествоОстатокПартииЗЕРНО;
			КонецЕсли;
			
			ОсталосьЗаполнить = 0;
			СтрокаОстатки.КоличествоЗЕРНО = СтрокаОстатки.КоличествоЗЕРНО - СтрокаДокумента.КоличествоЗЕРНО;
			
		КонецЕсли;
		
		РезультатЗаполнения.ЗаполненоСтрок = РезультатЗаполнения.ЗаполненоСтрок + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьСообщениеОЗавершенииЗаполненияПартий(РезультатЗаполнения)
	
	ОбновитьСтатус = Ложь;
	
	Если РезультатЗаполнения = Неопределено Тогда
		
		ЗаголовокСообщения = НСтр("ru = 'Заполнение не выполнено'");
		ТекстСообщения = НСтр("ru = 'Требуется заполнить реквизит Номенклатура'");
		КартинкаСообщения = БиблиотекаКартинок.Предупреждение32;
		
	ИначеЕсли РезультатЗаполнения.ВсегоСтрок = 0 Тогда
		
		ЗаголовокСообщения = "";
		ТекстСообщения = НСтр("ru = 'Заполнение не требуется'");
		КартинкаСообщения = БиблиотекаКартинок.Информация32;
		
	ИначеЕсли РезультатЗаполнения.ВсегоСтрок = РезультатЗаполнения.ЗаполненоСтрок Тогда
		
		ЗаголовокСообщения = "";
		ТекстСообщения = НСтр("ru = 'Заполнение успешно завершено'");
		КартинкаСообщения = БиблиотекаКартинок.Успешно32;
		ОбновитьСтатус = Истина;
		
	ИначеЕсли РезультатЗаполнения.ПроблемныхСтрок = РезультатЗаполнения.ВсегоСтрок Тогда
		
		ЧастиСтрок = Новый Массив;
		ЧастиСтрок.Добавить(НСтр("ru = 'Требуется заполнить'"));
		Если РезультатЗаполнения.НоменклатураНеЗаполнена > 0 И РезультатЗаполнения.КоличествоНеЗаполнено > 0 Тогда
			ЧастиСтрок.Добавить(НСтр("ru = 'реквизиты Номенклатура и Количество'"));
		ИначеЕсли РезультатЗаполнения.НоменклатураНеЗаполнена > 0 Тогда
			ЧастиСтрок.Добавить(НСтр("ru = 'реквизит Номенклатура'"));
		ИначеЕсли РезультатЗаполнения.КоличествоНеЗаполнено > 0 Тогда
			ЧастиСтрок.Добавить(НСтр("ru = 'реквизит Количество'"));
		КонецЕсли;
		
		ЗаголовокСообщения = НСтр("ru = 'Заполнение не выполнено'");
		ТекстСообщения = СтрСоединить(ЧастиСтрок, " ");
		КартинкаСообщения = БиблиотекаКартинок.Предупреждение32;
		
	ИначеЕсли РезультатЗаполнения.ЗаполненоСтрок <> 0 Тогда
		
		ЗаголовокСообщения = НСтр("ru = 'Заполнение выполнено частично'");
		
		Если РезультатЗаполнения.ПроблемныхСтрок <> 0 Тогда
			ТекстСообщения = НСтр("ru = 'Недостаточно остатков продукции и не заполнены обязательные реквизиты'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Недостаточно остатков продукции'");
		КонецЕсли; 
		КартинкаСообщения = БиблиотекаКартинок.Предупреждение32;
		
		ОбновитьСтатус = Истина;
		
	Иначе
		
		ЗаголовокСообщения = НСтр("ru = 'Заполнение не выполнено'");
		ТекстСообщения = НСтр("ru = 'Нет остатков продукции'");
		КартинкаСообщения = БиблиотекаКартинок.Предупреждение32;
		
	КонецЕсли;
	
	СообщениеПользователю = Новый Структура;
	СообщениеПользователю.Вставить("ЗаголовокСообщения", ЗаголовокСообщения);
	СообщениеПользователю.Вставить("ТекстСообщения", ТекстСообщения);
	СообщениеПользователю.Вставить("КартинкаСообщения", КартинкаСообщения);
	
	СообщениеПользователю.Вставить("ОбновитьСтатус", ОбновитьСтатус);
	
	РезультатЗаполнения.Вставить("СообщениеПользователю", СообщениеПользователю);
	
КонецПроцедуры

#КонецОбласти

Процедура ИнициализироватьСтруктуруПараметрыСообщенияДляСопоставленияПартии(ПараметрыЗапроса)
	
	ПараметрыЗапроса.Вставить("Местоположение");
	ПараметрыЗапроса.Вставить("ВладелецПартии");
	ПараметрыЗапроса.Вставить("Организация");
	ПараметрыЗапроса.Вставить("Производитель");
	ПараметрыЗапроса.Вставить("Элеватор");
	
КонецПроцедуры

Процедура ЗаполнитьДокументыСертификации(ОбъектXDTOРодитель, ДокументыСертификации, ИдентификаторСтроки, ПространствоИмен, СообщениеXML)
	
	ПараметрыОтбораПоСтроке = Новый Структура("ИдентификаторСтрокиТоваров", ИдентификаторСтроки);
	ИсточникДанных = ДокументыСертификации.НайтиСтроки(ПараметрыОтбораПоСтроке);
	
	Для Каждого ДокументСертификации Из ИсточникДанных Цикл
		
		Если ДокументСертификации.ТипДокумента = Справочники.КлассификаторНСИЗЕРНО.ДокументНаПартиюДекларацияСоответствия Тогда
			
			ДекларацияXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "DeclarationOfConformit", ОбъектXDTOРодитель);
			
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ДекларацияXDTO, "number", ДокументСертификации.Номер, СообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ДекларацияXDTO, "date", Формат(ДокументСертификации.Дата, "ДФ=yyyy-MM-dd;"), СообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ДекларацияXDTO, "dateEnd",Формат(ДокументСертификации.СрокДействия, "ДФ=yyyy-MM-dd;"), СообщениеXML);
			
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ОбъектXDTOРодитель, "DeclarationOfConformit", ДекларацияXDTO, СообщениеXML);
			
		ИначеЕсли ДокументСертификации.ТипДокумента = Справочники.КлассификаторНСИЗЕРНО.ДокументНаПартиюФитосанитарныйСертификат Тогда
			
			ФитосанитарныйСертификатXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "PhytosanitaryCertificate", ОбъектXDTOРодитель);
			
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ФитосанитарныйСертификатXDTO, "number", ДокументСертификации.Номер, СообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ФитосанитарныйСертификатXDTO, "date", Формат(ДокументСертификации.Дата, "ДФ=yyyy-MM-dd;"), СообщениеXML);
				
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ОбъектXDTOРодитель, "PhytosanitaryCertificate", ФитосанитарныйСертификатXDTO, СообщениеXML);
			
		ИначеЕсли ДокументСертификации.ТипДокумента = Справочники.КлассификаторНСИЗЕРНО.ДокументНаПартиюВетеринарныйСертификат Тогда
			
			ВетеринарныйСертификатXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "VeterinaryCertificate", ОбъектXDTOРодитель);
			
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ВетеринарныйСертификатXDTO, "KindDoc", ДокументСертификации.ВидДокументаВСД, СообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ВетеринарныйСертификатXDTO, "date", Формат(ДокументСертификации.Дата, "ДФ=yyyy-MM-dd;"), СообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ВетеринарныйСертификатXDTO, "number", ДокументСертификации.Номер, СообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ВетеринарныйСертификатXDTO, "series", ДокументСертификации.СерияВСД, СообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ВетеринарныйСертификатXDTO, "uuid", ДокументСертификации.ИдентификаторПроисхожденияВЕТИССтрокой, СообщениеXML);
			
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ОбъектXDTOРодитель, "VeterinaryCertificate", ВетеринарныйСертификатXDTO, СообщениеXML);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТребуетсяСформироватьПартии(Документ)
	
	Результат = Ложь;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ОформлениеСДИЗЗЕРНО") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ОформлениеСДИЗЗЕРНОТовары.Ссылка.Проведен КАК Проведен, 
		|	ОформлениеСДИЗЗЕРНОТовары.Партия КАК Партия,
		|	ОформлениеСДИЗЗЕРНОТовары.КоличествоЗЕРНО КАК КоличествоПоДокументу
		|ПОМЕСТИТЬ ПартииКПолучениюОстатков
		|ИЗ
		|	Документ.ОформлениеСДИЗЗЕРНО.Товары КАК ОформлениеСДИЗЗЕРНОТовары
		|ГДЕ
		|	ОформлениеСДИЗЗЕРНОТовары.Ссылка = &Ссылка
		|	И ОформлениеСДИЗЗЕРНОТовары.ВыделеннаяПартия = ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
		|	И ОформлениеСДИЗЗЕРНОТовары.Партия <> ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
		|ИНДЕКСИРОВАТЬ ПО
		|	Партия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПартииКПолучениюОстатков.Проведен                КАК Проведен,
		|	ПартииКПолучениюОстатков.Партия                  КАК Партия,
		|	ПартииКПолучениюОстатков.КоличествоПоДокументу   КАК КоличествоПоДокументу,
		|	ЕстьNULL(ОстаткиПартийЗЕРНОПоДокументу.ВОбработкеЗЕРНО, 0)    КАК КоличествоЗаблокировано,
		|	ЕстьNULL(ОстаткиПартийЗЕРНООстатки.КоличествоЗЕРНООстаток, 0) КАК КоличествоОстаток
		|ИЗ
		|	ПартииКПолучениюОстатков КАК ПартииКПолучениюОстатков
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиПартийЗЕРНО.Остатки(, Партия В
		|			(ВЫБРАТЬ
		|				ПартииКПолучениюОстатков.Партия КАК Партия
		|			ИЗ
		|				ПартииКПолучениюОстатков)) КАК ОстаткиПартийЗЕРНООстатки
		|		ПО ПартииКПолучениюОстатков.Партия = ОстаткиПартийЗЕРНООстатки.Партия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиПартийЗЕРНО КАК ОстаткиПартийЗЕРНОПоДокументу
		|			ПО ПартииКПолучениюОстатков.Партия = ОстаткиПартийЗЕРНОПоДокументу.Партия
		|			И ОстаткиПартийЗЕРНОПоДокументу.Регистратор = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Документ);
		ТаблицаОстатковПартий = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаОстатокПартии Из ТаблицаОстатковПартий Цикл
			
			// Если документ проведен, то перед формированием СДИЗ есть КоличествоЗаблокировано.
			// Если документ не проведен, то сравниваем остаток в регистре и данные документа.
			Если (СтрокаОстатокПартии.Проведен И СтрокаОстатокПартии.КоличествоЗаблокировано > 0
				Или Не СтрокаОстатокПартии.Проведен)
				И СтрокаОстатокПартии.КоличествоОстаток <> СтрокаОстатокПартии.КоличествоПоДокументу Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаТовары Из Документ.Товары Цикл
			
			Если ЗначениеЗаполнено(СтрокаТовары.Партия)
				И СтрокаТовары.КоличествоЗЕРНО <> СтрокаТовары.КоличествоОстатокПартииЗЕРНО
				И Не ЗначениеЗаполнено(СтрокаТовары.ВыделеннаяПартия) Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
