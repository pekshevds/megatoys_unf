#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	ИсправленныйДокумент = ОбъектКопирования.Ссылка;
	ОтключитьПроверкиПроведения = Ложь;
	ХранилищеXML                = Неопределено;
	ДатаОтправки                = '00010101';
	ИдентификаторСообщения      = "";
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание, ТекстЗаполнения, СтандартнаяОбработка)
	
	АвтозаполнениеПериодовОплаты = Истина;
	
	СсылкаОснования = Основание;
	ПричинаНетрудоспособности = Неопределено;
	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		Если Основание.Свойство("Действие")
			И Основание.Действие = "Исправить"
			И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.ИсправленияДокументов") Тогда
			МодульИсправлениеДокументовЗарплатаКадры = ОбщегоНазначения.ОбщийМодуль("ИсправлениеДокументовЗарплатаКадры");
			МодульИсправлениеДокументовЗарплатаКадры.СкопироватьДокумент(
				ЭтотОбъект,
				Основание.Ссылка,
				,
				,
				Основание);
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание);
			СсылкаОснования = ОбщегоНазначенияБЗК.ЗначениеСвойства(Основание, "Основание");
			Основание.Свойство("ПричинаНетрудоспособности", ПричинаНетрудоспособности);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(СсылкаОснования) = Тип("СправочникСсылка.Сотрудники") Тогда
		Сотрудник = СсылкаОснования;
	ИначеЕсли ТипЗнч(СсылкаОснования) = Тип("ДокументСсылка.ВходящийЗапросФССДляРасчетаПособия") Тогда
		ВходящийЗапрос = СсылкаОснования;
	ИначеЕсли Метаданные().Реквизиты.ПервичныйДокумент.Тип.СодержитТип(ТипЗнч(СсылкаОснования))
		И ЗначениеЗаполнено(СсылкаОснования) Тогда
		ПервичныйДокумент = СсылкаОснования;
	КонецЕсли;
	
	ЗначенияДляЗаполнения = Новый Структура("Ответственный");
	ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ЗначенияДляЗаполнения);
	
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		КадровыеДанные = КадровыеДанныеСотрудника();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, КадровыеДанные);
	КонецЕсли;
	Если ЗначениеЗаполнено(ВходящийЗапрос) Тогда
		ЗаполнитьПервичныеДанныеИзВходящегоЗапроса(Ложь);
		ПараметрыФиксации = Документы.ОтветНаЗапросФССДляРасчетаПособия.ПараметрыФиксацииВторичныхДанных();
		ДополнитьДаннымиВходящегоЗапроса(ПараметрыФиксации, Истина);
		ЗаполнитьДанныеОрганизации(ПараметрыФиксации);
		ЗаполнитьКадровыеДанныеСотрудника(ПараметрыФиксации);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПервичныйДокумент) Тогда
		ПараметрыФиксации = Документы.ОтветНаЗапросФССДляРасчетаПособия.ПараметрыФиксацииВторичныхДанных();
		ЗаполнитьДанныеИзПервичногоДокумента(ПараметрыФиксации, Ложь);
	КонецЕсли;
	ЗаполнитьДатуНачалаСобытия(Ложь);
	Если Не ЗначениеЗаполнено(ВидПособия) И ЗначениеЗаполнено(ПричинаНетрудоспособности) Тогда
		ВидПособия = Перечисления.ПособияНазначаемыеФСС.НайтиПоПричинеНетрудоспособности(ПричинаНетрудоспособности);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ВходящийЗапрос) Тогда
		Если Не ЗначениеЗаполнено(ФизическоеЛицо) И ЗначениеЗаполнено(Сотрудник) Тогда
			ЗаполнитьКадровыеДанныеСотрудника(Ложь);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ГоловнаяОрганизация) И ЗначениеЗаполнено(Организация) Тогда
			ЗаполнитьДанныеОрганизации(Ложь);
		КонецЕсли;
		ЗаполнитьВходящийЗапросПоПервичнымДанным();
	КонецЕсли;
	
	ОбновитьВторичныеДанные();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	ПроверяемыеРеквизиты.Очистить();
	ПроверяемыеРеквизиты.Добавить("Дата");
	ПроверяемыеРеквизиты.Добавить("Организация");
	ПроверяемыеРеквизиты.Добавить("НомерПроцесса");
	ПроверяемыеРеквизиты.Добавить("ВходящийЗапросИдентификатор");
	
	Если ОтказВНазначенииПособия Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "ОтказВНазначенииПособияПричина");
	Иначе
		ПроверяемыеРеквизиты.Добавить("ВидПособия");
		СведенияОВидеПособия = СЭДОФСС.СведенияОВидеПособия(ВидПособия);
		Особенности = Документы.ОтветНаЗапросФССДляРасчетаПособия.ОсобенностиВыгрузки(ЭтотОбъект);
		Если СведенияОВидеПособия.ЭтоОбычныйБольничный
			Или СведенияОВидеПособия.ЭтоНСПЗ Тогда
			ПроверитьСведенияОбЭЛН(Отказ);
			ПроверитьСведенияОСтрахователе(Отказ);
			ПроверитьСведенияОЗастрахованномЛице(Отказ, СведенияОВидеПособия, ПроверяемыеРеквизиты);
			ПроверитьСпособВыплаты(Отказ, ПроверяемыеРеквизиты);
			ПроверитьДанныеДляРасчета(Отказ, СведенияОВидеПособия, ПроверяемыеРеквизиты);
			ПроверитьПараметрыНазначения(Отказ, СведенияОВидеПособия, Особенности);
			ПроверитьДанныеНСПЗ(Отказ, СведенияОВидеПособия);
			ПроверитьИзвещение(Отказ);
		ИначеЕсли СведенияОВидеПособия.ЭтоБольничныйПоБиР Тогда
			ПроверитьСведенияОбЭЛН(Отказ);
			ПроверитьСведенияОСтрахователе(Отказ);
			ПроверитьСведенияОЗастрахованномЛице(Отказ, СведенияОВидеПособия, ПроверяемыеРеквизиты);
			ПроверитьСпособВыплаты(Отказ, ПроверяемыеРеквизиты);
			ПроверитьДанныеДляРасчета(Отказ, СведенияОВидеПособия, ПроверяемыеРеквизиты);
			ПроверитьПараметрыНазначения(Отказ, СведенияОВидеПособия, Особенности);
			ПроверитьСведенияОбОтпуске(Отказ);
			ПроверитьИзвещение(Отказ);
		ИначеЕсли СведенияОВидеПособия.ЭтоПособиеПриРождении Тогда
			ПроверитьСведенияОСтрахователе(Отказ);
			ПроверитьСведенияОЗастрахованномЛице(Отказ, СведенияОВидеПособия, ПроверяемыеРеквизиты);
			ПроверитьСпособВыплаты(Отказ, ПроверяемыеРеквизиты);
			ПроверитьДанныеДляРасчета(Отказ, СведенияОВидеПособия, ПроверяемыеРеквизиты);
			ПроверитьПараметрыНазначения(Отказ, СведенияОВидеПособия, Особенности);
			ПроверитьИнформациюОбУсыновленииОпеке(Отказ);
			ПроверитьИнформациюОПередачеНаВоспитание(Отказ);
			ПроверитьИнформациюОРебенкеПособияПриРождении(Отказ);
			ПроверитьИнформациюОДругомРодителе(Отказ);
			ПроверитьИзвещение(Отказ);
		ИначеЕсли СведенияОВидеПособия.ЭтоОтпускПоУходу Тогда
			ПроверитьСведенияОСтрахователе(Отказ);
			ПроверитьСведенияОЗастрахованномЛице(Отказ, СведенияОВидеПособия, ПроверяемыеРеквизиты);
			ПроверитьСпособВыплаты(Отказ, ПроверяемыеРеквизиты);
			ПроверитьДанныеДляРасчета(Отказ, СведенияОВидеПособия, ПроверяемыеРеквизиты);
			ПроверитьПараметрыНазначения(Отказ, СведенияОВидеПособия, Особенности);
			ПроверитьИнформациюОбУсыновленииОпеке(Отказ);
			ПроверитьИнформациюОРебенкеОтпускаПоУходу(Отказ);
			ПроверитьОснованияДляОтпускаПоУходу(Отказ);
			ПроверитьСправкуОНеполученииПособия(Отказ);
			ПроверитьИзвещение(Отказ);
			ПроверитьПрочиеСведенияОтпускаПоУходу(Отказ);
		КонецЕсли;
		Если Исправление Тогда
			ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "ИсправлениеКодПричины");
		КонецЕсли;
	КонецЕсли;
	Если Перерасчет Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "ПерерасчетИдентификаторСтрокиРеестра");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение недостающих полей.
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаСоздания) Тогда
		ДатаСоздания = ТекущаяДата(); // АПК:143 Для фильтрации событий в журнале регистрации требуется дата сервера.
	КонецЕсли;
	
	// Заполнение текста XML.
	ЭтоПроведение = (РежимЗаписи = РежимЗаписиДокумента.Проведение
		Или (Проведен И РежимЗаписи = РежимЗаписиДокумента.Запись));
	Если ЭтоПроведение Тогда
		ТекстXML = Документы.ОтветНаЗапросФССДляРасчетаПособия.ТекстXML(ЭтотОбъект);
	Иначе
		ТекстXML = "";
	КонецЕсли;
	ХранилищеXML = Новый ХранилищеЗначения(ТекстXML, Новый СжатиеДанных(9));
	
	// Чтение реквизитов "До записи" для проверки и подготовки сведений к процедуре ПриЗаписи.
	ЗначенияРеквизитовДоЗаписи = ЗначенияРеквизитовДоЗаписи();
	ДополнительныеСвойства.Вставить("ЗначенияРеквизитовДоЗаписи", ЗначенияРеквизитовДоЗаписи);
	
	// Проверка отсутствия критичных изменений в отправленном документе.
	Если ЗначениеЗаполнено(ИдентификаторСообщения)
		И ЗначениеЗаполнено(ЗначенияРеквизитовДоЗаписи.ФизическоеЛицо)
		И ЗначенияРеквизитовДоЗаписи.ФизическоеЛицо <> ФизическоеЛицо Тогда
		ВызватьИсключение НСтр("ru = 'Недопустимо изменять физическое лицо в отправленном документе.'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	РегистрыСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий.ЗаполнитьПоДокументу(ЭтотОбъект);
	Документы.ВходящийЗапросФССДляРасчетаПособия.ПриЗаписиОтветаНаЗапрос(ЭтотОбъект);
	РегистрыСведений.СведенияОбЭЛН.ПриЗаписиОтветаНаЗапрос(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПередЗаписью

Функция ЗначенияРеквизитовДоЗаписи()
	ИменаРеквизитов = "Дата, НомерЛН, ГоловнаяОрганизация, ФизическоеЛицо, ПометкаУдаления, ВходящийЗапрос, Проведен";
	ЭтоНовый = ЭтоНовый();
	Если ЭтоНовый Тогда
		Значения = ОбщегоНазначенияБЗК.ЗначенияСвойств(ЭтотОбъект, ИменаРеквизитов);
	Иначе
		Значения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);
	КонецЕсли;
	Значения.Вставить("ЭтоНовый", ЭтоНовый);
	Возврат Значения;
КонецФункции

#КонецОбласти

#Область ФиксацияВторичныхДанныхВДокументах

Функция ОбновитьВторичныеДанные(ПараметрыФиксации = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Модифицирован = Ложь;
	
	Если ОбъектЗафиксирован() Тогда
		Возврат Модифицирован;
	КонецЕсли;
	
	Особенности = Документы.ОтветНаЗапросФССДляРасчетаПособия.ОсобенностиВыгрузки(ЭтотОбъект);
	
	Если ПараметрыФиксации = Неопределено Тогда
		ПараметрыФиксации = Документы.ОтветНаЗапросФССДляРасчетаПособия.ПараметрыФиксацииВторичныхДанных(ЭтотОбъект);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ЗаполнитьВерсиюСпецификации(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьПервичныеДанныеИзВходящегоЗапроса(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьПервичныйДокумент(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьДанныеИзПервичногоДокумента(ПараметрыФиксации, Истина) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьДатуНачалаСобытия(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьПриоритеты(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьДанныеОрганизации(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если Особенности.Версия_2_34 И ЗаполнитьСоставителя(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если Особенности.Версия_2_34 И ЗаполнитьКадровыеДанныеСоставителя(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьКадровыеДанныеСотрудника(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьВидДоговора(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьКодСтраныГражданства(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьРазрешениеНаПроживание(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьСпособВыплатыПособия(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьКонтактыФизическогоЛица(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьКодыАдреса(ПараметрыФиксации, "АдресРегистрации", Истина) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьКодыАдреса(ПараметрыФиксации, "АдресПроживания", Ложь) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьКадровыеДанныеРебенка(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ДополнитьДаннымиВходящегоЗапроса(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьКодСтатусаНалогоплательщика(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Возврат Модифицирован;
КонецФункции

Функция ОбъектЗафиксирован() Экспорт
	Возврат Документы.ОтветНаЗапросФССДляРасчетаПособия.ОбъектЗафиксирован(ЭтотОбъект);
КонецФункции

Функция ЗаполнитьПервичныеДанныеИзВходящегоЗапроса(ПараметрыФиксации) Экспорт
	Если Не ЗначениеЗаполнено(ВходящийЗапрос) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РеквизитыЗапроса = ДанныеВходящегоЗапроса();
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ВходящийЗапросИдентификатор", РеквизитыЗапроса.ИдентификаторСообщения);
	Реквизиты.Вставить("НомерПроцесса",               РеквизитыЗапроса.НомерПроцесса);
	Реквизиты.Вставить("Организация",                 РеквизитыЗапроса.Организация);
	Реквизиты.Вставить("Сотрудник",                   РеквизитыЗапроса.Сотрудник);
	Реквизиты.Вставить("Ребенок",                     РеквизитыЗапроса.Ребенок);
	Реквизиты.Вставить("ИзвещениеФССНомер",           РеквизитыЗапроса.ИзвещениеФССНомер);
	Реквизиты.Вставить("ИзвещениеФССДата",            РеквизитыЗапроса.ИзвещениеФССДата);
	Реквизиты.Вставить("ВидПособия",                  РеквизитыЗапроса.ВидПособия);
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЗаполнитьПервичныйДокумент(ПараметрыФиксации)
	ЕстьИзменения = СЭДОФСС.ЗаполнитьПервичныйДокументДляРасчетаПособияФСС(ЭтотОбъект, ПараметрыФиксации);
	Если ЕстьИзменения Тогда
		ДополнительныеСвойства.Удалить("ДанныеПервичногоДокумента");
	КонецЕсли;
	Возврат ЕстьИзменения;
КонецФункции

Функция ЗаполнитьДанныеИзПервичногоДокумента(ПараметрыФиксации, УчитыватьФиксацию)
	Реквизиты = ДанныеПервичногоДокумента();
	Если Реквизиты = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Реквизиты = КоллекцииБЗК.СкопироватьСтруктуру(Реквизиты);
	
	ЕстьИзменения = Ложь;
	
	Если АвтозаполнениеПериодовОплаты И Реквизиты.Свойство("ИсключаемыеПериоды") Тогда
		ИсключаемыеПериодыДоИзменения = ИсключаемыеПериоды.Выгрузить();
		ИсключаемыеПериоды.Загрузить(Реквизиты.ИсключаемыеПериоды);
		ИсключаемыеПериоды.Сортировать("ДатаНачала, ДатаОкончания");
		// Исключаемые периоды должны заполняться только по тем дням, которые приходятся на период оплаты за счет ФСС.
		Если ЗначениеЗаполнено(ОплатаФССДатаНачала) И ЗначениеЗаполнено(ОплатаФССДатаОкончания) Тогда
			ОбратныйИндекс = ИсключаемыеПериоды.Количество();
			Пока ОбратныйИндекс > 0 Цикл
				ОбратныйИндекс = ОбратныйИндекс - 1;
				ИсключаемыйПериод = ИсключаемыеПериоды[ОбратныйИндекс];
				Если ИсключаемыйПериод.ДатаНачала < ОплатаФССДатаНачала Тогда
					ИсключаемыйПериод.ДатаНачала = ОплатаФССДатаНачала;
				КонецЕсли;
				Если ИсключаемыйПериод.ДатаОкончания > ОплатаФССДатаОкончания Тогда
					ИсключаемыйПериод.ДатаОкончания = ОплатаФССДатаОкончания;
				КонецЕсли;
				Если ИсключаемыйПериод.ДатаНачала > ИсключаемыйПериод.ДатаОкончания Тогда
					ИсключаемыеПериоды.Удалить(ИсключаемыйПериод);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		// Определение наличия изменений в исключаемых периодах.
		Если Не ОбщегоНазначенияБЗК.ЗначенияСовпадают(ИсключаемыеПериодыДоИзменения, ИсключаемыеПериоды.Выгрузить()) Тогда
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЕсли;
	Реквизиты.Удалить("ИсключаемыеПериоды");
	
	Если АвтозаполнениеПериодовОплаты И Реквизиты.Свойство("ПериодыПростоя") Тогда
		ПериодыПростояДоИзменения = ПериодыПростоя.Выгрузить();
		ПериодыПростоя.Загрузить(Реквизиты.ПериодыПростоя);
		ПериодыПростоя.Сортировать("ДатаНачала, ДатаОкончания");
		Если Не ОбщегоНазначенияБЗК.ЗначенияСовпадают(ПериодыПростояДоИзменения, ПериодыПростоя.Выгрузить()) Тогда
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЕсли;
	Реквизиты.Удалить("ПериодыПростоя");
	
	Если АвтозаполнениеПериодовОплаты И Реквизиты.Свойство("ПриостановленияТрудовыхДоговоров") Тогда
		ДоИзменения = ПриостановленияТрудовыхДоговоров.Выгрузить();
		ПриостановленияТрудовыхДоговоров.Загрузить(Реквизиты.ПриостановленияТрудовыхДоговоров);
		ПриостановленияТрудовыхДоговоров.Сортировать("ДатаНачала, ДатаОкончания");
		Если Не ОбщегоНазначенияБЗК.ЗначенияСовпадают(ДоИзменения, ПриостановленияТрудовыхДоговоров.Выгрузить()) Тогда
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЕсли;
	Реквизиты.Удалить("ПриостановленияТрудовыхДоговоров");
	
	Если УчитыватьФиксацию Тогда
		Если ФиксацияВторичныхДанныхВДокументах.РеквизитШапкиЗафиксирован(ЭтотОбъект, "Ребенок")
			Или (Реквизиты.Свойство("Ребенок") И ЗначениеЗаполнено(Реквизиты.Ребенок)) Тогда
			КоллекцииБЗК.УдалитьКлючиСтруктуры(Реквизиты, ИменаРеквизитовЗаполняемыхИзРебенка(ПараметрыФиксации));
		КонецЕсли;
		Если ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации) Тогда
			ЕстьИзменения = Истина;
		КонецЕсли;
	Иначе
		Если ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапкиБезУчетаФиксации(ЭтотОбъект, Реквизиты) Тогда
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьИзменения;
КонецФункции

Функция ДанныеПервичногоДокумента()
	Если Не ЗначениеЗаполнено(ПервичныйДокумент) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Реквизиты = ОбщегоНазначенияБЗК.ЗначениеСвойства(ДополнительныеСвойства, "ДанныеПервичногоДокумента");
	Если Реквизиты <> Неопределено Тогда
		Возврат Реквизиты;
	КонецЕсли;
	Реквизиты = Новый Структура;
	
	ДанныеДляРасчетаСреднегоЗаработка = Неопределено;
	
	МенеджерОснования = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ПервичныйДокумент);
	МенеджерОснования.ЗаполнитьОтветНаЗапросФССДляРасчетаПособия(ПервичныйДокумент, ЭтотОбъект, Реквизиты, ДанныеДляРасчетаСреднегоЗаработка);
	
	Если ДанныеДляРасчетаСреднегоЗаработка <> Неопределено Тогда
		ЗаполнитьРеквизитыРасчетаСреднегоЗаработка(Реквизиты, ДанныеДляРасчетаСреднегоЗаработка);
	КонецЕсли;
	
	Если Реквизиты.Свойство("ДоляВремени")
		И Не (ТипЗнч(Реквизиты.ДоляВремени) = Тип("Число")
			И Реквизиты.ДоляВремени > 0
			И Реквизиты.ДоляВремени <= 1) Тогда
		Реквизиты.Удалить("ДоляВремени");
	КонецЕсли;
	Если Реквизиты.Свойство("РайонныйКоэффициент")
		И Не (ТипЗнч(Реквизиты.РайонныйКоэффициент) = Тип("Число")
			И Реквизиты.РайонныйКоэффициент >= 1) Тогда
		Реквизиты.Удалить("РайонныйКоэффициент");
	КонецЕсли;
	Если Реквизиты.Свойство("ПричинаПредоставленияЛьготы")
		И Не (ТипЗнч(Реквизиты.ПричинаПредоставленияЛьготы) = Тип("ПеречислениеСсылка.ОснованияФинансированияПособияФедеральнымБюджетом")
			И ЗначениеЗаполнено(Реквизиты.ПричинаПредоставленияЛьготы)) Тогда
		Реквизиты.Удалить("ПричинаПредоставленияЛьготы");
	КонецЕсли;
	
	ДанныеВходящегоЗапроса = ДанныеВходящегоЗапроса();
	Если ДанныеВходящегоЗапроса <> Неопределено Тогда
		Если ЗначениеЗаполнено(ДанныеВходящегоЗапроса.ВидПособия) Тогда
			Реквизиты.Удалить("ВидПособия");
		КонецЕсли;
		Если ИспользоватьПараметрыРасчетаИзВходящегоЗапроса(ДанныеВходящегоЗапроса, Реквизиты) Тогда
			Реквизиты.Удалить("ПервыйРасчетныйГод");
			Реквизиты.Удалить("ПервыйРасчетныйГодЗаработок");
			Реквизиты.Удалить("ПервыйРасчетныйГодВидЗаработка");
			Реквизиты.Удалить("ВторойРасчетныйГод");
			Реквизиты.Удалить("ВторойРасчетныйГодЗаработок");
			Реквизиты.Удалить("ВторойРасчетныйГодВидЗаработка");
			Реквизиты.Удалить("ЗаменаЛетРасчетногоПериода");
			Если ЗначениеЗаполнено(ДанныеВходящегоЗапроса.КалендарныхДнейРасчетногоПериода) Тогда
				Реквизиты.Удалить("КалендарныхДнейРасчетногоПериода");
			КонецЕсли;
		КонецЕсли;
		Если ИспользоватьСтажИзВходящегоЗапроса(ДанныеВходящегоЗапроса, Реквизиты) Тогда
			Реквизиты.Удалить("СтраховойСтажЛет");
			Реквизиты.Удалить("СтраховойСтажМесяцев");
			Реквизиты.Удалить("НестраховойСтажЛет");
			Реквизиты.Удалить("НестраховойСтажМесяцев");
		КонецЕсли;
		Если ИспользоватьУходЗаНесколькимиДетьмиИзВходящегоЗапроса(ДанныеВходящегоЗапроса, Реквизиты) Тогда
			Реквизиты.Удалить("УходЗаНесколькимиДетьми");
			Реквизиты.Удалить("СреднемесячныйЗаработок");
		КонецЕсли;
		Если ИспользоватьПериодОплатыСФРИзВходящегоЗапроса(ДанныеВходящегоЗапроса, Реквизиты) Тогда
			Реквизиты.Удалить("ОплатаФССДатаНачала");
			Реквизиты.Удалить("ОплатаФССДатаОкончания");
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ДанныеПервичногоДокумента", Реквизиты);
	Возврат Реквизиты;
КонецФункции

Процедура ЗаполнитьРеквизитыРасчетаСреднегоЗаработка(Реквизиты, ДанныеДляРасчетаСреднегоЗаработка)
	
	ПараметрыРасчета      = ДанныеДляРасчетаСреднегоЗаработка.ПараметрыРасчета;
	ДанныеРасчетаСреднего = ДанныеДляРасчетаСреднегоЗаработка.ДанныеРасчетаСреднего;
	
	Реквизиты.Вставить("ДатаНачалаРасчетногоПериода",    ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаНачало);
	Реквизиты.Вставить("ДатаОкончанияРасчетногоПериода", ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаОкончание);
	Реквизиты.Вставить("ПервыйРасчетныйГод",             ПараметрыРасчета.РасчетныеГоды[0]);
	Реквизиты.Вставить("ВторойРасчетныйГод",             ПараметрыРасчета.РасчетныеГоды[1]);
	Реквизиты.Вставить("ЗаменаЛетРасчетногоПериода",     Ложь);
	Реквизиты.Вставить("ПервыйРасчетныйГодЗаработок",    0);
	Реквизиты.Вставить("ВторойРасчетныйГодЗаработок",    0);
	Реквизиты.Вставить("ДоляВремени", УчетПособийСоциальногоСтрахованияКлиентСервер.ДоляНеполногоВремени(ПараметрыРасчета));
	
	Если ЗначениеЗаполнено(ПараметрыРасчета.ДатаНачалаСобытия) Тогда
		Реквизиты.Вставить("ДатаНачалаСобытия", ПараметрыРасчета.ДатаНачалаСобытия);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыРасчета.ДатаНачалаСобытия) И ЗначениеЗаполнено(ПараметрыРасчета.ПорядокРасчета) Тогда
		ПериодРасчетаСреднего = УчетПособийСоциальногоСтрахованияКлиентСервер.ПериодРасчетаСреднегоЗаработкаФСС(
			ПараметрыРасчета.ДатаНачалаСобытия,
			ПараметрыРасчета.ПорядокРасчета);
		
		ПервыйГодПоДатеСобытия = Год(ПериодРасчетаСреднего.ДатаНачала);
		ВторойГодПоДатеСобытия = Год(ПериодРасчетаСреднего.ДатаОкончания);
		
		Если ПервыйГодПоДатеСобытия <> Реквизиты.ПервыйРасчетныйГод
			Или ВторойГодПоДатеСобытия <> Реквизиты.ВторойРасчетныйГод Тогда
			Реквизиты.ЗаменаЛетРасчетногоПериода = Истина;
		КонецЕсли;
	КонецЕсли;
	
	УчитываемыхДнейВКалендарныхГодах = УчетПособийСоциальногоСтрахованияКлиентСервер.УчитываемыхДнейВКалендарныхГодахФСС(
		ПараметрыРасчета,
		ДанныеРасчетаСреднего);
	//ПараметрыРасчета.УчитыватьДниПриостановленияТД = Ложь; // Фонд сам учитыват дни приостановлеения ТД.
	Реквизиты.Вставить("КалендарныхДнейРасчетногоПериода", УчитываемыхДнейВКалендарныхГодах);
	
	СтрокаПоГоду = УчетПособийСоциальногоСтрахованияКлиентСервер.ЭлементКоллекцииПоОтбору(
		ДанныеРасчетаСреднего,
		Новый Структура("РасчетныйГод", Реквизиты.ПервыйРасчетныйГод));
	Если СтрокаПоГоду <> Неопределено Тогда
		Реквизиты.ПервыйРасчетныйГодЗаработок = УчетПособийСоциальногоСтрахованияКлиентСервер.УчитываемыйЗаработокФССПоГоду(
			ПараметрыРасчета,
			СтрокаПоГоду);
	КонецЕсли;
	
	СтрокаПоГоду = УчетПособийСоциальногоСтрахованияКлиентСервер.ЭлементКоллекцииПоОтбору(
		ДанныеРасчетаСреднего,
		Новый Структура("РасчетныйГод", Реквизиты.ВторойРасчетныйГод));
	Если СтрокаПоГоду <> Неопределено Тогда
		Реквизиты.ВторойРасчетныйГодЗаработок = УчетПособийСоциальногоСтрахованияКлиентСервер.УчитываемыйЗаработокФССПоГоду(
			ПараметрыРасчета,
			СтрокаПоГоду);
	КонецЕсли;
	
КонецПроцедуры

Функция ИспользоватьПараметрыРасчетаИзВходящегоЗапроса(ДанныеВходящегоЗапроса, ДанныеПервичногоДокумента)
	Возврат ПриоритетУДанныхВходящегоЗапроса
		И ЗначениеЗаполнено(ДанныеВходящегоЗапроса.ПервыйРасчетныйГод)
		И ЗначениеЗаполнено(ДанныеВходящегоЗапроса.ВторойРасчетныйГод)
		И ?(ДанныеПервичногоДокумента.Свойство("ПервыйРасчетныйГод")
				И ДанныеПервичногоДокумента.Свойство("ВторойРасчетныйГод")
				И ЗначениеЗаполнено(ДанныеПервичногоДокумента.ПервыйРасчетныйГод)
				И ЗначениеЗаполнено(ДанныеПервичногоДокумента.ВторойРасчетныйГод),
			ДанныеВходящегоЗапроса.ПервыйРасчетныйГод = ДанныеПервичногоДокумента.ПервыйРасчетныйГод
				И ДанныеВходящегоЗапроса.ВторойРасчетныйГод = ДанныеПервичногоДокумента.ВторойРасчетныйГод,
			Истина);
КонецФункции

Функция ИспользоватьСтажИзВходящегоЗапроса(ДанныеВходящегоЗапроса, ДанныеПервичногоДокумента)
	Возврат ПриоритетУДанныхВходящегоЗапроса
		И (ЗначениеЗаполнено(ДанныеВходящегоЗапроса.СтраховойСтажЛет)
			Или ЗначениеЗаполнено(ДанныеВходящегоЗапроса.СтраховойСтажМесяцев)
			Или ЗначениеЗаполнено(ДанныеВходящегоЗапроса.НестраховойСтажЛет)
			Или ЗначениеЗаполнено(ДанныеВходящегоЗапроса.НестраховойСтажМесяцев));
КонецФункции

Функция ИспользоватьУходЗаНесколькимиДетьмиИзВходящегоЗапроса(ДанныеВходящегоЗапроса, ДанныеПервичногоДокумента)
	Возврат ПриоритетУДанныхВходящегоЗапроса
		И (ДанныеВходящегоЗапроса.УходЗаНесколькимиДетьми
			Или ЗначениеЗаполнено(ДанныеВходящегоЗапроса.СреднемесячныйЗаработок));
КонецФункции

Функция ИспользоватьПериодОплатыСФРИзВходящегоЗапроса(ДанныеВходящегоЗапроса, ДанныеПервичногоДокумента)
	Возврат ПриоритетУДанныхВходящегоЗапроса
		И ЗначениеЗаполнено(ДанныеВходящегоЗапроса.ОплатаФССДатаНачала)
		И ЗначениеЗаполнено(ДанныеВходящегоЗапроса.ОплатаФССДатаОкончания);
КонецФункции

Функция ЗаполнитьДатуНачалаСобытия(ПараметрыФиксации)
	ДанныеПервичногоДокумента = ДанныеПервичногоДокумента();
	Если Не ЗначениеЗаполнено(ОбщегоНазначенияБЗК.ЗначениеСвойства(ДанныеПервичногоДокумента, "ДатаНачалаСобытия")) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ГоловнаяОрганизация) Или Не ЗначениеЗаполнено(НомерЛН) Тогда
		Возврат Ложь;
	КонецЕсли;
	Реквизиты = Новый Структура("ДатаНачалаСобытия");
	Если ФиксацияВторичныхДанныхВДокументах.РеквизитыШапкиЗафиксированы(ЭтотОбъект, Реквизиты) Тогда
		Возврат Ложь;
	КонецЕсли;
	Реквизиты.ДатаНачалаСобытия = РегистрыСведений.СведенияОбЭЛН.ДатаНачалаСобытия(НомерЛН, ГоловнаяОрганизация);
	Если Не ЗначениеЗаполнено(Реквизиты.ДатаНачалаСобытия) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЗаполнитьПриоритеты(ПараметрыФиксации)
	Реквизиты = Новый Структура("ПриоритетУДанныхВходящегоЗапроса");
	Если Не ЗначениеЗаполнено(ВходящийЗапрос) Тогда
		ФиксацияВторичныхДанныхВДокументах.ОтменитьФиксациюРеквизитаШапки(ЭтотОбъект, "ПриоритетУДанныхВходящегоЗапроса");
		Реквизиты.ПриоритетУДанныхВходящегоЗапроса = Ложь;
		Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ПервичныйДокумент) Тогда
		ФиксацияВторичныхДанныхВДокументах.ОтменитьФиксациюРеквизитаШапки(ЭтотОбъект, "ПриоритетУДанныхВходящегоЗапроса");
		Реквизиты.ПриоритетУДанныхВходящегоЗапроса = Истина;
		Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
	КонецЕсли;
	
	ДанныеВходящегоЗапроса = ДанныеВходящегоЗапроса();
	
	ДатаВходящегоЗапроса = ДанныеВходящегоЗапроса.ДатаСообщения;
	
	Если ЗначениеЗаполнено(ДатаНачалаСобытия) Тогда
		ДатаСобытия = ДатаНачалаСобытия;
	ИначеЕсли ЗначениеЗаполнено(ВходящийЗапрос) Тогда
		ДатаСобытия = ДатаВходящегоЗапроса;
	ИначеЕсли ЗначениеЗаполнено(Дата) Тогда
		ДатаСобытия = Дата;
	Иначе
		ДатаСобытия = ТекущаяДатаСеанса();
	КонецЕсли;
	
	// Дата когда законодательно появилась возможность запрашивать данные СФР для расчета пособий.
	ДатаНачалаИспользованияДанныхСФР = '20230101';
	// Ориентировочная дата когда во входящем запросе появился достаточный объем сведений для расчета пособий.
	ДатаНачалаИспользованияДанныхСФРДляРасчетаПособий = '20230601';
	
	Реквизиты.ПриоритетУДанныхВходящегоЗапроса = ДатаСобытия >= ДатаНачалаИспользованияДанныхСФР
		И ДатаВходящегоЗапроса >= ДатаНачалаИспользованияДанныхСФРДляРасчетаПособий
		И (ЗначениеЗаполнено(ДанныеВходящегоЗапроса.ПервыйРасчетныйГодЗаработок)
			Или ЗначениеЗаполнено(ДанныеВходящегоЗапроса.ВторойРасчетныйГодЗаработок));
	ЕстьИзменения = ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
	
	Если ЕстьИзменения Тогда
		ДополнительныеСвойства.Удалить("ДанныеПервичногоДокумента");
	КонецЕсли;
	
	Возврат ЕстьИзменения;
КонецФункции

Функция ЗаполнитьДанныеОрганизации(ПараметрыФиксации)
	// Головная организация заполняется безусловно, т.к. определяет права.
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
	
	Реквизиты = Новый Структура("Страхователь, НомерСтрахователяФСС, КодПодчиненностиФСС");
	Если ФиксацияВторичныхДанныхВДокументах.РеквизитыШапкиЗафиксированы(ЭтотОбъект, Реквизиты) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ИменаПолей = "НомерСтрахователяФСС, КодПодчиненностиФСС";
		Сведения = СЭДОФСС.СведенияОСтрахователе(Организация, ИменаПолей, Дата);
		Реквизиты.Страхователь         = Сведения.Страхователь;
		Реквизиты.НомерСтрахователяФСС = Сведения.НомерСтрахователяФСС;
		Реквизиты.КодПодчиненностиФСС  = Сведения.КодПодчиненностиФСС;
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЗаполнитьСоставителя(ПараметрыФиксации)
	Реквизиты = Новый Структура("Составитель");
	Если ФиксацияВторичныхДанныхВДокументах.РеквизитыШапкиЗафиксированы(ЭтотОбъект, Реквизиты) Тогда
		Возврат Ложь;
	КонецЕсли;
	УполномоченныйПредставитель = СЭДОФСС.УполномоченныйПредставитель(Организация);
	Реквизиты.Составитель = УполномоченныйПредставитель.ФизическоеЛицо;
	Если Не ЗначениеЗаполнено(Реквизиты.Составитель) И ЗначениеЗаполнено(Ответственный) Тогда
		Реквизиты.Составитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ответственный, "ФизическоеЛицо", Ложь);
	КонецЕсли;
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЗаполнитьКадровыеДанныеСоставителя(ПараметрыФиксации)
	Реквизиты = Новый Структура("СоставительФИО, СоставительТелефон, СоставительЭлектроннаяПочта");
	Если ФиксацияВторичныхДанныхВДокументах.РеквизитыШапкиЗафиксированы(ЭтотОбъект, Реквизиты) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Составитель) Тогда
		ИменаПолей = "ФИО, ТелефонРабочийПредставление, EMailПредставление";
		КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическогоЛица(Ложь, Составитель, ИменаПолей, ТекущаяДатаСеанса());
		Если КадровыеДанные <> Неопределено Тогда
			Реквизиты.СоставительФИО              = КадровыеДанные.ФИО;
			Реквизиты.СоставительТелефон          = КадровыеДанные.ТелефонРабочийПредставление;
			Реквизиты.СоставительЭлектроннаяПочта = КадровыеДанные.EMailПредставление;
		КонецЕсли;
	КонецЕсли;
	
	Если (Не ЗначениеЗаполнено(Реквизиты.СоставительТелефон)
			Или Не ЗначениеЗаполнено(Реквизиты.СоставительЭлектроннаяПочта))
		И ЗначениеЗаполнено(Организация) Тогда
		ИменаПолей = "ТелОрганизации, АдресЭлектроннойПочтыОрганизации";
		СведенияОбОрганизации = СЭДОФСС.СведенияОСтрахователе(Организация, ИменаПолей, ТекущаяДатаСеанса());
		Если Не ЗначениеЗаполнено(Реквизиты.СоставительТелефон) Тогда
			Реквизиты.СоставительТелефон = СведенияОбОрганизации.ТелОрганизации;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Реквизиты.СоставительЭлектроннаяПочта) Тогда
			Реквизиты.СоставительЭлектроннаяПочта = СведенияОбОрганизации.АдресЭлектроннойПочтыОрганизации;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЗаполнитьКадровыеДанныеСотрудника(ПараметрыФиксации)
	Реквизиты = Новый Структура(
	"СотрудникФамилия,
	|СотрудникИмя,
	|СотрудникОтчество,
	|СотрудникДатаРождения,
	|СотрудникГражданство,
	|СотрудникПол,
	|СотрудникСНИЛС,
	|СотрудникИНН,
	|ДоляВремени,
	|РайонныйКоэффициент,
	|ТрудовойДоговорДатаНачала,
	|ТрудовойДоговорДатаОкончания,
	|УдостоверениеЛичностиВид,
	|УдостоверениеЛичностиСерия,
	|УдостоверениеЛичностиНомер,
	|УдостоверениеЛичностиДатаВыдачи,
	|УдостоверениеЛичностиКемВыдан,
	|УдостоверениеЛичностиСрокДействия,
	|СтатусНалогоплательщика,
	|ВнешнееСовместительство,
	|ПричинаПредоставленияЛьготы,
	|ОтношениеКОсобойЗоне,
	|ВидОсобойЗоны");
	ФизическоеЛицо = Неопределено; // Заполняется безусловно, т.к. определяет права.
	
	КадровыеДанные = КадровыеДанныеСотрудника();
	Если КадровыеДанные <> Неопределено Тогда
		ФизическоеЛицо = КадровыеДанные.ФизическоеЛицо; // Заполняется безусловно, т.к. определяет права.
		
		// ФИО, ИНН, СНИЛС, Дата рождения, Гражданство.
		Реквизиты.СотрудникФамилия      = КадровыеДанные.Фамилия;
		Реквизиты.СотрудникИмя          = КадровыеДанные.Имя;
		Реквизиты.СотрудникОтчество     = КадровыеДанные.Отчество;
		Реквизиты.СотрудникГражданство  = КадровыеДанные.Страна;
		Реквизиты.СотрудникДатаРождения = КадровыеДанные.ДатаРождения;
		Реквизиты.СотрудникПол          = КадровыеДанные.Пол;
		Реквизиты.СотрудникСНИЛС        = КадровыеДанные.СтраховойНомерПФР;
		Реквизиты.СотрудникИНН          = КадровыеДанные.ИНН;
		
		// Удостоверение личности.
		Реквизиты.УдостоверениеЛичностиВид          = КадровыеДанные.ДокументВид;
		Реквизиты.УдостоверениеЛичностиСерия        = СокрЛП(КадровыеДанные.ДокументСерия);
		Реквизиты.УдостоверениеЛичностиНомер        = СокрЛП(КадровыеДанные.ДокументНомер);
		Реквизиты.УдостоверениеЛичностиДатаВыдачи   = КадровыеДанные.ДокументДатаВыдачи;
		Реквизиты.УдостоверениеЛичностиКемВыдан     = КадровыеДанные.ДокументКемВыдан;
		Реквизиты.УдостоверениеЛичностиСрокДействия = КадровыеДанные.ДокументСрокДействия;
		
		// Место работы.
		Реквизиты.СтатусНалогоплательщика = КадровыеДанные.СтатусНалогоплательщика;
		Реквизиты.ВнешнееСовместительство = ЭтоВнешнееСовместительство(КадровыеДанные.ВидЗанятости);
		
		Если КадровыеДанные.Свойство("ДоляНеполногоРабочегоВремени") Тогда
			Реквизиты.ДоляВремени = УчетПособийСоциальногоСтрахования.ДоляНеполногоРабочегоВремени(
				КадровыеДанные.ДоляНеполногоРабочегоВремени);
		КонецЕсли;
		Если ЗначениеЗаполнено(КадровыеДанные.РайонныйКоэффициентРФ) Тогда
			Реквизиты.РайонныйКоэффициент = КадровыеДанные.РайонныйКоэффициентРФ;
		КонецЕсли;
		
		// Срочный трудовой договор.
		Если ЗаполнятьТрудовойДоговорИзКадровыхДанных(КадровыеДанные) Тогда
			Реквизиты.ТрудовойДоговорДатаНачала    = КадровыеДанные.ДатаНачала;
			Реквизиты.ТрудовойДоговорДатаОкончания = КадровыеДанные.ДатаОкончания;
		КонецЕсли;
		
		// Льготы.
		Если Реквизиты.Свойство("ПричинаПредоставленияЛьготы") Тогда
			Реквизиты.ПричинаПредоставленияЛьготы = КадровыеДанные.ЛьготаПриНачисленииПособий;
		КонецЕсли;
		Если Реквизиты.Свойство("ОтношениеКОсобойЗоне") Тогда
			Реквизиты.ОтношениеКОсобойЗоне = КадровыеДанные.ОтношениеКОсобойЗоне;
		КонецЕсли;
		Если Реквизиты.Свойство("ВидОсобойЗоны") Тогда
			Реквизиты.ВидОсобойЗоны = КадровыеДанные.ВидОсобойЗоны;
		КонецЕсли;
	КонецЕсли;
	
	Если Реквизиты.РайонныйКоэффициент = Неопределено И ЗначениеЗаполнено(Организация) Тогда
		Реквизиты.РайонныйКоэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "РайонныйКоэффициентРФ");
	КонецЕсли;
	
	Если Реквизиты.ДоляВремени = Неопределено Тогда
		Реквизиты.ДоляВремени = 1;
	Конецесли;
	
	// Удаление полей кадровых данных которые могут заполниться из учетного документа.
	ДанныеПервичногоДокумента = ДанныеПервичногоДокумента();
	Если ДанныеПервичногоДокумента <> Неопределено Тогда
		Для Каждого КлючИЗначение Из Реквизиты Цикл
			Если ДанныеПервичногоДокумента.Свойство(КлючИЗначение.Ключ) Тогда
				Реквизиты.Удалить(КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Удаление полей кадровых данных которые могут заполниться из входящего запроса.
	РеквизитыЗапроса = ДанныеВходящегоЗапроса();
	Если РеквизитыЗапроса <> Неопределено Тогда
		Если ЗначениеЗаполнено(РеквизитыЗапроса.КодСтатусаНалогоплательщика) Тогда
			Реквизиты.Удалить("СтатусНалогоплательщика");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция КадровыеДанныеСотрудника()
	КадровыеДанныеСотрудника = ОбщегоНазначенияБЗК.ЗначениеСвойства(ДополнительныеСвойства, "КадровыеДанные");
	Если КадровыеДанныеСотрудника = Неопределено Тогда
		Если Не ЗначениеЗаполнено(Сотрудник) Тогда
			Возврат Неопределено;
		КонецЕсли;
		ИменаПолей = Документы.ОтветНаЗапросФССДляРасчетаПособия.ИменаПолейТребуемыхКадровыхДанных();
		КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудника(Истина, Сотрудник, ИменаПолей, Дата);
		Если КадровыеДанныеСотрудника = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(КадровыеДанныеСотрудника) = Тип("Структура") Тогда
		Возврат КадровыеДанныеСотрудника;
	КонецЕсли;
	ИменаПолей = Документы.ОтветНаЗапросФССДляРасчетаПособия.ИменаПолейТребуемыхКадровыхДанных();
	КадровыеДанные = Новый Структура(ИменаПолей);
	ЗаполнитьЗначенияСвойств(КадровыеДанные, КадровыеДанныеСотрудника);
	ДополнительныеСвойства.Вставить("КадровыеДанные", КадровыеДанные);
	Возврат КадровыеДанные;
КонецФункции

Функция ЗаполнитьКодСтраныГражданства(ПараметрыФиксации)
	Реквизиты = Новый Структура("КодСтраныГражданства");
	
	Если ЗначениеЗаполнено(СотрудникГражданство) Тогда
		Реквизиты.КодСтраныГражданства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СотрудникГражданство, "Код");
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЗаполнитьРазрешениеНаПроживание(ПараметрыФиксации)
	Реквизиты = Новый Структура("РазрешениеНаПроживаниеВид, РазрешениеНаПроживаниеСерия, РазрешениеНаПроживаниеНомер,
		|РазрешениеНаПроживаниеДатаВыдачи");
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) И СЭДОФСС.ПоказыватьРазрешениеНаПроживание(КодСтраныГражданства) Тогда
		РазрешениеНаПроживание = Документы.СведенияОЗастрахованномЛицеФСС.НайтиРазрешениеНаПроживание(ФизическоеЛицо, Дата);
		Реквизиты.РазрешениеНаПроживаниеВид          = РазрешениеНаПроживание.Вид;
		Реквизиты.РазрешениеНаПроживаниеСерия        = СокрЛП(РазрешениеНаПроживание.Серия);
		Реквизиты.РазрешениеНаПроживаниеНомер        = СокрЛП(РазрешениеНаПроживание.Номер);
		Реквизиты.РазрешениеНаПроживаниеДатаВыдачи   = РазрешениеНаПроживание.ДатаВыдачи;
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЭтоВнешнееСовместительство(ВидЗанятости)
	Возврат ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство;
КонецФункции

Функция ЗаполнитьВидДоговора(ПараметрыФиксации)
	Реквизиты = Новый Структура("ВидДоговораТрудовой, ВидДоговораГПХ", Ложь, Ложь);
	
	ТекущийДоговорФизлица = ТекущийДоговорФизлица();
	Если ТекущийДоговорФизлица <> Неопределено Тогда
		Реквизиты.ВидДоговораТрудовой = ТекущийДоговорФизлица.Трудовой;
		Реквизиты.ВидДоговораГПХ      = ТекущийДоговорФизлица.ГПХ;
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ТекущийДоговорФизлица()
	Если ДополнительныеСвойства.Свойство("ТекущийДоговорФизлица") Тогда // Служебный кэш, соответствующий страхователю.
		Возврат ДополнительныеСвойства.ТекущийДоговорФизлица;
	КонецЕсли;
	Результат = СЭДОФСС.ТекущийДоговорФизлица(ГоловнаяОрганизация, ФизическоеЛицо, ТекущаяДатаСеанса());
	ДополнительныеСвойства.Вставить("ТекущийДоговорФизлица", Результат);
	Возврат Результат;
КонецФункции

Функция ЗаполнитьСпособВыплатыПособия(ПараметрыФиксации)
	// Получение сведений о способах выплаты.
	Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		НастройкиПрямыхВыплат = СпособыПрямыхВыплатФСС.НастройкиСотрудников(Организация, ФизическоеЛицо, Дата);
		СпособПрямыхвыплат    = НастройкиПрямыхВыплат.ТаблицаРезультат[0];
	Иначе
		НастройкиПрямыхВыплат = Неопределено;
		СпособПрямыхвыплат    = Неопределено;
	КонецЕсли;
	// Заполнение первичных сведений о способе выплаты.
	ЕстьИзменения = Ложь;
	РеквизитыСпособа = РеквизитыСпособаПрямыхвыплат(СпособПрямыхвыплат);
	Если ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(РеквизитыСпособа, ЭтотОбъект, ПараметрыФиксации) Тогда
		ЕстьИзменения = Истина;
	КонецЕсли;
	// Заполнение банковских реквизитов.
	РеквизитыБанка = РеквизитыБанка(НастройкиПрямыхВыплат, СпособПрямыхвыплат);
	Если ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(РеквизитыБанка, ЭтотОбъект, ПараметрыФиксации) Тогда
		ЕстьИзменения = Истина;
	КонецЕсли;
	Возврат ЕстьИзменения;
КонецФункции

Функция РеквизитыСпособаПрямыхвыплат(СпособПрямыхвыплат)
	РеквизитыСпособа = Новый Структура("СпособВыплатыПособия, КартаМИР, Банк, НомерСчета, АдресПроживанияВид");
	Если СпособПрямыхвыплат = Неопределено Тогда
		Возврат РеквизитыСпособа;
	КонецЕсли;
	
	ТипыСпособовПрямыхВыплат = СпособыПрямыхВыплатФСС.ТипыСпособовПрямыхВыплат();
	ТипСпособа = ТипыСпособовПрямыхВыплат.Найти(ТипЗнч(СпособПрямыхвыплат.Значение), "Тип");
	Если ТипСпособа = Неопределено Тогда
		Возврат РеквизитыСпособа;
	КонецЕсли;
	
	РеквизитыСпособа.СпособВыплатыПособия = ТипСпособа.СпособВыплатыПособия;
	Если РеквизитыСпособа.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.НаКартуМИР Тогда
		РеквизитыСпособа.КартаМИР           = СпособПрямыхвыплат.Значение;
	ИначеЕсли РеквизитыСпособа.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ЧерезБанк Тогда
		РеквизитыСпособа.Банк               = СпособПрямыхвыплат.Банк;
		РеквизитыСпособа.НомерСчета         = СпособПрямыхвыплат.НомерСчета;
	Иначе
		РеквизитыСпособа.АдресПроживанияВид = СпособПрямыхвыплат.Значение;
	КонецЕсли;
	
	Возврат РеквизитыСпособа;
КонецФункции

Функция РеквизитыБанка(НастройкиПрямыхВыплат, СпособПрямыхвыплат)
	РеквизитыБанка = Новый Структура("БанкНаименование, БанкБИК, БанкКоррСчет");
	Если Не ЗначениеЗаполнено(Банк) Тогда
		Возврат РеквизитыБанка;
	КонецЕсли;
	
	// Определение способа прямых выплат по выбранному банку.
	Если НастройкиПрямыхВыплат <> Неопределено
		И (СпособПрямыхвыплат = Неопределено Или Банк <> СпособПрямыхвыплат.Банк) Тогда
		Найденные = НастройкиПрямыхВыплат.БанковскиеРеквизиты.НайтиСтроки(Новый Структура("Банк, ПометкаУдаления", Банк, Ложь));
		Если Найденные.Количество() = 0 Тогда
			Найденные = НастройкиПрямыхВыплат.БанковскиеРеквизиты.НайтиСтроки(Новый Структура("Банк", Банк));
		КонецЕсли;
		Если Найденные.Количество() = 0 Тогда
			СпособПрямыхвыплат = Неопределено;
		Иначе
			СпособПрямыхвыплат = Найденные[0];
		КонецЕсли;
	КонецЕсли;
	
	// Определение реквизитов банка.
	Если СпособПрямыхвыплат = Неопределено Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Банк, "Наименование, Код, КоррСчет");
		РеквизитыБанка.БанкНаименование = Реквизиты.Наименование;
		РеквизитыБанка.БанкБИК          = Реквизиты.Код;
		РеквизитыБанка.БанкКоррСчет     = Реквизиты.КоррСчет;
	Иначе
		РеквизитыБанка.БанкНаименование = СпособПрямыхвыплат.НаименованиеБанка;
		РеквизитыБанка.БанкБИК          = СпособПрямыхвыплат.БИК;
		РеквизитыБанка.БанкКоррСчет     = СпособПрямыхвыплат.КоррСчет;
	КонецЕсли;
	
	Возврат РеквизитыБанка;
КонецФункции

Функция ЗаполнитьКонтактыФизическогоЛица(ПараметрыФиксации)
	Реквизиты = Новый Структура("АдресРегистрации, АдресПроживания, СотрудникТелефон");
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		АдресРегистрацииВид = КадровыйУчет.ВидКонтактнойИнформацииАдресПоПропискеФизическиеЛица();
		ТелефонДомашнийВид  = КадровыйУчет.ВидКонтактнойИнформацииТелефонДомашнийФизическиеЛица();
		ТелефонМобильныйВид = КадровыйУчет.ВидКонтактнойИнформацииТелефонМобильныйФизическиеЛица();
		
		ВидыКИ = Новый Массив;
		ВидыКИ.Добавить(АдресРегистрацииВид);
		Если ЗначениеЗаполнено(АдресПроживанияВид) Тогда
			ВидыКИ.Добавить(АдресПроживанияВид);
		КонецЕсли;
		ВидыКИ.Добавить(ТелефонДомашнийВид);
		ВидыКИ.Добавить(ТелефонМобильныйВид);
		
		ТаблицаКИ = КонтактнаяИнформацияБЗК.КонтактнаяИнформацияОбъектов(ФизическоеЛицо, , ВидыКИ);
		
		СтрокаКИ = ТаблицаКИ.Найти(АдресРегистрацииВид, "Вид");
		Если СтрокаКИ <> Неопределено Тогда
			Реквизиты.АдресРегистрации = СтрокаКИ.Значение;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АдресПроживанияВид) Тогда
			СтрокаКИ = ТаблицаКИ.Найти(АдресПроживанияВид, "Вид");
			Если СтрокаКИ <> Неопределено Тогда
				Реквизиты.АдресПроживания = СтрокаКИ.Значение;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаКИ = ТаблицаКИ.Найти(ТелефонДомашнийВид, "Вид");
		Если СтрокаКИ <> Неопределено Тогда
			Реквизиты.СотрудникТелефон = СтрокаКИ.Значение;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Реквизиты.СотрудникТелефон) Тогда
			СтрокаКИ = ТаблицаКИ.Найти(ТелефонМобильныйВид, "Вид");
			Если СтрокаКИ <> Неопределено Тогда
				Реквизиты.СотрудникТелефон = СтрокаКИ.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЗаполнитьКодыАдреса(ПараметрыФиксации, ИмяПоляАдрес, ЕстьПолеЗаПределамиРФ)
	Суффиксы = "Индекс, Регион, Район, НаселенныйПункт, Улица, Дом, Корпус, Квартира, ФИАСДом, ФИАСРО";
	Если ЕстьПолеЗаПределамиРФ Тогда
		Суффиксы = Суффиксы + ", ЗаПределамиРФ";
	КонецЕсли;
	Массив = СтрРазделить(Суффиксы, ", ", Ложь);
	ИменаРеквизитов = ИмяПоляАдрес + СтрСоединить(Массив, ", " + ИмяПоляАдрес);
	Реквизиты = Новый Структура(ИменаРеквизитов);
	
	Адрес = ЭтотОбъект[ИмяПоляАдрес];
	Если Не ЗначениеЗаполнено(Адрес) Тогда
		Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("БезПредставлений",               Не ЕстьПолеЗаПределамиРФ);
	ДополнительныеПараметры.Вставить("КодыАдреса",                     Истина);
	ДополнительныеПараметры.Вставить("КодыКЛАДР",                      Ложь);
	ДополнительныеПараметры.Вставить("НаименованиеВключаетСокращение", Истина);
	ДополнительныеПараметры.Вставить("ПроверитьАдрес",                 Ложь);
	СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(Адрес, ДополнительныеПараметры);
	
	ИменаПолей = "Индекс, Регион, Район, НаселенныйПункт, Улица, Дом, Корпус, Строение, Сооружение, Участок, Квартира";
	СтруктураАдреса = КонтактнаяИнформацияБЗК.СвернутьСведенияОбАдресе(СведенияОбАдресе, ИменаПолей);
	СтруктураАдреса.Корпус = КонтактнаяИнформацияБЗК.ПредставлениеКорпусов(СтруктураАдреса, 30);
	СтруктураАдреса.Удалить("Строение");
	СтруктураАдреса.Удалить("Сооружение");
	СтруктураАдреса.Удалить("Участок");
	
	СтруктураАдреса.Вставить("ФИАСДом", Строка(СведенияОбАдресе.ИдентификаторДома));
	СтруктураАдреса.Вставить("ФИАСРО",  Строка(СведенияОбАдресе.ИдентификаторАдресногоОбъекта));
	Если Не ЗначениеЗаполнено(СтруктураАдреса.ФИАСДом)
		И СтруктураАдреса.ФИАСРО <> СведенияОбАдресе.ИдентификаторЗемельногоУчастка Тогда
		СтруктураАдреса.ФИАСДом = Строка(СведенияОбАдресе.ИдентификаторЗемельногоУчастка);
	КонецЕсли;
	
	Если ЕстьПолеЗаПределамиРФ Тогда
		Если СведенияОбАдресе.КодСтраны = "643" Тогда
			ЗаПределамиРФ = "";
		Иначе
			ЗаПределамиРФ = СведенияОбАдресе.Представление;
		КонецЕсли;
		СтруктураАдреса.Вставить("ЗаПределамиРФ", ЗаПределамиРФ);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СтруктураАдреса Цикл
		Реквизиты[ИмяПоляАдрес + КлючИЗначение.Ключ] = КлючИЗначение.Значение;
	КонецЦикла;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЗаполнитьКадровыеДанныеРебенка(ПараметрыФиксации)
	Реквизиты = Новый Структура(ИменаРеквизитовЗаполняемыхИзРебенка(ПараметрыФиксации));
	
	Если ЗначениеЗаполнено(Ребенок) Тогда
		КадровыеДанныеРебенка = СЭДОФСС.КадровыеДанныеРодственника(Ребенок, Истина);
		Реквизиты.РебенокФамилия      = КадровыеДанныеРебенка.Фамилия;
		Реквизиты.РебенокИмя          = КадровыеДанныеРебенка.Имя;
		Реквизиты.РебенокОтчество     = КадровыеДанныеРебенка.Отчество;
		Реквизиты.РебенокДатаРождения = КадровыеДанныеРебенка.ДатаРождения;
		Реквизиты.РебенокСНИЛС        = КадровыеДанныеРебенка.СНИЛС;
		Реквизиты.РебенокКодСвязи     = КадровыеДанныеРебенка.КодСвязи;
		Реквизиты.РебенокПол          = КадровыеДанныеРебенка.Пол;
	ИначеЕсли ЗначениеЗаполнено(ПервичныйДокумент) Или ЗначениеЗаполнено(ВходящийЗапрос) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЗаполнитьКодСтатусаНалогоплательщика(ПараметрыФиксации)
	РеквизитыЗапроса = ДанныеВходящегоЗапроса();
	Если РеквизитыЗапроса <> Неопределено И ЗначениеЗаполнено(РеквизитыЗапроса.КодСтатусаНалогоплательщика) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если ФиксацияВторичныхДанныхВДокументах.РеквизитШапкиЗафиксирован(ЭтотОбъект, "КодСтатусаНалогоплательщика") Тогда
		Возврат Ложь;
	КонецЕсли;
	Реквизиты = Новый Структура("КодСтатусаНалогоплательщика");
	Если ЗначениеЗаполнено(СтатусНалогоплательщика) Тогда
		Реквизиты.КодСтатусаНалогоплательщика = СЭДОФСС.КодСтатусаНалогоплательщика(СтатусНалогоплательщика);
	КонецЕсли;
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ИменаРеквизитовЗаполняемыхИзРебенка(ПараметрыФиксации)
	ИменаПолей = ФиксацияВторичныхДанныхВДокументахКлиентСервер.ИменаПолейПоОснованиямЗаполнения(ПараметрыФиксации);
	Возврат СтрСоединить(ИменаПолей.Ребенок, ", ");
КонецФункции

Процедура ЗаполнитьВходящийЗапросПоПервичнымДанным()
	Если Не ЗначениеЗаполнено(ГоловнаяОрганизация) Или Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Возврат;
	КонецЕсли;
	ЕстьПервичныйДокумент = ЗначениеЗаполнено(ПервичныйДокумент);
	ЕстьНомерЛН           = ЗначениеЗаполнено(НомерЛН);
	Если Не ЕстьПервичныйДокумент И Не ЕстьНомерЛН Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВходящийЗапросФСС.Ссылка КАК Ссылка,
	|	ВходящийЗапросФСС.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.ВходящийЗапросФССДляРасчетаПособия КАК ВходящийЗапросФСС
	|ГДЕ
	|	ВходящийЗапросФСС.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И ВходящийЗапросФСС.ФизическоеЛицо = &ФизическоеЛицо
	|	И ВходящийЗапросФСС.ПервичныйДокумент = &ПервичныйДокумент
	|	И ВходящийЗапросФСС.НомерЛН = &НомерЛН
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПометкаУдаления";
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Если ЕстьПервичныйДокумент Тогда
		Запрос.УстановитьПараметр("ПервичныйДокумент", ПервичныйДокумент);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ВходящийЗапросФСС.НомерЛН = &НомерЛН", "");
	ИначеЕсли ЕстьНомерЛН Тогда
		Запрос.УстановитьПараметр("НомерЛН", НомерЛН);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ВходящийЗапросФСС.ПервичныйДокумент = &ПервичныйДокумент", "");
	Иначе
		Возврат;
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВходящийЗапрос = Выборка.Ссылка;
	КонецЕсли;
КонецПроцедуры

Функция ЗаполнитьВерсиюСпецификации(ПараметрыФиксации)
	ПоддерживаемыеВерсии = Документы.ОтветНаЗапросФССДляРасчетаПособия.ПоддерживаемыеВерсииСпецификации();
	
	Реквизиты = Новый Структура("ВерсияСпецификации");
	Реквизиты.ВерсияСпецификации = ПоддерживаемыеВерсии[ПоддерживаемыеВерсии.Количество() - 1].Значение;
	
	Если ЗначениеЗаполнено(ВходящийЗапрос) Тогда
		РеквизитыЗапроса = ДанныеВходящегоЗапроса();
		ВерсияСпецификацииЗапросаЧислом = СЭДОФСС.ВерсияЧислом(РеквизитыЗапроса.ВерсияСпецификации);
		Для Каждого ЭлементСписка Из ПоддерживаемыеВерсии Цикл
			ВерсияЧислом = СЭДОФСС.ВерсияЧислом(ЭлементСписка.Значение);
			Если ВерсияСпецификацииЗапросаЧислом <= ВерсияЧислом Тогда
				Реквизиты.ВерсияСпецификации = ЭлементСписка.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ДополнитьДаннымиВходящегоЗапроса(ПараметрыФиксации, Принудительно = Ложь)
	Если Не ЗначениеЗаполнено(ВходящийЗапрос) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Реквизиты = Новый Структура;
	РеквизитыЗапроса = ДанныеВходящегоЗапроса();
	
	КадровыеДанные            = ?(Принудительно, Неопределено, КадровыеДанныеСотрудника());
	ДанныеПервичногоДокумента = ?(Принудительно, Неопределено, ДанныеПервичногоДокумента());
	
	Если КадровыеДанные <> Неопределено Тогда
		Если ДанныеПервичногоДокумента = Неопределено Тогда
			ДанныеПервичногоДокумента = КадровыеДанные;
		Иначе
			ДанныеПервичногоДокумента = КоллекцииБЗК.СкопироватьСтруктуру(ДанныеПервичногоДокумента);
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеПервичногоДокумента, КадровыеДанные, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	ИменаПолей = "АктВПроизвольнойФормеДатаВыдачи, АктВПроизвольнойФормеНомер";
	ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	
	ИменаПолей = "АктН1ДатаВыдачи, АктН1Номер";
	ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	
	ИменаПолей = "АктоваяЗаписьОРожденииДата, АктоваяЗаписьОРожденииНомер";
	ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	
	ИменаПолей = "АктПЗДатаВыдачи";
	ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	
	ИменаПолей = "ВидПособия";
	ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	
	ИменаПолей = "ДругойРодительОтсутствует, СправкаОтДругогоРодителяНомер, СправкаОтДругогоРодителяДата";
	ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	
	ИменаПолей = "ЗаменаПослеродовогоОтпускаДата, ЗаменаПослеродовогоОтпускаНомер";
	ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	
	Если РеквизитыЗапроса.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ИнаяОрганизация Тогда
		ИменаПолей = "СпособВыплатыПособия, ИнаяОрганизацияБИК, ИнаяОрганизацияИНН, ИнаяОрганизацияКБК,
		|ИнаяОрганизацияКПП, ИнаяОрганизацияЛицевойСчетОрганизации, ИнаяОрганизацияЛицевойСчетСотрудника,
		|ИнаяОрганизацияНаименование, ИнаяОрганизацияНомерСчетаСтрахователя, ИнаяОрганизацияРегистрационныйНомер";
		ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, Неопределено);
	КонецЕсли;
	
	ИменаПолей = "ИнойДокументОРожденииДатаВыдачи, ИнойДокументОРожденииСерияНомер, ИнойДокументОРожденииСерия, ИнойДокументОРожденииНомер";
	ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	
	Если ЗначениеЗаполнено(РеквизитыЗапроса.КодСтатусаНалогоплательщика) Тогда
		Статус = СЭДОФСС.СтатусНалогоплательщика(РеквизитыЗапроса.КодСтатусаНалогоплательщика);
		Реквизиты.Вставить("КодСтатусаНалогоплательщика", РеквизитыЗапроса.КодСтатусаНалогоплательщика);
		Реквизиты.Вставить("СтатусНалогоплательщика",     Статус);
	КонецЕсли;
	
	ИменаПолей = "НаличиеДокументовОРожденииПредыдущихДетей";
	ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	
	ИменаПолей = "НаличиеРешенияСудаОЛишенииПрав";
	ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	
	ИменаПолей = "НаличиеСвидетельстваОСмертиПредыдущихДетей";
	ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	
	ИменаПолей = "НомерЛН";
	ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	
	ИменаПолей = "ОплатаФССДатаНачала, ОплатаФССДатаОкончания";
	ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	
	ИменаПолей = "ОтпускПоУходуДата, ОтпускПоУходуДатаНачала, ОтпускПоУходуДатаОкончания, ОтпускПоУходуНомер";
	ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	
	ИменаПолей = "ПередачаНаВоспитаниеДата, ПередачаНаВоспитаниеНомер";
	ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	
	ИменаПолей = "ПризнаниеСлучаяСтраховым";
	ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	
	Если Не ЗначениеЗаполнено(Ребенок) Тогда
		ИменаПолей = "РебенокФамилия, РебенокИмя, РебенокОтчество";
		ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
		ИменаПолей = "РебенокДатаРождения, РебенокСНИЛС, РебенокКодСвязи, РебенокОчередность, РебенокПол";
		ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	КонецЕсли;
	
	ИменаПолей = "РешениеСудаНомер, РешениеСудаДатаВыдачи";
	ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	
	ИменаПолей = "УтратаТрудоспобности";
	ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	
	ИменаПолей = "СвидетельствоОРожденииДатаВыдачи, СвидетельствоОРожденииСерияНомер, СвидетельствоОРожденииСерия, СвидетельствоОРожденииНомер";
	ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	
	ИменаПолей = "СотрудникКатегория";
	ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	
	ИменаПолей = "СправкаОНеполученииПособияОтМатериДатаВыдачи, СправкаОНеполученииПособияОтМатериНомер";
	ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	
	ИменаПолей = "СправкаОНеполученииПособияОтОтцаДатаВыдачи, СправкаОНеполученииПособияОтОтцаНомер";
	ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	
	ИменаПолей = "СправкаОНеполученииПособияПоДругомуМестуРаботыДатаВыдачи, СправкаОНеполученииПособияПоДругомуМестуРаботыНомер";
	ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	
	ИменаПолей = "СправкаОРожденииДатаВыдачи, СправкаОРожденииНомер, СправкаОРожденииФорма";
	ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	
	Если ЗначениеЗаполнено(РеквизитыЗапроса.ДоляВремени)
		И (КадровыеДанные = Неопределено Или Не КадровыеДанные.Свойство("ДоляНеполногоРабочегоВремени")) Тогда
		ИменаПолей = "ДоляВремени";
		ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыЗапроса.ПервыйРасчетныйГод)
		И ЗначениеЗаполнено(РеквизитыЗапроса.ВторойРасчетныйГод) Тогда
		ИменаПолей = "ПервыйРасчетныйГод, ПервыйРасчетныйГодЗаработок, ВторойРасчетныйГод, ВторойРасчетныйГодЗаработок,
		|ПервыйРасчетныйГодВидЗаработка, ВторойРасчетныйГодВидЗаработка, ЗаменаЛетРасчетногоПериода";
		ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыЗапроса.СтраховойСтажЛет)
		Или ЗначениеЗаполнено(РеквизитыЗапроса.СтраховойСтажМесяцев)
		Или ЗначениеЗаполнено(РеквизитыЗапроса.НестраховойСтажЛет)
		Или ЗначениеЗаполнено(РеквизитыЗапроса.НестраховойСтажМесяцев) Тогда
		ИменаПолей = "СтраховойСтажЛет, СтраховойСтажМесяцев, НестраховойСтажЛет, НестраховойСтажМесяцев";
		ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыЗапроса.КалендарныхДнейРасчетногоПериода) Тогда
		ИменаПолей = "КалендарныхДнейРасчетногоПериода";
		ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыЗапроса.СреднемесячныйЗаработок) Тогда
		ИменаПолей = "СреднемесячныйЗаработок";
		ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	КонецЕсли;
	
	Если Принудительно Или ЗаполнятьТрудовойДоговорИзВходящегоЗапроса(РеквизитыЗапроса, КадровыеДанные) Тогда
		ИменаПолей = "ТрудовойДоговорДатаНачала, ТрудовойДоговорДатаОкончания";
		ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	КонецЕсли;
	
	ИменаПолей = "УсыновлениеОпекаТип, УсыновлениеОпекаНомер, УсыновлениеОпекаДата";
	ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	
	ИменаПолей = "УходЗаНесколькимиДетьми";
	ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	
	ИменаПолей = "Перерасчет, ПерерасчетИдентификаторСтрокиРеестра";
	ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	
	ИменаПолей = "ЧислитсяУНесколькихСтрахователей, СоставСтрахователейЗаДваГода, МетодНазначенияИВыплатыПособия";
	ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента);
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Процедура ДополнитьСтруктуруДаннымиВходящегоЗапроса(Реквизиты, РеквизитыЗапроса, ИменаПолей, ДанныеПервичногоДокумента = Неопределено)
	СтруктураСвойств = Новый Структура(ИменаПолей);
	// Проверка отсутствия любого из реквизитов в первичном документе.
	Если ДанныеПервичногоДокумента <> Неопределено Тогда
		Для Каждого КлючИЗначение Из СтруктураСвойств Цикл
			Если ДанныеПервичногоДокумента.Свойство(КлючИЗначение.Ключ) Тогда
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// Вставка с контролем наличия реквизита во входящем запросе.
	Для Каждого КлючИЗначение Из СтруктураСвойств Цикл
		Реквизиты.Вставить(КлючИЗначение.Ключ, РеквизитыЗапроса[КлючИЗначение.Ключ]);
	КонецЦикла;
КонецПроцедуры

Функция ДанныеВходящегоЗапроса()
	РеквизитыЗапроса = ОбщегоНазначенияБЗК.ЗначениеСвойства(ДополнительныеСвойства, "РеквизитыЗапроса");
	Если РеквизитыЗапроса <> Неопределено Тогда
		Возврат РеквизитыЗапроса;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ВходящийЗапрос) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ * ИЗ Документ.ВходящийЗапросФССДляРасчетаПособия ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ВходящийЗапрос);
	РеквизитыЗапроса = Запрос.Выполнить().Выгрузить()[0];
	ДополнительныеСвойства.Вставить("РеквизитыЗапроса", РеквизитыЗапроса);
	Возврат РеквизитыЗапроса;
КонецФункции

Функция ЗаполнятьТрудовойДоговорИзКадровыхДанных(КадровыеДанные)
	Возврат ИнформацияОТрудовомДоговореЕстьВКадровыхДанных(КадровыеДанные)
		И КадровыеДанные.СрочныйДоговор = Истина // Может быть Null для непринятых сотрудников.
		И ПериодТрудовогоДоговораУдовлетворяетТребованиям(КадровыеДанные.ДатаНачала, КадровыеДанные.ДатаОкончания);
КонецФункции

Функция ЗаполнятьТрудовойДоговорИзВходящегоЗапроса(РеквизитыЗапроса, КадровыеДанные)
	// Трудовой договор заполняется только в том случае, если в его период попадает случай нетрудоспособности.
	Возврат Не ИнформацияОТрудовомДоговореЕстьВКадровыхДанных(КадровыеДанные)
		И ПериодТрудовогоДоговораУдовлетворяетТребованиям(
			РеквизитыЗапроса.ТрудовойДоговорДатаНачала,
			РеквизитыЗапроса.ТрудовойДоговорДатаОкончания);
КонецФункции

Функция ИнформацияОТрудовомДоговореЕстьВКадровыхДанных(КадровыеДанные)
	Возврат КадровыеДанные <> Неопределено И КадровыеДанные.Свойство("СрочныйДоговор");
КонецФункции

Функция ПериодТрудовогоДоговораУдовлетворяетТребованиям(ДатаНачалаДоговора, ДатаОкончанияДоговора)
	// ДатаНачалаСобытия может быть пустой.
	Возврат ЗначениеЗаполнено(ДатаНачалаДоговора)
		И ЗначениеЗаполнено(ДатаОкончанияДоговора)
		И ДатаОкончанияДоговора >= ДатаНачалаСобытия
		И ДобавитьМесяц(ДатаНачалаДоговора, 6) >= ДатаОкончанияДоговора;
КонецФункции

#КонецОбласти

#Область ОбработкаПроверкиЗаполнения

Процедура ПроверитьСведенияОбЭЛН(Отказ)
	ПроверкиБЗК.ПроверитьНомерЛН(Отказ, ЭтотОбъект, "НомерЛН");
КонецПроцедуры

Процедура ПроверитьСведенияОСтрахователе(Отказ)
	ПроверкиБЗК.ПроверитьРегистрационныйНомерФСС(Отказ, ЭтотОбъект, "НомерСтрахователяФСС");
КонецПроцедуры

Процедура ПроверитьСведенияОЗастрахованномЛице(Отказ, СведенияОВидеПособия, ПроверяемыеРеквизиты)
	ЭтоРезидент = (КодСтраныГражданства = "643");
	
	ПроверяемыеРеквизиты.Добавить("СотрудникФамилия");
	ПроверяемыеРеквизиты.Добавить("СотрудникИмя");
	ПроверяемыеРеквизиты.Добавить("СотрудникКатегория");
	
	// Категория застрахованного лица.
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СотрудникКатегория");
	
	// СНИЛС.
	Если Не ЗначениеЗаполнено(СотрудникСНИЛС) Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СотрудникСНИЛС");
	Иначе
		ТекстОшибки = "";
		Если Не РегламентированныеДанныеКлиентСервер.СтраховойНомерПФРСоответствуетТребованиям(СотрудникСНИЛС, ТекстОшибки) Тогда
			Текст = НСтр("ru = 'Ошибка в СНИЛС %1: %2'");
			Текст = СтрШаблон(Текст, СотрудникСНИЛС, ТекстОшибки);
			СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, "СотрудникСНИЛС");
		КонецЕсли;
	КонецЕсли;
	
	// ИНН.
	Если ЗначениеЗаполнено(СотрудникИНН) Тогда
		ТекстОшибки = "";
		Если Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(СотрудникИНН, Ложь, ТекстОшибки) Тогда
			Текст = НСтр("ru = 'Ошибка в ИНН %1: %2'");
			Текст = СтрШаблон(Текст, СотрудникИНН, ТекстОшибки);
			СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, "СотрудникИНН");
		КонецЕсли;
	КонецЕсли;
	
	// ФИО.
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СотрудникФамилия");
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СотрудникИмя");
	
	// Дата рождения, Пол.
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СотрудникДатаРождения");
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СотрудникПол");
	
	// Код статуса налогоплательщика, код страны гражданства.
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "КодСтатусаНалогоплательщика");
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "КодСтраныГражданства");
	
	// Адрес регистрации.
	Если ЗначениеЗаполнено(АдресРегистрацииФИАСДом) Или ЗначениеЗаполнено(АдресРегистрацииФИАСРО) Тогда
		ПроверитьАдрес(Отказ, "АдресРегистрации");
	КонецЕсли;
	Если Не ЭтоРезидент И Не ЗначениеЗаполнено(АдресРегистрации) Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "АдресРегистрацииЗаПределамиРФ");
	КонецЕсли;
	
	// Удостоверение личности.
	ИменаРеквизитов = Новый Структура;
	ИменаРеквизитов.Вставить("Сотрудник",           "Сотрудник");
	ИменаРеквизитов.Вставить("ФизическоеЛицо",      "ФизическоеЛицо");
	ИменаРеквизитов.Вставить("ВидДокумента",        "УдостоверениеЛичностиВид");
	ИменаРеквизитов.Вставить("СерияДокумента",      "УдостоверениеЛичностиСерия");
	ИменаРеквизитов.Вставить("НомерДокумента",      "УдостоверениеЛичностиНомер");
	ИменаРеквизитов.Вставить("ДатаВыдачиДокумента", "УдостоверениеЛичностиДатаВыдачи");
	ИменаРеквизитов.Вставить("КемВыданДокумент",    "УдостоверениеЛичностиКемВыдан");
	ПрямыеВыплатыПособийСоциальногоСтрахования.ПроверитьДокументУдостоверяющийЛичность(Отказ, ЭтотОбъект, ИменаРеквизитов);
	
	СведенияОВидеДокумента = СЭДОФССПовтИсп.СведенияОВидеДокумента(УдостоверениеЛичностиВид);
	Если ЗначениеЗаполнено(УдостоверениеЛичностиВид) И Не ЗначениеЗаполнено(СведенияОВидеДокумента.КодМВД) Тогда
		Текст = НСтр("ru = 'Не заполнен код вида документа, удостоверяющего личность'");
		СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, УдостоверениеЛичностиВид, Текст, "КодМВД");
	КонецЕсли;
	Если ЗначениеЗаполнено(УдостоверениеЛичностиВид)
		И Не ЗначениеЗаполнено(УдостоверениеЛичностиСрокДействия)
		И Документы.СведенияОЗастрахованномЛицеФСС.ЭтоВременноеУдостоверениеЛичности(СведенияОВидеДокумента.КодМВД) Тогда
		Текст = НСтр("ru = 'Не заполнен срок действия документа, удостоверяющего личность'");
		СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, "УдостоверениеЛичностиСрокДействия");
	ИначеЕсли ЗначениеЗаполнено(УдостоверениеЛичностиСрокДействия)
		И УдостоверениеЛичностиСрокДействия < ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()) Тогда
		Текст = НСтр("ru = 'Истек срок действия документа, удостоверяющего личность (%1)'");
		Текст = СтрШаблон(Текст, Формат(УдостоверениеЛичностиСрокДействия, "ДЛФ=D"));
		СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, "УдостоверениеЛичностиСрокДействия");
	КонецЕсли;
	
	// Сведения о документах, подтверждающих постоянное или временное проживание (пребывание) на территории РФ
	// (для иностранных граждан и лиц без гражданства).
	ПроверитьРазрешениеНаПроживание(Отказ);
	
	// Срочный трудовой договор.
	Если (СведенияОВидеПособия.ЭтоОбычныйБольничный
		Или СведенияОВидеПособия.ЭтоНСПЗ
		Или СведенияОВидеПособия.ЭтоПособиеПриРождении) Тогда
		ПроверкиБЗК.ПроверитьПериод(
			Отказ,
			ЭтотОбъект,
			"ТрудовойДоговорДатаНачала",
			"ТрудовойДоговорДатаОкончания",
			НСтр("ru = 'срочного трудового договора'"),
			Ложь);
		Если ЗначениеЗаполнено(ТрудовойДоговорДатаНачала) И ЗначениеЗаполнено(ТрудовойДоговорДатаОкончания) Тогда
			Если ДатаНачалаСобытия > ТрудовойДоговорДатаОкончания Тогда
				Текст = НСтр("ru = 'Срочный трудовой договор закончился (%1) до начала страхового случая (%2)'");
				Текст = СтрШаблон(Текст, Формат(ТрудовойДоговорДатаОкончания, "ДЛФ=D"), Формат(ДатаНачалаСобытия, "ДЛФ=D"));
				СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, "ТрудовойДоговорДатаОкончания");
			КонецЕсли;
			Если Не УчетПособийСоциальногоСтрахования.ИспользуетсяУсловиеИсчисления(ЭтотОбъект, "46") Тогда
				Текст = НСтр("ru = 'ERR_PR_1007: При указании срочного трудового договора необходимо заполнить условия исчисления: код 46'");
				ИмяРеквизита = ?(Не ЗначениеЗаполнено(УсловияИсчисленияКод1), "УсловияИсчисленияКод1",
					           ?(Не ЗначениеЗаполнено(УсловияИсчисленияКод2), "УсловияИсчисленияКод2", "УсловияИсчисленияКод3"));
				СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, ИмяРеквизита);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СведенияОВидеПособия.ЭтоПособиеПриРождении Или СведенияОВидеПособия.ЭтоОтпускПоУходу Тогда
		ПроверяемыеРеквизиты.Добавить("РебенокКодСвязи");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСпособВыплаты(Отказ, ПроверяемыеРеквизиты)
	
	Если СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ПочтовымПереводом Тогда
		ПроверитьАдрес(Отказ, "АдресПроживания");
	ИначеЕсли СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.НаКартуМИР Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "КартаМИР");
	ИначеЕсли СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ЧерезБанк Тогда
		Если ЗначениеЗаполнено(БанкБИК) И ЗначениеЗаполнено(НомерСчета) Тогда
			РезультатПроверки = ПроверкиБЗК.РезультатПроверкиНомераСчета(НомерСчета, БанкБИК, БанкКоррСчет);
			Если Не РезультатПроверки.Успех Тогда
				СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, РезультатПроверки.Пояснение, "НомерСчета");
			КонецЕсли;
		Иначе
			ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "Банк");
			ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "БанкБИК");
			ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "НомерСчета");
		КонецЕсли;
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "БанкНаименование");
	ИначеЕсли СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ИнаяОрганизация Тогда
		ПроверяемыеРеквизиты.Добавить("ИнаяОрганизацияНаименование");
		ПроверяемыеРеквизиты.Добавить("ИнаяОрганизацияНомерСчетаСтрахователя");
		Если СотрудникКатегория <> "PRISONER" Тогда
			Текст = СтрШаблон(
				НСтр("ru = 'Способ оплаты ""%1"" доступен только для застрахованных лиц осужденных к лишению свободы.'"),
				СпособВыплатыПособия);
			СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, "СотрудникКатегория");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДанныеДляРасчета(Отказ, СведенияОВидеПособия, ПроверяемыеРеквизиты)
	
	Если СведенияОВидеПособия.ЭтоОбычныйБольничный
		Или СведенияОВидеПособия.ЭтоНСПЗ
		Или СведенияОВидеПособия.ЭтоБольничныйПоБиР Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "КалендарныхДнейРасчетногоПериода");
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "ПервыйРасчетныйГод");
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "ВторойРасчетныйГод");
	КонецЕсли;
	
	// Районный коэффициент.
	СЭДОФСС.ПроверитьРайонныйКоэффициент(Отказ, ЭтотОбъект, "РайонныйКоэффициент", Ложь);
	
	Если СведенияОВидеПособия.ЭтоОбычныйБольничный
		Или СведенияОВидеПособия.ЭтоНСПЗ Тогда
		
		// Период за который начисляется пособие ФСС.
		ПроверкиБЗК.ПроверитьПериод(
			Отказ,
			ЭтотОбъект,
			"ОплатаФССДатаНачала",
			"ОплатаФССДатаОкончания",
			НСтр("ru = 'оплаты за счет ФСС'"),
			Ложь);
		
		// Периоды за которые не начисляется пособие за счет ФСС.
		ПроверитьИсключаемыеПериоды(Отказ, ПроверяемыеРеквизиты);
		
		// Периоды простоя.
		ПроверитьПериодыПростоя(Отказ, ПроверяемыеРеквизиты);
		
		// Приостановления трудовых договоров.
		ПроверитьПриостановленияТД(Отказ, ПроверяемыеРеквизиты);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПараметрыНазначения(Отказ, СведенияОВидеПособия, Особенности)
	Если Не Особенности.Версия_2_34 Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "МетодНазначенияИВыплатыПособия");
	
	// Из спецификации: Поле ВыборПодтвержденЗастрахованнымЛицом обязательно для заполнения
	// если застрахованное лицо трудоустроено по трудовому договору, занято у нескольких страхователей,
	// а также метод назначения пособия "По одному из страхователей по трудовому договору".
	Если СведенияОВидеПособия.ЭтоОбычныйБольничный
		Или СведенияОВидеПособия.ЭтоБольничныйПоБиР
		Или СведенияОВидеПособия.ЭтоОтпускПоУходу Тогда
		Если Не ВыборПодтвержденЗастрахованнымЛицом
			И ВидДоговораТрудовой
			И ЧислитсяУНесколькихСтрахователей
			И (МетодНазначенияИВыплатыПособия = Перечисления.МетодыНазначенияИВыплатыПособийСФР.ПоОдномуСтрахователю
				Или МетодНазначенияИВыплатыПособия = Перечисления.МетодыНазначенияИВыплатыПособийСФР.ПоОдномуСтрахователюПоТД) Тогда
			Текст = НСтр("ru = 'Поскольку сотрудник числится у нескольких страхователей, то необходимо получить потверждение сотрудника на использование метода назначения пособия ""%1"" и включить соответствующий флажок'");
			Текст = СтрШаблон(Текст, МетодНазначенияИВыплатыПособия);
			СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, "ВыборПодтвержденЗастрахованнымЛицом");
		КонецЕсли;
	КонецЕсли;
	
	Если СведенияОВидеПособия.ЭтоОбычныйБольничный
		Или СведенияОВидеПособия.ЭтоБольничныйПоБиР Тогда
		Если Не ВидДоговораТрудовой И Не ВидДоговораГПХ Тогда
			Текст = НСтр("ru = 'Не заполнен вид договора'");
			СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, "ВидДоговораТрудовой");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДанныеНСПЗ(Отказ, СведенияОВидеПособия)
	Если СведенияОВидеПособия.ЭтоНСПЗ Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "ПризнаниеСлучаяСтраховым");
	КонецЕсли;
	ЕстьАктН1 = ЗначениеЗаполнено(АктН1Номер) Или ЗначениеЗаполнено(АктН1ДатаВыдачи);
	Если ЕстьАктН1 Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "АктН1Номер");
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "АктН1ДатаВыдачи");
	КонецЕсли;
	ЕстьАктПФ = ЗначениеЗаполнено(АктВПроизвольнойФормеНомер) Или ЗначениеЗаполнено(АктВПроизвольнойФормеДатаВыдачи);
	Если ЕстьАктПФ Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "АктВПроизвольнойФормеНомер");
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "АктВПроизвольнойФормеДатаВыдачи");
	КонецЕсли;
	ЕстьРешениеСуда = ЗначениеЗаполнено(РешениеСудаНомер) Или ЗначениеЗаполнено(РешениеСудаДатаВыдачи);
	Если ЕстьРешениеСуда Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "РешениеСудаНомер");
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "РешениеСудаДатаВыдачи");
	КонецЕсли;
	Если СведенияОВидеПособия.ЭтоНСПЗ
		И Не ЕстьАктН1
		И Не ЕстьАктПФ
		И Не ЕстьРешениеСуда
		И Не ЗначениеЗаполнено(АктПЗДатаВыдачи) Тогда
		Текст = НСтр("ru = 'Требуется заполнить документы НС/ПЗ'");
		СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, "АктН1Номер");
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьИсключаемыеПериоды(Отказ, ПроверяемыеРеквизиты)
	ПроверяемыеРеквизиты.Добавить("ИсключаемыеПериоды.ДатаНачала");
	ПроверяемыеРеквизиты.Добавить("ИсключаемыеПериоды.ДатаОкончания");
	Для Каждого ИсключаемыйПериод Из ИсключаемыеПериоды Цикл
		ПроверкиБЗК.ПроверитьПериодВСтрокеТаблицы(
			Отказ,
			ЭтотОбъект,
			"ИсключаемыеПериоды",
			ИсключаемыйПериод,
			"ДатаНачала",
			"ДатаОкончания",
			НСтр("ru = 'исключаемого периода'"));
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаСтрокиТаблицы(
			Отказ,
			ЭтотОбъект,
			"ИсключаемыеПериоды",
			ИсключаемыйПериод,
			"Причина");
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьПериодыПростоя(Отказ, ПроверяемыеРеквизиты)
	ПроверяемыеРеквизиты.Добавить("ПериодыПростоя.ДатаНачала");
	ПроверяемыеРеквизиты.Добавить("ПериодыПростоя.ДатаОкончания");
	Для Каждого ПериодПростоя Из ПериодыПростоя Цикл
		ПроверкиБЗК.ПроверитьПериодВСтрокеТаблицы(
			Отказ,
			ЭтотОбъект,
			"ПериодыПростоя",
			ПериодПростоя,
			"ДатаНачала",
			"ДатаОкончания",
			НСтр("ru = 'периода простоя'"));
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаСтрокиТаблицы(
			Отказ,
			ЭтотОбъект,
			"ПериодыПростоя",
			ПериодПростоя,
			"СреднийЗаработок");
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьПриостановленияТД(Отказ, ПроверяемыеРеквизиты)
	Для Каждого Период Из ПриостановленияТрудовыхДоговоров Цикл
		ПроверкиБЗК.ПроверитьПериодВСтрокеТаблицы(
			Отказ,
			ЭтотОбъект,
			"ПриостановленияТрудовыхДоговоров",
			Период,
			"ДатаНачала",
			"ДатаОкончания",
			НСтр("ru = 'приостановления трудового договора'"));
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаСтрокиТаблицы(
			Отказ,
			ЭтотОбъект,
			"ПриостановленияТрудовыхДоговоров",
			Период,
			"ОснованиеНПА");
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьИзвещение(Отказ)
	Если ЗначениеЗаполнено(ИзвещениеФССДата) Или ЗначениеЗаполнено(ИзвещениеФССНомер) Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "ИзвещениеФССДата");
		СЭДОФСС.ПроверитьНомерИзвещенияФСС(Отказ, ЭтотОбъект, "ИзвещениеФССНомер");
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьСведенияОбОтпуске(Отказ)
	Если Не ЗначениеЗаполнено(ОтпускПоУходуНомер)
		И Не ЗначениеЗаполнено(ОтпускПоУходуДата)
		И Не ЗначениеЗаполнено(ОтпускПоУходуДатаНачала)
		И Не ЗначениеЗаполнено(ОтпускПоУходуДатаОкончания) Тогда
		Возврат;
	КонецЕсли;
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "ОтпускПоУходуНомер");
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "ОтпускПоУходуДата");
	ПроверкиБЗК.ПроверитьПериод(
		Отказ,
		ЭтотОбъект,
		"ОтпускПоУходуДатаНачала",
		"ОтпускПоУходуДатаОкончания",
		НСтр("ru = 'отпуска по уходу'"),
		Ложь);
	Если ЗначениеЗаполнено(ОтпускПоУходуДата)
		И ЗначениеЗаполнено(ОтпускПоУходуДатаНачала)
		И ОтпускПоУходуДата > ОтпускПоУходуДатаНачала Тогда
		Текст = НСтр("ru = 'Дата приказа об отпуске должна предшествовать дате начала отпуска (ERR_PR_1018)'");
		СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, "ОтпускПоУходуДата");
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьИнформациюОбУсыновленииОпеке(Отказ)
	// Данные об усыновлении/опеке.
	Если Не ЗначениеЗаполнено(УсыновлениеОпекаТип)
		И Не ЗначениеЗаполнено(УсыновлениеОпекаНомер)
		И Не ЗначениеЗаполнено(УсыновлениеОпекаДата) Тогда
		Возврат;
	КонецЕсли;
	// Тип, Номер, Дата выдачи.
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "УсыновлениеОпекаТип");
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "УсыновлениеОпекаНомер");
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "УсыновлениеОпекаДата");
КонецПроцедуры

Процедура ПроверитьИнформациюОПередачеНаВоспитание(Отказ)
	// Документ о передаче в приемную семью.
	Если Не ЗначениеЗаполнено(ПередачаНаВоспитаниеДата)
		И Не ЗначениеЗаполнено(ПередачаНаВоспитаниеНомер) Тогда
		Возврат;
	КонецЕсли;
	// Номер, Дата выдачи документа о передаче в приемную семью.
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "ПередачаНаВоспитаниеДата");
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "ПередачаНаВоспитаниеНомер");
КонецПроцедуры

Процедура ПроверитьИнформациюОРебенкеПособияПриРождении(Отказ)
	// Данные о актовой записи ЗАГС.
	ЕстьАктоваяЗаписьЗАГС = (ЗначениеЗаполнено(АктоваяЗаписьОРожденииНомер)
		Или ЗначениеЗаполнено(АктоваяЗаписьОРожденииДата));
	Если ЕстьАктоваяЗаписьЗАГС Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "АктоваяЗаписьОРожденииНомер");
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "АктоваяЗаписьОРожденииДата");
	КонецЕсли;
	
	// Свидетельство о рождении.
	ЕстьСвидетельствоОРождении = ЗначениеЗаполнено(СвидетельствоОРожденииСерияНомер)
		Или ЗначениеЗаполнено(СвидетельствоОРожденииСерия)
		Или ЗначениеЗаполнено(СвидетельствоОРожденииНомер)
		Или ЗначениеЗаполнено(СвидетельствоОРожденииДатаВыдачи);
	Если ЕстьСвидетельствоОРождении Тогда
		Если Не ЗначениеЗаполнено(СвидетельствоОРожденииСерияНомер) Тогда
			ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СвидетельствоОРожденииСерия");
			ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СвидетельствоОРожденииНомер");
		КонецЕсли;
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СвидетельствоОРожденииДатаВыдачи");
	КонецЕсли;
	
	// Справка о рождении.
	ЕстьСправкаОРождении = (ЗначениеЗаполнено(СправкаОРожденииФорма)
		Или ЗначениеЗаполнено(СправкаОРожденииНомер)
		Или ЗначениеЗаполнено(СправкаОРожденииДатаВыдачи));
	Если ЕстьСправкаОРождении Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СправкаОРожденииФорма");
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СправкаОРожденииНомер");
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СправкаОРожденииДатаВыдачи");
	КонецЕсли;
	
	// Иной документ подтверждающий рождение ребенка.
	ЕстьИнойДокумент = (ЗначениеЗаполнено(ИнойДокументОРожденииСерия)
		Или ЗначениеЗаполнено(ИнойДокументОРожденииНомер)
		Или ЗначениеЗаполнено(ИнойДокументОРожденииДатаВыдачи));
	Если ЕстьИнойДокумент Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "ИнойДокументОРожденииСерия");
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "ИнойДокументОРожденииНомер");
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "ИнойДокументОРожденииДатаВыдачи");
	КонецЕсли;
	
	// Должен быть хотя бы один документ о рождении.
	Если Не ЕстьАктоваяЗаписьЗАГС
		И Не ЕстьСвидетельствоОРождении
		И Не ЕстьСправкаОРождении
		И Не ЕстьИнойДокумент Тогда
		Текст = НСтр("ru = 'Требуется заполнить документ о рождении'");
		СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, "СвидетельствоОРожденииСерия");
	КонецЕсли;
	
	// ФИО, СНИЛС, Дата рождения ребенка.
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "РебенокФамилия");
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "РебенокИмя");
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "РебенокДатаРождения");
	Если ЗначениеЗаполнено(РебенокСНИЛС) Или Не ЗначениеЗаполнено(РебенокПол) Тогда
		ПроверкиБЗК.ПроверитьСНИЛС(Отказ, ЭтотОбъект, "РебенокСНИЛС");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьИнформациюОДругомРодителе(Отказ)
	
	// Справка от другого родителя о неполучении пособия.
	Если ЗначениеЗаполнено(СправкаОтДругогоРодителяНомер) Или ЗначениеЗаполнено(СправкаОтДругогоРодителяДата) Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СправкаОтДругогоРодителяНомер");
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СправкаОтДругогоРодителяДата");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьИнформациюОРебенкеОтпускаПоУходу(Отказ)
	// ФИО, СНИЛС, Дата рождения ребенка.
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "РебенокИмя");
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "РебенокФамилия");
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "РебенокДатаРождения");
	// Обязательность СНИЛС определяется документом ИсходящееСообщениеОСтраховомСлучаеФСС.
	Если ЗначениеЗаполнено(РебенокСНИЛС) Тогда
		ПроверкиБЗК.ПроверитьСНИЛС(Отказ, ЭтотОбъект, "РебенокСНИЛС");
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьОснованияДляОтпускаПоУходу(Отказ)
	ПроверкиБЗК.ПроверитьПериод(
		Отказ,
		ЭтотОбъект,
		"ОтпускПоУходуДатаНачала",
		"ОтпускПоУходуДатаОкончания",
		НСтр("ru = 'отпуска по уходу'"));
	
	Если ЗначениеЗаполнено(ОтпускПоУходуНомер) <> ЗначениеЗаполнено(ОтпускПоУходуДата) Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "ОтпускПоУходуНомер");
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "ОтпускПоУходуДата");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаменаПослеродовогоОтпускаНомер) <> ЗначениеЗаполнено(ЗаменаПослеродовогоОтпускаДата) Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "ЗаменаПослеродовогоОтпускаНомер");
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "ЗаменаПослеродовогоОтпускаДата");
	КонецЕсли;
	
	// Свидетельство о рождении.
	ЕстьСвидетельствоОРождении = ЗначениеЗаполнено(СвидетельствоОРожденииСерия)
		Или ЗначениеЗаполнено(СвидетельствоОРожденииНомер)
		Или ЗначениеЗаполнено(СвидетельствоОРожденииДатаВыдачи);
	Если ЕстьСвидетельствоОРождении Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СвидетельствоОРожденииСерия");
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СвидетельствоОРожденииНомер");
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СвидетельствоОРожденииДатаВыдачи");
	КонецЕсли;
	
	// Иной документ подтверждающий рождение ребенка.
	ЕстьИнойДокумент = (ЗначениеЗаполнено(ИнойДокументОРожденииСерия)
		Или ЗначениеЗаполнено(ИнойДокументОРожденииНомер)
		Или ЗначениеЗаполнено(ИнойДокументОРожденииДатаВыдачи));
	Если ЕстьИнойДокумент Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "ИнойДокументОРожденииСерия");
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "ИнойДокументОРожденииНомер");
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "ИнойДокументОРожденииДатаВыдачи");
	КонецЕсли;
	
	// Данные о актовой записи ЗАГС.
	ЕстьАктоваяЗаписьЗАГС = (ЗначениеЗаполнено(АктоваяЗаписьОРожденииНомер)
		Или ЗначениеЗаполнено(АктоваяЗаписьОРожденииДата));
	Если ЕстьАктоваяЗаписьЗАГС Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "АктоваяЗаписьОРожденииНомер");
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "АктоваяЗаписьОРожденииДата");
	КонецЕсли;
	
	// Должен быть хотя бы один документ о рождении.
	Если Не ЕстьАктоваяЗаписьЗАГС
		И Не ЕстьСвидетельствоОРождении
		И Не ЕстьИнойДокумент Тогда
		Текст = НСтр("ru = 'Требуется заполнить документ о рождении'");
		СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, "СвидетельствоОРожденииСерия");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСправкуОНеполученииПособия(Отказ)
	Если ЗначениеЗаполнено(СправкаОНеполученииПособияОтМатериНомер)
		<> ЗначениеЗаполнено(СправкаОНеполученииПособияОтМатериДатаВыдачи) Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СправкаОНеполученииПособияОтМатериНомер");
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СправкаОНеполученииПособияОтМатериДатаВыдачи");
	КонецЕсли;
	Если ЗначениеЗаполнено(СправкаОНеполученииПособияОтОтцаНомер)
		<> ЗначениеЗаполнено(СправкаОНеполученииПособияОтОтцаДатаВыдачи) Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СправкаОНеполученииПособияОтОтцаНомер");
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СправкаОНеполученииПособияОтОтцаДатаВыдачи");
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьПрочиеСведенияОтпускаПоУходу(Отказ)
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "РебенокОчередность");
	Если РебенокОчередность > 1
		И Не НаличиеДокументовОРожденииПредыдущихДетей
		И Не НаличиеСвидетельстваОСмертиПредыдущихДетей Тогда
		Текст = НСтр("ru = 'Для второго и последующих детей должен быть включен один из флажков наличия документов на предыдущих детей.'");
		СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, "НаличиеДокументовОРожденииПредыдущихДетей");
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьАдрес(Отказ, ИмяПоляАдрес)
	ТекстОшибки = ТекстОшибкиЗаполненияАдреса(ИмяПоляАдрес);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Текст = Метаданные().Реквизиты[ИмяПоляАдрес].Представление() + ": " + ТекстОшибки;
		СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, ИмяПоляАдрес);
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьРазрешениеНаПроживание(Отказ)
	Если Документы.СведенияОЗастрахованномЛицеФСС.ТребуетсяВыгрузитьРазрешениеНаПроживание(ЭтотОбъект) Тогда
		Если Не ЗначениеЗаполнено(РазрешениеНаПроживаниеВид) Тогда
			ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "РазрешениеНаПроживаниеВид");
		Иначе
			ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "РазрешениеНаПроживаниеНомер");
			ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "РазрешениеНаПроживаниеДатаВыдачи");
			СведенияОВиде = СЭДОФСС.СведенияОВидеРазрешенияНаПроживание(РазрешениеНаПроживаниеВид);
			Если СведенияОВиде.ЭтоВНЖ Тогда
				ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "РазрешениеНаПроживаниеСерия");
			КонецЕсли;
			Массив = Документы.ОтветНаЗапросФССДляРасчетаПособия.ДопустимыеКодыВидаРазрешенияНаПроживание();
			Если Массив.Найти(СведенияОВиде.КодМВД) = Неопределено Тогда
				Текст = НСтр("ru = 'Недопустимый вид разрешения на проживания: %1, Фонд допускает только следующие виды: %2'");
				Текст = СтрШаблон(Текст, СведенияОВиде.КодМВД, СтрСоединить(Массив, ", "));
				СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, "РазрешениеНаПроживаниеВид");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ТекстОшибкиЗаполненияАдреса(ИмяПоляАдрес)
	ЗначениеАдреса = ЭтотОбъект[ИмяПоляАдрес];
	Если Не ЗначениеЗаполнено(ЗначениеАдреса) Тогда
		Возврат НСтр("ru = 'Адрес не заполнен'");
	КонецЕсли;
	
	ТекстыОшибок = Новый Массив;
	
	Индекс  = ЭтотОбъект[ИмяПоляАдрес + "Индекс"];
	ФИАСДом = ЭтотОбъект[ИмяПоляАдрес + "ФИАСДом"];
	ФИАСРО  = ЭтотОбъект[ИмяПоляАдрес + "ФИАСРО"];
	
	Если Не ЗначениеЗаполнено(Индекс) Тогда
		ТекстыОшибок.Добавить(НСтр("ru = 'Не заполнен индекс.'"));
	ИначеЕсли СтрДлина(Индекс) <> 6 Тогда
		ТекстыОшибок.Добавить(СтрШаблон(НСтр("ru = 'Индекс занимает %1 символов, ожидалось 6.'"), СтрДлина(Индекс)));
	Иначе
		ЛишниеСимволы = СтроковыеФункцииБЗККлиентСервер.УдалитьЦифрыИзСтроки(Индекс);
		Если Не ПустаяСтрока(ЛишниеСимволы) Тогда
			Если СтрДлина(ЛишниеСимволы) = 1 Тогда
				Текст = НСтр("ru = 'В индексе должны быть только цифры (%1 - не цифра).'");
			Иначе
				Текст = НСтр("ru = 'В индексе должны быть только цифры (%1 - не цифры).'");
			КонецЕсли;
			ТекстыОшибок.Добавить(СтрШаблон(Текст, ЛишниеСимволы));
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФИАСДом) И Не ЗначениеЗаполнено(ФИАСРО) Тогда
		ТекстыОшибок.Добавить(НСтр("ru = 'Не заполнен идентификатор ФИАС.'"));
	КонецЕсли;
	
	Возврат СтрСоединить(ТекстыОшибок, Символы.ПС);
КонецФункции

#КонецОбласти

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли