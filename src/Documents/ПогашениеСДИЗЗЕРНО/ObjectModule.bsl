#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ТипДанныхЗаполнения = Тип("Структура")Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,ДанныеЗаполнения);
	// СДИЗ, массив СДИЗ, (ТТН, массив ТТН - преобразовываются при вызове заполнения), плюс значения заполнения
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.СДИЗЗЕРНО")ИЛИ
		(ТипДанныхЗаполнения = Тип("Массив")
		И ДанныеЗаполнения.Количество()
		И ТипЗнч(ДанныеЗаполнения[0]) = Тип("СправочникСсылка.СДИЗЗЕРНО"))Тогда 
		ЗаполнитьПогашениеПоСДИЗЗЕРНО(ДанныеЗаполнения);
	// Документ формирования и погашения СДИЗ
	ИначеЕсли Метаданные.ОпределяемыеТипы.ОснованиеОформлениеСДИЗЗЕРНО.Тип.Типы().Найти(ТипДанныхЗаполнения) <> Неопределено Тогда
		СДИЗКПогашению = Документы.ПогашениеСДИЗЗЕРНО.СДИЗКПогашению(ДанныеЗаполнения);
		Если Товары.Количество() = 0 И СДИЗКПогашению.Количество() > 0 Тогда
			ЗаполнитьПогашениеПоСДИЗЗЕРНО(СДИЗКПогашению);
		КонецЕсли;
		ДокументОснование = ДанныеЗаполнения;
	КонецЕсли;
	
	ИнтеграцияЗЕРНОПереопределяемый.ОбработкаЗаполненияДокумента(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
	ЗаполнитьОбъектПоСтатистике();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.ПричинаРасхождения");
	
	ИнтеграцияЗЕРНОПереопределяемый.ПриОпределенииОбработкиПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	ДанныеПоСДИЗ          = Неопределено;
	ДанныеТекущегоСтатуса = Неопределено;
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		Если СтрокаТовары.СтатусУказанияТранспорта = 1 Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'В строке %1 списка ""Товары"" не указано транспортное средство'"),
				СтрокаТовары.НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Товары", СтрокаТовары.НомерСтроки, "ТранспортПредставление"),,
				Отказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТовары.СДИЗ)
			И СтрокаТовары.ПолноеПогашение
			И Не ЗначениеЗаполнено(СтрокаТовары.ПричинаРасхождения) Тогда
			
			Если ДанныеТекущегоСтатуса = Неопределено Тогда
				ДанныеТекущегоСтатуса = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ТекущееСостояние(Ссылка);
			КонецЕсли;
			
			Если ДанныеТекущегоСтатуса.Статус = Документы.ПогашениеСДИЗЗЕРНО.СтатусПоУмолчанию() Тогда
				
				Если ДанныеПоСДИЗ = Неопределено Тогда
					ДанныеПоСДИЗ = Справочники.СДИЗЗЕРНО.ДанныеПоСДИЗ(Товары.ВыгрузитьКолонку("СДИЗ"));
				КонецЕсли;
				
				ДанныеСДИЗ = ДанныеПоСДИЗ[СтрокаТовары.СДИЗ];
				ВсегоОсталосьПогасить = ДанныеСДИЗ.Количество - ДанныеСДИЗ.КоличествоПогашено - ДанныеСДИЗ.КоличествоОтказПогашения;
				Если ((ВсегоОсталосьПогасить - СтрокаТовары.КоличествоЗЕРНО) <> 0) Тогда
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'В строке %1 списка ""Товары"" не указана причина расходжения веса'"),
						СтрокаТовары.НомерСтроки);
					ОбщегоНазначения.СообщитьПользователю(
						ТекстСообщения,
						ЭтотОбъект,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
							"Товары", СтрокаТовары.НомерСтроки, "ПричинаРасхождения"),,
						Отказ);
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ИнтеграцияЗЕРНО.ЗаписатьСоответствиеНоменклатуры(ЭтотОбъект);
	
	ИнтеграцияЗЕРНО.ПередЗаписьюОбъекта(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияЗЕРНО.ЗаписатьСтатусДокументаЗЕРНОПоУмолчанию(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Для Каждого СтрокаТовары Из Товары Цикл
		СтрокаТовары.Партия = Неопределено;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа
	ИнтеграцияИС.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	// Инициализация данных документа
	Документы.ПогашениеСДИЗЗЕРНО.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ИнтеграцияИС.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	РегистрыНакопления.ОстаткиПартийЗЕРНО.ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ);
	ИнтеграцияИСПереопределяемый.ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ);
	
	ИнтеграцияИС.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ИнтеграцияИСПереопределяемый.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения);
	
	ИнтеграцияИС.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаЗаполнения

Процедура ЗаполнитьОбъектПоСтатистике()
	
	ДанныеСтатистики = ЗаполнениеОбъектовПоСтатистикеЗЕРНО.ДанныеЗаполненияПогашениеСДИЗЗЕРНО(Организация);
	
	Для Каждого КлючИЗначение Из ДанныеСтатистики Цикл
		ЗаполнениеОбъектовПоСтатистикеЗЕРНО.ЗаполнитьПустойРеквизит(ЭтотОбъект, ДанныеСтатистики, КлючИЗначение.Ключ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПогашениеПоСДИЗЗЕРНО(ДанныеЗаполнения, ДополнитьДокумент = Ложь) 
	
	Если Не ДополнитьДокумент Тогда
	
		ДанныеШапки = ВыборкаДанныхШапкиСДИЗЗЕРНО(ДанныеЗаполнения);
	
		Если ДанныеШапки.Следующий() Тогда
		
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеШапки);
			
			Если Не ЗначениеЗаполнено(Организация) Тогда
				Если ДанныеШапки.ВидОперацииСДИЗ = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт Тогда
					Ключ = ДанныеШапки.УполномоченноеЛицо;
				Иначе
					Ключ = ?(ЗначениеЗаполнено(Грузополучатель), Грузополучатель, Покупатель);
				КонецЕсли;
				Если Не ЗначениеЗаполнено(Ключ) Тогда
					Ключ = ДанныеШапки.УполномоченноеЛицо;
				КонецЕсли;
				
				ДанныеСопоставления = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.ОрганизацииКонтрагентыПоКлючам(Ключ).Получить(Ключ);
				Если ДанныеСопоставления <> Неопределено Тогда
					Организация   = ДанныеСопоставления.Организация;
					Подразделение = ДанныеСопоставления.Подразделение;
				КонецЕсли;
				
			КонецЕсли;
			
			Товары.Очистить();
			ТранспортныеСредства.Очистить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьДанныеПродукции(ВыборкаДанныхСДИЗЗЕРНО(ДанныеЗаполнения));
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПродукции(ВыборкаСДИЗ)
	
	СтрокиСопоставленияКоличества = Новый Массив;
	СтрокиСопоставленияНоменклатуры = Новый Массив;
	
	Пока ВыборкаСДИЗ.Следующий() Цикл 
		
		СтрокаТЧ = Товары.Найти(ВыборкаСДИЗ.СДИЗ, "СДИЗ");
		
		Если СтрокаТЧ = Неопределено Тогда
			СтрокаТЧ = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, ВыборкаСДИЗ);
			СтрокаТЧ.Идентификатор = Строка(Новый УникальныйИдентификатор);
			
			Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				СтрокиСопоставленияКоличества.Добавить(СтрокаТЧ);
			Иначе
				СтрокиСопоставленияНоменклатуры.Добавить(СтрокаТЧ);
			КонецЕсли;
		Иначе
			ОчиститьСвязанныеСтрокиТабличнойЧасти(СтрокаТЧ.ИдентификаторСтроки, "ТранспортныеСредства");
		КонецЕсли;
		
		ВыборкаТранспортныеСредства = ВыборкаСДИЗ.ТранспортныеСредства.Выбрать();
		Пока ВыборкаТранспортныеСредства.Следующий() Цикл
			СтрокаТранспортныеСредства = ТранспортныеСредства.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТранспортныеСредства, ВыборкаТранспортныеСредства);
			СтрокаТранспортныеСредства.ИдентификаторСтрокиТоваров = СтрокаТЧ.Идентификатор;
		КонецЦикла;
		
	КонецЦикла;
	
	Если СтрокиСопоставленияНоменклатуры.Количество() Тогда
		
		СопоставленныеТовары = ИнтеграцияЗЕРНО.ПолучитьСопоставленныеТовары(СтрокиСопоставленияНоменклатуры);
		
		Для Каждого СтрокаТЧ Из СтрокиСопоставленияНоменклатуры Цикл
			
			Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаСопоставленногоТовара = СопоставленныеТовары.Найти(СтрокаТЧ.НомерСтроки, "НомерСтрокиТовара");
			
			Если СтрокаСопоставленногоТовара <> Неопределено Тогда
				СтрокаТЧ.Номенклатура   = СтрокаСопоставленногоТовара.Номенклатура;
				СтрокаТЧ.Характеристика = СтрокаСопоставленногоТовара.Характеристика;
				СтрокиСопоставленияКоличества.Добавить(СтрокаТЧ);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиСопоставленияКоличества.Количество() Тогда
		ИнтеграцияЗЕРНОПереопределяемый.ЗаполнитьКоличествоПоКоличествуЗЕРНО(СтрокиСопоставленияКоличества);
	КонецЕсли;
	
КонецПроцедуры

Функция ВыборкаДанныхСДИЗЗЕРНО(МассивСДИЗ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", МассивСДИЗ);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОформлениеСДИЗЗЕРНОТовары.СДИЗ КАК СДИЗ,
	|	МАКСИМУМ(ОформлениеСДИЗЗЕРНОТовары.Номенклатура)   КАК Номенклатура,
	|	МАКСИМУМ(ОформлениеСДИЗЗЕРНОТовары.Характеристика) КАК Характеристика,
	|	МАКСИМУМ(ОформлениеСДИЗЗЕРНОТовары.Серия)          КАК Серия
	|ПОМЕСТИТЬ
	|	ОформлениеСДИЗЗЕРНОТовары
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.Товары КАК ОформлениеСДИЗЗЕРНОТовары
	|ГДЕ
	|	ОформлениеСДИЗЗЕРНОТовары.СДИЗ В (&Ссылки)
	|СГРУППИРОВАТЬ ПО
	|	ОформлениеСДИЗЗЕРНОТовары.СДИЗ
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОформлениеСДИЗЗЕРНОТовары.Номенклатура)     = 1
	|	И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОформлениеСДИЗЗЕРНОТовары.Характеристика) = 1
	|	И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОформлениеСДИЗЗЕРНОТовары.Серия)          = 1
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПогашениеСДИЗЗЕРНОТовары.СДИЗ КАК СДИЗ,
	|	МАКСИМУМ(ПогашениеСДИЗЗЕРНОТовары.Номенклатура)   КАК Номенклатура,
	|	МАКСИМУМ(ПогашениеСДИЗЗЕРНОТовары.Характеристика) КАК Характеристика,
	|	МАКСИМУМ(ПогашениеСДИЗЗЕРНОТовары.Серия)          КАК Серия
	|ПОМЕСТИТЬ
	|	ПогашениеСДИЗЗЕРНОТовары
	|ИЗ
	|	Документ.ПогашениеСДИЗЗЕРНО.Товары КАК ПогашениеСДИЗЗЕРНОТовары
	|ГДЕ
	|	ПогашениеСДИЗЗЕРНОТовары.СДИЗ В (&Ссылки)
	|СГРУППИРОВАТЬ ПО
	|	ПогашениеСДИЗЗЕРНОТовары.СДИЗ
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПогашениеСДИЗЗЕРНОТовары.Номенклатура)     = 1
	|	И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПогашениеСДИЗЗЕРНОТовары.Характеристика) = 1
	|	И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПогашениеСДИЗЗЕРНОТовары.Серия)          = 1
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ПогашениеСДИЗЗЕРНОТовары.СДИЗ,ОформлениеСДИЗЗЕРНОТовары.СДИЗ) КАК СДИЗ,
	|	ЕСТЬNULL(ОформлениеСДИЗЗЕРНОТовары.Номенклатура,ПогашениеСДИЗЗЕРНОТовары.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(ОформлениеСДИЗЗЕРНОТовары.Характеристика,ПогашениеСДИЗЗЕРНОТовары.Характеристика) КАК Характеристика,
	|	ЕСТЬNULL(ОформлениеСДИЗЗЕРНОТовары.Серия,ПогашениеСДИЗЗЕРНОТовары.Серия) КАК Серия
	|ПОМЕСТИТЬ СопоставленныеТовары
	|ИЗ ПогашениеСДИЗЗЕРНОТовары КАК ПогашениеСДИЗЗЕРНОТовары
	|	ПОЛНОЕ СОЕДИНЕНИЕ ОформлениеСДИЗЗЕРНОТовары КАК ОформлениеСДИЗЗЕРНОТовары
	|		ПО ОформлениеСДИЗЗЕРНОТовары.СДИЗ = ПогашениеСДИЗЗЕРНОТовары.СДИЗ
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсторияПогашенийСДИЗЗЕРНО.СДИЗ КАК СДИЗ,
	|	СУММА(ИсторияПогашенийСДИЗЗЕРНО.КоличествоЗЕРНО) КАК Количество
	|ПОМЕСТИТЬ РанееПогашено
	|ИЗ
	|	РегистрСведений.ИсторияПогашенийСДИЗЗЕРНО КАК ИсторияПогашенийСДИЗЗЕРНО
	|ГДЕ
	|	ИсторияПогашенийСДИЗЗЕРНО.СДИЗ В (&Ссылки)
	|	И ИсторияПогашенийСДИЗЗЕРНО.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаписейЗЕРНО.Подписано)
	|СГРУППИРОВАТЬ ПО
	|	ИсторияПогашенийСДИЗЗЕРНО.СДИЗ
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СДИЗЗЕРНО.Ссылка                    КАК СДИЗ,
	|	СопоставленныеТовары.Номенклатура   КАК Номенклатура,
	|	СопоставленныеТовары.Характеристика КАК Характеристика,
	|	СопоставленныеТовары.Серия          КАК Серия,
	|	СДИЗЗЕРНО.Количество - ЕСТЬNULL(РанееПогашено.Количество, 0) КАК КоличествоЗЕРНО,
	|	СДИЗЗЕРНО.ТранспортныеСредства.(
	|		ТипТранспорта КАК ТипТранспорта,
	|		НомерТранспортногоСредства КАК НомерТранспортногоСредства,
	|		НомерАвтомобильногоКонтейнера КАК НомерАвтомобильногоКонтейнера) КАК ТранспортныеСредства
	|ИЗ
	|	Справочник.СДИЗЗЕРНО КАК СДИЗЗЕРНО
	|	ЛЕВОЕ СОЕДИНЕНИЕ СопоставленныеТовары КАК СопоставленныеТовары
	|		ПО СДИЗЗЕРНО.Ссылка = СопоставленныеТовары.СДИЗ
	|	ЛЕВОЕ СОЕДИНЕНИЕ РанееПогашено КАК РанееПогашено
	|		ПО СДИЗЗЕРНО.Ссылка = РанееПогашено.СДИЗ
	|ГДЕ
	|	СДИЗЗЕРНО.Ссылка В (&Ссылки)";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ВыборкаДанныхШапкиСДИЗЗЕРНО(МассивСДИЗ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", МассивСДИЗ);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВЫБОР
	|		КОГДА СДИЗЗЕРНО.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт)
	|			ТОГДА СДИЗЗЕРНО.УполномоченноеЛицо.ОрганизацияКонтрагент
	|		КОГДА СДИЗЗЕРНО.Грузополучатель <> Значение(Справочник.КлючиРеквизитовОрганизацийЗЕРНО.ПустаяСсылка)
	|			ТОГДА СДИЗЗЕРНО.Грузополучатель.ОрганизацияКонтрагент
	|		КОГДА СДИЗЗЕРНО.Покупатель <> Значение(Справочник.КлючиРеквизитовОрганизацийЗЕРНО.ПустаяСсылка)
	|			ТОГДА СДИЗЗЕРНО.Покупатель.ОрганизацияКонтрагент
	|		ИНАЧЕ СДИЗЗЕРНО.УполномоченноеЛицо.ОрганизацияКонтрагент КОНЕЦ КАК Организация,
	|	СДИЗЗЕРНО.ВидПродукции     КАК ВидПродукции,
	|	СДИЗЗЕРНО.ВидОперации      КАК ВидОперацииСДИЗ,
	|	СДИЗЗЕРНО.Продавец         КАК Продавец,
	|	СДИЗЗЕРНО.Грузоотправитель КАК Грузоотправитель,
	|	СДИЗЗЕРНО.Покупатель       КАК Покупатель,
	|	СДИЗЗЕРНО.Грузополучатель  КАК Грузополучатель,
	|	СДИЗЗЕРНО.ПунктОтправления КАК ПунктОтправления,
	|	СДИЗЗЕРНО.ПунктНазначения  КАК ПунктНазначения,
	|	СДИЗЗЕРНО.УполномоченноеЛицо КАК УполномоченноеЛицо
	|ИЗ
	|	Справочник.СДИЗЗЕРНО КАК СДИЗЗЕРНО
	|ГДЕ
	|	СДИЗЗЕРНО.Ссылка В(&Ссылка)";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ОчиститьСвязанныеСтрокиТабличнойЧасти(ИдентификаторСтроки, ИмяТабличнойЧасти)
	
	КолонкаОтбора = "ИдентификаторСтрокиТоваров";
	СтруктураОтбора = Новый Структура(КолонкаОтбора, ИдентификаторСтроки);
	СтрокиКУдалению = ЭтотОбъект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ИндексСтроки = ЭтотОбъект[ИмяТабличнойЧасти].Индекс(СтрокаКУдалению);
		ЭтотОбъект[ИмяТабличнойЧасти].Удалить(ИндексСтроки);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
