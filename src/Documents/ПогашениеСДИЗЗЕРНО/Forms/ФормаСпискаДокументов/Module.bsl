#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьИПроверитьПереданныеПараметры();
	
	УстановитьБыстрыйОтборСервер();
	СобытияФормЗЕРНО.ПриСозданииНаСервереФормыСпискаДокументов(ЭтотОбъект);
	
	ИнтеграцияЗЕРНО.ЗаполнитьСписокВыбораДальнейшееДействие(
		Элементы.СтраницаОформленоОтборДальнейшееДействие.СписокВыбора, ВсеТребующиеДействия(), ВсеТребующиеОжидания());
	
	ВосстановитьНастройкиФормы();
	УстановитьВидимостьТаблицыКОформлению();
	
	НастроитьВидимостьДоступностьЭлементовСервер();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	ИнтеграцияИС.УстановитьПризнакПравоИзмененияФормыСписка(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = СобытияФормЗЕРНОКлиент.ИмяСобытияИзмененаНастройкаАвтоматическогоОбмена() Тогда
		НастроитьДоступностьКомандыВыполнитьОбмен();
	КонецЕсли;
	
	ИнтеграцияИСКлиент.ОбработкаОповещенияВФормеСпискаДокументовИС(
		ЭтотОбъект,
		ИнтеграцияЗЕРНОКлиентСервер.ИмяПодсистемы(),
		ИмяСобытия,
		Параметр,
		Источник);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницаОформленоОтборСтатусПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Статус", Статус, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Статус));
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаОформленоОтборДальнейшееДействиеПриИзменении(Элемент)
	
	УстановитьОтборПоДальнейшемуДействиюСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаОформленоОтборОтветственныйПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Ответственный", Ответственный, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Ответственный));
	
КонецПроцедуры

#Область ОтборПоОрганизации

&НаКлиенте
Процедура ОформленоОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборОрганизацииЗавершение = Новый ОписаниеОповещения("ВыборОрганизацииЗавершение", ЭтотОбъект);
	СтандартнаяОбработка = Ложь;
	ИнтеграцияЗЕРНОКлиент.ОткрытьФормуВыбораОрганизаций(ЭтотОбъект, "Оформлено",, ВыборОрганизацииЗавершение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформленоОрганизацииПриИзменении(Элемент)
	
	ИнтеграцияЗЕРНОКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, Организации, Истина, "Оформлено");
	НастроитьДоступностьКомандыВыполнитьОбмен();
	
КонецПроцедуры

&НаКлиенте
Процедура ОформленоОрганизацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияЗЕРНОКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, Неопределено, Истина, "Оформлено");
	НастроитьДоступностьКомандыВыполнитьОбмен();
	
КонецПроцедуры

&НаКлиенте
Процедура ОформленоОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияЗЕРНОКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, ВыбранноеЗначение, Истина, "Оформлено");
	
КонецПроцедуры

&НаКлиенте
Процедура ОформленоОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборОрганизацииЗавершение = Новый ОписаниеОповещения("ВыборОрганизацииЗавершение", ЭтотОбъект);
	СтандартнаяОбработка = Ложь;
	ИнтеграцияЗЕРНОКлиент.ОткрытьФормуВыбораОрганизаций(ЭтотОбъект, "Оформлено",, ВыборОрганизацииЗавершение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформленоОрганизацияПриИзменении(Элемент)
	
	ИнтеграцияЗЕРНОКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, Организация, Истина, "Оформлено");
	НастроитьДоступностьКомандыВыполнитьОбмен();
	
КонецПроцедуры

&НаКлиенте
Процедура ОформленоОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияЗЕРНОКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, Неопределено, Истина, "Оформлено");
	НастроитьДоступностьКомандыВыполнитьОбмен();
	
КонецПроцедуры

&НаКлиенте
Процедура ОформленоОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияЗЕРНОКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, ВыбранноеЗначение, Истина, "Оформлено");
	
КонецПроцедуры

&НаКлиенте
Процедура КОформлениюОрганизацииПриИзменении(Элемент)
	
	ИнтеграцияЗЕРНОКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, Организация, Истина, "КОформлению");
	НастроитьДоступностьКомандыВыполнитьОбмен();
	
КонецПроцедуры

&НаКлиенте
Процедура КОфоримлениюОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияЗЕРНОКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, ВыбранноеЗначение, Истина, "КОформлению");
	
КонецПроцедуры

&НаКлиенте
Процедура КОформлениюОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборОрганизацииЗавершение = Новый ОписаниеОповещения("ВыборОрганизацииЗавершение", ЭтотОбъект);
	СтандартнаяОбработка = Ложь;
	ИнтеграцияЗЕРНОКлиент.ОткрытьФормуВыбораОрганизаций(ЭтотОбъект, "КОформлению",, ВыборОрганизацииЗавершение);
	
КонецПроцедуры

&НаКлиенте
Процедура КОформлениюОрганизацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияЗЕРНОКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, Неопределено, Истина, "КОформлению");
	НастроитьДоступностьКомандыВыполнитьОбмен();
	
КонецПроцедуры

&НаКлиенте
Процедура КОформлениюОрганизацияПриИзменении(Элемент)
	
	ИнтеграцияЗЕРНОКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, Организация, Истина, "КОформлению");
	НастроитьДоступностьКомандыВыполнитьОбмен();
	
КонецПроцедуры

&НаКлиенте
Процедура КОформлениюОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияЗЕРНОКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, Неопределено, Истина, "КОформлению");
	НастроитьДоступностьКомандыВыполнитьОбмен();
	
КонецПроцедуры

&НаКлиенте
Процедура КОформлениюОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияЗЕРНОКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, ВыбранноеЗначение, Истина, "КОформлению");
	
КонецПроцедуры

&НаКлиенте
Процедура КОформлениюОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборОрганизацииЗавершение = Новый ОписаниеОповещения("ВыборОрганизацииЗавершение", ЭтотОбъект);
	СтандартнаяОбработка = Ложь;
	ИнтеграцияЗЕРНОКлиент.ОткрытьФормуВыбораОрганизаций(ЭтотОбъект, "КОформлению",, ВыборОрганизацииЗавершение);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ТТНПродукцияПриИзменении(Элемент)
	
	СохранитьНастройкиФормы();
	УстановитьВидимостьТаблицыКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура ТТНПродукцияПоДокументамПриИзменении(Элемент)
	
	СохранитьНастройкиФормы();
	УстановитьВидимостьТаблицыКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНомерПервичногоДокументаПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокКОформлению,
		"НомерПервичногоДокумента",
		ОтборНомерПервичногоДокумента,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(ОтборНомерПервичногоДокумента));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПоДокументамКОформлению,
		"НомерПервичногоДокумента",
		ОтборНомерПервичногоДокумента,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(ОтборНомерПервичногоДокумента));
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПоДокументамКОформлению

&НаКлиенте
Процедура СписокПоДокументамКОформлениюВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьПредупреждение(,НСтр("ru = 'Открытие СДИЗ возможно в режиме просмотра ""по СДИЗ""'"),30);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗапроситьСДИЗ(Команда)
	
	ЗапросСДИЗЗавершение = Новый ОписаниеОповещения("Подключаемый_ЗапросСДИЗЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = ИнтеграцияЗЕРНОСлужебныйКлиент.ПараметрыОткрытияФормыЗапросаСправочника();
	ПараметрыФормы.ВидЗапроса     = 2;
	ПараметрыФормы.СсылкаНаОбъект = ПредопределенноеЗначение("Справочник.СДИЗЗЕРНО.ПустаяСсылка");
	Если Элементы.СписокСДИЗКОформлению.ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы.ВидПродукции   = Элементы.СписокСДИЗКОформлению.ТекущиеДанные.ВидПродукции;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ПараметрыФормы.Организация = Организация;
	КонецЕсли;
	
	ИнтеграцияЗЕРНОСлужебныйКлиент.ОткрытьФормуЗапросаСправочника(ПараметрыФормы, ЭтотОбъект, ЗапросСДИЗЗавершение);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ВыполнитьОбмен(Команда)
	
	ИнтеграцияЗЕРНОКлиент.ВыполнитьОбмен(
		ЭтотОбъект,
		ИнтеграцияЗЕРНОКлиент.ОрганизацииДляОбмена(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьДанные(Команда)
	
	ИнтеграцияЗЕРНОКлиент.ПодготовитьСообщенияКПередаче(
		Элементы.Список, ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные"));
	
КонецПроцедуры

&НаКлиенте
Процедура Архивировать(Команда)
	
	ИнтеграцияИСКлиент.АрхивироватьРаспоряжения(ЭтотОбъект, Элементы.СписокСДИЗКОформлению, ИнтеграцияЗЕРНОКлиент,
		ПредопределенноеЗначение("Документ.ПогашениеСДИЗЗЕРНО.ПустаяСсылка"), "Ссылка");
	
КонецПроцедуры

&НаКлиенте
Процедура АрхивироватьДокументы(Команда)
	
	ИнтеграцияИСКлиент.АрхивироватьДокументы(ЭтотОбъект, Элементы.Список, ИнтеграцияЗЕРНОКлиент);
	
КонецПроцедуры

&НаКлиенте
Процедура Оформить(Команда)
	
	ОчиститьСообщения();
	
	МассивСДИЗ = Новый Массив;
	Если ТТНПродукция = 0 Тогда //продукция
		Если НЕ ИнтеграцияИСКлиент.ВыборСтрокиСпискаКорректен(Элементы.СписокСДИЗКОформлению, Ложь) Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого ИдентификаторСтроки Из Элементы.СписокСДИЗКОформлению.ВыделенныеСтроки Цикл
			МассивСДИЗ.Добавить(ИдентификаторСтроки);
		КонецЦикла;
		Если НЕ ВозможностьВводаПогашенияСДИЗ(МассивСДИЗ) Тогда
			Возврат;
		КонецЕсли;
	Иначе 
		Если НЕ ИнтеграцияИСКлиент.ВыборСтрокиСпискаКорректен(Элементы.СписокПоДокументамКОформлению,Истина) Тогда
			Возврат;
		ИначеЕсли НЕ ПолучитьСДИЗПоОтбору(Элементы.СписокПоДокументамКОформлению.ТекущиеДанные, МассивСДИЗ) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр( "ru = 'Нет данных для заполнения'"),,"СписокПоДокументамКОформлению");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("Документ.ПогашениеСДИЗЗЕРНО.ФормаОбъекта",
		Новый Структура("Основание",МассивСДИЗ), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

#Область ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда) Экспорт
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды() Экспорт
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда) Экспорт
	
	СобытияФормИСКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВидимостьТаблицыКОформлению()
	
	Если ТТНПродукция Тогда
		Элементы.СписокПоДокументамКОформлению.Видимость                      = Истина;
		Элементы.СписокПоДокументамКОформлениюКоманднаяПанельГруппа.Видимость = Истина;
		Элементы.СписокСДИЗКОформлению.Видимость                                  = Ложь;
		Элементы.СписокКОформлениюКоманднаяПанельГруппа.Видимость             = Ложь;
	Иначе 
		Элементы.СписокПоДокументамКОформлению.Видимость                      = Ложь;
		Элементы.СписокПоДокументамКОформлениюКоманднаяПанельГруппа.Видимость = Ложь;
		Элементы.СписокСДИЗКОформлению.Видимость                                  = Истина;
		Элементы.СписокКОформлениюКоманднаяПанельГруппа.Видимость             = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиФормы()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ПогашениеСДИЗЗЕРНОФормаСпискаДокументов", "ТТНПродукция", ТТНПродукция);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиФормы()
	
	ТТНПродукция = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПогашениеСДИЗЗЕРНОФормаСпискаДокументов", "ТТНПродукция", ТТНПродукция);
	
КонецПроцедуры

#Область ОбработчикиСобытийФормыСлужебные

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Ошибки
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Статус.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.Статус.ПутьКДанным);
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.ВСписке;
	
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.ЗагрузитьЗначения(Документы.ПогашениеСДИЗЗЕРНО.СтатусыОшибок());
	ОтборЭлемента.ПравоеЗначение = СписокСтатусов;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СтатусОбработкиОшибкаПередачиГосИС);
	
	// Требуется ожидание
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Статус.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ДальнейшееДействие.ПутьКДанным);
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.ВСписке;
	
	СписокДействий = Новый СписокЗначений;
	СписокДействий.ЗагрузитьЗначения(Документы.ПогашениеСДИЗЗЕРНО.ВсеТребующиеОжидания());
	ОтборЭлемента.ПравоеЗначение = СписокДействий;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СтатусОбработкиПередаетсяГосИС);
	
	// Даты
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список.Дата", Элементы.Дата.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИПроверитьПереданныеПараметры();
	
	Элементы.Список.РежимВыбора = Параметры.РежимВыбора;
	
	Если Параметры.МножественныйВыбор <> Неопределено Тогда
		Элементы.Список.МножественныйВыбор = Параметры.МножественныйВыбор;
	КонецЕсли;
	
	Если Параметры.РежимВыбора Тогда
		Элементы.СтраницаКОформлению.Видимость = Ложь;
		Элементы.Страницы.ОтображениеСтраниц   = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодготовкаВводаНаОсновании

&НаКлиенте
Функция ВозможностьВводаПогашенияСДИЗ(Знач ВыделенныеСтроки)
	
	Если ВыделенныеСтроки = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат Ложь;
	ИначеЕсли ВыделенныеСтроки.Количество() = 1 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДанныеОтбора = ИнтеграцияЗЕРНОКлиентСервер.РеквизитыПодбораСДИЗПриГашении();
	ЗаполнитьЗначенияСвойств(ДанныеОтбора,ВыделенныеСтроки[0]);
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		Для Каждого КлючИЗначение Из ДанныеОтбора Цикл
			Если ВыделеннаяСтрока[КлючИЗначение.Ключ]<>КлючИЗначение.Значение Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					НСтр("ru = 'Различаются ключевые реквизиты СДИЗ. Выделенные строки должны быть включены в различные документы гашения'"),,"СписокКОформлению");
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПолучитьСДИЗПоОтбору(Знач СтрокаОтбора, МассивСДИЗ)
	
	МассивСДИЗ = Новый Массив;
	ДанныеОтбора = ИнтеграцияЗЕРНОКлиентСервер.РеквизитыПодбораСДИЗПриГашении(ТТНПродукция);
	ЗаполнитьЗначенияСвойств(ДанныеОтбора,СтрокаОтбора);
	ВыборкаСДИЗ = ДоступныеСДИЗ(ДанныеОтбора);
	Пока ВыборкаСДИЗ.Следующий() Цикл 
		МассивСДИЗ.Добавить(ВыборкаСДИЗ.Ссылка);
	КонецЦикла;
	
	Возврат (МассивСДИЗ.Количество()>0);
	
КонецФункции

&НаСервере
Функция ДоступныеСДИЗ(ДанныеОтбора)
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СДИЗЗЕРНО.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СДИЗЗЕРНО КАК СДИЗЗЕРНО
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОформленияДокументовЗЕРНО КАК Статусы
	|		ПО Статусы.Основание = СДИЗЗЕРНО.Ссылка
	|ГДЕ
	|	%1
	|	НЕ СДИЗЗЕРНО.ПометкаУдаления
	|	И СДИЗЗЕРНО.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыСДИЗЗЕРНО.Оформлен),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыСДИЗЗЕРНО.ОформленИПодтвержден))
	|	И ЕСТЬNULL(Статусы.СтатусОформления, ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовГосИС.НеОформлено)) В
	|		(ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовГосИС.НеОформлено),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовГосИС.ОформленоЧастично),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовГосИС.ЕстьОшибкиОформления),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовГосИС.ТребуетсяСопоставлениеНоменклатуры))
	|	И ЕСТЬNULL(Статусы.Архивный, ЛОЖЬ) = ЛОЖЬ";
	
	Для Каждого КлючИЗначение Из ДанныеОтбора Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		Условие = СтрШаблон("СДИЗЗЕРНО.%1 = &%1 И 
		|", КлючИЗначение.Ключ);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%1", Условие + "%1");
	КонецЦикла;
	Запрос.Текст = СтрШаблон(ТекстЗапроса, "");
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ЗапросСДИЗЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Элементы.СписокСДИЗКОформлению.Видимость Тогда
		Элементы.СписокСДИЗКОформлению.Обновить();
	КонецЕсли;
	Если Элементы.СписокПоДокументамКОформлению.Видимость Тогда
		Элементы.СписокПоДокументамКОформлению.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборОрганизацииЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияЗЕРНОКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, Организации, Истина);
	
	НастроитьДоступностьКомандыВыполнитьОбмен();
	
КонецПроцедуры

#Область ОтборДальнейшиеДействия

// Возвращает массив дальнейших действий с документом, требующих участия пользователя
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Массив дальшейних действий
//
&НаСервереБезКонтекста
Функция ВсеТребующиеДействия()
	
	Возврат Документы.ПогашениеСДИЗЗЕРНО.ВсеТребующиеДействия();
	
КонецФункции

&НаСервереБезКонтекста
Функция ВсеТребующиеОжидания()
	
	Возврат Документы.ПогашениеСДИЗЗЕРНО.ВсеТребующиеОжидания();
	
КонецФункции

&НаСервере
Процедура УстановитьОтборПоДальнейшемуДействиюСервер()
	
	ИнтеграцияЗЕРНО.УстановитьОтборПоДальнейшемуДействию(
		Список, ДальнейшееДействие, ВсеТребующиеДействия(), ВсеТребующиеОжидания());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьБыстрыйОтборСервер()
	
	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		
		СтруктураБыстрогоОтбора.Свойство("Организация", Организация);
		СтруктураБыстрогоОтбора.Свойство("Организации", Организации);
		
		Если ЗначениеЗаполнено(Организации) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Организация", Организации,,, Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокКОформлению, "Организация", Организации,,, Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПоДокументамКОформлению, "Организация", Организации,,, Истина);
			
			ОрганизацииПредставление = Строка(Организации);
		КонецЕсли;
		
		ИнтеграцияИС.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "Ответственный", Ответственный, СтруктураБыстрогоОтбора);
		
	КонецЕсли;
	
	ЗаполнитьСписокВыбораОрганизацииПоСохраненнымНастройкам();
	
	Если ИнтеграцияЗЕРНО.НеобходимОтборПоДальнейшемуДействиюПриСозданииНаСервере(ДальнейшееДействие, СтруктураБыстрогоОтбора) Тогда
		УстановитьОтборПоДальнейшемуДействиюСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьДоступностьЭлементовСервер()
	
	Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.ПогашениеСДИЗЗЕРНО) Тогда
		Элементы.СтраницаКОформлению.Видимость = Ложь;
	ИначеЕсли Параметры.ОткрытьРаспоряжения Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКОформлению;
	КонецЕсли;
	
	НастроитьДоступностьКомандыВыполнитьОбмен();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьДоступностьКомандыВыполнитьОбмен()
	
	СобытияФормЗЕРНО.ДоступностьКомандыВыполнитьОбмен(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьОбменОбработкаОжидания()

	ИнтеграцияЗЕРНОСлужебныйКлиент.ПродолжитьВыполнениеОбмена(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораОрганизацииПоСохраненнымНастройкам()
	
	СобытияФормЗЕРНО.ЗаполнитьСписокВыбораОрганизацииПоСохраненнымНастройкам(ЭтотОбъект, "Оформлено");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
