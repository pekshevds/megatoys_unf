#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере формы.
// В процедуре осуществляется
// - инициализация параметров формы,
// - установка параметров функциональных опций формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОтображениеПериодаРегистрации = Формат(Объект.ПериодРегистрации, "ДФ='MMMM yyyy'");
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	
	Если Объект.ВалютаРасчетов = Объект.ВалютаДокумента Тогда
		
		КурсВалютаДокумента = Объект.Курс;
		КратностьВалютаДокумента = Объект.Кратность;
		
	Иначе
		
		КурсВалютыДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		КурсВалютаДокумента = КурсВалютыДокумента.Курс;
		КратностьВалютаДокумента = КурсВалютыДокумента.Кратность;
		
	КонецЕсли;
	
	// Заполним данные формы.
	ЦеныИВалюта = НСтр("ru = 'Док. %1 • Нач. %2'");
	ЦеныИВалюта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЦеныИВалюта, СокрЛП(Строка(Объект.ВалютаДокумента)), СокрЛП(Строка(Объект.ВалютаРасчетов)));
	
	УстановитьВидимостьОтВалюты();
	
	Если НЕ Константы.ФункциональнаяОпцияИспользоватьСовместительство.Получить() Тогда
		Если Элементы.Найти("СотрудникиСотрудникКод") <> Неопределено Тогда
			Элементы.СотрудникиСотрудникКод.Видимость = Ложь;
		КонецЕсли; 
	КонецЕсли;
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	НапоминанияПользователяУНФ.УстановитьОтображениеКомандОрганайзера(Элементы);
	ЭлектроннаяПочтаУНФ.УстановитьОтображениеКомандОтправкиСообщений(Элементы);
	
	// МобильныйКлиент
	МобильныйКлиентУНФ.НастроитьФормуОбъектаМобильныйКлиент(Элементы);
	// Конец МобильныйКлиент
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьВидимостьСтраницыНалоги();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
		И СтрНайти(ИсточникВыбора.ИмяФормы, "ФормаКалендаря") > 0 Тогда
		
		Объект.ПериодРегистрации = КонецДня(ВыбранноеЗначение);
		ЗарплатаИПерсоналКлиент.ПриИзмененииПериодаРегистрации(ЭтотОбъект);
		УстановитьВидимостьСтраницыНалоги();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДанныеДляИзмененияДаты = ДокументыУНФКлиент.ДанныеДляИзмененияДаты(ЭтотОбъект, Объект);
	Если ДанныеДляИзмененияДаты.ДатаНеМенялась Тогда
		Возврат;
	КонецЕсли;
	
	ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаРасчетовПриИзменении(Элемент)
	
	ПересчитатьСуммуПоВалюте(Элементы.Сотрудники.ТекущиеДанные, Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиСуммаПлатежаПриИзменении(Элемент)
	
	ПересчитатьСуммуПоВалюте(Элементы.Сотрудники.ТекущиеДанные, Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");

КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "удалить" Тогда
		Объект.ДокументОснование = Неопределено;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Неопределено);
		Модифицированность = Истина;
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "заполнить" Тогда
		ЗаполнитьПоОснованиюНачало();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "выбрать" Тогда
		// Выбрать основание
		СписокОснований = Новый СписокЗначений;
		СписокОснований.Добавить("Документ.НачислениеЗарплатыУНФ.ФормаВыбора", НСтр("ru = 'Начисление зарплаты'"));
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборТипаОснованияЗавершение", ЭтотОбъект);
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокОснований, Элементы.ДокументОснованиеНадпись);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "открыть" Тогда
		
		РаботаСФормойДокументаКлиент.ОткрытьФормуДокументаПоСсылке(Объект.ДокументОснование);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДекорацияРеквизитыПечатиНажатие(Элемент)
	
	ОткрытьФормуРеквизитыПечати();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ЗаполнитьИРассчитатьВыполнить формы.
//
Процедура ЗаполнитьПоОстаткам(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Не заполнено подразделение'");
		Сообщение.Поле = "Объект.СтруктурнаяЕдиница";
 		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПоОстаткамНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ЗаполнитьИРассчитатьВыполнить формы.
//
Процедура ЗаполнитьПоОстаткамСУчетомПредыдущихПериодовРегистрации(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Не заполнено подразделение'");
		Сообщение.Поле = "Объект.СтруктурнаяЕдиница";
 		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПоОстаткамСУчетомПредыдущихПериодовНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПодразделению(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Не заполнено подразделение'");
		Сообщение.Поле = "Объект.СтруктурнаяЕдиница";
 		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПоПодразделениюНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события Регулирования реквизита ПериодРегистрации
//
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаИПерсоналКлиент.ПриРегулированииПериодаРегистрации(ЭтотОбъект, Направление);
	ЗарплатаИПерсоналКлиент.ПриИзмененииПериодаРегистрации(ЭтотОбъект);
	УстановитьВидимостьСтраницыНалоги();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события НачалоВыбора реквизита ПериодРегистрации
//
Процедура ПериодРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		ДатаКалендаряПриОткрытии = Объект.ПериодРегистрации;
	Иначе
		ДатаКалендаряПриОткрытии = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ФормаКалендаря", ОбщегоНазначенияУНФКлиент.ПараметрыОткрытияФормыКалендаря(
		ДатаКалендаряПриОткрытии), ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыборТипаОснованияЗавершение(ВыбранноеИмяФормы, Параметры) Экспорт
	
	Если ВыбранноеИмяФормы <> Неопределено Тогда
		
		СтруктураПараметровОтбора = Новый Структура();
		_ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
		ОткрытьФорму(ВыбранноеИмяФормы.Значение, СтруктураПараметровОтбора, ЭтотОбъект, ,,,_ОповещениеОЗакрытии);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьСтраницыНалоги()
	
	Элементы.СтраницаНалогиНаДоходы.Видимость = (Объект.ПериодРегистрации >= РегламентированнаяОтчетностьУСН.ДатаОбязательногоПримененияЕНП());
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснованиеЗавершение(ВыбранноеЗначение, Параметры) Экспорт

	Если ВыбранноеЗначение <> Неопределено Тогда
		Объект.ДокументОснование = ВыбранноеЗначение;
		Элементы.ДокументОснованиеНадпись.Заголовок = 
			РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(ВыбранноеЗначение);
		Модифицированность = Истина;
		
		ЗаполнитьПоОснованиюНачало();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюНачало() Экспорт

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьВыполнитьЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения, 
		НСтр("ru = 'Заполнить документ по выбранному основанию?'"), 
		РежимДиалогаВопрос.ДаНет, 0);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВыполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоДокументу();
	КонецЕсли;

КонецПроцедуры  // ЗаполнитьВыполнить()

&НаСервере
Процедура ЗаполнитьПоДокументу()
	
	Объект.Сотрудники.Очистить();
	Объект.НалогиНаДоходы.Очистить();
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(Объект.ДокументОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
КонецПроцедуры // ЗаполнитьПоДокументу()

&НаКлиенте
Процедура ОбработатьИзмененияРеквизитовПечати(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ПечатьДокументовУНФКлиент.ОбновитьЗначенияРеквизитовПечати(ЭтотОбъект, Результат.ИзмененныеРеквизиты);
		
		Если Результат.Свойство("Команда") Тогда
			
			Подключаемый_ВыполнитьКоманду(Результат.Команда);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет табличную часть Сотрудники остатками по начислениям.
//
Процедура ЗаполнитьПоОстаткамНаСервере()	
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьПоОстаткамНаСервере();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
КонецПроцедуры

&НаСервере
// Процедура заполняет табличную часть Сотрудники остатками по начислениям за текущий и предыдущий периоды.
//
Процедура ЗаполнитьПоОстаткамСУчетомПредыдущихПериодовНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьПоОстаткамСУчетомПредыдущихПериодов();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
КонецПроцедуры

&НаСервере
// Процедура заполняет табличную часть Сотрудники по подразделению.
//
Процедура ЗаполнитьПоПодразделениюНаСервере()	
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьПоПодразделениюНаСервере();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты)
	
	ДокументыУНФ.ДатаПриИзменении(ДанныеДляИзмененияДаты, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ДокументыУНФ.ОрганизацияПриИзменении(ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
// Процедура заполняет табличную часть Сотрудники остатками по начислениям.
//
Процедура ПересчитатьСуммуПоВалюте(СтрокаТабличнойЧасти, ИзмененоНачисление, ИзмененоКВыдаче, ДополнительныеПараметры = Неопределено)
	
	//
	// Если изменены обе валюты, расчет суммы выдачи происходит по сумме начисления
	//
	
	Если ИзмененоНачисление Тогда
		
		Если ДополнительныеПараметры <> Неопределено Тогда
			
			ПараметрыТекущегоКурса = Новый Структура;
			ПараметрыТекущегоКурса.Вставить("Валюта",	ДополнительныеПараметры.ВалютаРасчетовПередИзменением);
			ПараметрыТекущегоКурса.Вставить("Курс",		ДополнительныеПараметры.КурсПередИзменением);
			ПараметрыТекущегоКурса.Вставить("Кратность",ДополнительныеПараметры.КратностьПередИзменением);
			
			ПараметрыНовогоКурса = Новый Структура;
			ПараметрыНовогоКурса.Вставить("Валюта",		Объект.ВалютаРасчетов);
			ПараметрыНовогоКурса.Вставить("Курс",		Объект.Курс);
			ПараметрыНовогоКурса.Вставить("Кратность",	Объект.Кратность);
			
			СтрокаТабличнойЧасти.СуммаРасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СтрокаТабличнойЧасти.СуммаРасчетов, ПараметрыТекущегоКурса, ПараметрыНовогоКурса);
			
		КонецЕсли;
		
		ПараметрыТекущегоКурса = Новый Структура;
		ПараметрыТекущегоКурса.Вставить("Валюта",	ДополнительныеПараметры.ВалютаРасчетов);
		ПараметрыТекущегоКурса.Вставить("Курс",		ДополнительныеПараметры.Курс);
		ПараметрыТекущегоКурса.Вставить("Кратность",ДополнительныеПараметры.Кратность);
		
		ПараметрыНовогоКурса = Новый Структура;
		ПараметрыНовогоКурса.Вставить("Валюта",		Объект.ВалютаДокумента);
		ПараметрыНовогоКурса.Вставить("Курс",		КурсВалютаДокумента);
		ПараметрыНовогоКурса.Вставить("Кратность",	КратностьВалютаДокумента);
		
		СтрокаТабличнойЧасти.СуммаПлатежа = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СтрокаТабличнойЧасти.СуммаРасчетов, ПараметрыТекущегоКурса, ПараметрыНовогоКурса);
		
	ИначеЕсли ИзмененоКВыдаче Тогда
		
		Если ДополнительныеПараметры <> Неопределено Тогда
			
			ПараметрыТекущегоКурса = Новый Структура;
			ПараметрыТекущегоКурса.Вставить("Валюта",	ДополнительныеПараметры.ВалютаДокументаПередИзменением);
			ПараметрыТекущегоКурса.Вставить("Курс",		ДополнительныеПараметры.КурсВалютаДокументаПередИзменением);
			ПараметрыТекущегоКурса.Вставить("Кратность",ДополнительныеПараметры.КратностьВалютаДокументаПередИзменением);
			
			ПараметрыНовогоКурса = Новый Структура;
			ПараметрыНовогоКурса.Вставить("Валюта",		Объект.ВалютаДокумента);
			ПараметрыНовогоКурса.Вставить("Курс",		КурсВалютаДокумента);
			ПараметрыНовогоКурса.Вставить("Кратность",	КратностьВалютаДокумента);
			
			СтрокаТабличнойЧасти.СуммаПлатежа = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СтрокаТабличнойЧасти.СуммаПлатежа, ПараметрыТекущегоКурса, ПараметрыНовогоКурса);
			
		КонецЕсли;
		
		ПараметрыТекущегоКурса = Новый Структура;
		ПараметрыТекущегоКурса.Вставить("Валюта",	Объект.ВалютаДокумента);
		ПараметрыТекущегоКурса.Вставить("Курс",		КурсВалютаДокумента);
		ПараметрыТекущегоКурса.Вставить("Кратность",КратностьВалютаДокумента);
		
		ПараметрыНовогоКурса = Новый Структура;
		ПараметрыНовогоКурса.Вставить("Валюта",		Объект.ВалютаРасчетов);
		ПараметрыНовогоКурса.Вставить("Курс",		Объект.Курс);
		ПараметрыНовогоКурса.Вставить("Кратность",	Объект.Кратность);
		
		СтрокаТабличнойЧасти.СуммаРасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СтрокаТабличнойЧасти.СуммаПлатежа, ПараметрыТекущегоКурса, ПараметрыНовогоКурса);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет табличную часть Сотрудники остатками по начислениям.
//
Процедура УстановитьВидимостьОтВалюты()
	
	ВалютаРасчетовОтличаетсяОтВалютыДокумента = (Объект.ВалютаДокумента <> Объект.ВалютаРасчетов);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СотрудникиСуммаРасчетов", "Видимость",
		ВалютаРасчетовОтличаетсяОтВалютыДокумента);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СотрудникиИтогСуммаРасчетов", "Видимость",
		ВалютаРасчетовОтличаетсяОтВалютыДокумента);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СотрудникиВалютаРасчетов", "Видимость",
		ВалютаРасчетовОтличаетсяОтВалютыДокумента);
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь)
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ТолькоПросмотр", 			ЭтотОбъект.ТолькоПросмотр);
	СтруктураПараметров.Вставить("ВалютаДокумента",			Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсВалютаДокумента",		КурсВалютаДокумента);
	СтруктураПараметров.Вставить("КратностьВалютаДокумента",КратностьВалютаДокумента);
	
	СтруктураПараметров.Вставить("ВалютаРасчетов",			Объект.ВалютаРасчетов);
	СтруктураПараметров.Вставить("Курс",					Объект.Курс);
	СтруктураПараметров.Вставить("Кратность",				Объект.Кратность);
	
	СтруктураПараметров.Вставить("Организация",				Компания);
	СтруктураПараметров.Вставить("ДатаДокумента",			Объект.Дата);
	СтруктураПараметров.Вставить("ПересчитатьЦеныПоВалюте",	Ложь);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",	Ложь);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВалютаРасчетовПередИзменением", Объект.ВалютаРасчетов);
	ДополнительныеПараметры.Вставить("КурсПередИзменением" ,Объект.Курс);
	ДополнительныеПараметры.Вставить("КратностьПередИзменением" ,Объект.Кратность);
	
	ДополнительныеПараметры.Вставить("ВалютаДокументаПередИзменением", Объект.ВалютаДокумента);
	ДополнительныеПараметры.Вставить("КурсВалютаДокументаПередИзменением" ,КурсВалютаДокумента);
	ДополнительныеПараметры.Вставить("КратностьВалютаДокументаПередИзменением" ,КратностьВалютаДокумента);
	
	ОткрытьФорму("Документ.ПлатежнаяВедомость.Форма.ФормаВалюта", СтруктураПараметров, , , , ,
		Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект,
		ДополнительныеПараметры), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураЦеныИВалюта = Результат;
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда
		
		Объект.ВалютаДокумента		= СтруктураЦеныИВалюта.ВалютаДокумента;
		КурсВалютаДокумента			= СтруктураЦеныИВалюта.КурсВалютаДокумента;
		КратностьВалютаДокумента	= СтруктураЦеныИВалюта.КратностьВалютаДокумента;
		
		Объект.ВалютаРасчетов 	= СтруктураЦеныИВалюта.ВалютаРасчетов;
		Объект.Курс 			= СтруктураЦеныИВалюта.Курс;
		Объект.Кратность 		= СтруктураЦеныИВалюта.Кратность;
		
		// Пересчитываем цены по валюте.
		Если СтруктураЦеныИВалюта.ПересчитатьЦеныПоВалюте Тогда
			
			Для каждого СтрокаТабличнойЧасти Из Объект.Сотрудники Цикл
				
				ПересчитатьСуммуПоВалюте(СтрокаТабличнойЧасти, СтруктураЦеныИВалюта.ИзмененаВалютаРасчетов, СтруктураЦеныИВалюта.ИзмененаВалютаДокумента, ДополнительныеПараметры);
				
			КонецЦикла; 
			
		ИначеЕсли СтруктураЦеныИВалюта.ВалютаРасчетов <> ДополнительныеПараметры.ВалютаРасчетовПередИзменением 
			И СтруктураЦеныИВалюта.ВалютаДокумента <> ДополнительныеПараметры.ВалютаДокументаПередИзменением Тогда
			
			// пропустить
			
		ИначеЕсли СтруктураЦеныИВалюта.ВалютаРасчетов <> ДополнительныеПараметры.ВалютаРасчетовПередИзменением 
			ИЛИ СтруктураЦеныИВалюта.ВалютаДокумента <> ДополнительныеПараметры.ВалютаДокументаПередИзменением Тогда
			
			Для каждого СтрокаТабличнойЧасти Из Объект.Сотрудники Цикл
				
				ПересчитатьСуммуПоВалюте(СтрокаТабличнойЧасти, Ложь, Истина, ДополнительныеПараметры);
				
			КонецЦикла; 
			
		КонецЕсли;
		
		УстановитьВидимостьОтВалюты();
		
	КонецЕсли;
	
	// Заполним данные формы.
	ЦеныИВалюта = НСтр("ru = 'Док %1 • Нач. %2'");
	ЦеныИВалюта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЦеныИВалюта, СокрЛП(Строка(Объект.ВалютаДокумента)), СокрЛП(Строка(Объект.ВалютаРасчетов)));
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
Процедура ОткрытьФормуРеквизитыПечати()

	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзмененияРеквизитовПечати", ЭтотОбъект);
	ОткрытьФорму("Обработка.РеквизитыПечати.Форма.РеквизитыПечатиПлатежнаяВедомость", Новый Структура("КонтекстПечати", Объект), ЭтотОбъект, , , , ОписаниеОповещения);
		
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
