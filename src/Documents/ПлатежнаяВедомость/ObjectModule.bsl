#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик заполнения на основании документа ЗаказПоставщику.
//
// Параметры:
//	ДокументСсылкаЗаказПоставщику - ДокументСсылка.ЗаказПоставщику.
//	
Процедура ЗаполнитьПоНачислениюЗарплаты(ДанныеЗаполнения) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	
	// Заполним данные из табличной части документа.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачислениеЗарплатыУНФ.Организация КАК Организация,
	|	НачислениеЗарплатыУНФ.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	НачислениеЗарплатыУНФ.ВалютаДокумента КАК ВалютаДокумента,
	|	НачислениеЗарплатыУНФ.ПериодРегистрации КАК ПериодРегистрации
	|ИЗ
	|	Документ.НачислениеЗарплатыУНФ КАК НачислениеЗарплатыУНФ
	|ГДЕ
	|	НачислениеЗарплатыУНФ.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачислениеЗарплатыНалогиНаДоходы.Сотрудник КАК Сотрудник,
	|	НачислениеЗарплатыНалогиНаДоходы.ВидНачисленияУдержания КАК ВидНачисленияУдержания,
	|	СУММА(НачислениеЗарплатыНалогиНаДоходы.Сумма) КАК Сумма,
	|	СУММА(НачислениеЗарплатыНалогиНаДоходы.СуммаСПревышения) КАК СуммаСПревышения
	|ИЗ
	|	Документ.НачислениеЗарплатыУНФ.НалогиНаДоходы КАК НачислениеЗарплатыНалогиНаДоходы
	|ГДЕ
	|	НачислениеЗарплатыНалогиНаДоходы.ВидНачисленияУдержания = ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.НалогНаДоходы)
	|	И НачислениеЗарплатыНалогиНаДоходы.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	НачислениеЗарплатыНалогиНаДоходы.ВидНачисленияУдержания,
	|	НачислениеЗарплатыНалогиНаДоходы.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачислениеЗарплатыНачисленияУдержания.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА НачислениеЗарплатыНачисленияУдержания.ВидНачисленияУдержания.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыНачисленийИУдержаний.Начисление)
	|			ТОГДА НачислениеЗарплатыНачисленияУдержания.Сумма
	|		ИНАЧЕ -НачислениеЗарплатыНачисленияУдержания.Сумма
	|	КОНЕЦ КАК СуммаРасчетов,
	|	ВЫБОР
	|		КОГДА НачислениеЗарплатыНачисленияУдержания.ВидНачисленияУдержания.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыНачисленийИУдержаний.Начисление)
	|			ТОГДА НачислениеЗарплатыНачисленияУдержания.Сумма
	|		ИНАЧЕ -НачислениеЗарплатыНачисленияУдержания.Сумма
	|	КОНЕЦ КАК СуммаПлатежа
	|ПОМЕСТИТЬ ВременнаяТаблицаСуммыНачисленийИУдержаний
	|ИЗ
	|	Документ.НачислениеЗарплатыУНФ.НачисленияУдержания КАК НачислениеЗарплатыНачисленияУдержания
	|ГДЕ
	|	НачислениеЗарплатыНачисленияУдержания.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачислениеЗарплатыУНФНалогиНаДоходы.Сотрудник,
	|	-НачислениеЗарплатыУНФНалогиНаДоходы.Сумма,
	|	-НачислениеЗарплатыУНФНалогиНаДоходы.Сумма
	|ИЗ
	|	Документ.НачислениеЗарплатыУНФ.НалогиНаДоходы КАК НачислениеЗарплатыУНФНалогиНаДоходы
	|ГДЕ
	|	НачислениеЗарплатыУНФНалогиНаДоходы.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачислениеЗарплатыУНФПогашениеЗаймов.Сотрудник,
	|	-(НачислениеЗарплатыУНФПогашениеЗаймов.ПогашеноЗайма + НачислениеЗарплатыУНФПогашениеЗаймов.ПогашеноПроцентов),
	|	-(НачислениеЗарплатыУНФПогашениеЗаймов.ПогашеноЗайма + НачислениеЗарплатыУНФПогашениеЗаймов.ПогашеноПроцентов)
	|ИЗ
	|	Документ.НачислениеЗарплатыУНФ.ПогашениеЗаймов КАК НачислениеЗарплатыУНФПогашениеЗаймов
	|ГДЕ
	|	НачислениеЗарплатыУНФПогашениеЗаймов.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаСуммыНачисленийИУдержаний.Сотрудник КАК Сотрудник,
	|	СУММА(ВременнаяТаблицаСуммыНачисленийИУдержаний.СуммаРасчетов) КАК СуммаРасчетов,
	|	СУММА(ВременнаяТаблицаСуммыНачисленийИУдержаний.СуммаПлатежа) КАК СуммаПлатежа
	|ИЗ
	|	ВременнаяТаблицаСуммыНачисленийИУдержаний КАК ВременнаяТаблицаСуммыНачисленийИУдержаний
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаСуммыНачисленийИУдержаний.Сотрудник
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВременнаяТаблицаСуммыНачисленийИУдержаний.СуммаРасчетов) > 0";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	РезультатЗапросаШапка = МассивРезультатов[0];
	РезультатЗапросаНалогиНаДоходы = МассивРезультатов[1];
	РезультатЗапросаСотрудники = МассивРезультатов[3];
	Выборка = РезультатЗапросаШапка.Выбрать();
	
	Если НЕ РезультатЗапросаШапка.Пустой() Тогда
		
		// Заполним реквизиты шапки.
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		
		// Заполним таблицу Сотрудники
		ВыборкаСотрудники = РезультатЗапросаСотрудники.Выбрать();
		Пока ВыборкаСотрудники.Следующий() Цикл
			НоваяСтрока = Сотрудники.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСотрудники);
		КонецЦикла;

		ВыборкаНалогиНаДоходы = РезультатЗапросаНалогиНаДоходы.Выбрать();
		Пока ВыборкаНалогиНаДоходы.Следующий() Цикл
			НоваяСтрока = НалогиНаДоходы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаНалогиНаДоходы);
		КонецЦикла;
		
	КонецЕсли;
	
	СуммаДокумента = Сотрудники.Итог("СуммаПлатежа");
	
КонецПроцедуры // ЗаполнитьПоЗаказПоставщику()

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.НачислениеЗарплатыУНФ")] = "ЗаполнитьПоНачислениюЗарплаты";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	СуммаДокумента = Сотрудники.Итог("СуммаПлатежа");
	
КонецПроцедуры // ПередЗаписью()

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Процедура заполняет табличную часть Сотрудники остатками по начислениям.
//
Процедура ЗаполнитьПоОстаткамНаСервере() Экспорт
	
	Если ВидОперации = Перечисления.ВидыОперацийПлатежнаяВедомость.Зарплата Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РасчетыСПерсоналомОстатки.Сотрудник КАК Сотрудник,
		|	СУММА(ВЫБОР
		|			КОГДА &ВалютаРасчетов = &ВалютаДокумента
		|				ТОГДА РасчетыСПерсоналомОстатки.СуммаВалОстаток
		|			ИНАЧЕ ВЫРАЗИТЬ(РасчетыСПерсоналомОстатки.СуммаВалОстаток * &Курс / &Кратность КАК ЧИСЛО(15, 2))
		|		КОНЕЦ) КАК СуммаПлатежа,
		|	СУММА(РасчетыСПерсоналомОстатки.СуммаВалОстаток) КАК СуммаРасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСПерсоналом.Остатки(
		|			,
		|			Организация = &Организация
		|				И ПериодРегистрации = &ПериодРегистрации
		|				И Валюта = &ВалютаРасчетов
		|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК РасчетыСПерсоналомОстатки
		|ГДЕ
		|	РасчетыСПерсоналомОстатки.СуммаВалОстаток > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСПерсоналомОстатки.Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	РасчетыСПерсоналомОстатки.Сотрудник.Наименование";
		
		Запрос.УстановитьПараметр("ПериодРегистрации", 	ПериодРегистрации);
		Запрос.УстановитьПараметр("Организация", 		Константы.УчетПоКомпании.Компания(Организация));
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
		Запрос.УстановитьПараметр("ВалютаРасчетов",		ВалютаРасчетов);
		Запрос.УстановитьПараметр("ВалютаДокумента",	ВалютаДокумента);
		Запрос.УстановитьПараметр("Курс",				Курс);
		Запрос.УстановитьПараметр("Кратность",			Кратность);
		
		Сотрудники.Загрузить(Запрос.Выполнить().Выгрузить());

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПлатежнаяВедомость.Аванс Тогда	
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'При выплате аванса заполнение по остаткам не предусмотрено!'");
 		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет табличную часть Сотрудники остатками по начислениям.
//
Процедура ЗаполнитьПоОстаткамСУчетомПредыдущихПериодов() Экспорт
	
	Если ВидОперации = Перечисления.ВидыОперацийПлатежнаяВедомость.Зарплата Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РасчетыСПерсоналомОстатки.Сотрудник КАК Сотрудник,
		|	СУММА(ВЫБОР
		|			КОГДА &ВалютаРасчетов = &ВалютаДокумента
		|				ТОГДА РасчетыСПерсоналомОстатки.СуммаВалОстаток
		|			ИНАЧЕ ВЫРАЗИТЬ(РасчетыСПерсоналомОстатки.СуммаВалОстаток * &Курс / &Кратность КАК ЧИСЛО(15, 2))
		|		КОНЕЦ) КАК СуммаПлатежа,
		|	СУММА(РасчетыСПерсоналомОстатки.СуммаВалОстаток) КАК СуммаРасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСПерсоналом.Остатки(
		|			,
		|			Организация = &Организация
		|				И ПериодРегистрации <= &ПериодРегистрации
		|				И Валюта = &ВалютаРасчетов
		|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК РасчетыСПерсоналомОстатки
		|ГДЕ
		|	РасчетыСПерсоналомОстатки.СуммаВалОстаток > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСПерсоналомОстатки.Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	РасчетыСПерсоналомОстатки.Сотрудник.Наименование";
		
		Запрос.УстановитьПараметр("ПериодРегистрации", 	ПериодРегистрации);
		Запрос.УстановитьПараметр("Организация", 		Константы.УчетПоКомпании.Компания(Организация));
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
		Запрос.УстановитьПараметр("ВалютаРасчетов",		ВалютаРасчетов);
		Запрос.УстановитьПараметр("ВалютаДокумента",	ВалютаДокумента);
		Запрос.УстановитьПараметр("Курс",				Курс);
		Запрос.УстановитьПараметр("Кратность",			Кратность);
		
		Сотрудники.Загрузить(Запрос.Выполнить().Выгрузить());

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПлатежнаяВедомость.Аванс Тогда	
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'При выплате аванса заполнение по остаткам не предусмотрено!'");
 		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет табличную часть Сотрудники по подразделению.
//
Процедура ЗаполнитьПоПодразделениюНаСервере() Экспорт
	
	// Сотрудники:
	// 1. Уволенные, переведенные из 
	//  - на начало периода есть запись о принадлежности к указанному подразделению;
	// 2. Работающие.
	//  - на начало периода есть запись о принадлежности к указанному подразделению;
	// 3. Принятые на работу, переведенные в
	//  - в течении периода будет запись с указанным подразделением;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"
	// Пункты 1 и 2
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Максимум(СотрудникиСрезПоследних.Период) КАК Период
	|	,СотрудникиСрезПоследних.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ СотрудникиЧислящиесяНаНачалоПериода
	|ИЗ
	|	РегистрСведений.Сотрудники.СрезПоследних(&ПериодРегистрации, Организация = &Организация) КАК СотрудникиСрезПоследних
	|ГДЕ СотрудникиСрезПоследних.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|СГРУППИРОВАТЬ ПО СотрудникиСрезПоследних.Сотрудник, СотрудникиСрезПоследних.СтруктурнаяЕдиница
	|
	// Пункт 3
	|;Выбрать РАЗРЕШЕННЫЕ
	|	Сотрудники.Период КАК Период
	|	,Сотрудники.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ СотрудникиПереведенныеПринятыеВПериоде
	|ИЗ РегистрСведений.Сотрудники КАК Сотрудники
	|ГДЕ Сотрудники.Организация = &Организация
	|	И Сотрудники.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|	И Сотрудники.Период МЕЖДУ &ПериодРегистрации И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|
	// Результирующая выборка
	|;Выбрать РАЗРЕШЕННЫЕ
	|	СотрудникиЧислящиесяНаНачалоПериода.Сотрудник
	|ИЗ СотрудникиЧислящиесяНаНачалоПериода КАК СотрудникиЧислящиесяНаНачалоПериода
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ 
	|	СотрудникиПереведенныеПринятыеВПериоде.Сотрудник
	|ИЗ СотрудникиПереведенныеПринятыеВПериоде КАК СотрудникиПереведенныеПринятыеВПериоде";

	Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница",	СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("Организация",		Константы.УчетПоКомпании.Компания(Организация));
	
	Сотрудники.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли