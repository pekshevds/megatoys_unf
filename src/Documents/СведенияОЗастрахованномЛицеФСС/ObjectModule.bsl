///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	// Второстепенные реквизиты шапки заполняются в функции ОбновитьВторичныеДанные.
	ФиксацияИзменений.Очистить();
	
	// Заполнение ключевых реквизитов шапки, от которых строится учет.
	СНИЛС               = ОбъектКопирования.СНИЛС;
	Страхователь        = ОбъектКопирования.Страхователь;
	ГоловнаяОрганизация = ОбъектКопирования.ГоловнаяОрганизация;
	
	// Ссылки сотрудника и организации могут меняться если сотрудник был переведен, или уволен и принят.
	Если ЗначениеЗаполнено(СНИЛС) И ЗначениеЗаполнено(Страхователь) Тогда
		Организация    = Неопределено;
		Сотрудник      = Неопределено;
		ФизическоеЛицо = Неопределено;
	КонецЕсли;
	
	// Очистка результатов.
	КоличествоОшибокПроведения  = Неопределено;
	ОтключитьПроверкиПроведения = Ложь;
	РегистрацияСведений         = Неопределено;
	ХранилищеXML                = Неопределено;
	ДатаОтправки                = Неопределено;
	
	// Заполнение.
	ОбновитьВторичныеДанные();
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриемНаРаботу") Тогда
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "Организация, Сотрудник");
		Организация = РеквизитыОснования.Организация;
		Сотрудник   = РеквизитыОснования.Сотрудник;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Увольнение") Тогда
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "Организация, Сотрудник");
		Организация = РеквизитыОснования.Организация;
		Сотрудник   = РеквизитыОснования.Сотрудник;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.НесоответствиеСведенийОЗастрахованномЛицеСЭДО") Тогда
		ДанныеЗаполнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "Страхователь, СНИЛС, ФизическоеЛицо, ГоловнаяОрганизация, ФИО");
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Сотрудники") Тогда
		Сотрудник = ДанныеЗаполнения;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		ДатаОтправки        = Неопределено;
		РегистрацияСведений = Неопределено;
	КонецЕсли;
	
	// Заполнение ключевых реквизитов шапки, от которых строится учет.
	ЗаполнитьФизическоеЛицо();
	ЗаполнитьСтрахователя(Неопределено);
	
	// Учет строится от СНИЛС и страхователя, а ссылки сотрудника и организации могут устареть.
	ГоловнаяОрганизация = Неопределено;
	Организация         = Неопределено;
	Сотрудник           = Неопределено;
	
	// Заполнение.
	ОбновитьВторичныеДанные();
	
	// После обновления вторичных данных дозаполняются реквизиты, которые явно указаны в данных заполнения.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ФИО") Тогда
		ЗаполнитьПоФИО(ДанныеЗаполнения.ФИО);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьСНИЛС(Отказ);
	ПроверитьРеквизитыСотрудника(Отказ);
	ПроверитьСпособВыплатыПособий(Отказ);
	
	Если НеЧислилсяВОрганизации Или ЗначениеЗаполнено(ДатаУвольнения) Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "УдостоверениеЛичностиВид");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "УдостоверениеЛичностиДатаВыдачи");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "УдостоверениеЛичностиКемВыдан");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "УдостоверениеЛичностиНомер");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "СпособВыплатыПособия");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "СтатусНалогоплательщика");
	КонецЕсли;
	
	// Проверка что на дату нет других действующих сведений.
	Если Не ДополнительныеСвойства.Свойство("КритичныеПроверкиЗаполненияВыполнены") Тогда
		Ошибки = КритичныеОшибкиЗаполнения();
		Для Каждого Ошибка Из Ошибки Цикл
			Отказ = Истина;
			Ошибка.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	// Заполнение недостающих полей.
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаСоздания) Тогда
		ДатаСоздания = ТекущаяДата(); // АПК:143 Для фильтрации событий в журнале регистрации требуется дата сервера.
	КонецЕсли;
	
	// Далее - бизнес-логика, выход если она отключена.
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоПроведение = (РежимЗаписи = РежимЗаписиДокумента.Проведение
		Или (Проведен И РежимЗаписи = РежимЗаписиДокумента.Запись));
	
	Если Не ПометкаУдаления И Не ДополнительныеСвойства.Свойство("КритичныеПроверкиЗаполненияВыполнены") Тогда
		Ошибки = КритичныеОшибкиЗаполнения();
		Если Ошибки.Количество() > 0 Тогда
			ТекстыОшибок = Новый Массив;
			Для Каждого Ошибка Из Ошибки Цикл
				ТекстыОшибок.Добавить(Ошибка.Текст);
			КонецЦикла;
			ВызватьИсключение СтрСоединить(ТекстыОшибок, Символы.ПС);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоПроведение Тогда
		ТекстXML = Документы.СведенияОЗастрахованномЛицеФСС.ТекстXML(ЭтотОбъект);
		ЗаполнитьРегистрацию();
	Иначе
		ТекстXML = "";
	КонецЕсли;
	ХранилищеXML = Новый ХранилищеЗначения(ТекстXML, Новый СжатиеДанных(9));
	
	ЗначенияРеквизитовДоЗаписи = ЗначенияРеквизитовДоЗаписи();
	ДополнительныеСвойства.Вставить("ЗначенияРеквизитовДоЗаписи", ЗначенияРеквизитовДоЗаписи);
	
	Если ЗначениеЗаполнено(ДатаОтправки)
		И ЗначениеЗаполнено(ЗначенияРеквизитовДоЗаписи.ФизическоеЛицо)
		И ЗначенияРеквизитовДоЗаписи.ФизическоеЛицо <> ФизическоеЛицо Тогда
		ВызватьИсключение НСтр("ru = 'Недопустимо изменять физическое лицо в отправленном документе.'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияРеквизитовДоЗаписи = ДополнительныеСвойства.ЗначенияРеквизитовДоЗаписи;
	
	Если ЗначениеЗаполнено(РегистрацияСведений) Тогда
		ОбновитьДокументОснование   = (ЗначенияРеквизитовДоЗаписи.ЭтоНовый И Проведен);
		ОбновитьГоловнуюОрганизацию = ЗначенияРеквизитовДоЗаписи.ГоловнаяОрганизация <> ГоловнаяОрганизация;
		ОбновитьФизическоеЛицо      = ЗначенияРеквизитовДоЗаписи.ФизическоеЛицо <> ФизическоеЛицо;
		Если ОбновитьДокументОснование Или ОбновитьГоловнуюОрганизацию Или ОбновитьФизическоеЛицо Тогда
			УстановитьПривилегированныйРежим(Истина);
			РегистрацияОбъект = РегистрацияСведений.ПолучитьОбъект();
			РегистрацияОбъект.ДокументОснование   = Ссылка;
			РегистрацияОбъект.ГоловнаяОрганизация = ГоловнаяОрганизация;
			РегистрацияОбъект.ФизическоеЛицо      = ФизическоеЛицо;
			РегистрацияОбъект.СНИЛС               = СНИЛС;
			РегистрацияОбъект.Страхователь        = Страхователь;
			СЭДОФСС.ЗаписатьДокумент(РегистрацияОбъект, Истина, Ложь);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	КонецЕсли;
	
	РегистрыСведений.ЗастрахованныеЛицаСЭДО.ПриЗаписиСведений(ЭтотОбъект, ЗначенияРеквизитовДоЗаписи);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ОбработкаПроверкиЗаполнения

Процедура ПроверитьРеквизитыСотрудника(Отказ)
	Если НеЧислилсяВОрганизации Или ЗначениеЗаполнено(ДатаУвольнения) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоРезидент = Справочники.СтатусыНалогоплательщиковПоНДФЛ.ЭтоРезидент(СтатусНалогоплательщика);
	
	// ИНН.
	Если ЗначениеЗаполнено(СотрудникИНН) Тогда
		ТекстОшибки = "";
		Если Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(СотрудникИНН, Ложь, ТекстОшибки) Тогда
			Текст = НСтр("ru = 'Ошибка в ИНН %1: %2'");
			Текст = СтрШаблон(Текст, СотрудникИНН, ТекстОшибки);
			СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, "СотрудникИНН");
		КонецЕсли;
	КонецЕсли;
	
	// Удостоверение личности.
	ИменаРеквизитов = Новый Структура;
	ИменаРеквизитов.Вставить("Сотрудник",           "Сотрудник");
	ИменаРеквизитов.Вставить("ФизическоеЛицо",      "ФизическоеЛицо");
	ИменаРеквизитов.Вставить("ВидДокумента",        "УдостоверениеЛичностиВид");
	ИменаРеквизитов.Вставить("СерияДокумента",      "УдостоверениеЛичностиСерия");
	ИменаРеквизитов.Вставить("НомерДокумента",      "УдостоверениеЛичностиНомер");
	ИменаРеквизитов.Вставить("ДатаВыдачиДокумента", "УдостоверениеЛичностиДатаВыдачи");
	ИменаРеквизитов.Вставить("КемВыданДокумент",    "УдостоверениеЛичностиКемВыдан");
	ПрямыеВыплатыПособийСоциальногоСтрахования.ПроверитьДокументУдостоверяющийЛичность(Отказ, ЭтотОбъект, ИменаРеквизитов);
	
	СведенияОВидеДокумента = СЭДОФССПовтИсп.СведенияОВидеДокумента(УдостоверениеЛичностиВид);
	Если ЗначениеЗаполнено(УдостоверениеЛичностиВид)
		И Не ЗначениеЗаполнено(УдостоверениеЛичностиСрокДействия)
		И Документы.СведенияОЗастрахованномЛицеФСС.ЭтоВременноеУдостоверениеЛичности(СведенияОВидеДокумента.КодМВД) Тогда
		Текст = НСтр("ru = 'Не заполнен срок действия документа, удостоверяющего личность'");
		СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, "УдостоверениеЛичностиСрокДействия");
	ИначеЕсли ЗначениеЗаполнено(УдостоверениеЛичностиСрокДействия)
		И УдостоверениеЛичностиСрокДействия < ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()) Тогда
		Текст = НСтр("ru = 'Истек срок действия документа, удостоверяющего личность (%1)'");
		Текст = СтрШаблон(Текст, Формат(УдостоверениеЛичностиСрокДействия, "ДЛФ=D"));
		СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, "УдостоверениеЛичностиСрокДействия");
	КонецЕсли;
	
	// Разрешение на проживание.
	Если Документы.СведенияОЗастрахованномЛицеФСС.ТребуетсяВыгрузитьРазрешениеНаПроживание(ЭтотОбъект) Тогда
		Если Не ЗначениеЗаполнено(РазрешениеНаПроживаниеВид) Тогда
			ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "РазрешениеНаПроживаниеВид");
		Иначе
			ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "РазрешениеНаПроживаниеНомер");
			Вид = СЭДОФСС.СведенияОВидеРазрешенияНаПроживание(РазрешениеНаПроживаниеВид);
			Если Вид.ЭтоВНЖ Тогда
				ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "РазрешениеНаПроживаниеСерия");
				ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "РазрешениеНаПроживаниеДатаВыдачи");
			ИначеЕсли Вид.ЭтоРВП Тогда
				ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "РазрешениеНаПроживаниеСрокДействия");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Адрес регистрации.
	Если Документы.СведенияОЗастрахованномЛицеФСС.ТребуетсяВыгружатьАдресРегистрации(ЭтотОбъект)
		И Не Документы.СведенияОЗастрахованномЛицеФСС.ИндексЗаполняетсяАвтоматически(ЭтотОбъект, "АдресРегистрации") Тогда
		ТекстОшибки = ПроверитьИндексАдреса("АдресРегистрации");
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Текст = Метаданные().Реквизиты.АдресРегистрации.Представление() + ": " + ТекстОшибки;
			СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, "АдресРегистрации");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСНИЛС(Отказ)
	Если Не ЗначениеЗаполнено(СНИЛС) Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СНИЛС");
	Иначе
		ТекстОшибки = "";
		Если Не РегламентированныеДанныеКлиентСервер.СтраховойНомерПФРСоответствуетТребованиям(СНИЛС, ТекстОшибки) Тогда
			Текст = НСтр("ru = 'Ошибка в СНИЛС %1: %2'");
			Текст = СтрШаблон(Текст, СНИЛС, ТекстОшибки);
			СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, "СНИЛС");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьСпособВыплатыПособий(Отказ)
	Если НеЧислилсяВОрганизации Или ЗначениеЗаполнено(ДатаУвольнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ПочтовымПереводом Тогда
		Если Не ЗначениеЗаполнено(АдресПроживания) Тогда
			Текст = НСтр("ru = 'Адрес проживания не заполнен'");
			СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, "АдресПроживания");
		ИначеЕсли Не ЗначениеЗаполнено(АдресПроживанияФИАСДом) И Не ЗначениеЗаполнено(АдресПроживанияФИАСРО) Тогда
			Текст = НСтр("ru = 'Не заполнены коды ФИАС адреса проживания'");
			СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, "АдресПроживанияФИАСДом");
		Иначе
			Текст = ПроверитьИндексАдреса("АдресПроживания");
			Если ЗначениеЗаполнено(Текст) Тогда
				Текст = Метаданные().Реквизиты.АдресПроживания.Представление() + ": " + Текст;
				СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, "АдресПроживанияИндекс");
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.НаКартуМИР Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "КартаМИР");
	ИначеЕсли СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ЧерезБанк Тогда
		Если ЗначениеЗаполнено(БанкБИК) И ЗначениеЗаполнено(НомерСчета) Тогда
			РезультатПроверки = ПроверкиБЗК.РезультатПроверкиНомераСчета(НомерСчета, БанкБИК, БанкКоррСчет);
			Если Не РезультатПроверки.Успех Тогда
				СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, РезультатПроверки.Пояснение, "НомерСчета");
			КонецЕсли;
		Иначе
			ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "Банк");
			ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "БанкБИК");
			ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "НомерСчета");
		КонецЕсли;
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "БанкНаименование");
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьИндексАдреса(ИмяПоляАдрес)
	Индекс = ЭтотОбъект[ИмяПоляАдрес + "Индекс"];
	Если Не ЗначениеЗаполнено(Индекс) Тогда
		Возврат НСтр("ru = 'Не заполнен индекс.'");
	ИначеЕсли СтрДлина(Индекс) <> 6 Тогда
		Возврат СтрШаблон(НСтр("ru = 'Индекс занимает %1 символов, ожидалось 6.'"), СтрДлина(Индекс));
	Иначе
		ЛишниеСимволы = СтроковыеФункцииБЗККлиентСервер.УдалитьЦифрыИзСтроки(Индекс);
		Если Не ПустаяСтрока(ЛишниеСимволы) Тогда
			Если СтрДлина(ЛишниеСимволы) = 1 Тогда
				Текст = НСтр("ru = 'В индексе должны быть только цифры (%1 - не цифра).'");
			Иначе
				Текст = НСтр("ru = 'В индексе должны быть только цифры (%1 - не цифры).'");
			КонецЕсли;
			Возврат СтрШаблон(Текст, ЛишниеСимволы);
		КонецЕсли;
	КонецЕсли;
	Возврат "";
КонецФункции

Функция КритичныеОшибкиЗаполнения() Экспорт
	Ошибки = Новый Массив;
	
	// Если документ подготовлен к отправке, но не отправлен, то проверяется уникальность на дату.
	Если Не ПометкаУдаления И ЗначениеЗаполнено(ГоловнаяОрганизация) И ЗначениеЗаполнено(ФизическоеЛицо) И Не ЗначениеЗаполнено(ДатаОтправки) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Настройки = ЗапросыБЗК.НастройкиЗапросаКТаблице();
		Настройки.УчитыватьRLS = Ложь;
		Настройки.Количество   = 1;
		Настройки.Порядок      = "Дата Убыв";
		ЗапросыБЗК.ДобавитьОтбор(Настройки.Отбор, "ГоловнаяОрганизация", "=",  ГоловнаяОрганизация);
		ЗапросыБЗК.ДобавитьОтбор(Настройки.Отбор, "ФизическоеЛицо",      "=",  ФизическоеЛицо);
		ЗапросыБЗК.ДобавитьОтбор(Настройки.Отбор, "Дата",                ">=", НачалоДня(Дата));
		ЗапросыБЗК.ДобавитьОтбор(Настройки.Отбор, "Дата",                "<=", КонецДня(Дата));
		ЗапросыБЗК.ДобавитьОтбор(Настройки.Отбор, "Ссылка",              "<>", Ссылка);
		ЗапросыБЗК.ДобавитьОтбор(Настройки.Отбор, "ПометкаУдаления",     "=",  Ложь);
		ЗапросыБЗК.ДобавитьОтбор(Настройки.Отбор, "ДатаОтправки",        "=",  '00010101');
		Запрос = ЗапросыБЗК.ЗапросКТаблице(Метаданные.Документы.СведенияОЗастрахованномЛицеФСС, "Ссылка, Дата", Настройки);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'На %1 уже есть сведения о застрахованном лице от %2'");
			Сообщение.Текст = СтрШаблон(Сообщение.Текст, Формат(Дата, "ДЛФ=D"), Формат(Выборка.Дата, "ДЛФ=D"));
			Сообщение.Поле  = "Дата";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Ошибки.Добавить(Сообщение);
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("КритичныеПроверкиЗаполненияВыполнены", Истина);
	
	Возврат Ошибки;
КонецФункции

#КонецОбласти

#Область ПередЗаписью

Функция ЗначенияРеквизитовДоЗаписи()
	ИменаРеквизитов = "Дата, СНИЛС, Страхователь, ГоловнаяОрганизация, ФизическоеЛицо, ДатаОтправки, ПометкаУдаления, Проведен";
	ЭтоНовый = ЭтоНовый();
	Если ЭтоНовый Тогда
		Результат = ОбщегоНазначенияБЗК.ЗначенияСвойств(ЭтотОбъект, ИменаРеквизитов);
	Иначе
		Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);
	КонецЕсли;
	Результат.Вставить("ЭтоНовый", ЭтоНовый);
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьРегистрацию() Экспорт
	Если ЗначениеЗаполнено(РегистрацияСведений) Тогда
		Возврат;
	КонецЕсли;
	// Регистрация является продолжением текущего документа.
	// Но если документ - новый, то поле "Ссылка" может быть не заполнено.
	УстановитьПривилегированныйРежим(Истина);
	
	РегистрацияОбъект = Документы.РегистрацияСведенийОЗастрахованномЛицеФСС.СоздатьДокумент();
	ИменаПолей = "ФизическоеЛицо, ГоловнаяОрганизация, СНИЛС, Страхователь";
	ЗаполнитьЗначенияСвойств(РегистрацияОбъект, ЭтотОбъект, ИменаПолей);
	РегистрацияОбъект.ДокументОснование = Ссылка;
	СЭДОФСС.ЗаписатьДокумент(РегистрацияОбъект, Истина);
	
	РегистрацияСведений = РегистрацияОбъект.Ссылка;
КонецПроцедуры

#КонецОбласти

#Область ФиксацияВторичныхДанныхВДокументах

Функция ОбновитьВторичныеДанные(ПараметрыФиксации = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Модифицирован = Ложь;
	
	Если ОбъектЗафиксирован() Тогда
		Возврат Модифицирован;
	КонецЕсли;
	
	Если ПараметрыФиксации = Неопределено Тогда
		ПараметрыФиксации = Документы.СведенияОЗастрахованномЛицеФСС.ПараметрыФиксацииВторичныхДанных();
	КонецЕсли;
	
	// Первичными являются Страхователь и Физическое лицо.
	// Они заполняются только если пустые.
	
	Если ЗаполнитьФизическоеЛицо() Тогда
		Модифицирован = Истина;
	КонецЕсли;
	Если ЗаполнитьСтрахователя(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	// Организация, Головная организация и Сотрудник являются вторичными,
	// но заполняются в строго определенном порядке до заполнения остальных полей.
	
	Если ЗаполнитьОрганизацию() Тогда
		Модифицирован = Истина;
	КонецЕсли;
	Если ЗаполнитьГоловнуюОрганизацию() Тогда
		Модифицирован = Истина;
	КонецЕсли;
	Если ЗаполнитьСотрудника() Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьДанныеСтрахователя(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьФлажокНеЧислилсяВОрганизацииИДатуУвольнения(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьОтветственныхЛицОрганизации(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьКадровыеДанныеУполномоченногоПредставителя(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьКадровыеДанныеФизическогоЛица(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьДатуРожденияИПолПоСНИЛС(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьКодСтраныГражданства(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьРазрешениеНаПроживание(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьСпособВыплатыПособия(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьКонтактыФизическогоЛица(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьКодыАдреса(ПараметрыФиксации, "АдресРегистрации") Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьКодыАдреса(ПараметрыФиксации, "АдресПроживания") Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВторичныеДанныеОбновлены", Истина);
	Возврат Модифицирован;
КонецФункции

Функция ОбъектЗафиксирован() Экспорт
	Возврат Документы.СведенияОЗастрахованномЛицеФСС.ОбъектЗафиксирован(ЭтотОбъект);
КонецФункции

Функция ЗаполнитьФизическоеЛицо(ПараметрыФиксации = Неопределено)
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Возврат Ложь;
	КонецЕсли;
	// Если физическое лицо не заполнено, то оно может быть найдено по СНИЛС.
	Если ЗначениеЗаполнено(СНИЛС) Тогда
		РезультатПоиска = ФизическиеЛицаЗарплатаКадры.ФизическоеЛицоПоСНИЛСИлиФИО(СНИЛС, "", "", "");
		Если ЗначениеЗаполнено(РезультатПоиска.ФизическоеЛицо) Тогда
			ФизическоеЛицо = РезультатПоиска.ФизическоеЛицо;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	// Физическое лицо безусловно обновляется из кадровых данных сотрудника, если оно там выбрано.
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		РеквизитыСотрудника = РеквизитыСотрудника();
		Если РеквизитыСотрудника.ФизическоеЛицо <> ФизическоеЛицо
			И ЗначениеЗаполнено(РеквизитыСотрудника.ФизическоеЛицо) Тогда
			ФизическоеЛицо = РеквизитыСотрудника.ФизическоеЛицо;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция ЗаполнитьГоловнуюОрганизацию(ПараметрыФиксации = Неопределено)
	Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если ЗначениеЗаполнено(Страхователь) Тогда
		ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Страхователь);
		Возврат Истина;
	ИначеЕсли ЗначениеЗаполнено(Организация) Тогда
		ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
		Возврат Истина;
	ИначеЕсли ЗначениеЗаполнено(Сотрудник) Тогда
		ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(РеквизитыСотрудника().ГоловнаяОрганизация);
		Возврат ЗначениеЗаполнено(ГоловнаяОрганизация);
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция ЗаполнитьСотрудника(ПараметрыФиксации = Неопределено)
	Реквизиты = Новый Структура("Сотрудник");
	
	ТекущийДоговор = ТекущийДоговорССотрудникомПоСтрахователю();
	Если ЗначениеЗаполнено(ТекущийДоговор.Страхователь) И ТекущийДоговор.Страхователь = Страхователь Тогда
		Реквизиты.Сотрудник = ТекущийДоговор.Сотрудник;
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЗаполнитьОрганизацию(ПараметрыФиксации = Неопределено)
	// Организация нужна для заполнения страхователя. Никакой другой полезной функции у нее нет.
	Если ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	ТекущийДоговор = ТекущийДоговорССотрудникомПоСтрахователю();
	Если ЗначениеЗаполнено(ТекущийДоговор.Организация) Тогда
		Организация = ТекущийДоговор.Организация;
		Возврат Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(Страхователь) Тогда
		Организация = Страхователь;
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция ЗаполнитьФлажокНеЧислилсяВОрганизацииИДатуУвольнения(ПараметрыФиксации)
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		Возврат Ложь; // Документ не поддерживает упрощенный кадровый учет.
	КонецЕсли;
	
	Реквизиты = Новый Структура("ДатаУвольнения, НеЧислилсяВОрганизации", '00010101', Ложь);
	
	ТекущийДоговор = ТекущийДоговорССотрудникомПоСтрахователю();
	Если ТекущийДоговор.Страхователь <> Страхователь Тогда
		Реквизиты.НеЧислилсяВОрганизации = Истина;
	ИначеЕсли ЗначениеЗаполнено(ТекущийДоговор.ДатаУвольнения) Тогда
		Реквизиты.ДатаУвольнения = ТекущийДоговор.ДатаУвольнения;
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЗаполнитьСтрахователя(ПараметрыФиксации)
	Если ЗначениеЗаполнено(Страхователь) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЕстьИзменения = Ложь;
	Если ЗаполнитьОрганизацию(ПараметрыФиксации) Тогда
		ЕстьИзменения = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(Организация) Тогда
		Страхователь = СЭДОФСС.СтраховательОрганизации(Организация, Дата);
	КонецЕсли;
	Если ЗначениеЗаполнено(Страхователь) Тогда
		ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Страхователь);
		ЕстьИзменения = Истина;
		ОбновитьКадровыеДанныеПриИзмененииСтрахователя();
	КонецЕсли;
	
	Возврат ЕстьИзменения;
КонецФункции

Функция ЗаполнитьДанныеСтрахователя(ПараметрыФиксации)
	// Головная организация заполняется безусловно, т.к. определяет права.
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Страхователь);
	
	Реквизиты = Новый Структура("СтраховательНаименование, СтраховательЭлектроннаяПочта, СтраховательТелефон, КодПодчиненностиФСС");
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ИменаПолей = "НаимЮЛПол, НаимЮЛСокр, АдресЭлектроннойПочтыОрганизации, ТелОрганизации_JSON, КодПодчиненностиФСС";
		Сведения = ЗарплатаКадры.СведенияОбОрганизации(Страхователь, ИменаПолей, Дата);
		
		Если ЗначениеЗаполнено(Сведения.НаимЮЛСокр) И СтрДлина(Сведения.НаимЮЛПол) > 150 Тогда
			Реквизиты.СтраховательНаименование = Сведения.НаимЮЛСокр;
		Иначе
			Реквизиты.СтраховательНаименование = Сведения.НаимЮЛПол;
		КонецЕсли;
		Реквизиты.СтраховательЭлектроннаяПочта = Сведения.АдресЭлектроннойПочтыОрганизации;
		Реквизиты.СтраховательТелефон          = Сведения.ТелОрганизации_JSON;
		Реквизиты.КодПодчиненностиФСС          = Сведения.КодПодчиненностиФСС;
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЗаполнитьОтветственныхЛицОрганизации(ПараметрыФиксации)
	ИменаЗаполняемыхПолей =
	"УполномоченныйПредставитель,
	|УполномоченныйПредставительДолжность,
	|УполномоченныйПредставительОснованиеПодписи";
	
	Реквизиты = Новый Структура(ИменаЗаполняемыхПолей);
	Если ФиксацияВторичныхДанныхВДокументах.РеквизитыШапкиЗафиксированы(ЭтотОбъект, Реквизиты) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ИменаРолей = "УполномоченныйПоПрямымВыплатамФСС";
		ОтветственныеЛица = ПодписиДокументов.ОтветственныеЛицаОрганизации(Организация, ИменаРолей, Дата);
		Реквизиты.УполномоченныйПредставитель                 = ОтветственныеЛица.УполномоченныйПоПрямымВыплатамФСС;
		Реквизиты.УполномоченныйПредставительДолжность        = ОтветственныеЛица.УполномоченныйПоПрямымВыплатамФССДолжность;
		Реквизиты.УполномоченныйПредставительОснованиеПодписи = ОтветственныеЛица.УполномоченныйПоПрямымВыплатамФССОснованиеПодписи;
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЗаполнитьКадровыеДанныеУполномоченногоПредставителя(ПараметрыФиксации)
	ИменаЗаполняемыхПолей = "УполномоченныйПредставительФИО";
	
	Реквизиты = Новый Структура(ИменаЗаполняемыхПолей);
	Если ФиксацияВторичныхДанныхВДокументах.РеквизитыШапкиЗафиксированы(ЭтотОбъект, Реквизиты) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УполномоченныйПредставитель) Тогда
		Реквизиты.УполномоченныйПредставительФИО = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			УполномоченныйПредставитель,
			"ФИО"));
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЗаполнитьКадровыеДанныеФизическогоЛица(ПараметрыФиксации)
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		// В этом случае дата рождения заполняется в процедуре ЗаполнитьДатуРожденияПоСНИЛС.
		Возврат Ложь;
	КонецЕсли;
	
	Реквизиты = Новый Структура(
	"СотрудникФамилия,
	|СотрудникИмя,
	|СотрудникОтчество,
	|ДатаРождения,
	|Гражданство,
	|Пол,
	|СНИЛС,
	|УдостоверениеЛичностиВид,
	|УдостоверениеЛичностиСерия,
	|УдостоверениеЛичностиНомер,
	|УдостоверениеЛичностиДатаВыдачи,
	|УдостоверениеЛичностиКемВыдан,
	|УдостоверениеЛичностиСрокДействия,
	|СтатусНалогоплательщика,
	|СотрудникИНН,
	|ПричинаПредоставленияЛьготы,
	|ОтношениеКОсобойЗоне,
	|ВидОсобойЗоны");
	
	КадровыеДанные = КадровыеДанныеФизическогоЛица();
	Если КадровыеДанные <> Неопределено Тогда
		// ФИО, ИНН, СНИЛС, Дата рождения, Гражданство.
		Реквизиты.СотрудникФамилия  = КадровыеДанные.Фамилия;
		Реквизиты.СотрудникИмя      = КадровыеДанные.Имя;
		Реквизиты.СотрудникОтчество = КадровыеДанные.Отчество;
		Реквизиты.Гражданство       = КадровыеДанные.Страна;
		Реквизиты.ДатаРождения      = КадровыеДанные.ДатаРождения;
		Реквизиты.Пол               = КадровыеДанные.Пол;
		Реквизиты.СотрудникИНН      = КадровыеДанные.ИНН;
		Реквизиты.СНИЛС             = КадровыеДанные.СтраховойНомерПФР;
		
		// Удостоверение личности.
		Реквизиты.УдостоверениеЛичностиВид          = КадровыеДанные.ДокументВид;
		Реквизиты.УдостоверениеЛичностиСерия        = СокрЛП(КадровыеДанные.ДокументСерия);
		Реквизиты.УдостоверениеЛичностиНомер        = СокрЛП(КадровыеДанные.ДокументНомер);
		Реквизиты.УдостоверениеЛичностиДатаВыдачи   = КадровыеДанные.ДокументДатаВыдачи;
		Реквизиты.УдостоверениеЛичностиКемВыдан     = КадровыеДанные.ДокументКемВыдан;
		Реквизиты.УдостоверениеЛичностиСрокДействия = КадровыеДанные.ДокументСрокДействия;
		
		// Место работы.
		Реквизиты.СтатусНалогоплательщика = КадровыеДанные.СтатусНалогоплательщика;
		
		// Льготы.
		Реквизиты.ПричинаПредоставленияЛьготы = КадровыеДанные.ЛьготаПриНачисленииПособий;
		Реквизиты.ОтношениеКОсобойЗоне        = КадровыеДанные.ОтношениеКОсобойЗоне;
		Реквизиты.ВидОсобойЗоны               = КадровыеДанные.ВидОсобойЗоны;
	КонецЕсли;
	
	// Льготы из предшествующего документа.
	Если Реквизиты.ПричинаПредоставленияЛьготы = Неопределено
		И Реквизиты.ОтношениеКОсобойЗоне = Неопределено
		И Реквизиты.ВидОсобойЗоны = Неопределено Тогда
		ПредшествующиеСведения = ПредшествующиеПодготовленныеСведенияОФизическомЛице();
		Если ПредшествующиеСведения <> Неопределено Тогда
			Реквизиты.ПричинаПредоставленияЛьготы = ПредшествующиеСведения.ПричинаПредоставленияЛьготы;
			Реквизиты.ОтношениеКОсобойЗоне        = ПредшествующиеСведения.ОтношениеКОсобойЗоне;
			Реквизиты.ВидОсобойЗоны               = ПредшествующиеСведения.ВидОсобойЗоны;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция РеквизитыСотрудника()
	Если ДополнительныеСвойства.Свойство("РеквизитыСотрудника") Тогда
		Возврат ДополнительныеСвойства.РеквизитыСотрудника;
	КонецЕсли;
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сотрудник, "ФизическоеЛицо, ГоловнаяОрганизация");
		ДополнительныеСвойства.Вставить("РеквизитыСотрудника", Результат);
	Иначе
		Результат = Новый Структура("ФизическоеЛицо, ГоловнаяОрганизация");
	КонецЕсли;
	Возврат Результат;
КонецФункции

Процедура ОбновитьКадровыеДанныеПриИзмененииСтрахователя()
	ДополнительныеСвойства.Удалить("ТекущийДоговорССотрудникомПоСтрахователю");
КонецПроцедуры

Функция ТекущийДоговорССотрудникомПоСтрахователю()
	Если ДополнительныеСвойства.Свойство("ТекущийДоговорССотрудникомПоСтрахователю") Тогда
		Возврат ДополнительныеСвойства.ТекущийДоговорССотрудникомПоСтрахователю;
	КонецЕсли;
	
	Результат = Новый Структура("Организация, Страхователь, ГоловнаяОрганизация, Сотрудник, ДатаУвольнения, ВидЗанятости");
	
	Если Не ЗначениеЗаполнено(Страхователь)
		Или Не ЗначениеЗаполнено(ГоловнаяОрганизация)
		Или Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = РегистрыСведений.ЗастрахованныеЛицаСЭДО.ЗапросКадровыхДанныхПоСтрахователям(
		ГоловнаяОрганизация,
		Страхователь,
		ФизическоеЛицо,
		Ложь);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.Организация         = Выборка.Организация;
		Результат.ГоловнаяОрганизация = Выборка.ГоловнаяОрганизация;
		Результат.Сотрудник           = Выборка.Сотрудник;
		Результат.ДатаУвольнения      = Выборка.ДатаУвольнения;
		Результат.ВидЗанятости        = Выборка.ВидЗанятости;
	КонецЕсли;
	
	Если Результат.ДатаУвольнения = Неопределено Или ЗначениеЗаполнено(Результат.ДатаУвольнения) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДоговорыГПХ.Регистратор КАК Регистратор,
		|	ДоговорыГПХ.НомерСтроки КАК НомерСтроки,
		|	ДоговорыГПХ.Активность КАК Активность,
		|	ДоговорыГПХ.Организация КАК Организация,
		|	ЕСТЬNULL(Страхователи.ОтчитывающаясяОрганизация, ДоговорыГПХ.Организация) КАК Страхователь,
		|	ДоговорыГПХ.Сотрудник КАК Сотрудник,
		|	ДоговорыГПХ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДоговорыГПХ.ДокументОснование КАК ДокументОснование,
		|	ДоговорыГПХ.ДатаНачала КАК ДатаНачала,
		|	ДоговорыГПХ.ДатаОкончания КАК ДатаОкончания,
		|	ДоговорыГПХ.Подразделение КАК Подразделение,
		|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ИЗ
		|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ДоговорыГПХ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ВестиУчетОтчитывающихсяПоВзносамОрганизаций КАК ВестиУчетСтрахователей
		|		ПО (ВестиУчетСтрахователей.Значение = ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтчитывающиесяПоВзносамОрганизации КАК Страхователи
		|		ПО ДоговорыГПХ.Организация = Страхователи.Организация
		|			И (ВестиУчетСтрахователей.Значение = ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО ДоговорыГПХ.Организация = Организации.Ссылка
		|ГДЕ
		|	ДоговорыГПХ.ФизическоеЛицо = &ФизическоеЛицо
		|	И ЕСТЬNULL(Страхователи.ОтчитывающаясяОрганизация, ДоговорыГПХ.Организация) = &Страхователь
		|	И ДоговорыГПХ.ДатаОкончания >= &НачалоСтрахованияГПХ
		|	И ДоговорыГПХ.ДатаНачала <= &ДатаСреза
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаОкончания УБЫВ";
		Запрос.УстановитьПараметр("НачалоСтрахованияГПХ", '20230101');
		Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
		Запрос.УстановитьПараметр("Страхователь", Страхователь);
		Запрос.УстановитьПараметр("ДатаСреза", ТекущаяДатаСеанса());
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий()
			И (Результат.ДатаУвольнения = Неопределено Или Выборка.ДатаОкончания > Результат.ДатаУвольнения) Тогда
			Результат.Организация         = Выборка.Организация;
			Результат.Страхователь        = Выборка.Страхователь;
			Результат.ГоловнаяОрганизация = Выборка.ГоловнаяОрганизация;
			Результат.Сотрудник           = Выборка.Сотрудник;
			Результат.ДатаУвольнения      = Выборка.ДатаОкончания;
			Результат.ВидЗанятости        = Перечисления.ВидыЗанятости.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.Организация)
		И Не ЗначениеЗаполнено(Результат.Страхователь) Тогда
		Результат.Страхователь = СЭДОФСС.СтраховательОрганизации(Результат.Организация);
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ТекущийДоговорССотрудникомПоСтрахователю", Результат);
	Возврат Результат;
КонецФункции

Функция КадровыеДанныеФизическогоЛица()
	Результат = Неопределено;
	Если ДополнительныеСвойства.Свойство("КадровыеДанныеФизическогоЛица", Результат) Тогда
		Возврат Результат;
	КонецЕсли;
	ИменаПолей = Документы.СведенияОЗастрахованномЛицеФСС.ИменаПолейТребуемыхКадровыхДанныхФЛ();
	Результат = Новый Структура(ИменаПолей);
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		КадровыеДанныеФизическогоЛица = КадровыйУчет.КадровыеДанныеФизическогоЛица(
			Истина,
			ФизическоеЛицо,
			ИменаПолей,
			ТекущаяДатаСеанса());
		Если КадровыеДанныеФизическогоЛица <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Результат, КадровыеДанныеФизическогоЛица);
		КонецЕсли;
	Иначе
		Возврат Результат;
	КонецЕсли;
	ДополнительныеСвойства.Вставить("КадровыеДанныеФизическогоЛица", Результат);
	Возврат Результат;
КонецФункции

Функция ЗаполнитьДатуРожденияИПолПоСНИЛС(ПараметрыФиксации)
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		// В этом случае дата рождения заполняется в процедуре ЗаполнитьКадровыеДанныеФизическогоЛица.
		Возврат Ложь;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СНИЛС) Тогда
		// Сначала необходимо заполнить СНИЛС.
		Возврат Ложь;
	КонецЕсли;
	
	Реквизиты = Новый Структура("ДатаРождения, Пол");
	Если ФиксацияВторичныхДанныхВДокументах.РеквизитыШапкиЗафиксированы(ЭтотОбъект, Реквизиты) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаСведений = ПоследниеПринятыеСведенияПоСНИЛС();
	Если ТаблицаСведений.Количество() = 0 Тогда
		ТаблицаСведений = ПоследниеВходящиеЗапросыПоСНИЛС();
		Если ТаблицаСведений.Количество() = 0 Тогда
			ТаблицаСведений = ПоследниеЭЛНПоСНИЛС();
		КонецЕсли;
	КонецЕсли;
	Если ТаблицаСведений.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Реквизиты, ТаблицаСведений[0]);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Реквизиты.Пол) И ЗначениеЗаполнено(СотрудникОтчество) Тогда
		Пол = СотрудникиКлиентСервер.ОпределитьПолПоОтчеству(НРег(СотрудникОтчество));
		Если ЗначениеЗаполнено(Пол) Тогда
			Реквизиты.Пол = Пол;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ПоследниеПринятыеСведенияПоСНИЛС()
	// Заполненность СНИЛС проверяется в вызывающем коде.
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Регистр.ДатаОтправки КАК ДатаОтправки,
	|	Регистр.Страхователь = &Страхователь КАК СтраховательПодходит,
	|	Регистр.ГоловнаяОрганизация = &ГоловнаяОрганизация КАК ГоловнаяОрганизацияПодходит,
	|	ДокументСведений.ДатаРождения КАК ДатаРождения,
	|	ДокументСведений.Пол КАК Пол
	|ИЗ
	|	РегистрСведений.ЗастрахованныеЛицаСЭДО КАК Регистр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СведенияОЗастрахованномЛицеФСС КАК ДокументСведений
	|		ПО Регистр.ОтправленныеСведения = ДокументСведений.Ссылка
	|ГДЕ
	|	Регистр.СНИЛС = &СНИЛС
	|	И ДокументСведений.ДатаОтправки > ДАТАВРЕМЯ(1, 1, 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОтправки УБЫВ,
	|	СтраховательПодходит УБЫВ,
	|	ГоловнаяОрганизацияПодходит УБЫВ";
	Запрос.УстановитьПараметр("СНИЛС", СНИЛС);
	Запрос.УстановитьПараметр("Страхователь", Страхователь);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Возврат Таблица;
КонецФункции

Функция ПоследниеВходящиеЗапросыПоСНИЛС()
	// Заполненность СНИЛС проверяется в вызывающем коде.
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВходящийЗапрос.Дата КАК ВходящаяДата,
	|	ВходящийЗапрос.Страхователь = &Страхователь КАК СтраховательПодходит,
	|	ВходящийЗапрос.ГоловнаяОрганизация = &ГоловнаяОрганизация КАК ГоловнаяОрганизацияПодходит,
	|	ВходящийЗапрос.СотрудникДатаРождения КАК ДатаРождения,
	|	ВходящийЗапрос.СотрудникПол КАК Пол
	|ИЗ
	|	Документ.ВходящийЗапросФССДляРасчетаПособия КАК ВходящийЗапрос
	|ГДЕ
	|	ВходящийЗапрос.СотрудникСНИЛС = &СНИЛС
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВходящаяДата УБЫВ,
	|	СтраховательПодходит УБЫВ,
	|	ГоловнаяОрганизацияПодходит УБЫВ";
	Запрос.УстановитьПараметр("СНИЛС", СНИЛС);
	Запрос.УстановитьПараметр("Страхователь", Страхователь);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Возврат Таблица;
КонецФункции

Функция ПоследниеЭЛНПоСНИЛС()
	// Заполненность СНИЛС проверяется в вызывающем коде.
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СведенияОбЭЛН.ИсходныйXML КАК ИсходныйXML
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	СведенияОбЭЛН.СНИЛС = &СНИЛС
	|	И СведенияОбЭЛН.ДоступенИсходныйXML
	|
	|УПОРЯДОЧИТЬ ПО
	|	СведенияОбЭЛН.ПериодНетрудоспособностиОкончание УБЫВ";
	Запрос.УстановитьПараметр("СНИЛС", СНИЛС);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Таблица.Колонки.Добавить("ДатаРождения", Новый ОписаниеТипов("Дата"));
	
	Если Таблица.Количество() = 1 Тогда
		СтрокаТаблицы = Таблица[0];
		ТекстXML = СтрокаТаблицы.ИсходныйXML.Получить();
		ДанныеЭЛН = ЭЛНФСС.ДанныеЭЛНИзXML(ТекстXML);
		СтрокаТаблицы.ДатаРождения = ДанныеЭЛН.ДатаРождения;
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДатаРождения) Тогда
			Таблица.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Таблица.Колонки.Удалить("ИсходныйXML");
	Возврат Таблица;
КонецФункции

Функция ЗаполнитьКодСтраныГражданства(ПараметрыФиксации)
	Реквизиты = Новый Структура("КодСтраныГражданства");
	
	Если ЗначениеЗаполнено(Гражданство) Тогда
		Реквизиты.КодСтраныГражданства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Гражданство, "Код");
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ПредшествующиеПодготовленныеСведенияОФизическомЛице()
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Дата) Тогда
		НачалоДня = КонецДня(Дата) + 1;
	Иначе
		НачалоДня = КонецДня(ТекущаяДатаСеанса()) + 1;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СведенияОЗастрахованномЛицеФСС.ПричинаПредоставленияЛьготы КАК ПричинаПредоставленияЛьготы,
	|	СведенияОЗастрахованномЛицеФСС.ВидОсобойЗоны КАК ВидОсобойЗоны,
	|	СведенияОЗастрахованномЛицеФСС.ОтношениеКОсобойЗоне КАК ОтношениеКОсобойЗоне
	|ИЗ
	|	Документ.СведенияОЗастрахованномЛицеФСС КАК СведенияОЗастрахованномЛицеФСС
	|ГДЕ
	|	СведенияОЗастрахованномЛицеФСС.ФизическоеЛицо = &ФизическоеЛицо
	|	И СведенияОЗастрахованномЛицеФСС.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И СведенияОЗастрахованномЛицеФСС.Ссылка <> &Ссылка
	|	И СведенияОЗастрахованномЛицеФСС.Проведен
	|	И СведенияОЗастрахованномЛицеФСС.Дата < &НачалоДня
	|
	|УПОРЯДОЧИТЬ ПО
	|	СведенияОЗастрахованномЛицеФСС.Дата УБЫВ,
	|	СведенияОЗастрахованномЛицеФСС.Ссылка";
	Запрос.УстановитьПараметр("ФизическоеЛицо",      ФизическоеЛицо);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Ссылка",              Ссылка);
	Запрос.УстановитьПараметр("НачалоДня",           НачалоДня);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() > 0 Тогда
		Возврат Таблица[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ЗаполнитьРазрешениеНаПроживание(ПараметрыФиксации)
	Реквизиты = Новый Структура("РазрешениеНаПроживаниеВид, РазрешениеНаПроживаниеСерия, РазрешениеНаПроживаниеНомер,
		|РазрешениеНаПроживаниеДатаВыдачи, РазрешениеНаПроживаниеСрокДействия");
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) И СЭДОФСС.ПоказыватьРазрешениеНаПроживание(КодСтраныГражданства) Тогда
		РазрешениеНаПроживание = Документы.СведенияОЗастрахованномЛицеФСС.НайтиРазрешениеНаПроживание(ФизическоеЛицо, Дата);
		Реквизиты.РазрешениеНаПроживаниеВид          = РазрешениеНаПроживание.Вид;
		Реквизиты.РазрешениеНаПроживаниеСерия        = СокрЛП(РазрешениеНаПроживание.Серия);
		Реквизиты.РазрешениеНаПроживаниеНомер        = СокрЛП(РазрешениеНаПроживание.Номер);
		Реквизиты.РазрешениеНаПроживаниеДатаВыдачи   = РазрешениеНаПроживание.ДатаВыдачи;
		Реквизиты.РазрешениеНаПроживаниеСрокДействия = РазрешениеНаПроживание.СрокДействия;
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЗаполнитьСпособВыплатыПособия(ПараметрыФиксации)
	// Получение сведений о способах выплаты.
	Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		НастройкиПрямыхВыплат = СпособыПрямыхВыплатФСС.НастройкиСотрудников(Организация, ФизическоеЛицо, Дата);
		СпособПрямыхвыплат    = НастройкиПрямыхВыплат.ТаблицаРезультат[0];
	Иначе
		НастройкиПрямыхВыплат = Неопределено;
		СпособПрямыхвыплат    = Неопределено;
	КонецЕсли;
	// Заполнение первичных сведений о способе выплаты.
	ЕстьИзменения = Ложь;
	РеквизитыСпособа = РеквизитыСпособаПрямыхвыплат(СпособПрямыхвыплат);
	Если ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(РеквизитыСпособа, ЭтотОбъект, ПараметрыФиксации) Тогда
		ЕстьИзменения = Истина;
	КонецЕсли;
	// Заполнение банковских реквизитов.
	РеквизитыБанка = РеквизитыБанка(НастройкиПрямыхВыплат, СпособПрямыхвыплат);
	Если ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(РеквизитыБанка, ЭтотОбъект, ПараметрыФиксации) Тогда
		ЕстьИзменения = Истина;
	КонецЕсли;
	Возврат ЕстьИзменения;
КонецФункции

Функция РеквизитыСпособаПрямыхвыплат(СпособПрямыхвыплат)
	РеквизитыСпособа = Новый Структура("СпособВыплатыПособия, КартаМИР, Банк, НомерСчета, АдресПроживанияВид");
	Если СпособПрямыхвыплат = Неопределено Тогда
		Возврат РеквизитыСпособа;
	КонецЕсли;
	
	ТипыСпособовПрямыхВыплат = СпособыПрямыхВыплатФСС.ТипыСпособовПрямыхВыплат();
	ТипСпособа = ТипыСпособовПрямыхВыплат.Найти(ТипЗнч(СпособПрямыхвыплат.Значение), "Тип");
	Если ТипСпособа = Неопределено Тогда
		Возврат РеквизитыСпособа;
	КонецЕсли;
	
	РеквизитыСпособа.СпособВыплатыПособия = ТипСпособа.СпособВыплатыПособия;
	Если РеквизитыСпособа.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.НаКартуМИР Тогда
		РеквизитыСпособа.КартаМИР           = СпособПрямыхвыплат.Значение;
	ИначеЕсли РеквизитыСпособа.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ЧерезБанк Тогда
		РеквизитыСпособа.Банк               = СпособПрямыхвыплат.Банк;
		РеквизитыСпособа.НомерСчета         = СпособПрямыхвыплат.НомерСчета;
	Иначе
		РеквизитыСпособа.АдресПроживанияВид = СпособПрямыхвыплат.Значение;
	КонецЕсли;
	
	Возврат РеквизитыСпособа;
КонецФункции

Функция РеквизитыБанка(НастройкиПрямыхВыплат, СпособПрямыхвыплат)
	РеквизитыБанка = Новый Структура("БанкНаименование, БанкБИК, БанкКоррСчет");
	Если Не ЗначениеЗаполнено(Банк) Тогда
		Возврат РеквизитыБанка;
	КонецЕсли;
	
	// Определение способа прямых выплат по выбранному банку.
	Если НастройкиПрямыхВыплат <> Неопределено
		И (СпособПрямыхвыплат = Неопределено Или Банк <> СпособПрямыхвыплат.Банк) Тогда
		Найденные = НастройкиПрямыхВыплат.БанковскиеРеквизиты.НайтиСтроки(Новый Структура("Банк, ПометкаУдаления", Банк, Ложь));
		Если Найденные.Количество() = 0 Тогда
			Найденные = НастройкиПрямыхВыплат.БанковскиеРеквизиты.НайтиСтроки(Новый Структура("Банк", Банк));
		КонецЕсли;
		Если Найденные.Количество() = 0 Тогда
			СпособПрямыхвыплат = Неопределено;
		Иначе
			СпособПрямыхвыплат = Найденные[0];
		КонецЕсли;
	КонецЕсли;
	
	// Определение реквизитов банка.
	Если СпособПрямыхвыплат = Неопределено Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Банк, "Наименование, Код, КоррСчет");
		РеквизитыБанка.БанкНаименование = Реквизиты.Наименование;
		РеквизитыБанка.БанкБИК          = Реквизиты.Код;
		РеквизитыБанка.БанкКоррСчет     = Реквизиты.КоррСчет;
	Иначе
		РеквизитыБанка.БанкНаименование = СпособПрямыхвыплат.НаименованиеБанка;
		РеквизитыБанка.БанкБИК          = СпособПрямыхвыплат.БИК;
		РеквизитыБанка.БанкКоррСчет     = СпособПрямыхвыплат.КоррСчет;
	КонецЕсли;
	
	Возврат РеквизитыБанка;
КонецФункции

Функция ЗаполнитьКонтактыФизическогоЛица(ПараметрыФиксации)
	Реквизиты = Новый Структура("АдресРегистрации, АдресПроживания, СотрудникТелефон");
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		АдресРегистрацииВид = КадровыйУчет.ВидКонтактнойИнформацииАдресПоПропискеФизическиеЛица();
		ТелефонДомашнийВид  = КадровыйУчет.ВидКонтактнойИнформацииТелефонДомашнийФизическиеЛица();
		ТелефонМобильныйВид = КадровыйУчет.ВидКонтактнойИнформацииТелефонМобильныйФизическиеЛица();
		
		ВидыКИ = Новый Массив;
		ВидыКИ.Добавить(АдресРегистрацииВид);
		Если ЗначениеЗаполнено(АдресПроживанияВид) Тогда
			ВидыКИ.Добавить(АдресПроживанияВид);
		КонецЕсли;
		ВидыКИ.Добавить(ТелефонДомашнийВид);
		ВидыКИ.Добавить(ТелефонМобильныйВид);
		
		ТаблицаКИ = КонтактнаяИнформацияБЗК.КонтактнаяИнформацияОбъектов(ФизическоеЛицо, , ВидыКИ);
		
		СтрокаКИ = ТаблицаКИ.Найти(АдресРегистрацииВид, "Вид");
		Если СтрокаКИ <> Неопределено Тогда
			Реквизиты.АдресРегистрации = СтрокаКИ.Значение;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АдресПроживанияВид) Тогда
			СтрокаКИ = ТаблицаКИ.Найти(АдресПроживанияВид, "Вид");
			Если СтрокаКИ <> Неопределено Тогда
				Реквизиты.АдресПроживания = СтрокаКИ.Значение;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаКИ = ТаблицаКИ.Найти(ТелефонДомашнийВид, "Вид");
		Если СтрокаКИ <> Неопределено Тогда
			Реквизиты.СотрудникТелефон = СтрокаКИ.Значение;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Реквизиты.СотрудникТелефон) Тогда
			СтрокаКИ = ТаблицаКИ.Найти(ТелефонМобильныйВид, "Вид");
			Если СтрокаКИ <> Неопределено Тогда
				Реквизиты.СотрудникТелефон = СтрокаКИ.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЗаполнитьКодыАдреса(ПараметрыФиксации, ИмяПоляАдрес)
	Суффиксы = "Индекс, Регион, Район, НаселенныйПункт, Улица, Дом, Корпус, Квартира, ФИАСДом, ФИАСРО";
	Массив = СтрРазделить(Суффиксы, ", ", Ложь);
	ИменаРеквизитов = ИмяПоляАдрес + СтрСоединить(Массив, ", " + ИмяПоляАдрес);
	Реквизиты = Новый Структура(ИменаРеквизитов);
	
	Адрес = ЭтотОбъект[ИмяПоляАдрес];
	Если Не ЗначениеЗаполнено(Адрес) Тогда
		Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("БезПредставлений",               Истина);
	ДополнительныеПараметры.Вставить("КодыАдреса",                     Истина);
	ДополнительныеПараметры.Вставить("КодыКЛАДР",                      Ложь);
	ДополнительныеПараметры.Вставить("НаименованиеВключаетСокращение", Истина);
	ДополнительныеПараметры.Вставить("ПроверитьАдрес",                 Ложь);
	СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(Адрес, ДополнительныеПараметры);
	
	ИменаПолей = "Индекс, Регион, Район, НаселенныйПункт, Улица, Дом, Корпус, Строение, Сооружение, Участок, Квартира";
	СтруктураАдреса = КонтактнаяИнформацияБЗК.СвернутьСведенияОбАдресе(СведенияОбАдресе, ИменаПолей);
	СтруктураАдреса.Корпус = КонтактнаяИнформацияБЗК.ПредставлениеКорпусов(СтруктураАдреса, 30);
	СтруктураАдреса.Удалить("Строение");
	СтруктураАдреса.Удалить("Сооружение");
	СтруктураАдреса.Удалить("Участок");
	
	СтруктураАдреса.Вставить("ФИАСДом", Строка(СведенияОбАдресе.ИдентификаторДома));
	СтруктураАдреса.Вставить("ФИАСРО",  Строка(СведенияОбАдресе.ИдентификаторАдресногоОбъекта));
	Если Не ЗначениеЗаполнено(СтруктураАдреса.ФИАСДом)
		И СтруктураАдреса.ФИАСРО <> СведенияОбАдресе.ИдентификаторЗемельногоУчастка Тогда
		СтруктураАдреса.ФИАСДом = Строка(СведенияОбАдресе.ИдентификаторЗемельногоУчастка);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СтруктураАдреса Цикл
		Реквизиты[ИмяПоляАдрес + КлючИЗначение.Ключ] = КлючИЗначение.Значение;
	КонецЦикла;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

#КонецОбласти

Процедура ЗаполнитьПоФИО(ФИО)
	Если ЗначениеЗаполнено(ФИО)
		И Не ЗначениеЗаполнено(ФизическоеЛицо)
		И Не ЗначениеЗаполнено(СотрудникФамилия)
		И Не ЗначениеЗаполнено(СотрудникИмя)
		И Не ЗначениеЗаполнено(СотрудникОтчество) Тогда
		ФиксацияВторичныхДанныхВДокументах.ЗафиксироватьРеквизитОбъекта(ЭтотОбъект, "СотрудникФамилия");
		ФиксацияВторичныхДанныхВДокументах.ЗафиксироватьРеквизитОбъекта(ЭтотОбъект, "СотрудникИмя");
		ФиксацияВторичныхДанныхВДокументах.ЗафиксироватьРеквизитОбъекта(ЭтотОбъект, "СотрудникОтчество");
		ЧастиИмени = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФИО);
		СотрудникФамилия  = ЧастиИмени.Фамилия;
		СотрудникИмя      = ЧастиИмени.Имя;
		СотрудникОтчество = ЧастиИмени.Отчество;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли