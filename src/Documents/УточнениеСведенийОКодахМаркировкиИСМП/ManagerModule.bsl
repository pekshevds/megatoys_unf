#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Статусы

// Возвращает конечные статусы.
// Параметры:
//  ТребуетсяПовторноеОформление - булево.
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП - Конечные статусы.
//
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Если Не ТребуетсяПовторноеОформление Тогда
		Статусы.Добавить(Перечисления.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП.ПередачаСведенияОбРДОбработана);
		Статусы.Добавить(Перечисления.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП.ОтчетОПеревзвешиванииОбработан);
	КонецЕсли;
	
	Возврат Статусы;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП.СведенияОбРДОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП.ОтчетОПеревзвешиванииОшибкаПередачи);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает статус по умолчанию.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП.Черновик;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// Параметры:
//  СтруктураПараметров - Структура.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию(СтруктураПараметров=Неопределено) Экспорт
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		Если СтруктураПараметров.Свойство("ОбъектРасчета") Тогда
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				СтруктураПараметров.ОбъектРасчета,
				"ВидПродукции, Операция");
		Иначе
			Реквизиты = СтруктураПараметров;
		КонецЕсли;
		
		Если Реквизиты.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПеревзвешивании Тогда
			Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчет;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеИСМП

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УточнениеСведенийОКодахМаркировкиИСМП - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИСМП.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийИСМП.СведенияОКодахИдентификацииДляВводаВОборот
		Или Операция = Перечисления.ВидыОперацийИСМП.СведенияОРазрешительнойДокументацииДляВводаВОборот Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП.СведенияОбРДКПередаче);
		
		Возврат ПараметрыОбновления;
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПеревзвешивании Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП.ОтчетОПеревзвешиванииКПередаче);
		
		Возврат ПараметрыОбновления;
		
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УточнениеСведенийОКодахМаркировкиИСМП - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИСМП.
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийИСМП.СведенияОКодахИдентификацииДляВводаВОборот
		Или Операция = Перечисления.ВидыОперацийИСМП.СведенияОРазрешительнойДокументацииДляВводаВОборот Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП.СведенияОбРДОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП.СведенияОбРДОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
		Возврат ПараметрыОбновления;
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПеревзвешивании Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП.ОтчетОПеревзвешиванииОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП.ОтчетОПеревзвешиванииОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчет);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
		Возврат ПараметрыОбновления;
		
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
КонецФункции

// Статус после получения данных из ИСМП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УточнениеСведенийОКодахМаркировкиИСМП - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция обмена с ИСМП.
//  ДополнительныеПараметры - Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийИСМП - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры) Экспорт

	Если Операция = Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента
		И (ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.СведенияОКодахИдентификацииДляВводаВОборот
		   Или ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.СведенияОРазрешительнойДокументацииДляВводаВОборот)
		Тогда

		Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		Статусы.Принят = Перечисления.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП.ПередачаСведенияОбРДОбработана;
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП.СведенияОбРДОшибкаПередачи;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		Возврат ПараметрыОбновления;
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента
		И ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.ОтчетОПеревзвешивании Тогда

		Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		Статусы.Принят = Перечисления.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП.ОтчетОПеревзвешиванииОбработан;
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП.ОтчетОПеревзвешиванииОшибкаПередачи;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчет);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		Возврат ПараметрыОбновления;
		
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
КонецФункции

// Обновить статус после подготовки к передаче данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УточнениеСведенийОКодахМаркировкиИСМП - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИСМП.
//  ДополнительныеПараметры - Неопределено, Структура - дополнительные параметры обновления статуса.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт

	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;

КонецФункции

// Обновить статус после передачи данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УточнениеСведенийОКодахМаркировкиИСМП - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИСМП.
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//  ДополнительныеПараметры - Неопределено, Структура - дополнительные параметры обновления статуса.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт

	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;

КонецФункции

// Обновить статус после получения данных из ИСМП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УточнениеСведенийОКодахМаркировкиИСМП - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция обмена с ИСМП.
//  ДополнительныеПараметры - Структура -Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийИСМП - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт

	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;

КонецФункции

// Изменяет и возвращает статус документа ИС МП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УточнениеСведенийОКодахМаркировкиИСМП - Документ ИС МП.
//  ПараметрыОбновления - Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП - новый статус документа ИС МП.
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УточнениеСведенийОКодахМаркировкиИСМП - Документ, для которого требуется обновить статус.
//  ЛинейныйСписок - Булево - Не используется.
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияИСМП.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка, ЛинейныйСписок = Ложь) Экспорт
	
	Таблица = ИнтеграцияИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 11,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.СведенияОКодахИдентификацииДляВводаВОборот);
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 12,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.СведенияОРазрешительнойДокументацииДляВводаВОборот);
		
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 13,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ОтчетОПеревзвешивании);

	Возврат Таблица;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УточнениеСведенийОКодахМаркировкиИСМП - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияИСМП.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияИСМППереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	//Получение конечного статуса требующего повторного оформления
	Если КонечныеСтатусы().Найти(НовыйСтатус)<>Неопределено
		И КонечныеСтатусы().Найти(ПредыдущийСтатус)=Неопределено Тогда
		РасчетСтатусовОформленияИСМП.РассчитатьСтатусыОформленияДокументов(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

Функция ДоступныеВидыПродукцииУточненияСведенийОКодахМаркировки() Экспорт
	
	ВидыПродукцииИСМП = Новый Массив();
	
	// CIRCULATION_INFORMATION
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины"));
	
	// CIRCULATION_INFORMATION_2
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Фотоаппараты"));
	
	// недоступны в документации
	//ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски"));
	//ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики"));
	//ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы"));
	//ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха"));
		
	Возврат ВидыПродукцииИСМП;

КонецФункции

#КонецОбласти

#Область Сообщения

// Сообщение к передаче JSON
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УточнениеСведенийОКодахМаркировкиИСМП - Документ.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие.
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
//
Функция СообщениеКПередачеJSON(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные Тогда
		
		Возврат СведенияОРазрешительнойДокументацииJSON(ДокументСсылка, ДополнительныеПараметры);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчет Тогда

		Возврат ОтчетОПеревзвешиванииJSON(ДокументСсылка, ДополнительныеПараметры);

	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПанельОбменИСМП

// Возвращает массив дальнейших действий с документом, требующих участия пользователя
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - дальшейшие действия
//
Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеОбмен);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчет);
	
	Возврат МассивДействий;
	
КонецФункции

// Возвращает массив дальнейших действий с документом, требующих ожидания пользователем
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - дальшейшие действия
//
Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
	
	Возврат МассивДействий;
	
КонецФункции

#КонецОбласти

#Область ОбработкаКодовМаркировки

Функция ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		Результат = ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	ИначеЕсли ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции, Истина) Тогда
		Результат = ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыСканирования);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗавершениеПроверкиИПодбораМаркируемойПродукции

// Отражает результаты проверки и подбора в документе, из которого была вызвана соответствующая форма.
//
// Параметры:
// 	ПараметрыОкончанияПроверки - См. Обработки.ПроверкаИПодборПродукцииИСМП.ЗафиксироватьРезультатПроверкиИПодбора
Процедура ОтразитьРезультатыПроверкиИПодбора(ПараметрыОкончанияПроверки) Экспорт
	
	ДокументОбъект = ПараметрыОкончанияПроверки.ПроверяемыйДокумент.ПолучитьОбъект();
	
	МассивОбработанныхСтрок = Новый Массив;
	Для Каждого СтрокаТаблицы Из ПараметрыОкончанияПроверки.ТаблицаПодобраннойПровереннойПродукции Цикл
		
		Если СтрокаТаблицы.КоличествоПодобрано = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура",   СтрокаТаблицы.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", СтрокаТаблицы.Характеристика);
		ПараметрыОтбора.Вставить("Серия",          СтрокаТаблицы.Серия);
		
		НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТовары = ДокументОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТаблицы);
		Иначе
			СтрокаТовары = НайденныеСтроки[0];
		КонецЕсли;
		
		Если МассивОбработанныхСтрок.Найти(СтрокаТовары) = Неопределено Тогда
			СтрокаТовары.Количество = СтрокаТаблицы.КоличествоПодобрано;
			СтрокаТовары.КоличествоПотребительскихУпаковок = СтрокаТаблицы.КоличествоПотребительскихУпаковок;
			МассивОбработанныхСтрок.Добавить(СтрокаТовары);
		Иначе
			СтрокаТовары.Количество = СтрокаТовары.Количество + СтрокаТаблицы.КоличествоПодобрано;
			СтрокаТовары.КоличествоПотребительскихУпаковок = СтрокаТовары.КоличествоПотребительскихУпаковок + СтрокаТаблицы.КоличествоПотребительскихУпаковок;
		КонецЕсли;
		
		ОбработатьСтрокуТабличнойЧасти(СтрокаТовары, ДокументОбъект);
		
	КонецЦикла;
	
	// Удаление лишних строк документа.
	ИндексТабЧастиТовары = ДокументОбъект.Товары.Количество() - 1;
	Пока ИндексТабЧастиТовары >= 0 Цикл
		
		СтрокаТовары = ДокументОбъект.Товары[ИндексТабЧастиТовары];
		Если СтрокаТовары.Количество = 0
		 Или МассивОбработанныхСтрок.Найти(СтрокаТовары) = Неопределено Тогда
			
			ДокументОбъект.Товары.Удалить(СтрокаТовары);
			
		КонецЕсли;
		
		ИндексТабЧастиТовары = ИндексТабЧастиТовары - 1;
	КонецЦикла;
	
	ДокументОбъект.ШтрихкодыУпаковок.Загрузить(ПараметрыОкончанияПроверки.ТаблицаШтрихкодовВерхнегоУровня);
	
	Если ДокументОбъект.Проведен Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись)
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМаркируемуюПродукциюДокумента(ТаблицаМаркируемойПродукции, ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УточнениеСведенийОКодахМаркировкиИСМП.Номенклатура,
	|	УточнениеСведенийОКодахМаркировкиИСМП.Характеристика,
	|	УточнениеСведенийОКодахМаркировкиИСМП.Серия,
	|	УточнениеСведенийОКодахМаркировкиИСМП.Количество,
	|	УточнениеСведенийОКодахМаркировкиИСМП.КоличествоПотребительскихУпаковок
	|ИЗ
	|	Документ.УточнениеСведенийОКодахМаркировкиИСМП.Товары КАК УточнениеСведенийОКодахМаркировкиИСМП
	|ГДЕ
	|	УточнениеСведенийОКодахМаркировкиИСМП.Ссылка = &ДокументСсылка";
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаМаркируемойПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
	ПроверкаИПодборПродукцииИСМППереопределяемый.ПриОпределенииМаркируемойПродукцииДокумента(
		ДокументСсылка,
		Неопределено,
		ТаблицаМаркируемойПродукции);
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область Отчеты

// Заполняет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//   Параметры - Структура - Вспомогательные параметры. См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт

	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);

КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	УправлениеДоступомИСПереопределяемый.ПриЗаполненииОграниченияДоступа(
		Метаданные.Документы.УточнениеСведенийОКодахМаркировкиИСМП, Ограничение);

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область Серии

//Имена реквизитов, от значений которых зависят параметры указания серий. Переопределяется.
//
//Возвращаемое значение:
//  Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(Метаданные.Документы.УточнениеСведенийОКодахМаркировкиИСМП);
	
КонецФункции

//Возвращает параметры указания серий для товаров, указанных в документе. Переопределяется.
//
//Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
//Возвращаемое значение:
//  Произвольный - параметры указания серий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ИнтеграцияИС.ПараметрыУказанияСерий(Метаданные.Документы.УточнениеСведенийОКодахМаркировкиИСМП, Объект);
	
КонецФункции

//Возвращает текст запроса для расчета статусов указания серий. Переопределяется.
//
//Параметры:
//   ПараметрыУказанияСерий - Произвольный - см. ПараметрыУказанияСерий.
//
//Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(Метаданные.Документы.УточнениеСведенийОКодахМаркировкиИСМП, ПараметрыУказанияСерий);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СообщенияJSON

// Формирует JSON сообщения для документов "Сведения о кодах идентификации для ввода товара в оборот",
// "Сведения о разрешительной документации для ввода товара в оборот" (см. ДоступныеВидыПродукцииУточненияСведенийОКодахМаркировки()).
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УточнениеСведенийОКодахМаркировкиИСМП - Документ Уточнение сведений о кодах маркировки ИСМП.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция СведенияОРазрешительнойДокументацииJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено)
	
	Операция = Перечисления.ВидыОперацийИСМП.СведенияОКодахИдентификацииДляВводаВОборот;
	
	СообщенияJSON = Новый Массив;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Документ                      КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ИСМППрисоединенныеФайлы.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УточнениеСведенийОКодахМаркировкиИСМП КАК Шапка
	|		ПО Шапка.Ссылка   = &Ссылка
	|		 И Шапка.Операция = ИСМППрисоединенныеФайлы.Операция
	|		 И Шапка.Ссылка   = ИСМППрисоединенныеФайлы.Документ
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	
	|	Шапка.ВидПродукции      КАК ВидПродукции,
	|	Шапка.Операция          КАК Операция,
	|
	|	Шапка.Организация                КАК Организация,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|	Шапка.ОтчетПроизводственнойЛинии КАК ОтчетПроизводственнойЛинии,
	|
	|	Шапка.ВидДокументаСертификации   КАК ВидДокументаСертификации,
	|	Шапка.НомерДокументаСертификации КАК НомерДокументаСертификации,
	|	Шапка.ДатаДокументаСертификации  КАК ДатаДокументаСертификации,
	|
	|	Шапка.Ссылка КАК Ссылка
	|
	|ИЗ
	|	Документ.УточнениеСведенийОКодахМаркировкиИСМП КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ДанныеОтчета.ЗначениеШтрихкода                КАК ЗначениеШтрихкода,
	|	ДанныеОтчета.НормализованноеЗначениеШтрихкода КАК НормализованноеЗначениеШтрихкода,
	|	ДанныеОтчета.ФорматBase64                     КАК ФорматBase64
	|ИЗ
	|	Документ.УточнениеСведенийОКодахМаркировкиИСМП.ДанныеОтчетаПроизводственнойЛинии КАК ДанныеОтчета
	|ГДЕ
	|	ДанныеОтчета.Ссылка = &Ссылка
	|",
	"ДанныеОтчета");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки
	|ИЗ
	|	Документ.УточнениеСведенийОКодахМаркировкиИСМП.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка = &Ссылка
	|",
	"ШтрихкодыУпаковок");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ДокументыСертификации.ВидДокументаСертификации   КАК ВидДокументаСертификации,
	|	ДокументыСертификации.НомерДокументаСертификации КАК НомерДокументаСертификации,
	|	ДокументыСертификации.ДатаДокументаСертификации  КАК ДатаДокументаСертификации
	|ИЗ
	|	Документ.УточнениеСведенийОКодахМаркировкиИСМП.ДокументыСертификации КАК ДокументыСертификации
	|ГДЕ
	|	ДокументыСертификации.Ссылка = &Ссылка
	|",
	"ДокументыСертификации");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	ДанныеОтчета = РезультатЗапроса["ДанныеОтчета"];
	//@skip-warning
	ШтрихкодыУпаковок = РезультатЗапроса["ШтрихкодыУпаковок"];
	
	Если Не Шапка.Следующий() 
		Или (ДанныеОтчета.Пустой() И ШтрихкодыУпаковок.Пустой()) Тогда
		
		СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Операция);
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	ДоступныеВидыПродукции = ДоступныеВидыПродукцииУточненияСведенийОКодахМаркировки();
	
	Если ДоступныеВидыПродукции.Найти(Шапка.ВидПродукции) = Неопределено Тогда
		НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
		СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Шапка.Операция, НомерВерсии);
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
				СтрШаблон(
					НСтр("ru = 'Вид продукции ""%1"" не поддерживается.'"),
					Шапка.ВидПродукции));
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;
	КонецЕсли;
	
	Если Шапка.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПеревзвешивании Тогда
		НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
		СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Шапка.Операция, НомерВерсии);
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
				СтрШаблон(
					НСтр("ru = 'Передача сведений о разрешительной документации для операции ""%1"" не поддерживается.'"),
					Шапка.Операция));
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;
	КонецЕсли;
	
	РеквизитыОрганизации = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Шапка.Организация);
	
	Если Не ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
		СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Шапка.Операция);
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			СтрШаблон(НСтр("ru = 'Не заполнено поле ""ИНН"" для организации %1'"), Шапка.Организация));
		Возврат СообщенияJSON;
	КонецЕсли;
	
	Если Шапка.ОтчетПроизводственнойЛинии Тогда
		Возврат СведенияОРазрешительнойДокументацииJSONОтчетПроизводственнойЛинииJSON(РезультатЗапроса, ДополнительныеПараметры, РеквизитыОрганизации);
	Иначе
		Возврат СведенияОРазрешительнойДокументацииJSONШтрихкодыУпаковокJSON(РезультатЗапроса, ДополнительныеПараметры, РеквизитыОрганизации);
	КонецЕсли;
	
КонецФункции

Функция СведенияОРазрешительнойДокументацииJSONШтрихкодыУпаковокJSON(РезультатЗапроса, ДополнительныеПараметры, РеквизитыОрганизации)
	
	СообщенияJSON = Новый Массив;
	
	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();
	//@skip-warning
	ШтрихкодыУпаковок = РезультатЗапроса["ШтрихкодыУпаковок"].Выгрузить();
	//@skip-warning
	ДокументыСертификации = РезультатЗапроса["ДокументыСертификации"].Выгрузить();
	
	НомерВерсии    = Шапка.ПоследнийНомерВерсии + 1;
	ДокументСсылка = Шапка.Ссылка;
	Операция       = Шапка.Операция;
	
#Область РазборКодовМаркировки
	
	ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(Шапка, Неопределено, Шапка.ВидПродукции);
	
	Настройки = Новый Структура(
		"ЗапрашиватьДанныеСервисаИСМП, СсылкаНаОбъект",
		Ложь, ДокументСсылка);
	ЗаполнитьЗначенияСвойств(ПараметрыСканирования, Настройки);
	
	РезультатПоиска = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(
		ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки"),
		ПараметрыСканирования,, Истина);

#КонецОбласти

	ИсточникДанных = РезультатПоиска.МаркированныеТовары;
	
	ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииПрочее.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииПрочее.НачинаетсяСоСкобки       = Ложь;
	
	СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Операция, НомерВерсии);
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("participantInn", РеквизитыОрганизации.ИНН);
	
	Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(Шапка.ВидПродукции)
		Или Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Шины Тогда
		
		ДанныеСертификации = ЗаполнитьДанныеСертификацииПоСтроке(Шапка);
		
		ГруппаКодов = Новый Массив;
		ТелоЗапроса.Вставить("codes", ГруппаКодов);
		
		Для Каждого СтрокаИсточникаДанных Из ИсточникДанных Цикл
			
			РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкодаПоДаннымРазбора(
				СтрокаИсточникаДанных.Штрихкод, Шапка.ВидПродукции, СтрокаИсточникаДанных.ДанныеРазбора);
			
			СтрокаТЧ = Новый Структура;
			СтрокаТЧ.Вставить(
				"code",
				ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(РезультатРазбора, ПараметрыНормализацииПрочее));
			СтрокаТЧ.Вставить("permitDocInfo", ДанныеСертификации);
			
			ГруппаКодов.Добавить(СтрокаТЧ);
			
		КонецЦикла;
		
	Иначе
		
		ГруппаКодов = Новый Массив;
		
		Для Каждого СтрокаИсточникаДанных Из ИсточникДанных Цикл
			
			РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкодаПоДаннымРазбора(
				СтрокаИсточникаДанных.Штрихкод, Шапка.ВидПродукции, СтрокаИсточникаДанных.ДанныеРазбора);
			ГруппаКодов.Добавить(ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(РезультатРазбора, ПараметрыНормализацииПрочее));
			
		КонецЦикла;
		
		ГруппаСертификатов = СведенияОРазрешительнойДокументацииДляВводаВОборот(ДокументыСертификации, ГруппаКодов);
		ТелоЗапроса.Вставить("permitInfo", ГруппаСертификатов);
		
	КонецЕсли;
	
	СообщениеJSON.ТекстСообщенияJSON  = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса, Истина);;
	СообщениеJSON.ТребуетсяПодписание = Истина;
	
	СообщенияJSON.Добавить(СообщениеJSON);
	
	Возврат СообщенияJSON;
	
КонецФункции

Функция СведенияОРазрешительнойДокументацииJSONОтчетПроизводственнойЛинииJSON(РезультатЗапроса, ДополнительныеПараметры, РеквизитыОрганизации)
	
	СообщенияJSON = Новый Массив;
	
	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();
	//@skip-warning
	ДанныеОтчета = РезультатЗапроса["ДанныеОтчета"].Выгрузить();
	//@skip-warning
	ДокументыСертификации = РезультатЗапроса["ДокументыСертификации"].Выгрузить();
	
	НомерВерсии    = Шапка.ПоследнийНомерВерсии + 1;
	ДокументСсылка = Шапка.Ссылка;
	Операция       = Шапка.Операция;
	
	СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Операция, НомерВерсии);
	
	КодыМаркировкиНормализованы = Истина;
	
	Для Каждого СтрокаОтчета Из ДанныеОтчета Цикл
		Если ЗначениеЗаполнено(СтрокаОтчета.ЗначениеШтрихкода) Тогда
			КодыМаркировкиНормализованы = Ложь;
		КонецЕсли;
		Прервать;
	КонецЦикла;
	
	ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(Шапка, Неопределено, Шапка.ВидПродукции);
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ВосстанавливатьСтруктуруКодаМаркировки", Не ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки);
	ПараметрыОбработки.Вставить("ПроверятьАлфавитКодовМаркировки",        ПараметрыСканирования.ПроверятьАлфавитКодовМаркировки);
	// Коды нормализуются при проверке вида упаковок перед формированием сообщения.
	ПараметрыОбработки.Вставить("КодыМаркировкиНормализованы",            КодыМаркировкиНормализованы);
	ПараметрыОбработки.Вставить("ОбрабатыватьЗначенияШтрихкодУпаковок",   Ложь);
	
	ДанныеОтчета.Колонки.Добавить("ТекстОшибкиЗначениеШтрихкода", Новый ОписаниеТипов("Строка"));
	
	// 1. Разбор кодов, подготовка данных для построения дерева упаковок.
	
	РезультатОбработкиДанныхОтчета = РазборКодаМаркировкиИССлужебный.НормализоватьДанныеОтчетаПроизводственнойЛинии(
		ДанныеОтчета, Шапка.ВидПродукции, ПараметрыОбработки);
	
	СохранитьРезультатОбработкиКодовМаркировки(ДокументСсылка, ДанныеОтчета);
	
	Если РезультатОбработкиДанныхОтчета.ЕстьОшибки Тогда
		
		СообщитьОНеправильномФормате(СообщениеJSON);
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	ИсточникДанных = РезультатОбработкиДанныхОтчета.ОбработанныеДанныеОтчета;
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("participantInn", РеквизитыОрганизации.ИНН);
		
	Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(Шапка.ВидПродукции)
		Или Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Шины Тогда
		
		ДанныеСертификации = ЗаполнитьДанныеСертификацииПоСтроке(Шапка);
		
		ГруппаКодов = Новый Массив;
		ТелоЗапроса.Вставить("codes", ГруппаКодов);
		
		Для Каждого СтрокаДанных Из ИсточникДанных Цикл
			
			ИсходнаяСтрока = СтрокаДанных.ИсходнаяСтрока;
			Для Каждого ИменаКолонок Из РезультатОбработкиДанныхОтчета.ГруппыКолонок Цикл
				
				Если Не ЗначениеЗаполнено(ИсходнаяСтрока[ИменаКолонок.КодМаркировки]) Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТЧ = Новый Структура;
				СтрокаТЧ.Вставить("code",          СтрокаДанных[ИменаКолонок.КодДляПередачиИСМП]);
				СтрокаТЧ.Вставить("permitDocInfo", ДанныеСертификации);
				
				ГруппаКодов.Добавить(СтрокаТЧ);
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		ГруппаКодов = Новый Массив;
		
		Для Каждого СтрокаДанных Из ИсточникДанных Цикл
			
			ИсходнаяСтрока = СтрокаДанных.ИсходнаяСтрока;
			Для Каждого ИменаКолонок Из РезультатОбработкиДанныхОтчета.ГруппыКолонок Цикл
				
				Если Не ЗначениеЗаполнено(ИсходнаяСтрока[ИменаКолонок.КодМаркировки]) Тогда
					Продолжить;
				КонецЕсли;
				ГруппаКодов.Добавить(СтрокаДанных[ИменаКолонок.КодДляПередачиИСМП]);
				
			КонецЦикла;
			
		КонецЦикла;
		
		ГруппаСертификатов = СведенияОРазрешительнойДокументацииДляВводаВОборот(ДокументыСертификации, ГруппаКодов);
		ТелоЗапроса.Вставить("permitInfo", ГруппаСертификатов);
		
	КонецЕсли;
	
	СообщениеJSON.ТекстСообщенияJSON  = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса, Истина);;
	СообщениеJSON.ТребуетсяПодписание = Истина;
	
	СообщенияJSON.Добавить(СообщениеJSON);
	
	Возврат СообщенияJSON;
	
КонецФункции

// Формирует JSON сообщения для документа "Отчет о перевзвешивании".
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УточнениеСведенийОКодахМаркировкиИСМП - Документ Уточнение сведений о кодах маркировки ИСМП.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция ОтчетОПеревзвешиванииJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено)
	
	Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПеревзвешивании;
	
	СообщенияJSON = Новый Массив;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Документ                      КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ИСМППрисоединенныеФайлы.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УточнениеСведенийОКодахМаркировкиИСМП КАК Шапка
	|		ПО Шапка.Ссылка   = &Ссылка
	|		 И Шапка.Операция = ИСМППрисоединенныеФайлы.Операция
	|		 И Шапка.Ссылка   = ИСМППрисоединенныеФайлы.Документ
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	
	|	Шапка.ВидПродукции      КАК ВидПродукции,
	|	Шапка.Операция          КАК Операция,
	|
	|	Шапка.Организация                КАК Организация,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|	Шапка.ОтчетПроизводственнойЛинии КАК ОтчетПроизводственнойЛинии,
	|	Шапка.Ссылка КАК Ссылка
	|
	|ИЗ
	|	Документ.УточнениеСведенийОКодахМаркировкиИСМП КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки.Количество КАК Количество
	|ИЗ
	|	Документ.УточнениеСведенийОКодахМаркировкиИСМП.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка = &Ссылка
	|",
	"ШтрихкодыУпаковок");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	ШтрихкодыУпаковок = РезультатЗапроса["ШтрихкодыУпаковок"].Выгрузить();
	
	Если Не Шапка.Следующий() Или ШтрихкодыУпаковок.Количество() = 0 Тогда
		
		СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Операция);
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	Если Не ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(Шапка.ВидПродукции) Тогда
		
		СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Шапка.Операция, НомерВерсии);
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
				СтрШаблон(
					НСтр("ru = 'Вид продукции ""%1"" не поддерживается.'"),
					Шапка.ВидПродукции));
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	Если Шапка.Операция <> Перечисления.ВидыОперацийИСМП.ОтчетОПеревзвешивании Тогда
		НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
		СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Шапка.Операция, НомерВерсии);
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
				СтрШаблон(
					НСтр("ru = 'Передача отчета о перевзвешивании для операции ""%1"" не поддерживается.'"),
					Шапка.Операция));
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;
	КонецЕсли;
	
	РеквизитыОрганизации = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Шапка.Организация);
	Операция             = Шапка.Операция;
	
	СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Операция, НомерВерсии);
	
	Если Не ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			СтрШаблон(НСтр("ru = 'Не заполнено поле ""ИНН"" для организации %1'"), Шапка.Организация));
		Возврат СообщенияJSON;
	КонецЕсли;
	
#Область РазборКодовМаркировки
	
	ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(Шапка, Неопределено, Шапка.ВидПродукции);
	
	Настройки = Новый Структура(
		"ЗапрашиватьДанныеСервисаИСМП, СсылкаНаОбъект",
		Ложь, ДокументСсылка);
	ЗаполнитьЗначенияСвойств(ПараметрыСканирования, Настройки);
	
	РезультатПоиска = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(
		ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки"),
		ПараметрыСканирования,, Истина);
	
#КонецОбласти
	
	ИсточникДанных = РезультатПоиска.МаркированныеТовары;
	
	ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииПрочее.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииПрочее.НачинаетсяСоСкобки       = Ложь;
	
	ГруппаКодов = Новый Массив;
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("participantInn", РеквизитыОрганизации.ИНН);
	
	ТелоЗапроса.Вставить("codes", ГруппаКодов);
	
	Для Каждого СтрокаИсточникаДанных Из ИсточникДанных Цикл
		
		РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкодаПоДаннымРазбора(
			СтрокаИсточникаДанных.Штрихкод, Шапка.ВидПродукции, СтрокаИсточникаДанных.ДанныеРазбора);
		СтрокаТЧ = Новый Структура;
		СтрокаТЧ.Вставить("code",          ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(РезультатРазбора, ПараметрыНормализацииПрочее));
		СтрокаТЧ.Вставить("productWeight", СтрокаИсточникаДанных.Количество*1000);
		
		ГруппаКодов.Добавить(СтрокаТЧ);
		
	КонецЦикла;
	
	СообщениеJSON.ТекстСообщенияJSON  = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса, Истина);;
	СообщениеJSON.ТребуетсяПодписание = Истина;
	
	СообщенияJSON.Добавить(СообщениеJSON);
	
	Возврат СообщенияJSON;
	
КонецФункции

Функция ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Операция, НомерВерсии = 1)
	
	СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
	
	СообщениеJSON.Организация       = Шапка.Организация;
	СообщениеJSON.Документ          = ДокументСсылка;
	СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
	СообщениеJSON.ВидПродукции      = Шапка.ВидПродукции;
	СообщениеJSON.Операция          = Операция;
	СообщениеJSON.Версия            = НомерВерсии;
	
	СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка, НомерВерсии);
	
	СообщениеJSON.ТипСообщения              = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеJSON.ТребуетсяПодписание       = Ложь;
	СообщениеJSON.СтанцияУправленияЗаказами = Неопределено;
	СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.ИСМП;
	
	Возврат СообщениеJSON;
	
КонецФункции

Процедура СохранитьРезультатОбработкиКодовМаркировки(ДокументСсылка, ОбработанныеДанные)
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	ДокументОбъект.ДанныеОтчетаПроизводственнойЛинии.Загрузить(ОбработанныеДанные);
	
	Если ДокументОбъект.Проведен Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецПопытки;
		
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщитьОНеправильномФормате(СообщениеJSON)
	ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
		СообщениеJSON,
		НСтр("ru = 'Ошибка при разборе данных кодов маркировки'"));
КонецПроцедуры

Функция ЗаполнитьДанныеСертификацииПоСтроке(ИсточникДанных)
	
	ДанныеСертификации = Новый Структура;
	ДанныеСертификации.Вставить("permitDocDate",   Формат(ИсточникДанных.ДатаДокументаСертификации, "ДФ=dd.MM.yyyy"));
	ДанныеСертификации.Вставить("permitDocNumber", ИсточникДанных.НомерДокументаСертификации);
	ДанныеСертификации.Вставить("permitDocType",   ИнтерфейсИСМПСлужебный.ВидДокументаСертификацииЧисло(ИсточникДанных.ВидДокументаСертификации));
	
	Возврат ДанныеСертификации;
	
КонецФункции

Функция СведенияОРазрешительнойДокументацииДляВводаВОборот(ДокументыСертификации, ГруппаКодов)
	
	ГруппаСертификатов = Новый Массив;
	Для Каждого СтрокаИсточника Из ДокументыСертификации Цикл
		ДанныеСертификации = ЗаполнитьДанныеСертификацииПоСтроке(СтрокаИсточника);
		ДанныеСертификации.Вставить("codes", ГруппаКодов);
		ГруппаСертификатов.Добавить(ДанныеСертификации);
	КонецЦикла;
	
	Возврат ГруппаСертификатов;
	
КонецФункции

#КонецОбласти

#Область ОбработкаКодовМаркировки

Функция ПараметрыЗаполнения()
	
	Результат = Новый Структура;
	Результат.Вставить("ИзмененныеСтроки", Новый Массив);
	Результат.Вставить("ДобавленныеСтроки", Новый Массив);
	Результат.Вставить("ДобавленныеШтрихкоды", Новый Массив);
	Результат.Вставить("РодительскийШтрихкод");
	
	Возврат Результат;
	
КонецФункции

//Процедура ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(РезультатОбработки, Форма, ДанныеШтрихкода)
//	
//	РезультатОбработки.ЕстьОшибки = Истина;
//	РезультатОбработки.ЕстьОшибкиВДеревеУпаковок = Истина;
//	РезультатОбработки.ОбщаяОшибка = Истина;
//	РезультатОбработки.ТекстОшибки = НСтр("ru = 'Обработка логистических упаковок запрещена.
//	                                            |Для уточнения сведений отсканируйте код потребительской упаковки.'");
//	
//КонецПроцедуры

Функция ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды)
	
	РезультатОбработки = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	
	ПараметрыЗаполнения = ПараметрыЗаполнения();
	
	ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыЗаполнения);
	
	РезультатОбработки.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
	РезультатОбработки.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;
	
	Возврат РезультатОбработки;
	
КонецФункции

Процедура ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, ДеревоУпаковок, ПараметрыЗаполнения, УпаковкаВерхнегоУровня = Неопределено)
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено
			И СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			УпаковкаВерхнегоУровняСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
		Иначе
			УпаковкаВерхнегоУровняСтрокиДерева = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(
			Форма, СтрокаДерева, ПараметрыЗаполнения, УпаковкаВерхнегоУровняСтрокиДерева);
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			ПараметрыЗаполнения.РодительскийШтрихкод = УпаковкаВерхнегоУровня;
			ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, СтрокаДерева, Неопределено, ПараметрыЗаполнения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыСканирования, ПараметрыЗаполнения = Неопределено)
	
	ИсточникДанных = Форма.Объект;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		
		ПараметрыЗаполнения  = ПараметрыЗаполнения();
		РезультатОбработки   = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(Неопределено, ДанныеШтрихкода);
		РодительскийШтрихкод = Неопределено;
		
	Иначе
		
		РезультатОбработки   = ПараметрыЗаполнения;
		РодительскийШтрихкод = ПараметрыЗаполнения.РодительскийШтрихкод;
		
	КонецЕсли;
	
	ОбработкаБезМаркировки = ТипЗнч(ДанныеШтрихкода) = Тип("Структура")
		И ДанныеШтрихкода.Свойство("ОбработатьБезМаркировки")
		И ДанныеШтрихкода.ОбработатьБезМаркировки;
	
	СпецификаОбработки = "";
	Если ДанныеШтрихкода.ПроизвольнаяЕдиницаУчета Тогда
		СпецификаОбработки = СпецификаОбработки + ",КоличествоКодов";
	КонецЕсли;
	
	ОбновляемаяСтрока = ПроверкаИПодборПродукцииИС.ДанныеШтрихкодаДляДобавленияВКеш(ДанныеШтрихкода, СпецификаОбработки);
	
	Если РодительскийШтрихкод <> Неопределено Тогда
		ОбновляемаяСтрока.ШтрихкодУпаковки = РодительскийШтрихкод;
	КонецЕсли;
	
	ПараметрыПоиска = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции(, Ложь);
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ДанныеШтрихкода);
	
	НайденныеСтрокиТовары = ИсточникДанных.Товары.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтрокиТовары.Количество() > 0 Тогда
		
		СтрокаТовары = НайденныеСтрокиТовары[0];
		
		// Поле Количество
		КоличествоМаркируемыхЕдиниц = ОбновляемаяСтрока.Количество;
		
		ВсегоПоПараметрамПоиска = 0;
		Для Каждого ПодходящаяСтрока Из НайденныеСтрокиТовары Цикл
			ВсегоПоПараметрамПоиска = ВсегоПоПараметрамПоиска + ПодходящаяСтрока.Количество;
		КонецЦикла;
		
		ВсегоВКеше = 0;
		Если Не ОбработкаБезМаркировки Тогда
			
			ВсегоВКеше = ПроверкаИПодборПродукцииИС.КоличествоПоДаннымКеша(Форма, ОбновляемаяСтрока);
			
			Если ВсегоВКеше < ВсегоПоПараметрамПоиска Тогда
				КоличествоМаркируемыхЕдиниц = Макс(0, КоличествоМаркируемыхЕдиниц + ВсегоВКеше - ВсегоПоПараметрамПоиска);
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТовары.Количество         = СтрокаТовары.Количество + КоличествоМаркируемыхЕдиниц;
		СтрокаТовары.КоличествоУпаковок = СтрокаТовары.КоличествоУпаковок + КоличествоМаркируемыхЕдиниц;
		
		Если КоличествоМаркируемыхЕдиниц > 0 Тогда
			ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки.Найти(СтрокаТовары);
			Если ДобавленныеСтроки = Неопределено Тогда
				ПараметрыЗаполнения.ИзмененныеСтроки.Добавить(СтрокаТовары);
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеШтрихкода.ПроизвольнаяЕдиницаУчета Тогда
			// Поле Количество потребительских кодов маркировки
			КоличествоМаркируемойПродукции = ОбновляемаяСтрока.КоличествоПотребительскихУпаковок;
			
			ВсегоПоПараметрамПоиска = 0;
			Для Каждого ПодходящаяСтрока Из НайденныеСтрокиТовары Цикл
				ВсегоПоПараметрамПоиска = ВсегоПоПараметрамПоиска + ПодходящаяСтрока.КоличествоПотребительскихУпаковок;
			КонецЦикла;
			
			ВсегоВКеше = ПроверкаИПодборПродукцииИС.КоличествоПоДаннымКеша(Форма, ОбновляемаяСтрока, "КоличествоПотребительскихУпаковок");
			
			Если ВсегоВКеше < ВсегоПоПараметрамПоиска Тогда
				КоличествоМаркируемойПродукции = Макс(0, КоличествоМаркируемойПродукции + ВсегоВКеше - ВсегоПоПараметрамПоиска);
			КонецЕсли;
			
			Если КоличествоМаркируемойПродукции > 0 Тогда
				
				СтрокаТовары.КоличествоПотребительскихУпаковок = СтрокаТовары.КоличествоПотребительскихУпаковок + КоличествоМаркируемойПродукции;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокаТовары = ИсточникДанных.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары, ОбновляемаяСтрока);
		СтрокаТовары.КоличествоУпаковок = СтрокаТовары.Количество;
		
		РезультатОбработки.ДобавленныеСтроки.Добавить(СтрокаТовары);
		
	КонецЕсли;
	
	Если Не ОбработкаБезМаркировки Тогда
		
		ПроверкаИПодборПродукцииИС.ДополнитьКешИТаблицуШтрихкодовУпаковок(Форма, ОбновляемаяСтрока, ПараметрыЗаполнения.ДобавленныеШтрихкоды);
		
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

#КонецОбласти

Процедура ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, ДокументОбъект)

	ПараметрыУказанияСерий = ПараметрыУказанияСерий(ДокументОбъект);
	ПустойСклад = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Склад");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ПустойСклад, ПараметрыУказанияСерий));
	
	ИнтеграцияИСПереопределяемый.ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, СтруктураДействий);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
