
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Контрагент    = Параметры.Контрагент;
	Организация   = Параметры.Организация;
	ДатаДокумента = Параметры.ДатаДокумента;
	Комиссионер   = Параметры.Комиссионер;
	КлючСтроки    = Параметры.КлючСтроки;
	ДоговорКонтрагента = Параметры.Договор;
	
	Если Параметры.Свойство("СчетаФактуры") Тогда
		
		ТаблицаСчетовФактур = Параметры.СчетаФактуры.Выгрузить();
		ФильтрПоКлючуСтроки = Новый Структура("КлючСтроки");
		ФильтрПоКлючуСтроки.КлючСтроки = КлючСтроки;
		НайденныеСтроки = ТаблицаСчетовФактур.НайтиСтроки(ФильтрПоКлючуСтроки);
		
		Если НайденныеСтроки <> Неопределено Тогда
		
			Для каждого ТекущаяСтрокаТаблицаСчетовФактур Из НайденныеСтроки Цикл
		
				НоваяСтрока = СчетаФактуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрокаТаблицаСчетовФактур);
		
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если Параметры.Свойство("Покупатели") Тогда
		Покупатели.Загрузить(Параметры.Покупатели.Выгрузить(,"ДатаСФ,НомерСФ,СчетФактура"));
	КонецЕсли;

	УстановитьУсловноеОформление();

	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.СчетФактура.Форма.ФормаВыбора" Тогда
	
		ТекущаяСтрока = Элементы.СчетаФактуры.ТекущиеДанные;
		ТекущаяСтрока.ИсходныйДокумент = ВыбранноеЗначение;
		
		УправлениеФормой(ЭтотОбъект);
	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	СписокДокументовСчетовФактур = Новый СписокЗначений;

	Для Индекс = 0 По СчетаФактуры.Количество() - 1 Цикл
		
		СтрокаТаблицы = СчетаФактуры[Индекс];
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ИсходныйДокумент)
				И НЕ СтрокаТаблицы.ПоТекущемуДокументу Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В строке %1 не выбран счет-фактура выставленный комиссионеру.'"),
				Индекс + 1);
			ОбщегоНазначения.СообщитьПользователю(
				Текст,
				,
				,
				,
				Отказ);
		КонецЕсли;

		Если СписокДокументовСчетовФактур.НайтиПоЗначению(СтрокаТаблицы.ИсходныйДокумент) <> Неопределено
			И ЗначениеЗаполнено(СтрокаТаблицы.ИсходныйДокумент) Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В строке %1 повторно указан документ %2.'"),
			Индекс + 1,
			СтрокаТаблицы.ИсходныйДокумент);
			ОбщегоНазначения.СообщитьПользователю(
			Текст,
			,
			,
			,
			Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НомерВходящегоИсходногоДокумента) 
			И ЗначениеЗаполнено(СтрокаТаблицы.ДатаВходящегоИсходногоДокумента)Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В строке %1 не заполнено поле Номер'"),
			Индекс + 1);
			ОбщегоНазначения.СообщитьПользователю(
			Текст,
			,
			,
			,
			Отказ);
			
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаВходящегоИсходногоДокумента) 
			И ЗначениеЗаполнено(СтрокаТаблицы.НомерВходящегоИсходногоДокумента)Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В строке %1 не заполнено поле Дата'"),
			Индекс + 1);
			ОбщегоНазначения.СообщитьПользователю(
			Текст,
			,
			,
			,
			Отказ);
			
		КонецЕсли;

		СписокДокументовСчетовФактур.Добавить(СтрокаТаблицы.ИсходныйДокумент);

	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СчетаФактурыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СчетаФактуры.ТекущиеДанные;
	
	РаспознатьСчетФактуру(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура СчетаФактурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.СчетаФактуры.ТекущиеДанные;
	
	Если Поле.Имя = "СчетаФактурыПредставлениеИсходногоДокумента" Тогда
	
		СтандартнаяОбработка = Ложь;
		ОткрытьДокументСчетФактура(ТекущаяСтрока);
	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СчетаФактурыПредставлениеИсходногоДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Возвраты.ТекущиеДанные;
	ОткрытьДокументСчетФактура(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура СчетаФактурыПриАктивизацииПоля(Элемент)
	
	Если Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Элемент.ТекущийЭлемент.Имя = "СчетаФактурыПредставлениеИсходногоДокумента" Тогда

		ТекущиеДанные = Элементы.СчетаФактуры.ТекущиеДанные;
		ОткрытьДокументСчетФактура(ТекущиеДанные);
		
	// Обход ошибки веб клиента
	#Если ВебКлиент Тогда
		Элементы.СчетаФактуры.ТекущийЭлемент = Элементы.СчетаФактурыПолученныеОтКомиссионера;
	#КонецЕсли
	
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)

	Если ПроверитьЗаполнение() Тогда
		ПеренестиДанные();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)

	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура открывает форму счета-фактуры, если заполнен реквизит ИсходныйДокумент
// Если реквизит пустой,то предлагает выбрать счет-фактуру
// Параметры:
//   ТекущаяСтрока - текущая строка в таблице СчетаФактуры
// 
&НаКлиенте
Процедура ОткрытьДокументСчетФактура(ТекущаяСтрока)

		// Если есть счет-фактура то открываем счет-фактуру
		Если ЗначениеЗаполнено(ТекущаяСтрока.ИсходныйДокумент) Тогда 
			
			ПараметрыИсходногоДокумента = Новый Структура("Ключ", ТекущаяСтрока.ИсходныйДокумент);
			
			ОткрытьФорму("Документ.СчетФактура.ФормаОбъекта", ПараметрыИсходногоДокумента, ЭтотОбъект);
			
		// Если счет-фактуры нет, то открываем список выбора счета-фактуры
		Иначе
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Организация", Организация);
			ПараметрыФормы.Вставить("Контрагент", Контрагент);
			
			ПараметрыОткрытия = Новый Структура("Отбор", ПараметрыФормы);
			
			ОткрытьФорму("Документ.СчетФактура.Форма.ФормаВыбора", ПараметрыОткрытия, ЭтотОбъект);
			
		КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РаспознатьСчетФактуру(ТекущаяСтрока)
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ИсходныйДокумент) Тогда
		
		ТекущаяСтрока.ПредставлениеИсходногоДокумента = "";

	Иначе
	
		ТекущаяСтрока.ПредставлениеИсходногоДокумента = ОписаниеИсходногоДокумента(ТекущаяСтрока.ИсходныйДокумент);
			
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеИсходногоДокумента(ИсходныйДокумент)

	ПараметрыИсходногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсходныйДокумент, "Номер, Дата");

	ОписаниеСчетФактуры = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Счет-фактура №%1 от %2'"),
		ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ПараметрыИсходногоДокумента.Номер, Истина, Ложь),
		Формат(ПараметрыИсходногоДокумента.Дата, "ДФ=dd.MM.yyyy"));
	
	Возврат ОписаниеСчетФактуры;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// СчетаФактурыПредставлениеИсходногоДокумента

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетаФактурыПредставлениеИсходногоДокумента");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СчетаФактуры.ПоТекущемуДокументу", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СчетаФактуры.ИсходныйДокумент", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаТабличнойЧасти);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Выбор'"));

	// СчетаФактурыПредставлениеИсходногоДокумента

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетаФактурыПредставлениеИсходногоДокумента");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СчетаФактуры.ИсходныйДокумент", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СчетаФактуры.ПоТекущемуДокументу", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Создается при записи документа>'"));
	
	// СчетаФактурыНомерВходящегоИсходногоДокумента

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетаФактурыНомерВходящегоИсходногоДокумента");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СчетаФактуры.ДатаВходящегоИсходногоДокумента", ВидСравненияКомпоновкиДанных.Заполнено, "");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СчетаФактуры.НомерВходящегоИсходногоДокумента", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	// СчетаФактурыДатаВходящегоИсходногоДокумента

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетаФактурыДатаВходящегоИсходногоДокумента");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СчетаФактуры.ДатаВходящегоИсходногоДокумента", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СчетаФактуры.НомерВходящегоИсходногоДокумента", ВидСравненияКомпоновкиДанных.Заполнено, "");

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПеренестиДанные(Отказ = Ложь)

	ПараметрыПередачи = Новый Структура;
	
	Если НЕ Отказ Тогда
		Модифицированность = Ложь;
		
		ПараметрыПередачи.Вставить("ТаблицаСчетовФактур", СчетаФактуры);
		ПараметрыПередачи.Вставить("КлючСтроки", КлючСтроки);
		
		ОповеститьОВыборе(ПараметрыПередачи);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Форма.ПодчиненныеЭлементы.ПодсказкаПодбораСчетовФактур.Заголовок =
		ПолучитьТекстПодбораСчетовФактур(Форма.Организация, Форма.Комиссионер, Форма.ДатаДокумента);

	Для каждого ТекущаяСтрокаСчетаФактуры Из Форма.СчетаФактуры Цикл
	
		РаспознатьСчетФактуру(ТекущаяСтрокаСчетаФактуры);
	
	КонецЦикла;
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьТекстПодбораСчетовФактур(Организация, Комиссионер, ДатаСведений)

	ОписаниеТекста = Новый Массив;
	ОписаниеТекста.Добавить(НСтр("ru='3. Если этого не произойдет, выберите вручную'"));

	Возврат Новый ФорматированнаяСтрока(ОписаниеТекста);

КонецФункции

&НаКлиенте
Процедура СчетаФактурыНомерВходящегоИсходногоДокументаПриИзменении(Элемент)

	НайтиИсходныйДокумент();

КонецПроцедуры

&НаКлиенте
Процедура СчетаФактурыДатаВходящегоИсходногоДокументаПриИзменении(Элемент)
	
	НайтиИсходныйДокумент();

КонецПроцедуры

&НаКлиенте
Процедура НайтиИсходныйДокумент()

	ТекущиеДанные = Элементы.СчетаФактуры.ТекущиеДанные;

	ТекущиеДанные.ПоТекущемуДокументу = Ложь;
	ТекущиеДанные.ИсходныйДокумент = "";
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.НомерВходящегоИсходногоДокумента)
		 ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.ДатаВходящегоИсходногоДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, 
		ПараметрыСчетаФактуры(ТекущиеДанные.НомерВходящегоИсходногоДокумента,
		ТекущиеДанные.ДатаВходящегоИсходногоДокумента));
	
	РаспознатьСчетФактуру(ТекущиеДанные);

КонецПроцедуры

&НаСервере
Функция ПараметрыСчетаФактуры(НомерВходящегоИсходногоДокумента, ДатаВходящегоИсходногоДокумента)
	
	ПараметрыКомиссионера = Новый Структура();
	ПараметрыКомиссионера.Вставить("Покупатель", Контрагент);
	ПараметрыКомиссионера.Вставить("Дата", ДатаВходящегоИсходногоДокумента);
	ПараметрыКомиссионера.Вставить("Номер", НомерВходящегоИсходногоДокумента);
	ПараметрыКомиссионера.Вставить("Организация", Организация);
	ПараметрыКомиссионера.Вставить("ДатаДокумента", ДатаДокумента);
	ПараметрыКомиссионера.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
		
	ПараметрыИсходногоДокумента = Новый Структура("ПоТекущемуДокументу,ИсходныйДокумент");
		
	ПараметрыИсходногоДокумента.ПоТекущемуДокументу = НайденСчетФактураВТекущемДокументе(
		ПараметрыКомиссионера, ЭтотОбъект.Покупатели);
		
	ПараметрыИсходногоДокумента.ИсходныйДокумент = НайтиСчетФактуруПоПараметрамКомиссионераНаСервере(ПараметрыКомиссионера);
	
	Возврат ПараметрыИсходногоДокумента;
	
КонецФункции
	
&НаСервере
Функция НайденСчетФактураВТекущемДокументе(ПараметрыОперации, Покупатели)
	
	Возврат ЕстьСчетФактураВТекущемДокументе(ПараметрыОперации, Покупатели);
	
КонецФункции
	
// Функция ищет счет-фактуру в таблицах Покупатели и Возвраты
// Параметры:
//   ПараметрыОперации - Структура - набор параметров Покупатель,Дата,Номер,
// 			Организация,ДатаДокумента,ДоговорКонтрагента, Покупатель
//   Покупатели - Таблица продаж покупателям
//   ОтборПоПокупателю - булево - флаг отбора по покупателю
//
// Возвращаемое значение:
// - Булево - Истина, если такие номер и дата счета-фактуры комиссионера есть в таблице Покупателей или Возвратов
&НаСервере
Функция ЕстьСчетФактураВТекущемДокументе(ПараметрыОперации, Покупатели, ОтборПоПокупателю = Ложь)
	
	Фильтр = Новый Структура("НомерСФ,ДатаСФ" + ?(ОтборПоПокупателю, ",Покупатель", ""),
		ПараметрыОперации.Номер,ПараметрыОперации.Дата,
		?(ОтборПоПокупателю, ПараметрыОперации.Покупатель, Неопределено));
		
	НайденныеСтрокиПоПродажам  = Покупатели.НайтиСтроки(Фильтр);
	
	Если (НайденныеСтрокиПоПродажам.Количество() > 0) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
		
КонецФункции

&НаСервере
Функция НайтиСчетФактуруПоПараметрамКомиссионераНаСервере(ПараметрыКомиссионера)

	Возврат НайтиСчетФактуруПоПараметрамКомиссионера(ПараметрыКомиссионера);

КонецФункции

&НаСервере
Функция НайтиСчетФактуруПоПараметрамКомиссионера(ПараметрыКомиссионера)

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажахПокупатели.Ссылка КАК Ссылка,
	|	ОтчетКомиссионераОПродажахПокупатели.СчетФактура КАК СчетФактура
	|ИЗ
	|	Документ.ОтчетКомиссионера.Покупатели КАК ОтчетКомиссионераОПродажахПокупатели
	|ГДЕ
	|	ОтчетКомиссионераОПродажахПокупатели.Покупатель = &Покупатель
	|	И ОтчетКомиссионераОПродажахПокупатели.Ссылка.Договор = &ДоговорКонтрагента
	|	И ОтчетКомиссионераОПродажахПокупатели.ДатаСФ = &Дата
	|	И ОтчетКомиссионераОПродажахПокупатели.НомерСФ = &Номер
	|	И ОтчетКомиссионераОПродажахПокупатели.Ссылка.Организация = &Организация
	|	И ОтчетКомиссионераОПродажахПокупатели.Ссылка.Проведен
	|	И ОтчетКомиссионераОПродажахПокупатели.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода";
	
	Запрос.УстановитьПараметр("Покупатель", ПараметрыКомиссионера.Покупатель);
	Запрос.УстановитьПараметр("Дата", ПараметрыКомиссионера.Дата);
	Запрос.УстановитьПараметр("Номер", ПараметрыКомиссионера.Номер);
	Запрос.УстановитьПараметр("Организация", ПараметрыКомиссионера.Организация);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ПараметрыКомиссионера.ДоговорКонтрагента);
	
	// Ограничиваем выборку документов в размере 180 дней, до даты документа
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыКомиссионера.ДатаДокумента - 24*60*60*180);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ПараметрыКомиссионера.ДатаДокумента));
	
	Результат = Запрос.Выполнить().Выбрать();
	
	НайденныйИсходныйДокумент = Неопределено;
	Если Результат.Следующий() Тогда
	
		НайденныйИсходныйДокумент = Результат.СчетФактура;
	
	КонецЕсли;

	Возврат НайденныйИсходныйДокумент;
	
КонецФункции

#КонецОбласти
