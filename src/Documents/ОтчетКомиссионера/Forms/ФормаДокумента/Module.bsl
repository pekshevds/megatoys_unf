
#Область ОписаниеПеременных

&НаКлиенте
Перем КопированиеСтрокиЗапасы;

&НаКлиенте
Перем КопированиеСтрокиЗапасыВозвраты;

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(
		Метаданные.Документы.ОтчетКомиссионера.ТабличныеЧасти.Запасы, НастройкиЗагрузкиДанных, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
			Объект.ВидОперации = Перечисления.ВидыОперацийОтчетКомиссионера.ПродажаИВозврат;
		КонецЕсли;
	Иначе
		Объект.ИспользоватьНовыйВидДокумента = Истина;
		Объект.ВидОперации = Перечисления.ВидыОперацийОтчетКомиссионера.ПродажаИВозврат;
	КонецЕсли;
	
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	Контрагент = Объект.Контрагент;
	Договор = Объект.Договор;
	НеУчитыватьЗаказыПриПередачеНаКомиссию = Договор.НеУчитыватьЗаказыПриПередачеНаКомиссию;
	ВалютаРасчетов = Объект.Договор.ВалютаРасчетов;
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	НациональнаяВалютаКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НациональнаяВалюта, ДатаДокумента);
	КурсНациональнаяВалюта = НациональнаяВалютаКурсКратность.Курс;
	КратностьНациональнаяВалюта = НациональнаяВалютаКурсКратность.Кратность;
	СпособЗаполненияСтавкиНДС = Справочники.ДоговорыКонтрагентов.СпособЗаполненияСтавкиНДСПоДоговору(
		Договор);
		
	ИменаТЧ = Новый Массив;
	ИменаТЧ.Добавить(Новый Структура("ИмяПоляПроверки, ИмяПоляОформления", "Объект.Запасы.СтранаПроисхождения",
	"ЗапасыНомерГТД"));
	
	ГрузовыеТаможенныеДекларацииСервер.ПриСозданииНаСервере(ЭтаФорма, ИменаТЧ, КэшЗначений);
	КэшЗначений.Вставить("ВерсияПодчиненногоСчетФактуры", Неопределено);
	КэшЗначений.Вставить("ВерсияПодчиненногоПолученногоСчетФактуры", Неопределено);
	КэшЗначений.Вставить("МодифицированностьФормы", Ложь);
		
	// Установить надписи счет-фактура и основание
	СчетФактураСсылка = СчетаФактурыУНФ.ПолучитьПодчиненныйСчетФактуру(Объект.Ссылка, Истина);
	Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(
	СчетФактураСсылка, Истина);
	КэшЗначений.Вставить("СчетФактураСсылка", ?(ТипЗнч(СчетФактураСсылка) = Тип("Структура"), СчетФактураСсылка.Ссылка,
	Неопределено));
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		И Не ЗначениеЗаполнено(Параметры.Основание) 
		И Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) 
		И Не ЗаполнениеОбъектовУНФ.ЭтоЗаполнениеПоШаблону(Параметры.ЗначенияЗаполнения) Тогда
		ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС(Истина);
		НалогиУНФ.ЗаполнитьНДСВключенВСтоимостьВДокументе(Объект);
	ИначеЕсли Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		Элементы.ЗапасыСуммаНДСПередачи.Видимость = Истина;
		Элементы.СчетФактураНадпись.Видимость = Истина;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСчетФактураНомерДата", "Видимость"
		, Элементы.СчетФактураНадпись.Видимость И Не ЗначениеЗаполнено(КэшЗначений.СчетФактураСсылка));
	Иначе
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДСПередачи.Видимость = Ложь;
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НаЭкспорт Тогда
			Элементы.СчетФактураНадпись.Видимость = Истина;
		Иначе
			Элементы.СчетФактураНадпись.Видимость = Ложь;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСчетФактураНомерДата", "Видимость"
		, Элементы.СчетФактураНадпись.Видимость И Не ЗначениеЗаполнено(КэшЗначений.СчетФактураСсылка));
	КонецЕсли;
	
	УчетВалютныхОпераций = Константы.ФункциональнаяУчетВалютныхОпераций.Получить();
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		И Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) 
		И Не ЗаполнениеОбъектовУНФ.ЭтоЗаполнениеПоШаблону(Параметры.ЗначенияЗаполнения) Тогда
		Объект.СтавкаНДСВознаграждения = Справочники.СтавкиНДС.СтавкаНДС(Компания.ВидСтавкиНДСПоУмолчанию);
	КонецЕсли;
	
	// Установка видимости договора.
	УстановитьВидимостьДоговора();
	
	// Установка доступности цен для редактирования.
	РазрешеноРедактированиеЦенДокументов = УправлениеДоступомУНФ.РазрешеноРедактированиеЦенДокументов();
	
	Элементы.ЗапасыЦенаПередачи.ТолькоПросмотр 	   = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСуммаПередачи.ТолькоПросмотр    = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСуммаНДСПередачи.ТолькоПросмотр = НЕ РазрешеноРедактированиеЦенДокументов;
	
	// Счета-фактуры на реализованные товары и услуги
	Элементы.ВыписыватьСчетаФактурыСводно.Доступность = ДатаДокумента >= '20150101';
	УстановитьОтборВыписыватьСчетаФактурыСводно();
	
	// Прослеживаемость
	Если КэшЗначений = Неопределено Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	Если Объект.Контрагент.Пустая() Тогда
		КэшЗначений.Вставить("РеализацияВЕАЭС", Ложь);
	Иначе
		КэшЗначений.Вставить("РеализацияВЕАЭС", Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Объект.Контрагент));
	КонецЕсли;
	РеализацияВЕАЭС = КэшЗначений.РеализацияВЕАЭС;
	Если Объект.Ссылка.Пустая() Тогда
		
		ОбновитьПризнакПрослеживаемости = (ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ЗаказПокупателя"))
		И ПрослеживаемаяОперация(Объект.ВидОперации);
		
		Если ОбновитьПризнакПрослеживаемости Тогда
			ОбновитьПризнакПрослеживаемости();
		КонецЕсли;
		
		ОбновитьОтображениеПрослеживаемости();
		ОбновитьОтображениеПрослеживаемости("ЗапасыВозвраты"); 
		
	КонецЕсли;
	// Конец Прослеживаемость
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Запасы");
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "ЗапасыВозвраты"); 
	
	// ГрупповоеИзменениеСтрок
	ЗаполнитьСписокДействий(РазрешеноРедактированиеЦенДокументов);
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрокСервер(), ЭтаФорма.ЗапасыИзменениеСтрокДействие);
	ЗапасыИзменениеСтрокДействиеПриОткрытии = ЗапасыИзменениеСтрокДействие;
	УстановитьПометку(Истина);
	// Конец ГрупповоеИзменениеСтрок
	
	// ГрупповоеИзменениеСтрок Возвраты 
	ЗаполнитьСписокДействий(РазрешеноРедактированиеЦенДокументов);
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрокСерверВозвраты(), ЭтаФорма.ЗапасыИзменениеСтрокДействиеВозвраты);
	ЗапасыИзменениеСтрокДействиеПриОткрытииВозвраты = ЗапасыИзменениеСтрокДействиеВозвраты;
	УстановитьПометку(Истина, "ЗапасыВозвраты");
	// Конец ГрупповоеИзменениеСтрок
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	НапоминанияПользователяУНФ.УстановитьОтображениеКомандОрганайзера(Элементы);
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	СписокЭлектронныхВесов = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("ЭлектронныеВесы", ,
		МенеджерОборудованияВызовСервера.РабочееМестоКлиента());
	Если СписокЭлектронныхВесов.Количество() = 0 Тогда
		// Нет подключенных весов.
		Элементы.ЗапасыПолучитьВес.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
	
	АвтоподборКонтактов.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект);
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента);
	
	ОпределитьВидимостьИУстановитьНастройкиУчетаВНалогообложении();
	
	// Серии номенклатуры
	ИспользоватьСерииНоменклатурыОстатки = СерииНоменклатурыУНФ.ИспользоватьСерииНоменклатурыОстатки();
	Элементы.ЗапасыГруппаСерииНоменклатуры.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	Элементы.ЗапасыВозвратыГруппаСерииНоменклатуры.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры"); 
	
	// Характеристики
	НоменклатураВДокументахСервер.ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристик(ЭтаФорма);
	Если Параметры.Ключ.Пустая() Тогда
		НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект, Истина)
	КонецЕсли;
	
	// Прослеживаемость
	ПрослеживаемостьФормыУНФ.ОбновитьУсловноеОформлениеТабличнойЧастиДляПрослеживаемости(ЭтаФорма);
	
	ДополнитьУсловноеОформлениеФормы();
	
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ОтчетКомиссионера", НастройкиФормыВыбораНоменклатуры);
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "ЗапасыВозвраты"); 

	ОбработатьДоступныеОтчетыКомиссионера(ЭтотОбъект);
	Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Объект.ДокументОснование);
	ЗаполнитьСписокДокументОснование();
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
	ОбновитьЗаголовокФормы();
	
	// ГТД и РНПТ.
	ИменаТЧИПолей = ГрузовыеТаможенныеДекларацииСервер.ИменаТЧИПолейДляТаблицыЗапасы_БазовыеПоляСПрослеживаемостью();
	ГрузовыеТаможенныеДекларацииСервер.ПриСозданииНаСервереДляДокументаСПрослеживаемостью(ЭтаФорма, ИменаТЧИПолей, КэшЗначений);
	
	ИменаТЧИПолей = ГрузовыеТаможенныеДекларацииСервер.ИменаТЧИПолейДляТаблицыЗапасы_БазовыеПоляСПрослеживаемостью(, "ЗапасыВозвраты"); 
	ГрузовыеТаможенныеДекларацииСервер.ПриСозданииНаСервереДляДокументаСПрослеживаемостью(ЭтаФорма, ИменаТЧИПолей, КэшЗначений, "ЗапасыВозвраты"); 
	
	// Конец ГТД и РНПТ.
	
	// Для отражения информации по новой схеме движений
	ИмяКлючаОбъекта = "ОтчетКомиссионераНоваяСхемаДвижений";
	
	ЗначениеНастройки = ХранилищеСистемныхНастроек.Загрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_" + "ПоказыватьИнформациюПоНовойСхемеДвижений");
	
	Если ЗначениеНастройки = Неопределено Тогда
		ПоказыватьИнформациюПоНовойСхемеДвижений = Истина;
	Иначе
		ПоказыватьИнформациюПоНовойСхемеДвижений = ЗначениеНастройки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Не Объект.УдержатьКомиссионноеВознаграждение Тогда
			Элементы.ДекорацияСхемаДвижений.Заголовок = НСтр("ru ='Оформление приходной накладной для учета комиссионного вознаграждения не требуется.'");
			Элементы.ДекорацияСхемаДвижений.Видимость = Истина;
		Иначе
			Элементы.ДекорацияСхемаДвижений.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Если Не Объект.УдержатьКомиссионноеВознаграждение Тогда
			Если Объект.ИспользоватьНовуюСхемуДвижений Тогда
				Элементы.ДекорацияСхемаДвижений.Заголовок = НСтр("ru ='Оформление приходной накладной для учета комиссионного вознаграждения не требуется.'");
			Иначе
				Элементы.ДекорацияСхемаДвижений.Заголовок = НСтр("ru ='Чтобы учесть комиссионное вознаграждение необходимо оформить приходную накладную.'");
			КонецЕсли;
		Иначе
			Элементы.ДекорацияСхемаДвижений.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СпособРегистрацииСчетФактуры = ?(Объект.НаВозвратыВыставляетсяКорректировочныйСчетФактура, 1, 0);
	
	ПроверитьЗаполнениеСпособаРаспределенияПоЗаказам(); 
	ПроверитьЗаполнениеСпособаРаспределенияПоЗаказам("ЗапасыВозвраты"); 
	
	Если Не ЗначениеЗаполнено(Объект.СпособРаспределенияПоЗаказам) Тогда
		МодифицированностьФормы = ЭтаФорма.Модифицированность;
		Объект.СпособРаспределенияПоЗаказам = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто;
		ЭтаФорма.Модифицированность = МодифицированностьФормы;
	КонецЕсли;
	
	НастройкиКоличества = ПолучитьНастройкиИзмененияКоличества();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиКоличества);
		
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
	ОбновитьЗаголовокФормы();
	
	НеУчитыватьЗаказыПриПередачеНаКомиссию = Объект.Договор.НеУчитыватьЗаказыПриПередачеНаКомиссию;
	Элементы.ЗапасыЗаказПокупателя.Видимость = Не НеУчитыватьЗаказыПриПередачеНаКомиссию;
	Элементы.ПредоплатаЗаказ.Видимость = Не НеУчитыватьЗаказыПриПередачеНаКомиссию;
	
	// Прослеживаемость
	Если КэшЗначений = Неопределено Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	КэшЗначений.Вставить("РеализацияВЕАЭС", Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Объект.Контрагент));
	РеализацияВЕАЭС = КэшЗначений.РеализацияВЕАЭС;
	ОбновитьОтображениеПрослеживаемости();
	ОбновитьОтображениеПрослеживаемости("ЗапасыВозвраты"); 
	// Конец Прослеживаемость
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
// Процедура - обработчик события формы ПередЗаписью
//
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	КэшЗначений.МодифицированностьФормы = Модифицированность;
	
КонецПроцедуры

// Процедура - обработчик события ПередЗаписьюНаСервере формы.
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ТекстСообщения = "";
		Справочники.ДоговорыКонтрагентов.ПроверитьСоответствиеДоговораУсловиямДокумента(
		ТекстСообщения,
		Объект.Договор,
		Объект.Ссылка,
		Объект.Организация,
		Объект.Контрагент,
		Отказ);
		
		Если ТекстСообщения <> "" Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Если Отказ Тогда
				Сообщение.Текст = СтрШаблон(НСтр("ru = 'Документ не проведен. %1'"), ТекстСообщения);
			Иначе
				Сообщение.Текст = ТекстСообщения;
			КонецЕсли;
			
			Если Отказ Тогда
				Сообщение.ПутьКДанным = "Объект";
				Сообщение.Поле = "Договор";
				Сообщение.Сообщить();
				Возврат;
			Иначе
				Сообщение.Сообщить();
			КонецЕсли;
			
		КонецЕсли;
		
		Если УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройкиЗачетаАвансов() = Перечисления.ДаНет.Да
			И ТекущийОбъект.Предоплата.Количество() = 0 Тогда
			ЗаполнитьПредоплату(ТекущийОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ИсторияВыбора", "", Элементы.ЗапасыНоменклатура.СписокВыбора.ВыгрузитьЗначения());
	
КонецПроцедуры // ПередЗаписьюНаСервере()

// Процедура заполняет авансы.
//
&НаСервере
Процедура ЗаполнитьПредоплату(ТекущийОбъект)
	
	ТекущийОбъект.ЗаполнитьПредоплату();
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	Оповестить("ОповещениеОбИзмененииДолга");
	
	Если КэшЗначений.МодифицированностьФормы = Истина
		И (КэшЗначений.ВерсияПодчиненногоСчетФактуры = "1.6.11" 
			ИЛИ КэшЗначений.ВерсияПодчиненногоПолученногоСчетФактуры = "1.6.11" ) Тогда
		
		ТекстВопроса = НСтр("ru = 'В накладную были внесены изменения.
			|Требуется самостоятельно поправить подчиненный документ счет-фактура'");
		
		ПоказатьПредупреждение(, ТекстВопроса, 0, НСтр("ru ='Счет-фактура'"));
		
	КонецЕсли;
	
	// Прослеживаемость
	Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	КонецЦикла;
	Для каждого СтрокаЗапасы Из Объект.ЗапасыВозвраты Цикл 
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	КонецЦикла;
	// Конец Прослеживаемость
	
КонецПроцедуры // ПослеЗаписи()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	ТекущийОбъект.ДополнительныеСвойства.Свойство("ВерсияПодчиненногоСчетФактуры", КэшЗначений.ВерсияПодчиненногоСчетФактуры);
	ТекущийОбъект.ДополнительныеСвойства.Свойство("ВерсияПодчиненногоПолученногоСчетФактуры", КэшЗначений.ВерсияПодчиненногоПолученногоСчетФактуры);
	
	// ГрупповоеИзменениеСтрок
	Если Элементы.ГруппаЗапасыИзменениеСтрок.Видимость Тогда
		УстановитьПометку(Истина);
	КонецЕсли;
	// Конец ГрупповоеИзменениеСтрок
	
	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);
	// Конец Обсуждения
	
	Справочники.ДоговорыКонтрагентов.ЗаписатьСпособЗаполненияСтавкиНДСПоДокументу(ТекущийОбъект.Договор,
		ТекущийОбъект.Ссылка, ТекущийОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС);
		
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
	ОбновитьЗаголовокФормы();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеСчетовФактур()
	
	Если Объект.ИспользоватьНовыйВидДокумента Тогда 
		Для Каждого СтрокаТаблицы Из Объект.ПокупателиВозвраты Цикл
			ЗаполнитьСтрокуПоСчетуФактуре(СтрокаТаблицы);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах") Тогда
		Для Каждого СтрокаТаблицы Из Объект.Покупатели Цикл
			ЗаполнитьСтрокуПоСчетуФактуре(СтрокаТаблицы);
		КонецЦикла
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуПоСчетуФактуре(СтрокаТаблицы)

	Если СтрокаТаблицы.ВыставленСФ Тогда
	
		СтрокаТаблицы.ПредставлениеСчетаФактуры = 
			ОписаниеНовогоСчетаФактуры(СтрокаТаблицы.СчетФактура);
				
	Иначе
	
		СтрокаТаблицы.ПредставлениеСчетаФактуры = "";

	КонецЕсли;

	Если Объект.НаВозвратыВыставляетсяКорректировочныйСчетФактура Тогда
	
		ОбновитьТекущуюСтрокуВозвраты(ЭтотОбъект, СтрокаТаблицы);
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеНовогоСчетаФактуры(СчетФактура)

	Если НЕ ЗначениеЗаполнено(СчетФактура) Тогда
		Возврат "";
	КонецЕсли;
	
	ОписаниеСчетФактуры = "";
	
	Если ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда

		ПараметрыСчетФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетФактура, "НомерВходящегоДокумента, ДатаВходящегоДокумента");
		
		ОписаниеСчетФактуры = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 от %2'"),
		ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ПараметрыСчетФактуры.НомерВходящегоДокумента, Истина, Ложь), 
		Формат(ПараметрыСчетФактуры.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy"));
	
	Иначе
	
		ПараметрыСчетФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетФактура, "Номер, Дата");
		
		ОписаниеСчетФактуры = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 от %2'"),
		ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ПараметрыСчетФактуры.Номер, Истина, Ложь), 
		Формат(ПараметрыСчетФактуры.Дата, "ДФ=dd.MM.yyyy"));
		
	КонецЕсли;

	Возврат ОписаниеСчетФактуры;

КонецФункции

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьИДоступность(ЭтотОбъект);
	
	// ГрупповоеИзменениеСтрок
	ОпределитьОбъектИзменений();
	// Конец ГрупповоеИзменениеСтрок
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события ПриЗакрытии.
//
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		// ГрупповоеИзменениеСтрок
		СохранитьТекущееДействиеИзмененияСтрок();
		// Конец ГрупповоеИзменениеСтрок
	КонецЕсли;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события ОбработкаОповещения формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Элементы.Страницы.ТекущаяСтраница.Имя = "ГруппаЗапасыВозвраты" Тогда 
		ИмяТаблицыЗапасы	= "ЗапасыВозвраты";
	Иначе
		ИмяТаблицыЗапасы	= "Запасы";
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ИмяТабличнойЧасти = "Покупатели";
			Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтотОбъект, ИмяТаблицыЗапасы) Тогда 
				Возврат;
			КонецЕсли;
			Данные = МенеджерОборудованияУНФКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ОбновлениеТекстаПроСчетФактуруПолученный" Тогда
		
		ПредставлениеЗаголовка = РаботаСФормойДокументаКлиент.ПредставлениеЗаголовкаПодчиненногоСчетаФактуры(Объект.Ссылка, Источник, Параметр, КэшЗначений);
		Если ПредставлениеЗаголовка <> Неопределено Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СчетФактураНадпись", "Заголовок", ПредставлениеЗаголовка);
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСчетФактураНомерДата", "Видимость", Ложь);
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_Контрагент" 
		И ЗначениеЗаполнено(Параметр)
		И Объект.Контрагент = Параметр Тогда
		
		УстановитьВидимостьДоговора();
		
	ИначеЕсли ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		АдресЗапасовВХранилище = Параметр;
		
		ИмяТабличнойЧасти	= ИмяТаблицыЗапасы; 
			
		ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, Истина, Ложь);
		
		СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", Элементы[ИмяТабличнойЧасти].ОтборСтрок["КлючСвязи"]);
		Элементы[ИмяТабличнойЧасти].ОтборСтрок = СтрОтбора;
		
		Если ИмяТаблицыЗапасы = "Запасы" Тогда 
			ОбновитьКолонкуВсегоНаКлиенте();
		Иначе
			ОбновитьКолонкуВсегоНаКлиенте(, "ПокупателиВозвраты");
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПодборСерий"
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		ИзменилосьКоличество = ПолучитьСерииНоменклатурыИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки);
		Если ИзменилосьКоличество Тогда
			РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТабличнойЧасти);
		КонецЕсли; 
		
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей

	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, ИмяТаблицыЗапасы); 
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект.Ссылка);
	// Конец Обсуждения
	
КонецПроцедуры // ОбработкаОповещения()

// Процедура - обработчик события ОбработкаВыбора.
//
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если Элементы.Страницы.ТекущаяСтраница.Имя = "ГруппаЗапасыВозвраты" Тогда 
		ИмяТаблицыЗапасы	= "ЗапасыВозвраты";
	Иначе
		ИмяТаблицыЗапасы	= "Запасы";
	КонецЕсли;
	
	ИмяТабличнойЧасти = ИмяТаблицыЗапасы; 
	
	Если ИсточникВыбора.ИмяФормы = "Документ.ОтчетКомиссионера.Форма.ФормаПодбораПоОстаткам" Тогда
		
		ПолучитьЗапасыПереданныеИзХранилища(ВыбранноеЗначение);
		
		Если ИмяТаблицыЗапасы= "ЗапасыВозвраты" Тогда 
			ОбновитьКолонкуВсегоНаКлиенте(Истина,"ПокупателиВозвраты");
		Иначе
			ОбновитьКолонкуВсегоНаКлиенте(Истина);
		КонецЕсли;
		
		ЭтаФорма.Модифицированность = Истина;
		
		// Прослеживаемость
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаПодбораРНПТ" Тогда
		
		ОбработкаВыбораРНПТННаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаВыбора" Тогда
		
		ОбработкаВыбораГТДНаКлиенте(ВыбранноеЗначение, ИмяТаблицыЗапасы); 
		
		// Конец Прослеживаемость
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетФактура.Форма.ФормаВыбора" Тогда
		
		Если Объект.ИспользоватьНовыйВидДокумента И ИмяТаблицыЗапасы = "ЗапасыВозвраты" Тогда 
			
			Если ИсточникВыбора.Параметры.КлючНазначенияИспользования = "ТаблицаВозвраты" Тогда
				ТекущиеДанные = Элементы.ПокупателиВозвраты.ТекущиеДанные;
				ОбработкаВыбораСчетаФактуры(ВыбранноеЗначение, ТекущиеДанные.НомерСтроки-1, "ПокупателиВозвраты");
				ОбновитьТаблицуИсходныхДокументов("ПокупателиВозвраты");
				ОбновитьТекущуюСтрокуВозвраты(ЭтотОбъект,,"ПокупателиВозвраты");
			КонецЕсли;
			
			Возврат
		КонецЕсли;
		
		Если ИсточникВыбора.Параметры.КлючНазначенияИспользования = "ТаблицаВозвраты" Тогда
			ТекущиеДанные = Элементы.Покупатели.ТекущиеДанные;
			ОбработкаВыбораСчетаФактуры(ВыбранноеЗначение, ТекущиеДанные.НомерСтроки-1);
			ОбновитьТаблицуИсходныхДокументов();
			ОбновитьТекущуюСтрокуВозвраты(ЭтотОбъект);
		КонецЕсли;
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ОтчетКомиссионера.Форма.ФормаПодбораСчетовФактур" Тогда 
		
		ОбработкаВыбораПодбораСчетовФактур(ВыбранноеЗначение);
		
		Если Объект.ИспользоватьНовыйВидДокумента И ИмяТаблицыЗапасы = "ЗапасыВозвраты" Тогда 
			
			ОбновитьТекущуюСтрокуВозвраты(ЭтотОбъект,, "ПокупателиВозвраты");
			
			Возврат
		КонецЕсли;
		
		ОбновитьТекущуюСтрокуВозвраты(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДанныеДляИзмененияДаты = ДокументыУНФКлиент.ДанныеДляИзмененияДаты(ЭтотОбъект, Объект);
	Если ДанныеДляИзмененияДаты.ДатаНеМенялась Тогда
		Возврат;
	КонецЕсли;
	
	ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты);
		
	ЦеныИВалютаКлиент.ПересчитатьКурсКратностьВалютыРасчетов(ДанныеДляИзмененияДаты.ВалютаКурсКратность, Объект,
		ЭтотОбъект);
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	
	// Счета-фактуры на реализованные товары и услуги
	СчетаФактурыСводно = Объект.ВыписыватьСчетаФактурыСводно;
	Если ДатаДокумента < '20150101' Тогда
		Объект.ВыписыватьСчетаФактурыСводно = Ложь;
		Элементы.ВыписыватьСчетаФактурыСводно.Доступность = Ложь;
	Иначе
		Объект.ВыписыватьСчетаФактурыСводно = Истина;
		Элементы.ВыписыватьСчетаФактурыСводно.Доступность = Истина;
	КонецЕсли;
	Если СчетаФактурыСводно <> Объект.ВыписыватьСчетаФактурыСводно Тогда
		УстановитьОтборВыписыватьСчетаФактурыСводно();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ВыписыватьСчетаФактурыСводно.
//
&НаКлиенте
Процедура ВыписыватьСчетаФактурыСводноПриИзменении(Элемент)
	
	УстановитьОтборВыписыватьСчетаФактурыСводно();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СпособРасчетаКомиссионногоВознаграждения.
//
&НаКлиенте
Процедура СпособРасчетаКомиссионногоВознагражденияПриИзменении(Элемент)
	
	Если Не Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение(
		"Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") И ЗначениеЗаполнено(
		Объект.ПроцентКомиссионногоВознаграждения) Тогда
		Если Объект.Запасы.Количество() > 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("СпособРасчетаКомиссионногоВознагражденияПриИзмененииЗавершение",
				ЭтотОбъект), НСтр("ru = 'Изменился способ расчета. Пересчитать комиссионное вознаграждение?'"),
				РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Возврат;
		КонецЕсли;
	ИначеЕсли Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение(
		"Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") Тогда
		Если Объект.Запасы.Количество() > 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("СпособРасчетаКомиссионногоВознагражденияПриИзмененииЗавершение",
				ЭтотОбъект), НСтр("ru = 'Комиссионное вознаграждение будет очищено, продолжить?'"),
				РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СпособРасчетаКомиссионногоВознагражденияПриИзмененииФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаКомиссионногоВознагражденияПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
		КонецЦикла;
	КонецЕсли;
	
	СпособРасчетаКомиссионногоВознагражденияПриИзмененииФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаКомиссионногоВознагражденияПриИзмененииФрагмент()
	
	УстановитьВидимостьИДоступность(ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДСВознаграждения.
//
&НаКлиенте
Процедура СтавкаНДСВознагражденияПриИзменении(Элемент)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СтавкаНДСВознагражденияПриИзмененииЗавершение", ЭтотОбъект),
		НСтр("ru = 'Пересчитать суммы НДС вознаграждения?'"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСВознагражденияПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДСВознаграждения);
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
		СтрокаТабличнойЧасти.СуммаНДСВознаграждения = ?(Объект.СуммаВключаетНДС,
		СтрокаТабличнойЧасти.СуммаВознаграждения - (СтрокаТабличнойЧасти.СуммаВознаграждения) / ((СтавкаНДС + 100) / 100),
		СтрокаТабличнойЧасти.СуммаВознаграждения * СтавкаНДС / 100);
		
	КонецЦикла;

КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПроцентКомиссионногоВознаграждения.
//
&НаКлиенте
Процедура ПроцентКомиссионногоВознагражденияПриИзменении(Элемент)
	
	Если Объект.Запасы.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПроцентКомиссионногоВознагражденияПриИзмененииЗавершение",
			ЭтотОбъект), НСтр("ru = 'Изменился процент вознаграждения. Пересчитать комиссионное вознаграждение?'"),
			РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентКомиссионногоВознагражденияПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// Надо предложить пересчитать комиссионное вознаграждение.
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ПроцентКомиссионногоВознагражденияПриИзменении()

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница) 
	
	Если Не Объект.ИспользоватьНовыйВидДокумента Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаСсылки.Видимость = Не (ТекущаяСтраница.Имя = "ГруппаЗапасыВозвраты" Или ТекущаяСтраница.Имя = "ГруппаДополнительно");
	Элементы.Итоги.Видимость = ТекущаяСтраница.Имя = "ГруппаЗапасы" Или ТекущаяСтраница.Имя = "ГруппаГлавное";
	Элементы.ГруппаВсегоВозвраты.Видимость = ТекущаяСтраница.Имя = "ГруппаЗапасыВозвраты" Или ТекущаяСтраница.Имя = "ГруппаГлавное";
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
// Выполняет очистку договора и табличной части.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ОбработатьИзменениеКонтрагента();

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеКонтрагента()
	
	КонтрагентПередИзменением = Контрагент;
	КонтрагентВестиРасчетыПоЗаказамПередИзменением = КонтрагентВестиРасчетыПоЗаказам;
	Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		
		ДанныеКонтрагента = ДанныеКонтрагентаДляИзменения(ДатаДокумента, Объект.Контрагент, Объект.Организация);
		Объект.Договор = ДанныеКонтрагента.Договор;
		
		ДанныеКонтрагента.Вставить("КонтрагентПередИзменением", КонтрагентПередИзменением);
		ДанныеКонтрагента.Вставить("КонтрагентВестиРасчетыПоЗаказамПередИзменением", КонтрагентВестиРасчетыПоЗаказамПередИзменением);
		
		ОбработатьИзменениеДоговора(ДанныеКонтрагента);
		
		Если ДанныеКонтрагента.Свойство("Проект") Тогда
			Объект.Проект = ДанныеКонтрагента.Проект;
		КонецЕсли;
		
		// Прослеживаемость
		НастроитьЭлементыПрослеживаемостиПриИзмененииКонтрагента(ДанныеКонтрагента);
		// Конец Прослеживаемость
		
	Иначе
		
		Объект.Договор = Договор; // Восстанавливаем автоматически очищенный договор.
		Элементы.ЗапасыЗаказПокупателя.Видимость = Не НеУчитыватьЗаказыПриПередачеНаКомиссию;
		Элементы.ПредоплатаЗаказ.Видимость = Не НеУчитыватьЗаказыПриПередачеНаКомиссию;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Договор.
// Заполняет реквизиты формы курс и кратность.
//
&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры // ДоговорПриИзменении()

// Процедура - обработчик события НачалоВыбора поля ввода Договор.
//
&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, Объект.Договор);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокВзаиморасчетовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСФормойДокументаКлиент.ОткрытьОтчетВзаиморасчетыСКонтрагентом(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура УдержатьКомиссионноеВознаграждениеПриИзменении(Элемент)
	
	Если Объект.УдержатьКомиссионноеВознаграждение Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НоменклатураДляОтраженияСуммыБезВознаграждения", "Видимость", Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НоменклатураДляОтраженияСуммыБезВознаграждения", "Видимость", Ложь);
		Объект.НоменклатураДляОтраженияСуммыБезВознаграждения = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Не Объект.УдержатьКомиссионноеВознаграждение Тогда
			Элементы.ДекорацияСхемаДвижений.Заголовок = НСтр("ru ='Оформление приходной накладной для учета комиссионного вознаграждения не требуется.'");
			Элементы.ДекорацияСхемаДвижений.Видимость = Истина;
		Иначе
			Элементы.ДекорацияСхемаДвижений.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Если Не Объект.УдержатьКомиссионноеВознаграждение Тогда
			Если Объект.ИспользоватьНовуюСхемуДвижений Тогда
				Элементы.ДекорацияСхемаДвижений.Заголовок = НСтр("ru ='Оформление приходной накладной для учета комиссионного вознаграждения не требуется.'");
			Иначе
				Элементы.ДекорацияСхемаДвижений.Заголовок = НСтр("ru ='Чтобы учесть комиссионное вознаграждение необходимо оформить приходную накладную.'");
			КонецЕсли;
			Элементы.ДекорацияСхемаДвижений.Видимость = Истина;
		Иначе
			Элементы.ДекорацияСхемаДвижений.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ЕстьСчетФактурыВСтроках = Ложь;
	Для Каждого СтрокаТабличнойЧасти Из Объект.Покупатели Цикл
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетФактура) Тогда
			ЕстьСчетФактурыВСтроках = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьСчетФактурыВСтроках Тогда
		СтрокаСообщения = НСтр("ru = 'В строках табличной части Покупатели введены счет фактуры. Изменение операции невозможно.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионера") Тогда
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах")
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах") Тогда
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионера");
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеВидаОперации();
	ПроверитьПоложениеКолонкиСебестоимость();
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиОтчетКомиссионераПриИзменении(Элемент)
	ОбработатьДоступныеОтчетыКомиссионера(ЭтотОбъект);
	ПроверитьПоложениеКолонкиСебестоимость();
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиПослеУдаления(Элемент)
	ОбработатьДоступныеОтчетыКомиссионера(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НайденныйСчетФактура = ПолучитьПодчиненныйСчетФактуру();
	
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах")
		И ЗначениеЗаполнено(НайденныйСчетФактура) Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru = 'На основании документа введена счет фактура. Смена операции невозможна.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ЗаполнитьПризнакАвтораспределенияЗаказовКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнформацияПоНовойСхемеЗакрытьНажатие(Элемент)
	Элементы.ГруппаИнформацияПоНовойСхеме.Видимость = Ложь;
	ПоказыватьИнформациюПоНовойСхемеДвижений = Ложь;
	
	СохранитьНастройкуПоказыватьИнформациюПоНовойСхеме();
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкуПоказыватьИнформациюПоНовойСхеме()

	ИмяКлючаОбъекта = "ОтчетКомиссионераНоваяСхемаДвижений";
	ХранилищеСистемныхНастроек.Сохранить(ИмяКлючаОбъекта,
	ИмяКлючаОбъекта+"_" + "ПоказыватьИнформациюПоНовойСхемеДвижений", ПоказыватьИнформациюПоНовойСхемеДвижений);
	
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиВозвратыВыставленСФПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПокупателиВозвраты.ТекущиеДанные;
	
	Если ТекущиеДанные.ВыставленСФ Тогда
	
		ТекущиеДанные.ПояснениеСчетФактура = НСтр("ru='Корр. счет-фактура'");
		ТекущиеДанные.ПояснениеКСчетамФактурам = НСтр("ru='К счету-фактуре (счетам-фактурам)'");
	
	Иначе

		ТекущиеДанные.ПояснениеСчетФактура = "";
		ТекущиеДанные.ПояснениеКСчетамФактурам = "";
		ТекущиеДанные.НомерСФ =  "";
		ТекущиеДанные.ДатаСФ = "";
		ТекущиеДанные.КСчетуФактуреКомиссионераНомер = "";
		ТекущиеДанные.КСчетуФактуреКомиссионераДата = "";
		ТекущиеДанные.ПредставлениеСчетаФактуры = "";
		ТекущиеДанные.ПодборСчетовФактур = "";
		ТекущиеДанные.ПоТекущемуДокументу = Ложь;
		
		УдалитьИсходныеСчетФактурыПоКлючу(ТекущиеДанные.КлючСвязи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиВозвратыКСчетуФактуреКомиссионераДатаПриИзменении(Элемент)
	НайтиИсходныйДокумент("ПокупателиВозвраты");
	ОбновитьТаблицуИсходныхДокументов("ПокупателиВозвраты");
	ОбновитьТекущуюСтрокуВозвраты(ЭтотОбъект,,"ПокупателиВозвраты");
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиВозвратыКСчетуФактуреКомиссионераНомерПриИзменении(Элемент)
	НайтиИсходныйДокумент("ПокупателиВозвраты");
	ОбновитьТаблицуИсходныхДокументов("ПокупателиВозвраты");
	ОбновитьТекущуюСтрокуВозвраты(ЭтотОбъект,,"ПокупателиВозвраты");
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиВозвратыПредставлениеСчетаФактурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ПокупателиВозвраты.ТекущиеДанные;
	НачалоВыбораВозвратыПредставлениеСчетаФактуры(ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиВозвратыПодборСчетовФактурНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ПокупателиВозвраты.ТекущиеДанные;
	НачалоВыбораВозвратыПодборСчетовФактур(ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиВозвратыОтчетКомиссионераПриИзменении(Элемент)
	ОбработатьДоступныеОтчетыКомиссионера(ЭтотОбъект, Истина);
	ПроверитьПоложениеКолонкиСебестоимость("ПокупателиВозвраты", "ЗапасыВозвраты");
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиВозвратыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ПокупателиВозвраты.ТекущиеДанные;
	
	Если Не ТекущаяСтрока.ВыставленСФ Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ПокупателиПредставлениеСчетаФактуры" Тогда
			
		НачалоВыбораВозвратыПредставлениеСчетаФактуры(ТекущаяСтрока);
		
		СтандартнаяОбработка = Ложь;
		
		
	ИначеЕсли Поле.Имя = "ПокупателиКСчетуФактуреКомиссионераНомер" Тогда
	
		ТекущаяСтрокаВозвраты = ТекущаяСтрока;

		Если НЕ ЗначениеЗаполнено(ТекущаяСтрокаВозвраты.КСчетуФактуреКомиссионераНомер) Тогда
			Возврат;
		КонецЕсли;
		
		ОткрытьФормуПодбораСчетовФактур(ТекущаяСтрокаВозвраты);
		СтандартнаяОбработка = Ложь;
		
	ИначеЕсли Поле.Имя = "ПокупателиПодборСчетовФактур" Тогда
	
		НачалоВыбораВозвратыПодборСчетовФактур(ТекущаяСтрока);
		СтандартнаяОбработка = Ложь;
	
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиВозвратыПриАктивизацииСтроки(Элемент)
	
	ИмяТабличнойЧасти = "ПокупателиВозвраты";
	ТабличныеЧастиУНФКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "ЗапасыВозвраты");
	
	ПроверитьПоложениеКолонкиСебестоимость("ПокупателиВозвраты", "ЗапасыВозвраты");
	
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиВозвратыПриАктивизацииПоля(Элемент)
	
	Если Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Элемент.ТекущийЭлемент.Имя = "ПокупателиВозвратыПодборСчетовФактур" Тогда

		ТекущиеДанные = Элементы.ПокупателиВозвраты.ТекущиеДанные;
		
		Если ТекущиеДанные.ВыставленСФ Тогда
			
			НачалоВыбораВозвратыПодборСчетовФактур(ТекущиеДанные);

			Элементы.ПокупателиВозвраты.ТекущийЭлемент = Элементы.ПокупателиВозвратыКСчетуФактуреКомиссионераДата;
			
		КонецЕсли;
	
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ПокупателиВозвратыПредставлениеСчетаФактуры" Тогда
		
		ТекущиеДанные = Элементы.ПокупателиВозвраты.ТекущиеДанные;
		
		Если ТекущиеДанные.ВыставленСФ Тогда
	
			НачалоВыбораВозвратыПредставлениеСчетаФактуры(ТекущиеДанные);
		
			Элементы.ПокупателиВозвраты.ТекущийЭлемент = Элементы.ПокупателиВозвратыКСчетуФактуреКомиссионераДата;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиВозвратыПередУдалением(Элемент, Отказ)

	// Серии
	ТекущийПокупатель = Элементы.ПокупателиВозвраты.ТекущиеДанные;
	РезультатПоиска = Объект.ЗапасыВозвраты.НайтиСтроки(Новый Структура("КлючСвязи", ТекущийПокупатель.КлючСвязи));
	Для каждого СтрокаЗапасы Из РезультатПоиска Цикл
		
		РезультатПоискаСН = Объект.СерииНоменклатурыВозвраты.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаЗапасы.КлючСвязиСерииНоменклатуры));
		Для Каждого СтрокаСерииНоменклатуры Из РезультатПоискаСН Цикл
			ИндексУдаления = Объект.СерииНоменклатурыВозвраты.Индекс(СтрокаСерииНоменклатуры);
			Объект.СерииНоменклатурыВозвраты.Удалить(ИндексУдаления);
		КонецЦикла;
	КонецЦикла;
	// Серии
	
	РезультатПоиска = Объект.ВозвратыИсходныеДокументы.НайтиСтроки(Новый Структура("КлючСтроки", ТекущийПокупатель.КлючСвязи));
	Для Каждого СтрокаСФ Из РезультатПоиска Цикл
		ИндексУдаления = Объект.ВозвратыИсходныеДокументы.Индекс(СтрокаСФ);
		Объект.ВозвратыИсходныеДокументы.Удалить(ИндексУдаления);
	КонецЦикла;
	
	ИмяТабличнойЧасти = "ПокупателиВозвраты";
	ТабличныеЧастиУНФКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтаФорма, "ЗапасыВозвраты");
	
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиВозвратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИмяТабличнойЧасти = "ПокупателиВозвраты";
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтаФорма);
		ТабличныеЧастиУНФКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "ЗапасыВозвраты");
		
		Если Копирование Тогда
			
			СтрокаТабличнойЧасти.ВыставленСФ = Ложь;
			СтрокаТабличнойЧасти.СчетФактура = Неопределено;
			СтрокаТабличнойЧасти.ПояснениеСчетФактура = "";
			СтрокаТабличнойЧасти.ПояснениеКСчетамФактурам = "";
			СтрокаТабличнойЧасти.НомерСФ =  "";
			СтрокаТабличнойЧасти.ДатаСФ = "";
			СтрокаТабличнойЧасти.КСчетуФактуреКомиссионераНомер = "";
			СтрокаТабличнойЧасти.КСчетуФактуреКомиссионераДата = "";
			СтрокаТабличнойЧасти.ПредставлениеСчетаФактуры = "";
			СтрокаТабличнойЧасти.ПодборСчетовФактур = "";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Копирование Тогда
		СтрокаТабличнойЧасти.Всего = 0;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПокупателиВозвратыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ЗаполнитьПризнакАвтораспределенияЗаказовКлиент(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиВозвратыПослеУдаления(Элемент)
	ОбработатьДоступныеОтчетыКомиссионера(ЭтотОбъект, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВозвратыПометкаПриИзменении(Элемент)
	ГрупповоеИзменениеСтрокКлиент.СтрокаПометкаПриИзменении(Объект.ЗапасыВозвраты, Элементы.ЗапасыУстановитьФлажки, Элементы.ЗапасыСнятьФлажки);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВозвратыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыВозвраты.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьСбросКоличества И СбрасыватьКоличество
		И СтрокаТабличнойЧасти.Количество <> НовоеКоличествоПриИзмененииНоменклатуры Тогда
		
		ДопПараметр = Новый Структура();
		ДопПараметр.Вставить("Элемент", Элемент);
		ДопПараметр.Вставить("Количество", СтрокаТабличнойЧасти.Количество);
		Оповещение = Новый ОписаниеОповещения("ЗапасыВозвратыПодтверждениеСбросаКоличестваЗавершение",
			ЭтотОбъект, ДопПараметр);
		ОткрытьФорму("ОбщаяФорма.ПодтверждениеСбросаКоличества", , , , , , Оповещение);
		
	Иначе
		
		Если СбрасыватьКоличество Тогда
			НовоеКоличество = НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
		ЗапасыВозвратыНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВозвратыПодтверждениеСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗапрашиватьСбросКоличества = Результат.ЗапрашиватьСбросКоличества;
		Если НЕ ЗапрашиватьСбросКоличества Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		КонецЕсли;
		Если Результат.СбрасыватьКоличество Тогда
			НовоеКоличество = Результат.НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = ДополнительныеПараметры.Количество;
		КонецЕсли;
	Иначе
		НовоеКоличество = ДополнительныеПараметры.Количество;
	КонецЕсли;
	
	ЗапасыВозвратыНоменклатураПриИзмененииПродолжить(ДополнительныеПараметры.Элемент, НовоеКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВозвратыНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество)

	СтрокаТабличнойЧасти = Элементы.ЗапасыВозвраты.ТекущиеДанные;
		
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",	 СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия",	 СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("ДатаОбработки",	 Объект.Дата);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		СтруктураДанные.Вставить("ДатаОбработки",	 Объект.Дата);
		СтруктураДанные.Вставить("ВидЦен",			 Объект.ВидЦен);
		СтруктураДанные.Вставить("ВалютаДокумента",	 Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("Коэффициент",		 1);
	КонецЕсли;
	
	СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанные);
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = СтруктураДанные.НомерГТД;
	СтрокаТабличнойЧасти.Количество = НовоеКоличество;
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
	СтрокаТабличнойЧасти.ЦенаПередачи = 0;
	СтрокаТабличнойЧасти.СуммаПередачи = 0;
	СтрокаТабличнойЧасти.СуммаНДСПередачи = 0;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
	// Серии
	Для каждого ВыделеннаяСтрока Из Элементы.ЗапасыВозвраты.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.ЗапасыВозвраты.ДанныеСтроки(ВыделеннаяСтрока);
		СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатурыВозвраты, ТекущиеДанныеСтроки,,ИспользоватьСерииНоменклатурыОстатки, "СерииНоменклатурыВозвраты");
	КонецЦикла;
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если СтруктураДанные.ИспользоватьХарактеристики Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
			СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
		КонецЕсли;
	КонецЕсли;
	
	//Партии
	СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
	
	Если СтруктураДанные.ИспользоватьПартии Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Партия = СтруктураВыбораНоменклатуры.Партия;
			СтруктураВыбораНоменклатуры.Партия = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
		КонецЕсли;
	КонецЕсли;
	// Конец Партии
	
	// Прослеживаемость
	Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров
		И ПрослеживаемаяОперация(Объект.ВидОперации) Тогда
		СтрокаТабличнойЧасти.ПрослеживаемыйТовар = СтруктураДанные.ПрослеживаемыйТовар;
		СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = СтруктураДанные.ПрослеживаемыйКомплект;
		СтрокаТабличнойЧасти.КодТНВЭД = СтруктураДанные.ТоварнаяНоменклатураВЭД;
	Иначе
		СтрокаТабличнойЧасти.ПрослеживаемыйТовар = Ложь;
		СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = Ложь;
		СтрокаТабличнойЧасти.КодТНВЭД = Неопределено;
	КонецЕсли;
	// Конец Прослеживаемость
	
	СтрокаТабличнойЧасти.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
	
	ПодборНоменклатурыИзСписка = Ложь;
	
	ОбновитьКолонкуВсегоНаКлиенте(,"ПокупателиВозвраты");
	ЗаполнитьПризнакАвтораспределенияЗаказовКлиент(Истина);
	
	// Прослеживаемость
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти, "СведенияПрослеживаемости");
	КонецЕсли;
	// Конец Прослеживаемость

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВозвратыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти = Элементы.ЗапасыВозвраты.ТекущиеДанные;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ОтчетКомиссионера", НастройкиФормыВыбораНоменклатуры, Истина, "ЗапасыВозвраты", ВыбранноеЗначение.СтруктураНастроек);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "ЗапасыВозвраты");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		ВыбранноеЗначение = СтрокаТабличнойЧасти.Номенклатура;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВозвратыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыВозвраты.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация",	 		Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура",		СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",		СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия",				СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("СтранаПроисхождения",	СтрокаТабличнойЧасти.СтранаПроисхождения);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки",	 Объект.Дата);
		СтруктураДанные.Вставить("ВидЦен",			 Объект.ВидЦен);
		СтруктураДанные.Вставить("ВалютаДокумента",	 Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("СтавкаНДС", 		 СтрокаТабличнойЧасти.СтавкаНДС);
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
		СтруктураДанные.Вставить("Цена",			 СтрокаТабличнойЧасти.Цена);
		
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПартияПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.СтранаПроисхождения= СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД			= СтруктураДанные.НомерГТД;
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
		РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
	// Прослеживаемость
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти, "СведенияПрослеживаемости");
	КонецЕсли;
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВозвратыПартияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыВозвраты.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация",	 		Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура",		СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",		СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия",				СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("СтранаПроисхождения",	СтрокаТабличнойЧасти.СтранаПроисхождения);
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПартияПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.СтранаПроисхождения= СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД			= СтруктураДанные.НомерГТД;
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти, "СведенияПрослеживаемости");
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВозвратыСерииНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяТабличнойЧасти = "ЗапасыВозвраты";
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерииНоменклатуры("ЗапасыВозвраты");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВозвратыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыВозвраты.ТекущиеДанные;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	
	// Сумма передачи.
	СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * СтрокаТабличнойЧасти.Количество;
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	// Сумма НДС передачи.
	СтрокаТабличнойЧасти.СуммаНДСПередачи = ?(Объект.СуммаВключаетНДС,
		СтрокаТабличнойЧасти.СуммаПередачи - (СтрокаТабличнойЧасти.СуммаПередачи) / ((СтавкаНДС + 100) / 100),
		СтрокаТабличнойЧасти.СуммаПередачи * СтавкаНДС / 100);
	
	// Сумма вознаграждения.
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти, "СведенияПрослеживаемости");
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВозвратыЕдиницаИзмеренияПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ЗапасыВозвраты.ТекущиеДанные;
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВозвратыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыВозвраты.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение 
		ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	// Цена.
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
		
		СтрокаТабличнойЧасти.ЦенаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
		РассчитатьСуммыПередачи(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти, "СведенияПрослеживаемости");
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВозвратыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.ЗапасыВозвраты.ТекущиеДанные;
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВозвратыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыВозвраты.ТекущиеДанные;
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Сумма вознаграждения.
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВозвратыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыВозвраты.ТекущиеДанные;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		
	// Сумма НДС передачи.
	СтрокаТабличнойЧасти.СуммаНДСПередачи = ?(Объект.СуммаВключаетНДС,
												СтрокаТабличнойЧасти.СуммаПередачи - (СтрокаТабличнойЧасти.СуммаПередачи) / ((СтавкаНДС + 100) / 100),
												СтрокаТабличнойЧасти.СуммаПередачи * СтавкаНДС / 100);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВозвратыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыВозвраты.ТекущиеДанные;
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВозвратыЦенаПередачиПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ЗапасыВозвраты.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЦенаПередачи) Тогда
		СтрокаТабличнойЧасти.СпособРаспределения = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Вручную");
	КонецЕсли;
	
	РассчитатьСуммыПередачи(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВозвратыСуммаПередачиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.ЗапасыВозвраты.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаПередачи) Тогда
		СтрокаТабличнойЧасти.СпособРаспределения = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Вручную");
	КонецЕсли;
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.ЦенаПередачи = СтрокаТабличнойЧасти.СуммаПередачи / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	// Сумма НДС передачи.
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		
	СтрокаТабличнойЧасти.СуммаНДСПередачи = ?(Объект.СуммаВключаетНДС,
												СтрокаТабличнойЧасти.СуммаПередачи - (СтрокаТабличнойЧасти.СуммаПередачи) / ((СтавкаНДС + 100) / 100),
												СтрокаТабличнойЧасти.СуммаПередачи * СтавкаНДС / 100);
	
	// Сумма вознаграждения.
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВозвратыСуммаВознагражденияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыВозвраты.ТекущиеДанные;
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДСВознаграждения);
		
	СтрокаТабличнойЧасти.СуммаНДСВознаграждения = ?(Объект.СуммаВключаетНДС,
													СтрокаТабличнойЧасти.СуммаВознаграждения - (СтрокаТабличнойЧасти.СуммаВознаграждения) / ((СтавкаНДС + 100) / 100),
													СтрокаТабличнойЧасти.СуммаВознаграждения * СтавкаНДС / 100);
	Объект.СуммаВознагражденияВозврат = Объект.ЗапасыВозвраты.Итог("СуммаВознаграждения");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВозвратыСпособРаспределенияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыВозвраты.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.СпособРаспределения = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто") Тогда
		СтрокаТабличнойЧасти.СуммаНДСПередачи = 0;
		СтрокаТабличнойЧасти.ЦенаПередачи = 0;
		СтрокаТабличнойЧасти.СуммаПередачи = 0;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.СпособРаспределения = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто")
		Или СтрокаТабличнойЧасти.СпособРаспределения = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.ПустаяСсылка") Тогда
		СтрокаТабличнойЧасти.ЗаказПокупателя = ПредопределенноеЗначение("Документ.ЗаказПокупателя.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВозвратыЗаказПокупателяПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ЗапасыВозвраты.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя) Тогда
		СтрокаТабличнойЧасти.СпособРаспределения = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Вручную");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВозвратыСтранаПроисхожденияПриИзменении(Элемент)
	
	Если КэшЗначений.УчетГТД Тогда
		
		СтрокаТабличнойЧасти = Элементы.ЗапасыВозвраты.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения)
			ИЛИ СтрокаТабличнойЧасти.СтранаПроисхождения = КэшЗначений.Россия Тогда
			
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
			
		КонецЕсли;
		
		// Прослеживаемость
		УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти, "СведенияПрослеживаемости");
		// Конец Прослеживаемость
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВозвратыНомерГТДПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыВозвраты.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
		
		ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
		Если ДатаГТД > КонецДня(Объект.Дата) Тогда
			
			ТекстСообщения = НСтр("ru ='Внимание: выбранная ГТД датирована более поздней датой, чем текущий документ.'");
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ЗапасыВозвраты",
			СтрокаТабличнойЧасти.НомерСтроки, "НомерГТД");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , КонтекстноеПоле);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВозвратыНомерГТДПриРНПТПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.ЗапасыВозвраты.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
		
		ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
		Если ДатаГТД > КонецДня(Объект.Дата) Тогда
			
			ТекстСообщения = НСтр("ru ='Внимание: выбранная ГТД датирована более поздней датой, чем текущий документ.'");
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ЗапасыВозвраты",
				СтрокаТабличнойЧасти.НомерСтроки, "НомерГТД");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , КонтекстноеПоле);
			
		КонецЕсли;
		
	КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВозвратыРНПТНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяТабличнойЧасти = "ЗапасыВозвраты";
	ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "ЗапасыВозвраты", Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВозвратыРНПТОчистка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыВозвраты.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		Если СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
			УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти, "СведенияПрослеживаемости");
		Иначе
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
		КонецЕсли;
		
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВозвратыПриИзменении(Элемент)
	
	Если КопированиеСтрокиЗапасыВозвраты = Неопределено ИЛИ НЕ КопированиеСтрокиЗапасыВозвраты Тогда
		ОбновитьКолонкуВсегоНаКлиенте(,"ПокупателиВозвраты");
	Иначе
		КопированиеСтрокиЗапасыВозвраты = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВозвратыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// Прослеживаемость
	СтрокаТабличнойЧасти = Объект.ЗапасыВозвраты.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Поле = Элементы.ЗапасыВозвратыРНПТ И СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
		ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "ЗапасыВозвраты", Ложь, Истина);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	Если Поле.Имя = "ЗапасыВозвратыПрослеживаемыйТовар" Тогда
		ТекущиеДанные = Элементы.ЗапасыВозвраты.ТекущиеДанные;
		Если ТекущиеДанные.ПрослеживаемыйТовар Тогда
			ПрослеживаемостьФормыКлиентУНФ.ПоказатьПредупреждениеПрослеживаемыйТовар();
		КонецЕсли;
	КонецЕсли;
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВозвратыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ИмяТабличнойЧасти = "ПокупателиВозвраты";
	
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтаФорма, Элемент.Имя) Тогда
		Отказ = Истина;
	КонецЕсли; 
	
	Если Не Отказ И Копирование Тогда
		
		ОбновитьКолонкуВсегоНаКлиенте(,"ПокупателиВозвраты");
		
		ТекСтрокаПокупатели = Элементы.ПокупателиВозвраты.ТекущиеДанные;
		ТекСтрокаПокупатели.Всего = ТекСтрокаПокупатели.Всего + Элемент.ТекущиеДанные.Всего;
		
		КопированиеСтрокиЗапасы = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВозвратыПередУдалением(Элемент, Отказ)
	
	// Серии номера
	Для Каждого ВыделеннаяСтрока Из Элементы.ЗапасыВозвраты.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.ЗапасыВозвраты.ДанныеСтроки(ВыделеннаяСтрока);
		СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатурыВозвраты, ТекущиеДанныеСтроки,,ИспользоватьСерииНоменклатурыОстатки);
		// Прослеживаемость
		УдалитьСвязанныеЗаписи(ТекущиеДанныеСтроки, "СведенияПрослеживаемости");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВозвратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ИмяТабличнойЧасти = "ПокупателиВозвраты";
	
	Если НоваяСтрока Тогда
		ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтаФорма, Элемент.Имя);
		
		Если ЗначениеЗаполнено(Объект.СпособРаспределенияПоЗаказам) Тогда 
			Элемент.ТекущиеДанные.СпособРаспределения = Объект.СпособРаспределенияПоЗаказам;
		Иначе
			Элемент.ТекущиеДанные.СпособРаспределения = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто");
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяТабличнойЧасти = "ЗапасыВозвраты";
	
	Если НоваяСтрока И Копирование Тогда
		Элемент.ТекущиеДанные.КлючСвязиСерииНоменклатуры = 0;
		Элемент.ТекущиеДанные.СерииНоменклатуры = "";
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, Элемент.ТекущиеДанные);
		
		// Прослеживаемость
		Элемент.ТекущиеДанные.ИдентификаторСтроки = "";
		Элемент.ТекущиеДанные.РНПТ = "";
	КонецЕсли;

	// ГрупповоеИзменениеСтрок
	Элемент.ТекущиеДанные.Пометка = Истина;
	// Конец ГрупповоеИзменениеСтрок
	
	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыВозвратыСерииНоменклатуры Тогда
		ОткрытьПодборСерииНоменклатуры("ЗапасыВозвраты");
	КонецЕсли;

	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.Количество = НовоеКоличествоПриИзмененииНоменклатуры;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовПодвалаФормы

&НаКлиенте
Процедура СчетФактураНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ГруппаСчетФактураНомерДата.Видимость Тогда
		
		ОшибкиЗаполнения = Ложь;
		
		Если Не ЗначениеЗаполнено(СчетФактураНомер) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не заполнен номер счет-фактуры.'");
			Сообщение.Поле = "СчетФактураНомер";
			Сообщение.Сообщить();
			ОшибкиЗаполнения = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СчетФактураДата) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не заполнена дата счет-фактуры.'");
			Сообщение.Поле = "СчетФактураДата";
			Сообщение.Сообщить();
			ОшибкиЗаполнения = Истина;
		КонецЕсли;
		
		Если ОшибкиЗаполнения Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СчетаФактурыУНФКлиент.ОткрытьСчетФактуру(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "удалить" Тогда
		Объект.ДокументОснование = Неопределено;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Неопределено);
		Модифицированность = Истина;
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "заполнить" Тогда
		ЗаполнитьПоОснованиюНачало();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "выбрать" Тогда
		// Выбрать основание
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборТипаОснованияЗавершение", ЭтотОбъект);
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокДокументОснование, Элементы.ДокументОснованиеНадпись);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "открыть" Тогда
		
		РаботаСФормойДокументаКлиент.ОткрытьФормуДокументаПоСсылке(Объект.ДокументОснование);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоДокументу(Объект.ДокументОснование);
		ОбработатьИзменениеКонтрагента();
		УстановитьВидимостьИДоступность(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументу(ДокОснование)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(ДокОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;

	ЗаполнитьПризнакиИспользованияХарактеристик();
	
	// Прослеживаемость
	ОбновитьОтображениеПрослеживаемости(); 
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТипаОснованияЗавершение(ВыбранноеИмяФормы, Параметры) Экспорт
	
	Если ВыбранноеИмяФормы<>Неопределено Тогда
		
		СтруктураПараметровОтбора = Новый Структура();
		Если ВыбранноеИмяФормы.Значение = "Документ.РасходнаяНакладная.ФормаВыбора" Тогда
			ВидОперацииРасходнаяНакладная = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию");
			СтруктураПараметровОтбора = Новый Структура("Отбор", Новый Структура("Контрагент, Договор, ВидОперации", Контрагент, Договор, ВидОперацииРасходнаяНакладная));
		КонецЕсли;
		
		Если ВыбранноеИмяФормы.Значение = "Документ.ОтчетКомиссионера.ФормаВыбора" Тогда
			
			СписокОтбора = Новый СписокЗначений;
			СписокОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионера"));
			СписокОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ПродажаИВозврат"));
			СписокОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ПустаяСсылка"));
			
			СтруктураПараметровОтбора.Вставить("Отбор", Новый Структура("Контрагент, Договор, ВидОперации", Контрагент, Договор, СписокОтбора));
		КонецЕсли;
		
		_ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
		ОткрытьФорму(ВыбранноеИмяФормы.Значение, СтруктураПараметровОтбора, ЭтотОбъект, ,,,_ОповещениеОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснованиеЗавершение(ВыбранноеЗначение, Параметры) Экспорт

	Если ВыбранноеЗначение<>Неопределено Тогда
		Объект.ДокументОснование = ВыбранноеЗначение;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(ВыбранноеЗначение);
		Модифицированность = Истина;
		
		ЗаполнитьПоОснованиюНачало();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюНачало() Экспорт

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения, 
		НСтр("ru = 'Заполнить документ по выбранному основанию?'"), 
		РежимДиалогаВопрос.ДаНет, 0);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДокументОснование()
	СписокДокументОснование.Очистить();
	СписокДокументОснование.Добавить("Документ.РасходнаяНакладная.ФормаВыбора", НСтр("ru = 'Расходная накладная'"));
	
	Если Объект.ИспользоватьНовыйВидДокумента Тогда 
		СписокДокументОснование.Добавить("Документ.ОтчетКомиссионера.ФормаВыбора", НСтр("ru = 'Отчет комиссионера о продажах'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах Тогда
		СписокДокументОснование.Добавить("Документ.ОтчетКомиссионера.ФормаВыбора", НСтр("ru = 'Отчет комиссионера о продажах'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРегистрацииСчетФактурыПриИзменении(Элемент)
	
	ИмяТабЧастиПокупатели = ?(Объект.ИспользоватьНовыйВидДокумента, "ПокупателиВозвраты", "Покупатели");
	
	ЕстьСчетФактурыВСтроках = Ложь;
	Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТабЧастиПокупатели] Цикл
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетФактура) Тогда
			ЕстьСчетФактурыВСтроках = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьСчетФактурыВСтроках Тогда
		СтрокаСообщения = НСтр("ru = 'В строках табличной части Покупатели(Возвраты) введены счет фактуры. Установка флага невозможна.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
		Если СпособРегистрацииСчетФактуры = 1 Тогда
			СпособРегистрацииСчетФактуры = 0;
		ИначеЕсли СпособРегистрацииСчетФактуры = 0 Тогда
			СпособРегистрацииСчетФактуры = 1;
		КонецЕсли;
		Объект.НаВозвратыВыставляетсяКорректировочныйСчетФактура = (СпособРегистрацииСчетФактуры = 1);
		Возврат;
	КонецЕсли;
	
	Объект.НаВозвратыВыставляетсяКорректировочныйСчетФактура = (СпособРегистрацииСчетФактуры = 1);
	УстановитьВидимостьИДоступность(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПокупатели

// Процедура - обработчик события ПриАктивизацииСтроки табличной части Покупатели.
//
&НаКлиенте
Процедура ПокупателиПриАктивизацииСтроки(Элемент)
	
	ИмяТабличнойЧасти = "Покупатели";
	ТабличныеЧастиУНФКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "Запасы");
	
	ПроверитьПоложениеКолонкиСебестоимость();
	
КонецПроцедуры // ПокупателиПриАктивизацииСтроки()

&НаКлиенте
Процедура ПроверитьПоложениеКолонкиСебестоимость(ИмяТабличнойЧастиПокупатели = "Покупатели", ИмяТабличнойЧастиЗапасы = "Запасы") 
	
	ДанныеСтроки = Элементы[ИмяТабличнойЧастиПокупатели].ТекущиеДанные;
	
	Если Объект.ИспользоватьНовыйВидДокумента Тогда
		
		ИмяКолонкиЗапасы = ИмяТабличнойЧастиЗапасы + "Себестоимость";
		
		Если ИмяТабличнойЧастиПокупатели = "ПокупателиВозвраты" Тогда
			Если Не ДанныеСтроки = Неопределено И ЗначениеЗаполнено(ДанныеСтроки.ОтчетКомиссионера) Тогда
				
				Элементы[ИмяКолонкиЗапасы].Видимость = Ложь;
				
				ПараметрыОтбора = Новый Структура("КлючСвязи", ДанныеСтроки.КлючСвязи);
				НайденныеСтроки = Объект[ИмяТабличнойЧастиЗапасы].НайтиСтроки(ПараметрыОтбора);
				
				Для Каждого СтрокаЗапасы Из НайденныеСтроки Цикл
					Если ЗначениеЗаполнено(СтрокаЗапасы.Себестоимость) Тогда
						СтрокаЗапасы.Себестоимость = 0;
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				Элементы[ИмяКолонкиЗапасы].Видимость = Истина;
			КонецЕсли;
			
		Иначе
			
			Элементы[ИмяКолонкиЗапасы].Видимость = Ложь;
			
			Если Не ДанныеСтроки = Неопределено Тогда
				
				ПараметрыОтбора = Новый Структура("КлючСвязи", ДанныеСтроки.КлючСвязи);
				НайденныеСтроки = Объект[ИмяТабличнойЧастиЗапасы].НайтиСтроки(ПараметрыОтбора);
				
				Для Каждого СтрокаЗапасы Из НайденныеСтроки Цикл
					Если ЗначениеЗаполнено(СтрокаЗапасы.Себестоимость) Тогда
						СтрокаЗапасы.Себестоимость = 0;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах") Тогда
		
		Если Не ДанныеСтроки = Неопределено И ЗначениеЗаполнено(ДанныеСтроки.ОтчетКомиссионера) Тогда
			
			Элементы.ЗапасыСебестоимость.Видимость = Ложь;
			
		ПараметрыОтбора = Новый Структура("КлючСвязи", ДанныеСтроки.КлючСвязи);
		НайденныеСтроки = Объект[ИмяТабличнойЧастиЗапасы].НайтиСтроки(ПараметрыОтбора); 
			
		Для Каждого СтрокаЗапасы Из НайденныеСтроки Цикл
			Если ЗначениеЗаполнено(СтрокаЗапасы.Себестоимость) Тогда
				СтрокаЗапасы.Себестоимость = 0;
			КонецЕсли;
		КонецЦикла;
			
		Иначе
			Элементы.ЗапасыСебестоимость.Видимость = Истина;
		КонецЕсли;
		
	Иначе
		
		Элементы.ЗапасыСебестоимость.Видимость = Ложь;
		
		Если Не ДанныеСтроки = Неопределено Тогда
		
		ПараметрыОтбора = Новый Структура("КлючСвязи", ДанныеСтроки.КлючСвязи);
		НайденныеСтроки = Объект[ИмяТабличнойЧастиЗапасы].НайтиСтроки(ПараметрыОтбора); 
		
		Для Каждого СтрокаЗапасы Из НайденныеСтроки Цикл
			Если ЗначениеЗаполнено(СтрокаЗапасы.Себестоимость) Тогда
				СтрокаЗапасы.Себестоимость = 0;
			КонецЕсли;
		КонецЦикла;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования табличной части Покупатели.
//
&НаКлиенте
Процедура ПокупателиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИмяТабличнойЧасти = "Покупатели";
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтаФорма);
		ТабличныеЧастиУНФКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "Запасы");
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах") 
			И Не Объект.ИспользоватьНовыйВидДокумента Тогда 
			
			Если Копирование Тогда
				СтрокаТабличнойЧасти.ВыставленСФ = Ложь;
				СтрокаТабличнойЧасти.СчетФактура = Неопределено;
				СтрокаТабличнойЧасти.ПояснениеСчетФактура = "";
				СтрокаТабличнойЧасти.ПояснениеКСчетамФактурам = "";
				СтрокаТабличнойЧасти.НомерСФ =  "";
				СтрокаТабличнойЧасти.ДатаСФ = "";
				СтрокаТабличнойЧасти.КСчетуФактуреКомиссионераНомер = "";
				СтрокаТабличнойЧасти.КСчетуФактуреКомиссионераДата = "";
				СтрокаТабличнойЧасти.ПредставлениеСчетаФактуры = "";
				СтрокаТабличнойЧасти.ПодборСчетовФактур = "";
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Копирование Тогда
		СтрокаТабличнойЧасти.Всего = 0;
	КонецЕсли;
	
КонецПроцедуры // ПокупателиПриНачалеРедактирования()

// Процедура - обработчик события ПередУдалением табличной части Покупатели.
//
&НаКлиенте
Процедура ПокупателиПередУдалением(Элемент, Отказ)
	
	// Серии
	ТекущийПокупатель = Элементы.Покупатели.ТекущиеДанные;
	РезультатПоиска = Объект.Запасы.НайтиСтроки(Новый Структура("КлючСвязи", ТекущийПокупатель.КлючСвязи));
	Для каждого СтрокаЗапасы Из РезультатПоиска Цикл
		
		РезультатПоискаСН = Объект.СерииНоменклатуры.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаЗапасы.КлючСвязиСерииНоменклатуры));
		Для Каждого СтрокаСерииНоменклатуры Из РезультатПоискаСН Цикл
			ИндексУдаления = Объект.СерииНоменклатуры.Индекс(СтрокаСерииНоменклатуры);
			Объект.СерииНоменклатуры.Удалить(ИндексУдаления);
		КонецЦикла;
	КонецЦикла;
	// Серии
	
	// Возвраты
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах")
		И Не Объект.ИспользоватьНовыйВидДокумента Тогда 
		
		РезультатПоиска = Объект.ВозвратыИсходныеДокументы.НайтиСтроки(Новый Структура("КлючСтроки", ТекущийПокупатель.КлючСвязи));
		Для Каждого СтрокаСФ Из РезультатПоиска Цикл
			ИндексУдаления = Объект.ВозвратыИсходныеДокументы.Индекс(СтрокаСФ);
			Объект.ВозвратыИсходныеДокументы.Удалить(ИндексУдаления);
		КонецЦикла;
		
	КонецЕсли;
	
	ИмяТабличнойЧасти = "Покупатели";
	ТабличныеЧастиУНФКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтаФорма, "Запасы");
	
КонецПроцедуры // ПокупателиПередУдалением()

&НаКлиенте
Процедура ПокупателиКСчетуФактуреКомиссионераНомерПриИзменении(Элемент)
	
	НайтиИсходныйДокумент();
	ОбновитьТаблицуИсходныхДокументов();
	ОбновитьТекущуюСтрокуВозвраты(ЭтотОбъект);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПокупателиКСчетуФактуреКомиссионераДатаПриИзменении(Элемент)
	
	НайтиИсходныйДокумент();
	ОбновитьТаблицуИсходныхДокументов();
	ОбновитьТекущуюСтрокуВозвраты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиПредставлениеСчетаФактурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Покупатели.ТекущиеДанные;
	НачалоВыбораВозвратыПредставлениеСчетаФактуры(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионера") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Покупатели.ТекущиеДанные;
	
	Если Не ТекущаяСтрока.ВыставленСФ Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ПокупателиПредставлениеСчетаФактуры" Тогда
			
		НачалоВыбораВозвратыПредставлениеСчетаФактуры(ТекущаяСтрока);
		
		СтандартнаяОбработка = Ложь;
		
		
	ИначеЕсли Поле.Имя = "ПокупателиКСчетуФактуреКомиссионераНомер" Тогда
	
		ТекущаяСтрокаВозвраты = ТекущаяСтрока;

		Если НЕ ЗначениеЗаполнено(ТекущаяСтрокаВозвраты.КСчетуФактуреКомиссионераНомер) Тогда
			Возврат;
		КонецЕсли;
		
		ОткрытьФормуПодбораСчетовФактур(ТекущаяСтрокаВозвраты);
		СтандартнаяОбработка = Ложь;
		
	ИначеЕсли Поле.Имя = "ПокупателиПодборСчетовФактур" Тогда
	
		НачалоВыбораВозвратыПодборСчетовФактур(ТекущаяСтрока);
		СтандартнаяОбработка = Ложь;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиПриАктивизацииПоля(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионера") Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Элемент.ТекущийЭлемент.Имя = "ВозвратыПодборСчетовФактур" Тогда

		ТекущиеДанные = Элементы.Покупатели.ТекущиеДанные;
		
		Если ТекущиеДанные.ВыставленСФ Тогда
			
			НачалоВыбораВозвратыПодборСчетовФактур(ТекущиеДанные);

			Элементы.Покупатели.ТекущийЭлемент = Элементы.ВозвратыКСчетуФактуреКомиссионераДата;
			
		КонецЕсли;
	
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ВозвратыПредставлениеСчетаФактуры" Тогда
		
		ТекущиеДанные = Элементы.Покупатели.ТекущиеДанные;
		
		Если ТекущиеДанные.ВыставленСФ Тогда
	
			НачалоВыбораВозвратыПредставлениеСчетаФактуры(ТекущиеДанные);
		
			Элементы.Покупатели.ТекущийЭлемент = Элементы.ВозвратыКСчетуФактуреКомиссионераДата;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиВыставленСФПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Покупатели.ТекущиеДанные;
	
	Если ТекущиеДанные.ВыставленСФ Тогда
	
		ТекущиеДанные.ПояснениеСчетФактура = НСтр("ru='Корр. счет-фактура'");
		ТекущиеДанные.ПояснениеКСчетамФактурам = НСтр("ru='К счету-фактуре (счетам-фактурам)'");
	
	Иначе

		ТекущиеДанные.ПояснениеСчетФактура = "";
		ТекущиеДанные.ПояснениеКСчетамФактурам = "";
		ТекущиеДанные.НомерСФ =  "";
		ТекущиеДанные.ДатаСФ = "";
		ТекущиеДанные.КСчетуФактуреКомиссионераНомер = "";
		ТекущиеДанные.КСчетуФактуреКомиссионераДата = "";
		ТекущиеДанные.ПредставлениеСчетаФактуры = "";
		ТекущиеДанные.ПодборСчетовФактур = "";
		ТекущиеДанные.ПоТекущемуДокументу = Ложь;
		
		УдалитьИсходныеСчетФактурыПоКлючу(ТекущиеДанные.КлючСвязи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиПодборСчетовФактурНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Покупатели.ТекущиеДанные;
	НачалоВыбораВозвратыПодборСчетовФактур(ТекущиеДанные);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасы

// Процедура - обработчик события ПриНачалеРедактирования табличной части Запасы.
//
&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИмяТабличнойЧасти = "Покупатели";
	
	Если НоваяСтрока Тогда
		ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтаФорма, Элемент.Имя);
		
		Если ЗначениеЗаполнено(Объект.СпособРаспределенияПоЗаказам) Тогда 
			Элемент.ТекущиеДанные.СпособРаспределения = Объект.СпособРаспределенияПоЗаказам;
		Иначе
			Элемент.ТекущиеДанные.СпособРаспределения = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто");
		КонецЕсли;
		
	КонецЕсли;
	
	Если НоваяСтрока И Копирование Тогда
		Элемент.ТекущиеДанные.КлючСвязиСерииНоменклатуры = 0;
		Элемент.ТекущиеДанные.СерииНоменклатуры = "";
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, Элемент.ТекущиеДанные);
		
		// Прослеживаемость
		Элемент.ТекущиеДанные.ИдентификаторСтроки = "";
		Элемент.ТекущиеДанные.РНПТ = "";
	КонецЕсли;

	// ГрупповоеИзменениеСтрок
	Элемент.ТекущиеДанные.Пометка = Истина;
	// Конец ГрупповоеИзменениеСтрок
	
	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыСерииНоменклатуры Тогда
		ОткрытьПодборСерииНоменклатуры();
	КонецЕсли;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.Количество = НовоеКоличествоПриИзмененииНоменклатуры;
	КонецЕсли;
	
КонецПроцедуры // ЗапасыПриНачалеРедактирования()

// Процедура - обработчик события ПередНачаломДобавления табличной части Запасы.
//
&НаКлиенте
Процедура ЗапасыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ИмяТабличнойЧасти = "Покупатели";
	
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтаФорма, Элемент.Имя) Тогда
		Отказ = Истина;
	КонецЕсли; 
	
	Если Не Отказ И Копирование Тогда
		
		ОбновитьКолонкуВсегоНаКлиенте();
		
		ТекСтрокаПокупатели = Элементы.Покупатели.ТекущиеДанные;
		ТекСтрокаПокупатели.Всего = ТекСтрокаПокупатели.Всего + Элемент.ТекущиеДанные.Всего;
		
		КопированиеСтрокиЗапасы = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ЗапасыПередНачаломДобавления()

// Процедура - обработчик события ПриИзменении табличной части Запасы.
//
&НаКлиенте
Процедура ЗапасыПриИзменении(Элемент)
	
	Если КопированиеСтрокиЗапасы = Неопределено ИЛИ НЕ КопированиеСтрокиЗапасы Тогда
		ОбновитьКолонкуВсегоНаКлиенте();
	Иначе
		КопированиеСтрокиЗапасы = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ЗапасыПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьСбросКоличества И СбрасыватьКоличество
		И СтрокаТабличнойЧасти.Количество <> НовоеКоличествоПриИзмененииНоменклатуры Тогда
		
		ДопПараметр = Новый Структура();
		ДопПараметр.Вставить("Элемент", Элемент);
		ДопПараметр.Вставить("Количество", СтрокаТабличнойЧасти.Количество);
		Оповещение = Новый ОписаниеОповещения("ЗапасыПодтверждениеСбросаКоличестваЗавершение", ЭтотОбъект, ДопПараметр);
		ОткрытьФорму("ОбщаяФорма.ПодтверждениеСбросаКоличества", , , , , , Оповещение);
		
	Иначе
		
		Если СбрасыватьКоличество Тогда
			НовоеКоличество = НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
		ЗапасыНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество);
		
	КонецЕсли;
	
КонецПроцедуры // ЗапасыНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗапасыПодтверждениеСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗапрашиватьСбросКоличества = Результат.ЗапрашиватьСбросКоличества;
		Если НЕ ЗапрашиватьСбросКоличества Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		КонецЕсли;
		Если Результат.СбрасыватьКоличество Тогда
			НовоеКоличество = Результат.НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = ДополнительныеПараметры.Количество;
		КонецЕсли;
	Иначе
		НовоеКоличество = ДополнительныеПараметры.Количество;
	КонецЕсли;
	
	ЗапасыНоменклатураПриИзмененииПродолжить(ДополнительныеПараметры.Элемент, НовоеКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество)

	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",	 СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия",	 СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("ДатаОбработки",	 Объект.Дата);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		СтруктураДанные.Вставить("ДатаОбработки",	 Объект.Дата);
		СтруктураДанные.Вставить("ВидЦен",			 Объект.ВидЦен);
		СтруктураДанные.Вставить("ВалютаДокумента",	 Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("Коэффициент",		 1);
	КонецЕсли;
	
	СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанные);
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = СтруктураДанные.НомерГТД;
	СтрокаТабличнойЧасти.Количество = НовоеКоличество;
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
	СтрокаТабличнойЧасти.ЦенаПередачи = 0;
	СтрокаТабличнойЧасти.СуммаПередачи = 0;
	СтрокаТабличнойЧасти.СуммаНДСПередачи = 0;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
	// Серии
	Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
		СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, ТекущиеДанныеСтроки,,ИспользоватьСерииНоменклатурыОстатки);
	КонецЦикла;
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если СтруктураДанные.ИспользоватьХарактеристики Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
			СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
		КонецЕсли;
	КонецЕсли;
	
	//Партии
	СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
	
	Если СтруктураДанные.ИспользоватьПартии Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Партия = СтруктураВыбораНоменклатуры.Партия;
			СтруктураВыбораНоменклатуры.Партия = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
		КонецЕсли;
	КонецЕсли;
	// Конец Партии
	
	// Прослеживаемость
	Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров
		И ПрослеживаемаяОперация(Объект.ВидОперации) Тогда
		СтрокаТабличнойЧасти.ПрослеживаемыйТовар = СтруктураДанные.ПрослеживаемыйТовар;
		СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = СтруктураДанные.ПрослеживаемыйКомплект;
		СтрокаТабличнойЧасти.КодТНВЭД = СтруктураДанные.ТоварнаяНоменклатураВЭД;
	Иначе
		СтрокаТабличнойЧасти.ПрослеживаемыйТовар = Ложь;
		СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = Ложь;
		СтрокаТабличнойЧасти.КодТНВЭД = Неопределено;
	КонецЕсли;
	// Конец Прослеживаемость
	
	СтрокаТабличнойЧасти.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
	
	ПодборНоменклатурыИзСписка = Ложь;
	
	ОбновитьКолонкуВсегоНаКлиенте();
	ЗаполнитьПризнакАвтораспределенияЗаказовКлиент();
	
	// Прослеживаемость
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	КонецЕсли;
	// Конец Прослеживаемость

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ОтчетКомиссионера", НастройкиФормыВыбораНоменклатуры, Истина, "Запасы", ВыбранноеЗначение.СтруктураНастроек);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		ВыбранноеЗначение = СтрокаТабличнойЧасти.Номенклатура;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Характеристика.
//
&НаКлиенте
Процедура ЗапасыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация",	 		Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура",		СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",		СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия",				СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("СтранаПроисхождения",	СтрокаТабличнойЧасти.СтранаПроисхождения);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки",	 Объект.Дата);
		СтруктураДанные.Вставить("ВидЦен",			 Объект.ВидЦен);
		СтруктураДанные.Вставить("ВалютаДокумента",	 Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("СтавкаНДС", 		 СтрокаТабличнойЧасти.СтавкаНДС);
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
		СтруктураДанные.Вставить("Цена",			 СтрокаТабличнойЧасти.Цена);
		
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПартияПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.СтранаПроисхождения= СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД			= СтруктураДанные.НомерГТД;
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти();
		РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
	// Прослеживаемость
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	КонецЕсли;
	// Конец Прослеживаемость
	
КонецПроцедуры // ЗапасыХарактеристикаПриИзменении()

&НаКлиенте
Процедура ЗапасыПартияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация",	 		Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура",		СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",		СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия",				СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("СтранаПроисхождения",	СтрокаТабличнойЧасти.СтранаПроисхождения);
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПартияПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.СтранаПроисхождения= СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД			= СтруктураДанные.НомерГТД;
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	
	// Сумма передачи.
	СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * СтрокаТабличнойЧасти.Количество;
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	// Сумма НДС передачи.
	СтрокаТабличнойЧасти.СуммаНДСПередачи = ?(Объект.СуммаВключаетНДС,
		СтрокаТабличнойЧасти.СуммаПередачи - (СтрокаТабличнойЧасти.СуммаПередачи) / ((СтавкаНДС + 100) / 100),
		СтрокаТабличнойЧасти.СуммаПередачи * СтавкаНДС / 100);
	
	// Сумма вознаграждения.
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
КонецПроцедуры // ЗапасыКоличествоПриИзменении()

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
КонецПроцедуры

// Процедура - обработчик события ОбработкаВыбора поля ввода ЕдиницаИзмерения.
//
&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение 
	 ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	// Цена.
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
		
		СтрокаТабличнойЧасти.ЦенаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
		РассчитатьСуммыПередачи();
		
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
КонецПроцедуры // ЗапасыЕдиницаИзмеренияОбработкаВыбора()

// Процедура - обработчик события ПриИзменении поля ввода Цена.
//
&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ЗапасыЦенаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ЗапасыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Сумма вознаграждения.
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ЗапасыСуммаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДС.
//
&НаКлиенте
Процедура ЗапасыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		
	// Сумма НДС передачи.
	СтрокаТабличнойЧасти.СуммаНДСПередачи = ?(Объект.СуммаВключаетНДС,
												СтрокаТабличнойЧасти.СуммаПередачи - (СтрокаТабличнойЧасти.СуммаПередачи) / ((СтавкаНДС + 100) / 100),
												СтрокаТабличнойЧасти.СуммаПередачи * СтавкаНДС / 100);
	
КонецПроцедуры  // ЗапасыСтавкаНДСПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДС.
//
&НаКлиенте
Процедура ЗапасыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // ЗапасыСуммаНДСПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода ЦенаПередачи.
//
&НаКлиенте
Процедура ЗапасыЦенаПередачиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЦенаПередачи) Тогда
		СтрокаТабличнойЧасти.СпособРаспределения = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Вручную");
	КонецЕсли;
	
	РассчитатьСуммыПередачи();
	
КонецПроцедуры // ЗапасыЦенаПередачиПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СуммаПередачи.
//
&НаКлиенте
Процедура ЗапасыСуммаПередачиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаПередачи) Тогда
		СтрокаТабличнойЧасти.СпособРаспределения = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Вручную");
	КонецЕсли;
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.ЦенаПередачи = СтрокаТабличнойЧасти.СуммаПередачи / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	// Сумма НДС передачи.
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		
	СтрокаТабличнойЧасти.СуммаНДСПередачи = ?(Объект.СуммаВключаетНДС,
												СтрокаТабличнойЧасти.СуммаПередачи - (СтрокаТабличнойЧасти.СуммаПередачи) / ((СтавкаНДС + 100) / 100),
												СтрокаТабличнойЧасти.СуммаПередачи * СтавкаНДС / 100);	
	
	// Сумма вознаграждения.
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ЗапасыСуммаПередачиПриИзменении

// Процедура - обработчик события ПриИзменении поля ввода СуммаВознаграждения.
//
&НаКлиенте
Процедура ЗапасыСуммаВознагражденияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДСВознаграждения);
		
	СтрокаТабличнойЧасти.СуммаНДСВознаграждения = ?(Объект.СуммаВключаетНДС,
													СтрокаТабличнойЧасти.СуммаВознаграждения - (СтрокаТабличнойЧасти.СуммаВознаграждения) / ((СтавкаНДС + 100) / 100),
													СтрокаТабличнойЧасти.СуммаВознаграждения * СтавкаНДС / 100);
	Объект.СуммаВознаграждения = Объект.Запасы.Итог("СуммаВознаграждения");
	
КонецПроцедуры // ЗапасыСуммаВознагражденияПриИзменении(Элемент)

&НаКлиенте
Процедура ЗапасыЗаказПокупателяПриИзменении(Элемент) 
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя) Тогда
		СтрокаТабличнойЧасти.СпособРаспределения = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Вручную");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСпособРаспределенияПриИзменении(Элемент) 
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти.СпособРаспределения = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто")
		Или СтрокаТабличнойЧасти.СпособРаспределения = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.ПустаяСсылка") Тогда
		СтрокаТабличнойЧасти.ЗаказПокупателя = ПредопределенноеЗначение("Документ.ЗаказПокупателя.ПустаяСсылка");
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.СпособРаспределения = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто") Тогда
		СтрокаТабличнойЧасти.СуммаНДСПередачи = 0;
		СтрокаТабличнойЧасти.ЦенаПередачи = 0;
		СтрокаТабличнойЧасти.СуммаПередачи = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаСуммаРасчетовПриИзменении(Элемент)
		
		СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
		
		Курс = ?(Объект.Курс = 0, 1, Объект.Курс);
		СтрокаТабличнойЧасти.Курс = ?(СтрокаТабличнойЧасти.Курс = 0, Курс, СтрокаТабличнойЧасти.Курс);
		
		Кратность = ?(Объект.Кратность = 0, 1, Объект.Кратность);
		СтрокаТабличнойЧасти.Кратность = ?(СтрокаТабличнойЧасти.Кратность = 0, Кратность, СтрокаТабличнойЧасти.Кратность);
		
		ВалютаДокумента = ?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс);
		ВалютаДокументаКратность = ?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность);
		
		СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс, ВалютаДокумента, СтрокаТабличнойЧасти.Кратность, ВалютаДокументаКратность);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПредоплатаВидЗачетаПредоплатыПриИзменении(Элемент) 
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидЗачетаПредоплаты) 
		Или СтрокаТабличнойЧасти.ВидЗачетаПредоплаты = ПредопределенноеЗначение("Перечисление.ВидыЗачетаПредоплаты.Продажа") Тогда
		СтрокаТабличнойЧасти.ОтчетКомиссионера = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКурсПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.ПриИзмененииКурсаВСтрокеПредоплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКурсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасчетыРаботаСФормамиКлиент.ПредоплатаКурсНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКратностьПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.ПриИзмененииКурсаВСтрокеПредоплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс);
	
	КурсПересчета = ?(Объект.ВалютаДокумента = НациональнаяВалюта, 1, Объект.Курс);
	СтрокаТабличнойЧасти.Кратность = 1;
	
	СтрокаТабличнойЧасти.Курс =
		?(СтрокаТабличнойЧасти.СуммаРасчетов = 0,
			1,
			СтрокаТабличнойЧасти.СуммаПлатежа
		  / СтрокаТабличнойЧасти.СуммаРасчетов
		  * КурсПересчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	
	// Серии номера
	Для Каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
		СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, ТекущиеДанныеСтроки,,ИспользоватьСерииНоменклатурыОстатки);
		// Прослеживаемость
		УдалитьСвязанныеЗаписи(ТекущиеДанныеСтроки);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНомерГТДПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
		
		ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
		Если ДатаГТД > КонецДня(Объект.Дата) Тогда
			
			ТекстСообщения = НСтр("ru ='Внимание: выбранная ГТД датирована более поздней датой, чем текущий документ.'");
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Запасы",
				СтрокаТабличнойЧасти.НомерСтроки, "НомерГТД");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , КонтекстноеПоле);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНомерГТДПриРНПТПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
		
		ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
		Если ДатаГТД > КонецДня(Объект.Дата) Тогда
			
			ТекстСообщения = НСтр("ru ='Внимание: выбранная ГТД датирована более поздней датой, чем текущий документ.'");
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Запасы",
				СтрокаТабличнойЧасти.НомерСтроки, "НомерГТД");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , КонтекстноеПоле);
			
		КонецЕсли;
		
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРНПТНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах")
		И Не Объект.ИспользоватьНовыйВидДокумента Тогда 
		ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Запасы", Ложь, Истина);
	Иначе
		ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Запасы", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРНПТОчистка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		Если СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
			УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
		Иначе
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
		КонецЕсли;
		
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Прослеживаемость
	СтрокаТабличнойЧасти = Объект.Запасы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Поле = Элементы.ЗапасыРНПТ И СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах")
			И Не Объект.ИспользоватьНовыйВидДокумента Тогда 
			ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Запасы", Ложь, Истина);
		Иначе
			ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Запасы", Ложь);
		КонецЕсли; 
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	Если Поле.Имя = "ЗапасыПрослеживаемыйТовар" Тогда
		ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
		Если ТекущиеДанные.ПрослеживаемыйТовар Тогда
			ПрослеживаемостьФормыКлиентУНФ.ПоказатьПредупреждениеПрослеживаемыйТовар();
		КонецЕсли;
	КонецЕсли;
	
	// Конец Прослеживаемость
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтранаПроисхожденияПриИзменении(Элемент)
	
	Если КэшЗначений.УчетГТД Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения)
			ИЛИ СтрокаТабличнойЧасти.СтранаПроисхождения = КэшЗначений.Россия Тогда
			
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
			
		КонецЕсли;
		
		// Прослеживаемость
		УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
		// Конец Прослеживаемость
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Владелец", Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоров.СКомиссионером"));
	ПараметрыФормы.Вставить("ОповеститьОЗаписиДоговора", Истина);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредоплата

&НаКлиенте
Процедура ПредоплатаПриИзменении(Элемент)
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента);
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не Копирование Тогда 
		ТекущиеДанныеПокупатели = Элементы.Покупатели.ТекущиеДанные;
		Если (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах") И Не Объект.ИспользоватьНовыйВидДокумента) Тогда
			
			Если Не Объект.Покупатели.Количество() Тогда
				ТекстСообщения = НСтр("ru = 'Не заполнена табличная часть Покупатели'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Покупатели", , Отказ);
				Возврат
			КонецЕсли;
			
			Если Не ТекущиеДанныеПокупатели = Неопределено И ЗначениеЗаполнено(ТекущиеДанныеПокупатели.ОтчетКомиссионера) Тогда
				Отказ = Истина;
				НоваяСтрока = Объект.Предоплата.Добавить();
				НоваяСтрока.ОтчетКомиссионера = ТекущиеДанныеПокупатели.ОтчетКомиссионера;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Объект.ИспользоватьНовыйВидДокумента Тогда
			Отказ = Истина;
			НоваяСтрока = Объект.Предоплата.Добавить();
			НоваяСтрока.Курс = 1;
			НоваяСтрока.Кратность = 1;
			КоличествоСтрок = Объект.Предоплата.Количество() - 1;
			Если Не КоличествоСтрок Тогда
				НоваяСтрока.ВидЗачетаПредоплаты = ПредопределенноеЗначение("Перечисление.ВидыЗачетаПредоплаты.Продажа");
			Иначе
				НоваяСтрока.ВидЗачетаПредоплаты = Объект.Предоплата[КоличествоСтрок-1].ВидЗачетаПредоплаты;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля.
//
&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	
КонецПроцедуры // РедактироватьЦеныИВалюту()

// Процедура вызывается при нажатии кнопки "ДобавитьКонтрагентаВПокупатели"
//
&НаКлиенте
Процедура ДобавитьКонтрагентаВПокупатели(Команда)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		НоваяСтрока = Объект.Покупатели.Добавить();
		НоваяСтрока.Покупатель = Объект.Контрагент;
		
		ИмяТабличнойЧасти = "Покупатели";
		НоваяСтрока.КлючСвязи = ТабличныеЧастиУНФКлиентСервер.СоздатьНовыйКлючСвязи(ЭтаФорма);
		ТабличныеЧастиУНФКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "Запасы");
		
		Элементы.Покупатели.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьКонтрагентаВПокупатели()

// Процедура - обработчик команды командной панели табличной части.
//
&НаКлиенте
Процедура РедактироватьЗачетПредоплаты(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале контрагента!'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале договор контрагента!'"));
		Возврат;
	КонецЕсли;
	
	МассивЗаказов = Новый Массив;
	
	Для каждого ТекЭлемент Из Объект.Запасы Цикл
		
		СтруктураЗаказа = Новый Структура("Заказ, Всего");
		СтруктураЗаказа.Заказ = ТекЭлемент.ЗаказПокупателя;
		СтруктураЗаказа.Всего = ТекЭлемент.Всего;
		МассивЗаказов.Добавить(СтруктураЗаказа);
		
	КонецЦикла;
	
	АдресПредоплатаВХранилище = ПоместитьПредоплатаВХранилище();
	ПараметрыПодбора = Новый Структура();
	
	ПараметрыПодбора.Вставить("АдресПредоплатаВХранилище", АдресПредоплатаВХранилище);
	ПараметрыПодбора.Вставить("Подбор", Истина);
	ПараметрыПодбора.Вставить("ЕстьЗаказ", Истина);
	ПараметрыПодбора.Вставить("ЗаказВШапке", Ложь);
	ПараметрыПодбора.Вставить("Компания", Компания);
	ПараметрыПодбора.Вставить("Заказ", ?(КонтрагентВестиРасчетыПоЗаказам, МассивЗаказов, Неопределено));
	ПараметрыПодбора.Вставить("Дата", Объект.Дата);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыПодбора.Вставить("Договор", Объект.Договор);
	ПараметрыПодбора.Вставить("Курс", Объект.Курс);
	ПараметрыПодбора.Вставить("Кратность", Объект.Кратность);
	ПараметрыПодбора.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("СуммаДокумента", Объект.Запасы.Итог("Всего") - Объект.ЗапасыВозвраты.Итог("Всего"));
	ПараметрыПодбора.Вставить("ОтчетКомиссионера", Истина);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораАвансовПокупателей", ПараметрыПодбора, , , , ,
		Новый ОписаниеОповещения("РедактироватьЗачетПредоплатыЗавершение", ЭтотОбъект,
		Новый Структура("АдресПредоплатаВХранилище", АдресПредоплатаВХранилище)));
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    АдресПредоплатаВХранилище = ДополнительныеПараметры.АдресПредоплатаВХранилище;
    
    
    КодВозврата = Результат;
    
    Если КодВозврата = КодВозвратаДиалога.OK Тогда
        ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище);
    КонецЕсли;

КонецПроцедуры // РедактироватьЗачетПредоплаты()

// ПодключаемоеОборудование
// Процедура - обработчик команды командной панели табличной части.
//
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ИмяТабличнойЧасти = "Покупатели";
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтаФорма, "Запасы") Тогда
		Возврат;
	КонецЕсли;
	
	ТекШтрихкод = "";
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект,
		Новый Структура("ТекШтрихкод", ТекШтрихкод));
	
	#Если МобильныйКлиент Тогда
	ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду", , , , , , ОбработкаЗавершения);
	#Иначе
	ПоказатьВводЗначения(ОбработкаЗавершения, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	#КонецЕсли
	
КонецПроцедуры

// ПодключаемоеОборудование
// Процедура - обработчик команды командной панели табличной части.
//
&НаКлиенте
Процедура ПоискПоШтрихкодуВозвраты(Команда) 
	
	ИмяТабличнойЧасти = "ПокупателиВозвраты";
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтаФорма, "ЗапасыВозвраты") Тогда
		Возврат;
	КонецЕсли;
	
	ТекШтрихкод = "";
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект,
		Новый Структура("ТекШтрихкод, ЭтоВозврат", ТекШтрихкод, Истина));
	
	#Если МобильныйКлиент Тогда
	ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду", , , , , , ОбработкаЗавершения);
	#Иначе
	ПоказатьВводЗначения(ОбработкаЗавершения, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, СокрЛП(ДополнительныеПараметры.ТекШтрихкод), СокрЛП(Результат));
	
	
	Если Элементы.Страницы.ТекущаяСтраница.Имя = "ГруппаЗапасыВозвраты" 
		Или (ДополнительныеПараметры.Свойство("ЭтоВозврат") И ДополнительныеПараметры.ЭтоВозврат) Тогда  
		ЭтоВозврат = Истина;
	Иначе
		ЭтоВозврат = Ложь;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		
		ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1), ЭтоВозврат); 
		
	КонецЕсли;
	
КонецПроцедуры // ПоискПоШтрихкоду()

// Процедура - обработчик события Действие команды ПолучитьВес
//
&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтаФорма, "Запасы");
	
КонецПроцедуры // ПолучитьВес()

// Процедура - обработчик события Действие команды ПолучитьВес
//
&НаКлиенте
Процедура ПолучитьВесВозвраты(Команда) 
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтаФорма, "ЗапасыВозвраты");
	
КонецПроцедуры // ПолучитьВес()

&НаКлиенте
Процедура ПолучитьВесЗавершение(Параметры) Экспорт
	
	СтрокаТабличнойЧасти = Параметры;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	
	// Сумма передачи.
	СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * СтрокаТабличнойЧасти.Количество;
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	// Сумма НДС передачи.
	СтрокаТабличнойЧасти.СуммаНДСПередачи = ?(Объект.СуммаВключаетНДС,
		СтрокаТабличнойЧасти.СуммаПередачи - (СтрокаТабличнойЧасти.СуммаПередачи) / ((СтавкаНДС + 100) / 100),
		СтрокаТабличнойЧасти.СуммаПередачи * СтавкаНДС / 100);
	
	// Сумма вознаграждения.
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
КонецПроцедуры

// Процедура - обработчик команды ЗагрузитьДанныеИзТСД.
//
&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ИмяТабличнойЧасти = "Покупатели";
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтаФорма, "Запасы") Тогда
		Возврат;
	КонецЕсли;
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтаФорма);
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()

// Процедура - обработчик команды ЗагрузитьДанныеИзТСД.
//
&НаКлиенте
Процедура ЗагрузитьДанныеИзТСДВозвраты(Команда) 
	
	ИмяТабличнойЧасти = "ПокупателиВозвраты";
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтаФорма, "ЗапасыВозвраты") Тогда
		Возврат;
	КонецЕсли;
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтаФорма);
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", "Запасы");
	
	ПодключаемоеОборудованиеУНФКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Ложь, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСДВозвраты(Команда) 
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", "ЗапасыВозвраты");
	
	ПодключаемоеОборудованиеУНФКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Ложь, ДополнительныеПараметры);
	
КонецПроцедуры

// Конец ПодключаемоеОборудование

&НаКлиенте
Процедура РежимГТД(Команда)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РежимГТД", "Пометка", НЕ Элементы.РежимГТД.Пометка);
	
	ИзменитьРежимРаботаГТД(Элементы.РежимГТД.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура НомераГТДЗаполнитьПоФактическимОстаткам(Команда)
	
	ТекущиеДанныеСтрокиПокупатели = Элементы.Покупатели.ТекущиеДанные;
	Если ТекущиеДанныеСтрокиПокупатели = Неопределено Тогда
		
		ТекстОшибки = НСтр("ru ='Необходимо выделить строку с покупателем!'");
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	КлючСвязи = ТекущиеДанныеСтрокиПокупатели.КлючСвязи;
	НомераГТДЗаполнитьПоФактическимОстаткамНаСервере(КлючСвязи, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НомераГТДЗаполнитьПоОстаткамПереданным(Команда)
	
	ТекущиеДанныеСтрокиПокупатели = Элементы.Покупатели.ТекущиеДанные;
	Если ТекущиеДанныеСтрокиПокупатели = Неопределено Тогда
		
		ТекстОшибки = НСтр("ru ='Необходимо выделить строку с покупателем!'");
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	КлючСвязи = ТекущиеДанныеСтрокиПокупатели.КлючСвязи;
	НомераГТДПодобратьПоПереданнымНаСервере(КлючСвязи, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НомераГТДПодобрать(Команда)
	
	ТекущиеДанныеСтрокиПокупатели = Элементы.Покупатели.ТекущиеДанные;
	Если ТекущиеДанныеСтрокиПокупатели = Неопределено Тогда
		
		ТекстОшибки = НСтр("ru ='Необходимо выделить строку с покупателем!'");
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	КлючСвязи = ТекущиеДанныеСтрокиПокупатели.КлючСвязи;
	НомераГТДПодобратьНаСервере(КлючСвязи, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткам(Команда)
	
	Отказ = ЗаполнениеОстаткамиНеВозможно();
	Если Отказ Тогда Возврат КонецЕсли;
	
	Если Объект.Запасы.Количество() Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросОчиститьЗапасы", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Перед заполнением табличная часть будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;

	ЗаполнитьПоОстаткамНаСервере();
	ОбновитьКолонкуВсегоНаКлиенте(Истина);
	ЭтаФорма.Модифицированность = Объект.Запасы.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьЗапасы(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда Возврат КонецЕсли;
	
	ЗаполнитьПоОстаткамНаСервере();
	ОбновитьКолонкуВсегоНаКлиенте(Истина);
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоЗаказам(Команда)
	
	Отказ = ЗаполнениеОстаткамиНеВозможно();
	
	Если Отказ Тогда Возврат КонецЕсли;
	
	Если Не Объект.Запасы.Количество() Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Распределение производится по номенклатуре которая предварительно добавлена в таблицу.'"),, НСтр("ru = 'Добавьте номенклатуру в таблицу'"));
		Возврат
	КонецЕсли;
	
	РаспределитьПоЗаказамСервер();
	ОбновитьКолонкуВсегоНаКлиенте(Истина);
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Распределение'"),, НСтр("ru = 'Завершено'"),БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьПоЗаказамСервер()
	
	ТекущийКлючСвязи = Элементы.Запасы.ОтборСтрок["КлючСвязи"];
	
	РаботаСКомиссионерамиКомитентамиСервер.РаспределитьНоменклатуруПоЗаказам(ЭтотОбъект, Неопределено, "Запасы", ТекущийКлючСвязи);
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенуПоЦенаПередачи(Команда)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("ЗаполнитьЦенуПоЦенеПереданной"
		+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.ЦенаПередачи;
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
		РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенуПоЦенаПередачиВозвраты(Команда) 
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("ЗаполнитьЦенуПоЦенеПереданной"
		+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ЗапасыВозвраты Цикл
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.ЦенаПередачи;
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
		РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзФайлаЗапасы(Команда)
	
	Если Не ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтаФорма, "Запасы") Тогда

		НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ОтчетКомиссионера.ТабличнаяЧасть.Запасы";

		НастройкиЗагрузкиДанных.Вставить("ПолноеИмяТабличнойЧасти", "ОтчетКомиссионера.Запасы");
		НастройкиЗагрузкиДанных.Вставить("ИмяМакетаСШаблоном", "ЗагрузкаИзФайлаЗапасы");
		НастройкиЗагрузкиДанных.Вставить("Заголовок", НСтр("ru = 'Загрузка запасов из файла'"));
		НастройкиЗагрузкиДанных.Вставить("СодержаниеВидимо", Истина);
		НастройкиЗагрузкиДанных.Вставить("ЗагрузкаТабличнойЧастиУслуги", Ложь);
		НастройкиЗагрузкиДанных.Вставить("ЗагрузкаШапкиДокумента", Ложь);

		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата",
			ЭтотОбъект, НастройкиЗагрузкиДанных);

		ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных,
			ОписаниеОповещения, ЭтотОбъект);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзФайлаЗапасыВозвраты(Команда) 
	
	Если Не ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтаФорма, "ЗапасыВозвраты") Тогда

		НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ОтчетКомиссионера.ТабличнаяЧасть.ЗапасыВозвраты";

		НастройкиЗагрузкиДанных.Вставить("ПолноеИмяТабличнойЧасти", "ОтчетКомиссионера.ЗапасыВозвраты");
		НастройкиЗагрузкиДанных.Вставить("ИмяМакетаСШаблоном", "ЗагрузкаИзФайлаЗапасы");
		НастройкиЗагрузкиДанных.Вставить("Заголовок", НСтр("ru = 'Загрузка возвратов из файла'"));
		НастройкиЗагрузкиДанных.Вставить("СодержаниеВидимо", Истина);
		НастройкиЗагрузкиДанных.Вставить("ЗагрузкаТабличнойЧастиУслуги", Ложь);
		НастройкиЗагрузкиДанных.Вставить("ЗагрузкаШапкиДокумента", Ложь);

		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата",
			ЭтотОбъект, НастройкиЗагрузкиДанных);

		ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных,
			ОписаниеОповещения, ЭтотОбъект);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСбросаКоличества(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтрокаПоиска", НСтр("ru = 'Сбрасывать количество при изменении номенклатуры'"));
	Оповещение = Новый ОписаниеОповещения("НастройкаСбросаКоличестваЗавершение", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.НастройкиПользователей.Форма.ФормаНастройкиПользователя", СтруктураПараметров, , , , ,
		Оповещение);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, 
		Элементы.ЗапасыКонтекстноеМенюНастройкаСбросаКоличества, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НастройкиКоличества = ПолучитьНастройкиИзмененияКоличества();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиКоличества);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзФайлаШапка(Команда)
	
		НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ОтчетКомиссионера.ТабличнаяЧасть.Запасы";
		
		НастройкиЗагрузкиДанных.Вставить("ПолноеИмяТабличнойЧасти", "ОтчетКомиссионера.Запасы");
		НастройкиЗагрузкиДанных.Вставить("ИмяМакетаСШаблоном","ЗагрузкаИзФайлаЗапасы");
		НастройкиЗагрузкиДанных.Вставить("Заголовок", НСтр("ru = 'Загрузка запасов из файла'"));
		НастройкиЗагрузкиДанных.Вставить("СодержаниеВидимо", Истина);
		НастройкиЗагрузкиДанных.Вставить("ЗагрузкаТабличнойЧастиУслуги", Ложь);
		НастройкиЗагрузкиДанных.Вставить("ЗагрузкаШапкиДокумента", Истина);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", 
			ЭтотОбъект, НастройкиЗагрузкиДанных);
		
		ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных,
		ОписаниеОповещения, ЭтотОбъект);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПроверитьЗаполнениеСпособаРаспределенияПоЗаказам(ИмяТаблицыЗапасы = "Запасы") 
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеМодифицированностиФормы = ЭтаФорма.Модифицированность;
	
	СтруктураПоиска = Новый Структура("СпособРаспределения", Перечисления.СпособыЗачетаИРаспределенияПлатежей.ПустаяСсылка());
	СтрокиСНезаполненнымСпособомРаспределения = Объект[ИмяТаблицыЗапасы].НайтиСтроки(СтруктураПоиска); 
	
	Если СтрокиСНезаполненнымСпособомРаспределения.Количество() Тогда
		
		Если Не ЗначениеЗаполнено(Объект.СпособРаспределенияПоЗаказам) Тогда
			Объект.СпособРаспределенияПоЗаказам = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто;
		КонецЕсли;
		
		Для Каждого СтрокаТабличнойЧасти Из СтрокиСНезаполненнымСпособомРаспределения Цикл
			Если Объект.СпособРаспределенияПоЗаказам = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную
				Или ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя) Тогда
				СтрокаТабличнойЧасти.СпособРаспределения = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
			Иначе
				СтрокаТабличнойЧасти.СпособРаспределения = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто;
			КонецЕсли;
		КонецЦикла;
		
		ЭтаФорма.Модифицированность = ЗначениеМодифицированностиФормы;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьИсходныеСчетФактурыПоКлючу(КлючСвязи)

	Индекс = 0;
	КоличествоИсходныхДокументов = Объект.ВозвратыИсходныеДокументы.Количество();
	
	Если КоличествоИсходныхДокументов > 0 Тогда
		Для Индекс = 0 По КоличествоИсходныхДокументов Цикл
	
			ТекущаяСтрока = Объект.ВозвратыИсходныеДокументы[Индекс];
			
			Если ТекущаяСтрока.КлючСтроки = КлючСвязи Тогда
		
				Объект.ВозвратыИсходныеДокументы.Удалить(Индекс);
				Индекс = Индекс - 1;
				КоличествоИсходныхДокументов = КоличествоИсходныхДокументов - 1;
			
			КонецЕсли;
	
			Если Индекс = (КоличествоИсходныхДокументов-1)
				ИЛИ КоличествоИсходныхДокументов = 0 Тогда
				
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуИсходныхДокументов(ИмяТабличнойЧастиСтроки = "Покупатели") 

	ТекущиеДанные = Элементы[ИмяТабличнойЧастиСтроки].ТекущиеДанные; 
	ФильтрПоКлючу = Новый Структура("КлючСтроки", ТекущиеДанные.КлючСвязи);
	НайденныеСтроки = Объект.ВозвратыИсходныеДокументы.НайтиСтроки(ФильтрПоКлючу);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ТекущаяСтрокаИсходныхДокументов = НайденныеСтроки[0];
		
	Иначе
	
		ТекущаяСтрокаИсходныхДокументов = Объект.ВозвратыИсходныеДокументы.Добавить();
		
	КонецЕсли;
		
	ТекущаяСтрокаИсходныхДокументов.НомерВходящегоИсходногоДокумента = ТекущиеДанные.КСчетуФактуреКомиссионераНомер;
	ТекущаяСтрокаИсходныхДокументов.ДатаВходящегоИсходногоДокумента = ТекущиеДанные.КСчетуФактуреКомиссионераДата;
	ТекущаяСтрокаИсходныхДокументов.ИсходныйДокумент = ТекущиеДанные.КСчетуФактуреКомиссионераИсходныйДокумент;
	ТекущаяСтрокаИсходныхДокументов.КлючСтроки = ТекущиеДанные.КлючСвязи;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.КСчетуФактуреКомиссионераИсходныйДокумент) Тогда
		
		ТекущаяСтрокаИсходныхДокументов.ПоТекущемуДокументу = 
			ЕстьВыбранныйСчетФактураВТекущемДокументе(ТекущиеДанные.Покупатель,
				ТекущиеДанные.КСчетуФактуреКомиссионераИсходныйДокумент);
		
	Иначе
		
		ТекущаяСтрокаИсходныхДокументов.ПоТекущемуДокументу = ТекущиеДанные.ПоТекущемуДокументу;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиИсходныйДокумент(ИмяТабличнойЧастиСтроки = "Покупатели") 

	ТекущиеДанные = Элементы[ИмяТабличнойЧастиСтроки].ТекущиеДанные; 
	ТекущиеДанные.КСчетуФактуреКомиссионераИсходныйДокумент = "";
	ТекущиеДанные.ПоТекущемуДокументу = Ложь;

	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.КСчетуФактуреКомиссионераНомер)
		 ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.КСчетуФактуреКомиссионераДата) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКомиссионера = Новый Структура("Покупатель,Дата,Номер,Организация,ДатаДокумента,ДоговорКонтрагента",
		ТекущиеДанные.Покупатель, ТекущиеДанные.КСчетуФактуреКомиссионераДата,
		ТекущиеДанные.КСчетуФактуреКомиссионераНомер, Объект.Организация, Объект.Дата, Объект.Договор);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, НайтиСчетФактуру(ПараметрыКомиссионера));
		
КонецПроцедуры

&НаСервере
Функция НайтиСчетФактуру(ПараметрыКомиссионера)
	
	Результат = Новый Структура("КСчетуФактуреКомиссионераИсходныйДокумент, ПоТекущемуДокументу");
	
	Результат.КСчетуФактуреКомиссионераИсходныйДокумент = 
		НайтиСчетФактуруПоПараметрамКомиссионераНаСервере(ПараметрыКомиссионера);
		
	Результат.ПоТекущемуДокументу = ЕстьСчетФактураВТекущемДокументе(ПараметрыКомиссионера, Объект.Покупатели, Истина);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция НайтиСчетФактуруПоПараметрамКомиссионераНаСервере(ПараметрыКомиссионера) 

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажахПокупатели.Ссылка КАК Ссылка,
	|	ОтчетКомиссионераОПродажахПокупатели.СчетФактура КАК СчетФактура
	|ИЗ
	|	Документ.ОтчетКомиссионера.Покупатели КАК ОтчетКомиссионераОПродажахПокупатели
	|ГДЕ
	|	ОтчетКомиссионераОПродажахПокупатели.Покупатель = &Покупатель
	|	И ОтчетКомиссионераОПродажахПокупатели.Ссылка.Договор = &ДоговорКонтрагента
	|	И ОтчетКомиссионераОПродажахПокупатели.ДатаСФ = &Дата
	|	И ОтчетКомиссионераОПродажахПокупатели.НомерСФ = &Номер
	|	И ОтчетКомиссионераОПродажахПокупатели.Ссылка.Организация = &Организация
	|	И ОтчетКомиссионераОПродажахПокупатели.Ссылка.Проведен
	|	И ОтчетКомиссионераОПродажахПокупатели.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|";
	
	Запрос.УстановитьПараметр("Покупатель", ПараметрыКомиссионера.Покупатель);
	Запрос.УстановитьПараметр("Дата", ПараметрыКомиссионера.Дата);
	Запрос.УстановитьПараметр("Номер", ПараметрыКомиссионера.Номер);
	Запрос.УстановитьПараметр("Организация", ПараметрыКомиссионера.Организация);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ПараметрыКомиссионера.ДоговорКонтрагента);
	
	// Ограничиваем выборку документов в размере 180 дней, до даты документа
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыКомиссионера.ДатаДокумента - 24*60*60*180);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ПараметрыКомиссионера.ДатаДокумента));
	
	Результат = Запрос.Выполнить().Выбрать();
	
	НайденныйИсходныйДокумент = Неопределено;
	Если Результат.Следующий() Тогда
	
		НайденныйИсходныйДокумент = Результат.СчетФактура;
	
	КонецЕсли;

	Возврат НайденныйИсходныйДокумент;
	
КонецФункции

&НаСервере
Функция ЕстьСчетФактураВТекущемДокументе(ПараметрыОперации, Покупатели, ОтборПоПокупателю = Ложь)
	
	Фильтр = Новый Структура("НомерСФ,ДатаСФ" + ?(ОтборПоПокупателю, ",Покупатель", ""),
		ПараметрыОперации.Номер,ПараметрыОперации.Дата,
		?(ОтборПоПокупателю, ПараметрыОперации.Покупатель, Неопределено));
		
	НайденныеСтрокиПоПродажам  = Покупатели.НайтиСтроки(Фильтр);
	
	Если (НайденныеСтрокиПоПродажам.Количество() > 0) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекущуюСтрокуВозвраты(Форма, ТекущаяСтрока = Неопределено, ИмяТабличнойЧастиСтроки = "Покупатели")

	Элементы = Форма.Элементы;
	Объект =  Форма.Объект;
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекущиеДанные = Элементы[ИмяТабличнойЧастиСтроки].ТекущиеДанные;
	Иначе
		ТекущиеДанные = ТекущаяСтрока;
	КонецЕсли;
	
	ФильтрПоКлючу = Новый Структура("КлючСтроки", ТекущиеДанные.КлючСвязи);
	
	НайденныеСтроки = Объект.ВозвратыИсходныеДокументы.НайтиСтроки(ФильтрПоКлючу);
	
	Если НайденныеСтроки.Количество() > 1 Тогда
	
		ТекущиеДанные.КСчетуФактуреКомиссионераНомер = НСтр("ru = 'Сводно'");
		ТекущиеДанные.КСчетуФактуреКомиссионераДата = '00010101';
		ТекущиеДанные.ПодборСчетовФактур = ОписаниеИсправляемыхДокументов(Объект, ФильтрПоКлючу);
		ТекущиеДанные.КСчетуФактуреКомиссионераИсходныйДокумент = "";
		ТекущиеДанные.ПоТекущемуДокументу = Ложь;
		
	ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
		
		ТекущиеДанные.КСчетуФактуреКомиссионераНомер = НайденныеСтроки[0].НомерВходящегоИсходногоДокумента;
		ТекущиеДанные.КСчетуФактуреКомиссионераДата =  НайденныеСтроки[0].ДатаВходящегоИсходногоДокумента;
		ТекущиеДанные.ПодборСчетовФактур = ОписаниеИсправляемыхДокументов(Объект, ФильтрПоКлючу);
		ТекущиеДанные.КСчетуФактуреКомиссионераИсходныйДокумент = НайденныеСтроки[0].ИсходныйДокумент;
		ТекущиеДанные.ПоТекущемуДокументу = НайденныеСтроки[0].ПоТекущемуДокументу;
	
	Иначе
	
		ТекущиеДанные.КСчетуФактуреКомиссионераНомер = "";
		ТекущиеДанные.КСчетуФактуреКомиссионераДата = '00010101';
		ТекущиеДанные.КСчетуФактуреКомиссионераИсходныйДокумент = "";
		ТекущиеДанные.ПодборСчетовФактур = "";
		ТекущиеДанные.ПоТекущемуДокументу = Ложь;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеИсправляемыхДокументов(Объект, ФильтрПоКлючу)
	
	МассивСтрок = Объект.ВозвратыИсходныеДокументы.НайтиСтроки(ФильтрПоКлючу);

	КоличествоДокументов = МассивСтрок.Количество();
	
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ОписаниеИсправляемыхСчетовФактур = "";
	Индекс = 0;
	РазрешенноеКоличествоДокументов = 2;
	
	ОсталосьДокументов = КоличествоДокументов - РазрешенноеКоличествоДокументов;
	
	Для каждого ТекущаяСтрока Из МассивСтрок Цикл

		Индекс = Индекс + 1;
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ИсходныйДокумент) Тогда
			
			Если ТекущаяСтрока.ПоТекущемуДокументу Тогда
				// Не выводим описание не созданных счетов-фактур, а просто переносим в " и еще с/ф"
				ОсталосьДокументов = ОсталосьДокументов + 1;
				Продолжить;
				
			Иначе 
				
				Возврат "";
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПараметрыИсправляемыйДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяСтрока.ИсходныйДокумент, "Номер, Дата");
			
		ЭтоПоследнийВыводимыйДокумент = (Индекс = КоличествоДокументов) ИЛИ (Индекс = РазрешенноеКоличествоДокументов);
		
		ОписаниеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 от %2%3 '"),
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ПараметрыИсправляемыйДокумента.Номер, Истина, Ложь),
			Формат(ПараметрыИсправляемыйДокумента.Дата, "ДФ=dd.MM.yyyy"), ?(ЭтоПоследнийВыводимыйДокумент, "", ","));
		
		ОписаниеИсправляемыхСчетовФактур = ОписаниеИсправляемыхСчетовФактур + ОписаниеДокумента;
		
		Если Индекс = РазрешенноеКоличествоДокументов Тогда 
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОсталосьДокументов > 0 Тогда
		
		Если КоличествоДокументов = ОсталосьДокументов Тогда
			
			ОписаниеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru=' %1 с/ф '"), ОсталосьДокументов);
			
			
		Иначе
			ОписаниеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru=' и еще %1 с/ф '"), ОсталосьДокументов);
		
		КонецЕсли;
		
		ОписаниеИсправляемыхСчетовФактур = ОписаниеИсправляемыхСчетовФактур + ОписаниеДокумента;
	КонецЕсли;
	
	Возврат ОписаниеИсправляемыхСчетовФактур;
	
КонецФункции

&НаСервере
Функция ЕстьВыбранныйСчетФактураВТекущемДокументе(Покупатель, СчетФактура)
	
	Если НЕ ЗначениеЗаполнено(СчетФактура) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Фильтр = Новый Структура("Покупатель, СчетФактура", Покупатель, СчетФактура);
	
	НайденныеСтрокиПоПродажам  = Объект.Покупатели.НайтиСтроки(Фильтр);
	
	Если (НайденныеСтрокиПоПродажам.Количество() > 0) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура НачалоВыбораВозвратыПредставлениеСчетаФактуры(ТекущаяСтрока)

	Если ЗначениеЗаполнено(ТекущаяСтрока.СчетФактура) Тогда
		Если Объект.НаВозвратыВыставляетсяКорректировочныйСчетФактура Тогда
			ИмяФормыСФ = "Документ.СчетФактура.ФормаОбъекта"
		Иначе
			ИмяФормыСФ = "Документ.СчетФактураПолученный.ФормаОбъекта";
		КонецЕсли;
		ПараметрыОткрытия = Новый Структура("Ключ", ТекущаяСтрока.СчетФактура);
		ОткрытьФорму(ИмяФормыСФ, ПараметрыОткрытия, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораВозвратыПодборСчетовФактур(ТекущаяСтрокаВозвраты)

	ФильтрПоКлючу = Новый Структура("КлючСтроки", ТекущаяСтрокаВозвраты.КлючСвязи);
	НайденныеСтроки = Объект.ВозвратыИсходныеДокументы.НайтиСтроки(ФильтрПоКлючу);
	КоличествоНайденныхСтрок = НайденныеСтроки.Количество();
	
	// Если исходный документ заполнен, то открываем его
	Если КоличествоНайденныхСтрок = 1 И ЗначениеЗаполнено(НайденныеСтроки[0].ИсходныйДокумент) Тогда
		
		ПараметрыИсходногоДокумента = Новый Структура("Ключ", НайденныеСтроки[0].ИсходныйДокумент);
		
		ОткрытьФорму("Документ.СчетФактура.ФормаОбъекта", ПараметрыИсходногоДокумента, ЭтотОбъект);
		
		// Если исходных документов много, то открываем таблицу
	ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
		
		ОткрытьФормуПодбораСчетовФактур(ТекущаяСтрокаВозвраты);
		
		// Если не заполнен и не установлен признак по текущему документу, то открываем список выбора документа
	ИначеЕсли НЕ ТекущаяСтрокаВозвраты.ПоТекущемуДокументу Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		
		МассивПокупателей = Новый Массив;
		МассивПокупателей.Добавить(ТекущаяСтрокаВозвраты.Покупатель);
		МассивПокупателей.Добавить(Объект.Контрагент);
		
		ПараметрыОтбора = Новый Структура("Контрагент, Организация", ТекущаяСтрокаВозвраты.Покупатель, Объект.Организация);
		
		ПараметрыФормы.Вставить("СписокКонтрагентов", МассивПокупателей);
		ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ТаблицаВозвраты");
		ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
		
		ОткрытьФорму("Документ.СчетФактура.Форма.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораСчетовФактур(ТекущаяСтрокаВозвраты)

	ПараметрыФормы = Новый Структура();
	
	ПараметрыФормы.Вставить("Организация"        , Объект.Организация);
	ПараметрыФормы.Вставить("ТолькоПросмотр"     , ТолькоПросмотр);
	ПараметрыФормы.Вставить("ДатаДокумента"      , Объект.Дата);
	ПараметрыФормы.Вставить("Контрагент"         , ТекущаяСтрокаВозвраты.Покупатель);
	ПараметрыФормы.Вставить("Комиссионер"        , Объект.Контрагент);
	ПараметрыФормы.Вставить("Договор"            , Объект.Договор);
	ПараметрыФормы.Вставить("КлючСтроки"         , ТекущаяСтрокаВозвраты.КлючСвязи);
	ПараметрыФормы.Вставить("СчетаФактуры"       , Объект.ВозвратыИсходныеДокументы);
	ПараметрыФормы.Вставить("Покупатели"         , Объект.Покупатели);
	
	ОткрытьФорму("Документ.ОтчетКомиссионера.Форма.ФормаПодбораСчетовФактур", ПараметрыФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораСчетаФактуры(ВыбранноеЗначение, ТекущаяСтрока, ИмяТаблицыПокупатели = "Покупатели") 
	
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ТекущиеДанные = Объект[ИмяТаблицыПокупатели][ТекущаяСтрока]; 
	
	НайденныеСтроки = Объект.ВозвратыИсходныеДокументы.НайтиСтроки(
		Новый Структура("КлючСтроки", ТекущиеДанные.КлючСвязи));
		
	ТекущиеДанные.КСчетуФактуреКомиссионераИсходныйДокумент = ВыбранноеЗначение;
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		НайденныеСтроки[0].ИсходныйДокумент = ВыбранноеЗначение;
	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодбораСчетовФактур(ВыбранноеЗначение)

	КлючСтроки = ВыбранноеЗначение.КлючСтроки;
	
	Индекс = 0;
	КоличествоИсходныхДокументов = Объект.ВозвратыИсходныеДокументы.Количество();
	
	Если КоличествоИсходныхДокументов > 0 Тогда
		Для Индекс = 0 По КоличествоИсходныхДокументов Цикл
	
			ТекущаяСтрока = Объект.ВозвратыИсходныеДокументы[Индекс];
		
			Если ТекущаяСтрока.КлючСтроки = КлючСтроки Тогда
		
				Объект.ВозвратыИсходныеДокументы.Удалить(Индекс);
				Индекс = Индекс - 1;
				КоличествоИсходныхДокументов = КоличествоИсходныхДокументов - 1;
			
			КонецЕсли;
	
			Если Индекс = (КоличествоИсходныхДокументов-1)
				ИЛИ КоличествоИсходныхДокументов = 0 Тогда
				
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
	КонецЕсли;
	
	Для каждого ТекСтрокаТаблицаСчетовФактур Из ВыбранноеЗначение.ТаблицаСчетовФактур Цикл
	
		НоваяСтрока = Объект.ВозвратыИсходныеДокументы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаТаблицаСчетовФактур);
		НоваяСтрока.КлючСтроки = КлючСтроки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьУсловноеОформлениеФормы()
	
	Если Объект.ИспользоватьНовыйВидДокумента Тогда 
		
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ПокупателиВозвраты.ВыставленСФ", Истина);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПокупателиВозвратыПояснениеСчетФактура");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = 'Корр. счет-фактура'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ПокупателиВозвраты.ВыставленСФ", Истина);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПокупателиВозвратыПояснениеКСчетамФактурам");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = 'К счету-фактуре (счетам-фактурам)'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ПокупателиВозвраты.ВыставленСФ", Истина);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ПокупателиВозвраты.ПредставлениеСчетаФактуры", "", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПокупателиВозвратыПредставлениеСчетаФактуры");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Создается при записи документа>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ПокупателиВозвраты.ОтчетКомиссионера", Документы.ОтчетКомиссионера.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПокупателиВозвратыОтчетКомиссионера");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Текущий документ>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ПокупателиВозвраты.ВыставленСФ", Ложь);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПокупателиВозвратыДатаСФ");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПокупателиВозвратыНомерСФ");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПокупателиВозвратыКСчетуФактуреКомиссионераДата");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПокупателиВозвратыКСчетуФактуреКомиссионераНомер");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПокупателиВозвратыПредставлениеСчетаФактуры");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПокупателиВозвратыПодборСчетовФактур");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ПокупателиВозвраты.КСчетуФактуреКомиссионераНомер", НСтр("ru = 'Сводно'"));
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПокупателиВозвратыКСчетуФактуреКомиссионераДата");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ПокупателиВозвраты.КСчетуФактуреКомиссионераДата", "", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ПокупателиВозвраты.КСчетуФактуреКомиссионераНомер", "", ВидСравненияКомпоновкиДанных.Заполнено);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ПокупателиВозвраты.ВыставленСФ", Истина);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ПокупателиВозвраты.КСчетуФактуреКомиссионераНомер", НСтр("ru = 'Сводно'"), ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПокупателиВозвратыКСчетуФактуреКомиссионераДата");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ПокупателиВозвраты.КСчетуФактуреКомиссионераДата", "", ВидСравненияКомпоновкиДанных.Заполнено);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ПокупателиВозвраты.КСчетуФактуреКомиссионераНомер", "", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ПокупателиВозвраты.ВыставленСФ", Истина);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПокупателиВозвратыКСчетуФактуреКомиссионераНомер");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ПокупателиВозвраты.ДатаСФ", "", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ПокупателиВозвраты.ВыставленСФ", Истина);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПокупателиВозвратыДатаСФ");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ПокупателиВозвраты.ПоТекущемуДокументу", Ложь);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ПокупателиВозвраты.НомерСФ", "", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ПокупателиВозвраты.ВыставленСФ", Истина);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПокупателиВозвратыНомерСФ");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ПокупателиВозвраты.ВыставленСФ", Истина);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ПокупателиВозвраты.ПодборСчетовФактур", "Выбор", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПокупателиВозвратыПодборСчетовФактур");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru='Выбор'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветГиперссылки);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	ГруппаИ = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИ, "Объект.Запасы.ЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыЗаказПокупателя");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru='<Авто>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	
	ГруппаИли = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(ГруппаИ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИли, "Объект.Запасы.СпособРаспределения", Перечисления.СпособыЗачетаИРаспределенияПлатежей.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИли, "Объект.Запасы.СпособРаспределения", Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто, ВидСравненияКомпоновкиДанных.Равно);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	ГруппаИ = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИ, "Объект.ЗапасыВозвраты.ЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыВозвратыЗаказПокупателя");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru='<Авто>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	
	ГруппаИли = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(ГруппаИ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИли, "Объект.ЗапасыВозвраты.СпособРаспределения", Перечисления.СпособыЗачетаИРаспределенияПлатежей.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИли, "Объект.ЗапасыВозвраты.СпособРаспределения", Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто, ВидСравненияКомпоновкиДанных.Равно);
	
	//
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	ГруппаИ = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИ, "Объект.Запасы.ЦенаПередачи", 0, ВидСравненияКомпоновкиДанных.Равно);
	
	ГруппаИли = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(ГруппаИ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИли, "Объект.Запасы.СпособРаспределения", Перечисления.СпособыЗачетаИРаспределенияПлатежей.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИли, "Объект.Запасы.СпособРаспределения", Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыЦенаПередачи");
	
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru='<Авто>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	ГруппаИ = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИ, "Объект.Запасы.СуммаПередачи", 0, ВидСравненияКомпоновкиДанных.Равно);
	
	ГруппаИли = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(ГруппаИ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИли, "Объект.Запасы.СпособРаспределения", Перечисления.СпособыЗачетаИРаспределенияПлатежей.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИли, "Объект.Запасы.СпособРаспределения", Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСуммаПередачи");
	
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru='<Авто>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	ГруппаИ = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИ, "Объект.Запасы.СуммаНДСПередачи", 0, ВидСравненияКомпоновкиДанных.Равно);
	
	ГруппаИли = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(ГруппаИ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИли, "Объект.Запасы.СпособРаспределения", Перечисления.СпособыЗачетаИРаспределенияПлатежей.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИли, "Объект.Запасы.СпособРаспределения", Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСуммаНДСПередачи");
	
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru='<Авто>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
	
	//
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();

	ГруппаИ = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИ, "Объект.ЗапасыВозвраты.ЦенаПередачи", 0, ВидСравненияКомпоновкиДанных.Равно);
	
	ГруппаИли = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(ГруппаИ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИли, "Объект.ЗапасыВозвраты.СпособРаспределения", Перечисления.СпособыЗачетаИРаспределенияПлатежей.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИли, "Объект.ЗапасыВозвраты.СпособРаспределения", Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыВозвратыЦенаПередачи");
	
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru='<Авто>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();

	ГруппаИ = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИ, "Объект.ЗапасыВозвраты.СуммаПередачи", 0, ВидСравненияКомпоновкиДанных.Равно);
	
	ГруппаИли = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(ГруппаИ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИли, "Объект.ЗапасыВозвраты.СпособРаспределения", Перечисления.СпособыЗачетаИРаспределенияПлатежей.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИли, "Объект.ЗапасыВозвраты.СпособРаспределения", Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыВозвратыСуммаПередачи");
	
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru='<Авто>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();

	ГруппаИ = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИ, "Объект.ЗапасыВозвраты.СуммаНДСПередачи", 0, ВидСравненияКомпоновкиДанных.Равно);
	
	ГруппаИли = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(ГруппаИ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИли, "Объект.ЗапасыВозвраты.СпособРаспределения", Перечисления.СпособыЗачетаИРаспределенияПлатежей.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИли, "Объект.ЗапасыВозвраты.СпособРаспределения", Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто, ВидСравненияКомпоновкиДанных.Равно);
	

	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыВозвратыСуммаНДСПередачи");
	
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru='<Авто>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
	
	//
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.СпособРаспределения", Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ЦенаПередачи", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.СуммаПередачи", 0, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыЦенаПередачи");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСуммаПередачи");
	
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ЗапасыВозвраты.СпособРаспределения", Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ЗапасыВозвраты.ЦенаПередачи", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ЗапасыВозвраты.СуммаПередачи", 0, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыВозвратыЦенаПередачи");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыВозвратыСуммаПередачи");
	
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
		
		Иначе
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ВидОперации", Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Покупатели.ВыставленСФ", Истина);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПокупателиПояснениеСчетФактура");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = 'Корр. счет-фактура'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ВидОперации", Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Покупатели.ВыставленСФ", Истина);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПокупателиПояснениеКСчетамФактурам");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = 'К счету-фактуре (счетам-фактурам)'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ВидОперации", Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Покупатели.ВыставленСФ", Истина);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Покупатели.ПредставлениеСчетаФактуры", "", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПокупателиПредставлениеСчетаФактуры");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Создается при записи документа>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ВидОперации", Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Покупатели.ВыставленСФ", Ложь);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПокупателиДатаСФ");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПокупателиНомерСФ");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПокупателиКСчетуФактуреКомиссионераДата");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПокупателиКСчетуФактуреКомиссионераНомер");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПокупателиПредставлениеСчетаФактуры");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПокупателиПодборСчетовФактур");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ВидОперации", Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Покупатели.КСчетуФактуреКомиссионераНомер", НСтр("ru = 'Сводно'"));
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПокупателиКСчетуФактуреКомиссионераДата");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ВидОперации", Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Покупатели.КСчетуФактуреКомиссионераДата", "", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Покупатели.КСчетуФактуреКомиссионераНомер", "", ВидСравненияКомпоновкиДанных.Заполнено);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Покупатели.ВыставленСФ", Истина);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Покупатели.КСчетуФактуреКомиссионераНомер", НСтр("ru = 'Сводно'"), ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПокупателиКСчетуФактуреКомиссионераДата");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ВидОперации", Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Покупатели.КСчетуФактуреКомиссионераДата", "", ВидСравненияКомпоновкиДанных.Заполнено);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Покупатели.КСчетуФактуреКомиссионераНомер", "", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Покупатели.ВыставленСФ", Истина);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПокупателиКСчетуФактуреКомиссионераНомер");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ВидОперации", Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Покупатели.ДатаСФ", "", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Покупатели.ВыставленСФ", Истина);
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПокупателиДатаСФ");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ВидОперации", Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Покупатели.ПоТекущемуДокументу", Ложь);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Покупатели.НомерСФ", "", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Покупатели.ВыставленСФ", Истина);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПокупателиНомерСФ");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ВидОперации", Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Покупатели.ВыставленСФ", Истина);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Покупатели.ПодборСчетовФактур", "Выбор", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПокупателиПодборСчетовФактур");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru='Выбор'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветГиперссылки);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	ГруппаИ = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИ, "Объект.Запасы.ЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыЗаказПокупателя");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru='<Авто>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	
	ГруппаИли = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(ГруппаИ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИли, "Объект.Запасы.СпособРаспределения", Перечисления.СпособыЗачетаИРаспределенияПлатежей.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИли, "Объект.Запасы.СпособРаспределения", Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто, ВидСравненияКомпоновкиДанных.Равно);
	
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПодчиненныйСчетФактуру()
	Возврат СчетаФактурыУНФ.ПолучитьПодчиненныйСчетФактуру(Объект.Ссылка, Истина);
КонецФункции

&НаСервере
Процедура ОбновитьЗаголовокФормы()
	
	Состояние = "";
	Если Объект.ПометкаУдаления Тогда
		Состояние = НСтр("ru='(удален)'");
	ИначеЕсли Не Объект.Проведен Тогда
		Состояние = НСтр("ru='(не проведен)'");
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Состояние = НСтр("ru='(создание)'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Состояние = НСтр("ru='(создание)'");
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1 %2'"),
		Объект.Ссылка.Метаданные().Представление(), Состояние);
	Иначе
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1 %2 от %3 %4'"),
		Объект.Ссылка.Метаданные().Представление(),
		?(ЗначениеЗаполнено(Объект.Номер), ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Объект.Номер, Истина, Истина), "")
		,Формат(Объект.Дата, "ДЛФ=D"), Состояние);
	КонецЕсли;
	
	Если Объект.ИспользоватьНовыйВидДокумента Тогда 
		Заголовок = Представление;
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах Тогда
		Заголовок = СтрЗаменить(Представление, НСтр("ru='Отчет комиссионера'"), НСтр("ru='Отчет комиссионера о возвратах'"));
	Иначе
		Заголовок = СтрЗаменить(Представление, НСтр("ru='Отчет комиссионера'"), НСтр("ru='Отчет комиссионера о продажах'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакАвтораспределенияЗаказов()
	
	Если Объект.ИспользоватьНовыйВидДокумента Тогда  
		
		Для Каждого СтрокаПокупатели Из Объект.ПокупателиВозвраты Цикл
			
			ПараметрыОтбора = Новый Структура("КлючСвязи", СтрокаПокупатели.КлючСвязи);
			НайденныеСтрокиЗапасы = Объект.ЗапасыВозвраты.НайтиСтроки(ПараметрыОтбора);
			ОтчетВыбран = ЗначениеЗаполнено(СтрокаПокупатели.ОтчетКомиссионера);
			
			Для Каждого СтрокаЗапасы Из НайденныеСтрокиЗапасы Цикл
				СтрокаЗапасы.ОтчетКомиссионераВыбран = ОтчетВыбран;
			КонецЦикла;
			
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионера Тогда
		Возврат
	КонецЕсли;
		
	Для Каждого СтрокаПокупатели Из Объект.Покупатели Цикл
		
		ПараметрыОтбора = Новый Структура("КлючСвязи", СтрокаПокупатели.КлючСвязи);
		НайденныеСтрокиЗапасы = Объект.Запасы.НайтиСтроки(ПараметрыОтбора);
		ОтчетВыбран = ЗначениеЗаполнено(СтрокаПокупатели.ОтчетКомиссионера);
		
		Для Каждого СтрокаЗапасы Из НайденныеСтрокиЗапасы Цикл
			СтрокаЗапасы.ОтчетКомиссионераВыбран = ОтчетВыбран;
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПризнакАвтораспределенияЗаказовКлиент(ЭтоВозврат = Ложь) 
	
	Если Объект.ИспользоватьНовыйВидДокумента Тогда 
		
		Если ЭтоВозврат Тогда
			
			ТекущиеДанные = Элементы.ПокупателиВозвраты.ТекущиеДанные;
			
			Если ТекущиеДанные = Неопределено Тогда
				Возврат
			КонецЕсли;
			
			ПараметрыОтбора = Новый Структура("КлючСвязи", ТекущиеДанные.КлючСвязи);
			НайденныеСтрокиЗапасы = Объект.ЗапасыВозвраты.НайтиСтроки(ПараметрыОтбора);
			ОтчетВыбран = ЗначениеЗаполнено(ТекущиеДанные.ОтчетКомиссионера);
			
			Для Каждого СтрокаЗапасы Из НайденныеСтрокиЗапасы Цикл
				СтрокаЗапасы.ОтчетКомиссионераВыбран = ОтчетВыбран;
			КонецЦикла
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионера") Тогда
		Возврат
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Покупатели.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
		
	ПараметрыОтбора = Новый Структура("КлючСвязи", ТекущиеДанные.КлючСвязи);
	НайденныеСтрокиЗапасы = Объект.Запасы.НайтиСтроки(ПараметрыОтбора);
	ОтчетВыбран = ЗначениеЗаполнено(ТекущиеДанные.ОтчетКомиссионера);
	
	Для Каждого СтрокаЗапасы Из НайденныеСтрокиЗапасы Цикл
		СтрокаЗапасы.ОтчетКомиссионераВыбран = ОтчетВыбран;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьДоступныеОтчетыКомиссионера(Форма, ЭтоВозврат = Ложь) 
	
	ОбъектФормы = Форма.Объект;

	Если ОбъектФормы.ИспользоватьНовыйВидДокумента Тогда 
		
		Если ЭтоВозврат Тогда
			
			Форма.Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(ОбъектФормы.Предоплата, ОбъектФормы.ВалютаДокумента);
			Форма.Элементы.ПредоплатаОтчетКомиссионера.СписокВыбора.Очистить();
			
			Для Каждого СтрокаТабличнойЧасти Из ОбъектФормы.ПокупателиВозвраты Цикл
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ОтчетКомиссионера) Тогда
					Форма.Элементы.ПредоплатаОтчетКомиссионера.СписокВыбора.Добавить(СтрокаТабличнойЧасти.ОтчетКомиссионера);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			Форма.Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(ОбъектФормы.Предоплата, ОбъектФормы.ВалютаДокумента);
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Форма.Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(ОбъектФормы.Предоплата, ОбъектФормы.ВалютаДокумента);
	
	Если Не ОбъектФормы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах") Тогда
		Возврат
	КонецЕсли;
	
	Форма.Элементы.ПредоплатаОтчетКомиссионера.СписокВыбора.Очистить();
	
	Для Каждого СтрокаТабличнойЧасти Из ОбъектФормы.Покупатели Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ОтчетКомиссионера) Тогда
			Форма.Элементы.ПредоплатаОтчетКомиссионера.СписокВыбора.Добавить(СтрокаТабличнойЧасти.ОтчетКомиссионера);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеВидаОперации()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионера Тогда
		
		УдержатьКомиссионноеВознаграждение = Ложь;
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда
			УдержатьКомиссионноеВознаграждение = Объект.Договор.УдержатьКомиссионноеВознаграждение;
		КонецЕсли;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Покупатели Цикл
			СтрокаТабличнойЧасти.ОтчетКомиссионера = Документы.ОтчетКомиссионера.ПустаяСсылка();
			СтрокаТабличнойЧасти.ВыставленСФ = Ложь;
			СтрокаТабличнойЧасти.ДатаСФ = Неопределено;
			СтрокаТабличнойЧасти.СчетФактура = Неопределено;
		КонецЦикла;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			СтрокаТабличнойЧасти.ОтчетКомиссионера = Документы.ОтчетКомиссионера.ПустаяСсылка();
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьВидимостьИДоступность(ЭтотОбъект);
	
	РазрешеноРедактированиеЦенДокументов = Не Элементы.ЗапасыЦенаПередачи.ТолькоПросмотр;
	
	Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Очистить();
	ЗаполнитьСписокДействий(РазрешеноРедактированиеЦенДокументов);
	
	ЗаполнитьСписокДокументОснование();
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамНаСервере(ПараметрыЗаполнения = Неопределено)
	
	ЗаполнениеПоНоменклатуре = Ложь;
	
	КлючСвязи = Элементы["Запасы"].ОтборСтрок["КлючСвязи"];
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ЗапасыПереданные = РаботаСКомиссионерамиКомитентамиСервер.ТаблицаОстатковТоваровУКомиссионера(Объект, , ,
			КлючСвязи);
	Иначе

		Если ТипЗнч(ПараметрыЗаполнения) = Тип("Структура") И ПараметрыЗаполнения.Свойство("ПоВсемуКоличеству")
			И Не ПараметрыЗаполнения.ПоВсемуКоличеству Тогда
			ЗаполнениеПоНоменклатуре = Истина;
			КоличествоДляРаспределения = ПараметрыЗаполнения.Количество;
		КонецЕсли;

		ЗапасыПереданные = РаботаСКомиссионерамиКомитентамиСервер.ТаблицаОстатковТоваровУКомиссионера(Объект,
			ПараметрыЗаполнения);

	КонецЕсли;
	
	ПрерватьЦикл = Ложь;
	
	Для каждого СтрокаТабличнойЧасти Из ЗапасыПереданные Цикл
		
		НоваяСтрока = Объект.Запасы.Добавить();
		
		Если ЗаполнениеПоНоменклатуре Тогда
			Если СтрокаТабличнойЧасти.Количество > КоличествоДляРаспределения И Не КоличествоДляРаспределения = 0 Тогда
				СтрокаТабличнойЧасти.СуммаРасчетов = Окр(СтрокаТабличнойЧасти.СуммаРасчетов
					/ СтрокаТабличнойЧасти.Количество * КоличествоДляРаспределения, 2, РежимОкругления.Окр15как20);
				СтрокаТабличнойЧасти.Количество = КоличествоДляРаспределения;
				СтрокаТабличнойЧасти.Остаток = КоличествоДляРаспределения;
				ПрерватьЦикл = Истина;
			ИначеЕсли КоличествоДляРаспределения = 0 Тогда
				ПрерватьЦикл = Истина;
			Иначе
				КоличествоДляРаспределения = КоличествоДляРаспределения - СтрокаТабличнойЧасти.Количество;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
		СтруктураДанные.Вставить("Характеристика",	 СтрокаТабличнойЧасти.Характеристика);
		СтруктураДанные.Вставить("Партия",	 СтрокаТабличнойЧасти.Партия);
		
		Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
			СтруктураДанные.Вставить("ВидЦен",			 Объект.ВидЦен);
			СтруктураДанные.Вставить("ВалютаДокумента",	 Объект.ВалютаДокумента);
			СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
			СтруктураДанные.Вставить("Коэффициент",		 1);
		КонецЕсли;
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		НоваяСтрока.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		НоваяСтрока.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		НоваяСтрока.Цена = СтруктураДанные.Цена;
		
		Если СтрокаТабличнойЧасти.Количество > СтрокаТабличнойЧасти.Остаток
			ИЛИ СтрокаТабличнойЧасти.СуммаРасчетов = 0 Тогда
			НоваяСтрока.СуммаПередачи = 0;
		ИначеЕсли СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Остаток Тогда
			НоваяСтрока.СуммаПередачи = СтрокаТабличнойЧасти.СуммаРасчетов;
		Иначе
			НоваяСтрока.СуммаПередачи = Окр(СтрокаТабличнойЧасти.СуммаРасчетов / СтрокаТабличнойЧасти.Остаток * СтрокаТабличнойЧасти.Количество,2,0);
		КонецЕсли;
		
		Если НоваяСтрока.Количество > 0 Тогда
			НоваяСтрока.ЦенаПередачи = НоваяСтрока.СуммаПередачи / НоваяСтрока.Количество;
		Иначе
			НоваяСтрока.ЦенаПередачи = НоваяСтрока.СуммаПередачи;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.СпособРаспределенияПоЗаказам) Тогда 
			НоваяСтрока.СпособРаспределения = Объект.СпособРаспределенияПоЗаказам;
		Иначе
			НоваяСтрока.СпособРаспределения = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто;
		КонецЕсли;
		
		Если НоваяСтрока.СпособРаспределения = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто Тогда
			НоваяСтрока.ЦенаПередачи = 0;
			НоваяСтрока.СуммаПередачи = 0;
			НоваяСтрока.СуммаНДСПередачи = 0;
			НоваяСтрока.ЗаказПокупателя = Неопределено;
		КонецЕсли;
			
		РаботаСКомиссионерамиКомитентамиСервер.РассчитатьСуммуВСтрокеТабличнойЧастиЗапасыОтчетКомиссионера(Объект, ИспользоватьСерииНоменклатурыОстатки, НоваяСтрока);
		РаботаСКомиссионерамиКомитентамиСервер.РассчитатьКомиссионноеВознаграждениеЗапасыОтчетКомиссионера(Объект, НоваяСтрока);
		
		НоваяСтрока.КлючСвязи = КлючСвязи;
		
		Если ПрерватьЦикл Тогда Прервать КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаСервере
Функция ЭтоВозвратСервер()
	Возврат Объект.ВидОперации = ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах");
КонецФункции

&НаКлиенте
Функция ЗаполнениеОстаткамиНеВозможно() 
	
	ИмяТабличнойЧасти = "Покупатели";
	Отказ = Ложь;
	
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтотОбъект, "Покупатели") Тогда
		Отказ = Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Организация"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Организация", , Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Контрагент"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Контрагент", , Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Договор) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Договор"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Договор", , Отказ);
	КонецЕсли;
	
	Возврат Отказ;

КонецФункции

&НаСервере
Процедура ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита()
	НоменклатураВДокументахСервер.ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита(ЭтотОбъект,
		"ОтчетКомиссионера", "Запасы", НастройкиФормыВыбораНоменклатуры);
КонецПроцедуры

&НаСервере
Процедура ОпределитьВидимостьИУстановитьНастройкиУчетаВНалогообложении()
	
	ВидимостьГруппыУчетВНУДоИзменения = Элементы.ГруппаУчетВНУ.Видимость;
	
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда
		Элементы.ГруппаУчетВНУ.Видимость = Ложь;
		Если Объект.УчитыватьВНУ Тогда
			Объект.УчитыватьВНУ = Ложь;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	СистемаНалогообложенияСтруктура = РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(Объект.Организация, Объект.Дата);
	
	Элементы.ГруппаУчетВНУ.Видимость = СистемаНалогообложенияСтруктура.ПлательщикУСН;
	
	ЭтоНовыйДокумент = НЕ ЗначениеЗаполнено(Объект.Ссылка);
	Если ЭтоНовыйДокумент
		И СистемаНалогообложенияСтруктура.ПлательщикУСН И СистемаНалогообложенияСтруктура.ПлательщикЕНВД Тогда
		Объект.УчитыватьВНУ = НЕ (Объект.Организация.ВидУчетаСтраховыхВзносов = Перечисления.ВидыУчетаСтраховыхВзносов.УчитыватьВЕНВД);
	КонецЕсли;
	
	ГруппаУчетВНУСталаВидимой = Не ВидимостьГруппыУчетВНУДоИзменения И Элементы.ГруппаУчетВНУ.Видимость;
	ГруппаУчетВНУСталаНевидимой = ВидимостьГруппыУчетВНУДоИзменения И Не Элементы.ГруппаУчетВНУ.Видимость;
	Если Объект.УчитыватьВНУ
		И ((НЕ Элементы.ГруппаУчетВНУ.Видимость И Объект.Ссылка.Пустая())
		Или ГруппаУчетВНУСталаНевидимой) Тогда
		Объект.УчитыватьВНУ = Ложь;
		Модифицированность = Истина;
	ИначеЕсли ГруппаУчетВНУСталаВидимой И Не Объект.УчитыватьВНУ Тогда
		Объект.УчитыватьВНУ = Истина;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура обрабатывает изменение реквизитов документов Вид цен и Валюта расчетов
//
Процедура ОбработатьИзменениеВидаЦенИВалютыРасчетов(ПараметрыДокумента)
	
	ВалютаРасчетовПередИзменением = ПараметрыДокумента.ВалютаРасчетовПередИзменением;
	ДанныеДоговора = ПараметрыДокумента.ДанныеДоговора;
	ВопросВидЦен = ПараметрыДокумента.ВопросВидЦен;
	ОткрытьФормуЦеныИВалюты = ПараметрыДокумента.ОткрытьФормуЦеныИВалюты;
	ИзменилсяВидЦен = ПараметрыДокумента.ИзменилсяВидЦен;
	ПересчетНеобходим = ПараметрыДокумента.ПересчетНеобходим;
	
	Если НЕ ДанныеДоговора.СуммаВключаетНДС = Неопределено Тогда
		
		Объект.СуммаВключаетНДС = ДанныеДоговора.СуммаВключаетНДС;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда 
		
		Объект.Курс      = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс = 0, 1, ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс);
		Объект.Кратность = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность = 0, 1, ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность);
		
	КонецЕсли;
	
	Если ИзменилсяВидЦен Тогда
		
		Объект.ВидЦен = ДанныеДоговора.ВидЦен;
		
	КонецЕсли;
	
	Объект.ВалютаДокумента = ДанныеДоговора.ВалютаРасчетов;
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	
	Если ОткрытьФормуЦеныИВалюты Тогда
		
		ТекстПредупреждения = "";
		Если ВопросВидЦен И ПересчетНеобходим Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Договор с контрагентом предусматривает вид цен, 
				|отличный от установленного в документе! 
				|Пересчитать документ в соответствии с договором?'") + Символы.ПС + Символы.ПС;
				
		КонецЕсли;
		
		ТекстПредупреждения = ТекстПредупреждения + НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом! 
			|Необходимо проверить валюту документа!'");
			
		ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаРасчетовПередИзменением, Истина, ВопросВидЦен, ТекстПредупреждения);
		
	ИначеЕсли ВопросВидЦен Тогда
		
		Если ПересчетНеобходим Тогда
			
			ТекстВопроса = НСтр("ru = 'Договор с контрагентом предусматривает вид цен, отличный от установленного в документе! 
				|Пересчитать документ в соответствии с договором?'");
				
			ОписаниеОповещения = Новый ОписаниеОповещения("ОпределитьНеобходимостьПересчетаДокументаПоУсловиямДоговора", ЭтотОбъект, ПараметрыДокумента);
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзменениеВидаЦенИВалютыРасчетов()

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты)
	
	ДокументыУНФ.ДатаПриИзменении(ДанныеДляИзмененияДаты, ЭтотОбъект, Объект);
	
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
	// Прослеживаемость
	КэшЗначений.Вставить("ВестиУчетПрослеживаемыхТоваров", ПрослеживаемостьУНФ.ВедетсяУчетПрослеживаемыхТоваров(
		Объект.Дата));
	ОбновитьПризнакПрослеживаемости();
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ДокументыУНФ.ОрганизацияПриИзменении(ЭтотОбъект, Объект);
	СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ДатаДокумента);
	Объект.СтавкаНДСВознаграждения = СтавкаНДС;
	
	Объект.Договор = Справочники.ДоговорыКонтрагентов.ПоДокументуКонтрагентуОрганизацииИВидуОперации(Объект.Ссылка,
		Объект.Контрагент, Объект.Организация);
	ОпределитьВидимостьИУстановитьНастройкиУчетаВНалогообложении();
	ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита();
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
	СтруктураДанные.Вставить("НомерГТД", Неопределено);
	
	// Прослеживаемость
	СтруктураДанные.Вставить("ТоварнаяНоменклатураВЭД", СтруктураДанные.Номенклатура.ТоварнаяНоменклатураВЭД);
	
	// Наборы
	СтруктураДанные.Вставить("ЭтоНабор", СтруктураДанные.Номенклатура.ЭтоНабор);
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС") И Не СтруктураДанные.НалогообложениеНДС
		= Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда

		Если СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли;

	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.ВидСтавкиНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(
			СтруктураДанные.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки),
			СтруктураДанные.ДатаОбработки, ТекущаяДатаСеанса())));
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(
			СтруктураДанные.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки),
			СтруктураДанные.ДатаОбработки, ТекущаяДатаСеанса())));
	КонецЕсли;
	
	// Характеристики
	СтруктураДанные.Вставить("ИспользоватьХарактеристики", Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики", Ложь);
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьХарактеристики Тогда
		ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(
			СтруктураДанные.Номенклатура);

		Если Не ЗначенияПоУмолчанию = Неопределено Тогда
			ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
		КонецЕсли;

		Если Не СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика", ХарактеристикаПоУмолчанию);
		Иначе
			СтруктураДанные.Характеристика = ?(ЗначениеЗаполнено(СтруктураДанные.Характеристика),
				СтруктураДанные.Характеристика, ХарактеристикаПоУмолчанию);
		КонецЕсли;

		СтруктураДанные.Вставить("ИспользоватьХарактеристики", Истина);
		СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",
			СтруктураДанные.Номенклатура.ПроверятьЗаполнениеХарактеристики);
	КонецЕсли; 
	// Конец Характеристики
	
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
	Иначе
		СтруктураДанные.Вставить("Цена", 0);
	КонецЕсли;
	
	//Партии
	СтруктураДанные.Вставить("ИспользоватьПартии", Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеПартий", Ложь);

	Если Не СтруктураДанные.Свойство("Партия") Тогда
		СтруктураДанные.Вставить("Партия", Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьПартии Тогда

		СтатусПартии = ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы");
		ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(
			СтруктураДанные.Номенклатура, СтатусПартии);

		ПартияПоУмолчанию = Справочники.ПартииНоменклатуры.ПустаяСсылка();

		Если Не ЗначенияПартииПоУмолчанию = Неопределено Тогда
			ПартияПоУмолчанию = ЗначенияПартииПоУмолчанию;
		КонецЕсли;

		СтруктураДанные.Партия = ?(ЗначениеЗаполнено(СтруктураДанные.Партия), СтруктураДанные.Партия, ПартияПоУмолчанию);

		СтруктураДанные.ПроверятьЗаполнениеПартий = СтруктураДанные.Номенклатура.ПроверятьЗаполнениеПартий;
		СтруктураДанные.ИспользоватьПартии = Истина;

	КонецЕсли;
	// Конец Партии
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьСерииНоменклатуры Тогда
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", СерииНоменклатурыУНФ.СтатусСерийНоменклатурыПриИзменении(СтруктураДанные));
	Иначе
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", 0);
	КонецЕсли;
	
	ГрузовыеТаможенныеДекларацииСервер.АвтоматическийПодборВКомиссииНомераГТДПереданного(СтруктураДанные);
	
	// Прослеживаемость
	СтруктураДанные.Вставить("ПрослеживаемыйТовар", СтруктураДанные.Номенклатура.ПрослеживаемыйТовар 
	И СтруктураДанные.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас);
	СтруктураДанные.Вставить("ПрослеживаемыйКомплект", СтруктураДанные.Номенклатура.ПрослеживаемыйКомплект
	И СтруктураДанные.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас);
	Если СтруктураДанные.ПрослеживаемыйТовар 
		И ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров") Тогда
		СтруктураДанные.Вставить("НомерГТД", Неопределено);
	КонецЕсли; 
	// Конец Прослеживаемость
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Получает набор данных с сервера для процедуры ХарактеристикаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПартияПриИзменении(СтруктураДанные)
	
	Если СтруктураДанные.Свойство("ЕдиницаИзмерения") Тогда
		
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
			
		Иначе
			
			СтруктураДанные.Вставить("Коэффициент", 1);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ВидЦен")
		И ЗначениеЗаполнено(СтруктураДанные.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("Цена", ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанные.СтранаПроисхождения) Тогда
		
		СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("НомерГТД", Неопределено);
	
	ГрузовыеТаможенныеДекларацииСервер.АвтоматическийПодборВКомиссииНомераГТДПереданного(СтруктураДанные);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

// Получает набор данных с сервера для процедуры ЕдиницаИзмеренияПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура();
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
		
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе	
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервере
Функция ДанныеКонтрагентаДляИзменения(Знач Дата, Знач Контрагент, Знач Организация)
	
	ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПоДокументуКонтрагентуОрганизацииИВидуОперации(Объект.Ссылка,
		Контрагент, Организация);
	
	Результат = Новый Структура();
	
	Результат.Вставить("Договор", ДоговорПоУмолчанию);
	
	ДанныеДоговора = ДанныеДоговораДляИзменения(Дата, ДоговорПоУмолчанию);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат, ДанныеДоговора);
	
	Если ПолучитьФункциональнуюОпцию("УчетПоПроектам") И НЕ ЗначениеЗаполнено(Объект.Проект) Тогда
		Результат.Вставить("Проект", Справочники.Проекты.ПолучитьПроектПоДоговору(ДоговорПоУмолчанию));
	КонецЕсли;
	
	УстановитьВидимостьДоговора();
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	// Прослеживаемость
	Результат.Вставить(
	"РеализацияВЕАЭС",
	Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Объект.Контрагент));
	РеализацияВЕАЭС = КэшЗначений.РеализацияВЕАЭС;
	// Конец Прослеживаемость
	
	Возврат Результат;
	
КонецФункции

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ДанныеДоговораДляИзменения(Знач Дата, Знач Договор)
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВалютаРасчетов", Договор.ВалютаРасчетов);
	ВалютаРасчетовКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта",
		Договор.ВалютаРасчетов));
	Результат.Вставить("ВалютаРасчетовКурсКратность", ВалютаРасчетовКурсКратность);
	Результат.Вставить("ВидЦен", Договор.ВидЦен);
	Результат.Вставить("РасчетыВУсловныхЕдиницах", Договор.РасчетыВУсловныхЕдиницах);
	Результат.Вставить("НоменклатураДляОтраженияСуммыБезВознаграждения", Договор.НоменклатураДляОтраженияСуммыБезВознаграждения);
	Результат.Вставить("СуммаВключаетНДС", Неопределено);
	Если ЗначениеЗаполнено(Договор.ВидЦен) Тогда
		Результат.СуммаВключаетНДС = Договор.ВидЦен.ЦенаВключаетНДС;
	КонецЕсли;
	Результат.Вставить("СпособЗаполненияСтавкиНДС",
		Справочники.ДоговорыКонтрагентов.СпособЗаполненияСтавкиНДСПоДоговору(Договор));
	Результат.Вставить("НеУчитыватьЗаказыПриПередачеНаКомиссию", Ложь);
	Если ЗначениеЗаполнено(Договор) Тогда
		Результат.Вставить("НеУчитыватьЗаказыПриПередачеНаКомиссию", Договор.НеУчитыватьЗаказыПриПередачеНаКомиссию);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Договор) Тогда
		Результат.Вставить("УдержатьКомиссионноеВознаграждение", Договор.УдержатьКомиссионноеВознаграждение);
		Результат.Вставить("СпособРасчетаКомиссионногоВознаграждения", Договор.СпособРасчетаКомиссионногоВознаграждения);
		Результат.Вставить("ПроцентКомиссионногоВознаграждения", Договор.ПроцентКомиссионногоВознаграждения);
	Иначе
		Результат.Вставить("УдержатьКомиссионноеВознаграждение", Ложь);
		Результат.Вставить("СпособРасчетаКомиссионногоВознаграждения",
			Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается);
		Результат.Вставить("ПроцентКомиссионногоВознаграждения", 0);
	КонецЕсли;
	
	Результат.Вставить("СпособРаспределенияПоЗаказам", Договор.СпособРаспределенияПоЗаказам); 
	
	Возврат Результат;
	
КонецФункции

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения
// организации.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС(ЭтоОткрытие = Ложь)
	
	НалогообложениеПередИзменением = Объект.НалогообложениеНДС;
	Если Не ЗначениеЗаполнено(СпособЗаполненияСтавкиНДС) Тогда
		Объект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Объект.Организация,, Объект.Дата);
	ИначеЕсли СпособЗаполненияСтавкиНДС = ПредопределенноеЗначение("Перечисление.СпособыЗаполненияСтавкиНДС.БезНДС") Тогда
		Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС");
	Иначе
		Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС");
	КонецЕсли;
	
	Если НЕ НалогообложениеПередИзменением = Объект.НалогообложениеНДС ИЛИ ЭтоОткрытие Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
//
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		Элементы.ЗапасыСуммаНДСПередачи.Видимость = Истина;
		Элементы.СчетФактураНадпись.Видимость = Истина;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
			КонецЕсли;	
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
											
			СтрокаТабличнойЧасти.СуммаНДСПередачи = ?(Объект.СуммаВключаетНДС,
													СтрокаТабличнойЧасти.СуммаПередачи - (СтрокаТабличнойЧасти.СуммаПередачи) / ((СтавкаНДС + 100) / 100),
													СтрокаТабличнойЧасти.СуммаПередачи * СтавкаНДС / 100);
								                    											
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;	
		
	Иначе
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДСПередачи.Видимость = Ложь;
		
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда	
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			Элементы.СчетФактураНадпись.Видимость = Ложь;
		Иначе
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
			Элементы.СчетФактураНадпись.Видимость = Истина;
		КонецЕсли;	
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			СтрокаТабличнойЧасти.СуммаНДСПередачи = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;	
		
	КонецЕсли;
	
	Элементы.СчетФактураНадпись.Видимость = Истина;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСчетФактураНомерДата", "Видимость"
	, Элементы.СчетФактураНадпись.Видимость И Не ЗначениеЗаполнено(КэшЗначений.СчетФактураСсылка));
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()	

// Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // РассчитатьСуммуНДС()

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено, ИмяТабличнойЧастиСтроки = "Запасы") 
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы[ИмяТабличнойЧастиСтроки].ТекущиеДанные; 
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Серии номера
	Если ИспользоватьСерииНоменклатурыОстатки<>Неопределено Тогда
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСерииНоменклатурыКоличество(Объект, СтрокаТабличнойЧасти,,"КлючСвязиСерииНоменклатуры");
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

&НаКлиенте
Процедура РассчитатьСуммыПередачи(СтрокаТабличнойЧасти = Неопределено) 
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	КонецЕсли;
	
	// Сумма передачи.
	СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаПередачи;
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	// Сумма НДС передачи.
	СтрокаТабличнойЧасти.СуммаНДСПередачи = ?(Объект.СуммаВключаетНДС,
												СтрокаТабличнойЧасти.СуммаПередачи - (СтрокаТабличнойЧасти.СуммаПередачи) / ((СтавкаНДС + 100) / 100),
												СтрокаТабличнойЧасти.СуммаПередачи * СтавкаНДС / 100);	
	
	// Сумма вознаграждения.
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
КонецПроцедуры

// Рассчитывает комиссионное вознаграждение в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - ДанныеФормыЭлементКоллекции - строка табличной части документа
//
&НаКлиенте
Процедура РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти)
	
	Если Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи") Тогда
		СтрокаТабличнойЧасти.СуммаВознаграждения = Объект.ПроцентКомиссионногоВознаграждения * СтрокаТабличнойЧасти.Сумма / 100;
	ИначеЕсли Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления") Тогда
		СтрокаТабличнойЧасти.СуммаВознаграждения = Объект.ПроцентКомиссионногоВознаграждения * (СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаПередачи) / 100;
	Иначе
		СтрокаТабличнойЧасти.СуммаВознаграждения = 0;
	КонецЕсли;
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДСВознаграждения);
	
	СтрокаТабличнойЧасти.СуммаНДСВознаграждения = ?(Объект.СуммаВключаетНДС,
													СтрокаТабличнойЧасти.СуммаВознаграждения - (СтрокаТабличнойЧасти.СуммаВознаграждения) / ((СтавкаНДС + 100) / 100),
													СтрокаТабличнойЧасти.СуммаВознаграждения * СтавкаНДС / 100);
	
КонецПроцедуры // РассчитатьКомиссионноеВознаграждение()

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь,
	ПерезаполнитьЦены = Ложь, ТекстПредупреждения = "")
	
	ПараметрыФормыЦеныИВалюта = ЦеныИВалютаКлиентСервер.НовыеПараметрыФормыЦеныИВалюта(Объект, ТолькоПросмотр,
		Компания, ПерезаполнитьЦены, ПересчитатьЦены, ТекстПредупреждения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуЦеныИВалютаЗавершение", ЭтотОбъект,
		Новый Структура("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением));
	ОткрытьФорму("ОбщаяФорма.ЦеныИВалюта", ПараметрыФормыЦеныИВалюта, ЭтотОбъект, , , , ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

// Рассчитывается значение колонки Всего ТЧ Покупатели на клиенте.
//
&НаКлиенте
Процедура РассчитатьКолонкуВсегоНаКлиенте(СтрокаПокупатели, ИмяТабличнойЧастиЗапасы = "Запасы") 
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("КлючСвязи", СтрокаПокупатели.КлючСвязи);
	РезультатПоиска = Объект[ИмяТабличнойЧастиЗапасы].НайтиСтроки(ПараметрыОтбора); 
	Если РезультатПоиска.Количество() = 0 Тогда
		СтрокаПокупатели.Всего = 0;
	Иначе
		ИтогВсего = 0;
		Для каждого СтрокаТЧ Из РезультатПоиска Цикл
			ИтогВсего = ИтогВсего + СтрокаТЧ.Всего;
		КонецЦикла;
		СтрокаПокупатели.Всего = ИтогВсего;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьКолонкуВсегоНаКлиенте

// Обновить значение колонки Всего ТЧ Покупатели на клиенте.
//
&НаКлиенте
Процедура ОбновитьКолонкуВсегоНаКлиенте(ОбновитьВсеСтроки = Ложь, ИмяТабличнойЧастиПокупатели = "Покупатели") 
	
	ТекущаяСтрокаПокупатели = Элементы[ИмяТабличнойЧастиПокупатели].ТекущиеДанные;  
	Если ТекущаяСтрокаПокупатели = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТабличнойЧастиЗапасы = ?(ИмяТабличнойЧастиПокупатели = "Покупатели", "Запасы", "ЗапасыВозвраты"); 
	
	Если ОбновитьВсеСтроки Тогда
		
		Для каждого СтрокаПокупатели Из Объект[ИмяТабличнойЧастиПокупатели] Цикл 
			
			РассчитатьКолонкуВсегоНаКлиенте(СтрокаПокупатели, ИмяТабличнойЧастиЗапасы); 
			
		КонецЦикла;
		
	Иначе
		
		РассчитатьКолонкуВсегоНаКлиенте(ТекущаяСтрокаПокупатели, ИмяТабличнойЧастиЗапасы); 
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьКолонкуВсегоНаКлиенте()

// ПодключаемоеОборудование
// Процедура получает данные по штрихкодам.
//
&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	// Преобразование весовых штрихкодов.
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодамВМассиве(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		МассивДанныхШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если МассивДанныхШтрихкода <> Неопределено
			И МассивДанныхШтрихкода.Количество() <> 0 Тогда
			
			Для Каждого ДанныеШтрихкода Из МассивДанныхШтрихкода Цикл
				
				СтруктураДанныеНоменклатуры = Новый Структура();
				СтруктураДанныеНоменклатуры.Вставить("Организация", СтруктураДанные.Организация);
				СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
				СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
				СтруктураДанныеНоменклатуры.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
				СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", СтруктураДанные.НалогообложениеНДС);
				СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", СтруктураДанные.Дата);
				Если ЗначениеЗаполнено(СтруктураДанные.ВидЦен) Тогда
					СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", СтруктураДанные.Дата);
					СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", СтруктураДанные.ВалютаДокумента);
					СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", СтруктураДанные.СуммаВключаетНДС);
					СтруктураДанныеНоменклатуры.Вставить("ВидЦен", СтруктураДанные.ВидЦен);
					Если ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения)
						И ТипЗнч(ДанныеШтрихкода.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
						СтруктураДанныеНоменклатуры.Вставить("Коэффициент", ДанныеШтрихкода.ЕдиницаИзмерения.Коэффициент);
					Иначе
						СтруктураДанныеНоменклатуры.Вставить("Коэффициент", 1);
					КонецЕсли;
				КонецЕсли;
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтруктураДанные, "ЭтоНовыйОбъект") Тогда
					СтруктураДанныеНоменклатуры.Вставить("ЭтоНовыйОбъект", СтруктураДанные.ЭтоНовыйОбъект);
				КонецЕсли;
				
				ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
				
				Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
					ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	Для каждого парам Из Метаданные.Документы.ОтчетКомиссионера.ТабличныеЧасти.Запасы.Реквизиты.Номенклатура.ПараметрыВыбора Цикл
		Если парам.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(парам.Значение)=Тип("ФиксированныйМассив") Тогда
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", парам.Значение);
			Иначе
			    МассивТипов = Новый Массив;
				МассивТипов.Добавить(парам.Значение);
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов, ЭтоВозврат = Ложь) 
	
	ИмяТаблицыЗапасы = "Запасы"; 
	Если ЭтоВозврат Тогда 
		ИмяТаблицыЗапасы = "ЗапасыВозвраты";
	КонецЕсли;
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураДанные.Вставить("Дата", Объект.Дата);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	ТекущийКлючСвязи = Элементы[ИмяТаблицыЗапасы].ОтборСтрок["КлючСвязи"]; 
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода.Количество() > 1 Тогда
			
			ПараметрыОткрытия = Новый Структура("МассивНоменклатуры, ТекШтрихкод", ДанныеШтрихкода, ТекШтрихкод);
			СтруктураПараметров = Новый Структура("СтруктураДанные, ИмяТаблицыЗапасы", СтруктураДанные, ИмяТаблицыЗапасы); 
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоДаннымШтрихкодовЗавершение", ЭтотОбъект, СтруктураПараметров); 
			
			ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ДублиНоменклатурыПоШтрихКодам", ПараметрыОткрытия, ЭтаФорма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Продолжить;
		КонецЕсли;
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено 
			ИЛИ ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
			ОписаниеШтрихкода = Новый Структура;
			ОписаниеШтрихкода.Вставить("Штрихкод", ТекШтрихкод.Штрихкод);
			ОписаниеШтрихкода.Вставить("Номенклатура", ДанныеШтрихкода[0].Номенклатура);
			ОписаниеШтрихкода.Вставить("ТипНоменклатуры",
				ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры);
			ОписаниеШтрихкода.Вставить("ЭтоНабор", ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ЭтоНабор);
			ШтрихкодыНекорректногоТипа.Добавить(ОписаниеШтрихкода);
		Иначе
			
			ДанныеШтрихкода = ДанныеШтрихкода[0];
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
			ПараметрыОтбора.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			ПараметрыОтбора.Вставить("Партия", ДанныеШтрихкода.Партия);
			ПараметрыОтбора.Вставить("ЕдиницаИзмерения", ДанныеШтрихкода.ЕдиницаИзмерения);
			ПараметрыОтбора.Вставить("КлючСвязи", ТекущийКлючСвязи);
			МассивСтрокТЧ = Объект[ИмяТаблицыЗапасы].НайтиСтроки(ПараметрыОтбора); 
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				НоваяСтрока = Объект[ИмяТаблицыЗапасы].Добавить(); 
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
				НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
				
				Если ЗначениеЗаполнено(Объект.СпособРаспределенияПоЗаказам) Тогда 
					НоваяСтрока.СпособРаспределения = Объект.СпособРаспределенияПоЗаказам;
				Иначе
					НоваяСтрока.СпособРаспределения = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто");
				КонецЕсли;
				
				ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("СтранаПроисхождения", НоваяСтрока.СтранаПроисхождения);
				ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("НомерГТД", НоваяСтрока.НомерГТД);
				
				// Прослеживаемость
				НоваяСтрока.СтранаПроисхождения = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтранаПроисхождения;
				Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров И ПрослеживаемаяОперация(Объект.ВидОперации) Тогда
					НоваяСтрока.ПрослеживаемыйТовар = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПрослеживаемыйТовар;
					НоваяСтрока.ПрослеживаемыйКомплект = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПрослеживаемыйКомплект;
					
					ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, НоваяСтрока);
					
					НоваяСтрока.КодТНВЭД = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТоварнаяНоменклатураВЭД;
				Иначе
					НоваяСтрока.ПрослеживаемыйТовар = Ложь;
					НоваяСтрока.ПрослеживаемыйКомплект = Ложь;
				КонецЕсли;
				Если НЕ НоваяСтрока.ПрослеживаемыйТовар Тогда
					ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("НомерГТД", НоваяСтрока.НомерГТД);
				КонецЕсли;
				// Конец Прослеживаемость
				
				НоваяСтрока.КлючСвязи = ТекущийКлючСвязи;
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
				РассчитатьКомиссионноеВознаграждение(НоваяСтрока);
				Элементы[ИмяТаблицыЗапасы].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор(); 
			Иначе
				НоваяСтрока = МассивСтрокТЧ[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
				РассчитатьКомиссионноеВознаграждение(НоваяСтрока);
				Элементы[ИмяТаблицыЗапасы].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор(); 
			КонецЕсли;
			
			Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
				СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект, , , "КлючСвязиСерииНоменклатуры");
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаКлиенте
Процедура ЗаполнитьПоДаннымШтрихкодовЗавершение(СтруктураНоменклатуры, Параметры) Экспорт
	
	Если СтруктураНоменклатуры = Неопределено Тогда Возврат КонецЕсли;
	
	Если Параметры.Свойство("ИмяТаблицыЗапасы") Тогда 
		ИмяТаблицыЗапасы = Параметры.ИмяТаблицыЗапасы;
	Иначе
		ИмяТаблицыЗапасы = "Запасы";
	КонецЕсли;
	
	ДанныеШтрихкода = СтруктураНоменклатуры.МассивНоменклатуры[0];
	ТекШтрихкод = СтруктураНоменклатуры.ТекШтрихкод;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	СтруктураДанные = Параметры.СтруктураДанные;
	
	ТекущийКлючСвязи = Элементы[ИмяТаблицыЗапасы].ОтборСтрок["КлючСвязи"]; 
	Если СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено ИЛИ ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
			ОписаниеШтрихкода = Новый Структура;
			ОписаниеШтрихкода.Вставить("Штрихкод", ТекШтрихкод.Штрихкод);
			ОписаниеШтрихкода.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
			ОписаниеШтрихкода.Вставить("ТипНоменклатуры", ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры);
			ОписаниеШтрихкода.Вставить("ЭтоНабор", ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор);
			ШтрихкодыНекорректногоТипа.Добавить(ОписаниеШтрихкода);
		Иначе
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
			ПараметрыОтбора.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			ПараметрыОтбора.Вставить("Партия", ДанныеШтрихкода.Партия);
			ПараметрыОтбора.Вставить("ЕдиницаИзмерения", ДанныеШтрихкода.ЕдиницаИзмерения);
			ПараметрыОтбора.Вставить("КлючСвязи", ТекущийКлючСвязи);
			МассивСтрокТЧ = Объект[ИмяТаблицыЗапасы].НайтиСтроки(ПараметрыОтбора); 
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				НоваяСтрока = Объект[ИмяТаблицыЗапасы].Добавить(); 
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
				НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
				
				Если ЗначениеЗаполнено(Объект.СпособРаспределенияПоЗаказам) Тогда 
					НоваяСтрока.СпособРаспределения = Объект.СпособРаспределенияПоЗаказам;
				Иначе
					НоваяСтрока.СпособРаспределения = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто");
				КонецЕсли;
				
				ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("СтранаПроисхождения", НоваяСтрока.СтранаПроисхождения);
				ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("НомерГТД", НоваяСтрока.НомерГТД);
				
				// Прослеживаемость
				НоваяСтрока.СтранаПроисхождения = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтранаПроисхождения;
				Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров И ПрослеживаемаяОперация(Объект.ВидОперации) Тогда
					НоваяСтрока.ПрослеживаемыйТовар = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПрослеживаемыйТовар;
					НоваяСтрока.ПрослеживаемыйКомплект = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПрослеживаемыйКомплект;
					
					ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, НоваяСтрока);
				
				Иначе
					НоваяСтрока.ПрослеживаемыйТовар = Ложь;
					НоваяСтрока.ПрослеживаемыйКомплект = Ложь;
				КонецЕсли;
				Если НЕ НоваяСтрока.ПрослеживаемыйТовар Тогда
					ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("НомерГТД", НоваяСтрока.НомерГТД);
				КонецЕсли; 
				// Конец Прослеживаемость
				
				НоваяСтрока.КлючСвязи = ТекущийКлючСвязи;
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
				РассчитатьКомиссионноеВознаграждение(НоваяСтрока);
				Элементы[ИмяТаблицыЗапасы].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор(); 
			Иначе
				НоваяСтрока = МассивСтрокТЧ[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
				РассчитатьКомиссионноеВознаграждение(НоваяСтрока);
				Элементы[ИмяТаблицыЗапасы].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор(); 
			КонецЕсли;
			
			Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
				СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект, , , "КлючСвязиСерииНоменклатуры");
			КонецЕсли;
			
		КонецЕсли;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

// Процедура обрабатывает полученные штрихкоды.
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов, ЭтоВозврат = Ложь) Экспорт 

	Модифицированность = Истина;

	НеДобавленныеШтрихкоды = ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов, ЭтоВозврат); 
	НеизвестныеШтрихкоды = НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа = НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;

	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда

		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);

		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект, , , , Оповещение);

		Возврат;

	КонецЕсли;
	
	ИмяТаблицыЗапасы = "Запасы"; 
	Если ЭтоВозврат Тогда 
		ИмяТаблицыЗапасы = "ЗапасыВозвраты";
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды, ИмяТаблицыЗапасы); 

КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды, ИмяТабличнойЧасти = "Запасы") Экспорт 
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
	СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", Элементы[ИмяТабличнойЧасти].ОтборСтрок["КлючСвязи"]);
	Элементы[ИмяТабличнойЧасти].ОтборСтрок = СтрОтбора;
	
	Если ИмяТабличнойЧасти = "Запасы" Тогда 
		ОбновитьКолонкуВсегоНаКлиенте();
	Иначе
		ОбновитьКолонкуВсегоНаКлиенте(, "ПокупателиВозвраты");
	КонецЕсли;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияХарактеристик()
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ЗаполнитьПризнакАвтораспределенияЗаказов();
	ОбновитьПредставлениеСчетовФактур();
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		Если ТекНекорректныйШтрихкод.Свойство("ЭтоНабор") И ТекНекорректныйШтрихкод.ЭтоНабор Тогда
			// Наборы
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", НСтр("ru = 'Набор'"));
		Иначе
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		КонецЕсли; 
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

// Конец ПодключаемоеОборудование

// Процедура устанавливает видимость договора в зависимости от установленного параметра контрагенту.
//
&НаСервере
Процедура УстановитьВидимостьДоговора()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ПараметрыРасчетовСКонтрагентом = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Контрагент, "ВестиРасчетыПоЗаказам, ВестиРасчетыПоДоговорам");
		
		КонтрагентВестиРасчетыПоЗаказам = ПараметрыРасчетовСКонтрагентом.ВестиРасчетыПоЗаказам;
		Элементы.Договор.Видимость = ПараметрыРасчетовСКонтрагентом.ВестиРасчетыПоДоговорам;
		
	Иначе
		
		КонтрагентВестиРасчетыПоЗаказам = Ложь;
		Элементы.Договор.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьДоговора()

// Получает структуру параметров формы выбора договора контрагента.
//
&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбора(Документ, Организация, Контрагент, Договор)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Выполняет действия при изменении договора контрагента.
//
&НаКлиенте
Процедура ОбработатьИзменениеДоговора(ДанныеДоговора = Неопределено)
	
	ДоговорПередИзменением = Договор;
	Договор = Объект.Договор;
	
	Если ДоговорПередИзменением <> Объект.Договор Тогда
		
		ПараметрыДокумента = Новый Структура;
		Если ДанныеДоговора = Неопределено Тогда
			
			ДанныеДоговора = ДанныеДоговораДляИзменения(ДатаДокумента, Объект.Договор);
			
		Иначе
			
			ПараметрыДокумента.Вставить("КонтрагентПередИзменением", ДанныеДоговора.КонтрагентПередИзменением);
			ПараметрыДокумента.Вставить("КонтрагентВестиРасчетыПоЗаказамПередИзменением",
				ДанныеДоговора.КонтрагентВестиРасчетыПоЗаказамПередИзменением);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеДоговора.СпособРаспределенияПоЗаказам) Тогда 
			Объект.СпособРаспределенияПоЗаказам = ДанныеДоговора.СпособРаспределенияПоЗаказам;
		Иначе
			Объект.СпособРаспределенияПоЗаказам = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто");
		КонецЕсли;
		
		Объект.НоменклатураДляОтраженияСуммыБезВознаграждения = ДанныеДоговора.НоменклатураДляОтраженияСуммыБезВознаграждения;
		
		НеУчитыватьЗаказыПриПередачеНаКомиссию = ДанныеДоговора.НеУчитыватьЗаказыПриПередачеНаКомиссию;
		
		ВопросПредоплата = Объект.Предоплата.Количество() > 0 И Объект.Договор <> ДоговорПередИзменением;
		
		ИзменилсяВидЦен = Объект.ВидЦен <> ДанныеДоговора.ВидЦен И ЗначениеЗаполнено(ДанныеДоговора.ВидЦен);
		ВопросВидЦен = ЗначениеЗаполнено(Объект.Договор) И ИзменилсяВидЦен;
		
		ВалютаРасчетовПередИзменением = ВалютаРасчетов;
		ВалютаРасчетов = ДанныеДоговора.ВалютаРасчетов;
		
		ПересчетНеобходим = (Объект.Запасы.Количество() > 0);
		
		НовыйДоговорИВалютаРасчетов = ЗначениеЗаполнено(Объект.Договор) И ЗначениеЗаполнено(ВалютаРасчетов) 
			И Объект.Договор <> ДоговорПередИзменением И ВалютаРасчетовПередИзменением <> ДанныеДоговора.ВалютаРасчетов;
		ОткрытьФормуЦеныИВалюты = НовыйДоговорИВалютаРасчетов И Объект.ВалютаДокумента <> ДанныеДоговора.ВалютаРасчетов
			И Объект.Запасы.Количество() > 0;
		
		ПараметрыДокумента.Вставить("ДоговорПередИзменением", ДоговорПередИзменением);
		ПараметрыДокумента.Вставить("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением);
		ПараметрыДокумента.Вставить("ДанныеДоговора", ДанныеДоговора);
		ПараметрыДокумента.Вставить("ПересчетНеобходим", ПересчетНеобходим);
		ПараметрыДокумента.Вставить("ИзменилсяВидЦен", ИзменилсяВидЦен);
		ПараметрыДокумента.Вставить("ВопросПредоплата", ВопросПредоплата);
		ПараметрыДокумента.Вставить("ВопросВидЦен", ВопросВидЦен);
		ПараметрыДокумента.Вставить("ОткрытьФормуЦеныИВалюты", ОткрытьФормуЦеныИВалюты);
		ПараметрыДокумента.Вставить("ВидимостьДоговораПередИзменением", Элементы.Договор.Видимость);
		
		СпособЗаполненияСтавкиНДСДоИзменения = СпособЗаполненияСтавкиНДС;
		СпособЗаполненияСтавкиНДС = ДанныеДоговора.СпособЗаполненияСтавкиНДС;
		Если СпособЗаполненияСтавкиНДСДоИзменения <> СпособЗаполненияСтавкиНДС Тогда
			ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
		КонецЕсли;
		
		Объект.УдержатьКомиссионноеВознаграждение = ДанныеДоговора.УдержатьКомиссионноеВознаграждение;
		Объект.СпособРасчетаКомиссионногоВознаграждения = ДанныеДоговора.СпособРасчетаКомиссионногоВознаграждения;
		Объект.ПроцентКомиссионногоВознаграждения = ДанныеДоговора.ПроцентКомиссионногоВознаграждения;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НоменклатураДляОтраженияСуммыБезВознаграждения", "Видимость", Объект.УдержатьКомиссионноеВознаграждение);
		
		Если Не ЗначениеЗаполнено(Объект.СпособРасчетаКомиссионногоВознаграждения) Тогда
			Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается");
		КонецЕсли;
		
		Если ВопросПредоплата = Истина Тогда
			
			ТекстВопроса = НСтр("ru = 'Зачет предоплаты будет очищен, продолжить?'");
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОпределитьНеобходимостьОбновитьЗачетыАванса", ЭтотОбъект, ПараметрыДокумента);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			ОбработатьИзменениеВидаЦенИВалютыРасчетов(ПараметрыДокумента);
			
		КонецЕсли;
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах") И Не Объект.ИспользоватьНовыйВидДокумента Тогда 
			УдержатьКомиссионноеВознаграждение = Ложь;
		КонецЕсли;
		
		Если Объект.СпособРасчетаКомиссионногоВознаграждения <> ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается")
			И ЗначениеЗаполнено(Объект.ПроцентКомиссионногоВознаграждения) Тогда
			Если Объект.Запасы.Количество() > 0 Тогда
				ПоказатьВопрос(Новый ОписаниеОповещения("СпособРасчетаКомиссионногоВознагражденияПриИзмененииЗавершение", ЭтотОбъект), "Изменился способ расчета. Пересчитать комиссионное вознаграждение?",
				РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ЗапасыЗаказПокупателя.Видимость = Не НеУчитыватьЗаказыПриПередачеНаКомиссию;
		Элементы.ПредоплатаЗаказ.Видимость = Не НеУчитыватьЗаказыПриПередачеНаКомиссию;
		
		Если НеУчитыватьЗаказыПриПередачеНаКомиссию Тогда
			
			Для Каждого СтрокаЗапасы Из Объект.Запасы Цикл
				СтрокаЗапасы.ЗаказПокупателя = Неопределено;
			КонецЦикла;
			
			Для Каждого СтрокаПредоплата Из Объект.Предоплата Цикл
				СтрокаПредоплата.Заказ = Неопределено;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьИОстаткиВзаиморасчетов()
	
	Элементы.ОстатокВзаиморасчетов.Видимость = НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.Контрагент.АвтоМаксимальнаяШирина = Не Элементы.ОстатокВзаиморасчетов.Видимость;
	
	Если НЕ Элементы.ОстатокВзаиморасчетов.Видимость Тогда
		// Только для новых объектов
		Возврат;
	КонецЕсли;
	
	Элементы.ОстатокВзаиморасчетов.Заголовок = РаботаСКонтрагентамиУНФ.ЗаголовокНадписиВзаиморасчетов(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРежимРаботаГТД()
	
	НеизменяемыеРеквизиты = Новый Массив;
	НеизменяемыеРеквизиты.Добавить("ЗапасыПометка");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНомерСтроки");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНоменклатура");
	НеизменяемыеРеквизиты.Добавить("ЗапасыХарактеристика");
	НеизменяемыеРеквизиты.Добавить("ЗапасыПартия");
	НеизменяемыеРеквизиты.Добавить("ЗапасыКоличество");
	НеизменяемыеРеквизиты.Добавить("ЗапасыЕдиницаИзмерения");
	НеизменяемыеРеквизиты.Добавить("ЗапасыСтранаПроисхождения");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНомерГТД");
	ПрослеживаемостьФормыКлиентСерверУНФ.ДобавитьНеизменяемыеРеквизитыДляРежимаГТД(НеизменяемыеРеквизиты);
	
	Для каждого ЭлементФормы Из Элементы.Запасы.ПодчиненныеЭлементы Цикл
		
		Если НеизменяемыеРеквизиты.Найти(ЭлементФормы.Имя) = Неопределено
			И ЭлементФормы.Видимость = Истина Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементФормы.Имя, "Видимость", Ложь);
			КэшЗначений.ОбрабатываемыеРеквизиты.Добавить(ЭлементФормы.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЕдиницаИзмерения", "Доступность", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьРежимРаботаГТД()
	
	Для каждого ИмяЭлементаФормы Из КэшЗначений.ОбрабатываемыеРеквизиты Цикл
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлементаФормы, "Видимость", Истина);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЕдиницаИзмерения", "Доступность", Истина);
	
	КэшЗначений.ОбрабатываемыеРеквизиты = Новый Массив;
	
КонецПроцедуры

&НаКлиенте 
Процедура ИзменитьРежимРаботаГТД(ВключитьРежимГТД)
	
	Если НЕ КэшЗначений.Свойство("ОбрабатываемыеРеквизиты") Тогда
		
		КэшЗначений.Вставить("ОбрабатываемыеРеквизиты", Новый Массив);
		
	КонецЕсли;
	
	Если ВключитьРежимГТД Тогда
		
		ВключитьРежимРаботаГТД();
		
	Иначе
		
		ВыключитьРежимРаботаГТД();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НомераГТДЗаполнитьПоФактическимОстаткамНаСервере(КлючСвязи, ЭтоКонтекстныйВызов, ИмяТаблицыЗапасы = "Запасы") 
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ТаблицаЗапасы", Неопределено);
	ПараметрыПодбора.Вставить("ОстаткиПоГТД", Неопределено);
	ПараметрыПодбора.Вставить("Дата", Объект.Дата);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	
	ИндексТекущейСтроки = 0;
	Если ЗначениеЗаполнено(Элементы[ИмяТаблицыЗапасы].ТекущаяСтрока) Тогда
		ИндексТекущейСтроки = Объект[ИмяТаблицыЗапасы].Индекс(Объект[ИмяТаблицыЗапасы].НайтиПоИдентификатору(Элементы[ИмяТаблицыЗапасы].ТекущаяСтрока))
	КонецЕсли;
	ПараметрыПодбора.Вставить("ИндексТекущейСтроки", ИндексТекущейСтроки); 
	
	ПараметрыПодбора.Вставить("КлючСвязи", КлючСвязи);
	
	Если НЕ ЭтоКонтекстныйВызов Тогда
		
		ПараметрыПодбора.Вставить("ПроверятьПометку", Истина);
		
	КонецЕсли;
	
	МассивИменПолей = Новый Массив;
	МассивИменПолей.Добавить("Сумма");
	МассивИменПолей.Добавить("СуммаНДС");
	МассивИменПолей.Добавить("Всего");
	МассивИменПолей.Добавить("СуммаПередачи");
	МассивИменПолей.Добавить("СуммаНДСПередачи");
	МассивИменПолей.Добавить("СуммаВознаграждения");
	МассивИменПолей.Добавить("СуммаНДСВознаграждения");
	ПараметрыПодбора.Вставить("ИменаПолей", МассивИменПолей);
	
	ГрузовыеТаможенныеДекларацииСервер.ПодготовитьТаблицуЗапасовИзТаблицыФормы(ПараметрыПодбора, Объект[ИмяТаблицыЗапасы]);
	ГрузовыеТаможенныеДекларацииСервер.СформироватьОстаткиНомеровГТД(ПараметрыПодбора);
	ГрузовыеТаможенныеДекларацииСервер.ПеренестиОстаткиНомеровГТДВТаблицуФормы(Объект[ИмяТаблицыЗапасы], ПараметрыПодбора);
	
	Если ПараметрыПодбора.ИндексТекущейСтроки <> -1 Тогда
		
		СтрокаКоллекции = Объект[ИмяТаблицыЗапасы].Получить(ПараметрыПодбора.ИндексТекущейСтроки);
		Элементы[ИмяТаблицыЗапасы].ТекущаяСтрока = СтрокаКоллекции.ПолучитьИдентификатор();
		
	КонецЕсли;
	
	// Прослеживаемость
	ОбновитьОтображениеПрослеживаемости(ИмяТаблицыЗапасы);
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаСервере
Процедура НомераГТДПодобратьПоПереданнымНаСервере(КлючСвязи, ЭтоКонтекстныйВызов)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ТаблицаЗапасы", Неопределено);
	ПараметрыПодбора.Вставить("ОстаткиПоГТД", Неопределено);
	ПараметрыПодбора.Вставить("Дата", Объект.Дата);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("ИндексТекущейСтроки", ?(ЗначениеЗаполнено(Элементы.Запасы.ТекущаяСтрока), Объект.Запасы.Индекс(Объект.Запасы.НайтиПоИдентификатору(Элементы.Запасы.ТекущаяСтрока)), 0));
	ПараметрыПодбора.Вставить("КлючСвязи", КлючСвязи);
	
	Если НЕ ЭтоКонтекстныйВызов Тогда
		
		ПараметрыПодбора.Вставить("ПроверятьПометку", Истина);
		
	КонецЕсли;
	
	МассивИменПолей = Новый Массив;
	МассивИменПолей.Добавить("Сумма");
	МассивИменПолей.Добавить("СуммаНДС");
	МассивИменПолей.Добавить("Всего");
	МассивИменПолей.Добавить("СуммаПередачи");
	МассивИменПолей.Добавить("СуммаНДСПередачи");
	МассивИменПолей.Добавить("СуммаВознаграждения");
	МассивИменПолей.Добавить("СуммаНДСВознаграждения");
	ПараметрыПодбора.Вставить("ИменаПолей", МассивИменПолей);
	
	ГрузовыеТаможенныеДекларацииСервер.ПодготовитьТаблицуЗапасовИзТаблицыФормы(ПараметрыПодбора, Объект.Запасы);
	ГрузовыеТаможенныеДекларацииСервер.СформироватьОстаткиПереданныеНомеровГТД(ПараметрыПодбора);
	ГрузовыеТаможенныеДекларацииСервер.ПеренестиОстаткиНомеровГТДВТаблицуФормы(Объект.Запасы, ПараметрыПодбора);
	
	Если ПараметрыПодбора.ИндексТекущейСтроки <> -1 Тогда
		
		СтрокаКоллекции = Объект.Запасы.Получить(ПараметрыПодбора.ИндексТекущейСтроки);
		Элементы.Запасы.ТекущаяСтрока = СтрокаКоллекции.ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НомераГТДПодобратьНаСервере(КлючСвязи, ЭтоКонтекстныйВызов, ИмяТаблицыЗапасы = "Запасы")
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ТаблицаЗапасы", Неопределено);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("КлючСвязи", КлючСвязи);
	
	Если НЕ ЭтоКонтекстныйВызов Тогда
		
		ПараметрыПодбора.Вставить("ПроверятьПометку", Истина);
		
	КонецЕсли;
	
	ГрузовыеТаможенныеДекларацииСервер.ПодготовитьТаблицуЗапасовИзТаблицыФормы(ПараметрыПодбора, Объект[ИмяТаблицыЗапасы]);
	ГрузовыеТаможенныеДекларацииСервер.ПодобратьНомераГТДПоПредыдущимПоступлениям(ПараметрыПодбора);
	ГрузовыеТаможенныеДекларацииСервер.ПеренестиНомераГТДВТаблицуФормы(Объект[ИмяТаблицыЗапасы], ПараметрыПодбора);
	
	// Прослеживаемость
	ОбновитьОтображениеПрослеживаемости(ИмяТаблицыЗапасы);
	// Конец Прослеживаемость
	
КонецПроцедуры

// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
&НаСервере
Процедура ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	ТоварыДобавлены = Ложь;
	Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТовары = Объект.Запасы.Добавить();
		НоваяСтрокаТовары.Номенклатура = СтрокаТаблицы.Номенклатура;
		ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрокаТовары, Объект, "Заказ", "ПоложениеЗаказаПокупателя");
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			НоваяСтрокаТовары.Характеристика = СтрокаТаблицы.Характеристика;
			
		КонецЕсли;
		
		НоваяСтрокаТовары.Цена = СтрокаТаблицы.Цена;
		НоваяСтрокаТовары.Количество = СтрокаТаблицы.Количество;
		
		Если ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения") Тогда
			
			НоваяСтрокаТовары.ЕдиницаИзмерения = СтрокаТаблицы.ЕдиницаИзмерения;
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрокаТовары.Номенклатура) Тогда
			
			НоваяСтрокаТовары.ЕдиницаИзмерения = СтрокаТаблицы.Номенклатура.ЕдиницаИзмерения;
			
		КонецЕсли;
		
		ТоварыДобавлены = Истина;
		
	КонецЦикла;
	
	Если ТоварыДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(АдресЗагруженныхДанных) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных);
	
	Для каждого СтрокаТаблицы Из Объект.Запасы Цикл 
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда
		
		Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда
		
			ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
			ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
			
		ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда
			
			ДлительнаяОперация = ОбработатьПодготовленныеДанныеНоменклатуры(РезультатЗагрузки);
			
			СтруктураПараметров = Новый Структура;
			ПроверитьНеобходимостьПодключенияОбработчикаОжидания(ДлительнаяОперация, СтруктураПараметров);
			
		КонецЕсли;
		
	Иначе
		
		ЗагрузитьИзФайлаЗавершение(РезультатЗагрузки);
		
	КонецЕсли;
	
	ОбновитьКолонкуВсегоНаКлиенте();
	ОбновитьКолонкуВсегоНаКлиенте(, "ПокупателиВозвраты");
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанные(АдресРезультатаЗагрузки)
	
	РезультатЗагрузки = ПолучитьИзВременногоХранилища(АдресРезультатаЗагрузки);
	Если РезультатЗагрузки <> Неопределено Тогда
		
		Если РезультатЗагрузки.НастройкиЗагрузкиДанных.ЗагрузкаШапкиДокумента Тогда
			
			Отбор = Новый Структура("ЭтоВозврат", Ложь);
			ТаблицаПродажи = РезультатЗагрузки.ТаблицаСопоставленияДанных.Скопировать(
				РезультатЗагрузки.ТаблицаСопоставленияДанных.НайтиСтроки(Отбор));
				
			ЗагрузитьРезультатИзФайлаВТабличнуюЧасть(РезультатЗагрузки, ТаблицаПродажи, "Запасы", "Покупатели");
			
			Отбор = Новый Структура("ЭтоВозврат", Истина);
			ТаблицаПродажи = РезультатЗагрузки.ТаблицаСопоставленияДанных.Скопировать(
				РезультатЗагрузки.ТаблицаСопоставленияДанных.НайтиСтроки(Отбор));
				
			ЗагрузитьРезультатИзФайлаВТабличнуюЧасть(РезультатЗагрузки, ТаблицаПродажи, 
				"ЗапасыВозвраты", "ПокупателиВозвраты");
				
			ПараметрыШапки = РезультатЗагрузки.НастройкиЗагрузкиДанных.ПараметрыШапки;
			Если НЕ ЗначениеЗаполнено(Объект.НомерВходящегоДокумента) 
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыШапки, "НомерВходящегоДокумента") Тогда
				Объект.НомерВходящегоДокумента = ПараметрыШапки.НомерВходящегоДокумента;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) 
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыШапки, "ДатаВходящегоДокумента") Тогда
				Объект.ДатаВходящегоДокумента = ПараметрыШапки.ДатаВходящегоДокумента;
			КонецЕсли;
			
		Иначе

			Если РезультатЗагрузки.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения
				= "Документ.ОтчетКомиссионера.ТабличнаяЧасть.Запасы" Тогда
			
				ИмяТабличнойЧасти = "Запасы";
				ИмяТабличнойЧастиПокупатели = "Покупатели";
			
			ИначеЕсли РезультатЗагрузки.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения
				= "Документ.ОтчетКомиссионера.ТабличнаяЧасть.ЗапасыВозвраты" Тогда
			
				ИмяТабличнойЧасти = "ЗапасыВозвраты";
				ИмяТабличнойЧастиПокупатели = "ПокупателиВозвраты";
		
			КонецЕсли;
			
			ЗагрузитьРезультатИзФайлаВТабличнуюЧасть(РезультатЗагрузки, РезультатЗагрузки.ТаблицаСопоставленияДанных, 
				ИмяТабличнойЧасти, ИмяТабличнойЧастиПокупатели);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатИзФайлаВТабличнуюЧасть(РезультатЗагрузки, ТаблицаСопоставленияДанных, 
	ИмяТабличнойЧастиЗапасы, ИмяТабличнойЧастиПокупатели)
	
	ИменаСвойств = "Номенклатура, Количество, ЕдиницаИзмерения, Заказ";
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		ИменаСвойств = ИменаСвойств + ", Характеристика";
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
		ИменаСвойств = ИменаСвойств + ", Партия";
	КонецЕсли;
	ИменаСвойств = ЗагрузкаДанныхИзВнешнегоИсточника.УдалитьНесуществующиеСвойства(
		СтрРазделить(ИменаСвойств, ", "),
		Метаданные.Документы.ОтчетКомиссионера.ТабличныеЧасти[ИмяТабличнойЧастиЗапасы].Реквизиты);

	Попытка

		НачатьТранзакцию();

		Для Каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл

			ЗагрузкаВПриложениеВозможна 
				= СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда

				СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧастиЗапасы].Добавить();

				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТаблицы, ИменаСвойств);

				Если Объект[ИмяТабличнойЧастиПокупатели].Количество() = 0 Тогда

						НоваяСтрока = Объект[ИмяТабличнойЧастиПокупатели].Добавить();
						НоваяСтрока.Покупатель = Объект.Контрагент;

						НоваяСтрока.КлючСвязи = ТабличныеЧастиУНФКлиентСервер.СоздатьНовыйКлючСвязи(ЭтаФорма);

						Элементы[ИмяТабличнойЧастиПокупатели].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
						
						Элементы[ИмяТабличнойЧастиЗапасы].ОтборСтрок 
							= Новый ФиксированнаяСтруктура("КлючСвязи", НоваяСтрока.КлючСвязи);

				КонецЕсли;
					
				СтрокаТабличнойЧасти.КлючСвязи = Элементы[ИмяТабличнойЧастиЗапасы].ОтборСтрок["КлючСвязи"];

				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "Цена_ВходящиеДанные")
					И ЗначениеЗаполнено(СтрокаТаблицы.Цена_ВходящиеДанные) Тогда
					СтрокаТабличнойЧасти.Цена = СтрокаТаблицы.Цена_ВходящиеДанные;
					СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
				ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.Сумма_ВходящиеДанные) Тогда
					СтрокаТабличнойЧасти.Сумма = СтрокаТаблицы.Сумма_ВходящиеДанные;
					СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
				КонецЕсли;

				Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
					
					// расчет сумм и НДС
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "СтавкаНДС")
						И ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
						СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТаблицы.СтавкаНДС;
					Иначе
						СтрокаТабличнойЧасти.СтавкаНДС = ?(ЗначениеЗаполнено(
							СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС), Справочники.СтавкиНДС.СтавкаНДС(
							СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Объект.Дата),
							Объект.Дата, ТекущаяДатаСеанса())), Справочники.СтавкиНДС.СтавкаНДС(
							Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата,
							ТекущаяДатаСеанса())));
					КонецЕсли;

					СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(
						СтрокаТабличнойЧасти.СтавкаНДС);

					СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.Сумма
						- (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100), СтрокаТабличнойЧасти.Сумма
						* СтавкаНДС / 100);

				Иначе

					СтрокаТабличнойЧасти.СтавкаНДС = ?(Объект.НалогообложениеНДС
						= Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС,
						УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС(),
						УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());

					СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(
						СтрокаТабличнойЧасти.СтавкаНДС);

					СтрокаТабличнойЧасти.СуммаНДС = 0;

				КонецЕсли;

				СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0,
					СтрокаТабличнойЧасти.СуммаНДС);

				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "Заказ") Тогда

					СтрокаТабличнойЧасти.ЗаказПокупателя = СтрокаТаблицы.Заказ;

				КонецЕсли;
				
				// Серии номера
				Если ИспользоватьСерииНоменклатурыОстатки <> Неопределено Тогда
					СерииНоменклатурыУНФКлиентСервер.ОбновитьСерииНоменклатурыКоличество(Объект, СтрокаТабличнойЧасти, ,
						"КлючСвязиСерииНоменклатуры");
				КонецЕсли;
				
				// Сумма передачи.
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы,
					"ЦенаПередачи_ВходящиеДанные") И ЗначениеЗаполнено(СтрокаТаблицы.ЦенаПередачи_ВходящиеДанные) Тогда
					СтрокаТабличнойЧасти.ЦенаПередачи = СтрокаТаблицы.ЦенаПередачи_ВходящиеДанные;
					СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи
						* СтрокаТабличнойЧасти.Количество;
				ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.СуммаПередачи_ВходящиеДанные) Тогда
					СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТаблицы.СуммаПередачи_ВходящиеДанные;
					СтрокаТабличнойЧасти.ЦенаПередачи = СтрокаТабличнойЧасти.СуммаПередачи
						/ СтрокаТабличнойЧасти.Количество;
				КонецЕсли;
				
				// Сумма НДС передачи.
				СтрокаТабличнойЧасти.СуммаНДСПередачи = ?(Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаПередачи
					- (СтрокаТабличнойЧасти.СуммаПередачи) / ((СтавкаНДС + 100) / 100),
					СтрокаТабличнойЧасти.СуммаПередачи * СтавкаНДС / 100);
				
				// Сумма вознаграждения.
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы,
					"СуммаВознаграждения_ВходящиеДанные") И ЗначениеЗаполнено(
					СтрокаТаблицы.СуммаВознаграждения_ВходящиеДанные) Тогда
					СтрокаТабличнойЧасти.СуммаВознаграждения = СтрокаТаблицы.СуммаВознаграждения_ВходящиеДанные;
				ИначеЕсли Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение(
					"Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи") Тогда
					СтрокаТабличнойЧасти.СуммаВознаграждения = Объект.ПроцентКомиссионногоВознаграждения
						* СтрокаТабличнойЧасти.Сумма / 100;
				ИначеЕсли Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение(
					"Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления") Тогда
					СтрокаТабличнойЧасти.СуммаВознаграждения = Объект.ПроцентКомиссионногоВознаграждения
						* (СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаПередачи) / 100;
				Иначе
					СтрокаТабличнойЧасти.СуммаВознаграждения = 0;
				КонецЕсли;

				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы,
					"СуммаНДСВознаграждения_ВходящиеДанные") И ЗначениеЗаполнено(
					СтрокаТаблицы.СуммаНДСВознаграждения_ВходящиеДанные) Тогда
					СтрокаТабличнойЧасти.СуммаНДСВознаграждения = СтрокаТаблицы.СуммаНДСВознаграждения_ВходящиеДанные;
				Иначе
					СтрокаТабличнойЧасти.СуммаНДСВознаграждения = ?(Объект.СуммаВключаетНДС,
						СтрокаТабличнойЧасти.СуммаВознаграждения - (СтрокаТабличнойЧасти.СуммаВознаграждения)
						/ ((СтавкаНДС + 100) / 100), СтрокаТабличнойЧасти.СуммаВознаграждения * СтавкаНДС / 100);
				КонецЕсли;
					
				Если ЗначениеЗаполнено(Объект.СпособРаспределенияПоЗаказам) Тогда 
					СтрокаТабличнойЧасти.СпособРаспределения = Объект.СпособРаспределенияПоЗаказам;
				Иначе
					СтрокаТабличнойЧасти.СпособРаспределения = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто;
				КонецЕсли;

				Если СтрокаТабличнойЧасти.СпособРаспределения = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто Тогда
					СтрокаТабличнойЧасти.СуммаНДСПередачи = 0;
					СтрокаТабличнойЧасти.СуммаПередачи = 0;
					СтрокаТабличнойЧасти.ЦенаПередачи = 0;
				КонецЕсли;
				
			КонецЕсли;

		КонецЦикла;

		ЗафиксироватьТранзакцию();

	Исключение

		ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка данных'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОтменитьТранзакцию();

	КонецПопытки;

	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПодготовленныеДанныеНоменклатуры(РезультатЗагрузки)
	
	ПараметрыВызоваСервера = Новый Структура;
	ПараметрыВызоваСервера.Вставить("НастройкиЗагрузкиДанных", РезультатЗагрузки.НастройкиЗагрузкиДанных);
	ПараметрыВызоваСервера.Вставить("ТаблицаСопоставленияДанных", ДанныеФормыВЗначение(РезультатЗагрузки.ТаблицаСопоставленияДанных, Тип("ТаблицаЗначений")));
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Подсистема ЗагрузкаДанныхИзВнешнегоИсточника: Выполнение серверного метода загрузки результата'");
	ПараметрыВыполнения.ЗапуститьНеВФоне    = Ложь;
	ПараметрыВыполнения.ЗапуститьВФоне      = Истина;	
	
	ИмяМетода = "Справочники.Номенклатура.ОбработатьПодготовленныеДанные";
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыВызоваСервера, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ПослеВыполненияФоновогоЗадания(Прогресс, ДополнительныеПараметры) Экспорт
	
	Если НЕ Прогресс = Неопределено Тогда
		ОбработатьПодготовленныеДанные(Прогресс.АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеобходимостьПодключенияОбработчикаОжидания(ДлительнаяОперация, СтруктураПараметров = Неопределено)
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ПослеВыполненияФоновогоЗадания(ДлительнаяОперация, СтруктураПараметров);
		
	Иначе
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеВыполненияФоновогоЗадания", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Идет загрузка данных.'");
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);		
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника

&НаСервереБезКонтекста
Функция ПолучитьНастройкиИзмененияКоличества()
	
	НастройкиКоличества = ДокументыУНФКлиентСервер.ПараметрыСбросаКоличества();
	ДокументыУНФ.ЗаполнитьНастройкиКоличества(НастройкиКоличества);
	Возврат НастройкиКоличества;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

// Процедура-обработчик результата открытия формы "Цены и валюты"
//
&НаКлиенте
Процедура ОткрытьФормуЦеныИВалютаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РезультатЗакрытия.БылиВнесеныИзменения Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Объект.ВидЦен = РезультатЗакрытия.ВидЦен;
	Объект.ВалютаДокумента = РезультатЗакрытия.ВалютаДокумента;
	Объект.Курс = РезультатЗакрытия.КурсРасчетов;
	Объект.Кратность = РезультатЗакрытия.КратностьРасчетов;
	Объект.НалогообложениеНДС = РезультатЗакрытия.НалогообложениеНДС;
	Объект.СуммаВключаетНДС = РезультатЗакрытия.СуммаВключаетНДС;
	Объект.НДСВключатьВСтоимость = РезультатЗакрытия.НДСВключатьВСтоимость;
	
	// Пересчитываем цены по виду цен.
	Если РезультатЗакрытия.ПерезаполнитьЦены Тогда
		ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтотОбъект, "Запасы");
	КонецЕсли;
	
	// Пересчитываем цены по валюте.
	Если Не РезультатЗакрытия.ПерезаполнитьЦены И РезультатЗакрытия.ПересчитатьЦены Тогда
		ЦенообразованиеКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтотОбъект,
			ДополнительныеПараметры.ВалютаРасчетовПередИзменением, "Запасы", РезультатЗакрытия.КурсПересчетаЦен);
	КонецЕсли;
	
	// Пересчитываем сумму если изменился признак Налогообложение НДС.
	Если РезультатЗакрытия.НалогообложениеНДС <> РезультатЗакрытия.ПредНалогообложениеНДС Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	КонецЕсли;
	
	// Пересчитываем сумму если изменился признак "Сумма включает НДС".
	Если Не РезультатЗакрытия.ПерезаполнитьЦены
		И Не РезультатЗакрытия.СуммаВключаетНДС = РезультатЗакрытия.ПредСуммаВключаетНДС Тогда
		
		ЦенообразованиеКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтотОбъект, "Запасы");
		
	КонецЕсли;
	
	// Сумма вознаграждения.
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
		
		СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
			СтрокаТабличнойЧасти.СуммаРасчетов,
			СтрокаТабличнойЧасти.Курс,
			?(Объект.ВалютаДокумента = НациональнаяВалюта,
				КурсНациональнаяВалюта,
				Объект.Курс),
			СтрокаТабличнойЧасти.Кратность,
			?(Объект.ВалютаДокумента = НациональнаяВалюта,
				КратностьНациональнаяВалюта,
				Объект.Кратность));
			
	КонецЦикла;
	
	ОбновитьКолонкуВсегоНаКлиенте(Истина);
	
	Для каждого СтрокаТабличнойЧасти Из Объект.ЗапасыВозвраты Цикл
		РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ОтчетКомиссионера) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
		СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс,
		?(Объект.ВалютаДокумента = НациональнаяВалюта,
			КурсНациональнаяВалюта,
			Объект.Курс),
			СтрокаТабличнойЧасти.Кратность,
		?(Объект.ВалютаДокумента = НациональнаяВалюта,
			КратностьНациональнаяВалюта,
			Объект.Кратность));
		
	КонецЦикла;
	
	ОбновитьКолонкуВсегоНаКлиенте(Истина, "ПокупателиВозвраты");
	
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	
КонецПроцедуры // ОткрытьФормуЦеныИВалютаЗавершение()

// Процедура-обработчик ответа на вопрос о повторном зачете авансов
//
&НаКлиенте
Процедура ОпределитьНеобходимостьОбновитьЗачетыАванса(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		
		Объект.Предоплата.Очистить();
		
	Иначе
		
		Объект.Договор = ДополнительныеПараметры.ДоговорПередИзменением;
		Договор = ДополнительныеПараметры.ДоговорПередИзменением;
		
		Если ДополнительныеПараметры.Свойство("КонтрагентПередИзменением") Тогда
			
			Контрагент = ДополнительныеПараметры.КонтрагентПередИзменением;
			КонтрагентВестиРасчетыПоЗаказам = ДополнительныеПараметры.КонтрагентВестиРасчетыПоЗаказамПередИзменением;
			Объект.Контрагент = ДополнительныеПараметры.КонтрагентПередИзменением;
			Элементы.Договор.Видимость = ДополнительныеПараметры.ВидимостьДоговораПередИзменением;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьНеобходимостьОбновитьЗачетАванса()

// Процедура-обработчик ответа на вопрос о пересчете документа по данным договора
//
&НаКлиенте
Процедура ОпределитьНеобходимостьПересчетаДокументаПоУсловиямДоговора(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтаФорма, "Запасы");
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьНеобходимостьПересчетаДокументаПоУсловиямДоговора()

#КонецОбласти

#Область РаботаСПодбором

// Процедура - обработчик события Действие команды Подбор
//
&НаКлиенте
Процедура Подбор(Команда)
	
	ИмяТабличнойЧасти = "Покупатели";
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтаФорма, "Запасы") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТабличнойЧасти	= "Запасы";
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти);
	
КонецПроцедуры // Подбор() 

// Процедура - обработчик события Действие команды Подбор
//
&НаКлиенте
Процедура ПодборВозвраты(Команда)
	
	ИмяТабличнойЧасти = "ПокупателиВозвраты";
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтаФорма, "ЗапасыВозвраты") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТабличнойЧасти	= "ЗапасыВозвраты";
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти);
	
КонецПроцедуры // Подбор()


// Процедура - обработчик события Действие команды Подбор по остаткам.
//
&НаКлиенте
Процедура ПодборПоОстаткам(Команда)
	
	ИмяТабличнойЧасти = "Покупатели";
	
	Отказ = Ложь;
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтотОбъект, "Запасы") Тогда
		Отказ = Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Организация"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Организация", , Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Контрагент"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Контрагент", , Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Договор) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Договор"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Договор", , Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТабличнойЧасти = "Запасы";
	
	ПараметрыПодбора = Новый Структура();
	ПараметрыПодбора.Вставить("Организация", Компания);
	ПараметрыПодбора.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыПодбора.Вставить("Договор", Объект.Договор);
	ПараметрыПодбора.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("ДатаДокумента", Объект.Дата);
	ПараметрыПодбора.Вставить("Проведен", Объект.Проведен);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	
	ОткрытьФорму("Документ.ОтчетКомиссионера.Форма.ФормаПодбораПоОстаткам", ПараметрыПодбора, ЭтотОбъект);
	
	СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", Элементы[ИмяТабличнойЧасти].ОтборСтрок["КлючСвязи"]);
	Элементы[ИмяТабличнойЧасти].ОтборСтрок = СтрОтбора;
	
КонецПроцедуры // ПодборПоОстаткам()

&НаКлиенте
Процедура ПодборПродажи(Команда)
	
	ТекущиеДанныеПокупатели = Элементы.Покупатели.ТекущиеДанные;
	
	ОтчетКомиссионера = Неопределено;
	Если Не ТекущиеДанныеПокупатели = Неопределено Тогда
		ОтчетКомиссионера = ТекущиеДанныеПокупатели.ОтчетКомиссионера;
	КонецЕсли;
		
	ИмяТабличнойЧасти = "Покупатели";
	Отказ = Ложь;
	
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтотОбъект, "Запасы") Тогда
		Отказ = Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Организация"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Организация", , Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Контрагент"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Контрагент", , Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТабличнойЧасти = "Запасы";
	
	ПараметрыПодбора = Новый Структура();
	ПараметрыПодбора.Вставить("Организация", Компания);
	ПараметрыПодбора.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыПодбора.Вставить("Договор", Объект.Договор);
	ПараметрыПодбора.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("ДатаДокумента", Объект.Дата);
	ПараметрыПодбора.Вставить("Проведен", Объект.Проведен);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("ВидОперации", Объект.ВидОперации);
	ПараметрыПодбора.Вставить("ОтчетКомиссионера", ОтчетКомиссионера);
	ПараметрыПодбора.Вставить("НеПоказыватьЗаказ", НеУчитыватьЗаказыПриПередачеНаКомиссию);
	
	ОткрытьФорму("Документ.ОтчетКомиссионера.Форма.ФормаПодбораПоОстаткам", ПараметрыПодбора, ЭтаФорма);
	
	СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", Элементы[ИмяТабличнойЧасти].ОтборСтрок["КлючСвязи"]);
	Элементы[ИмяТабличнойЧасти].ОтборСтрок = СтрОтбора;
КонецПроцедуры

&НаКлиенте
Процедура ПодборПродажиВозвраты(Команда)
	
	ТекущиеДанныеПокупатели = Элементы.ПокупателиВозвраты.ТекущиеДанные;
	
	ОтчетКомиссионера = Неопределено;
	Если Не ТекущиеДанныеПокупатели = Неопределено Тогда
		ОтчетКомиссионера = ТекущиеДанныеПокупатели.ОтчетКомиссионера;
	КонецЕсли;
		
	ИмяТабличнойЧасти = "ПокупателиВозвраты";
	Отказ = Ложь;
	
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтотОбъект, "ЗапасыВозвраты") Тогда
		Отказ = Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Организация"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Организация", , Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Контрагент"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Контрагент", , Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТабличнойЧасти = "ЗапасыВозвраты";
	
	ПараметрыПодбора = Новый Структура();
	ПараметрыПодбора.Вставить("Организация", Компания);
	ПараметрыПодбора.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыПодбора.Вставить("Договор", Объект.Договор);
	ПараметрыПодбора.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("ДатаДокумента", Объект.Дата);
	ПараметрыПодбора.Вставить("Проведен", Объект.Проведен);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("ВидОперации", Объект.ВидОперации);
	ПараметрыПодбора.Вставить("ОтчетКомиссионера", ОтчетКомиссионера);
	ПараметрыПодбора.Вставить("НеПоказыватьЗаказ", НеУчитыватьЗаказыПриПередачеНаКомиссию);
	ПараметрыПодбора.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
	
	ОткрытьФорму("Документ.ОтчетКомиссионера.Форма.ФормаПодбораПоОстаткам", ПараметрыПодбора, ЭтаФорма);
	
	СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", Элементы[ИмяТабличнойЧасти].ОтборСтрок["КлючСвязи"]);
	Элементы[ИмяТабличнойЧасти].ОтборСтрок = СтрОтбора;
КонецПроцедуры

// Функция получает список товаров из временного хранилища
//
&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		Если НоваяСтрока.Свойство("Пометка") Тогда
			НоваяСтрока.Пометка = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.СпособРаспределенияПоЗаказам) Тогда 
			НоваяСтрока.СпособРаспределения = Объект.СпособРаспределенияПоЗаказам;
		Иначе
			НоваяСтрока.СпособРаспределения = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто;
		КонецЕсли;
		
		Если НоваяСтрока.СпособРаспределения = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную Тогда
			НоваяСтрока.ЦенаПередачи = НоваяСтрока.Цена;
			НоваяСтрока.СуммаПередачи = НоваяСтрока.Сумма;
			НоваяСтрока.СуммаНДСПередачи = НоваяСтрока.СуммаНДС;
		КонецЕсли;
		
		НоваяСтрока.КлючСвязи = Элементы[ИмяТабличнойЧасти].ОтборСтрок["КлючСвязи"];
		
		// Характеристики 
		СтруктураДанныеНоменклатуры = Новый Структура();
		СтруктураДанныеНоменклатуры.Вставить("Номенклатура", СтрокаЗагрузки.Номенклатура);
		СтруктураДанныеНоменклатуры.Вставить("Характеристика", СтрокаЗагрузки.Характеристика);
		СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
		СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
		
		СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанныеНоменклатуры);
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
		
		НоваяСтрока.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
		НоваяСтрока.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
		НоваяСтрока.ЗаполнениеХарактеристикиПроверено = Истина;
		
		Если СтруктураДанные.ИспользоватьХарактеристики
			Тогда
			НоваяСтрока.Характеристика = СтруктураДанные.Характеристика;
		КонецЕсли;
		// Конец Характеристики
		
		//Партии
		НоваяСтрока.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
		НоваяСтрока.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
		
		НоваяСтрока.Партия = ?(ЗначениеЗаполнено(СтрокаЗагрузки.Партия), СтрокаЗагрузки.Партия, СтруктураДанные.Партия);
		// Конец Партии
		
		НоваяСтрока.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
		ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект[ИмяТабличнойЧасти], НоваяСтрока, "КлючСвязиСерииНоменклатуры");
		
		НоваяСтрока.СтранаПроисхождения	= СтруктураДанные.СтранаПроисхождения;
		НоваяСтрока.НомерГТД			= СтруктураДанные.НомерГТД;
		
		// Прослеживаемость
		НоваяСтрока.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
		Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров И ПрослеживаемаяОперация(Объект.ВидОперации) Тогда
			НоваяСтрока.ПрослеживаемыйТовар = СтруктураДанные.ПрослеживаемыйТовар;
			НоваяСтрока.ПрослеживаемыйКомплект = СтруктураДанные.ПрослеживаемыйКомплект;
			
			ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, НоваяСтрока);
		
			НоваяСтрока.КодТНВЭД = СтруктураДанные.ТоварнаяНоменклатураВЭД;
		Иначе
			НоваяСтрока.ПрослеживаемыйТовар = Ложь;
			НоваяСтрока.ПрослеживаемыйКомплект = Ложь;
		КонецЕсли;
		Если НЕ НоваяСтрока.ПрослеживаемыйТовар Тогда
			НоваяСтрока.НомерГТД = СтруктураДанные.НомерГТД;
		Иначе
			НоваяСтрока.НомерГТД = Неопределено;
		КонецЕсли; 
		// Конец Прослеживаемость
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

// Функция получает список запасов переданных из временного хранилища
//
&НаСервере
Процедура ПолучитьЗапасыПереданныеИзХранилища(АдресЗапасовПереданныхВХранилище)
	
	ЗапасыПереданные = ПолучитьИзВременногоХранилища(АдресЗапасовПереданныхВХранилище);
	
	КлючСвязи = Элементы[ИмяТабличнойЧасти].ОтборСтрок["КлючСвязи"];
	
	ИмяТабличнойЧастиПокупатели = ?(ИмяТабличнойЧасти = "ЗапасыВозвраты", "ПокупателиВозвраты", "Покупатели");
	
	ПараметрыПоиска = Новый Структура("КлючСвязи", КлючСвязи); 
	ТекущаяСтрокаПокупатели = Объект[ИмяТабличнойЧастиПокупатели].НайтиСтроки(ПараметрыПоиска);
	
	ПараметрыПоискаОтчетКомиссионера = Новый Структура("ОтчетКомиссионера", );
	
	ОтчетТекущейСтрокиВыбран = Ложь;
	ОтчетИсходнойСтроки = Неопределено;
	
	Если ТекущаяСтрокаПокупатели.Количество() Тогда
		ИсходнаяСтрокаПокупатели = ТекущаяСтрокаПокупатели[0];
		ОтчетИсходнойСтроки = ИсходнаяСтрокаПокупатели.ОтчетКомиссионера;
		ОтчетТекущейСтрокиВыбран = ЗначениеЗаполнено(ОтчетИсходнойСтроки);
	КонецЕсли;
	
	ЕстьКолонкаОтчетКомиссионера = НЕ ЗапасыПереданные.Колонки.Найти("ОтчетКомиссионера") = Неопределено;
	
	ЕстьКолонкаСЦеной = Не ЗапасыПереданные.Колонки.Найти("Цена") = Неопределено;
	
	Для каждого СтрокаТабличнойЧасти Из ЗапасыПереданные Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
		СтруктураДанные.Вставить("Характеристика",	 СтрокаТабличнойЧасти.Характеристика);
		СтруктураДанные.Вставить("Партия",	 СтрокаТабличнойЧасти.Партия);
		
		Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
			СтруктураДанные.Вставить("ВидЦен",			 Объект.ВидЦен);
			СтруктураДанные.Вставить("ВалютаДокумента",	 Объект.ВалютаДокумента);
			СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
			СтруктураДанные.Вставить("Коэффициент",		 1);
		КонецЕсли;
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		НоваяСтрока.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		НоваяСтрока.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		НоваяСтрока.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах Или ИмяТабличнойЧасти = "ЗапасыВозвраты" Тогда 
			Если ЕстьКолонкаСЦеной И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Цена)
				Тогда
				НоваяСтрока.Цена = СтрокаТабличнойЧасти.Цена;
			Иначе
				НоваяСтрока.Цена = СтруктураДанные.Цена;
			КонецЕсли;
			
			НоваяСтрока.СуммаПередачи = СтрокаТабличнойЧасти.СуммаРасчетов;
						
		Иначе
			НоваяСтрока.Цена = СтруктураДанные.Цена;
			НоваяСтрока.СуммаПередачи = СтрокаТабличнойЧасти.СуммаРасчетов;
		КонецЕсли;
		
		НоваяСтрока.ЦенаПередачи = НоваяСтрока.СуммаПередачи / НоваяСтрока.Количество;
		
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
		НоваяСтрока.СуммаНДСПередачи = ?(Объект.СуммаВключаетНДС,
										НоваяСтрока.СуммаПередачи - (НоваяСтрока.СуммаПередачи) / ((СтавкаНДС + 100) / 100),
										НоваяСтрока.СуммаПередачи * СтавкаНДС / 100);
										
		Если ЗначениеЗаполнено(Объект.СпособРаспределенияПоЗаказам) Тогда 
			НоваяСтрока.СпособРаспределения = Объект.СпособРаспределенияПоЗаказам;
		Иначе
			НоваяСтрока.СпособРаспределения = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто;
		КонецЕсли;
		
		Если НоваяСтрока.СпособРаспределения = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто Тогда
			НоваяСтрока.ЦенаПередачи = 0;
			НоваяСтрока.СуммаПередачи = 0;
			НоваяСтрока.СуммаНДСПередачи = 0;
			НоваяСтрока.ЗаказПокупателя = Неопределено;
		КонецЕсли;
		
		Если ЕстьКолонкаОтчетКомиссионера Тогда
			
			Если Не ОтчетТекущейСтрокиВыбран Тогда
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ОтчетКомиссионера) Тогда
					ИсходнаяСтрокаПокупатели.ОтчетКомиссионера = СтрокаТабличнойЧасти.ОтчетКомиссионера;
					ОтчетИсходнойСтроки = ИсходнаяСтрокаПокупатели.ОтчетКомиссионера;
					ОтчетТекущейСтрокиВыбран = Истина;
				КонецЕсли;
				НоваяСтрока.КлючСвязи = КлючСвязи;
			ИначеЕсли ОтчетТекущейСтрокиВыбран И Не СтрокаТабличнойЧасти.ОтчетКомиссионера = ОтчетИсходнойСтроки Тогда
				
				ПараметрыПоискаОтчетКомиссионера.ОтчетКомиссионера = СтрокаТабличнойЧасти.ОтчетКомиссионера;
				НайденнаяСтрокаПокупатели = Объект[ИмяТабличнойЧастиПокупатели].НайтиСтроки(ПараметрыПоискаОтчетКомиссионера);
				
				Если НайденнаяСтрокаПокупатели.Количество() Тогда
					НоваяСтрока.КлючСвязи = НайденнаяСтрокаПокупатели[0].КлючСвязи;
				Иначе
					НоваяСтрокаПокупатели = Объект[ИмяТабличнойЧастиПокупатели].Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПокупатели, ИсходнаяСтрокаПокупатели);
					НоваяСтрокаПокупатели.ОтчетКомиссионера = СтрокаТабличнойЧасти.ОтчетКомиссионера;
					ИмяТабличнойЧасти = ИмяТабличнойЧастиПокупатели;
					НоваяСтрокаПокупатели.КлючСвязи = ТабличныеЧастиУНФКлиентСервер.СоздатьНовыйКлючСвязи(ЭтаФорма);
					НоваяСтрока.КлючСвязи = НоваяСтрокаПокупатели.КлючСвязи;
				КонецЕсли;
			Иначе
				НоваяСтрока.КлючСвязи = КлючСвязи;
			КонецЕсли;
		Иначе
			НоваяСтрока.КлючСвязи = КлючСвязи;
		КонецЕсли;
		
		РаботаСКомиссионерамиКомитентамиСервер.РассчитатьСуммуВСтрокеТабличнойЧастиЗапасыОтчетКомиссионера(Объект, ИспользоватьСерииНоменклатурыОстатки, НоваяСтрока);
		РаботаСКомиссионерамиКомитентамиСервер.РассчитатьКомиссионноеВознаграждениеЗапасыОтчетКомиссионера(Объект, НоваяСтрока);
		
		// Прослеживаемость
		НоваяСтрока.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
		Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров И ПрослеживаемаяОперация(Объект.ВидОперации) Тогда
			НоваяСтрока.ПрослеживаемыйТовар = СтруктураДанные.ПрослеживаемыйТовар;
			НоваяСтрока.ПрослеживаемыйКомплект = СтруктураДанные.ПрослеживаемыйКомплект;
			ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, НоваяСтрока);
			НоваяСтрока.КодТНВЭД = СтруктураДанные.ТоварнаяНоменклатураВЭД;
		Иначе
			НоваяСтрока.ПрослеживаемыйТовар = Ложь;
			НоваяСтрока.ПрослеживаемыйКомплект = Ложь;
		КонецЕсли;
		Если НЕ НоваяСтрока.ПрослеживаемыйТовар Тогда
			НоваяСтрока.НомерГТД = СтруктураДанные.НомерГТД;
		Иначе
			НоваяСтрока.НомерГТД = Неопределено;
		КонецЕсли; 
		// Конец Прослеживаемость
		
	КонецЦикла;
	
	Если Не ЕстьКолонкаОтчетКомиссионера Тогда
		КлючСвязи = Элементы[ИмяТабличнойЧастиПокупатели].ОтборСтрок["КлючСвязи"];
		НомераГТДПодобратьПоПереданнымНаСервере(КлючСвязи, Истина);
	Иначе
		Для Каждого СтрокаПокупатели Из Объект[ИмяТабличнойЧастиПокупатели] Цикл
			НомераГТДПодобратьПоПереданнымНаСервере(СтрокаПокупатели.КлючСвязи, Истина);
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры // ПолучитьЗапасыПереданныеИзХранилища()

// Функция помещает список авансов во временное хранилище и возвращает адрес
//
&НаСервере
Функция ПоместитьПредоплатаВХранилище()
	
	ОтборСтрок = Новый Структура("ВидЗачетаПредоплаты", Перечисления.ВидыЗачетаПредоплаты.Продажа);
	СтрокиДляВыгрузки = Объект.Предоплата.НайтиСтроки(ОтборСтрок);
	
	Возврат ПоместитьВоВременноеХранилище(
		Объект.Предоплата.Выгрузить(СтрокиДляВыгрузки,
			"Документ,
			|Заказ,
			|СуммаРасчетов,
			|Курс,
			|Кратность,
			|СуммаПлатежа"),
		УникальныйИдентификатор);
	
КонецФункции // ПоместитьПредоплатаВХранилище()

// Функция получает список авансов из временного хранилища
//
&НаСервере
Процедура ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище)
	
	ОтборСтрок = Новый Структура("ВидЗачетаПредоплаты", Перечисления.ВидыЗачетаПредоплаты.Возврат);
	ДанныеПоВозвратам = Объект.Предоплата.НайтиСтроки(ОтборСтрок);
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресПредоплатаВХранилище);
	Объект.Предоплата.Загрузить(ТаблицаДляЗагрузки);
	
	Для Каждого СтрокаПредоплата Из Объект.Предоплата Цикл
		СтрокаПредоплата.ВидЗачетаПредоплаты = Перечисления.ВидыЗачетаПредоплаты.Продажа;
	КонецЦикла;
	
	Для Каждого СтрокаВозврата Из ДанныеПоВозвратам Цикл
		НоваяСтрока = Объект.Предоплата.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВозврата);
	КонецЦикла;
	
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента);
	
КонецПроцедуры // ПолучитьПредоплатаИзХранилища()

#КонецОбласти

#Область УправлениеВнешнимВидомФормы

// Процедура устанавливает доступность элементов формы.
//
// Параметры:
//  Нет.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьИДоступность(Форма)
	
	Если Форма.ТолькоПросмотр Тогда
		Форма.Элементы.ВидОперации.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Форма.Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") Тогда
		Форма.Объект.ПроцентКомиссионногоВознаграждения = 0;
		Форма.Элементы.ПроцентКомиссионногоВознаграждения.Доступность = Ложь;
	Иначе
		Форма.Элементы.ПроцентКомиссионногоВознаграждения.Доступность = Истина;
	КонецЕсли;
	
	Если Форма.Объект.ИспользоватьНовыйВидДокумента Тогда
		
		Если Форма.Объект.НаВозвратыВыставляетсяКорректировочныйСчетФактура Тогда
			Форма.Элементы.ГруппаПолученныеОтКомиссионераВозвраты.ОтображатьВШапке = Истина;
			Форма.Элементы.ВозвратыКСчетамФактурамКомиссионераВозвраты.Видимость = Истина;
			Форма.Элементы.ПокупателиВозвратыДатаСФ.Заголовок = НСтр("ru = 'Дата'");
			Форма.Элементы.ПокупателиВозвратыНомерСФ.Заголовок = НСтр("ru = 'Номер'");

			Форма.Элементы.ЗаголовокСчетФактураВозвраты.ОтображатьВШапке = Истина;
			Форма.Элементы.ПокупателиВозвратыВыставленСФ.ОтображатьВШапке = Ложь;
			Форма.Элементы.ЗаголовокСчетФактураВозвраты.Заголовок = НСтр("ru = 'Корректировочный счет-фактура'");
			Форма.Элементы.ГруппаПояснениеВозвраты.Видимость = Истина;
			Форма.Элементы.ВозвратыВыставленныеКомиссионеруВозвраты.ОтображатьВШапке = Истина;
			Форма.Элементы.ПокупателиВозвратыПредставлениеСчетаФактуры.ОтображатьВШапке = Ложь;
			Форма.Элементы.ПокупателиВозвратыПодборСчетовФактур.Видимость = Истина;
			
		Иначе
			Форма.Элементы.ПокупателиВозвратыДатаСФ.Заголовок = НСтр("ru = 'Дата вх. СФ'");
			Форма.Элементы.ПокупателиВозвратыНомерСФ.Заголовок = НСтр("ru = 'Номер вх. СФ'");
			Форма.Элементы.ГруппаПолученныеОтКомиссионераВозвраты.ОтображатьВШапке = Ложь;
			Форма.Элементы.ВозвратыКСчетамФактурамКомиссионераВозвраты.Видимость = Ложь;
			
			Форма.Элементы.ЗаголовокСчетФактураВозвраты.ОтображатьВШапке = Ложь;
			Форма.Элементы.ПокупателиВозвратыВыставленСФ.ОтображатьВШапке = Истина;
			Форма.Элементы.ЗаголовокСчетФактураВозвраты.Заголовок = НСтр("ru = 'Счет-фактура'");
			Форма.Элементы.ГруппаПояснениеВозвраты.Видимость = Ложь;
			
			Форма.Элементы.ВозвратыВыставленныеКомиссионеруВозвраты.ОтображатьВШапке = Ложь;
			Форма.Элементы.ПокупателиВозвратыПредставлениеСчетаФактуры.ОтображатьВШапке = Истина;
			Форма.Элементы.ПокупателиВозвратыПодборСчетовФактур.Видимость = Ложь;
			
		КонецЕсли;
		
		Форма.Элементы.ГруппаСсылки.Видимость = Не (Форма.Элементы.Страницы.ТекущаяСтраница.Имя = "ГруппаЗапасыВозвраты" 
		Или Форма.Элементы.Страницы.ТекущаяСтраница.Имя = "ГруппаДополнительно");
		
		Форма.Элементы.Итоги.Видимость = Форма.Элементы.Страницы.ТекущаяСтраница.Имя = "ГруппаЗапасы" 
		Или Форма.Элементы.Страницы.ТекущаяСтраница.Имя = "ГруппаГлавное";
		
		Форма.Элементы.ГруппаВсегоВозвраты.Видимость = Форма.Элементы.Страницы.ТекущаяСтраница.Имя = "ГруппаЗапасыВозвраты" 
		Или Форма.Элементы.Страницы.ТекущаяСтраница.Имя = "ГруппаГлавное";
		
		Форма.Элементы.ВидОперации.Видимость = Ложь;
		
		Форма.Элементы.ПокупателиВозвратыОтчетКомиссионера.Видимость = Истина;
		
		Форма.Элементы.ПокупателиВозвратыСчетФактура.Видимость = Ложь;
		
		Форма.Элементы.ПокупателиВозвратыНомерСФ.Видимость = Истина;
		Форма.Элементы.ВозвратыВыставленныеКомиссионеруВозвраты.Видимость = Истина;
		
		//
		Форма.Элементы.ЗапасыПодобратьВозвраты.Видимость = Ложь;
		Форма.Элементы.ЗапасыПодобрать.Видимость = Истина;
		
		Форма.Элементы.ЗаполнитьПоОстаткам.Видимость = Истина;
		Форма.Элементы.РаспределитьПоЗаказам.Видимость = Истина;
		
		Форма.Элементы.ГруппаРаботаСНомерамиГТД.Видимость = Истина;
		Форма.Элементы.ПокупателиОтчетКомиссионера.Видимость = Ложь;
		
		Форма.Элементы.ПредоплатаРедактироватьЗачетПредоплаты.Видимость = Истина;
		Форма.Элементы.СчетФактураНадпись.Видимость = Истина;
		Форма.Элементы.ПокупателиСчетФактура.Видимость = Истина;
		
		Форма.Элементы.ПокупателиНомерСФ.Видимость = Истина;
		Форма.Элементы.ВозвратыВыставленныеКомиссионеру.Видимость = Ложь;
		Форма.Элементы.ГруппаПолученныеОтКомиссионера.ОтображатьВШапке = Истина;
		Форма.Элементы.ВозвратыКСчетамФактурамКомиссионера.Видимость = Ложь;
		
		Форма.Элементы.ПокупателиВыставленСФ.ОтображатьВШапке = Истина;
		Форма.Элементы.ЗаголовокСчетФактура.ОтображатьВШапке = Ложь;
		
		Форма.Элементы.ПокупателиДатаСФ.Заголовок = НСтр("ru = 'Дата'");
		Форма.Элементы.ПокупателиНомерСФ.Заголовок = НСтр("ru = 'Номер'");
		Форма.Элементы.ГруппаПояснение.Видимость = Ложь;
		
		Иначе
			
			Форма.Элементы.ГруппаВсегоВозвраты.Видимость = Ложь;
			Форма.Элементы.ГруппаЗапасыВозвраты.Видимость = Ложь;
			Форма.Элементы.ПредоплатаВидЗачетаПредоплаты.Видимость = Ложь;
			
	Если Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах") Тогда
		
		Форма.Элементы.ЗапасыПодобратьВозвраты.Видимость = Истина;
		Форма.Элементы.ЗапасыПодобрать.Видимость = Ложь;
		
		Форма.Элементы.ЗаполнитьПоОстаткам.Видимость = Ложь;
		Форма.Элементы.РаспределитьПоЗаказам.Видимость = Ложь;
		
		Форма.Элементы.ГруппаРаботаСНомерамиГТД.Видимость = Ложь;
		Форма.Элементы.ПокупателиОтчетКомиссионера.Видимость = Истина;
		Форма.Элементы.ПредоплатаОтчетКомиссионера.Видимость = Истина;
		
		Форма.Элементы.ПредоплатаРедактироватьЗачетПредоплаты.Видимость = Ложь;
		Форма.Элементы.СчетФактураНадпись.Видимость = Ложь;
		Форма.Элементы.ПокупателиСчетФактура.Видимость = Ложь;
		
		Форма.Элементы.ГруппаРегистрацияСчетФактур.Видимость = Истина;
		Форма.Элементы.ПокупателиНомерСФ.Видимость = Истина;
		Форма.Элементы.ВозвратыВыставленныеКомиссионеру.Видимость = Истина;
		
		Если Форма.Объект.НаВозвратыВыставляетсяКорректировочныйСчетФактура Тогда
			Форма.Элементы.ГруппаПолученныеОтКомиссионера.ОтображатьВШапке = Истина;
			Форма.Элементы.ВозвратыКСчетамФактурамКомиссионера.Видимость = Истина;
			Форма.Элементы.ПокупателиДатаСФ.Заголовок = НСтр("ru = 'Дата'");
			Форма.Элементы.ПокупателиНомерСФ.Заголовок = НСтр("ru = 'Номер'");

			Форма.Элементы.ЗаголовокСчетФактура.ОтображатьВШапке = Истина;
			Форма.Элементы.ПокупателиВыставленСФ.ОтображатьВШапке = Ложь;
			Форма.Элементы.ЗаголовокСчетФактура.Заголовок = НСтр("ru = 'Корректировочный счет-фактура'");
			Форма.Элементы.ГруппаПояснение.Видимость = Истина;
			Форма.Элементы.ВозвратыВыставленныеКомиссионеру.ОтображатьВШапке = Истина;
			Форма.Элементы.ПокупателиПредставлениеСчетаФактуры.ОтображатьВШапке = Ложь;
			Форма.Элементы.ПокупателиПодборСчетовФактур.Видимость = Истина;
			
		Иначе
			Форма.Элементы.ПокупателиДатаСФ.Заголовок = НСтр("ru = 'Дата вх. СФ'");
			Форма.Элементы.ПокупателиНомерСФ.Заголовок = НСтр("ru = 'Номер вх. СФ'");
			Форма.Элементы.ГруппаПолученныеОтКомиссионера.ОтображатьВШапке = Ложь;
			Форма.Элементы.ВозвратыКСчетамФактурамКомиссионера.Видимость = Ложь;
			
			Форма.Элементы.ЗаголовокСчетФактура.ОтображатьВШапке = Ложь;
			Форма.Элементы.ПокупателиВыставленСФ.ОтображатьВШапке = Истина;
			Форма.Элементы.ЗаголовокСчетФактура.Заголовок = НСтр("ru = 'Счет-фактура'");
			Форма.Элементы.ГруппаПояснение.Видимость = Ложь;
			
			Форма.Элементы.ВозвратыВыставленныеКомиссионеру.ОтображатьВШапке = Ложь;
			Форма.Элементы.ПокупателиПредставлениеСчетаФактуры.ОтображатьВШапке = Истина;
			Форма.Элементы.ПокупателиПодборСчетовФактур.Видимость = Ложь;
			
		КонецЕсли;

		
		Форма.Элементы.ЗапасыЦена.Заголовок = НСтр("ru = 'Цена в отчете'");
		Форма.Элементы.ЗапасыСумма.Заголовок = НСтр("ru = 'Сумма в отчете'");
		Форма.Элементы.ЗапасыСуммаНДС.Заголовок = НСтр("ru = 'Сумма НДС в отчете'");
		
	Иначе
		
		Форма.Элементы.ЗапасыПодобратьВозвраты.Видимость = Ложь;
		Форма.Элементы.ЗапасыПодобрать.Видимость = Истина;
		
		Форма.Элементы.ЗаполнитьПоОстаткам.Видимость = Истина;
		Форма.Элементы.РаспределитьПоЗаказам.Видимость = Истина;
		
		Форма.Элементы.ГруппаРаботаСНомерамиГТД.Видимость = Истина;
		Форма.Элементы.ПокупателиОтчетКомиссионера.Видимость = Ложь;
		Форма.Элементы.ПредоплатаОтчетКомиссионера.Видимость = Ложь;
		
		Форма.Элементы.ПредоплатаРедактироватьЗачетПредоплаты.Видимость = Истина;
		Форма.Элементы.СчетФактураНадпись.Видимость = Истина;
		Форма.Элементы.ПокупателиСчетФактура.Видимость = Истина;
		
		Форма.Элементы.ГруппаРегистрацияСчетФактур.Видимость = Ложь;
		Форма.Элементы.ПокупателиНомерСФ.Видимость = Ложь;
		Форма.Элементы.ВозвратыВыставленныеКомиссионеру.Видимость = Ложь;
		Форма.Элементы.ГруппаПолученныеОтКомиссионера.ОтображатьВШапке = Ложь;
		Форма.Элементы.ВозвратыКСчетамФактурамКомиссионера.Видимость = Ложь;
		
		Форма.Элементы.ПокупателиВыставленСФ.ОтображатьВШапке = Истина;
		Форма.Элементы.ЗаголовокСчетФактура.ОтображатьВШапке = Ложь;
		
		Форма.Элементы.ПокупателиДатаСФ.Заголовок = НСтр("ru = 'Дата СФ'");
		Форма.Элементы.ГруппаПояснение.Видимость = Ложь;
		
		Форма.Элементы.ЗапасыЦена.Заголовок = НСтр("ru = 'Цена'");
		Форма.Элементы.ЗапасыСумма.Заголовок = НСтр("ru = 'Сумма'");
		Форма.Элементы.ЗапасыСуммаНДС.Заголовок = НСтр("ru = 'Сумма НДС'");
		
	КонецЕсли;
	
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ГруппаСчетФактураНомерДата", "Видимость"
	, Форма.Элементы.СчетФактураНадпись.Видимость И Не ЗначениеЗаполнено(Форма.КэшЗначений.СчетФактураСсылка));
	
	Форма.Элементы.ЗапасыЗаказПокупателя.Видимость = Не Форма.НеУчитыватьЗаказыПриПередачеНаКомиссию;
	Форма.Элементы.ПредоплатаЗаказ.Видимость = Не Форма.НеУчитыватьЗаказыПриПередачеНаКомиссию;
	
	Форма.Элементы.ГруппаИнформацияПоНовойСхеме.Видимость = Форма.ПоказыватьИнформациюПоНовойСхемеДвижений;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "НоменклатураДляОтраженияСуммыБезВознаграждения", "Видимость", Форма.Объект.УдержатьКомиссионноеВознаграждение);
	
	// Прослеживаемость
	ПрослеживаемостьФормыКлиентСерверУНФ.НастроитьВидимостьКолонокРНПТ(Форма, , , ПрослеживаемаяОперация(Форма.Объект.ВидОперации));
	ПрослеживаемостьФормыКлиентСерверУНФ.НастроитьВидимостьКолонокРНПТ(Форма, "ЗапасыВозвратыГруппаРНПТ", "ЗапасыВозвратыПодсказкаРНПТ", ПрослеживаемаяОперация(Форма.Объект.ВидОперации));
	// Конец Прослеживаемость
	
КонецПроцедуры // УстановитьВидимостьИДоступность()

// Процедура устанавливает связи параметров выбора поля ввода СчФ.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьОтборВыписыватьСчетаФактурыСводно()
	
	Если Объект.ВыписыватьСчетаФактурыСводно Тогда
		НовыйМассив = Новый Массив();
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент");
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ПокупателиСчетФактура.СвязиПараметровВыбора = НовыеСвязи;
	Иначе
		НовыйМассив = Новый Массив();
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Контрагент", "Элементы.Покупатели.ТекущиеДанные.Покупатель");
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ПокупателиСчетФактура.СвязиПараметровВыбора = НовыеСвязи;
	КонецЕсли;
	
КонецПроцедуры // УстановитьОтборВыписыватьСчетаФактурыСводно()

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

// Процедура - обработчик нажатия кнопки Копировать строки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Запасы");
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Копировать строки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыКопироватьСтрокиВозвраты(Команда)
	
	КопироватьСтроки("ЗапасыВозвраты");
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Вставить строки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыВставитьСтроки(Команда)
	
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтаФорма, "Запасы") Тогда
		Возврат;
	КонецЕсли;
	ВставитьСтроки("Запасы");
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Вставить строки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыВставитьСтрокиВозвраты(Команда)
	
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтаФорма, "ЗапасыВозвраты") Тогда
		Возврат;
	КонецЕсли;
	ВставитьСтроки("ЗапасыВозвраты");
	
КонецПроцедуры

// Вызывает процедуру копирования строк и оповещает пользователя о количестве скопированных.
//
&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

// Вызывает процедуру вставки строк и оповещает пользователя о количестве вставленных.
//
&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтроки(ИмяТЧ, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
		
КонецПроцедуры

// Выполняет копирование выделенных строк в буфер обмена.
//
&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

// Вставляет скопированные строки из буфера обмена в выбранную табличную часть.
//
&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных);
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

// Обрабатывает вставленные строки.
//
&НаКлиенте
Процедура ОбработатьВставленныеСтроки(ИмяТЧ, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	Для Итератор = 1 По КоличествоВставленных Цикл
		
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтаФорма, ИмяТЧ, Строка);
		
		Элементы[ИмяТЧ].ВыделенныеСтроки.Добавить(Строка.ПолучитьИдентификатор());
		
	КонецЦикла;
	
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		
		РассчитатьСуммуВСтрокеТабличнойЧасти(Строка);
		РассчитатьКомиссионноеВознаграждение(Строка);
		
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Строка.СтавкаНДС);
		
		Строка.СуммаНДСПередачи = ?(Объект.СуммаВключаетНДС,
										Строка.СуммаПередачи - (Строка.СуммаПередачи) / ((СтавкаНДС + 100) / 100),
										Строка.СуммаПередачи * СтавкаНДС / 100);
		
	КонецЦикла;
	
	Если ИмяТч = "ЗапасыВозвраты" Тогда
		ОбновитьКолонкуВсегоНаКлиенте("ПокупателиВозвраты");
	Иначе
		ОбновитьКолонкуВсегоНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает вставленные строки.
//
&НаСервере
Процедура ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
		СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строка.ЦенаПередачи) Тогда
			Строка.ЦенаПередачи = Строка.Цена;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строка.СуммаПередачи) Тогда
			Строка.СуммаПередачи = Строка.Сумма;
		КонецЕсли;
		
		Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		
		// Прослеживаемость
		Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров
			И ПрослеживаемаяОперация(Объект.ВидОперации) Тогда
			Строка.ПрослеживаемыйТовар = СтруктураДанные.ПрослеживаемыйТовар;
			Строка.ПрослеживаемыйКомплект = СтруктураДанные.ПрослеживаемыйКомплект;
			Строка.КодТНВЭД = СтруктураДанные.ТоварнаяНоменклатураВЭД;
		Иначе
			Строка.ПрослеживаемыйТовар = Ложь;
			Строка.ПрослеживаемыйКомплект = Ложь;
			Строка.КодТНВЭД = Неопределено;
		КонецЕсли;
		// КонецПрослеживаемость
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ГрупповоеИзменениеСтрок

// Процедура - обработчик нажатия кнопки Снять флажки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыСнятьФлажки(Команда)
	УстановитьПометку(Ложь);
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Снять флажки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыВозвратыСнятьФлажки(Команда)
	УстановитьПометку(Ложь, "ЗапасыВозвраты");
КонецПроцедуры


// Процедура - обработчик нажатия кнопки Установить флажки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыУстановитьФлажки(Команда)
	УстановитьПометку(Истина);
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Установить флажки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыВозвратыУстановитьФлажки(Команда)
	УстановитьПометку(Истина, "ЗапасыВозвраты");
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Изменить в ТЧ Запасы.
// Показывает/скрывает панель редактирования таблицы.
//
&НаКлиенте
Процедура ЗапасыИзменитьСтроки(Команда)
	
	ПоказатьСкрытьПанельРедактирования(Истина);
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Изменить в ТЧ Возвраты.
// Показывает/скрывает панель редактирования таблицы.
//
&НаКлиенте
Процедура ЗапасыИзменитьСтрокиВозвраты(Команда)
	
	ПоказатьСкрытьПанельРедактированияВозвраты(Истина);
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Выполнить в панели редактирования таблицы
// Производит выбранные преобразования с таблицей
//
&НаКлиенте
Процедура ЗапасыВыполнитьДействие(Команда)
	
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтаФорма, "Запасы") Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьТаблицу();
	НастроитьОформлениеПанелиРедактирования(4);
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Выполнить в панели редактирования таблицы
// Производит выбранные преобразования с таблицей
//
&НаКлиенте
Процедура ЗапасыВыполнитьДействиеВозвраты(Команда)
	
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтаФорма, "ЗапасыВозвраты") Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьТаблицу("ЗапасыВозвраты", "ПокупателиВозвраты");
	НастроитьОформлениеПанелиРедактированияВозвраты(4);
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Отменить в панели редактирования таблицы
// Скрывает панель редактирования и восстанавливает данные таблицы до внесения изменений
//
&НаКлиенте
Процедура ЗапасыОтменитьИзмененияВозвраты(Команда)
	
	ПоказатьСкрытьПанельРедактированияВозвраты();
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Отменить в панели редактирования таблицы
// Скрывает панель редактирования и восстанавливает данные таблицы до внесения изменений
//
&НаКлиенте
Процедура ЗапасыОтменитьИзменения(Команда)
	
	ПоказатьСкрытьПанельРедактирования();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ЗапасыИзменениеСтрокДействие.
//
&НаКлиенте
Процедура ЗапасыИзменениеСтрокДействиеПриИзменении(Элемент)
	
	ОпределитьОбъектИзменений();
	НастроитьОформлениеПанелиРедактирования(2);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ЗапасыИзменениеСтрокДействие.
//
&НаКлиенте
Процедура ЗапасыВозвратыИзменениеСтрокДействиеПриИзменении(Элемент) 
	
	ОпределитьОбъектИзмененийВозвраты();
	НастроитьОформлениеПанелиРедактированияВозвраты(2);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ЗапасыИзменениеСтрокЗначение.
//
&НаКлиенте
Процедура ЗапасыИзменениеСтрокЗначениеПриИзменении(Элемент)
	
	НастроитьОформлениеПанелиРедактирования(3);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ЗапасыИзменениеСтрокЗначение.
//
&НаКлиенте
Процедура ЗапасыВозвратыИзменениеСтрокЗначениеПриИзменении(Элемент)
	
	НастроитьОформлениеПанелиРедактированияВозвраты(3);
	
КонецПроцедуры

// Устанавливает/снимает пометку для всех строк таблицы.
//
&НаСервере
Процедура УстановитьПометку(Пометка, ИмяТаблицы = "Запасы")
	
	Если ИмяТаблицы = "Запасы" Тогда
		Элементы.ЗапасыСнятьФлажки.Видимость = НЕ Элементы.ЗапасыСнятьФлажки.Видимость;
		Элементы.ЗапасыУстановитьФлажки.Видимость = НЕ Элементы.ЗапасыУстановитьФлажки.Видимость;
	ИначеЕсли ИмяТаблицы = "ЗапасыВозвраты" Тогда
		Элементы.ЗапасыВозвратыСнятьФлажки.Видимость = НЕ Элементы.ЗапасыВозвратыСнятьФлажки.Видимость;
		Элементы.ЗапасыВозвратыУстановитьФлажки.Видимость = НЕ Элементы.ЗапасыВозвратыУстановитьФлажки.Видимость;
	КонецЕсли;
	
	Для Каждого Строка Из Объект[ИмяТаблицы] Цикл
		Строка.Пометка = Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Открывает/закрывает панель редактирования ТЧ.
//
Процедура ПоказатьСкрытьПанельРедактированияВозвраты(ИзменяетДанные = Неопределено)
	
	Перем СостояниеПерехода;
	ГрупповоеИзменениеСтрокСервер.ПоказатьСкрытьПанельРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокСерверВозвраты(),
		СостояниеПерехода,
		ИзменяетДанные);
	
	УправлениеРезервнымиКопиямиТаблицы(СостояниеПерехода, ИзменяетДанные);
	
КонецПроцедуры

&НаСервере
// Открывает/закрывает панель редактирования ТЧ.
//
Процедура ПоказатьСкрытьПанельРедактирования(ИзменяетДанные = Неопределено)
	
	Перем СостояниеПерехода;
	ГрупповоеИзменениеСтрокСервер.ПоказатьСкрытьПанельРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокСервер(),
		СостояниеПерехода,
		ИзменяетДанные);
	
	УправлениеРезервнымиКопиямиТаблицы(СостояниеПерехода, ИзменяетДанные);
	
КонецПроцедуры

&НаСервере
// Управляет сохранением/отменой изменений в ТЧ.
//
Процедура УправлениеРезервнымиКопиямиТаблицы(СостояниеПерехода, ИзменяетДанные)
	
	ГрупповоеИзменениеСтрокСервер.УправлениеРезервнымиКопиями(
		ЭтотОбъект,
		Объект.Запасы,
		ЗапасыРезервнаяКопияТаблицыАдрес,
		СостояниеПерехода,
		ИзменяетДанные);
	
КонецПроцедуры

// Управляет оформлением панели редактирования таблицы.
//
&НаКлиенте
Процедура НастроитьОформлениеПанелиРедактирования(Состояние, СохранитьИзменения = Неопределено)
	
	ГрупповоеИзменениеСтрокКлиент.НастроитьОформлениеПанелиРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокКлиент(),
		Состояние,
		ЗапасыИзменениеСтрокЗначение);
	
КонецПроцедуры
	
	// Управляет оформлением панели редактирования таблицы.
//
&НаКлиенте
Процедура НастроитьОформлениеПанелиРедактированияВозвраты(Состояние, СохранитьИзменения = Неопределено)
	
	ГрупповоеИзменениеСтрокКлиент.НастроитьОформлениеПанелиРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокКлиентВозвраты(),
		Состояние,
		ЗапасыИзменениеСтрокЗначениеВозвраты);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекущееДействиеИзмененияСтрок()
	
	Если ЗапасыИзменениеСтрокДействие = ЗапасыИзменениеСтрокДействиеПриОткрытии Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьТекущееДействиеИзмененияСтрокСервер();
	
КонецПроцедуры

// Записывает в пользовательские настройки последнее выбранное действие для изменения таблицы.
//
&НаСервере
Процедура СохранитьТекущееДействиеИзмененияСтрокСервер()
	
	ГрупповоеИзменениеСтрокСервер.СохранитьНастройки(НаборЭлементовГрупповогоИзмененияСтрокСервер());
	
КонецПроцедуры

// Производит пересчет связанных реквизитов в строках таблицы после из группового изменения.
//
&НаКлиенте
Процедура ОбработатьТаблицу(ИмяТаблицыЗапасы = "Запасы", ИмяТаблицыПокупатели = "Покупатели")
	
	КлючСвязи = -1;
	
	ТекущиеДанныеСтрокиПокупатели = Элементы[ИмяТаблицыПокупатели].ТекущиеДанные;
	Если ТекущиеДанныеСтрокиПокупатели <> Неопределено Тогда
		
		КлючСвязи = ТекущиеДанныеСтрокиПокупатели.КлючСвязи;
		
	КонецЕсли;
	
	ОбработатьТаблицуНаСервере(КлючСвязи, ИмяТаблицыЗапасы);
	
	ДействиеИзмененияСтрок = ?(ИмяТаблицыЗапасы = "Запасы", ЗапасыИзменениеСтрокДействие, ЗапасыИзменениеСтрокДействиеВозвраты);
	
	ИзменяемыеСтроки = Объект[ИмяТаблицыЗапасы].НайтиСтроки(Новый Структура("Пометка", Истина));
	Для каждого Строка Из ИзменяемыеСтроки Цикл
		
		Если ДействиеИзмененияСтрок = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент")
			ИЛИ ДействиеИзмененияСтрок = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены")
			ИЛИ ДействиеИзмененияСтрок = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду") Тогда
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(Строка);
			
			// Сумма вознаграждения.
			РассчитатьКомиссионноеВознаграждение(Строка);
			
		ИначеЕсли ДействиеИзмененияСтрок = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(Строка);
			// Сумма вознаграждения.
			РассчитатьКомиссионноеВознаграждение(Строка);
			ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтаФорма, ИмяТаблицыЗапасы, Строка);
			
		ИначеЕсли ДействиеИзмененияСтрок = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
			
			РассчитатьСуммуНДС(Строка);
			Строка.Всего = Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);
			
		ИначеЕсли ДействиеИзмененияСтрок = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству")
			ИЛИ ДействиеИзмененияСтрок = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			
			Если Строка.Количество <> 0 Тогда
				Строка.Цена = Строка.Сумма / Строка.Количество;
			КонецЕсли;
			
			РассчитатьСуммуНДС(Строка);
			Строка.Всего = Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);
			
			// Сумма вознаграждения.
			РассчитатьКомиссионноеВознаграждение(Строка);
			
		ИначеЕсли ДействиеИзмененияСтрок = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммеПередачи") Тогда
			
			Если Строка.Количество <> 0 Тогда
				Строка.ЦенаПередачи = Строка.СуммаПередачи / Строка.Количество;
			КонецЕсли;
			
			// Сумма вознаграждения.
			РассчитатьКомиссионноеВознаграждение(Строка);
			
		ИначеЕсли ДействиеИзмененияСтрок = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммеВознаграждения") Тогда
			
			// Сумма вознаграждения не пересчитывается
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДСВознаграждения);
			
			Строка.СуммаНДСВознаграждения = ?(Объект.СуммаВключаетНДС,
															Строка.СуммаВознаграждения - (Строка.СуммаВознаграждения) / ((СтавкаНДС + 100) / 100),
															Строка.СуммаВознаграждения * СтавкаНДС / 100);
		КонецЕсли;
		
	КонецЦикла;

	Если ИмяТаблицыЗапасы = "ЗапасыВозвраты" Тогда
		ОбновитьКолонкуВсегоНаКлиенте(Истина, "ПокупателиВозвраты");
	Иначе
		ОбновитьКолонкуВсегоНаКлиенте(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Производит пересчет связанных реквизитов в строках таблицы после из группового изменения.
//
&НаСервере
Процедура ОбработатьТаблицуНаСервере(КлючСвязи = -1, ИмяТаблицыЗапасы = "Запасы")
	
	Если ИмяТаблицыЗапасы = "Запасы" Тогда
		ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
		ЭтаФорма,
		Объект[ИмяТаблицыЗапасы],
		ЗапасыИзменениеСтрокДействие,
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит,
		ЗапасыИзменениеСтрокЗначение,
		"ЗапасыНоменклатура");
		
		ДействиеИзмененияСтрок = ЗапасыИзменениеСтрокДействие;
		
	Иначе
		ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
		ЭтаФорма,
		Объект[ИмяТаблицыЗапасы],
		ЗапасыИзменениеСтрокДействиеВозвраты,
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизитВозвраты,
		ЗапасыИзменениеСтрокЗначениеВозвраты,
		"ЗапасыВозвратыНоменклатура"); 
		
		ДействиеИзмененияСтрок = ЗапасыИзменениеСтрокДействиеВозвраты;
		
	КонецЕсли;
	
	Если ДействиеИзмененияСтрок = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
		
		ИзменяемыеСтроки = Объект[ИмяТаблицыЗапасы].НайтиСтроки(Новый Структура("Пометка", Истина));
		Для каждого Строка Из ИзменяемыеСтроки Цикл
			
			СтруктураДанные = Новый Структура;
			СтруктураДанные.Вставить("Организация", Объект.Организация);
			СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
			СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
			СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
			
			Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				СтруктураДанные.Вставить("ДатаОбработки",	 Объект.Дата);
				СтруктураДанные.Вставить("ВидЦен",			 Объект.ВидЦен);
				СтруктураДанные.Вставить("ВалютаДокумента",	 Объект.ВалютаДокумента);
				СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
				СтруктураДанные.Вставить("Характеристика",	 Строка.Характеристика);
				СтруктураДанные.Вставить("Коэффициент",		 1);
			КонецЕсли;
			
			СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
			
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
			Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
				Строка.Количество = 1;
			КонецЕсли;
			Строка.Цена = СтруктураДанные.Цена;
			Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
			Строка.ЦенаПередачи = 0;
			Строка.СуммаПередачи = 0;
			Строка.СуммаНДСПередачи = 0;
			
			// Прослеживаемость
			Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров
				И ПрослеживаемаяОперация(Объект.ВидОперации) Тогда
				Строка.ПрослеживаемыйТовар = СтруктураДанные.ПрослеживаемыйТовар;
				Строка.ПрослеживаемыйКомплект = СтруктураДанные.ПрослеживаемыйКомплект;
			Иначе
				Строка.ПрослеживаемыйТовар = Ложь;
				Строка.ПрослеживаемыйКомплект = Ложь;
			КонецЕсли; 
			// Конец Прослеживаемость
			
		КонецЦикла;
		
		// Прослеживаемость
		ОбновитьОтображениеПрослеживаемости(ИмяТаблицыЗапасы);
		// Конец Прослеживаемость
		
	КонецЕсли;
	
	Если ДействиеИзмененияСтрок = Перечисления.ДействияГрупповогоИзмененияСтрок.ЗаполнитьПоФактическимОстаткамНомераГТД
		И КлючСвязи >= 0 Тогда
		
		НомераГТДЗаполнитьПоФактическимОстаткамНаСервере(КлючСвязи, Ложь, ИмяТаблицыЗапасы);
		
	КонецЕсли;
	
	Если ДействиеИзмененияСтрок = Перечисления.ДействияГрупповогоИзмененияСтрок.ПодобратьНомераГТД
		И КлючСвязи >= 0 Тогда
		
		НомераГТДПодобратьНаСервере(КлючСвязи, Ложь, ИмяТаблицыЗапасы);
		
	КонецЕсли;
	
	Если ДействиеИзмененияСтрок = Перечисления.ДействияГрупповогоИзмененияСтрок.ОчиститьНомераГТДИСтраныПроисхождения
		И КлючСвязи >= 0 Тогда
		
		ГрузовыеТаможенныеДекларацииСервер.ОчиститьНомераГТДИСтраныПроисхождения(Объект[ИмяТаблицыЗапасы], КлючСвязи);
		
	КонецЕсли;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

// Определяет в зависимости от выбранного действия изменяемый реквизит и связанный с ним элемент на форме.
//
&НаКлиенте
Процедура ОпределитьОбъектИзменений()
	
	Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммеПередачи") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "СуммаПередачи";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСуммаПередачи";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммеВознаграждения") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "СуммаВознаграждения";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСуммаВознаграждения";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "СтавкаНДС";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСтавкаНДС";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки")
		ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСпособУказанияЗаказа") Тогда 
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "СпособРаспределения";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСпособРаспределения";
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет в зависимости от выбранного действия изменяемый реквизит и связанный с ним элемент на форме.
//
&НаКлиенте
Процедура ОпределитьОбъектИзмененийВозвраты()
	
	Если ЗапасыИзменениеСтрокДействиеВозвраты = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизитВозвраты = "Цена";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлементВозвраты = "ЗапасыВозвратыЦена";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействиеВозвраты = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизитВозвраты = "Цена";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлементВозвраты = "ЗапасыВозвратыЦена";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействиеВозвраты = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизитВозвраты = "Цена";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлементВозвраты = "ЗапасыВозвратыЦена";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействиеВозвраты = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизитВозвраты = "Сумма";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлементВозвраты = "ЗапасыВозвратыСумма";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействиеВозвраты = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизитВозвраты = "Сумма";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлементВозвраты = "ЗапасыВозвратыСумма";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействиеВозвраты = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммеПередачи") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизитВозвраты = "СуммаПередачи";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлементВозвраты = "ЗапасыВозвратыСуммаПередачи";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействиеВозвраты = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммеВознаграждения") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизитВозвраты = "СуммаВознаграждения";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлементВозвраты = "ЗапасыВозвратыСуммаВознаграждения";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействиеВозвраты = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизитВозвраты = "СтавкаНДС";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлементВозвраты = "ЗапасыВозвратыСтавкаНДС";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействиеВозвраты = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки")
		ИЛИ ЗапасыИзменениеСтрокДействиеВозвраты = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизитВозвраты = "";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлементВозвраты = "";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействиеВозвраты = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСпособУказанияЗаказа") Тогда 
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизитВозвраты = "СпособРаспределения";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлементВозвраты = "ЗапасыВозвратыСпособРаспределения";
		
	КонецЕсли;
	
КонецПроцедуры

// Создает набор необходимых реквизитов и элементов формы для управления оформлением панели редактирования.
//
&НаКлиенте
Функция НаборЭлементовГрупповогоИзмененияСтрокКлиент()
	
	НаборЭлементов = Новый Структура();
	НаборЭлементов.Вставить("ИмяТЧ", "Запасы");
	НаборЭлементов.Вставить("ДокументСсылка", Объект.Ссылка);
	НаборЭлементов.Вставить("ПанельРедактирования", Элементы.ГруппаЗапасыИзменениеСтрок);
	НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ЗапасыВыполнитьДействие);
	НаборЭлементов.Вставить("КолонкаПометка", Элементы.ЗапасыПометка);
	НаборЭлементов.Вставить("КолонкаНомерСтроки", Элементы.ЗапасыНомерСтроки);
	НаборЭлементов.Вставить("Действие", ЭтаФорма.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("ДействиеЭлемент", Элементы.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("Значение", ЭтаФорма.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ЗначениеЭлемент", Элементы.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ОбъектИзменений", ЗапасыИзменениеСтрокОбъектИзмененийЭлемент);
	НаборЭлементов.Вставить("КолонкаОбъектИзменений", ?(ЗначениеЗаполнено(ЗапасыИзменениеСтрокОбъектИзмененийЭлемент), Элементы[ЗапасыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	Возврат НаборЭлементов;
	
КонецФункции

// Создает набор необходимых реквизитов и элементов формы для управления оформлением панели редактирования.
//
&НаКлиенте
Функция НаборЭлементовГрупповогоИзмененияСтрокКлиентВозвраты()
	
	НаборЭлементов = Новый Структура();
	НаборЭлементов.Вставить("ИмяТЧ", "ЗапасыВозвраты");
	НаборЭлементов.Вставить("ДокументСсылка", Объект.Ссылка);
	НаборЭлементов.Вставить("ПанельРедактирования", Элементы.ГруппаВозвратыЗапасыИзменениеСтрок);
	НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ЗапасыВозвратыВыполнитьДействие);
	НаборЭлементов.Вставить("КолонкаПометка", Элементы.ЗапасыВозвратыПометка);
	НаборЭлементов.Вставить("КолонкаНомерСтроки", Элементы.ЗапасыВозвратыНомерСтроки);
	НаборЭлементов.Вставить("Действие", ЭтаФорма.ЗапасыИзменениеСтрокДействиеВозвраты);
	НаборЭлементов.Вставить("ДействиеЭлемент", Элементы.ЗапасыВозвратыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("Значение", ЭтаФорма.ЗапасыИзменениеСтрокЗначениеВозвраты);
	НаборЭлементов.Вставить("ЗначениеЭлемент", Элементы.ЗапасыВозвратыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ОбъектИзменений", ЗапасыИзменениеСтрокОбъектИзмененийЭлементВозвраты);
	НаборЭлементов.Вставить("КолонкаОбъектИзменений", ?(ЗначениеЗаполнено(ЗапасыИзменениеСтрокОбъектИзмененийЭлементВозвраты), 
		Элементы[ЗапасыИзменениеСтрокОбъектИзмененийЭлементВозвраты], Неопределено));
	Возврат НаборЭлементов;
	
КонецФункции

// Создает набор необходимых реквизитов и элементов формы для управления оформлением панели редактирования.
//
&НаСервере
Функция НаборЭлементовГрупповогоИзмененияСтрокСервер()

	НаборЭлементов = Новый Структура;
	НаборЭлементов.Вставить("ИмяТЧ", "Запасы");
	НаборЭлементов.Вставить("ДокументСсылка", Объект.Ссылка);
	НаборЭлементов.Вставить("ПанельРедактирования", Элементы.ГруппаЗапасыИзменениеСтрок);
	НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ЗапасыВыполнитьДействие);
	НаборЭлементов.Вставить("КнопкаИзменитьСтроки", Элементы.ЗапасыИзменитьСтроки);
	НаборЭлементов.Вставить("КолонкаПометка", Элементы.ЗапасыПометка);
	НаборЭлементов.Вставить("КолонкаНомерСтроки", Элементы.ЗапасыНомерСтроки);
	НаборЭлементов.Вставить("Действие", ЭтаФорма.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("ДействиеЭлемент", Элементы.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("Значение", ЭтаФорма.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ЗначениеЭлемент", Элементы.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ОбъектИзменений", ЗапасыИзменениеСтрокОбъектИзмененийЭлемент);
	НаборЭлементов.Вставить("КолонкаОбъектИзменений", ?(ЗначениеЗаполнено(ЗапасыИзменениеСтрокОбъектИзмененийЭлемент),
		Элементы[ЗапасыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	Возврат НаборЭлементов;

КонецФункции

&НаСервере
Функция НаборЭлементовГрупповогоИзмененияСтрокСерверВозвраты()

	НаборЭлементов = Новый Структура;
	НаборЭлементов.Вставить("ИмяТЧ", "ЗапасыВозвраты");
	НаборЭлементов.Вставить("ДокументСсылка", Объект.Ссылка);
	НаборЭлементов.Вставить("ПанельРедактирования", Элементы.ГруппаВозвратыЗапасыИзменениеСтрок);
	НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ЗапасыВозвратыВыполнитьДействие);
	НаборЭлементов.Вставить("КнопкаИзменитьСтроки", Элементы.ЗапасыИзменитьСтрокиВозвраты);
	НаборЭлементов.Вставить("КолонкаПометка", Элементы.ЗапасыВозвратыПометка);
	НаборЭлементов.Вставить("КолонкаНомерСтроки", Элементы.ЗапасыВозвратыНомерСтроки);
	НаборЭлементов.Вставить("Действие", ЭтаФорма.ЗапасыИзменениеСтрокДействиеВозвраты);
	НаборЭлементов.Вставить("ДействиеЭлемент", Элементы.ЗапасыВозвратыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("Значение", ЭтаФорма.ЗапасыИзменениеСтрокЗначениеВозвраты);
	НаборЭлементов.Вставить("ЗначениеЭлемент", Элементы.ЗапасыВозвратыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ОбъектИзменений", ЗапасыИзменениеСтрокОбъектИзмененийЭлементВозвраты);
	НаборЭлементов.Вставить("КолонкаОбъектИзменений", ?(ЗначениеЗаполнено(ЗапасыИзменениеСтрокОбъектИзмененийЭлементВозвраты),
		Элементы[ЗапасыИзменениеСтрокОбъектИзмененийЭлементВозвраты], Неопределено));
	Возврат НаборЭлементов;

КонецФункции

// Заполняет список выбора реквизита Действие в панели редактирования ТЧ
//
&НаСервере
Процедура ЗаполнитьСписокДействий(РазрешеноРедактированиеЦенДокументов)
	
	Действия = Новый Массив;
	Если РазрешеноРедактированиеЦенДокументов Тогда
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент);
	КонецЕсли;
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду);
	Если РазрешеноРедактированиеЦенДокументов Тогда
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммеПередачи);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммеВознаграждения);
	КонецЕсли;
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки);
	
	Если Объект.ИспользоватьНовыйВидДокумента Тогда
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСпособУказанияЗаказа);
		ГрузовыеТаможенныеДекларацииСервер.ЗаполнитьСписокДействий(Действия, Истина, "Запасы");
		ГрузовыеТаможенныеДекларацииСервер.ЗаполнитьСписокДействий(Действия, Истина, "ЗапасыВозвраты");
		
		Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Очистить();
		Элементы.ЗапасыВозвратыИзменениеСтрокДействие.СписокВыбора.Очистить();
		Для каждого Действие Из Действия Цикл
			ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
			Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
			Элементы.ЗапасыВозвратыИзменениеСтрокДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионера Тогда 
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСпособУказанияЗаказа);
	КонецЕсли;
	
	Если Не ЭтоВозвратСервер() Тогда
		ГрузовыеТаможенныеДекларацииСервер.ЗаполнитьСписокДействий(Действия, Истина, "Запасы");
	КонецЕсли;
	
	Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Очистить();
	Для каждого Действие Из Действия Цикл
		ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
		Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
	КонецЦикла;

	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПометкаПриИзменении(Элемент)
	ГрупповоеИзменениеСтрокКлиент.СтрокаПометкаПриИзменении(Объект.Запасы, Элементы.ЗапасыУстановитьФлажки, Элементы.ЗапасыСнятьФлажки);
КонецПроцедуры

#КонецОбласти

#Область АвтоподборКонтактов

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_ОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_АвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, Параметры, Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССериями
&НаКлиенте
Процедура ЗапасыСерииНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяТабличнойЧасти = "Запасы";
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерииНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерииНоменклатуры(ИмяТабличнойЧастиЗапасы = "Запасы")
		
	ТекущиеДанныеИдентификатор = Элементы[ИмяТабличнойЧастиЗапасы].ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыСерийНоменклатуры = ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор, ИмяТабличнойЧастиЗапасы);
	
	ОткрытьФорму("Обработка.ПодборСерийНоменклатуры.Форма", ПараметрыСерийНоменклатуры, ЭтотОбъект);

КонецПроцедуры

&НаСервере
Функция ПолучитьСерииНоменклатурыИзХранилища(АдресВоВременномХранилище, КлючСтроки)
	
	Модифицированность = Истина;
	
	ПараметрыИменаПолей = Новый Структура;
	
	Если ИмяТабличнойЧасти = "ЗапасыВозвраты" Тогда
		ПараметрыИменаПолей.Вставить("ИмяТЧЗапасы", "ЗапасыВозвраты");
		ПараметрыИменаПолей.Вставить("ИмяТЧСерииНоменклатуры", "СерииНоменклатурыВозвраты");
	Иначе
		ПараметрыИменаПолей.Вставить("ИмяТЧЗапасы", "Запасы");
		ПараметрыИменаПолей.Вставить("ИмяТЧСерииНоменклатуры", "СерииНоменклатуры");
	КонецЕсли;
	
	ПараметрыИменаПолей.Вставить("ИмяПоляКлючСвязи", "КлючСвязиСерииНоменклатуры");
	
	Возврат СерииНоменклатурыУНФ.ПолучитьСерииНоменклатурыИзХранилища(Объект, АдресВоВременномХранилище, КлючСтроки, ПараметрыИменаПолей);
			
КонецФункции

&НаСервере
Функция ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор, ИмяТабличнойЧастиЗапасы = "Запасы")
	
	Если ИмяТабличнойЧастиЗапасы = "ЗапасыВозвраты" Тогда
		
		Возврат СерииНоменклатурыУНФ.ПараметрыПодбораСерийНоменклатуры(Объект, ЭтотОбъект.УникальныйИдентификатор, ТекущиеДанныеИдентификатор, Ложь,
		"ЗапасыВозвраты","СерииНоменклатурыВозвраты","КлючСвязиСерииНоменклатуры");
		
	Иначе
		
		Возврат СерииНоменклатурыУНФ.ПараметрыПодбораСерийНоменклатуры(Объект, ЭтотОбъект.УникальныйИдентификатор, ТекущиеДанныеИдентификатор, Ложь,
		"Запасы","СерииНоменклатуры","КлючСвязиСерииНоменклатуры"); 
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКлючиСвязиВТабличнойЧастиТовары() Экспорт
	
	Индекс = 0;
	Для Каждого СтрокаТЧ Из Объект.Запасы Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.КлючСвязиСерииНоменклатуры) Тогда
			ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект.Запасы, СтрокаТЧ, "КлючСвязиСерииНоменклатуры");
		КонецЕсли;
		Если Индекс < СтрокаТЧ.КлючСвязиСерииНоменклатуры Тогда
			Индекс = СтрокаТЧ.КлючСвязиСерииНоменклатуры;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьКлючиСвязиВТабличнойЧастиТовары()

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область Прослеживаемость

&НаКлиенте
Процедура ОбработкаВыбораРНПТННаКлиенте(ВыбранноеЗначение)
	
	ИмяТабличнойЧастиПрослеживаемости = "СведенияПрослеживаемости";
	Если ИмяТабличнойЧасти = "ЗапасыВозвраты" Тогда
		СтрокаТабличнойЧасти = Элементы.ЗапасыВозвраты.ТекущиеДанные;
	Иначе
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторСтроки) Тогда
			СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;
		ОбработкаВыбораРНПТННаСервере(СтрокаТабличнойЧасти.ИдентификаторСтроки, ВыбранноеЗначение);
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти,,, ИмяТабличнойЧастиПрослеживаемости);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбработкаВыбораГТДНаКлиенте(ВыбранноеЗначение, ИмяТаблицыЗапасы = "Запасы")
	
	СтрокаТабличнойЧасти = Элементы[ИмяТаблицыЗапасы].ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		// Если в результате выбора пришло только значение,
		// то переложим его в структуру.
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.НомераГТД") Тогда
			ВыбранноеЗначение = Новый Структура("НомерГТД", ВыбранноеЗначение);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
			
			ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
			Если ДатаГТД > КонецДня(Объект.Дата) Тогда
				
				ТекстСообщения = НСтр("ru ='Выбранная ГТД датирована более поздней датой, чем текущий документ'");
				ТекстПутьКДанным = СтрШаблон("Объект.Запасы[%1].РНПТ", СтрокаТабличнойЧасти.ПолучитьИдентификатор());
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , ТекстПутьКДанным);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораРНПТННаСервере(ИдентификаторСтроки, ВыбранноеЗначение)
	
	ИмяТаблицыПрослеживаемости = "СведенияПрослеживаемости";
	
	СтрокиСРНПТ = Объект[ИмяТаблицыПрослеживаемости].НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки));
	
	Для Каждого СтрокаСРНПТ Из СтрокиСРНПТ Цикл
		Объект[ИмяТаблицыПрослеживаемости].Удалить(СтрокаСРНПТ);
	КонецЦикла;
	
	ПодобранныеРНПТ = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТаблицыРНПТВХранилище);
	Для Каждого НовыйРНПТ Из ПодобранныеРНПТ Цикл
		НоваяСтрока = Объект[ИмяТаблицыПрослеживаемости].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НовыйРНПТ);
		НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСвязанныеЗаписи(СтрокаЗапасы, ИмяТабличнойЧастиПрослеживаемости = "СведенияПрослеживаемости")
	
	СтруктураОтбора = Новый Структура("ИдентификаторСтроки", СтрокаЗапасы.ИдентификаторСтроки);
	МассивСтрокСведенияПрослеживаемости = Объект[ИмяТабличнойЧастиПрослеживаемости].НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаТЧ Из МассивСтрокСведенияПрослеживаемости Цикл
		Объект[ИмяТабличнойЧастиПрослеживаемости].Удалить(СтрокаТЧ);
	КонецЦикла;
	ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаЗапасы,,, ИмяТабличнойЧастиПрослеживаемости);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПризнакПрослеживаемости()
	
	Если Не КэшЗначений.Свойство("ВестиУчетПрослеживаемыхТоваров") Тогда
		КэшЗначений.Вставить("ВестиУчетПрослеживаемыхТоваров", ПрослеживаемостьУНФ.ВедетсяУчетПрослеживаемыхТоваров(Объект.Дата));
	КонецЕсли;
	ИспользуетсяПрослеживаемость = КэшЗначений.ВестиУчетПрослеживаемыхТоваров
		И ПрослеживаемаяОперация(Объект.ВидОперации);
	ПрослеживаемостьФормыУНФ.ОбновитьПризнакПрослеживаемости(Объект.Запасы, Объект.СведенияПрослеживаемости, ИспользуетсяПрослеживаемость);
	Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	КонецЦикла;
	
	ПрослеживаемостьФормыУНФ.ОбновитьПризнакПрослеживаемости(Объект.ЗапасыВозвраты, Объект.СведенияПрослеживаемости, ИспользуетсяПрослеживаемость);
	Для каждого СтрокаЗапасы Из Объект.ЗапасыВозвраты Цикл
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПрослеживаемаяОперация(Операция)
	
	Возврат Истина;
	
КонецФункции 

&НаСервере
Процедура ОбновитьОтображениеПрослеживаемости(ИмяТалицыЗапасы = "Запасы")
	
	ИмяТабличнойЧастиПрослеживаемости = "СведенияПрослеживаемости";
	
	ПрослеживаемостьФормыУНФ.ПриСозданииФормы(ЭтотОбъект, КэшЗначений);
	Для каждого СтрокаЗапасы Из Объект[ИмяТалицыЗапасы] Цикл
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы,,, ИмяТабличнойЧастиПрослеживаемости);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыПрослеживаемостиПриИзмененииКонтрагента(СтруктураДанные);
	
	Если КэшЗначений.РеализацияВЕАЭС <> СтруктураДанные.РеализацияВЕАЭС Тогда
		
		Если Объект.ИспользоватьНовыйВидДокумента Тогда
			
			КэшЗначений.Вставить("РеализацияВЕАЭС", СтруктураДанные.РеализацияВЕАЭС);
			РеализацияВЕАЭС = СтруктураДанные.РеализацияВЕАЭС;
			Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
				
				ПрослеживаемостьФормыКлиентСерверУНФ.НастроитьВидимостьКолонокРНПТ(
				ЭтотОбъект,
				,,
				ПрослеживаемаяОперация(Объект.ВидОперации),
				КэшЗначений.РеализацияВЕАЭС);
				
				ПрослеживаемостьФормыКлиентСерверУНФ.НастроитьВидимостьКолонокРНПТ(
				ЭтотОбъект, "ЗапасыВозвратыГруппаРНПТ", "ЗапасыВозвратыПодсказкаРНПТ",
				ПрослеживаемаяОперация(Объект.ВидОперации),
				КэшЗначений.РеализацияВЕАЭС);
				
				Объект.СведенияПрослеживаемости.Очистить();
				ОбновитьОтображениеПрослеживаемости();
				ОбновитьОтображениеПрослеживаемости("ЗапасыВозвраты"); 
			КонецЕсли;
			
			Возврат;
		КонецЕсли;
		
		КэшЗначений.Вставить("РеализацияВЕАЭС", СтруктураДанные.РеализацияВЕАЭС);
		РеализацияВЕАЭС = СтруктураДанные.РеализацияВЕАЭС;
		Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
			ПрослеживаемостьФормыКлиентСерверУНФ.НастроитьВидимостьКолонокРНПТ(
				ЭтотОбъект,
				,,
				ПрослеживаемаяОперация(Объект.ВидОперации),
				КэшЗначений.РеализацияВЕАЭС);
			
			Объект.СведенияПрослеживаемости.Очистить();
			ОбновитьОтображениеПрослеживаемости();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

