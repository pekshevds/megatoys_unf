#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("КПП");
	КонецЕсли;
	
	ИспользуетсяФорма2022 = (Дата >= Документы.ЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидов.ДатаФорм2022());
	
	МассивНепроверяемыхРеквизитов.Добавить("Оплаты.СотрудникСНИЛС");
	МассивНепроверяемыхРеквизитов.Добавить("Оплаты.РебенокСНИЛС");
	Если Не ИспользуетсяФорма2022 Или Не СЭДОФСС.ВидимостьПоляРодственник() Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Оплаты.Ребенок");
	КонецЕсли;
	Если Не ИспользуетсяФорма2022 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Оплаты.РебенокФамилия");
		МассивНепроверяемыхРеквизитов.Добавить("Оплаты.РебенокИмя");
		МассивНепроверяемыхРеквизитов.Добавить("Оплаты.РебенокДатаРождения");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОбъектЗафиксирован() Экспорт
	Возврат НЕ ПрямыеВыплатыПособийСоциальногоСтрахования.СтатусПозволяетРедактироватьДокумент(СтатусДокумента);
КонецФункции

Функция ОбновитьВторичныеДанныеДокумента(ДанныеОрганизации = Истина, ДанныеОплат = Истина) Экспорт
	Возврат ОбновитьВторичныеДанные();
КонецФункции

Функция ОбновитьВторичныеДанные(ПараметрыФиксации = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Модифицирован = Ложь;
	
	Если ОбъектЗафиксирован() Тогда
		Возврат Модифицирован;
	КонецЕсли;
	
	Если ПараметрыФиксации = Неопределено Тогда
		ПараметрыФиксации = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Метаданные().ПолноеИмя()).ПараметрыФиксацииВторичныхДанных();
	КонецЕсли;
	
	Если ОбновитьДанныеОрганизации(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ОбновитьСведенияОРуководителе(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ОбновитьДанныеЛицевогоСчета(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ОбновитьДанныеОплат(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ОбновитьСведенияОСотрудниках(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ОбновитьСведенияОРодственниках(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Возврат Модифицирован
КонецФункции

Функция ОбновитьДанныеОрганизации(ПараметрыФиксации)
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Реквизиты = Новый Структура(
	"РегистрационныйНомерФСС,
	|ДополнительныйКодФСС,
	|КодПодчиненностиФСС,
	|НаименованиеТерриториальногоОрганаФСС,
	|СтраховательНаименование,
	|ИНН,
	|КПП,
	|Руководитель,
	|ДолжностьРуководителя,
	|ОснованиеПодписиРуководителя,
	|ТелефонСоставителя,
	|АдресОрганизации,
	|АдресЭлектроннойПочтыОрганизации,
	|НаименованиеБанка,
	|НомерЛицевогоСчета,
	|НомерСчета,
	|БИКБанка");
	
	Если ЗначениеЗаполнено(Организация) Тогда
		СведенияОПодписях = ПодписиДокументов.СведенияОПодписяхПоУмолчаниюДляОбъектаМетаданных(Метаданные(), Организация);
		ЗаполнитьЗначенияСвойств(Реквизиты, СведенияОПодписях);
		
		ИменаПолей =
		"РегистрационныйНомерФСС,
		|КодПодчиненностиФСС,
		|ДополнительныйКодФСС,
		|НаименованиеТерриториальногоОрганаФСС,
		|НаимЮЛПол,
		|НаимЮЛСокр,
		|ИННЮЛ,
		|КППЮЛ,
		|БанкСчетНомер,
		|БанкСчетНаимБанка,
		|БанкСчетБИКБанка,
		|АдрЮР_JSON,
		|ТелОрганизации_JSON,
		|АдресЭлектроннойПочтыОрганизации";
		Сведения = СЭДОФСС.СведенияОСтрахователе(Организация, ИменаПолей, Дата);
		
		ЗаполнитьЗначенияСвойств(Реквизиты, Сведения);
		
		Реквизиты.ИНН                              = Сведения.ИННЮЛ;
		Реквизиты.КПП                              = Сведения.КППЮЛ;
		Реквизиты.НомерСчета                       = Сведения.БанкСчетНомер;
		Реквизиты.НаименованиеБанка                = Сведения.БанкСчетНаимБанка;
		Реквизиты.БИКБанка                         = Сведения.БанкСчетБИКБанка;
		Реквизиты.АдресОрганизации                 = Сведения.АдрЮР_JSON;
		Реквизиты.ТелефонСоставителя               = Сведения.ТелОрганизации_JSON;
		Реквизиты.АдресЭлектроннойПочтыОрганизации = Сведения.АдресЭлектроннойПочтыОрганизации;
		
		Если СтрДлина(Сведения.НаимЮЛПол) <= 150 Или Не ЗначениеЗаполнено(Сведения.НаимЮЛСокр) Тогда
			Реквизиты.СтраховательНаименование = Сведения.НаимЮЛПол;
		Иначе
			Реквизиты.СтраховательНаименование = Сведения.НаимЮЛСокр;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ОбновитьДанныеОплат(ПараметрыФиксации)
	Запрос = ПрямыеВыплатыПособийСоциальногоСтрахования.ЗапросОплатДляВозмещенияВыплатРодителямДетейИнвалидов(ЭтотОбъект);
	Если Запрос = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	ПоследнийЗапрос = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
	ПоследнийЗапрос.ТаблицаДляПомещения = "ВТВторичныеДанные";
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Запрос.Выполнить();
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьВторичныеДанные(
		Запрос.МенеджерВременныхТаблиц,
		ЭтотОбъект,
		"Оплаты",
		"ВТВторичныеДанные",
		ПараметрыФиксации);
КонецФункции

Функция ОбновитьСведенияОРуководителе(ПараметрыФиксации)
	Если Не ЗначениеЗаполнено(Руководитель) Тогда
		Возврат Ложь
	КонецЕсли;
	Реквизиты = Новый Структура("РуководительФИО");
	КадровыеДанныеФизическихЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(
		Ложь,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Руководитель),
		"ФИОПолные",
		Дата);
	КадровыеДанные = КадровыеДанныеФизическихЛиц.Найти(Руководитель, "ФизическоеЛицо");
	Если КадровыеДанные <> Неопределено Тогда
		Реквизиты.РуководительФИО = КадровыеДанные.ФИОПолные;
	КонецЕсли;
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ОбновитьСведенияОСотрудниках(ПараметрыФиксации)
	Если Оплаты.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивСотрудников = КоллекцииБЗК.УникальныеЗначенияКолонки(Оплаты, "Сотрудник");
	КоллекцииБЗК.УдалитьПустыеЗначенияМассива(МассивСотрудников);
	Если МассивСотрудников.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЕстьИзменения = Ложь;
	
	ИменаПолей =
	"Фамилия,
	|Имя,
	|Отчество,
	|СтраховойНомерПФР";
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, МассивСотрудников, ИменаПолей, Дата);
	
	Реквизиты = Новый Структура("СотрудникФамилия, СотрудникИмя, СотрудникОтчество, СотрудникСНИЛС");
	
	Для Каждого СтрокаТаблицы Из Оплаты Цикл
		КадровыеДанные = КадровыеДанныеСотрудников.Найти(СтрокаТаблицы.Сотрудник, "Сотрудник");
		Если КадровыеДанные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Реквизиты.СотрудникФамилия  = КадровыеДанные.Фамилия;
		Реквизиты.СотрудникИмя      = КадровыеДанные.Имя;
		Реквизиты.СотрудникОтчество = КадровыеДанные.Отчество;
		Реквизиты.СотрудникСНИЛС    = КадровыеДанные.СтраховойНомерПФР;
		Если ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеСтроки(
				Реквизиты,
				ЭтотОбъект,
				"Оплаты",
				СтрокаТаблицы,
				ПараметрыФиксации) Тогда
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьИзменения;
КонецФункции

Функция ОбновитьСведенияОРодственниках(ПараметрыФиксации)
	Если Не СЭДОФСС.ВидимостьПоляРодственник() Тогда
		Возврат Ложь;
	КонецЕсли;
	Если Оплаты.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЕстьИзменения = Ложь;
	
	МассивСсылок = КоллекцииБЗК.УникальныеЗначенияКолонки(Оплаты, "Ребенок");
	КоллекцииБЗК.УдалитьПустыеЗначенияМассива(МассивСсылок);
	Если МассивСсылок.Количество() > 0 Тогда
		ИменаПолей =
		"Фамилия,
		|Имя,
		|Отчество,
		|ДатаРождения,
		|СНИЛС,
		|СтепеньРодства,
		|КодСвязи";
		СведенияОРодственниках = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСсылок, ИменаПолей, Ложь);
	Иначе
		СведенияОРодственниках = Новый Соответствие;
	КонецЕсли;
	
	ИменаРеквизитов = "РебенокФамилия, РебенокИмя, РебенокОтчество, РебенокДатаРождения, РебенокСНИЛС, Статус";
	
	Для Каждого СтрокаТаблицы Из Оплаты Цикл
		СведенияОРодственнике = СведенияОРодственниках[СтрокаТаблицы.Ребенок];
		Реквизиты = Новый Структура(ИменаРеквизитов);
		Если СведенияОРодственнике <> Неопределено Тогда
			Реквизиты.РебенокФамилия      = СведенияОРодственнике.Фамилия;
			Реквизиты.РебенокИмя          = СведенияОРодственнике.Имя;
			Реквизиты.РебенокОтчество     = СведенияОРодственнике.Отчество;
			Реквизиты.РебенокДатаРождения = СведенияОРодственнике.ДатаРождения;
			Реквизиты.РебенокСНИЛС        = СведенияОРодственнике.СНИЛС;
			// Список выбора поля "КодСвязи" см. в 
			// ПрямыеВыплатыПособийСоциальногоСтрахованияФормы.ЗаполнитьСписокВыбораТипРодственнойСвязи.
			Если СведенияОРодственнике.КодСвязи = "38" Тогда // 38 - мать.
				Реквизиты.Статус = "1";
			ИначеЕсли СведенияОРодственнике.КодСвязи = "39" Тогда // 39 - отец.
				Реквизиты.Статус = "2";
			ИначеЕсли СведенияОРодственнике.КодСвязи = "40" Тогда // 40 - опекун.
				Реквизиты.Статус = "3";
			ИначеЕсли СведенияОРодственнике.КодСвязи = "41" Тогда // 41 - попечитель.
				Реквизиты.Статус = "4";
			КонецЕсли;
		КонецЕсли;
		Если ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеСтроки(
				Реквизиты,
				ЭтотОбъект,
				"Оплаты",
				СтрокаТаблицы,
				ПараметрыФиксации) Тогда
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьИзменения;
КонецФункции

Функция ОбновитьДанныеЛицевогоСчета(ПараметрыФиксации)
	Сведения = ПредшествующиеСведенияОЛицевомСчете();
	Если Сведения = Неопределено Или Не ЗначениеЗаполнено(Сведения.КБК) Тогда
		Возврат Ложь;
	КонецЕсли;
	Реквизиты = Новый Структура("НомерЛицевогоСчета, КБК");
	ЗаполнитьЗначенияСвойств(Реквизиты, Сведения);
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ПредшествующиеСведенияОЛицевомСчете()
	Если Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(НомерСчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Дата) Тогда
		НачалоДня = НачалоДня(Дата);
	Иначе
		НачалоДня = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	КонецДня = КонецДня(НачалоДня) + 1;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Шапка.Ссылка КАК Ссылка,
	|	Шапка.НомерСчета КАК НомерСчета,
	|	Шапка.НомерЛицевогоСчета КАК НомерЛицевогоСчета,
	|	Шапка.КБК КАК КБК
	|ИЗ
	|	Документ.ЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидов КАК Шапка
	|ГДЕ
	|	Шапка.Организация = &Организация
	|	И Шапка.Дата < &КонецДня
	|	И Шапка.НомерСчета = &НомерСчета
	|	И Шапка.Проведен
	|	И ВЫБОР
	|			КОГДА Шапка.Дата >= &НачалоДня
	|				ТОГДА Шапка.Ссылка < &Ссылка
	|			ИНАЧЕ Шапка.Ссылка <> &Ссылка
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Шапка.Дата УБЫВ,
	|	Шапка.Ссылка";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня);
	Запрос.УстановитьПараметр("КонецДня", КонецДня);
	Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Иначе
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"И ВЫБОР
			|			КОГДА Шапка.Дата >= &НачалоДня
			|				ТОГДА Шапка.Ссылка < &Ссылка
			|			ИНАЧЕ Шапка.Ссылка <> &Ссылка
			|		КОНЕЦ",
			"");
	КонецЕсли;
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() > 0 Тогда
		Возврат Таблица[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли