
#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Параметры.Свойство("СозданПоКомандеИзФормыСписка") Тогда
		СозданПоКомандеИзФормыСписка = Параметры.СозданПоКомандеИзФормыСписка;
	Иначе
		СозданПоКомандеИзФормыСписка = Ложь;
	КонецЕсли;
	
	Валюта = Объект.ВалютаДенежныхСредств;
	
	ДатаДокумента = Объект.Дата;
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Наличные;
		Объект.ТипДенежныхСредствПолучатель = Перечисления.ТипыДенежныхСредств.Наличные;
	КонецЕсли;
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	НапоминанияПользователяУНФ.УстановитьОтображениеКомандОрганайзера(Элементы);
	
	// МобильныйКлиент
	МобильныйКлиентУНФ.НастроитьФормуОбъектаМобильныйКлиент(Элементы);
	// Конец МобильныйКлиент
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
// Процедура - обработчик события формы "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("Проведение"+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	Оповестить();
	
	Если СозданПоКомандеИзФормыСписка Тогда
		ПараметрыОповещения = Новый Структура("Ссылка", Объект.Ссылка);
		Оповестить("Запись_ПеремещениеДС", ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеФормой();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ВалютаДенежныхСредств.
//
&НаКлиенте
Процедура ВалютаДенежныхСредствПриИзменении(Элемент)
	
	Если Валюта <> Объект.ВалютаДенежныхСредств Тогда
		
		СтруктураДанные = ПолучитьДанныеВалютаДенежныхСредствПриИзменении(
			Объект.Организация,
			Валюта,
			Объект.БанковскийСчет,
			Объект.ВалютаДенежныхСредств,
			Объект.СуммаДокумента,
			Объект.Дата);
		
		Объект.БанковскийСчет = СтруктураДанные.БанковскийСчет;
		
		Если Объект.СуммаДокумента <> 0 Тогда
			Режим = РежимДиалогаВопрос.ДаНет;

			ПоказатьВопрос(Новый ОписаниеОповещения("ВалютаДенежныхСредствПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("СтруктураДанные", СтруктураДанные)), НСтр("ru = 'Изменилась валюта документа. Пересчитать сумму документа?'"), Режим);
			Возврат;
		КонецЕсли;
		ВалютаДенежныхСредствПриИзмененииФрагмент();

		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДенежныхСредствПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СтруктураДанные = ДополнительныеПараметры.СтруктураДанные;
    
    
    Ответ = Результат;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Объект.СуммаДокумента = СтруктураДанные.Сумма;
    КонецЕсли;
    
    ВалютаДенежныхСредствПриИзмененииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ВалютаДенежныхСредствПриИзмененииФрагмент()
    
    Валюта = Объект.ВалютаДенежныхСредств;

КонецПроцедуры // ВалютаДенежныхСредствПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода ТипДенежныхСредств.
//
Процедура ТипДенежныхСредствПриИзменении(Элемент)
	
	УстановитьТекущуюСтраницу();
	
КонецПроцедуры // ТипДенежныхСредствПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода ТипДенежныхСредствПолучатель.
//
Процедура ТипДенежныхСредствПолучательПриИзменении(Элемент)
	
	УстановитьТекущуюСтраницуПолучателя();
	
КонецПроцедуры // ТипДенежныхСредствПолучательПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДанныеДляИзмененияДаты = ДокументыУНФКлиент.ДанныеДляИзмененияДаты(ЭтотОбъект, Объект);
	Если ДанныеДляИзмененияДаты.ДатаНеМенялась Тогда
		Возврат;
	КонецЕсли;
	
	ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Касса.
//
&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	
	УстановитьВалютуПоУмолчаниюПриИзмененииКассы(Объект.Касса);
	
КонецПроцедуры // КассаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода КассаПолучатель.
//
&НаКлиенте
Процедура КассаПолучательПриИзменении(Элемент)
	
	УстановитьВалютуПоУмолчаниюПриИзмененииКассы(Объект.КассаПолучатель);
	
КонецПроцедуры // КассаПолучательПриИзменении()

// Процедура устанавливает валюту по умолчанию.
//
&НаКлиенте
Процедура УстановитьВалютуПоУмолчаниюПриИзмененииКассы(Касса)
	
	Объект.ВалютаДенежныхСредств = ?(
		ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств),
		Объект.ВалютаДенежныхСредств,
		ПолучитьВалютуПоУмолчаниюКассыНаСервере(Касса));
	
КонецПроцедуры // УстановитьВалютуПоУмолчаниюПриИзмененииКассы()

// Процедура получает валюту кассы по умолчанию.
//
&НаСервереБезКонтекста
Функция ПолучитьВалютуПоУмолчаниюКассыНаСервере(Касса)
	
	Возврат Касса.ВалютаПоУмолчанию;
	
КонецФункции // ПолучитьВалютуПоУмолчаниюКассыНаСервере()

// Процедура - обработчик нажатия кнопки Заполнить по основанию.
//
&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru='Не выбран документ основание.'"));
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПеремещениеДСПлан")
		И НЕ ДокументУтвержден(Объект.ДокументОснование) Тогда
		ВызватьИсключение НСтр("ru = 'Нельзя ввести перемещение денег на основании неутвержденного планового документа.'");
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект), НСтр(
		"ru = 'Документ будет полностью перезаполнен по ""Основанию"". Продолжить выполнение операции?'"),
		РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьПоДокументу(Объект.ДокументОснование);
		УправлениеФормой();
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоОснованию()

// Процедура вызывает обработку заполнения документа по основанию.
//
&НаСервере
Процедура ЗаполнитьПоДокументу(ДокОснование)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(ДокОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Организации.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств = &ВалютаДенежныхСредств
		|			ТОГДА Организации.БанковскийСчетПоУмолчанию
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК БанковскийСчет
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Организация");
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("ВалютаДенежныхСредств", Объект.ВалютаДенежныхСредств);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
				Объект.БанковскийСчет = Выборка.БанковскийСчет;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчетПолучатель) Тогда
			Объект.БанковскийСчетПолучатель = Объект.БанковскийСчет;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Касса) Тогда
			Объект.Касса = Справочники.Кассы.ПолучитьКассуПоУмолчанию(Объект.Организация);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.КассаПолучатель) Тогда
			Объект.КассаПолучатель = Объект.Касса;
		КонецЕсли;
	КонецЕсли;
	
	Валюта = Объект.ВалютаДенежныхСредств;
	
	ДатаДокумента = Объект.Дата;
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоДокументу()

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
// Проверяет соответствие валюты денежных средств банковского счета и валюты документа,
// в случае несоответствия определяется банковский счет (касса) по умолчанию.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация документа
//	Валюта - СправочникСсылка.Валюты - Валюта документа
//	БанковскийСчет - СправочникСсылка.БанковскиеСчета - Банковский счет документа
//	Касса - СправочникСсылка.Кассы - Касса документа
//
Функция ПолучитьБанковскийСчет(Организация, Валюта)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Организации.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств = &ВалютаДенежныхСредств
	|			ТОГДА Организации.БанковскийСчетПоУмолчанию
	|		КОГДА (НЕ БанковскиеСчета.БанковскийСчет ЕСТЬ NULL )
	|			ТОГДА БанковскиеСчета.БанковскийСчет
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК БанковскийСчет
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			БанковскиеСчета.Ссылка КАК БанковскийСчет
	|		ИЗ
	|			Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ГДЕ
	|			БанковскиеСчета.ВалютаДенежныхСредств = &ВалютаДенежныхСредств
	|			И БанковскиеСчета.Владелец = &Организация) КАК БанковскиеСчета
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Организации.Ссылка = &Организация");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВалютаДенежныхСредств", Валюта);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.БанковскийСчет;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПолучитьБанковскийСчет()

// Проверяет данные с сервера для процедуры ОрганизацияПриИзменении.
//
&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	ДокументыУНФ.ОрганизацияПриИзменении(ЭтотОбъект, Объект);
	Объект.БанковскийСчет = ПолучитьБанковскийСчет(Объект.Организация, Объект.ВалютаДенежныхСредств);
	ВалютаИКассаПоУмолчанию = Справочники.Организации.ВалютаИКассаПоУмолчанию(Объект, Объект.ВалютаДенежныхСредств,
		"ВалютаДенежныхСредств");
	Если ЗначениеЗаполнено(ВалютаИКассаПоУмолчанию) Тогда
		Если (Объект.Касса = Объект.КассаПолучатель) Тогда
			Объект.КассаПолучатель = ВалютаИКассаПоУмолчанию.Касса;
		КонецЕсли;
		Объект.Касса = ВалютаИКассаПоУмолчанию.Касса;
		Объект.ВалютаДенежныхСредств = ВалютаИКассаПоУмолчанию.ВалютаДенежныхСредств;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
// Проверяет данные с сервера для процедуры ВалютаДенежныхСредствПриИзменении.
//
Функция ПолучитьДанныеВалютаДенежныхСредствПриИзменении(Организация, Валюта, БанковскийСчет, НоваяВалюта, СуммаДокумента, Дата)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("БанковскийСчет", ПолучитьБанковскийСчет(Организация, НоваяВалюта));
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КурсыВалют.Кратность <> 0
	|				И (НЕ КурсыВалют.Кратность ЕСТЬ NULL )
	|				И НовыеКурсыВалют.Курс <> 0
	|				И (НЕ НовыеКурсыВалют.Курс ЕСТЬ NULL )
	|			ТОГДА &СуммаДокумента * (КурсыВалют.Курс * НовыеКурсыВалют.Кратность) / (КурсыВалют.Кратность * НовыеКурсыВалют.Курс)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалют
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &НоваяВалюта) КАК НовыеКурсыВалют
	|		ПО (ИСТИНА)");
	 
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("НоваяВалюта", НоваяВалюта);
	Запрос.УстановитьПараметр("СуммаДокумента", СуммаДокумента);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураДанные.Вставить("Сумма", Выборка.Сумма);
	Иначе
		СтруктураДанные.Вставить("Сумма", 0);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеВалютаДенежныхСредствПриИзменении()

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты)
	
	ДокументыУНФ.ДатаПриИзменении(ДанныеДляИзмененияДаты, ЭтотОбъект, Объект);
	
КонецПроцедуры

// Проверяет утвержден документ или нет.
//
&НаСервереБезКонтекста
Функция ДокументУтвержден(ДокументОснование)
	
	Возврат ДокументОснование.СтатусУтвержденияПлатежа = Перечисления.СтатусыУтвержденияПлатежей.Утвержден;
	
КонецФункции // ДокументУтвержден()

&НаКлиенте
Процедура УправлениеФормой()
	
	УстановитьТекущуюСтраницу();
	УстановитьТекущуюСтраницуПолучателя();
	
КонецПроцедуры

&НаКлиенте
// Устанавливает текущую страницу для типа денежных средств.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операции
//
Процедура УстановитьТекущуюСтраницу()
	
	Если Объект.ТипДенежныхСредств = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Безналичные") Тогда
		
		Элементы.Откуда.Видимость = Истина;
		Элементы.ОткудаПростаяФорма.Видимость = Ложь;
		Элементы.БанковскийСчет.Доступность = Истина;
		Элементы.БанковскийСчет.Видимость 	= Истина;
		Элементы.Касса.Видимость 			= Ложь;
		
	ИначеЕсли Объект.ТипДенежныхСредств = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Наличные") Тогда
		Элементы.Касса.Доступность			= Истина;
		Элементы.БанковскийСчет.Видимость	= Ложь;
		Элементы.Касса.Видимость			= Истина;
		
		Если Объект.ТипДенежныхСредствПолучатель = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Безналичные") Тогда
			Элементы.Откуда.Видимость = Истина;
			Элементы.ОткудаПростаяФорма.Видимость = Ложь;
		Иначе
			Элементы.Откуда.Видимость			= Ложь;
			Элементы.ОткудаПростаяФорма.Видимость = Истина;
		КонецЕсли;
	Иначе
		Элементы.БанковскийСчет.Доступность = Ложь;
		Элементы.Касса.Доступность 			= Ложь;
	КонецЕсли;
	
	
	
КонецПроцедуры // УстановитьТекущуюСтраницу()

&НаКлиенте
// Устанавливает текущую страницу для типа денежных средств.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операции
//
Процедура УстановитьТекущуюСтраницуПолучателя()
	
	Если Объект.ТипДенежныхСредствПолучатель = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Безналичные") Тогда
		Элементы.Куда.Видимость = Истина;
		Элементы.КудаПростаяФорма.Видимость = Ложь;
		
		Элементы.БанковскийСчетПолучатель.Доступность 	= Истина;
		Элементы.БанковскийСчетПолучатель.Видимость 	= Истина;
		Элементы.КассаПолучатель.Видимость 				= Ложь;
		
	ИначеЕсли Объект.ТипДенежныхСредствПолучатель = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Наличные") Тогда
		
		Элементы.Куда.Видимость = Ложь;
		Элементы.КудаПростаяФорма.Видимость = Истина;
		
		Элементы.КассаПолучатель.Доступность 			= Истина;
		Элементы.БанковскийСчетПолучатель.Видимость 	= Ложь;
		Элементы.КассаПолучатель.Видимость 				= Истина;
		
		Если Объект.ТипДенежныхСредств = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Безналичные") Тогда
			Элементы.Куда.Видимость = Истина;
			Элементы.КудаПростаяФорма.Видимость = Ложь;
		Иначе
			Элементы.Куда.Видимость			= Ложь;
			Элементы.КудаПростаяФорма.Видимость = Истина;
		КонецЕсли;
	Иначе
		
		Элементы.БанковскийСчетПолучатель.Доступность 	= Ложь;
		Элементы.КассаПолучатель.Доступность 			= Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьТекущуюСтраницуПолучателя()

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтаФорма);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
