#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//  КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ
	|	ЧтениеОбъектаРазрешено(ЗапросСреднего)
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ИзменениеОбъектаРазрешено(ЗапросСреднего)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#Область СоставДокументов

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
//
Функция ОписаниеСоставаОбъекта() Экспорт
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаФизическоеЛицоВШапке("ФизическоеЛицо", "");
КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область СЭДО

// Загружает ошибку логического контроля регистрации сведений о застрахованном лице.
Процедура ЗаполнитьПоСообщению321(ЗаписьРегистра, ПериодыDOM, Результат) Экспорт
	Если ЗначениеЗаполнено(ЗаписьРегистра.РегистрацияДокумент) Тогда
		ДокументОбъект = ЗаписьРегистра.РегистрацияДокумент.ПолучитьОбъект();
	Иначе
		ДокументОбъект = СоздатьДокумент();
		ДокументОбъект.Дата = ЗаписьРегистра.РегистрацияДата;
	КонецЕсли;
	
	ДокументОбъект.ДанныеОЗаработке.Очистить();
	ДокументОбъект.РасчетныйГод1          = 0;
	ДокументОбъект.РасчетныйГод2          = 0;
	ДокументОбъект.ДополнительныйГод1     = 0;
	ДокументОбъект.ДополнительныйГод2     = 0;
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ЗаписьРегистра); // ГоловнаяОрганизация, Страхователь, ФизическоеЛицо.
	ДокументОбъект.СНИЛС                  = ЗаписьРегистра.РегистрацияСНИЛС;
	ДокументОбъект.Дата                   = ЗаписьРегистра.РегистрацияДата;
	ДокументОбъект.ИдентификаторСообщения = ЗаписьРегистра.РегистрацияИдентификатор;
	ДокументОбъект.ЗапросСреднего         = ЗаписьРегистра.ИсходящийДокумент;
	
	ТекстыОшибок = Новый Массив;
	Если ЗначениеЗаполнено(ЗаписьРегистра.РегистрацияПротокол) Тогда
		ТекстыОшибок.Добавить(ЗаписьРегистра.РегистрацияПротокол);
	КонецЕсли;
	
	// Из спецификации:
	//   <xs:element name="periodInfo"> - Сведения о запрашиваемом периоде.
	//       <xs:element name="twoPrevYears"> - Два предшествующих года.
	//         <xs:element name="yearSum" type="yearSumType" minOccurs="2" maxOccurs="2"/>
	//           <xs:element name="year" type="yearType"> - Год.
	//           <xs:element name="amountForAllInsurers" type="c:amount"> - Общая сумма заработка по всем страхователям.
	//           <xs:element name="amountForCurrentInsurer" type="c:amount"> - Сумма заработка по текущему страхователю.
	//       <xs:element name="additionalYears" minOccurs="0"> - Дополнительный период, необходимый при замене лет.
	//         <xs:element name="yearSum" type="yearSumType" maxOccurs="unbounded"/>
	//           <xs:element name="year" type="yearType"> - Год.
	//           <xs:element name="amountForAllInsurers" type="c:amount"> - Общая сумма заработка по всем страхователям.
	//           <xs:element name="amountForCurrentInsurer" type="c:amount"> - Сумма заработка по текущему страхователю.
	Если ПериодыDOM <> Неопределено Тогда
		НомерГода = 0;
		Для Каждого ГруппаПериодовDOM Из ПериодыDOM.ДочерниеУзлы Цикл
			Если ГруппаПериодовDOM.ТипУзла <> ТипУзлаDOM.Элемент Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого ПериодDOM Из ГруппаПериодовDOM.ДочерниеУзлы Цикл
				Если ПериодDOM.ТипУзла <> ТипУзлаDOM.Элемент Тогда
					Продолжить;
				КонецЕсли;
				РеквизитыПериодаDOM = СериализацияБЗК.УзлыЭлементаDOM(ПериодDOM, "year, amountForAllInsurers, amountForCurrentInsurer");
				Если РеквизитыПериодаDOM.year = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				РасчетныйГод        = СериализацияБЗК.ЧислоИзXML(РеквизитыПериодаDOM.year);
				ЗаработокПоВсем     = СериализацияБЗК.ЧислоИзXML(РеквизитыПериодаDOM.amountForAllInsurers);
				ЗаработокПоТекущему = СериализацияБЗК.ЧислоИзXML(РеквизитыПериодаDOM.amountForCurrentInsurer);
				
				СтрокаТаблицы = ДокументОбъект.ДанныеОЗаработке.Найти(РасчетныйГод, "РасчетныйГод");
				Если СтрокаТаблицы = Неопределено Тогда
					СтрокаТаблицы = ДокументОбъект.ДанныеОЗаработке.Добавить();
					СтрокаТаблицы.РасчетныйГод        = РасчетныйГод;
					СтрокаТаблицы.ЗаработокПоВсем     = ЗаработокПоВсем;
					СтрокаТаблицы.ЗаработокПоТекущему = ЗаработокПоТекущему;
					НомерГода = НомерГода + 1;
					Если НомерГода = 1 Тогда
						ДокументОбъект.РасчетныйГод1 = РасчетныйГод;
					ИначеЕсли НомерГода = 2 Тогда
						ДокументОбъект.РасчетныйГод2 = РасчетныйГод;
					ИначеЕсли НомерГода = 3 Тогда
						ДокументОбъект.ДополнительныйГод1 = РасчетныйГод;
					ИначеЕсли НомерГода = 4 Тогда
						ДокументОбъект.ДополнительныйГод2 = РасчетныйГод;
					КонецЕсли;
				ИначеЕсли СтрокаТаблицы.ЗаработокПоВсем <> ЗаработокПоВсем
					Или СтрокаТаблицы.ЗаработокПоТекущему <> ЗаработокПоТекущему Тогда
					
					ЗаголовокОшибкиБезСумм = СтрШаблон(
						НСтр("ru = 'В XML СФР обнаружено две строки по году %1 с различающимися суммами'"),
						Формат(РасчетныйГод, "ЧГ="));
					ТекстОшибкиССуммами = НСтр("ru = '
						|Заработок по всем страхователям: (строка 1) %1  (строка 2) %2
						|Заработок по текущему страхователю: (строка 1) %3  (строка 2) %4'");
					ТекстОшибкиССуммами = СтрШаблон(
						ТекстОшибкиССуммами,
						Формат(СтрокаТаблицы.ЗаработокПоВсем, "ЧН=; ЧГ="),
						Формат(ЗаработокПоВсем, "ЧН=; ЧГ="),
						Формат(СтрокаТаблицы.ЗаработокПоТекущему, "ЧН=; ЧГ="),
						Формат(ЗаработокПоТекущему, "ЧН=; ЧГ="));
					ТекстыОшибок.Добавить(ЗаголовокОшибкиБезСумм + ТекстОшибкиССуммами);
					СЭДОФСС.ОшибкаОбработки(Результат, ЗаголовокОшибкиБезСумм);
					
					Если СтрокаТаблицы.ЗаработокПоВсем = 0 И СтрокаТаблицы.ЗаработокПоТекущему = 0 Тогда
						СтрокаТаблицы.ЗаработокПоВсем     = ЗаработокПоВсем;
						СтрокаТаблицы.ЗаработокПоТекущему = ЗаработокПоТекущему;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ДокументОбъект.ТекстОшибки = СтрСоединить(ТекстыОшибок, Символы.ПС + Символы.ПС);
	
	Если ТекстыОшибок.Количество() > 0 И ЗначениеЗаполнено(ЗаписьРегистра.РегистрацияПротокол) Тогда
		Протокол = НСтр("ru = 'Протокол регистрации:'") + Символы.ПС + ЗаписьРегистра.РегистрацияПротокол;
		СЭДОФСС.ОшибкаОбработки(Результат, Протокол);
	КонецЕсли;
	
	СЭДОФСС.ЗаписатьДокумент(ДокументОбъект, Истина, Ложь);
	
	ЗаписьРегистра.РегистрацияДокумент = ДокументОбъект.Ссылка;
	
КонецПроцедуры

#КонецОбласти

#Область ФизическиеЛица

Процедура ПриИзмененииСНИЛСФизическогоЛица(ФизическоеЛицо, СтарыйСНИЛС, НовыйСНИЛС) Экспорт
	// В сообщениях 100 Фонд явно указывает СНИЛС и появление сообщений 100 явно связано с тем,
	// к какому РНС относятся сведения о застрахованном лице "по версии Фонда",
	// поэтому в них требуется актуализировать ссылки физлиц.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СреднийЗаработокСЭДО.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СреднийЗаработокСЭДО КАК СреднийЗаработокСЭДО
	|ГДЕ
	|	СреднийЗаработокСЭДО.СНИЛС = &НовыйСНИЛС
	|	И СреднийЗаработокСЭДО.ФизическоеЛицо <> &ФизическоеЛицо
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СреднийЗаработокСЭДО.Ссылка
	|ИЗ
	|	Документ.СреднийЗаработокСЭДО КАК СреднийЗаработокСЭДО
	|ГДЕ
	|	СреднийЗаработокСЭДО.ФизическоеЛицо = &ФизическоеЛицо
	|	И СреднийЗаработокСЭДО.СНИЛС <> &НовыйСНИЛС";
	Если ЗначениеЗаполнено(НовыйСНИЛС) Тогда
		Запрос.УстановитьПараметр("НовыйСНИЛС", НовыйСНИЛС);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СреднийЗаработокСЭДО.СНИЛС = &НовыйСНИЛС", "ЛОЖЬ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СреднийЗаработокСЭДО.СНИЛС <> &НовыйСНИЛС", "ИСТИНА");
	КонецЕсли;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаВыборки Из Таблица Цикл
		Если Не ЗначениеЗаполнено(СтрокаВыборки.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		ДокументОбъект = СтрокаВыборки.Ссылка.ПолучитьОбъект();
		Если ДокументОбъект.СотрудникСНИЛС = НовыйСНИЛС И ЗначениеЗаполнено(НовыйСНИЛС) Тогда
			ДокументОбъект.ФизическоеЛицо = ФизическоеЛицо;
		Иначе
			ДокументОбъект.ФизическоеЛицо = Неопределено;
		КонецЕсли;
		РежимЗаписи = ?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		СЭДОФСС.ЗаписатьДокумент(ДокументОбъект, Истина, Истина, РежимЗаписи);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли