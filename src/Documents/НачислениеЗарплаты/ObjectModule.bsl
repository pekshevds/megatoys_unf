#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	Если ПолучитьФункциональнуюОпцию("РасчетЗарплатыДляНебольшихОрганизаций") Тогда
		ИмяТабличнойЧасти = "Сотрудники";
	Иначе
		ИмяТабличнойЧасти = "Начисления";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ТЧСотрудники", ЭтотОбъект[ИмяТабличнойЧасти].Выгрузить(, "НомерСтроки,Сотрудник"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачислениеЗарплатыСотрудники.НомерСтроки,
		|	НачислениеЗарплатыСотрудники.Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиДокумента
		|ИЗ
		|	&ТЧСотрудники КАК НачислениеЗарплатыСотрудники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(СотрудникиДокумента.НомерСтроки) КАК НомерСтроки,
		|	СотрудникиДокумента.Сотрудник
		|ИЗ
		|	ВТСотрудникиДокумента КАК СотрудникиДокумента
		|ГДЕ
		|	ВЫРАЗИТЬ(СотрудникиДокумента.Сотрудник КАК Справочник.Сотрудники).ГоловнаяОрганизация <> &ГоловнаяОрганизация
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиДокумента.Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='Сотрудник %1 не работает в организации %2'"),
					Выборка.Сотрудник,
					Организация),
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, Выборка.НомерСтроки, "Сотрудник"),				
				"Объект",
				Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого СтрокаНачислений Из Начисления Цикл
		
		ЗарплатаКадры.ПроверитьКорректностьДаты(Ссылка, СтрокаНачислений.ПланируемаяДатаВыплаты, "Объект.Начисления[" + Формат(СтрокаНачислений.НомерСтроки - 1, "ЧГ=") + "].ПланируемаяДатаВыплаты",
			Отказ, НСтр("ru='Дата выплаты'"), МесяцНачисления, НСтр("ru='месяца начисления'"));
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;		
	
	ЗаполнитьНачисленоУдержано();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ДанныеДляПроведения = ДанныеДляПроведения();
	
	// Заполним описание данных для проведения в учете начисленной зарплаты.
	ДанныеДляПроведенияУчетЗарплаты = ОтражениеЗарплатыВУчете.ОписаниеДанныеДляПроведения();
	ДанныеДляПроведенияУчетЗарплаты.Движения 				= Движения;
	ДанныеДляПроведенияУчетЗарплаты.Организация 			= Организация;
	ДанныеДляПроведенияУчетЗарплаты.ПериодРегистрации 		= МесяцНачисления;
	Если Начисления.Количество() > 0 Тогда
		ДанныеДляПроведенияУчетЗарплаты.ПланируемаяДатаВыплаты 	= Начисления[0].ПланируемаяДатаВыплаты;
	Иначе
		ДанныеДляПроведенияУчетЗарплаты.ПланируемаяДатаВыплаты 	= КонецМесяца(МесяцНачисления);
	КонецЕсли;
	ДанныеДляПроведенияУчетЗарплаты.МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
	
	Если ПерваяПоловинаМесяца Тогда
		
		ДанныеДляПроведенияУчетЗарплаты.ПорядокВыплаты 			= Перечисления.ХарактерВыплатыЗарплаты.Аванс;
		ДанныеДляПроведенияУчетЗарплаты.Авансом 				= Истина;
		ДанныеДляПроведенияУчетЗарплаты.ОкончательныйРасчет		= Ложь;
		
		УчетНачисленнойЗарплаты.ЗарегистрироватьНачисленияАвансом(ДанныеДляПроведенияУчетЗарплаты, Отказ, ДанныеДляПроведения.НачисленияПоСотрудникам);
		УчетНачисленнойЗарплаты.ЗарегистрироватьОтработанноеВремяАвансом(ДанныеДляПроведенияУчетЗарплаты, Отказ, ДанныеДляПроведения.ОтработанноеВремяПоСотрудникам);
		
		УчетНачисленнойЗарплаты.СоздатьВТРаспределениеНачисленийТекущегоДокумента(ДанныеДляПроведенияУчетЗарплаты);
		
		УчетНачисленнойЗарплатыБазовый.ЗарегистрироватьУдержанияАвансом(ДанныеДляПроведенияУчетЗарплаты, Отказ, ДанныеДляПроведения.УдержанияПоСотрудникам);
		
		УдержатьНалогПриВыплатеАванса = Ложь;
		Если НДФЛ.Количество() > 0 
			И (УдержатьНалогПриВыплатеАванса 
				Или УчетНДФЛ.УдерживатьНалогПриВыплатеАванса(Организация) 
				Или ДанныеДляПроведенияУчетЗарплаты.ПланируемаяДатаВыплаты >= НачалоДня(КонецМесяца(МесяцНачисления))) Тогда
			// - Регистрация в учете по НДФЛ и регистрация НДФЛ в учете начислений и удержаний.
			УчетНДФЛ.ЗарегистрироватьДоходыИСуммыНДФЛПриНачисленииАванса(Ссылка, Движения, Отказ, Организация, Дата, МесяцНачисления, ДанныеДляПроведенияУчетЗарплаты.ПланируемаяДатаВыплаты, ДанныеДляПроведения);
		КонецЕсли;
		
		// - Регистрация НДФЛ в учете начислений и удержаний.
		УчетНачисленнойЗарплаты.ПодготовитьДанныеНДФЛКРегистрации(ДанныеДляПроведения.НДФЛПоСотрудникам, Организация, МесяцНачисления);
		УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛПоСотрудникам(ДанныеДляПроведенияУчетЗарплаты, Отказ,
			ДанныеДляПроведения.НДФЛПоСотрудникам);
		
	Иначе
		
		ДанныеДляПроведенияУчетЗарплаты.ПорядокВыплаты 			= Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
		ДанныеДляПроведенияУчетЗарплаты.Авансом 				= Ложь;
		ДанныеДляПроведенияУчетЗарплаты.ОкончательныйРасчет		= Истина;
		
		РасчетЗарплаты.СформироватьДвиженияНачисленийПоДоговорам(Движения, Отказ, Организация, НачалоМесяца(МесяцНачисления), ДанныеДляПроведения.НачисленияПоДоговорам);
		
		УчетНачисленнойЗарплаты.ЗарегистрироватьНачисления(ДанныеДляПроведенияУчетЗарплаты, Отказ, ДанныеДляПроведения.НачисленияПоДоговорамСРаспределением, Неопределено);
		УчетНачисленнойЗарплаты.ЗарегистрироватьНачисления(ДанныеДляПроведенияУчетЗарплаты, Отказ, ДанныеДляПроведения.НачисленияПоСотрудникам, Неопределено);
		УчетНачисленнойЗарплаты.ЗарегистрироватьОтработанноеВремя(ДанныеДляПроведенияУчетЗарплаты, Отказ, ДанныеДляПроведения.ОтработанноеВремяПоСотрудникам, Истина);
		
		// Подготовка данных для регистрации удержаний, НДФЛ и Корректировок выплаты в учете начисленной зарплаты.
		УчетНачисленнойЗарплаты.СоздатьВТРаспределениеНачисленийТекущегоДокумента(ДанныеДляПроведенияУчетЗарплаты);
		
		УчетНачисленнойЗарплатыБазовый.ЗарегистрироватьУдержания(ДанныеДляПроведенияУчетЗарплаты, Отказ, ДанныеДляПроведения.УдержанияПоСотрудникам);
		
		// НДФЛ
		ДатаОперацииПоНалогомИВзносам = Мин(Дата, КонецМесяца(МесяцНачисления));
		
		УчетНДФЛ.СформироватьДоходыНДФЛПоНачислениямСПланируемойДатойВыплаты(Движения, Отказ, Организация, ДатаОперацииПоНалогомИВзносам, ДанныеДляПроведения.МенеджерВременныхТаблиц, МесяцНачисления, , , , Ссылка);
		УчетНДФЛ.СформироватьДоходыНДФЛПоКодамДоходовИзТаблицыЗначений(Движения, Отказ, Организация, КонецМесяца(МесяцНачисления),
				ДанныеДляПроведения.НачисленияПоДоговорамДляУчетаНДФЛ, , Истина, Ссылка);
		
		// Дополняем доходы НДФЛ сведениями о распределении по статьям финансирования и/или статьям расходов.
		ОтражениеЗарплатыВУчетеБазовый.ДополнитьСведенияОДоходахНДФЛСведениямиОРаспределенииПоСтатьям(Движения);
		
		УчетНДФЛ.СформироватьНалогиВычеты(Движения, Отказ, Организация, ДатаОперацииПоНалогомИВзносам, ДанныеДляПроведения.НДФЛ);
		МесяцСоцВычета = ?(УчетНДФЛ.ДоходыУчитываютсяТолькоПоДатеВыплаты(МесяцНачисления, -1), ДанныеДляПроведенияУчетЗарплаты.ПланируемаяДатаВыплаты, МесяцНачисления);
		УчетНДФЛ.СформироватьСоциальныеВычетыПоУдержаниям(Ссылка, Движения, Отказ, Организация, ДатаОперацииПоНалогомИВзносам, МесяцСоцВычета, ДанныеДляПроведения.УдержанияПоСотрудникам);
		УчетНДФЛ.СформироватьДокументыУчтенныеПриРасчетеДляМежрасчетногоДокументаПоВременнойТаблице(Движения, Отказ, Организация, ДанныеДляПроведения.МенеджерВременныхТаблиц, Ссылка);
		
		УчетНДФЛ.ДополнитьДвиженияСписаниемАванса(Ссылка, Движения, Организация, ДатаОперацииПоНалогомИВзносам);
		
		УчетНачисленнойЗарплаты.ПодготовитьДанныеНДФЛКРегистрации(ДанныеДляПроведения.НДФЛПоСотрудникам, Организация, ДатаОперацииПоНалогомИВзносам);
		УчетНачисленнойЗарплаты.СформироватьСтрокиНДФЛКакЗачетАванса(Движения, ДанныеДляПроведения.НДФЛПоСотрудникам, МесяцНачисления);
		УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛПоСотрудникам(ДанныеДляПроведенияУчетЗарплаты, Отказ, ДанныеДляПроведения.НДФЛПоСотрудникам);
		УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛКЗачетуВозврату(ДанныеДляПроведенияУчетЗарплаты, Отказ,
				ДанныеДляПроведения.КорректировкиВыплатыПоСотрудникам, ДанныеДляПроведения.НДФЛПоСотрудникам);
		
		// Страховые взносы
		УчетСтраховыхВзносов.СформироватьСведенияОДоходахСтраховыеВзносы(Движения, Отказ, Организация, МесяцНачисления, ДанныеДляПроведения.МенеджерВременныхТаблиц, , Истина);
		
		// - Регистрация договоров в доходах для страховых взносов.
		СведенияОДоходахСтраховыеВзносы = УчетСтраховыхВзносов.СведенияОДоходахПоДоговорамСтраховыеВзносы(
				Организация, МесяцНачисления, ДанныеДляПроведения.МенеджерВременныхТаблиц);
			
		УчетСтраховыхВзносов.СформироватьДоходыСтраховыеВзносы(Движения, Отказ, Организация, МесяцНачисления, СведенияОДоходахСтраховыеВзносы, Истина);
			
		УчетСтраховыхВзносов.СформироватьИсчисленныеВзносы(Движения, Отказ, Организация, КонецМесяца(МесяцНачисления), ДанныеДляПроведения.СтраховыеВзносы);
		УчетСтраховыхВзносов.СформироватьСтраховыеВзносыПоФизическимЛицам(Движения, Отказ, Организация, МесяцНачисления, Ссылка, ДанныеДляПроведения.СтраховыеВзносы);
		
		Если Не Отказ Тогда
			
			Движения.НачисленияУдержанияПоСотрудникам.Записать();
			Движения.НачисленияУдержанияПоСотрудникам.Записывать = Ложь;
			
			// формирование проводок
			ДанныеДляПроведения = ОтражениеЗарплатыВУчете.НоваяСтруктураРезультатыРасчетаЗарплаты();
			ДанныеДляПроведения.НачисленияУдержания = Движения.НачисленияУдержанияПоСотрудникам.Выгрузить();
			ДанныеДляПроведения.СтраховыеВзносы = Движения.СтраховыеВзносыПоФизическимЛицам.Выгрузить();
			СтрокаСписокТаблиц = "НачисленнаяЗарплатаИВзносы, НачисленныйНДФЛ, УдержаннаяЗарплата";
			ОтражениеЗарплатыВБухучете.СформироватьДвиженияПоДокументу(Движения, Отказ, Организация, МесяцНачисления, ДанныеДляПроведения, СтрокаСписокТаблиц);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеДляПроведения()
	
	ДанныеДляПроведенияНачисленияЗарплаты = РасчетЗарплаты.СоздатьДанныеДляПроведенияНачисленияЗарплаты();
	
	СписокФизическихЛиц = Неопределено;
	Если ДополнительныеСвойства.Свойство("ФизическиеЛица")
		И ДополнительныеСвойства.ФизическиеЛица.Количество() > 0 Тогда
		
		СписокФизическихЛиц = ДополнительныеСвойства.ФизическиеЛица
		
	КонецЕсли;
	
	РасчетЗарплаты.ЗаполнитьНачисления(ДанныеДляПроведенияНачисленияЗарплаты, Ссылка, , , , , СписокФизическихЛиц);
	РасчетЗарплаты.ЗаполнитьУдержания(ДанныеДляПроведенияНачисленияЗарплаты, Ссылка, , СписокФизическихЛиц);
	РасчетЗарплаты.ЗаполнитьСписокФизическихЛиц(ДанныеДляПроведенияНачисленияЗарплаты, Ссылка, , СписокФизическихЛиц);
	
	ОтражениеЗарплатыВБухучете.СоздатьВТНачисленияСДаннымиЕНВД(Организация, МесяцНачисления,
				ДанныеДляПроведенияНачисленияЗарплаты.МенеджерВременныхТаблиц, ДанныеДляПроведенияНачисленияЗарплаты.НачисленияПоСотрудникам);
	РасчетЗарплатыБазовый.ЗаполнитьДанныеПоДоговорамПодряда(ДанныеДляПроведенияНачисленияЗарплаты, Ссылка, Организация, МесяцНачисления, СписокФизическихЛиц);
	
	РасчетЗарплаты.ЗаполнитьДанныеНДФЛ(ДанныеДляПроведенияНачисленияЗарплаты, Ссылка, СписокФизическихЛиц);
	РасчетЗарплаты.ЗаполнитьДанныеКорректировкиВыплаты(ДанныеДляПроведенияНачисленияЗарплаты, Ссылка, СписокФизическихЛиц);
	РасчетЗарплаты.ЗаполнитьДанныеСтраховыхВзносов(ДанныеДляПроведенияНачисленияЗарплаты, Ссылка, СписокФизическихЛиц);
	
	Возврат ДанныеДляПроведенияНачисленияЗарплаты;
	
КонецФункции

Процедура ЗаполнитьНачисленоУдержано() Экспорт
	
	Начислено = Начисления.Итог("Результат") + НачисленияПоДоговорам.Итог("Результат");
	
	Удержано = Удержания.Итог("Результат");
	Удержано = Удержано + НДФЛ.Итог("Налог");
	
КонецПроцедуры


#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли