
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(
		Метаданные.Документы.ПеремещениеЗапасов.ТабличныеЧасти.Запасы, НастройкиЗагрузкиДанных, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиУНФ.ЗаполнитьДополнительныеПараметры(Объект,
		"ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Прослеживаемость
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбновитьОтображениеПрослеживаемости();		
	КонецЕсли; 
	// Конец Прослеживаемость
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	ОснованиеСоздания = Параметры.Основание;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Объект.ПоложениеПроекта = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ПоложениеПроекта");
		ЗаполнитьСчетЗатратЗначениемПоУмолчанию();
		
		Если Не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			Объект.ПоложениеЯчейкиОтправителя = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки(
				"ПоложениеЯчейкиОтправителя");
			Объект.ПоложениеЯчейкиПолучателя = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки(
				"ПоложениеЯчейкиПолучателя");
		КонецЕсли;
		
	КонецЕсли;
	
	ЗначениеМодифицированностиФормы = Модифицированность;
	Если Не ЗначениеЗаполнено(Объект.ПоложениеЯчейкиОтправителя) Тогда
		Объект.ПоложениеЯчейкиОтправителя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		Модифицированность = ЗначениеМодифицированностиФормы;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ПоложениеЯчейкиПолучателя) Тогда
		Объект.ПоложениеЯчейкиПолучателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		Модифицированность = ЗначениеМодифицированностиФормы;
	КонецЕсли;
	
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	ИспользоватьПроекты = ПолучитьФункциональнуюОпцию("УчетПоПроектам");
	
	СтруктурнаяЕдиницаТипСтруктурнойЕдиницы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтруктурнаяЕдиница,
		"ТипСтруктурнойЕдиницы");
	СтруктурнаяЕдиницаПолучательТипСтруктурнойЕдиницы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Объект.СтруктурнаяЕдиницаПолучатель, "ТипСтруктурнойЕдиницы");
	ЕстьРозница = СтруктурнаяЕдиницаТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница
				ИЛИ СтруктурнаяЕдиницаПолучательТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница;
	ЕстьРозницаСуммовойУчет = СтруктурнаяЕдиницаТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет
				ИЛИ СтруктурнаяЕдиницаПолучательТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет;
	
	// ФО Использовать подсистему Производство.
	УстановитьВидимостьОтФОИспользоватьПодсистемуПроизводство();

	Пользователь = Пользователи.ТекущийПользователь();
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.СписаниеНаРасходы Тогда
		Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить() Тогда
			ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,
				"ОсновноеПодразделение");
			ОсновноеПодразделение = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки,
				Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
			Объект.СтруктурнаяЕдиницаПолучатель = ОсновноеПодразделение;
		КонецЕсли;
	КонецЕсли;
	
	// ГТД и РНПТ
	ИменаТЧИПолей = ГрузовыеТаможенныеДекларацииСервер.ИменаТЧИПолейДляТаблицыЗапасы_БазовыеПоляСПрослеживаемостью();
	ГрузовыеТаможенныеДекларацииСервер.ПриСозданииНаСервереДляДокументаСПрослеживаемостью(ЭтотОбъект, ИменаТЧИПолей, КэшЗначений);
	// Конец ГТД и РНПТ
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УчетОстатковПоСкладскимОрдерамКПоступлению = СкладскойУчетСервер.УчетОстатковВРазрезеСкладскихОрдеров(
			Объект.СтруктурнаяЕдиницаПолучатель, , Истина);
		УчетОстатковПоСкладскимОрдерамКОтгрузке = СкладскойУчетСервер.УчетОстатковВРазрезеСкладскихОрдеров(
			Объект.СтруктурнаяЕдиница, Ложь, Истина);
		ПриИзмененииВидаУчетаСклада(ЭтотОбъект);
	КонецЕсли;
	
	КэшЗначений.Вставить("Перемещение", Перечисления.ВидыОперацийПеремещениеЗапасов.Перемещение);
	КэшЗначений.Вставить("СписаниеНаРасходы", Перечисления.ВидыОперацийПеремещениеЗапасов.СписаниеНаРасходы);
	КэшЗначений.Вставить("ПоложениеЗаказаВТабличнойЧасти", Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	КэшЗначений.Вставить("ПередачаВЭксплуатацию", Перечисления.ВидыОперацийПеремещениеЗапасов.ПередачаВЭксплуатацию);
	
	НаборСвойств_Документ_ПеремещениеЗапасов = УправлениеСвойствами.НаборСвойствПоИмени("Документ_ПеремещениеЗапасов");
	КэшЗначений.Вставить("НаборСвойств_Документ_ПеремещениеЗапасов", НаборСвойств_Документ_ПеремещениеЗапасов);
	
	// Установить надпись основание
	Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(
		Объект.ДокументОснование);
	ЗаполнитьСписокДокументОснование();
	Если ТолькоПросмотр Тогда
		Элементы.ДокументОснованиеНадпись.Доступность = Ложь;
	КонецЕсли;
	
	ПоказыватьКолонкуВесВПеремещенииЗапасов = 
		УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,
			"ПоказыватьКолонкуВесВПеремещенииЗапасов");
	ПоказыватьКолонкуОбъемВПеремещенииЗапасов = 
		УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,
			"ПоказыватьКолонкуОбъемВПеремещенииЗапасов");
			
	УстановитьВидимостьЭлементовПоНастройкеПользователя(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПрочитатьВесИОбъемЕдиницыТовара();
	КонецЕсли;			
	
	УстановитьВидимостьИДоступность();
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	ЭлектроннаяПочтаУНФ.УстановитьОтображениеКомандОтправкиСообщений(Элементы);
		
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	СписокЭлектронныхВесов = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("ЭлектронныеВесы", ,
		МенеджерОборудованияВызовСервера.РабочееМестоКлиента());
	Если СписокЭлектронныхВесов.Количество() = 0 Тогда
		// Нет подключенных весов.
		Элементы.ЗапасыПолучитьВес.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
	
	ОпределитьВидимостьНастроекУчетаВНалогообложении();	
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Запасы");
	
	// Серии номенклатуры
	ИспользоватьСерииНоменклатурыОстатки = СерииНоменклатурыУНФ.ИспользоватьСерииНоменклатурыОстатки();
	Элементы.ЗапасыГруппаСерииНоменклатуры.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	
	// Характеристики
	НоменклатураВДокументахСервер.ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристик(ЭтотОбъект);
	Если Объект.Ссылка.Пустая() Тогда
		КэшЗначений.Вставить("СтруктурнаяЕдиницаПолучательТип", 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтруктурнаяЕдиницаПолучатель, "ТипСтруктурнойЕдиницы", Истина));
		ДействияПослеЧтенияОбъекта();
	КонецЕсли;
	
	// Прослеживаемость
	ПрослеживаемостьФормыУНФ.ОбновитьУсловноеОформлениеТабличнойЧастиДляПрослеживаемости(ЭтотОбъект);
	
	// ИнтеграцияГосИС
	СобытияФормИСУНФ.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец ИнтеграцияГосИС
	
	// МобильныйКлиент
	МобильныйКлиентУНФ.НастроитьФормуОбъектаМобильныйКлиент(Элементы);
	// Конец МобильныйКлиент
	
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтотОбъект,
		"ПеремещениеЗапасов", НастройкиФормыВыбораНоменклатуры, , "Запасы");
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтотОбъект,
		"ПеремещениеЗапасов", НастройкиФормыВыбораНоменклатуры, , "Спецоснастка");
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтотОбъект,
		"ПеремещениеЗапасов", НастройкиФормыВыбораНоменклатуры, , "ИнвентарьИХозяйственныеПринадлежности");
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтотОбъект, "Запасы");
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтотОбъект, "Спецоснастка");
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтотОбъект,
		"ИнвентарьИХозяйственныеПринадлежности");
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");

	НастройкиКоличества = ПолучитьНастройкиИзмененияКоличества();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиКоличества);
			
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Прослеживаемость
	ОбновитьОтображениеПрослеживаемости(); 
	// Конец Прослеживаемость
	
	// ИнтеграцияГосИС
	СобытияФормИСУНФ.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтеграцияГосИС
	
	КэшЗначений.Вставить("СтруктурнаяЕдиницаПолучательТип", 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтруктурнаяЕдиницаПолучатель, "ТипСтруктурнойЕдиницы", Истина));
	ДействияПослеЧтенияОбъекта();
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");

	ПрочитатьВесИОбъемЕдиницыТовара();
	
	УчетОстатковПоСкладскимОрдерамКПоступлению = СкладскойУчетСервер.УчетОстатковВРазрезеСкладскихОрдеров(
		Объект.СтруктурнаяЕдиницаПолучатель, , Истина);
	УчетОстатковПоСкладскимОрдерамКОтгрузке = СкладскойУчетСервер.УчетОстатковВРазрезеСкладскихОрдеров(
		Объект.СтруктурнаяЕдиница, Ложь, Истина);
	ПриИзмененииВидаУчетаСклада(ЭтотОбъект);
	
КонецПроцедуры // ПриЧтенииНаСервере()

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	СтатистикаИспользованияФормКлиент.ПроверитьЗаписатьСтатистикуКоманды(
		"СоздатьНаОсновании.ПеремещениеЗапасов",
		ВладелецФормы,
		ОснованиеСоздания);
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	УстановитьПараметрыВыбора();
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события ОбработкаВыбора.
//
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПечатьТТН.Форма.ДанныеПечати" Тогда
		
		Для каждого ЗначенияРеквизита Из ВыбранноеЗначение Цикл
			
			Если ЗначенияРеквизита.Ключ = "БанковскийСчетОрганизации" Тогда
				
				Объект.БанковскийСчет = ЗначенияРеквизита.Значение;
				
			Иначе
				
				Объект[ЗначенияРеквизита.Ключ] = ЗначенияРеквизита.Значение;
				
			КонецЕсли;
			
			Модифицированность = Истина;
			
		КонецЦикла;
		
	// Прослеживаемость
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаПодбораРНПТ" Тогда
		
		ОбработкаВыбораРНПТННаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаВыбора" Тогда
		
		ОбработкаВыбораГТДНаКлиенте(ВыбранноеЗначение);
		
	// Конец Прослеживаемость
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события ПередЗаписью.
//
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("Проведение"
			+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ИмяФормы));
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

// Процедура - обработчик события ПередЗаписьюНаСервере.
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры // ПередЗаписьюНаСервере()

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ДействияПослеЧтенияОбъекта();
	ПрочитатьВесИОбъемЕдиницыТовара();

	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);
	// Конец Обсуждения
	
	// ИнтеграцияГосИС
	СобытияФормИСУНФ.ПослеЗаписиНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияГосИС
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Данные = МенеджерОборудованияУНФКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		АдресЗапасовВХранилище = Параметр;
		
		ИмяТабличнойЧасти = "Запасы";
		Если ЗначениеЗаполнено(МаркерПодбора) Тогда
			ИмяТабличнойЧасти = МаркерПодбора;
		КонецЕсли;
		
		ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, Истина, Истина);
		РассчитатьОбъемИВесВДокументе();		
		
	ИначеЕсли ИмяСобытия = "ПодборСерий"
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		ИзменилосьКоличество = ПолучитьСерииНоменклатурыИзХранилища(Параметр.АдресВоВременномХранилище,
			Параметр.КлючСтроки);
		Если ИзменилосьКоличество Тогда
			РассчитатьСуммуВСтрокеТабличнойЧасти();
		КонецЕсли; 
		
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Запасы");
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
	// ИнтеграцияГосИС
	СобытияФормИСУНФКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтеграцияГосИС

КонецПроцедуры // ОбработкаОповещения()

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	// ИнтеграцияГосИС
	СобытияФормИСУНФКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	// Конец ИнтеграцияГосИС
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПоказатьПодтверждениеЗакрытияФормыСФайлами(ЭтотОбъект, Отказ, ЗавершениеРаботы, Объект.Ссылка);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

// Процедура - обработчик события ПриЗакрытии.
//
&НаКлиенте
Процедура ПриЗакрытии()
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры // ПриЗакрытии()

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	// Прослеживаемость
	Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	КонецЦикла;
	// Конец Прослеживаемость
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДокументОтгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Организация", Объект.Организация);
	СтруктураОткрытия.Вставить("ТолькоПоДокументам", Истина);
	СтруктураОткрытия.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиница);
	СтруктураОткрытия.Вставить("ТолькоПоОрдерам", Истина);
	СтруктураОткрытия.Вставить("КПоступлению", Ложь);
	
	ОткрытьФорму("ОбщаяФорма.ПодборПоОстаткамТоваровКПоступлениюРеализации", СтруктураОткрытия, Элемент, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументПоступленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Организация", Объект.Организация);
	СтруктураОткрытия.Вставить("ТолькоПоДокументам", Истина);
	СтруктураОткрытия.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиницаПолучатель);
	СтруктураОткрытия.Вставить("ТолькоПоОрдерам", Истина);
	СтруктураОткрытия.Вставить("КПоступлению", Истина);
	
	ОткрытьФорму("ОбщаяФорма.ПодборПоОстаткамТоваровКПоступлениюРеализации", СтруктураОткрытия, Элемент, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДанныеДляИзмененияДаты = ДокументыУНФКлиент.ДанныеДляИзмененияДаты(ЭтотОбъект, Объект);
	Если ДанныеДляИзмененияДаты.ДатаНеМенялась Тогда
		Возврат;
	КонецЕсли;
	
	ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты);
	
	//Налоги
	ОпределитьВидимостьНастроекУчетаВНалогообложении();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ВидОперации.
//
&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ОбработатьИзменениеВидаОперации();
	
	Если Объект.ВидОперации = КэшЗначений.Перемещение Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			СтрокаТабличнойЧасти["СтранаПроисхождения"] = Неопределено;
			СтрокаТабличнойЧасти["НомерГТД"] = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.ВидОперации <> КэшЗначений.Перемещение И Объект.ВидОперации <> КэшЗначений.СписаниеНаРасходы Тогда
		Объект.ПоложениеЗаказаПокупателя = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке");
		Объект.ПоложениеПроекта = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке");
		Объект.ПоложениеЯчейкиОтправителя = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке");
		Объект.ПоложениеЯчейкиПолучателя = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке");
		Объект.ЗаказПокупателя = Неопределено;
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			СтрокаТабличнойЧасти.ЗаказПокупателя = Неопределено;
			СтрокаТабличнойЧасти.Ячейка = Неопределено;
			СтрокаТабличнойЧасти.ЯчейкаПолучатель = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.ВидОперации = КэшЗначений.СписаниеНаРасходы или Объект.ВидОперации = КэшЗначений.ПередачаВЭксплуатацию Тогда
		Элементы.СчетЗатрат.АвтоОтметкаНезаполненного = Истина; 
	КонецЕсли;
	ОбновитьВидимостьПредупреждения(ЭтотОбъект);
	
КонецПроцедуры // ВидОперацииПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СчетЗатрат.
//
&НаКлиенте
Процедура СчетЗатратПриИзменении(Элемент)
	
	Элементы.НаправлениеДеятельности.Видимость = ПолучитьВидимостьНаправленияДеятельности(Объект.СчетЗатрат);
	
КонецПроцедуры // СчетЗатратПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СтруктурнаяЕдиница.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("ВидОперации", Объект.ВидОперации);
	СтруктураДанные.Вставить("Источник", Объект.СтруктурнаяЕдиница);
	
	СтруктураДанные = ПолучитьДанныеСтруктурнаяЕдиницаПриИзменении(СтруктураДанные);
	
	Объект.ПодписьКладовщикаОтправил = СтруктураДанные.ПодписьКладовщика;
	
	ЯчейкаВидимость = УчетПоЯчейкам;
	
	Элементы.Ячейка.Видимость = ЯчейкаВидимость И Объект.ПоложениеЯчейкиОтправителя = ПредопределенноеЗначение(
		"Перечисление.ПоложениеРеквизитаНаФорме.ВШапке");
	Элементы.ЗапасыЯчейка.Видимость = ЯчейкаВидимость И Объект.ПоложениеЯчейкиОтправителя = ПредопределенноеЗначение(
		"Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");
	Элементы.СтруктурнаяЕдиница.АвтоМаксимальнаяШирина = НЕ Элементы.Ячейка.Видимость;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаПолучатель) Тогда
		Объект.СтруктурнаяЕдиницаПолучатель = СтруктураДанные.СтруктурнаяЕдиницаПолучатель;
		Объект.ЯчейкаПолучатель = СтруктураДанные.ЯчейкаПолучатель;
		
		ЯчейкаПолучательВидимость = УчетПоЯчейкам;
		
		Элементы.ЯчейкаПолучатель.Видимость = ЯчейкаПолучательВидимость И Объект.ПоложениеЯчейкиПолучателя
			= ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке");
		Элементы.ЗапасыЯчейкаПолучатель.Видимость = ЯчейкаПолучательВидимость И Объект.ПоложениеЯчейкиПолучателя
			= ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");
		
		Элементы.СтруктурнаяЕдиницаПолучатель.АвтоМаксимальнаяШирина = НЕ Элементы.ЯчейкаПолучатель.Видимость;
		КэшЗначений.Вставить("СтруктурнаяЕдиницаПолучательТип", СтруктураДанные.СтруктурнаяЕдиницаПолучательТип);
	КонецЕсли;
	
	Если СтруктураДанные.ТипСтруктурнойЕдиницыРозницаСуммовойУчет Тогда
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыСебестоимость.Видимость = Истина;
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыСумма.Видимость = Истина;
	ИначеЕсли НЕ СтруктураДанные.ТипСтруктурнойЕдиницыРозницаСуммовойУчет Тогда
		Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
			СтрокаЗапасы.Себестоимость = 0;
			СтрокаЗапасы.Сумма = 0;
		КонецЦикла;
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыСебестоимость.Видимость = Ложь;
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыСумма.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьПараметрыВыбора();
	ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита();
	ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов();
	ОбновитьВидимостьПредупреждения(ЭтотОбъект); 
	
КонецПроцедуры // СтруктурнаяЕдиницаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СтруктурнаяЕдиницаПолучатель.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаПолучательПриИзменении(Элемент)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("ВидОперации", Объект.ВидОперации);
	СтруктураДанные.Вставить("Получатель", Объект.СтруктурнаяЕдиницаПолучатель);
	
	СтруктураДанные = ПолучитьДанныеСтруктурнаяЕдиницаПолучательПриИзменении(СтруктураДанные);
	
	Объект.ПодписьКладовщикаПолучил = СтруктураДанные.ПодписьКладовщика;
	
	ЯчейкаПолучательВидимость = УчетПоЯчейкам;
	Элементы.ЯчейкаПолучатель.Видимость = ЯчейкаПолучательВидимость И Объект.ПоложениеЯчейкиПолучателя
		= ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке");
	Элементы.ЗапасыЯчейкаПолучатель.Видимость = ЯчейкаПолучательВидимость И Объект.ПоложениеЯчейкиПолучателя
		= ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");
	Элементы.СтруктурнаяЕдиницаПолучатель.АвтоМаксимальнаяШирина = НЕ Элементы.ЯчейкаПолучатель.Видимость;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		Объект.СтруктурнаяЕдиница = СтруктураДанные.СтруктурнаяЕдиница;
		Объект.Ячейка = СтруктураДанные.Ячейка;
		ЯчейкаВидимость = УчетПоЯчейкам;
		Элементы.Ячейка.Видимость = ЯчейкаВидимость И Объект.ПоложениеЯчейкиОтправителя = ПредопределенноеЗначение(
			"Перечисление.ПоложениеРеквизитаНаФорме.ВШапке");
		Элементы.ЗапасыЯчейка.Видимость = ЯчейкаВидимость И Объект.ПоложениеЯчейкиОтправителя
			= ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");
		Элементы.СтруктурнаяЕдиница.АвтоМаксимальнаяШирина = НЕ Элементы.Ячейка.Видимость;
	КонецЕсли;
	
	СтруктураДанные.Свойство("АдресДоставки", Объект.АдресДоставки);
	КэшЗначений.Вставить("СтруктурнаяЕдиницаПолучательТип", СтруктураДанные.ТипСтруктурнойЕдиницы);
	
	УстановитьПараметрыВыбора();
	
	ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов();
	ОбновитьВидимостьПредупреждения(ЭтотОбъект);
	
КонецПроцедуры // СтруктурнаяЕдиницаПолучательПриИзменении()

// Процедура - обработчик события Открытие поля ввода СтруктурнаяЕдиница.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.СтруктурнаяЕдиница.РежимВыбораИзСписка
		И НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // СтруктурнаяЕдиницаОткрытие()

// Процедура - обработчик события Открытие поля ввода СтруктурнаяЕдиницаПолучатель.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаПолучательОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.СтруктурнаяЕдиницаПолучатель.РежимВыбораИзСписка
		И НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаПолучатель) Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // СтруктурнаяЕдиницаПолучательОткрытие()


&НаКлиенте
Процедура ЗаказПокупателяПриИзменении(Элемент)
	
	Если ИспользоватьПроекты Тогда
		Объект.Проект = ПолучитьПроектИзЗаказа(Объект.ЗаказПокупателя);
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		СтрокаТабличнойЧасти.ЗаказПокупателя = Объект.ЗаказПокупателя;
		СтрокаТабличнойЧасти.Проект = Объект.Проект;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		СтрокаТабличнойЧасти.Проект = Объект.Проект;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоясняющийТекстПредупрежденияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Выделение запасов с типом счета затрат "Расходы"
	Элементы.Запасы.ВыделенныеСтроки.Очистить();
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		Если СтрокаТабличнойЧасти.ТипСчетаЗатрат = ПредопределенноеЗначение("Перечисление.ТипыСчетов.Расходы") Тогда
			Элементы.Запасы.ВыделенныеСтроки.Добавить(СтрокаТабличнойЧасти.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "удалить" Тогда
		Объект.ДокументОснование = Неопределено;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(
			Неопределено);
		Модифицированность = Истина;
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "заполнить" Тогда
		ЗаполнитьПоОснованиюНачало();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "выбрать" Тогда
		// Выбрать основание
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборТипаОснованияЗавершение", ЭтотОбъект);
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокДокументОснование, Элементы.ДокументОснованиеНадпись);

	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "открыть" Тогда

		РаботаСФормойДокументаКлиент.ОткрытьФормуДокументаПоСсылке(Объект.ДокументОснование);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРеквизитыПечатиНажатие(Элемент)
	
	ОткрытьФормуРеквизитыПечати();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасы

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьСбросКоличества И СбрасыватьКоличество
		И СтрокаТабличнойЧасти.Количество <> НовоеКоличествоПриИзмененииНоменклатуры Тогда
		
		ДопПараметр = Новый Структура();
		ДопПараметр.Вставить("Элемент", Элемент);
		ДопПараметр.Вставить("Количество", СтрокаТабличнойЧасти.Количество);
		Оповещение = Новый ОписаниеОповещения("ЗапасыПодтверждениеСбросаКоличестваЗавершение", ЭтотОбъект, ДопПараметр);
		ОткрытьФорму("ОбщаяФорма.ПодтверждениеСбросаКоличества", , , , , , Оповещение);
		
	Иначе
		
		Если СбрасыватьКоличество Тогда
			НовоеКоличество = НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
		ЗапасыНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество);
		
	КонецЕсли;	
	
КонецПроцедуры // ЗапасыНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗапасыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("ВидОперации",			Объект.ВидОперации);
	СтруктураДанные.Вставить("Организация",			Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура",		СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",		СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия",				СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("СтранаПроисхождения",	СтрокаТабличнойЧасти.СтранаПроисхождения);
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПартияПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = СтруктураДанные.НомерГТД;
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПартияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("ВидОперации",			Объект.ВидОперации);
	СтруктураДанные.Вставить("Организация",			Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура",		СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",		СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия",				СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("СтранаПроисхождения",	СтрокаТабличнойЧасти.СтранаПроисхождения);
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПартияПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = СтруктураДанные.НомерГТД;
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтотОбъект,
				"ПеремещениеЗапасов", НастройкиФормыВыбораНоменклатуры, Истина, "Запасы",
				ВыбранноеЗначение.СтруктураНастроек);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтотОбъект, "Запасы");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;
	РассчитатьОбъемИВесВДокументе();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Вес = СтрокаТабличнойЧасти.ВесЕдиницыТовара * СтрокаТабличнойЧасти.Количество;
	СтрокаТабличнойЧасти.Объем = СтрокаТабличнойЧасти.ОбъемЕдиницыТовара * СтрокаТабличнойЧасти.Количество;
	
	НоменклатураВДокументахКлиент.КонтрольЗначенияРезерваВТекущейСтроке(СтрокаТабличнойЧасти);
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
	РассчитатьОбъемИВесВДокументе();
		
КонецПроцедуры // ТоварыКоличествоЕдиницПриИзменении()

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат 
	КонецЕсли;
	
	РассчитатьОбъемИВесВДокументе();
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
	
КонецПроцедуры


// Процедура - обработчик события ПриИзменении поля ввода Себестоимость.
//
&НаКлиенте
Процедура ЗапасыСебестоимостьПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Себестоимость;

КонецПроцедуры // ЗапасыСебестоимостьПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ЗапасыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Себестоимость = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
КонецПроцедуры // ЗапасыСуммаПриИзменении()

&НаКлиенте
Процедура ЗапасыРНПТНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтотОбъект, "Запасы", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРНПТОчистка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		Если СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
			УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
		Иначе
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
		КонецЕсли;
		
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаТабличнойЧасти);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "ЗаказПокупателя",
			"ПоложениеЗаказаПокупателя");
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "Проект", "ПоложениеПроекта");
	КонецЕсли; 
	
	Если НоваяСтрока И Копирование Тогда
		СтрокаТабличнойЧасти.КлючСвязи = 0;
		СтрокаТабличнойЧасти.СерииНоменклатуры = "";
		СтрокаТабличнойЧасти.ИдентификаторСтроки = "";
		СтрокаТабличнойЧасти.РНПТ = "";
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыСерииНоменклатуры Тогда
		ОткрытьПодборСерииНоменклатуры();
	КонецЕсли;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТабличнойЧасти.Количество = НовоеКоличествоПриИзмененииНоменклатуры;
	КонецЕсли;
		
	ЭтоНоваяСтрокаЗапасы = НоваяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриИзменении(Элемент)
	
    ОбновитьВидимостьПредупреждения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ЭтоНоваяСтрокаЗапасы = Ложь;
	РассчитатьОбъемИВесВДокументе();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВесПриИзменении(Элемент)
	
	РассчитатьОбъемИВесВДокументе();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыОбъемПриИзменении(Элемент)
	
	РассчитатьОбъемИВесВДокументе();
	
КонецПроцедуры



&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	
	// Подчиненные табличные части
	Если НЕ Отказ Тогда
		Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
			// Серийные номера
			СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры,
				ТекущиеДанныеСтроки, ИспользоватьСерииНоменклатурыОстатки);
			// Прослеживаемость
			УдалитьСвязанныеЗаписи(ТекущиеДанныеСтроки);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПослеУдаления(Элемент)
	
	ОбновитьВидимостьПредупреждения(ЭтотОбъект);
	РассчитатьОбъемИВесВДокументе();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Объект.Запасы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	// Прослеживаемость
	Если Поле = Элементы.ЗапасыРНПТ И СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
		ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтотОбъект, "Запасы", Ложь);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	Если Поле.Имя = "ЗапасыПрослеживаемыйТовар" Тогда
		Если СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
			ПрослеживаемостьФормыКлиентУНФ.ПоказатьПредупреждениеПрослеживаемыйТовар();
		КонецЕсли;
	КонецЕсли;
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриАктивизацииЯчейки(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат 
	КонецЕсли;
	
	// Прослеживаемость
	Если ЭтоНоваяСтрокаЗапасы
		И Элементы.Запасы.ТекущийЭлемент = Элементы.ЗапасыРНПТ 
		И Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.РНПТ) Тогда
		ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтотОбъект, "Запасы", Ложь);
	КонецЕсли;
	// Конец Прослеживаемость
		
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНомерГТДПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
		
		ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
		Если ДатаГТД > КонецДня(Объект.Дата) Тогда
			
			ТекстСообщения = НСтр("ru ='Внимание: выбранная ГТД датирована более поздней датой, чем текущий документ.'");
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Запасы",
				СтрокаТабличнойЧасти.НомерСтроки, "НомерГТД");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , КонтекстноеПоле);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНомерГТДПриРНПТПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
		
		ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
		Если ДатаГТД > КонецДня(Объект.Дата) Тогда
			
			ТекстСообщения = НСтр("ru ='Внимание: выбранная ГТД датирована более поздней датой, чем текущий документ.'");
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Запасы",
				СтрокаТабличнойЧасти.НомерСтроки, "НомерГТД");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , КонтекстноеПоле);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтранаПроисхожденияПриИзменении(Элемент)
	
	Если КэшЗначений.УчетГТД Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения)
			ИЛИ СтрокаТабличнойЧасти.СтранаПроисхождения = КэшЗначений.Россия Тогда
			
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСерииНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерииНоменклатуры();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИнвентарьИХозяйственныеПринадлежности

&НаКлиенте
Процедура ИнвентарьИХозяйственныеПринадлежностиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТабличнойЧасти.Количество = НовоеКоличествоПриИзмененииНоменклатуры;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура таб. части ИнвентарьИХозяйственныеПринадлежности.
//
&НаКлиенте
Процедура ИнвентарьИХозяйственныеПринадлежностиНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ИнвентарьИХозяйственныеПринадлежности.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьСбросКоличества И СбрасыватьКоличество
		И СтрокаТабличнойЧасти.Количество <> НовоеКоличествоПриИзмененииНоменклатуры Тогда
		
		ДопПараметр = Новый Структура();
		ДопПараметр.Вставить("Элемент", Элемент);
		ДопПараметр.Вставить("Количество", СтрокаТабличнойЧасти.Количество);
		Оповещение = Новый ОписаниеОповещения("ИнвентарьИХозяйственныеПринадлежностиПодтверждениеСбросаКоличестваЗавершение",
			ЭтотОбъект, ДопПараметр);
		ОткрытьФорму("ОбщаяФорма.ПодтверждениеСбросаКоличества", , , , , , Оповещение);
		
	Иначе
		
		Если СбрасыватьКоличество Тогда
			НовоеКоличество = НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
		ИнвентарьИХозяйственныеПринадлежностиНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентарьИХозяйственныеПринадлежностиНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение,
	СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Элементы.ИнвентарьИХозяйственныеПринадлежности.ТекущиеДанные;
	
	Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
		НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтотОбъект,
			"ПеремещениеЗапасов", НастройкиФормыВыбораНоменклатуры, Истина, "ИнвентарьИХозяйственныеПринадлежности",
			ВыбранноеЗначение.СтруктураНастроек);
		НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтотОбъект,
			"ИнвентарьИХозяйственныеПринадлежности");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
	
	ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
	
	Если Не ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
		СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	КонецЕсли;
	
	СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
	СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
	
	ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСпецоснастка

&НаКлиенте
Процедура СпецоснасткаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТабличнойЧасти.Количество = НовоеКоличествоПриИзмененииНоменклатуры;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура таб. части Спецоснастка.
//
&НаКлиенте
Процедура СпецоснасткаНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Спецоснастка.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьСбросКоличества И СбрасыватьКоличество
		И СтрокаТабличнойЧасти.Количество <> НовоеКоличествоПриИзмененииНоменклатуры Тогда
		
		ДопПараметр = Новый Структура();
		ДопПараметр.Вставить("Элемент", Элемент);
		ДопПараметр.Вставить("Количество", СтрокаТабличнойЧасти.Количество);
		Оповещение = Новый ОписаниеОповещения("СпецоснасткаПодтверждениеСбросаКоличестваЗавершение",
			ЭтотОбъект, ДопПараметр);
		ОткрытьФорму("ОбщаяФорма.ПодтверждениеСбросаКоличества", , , , , , Оповещение);
		
	Иначе
		
		Если СбрасыватьКоличество Тогда
			НовоеКоличество = НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
		СпецоснасткаНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество);
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура СпецоснасткаНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти = Элементы.Спецоснастка.ТекущиеДанные;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтотОбъект,
				"ПеремещениеЗапасов", НастройкиФормыВыбораНоменклатуры, Истина, "Спецоснастка",
				ВыбранноеЗначение.СтруктураНастроек);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтотОбъект, "Спецоснастка");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоДокументуОтгрузки(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоРасходномуОрдеру", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр(
		"ru = 'Документ будет перезаполнен по ""Расходному ордеру"". Продолжить выполнение операции?'"),
		РежимДиалогаВопрос.ДаНет, 0);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументуПоступления(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоПриходномуОрдеру", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр(
		"ru = 'Документ будет перезаполнен по ""Приходному ордеру"". Продолжить выполнение операции?'"),
		РежимДиалогаВопрос.ДаНет, 0);
КонецПроцедуры

&НаКлиенте
Процедура ШапкаТабличнаяЧасть(Команда)
	
	ОткрытьФормуНастройки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаФормы(Команда)
	
	ОткрытьФормуНастройки(Истина);
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элементы.ФормаНастройкаФормы, "Нажатие");
	
КонецПроцедуры

// Процедура обработчик события команды ЗаполнитьПоОстаткам
//
&НаКлиенте
Процедура ЗаполнитьПоОстаткамНаСкладе(Команда)
	
	ЗаполнитьПоОстаткамНаСкладеНачало("Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамНаСкладеСпецоснастка(Команда)
	
	ЗаполнитьПоОстаткамНаСкладеНачало("Спецоснастка");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамНаСкладеИнвентарь(Команда)
	
	ЗаполнитьПоОстаткамНаСкладеНачало("ИнвентарьИХозяйственныеПринадлежности");
	
КонецПроцедуры

// Процедура - обработчик команды ЗаполнитьПоРезервам подменю ИзменитьРезерв.
//
&НаКлиенте
Процедура ИзменитьРезервЗаполнитьПоРезервам(Команда)

	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Запасы"" не заполнена.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;

	ЗаполнитьКолонкуРезервПоРезервамНаСервере();

КонецПроцедуры // ИзменитьРезервЗаполнитьПоРезервам()

// Процедура - обработчик команды ОчиститьРезерв подменю ИзменитьРезерв.
//
&НаКлиенте
Процедура ИзменитьРезервОчиститьРезерв(Команда)

	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Запасы"" не заполнена.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;

	Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		СтрокаТабличнойЧасти.Резерв = 0;
	КонецЦикла;

КонецПроцедуры // ИзменитьРезервЗаполнитьПоОстаткам()

&НаКлиенте
Процедура РежимГТД(Команда)

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РежимГТД", "Пометка",
		Не Элементы.РежимГТД.Пометка);

	ИзменитьРежимРаботаГТД(Элементы.РежимГТД.Пометка);

КонецПроцедуры

&НаКлиенте
Процедура НомераГТДЗаполнитьПоФактическимОстаткам(Команда)
	
	НомераГТДЗаполнитьПоФактическимОстаткамНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НомераГТДПодобрать(Команда)
	
	НомераГТДПодобратьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьНомераГТДИСтраныПроисхождения(Команда)
	
	НомераГТДОчиститьНомераИСтраныПроисхожденияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", КэшЗначений.НаборСвойств_Документ_ПеремещениеЗапасов);
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);

	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы, , , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура НастройкаСбросаКоличества(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтрокаПоиска", НСтр("ru = 'Сбрасывать количество при изменении номенклатуры'"));
	Оповещение = Новый ОписаниеОповещения("НастройкаСбросаКоличестваЗавершение", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.НастройкиПользователей.Форма.ФормаНастройкиПользователя", СтруктураПараметров, , , , ,
		Оповещение);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, 
		Элементы.ЗапасыКонтекстноеМенюНастройкаСбросаКоличества, "Нажатие");
	
КонецПроцедуры

#Область ИнтеграцияИС

// ИнтеграцияИС

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ПолеИнтеграцииИСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)

	ИнтеграцияИСКлиент.ОбработкаНавигационнойСсылкиВФормеДокументаОснования(
		ЭтотОбъект, Объект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);

КонецПроцедуры
// Конец ИнтеграцияИС

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьПоЗаказу(Команда)

	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоЗаказуЗавершение", ЭтотОбъект), НСтр(
		"ru = 'Документ будет полностью перезаполнен по ""Заказу покупателя"". Продолжить выполнение операции?'"),
		РежимДиалогаВопрос.ДаНет, 0);

КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьПоЗаказуНаПеремещение(Команда)

	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоЗаказуНаПеремещениеЗавершение", ЭтотОбъект), НСтр(
		"ru = 'Документ будет полностью перезаполнен по ""Заказу на перемещение"". Продолжить выполнение операции?'"),
		РежимДиалогаВопрос.ДаНет, 0);

КонецПроцедуры


&НаКлиенте
Процедура ЗагрузкаИзФайлаЗапасы(Команда)
	
	НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ПеремещениеЗапасов.ТабличнаяЧасть.Запасы";
	
	НастройкиЗагрузкиДанных.Вставить("ПолноеИмяТабличнойЧасти", "ПеремещениеЗапасов.Запасы");
	НастройкиЗагрузкиДанных.Вставить("ИмяМакетаСШаблоном","ЗагрузкаИзФайлаЗапасы");
	НастройкиЗагрузкиДанных.Вставить("Заголовок", НСтр("ru = 'Загрузка запасов из файла'"));
	НастройкиЗагрузкиДанных.Вставить("СодержаниеВидимо", Истина);		
	НастройкиЗагрузкиДанных.Вставить("ВидОперации", Объект.ВидОперации);	
	НастройкиЗагрузкиДанных.Вставить("ЕстьРозничноеПеремещение", ЕстьРозница);
	НастройкиЗагрузкиДанных.Вставить("ЕстьРозничныйСуммовойУчет", ЕстьРозницаСуммовойУчет);
	НастройкиЗагрузкиДанных.Вставить("ИспользуетсяРезервирование", ИспользуетсяРезервирование);
	НастройкиЗагрузкиДанных.Вставить("ЗагрузкаТабличнойЧастиУслуги", Ложь);
	
	НастройкиЗагрузкиДанных.Вставить("ЯчейкаОтправительВТабличнойЧасти", Объект.ПоложениеЯчейкиОтправителя
		= ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти"));
	НастройкиЗагрузкиДанных.Вставить("ЯчейкаПолучательВТабличнойЧасти", Объект.ПоложениеЯчейкиПолучателя
		= ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти"));
	
	НастройкиЗагрузкиДанных.Вставить("СкладОтправитель", Объект.СтруктурнаяЕдиница);
	НастройкиЗагрузкиДанных.Вставить("СкладПолучатель", Объект.СтруктурнаяЕдиницаПолучатель);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект,
		НастройкиЗагрузкиДанных);
	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных,
		ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Копировать строки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Запасы");
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Вставить строки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыВставитьСтроки(Команда)
	
	ВставитьСтроки("Запасы");
	РассчитатьОбъемИВесВДокументе();
	
КонецПроцедуры

&НаКлиенте
Процедура СпецоснасткаКопироватьСтроки(Команда)
	
	КопироватьСтроки("Спецоснастка");
	
КонецПроцедуры

&НаКлиенте
Процедура СпецоснасткаВставитьСтроки(Команда)
	
	ВставитьСтроки("Спецоснастка");
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентарьКопироватьСтроки(Команда)
	
	КопироватьСтроки("ИнвентарьИХозяйственныеПринадлежности");
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентарьВставитьСтроки(Команда)
	
	ВставитьСтроки("ИнвентарьИХозяйственныеПринадлежности");
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

// Процедура - обработчик события Действие команды Подбор
//
&НаКлиенте
Процедура Подбор(Команда)
	
	ПодобратьТовары("Запасы");
	
КонецПроцедуры // ПодборВыполнить()

&НаКлиенте
Процедура ПодборСпецоснастка(Команда)
	
	ПодобратьТовары("Спецоснастка");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборИнвентарь(Команда)
	
	ПодобратьТовары("ИнвентарьИХозяйственныеПринадлежности");
	
КонецПроцедуры

// ПодключаемоеОборудование
// Процедура - обработчик команды командной панели табличной части.
//
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	МаркерПодбора = "Запасы";
	
	ПоискПоШтрихкодуНачало();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуСпецоснастка(Команда)
	
	МаркерПодбора = "Спецоснастка";
	
	ПоискПоШтрихкодуНачало();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуИнвентарь(Команда)
	
	МаркерПодбора = "ИнвентарьИХозяйственныеПринадлежности";
	
	ПоискПоШтрихкодуНачало();
	
КонецПроцедуры

// Процедура - обработчик события Действие команды ПолучитьВес
//
&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтотОбъект, "Запасы");
	
КонецПроцедуры // ПолучитьВес()

// Процедура - обработчик команды ЗагрузитьДанныеИзТСД.
//
&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	МаркерПодбора = "Запасы";
	
	ПолучитьДанныеИзТСД();
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСДСпецоснастка(Команда)
	
	МаркерПодбора = "Спецоснастка";
	
	ПолучитьДанныеИзТСД();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСДИнвентарь(Команда)
	
	МаркерПодбора = "ИнвентарьИХозяйственныеПринадлежности";
	
	ПолучитьДанныеИзТСД();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", "Запасы");
	
	ПодключаемоеОборудованиеУНФКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Ложь, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСДИнвентарь(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", "ИнвентарьИХозяйственныеПринадлежности");
	
	ПодключаемоеОборудованиеУНФКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Ложь, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСДСпецоснастка(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", "Спецоснастка");
	
	ПодключаемоеОборудованиеУНФКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Ложь, ДополнительныеПараметры);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает связи параметров выбора.
//
&НаКлиенте
Процедура УстановитьПараметрыВыбора()
	
	Если ЕстьРозницаСуммовойУчет Тогда
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", Новый ФиксированныйМассив(НовыйМассив));
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыПартия.ПараметрыВыбора = НовыеПараметры;
	ИначеЕсли ЕстьРозница Тогда
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", Новый ФиксированныйМассив(НовыйМассив));
		НовыйПараметр2 = Новый ПараметрВыбора("Дополнительно.ОграничениеСтатуса", Новый ФиксированныйМассив(НовыйМассив));
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыйМассив.Добавить(НовыйПараметр2);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыПартия.ПараметрыВыбора = НовыеПараметры;
	Иначе
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ОтветственноеХранение"));
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ДавальческоеСырье"));
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", Новый ФиксированныйМассив(НовыйМассив));
		НовыйПараметр2 = Новый ПараметрВыбора("Дополнительно.ОграничениеСтатуса", Новый ФиксированныйМассив(НовыйМассив));
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыйМассив.Добавить(НовыйПараметр2);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыПартия.ПараметрыВыбора = НовыеПараметры;
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрыВыбора()

&НаКлиенте
Процедура ЗапасыПодтверждениеСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗапрашиватьСбросКоличества = Результат.ЗапрашиватьСбросКоличества;
		Если НЕ ЗапрашиватьСбросКоличества Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		КонецЕсли;
		Если Результат.СбрасыватьКоличество Тогда
			НовоеКоличество = Результат.НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = ДополнительныеПараметры.Количество;
		КонецЕсли;
	Иначе
		НовоеКоличество = ДополнительныеПараметры.Количество;
	КонецЕсли;
	
	ЗапасыНоменклатураПриИзмененииПродолжить(ДополнительныеПараметры.Элемент, НовоеКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество)

	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("ВидОперации", Объект.ВидОперации);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
	
	СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанные);
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = Неопределено;
	СтрокаТабличнойЧасти.Количество = НовоеКоличество;
	СтрокаТабличнойЧасти.ВесЕдиницыТовара = СтруктураДанные.ВесЕдиницыТовара;
	СтрокаТабличнойЧасти.Вес = СтрокаТабличнойЧасти.ВесЕдиницыТовара * СтрокаТабличнойЧасти.Количество;
	СтрокаТабличнойЧасти.ОбъемЕдиницыТовара = СтруктураДанные.ОбъемЕдиницыТовара;
	СтрокаТабличнойЧасти.Объем = СтрокаТабличнойЧасти.ОбъемЕдиницыТовара * СтрокаТабличнойЧасти.Количество;
	
	
	// Серии номенклатуры
	Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
		СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры,
			ТекущиеДанныеСтроки, ИспользоватьСерииНоменклатурыОстатки);
	КонецЦикла;
	
	СтрокаТабличнойЧасти.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
	// Конец Серии номенклатуры
	
	// Характеристики
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ТипСчетаЗатрат = СтруктураДанные.ТипСчетаЗатрат;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если СтруктураДанные.ИспользоватьХарактеристики Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
			СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
		КонецЕсли;
	КонецЕсли;
	// Конец Характеристики
	
	//Партии
	СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
	
	Если СтруктураДанные.ИспользоватьПартии Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Партия = СтруктураВыбораНоменклатуры.Партия;
			СтруктураВыбораНоменклатуры.Партия = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
		КонецЕсли;
	КонецЕсли;
	// Конец Партии
	
	// Прослеживаемость
	Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров
		И ПрослеживаемаяОперация(Объект.ВидОперации) Тогда
		СтрокаТабличнойЧасти.ПрослеживаемыйТовар = СтруктураДанные.ПрослеживаемыйТовар;
		СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = СтруктураДанные.ПрослеживаемыйКомплект;
	Иначе
		СтрокаТабличнойЧасти.ПрослеживаемыйТовар = Ложь;
		СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = Ложь;
	КонецЕсли; 
	// Конец Прослеживаемость
	
	ПодборНоменклатурыИзСписка = Ложь;
	
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = СтруктураДанные.НомерГТД;
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
	// Настройка УСН
	СтрокаТабличнойЧасти.УчитыватьВНУ = УчитыватьВНУ; 
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Себестоимость;
	
	// Серии номенклатуры
	Если ИспользоватьСерииНоменклатурыОстатки<>Неопределено Тогда
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСерииНоменклатурыКоличество(Объект, СтрокаТабличнойЧасти);
	КонецЕсли;
		
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

&НаСервере
Процедура ДействияПослеЧтенияОбъекта()
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ОбновитьТипыСчетов();
	
	ОбновитьВидимостьПредупреждения(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТипыСчетов()
	
	НоменклатураДокумента = Объект.Запасы.Выгрузить().ВыгрузитьКолонку("Номенклатура");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", НоменклатураДокумента);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.СчетУчетаЗатрат.ТипСчета КАК ТипСчета,
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Номенклатура)";
	НоменклатураИТип = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоменклатураИТип.Вставить(Выборка.Номенклатура, Выборка.ТипСчета);	
	КонецЦикла;
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		СтрокаТабличнойЧасти.ТипСчетаЗатрат = НоменклатураИТип.Получить(СтрокаТабличнойЧасти.Номенклатура);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьПредупреждения(Форма)
	
	ВидимостьПредупреждения = Ложь;
	КэшЗначений = Форма.КэшЗначений;
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если КэшЗначений.СтруктурнаяЕдиницаПолучательТип = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Подразделение")
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПеремещениеЗапасов.Перемещение") Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			Если СтрокаТабличнойЧасти.ТипСчетаЗатрат = ПредопределенноеЗначение("Перечисление.ТипыСчетов.Расходы") Тогда
				ВидимостьПредупреждения = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПредупреждения", "Видимость", 
		ВидимостьПредупреждения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов()
	
	ДополнительныеСвойства = Новый Структура("ИзменениеКлючевыхРеквизитов", Истина);
	СерииНоменклатурыУНФ.ЗаполнитьПризнакиИспользованияСерий(Объект, ДополнительныеСвойства);
	
	УчетОстатковПоСкладскимОрдерамКПоступлению = СкладскойУчетСервер.УчетОстатковВРазрезеСкладскихОрдеров(
		Объект.СтруктурнаяЕдиницаПолучатель, , Истина);
	УчетОстатковПоСкладскимОрдерамКОтгрузке = СкладскойУчетСервер.УчетОстатковВРазрезеСкладскихОрдеров(
		Объект.СтруктурнаяЕдиница, Ложь, Истина);
	
	Если Не УчетОстатковПоСкладскимОрдерамКОтгрузке Тогда
		Объект.ДокументОтгрузки = Неопределено;
	КонецЕсли;
	
	Если Не УчетОстатковПоСкладскимОрдерамКПоступлению Тогда
		Объект.ДокументПоступления = Неопределено;
	КонецЕсли;
	
	ПриИзмененииВидаУчетаСклада(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииВидаУчетаСклада(Форма)
	
	Если ЗначениеЗаполнено(Форма.Объект.СтруктурнаяЕдиница) Тогда
		Форма.Элементы.ГруппаДокументПриходныйОрдер.Видимость = Форма.УчетОстатковПоСкладскимОрдерамКПоступлению;
		Форма.Элементы.ГруппаДокументРасходныйОрдер.Видимость = Форма.УчетОстатковПоСкладскимОрдерамКОтгрузке;
	Иначе
		Форма.Элементы.ГруппаДокументПриходныйОрдер.Видимость = Ложь;
		Форма.Элементы.ГруппаДокументРасходныйОрдер.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьИДоступность()

&НаСервере
Процедура ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита()
	НоменклатураВДокументахСервер.ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита(ЭтотОбъект,
		"ПеремещениеЗапасов", "Запасы", НастройкиФормыВыбораНоменклатуры);
	НоменклатураВДокументахСервер.ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита(ЭтотОбъект,
		"ПеремещениеЗапасов", "Спецоснастка", НастройкиФормыВыбораНоменклатуры);
	НоменклатураВДокументахСервер.ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита(ЭтотОбъект,
		"ПеремещениеЗапасов", "ИнвентарьИХозяйственныеПринадлежности", НастройкиФормыВыбораНоменклатуры);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияРеквизитовПечати(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ПечатьДокументовУНФКлиент.ОбновитьЗначенияРеквизитовПечати(ЭтотОбъект, Результат.ИзмененныеРеквизиты);
		
		Если Результат.Свойство("Команда") Тогда
			
			Подключаемый_ВыполнитьКоманду(Результат.Команда);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывает обработку заполнения документа по основанию.
//
&НаСервере
Процедура ЗаполнитьПоДокументу(ДокОснование)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(ДокОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
	// Прослеживаемость
	ОбновитьОтображениеПрослеживаемости(); 
	// Конец Прослеживаемость
	
	КэшЗначений.Вставить("СтруктурнаяЕдиницаПолучательТип", 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтруктурнаяЕдиницаПолучатель, "ТипСтруктурнойЕдиницы", Истина));
	ДействияПослеЧтенияОбъекта();
	
КонецПроцедуры // ЗаполнитьПоДокументу()

&НаКлиенте
Процедура ИнвентарьИХозяйственныеПринадлежностиПодтверждениеСбросаКоличестваЗавершение(Результат,
	ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗапрашиватьСбросКоличества = Результат.ЗапрашиватьСбросКоличества;
		Если НЕ ЗапрашиватьСбросКоличества Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		КонецЕсли;
		Если Результат.СбрасыватьКоличество Тогда
			НовоеКоличество = Результат.НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = ДополнительныеПараметры.Количество;
		КонецЕсли;
	Иначе
		НовоеКоличество = ДополнительныеПараметры.Количество;
	КонецЕсли;
	
	ИнвентарьИХозяйственныеПринадлежностиНоменклатураПриИзмененииПродолжить(ДополнительныеПараметры.Элемент,
		НовоеКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентарьИХозяйственныеПринадлежностиНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество)
	
	СтрокаТабличнойЧасти = Элементы.ИнвентарьИХозяйственныеПринадлежности.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("ВидОперации", Объект.ВидОперации);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = Неопределено;
	СтрокаТабличнойЧасти.Количество = НовоеКоличество;
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если СтруктураДанные.ИспользоватьХарактеристики Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
			СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
		КонецЕсли;
	КонецЕсли;
	
	//Партии
	СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
	
	Если СтруктураДанные.ИспользоватьПартии Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Партия = СтруктураВыбораНоменклатуры.Партия;
			СтруктураВыбораНоменклатуры.Партия = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
		КонецЕсли;
	КонецЕсли;
	// Конец Партии
	
	ПодборНоменклатурыИзСписка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура СпецоснасткаПодтверждениеСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗапрашиватьСбросКоличества = Результат.ЗапрашиватьСбросКоличества;
		Если НЕ ЗапрашиватьСбросКоличества Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		КонецЕсли;
		Если Результат.СбрасыватьКоличество Тогда
			НовоеКоличество = Результат.НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = ДополнительныеПараметры.Количество;
		КонецЕсли;
	Иначе
		НовоеКоличество = ДополнительныеПараметры.Количество;
	КонецЕсли;
	
	СпецоснасткаНоменклатураПриИзмененииПродолжить(ДополнительныеПараметры.Элемент, НовоеКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура СпецоснасткаНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество)

	СтрокаТабличнойЧасти = Элементы.Спецоснастка.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("ВидОперации", Объект.ВидОперации);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = Неопределено;
	СтрокаТабличнойЧасти.Количество = НовоеКоличество;
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если СтруктураДанные.ИспользоватьХарактеристики Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
			СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
		КонецЕсли;
	КонецЕсли;
	
	//Партии
	СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
	
	Если СтруктураДанные.ИспользоватьПартии Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Партия = СтруктураВыбораНоменклатуры.Партия;
			СтруктураВыбораНоменклатуры.Партия = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
		КонецЕсли;
	КонецЕсли;
	// Конец Партии
	
	ПодборНоменклатурыИзСписка = Ложь;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДокументОснование()
	
	СписокДокументОснование = Новый СписокЗначений;
	СписокДокументОснование.Добавить(
		"Документ.ЗаказНаПеремещение.ФормаВыбора", 
		НСтр("ru = 'Заказ на перемещение'"));
	СписокДокументОснование.Добавить(
		"Документ.ЗаказПокупателя.ФормаВыбора", 
		НСтр("ru = 'Заказ покупателя'"));
	СписокДокументОснование.Добавить(
		"Документ.ПриходнаяНакладная.ФормаВыбора", 
		НСтр("ru = 'Приходная накладная'"));
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныйСклад") Тогда
		СписокДокументОснование.Добавить(
			"Документ.ПриходныйОрдер.ФормаВыбора", 
			НСтр("ru = 'Приходный ордер'"));
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство") Тогда
		СписокДокументОснование.Добавить(
			"Документ.ЗаказНаПроизводство.ФормаВыбора", 
			НСтр("ru = 'Заказ на производство'"));
		СписокДокументОснование.Добавить(
			"Документ.СборкаЗапасов.ФормаВыбора", 
			НСтр("ru = 'Производство'"));
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ПередачаТоваровМеждуОрганизациями") Тогда
		СписокДокументОснование.Добавить(
			"Документ.ПередачаТоваровМеждуОрганизациями.ФормаВыбора", 
			НСтр("ru = 'Передача товаров между организациями'"));
	КонецЕсли; 
	Если ПолучитьФункциональнуюОпцию("УчетПоЯчейкам") Тогда
		СписокДокументОснование.Добавить(
			"Документ.ПеремещениеПоЯчейкам.ФормаВыбора", 
			НСтр("ru = 'Перемещение по ячейкам'"));
	КонецЕсли;
	СписокДокументОснование.Добавить(
		"Документ.АвансовыйОтчет.ФормаВыбора", 
		НСтр("ru = 'Авансовый отчет'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТипаОснованияЗавершение(ВыбранноеИмяФормы, Параметры) Экспорт
	
	Если ВыбранноеИмяФормы <> Неопределено Тогда
		СтруктураПараметровОтбора = Новый Структура;
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
		ОткрытьФорму(ВыбранноеИмяФормы.Значение, СтруктураПараметровОтбора, ЭтотОбъект, , , , ОповещениеОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснованиеЗавершение(ВыбранноеЗначение, Параметры) Экспорт

	Если ВыбранноеЗначение <> Неопределено Тогда
		Объект.ДокументОснование = ВыбранноеЗначение;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(
			ВыбранноеЗначение);
		Модифицированность = Истина;

		ЗаполнитьПоОснованиюНачало();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюНачало() Экспорт

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения, 
		НСтр("ru = 'Заполнить документ по выбранному основанию?'"), 
		РежимДиалогаВопрос.ДаНет, 0);		

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРасходномуОрдеру(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоДокументу(Объект.ДокументОтгрузки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПриходномуОрдеру(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоДокументу(Объект.ДокументПоступления);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройки(ПередаватьВидДокумента)
	
	ЗаполнениеОбъектовУНФКлиент.ЗаполнитьПустыеПоложения(Объект, "ПоложениеЗаказаПокупателя, ПоложениеПроекта");
	
	// 1. Формируем структуру параметров для заполнения формы "Настройка документа".
	ПараметрыФормы = Новый Структура; 
	ПараметрыФормы.Вставить("ПоложениеНастроекНалоговогоУчетаВБанковскихДокументах",
	Объект.ПоложениеНастроекНалоговогоУчета);
	ПараметрыФормы.Вставить("ПоложениеЗаказаПокупателяВПеремещенииЗапасов", Объект.ПоложениеЗаказаПокупателя);
	ПараметрыФормы.Вставить("БылиВнесеныИзменения", Ложь);
	ПараметрыФормы.Вставить("Доступность", Новый Структура("ПоложениеЗаказаПокупателяВПеремещенииЗапасов",
		ИспользуетсяРезервирование));
		
	Если Элементы.Ячейка.Видимость Или Элементы.ЗапасыЯчейка.Видимость Тогда
		ПараметрыФормы.Вставить("ПоложениеЯчейкиОтправителя", Объект.ПоложениеЯчейкиОтправителя);
		ПараметрыФормы.Доступность.Вставить("ПоложениеЯчейкиОтправителя", Истина);
	Иначе
		ПараметрыФормы.Доступность.Вставить("ПоложениеЯчейкиОтправителя", Ложь);
	КонецЕсли;
	
	Если Элементы.ЯчейкаПолучатель.Видимость Или Элементы.ЗапасыЯчейкаПолучатель.Видимость Тогда
		ПараметрыФормы.Вставить("ПоложениеЯчейкиПолучателя", Объект.ПоложениеЯчейкиПолучателя);
		ПараметрыФормы.Доступность.Вставить("ПоложениеЯчейкиПолучателя", Истина);
	Иначе
		ПараметрыФормы.Доступность.Вставить("ПоложениеЯчейкиПолучателя", Ложь);
	КонецЕсли;
	
	Если ИспользоватьПроекты Тогда
		ПараметрыФормы.Вставить("ПоложениеПроекта", Объект.ПоложениеПроекта);
		ДоступностьПроекта = (Объект.ВидОперации = ПредопределенноеЗначение(
			"Перечисление.ВидыОперацийПеремещениеЗапасов.СписаниеНаРасходы"));
		ПараметрыФормы.Доступность.Вставить("ПоложениеПроекта", ДоступностьПроекта);
	КонецЕсли;

	Если ПередаватьВидДокумента Тогда
		ПараметрыФормы.Вставить("ВидДокумента", НСтр("ru = 'перемещение запасов'"));
	КонецЕсли;	

	ПараметрыФормы.Вставить("ПоказыватьКолонкуВесВПеремещенииЗапасов",
		ПоказыватьКолонкуВесВПеремещенииЗапасов);
	ПараметрыФормы.Вставить("ПоказыватьКолонкуОбъемВПеремещенииЗапасов",
		ПоказыватьКолонкуОбъемВПеремещенииЗапасов);
	
	ОткрытьФорму("ОбщаяФорма.ШапкаТабличнаяЧасть", ПараметрыФормы, , , , ,
		Новый ОписаниеОповещения("ШапкаТабличнаяЧастьЗавершение", ЭтотОбъект));
		
КонецПроцедуры

&НаКлиенте
Процедура ШапкаТабличнаяЧастьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураНастройкаДокумента = Результат;
	
	Если ТипЗнч(СтруктураНастройкаДокумента) = Тип("Структура") И СтруктураНастройкаДокумента.БылиВнесеныИзменения Тогда
		
		Если Объект.ПоложениеЗаказаПокупателя<>Результат.ПоложениеЗаказаПокупателяВПеремещенииЗапасов Тогда
			Объект.ПоложениеЗаказаПокупателя = Результат.ПоложениеЗаказаПокупателяВПеремещенииЗапасов;
			ЗаполнениеОбъектовУНФКлиент.ОбработатьИзменениеПоложения(Объект, "Запасы", "ЗаказПокупателя",
				"ПоложениеЗаказаПокупателя");
		КонецЕсли;
		
		Если Результат.Свойство("ПоложениеПроекта") Тогда
			Если Объект.ПоложениеПроекта <> Результат.ПоложениеПроекта Тогда
				Объект.ПоложениеПроекта = Результат.ПоложениеПроекта;
				ЗаполнениеОбъектовУНФКлиент.ОбработатьИзменениеПоложения(Объект, "Запасы", "Проект", "ПоложениеПроекта");
			КонецЕсли;
		КонецЕсли;  
		
		Если Результат.Свойство("ПоложениеЯчейкиОтправителя") Тогда
			Если Объект.ПоложениеЯчейкиОтправителя <> Результат.ПоложениеЯчейкиОтправителя Тогда
				Объект.ПоложениеЯчейкиОтправителя = Результат.ПоложениеЯчейкиОтправителя;
				ЗаполнениеОбъектовУНФКлиент.ОбработатьИзменениеПоложения(Объект, "Запасы", "Ячейка",
					"ПоложениеЯчейкиОтправителя");
			КонецЕсли;
		КонецЕсли;
		
		Если Результат.Свойство("ПоложениеЯчейкиПолучателя") Тогда
			Если Объект.ПоложениеЯчейкиПолучателя <> Результат.ПоложениеЯчейкиПолучателя Тогда
				Объект.ПоложениеЯчейкиПолучателя = Результат.ПоложениеЯчейкиПолучателя;
				ЗаполнениеОбъектовУНФКлиент.ОбработатьИзменениеПоложения(Объект, "Запасы", "ЯчейкаПолучатель",
					"ПоложениеЯчейкиПолучателя");
			КонецЕсли;
		КонецЕсли;
		
		Если Результат.Свойство("ПоложениеНастроекНалоговогоУчетаВБанковскихДокументах") Тогда
			Объект.ПоложениеНастроекНалоговогоУчета = Результат.ПоложениеНастроекНалоговогоУчетаВБанковскихДокументах;
		КонецЕсли;
		
		ОбновитьФорму = Ложь;
		Если Результат.Свойство("ПоказыватьКолонкуВесВПеремещенииЗапасов") Тогда
			ПоказыватьКолонкуВесВПеремещенииЗапасов = Результат.ПоказыватьКолонкуВесВПеремещенииЗапасов;
			ОбновитьФорму = Истина;
		КонецЕсли;
		
		Если Результат.Свойство("ПоказыватьКолонкуОбъемВПеремещенииЗапасов") Тогда
			ПоказыватьКолонкуОбъемВПеремещенииЗапасов = Результат.ПоказыватьКолонкуОбъемВПеремещенииЗапасов;
			ОбновитьФорму = Истина;
		КонецЕсли;
		
		Если ОбновитьФорму Тогда
			УстановитьВидимостьЭлементовПоНастройкеПользователя(ЭтотОбъект);
		КонецЕсли;
		
		//Налоги
		ОпределитьВидимостьНастроекУчетаВНалогообложении();
		
		УстановитьВидимостьИДоступность();
		
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.БылиИзмененыПерсональныеНастройки Тогда
		НастройкиКоличества = ПолучитьНастройкиИзмененияКоличества();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиКоличества);  	
		//Налоги
		ОпределитьВидимостьНастроекУчетаВНалогообложении();
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.ДокументПоступления = Неопределено;
		Объект.ДокументОтгрузки = Неопределено;
		ЗаполнитьПоДокументу(Объект.ДокументОснование);
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоОснованию()

&НаКлиенте
Процедура ЗаполнитьПоОстаткамНаСкладеНачало(ИмяТабличнойЧасти)
	
	Если Объект[ИмяТабличнойЧасти].Количество() > 0 Тогда
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоОстаткамНаСкладеЗавершение", ЭтотОбъект,
			ПараметрыОповещения), НСтр("ru = 'Табличная часть будет очищена. Продолжить выполнение операции?'"),
			РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
	КонецЕсли;

	ЗаполнитьПоОстаткамНаСкладеФрагмент(ИмяТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамНаСкладеЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Ответ = Результат;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ИмяТабличнойЧасти = ДополнительныеПараметры.ИмяТабличнойЧасти;

	ЗаполнитьПоОстаткамНаСкладеФрагмент(ИмяТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамНаСкладеФрагмент(ИмяТабличнойЧасти)

	ЗаполнитьЗапасыПоОстаткамНаСкладеНаСервере(ИмяТабличнойЧасти);

КонецПроцедуры //ЗаполнитьПоОстаткамНаСкладе()

&НаКлиенте
Процедура НастройкаСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НастройкиКоличества = ПолучитьНастройкиИзмененияКоличества();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиКоличества);
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьВидимостьНастроекУчетаВНалогообложении()
	
	ВидимостьРасходыУСН = Объект.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.СписаниеНаРасходы;
	
	НастройкиНУДляФормыДокумента = НалогиУНФ.НастройкиНУДляФормыДокумента(ЭтотОбъект, Неопределено);
	Элементы.ГруппаУчетВНУ.Видимость = НастройкиНУДляФормыДокумента.НоваяВидимостьГруппыУчетВНУДоИзменения;
	
	Если Не Элементы.ГруппаУчетВНУ.Видимость Тогда
		Объект.УчитыватьВНУ = Ложь;
	КонецЕсли;
	
	Если НастройкиНУДляФормыДокумента.ЭтоЮридическоеЛицо Тогда
		Элементы.ЗапасыУчитыватьВНУ.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) 
		И Не ЗначениеЗаполнено(Объект.ПоложениеНастроекНалоговогоУчета) Тогда
		Объект.ПоложениеНастроекНалоговогоУчета = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	КонецЕсли;
	
	Элементы.ЗапасыУчитыватьВНУ.Видимость = НастройкиНУДляФормыДокумента.НоваяВидимостьГруппыУчетВНУДоИзменения
	И Объект.ПоложениеНастроекНалоговогоУчета = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти 
	И ВидимостьРасходыУСН;
	
	Элементы.ГруппаУчетВНУ.Видимость = НастройкиНУДляФормыДокумента.НоваяВидимостьГруппыУчетВНУДоИзменения 
	И Объект.ПоложениеНастроекНалоговогоУчета = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке
	И ВидимостьРасходыУСН;
	
	УчитыватьВНУ = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("УСНПроизводствоПоУмолчанию")
		И ВидимостьРасходыУСН;
	
	// Настройка УСН  
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		И НастройкиНУДляФормыДокумента.СистемаНалогообложенияСтруктура.ПлательщикУСН Тогда
		Если Объект.ПоложениеНастроекНалоговогоУчета = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
			Объект.УчитыватьВНУ = УчитыватьВНУ;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаказуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоДокументу(Объект.ЗаказПокупателя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаказуНаПеремещениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоДокументу(Объект.ЗаказНаПеремещение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПартияПриИзменении(СтруктураДанные)
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанные.СтранаПроисхождения) Тогда
		
		НоменклатураСтранаПроисхождения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураДанные.Номенклатура,
			"СтранаПроисхождения");
		СтруктураДанные.Вставить("СтранаПроисхождения", НоменклатураСтранаПроисхождения);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("НомерГТД", Неопределено);
	
	Если СтруктураДанные.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.СписаниеНаРасходы
		ИЛИ СтруктураДанные.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.ВозвратИзЭксплуатации Тогда
		
		ГрузовыеТаможенныеДекларацииСервер.АвтоматическийПодборВРеализацииНомераГТД(СтруктураДанные);
		
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты)
	
	ДокументыУНФ.ДатаПриИзменении(ДанныеДляИзмененияДаты, ЭтотОбъект, Объект);
	
	// Прослеживаемость
	КэшЗначений.Вставить("ВестиУчетПрослеживаемыхТоваров", ПрослеживаемостьУНФ.ВедетсяУчетПрослеживаемыхТоваров(
		Объект.Дата));
	ОбновитьПризнакПрослеживаемости();
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ДокументыУНФ.ОрганизацияПриИзменении(ЭтотОбъект, Объект);
	ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита();
	ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов();
	//Налоги
	ОпределитьВидимостьНастроекУчетаВНалогообложении();
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить("ЕдиницаИзмерения");
	Реквизиты.Добавить("СтранаПроисхождения");
	Реквизиты.Добавить("СчетУчетаЗатрат");
	Реквизиты.Добавить("ЭтоНабор");
	Реквизиты.Добавить("ПроверятьЗаполнениеХарактеристики");
	Реквизиты.Добавить("ИспользоватьПартии");
	Реквизиты.Добавить("ПроверятьЗаполнениеПартий");
	Реквизиты.Добавить("ИспользоватьСерииНоменклатуры");
	Реквизиты.Добавить("ПрослеживаемыйТовар");
	Реквизиты.Добавить("ПрослеживаемыйКомплект");
	Реквизиты.Добавить("ТипНоменклатуры");
	ЗначенияРеквизитовНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураДанные.Номенклатура, Реквизиты);
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", ЗначенияРеквизитовНоменклатуры.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("СтранаПроисхождения", ЗначенияРеквизитовНоменклатуры.СтранаПроисхождения);
	ТипСчетаЗатрат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначенияРеквизитовНоменклатуры.СчетУчетаЗатрат,
		"ТипСчета");
	СтруктураДанные.Вставить("ТипСчетаЗатрат", ТипСчетаЗатрат);
	СтруктураДанные.Вставить("НомерГТД", Неопределено);
	
	// Наборы
	СтруктураДанные.Вставить("ЭтоНабор", ЗначенияРеквизитовНоменклатуры.ЭтоНабор);
	
	// Характеристики
	СтруктураДанные.Вставить("ИспользоватьХарактеристики", Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики", Ложь);
	
	НоменклатураИспользоватьХарактеристики = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураДанные.Номенклатура,
		"ИспользоватьХарактеристики");
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И НоменклатураИспользоватьХарактеристики Тогда
		ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(
			СтруктураДанные.Номенклатура);
		
		Если Не ЗначенияПоУмолчанию = Неопределено Тогда
			ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
		КонецЕсли;
		
		Если Не СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика", ХарактеристикаПоУмолчанию);
		Иначе
			СтруктураДанные.Характеристика = ?(ЗначениеЗаполнено(СтруктураДанные.Характеристика),
				СтруктураДанные.Характеристика, ХарактеристикаПоУмолчанию);
		КонецЕсли;
		
		СтруктураДанные.Вставить("ИспользоватьХарактеристики",Истина);
		СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",
			ЗначенияРеквизитовНоменклатуры.ПроверятьЗаполнениеХарактеристики);
	КонецЕсли; 
	// Конец Характеристики
	
	//Партии
	СтруктураДанные.Вставить("ИспользоватьПартии", Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеПартий", Ложь);
	
	Если НЕ СтруктураДанные.Свойство("Партия") Тогда
		СтруктураДанные.Вставить("Партия", Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И ЗначенияРеквизитовНоменклатуры.ИспользоватьПартии Тогда
		
		Если СтруктураДанные.Свойство("СтатусПартии")
			Тогда
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(
				СтруктураДанные.Номенклатура, СтруктураДанные.СтатусПартии);
		Иначе
			Если Не СтруктураДанные.Свойство("ВидОперации")
				Тогда
				ВидОперации = Неопределено
			Иначе
				ВидОперации = СтруктураДанные.ВидОперации
			КонецЕсли;
			
			СтатусПартии = НоменклатураВДокументахСервер.СоответствиеВидаОперацииИлиХозОперацииСтатусуПартии( ,
				ВидОперации);
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(
				СтруктураДанные.Номенклатура, СтатусПартии);
		КонецЕсли;
		
		ПартияПоУмолчанию = Справочники.ПартииНоменклатуры.ПустаяСсылка();
		
		Если Не ЗначенияПартииПоУмолчанию = Неопределено
			Тогда
			ПартияПоУмолчанию = ЗначенияПартииПоУмолчанию;
		КонецЕсли;
		
		СтруктураДанные.Партия = ?(ЗначениеЗаполнено(СтруктураДанные.Партия), СтруктураДанные.Партия, ПартияПоУмолчанию);
		
		СтруктураДанные.ПроверятьЗаполнениеПартий = ЗначенияРеквизитовНоменклатуры.ПроверятьЗаполнениеПартий;
		СтруктураДанные.ИспользоватьПартии = Истина;
		
	КонецЕсли;
	// Конец Партии
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура)
		И ЗначенияРеквизитовНоменклатуры.ИспользоватьСерииНоменклатуры Тогда
		
		СтатусПодбораСерий = СерииНоменклатурыУНФ.СтатусСерийНоменклатурыПриИзменении(СтруктураДанные);
		
		Если СтатусПодбораСерий = 0 И СтруктураДанные.Свойство("ПараметрыПодбораСтатуса") Тогда
			СтруктураДанные.ПараметрыПодбораСтатуса.СтруктурнаяЕдиница = СтруктураДанные.ПараметрыПодбораСтатуса.СтруктурнаяЕдиницаПолучатель;
			СтатусПодбораСерий = СерииНоменклатурыУНФ.СтатусСерийНоменклатурыПриИзменении(СтруктураДанные);
		КонецЕсли;
		
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", СтатусПодбораСерий);
		
	Иначе
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", 0);
	КонецЕсли;
	
	Если СтруктураДанные.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.СписаниеНаРасходы
		ИЛИ СтруктураДанные.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.ВозвратИзЭксплуатации Тогда
		
		ГрузовыеТаможенныеДекларацииСервер.АвтоматическийПодборВРеализацииНомераГТД(СтруктураДанные);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("ТипНоменклатуры", ЗначенияРеквизитовНоменклатуры.ТипНоменклатуры);
	
	// Прослеживаемость
	СтруктураДанные.Вставить("ПрослеживаемыйТовар", ЗначенияРеквизитовНоменклатуры.ПрослеживаемыйТовар
		И ЗначенияРеквизитовНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас);
	СтруктураДанные.Вставить("ПрослеживаемыйКомплект", ЗначенияРеквизитовНоменклатуры.ПрослеживаемыйКомплект
		И ЗначенияРеквизитовНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас);
	Если СтруктураДанные.ПрослеживаемыйТовар 
		И ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров") Тогда
		СтруктураДанные.Вставить("НомерГТД", Неопределено);
	КонецЕсли; 
	// Конец Прослеживаемость

	ВесНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураДанные.Номенклатура, "Вес");
	ОбъемНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураДанные.Номенклатура, "Объем");
	СтруктураДанные.Вставить("ВесЕдиницыТовара", ВесНоменклатуры);
	СтруктураДанные.Вставить("ОбъемЕдиницыТовара", ОбъемНоменклатуры);
	
	Возврат СтруктураДанные;
	
КонецФункции

// Получает признак видимости направления деятельности.
//
&НаСервереБезКонтекста
Функция ПолучитьВидимостьНаправленияДеятельности(СчетЗатрат)
	
	СчетЗатратТипСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетЗатрат, "ТипСчета");
	Возврат СчетЗатратТипСчета = Перечисления.ТипыСчетов.Расходы;
	
КонецФункции

// Получает набор данных с сервера для процедуры СтруктурнаяЕдиницаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеСтруктурнаяЕдиницаПриИзменении(СтруктураДанные)
	
	ТипСтруктурнойЕдиницы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтруктурнаяЕдиница,
		"ТипСтруктурнойЕдиницы");
	ТипСтруктурнойЕдиницыПолучатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтруктурнаяЕдиницаПолучатель,
		"ТипСтруктурнойЕдиницы");
	ЕстьРозница = ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница
		Или ТипСтруктурнойЕдиницыПолучатель = Перечисления.ТипыСтруктурныхЕдиниц.Розница;
	ЕстьРозницаСуммовойУчет = ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет
		Или ТипСтруктурнойЕдиницыПолучатель = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет;
	
	РеквизитыИсточника = Новый Массив;
	РеквизитыИсточника.Добавить("ПодписьМОЛ");
	РеквизитыИсточника.Добавить("ОрдерныйСклад");
	РеквизитыИсточника.Добавить("ТипСтруктурнойЕдиницы");
	РеквизитыИсточника.Добавить("ПолучательПеремещения");
	РеквизитыИсточника.Добавить("ЯчейкаПолучателяПеремещения");
	РеквизитыИсточника.Добавить("ПолучательСписанияНаРасходы");
	РеквизитыИсточника.Добавить("ЯчейкаПолучателяСписанияНаРасходы");
	РеквизитыИсточника.Добавить("ПолучательПередачиВЭксплуатацию");
	РеквизитыИсточника.Добавить("ЯчейкаПолучателяПередачиВЭксплуатацию");
	РеквизитыИсточника.Добавить("ПолучательВозвратаИзЭксплуатации");
	РеквизитыИсточника.Добавить("ЯчейкаПолучателяВозвратаИзЭксплуатации");
	ЗначенияРеквизитовИсточника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураДанные.Источник,
		РеквизитыИсточника);
	
	СтруктураДанные.Вставить("ПодписьКладовщика", ЗначенияРеквизитовИсточника.ПодписьМОЛ);
	
	Если Не ЗначениеЗаполнено(СтруктураДанные.Источник) Тогда
		ЗначенияРеквизитовИсточника.ОрдерныйСклад = Ложь;
		ЗначенияРеквизитовИсточника.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанные.Источник)
		ИЛИ ЗначенияРеквизитовИсточника.ОрдерныйСклад 
		ИЛИ ЗначенияРеквизитовИсточника.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница
		ИЛИ ЗначенияРеквизитовИсточника.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет Тогда
		СтруктураДанные.Вставить("ОрдерныйСклад", Ложь);
	Иначе
		СтруктураДанные.Вставить("ОрдерныйСклад", Истина);
	КонецЕсли;
	
	Если СтруктураДанные.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.Перемещение Тогда
		
		ПолучитьДанныеСтруктурнаяЕдиницаПриИзмененииВидОперацииПеремещение(СтруктураДанные,
			ЗначенияРеквизитовИсточника, ТипСтруктурнойЕдиницы, ТипСтруктурнойЕдиницыПолучатель);
		
	ИначеЕсли СтруктураДанные.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.СписаниеНаРасходы Тогда
		
		ПолучитьДанныеСтруктурнаяЕдиницаПриИзмененииВидОперацииСписаниеНаРасходы(СтруктураДанные,
			ЗначенияРеквизитовИсточника);
		
	ИначеЕсли СтруктураДанные.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.ПередачаВЭксплуатацию Тогда
		
		ПолучитьДанныеСтруктурнаяЕдиницаПриИзмененииВидОперацииПередачаВЭксплуатацию(СтруктураДанные,
			ЗначенияРеквизитовИсточника);
		
	ИначеЕсли СтруктураДанные.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.ВозвратИзЭксплуатации Тогда
		
		ПолучитьДанныеСтруктурнаяЕдиницаПриИзмененииВидОперацииВозвратИзЭксплуатации(СтруктураДанные,
			ЗначенияРеквизитовИсточника);
		
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервере
Процедура ПолучитьДанныеСтруктурнаяЕдиницаПриИзмененииВидОперацииПеремещение(СтруктураДанные,
	ЗначенияРеквизитовИсточника, Знач ТипСтруктурнойЕдиницы, Знач ТипСтруктурнойЕдиницыПолучатель)
	
	СтруктураДанные.Вставить("СтруктурнаяЕдиницаПолучатель", ЗначенияРеквизитовИсточника.ПолучательПеремещения);
	СтруктураДанные.Вставить("СтруктурнаяЕдиницаПолучательТип", Перечисления.ТипыСтруктурныхЕдиниц.ПустаяСсылка());
	
	РеквизитыПолучателяПеремещения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЗначенияРеквизитовИсточника.ПолучательПеремещения, "ОрдерныйСклад, ТипСтруктурнойЕдиницы");
	
	Если ЗначениеЗаполнено(ЗначенияРеквизитовИсточника.ПолучательПеремещения) Тогда
		СтруктураДанные.СтруктурнаяЕдиницаПолучательТип = РеквизитыПолучателяПеремещения.ТипСтруктурнойЕдиницы;
	Иначе
		РеквизитыПолучателяПеремещения.ОрдерныйСклад = Ложь;
	КонецЕсли;
	
	СтруктураДанные.Вставить("ЯчейкаПолучатель", ЗначенияРеквизитовИсточника.ЯчейкаПолучателяПеремещения);
	СтруктураДанные.Вставить("ТипСтруктурнойЕдиницыРозницаСуммовойУчет",
		ЗначенияРеквизитовИсточника.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет);
	
	Если НЕ ЗначениеЗаполнено(ЗначенияРеквизитовИсточника.ПолучательПеремещения)
		ИЛИ РеквизитыПолучателяПеремещения.ОрдерныйСклад 
		ИЛИ РеквизитыПолучателяПеремещения.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница
		ИЛИ РеквизитыПолучателяПеремещения.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет Тогда
		СтруктураДанные.Вставить("ОрдерныйСкладПолучатель", Ложь);
	Иначе
		СтруктураДанные.Вставить("ОрдерныйСкладПолучатель", Истина);
	КонецЕсли;
	
	ФункциональнаяОпцияЗаказПриПеремещенииВШапке = (Объект.ПоложениеЗаказаПокупателя
		<> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	
	Если ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница
	 ИЛИ ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет Тогда
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыРезерв.Видимость = Ложь;
		Элементы.ЗапасыИзменитьРезерв.Видимость = Ложь;
		ИспользуетсяРезервирование = Ложь;
		
	Иначе
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыРезерв.Видимость = Истина;
		Элементы.ЗапасыИзменитьРезерв.Видимость = Истина;
		ИспользуетсяРезервирование = ПолучитьФункциональнуюОпцию("РезервированиеЗапасов");
	КонецЕсли;
	
	РозничноеПеремещение = ((ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница
		ИЛИ ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет)
		И (ТипСтруктурнойЕдиницыПолучатель = Перечисления.ТипыСтруктурныхЕдиниц.Розница
		ИЛИ ТипСтруктурнойЕдиницыПолучатель = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет));
	
	Если НЕ ИспользуетсяРезервирование ИЛИ РозничноеПеремещение Тогда
		Элементы.ГруппаЗаказОснование.Видимость = Ложь;
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыЗаказПокупателя.Видимость = Ложь;
	Иначе
		Элементы.ГруппаЗаказОснование.Видимость = ФункциональнаяОпцияЗаказПриПеремещенииВШапке;
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыЗаказПокупателя.Видимость = НЕ ФункциональнаяОпцияЗаказПриПеремещенииВШапке;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеСтруктурнаяЕдиницаПриИзмененииВидОперацииСписаниеНаРасходы(СтруктураДанные,
	ЗначенияРеквизитовИсточника)
	СтруктураДанные.Вставить("СтруктурнаяЕдиницаПолучатель",
		ЗначенияРеквизитовИсточника.ПолучательСписанияНаРасходы);
	СтруктураДанные.Вставить("СтруктурнаяЕдиницаПолучательТип", Перечисления.ТипыСтруктурныхЕдиниц.ПустаяСсылка());
	
	РеквизитыПолучателяСписанияНаРасходы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЗначенияРеквизитовИсточника.ПолучательСписанияНаРасходы,
		"ОрдерныйСклад, ТипСтруктурнойЕдиницы");
		
	Если ЗначениеЗаполнено(ЗначенияРеквизитовИсточника.ПолучательСписанияНаРасходы) Тогда
		СтруктураДанные.СтруктурнаяЕдиницаПолучательТип = РеквизитыПолучателяСписанияНаРасходы.ТипСтруктурнойЕдиницы;
	Иначе
		РеквизитыПолучателяСписанияНаРасходы.ОрдерныйСклад = Ложь
	КонецЕсли;
	
	СтруктураДанные.Вставить("ЯчейкаПолучатель", ЗначенияРеквизитовИсточника.ЯчейкаПолучателяСписанияНаРасходы);
	СтруктураДанные.Вставить("ТипСтруктурнойЕдиницыРозницаСуммовойУчет", Ложь);
	
	Если НЕ ЗначениеЗаполнено(ЗначенияРеквизитовИсточника.ПолучательСписанияНаРасходы)
		ИЛИ РеквизитыПолучателяСписанияНаРасходы.ОрдерныйСклад Тогда
		СтруктураДанные.Вставить("ОрдерныйСкладПолучатель", Ложь);
	Иначе
		СтруктураДанные.Вставить("ОрдерныйСкладПолучатель", Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеСтруктурнаяЕдиницаПриИзмененииВидОперацииПередачаВЭксплуатацию(СтруктураДанные,
	ЗначенияРеквизитовИсточника)
	СтруктураДанные.Вставить("СтруктурнаяЕдиницаПолучатель", ЗначенияРеквизитовИсточника.ПолучательПередачиВЭксплуатацию);
	СтруктураДанные.Вставить("СтруктурнаяЕдиницаПолучательТип", Перечисления.ТипыСтруктурныхЕдиниц.ПустаяСсылка());
	
	СтруктураДанные.Вставить("ЯчейкаПолучатель", ЗначенияРеквизитовИсточника.ЯчейкаПолучателяПередачиВЭксплуатацию);
	СтруктураДанные.Вставить("ТипСтруктурнойЕдиницыРозницаСуммовойУчет", Ложь);

	РеквизитыПолучателяПередачиВЭксплуатацию = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЗначенияРеквизитовИсточника.ПолучательПередачиВЭксплуатацию, "ОрдерныйСклад, ТипСтруктурнойЕдиницы");
	
	Если ЗначениеЗаполнено(ЗначенияРеквизитовИсточника.ПолучательПередачиВЭксплуатацию) Тогда
		СтруктураДанные.СтруктурнаяЕдиницаПолучательТип = РеквизитыПолучателяПередачиВЭксплуатацию.ТипСтруктурнойЕдиницы;
	Иначе
		РеквизитыПолучателяПередачиВЭксплуатацию.ОрдерныйСклад = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗначенияРеквизитовИсточника.ПолучательПередачиВЭксплуатацию)
		Или РеквизитыПолучателяПередачиВЭксплуатацию.ОрдерныйСклад Тогда
		СтруктураДанные.Вставить("ОрдерныйСкладПолучатель", Ложь);
	Иначе
		СтруктураДанные.Вставить("ОрдерныйСкладПолучатель", Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеСтруктурнаяЕдиницаПриИзмененииВидОперацииВозвратИзЭксплуатации(СтруктураДанные,
	ЗначенияРеквизитовИсточника)
	СтруктураДанные.Вставить("СтруктурнаяЕдиницаПолучатель",
		ЗначенияРеквизитовИсточника.ПолучательВозвратаИзЭксплуатации);
	СтруктураДанные.Вставить("СтруктурнаяЕдиницаПолучательТип", Перечисления.ТипыСтруктурныхЕдиниц.ПустаяСсылка());
	СтруктураДанные.Вставить("ЯчейкаПолучатель", ЗначенияРеквизитовИсточника.ЯчейкаПолучателяВозвратаИзЭксплуатации);
	СтруктураДанные.Вставить("ТипСтруктурнойЕдиницыРозницаСуммовойУчет", Ложь);

	РеквизитыПолучателяВозвратаИзЭксплуатации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЗначенияРеквизитовИсточника.ПолучательВозвратаИзЭксплуатации, "ОрдерныйСклад, ТипСтруктурнойЕдиницы");
	
	Если ЗначениеЗаполнено(ЗначенияРеквизитовИсточника.ПолучательВозвратаИзЭксплуатации) Тогда
		СтруктураДанные.СтруктурнаяЕдиницаПолучательТип = РеквизитыПолучателяВозвратаИзЭксплуатации.ТипСтруктурнойЕдиницы;
	Иначе
		РеквизитыПолучателяВозвратаИзЭксплуатации.ОрдерныйСклад = Ложь;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ЗначенияРеквизитовИсточника.ПолучательВозвратаИзЭксплуатации)
		ИЛИ РеквизитыПолучателяВозвратаИзЭксплуатации.ОрдерныйСклад Тогда
		СтруктураДанные.Вставить("ОрдерныйСкладПолучатель", Ложь);
	Иначе
		СтруктураДанные.Вставить("ОрдерныйСкладПолучатель", Истина);
	КонецЕсли;
КонецПроцедуры

// Получает набор данных с сервера для процедуры СтруктурнаяЕдиницаПолучательПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеСтруктурнаяЕдиницаПолучательПриИзменении(СтруктураДанные)

	ТипСтруктурнойЕдиницы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтруктурнаяЕдиница,
		"ТипСтруктурнойЕдиницы");
	ТипСтруктурнойЕдиницыПолучатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтруктурнаяЕдиницаПолучатель,
		"ТипСтруктурнойЕдиницы");
	
	ЕстьРозница = ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница
		Или ТипСтруктурнойЕдиницыПолучатель = Перечисления.ТипыСтруктурныхЕдиниц.Розница;
	ЕстьРозницаСуммовойУчет = ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет
		Или ТипСтруктурнойЕдиницыПолучатель = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет;
	
	РеквизитыПолучателя = Новый Массив;
	РеквизитыПолучателя.Добавить("ПодписьМОЛ");
	РеквизитыПолучателя.Добавить("ТипСтруктурнойЕдиницы");
	РеквизитыПолучателя.Добавить("ОрдерныйСклад");
	РеквизитыПолучателя.Добавить("ИсточникПеремещения");
	РеквизитыПолучателя.Добавить("ЯчейкаИсточникаПеремещения");
	РеквизитыПолучателя.Добавить("ИсточникСписанияНаРасходы");
	РеквизитыПолучателя.Добавить("ЯчейкаИсточникаСписанияНаРасходы");
	РеквизитыПолучателя.Добавить("ИсточникПередачиВЭксплуатацию");
	РеквизитыПолучателя.Добавить("ЯчейкаИсточникаПередачиВЭксплуатацию");
	РеквизитыПолучателя.Добавить("ИсточникВозвратаИзЭксплуатации");
	РеквизитыПолучателя.Добавить("ЯчейкаИсточникаВозвратаИзЭксплуатации");
	ЗначенияРеквизитовПолучателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураДанные.Получатель,
		РеквизитыПолучателя);
		
	Если Не ЗначениеЗаполнено(СтруктураДанные.Получатель) Тогда
		ЗначенияРеквизитовПолучателя.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.ПустаяСсылка();
		ЗначенияРеквизитовПолучателя.ОрдерныйСклад = Ложь;
	КонецЕсли;
	
	СтруктураДанные.Вставить("ПодписьКладовщика", ЗначенияРеквизитовПолучателя.ПодписьМОЛ);
	СтруктураДанные.Вставить("ТипСтруктурнойЕдиницы", ЗначенияРеквизитовПолучателя.ТипСтруктурнойЕдиницы);
	СтруктураДанные.Вставить("СтруктурнаяЕдиницаПолучательТип",ТипСтруктурнойЕдиницыПолучатель);
	СтруктураДанные.Вставить("ОрдерныйСклад", Ложь);
	
	Если ЗначенияРеквизитовПолучателя.ТипСтруктурнойЕдиницы <> Перечисления.ТипыСтруктурныхЕдиниц.Розница
		И ЗначенияРеквизитовПолучателя.ТипСтруктурнойЕдиницы <> Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет Тогда
		СтруктураДанные.Вставить("ОрдерныйСклад", ЗначенияРеквизитовПолучателя.ОрдерныйСклад);
	КонецЕсли;
	
	СтруктураДанные.Вставить("ОрдерныйСкладИсточник", Ложь);
	
	Если СтруктураДанные.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.Перемещение Тогда
		
		ПолучитьДанныеСтруктурнаяЕдиницаПолучательПриИзмененииВидОперацииПеремещение(СтруктураДанные,
			ЗначенияРеквизитовПолучателя, ТипСтруктурнойЕдиницы, ТипСтруктурнойЕдиницыПолучатель);
		
	ИначеЕсли СтруктураДанные.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.СписаниеНаРасходы Тогда
		
		ПолучитьДанныеСтруктурнаяЕдиницаПолучательПриИзмененииВидОперацииСписаниеНаРасходы(СтруктураДанные,
			ЗначенияРеквизитовПолучателя);
		
	ИначеЕсли СтруктураДанные.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.ПередачаВЭксплуатацию Тогда
		
		ПолучитьДанныеСтруктурнаяЕдиницаПолучательПриИзмененииВидОперацииПередачаВЭксплуатацию(СтруктураДанные,
			ЗначенияРеквизитовПолучателя);
		
	ИначеЕсли СтруктураДанные.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.ВозвратИзЭксплуатации Тогда
		
		ПолучитьДанныеСтруктурнаяЕдиницаПолучательПриИзмененииВидОперацииВозвратИзЭксплуатации(СтруктураДанные,
			ЗначенияРеквизитовПолучателя);
		
	КонецЕсли;
	
	АдресДоставки = "";
	МассивВладельцев = Новый Массив;
	МассивВладельцев.Добавить(СтруктураДанные.Получатель);
	
	Адреса = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивВладельцев, ,
		Справочники.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы);
	Если Адреса.Количество() > 0 Тогда
		
		АдресДоставки = Адреса[0].Представление;
		
	КонецЕсли;
	СтруктураДанные.Вставить("АдресДоставки", АдресДоставки);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеСтруктурнаяЕдиницаПолучательПриИзменении()

&НаСервере
Процедура ПолучитьДанныеСтруктурнаяЕдиницаПолучательПриИзмененииВидОперацииПеремещение(СтруктураДанные,
	ЗначенияРеквизитовПолучателя, Знач ТипСтруктурнойЕдиницы, Знач ТипСтруктурнойЕдиницыПолучатель)
	
	СтруктураДанные.Вставить("СтруктурнаяЕдиница", ЗначенияРеквизитовПолучателя.ИсточникПеремещения);
	СтруктураДанные.Вставить("Ячейка", ЗначенияРеквизитовПолучателя.ЯчейкаИсточникаПеремещения);
	
	РеквизитыИсточникаПеремещения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЗначенияРеквизитовПолучателя.ИсточникПеремещения, "ОрдерныйСклад, ТипСтруктурнойЕдиницы");
	
	Если ЗначениеЗаполнено(ЗначенияРеквизитовПолучателя.ИсточникПеремещения) Тогда
		СтруктураДанные.СтруктурнаяЕдиницаПолучательТип = РеквизитыИсточникаПеремещения.ТипСтруктурнойЕдиницы;
	Иначе
		РеквизитыИсточникаПеремещения.ОрдерныйСклад = Ложь;
	КонецЕсли;
			
	Если РеквизитыИсточникаПеремещения.ТипСтруктурнойЕдиницы <> Перечисления.ТипыСтруктурныхЕдиниц.Розница
		И РеквизитыИсточникаПеремещения.ТипСтруктурнойЕдиницы <> Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет Тогда
		СтруктураДанные.Вставить("ОрдерныйСкладИсточник", РеквизитыИсточникаПеремещения.ОрдерныйСклад);
	КонецЕсли;
	
	ФункциональнаяОпцияЗаказПриПеремещенииВШапке = (Объект.ПоложениеЗаказаПокупателя
		<> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	
	Если ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница
		Или ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет Тогда
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыРезерв.Видимость = Ложь;
		Элементы.ЗапасыИзменитьРезерв.Видимость = Ложь;
		ИспользуетсяРезервирование = Ложь;
		
	Иначе
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыРезерв.Видимость = Истина;
		Элементы.ЗапасыИзменитьРезерв.Видимость = Истина;
		ИспользуетсяРезервирование = ПолучитьФункциональнуюОпцию("РезервированиеЗапасов");
		
	КонецЕсли;
	
	РозничноеПеремещение = ((ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница
		Или ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет)
		И (ТипСтруктурнойЕдиницыПолучатель = Перечисления.ТипыСтруктурныхЕдиниц.Розница
		Или ТипСтруктурнойЕдиницыПолучатель = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет));
	
	Если НЕ ИспользуетсяРезервирование ИЛИ РозничноеПеремещение Тогда
	 	Элементы.ГруппаЗаказОснование.Видимость = Ложь;
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыЗаказПокупателя.Видимость = Ложь;
	Иначе
		Элементы.ГруппаЗаказОснование.Видимость = ФункциональнаяОпцияЗаказПриПеремещенииВШапке;
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыЗаказПокупателя.Видимость = Не ФункциональнаяОпцияЗаказПриПеремещенииВШапке;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеСтруктурнаяЕдиницаПолучательПриИзмененииВидОперацииСписаниеНаРасходы(СтруктураДанные,
	ЗначенияРеквизитовПолучателя)
	СтруктураДанные.Вставить("СтруктурнаяЕдиница", ЗначенияРеквизитовПолучателя.ИсточникСписанияНаРасходы);
	СтруктураДанные.Вставить("Ячейка", ЗначенияРеквизитовПолучателя.ЯчейкаИсточникаСписанияНаРасходы);
	Если ЗначениеЗаполнено(ЗначенияРеквизитовПолучателя.ИсточникСписанияНаРасходы) Тогда
		СтруктураДанные.ОрдерныйСкладИсточник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ЗначенияРеквизитовПолучателя.ИсточникСписанияНаРасходы, "ОрдерныйСклад");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеСтруктурнаяЕдиницаПолучательПриИзмененииВидОперацииПередачаВЭксплуатацию(СтруктураДанные,
	ЗначенияРеквизитовПолучателя)
	СтруктураДанные.Вставить("СтруктурнаяЕдиница", ЗначенияРеквизитовПолучателя.ИсточникПередачиВЭксплуатацию);
	СтруктураДанные.Вставить("Ячейка", ЗначенияРеквизитовПолучателя.ЯчейкаИсточникаПередачиВЭксплуатацию);
	Если ЗначениеЗаполнено(ЗначенияРеквизитовПолучателя.ИсточникПередачиВЭксплуатацию) Тогда
		СтруктураДанные.ОрдерныйСкладИсточник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ЗначенияРеквизитовПолучателя.ИсточникПередачиВЭксплуатацию, "ОрдерныйСклад");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеСтруктурнаяЕдиницаПолучательПриИзмененииВидОперацииВозвратИзЭксплуатации(СтруктураДанные,
	ЗначенияРеквизитовПолучателя)
	СтруктураДанные.Вставить("СтруктурнаяЕдиница", ЗначенияРеквизитовПолучателя.ИсточникВозвратаИзЭксплуатации);
	СтруктураДанные.Вставить("Ячейка", ЗначенияРеквизитовПолучателя.ЯчейкаИсточникаВозвратаИзЭксплуатации);
	Если ЗначениеЗаполнено(ЗначенияРеквизитовПолучателя.ИсточникВозвратаИзЭксплуатации) Тогда
		СтруктураДанные.ОрдерныйСкладИсточник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ЗначенияРеквизитовПолучателя.ИсточникВозвратаИзЭксплуатации, "ОрдерныйСклад");
	КонецЕсли;
КонецПроцедуры

// Процедура обработки изменения вида операции документа.
//
&НаСервере
Процедура ОбработатьИзменениеВидаОперации()
	
	Если ЗначениеЗаполнено(Объект.ВидОперации)
		И Объект.ВидОперации <> Перечисления.ВидыОперацийПеремещениеЗапасов.Перемещение Тогда
		
		ЗаполнитьРеквизитыПоВидуОперации();
		
		ТипСтруктурнойЕдиницы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтруктурнаяЕдиницаПолучатель,
			"ТипСтруктурнойЕдиницы");
		КэшЗначений.Вставить("СтруктурнаяЕдиницаПолучательТип", ТипСтруктурнойЕдиницы);
		
	КонецЕсли;
	
	УстановитьВидимостьИДоступность();
	
	СогласоватьЗначениеСПараметрамиВыбора("СтруктурнаяЕдиница");
	СогласоватьЗначениеСПараметрамиВыбора("СтруктурнаяЕдиницаПолучатель");
	
	// Прослеживаемость
	ОбновитьПризнакПрослеживаемости();
	
	ОпределитьВидимостьНастроекУчетаВНалогообложении();
	
КонецПроцедуры

&НаСервере
Процедура СогласоватьЗначениеСПараметрамиВыбора(ИмяРеквизита)
	ЗначениеРеквизита = Объект[ИмяРеквизита]; // СправочникСсылка.СтруктурныеЕдиницы
	Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		Возврат;
	КонецЕсли;
	ПараметрыВыбораЭлемента = ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(Элементы, ИмяРеквизита,
		"ПараметрыВыбора");
	Если ПараметрыВыбораЭлемента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТипСтруктурнойЕдиницыРеквизита = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеРеквизита,
		"ТипСтруктурнойЕдиницы");
	Для Каждого ТекущийПараметрВыбора Из ПараметрыВыбораЭлемента Цикл
		Для Каждого ТекущееЗначениеПараметраВыбора Из ТекущийПараметрВыбора.Значение Цикл
			Если ТекущееЗначениеПараметраВыбора = ТипСтруктурнойЕдиницыРеквизита Тогда
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Объект[ИмяРеквизита] = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоВидуОперации()
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,
		"ОсновнойСклад");
	ОсновнойСклад = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки,
		Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
	
	ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,
		"ОсновноеПодразделение");
	ОсновноеПодразделение = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки,
		Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.СписаниеНаРасходы 
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.ПередачаВЭксплуатацию Тогда
		
		Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить() Тогда
			
			Объект.СтруктурнаяЕдиница = ОсновнойСклад;
			
		КонецЕсли;
		
		Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить() Тогда
			
			Объект.СтруктурнаяЕдиницаПолучатель = ОсновноеПодразделение;
			
		КонецЕсли;
		
		ЗаполнитьСчетЗатратЗначениемПоУмолчанию();
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.ВозвратИзЭксплуатации Тогда
		
		Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить() Тогда
			
			Объект.СтруктурнаяЕдиница = ОсновноеПодразделение;
			
		КонецЕсли;
		
		Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить() Тогда
			
			Объект.СтруктурнаяЕдиницаПолучатель = ОсновнойСклад;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// ПодключаемоеОборудование
// Процедура получает данные по штрихкодам.
//
&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	// Преобразование весовых штрихкодов.
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодамВМассиве(
		СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		МассивДанныхШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если МассивДанныхШтрихкода <> Неопределено
			И МассивДанныхШтрихкода.Количество() <> 0 Тогда
			
			Для Каждого ДанныеШтрихкода Из МассивДанныхШтрихкода Цикл 
				
				СтруктураДанныеНоменклатуры = Новый Структура;
				СтруктураДанныеНоменклатуры.Вставить("ВидОперации", СтруктураДанные.ВидОперации);
				СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
				СтруктураДанныеНоменклатуры.Вставить("Организация", СтруктураДанные.Организация);
				ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(
					СтруктураДанныеНоменклатуры));
				
				Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
					ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	НоменклатураПараметрыВыбора = Метаданные.Документы.ПеремещениеЗапасов.ТабличныеЧасти.Запасы.Реквизиты.Номенклатура.ПараметрыВыбора;
	Для Каждого ПараметрВыбора Из НоменклатураПараметрыВыбора Цикл
		Если ПараметрВыбора.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(ПараметрВыбора.Значение) = Тип("ФиксированныйМассив") Тогда
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", ПараметрВыбора.Значение);
			Иначе
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(ПараметрВыбора.Значение);
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов)
	
	ИмяТабличнойЧасти = "Запасы";
	Если ЗначениеЗаполнено(МаркерПодбора) Тогда
		ИмяТабличнойЧасти = МаркерПодбора;
	КонецЕсли;
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("ВидОперации", Объект.ВидОперации);
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода.Количество() > 1 Тогда
			
			ПараметрыОткрытия = Новый Структура("МассивНоменклатуры, ТекШтрихкод", ДанныеШтрихкода, ТекШтрихкод);
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоДаннымШтрихкодовЗавершение", ЭтотОбъект,
				Новый Структура("СтруктураДанные, ИмяТабличнойЧасти", СтруктураДанные, ИмяТабличнойЧасти));
			
			ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ДублиНоменклатурыПоШтрихКодам",
				ПараметрыОткрытия, ЭтотОбъект, , , , ОповещениеОЗакрытии,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Продолжить;
		КонецЕсли;
		
		Если ДанныеШтрихкода <> Неопределено И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено 
			ИЛИ ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
			ОписаниеШтрихкода = Новый Структура;
			ОписаниеШтрихкода.Вставить("Штрихкод", ТекШтрихкод.Штрихкод);
			ОписаниеШтрихкода.Вставить("Номенклатура", ДанныеШтрихкода[0].Номенклатура);
			ОписаниеШтрихкода.Вставить("ТипНоменклатуры",
				ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры);
			ОписаниеШтрихкода.Вставить("ЭтоНабор", ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ЭтоНабор);
			ШтрихкодыНекорректногоТипа.Добавить(ОписаниеШтрихкода);
		Иначе
			
			ДанныеШтрихкода = ДанныеШтрихкода[0];
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
			ПараметрыОтбора.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			ПараметрыОтбора.Вставить("Партия", ДанныеШтрихкода.Партия);
			ПараметрыОтбора.Вставить("ЕдиницаИзмерения", ДанныеШтрихкода.ЕдиницаИзмерения);
			
			МассивСтрокТЧ = Объект[ИмяТабличнойЧасти].НайтиСтроки(ПараметрыОтбора);
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения),
					ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				Если ИмяТабличнойЧасти = "Запасы" Тогда
					
					НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Себестоимость;
					НоваяСтрока.ТипСчетаЗатрат = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипСчетаЗатрат;
					
					Если Объект.ВидОперации <> ПредопределенноеЗначение(
						"Перечисление.ВидыОперацийПеремещениеЗапасов.Перемещение") Тогда
						
						// Прослеживаемость
						НоваяСтрока.СтранаПроисхождения = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтранаПроисхождения;
						Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров И ПрослеживаемаяОперация(Объект.ВидОперации) Тогда
							НоваяСтрока.ПрослеживаемыйТовар = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПрослеживаемыйТовар;
							НоваяСтрока.ПрослеживаемыйКомплект = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПрослеживаемыйКомплект;
							ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, НоваяСтрока);
						Иначе
							НоваяСтрока.ПрослеживаемыйТовар = Ложь;
							НоваяСтрока.ПрослеживаемыйКомплект = Ложь;
						КонецЕсли;
						Если НЕ НоваяСтрока.ПрослеживаемыйТовар Тогда
							ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("НомерГТД", НоваяСтрока.НомерГТД);
						КонецЕсли; 
						// Конец Прослеживаемость
						
					КонецЕсли;
					
				КонецЕсли;
				
				Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Иначе
				НоваяСтрока = МассивСтрокТЧ[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				Если ИмяТабличнойЧасти = "Запасы" Тогда
					НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Себестоимость;
				КонецЕсли;
				Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
			Если ИмяТабличнойЧасти = "Запасы" И ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
				СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	РассчитатьОбъемИВесВДокументе();	
	ДействияПослеИзмененияТЧЗапасы();
	
	Результат = Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа", НеизвестныеШтрихкоды,
		ШтрихкодыНекорректногоТипа);
		
	Возврат Результат;
		
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаКлиенте
Процедура ЗаполнитьПоДаннымШтрихкодовЗавершение(СтруктураНоменклатуры, Параметры) Экспорт
	
	Если СтруктураНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеШтрихкода = СтруктураНоменклатуры.МассивНоменклатуры[0];
	ТекШтрихкод = СтруктураНоменклатуры.ТекШтрихкод;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	СтруктураДанные = Параметры.СтруктураДанные;
	ИмяТабличнойЧасти = Параметры.ИмяТабличнойЧасти;
	
	Если СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено
		Или ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
		ОписаниеШтрихкода = Новый Структура;
		ОписаниеШтрихкода.Вставить("Штрихкод", ТекШтрихкод.Штрихкод);
		ОписаниеШтрихкода.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
		ОписаниеШтрихкода.Вставить("ТипНоменклатуры", ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры);
		ОписаниеШтрихкода.Вставить("ЭтоНабор", ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор);
		ШтрихкодыНекорректногоТипа.Добавить(ОписаниеШтрихкода);
	Иначе
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
		ПараметрыОтбора.Вставить("Партия", ДанныеШтрихкода.Партия);
		ПараметрыОтбора.Вставить("ЕдиницаИзмерения", ДанныеШтрихкода.ЕдиницаИзмерения);
		
		МассивСтрокТЧ = Объект[ИмяТабличнойЧасти].НайтиСтроки(ПараметрыОтбора);
		Если МассивСтрокТЧ.Количество() = 0 Тогда
			НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
			НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
			НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
			НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
			НоваяСтрока.Количество = ТекШтрихкод.Количество;
			НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения),
				ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
			
			Если ИмяТабличнойЧасти = "Запасы" Тогда
				
				НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Себестоимость;
				НоваяСтрока.ТипСчетаЗатрат = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипСчетаЗатрат;
				
				Если Объект.ВидОперации <>  ПредопределенноеЗначение("Перечисление.ВидыОперацийПеремещениеЗапасов.Перемещение") Тогда
					
					// Прослеживаемость
					НоваяСтрока.СтранаПроисхождения = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтранаПроисхождения;
					Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров И ПрослеживаемаяОперация(Объект.ВидОперации) Тогда
						НоваяСтрока.ПрослеживаемыйТовар = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПрослеживаемыйТовар;
						НоваяСтрока.ПрослеживаемыйКомплект = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПрослеживаемыйКомплект;
						ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, НоваяСтрока);
					Иначе
						НоваяСтрока.ПрослеживаемыйТовар = Ложь;
						НоваяСтрока.ПрослеживаемыйКомплект = Ложь;
					КонецЕсли;
					Если НЕ НоваяСтрока.ПрослеживаемыйТовар Тогда
						ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("НомерГТД", НоваяСтрока.НомерГТД);
					КонецЕсли; 
					// Конец Прослеживаемость
					
				КонецЕсли;
				
			КонецЕсли;
			
			Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Иначе
			НоваяСтрока = МассивСтрокТЧ[0];
			НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
			Если ИмяТабличнойЧасти = "Запасы" Тогда
				НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Себестоимость;
			КонецЕсли;
			Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
		Если ИмяТабличнойЧасти = "Запасы" И ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
			СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
		КонецЕсли;
		
	КонецЕсли;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	ДействияПослеИзмененияТЧЗапасы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов) Экспорт
	
	Модифицированность = Истина;
	
	НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов);
	НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);
		
		ПараметрыФормы = Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды);
		ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры", ПараметрыФормы,
			ЭтотОбъект, , , , Оповещение);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДействияПослеИзмененияТЧЗапасы()
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ОбновитьВидимостьПредупреждения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		Если ТекНекорректныйШтрихкод.Свойство("ЭтоНабор") И ТекНекорректныйШтрихкод.ЭтоНабор Тогда
			// Наборы
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", НСтр("ru = 'Набор'"));
		Иначе
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		КонецЕсли; 
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

// Конец ПодключаемоеОборудование

// Процедура заполняет колонку Резерв по резервам под заказ.
//
&НаСервере
Процедура ЗаполнитьЗапасыПоОстаткамНаСкладеНаСервере(ИмяТабличнойЧасти)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьЗапасыПоОстаткамНаСкладе(ИмяТабличнойЧасти);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	// Прослеживаемость
	ОбновитьОтображениеПрослеживаемости(); 
	// Конец Прослеживаемость
	
	ДействияПослеЧтенияОбъекта();
	
КонецПроцедуры // ЗаполнитьЗапасыПоОстаткамНаСкладеНаСервере()

// Процедура заполняет колонку Резерв по резервам под заказ.
//
&НаСервере
Процедура ЗаполнитьКолонкуРезервПоРезервамНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьКолонкуРезервПоРезервам();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	// Прослеживаемость
	ОбновитьОтображениеПрослеживаемости(); 
	// Конец Прослеживаемость
	
	ДействияПослеЧтенияОбъекта();
	
КонецПроцедуры // ЗаполнитьКолонкуРезервПоРезервамНаСервере()

&НаКлиенте 
Процедура ИзменитьРежимРаботаГТД(ВключитьРежимГТД)
	
	Если НЕ КэшЗначений.Свойство("ОбрабатываемыеРеквизиты") Тогда
		
		КэшЗначений.Вставить("ОбрабатываемыеРеквизиты", Новый Массив);
		
	КонецЕсли;
	
	Если ВключитьРежимГТД Тогда
		
		ВключитьРежимРаботаГТД();
		
	Иначе
		
		ВыключитьРежимРаботаГТД();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРежимРаботаГТД()
	
	НеизменяемыеРеквизиты = Новый Массив;
	НеизменяемыеРеквизиты.Добавить("ЗапасыПометка");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНомерСтроки");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНоменклатура");
	НеизменяемыеРеквизиты.Добавить("ЗапасыХарактеристика");
	НеизменяемыеРеквизиты.Добавить("ЗапасыПартия");
	НеизменяемыеРеквизиты.Добавить("ЗапасыКоличество");
	НеизменяемыеРеквизиты.Добавить("ЗапасыЕдиницаИзмерения");
	НеизменяемыеРеквизиты.Добавить("ЗапасыСтранаПроисхождения");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНомерГТД");
	ПрослеживаемостьФормыКлиентСерверУНФ.ДобавитьНеизменяемыеРеквизитыДляРежимаГТД(НеизменяемыеРеквизиты);
	
	Для каждого ЭлементФормы Из Элементы.Запасы.ПодчиненныеЭлементы Цикл
		
		Если НеизменяемыеРеквизиты.Найти(ЭлементФормы.Имя) = Неопределено
			И ЭлементФормы.Видимость = Истина Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементФормы.Имя, "Видимость", Ложь);
			КэшЗначений.ОбрабатываемыеРеквизиты.Добавить(ЭлементФормы.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЕдиницаИзмерения", "Доступность", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьРежимРаботаГТД()
	
	Для каждого ИмяЭлементаФормы Из КэшЗначений.ОбрабатываемыеРеквизиты Цикл
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлементаФормы, "Видимость", Истина);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЕдиницаИзмерения", "Доступность", Истина);
	
	КэшЗначений.ОбрабатываемыеРеквизиты = Новый Массив;
	
КонецПроцедуры

&НаСервере
Процедура НомераГТДЗаполнитьПоФактическимОстаткамНаСервере()
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ТаблицаЗапасы", Неопределено);
	ПараметрыПодбора.Вставить("ОстаткиПоГТД", Неопределено);
	ПараметрыПодбора.Вставить("Дата", Объект.Дата);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	
	ПараметрыПодбора.Вставить("ИндексТекущейСтроки", 0);
	Если ЗначениеЗаполнено(Элементы.Запасы.ТекущаяСтрока) Тогда
		УказательТекущейСтроки = Объект.Запасы.НайтиПоИдентификатору(Элементы.Запасы.ТекущаяСтрока);
		ИндексТекущейСтроки = Объект.Запасы.Индекс(УказательТекущейСтроки);
		ПараметрыПодбора.ИндексТекущейСтроки = ИндексТекущейСтроки;
	КонецЕсли;
	ПараметрыПодбора.Вставить("ЕстьКлючСвязиАвтоматическихСкидок", Неопределено);
	
	МассивИменПолей = Новый Массив;
	МассивИменПолей.Добавить("Резерв");
	ПараметрыПодбора.Вставить("ИменаПолей", МассивИменПолей);
	
	ГрузовыеТаможенныеДекларацииСервер.ПодготовитьТаблицуЗапасовИзТаблицыФормы(ПараметрыПодбора, Объект.Запасы);
	ГрузовыеТаможенныеДекларацииСервер.СформироватьОстаткиНомеровГТД(ПараметрыПодбора);
	ГрузовыеТаможенныеДекларацииСервер.ПеренестиОстаткиНомеровГТДВТаблицуФормы(Объект.Запасы, ПараметрыПодбора);
	
	Если ПараметрыПодбора.ИндексТекущейСтроки <> -1 Тогда
		
		СтрокаКоллекции = Объект.Запасы.Получить(ПараметрыПодбора.ИндексТекущейСтроки);
		Элементы.Запасы.ТекущаяСтрока = СтрокаКоллекции.ПолучитьИдентификатор();
		
	КонецЕсли;
	
	// Прослеживаемость
	ОбновитьОтображениеПрослеживаемости();
	
КонецПроцедуры

&НаСервере
Процедура НомераГТДПодобратьНаСервере()
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ТаблицаЗапасы", Неопределено);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	
	ГрузовыеТаможенныеДекларацииСервер.ПодготовитьТаблицуЗапасовИзТаблицыФормы(ПараметрыПодбора, Объект.Запасы);
	ГрузовыеТаможенныеДекларацииСервер.ПодобратьНомераГТДПоПредыдущимПоступлениям(ПараметрыПодбора);
	ГрузовыеТаможенныеДекларацииСервер.ПеренестиНомераГТДВТаблицуФормы(Объект.Запасы, ПараметрыПодбора);
	
	// Прослеживаемость
	ОбновитьОтображениеПрослеживаемости();
	
КонецПроцедуры

&НаСервере
Процедура НомераГТДОчиститьНомераИСтраныПроисхожденияНаСервере()
	
	ГрузовыеТаможенныеДекларацииСервер.ОчиститьНомераГТДИСтраныПроисхождения(Объект.Запасы, -1 , Ложь);
	
	// Прослеживаемость
	Объект.СведенияПрослеживаемости.Очистить();
	ОбновитьОтображениеПрослеживаемости();
	
КонецПроцедуры

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда
		
		Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда
		
			ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(
				НастройкиЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата",
				ЭтотОбъект, НастройкиЗагрузкиДанных);
			ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(
				НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
			
		ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда
			
			ДлительнаяОперация = ОбработатьПодготовленныеДанныеНоменклатуры(РезультатЗагрузки);
			
			СтруктураПараметров = Новый Структура;
			Если РезультатЗагрузки.НастройкиЗагрузкиДанных.Свойство("ТекстОшибки") Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатЗагрузки.НастройкиЗагрузкиДанных.ТекстОшибки);
			КонецЕсли;
			
			ПроверитьНеобходимостьПодключенияОбработчикаОжидания(ДлительнаяОперация, СтруктураПараметров);
						
		КонецЕсли;
		
	Иначе
		
		ЗагрузитьИзФайлаЗавершение(РезультатЗагрузки, "Запасы");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанные(АдресРезультатаЗагрузки)
	
	Попытка
		
		РезультатЗагрузки = ПолучитьИзВременногоХранилища(АдресРезультатаЗагрузки);
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;	
	
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ИмяСобытия = НСтр("ru='Загрузка данных'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, ,
			ПодробноеПредставлениеОшибки);
		
		ВызватьИсключение;
	
	КонецПопытки;
	
	Если РезультатЗагрузки.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ПеремещениеЗапасов.ТабличнаяЧасть.Запасы" Тогда
		
		ЗагрузитьДанныеВТабличноеПолеЗапасы(ТаблицаСопоставленияДанных);
		ОбновитьОтображениеПрослеживаемости();
		
	КонецЕсли;
	
	ДействияПослеЧтенияОбъекта();
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПодготовленныеДанныеНоменклатуры(РезультатЗагрузки)
	
	ПараметрыВызоваСервера = Новый Структура;
	ПараметрыВызоваСервера.Вставить("НастройкиЗагрузкиДанных", РезультатЗагрузки.НастройкиЗагрузкиДанных);
	ПараметрыВызоваСервера.Вставить("ТаблицаСопоставленияДанных", ДанныеФормыВЗначение(
		РезультатЗагрузки.ТаблицаСопоставленияДанных, Тип("ТаблицаЗначений")));
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр(
		"ru = 'Подсистема ЗагрузкаДанныхИзВнешнегоИсточника: Выполнение серверного метода загрузки результата'");
	ПараметрыВыполнения.ЗапуститьНеВФоне    = Ложь;
	ПараметрыВыполнения.ЗапуститьВФоне      = Истина;	
	
	ИмяМетода = "Справочники.Номенклатура.ОбработатьПодготовленныеДанные";
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыВызоваСервера, ПараметрыВыполнения);
	
КонецФункции

&НаСервере
Функция ИменаСвойств()
	
	ИменаСвойств = "Номенклатура, Количество, ЕдиницаИзмерения";
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		
		ИменаСвойств = ИменаСвойств + ", Характеристика";
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
		
		ИменаСвойств = ИменаСвойств + ", Партия";
		
	КонецЕсли;
		
	Если ПолучитьФункциональнуюОпцию("УчетГТД")
		И НЕ Объект.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.Перемещение Тогда
		
		ИменаСвойств = ИменаСвойств + ", СтранаПроисхождения, НомерГТД";
		
	КонецЕсли;
	
	Возврат ИменаСвойств;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьДанныеВТабличноеПолеЗапасы(ТаблицаСопоставленияДанных)
	
	ИменаСвойств = ИменаСвойств();
	
	НачатьТранзакцию();
	
	Попытка
		
		Для Каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = Объект.Запасы.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, ИменаСвойств);
				
				Если ЕстьРозницаСуммовойУчет Тогда
					НоваяСтрока.Сумма = СтрокаТаблицы.Сумма;
					НоваяСтрока.Себестоимость = СтрокаТаблицы.Себестоимость;
				КонецЕсли;
				
				Если НЕ ИспользуетсяРезервирование ИЛИ ЕстьРозница Тогда
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "ЗаказПокупателя") Тогда
						
						НоваяСтрока.ЗаказПокупателя = СтрокаТаблицы.ЗаказПокупателя;
						
					КонецЕсли;
				КонецЕсли;
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "СтранаПроисхождения")
					И ЗначениеЗаполнено(СтрокаТаблицы.СтранаПроисхождения)
					И СтрокаТаблицы.СтранаПроисхождения <> Справочники.СтраныМира.Россия
					И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "НомерГТД")
					И НЕ ЗначениеЗаполнено(СтрокаТаблицы.НомерГТД)
					И НЕ ПустаяСтрока(СтрокаТаблицы.НомерГТД_ВходящиеДанные)
					Тогда
					
					СправочникОбъект = Справочники.НомераГТД.СоздатьЭлемент();
					СправочникОбъект.Код = СтрокаТаблицы.НомерГТД_ВходящиеДанные;
					СправочникОбъект.ДопускаетсяЗаписьСОшибкой = Ложь;
					
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект, Истина, Истина);
					
					НоваяСтрока.НомерГТД = СправочникОбъект.Ссылка;
					
					ПараметрОтбора = Новый Структура("НомерГТД_ВходящиеДанные", СтрокаТаблицы.НомерГТД_ВходящиеДанные);
					СтрокиСНомеромГТД = ТаблицаСопоставленияДанных.НайтиСтроки(ПараметрОтбора);
					Для каждого СтрокаТаблицы Из СтрокиСНомеромГТД Цикл
						
						СтрокаТаблицы.НомерГТД = СправочникОбъект.Ссылка;
						
					КонецЦикла;
					
				КонецЕсли;
				
				// заполнить Серии номенклатуры
				ИспользоватьСерииНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура,
					"ИспользоватьСерииНоменклатуры");
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "Серия_ВходящиеДанные")
					И ЗначениеЗаполнено(СтрокаТаблицы.Серия_ВходящиеДанные) 
					И ИспользоватьСерииНоменклатуры Тогда
					
						Если СтрНайти(СтрокаТаблицы.Серия_ВходящиеДанные, Символы.ПС) > 0 Тогда
							Разделитель = Символы.ПС;
						ИначеЕсли СтрНайти(СтрокаТаблицы.Серия_ВходящиеДанные, ",") > 0 Тогда
							Разделитель = ",";
						ИначеЕсли СтрНайти(СтрокаТаблицы.Серия_ВходящиеДанные, ";") > 0 Тогда
							Разделитель = ";";
						ИначеЕсли СтрНайти(СтрокаТаблицы.Серия_ВходящиеДанные, " ") > 0 Тогда
							Разделитель = " ";
						КонецЕсли;
						МассивСерийных = СтрРазделить(СтрокаТаблицы.Серия_ВходящиеДанные, Разделитель);
						
						Для каждого серийный Из МассивСерийных Цикл
							серийныйСсылка = Справочники.СерииНоменклатуры.НайтиПоНаименованию(СокрЛП(серийный), Истина, , НоваяСтрока.Номенклатура);
							Если НЕ ЗначениеЗаполнено(серийныйСсылка) Тогда
								
								серийныйОбъект = Справочники.СерииНоменклатуры.СоздатьЭлемент();
								серийныйОбъект.Владелец = НоваяСтрока.Номенклатура;
								серийныйОбъект.Наименование	= СокрЛП(серийный);
								серийныйОбъект.Записать();
								серийныйСсылка = серийныйОбъект.Ссылка;
							КонецЕсли;
							
							СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, серийныйСсылка, Объект); 
						
						КонецЦикла;
				
				КонецЕсли;
					
					ПроверитьИЗагрузитьЯчейки(СтрокаТаблицы, НоваяСтрока, УчетПоЯчейкам);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ИмяСобытия = НСтр("ru='Загрузка данных'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, ,
			ПодробноеПредставлениеОшибки);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИЗагрузитьЯчейки(СтрокаТаблицы, НоваяСтрока, ФОИспользоватьЯчейки)
	
	Если Не ФОИспользоватьЯчейки Тогда
		Возврат
	КонецЕсли;
	
	Если Объект.ПоложениеЯчейкиОтправителя = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		
		Если ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "Ячейка") 
			И Не ЗначениеЗаполнено(СтрокаТаблицы.Ячейка) И Не ПустаяСтрока(СтрокаТаблицы.Ячейка_ВходящиеДанные) Тогда
			
			ЯчейкаСправочник = Справочники.Ячейки.СоздатьЭлемент();
			ЯчейкаСправочник.Владелец = Объект.СтруктурнаяЕдиница;
			ЯчейкаСправочник.Наименование = СтрокаТаблицы.Ячейка_ВходящиеДанные;
			ЯчейкаСправочник.Записать();
			
			СтрокаТаблицы.Ячейка = ЯчейкаСправочник.Ссылка;
			
		КонецЕсли;
		
		НоваяСтрока.Ячейка = СтрокаТаблицы.Ячейка;
		
	КонецЕсли;

	Если Объект.ПоложениеЯчейкиПолучателя = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		
		Если ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаПолучатель) И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "ЯчейкаПолучатель") 
			И Не ЗначениеЗаполнено(СтрокаТаблицы.ЯчейкаПолучатель) И Не ПустаяСтрока(СтрокаТаблицы.ЯчейкаПолучатель_ВходящиеДанные) Тогда
			
			ЯчейкаСправочник = Справочники.Ячейки.СоздатьЭлемент();
			ЯчейкаСправочник.Владелец = Объект.СтруктурнаяЕдиницаПолучатель;
			ЯчейкаСправочник.Наименование = СтрокаТаблицы.ЯчейкаПолучатель_ВходящиеДанные;
			ЯчейкаСправочник.Записать();
			
			СтрокаТаблицы.ЯчейкаПолучатель = ЯчейкаСправочник.Ссылка;
			
		КонецЕсли;
		
		НоваяСтрока.ЯчейкаПолучатель = СтрокаТаблицы.ЯчейкаПолучатель;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныйПараметр)
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных, ДополнительныйПараметр);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных, ТипЗагрузки)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	ТоварыДобавлены = Ложь;
	Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрокаТовары = Объект.Запасы.Добавить();
		НоваяСтрокаТовары.Характеристика = СтрокаТаблицы.Характеристика;
		НоваяСтрокаТовары.Партия = СтрокаТаблицы.Партия;
		
		НоваяСтрокаТовары.Номенклатура = СтрокаТаблицы.Номенклатура;
		НоваяСтрокаТовары.Цена = СтрокаТаблицы.Цена;
		НоваяСтрокаТовары.Количество = СтрокаТаблицы.Количество;
		НоваяСтрокаТовары.ЕдиницаИзмерения = СтрокаТаблицы.ЕдиницаИзмерения;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
			НоваяСтрокаТовары.СтавкаНДС = СтрокаТаблицы.СтавкаНДС;
		Иначе
			НоваяСтрокаТовары.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТаблицы.Номенклатура.ВидСтавкиНДС);
		КонецЕсли;
		
		ТоварыДобавлены = Истина;
		
	КонецЦикла;
	
	Если ТоварыДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	ДействияПослеЧтенияОбъекта();
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

&НаСервереБезКонтекста
Функция ПолучитьПроектИзЗаказа(ЗаказПокупателя)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказПокупателя, "Проект");
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРеквизитыПечати()
	
	НаборОснованийПечати = Новый Массив;
	Если Объект.ПоложениеЗаказаПокупателя = КэшЗначений.ПоложениеЗаказаВТабличнойЧасти Тогда
		
		Для каждого СтрокаТаблицы Из Объект.Запасы Цикл
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя)
				И НаборОснованийПечати.Найти(СтрокаТаблицы.ЗаказПокупателя) = Неопределено Тогда
				
				НаборОснованийПечати.Добавить(СтрокаТаблицы.ЗаказПокупателя);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзмененияРеквизитовПечати", ЭтотОбъект);
	ОткрытьФорму("Обработка.РеквизитыПечати.Форма.РеквизитыПечатиПеремещениеЗапасов",
		Новый Структура("КонтекстПечати, НаборОснованийПечати", Объект, НаборОснованийПечати), ЭтотОбъект, , , ,
		ОписаниеОповещения);

КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьНастройкиИзмененияКоличества()
	
	НастройкиКоличества = ДокументыУНФКлиентСервер.ПараметрыСбросаКоличества();
	ДокументыУНФ.ЗаполнитьНастройкиКоличества(НастройкиКоличества);
	Возврат НастройкиКоличества;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСчетЗатратЗначениемПоУмолчанию()
	
	Если НЕ ПолучитьФункциональнуюОпцию("ОтображатьСчетаУчета") Тогда
		Объект.СчетЗатрат = ПланыСчетов.Управленческий.КоммерческиеРасходы;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьВесИОбъемЕдиницыТовара()
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПеремещениеЗапасовЗапасы.НомерСтроки КАК НомерСтроки,
	|	ПеремещениеЗапасовЗапасы.Номенклатура КАК Номенклатура,
	|	ПеремещениеЗапасовЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ ВТПеремещениеЗапасовЗапасы
	|ИЗ
	|	&ПеремещениеЗапасовЗапасы КАК ПеремещениеЗапасовЗапасы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТПеремещениеЗапасовЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(ВесИОбъемЕдиницТоваров.Вес, СпрНоменклатура.Вес * ЕСТЬNULL(СпрЕдиницыИзмерения.Коэффициент, 1)) КАК ВесЕдиницыТовара,
	|	ЕСТЬNULL(ВесИОбъемЕдиницТоваров.Объем, СпрНоменклатура.Объем * ЕСТЬNULL(СпрЕдиницыИзмерения.Коэффициент, 1)) КАК ОбъемЕдиницыТовара
	|ИЗ
	|	ВТПеремещениеЗапасовЗапасы КАК ВТПеремещениеЗапасовЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ВТПеремещениеЗапасовЗапасы.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК СпрЕдиницыИзмерения
	|		ПО ВТПеремещениеЗапасовЗапасы.ЕдиницаИзмерения = СпрЕдиницыИзмерения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВесИОбъемЕдиницТоваров КАК ВесИОбъемЕдиницТоваров
	|		ПО ВТПеремещениеЗапасовЗапасы.Номенклатура = ВесИОбъемЕдиницТоваров.Номенклатура
	|			И ВТПеремещениеЗапасовЗапасы.ЕдиницаИзмерения = ВесИОбъемЕдиницТоваров.ЕдиницаИзмерения");
	Запрос.УстановитьПараметр("ПеремещениеЗапасовЗапасы", Объект.Запасы.Выгрузить(, "НомерСтроки, Номенклатура, ЕдиницаИзмерения"));
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВесИОбъемЕдиницыТовара = Новый Соответствие;
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ВесИОбъемЕдиницыТовара[Выборка.НомерСтроки] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВесИОбъемЕдиницыТовара[Выборка.НомерСтроки] = Новый Структура;
		ВесИОбъемЕдиницыТовара[Выборка.НомерСтроки].Вставить("ВесЕдиницыТовара", Выборка.ВесЕдиницыТовара);
		ВесИОбъемЕдиницыТовара[Выборка.НомерСтроки].Вставить("ОбъемЕдиницыТовара", Выборка.ОбъемЕдиницыТовара);
		
	КонецЦикла;
	
	ТребуетсяРасчетВесаЗаказа = Ложь;
	ТребуетсяРасчетОбъемаЗаказа = Ложь;
	
	Для Каждого ТекСтрокаЗапасы Из Объект.Запасы Цикл
		
		Если ВесИОбъемЕдиницыТовара[ТекСтрокаЗапасы.НомерСтроки] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекСтрокаЗапасы.ВесЕдиницыТовара = ВесИОбъемЕдиницыТовара[ТекСтрокаЗапасы.НомерСтроки].ВесЕдиницыТовара;
		Если Не ЗначениеЗаполнено(ТекСтрокаЗапасы.Вес)
			И ЗначениеЗаполнено(ТекСтрокаЗапасы.ВесЕдиницыТовара * ТекСтрокаЗапасы.Количество) Тогда
			ТекСтрокаЗапасы.Вес = ТекСтрокаЗапасы.ВесЕдиницыТовара * ТекСтрокаЗапасы.Количество;
			ТребуетсяРасчетВесаЗаказа = Истина;
		КонецЕсли;
		
		ТекСтрокаЗапасы.ОбъемЕдиницыТовара = ВесИОбъемЕдиницыТовара[ТекСтрокаЗапасы.НомерСтроки].ОбъемЕдиницыТовара;
		Если Не ЗначениеЗаполнено(ТекСтрокаЗапасы.Объем)
			И ЗначениеЗаполнено(ТекСтрокаЗапасы.ВесЕдиницыТовара * ТекСтрокаЗапасы.Количество) Тогда
			ТекСтрокаЗапасы.Объем = ТекСтрокаЗапасы.ОбъемЕдиницыТовара * ТекСтрокаЗапасы.Количество;
			ТребуетсяРасчетОбъемаЗаказа = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТребуетсяРасчетВесаЗаказа И ЗначениеЗаполнено(Объект.Запасы.Итог("Вес")) Тогда
		Объект.Вес = Объект.Запасы.Итог("Вес");
	КонецЕсли;
	
	Если ТребуетсяРасчетОбъемаЗаказа И ЗначениеЗаполнено(Объект.Запасы.Итог("Объем")) Тогда
		Объект.Объем = Объект.Запасы.Итог("Объем");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОбъемИВесВДокументе()
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Объект.Вес = 0;
		Объект.Объем = 0;
		Возврат;
	КонецЕсли;
	
	Объект.Вес = Объект.Запасы.Итог("Вес");
	Объект.Объем = Объект.Запасы.Итог("Объем");
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтотОбъект);
	
КонецФункции

#Область КопированиеСтрокТабличныхЧастей

// Вызывает процедуру копирования строк и оповещает пользователя о количестве скопированных.
//
&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

// Вызывает процедуру вставки строк и оповещает пользователя о количестве вставленных.
//
&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

// Выполняет копирование выделенных строк в буфер обмена.
//
&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

// Вставляет скопированные строки из буфера обмена в выбранную табличную часть.
//
&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных);
	
	ДействияПослеЧтенияОбъекта();
	
КонецПроцедуры

// Обрабатывает вставленные строки.
//
&НаСервере
Процедура ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	
	ЭтоПеремещение = ?(Объект.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.Перемещение, Истина, Ложь);
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("ВидОперации", Объект.ВидОперации);
		СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		КонецЕсли;
		
		Если ЭтоПеремещение Тогда
			Строка.НомерГТД = Справочники.НомераГТД.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПодбором

&НаКлиенте
Процедура ПодобратьТовары(ИмяТабличнойЧасти)
	
	МаркерПодбора = ИмяТабличнойЧасти;
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти);
	
КонецПроцедуры

// Функция получает список товаров из временного хранилища
//
&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	СтруктураДанныеНоменклатуры = Новый Структура;
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		СтруктураДанныеНоменклатуры.Очистить();
		СтруктураДанныеНоменклатуры.Вставить("ВидОперации", Объект.ВидОперации);
		СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		Если ИмяТабличнойЧасти="Запасы" Тогда
			ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "ЗаказПокупателя", "ПоложениеЗаказаПокупателя");			
		КонецЕсли; 
		
		// Характеристики
		СтруктураДанныеНоменклатуры.Вставить("Номенклатура", СтрокаЗагрузки.Номенклатура);
		СтруктураДанныеНоменклатуры.Вставить("Характеристика", СтрокаЗагрузки.Характеристика);
		
		СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанныеНоменклатуры);
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
		
		НоваяСтрока.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
		НоваяСтрока.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
		НоваяСтрока.ЗаполнениеХарактеристикиПроверено = Истина;
		
		Если ИмяТабличнойЧасти = "Запасы" Тогда 
			НоваяСтрока.ВесЕдиницыТовара = СтруктураДанные.ВесЕдиницыТовара;
			НоваяСтрока.Вес = НоваяСтрока.ВесЕдиницыТовара * НоваяСтрока.Количество;
			НоваяСтрока.ОбъемЕдиницыТовара = СтруктураДанные.ОбъемЕдиницыТовара;
			НоваяСтрока.Объем = НоваяСтрока.ОбъемЕдиницыТовара * НоваяСтрока.Количество;
		КонецЕсли;
		
		Если СтруктураДанные.ИспользоватьХарактеристики
			Тогда
			НоваяСтрока.Характеристика = СтруктураДанные.Характеристика;
		КонецЕсли;
		// Конец Характеристики
		
		//Партии
		НоваяСтрока.ИспользоватьПартии = ?(ИмяТабличнойЧасти = "Отходы", Истина, СтруктураДанные.ИспользоватьПартии);
		НоваяСтрока.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
		
		НоваяСтрока.Партия = ?(ЗначениеЗаполнено(СтрокаЗагрузки.Партия), СтрокаЗагрузки.Партия, СтруктураДанные.Партия);
		// Конец Партии
		
		Если ИмяТабличнойЧасти = "Запасы" Тогда
			НоваяСтрока.ТипСчетаЗатрат = СтруктураДанные.ТипСчетаЗатрат;
			НоваяСтрока.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
			ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект[ИмяТабличнойЧасти], НоваяСтрока, "КлючСвязи");
		КонецЕсли;
		
		Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПеремещениеЗапасов.Перемещение") Тогда
			
			// Прослеживаемость
			НоваяСтрока.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
			Если ПрослеживаемаяТабличнаяЧасть(ИмяТабличнойЧасти) Тогда
				Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров И ПрослеживаемаяОперация(Объект.ВидОперации) Тогда
					НоваяСтрока.ПрослеживаемыйТовар = СтруктураДанные.ПрослеживаемыйТовар;
					НоваяСтрока.ПрослеживаемыйКомплект = СтруктураДанные.ПрослеживаемыйКомплект;
					ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, НоваяСтрока);
				Иначе
					НоваяСтрока.ПрослеживаемыйТовар = Ложь;
					НоваяСтрока.ПрослеживаемыйКомплект = Ложь;
				КонецЕсли;
				Если НЕ НоваяСтрока.ПрослеживаемыйТовар Тогда
					НоваяСтрока.НомерГТД = СтруктураДанные.НомерГТД;
				Иначе
					НоваяСтрока.НомерГТД = Неопределено;
				КонецЕсли;
				ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект[ИмяТабличнойЧасти], НоваяСтрока, "КлючСвязи");
			Иначе
				НоваяСтрока.НомерГТД = СтруктураДанные.НомерГТД;
			КонецЕсли;
			// Конец Прослеживаемость
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьВидимостьПредупреждения(ЭтотОбъект);
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

&НаКлиенте
Процедура ПоискПоШтрихкодуНачало()
	
	ТекШтрихкод = "";
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект,
		Новый Структура("ТекШтрихкод", ТекШтрихкод));
	
	#Если МобильныйКлиент Тогда
	ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду", , , , , , ОбработкаЗавершения);
	#Иначе
	ПоказатьВводЗначения(ОбработкаЗавершения, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, СокрЛП(ДополнительныеПараметры.ТекШтрихкод), СокрЛП(Результат));
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры // ПоискПоШтрихкоду()

&НаКлиенте
Процедура ПолучитьВесЗавершение(Параметры) Экспорт
	
	СтрокаТабличнойЧасти = Параметры;
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Себестоимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеИзТСД()
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()

// Конец ПодключаемоеОборудование

#КонецОбласти

#Область УправлениеВнешнимВидомФормы

&НаСервере
Процедура УстановитьВидимостьИДоступность()
	
	ФункциональнаяОпцияЗаказПриПеремещенииВШапке = (Объект.ПоложениеЗаказаПокупателя
		<> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРаботаСНомерамиГТД", "Видимость",
		Объект.ВидОперации <> КэшЗначений.Перемещение И КэшЗначений.УчетГТД);
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Склад);
	НовыйМассив.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Розница);
	НовыйМассив.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет);
	Если Константы.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство.Получить() Тогда
		НовыйМассив.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Подразделение);
	КонецЕсли;
	МассивСкладПодразделениеРозница = Новый ФиксированныйМассив(НовыйМассив);
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Подразделение);
	МассивПодразделение = Новый ФиксированныйМассив(НовыйМассив);
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Склад);
	МассивСклад = Новый ФиксированныйМассив(НовыйМассив);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.Перемещение Тогда
		
		Элементы.СчетЗатрат.Видимость = Ложь;
		Элементы.НаправлениеДеятельности.Видимость = Ложь;
		Элементы.ЗапасыПодбор.Видимость = Истина;
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСтруктурнойЕдиницы", МассивСкладПодразделениеРозница);
		НовыйПараметр2 = Новый ПараметрВыбора("ВидОперации", Перечисления.ВидыОперацийПеремещениеЗапасов.Перемещение);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыйМассив.Добавить(НовыйПараметр2);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.СтруктурнаяЕдиница.ПараметрыВыбора = НовыеПараметры;
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСтруктурнойЕдиницы", МассивСкладПодразделениеРозница);
		НовыйПараметр2 = Новый ПараметрВыбора("ВидОперации", Перечисления.ВидыОперацийПеремещениеЗапасов.Перемещение);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыйМассив.Добавить(НовыйПараметр2);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.СтруктурнаяЕдиницаПолучатель.ПараметрыВыбора = НовыеПараметры;
		
		ТипСтруктурнойЕдиницы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтруктурнаяЕдиница,
			"ТипСтруктурнойЕдиницы");
		
		Если ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница
			ИЛИ ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет Тогда
			Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыРезерв.Видимость = Ложь;
			Элементы.ЗапасыИзменитьРезерв.Видимость = Ложь;
			ИспользуетсяРезервирование = Ложь;
		Иначе
			Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыРезерв.Видимость = Истина;
			Элементы.ЗапасыИзменитьРезерв.Видимость = Истина;
			ИспользуетсяРезервирование = ПолучитьФункциональнуюОпцию("РезервированиеЗапасов");
		КонецЕсли;
		
		ТипСтруктурнойЕдиницыПолучателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтруктурнаяЕдиницаПолучатель,
			"ТипСтруктурнойЕдиницы");
			
		РозничноеПеремещение = ((ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница
			ИЛИ ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет)
			И (ТипСтруктурнойЕдиницыПолучателя = Перечисления.ТипыСтруктурныхЕдиниц.Розница
	 		ИЛИ ТипСтруктурнойЕдиницыПолучателя = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет));
		
		Если НЕ ИспользуетсяРезервирование ИЛИ РозничноеПеремещение Тогда
			Элементы.ГруппаЗаказОснование.Видимость = Ложь;
			Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыЗаказПокупателя.Видимость = Ложь;
		Иначе
			Элементы.ГруппаЗаказОснование.Видимость = ФункциональнаяОпцияЗаказПриПеремещенииВШапке;
			Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыЗаказПокупателя.Видимость = НЕ ФункциональнаяОпцияЗаказПриПеремещенииВШапке;
		КонецЕсли;
		
		Элементы.СтруктурнаяЕдиница.Видимость = Истина;
		Элементы.СтруктурнаяЕдиницаПолучатель.Видимость = Истина;
		
		Элементы.СтраницаСпецоснастка.Видимость = Ложь;
		Элементы.СтраницаИнвентарьИХозяйственныеПринадлежности.Видимость = Ложь;
		
		Элементы.СтраницаЗапасы.Заголовок = НСтр("ru = 'Запасы'");
		
		Элементы.Проект.Видимость = Ложь;
		Элементы.ЗапасыПроект.Видимость = Ложь;
		
		Элементы.КодОперацииПрослеживаемости.Видимость = Ложь;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.СписаниеНаРасходы Тогда
		
		ИспользуетсяРезервирование = ПолучитьФункциональнуюОпцию("РезервированиеЗапасов");
		Элементы.СчетЗатрат.Видимость = Истина;
		Элементы.НаправлениеДеятельности.Видимость = ПолучитьВидимостьНаправленияДеятельности(
			Объект.СчетЗатрат);
		Элементы.ГруппаЗаказОснование.Видимость = ФункциональнаяОпцияЗаказПриПеремещенииВШапке
			И ИспользуетсяРезервирование;
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыЗаказПокупателя.Видимость = Не ФункциональнаяОпцияЗаказПриПеремещенииВШапке
			И ИспользуетсяРезервирование;
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыРезерв.Видимость = Истина;
		Элементы.ЗапасыИзменитьРезерв.Видимость = Истина;
		Элементы.ЗапасыПодбор.Видимость = Истина;
		
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Склад);
		НовыйМассив.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Розница);
		МассивСкладРозница = Новый ФиксированныйМассив(НовыйМассив);
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСтруктурнойЕдиницы", МассивСкладРозница);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.СтруктурнаяЕдиница.ПараметрыВыбора = НовыеПараметры;
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСтруктурнойЕдиницы", МассивПодразделение);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.СтруктурнаяЕдиницаПолучатель.ПараметрыВыбора = НовыеПараметры;
		
		Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить() Тогда
			
			Элементы.СтруктурнаяЕдиница.Видимость = Ложь;
			
		Иначе	
			
			Элементы.СтруктурнаяЕдиница.Видимость = Истина;
			
		КонецЕсли;
		
		Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить() Тогда
			
			Элементы.СтруктурнаяЕдиницаПолучатель.Видимость = Ложь;
			
		Иначе
			
			Элементы.СтруктурнаяЕдиницаПолучатель.Видимость = Истина;
			
		КонецЕсли;
		
		Элементы.СтраницаСпецоснастка.Видимость = Ложь;
		Элементы.СтраницаИнвентарьИХозяйственныеПринадлежности.Видимость = Ложь;
		
		Элементы.СтраницаЗапасы.Заголовок = НСтр("ru = 'Запасы'");
		
		Если ИспользоватьПроекты Тогда
			Если Не ЗначениеЗаполнено(Объект.ПоложениеПроекта)
				Или Объект.ПоложениеПроекта = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
				Элементы.Проект.Видимость = Истина;
				Элементы.ЗапасыПроект.Видимость = Ложь;
			Иначе
				Элементы.Проект.Видимость = Ложь;
				Элементы.ЗапасыПроект.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Элементы.КодОперацииПрослеживаемости.Видимость = Истина;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.ПередачаВЭксплуатацию Тогда
		
		Элементы.СчетЗатрат.Видимость = Истина;
		Элементы.НаправлениеДеятельности.Видимость = ПолучитьВидимостьНаправленияДеятельности(Объект.СчетЗатрат);
		Элементы.ГруппаЗаказОснование.Видимость = Ложь;
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыЗаказПокупателя.Видимость = Ложь;
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыРезерв.Видимость = Ложь;
		Элементы.ЗапасыИзменитьРезерв.Видимость = Ложь;
		Элементы.ЗапасыПодбор.Видимость = Истина;
		ИспользуетсяРезервирование = Ложь;
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСтруктурнойЕдиницы", МассивСклад);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.СтруктурнаяЕдиница.ПараметрыВыбора = НовыеПараметры;
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСтруктурнойЕдиницы", МассивПодразделение);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.СтруктурнаяЕдиницаПолучатель.ПараметрыВыбора = НовыеПараметры;
		
		Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
			СтрокаЗапасы.Резерв = 0;
		КонецЦикла;
		
		Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить() Тогда
			
			Элементы.СтруктурнаяЕдиница.Видимость = Ложь;
			
		Иначе
			
			Элементы.СтруктурнаяЕдиница.Видимость = Истина;
			
		КонецЕсли;
		
		Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить() Тогда
			
			Элементы.СтруктурнаяЕдиницаПолучатель.Видимость = Ложь;
			
		Иначе
			
			Элементы.СтруктурнаяЕдиницаПолучатель.Видимость = Истина;
			
		КонецЕсли;
		
		Элементы.СтраницаСпецоснастка.Видимость = Истина;
		Элементы.СтраницаИнвентарьИХозяйственныеПринадлежности.Видимость = Истина;
		
		Элементы.СтраницаЗапасы.Заголовок = НСтр("ru = 'Спецодежда'");
		
		Если ИспользоватьПроекты Тогда
			Элементы.Проект.Видимость = Истина;
			Элементы.ЗапасыПроект.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.КодОперацииПрослеживаемости.Видимость = Ложь;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.ВозвратИзЭксплуатации Тогда
		
		Элементы.СчетЗатрат.Видимость = Ложь;
		Элементы.НаправлениеДеятельности.Видимость = Ложь;
		Элементы.ГруппаЗаказОснование.Видимость = Ложь;
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыЗаказПокупателя.Видимость = Ложь;
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыРезерв.Видимость = Ложь;
		Элементы.ЗапасыИзменитьРезерв.Видимость = Ложь;
		Элементы.ЗапасыПодбор.Видимость = Ложь;
		ИспользуетсяРезервирование = Ложь;
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСтруктурнойЕдиницы", МассивПодразделение);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.СтруктурнаяЕдиница.ПараметрыВыбора = НовыеПараметры;
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСтруктурнойЕдиницы", МассивСклад);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.СтруктурнаяЕдиницаПолучатель.ПараметрыВыбора = НовыеПараметры;
		
		Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
			СтрокаЗапасы.Резерв = 0;
		КонецЦикла;
		
		Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить() Тогда
			
			Элементы.СтруктурнаяЕдиница.Видимость = Ложь;
			
		Иначе
			
			Элементы.СтруктурнаяЕдиница.Видимость = Истина;
			
		КонецЕсли;
		
		Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить() Тогда
			
			Элементы.СтруктурнаяЕдиницаПолучатель.Видимость = Ложь;
			
		Иначе
			
			Элементы.СтруктурнаяЕдиницаПолучатель.Видимость = Истина;
			
		КонецЕсли;
		
		Элементы.СтраницаСпецоснастка.Видимость = Истина;
		Элементы.СтраницаИнвентарьИХозяйственныеПринадлежности.Видимость = Истина;
		
		Элементы.СтраницаЗапасы.Заголовок = НСтр("ru = 'Спецодежда'");
		
		Элементы.КодОперацииПрослеживаемости.Видимость = Ложь;
		
	Иначе
		
		Элементы.СтруктурнаяЕдиница.Видимость = Истина;
		Элементы.СтруктурнаяЕдиницаПолучатель.Видимость = Истина;
		
		Элементы.СтраницаСпецоснастка.Видимость = Ложь;
		Элементы.СтраницаИнвентарьИХозяйственныеПринадлежности.Видимость = Ложь;
		
		Элементы.СтраницаЗапасы.Заголовок = НСтр("ru = 'Запасы'");
		
		Элементы.КодОперацииПрослеживаемости.Видимость = Ложь;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСтранаПроисхождения", "Видимость",
		Объект.ВидОперации <> Перечисления.ВидыОперацийПеремещениеЗапасов.Перемещение
		И КэшЗначений.УчетГТД);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыНомерГТД", "Видимость",
		Объект.ВидОперации <> Перечисления.ВидыОперацийПеремещениеЗапасов.Перемещение
		И КэшЗначений.УчетГТД
		И Не КэшЗначений.ВестиУчетПрослеживаемыхТоваров);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыГруппаРНПТ", "Видимость",
		Объект.ВидОперации <> Перечисления.ВидыОперацийПеремещениеЗапасов.Перемещение
		И КэшЗначений.УчетГТД
		И КэшЗначений.ВестиУчетПрослеживаемыхТоваров);
	
	Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыСебестоимость.Видимость = ТипСтруктурнойЕдиницы
		= Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет;
	Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыСумма.Видимость = ТипСтруктурнойЕдиницы
		= Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет;
	
	СчетЗатратТипСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СчетЗатрат, "ТипСчета");
	Элементы.НаправлениеДеятельности.Видимость = СчетЗатратТипСчета = Перечисления.ТипыСчетов.Расходы;
	
	УчетПоЯчейкам = ПолучитьФункциональнуюОпцию("УчетПоЯчейкам");
	УстановитьВидимостьЯчейки();
	УстановитьВидимостьЯчейкиПолучатель();
	
	// Прослеживаемость
	ПрослеживаемостьФормыКлиентСерверУНФ.НастроитьВидимостьКолонокРНПТ(ЭтотОбъект, , , ПрослеживаемаяОперация(
		Объект.ВидОперации));
	// Конец Прослеживаемость
		
КонецПроцедуры // УстановитьВидимостьИДоступность()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьЭлементовПоНастройкеПользователя(Форма)
		
	Элементы = Форма.Элементы;
	
	// Видимость колонок, настроенная пользователем
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыВес", "Видимость",
		Форма.ПоказыватьКолонкуВесВПеремещенииЗапасов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыОбъем", "Видимость",
		Форма.ПоказыватьКолонкуОбъемВПеремещенииЗапасов);
		
	// Итоги по весу и объему
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИтогОбъем",
		"Видимость", Форма.ПоказыватьКолонкуОбъемВПеремещенииЗапасов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИтогВес",
		"Видимость", Форма.ПоказыватьКолонкуВесВПеремещенииЗапасов);

КонецПроцедуры                                                          

//
// Получает признак Ордерного склада.
//
&НаСервере
Процедура УстановитьВидимостьЯчейки()
	
	СтрокаРеквизитов = "ТипСтруктурнойЕдиницы, ОрдерныйСклад";
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СтруктурнаяЕдиница, СтрокаРеквизитов);
	
	Если ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) 
		И НЕ ЗначенияРеквизитов.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница
		И НЕ ЗначенияРеквизитов.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет 
		И УчетПоЯчейкам Тогда
		
		Элементы.Ячейка.Видимость = Объект.ПоложениеЯчейкиОтправителя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		Элементы.ЗапасыЯчейка.Видимость = Объект.ПоложениеЯчейкиОтправителя = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
		Элементы.СтруктурнаяЕдиница.АвтоМаксимальнаяШирина = ?(Элементы.Ячейка.Видимость, Ложь, Истина);
	Иначе
		Элементы.Ячейка.Видимость = Ложь;
		Элементы.ЗапасыЯчейка.Видимость = Ложь;
		Элементы.СтруктурнаяЕдиница.АвтоМаксимальнаяШирина = Истина;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьЯчейки()

&НаСервере
Процедура УстановитьВидимостьЯчейкиПолучатель()

	СтрокаРеквизитов = "ТипСтруктурнойЕдиницы, ОрдерныйСклад";
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СтруктурнаяЕдиницаПолучатель,
		СтрокаРеквизитов);

	Если ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаПолучатель)
		И Не ЗначенияРеквизитов.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница
		И Не ЗначенияРеквизитов.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет
		И УчетПоЯчейкам Тогда

		Элементы.ЯчейкаПолучатель.Видимость = Объект.ПоложениеЯчейкиПолучателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;;
		Элементы.ЗапасыЯчейкаПолучатель.Видимость = Объект.ПоложениеЯчейкиПолучателя = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
		Элементы.СтруктурнаяЕдиницаПолучатель.АвтоМаксимальнаяШирина = ?(Элементы.ЯчейкаПолучатель.Видимость, Ложь, Истина);
	Иначе
		Элементы.ЯчейкаПолучатель.Видимость = Ложь;
		Элементы.ЗапасыЯчейкаПолучатель.Видимость = Ложь;
		Элементы.СтруктурнаяЕдиницаПолучатель.АвтоМаксимальнаяШирина = Истина;
	КонецЕсли;

КонецПроцедуры // УстановитьВидимостьЯчейкиПолучателя()

&НаСервере
Процедура УстановитьВидимостьОтФОИспользоватьПодсистемуПроизводство()
	
	// Производство.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство") Тогда
		
		// Установка способа выбора структурной единицы в зависимости от ФО.
		Если Не ПолучитьФункциональнуюОпцию("УчетПоНесколькимПодразделениям")
			И Не ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам") Тогда

			Элементы.СтруктурнаяЕдиница.РежимВыбораИзСписка = Истина;
			Элементы.СтруктурнаяЕдиница.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
			Элементы.СтруктурнаяЕдиница.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);

			Элементы.СтруктурнаяЕдиницаПолучатель.РежимВыбораИзСписка = Истина;
			Элементы.СтруктурнаяЕдиницаПолучатель.СписокВыбора.Добавить(
				Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
			Элементы.СтруктурнаяЕдиницаПолучатель.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);

		КонецЕсли;

	КонецЕсли;

	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство")
		Или ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам") Тогда

		Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийПеремещениеЗапасов.Перемещение,
			НСтр("ru = 'Перемещение'"));

	ИначеЕсли Не ЗначениеЗаполнено(Объект.Ссылка) Тогда

		Объект.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.СписаниеНаРасходы;

	КонецЕсли;

	Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийПеремещениеЗапасов.СписаниеНаРасходы,
		НСтр("ru = 'Списание на расходы'"));
			
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПередачуВЭксплуатацию") Тогда
		Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийПеремещениеЗапасов.ПередачаВЭксплуатацию,
			НСтр("ru = 'Передача в эксплуатацию'"));
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВозвратИзЭксплуатации") Тогда
		Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийПеремещениеЗапасов.ВозвратИзЭксплуатации,
			НСтр("ru = 'Возврат из эксплуатации'"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		И Элементы.ВидОперации.СписокВыбора.Количество() = 1 Тогда
		Объект.ВидОперации = Элементы.ВидОперации.СписокВыбора[0].Значение;
	КонецЕсли;
	
	Элементы.ВидОперации.ТолькоПросмотр = Элементы.ВидОперации.СписокВыбора.Количество() = 1;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССериямиНоменклатуры

&НаКлиенте
Процедура ОткрытьПодборСерииНоменклатуры()
		
	ТекущиеДанныеИдентификатор = Элементы.Запасы.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыСерийНоменклатуры = ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор);
	
	ОткрытьФорму("Обработка.ПодборСерийНоменклатуры.Форма", ПараметрыСерийНоменклатуры, ЭтотОбъект);

КонецПроцедуры

&НаСервере
Функция ПолучитьСерииНоменклатурыИзХранилища(АдресВоВременномХранилище, КлючСтроки)
	
	Модифицированность = Истина;
	ПараметрыИменаПолей = Новый Структура;
	ПараметрыИменаПолей.Вставить("ЭтоПеремещение", Истина);
	Возврат СерииНоменклатурыУНФ.ПолучитьСерииНоменклатурыИзХранилища(Объект, АдресВоВременномХранилище, КлючСтроки, ПараметрыИменаПолей);
	
КонецФункции

&НаСервере
Функция ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор)

	Возврат СерииНоменклатурыУНФ.ПараметрыПодбораСерийНоменклатуры(Объект, УникальныйИдентификатор,
		ТекущиеДанныеИдентификатор, Истина);

КонецФункции

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

// ИнтеграцияГосИС
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	СобытияФормИСУНФКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец ИнтеграцияГосИС

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено,
	СтандартнаяОбработка = Неопределено)

	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);

КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область СлужебныеОбработчики

&НаКлиенте
Процедура ПослеВыполненияФоновогоЗадания(Прогресс, ДополнительныеПараметры) Экспорт
	
	Если НЕ Прогресс = Неопределено Тогда
		ОбработатьПодготовленныеДанные(Прогресс.АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеобходимостьПодключенияОбработчикаОжидания(ДлительнаяОперация, СтруктураПараметров = Неопределено)
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ПослеВыполненияФоновогоЗадания(ДлительнаяОперация, СтруктураПараметров);
		
	Иначе
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеВыполненияФоновогоЗадания", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Идет загрузка данных.'");
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прослеживаемость

&НаКлиенте
Процедура ОбработкаВыбораРНПТННаКлиенте(ВыбранноеЗначение)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторСтроки) Тогда
			СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;
		ОбработкаВыбораРНПТННаСервере(СтрокаТабличнойЧасти.ИдентификаторСтроки, ВыбранноеЗначение);
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаТабличнойЧасти);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбработкаВыбораГТДНаКлиенте(ВыбранноеЗначение)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		// Если в результате выбора пришло только значение,
		// то переложим его в структуру.
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.НомераГТД") Тогда
			ВыбранноеЗначение = Новый Структура("НомерГТД", ВыбранноеЗначение);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
			
			ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
			Если ДатаГТД > КонецДня(Объект.Дата) Тогда
				
				ТекстСообщения = НСтр("ru ='Выбранная ГТД датирована более поздней датой, чем текущий документ'");
				КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Запасы",
					СтрокаТабличнойЧасти.НомерСтроки, "РНПТ");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , КонтекстноеПоле);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаТабличнойЧасти);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораРНПТННаСервере(ИдентификаторСтроки, ВыбранноеЗначение)
	
	ПрослеживаемостьФормыУНФ.ОбработкаВыбораРНПТН(ЭтотОбъект, ИдентификаторСтроки, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСвязанныеЗаписи(СтрокаЗапасы)
	
	СтруктураОтбора = Новый Структура("ИдентификаторСтроки", СтрокаЗапасы.ИдентификаторСтроки);
	МассивСтрокСведенияПрослеживаемости = Объект.СведенияПрослеживаемости.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаТЧ Из МассивСтрокСведенияПрослеживаемости Цикл
		Объект.СведенияПрослеживаемости.Удалить(СтрокаТЧ);
	КонецЦикла;
	ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПризнакПрослеживаемости()
	
	ИспользуетсяПрослеживаемость = КэшЗначений.ВестиУчетПрослеживаемыхТоваров
		И ПрослеживаемаяОперация(Объект.ВидОперации);
	ПрослеживаемостьФормыУНФ.ОбновитьПризнакПрослеживаемости(Объект.Запасы, Объект.СведенияПрослеживаемости, ИспользуетсяПрослеживаемость);
	Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПрослеживаемаяОперация(Операция)
	
	Если Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийПеремещениеЗапасов.СписаниеНаРасходы")
		ИЛИ Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийПеремещениеЗапасов.ПередачаВЭксплуатацию")
		ИЛИ Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийПеремещениеЗапасов.ВозвратИзЭксплуатации") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ПрослеживаемаяТабличнаяЧасть(ИмяТабличнойЧасти)
	
	Если ИмяТабличнойЧасти = "Запасы" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбновитьОтображениеПрослеживаемости()
	
	ПрослеживаемостьФормыУНФ.ПриСозданииФормы(ЭтотОбъект, КэшЗначений);
	Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#Область Инициализация

ЭтоНоваяСтрокаЗапасы = Ложь;

#КонецОбласти
