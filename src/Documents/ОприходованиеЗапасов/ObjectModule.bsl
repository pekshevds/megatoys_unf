#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыЗаполненияДокумента

// Обработчик заполнения на основании документа ИнвентаризацияЗапасов.
//
// Параметры:
//  ДокументСсылкаИнвентаризацияЗапасов	 - ДокументСсылка.ИнвентаризацияЗапасов
//
Процедура ЗаполнитьПоИнвентаризацииЗапасов(ДокументСсылкаИнвентаризацияЗапасов) Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументСсылкаИнвентаризацияЗапасов) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОснование = ДокументСсылкаИнвентаризацияЗапасов.Ссылка;
	Организация = ДокументСсылкаИнвентаризацияЗапасов.Организация;
	СтруктурнаяЕдиница = ДокументСсылкаИнвентаризацияЗапасов.СтруктурнаяЕдиница;
	Ячейка = ДокументСсылкаИнвентаризацияЗапасов.Ячейка;
	
	// ФО Использовать подсистему Производство.
	Если Не Константы.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство.Получить()
		И СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
		ВызватьИсключение НСтр("ru = 'Нельзя ввести Оприходование запасов на основании инвентаризации запасов, т.к. недоступен вид деятельности Производство'");
	КонецЕсли;
	
	Запасы.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИнвентаризацияЗапасов.НомерСтроки КАК НомерСтроки,
	|	ИнвентаризацияЗапасов.Номенклатура КАК Номенклатура,
	|	ИнвентаризацияЗапасов.Характеристика КАК Характеристика,
	|	ИнвентаризацияЗапасов.Партия КАК Партия,
	|	ИнвентаризацияЗапасов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ИнвентаризацияЗапасов.Количество - ИнвентаризацияЗапасов.КоличествоУчет КАК КоличествоОтклонениеИнвентаризации,
	|	СУММА(ВЫБОР
	|			КОГДА ОприходованиеЗапасов.Количество ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ ОприходованиеЗапасов.Количество
	|		КОНЕЦ + ВЫБОР
	|			КОГДА ПересортицаЗапасовОприходование.Количество ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ ПересортицаЗапасовОприходование.Количество
	|		КОНЕЦ) КАК КоличествоОприходованное,
	|	ИнвентаризацияЗапасов.Цена КАК Цена
	|ИЗ
	|	Документ.ИнвентаризацияЗапасов.Запасы КАК ИнвентаризацияЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ОприходованиеЗапасовЗапасы.Номенклатура КАК Номенклатура,
	|			ОприходованиеЗапасовЗапасы.Характеристика КАК Характеристика,
	|			ОприходованиеЗапасовЗапасы.Партия КАК Партия,
	|			СУММА(ОприходованиеЗапасовЗапасы.Количество) КАК Количество
	|		ИЗ
	|			Документ.ОприходованиеЗапасов.Запасы КАК ОприходованиеЗапасовЗапасы
	|		ГДЕ
	|			ОприходованиеЗапасовЗапасы.Ссылка.ДокументОснование = &ДокументОснование
	|			И ОприходованиеЗапасовЗапасы.Ссылка.Проведен
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ОприходованиеЗапасовЗапасы.Номенклатура,
	|			ОприходованиеЗапасовЗапасы.Характеристика,
	|			ОприходованиеЗапасовЗапасы.Партия) КАК ОприходованиеЗапасов
	|		ПО ИнвентаризацияЗапасов.Номенклатура = ОприходованиеЗапасов.Номенклатура
	|			И ИнвентаризацияЗапасов.Характеристика = ОприходованиеЗапасов.Характеристика
	|			И ИнвентаризацияЗапасов.Партия = ОприходованиеЗапасов.Партия
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПересортицаЗапасовЗапасы.НоменклатураОприходование КАК НоменклатураОприходование,
	|			ПересортицаЗапасовЗапасы.ХарактеристикаОприходование КАК ХарактеристикаОприходование,
	|			ПересортицаЗапасовЗапасы.ПартияОприходование КАК ПартияОприходование,
	|			СУММА(ПересортицаЗапасовЗапасы.Количество) КАК Количество
	|		ИЗ
	|			Документ.ПересортицаЗапасов.Запасы КАК ПересортицаЗапасовЗапасы
	|		ГДЕ
	|			ПересортицаЗапасовЗапасы.Ссылка.ДокументОснование = &ДокументОснование
	|			И ПересортицаЗапасовЗапасы.Ссылка.Проведен
	|			И ПересортицаЗапасовЗапасы.Ссылка <> &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПересортицаЗапасовЗапасы.НоменклатураОприходование,
	|			ПересортицаЗапасовЗапасы.ХарактеристикаОприходование,
	|			ПересортицаЗапасовЗапасы.ПартияОприходование) КАК ПересортицаЗапасовОприходование
	|		ПО ИнвентаризацияЗапасов.Номенклатура = ПересортицаЗапасовОприходование.НоменклатураОприходование
	|			И ИнвентаризацияЗапасов.Характеристика = ПересортицаЗапасовОприходование.ХарактеристикаОприходование
	|			И ИнвентаризацияЗапасов.Партия = ПересортицаЗапасовОприходование.ПартияОприходование
	|ГДЕ
	|	ИнвентаризацияЗапасов.Ссылка = &ДокументОснование
	|	И ИнвентаризацияЗапасов.Количество - ИнвентаризацияЗапасов.КоличествоУчет > 0
	|	И ВЫБОР
	|			КОГДА ИнвентаризацияЗапасов.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|				ТОГДА ИнвентаризацияЗапасов.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.СобственныеЗапасы)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнвентаризацияЗапасов.Номенклатура,
	|	ИнвентаризацияЗапасов.Характеристика,
	|	ИнвентаризацияЗапасов.Партия,
	|	ИнвентаризацияЗапасов.ЕдиницаИзмерения,
	|	ИнвентаризацияЗапасов.Цена,
	|	ИнвентаризацияЗапасов.НомерСтроки,
	|	ИнвентаризацияЗапасов.Количество - ИнвентаризацияЗапасов.КоличествоУчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументСсылкаИнвентаризацияЗапасов);
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение НСтр("ru = 'Нет данных для оформления оприходования'");
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		КоличествоОприходовать = Выборка.КоличествоОтклонениеИнвентаризации - Выборка.КоличествоОприходованное;
		Если КоличествоОприходовать <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
		
		СтрокаТабличнойЧасти.Количество = КоличествоОприходовать;
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
		
	КонецЦикла;
	
	Если Запасы.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Нет данных для оформления оприходования'");
	КонецЕсли;
	
КонецПроцедуры

// Обработчик заполнения на основании документа ПриходныйОрдер.
//
// Параметры:
//  ДокументСсылкаПриходныйОрдер	 - ДокументСсылка.ПриходныйОрдер
//
Процедура ЗаполнитьПоПриходномуОрдеру(ДокументСсылкаПриходныйОрдер) Экспорт
	
	Организация = ДокументСсылкаПриходныйОрдер.Организация;
	СтруктурнаяЕдиница = ДокументСсылкаПриходныйОрдер.СтруктурнаяЕдиница;
	
	Если ДокументСсылкаПриходныйОрдер.ПоложениеЯчейки = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		Ячейка = ДокументСсылкаПриходныйОрдер.Ячейка;
	КонецЕсли;

	ДокументОснование = ДокументСсылкаПриходныйОрдер;
	
	Запасы.Очистить();
	СерииНоменклатуры.Очистить();
	СведенияПрослеживаемости.Очистить();
	
	УчетГТД = ПолучитьФункциональнуюОпцию("УчетГТД");
	
	ВидУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиница, "ВидУчетаОрдерныхСкладов");
	
	Если ВидУчета = Перечисления.ВидыУчетаОрдерныхСкладов.УчетОстатковПоПрочимДокументам Тогда
		ТекстИсключения = НСтр("ru = 'Вид учета остатков на ордерном складе - по Оприходованию запасов. Ввод Оприходования запасов на основании Складского ордера недоступен.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ВидУчета = Перечисления.ВидыУчетаОрдерныхСкладов.ПоСкладуВЦелом Тогда
		ЗаполнитьПоСкладскомуОрдеруБезУчетаОстатков(ДокументСсылкаПриходныйОрдер);
		Возврат;
	КонецЕсли;
	
	УчетОстатковПоСкладскимОрдерам = СкладскойУчетСервер.УчетОстатковВРазрезеСкладскихОрдеров(СтруктурнаяЕдиница);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПриходныйОрдерЗапасы.НомерСтроки КАК НомерСтроки,
	|	ПриходныйОрдерЗапасы.Номенклатура КАК Номенклатура,
	|	ПриходныйОрдерЗапасы.Характеристика КАК Характеристика,
	|	ПриходныйОрдерЗапасы.Партия КАК Партия,
	|	ПриходныйОрдерЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПриходныйОрдерЗапасы.СерииНоменклатуры КАК СерииНоменклатуры,
	|	ПриходныйОрдерЗапасы.КлючСвязи КАК КлючСвязи,
	|	ПриходныйОрдерЗапасы.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА &КонтролироватьОстаткиПоДокументам
	|			ТОГДА &ДокументОснование
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументПоступления,
	|	ПриходныйОрдерЗапасы.Ячейка КАК Ячейка,
	|	&СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ИЗ
	|	Документ.ПриходныйОрдер.Запасы КАК ПриходныйОрдерЗапасы
	|ГДЕ
	|	ПриходныйОрдерЗапасы.Ссылка = &ДокументОснование
	|	И ПриходныйОрдерЗапасы.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗапасыКПоступлениюНаСкладыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыКПоступлениюНаСкладыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыКПоступлениюНаСкладыОстатки.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА ЗапасыКПоступлениюНаСкладыОстатки.КоличествоОстаток < 0
	|			ТОГДА -ЗапасыКПоступлениюНаСкладыОстатки.КоличествоОстаток
	|		ИНАЧЕ ЗапасыКПоступлениюНаСкладыОстатки.КоличествоОстаток
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА &КонтролироватьОстаткиПоДокументам
	|			ТОГДА &ДокументОснование
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументПоступления,
	|	&СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыКПоступлениюНаСкладыОстатки.Ячейка КАК Ячейка
	|ИЗ
	|	РегистрНакопления.ЗапасыКПоступлениюНаСклады.Остатки(
	|			,
	|			Организация = &Организация
	|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|				И ДокументОснование = &ДокументОснование) КАК ЗапасыКПоступлениюНаСкладыОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗапасыКПоступлениюНаСклады.Номенклатура,
	|	ЗапасыКПоступлениюНаСклады.Характеристика,
	|	ЗапасыКПоступлениюНаСклады.Партия,
	|	ВЫБОР
	|		КОГДА ЗапасыКПоступлениюНаСклады.Количество < 0
	|			ТОГДА -ЗапасыКПоступлениюНаСклады.Количество
	|		ИНАЧЕ ЗапасыКПоступлениюНаСклады.Количество
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &КонтролироватьОстаткиПоДокументам
	|			ТОГДА &ДокументОснование
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	&СтруктурнаяЕдиница,
	|	ЗапасыКПоступлениюНаСклады.Ячейка
	|ИЗ
	|	РегистрНакопления.ЗапасыКПоступлениюНаСклады КАК ЗапасыКПоступлениюНаСклады
	|ГДЕ
	|	ЗапасыКПоступлениюНаСклады.Регистратор = &Ссылка
	|	И ЗапасыКПоступлениюНаСклады.ДокументОснование = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриходныйОрдерЗапасы.Номенклатура КАК Номенклатура,
	|	ПриходныйОрдерЗапасы.Характеристика КАК Характеристика,
	|	ПриходныйОрдерЗапасы.Партия КАК Партия,
	|	ПриходныйОрдерСерииНоменклатуры.Серия КАК Серия,
	|	ПриходныйОрдерЗапасы.КлючСвязи КАК КлючСвязи,
	|	ПриходныйОрдерСерииНоменклатуры.Количество КАК Количество
	|ИЗ
	|	Документ.ПриходныйОрдер.СерииНоменклатуры КАК ПриходныйОрдерСерииНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдер.Запасы КАК ПриходныйОрдерЗапасы
	|		ПО (ПриходныйОрдерСерииНоменклатуры.Ссылка = &ДокументОснование)
	|			И (ПриходныйОрдерЗапасы.Ссылка = &ДокументОснование)
	|			И (ПриходныйОрдерЗапасы.КлючСвязи = ПриходныйОрдерСерииНоменклатуры.КлючСвязи)
	|ГДЕ
	|	ПриходныйОрдерЗапасы.Ссылка = &ДокументОснование
	|	И ПриходныйОрдерСерииНоменклатуры.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерииНоменклатурыКПоступлениюОстатки.Серия КАК Серия,
	|	СерииНоменклатурыКПоступлениюОстатки.КоличествоОстаток КАК Количество,
	|	СерииНоменклатурыКПоступлениюОстатки.Номенклатура КАК Номенклатура,
	|	СерииНоменклатурыКПоступлениюОстатки.Характеристика КАК Характеристика,
	|	СерииНоменклатурыКПоступлениюОстатки.Партия КАК Партия
	|ПОМЕСТИТЬ ОстаткиСерииИтог
	|ИЗ
	|	РегистрНакопления.СерииНоменклатурыКПоступлению.Остатки(
	|			,
	|			Организация = &Организация
	|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|				И ДокументОснование = &ДокументОснование) КАК СерииНоменклатурыКПоступлениюОстатки
	|ГДЕ
	|	СерииНоменклатурыКПоступлениюОстатки.КоличествоОстаток > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СерииНоменклатурыКПоступлению.Серия,
	|	СерииНоменклатурыКПоступлению.Количество,
	|	СерииНоменклатурыКПоступлению.Номенклатура,
	|	СерииНоменклатурыКПоступлению.Характеристика,
	|	СерииНоменклатурыКПоступлению.Партия
	|ИЗ
	|	РегистрНакопления.СерииНоменклатурыКПоступлению КАК СерииНоменклатурыКПоступлению
	|ГДЕ
	|	СерииНоменклатурыКПоступлению.Регистратор = &Ссылка
	|	И СерииНоменклатурыКПоступлению.ДокументОснование = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиСерииИтог.Серия КАК Серия,
	|	СУММА(ОстаткиСерииИтог.Количество) КАК Количество,
	|	ОстаткиСерииИтог.Номенклатура КАК Номенклатура,
	|	ОстаткиСерииИтог.Характеристика КАК Характеристика,
	|	ОстаткиСерииИтог.Партия КАК Партия
	|ИЗ
	|	ОстаткиСерииИтог КАК ОстаткиСерииИтог
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиСерииИтог.Серия,
	|	ОстаткиСерииИтог.Характеристика,
	|	ОстаткиСерииИтог.Партия,
	|	ОстаткиСерииИтог.Номенклатура");
	
	Компания = Константы.УчетПоКомпании.Компания(Организация);
	
	КонтролироватьОстаткиПоДокументам = ВидУчета = Перечисления.ВидыУчетаОрдерныхСкладов.УчетОстатковПоСкладскимОрдерам;
	ДокументПоступления = ?(КонтролироватьОстаткиПоДокументам, ДокументСсылкаПриходныйОрдер, Неопределено);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументПоступления);
	
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.УстановитьПараметр("КонтролироватьОстаткиПоДокументам", Истина);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатыЗапроса[1].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСерииНоменклатуры = РезультатыЗапроса[2].Выгрузить();
	ТаблицаОстаткиСерииНоменклатуры = РезультатыЗапроса[4].Выгрузить();
	ТаблицаОстаткиЗапасы = РезультатыЗапроса[1].Выгрузить();
	
	ВыборкаЗапасы = РезультатыЗапроса[0].Выбрать();
	
	ПараметрыПоискаСерии = Новый Структура("КлючСвязи");
	
	Если СкладскойУчетСервер.КонтролироватьОстаткиПоЯчейкамКПоступлениюОтгрзуке(СтруктурнаяЕдиница) Тогда
		ПараметрыПоискаОстаткиЗапасы = Новый Структура("Номенклатура, Характеристика, Партия, Ячейка");
	Иначе
		ПараметрыПоискаОстаткиЗапасы = Новый Структура("Номенклатура, Характеристика, Партия");
	КонецЕсли;

	ПараметрыПоискаОстаткиСерииНоменклатуры = Новый Структура("Номенклатура, Характеристика, Партия, Серия");
	
	ВидЦен = ?(ЗначениеЗаполнено(ВидЦен), ВидЦен, УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойВидЦенПродажи"));
	
	СтруктураЦен = Новый Структура;
	СтруктураЦен.Вставить("ВидЦен", ВидЦен);
	СтруктураЦен.Вставить("ЭтоНовыйОбъект", Истина);
	СтруктураЦен.Вставить("ДатаОбработки", ТекущаяДатаСеанса());
	СтруктураЦен.Вставить("Номенклатура", Неопределено);
	СтруктураЦен.Вставить("Коэффициент", 1);
	СтруктураЦен.Вставить("ВалютаДокумента", ВидЦен.ВалютаЦены);
	СтруктураЦен.Вставить("Характеристика", Неопределено);
	СтруктураЦен.Вставить("СуммаВключаетНДС", ВидЦен.ЦенаВключаетНДС);
	
	Пока ВыборкаЗапасы.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаЗапасы.Количество) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПараметрыПоискаОстаткиЗапасы, ВыборкаЗапасы);
		НайденныеОстаткиЗапасы = ТаблицаОстаткиЗапасы.НайтиСтроки(ПараметрыПоискаОстаткиЗапасы);
		
		Если Не НайденныеОстаткиЗапасы.Количество() Или (НайденныеОстаткиЗапасы.Количество() И НайденныеОстаткиЗапасы[0].Количество = 0) Тогда
			Продолжить
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПараметрыПоискаСерии, ВыборкаЗапасы);
		НайденныеСерии = ТаблицаСерииНоменклатуры.НайтиСтроки(ПараметрыПоискаСерии);
		
		КоличествоСерий = 0;
		ИспользуютсяСерииВСтроке = Ложь;
		Для Каждого СтрокаСерии Из НайденныеСерии Цикл
			
			ИспользуютсяСерииВСтроке = Истина;
			
			ЗаполнитьЗначенияСвойств(ПараметрыПоискаОстаткиСерииНоменклатуры, СтрокаСерии);
			НайденныеОстаткиСерий = ТаблицаОстаткиСерииНоменклатуры.НайтиСтроки(ПараметрыПоискаОстаткиСерииНоменклатуры);
			
			Если Не НайденныеОстаткиСерий.Количество() Или (НайденныеОстаткиСерий.Количество() И НайденныеОстаткиСерий[0].Количество = 0) Тогда
				Продолжить
			КонецЕсли;
			
			ОстатокСерий = НайденныеОстаткиСерий[0];
			
			Если Не ОстатокСерий.Количество > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаСерии = СерииНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, СтрокаСерии); 
			
			Если НоваяСтрокаСерии.Количество >= ОстатокСерий.Количество Тогда
				НоваяСтрокаСерии.Количество = ОстатокСерий.Количество;
			КонецЕсли;
			
			ОстатокСерий.Количество = ОстатокСерий.Количество - НоваяСтрокаСерии.Количество;
			
			КоличествоСерий = КоличествоСерий + НоваяСтрокаСерии.Количество;
			
		КонецЦикла;
		
		Если ИспользуютсяСерииВСтроке И КоличествоСерий = 0 Тогда
			Продолжить
		КонецЕсли;
		
		ОстатокЗапасов = НайденныеОстаткиЗапасы[0];
		
		НоваяСтрокаЗапасы = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗапасы, ВыборкаЗапасы);
		
		Если ТипЗнч(НоваяСтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
			
			КоличествоВСтрокеЗапасов = ?(КоличествоСерий > 0, КоличествоСерий, НоваяСтрокаЗапасы.Количество);
			
			Если КоличествоВСтрокеЗапасов >= ОстатокЗапасов.Количество Тогда
				КоличествоВСтрокеЗапасов = ОстатокЗапасов.Количество;
				ОстатокЗапасов.Количество = 0;
			Иначе
				ОстатокЗапасов.Количество = ОстатокЗапасов.Количество - КоличествоВСтрокеЗапасов;
			КонецЕсли;
			
			НоваяСтрокаЗапасы.Количество = КоличествоВСтрокеЗапасов;
			
		Иначе
			
			КоличествоСтрокиВЕдиницахХранения = НоваяСтрокаЗапасы.Количество * НоваяСтрокаЗапасы.ЕдиницаИзмерения.Коэффициент;
			КоличествоВСтрокеЗапасов = ?(КоличествоСерий > 0, КоличествоСерий, КоличествоСтрокиВЕдиницахХранения);
			
			Если КоличествоВСтрокеЗапасов >= ОстатокЗапасов.Количество Тогда
				КоличествоВСтрокеЗапасов = ОстатокЗапасов.Количество;
				ОстатокЗапасов.Количество = 0;
			Иначе
				ОстатокЗапасов.Количество = ОстатокЗапасов.Количество - КоличествоВСтрокеЗапасов;
			КонецЕсли;
			
			НоваяСтрокаЗапасы.Количество = КоличествоВСтрокеЗапасов/ НоваяСтрокаЗапасы.ЕдиницаИзмерения.Коэффициент;;
			
		КонецЕсли;
		
		Если СерииНоменклатурыУНФ.ИспользоватьСерииНоменклатурыОстатки() = Истина Тогда
			НоваяСтрокаЗапасы.СерииНоменклатуры = СерииНоменклатурыУНФ.ПредставлениеСерийНоменклатуры(СерииНоменклатуры, НоваяСтрокаЗапасы.КлючСвязи)
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураЦен, НоваяСтрокаЗапасы);
		НоваяСтрокаЗапасы.Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураЦен);
		НоваяСтрокаЗапасы.Сумма = НоваяСтрокаЗапасы.Количество * НоваяСтрокаЗапасы.Цена;
		
		Если УчетГТД Тогда
			НоваяСтрокаЗапасы.СтранаПроисхождения = НоваяСтрокаЗапасы.Номенклатура.СтранаПроисхождения;
		КонецЕсли;
		
	КонецЦикла;
	
	СуммаДокумента = Запасы.Итог("Сумма");
	
КонецПроцедуры

// Обработчик заполнения на основании складского ордера без учета остатков.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ПриходныйОрдер Или ДокументСсылка.РасходныйОрдер.
//	Приходный - Признак вида ордера.
//
Процедура ЗаполнитьПоСкладскомуОрдеруБезУчетаОстатков(ДанныеЗаполнения) Экспорт
	
	Для Каждого СтрокаЗапасы Из ДанныеЗаполнения.Запасы Цикл
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапасы);
	КонецЦикла;
	
	СерииНоменклатурыУНФ.ЗаполнитьТЧСерииНоменклатурыПоКлючуСвязи(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// Обработчик заполнения на основании документа ПриходныйОрдер.
//
// Параметры:
//  ДокументСсылкаПриходныйОрдер	 - ДокументСсылка.ПриходныйОрдер
//
Процедура ЗаполнитьПоПриемИПередачаВРемонт(ДокументСсылкаПриемИПередачаВРемонт) Экспорт
	
	Организация = ДокументСсылкаПриемИПередачаВРемонт.Организация;
	СтруктурнаяЕдиница = ДокументСсылкаПриемИПередачаВРемонт.СтруктурнаяЕдиница;
	ДокументОснование = ДокументСсылкаПриемИПередачаВРемонт;
	
	НоваяСтрока = Запасы.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДокументСсылкаПриемИПередачаВРемонт);
	НоваяСтрока.КлючСвязи = 1;
	НоваяСтрока.Количество = 1;
	НоваяСтрока.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ЕдиницаИзмерения");
	
	Если ЗначениеЗаполнено(ДокументСсылкаПриемИПередачаВРемонт.Серия) Тогда
		НоваяСтрокаСН = СерииНоменклатуры.Добавить();
		НоваяСтрокаСН.Серия = ДокументСсылкаПриемИПередачаВРемонт.Серия;
		НоваяСтрокаСН.КлючСвязи = НоваяСтрока.КлючСвязи;
		
		НоваяСтрока.СерииНоменклатуры = СерииНоменклатурыУНФКлиентСервер.СтроковоеПредставлениеСерийНоменклатурыСтроки(СерииНоменклатуры, НоваяСтрокаСН.КлючСвязи);
	КонецЕсли;
	
КонецПроцедуры

// Заполнение документа на основании инвентаризации ВЕТИС.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоИнвентаризацииПродукцииВЕТИС(ДанныеЗаполнения) Экспорт
	
	Реквизиты = ИнтеграцияВЕТИСУНФ.ДанныеПрикладныхДокументовИзИнвентаризацииПродукцииВЕТИС(ДанныеЗаполнения);
	Реквизиты.Следующий();
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты);
		
	КонецЕсли;
	
	Товары = Реквизиты.Товары.Выгрузить();
	
	Запасы.Очистить();
	Для Каждого СтрокаТовары Из Товары Цикл
		
		Если СтрокаТовары.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаЗапасы = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗапасы, СтрокаТовары);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// В обработчике события ОбработкаЗаполнения документа выполняется
// - заполнение документа по инвентаризации запасов на складе.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	// Прослеживаемость
	СведенияПрослеживаемости.Очистить();
	// Конец Прослеживаемость
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ИнвентаризацияЗапасов")] = "ЗаполнитьПоИнвентаризацииЗапасов";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПриходныйОрдер")] = "ЗаполнитьПоПриходномуОрдеру";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПриемИПередачаВРемонт")] = "ЗаполнитьПоПриемИПередачаВРемонт";
	СтратегияЗаполнения[Тип("ДокументСсылка.ИнвентаризацияПродукцииВЕТИС")] = "ЗаполнитьПоИнвентаризацииПродукцииВЕТИС";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
	// Прослеживаемость
	ПрослеживаемостьУНФ.ОбновитьПризнакПрослеживаемости(Запасы, Дата);
	
	СерииНоменклатурыУНФ.УдалитьСерииНоменклатурыВТабличнойЧастиВЗависимостиОтПолитики(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Серии номенклатуры
	Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиница,"ОрдерныйСклад") = Истина Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Объект", ЭтотОбъект);
		ДополнительныеПараметры.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
		СерииНоменклатурыУНФ.ПроверитьЗаполнениеСерийНоменклатуры(Отказ, Запасы, СерииНоменклатуры, 
			ДополнительныеПараметры);
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, Отказ, Истина);
	
	// Подарочные сертификаты
	РаботаСПодарочнымиСертификатами.ПроверитьВозможностьИспользованияСертификатов(Отказ, ЭтотОбъект, "Запасы", "СтруктурнаяЕдиница", Истина);
	
	ГрузовыеТаможенныеДекларацииСервер.ПриОбработкеПроверкиЗаполнения(Отказ, ЭтотОбъект);
	
	// Прослеживаемость
	ДанныеПроверки = Новый Структура;
	ДанныеПроверки.Вставить("ИмяТЧ", "Запасы");
	ДанныеПроверки.Вставить("ИмяСписка", НСтр("ru = 'Запасы'"));
	ПрослеживаемостьУНФ.ПроверитьЗаполнениеДанныхПрослеживаемости(ЭтотОбъект, ДанныеПроверки, Отказ);
	
	ВестиУчетПрослеживаемыхТоваров = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеКонстанты("ВестиУчетПрослеживаемыхТоваров");
	Если ВестиУчетПрослеживаемыхТоваров Тогда
		СтруктураПоиска = Новый Структура("ИдентификаторСтроки");
		Для каждого СтрокаЗапасы Из Запасы Цикл
			
			Если Не СтрокаЗапасы.ПрослеживаемыйТовар Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаЗапасы.ПрослеживаемыйКомплект Тогда
				
				СтруктураПоиска.ИдентификаторСтроки = СтрокаЗапасы.ИдентификаторСтроки;
				НайденныеСтроки = СведенияПрослеживаемости.НайтиСтроки(СтруктураПоиска);
				
				Если Не НайденныеСтроки.Количество() Тогда
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", , НСтр(
					"ru = 'Номер РНПТ'"), СтрокаЗапасы.НомерСтроки, "Запасы");
					
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", СтрокаЗапасы.НомерСтроки,
					"ЗапасыНомерГТДПриРНПТ");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Конец Прослеживаемость
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныйСклад") Тогда
		
		УчетОстатковПоСкладскимОрдерам = СкладскойУчетСервер.УчетОстатковВРазрезеСкладскихОрдеров(СтруктурнаяЕдиница);
		
		Если УчетОстатковПоСкладскимОрдерам Тогда  
			ПроверяемыеРеквизиты.Добавить("ДокументПоступления");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	СуммаДокумента = Запасы.Итог("Сумма");
	
	// Прослеживаемость
	ПрослеживаемыйТовар = Запасы.НайтиСтроки(Новый Структура("ПрослеживаемыйТовар", Истина));
	ЕстьПрослеживаемыйТовар = ПрослеживаемыйТовар.Количество() <> 0;
	Если НЕ ЕстьПрослеживаемыйТовар Тогда
		СведенияПрослеживаемости.Очистить();
	КонецЕсли;
	// Конец Прослеживаемость
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	ДополнительныеСвойства.Вставить("Отказ", Отказ);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныйСклад") Тогда
		МассивСтруктурныхЕдиниц = Новый Массив;
		МассивСтруктурныхЕдиниц.Добавить(СтруктурнаяЕдиница);
		
		МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам = СкладскойУчетСервер.МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам(МассивСтруктурныхЕдиниц);
	Иначе
		МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам = Новый Массив;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам", МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам);
	
	// Инициализация данных документа
	Документы.ОприходованиеЗапасов.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Проверим, можно ли продолжать и не было ли отказа в процедурах формирования движений.
	Если ДополнительныеСвойства.Отказ = Истина Тогда
		Отказ = Истина;
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовка наборов записей
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыКПоступлениюНаСклады", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыНаСкладах", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("Запасы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыВРазрезеГТД", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);

	// СерииНоменклатуры
	ПроведениеДокументовУНФ.ОтразитьДвижения("СерииНоменклатурыГарантии", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДвиженияСерииНоменклатуры", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("СерииНоменклатуры", ТаблицыДляДвижений, Движения, Отказ);
	
	// Прослеживаемость
	УправлениеНебольшойФирмойСервер.ОтразитьПрослеживаемыеТовары(ДополнительныеСвойства, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОперацииСПрослеживаемымиТоварами", ТаблицыДляДвижений, Движения, Отказ);
	
	ПроведениеДокументовУНФ.ОтразитьДвижения("СерииНоменклатурыКПоступлению", ТаблицыДляДвижений, Движения, Отказ);
	
	// Запись наборов записей
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	// Контроль
	Документы.ОприходованиеЗапасов.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	ПроведениеДокументовУНФ.ЗакрытьМенеджерВременныхТаблиц(ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныйСклад") Тогда
		МассивСтруктурныхЕдиниц = Новый Массив;
		МассивСтруктурныхЕдиниц.Добавить(СтруктурнаяЕдиница);
		
		МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам = СкладскойУчетСервер.МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам(МассивСтруктурныхЕдиниц);
	Иначе
		МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам = Новый Массив;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам", МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам);
	
	// Контроль
	Документы.ОприходованиеЗапасов.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	// Прослеживаемость
	СведенияПрослеживаемости.Очистить();
	ПрослеживаемостьУНФ.ОбновитьПризнакПрослеживаемости(Запасы, Дата);
	// Конец Прослеживаемость
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли