
#Область ОписаниеПеременных

&НаКлиенте
Перем ОкноHTMLДокумента; // см ТекстПисьмаДокументСформирован

&НаКлиенте
Перем ДокументHTML; // см ТекстПисьмаДокументСформирован

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.МассоваяРассылка.ТабличныеЧасти.Получатели, НастройкиЗагрузкиДанных, ЭтотОбъект, Ложь);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	Элементы.ПолучателиКонтакт.ОграничениеТипа	= Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыСтроки(100));
	Элементы.Тема.ОграничениеТипа				= Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыСтроки(100));
	
	СпособОтправки = Неопределено;
	Если Параметры.Свойство("СпособОтправки", СпособОтправки) Тогда
		Объект.СпособОтправки = СпособОтправки;
	КонецЕсли;
	ПредлагаемаяСкидка = Неопределено;
	СписокПромокодовДобавить = Неопределено;
	Если Параметры.Свойство("ПредлагаемаяСкидка", ПредлагаемаяСкидка) Тогда
		Объект.ПредлагаемаяСкидка = ПредлагаемаяСкидка;
		Объект.Тема = Строка(Объект.ПредлагаемаяСкидка);
		Параметры.Свойство("Промокоды", СписокПромокодовДобавить);
		Если ЗначениеЗаполнено(СписокПромокодовДобавить) Тогда
			ОбновитьДоступныеПромокоды(СписокПромокодовДобавить);
		КонецЕсли;
	КонецЕсли;
	ОтразитьПромокодыНаФорме();
	УстановитьУсловноеОформлениеФормы();

	ПровайдерSMS = Константы.ПровайдерSMS.Получить();
	НастройкиSMSВыполнены = ОтправкаSMS.НастройкаОтправкиSMSВыполнена();
	ДоступноПравоНастройкиSMS = Пользователи.ЭтоПолноправныйПользователь();
	
	ВключенаРаботаССобытиями = Константы.ИспользоватьСобытия.Получить();
	
	Элементы.ПровайдерSMS.Видимость = ЗначениеЗаполнено(ПровайдерSMS);
	Элементы.СоздаватьСобытия.Видимость = ВключенаРаботаССобытиями;
	Элементы.Тема.КнопкаВыбора = ВключенаРаботаССобытиями;
	Элементы.ЗаполнитьСодержаниеПоТеме.Видимость = ВключенаРаботаССобытиями;
	РаботаСФормойДокумента.НастроитьВидимостьГруппыИнформации(ЭтотОбъект, "ГруппаИнформацияПоРассылкеПромокодов",
		"ПоказыватьИнформациюПоРассылкеПромокодов");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ОтменитьЗаданиеНаРассылку();
		
	Иначе
		
		ЗаполнитьНовоеПисьмоПоУмолчанию();
		ПриСозданииПриЧтенииНаСервере(Объект);
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			
			СодержаниеHTML = Параметры.ЗначениеКопирования.СодержаниеHTML;
			
		Иначе
			
			СодержаниеHTML = "<html><body contenteditable><div><br></div></body></html>";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрНайти(СодержаниеHTML, "<body") = 0 Тогда
		СодержаниеHTML = СтрШаблон("<html><head></head><body contenteditable>%1</body></html>", СодержаниеHTML);
	ИначеЕсли СтрНайти(СодержаниеHTML, "<body contenteditable") = 0 Тогда
		СодержаниеHTML = СтрЗаменить(СодержаниеHTML, "<body", "<body contenteditable");
	КонецЕсли;
	
	ДобавитьJSКод(СодержаниеHTML);
	
	МобильныйКлиентУНФ.НастроитьФормуОбъектаМобильныйКлиент(Элементы, "Получатели");
	НапоминанияПользователяУНФ.УстановитьОтображениеКомандОрганайзера(Элементы); 
	Элементы.ГруппаПолучатели.Заголовок = СтрШаблон(НСтр("ru = 'Получатели (%1)'"), ТаблицаУчастников.Количество());
	УправлениВидимостьюПромокодов();
	
	НастроитьФормуМобильныйКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьКонтактСтрокойНаКлиенте();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Если ТекущийОбъект.СпособОтправки = Перечисления.ВидыКаналовСвязи.Email Тогда
		ПрочитатьВложения(ТекущийОбъект);
	КонецЕсли;
	
	Если ТекущийОбъект.СпособОтправки = Перечисления.ВидыКаналовСвязи.SMS Тогда
		ПрочитатьСтатусы(ТекущийОбъект);
	КонецЕсли;
	
	ПриСозданииПриЧтенииНаСервере(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.СпособОтправки = ПредопределенноеЗначение("Перечисление.ВидыКаналовСвязи.Email") Тогда
		
		ТекстСПереопределеннымиКартинками = ГипертекстКлиент.ТелоHTMLСКартинкамиВДвоичныхДанных(ДокументHTML);
		Если ТекстСПереопределеннымиКартинками = Неопределено Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Объект.СодержаниеHTML = СтрШаблон("<html>%1</html>", ТекстСПереопределеннымиКартинками);
		
		ЗаполнитьКонтактыПисьма();
		
		Если Не ЗначениеЗаполнено(Объект.ПредлагаемаяСкидка)
			Или Не ЗначениеРеквизитаОбъекта(Объект.ПредлагаемаяСкидка, "ЕстьУсловияПредъявленПромокод") Тогда
			
			ЕстьПромокод = СтрНайти(Объект.СодержаниеHTML, "{Промокод}") > 0;
			
			Картинки = ДокументHTML.images;
			КартинкаПромокода = Неопределено;
			Для Каждого Картинка Из Картинки Цикл
				Если Картинка.getAttribute("data-promocode") <> Неопределено Тогда
					КартинкаПромокода = Картинка;
					ЕстьПромокод = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьПромокод Тогда
				
				ТекстСообщения =
					НСтр("ru = 'Использовать параметр {Промокод} можно только для рассылок, связанных с соответствующей скидкой'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					ТекстСообщения, ,
					"СодержаниеHTML", ,
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Объект.СодержаниеHTML = "";
		Вложения.Очистить();
		
		ЗаполнитьКонтактыSMS();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не ТекущийОбъект.СпособОтправки = ПредопределенноеЗначение("Перечисление.ВидыКаналовСвязи.Email") Тогда
		ТекущийОбъект.КартинкиHTML = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СохранитьВложения(ТекущийОбъект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.СпособОтправки = Перечисления.ВидыКаналовСвязи.Email Тогда
		ПроверитьЗаполненияЭлектронныхАдресов(Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СпособОтправкиПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	Если ТипЗнч(Объект.Тема) = Тип("СправочникСсылка.ТемыСобытий") И ЗначениеЗаполнено(Объект.Тема) Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.Тема);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ТемыСобытий.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Объект.Тема = ВыбранноеЗначение;
		ЗаполнитьСодержаниеСобытия(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если НЕ ВключенаРаботаССобытиями Тогда
		Возврат;
	КонецЕсли;
	
	Если Ожидание <> 0 И НЕ ПустаяСтрока(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьСписокВыбораТемы(Текст);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ПредлагаемаяСкидкаПриИзменении(Элемент)
	
	// При изменении скидки, все промокоды будут очищены, ведь они могут принадлежать другой скидке.
	// При необходимости, они будут сгенерированы заново автоматически.
	ДоступныеПромокоды.Очистить();
	Объект.Промокоды.Очистить();
	Для Каждого СтрокаПолучатель Из ТаблицаУчастников Цикл
		СтрокаПолучатель.Промокод = "";
	КонецЦикла;
	УправлениВидимостьюПромокодов();	
	Если Элементы.ГруппаИнформацияПоРассылкеПромокодов.Видимость 
		И ЗначениеЗаполнено (Объект.ПредлагаемаяСкидка) Тогда
		// Считаем, что пользователь уже обратил внимание на эту возможность, и больше не будем показывать ему эту подсказку
		ДекорацияИнформацияПоРассылкеПромокодовНажатие(Элементы.ДекорацияИнформацияПоРассылкеПромокодовЗакрыть)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнформацияПоРассылкеПромокодовНажатие(Элемент)

	Элементы.ГруппаИнформацияПоРассылкеПромокодов.Видимость = Ложь;
	СохранитьНастройкуПоказыватьИнформациюПоРассылкеПромокодов();

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнформацияПоРассылкеПромокодовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущийЭлемент = Элементы.ПредлагаемаяСкидка;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнформацияПодсказкаШаблонГенерацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Условие = ПолучитьУсловиеЗаПромокод(Объект.ПредлагаемаяСкидка);
	ПараметрыФормы = Новый Структура("Ключ", Условие);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеИсправленияУказанияШаблона", ЭтотОбъект);
	ОткрытьФорму("Справочник.УсловияПредоставленияСкидокНаценок.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект,,,,ОписаниеОповещения);
КонецПроцедуры

Процедура ПослеИсправленияУказанияШаблона(Результат, ДополнительныеПараметры) Экспорт
	УправлениВидимостьюПромокодов();
КонецПроцедуры  

&НаКлиенте
Процедура ДекорацияПодсказкаШаблонГенерацииЗакрытьНажатие(Элемент)
	Элементы.ГруппаПодсказкаШаблонГенерации.Видимость = Ложь;
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПолучатели

&НаКлиенте
Процедура ПолучателиПриИзменении(Элемент)
	ЗаполнитьНомераСтрокТаблицыПолучатели(ЭтотОбъект);
	Элементы.ГруппаПолучатели.Заголовок = СтрШаблон(НСтр("ru = 'Получатели (%1)'"), ТаблицаУчастников.Количество());
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	Если Объект.СпособОтправки = ПредопределенноеЗначение("Перечисление.ВидыКаналовСвязи.Email") Тогда
		ПараметрыФормы.Вставить("ТипКИ", "АдресЭлектроннойПочты");
	Иначе
		ПараметрыФормы.Вставить("ТипКИ", "Телефон");
	КонецЕсли;
	Если ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Контакт) Тогда
		Контакт = Объект.Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока).Контакт;
		Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Контрагенты") Тогда
			ПараметрыФормы.Вставить("ТекущийКонтрагент", Контакт);
		КонецЕсли;
	КонецЕсли;
	АдресТаблицы = ПоместитьТаблицуУчастниковВоВременноеХранилище();
	//ПараметрыФормы.Вставить("АдресТаблицыВыбранныхАдресатов", АдресТаблицы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучателиКонтактВыборЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ФормаАдреснойКниги", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Объект.СпособОтправки = ПредопределенноеЗначение("Перечисление.ВидыКаналовСвязи.SMS") Тогда
		
		Если ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.КонтактCRM) Тогда
			Контакт = ТаблицаУчастников.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока).КонтактCRM;
			ПоказатьЗначение(,Контакт);
		ИначеЕсли ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Контакт) Тогда
			Контакт = ТаблицаУчастников.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока).Контакт;
			ПоказатьЗначение(,Контакт);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Контакт)
		И НЕ ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.КонтактCRM) Тогда
		Возврат;
	КонецЕсли;
	
	ИндексСтроки = ТаблицаУчастников.Индекс(Элементы.Получатели.ТекущиеДанные);
	Если ЗначениеЗаполнено(ТаблицаУчастников[ИндексСтроки].КонтактCRM) Тогда
		Контакт = ТаблицаУчастников[ИндексСтроки].КонтактCRM;
	Иначе
		Контакт = ТаблицаУчастников[ИндексСтроки].Контакт;
	КонецЕсли;
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактыЛидов") Тогда
		ПоказатьЗначение(, ПолучитьЛидаПоКонтакту(Контакт));	
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.АдресатыПисем") Тогда
		ПоказатьМенюСозданияКонтакта(Элементы.Получатели);
	ИначеЕсли ТипЗнч(Контакт) = Тип("Строка") Тогда
		ПоказатьМенюСозданияКонтакта(Элементы.Получатели);
	Иначе
		ПоказатьЗначение(,Контакт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;
	
	Если Объект.СпособОтправки = ПредопределенноеЗначение("Перечисление.ВидыКаналовСвязи.SMS") Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты") 
			Или ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица")
			ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Лиды")
			ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица")Тогда
			// Выбор осуществлен механизмом автоподбора
			
			Объект.Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока).Контакт = ВыбранноеЗначение;
			
		КонецЕсли;
		Возврат;
	КонецЕсли;
		
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты")
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица")
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Лиды")
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		// Выбор осуществлен механизмом автоподбора
		ОбработатьВыборКонтактаИзСписка(ВыбранноеЗначение, Элементы.Получатели.ТекущиеДанные, Элемент.ТекстРедактирования);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.АдресатыПисем") Тогда
		
		ТекущийАдресат = Элементы.Получатели.ТекущиеДанные;
		ТекущийАдресат.Контакт = ВыбранноеЗначение;
		ТекущийАдресат.КакСвязаться = КонтактКакСвязаться(ВыбранноеЗначение);
		
		ПолучателиКонтактОбработкаПослеВыборкиНаСервере();
		ОбновитьПредставлениеСтрокиПолучателя(Элементы.Получатели.ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание <> 0 И НЕ ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьСписокВыбораКонтактов(Текст, ДоступнаРаботаСЛидами);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ПолучателиКомандаCRM" Тогда
		СтрокаДанных = Элементы.Получатели.ТекущиеДанные;
		
		Если СтрокаДанных = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ИндексСтроки = ТаблицаУчастников.Индекс(СтрокаДанных);
		СписокДублей = ДублиПолучателей.НайтиСтроки(Новый Структура("ИндексПолучателя", ИндексСтроки));
		
		Если СписокДублей.Количество() > 0 Тогда
			
			СписокВыбораКонтактов = Новый СписокЗначений;
			ОповещениеОткрытьДубльПолучателя = Новый ОписаниеОповещения("ОткрытьДубльПолучателя", ЭтотОбъект);
			
			Для Каждого ДубльАдресата Из СписокДублей Цикл
				ПредставлениеДубля 	= СтрШаблон(НСтр("ru = '%1 <%2>'"), Строка(ДубльАдресата.ДубльПолучателя), Элементы.Получатели.ТекущиеДанные.КакСвязаться);
				КартинкаДубля 		= КартинкаКонтактаПоИндексу(ДубльАдресата.ИндексКартинки);
				
				СписокВыбораКонтактов.Добавить(ДубльАдресата.ДубльПолучателя, 
				ПредставлениеДубля, , КартинкаДубля);
				
			КонецЦикла;
			
			ПоказатьВыборИзСписка(ОповещениеОткрытьДубльПолучателя, СписокВыбораКонтактов, Элемент);
			
			Возврат;
			
		КонецЕсли;
		
		ПоказатьМенюСозданияКонтакта(Элемент);
	КонецЕсли;

	Если Поле <> Элементы.ПолучателиСостояниеСообщенияSMS Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("МассоваяРассылка", Объект.Ссылка);
	Отбор.Вставить("КакСвязаться", Элемент.ТекущиеДанные.КакСвязаться);
	
	КлючЗаписи = Новый(
	Тип("РегистрСведенийКлючЗаписи.ОчередьРассылок"),
	ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Отбор));
	
	ПараметрыФормыЗаписи = Новый Структура;
	ПараметрыФормыЗаписи.Вставить("Ключ", КлючЗаписи);
	
	ОткрытьФорму("РегистрСведений.ОчередьРассылок.ФормаЗаписи", ПараметрыФормыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПромокодПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Получатели.ТекущаяСтрока;
	СтрокаПолучателя = ТаблицаУчастников.НайтиПоИдентификатору(ТекущаяСтрока);
	Если СтрокаПолучателя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПромокодыБолееНедоступны = Новый Массив;
	СтрокиРезерваПромокодовУдалить = Новый Массив;
	Если СтрокаПолучателя.Промокод = "" Тогда
		СтрокиПромокодов = Объект.Промокоды.НайтиСтроки(Новый Структура("КакСвязаться", СтрокаПолучателя.КакСвязаться));
		Для Каждого СтрокаПромокодов Из СтрокиПромокодов Цикл
			// Освободим зарезервированный промокод
			СтрокиРезерваПромокодовУдалить.Добавить(СтрокаПромокодов);
			Если Не СтрокаПромокодов.Промокод = "" Тогда
				ЗаполнитьЗначенияСвойств(ДоступныеПромокоды.Добавить(), СтрокаПромокодов);
			КонецЕсли;
		КонецЦикла;
	Иначе
		СтрокиДоступныхПромокодов = ДоступныеПромокоды.НайтиСтроки(Новый Структура("Промокод", СтрокаПолучателя.Промокод));
		Для Каждого СтрокаДоступногоПромокода Из СтрокиДоступныхПромокодов Цикл
			НовыйРезервПромокода = Объект.Промокоды.Добавить();
			НовыйРезервПромокода.КакСвязаться = СтрокаПолучателя.КакСвязаться;
			НовыйРезервПромокода.Промокод = СтрокаДоступногоПромокода.Промокод;
			НовыйРезервПромокода.ДокументАктивации = СтрокаДоступногоПромокода.ДокументАктивации;
			ПромокодыБолееНедоступны.Добавить(СтрокаДоступногоПромокода);
		КонецЦикла;
	КонецЕсли;
	Для Каждого ПромокодТеперьДоступен Из СтрокиРезерваПромокодовУдалить Цикл
		Объект.Промокоды.Удалить(ПромокодТеперьДоступен);
	КонецЦикла;
	Для Каждого ПромокодНеДоступен Из ПромокодыБолееНедоступны Цикл
		ДоступныеПромокоды.Удалить(ПромокодНеДоступен);				
	КонецЦикла;		
	ОбновитьСписокВыбораПромокодов();
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВложения

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьВложение();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ДобавлениеФайлаКВложениям();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВложенияПеретаскиваниеЗавершение", ЭтотОбъект, Новый Структура("Имя", ПараметрыПеретаскивания.Значение.Имя));
		НачатьПомещениеФайла(ОписаниеОповещения, , ПараметрыПеретаскивания.Значение.ПолноеИмя, Ложь);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТекстПисьмаДокументСформирован(Элемент)
	
	ДокументHTML = Элемент.Документ;
	ОкноHTMLДокумента = ДокументHTML.defaultView;
	
	ГипертекстКлиент.ПрименитьНастройкиОтображения(ДокументHTML);
	
	ЗаписатьHTMLВИсторию();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПисьмаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ЭлементыКомандВставкиТаблиц = Новый Массив;
	ЭлементыКомандВставкиТаблиц.Добавить(Элементы.КомандаВставитьТаблицу);
	
	ЭлементыКомандИзмененияТаблиц = Новый Массив;
	ЭлементыКомандИзмененияТаблиц.Добавить(Элементы.КомандаИзменитьТаблицу);
	ЭлементыКомандИзмененияТаблиц.Добавить(Элементы.ТекстПисьмаКонтекстноеМенюКомандаИзменитьТаблицу);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияДляЗаписиВИсторию", ЭтотОбъект);
	
	ГипертекстКлиент.ПолеHTMLДокументаПриНажатии(
		ДанныеСобытия,
		СтандартнаяОбработка,
		Элементы,
		НазваниеКоманднойПанели(),
		ЭлементыКомандВставкиТаблиц,
		ЭлементыКомандИзмененияТаблиц,
		ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтправитьРассылку(Команда)
	
	Элементы.ГруппаПодсказкаШаблонГенерации.Видимость = Ложь;
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьРассылкуВопросЗадан", ЭтотОбъект);
	ТекстВопроса = ТекстВопроса();
	
	ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
	ПараметрыВопроса.Заголовок = НСтр("ru='Подтверждение рассылки'");
	ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
	
	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ПараметрыВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСодержаниеПоТеме(Команда)
	
	Если ЗначениеЗаполнено(Объект.Тема) Тогда
		ЗаполнитьСодержаниеСобытия(Объект.Тема);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	ОткрытьВложение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборКонтактов(Команда)
	
	ПараметрыФормы = Новый Структура;
	Если Объект.СпособОтправки = ПредопределенноеЗначение("Перечисление.ВидыКаналовСвязи.Email") Тогда
		ПараметрыФормы.Вставить("ТипКИ", "АдресЭлектроннойПочты");
	Иначе
		ПараметрыФормы.Вставить("ТипКИ", "Телефон");
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЭтоОтборИзРассылки", Истина);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодборКонтактовЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ФормаАдреснойКниги", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНезаполненные(Команда)
	
	УдаляемыеПолучатели = Новый Массив;
	
	Для Каждого СтрокаПолучатель Из ТаблицаУчастников Цикл
		Если ПустаяСтрока(СтрокаПолучатель.КакСвязаться) Тогда
			УдаляемыеПолучатели.Добавить(СтрокаПолучатель);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемыйПолучатель Из УдаляемыеПолучатели Цикл
		ТаблицаУчастников.Удалить(УдаляемыйПолучатель);
	КонецЦикла;
	
	ЗаполнитьНомераСтрокТаблицыПолучатели(ЭтотОбъект);
	ТекстПромокодов = "";
	Если Элементы.ПолучателиПромокод.Видимость Тогда
		ТекстПромокодов = НСтр("ru = 'промокодов '");
	КонецЕсли;
	Элементы.ГруппаПолучатели.Заголовок = СтрШаблон(НСтр("ru = 'Получатели %1(%2)'"), ТекстПромокодов, ТаблицаУчастников.Количество());
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрВремя(Команда)
	
	ВставитьПараметр(МассовыеРассылкиУНФКлиентСервер.ПараметрВремя());
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрДата(Команда)
	
	ВставитьПараметр(МассовыеРассылкиУНФКлиентСервер.ПараметрДата());
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрИмяПолучателяИменительныйПадеж(Команда)
	
	ВставитьПараметр(МассовыеРассылкиУНФКлиентСервер.ПараметрИмяПолучателяИменительныйПадеж());
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрИмяПолучателяРодительныйПадеж(Команда)
	
	ВставитьПараметр(МассовыеРассылкиУНФКлиентСервер.ПараметрИмяПолучателяРодительныйПадеж());
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрИмяПолучателяДательныйПадеж(Команда)
	
	ВставитьПараметр(МассовыеРассылкиУНФКлиентСервер.ПараметрИмяПолучателяДательныйПадеж());
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрИмяПолучателяВинительныйПадеж(Команда)
	
	ВставитьПараметр(МассовыеРассылкиУНФКлиентСервер.ПараметрИмяПолучателяВинительныйПадеж());
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрИмяПолучателяТворительныйПадеж(Команда)
	
	ВставитьПараметр(МассовыеРассылкиУНФКлиентСервер.ПараметрИмяПолучателяТворительныйПадеж());
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрИмяПолучателяПредложныйПадеж(Команда)
	
	ВставитьПараметр(МассовыеРассылкиУНФКлиентСервер.ПараметрИмяПолучателяПредложныйПадеж());
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрКакОтписатьсяОтРассылки(Команда)
	
	ВставитьПараметр(МассовыеРассылкиУНФКлиентСервер.ПараметрКакОтписатьсяОтРассылки());
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрПромокод(Команда)
	
	ВставитьПараметр(МассовыеРассылкиУНФКлиентСервер.ПараметрПромокод());
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрКартинкаПромокодаБольшая(Команда)
	
	//ВставитьПараметр(МассовыеРассылкиУНФКлиентСервер.ПараметрКартинкаПромокода());
	ВставитьКартинкуПромокода(190);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрКартинкаПромокодаСредняя(Команда)
	
	//ВставитьПараметр(МассовыеРассылкиУНФКлиентСервер.ПараметрКартинкаПромокода());
	ВставитьКартинкуПромокода(130);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрКартинкаПромокодаМаленькая(Команда)
	
	//ВставитьПараметр(МассовыеРассылкиУНФКлиентСервер.ПараметрКартинкаПромокода());
	ВставитьКартинкуПромокода(75);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПромокодыИндивидуальные(Команда)
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Конечный", Истина);
	ПараметрыПодбора.Вставить("Отправлен", Ложь);
	ПараметрыПодбора.Вставить("Условие", ПолучитьУсловиеЗаПромокод(Объект.ПредлагаемаяСкидка));
	ПараметрыПодбора.Вставить("ТекущаяРассылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("МножественноеВыделение", Истина);
	ДополнительныеПараметры = Новый Структура("ОбщийПромокод", Ложь);
	ОтркрытьПодборПромокодов(ПараметрыПодбора, ДополнительныеПараметры);	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПромокодыОбщие(Команда)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Конечный", Ложь);
	ПараметрыПодбора.Вставить("Условие", ПолучитьУсловиеЗаПромокод(Объект.ПредлагаемаяСкидка));
	ПараметрыПодбора.Вставить("ТекущаяРассылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("МножественноеВыделение", Ложь);
	ДополнительныеПараметры = Новый Структура("ОбщийПромокод", Истина);
	ОтркрытьПодборПромокодов(ПараметрыПодбора, ДополнительныеПараметры);	
КонецПроцедуры

#Область КомандыHTML

&НаКлиенте
Процедура ОбработатьHTMLКоманду(Команда)
	
	ИмяКоманды = Команда.Имя;
	ВыполнитьHTMLКоманду(Сред(ИмяКоманды, 8, СтрДлина(ИмяКоманды)));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВставить(Команда)
	
	ГипертекстКлиент.КомандаВставить(ПараметрыДляПередачиВМодульГипертекст());
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВернуть(Команда)
	ОкноHTMLДокумента.redo();
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтменить(Команда)
	ОкноHTMLДокумента.undo();
КонецПроцедуры

&НаКлиенте
Процедура ВставитьГиперссылку(Команда)
	
	ГипертекстКлиент.ВставитьГиперссылку(ПараметрыДляПередачиВМодульГипертекст());
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСимвол(Команда)
	
	ГипертекстКлиент.ВставитьСимвол(ПараметрыДляПередачиВМодульГипертекст());
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьИзображение(Команда)
	
	ГипертекстКлиент.ВставитьИзображение(ПараметрыДляПередачиВМодульГипертекст());
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьШрифт(Команда)
	
	ГипертекстКлиент.ИзменитьШрифт(ПараметрыДляПередачиВМодульГипертекст());
	
КонецПроцедуры

&НаКлиенте
Процедура МеждустрочныйИнтервал(Команда)
	
	ГипертекстКлиент.ИзменитьМеждустрочныйИнтервал(ПараметрыДляПередачиВМодульГипертекст());
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьШрифт(Команда)
	
	ГипертекстКлиент.ИзменитьРазмерШрифта(ПараметрыДляПередачиВМодульГипертекст(), 1);
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьШрифт(Команда)
	
	ГипертекстКлиент.ИзменитьРазмерШрифта(ПараметрыДляПередачиВМодульГипертекст(), -1);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветТекста(Команда)
	
	ГипертекстКлиент.ИзменитьЦветТекста(ПараметрыДляПередачиВМодульГипертекст(), "ВыбранныйЦветТекстаHTML");
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветФона(Команда)
	
	ГипертекстКлиент.ИзменитьЦветФонаСТаблицей(ПараметрыДляПередачиВМодульГипертекст(), "ВыбранныйЦветФонаHTML");
	
КонецПроцедуры

&НаКлиенте
Процедура Цитирование(Команда)
	
	ГипертекстКлиент.Цитировать(ПараметрыДляПередачиВМодульГипертекст());
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьИзменитьТаблицу(Команда)
	
	ГипертекстКлиент.ВставитьИзменитьТаблицу(ПараметрыДляПередачиВМодульГипертекст());
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТаблицу(Команда)
	
	ГипертекстКлиент.ИзменитьТаблицу(ПараметрыДляПередачиВМодульГипертекст());
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСHTML

&НаСервереБезКонтекста
Процедура ДобавитьJSКод(ТекстПисьма)
	
	Гипертекст.ДобавитьJSКод(ТекстПисьма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьHTMLКоманду(НазваниеКоманды, Параметр = Неопределено)
	
	ГипертекстКлиент.ВыполнитьHTMLКоманду(НазваниеКоманды, ПараметрыДляПередачиВМодульГипертекст(), Параметр);
	
КонецПроцедуры

&НаКлиенте
Функция НазваниеКоманднойПанели()
	
	Возврат Элементы.КоманднаяПанельHTML.Имя;
	
КонецФункции

&НаКлиенте
Функция ПараметрыДляПередачиВМодульГипертекст()
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработчикОповещенияДляЗаписиВИсторию", ЭтотОбъект);
	
	Возврат ГипертекстКлиент.ПараметрыДляПередачи(
		ЭтотОбъект,
		ДокументHTML,
		"ТекстПисьма",
		НазваниеКоманднойПанели(),
		ОписаниеОповещения);
	
КонецФункции

&НаКлиенте
Процедура ОбработчикОповещенияДляЗаписиВИсторию(Результат, ДополнительныеПараметры) Экспорт
	ЗаписатьHTMLВИсторию();
КонецПроцедуры

// Записывает текст письма в историю для команд отмены/возврата (Ctrl+Z/Y)
&НаКлиенте
Процедура ЗаписатьHTMLВИсторию()
	
	ГипертекстКлиент.ЗаписатьHTMLВИсторию(ОкноHTMLДокумента);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура НастроитьФормуМобильныйКлиент()
	
	#Если Не МобильныйКлиент Тогда
		Возврат;
	#КонецЕсли
	
	Элементы.КоманднаяПанельСодержания.Видимость = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

&НаСервере
Процедура ОтменитьЗаданиеНаРассылку()
	
	Если Не РегистрыСведений.ОчередьРассылок.ЗаданиеЗапланировано() Тогда
		Возврат;
	КонецЕсли;
	
	Если РегистрыСведений.ОчередьРассылок.ЗаданиеУжеВыполняется() Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.ОчередьРассылок.УдалитьЗадание();
	
	Элементы.ЗаданиеРассылкиОтменено.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой()
	
	ЭтоОтправкаEmail = Объект.СпособОтправки = ПредопределенноеЗначение("Перечисление.ВидыКаналовСвязи.Email");
	
	Элементы.КоманднаяПанельHTML.Видимость = ЭтоОтправкаEmail;
	Элементы.УчетнаяЗапись.Видимость = ЭтоОтправкаEmail;
	Элементы.АльтернативныеУчетныеЗаписи.Видимость = ЭтоОтправкаEmail;
	Элементы.ПровайдерSMS.Видимость = Не ЭтоОтправкаEmail;
	Элементы.ИмяОтправителяSMS.Видимость = Не ЭтоОтправкаEmail;
	Элементы.ГруппаВложения.Видимость = ЭтоОтправкаEmail;
	Элементы.ПолучателиСостояниеСообщенияSMS.Видимость = Не ЭтоОтправкаEmail;
	Элементы.ТекстПисьма.Видимость = ЭтоОтправкаEmail;
	Элементы.Содержание.Видимость = Не ЭтоОтправкаEmail;
	Элементы.ПараметрКакОтписатьсяОтРассылки.Видимость = ЭтоОтправкаEmail;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПолучателиЗагрузкаДанныхИзВнешнегоИсточника", "Видимость", ЭтоОтправкаEmail);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьВложения(Знач ТекущийОбъект)
	
	Вложения.Очистить();
	
	СодержаниеHTML = ТекущийОбъект.СодержаниеHTML;
	
	Картинки = ТекущийОбъект.КартинкиHTML.Получить();
	Если Картинки <> Неопределено Тогда
		Для Каждого ДанныеКартинки Из Картинки Цикл
			НовыйSRC = СтрШаблон("data:image/jpg;base64,%1", Base64Строка(ДанныеКартинки.Значение.ПолучитьДвоичныеДанные()));
			СодержаниеHTML = СтрЗаменить(ТекущийОбъект.СодержаниеHTML, ДанныеКартинки.Ключ, НовыйSRC);
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МассоваяРассылкаПрисоединенныеФайлы.Ссылка,
	|	МассоваяРассылкаПрисоединенныеФайлы.Наименование,
	|	МассоваяРассылкаПрисоединенныеФайлы.Расширение,
	|	МассоваяРассылкаПрисоединенныеФайлы.ИндексКартинки
	|ИЗ
	|	Справочник.МассоваяРассылкаПрисоединенныеФайлы КАК МассоваяРассылкаПрисоединенныеФайлы
	|ГДЕ
	|	МассоваяРассылкаПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И МассоваяРассылкаПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("ВладелецФайла", ТекущийОбъект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Вложения.Добавить();
		НоваяСтрока.Ссылка = Выборка.Ссылка;
		НоваяСтрока.Представление = Выборка.Наименование + ?(ПустаяСтрока(Выборка.Расширение), "", "." + Выборка.Расширение);
		НоваяСтрока.ИндексКартинки = Выборка.ИндексКартинки;
		НоваяСтрока.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.Ссылка), УникальныйИдентификатор);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСтатусы(Знач ТекущийОбъект)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОчередьРассылок.МассоваяРассылка КАК МассоваяРассылка,
	|	ОчередьРассылок.КакСвязаться КАК КакСвязаться,
	|	ОчередьРассылок.СостояниеСообщенияSMS КАК СостояниеСообщенияSMS
	|ИЗ
	|	РегистрСведений.ОчередьРассылок КАК ОчередьРассылок
	|ГДЕ
	|	ОчередьРассылок.МассоваяРассылка = &МассоваяРассылка");
	Запрос.УстановитьПараметр("МассоваяРассылка", ТекущийОбъект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СостоянияСообщенийSMS = Новый Соответствие;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СостоянияСообщенийSMS[Выборка.КакСвязаться] = Выборка.СостояниеСообщенияSMS;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ТаблицаУчастников Цикл
		ТекСтрока.СостояниеСообщенияSMS = СостоянияСообщенийSMS[ТекСтрока.КакСвязаться];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНовоеПисьмоПоУмолчанию()
	
	Объект.Автор = Пользователи.АвторизованныйПользователь();
	Объект.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Объект.Автор, "ОсновнойОтветственный");
	Объект.УчетнаяЗапись = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Объект.Автор, "ОсновнаяУчетнаяЗаписьЭлектроннойПочты");
	Объект.ИмяОтправителяSMS = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиSMS", "ИмяОтправителяSMS", "");
	Объект.Состояние = Перечисления.СостоянияОтправкиРассылки.Черновик;
	
КонецПроцедуры

&НаСервере
Функция ТекстВопроса()
	
	Отказались = Новый Соответствие;
	Дубли = Новый Соответствие;
	КОтправке = Новый Соответствие;
	
	ОтказалисьОтРассылки = РегистрыСведений.ОтказалисьОтРассылки.ЭтиАдреса();
	
	Для Каждого ТекСтрокаПолучатели Из ТаблицаУчастников Цикл
		
		ТекКонтакт = КакСвязаться(ТекСтрокаПолучатели);
		
		Если ОтказалисьОтРассылки[ТекКонтакт] = Истина Тогда
			Отказались[ТекКонтакт] = Истина;
			Продолжить;
		КонецЕсли;
		
		Если КОтправке[ТекКонтакт] <> Неопределено Тогда
			Дубли[ТекКонтакт] = Истина;
			Продолжить;
		КонецЕсли;
		
		КОтправке[ТекКонтакт] = Истина;
		
	КонецЦикла;
	
	КомпонентыТекстаВопроса = Новый Массив;
	
	Если ЗначениеЗаполнено(Дубли) Тогда
		КомпонентыТекстаВопроса.Добавить(СтрШаблон(НСтр("ru = 'В списке получателей %1 (%2).'"),
		СтрокаСЧислом(НСтр("ru = ';%1 дубль;;%1 дубля;%1 дублей;%1 дубля'"),
		Дубли.Количество(),
		ВидЧисловогоЗначения.Количественное),
		ПервыеТриПолучателя(Дубли)));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отказались) Тогда
		КомпонентыТекстаВопроса.Добавить(СтрШаблон(НСтр("ru = '%1 от рассылки (%2).'"),
		СтрокаСЧислом(НСтр("ru = ';%1 получатель отказался;;%1 получателя отказались;%1 получателей отказались;%1 получателя отказались'"),
		Отказались.Количество(),
		ВидЧисловогоЗначения.Количественное),
		ПервыеТриПолучателя(Отказались)));
	КонецЕсли;
	
	Если КОтправке.Количество() > 0 Тогда
		КомпонентыТекстаВопроса.Добавить(СтрШаблон(НСтр("ru='Рассылка будет выполнена для %1.'"),
		СтрокаСЧислом(НСтр("ru = ';%1 получателя;;%1 получателей;%1 получателей;%1 получателя'"),
		КОтправке.Количество(),ВидЧисловогоЗначения.Количественное)));
	Иначе
		КомпонентыТекстаВопроса.Добавить(НСтр("ru = 'Отсутствуют получатели для рассылки.
		|'"));
	КонецЕсли;
	
	Если Объект.ПометкаУдаления Тогда
		КомпонентыТекстаВопроса.Добавить(НСтр("ru = 'Перед отправкой будет снята пометка удаления.'"));
	КонецЕсли;
	
	КомпонентыТекстаВопроса.Добавить(НСтр("ru='Продолжить?'"));
	
	Возврат СтрСоединить(КомпонентыТекстаВопроса, "
	|
	|");

КонецФункции

&НаСервере
Функция ПервыеТриПолучателя(Получатели)
	
	КомпонентыПредставления = Новый Массив;
	
	Индекс = 0;
	Для Каждого ТекПолучатель Из Получатели Цикл
		Индекс = Индекс + 1;
		Если Индекс > 3 Тогда
			Прервать;
		КонецЕсли;
		КомпонентыПредставления.Добавить(ТекПолучатель.Ключ);
	КонецЦикла;
	
	Результат = СтрСоединить(КомпонентыПредставления, ", ");
	
	Если Получатели.Количество() > КомпонентыПредставления.Количество() Тогда
		Возврат СтрШаблон(НСтр("ru = '%1 и другие'"), Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция КакСвязаться(ПараметрСтрокаПолучатели)
	
	Если Объект.СпособОтправки = Перечисления.ВидыКаналовСвязи.SMS Тогда
		Возврат МассовыеРассылкиУНФКлиентСервер.НомерДляОтправки(ПараметрСтрокаПолучатели.КакСвязаться);
	КонецЕсли;
	
	Если Объект.СпособОтправки = Перечисления.ВидыКаналовСвязи.Email Тогда
		Возврат НРег(СокрЛП(ПараметрСтрокаПолучатели.КакСвязаться));
	КонецЕсли;
	
	ВызватьИсключение НСтр("ru = 'Указан недопустимый способ доставки для массовой рассылки.'");
	
КонецФункции

&НаКлиенте
Процедура ОтправитьРассылкуВопросЗадан(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатВопроса) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РезультатВопроса.Свойство("Значение") Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВопроса.Значение <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ПометкаУдаления Тогда
		Объект.ПометкаУдаления = Ложь;
	КонецЕсли;
	
	Если ИспользоватьПромокоды Тогда
		РаспределитьПромокоды(Истина);
	КонецЕсли;

	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ЗарегистрироватьСобытияВОчередиНаОтправку();
	Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОтправкиРассылки.Сформировано");
	Объект.ДатаРассылки = ТекущаяДата();
	Записать();
	
	ТекстОповещения = СтрШаблон(
	НСтр("ru = '%1 в очереди на рассылку %2'"),
	ПредставлениеКоличестваСформированныхРассылок(Объект.Ссылка),
	Объект.СпособОтправки);
	
	ПоказатьОповещениеПользователя(ТекстОповещения, ПолучитьНавигационнуюСсылку(Объект.Ссылка), Строка(Объект.Ссылка), БиблиотекаКартинок.Информация32);
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДоступныеПромокоды()
	Если Не ЗначениеЗаполнено(Объект.ПредлагаемаяСкидка) 
		ИЛИ Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПредлагаемаяСкидка, "ЕстьУсловияПредъявленПромокод") Тогда
			// Распределение промокодов не требуется			
			Возврат;	
	КонецЕсли;
	ТаблицаПолучателей = ТаблицаУчастников.Выгрузить();
	ТаблицаПолучателей.Свернуть("КакСвязаться");
	СписокПолучателей = ТаблицаПолучателей.ВыгрузитьКолонку("КакСвязаться");
	МассивАдресовТребуютсяНовыеПромокоды = Новый Массив;
	Для Каждого АдресПолучателя Из СписокПолучателей Цикл
		ЗарезервированныйПромокод = Объект.Промокоды.НайтиСтроки(Новый Структура("КакСвязаться", АдресПолучателя));
		Если ЗарезервированныйПромокод.Количество() = 0 Тогда
			МассивАдресовТребуютсяНовыеПромокоды.Добавить(АдресПолучателя);
		КонецЕсли; 
	КонецЦикла;
	ТребуетсяНовыйхПромокодов = Макс(МассивАдресовТребуютсяНовыеПромокоды.Количество() - ДоступныеПромокоды.Количество(), 0);
	Если ТребуетсяНовыйхПромокодов > 0  Тогда
		Условия = ПромокодыУНФ.УсловияПримененияСкидокЗаПромокод(Объект.ПредлагаемаяСкидка);
		УсловиеСкидки = Условия[Объект.ПредлагаемаяСкидка];
		// TODO: не создавать, если не указан шаблон
		ТаблицаПромокодов = ПромокодыУНФ.ПолучитьТаблицуНовыхПромокодовДляУсловий(УсловиеСкидки, ,ТребуетсяНовыйхПромокодов);
		ДокументыАктивации = ПромокодыУНФ.АктивироватьПромокоды(ТаблицаПромокодов);
		Если ДокументыАктивации.Количество() > 0 Тогда
			Если Не ДокументыАктивации.Количество() = 1 Тогда
				// TODO: Сообщить о проблеме
			КонецЕсли;
			ДокументОснование = ДокументыАктивации[0];
			Для Каждого НовыйПромокод Из ТаблицаПромокодов Цикл
				ДоступныйПромокод = ДоступныеПромокоды.Добавить();
				ДоступныйПромокод.Промокод = НовыйПромокод.Промокод;
				ДоступныйПромокод.ДокументАктивации = ДокументОснование;
			КонецЦикла;
		Иначе
			ВызватьИсключение НСтр("ru = 'Не удалось сформировать промокоды для рассылки.'");
		КонецЕсли;						
	КонецЕсли;
	ОбновитьСписокВыбораПромокодов();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораПромокодов()
	МожноВыбрать = ДоступныеПромокоды.Выгрузить().ВыгрузитьКолонку("Промокод");
	Элементы.ПолучателиПромокод.СписокВыбора.Очистить();
	Элементы.ПолучателиПромокод.СписокВыбора.ЗагрузитьЗначения(МожноВыбрать);		
	Элементы.ПолучателиПромокод.СписокВыбора.Вставить(0, "", "<Авто>");
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьСобытияВОчередиНаОтправку()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОтказалисьОтРассылки = РегистрыСведений.ОтказалисьОтРассылки.ЭтиАдреса();
	
	Для Каждого ТекСтрокаПолучатели Из Объект.Получатели Цикл
		
		Если ОтказалисьОтРассылки[НРег(СокрЛП(ТекСтрокаПолучатели.КакСвязаться))] = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		РегистрыСведений.ОчередьРассылок.Зарегистрировать(
		Объект.Ссылка,
		ТекСтрокаПолучатели.КакСвязаться,
		Объект.СпособОтправки,
		Объект.ИнтервалМеждуПопытками,
		Объект.КоличествоПопыток);
		
	КонецЦикла;
	
	РегистрыСведений.ОчередьРассылок.ЗапуститьВыполнениеЗадания();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеКоличестваСформированныхРассылок(МассоваяРассылка)
	
	КоличествоСформированныхРассылок = РегистрыСведений.ОчередьРассылок.КоличествоСформированныхРассылок(МассоваяРассылка);
	
	Результат = СтрокаСЧислом(
	";Зарегистрирована %1 запись;;Зарегистрировано %1 записи;Зарегистрировано %1 записей;Зарегистрировано %1 записи",
	КоличествоСформированныхРассылок,
	ВидЧисловогоЗначения.Количественное);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВставитьПараметр(ИмяПараметра)
	
	Если Объект.СпособОтправки = ПредопределенноеЗначение("Перечисление.ВидыКаналовСвязи.Email") Тогда
		
		ГипертекстКлиент.ВставитьТекст(ИмяПараметра, ПараметрыДляПередачиВМодульГипертекст());
		
	Иначе
		
		ВставитьПараметрВСМС(ИмяПараметра);
		
	КонецЕсли;
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуПромокода(Размер)
	
	Если Объект.СпособОтправки = ПредопределенноеЗначение("Перечисление.ВидыКаналовСвязи.Email") Тогда
		// Показ заглушки картинки промокода
		ДвоичныеДанные = ПолучитьКартинкуШтрихкода(Объект.ПредлагаемаяСкидка,,Размер);
		ВставитьКартинкуПромокодаВТекстЭлектронногоПисьма(ДвоичныеДанные);
	Иначе
		// TODO: сообщение что нельзя вставлять картинку в СМС
	КонецЕсли;
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуПромокодаВТекстЭлектронногоПисьма(ДвоичныеДанные)
	
	Изображения = ДокументHTML.images;
	Для Каждого Изображение Из Изображения Цикл
		
		Если Изображение.getAttribute("data-promocode") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'В тексте письма разрешено использовать только одно изображение QR-кода.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЦикла;
	
	ГипертекстКлиент.ВставитьКартинкуПоДвоичнымДанным(
		ДвоичныеДанные, ПараметрыДляПередачиВМодульГипертекст(), "data-promocode");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКартинкуШтрихкода(СкидкаНаценка, УровеньКоррекции = 0, Размер = 190)
	
	ТекстQR = "XXXXXX";
	УсловияСкидок = ПромокодыУНФ.УсловияПримененияСкидокЗаПромокод(СкидкаНаценка);
	УсловиеЗаПромокод = УсловияСкидок[СкидкаНаценка];
	Если ЗначениеЗаполнено(УсловиеЗаПромокод) Тогда
		ТекстЗаглушки = "";
		ПараметрыПромокода = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УсловиеЗаПромокод, "ШаблонПромокода.МаскаПромокода, ШаблонПромокода.КоличествоСимволов");
		Если ЗначениеЗаполнено(ПараметрыПромокода.ШаблонПромокодаМаскаПромокода) Тогда
			ТекстЗаглушки = ПараметрыПромокода.ШаблонПромокодаМаскаПромокода;
			ВставкаПромокода = "";
			Для НомерСивола = 1 По ПараметрыПромокода.ШаблонПромокодаКоличествоСимволов Цикл
				ВставкаПромокода = ВставкаПромокода + "X";
			КонецЦикла;
			ТекстЗаглушки = СтрЗаменить(ТекстЗаглушки, "[Промокод]", ВставкаПромокода);
		Конецесли;
		
		Если ЗначениеЗаполнено(ТекстЗаглушки) Тогда
			ТекстQR = ТекстЗаглушки;
		КонецЕсли;
	КонецЕсли;
	Картинка = ПромокодыУНФ.ПолучитьИзображениеПромокода(ТекстQR, УровеньКоррекции, Размер);
	
	Возврат Картинка.ПолучитьДвоичныеДанные();
	
КонецФункции

&НаКлиенте
Процедура ВставитьПараметрВСМС(Знач ИмяПараметра)
	
	НачалоСтроки = 0;
	НачалоКолонки = 0;
	КонецСтроки = 0;
	КонецКолонки = 0;
	
	Элементы.Содержание.ПолучитьГраницыВыделения(НачалоСтроки,НачалоКолонки,КонецСтроки,КонецКолонки);
	
	Объект.Содержание = Лев(Объект.Содержание, НачалоКолонки - 1) + ИмяПараметра + Сред(Объект.Содержание, НачалоКолонки);
КонецПроцедуры

// Процедура интерактивного добавления вложений.
//
&НаКлиенте
Процедура ДобавлениеФайлаКВложениям()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВоВложенияПослеПомещенияФайлов", ЭтотОбъект);
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.ИдентификаторФормы = УникальныйИдентификатор;
	ФайловаяСистемаКлиент.ЗагрузитьФайлы(ОписаниеОповещения, ПараметрыЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВоВложенияПослеПомещенияФайлов(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы = Неопределено Или ПомещенныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьФайлыВСписок(ПомещенныеФайлы);
	Модифицированность = Истина;
	
КонецПроцедуры

// Процедура добавляет файлы во вложения.
//
// Параметры:
//  ПомещенныеФайлы	 - Массив	 - Массив объектов типа ОписаниеПереданногоФайла 
&НаСервере
Процедура ДобавитьФайлыВСписок(ПомещенныеФайлы)
	
	Для Каждого ОписаниеФайла Из ПомещенныеФайлы Цикл
		
		Файл = Новый Файл(ОписаниеФайла.Имя);
		ПозицияТочки = Найти(Файл.Расширение, ".");
		РасширениеБезТочки = Сред(Файл.Расширение, ПозицияТочки + 1);
		
		Вложение = Вложения.Добавить();
		Вложение.Представление = Файл.Имя;
		Вложение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение), УникальныйИдентификатор);
		Вложение.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(РасширениеБезТочки);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура в зависимости от типа клиента открывает или сохраняет выбранный файл
//
&НаКлиенте
Процедура ОткрытьВложение()
	
	Если Элементы.Вложения.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеВложение = Вложения.НайтиПоИдентификатору(Элементы.Вложения.ТекущаяСтрока);
	
	#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
		ПолучитьФайл(ВыбранноеВложение.АдресВоВременномХранилище, ВыбранноеВложение.Представление, Истина);
	#Иначе
		ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
		СоздатьКаталог(ИмяВременнойПапки);
		
		ИмяВременногоФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ВыбранноеВложение.Представление;
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ВыбранноеВложение.АдресВоВременномХранилище);
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
		Файл = Новый Файл(ИмяВременногоФайла);
		Файл.УстановитьТолькоЧтение(Истина);
		Если Файл.Расширение = ".mxl" Тогда
			ТабличныйДокумент = ПолучитьТабличныйДокументПоДвоичнымДанным(ВыбранноеВложение.АдресВоВременномХранилище);
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("ИмяДокумента", ВыбранноеВложение.Представление);
			ПараметрыОткрытия.Вставить("ТабличныйДокумент", ТабличныйДокумент);
			ПараметрыОткрытия.Вставить("ПутьКФайлу", ИмяВременногоФайла);
			ОткрытьФорму("ОбщаяФорма.РедактированиеТабличногоДокумента", ПараметрыОткрытия, ЭтотОбъект);
		Иначе
			ФайловаяСистемаКлиент.ОткрытьФайл(ИмяВременногоФайла);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТабличныйДокументПоДвоичнымДанным(Знач ДвоичныеДанные)
	
	Если ТипЗнч(ДвоичныеДанные) = Тип("Строка") Тогда
		// передан адрес двоичных данных во временном хранилище
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДвоичныеДанные);
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("mxl");
	ДвоичныеДанные.Записать(ИмяФайла);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(ИмяФайла);
	
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение табличного документа'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , , 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСодержаниеТемы(ТемаСобытия)
	
	Возврат ТемаСобытия.Содержание;
	
КонецФункции // ПолучитьСодержаниеТемы()

&НаКлиенте
Процедура ПодборКонтактовЗавершение(АдресВХранилище, ДополнительныеПараметры) Экспорт
	
	Если ЭтоАдресВременногоХранилища(АдресВХранилище) Тогда
		
		ЗаблокироватьДанныеФормыДляРедактирования();
		Модифицированность = Истина;
		ЗаполнитьКонтактыПоАдреснойКниге(АдресВХранилище)
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскиваниеЗавершение(Результат, АдресВременногоХранилища, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Файлы = Новый Массив;
	ПередаваемыйФайл = Новый ОписаниеПередаваемогоФайла(ДополнительныеПараметры.Имя, АдресВременногоХранилища);
	Файлы.Добавить(ПередаваемыйФайл);
	ДобавитьФайлыВСписок(Файлы);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьВложения(МассоваяРассылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Вложения.Ссылка КАК Ссылка,
		|	Вложения.АдресВоВременномХранилище,
		|	Вложения.Представление
		|ПОМЕСТИТЬ втВложения
		|ИЗ
		|	&Вложения КАК Вложения
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МассоваяРассылкаПрисоединенныеФайлы.Ссылка
		|ПОМЕСТИТЬ втПрисоединенныеФайлы
		|ИЗ
		|	Справочник.МассоваяРассылкаПрисоединенныеФайлы КАК МассоваяРассылкаПрисоединенныеФайлы
		|ГДЕ
		|	МассоваяРассылкаПрисоединенныеФайлы.ВладелецФайла = &МассоваяРассылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втВложения.Ссылка КАК ВложениеСсылка,
		|	втПрисоединенныеФайлы.Ссылка КАК ПрисоединенныйФайлСсылка,
		|	втВложения.АдресВоВременномХранилище,
		|	втВложения.Представление
		|ИЗ
		|	втВложения КАК втВложения
		|		ПОЛНОЕ СОЕДИНЕНИЕ втПрисоединенныеФайлы КАК втПрисоединенныеФайлы
		|		ПО втВложения.Ссылка = втПрисоединенныеФайлы.Ссылка";
	
	Запрос.УстановитьПараметр("Вложения", Вложения.Выгрузить());
	Запрос.УстановитьПараметр("МассоваяРассылка", МассоваяРассылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПрисоединенныйФайлСсылка = NULL Тогда
		// Добавить вложение в присоединенные файлы
			
			Если Не ПустаяСтрока(Выборка.АдресВоВременномХранилище) Тогда
				
				ЧастиИмениФайла = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Выборка.Представление, ".", Ложь);
				Если ЧастиИмениФайла.Количество() > 1 Тогда
					РасширениеБезТочки = ЧастиИмениФайла[ЧастиИмениФайла.Количество()-1];
					ИмяБезРасширения = Лев(Выборка.Представление, СтрДлина(Выборка.Представление) - (СтрДлина(РасширениеБезТочки)+1));
				Иначе
					РасширениеБезТочки = "";
					ИмяБезРасширения = Выборка.Представление;
				КонецЕсли;
				
				ПараметрыФайла = Новый Структура;
				ПараметрыФайла.Вставить("Автор", Пользователи.ТекущийПользователь());
				ПараметрыФайла.Вставить("ВладелецФайлов", МассоваяРассылка);
				ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяБезРасширения);
				ПараметрыФайла.Вставить("РасширениеБезТочки", РасширениеБезТочки);
				ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ТекущаяУниверсальнаяДата());
				
				Вложения.НайтиСтроки(Новый Структура("Представление, АдресВоВременномХранилище", Выборка.Представление, Выборка.АдресВоВременномХранилище))[0].Ссылка =
					РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, Выборка.АдресВоВременномХранилище);
			КонецЕсли;
			
		ИначеЕсли Выборка.ВложениеСсылка = NULL Тогда
		// Удалить вложение из присоединенных файлов
			
			ПрисоединенныйФайлОбъект = Выборка.ПрисоединенныйФайлСсылка.ПолучитьОбъект();
			ПрисоединенныйФайлОбъект.УстановитьПометкуУдаления(Истина);
			
		Иначе
		// Обновить вложение в присоединенных файлах
			
			РаботаСФайлами.ОбновитьФайл(Выборка.ПрисоединенныйФайлСсылка, 
				Новый Структура("АдресФайлаВоВременномХранилище, АдресВременногоХранилищаТекста", Выборка.АдресВоВременномХранилище, ""));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
&НаСервере
Процедура ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	ПолучателиДобавлены = Ложь;
	Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Контакт) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Объект.Получатели.Добавить(), СтрокаТаблицы);
		
		ПолучателиДобавлены = Истина;
		
	КонецЦикла;
	
	Если ПолучателиДобавлены Тогда
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(АдресЗагруженныхДанных) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзФайлаЗапасы(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
	
	НастройкиЗагрузкиДанных.Вставить("ПолноеИмяТабличнойЧасти", "МассоваяРассылка.Получатели");
	НастройкиЗагрузкиДанных.Вставить("ИмяМакетаСШаблоном","ЗагрузкаИзФайлаЗапасы");
	НастройкиЗагрузкиДанных.Вставить("Заголовок", НСтр("ru = 'Загрузка получателей из файла'"));
	НастройкиЗагрузкиДанных.Вставить("СодержаниеВидимо", Истина);
	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда
		
		Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда
		
			ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
			ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
			
		ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда
			
			ОбработатьПодготовленныеДанные(РезультатЗагрузки);
			
		КонецЕсли;
		
	Иначе
		
		ЗагрузитьИзФайлаЗавершение(РезультатЗагрузки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанные(РезультатЗагрузки)
	
	Попытка
		
		НачатьТранзакцию();
		
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяЗапись = ТаблицаУчастников.Добавить();
				НоваяЗапись.КонтактСтрокой = СтрокаТаблицы.Контакт;
				НоваяЗапись.КакСвязаться = СтрокаТаблицы.КакСвязаться;
				НоваяЗапись.Промокод = СтрокаТаблицы.Промокод;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка данных'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
&НаСервере
Процедура УправлениВидимостьюПромокодов()
	ИспользоватьПромокоды = ЗначениеЗаполнено(Объект.ПредлагаемаяСкидка);
	// Используется для условного оформления
	ГенерироватьПромокоды = ИспользоватьПромокоды;
	Если ИспользоватьПромокоды Тогда
	 	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПредлагаемаяСкидка, "ЕстьУсловияПредъявленПромокод") Тогда	 	
			Условие = ПромокодыУНФ.УсловияПримененияСкидокЗаПромокод(Объект.ПредлагаемаяСкидка)[Объект.ПредлагаемаяСкидка];
			Если Условие = Неопределено ИЛИ Не ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Условие, "ШаблонПромокода")) Тогда
				ГенерироватьПромокоды = Ложь;
			КонецЕсли;	 	 	
	 	Иначе
	 		ИспользоватьПромокоды = Ложь;
	 	КонецЕсли;		
	КонецЕсли;	

	// Эта подсказка появится, если возникнет неудачная попытка отправить рассылку, где не получится сгенерировать промокоды
	Элементы.ГруппаПодсказкаШаблонГенерации.Видимость = Ложь;
	Элементы.ПолучателиПромокод.Видимость = ИспользоватьПромокоды;
	Элементы.ЗаполнитьПромокды.Видимость = ИспользоватьПромокоды;
	ЗаголовокПолучателей = НСтр("ru = 'Получатели (%1)'");
	Если ИспользоватьПромокоды Тогда 
		ЗаголовокПолучателей = НСтр("ru = 'Получатели промокодов (%1)'");
	КонецЕсли;
	Элементы.ГруппаПолучатели.Заголовок = СтрШаблон(ЗаголовокПолучателей, ТаблицаУчастников.Количество());
	Элементы.ПолучателиПромокод.АвтоОтметкаНезаполненного = ИспользоватьПромокоды И Не ГенерироватьПромокоды;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступныеПромокоды(ДобавляемыеПромокоды)
	ДоступныеПромокоды.Очистить();
	Если Не (ЗначениеЗаполнено(Объект.ПредлагаемаяСкидка)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПредлагаемаяСкидка, "ЕстьУсловияПредъявленПромокод")) Тогда
		// Это не рассылка промокодов
		Возврат;
	КонецЕсли;
	НовыеПромокоды = ПолучитьДокументыАктивацииКонкретныхПромокодов(ДобавляемыеПромокоды, Объект.Ссылка);
	ЗарезервированныеПромокоды = Объект.Промокоды.Выгрузить().ВыгрузитьКолонку("Промокод");
	Для Каждого НовыйДоступныйПромокод Из ДобавляемыеПромокоды Цикл
		Если ЗарезервированныеПромокоды.Найти(НовыйДоступныйПромокод) = Неопределено Тогда
			НовыйПромокод = ДоступныеПромокоды.Добавить();
			НовыйПромокод.Промокод = НовыйДоступныйПромокод;
			НовыйПромокод.ДокументАктивации = НовыеПромокоды[НовыйДоступныйПромокод];
		КонецЕсли;
	КонецЦикла;
	ОбновитьСписокВыбораПромокодов();
КонецПроцедуры

&НаКлиенте
Процедура ОтркрытьПодборПромокодов(ПараметрыПодбора, ДополнительныеПараметры = Неопределено)
	// Команда подразумевает, что ранее добавленные доступные промокоды уже не интересны, нужны только промокоды, выбранные прямо сейчас
	ДоступныеПромокоды.Очистить();
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыбранныеПромокоды", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("РегистрСведений.Промокоды.Форма.ФормаСписка",ПараметрыПодбора, ЭтотОбъект,,,, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыбранныеПромокоды(Значение, ДополнительныеПараметры) Экспорт
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОбщийПромокод = Ложь;
	Если ДополнительныеПараметры.Свойство("ОбщийПромокод", ОбщийПромокод) И ОбщийПромокод Тогда
		НовыйПромокод = Значение[0];
		СтрокиАвто = ТаблицаУчастников.НайтиСтроки(Новый Структура("Промокод", ""));
		Для Каждого СтрокаУчастника Из СтрокиАвто Цикл
			СтрокаУчастника.Промокод = НовыйПромокод.Промокод;
			РезервПромокода = Объект.Промокоды.Добавить();
			РезервПромокода.КакСвязаться = СтрокаУчастника.КакСвязаться;
			РезервПромокода.Промокод = НовыйПромокод.Промокод;
			РезервПромокода.ДокументАктивации = НовыйПромокод.ДокументАктивации;		
		КонецЦикла;
	Иначе		
		Для Каждого НовыйПромокод Из Значение Цикл
			РанееДобавленныеПромокоды = ДоступныеПромокоды.НайтиСтроки(Новый Структура("Промокод", НовыйПромокод.Промокод));
			Если РанееДобавленныеПромокоды.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			РанееЗарезервированныеПромокоды = Объект.Промокоды.НайтиСтроки(Новый Структура("Промокод", НовыйПромокод.Промокод));
			Если РанееЗарезервированныеПромокоды.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			НовыйДоступныйПромокод = ДоступныеПромокоды.Добавить();
			НовыйДоступныйПромокод.Промокод = НовыйПромокод.Промокод;
			НовыйДоступныйПромокод.ДокументАктивации = НовыйПромокод.ДокументАктивации;		 
		КонецЦикла;
		РаспределитьПромокоды();
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДокументыАктивацииКонкретныхПромокодов(СписокПромокодов, ТекущаяРассылка)
	Результат = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Промокоды.Промокод КАК Промокод,
	|	Промокоды.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.Промокоды КАК Промокоды
	|ГДЕ
	|	Промокоды.Промокод В(&Промокоды)
	|	И Промокоды.Регистратор Ссылка Документ.АктивацияПромокодов
	|	И НЕ Промокоды.Промокод В
	|				(ВЫБРАТЬ
	|					Рассылка.Промокод
	|				ИЗ
	|					Документ.МассоваяРассылка.Промокоды КАК Рассылка
	|				ГДЕ
	|					НЕ Рассылка.Ссылка В (&ТекущаяРассылка)
	|					и Рассылка.Ссылка.Состояние В (ЗНАЧЕНИЕ(перечисление.СостоянияОтправкиРассылки.Отправлено), ЗНАЧЕНИЕ(перечисление.СостоянияОтправкиРассылки.Сформировано))	)
	|";
	Запрос.УстановитьПараметр("Промокоды", СписокПромокодов);
	Запрос.УстановитьПараметр("ТекущаяРассылка", ТекущаяРассылка);	
	Выб = Запрос.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		Результат.Вставить(Выб.Промокод, Выб.Регистратор);
	КонецЦикла;
	Если Не Результат.Количество() = СписокПромокодов.Количество() Тогда
		ТекстОшибки = НСтр("ru = 'Некоторые промокоды не удалось добавить, т.к. они не зарегистрированы, или были отправлены ранее.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	Возврат Результат;	
КонецФункции

&НаСервере
Процедура СохранитьНастройкуПоказыватьИнформациюПоРассылкеПромокодов()

	РаботаСФормойДокумента.СохранитьВидимостьГруппыИнформации(ИмяФормы,
		"ПоказыватьИнформациюПоРассылкеПромокодов", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ОтразитьПромокодыНаФорме()
	ДоступныеПромокодыУдалить = Новый Массив;
	Для Каждого СтрокаПромокода Из Объект.Промокоды Цикл
		Отбор = Новый Структура("КакСвязаться", СтрокаПромокода.КакСвязаться);
		СтрокиОбновить = ТаблицаУчастников.НайтиСтроки(Отбор);
		Для Каждого СтрокаОбновить Из СтрокиОбновить Цикл
			СтрокаОбновить.Промокод = СтрокаПромокода.Промокод;
		КонецЦикла;
		
		Отбор = Новый Структура("Промокод", СтрокаПромокода.Промокод);
		НедоступныеПромокоды = ДоступныеПромокоды.НайтиСтроки(Отбор);
		Для Каждого СтрокаНедоступногоПромокода Из НедоступныеПромокоды Цикл
			ДоступныеПромокодыУдалить.Добавить(СтрокаНедоступногоПромокода);
		КонецЦикла;
	КонецЦикла;
	Для Каждого НедоступныйПромокод Из ДоступныеПромокодыУдалить Цикл
		ДоступныеПромокоды.Удалить(НедоступныйПромокод);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура РаспределитьПромокоды(ЗаполнениеОбязательно = Ложь)
	
	Отбор = Новый Структура("Промокод", "");
	СтрокиАвто = ТаблицаУчастников.НайтиСтроки(Отбор);
	ДоступноПромокодов = ДоступныеПромокоды.Количество();
	Если ЗаполнениеОбязательно И СтрокиАвто.Количество() > 0 Тогда
		Шаблон = ПолучитьШаблонГенерацииПромокода(Объект.ПредлагаемаяСкидка);
		Если ЗначениеЗаполнено(Шаблон) Тогда			
			СоздатьДоступныеПромокоды();
			ДоступноПромокодов = ДоступныеПромокоды.Количество();
		Иначе
			Элементы.ГруппаПодсказкаШаблонГенерации.Видимость = Истина;
			ТекстСообщения = НСтр("ru = 'Невозможно сгенерировать промокоды, проверьте шаблон генерации в условиях скидки'");
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;	
	СчетчикПромокодов = 0;
	ПоследнийИндексДоступныхПромокодов = ДоступноПромокодов - 1;
	БолееНедоступныеПромокоды = Новый Массив;
	Для Каждого СтрокаАвто Из СтрокиАвто Цикл
		ЕстьДоступныйПромокод = ПоследнийИндексДоступныхПромокодов >= СчетчикПромокодов;	
		УжеЗарезервированныеПромокоды = Объект.Промокоды.НайтиСтроки(Новый Структура("КакСвязаться", СтрокаАвто.КакСвязаться));
		Если ЗаполнениеОбязательно 
			И Не ЕстьДоступныйПромокод
			И Не УжеЗарезервированныеПромокоды.Количество() Тогда
			ВызватьИсключение(НСтр("ru = 'Не удалось создать промокоды для рассылки'"));
		ИначеЕсли Не ЕстьДоступныйПромокод 
			И Не УжеЗарезервированныеПромокоды.Количество() Тогда
			Продолжить;
		ИначеЕсли УжеЗарезервированныеПромокоды.Количество() Тогда
			ДоступныйПромокод = УжеЗарезервированныеПромокоды[0];
		Иначе
			ДоступныйПромокод = ДоступныеПромокоды[СчетчикПромокодов];				
			СчетчикПромокодов = СчетчикПромокодов + 1;
			ОтборПроверки = Новый Структура("Промокод", ДоступныйПромокод.Промокод);
			ЗарезервированныеПромокоды = Объект.Промокоды.НайтиСтроки(ОтборПроверки);
			Если ЗарезервированныеПромокоды.Количество() > 0 Тогда 
				Для Каждого ЗарезервированныйПромокод Из ЗарезервированныеПромокоды Цикл
					Если Не СтрокаАвто.КакСвязаться = ЗарезервированныйПромокод.КакСвязаться Тогда
						ТекстОшибки = НСтр("ru = 'Ошибка резервирования промокода %1 за получателем %2. Промокод зарезервирован для другого получателя рассылки (%3).'");
						ВызватьИсключение(СтрШаблон(ТекстОшибки, ДоступныйПромокод.Промокод, СтрокаАвто.КакСвязаться, ЗарезервированныйПромокод.КакСвязаться));
					КонецЕсли;				
				КонецЦикла;
			Иначе
				СтрокаРезерваПромокода = Объект.Промокоды.Добавить();
				СтрокаРезерваПромокода.Промокод = ДоступныйПромокод.Промокод;
				СтрокаРезерваПромокода.ДокументАктивации = ДоступныйПромокод.ДокументАктивации;
				СтрокаРезерваПромокода.КакСвязаться = СтрокаАвто.КакСвязаться;
				БолееНедоступныеПромокоды.Добавить(ДоступныйПромокод);
			КонецЕсли;
		КонецЕсли; 
			 
		СтрокаАвто.Промокод = ДоступныйПромокод.Промокод;
	КонецЦикла;
	Для Каждого НедоступныйПромокод Из БолееНедоступныеПромокоды  Цикл	
		ДоступныеПромокоды.Удалить(НедоступныйПромокод);
	КонецЦикла;
	ОбновитьСписокВыбораПромокодов();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьУсловиеЗаПромокод(Скидка)
	Условия = ПромокодыУНФ.УсловияПримененияСкидокЗаПромокод(Скидка);
	Возврат Условия[Скидка];
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьШаблонГенерацииПромокода(Скидка)
	Условие = ПолучитьУсловиеЗаПромокод(Скидка);
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Условие , "ШаблонПромокода");
КонецФункции
#КонецОбласти

#Область ЗаполнениеВторичныхДанных

&НаКлиенте
Процедура ЗаполнитьСодержаниеСобытия(ТемаСобытия)
	
	Если ТипЗнч(ТемаСобытия) <> Тип("СправочникСсылка.ТемыСобытий") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоEmail = Объект.СпособОтправки = ПредопределенноеЗначение("Перечисление.ВидыКаналовСвязи.Email");
	СодержаниеЗаполнено =
		(ЭтоEmail И НЕ ПустаяСтрока(ДокументHTML.body.innerHTML))
		Или (НЕ ЭтоEmail И НЕ ПустаяСтрока(Объект.Содержание));
	
	Если СодержаниеЗаполнено Тогда
		
		ПараметрыОповещения = Новый Структура("ТемаСобытия", ТемаСобытия);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗаполнитьСодержаниеСобытияЗавершение",
			ЭтотОбъект,
			ПараметрыОповещения);
		
		ТекстВопроса = НСтр("ru = 'Перезаполнить содержание по выбранной теме?'");
		ПоказатьВопрос(ОписаниеОповещения,
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет, 0);
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьСодержаниеСобытияФрагмент(ТемаСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСодержаниеСобытияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСодержаниеСобытияФрагмент(ДополнительныеПараметры.ТемаСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСодержаниеСобытияФрагмент(Знач ТемаСобытия)
	
	Если Объект.СпособОтправки = ПредопределенноеЗначение("Перечисление.ВидыКаналовСвязи.Email") Тогда
		ДокументHTML.body.innerHTML = ПолучитьСодержаниеПоТемеСобытия(ТемаСобытия);
	Иначе
		Объект.Содержание = ПолучитьСодержаниеТемы(ТемаСобытия);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСодержаниеПоТемеСобытия(ТемаСобытия)
	Возврат ГипертекстВызовСервера.HTMLИзПростогоТекста(ТемаСобытия.Содержание, Ложь);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокВыбораТемы(знач СтрокаПоиска)
	
	СписокВыбораТемы = Новый СписокЗначений;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("ПометкаУдаления", Ложь));
	ПараметрыВыбора.Вставить("СтрокаПоиска", СтрокаПоиска);
	ПараметрыВыбора.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	
	ДанныеВыбораТемы = Справочники.ТемыСобытий.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Для Каждого ЭлементСписка Из ДанныеВыбораТемы Цикл
		СписокВыбораТемы.Добавить(ЭлементСписка.Значение, Новый ФорматированнаяСтрока(ЭлементСписка.Представление, " (тема события)"));
	КонецЦикла;
	
	Возврат СписокВыбораТемы;
	
КонецФункции

&НаКлиенте
Процедура ПолучателиКонтактВыборЗавершение(АдресВХранилище, ДополнительныеПараметры) Экспорт
	
	Если ЭтоАдресВременногоХранилища(АдресВХранилище) Тогда
		
		ЗаблокироватьДанныеФормыДляРедактирования();
		Модифицированность = Истина;
		ЗаполнитьКонтактыПоАдреснойКниге(АдресВХранилище);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокВыбораКонтактов(знач СтрокаПоиска, ДоступнаРаботаСЛидами)
	
	МассивКонтрагентов = Новый Массив;
	МассивКонтактов = Новый Массив;
	МассивЛидов = Новый Массив;
	МассивКонтактовЛидов = Новый Массив;
	
	ДанныеВыбораКонтактов = Новый СписокЗначений;
	
	НомерВхожденияКонец = СтрНайти(СтрокаПоиска, ">", НаправлениеПоиска.СКонца);
	Если НомерВхожденияКонец <> 0 Тогда
		НомерВхожденияНачало = СтрНайти(СтрокаПоиска, "<", НаправлениеПоиска.СКонца, НомерВхожденияКонец);
		СтрокаЭлектроннаяПочта = Сред(СтрокаПоиска, НомерВхожденияНачало, НомерВхожденияКонец - НомерВхожденияНачало + 1);
		Если СтрНайти(СтрокаЭлектроннаяПочта, "@") <> 0 Тогда
			СтрокаПоиска = СокрЛП(СтрЗаменить(СтрокаПоиска, СтрокаЭлектроннаяПочта, ""));
		КонецЕсли;
	КонецЕсли;
	
	Если СтрДлина(СтрокаПоиска) < 3 Тогда
		Возврат ДанныеВыбораКонтактов;
	КонецЕсли;
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("ПометкаУдаления", Ложь));
	ПараметрыВыбора.Вставить("СтрокаПоиска", СтрокаПоиска);
	
	ДанныеВыбораКонтрагентов = Справочники.Контрагенты.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Для Каждого ЭлементСписка Из ДанныеВыбораКонтрагентов Цикл
		МассивКонтрагентов.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
	
	ДанныеВыбораКонтактныхЛиц = Справочники.КонтактныеЛица.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Для Каждого ЭлементСписка Из ДанныеВыбораКонтактныхЛиц Цикл
		МассивКонтактов.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("ВариантЗавершения", Перечисления.ВариантЗавершенияРаботыСЛидом.ПустаяСсылка()));
	ДанныеВыбораЛидов = Справочники.Лиды.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Для Каждого ЭлементСписка Из ДанныеВыбораЛидов Цикл
		МассивЛидов.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
	
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("ПометкаУдаления", Ложь)); 
	ДанныеВыбораКонтактовЛидов = Справочники.КонтактыЛидов.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Для Каждого ЭлементСписка Из ДанныеВыбораКонтактовЛидов Цикл
		МассивКонтактовЛидов.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
	
	Если ДоступнаРаботаСЛидами Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка,
		|	Контрагенты.АдресЭПДляПоиска КАК АдресЭПДляПоиска
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка В(&МассивКонтрагентов)
		|	И Контрагенты.АдресЭПДляПоиска <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтактныеЛица.Ссылка КАК Ссылка,
		|	КонтактныеЛица.АдресЭПДляПоиска КАК АдресЭПДляПоиска
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛица
		|ГДЕ
		|	КонтактныеЛица.Ссылка В(&МассивКонтактов)
		|	И КонтактныеЛица.АдресЭПДляПоиска <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Лиды.Ссылка КАК Ссылка,
		|	Лиды.АдресЭПДляПоиска КАК АдресЭПДляПоиска
		|ИЗ
		|	Справочник.Лиды КАК Лиды
		|ГДЕ
		|	Лиды.Ссылка В(&МассивЛидов)
		|	И Лиды.АдресЭПДляПоиска <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтактыЛидов.Ссылка КАК Ссылка,
		|	Лиды.АдресЭПДляПоиска КАК АдресЭПДляПоиска
		|ИЗ
		|	Справочник.КонтактыЛидов КАК КонтактыЛидов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Лиды КАК Лиды
		|		ПО КонтактыЛидов.Владелец = Лиды.Ссылка
		|ГДЕ
		|	Лиды.Ссылка В(&МассивКонтактовЛидов)
		|	И Лиды.АдресЭПДляПоиска <> """"";
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка,
		|	Контрагенты.АдресЭПДляПоиска КАК АдресЭПДляПоиска
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка В(&МассивКонтрагентов)
		|	И Контрагенты.АдресЭПДляПоиска <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтактныеЛица.Ссылка КАК Ссылка,
		|	КонтактныеЛица.АдресЭПДляПоиска КАК АдресЭПДляПоиска
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛица
		|ГДЕ
		|	КонтактныеЛица.Ссылка В(&МассивКонтактов)
		|	И КонтактныеЛица.АдресЭПДляПоиска <> """"";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивКонтактов", МассивКонтактов);
	Запрос.УстановитьПараметр("МассивКонтрагентов", МассивКонтрагентов);
	Если ДоступнаРаботаСЛидами Тогда
		Запрос.УстановитьПараметр("МассивЛидов", МассивЛидов);
		Запрос.УстановитьПараметр("МассивКонтактовЛидов", МассивКонтактовЛидов);
	КонецЕсли;

	ПредставлениеКонтрагент = НСтр("ru = '(контрагент)'");
	ПредставлениеКонтактноеЛицо = НСтр("ru = '(контактное лицо)'");
	ПредставлениеЛид = НСтр("ru = '(лид)'");
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаДетальныеЗаписи = РезультатЗапроса[0].Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДанныеВыбораКонтактов.Добавить(ВыборкаДетальныеЗаписи.Ссылка, Новый ФорматированнаяСтрока(
		Новый ФорматированнаяСтрока(ДанныеВыбораКонтрагентов.НайтиПоЗначению(ВыборкаДетальныеЗаписи.Ссылка).Представление,
		ПредставлениеКонтрагент), " <" + ВыборкаДетальныеЗаписи.АдресЭПДляПоиска + ">"));
	КонецЦикла;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[1].Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДанныеВыбораКонтактов.Добавить(ВыборкаДетальныеЗаписи.Ссылка, Новый ФорматированнаяСтрока(
		Новый ФорматированнаяСтрока(ДанныеВыбораКонтактныхЛиц.НайтиПоЗначению(ВыборкаДетальныеЗаписи.Ссылка).Представление,
		ПредставлениеКонтактноеЛицо), " <" + ВыборкаДетальныеЗаписи.АдресЭПДляПоиска + ">"));
	КонецЦикла;
	
	Если ДоступнаРаботаСЛидами Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса[2].Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ДанныеВыбораКонтактов.Добавить(ВыборкаДетальныеЗаписи.Ссылка, Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(ДанныеВыбораЛидов.НайтиПоЗначению(ВыборкаДетальныеЗаписи.Ссылка).Представление,
			ПредставлениеЛид), " <" + ВыборкаДетальныеЗаписи.АдресЭПДляПоиска + ">"));
		КонецЦикла;
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса[3].Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ДанныеВыбораКонтактов.Добавить(ВыборкаДетальныеЗаписи.Ссылка, Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(ДанныеВыбораКонтактовЛидов.НайтиПоЗначению(ВыборкаДетальныеЗаписи.Ссылка).Представление,
			ПредставлениеЛид), " <" + ВыборкаДетальныеЗаписи.АдресЭПДляПоиска + ">"));
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("Недействителен, ПометкаУдаления", Ложь, Ложь));
	ПараметрыВыбора.Вставить("СтрокаПоиска", СтрокаПоиска);
	
	ДанныеВыбораСотрудников = ДанныеВыбораСотрудников(ПараметрыВыбора);
	Для Каждого ЭлементСписка Из ДанныеВыбораСотрудников Цикл
		ДанныеВыбораКонтактов.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("ПометкаУдаления", Ложь));
	ПараметрыВыбора.Вставить("СтрокаПоиска", СтрокаПоиска);
	
	ДанныеВыбораАдресатовПисьма = Справочники.АдресатыПисем.ПолучитьДанныеВыбора(ПараметрыВыбора);
	Для Каждого ЭлементСписка Из ДанныеВыбораАдресатовПисьма Цикл
		ДанныеВыбораКонтактов.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление,, ЭлементСписка.Картинка);
	КонецЦикла;

	Возврат ДанныеВыбораКонтактов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеВыбораСотрудников(Параметры)
	
	ДанныеВыбораСотрудников = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизическиеЛица.Ссылка КАК Ссылка,
	|	ФизическиеЛица.Наименование КАК НаименованиеФизЛица,
	|	ФизическиеЛицаКИ.Представление КАК АдресЭП,
	|	Сотрудники.Наименование КАК НаименованиеСотрудника
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКИ
	|		ПО (ФизическиеЛицаКИ.Ссылка = ФизическиеЛица.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ФизическиеЛица.Ссылка = Сотрудники.Физлицо
	|ГДЕ
	|	(Сотрудники.Наименование ПОДОБНО &СтрокаПоиска
	|			ИЛИ ФизическиеЛицаКИ.Представление ПОДОБНО &СтрокаПоиска
	|				И ФизическиеЛицаКИ.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|ИТОГИ ПО
	|	Ссылка,
	|	НаименованиеФизЛица,
	|	АдресЭП";
	
	Запрос.УстановитьПараметр("СтрокаПоиска", "%"+Параметры.СтрокаПоиска+"%");
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	АдресЭП = "";
	Пока Выборка.Следующий() Цикл
		
		МассивСотрудников 	 = Новый Массив;
		ВыборкаСотрудники = Выборка.Выбрать();
		
		Пока ВыборкаСотрудники.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаСотрудники.НаименованиеСотрудника) Тогда
				Продолжить;
			КонецЕсли;
			МассивСотрудников.Добавить(ВыборкаСотрудники.НаименованиеСотрудника);
			Если ЗначениеЗаполнено(ВыборкаСотрудники.АдресЭП) Тогда
				АдресЭП = ВыборкаСотрудники.АдресЭП;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаСотрудники = "";
		Если МассивСотрудников.Количество() > 0 Тогда
			СтрокаСотрудники = СтрСоединить(МассивСотрудников, ", ");
		КонецЕсли;
		
		ПредставлениеФизЛица = СтрШаблон(НСтр("ru = '%1 <%2> (физ.лицо)'"), 
			Выборка.НаименованиеФизЛица, 
			АдресЭП);
			
		Если ЗначениеЗаполнено(СтрокаСотрудники) Тогда
			ПредставлениеФизЛица = СтрШаблон(НСтр("ru = '%1 (сотрудники: %2)'"), ПредставлениеФизЛица, СтрокаСотрудники);
		КонецЕсли;
		
		ДанныеВыбораСотрудников.Добавить(Выборка.Ссылка, ПредставлениеФизЛица);
	КонецЦикла;
	
	Возврат ДанныеВыбораСотрудников;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЭлектронныеПочтыКонтактаНаСервереБезКонтекста(Контакт)
	
	ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.Лиды") Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКомпанииЛида;
	Иначе
		ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
	КонецЕсли;
	
	ТаблицаВсехЭлектронныхПочт = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Контакт, ВидКИ, ТекущаяДатаСеанса(), Ложь);
	
	ТаблицаВсехЭлектронныхПочт.Свернуть("Представление");
	
	Возврат ТаблицаВсехЭлектронныхПочт.ВыгрузитьКолонку("Представление");
	
КонецФункции

&НаСервере
Процедура ПриСозданииПриЧтенииНаСервере(ТекущийОбъект)
	
	ДоступнаРаботаСЛидами = ПравоДоступа("Добавление", Метаданные.Справочники.Лиды);

	ЗаполнитьТаблицуУчастников(ТекущийОбъект);
	УстановитьСвязиСОбъектамиCRM();
	УстановитьКартинкиУчастников();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуУчастников(Объект)
	
	ТаблицаУчастников.Очистить();
	
	Для Каждого СтрокаУчастники Из Объект.Получатели Цикл
		
		СтрокаКонтакты = ТаблицаУчастников.Добавить();
		СтрокаКонтакты.НомерСтроки = ТаблицаУчастников.Количество();
		ЗаполнитьЗначенияСвойств(СтрокаКонтакты, СтрокаУчастники);
		
		Если ТипЗнч(СтрокаКонтакты.Контакт) <> Тип("Строка") 
			И ТипЗнч(СтрокаКонтакты.Контакт) <> Тип("СправочникСсылка.АдресатыПисем") 
			И Объект.СпособОтправки = Перечисления.ВидыКаналовСвязи.Email  Тогда
			СтрокаКонтакты.КонтактCRM = СтрокаКонтакты.Контакт;
			СтрокаКонтакты.Контакт = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаУчастников.Количество() = 0 И НеобходимоДобавитьСтроку Тогда
		СтрокаКонтакты = ТаблицаУчастников.Добавить();
		СтрокаКонтакты.НомерСтроки = ТаблицаУчастников.Количество();
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучателиКонтактОбработкаПослеВыборкиНаСервере()
	
	УстановитьСвязиСОбъектамиCRM();
	УстановитьКартинкиУчастников();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиСОбъектамиCRM()
	
	ДублиПолучателей.Очистить();
	
	Если ДоступнаРаботаСЛидами Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязиАдресатКонтактCRM.КонтактCRM КАК КонтактCRM,
		|	СвязиАдресатКонтактCRM.Адресат КАК Адресат,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СвязиАдресатКонтактCRM.КонтактCRM) = ТИП(Справочник.Контрагенты)
		|			ТОГДА 0
		|		КОГДА ТИПЗНАЧЕНИЯ(СвязиАдресатКонтактCRM.КонтактCRM) = ТИП(Справочник.КонтактныеЛица)
		|			ТОГДА 1
		|		КОГДА ТИПЗНАЧЕНИЯ(СвязиАдресатКонтактCRM.КонтактCRM) = ТИП(Справочник.Лиды)
		|			ТОГДА 2
		|		КОГДА ТИПЗНАЧЕНИЯ(СвязиАдресатКонтактCRM.КонтактCRM) = ТИП(Справочник.КонтактыЛидов)
		|			ТОГДА 3
		|		ИНАЧЕ 4
		|	КОНЕЦ КАК ТипКонтакта,
		|	Лиды.ВариантЗавершения КАК ВариантЗавершения
		|ИЗ
		|	РегистрСведений.СвязиАдресатКонтактCRM КАК СвязиАдресатКонтактCRM
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Лиды КАК Лиды
		|		ПО СвязиАдресатКонтактCRM.КонтактCRM = Лиды.Ссылка
		|ГДЕ
		|	СвязиАдресатКонтактCRM.Адресат В(&МассивУчастников)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТипКонтакта";
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязиАдресатКонтактCRM.КонтактCRM КАК КонтактCRM,
		|	СвязиАдресатКонтактCRM.Адресат КАК Адресат,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СвязиАдресатКонтактCRM.КонтактCRM) = ТИП(Справочник.Контрагенты)
		|			ТОГДА 0
		|		КОГДА ТИПЗНАЧЕНИЯ(СвязиАдресатКонтактCRM.КонтактCRM) = ТИП(Справочник.КонтактныеЛица)
		|			ТОГДА 1
		|		КОГДА ТИПЗНАЧЕНИЯ(СвязиАдресатКонтактCRM.КонтактCRM) = ТИП(Справочник.Лиды)
		|			ТОГДА 2
		|		КОГДА ТИПЗНАЧЕНИЯ(СвязиАдресатКонтактCRM.КонтактCRM) = ТИП(Справочник.КонтактыЛидов)
		|			ТОГДА 3
		|		ИНАЧЕ 4
		|	КОНЕЦ КАК ТипКонтакта,
		|	NULL КАК ВариантЗавершения
		|ИЗ
		|	РегистрСведений.СвязиАдресатКонтактCRM КАК СвязиАдресатКонтактCRM
		|ГДЕ
		|	СвязиАдресатКонтактCRM.Адресат В(&МассивУчастников)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТипКонтакта";
	КонецЕсли;
	
	МассивУчастников = Новый Массив;
	МассивКИ = Новый Массив;
	
	Для Каждого Участник Из ТаблицаУчастников Цикл
		Если Участник.ЭтоУчетнаяЗапись Тогда
			Продолжить;
		КонецЕсли;
		МассивУчастников.Добавить(Участник.Контакт);
		МассивКИ.Добавить(Участник.КакСвязаться);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МассивУчастников", МассивУчастников);
	ТаблицаАдресатов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Участник Из ТаблицаУчастников Цикл
		
		АдресатыУчастника = ТаблицаАдресатов.НайтиСтроки(Новый Структура("Адресат", Участник.Контакт));
		Если АдресатыУчастника.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого АдресатУчастника Из АдресатыУчастника Цикл
			
			Если НЕ ЗначениеЗаполнено(Участник.КонтактCRM) Тогда
				Участник.КонтактCRM 	= АдресатУчастника.КонтактCRM;
				Продолжить;
			КонецЕсли;
			
			Если АдресатыУчастника.Количество() > 1 И АдресатУчастника.КонтактCRM <> Участник.КонтактCRM Тогда
				Если ЗначениеЗаполнено(АдресатУчастника.ВариантЗавершения) Тогда
					Продолжить;
				КонецЕсли;
				
				НовыйДубль = ДублиПолучателей.Добавить();
				НовыйДубль.ИндексПолучателя = ТаблицаУчастников.Индекс(Участник);
				НовыйДубль.ДубльПолучателя  = АдресатУчастника.КонтактCRM;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкиУчастников()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	Контрагенты.ВидКонтрагента
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка В(&Контрагенты)");
	
	Контрагенты = ТаблицаУчастников.Выгрузить().ВыгрузитьКолонку("КонтактCRM");
	Дубли = ДублиПолучателей.Выгрузить().ВыгрузитьКолонку("ДубльПолучателя");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Контрагенты, Дубли);
	Запрос.УстановитьПараметр("Контрагенты", Контрагенты);
	
	ВидыКонтрагентов = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидыКонтрагентов[Выборка.Ссылка] = Выборка.ВидКонтрагента;
	КонецЦикла;
	
	Для Каждого ТекСтрокаУчастники Из ТаблицаУчастников Цикл
		ТекСтрокаУчастники.КомандаCRM = "";
		
		Если ЗначениеЗаполнено(ТекСтрокаУчастники.КонтактCRM) Тогда
			Контакт = ТекСтрокаУчастники.КонтактCRM;
		Иначе
			Контакт = ТекСтрокаУчастники.Контакт;
		КонецЕсли;
				
		ТекСтрокаУчастники.ИндексКартинки = КартинкаУчастникаПоТипуКонтакта(Контакт, ВидыКонтрагентов);
		Если (ТипЗнч(Контакт) = Тип("СправочникСсылка.АдресатыПисем") 
			ИЛИ ТипЗнч(Контакт) = Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(Контакт)) И ЗначениеЗаполнено(ТекСтрокаУчастники.КакСвязаться) Тогда
			ТекСтрокаУчастники.КомандаCRM = НСтр("ru = 'сохранить в CRM'");
		КонецЕсли;
	
		ИндексКонтакта = ТаблицаУчастников.Индекс(ТекСтрокаУчастники);
		ДублиАдресата = ДублиПолучателей.НайтиСтроки(Новый Структура("ИндексПолучателя", ИндексКонтакта));
		
		Если ДублиАдресата.Количество() > 0 Тогда
			СтрокаКонтакт = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(";%1 контакт;;%1 контакта;%1 контактов;%1 контакта", ДублиАдресата.Количество());
			ТекСтрокаУчастники.КомандаCRM 		 = СтрШаблон(НСтр("ru = 'еще %1 с таким e-mail'"), СтрокаКонтакт);
			ТекСтрокаУчастники.ИндексКартинки 	 = 5;
		КонецЕсли;
		
		Для Каждого Дубль Из ДублиПолучателей Цикл
			Дубль.ИндексКартинки = КартинкаУчастникаПоТипуКонтакта(Дубль.ДубльПолучателя, ВидыКонтрагентов);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция КартинкаУчастникаПоТипуКонтакта(Контакт, ВидыКонтрагентов)
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Возврат 4;
	ИначеЕсли ВидыКонтрагентов[Контакт] = Перечисления.ВидыКонтрагентов.ФизическоеЛицо Тогда
		Возврат 3;
	ИначеЕсли ВидыКонтрагентов[Контакт] = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель Тогда
		Возврат 3;
	ИначеЕсли ВидыКонтрагентов[Контакт] <> Неопределено Тогда
		Возврат 2;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.АдресатыПисем") ИЛИ НЕ ЗначениеЗаполнено(Контакт) Тогда
		Возврат 0;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Возврат 6;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
		Возврат 0;
	Иначе
		Возврат 1;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция КонтактCRMУжеСоздан(ТипКонтакта, ДанныеКонтакта)
	
	Если ТипКонтакта = "АдреснаяКнига" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипКонтакта = "Контрагент" Тогда
		
		Возврат ЭлектроннаяПочтаУНФКлиент.КонтрагентУжеСоздан(
			ДанныеКонтакта.КонтактCRM,
			НСтр("ru = 'Контрагент уже создан.'"),
			ЭтотОбъект);
	КонецЕсли;
	
	Если ТипКонтакта = "Контакт" Тогда
		
		Возврат ЭлектроннаяПочтаУНФКлиент.КонтактУжеСоздан(
			ДанныеКонтакта.КонтактCRM,
			НСтр("ru = 'Контакт уже создан.'"),
			ЭтотОбъект);
		
	КонецЕсли;
	
	Если ТипКонтакта = "Лид" Тогда
		
		Возврат НЕ МожноСоздатьЛид(ДанныеКонтакта.КонтактCRM);
		
	КонецЕсли;
		
КонецФункции

&НаСервере
Процедура ЗаполнитьКонтактыПоАдреснойКниге(АдресВХранилище)
	
	ТаблицаАдресатов = ПолучитьИзВременногоХранилища(АдресВХранилище);
	АдресатыПолучателей = ПолучитьАдресатовПоКонтактам(ТаблицаАдресатов.ВыгрузитьКолонку("Контакт"));
	
	ОбработатьТекущуюСтроку = Элементы.Получатели.ТекущаяСтрока <> Неопределено;
	
	Для Каждого ПодобраннаяСтрока Из ТаблицаАдресатов Цикл
		СтрокаУчастники = Неопределено;
		
		Если ОбработатьТекущуюСтроку Тогда
			ОбработатьТекущуюСтроку = Ложь;
			СтрокаУчастники = ТаблицаУчастников.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
		КонецЕсли;
		
		Если СтрокаУчастники <> Неопределено 
			И ЗначениеЗаполнено(СтрокаУчастники.Контакт) 
			И ЗначениеЗаполнено(СтрокаУчастники.КакСвязаться) Тогда
			СтрокаУчастники = Неопределено;
		КонецЕсли;
		
		Если СтрокаУчастники = Неопределено Тогда
			СтрокаУчастники = ТаблицаУчастников.Добавить();
		КонецЕсли;
		
		МассивАдресатов = АдресатыПолучателей.НайтиСтроки(Новый Структура("КонтактCRM, Адресат", ПодобраннаяСтрока.Контакт, ПодобраннаяСтрока.КакСвязаться));
		Если МассивАдресатов.Количество() > 0 Тогда
			СтрокаУчастники.Контакт = МассивАдресатов[0].АдресатСсылка;
			СтрокаУчастники.КонтактCRM = ПодобраннаяСтрока.Контакт;
			СтрокаУчастники.КакСвязаться = ПодобраннаяСтрока.КакСвязаться;
		Иначе
			СтрокаУчастники.Контакт = ПодобраннаяСтрока.КакСвязаться;

			СтрокаУчастники.КакСвязаться = ПодобраннаяСтрока.КакСвязаться;
			СтрокаУчастники.КонтактCRM = ПодобраннаяСтрока.Контакт;
			СтрокаУчастники.НеобходимоУстановитьСвязь = Истина;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаУчастники.КонтактCRM) = Тип("СправочникСсылка.Сотрудники") Тогда
			СтрокаУчастники.ЭтоФизическоеЛицо = Истина;
		КонецЕсли;
				
		ОбновитьПредставлениеСтрокиПолучателя(СтрокаУчастники);
		
	КонецЦикла;
	
	ПолучателиКонтактОбработкаПослеВыборкиНаСервере();
	ЗаполнитьНомераСтрокТаблицыПолучатели(ЭтотОбъект);
	ТекстПромокодов = "";
	Если Элементы.ПолучателиПромокод.Видимость Тогда
		ТекстПромокодов = НСтр("ru = 'промокодов '");
	КонецЕсли;	
	Элементы.ГруппаПолучатели.Заголовок = СтрШаблон(НСтр("ru = 'Получатели %1(%2)'"), ТекстПромокодов, ТаблицаУчастников.Количество());
	РаспределитьПромокоды();
КонецПроцедуры


&НаКлиенте
Функция МожноСоздатьЛид(Контакт)
	
	МожноСоздатьЛид = Истина;
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		МожноСоздатьЛид = Ложь;
		ТекстСообщения = НСтр("ru='Контакт уже создан.'");
	КонецЕсли;
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Контрагенты") Тогда
		МожноСоздатьЛид = Ложь;
		ТекстСообщения = НСтр("ru='Контрагент уже создан.'");
	КонецЕсли;
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Лиды") Тогда
		МожноСоздатьЛид = Ложь;
		ТекстСообщения = НСтр("ru='Лид уже создан.'");
	КонецЕсли;
	
	Если НЕ МожноСоздатьЛид Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения,,
			СтрШаблон(
				"ТаблицаУчастников[%1].Контакт", 
				Формат(ТаблицаУчастников.Индекс(Элементы.Получатели.ТекущиеДанные), "ЧГ=")
			));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ФормаОбъектаКонтактаCRM(ВидКонтакта)
	
	Если ВидКонтакта = "Контрагент" Тогда
		Возврат "Справочник.Контрагенты.ФормаОбъекта";
	ИначеЕсли ВидКонтакта = "Контакт" Тогда
		Возврат "Справочник.КонтактныеЛица.ФормаОбъекта";
	Иначе
		Возврат "Справочник.Лиды.ФормаОбъекта";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьМенюСозданияКонтакта(Элемент)
	
	СтрокаКИ = Элемент.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	
	ДополнительныеПараметры.Вставить("Контакт", СтрокаКИ.Контакт);
	ДополнительныеПараметры.Вставить("КакСвязаться", СтрокаКИ.КакСвязаться);
	ДополнительныеПараметры.Вставить("КонтактCRM", СтрокаКИ.КонтактCRM);
	
	ОповещениеСоздатьКонтакт = Новый ОписаниеОповещения("СоздатьКонтактCRMНаОсновании", ЭтотОбъект, ДополнительныеПараметры);
	
	СписокВыбораКонтактов = Новый СписокЗначений;
	СписокВыбораКонтактов.Добавить("Контрагент", НСтр("ru = 'Создать контрагента'"), , КартинкаКонтактаПоИндексу(2));
	СписокВыбораКонтактов.Добавить("Контакт", НСтр("ru = 'Создать контакт'"), , КартинкаКонтактаПоИндексу(4));
	СписокВыбораКонтактов.Добавить("Лид", НСтр("ru = 'Создать лид'"), ,КартинкаКонтактаПоИндексу(1));
	
	ПоказатьВыборИзСписка(ОповещениеСоздатьКонтакт, СписокВыбораКонтактов, Элемент);
		
КонецПроцедуры

&НаКлиенте
Функция КартинкаКонтактаПоИндексу(Индекс)
	
	Если Индекс = 1 Тогда
		Возврат БиблиотекаКартинок.КонтактнаяИнформацияЭлПочта;
	ИначеЕсли Индекс = 2 Тогда
		Возврат БиблиотекаКартинок.КоллекцияКонтрагентыКомпания;
	ИначеЕсли Индекс = 3 Тогда
		Возврат БиблиотекаКартинок.КоллекцияКонтрагентыФизическоеЛицо;
	ИначеЕсли Индекс = 4 Тогда
		Возврат БиблиотекаКартинок.ИконкаКонтактногоЛица;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьКонтактыПисьма()
	
	Если ТаблицаУчастников.Количество() = 1 
		И НЕ ЗначениеЗаполнено(ТаблицаУчастников[0].КакСвязаться) 
		И НЕ ЗначениеЗаполнено(ТаблицаУчастников[0].КонтактCRM) Тогда
		НеобходимоДобавитьСтроку = Истина;
		Возврат;
	КонецЕсли;
	
	Объект.Получатели.Очистить();
	
	Для Каждого СтрокаКонтакты Из ТаблицаУчастников Цикл
		ЗаполнитьЗначенияСвойств(Объект.Получатели.Добавить(), СтрокаКонтакты);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКонтактыSMS()
	
	Объект.Получатели.Очистить();
	
	Для Каждого СтрокаКонтакты Из ТаблицаУчастников Цикл
		НоваяСтрока = Объект.Получатели.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКонтакты);
		
		Если ЗначениеЗаполнено(СтрокаКонтакты.КонтактCRM) Тогда
			НоваяСтрока.Контакт = СтрокаКонтакты.КонтактCRM;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКонтактСтрокойНаКлиенте()
	
	Для Каждого Стр Из ТаблицаУчастников Цикл
		Стр.КонтактСтрокой = "";
		
		Если ЗначениеЗаполнено(Стр.КонтактCRM) Тогда
			Контакт = Стр.КонтактCRM;
		Иначе
			Контакт = Стр.Контакт
		КонецЕсли;
		Если ЗначениеЗаполнено(Контакт) Тогда
			Стр.КонтактСтрокой = СтрШаблон(НСтр("ru = '%1'"), Контакт);
		ИначеЕсли ЗначениеЗаполнено(Стр.КакСвязаться) Тогда
			Стр.КонтактСтрокой = СтрШаблон(НСтр("ru = '%1'"), Стр.КакСвязаться);
		Иначе
			Стр.КонтактСтрокой = "";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКомандаCRMНажатие(Элемент, СтандартнаяОбработка)
	
	СтрокаДанных = Элементы.Получатели.ТекущиеДанные;
	
	Если СтрокаДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИндексСтроки = ТаблицаУчастников.Индекс(СтрокаДанных);
	СписокДублей = ДублиПолучателей.НайтиСтроки(Новый Структура("ИндексПолучателя", ИндексСтроки));
	
	Если СписокДублей.Количество() > 0 Тогда
		
		СписокВыбораКонтактов = Новый СписокЗначений;
		ОповещениеОткрытьДубльПолучателя = Новый ОписаниеОповещения("ОткрытьДубльПолучателя", ЭтотОбъект);
		
		Для Каждого ДубльАдресата Из СписокДублей Цикл
			ПредставлениеДубля 	= СтрШаблон(НСтр("ru = '%1 <%2>'"), Строка(ДубльАдресата.ДубльПолучателя), Элементы.Получатели.ТекущиеДанные.КакСвязаться);
			КартинкаДубля 		= КартинкаКонтактаПоИндексу(ДубльАдресата.ИндексКартинки);
			
			СписокВыбораКонтактов.Добавить(ДубльАдресата.ДубльПолучателя, 
			ПредставлениеДубля, , КартинкаДубля);
			
		КонецЦикла;
		
		ПоказатьВыборИзСписка(ОповещениеОткрытьДубльПолучателя, СписокВыбораКонтактов, Элемент);
		
		Возврат;
		
	КонецЕсли;
	
	ПоказатьМенюСозданияКонтакта(Элемент);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНомераСтрокТаблицыПолучатели(Форма)
	
	НомерСтроки = 0;
	Для каждого Получатель Из Форма.ТаблицаУчастников Цикл
		НомерСтроки = НомерСтроки + 1;
		Получатель.НомерСтроки = НомерСтроки;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДубльПолучателя(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(,Результат.Значение);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресатовПоКонтактам(КонтактыCRM)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АдресатыПисем.Адресат КАК Адресат,
	|	СвязиАдресатКонтактCRM.КонтактCRM КАК КонтактCRM,
	|	АдресатыПисем.Ссылка КАК АдресатСсылка
	|ИЗ
	|	Справочник.АдресатыПисем КАК АдресатыПисем
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиАдресатКонтактCRM КАК СвязиАдресатКонтактCRM
	|		ПО (СвязиАдресатКонтактCRM.Адресат = АдресатыПисем.Ссылка)
	|ГДЕ
	|	СвязиАдресатКонтактCRM.КонтактCRM В(&Контакты)";
	
	Запрос.УстановитьПараметр("Контакты", КонтактыCRM);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполненияЭлектронныхАдресов(Отказ)
	
	Для Индекс = 0 По ТаблицаУчастников.Количество() - 1 Цикл
		
		Если ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(
			ТаблицаУчастников[Индекс].КакСвязаться,
			Истина) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстСообщенияПользователю = СтрШаблон(
		НСтр("ru = 'Некорректный адрес электронной почты ""%1""'"),
		ТаблицаУчастников[Индекс].КакСвязаться);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияПользователю,,
		СтрШаблон("Объект.Получатели[%1].КакСвязаться", Формат(Индекс, "ЧН=; ЧГ=")),,
		Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеСтрокиПолучателя(ТекСтр)
	
	Если ТекСтр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтр.КонтактСтрокой = "";
	ТекСтр.КакСвязаться = СокрЛП(ТекСтр.КакСвязаться);
	
	Если ЗначениеЗаполнено(ТекСтр.КонтактCRM) Тогда
		Контакт = ТекСтр.КонтактCRM;
	Иначе
		Контакт = ТекСтр.Контакт
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакт)  Тогда
		ТекСтр.КонтактСтрокой = СтрШаблон(НСтр("ru = '%1'"), Контакт);
	ИначеЕсли ЗначениеЗаполнено(ТекСтр.КакСвязаться) Тогда
		ТекСтр.КонтактСтрокой = СтрШаблон(НСтр("ru = '%1'"), ТекСтр.КакСвязаться);
	Иначе
		ТекСтр.КонтактСтрокой = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтактCRMНаОсновании(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтактCRMУжеСоздан(Результат.Значение, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = "АдреснаяКнига" Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		ДополнительныеПараметры.Вставить("Результат", Результат);
		Оповещение = Новый ОписаниеОповещения("ОбработатьВопросСозданиеКонтактаНаОсновании", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
		|Сохранение контакта возможно только после записи данных.
		|Данные будут записаны'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
				
	Если Не ЭлектроннаяПочтаУНФКлиент.АдресЭлектроннойПочтыЗаполнен(ЭтотОбъект, ДополнительныеПараметры.КакСвязаться) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПараметрыФормыСозданияКонтакта(
		Результат.Значение,
		Объект.Ссылка,
		ДополнительныеПараметры.Контакт,
		ДополнительныеПараметры.КонтактCRM,
		ДополнительныеПараметры.КакСвязаться);
	
	ОткрытьФорму(ФормаОбъектаКонтактаCRM(Результат.Значение),
		ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросСозданиеКонтактаНаОсновании(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Записать();
	СоздатьКонтактCRMНаОсновании(ДополнительныеПараметры.Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыСозданияКонтакта(ВидКонтакта, Событие, Контакт, КонтактCRM, КакСвязаться)
	
	Результат = Новый Структура;
	Результат.Вставить("ЗначенияЗаполнения", Новый Структура);
	
	Если ВидКонтакта = "Контрагент" Тогда
		Результат.ЗначенияЗаполнения.Вставить("Покупатель", Истина);
	КонецЕсли;
	
	ИсточникПривлечения = Объект.ИсточникПривлечения;
	Результат.ЗначенияЗаполнения.Вставить("ИсточникПривлеченияПокупателя", ИсточникПривлечения);
	
	Если ВидКонтакта = "Контрагент" И ТипЗнч(КонтактCRM) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Результат.Вставить("Контакт", КонтактCRM);
		Возврат Результат;
	КонецЕсли;
	
	Если ВидКонтакта = "Контакт" И ТипЗнч(КонтактCRM) = Тип("СправочникСсылка.Контрагенты") Тогда
		Результат.Вставить("Контакт", КонтактCRM);
		Возврат Результат;
	КонецЕсли;
	
	Результат.Вставить("КонтактКакСвязаться", Новый Структура);
	Результат.КонтактКакСвязаться.Вставить("ВидКонтакта", ВидКонтакта);
	Результат.КонтактКакСвязаться.Вставить("Контакт", Контакт);
	Результат.КонтактКакСвязаться.Вставить("КакСвязаться", КакСвязаться);
	Результат.КонтактКакСвязаться.Вставить("ТипКИ", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьЛидаПоКонтакту(Контакт)
	Возврат Справочники.КонтактыЛидов.ВладелецКонтакта(Контакт);
КонецФункции

&НаКлиенте
Процедура ОбработатьВыборКонтактаИзСписка(ВыбранноеЗначение, СтрокаДанных, Текст)
	
	Элементы.Получатели.ЗакончитьРедактированиеСтроки(Ложь);
	ЭлектронныеПочтыКонтакта = ПолучитьЭлектронныеПочтыАдресатовНаСервереБезКонтекста(ВыбранноеЗначение);
	
	ТекстРедактирования = Текст;
	Если СтрНайти(ТекстРедактирования, "@") <> 0 И ЭлектронныеПочтыКонтакта.Количество() > 1 Тогда
		
		УбратьДублиЭлектронныхПочтКонтакта(ЭлектронныеПочтыКонтакта, ТекстРедактирования);
		
	КонецЕсли;
	
	Если ЭлектронныеПочтыКонтакта.Количество() Тогда
		
		ТекущиеДанные = СтрокаДанных;
		
		// часть контактов может быть еще не обновлена на новый справочник
		Если ЗначениеЗаполнено(ЭлектронныеПочтыКонтакта[0].АдресатСсылка) Тогда
			ТекущиеДанные.Контакт = ЭлектронныеПочтыКонтакта[0].АдресатСсылка;
			ТекущиеДанные.КакСвязаться = ЭлектронныеПочтыКонтакта[0].АдресЭП;
			ТекущиеДанные.КонтактCRM = ВыбранноеЗначение;
		Иначе
			ТекущиеДанные.Контакт = ЭлектронныеПочтыКонтакта[0].АдресЭП;
			ТекущиеДанные.КакСвязаться = ЭлектронныеПочтыКонтакта[0].АдресЭП;
			ТекущиеДанные.КонтактCRM = ВыбранноеЗначение;
			ТекущиеДанные.НеобходимоУстановитьСвязь = Истина;
		КонецЕсли;
		
		ОбновитьПредставлениеСтрокиПолучателя(ТекущиеДанные);
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ТекущиеДанные.ЭтоСотрудник = Истина;
		КонецЕсли;
		
		Для Н = 1 По ЭлектронныеПочтыКонтакта.ВГраница() Цикл
			НовСтр = ТаблицаУчастников.Добавить();
			НовСтр.НомерСтроки = ТаблицаУчастников.Количество();
			
			НовСтр.ТипПолучателяЭлектронногоПисьма = ТекущиеДанные.ТипПолучателяЭлектронногоПисьма;
			
			// часть контактов может быть еще не обновлена на новый справочник
			Если ЗначениеЗаполнено(ЭлектронныеПочтыКонтакта[Н].АдресатСсылка) Тогда
				НовСтр.Контакт = ЭлектронныеПочтыКонтакта[Н].АдресатСсылка;
				НовСтр.КакСвязаться = ЭлектронныеПочтыКонтакта[Н].АдресЭП;
				НовСтр.КонтактCRM = ВыбранноеЗначение;
			Иначе
				ТекущиеДанные.Контакт = ЭлектронныеПочтыКонтакта[Н].АдресЭП;
				ТекущиеДанные.КакСвязаться = ЭлектронныеПочтыКонтакта[Н].АдресЭП;
				ТекущиеДанные.КонтактCRM = ВыбранноеЗначение;
				ТекущиеДанные.НеобходимоУстановитьСвязь = Истина;
			КонецЕсли;

			Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				ТекущиеДанные.ЭтоСотрудник = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		ОбновитьПредставлениеСтрокиПолучателя(НовСтр);
		ПолучателиКонтактОбработкаПослеВыборкиНаСервере();
		РаспределитьПромокоды();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЭлектронныеПочтыАдресатовНаСервереБезКонтекста(Контакт)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АдресатыПисем.Адресат КАК АдресЭП,
	|	АдресатыПисем.Ссылка КАК АдресатСсылка
	|ИЗ
	|	Справочник.АдресатыПисем КАК АдресатыПисем
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиАдресатКонтактCRM КАК СвязиАдресатКонтактCRM
	|		ПО (СвязиАдресатКонтактCRM.Адресат = АдресатыПисем.Ссылка)
	|ГДЕ
	|	СвязиАдресатКонтактCRM.КонтактCRM В(&Контакты)";
	
	Контакты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Контакт);
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Лиды") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Контакты,
			Справочники.КонтактыЛидов.КонтактыЛида(Контакт).ВыгрузитьКолонку("Ссылка"));
		КонецЕсли;
		
	Запрос.УстановитьПараметр("Контакты", Контакты);
	ТаблицаВсехЭлектронныхПочт = Запрос.Выполнить().Выгрузить();
	
	КоличествоАдресатов = ТаблицаВсехЭлектронныхПочт.Количество();
	
	Если КоличествоАдресатов = 0 И НЕ Константы.ПереносАдресатовЗавершен.Получить() Тогда
		ЭлектронныеПочтыКонтакта =  ПолучитьЭлектронныеПочтыКонтактаНаСервереБезКонтекста(Контакт);
		Для Каждого Почта Из ЭлектронныеПочтыКонтакта Цикл
			НоваяСтрока = ТаблицаВсехЭлектронныхПочт.Добавить();
			НоваяСтрока.АдресЭП = Почта;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаВсехЭлектронныхПочт);
	
КонецФункции

&НаКлиенте
Процедура УбратьДублиЭлектронныхПочтКонтакта(ЭлектронныеПочтыКонтакта, ТекстРедактирования)
	
	ДляУдаления = Новый Массив;
	Для Каждого ЭлЭлектроннаяПочта Из ЭлектронныеПочтыКонтакта Цикл
		Если СтрНайти(ЭлЭлектроннаяПочта.АдресЭП, ТекстРедактирования) = 0 Тогда
			ДляУдаления.Добавить(ЭлЭлектроннаяПочта);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлЭлектроннаяПочта Из ДляУдаления Цикл
		ЭлектронныеПочтыКонтакта.Удалить(ЭлектронныеПочтыКонтакта.Найти(ЭлЭлектроннаяПочта));
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КонтактКакСвязаться(ЭлементАдресата)
	
	АдресЭП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементАдресата, "Адресат");
	Возврат АдресЭП;
	
КонецФункции

&НаСервере
Функция ПоместитьТаблицуУчастниковВоВременноеХранилище()
	ТаблицаУчастниковДляПереноса = ДанныеФормыВЗначение(ТаблицаУчастников,Тип("ТаблицаЗначений"));
	Возврат ПоместитьВоВременноеХранилище(ТаблицаУчастниковДляПереноса);
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Запись_Контрагент" 
		ИЛИ ИмяСобытия = "Запись_КонтактноеЛицо" 
		ИЛИ ИмяСобытия = "Запись_Лид" Тогда
		ОбработатьЗаписьКонтактаCRM(Параметр);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаписьКонтактаCRM(Параметр)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СвязиАдресатКонтактCRM.Адресат КАК Адресат
	|ИЗ
	|	РегистрСведений.СвязиАдресатКонтактCRM КАК СвязиАдресатКонтактCRM
	|ГДЕ
	|	СвязиАдресатКонтактCRM.КонтактCRM В(&Контакт)";
	
	Контакты = Новый Массив;
	
	Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("КонтактноеЛицо") Тогда
		Параметр = Параметр.КонтактноеЛицо;
	КонецЕсли;
	
	Контакты.Добавить(Параметр);
	ДополнитьОтборПодчиненнымиКонтактами(Контакты, Параметр);
	
	Запрос.УстановитьПараметр("Контакт", Контакты);
	ТаблицаАдресатов = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаАдресатов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СвязиОбновлены = Ложь;
	
	Для Каждого Адресат Из ТаблицаУчастников Цикл
		
		Если ЗначениеЗаполнено(Адресат.КонтактCRM) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивАдресатов = ТаблицаАдресатов.НайтиСтроки(Новый Структура("Адресат", Адресат.Контакт));
		
		Если МассивАдресатов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Адресат.КонтактCRM = Параметр;
		ОбновитьПредставлениеСтрокиПолучателя(Адресат);
		СвязиОбновлены = Истина;
	КонецЦикла;
	
	Если СвязиОбновлены Тогда
		УстановитьКартинкиУчастников();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьОтборПодчиненнымиКонтактами(Контакты, Параметр)
	
	Если ТипЗнч(Параметр) <> Тип("СправочникСсылка.Лиды") Тогда
		Возврат;
	КонецЕсли;
	
	КонтактыЛида = Справочники.КонтактыЛидов.КонтактыЛида(Параметр);
	
	Для Каждого Контакт Из КонтактыЛида Цикл
		Контакты.Добавить(Контакт.Ссылка)
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	УсловноеОформление.Элементы.Очистить();
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ТаблицаУчастников.Промокод",, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ГенерироватьПромокоды", Истина);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ПолучателиПромокод.Имя);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ТекстВторостепеннойНадписи);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Авто>'"));
	
КонецПроцедуры

#КонецОбласти
