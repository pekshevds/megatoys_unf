#Область ОписаниеПеременных

&НаКлиенте
Перем ДанныеВыбораСостояния;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	ОснованиеСоздания = Параметры.Основание;
	ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
	
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	Контрагент = Объект.Контрагент;
	ОпределитьВестиРасчетыПоДоговорам();
	Договор = Объект.Договор;
	ВалютаРасчетов = Справочники.ДоговорыКонтрагентов.ВалютаРасчетов(Договор);
	УчетПотребностиПоСкладам = ПолучитьФункциональнуюОпцию("УчетПотребностиПоСкладам");
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	НациональнаяВалютаКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НациональнаяВалюта, ДатаДокумента);
	КурсНациональнаяВалюта = НациональнаяВалютаКурсКратность.Курс;
	КратностьНациональнаяВалюта = НациональнаяВалютаКурсКратность.Кратность;
	СпособЗаполненияСтавкиНДС = Справочники.ДоговорыКонтрагентов.СпособЗаполненияСтавкиНДСПоДоговору(
		Договор);
		
	УстановитьУсловноеОформлениеФормы();
		
	Элементы.РедактироватьСписком.Пометка = Объект.ПлатежныйКалендарь.Количество() > 1;
	Элементы.СтраницаПлатежныйКалендарь.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
	
	Если НЕ ТолькоПросмотр И НЕ ЗначениеЗаполнено(Объект.ПоложениеЗаказаПокупателя) Тогда
		Объект.ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	КонецЕсли; 
	
	ПолучитьСтруктуруВидовОпераций();
	
	ЗаполнитьСписокДокументОснование();
	
	ПодходящееОснованиеДляЗаполненияНДС = Не ЗначениеЗаполнено(Параметры.Основание) ИЛИ ТипЗнч(Параметры.Основание) = Тип("СправочникСсылка.ДоговорыКонтрагентов");
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		И ПодходящееОснованиеДляЗаполненияНДС
		И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС(Истина);
		НалогиУНФ.ЗаполнитьНДСВключенВСтоимостьВДокументе(Объект);
	ИначеЕсли Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		Элементы.ПлатежныйКалендарьСуммаНДСОплаты.Видимость = Истина;
		Элементы.СписокПлатежныйКалендарьСуммаНДСОплаты.Видимость = Истина;
	Иначе
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		Элементы.ПлатежныйКалендарьСуммаНДСОплаты.Видимость = Ложь;
		Элементы.СписокПлатежныйКалендарьСуммаНДСОплаты.Видимость = Ложь;
	КонецЕсли;
	
	УчетВалютныхОпераций = Константы.ФункциональнаяУчетВалютныхОпераций.Получить();
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций); 
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОповеститьРабочийКалендарь = Ложь;
	Иначе
		ОповеститьРабочийКалендарь = Истина;
	КонецЕсли; 
	ДокументМодифицирован = Ложь;
	
	// Если документ открыт из подбора, заполнить табличную часть товары
	Если Параметры.ЗначенияЗаполнения.Свойство("АдресЗапасовВХранилище") 
		И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.АдресЗапасовВХранилище) Тогда
		
		ПолучитьЗапасыИзХранилища(Параметры.ЗначенияЗаполнения.АдресЗапасовВХранилище, 
							Параметры.ЗначенияЗаполнения.ИмяТабличнойЧасти,
							Параметры.ЗначенияЗаполнения.ЕстьХарактеристики,
							Параметры.ЗначенияЗаполнения.ЕстьПартии);
		
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Запасы");
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Материалы");
	
	АвтоподборКонтактов.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект);
	
	// СписокАвтоПодбораКонтрагента
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЭлектроннаяПочтаУНФ.ЗаполнитьСписокАвтоПодбораКонтрагентаИзСобытия(СписокАвтоПодбораКонтрагента,
			Параметры.Основание);
	КонецЕсли;
	// Конец СписокАвтоПодбораКонтрагента
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// Отмена товаров, услуг
	ЗаполнитьДанныеПоОтменеТоваров();
	НастроитьЭлементыОтменыТоваров();
	ИспользоватьПроцессыСостояний = ПолучитьФункциональнуюОпцию("ИспользоватьПроцессыСостояний"); 
	РазрешеноРедактированиеДокумента = ПравоДоступа("Редактирование", Метаданные.Документы.ЗаказПоставщику);
	// Конец Отмена товаров, услуг
	
	// ГрупповоеИзменениеСтрок
	ЗаполнитьСписокДействий();
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрокСервер(), ЗапасыИзменениеСтрокДействие);
	ЗапасыИзменениеСтрокДействиеПриОткрытии = ЗапасыИзменениеСтрокДействие;
	УстановитьПометку(Истина);
	// Конец ГрупповоеИзменениеСтрок
	
	Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Объект.ДокументОснование);
	Если ТолькоПросмотр Тогда
		Элементы.ДокументОснованиеНадпись.Доступность = Ложь;
	КонецЕсли;
	
	//Доставка
	УстановитьВидимостьДанныхПоДоставке();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// ЭДО
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.КомандыЭДО_ФормаДокумента(ЭтотОбъект);
	// Конец ЭДО
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.ЗаказПоставщику.ТабличныеЧасти.Запасы, НастройкиЗагрузкиДанных, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	НапоминанияПользователяУНФ.УстановитьОтображениеКомандОрганайзера(Элементы);
	ЭлектроннаяПочтаУНФ.УстановитьОтображениеКомандОтправкиСообщений(Элементы);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиУНФ.ЗаполнитьДополнительныеПараметры(Объект,
		"ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	НаборСвойств_Документ_ЗаказПоставщику = УправлениеСвойствами.НаборСвойствПоИмени("Документ_ЗаказПоставщику");
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	СписокЭлектронныхВесов = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("ЭлектронныеВесы", ,
		МенеджерОборудованияВызовСервера.РабочееМестоКлиента());
	Если СписокЭлектронныхВесов.Количество() = 0 Тогда
		// Нет подключенных весов.
		Элементы.ЗапасыПолучитьВес.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
	
	// Ручные скидки
	СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект);
	// Конец Ручные скидки
	
	// ИнтеграцияГИСМ
	СформироватьТекстЗаявкаНаВыпускКиЗГИСМ();
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияГосИС
	СобытияФормИСУНФ.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец ИнтеграцияГосИС
	
	Если Параметры.Ключ.Пустая() Тогда
		НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект, Истина);
		НоменклатураВДокументахСервер.ЗаполнитьТипНоменклатурыВТабличнойЧасти(Объект);
	КонецЕсли;
	
	// МобильныйКлиент
	МобильныйКлиентУНФ.НастроитьФормуОбъектаМобильныйКлиент(Элементы);
	// Конец МобильныйКлиент
	
	// Настройки открытия формы выбора номенклатуры
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтотОбъект, "ЗаказПоставщику",
		НастройкиФормыВыбораНоменклатуры);
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтотОбъект, "ЗаказПоставщику",
		НастройкиФормыВыбораНоменклатуры, , "Материалы");
	
	Пользователь = Пользователи.ТекущийПользователь();
	ПоказыватьКолонкуСодержаниеВЗаказеПоставщику = 
		УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,
			"ПоказыватьКолонкуСодержаниеВЗаказеПоставщику");
	
	УстановитьВидимостьОтПользовательскихНастроек(ЭтотОбъект);
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
	НастройкиКоличества = ПолучитьНастройкиИзмененияКоличества();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиКоличества);
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовУНФ.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
	// ЭлектронноеВзаимодействие.ТорговыеПредложения
	ТорговыеПредложения.ПриСозданииПодсказокФормы(ЭтотОбъект, Элементы.ПодсказкиБизнесСеть);
	// Конец ЭлектронноеВзаимодействие.ТорговыеПредложения
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	СтатистикаИспользованияФормКлиент.ПроверитьЗаписатьСтатистикуКоманды(
		"СоздатьНаОсновании.ЗаказПоставщику",
		ВладелецФормы,
		ОснованиеСоздания);
	
	// Установка видимости договора.
	УстановитьВидимостьДоговора();
	УстановитьВидимостьИДоступность();
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	// ГрупповоеИзменениеСтрок
	ОпределитьОбъектИзменений();
	// Конец ГрупповоеИзменениеСтрок
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СписокАвтоПодбораКонтрагента
	Если ЗначениеЗаполнено(СписокАвтоПодбораКонтрагента) Тогда
		ПодключитьОбработчикОжидания("ПоказатьВыборИзКлассификатораКонтактов", 0.1, Истина);
	КонецЕсли;
	// Конец СписокАвтоПодбораКонтрагента
	
	// ЭДО
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭДО
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ТорговыеПредложения
	ТорговыеПредложенияКлиент.ОбновитьПодсказкуФормы(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ТорговыеПредложения
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	Если ОповеститьРабочийКалендарь Тогда
		Оповестить("ИзмененЗаказПоставщику", Объект.Ответственный);
	КонецЕсли;
	
	Если НЕ ЗавершениеРаботы Тогда
		// ГрупповоеИзменениеСтрок
		СохранитьТекущееДействиеИзмененияСтрок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" Тогда
		
		Прочитать();
		
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Данные = МенеджерОборудованияУНФКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр);
			Если ТипШтрихкодаПоддерживается(Данные.Штрихкод) Тогда
				ПолученыШтрихкоды(Данные);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "Запись_Контрагент"
		И ЗначениеЗаполнено(Параметр)
		И Объект.Контрагент = Параметр Тогда
		
		ОпределитьВестиРасчетыПоДоговорам();
		УстановитьВидимостьДоговора();
		
	ИначеЕсли ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		АдресЗапасовВХранилище	= Параметр;
		ТекущаяСтраницыЗапасы	= (Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаЗапасы);
		ИмяТабличнойЧасти		= ?(ТекущаяСтраницыЗапасы, "Запасы", "Материалы");
		
		ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, Истина, Ложь);
		
		Если ТекущаяСтраницыЗапасы Тогда
			
			// Платежный календарь.
			ПересчитатьПлатежныйКалендарь();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьСписокЗаказовНаДоставку" Тогда
		УстановитьВидимостьДанныхПоДоставке();
	КонецЕсли;

	Если ИмяСобытия = "Запись_СостоянияЗаказовПоставщикам" Тогда
		ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостояния_ЗаказПоставщику" И Параметр <> Неопределено Тогда
		
		ЗаказИзменен = Неопределено;
		
		Если ТипЗнч(Параметр) = Тип("Массив") Тогда
			ЗаказИзменен = Параметр.Найти(Объект.Ссылка);
		ИначеЕсли ТипЗнч(Параметр) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			ЗаказИзменен = Параметр = объект.Ссылка;
		КонецЕсли;
		
		Если ЗаказИзменен = Неопределено ИЛИ (ТипЗнч(ЗаказИзменен) = Тип("Булево") И ЗаказИзменен = Ложь) Тогда
			Возврат;
		КонецЕсли;
		
		Прочитать();
		Элементы.СтраницаЗавершениеЗаказа.Видимость = Объект.СостояниеЗаказа = ПредопределенноеЗначение("Справочник.СостоянияЗаказовПоставщикам.Завершен");
		
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Запасы");
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Материалы");
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// ЭДО
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец ЭДО
	
	// ИнтеграцияГИСМ
	Если ИмяСобытия = "Запись_ЗаявкаНаВыпускКиЗГИСМ"
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстЗаявкаНаВыпускКиЗГИСМ();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостоянияГИСМ"
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстЗаявкаНаВыпускКиЗГИСМ();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменГИСМ"
		И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусГИСМФормахВДокументах)) Тогда
		
		СформироватьТекстЗаявкаНаВыпускКиЗГИСМ();
		
	КонецЕсли;
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияГосИС
	СобытияФормИСУНФКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтеграцияГосИС
	
	Если ИмяСобытия = "ОбновлениеФормыЗаказПоставщику" И УникальныйИдентификатор = Источник Тогда
		
		Для Каждого ТаблицаДанных Из Параметр Цикл
			
			Для Каждого СтрокаТаблицыДанных Из ТаблицаДанных.Значение Цикл
				НоваяСтрока = Объект[ТаблицаДанных.Ключ].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыДанных);
			КонецЦикла;
			
		КонецЦикла;
		
		// Платежный календарь
		ПересчитатьПлатежныйКалендарь();
		
		ЗаполнитьПризнакиИспользованияХарактеристик();
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов	
	УчетОригиналовПервичныхДокументовУНФКлиент.ОбработчикОповещенияФормаДокумента(ИмяСобытия,ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
	Если ИмяСобытия = "ОтобратьЗапасыПоНоменклатуре" Тогда
		ПерейтиКСтрокеТЧЗапасы(Параметр);
		ВыполнитьКомандуПоказатьДублиСтроки();
	КонецЕсли;

	Если ИмяСобытия = "ПерейтиКСтрокеТЧЗапасы" Тогда
		ПерейтиКСтрокеТЧЗапасы(Параметр);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Элементы.ВариантЗавершенияРасширеннаяПодсказка.Заголовок = СтрШаблон(НСтр("ru='Предыдущее состояние: %1'"),
		СостоянияЗаказов.ПолучитьСостояниеЗаказаПередЗавершением(
			ТекущийОбъект.Ссылка,
			Справочники.СостоянияЗаказовПоставщикам.Завершен));
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	НоменклатураВДокументахСервер.ЗаполнитьТипНоменклатурыВТабличнойЧасти(Объект);
	
	// ИнтеграцияГосИС
	СобытияФормИСУНФ.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтеграцияГосИС
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
	// ЭДО
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.КомандыЭДО_ПриЧтенииФормыДокумента(ЭтотОбъект);
	// Конец ЭДО
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	УдалитьОтмененныеЗапасы();
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		КлючеваяОперация = СтрШаблон("Проведение%1",
			РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ИмяФормы));
		ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если РежимРедактированияЗапасов Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ВерсионированиеОбъектовКомментарийКВерсии", НСтр("ru = '#Были отменены товары, услуги'"));
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ИгнорироватьПроверкуДатыЗапрета");
		РежимРедактированияЗапасов = Ложь;
	КонецЕсли;
	
	// Отмена товаров, услуг
	ДополнитьДанныеОтмененныхТоваров(ТекущийОбъект);
	//Конец отмена товаров, услуг

	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ТекстСообщения = "";
		Справочники.ДоговорыКонтрагентов.ПроверитьСоответствиеДоговораУсловиямДокумента(
			ТекстСообщения,
			Объект.Договор,
			Объект.Ссылка,
			Объект.Организация,
			Объект.Контрагент,
			Отказ,
			Объект.ВидОперации);
		
		Если ТекстСообщения <> "" Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Если Отказ Тогда
				Сообщение.Текст = СтрШаблон(НСтр("ru = 'Документ не проведен. %1'"), ТекстСообщения);
			Иначе
				Сообщение.Текст = ТекстСообщения;
			КонецЕсли;
			
			Если Отказ Тогда
				Сообщение.ПутьКДанным = "Объект";
				Сообщение.Поле = "Договор";
			КонецЕсли;
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Обработчик механизма "Свойства"
	
	Если Модифицированность
		ИЛИ (ТекущийОбъект.Проведен И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения)
		ИЛИ (Не ТекущийОбъект.Проведен И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
		
		ДокументМодифицирован = Истина;
	КонецЕсли;
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// ЭДО
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец ЭДО
	
	// ИнтеграцияГИСМ
	СформироватьТекстЗаявкаНаВыпускКиЗГИСМ();
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияГосИС
	СобытияФормИСУНФ.ПослеЗаписиНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияГосИС
	
	Элементы.ВариантЗавершенияРасширеннаяПодсказка.Заголовок = СтрШаблон(НСтр("ru='Предыдущее состояние: %1'"),
		СостоянияЗаказов.ПолучитьСостояниеЗаказаПередЗавершением(
			ТекущийОбъект.Ссылка,
			Справочники.СостоянияЗаказовПоставщикам.Завершен));
	
	// ГрупповоеИзменениеСтрок
	Если Элементы.ГруппаЗапасыИзменениеСтрок.Видимость Тогда
		УстановитьПометку(Истина);
	КонецЕсли;
	// Конец ГрупповоеИзменениеСтрок
	
	Справочники.ДоговорыКонтрагентов.ЗаписатьСпособЗаполненияСтавкиНДСПоДокументу(ТекущийОбъект.Договор,
		ТекущийОбъект.Ссылка, ТекущийОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	НоменклатураВДокументахСервер.ЗаполнитьТипНоменклатурыВТабличнойЧасти(Объект);
	
	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);
	// Конец Обсуждения
	
	// Отмена товаров, услуг
	ЗаполнитьДанныеПоОтменеТоваров();
	НастроитьЭлементыОтменыТоваров();
	// Конец Отмена товаров, услуг
	
	АссистентУправления.ПослеЗаписиНаСервере(ТекущийОбъект);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	ЗаполненЗаказ = Ложь;
	Для каждого СтрокаТЧ Из Объект.Запасы Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.ЗаказПокупателя) Тогда
			ЗаполненЗаказ = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаполненЗаказ Тогда
		Оповестить("Запись_ЗаказПоставщику", Объект.Ссылка);
	КонецЕсли;
	
	Если ДокументМодифицирован Тогда
		ОповеститьРабочийКалендарь = Истина;
		ДокументМодифицирован = Ложь;
		ОбновитьВидимостьИОстаткиВзаиморасчетов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	// ИнтеграцияГосИС
	СобытияФормИСУНФКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	// Конец ИнтеграцияГосИС
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	УстановитьВидимостьДанныхПоДоставке();
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДанныеДляИзмененияДаты = ДокументыУНФКлиент.ДанныеДляИзмененияДаты(ЭтотОбъект, Объект);
	Если ДанныеДляИзмененияДаты.ДатаНеМенялась Тогда
		Возврат;
	КонецЕсли;
	
	ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты);
		
	ЦеныИВалютаКлиент.ПересчитатьКурсКратностьВалютыРасчетов(ДанныеДляИзмененияДаты.ВалютаКурсКратность, Объект,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаказаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТребуетсяОбновитьДанныеВыбораСостояния Тогда
		ДанныеВыбораСостояния = ПолучитьДанныеВыбора(Тип("СправочникСсылка.СостоянияЗаказовПоставщикам"), ПараметрыПолученияДанных);
		ТребуетсяОбновитьДанныеВыбораСостояния = Ложь;
	КонецЕсли;
	
	ДанныеВыбора = ДанныеВыбораСостояния;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ОбработатьИзменениеВидаОперации();
	ОбработатьИзменениеДоговора();
	УстановитьВидимостьИДоступность();
	УстановитьВидимостьОтПользовательскихНастроек(ЭтотОбъект);
	
КонецПроцедуры // ВидОперацииПриИзменении()

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		
		СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Дата, Объект.ВалютаДокумента, Объект.Контрагент,
			Объект.Организация);
		Объект.Договор = СтруктураДанные.Договор;
		ОбработатьИзменениеДоговора(СтруктураДанные);
		УстановитьВидимостьДоговора();
		ОбновитьВидимостьИОстаткиВзаиморасчетов();
		
	Иначе
		
		Объект.Договор = Договор; // Восстанавливаем автоматически очищенный договор.
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры // ДоговорПриИзменении()

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбораДоговора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, Объект.Договор, Объект.ВидОперации);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Договор) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбораБанковскогоСчета(Объект.Договор, Объект.Организация, НациональнаяВалюта);
	Если ПараметрыФормы.РасчетыВУсловныхЕдиницах Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.БанковскиеСчета.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДенежныхСредствПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапланироватьОплатуПриИзменении(Элемент)
	
	Если Объект.ЗапланироватьОплату И Объект.ПлатежныйКалендарь.Количество() = 0 Тогда
		
		НоваяСтрока = Объект.ПлатежныйКалендарь.Добавить();
		НоваяСтрока.ДатаОплаты = Объект.Дата + ПолучитьСрокОплатыПоставщику(Объект.Договор) * 86400;
		НоваяСтрока.ПроцентОплаты = 100;
		НоваяСтрока.СуммаОплаты = Объект.Запасы.Итог("Всего");
		НоваяСтрока.СуммаНДСОплаты = Объект.Запасы.Итог("СуммаНДС");
		
	ИначеЕсли НЕ Объект.ЗапланироватьОплату И Объект.ПлатежныйКалендарь.Количество() > 0 Тогда
		
		Объект.ПлатежныйКалендарь.Очистить();
		
	КонецЕсли;
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаказаПриИзменении(Элемент)
	
	Если Объект.СостояниеЗаказа = ПредопределенноеЗначение("Справочник.СостоянияЗаказовПоставщикам.Завершен") Тогда
		Объект.ВариантЗавершения = ПредопределенноеЗначение("Перечисление.ВариантыЗавершенияЗаказа.Успешно");
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗавершениеЗаказа;
		
		#Если ВебКлиент Тогда
			// В веб-клиенте установка текущей страницы должна происходить после включения видимости у страницы
			ПодключитьОбработчикОжидания("УстановитьТекущейСтраницейЗавершениеЗаказа", 0.1, Истина);
		#КонецЕсли
		
	КонецЕсли;
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	
КонецПроцедуры

// ИнтеграцияГИСМ
&НаКлиенте
Процедура ТекстЗаявкаНаВыпускКиЗОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)
	
	ИнтеграцияГИСМУНФКлиент.ТекстЗаявкаНаВыпускКиЗОбработкаНавигационнойСсылки(ЭтотОбъект,
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект,
		"Объект.Комментарий");
		
КонецПроцедуры

&НаКлиенте
Процедура СкидкаПроцентПриИзменении(Элемент)
	
	ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение(
		"Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки");
	ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "ПроцентСкидкиНаценки";
	ЗапасыИзменениеСтрокЗначение = СкидкаПроцент;
	Модифицированность = Истина;
	
	ОбработатьТаблицу();
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаСуммаПриИзменении(Элемент)
	
	ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение(
		"Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСкидкуСуммой");
	ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
	ЗапасыИзменениеСтрокЗначение = СкидкаСумма;
	Модифицированность = Истина;
	
	ОбработатьТаблицу();
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокВзаиморасчетовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСФормойДокументаКлиент.ОткрытьОтчетВзаиморасчетыСКонтрагентом(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Владелец", Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоров.СПоставщиком"));
	ПараметрыФормы.Вставить("ОповеститьОЗаписиДоговора", Истина);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "удалить" Тогда
		
		Объект.ДокументОснование = Неопределено;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(
			Неопределено);
		Модифицированность = Истина;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "заполнить" Тогда
		
		ЗаполнитьПоОснованиюНачало();
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "выбрать" Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборТипаОснованияЗавершение", ЭтотОбъект);
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокДокументОснование, Элемент);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "открыть" Тогда
		
		РаботаСФормойДокументаКлиент.ОткрытьФормуДокументаПоСсылке(Объект.ДокументОснование);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказПокупателяПриИзменении(Элемент)
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		СтрокаТабличнойЧасти.ЗаказПокупателя = Объект.ЗаказПокупателя;
	КонецЦикла; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПоступленияПриИзменении(Элемент)
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		СтрокаТабличнойЧасти.ДатаПоступления = Объект.ДатаПоступления;
	КонецЦикла; 	
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурнаяЕдиницаРезервЗапасыПриИзменении(Элемент)
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	СтруктурнаяЕдиницаРезервПриИзмененииСервер("Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурнаяЕдиницаРезервПриИзменении(Элемент)
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	СтруктурнаяЕдиницаРезервПриИзмененииСервер("Материалы");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтборПоДублямОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.Запасы.ОтборСтрок = Неопределено;
	Элементы.ЗапасыКонтекстноеМенюПоказатьДублиСтроки.Пометка = Ложь;
	Элементы.ДекорацияОтборПоДублям.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменениеСтрокДействиеПриИзменении(Элемент)
	ОпределитьОбъектИзменений();
	НастроитьОформлениеПанелиРедактирования(2);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменениеСтрокЗначениеПриИзменении(Элемент)
	НастроитьОформлениеПанелиРедактирования(3);
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныйКалендарьПроцентОплатыПриИзменении(Элемент)
	ОбработчикПлатежныйКалендарьПроцентОплатыПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныйКалендарьСуммаОплатыПриИзменении(Элемент)
	ОбработчикПлатежныйКалендарьСуммаОплатыПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныйКалендарьСуммаНДСОплатыПриИзменении(Элемент)
	ОбработчикПлатежныйКалендарьСуммаНДСОплатыПриИзменении(Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасы

&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "ЗаказПокупателя",
			"ПоложениеЗаказаПокупателя");
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "ДатаПоступления",
			"ПоложениеДатыПоступления");
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "СтруктурнаяЕдиницаРезерв",
			"ПоложениеСклада");
	КонецЕсли; 
	
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТабличнойЧасти.Количество = НовоеКоличествоПриИзмененииНоменклатуры;
	КонецЕсли;
	
	// ГрупповоеИзменениеСтрок
	СтрокаТабличнойЧасти.Пометка = Истина;
	// Конец ГрупповоеИзменениеСтрок
		
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();

КонецПроцедуры // ЗапасыПриОкончанииРедактирования()

&НаКлиенте
Процедура ЗапасыПослеУдаления(Элемент)
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры // ЗапасыПослеУдаления()

&НаКлиенте
Процедура ЗапасыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыОтменен Тогда
			
		СтрокиОбработки = Новый Массив;
		СтрокиОбработки.Добавить(ТекущиеДанные.ПолучитьИдентификатор());
		ОбработатьОтменуТоваров(СтрокиОбработки);
		НастроитьЭлементыОтменыТоваров();
		
		Модифицированность = Истина;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыКоличествоОтмены Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		Если СтрокаТабличнойЧасти = Неопределено Тогда 
			Возврат 
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти.КоличествоДоОтмены = 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Количество в текущей строке равно нулю.'");
			Сообщение.КлючДанных = Объект.Ссылка;
			Сообщение.Сообщить();
			Возврат
		КонецЕсли;
		
		ПараметрыОповещения = Новый Структура("СтрокаТабличнойЧасти", СтрокаТабличнойЧасти);
		Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуТабличнойЧастиЗавершение", ЭтотОбъект, ПараметрыОповещения);
		
		ПоказатьВводЧисла(Оповещение, СтрокаТабличнойЧасти.КоличествоДоОтмены, НСтр("ru = 'Введите количество отменяемых товаров, услуг'"),
		15, 3);
		
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыПричинаОтменыДатаЗапрета Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		Если СтрокаТабличнойЧасти = Неопределено Тогда 
			Возврат 
		КонецЕсли;
		
		ПараметрыПричины = Новый Структура("РежимВыбора", Истина);
		ОткрытьФорму("Справочник.ПричиныОтменыЗаказовПоставщикам.ФормаВыбора", ПараметрыПричины, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьСбросКоличества И СбрасыватьКоличество
		И СтрокаТабличнойЧасти.Количество <> НовоеКоличествоПриИзмененииНоменклатуры Тогда
		
		ДопПараметр = Новый Структура();
		ДопПараметр.Вставить("Элемент", Элемент);
		ДопПараметр.Вставить("Количество", СтрокаТабличнойЧасти.Количество);
		Оповещение = Новый ОписаниеОповещения("ЗапасыПодтверждениеСбросаКоличестваЗавершение", ЭтотОбъект, ДопПараметр);
		ОткрытьФорму("ОбщаяФорма.ПодтверждениеСбросаКоличества", , , , , , Оповещение);
		
	Иначе
		
		Если СбрасыватьКоличество Тогда
			НовоеКоличество = НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
		ЗапасыНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество);
		
	КонецЕсли;
	
КонецПроцедуры // ЗапасыНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗапасыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтотОбъект, "ЗаказПоставщику", НастройкиФормыВыбораНоменклатуры, Истина, "Запасы", ВыбранноеЗначение.СтруктураНастроек);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтотОбъект, "Запасы");
		КонецЕсли;
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", 			СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 			СтрокаТабличнойЧасти.Характеристика);
	
	Если ЗначениеЗаполнено(Объект.ВидЦенКонтрагента) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки", 			Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", 		Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", 		Объект.СуммаВключаетНДС);
		
		СтруктураДанные.Вставить("СтавкаНДС", 				СтрокаТабличнойЧасти.СтавкаНДС);
		СтруктураДанные.Вставить("Цена", 					СтрокаТабличнойЧасти.Цена);
		
		СтруктураДанные.Вставить("ВидЦенКонтрагента", Объект.ВидЦенКонтрагента);
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
		
	КонецЕсли;
		
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.Содержание = "";
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыХарактеристикаПриИзменении()

&НаКлиенте
Процедура ЗапасыСодержаниеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		ШаблонСодержания = ТекстСодержания(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика);
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ШаблонСодержания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры // ЗапасыКоличествоПриИзменении()

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение 
		ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;	
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	// Цена.
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
	КонецЕсли; 		
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыЕдиницаИзмеренияОбработкаВыбора()

&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры // ЗапасыЦенаПриИзменении()

&НаКлиенте
Процедура ЗапасыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	ПараметрыРасчета = Новый Структура("СуммаВключаетНДС, РассчитатьЦену",Объект.СуммаВключаетНДС,Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);

	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры // ЗапасыСуммаПриИзменении()

&НаКлиенте
Процедура ЗапасыПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	ПараметрыРасчета = Новый Структура("РассчитатьСуммуСкидки", Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСуммаСкидкиНаценкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	ПараметрыРасчета = Новый Структура("РассчитатьПроцентСкидки", Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(СтрокаТабличнойЧасти, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));	
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры  // ЗапасыСтавкаНДСПриИзменении()

&НаКлиенте
Процедура ЗапасыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры // ЗапасыСуммаНДСПриИзменении()

&НаКлиенте
Процедура ЗапасыСодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Запасы.ТекущиеДанные;
	СтруктураРеквизита = Новый Структура;
	СтруктураРеквизита.Вставить("Объект", "Объект");
	СтруктураРеквизита.Вставить("ТабЧасть", "Запасы");
	СтруктураРеквизита.Вставить("НомерСтроки", ТекущаяСтрока.НомерСтроки - 1);
	СтруктураРеквизита.Вставить("ИмяРеквизита", "Содержание");
	ЗаголовокФормыРедактирования = СтрШаблон(НСтр("ru='%1: содержание'"), Строка(ТекущаяСтрока.Номенклатура));
	ОбщегоНазначенияУНФКлиент.ПоказатьФормуРедактированияРеквизита(Элемент.ТекстРедактирования, ЭтотОбъект,
		СтруктураРеквизита, ЗаголовокФормыРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПометкаПриИзменении(Элемент)
	ГрупповоеИзменениеСтрокКлиент.СтрокаПометкаПриИзменении(Объект.Запасы, Элементы.ЗапасыУстановитьФлажки,
		Элементы.ЗапасыСнятьФлажки);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПричинаОтменыПриИзменении(Элемент)
	
	ТекущийЗапас = Элементы.Запасы.ТекущиеДанные;
	Если ТекущийЗапас = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущийЗапас.Отменен = 0 Тогда
		ОтменитьВернутьЗапасы(ТекущийЗапас, ТекущийЗапас.ПричинаОтмены);
	КонецЕсли;
	
	ТекущийЗапас.ПричинаОтменыДатаЗапрета = Строка(ТекущийЗапас.ПричинаОтмены);
	
	СвязанныеСтроки = Объект.ОтмененныеЗапасы.НайтиСтроки(Новый Структура("КлючСвязиОтмененные", ТекущийЗапас.КлючСвязиОтмененные));
	СвязаннаяСтрока = СвязанныеСтроки[0];
	
	СвязаннаяСтрока.ПричинаОтмены = ТекущийЗапас.ПричинаОтмены;
	ВыбраннаяПричинаОтменыЗапаса = ТекущийЗапас.ПричинаОтмены;
	Модифицированность = Истина;
	ОтображатьГруппуОтмененных = Истина;
	
	НастроитьЭлементыОтменыТоваров();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалы

&НаКлиенте
Процедура МатериалыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Материалы.ТекущиеДанные;

	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьСбросКоличества И СбрасыватьКоличество
		И СтрокаТабличнойЧасти.Количество <> НовоеКоличествоПриИзмененииНоменклатуры Тогда
		
		ДопПараметр = Новый Структура();
		ДопПараметр.Вставить("Элемент", Элемент);
		ДопПараметр.Вставить("Количество", СтрокаТабличнойЧасти.Количество);
		Оповещение = Новый ОписаниеОповещения("МатериалыПодтверждениеСбросаКоличестваЗавершение", ЭтотОбъект, ДопПараметр);
		ОткрытьФорму("ОбщаяФорма.ПодтверждениеСбросаКоличества", , , , , , Оповещение);
		
	Иначе
		
		Если СбрасыватьКоличество Тогда
			НовоеКоличество = НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
		МатериалыНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество);
		
	КонецЕсли;	
	
КонецПроцедуры // МатериалыНоменклатураПриИзменении()

&НаКлиенте
Процедура МатериалыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти = Элементы.Материалы.ТекущиеДанные;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтотОбъект, "ЗаказПоставщику", НастройкиФормыВыбораНоменклатуры, Истина, "Материалы", ВыбранноеЗначение.СтруктураНастроек);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтотОбъект, "Материалы");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыХарактеристикаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Материалы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	НоменклатураВДокументахКлиент.КонтрольЗначенияРезерваВТекущейСтроке(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "ЗаказПокупателя",
			"ПоложениеЗаказаПокупателя");
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "СтруктурнаяЕдиницаРезерв",
			"ПоложениеСклада");
	КонецЕсли; 
	
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТабличнойЧасти.Количество = НовоеКоличествоПриИзмененииНоменклатуры;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПлатежныйКалендарь

&НаКлиенте
Процедура ПлатежныйКалендарьПередУдалением(Элемент, Отказ)
	
	Если Объект.ПлатежныйКалендарь.Количество() = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныйКалендарьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Объект.ЗапланироватьОплату = Истина;
		ТекущаяСтрока = Элемент.ТекущиеДанные;
		ПроцентОплатыИтог = Объект.ПлатежныйКалендарь.Итог("ПроцентОплаты");
		
		Если ПроцентОплатыИтог > 100 Тогда
			ТекущаяСтрока.ПроцентОплаты = ТекущаяСтрока.ПроцентОплаты - (ПроцентОплатыИтог - 100);
		КонецЕсли;
		
		ТекущаяСтрока.СуммаОплаты = Окр(Объект.Запасы.Итог("Всего") * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
		ТекущаяСтрока.СуммаНДСОплаты = Окр(Объект.Запасы.Итог("СуммаНДС") * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
		
		Если Объект.ПлатежныйКалендарь.Итог("ПроцентОплаты") = 100 И Объект.ПлатежныйКалендарь.Итог("СуммаОплаты") <> Объект.Запасы.Итог("Всего") Тогда
			ОбработатьИтогиПлатежныйКалендарь();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПлатежныйКалендарьПроцентОплатыПриИзменении(Элемент)
	ОбработчикПлатежныйКалендарьПроцентОплатыПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СписокПлатежныйКалендарьСуммаОплатыПриИзменении(Элемент)
	ОбработчикПлатежныйКалендарьСуммаОплатыПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СписокПлатежныйКалендарьСуммаНДСОплатыПриИзменении(Элемент)
	ОбработчикПлатежныйКалендарьСуммаНДСОплатыПриИзменении(Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоЗаказуПокупателя(Команда)
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ЗаполнитьПоЗаказуПокупателяЗавершение", ЭтотОбъект),
		НСтр("ru = 'Документ будет полностью перезаполнен по ""Заказу покупателя"". Продолжить выполнение операции?'"),
		РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	
	ОбработкаЗавершения = Новый ОписаниеОповещения(
		"ПоискПоШтрихкодуЗавершение",
		ЭтотОбъект, 
		Новый Структура("ТекШтрихкод", ТекШтрихкод));
	
	#Если МобильныйКлиент Тогда
		ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду",,,,,,ОбработкаЗавершения);
	#Иначе
		ПоказатьВводЗначения(ОбработкаЗавершения, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтотОбъект, "Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", "Запасы");
	ПодключаемоеОборудованиеУНФКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина, ДополнительныеПараметры);
	
КонецПроцедуры

// Конец ПодключаемоеОборудование

&НаКлиенте
Процедура РедактироватьСписком(Команда)
	
	Если Элементы.РедактироватьСписком.Пометка И Объект.ПлатежныйКалендарь.Количество() > 1 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьВозможностьРедактированияСпискомЗавершение", ЭтотОбъект);
		
		ПоказатьВопрос(
			ОписаниеОповещения,
			НСтр("ru='Все строки кроме первой будут удалены. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	Элементы.РедактироватьСписком.Пометка = НЕ Элементы.РедактироватьСписком.Пометка;
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРезервЗаполнитьПоОстаткам(Команда)
	
	Если Объект.Материалы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Материалы"" не заполнена!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКолонкуРезервПоОстаткамНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРезервОчиститьРезерв(Команда)
	
	Если Объект.Материалы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Материалы"" не заполнена!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Материалы Цикл
		СтрокаТабличнойЧасти.Резерв = 0;
	КонецЦикла;
	
КонецПроцедуры // ИзменитьРезервЗаполнитьПоОстаткам()

&НаКлиенте
Процедура ЗаполнитьПоСпецификации(Команда)

	Если Объект.Запасы.Количество() <> 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("КомандаЗаполнитьПоСпецификацииЗавершение", ЭтотОбъект), НСтр(
			"ru = 'Табличная часть ""Материалы"" будет перезаполнена. Продолжить выполнение операции?'"),
			РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
	КонецЕсли;

	КомандаЗаполнитьПоСпецификацииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура НастройкаФормы(Команда)
	
	ОткрытьФормуНастройки(Истина);
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элементы.ФормаНастройкаФормы, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура ШапкаТабличнаяЧасть(Команда)
	
	ОткрытьФормуНастройки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСбросаКоличества(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтрокаПоиска", НСтр("ru = 'Сбрасывать количество при изменении номенклатуры'"));
	Оповещение = Новый ОписаниеОповещения("НастройкаСбросаКоличестваЗавершение", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.НастройкиПользователей.Форма.ФормаНастройкиПользователя", СтруктураПараметров, , , , ,
		Оповещение);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, 
		Элементы.ЗапасыКонтекстноеМенюНастройкаСбросаКоличества, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", НаборСвойств_Документ_ЗаказПоставщику);
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы, , , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКЗаказуВСервисе(Команда)
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДокументОснование", Объект.Ссылка);
	ПараметрыФормы.Вставить("ОрганизацияБизнесСети", Объект.Организация);
	ПараметрыФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыФормы.Вставить("ИдентификаторЗаказа", ИдентификаторЗаказаНаДоставку);
	ПараметрыФормы.Вставить("РежимМастера", 2);
	СервисДоставкиКлиент.ОткрытьФормуКарточкиЗаказаНаДоставку(ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДублиСтроки(Команда)
	ВыполнитьКомандуПоказатьДублиСтроки();
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПодбор(Команда)
	
	ИмяТабличнойЧасти 	= "Запасы";
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти);
	
КонецПроцедуры // ПодборВыполнить()

&НаКлиенте
Процедура МатериалыПодбор(Команда)
	
	ИмяТабличнойЧасти 	= "Материалы";
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти);
	
КонецПроцедуры // ПодборВыполнить()

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыКопироватьСтроки(Команда)
	КопироватьСтроки("Запасы");
КонецПроцедуры

&НаКлиенте
Процедура МатериалыКопироватьСтроки(Команда)
	КопироватьСтроки("Материалы");
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВставитьСтроки(Команда)
	ВставитьСтроки("Запасы");
КонецПроцедуры

&НаКлиенте
Процедура МатериалыВставитьСтроки(Команда)
	ВставитьСтроки("Материалы");
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСнятьФлажки(Команда)
	УстановитьПометку(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыУстановитьФлажки(Команда)
	УстановитьПометку(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменитьСтроки(Команда)
	
	ПоказатьСкрытьПанельРедактирования(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВыполнитьДействие(Команда)
	
	ОбработатьТаблицу();
	НастроитьОформлениеПанелиРедактирования(4);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыОтменитьИзменения(Команда)
	
	ПоказатьСкрытьПанельРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзФайлаЗапасы(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект,
		НастройкиЗагрузкиДанных);
	
	НастройкиЗагрузкиДанных.Вставить("ПолноеИмяТабличнойЧасти", "ЗаказПоставщику.Запасы");
	НастройкиЗагрузкиДанных.Вставить("ИмяМакетаСШаблоном","ЗагрузкаИзФайлаЗапасы");
	НастройкиЗагрузкиДанных.Вставить("Заголовок", НСтр("ru = 'Загрузка запасов из файла'"));
	НастройкиЗагрузкиДанных.Вставить("ПоложениеДатыВЗаказе", Объект.ПоложениеДатыПоступления);
	НастройкиЗагрузкиДанных.Вставить("СодержаниеВидимо", Истина);
	НастройкиЗагрузкиДанных.Вставить("ПоложениеСклада", Объект.ПоложениеСклада);
	НастройкиЗагрузкиДанных.Вставить("КонтрагентПоставщик", Объект.Контрагент);
	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных,
		ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПричинуОтмены(Команда)
	ОписаниеЗавершения = Новый ОписаниеОповещения("ОбработатьВыборПричиныОтменыОтмененные", ЭтотОбъект);
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора", Истина);
	ОткрытьФорму("Справочник.ПричиныОтменыЗаказовПоставщикам.ФормаВыбора",ПараметрыФормыВыбора,,,,,ОписаниеЗавершения);
КонецПроцедуры

&НаКлиенте
Процедура ВернутьЗапасыВТаблицу(Команда)
	
	ВыделенныеСтроки = Элементы.ОтмененныеЗапасы.ВыделенныеСтроки;
	
	Если ТипЗнч(ВыделенныеСтроки) <> Тип("Массив") И ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		
		СтрокаТабличнойЧасти = Объект.ОтмененныеЗапасы.НайтиПоИдентификатору(Строка);
		
		Если СтрокаТабличнойЧасти.Редактируется Тогда
			
			СтрокаЗапаса = Объект.Запасы.НайтиСтроки(Новый Структура("КлючСвязиОтмененные", СтрокаТабличнойЧасти.КлючСвязиОтмененные));
			
			Если СтрокаЗапаса.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = СтрокаЗапаса[0];
			ОтменитьВернутьЗапасы(НоваяСтрока);
			Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Элементы.Запасы.ВыделенныеСтроки.Очистить();
			Элементы.Запасы.ВыделенныеСтроки.Добавить(НоваяСтрока.ПолучитьИдентификатор());
			Продолжить;
			
		Иначе
			НоваяСтрока = Объект.Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти,,"ПричинаОтмены");
		КонецЕсли;
		
		Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Элементы.Запасы.ВыделенныеСтроки.Очистить();
		Элементы.Запасы.ВыделенныеСтроки.Добавить(НоваяСтрока.ПолучитьИдентификатор());
		
		ЗапасыНоменклатураПриИзмененииПродолжить(Элементы.ЗапасыНоменклатура, НоваяСтрока.Количество);
		Индекс = Объект.ОтмененныеЗапасы.Индекс(СтрокаТабличнойЧасти);
		Объект.ОтмененныеЗапасы.Удалить(Индекс);
		
	КонецЦикла;
	
	Модифицированность = Истина;
	ОтображатьГруппуОтмененных = Истина;
	НастроитьЭлементыОтменыТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьТоварыУслуги(Команда)
	
	ВыделенныеСтроки = Элементы.Запасы.ВыделенныеСтроки;
	
	Если ТипЗнч(ВыделенныеСтроки) <> Тип("Массив") И ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьОтменуТоваров(ВыделенныеСтроки);
	НастроитьЭлементыОтменыТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДатаЗапрета(Команда)
	
	ОчиститьСообщения();
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи",		РежимЗаписиДокумента.Проведение);
	ПараметрыЗаписи.Вставить("РежимПроведения",	РежимПроведенияДокумента.Неоперативный);
	
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДатаЗапрета(Команда)
	
	ОчиститьСообщения();
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи",		РежимЗаписиДокумента.Запись);
	
	Записать(ПараметрыЗаписи); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрытьДатаЗапрета(Команда)
	
	ОчиститьСообщения();
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи",		РежимЗаписиДокумента.Проведение);
	ПараметрыЗаписи.Вставить("РежимПроведения",	РежимПроведенияДокумента.Неоперативный);
	ПараметрыЗаписи.Вставить("ПринудительноЗакрытьФорму", Истина);
	
	Записать(ПараметрыЗаписи);

КонецПроцедуры


#Область УчетОригиналовПервичныхДокументов

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ИзменитьСостояниеОригинала(Команда)
	УчетОригиналовПервичныхДокументовУНФКлиент.ИзменитьСостояниеОригинала(Команда, ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	// Доступность колонки Резерв
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	ГруппаОтборов = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	ГруппаПереработка = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(ГруппаОтборов, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаПереработка, "Объект.ВидОперации", Перечисления.ВидыОперацийЗаказПоставщику.ЗаказНаПереработку);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаПереработка, "Объект.Материалы.ЗаказПокупателя", , ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаПереработка, "Объект.Материалы.Резерв", 0);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "МатериалыРезерв");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Под заказ>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
	// Скидки	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	ГруппаОтборов = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Объект.Запасы.ПроцентСкидкиНаценки", 100);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Объект.Запасы.СуммаСкидкиНаценки", Новый ПолеКомпоновкиДанных("Объект.Запасы.Сумма"),ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСумма");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ПроцентСкидкиНаценки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыПроцентСкидкиНаценки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "%");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.СуммаСкидкиНаценки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСуммаСкидкиНаценки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = 'сумма'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	// Конец Скидки
	
	// Склады
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
		"Объект.Запасы.СтруктурнаяЕдиницаРезерв", Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "УчетПотребностиПоСкладам", Истина);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ТипНоменклатуры", 
		Перечисления.ТипыНоменклатуры.Запас);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСтруктурнаяЕдиницаРезерв");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);

	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	ГруппаИли = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИли, "Объект.Запасы.СтруктурнаяЕдиницаРезерв", Неопределено, 
		ВидСравненияКомпоновкиДанных.Заполнено);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИли, "Объект.Запасы.ТипНоменклатуры", 
		Перечисления.ТипыНоменклатуры.Запас, ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСтруктурнаяЕдиницаРезерв");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);

	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.СтруктурнаяЕдиницаРезерв", Неопределено, 
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ТипНоменклатуры", 
		Перечисления.ТипыНоменклатуры.Запас, ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСтруктурнаяЕдиницаРезерв");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ТекстВторостепеннойНадписи);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Для товаров>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);

	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.СтруктурнаяЕдиницаРезерв", 
		Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "УчетПотребностиПоСкладам", Истина);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "СтруктурнаяЕдиницаРезервЗапасы");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.СтруктурнаяЕдиницаРезерв", 
		Неопределено, ВидСравненияКомпоновкиДанных.Заполнено);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "СтруктурнаяЕдиницаРезервЗапасы");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
	
	УстановитьОформлениеОтмененнойСтроки();
	
	// Характеристики
	НоменклатураВДокументахСервер.ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристик(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеВидаЦенИВалютыРасчетов(ПараметрыДокумента)
	
	ВалютаРасчетовПередИзменением = ПараметрыДокумента.ВалютаРасчетовПередИзменением;
	ДанныеДоговора = ПараметрыДокумента.ДанныеДоговора;
	ВопросВидЦен = ПараметрыДокумента.ВопросВидЦен;
	ОткрытьФормуЦеныИВалюты = ПараметрыДокумента.ОткрытьФормуЦеныИВалюты;
	ИзменилсяВидЦен = ПараметрыДокумента.ИзменилсяВидЦен;
	ПересчетНеобходим = ПараметрыДокумента.ПересчетНеобходим;
	
	Если НЕ ДанныеДоговора.СуммаВключаетНДС = Неопределено Тогда
		
		Объект.СуммаВключаетНДС = ДанныеДоговора.СуммаВключаетНДС;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда 
		
		Объект.Курс	  = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс = 0, 1,
			ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс);
		Объект.Кратность = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность = 0, 1,
			ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность);
		
	КонецЕсли;
	
	Если ИзменилсяВидЦен Тогда
		
		Объект.ВидЦенКонтрагента	= ДанныеДоговора.ВидЦенКонтрагента;
		
	КонецЕсли;
	
	Если Объект.ВалютаДокумента <> ДанныеДоговора.ВалютаРасчетов Тогда
		
		Объект.БанковскийСчет = Неопределено;
		
	КонецЕсли;
	
	Объект.ВалютаДокумента = ДанныеДоговора.ВалютаРасчетов;
	
	Если ОткрытьФормуЦеныИВалюты Тогда
		
		ТекстПредупреждения = "";
		Если ИзменилсяВидЦен Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Договор с контрагентом предусматривает вид цен контрагента,
									|отличный от установленного в документе! 
									|Возможно, необходимо перезаполнить цены.'") + Символы.ПС + Символы.ПС;
			
		КонецЕсли;
		
		ТекстПредупреждения = ТекстПредупреждения + НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом!
									|Необходимо проверить валюту документа!'");
		
		ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаРасчетовПередИзменением, Истина, ИзменилсяВидЦен, ТекстПредупреждения);
		
	ИначеЕсли ВопросВидЦен Тогда
		
		ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
			УчетВалютныхОпераций); 
		
		Если ПересчетНеобходим Тогда
			
			ТекстВопроса = НСтр("ru = 'Договор с контрагентом предусматривает вид цен, отличный от установленного в документе! 
				|Пересчитать документ в соответствии с договором?'");
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОпределитьНеобходимостьПересчетаДокументаПоУсловиямДоговора", ЭтотОбъект, ПараметрыДокумента);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	Иначе
		
		ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
			УчетВалютныхОпераций); 
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзменениеВидаЦенИВалютыРасчетов()

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты)
	
	ДокументыУНФ.ДатаПриИзменении(ДанныеДляИзмененияДаты, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ДокументыУНФ.ОрганизацияПриИзменении(ЭтотОбъект, Объект);
	
	Объект.Договор = Справочники.ДоговорыКонтрагентов.ПоДокументуКонтрагентуОрганизацииИВидуОперации(Объект.Ссылка,
		Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.БанковскийСчетПоУмолчанию КАК БанковскийСчетПоУмолчанию,
	|	Организации.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств КАК БанковскийСчетПоУмолчаниюВалютаДенежныхСредств
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если Объект.ВалютаДокумента = Выборка.БанковскийСчетПоУмолчаниюВалютаДенежныхСредств Тогда
		Объект.БанковскийСчет = Выборка.БанковскийСчетПоУмолчанию;
	КонецЕсли;
	
	ВалютаИКассаПоУмолчанию = Справочники.Организации.ВалютаИКассаПоУмолчанию(Объект);
	
	Если ЗначениеЗаполнено(ВалютаИКассаПоУмолчанию) Тогда
		Объект.Касса = ВалютаИКассаПоУмолчанию.Касса;
	КонецЕсли;
	
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций); 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	РеквизитыНоменклатуры = Новый Массив;
	РеквизитыНоменклатуры.Добавить("ЕдиницаИзмерения");
	РеквизитыНоменклатуры.Добавить("ТипНоменклатуры");
	РеквизитыНоменклатуры.Добавить("ИспользоватьХарактеристики");
	РеквизитыНоменклатуры.Добавить("ПроверятьЗаполнениеХарактеристики");
	РеквизитыНоменклатуры.Добавить("ЭтоНабор");
	РеквизитыНоменклатуры.Добавить("ВидСтавкиНДС");
	РеквизитыНоменклатуры.Добавить("Склад");
	ЗначенияРеквизитовНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураДанные.Номенклатура,
		РеквизитыНоменклатуры);
	СтруктураДанные.Вставить("ЕдиницаИзмерения", ЗначенияРеквизитовНоменклатуры.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("ТипНоменклатуры", ЗначенияРеквизитовНоменклатуры.ТипНоменклатуры);

	// Наборы
	СтруктураДанные.Вставить("ЭтоНабор", ЗначенияРеквизитовНоменклатуры.ЭтоНабор);
	
	ПериодСтавкиНДС = ?(ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки), СтруктураДанные.ДатаОбработки,
		ТекущаяДатаСеанса());

	Если СтруктураДанные.Свойство("НалогообложениеНДС") 
		И НЕ СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ЗначенияРеквизитовНоменклатуры.ВидСтавкиНДС) Тогда
		СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(ЗначенияРеквизитовНоменклатуры.ВидСтавкиНДС, ПериодСтавкиНДС);
	Иначе
		ВидСтавкиНДСПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураДанные.Организация,
			"ВидСтавкиНДСПоУмолчанию");
		СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(ВидСтавкиНДСПоУмолчанию, ПериодСтавкиНДС);
	КонецЕсли;
	СтруктураДанные.Вставить("СтавкаНДС", СтавкаНДС);
	
	// Характеристики
	СтруктураДанные.Вставить("ИспользоватьХарактеристики", Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики", Ложь);
	
	Если ЗначениеЗаполнено(ЗначенияРеквизитовНоменклатуры) 
		И (ЗначенияРеквизитовНоменклатуры.ТипНоменклатуры <> Неопределено И Не ЗначенияРеквизитовНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга)
		И (ЗначенияРеквизитовНоменклатуры.ИспользоватьХарактеристики <> Неопределено И ЗначенияРеквизитовНоменклатуры.ИспользоватьХарактеристики)
		Тогда
		ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура);
		
		Если Не ЗначенияПоУмолчанию = Неопределено Тогда
			ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
		КонецЕсли;
		
		Если Не СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика", ХарактеристикаПоУмолчанию);
		Иначе
			СтруктураДанные.Характеристика = ?(ЗначениеЗаполнено(СтруктураДанные.Характеристика),
				СтруктураДанные.Характеристика, ХарактеристикаПоУмолчанию);
		КонецЕсли;
		
		СтруктураДанные.Вставить("ИспользоватьХарактеристики", Истина);
		СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",
			ЗначенияРеквизитовНоменклатуры.ПроверятьЗаполнениеХарактеристики);
	КонецЕсли; 
	// Конец Характеристики
	
	Если СтруктураДанные.Свойство("ВидЦенКонтрагента") Тогда
		
		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦенКонтрагента(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("Характеристика") Тогда
		СпецификацияПоУмолчанию = Справочники.Спецификации.СпецификацияПоУмолчанию(СтруктураДанные.Номенклатура,
			СтруктураДанные.Характеристика);
		СтруктураДанные.Вставить("Спецификация", СпецификацияПоУмолчанию);
	Иначе
		СпецификацияПоУмолчанию = Справочники.Спецификации.СпецификацияПоУмолчанию(СтруктураДанные.Номенклатура);
		СтруктураДанные.Вставить("Спецификация", СпецификацияПоУмолчанию);
	КонецЕсли;
	
	СтруктураДанные.Вставить("ЭтоЗапас", ЗначенияРеквизитовНоменклатуры.ТипНоменклатуры = ПредопределенноеЗначение(
		"Перечисление.ТипыНоменклатуры.Запас"));
	СтруктураДанные.Вставить("Склад", ЗначенияРеквизитовНоменклатуры.Склад);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	Если СтруктураДанные.Свойство("ВидЦенКонтрагента") Тогда
		
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			ЕдиницаИзмеренияКоэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураДанные.ЕдиницаИзмерения,
				"Коэффициент");
			СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмеренияКоэффициент);
		Иначе
			СтруктураДанные.Вставить("Коэффициент", 1);
		КонецЕсли;		
		
		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦенКонтрагента(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		
	КонецЕсли;	
	
	СтруктураДанные.Вставить("Спецификация", Справочники.Спецификации.СпецификацияПоУмолчанию(
		СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура();
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;	
	
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе	
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;	
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьСрокОплатыПоставщику(Договор)
	
	Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "СрокОплатыПоставщику");
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Дата, ВалютаДокумента, Контрагент, Организация)
	
	ОпределитьВестиРасчетыПоДоговорам();
	
	ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПоДокументуКонтрагентуОрганизацииИВидуОперации(
		Объект.Ссылка, Контрагент, Организация, Объект.ВидОперации);
		
	ЗначенияРеквизитовДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорПоУмолчанию,
		"ВалютаРасчетов, ВидЦенКонтрагента, РасчетыВУсловныхЕдиницах");
	
	Результат = Новый Структура;
	Результат.Вставить("Договор", ДоговорПоУмолчанию);	
	Результат.Вставить("ВалютаРасчетов", ЗначенияРеквизитовДоговора.ВалютаРасчетов);	
	ОтборКурсыВалют = Новый Структура("Валюта", ЗначенияРеквизитовДоговора.ВалютаРасчетов);
	ВалютаРасчетовКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, ОтборКурсыВалют);
	Результат.Вставить("ВалютаРасчетовКурсКратность", ВалютаРасчетовКурсКратность);	
	Результат.Вставить("ВидЦенКонтрагента", ЗначенияРеквизитовДоговора.ВидЦенКонтрагента);	
	Результат.Вставить("РасчетыВУсловныхЕдиницах", ЗначенияРеквизитовДоговора.РасчетыВУсловныхЕдиницах);	
	Результат.Вставить("СуммаВключаетНДС", Неопределено);
	Если ЗначениеЗаполнено(ЗначенияРеквизитовДоговора.ВидЦенКонтрагента) Тогда
		ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначенияРеквизитовДоговора.ВидЦенКонтрагента,
			"ЦенаВключаетНДС");
		Результат.СуммаВключаетНДС = ЦенаВключаетНДС;
	КонецЕсли;
	
	СпособЗаполненияСтавкиНДСПоДоговору = Справочники.ДоговорыКонтрагентов.СпособЗаполненияСтавкиНДСПоДоговору(
		ДоговорПоУмолчанию);
	Результат.Вставить("СпособЗаполненияСтавкиНДС", СпособЗаполненияСтавкиНДСПоДоговору);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеДоговораДляИзменения(Знач Дата, Знач Договор)
	
	ЗначенияРеквизитовДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор,
		"ВалютаРасчетов, РасчетыВУсловныхЕдиницах, ВидЦенКонтрагента");
	
	Результат = Новый Структура;
	Результат.Вставить("ВалютаРасчетов", ЗначенияРеквизитовДоговора.ВалютаРасчетов);
	ВалютаРасчетовКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ЗначенияРеквизитовДоговора.ВалютаРасчетов,
		Дата);
	Результат.Вставить("ВалютаРасчетовКурсКратность", ВалютаРасчетовКурсКратность);
	Результат.Вставить("РасчетыВУсловныхЕдиницах", ЗначенияРеквизитовДоговора.РасчетыВУсловныхЕдиницах);
	Результат.Вставить("ВидЦенКонтрагента", ЗначенияРеквизитовДоговора.ВидЦенКонтрагента);
	Результат.Вставить("СуммаВключаетНДС", Неопределено);
	Если ЗначениеЗаполнено(ЗначенияРеквизитовДоговора.ВидЦенКонтрагента) Тогда
		ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначенияРеквизитовДоговора.ВидЦенКонтрагента,
			"ЦенаВключаетНДС");		
		Результат.СуммаВключаетНДС = ЦенаВключаетНДС;
	КонецЕсли;
	СпособЗаполненияСтавкиНДСПоДоговору = Справочники.ДоговорыКонтрагентов.СпособЗаполненияСтавкиНДСПоДоговору(Договор);
	Результат.Вставить("СпособЗаполненияСтавкиНДС", СпособЗаполненияСтавкиНДСПоДоговору);
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	ОблагаетсяНДС = Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
	
	Элементы.ЗапасыСтавкаНДС.Видимость = ОблагаетсяНДС;
	Элементы.ЗапасыСуммаНДС.Видимость = ОблагаетсяНДС;
	Элементы.ЗапасыВсего.Видимость = ОблагаетсяНДС;
	Элементы.ПлатежныйКалендарьСуммаНДСОплаты.Видимость = ОблагаетсяНДС;
	Элементы.СписокПлатежныйКалендарьСуммаНДСОплаты.Видимость = ОблагаетсяНДС;
	
	Если ОблагаетсяНДС Тогда
		
		Ссылки = Объект.Запасы.Выгрузить( , "Номенклатура").ВыгрузитьКолонку("Номенклатура");
		ВидыСтавокНДС = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Ссылки, "ВидСтавкиНДС");
		ВидСтавкиНДСПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация,
			"ВидСтавкиНДСПоУмолчанию");
		ПериодСтавкиНДС = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			
			СтрокаТабличнойЧастиВидСтавкиНДС = ВидыСтавокНДС[СтрокаТабличнойЧасти.Номенклатура].ВидСтавкиНДС;
			Если ЗначениеЗаполнено(СтрокаТабличнойЧастиВидСтавкиНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТабличнойЧастиВидСтавкиНДС,
					ПериодСтавкиНДС);
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(ВидСтавкиНДСПоУмолчанию,
					ПериодСтавкиНДС);
			КонецЕсли;
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			Если Объект.СуммаВключаетНДС Тогда
				СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС
					+ 100) / 100);
			Иначе
				СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0,
				СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;
		
	Иначе
		
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
		КонецЕсли;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено, ПараметрыРасчета = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	КонецЕсли;
	
	Если ПараметрыРасчета=Неопределено Тогда
		ПараметрыРасчета = Новый Структура();
	КонецЕсли;
	ПараметрыРасчета.Вставить("СуммаВключаетНДС",Объект.СуммаВключаетНДС);
	ТабличныеЧастиУНФКлиент.РассчитатьСуммыВСтрокеТЧ(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	// Ручная скидка - заполнение полей ввода на форме
	СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект);
	// Конец Ручная скидка
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()	

&НаКлиенте
Процедура ПересчитатьПлатежныйКалендарь()
	
	Для каждого ТекСтрока Из Объект.ПлатежныйКалендарь Цикл
		ТекСтрока.СуммаОплаты = Окр(Объект.Запасы.Итог("Всего") * ТекСтрока.ПроцентОплаты / 100, 2, 1);
		ТекСтрока.СуммаНДСОплаты = Окр(Объект.Запасы.Итог("СуммаНДС") * ТекСтрока.ПроцентОплаты / 100, 2, 1);
	КонецЦикла;
	
КонецПроцедуры // ПересчитатьПлатежныйКалендарь()

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь,
	ПерезаполнитьЦены = Ложь, ТекстПредупреждения = "")
	
	ПараметрыФормыЦеныИВалюта = ЦеныИВалютаКлиентСервер.НовыеПараметрыФормыЦеныИВалюта(Объект, ТолькоПросмотр,
		Компания, ПерезаполнитьЦены, ПересчитатьЦены, ТекстПредупреждения);
	ПараметрыФормыЦеныИВалюта.ВалютаПередИзменением = ВалютаРасчетовПередИзменением;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект,
		Новый Структура("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением));
	ОткрытьФорму("ОбщаяФорма.ЦеныИВалюта", ПараметрыФормыЦеныИВалюта, ЭтотОбъект, , , , ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаСервере
Процедура ЗаполнитьПоДокументу(Знач ДокументОснование)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(ДокументОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
	УстановитьВидимостьОтПользовательскихНастроек(ЭтотОбъект);
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		Элементы.ПлатежныйКалендарьСуммаНДСОплаты.Видимость = Истина;
		Элементы.СписокПлатежныйКалендарьСуммаНДСОплаты.Видимость = Истина;
	Иначе
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		Элементы.ПлатежныйКалендарьСуммаНДСОплаты.Видимость = Ложь;
		Элементы.СписокПлатежныйКалендарьСуммаНДСОплаты.Видимость = Ложь;
	КонецЕсли;
	
	ОпределитьВестиРасчетыПоДоговорам();
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	НоменклатураВДокументахСервер.ЗаполнитьТипНоменклатурыВТабличнойЧасти(Объект);
	
КонецПроцедуры

// ПодключаемоеОборудование
&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	// Преобразование весовых штрихкодов.
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодамВМассиве(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		МассивДанныхШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если МассивДанныхШтрихкода <> Неопределено
			И МассивДанныхШтрихкода.Количество() <> 0 Тогда
			
			Для Каждого ДанныеШтрихкода Из МассивДанныхШтрихкода Цикл
				
				СтруктураДанныеНоменклатуры = Новый Структура();
				СтруктураДанныеНоменклатуры.Вставить("Организация", СтруктураДанные.Организация);
				СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
				СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
				СтруктураДанныеНоменклатуры.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
				СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", СтруктураДанные.НалогообложениеНДС);
				СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", СтруктураДанные.Дата);
				Если ЗначениеЗаполнено(СтруктураДанные.ВидЦенКонтрагента) Тогда
					СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", СтруктураДанные.Дата);
					СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", СтруктураДанные.ВалютаДокумента);
					СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", СтруктураДанные.СуммаВключаетНДС);
					СтруктураДанныеНоменклатуры.Вставить("ВидЦенКонтрагента", СтруктураДанные.ВидЦенКонтрагента);
					Если ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения)
						И ТипЗнч(ДанныеШтрихкода.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
						СтруктураДанныеНоменклатуры.Вставить("Коэффициент", ДанныеШтрихкода.ЕдиницаИзмерения.Коэффициент);
					Иначе
						СтруктураДанныеНоменклатуры.Вставить("Коэффициент", 1);
					КонецЕсли;
				КонецЕсли;
				
				ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
				
				Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
					ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	Для каждого парам Из Метаданные.Документы.ЗаказПоставщику.ТабличныеЧасти.Запасы.Реквизиты.Номенклатура.ПараметрыВыбора Цикл
		Если парам.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(парам.Значение)=Тип("ФиксированныйМассив") Тогда
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", парам.Значение);
			Иначе
			    МассивТипов = Новый Массив;
				МассивТипов.Добавить(парам.Значение);
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("ВидЦенКонтрагента", Объект.ВидЦенКонтрагента);
	СтруктураДанные.Вставить("Дата", Объект.Дата);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода.Количество() > 1 Тогда
			
			ПараметрыОткрытия = Новый Структура("МассивНоменклатуры, ТекШтрихкод", ДанныеШтрихкода, ТекШтрихкод);
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоДаннымШтрихкодовЗавершение", ЭтотОбъект, Новый Структура("СтруктураДанные",СтруктураДанные));
			
			ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ДублиНоменклатурыПоШтрихКодам", ПараметрыОткрытия, ЭтотОбъект,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Продолжить;
		КонецЕсли;
		
		Если ДанныеШтрихкода <> Неопределено И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено 
			ИЛИ ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
			СвойстваШтрихКода = Новый Структура;
			СвойстваШтрихКода.Вставить("Штрихкод", ТекШтрихкод.Штрихкод);
			СвойстваШтрихКода.Вставить("Номенклатура", ДанныеШтрихкода[0].Номенклатура);
			СвойстваШтрихКода.Вставить("ТипНоменклатуры",
				ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры);
			СвойстваШтрихКода.Вставить("ЭтоНабор", ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ЭтоНабор);
			ШтрихкодыНекорректногоТипа.Добавить(СвойстваШтрихКода);
		Иначе
			
			ДанныеШтрихкода = ДанныеШтрихкода[0];
			
			МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,ЕдиницаИзмерения",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.ЕдиницаИзмерения));
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				НоваяСтрока = Объект.Запасы.Добавить();
				ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "ЗаказПокупателя", "ПоложениеЗаказаПокупателя");
				ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "ДатаПоступления", "ПоложениеДатыПоступления");
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
				НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
				НоваяСтрока.ТипНоменклатуры = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры;
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоЗапас Тогда
					Если НоваяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
						НоваяСтрока.СтруктурнаяЕдиницаРезерв = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
					ИначеЕсли Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти")
						И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПоставщику.ЗаказНаПереработку") Тогда
						НоваяСтрока.СтруктурнаяЕдиницаРезерв = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Склад;
					Иначе
						НоваяСтрока.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
					КонецЕсли;
				КонецЕсли; 
			Иначе
				НайденнаяСтрока = МассивСтрокТЧ[0];
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + ТекШтрихкод.Количество;
				РассчитатьСуммуВСтрокеТабличнойЧасти(НайденнаяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаКлиенте
Процедура ЗаполнитьПоДаннымШтрихкодовЗавершение(СтруктураНоменклатуры, Параметры) Экспорт
	
	Если СтруктураНоменклатуры = Неопределено Тогда Возврат КонецЕсли;
	
	ДанныеШтрихкода = СтруктураНоменклатуры.МассивНоменклатуры[0];
	ТекШтрихкод = СтруктураНоменклатуры.ТекШтрихкод;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	СтруктураДанные = Параметры.СтруктураДанные;
	
	Если СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено ИЛИ ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
		СвойстваШтрихКода = Новый Структура;
		СвойстваШтрихКода.Вставить("Штрихкод", ТекШтрихкод.Штрихкод);
		СвойстваШтрихКода.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
		СвойстваШтрихКода.Вставить("ТипНоменклатуры", ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры);
		СвойстваШтрихКода.Вставить("ЭтоНабор", ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор);
		ШтрихкодыНекорректногоТипа.Добавить(СвойстваШтрихКода);
	Иначе
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
		ПараметрыПоиска.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
		ПараметрыПоиска.Вставить("ЕдиницаИзмерения", ДанныеШтрихкода.ЕдиницаИзмерения);
		МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТЧ.Количество() = 0 Тогда
			НоваяСтрока = Объект.Запасы.Добавить();
			ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "ЗаказПокупателя", "ПоложениеЗаказаПокупателя");
			ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "ДатаПоступления", "ПоложениеДатыПоступления");
			НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
			НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
			НоваяСтрока.Количество = ТекШтрихкод.Количество;
			НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
			НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
			НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
			НоваяСтрока.ТипНоменклатуры = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры;
			РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
			Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоЗапас Тогда
				Если НоваяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
					НоваяСтрока.СтруктурнаяЕдиницаРезерв = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
				ИначеЕсли Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти")
					И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПоставщику.ЗаказНаПереработку") Тогда
					НоваяСтрока.СтруктурнаяЕдиницаРезерв = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Склад;
				Иначе
					НоваяСтрока.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
				КонецЕсли;
			КонецЕсли; 
		Иначе
			НайденнаяСтрока = МассивСтрокТЧ[0];
			НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + ТекШтрихкод.Количество;
			РассчитатьСуммуВСтрокеТабличнойЧасти(НайденнаяСтрока);
			Элементы.Запасы.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	ЗаполнитьПризнакиИспользованияХарактеристик();

КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов) Экспорт
	
	Модифицированность = Истина;
	
	НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов);
	НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект,,,,Оповещение);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияХарактеристик()
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	НоменклатураВДокументахСервер.ЗаполнитьТипНоменклатурыВТабличнойЧасти(Объект); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		Если ТекНекорректныйШтрихкод.Свойство("ЭтоНабор") И ТекНекорректныйШтрихкод.ЭтоНабор Тогда
			// Наборы
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", НСтр("ru = 'Набор'"));
		Иначе
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		КонецЕсли; 
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры
// Конец ПодключаемоеОборудование

&НаСервере
Процедура ЗаполнитьКолонкуРезервПоОстаткамНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьКолонкуРезервПоОстаткам();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	НоменклатураВДокументахСервер.ЗаполнитьТипНоменклатурыВТабличнойЧасти(Объект);
	
КонецПроцедуры // ЗаполнитьКолонкуРезервПоОстаткамНаСервере()

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбораДоговора(Документ, Организация, Контрагент, Договор, ВидОперации)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	
	ПараметрыФормы = Новый Структура;
	КонтрагентВестиРасчетыПоДоговорам = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ВестиРасчетыПоДоговорам");
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", КонтрагентВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбораБанковскогоСчета(Договор, Организация, НациональнаяВалюта)
	
	РеквизитыДоговора = Справочники.ДоговорыКонтрагентов.РеквизитыРасчетовВУсловныхЕдиницах(Договор);
	
	СписокВалют = Новый СписокЗначений;
	СписокВалют.Добавить(РеквизитыДоговора.ВалютаРасчетов);
	СписокВалют.Добавить(НациональнаяВалюта);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РасчетыВУсловныхЕдиницах", РеквизитыДоговора.РасчетыВУсловныхЕдиницах);
	ПараметрыФормы.Вставить("Владелец", Организация);
	ПараметрыФормы.Вставить("СписокВалют", СписокВалют);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура ОбработатьИзменениеВидаОперации()
	
	Объект.Материалы.Очистить();
	
	Объект.Договор = Справочники.ДоговорыКонтрагентов.ПоДокументуКонтрагентуОрганизацииИВидуОперации(
		Объект.Ссылка, Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеДоговора(ДанныеДоговора = Неопределено)
	
	ДоговорПередИзменением = Договор;
	Договор = Объект.Договор;
	
	Если ДанныеДоговора = Неопределено Тогда
		ДанныеДоговора = ДанныеДоговораДляИзменения(ДатаДокумента, Объект.Договор);
	КонецЕсли;
	
	Если ДоговорПередИзменением <> Объект.Договор Тогда
		
		
		ИзменилсяВидЦен = Объект.ВидЦенКонтрагента <> ДанныеДоговора.ВидЦенКонтрагента И ЗначениеЗаполнено(ДанныеДоговора.ВидЦенКонтрагента);
		ВопросВидЦен = ЗначениеЗаполнено(Объект.Договор) И ИзменилсяВидЦен;
		
		ВалютаРасчетовПередИзменением = ВалютаРасчетов;
		ВалютаРасчетов = ДанныеДоговора.ВалютаРасчетов;
		
		НовыйДоговорИВалютаРасчетов = ЗначениеЗаполнено(Объект.Договор) И ЗначениеЗаполнено(ВалютаРасчетов) 
			И Объект.Договор <> ДоговорПередИзменением И ВалютаРасчетовПередИзменением <> ДанныеДоговора.ВалютаРасчетов;
		ОткрытьФормуЦеныИВалюты = НовыйДоговорИВалютаРасчетов И Объект.ВалютаДокумента <> ДанныеДоговора.ВалютаРасчетов
			И Объект.Запасы.Количество() > 0;
		
		ПараметрыДокумента = Новый Структура;
		ПараметрыДокумента.Вставить("ДоговорПередИзменением", ДоговорПередИзменением);
		ПараметрыДокумента.Вставить("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением);
		ПараметрыДокумента.Вставить("ДанныеДоговора", ДанныеДоговора);
		ПараметрыДокумента.Вставить("ВопросВидЦен", ВопросВидЦен);
		ПараметрыДокумента.Вставить("ОткрытьФормуЦеныИВалюты", ОткрытьФормуЦеныИВалюты);
		ПараметрыДокумента.Вставить("ИзменилсяВидЦен", ИзменилсяВидЦен);
		ПараметрыДокумента.Вставить("ПересчетНеобходим", Объект.Запасы.Количество() > 0);
		
		СпособЗаполненияСтавкиНДСДоИзменения = СпособЗаполненияСтавкиНДС;
		СпособЗаполненияСтавкиНДС = ДанныеДоговора.СпособЗаполненияСтавкиНДС;
		Если СпособЗаполненияСтавкиНДСДоИзменения <> СпособЗаполненияСтавкиНДС Тогда 
			ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
		КонецЕсли;
		
		ОбработатьИзменениеВидаЦенИВалютыРасчетов(ПараметрыДокумента);
	Иначе
		ПараметрыДокумента = Новый Структура;
		ПараметрыДокумента.Вставить("ДоговорПередИзменением", ДоговорПередИзменением);
		ПараметрыДокумента.Вставить("ВалютаРасчетовПередИзменением", ДанныеДоговора.ВалютаРасчетов);
		ПараметрыДокумента.Вставить("ДанныеДоговора", ДанныеДоговора);
		ИзменилсяВидЦен = Объект.ВидЦенКонтрагента <> ДанныеДоговора.ВидЦенКонтрагента И ЗначениеЗаполнено(ДанныеДоговора.ВидЦенКонтрагента);
		ВопросВидЦен = ЗначениеЗаполнено(Объект.Договор) И ИзменилсяВидЦен;
		ПараметрыДокумента.Вставить("ВопросВидЦен", ВопросВидЦен);
		ПараметрыДокумента.Вставить("ОткрытьФормуЦеныИВалюты", Ложь);
		ПараметрыДокумента.Вставить("ИзменилсяВидЦен", ИзменилсяВидЦен);
		ПараметрыДокумента.Вставить("ПересчетНеобходим", Объект.Запасы.Количество() > 0);
		
		ОбработатьИзменениеВидаЦенИВалютыРасчетов(ПараметрыДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьИОстаткиВзаиморасчетов()
	
	ВидимостьОстатокВзаиморасчетов = НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.Контрагент);
	
	Если ВидимостьОстатокВзаиморасчетов
		Или Элементы.ОстатокВзаиморасчетов.Видимость <> ВидимостьОстатокВзаиморасчетов Тогда
		ОбновитьВидимостьИОстаткиВзаиморасчетовСервер(ВидимостьОстатокВзаиморасчетов)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьИОстаткиВзаиморасчетовСервер(Знач ВидимостьОстатокВзаиморасчетов)
	
	Элементы.ОстатокВзаиморасчетов.Видимость = ВидимостьОстатокВзаиморасчетов;
	Элементы.Контрагент.АвтоМаксимальнаяШирина = НЕ ВидимостьОстатокВзаиморасчетов;
	
	Если ВидимостьОстатокВзаиморасчетов Тогда
		Элементы.ОстатокВзаиморасчетов.Заголовок = РаботаСКонтрагентамиУНФ.ЗаголовокНадписиВзаиморасчетов(Контрагент);
	КонецЕсли;
	
КонецПроцедуры

// Обработать изменения по кнопке цены и валюты завершение.
// 
// Параметры:
//  РезультатФормыЦеныИВалюта - см. ЦеныИВалютаКлиентСервер.РезультатФормыЦеныИВалюта
//  ДополнительныеПараметры - Структура
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатФормыЦеныИВалюта, ДополнительныеПараметры) Экспорт
	
	// Перезаполняем табличную часть "Запасы" если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(РезультатФормыЦеныИВалюта) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РезультатФормыЦеныИВалюта.БылиВнесеныИзменения Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если Объект.ВалютаДокумента <> РезультатФормыЦеныИВалюта.ВалютаДокумента Тогда
		Объект.БанковскийСчет = Неопределено;
	КонецЕсли;
	
	Объект.ВалютаДокумента = РезультатФормыЦеныИВалюта.ВалютаДокумента;
	Объект.Курс = РезультатФормыЦеныИВалюта.КурсРасчетов;
	Объект.Кратность = РезультатФормыЦеныИВалюта.КратностьРасчетов;
	Объект.НалогообложениеНДС = РезультатФормыЦеныИВалюта.НалогообложениеНДС;
	Объект.СуммаВключаетНДС = РезультатФормыЦеныИВалюта.СуммаВключаетНДС;
	Объект.НДСВключатьВСтоимость = РезультатФормыЦеныИВалюта.НДСВключатьВСтоимость;
	Объект.ВидЦенКонтрагента = РезультатФормыЦеныИВалюта.ВидЦенКонтрагента;
	
	// Пересчитываем цены по виду цен.
	Если РезультатФормыЦеныИВалюта.ПерезаполнитьЦены Тогда
		ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенКонтрагента(ЭтотОбъект, "Запасы");
	КонецЕсли;
	
	// Пересчитываем цены по валюте.
	Если Не РезультатФормыЦеныИВалюта.ПерезаполнитьЦены И РезультатФормыЦеныИВалюта.ПересчитатьЦены Тогда
		ЦенообразованиеКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтотОбъект,
			ДополнительныеПараметры.ВалютаРасчетовПередИзменением, "Запасы", РезультатФормыЦеныИВалюта.КурсПересчетаЦен);
	КонецЕсли;
	
	// Пересчитываем сумму если изменился признак Налогообложение НДС.
	Если РезультатФормыЦеныИВалюта.НалогообложениеНДС <> РезультатФормыЦеныИВалюта.ПредНалогообложениеНДС Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	КонецЕсли;
	
	// Пересчитываем сумму если изменился признак "Сумма включает НДС".
	Если НЕ РезультатФормыЦеныИВалюта.ПерезаполнитьЦены
		И НЕ РезультатФормыЦеныИВалюта.СуммаВключаетНДС = РезультатФормыЦеныИВалюта.ПредСуммаВключаетНДС Тогда
		ЦенообразованиеКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтотОбъект, "Запасы");
	КонецЕсли;
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций); 
	
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение()

&НаКлиенте
Процедура ОпределитьНеобходимостьПересчетаДокументаПоУсловиямДоговора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		
		Если ДополнительныеПараметры.ПересчетНеобходим Тогда
			
			ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенКонтрагента(ЭтотОбъект, "Запасы");
			ПересчитатьПлатежныйКалендарь();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьНеобходимостьПересчетаДокументаПоУсловиямДоговора()

&НаКлиенте
Процедура УстановитьВозможностьРедактированияСпискомЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Пока Объект.ПлатежныйКалендарь.Количество() > 1 Цикл
		Объект.ПлатежныйКалендарь.Удалить(Объект.ПлатежныйКалендарь.Количество()-1);
	КонецЦикла;
	
	Элементы.РедактироватьСписком.Пометка = НЕ Элементы.РедактироватьСписком.Пометка;
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущейСтраницейЗавершениеЗаказа()
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗавершениеЗаказа;
	
КонецПроцедуры

// Процедура заполняет Запасы по спецификации.
//
&НаСервере
Процедура ЗаполнитьПоСпецификацииНаСервере()
	
	ОбновитьРеквизитыТЧПоШапке(Объект);
	
	Документ = РеквизитФормыВЗначение("Объект");
	СтекСпецификацийУзлов = Новый Массив;
	Документ.ЗаполнитьТабличнуюЧастьПоСпецификации(СтекСпецификацийУзлов);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	НоменклатураВДокументахСервер.ЗаполнитьТипНоменклатурыВТабличнойЧасти(Объект);
	
КонецПроцедуры // ЗаполнитьМатериальныеЗатратыПоСпецификацииНаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьРеквизитыТЧПоШапке(Объект)
	
	Если Объект.ПоложениеЗаказаПокупателя<>ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			СтрокаТабличнойЧасти.ЗаказПокупателя = Объект.ЗаказПокупателя;
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТипаОснованияЗавершение(ВыбранноеИмяФормы, Параметры) Экспорт
	
	Если ВыбранноеИмяФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура;
	ОткрытьФорму(ВыбранноеИмяФормы.Значение, ПараметрыФормы, ЭтотОбъект, , , , ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснованиеЗавершение(ВыбранноеЗначение, Параметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДокументОснование = ВыбранноеЗначение;
	Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(
		ВыбранноеЗначение);
	Модифицированность = Истина;
	
	ЗаполнитьПоОснованиюНачало();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюНачало()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
	
	ПоказатьВопрос(
		ОписаниеОповещения,
		НСтр("ru = 'Заполнить документ по выбранному основанию?'"),
		РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоДокументу(Объект.ДокументОснование);
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций); 
	ПересчитатьПлатежныйКалендарь();
	УстановитьВидимостьДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСтрокеТЧЗапасы(ПараметрПерехода)

	Если Объект.Ссылка <> ПараметрПерехода.ЗаказПоставщику Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", ПараметрПерехода.Номенклатура);
	ПараметрыОтбора.Вставить("Характеристика", ПараметрПерехода.Характеристика);
	
	НайденныеСтроки = Объект.Запасы.НайтиСтроки(ПараметрыОтбора);
	Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
		ТекущийЭлемент = Элементы[ПараметрПерехода.ИмяКолонки];
		Элементы.Запасы.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнформацияОбОтборе(Знач НаименованиеМетки)
	
	Возврат НоменклатураВДокументахСервер.ИнформацияОбОтборе(НаименованиеМетки);
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстСодержания(Знач Номенклатура, Знач Характеристика)
	Возврат ТабличныеЧастиУНФ.ТекстСодержания(Номенклатура, Характеристика);
КонецФункции

&НаКлиенте
Процедура ЗапасыПодтверждениеСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗапрашиватьСбросКоличества = Результат.ЗапрашиватьСбросКоличества;
		Если НЕ ЗапрашиватьСбросКоличества Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		КонецЕсли;
		Если Результат.СбрасыватьКоличество Тогда
			НовоеКоличество = Результат.НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = ДополнительныеПараметры.Количество;
		КонецЕсли;
	Иначе
		НовоеКоличество = ДополнительныеПараметры.Количество;
	КонецЕсли;
	
	ЗапасыНоменклатураПриИзмененииПродолжить(ДополнительныеПараметры.Элемент, НовоеКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество, Цена = 0, СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	КонецЕсли;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("ВидОперации", Объект.ВидОперации);
	СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
	
	Если ЗначениеЗаполнено(Объект.ВидЦенКонтрагента) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦенКонтрагента", Объект.ВидЦенКонтрагента);
		СтруктураДанные.Вставить("Коэффициент", 1);
		
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
	СтрокаТабличнойЧасти.Содержание = "";
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	СтрокаТабличнойЧасти.ТипНоменклатуры = СтруктураДанные.ТипНоменклатуры;
	СтрокаТабличнойЧасти.Количество = НовоеКоличество;
	
	Если ЗначениеЗаполнено(Цена) Тогда
		СтрокаТабличнойЧасти.Цена = Цена;
	Иначе
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	КонецЕсли;

	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если СтруктураДанные.ИспользоватьХарактеристики Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
			СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
		КонецЕсли;

	КонецЕсли;
	
	Если СтруктураДанные.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
	ИначеЕсли Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв) 
			И ПодборНоменклатурыИзСписка, СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв, СтруктураДанные.Склад);
	Иначе
		СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
	КонецЕсли;
		
	ПодборНоменклатурыИзСписка = Ложь;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();

КонецПроцедуры

&НаКлиенте
Процедура МатериалыПодтверждениеСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗапрашиватьСбросКоличества = Результат.ЗапрашиватьСбросКоличества;
		Если НЕ ЗапрашиватьСбросКоличества Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		КонецЕсли;
		Если Результат.СбрасыватьКоличество Тогда
			НовоеКоличество = Результат.НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = ДополнительныеПараметры.Количество;
		КонецЕсли;
	Иначе
		НовоеКоличество = ДополнительныеПараметры.Количество;
	КонецЕсли;
	
	МатериалыНоменклатураПриИзмененииПродолжить(ДополнительныеПараметры.Элемент, НовоеКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество)

	СтрокаТабличнойЧасти = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Компания);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	СтрокаТабличнойЧасти.Количество = НовоеКоличество;
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если СтруктураДанные.ИспользоватьХарактеристики Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
			СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв) 
			И ПодборНоменклатурыИзСписка, СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв, СтруктураДанные.Склад);
	Иначе
		СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
	КонецЕсли;
		
	ПодборНоменклатурыИзСписка = Ложь;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНастройкиИзмененияКоличества()
	
	НастройкиКоличества = ДокументыУНФКлиентСервер.ПараметрыСбросаКоличества();
	ДокументыУНФ.ЗаполнитьНастройкиКоличества(НастройкиКоличества);
	Возврат НастройкиКоличества;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоЗаказуПокупателяЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьПоДокументу(Объект.ЗаказПокупателя);
		УстановитьВидимостьДоговора();
		
		ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
			УчетВалютныхОпераций); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, СокрЛП(ДополнительныеПараметры.ТекШтрихкод), СокрЛП(Результат));
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) И ТипШтрихкодаПоддерживается(ТекШтрихкод) Тогда
		ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
	КонецЕсли;
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВесЗавершение(Параметры) Экспорт
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоСпецификацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	
	КомандаЗаполнитьПоСпецификацииФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоСпецификацииФрагмент()
	
	ЗаполнитьПоСпецификацииНаСервере();
	
КонецПроцедуры // КомандаЗаполнитьПоСпецификации()

&НаКлиенте
Процедура НастройкаСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НастройкиКоличества = ПолучитьНастройкиИзмененияКоличества();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиКоличества);
	
КонецПроцедуры

&НаСервере
Процедура СтруктурнаяЕдиницаРезервПриИзмененииСервер(ИмяТЧ)
	
	ПолученныеУслуги = НоменклатураВДокументахСервер.НоменклатураТабличнойЧастиПоТипу(
		Объект, Перечисления.ТипыНоменклатуры.Услуга);
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		Если ПолученныеУслуги.Найти(СтрокаТабличнойЧасти.Номенклатура) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
	КонецЦикла;
	Если ИмяТЧ = "Материалы" 
		ИЛИ Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПоставщику.ЗаказНаПереработку") 
		ИЛИ Объект.ПоложениеСклада <> ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		// Особенность работы заказа на переработку - склад материалов может быть в ТЧ, склад продукции - всегда в шапке
		Для каждого СтрокаТабличнойЧасти Из Объект.Материалы Цикл
			СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройки(ПередаватьВидДокумента)
	
	ЗаполнениеОбъектовУНФКлиент.ЗаполнитьПустыеПоложения(Объект, "ПоложениеДатыПоступления, ПоложениеЗаказаПокупателя");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПоложениеДатыПоступленияВЗаказеПоставщику", Объект.ПоложениеДатыПоступления);
	ПараметрыФормы.Вставить("ПоложениеЗаказаПокупателяВДокументахПоступления", Объект.ПоложениеЗаказаПокупателя);
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПоставщику.ЗаказНаПереработку")
		ИЛИ Объект.УчетПотребностиПоСкладам Тогда
		ПараметрыФормы.Вставить("ПоложениеСкладаВДокументахПоступления", Объект.ПоложениеСклада);
	КонецЕсли; 
	ПараметрыФормы.Вставить("БылиВнесеныИзменения", Ложь);
	Если ПередаватьВидДокумента Тогда
		ПараметрыФормы.Вставить("ВидДокумента", НСтр("ru = 'заказ поставщику'"));
	КонецЕсли;	
	
	ПараметрыФормы.Вставить("ПоказыватьКолонкуСодержаниеВЗаказеПоставщику",
		ПоказыватьКолонкуСодержаниеВЗаказеПоставщику); 
		
	ОткрытьФорму("ОбщаяФорма.ШапкаТабличнаяЧасть", ПараметрыФормы, , , , ,
		Новый ОписаниеОповещения("ШапкаТабличнаяЧастьЗавершение", ЭтотОбъект));	

КонецПроцедуры

&НаКлиенте
Процедура ШапкаТабличнаяЧастьЗавершение(СтруктураНастройкаДокумента, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(СтруктураНастройкаДокумента) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	Если Не СтруктураНастройкаДокумента.БылиВнесеныИзменения Тогда
		Возврат;
	КонецЕсли;

	Если Объект.ПоложениеДатыПоступления <> СтруктураНастройкаДокумента.ПоложениеДатыПоступленияВЗаказеПоставщику Тогда
		Объект.ПоложениеДатыПоступления = СтруктураНастройкаДокумента.ПоложениеДатыПоступленияВЗаказеПоставщику;
		ЗаполнениеОбъектовУНФКлиент.ОбработатьИзменениеПоложения(Объект, "Запасы", "ДатаПоступления",
			"ПоложениеДатыПоступления");
	КонецЕсли;

	Если Объект.ПоложениеЗаказаПокупателя
		<> СтруктураНастройкаДокумента.ПоложениеЗаказаПокупателяВДокументахПоступления Тогда
		Объект.ПоложениеЗаказаПокупателя = СтруктураНастройкаДокумента.ПоложениеЗаказаПокупателяВДокументахПоступления;
		Если Объект.ПоложениеЗаказаПокупателя <> ПредопределенноеЗначение(
			"Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
			Если Объект.Запасы.Количество() > 0 Тогда
				Объект.ЗаказПокупателя = ЗаполнениеОбъектовУНФКлиент.ЗначениеДляШапки(Объект.Запасы, "ЗаказПокупателя");
			ИначеЕсли Объект.Материалы.Количество() > 0 Тогда
				Объект.ЗаказПокупателя = ЗаполнениеОбъектовУНФКлиент.ЗначениеДляШапки(Объект.Материалы,
					"ЗаказПокупателя");
			КонецЕсли;
		КонецЕсли;
		Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			СтрокаТабличнойЧасти.ЗаказПокупателя = Объект.ЗаказПокупателя;
		КонецЦикла;
		Для Каждого СтрокаТабличнойЧасти Из Объект.Материалы Цикл
			СтрокаТабличнойЧасти.ЗаказПокупателя = Объект.ЗаказПокупателя;
		КонецЦикла;
	КонецЕсли;

	Если СтруктураНастройкаДокумента.Свойство("ПоложениеСкладаВДокументахПоступления") 
		И Объект.ПоложениеСклада <> СтруктураНастройкаДокумента.ПоложениеСкладаВДокументахПоступления Тогда
		Объект.ПоложениеСклада = СтруктураНастройкаДокумента.ПоложениеСкладаВДокументахПоступления;
		Если Объект.ПоложениеСклада <> ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПоставщику.ЗаказНаПереработку") Тогда
				Объект.СтруктурнаяЕдиницаРезерв = ЗаполнениеОбъектовУНФКлиент.ЗначениеДляШапки(Объект.Материалы, 
					"СтруктурнаяЕдиницаРезерв");
			Иначе
				Объект.СтруктурнаяЕдиницаРезерв = ЗаполнениеОбъектовУНФКлиент.ЗначениеДляШапки(Объект.Запасы, 
					"СтруктурнаяЕдиницаРезерв");
			КонецЕсли;
		КонецЕсли;
		Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			Если СтрокаТабличнойЧасти.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
		КонецЦикла;
		Для Каждого СтрокаТабличнойЧасти Из Объект.Материалы Цикл
			СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
		КонецЦикла;
	КонецЕсли;

	Если ТипЗнч(СтруктураНастройкаДокумента) = Тип("Структура") 
		И СтруктураНастройкаДокумента.БылиИзмененыПерсональныеНастройки Тогда
		НастройкиКоличества = ПолучитьНастройкиИзмененияКоличества();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиКоличества);
	КонецЕсли;

	ПоказыватьКолонкуСодержаниеВЗаказеПоставщику = 
		СтруктураНастройкаДокумента.ПоказыватьКолонкуСодержаниеВЗаказеПоставщику;
		
	УстановитьВидимостьОтПользовательскихНастроек(ЭтотОбъект);
		
	// ГрупповоеИзменениеСтрок
	ЗаполнитьСписокДействий();

КонецПроцедуры

&НаКлиенте
Функция ТипШтрихкодаПоддерживается(Штрихкод, ВыводитьПредупреждение = Истина)
	
	ТипыМарок = Новый Массив;
	ТипыМарок.Добавить("CODE128");
	ТипыМарок.Добавить("EAN128");
	ЗначениеТипаШтрихкода = МенеджерОборудованияКлиентСервер.ОпределитьТипШтрихкода(Штрихкод);
	
	ТипШтрихкодаПоддерживается = ТипыМарок.Найти(ЗначениеТипаШтрихкода) = Неопределено;
	
	Если НЕ ТипШтрихкодаПоддерживается И ВыводитьПредупреждение Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Считывание кодов маркировки в документе не поддерживается'"));
	КонецЕсли;
	
	Возврат ТипШтрихкодаПоддерживается;
	
КонецФункции

&НаКлиенте
Процедура ПослеВыполненияФоновогоЗадания(Прогресс, ДополнительныеПараметры) Экспорт
	
	Если НЕ Прогресс = Неопределено Тогда
		ОбработатьПодготовленныеДанные(Прогресс.АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеобходимостьПодключенияОбработчикаОжидания(ДлительнаяОперация, СтруктураПараметров = Неопределено)
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ПослеВыполненияФоновогоЗадания(ДлительнаяОперация, СтруктураПараметров);
		
	Иначе
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеВыполненияФоновогоЗадания", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Идет загрузка данных.'");
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуПоказатьДублиСтроки()
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Запасы.ОтборСтрок = Неопределено Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
		
		НайденныеСтроки = Объект.Запасы.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() <= 1 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Дубли строки не найдены.'"), , "Объект.Запасы");
			Возврат;
		КонецЕсли;
		
		Элементы.Запасы.ОтборСтрок = Новый ФиксированнаяСтруктура(ПараметрыОтбора);
		Элементы.ЗапасыКонтекстноеМенюПоказатьДублиСтроки.Пометка = Истина;
		
		Элементы.ДекорацияОтборПоДублям.Заголовок = ИнформацияОбОтборе(
		СтрШаблон(НСтр("ru = 'Дубли строки %1'"), СтрокаТабличнойЧасти.НомерСтроки));
		
		Элементы.ДекорацияОтборПоДублям.Видимость = Истина;
		
	Иначе
		Элементы.Запасы.ОтборСтрок = Неопределено;
		Элементы.ЗапасыКонтекстноеМенюПоказатьДублиСтроки.Пометка = Ложь;
		Элементы.ДекорацияОтборПоДублям.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

#Область Подбор

&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	ЕстьСтруктурнаяЕдинцаВПодборе = НЕ ТаблицаДляЗагрузки.Колонки.Найти("СтруктурнаяЕдиница") = Неопределено;
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		Если ИмяТабличнойЧасти = "Запасы" Тогда
			ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "ДатаПоступления", "ПоложениеДатыПоступления");
		КонецЕсли; 
		ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "ЗаказПокупателя", "ПоложениеЗаказаПокупателя");
		
		СтруктураДанныеНоменклатуры = Новый Структура();
		СтруктураДанныеНоменклатуры.Вставить("Номенклатура", СтрокаЗагрузки.Номенклатура);
		СтруктураДанныеНоменклатуры.Вставить("Характеристика", СтрокаЗагрузки.Характеристика);
		СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
		СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
		
		Если НоваяСтрока.Свойство("ТипНоменклатуры") Тогда
			НоваяСтрока.ТипНоменклатуры = СтруктураДанные.ТипНоменклатуры;
		КонецЕсли;
		
		Если Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке 
			И НЕ ЗапрещеноИзменятьПоложениеСклада(ИмяТабличнойЧасти) Тогда
			Если СтруктураДанные.ЭтоЗапас И ЕстьСтруктурнаяЕдинцаВПодборе 
				И ЗначениеЗаполнено(СтрокаЗагрузки.СтруктурнаяЕдиница) 
				И СтрокаЗагрузки.СтруктурнаяЕдиница <> Объект.СтруктурнаяЕдиницаРезерв Тогда
				Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
				УстановитьВидимостьОтПользовательскихНастроек(ЭтотОбъект);
			КонецЕсли;
			ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "СтруктурнаяЕдиницаРезерв", "ПоложениеСклада");
		КонецЕсли;
		Если СтруктураДанные.ЭтоЗапас И ЕстьСтруктурнаяЕдинцаВПодборе 
			И СкладВТЧ(Объект.ВидОперации, Объект.ПоложениеСклада, ИмяТабличнойЧасти)
			И СтруктураДанные.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга Тогда
			НоваяСтрока.СтруктурнаяЕдиницаРезерв = СтрокаЗагрузки.СтруктурнаяЕдиница;
		КонецЕсли; 
		
		Если НоваяСтрока.Свойство("Пометка") Тогда
			
			НоваяСтрока.Пометка = Истина;
			
		КонецЕсли;
		
		// Характеристики
		НоваяСтрока.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
		НоваяСтрока.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
		НоваяСтрока.ЗаполнениеХарактеристикиПроверено = Истина;
		
		Если СтруктураДанные.ИспользоватьХарактеристики
			Тогда
			НоваяСтрока.Характеристика = СтруктураДанные.Характеристика;
		КонецЕсли;
		// Конец Характеристики
		
		Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
			
			Характеристика = Неопределено;
			Если НоваяСтрока.Свойство("Характеристика") Тогда
				
				Характеристика = НоваяСтрока.Характеристика;
				
			КонецЕсли;
			
			НоваяСтрока.Спецификация = Справочники.Спецификации.СпецификацияПоУмолчанию(НоваяСтрока.Номенклатура,
				Характеристика);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Ручная скидка - заполнение полей ввода на форме
	СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект);
	// Конец Ручная скидка
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

&НаСервере
Функция ЗапрещеноИзменятьПоложениеСклада(ИмяТабличнойЧасти)

	Если НЕ ПолучитьФункциональнуюОпцию("РазрешитьСкладыВТабличныхЧастях") Тогда
		Возврат Истина;	
	КонецЕсли;
	Если ИмяТабличнойЧасти = "Запасы" 
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПоставщику.ЗаказНаПереработку") Тогда
		Возврат Истина;	
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СкладВТЧ(ВидОперации, ПоложениеСклада, ИмяТабличнойЧасти)

	Если ИмяТабличнойЧасти = "Запасы" 
		И ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПоставщику.ЗаказНаПереработку") Тогда
		Возврат Ложь;	
	КонецЕсли;
	Возврат ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");
	
КонецФункции

#КонецОбласти

#Область УправлениеВнешнимВидомФормы

&НаКлиенте
Процедура УстановитьВидимостьИДоступностьДатаЗапрета()
	
	Если НЕ ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РазрешеноРедактированиеДокумента Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФормаГруппаПроведениеДатаЗапрета.Видимость = ТолькоПросмотр И РазрешеноРедактированиеДокумента;
	Элементы.ФормаПровестиИЗакрытьДатаЗапрета.КнопкаПоУмолчанию = Элементы.ФормаГруппаПроведениеДатаЗапрета.Видимость;
	
	Если ТолькоПросмотр И РазрешеноРедактированиеДокумента Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаЗаписать", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПровестиИЗакрыть", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПровести", "Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьИДоступность()
	
	УстановитьВидимостьИДоступностьДатаЗапрета();
	УстановитьДоступностьРезервирования();
	ЗаказНаПереработку = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПоставщику.ЗаказНаПереработку"));
	ЗаказЗавершен = (Объект.СостояниеЗаказа = ПредопределенноеЗначение("Справочник.СостоянияЗаказовПоставщикам.Завершен"));
	
	РедактироватьСписком = Элементы.РедактироватьСписком.Пометка;
	Элементы.ПлатежныйКалендарьСтрокой.Видимость = Не РедактироватьСписком;
	Элементы.СписокПлатежныйКалендарь.Видимость = РедактироватьСписком;
	Элементы.ПлатежныйКалендарьПоля.Доступность = Объект.ЗапланироватьОплату;
	Элементы.ГруппаМатериалы.Видимость = ЗаказНаПереработку;
	Элементы.ЗапасыСпецификация.Видимость = ЗаказНаПереработку;
	Элементы.СтруктурнаяЕдиницаРезервЗапасыКонтекстноеМенюШапкаТабличнаяЧасть.Видимость = НЕ ЗаказНаПереработку;
	Элементы.БанковскийСчет.Видимость = (Объект.ТипДенежныхСредств = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Безналичные"));
	Элементы.Касса.Видимость = (Объект.ТипДенежныхСредств = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Наличные"));
	Элементы.БанковскийСчет.ОтметкаНезаполненного = Объект.ЗапланироватьОплату И Не ЗначениеЗаполнено(Объект.БанковскийСчет);
	Элементы.Касса.ОтметкаНезаполненного = Объект.ЗапланироватьОплату И Не ЗначениеЗаполнено(Объект.Касса);
	Элементы.СтраницаЗавершениеЗаказа.Видимость = ЗаказЗавершен;
	Элементы.РедактироватьСписком.Доступность = Объект.ЗапланироватьОплату;
	Элементы.ПлатежныйКалендарьОбщаяГруппа.Доступность = Объект.ЗапланироватьОплату;

	// Номенклатура.
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПоставщику.ЗаказНаЗакупку") Тогда
		
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
		МассивЗапасыИРасходы = Новый ФиксированныйМассив(НовыйМассив);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", МассивЗапасыИРасходы));
		НовыйМассив.Добавить(Новый ПараметрВыбора("Дополнительно.ОграничениеТипа", МассивЗапасыИРасходы));
		// Наборы
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.ЭтоНабор", Ложь));
		// Конец Наборы
		НовыйМассив.Добавить(Новый ПараметрВыбора("Дополнительно.ТипВладельца", "ЗаказПоставщику"));
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыНоменклатура.ПараметрыВыбора = НовыеПараметры;
		
		Элементы.ГруппаЗапасы.Заголовок = НСтр("ru = 'Товары и услуги'");
		
	Иначе
		
		НовыйМассив = Новый Массив();
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
		НовыйМассив.Добавить(НовыйПараметр);
		// Наборы
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.ЭтоНабор", Ложь));
		// Конец Наборы
		НовыйМассив.Добавить(Новый ПараметрВыбора("Дополнительно.ТипВладельца", "ЗаказПоставщику"));
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыНоменклатура.ПараметрыВыбора = НовыеПараметры;
		
		Элементы.ГруппаЗапасы.Заголовок = НСтр("ru = 'Товары'");
		
		ПроверитьТаблицуЗапасыНаНаличиеУслуг();
		
	КонецЕсли;
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтотОбъект, "Запасы");
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтотОбъект, "Материалы");
	УстановитьВидимостьОтПользовательскихНастроек(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьТаблицуЗапасыНаНаличиеУслуг()

	Ссылки = Объект.Запасы.Выгрузить( , "Номенклатура").ВыгрузитьКолонку("Номенклатура");
	ТипыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Ссылки, "ТипНоменклатуры");

	Для Каждого СтрокаЗапасы Из Объект.Запасы Цикл 
		Если не СтрокаЗапасы.Номенклатура.Пустая() Тогда
			Если ТипыНоменклатуры[СтрокаЗапасы.Номенклатура].ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
				СтрокаЗапасы.Номенклатура = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоговора()
	
	Элементы.Договор.Видимость = Контрагент_ВестиРасчетыПоДоговорам;
	
КонецПроцедуры // УстановитьВидимостьДоговора()

&НаСервере
Процедура ОпределитьВестиРасчетыПоДоговорам()
	Контрагент_ВестиРасчетыПоДоговорам = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент,
		"ВестиРасчетыПоДоговорам");
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьОтПользовательскихНастроек(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	ЭтоПереработка = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПоставщику.ЗаказНаПереработку"));
	
	Если Объект.ПоложениеДатыПоступления = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		Элементы.ДатаПоступления.Видимость = Ложь;
		Элементы.ЗапасыДатаПоступления.Видимость = Истина;
	Иначе
		Элементы.ДатаПоступления.Видимость = Истина;
		Элементы.ЗапасыДатаПоступления.Видимость = Ложь;	
	КонецЕсли;	
	
	Если Объект.ПоложениеЗаказаПокупателя = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		Элементы.ГруппаОснование.Видимость = Ложь;
		Элементы.ЗапасыЗаказПокупателя.Видимость = Истина;
		Элементы.МатериалыЗаказПокупателя.Видимость = Истина;	
	Иначе
		Элементы.ГруппаОснование.Видимость = Истина;
		Элементы.ЗапасыЗаказПокупателя.Видимость = Ложь;	
		Элементы.МатериалыЗаказПокупателя.Видимость = Ложь;	
	КонецЕсли;	
	
	Если Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		Элементы.СтруктурнаяЕдиницаРезервЗапасы.Видимость = ЭтоПереработка;
		Элементы.ЗапасыСтруктурнаяЕдиницаРезерв.Видимость = Объект.УчетПотребностиПоСкладам И НЕ ЭтоПереработка;
		Элементы.СтруктурнаяЕдиницаРезерв.Видимость = Ложь;
		Элементы.МатериалыСтруктурнаяЕдиницаРезерв.Видимость = ЭтоПереработка;
	Иначе
		Элементы.СтруктурнаяЕдиницаРезервЗапасы.Видимость = Объект.УчетПотребностиПоСкладам ИЛИ ЭтоПереработка;
		Элементы.ЗапасыСтруктурнаяЕдиницаРезерв.Видимость = Ложь;
		Элементы.СтруктурнаяЕдиницаРезерв.Видимость = ЭтоПереработка;
		Элементы.МатериалыСтруктурнаяЕдиницаРезерв.Видимость = Ложь;
	КонецЕсли; 

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСодержание", "Видимость",
		Форма.ПоказыватьКолонкуСодержаниеВЗаказеПоставщику);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтруктуруВидовОпераций()
	
	Если ПолучитьФункциональнуюОпцию("ПередачаСырьяВПереработку") Тогда
		
		Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийЗаказПоставщику.ЗаказНаПереработку);
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьСоответствиеВидовОпераций()

&НаСервере
Процедура ЗаполнитьСписокДокументОснование()
	
	СписокДокументОснование.Очистить();
	СписокДокументОснование.Добавить("Документ.ЗаказПокупателя.ФормаВыбора", НСтр("ru = 'Заказ покупателя'"));
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство") Тогда
		СписокДокументОснование.Добавить("Документ.ЗаказНаПроизводство.ФормаВыбора", НСтр(
			"ru = 'Заказ на производство'"));
	КонецЕсли;
	СписокДокументОснование.Добавить("Документ.СчетНаОплатуПоставщика.ФормаВыбора", НСтр(
		"ru = 'Счет на оплату (полученный)'"));
	
КонецПроцедуры

// Процедура устанавливает доступность флага резервирования в зависимости от выбранного способа оплаты.
//
&НаКлиенте
Процедура УстановитьДоступностьРезервирования()
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипДенежныхСредств)
		ИЛИ Объект.ТипДенежныхСредств = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Безналичные") И НЕ ЗначениеЗаполнено(Объект.БанковскийСчет) 
		ИЛИ Объект.ТипДенежныхСредств = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Наличные") И НЕ ЗначениеЗаполнено(Объект.Касса) Тогда
		
		Элементы.РезервироватьДенежныеСредства.Доступность = Ложь;
		
		Если Объект.РезервироватьДенежныеСредства Тогда
			Объект.РезервироватьДенежныеСредства = Ложь;
		КонецЕсли;
		
	Иначе
		Элементы.РезервироватьДенежныеСредства.Доступность = Истина;
	КонецЕсли;
	
	
КонецПроцедуры

// ИнтеграцияГИСМ
&НаСервере
Процедура СформироватьТекстЗаявкаНаВыпускКиЗГИСМ()
	
	ИнтеграцияГИСМУНФ.СформироватьТекстЗаявкаНаВыпускКиЗ(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтроки(ИмяТЧ, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	НоменклатураВДокументахСервер.ЗаполнитьТипНоменклатурыВТабличнойЧасти(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВставленныеСтроки(ИмяТЧ, КоличествоВставленных)
	
	Если ИмяТЧ = "Запасы" Тогда
		
		Количество = Объект[ИмяТЧ].Количество();
		
		Для Итератор = 1 По КоличествоВставленных Цикл
			
			Строка = Объект[ИмяТЧ][Количество - Итератор];
			
			СтруктураДанные = Новый Структура;
			СтруктураДанные.Вставить("Организация", Объект.Организация);
			СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
			СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
			СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
			
			СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
			
			Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(Строка);
			
		КонецЦикла;
		
		ПересчитатьПлатежныйКалендарь();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
		СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		Если ИмяТЧ = "Запасы" Тогда
			Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
			Строка.ТипНоменклатуры = СтруктураДанные.ТипНоменклатуры;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		КонецЕсли;
		
		Если СтруктураДанные.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
			Строка.СтруктурнаяЕдиницаРезерв = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();	
		ИначеЕсли СкладВТЧ(Объект.ВидОперации, Объект.ПоложениеСклада, ИмяТЧ) Тогда
			Строка.СтруктурнаяЕдиницаРезерв = СтруктураДанные.Склад;
		Иначе
			Строка.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ГрупповоеИзменениеСтрок

&НаСервере
Процедура УстановитьПометку(Пометка)
	
	Элементы.ЗапасыСнятьФлажки.Видимость = НЕ Элементы.ЗапасыСнятьФлажки.Видимость;
	Элементы.ЗапасыУстановитьФлажки.Видимость = НЕ Элементы.ЗапасыУстановитьФлажки.Видимость;
	
	Для каждого Строка Из Объект.Запасы Цикл
		Строка.Пометка = Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСкрытьПанельРедактирования(ИзменяетДанные = Неопределено)
	
	Перем СостояниеПерехода;
	ГрупповоеИзменениеСтрокСервер.ПоказатьСкрытьПанельРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокСервер(),
		СостояниеПерехода,
		ИзменяетДанные);
	
	Элементы.Скидки.Доступность = (СостояниеПерехода=0);

	УправлениеРезервнымиКопиямиТаблицы(СостояниеПерехода, ИзменяетДанные);
	НастроитьЭлементыОтменыТоваров();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеРезервнымиКопиямиТаблицы(СостояниеПерехода, ИзменяетДанные)
	
	ГрупповоеИзменениеСтрокСервер.УправлениеРезервнымиКопиями(
		ЭтотОбъект,
		Объект.Запасы,
		ЗапасыРезервнаяКопияТаблицыАдрес,
		СостояниеПерехода,
		ИзменяетДанные);
		
	ГрупповоеИзменениеСтрокСервер.УправлениеРезервнымиКопиями(
		ЭтотОбъект,
		Объект.ОтмененныеЗапасы,
		ОтмененныеЗапасыРезервнаяКопияТаблицыАдрес,
		СостояниеПерехода,
		ИзменяетДанные);

КонецПроцедуры

&НаКлиенте
Процедура НастроитьОформлениеПанелиРедактирования(Состояние, СохранитьИзменения = Неопределено)
	
	ГрупповоеИзменениеСтрокКлиент.НастроитьОформлениеПанелиРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокКлиент(),
		Состояние,
		ЗапасыИзменениеСтрокЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекущееДействиеИзмененияСтрок()
	
	Если ЗапасыИзменениеСтрокДействие = ЗапасыИзменениеСтрокДействиеПриОткрытии Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьТекущееДействиеИзмененияСтрокСервер();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьТекущееДействиеИзмененияСтрокСервер()
	
	ГрупповоеИзменениеСтрокСервер.СохранитьНастройки(НаборЭлементовГрупповогоИзмененияСтрокСервер());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТаблицу()
	
	ОбработатьТаблицуНаСервере();
	
	ИзменяемыеСтроки = Объект.Запасы.НайтиСтроки(Новый Структура("Пометка", Истина));
	Для каждого Строка Из ИзменяемыеСтроки Цикл
		
		Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") 
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьКоличествоКратноЕдиницеИзмерения") Тогда
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(Строка);
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСкидкуСуммой") Тогда
			
			ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(Строка, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
			
			// Ручные скидки
			СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект);
			// Конец Ручные скидки
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьСуммы") Тогда
			
			// Цена.
			Если Строка.Количество <> 0 Тогда
				Строка.Цена = Строка.Сумма / Строка.Количество;
			КонецЕсли;
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(Строка);

			// Платежный календарь.
			ПересчитатьПлатежныйКалендарь();
			
			// Ручная скидка - заполнение полей ввода на форме
			СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект);
			// Конец Ручная скидка
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
			
			ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(Строка, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));

		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			
			Если Строка.Количество <> 0 Тогда
				Строка.Цена = Строка.Сумма / Строка.Количество;
			КонецЕсли;
			
			ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(Строка, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС)); 
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОтменитьСтроки") Тогда
			
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(Строка.ПолучитьИдентификатор());
			ОбработатьОтменуТоваров(МассивСтрок, ЗапасыИзменениеСтрокЗначение, "ГрупповоеИзменение");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОтменитьСтроки") Тогда
		ОтображатьГруппуОтмененных = Истина;
		НастроитьЭлементыОтменыТоваров();
	КонецЕсли;
	
	// Платежный календарь
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьТаблицуНаСервере()
	
	ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
		ЭтотОбъект,
		Объект.Запасы,
		ЗапасыИзменениеСтрокДействие,
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит,
		ЗапасыИзменениеСтрокЗначение,
		"ЗапасыНоменклатура");
	
	Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
		
		ИзменяемыеСтроки = Объект.Запасы.НайтиСтроки(Новый Структура("Пометка", Истина));
		Для каждого Строка Из ИзменяемыеСтроки Цикл
			
			СтруктураДанные = Новый Структура;
			СтруктураДанные.Вставить("Организация", Объект.Организация);
			СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
			СтруктураДанные.Вставить("Характеристика", Строка.Характеристика);
			СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
			СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
			
			Если ЗначениеЗаполнено(Объект.ВидЦенКонтрагента) Тогда
				
				СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
				СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
				СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
				СтруктураДанные.Вставить("ВидЦенКонтрагента", Объект.ВидЦенКонтрагента);
				СтруктураДанные.Вставить("Коэффициент", 1);
				
			КонецЕсли;
			
			СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
			
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
			Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
				Строка.Количество = 1;
			КонецЕсли;
			Строка.Цена = СтруктураДанные.Цена;
			Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
			Строка.Содержание = "";
			
			Если ТипЗнч(ЗапасыИзменениеСтрокЗначение) = Тип("ДокументСсылка.ЗаказПокупателя") 
				И ПолучитьФункциональнуюОпцию("РезервированиеЗапасов") Тогда
				Если Объект.ПоложениеЗаказаПокупателя <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти
					И ЗапасыИзменениеСтрокЗначение <> Объект.ЗаказПокупателя Тогда
					Объект.ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
					УстановитьВидимостьОтПользовательскихНастроек(ЭтотОбъект);
				КонецЕсли;
				Строка.ЗаказПокупателя = ЗапасыИзменениеСтрокЗначение;
			КонецЕсли; 
			
			Если СтруктураДанные.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
				Строка.СтруктурнаяЕдиницаРезерв = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();	
			ИначеЕсли СкладВТЧ(Объект.ВидОперации, Объект.ПоложениеСклада, "Запасы") Тогда
				Строка.СтруктурнаяЕдиницаРезерв = СтруктураДанные.Склад;
			Иначе
				Строка.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	НоменклатураВДокументахСервер.ЗаполнитьТипНоменклатурыВТабличнойЧасти(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС(ЭтоОткрытие = Ложь)
	
	НалогообложениеПередИзменением = Объект.НалогообложениеНДС;
	Если Не ЗначениеЗаполнено(СпособЗаполненияСтавкиНДС) Тогда
		Объект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Объект.Организация,, Объект.Дата);
	ИначеЕсли СпособЗаполненияСтавкиНДС = ПредопределенноеЗначение("Перечисление.СпособыЗаполненияСтавкиНДС.БезНДС") Тогда
		Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС");
	Иначе
		Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС");
	КонецЕсли;
	
	Если НЕ НалогообложениеПередИзменением = Объект.НалогообложениеНДС ИЛИ ЭтоОткрытие Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

&НаКлиенте
Процедура ОпределитьОбъектИзменений()
	
	Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьСуммы") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "СтавкаНДС";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСтавкаНДС";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьДатуПоступления") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "ДатаПоступления";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыДатаПоступления";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки")
		ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОтменитьСтроки") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "ПричинаОтмены";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыПричинаОтмены";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НаборЭлементовГрупповогоИзмененияСтрокКлиент()
	
	НаборЭлементов = Новый Структура();
	НаборЭлементов.Вставить("ИмяТЧ", "Запасы");
	НаборЭлементов.Вставить("ДокументСсылка", Объект.Ссылка);
	НаборЭлементов.Вставить("ПанельРедактирования", Элементы.ГруппаЗапасыИзменениеСтрок);
	НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ЗапасыВыполнитьДействие);
	НаборЭлементов.Вставить("КолонкаПометка", Элементы.ЗапасыПометка);
	НаборЭлементов.Вставить("КолонкаНомерСтроки", Элементы.ЗапасыНомерСтроки);
	НаборЭлементов.Вставить("Действие", ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("ДействиеЭлемент", Элементы.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("Значение", ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ЗначениеЭлемент", Элементы.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ОбъектИзменений", ЗапасыИзменениеСтрокОбъектИзмененийЭлемент);
	НаборЭлементов.Вставить("КолонкаОбъектИзменений", ?(ЗначениеЗаполнено(ЗапасыИзменениеСтрокОбъектИзмененийЭлемент), Элементы[ЗапасыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	Возврат НаборЭлементов;
	
КонецФункции

&НаСервере
Функция НаборЭлементовГрупповогоИзмененияСтрокСервер()
	
	НаборЭлементов = Новый Структура();
	НаборЭлементов.Вставить("ИмяТЧ", "Запасы");
	НаборЭлементов.Вставить("ДокументСсылка", Объект.Ссылка);
	НаборЭлементов.Вставить("ПанельРедактирования", Элементы.ГруппаЗапасыИзменениеСтрок);
	НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ЗапасыВыполнитьДействие);
	НаборЭлементов.Вставить("КнопкаИзменитьСтроки", Элементы.ЗапасыИзменитьСтроки);
	НаборЭлементов.Вставить("КолонкаПометка", Элементы.ЗапасыПометка);
	НаборЭлементов.Вставить("КолонкаНомерСтроки", Элементы.ЗапасыНомерСтроки);
	НаборЭлементов.Вставить("Действие", ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("ДействиеЭлемент", Элементы.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("Значение", ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ЗначениеЭлемент", Элементы.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ОбъектИзменений", ЗапасыИзменениеСтрокОбъектИзмененийЭлемент);
	НаборЭлементов.Вставить("КолонкаОбъектИзменений", ?(ЗначениеЗаполнено(ЗапасыИзменениеСтрокОбъектИзмененийЭлемент), Элементы[ЗапасыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	Возврат НаборЭлементов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокДействий()
	
	РазрешеноРедактированиеЦенДокументов = УправлениеДоступомУНФ.РазрешеноРедактированиеЦенДокументов();
	
	Действия = Новый Массив;
	Если РазрешеноРедактированиеЦенДокументов Тогда
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент);
	КонецЕсли;
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОкруглитьСуммы);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду);
	Если РазрешеноРедактированиеЦенДокументов Тогда
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам);
	КонецЕсли;
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОкруглитьКоличествоКратноЕдиницеИзмерения);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС);
	Если Объект.ПоложениеДатыПоступления = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьДатуПоступления);
	КонецЕсли;
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки);
	
	Если ИспользоватьПроцессыСостояний Тогда
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОтменитьСтроки);
	КонецЕсли;
	
	Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Очистить();
	Для каждого Действие Из Действия Цикл
		ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
		Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
	КонецЦикла;
	
	Если ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьДатуПоступления
		И Действия.Найти(ЗапасыИзменениеСтрокДействие) = Неопределено Тогда
		
		ЗапасыИзменениеСтрокДействие = Неопределено;
		ГрупповоеИзменениеСтрокСервер.НастроитьИсходнуюПанельРедактирования(ЗапасыИзменениеСтрокЗначение,
			НаборЭлементовГрупповогоИзмененияСтрокСервер());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Доставка

&НаСервере
Процедура УстановитьВидимостьДанныхПоДоставке()
	ДоставкаСервер.ОбновитьДанныеПоДоставкеИзСервиса(Объект.Ссылка,"ГруппаДоставка", Объект.Организация, ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОтменаТоваровУслуг

&НаСервере
Процедура ЗаполнитьДанныеПоОтменеТоваров()
	
	Для Каждого Строка Из Объект.Запасы Цикл
		Строка.ПричинаОтменыДатаЗапрета = НСтр("ru = 'выбрать'"); 
	КонецЦикла;
	
	Если Объект.ОтмененныеЗапасы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОтменненныйТовар Из Объект.ОтмененныеЗапасы Цикл
		ОтменненныйТовар.ВернутьТовар = НСтр("ru = 'вернуть'");
		ОтменненныйТовар.Редактируется = Ложь;
		ОтменненныйТовар.ИндексСвязаннойСтрокиЗапаса = 0;
		ОтменненныйТовар.ПричинаОтменыДатаЗапрета = НСтр("ru = 'выбрать'");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыОтменыТоваров()
	
	Массив = Новый Массив(); 
	Массив.Добавить(Тип("СправочникСсылка.ПричиныОтменыЗаказовПоставщикам")); 
	ОписаниеТиповПричин = Новый ОписаниеТипов(Массив);
	
	Элементы.ЗапасыПричинаОтмены.ОграничениеТипа = ОписаниеТиповПричин;
	
	РедактируемыеТовары = Объект.ОтмененныеЗапасы.НайтиСтроки(Новый Структура("Редактируется", Истина));
	КоличествоРедактируемыхТоваров = РедактируемыеТовары.Количество();
	
	КоличествоОтмененныхВТаблице = Объект.ОтмененныеЗапасы.НайтиСтроки(Новый Структура("Редактируется", Ложь));
	КоличествоОтмененных = Объект.ОтмененныеЗапасы;
	
	Если КоличествоРедактируемыхТоваров <> 0 Тогда
		ЗаголовокГруппыОтмененныхТоваров = СтрШаблон(НСтр("ru ='%1, редактируется: %2'"), КоличествоОтмененныхВТаблице.Количество(), КоличествоРедактируемыхТоваров);
	Иначе
		ЗаголовокГруппыОтмененныхТоваров = СтрШаблон(НСтр("ru = '%1'"), КоличествоОтмененныхВТаблице.Количество());
	КонецЕсли;
	
	РежимРедактированияЗапасов = КоличествоРедактируемыхТоваров > 0;
	
	Элементы.ГруппаОтмененныеТоварыУслуги.Видимость = КоличествоОтмененных.Количество() <> 0 ИЛИ ОтображатьГруппуОтмененных;
	
	Если РежимРедактированияЗапасов Тогда
		Элементы.ЗапасыГруппаОтменаТоваров.ФиксацияВТаблице = ФиксацияВТаблице.Право;		
		Элементы.ЗапасыОтменен.ФиксацияВТаблице = ФиксацияВТаблице.Право;
		Элементы.ЗапасыОтменен.Гиперссылка = Истина;		
		Элементы.ЗапасыОтменен.ГиперссылкаЯчейки = Истина;
		Элементы.ЗапасыКоличествоОтмены.Гиперссылка = Истина;		
		Элементы.ЗапасыКоличествоОтмены.ГиперссылкаЯчейки = Истина;
	Иначе
		Элементы.ЗапасыГруппаОтменаТоваров.ФиксацияВТаблице = ФиксацияВТаблице.Нет;
		Элементы.ЗапасыОтменен.ФиксацияВТаблице = ФиксацияВТаблице.Нет;
	КонецЕсли;
	
	Элементы.ДекорацияРежимРедактирования.Видимость = РежимРедактированияЗапасов;
	Элементы.ЗапасыПричинаОтменыДатаЗапрета.Видимость = ТолькоПросмотр;
	Элементы.ЗапасыПричинаОтмены.Видимость = НЕ Элементы.ЗапасыПричинаОтменыДатаЗапрета.Видимость;
	
	Элементы.ОтмененныеЗапасыПричинаОтменыДатаЗапрета.Видимость = ТолькоПросмотр;
	Элементы.ОтмененныеЗапасыПричинаОтмены.Видимость = НЕ Элементы.ЗапасыПричинаОтменыДатаЗапрета.Видимость;
	
	Элементы.ГруппаОтмененныеТоварыУслуги.Скрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВернутьЗапасы(ДанныеЗапаса, ПричинаОтмены = Неопределено)
	
	ЗапасОтменен = ДанныеЗапаса.Отменен = 0;
	
	Если ЗапасОтменен Тогда
		
		ДанныеЗапаса.Отменен = 1;
		
		ДанныеЗапаса.НоменклатураДоОтмены = ДанныеЗапаса.Номенклатура;
		ДанныеЗапаса.КоличествоДоОтмены   = ДанныеЗапаса.Количество;
		ДанныеЗапаса.ЦенаДоОтмены		  = ДанныеЗапаса.Цена;
		ДанныеЗапаса.ЕдиницаИзмеренияДоОтмены = ДанныеЗапаса.ЕдиницаИзмерения;
		
		Если ДанныеЗапаса.Свойство("Партия") Тогда
			ДанныеЗапаса.ПартияДоОтмены 	  = ДанныеЗапаса.Партия;
		КонецЕсли;
		
		Если ДанныеЗапаса.Свойство("Серия") Тогда
			ДанныеЗапаса.СерияДоОтмены 		  = ДанныеЗапаса.Серия;
		КонецЕсли;
		
		Если ДанныеЗапаса.Свойство("Характеристика") Тогда
			ДанныеЗапаса.ХарактеристикаДоОтмены = ДанныеЗапаса.Характеристика;
		КонецЕсли;
				
		Если НЕ ЗначениеЗаполнено(ДанныеЗапаса.ПричинаОтмены) Тогда
			ДанныеЗапаса.ПричинаОтмены = ВыбраннаяПричинаОтменыЗапаса;
			Если ЗначениеЗаполнено(ВыбраннаяПричинаОтменыЗапаса) Тогда
				ДанныеЗапаса.ПричинаОтменыДатаЗапрета = Строка(ВыбраннаяПричинаОтменыЗапаса);
			Иначе
				ДанныеЗапаса.ПричинаОтменыДатаЗапрета = НСтр("ru = 'выбрать'");
			КонецЕсли;
		КонецЕсли;
		
		ДанныеЗапаса.ЦенаДоОтменыСтрокой = Формат(ДанныеЗапаса.Цена, "ЧДЦ=2");
		ДанныеЗапаса.КоличествоДоОтменыСтрокой = Формат(ДанныеЗапаса.Количество, "ЧДЦ=3");

		НовыйОтмененныйЗапас = Объект.ОтмененныеЗапасы.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйОтмененныйЗапас, ДанныеЗапаса);
		НовыйОтмененныйЗапас.Редактируется = Истина;
		
		ДанныеЗапаса.Номенклатура = НоменклатураОтмены;
		
		ДанныеЗапаса.КлючСвязиОтмененные         = "КлючСвязи_"+ИндексКлючаСвязиОтмененные;
		НовыйОтмененныйЗапас.КлючСвязиОтмененные = "КлючСвязи_"+ИндексКлючаСвязиОтмененные;
		
		ИндексКлючаСвязиОтмененные = ИндексКлючаСвязиОтмененные +1;
		ДанныеЗапаса.Цена = 0;
		РассчитатьСуммуВСтрокеТабличнойЧасти(ДанныеЗапаса);
		ЗапасыНоменклатураПриИзмененииПродолжить(Элементы.ЗапасыНоменклатура, 0, ,ДанныеЗапаса);
		
	Иначе
		
		ДанныеЗапаса.Отменен = 0;
		ДанныеЗапаса.НоменклатураДоОтмены = Неопределено;
		ДанныеЗапаса.КоличествоДоОтмены   = Неопределено;
		ДанныеЗапаса.ЦенаДоОтмены		  = Неопределено;
		ДанныеЗапаса.ХарактеристикаДоОтмены = Неопределено;
		ДанныеЗапаса.ЦенаДоОтменыСтрокой = Неопределено;
		ДанныеЗапаса.КоличествоДоОтменыСтрокой = Неопределено;
		ДанныеЗапаса.ЕдиницаИзмеренияДоОтмены = Неопределено;
		ДанныеЗапаса.ПричинаОтмены = Неопределено;
		ДанныеЗапаса.ПричинаОтменыДатаЗапрета = НСтр("ru = выбрать");
		
		СтруктураПоиска = Новый Структура("КлючСвязиОтмененные", ДанныеЗапаса.КлючСвязиОтмененные);
		СвязаннаяСтрока = Объект.ОтмененныеЗапасы.НайтиСтроки(СтруктураПоиска);
		
		ДанныеЗапаса.КлючСвязиОтмененные = Неопределено;
		
		Если СвязаннаяСтрока.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеЗапаса,СвязаннаяСтрока[0],,"ПричинаОтмены");
		
		ЦенаЗапаса = ДанныеЗапаса.Цена;
		РассчитатьСуммуВСтрокеТабличнойЧасти(ДанныеЗапаса);
		ЗапасыНоменклатураПриИзмененииПродолжить(Элементы.ЗапасыНоменклатура, ДанныеЗапаса.Количество, ЦенаЗапаса, ДанныеЗапаса);
		Объект.ОтмененныеЗапасы.Удалить(СвязаннаяСтрока[0]); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеОтмененнойСтроки()
	
	// 1.Условное оформление строк в таблице
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПутьКТЧ = Элементы.Запасы.ПутьКДанным;
	
	ИсключаяПоля = Новый Массив;
	ИсключаяПоля.Добавить("ЗапасыКоличествоОтмены");
	ИсключаяПоля.Добавить("ЗапасыОтменен");
	ИсключаяПоля.Добавить("ЗапасыПричинаОтмены");
	ИсключаяПоля.Добавить("ЗапасыЕдиницаИзмеренияДоОтмены");
	ИсключаяПоля.Добавить("ЗапасыПричинаОтменыДатаЗапрета");
	
	ЗаполнитьРекурсивноПоляУсловногоОформления(Элемент.Поля, Элементы.Запасы.ПодчиненныеЭлементы, ИсключаяПоля);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(Элемент.Отбор, 
		ПутьКТЧ + ".Отменен", 1);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(Элемент, "ЦветТекста", 
		ЦветаСтиля.ЦветРамки);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(Элемент, "Шрифт", 
		ШрифтыСтиля.ЗачеркнутыйШрифтБЭД);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(Элемент, "ОтметкаНезаполненного", 
		Ложь);
		
	// 2. Подмена данных в строке
	ПоляДляОформления = Новый Соответствие;
	ПоляДляОформления.Вставить("ЗапасыХарактеристика", ".ХарактеристикаДоОтмены");
	ПоляДляОформления.Вставить("ЗапасыЦена", ".ЦенаДоОтменыСтрокой");
	ПоляДляОформления.Вставить("ЗапасыНоменклатура", ".НоменклатураДоОтмены");
	ПоляДляОформления.Вставить("ЗапасыКоличество", ".КоличествоДоОтменыСтрокой");
	
	Для Каждого Поле Из ПоляДляОформления Цикл
		Элемент = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(Элемент.Отбор, 
			ПутьКТЧ + ".Отменен", 
			1);
		РаботаСФормой.ДобавитьОформляемыеПоля(Элемент, Поле.Ключ);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(Элемент, "Текст", 
			Новый ПолеКомпоновкиДанных(ПутьКТЧ + Поле.Значение));
	КонецЦикла;
	
	// 3. Условное оформление таблицы отмененных
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ПутьКТЧ = Элементы.ОтмененныеЗапасы.ПутьКДанным;
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ЭлементОформления.Отбор, 
			ПутьКТЧ + ".Редактируется", 
			Истина);
	РаботаСФормой.ДобавитьОформляемыеПоля(ЭлементОформления, "ОтмененныеЗапасыВернутьТовар");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(ЭлементОформления, "Текст", 
			 НСтр("ru = '<редактируется>'"));
 
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ИсключаяПоля = Новый Массив;
	ЗаполнитьРекурсивноПоляУсловногоОформления(ЭлементОформления.Поля, Элементы.ОтмененныеЗапасы.ПодчиненныеЭлементы, ИсключаяПоля);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ЭлементОформления.Отбор, 
			ПутьКТЧ + ".Редактируется", 
			Истина);
			
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(ЭлементОформления, "ЦветТекста", 
			 ЦветаСтиля.ЦветРамки);
			 
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ПутьКТЧ = Элементы.Запасы.ПутьКДанным;
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ЭлементОформления.Отбор, 
			ПутьКТЧ + ".Отменен", 
			0);
	РаботаСФормой.ДобавитьОформляемыеПоля(ЭлементОформления, "ЗапасыПричинаОтмены");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(ЭлементОформления, "ОтметкаНезаполненного", Ложь);
			
КонецПроцедуры

// Процедура заполняет всеми подчиненными полями (с учетом вложенности в группы) оформляемые поля условного оформления
// Пример вызова: ЗаполнитьРекурсивноПоляУсловногоОформления(ЭлементУО.Поля, Элементы.Товары.ПодчиненныеЭлементы).
//
// Параметры:
//	ОформляемыеПоляКомпоновкиДанных	- ОформляемыеПоляКомпоновкиДанных -
//	КоллекцияЭлементов - ЭлементыФормы -
//	ИсключаяПоля - Массив -
//	             - Строка -
//	             - Неопределено - значение по умолчанию Неопределено, массив имен элементов, которые не нужно добавлять в оформляемые поля.
// 
&НаСервере
Процедура ЗаполнитьРекурсивноПоляУсловногоОформления(ОформляемыеПоляКомпоновкиДанных, КоллекцияЭлементов, Знач ИсключаяПоля = Неопределено) Экспорт
	
	Если ТипЗнч(ИсключаяПоля) = Тип("Строка") Тогда
		ИсключаяПоля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсключаяПоля);
	КонецЕсли;
	
	Для Каждого Поле Из КоллекцияЭлементов Цикл
		Если ТипЗнч(Поле) = Тип("ПолеФормы") Тогда
			Если ИсключаяПоля = Неопределено
				Или ИсключаяПоля.Найти(Поле.Имя) = Неопределено Тогда
					ПолеЭлемента = ОформляемыеПоляКомпоновкиДанных.Элементы.Добавить();
					ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Поле.Имя);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Поле) = Тип("ГруппаФормы")Тогда	
			ЗаполнитьРекурсивноПоляУсловногоОформления(ОформляемыеПоляКомпоновкиДанных, Поле.ПодчиненныеЭлементы, ИсключаяПоля);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьОтмененныеЗапасы()
	
	ОтмененныеЗапасы = Объект.Запасы.НайтиСтроки(Новый Структура("Отменен", 1));
	
	Если ОтмененныеЗапасы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОтмененныйЗапас Из ОтмененныеЗапасы Цикл
		Объект.Запасы.Удалить(ОтмененныйЗапас);
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ДополнитьДанныеОтмененныхТоваров(ТекущийОбъект)
	
	Для Каждого ОтмененныйЗапас Из ТекущийОбъект.ОтмененныеЗапасы Цикл
		
		Если НЕ ЗначениеЗаполнено(ОтмененныйЗапас.ДатаОтмены) Тогда
			ОтмененныйЗапас.ДатаОтмены = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОтмененныйЗапас.Автор) Тогда
			ОтмененныйЗапас.Автор = 
			УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойОтветственный");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОтмененныйЗапас.СостояниеОтмены) Тогда
			ОтмененныйЗапас.СостояниеОтмены = ТекущийОбъект.СостояниеЗаказа;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтмененныеЗапасыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент = Элементы.ОтмененныеЗапасыВернутьТовар Тогда
		
	СтрокаТабличнойЧасти = Элементы.ОтмененныеЗапасы.ТекущиеДанные; 
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		СтрокаЗапаса = Объект.Запасы.НайтиСтроки(Новый Структура("КлючСвязиОтмененные", 
		СтрокаТабличнойЧасти.КлючСвязиОтмененные));
		
		Если СтрокаТабличнойЧасти.Редактируется И СтрокаЗапаса.Количество() <> 0 Тогда
			
			НоваяСтрока = СтрокаЗапаса[0];
			ОтменитьВернутьЗапасы(НоваяСтрока);
			Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Элементы.Запасы.ВыделенныеСтроки.Очистить();
			Элементы.Запасы.ВыделенныеСтроки.Добавить(НоваяСтрока.ПолучитьИдентификатор());
			
			Модифицированность = Истина;
			ОтображатьГруппуОтмененных = Истина;
			НастроитьЭлементыОтменыТоваров();
			Возврат;
			
		Иначе
			НоваяСтрока = Объект.Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти,,"ПричинаОтмены");
			Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Элементы.Запасы.ВыделенныеСтроки.Очистить();
			Элементы.Запасы.ВыделенныеСтроки.Добавить(НоваяСтрока.ПолучитьИдентификатор());
			
			Партия = Неопределено;
			
			
			ЗапасыНоменклатураПриИзмененииПродолжить(Элементы.ЗапасыНоменклатура, НоваяСтрока.Количество, НоваяСтрока.Цена, НоваяСтрока);
			
			Индекс = Объект.ОтмененныеЗапасы.Индекс(СтрокаТабличнойЧасти);
			Объект.ОтмененныеЗапасы.Удалить(Индекс);
			Модифицированность = Истина;
			
			ОтображатьГруппуОтмененных = Истина;
			НастроитьЭлементыОтменыТоваров();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ОтмененныеЗапасыПричинаОтменыДатаЗапрета Тогда
		
		СтрокаТабличнойЧасти = Элементы.ОтмененныеЗапасы.ТекущиеДанные;
		Если СтрокаТабличнойЧасти = Неопределено Тогда 
			Возврат 
		КонецЕсли;
		
		ПараметрыПричины = Новый Структура("РежимВыбора", Истина);
		ОткрытьФорму("Справочник.ПричиныОтменыЗаказовПоставщикам.ФормаВыбора", ПараметрыПричины, Элементы.ОтмененныеЗапасы);
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтмененныеЗапасыПередУдалением(Элемент, Отказ)
	
	Для Каждого ИдентификаторСтроки Из Элемент.ВыделенныеСтроки Цикл
		Строка = Объект.ОтмененныеЗапасы.НайтиПоИдентификатору(ИдентификаторСтроки);
		СвязанныйЗапас = Объект.Запасы.НайтиСтроки(Новый Структура("КлючСвязиОтмененные", Строка.КлючСвязиОтмененные));
		Если СвязанныйЗапас.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОтменитьВернутьЗапасы(СвязанныйЗапас[0]);
	КонецЦикла;
	ОтображатьГруппуОтмененных = Истина;
	НастроитьЭлементыОтменыТоваров();

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьНеотгруженныеСтроки(Команда)
	
	ОписаниеЗавершения = Новый ОписаниеОповещения("ОбработатьВыборПричиныОтмены", ЭтотОбъект);
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора", Истина);
	ОткрытьФорму("Справочник.ПричиныОтменыЗаказовПоставщикам.ФормаВыбора",ПараметрыФормыВыбора,,,,,ОписаниеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПричиныОтмены(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.ЗапасыНеПолучено.Видимость = Истина;
	
	ОтменитьНеотгруженныеТоварыСервер(); 
	
	БылиОтменененыСтроки = Ложь;
	
	Для Каждого Строка Из Объект.Запасы Цикл
		
		Если Строка.НеПолучено = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.ПричинаОтмены = Результат;
		
		Если Строка.Отменен = 0 Тогда
			БылиОтменененыСтроки = Истина;
			ОтменитьВернутьЗапасы(Строка);
			ОтображатьГруппуОтмененных = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ БылиОтменененыСтроки Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Заказ полностью отгружен'"));
	КонецЕсли;
	
	НастроитьЭлементыОтменыТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПричиныОтменыОтмененные(Результат, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = Элементы.ОтмененныеЗапасы.ВыделенныеСтроки;
	
	Если ТипЗнч(ВыделенныеСтроки) <> Тип("Массив") И ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		
		СтрокаТабличнойЧасти = Объект.ОтмененныеЗапасы.НайтиПоИдентификатору(Строка);
		СтрокаТабличнойЧасти.ПричинаОтмены = Результат;
		
		Если НЕ СтрокаТабличнойЧасти.Редактируется Тогда
			Продолжить;
		КонецЕсли;
	
		СтрокаЗапаса = Объект.Запасы.НайтиСтроки(Новый Структура("КлючСвязиОтмененные", СтрокаТабличнойЧасти.КлючСвязиОтмененные));
		Если СтрокаЗапаса.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
	
		СтрокаЗапаса[0].ПричинаОтмены = СтрокаТабличнойЧасти.ПричинаОтмены;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОтменитьНеотгруженныеТоварыСервер()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПоставщикамОстаткиИОбороты.Номенклатура КАК Номенклатура,
	|	ЗаказыПоставщикамОстаткиИОбороты.Характеристика КАК Характеристика,
	|	ЗаказыПоставщикамОстаткиИОбороты.КоличествоПриход КАК Заказано,
	|	ЗаказыПоставщикамОстаткиИОбороты.КоличествоРасход КАК Получено,
	|	ЗаказыПоставщикамОстаткиИОбороты.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.ОстаткиИОбороты(, , , , ЗаказПоставщику = &Заказ) КАК ЗаказыПоставщикамОстаткиИОбороты
	|ГДЕ
	|	ЗаказыПоставщикамОстаткиИОбороты.КоличествоКонечныйОстаток > 0";
	
	Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
	Результат = Запрос.Выполнить().Выгрузить();
	
	НеотгруженныеТоварыМассив = Новый Массив;
	Для Каждого Товар ИЗ Объект.Запасы Цикл
		
		ОстаткиПоТовару = Результат.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Товар.Номенклатура, Товар.Характеристика));
		
		Если ОстаткиПоТовару.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОстаткиПоТовару[0].КоличествоКонечныйОстаток = 0 Тогда
			Товар.НеПолучено = 0;
		КонецЕсли; 
		
		Если ОстаткиПоТовару[0].Заказано = Товар.Количество И ОстаткиПоТовару[0].КоличествоКонечныйОстаток > 0 Тогда
			Товар.НеПолучено = ОстаткиПоТовару[0].КоличествоКонечныйОстаток;
			Продолжить;
		КонецЕсли;
		
		Если ОстаткиПоТовару[0].Заказано > Товар.Количество И Товар.Количество < ОстаткиПоТовару[0].Получено Тогда
			ОстаткиПоТовару[0].Получено = ОстаткиПоТовару[0].Получено - Товар.Количество;
			Продолжить;
		КонецЕсли;
		
		Товар.НеПолучено = ОстаткиПоТовару[0].КоличествоКонечныйОстаток;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтмененныеЗапасыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
	ТекущийЗапас = Элементы.ОтмененныеЗапасы.ТекущиеДанные;
	Если ТекущийЗапас = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийЗапас.ПричинаОтмены = ВыбранноеЗначение;
	ТекущийЗапас.ПричинаОтменыДатаЗапрета = Строка(ВыбранноеЗначение);
	ВыбраннаяПричинаОтменыЗапаса = ВыбранноеЗначение;
	
	Если НЕ ТекущийЗапас.Редактируется Тогда
		Модифицированность = Истина;
		НастроитьЭлементыОтменыТоваров();
		Возврат;
	КонецЕсли;
	
	ИндексОтмененнегоЗапаса = Объект.Запасы.НайтиСтроки(Новый Структура("КлючСвязиОтмененные", ТекущийЗапас.КлючСвязиОтмененные));
	
	Если ИндексОтмененнегоЗапаса.Количество() = 0 Тогда
		Модифицированность = Истина;
		НастроитьЭлементыОтменыТоваров();
		Возврат;
	КонецЕсли;
	
	Для Каждого Запас Из ИндексОтмененнегоЗапаса Цикл
		Запас.ПричинаОтмены = ВыбраннаяПричинаОтменыЗапаса;
		Запас.ПричинаОтменыДатаЗапрета = ВыбраннаяПричинаОтменыЗапаса;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуТабличнойЧастиЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		Возврат 
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Параметры.СтрокаТабличнойЧасти;
	
	Если Результат <= 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Количество в новой строке должно быть больше нуля.'");
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Сообщить();
		Возврат
	КонецЕсли;
	
	Если Результат >= СтрокаТабличнойЧасти.Количество И СтрокаТабличнойЧасти.Отменен = 0  Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Количество в новой строке должно быть меньше чем в текущей.'");
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Сообщить();
		Возврат
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Отменен = 1 И Результат >= СтрокаТабличнойЧасти.КоличествоДоОтмены Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Количество в новой строке должно быть меньше чем в текущей.'");
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Сообщить();
		Возврат
	КонецЕсли;
	
	НоваяСтрока = Объект.Запасы.Вставить(СтрокаТабличнойЧасти.НомерСтроки);
	
	Если СтрокаТабличнойЧасти.Отменен = 1 Тогда
		
		КоличествоВСтроке = СтрокаТабличнойЧасти.Количество;
		
		ОтменитьВернутьЗапасы(СтрокаТабличнойЧасти); 
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество - Результат;
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТабличнойЧасти);
		
		НоваяСтрока.Отменен = 0;
		НоваяСтрока.Количество = Результат;
		ОтменитьВернутьЗапасы(НоваяСтрока);
		
		ОтображатьГруппуОтмененных = Истина;
		НастроитьЭлементыОтменыТоваров();
		
	Иначе 
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТабличнойЧасти);
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество - Результат;
		НоваяСтрока.Количество = Результат;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
	
	ПересчитатьПлатежныйКалендарь();	
	Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтменуТоваров(СтрокиОбработки, ПричинаОтмены = Неопределено, Действие = "ОтменаСтроки")
		
	Если ТипЗнч(СтрокиОбработки) <> Тип("Массив") И СтрокиОбработки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из СтрокиОбработки Цикл
		
		Если ТипЗнч(ВыделеннаяСтрока) = Тип("Число") Тогда
			СтрокаТабличнойЧасти = Объект.Запасы.НайтиПоИдентификатору(ВыделеннаяСтрока);;
		Иначе
			СтрокаТабличнойЧасти = ВыделеннаяСтрока;
		КонецЕсли;
		
		ОтменитьВернутьЗапасы(СтрокаТабличнойЧасти, ПричинаОтмены);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПлатежныйКалендарь

&НаКлиенте
Процедура ОбработчикПлатежныйКалендарьПроцентОплатыПриИзменении(Элемент)
	Если Элементы.РедактироватьСписком.Пометка Тогда
		ТекущаяСтрока = Элементы.СписокПлатежныйКалендарь.ТекущиеДанные;
	Иначе
		ТекущаяСтрока = Объект.ПлатежныйКалендарь[0];
	КонецЕсли;
	ПроцентОплатыИтог = Объект.ПлатежныйКалендарь.Итог("ПроцентОплаты");
	
	Если ПроцентОплатыИтог > 100 Тогда
		ТекущаяСтрока.ПроцентОплаты = ТекущаяСтрока.ПроцентОплаты - (ПроцентОплатыИтог - 100);
	КонецЕсли;
	
	ТекущаяСтрока.СуммаОплаты = Окр(Объект.Запасы.Итог("Всего") * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
	ТекущаяСтрока.СуммаНДСОплаты = Окр(Объект.Запасы.Итог("СуммаНДС") * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
	
	Если Объект.ПлатежныйКалендарь.Итог("ПроцентОплаты") = 100
		И Объект.ПлатежныйКалендарь.Итог("СуммаОплаты") <> Объект.Запасы.Итог("Всего") Тогда
		ОбработатьИтогиПлатежныйКалендарь();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПлатежныйКалендарьСуммаОплатыПриИзменении(Элемент)
	Если Элементы.РедактироватьСписком.Пометка Тогда
		ТекущаяСтрока = Элементы.СписокПлатежныйКалендарь.ТекущиеДанные;
	Иначе
		ТекущаяСтрока = Объект.ПлатежныйКалендарь[0];
	КонецЕсли;
	ЗапасыИтог = Объект.Запасы.Итог("Всего");
	ПлатежныйКалендарьИтог = Объект.ПлатежныйКалендарь.Итог("СуммаОплаты");
	
	Если ПлатежныйКалендарьИтог > ЗапасыИтог Тогда
		ТекущаяСтрока.СуммаОплаты = ТекущаяСтрока.СуммаОплаты - (ПлатежныйКалендарьИтог - ЗапасыИтог);
	КонецЕсли;
	
	ТекущаяСтрока.ПроцентОплаты = ?(ЗапасыИтог = 0, 0, Окр(ТекущаяСтрока.СуммаОплаты / ЗапасыИтог * 100, 2, 1));
	ТекущаяСтрока.СуммаНДСОплаты = Окр(Объект.Запасы.Итог("СуммаНДС") * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
	
	Если Объект.ПлатежныйКалендарь.Итог("ПроцентОплаты") = 100
		И Объект.ПлатежныйКалендарь.Итог("СуммаОплаты") <> Объект.Запасы.Итог("Всего") Тогда
		ОбработатьИтогиПлатежныйКалендарь();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПлатежныйКалендарьСуммаНДСОплатыПриИзменении(Элемент)
	Если Элементы.РедактироватьСписком.Пометка Тогда
		ТекущаяСтрока = Элементы.СписокПлатежныйКалендарь.ТекущиеДанные;
	Иначе
		ТекущаяСтрока = Объект.ПлатежныйКалендарь[0];
	КонецЕсли;
	
	ЗапасыИтог = Объект.Запасы.Итог("СуммаНДС");
	ПлатежныйКалендарьИтог = Объект.ПлатежныйКалендарь.Итог("СуммаНДСОплаты");
	
	Если ПлатежныйКалендарьИтог > ЗапасыИтог Тогда
		ТекущаяСтрока.СуммаНДСОплаты = ТекущаяСтрока.СуммаНДСОплаты - (ПлатежныйКалендарьИтог - ЗапасыИтог);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработатьИтогиПлатежныйКалендарь()
	
	ТаблицаРаспределения = Объект.ПлатежныйКалендарь.Выгрузить();
	РасчетыПроведениеДокументов.РаспределитьСуммуПоКолонкеТаблицы(Объект.Запасы.Итог("Всего"), ТаблицаРаспределения,
		"СуммаОплаты", "ПроцентОплаты");
	Объект.ПлатежныйКалендарь.Загрузить(ТаблицаРаспределения);
	
КонецПроцедуры

#КонецОбласти

#Область АвтоподборКонтактов

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_ОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_АвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, Параметры, Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// ЭДО
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДОНажатие(Элемент, СтандартнаяОбработка)
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект, СтандартнаяОбработка);
КонецПроцедуры
// Конец ЭДО

// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
&НаСервере
Процедура ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	ТоварыДобавлены = Ложь;
	Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТовары = Объект.Запасы.Добавить();
		НоваяСтрокаТовары.Номенклатура = СтрокаТаблицы.Номенклатура;
		ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрокаТовары, Объект, "ЗаказПокупателя", "ПоложениеЗаказаПокупателя");
		ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрокаТовары, Объект, "ДатаПоступления", "ПоложениеДатыПоступления");
		ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрокаТовары, Объект, "СтруктурнаяЕдиницаРезерв", "ПоложениеСклада");
		НоваяСтрокаТовары.ТипНоменклатуры = СтрокаТаблицы.Номенклатура.ТипНоменклатуры;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			НоваяСтрокаТовары.Характеристика = СтрокаТаблицы.Характеристика;
			
		КонецЕсли;
		
		НоваяСтрокаТовары.Цена = СтрокаТаблицы.Цена;
		НоваяСтрокаТовары.Количество = СтрокаТаблицы.Количество;
		
		Если ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения") Тогда
			
			НоваяСтрокаТовары.ЕдиницаИзмерения = СтрокаТаблицы.ЕдиницаИзмерения;
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрокаТовары.Номенклатура) Тогда
			
			НоваяСтрокаТовары.ЕдиницаИзмерения = СтрокаТаблицы.Номенклатура.ЕдиницаИзмерения;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
			НоваяСтрокаТовары.СтавкаНДС = СтрокаТаблицы.СтавкаНДС;
		Иначе
			НоваяСтрокаТовары.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТаблицы.Номенклатура.ВидСтавкиНДС);
		КонецЕсли;
		
		ТоварыДобавлены = Истина;
		
	КонецЦикла;
	
	Если ТоварыДобавлены Тогда
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	НоменклатураВДокументахСервер.ЗаполнитьТипНоменклатурыВТабличнойЧасти(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(АдресЗагруженныхДанных) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных);
	Для каждого СтрокаТаблицы Из Объект.Запасы Цикл 
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТаблицы);
	КонецЦикла;
	
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда
		
		Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда
		
			ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(
				НастройкиЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата",
				ЭтотОбъект, НастройкиЗагрузкиДанных);
			ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(
				НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
			
		ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда
			
			ДлительнаяОперация = ОбработатьПодготовленныеДанныеНоменклатуры(РезультатЗагрузки);
			
			СтруктураПараметров = Новый Структура;
			Если РезультатЗагрузки.НастройкиЗагрузкиДанных.Свойство("ТекстОшибки") Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатЗагрузки.НастройкиЗагрузкиДанных.ТекстОшибки);
			КонецЕсли;
			
			ПроверитьНеобходимостьПодключенияОбработчикаОжидания(ДлительнаяОперация, СтруктураПараметров);
			
		КонецЕсли;
		
	Иначе
		
		ЗагрузитьИзФайлаЗавершение(РезультатЗагрузки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанные(АдресРезультатаЗагрузки)
	
	НачатьТранзакцию();
	
	Попытка
		
		РезультатЗагрузки = ПолучитьИзВременногоХранилища(АдресРезультатаЗагрузки);
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		ВидСтавкиНДСПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ВидСтавкиНДСПоУмолчанию");
		ПериодСтавкиНДС = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = Объект.Запасы.Добавить();
				
				ИменаСвойств = "Номенклатура, Содержание, Количество, ЕдиницаИзмерения, СтавкаНДС, ДатаПоступления";
				Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
					
					ИменаСвойств = ИменаСвойств + ", Характеристика";
					
				КонецЕсли;
				
				Если ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам") Тогда
					
					ИменаСвойств = ИменаСвойств + ", СтруктурнаяЕдиницаРезерв";
					
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, ИменаСвойств);
				ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "ЗаказПокупателя",
					"ПоложениеЗаказаПокупателя");
				ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "ДатаПоступления",
					"ПоложениеДатыПоступления");
				ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "СтруктурнаяЕдиницаРезерв",
					"ПоложениеСклада");
				
				ЗначенияРеквизитовНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяСтрока.Номенклатура,
					"ТипНоменклатуры, Склад, ВидСтавкиНДС");
				
				НоваяСтрока.ТипНоменклатуры = ЗначенияРеквизитовНоменклатуры.ТипНоменклатуры;
				СкладВТЧ = СкладВТЧ(Объект.ВидОперации, Объект.ПоложениеСклада, "Запасы");
				Если НоваяСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
					НоваяСтрока.СтруктурнаяЕдиницаРезерв = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();	
				ИначеЕсли СкладВТЧ И НЕ ЗначениеЗаполнено(НоваяСтрока.СтруктурнаяЕдиницаРезерв) Тогда
					НоваяСтрока.СтруктурнаяЕдиницаРезерв = ЗначенияРеквизитовНоменклатуры.Склад;
				ИначеЕсли НЕ СкладВТЧ Тогда
					НоваяСтрока.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
				КонецЕсли;
				
				НоваяСтрока.Цена = СтрокаТаблицы.Цена;
				НоваяСтрока.Сумма = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
				
				Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
					
					Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
						
						Если ЗначениеЗаполнено(ЗначенияРеквизитовНоменклатуры.ВидСтавкиНДС) Тогда
							НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(
								ЗначенияРеквизитовНоменклатуры.ВидСтавкиНДС, ПериодСтавкиНДС);
						Иначе
							НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(ВидСтавкиНДСПоУмолчанию,
								ПериодСтавкиНДС);
						КонецЕсли;
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаТаблицы.СуммаНДС) Тогда
						
						НоваяСтрока.СуммаНДС = СтрокаТаблицы.СуммаНДС;
						
					Иначе
						
						СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
						
						НоваяСтрока.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
							НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((СтавкаНДС + 100) / 100),
							НоваяСтрока.Сумма * СтавкаНДС / 100);
						
					КонецЕсли;
					
				Иначе
					
					НоваяСтрока.СтавкаНДС = ?(Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС,
						УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС(),
						УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
					
					НоваяСтрока.СуммаНДС = 0;
					
				КонецЕсли;
				
				НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(Объект.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ИмяСобытия = НСтр("ru='Загрузка данных'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Номенклатура, , ПодробноеПредставлениеОшибки);
		
	КонецПопытки;
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	НоменклатураВДокументахСервер.ЗаполнитьТипНоменклатурыВТабличнойЧасти(Объект);
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПодготовленныеДанныеНоменклатуры(РезультатЗагрузки)
	
	ПараметрыВызоваСервера = Новый Структура;
	ПараметрыВызоваСервера.Вставить("НастройкиЗагрузкиДанных", РезультатЗагрузки.НастройкиЗагрузкиДанных);
	ТаблицаСопоставленияДанных = ДанныеФормыВЗначение(РезультатЗагрузки.ТаблицаСопоставленияДанных, Тип(
		"ТаблицаЗначений"));
	ПараметрыВызоваСервера.Вставить("ТаблицаСопоставленияДанных", ТаблицаСопоставленияДанных);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр(
		"ru = 'Подсистема ЗагрузкаДанныхИзВнешнегоИсточника: Выполнение серверного метода загрузки результата'");
	ПараметрыВыполнения.ЗапуститьНеВФоне = Ложь;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;	
	
	ИмяМетода = "Справочники.Номенклатура.ОбработатьПодготовленныеДанные";
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыВызоваСервера, ПараметрыВыполнения);
	
КонецФункции
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

// ИнтеграцияГосИС
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормИСУНФКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры
// Конец ИнтеграцияГосИС

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

//@skip-check module-unused-method
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыборИзКлассификатораКонтактов()
	
	ЭлектроннаяПочтаУНФКлиент.ПоказатьВыборИзКлассификатораКонтактов(ЭтотОбъект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ДекорацияСостояниеОригиналаНажатие(Элемент)
	УчетОригиналовПервичныхДокументовКлиент.ОткрытьМенюВыбораСостояния(ЭтотОбъект,Элементы.ДекорацияСостояниеОригинала);
КонецПроцедуры
//Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

// ЭлектронноеВзаимодействие.ТорговыеПредложения
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ПодсказкиБизнесСетьНажатие(Команда)
	ТорговыеПредложенияКлиент.ОткрытьФормуПодсказок(ЭтотОбъект);
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ТорговыеПредложения

#КонецОбласти

#КонецОбласти
