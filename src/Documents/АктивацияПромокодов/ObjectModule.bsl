#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура установки режима проведения.
//
// Параметры:
//  Проведен - Булево - признак проведения документа.
//  РежимЗаписи - РежимЗаписиДокумента - режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - режим проведения документа.
//
Процедура УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения) Экспорт

	Если Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения);
	ИнициализироватьДокумент(ДанныеЗаполнения);
		
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Если Промокоды.Количество() > 0 Тогда
		Промокоды.Очистить();
	КонецЕсли;
	ИнициализироватьДокумент(Неопределено);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьЗаполнениеТабличнойЧасти(Отказ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения);
	
	Если КоличествоПромокодов <> Промокоды.Количество() Тогда
		КоличествоПромокодов = Промокоды.Количество();
	КонецЕсли;
		
КонецПроцедуры


// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.АктивацияПромокодов.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
		
	// Подготовка наборов записей.
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ПроведениеДокументовУНФ.ОтразитьДвижения("Промокоды", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоступностьПромокодов", ТаблицыДляДвижений, Движения, Отказ);
		
	// Запись наборов записей.
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
			
	ПроведениеДокументовУНФ.ЗакрытьМенеджерВременныхТаблиц(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
		
КонецПроцедуры // ОбработкаУдаленияПроведения()
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧасти(Отказ)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Промокод КАК Промокод
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеПромокоды.НомерСтроки КАК НомерСтроки,
	|	СуществующиеПромокоды.Промокод КАК Промокод,
	|	СуществующиеПромокоды.УсловиеПредоставленияСкидки КАК УсловиеПредоставленияСкидки,
	|	СуществующиеПромокоды.Регистратор КАК Документ
	|ИЗ
	|	ТаблицаДокумента КАК НовыеПромокоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Промокоды КАК СуществующиеПромокоды
	|		ПО НовыеПромокоды.Промокод = СуществующиеПромокоды.Промокод
	|ГДЕ
	|	НЕ СуществующиеПромокоды.Регистратор = СуществующиеПромокоды.Регистратор");
	ТаблицаДокумента = Промокоды.Выгрузить();
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Массив = Запрос.ВыполнитьПакет();
	
	// Массив[0] - временная таблица "ТаблицаДокумента".
	РезультатЗапросаДубли = Массив[1];
	
	// Проверяем существование промокодов, которые хотим активировать (один и тот же промокод не может использоваться дважды).
	Выборка = РезультатЗапросаДубли.Выбрать();
	Пока Выборка.Следующий() Цикл
		ПредставлениеСкидок = "";
		Скидки = ПромокодыУНФВызовСервера.СкидкиВыдачиПромокодаПоУсловию(Выборка.УсловиеПредоставленияСкидки);
		Запятая = "";
		Для Каждого Скидка Из Скидки Цикл
			ПредставлениеСкидок = ПредставлениеСкидок + Запятая + Строка(Скидка);
			Запятая = " ,";
		КонецЦикла;
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Промокод %1 уже активирован документом (%2) для следующих скидок: %3'"),
			Выборка.Промокод, Выборка.Документ, ПредставлениеСкидок);
		ОбщегоНазначения.СообщитьПользователю(
			Текст,
			ЭтотОбъект,
			"Промокоды[" + (Выборка.НомерСтроки - 1) + "].Промокод",
			,
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли