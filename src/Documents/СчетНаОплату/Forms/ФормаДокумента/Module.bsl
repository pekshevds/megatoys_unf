
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	#Область БиблиотекаСтандартныхПодсистем
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.СчетНаОплату.ТабличныеЧасти.Запасы, НастройкиЗагрузкиДанных, ЭтотОбъект, Ложь);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиУНФ.ЗаполнитьДополнительныеПараметры(Объект, "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	#КонецОбласти
	
	Если ТипЗнч(КэшЗначений) <> Тип("Структура") Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	КэшЗначений.Вставить("ИспользоватьМинимальныеЦены", ЦенообразованиеСерверПовтИсп.МинимальныеЦеныИспользуются());
	
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы");
	
	НаборСвойств_Документ_СчетНаОплату = УправлениеСвойствами.НаборСвойствПоИмени("Документ_СчетНаОплату");
	КэшЗначений.Вставить("НаборСвойств_Документ_СчетНаОплату", НаборСвойств_Документ_СчетНаОплату);
	
	УстановитьУсловноеОформлениеФормы();
	
	// Инициализация реквизитов формы.
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	
	// КомандыПечати
	ПечатьДокументовУНФ.КорректировкаРазмещениеПодчиненнойГруппыКомандПечати(ЭтаФорма, Элементы.ПодменюПечать, Элементы.ПодменюДоговорКонтрагента);
	Элементы.КомандыПечатиДоговорКонтрагента.Вид = ВидГруппыФормы.ГруппаКнопок;
	ШаблоныПечатиОфисныхДокументов.ОпределитьВидимостьКомандШаблоновПечати(Элементы.ФормаОткрытьШаблоныПечатиДоговоровКонтрагентов);
	
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	ПечатьДокументовУНФ.КорректировкаРазмещениеПодчиненнойГруппыКомандПечати(ЭтаФорма, Элементы.ПодменюПечать, Элементы.ПодменюПечатьФаксимиле);
	Элементы.ПодменюПечатьФаксимиле.Вид = ВидГруппыФормы.Подменю;
	// Конец КомандыПечати
	
	НапоминанияПользователяУНФ.УстановитьОтображениеКомандОрганайзера(Элементы);
	ЭлектроннаяПочтаУНФ.УстановитьОтображениеКомандОтправкиСообщений(Элементы);
	
	ДатаДокумента = Объект.Дата;
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	ЭтотОбъект.ОснованиеСоздания = Параметры.Основание;
	
	Контрагент = Объект.Контрагент;
	Договор = Объект.Договор;
	ЭтоДоговорОбслуживания = Объект.Договор.ЭтоДоговорОбслуживания;
	ВалютаРасчетов = Объект.Договор.ВалютаРасчетов;
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	НациональнаяВалютаКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НациональнаяВалюта, ДатаДокумента);
	КурсНациональнаяВалюта = НациональнаяВалютаКурсКратность.Курс;
	КратностьНациональнаяВалюта = НациональнаяВалютаКурсКратность.Кратность;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		И НЕ ЗначениеЗаполнено(Параметры.Основание) 
		И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС(Истина);
	ИначеЕсли Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда	
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		Элементы.ПлатежныйКалендарьСуммаНДСОплаты.Видимость = Истина;
		Элементы.СписокПлатежныйКалендарьСуммаНДСОплаты.Видимость = Истина;
	Иначе
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		Элементы.ПлатежныйКалендарьСуммаНДСОплаты.Видимость = Ложь;
		Элементы.СписокПлатежныйКалендарьСуммаНДСОплаты.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.РедактироватьСписком.Пометка = Объект.ПлатежныйКалендарь.Количество() > 1;
	Элементы.СтраницаПлатежныйКалендарь.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
	
	РаботаСФормойДокумента.НастроитьГруппуЦеныИВалюты(ЭтотОбъект);
	// Сформируем надпись цены и валюты.
	УчетВалютныхОпераций = Константы.ФункциональнаяУчетВалютныхОпераций.Получить();
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	ОбновитьКартинкуДисконтнойКарты();
	
	// Установка доступности цен для редактирования.
	РазрешеноРедактированиеЦенДокументов = УправлениеДоступомУНФ.РазрешеноРедактированиеЦенДокументов();
	
	Элементы.ЗапасыЦена.ТолькоПросмотр 				   = Не РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыПроцентСкидкиНаценки.ТолькоПросмотр = Не РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСуммаСкидкиНаценки.ТолькоПросмотр	= Не РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСумма.ТолькоПросмотр 			   = Не РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСуммаНДС.ТолькоПросмотр 			   = Не РазрешеноРедактированиеЦенДокументов;
	Элементы.Скидки.ТолькоПросмотр					   = Не РазрешеноРедактированиеЦенДокументов;
	
	// Установить надписи счет-фактура и основание
	Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(
		Объект.ДокументОснование);
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Запасы");
	
	АвтоподборКонтактов.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект);
	
	// СписокАвтоПодбораКонтрагента
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЭлектроннаяПочтаУНФ.ЗаполнитьСписокАвтоПодбораКонтрагентаИзСобытия(СписокАвтоПодбораКонтрагента, Параметры.Основание);
	КонецЕсли;
	// Конец СписокАвтоПодбораКонтрагента
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// ГрупповоеИзменениеСтрок
	ЗаполнитьСписокДействий(РазрешеноРедактированиеЦенДокументов);
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрокСервер(), ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
	ЗапасыИзменениеСтрокДействиеПриОткрытии = ЗапасыИзменениеСтрокДействие;
	УстановитьПометку(Истина);
	// Конец ГрупповоеИзменениеСтрок
	
	// ЭДО
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.КомандыЭДО_ФормаДокумента(ЭтотОбъект);
	// Конец ЭДО
	
	// АвтоматическиеСкидки
	АвтоматическиеСкидкиПриСозданииНаСервере();
	ОбновитьВидимостьПодарков();
	
	УстановитьРеквизитыВидимости();
	
	// Биллинг
	УстановитьВидимостьРасшифровкиБиллинга();
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБиллинг") Тогда
		Если Константы.БиллингВестиУчетРасходовПоДоговорамОбслуживания.Получить() Тогда
			// В ТЧ РасшифровкаБиллинга могут быть как позиции номенклатуры, так и планы счетов.
			РасшифровкаБиллингаУстановитьУсловноеОформление();
			ИнициализироватьРасшифровкуБиллинга();
		Иначе
			// В ТЧ РасшифровкаБиллинга могут быть только позиции номенклатуры.
			Элементы.РасшифровкаБиллингаОбъектДоговораОбслуживания.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
			Элементы.РасшифровкаБиллингаОбъектДоговораОбслуживания.Заголовок = НСтр("ru='Номенклатура'");
		КонецЕсли;
	КонецЕсли;
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	СписокЭлектронныхВесов = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("ЭлектронныеВесы", ,
		МенеджерОборудованияВызовСервера.РабочееМестоКлиента());
	Если СписокЭлектронныхВесов.Количество() = 0 Тогда
		// Нет подключенных весов.
		Элементы.ЗапасыПолучитьВес.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	// Дополнительные условия для печати счета
	
	УсловияСчетаЗаказа = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("УсловияСчетаЗаказа", Объект.Организация);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И НЕ ЗначениеЗаполнено(Объект.УсловияСчетаЗаказа) Тогда
		
		Если ЗначениеЗаполнено(УсловияСчетаЗаказа) Тогда
			Объект.УсловияСчетаЗаказа = УсловияСчетаЗаказа;
		Иначе
			НастройкаУсловий = ПланыВидовХарактеристик.НастройкиПользователей.УсловияСчетаЗаказа;
			Объект.УсловияСчетаЗаказа = Справочники.ДополнительныеУсловия.ПолучитьТиповыеУсловия(НастройкаУсловий,
				Объект.Организация);			
		КонецЕсли;
		
	КонецЕсли;
	// Дополнительные условия для печати счета
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПрочитатьВесИОбъемЕдиницыТовара();
	КонецЕсли;
	
	// Наборы
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Параметры.ЗначенияЗаполнения.Свойство("Запасы") Тогда
			Для каждого ДанныеСтроки Из Параметры.ЗначенияЗаполнения.Запасы Цикл
				Если ДанныеСтроки.Свойство("ЭтоНабор") И ДанныеСтроки.ЭтоНабор Тогда
					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
					Если ДанныеСтроки.Свойство("Характеристика") И ЗначениеЗаполнено(ДанныеСтроки.Характеристика) Тогда
						СтруктураОтбора.Вставить("Характеристика", ДанныеСтроки.Характеристика);
					КонецЕсли;
					Строки = Объект.Запасы.НайтиСтроки(СтруктураОтбора);
					Для каждого СтрокаНабора Из Строки Цикл
						СтруктураДанные = Новый Структура;
						СтруктураДанные.Вставить("Организация", Объект.Организация);
						СтруктураДанные.Вставить("Номенклатура", СтрокаНабора.Номенклатура);
						СтруктураДанные.Вставить("Характеристика", СтрокаНабора.Характеристика);
						СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
						СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
						Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
							СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
							СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
							СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
							СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
							СтруктураДанные.Вставить("Коэффициент", 1);
							СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
						КонецЕсли;
						// ДисконтныеКарты
						СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
						СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
						// Конец ДисконтныеКарты 
						
						ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, СтрокаНабора, СтруктураДанные);

						СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
						Если НЕ СтруктураДанные.ИспользоватьХарактеристики Тогда
							ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, СтрокаНабора, СтруктураДанные);
						КонецЕсли; 
					КонецЦикла; 
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
		ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы);
		ОбновитьПризнакиНабора(Объект.Запасы);
	КонецЕсли;
	// Конец Наборы
	
	// НДС 20% Переходный период
	ПересчитатьНДСС18На20 = Ложь;
	Если ЗначениеЗаполнено(Параметры.Основание)
		И ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ЗаказПокупателя")
		И Год(Параметры.Основание.Дата) < 2019 Тогда
		СтавкаНДС18 = Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.Общая, Дата('20180101'));
		СтавкаНДС18Расчетная = Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.ОбщаяРасчетная, Дата('20180101'));
		Для Каждого СтрокаЗапасы Из Объект.Запасы Цикл
			Если СтрокаЗапасы.СтавкаНДС = СтавкаНДС18 Тогда
				ПересчитатьНДСС18На20 = Истина;
				Прервать;
			КонецЕсли;
			Если СтрокаЗапасы.СтавкаНДС = СтавкаНДС18Расчетная Тогда
				ПересчитатьНДСС18На20 = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// Конец  НДС 20% Переходный период
	
	Если Параметры.Ключ.Пустая() Тогда
		ЗаполнитьПризнакиИспользованияХарактеристик(Истина);
	КонецЕсли;
	
	УстановитьПараметрыВыбораНоменклатуры();
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовУНФ.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
	НастройкиКоличества = ПолучитьНастройкиИзмененияКоличества();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиКоличества);

	Пользователь = Пользователи.ТекущийПользователь();
	ПоказыватьКолонкуСодержаниеВСчетеНаОплату = 
		УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,
			"ПоказыватьКолонкуСодержаниеВСчетеНаОплату");
	ПоказыватьКолонкуВесВСчетеНаОплату = 
		УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,
			"ПоказыватьКолонкуВесВСчетеНаОплату");
	ПоказыватьКолонкуОбъемВСчетеНаОплату = 
		УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,
			"ПоказыватьКолонкуОбъемВСчетеНаОплату");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	СтатистикаИспользованияФормКлиент.ПроверитьЗаписатьСтатистикуКоманды(
		"СоздатьНаОсновании.СчетНаОплату",
		ЭтотОбъект.ВладелецФормы,
		ЭтотОбъект.ОснованиеСоздания);
	
	УстановитьВидимостьДоговора();
	
	УправлениеФормой(ЭтотОбъект);
	УстановитьВидимостьЭлементовПоНастройкеПользователя(ЭтотОбъект);
	
	// ГрупповоеИзменениеСтрок
	ОпределитьОбъектИзменений();
	// Конец ГрупповоеИзменениеСтрок
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СписокАвтоПодбораКонтрагента
	Если ЗначениеЗаполнено(СписокАвтоПодбораКонтрагента) Тогда
		ПодключитьОбработчикОжидания("ПоказатьВыборИзКлассификатораКонтактов", 0.1, Истина);
	КонецЕсли;
	// Конец СписокАвтоПодбораКонтрагента
	
	// ЭДО
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭДО
	
	ОбновитьПодвалФормы();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// НДС 20% Переходный период
	Если ПересчитатьНДСС18На20 Тогда
		ОповещениеНДСС18На20 = Новый ОписаниеОповещения("ВыполнитьПересчетНДСС18На20", ЭтаФорма);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Пересчитать(сумма не изменяется)'"));
		Если Объект.СуммаВключаетНДС Тогда
			Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Пересчитать (сумма увеличится на 2% НДС)'"));
		КонецЕсли;
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
		ТекстВопроса = НСтр("ru = 'В документе указана ставка 18%. Пересчитать автоматически на 20%?'");
		ПоказатьВопрос(ОповещениеНДСС18На20, ТекстВопроса, Кнопки);
	КонецЕсли;
	// Конец  НДС 20% Переходный период
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// АвтоматическиеСкидки
	СкидкиНаценкиКлиент.ПриЗакрытииФормы(Объект.Ссылка, ИспользоватьАвтоматическиеСкидки, СкидкиРассчитаныПередЗаписью);
	// Конец АвтоматическиеСкидки
	
	Если НЕ ЗавершениеРаботы Тогда
		// ГрупповоеИзменениеСтрок
		СохранитьТекущееДействиеИзмененияСтрок();
	КонецЕсли;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Данные = МенеджерОборудованияУНФКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// ДисконтныеКарты
	Если СчитанаДисконтнаяКарта Тогда
		СчитанаДисконтнаяКарта = Ложь;
	КонецЕсли;
	// Конец ДисконтныеКарты
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" Тогда
		
		ЭтотОбъект.Прочитать();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Контрагент" 
		И ЗначениеЗаполнено(Параметр)
		И Объект.Контрагент = Параметр Тогда
		
		УстановитьВидимостьДоговора();
		
	ИначеЕсли ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		АдресЗапасовВХранилище = Параметр;
		
		ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, "Запасы", Истина, Истина);
		
		// Платежный календарь
		ПересчитатьПлатежныйКалендарь();
		РассчитатьОбъемИВесВДокументе();
		
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Запасы");
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
	// ЭДО
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец ЭДО
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ОбновлениеФормыСчетНаОплату" И ЭтаФорма.УникальныйИдентификатор = Источник Тогда
		
		СтруктураДанныеНоменклатуры = Новый Структура();
		
		СтруктураДанныеНоменклатуры.Вставить("Номенклатура",);
		СтруктураДанныеНоменклатуры.Вставить("Характеристика",);
		СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", );
		СтруктураДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", );
		
		СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
		СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
		СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанныеНоменклатуры.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанныеНоменклатуры.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
		
		// ДисконтныеКарты
		СтруктураДанныеНоменклатуры.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
		СтруктураДанныеНоменклатуры.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
		// Конец ДисконтныеКарты
		
		Для Каждого ТаблицаДанных Из Параметр Цикл
			
			Для Каждого СтрокаТаблицыДанных Из ТаблицаДанных.Значение Цикл
				НоваяСтрока = Объект[ТаблицаДанных.Ключ].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыДанных);
				
				Если НоваяСтрока.ЭтоНабор Тогда
					
					// Наборы
					СтруктураДанныеНоменклатуры.Номенклатура = СтрокаТаблицыДанных.Номенклатура;
					СтруктураДанныеНоменклатуры.Характеристика = СтрокаТаблицыДанных.Характеристика;
					СтруктураДанныеНоменклатуры.ТипНоменклатуры = СтрокаТаблицыДанных.ТипНоменклатуры;
					СтруктураДанныеНоменклатуры.ЕдиницаИзмерения = СтрокаТаблицыДанных.ЕдиницаИзмерения;
					
					ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, 
						НоваяСтрока, СтруктураДанныеНоменклатуры);

					СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
					
					ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, НоваяСтрока, СтруктураДанные);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект);
		
		// Платежный календарь
		ПересчитатьПлатежныйКалендарь();
		РассчитатьОбъемИВесВДокументе();
		
		ЗаполнитьПризнакиИспользованияХарактеристик();
		
	КонецЕсли;
	
	// Наборы
	Если НаборыКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Источник) Тогда
		ОбновитьСоставНабора(Параметр.НоменклатураНабора, Параметр.ХарактеристикаНабора, Параметр.Количество, 
			Параметр.Цена, Параметр.СоставНабора);
		ВыполнитьДействияПослеУдаленияСтрокиЗапасы();
	КонецЕсли; 
	// Конец Наборы
	
	ОбновитьПодвалФормы();
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовУНФКлиент.ОбработчикОповещенияФормаДокумента(ИмяСобытия,ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПрочитатьВесИОбъемЕдиницыТовара();
	
	// Наборы
	ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы);
	ОбновитьПризнакиНабора(Объект.Запасы); 
	// Конец Наборы
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
	// ЭДО
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.КомандыЭДО_ПриЧтенииФормыДокумента(ЭтотОбъект);
	// Конец ЭДО
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("Проведение"
			+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	// АвтоматическиеСкидки
	СкидкиРассчитаныПередЗаписью = Ложь;
	// Если документ проводится, проверим рассчитанность скидок.
	Если ИспользоватьАвтоматическиеСкидки Тогда
		Если Не Объект.СкидкиРассчитаны И СкидкиИзменились() Тогда
			РассчитатьСкидкиНаценкиКлиент();
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Рассчитаны автоматические скидки (наценки).'");
			Сообщение.КлючДанных = Объект.Ссылка;
			Сообщение.Сообщить();
			
			СкидкиРассчитаныПередЗаписью = Истина; 
			
		Иначе
			Объект.СкидкиРассчитаны = Истина;
			ОбновитьКартинкуАвтоСкидкиПослеЗаписи = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ВыдатьПодаркиНаВыбор 
		И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ДействиеПослеВыдачиПодарка = "Проведение";
		Отказ = Истина;
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Обработчик механизма "Свойства"
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ТекстСообщения = "";
		Справочники.ДоговорыКонтрагентов.ПроверитьСоответствиеДоговораУсловиямДокумента(
			ТекстСообщения,
			Объект.Договор,
			Объект.Ссылка,
			Объект.Организация,
			Объект.Контрагент,
			Отказ);
		
		Если ТекстСообщения <> "" Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Если Отказ Тогда
				Сообщение.Текст = СтрШаблон(НСтр("ru = 'Документ не проведен. %1'"), ТекстСообщения);
			Иначе
				Сообщение.Текст = ТекстСообщения;
			КонецЕсли;
			
			Если Отказ Тогда
				Сообщение.ПутьКДанным = "Объект";
				Сообщение.Поле = "Договор";
				Сообщение.Сообщить();
				Возврат;
			Иначе
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// ЭДО
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец ЭДО 
	
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы");
	
	// АвтоматическиеСкидки
	Если ОбновитьКартинкуАвтоСкидкиПослеЗаписи Тогда
		Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
		ОбновитьКартинкуАвтоСкидкиПослеЗаписи = Ложь;
	КонецЕсли;
	// Конец АвтоматическиеСкидки

	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	// ГрупповоеИзменениеСтрок
	Если Элементы.ГруппаЗапасыИзменениеСтрок.Видимость Тогда
		УстановитьПометку(Истина);
	КонецЕсли;
	// Конец ГрупповоеИзменениеСтрок
	
	ПрочитатьВесИОбъемЕдиницыТовара();
	
	// Наборы
	ОбновитьПризнакиНабора(Объект.Запасы);
	// Конец Наборы
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);	
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	// Наборы
	ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы); 
	// Конец Наборы
	
	Оповестить();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДанныеДляИзмененияДаты = ДокументыУНФКлиент.ДанныеДляИзмененияДаты(ЭтотОбъект, Объект);
	Если ДанныеДляИзмененияДаты.ДатаНеМенялась Тогда
		Возврат;
	КонецЕсли;
	
	ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты);
	
	ЦеныИВалютаКлиент.ПересчитатьКурсКратностьВалютыРасчетов(ДанныеДляИзмененияДаты.ВалютаКурсКратность, Объект,
		ЭтотОбъект);
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	// ДисконтныеКарты
	// В этой процедуре происходить вызов не модального окна вопроса.
	ПересчитатьПроцентСкидкиПриИзмененииДатыДокумента();
	// Конец ДисконтныеКарты		
	
	// АвтоматическиеСкидки
	ДатаДокументаИзмененаВручную = Истина;
	СброситьФлагСкидкиРассчитаныКлиент("ДатаПриИзменении");

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	ОбработатьИзменениеДоговораНаКлиенте();
	ПересчитатьПлатежныйКалендарь();
	СброситьФлагСкидкиРассчитаныКлиент("ИзменениеВторостепенногоРеквизита", "Организация");	
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДенежныхСредствПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	
	УстановитьРеквизитыВидимости();
	УстановитьВидимостьДоговора();
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		
		ДанныеКонтрагента 		= ДанныеКонтрагентаДляИзменения();
		
		Объект.Договор 			= ДанныеКонтрагента.Договор;
		ДоговорПередИзменением	= Договор;
		Договор 				= Объект.Договор;
		
		ВалютаРасчетовПередИзменением = ВалютаРасчетов;
		ВалютаРасчетов 			= ДанныеКонтрагента.ВалютаРасчетов;
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда 
			Объект.Курс	  = ?(ДанныеКонтрагента.ВалютаРасчетовКурсКратность.Курс = 0, 1, ДанныеКонтрагента.ВалютаРасчетовКурсКратность.Курс);
			Объект.Кратность = ?(ДанныеКонтрагента.ВалютаРасчетовКурсКратность.Кратность = 0, 1, ДанныеКонтрагента.ВалютаРасчетовКурсКратность.Кратность);
		КонецЕсли;
		
		ИзменилсяВидЦен = Объект.ВидЦен <> ДанныеКонтрагента.ВидЦен 
			И ЗначениеЗаполнено(ДанныеКонтрагента.ВидЦен);
			
		ИзменилсяВидСкидки = Объект.ВидСкидкиНаценки <> ДанныеКонтрагента.ВидСкидкиНаценки 
			И ЗначениеЗаполнено(ДанныеКонтрагента.ВидСкидкиНаценки);
			
		// ДисконтныеКарты	
		Объект.ДисконтнаяКарта = ПредопределенноеЗначение("Справочник.ДисконтныеКарты.ПустаяСсылка");
		Объект.ПроцентСкидкиПоДисконтнойКарте = 0;
		// Конец ДисконтныеКарты
			
		НовыйДоговорИВалютаРасчетов = ЗначениеЗаполнено(Объект.Договор) И ЗначениеЗаполнено(ВалютаРасчетов) 
			И Объект.Договор <> ДоговорПередИзменением И ВалютаРасчетовПередИзменением <> ДанныеКонтрагента.ВалютаРасчетов;
		ОткрытьФормуЦеныИВалюты = НовыйДоговорИВалютаРасчетов И Объект.ВалютаДокумента <> ДанныеКонтрагента.ВалютаРасчетов
			И Объект.Запасы.Количество() > 0;
			
		ПечатьДокументовУНФКлиент.ПриИзмененииДоговораКонтрагента(Объект.Договор, Объект.ОснованиеПечатиСсылка, Объект.ОснованиеПечати, ДанныеКонтрагента);
		
		ВопросВидЦен = ЗначениеЗаполнено(Объект.Договор) И (ИзменилсяВидЦен ИЛИ ИзменилсяВидСкидки);
		Если ВопросВидЦен Тогда
			Если ИзменилсяВидЦен Тогда
				Объект.ВидЦен = ДанныеКонтрагента.ВидЦен;
			КонецЕсли;
			Если ИзменилсяВидСкидки Тогда
				Объект.ВидСкидкиНаценки = ДанныеКонтрагента.ВидСкидкиНаценки;
			КонецЕсли;
		КонецЕсли;
		
		Объект.ВалютаДокумента = ДанныеКонтрагента.ВалютаРасчетов;
		Если ДанныеКонтрагента.Свойство("БанковскийСчет") Тогда
			
			Объект.БанковскийСчет = ДанныеКонтрагента.БанковскийСчет;
			
		КонецЕсли;
		
		Если ОткрытьФормуЦеныИВалюты Тогда
			
			ТекстПредупреждения = "";
			Если ВопросВидЦен Тогда
				ТекстПредупреждения = НСтр("ru = 'Договор с контрагентом предусматривает условия цен и скидок, 
					|отличные от установленных в документе. 
					|Возможно, необходимо перезаполнить цены.'") + Символы.ПС + Символы.ПС;
			КонецЕсли;
			
			ТекстПредупреждения = ТекстПредупреждения + НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом.
				|Необходимо проверить валюту документа.'");
			ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаРасчетовПередИзменением, Истина, ИзменилсяВидЦен, ТекстПредупреждения);
		
		ИначеЕсли ВопросВидЦен Тогда
			
			ПересчетНеобходим = (Объект.Запасы.Количество() > 0);
			
			ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
				УчетВалютныхОпераций);
			
			Если ПересчетНеобходим Тогда
				
				Сообщение = НСтр("ru = 'Договор с контрагентом предусматривает условия цен и скидок, отличные от установленных в документе. 
										|Пересчитать документ в соответствии с договором?'");
				
				ПоказатьВопрос(Новый ОписаниеОповещения("КонтрагентПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением, ДоговорПередИзменением, СтруктураДанные", ВалютаРасчетовПередИзменением, ДоговорПередИзменением, ДанныеКонтрагента)), Сообщение, РежимДиалогаВопрос.ДаНет);
				Возврат;
				
			КонецЕсли;
			
		Иначе
			
			ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
				УчетВалютныхОпераций);
			
		КонецЕсли;
		
	Иначе
		
		Объект.Договор = Договор; // Восстанавливаем автоматически очищенный договор.
		
	КонецЕсли;
	
	// АвтоматическиеСкидки
	СброситьФлагСкидкиРассчитаныКлиент("КонтрагентПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтотОбъект, "Запасы", Истина);
		ПересчитатьПлатежныйКалендарь();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговораНаКлиенте();
	СброситьФлагСкидкиРассчитаныКлиент("ИзменениеВторостепенногоРеквизита", "Договор");	
	
КонецПроцедуры // ДоговорПриИзменении()

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбораДоговора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, Объект.Договор);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Владелец", Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоров.СПокупателем"));
	ПараметрыФормы.Вставить("ОповеститьОЗаписиДоговора", Истина);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Договор) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбораБанковскогоСчета(Объект.Договор, Объект.Организация, НациональнаяВалюта);
	Если ПараметрыФормы.РасчетыВУсловныхЕдиницах Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.БанковскиеСчета.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапланироватьОплатуПриИзменении(Элемент)
	
	Если Объект.ЗапланироватьОплату И Объект.ПлатежныйКалендарь.Количество() = 0 Тогда
		
		НоваяСтрока = Объект.ПлатежныйКалендарь.Добавить();
		НоваяСтрока.ДатаОплаты = Объект.Дата + ПолучитьСрокОплатыПокупателя(Объект.Договор) * 86400;
		НоваяСтрока.ПроцентОплаты = 100;
		НоваяСтрока.СуммаОплаты = Объект.Запасы.Итог("Всего") + СтоимостьДоставкиСНДС;
		НоваяСтрока.СуммаНДСОплаты = Объект.Запасы.Итог("СуммаНДС") + Объект.СуммаНДСДоставки;
		
	ИначеЕсли НЕ Объект.ЗапланироватьОплату И Объект.ПлатежныйКалендарь.Количество() > 0 Тогда
		
		Объект.ПлатежныйКалендарь.Очистить();
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокВзаиморасчетовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСФормойДокументаКлиент.ОткрытьОтчетВзаиморасчетыСКонтрагентом(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
		
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "удалить" Тогда
		Объект.ДокументОснование = Неопределено;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Неопределено);
		Модифицированность = Истина;
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "заполнить" Тогда
		ЗаполнитьПоОснованиюНачало();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "выбрать" Тогда
		// Выбрать основание
		СписокОснований = Новый СписокЗначений;
		СписокОснований.Добавить("Документ.АктВыполненныхРабот.ФормаВыбора", НСтр("ru = 'Акт выполненных работ'"));
		СписокОснований.Добавить("Документ.ЗаказПокупателя.ФормаВыбора", НСтр("ru = 'Заказ покупателя'"));
		СписокОснований.Добавить("Документ.ОтчетОПереработке.ФормаВыбора", НСтр("ru = 'Отчет о переработке'"));
		СписокОснований.Добавить("Документ.РасходнаяНакладная.ФормаВыбора", НСтр("ru = 'Расходная накладная'"));
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборТипаОснованияЗавершение", ЭтотОбъект);
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокОснований, Элементы.ДокументОснованиеНадпись);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "открыть" Тогда
		
		РаботаСФормойДокументаКлиент.ОткрытьФормуДокументаПоСсылке(Объект.ДокументОснование);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаПроцентПриИзменении(Элемент)
	
	ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки");
	ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "ПроцентСкидкиНаценки";
	ЗапасыИзменениеСтрокЗначение = СкидкаПроцент;
	Модифицированность = Истина;
	
	ОбработатьТаблицу();
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаСуммаПриИзменении(Элемент)
	
	ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСкидкуСуммой");
	ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
	ЗапасыИзменениеСтрокЗначение = СкидкаСумма;
	Модифицированность = Истина;
	
	СтруктураОповещения = Новый Структура;
	СтруктураОповещения.Вставить("СуммаДоРасчета", СкидкаСумма);
	
	ОбработатьТаблицу();
	
	СтруктураОповещения.Вставить("СуммаПослеРасчета", СкидкаСумма);
	
	ЦенообразованиеКлиент.ПоказатьОповещениеПользователяОКорректировкеЦены(СтруктураОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДоставкиПриИзменении(Элемент)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", Объект.НоменклатураДоставки);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
	
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, Неопределено, 
		СтруктураДанные);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	Объект.СтавкаНДСДоставки = СтруктураДанные.СтавкаНДС;
	ОбновитьСуммуНДСДоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьДоставкиПриИзменении(Элемент)
	
	ОбновитьСуммуНДСДоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСДоставкиПриИзменении(Элемент)
	
	ОбновитьСуммуНДСДоставки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасы

&НаКлиенте
Процедура ЗапасыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// Наборы
	СтрокаТабличнойЧасти = Объект.Запасы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если НЕ ТолькоПросмотр И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураНабора) И  
		(Элемент.ТекущийЭлемент = Элементы.ЗапасыНоменклатура ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗапасыХарактеристика ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗапасыКоличество ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗапасыЕдиницаИзмерения ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗапасыКартинкаНабора) Тогда 
		
		СтандартнаяОбработка = Ложь;
		РедактироватьСоставНабора(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	// Конец Наборы
	
	// АвтоматическиеСкидки
	// Размещать в конце процедуры. Возможно перезаполнение табличной части
	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыПроцентАвтоматическойСкидки
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ЗапасыСуммаАвтоматическойСкидки
		И НЕ ТолькоПросмотр Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьИнформациюОСкидкахКлиент()
		
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если ЭтоДоговорОбслуживания Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// Наборы
	Если НЕ Отказ Тогда
		СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
		Если Копирование И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураНабора) Тогда
			// Состав набора не копируется
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли; 
	// Конец Наборы
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередНачаломИзменения(Элемент, Отказ)
	
	Если ЭтоДоговорОбслуживания Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	
	Если ЭтоДоговорОбслуживания Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// Наборы
	Если НЕ Отказ Тогда
		Если Элементы.Запасы.ВыделенныеСтроки.Количество()=Объект.Запасы.Количество() Тогда
			// Если выделены все строки - проверки удаления наборов не выполняются
			Объект.ДобавленныеНаборы.Очистить();
		Иначе
			ДанныеНабора = Новый Структура("НоменклатураНабора, ХарактеристикаНабора");
			Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
				ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
				Если ДанныеНабора.НоменклатураНабора=Неопределено Тогда
					ДанныеНабора.НоменклатураНабора = ТекущиеДанныеСтроки.НоменклатураНабора;
					ДанныеНабора.ХарактеристикаНабора = ТекущиеДанныеСтроки.ХарактеристикаНабора;
				ИначеЕсли ДанныеНабора.НоменклатураНабора<>ТекущиеДанныеСтроки.НоменклатураНабора 
					ИЛИ ДанныеНабора.ХарактеристикаНабора<>ТекущиеДанныеСтроки.ХарактеристикаНабора Тогда
					// Выделены строки разных наборов
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Действие недоступно для наборов.'");
					Сообщение.Поле = "Объект.Запасы";
					Сообщение.Сообщить();
					Отказ = Истина;
					Прервать;
				КонецЕсли; 
			КонецЦикла;
			Если НЕ Отказ И ЗначениеЗаполнено(ДанныеНабора.НоменклатураНабора) Тогда
				// Набор можно удалить только целиком
				Отказ = Истина;
				ДобавленныеНаборы = Объект.ДобавленныеНаборы.НайтиСтроки(ДанныеНабора);
				Оповещение = Новый ОписаниеОповещения("ЗапасыПередУдалениемЗавершение", ЭтотОбъект, ДанныеНабора);
				СписокКнопок = Новый СписокЗначений;
				Если ДобавленныеНаборы.Количество()>0 И ДобавленныеНаборы[0].Количество>1 Тогда
					// в ТЧ есть несколько одинаковых наборов
					ТекстВопроса = НСтр("ru = 'Набор можно удалить только целиком. В табличную часть добавлено несколько экземпляров данного набора'");
					СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить все'"));
					СписокКнопок.Добавить("УдалитьОдин", НСтр("ru = 'Удалить один экземпляр'"));
				Иначе
					ТекстВопроса = НСтр("ru = 'Набор можно удалить только целиком'");
					СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить'"));
				КонецЕсли; 
				СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Редактировать состав'"));
				СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
				ПоказатьВопрос(Оповещение, ТекстВопроса, СписокКнопок, 0, КодВозвратаДиалога.Да);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	// Конец Наборы
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередУдалениемЗавершение(Результат, ДанныеНабора) Экспорт
	
	// Наборы
	Если Результат=Неопределено ИЛИ Результат=КодВозвратаДиалога.Отмена Тогда
		Возврат
	КонецЕсли;
	
	СтрокиНабора = Объект.Запасы.НайтиСтроки(ДанныеНабора);
	Если СтрокиНабора.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	СтрокаТабличнойЧасти = СтрокиНабора[0];
	
	Если Результат=КодВозвратаДиалога.Нет Тогда
		
		РедактироватьСоставНабора(СтрокаТабличнойЧасти);
		
	ИначеЕсли Результат=КодВозвратаДиалога.Да Тогда
		
		НаборыКлиент.УдалитьСтрокиНабора(СтрокаТабличнойЧасти.НоменклатураНабора, СтрокаТабличнойЧасти.ХарактеристикаНабора, , Объект.Запасы, Объект.ДобавленныеНаборы);
		
		Модифицированность = Истина;
		ВыполнитьДействияПослеУдаленияСтрокиЗапасы();
		
	ИначеЕсли Результат="УдалитьОдин" Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.НоменклатураНабора);
		СтруктураОтбора.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.ХарактеристикаНабора);
		ДобавленныеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОтбора);
		Если ДобавленныеСтроки.Количество()=0 ИЛИ ДобавленныеСтроки[0].Количество<=1 Тогда
			НаборыКлиент.УдалитьСтрокиНабора(СтрокаТабличнойЧасти.НоменклатураНабора, СтрокаТабличнойЧасти.ХарактеристикаНабора, , Объект.Запасы, Объект.ДобавленныеНаборы);
			Возврат;
		КонецЕсли;
		СтароеКоличество = ДобавленныеСтроки[0].Количество;
		ДобавленныеСтроки[0].Количество = СтароеКоличество-1;
		НаборыКлиентСервер.УдалитьЭкземплярНабора(СтрокаТабличнойЧасти.НоменклатураНабора, СтрокаТабличнойЧасти.ХарактеристикаНабора, , Объект.Запасы, , СтароеКоличество);
		СтрокиНабора = Объект.Запасы.НайтиСтроки(СтруктураОтбора);
		Для каждого Стр Из СтрокиНабора Цикл
			РассчитатьСуммуВСтрокеТабличнойЧасти(Стр);
		КонецЦикла;
		
		Модифицированность = Истина;
		ВыполнитьДействияПослеУдаленияСтрокиЗапасы();
		
	КонецЕсли; 
	// Конец Наборы
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// АвтоматическиеСкидки
	Если НоваяСтрока И Копирование И
		(Элемент.ТекущиеДанные.ПроцентАвтоматическойСкидки <> 0 ИЛИ Элемент.ТекущиеДанные.СуммаАвтоматическойСкидки <> 0) Тогда
		Элемент.ТекущиеДанные.ПроцентАвтоматическойСкидки = 0;
		Элемент.ТекущиеДанные.СуммаАвтоматическойСкидки = 0;
		РассчитатьСуммуВСтрокеТабличнойЧасти();
		ОбновитьПодвалФормы();
	ИначеЕсли ИспользоватьАвтоматическиеСкидки И НоваяСтрока И Копирование Тогда
		// Автоматические скидки стали неактуальны.
		СброситьФлагСкидкиРассчитаныКлиент("ПриНачалеРедактирования");
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	Если НоваяСтрока И Копирование Тогда
		Элемент.ТекущиеДанные.КлючСвязи = 0;
	КонецЕсли;
	
	// ГрупповоеИзменениеСтрок
	Элемент.ТекущиеДанные.Пометка = Истина;
	// Конец ГрупповоеИзменениеСтрок
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.Количество = НовоеКоличествоПриИзмененииНоменклатуры;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ЗапасыПриОкончанииРедактированияКлиент();
	
КонецПроцедуры // ЗапасыПриОкончанииРедактирования()

&НаКлиенте
Процедура ЗапасыПриОкончанииРедактированияКлиент()
	
	ОбновитьПодвалФормы();
	РассчитатьОбъемИВесВДокументе();
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПослеУдаления(Элемент)
	
	ВыполнитьДействияПослеУдаленияСтрокиЗапасы();
	
КонецПроцедуры // ЗапасыПослеУдаления()

&НаКлиенте
Процедура ВыполнитьДействияПослеУдаленияСтрокиЗапасы()
	
	ОбновитьПодвалФормы();
	РассчитатьОбъемИВесВДокументе();
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	// АвтоматическиеСкидки.
	СброситьФлагСкидкиРассчитаныКлиент("УдалениеСтроки");
	
КонецПроцедуры // ЗапасыПослеУдаления()

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьСбросКоличества И СбрасыватьКоличество
		И СтрокаТабличнойЧасти.Количество <> НовоеКоличествоПриИзмененииНоменклатуры Тогда
		
		ДопПараметр = Новый Структура();
		ДопПараметр.Вставить("Элемент", Элемент);
		ДопПараметр.Вставить("Количество", СтрокаТабличнойЧасти.Количество);
		Оповещение = Новый ОписаниеОповещения("ЗапасыПодтверждениеСбросаКоличестваЗавершение", ЭтотОбъект, ДопПараметр);
		ОткрытьФорму("ОбщаяФорма.ПодтверждениеСбросаКоличества", , , , , , Оповещение);
		
	Иначе
		
		Если СбрасыватьКоличество Тогда
			НовоеКоличество = НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
		ЗапасыНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество);
		
	КонецЕсли;	
	
КонецПроцедуры // ЗапасыНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗапасыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
 	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
	
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "СчетНаОплату", НастройкиФормыВыбораНоменклатуры, Истина, "Запасы", ВыбранноеЗначение.СтруктураНастроек);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("ДатаОбработки",	 	Объект.Дата);
	СтруктураДанные.Вставить("ВидЦен",			 	Объект.ВидЦен);
	СтруктураДанные.Вставить("ВалютаДокумента",	 	Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("СуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
	
	СтруктураДанные.Вставить("СтавкаНДС", 			СтрокаТабличнойЧасти.СтавкаНДС);
	СтруктураДанные.Вставить("Номенклатура",	 	СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",	 	СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("ЕдиницаИзмерения", 	СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, СтрокаТабличнойЧасти, СтруктураДанные);

	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	Если СтруктураДанные.ЭтоНабор Тогда
		
		// Наборы
		ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, СтрокаТабличнойЧасти, СтруктураДанные);
		
		// АвтоматическиеСкидки.
		СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
		// Конец АвтоматическиеСкидки
		
		ЗаполнитьПризнакиИспользованияХарактеристик();
	
	Иначе
		
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
		СтрокаТабличнойЧасти.Содержание = "";
		РассчитатьСуммуВСтрокеТабличнойЧасти();
		
		Если СтруктураДанные.Свойство("МинимальнаяЦена")
			И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
			СтрокаТабличнойЧасти.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;			
		КонецЕсли;
		
	КонецЕсли;
		
	ОбновитьПодвалФормы();
	
КонецПроцедуры // ЗапасыХарактеристикаПриИзменении()

&НаКлиенте
Процедура ЗапасыСодержаниеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		ШаблонСодержания = ТекстСодержания(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика);
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ШаблонСодержания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Запасы.ТекущиеДанные;
	СтруктураРеквизита = Новый Структура;
	СтруктураРеквизита.Вставить("Объект", "Объект");
	СтруктураРеквизита.Вставить("ТабЧасть", "Запасы");
	СтруктураРеквизита.Вставить("НомерСтроки", ТекущаяСтрока.НомерСтроки - 1);
	СтруктураРеквизита.Вставить("ИмяРеквизита", "Содержание");
	ЗаголовокФормыРедактирования = СтрШаблон(НСтр("ru='%1: содержание'"), Строка(ТекущаяСтрока.Номенклатура));
	ОбщегоНазначенияУНФКлиент.ПоказатьФормуРедактированияРеквизита(Элемент.ТекстРедактирования, ЭтотОбъект,
		СтруктураРеквизита, ЗаголовокФормыРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		СтрокаТабличнойЧасти.Вес = СтрокаТабличнойЧасти.ВесЕдиницыТовара * СтрокаТабличнойЧасти.Количество;
		СтрокаТабличнойЧасти.Объем = СтрокаТабличнойЧасти.ОбъемЕдиницыТовара * СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыКоличествоПриИзменении()

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Цена = 0
		И СтрокаТабличнойЧасти.Вес = 0
		И СтрокаТабличнойЧасти.Объем = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.Номенклатура, Неопределено, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
		СтруктураДанные,
		ВесИОбъемЕдиницТоваров(СтрокаТабличнойЧасти.Номенклатура, ВыбранноеЗначение, Коэффициент));
	КонецЕсли;
	
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		Если КэшЗначений.ИспользоватьМинимальныеЦены
			И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
			
			СтрокаТабличнойЧасти.МинимальнаяЦена = СтрокаТабличнойЧасти.МинимальнаяЦена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
		
		КонецЕсли;
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
		СтрокаТабличнойЧасти.ВесЕдиницыТовара = СтруктураДанные.ВесЕдиницыТовара;
		СтрокаТабличнойЧасти.Вес = СтрокаТабличнойЧасти.ВесЕдиницыТовара * СтрокаТабличнойЧасти.Количество;
		СтрокаТабличнойЧасти.ОбъемЕдиницыТовара = СтруктураДанные.ОбъемЕдиницыТовара;
		СтрокаТабличнойЧасти.Объем = СтрокаТабличнойЧасти.ОбъемЕдиницыТовара * СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	РассчитатьОбъемИВесВДокументе();
	
КонецПроцедуры // ЗапасыЕдиницаИзмеренияОбработкаВыбора()

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияПриИзменении(Элемент)
	
	// В процедуре РассчитатьСуммуВСтрокеТабличнойЧасти есть вызов серверной процедуры.
	// Из-за этого данный вызов нельзя выполнить в процедуре ЗапасыЕдиницаИзмеренияОбработкаВыбора.
	// Использование ЗапасыЕдиницаИзмеренияОбработкаВыбора более оптимально, т.к. позволяет отказаться от выполнения
	// большей части алгоритма, если единица измерения не поменялась.
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	ОбновитьПодвалФормы();
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры // ЗапасыЦенаПриИзменении()

&НаКлиенте
Процедура ЗапасыПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	ПараметрыРасчета = Новый Структура("РассчитатьСуммуСкидки, СброситьФлагСкидкиРассчитаны", Истина, Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбновитьПодвалФормы();
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры // ЗапасыПроцентСкидкиНаценкиПриИзменении()

&НаКлиенте
Процедура ЗапасыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	ПараметрыРасчета = Новый Структура("РассчитатьСуммуСкидки, СброситьФлагСкидкиРассчитаны, РассчитатьЦену", Истина, Истина, Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбновитьПодвалФормы();
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры // ЗапасыСуммаПриИзменении()

&НаКлиенте
Процедура ЗапасыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(СтрокаТабличнойЧасти, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры  // ЗапасыСтавкаНДСПриИзменении()

&НаКлиенте
Процедура ЗапасыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры // ЗапасыСуммаНДСПриИзменении()

&НаКлиенте
Процедура ЗапасыВесПриИзменении(Элемент)
	
	РассчитатьОбъемИВесВДокументе();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыОбъемПриИзменении(Элемент)
	
	РассчитатьОбъемИВесВДокументе();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	// Наборы
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ХарактеристикиНабора(СтрокаТабличнойЧасти.Номенклатура, Текст);
	КонецЕсли;
	// Конец Наборы
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	// Наборы
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		СтандартнаяОбработка = Ложь;
		СтруктураОткрытия = Новый Структура;
		СтруктураОткрытия.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураОткрытия.Вставить("РежимВыбора", Истина);
		СтруктураОткрытия.Вставить("ЗакрыватьПриВыборе", Истина);
		ОткрытьФорму("РегистрСведений.СоставНаборов.Форма.ФормаРедактированияСостава", СтруктураОткрытия, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	КонецЕсли;
	// Конец Наборы
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСуммаСкидкиНаценкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	ПараметрыРасчета = Новый Структура("РассчитатьПроцентСкидки, СброситьФлагСкидкиРассчитаны", Истина, Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);

	ОбновитьПодвалФормы();
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры // ЗапасыПроцентСкидкиНаценкиПриИзменении()

&НаКлиенте
Процедура ЗапасыПодтверждениеСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗапрашиватьСбросКоличества = Результат.ЗапрашиватьСбросКоличества;
		Если НЕ ЗапрашиватьСбросКоличества Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		КонецЕсли;
		Если Результат.СбрасыватьКоличество Тогда
			НовоеКоличество = Результат.НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = ДополнительныеПараметры.Количество;
		КонецЕсли;
	Иначе
		НовоеКоличество = ДополнительныеПараметры.Количество;
	КонецЕсли;
	
	ЗапасыНоменклатураПриИзмененииПродолжить(ДополнительныеПараметры.Элемент, НовоеКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество)

	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("Организация", 	 Объект.Организация);
	СтруктураДанные.Вставить("ДатаОбработки",	 Объект.Дата);
	СтруктураДанные.Вставить("ВидЦен",			 Объект.ВидЦен);
	СтруктураДанные.Вставить("ВалютаДокумента",	 Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураДанные.Вставить("Номенклатура",	 СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",	 СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия",	 СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("Коэффициент",		 1);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	// Конец ДисконтныеКарты
	
	СтатусПартии = Новый СписокЗначений;
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
	
	СтруктураДанные.Вставить("СтатусПартии", СтатусПартии);
	
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, СтрокаТабличнойЧасти, СтруктураДанные);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	Если СтруктураДанные.ЭтоНабор И НЕ СтруктураДанные.ИспользоватьХарактеристики Тогда
		
		// Наборы
		ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, СтрокаТабличнойЧасти, СтруктураДанные);
		
		ЗаполнитьПризнакиИспользованияХарактеристик();
		
		// АвтоматическиеСкидки.
		СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
		// Конец АвтоматическиеСкидки
	
		#Если ВебКлиент Тогда
		Элементы.Запасы.ЗакончитьРедактированиеСтроки(Истина);
		#КонецЕсли 
		
	Иначе
		
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Количество = НовоеКоличество;
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
		СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		СтрокаТабличнойЧасти.Содержание = ""; 
		
		Если СтруктураДанные.Свойство("МинимальнаяЦена") 
			И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
			СтрокаТабличнойЧасти.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;			
		КонецЕсли;
		
		СтрокаТабличнойЧасти.ВесЕдиницыТовара = СтруктураДанные.ВесЕдиницыТовара;
		СтрокаТабличнойЧасти.Вес = СтрокаТабличнойЧасти.ВесЕдиницыТовара * СтрокаТабличнойЧасти.Количество;
		СтрокаТабличнойЧасти.ОбъемЕдиницыТовара = СтруктураДанные.ОбъемЕдиницыТовара;
		СтрокаТабличнойЧасти.Объем = СтрокаТабличнойЧасти.ОбъемЕдиницыТовара * СтрокаТабличнойЧасти.Количество;
		
		СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
		СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
		СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
		
		Если СтруктураДанные.ИспользоватьХарактеристики Тогда
			Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
				СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
				СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
			Иначе
				СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
			КонецЕсли;
		КонецЕсли;
		
		//Партии
		СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
		СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
		
		Если СтруктураДанные.ИспользоватьПартии Тогда
			Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
				СтрокаТабличнойЧасти.Партия = СтруктураВыбораНоменклатуры.Партия;
				СтруктураВыбораНоменклатуры.Партия = Неопределено;
			Иначе
				СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
			КонецЕсли;
		КонецЕсли;
		// Конец Партии
		
		// Наборы
		СтрокаТабличнойЧасти.ЭтоНабор = СтруктураДанные.ЭтоНабор;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти();
		
	КонецЕсли;
	
	ПодборНоменклатурыИзСписка = Ложь;
		
	ОбновитьПодвалФормы();
	РассчитатьОбъемИВесВДокументе();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаБиллинга

&НаКлиенте
Процедура РасшифровкаБиллингаПриИзменении(Элемент)
	
	// АвтоматическиеСкидки.
	СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти");
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаБиллингаОбъектДоговораОбслуживанияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаБиллинга.ТекущиеДанные;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ОбъектДоговораОбслуживания", СтрокаТабличнойЧасти.ОбъектДоговораОбслуживания);
	ДанныеЗаполнения.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	ДанныеЗаполнения.Вставить("ПредставлениеВСчете");
	ДанныеЗаполнения.Вставить("Количество");
	ДанныеЗаполнения.Вставить("ЕдиницаИзмерения");
	ДанныеЗаполнения.Вставить("Цена");
	ДанныеЗаполнения.Вставить("Сумма");
	РасшифровкаБиллингаПриИзмененииОбъектаДоговораОбслуживания(ДанныеЗаполнения);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеЗаполнения);
	РасшифровкаБиллингаРассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.ЭтоПланСчетов = НЕ ТипЗнч(СтрокаТабличнойЧасти.ОбъектДоговораОбслуживания) = Тип("СправочникСсылка.Номенклатура");
	
	ПерезаполнитьДанныеПоРасшифровкеБиллинга();
	ОбновитьПодвалФормы();
	
	// Характеристики
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = Ложь;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = Ложь;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.ОбъектДоговораОбслуживания) = Тип("СправочникСсылка.Номенклатура")
		Тогда	
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Организация", 	 Объект.Организация);
		СтруктураДанные.Вставить("ДатаОбработки",	 Объект.Дата);
		СтруктураДанные.Вставить("ВидЦен",			 Объект.ВидЦен);
		СтруктураДанные.Вставить("ВалютаДокумента",	 Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("Номенклатура",	 СтрокаТабличнойЧасти.ОбъектДоговораОбслуживания);
		СтруктураДанные.Вставить("Характеристика",	 СтрокаТабличнойЧасти.Характеристика);
		СтруктураДанные.Вставить("Коэффициент",		 1);
		СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
		СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
		
		Если СтруктураДанные.ИспользоватьХарактеристики
			Тогда
			СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
		КонецЕсли;
	КонецЕсли;
	// Конец Характеристики
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаБиллингаХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаБиллинга.ТекущиеДанные;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ОбъектДоговораОбслуживания", СтрокаТабличнойЧасти.ОбъектДоговораОбслуживания);
	ДанныеЗаполнения.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	ДанныеЗаполнения.Вставить("ПредставлениеВСчете");
	ДанныеЗаполнения.Вставить("Количество");
	ДанныеЗаполнения.Вставить("ЕдиницаИзмерения");
	ДанныеЗаполнения.Вставить("Цена");
	ДанныеЗаполнения.Вставить("Сумма");
	РасшифровкаБиллингаПриИзмененииОбъектаДоговораОбслуживания(ДанныеЗаполнения);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеЗаполнения);
	РасшифровкаБиллингаРассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.ЭтоПланСчетов = НЕ ТипЗнч(СтрокаТабличнойЧасти.ОбъектДоговораОбслуживания) = Тип("СправочникСсылка.Номенклатура");
	
	ПерезаполнитьДанныеПоРасшифровкеБиллинга();
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаБиллингаКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаБиллинга.ТекущиеДанные;
	РасшифровкаБиллингаРассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	
	ПерезаполнитьДанныеПоРасшифровкеБиллинга();
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаБиллингаЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаБиллинга.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение 
		ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура("Количество,Цена,Сумма", СтрокаТабличнойЧасти.Количество, СтрокаТабличнойЧасти.Цена, СтрокаТабличнойЧасти.Сумма);
	РасшифровкаБиллингаПриИзмененииЕдиницыИзмерения(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение, ДанныеЗаполнения);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеЗаполнения);
	
	ПерезаполнитьДанныеПоРасшифровкеБиллинга();
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаБиллингаЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаБиллинга.ТекущиеДанные;
	РасшифровкаБиллингаРассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	
	ПерезаполнитьДанныеПоРасшифровкеБиллинга();
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаБиллингаСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаБиллинга.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	ПерезаполнитьДанныеПоРасшифровкеБиллинга();
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаБиллингаПредставлениеВСчетеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.РасшифровкаБиллинга.ТекущиеДанные;
	ТекущаяСтрока.Содержание = "";
	
	ПерезаполнитьДанныеПоРасшифровкеБиллинга();
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаБиллингаСодержаниеПриИзменении(Элемент)
	
	ПерезаполнитьДанныеПоРасшифровкеБиллинга();
	ОбновитьПодвалФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПлатежныйКалендарь

&НаКлиенте
Процедура ПлатежныйКалендарьПередУдалением(Элемент, Отказ)
	
	Если Объект.ПлатежныйКалендарь.Количество() = 1 Тогда
		Объект.ЗапланироватьОплату = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныйКалендарьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Объект.ЗапланироватьОплату = Истина;
		ТекущаяСтрока = Элемент.ТекущиеДанные;
		ПроцентОплатыИтог = Объект.ПлатежныйКалендарь.Итог("ПроцентОплаты");
		
		Если ПроцентОплатыИтог > 100 Тогда
			ТекущаяСтрока.ПроцентОплаты = ТекущаяСтрока.ПроцентОплаты - (ПроцентОплатыИтог - 100);
		КонецЕсли;
		
		ТекущаяСтрока.СуммаОплаты = Окр((Объект.Запасы.Итог("Всего") + СтоимостьДоставкиСНДС) * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
		ТекущаяСтрока.СуммаНДСОплаты = Окр((Объект.Запасы.Итог("СуммаНДС") + Объект.СуммаНДСДоставки) * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
		
		Если Объект.ПлатежныйКалендарь.Итог("ПроцентОплаты") = 100 И Объект.ПлатежныйКалендарь.Итог("СуммаОплаты") <> ИтогВсего Тогда
			ОбработатьИтогиПлатежныйКалендарь();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПлатежныйКалендарьПроцентОплатыПриИзменении(Элемент)
	
	Если Элементы.РедактироватьСписком.Пометка Тогда
		ТекущаяСтрока = Элементы.СписокПлатежныйКалендарь.ТекущиеДанные;
	Иначе
		ТекущаяСтрока = Объект.ПлатежныйКалендарь[0];
	КонецЕсли;
	ПроцентОплатыИтог = Объект.ПлатежныйКалендарь.Итог("ПроцентОплаты");
	
	Если ПроцентОплатыИтог > 100 Тогда
		ТекущаяСтрока.ПроцентОплаты = ТекущаяСтрока.ПроцентОплаты - (ПроцентОплатыИтог - 100);
	КонецЕсли;
	
	ТекущаяСтрока.СуммаОплаты = Окр((Объект.Запасы.Итог("Всего") + СтоимостьДоставкиСНДС) * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
	ТекущаяСтрока.СуммаНДСОплаты = Окр((Объект.Запасы.Итог("СуммаНДС") + Объект.СуммаНДСДоставки) * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
	
	Если Объект.ПлатежныйКалендарь.Итог("ПроцентОплаты") = 100 И Объект.ПлатежныйКалендарь.Итог("СуммаОплаты") <> ИтогВсего Тогда
		ОбработатьИтогиПлатежныйКалендарь();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПлатежныйКалендарьСуммаОплатыПриИзменении(Элемент)
	
	Если Элементы.РедактироватьСписком.Пометка Тогда
		ТекущаяСтрока = Элементы.СписокПлатежныйКалендарь.ТекущиеДанные;
	Иначе
		ТекущаяСтрока = Объект.ПлатежныйКалендарь[0];
	КонецЕсли;
	ЗапасыИтог = Объект.Запасы.Итог("Всего") + СтоимостьДоставкиСНДС;
	ПлатежныйКалендарьИтог = Объект.ПлатежныйКалендарь.Итог("СуммаОплаты");
	
	Если ПлатежныйКалендарьИтог > ЗапасыИтог Тогда
		ТекущаяСтрока.СуммаОплаты = ТекущаяСтрока.СуммаОплаты - (ПлатежныйКалендарьИтог - ЗапасыИтог);
	КонецЕсли;
	
	ТекущаяСтрока.ПроцентОплаты = ?(ЗапасыИтог = 0, 0, Окр(ТекущаяСтрока.СуммаОплаты / ЗапасыИтог * 100, 2, 1));
	ТекущаяСтрока.СуммаНДСОплаты = Окр(Объект.Запасы.Итог("СуммаНДС") * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
	
	Если Объект.ПлатежныйКалендарь.Итог("ПроцентОплаты") = 100 И Объект.ПлатежныйКалендарь.Итог("СуммаОплаты") <> ИтогВсего Тогда
		ОбработатьИтогиПлатежныйКалендарь();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПлатежныйКалендарьСуммаНДСОплатыПриИзменении(Элемент)
	
	Если Элементы.РедактироватьСписком.Пометка Тогда
		ТекущаяСтрока = Элементы.СписокПлатежныйКалендарь.ТекущиеДанные;
	Иначе
		ТекущаяСтрока = Объект.ПлатежныйКалендарь[0];
	КонецЕсли;
	
	ЗапасыИтог = Объект.Запасы.Итог("СуммаНДС");
	ПлатежныйКалендарьИтог = Объект.ПлатежныйКалендарь.Итог("СуммаНДСОплаты");
	
	Если ПлатежныйКалендарьИтог > ЗапасыИтог Тогда
		ТекущаяСтрока.СуммаНДСОплаты = ТекущаяСтрока.СуммаНДСОплаты - (ПлатежныйКалендарьИтог - ЗапасыИтог);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьИтогиПлатежныйКалендарь()
	
	ТаблицаРаспределения = Объект.ПлатежныйКалендарь.Выгрузить();
	РасчетыПроведениеДокументов.РаспределитьСуммуПоКолонкеТаблицы(ИтогВсего, ТаблицаРаспределения, "СуммаОплаты",
		"ПроцентОплаты");
	Объект.ПлатежныйКалендарь.Загрузить(ТаблицаРаспределения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодарки
&НаКлиенте
Процедура ПодаркиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьШаблоныПечатиДоговоровКонтрагентов(Команда)
	
	ШаблоныПечатиОфисныхДокументовКлиент.ОткрытьШаблоныПечатиОфисныхДокументов(
	ПредопределенноеЗначение("Перечисление.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаСчет"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРеквизитыПечатиНажатие(Элемент)
	
	ОткрытьФормуРеквизитыПечати();
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ИмяТабличнойЧасти	= "Запасы";
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти);
	
КонецПроцедуры // Подбор()

&НаКлиенте
Процедура РедактироватьСписком(Команда)
	
	Если Элементы.РедактироватьСписком.Пометка И Объект.ПлатежныйКалендарь.Количество() > 1 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьВозможностьРедактированияСпискомЗавершение", ЭтотОбъект);
		
		ПоказатьВопрос(
			ОписаниеОповещения,
			НСтр("ru='Все строки кроме первой будут удалены. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	Элементы.РедактироватьСписком.Пометка = НЕ Элементы.РедактироватьСписком.Пометка;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект,
		Новый Структура("ТекШтрихкод", ТекШтрихкод));
	
	#Если МобильныйКлиент Тогда
	ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду", , , , , , ОбработкаЗавершения);
	#Иначе
	ПоказатьВводЗначения(ОбработкаЗавершения, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, СокрЛП(ДополнительныеПараметры.ТекШтрихкод), СокрЛП(Результат));
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
	КонецЕсли;
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры // ПоискПоШтрихкоду()

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтотОбъект, "Запасы");
	
КонецПроцедуры // ПолучитьВес()

&НаКлиенте
Процедура ПолучитьВесЗавершение(Параметры) Экспорт
	
	СтрокаТабличнойЧасти = Параметры;
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбновитьПодвалФормы();
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()

&НаКлиенте
Процедура НастроитьОкругления(Команда)
	
	ОткрытьФорму("Обработка.ВидыСкидокНаценокРучныеИАвтоматические.Форма", Новый Структура("Округления", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", "Запасы");
	
	ПодключаемоеОборудованиеУНФКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина, ДополнительныеПараметры);
	
КонецПроцедуры

// Конец ПодключаемоеОборудование

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", КэшЗначений.НаборСвойств_Документ_СчетНаОплату);
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы, , , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСбросаКоличества(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтрокаПоиска", НСтр("ru = 'Сбрасывать количество при изменении номенклатуры'"));
	Оповещение = Новый ОписаниеОповещения("НастройкаСбросаКоличестваЗавершение", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.НастройкиПользователей.Форма.ФормаНастройкиПользователя", СтруктураПараметров, , , , ,
		Оповещение);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, 
		Элементы.ЗапасыКонтекстноеМенюНастройкаСбросаКоличества, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НастройкиКоличества = ПолучитьНастройкиИзмененияКоличества();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиКоличества);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаФормы(Команда)
	
	ОткрытьФормуНастройки(Истина);
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элементы.ФормаНастройкаФормы, "Нажатие");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыполнитьПересчетНДСС18На20(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Или 
		Результат = КодВозвратаДиалога.Нет Тогда
		
		СтавкиСоответствие = ПолучитьСтавкиНДС();
		СтавкаНДС18 = СтавкиСоответствие.Получить("НДС18");
		СтавкаНДС18Расчетная = СтавкиСоответствие.Получить("НДС18Расчетная");
		СтавкаНДС20 = СтавкиСоответствие.Получить("НДС20");
		СтавкаНДС20Расчетная = СтавкиСоответствие.Получить("НДС20Расчетная");
		
		Для Каждого СтрокаЗапасы Из Объект.Запасы Цикл
			Если СтрокаЗапасы.СтавкаНДС = СтавкаНДС18 И ЗначениеЗаполнено(СтавкаНДС20) Тогда
				// Сумма изменяется на сумму НДС
				Если Результат = КодВозвратаДиалога.Нет  Тогда
					СтавкаНДСТекущая = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаЗапасы.СтавкаНДС);
					СтавкаНДСНовая = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДС20);
					СтрокаЗапасы.Сумма = ТабличныеЧастиУНФКлиент.НоваяСтоимостьСУчетомИзмененийПоНДС2018(СтрокаЗапасы.Сумма, СтавкаНДСТекущая, СтавкаНДСНовая)
				КонецЕсли;
				СтрокаЗапасы.СтавкаНДС = СтавкаНДС20;
				ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(СтрокаЗапасы, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
			ИначеЕсли СтрокаЗапасы.СтавкаНДС = СтавкаНДС18Расчетная И ЗначениеЗаполнено(СтавкаНДС20Расчетная) Тогда
				// Сумма изменяется на сумму НДС
				Если Результат = КодВозвратаДиалога.Нет  Тогда
					СтавкаНДСТекущая = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаЗапасы.СтавкаНДС)%100;
					СтавкаНДСНовая = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДС20Расчетная)%100;
					СтрокаЗапасы.Сумма = ТабличныеЧастиУНФКлиент.НоваяСтоимостьСУчетомИзмененийПоНДС2018(СтрокаЗапасы.Сумма, СтавкаНДСТекущая, СтавкаНДСНовая)
				КонецЕсли;
				СтрокаЗапасы.СтавкаНДС = СтавкаНДС20Расчетная;
				ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(СтрокаЗапасы, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
			КонецЕсли;
		КонецЦикла;
		
	ОбновитьПодвалФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция  ПолучитьСтавкиНДС()
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("НДС18", Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.Общая, Дата('20180101')));
	Соответствие.Вставить("НДС18Расчетная", Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.ОбщаяРасчетная, Дата('20180101')));
	Соответствие.Вставить("НДС20", Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.Общая, Дата('20191111')));
	Соответствие.Вставить("НДС20Расчетная", Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.ОбщаяРасчетная, Дата('20191111')));
	
	Возврат Соответствие;
КонецФункции

&НаСервере
Процедура УстановитьПараметрыВыбораНоменклатуры()
	
	НовыйМассивТипыПартий = Новый Массив();
	НовыйМассивТипыПартий.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	НовыйМассивТипыПартий.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
	
	МассивПартии = Новый ФиксированныйМассив(НовыйМассивТипыПартий);
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
	НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	Если Не ЗначениеЗаполнено(ВалютаРасчетов) Или ВалютаРасчетов = НациональнаяВалюта Тогда
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
	КонецЕсли;
	МассивЗапасыИУслуги = Новый ФиксированныйМассив(НовыйМассив);
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипНоменклатуры", МассивЗапасыИУслуги);
	НовыйПараметр2 = Новый ПараметрВыбора("Дополнительно.ОграничениеТипа", МассивЗапасыИУслуги);
	НовыйПараметр3 = Новый ПараметрВыбора("Дополнительно.ТипВладельца", "СчетНаОплату");
	НовыйПараметр4 = Новый ПараметрВыбора("Дополнительно.СтатусыПартий", МассивПартии);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыйМассив.Добавить(НовыйПараметр2);
	НовыйМассив.Добавить(НовыйПараметр3);
	НовыйМассив.Добавить(НовыйПараметр4);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыНоменклатура.ПараметрыВыбора = НовыеПараметры;
	
	Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
		Если СтрокаЗапасы.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат")
			И ЗначениеЗаполнено(ВалютаРасчетов) И ВалютаРасчетов <> НациональнаяВалюта Тогда
			СтрокаЗапасы.Номенклатура = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "СчетНаОплату", НастройкиФормыВыбораНоменклатуры);
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	// Наборы
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.НоменклатураНабора", Справочники.Номенклатура.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыНоменклатура,ЗапасыХарактеристика,ЗапасыКоличество,ЗапасыЕдиницаИзмерения");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	// Конец Наборы
	
	// Скидки	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	ГруппаОтборов = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Объект.Запасы.ПроцентСкидкиНаценки", 100);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Объект.Запасы.СуммаСкидкиНаценки", Новый ПолеКомпоновкиДанных("Объект.Запасы.Сумма"),ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСумма");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ПроцентСкидкиНаценки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыПроцентСкидкиНаценки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "%");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.СуммаСкидкиНаценки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСуммаСкидкиНаценки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = 'сумма'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ПроцентАвтоматическойСкидки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыПроцентАвтоматическойСкидки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "%");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.СуммаАвтоматическойСкидки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСуммаАвтоматическойСкидки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = 'сумма'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);	
	// Конец Скидки
	
	// Характеристики
	НоменклатураВДокументахСервер.ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристик(ЭтаФорма);
	
	// Минимальные цены
	ЦенообразованиеСервер.УстановитьУсловноеОформлениеМинимальнойЦены(УсловноеОформление, "Запасы", ?(КэшЗначений.Свойство("ИспользоватьМинимальныеЦены"), КэшЗначений.ИспользоватьМинимальныеЦены, Ложь));

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияРеквизитовПечати(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ПечатьДокументовУНФКлиент.ОбновитьЗначенияРеквизитовПечати(ЭтотОбъект, Результат.ИзмененныеРеквизиты);
		
		Если Результат.Свойство("Команда") Тогда
			
			Подключаемый_ВыполнитьКоманду(Результат.Команда);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТипаОснованияЗавершение(ВыбранноеИмяФормы, Параметры) Экспорт
	
	Если ВыбранноеИмяФормы <> Неопределено Тогда
		
		СтруктураПараметровОтбора = Новый Структура();
		_ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
		ОткрытьФорму(ВыбранноеИмяФормы.Значение, СтруктураПараметровОтбора, ЭтотОбъект, ,,,_ОповещениеОЗакрытии);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснованиеЗавершение(ВыбранноеЗначение, Параметры) Экспорт

	Если ВыбранноеЗначение <> Неопределено Тогда
		Объект.ДокументОснование = ВыбранноеЗначение;
		Элементы.ДокументОснованиеНадпись.Заголовок = 
			РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(ВыбранноеЗначение);
		Модифицированность = Истина;
		
		ЗаполнитьПоОснованиюНачало();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюНачало() Экспорт

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьВыполнитьЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения, 
		НСтр("ru = 'Заполнить документ по выбранному основанию?'"), 
		РежимДиалогаВопрос.ДаНет, 0);		

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВыполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьПоДокументу();
		
		// Наборы
		ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы);
		// Конец Наборы
		
		ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
			УчетВалютныхОпераций);
		ПересчитатьПлатежныйКалендарь();
		
		УстановитьРеквизитыВидимости();
		УстановитьВидимостьДоговора();
		
		ОбновитьПодвалФормы();
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;

КонецПроцедуры  // ЗаполнитьВыполнить()

&НаСервере
Процедура ЗаполнитьПоДокументу()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(Объект.ДокументОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		Элементы.ПлатежныйКалендарьСуммаНДСОплаты.Видимость = Истина;
		Элементы.СписокПлатежныйКалендарьСуммаНДСОплаты.Видимость = Истина;
	Иначе	
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		Элементы.ПлатежныйКалендарьСуммаНДСОплаты.Видимость = Ложь;
		Элементы.СписокПлатежныйКалендарьСуммаНДСОплаты.Видимость = Ложь;
	КонецЕсли;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
	УстановитьПараметрыВыбораНоменклатуры();
	
КонецПроцедуры // ЗаполнитьПоДокументу()

&НаСервереБезКонтекста
Функция ПолучитьСрокОплатыПокупателя(Договор)
	
	Возврат Договор.СрокОплатыПокупателя;

КонецФункции // ПолучитьСрокОплатыПокупателя()

&НаСервере
Процедура ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС(ЭтоОткрытие = Ложь)
	
	НалогообложениеПередИзменением = Объект.НалогообложениеНДС;
	Объект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Объект.Организация,, Объект.Дата);
	
	Если НЕ НалогообложениеПередИзменением = Объект.НалогообложениеНДС ИЛИ ЭтоОткрытие Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		Элементы.ПлатежныйКалендарьСуммаНДСОплаты.Видимость = Истина;
		Элементы.СписокПлатежныйКалендарьСуммаНДСОплаты.Видимость = Истина;
		Элементы.СтавкаНДСДоставки.Видимость = Истина;
		Элементы.СуммаНДСДоставки.Видимость = Истина;
		
		СтавкаНДСПоУмолчанию = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			КонецЕсли;	
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;	
		
		// Доставка
		Если ЗначениеЗаполнено(Объект.НоменклатураДоставки) Тогда
			Объект.СтавкаНДСДоставки = Справочники.СтавкиНДС.СтавкаНДС(Объект.НоменклатураДоставки.ВидСтавкиНДС);
			Если НЕ ЗначениеЗаполнено(Объект.СтавкаНДСДоставки) Тогда
				Объект.СтавкаНДСДоставки = СтавкаНДСПоУмолчанию;
			КонецЕсли; 
			Если Объект.СтоимостьДоставки<>0 Тогда
				СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДСДоставки);
				Объект.СуммаНДСДоставки = СтоимостьДоставкиСНДС - СтоимостьДоставкиСНДС / ((СтавкаНДС + 100) / 100);
				Объект.СтоимостьДоставки = СтоимостьДоставкиСНДС - ?(Объект.СуммаВключаетНДС, 0, Объект.СуммаНДСДоставки);
			КонецЕсли; 
		КонецЕсли;
		// Конец Доставка
		
	Иначе
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		Элементы.ПлатежныйКалендарьСуммаНДСОплаты.Видимость = Ложь;
		Элементы.СписокПлатежныйКалендарьСуммаНДСОплаты.Видимость = Ложь;
		// Доставка
		Элементы.СтавкаНДСДоставки.Видимость = Ложь;
		Элементы.СуммаНДСДоставки.Видимость = Ложь;
		
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда	
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
		КонецЕсли;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;	
		
		// Доставка
		Объект.СтавкаНДСДоставки = СтавкаНДСПоУмолчанию;
		Объект.СуммаНДСДоставки = 0;
		// Конец Доставка
		
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()	

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	// Наборы
	Если НЕ СтруктураДанные.Свойство("ЕдиницаИзмерения") Тогда
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	КонецЕсли; 
	Если НЕ СтруктураДанные.Свойство("Коэффициент") Тогда
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения)=Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
		Иначе
			СтруктураДанные.Вставить("Коэффициент", 1);
		КонецЕсли; 
	КонецЕсли;
	// Конец Наборы
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС") 
		И НЕ СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.ВидСтавкиНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки), СтруктураДанные.ДатаОбработки, ТекущаяДатаСеанса())));
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки), СтруктураДанные.ДатаОбработки, ТекущаяДатаСеанса())));
	КонецЕсли;
	
	// Характеристики
	СтруктураДанные.Вставить("ИспользоватьХарактеристики",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",Ложь);
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьХарактеристики
		Тогда
		ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура);
		
		Если Не ЗначенияПоУмолчанию = Неопределено
			Тогда
			ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
		КонецЕсли;
		
		Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика",ХарактеристикаПоУмолчанию);
		Иначе
			СтруктураДанные.Характеристика = ?(ЗначениеЗаполнено(СтруктураДанные.Характеристика), СтруктураДанные.Характеристика, ХарактеристикаПоУмолчанию);
		КонецЕсли;
		
		СтруктураДанные.Вставить("ИспользоватьХарактеристики",Истина);
		СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",СтруктураДанные.Номенклатура.ПроверятьЗаполнениеХарактеристики);
	КонецЕсли; 
	// Конец Характеристики
	
	//Партии
	СтруктураДанные.Вставить("ИспользоватьПартии",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеПартий",Ложь);
	
	Если НЕ СтруктураДанные.Свойство("Партия") Тогда
		СтруктураДанные.Вставить("Партия", Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьПартии
		Тогда
		
		Если СтруктураДанные.Свойство("СтатусПартии")
			Тогда
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтруктураДанные.СтатусПартии);
		Иначе
			Если Не СтруктураДанные.Свойство("ВидОперации")
				Тогда
				ВидОперации = Неопределено
			Иначе
				ВидОперации = СтруктураДанные.ВидОперации
			КонецЕсли;
			
			СтатусПартии = НоменклатураВДокументахСервер.СоответствиеВидаОперацииИлиХозОперацииСтатусуПартии(, ВидОперации);
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтатусПартии);
		КонецЕсли;
		
		ПартияПоУмолчанию = Справочники.ПартииНоменклатуры.ПустаяСсылка();
		
		Если Не ЗначенияПартииПоУмолчанию = Неопределено
			Тогда
			ПартияПоУмолчанию = ЗначенияПартииПоУмолчанию;
		КонецЕсли;
		
		СтруктураДанные.Партия = ?(ЗначениеЗаполнено(СтруктураДанные.Партия), СтруктураДанные.Партия, ПартияПоУмолчанию);
		
		СтруктураДанные.ПроверятьЗаполнениеПартий = СтруктураДанные.Номенклатура.ПроверятьЗаполнениеПартий;
		СтруктураДанные.ИспользоватьПартии = Истина;
		
	КонецЕсли;
	// Конец Партии
	
	Если СтруктураДанные.Свойство("Цена") И ЗначениеЗаполнено(СтруктураДанные.Цена) Тогда
		// При подборе наборов расчет цены не требуется - используется цена, указанная в подборе
	ИначеЕсли СтруктураДанные.Свойство("ВидЦен") Тогда
		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
	Иначе
		СтруктураДанные.Вставить("Цена", 0);
	КонецЕсли;
	
	СтруктураДанные.Вставить("МинимальнаяЦена", ЦенообразованиеСервер.ПолучитьМинимальнуюЦенуНоменклатуры(СтруктураДанные));

	Если СтруктураДанные.Свойство("ВидСкидкиНаценки") 
		И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки) Тогда
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки.Процент);
	Иначе
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", 0);
	КонецЕсли;
		
	Если СтруктураДанные.Свойство("ПроцентСкидкиПоДисконтнойКарте") 
		И ЗначениеЗаполнено(СтруктураДанные.ДисконтнаяКарта) Тогда
		ТекПроцент = СтруктураДанные.ПроцентСкидкиНаценки;
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", ТекПроцент + СтруктураДанные.ПроцентСкидкиПоДисконтнойКарте);
	КонецЕсли;

	СтруктураДанные.Вставить("ВесЕдиницыТовара", СтруктураДанные.Номенклатура.Вес);
	СтруктураДанные.Вставить("ОбъемЕдиницыТовара", СтруктураДанные.Номенклатура.Объем);
	
	// Наборы
	НаборыСервер.ДобавитьИнформациюОНабореПриПолученииДанныхНоменклатуры(СтруктураДанные);
	// Конец Наборы
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
		СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
	Иначе
		СтруктураДанные.Вставить("Коэффициент", 1);
	КонецЕсли;
	
	Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
	СтруктураДанные.Вставить("Цена", Цена);
	
	СтруктураДанные.Вставить("МинимальнаяЦена", ЦенообразованиеСервер.ПолучитьМинимальнуюЦенуНоменклатуры(СтруктураДанные));

	// Наборы
	НаборыСервер.ДобавитьИнформациюОНабореПриПолученииДанныхНоменклатуры(СтруктураДанные);
	// Конец Наборы
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(Номенклатура = Неопределено, ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	Результат = Новый Структура;
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		Результат.Вставить("ТекущийКоэффициент", 1);
	Иначе
		Результат.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Если ЕдиницаИзмерения = Неопределено Тогда
		Результат.Вставить("Коэффициент", 1);
	Иначе
		Результат.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Если Номенклатура <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
		Результат,
		ВесИОбъемЕдиницТоваров(Номенклатура, ЕдиницаИзмерения, Результат.Коэффициент));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВесИОбъемЕдиницТоваров(Знач Номенклатура, Знач ЕдиницаИзмерения, Знач Коэффициент)
	
	Возврат РегистрыСведений.ВесИОбъемЕдиницТоваров.Значения(Номенклатура, ЕдиницаИзмерения, Коэффициент);
	
КонецФункции

&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено, ПараметрыРасчета = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	КонецЕсли;
	
	Если ПараметрыРасчета=Неопределено Тогда
		ПараметрыРасчета = Новый Структура("СброситьФлагСкидкиРассчитаны",Истина);
	КонецЕсли;

	ПараметрыРасчета.Вставить("ИспользоватьМинимальныеЦены", КэшЗначений.ИспользоватьМинимальныеЦены);

	ПараметрыРасчета.Вставить("СуммаВключаетНДС",Объект.СуммаВключаетНДС);
	ТабличныеЧастиУНФКлиент.РассчитатьСуммыВСтрокеТЧ(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ЦенообразованиеКлиент.ПоказатьОповещениеПользователяОКорректировкеЦены(ПараметрыРасчета);

	// АвтоматическиеСкидки.
	ТребуетсяПересчет = СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти");
	// Конец АвтоматическиеСкидки
	
	Если ТребуетсяПересчет Тогда
		ЗапасыПриОкончанииРедактированияКлиент();
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

&НаКлиенте
Процедура ПересчитатьПлатежныйКалендарь()
	
	Для каждого ТекСтрока Из Объект.ПлатежныйКалендарь Цикл
		ТекСтрока.СуммаОплаты = Окр((Объект.Запасы.Итог("Всего") + СтоимостьДоставкиСНДС) * ТекСтрока.ПроцентОплаты / 100, 2, 1);
		ТекСтрока.СуммаНДСОплаты = Окр((Объект.Запасы.Итог("СуммаНДС") + Объект.СуммаНДСДоставки) * ТекСтрока.ПроцентОплаты / 100, 2, 1);
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь,
	ПерезаполнитьЦены = Ложь, ТекстПредупреждения = "")
	
	ПараметрыФормыЦеныИВалюта = ЦеныИВалютаКлиентСервер.НовыеПараметрыФормыЦеныИВалюта(Объект, ТолькоПросмотр,
		Компания, ПерезаполнитьЦены, ПересчитатьЦены, ТекстПредупреждения);
	ПараметрыФормыЦеныИВалюта.ВалютаПередИзменением = ВалютаРасчетовПередИзменением;
	
	ЦенообразованиеКлиент.ДополнитьСтруктуруВызоваФормыЦеныИВалютыСтруктурнойЕдиницей(Объект, Объект.Запасы,
		Элементы.Запасы.ТекущиеДанные, ПараметрыФормыЦеныИВалюта);

	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект,
		Новый Структура("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением));
	ОткрытьФорму("ОбщаяФорма.ЦеныИВалюта", ПараметрыФормыЦеныИВалюта, ЭтотОбъект, , , , ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

// Обработать изменения по кнопке цены и валюты завершение.
// 
// Параметры:
//  РезультатФормыЦеныИВалюта - см. ЦеныИВалютаКлиентСервер.РезультатФормыЦеныИВалюта
//  ДополнительныеПараметры - Структура - Дополнительные параметры
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатФормыЦеныИВалюта, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатФормыЦеныИВалюта) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РезультатФормыЦеныИВалюта.БылиВнесеныИзменения Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Объект.ВидЦен = РезультатФормыЦеныИВалюта.ВидЦен;
	Объект.ВидСкидкиНаценки = РезультатФормыЦеныИВалюта.ВидСкидкиНаценки;
	
	// ДисконтныеКарты
	Если ЗначениеЗаполнено(РезультатФормыЦеныИВалюта.ДисконтнаяКарта) И ЗначениеЗаполнено(
		РезультатФормыЦеныИВалюта.Контрагент) И Не Объект.Контрагент.Пустая() Тогда
		Если РезультатФормыЦеныИВалюта.Контрагент = Объект.Контрагент Тогда
			Объект.ДисконтнаяКарта = РезультатФормыЦеныИВалюта.ДисконтнаяКарта;
			Объект.ПроцентСкидкиПоДисконтнойКарте = РезультатФормыЦеныИВалюта.ПроцентСкидкиПоДисконтнойКарте;
		Иначе // Выдадим сообщение и не будем менять данные о дисконтной карте.
			ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр(
				"ru = 'Дисконтная карта не считана. Владелец дисконтной карты не совпадает с контрагентом в документе.'"), ,
				"Контрагент", "Объект");
		КонецЕсли;
	Иначе
		Объект.ДисконтнаяКарта = РезультатФормыЦеныИВалюта.ДисконтнаяКарта;
		Объект.ПроцентСкидкиПоДисконтнойКарте = РезультатФормыЦеныИВалюта.ПроцентСкидкиПоДисконтнойКарте;
	КонецЕсли;
	// Конец ДисконтныеКарты
	
	Объект.ВалютаДокумента = РезультатФормыЦеныИВалюта.ВалютаДокумента;
	Объект.Курс = РезультатФормыЦеныИВалюта.КурсРасчетов;
	Объект.Кратность = РезультатФормыЦеныИВалюта.КратностьРасчетов;
	Объект.СуммаВключаетНДС = РезультатФормыЦеныИВалюта.СуммаВключаетНДС;
	Объект.НалогообложениеНДС = РезультатФормыЦеныИВалюта.НалогообложениеНДС;
	
	ОбработатьИзмененияПоКнопкеЦеныИВалютыНаСервере(РезультатФормыЦеныИВалюта, ДополнительныеПараметры);
	
	// Пересчитываем цены по виду цен.
	Если РезультатФормыЦеныИВалюта.ПерезаполнитьЦены Тогда
		ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтотОбъект, "Запасы", Истина);
	КонецЕсли;
	
	// Пересчитываем цены по валюте.
	Если Не РезультатФормыЦеныИВалюта.ПерезаполнитьЦены И РезультатФормыЦеныИВалюта.ПересчитатьЦены Тогда
		ЦенообразованиеКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтотОбъект,
			ДополнительныеПараметры.ВалютаРасчетовПередИзменением, "Запасы", РезультатФормыЦеныИВалюта.КурсПересчетаЦен);
		// Доставка
		ПересчитатьЦенуДоставки(ДополнительныеПараметры.ВалютаРасчетовПередИзменением,
			РезультатФормыЦеныИВалюта.КурсПересчетаЦен);
		ОбновитьСуммуНДСДоставки();
	КонецЕсли;
	
	// Пересчитываем сумму если изменился признак Налогообложение НДС.
	Если РезультатФормыЦеныИВалюта.НалогообложениеНДС <> РезультатФормыЦеныИВалюта.ПредНалогообложениеНДС Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	КонецЕсли;
	
	// Пересчитываем сумму если изменился признак "Сумма включает НДС".
	Если НЕ РезультатФормыЦеныИВалюта.ПерезаполнитьЦены
		И НЕ РезультатФормыЦеныИВалюта.СуммаВключаетНДС = РезультатФормыЦеныИВалюта.ПредСуммаВключаетНДС Тогда
		ЦенообразованиеКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтотОбъект, "Запасы");
		Если СтоимостьДоставкиСНДС<>0 Тогда
			ОбновитьСуммуНДСДоставкиПриРасчете();
		КонецЕсли; 
	КонецЕсли;
	
	// АвтоматическиеСкидки
	Если РезультатФормыЦеныИВалюта.ПерезаполнитьСкидки ИЛИ РезультатФормыЦеныИВалюта.ПерезаполнитьЦены ИЛИ РезультатФормыЦеныИВалюта.ПересчитатьЦены Тогда
		СброситьФлагСкидкиРассчитаныКлиент("ПерезаполнениеПоДаннымФормыЦеныИВалюта");
	КонецЕсли;
	
	// Ручная скидка - заполнение полей ввода на форме
	СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект);
	// Конец Ручная скидка	
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение()

&НаСервере
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыНаСервере(РезультатЗакрытия, ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.ВалютаРасчетовПередИзменением <> РезультатЗакрытия.ВалютаДокумента Тогда
		
		Объект.БанковскийСчет = Справочники.БанковскиеСчета.БанковскийСчетСубъекта(Объект.Организация, Объект.ВалютаДокумента, Объект.Дата);
		
	КонецЕсли;
	
	ОбновитьКартинкуДисконтнойКарты();
	
КонецПроцедуры

// ПодключаемоеОборудование
&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	// Преобразование весовых штрихкодов.
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодамВМассиве(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		МассивДанныхШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если МассивДанныхШтрихкода <> Неопределено
			И МассивДанныхШтрихкода.Количество() <> 0 Тогда
			
			Для Каждого ДанныеШтрихкода Из МассивДанныхШтрихкода Цикл
				
				СтруктураДанныеНоменклатуры = Новый Структура();
				СтруктураДанныеНоменклатуры.Вставить("Организация", СтруктураДанные.Организация);
				СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
				СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
				СтруктураДанныеНоменклатуры.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
				СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", СтруктураДанные.НалогообложениеНДС);
				СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", СтруктураДанные.Дата);
				Если ЗначениеЗаполнено(СтруктураДанные.ВидЦен) Тогда
					СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", СтруктураДанные.Дата);
					СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", СтруктураДанные.ВалютаДокумента);
					СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", СтруктураДанные.СуммаВключаетНДС);
					СтруктураДанныеНоменклатуры.Вставить("ВидЦен", СтруктураДанные.ВидЦен);
					Если ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения)
						И ТипЗнч(ДанныеШтрихкода.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
						СтруктураДанныеНоменклатуры.Вставить("Коэффициент", ДанныеШтрихкода.ЕдиницаИзмерения.Коэффициент);
					Иначе
						СтруктураДанныеНоменклатуры.Вставить("Коэффициент", 1);
					КонецЕсли;
					СтруктураДанныеНоменклатуры.Вставить("ВидСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки);
				КонецЕсли;
				
				// ДисконтныеКарты
				СтруктураДанныеНоменклатуры.Вставить("ПроцентСкидкиПоДисконтнойКарте", СтруктураДанные.ПроцентСкидкиПоДисконтнойКарте);
				СтруктураДанныеНоменклатуры.Вставить("ДисконтнаяКарта", СтруктураДанные.ДисконтнаяКарта);
				// Конец ДисконтныеКарты 
				
				// МинимальныеЦены
				СтруктураДанныеНоменклатуры.Вставить("СтруктурнаяЕдиница", 	Неопределено);
				// Конец МинимальныеЦены
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтруктураДанные, "ЭтоНовыйОбъект") Тогда
					СтруктураДанныеНоменклатуры.Вставить("ЭтоНовыйОбъект", СтруктураДанные.ЭтоНовыйОбъект);
				КонецЕсли;
				
				ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
				
				Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
					ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	Для каждого парам Из Метаданные.Документы.СчетНаОплату.ТабличныеЧасти.Запасы.Реквизиты.Номенклатура.ПараметрыВыбора Цикл
		Если парам.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(парам.Значение)=Тип("ФиксированныйМассив") Тогда
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", парам.Значение);
			Иначе
			    МассивТипов = Новый Массив;
				МассивТипов.Добавить(парам.Значение);
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураДанные.Вставить("Дата", Объект.Дата);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	// Конец ДисконтныеКарты

	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, Неопределено, СтруктураДанные);

	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода.Количество() > 1 Тогда
			
			ПараметрыОткрытия = Новый Структура("МассивНоменклатуры, ТекШтрихкод", ДанныеШтрихкода, ТекШтрихкод);
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоДаннымШтрихкодовЗавершение", ЭтотОбъект, Новый Структура("СтруктураДанные", СтруктураДанные));
			
			ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ДублиНоменклатурыПоШтрихКодам",
				ПараметрыОткрытия, ЭтотОбъект, , , , ОповещениеОЗакрытии,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Продолжить;
		КонецЕсли;
		
		Если ДанныеШтрихкода <> Неопределено И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(
			ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры",
				ТекШтрихкод.Штрихкод, ДанныеШтрихкода[0].Номенклатура,
				ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры));
		Иначе
			
			ДанныеШтрихкода = ДанныеШтрихкода[0];
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
			ПараметрыПоиска.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			ПараметрыПоиска.Вставить("Партия", ДанныеШтрихкода.Партия);
			ПараметрыПоиска.Вставить("ЕдиницаИзмерения", ДанныеШтрихкода.ЕдиницаИзмерения);
			ПараметрыПоиска.Вставить("НоменклатураНабора", ПредопределенноеЗначение(
				"Справочник.Номенклатура.ПустаяСсылка"));
			МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(ПараметрыПоиска);
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				НоваяСтрока = Объект.Запасы.Добавить();
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
				Если КэшЗначений.ИспользоватьМинимальныеЦены
					И НоваяСтрока.Свойство("МинимальнаяЦена")
					И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("МинимальнаяЦена") Тогда
					
					НоваяСтрока.МинимальнаяЦена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.МинимальнаяЦена;
					
				КонецЕсли;
				НоваяСтрока.ПроцентСкидкиНаценки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПроцентСкидкиНаценки;
				НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
				НоваяСтрока.ВесЕдиницыТовара = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ВесЕдиницыТовара;
				НоваяСтрока.Вес = НоваяСтрока.ВесЕдиницыТовара * НоваяСтрока.Количество;
				НоваяСтрока.ОбъемЕдиницыТовара = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ОбъемЕдиницыТовара;
				НоваяСтрока.Объем = НоваяСтрока.ОбъемЕдиницыТовара * НоваяСтрока.Количество;
				
				Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
					// Наборы
					ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, НоваяСтрока, ДанныеШтрихкода.СтруктураДанныеНоменклатуры);
					// Конец Наборы
					// АвтоматическиеСкидки.
					СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
					// Конец АвтоматическиеСкидки
				Иначе
					РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
					Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				КонецЕсли;
			Иначе
				НайденнаяСтрока = МассивСтрокТЧ[0];
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + ТекШтрихкод.Количество;
				НайденнаяСтрока.Вес = НайденнаяСтрока.ВесЕдиницыТовара * НайденнаяСтрока.Количество;
				НайденнаяСтрока.Объем = НайденнаяСтрока.ОбъемЕдиницыТовара * НайденнаяСтрока.Количество;
				
				РассчитатьСуммуВСтрокеТабличнойЧасти(НайденнаяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьПодвалФормы();
	РассчитатьОбъемИВесВДокументе();
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа", НеизвестныеШтрихкоды,
		ШтрихкодыНекорректногоТипа);
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаКлиенте
Процедура ЗаполнитьПоДаннымШтрихкодовЗавершение(СтруктураНоменклатуры, Параметры) Экспорт
	
	Если СтруктураНоменклатуры = Неопределено Тогда Возврат КонецЕсли;
	
	ДанныеШтрихкода = СтруктураНоменклатуры.МассивНоменклатуры[0];
	ТекШтрихкод = СтруктураНоменклатуры.ТекШтрихкод;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	СтруктураДанные = Параметры.СтруктураДанные;
	
	Если СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено Тогда
		ОписаниеШтрихкода = Новый Структура;
		ОписаниеШтрихкода.Вставить("Штрихкод", ТекШтрихкод.Штрихкод);
		ОписаниеШтрихкода.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
		ОписаниеШтрихкода.Вставить("ТипНоменклатуры", ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры);
		ШтрихкодыНекорректногоТипа.Добавить(ОписаниеШтрихкода);
	Иначе
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
		ПараметрыПоиска.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
		ПараметрыПоиска.Вставить("Партия", ДанныеШтрихкода.Партия);
		ПараметрыПоиска.Вставить("ЕдиницаИзмерения", ДанныеШтрихкода.ЕдиницаИзмерения);
		ПараметрыПоиска.Вставить("НоменклатураНабора", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
		МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТЧ.Количество() = 0 Тогда
			НоваяСтрока = Объект.Запасы.Добавить();
			НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
			НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
			НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
			НоваяСтрока.Количество = ТекШтрихкод.Количество;
			НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
			НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
			НоваяСтрока.ПроцентСкидкиНаценки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПроцентСкидкиНаценки;
			НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
			Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
				// Наборы
				ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, НоваяСтрока, ДанныеШтрихкода.СтруктураДанныеНоменклатуры);
				// Конец Наборы
				// АвтоматическиеСкидки.
				СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
				// Конец АвтоматическиеСкидки
			Иначе
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
		Иначе
			НайденнаяСтрока = МассивСтрокТЧ[0];
			НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + ТекШтрихкод.Количество;
			РассчитатьСуммуВСтрокеТабличнойЧасти(НайденнаяСтрока);
			Элементы.Запасы.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов) Экспорт
	
	Модифицированность = Истина;
	
	НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов);
	НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект,,,,Оповещение);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры
// Конец ПодключаемоеОборудование

&НаКлиенте
Процедура УстановитьВидимостьДоговора()
	
	Элементы.Договор.Видимость = Контрагент_ВестиРасчетыПоДоговорам;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРеквизитыВидимости()
	
	Контрагент_ВестиРасчетыПоДоговорам = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент,"ВестиРасчетыПоДоговорам", Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбораДоговора(Документ, Организация, Контрагент, Договор)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбораБанковскогоСчета(Договор, Организация, НациональнаяВалюта)
	
	РеквизитыДоговора = Справочники.ДоговорыКонтрагентов.РеквизитыРасчетовВУсловныхЕдиницах(Договор);
	
	СписокВалют = Новый СписокЗначений;
	СписокВалют.Добавить(РеквизитыДоговора.ВалютаРасчетов);
	СписокВалют.Добавить(НациональнаяВалюта);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РасчетыВУсловныхЕдиницах", РеквизитыДоговора.РасчетыВУсловныхЕдиницах);
	ПараметрыФормы.Вставить("Владелец", Организация);
	ПараметрыФормы.Вставить("СписокВалют", СписокВалют);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеДоговораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтотОбъект, "Запасы", Истина);
		ПересчитатьПлатежныйКалендарь();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьИОстаткиВзаиморасчетов()
	
	Элементы.ОстатокВзаиморасчетов.Видимость = НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.Контрагент.АвтоМаксимальнаяШирина = НЕ Элементы.ОстатокВзаиморасчетов.Видимость;

	Если НЕ Элементы.ОстатокВзаиморасчетов.Видимость Тогда
		// Только для новых объектов
		Возврат;
	КонецЕсли;
	
	Элементы.ОстатокВзаиморасчетов.Заголовок = РаботаСКонтрагентамиУНФ.ЗаголовокНадписиВзаиморасчетов(Объект.Контрагент);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
		Если ЗначениеЗаполнено(СтрокаЗагрузки.Номенклатура) Тогда
			
			КодАкцизнойМарки = Неопределено;
			ОбработатьДобавлениеСтрокиЗапасов(НоваяСтрока, ИмяТабличнойЧасти, КодАкцизнойМарки);
			
		КонецЕсли;
		
	КонецЦикла; 
	
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы", Истина);
	
	// Ручная скидка - заполнение полей ввода на форме
	СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект);
	// Конец Ручная скидка	
	
	// АвтоматическиеСкидки
	Если ТаблицаДляЗагрузки.Количество() > 0 Тогда
		СброситьФлагСкидкиРассчитаныСервер("ОбработкаПодбора");
	КонецЕсли;

КонецПроцедуры // ПолучитьЗапасыИзХранилища()

&НаКлиенте
Процедура УстановитьВозможностьРедактированияСпискомЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Пока Объект.ПлатежныйКалендарь.Количество() > 1 Цикл
		Объект.ПлатежныйКалендарь.Удалить(Объект.ПлатежныйКалендарь.Количество()-1);
	КонецЦикла;
	
	Элементы.РедактироватьСписком.Пометка = НЕ Элементы.РедактироватьСписком.Пометка;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект		= Форма.Объект;
	Элементы	= Форма.Элементы;
	
	РедактироватьСписком	= Элементы.РедактироватьСписком.Пометка;
	Элементы.БанковскийСчет.Видимость				= Объект.ТипДенежныхСредств = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Безналичные");
	Элементы.Касса.Видимость						= Объект.ТипДенежныхСредств = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Наличные");
	Элементы.ПлатежныйКалендарьСтрокой.Видимость	= Не РедактироватьСписком;
	Элементы.СписокПлатежныйКалендарь.Видимость		= РедактироватьСписком;
	Элементы.ПлатежныйКалендарьПоля.Доступность		= Объект.ЗапланироватьОплату;
	Элементы.БанковскийСчет.ОтметкаНезаполненного	= Объект.ЗапланироватьОплату И Не ЗначениеЗаполнено(Объект.БанковскийСчет);
	Элементы.Касса.ОтметкаНезаполненного			= Объект.ЗапланироватьОплату И Не ЗначениеЗаполнено(Объект.Касса);
	Элементы.РедактироватьСписком.Доступность 		   = Объект.ЗапланироватьОплату;
	Элементы.ПлатежныйКалендарьОбщаяГруппа.Доступность = Объект.ЗапланироватьОплату;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ФормаДокументПриходнаяНакладнаяСоздатьНаОсновании", 
		"Заголовок",
		НСтр("ru = 'Возврат от покупателя'"));
		
	// Наборы
	Элементы.ЗапасыКартинкаНабора.Видимость			= Ложь;
	Для каждого Стр Из Объект.Запасы Цикл
		Если Стр.КартинкаНабора>0 Тогда
			Элементы.ЗапасыКартинкаНабора.Видимость = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	// Конец Наборы
		
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьЭлементовПоНастройкеПользователя(Форма)
	
	Элементы = Форма.Элементы;
	
	// Видимость колонок, настроенная пользователем
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСодержание", "Видимость",
		Форма.ПоказыватьКолонкуСодержаниеВСчетеНаОплату);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыВес", "Видимость",
		Форма.ПоказыватьКолонкуВесВСчетеНаОплату);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыОбъем", "Видимость",
		Форма.ПоказыватьКолонкуОбъемВСчетеНаОплату);
		
	// Итоги по весу и объему
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИтогОбъем",
		"Видимость", Форма.ПоказыватьКолонкуОбъемВСчетеНаОплату);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИтогВес",
		"Видимость", Форма.ПоказыватьКолонкуВесВСчетеНаОплату);

КонецПроцедуры


&НаКлиенте
Процедура ОбновитьПодвалФормы()
	
	СтоимостьДоставкиСНДС = Объект.СтоимостьДоставки + ?(Объект.СуммаВключаетНДС, 0, Объект.СуммаНДСДоставки);

	Если ЗначениеЗаполнено(Объект.НоменклатураДоставки) Тогда
		Элементы.ГруппаДоставка.Формат = "ЧДЦ=2; ЧН=";
	Иначе
		Элементы.ГруппаДоставка.Формат = "";
	КонецЕсли;
	
	// Ручные скидки
	СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект);
	// Конец Ручные скидки
	ИтогВсего = Объект.Запасы.Итог("Всего") + СтоимостьДоставкиСНДС;
	ИтогСуммаНДС = Объект.Запасы.Итог("СуммаНДС") + Объект.СуммаНДСДоставки;
				
КонецПроцедуры

// Заполняет поля табличной части Запасы признаками использования характеристик
//
// Параметры:
//  ОткрытиеФормы - Булево - устанавливается в значение - Истина, если заполнение происходит при открытии формы.
&НаСервере 
Процедура ЗаполнитьПризнакиИспользованияХарактеристик(ОткрытиеФормы = Ложь)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаНоменклатурыДокумента.Номенклатура КАК Справочник.Номенклатура) КАК Ссылка,
	|	ТаблицаНоменклатурыДокумента.НомерСтроки КАК НомерСтрокиНоменклатуры,
	|	ТаблицаНоменклатурыДокумента.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВыборкаИзТабличнойЧастиЗапасы
	|ИЗ
	|	&ТаблицаНоменклатурыДокумента КАК ТаблицаНоменклатурыДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыборкаИзТабличнойЧастиЗапасы.НомерСтрокиНоменклатуры КАК НомерСтрокиНоменклатуры,
	|	ВыборкаИзТабличнойЧастиЗапасы.Ссылка.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
	|	ВыборкаИзТабличнойЧастиЗапасы.Ссылка.ПроверятьЗаполнениеХарактеристики КАК ПроверятьЗаполнениеХарактеристики,
	|	ИСТИНА КАК ЗаполнениеХарактеристикиПроверено,
	|	ВыборкаИзТабличнойЧастиЗапасы.Ссылка.ПроверятьЗаполнениеПартий КАК ПроверятьЗаполнениеПартий,
	|	ВыборкаИзТабличнойЧастиЗапасы.Ссылка.ИспользоватьПартии КАК ИспользоватьПартии
	|ИЗ
	|	ВыборкаИзТабличнойЧастиЗапасы КАК ВыборкаИзТабличнойЧастиЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияНоменклатурыПоУмолчанию КАК ЗначенияНоменклатурыПоУмолчанию
	|		ПО ВыборкаИзТабличнойЧастиЗапасы.Ссылка = ЗначенияНоменклатурыПоУмолчанию.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиНоменклатуры";
	
	РасшифровкаБиллинга = Новый Запрос;
	
	РасшифровкаБиллинга.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаНоменклатурыДокумента.ОбъектДоговораОбслуживания) = ТИП(Справочник.Номенклатура)
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаНоменклатурыДокумента.ОбъектДоговораОбслуживания КАК Справочник.Номенклатура)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Ссылка,
	|	ТаблицаНоменклатурыДокумента.НомерСтроки КАК НомерСтрокиНоменклатуры,
	|	ТаблицаНоменклатурыДокумента.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВыборкаИзТабличнойЧастиЗапасы
	|ИЗ
	|	&ТаблицаНоменклатурыДокумента КАК ТаблицаНоменклатурыДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыборкаИзТабличнойЧастиЗапасы.НомерСтрокиНоменклатуры КАК НомерСтрокиНоменклатуры,
	|	ЕСТЬNULL(ВыборкаИзТабличнойЧастиЗапасы.Ссылка.ИспользоватьХарактеристики, ЛОЖЬ) КАК ИспользоватьХарактеристики,
	|	ЕСТЬNULL(ВыборкаИзТабличнойЧастиЗапасы.Ссылка.ПроверятьЗаполнениеХарактеристики, ЛОЖЬ) КАК ПроверятьЗаполнениеХарактеристики,
	|	ИСТИНА КАК ЗаполнениеХарактеристикиПроверено,
	|	ВыборкаИзТабличнойЧастиЗапасы.Ссылка.ИспользоватьПартии КАК ИспользоватьПартии,
	|	ВыборкаИзТабличнойЧастиЗапасы.Ссылка.ПроверятьЗаполнениеПартий КАК ПроверятьЗаполнениеПартий
	|ИЗ
	|	ВыборкаИзТабличнойЧастиЗапасы КАК ВыборкаИзТабличнойЧастиЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияНоменклатурыПоУмолчанию КАК ЗначенияНоменклатурыПоУмолчанию
	|		ПО ВыборкаИзТабличнойЧастиЗапасы.Ссылка = ЗначенияНоменклатурыПоУмолчанию.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиНоменклатуры";
	
	
	Если Не ОткрытиеФормы
		Тогда
		ОтборНеПроверенныхСтрок = Новый Структура("ЗаполнениеХарактеристикиПроверено", Ложь);
		МассивНеПроверенныхСтрок = Объект["Запасы"].НайтиСтроки(ОтборНеПроверенныхСтрок);
		
		ТаблицаНоменклатурыДокумента =  Объект["Запасы"].Выгрузить(МассивНеПроверенныхСтрок,"Номенклатура, НомерСтроки, Характеристика");
		
		Запрос.УстановитьПараметр("ТаблицаНоменклатурыДокумента",ТаблицаНоменклатурыДокумента);
		ВыборкаПоХарактеристикам = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаПоХарактеристикам.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Объект["Запасы"][ВыборкаПоХарактеристикам.НомерСтрокиНоменклатуры-1],ВыборкаПоХарактеристикам);
		КонецЦикла;
		
		ОтборНеПроверенныхСтрок = Новый Структура("ЗаполнениеХарактеристикиПроверено", Ложь);
		МассивНеПроверенныхСтрок = Объект["РасшифровкаБиллинга"].НайтиСтроки(ОтборНеПроверенныхСтрок);
		
		ТаблицаНоменклатурыДокумента =  Объект["РасшифровкаБиллинга"].Выгрузить(МассивНеПроверенныхСтрок,"ОбъектДоговораОбслуживания, НомерСтроки, Характеристика");
		
		РасшифровкаБиллинга.УстановитьПараметр("ТаблицаНоменклатурыДокумента",ТаблицаНоменклатурыДокумента);
		ВыборкаПоХарактеристикам = РасшифровкаБиллинга.Выполнить().Выбрать();
		
		Пока ВыборкаПоХарактеристикам.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Объект["РасшифровкаБиллинга"][ВыборкаПоХарактеристикам.НомерСтрокиНоменклатуры-1],ВыборкаПоХарактеристикам);
		КонецЦикла;
	Иначе
		ТаблицаНоменклатурыДокумента = Объект["Запасы"].Выгрузить(,"Номенклатура, НомерСтроки, Характеристика");
		
		Запрос.УстановитьПараметр("ТаблицаНоменклатурыДокумента",ТаблицаНоменклатурыДокумента);
		ВыборкаПоХарактеристикам = Запрос.Выполнить().Выбрать();
		
		ИндексСтроки = 0;
		
		Пока ВыборкаПоХарактеристикам.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Объект["Запасы"][ИндексСтроки],ВыборкаПоХарактеристикам);
			ИндексСтроки = ИндексСтроки+1;
		КонецЦикла;
		
		ТаблицаНоменклатурыДокумента = Объект["РасшифровкаБиллинга"].Выгрузить(,"ОбъектДоговораОбслуживания, НомерСтроки, Характеристика");
		
		РасшифровкаБиллинга.УстановитьПараметр("ТаблицаНоменклатурыДокумента",ТаблицаНоменклатурыДокумента);
		ВыборкаПоХарактеристикам = РасшифровкаБиллинга.Выполнить().Выбрать();
		
		ИндексСтроки = 0;
		
		Пока ВыборкаПоХарактеристикам.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Объект["РасшифровкаБиллинга"][ИндексСтроки],ВыборкаПоХарактеристикам);
			ИндексСтроки = ИндексСтроки+1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКартинкуДисконтнойКарты()
	
	Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		Команды.СчитатьДисконтнуюКарту.Картинка = БиблиотекаКартинок.СчитанаДисконтнаяКарта;
	Иначе
		Команды.СчитатьДисконтнуюКарту.Картинка = БиблиотекаКартинок.СчитатьДисконтнуюКарту;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстСодержания(Знач Номенклатура, Знач Характеристика)
	Возврат ТабличныеЧастиУНФ.ТекстСодержания(Номенклатура, Характеристика);
КонецФункции

&НаКлиенте
Процедура ПослеВыполненияФоновогоЗадания(Прогресс, ДополнительныеПараметры) Экспорт
	
	Если НЕ Прогресс = Неопределено Тогда
		ОбработатьПодготовленныеДанные(Прогресс.АдресРезультата);
		ОбновитьПодвалФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеобходимостьПодключенияОбработчикаОжидания(ДлительнаяОперация, СтруктураПараметров = Неопределено)
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ПослеВыполненияФоновогоЗадания(ДлительнаяОперация, СтруктураПараметров);
		
	Иначе
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеВыполненияФоновогоЗадания", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Идет загрузка данных.'");
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты)
	
	ДокументыУНФ.ДатаПриИзменении(ДанныеДляИзмененияДаты, ЭтотОбъект, Объект);
	
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
КонецПроцедуры
	
&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ДокументыУНФ.ОрганизацияПриИзменении(ЭтотОбъект, Объект);
	
	Объект.БанковскийСчет = Справочники.БанковскиеСчета.БанковскийСчетСубъекта(Объект.Организация,
		Объект.ВалютаДокумента, Объект.Дата);
	
	ВалютаИКассаПоУмолчанию = Справочники.Организации.ВалютаИКассаПоУмолчанию(Объект);
	Если ЗначениеЗаполнено(ВалютаИКассаПоУмолчанию) Тогда
		Объект.Касса = ВалютаИКассаПоУмолчанию.Касса;
	КонецЕсли;
	
	Объект.Договор = Справочники.ДоговорыКонтрагентов.ПоДокументуКонтрагентуОрганизацииИВидуОперации(
		Объект.Ссылка, Объект.Контрагент, Объект.Организация);
	
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	
	ОбновитьУсловияПечатныхФорм();
	
КонецПроцедуры

&НаСервере
Функция ДанныеКонтрагентаДляИзменения()
	
	ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПоДокументуКонтрагентуОрганизацииИВидуОперации(
		Объект.Ссылка, Объект.Контрагент, Объект.Организация);
	
	Результат = Новый Структура;
	Результат.Вставить("Договор", ДоговорПоУмолчанию);
	
	ДанныеДоговора = ДанныеДоговораДляИзменения(ДатаДокумента, Объект.ВалютаДокумента, ДоговорПоУмолчанию,
		Объект.Организация);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат, ДанныеДоговора);
	
	// Биллинг
	Если ЭтоДоговорОбслуживания И НЕ ДоговорПоУмолчанию.ЭтоДоговорОбслуживания
		ИЛИ НЕ ЭтоДоговорОбслуживания И ДоговорПоУмолчанию.ЭтоДоговорОбслуживания Тогда
		ЭтоДоговорОбслуживания = ДоговорПоУмолчанию.ЭтоДоговорОбслуживания;
		ОбновитьРасшифровкуБиллинга();
	КонецЕсли;
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДанныеДоговораДляИзменения(Знач Дата, Знач ВалютаДокумента, Знач Договор, Знач Организация)
	
	Результат = Новый Структура;
	Результат.Вставить("ВалютаРасчетов", Договор.ВалютаРасчетов);
	Результат.Вставить("ВалютаРасчетовКурсКратность", РаботаСКурсамиВалют.ПолучитьКурсВалюты(Договор.ВалютаРасчетов,
		Дата));
	Результат.Вставить("РасчетыВУсловныхЕдиницах", Договор.РасчетыВУсловныхЕдиницах);
	Результат.Вставить("ВидСкидкиНаценки", Договор.ВидСкидкиНаценки);
	Результат.Вставить("ВидЦен", Договор.ВидЦен);
	Результат.Вставить("СуммаВключаетНДС", Неопределено);
	Если ЗначениеЗаполнено(Договор.ВидЦен) Тогда
		Результат.СуммаВключаетНДС = Договор.ВидЦен.ЦенаВключаетНДС;
	КонецЕсли;
	ОснованиеПечатиСчетНаОплату = Константы.ОснованиеПечатиСчетНаОплату.Получить();
	Результат.Вставить("ОснованиеПечатиСчетНаОплату", ОснованиеПечатиСчетНаОплату);
	Результат.Вставить("ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати",
		Константы.ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати.Получить());
	
	Если ВалютаДокумента <> Результат.ВалютаРасчетов Тогда
		БанковскийСчет = Справочники.БанковскиеСчета.БанковскийСчетСубъекта(Организация,
			Результат.ВалютаРасчетов, Дата);
		Результат.Вставить("БанковскийСчет", БанковскийСчет);
	КонецЕсли;
	
	// Биллинг
	Если ЭтоДоговорОбслуживания И НЕ Договор.ЭтоДоговорОбслуживания
		ИЛИ НЕ ЭтоДоговорОбслуживания И Договор.ЭтоДоговорОбслуживания Тогда
		
		ЭтоДоговорОбслуживания = Договор.ЭтоДоговорОбслуживания;
		ОбновитьРасшифровкуБиллинга();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеДоговораНаКлиенте()
	
	ДоговорПередИзменением = Договор;
	Договор = Объект.Договор;
	
	Если ДоговорПередИзменением <> Объект.Договор Тогда
		
		ДанныеДоговора = ДанныеДоговораДляИзменения(ДатаДокумента, Объект.ВалютаДокумента, Объект.Договор,
			Объект.Организация);
		
		ВалютаРасчетовПередИзменением = ВалютаРасчетов;
		ВалютаРасчетов = ДанныеДоговора.ВалютаРасчетов;
		
		Если НЕ ДанныеДоговора.СуммаВключаетНДС = Неопределено Тогда
			
			Объект.СуммаВключаетНДС = ДанныеДоговора.СуммаВключаетНДС;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда
			Объект.Курс = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс = 0, 1,
				ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс);
			Объект.Кратность = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность = 0, 1,
				ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность);
		КонецЕсли;
		
		ИзменилсяВидЦен = Объект.ВидЦен <> ДанныеДоговора.ВидЦен 
			И ЗначениеЗаполнено(ДанныеДоговора.ВидЦен);
			
		ИзменилсяВидСкидки = Объект.ВидСкидкиНаценки <> ДанныеДоговора.ВидСкидкиНаценки;
		
		НовыйДоговорИВалютаРасчетов = ЗначениеЗаполнено(Объект.Договор) И ЗначениеЗаполнено(ВалютаРасчетов) 
			И Объект.Договор <> ДоговорПередИзменением И ВалютаРасчетовПередИзменением <> ДанныеДоговора.ВалютаРасчетов;
			
		ОткрытьФормуЦеныИВалюты = НовыйДоговорИВалютаРасчетов И Объект.ВалютаДокумента <> ДанныеДоговора.ВалютаРасчетов
			И Объект.Запасы.Количество() > 0;
		ПечатьДокументовУНФКлиент.ПриИзмененииДоговораКонтрагента(Объект.Договор, Объект.ОснованиеПечатиСсылка,
			Объект.ОснованиеПечати, ДанныеДоговора);
		
		ВопросВидЦен = ЗначениеЗаполнено(Объект.Договор) И (ИзменилсяВидЦен ИЛИ ИзменилсяВидСкидки);
		Если ВопросВидЦен Тогда
			Если ИзменилсяВидЦен Тогда
				Объект.ВидЦен = ДанныеДоговора.ВидЦен;
			КонецЕсли; 
			Если ИзменилсяВидСкидки Тогда
				Объект.ВидСкидкиНаценки = ДанныеДоговора.ВидСкидкиНаценки;
			КонецЕсли; 
		КонецЕсли;
		
		Объект.ВалютаДокумента = ДанныеДоговора.ВалютаРасчетов;
		Если ДанныеДоговора.Свойство("БанковскийСчет") Тогда
			
			Объект.БанковскийСчет = ДанныеДоговора.БанковскийСчет;
			
		КонецЕсли;
		
		Если ОткрытьФормуЦеныИВалюты Тогда
			
			ТекстПредупреждения = "";
			Если ВопросВидЦен Тогда
				
				ТекстПредупреждения = НСтр("ru = 'Договор с контрагентом предусматривает условия цен и скидок, 
					|отличные от установленных в документе. 
					|Возможно, необходимо перезаполнить цены.'") + Символы.ПС + Символы.ПС;
				
			КонецЕсли;
			
			ТекстПредупреждения = ТекстПредупреждения + НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом.
				|Необходимо проверить валюту документа.'");
			
			ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаРасчетовПередИзменением, Истина, ИзменилсяВидЦен, ТекстПредупреждения);
			
		ИначеЕсли ВопросВидЦен Тогда
			
			ПересчетНеобходим = (Объект.Запасы.Количество() > 0);
			
			ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов,
				КурсНациональнаяВалюта, УчетВалютныхОпераций);
				
			Если ПересчетНеобходим Тогда
				
				ТекстСообщения = НСтр("ru = 'Договор с контрагентом предусматривает условия цен и скидок, отличные от установленных в документе. 
										|Пересчитать документ в соответствии с договором?'");
										
				Режим = РежимДиалогаВопрос.ДаНет;
				ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьИзменениеДоговораЗавершение", ЭтотОбъект, Новый Структура("ДоговорПередИзменением, ВалютаРасчетовПередИзменением, СтруктураДанные", ДоговорПередИзменением, ВалютаРасчетовПередИзменением, ДанныеДоговора)), ТекстСообщения, Режим, 0);
				Возврат;
				
			КонецЕсли;
			
		Иначе
			
			ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов,
				КурсНациональнаяВалюта, УчетВалютныхОпераций);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Номенклатура
	УстановитьПараметрыВыбораНоменклатуры();
	
КонецПроцедуры // ОбработатьИзменениеДоговораНаКлиенте()

&НаКлиенте
Процедура ОткрытьФормуРеквизитыПечати()
	
	НаборОснований = Новый Массив;
	НаборОснований.Добавить(Объект.Ссылка);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КонтекстПечати", Объект);
	ПараметрыОткрытия.Вставить("НаборОснований", НаборОснований);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзмененияРеквизитовПечати", ЭтотОбъект);
	ОткрытьФорму("Обработка.РеквизитыПечати.Форма.РеквизитыПечатиСчетНаОплату", ПараметрыОткрытия, ЭтотОбъект, , , ,
		ОписаниеОповещения);
		
КонецПроцедуры 

&НаСервере
Процедура ОбновитьВидимостьПодарков()  
	
	ЕстьПодарки = Объект.Подарки.Количество() > 0;
	Элементы.ГруппаПодарки.Видимость = ЕстьПодарки;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНастройкиИзмененияКоличества()
	
	НастройкиКоличества = ДокументыУНФКлиентСервер.ПараметрыСбросаКоличества();
	ДокументыУНФ.ЗаполнитьНастройкиКоличества(НастройкиКоличества);
	Возврат НастройкиКоличества;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуНастройки(ПередаватьВидДокумента)
		
	ПараметрыДиалога = Новый Структура;

	Если ПередаватьВидДокумента Тогда
		ПараметрыДиалога.Вставить("ВидДокумента", НСтр("ru = 'счет на оплату'"));
	КонецЕсли;
	
	ПараметрыДиалога.Вставить("ПоказыватьКолонкуСодержаниеВСчетеНаОплату",
		ПоказыватьКолонкуСодержаниеВСчетеНаОплату);
	ПараметрыДиалога.Вставить("ПоказыватьКолонкуВесВСчетеНаОплату",
		ПоказыватьКолонкуВесВСчетеНаОплату);
	ПараметрыДиалога.Вставить("ПоказыватьКолонкуОбъемВСчетеНаОплату",
		ПоказыватьКолонкуОбъемВСчетеНаОплату);
	
	ОткрытьФорму(
	"ОбщаяФорма.ШапкаТабличнаяЧасть",
	ПараметрыДиалога,,,,,
	Новый ОписаниеОповещения("ШапкаТабличнаяЧастьЗавершение", ЭтотОбъект));
		
КонецПроцедуры

&НаКлиенте
Процедура ШапкаТабличнаяЧастьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.БылиВнесеныИзменения Тогда

		ОбновитьФорму = Ложь;				
		Если Результат.Свойство("ПоказыватьКолонкуСодержаниеВСчетеНаОплату") Тогда
			ПоказыватьКолонкуСодержаниеВСчетеНаОплату = Результат.ПоказыватьКолонкуСодержаниеВСчетеНаОплату;
			ОбновитьФорму = Истина;
		КонецЕсли;
		
		Если Результат.Свойство("ПоказыватьКолонкуВесВСчетеНаОплату") Тогда
			ПоказыватьКолонкуВесВСчетеНаОплату = Результат.ПоказыватьКолонкуВесВСчетеНаОплату;
			ОбновитьФорму = Истина;
		КонецЕсли;
		
		Если Результат.Свойство("ПоказыватьКолонкуОбъемВСчетеНаОплату") Тогда
			ПоказыватьКолонкуОбъемВСчетеНаОплату = Результат.ПоказыватьКолонкуОбъемВСчетеНаОплату;
			ОбновитьФорму = Истина;
		КонецЕсли;
		
		Если ОбновитьФорму Тогда
			УстановитьВидимостьЭлементовПоНастройкеПользователя(ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьУсловияПечатныхФорм()
	
	Если ПустаяСтрока(Объект.ТекстУсловийСчетаЗаказа) Тогда
		Объект.УсловияСчетаЗаказа = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("УсловияСчетаЗаказа", 
			Объект.Организация);
		Если НЕ ЗначениеЗаполнено(Объект.УсловияСчетаЗаказа) Тогда
			НастройкаУсловий = ПланыВидовХарактеристик.НастройкиПользователей.УсловияСчетаЗаказа;
			Объект.УсловияСчетаЗаказа = Справочники.ДополнительныеУсловия.ПолучитьТиповыеУсловия(НастройкаУсловий,
				Объект.Организация);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АвтоматическиеСкидки

&НаКлиенте
Процедура РассчитатьСкидкиНаценки(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Если Объект.СкидкиНаценки.Количество() > 0 Тогда
			Объект.СкидкиНаценки.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	РассчитатьСкидкиНаценкиКлиент();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСкидкиНаценкиПоДокументуОснованиюСервер()

	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Запасы");
	
	МассивЗаказов = Новый Массив;
	МассивЗаказов.Добавить(Объект.ДокументОснование);
	
	НомерЗапроса = 0;
	
	Запрос = Новый Запрос;
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СкидкиНаценки.Ссылка КАК Заказ,
		|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
		|	СУММА(СкидкиНаценки.Сумма) КАК СуммаАвтоматическойСкидки,
		|	ВЫБОР
		|		КОГДА АктВыполненныхРаботРаботыИУслуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТипНоменклатурыЗапас,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
		|			ТОГДА 1
		|		ИНАЧЕ АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмерения.Коэффициент
		|	КОНЕЦ КАК Коэффициент,
		|	АктВыполненныхРаботРаботыИУслуги.Номенклатура КАК Номенклатура,
		|	АктВыполненныхРаботРаботыИУслуги.Характеристика КАК Характеристика,
		|	АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СУММА(АктВыполненныхРаботРаботыИУслуги.Количество) КАК Количество,
		|	СУММА(АктВыполненныхРаботРаботыИУслуги.Количество * АктВыполненныхРаботРаботыИУслуги.Цена) КАК СуммаБезСкидки
		|ИЗ
		|	Документ.АктВыполненныхРабот.СкидкиНаценки КАК СкидкиНаценки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктВыполненныхРабот.РаботыИУслуги КАК АктВыполненныхРаботРаботыИУслуги
		|		ПО СкидкиНаценки.Ссылка = АктВыполненныхРаботРаботыИУслуги.Ссылка
		|			И СкидкиНаценки.КлючСвязи = АктВыполненныхРаботРаботыИУслуги.КлючСвязи
		|ГДЕ
		|	СкидкиНаценки.Ссылка В(&МассивЗаказов)
		|
		|СГРУППИРОВАТЬ ПО
		|	АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмерения,
		|	СкидкиНаценки.Ссылка,
		|	АктВыполненныхРаботРаботыИУслуги.Характеристика,
		|	АктВыполненныхРаботРаботыИУслуги.Номенклатура,
		|	СкидкиНаценки.СкидкаНаценка,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
		|			ТОГДА 1
		|		ИНАЧЕ АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмерения.Коэффициент
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА АктВыполненныхРаботРаботыИУслуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ";
		
		Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
		
	Иначе
		
		НомерЗапроса = 1;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СкидкиНаценки.Ссылка КАК Заказ,
		|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
		|	СкидкиНаценки.Сумма КАК СуммаАвтоматическойСкидки,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТипНоменклатурыЗапас,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
		|			ТОГДА 1
		|		ИНАЧЕ ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент
		|	КОНЕЦ КАК Коэффициент,
		|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
		|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
		|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЗаказПокупателяЗапасы.Количество КАК Количество,
		|	ЗаказПокупателяЗапасы.Количество * ЗаказПокупателяЗапасы.Цена КАК СуммаБезСкидки
		|ПОМЕСТИТЬ ВременнаяТаблица_СкидкиНаценки
		|ИЗ
		|	Документ.ЗаказПокупателя.СкидкиНаценки КАК СкидкиНаценки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаказПокупателяЗапасы КАК ЗаказПокупателяЗапасы
		|		ПО СкидкиНаценки.Ссылка = ЗаказПокупателяЗапасы.Ссылка
		|			И СкидкиНаценки.КлючСвязи = ЗаказПокупателяЗапасы.КлючСвязи
		|ГДЕ
		|	СкидкиНаценки.Ссылка В(&МассивЗаказов)
		|";
		
		Если Объект.ДокументОснование.Метаданные().ТабличныеЧасти.Найти("Работы") <> Неопределено Тогда
			Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СкидкиНаценки.Ссылка,
			|	СкидкиНаценки.СкидкаНаценка,
			|	СкидкиНаценки.Сумма,
			|	ВЫБОР
			|		КОГДА ЗаказПокупателяРаботы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ,
			|	ЗаказПокупателяРаботы.Коэффициент,
			|	ЗаказПокупателяРаботы.Номенклатура,
			|	ЗаказПокупателяРаботы.Характеристика,
			|	ЗаказПокупателяРаботы.Номенклатура.ЕдиницаИзмерения,
			|	ЗаказПокупателяРаботы.Количество * ЗаказПокупателяРаботы.Кратность,
			|	ЗаказПокупателяРаботы.Количество * ЗаказПокупателяРаботы.Кратность * ЗаказПокупателяРаботы.Цена
			|ИЗ
			|	Документ.ЗаказПокупателя.СкидкиНаценки КАК СкидкиНаценки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Работы КАК ЗаказПокупателяРаботы
			|		ПО СкидкиНаценки.Ссылка = ЗаказПокупателяРаботы.Ссылка
			|			И СкидкиНаценки.КлючСвязи = ЗаказПокупателяРаботы.КлючСвязиДляСкидокНаценок
			|ГДЕ
			|	СкидкиНаценки.Ссылка В(&МассивЗаказов)";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблица_СкидкиНаценки.Заказ КАК Заказ,
		|	ВременнаяТаблица_СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
		|	СУММА(ВременнаяТаблица_СкидкиНаценки.СуммаАвтоматическойСкидки) КАК СуммаАвтоматическойСкидки,
		|	ВременнаяТаблица_СкидкиНаценки.ТипНоменклатурыЗапас КАК ТипНоменклатурыЗапас,
		|	ВременнаяТаблица_СкидкиНаценки.Коэффициент КАК Коэффициент,
		|	ВременнаяТаблица_СкидкиНаценки.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблица_СкидкиНаценки.Характеристика КАК Характеристика,
		|	ВременнаяТаблица_СкидкиНаценки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СУММА(ВременнаяТаблица_СкидкиНаценки.Количество) КАК Количество,
		|	СУММА(ВременнаяТаблица_СкидкиНаценки.СуммаБезСкидки) КАК СуммаБезСкидки
		|ИЗ
		|	ВременнаяТаблица_СкидкиНаценки КАК ВременнаяТаблица_СкидкиНаценки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблица_СкидкиНаценки.СкидкаНаценка,
		|	ВременнаяТаблица_СкидкиНаценки.Заказ,
		|	ВременнаяТаблица_СкидкиНаценки.ЕдиницаИзмерения,
		|	ВременнаяТаблица_СкидкиНаценки.Характеристика,
		|	ВременнаяТаблица_СкидкиНаценки.Номенклатура,
		|	ВременнаяТаблица_СкидкиНаценки.ТипНоменклатурыЗапас,
		|	ВременнаяТаблица_СкидкиНаценки.Коэффициент";
		
		Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
		
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			Документы.ЗаказПокупателя.ДобавитьТаблицуЗапасыВМенеджерВременныхТаблиц(МассивЗаказов, Запрос.МенеджерВременныхТаблиц, Ложь);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаказПокупателяЗапасы КАК ЗаказПокупателяЗапасы",
				"ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ЗаказПокупателя.", "Документ."+Объект.ДокументОснование.Метаданные().Имя+".");
		КонецЕсли;
		
	КонецЕсли;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СкидкиНаценкиЗаказа = МассивРезультатов[НомерЗапроса].Выгрузить();
	
	Объект.СкидкиНаценки.Очистить();
	Для Каждого ТекущаяСтрокаДокумента Из Объект.Запасы Цикл
		ТекущаяСтрокаДокумента.ПроцентАвтоматическойСкидки = 0;
		ТекущаяСтрокаДокумента.СуммаАвтоматическойСкидки = 0;
	КонецЦикла;
	
	РезультатРасчетаСкидокНаценок = Объект.СкидкиНаценки.Выгрузить();
	
	Для Каждого ТекущаяСтрокаЗаказа Из СкидкиНаценкиЗаказа Цикл
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Номенклатура", ТекущаяСтрокаЗаказа.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", ТекущаяСтрокаЗаказа.Характеристика);
		
		МассивСтрокДокумента = Объект.Запасы.НайтиСтроки(СтруктураДляПоиска);
		Если МассивСтрокДокумента.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаВЗаказе = ТекущаяСтрокаЗаказа.СуммаБезСкидки;
		
		Для Каждого ТекущаяСтрокаДокумента Из МассивСтрокДокумента Цикл
			СуммаКСписанию = ТекущаяСтрокаДокумента.Количество * ТекущаяСтрокаДокумента.Цена;
			
			ПересчитатьСуммы = СуммаВЗаказе <> СуммаКСписанию;
			
			КоэффициентПересчетаСкидки = ?(ПересчитатьСуммы, СуммаКСписанию / СуммаВЗаказе, 1);
			Если КоэффициентПересчетаСкидки <> 1 Тогда
				ТекущаяСуммаАвтоматическойСкидки = ОКР(ТекущаяСтрокаЗаказа.СуммаАвтоматическойСкидки * КоэффициентПересчетаСкидки,2);
			Иначе
				ТекущаяСуммаАвтоматическойСкидки = ТекущаяСтрокаЗаказа.СуммаАвтоматическойСкидки;
			КонецЕсли;
			
			СтрокаСкидки = РезультатРасчетаСкидокНаценок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСкидки, ТекущаяСтрокаЗаказа);
			СтрокаСкидки.Сумма = ТекущаяСуммаАвтоматическойСкидки;
			СтрокаСкидки.КлючСвязи = ТекущаяСтрокаДокумента.КлючСвязи;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, "Запасы", РезультатРасчетаСкидокНаценок);
		
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		РабочееМесто = МенеджерОборудованияКлиент.РабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	ЦенообразованиеКлиент.ПоказатьОповещениеПользователяОКорректировкеЦены(СтруктураПараметры);

	ОбновитьПодвалФормы();
	Если ВывестиСообщения Тогда
		ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("СчетНаОплату_СообщениеКассиру", Истина, Ложь);
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИДЗамераПроизводительности",ИДЗамера);
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеПослеСообщенияКассиру", ЭтотОбъект, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресПримененныхСкидокВоВременномХранилище);
		ОткрытьФорму("ОбщаяФорма.ФормаВыводаСообщений", ПараметрыФормы, ЭтотОбъект, , , , ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОповещениеПослеСообщенияКассиру();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПослеСообщенияКассиру(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ИДЗамера = неопределено;
	Если НЕ ДополнительныеПараметры = неопределено И 
		ДополнительныеПараметры.Свойство("ИДЗамераПроизводительности", ИДЗамера) Тогда	
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
	КонецЕсли;
	
	Если ВыдатьПодаркиНаВыбор Тогда
		ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("СчетНаОплату_ВыбораПодарка", Истина, Ложь);
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИДЗамераПроизводительности",ИДЗамера);
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВыдатьПодаркиНаВыбор", ЭтотОбъект, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресПодарковНаВыбор);
		ОткрытьФорму("ОбщаяФорма.ПодаркиНаВыбор", ПараметрыФормы, ЭтотОбъект, , , , ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОповещениеВыдатьПодаркиНаВыбор();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОповещениеВыдатьПодаркиНаВыбор(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат <> Неопределено Тогда
		ВыдатьПодаркиНаВыборНаСервере(Результат, ДополнительныеПараметры);
	КонецЕсли;
	
	Если ДействиеПослеВыдачиПодарка = "Проведение" Тогда
		Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	ДействиеПослеВыдачиПодарка = "";

КонецПроцедуры

// Выполняет перенос строк из табличной части объекта "Подарки"
// в табличную часть "Запасы".
//
// Параметры:
//  ПримененныеСкидкиНаценки - ДеревоЗначений - дерево с примененными скидками.

//
&НаСервере
Процедура ПеренестиСкидкиПодаркиВЗапасы(ПримененныеСкидкиНаценки = неопределено) Экспорт
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Подарки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КэшированныеЗначения = Новый Структура;
	ТаблицаСтрокПереносимыхПодарков = Объект.Подарки.Выгрузить();
	МассивУдаляемыхСтрок = Новый Массив;
	КоличествоПеренесенных = 0;
	
	Для Каждого СтрокаПодарка Из ТаблицаСтрокПереносимыхПодарков Цикл
		Учитывать = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПодарка.СкидкаНаценка, "УчитыватьПодарокКакПродажу");
		УдалятьСтроку = Истина;
		СтрокаСообщения = "";
		ВидПродукции = ИнтеграцияИС.ВидПродукцииПоНоменклатуре(СтрокаПодарка.Номенклатура);
		Если Учитывать = Истина Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаПодарка.СкидкаНаценка) Тогда
				СтрокаСообщения = НСтр("ru = 'Подарок в строке %1 нельзя учесть как продажу: не заполнена скидка'");
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтрокаПодарка.НомерСтроки);
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаПодарка.Номенклатура) Тогда
				СтрокаСообщения = НСтр("ru = 'Подарок ""%1"" нельзя учесть как продажу: не заполнена номенклатура'");
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтрокаПодарка.СкидкаНаценка);
			ИначеЕсли СтрокаПодарка.Количество <= 0 Тогда
				СтрокаСообщения = НСтр("ru = 'Подарок ""%1"" нельзя учесть как продажу: не корректно заполнено количество'");
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтрокаПодарка.Номенклатура);
			ИначеЕсли СтрокаПодарка.Сумма <= 0 Тогда
				СтрокаСообщения = НСтр("ru = 'Подарок ""%1"" нельзя учесть как продажу: не корректно заполнена сумма'");
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтрокаПодарка.Номенклатура);
			Иначе
				УдалятьСтроку = Ложь;
			КонецЕсли; 
		Иначе
			Если ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
				Объект.Подарки.Очистить();
				СтрокаСообщения = НСтр("ru = 'Табачную продукцию ""%1"" можно дарить, учитывая только как продажу.'");
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтрокаПодарка.Номенклатура);
			КонецЕсли;
		КонецЕсли;
		Если УдалятьСтроку Тогда
			МассивУдаляемыхСтрок.Добавить(СтрокаПодарка);
			Если ЗначениеЗаполнено(СтрокаСообщения) Тогда
				ОбщегоНазначения.СообщитьПользователю(СтрокаСообщения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из МассивУдаляемыхСтрок Цикл
		ТаблицаСтрокПереносимыхПодарков.Удалить(ЭлементМассива);
	КонецЦикла;
	
	Если ТаблицаСтрокПереносимыхПодарков.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТоварыИтогСумма = Объект.Запасы.Итог("Сумма");
	ПодаркиИтогСумма = ТаблицаСтрокПереносимыхПодарков.Итог("Сумма");
	СуммаТоваровНеУчаствующихВРаспределении = 0;
	
	Для Каждого СтрокаТоваров Из Объект.Запасы Цикл
		
		Если СтрокаТоваров.ПродажаПодарка
			ИЛИ СтрокаТоваров.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
			
			СуммаТоваровНеУчаствующихВРаспределении = СуммаТоваровНеУчаствующихВРаспределении + СтрокаТоваров.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщаяСумма = ТоварыИтогСумма - СуммаТоваровНеУчаствующихВРаспределении;
	
	ВидыПродукции = ИнтеграцияИСУНФ.ВидыПродукцииВЗапасах(Объект.Подарки);
	ВидыПродукции = Новый Массив;
	ДополнительноеОписание = "";
	
	МассивУдаляемыхСтрокПодарков = Новый Массив;
	ПеренесенМаркируемыйТовар = Ложь;
	Для Каждого СтрокаПодарка Из ТаблицаСтрокПереносимыхПодарков Цикл
		
		СуммаСкидкиКРаспределению = СтрокаПодарка.Сумма;
		ОбщаяСумма = ТоварыИтогСумма - СуммаТоваровНеУчаствующихВРаспределении;
		
		ОбластьПредоставления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПодарка.СкидкаНаценка, "ОбластьПредоставления");		
		Если ОбластьПредоставления = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе") Тогда 
			// Скидка распределяется равномерно, в том числе на саму строку подарка.
			ОбщаяСумма = ОбщаяСумма + СуммаСкидкиКРаспределению;
			Для Каждого СтрокаТоваров Из Объект.Запасы Цикл
				
				Если СтрокаТоваров.ПродажаПодарка 
					ИЛИ СтрокаТоваров.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
					Продолжить;
				КонецЕсли;
				
				Если ОбщаяСумма <> 0 Тогда
					СуммаСкидки = Окр(СтрокаТоваров.Сумма * (СуммаСкидкиКРаспределению / ОбщаяСумма), 2); 
				Иначе
					СуммаСкидки = 0;
				КонецЕсли;
			
				Если ЦенообразованиеСерверПовтИсп.МинимальныеЦеныИспользуются() Тогда				
					МинимальнаяСумма = СтрокаТоваров.Количество * СтрокаТоваров.МинимальнаяЦена;
					МаксимальнаяСкидка = СтрокаТоваров.Сумма - МинимальнаяСумма; 
					СуммаСкидки = Мин(МаксимальнаяСкидка, СуммаСкидки);
					СуммаСкидки = Макс(0, СуммаСкидки);
				КонецЕсли;
				
				СтрокаСкидок = Объект.СкидкиНаценки.Добавить();
				СтрокаСкидок.КлючСвязи = СтрокаТоваров.КлючСвязи;
				СтрокаСкидок.СкидкаНаценка = СтрокаПодарка.СкидкаНаценка;
				СтрокаСкидок.Сумма = СуммаСкидки;
				
				Если НЕ ПримененныеСкидкиНаценки = Неопределено Тогда
					
					СтрокаТаблицыСкидок = ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыСкидок, СтрокаСкидок);
					
				КонецЕсли;
				
				СтрокаТоваров.СуммаАвтоматическойСкидки = СтрокаТоваров.СуммаАвтоматическойСкидки + СуммаСкидки;
				
				СуммаБезСкидки = СтрокаТоваров.Количество * СтрокаТоваров.Цена;
				
				СтрокаТоваров.ПроцентАвтоматическойСкидки = ?(СуммаБезСкидки = 0, 0 , Окр(100 * СтрокаТоваров.СуммаАвтоматическойСкидки / СуммаБезСкидки, 2));
				
				СуммаСкидкиКРаспределению = СуммаСкидкиКРаспределению - СтрокаСкидок.Сумма;
				ОбщаяСумма = ОбщаяСумма - СтрокаТоваров.Сумма;
				СтрокаТоваров.Сумма = СтрокаТоваров.Сумма - СуммаСкидки;
				
			КонецЦикла;
		КонецЕсли;
				
		КоличествоПеренесенных = КоличествоПеренесенных + 1;
		
		СтрокаПеренесенногоПодарка = Объект.Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПеренесенногоПодарка, СтрокаПодарка);
		СтрокаПеренесенногоПодарка.КлючСвязи = 0;
		СтрокаПеренесенногоПодарка.ПродажаПодарка = Истина;
		
		Если СуммаСкидкиКРаспределению <> 0 Тогда
			СтрокаПеренесенногоПодарка.СуммаАвтоматическойСкидки = СтрокаПеренесенногоПодарка.СуммаАвтоматическойСкидки + СуммаСкидкиКРаспределению;
			СтрокаПеренесенногоПодарка.Сумма = СтрокаПеренесенногоПодарка.Сумма - СуммаСкидкиКРаспределению;
			СуммаБезСкидки = СтрокаПеренесенногоПодарка.Количество * СтрокаПеренесенногоПодарка.Цена;
			СтрокаПеренесенногоПодарка.ПроцентАвтоматическойСкидки = ?(СуммаБезСкидки = 0, 0 , Окр(100 * СтрокаПеренесенногоПодарка.СуммаАвтоматическойСкидки / СуммаБезСкидки, 2));
		КонецЕсли;

		КодАкцизнойМарки = Неопределено;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаПодарка, "ШтрихкодУпаковки")
			И ЗначениеЗаполнено(СтрокаПодарка.ШтрихкодУпаковки) Тогда
			
			КодАкцизнойМарки = СтрокаПодарка.ШтрихкодУпаковки;
			ПеренесенМаркируемыйТовар = Истина;

		КонецЕсли;
		
		ОбработатьДобавлениеСтрокиЗапасов(СтрокаПеренесенногоПодарка, "Запасы", КодАкцизнойМарки, Истина);
		
		ОтборСкидки = Новый Структура;
		ОтборСкидки.Вставить("СкидкаНаценка", СтрокаПодарка.СкидкаНаценка);
		ОтборСкидки.Вставить("КлючСвязи", 0);
		СтрокиСкидкиПереносимогоПодарка = Объект.СкидкиНаценки.НайтиСтроки(ОтборСкидки);
		Если СтрокиСкидкиПереносимогоПодарка.Количество() > 0 Тогда
			СкидкаПодарка = СтрокиСкидкиПереносимогоПодарка[0];
			СкидкаПодарка.КлючСвязи = СтрокаПеренесенногоПодарка.КлючСвязи;
		КонецЕсли;
		
		// итоговая сумма товаров уменьшилась
		ТоварыИтогСумма = Объект.Запасы.Итог("Сумма");
		СуммаТоваровНеУчаствующихВРаспределении = СуммаТоваровНеУчаствующихВРаспределении + СтрокаПеренесенногоПодарка.Сумма;
		
		МассивУдаляемыхСтрокПодарков.Добавить(Объект.Подарки[СтрокаПодарка.НомерСтроки - 1]);
		
	КонецЦикла;
	
	Если ПеренесенМаркируемыйТовар Тогда
		ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(ЭтаФорма);
	КонецЕсли;
	
	ЕстьСерииПодарков = Объект.Свойство("СерииПодарков") И Объект.СерииПодарков.Количество() > 0;
	Для Каждого ЭлементМассива Из МассивУдаляемыхСтрокПодарков Цикл
		
		Если ЕстьСерииПодарков Тогда
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("КлючСвязи", ЭлементМассива.КлючСвязи);
			СтрокиСерий = Объект.СерииПодарков.НайтиСтроки(СтруктураПоиска);
			МассивУдаляемыхСерий = Новый Массив;
			Если СтрокиСерий.Количество() = 0 Тогда
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Номенклатура", ЭлементМассива.Номенклатура);
				СтруктураПоиска.Вставить("Характеристика", ЭлементМассива.Характеристика);
				СтрокиСерий = Объект.СерииПодарков.НайтиСтроки(СтруктураПоиска);
			КонецЕсли;
			Для Каждого СтрокаСерии Из СтрокиСерий Цикл
				МассивУдаляемыхСерий.Добавить(СтрокаСерии);
				НоваяСтрока = Объект.Серии.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСерии);
			КонецЦикла;
			Для Каждого УдаляемаяСерия Из МассивУдаляемыхСерий Цикл
				Объект.СерииПодарков.Удалить(УдаляемаяСерия);
			КонецЦикла;
		КонецЕсли;
		Объект.Подарки.Удалить(ЭлементМассива);
		
	КонецЦикла;  
	
	СтруктураПересчетаВсего = Новый Структура;
	СтруктураПересчетаВсего.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	Для каждого СтрокаЗапаса Из Объект.Запасы Цикл
		ТабличныеЧастиУНФКлиентСервер.РассчитатьСуммуНДСИВсего(СтрокаЗапаса, СтруктураПересчетаВсего);
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура ОбработатьДобавлениеСтрокиЗапасов(НоваяСтрока, ИмяТабличнойЧасти = "Запасы", КодАкцизнойМарки = Неопределено, ПересчитыватьНДС = Ложь)
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяСтрока.Номенклатура, "ТипНоменклатуры, Вес, Объем, ЭтоНабор, СпособРасчетаЦеныНабора");

	Если НоваяСтрока.Свойство("Пометка") Тогда
		НоваяСтрока.Пометка = Истина;
	КонецЕсли;
	
	СтруктураДанныеНоменклатуры = Новый Структура();
	СтруктураДанныеНоменклатуры.Вставить("Номенклатура", НоваяСтрока.Номенклатура);
	СтруктураДанныеНоменклатуры.Вставить("Характеристика", НоваяСтрока.Характеристика);
	СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
	СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	
	Если ИмяТабличнойЧасти = "Запасы"
		Тогда
		
		СтатусПартии = Новый СписокЗначений;
		СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
		СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
		
		СтруктураДанныеНоменклатуры.Вставить("СтатусПартии", СтатусПартии);
		
	КонецЕсли;
	
	СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
	Если ЗначенияРеквизитов.ЭтоНабор Тогда
		
		// Наборы
		СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ЗначенияРеквизитов.ТипНоменклатуры);
		СтруктураДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", НоваяСтрока.ЕдиницаИзмерения);
		СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		Если ЗначениеЗаполнено(НоваяСтрока.Цена) 
			И ЗначенияРеквизитов.СпособРасчетаЦеныНабора <> Перечисления.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих Тогда
			СтруктураДанныеНоменклатуры.Вставить("Цена", НоваяСтрока.Цена);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
			СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
			СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
			СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
			СтруктураДанныеНоменклатуры.Вставить("ВидЦен", Объект.ВидЦен);
			СтруктураДанныеНоменклатуры.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
		КонецЕсли;
		
		// ДисконтныеКарты
		СтруктураДанныеНоменклатуры.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
		СтруктураДанныеНоменклатуры.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
		// Конец ДисконтныеКарты
		
		ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, НоваяСтрока, СтруктураДанныеНоменклатуры);

		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
		
		ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, НоваяСтрока, СтруктураДанные);
		
		ЗаполнитьПризнакиИспользованияХарактеристик();
		
		Возврат;
		// Конец Наборы

	Иначе
		
		НоваяСтрока.ВесЕдиницыТовара = НоваяСтрока.Номенклатура.Вес;
		НоваяСтрока.Вес = НоваяСтрока.ВесЕдиницыТовара * НоваяСтрока.Количество;
		НоваяСтрока.ОбъемЕдиницыТовара = НоваяСтрока.Номенклатура.Объем;
		НоваяСтрока.Объем = НоваяСтрока.ОбъемЕдиницыТовара * НоваяСтрока.Количество;

		ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, НоваяСтрока, СтруктураДанныеНоменклатуры);

		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
		
	КонецЕсли;
	
	Если ПересчитыватьНДС Тогда
		НоваяСтрока.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		ТабличныеЧастиУНФКлиентСервер.РассчитатьСуммуНДСИВсего(НоваяСтрока, Новый Структура("СуммаВключаетНДС", Объект.СуммаВключаетНДС));
	КонецЕсли;
	ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект[ИмяТабличнойЧасти], НоваяСтрока, "КлючСвязи");
	
	// Характеристики
	НоваяСтрока.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	НоваяСтрока.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	НоваяСтрока.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если СтруктураДанные.ИспользоватьХарактеристики
		Тогда
		НоваяСтрока.Характеристика = СтруктураДанные.Характеристика;
	КонецЕсли;
	// Конец Характеристики
	
	//Партии
	Если ИмяТабличнойЧасти = "Запасы"
		Тогда
		НоваяСтрока.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
		НоваяСтрока.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
		
		НоваяСтрока.Партия = ?(ЗначениеЗаполнено(НоваяСтрока.Партия), НоваяСтрока.Партия, СтруктураДанные.Партия);
	КонецЕсли;
	//Конец Партии	
		
КонецПроцедуры

&НаСервере
Процедура ВыдатьПодаркиНаВыборНаСервере(Результат, ДополнительныеПараметры) Экспорт
	
	ПереноситьВПродажи = Ложь;
	ТаблицаПодарков = ПолучитьИзВременногоХранилища(Результат);
	Для каждого СтрокаПодарка Из ТаблицаПодарков Цикл
		НоваяСтрока = Объект.Подарки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПодарка,, "КлючСвязи");
		// Уточнить сумму скидки в результате выбора подарка
		ОтборСкидок = Новый Структура;
		ОтборСкидок.Вставить("СкидкаНаценка", СтрокаПодарка.СкидкаНаценка);
		ОтборСкидок.Вставить("КлючСвязи", 0);
		СтрокиСкидки = Объект.СкидкиНаценки.НайтиСтроки(ОтборСкидок);
		Если СтрокиСкидки.Количество() > 0 Тогда
			ТекущаяСкидка = СтрокиСкидки[0];
			ТекущаяСкидка.Сумма = СтрокаПодарка.Сумма;
			//ТекущаяСкидка.ЗначениеСкидкиНаценки = 100;
		КонецЕсли;
		
		// Серии номенклатуры
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура", СтрокаПодарка.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", СтрокаПодарка.Характеристика);		

		СтатусПартии = Новый СписокЗначений;
		СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
		СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
		
		СтруктураДанные.Вставить("СтатусПартии", СтатусПартии);
		СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
		
		СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанные);
		
		ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект.Подарки, НоваяСтрока, "КлючСвязи");
		НоваяСтрока.СтатусыСерийНоменклатуры = СерииНоменклатурыУНФ.СтатусСерийНоменклатурыПриИзменении(СтруктураДанные);
		
		УчитыватьПодарокКакПродажу = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПодарка.СкидкаНаценка, "УчитыватьПодарокКакПродажу");
		Если УчитыватьПодарокКакПродажу Тогда
			ПереноситьВПродажи = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ПереноситьВПродажи Тогда
		КоличествоПеренесенных = 0;
		ПеренестиСкидкиПодаркиВЗапасы();
	КонецЕсли;
	ОбновитьВидимостьПодарков();
	ВыдатьПодаркиНаВыбор = Ложь;
	
КонецПроцедуры

// Функция сравнивает данные расчёта скидок на текущий момент времени с данными последнего расчёт скидок в документе.
// Если скидки изменились, то функция возвращает значение Истина.
//
&НаСервере
Функция СкидкиИзменились()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	
	ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	
	СкидкиИзменились = Ложь;
	
	КоличествоСтрок = ПримененныеСкидки.ТаблицаСкидкиНаценки.Количество();
	Если КоличествоСтрок <> Объект.СкидкиНаценки.Количество() Тогда
		СкидкиИзменились = Истина;
	Иначе
		
		Если Объект.Запасы.Итог("СуммаАвтоматическойСкидки") <> Объект.СкидкиНаценки.Итог("Сумма") Тогда
			СкидкиИзменились = Истина;
		КонецЕсли;
		
		Если Не СкидкиИзменились Тогда
			Для НомерСтроки = 1 По КоличествоСтрок Цикл
				Если    Объект.СкидкиНаценки[НомерСтроки-1].Сумма <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].Сумма
					ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].КлючСвязи <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].КлючСвязи
					ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].СкидкаНаценка <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].СкидкаНаценка Тогда
					СкидкиИзменились = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СкидкиИзменились Тогда
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат СкидкиИзменились;
	
КонецФункции

&НаСервере
Процедура РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры)
	
	Если Объект.ДокументОснование <> Неопределено И НЕ Объект.ДокументОснование.Пустая() Тогда
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя")
			ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.АктВыполненныхРабот")
			ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РасходнаяНакладная")
			Тогда
			РассчитатьСкидкиНаценкиПоДокументуОснованиюСервер();
			СтруктураПараметры.Вставить("ПрименятьКОбъекту", Ложь);
			ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
		ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.Событие") Тогда
			ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
		Иначе
			// При вводе счета на оплату на основании отчета о переработке, данные об автоматических скидках не заполняем.
		КонецЕсли;
	Иначе
		ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	КонецЕсли;

	ВывестиСообщения = Ложь;
	Если ПримененныеСкидки.ТаблицаСообщений.Количество() > 0 Тогда
		ВывестиСообщения = Истина;
	КонецЕсли;						
 	Если ПримененныеСкидки.Свойство("ТаблицаПодарковНаВыбор") Тогда
		АдресПодарковНаВыбор = ПоместитьВоВременноеХранилище(ПримененныеСкидки.ТаблицаПодарковНаВыбор, УникальныйИдентификатор);
		ВыдатьПодаркиНаВыбор = Истина;
	Иначе
		АдресПодарковНаВыбор = "";
		ВыдатьПодаркиНаВыбор = Ложь;
	КонецЕсли;

	ПеренестиСкидкиПодаркиВЗапасы(ПримененныеСкидки);
	ДействиеПослеВыдачиПодарка = "";   
	
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
	Модифицированность = Истина;
	
	СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект, "Запасы");
	ОбновитьВидимостьПодарков();
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
	
		Объект.СкидкиРассчитаны = Истина;
	
	КонецЕсли;
	
	Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьИнформациюОСкидкахКлиент()
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		РабочееМесто = МенеджерОборудованияКлиент.РабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
		ТекстВопроса = НСтр("ru='Скидки (наценки) не рассчитаны, рассчитать?'");
		
		ДополнительныеПараметры = Новый Структура; 
		ДополнительныеПараметры.Вставить("СтруктураПараметры", СтруктураПараметры);
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросРассчитатьСкидки", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросРассчитатьСкидки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	СтруктураПараметры = ДополнительныеПараметры.СтруктураПараметры;
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры);
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры)
	
	Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		РассчитатьСкидкиНаценкиКлиент();
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция СброситьФлагСкидкиРассчитаныСервер(Действие, КолонкаТЧ = "")
	
	ТребуетсяПересчет = Ложь;
	Если ИспользоватьАвтоматическиеСкидки И Объект.Запасы.Количество() > 0 И (Объект.СкидкиРассчитаны ИЛИ УстановленСерыйЦвет) Тогда
		ТребуетсяПересчет = СброситьФлагСкидкиРассчитаны(Действие, КолонкаТЧ);
	КонецЕсли;
	Возврат ТребуетсяПересчет;
	
КонецФункции

&НаКлиенте
Функция СброситьФлагСкидкиРассчитаныКлиент(Действие, КолонкаТЧ = "")
	
	ТребуетсяПересчет = Ложь;
	Если ИспользоватьАвтоматическиеСкидки И Объект.Запасы.Количество() > 0 И (Объект.СкидкиРассчитаны ИЛИ УстановленСерыйЦвет) Тогда
		ТребуетсяПересчет = СброситьФлагСкидкиРассчитаны(Действие, КолонкаТЧ);
		Если ТребуетсяПересчет Тогда
			СкидкиНаценкиКлиент.ОбновитьКартинкиСкидкиРассчитаны(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	Возврат ТребуетсяПересчет;
	
КонецФункции

// Функция сбрасывает флаг СкидкиРассчитаны, если это необходимо, и возвращает Истина, если требуется пересчёт скидок.
//
&НаСервере
Функция СброситьФлагСкидкиРассчитаны(Действие, КолонкаТЧ = "")
	
	Возврат СкидкиНаценкиСервер.СброситьФлагСкидкиРассчитаны(ЭтотОбъект, Действие, КолонкаТЧ);
	
КонецФункции

&НаСервере
Процедура АвтоматическиеСкидкиПриСозданииНаСервере()
	
	УстановленСерыйЦвет = Ложь;
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки");
	Если ИспользоватьАвтоматическиеСкидки Тогда
		Если Объект.Запасы.Количество() = 0 Тогда
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.ОбновитьСерый;
			УстановленСерыйЦвет = Истина;
		ИначеЕсли НЕ Объект.СкидкиРассчитаны Тогда
			Объект.СкидкиРассчитаны = Ложь;
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.ОбновитьКрасный;
		Иначе
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДисконтныеКарты

&НаКлиенте
Процедура СчитатьДисконтнуюКартуНажатие(Элемент)
	
	СтруктураПараметров = Новый Структура("Контрагент", Объект.Контрагент);
	ОписаниеОповещения = Новый ОписаниеОповещения("СчитатьДисконтнуюКартуНажатиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ДисконтныеКарты.Форма.СчитываниеДисконтнойКарты", СтруктураПараметров, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
Процедура СчитатьДисконтнуюКартуНажатиеЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт

	Если ТипЗнч(ВозвращаемыеПараметры) = Тип("Структура") Тогда
		СчитанаДисконтнаяКарта = ВозвращаемыеПараметры.СчитанаДисконтнаяКарта;
		ВыбранаДисконтнаяКарта(ВозвращаемыеПараметры.ДисконтнаяКарта);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыбранаДисконтнаяКарта(ДисконтнаяКарта)

	ВладелецДисконтнойКарты = ПолучитьВладельцаДисконтнойКарты(ДисконтнаяКарта);
	Если Объект.Контрагент.Пустая() И Не ВладелецДисконтнойКарты.Пустая() Тогда
		Объект.Контрагент = ВладелецДисконтнойКарты;
		КонтрагентПриИзменении(Элементы.Контрагент);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Заполнен контрагент и считана дисконтная карта'"),
			ПолучитьНавигационнуюСсылку(ДисконтнаяКарта),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В документе заполнен контрагент и считана дисконтная карта %1'"), ДисконтнаяКарта),
			БиблиотекаКартинок.Информация32);
	ИначеЕсли Объект.Контрагент <> ВладелецДисконтнойКарты И Не ВладелецДисконтнойКарты.Пустая() Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Дисконтная карта не считана. Владелец дисконтной карты не совпадает с контрагентом в документе.'"),
			,
			"Контрагент",
			"Объект");
		
		Возврат;
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Считана дисконтная карта'"),
			ПолучитьНавигационнуюСсылку(ДисконтнаяКарта),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Считана дисконтная карта %1'"), ДисконтнаяКарта),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВыбранаДисконтнаяКартаДополнительно(ДисконтнаяКарта);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбранаДисконтнаяКартаДополнительно(ДисконтнаяКарта)
	
	Если Не Модифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Объект.ДисконтнаяКарта = ДисконтнаяКарта;
	Объект.ПроцентСкидкиПоДисконтнойКарте = ДисконтныеКартыУНФВызовСервера.ВычислитьПроцентСкидкиПоДисконтнойКарте(
		Объект.Дата, ДисконтнаяКарта);
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	
	ОбновитьКартинкуДисконтнойКарты();
	
	Если ДисконтныеКартыУНФВызовСервера.СтарыйМеханизмСкидок(ДисконтнаяКарта) Тогда
	
		Если Объект.Запасы.Количество() > 0 Тогда
			Текст = НСтр("ru = 'Перезаполнить скидки во всех строках?'");
			Оповещение = Новый ОписаниеОповещения("ВыбранаДисконтнаяКартаДополнительноЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		КонецЕсли;
		
	Иначе
		
		РассчитатьСкидкиНаценки(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранаДисконтнаяКартаДополнительноЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		УправлениеНебольшойФирмойКлиент.ПерезаполнитьСкидкиТабличнойЧастиПослеСчитыванияДисконтнойКарты(ЭтотОбъект, "Запасы");
	КонецЕсли;
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	// АвтоматическиеСкидки
	СброситьФлагСкидкиРассчитаныКлиент("ПересчетСкидокПоДисконтнойКарте");
	
	// Ручные скидки
	СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект);
	// Конец Ручные скидки
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВладельцаДисконтнойКарты(ДисконтнаяКарта)
	
	Возврат ДисконтнаяКарта.ВладелецКарты;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоДисконтнаяКартаСФиксированнойСкидкой(ДисконтнаяКарта)
	
	Возврат ДисконтнаяКарта.Владелец.ВидСкидкиВДисконтныхКартах = Перечисления.ВидыСкидокВДисконтныхКартах.ФиксированнаяСкидка;
	
КонецФункции

// Процедура выполняется только для НАКОПИТЕЛЬНЫХ дисконтных карт.
// Процедура пересчитывает скидки документа, после изменения даты документа. Пересчёт выполняется, если процент скидки
// по выбранной дисконтной карте, изменился. 
//
&НаКлиенте
Процедура ПересчитатьПроцентСкидкиПриИзмененииДатыДокумента()
	
	Если Объект.ДисконтнаяКарта.Пустая() ИЛИ ЭтоДисконтнаяКартаСФиксированнойСкидкой(Объект.ДисконтнаяКарта) Тогда
		Возврат;
	КонецЕсли;
	
	ПредПроцентСкидкиПоДисконтнойКарте = Объект.ПроцентСкидкиПоДисконтнойКарте;
	НовПроцентСкидкиПоДисконтнойКарте = ДисконтныеКартыУНФВызовСервера.ВычислитьПроцентСкидкиПоДисконтнойКарте(
		Объект.Дата, Объект.ДисконтнаяКарта);
	
	Если ПредПроцентСкидкиПоДисконтнойКарте <> НовПроцентСкидкиПоДисконтнойКарте Тогда
		
		Если Объект.Запасы.Количество() > 0 Тогда
			Текст = СтрШаблон(НСтр(
				"ru='Изменить % скидки по накопительной дисконтной карте с %1 на %2 и перезаполнить скидки во всех строках?'"),
				ПредПроцентСкидкиПоДисконтнойКарте, НовПроцентСкидкиПоДисконтнойКарте);
			
			ДополнительныеПараметры = Новый Структура("НовПроцентСкидкиПоДисконтнойКарте, ПересчитатьТЧ",
				НовПроцентСкидкиПоДисконтнойКарте, Истина);
			Оповещение = Новый ОписаниеОповещения("ПересчитатьПроцентСкидкиПриИзмененииДатыДокументаЗавершение",
				ЭтотОбъект, ДополнительныеПараметры);
		Иначе
			Текст = СтрШаблон(НСтр("ru='Изменить % скидки по накопительной дисконтной карте с %1 на %2 ?'"),
				ПредПроцентСкидкиПоДисконтнойКарте, НовПроцентСкидкиПоДисконтнойКарте);
			
			ДополнительныеПараметры = Новый Структура("НовПроцентСкидкиПоДисконтнойКарте, ПересчитатьТЧ",
				НовПроцентСкидкиПоДисконтнойКарте, Ложь);
			Оповещение = Новый ОписаниеОповещения("ПересчитатьПроцентСкидкиПриИзмененииДатыДокументаЗавершение",
				ЭтотОбъект, ДополнительныеПараметры);
		КонецЕсли;
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьПроцентСкидкиПриИзмененииДатыДокументаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ПроцентСкидкиПоДисконтнойКарте = ДополнительныеПараметры.НовПроцентСкидкиПоДисконтнойКарте;
		
		ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
			УчетВалютныхОпераций);
		
		Если ДополнительныеПараметры.ПересчитатьТЧ Тогда
			УправлениеНебольшойФирмойКлиент.ПерезаполнитьСкидкиТабличнойЧастиПослеСчитыванияДисконтнойКарты(ЭтотОбъект, "Запасы");
			
			// Платежный календарь.
			ПересчитатьПлатежныйКалендарь();
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

&НаКлиенте
Процедура ЗапасыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВставитьСтроки(Команда)
	
	ВставитьСтроки("Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтроки(ИмяТЧ, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных);
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы", Истина);

	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВставленныеСтроки(ИмяТЧ, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		РассчитатьСуммуВСтрокеТабличнойЧасти(Строка);
		
		// Наборы
		Строка.НоменклатураНабора = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
		Строка.ХарактеристикаНабора = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
		Строка.ДоляСтоимости = 0;
		// Конец Наборы
			
	КонецЦикла;
	
	ОбновитьПодвалФормы();
	РассчитатьОбъемИВесВДокументе();
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Организация", 	   Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура", 	   Строка.Номенклатура);
		СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
		
		ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, Строка, СтруктураДанные);

		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		КонецЕсли;
		Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ГрупповоеИзменениеСтрок

&НаКлиенте
Процедура ЗапасыИзменитьСтроки(Команда)
	
	ПоказатьСкрытьПанельРедактирования(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыОтменитьИзменения(Команда)
	
	ПоказатьСкрытьПанельРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСнятьФлажки(Команда)
	УстановитьПометку(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыУстановитьФлажки(Команда)
	УстановитьПометку(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВыполнитьДействие(Команда)
	
	ОбработатьТаблицу();
	НастроитьОформлениеПанелиРедактирования(4);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменениеСтрокДействиеПриИзменении(Элемент)
	
	ОпределитьОбъектИзменений();
	НастроитьОформлениеПанелиРедактирования(2);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПометкаПриИзменении(Элемент)
	ГрупповоеИзменениеСтрокКлиент.СтрокаПометкаПриИзменении(Объект.Запасы, Элементы.ЗапасыУстановитьФлажки, Элементы.ЗапасыСнятьФлажки);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменениеСтрокЗначениеПриИзменении(Элемент)
	
	НастроитьОформлениеПанелиРедактирования(3);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометку(Пометка)
	
	Элементы.ЗапасыСнятьФлажки.Видимость = НЕ Элементы.ЗапасыСнятьФлажки.Видимость;
	Элементы.ЗапасыУстановитьФлажки.Видимость = НЕ Элементы.ЗапасыУстановитьФлажки.Видимость;
	
	Для каждого Строка Из Объект.Запасы Цикл
		Строка.Пометка = Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСкрытьПанельРедактирования(ИзменяетДанные = Неопределено)
	
	Перем СостояниеПерехода;
	
	ГрупповоеИзменениеСтрокСервер.ПоказатьСкрытьПанельРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокСервер(),
		СостояниеПерехода,
		ИзменяетДанные);
	
	Элементы.Скидки.Доступность = (СостояниеПерехода=0);
	
	УправлениеРезервнымиКопиямиТаблицы(СостояниеПерехода, ИзменяетДанные);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеРезервнымиКопиямиТаблицы(СостояниеПерехода, ИзменяетДанные)
	
	ГрупповоеИзменениеСтрокСервер.УправлениеРезервнымиКопиями(
		ЭтотОбъект,
		Объект.Запасы,
		ЗапасыРезервнаяКопияТаблицыАдрес,
		СостояниеПерехода,
		ИзменяетДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОформлениеПанелиРедактирования(Состояние, СохранитьИзменения = Неопределено)
	
	Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьСуммы") Тогда
		Элементы.НастроитьОкругления.Видимость = Истина;
	Иначе
		Элементы.НастроитьОкругления.Видимость = Ложь;
	КонецЕсли;
	
	ГрупповоеИзменениеСтрокКлиент.НастроитьОформлениеПанелиРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокКлиент(),
		Состояние,
		ЗапасыИзменениеСтрокЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекущееДействиеИзмененияСтрок()
	
	Если ЗапасыИзменениеСтрокДействие = ЗапасыИзменениеСтрокДействиеПриОткрытии Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьТекущееДействиеИзмененияСтрокСервер();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьТекущееДействиеИзмененияСтрокСервер()
	
	ГрупповоеИзменениеСтрокСервер.СохранитьНастройки(НаборЭлементовГрупповогоИзмененияСтрокСервер());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТаблицу()
	
	// Наборы
	Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки") Тогда
		ИзменяемыеСтроки = Объект.Запасы.НайтиСтроки(Новый Структура("Пометка", Истина));
		Если ИзменяемыеСтроки.Количество()=Объект.Запасы.Количество() Тогда
			// Если выделены все строки - проверки удаления наборов не выполняются
			Объект.ДобавленныеНаборы.Очистить();
		Иначе
			Для каждого Строка Из ИзменяемыеСтроки Цикл
				Если ЗначениеЗаполнено(Строка.НоменклатураНабора) Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Действие недоступно для наборов.'");
					Сообщение.Поле = "Объект.Запасы";
					Сообщение.Сообщить();
					Возврат;
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	// Конец Наборы
	
	ОбработатьТаблицуНаСервере();
	
	ИзменяемыеСтроки = Объект.Запасы.НайтиСтроки(Новый Структура("Пометка", Истина));
	Для каждого Строка Из ИзменяемыеСтроки Цикл
		
		Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(Строка);
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСкидкуСуммой") Тогда
			
			ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(Строка, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
			
			// АвтоматическиеСкидки.
			СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти");
			
			Строка.ПроцентАвтоматическойСкидки = 0;
			Строка.СуммаАвтоматическойСкидки = 0;
			// Конец АвтоматическиеСкидки
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьСуммы") Тогда
			
			Если Строка.Количество <> 0 Тогда
				Строка.Цена = Строка.Сумма / Строка.Количество;
			КонецЕсли;
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(Строка);			
			
			// Платежный календарь.
			ПересчитатьПлатежныйКалендарь();
			
			// АвтоматическиеСкидки.
			СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти");
			
			Строка.ПроцентАвтоматическойСкидки = 0;
			Строка.СуммаАвтоматическойСкидки = 0;
			// Конец АвтоматическиеСкидки
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
			
			ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(Строка, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			
			Если Строка.Количество <> 0 Тогда
				Строка.Цена = Строка.Сумма / Строка.Количество;
			КонецЕсли;
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(Строка, Новый Структура("РассчитатьЦену", Истина));			
			
			// АвтоматическиеСкидки.
			СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти");
			// Конец АвтоматическиеСкидки
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьПодвалФормы();
	ПересчитатьПлатежныйКалендарь();
	
	Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки")
		ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСкидкуСуммой") Тогда
		
		ГрупповоеИзменениеСтрокКлиент.ОчиститьДействиеЗначение(ЗапасыИзменениеСтрокДействие, ЗапасыИзменениеСтрокЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьТаблицуНаСервере()
	
	ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
		ЭтотОбъект,
		Объект.Запасы,
		ЗапасыИзменениеСтрокДействие,
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит,
		ЗапасыИзменениеСтрокЗначение,
		"ЗапасыНоменклатура");
	
	Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
		
		ИзменяемыеСтроки = Объект.Запасы.НайтиСтроки(Новый Структура("Пометка", Истина));
		Для каждого Строка Из ИзменяемыеСтроки Цикл
			
			СтруктураДанные = Новый Структура();
			
			СтруктураДанные.Вставить("Организация", 	 Объект.Организация);
			СтруктураДанные.Вставить("ДатаОбработки",	 Объект.Дата);
			СтруктураДанные.Вставить("ВидЦен",			 Объект.ВидЦен);
			СтруктураДанные.Вставить("ВалютаДокумента",	 Объект.ВалютаДокумента);
			СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
			СтруктураДанные.Вставить("Номенклатура",	 Строка.Номенклатура);
			СтруктураДанные.Вставить("Характеристика",	 Строка.Характеристика);
			СтруктураДанные.Вставить("Коэффициент",		 1);
			СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
			СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
			
			// ДисконтныеКарты
			СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
			СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);		
			// Конец ДисконтныеКарты
			
			ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, Строка, СтруктураДанные);

			СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
			
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
			Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
				Строка.Количество = 1;
			КонецЕсли;
			Строка.Цена = СтруктураДанные.Цена;
			Строка.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
			Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
			Строка.Содержание = "";
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьОбъектИзменений()
	
	Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьСуммы") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "ПроцентСкидкиНаценки";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыПроцентСкидкиНаценки";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "СтавкаНДС";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСтавкаНДС";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки")
		ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НаборЭлементовГрупповогоИзмененияСтрокКлиент()
	
	НаборЭлементов = Новый Структура();
	НаборЭлементов.Вставить("ИмяТЧ", "Запасы");
	НаборЭлементов.Вставить("ДокументСсылка", Объект.Ссылка);
	НаборЭлементов.Вставить("ПанельРедактирования", Элементы.ГруппаЗапасыИзменениеСтрок);
	НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ЗапасыВыполнитьДействие);
	НаборЭлементов.Вставить("КолонкаПометка", Элементы.ЗапасыПометка);
	НаборЭлементов.Вставить("КолонкаНомерСтроки", Элементы.ЗапасыНомерСтроки);
	НаборЭлементов.Вставить("Действие", ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("ДействиеЭлемент", Элементы.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("Значение", ЭтотОбъект.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ЗначениеЭлемент", Элементы.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ОбъектИзменений", ЗапасыИзменениеСтрокОбъектИзмененийЭлемент);
	НаборЭлементов.Вставить("КолонкаОбъектИзменений", ?(ЗначениеЗаполнено(ЗапасыИзменениеСтрокОбъектИзмененийЭлемент), Элементы[ЗапасыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	Возврат НаборЭлементов;
	
КонецФункции

&НаСервере
Функция НаборЭлементовГрупповогоИзмененияСтрокСервер()
	
	НаборЭлементов = Новый Структура();
	НаборЭлементов.Вставить("ИмяТЧ", "Запасы");
	НаборЭлементов.Вставить("ДокументСсылка", Объект.Ссылка);
	НаборЭлементов.Вставить("ПанельРедактирования", Элементы.ГруппаЗапасыИзменениеСтрок);
	НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ЗапасыВыполнитьДействие);
	НаборЭлементов.Вставить("КнопкаИзменитьСтроки", Элементы.ЗапасыИзменитьСтроки);
	НаборЭлементов.Вставить("КолонкаПометка", Элементы.ЗапасыПометка);
	НаборЭлементов.Вставить("КолонкаНомерСтроки", Элементы.ЗапасыНомерСтроки);
	НаборЭлементов.Вставить("Действие", ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("ДействиеЭлемент", Элементы.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("Значение", ЭтотОбъект.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ЗначениеЭлемент", Элементы.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ОбъектИзменений", ЗапасыИзменениеСтрокОбъектИзмененийЭлемент);
	НаборЭлементов.Вставить("КолонкаОбъектИзменений", ?(ЗначениеЗаполнено(ЗапасыИзменениеСтрокОбъектИзмененийЭлемент), Элементы[ЗапасыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	НаборЭлементов.Вставить("РезервнаяКопияТаблицыАдрес", ЗапасыРезервнаяКопияТаблицыАдрес);
	Возврат НаборЭлементов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокДействий(РазрешеноРедактированиеЦенДокументов)
	
	Действия = Новый Массив;
	Если РазрешеноРедактированиеЦенДокументов Тогда
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент);
	КонецЕсли;
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОкруглитьСуммы);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду);
	Если РазрешеноРедактированиеЦенДокументов Тогда
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам);
	КонецЕсли;
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки);
	
	Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Очистить();
	Для каждого Действие Из Действия Цикл
		ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
		Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область АвтоподборКонтактов

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_ОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_АвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, Параметры, Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыборИзКлассификатораКонтактов()
	
	ЭлектроннаяПочтаУНФКлиент.ПоказатьВыборИзКлассификатораКонтактов(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Биллинг

&НаСервере
Процедура РасшифровкаБиллингаУстановитьУсловноеОформление()
	
	// Если в строке таблицы объектом договора обслуживания выбрана статья затрат, то делаем недоступными колонки: Ед, Характеристика.
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	Отбор = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование  = Истина;
	Отбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаБиллингаЭтоПланСчетов.ПутьКДанным);
	Отбор.ПравоеЗначение = Истина;
	
	ОформляемоеПоле                = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле           = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаБиллингаХарактеристика.Имя);
	ОформляемоеПоле.Использование  = Истина;
	
	ОформляемоеПоле                = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле           = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаБиллингаЕдиницаИзмерения.Имя);
	ОформляемоеПоле.Использование  = Истина;
	
	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("ТолькоПросмотр");
	Оформление.Значение      = Истина;
	Оформление.Использование = Истина;
	
	// Если в строке таблицы объектом договора обслуживания выбрана статья затрат, то обязательной для заполнения колонку ПредставлениеВСчете.
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	Отбор = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование  = Истина;
	Отбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаБиллингаЭтоПланСчетов.ПутьКДанным);
	Отбор.ПравоеЗначение = Истина;
	
	Отбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Отбор.Использование  = Истина;
	Отбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаБиллингаОбъектДоговораОбслуживания.ПутьКДанным);
	
	ОформляемоеПоле                = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле           = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаБиллингаПредставлениеВСчете.Имя);
	ОформляемоеПоле.Использование  = Истина;
	
	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("ОтметкаНезаполненного");
	Оформление.Значение      = Истина;
	Оформление.Использование = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРасшифровкуБиллинга()
	
	Для каждого Стр Из Объект.РасшифровкаБиллинга Цикл
		
		Стр.ЭтоПланСчетов = ТипЗнч(Стр.ОбъектДоговораОбслуживания) = Тип("ПланСчетовСсылка.Управленческий");
		
	КонецЦикла;
	
КонецПроцедуры

// Если выбран договор обслуживания, то заполнение документа выполняется через таблицу РасшифровкаБиллинга.
//
&НаСервере
Процедура УстановитьВидимостьРасшифровкиБиллинга()
	
	Элементы.ГруппаЗапасыКоманднаяПанель.Доступность = НЕ ЭтоДоговорОбслуживания;
	Элементы.ЗапасыКонтекстноеМенюГруппаИзменение.Доступность = НЕ ЭтоДоговорОбслуживания;
	Элементы.ГруппаЗапасыИзменениеСтрок.Доступность = НЕ ЭтоДоговорОбслуживания;
	
	Элементы.ГруппаРасшифровкаБиллинга.Видимость = ЭтоДоговорОбслуживания;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьДанныеПоРасшифровкеБиллинга()
	
	Документы.СчетНаОплату.ПерезаполнитьЗапасыПоРасшифровкеБиллинга(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРасшифровкуБиллинга()
	
	Если ЭтоДоговорОбслуживания Тогда
		Документы.СчетНаОплату.ЗаполнитьРасшифровкуБиллинга(Объект);
	Иначе
		Объект.РасшифровкаБиллинга.Очистить();
	КонецЕсли;
	
	УстановитьВидимостьРасшифровкиБиллинга();
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаБиллингаПриИзмененииОбъектаДоговораОбслуживания(ДанныеЗаполнения)
	
	СтруктураДанные = Неопределено;
	Если ТипЗнч(ДанныеЗаполнения.ОбъектДоговораОбслуживания) = Тип("СправочникСсылка.Номенклатура") Тогда
		СтруктураДанные = Новый Структура();
		
		СтруктураДанные.Вставить("Организация",      Объект.Организация);
		СтруктураДанные.Вставить("ДатаОбработки",    Объект.Дата);
		СтруктураДанные.Вставить("ВидЦен",           Объект.ВидЦен);
		СтруктураДанные.Вставить("ВалютаДокумента",  Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("Номенклатура",     ДанныеЗаполнения.ОбъектДоговораОбслуживания);
		СтруктураДанные.Вставить("Характеристика",   ДанныеЗаполнения.Характеристика);
		СтруктураДанные.Вставить("Коэффициент",      1);
		СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
		
		ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, Неопределено, СтруктураДанные);

		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	КонецЕсли;
	
	ДанныеЗаполнения.Количество       = 1;
	ДанныеЗаполнения.ЕдиницаИзмерения = ?(СтруктураДанные = Неопределено, Неопределено, СтруктураДанные.ЕдиницаИзмерения);
	ДанныеЗаполнения.Цена             = ?(СтруктураДанные = Неопределено, 0, СтруктураДанные.Цена);
	ДанныеЗаполнения.ПредставлениеВСчете = 
		Справочники.ТарифныеПланыДоговоровОбслуживания.ПредставлениеВСчете(Объект.Договор.ДоговорОбслуживанияТарифныйПлан, ДанныеЗаполнения.ОбъектДоговораОбслуживания);
	
	МассивПараметров = Новый Массив;
	Если ТипЗнч(ДанныеЗаполнения.ОбъектДоговораОбслуживания) = Тип("ПланСчетовСсылка.Управленческий") Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Услуга);
		МассивПараметров.Добавить(НовыйПараметр);
	КонецЕсли;
	
	Элементы.РасшифровкаБиллингаПредставлениеВСчете.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаБиллингаПриИзмененииЕдиницыИзмерения(ПредыдущееЗначение, ВыбранноеЗначение, ДанныеЗаполнения)
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(ПредыдущееЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(Неопределено, ПредыдущееЗначение, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(Неопределено, ПредыдущееЗначение);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(Неопределено, Неопределено, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		ДанныеЗаполнения.Цена = ДанныеЗаполнения.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
		ДанныеЗаполнения.Сумма = ДанныеЗаполнения.Количество * ДанныеЗаполнения.Цена;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаБиллингаРассчитатьСуммуВСтрокеТабличнойЧасти(ДанныеЗаполнения)
	
	ДанныеЗаполнения.Сумма = ДанныеЗаполнения.Количество * ДанныеЗаполнения.Цена;
	
КонецПроцедуры

#КонецОбласти

#Область Наборы

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаменитьСтрокуЗапасовДаннымиНабора(Форма, СтрокаТабличнойЧасти, СтруктураДанные)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	НаборыКлиентСервер.ЗаменитьСтрокуДаннымиНабора(Объект, "Запасы", СтрокаТабличнойЧасти, СтруктураДанные); 
		
	// Ручная скидка - заполнение полей ввода на форме
	СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(Форма);
	// Конец Ручная скидка
		
	Элементы.ЗапасыКартинкаНабора.Видимость = Истина;
			
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСоставНабора(СтрокаТабличнойЧасти)
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.НоменклатураНабора);
	СтруктураОткрытия.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.ХарактеристикаНабора);
	ДобавленныеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОткрытия);
	СтрокиНабора = Объект.Запасы.НайтиСтроки(СтруктураОткрытия);
	Если ДобавленныеСтроки.Количество()=0 Тогда
		СтруктураОткрытия.Вставить("Количество", 1);
	Иначе
		СтруктураОткрытия.Вставить("Количество", ДобавленныеСтроки[0].Количество);
	КонецЕсли; 
	СтруктураОткрытия.Вставить("СоставНабора", Новый Массив);
	Для каждого Стр Из СтрокиНабора Цикл
		СвойстваСтроки = Новый Структура;
		СвойстваСтроки.Вставить("Номенклатура");
		СвойстваСтроки.Вставить("Характеристика");
		СвойстваСтроки.Вставить("Количество");
		СвойстваСтроки.Вставить("Цена");
		СвойстваСтроки.Вставить("ДоляСтоимости");
		СвойстваСтроки.Вставить("ЕдиницаИзмерения");
		СвойстваСтроки.Вставить("Активная");
		ЗаполнитьЗначенияСвойств(СвойстваСтроки, Стр);
		СвойстваСтроки.Активная = (Стр=СтрокаТабличнойЧасти); 
		СтруктураОткрытия.СоставНабора.Добавить(СвойстваСтроки);
	КонецЦикла; 
	ОткрытьФорму("РегистрСведений.СоставНаборов.Форма.ФормаРедактированияСостава", СтруктураОткрытия, ЭтотОбъект, , , ,
		, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоставНабора(НоменклатураНабора, ХарактеристикаНабора, КоличествоНаборов, ЦенаНабора, СоставНабора)
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("НоменклатураНабора", НоменклатураНабора);
	СтруктураДанных.Вставить("ХарактеристикаНабора", ХарактеристикаНабора);
	СтруктураДанных.Вставить("ИмяТабличнойЧасти", "Запасы");
	СтруктураДанных.Вставить("СоставНабора", СоставНабора);
	СтруктураДанных.Вставить("КоличествоНаборов", КоличествоНаборов);
	СтруктураДанных.Вставить("ЦенаНабора", ЦенаНабора);
	НаборыСервер.ОбновитьСоставНабораВДокументе(СтруктураДанных, Объект);
	Модифицированность = Истина;

	// АвтоматическиеСкидки.
	СброситьФлагСкидкиРассчитаныСервер("ОбработкаПодбора");
	// Конец АвтоматическиеСкидки
	
	// Ручная скидка - заполнение полей ввода на форме
	СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект);
	// Конец Ручная скидка
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДанныеКартинокНаборов(Запасы, ДобавленныеНаборы)
	
	Для каждого Стр Из Запасы Цикл
		Стр.КартинкаНабора = НаборыКлиентСервер.КартинкаНабора(Стр, ДобавленныеНаборы);
		Если Стр.КартинкаНабора>5 Тогда
			Стр.КартинкаНабора = ((Стр.КартинкаНабора - 1) % 5) + 1;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры
 
&НаСервереБезКонтекста
Процедура ОбновитьПризнакиНабора(Запасы)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНаборы") Тогда
		Возврат;
	КонецЕсли; 
	
	МассивНоменклатуры = Новый Массив;
	Для каждого Стр Из Запасы Цикл
		Если ЗначениеЗаполнено(Стр.Номенклатура) И НЕ ЗначениеЗаполнено(Стр.НоменклатураНабора) И ТипЗнч(Стр.Номенклатура)=Тип("СправочникСсылка.Номенклатура") Тогда
			МассивНоменклатуры.Добавить(Стр.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивНоменклатуры.Количество()>0 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&МассивНоменклатуры)
		|	И Номенклатура.ЭтоНабор";
		Выборка = Запрос.Выполнить().Выбрать();
		ПараметрыНоменклатуры = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			ПараметрыНоменклатуры.Вставить(Выборка.Ссылка, Истина);	
		КонецЦикла; 
		
		Для каждого Стр Из Запасы Цикл
			Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) ИЛИ ЗначениеЗаполнено(Стр.НоменклатураНабора) ИЛИ ТипЗнч(Стр.Номенклатура)<>Тип("СправочникСсылка.Номенклатура") Тогда
				Стр.ЭтоНабор = Ложь;
			Иначе
				Стр.ЭтоНабор = ПараметрыНоменклатуры.Получить(Стр.Номенклатура);
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ХарактеристикиНабора(Номенклатура, Текст)
	
	СтруктураПараметров = Новый Структура();
	Если ПустаяСтрока(Текст) Тогда
		СтруктураПараметров.Вставить("СтрокаПоиска", Неопределено);
	Иначе
		СтруктураПараметров.Вставить("СтрокаПоиска", Текст);
	КонецЕсли; 
	СтруктураПараметров.Вставить("Отбор", Новый Структура);
	СтруктураПараметров.Отбор.Вставить("Владелец", Номенклатура);
	Возврат Справочники.ХарактеристикиНоменклатуры.ПолучитьДанныеВыбора(СтруктураПараметров);
	
КонецФункции
 
#КонецОбласти 

#Область УчетОригиналовПервичныхДокументов

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ИзменитьСостояниеОригинала(Команда)
	УчетОригиналовПервичныхДокументовУНФКлиент.ИзменитьСостояниеОригинала(Команда, ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область Доставка

&НаСервере
Процедура ПрочитатьВесИОбъемЕдиницыТовара()
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СчетНаОплатуЗапасы.НомерСтроки КАК НомерСтроки,
	|	СчетНаОплатуЗапасы.Номенклатура КАК Номенклатура,
	|	СчетНаОплатуЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ ВТСчетНаОплатуЗапасы
	|ИЗ
	|	&СчетНаОплатуЗапасы КАК СчетНаОплатуЗапасы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТСчетНаОплатуЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(ВесИОбъемЕдиницТоваров.Вес, СпрНоменклатура.Вес * ЕСТЬNULL(СпрЕдиницыИзмерения.Коэффициент, 1)) КАК ВесЕдиницыТовара,
	|	ЕСТЬNULL(ВесИОбъемЕдиницТоваров.Объем, СпрНоменклатура.Объем * ЕСТЬNULL(СпрЕдиницыИзмерения.Коэффициент, 1)) КАК ОбъемЕдиницыТовара
	|ИЗ
	|	ВТСчетНаОплатуЗапасы КАК ВТСчетНаОплатуЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ВТСчетНаОплатуЗапасы.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК СпрЕдиницыИзмерения
	|		ПО ВТСчетНаОплатуЗапасы.ЕдиницаИзмерения = СпрЕдиницыИзмерения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВесИОбъемЕдиницТоваров КАК ВесИОбъемЕдиницТоваров
	|		ПО ВТСчетНаОплатуЗапасы.Номенклатура = ВесИОбъемЕдиницТоваров.Номенклатура
	|			И ВТСчетНаОплатуЗапасы.ЕдиницаИзмерения = ВесИОбъемЕдиницТоваров.ЕдиницаИзмерения");
	Запрос.УстановитьПараметр("СчетНаОплатуЗапасы", Объект.Запасы.Выгрузить(, "НомерСтроки, Номенклатура, ЕдиницаИзмерения"));
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВесИОбъемЕдиницыТовара = Новый Соответствие;
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ВесИОбъемЕдиницыТовара[Выборка.НомерСтроки] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВесИОбъемЕдиницыТовара[Выборка.НомерСтроки] = Новый Структура;
		ВесИОбъемЕдиницыТовара[Выборка.НомерСтроки].Вставить("ВесЕдиницыТовара", Выборка.ВесЕдиницыТовара);
		ВесИОбъемЕдиницыТовара[Выборка.НомерСтроки].Вставить("ОбъемЕдиницыТовара", Выборка.ОбъемЕдиницыТовара);
		
	КонецЦикла;
	
	ТребуетсяРасчетВесаЗаказа = Ложь;
	ТребуетсяРасчетОбъемаЗаказа = Ложь;
	
	Для Каждого ТекСтрокаЗапасы Из Объект.Запасы Цикл
		
		Если ВесИОбъемЕдиницыТовара[ТекСтрокаЗапасы.НомерСтроки] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекСтрокаЗапасы.ВесЕдиницыТовара = ВесИОбъемЕдиницыТовара[ТекСтрокаЗапасы.НомерСтроки].ВесЕдиницыТовара;
		Если Не ЗначениеЗаполнено(ТекСтрокаЗапасы.Вес)
			И ЗначениеЗаполнено(ТекСтрокаЗапасы.ВесЕдиницыТовара * ТекСтрокаЗапасы.Количество) Тогда
			ТекСтрокаЗапасы.Вес = ТекСтрокаЗапасы.ВесЕдиницыТовара * ТекСтрокаЗапасы.Количество;
			ТребуетсяРасчетВесаЗаказа = Истина;
		КонецЕсли;
		
		ТекСтрокаЗапасы.ОбъемЕдиницыТовара = ВесИОбъемЕдиницыТовара[ТекСтрокаЗапасы.НомерСтроки].ОбъемЕдиницыТовара;
		Если Не ЗначениеЗаполнено(ТекСтрокаЗапасы.Объем)
			И ЗначениеЗаполнено(ТекСтрокаЗапасы.ВесЕдиницыТовара * ТекСтрокаЗапасы.Количество) Тогда
			ТекСтрокаЗапасы.Объем = ТекСтрокаЗапасы.ОбъемЕдиницыТовара * ТекСтрокаЗапасы.Количество;
			ТребуетсяРасчетОбъемаЗаказа = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТребуетсяРасчетВесаЗаказа И ЗначениеЗаполнено(Объект.Запасы.Итог("Вес")) Тогда
		Объект.Вес = Объект.Запасы.Итог("Вес");
	КонецЕсли;
	
	Если ТребуетсяРасчетОбъемаЗаказа И ЗначениеЗаполнено(Объект.Запасы.Итог("Объем")) Тогда
		Объект.Объем = Объект.Запасы.Итог("Объем");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОбъемИВесВДокументе()
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Объект.Вес = 0;
		Объект.Объем = 0;
		Возврат;
	КонецЕсли;
	
	Объект.Вес = Объект.Запасы.Итог("Вес");
	Объект.Объем = Объект.Запасы.Итог("Объем");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСуммуНДСДоставки()
	
	СтавкаНДСДоставки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДСДоставки);
	
	Если Объект.СуммаВключаетНДС Тогда
		Объект.СуммаНДСДоставки = Объект.СтоимостьДоставки - Объект.СтоимостьДоставки / ((СтавкаНДСДоставки + 100) / 100);
		СтоимостьДоставкиСНДС = Объект.СтоимостьДоставки;
	Иначе
		Объект.СуммаНДСДоставки = Объект.СтоимостьДоставки * СтавкаНДСДоставки / 100;
		СтоимостьДоставкиСНДС = Объект.СтоимостьДоставки + Объект.СуммаНДСДоставки;
	КонецЕсли;
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСуммуНДСДоставкиПриРасчете()
	
	СтавкаНДСДоставки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДСДоставки);
	
	Объект.СуммаНДСДоставки = СтоимостьДоставкиСНДС - СтоимостьДоставкиСНДС / ((СтавкаНДСДоставки + 100) / 100);
	Объект.СтоимостьДоставки = СтоимостьДоставкиСНДС - ?(Объект.СуммаВключаетНДС, 0, Объект.СуммаНДСДоставки);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦенуДоставки(ПредыдущаяВалюта, КурсПересчетаЦен = Неопределено)
	
	СтруктураКурсы = ЦенообразованиеСервер.ПолучитьКурсыВалют(ПредыдущаяВалюта, Объект.ВалютаДокумента, Объект.Дата);
	
	Если КурсПересчетаЦен <> Неопределено И КурсПересчетаЦен.Свойство("Курс") И КурсПересчетаЦен.Свойство("Кратность") Тогда
		Если ПредыдущаяВалюта = УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту() Тогда
			СтруктураКурсы.Курс 	 = ?(КурсПересчетаЦен.Курс 		= 0, 1, КурсПересчетаЦен.Курс);
			СтруктураКурсы.Кратность = ?(КурсПересчетаЦен.Кратность = 0, 1, КурсПересчетаЦен.Кратность);
		Иначе
			СтруктураКурсы.КурсНач 	 	= ?(КурсПересчетаЦен.Курс	   = 0, 1, КурсПересчетаЦен.Курс);
			СтруктураКурсы.КратностьНач = ?(КурсПересчетаЦен.Кратность = 0, 1, КурсПересчетаЦен.Кратность);
		КонецЕсли;
	КонецЕсли;
	
	Объект.СтоимостьДоставки = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(Объект.СтоимостьДоставки, СтруктураКурсы.КурсНач, СтруктураКурсы.Курс, СтруктураКурсы.КратностьНач, СтруктураКурсы.Кратность);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// ЭДО

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДОНажатие(Элемент, СтандартнаяОбработка)
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект, СтандартнаяОбработка);
КонецПроцедуры
// Конец ЭДО

// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
&НаСервере
Процедура ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	ТоварыДобавлены = Ложь;
	Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТовары = Объект.Запасы.Добавить();
		НоваяСтрокаТовары.Номенклатура = СтрокаТаблицы.Номенклатура;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			НоваяСтрокаТовары.Характеристика = СтрокаТаблицы.Характеристика;
			
		КонецЕсли;
		
		НоваяСтрокаТовары.Цена = СтрокаТаблицы.Цена;
		НоваяСтрокаТовары.Количество = СтрокаТаблицы.Количество;
		
		Если ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения") Тогда
			
			НоваяСтрокаТовары.ЕдиницаИзмерения = СтрокаТаблицы.ЕдиницаИзмерения;
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрокаТовары.Номенклатура) Тогда
			
			НоваяСтрокаТовары.ЕдиницаИзмерения = СтрокаТаблицы.Номенклатура.ЕдиницаИзмерения;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
			НоваяСтрокаТовары.СтавкаНДС = СтрокаТаблицы.СтавкаНДС;
		Иначе
			НоваяСтрокаТовары.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТаблицы.Номенклатура.ВидСтавкиНДС);
		КонецЕсли;
		
		ТоварыДобавлены = Истина;
		
	КонецЦикла;
	
	Если ТоварыДобавлены Тогда
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(АдресЗагруженныхДанных) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных);
	Для каждого СтрокаТаблицы Из Объект.Запасы Цикл 
		
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТаблицы);
		
	КонецЦикла;
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзФайлаЗапасы(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
	
	НастройкиЗагрузкиДанных.Вставить("ПолноеИмяТабличнойЧасти", "СчетНаОплату.Запасы");
	НастройкиЗагрузкиДанных.Вставить("ИмяМакетаСШаблоном","ЗагрузкаИзФайлаЗапасы");
	НастройкиЗагрузкиДанных.Вставить("Заголовок", НСтр("ru = 'Загрузка запасов из файла'"));
	НастройкиЗагрузкиДанных.Вставить("СодержаниеВидимо", Истина);
	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда
		
		Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда
		
			ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
			ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
			
		ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда
			
			ДлительнаяОперация = ОбработатьПодготовленныеДанныеНоменклатуры(РезультатЗагрузки);
			
			СтруктураПараметров = Новый Структура;
			ПроверитьНеобходимостьПодключенияОбработчикаОжидания(ДлительнаяОперация, СтруктураПараметров);
			
		КонецЕсли;
		
	Иначе
		
		ЗагрузитьИзФайлаЗавершение(РезультатЗагрузки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанные(АдресРезультатаЗагрузки)
	
	Попытка
		
		НачатьТранзакцию();
		
		РезультатЗагрузки = ПолучитьИзВременногоХранилища(АдресРезультатаЗагрузки);
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = Объект.Запасы.Добавить();
				
				ИменаСвойств = "Номенклатура, Содержание, Количество, ЕдиницаИзмерения, СтавкаНДС";
				Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
					
					ИменаСвойств = ИменаСвойств + ", Характеристика";
					
				КонецЕсли;
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
					
					ИменаСвойств = ИменаСвойств + ", Партия";
					
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, ИменаСвойств);
				
				НоваяСтрока.Цена = СтрокаТаблицы.Цена;
				НоваяСтрока.Сумма = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
				
				Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
					
					Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
						
						НоваяСтрока.СтавкаНДС = ?(ЗначениеЗаполнено(НоваяСтрока.Номенклатура.ВидСтавкиНДС), Справочники.СтавкиНДС.СтавкаНДС(НоваяСтрока.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса())), Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса())));
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаТаблицы.СуммаНДС) Тогда
						
						НоваяСтрока.СуммаНДС = СтрокаТаблицы.СуммаНДС;
						
					Иначе
						
						СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
						
						НоваяСтрока.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
							НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((СтавкаНДС + 100) / 100),
							НоваяСтрока.Сумма * СтавкаНДС / 100);
						
					КонецЕсли;
					
				Иначе
					
					НоваяСтрока.СтавкаНДС = ?(Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС,
						УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС(),
						УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
					
					НоваяСтрока.СуммаНДС = 0;
					
				КонецЕсли;
				
				НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(Объект.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка данных'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы", Истина);
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПодготовленныеДанныеНоменклатуры(РезультатЗагрузки)
	
	ПараметрыВызоваСервера = Новый Структура;
	ПараметрыВызоваСервера.Вставить("НастройкиЗагрузкиДанных", РезультатЗагрузки.НастройкиЗагрузкиДанных);
	ПараметрыВызоваСервера.Вставить("ТаблицаСопоставленияДанных", ДанныеФормыВЗначение(РезультатЗагрузки.ТаблицаСопоставленияДанных, Тип("ТаблицаЗначений")));
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Подсистема ЗагрузкаДанныхИзВнешнегоИсточника: Выполнение серверного метода загрузки результата'");
	ПараметрыВыполнения.ЗапуститьНеВФоне    = Ложь;
	ПараметрыВыполнения.ЗапуститьВФоне      = Истина;	
	
	ИмяМетода = "Справочники.Номенклатура.ОбработатьПодготовленныеДанные";
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыВызоваСервера, ПараметрыВыполнения);
	
КонецФункции
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

//@skip-check module-unused-method
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ДекорацияСостояниеОригиналаНажатие(Элемент)
	УчетОригиналовПервичныхДокументовКлиент.ОткрытьМенюВыбораСостояния(ЭтотОбъект,Элементы.ДекорацияСостояниеОригинала);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	СброситьФлагСкидкиРассчитаныКлиент("ИзменениеВторостепенногоРеквизита", "Ответственный");	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПартияПриИзменении(Элемент)
	СброситьФлагСкидкиРассчитаныКлиент("ИзменениеВторостепенногоРеквизита", "Партия");	
КонецПроцедуры

//Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

#КонецОбласти
