#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(ФизическоеЛицо)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
Функция ОписаниеСоставаОбъекта() Экспорт
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаФизическоеЛицоВШапке();
КонецФункции

#Область ОбработчикиРегистрацииФизическихЛиц

Функция ПринадлежностиОбъекта() Экспорт
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация");
КонецФункции

#КонецОбласти

#Область ОбработчикиПравилРегистрации

Процедура ЗарегистрироватьИзмененияПослеОбработки(ИмяПланаОбмена, ПРО, Объект, Отказ, Получатели, Выгрузка) Экспорт
	
	Если Выгрузка Или Объект.ОбменДанными.Загрузка Или (Объект.ДополнительныеСвойства.Свойство("Выгрузка") И Объект.ДополнительныеСвойства.Выгрузка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) И ОбщегоНазначения.СсылкаСуществует(Объект.Сотрудник) Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(Получатели, Объект.Сотрудник);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьПравилаРегистрацииРегистров(ИмяПланаОбмена, Отказ, Получатели, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ОбменДанными

Процедура ЗарегистрироватьЗависимыеОбъектыПослеЗагрузкиОбменаДанными(МассивДокументов) Экспорт
	
	// Зарегистрируем сотрудников по виду документа, изменяющего принадлежность к организации
	Для Каждого ДокументОбъект Из МассивДокументов Цикл
		Если ЗначениеЗаполнено(ДокументОбъект.Сотрудник) И ОбщегоНазначения.СсылкаСуществует(ДокументОбъект.Сотрудник) Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(ДокументОбъект.ОбменДанными.Получатели, ДокументОбъект.Сотрудник);
		КонецЕсли;
		
		СинхронизацияДанныхЗарплатаКадры.ПринадлежностьФизлицаОрганизацииПриЗаписи(ДокументОбъект);
		СинхронизацияДанныхЗарплатаКадры.ОрганизацииСотрудниковПриЗаписи(ДокументОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.ПодключаемыеКоманды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
	КомандаСоздатьНаОсновании.Представление = НСтр("ru = 'Уведомление о заключении договора с иностранным гражданином'");
	КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
	КомандаСоздатьНаОсновании.Обработчик = "КадровыйУчетКлиент.ВвестиУведомлениеОЗаключенииДоговораСИностранцем";
	
	КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
	КомандаСоздатьНаОсновании.Представление = НСтр("ru = 'Ходатайство о привлечении иностранного высококвалифицированного специалиста'");
	КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
	КомандаСоздатьНаОсновании.Обработчик = "КадровыйУчетКлиент.ВвестиУведомлениеОХодатайствеПривлеченияИностранца";
	
	КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
	КомандаСоздатьНаОсновании.Представление = НСтр("ru = 'Уведомление о расторжении договора с иностранным гражданином'");
	КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
	КомандаСоздатьНаОсновании.Обработчик = "КадровыйУчетКлиент.ВвестиУведомлениеОРасторженииДоговораСИностранцем";
	
	КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
	КомандаСоздатьНаОсновании.Представление = НСтр("ru = 'Уведомлениие об исполнении обязательств перед иностранным гражданином'");
	КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
	КомандаСоздатьНаОсновании.Обработчик = "КадровыйУчетКлиент.ВвестиУведомлениеОбИсполненииОбязательствПередИностраннымСпециалистом";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Договор подряда
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.МенеджерПечати = "Документ.ДоговорРаботыУслуги";
	КомандаПечати.Идентификатор = "ПФ_MXL_ДоговорПодряда";
	КомандаПечати.Представление = НСтр("ru = 'Договор подряда'");
	КомандаПечати.Порядок = 10;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	// Акт приема-передачи выполненных работ (услуг).
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.МенеджерПечати = "Документ.ДоговорРаботыУслуги";
	КомандаПечати.Идентификатор = "ПФ_MXL_АктСдачиПриемкиВыполненныхРаботУслуг";
	КомандаПечати.Представление = НСтр("ru = 'Акт приема-передачи выполненных работ (услуг)'");
	КомандаПечати.Порядок = 20;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

// Формирует печатные формы
//
// Параметры:
//  (входные)
//    МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//    ПараметрыПечати - Структура - дополнительные настройки печати;
//  (выходные)
//   КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы.
//   ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                             представление - имя области в которой был выведен объект;
//   ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ДоговорПодряда") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"ПФ_MXL_ДоговорПодряда",
			НСтр("ru = 'Договор подряда'"),
			ПечатьДоговора(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.ДоговорРаботыУслуги.ПФ_MXL_ДоговорПодряда");
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_АктСдачиПриемкиВыполненныхРаботУслуг") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"ПФ_MXL_АктСдачиПриемкиВыполненныхРаботУслуг",
			НСтр("ru = 'Акт приема-передачи выполненных работ (услуг)'"),
			ПечатьАкта(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.ДоговорРаботыУслуги.ПФ_MXL_АктСдачиПриемкиВыполненныхРаботУслуг");
	КонецЕсли;
	
КонецПроцедуры
	
Функция ПечатьДоговора(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ДоговорРаботыУслуги_ДоговорПодряда";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ДоговорРаботыУслуги.ПФ_MXL_ДоговорПодряда");
	
	ДанныеПечатиОбъектов = ДанныеПечатиДокументов(МассивОбъектов);
	
	ПервыйДокумент = Истина;
	
	Для Каждого ДанныеПечати Из ДанныеПечатиОбъектов Цикл
		
		// Документы нужно выводить на разных страницах.
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		Иначе
			ПервыйДокумент = Ложь;
		КонецЕсли;		
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет.Параметры.Заполнить(ДанныеПечати.Значение);
		
		ТабличныйДокумент.Вывести(Макет);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Значение.Ссылка);
		
	КонецЦикла;	
						
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ДанныеПечатиДокументов(МассивОбъектов)
	
	ДанныеПечатиОбъектов = Новый Соответствие;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорРаботыУслуги.Ссылка,
	|	ДоговорРаботыУслуги.Номер,
	|	ДоговорРаботыУслуги.НомерПервичногоДокумента,
	|	ДоговорРаботыУслуги.Номер КАК НомерДокумента,
	|	ДоговорРаботыУслуги.Номер КАК НомерДоговора,
	|	ДоговорРаботыУслуги.Дата,
	|	ДоговорРаботыУслуги.Дата КАК ДатаДокумента,
	|	ДоговорРаботыУслуги.Дата КАК ДатаДоговора,
	|	ДоговорРаботыУслуги.Организация,
	|	ДоговорРаботыУслуги.Организация.НаименованиеПолное КАК НазваниеОрганизации,
	|	ДоговорРаботыУслуги.Сотрудник,
	|	ДоговорРаботыУслуги.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ДоговорРаботыУслуги.СпособОплаты = ЗНАЧЕНИЕ(Перечисление.СпособыОплатыПоДоговоруГПХ.ПоАктамВыполненныхРабот)
	|				ИЛИ ДоговорРаботыУслуги.СпособОплаты = ЗНАЧЕНИЕ(Перечисление.СпособыОплатыПоДоговоруГПХ.ВКонцеСрокаСАвансовымиПлатежами)
	|			ТОГДА &ОплатаПоАктам
	|		ИНАЧЕ &ОплатаПоДоговору
	|	КОНЕЦ КАК ЧастотаВыплат,
	|	ДоговорРаботыУслуги.ДатаНачала,
	|	ДоговорРаботыУслуги.ДатаОкончания,
	|	ДоговорРаботыУслуги.Сумма КАК СуммаЗаРаботу,
	|	ДоговорРаботыУслуги.Руководитель КАК Руководитель,
	|	ДоговорРаботыУслуги.ДолжностьРуководителя КАК ДолжностьРуководителя
	|ИЗ
	|	Документ.ДоговорРаботыУслуги КАК ДоговорРаботыУслуги
	|ГДЕ
	|	ДоговорРаботыУслуги.Ссылка В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ОплатаПоАктам", НСтр("ru = 'ежемесячно'"));
	Запрос.УстановитьПараметр("ОплатаПоДоговору", НСтр("ru = 'однократно в конце срока'"));
	РезультатыЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ДокументДляПечати Из РезультатыЗапроса Цикл
		
		ДанныеПечати = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ДокументДляПечати);
		ДанныеПечати.Вставить("ФИОРуководителяСклоняемое", "");
		ДанныеПечати.Дата = Формат(ДанныеПечати.Дата, "ДЛФ=D");
		ДанныеПечати.ДатаНачала = Формат(ДанныеПечати.ДатаНачала, "ДЛФ=DD");
		ДанныеПечати.ДатаОкончания = Формат(ДанныеПечати.ДатаОкончания, "ДЛФ=DD");
		
		// Подготовка номера документа.
		ДанныеПечати.Номер = ЗарплатаКадрыОтчеты.НомерНаПечать(ДанныеПечати.Номер, ДанныеПечати.НомерПервичногоДокумента);

		Если ЗначениеЗаполнено(ДанныеПечати.Руководитель) Тогда
				
			ДанныеФизическогоЛица = КадровыйУчет.КадровыеДанныеФизическихЛиц(
				Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеПечати.Руководитель), 
				"Пол,Фамилия,Имя,Отчество", ДанныеПечати.Дата);
				
			Если ДанныеФизическогоЛица[0].Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
				ДанныеПечати.Вставить("Действующего", НСтр("ru = 'действующего'"));
			Иначе
				ДанныеПечати.Вставить("Действующего", НСтр("ru = 'действующей'"));
			КонецЕсли;
			
			Если ДанныеФизическогоЛица.Количество() > 0 Тогда
				
				ДанныеРуководителя = ДанныеФизическогоЛица[0];
				ФИОРуководителя = Новый Структура("Фамилия,Имя,Отчество");
				ЗаполнитьЗначенияСвойств(ФИОРуководителя, ДанныеРуководителя);
				
				ФизическиеЛицаЗарплатаКадры.Просклонять(Строка(ФИОРуководителя.Фамилия),
					2, ФИОРуководителя.Фамилия, ДанныеРуководителя.Пол);
					
				ДанныеПечати.ФИОРуководителяСклоняемое = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФамилияИнициалы(ФИОРуководителя);
				
			КонецЕсли;
				
		КонецЕсли;
		
		ДанныеПечати.ДолжностьРуководителя = СклонениеПредставленийОбъектов.ПросклонятьПредставление(Строка(ДанныеПечати.ДолжностьРуководителя), 2);
		
		// Юридический адрес организации.
		ДанныеПечати.Вставить("АдресОрганизации", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			ДанныеПечати.Организация,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,
			ДокументДляПечати.Дата));
		
		// Данные физического лица
		ДанныеФизическогоЛица = КадровыйУчет.КадровыеДанныеФизическихЛиц(
			Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументДляПечати.ФизическоеЛицо), 
			"ФИОПолные, ФамилияИО, АдресПоПрописке, ДокументВид, ДокументСерия, ДокументНомер", ДокументДляПечати.Дата);
			
		Если ДанныеФизическогоЛица.Количество() > 0 Тогда
			
			АдресПоПрописке = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(
				ДанныеФизическогоЛица[0].АдресПоПрописке,
				Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица);
			
			ДанныеПечати.Вставить("РаботникНаименование", ДанныеФизическогоЛица[0].ФамилияИО);
			ДанныеПечати.Вставить("АдресСотрудника", АдресПоПрописке);
			ДанныеПечати.Вставить("ДокументВид", ДанныеФизическогоЛица[0].ДокументВид);
			ДанныеПечати.Вставить("ДокументСерия", ДанныеФизическогоЛица[0].ДокументСерия);
			ДанныеПечати.Вставить("ДокументНомер", ДанныеФизическогоЛица[0].ДокументНомер);
			
		КонецЕсли;
		
		// Сумма договора и валюта
		ВалютаУчета = ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты();
		ДанныеПечати.Вставить("ВалютаДокумента", ВалютаУчета.НаименованиеПолное);
		
		// Заполнение соответствия
		ДанныеПечатиОбъектов.Вставить(ДокументДляПечати.Ссылка, ДанныеПечати);

	КонецЦикла;
	
	Возврат ДанныеПечатиОбъектов;
	
КонецФункции

Функция ДанныеДляРегистрацииВУчетаСтажаПФР(МассивСсылок) Экспорт
	ДанныеДляРегистрацииВУчете = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорРаботыУслуги.Сотрудник КАК Сотрудник,
	|	ДоговорРаботыУслуги.ДатаНачала КАК ДатаНачала,
	|	ДоговорРаботыУслуги.ДатаНачала КАК ДатаНачалаПФР,
	|	ДоговорРаботыУслуги.ДатаОкончания КАК ДатаОкончания,
	|	ДоговорРаботыУслуги.Ссылка КАК Ссылка,
	|	ДоговорРаботыУслуги.Организация КАК Организация,
	|	ДоговорРаботыУслуги.Подразделение КАК Подразделение
	|ИЗ
	|	Документ.ДоговорРаботыУслуги КАК ДоговорРаботыУслуги
	|ГДЕ
	|	ДоговорРаботыУслуги.Ссылка В(&МассивСсылок)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДанныеДляРегистрацииВУчетеПоДокументу = УчетСтажаПФР.ДанныеДляРегистрацииДоговоровГПХВУчетеСтажаПФР();
		ДанныеДляРегистрацииВУчете.Вставить(Выборка.Ссылка, ДанныеДляРегистрацииВУчетеПоДокументу); 
		
		ОписаниеПериода = УчетСтажаПФР.ОписаниеРегистрируемогоПериода();
		ОписаниеПериода.Сотрудник = Выборка.Сотрудник;	
		ОписаниеПериода.ДатаНачалаПериода = Макс(Выборка.ДатаНачала, Выборка.ДатаНачалаПФР);
		ОписаниеПериода.ДатаОкончанияПериода = Выборка.ДатаОкончания;
		ОписаниеПериода.Состояние = Перечисления.СостоянияСотрудника.Работа;

		РегистрируемыйПериод = УчетСтажаПФР.ДобавитьЗаписьВДанныеДляРегистрацииВУчета(ДанныеДляРегистрацииВУчетеПоДокументу, ОписаниеПериода);
		
		УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "ВидСтажаПФР", Перечисления.ВидыСтажаПФР2014.ВключаетсяВСтажДляДосрочногоНазначенияПенсии);
		УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "Организация", Выборка.Организация);
		УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "Подразделение", Выборка.Подразделение);
	КонецЦикла;	
		
	Возврат ДанныеДляРегистрацииВУчете;
															
КонецФункции	

Функция ПечатьАкта(МассивОбъектов, ОбъектыПечати)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктСдачиПриемкиВыполненныхРаботУслуг";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ДоговорРаботыУслуги.ПФ_MXL_АктСдачиПриемкиВыполненныхРаботУслуг");
	ОбластьМакета = Макет.ПолучитьОбласть("Акт");
	
	// получаем данные для печати
	ДанныеДляПечатиАктаСдачиПриемаВыполненныхРаботУслуг = ДанныеДляПечатиАктаСдачиПриемаВыполненныхРаботУслуг(МассивОбъектов);
	Если ДанныеДляПечатиАктаСдачиПриемаВыполненныхРаботУслуг = Неопределено Тогда
		Возврат ТабличныйДокумент;
	КонецЕсли;
	ДанныеДляПечати = ДанныеДляПечатиАктаСдачиПриемаВыполненныхРаботУслуг.Выбрать();
	
	ПервыйДокумент = Истина;
	Пока ДанныеДляПечати.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			// Все документы нужно выводить на разных страницах.
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
		ОбластьМакета.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеДляПечати.НомерДокумента, Истина, Истина);
		ОбластьМакета.Параметры.НомерДоговора = ЗарплатаКадрыОтчеты.НомерНаПечать(ДанныеДляПечати.НомерДоговора, ДанныеДляПечати.НомерПервичногоДокумента);
		ОбластьМакета.Параметры.ДатаДокумента = Формат(ДанныеДляПечати.ДатаДокумента, "ДЛФ=DD");
		ОбластьМакета.Параметры.ДатаДоговора = Формат(ДанныеДляПечати.ДатаДоговора, "ДЛФ=DD");
		ОбластьМакета.Параметры.СуммаЗаРаботу = Формат(ДанныеДляПечати.СуммаЗаРаботу, "ЧЦ=15; ЧДЦ=2");
		ОбластьМакета.Параметры.ДатаОкончания = Формат(ДанныеДляПечати.ДатаОкончания, "ДЛФ=DD");
		
		Если ДанныеДляПечати.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
			ОбластьМакета.Параметры.ИменуемыйИменуемая = НСтр("ru='именуемая'");
		Иначе
			ОбластьМакета.Параметры.ИменуемыйИменуемая = НСтр("ru='именуемый'");
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДляПечати.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;	

КонецФункции

Функция ДанныеДляПечатиАктаСдачиПриемаВыполненныхРаботУслуг(МассивОбъектов)
	
	Если МассивОбъектов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорРаботыУслуги.Ссылка КАК Ссылка,
	|	ДоговорРаботыУслуги.Организация КАК Организация,
	|	ДоговорРаботыУслуги.Дата КАК Дата,
	|	ДоговорРаботыУслуги.Дата КАК ДатаДокумента,
	|	ДоговорРаботыУслуги.Номер КАК НомерДокумента,
	|	ДоговорРаботыУслуги.НомерПервичногоДокумента КАК НомерПервичногоДокумента,
	|	ДоговорРаботыУслуги.Сотрудник КАК Сотрудник,
	|	ДоговорРаботыУслуги.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДоговорРаботыУслуги.ДатаНачала КАК Период,
	|	ДоговорРаботыУслуги.Номер КАК НомерДоговора,
	|	ДоговорРаботыУслуги.Дата КАК ДатаДоговора,
	|	ДоговорРаботыУслуги.Руководитель КАК Руководитель,
	|	ДоговорРаботыУслуги.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ДоговорРаботыУслуги.ДатаОкончания КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА Организации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА Организации.Наименование
	|		ИНАЧЕ Организации.НаименованиеПолное
	|	КОНЕЦ КАК НазваниеОрганизации,
	|	ДоговорРаботыУслуги.Сумма КАК СуммаЗаРаботу
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	#ТаблицаДоговоров КАК ДоговорРаботыУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ДоговорРаботыУслуги.Организация = Организации.Ссылка
	|ГДЕ
	|	ДоговорРаботыУслуги.Ссылка В(&МассивОбъектов)";
	
	МетаданныеДокумента = МассивОбъектов[0].Метаданные();
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаДоговоров", "Документ." + МетаданныеДокумента.Имя);
	Запрос.Выполнить();
	
	ИменаПолей = Новый Массив;
	ИменаПолей.Добавить("Руководитель");
	ИменаПолей.Добавить("ФизическоеЛицо");
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ИменаПолей, "ВТДанныеДокумента");
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТДанныеДокумента");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ДокументПредставление,Пол");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ДатаДокумента КАК ДатаДокумента,
	|	ДанныеДокумента.НомерДокумента КАК НомерДокумента,
	|	ДанныеДокумента.НомерПервичногоДокумента КАК НомерПервичногоДокумента,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.НазваниеОрганизации КАК НазваниеОрганизации,
	|	ДанныеДокумента.Сотрудник КАК Сотрудник,
	|	ФИОСотрудника.РасшифровкаПодписи КАК СотрудникРасшифровкаПодписи,
	|	ДанныеДокумента.Период КАК ДатаНачала,
	|	ДанныеДокумента.ДатаОкончания КАК ДатаОкончания,
	|	ДанныеДокумента.СуммаЗаРаботу КАК СуммаЗаРаботу,
	|	ДанныеДокумента.НомерДоговора КАК НомерДоговора,
	|	ДанныеДокумента.ДатаДоговора КАК ДатаДоговора,
	|	КадровыеДанныеСотрудников.ДокументПредставление КАК ДокументПредставление,
	|	КадровыеДанныеСотрудников.Пол КАК Пол,
	|	ДанныеДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеДокумента.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ДанныеДокумента.Руководитель КАК Руководитель,
	|	ФИОРуководителя.РасшифровкаПодписи КАК РуководительРасшифровкаПодписи
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОСотрудника
	|		ПО ДанныеДокумента.Дата = ФИОСотрудника.Дата
	|			И ДанныеДокумента.Ссылка = ФИОСотрудника.Ссылка
	|			И ДанныеДокумента.ФизическоеЛицо = ФИОСотрудника.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
	|		ПО ДанныеДокумента.Дата = ФИОРуководителя.Дата
	|			И ДанныеДокумента.Ссылка = ФИОРуководителя.Ссылка
	|			И ДанныеДокумента.Руководитель = ФИОРуководителя.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО ДанныеДокумента.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|			И ДанныеДокумента.Период = КадровыеДанныеСотрудников.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.Ссылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

#КонецОбласти

Функция ДанныеДляПроведенияМероприятияТрудовойДеятельности(СсылкаНаДокумент) Экспорт
	
	ДанныеДляПроведения = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	Запрос.УстановитьПараметр("ДатаНачалаПриемаЕФС1", ЗарплатаКадрыПовтИсп.ДатаВступленияВСилуНА("ДатаНачалаПриемаЕФС1"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.Сотрудник КАК Сотрудник,
		|	ТаблицаДокумента.ДатаНачала КАК ДатаМероприятия,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыМероприятийТрудовойДеятельности.НачалоДоговораГПХ) КАК ВидМероприятия,
		|	ЗНАЧЕНИЕ(Справочник.ТрудовыеФункции.ДГПХ) КАК ТрудоваяФункция,
		|	ТаблицаДокумента.НаименованиеДокумента КАК НаименованиеДокументаОснования,
		|	ТаблицаДокумента.Дата КАК ДатаДокументаОснования,
		|	ТаблицаДокумента.Номер КАК НомерДокументаОснования,
		|	ТаблицаДокумента.Подразделение КАК ПодразделениеТерриториальныхУсловийПФР,
		|	ТаблицаДокумента.КодПоОКЗ КАК КодПоОКЗ,
		|	ТаблицаДокумента.Номер КАК Номер,
		|	ТаблицаДокумента.НомерПервичногоДокумента КАК НомерПервичногоДокумента
		|ИЗ
		|	Документ.ДоговорРаботыУслуги КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&Ссылка)
		|	И ТаблицаДокумента.ОтразитьТрудовуюДеятельность
		|	И ТаблицаДокумента.ДатаНачала >= &ДатаНачалаПриемаЕФС1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка,
		|	ТаблицаДокумента.ФизическоеЛицо,
		|	ТаблицаДокумента.Организация,
		|	ТаблицаДокумента.Сотрудник,
		|	ТаблицаДокумента.ДатаОкончания,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыМероприятийТрудовойДеятельности.ОкончаниеДоговораГПХ),
		|	ЗНАЧЕНИЕ(Справочник.ТрудовыеФункции.ДГПХ),
		|	ТаблицаДокумента.НаименованиеДокумента,
		|	ТаблицаДокумента.ДатаОкончания,
		|	ТаблицаДокумента.Номер,
		|	ТаблицаДокумента.Подразделение,
		|	ТаблицаДокумента.КодПоОКЗ,
		|	ТаблицаДокумента.Номер,
		|	ТаблицаДокумента.НомерПервичногоДокумента
		|ИЗ
		|	Документ.ДоговорРаботыУслуги КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&Ссылка)
		|	И ТаблицаДокумента.ОтразитьТрудовуюДеятельность
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	ДатаМероприятия";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		ДвиженияДокумента = Новый Массив;
		ДанныеДляПроведения.Вставить(Выборка.Ссылка, ДвиженияДокумента);
		
		Пока Выборка.Следующий() Цикл
			ДанныеМероприятия = ЭлектронныеТрудовыеКнижки.ЗаписьДвиженияМероприятияТрудовойДеятельности(Выборка);
			ДанныеМероприятия.ТерриториальныеУсловия = ЭлектронныеТрудовыеКнижкиПовтИсп.ТерриториальныеУсловияПФР(
				Выборка.ДатаМероприятия, Выборка.Организация, Выборка.ПодразделениеТерриториальныхУсловийПФР);
			ДвиженияДокумента.Добавить(ДанныеМероприятия);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

#КонецОбласти

#КонецЕсли
