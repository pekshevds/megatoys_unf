
#Область ОписаниеПеременных

#Область ПеременныеФормы

&НаКлиенте
Перем ДанныеВыбораСостояния;

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ОбновитьПараметрыФормы();
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Элементы.ВариантЗавершенияРасширеннаяПодсказка.Заголовок = СтрШаблон(НСтр("ru='Предыдущее состояние: %1'"),
		СостоянияЗаказов.ПолучитьСостояниеЗаказаПередЗавершением(
			ТекущийОбъект.Ссылка,
			Справочники.СостоянияЗаказовПокупателей.Завершен));
	
	// ВариантыКП
	ЗаполнитьВариантыКП();
	ОпределитьИспользованиеРазделителейВТаблице();
	// Конец ВариантыКП
	
	// Доставка
	ИспользоватьСервис1СДоставка = ПолучитьФункциональнуюОпцию("ИспользоватьСервис1СДоставка");
	ИспользоватьСервис1СКурьер = ПолучитьФункциональнуюОпцию("ИспользоватьСервис1СКурьер");
	ИспользоватьСервисЯндексДоставка = ЯндексДоставка.Подключена();
	
	СтоимостьДоставкиСНДС = Объект.СтоимостьДоставки + ?(Объект.СуммаВключаетНДС, 0, Объект.СуммаНДСДоставки);
	РазрешеноРедактированиеСтоимостиДоставки = РазрешеноРедактированиеСтоимостиДоставки();
	Если ЗначениеЗаполнено(Объект.СлужбаДоставки) Тогда
		ОбновитьПараметрыСлужбыДоставки();
	КонецЕсли; 
	ПрочитатьВесИОбъемЕдиницыТовара();
	ПрочитатьДанныеПоЗаказуНаДоставкуСервер();
	НастроитьЭлементыПодсистемыДоставка();
	
	ДанныеКонтрагентаПрочитаны = Ложь;
	// Конец Доставка
		
	ОбновитьИтогиСервер();
	
	ДействияПослеЧтенияОбъекта();
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокОплаты(Объект.СпособЗачетаПредоплаты, Объект.Предоплата);
	
	Если РежимОстаткиИРезервы Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			Если НЕ СтрокаТабличнойЧасти.ТипНоменклатурыЗапас 
				Или ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв) Тогда
				Продолжить;
			КонецЕсли; 
			СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
		КонецЦикла;
		
		НоменклатураВДокументахСервер.ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧасти(Объект,,ТекущийВариантКП,,РезервированиеЗапасов);
		
	КонецЕсли;
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
	// ЭДО
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.КомандыЭДО_ПриЧтенииФормыДокумента(ЭтотОбъект);
	// Конец ЭДО
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиУНФ.ЗаполнитьДополнительныеПараметры(Объект,
		"ДополнительныеРеквизиты", , "КомандыОбычные");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СборкаЗаказов
	ФОСборкаЗаказов = ПолучитьФункциональнуюОпцию("ИспользоватьСборкуЗаказов");
	ЦветСборкиЗаказа = ЦветаСтиля.ФонУправляющегоПоля;
	// Конец СборкаЗаказов
	
	Если ТипЗнч(КэшЗначений) <> Тип("Структура") Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	
	КэшЗначений.Вставить("ИспользоватьМинимальныеЦены", ЦенообразованиеСерверПовтИсп.МинимальныеЦеныИспользуются());
	КэшЗначений.Вставить("РезервированиеЗапасов", ПолучитьФункциональнуюОпцию("РезервированиеЗапасов"));
	КэшЗначений.Вставить("ПередачаТоваровМеждуОрганизациями", 
		ПолучитьФункциональнуюОпцию("ПередачаТоваровМеждуОрганизациями"));
	
	НаборСвойств_Документ_ЗаказПокупателя = УправлениеСвойствами.НаборСвойствПоИмени("Документ_ЗаказПокупателя");
	КэшЗначений.Вставить("НаборСвойств_Документ_ЗаказПокупателя", НаборСвойств_Документ_ЗаказПокупателя);
	
	// Отмена товаров, услуг
	ЗаполнитьДанныеПоОтменеТоваров();
	НастроитьЭлементыОтменыТоваров();
	ИспользоватьПроцессыСостояний = ПолучитьФункциональнуюОпцию("ИспользоватьПроцессыСостояний");
	// Конец Отмена товаров, услуг
	
	АвтоматическиеСкидкиПриСозданииНаСервере();
	ОбновитьВидимостьПодарков();
	ОбновитьВидимостьБонусовКНачислению();
	ОбновитьСостояниеПромокода();	
	РучныеСкидкиПриСозданииНаСервере();
	НаборыПриСозданииНаСервере();
	
	Если Объект.Ссылка.Пустая() Тогда
		ОбновитьПараметрыФормы();
	КонецЕсли; 
	УстановитьУсловноеОформлениеФормы();
	
	РазрешеноРедактированиеДокумента = ПравоДоступа("Редактирование", Метаданные.Документы.ЗаказПокупателя);
	
	// Запомним предопределённые значения
	ВариантЗаполненияРасшифровкиПросмотр = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияРасшифровкиПлатежа.Просмотр");
	ВариантЗаполненияРасшифровкиВручную = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияРасшифровкиПлатежа.Вручную");
	
	СпособыЗачетаВручную = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Вручную");
	СпособыЗачетаАвто = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто");
	
	ВидОперацииЗаказНаПродажу = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу;
	
	ДатаДокумента = Объект.Дата;
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	Контрагент = Объект.Контрагент;
	Договор = Объект.Договор;
	ВалютаРасчетов = Справочники.ДоговорыКонтрагентов.ВалютаРасчетов(Договор);
	ИмяТабличнойЧасти = "Запасы";
	
	ПрочитатьРеквизитыКонтрагента(РеквизитыКонтрагента, Объект.Контрагент);
	
	ПереработкаДавальческогоСырья = ПолучитьФункциональнуюОпцию("ПереработкаДавальческогоСырья");
	Элементы.ВидОперации.ТолькоПросмотр = Не ПереработкаДавальческогоСырья;
	Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу);
	Если ПереработкаДавальческогоСырья Тогда
		Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		И Не ЗначениеЗаполнено(Параметры.Основание) 
		И Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования)
		И Не ЗаполнениеОбъектовУНФ.ЭтоЗаполнениеПоШаблону(Параметры.ЗначенияЗаполнения) Тогда
		
		ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС(Истина);
		Объект.СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Объект.Организация,,Объект.Дата);
		НалогиУНФ.ЗаполнитьНДСВключенВСтоимостьВДокументе(Объект);
	ИначеЕсли Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		Элементы.ПлатежныйКалендарьСуммаНДСОплаты.Видимость = Истина;
		Элементы.СписокПлатежныйКалендарьСуммаНДСОплаты.Видимость = Истина;
		// Доставка
		Элементы.СтавкаНДСДоставки.Видимость = Истина;
		Элементы.СуммаНДСДоставки.Видимость = Истина;
		
	Иначе
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		Элементы.ПлатежныйКалендарьСуммаНДСОплаты.Видимость = Ложь;
		Элементы.СписокПлатежныйКалендарьСуммаНДСОплаты.Видимость = Ложь;
		// Доставка
		Элементы.СтавкаНДСДоставки.Видимость = Ложь;
		Элементы.СуммаНДСДоставки.Видимость = Ложь;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СпециальныйНалоговыйРежим) Тогда
		Объект.СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Объект.Организация,,Объект.Дата);
	КонецЕсли;
	
	Элементы.РедактироватьСписком.Пометка = Объект.ПлатежныйКалендарь.Количество() > 1;
	Элементы.СтраницаПлатежныйКалендарь.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
	
	Если Элементы.ВидОперации.СписокВыбора.Количество() = 1 Тогда
		Элементы.ВидОперации.Видимость = Ложь;
	КонецЕсли;
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	ОбновитьКартинкуДисконтнойКарты();
	
	// Сформируем надпись основания.
	Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Объект.ДокументОснование);
	// Сформируем надпись маршрутного листа.
	МаршрутныеЛистыСТекущимЗаказом = ДоставкаСервер.ПолучитьМаршрутныеЛистыСЗаказом(Объект.Ссылка);
	Для Каждого МаршрутныйЛист Из МаршрутныеЛистыСТекущимЗаказом Цикл
		МаршрутныйЛистСписок.Добавить(МаршрутныйЛист.Ссылка, МаршрутныйЛист.Представление);
	КонецЦикла;
	Элементы.МаршрутныйЛистНадпись.Заголовок = ДоставкаСервер.СформироватьНадписьМаршрутныйЛистМассив(МаршрутныеЛистыСТекущимЗаказом);
	
	// Если документ открыт из подбора, заполнить табличную часть товары
	Если Параметры.ЗначенияЗаполнения.Свойство("АдресЗапасовВХранилище") 
		И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.АдресЗапасовВХранилище) Тогда
		
		ПолучитьЗапасыИзХранилища(Параметры.ЗначенияЗаполнения.АдресЗапасовВХранилище, 
							Параметры.ЗначенияЗаполнения.ИмяТабличнойЧасти,
							Параметры.ЗначенияЗаполнения.ЕстьХарактеристики,
							Параметры.ЗначенияЗаполнения.ЕстьПартии);
		
	КонецЕсли;
	
	РазрешеноРедактированиеЦенДокументов = УправлениеДоступомУНФ.РазрешеноРедактированиеЦенДокументов();
	ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати = Константы.ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати.Получить();
	
	Элементы.ЗапасыЦена.ТолькоПросмотр					= НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыПроцентСкидкиНаценки.ТолькоПросмотр	= НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСуммаСкидкиНаценки.ТолькоПросмотр	= НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСумма.ТолькоПросмотр					= НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСуммаНДС.ТолькоПросмотр				= НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.Скидки.ТолькоПросмотр						= НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ВидЗаказа.ОграничениеТипа					= Новый ОписаниеТипов("СправочникСсылка.ВидыЗаказовПокупателей");
	Элементы.СостояниеЗаказа.ОграничениеТипа			= Новый ОписаниеТипов("СправочникСсылка.СостоянияЗаказовПокупателей");
	Если Не ИспользоватьВидыЗаказовПокупателей Тогда
		Элементы.ВидЗаказа.Видимость					= Ложь;
		Элементы.СостояниеЗаказа.ПоложениеЗаголовка		= ПоложениеЗаголовкаЭлементаФормы.Авто;
		Элементы.СостояниеЗаказа.АвтоМаксимальнаяШирина	= Истина;
		Элементы.СостояниеЗаказа.МаксимальнаяШирина		= 0;
		Элементы.СостояниеЗаказа.КнопкаСоздания			= Неопределено;
	КонецЕсли;
	
	// Наборы
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Параметры.ЗначенияЗаполнения.Свойство("Запасы") Тогда
			Для каждого ДанныеСтроки Из Параметры.ЗначенияЗаполнения.Запасы Цикл
				Если ДанныеСтроки.Свойство("ЭтоНабор") И ДанныеСтроки.ЭтоНабор Тогда
					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
					Если ДанныеСтроки.Свойство("Характеристика") И ЗначениеЗаполнено(ДанныеСтроки.Характеристика) Тогда
						СтруктураОтбора.Вставить("Характеристика", ДанныеСтроки.Характеристика);
					КонецЕсли;
					Строки = Объект.Запасы.НайтиСтроки(СтруктураОтбора);
					Для каждого СтрокаНабора Из Строки Цикл
						СтруктураДанные = Новый Структура;
						СтруктураДанные.Вставить("Организация", Объект.Организация);
						СтруктураДанные.Вставить("Номенклатура", СтрокаНабора.Номенклатура);
						Если ЗначениеЗаполнено(СтрокаНабора.Характеристика) Тогда
							СтруктураДанные.Вставить("Характеристика", СтрокаНабора.Характеристика);
						КонецЕсли;
						СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
						СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
						Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
							СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
							СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
							СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
							СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
							СтруктураДанные.Вставить("Коэффициент", 1);
							СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
						КонецЕсли;
						// ДисконтныеКарты
						СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
						СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
						// Конец ДисконтныеКарты
						
						РезервированиеЗапасов = ?(КэшЗначений.Свойство("РезервированиеЗапасов"), КэшЗначений.РезервированиеЗапасов, Ложь);
						ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, СтрокаНабора, СтруктураДанные, , НЕ РезервированиеЗапасов);

						СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
						Если НЕ СтруктураДанные.ИспользоватьХарактеристики Тогда
							ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, СтрокаНабора, СтруктураДанные);
						КонецЕсли; 
					КонецЦикла; 
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли;
	// Конец Наборы
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ДействияПослеЧтенияОбъекта();
		ЗаполнитьВариантыКП();
	КонецЕсли; 
	
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Запасы");
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "МатериалыЗаказчика");
	
	РаботаСФормойДокумента.НастроитьГруппуЦеныИВалюты(ЭтотОбъект);
		
	// СписокАвтоПодбораКонтрагента
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЭлектроннаяПочтаУНФ.ЗаполнитьСписокАвтоПодбораКонтрагентаИзСобытия(СписокАвтоПодбораКонтрагента, Параметры.Основание);
	КонецЕсли;
	// Конец СписокАвтоПодбораКонтрагента
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// ГрупповоеИзменениеСтрок
	ЗаполнитьСписокДействий(РазрешеноРедактированиеЦенДокументов);
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрок(ЭтотОбъект, "Запасы"), ЗапасыИзменениеСтрокДействие);
	ЗапасыИзменениеСтрокДействиеПриОткрытии = ЗапасыИзменениеСтрокДействие;
	УстановитьПометку(Истина, "Запасы");
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрок(ЭтотОбъект, "МатериалыЗаказчика"), МатериалыЗаказчикаИзменениеСтрокДействие);
	МатериалыЗаказчикаИзменениеСтрокДействиеПриОткрытии = МатериалыЗаказчикаИзменениеСтрокДействие;
	УстановитьПометку(Истина, "МатериалыЗаказчика");
	// Конец ГрупповоеИзменениеСтрок
	
	// Ручные скидки
	СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект,, ПараметрыОтбораСтрок(ТекущийВариантКП));
	// Конец Ручные скидки
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	// Доставка
	Если Объект.Ссылка.Пустая() Тогда
		// Доставка
		ИспользоватьСервис1СДоставка = ПолучитьФункциональнуюОпцию("ИспользоватьСервис1СДоставка");
		ИспользоватьСервис1СКурьер = ПолучитьФункциональнуюОпцию("ИспользоватьСервис1СКурьер");
		ИспользоватьСервисЯндексДоставка = ЯндексДоставка.Подключена();
			
		СтоимостьДоставкиСНДС = Объект.СтоимостьДоставки + ?(Объект.СуммаВключаетНДС, 0, Объект.СуммаНДСДоставки);
		РазрешеноРедактированиеСтоимостиДоставки = РазрешеноРедактированиеСтоимостиДоставки();
		Если ЗначениеЗаполнено(Объект.СлужбаДоставки) Тогда
			ОбновитьПараметрыСлужбыДоставки();
		КонецЕсли; 
		НастроитьЭлементыПодсистемыДоставка();
		ПрочитатьВесИОбъемЕдиницыТовара();
	КонецЕсли; 
	// Конец Доставка
	
	ЗаполнитьСлужебныеПоляТабличнойЧасти();
	ОбновитьИтогиСервер();
	
	Если Параметры.Свойство("Страница")
		И НЕ ПустаяСтрока(Параметры.Страница)
		И НЕ Элементы.Найти(Параметры.Страница) = Неопределено Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы[Параметры.Страница];
	КонецЕсли;
	
	// ОбменССайтом
	ИспользоватьОбменССайтами = ПолучитьФункциональнуюОпцию("ИспользоватьОбменССайтами") 
		И ОбменССайтомПовтИсп.ЭтоЗаказССайта(Объект.Ссылка);
	
	ПрочитатьРеквизитыЗаказаНаСайте();
	// Конец ОбменССайтом
	
	// ЭДО
	УстановитьВидЭД();
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.КомандыЭДО_ФормаДокумента(ЭтотОбъект);
	// Конец ЭДО
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.ЗаказПокупателя.ТабличныеЧасти.Запасы, НастройкиЗагрузкиДанных, ЭтотОбъект, Ложь);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	ПечатьДокументовУНФ.КорректировкаРазмещениеПодчиненнойГруппыКомандПечати(ЭтотОбъект, Элементы.ПодменюПечать,
		Элементы.ПодменюДоговорКонтрагента);
	Элементы.КомандыПечатиДоговорКонтрагента.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	ВидимостьПодменюКоммерческоеПредложение = (Пользователи.ЭтоПолноправныйПользователь()
		Или УправлениеДоступомУНФ.ДоступноСозданиеДокументовРазделаПродажи())
		И ОбщегоНазначенияУНФ.ЭтоУНФ();
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодменюКоммерческоеПредложение",
		"Видимость", ВидимостьПодменюКоммерческоеПредложение);
	ПечатьДокументовУНФ.КорректировкаРазмещениеПодчиненнойГруппыКомандПечати(ЭтотОбъект, Элементы.ПодменюПечать,
		Элементы.ПодменюКоммерческоеПредложение);
	Элементы.КомандыПечатиКоммерческоеПредложение.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	ПечатьДокументовУНФ.КорректировкаРазмещениеПодчиненнойГруппыКомандПечати(ЭтотОбъект, Элементы.ПодменюПечать,
		Элементы.ПодменюПечатьФаксимиле);
	Элементы.ПодменюПечатьФаксимиле.Вид = ВидГруппыФормы.Подменю;
	
	НапоминанияПользователяУНФ.УстановитьОтображениеКомандОрганайзера(Элементы);
	ЭлектроннаяПочтаУНФ.УстановитьОтображениеКомандОтправкиСообщений(Элементы);

	ЗаменитьКоманду("СводныйОтчет", "СводныйОтчет");
	ЗаменитьКоманду("Калькуляция", "Калькуляция");
	
	ШаблоныПечатиОфисныхДокументов.ОпределитьВидимостьКомандШаблоновПечати(Элементы.ФормаОткрытьШаблоныПечатиДоговоровКонтрагентов);
	ШаблоныПечатиОфисныхДокументов.ОпределитьВидимостьКомандШаблоновПечати(Элементы.ФормаОткрытьШаблоныПечатиКоммерческихПредложений);
	// Конец КомандыПечати
	
	АвтоподборКонтактов.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект, ОписаниеПолейДляАвтоподбора());
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	СписокЭлектронныхВесов = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("ЭлектронныеВесы", ,
		МенеджерОборудованияВызовСервера.РабочееМестоКлиента());
	Если СписокЭлектронныхВесов.Количество() = 0 Тогда
		// Нет подключенных весов.
		Элементы.ЗапасыПолучитьВес.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
	
	ОбязательноЗаполнятьИсточникВЗаказах = РегистрыСведений.ОбязательностьЗаполненияРеквизитов.ОбязательностьЗаполненияРеквизита(
		"ЗаказПокупателя", "ИсточникПривлечения");

	Пользователь = Пользователи.ТекущийПользователь();
	ПоказыватьКолонкуСодержаниеВЗаказеПокупателяЗапасы =
		УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,
			"ПоказыватьКолонкуСодержаниеВЗаказеПокупателяЗапасы");	

	ПоказыватьКолонкуВесВЗаказеПокупателя =
		УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,
			"ПоказыватьКолонкуВесВЗаказеПокупателя");	

	ПоказыватьКолонкуОбъемВЗаказеПокупателя =
		УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,
			"ПоказыватьКолонкуОбъемВЗаказеПокупателя");	

	УстановитьВидимостьИДоступностьМобильноеПриложение();
	УправлениеФормой();
	ОбновитьВидимостьКолонкиПараметровСпецификации(ЭтотОбъект);
	
	Если Параметры.Ключ.Пустая() Тогда
		НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект, Истина)
	КонецЕсли;
	
	// Взаиморасчеты
	ВзаиморасчетыПриСозданииНаСервере();
	// Конец Взаиморасчеты
	
		
	// МобильныйКлиент
	МобильныйКлиентУНФ.НастроитьФормуОбъектаМобильныйКлиент(Элементы);
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Элементы.Шапка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;
		Элементы.Переместить(Элементы.СтруктурнаяЕдиницаРезерв, Элементы.СтраницаЗапасы, Элементы.ЗапасыКоманднаяПанельКоманды);
	КонецЕсли;
	// Конец МобильныйКлиент
	
	Если Не РезервированиеЗапасов Тогда
		
		КомандаОстаткиИРезервы = Команды.Найти("ОстаткиИРезервы");
		КомандаОстаткиИРезервы.Подсказка = НСтр("ru = 'Показать остатки'");
		
		ЭлементЗапасыОстатокСвободно = Элементы.Найти("ЗапасыОстатокСвободно");
		ЭлементЗапасыОстатокСвободно.Подсказка = НСтр("ru = 'Доступно на складе для отгрузки'");
		ЭлементЗапасыОстатокСвободно.Заголовок = НСтр("ru = 'Доступно'");
		
	КонецЕсли;
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовУНФ.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
	Элементы.ЗапасыГруппаСерииНоменклатуры.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");

	НастройкиКоличества = ПолучитьНастройкиИзмененияКоличества();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиКоличества);
	
	СформироватьЗаголовокПодсказкиДатыОтгрузки();
	
	ГрузоотправительОнЖе = НЕ ЗначениеЗаполнено(Объект.Грузоотправитель);
	ГрузополучательОнЖе = НЕ ЗначениеЗаполнено(Объект.Грузополучатель);
	УстановитьОтображениеГрузоперевозки();
		
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию") Тогда
	
		Если Не Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
			Если РаботаСКомиссионерамиКомитентамиСервер.ВТабличнойЧастиЕстьКомиссионнаяПартияСНалогообложениемНДС(Объект) Тогда
				ТребуетсяИзменениеНалогообложениеНаСНДС = Истина;
				Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
				ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
				ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
				УчетВалютныхОпераций);
			КонецЕсли;
		ИначеЕсли РаботаСКомиссионерамиКомитентамиСервер.ВТабличнойЧастиЕстьКомиссионнаяПартияСНалогообложением(Объект) Тогда
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		КонецЕсли;
		
	КонецЕсли;
	
	//+mega
	СоздатьРеквизитыФормы();
	//-mega
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(СписокАвтоПодбораКонтрагента) Тогда
		ПодключитьОбработчикОжидания("ПоказатьВыборИзКлассификатораКонтактов", 0.1, Истина);
	КонецЕсли;
	
	// ГрупповоеИзменениеСтрок
	ОпределитьОбъектИзменений("Запасы");
	ОпределитьОбъектИзменений("МатериалыЗаказчика");
	// Конец ГрупповоеИзменениеСтрок
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ЭДО
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭДО
	
	// Доставка
	Если Объект.ВидимостьИндикатораТребуетсяРасчет Тогда
		ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	Иначе
		ОтключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки(ЭтотОбъект);
	КонецЕсли;
	// Конец Доставка
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьОтображениеКолонокВРазрезеЗапасов();
	
	// СборкаЗаказов
	Если ФОСборкаЗаказов Тогда
		СборкаЗаказовКлиент.СборкаЗаказовПриОткрытии(ЭтаФорма, ТекущийВариантКП);
	КонецЕсли;
	// Конец СборкаЗаказов
	
	Если ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
		РаботаСНоменклатуройКлиентУНФ.ВывестиОповещениеПользователяОбИзмененииРежимаНалогообложенияНаСДНС(ТребуетсяИзменениеНалогообложениеНаСНДС);
	КонецЕсли;
	ОбновитьКартинкуПромокода();
	
	УстановитьВидимостьЭлементовПоНастройкеПользователя(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Параметры.Ключ) Тогда
		Если Объект.ПоложениеДатыОтгрузки = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
			ПроверитьОповеститьОДатеОтгрузки(Объект.ДатаОтгрузки, Объект.Дата);		
		Иначе
			ПроверитьОповеститьОДатеОтгрузкиВТЧ();
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// АвтоматическиеСкидки
	СкидкиНаценкиКлиент.ПриЗакрытииФормы(Объект.Ссылка, ИспользоватьАвтоматическиеСкидки, СкидкиРассчитаныПередЗаписью);
	// Конец АвтоматическиеСкидки
	
	СтатистикаИспользованияФормКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы);
	
	Если НЕ ЗавершениеРаботы Тогда
		// ГрупповоеИзменениеСтрок
		СохранитьТекущееДействиеИзмененияСтрок();
		// Конец ГрупповоеИзменениеСтрок
	КонецЕсли;

	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Данные = МенеджерОборудованияУНФКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр);
			Если ТипШтрихкодаПоддерживается(Данные.Штрихкод) Тогда
				ПолученыШтрихкоды(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Данные));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// ДисконтныеКарты
	Если СчитанаДисконтнаяКарта Тогда
		СчитанаДисконтнаяКарта = Ложь;
	КонецЕсли;
	// Конец ДисконтныеКарты
	
	Если ИмяСобытия = "ОбновитьСписокЗаказовНаДоставку" Тогда
		ПрочитатьДанныеПоЗаказуНаДоставкуСервер();
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" Тогда
		
		Прочитать();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Контрагент" 
		И ЗначениеЗаполнено(Параметр)
		И Объект.Контрагент = Параметр Тогда
		
		ОбработатьЗаписьКонтрагентаНаСервере(Параметр);
		УправлениеФормой();
		
	ИначеЕсли ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
			
		АдресЗапасовВХранилище	= Параметр;
		ЕстьХарактеристики 		= Истина;
		
		ЕстьПартии			= Ложь;
		
		Если МаркерПодбора = "Запасы" Тогда
			
			ИмяТабличнойЧасти	= "Запасы";
			
			ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии);
			
			Если НЕ ПустаяСтрока(ТекстОшибкиЖурналаРегистрации) Тогда
				ЗаписатьОшибкуЧтенияДанныхИзХранилища();
			КонецЕсли;
			
			РассчитатьОбъемИВесЗаказа();
			ОбновитьИтогиКлиент();
			ПересчитатьПлатежныйКалендарь();
			ОчиститьКалькуляцию();
			ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
			
			РаботаСНоменклатуройКлиентУНФ.ВывестиОповещениеПользователяОбИзмененииРежимаНалогообложенияНаСДНС(ТребуетсяИзменениеНалогообложениеНаСНДС);
	
		ИначеЕсли МаркерПодбора = "Материалы" Тогда
			
			ИмяТабличнойЧасти	= "МатериалыЗаказчика";
			
			ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии);
			
		КонецЕсли;
		
		МаркерПодбора = "";
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ВидыЗаказовПокупателей"
		Или ИмяСобытия = "Запись_СостоянияЗаказовПокупателей" Тогда
		
		ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостояния_ЗаказПокупателя" И Параметр <> Неопределено Тогда
		
		ЗаказИзменен = Неопределено;
		
		Если ТипЗнч(Параметр) = Тип("Массив") Тогда
			ЗаказИзменен = Параметр.Найти(Объект.Ссылка);
		ИначеЕсли ТипЗнч(Параметр) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ЗаказИзменен = Параметр = Объект.Ссылка;
		КонецЕсли;
		
		Если ЗаказИзменен = Неопределено ИЛИ (ТипЗнч(ЗаказИзменен) = Тип("Булево") И ЗаказИзменен = Ложь) Тогда
			Возврат;
		КонецЕсли;
		
		Прочитать();
		УправлениеФормой();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПодборСерий"
		И ЗначениеЗаполнено(Параметр)
		И ТипЗнч(Параметр) = Тип("Структура") 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		ПараметрыИменаПолей = Новый Структура;
		
		ПараметрыИменаПолей.Вставить("ИмяТЧЗапасы", "Запасы");
		ПараметрыИменаПолей.Вставить("ИмяТЧСерииНоменклатуры", "СерииНоменклатуры");
		ПараметрыИменаПолей.Вставить("ИмяПоляКлючСвязи", "КлючСвязи");
		
		ИзменилосьКоличество = ПолучитьСерииНоменклатурыИзХранилища(Параметр.АдресВоВременномХранилище,
			Параметр.КлючСтроки, ПараметрыИменаПолей);
		Если ИзменилосьКоличество Тогда
			// Калькуляция
			ОчиститьКалькуляцию();
			// Конец Калькуляция
		КонецЕсли;
		
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Запасы");
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
	// ЭДО
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец ЭДО
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если (ИмяСобытия = "Запись_Склад" Или ИмяСобытия = "Запись_Организации")
		И АдресОтправленияИсточник = Параметр Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПоляАдресаОтправления(АдресОтправленияИсточник));
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ШаблоныПечатиОфисныхДокументов" И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство(
		"Назначение") Тогда
		ГруппаКомандПечати = Неопределено;
		Если Параметр.Назначение = ПредопределенноеЗначение(
			"Перечисление.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагента") Или Параметр.Назначение
			= ПредопределенноеЗначение(
			"Перечисление.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаЗаказ") Тогда
			ГруппаКомандПечати = Элементы.ПодменюДоговорКонтрагента;
		ИначеЕсли Параметр.Назначение = ПредопределенноеЗначение(
			"Перечисление.НазначенияШаблоновПечатиОфисныхДокументов.КоммерческоеПредложение") Тогда
			ГруппаКомандПечати = Элементы.ПодменюКоммерческоеПредложение;
		КонецЕсли;
		Если ГруппаКомандПечати <> Неопределено Тогда
			ШаблоныПечатиОфисныхДокументовКлиент.УстановитьПризнакПоявленияНовойКомандыПечати(ГруппаКомандПечати);
		КонецЕсли;
	КонецЕсли;
	
	АссистентУправленияКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	ОбновитьОтображениеКолонокВРазрезеЗапасов();
	
	Если ИмяСобытия = "ОбновлениеФормыЗаказПокупателя" И УникальныйИдентификатор = Источник Тогда
		
		СтруктураДанныеНоменклатуры = Новый Структура();
		
		СтруктураДанныеНоменклатуры.Вставить("Номенклатура",);
		СтруктураДанныеНоменклатуры.Вставить("Характеристика",);
		СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", );
		СтруктураДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", );
		
		СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
		СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
		СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанныеНоменклатуры.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанныеНоменклатуры.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
		
		// ДисконтныеКарты
		СтруктураДанныеНоменклатуры.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
		СтруктураДанныеНоменклатуры.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
		// Конец ДисконтныеКарты
		
		Для Каждого ТаблицаДанных Из Параметр Цикл
			
			Для Каждого СтрокаТаблицыДанных Из ТаблицаДанных.Значение Цикл
				СтрокаТабличнойЧасти = Объект[ТаблицаДанных.Ключ].Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТаблицыДанных);
				
				СтруктураДанныеНоменклатуры.Номенклатура = СтрокаТаблицыДанных.Номенклатура;
				СтруктураДанныеНоменклатуры.Характеристика = СтрокаТаблицыДанных.Характеристика;
				СтруктураДанныеНоменклатуры.ТипНоменклатуры = СтрокаТаблицыДанных.ТипНоменклатуры;
				СтруктураДанныеНоменклатуры.ЕдиницаИзмерения = СтрокаТаблицыДанных.ЕдиницаИзмерения;

				РезервированиеЗапасов = ?(КэшЗначений.Свойство("РезервированиеЗапасов"), КэшЗначений.РезервированиеЗапасов, Ложь);
				ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, СтрокаТабличнойЧасти, СтруктураДанныеНоменклатуры, , НЕ РезервированиеЗапасов);

				СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
				
				СтрокаТабличнойЧасти.ТипНоменклатурыЗапас = СтруктураДанные.ЭтоЗапас;
				Если СтрокаТабличнойЧасти.ТипНоменклатурыЗапас Тогда
					Если Объект.ПоложениеСклада=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
						СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв) ,СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв, СтруктураДанные.Склад);
					Иначе
						СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
					КонецЕсли; 
				КонецЕсли;
				
				Если ТаблицаДанных.Ключ = "Запасы" И СтрокаТабличнойЧасти.ЭтоНабор Тогда
					// Наборы
					ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, СтрокаТабличнойЧасти, СтруктураДанные);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если Объект.СкидкиРассчитаны Тогда
			
			Если Объект.Запасы.Количество() = 0 Тогда
				Если Объект.СкидкиНаценки.Количество() > 0 Тогда
					Объект.СкидкиНаценки.Очистить();
				КонецЕсли;
				Возврат;
			КонецЕсли;
			
			РассчитатьСкидкиНаценкиКлиент();
		КонецЕсли;
		
		ЗаполнитьПризнакиИспользованияХарактеристик();
		
		РассчитатьОбъемИВесЗаказа();
		ОбновитьИтогиКлиент();
		ОчиститьКалькуляцию();
		ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
		
		Если РежимОстаткиИРезервы Тогда
			ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
		КонецЕсли;
		
		СброситьФлагСкидкиРассчитаныСервер("ОбработкаПодбора");
		
	КонецЕсли;
	
	// Наборы
	Если НаборыКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Источник) И ТипЗнч(Параметр) = Тип("Структура") Тогда
		ОбновитьСоставНабора(Параметр.НоменклатураНабора, Параметр.ХарактеристикаНабора, Параметр.Количество,
			Параметр.Цена, Параметр.СоставНабора);
		ВыполнитьДействияПослеУдаленияСтрокиЗапасов();
	КонецЕсли;
	// Конец Наборы
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовУНФКлиент.ОбработчикОповещенияФормаДокумента(ИмяСобытия, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не Отказ Тогда
		Если Объект.ВидОперации <> ПредопределенноеЗначение(
			"Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку") Тогда
			Объект.МатериалыЗаказчика.Очистить();
		КонецЕсли;
	КонецЕсли; 
	
	Если Не Отказ Тогда
		УдалитьОтмененныеЗапасы();
	КонецЕсли;
	
	// АвтоматическиеСкидки
	СкидкиРассчитаныПередЗаписью = Ложь;
	ПараметрыРасчета = Новый Структура;
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		РабочееМесто = МенеджерОборудованияКлиент.РабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	ПараметрыРасчета.Вставить("РабочееМесто", РабочееМесто); 
	ПараметрыЗаписи.Вставить("ПараметрыРасчетаСкидок",ПараметрыРасчета);
	// Конец АвтоматическиеСкидки
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("Проведение"
			+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ИмяФормы));
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	ОбновитьЗначенияПараметровДоставки();
	
	Если РежимОстаткиИРезервы Тогда
		ПроверитьПоложениеСклада();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// АвтоматическиеСкидки
	СкидкиРассчитаныПередЗаписью = Ложь;
	Если ИспользоватьАвтоматическиеСкидки Тогда
		ПараметрыРасчетаСкидок = Неопределено;		
		Если ПараметрыЗаписи.Свойство("ПараметрыРасчетаСкидок", ПараметрыРасчетаСкидок) Тогда
			ЗаполнитьБонуснуюПрограмму(ТекущийОбъект, ПараметрыРасчетаСкидок);
			СкидкиРассчитаныПередЗаписью = РассчитатьАвтоматическиеСкидкиПриНеобходимостиПередЗаписью(ТекущийОбъект, ПараметрыРасчетаСкидок);
			Если НЕ СкидкиРассчитаныПередЗаписью Тогда
				ОтразитьНаФормеУспешныйРасчетСкидок("Запасы");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	// Отмена товаров, услуг
	Если РежимРедактированияЗапасов Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ВерсионированиеОбъектовКомментарийКВерсии", НСтр("ru = '#Были отменены товары, услуги'"));
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ИгнорироватьПроверкуДатыЗапрета");
		РежимРедактированияЗапасов = Ложь;
	КонецЕсли;

	ДополнитьДанныеОтмененныхТоваров(ТекущийОбъект);
	//Конец отмена товаров, услуг

	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ТекстСообщения = "";
		Справочники.ДоговорыКонтрагентов.ПроверитьСоответствиеДоговораУсловиямДокумента(
			ТекстСообщения, 
			ТекущийОбъект.Договор, 
			ТекущийОбъект.Ссылка, 
			ТекущийОбъект.Организация, 
			ТекущийОбъект.Контрагент, 
			Отказ,         
			ТекущийОбъект.ВидОперации);
		
		Если ТекстСообщения <> "" Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Если Отказ Тогда
				Сообщение.Текст = СтрШаблон(НСтр("ru = 'Документ не проведен. %1'"), ТекстСообщения);
			Иначе
				Сообщение.Текст = ТекстСообщения;
			КонецЕсли;
			
			Если Отказ Тогда
				Сообщение.ПутьКДанным = "Объект";
				Сообщение.Поле = "Договор";
				Сообщение.Сообщить();
				Возврат;
			Иначе
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
						
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ТаблицаДокументовДляИзменения", ТаблицаДокументовДляИзменения);
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		УстановитьНастройкуНоменклатурыДоставки(ТекущийОбъект.НоменклатураДоставки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьУпорядочиваниеСтрокТаблицаЗапасы();
	
	// АвтоматическиеСкидки
	Если ОбновитьКартинкуАвтоСкидкиПослеЗаписи Тогда
		Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
		ОбновитьКартинкуАвтоСкидкиПослеЗаписи = Ложь;
	КонецЕсли;
	АдресСкидок = Неопределено;
	ПараметрыРасчетаСкидок = Неопределено;
	Если ПараметрыЗаписи.Свойство("ПараметрыРасчетаСкидок",ПараметрыРасчетаСкидок) 
		И ПараметрыРасчетаСкидок.Свойство("АдресРезультатаПримененияСкидок",АдресСкидок) Тогда 
		РезультатПримененияСкидок = ПолучитьИзВременногоХранилища(АдресСкидок);
		ОтразитьСкидкиНаФорме(РезультатПримененияСкидок);
		Если ВыдатьПодаркиНаВыбор 
			И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение 
			И ДействиеПослеВыдачиПодарка = "" Тогда
			// Необходимо сначала выбрать подарок, и только после этого будет возможна запись документа.
			ДействиеПослеВыдачиПодарка = "Проведение";
		ИначеЕсли ВыдатьПодаркиНаВыбор 
			И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись 
			И ДействиеПослеВыдачиПодарка = "" Тогда
		КонецЕсли;		
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	// Отмена товаров, услуг
	ЗаполнитьДанныеПоОтменеТоваров();
	НастроитьЭлементыОтменыТоваров();
	// Конец Отмена товаров, услуг
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	Элементы.ВариантЗавершенияРасширеннаяПодсказка.Заголовок = СтрШаблон(НСтр("ru='Предыдущее состояние: %1'"),
		СостоянияЗаказов.ПолучитьСостояниеЗаказаПередЗавершением(
			ТекущийОбъект.Ссылка,
			Справочники.СостоянияЗаказовПокупателей.Завершен));
	
	ЗаполнитьСлужебныеПоляТабличнойЧасти();
	
	// ЭДО
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец ЭДО
	
	// ГрупповоеИзменениеСтрок
	УстановитьПометку(Истина, "Запасы");
	УстановитьПометку(Истина, "МатериалыЗаказчика");
	// Конец ГрупповоеИзменениеСтрок
	
	ПрочитатьВесИОбъемЕдиницыТовара();
	
	ДействияПослеЧтенияОбъекта();
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	Если ДоставкаСтороннегоСервиса Тогда
		РегистрыСведений.ЗаказыСервисовДоставки.ПроверитьЗаписатьДанныеПоДоставке(ТекущийОбъект.Ссылка, ТекущийОбъект.СервисДоставки);
	КонецЕсли;
	
	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);
	// Конец Обсуждения
	
	АссистентУправления.ПослеЗаписиНаСервере(ТекущийОбъект);
	
	Если ТекущийОбъект.Проведен ИЛИ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ТаблицаДокументовДляИзменения.Очистить();
	КонецЕсли;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаПредоплата
		И Элементы.СтраницыРасчетовСКонтрагентом.ТекущаяСтраница = Элементы.СтраницаПросмотр Тогда
		ИстинаПослеЗаписиНаСервере = Истина;
		РасчетыРаботаСФормамиВызовСервера.ЗаполнитьТаблицуПросмотраНаСервере(ЭтотОбъект, ИстинаПослеЗаписиНаСервере);
	КонецЕсли;
	// Конец Взаиморасчеты
	
	Если РежимОстаткиИРезервы Тогда
		НоменклатураВДокументахСервер.ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧасти(Объект,,ТекущийВариантКП,,РезервированиеЗапасов);
	КонецЕсли;
	
	РегистрыСведений.ОбъектыИнтеграцииCRM.ПослеЗаписиОбъекта(Объект.Ссылка);
	
	ОбновитьВидимостьКолонкиПараметровСпецификации(ЭтотОбъект);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// АвтоматическиеСкидки
	Если СкидкиРассчитаныПередЗаписью Тогда
		СтруктураПараметры = Неопределено;
		Если НЕ ПараметрыЗаписи.Свойство("ПараметрыРасчетаСкидок", СтруктураПараметры) Тогда
			СтруктураПараметры = Новый Структура();
		КонецЕсли;
		
		ОтразитьСкидкиНаФормеКлиент(СтруктураПараметры);			
		СкидкиРассчитаныПередЗаписью = Ложь;						
	КонецЕсли;
	// Конец АвтоматическиеСкидки

	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	Оповестить("Запись_ЗаказПокупателя", Объект.Ссылка);
	
	Если ПараметрыЗаписи.Свойство("ПринудительноЗакрытьФорму") И ПараметрыЗаписи.ПринудительноЗакрытьФорму Тогда
		Закрыть();
	Иначе
		
		УправлениеФормой();
		
		ОбновитьОтображениеКолонокВРазрезеЗапасов();
		
		// СборкаЗаказов
		Если ФОСборкаЗаказов Тогда
			СборкаЗаказовКлиент.СборкаЗаказовПриОткрытии(ЭтаФорма, ТекущийВариантКП);
		КонецЕсли;
		// Конец СборкаЗаказов
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьЗаполнениеОбязательныхРеквизитов(Отказ);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПараметрическиеСпецификации
	ПроизводствоФормулыСервер.ПроверитьЗаполнениеДопРеквизитовСпецификаций(Объект, "Запасы", Отказ);
	// Конец ПараметрическиеСпецификации
	
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидЗаказаПриИзменении(Элемент)
	
	ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
	Объект.СостояниеЗаказа = ПолучитьСостояниеЗаказаПокупателя(Объект.ВидЗаказа);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЗаказаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.ВидыЗаказовПокупателей"), ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаказаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТребуетсяОбновитьДанныеВыбораСостояния Тогда
		ПараметрыПолученияДанных.Вставить("ВидЗаказа", Объект.ВидЗаказа);
		ДанныеВыбораСостояния = ПолучитьДанныеВыбора(Тип("СправочникСсылка.СостоянияЗаказовПокупателей"),
			ПараметрыПолученияДанных);
		ТребуетсяОбновитьДанныеВыбораСостояния = Ложь;
	КонецЕсли;
	
	ДанныеВыбора = ДанныеВыбораСостояния;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерПриИзменении(Элемент)
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДанныеДляИзмененияДаты = ДокументыУНФКлиент.ДанныеДляИзмененияДаты(ЭтотОбъект, Объект);
	Если ДанныеДляИзмененияДаты.ДатаНеМенялась Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьДатуОтгрузкиКлиент();
	
	ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты);
	
	ЦеныИВалютаКлиент.ПересчитатьКурсКратностьВалютыРасчетов(ДанныеДляИзмененияДаты.ВалютаКурсКратность, Объект,
		ЭтотОбъект);
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	
	ОбновитьИтогиКлиент();
	ПересчитатьПлатежныйКалендарь();
	
	// ДисконтныеКарты
	// В этой процедуре происходить вызов не модального окна вопроса.
	ПересчитатьПроцентСкидкиПриИзмененииДатыДокумента();
	// Конец ДисконтныеКарты
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	
	// АвтоматическиеСкидки
	ДатаДокументаИзмененаВручную = Истина;
	СброситьФлагСкидкиРассчитаныКлиент("ДатаПриИзменении");
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
	Если Объект.ПоложениеДатыОтгрузки = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
		ПроверитьОповеститьОДатеОтгрузки(Объект.ДатаОтгрузки, Объект.Дата);
	Иначе
		ПроверитьОповеститьОДатеОтгрузкиВТЧ();		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	ОбработатьИзменениеДоговора();
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	ОбновитьИтогиКлиент();
	ПересчитатьПлатежныйКалендарь();
	ОчиститьКалькуляцию();
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	СброситьФлагСкидкиРассчитаныКлиент("ИзменениеВторостепенногоРеквизита", "Организация");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРеквизитыПечатиНажатие(Элемент)
	
	ОткрытьФормуРеквизитыПечати();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "Открытие");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ОбработатьИзменениеВидаОперации();
	ОбработатьИзменениеДоговора();
	
	// ДисконтныеКарты
	ВидОперацииПередИзменением = ВидОперации;
	ВидОперации = Объект.ВидОперации;
	
	Если ВидОперацииПередИзменением <> Объект.ВидОперации Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу") Тогда
			Элементы.СчитатьДисконтнуюКарту.Видимость = Истина;
		Иначе
			Если Не Объект.ДисконтнаяКарта.Пустая() Тогда
				Объект.ДисконтнаяКарта = ПредопределенноеЗначение("Справочник.ДисконтныеКарты.ПустаяСсылка");
				Объект.ПроцентСкидкиПоДисконтнойКарте = 0;
				ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
					УчетВалютныхОпераций);
			КонецЕсли;
			Элементы.СчитатьДисконтнуюКарту.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Конец ДисконтныеКарты
	
	УправлениеФормой();
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
	ОчиститьКалькуляцию();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	ПустойКонтрагентПередИзменением = КонтрагентПередИзменением.Пустая();
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		
		ДанныеКонтрагента = ДанныеКонтрагентаДляИзменения();
		ДанныеКонтрагента.Вставить("ВызовИзПроцедурыПриИзмененииКонтрагента", Истина);
		ДанныеКонтрагента.Вставить("ПустойКонтрагентПередИзменением", ПустойКонтрагентПередИзменением);
		Объект.Договор = ДанныеКонтрагента.Договор;
		ОбработатьИзменениеДоговора(ДанныеКонтрагента);
		УправлениеФормой();
		
		ЗаполнитьПоляДоставки(Объект, ДанныеКонтрагента, ЭтотОбъект);
		
		ЗаполнитьСписокВыбораПолучателя(Элементы.КонтактноеЛицо, ДанныеКонтрагента.ДанныеКонтактныхЛиц);
		ЗаполнитьСписокВыбораАдресаДоставки(Элементы.АдресДоставкиПолучателя, ДанныеКонтрагента.АдресаДоставки);
		
		Если ДанныеКонтрагента.Свойство("Проект") Тогда
			Объект.Проект = ДанныеКонтрагента.Проект;
		КонецЕсли;
		
		УстановитьОтображениеГрузоперевозки();		
		
	Иначе
		
		Объект.Договор = Договор; // Восстанавливаем автоматически очищенный договор.
		
	КонецЕсли;
	
	// АвтоматическиеСкидки
	СброситьФлагСкидкиРассчитаныКлиент("КонтрагентПриИзменении");
	
	ОчиститьКалькуляцию();
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОткрытие(Элемент, СтандартнаяОбработка)
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "Открытие");
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговора();
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	СброситьФлагСкидкиРассчитаныКлиент("ИзменениеВторостепенногоРеквизита", "Договор");	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорОткрытие(Элемент, СтандартнаяОбработка)
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "Открытие");
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбораДоговора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, Объект.Договор, Объект.ВидОперации);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтгрузкиПриИзменении(Элемент)
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура)<>Тип("СправочникСсылка.Номенклатура") Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаТабличнойЧасти.ДатаОтгрузки = Объект.ДатаОтгрузки;
	КонецЦикла; 
	
	ПроверитьОповеститьОДатеОтгрузки(Объект.ДатаОтгрузки, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДенежныхСредствПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапланироватьОплатуПриИзменении(Элемент)
	
	Если Объект.ЗапланироватьОплату И ОжидаетсяВыборВариантаКП() Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не выбран основной вариант коммерческого предложения.'"));
		Объект.ЗапланироватьОплату = Ложь;
		
		Возврат;
	КонецЕсли;
	
	Если Объект.ЗапланироватьОплату И Объект.ПлатежныйКалендарь.Количество() = 0 Тогда
		
		ОбновитьИтогиКлиент();
		
		НоваяСтрока = Объект.ПлатежныйКалендарь.Добавить();
		НоваяСтрока.ДатаОплаты = Объект.Дата + ПолучитьСрокОплатыПокупателя(Объект.Договор) * 86400;
		НоваяСтрока.ПроцентОплаты = 100;
		НоваяСтрока.СуммаОплаты = ИтогВсего;
		НоваяСтрока.СуммаНДСОплаты = ИтогСуммаНДС;
		
	ИначеЕсли НЕ Объект.ЗапланироватьОплату И Объект.ПлатежныйКалендарь.Количество() > 0 Тогда
		
		Объект.ПлатежныйКалендарь.Очистить();
		
	КонецЕсли;
	
	УправлениеФормой();
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаказаПриИзменении(Элемент)
	
	ОбработатьИзменениеСостоянияЗаказа();
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Договор) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбораБанковскогоСчета(Объект.Договор, Объект.Организация, НациональнаяВалюта);
	Если ПараметрыФормы.РасчетыВУсловныхЕдиницах Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.БанковскиеСчета.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокВзаиморасчетовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСФормойДокументаКлиент.ОткрытьОтчетВзаиморасчетыСКонтрагентом(Объект.Контрагент);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ОбработкаНавигационнойСсылки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивОтбора = Новый Массив;
	
	ПустаяСсылкаНаПроект = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	
	МассивОтбора.Добавить(ПустаяСсылкаНаПроект);
	МассивОтбора.Добавить(Объект.Контрагент);
	
	СтруктураОтбора = Новый Структура;
	
	СтруктураОтбора.Вставить("Отбор", Новый Структура("Контрагент", МассивОтбора));
	СтруктураОтбора.Вставить("РежимВыбора", Истина);
	СтруктураОтбора.Вставить("МножественныйВыбор", Ложь);
	СтруктураОтбора.Вставить("ЗакрыватьПриВыборе", Истина);
	
	ОткрытьФорму("Справочник.Проекты.ФормаВыбора", СтруктураОтбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурнаяЕдиницаРезервПриИзменении(Элемент)
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПоляАдресаОтправления(Объект.СтруктурнаяЕдиницаРезерв));
	Элементы.АдресОтправления.РасширеннаяПодсказка.Заголовок = АдресОтправленияПодсказка;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
		Если КэшЗначений.ИспользоватьМинимальныеЦены Тогда
			
			РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", СтрокаТабличнойЧасти);
						
		КонецЕсли;
				
		Если НЕ СтрокаТабличнойЧасти.ТипНоменклатурыЗапас Тогда
			Продолжить;
		КонецЕсли; 
		
		СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
		
	КонецЦикла;
	
	ОбработатьИзменениеСкладаВШапкеНаСервере();
	
	ОбновитьИтогиКлиент();
	ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов();
	СброситьФлагСкидкиРассчитаныКлиент("ИзменениеВторостепенногоРеквизита", "СтруктурнаяЕдиницаРезерв");
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурнаяЕдиницаПродажиПриИзменении(Элемент)
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	СброситьФлагСкидкиРассчитаныКлиент("ИзменениеВторостепенногоРеквизита", "Ответственный");
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "НачалоВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаПроцентПриИзменении(Элемент)
	
	ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки");
	ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "ПроцентСкидкиНаценки";
	ЗапасыИзменениеСтрокЗначение = СкидкаПроцент;
	Модифицированность = Истина;
	
	ОбработатьТаблицу("Запасы");
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаСуммаПриИзменении(Элемент)
	
	ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСкидкуСуммой");
	ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
	ЗапасыИзменениеСтрокЗначение = СкидкаСумма;
	Модифицированность = Истина;  
	
	СтруктураОповещения = Новый Структура;
	СтруктураОповещения.Вставить("СуммаДоРасчета", СкидкаСумма);
	
	ОбработатьТаблицу("Запасы");  
	
	СтруктураОповещения.Вставить("СуммаПослеРасчета", СкидкаСумма);
	
	ЦенообразованиеКлиент.ПоказатьОповещениеПользователяОКорректировкеЦены(СтруктураОповещения);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗавершенияПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидЭД()
	
	Элементы.ВидЭД.СписокВыбора.Очистить();
	
	Элементы.ВидЭД.СписокВыбора.Добавить(Перечисления.ТипыДокументовЭДО.ОтветНаЗаказ, НСтр("ru = 'Заказ товара'"));
	Элементы.ВидЭД.СписокВыбора.Добавить(Перечисления.ТипыДокументовЭДО.СчетНаОплату, НСтр("ru = 'Счета на оплату'"));
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ВидЭлектронногоДокумента = Перечисления.ТипыДокументовЭДО.ОтветНаЗаказ; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДОНажатие(Элемент, СтандартнаяОбработка)
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТекущийВариантКППриИзменении(Элемент)
	
	Если ТекущийВариантКП > Объект.КоличествоВариантовКП Тогда
		Модифицированность = Истина;
		ЗаполнитьВариантыКП("Создание");
		ОчиститьКалькуляцию();
	Иначе
		ЗаполнитьВариантыКП();
	КонецЕсли;
	
	РассчитатьОбъемИВесЗаказа();
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	
	Элементы.ЗапасыКонтекстноеМенюПоказатьДублиСтрок.Пометка = Ложь;
	Элементы.ДекорацияОтборПоДублям.Видимость = Ложь;
	
	// СборкаЗаказов
	Если ФОСборкаЗаказов Тогда
		СборкаЗаказовКлиент.СборкаЗаказовПриОткрытии(ЭтаФорма, ТекущийВариантКП);
	КонецЕсли;
	// Конец СборкаЗаказов
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "удалить" Тогда
		Объект.ДокументОснование = Неопределено;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Неопределено);
		Модифицированность = Истина;
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "заполнить" Тогда
		ЗаполнитьПоОснованиюНачало();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "выбрать" Тогда
		
		// Выбрать основание
		СтруктураПараметровОтбора = Новый Структура;
		СтруктураПараметровОтбора.Вставить("РежимВыбора", Истина);
		_ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
		ОткрытьФорму("Документ.СчетНаОплату.ФормаВыбора", СтруктураПараметровОтбора, ЭтотОбъект, ,,,_ОповещениеОЗакрытии);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "открыть" Тогда
		
		РаботаСФормойДокументаКлиент.ОткрытьФормуДокументаПоСсылке(Объект.ДокументОснование);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснованиеЗавершение(ВыбранноеЗначение, Параметры) Экспорт

	Если ВыбранноеЗначение<>Неопределено Тогда
		Объект.ДокументОснование = ВыбранноеЗначение;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(ВыбранноеЗначение);
		Модифицированность = Истина;
		
		ЗаполнитьПоОснованиюНачало();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюНачало() Экспорт

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения, 
		НСтр("ru = 'Заполнить документ по выбранному основанию?'"), 
		РежимДиалогаВопрос.ДаНет, 0);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоДокументуОснованию();
		УправлениеФормой();
		ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
			УчетВалютныхОпераций);
		ПересчитатьПлатежныйКалендарь();
		ОбновитьИтогиКлиент();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоОснованию()

&НаСервере
// Процедура вызывает обработку заполнения документа по основанию.
//
Процедура ЗаполнитьПоДокументуОснованию()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(Объект.ДокументОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
	Иначе
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
	КонецЕсли;
	
	ЗаполнитьНомераСтрокТаблицаЗапасы(Объект.Запасы, ТекущийВариантКП, ЗапасыКоличествоСтрок);
	ЗаполнитьСлужебныеПоляТабличнойЧасти();
	
	ДействияПослеЧтенияОбъекта();
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	Если РежимОстаткиИРезервы Тогда
		НоменклатураВДокументахСервер.ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧасти(Объект,,ТекущийВариантКП,, РезервированиеЗапасов);
	КонецЕсли;
	
	УправлениеФормой();
	ОбновитьВидимостьКолонкиПараметровСпецификации(ЭтотОбъект);
		
КонецПроцедуры // ЗаполнитьПоДокументуОснованию()

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ЗаполнитьПоляСтраницыДоставка();
	ЗаполнитьТаблицуПросмотраНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиУчетаВНалогообложении()
	
	Объект.СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Объект.Организация,,Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутныйЛистНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Для Каждого ЭлементСписка Из МаршрутныйЛистСписок Цикл
		ОткрытьФорму("Документ.МаршрутныйЛист.ФормаОбъекта", Новый Структура("Ключ, ЗаказПокупателя", ЭлементСписка.Значение, Объект.Ссылка));
	КонецЦикла;
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ОбработкаНавигационнойСсылки");
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтгрузкиExtendedTooltipОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "Настройка" Тогда
		ПараметрыФормы = Новый Структура("СтрокаПоиска", "заполнение даты отгрузки");
		ОткрытьФорму("Обработка.НастройкаПрограммы.Форма.НастройкаПрограммы", ПараметрыФормы);		
	ИначеЕсли ЗначениеЗаполнено(Объект.Договор) Тогда
		ПараметрыФормы = Новый Структура("ВыделитьЭлемент", "ГруппаДатаОтгрузки");
		ПараметрыФормы.Вставить("Ключ", Объект.Договор);
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаЭлемента", ПараметрыФормы);
	КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасы

&НаКлиенте
Процедура ЗапасыКоличествоСобраноПриИзменении(Элемент)
	
	// СборкаЗаказов
	Если ФОСборкаЗаказов Тогда
		
		СборкаЗаказовКлиент.РассчитатьРасхождения(ЭтаФорма, Элемент.Родитель.ТекущиеДанные);
		
		Если Не РежимСборки Тогда
			СборкаЗаказовКлиент.УстановитьВидимостьЭлементовФормыСборкиЗаказа(ЭтаФорма);
		КонецЕсли;
	
	КонецЕсли;
	// Конец СборкаЗаказов
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтборПоРасхождениямОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)
	
	// СборкаЗаказов
	СтандартнаяОбработка = Ложь;
	
	РежимСборки = Не РежимСборки;
	Элементы.РежимСборкиЗаказа.Пометка = РежимСборки;
	УстановитьОтборПоВариантуКП();
	Элементы.ДекорацияОтборПоРасхождениям.Видимость = Ложь;
	
	ЕстьСобранныеПозиции = СборкаЗаказовКлиент.ЕстьСобранныеПозиции(Объект.Запасы, ТекущийВариантКП);
	
	СборкаЗаказовКлиент.УстановитьВидимостьЭлементовФормыСборкиЗаказа(ЭтаФорма);
	// Конец СборкаЗаказов
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// Наборы
	СтрокаТабличнойЧасти = Объект.Запасы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если НЕ ТолькоПросмотр И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураНабора) И  
		(Элемент.ТекущийЭлемент = Элементы.ЗапасыНоменклатура ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗапасыХарактеристика ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗапасыКоличество ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗапасыЕдиницаИзмерения ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗапасыКартинкаНабора) Тогда 
		
		СтандартнаяОбработка = Ложь;
		РедактироватьСоставНабора(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	// Конец Наборы
	
	// ПараметрическиеСпецификации
	Если НЕ ТолькоПросмотр 
		И СтрокаТабличнойЧасти.ЕстьДопРеквизитыСпецификации
		И Элемент.ТекущийЭлемент = Элементы.ЗапасыПараметрыСпецификации Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуРедактированияПараметровСпецификации();
		
	КонецЕсли; 
	// Конец ПараметрическиеСпецификации
	
	// АвтоматическиеСкидки
	// Размещать в конце процедуры. Возможно перезаполнение табличной части
	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыПроцентАвтоматическойСкидки
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ЗапасыСуммаАвтоматическойСкидки
		И НЕ ТолькоПросмотр Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьИнформациюОСкидкахКлиент()
		
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	// Запасы и Остатки
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Номенклатура = ТекущиеДанные.Номенклатура;
	Характеристика = ТекущиеДанные.Характеристика;
	Партия = ТекущиеДанные.Партия;
	Если ЗначениеЗаполнено(ТекущиеДанные.СтруктурнаяЕдиницаРезерв) Тогда
		Склад = ТекущиеДанные.СтруктурнаяЕдиницаРезерв;
	Иначе
		Склад = Объект.СтруктурнаяЕдиницаРезерв;
	КонецЕсли;
	
	ПараметрыПоискаДокументов = Новый Структура;
	
	ПараметрыПоискаДокументов.Вставить("Номенклатура", Номенклатура);
	ПараметрыПоискаДокументов.Вставить("Характеристика", Характеристика);
	ПараметрыПоискаДокументов.Вставить("Партия", Партия);
	ПараметрыПоискаДокументов.Вставить("Склад", Склад);
	ПараметрыПоискаДокументов.Вставить("ЕдиницаИзмерения", ТекущиеДанные.ЕдиницаИзмерения);
	ПараметрыПоискаДокументов.Вставить("ЗаказПокупателя", Объект.Ссылка);
	ПараметрыПоискаДокументов.Вставить("НомерВариантаКП", ТекущийВариантКП);
	ПараметрыПоискаДокументов.Вставить("ОрганизацияОбъекта", Объект.Организация);
	
	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыОтменен Тогда
		
		СтрокиОбработки = Новый Массив;
		СтрокиОбработки.Добавить(ТекущиеДанные.ПолучитьИдентификатор());
		ОбработатьОтменуТоваров(СтрокиОбработки);
		НастроитьЭлементыОтменыТоваров();
		
		Модифицированность = Истина;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыКоличествоОтмены Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		Если СтрокаТабличнойЧасти = Неопределено Тогда 
			Возврат 
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти.КоличествоДоОтмены = 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Количество в текущей строке равно нулю.'");
			Сообщение.КлючДанных = Объект.Ссылка;
			Сообщение.Сообщить();
			Возврат
		КонецЕсли;
		
		ПараметрыОповещения = Новый Структура("СтрокаТабличнойЧасти, АвтоматическиеСкидкиРассчитаны, ИмяТЧ", СтрокаТабличнойЧасти,
		Объект.СкидкиРассчитаны, "Запасы");
		Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуТабличнойЧастиЗавершение", ЭтотОбъект, ПараметрыОповещения);
		
		ПоказатьВводЧисла(Оповещение, СтрокаТабличнойЧасти.КоличествоДоОтмены, НСтр("ru = 'Введите количество отменяемых товаров, услуг'"),
		15, 3);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		Если Элемент.ТекущийЭлемент = Элементы.ЗапасыВРезерве Тогда
			
			ЗначениеПоля = ТекущиеДанные.ВРезерве;
			
			Если ЗначениеЗаполнено(ЗначениеПоля) И ЗначениеЗаполнено(Объект.Ссылка) Тогда
				
				ПараметрыОповещения = Новый Структура("ВыбранноеПоле", "ЗапасыВРезерве");
				Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти", ЭтотОбъект,
					ПараметрыОповещения);
				
				ПараметрыПоискаДокументов.Склад = Неопределено;
				
				СписокДокументов = СписокДокументовПоЗаказу("Остаток", ПараметрыПоискаДокументов);
				
				ПоказатьВыборИзМеню(Оповещение, СписокДокументов, Элемент.ТекущийЭлемент);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Элемент.ТекущийЭлемент = Элементы.ЗапасыРазмещено И ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			ЗначениеПоля = ТекущиеДанные.Размещено;
			
			Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
				
				ПараметрыОповещения = Новый Структура("ВыбранноеПоле", "ЗапасыРазмещено");
				Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти", ЭтотОбъект,
					ПараметрыОповещения);
				
				ПараметрыПоискаДокументов.Склад = Неопределено;
				
				СписокДокументов = СписокДокументовПоЗаказу("Заказано", ПараметрыПоискаДокументов);
				ПоказатьВыборИзМеню(Оповещение, СписокДокументов, Элемент.ТекущийЭлемент);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Элемент.ТекущийЭлемент = Элементы.ЗапасыОстатокОбщий 
			Или Элемент.ТекущийЭлемент = Элементы.ЗапасыСтруктурнаяЕдиницаРезерв Тогда
			
			ЗначениеПоля = ТекущиеДанные.ОстатокОбщий;
			
			СписокВыбораСклад = Элементы.ЗапасыСтруктурнаяЕдиницаРезерв.СписокВыбора;
			СписокВыбораСклад.Очистить();
			
			Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
				
				ПараметрыОповещения = Новый Структура("ВыбранноеПоле", "ЗапасыОстатокОбщий");
				Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти", ЭтотОбъект,
					ПараметрыОповещения);
				
				СписокДокументов = СписокДокументовПоЗаказу("ОбщиеЗапасы", ПараметрыПоискаДокументов);
				
				Для Каждого ЭлементСписка Из СписокДокументов Цикл
					СписокВыбораСклад.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление,, ЭлементСписка.Картинка);
				КонецЦикла;
				
				Если Не ТекущиеДанные.ОстатокОбщий = 0 И РазрешитьСкладыВТабличныхЧастях И РезервированиеЗапасов Тогда
					
					ОстатокОбщий = ?(ТекущиеДанные.ОстатокОбщий <= 0, "", Формат(ТекущиеДанные.ОстатокОбщий, "ЧДЦ = 3"));
					
					ПредставлениеОбщегоОстатка = ОстатокОбщий + " " + Строка(ТекущиеДанные.ЕдиницаИзмерения) + ". <Всего>; Заполнить по остаткам.";
					
					ЭлементСпискаЗначений = Новый СписокЗначений;
					ЭлементСпискаЗначений.Добавить("РаспределитьПоРезервам", ПредставлениеОбщегоОстатка);
					
					СписокВыбораСклад.Добавить(ЭлементСпискаЗначений[0].Значение, ПредставлениеОбщегоОстатка);
					СписокДокументов.Добавить(ЭлементСпискаЗначений[0].Значение, ПредставлениеОбщегоОстатка);
					
				КонецЕсли;
				
				Если СписокДокументов.Количество() Тогда
					СписокДокументов.Добавить("ОтчетОстаткиНаСкладах", НСтр("ru = 'Остатки на складах (отчет)'"),, БиблиотекаКартинок.Отчет);
					СписокВыбораСклад.Добавить("ОтчетОстаткиНаСкладах", НСтр("ru = 'Остатки на складах (отчет)'"),, БиблиотекаКартинок.Отчет);
				КонецЕсли;
				
				Если Элемент.ТекущийЭлемент = Элементы.ЗапасыОстатокОбщий Тогда
					ПоказатьВыборИзМеню(Оповещение, СписокДокументов, Элемент.ТекущийЭлемент);
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЕсли;
		
		Если Элемент.ТекущийЭлемент = Элементы.ЗапасыДатаПоступления Тогда
			
			ЗначениеПоля = ТекущиеДанные.ДатаПоступления;
			
			Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
				
				ПараметрыОповещения = Новый Структура("ВыбранноеПоле", "ЗапасыПоступления");
				Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти", ЭтотОбъект,
					ПараметрыОповещения);
				
				СписокДокументов = СписокДокументовПоЗаказу("ЗапасыПоступления", ПараметрыПоискаДокументов);
				ПоказатьВыборИзМеню(Оповещение, СписокДокументов, Элемент.ТекущийЭлемент);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриАктивизацииСтроки(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	Элементы.ЗапасыКонтекстноеМенюЗапасыРазбитьСтроку.Доступность = Не СтрокаТабличнойЧасти.ЭтоНабор;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти.НомерВариантаКП = ТекущийВариантКП;
		Если НЕ Копирование Тогда
			СтрокаТабличнойЧасти.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
		КонецЕсли;
		ЗаполнитьНомераСтрокТаблицаЗапасы(Объект.Запасы, ТекущийВариантКП, ЗапасыКоличествоСтрок);
	КонецЕсли;
	
	Если НоваяСтрока И Копирование И
		(СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки <> 0 ИЛИ СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки <> 0) Тогда
		СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки = 0;
		СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = 0;
		РассчитатьСуммуВСтрокеТабличнойЧасти();
	ИначеЕсли ИспользоватьАвтоматическиеСкидки И НоваяСтрока И Копирование Тогда
		// Автоматические скидки стали неактуальны.
		СброситьФлагСкидкиРассчитаныКлиент("ПриНачалеРедактирования");
	КонецЕсли;
	
	Если НоваяСтрока И Копирование Тогда
		СтрокаТабличнойЧасти.КлючСвязи = 0;
		СтрокаТабличнойЧасти.СерииНоменклатуры = "";
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти, , 
			КэшЗначений.ПередачаТоваровМеждуОрганизациями);
		ОчиститьКалькуляцию();
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "ДатаОтгрузки", "ПоложениеДатыОтгрузки");
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "СтруктурнаяЕдиницаРезерв", "ПоложениеСклада");
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыСерииНоменклатуры Тогда
		ОткрытьПодборСерииНоменклатуры();
	КонецЕсли;
	
	// ГрупповоеИзменениеСтрок
	СтрокаТабличнойЧасти.Пометка = Истина;
	// Конец ГрупповоеИзменениеСтрок
	
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТабличнойЧасти.Количество = НовоеКоличествоПриИзмененииНоменклатуры;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьОбъемИВесЗаказа();
	ОбновитьИтогиКлиент();
	ПересчитатьПлатежныйКалендарь();
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПослеУдаления(Элемент)
	
	ВыполнитьДействияПослеУдаленияСтрокиЗапасов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ЗаполнитьНомераСтрокТаблицаЗапасы(Объект.Запасы, ТекущийВариантКП, ЗапасыКоличествоСтрок);
	ОбновитьИтогиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Запасы.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизита = Новый Структура;
	СтруктураРеквизита.Вставить("Объект", "Объект");
	СтруктураРеквизита.Вставить("ТабЧасть", "Запасы");
	СтруктураРеквизита.Вставить("НомерСтроки", ТекущаяСтрока.НомерСтроки - 1);
	СтруктураРеквизита.Вставить("ИмяРеквизита", "Содержание");
	ЗаголовокФормыРедактирования = СтрШаблон(НСтр("ru='%1: содержание'"), Строка(ТекущаяСтрока.Номенклатура));
	ОбщегоНазначенияУНФКлиент.ПоказатьФормуРедактированияРеквизита(Элемент.ТекстРедактирования, ЭтотОбъект,
		СтруктураРеквизита, ЗаголовокФормыРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьСбросКоличества И СбрасыватьКоличество
		И СтрокаТабличнойЧасти.Количество <> НовоеКоличествоПриИзмененииНоменклатуры Тогда
		
		ДопПараметр = Новый Структура();
		ДопПараметр.Вставить("Элемент", Элемент);
		ДопПараметр.Вставить("Количество", СтрокаТабличнойЧасти.Количество);
		Оповещение = Новый ОписаниеОповещения("ЗапасыПодтверждениеСбросаКоличестваЗавершение", ЭтотОбъект, ДопПараметр);
		ОткрытьФорму("ОбщаяФорма.ПодтверждениеСбросаКоличества", , , , , , Оповещение);
		
	Иначе
		
		Если СбрасыватьКоличество Тогда
			НовоеКоличество = НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
		ЗапасыНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПодтверждениеСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗапрашиватьСбросКоличества = Результат.ЗапрашиватьСбросКоличества;
		Если НЕ ЗапрашиватьСбросКоличества Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		КонецЕсли;
		Если Результат.СбрасыватьКоличество Тогда
			НовоеКоличество = Результат.НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = ДополнительныеПараметры.Количество;
		КонецЕсли;
	Иначе
		НовоеКоличество = ДополнительныеПараметры.Количество;
	КонецЕсли;
	
	ЗапасыНоменклатураПриИзмененииПродолжить(ДополнительныеПараметры.Элемент, НовоеКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество, 
	СтрокаТабличнойЧасти = Неопределено, ЦенаЗапаса = Неопределено, Партия = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ЭтоРазделитель Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиницаРезерв);
	
	СтруктураПоискаПартииСНДС = Новый Структура("КомиссияСНДС", Истина);
	ЕстьПартииСНДС = Объект.Запасы.НайтиСтроки(СтруктураПоискаПартииСНДС).Количество() > 0;
	СтруктураДанные.Вставить("ЕстьПартииСНДС", ЕстьПартииСНДС);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу")
		Тогда
		СтатусПартии = Новый СписокЗначений;
		СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
		СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
		
		СтруктураДанные.Вставить("СтатусПартии", СтатусПартии);
		СтруктураДанные.Вставить("ВключаяШаблоны", Истина);
	КонецЕсли;
		
	СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
		
	КонецЕсли;
	
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	// Конец ДисконтныеКарты

	РезервированиеЗапасов = ?(КэшЗначений.Свойство("РезервированиеЗапасов"), КэшЗначений.РезервированиеЗапасов, Ложь);	
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, СтрокаТабличнойЧасти, СтруктураДанные, , НЕ РезервированиеЗапасов);	

	СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанные);
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	Если СтруктураДанные.ЭтоНабор И НЕ СтруктураДанные.ИспользоватьХарактеристики Тогда
		
		// Наборы
		ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, СтрокаТабличнойЧасти, СтруктураДанные);
		
		ЗаполнитьПризнакиИспользованияХарактеристик();
		
		// АвтоматическиеСкидки.
		СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
		// Конец АвтоматическиеСкидки
	
		#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
		Элементы.Запасы.ЗакончитьРедактированиеСтроки(Истина);
		#КонецЕсли 
		
	Иначе
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			СтрокаТабличнойЧасти.НоменклатураСсылка = СтрокаТабличнойЧасти.Номенклатура;
		КонецЕсли;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Количество = НовоеКоличество;
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
		Если ЦенаЗапаса <> Неопределено Тогда
			СтрокаТабличнойЧасти.Цена = ЦенаЗапаса;
		 КонецЕсли;
		 
		Если СтруктураДанные.Свойство("МинимальнаяЦена") 
			И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
			СтрокаТабличнойЧасти.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;			
		КонецЕсли;
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
		СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		СтрокаТабличнойЧасти.Содержание = "";
		СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
		СтрокаТабличнойЧасти.ЭтоШаблонСпецификации = СтруктураДанные.ЭтоШаблонСпецификации;
		СтрокаТабличнойЧасти.ЕстьДопРеквизитыСпецификации = СтруктураДанные.ЕстьДопРеквизитыСпецификации;
		Если СтрокаТабличнойЧасти.ЕстьДопРеквизитыСпецификации Тогда
			Если СтрокаТабличнойЧасти.КлючСвязи<>0 Тогда
				ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.РеквизитыПараметрическихСпецификаций, СтрокаТабличнойЧасти);
			КонецЕсли; 
			ЗаполнитьДопРеквизитыПоУмолчанию(СтрокаТабличнойЧасти.ПолучитьИдентификатор());
			ОбновитьОписанияДопРеквизитов(ЭтотОбъект, СтрокаТабличнойЧасти.КлючСвязи);
		КонецЕсли; 
		
		СтрокаТабличнойЧасти.ТипНоменклатурыЗапас = СтруктураДанные.ЭтоЗапас;
		Если СтрокаТабличнойЧасти.ТипНоменклатурыЗапас Тогда
			Если Объект.ПоложениеСклада=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
				СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв) И ПодборНоменклатурыИзСписка
																,СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв, СтруктураДанные.Склад);
			Иначе
				СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
			КонецЕсли;
			ЗапасыСтруктурнаяЕдиницаРезервТЧПриИзменении(Элемент);
		КонецЕсли;
		
		СтрокаТабличнойЧасти.ВесЕдиницыТовара = СтруктураДанные.ВесЕдиницыТовара;
		СтрокаТабличнойЧасти.Вес = СтрокаТабличнойЧасти.ВесЕдиницыТовара * СтрокаТабличнойЧасти.Количество;
		СтрокаТабличнойЧасти.ОбъемЕдиницыТовара = СтруктураДанные.ОбъемЕдиницыТовара;
		СтрокаТабличнойЧасти.Объем = СтрокаТабличнойЧасти.ОбъемЕдиницыТовара * СтрокаТабличнойЧасти.Количество;
		
		СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
		СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
		СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
		
		Если СтруктураДанные.ИспользоватьХарактеристики Тогда
			Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
				СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
				СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
			Иначе
				СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
			КонецЕсли;
		КонецЕсли;
		
		//Партии
		СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
		СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
		
		Если СтруктураДанные.ИспользоватьПартии Тогда
			Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
				СтрокаТабличнойЧасти.Партия = СтруктураВыбораНоменклатуры.Партия;
				СтруктураВыбораНоменклатуры.Партия = Неопределено;
			Иначе
				СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
			КонецЕсли;
			Если Партия <> Неопределено Тогда
				СтрокаТабличнойЧасти.Партия = Партия;
			КонецЕсли;
			СтрокаТабличнойЧасти.КомиссияСНДС = СтруктураДанные.КомиссияСНДС;
		КонецЕсли;
		// Конец Партии
		
		СтрокаТабличнойЧасти.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
		
		// Наборы
		СтрокаТабличнойЧасти.ЭтоНабор = СтруктураДанные.ЭтоНабор;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти();
		
	КонецЕсли;
	
	ПодборНоменклатурыИзСписка = Ложь;
	
	РассчитатьОбъемИВесЗаказа();
	ОбновитьИтогиКлиент();
	ОчиститьКалькуляцию();
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
	ОбновитьВидимостьКолонкиПараметровСпецификации(ЭтотОбъект);
	
	// СборкаЗаказов
	Если ФОСборкаЗаказов Тогда
		СтрокаТабличнойЧасти.КоличествоСобрано = 0;
		СборкаЗаказовКлиент.РассчитатьРасхождения(ЭтаФорма, СтрокаТабличнойЧасти);
	КонецЕсли;
	// Конец СборкаЗаказов
	
	Если СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
		Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС");
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,УчетВалютныхОпераций);
		ТребуетсяИзменениеНалогообложениеНаСНДС = СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС;
		РаботаСНоменклатуройКлиентУНФ.ВывестиОповещениеПользователяОбИзмененииРежимаНалогообложенияНаСДНС(ТребуетсяИзменениеНалогообложениеНаСНДС);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтотОбъект,
				"ЗаказПокупателя", НастройкиФормыВыбораНоменклатуры, Истина, "Запасы",
				ВыбранноеЗначение.СтруктураНастроек);
		КонецЕсли;
		
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		Если РазрешитьСкладыВТабличныхЧастях Тогда
			Если Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти")
				Или Объект.СтруктурнаяЕдиницаРезерв = ВыбранноеЗначение.Склад
				Или Не ЗначениеЗаполнено(ВыбранноеЗначение.Склад) Тогда
				
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
				
				Если СтрокаТабличнойЧасти.Свойство("СтруктурнаяЕдиницаРезерв") Тогда
					СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = ВыбранноеЗначение.Склад;
				КонецЕсли;
				
				НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтотОбъект, "Запасы");
				
			ИначеЕсли ЗначениеЗаполнено(ВыбранноеЗначение.Склад) И Не Объект.СтруктурнаяЕдиницаРезерв = ВыбранноеЗначение.Склад Тогда
				Режим = РежимДиалогаВопрос.ДаНет;
				ПараметрыОповещения = ВыбранноеЗначение;
				Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаСкладВТЧ", ЭтотОбъект, ПараметрыОповещения);
				ПоказатьВопрос(Оповещение, НСтр("ru = 'Выбранный склад отличен от склада в шапке. Отобразить склад в табличной части?'"), Режим, 0);
				СтандартнаяОбработка = Ложь;
				Возврат;
			Иначе
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
				НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтотОбъект, "Запасы");
			КонецЕсли;
		Иначе
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
				НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтотОбъект, "Запасы");
		КонецЕсли;
			
			ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
		КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаСкладВТЧ(Результат, ПараметрыОповещения) Экспорт
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ПараметрыОповещения);
		ЗапасыНоменклатураПриИзменении(Неопределено);
		Возврат;
	КонецЕсли;
	
	Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");
	
	УправлениеФормой();
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ПараметрыОповещения);
	
	Если СтрокаТабличнойЧасти.Свойство("СтруктурнаяЕдиницаРезерв") Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = ПараметрыОповещения.Склад;
	КонецЕсли;
	
	ЗапасыНоменклатураПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Компания);
	СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу") Тогда
		СтруктураДанные.Вставить("ВключаяШаблоны", Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
	
		СтруктураДанные.Вставить("ДатаОбработки", 		Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", 	Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС",	Объект.СуммаВключаетНДС);
		
		СтруктураДанные.Вставить("СтавкаНДС", 	СтрокаТабличнойЧасти.СтавкаНДС);
		СтруктураДанные.Вставить("Цена", 		СтрокаТабличнойЧасти.Цена);
		
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
		
	КонецЕсли;

	РезервированиеЗапасов = ?(КэшЗначений.Свойство("РезервированиеЗапасов"), КэшЗначений.РезервированиеЗапасов, Ложь);	
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, СтрокаТабличнойЧасти, СтруктураДанные, , НЕ РезервированиеЗапасов);	
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	Если СтруктураДанные.ЭтоНабор Тогда
		
		// Наборы
		ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, СтрокаТабличнойЧасти, СтруктураДанные);
		
		ЗаполнитьПризнакиИспользованияХарактеристик();
		
		// АвтоматическиеСкидки.
		СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
		// Конец АвтоматическиеСкидки
		
		Если РежимОстаткиИРезервы Тогда
			ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
		КонецЕсли;
		
	Иначе
		
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена; 
		Если СтруктураДанные.Свойство("МинимальнаяЦена") 
			И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
			СтрокаТабличнойЧасти.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;			
		КонецЕсли;
		СтрокаТабличнойЧасти.Содержание = "";
		СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
		СтрокаТабличнойЧасти.ЭтоШаблонСпецификации = СтруктураДанные.ЭтоШаблонСпецификации;
		СтрокаТабличнойЧасти.ЕстьДопРеквизитыСпецификации = СтруктураДанные.ЕстьДопРеквизитыСпецификации;
		Если СтрокаТабличнойЧасти.ЕстьДопРеквизитыСпецификации Тогда
			Если СтрокаТабличнойЧасти.КлючСвязи<>0 Тогда
				ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.РеквизитыПараметрическихСпецификаций, СтрокаТабличнойЧасти);
			КонецЕсли; 
			ЗаполнитьДопРеквизитыПоУмолчанию(СтрокаТабличнойЧасти.ПолучитьИдентификатор());
			ОбновитьОписанияДопРеквизитов(ЭтотОбъект, СтрокаТабличнойЧасти.КлючСвязи);
		КонецЕсли; 
		
		РассчитатьСуммуВСтрокеТабличнойЧасти();
		
		Если РежимОстаткиИРезервы Тогда
			ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,СтрокаТабличнойЧасти.Номенклатура);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьИтогиКлиент();
	ОчиститьКалькуляцию();
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	
	ОбновитьВидимостьКолонкиПараметровСпецификации(ЭтотОбъект);
	
	// СборкаЗаказов
	Если ФОСборкаЗаказов Тогда
		СтрокаТабличнойЧасти.КоличествоСобрано = 0;
		СборкаЗаказовКлиент.РассчитатьРасхождения(ЭтаФорма, СтрокаТабличнойЧасти);
	КонецЕсли;
	// Конец СборкаЗаказов
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПартияПриИзменении(Элемент)
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", 				Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура",				СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",				СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", 						СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("ИспользоватьХарактеристики",	СтрокаТабличнойЧасти.ИспользоватьХарактеристики);
	СтруктураДанные.Вставить("ИспользоватьПартии", 			СтрокаТабличнойЧасти.ИспользоватьПартии);
	СтруктураДанные.Вставить("НалогообложениеНДС",			Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("ДатаОбработки",				Объект.Дата);
	СтруктураДанные.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиницаРезерв);
	
	ЗапасыПартияПриИзмененииНаСервереБезКонтекста(СтруктураДанные);
	
	СтрокаТабличнойЧасти.КомиссияСНДС = СтруктураДанные.КомиссияСНДС;
	
	Если ЗначениеЗаполнено(СтруктураДанные.СтавкаНДС) И НЕ СтруктураДанные.СтавкаНДС = СтрокаТабличнойЧасти.СтавкаНДС Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		РассчитатьСуммуВСтрокеТабличнойЧасти();
	КонецЕсли;
	
	Если СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
		Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС");
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,УчетВалютныхОпераций);
		ТребуетсяИзменениеНалогообложениеНаСНДС = СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС;
		РаботаСНоменклатуройКлиентУНФ.ВывестиОповещениеПользователяОбИзмененииРежимаНалогообложенияНаСДНС(ТребуетсяИзменениеНалогообложениеНаСНДС);
	КонецЕсли;
	
	// Остатки и Резервы
	Если РежимОстаткиИРезервы Тогда
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
		
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(, СтрокаТабличнойЧасти.Номенклатура);
	КонецЕсли;
	
	// СборкаЗаказов
	Если ФОСборкаЗаказов Тогда
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			Возврат;
		КонецЕсли;
		СтрокаТабличнойЧасти.КоличествоСобрано = 0;
		СборкаЗаказовКлиент.РассчитатьРасхождения(ЭтаФорма, СтрокаТабличнойЧасти);
	КонецЕсли;
	// Конец СборкаЗаказов
	СброситьФлагСкидкиРассчитаныКлиент("ИзменениеВторостепенногоРеквизита", "Партия");	
	
КонецПроцедуры

&НаСервере
Процедура ЗапасыПартияПриИзмененииНаСервереБезКонтекста(СтруктураДанные)
	
	СтруктурнаяЕдиница = ?(СтруктураДанные.Свойство("СтруктурнаяЕдиница"), СтруктураДанные.СтруктурнаяЕдиница, Неопределено);
	НалогообложениеНДСОрганизации = НалогиУНФ.НалогообложениеНДС(СтруктураДанные.Организация,, СтруктураДанные.ДатаОбработки);
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС")
		И (НЕ СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС")
		ИЛИ НалогообложениеНДСОрганизации = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС")) Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС")
			ИЛИ НалогообложениеНДСОрганизации = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.ВидСтавкиНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Номенклатура.ВидСтавкиНДС));
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Организация.ВидСтавкиНДСПоУмолчанию));
	КонецЕсли;
	
	СтруктураДанные.Вставить("ТребуетсяИзменениеНалогообложениеНаСНДС", Ложь);
	СтруктураДанные.Вставить("КомиссияСНДС", СтруктураДанные.Партия.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС);
	
	РаботаСКомиссионерамиКомитентамиСервер.СкорректироватьСтавкуНДСКомиссионногоТовара(СтруктураДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСерииНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерииНоменклатуры();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерииНоменклатуры()
		
	ТекущиеДанныеИдентификатор = Элементы.Запасы.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыСерийНоменклатуры = ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор);
	
	ОткрытьФорму("Обработка.ПодборСерийНоменклатуры.Форма", ПараметрыСерийНоменклатуры, ЭтотОбъект);

КонецПроцедуры

&НаСервере
Функция ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор)
	
	Результат = СерииНоменклатурыУНФ.ПараметрыПодбораСерийНоменклатуры(Объект, УникальныйИдентификатор,
		ТекущиеДанныеИдентификатор, Истина, "Запасы", "СерииНоменклатуры", "КлючСвязи");
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗапасыСпецификацияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Спецификация", СтрокаТабличнойЧасти.Спецификация);
	
	СтруктураДанные = ПолучитьДанныеСпецификацияПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЭтоШаблонСпецификации = СтруктураДанные.ЭтоШаблонСпецификации;
	СтрокаТабличнойЧасти.ЕстьДопРеквизитыСпецификации = СтруктураДанные.ЕстьДопРеквизитыСпецификации;
	Если СтрокаТабличнойЧасти.ЕстьДопРеквизитыСпецификации Тогда
		Если СтрокаТабличнойЧасти.КлючСвязи<>0 Тогда
			ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.РеквизитыПараметрическихСпецификаций, СтрокаТабличнойЧасти);
		КонецЕсли; 
		ЗаполнитьДопРеквизитыПоУмолчанию(СтрокаТабличнойЧасти.ПолучитьИдентификатор());
		ОбновитьОписанияДопРеквизитов(ЭтотОбъект, СтрокаТабличнойЧасти.КлючСвязи);
	КонецЕсли; 
	
	ОчиститьКалькуляцию();

	ОбновитьВидимостьКолонкиПараметровСпецификации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСодержаниеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
		
		ШаблонСодержания = ТекстСодержания(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика);
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ШаблонСодержания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	СтрокаТабличнойЧасти.Вес = СтрокаТабличнойЧасти.ВесЕдиницыТовара * СтрокаТабличнойЧасти.Количество;
	СтрокаТабличнойЧасти.Объем = СтрокаТабличнойЧасти.ОбъемЕдиницыТовара * СтрокаТабличнойЧасти.Количество;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
	РассчитатьОбъемИВесЗаказа();
	ОбновитьИтогиКлиент();
	ПересчитатьПлатежныйКалендарь();
	ОчиститьКалькуляцию();
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	
	НоменклатураВДокументахКлиент.КонтрольЗначенияРезерваВТекущейСтроке(СтрокаТабличнойЧасти);
	
	Если РежимОстаткиИРезервы Тогда
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Компания);
		СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
		СтруктураДанные.Вставить("Партия", 	СтрокаТабличнойЧасти.Партия);
		СтруктураДанные.Вставить("ИспользоватьХарактеристики", СтрокаТабличнойЧасти.ИспользоватьХарактеристики);
		СтруктураДанные.Вставить("ИспользоватьПартии", СтрокаТабличнойЧасти.ИспользоватьПартии);
		
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные);
	КонецЕсли;
	
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти, , 
		КэшЗначений.ПередачаТоваровМеждуОрганизациями);
	
	// СборкаЗаказов
	Если ФОСборкаЗаказов Тогда
		СборкаЗаказовКлиент.РассчитатьРасхождения(ЭтаФорма, СтрокаТабличнойЧасти);
	КонецЕсли;
	// Конец СборкаЗаказов
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Цена = 0
		И СтрокаТабличнойЧасти.Вес = 0
		И СтрокаТабличнойЧасти.Объем = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;	
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.Номенклатура, Неопределено, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
		СтруктураДанные,
		ВесИОбъемЕдиницТоваров(СтрокаТабличнойЧасти.Номенклатура, ВыбранноеЗначение, Коэффициент));
	КонецЕсли;
	
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
		Если КэшЗначений.ИспользоватьМинимальныеЦены
			И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
			
			СтрокаТабличнойЧасти.МинимальнаяЦена = СтрокаТабличнойЧасти.МинимальнаяЦена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
		
		КонецЕсли;
		СтрокаТабличнойЧасти.ВесЕдиницыТовара = СтруктураДанные.ВесЕдиницыТовара;
		СтрокаТабличнойЧасти.Вес = СтрокаТабличнойЧасти.ВесЕдиницыТовара * СтрокаТабличнойЧасти.Количество;
		СтрокаТабличнойЧасти.ОбъемЕдиницыТовара = СтруктураДанные.ОбъемЕдиницыТовара;
		СтрокаТабличнойЧасти.Объем = СтрокаТабличнойЧасти.ОбъемЕдиницыТовара * СтрокаТабличнойЧасти.Количество;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияПриИзменении(Элемент)
	
	// В процедуре РассчитатьСуммуВСтрокеТабличнойЧасти есть вызов серверной процедуры.
	// Из-за этого данный вызов нельзя выполнить в процедуре ЗапасыЕдиницаИзмеренияОбработкаВыбора.
	// Использование ЗапасыЕдиницаИзмеренияОбработкаВыбора более оптимально, т.к. позволяет отказаться от выполнения
	// большей части алгоритма, если единица измерения не поменялась.
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
	ОбновитьИтогиКлиент();
	ОчиститьКалькуляцию();
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат 
	КонецЕсли;
	
	Если РежимОстаткиИРезервы Тогда
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Компания);
		СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
		СтруктураДанные.Вставить("Партия", 	СтрокаТабличнойЧасти.Партия);
		СтруктураДанные.Вставить("ИспользоватьХарактеристики", СтрокаТабличнойЧасти.ИспользоватьХарактеристики);
		СтруктураДанные.Вставить("ИспользоватьПартии", СтрокаТабличнойЧасти.ИспользоватьПартии);
		
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные);
	КонецЕсли;
	
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти, , 
		КэшЗначений.ПередачаТоваровМеждуОрганизациями);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
	ОбновитьИтогиКлиент();
	ПересчитатьПлатежныйКалендарь();
	ОчиститьКалькуляцию();
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	ПараметрыРасчета = Новый Структура("РассчитатьСуммуСкидки, СброситьФлагСкидкиРассчитаны", Истина, Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбновитьИтогиКлиент();
	ПересчитатьПлатежныйКалендарь();
	ОчиститьКалькуляцию();
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	ПараметрыРасчета = Новый Структура("РассчитатьСуммуСкидки, СброситьФлагСкидкиРассчитаны, РассчитатьЦену", Истина, Истина, Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", СтрокаТабличнойЧасти, ПараметрыРасчета);
		
	ОбновитьИтогиКлиент();
	ПересчитатьПлатежныйКалендарь();
	ОчиститьКалькуляцию();
	
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(СтрокаТабличнойЧасти, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
	
	ОбновитьИтогиКлиент();
	ПересчитатьПлатежныйКалендарь();
	ОчиститьКалькуляцию();
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	ОбновитьИтогиКлиент();
	ПересчитатьПлатежныйКалендарь();
	ОчиститьКалькуляцию();
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Наборы
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если Копирование И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураНабора) Тогда
		// Состав набора не копируется
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	// Конец Наборы
	
	Если Копирование И РежимОстаткиИРезервы Тогда
		
		Отказ = Истина;
		
		НоваяСтрока = Объект.Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		
		НоваяСтрока.Резерв = 0;
		
		Если ИспользоватьАвтоматическиеСкидки Тогда
			// Автоматические скидки стали неактуальны.
			СброситьФлагСкидкиРассчитаныКлиент("ПриНачалеРедактирования");
		ИначеЕсли (НоваяСтрока.ПроцентАвтоматическойСкидки <> 0 ИЛИ НоваяСтрока.СуммаАвтоматическойСкидки <> 0) Тогда
			НоваяСтрока.ПроцентАвтоматическойСкидки = 0;
			НоваяСтрока.СуммаАвтоматическойСкидки = 0;
			РассчитатьСуммуВСтрокеТабличнойЧасти(,НоваяСтрока);
		КонецЕсли;
		
		НоваяСтрока.КлючСвязи = 0;
		НоваяСтрока.СерииНоменклатуры = "";
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, НоваяСтрока, , 
			КэшЗначений.ПередачаТоваровМеждуОрганизациями);
		
		ОчиститьКалькуляцию();
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Компания);
		СтруктураДанные.Вставить("Номенклатура", 	НоваяСтрока.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", 	НоваяСтрока.Характеристика);
		СтруктураДанные.Вставить("Партия", 	НоваяСтрока.Партия);
		СтруктураДанные.Вставить("ИспользоватьХарактеристики", НоваяСтрока.ИспользоватьХарактеристики);
		СтруктураДанные.Вставить("ИспользоватьПартии", НоваяСтрока.ИспользоватьПартии);
		
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные);
		
		ЗаполнитьНомераСтрокТаблицаЗапасы(Объект.Запасы, ТекущийВариантКП, ЗапасыКоличествоСтрок);
		
		РассчитатьОбъемИВесЗаказа();
		ОбновитьИтогиКлиент();
		ПересчитатьПлатежныйКалендарь();
		ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	// Наборы
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("НомерВариантаКП", ТекущийВариантКП);
	ВсеСтрокиВарианта = Объект.Запасы.НайтиСтроки(СтруктураОтбора);
	Если Элементы.Запасы.ВыделенныеСтроки.Количество()=ВсеСтрокиВарианта.Количество() Тогда
		// Если выделены все строки - проверки удаления наборов не выполняются
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("НомерВариантаКП", ТекущийВариантКП);
		УдаляемыеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрНабора Из УдаляемыеСтроки Цикл
			Объект.ДобавленныеНаборы.Удалить(СтрНабора);
		КонецЦикла; 
	Иначе
		ДанныеНабора = Новый Структура("НоменклатураНабора, ХарактеристикаНабора");
		Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
			Если ДанныеНабора.НоменклатураНабора=Неопределено Тогда
				ДанныеНабора.НоменклатураНабора = ТекущиеДанныеСтроки.НоменклатураНабора;
				ДанныеНабора.ХарактеристикаНабора = ТекущиеДанныеСтроки.ХарактеристикаНабора;
			ИначеЕсли ДанныеНабора.НоменклатураНабора<>ТекущиеДанныеСтроки.НоменклатураНабора 
				ИЛИ ДанныеНабора.ХарактеристикаНабора<>ТекущиеДанныеСтроки.ХарактеристикаНабора Тогда
				// Выделены строки разных наборов
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Действие недоступно для наборов!'");
				Сообщение.Поле = "Объект.Запасы";
				Сообщение.Сообщить();
				Отказ = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		Если НЕ Отказ И ЗначениеЗаполнено(ДанныеНабора.НоменклатураНабора) Тогда
			// Набор можно удалить только целиком
			Отказ = Истина;
			ДанныеНабора.Вставить("НомерВариантаКП", ТекущийВариантКП);
			ДобавленныеНаборы = Объект.ДобавленныеНаборы.НайтиСтроки(ДанныеНабора);
			Оповещение = Новый ОписаниеОповещения("ЗапасыПередУдалениемЗавершение", ЭтотОбъект, ДанныеНабора);
			СписокКнопок = Новый СписокЗначений;
			Если ДобавленныеНаборы.Количество()>0 И ДобавленныеНаборы[0].Количество>1 Тогда
				// в ТЧ есть несколько одинаковых наборов
				ТекстВопроса = НСтр("ru = 'Набор можно удалить только целиком. В табличную часть добавлено несколько экземпляров данного набора'");
				СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить все'"));
				СписокКнопок.Добавить("УдалитьОдин", НСтр("ru = 'Удалить один экземпляр'"));
			Иначе
				ТекстВопроса = НСтр("ru = 'Набор можно удалить только целиком'");
				СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить'"));
			КонецЕсли; 
			СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Редактировать состав'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
			ПоказатьВопрос(Оповещение, ТекстВопроса, СписокКнопок, 0, КодВозвратаДиалога.Да);
		КонецЕсли;
	КонецЕсли; 
	// Конец Наборы
	
	// Остатки и резервы
	Если РежимОстаткиИРезервы И Не Отказ Тогда
		НоменклатураУдаленнойСтроки = ТекущиеДанные.Номенклатура;
	КонецЕсли;
	
	// Серии номенклатуры
	Если НЕ Отказ И Объект.СерииНоменклатуры.Количество() Тогда
		Для Каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
			СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, ТекущиеДанныеСтроки, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ Отказ И ТекущиеДанные.Отменен = 1 Тогда
		
		ОтмененныеСтроки = Объект.ОтмененныеЗапасы.НайтиСтроки(Новый Структура("КлючСвязиОтмененные", ТекущиеДанные.КлючСвязиОтмененные));
		Для Каждого Строка Из ОтмененныеСтроки Цикл
			Объект.ОтмененныеЗапасы.Удалить(Строка);
		КонецЦикла;
		
		ОтображатьГруппуОтмененных = Истина;
		НастроитьЭлементыОтменыТоваров();
	КонецЕсли;
	
	// ПараметрическиеСпецификации
	ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.РеквизитыПараметрическихСпецификаций, ТекущиеДанные); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередУдалениемЗавершение(Результат, ДанныеНабора) Экспорт
	
	Если Результат=Неопределено ИЛИ Результат=КодВозвратаДиалога.Отмена Тогда
		Возврат
	КонецЕсли;
	
	СтрокиНабора = Объект.Запасы.НайтиСтроки(ДанныеНабора);
	Если СтрокиНабора.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	СтрокаТабличнойЧасти = СтрокиНабора[0];
	
	Если Результат=КодВозвратаДиалога.Нет Тогда
		
		РедактироватьСоставНабора(СтрокаТабличнойЧасти);
		
	ИначеЕсли Результат=КодВозвратаДиалога.Да Тогда
		
		НаборыКлиент.УдалитьСтрокиНабора(СтрокаТабличнойЧасти.НоменклатураНабора, СтрокаТабличнойЧасти.ХарактеристикаНабора, ТекущийВариантКП, Объект.Запасы, Объект.ДобавленныеНаборы);
		
		Модифицированность = Истина;
		ВыполнитьДействияПослеУдаленияСтрокиЗапасов();
		
	ИначеЕсли Результат="УдалитьОдин" Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.НоменклатураНабора);
		СтруктураОтбора.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.ХарактеристикаНабора);
		СтруктураОтбора.Вставить("НомерВариантаКП", ТекущийВариантКП);
		ДобавленныеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОтбора);
		СтрокиНабора = Объект.Запасы.НайтиСтроки(СтруктураОтбора);
		Если ДобавленныеСтроки.Количество()=0 ИЛИ ДобавленныеСтроки[0].Количество<=1 Тогда
			Для каждого Стр Из СтрокиНабора Цикл
				Объект.Запасы.Удалить(Стр);
			КонецЦикла;
			Для каждого Стр Из ДобавленныеСтроки Цикл
				Объект.ДобавленныеСтроки.Удалить(Стр);
			КонецЦикла;
			Возврат;
		КонецЕсли;
		СтароеКоличество = ДобавленныеСтроки[0].Количество;
		ДобавленныеСтроки[0].Количество = СтароеКоличество-1;
		НаборыКлиентСервер.УдалитьЭкземплярНабора(СтрокаТабличнойЧасти.НоменклатураНабора, СтрокаТабличнойЧасти.ХарактеристикаНабора, ТекущийВариантКП, Объект.Запасы, , СтароеКоличество);
		СтрокиНабора = Объект.Запасы.НайтиСтроки(СтруктураОтбора);
		Для каждого Стр Из СтрокиНабора Цикл
			РассчитатьСуммуВСтрокеТабличнойЧасти(, Стр);
		КонецЦикла;
		
		Модифицированность = Истина;
		ВыполнитьДействияПослеУдаленияСтрокиЗапасов();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПослеУдаленияСтрокиЗапасов()
	
	ЗаполнитьНомераСтрокТаблицаЗапасы(Объект.Запасы, ТекущийВариантКП, ЗапасыКоличествоСтрок);
	
	РассчитатьОбъемИВесЗаказа();
	ОбновитьИтогиКлиент();
	ПересчитатьПлатежныйКалендарь();
	ОчиститьКалькуляцию();
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	
	// АвтоматическиеСкидки.
	СброситьФлагСкидкиРассчитаныКлиент("УдалениеСтроки");
	
	Если РежимОстаткиИРезервы Тогда
		Если ЗначениеЗаполнено(НоменклатураУдаленнойСтроки) Тогда
			ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,НоменклатураУдаленнойСтроки);
		Иначе
			ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыДатаОтгрузкиПриИзменении(Элемент)
	
	// Наборы
	ТекСтр = Элементы.Запасы.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтр.НоменклатураНабора) Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("НоменклатураНабора", ТекСтр.НоменклатураНабора);
		СтруктураОтбора.Вставить("ХарактеристикаНабора", ТекСтр.ХарактеристикаНабора);
		СтруктураОтбора.Вставить("НомерВариантаКП", ТекущийВариантКП);
		Строки = Объект.Запасы.НайтиСтроки(СтруктураОтбора);
		Для каждого Стр Из Строки Цикл
			Стр.ДатаОтгрузки = ТекСтр.ДатаОтгрузки;
		КонецЦикла; 
	КонецЕсли; 
	// Конец Наборы
	
	ПроверитьОповеститьОДатеОтгрузки(ТекСтр.ДатаОтгрузки, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Для каждого ИдентификаторСтроки Из Элементы.Запасы.ВыделенныеСтроки Цикл
		Строка = Объект.Запасы.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ЗначениеЗаполнено(Строка.НоменклатураНабора) Тогда
			Выполнение = Ложь;
			Возврат;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	// Наборы
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ХарактеристикиНабора(СтрокаТабличнойЧасти.Номенклатура, Текст);
	КонецЕсли;
	// Конец Наборы
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	// Наборы
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		СтандартнаяОбработка = Ложь;
		СтруктураОткрытия = Новый Структура;
		СтруктураОткрытия.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураОткрытия.Вставить("РежимВыбора", Истина);
		СтруктураОткрытия.Вставить("ЗакрыватьПриВыборе", Истина);
		ОткрытьФорму("РегистрСведений.СоставНаборов.Форма.ФормаРедактированияСостава", СтруктураОткрытия, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	КонецЕсли;                              
	// Конец Наборы
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСуммаСкидкиНаценкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	ПараметрыРасчета = Новый Структура("РассчитатьПроцентСкидки, СброситьФлагСкидкиРассчитаны", Истина, Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбновитьИтогиКлиент();
	ПересчитатьПлатежныйКалендарь();
	ОчиститьКалькуляцию();
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаРезервПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Компания);
	СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", 	СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("ИспользоватьХарактеристики", СтрокаТабличнойЧасти.ИспользоватьХарактеристики);
	СтруктураДанные.Вставить("ИспользоватьПартии", СтрокаТабличнойЧасти.ИспользоватьПартии);
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные);
	ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(СтрокаТабличнойЧасти.НомерСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаРезервТЧПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат 
	КонецЕсли;
	
	Если КэшЗначений.Свойство("ИспользоватьМинимальныеЦены")
		И КэшЗначений.ИспользоватьМинимальныеЦены Тогда
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Компания);
		СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
		СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу") Тогда
			СтруктураДанные.Вставить("ВключаяШаблоны", Истина);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
			
			СтруктураДанные.Вставить("ДатаОбработки", 		Объект.Дата);
			СтруктураДанные.Вставить("ВалютаДокумента", 	Объект.ВалютаДокумента);
			СтруктураДанные.Вставить("СуммаВключаетНДС",	Объект.СуммаВключаетНДС);
			
			СтруктураДанные.Вставить("СтавкаНДС", 	СтрокаТабличнойЧасти.СтавкаНДС);
			СтруктураДанные.Вставить("Цена", 		СтрокаТабличнойЧасти.Цена);
			
			СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
			СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);		
			
		КонецЕсли;
		
		РезервированиеЗапасов = ?(КэшЗначений.Свойство("РезервированиеЗапасов"), КэшЗначений.РезервированиеЗапасов, Ложь);	
		ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, СтрокаТабличнойЧасти, СтруктураДанные, , НЕ РезервированиеЗапасов);	
		
		СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
		
		Если СтруктураДанные.Свойство("МинимальнаяЦена") 
			И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
			СтрокаТабличнойЧасти.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;				
		КонецЕсли; 
		
		РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", СтрокаТабличнойЧасти);		
		
	КонецЕсли;
	
	ОбновитьИтогиКлиент();
	ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(СтрокаТабличнойЧасти.НомерСтроки);
	СброситьФлагСкидкиРассчитаныКлиент("ИзменениеВторостепенногоРеквизита", "СтруктурнаяЕдиницаРезерв");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(НомерСтроки)
	ДополнительныеСвойства = Новый Структура("НомерСтроки", НомерСтроки);
	СерииНоменклатурыУНФ.ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(Объект,, ДополнительныеСвойства);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаРезервОчистка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Компания);
	СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", 	СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("ИспользоватьХарактеристики", СтрокаТабличнойЧасти.ИспользоватьХарактеристики);
	СтруктураДанные.Вставить("ИспользоватьПартии", СтрокаТабличнойЧасти.ИспользоватьПартии);
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРезервДляРежимаОстаткиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	НоменклатураВДокументахКлиент.КонтрольЗначенияРезерваВТекущейСтроке(СтрокаТабличнойЧасти, "ПриИзмененииРезерваПроверитьКоличество", Объект);
	
	Если РежимОстаткиИРезервы Тогда
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Компания);
		СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
		СтруктураДанные.Вставить("Партия", 	СтрокаТабличнойЧасти.Партия);
		СтруктураДанные.Вставить("ИспользоватьХарактеристики", СтрокаТабличнойЧасти.ИспользоватьХарактеристики);
		СтруктураДанные.Вставить("ИспользоватьПартии", СтрокаТабличнойЧасти.ИспользоватьПартии);
		
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаРезервОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Тогда Возврат КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") ИЛИ ВыбранноеЗначение = "РаспределитьПоРезервам" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтруктураПараметров = Новый Структура("ВыбранноеПоле", "ЗапасыОстатокОбщий");
		
		ЭлементСпискаЗначений = Новый СписокЗначений;
		ЭлементСпискаЗначений.Добавить(ВыбранноеЗначение);
		
		ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти(ЭлементСпискаЗначений[0], СтруктураПараметров);
		
	ИначеЕсли ВыбранноеЗначение = "ОтчетОстаткиНаСкладах" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда Возврат КонецЕсли;
		
		Вариант = РаботаСФормойДокументаКлиентСервер.ВариантОтчета("ОстаткиТоваров", "ПоМестамХранения");
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
		ОтборРасшифровки = Новый Соответствие;
		ОтборРасшифровки.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
		ОтборРасшифровки.Вставить("Характеристика", ТекущиеДанные.Характеристика);
		ОтборРасшифровки.Вставить("СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы", ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Склад"));
		ПараметрыОткрытия.Вставить("ОтборРасшифровки", ОтборРасшифровки);
		
		ВариантыОтчетовКлиент.ОткрытьФормуОтчета(, Вариант, ПараметрыОткрытия);
		
	Иначе
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Компания);
		СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
		СтруктураДанные.Вставить("Партия", 	СтрокаТабличнойЧасти.Партия);
		СтруктураДанные.Вставить("ИспользоватьХарактеристики", СтрокаТабличнойЧасти.ИспользоватьХарактеристики);
		СтруктураДанные.Вставить("ИспользоватьПартии", СтрокаТабличнойЧасти.ИспользоватьПартии);
		
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыОбновить(Команда)
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПараметрыСпецификацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуРедактированияПараметровСпецификации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияПараметровСпецификации()
	
	ТекущаяСтрока = Элементы.Запасы.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Спецификация) Тогда
		Возврат;
	КонецЕсли;
	Если ТекущаяСтрока.КлючСвязи=0 Тогда
		ИмяТабличнойЧасти = "Запасы";
		ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект, ТекущаяСтрока); 
	КонецЕсли; 
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("КлючСвязи", ТекущаяСтрока.КлючСвязи);
	СтрокиРеквизиты = Объект.РеквизитыПараметрическихСпецификаций.НайтиСтроки(СтруктураОткрытия);
	СтруктураОткрытия.Вставить("Спецификация", ТекущаяСтрока.Спецификация);
	СтруктураОткрытия.Вставить("Реквизиты", Новый Массив);
	Для каждого СтрокаТабличнойЧасти Из СтрокиРеквизиты Цикл
		СтруктураСтроки = Новый Структура("Свойство, Значение");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТабличнойЧасти);
		СтруктураОткрытия.Реквизиты.Добавить(СтруктураСтроки);
	КонецЦикла;
	Оповещение = Новый ОписаниеОповещения("ЗапасыПараметрыСпецификацииЗавершениеВыбора", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.Спецификации.Форма.ДополнительныеРеквизитыСпецификации", СтруктураОткрытия, , , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
 
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПараметрыСпецификацииЗавершениеВыбора(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение=Неопределено Тогда
		Возврат;
	КонецЕсли; 	
	
	ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.РеквизитыПараметрическихСпецификаций, ВыбранноеЗначение); 
	Для каждого ДанныеДопРеквизитов Из ВыбранноеЗначение.Реквизиты Цикл
		НоваяСтрока = Объект.РеквизитыПараметрическихСпецификаций.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДопРеквизитов);
		НоваяСтрока.КлючСвязи = ВыбранноеЗначение.КлючСвязи;
	КонецЦикла;
	
	ОбновитьОписанияДопРеквизитов(ЭтотОбъект, ВыбранноеЗначение.КлючСвязи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПричинаОтменыПриИзменении(Элемент)
	
	ТекущийЗапас = Элементы.Запасы.ТекущиеДанные;
	Если ТекущийЗапас = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущийЗапас.Отменен = 0 Тогда
		ОтменитьВернутьЗапасы(ТекущийЗапас);
	КонецЕсли;
	
	ТекущийЗапас.ПричинаОтменыДатаЗапрета = Строка(ТекущийЗапас.ПричинаОтмены);
	
	СвязанныеСтроки = Объект.ОтмененныеЗапасы.НайтиСтроки(Новый Структура("КлючСвязиОтмененные", ТекущийЗапас.КлючСвязиОтмененные));
	СвязаннаяСтрока = СвязанныеСтроки[0];
	
	СвязаннаяСтрока.ПричинаОтмены = ТекущийЗапас.ПричинаОтмены;
	ВыбраннаяПричинаОтменыЗапаса = ТекущийЗапас.ПричинаОтмены;
	Модифицированность = Истина;
	ОтображатьГруппуОтмененных = Истина;
	
	НастроитьЭлементыОтменыТоваров();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалыЗаказчика

&НаКлиенте
Процедура МатериалыЗаказчикаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// ГрупповоеИзменениеСтрок
	Элемент.ТекущиеДанные.Пометка = Истина;
	// Конец ГрупповоеИзменениеСтрок

	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТабличнойЧасти.Количество = НовоеКоличествоПриИзмененииНоменклатуры;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.МатериалыЗаказчика.ТекущиеДанные;
		
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьСбросКоличества И СбрасыватьКоличество
		И СтрокаТабличнойЧасти.Количество <> НовоеКоличествоПриИзмененииНоменклатуры Тогда
		
		ДопПараметр = Новый Структура();
		ДопПараметр.Вставить("Элемент", Элемент);
		ДопПараметр.Вставить("Количество", СтрокаТабличнойЧасти.Количество);
		Оповещение = Новый ОписаниеОповещения("МатериалыЗаказчикаПодтверждениеСбросаКоличестваЗавершение",
			ЭтотОбъект, ДопПараметр);
		ОткрытьФорму("ОбщаяФорма.ПодтверждениеСбросаКоличества", , , , , , Оповещение);
		
	Иначе
		
		Если СбрасыватьКоличество Тогда
			НовоеКоличество = НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
		МатериалыЗаказчикаНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество);
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаПодтверждениеСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗапрашиватьСбросКоличества = Результат.ЗапрашиватьСбросКоличества;
		Если НЕ ЗапрашиватьСбросКоличества Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		КонецЕсли;
		Если Результат.СбрасыватьКоличество Тогда
			НовоеКоличество = Результат.НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = ДополнительныеПараметры.Количество;
		КонецЕсли;
	Иначе
		НовоеКоличество = ДополнительныеПараметры.Количество;
	КонецЕсли;
	
	МатериалыЗаказчикаНоменклатураПриИзмененииПродолжить(ДополнительныеПараметры.Элемент, НовоеКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество)

	СтрокаТабличнойЧасти = Элементы.МатериалыЗаказчика.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Компания);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);   
	
	РезервированиеЗапасов = ?(КэшЗначений.Свойство("РезервированиеЗапасов"), КэшЗначений.РезервированиеЗапасов, Ложь);
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, СтрокаТабличнойЧасти, СтруктураДанные, , НЕ РезервированиеЗапасов);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = НовоеКоличество;
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если СтруктураДанные.ИспользоватьХарактеристики Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
			СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
		КонецЕсли;
	КонецЕсли;
	
	ПодборНоменклатурыИзСписка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти = Элементы.МатериалыЗаказчикаНоменклатураПриИзменении.ТекущиеДанные;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтотОбъект,
				"ЗаказПокупателя", НастройкиФормыВыбораНоменклатуры, Истина, "МатериалыЗаказчика",
				ВыбранноеЗначение.СтруктураНастроек);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтотОбъект, "МатериалыЗаказчика");
		КонецЕсли;
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПлатежныйКалендарь

&НаКлиенте
Процедура ПлатежныйКалендарьПередУдалением(Элемент, Отказ)
	
	Если Объект.ПлатежныйКалендарь.Количество() = 1 Тогда
		Объект.ЗапланироватьОплату = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныйКалендарьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не НоваяСтрока Тогда
		Возврат;
	КонецЕсли;
		
	Объект.ЗапланироватьОплату = Истина;
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	ПроцентОплатыИтог = Объект.ПлатежныйКалендарь.Итог("ПроцентОплаты");
	
	Если ПроцентОплатыИтог > 100 Тогда
		ТекущаяСтрока.ПроцентОплаты = ТекущаяСтрока.ПроцентОплаты - (ПроцентОплатыИтог - 100);
	КонецЕсли;
	
	ОбновитьИтогиКлиент();
	
	ТекущаяСтрока.СуммаОплаты = Окр(ИтогВсего * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
	ТекущаяСтрока.СуммаНДСОплаты = Окр(ИтогСуммаНДС * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
		
	Если Объект.ПлатежныйКалендарь.Итог("ПроцентОплаты") = 100 И Объект.ПлатежныйКалендарь.Итог("СуммаОплаты") <> ИтогВсего Тогда
		ОбработатьИтогиПлатежныйКалендарь();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокПлатежныйКалендарьПроцентОплатыПриИзменении(Элемент)
	
	Если Элементы.РедактироватьСписком.Пометка Тогда
		ТекущаяСтрока = Элементы.СписокПлатежныйКалендарь.ТекущиеДанные;
	Иначе
		ТекущаяСтрока = Объект.ПлатежныйКалендарь[0];
	КонецЕсли;
	ПроцентОплатыИтог = Объект.ПлатежныйКалендарь.Итог("ПроцентОплаты");
	
	Если ПроцентОплатыИтог > 100 Тогда
		ТекущаяСтрока.ПроцентОплаты = ТекущаяСтрока.ПроцентОплаты - (ПроцентОплатыИтог - 100);
	КонецЕсли;
	
	ОбновитьИтогиКлиент();
	
	ТекущаяСтрока.СуммаОплаты = Окр(ИтогВсего * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
	ТекущаяСтрока.СуммаНДСОплаты = Окр(ИтогСуммаНДС * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
	
	Если Объект.ПлатежныйКалендарь.Итог("ПроцентОплаты") = 100 И Объект.ПлатежныйКалендарь.Итог("СуммаОплаты") <> ИтогВсего Тогда
		ОбработатьИтогиПлатежныйКалендарь();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПлатежныйКалендарьСуммаОплатыПриИзменении(Элемент)
	
	Если Элементы.РедактироватьСписком.Пометка Тогда
		ТекущаяСтрока = Элементы.СписокПлатежныйКалендарь.ТекущиеДанные;
	Иначе
		ТекущаяСтрока = Объект.ПлатежныйКалендарь[0];
	КонецЕсли;
	
	ОбновитьИтогиКлиент();
	
	ПлатежныйКалендарьИтог = Объект.ПлатежныйКалендарь.Итог("СуммаОплаты");
	
	Если ПлатежныйКалендарьИтог > ИтогВсего Тогда
		ТекущаяСтрока.СуммаОплаты = ТекущаяСтрока.СуммаОплаты - (ПлатежныйКалендарьИтог - ИтогВсего);
	КонецЕсли;
	
	ТекущаяСтрока.ПроцентОплаты = ?(ИтогВсего = 0, 0, Окр(ТекущаяСтрока.СуммаОплаты / ИтогВсего * 100, 2, 1));
	ТекущаяСтрока.СуммаНДСОплаты = Окр(ИтогСуммаНДС * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
	
	Если Объект.ПлатежныйКалендарь.Итог("ПроцентОплаты") = 100 И Объект.ПлатежныйКалендарь.Итог("СуммаОплаты") <> ИтогВсего Тогда
		ОбработатьИтогиПлатежныйКалендарь();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПлатежныйКалендарьСуммаНДСОплатыПриИзменении(Элемент)
	
	Если Элементы.РедактироватьСписком.Пометка Тогда
		ТекущаяСтрока = Элементы.СписокПлатежныйКалендарь.ТекущиеДанные;
	Иначе
		ТекущаяСтрока = Объект.ПлатежныйКалендарь[0];
	КонецЕсли;
	
	ЗапасыИтог = Объект.Запасы.Итог("СуммаНДС");
	ПлатежныйКалендарьИтог = Объект.ПлатежныйКалендарь.Итог("СуммаНДСОплаты");
	
	Если ПлатежныйКалендарьИтог > ЗапасыИтог Тогда
		ТекущаяСтрока.СуммаНДСОплаты = ТекущаяСтрока.СуммаНДСОплаты - (ПлатежныйКалендарьИтог - ЗапасыИтог);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьИтогиПлатежныйКалендарь()
	
	ТаблицаРаспределения = Объект.ПлатежныйКалендарь.Выгрузить();
	РасчетыПроведениеДокументов.РаспределитьСуммуПоКолонкеТаблицы(ИтогВсего, ТаблицаРаспределения, "СуммаОплаты",
		"ПроцентОплаты");
	Объект.ПлатежныйКалендарь.Загрузить(ТаблицаРаспределения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредоплата

&НаКлиенте
Процедура ПредоплатаПриИзменении(Элемент)
	
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокОплаты(Объект.СпособЗачетаПредоплаты, Объект.Предоплата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПередУдалением(Элемент, Отказ)
	Если Не Отказ И Элемент.ТекущиеДанные.ОплатаБонусами Тогда
		Для Каждого СтрокаЗапаса Из Объект.Запасы Цикл
			СтрокаЗапаса.СуммаСкидкиОплатыБонусом = 0;
			ПараметрыРасчета = Новый Структура("РассчитатьСуммуСкидки, СброситьФлагСкидкиРассчитаны", Истина, Истина);
			РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", СтрокаЗапаса, ПараметрыРасчета);
		КонецЦикла;
		ОбновитьИтогиКлиент();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	СуммаРасчетов = Объект.Предоплата.Итог("СуммаРасчетов");
	
	Для Каждого СтрокаПредоплаты Из Объект.Предоплата Цикл
		Если СтрокаПредоплаты.ОплатаБонусами Тогда
			СуммаРасчетов = СуммаРасчетов - СтрокаПредоплаты.СуммаРасчетов; // Бонусы уже учтены в сумме документа
		КонецЕсли;
	КонецЦикла;
	
	РасчетыРаботаСФормамиВызовСервера.ВыполнитьКонтрольСуммыОплатыДобавлениеСтроки(
		СуммаРасчетов, ИтогВсего, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПредоплатаПриОкончанииРедактированияНаСервере(Элементы.Предоплата.ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура ПредоплатаПриОкончанииРедактированияНаСервере(ИдентификаторСтроки)
	
	РасчетыРаботаСФормамиВызовСервера.ВыполнитьКонтрольСуммыОплатыВСтроке(ЭтотОбъект, ИдентификаторСтроки, ИтогВсего);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтмененныеЗапасы

&НаКлиенте
Процедура ОтмененныеЗапасыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
	ТекущийЗапас = Элементы.ОтмененныеЗапасы.ТекущиеДанные;
	Если ТекущийЗапас = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийЗапас.ПричинаОтмены = ВыбранноеЗначение;
	ТекущийЗапас.ПричинаОтменыДатаЗапрета = Строка(ВыбранноеЗначение);
	ВыбраннаяПричинаОтменыЗапаса = ВыбранноеЗначение;
	
	Если НЕ ТекущийЗапас.Редактируется Тогда
		Модифицированность = Истина;
		НастроитьЭлементыОтменыТоваров();
		Возврат;
	КонецЕсли;
	
	ИндексОтмененнегоЗапаса = Объект.Запасы.НайтиСтроки(Новый Структура("КлючСвязиОтмененные", ТекущийЗапас.КлючСвязиОтмененные));
	
	Если ИндексОтмененнегоЗапаса.Количество() = 0 Тогда
		Модифицированность = Истина;
		НастроитьЭлементыОтменыТоваров();
		Возврат;
	КонецЕсли;
	
	Для Каждого Запас Из ИндексОтмененнегоЗапаса Цикл
		Запас.ПричинаОтмены = ВыбраннаяПричинаОтменыЗапаса;
		Запас.ПричинаОтменыДатаЗапрета = ВыбраннаяПричинаОтменыЗапаса;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтмененныеЗапасыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент = Элементы.ОтмененныеЗапасыВернутьТовар Тогда
		
		СтрокаТабличнойЧасти = Элементы.ОтмененныеЗапасы.ТекущиеДанные; 
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ОбработатьВозвратТоваров(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ОтмененныеЗапасыПричинаОтменыДатаЗапрета Тогда
		
		СтрокаТабличнойЧасти = Элементы.ОтмененныеЗапасы.ТекущиеДанные;
		Если СтрокаТабличнойЧасти = Неопределено Тогда 
			Возврат 
		КонецЕсли;
		
		ПараметрыПричины = Новый Структура("РежимВыбора", Истина);
		ОткрытьФорму("Справочник.ПричиныОтменыЗаказа.ФормаВыбора", ПараметрыПричины, Элементы.ОтмененныеЗапасы);
			
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтмененныеЗапасыПослеУдаления(Элемент)
	РежимРедактированияЗапасов = Истина;
	НастроитьЭлементыОтменыТоваров();
КонецПроцедуры

&НаКлиенте
Процедура ОтмененныеЗапасыПричинаОтменыПриИзменении(Элемент)
	
	ТекущаяСтрокаОтмененных = Элементы.ОтмененныеЗапасы.ТекущиеДанные;
	Если ТекущаяСтрокаОтмененных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбраннаяПричинаОтменыЗапаса = ТекущаяСтрокаОтмененных.ПричинаОтмены;
	
	Если НЕ ТекущаяСтрокаОтмененных.Редактируется Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаЗапаса = Объект.Запасы.НайтиСтроки(Новый Структура("КлючСвязиОтмененные", ТекущаяСтрокаОтмененных.КлючСвязиОтмененные));
	Если СтрокаЗапаса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаЗапаса[0].ПричинаОтмены = ТекущаяСтрокаОтмененных.ПричинаОтмены;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтмененныеЗапасыПередУдалением(Элемент, Отказ)
	
	Для Каждого ИдентификаторСтроки Из Элемент.ВыделенныеСтроки Цикл
		Строка = Объект.ОтмененныеЗапасы.НайтиПоИдентификатору(ИдентификаторСтроки);
		СвязанныйЗапас = Объект.Запасы.НайтиСтроки(Новый Структура("КлючСвязиОтмененные", Строка.КлючСвязиОтмененные));
		Если СвязанныйЗапас.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОтменитьВернутьЗапасы(СвязанныйЗапас[0]);
	КонецЦикла;
	ОтображатьГруппуОтмененных = Истина;
	НастроитьЭлементыОтменыТоваров();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СборкаЗаказов
&НаКлиенте
Процедура РежимСборкиЗаказа(Команда)
	
	РежимСборки = Не РежимСборки;
	Элементы.РежимСборкиЗаказа.Пометка = РежимСборки;
	
	ЕстьСобранныеПозиции = СборкаЗаказовКлиент.ЕстьСобранныеПозиции(Объект.Запасы, ТекущийВариантКП);
	
	СборкаЗаказовКлиент.УстановитьВидимостьЭлементовФормыСборкиЗаказа(ЭтаФорма);
	
	Если РежимСборки Тогда
		Для Каждого СтрокаЗапасы Из Объект.Запасы Цикл
			СборкаЗаказовКлиент.РассчитатьРасхождения(ЭтаФорма, СтрокаЗапасы, Ложь);
		КонецЦикла;
		СборкаЗаказовКлиент.УстановитьОтборСобранныхПозиций(Элементы, Истина, ТекущийВариантКП);
	Иначе
		УстановитьОтборПоВариантуКП();
		Элементы.ДекорацияОтборПоРасхождениям.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры
// Конец СборкаЗаказов

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОчиститьСообщения();
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи",		РежимЗаписиДокумента.Проведение);
	ПараметрыЗаписи.Вставить("РежимПроведения",	РежимПроведенияДокумента.Неоперативный);
	ПараметрыЗаписи.Вставить("ПринудительноЗакрытьФорму", Истина);
	
	Записать(ПараметрыЗаписи);
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элементы.ФормаПровестиИЗакрыть, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКоманда(Команда)
	
	ОчиститьСообщения();
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи",		РежимЗаписиДокумента.Запись);
	
	Записать(ПараметрыЗаписи);
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элементы.ФормаЗаписать, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура Провести(Команда)
	
	ОчиститьСообщения();
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи",		РежимЗаписиДокумента.Проведение);
	ПараметрыЗаписи.Вставить("РежимПроведения",	РежимПроведенияДокумента.Неоперативный);
	
	Записать(ПараметрыЗаписи);
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элементы.ФормаПровести, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИнформациюПоКонтрагенту(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	
	ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ФормаИнформацииПоКонтрагенту", ПараметрыФормы, ЭтотОбъект);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элементы.ПоказатьИнформациюПоКонтрагенту, "Нажатие");
	
КонецПроцедуры

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект,
		Новый Структура("ТекШтрихкод", ТекШтрихкод));
	
	#Если МобильныйКлиент Тогда
	ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду", , , , , , ОбработкаЗавершения);
	#Иначе
	ПоказатьВводЗначения(ОбработкаЗавершения, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, СокрЛП(ДополнительныеПараметры.ТекШтрихкод), СокрЛП(Результат));
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) И ТипШтрихкодаПоддерживается(ТекШтрихкод) Тогда
		ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
	КонецЕсли;
	
	РассчитатьОбъемИВесЗаказа();
	ОбновитьИтогиКлиент();
	ПересчитатьПлатежныйКалендарь();
	ОчиститьКалькуляцию();
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВесЗавершение(Параметры) Экспорт
	
	СтрокаТабличнойЧасти = Параметры;
	РассчитатьСуммуВСтрокеТабличнойЧасти(, СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтотОбъект, "Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", "Запасы");
	ПодключаемоеОборудованиеУНФКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина, ДополнительныеПараметры);
	
КонецПроцедуры

// Конец ПодключаемоеОборудование

&НаКлиенте
Процедура РедактироватьСписком(Команда)
	
	Если Элементы.РедактироватьСписком.Пометка И Объект.ПлатежныйКалендарь.Количество() > 1 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьВозможностьРедактированияСпискомЗавершение", ЭтотОбъект);
		
		ПоказатьВопрос(
			ОписаниеОповещения,
			НСтр("ru='Все строки кроме первой будут удалены. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	Элементы.РедактироватьСписком.Пометка = НЕ Элементы.РедактироватьСписком.Пометка;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРезервЗаполнитьПоОстаткам(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Товары, услуги"" не заполнена!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если Объект.Проведен И ЗаказОтгружен() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьКолонкуРезервПоОстаткамЗавершение", ЭтотОбъект);
		
		ПоказатьВопрос(
			ОписаниеОповещения,
			НСтр("ru='Заказ покупателя отгружен. Продолжить заполнение?'"),
			РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьКолонкуРезервПоОстаткамНаСервере();
	
	Если Объект.СкидкиРассчитаны Тогда
		
		Если Объект.Запасы.Количество() = 0 Тогда
			Если Объект.СкидкиНаценки.Количество() > 0 Тогда
				Объект.СкидкиНаценки.Очистить();
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		РассчитатьСкидкиНаценкиКлиент();
		ОбновитьИтогиКлиент();
		ОчиститьКалькуляцию();
		ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРезервЗаполнитьПоОстаткамБезРазбиения(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Товары, услуги"" не заполнена!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКолонкуРезервПоОстаткамНаСервереБезРазбиения();

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРезервОчиститьРезерв(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Товары, услуги"" не заполнена!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Строки = Объект.Запасы.НайтиСтроки(Новый Структура("НомерВариантаКП,ТипНоменклатурыЗапас", ТекущийВариантКП, Истина));
	
	Для каждого Строка Из Строки Цикл
		Строка.Резерв = 0;
	КонецЦикла;
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОбновитьКалькуляцию(Команда)
	
	ЗаписатьИОткрытьКалькуляцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКалькуляцию(Команда)
	
	ЗаписатьИОткрытьКалькуляцию();
	
КонецПроцедуры

// ВариантыКП
&НаКлиенте
Процедура ВариантыКПВыбратьОсновным(Команда)
	
	Если Элементы.ВариантыКПВыбратьОсновным.Пометка Тогда
		Объект.ОсновнойВариантКП = 0;
	Иначе
		Объект.ОсновнойВариантКП = ТекущийВариантКП;
	КонецЕсли;
	
	ЗаполнитьВариантыКП("ВыборОсновного", Ложь);
	РассчитатьОбъемИВесЗаказа();
	ОчиститьКалькуляцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантыКПДобавить(Команда)
	
	ЗаполнитьВариантыКП("Создание");
	ОчиститьКалькуляцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантыКПСкопировать(Команда)
	
	ЗаполнитьВариантыКП("Копирование");
	ОчиститьКалькуляцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантыКПУдалить(Команда)
	
	ЗаполнитьВариантыКП("Удаление");
	ОчиститьКалькуляцию();
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПозиции(Команда)
	
	// Наборы
	ВыделенныеНаборы = Новый Массив;
	Для каждого ИдентификаторСтроки Из Элементы.Запасы.ВыделенныеСтроки Цикл
		Строка = Объект.Запасы.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ЗначениеЗаполнено(Строка.НоменклатураНабора) Тогда
			ДобавитьОписаниеНабора(ВыделенныеНаборы, Строка.НоменклатураНабора, Строка.ХарактеристикаНабора, Строка.НомерВариантаКП); 
		КонецЕсли; 
	КонецЦикла;
	Для каждого ОписаниеНабора Из ВыделенныеНаборы Цикл
		СтрокиСостава = Объект.Запасы.НайтиСтроки(ОписаниеНабора);
		Для каждого СтрокаСостава Из СтрокиСостава Цикл
			ИдентификаторСтроки = СтрокаСостава.ПолучитьИдентификатор();
			Если Элементы.Запасы.ВыделенныеСтроки.Найти(ИдентификаторСтроки)=Неопределено Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'В группу можно добавить только набор целиком'"));
				Возврат;
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	// Конец Наборы
	
	ЗапасыИспользуетсяГруппировка = Истина;
	
	Строки = Объект.Запасы.НайтиСтроки(Новый Структура("ЭтоРазделитель", Истина));
	
	Строка = Объект.Запасы.Добавить();
	Строка.НомерВариантаКП = ТекущийВариантКП;
	Строка.Номенклатура = СтрШаблон(НСтр("ru='Группа %1'"), Строки.Количество() + 1);
	Строка.ЭтоРазделитель = Истина;
	Строка.НомерКартинки = 1;
	Строка.НомерВариантаКП = ТекущийВариантКП;
	
	Если Элементы.Запасы.ВыделенныеСтроки.Количество() > 1 Тогда
		Для каждого ИдентификаторСтроки Из Элементы.Запасы.ВыделенныеСтроки Цикл
			Строка = Объект.Запасы.НайтиПоИдентификатору(ИдентификаторСтроки);
			Объект.Запасы.Сдвинуть(Объект.Запасы.Индекс(Строка), Объект.Запасы.Количество() - Строка.НомерСтроки);
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьУпорядочиваниеСтрокТаблицаЗапасы();
	ОбновитьИтогиКлиент();
	
	Элементы.Запасы.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
	Элементы.Запасы.ВыделенныеСтроки.Очистить();
	Элементы.Запасы.ВыделенныеСтроки.Добавить(Строка.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПереместитьВверхСтрокуКП(Команда)
	
	ПереместитьСтрокуТаблицы(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПереместитьВнизСтрокуКП(Команда)
	
	ПереместитьСтрокуТаблицы(1);
	
КонецПроцедуры

// Перемещает выделенные в таблице строки на одну позицию вверх/вниз.
//
// Параметры:
//  Сдвиг	 - Число [-1;1] - Задает направление перемещения строк.
//                            Положительное значение означает, что строка будет передвинута ближе к концу таблицы (вниз),
//                            отрицательное - ближе к началу (вверх).
//
&НаСервере
Процедура ПереместитьСтрокуТаблицы(Направление)
	
	Если Элементы.Запасы.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Направление > 0 Тогда
		КрайняяСтрокаИдентификатор = Элементы.Запасы.ВыделенныеСтроки[Элементы.Запасы.ВыделенныеСтроки.ВГраница()];
	Иначе
		КрайняяСтрокаИдентификатор = Элементы.Запасы.ВыделенныеСтроки[0];
	КонецЕсли;
	КрайняяСтрока = Объект.Запасы.НайтиПоИдентификатору(КрайняяСтрокаИдентификатор);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерВариантаКП", ТекущийВариантКП);
	СтруктураПоиска.Вставить("НомерСтрокиВнутренний", КрайняяСтрока.НомерСтрокиВнутренний + Направление);
	Строки = Объект.Запасы.НайтиСтроки(СтруктураПоиска);
	СоседняяСтрока = Неопределено;
	Если Строки.Количество() <> 0 Тогда
		СоседняяСтрока = Строки[0];
	КонецЕсли;
	
	Если СоседняяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Направление > 0 Тогда
		Итератор = Элементы.Запасы.ВыделенныеСтроки.ВГраница();
		Пока Итератор >= 0 Цикл
			ИдентификаторСтроки = Элементы.Запасы.ВыделенныеСтроки[Итератор];
			Строка = Объект.Запасы.НайтиПоИдентификатору(ИдентификаторСтроки);
			Объект.Запасы.Сдвинуть(Объект.Запасы.Индекс(Строка), СоседняяСтрока.НомерСтроки - Строка.НомерСтроки);
			Итератор = Итератор - 1;
		КонецЦикла;
	Иначе
		Для каждого ИдентификаторСтроки Из Элементы.Запасы.ВыделенныеСтроки Цикл
			Строка = Объект.Запасы.НайтиПоИдентификатору(ИдентификаторСтроки);
			Объект.Запасы.Сдвинуть(Объект.Запасы.Индекс(Строка), СоседняяСтрока.НомерСтроки - Строка.НомерСтроки);
		КонецЦикла;
	КонецЕсли;
	
	УстановитьОтборПоВариантуКП();
	
КонецПроцедуры

// Конец ВариантыКП

&НаКлиенте
Процедура ШапкаТабличнаяЧасть(Команда)
	
	ОткрытьФормуНастройки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаФормы(Команда)
	
	ОткрытьФормуНастройки(Истина);
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элементы.ФормаНастройкаФормы, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройки(ПередаватьВидДокумента)
	
	ЗаполнениеОбъектовУНФКлиент.ЗаполнитьПустыеПоложения(Объект, "ПоложениеДатыОтгрузки, ПоложениеСклада");
	
	СтруктураПараметров = Новый Структура;
	
	Если ПередаватьВидДокумента Тогда
		СтруктураПараметров.Вставить("ВидДокумента", НСтр("ru = 'заказ покупателя'"));
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ПоложениеДатыОтгрузкиВЗаказеПокупателя", Объект.ПоложениеДатыОтгрузки);
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу") Тогда
		СтруктураПараметров.Вставить("ПоложениеСкладаВДокументахОтгрузки", Объект.ПоложениеСклада);
	КонецЕсли; 
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	СтруктураПараметров.Вставить("Доступность", Новый Структура("ПоложениеСкладаВДокументахОтгрузки", 
		(РезервированиеЗапасов ИЛИ Объект.УчетПотребностиПоСкладам) И НЕ РежимОстаткиИРезервы));
	ТекстУсловий = "";	
	Если РежимОстаткиИРезервы Тогда
		ТекстУсловий = НСтр("ru='При включенном режиме Остатки и резервы склад всегда указывается в табличной части.'");
	ИначеЕсли НЕ (РезервированиеЗапасов И Объект.УчетПотребностиПоСкладам) Тогда
		ТекстУсловий = НСтр("ru='Для возможности выбора положения склада включите опцию <a href=""Резервирование запасов"">Резервирование запасов</a> или <a href=""Учет потребности по складам"">Учет потребности по складам</a>. Включение опции будет учтено при создании нового документа.'");
	КонецЕсли;
	СтруктураПараметров.Вставить("ДополнениеПодсказкиПоложениеСклада", ТекстУсловий);
		
	СтруктураПараметров.Вставить("ПоказыватьКолонкуСодержаниеВЗаказеПокупателяЗапасы",
		ПоказыватьКолонкуСодержаниеВЗаказеПокупателяЗапасы); 
	СтруктураПараметров.Вставить("ПоказыватьКолонкуВесВЗаказеПокупателя",
		ПоказыватьКолонкуВесВЗаказеПокупателя); 
	СтруктураПараметров.Вставить("ПоказыватьКолонкуОбъемВЗаказеПокупателя",
		ПоказыватьКолонкуОбъемВЗаказеПокупателя); 

	Заголовки = Новый Структура("ПоказыватьКолонкуСодержаниеВЗаказеПокупателяЗапасы", 
		НСтр("ru = 'Показывать колонку ""Содержание""'"));

	СтруктураПараметров.Вставить("Заголовки", Заголовки);
			
	ОткрытьФорму("ОбщаяФорма.ШапкаТабличнаяЧасть", СтруктураПараметров, , , , , 
		Новый ОписаниеОповещения("ШапкаТабличнаяЧастьЗавершение", ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
Процедура ШапкаТабличнаяЧастьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.БылиВнесеныИзменения Тогда
		
		// Положение даты отгрузки
		Если Объект.ПоложениеДатыОтгрузки <> Результат.ПоложениеДатыОтгрузкиВЗаказеПокупателя Тогда
			Объект.ПоложениеДатыОтгрузки = Результат.ПоложениеДатыОтгрузкиВЗаказеПокупателя;
			ЗаполнениеОбъектовУНФКлиент.ОбработатьИзменениеПоложения(Объект, "Запасы", "ДатаОтгрузки", 
				"ПоложениеДатыОтгрузки");
			
			Если Объект.ПоложениеДатыОтгрузки = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
				ПроверитьОповеститьОДатеОтгрузки(Объект.ДатаОтгрузки, Объект.Дата);
			КонецЕсли;
			
		КонецЕсли;
		
		ОбновитьФорму = Ложь;
		Если Результат.Свойство("ПоказыватьКолонкуСодержаниеВЗаказеПокупателяЗапасы") Тогда
			ПоказыватьКолонкуСодержаниеВЗаказеПокупателяЗапасы = 
				Результат.ПоказыватьКолонкуСодержаниеВЗаказеПокупателяЗапасы;
			ОбновитьФорму = Истина;
		КонецЕсли;		
		
		Если Результат.Свойство("ПоказыватьКолонкуВесВЗаказеПокупателя") Тогда
			ПоказыватьКолонкуВесВЗаказеПокупателя = Результат.ПоказыватьКолонкуВесВЗаказеПокупателя;
			ОбновитьФорму = Истина;
		КонецЕсли;

		Если Результат.Свойство("ПоказыватьКолонкуОбъемВЗаказеПокупателя") Тогда
			ПоказыватьКолонкуОбъемВЗаказеПокупателя = Результат.ПоказыватьКолонкуОбъемВЗаказеПокупателя;
			ОбновитьФорму = Истина;
		КонецЕсли;
		
		Если ОбновитьФорму Тогда
			УстановитьВидимостьЭлементовПоНастройкеПользователя(ЭтотОбъект);
		КонецЕсли;
								
		ШапкаТабличнаяЧастьЗавершениеНаСервере(Результат);
		
		УправлениеФормой();
		
		// ГрупповоеИзменениеСтрок
		ЗаполнитьСписокДействий();
		// Конец ГрупповоеИзменениеСтрок
						
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.БылиИзмененыПерсональныеНастройки Тогда
		НастройкиКоличества = ПолучитьНастройкиИзмененияКоличества();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиКоличества);
	КонецЕсли;
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ШапкаТабличнаяЧастьЗавершениеНаСервере(Знач Результат)
	
	// Положение склада
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу") Тогда
		Если Объект.ПоложениеСклада <> Результат.ПоложениеСкладаВДокументахОтгрузки Тогда
			Объект.ПоложениеСклада = Результат.ПоложениеСкладаВДокументахОтгрузки;
			Если НЕ РежимОстаткиИРезервы Тогда
				Если Результат.ПоложениеСкладаВДокументахОтгрузки <> ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
					Объект.СтруктурнаяЕдиницаРезерв = ЗаполнениеОбъектовУНФ.ЗначениеДляШапки(Объект.Запасы, "СтруктурнаяЕдиницаРезерв");
					Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаРезерв) Тогда
						Объект.СтруктурнаяЕдиницаРезерв = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
							Пользователи.ТекущийПользователь(), 
							"ОсновнойСклад");
					КонецЕсли; 
				КонецЕсли; 
				Для каждого Строка Из Объект.Запасы Цикл
					Если НЕ Строка.ТипНоменклатурыЗапас Тогда
						Продолжить;
					КонецЕсли; 
					Строка.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
				КонецЦикла;
			КонецЕсли;
			
			ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов();
			
		КонецЕсли; 
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСбросаКоличества(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтрокаПоиска", НСтр("ru = 'Сбрасывать количество при изменении номенклатуры'"));
	Оповещение = Новый ОписаниеОповещения("НастройкаСбросаКоличестваЗавершение", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.НастройкиПользователей.Форма.ФормаНастройкиПользователя", СтруктураПараметров, , , , ,
		Оповещение);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, 
		Элементы.ЗапасыКонтекстноеМенюНастройкаСбросаКоличества, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НастройкиКоличества = ПолучитьНастройкиИзмененияКоличества();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиКоличества);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьШаблоныПечатиДоговоровКонтрагентов(Команда)
	
	ШаблоныПечатиОфисныхДокументовКлиент.ОткрытьШаблоныПечатиОфисныхДокументов(
	ПредопределенноеЗначение("Перечисление.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаЗаказ"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьШаблоныПечатиКоммерческихПредложений(Команда)
	
	ШаблоныПечатиОфисныхДокументовКлиент.ОткрытьШаблоныПечатиОфисныхДокументов(
	ПредопределенноеЗначение("Перечисление.НазначенияШаблоновПечатиОфисныхДокументов.КоммерческоеПредложение"));
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОкругления(Команда)
	
	ОткрытьФорму("Обработка.ВидыСкидокНаценокРучныеИАвтоматические.Форма", Новый Структура("Округления", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСпецификации(Команда)

	Если Объект.МатериалыЗаказчика.Количество() <> 0 Тогда

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоСпецификацииЗавершение", ЭтотОбъект), НСтр(
			"ru = 'Табличная часть ""Материалы заказчика"" будет перезаполнена. Продолжить выполнение операции?'"),
			РежимДиалогаВопрос.ДаНет, 0);
		Возврат;

	КонецЕсли;

	ЗаполнитьПоСпецификацииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСпецификацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ЗаполнитьПоСпецификацииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСпецификацииФрагмент()
	
	ЗаполнитьПоСпецификацииНаСервере();
	
КонецПроцедуры // ЗаполнитьПоСпецификации()

&НаСервере
Процедура ЗаполнитьПоСпецификацииНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
	СтекСпецификацийУзлов = Новый Массив;
	Документ.ЗаполнитьМатериалыЗаказчикаПоСпецификации(СтекСпецификацийУзлов);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	ЗаполнитьНомераСтрокТаблицаЗапасы(Объект.Запасы, ТекущийВариантКП, ЗапасыКоличествоСтрок);
	ЗаполнитьСлужебныеПоляТабличнойЧасти();
	
	ДействияПослеЧтенияОбъекта();
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	// ГрупповоеИзменениеСтрок
	Для каждого СтрокаТабличнойЧасти Из Объект.МатериалыЗаказчика Цикл
		СтрокаТабличнойЧасти.Пометка = Истина;
	КонецЦикла; 
	// Конец ГрупповоеИзменениеСтрок
	
	Если РежимОстаткиИРезервы Тогда
		НоменклатураВДокументахСервер.ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧасти(Объект,,ТекущийВариантКП,, РезервированиеЗапасов);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоСпецификацииНаСервере()

&НаКлиенте
Процедура ОстаткиИРезервы(Команда)
	
	РежимОстаткиИРезервы = Не РежимОстаткиИРезервы;
	Элементы.ОстаткиИРезервы.Пометка = Не Элементы.ОстаткиИРезервы.Пометка;
	
	ОбновитьОтображениеКолонокВРазрезеЗапасов();
	
	Если СкладВШапке Тогда
		Для каждого Строка Из Объект.Запасы Цикл
			Если НЕ Строка.ТипНоменклатурыЗапас 
				Или ЗначениеЗаполнено(Строка.СтруктурнаяЕдиницаРезерв) Тогда
				Продолжить;
			КонецЕсли; 
			Строка.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
		КонецЦикла;
	КонецЕсли; 
	
	Если РежимОстаткиИРезервы Тогда
		Элементы.Запасы.ВысотаШапки = 2;
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	Иначе
		Элементы.Запасы.ВысотаШапки = 1;
		ПроверитьПоложениеСклада();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДублиСтрок(Команда)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	Если Не Элементы.ДекорацияОтборПоДублям.Видимость Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
		ПараметрыОтбора.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
		ПараметрыОтбора.Вставить("НомерВариантаКП", СтрокаТабличнойЧасти.НомерВариантаКП);
		
		НайденныеСтроки = Объект.Запасы.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() <=1 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Дубли строки не найдены.'");
			Сообщение.КлючДанных = Объект.Ссылка;
			Сообщение.Сообщить();
			Возврат
		КонецЕсли;
		
		Если Элементы.Запасы.ОтборСтрок <> Неопределено Тогда
			Элементы.Запасы.ОтборСтрок = Неопределено;
		КонецЕсли;
		
		ФиксированныеПараметрыОтбора = Новый ФиксированнаяСтруктура(ПараметрыОтбора);
		
		Элементы.ЗапасыКонтекстноеМенюПоказатьДублиСтрок.Пометка = Истина;
		
		Элементы.ДекорацияОтборПоДублям.Заголовок = ИнформацияОбОтборе(СтрокаТабличнойЧасти.НомерСтрокиПредставление);
		Элементы.ДекорацияОтборПоДублям.Видимость = Истина;
		
		Элементы.Запасы.ОтборСтрок = ФиксированныеПараметрыОтбора;
		
	Иначе
		Элементы.ЗапасыКонтекстноеМенюПоказатьДублиСтрок.Пометка = Ложь;
		Элементы.ДекорацияОтборПоДублям.Видимость = Ложь;
		УстановитьОтборПоВариантуКП();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРазбитьСтроку(Команда)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Количество в текущей строке равно нулю.'");
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Сообщить();
		Возврат
	КонецЕсли;
		
	
	ПараметрыОповещения = Новый Структура("СтрокаТабличнойЧасти, АвтоматическиеСкидкиРассчитаны", СтрокаТабличнойЧасти,
		Объект.СкидкиРассчитаны);
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуТабличнойЧастиЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	ПоказатьВводЧисла(Оповещение, СтрокаТабличнойЧасти.Количество, НСтр("ru = 'Введите количество в новой строке'"),
		15, 3);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтследитьЗаказВСервисе(Команда)
	ПараметрыЗаказа = Новый Структура;
	ПараметрыЗаказа.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыЗаказа.Вставить("ТрекНомер", Объект.ТрекНомер);
	СервисДоставкиКлиент.ОткрытьФормуОтслеживанияЗаказа(ПараметрыЗаказа);
КонецПроцедуры

&НаКлиенте
Процедура ПередатьВ1СДоставку(Команда)
	
	Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		КнопкиДиалога = Новый СписокЗначений;
		КнопкиДиалога.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Записать'"));
		КнопкиДиалога.Добавить(КодВозвратаДиалога.Отмена);
		ПараметрыДоставкиСервиса = Новый Структура;
		ПараметрыДоставкиСервиса.Вставить("ТипГрузоперевозки", 1);
		ПоказатьВопрос(
		Новый ОписаниеОповещения("ОбработатьОтветПередПередачейВСервисДоставки", ЭтотОбъект, ПараметрыДоставкиСервиса),
		НСтр("ru = 'Перед отправкой следует записать документ.'"),
		КнопкиДиалога);
	Иначе
		ПередатьВСервисДоставки(1);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередатьВ1СКурьер(Команда)
	
	Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		КнопкиДиалога = Новый СписокЗначений;
		КнопкиДиалога.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Записать'"));
		КнопкиДиалога.Добавить(КодВозвратаДиалога.Отмена);
		ПараметрыДоставкиСервиса = Новый Структура;
		ПараметрыДоставкиСервиса.Вставить("ТипГрузоперевозки", 2);
		ПоказатьВопрос(
		Новый ОписаниеОповещения("ОбработатьОтветПередПередачейВСервисДоставки", ЭтотОбъект, ПараметрыДоставкиСервиса),
		НСтр("ru = 'Перед отправкой следует записать документ.'"),
		КнопкиДиалога);
	Иначе
		ПередатьВСервисДоставки(2);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКЗаказуВ1СДоставке(Команда)
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДокументОснование", Объект.Ссылка);
	ПараметрыФормы.Вставить("ОрганизацияБизнесСети", Объект.Организация);
	ПараметрыФормы.Вставить("ТипГрузоперевозки", 1);
	ПараметрыФормы.Вставить("ИдентификаторЗаказа", ИдентификаторЗаказаИзСервиса);
	ПараметрыФормы.Вставить("РежимМастера", 2);
	СервисДоставкиКлиент.ОткрытьФормуКарточкиЗаказаНаДоставку(ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКЗаказуВ1СКурьер(Команда)
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДокументОснование", Объект.Ссылка);
	ПараметрыФормы.Вставить("ОрганизацияБизнесСети", Объект.Организация);
	ПараметрыФормы.Вставить("ТипГрузоперевозки", 2);
	ПараметрыФормы.Вставить("ИдентификаторЗаказа", ИдентификаторЗаказаИзСервиса);
	ПараметрыФормы.Вставить("РежимМастера", 2);
	СервисДоставкиКлиент.ОткрытьФормуКарточкиЗаказаНаДоставку(ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", КэшЗначений.НаборСвойств_Документ_ЗаказПокупателя);
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы, , , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСобрано(Команда)
	
	Для Каждого СтрокаЗапасы Из Объект.Запасы Цикл
		СтрокаЗапасы.КоличествоСобрано = 0;
		ЕстьСобранныеПозиции = Ложь;
		СборкаЗаказовКлиент.РассчитатьРасхождения(ЭтаФорма, СтрокаЗапасы, Ложь);
	КонецЦикла;
	
	Если РежимСборки Тогда
		СборкаЗаказовКлиент.ПереустановитьОтбор(Элементы);
	Иначе
		СборкаЗаказовКлиент.УстановитьВидимостьЭлементовФормыСборкиЗаказа(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПричинуОтмены(Команда)
	ОписаниеЗавершения = Новый ОписаниеОповещения("ОбработатьВыборПричиныОтменыОтмененные", ЭтотОбъект);
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора", Истина);
	ОткрытьФорму("Справочник.ПричиныОтменыЗаказа.ФормаВыбора",ПараметрыФормыВыбора,,,,,ОписаниеЗавершения);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьНеотгруженныеСтроки(Команда)
	
	ОписаниеЗавершения = Новый ОписаниеОповещения("ОбработатьВыборПричиныОтмены", ЭтотОбъект);
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора", Истина);
	ОткрытьФорму("Справочник.ПричиныОтменыЗаказа.ФормаВыбора",ПараметрыФормыВыбора,,,,,ОписаниеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьЗапасыВТаблицу(Команда)
	
	ВыделенныеСтроки = Элементы.ОтмененныеЗапасы.ВыделенныеСтроки;
	
	Если ТипЗнч(ВыделенныеСтроки) <> Тип("Массив") И ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		
		СтрокаТабличнойЧасти = Объект.ОтмененныеЗапасы.НайтиПоИдентификатору(Строка);
		ОбработатьВозвратТоваров(СтрокаТабличнойЧасти);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьТоварыУслуги(Команда)
	
	ВыделенныеСтроки = Элементы.Запасы.ВыделенныеСтроки;
	
	Если ТипЗнч(ВыделенныеСтроки) <> Тип("Массив") И ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьОтменуТоваров(ВыделенныеСтроки);
	НастроитьЭлементыОтменыТоваров();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбработатьИзменениеСкладаВШапкеНаСервере(СтруктураДанные = Неопределено, НоменклатураОтбора = Неопределено)
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
	Если КэшЗначений.РезервированиеЗапасов Тогда
		ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьВСервисДоставки(ТипГрузоперевозки)
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДокументОснование", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВидОперации", Объект.ВидОперации);
	ПараметрыФормы.Вставить("ОрганизацияБизнесСети", Объект.Организация);
	ПараметрыФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	СервисДоставкиКлиент.ОткрытьФормуКарточкиЗаказаНаДоставку(ПараметрыФормы);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов()
	ДополнительныеСвойства = Новый Структура("ИзменениеКлючевыхРеквизитов", Истина);
	СерииНоменклатурыУНФ.ЗаполнитьПризнакиИспользованияСерий(Объект, ДополнительныеСвойства);
КонецПроцедуры

&НаСервере
Функция ПолучитьСерииНоменклатурыИзХранилища(АдресВоВременномХранилище, КлючСтроки, ПараметрыИменаПолей)
	
	Модифицированность = Истина;
	Возврат СерииНоменклатурыУНФ.ПолучитьСерииНоменклатурыИзХранилища(Объект, АдресВоВременномХранилище, КлючСтроки,
		ПараметрыИменаПолей);
	
КонецФункции

&НаКлиенте
Функция СформироватьСтруктуруПоискаСтрокиЗапасов(ДанныеШтрихкода, ТекущийВариантКП)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
	СтруктураПоиска.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
	СтруктураПоиска.Вставить("Партия", ДанныеШтрихкода.Партия);
	СтруктураПоиска.Вставить("ЕдиницаИзмерения", ДанныеШтрихкода.ЕдиницаИзмерения);
	СтруктураПоиска.Вставить("НомерВариантаКП", ТекущийВариантКП);
	
	Если Не РежимСборки Тогда
		СтруктураПоиска.Вставить("НоменклатураНабора", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	КонецЕсли;
	
	Возврат СтруктураПоиска;
	
КонецФункции

&НаСервере
Функция ИнформацияОбОтборе(НомерСтроки)
	КомпонентыПредставления = Новый Массив;
	КомпонентыПредставления.Добавить(НСтр("ru = 'Дубли строки'"));
	КомпонентыПредставления.Добавить(НомерСтроки);
	ТекстПредставления = СтрСоединить(КомпонентыПредставления, " ");
	Возврат НоменклатураВДокументахСервер.ИнформацияОбОтборе(ТекстПредставления);
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	УсловноеОформление.Элементы.Очистить();
	
	// 2.
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
		"Объект.Запасы.ТипНоменклатурыЗапас", Ложь);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
		"Объект.Запасы.ЭтоРазделитель", Ложь);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ЗапасыРезерв.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ЗапасыСтруктурнаяЕдиницаРезервТЧ.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ЗапасыСтруктурнаяЕдиницаРезерв.Имя);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", 
		ЦветаСтиля.ТекстВторостепеннойНадписи);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Для товаров>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);
	
	// 3.
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ЭтоРазделитель", Истина);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ЗапасыКоличество.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ЗапасыСтавкаНДС.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ЗапасыЦена.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ЗапасыСумма.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ЗапасыЕдиницаИзмерения.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ЗапасыДатаОтгрузки.Имя);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
	
	// 4.
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
		"Объект.Запасы.ЭтоРазделитель", Истина);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ЗапасыНоменклатура.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ЗапасыСумма.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ЗапасыСуммаНДС.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ЗапасыВсего.Имя);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Шрифт", 
		Новый Шрифт(Элементы.ЗапасыНоменклатура.Шрифт,,, Истина));
	
	// 5.
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
		"Объект.Запасы.ЭтоРазделитель", Истина);
	Для каждого Эл Из Элементы.Запасы.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Эл) = Тип("ГруппаФормы") Тогда
			Для каждого ПодчиненныйЭл Из Эл.ПодчиненныеЭлементы Цикл
				РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, ПодчиненныйЭл.Имя);
			КонецЦикла;
		ИначеЕсли ТипЗнч(Эл) = Тип("ПолеФормы") Тогда
			РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Эл.Имя);
		КонецЕсли;
	КонецЦикла;
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветФона", 
		ЦветаСтиля.ФонПанелиВариантовОтбора);
	
	// 6.
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
		"Объект.Запасы.ЭтоРазделитель", Истина);
	Для каждого Эл Из Элементы.Запасы.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Эл) <> Тип("ПолеФормы") Тогда
			Продолжить;
		КонецЕсли;
		Если Эл.Имя = Элементы.ЗапасыНоменклатура.Имя Тогда
			Продолжить;
		КонецЕсли;
		РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Эл.Имя);
	КонецЦикла;
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	
	// 7.
	// Наборы
	Если ИспользоватьНаборы Тогда
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
			"Объект.Запасы.НоменклатураНабора", Справочники.Номенклатура.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.НеРавно);
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, 
			"ЗапасыНоменклатура,ЗапасыХарактеристика,ЗапасыСодержание,ЗапасыКоличество,ЗапасыЕдиницаИзмерения");
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", 
			ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	КонецЕсли; 
	// Конец Наборы
	
	// 8. Скидки
	Если ИспользоватьРучныеСкидки Тогда
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		ГруппаОтборов = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Объект.Запасы.ПроцентСкидкиНаценки", 100);
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Объект.Запасы.СуммаСкидкиНаценки", 
			Новый ПолеКомпоновкиДанных("Объект.Запасы.Сумма"),ВидСравненияКомпоновкиДанных.Равно);
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
			"Объект.Запасы.ЭтоРазделитель", Ложь);
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСумма");
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
		
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
			"Объект.Запасы.ПроцентСкидкиНаценки", 0, ВидСравненияКомпоновкиДанных.Равно);
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыПроцентСкидкиНаценки");
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "%");
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", 
			ЦветаСтиля.НедоступныеДанныеЦвет);
		
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
			"Объект.Запасы.СуммаСкидкиНаценки", 0, ВидСравненияКомпоновкиДанных.Равно);
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСуммаСкидкиНаценки");
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = 'сумма'"));
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", 
			ЦветаСтиля.НедоступныеДанныеЦвет);
	КонецЕсли;
	Если ИспользоватьАвтоматическиеСкидки Тогда
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
			"Объект.Запасы.ПроцентАвтоматическойСкидки", 0, ВидСравненияКомпоновкиДанных.Равно);
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыПроцентАвтоматическойСкидки");
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "%");
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", 
			ЦветаСтиля.НедоступныеДанныеЦвет);
		
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
			"Объект.Запасы.СуммаАвтоматическойСкидки", 0, ВидСравненияКомпоновкиДанных.Равно);
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСуммаАвтоматическойСкидки");
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = 'сумма'"));
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", 
			ЦветаСтиля.НедоступныеДанныеЦвет);
	КонецЕсли;
	// Конец Скидки
	
	// СборкаЗаказов
	Если ФОСборкаЗаказов Тогда
		СборкаЗаказов.УстановитьУсловноеОформлениеСборкиЗаказов(УсловноеОформление, Истина);
	КонецЕсли;
	// Конец СборкаЗаказов
	
	// ПараметрическиеСпецификации
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
		"Объект.Запасы.ЭтоШаблонСпецификации", Истина);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСпецификация");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", 
		ЦветаСтиля.КрасныйТекстСтрок);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
		"Объект.Запасы.ЕстьДопРеквизитыСпецификации", Ложь);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыПараметрыСпецификации");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", 
		ЦветаСтиля.НедоступныеДанныеЦвет);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", 
		НСтр("ru = '<Не используются>'"));
	// Конец ПараметрическиеСпецификации
	
	// Характеристики
	СоответствиеИменТабличныхЧастей = Новый Соответствие;
	
	СоответствиеИменТабличныхЧастей.Вставить("Запасы","");
	СоответствиеИменТабличныхЧастей.Вставить("МатериалыЗаказчика","");

	НоменклатураВДокументахСервер.ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристик(ЭтаФорма, 
		СоответствиеИменТабличныхЧастей);

	// Остатки и резервы - цвет текста

	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
		"Объект.Запасы.Обеспечено", 0, ВидСравненияКомпоновкиДанных.Больше);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыОбеспечено");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", 
		ЦветаСтиля.ЦветТекстаПредупреждениеОбОкончанииДоговора);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.Обеспечено", 
		Новый ПолеКомпоновкиДанных("Объект.Запасы.НеОтгруженоВсего"), ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыОбеспечено");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", WebЦвета.Зеленый);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
		"Объект.Запасы.Обеспечено", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
		"Объект.Запасы.НеОтгружено", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыОбеспечено");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "0");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ГоризонтальноеПоложение", 
		ГоризонтальноеПоложение.Право);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", WebЦвета.Красный);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
		"Объект.Запасы.ОстатокСвободно", 0, ВидСравненияКомпоновкиДанных.Меньше);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыОстатокСвободно");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", WebЦвета.Красный);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
		"Объект.Запасы.ПредставлениеНеОтгружено", "", ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыНеОтгружено");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", 
		Новый ПолеКомпоновкиДанных("Объект.Запасы.ПредставлениеНеОтгружено"));
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.НеОтгруженоВсего", 
		Новый ПолеКомпоновкиДанных("Объект.Запасы.МожноОтгрузить"), ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыМожноОтгрузить");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", WebЦвета.Зеленый);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.Количество", 0, 
		ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыМожноОтгрузить");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыОбеспечено");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "0");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ГоризонтальноеПоложение", 
		ГоризонтальноеПоложение.Право);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", WebЦвета.Красный);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
		"Объект.Запасы.ПредставлениеДублей", "", ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
		"РежимОстаткиИРезервы", Истина, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыКоличество");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", 
		Новый ПолеКомпоновкиДанных("Объект.Запасы.ПредставлениеДублей"));
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
		"Объект.Запасы.ИндексЦвета", 1, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыМожноОтгрузить");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", 
		ЦветаСтиля.ЦветТекстаПредупреждениеОбОкончанииДоговора);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
		"Объект.Запасы.МожноОтгрузить", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
		"Объект.Запасы.НеОтгружено", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыМожноОтгрузить");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "0");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ГоризонтальноеПоложение", 
		ГоризонтальноеПоложение.Право);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", WebЦвета.Красный);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.Обеспечено", 
		Новый ПолеКомпоновкиДанных("Объект.Запасы.МожноОтгрузить"), ВидСравненияКомпоновкиДанных.Больше);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыОбеспечено");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыВРезерве");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыРазмещено");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", 
		ЦветаСтиля.ЦветТекстаПредупреждениеОбОкончанииДоговора);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.Обеспечено", 
		Новый ПолеКомпоновкиДанных("Объект.Запасы.НеОтгружено"), ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыОбеспечено");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", WebЦвета.Зеленый);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
		"Объект.Запасы.ТипНоменклатурыЗапас", Ложь);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыМожноОтгрузить");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыОбеспечено");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "");
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
		"Объект.СостояниеЗаказа", Справочники.СостоянияЗаказовПокупателей.Завершен, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
		"Объект.ВариантЗавершения", Перечисления.ВариантыЗавершенияЗаказа.Успешно, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыКПоступлению");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыДатаПоступления");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);
	
	// Структурная единица (резерв)
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	ГруппаИли = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	ГруппаИ = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(ГруппаИли, 
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИ, "Объект.Запасы.СтруктурнаяЕдиницаРезерв", 
		Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИ, "Объект.Запасы.ТипНоменклатурыЗапас", Истина);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИли, "Объект.Запасы.Резерв", 0, 
		ВидСравненияКомпоновкиДанных.Больше);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИли, "УчетПотребностиПоСкладам", Истина);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСтруктурнаяЕдиницаРезервТЧ");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	ГруппаИли = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИли, "Объект.Запасы.СтруктурнаяЕдиницаРезерв", Неопределено, 
		ВидСравненияКомпоновкиДанных.Заполнено);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИли, "Объект.Запасы.ТипНоменклатурыЗапас", Ложь);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСтруктурнаяЕдиницаРезервТЧ");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);

	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.СтруктурнаяЕдиницаРезерв", 
		Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
		"УчетПотребностиПоСкладам", Истина);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
		"Объект.Запасы.ТипНоменклатурыЗапас", Истина);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "СтруктурнаяЕдиницаРезерв");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);

	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
		"Объект.СтруктурнаяЕдиницаРезерв", Неопределено, ВидСравненияКомпоновкиДанных.Заполнено);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "СтруктурнаяЕдиницаРезерв");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
	
	УстановитьОформлениеОтмененнойСтроки();
	
	// Минимальные цены
	ЦенообразованиеСервер.УстановитьУсловноеОформлениеМинимальнойЦены(УсловноеОформление, "Запасы", 
		?(КэшЗначений.Свойство("ИспользоватьМинимальныеЦены"), КэшЗначений.ИспользоватьМинимальныеЦены, Ложь));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияРеквизитовПечати(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ПечатьДокументовУНФКлиент.ОбновитьЗначенияРеквизитовПечати(ЭтотОбъект, Результат.ИзмененныеРеквизиты);
		
		Если Результат.Свойство("Команда") Тогда
			
			Подключаемый_ВыполнитьКоманду(Результат.Команда);
			
		КонецЕсли;

		ГрузоотправительОнЖе = Результат.ГрузоотправительОнЖе;
		ГрузополучательОнЖе = Результат.ГрузополучательОнЖе;
		
		УстановитьОтображениеГрузоперевозки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбораБанковскогоСчета(Договор, Организация, НациональнаяВалюта)
	
	РеквизитыДоговора = Справочники.ДоговорыКонтрагентов.РеквизитыРасчетовВУсловныхЕдиницах(Договор);
	
	СписокВалют = Новый СписокЗначений;
	СписокВалют.Добавить(РеквизитыДоговора.ВалютаРасчетов);
	СписокВалют.Добавить(НациональнаяВалюта);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РасчетыВУсловныхЕдиницах", РеквизитыДоговора.РасчетыВУсловныхЕдиницах);
	ПараметрыФормы.Вставить("Владелец", Организация);
	ПараметрыФормы.Вставить("СписокВалют", СписокВалют);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеВидаЦенИВалютыРасчетов(ПараметрыДокумента)
	
	ВалютаРасчетовПередИзменением = ПараметрыДокумента.ВалютаРасчетовПередИзменением;
	ДанныеДоговора = ПараметрыДокумента.ДанныеДоговора;
	ВопросВидЦен = ПараметрыДокумента.ВопросВидЦен;
	ОткрытьФормуЦеныИВалюты = ПараметрыДокумента.ОткрытьФормуЦеныИВалюты;
	ИзменилсяВидЦен = ПараметрыДокумента.ИзменилсяВидЦен;
	ИзменилсяВидСкидки = ПараметрыДокумента.ИзменилсяВидСкидки;
	Если ПараметрыДокумента.Свойство("ОчиститьДисконтнуюКарту") Тогда
		ОчиститьДисконтнуюКарту = ПараметрыДокумента.ОчиститьДисконтнуюКарту;
	Иначе
		ОчиститьДисконтнуюКарту = Ложь;
	КонецЕсли;
	ПересчетНеобходимПоЗапасам = ПараметрыДокумента.ПересчетНеобходимПоЗапасам;
	ПересчетНеобходимПоРаботам = ПараметрыДокумента.ПересчетНеобходимПоРаботам;
	
	Если НЕ ДанныеДоговора.СуммаВключаетНДС = Неопределено Тогда
		
		Объект.СуммаВключаетНДС = ДанныеДоговора.СуммаВключаетНДС;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда 
		
		Объект.Курс      = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс = 0, 1, ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс);
		Объект.Кратность = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность = 0, 1, ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность);
		
	КонецЕсли;
	
	Если ИзменилсяВидЦен Тогда
		
		Объект.ВидЦен = ДанныеДоговора.ВидЦен;
		
	КонецЕсли;
	
	Если ИзменилсяВидСкидки Тогда
		
		Объект.ВидСкидкиНаценки = ДанныеДоговора.ВидСкидкиНаценки;
		
	КонецЕсли;
	
	Если ОчиститьДисконтнуюКарту Тогда
		
		Объект.ДисконтнаяКарта = ПредопределенноеЗначение("Справочник.ДисконтныеКарты.ПустаяСсылка");
		Объект.ПроцентСкидкиПоДисконтнойКарте = 0;
		
		ДисконтныеКартыУНФКлиент.ПоказатьПользователюИнформациюОбОчисткеДКИРучныхСкидок();
		
	КонецЕсли;
	
	Объект.ВалютаДокумента = ДанныеДоговора.ВалютаРасчетов;
	Если ДанныеДоговора.Свойство("БанковскийСчет") Тогда
		
		Объект.БанковскийСчет = ДанныеДоговора.БанковскийСчет;
		
	КонецЕсли;
	
	Если ОткрытьФормуЦеныИВалюты Тогда
		
		ТекстПредупреждения = "";
		Если ИзменилсяВидЦен ИЛИ ИзменилсяВидСкидки Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Договор с контрагентом предусматривает условия цен и скидок, 
									|отличные от установленных в документе! 
									|Возможно, необходимо перезаполнить цены.'") + Символы.ПС + Символы.ПС;
			
		КонецЕсли;
		
		ТекстПредупреждения = ТекстПредупреждения + НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом! 
										|Необходимо проверить валюту документа!'");
		
		ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаРасчетовПередИзменением, Истина, (ИзменилсяВидЦен ИЛИ ИзменилсяВидСкидки), ТекстПредупреждения);
		
	ИначеЕсли ВопросВидЦен Тогда
		
		ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
			УчетВалютныхОпераций);
		
		Если (ПересчетНеобходимПоЗапасам И Объект.Запасы.Количество() > 0)
			ИЛИ (ПересчетНеобходимПоРаботам И Объект.Работы.Количество() > 0) Тогда
			
			ТекстВопроса = НСтр("ru = 'Договор с контрагентом предусматривает условия цен и скидок, отличные от установленных в документе! 
										|Пересчитать документ в соответствии с договором?'");
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОпределитьНеобходимостьПересчетаДокументаПоУсловиямДоговора", ЭтотОбъект, ПараметрыДокумента);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	Иначе
		
		ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
			УчетВалютныхОпераций);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	// Наборы
	Если НЕ СтруктураДанные.Свойство("ЕдиницаИзмерения") И ТипЗнч(СтруктураДанные.Номенклатура)=Тип("СправочникСсылка.Номенклатура") Тогда
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	КонецЕсли; 
	Если НЕ СтруктураДанные.Свойство("Коэффициент") Тогда
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения)=Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
		Иначе
			СтруктураДанные.Вставить("Коэффициент", 1);
		КонецЕсли; 
	КонецЕсли;
	// Конец Наборы
	
	СтруктураДанные.Вставить("ЭтоУслуга", СтруктураДанные.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	СтруктураДанные.Вставить("ЭтоЗапас", (СтруктураДанные.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
									ИЛИ СтруктураДанные.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат")));
	
	СтруктураДанные.Вставить("Склад", СтруктураДанные.Номенклатура.Склад);
	СтруктураДанные.Вставить("Ячейка", СтруктураДанные.Номенклатура.Ячейка);									
									
	Если СтруктураДанные.Свойство("НормаВремени") Тогда
		СтруктураДанные.НормаВремени = ЦенообразованиеСервер.ПолучитьНормуВремениРаботы(СтруктураДанные);
	КонецЕсли;
	
	ДатаОбработки = ?(СтруктураДанные.Свойство("ДатаОбработки"), ДатаОбработки, ТекущаяДатаСеанса());
	НалогообложениеНДСОрганизации = НалогиУНФ.НалогообложениеНДС(СтруктураДанные.Организация,, ДатаОбработки);
	
	Если Не СтруктураДанные.Свойство("ЕстьПартииСНДС") Тогда
		СтруктураДанные.Вставить("ЕстьПартииСНДС", Ложь);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС")
		И (НЕ СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС")
		ИЛИ (НалогообложениеНДСОрганизации = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") И СтруктураДанные.ЕстьПартииСНДС)) Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС")
			ИЛИ (НалогообложениеНДСОрганизации = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") И СтруктураДанные.ЕстьПартииСНДС) Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли
		
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.ВидСтавкиНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки), СтруктураДанные.ДатаОбработки, ТекущаяДатаСеанса())));
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки), СтруктураДанные.ДатаОбработки, ТекущаяДатаСеанса())));
	КонецЕсли;
	
	// Характеристики
	СтруктураДанные.Вставить("ИспользоватьХарактеристики",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",Ложь);
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьХарактеристики
		Тогда
		ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура);
		
		Если Не ЗначенияПоУмолчанию = Неопределено
			Тогда
			ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
		КонецЕсли;
		
		Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика",ХарактеристикаПоУмолчанию);
		Иначе
			СтруктураДанные.Характеристика = ?(ЗначениеЗаполнено(СтруктураДанные.Характеристика), СтруктураДанные.Характеристика, ХарактеристикаПоУмолчанию);
		КонецЕсли;
		
		СтруктураДанные.Вставить("ИспользоватьХарактеристики",Истина);
		СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",СтруктураДанные.Номенклатура.ПроверятьЗаполнениеХарактеристики);
	КонецЕсли; 
	// Конец Характеристики
	
	Если СтруктураДанные.Свойство("Цена") И ЗначениеЗаполнено(СтруктураДанные.Цена) Тогда
		// При подборе наборов расчет цены не требуется - используется цена, указанная в подборе
	ИначеЕсли СтруктураДанные.Свойство("ВидЦен") Тогда
		
		Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		КонецЕсли;
		
		Если СтруктураДанные.Свойство("ВидРабот") Тогда
		
			Если СтруктураДанные.Номенклатура.ФиксированнаяСтоимость Тогда
				
				Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
				СтруктураДанные.Вставить("Цена", Цена);
			
			Иначе
			
				СтруктураДанные.Номенклатура = СтруктураДанные.ВидРабот;
				СтруктураДанные.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
				СтруктураДанные.Вставить("Цена", Цена);
				
			КонецЕсли;
		
		Иначе
		
			Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
			СтруктураДанные.Вставить("Цена", Цена);
		
		КонецЕсли;
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		
	КонецЕсли;     
	
	СтруктураДанные.Вставить("МинимальнаяЦена", ЦенообразованиеСервер.ПолучитьМинимальнуюЦенуНоменклатуры(СтруктураДанные));
	
	Если СтруктураДанные.Свойство("ВидСкидкиНаценки") 
		И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки) Тогда
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки.Процент);
	Иначе
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", 0);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ПроцентСкидкиПоДисконтнойКарте") 
		И ЗначениеЗаполнено(СтруктураДанные.ДисконтнаяКарта) Тогда
		ТекПроцент = СтруктураДанные.ПроцентСкидкиНаценки;
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", ТекПроцент + СтруктураДанные.ПроцентСкидкиПоДисконтнойКарте);
	КонецЕсли;
	СтруктураДанные.Вставить("ВесЕдиницыТовара", СтруктураДанные.Номенклатура.Вес);
	СтруктураДанные.Вставить("ОбъемЕдиницыТовара", СтруктураДанные.Номенклатура.Объем);
	
	СтруктураДанные.Вставить("Склад", СтруктураДанные.Номенклатура.Склад);
	СтруктураДанные.Вставить("Ячейка", СтруктураДанные.Номенклатура.Ячейка);
	
	// Наборы
	НаборыСервер.ДобавитьИнформациюОНабореПриПолученииДанныхНоменклатуры(СтруктураДанные);
	
	//Партии
	СтруктураДанные.Вставить("ИспользоватьПартии",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеПартий",Ложь);
	
	Если Не СтруктураДанные.Свойство("ТребуетсяИзменениеНалогообложениеНаСНДС") Тогда
		СтруктураДанные.Вставить("ТребуетсяИзменениеНалогообложениеНаСНДС", Ложь);
	КонецЕсли;
	
	Если НЕ СтруктураДанные.Свойство("Партия") Тогда
		СтруктураДанные.Вставить("Партия", Неопределено);
	КонецЕсли;
	
	Если НЕ СтруктураДанные.Свойство("КомиссияСНДС") Тогда
		СтруктураДанные.Вставить("КомиссияСНДС", Ложь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьПартии
		Тогда
		
		Если СтруктураДанные.Свойство("СтатусПартии")
			Тогда
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтруктураДанные.СтатусПартии);
		Иначе
			Если Не СтруктураДанные.Свойство("ВидОперации")
				Тогда
				ВидОперации = Неопределено
			Иначе
				ВидОперации = СтруктураДанные.ВидОперации
			КонецЕсли;
			
			СтатусПартии = НоменклатураВДокументахСервер.СоответствиеВидаОперацииИлиХозОперацииСтатусуПартии(, ВидОперации);
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтатусПартии);
		КонецЕсли;
		
		ПартияПоУмолчанию = Справочники.ПартииНоменклатуры.ПустаяСсылка();
		
		Если Не ЗначенияПартииПоУмолчанию = Неопределено
			Тогда
			ПартияПоУмолчанию = ЗначенияПартииПоУмолчанию;
		КонецЕсли;
		
		СтруктураДанные.Партия = ?(ЗначениеЗаполнено(СтруктураДанные.Партия), СтруктураДанные.Партия, ПартияПоУмолчанию);
		
		СтруктураДанные.ПроверятьЗаполнениеПартий = СтруктураДанные.Номенклатура.ПроверятьЗаполнениеПартий;
		СтруктураДанные.ИспользоватьПартии = Истина;
		
		Если Не СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
			РаботаСКомиссионерамиКомитентамиСервер.СкорректироватьСтавкуНДСКомиссионногоТовара(СтруктураДанные);
		КонецЕсли;
		
		СтруктураДанные.КомиссияСНДС = СтруктураДанные.Партия.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		
	КонецЕсли;
	// Конец Партии
	
	ВключаяШаблоны = (СтруктураДанные.Свойство("ВключаяШаблоны") И СтруктураДанные.ВключаяШаблоны);
	Если СтруктураДанные.Свойство("Характеристика") Тогда
		СтруктураДанные.Вставить("Спецификация", Справочники.Спецификации.СпецификацияПоУмолчанию(
			СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика, ВключаяШаблоны));
	Иначе
		СтруктураДанные.Вставить("Спецификация", Справочники.Спецификации.СпецификацияПоУмолчанию(
			СтруктураДанные.Номенклатура, , ВключаяШаблоны));
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеСпецификацияПриИзменении(СтруктураДанные);
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьСерииНоменклатуры Тогда
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", СерииНоменклатурыУНФ.СтатусСерийНоменклатурыПриИзменении(СтруктураДанные));
	Иначе
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", 0);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
			СтруктураДанные.Вставить("Коэффициент", 1);
		Иначе
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
		КонецЕсли;
		
		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("МинимальнаяЦена", ЦенообразованиеСервер.ПолучитьМинимальнуюЦенуНоменклатуры(СтруктураДанные));

	ВключаяШаблоны = (СтруктураДанные.Свойство("ВключаяШаблоны") И СтруктураДанные.ВключаяШаблоны);
	СтруктураДанные.Вставить("Спецификация", Справочники.Спецификации.СпецификацияПоУмолчанию(
		СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика, ВключаяШаблоны));
	
	Если СтруктураДанные.Свойство("НормаВремени") Тогда
		СтруктураДанные.НормаВремени = ЦенообразованиеСервер.ПолучитьНормуВремениРаботы(СтруктураДанные);
	КонецЕсли;
	
	// Наборы
	НаборыСервер.ДобавитьИнформациюОНабореПриПолученииДанныхНоменклатуры(СтруктураДанные);
	
	СтруктураДанные = ПолучитьДанныеСпецификацияПриИзменении(СтруктураДанные);
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(Номенклатура, ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	Результат = Новый Структура;
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		Результат.Вставить("ТекущийКоэффициент", 1);
	Иначе
		Результат.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Если ЕдиницаИзмерения = Неопределено Тогда
		Результат.Вставить("Коэффициент", 1);
	Иначе
		Результат.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
	Результат,
	ВесИОбъемЕдиницТоваров(Номенклатура, ЕдиницаИзмерения, Результат.Коэффициент));
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВесИОбъемЕдиницТоваров(Знач Номенклатура, Знач ЕдиницаИзмерения, Знач Коэффициент)
	
	Возврат РегистрыСведений.ВесИОбъемЕдиницТоваров.Значения(Номенклатура, ЕдиницаИзмерения, Коэффициент);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСрокОплатыПокупателя(Договор)
	
	Возврат Договор.СрокОплатыПокупателя;

КонецФункции

&НаСервере
Процедура ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС(ЭтоОткрытие = Ложь)
	
	НалогообложениеПередИзменением = Объект.НалогообложениеНДС;
	Объект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Объект.Организация,, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
	
	Если НЕ НалогообложениеПередИзменением = Объект.НалогообложениеНДС ИЛИ ЭтоОткрытие Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС(НалогообложениеПередИзменением);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС(НалогообложениеПередИзменением = Неопределено)
	
	Если НалогообложениеПередИзменением = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС 
		И Не Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС
		И РаботаСКомиссионерамиКомитентамиСервер.ВТабличнойЧастиЕстьКомиссионнаяПартияСНалогообложениемНДС(Объект) Тогда
		Объект.НалогообложениеНДС = НалогообложениеПередИзменением;
		СтрокаСообщения = НСтр("ru = 'В табличной части присутствует комиссионная номенклатура облагаемая НДС. Тип налогообложения НДС не изменен.'");
		ОбщегоНазначения.СообщитьПользователю(СтрокаСообщения);
		Возврат;
	КонецЕсли;
	
	НалогообложениеНДСОрганизации = НалогиУНФ.НалогообложениеНДС(Объект.Организация,, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
	ОрганизацияБезНДС = НалогообложениеНДСОрганизации = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС;
	
	Если Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		Элементы.ПлатежныйКалендарьСуммаНДСОплаты.Видимость = Истина;
		Элементы.СписокПлатежныйКалендарьСуммаНДСОплаты.Видимость = Истина;
		// Доставка
		Элементы.СтавкаНДСДоставки.Видимость = Истина;
		Элементы.СуммаНДСДоставки.Видимость = Истина;
		
		СтавкаНДСПоУмолчанию = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(
			ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			
			Если СтрокаТабличнойЧасти.ЭтоРазделитель Тогда
				Продолжить;
			КонецЕсли;
			
			Партия = СтрокаТабличнойЧасти.Партия;
			Если ОрганизацияБезНДС Тогда
				
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.БезНДС);
				
				Если ЗначениеЗаполнено(Партия) И Партия.Статус = Перечисления.СтатусыПартий.ТоварыНаКомиссии 
					И Партия.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
					
					Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС) Тогда
						СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
					Иначе
						СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				Если ЗначениеЗаполнено(Партия) И Партия.Статус = Перечисления.СтатусыПартий.ТоварыНаКомиссии 
					И Партия.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
					
					СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.БезНДС);;
				Иначе
					
					Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС) Тогда
						СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
					Иначе
						СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Работы Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			КонецЕсли;	
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;
		
		// Доставка
		Если ЗначениеЗаполнено(Объект.НоменклатураДоставки) Тогда
			Объект.СтавкаНДСДоставки = Справочники.СтавкиНДС.СтавкаНДС(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.НоменклатураДоставки, "ВидСтавкиНДС", Истина),?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
			Если НЕ ЗначениеЗаполнено(Объект.СтавкаНДСДоставки) Тогда
				Объект.СтавкаНДСДоставки = СтавкаНДСПоУмолчанию;
			КонецЕсли; 
			Если Объект.СтоимостьДоставки <> 0 Тогда
				СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДСДоставки);
				Если Объект.СуммаВключаетНДС Тогда
					Объект.СуммаНДСДоставки = Объект.СтоимостьДоставки - (Объект.СтоимостьДоставки) / ((СтавкаНДС + 100) / 100);
					СтоимостьДоставкиСНДС = Объект.СтоимостьДоставки;
				Иначе
					Объект.СуммаНДСДоставки = Объект.СтоимостьДоставки * СтавкаНДС / 100;
					СтоимостьДоставкиСНДС = Объект.СтоимостьДоставки + Объект.СуммаНДСДоставки;
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
		// Конец Доставка
		
	Иначе
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		Элементы.ПлатежныйКалендарьСуммаНДСОплаты.Видимость = Ложь;
		Элементы.СписокПлатежныйКалендарьСуммаНДСОплаты.Видимость = Ложь;
		// Доставка
		Элементы.СтавкаНДСДоставки.Видимость = Ложь;
		Элементы.СуммаНДСДоставки.Видимость = Ложь;
		
		Если Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") Тогда
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
		КонецЕсли;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Работы Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;
		
		// Доставка
		Объект.СтавкаНДСДоставки = СтавкаНДСПоУмолчанию;
		Объект.СуммаНДСДоставки = 0;
		// Конец Доставка
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТабличнойЧасти = "Запасы", СтрокаТабличнойЧасти = Неопределено, ПараметрыРасчета = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
	КонецЕсли;
	
	Если ПараметрыРасчета=Неопределено Тогда
		ПараметрыРасчета = Новый Структура("СброситьФлагСкидкиРассчитаны",Истина);
	КонецЕсли;	
	
	ПараметрыРасчета.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	ПараметрыРасчета.Вставить("ИспользоватьМинимальныеЦены", КэшЗначений.ИспользоватьМинимальныеЦены);
	
	ТабличныеЧастиУНФКлиент.РассчитатьСуммыВСтрокеТЧ(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ЦенообразованиеКлиент.ПоказатьОповещениеПользователяОКорректировкеЦены(ПараметрыРасчета);   		

	// АвтоматическиеСкидки.
	СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти");
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры

// Процедура должна вызваться после ОбновитьИтогиКлиент, т.к. использует рассчитанные итоги.
&НаКлиенте
Процедура ПересчитатьПлатежныйКалендарь()
	
	Для каждого ТекСтрока Из Объект.ПлатежныйКалендарь Цикл
		ТекСтрока.СуммаОплаты = Окр((ИтогВсего + Объект.СтоимостьДоставки) * ТекСтрока.ПроцентОплаты / 100, 2, 1);
		ТекСтрока.СуммаНДСОплаты = Окр((ИтогСуммаНДС + Объект.СуммаНДСДоставки) * ТекСтрока.ПроцентОплаты / 100, 2, 1);
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь,
	ПерезаполнитьЦены = Ложь, ТекстПредупреждения = "")
	
	ПараметрыФормыЦеныИВалюта = ЦеныИВалютаКлиентСервер.НовыеПараметрыФормыЦеныИВалюта(Объект, ТолькоПросмотр,
		Компания, ПерезаполнитьЦены, ПересчитатьЦены);
	ПараметрыФормыЦеныИВалюта.ВалютаПередИзменением = ВалютаРасчетовПередИзменением;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу") Тогда
		ПараметрыФормыЦеныИВалюта.ТекстПредупреждения = ТекстПредупреждения;
	Иначе
		ПараметрыФормыЦеныИВалюта.ДисконтнаяКартаЕстьРеквизит = Ложь;
	КонецЕсли;
	
	Если КэшЗначений.Свойство("РезервированиеЗапасов") Тогда
		РезервированиеЗапасов = КэшЗначений.РезервированиеЗапасов;
	Иначе
		РезервированиеЗапасов = Ложь;
	КонецЕсли;
	
	ЦенообразованиеКлиент.ДополнитьСтруктуруВызоваФормыЦеныИВалютыСтруктурнойЕдиницей(Объект, Объект.Запасы,
		Элементы.Запасы.ТекущиеДанные, ПараметрыФормыЦеныИВалюта, Не РезервированиеЗапасов);
		
	Если Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") 
		И Элементы.ЗапасыПартия.Видимость Тогда
		РаботаСНоменклатуройКлиентУНФ.ДополнитьСтруктуруВызоваФормыЦеныИВалютыМассивомПартийНоменклатуры(Объект.Запасы, ПараметрыФормыЦеныИВалюта);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуЦеныИВалютаЗавершение", ЭтотОбъект,
		Новый Структура("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением));
	ОткрытьФорму("ОбщаяФорма.ЦеныИВалюта", ПараметрыФормыЦеныИВалюта, ЭтотОбъект, , , , ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен() 
	
	СтруктураДанных = Новый Структура;
	ТабличнаяЧастьДокумента = Новый Массив;
	
	СтруктураДанных.Вставить("Дата",				Объект.Дата);
	СтруктураДанных.Вставить("Организация",			Компания);
	СтруктураДанных.Вставить("ВидЦен",				Объект.ВидЦен);
	СтруктураДанных.Вставить("ВалютаДокумента",		Объект.ВалютаДокумента);
	СтруктураДанных.Вставить("СуммаВключаетНДС",	Объект.СуммаВключаетНДС);
	
	СтруктураДанных.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	СтруктураДанных.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	СтруктураДанных.Вставить("ПроцентСкидкиНаценки", 0);
	
	Если ВидРаботВШапке Тогда
		
		Для каждого СтрокаТЧ Из Объект.Работы Цикл
			
			СтрокаТЧ.Цена = 0;
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				Продолжить;	
			КонецЕсли; 
			
			СтрокаТабличнойЧасти = Новый Структура();
			СтрокаТабличнойЧасти.Вставить("ВидРабот",			Объект.ВидРабот);
			СтрокаТабличнойЧасти.Вставить("Номенклатура",		СтрокаТЧ.Номенклатура);
			СтрокаТабличнойЧасти.Вставить("Характеристика",		СтрокаТЧ.Характеристика);
			СтрокаТабличнойЧасти.Вставить("Цена",				0);
			
			ТабличнаяЧастьДокумента.Добавить(СтрокаТабличнойЧасти);
			
		КонецЦикла;
	
	Иначе
	
		Для каждого СтрокаТЧ Из Объект.Работы Цикл
			
			СтрокаТЧ.Цена = 0;
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.ВидРабот) Тогда
				Продолжить;	
			КонецЕсли; 
			
			СтрокаТабличнойЧасти = Новый Структура();
			СтрокаТабличнойЧасти.Вставить("ВидРабот",			СтрокаТЧ.ВидРабот);
			СтрокаТабличнойЧасти.Вставить("Номенклатура",		СтрокаТЧ.Номенклатура);
			СтрокаТабличнойЧасти.Вставить("Характеристика",		СтрокаТЧ.Характеристика);
			СтрокаТабличнойЧасти.Вставить("Цена",				0);
			
			ТабличнаяЧастьДокумента.Добавить(СтрокаТабличнойЧасти);
			
		КонецЦикла;
	
	КонецЕсли;
	
	ПолучитьЦеныТабличнойЧастиПоВидуЦен(СтруктураДанных, ТабличнаяЧастьДокумента);
	
	Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл
	
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаТЧ.Характеристика);
		
		РезультатПоиска = Объект.Работы.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаРезультат Из РезультатПоиска Цикл
			СтрокаРезультат.Цена = СтрокаТЧ.Цена;
			РассчитатьСуммуВСтрокеТабличнойЧасти("Работы", СтрокаРезультат);
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Работы Цикл
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанных.ПроцентСкидкиНаценки;
		РассчитатьСуммуВСтрокеТабличнойЧасти("Работы", СтрокаТабличнойЧасти);
	КонецЦикла;
	
КонецПроцедуры

// Выполняем пересчет цены табличной части документа после изменений в форме 
// "Цены и валюта".
//
// Параметры:
//  СтруктураРеквизитов - Структура - описание реквизитов, необходимых при пересчете
//  ТабличнаяЧастьДокумента - ДанныеФормыСтруктура - содержит табличную часть документа.
//
&НаСервереБезКонтекста
Процедура ПолучитьЦеныТабличнойЧастиПоВидуЦен(СтруктураДанных, ТабличнаяЧастьДокумента)
	
	// Скидки.
	Если СтруктураДанных.Свойство("ВидСкидкиНаценки") 
		И ЗначениеЗаполнено(СтруктураДанных.ВидСкидкиНаценки) Тогда
		
		СтруктураДанных.ПроцентСкидкиНаценки = СтруктураДанных.ВидСкидкиНаценки.Процент;
		
	КонецЕсли;	
	
	// Дисконтная карта.
	Если СтруктураДанных.Свойство("ПроцентСкидкиПоДисконтнойКарте") 
		И ЗначениеЗаполнено(СтруктураДанных.ПроцентСкидкиПоДисконтнойКарте) Тогда
		
		СтруктураДанных.ПроцентСкидкиНаценки = СтруктураДанных.ПроцентСкидкиНаценки + СтруктураДанных.ПроцентСкидкиПоДисконтнойКарте;
		
	КонецЕсли;
		
	// 1. Сформируем таблицу документа.
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	
	Массив = Новый Массив;
	
	// Вид работ.
	Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНоменклатуры.Колонки.Добавить("ВидРабот", ОписаниеТипов);
	
	// Номенклатура.
	Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура", ОписаниеТипов);
	
	// ФиксированноеЗначение.
	Массив.Добавить(Тип("Булево"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНоменклатуры.Колонки.Добавить("ФиксированнаяСтоимость", ОписаниеТипов);
	
	// Характеристика.
	Массив.Добавить(Тип("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНоменклатуры.Колонки.Добавить("Характеристика", ОписаниеТипов);
	
	// СтавкиНДС.
	Массив.Добавить(Тип("СправочникСсылка.СтавкиНДС"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНоменклатуры.Колонки.Добавить("СтавкаНДС", ОписаниеТипов);	
	
	Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл
		
		НоваяСтрока = ТаблицаНоменклатуры.Добавить();
		НоваяСтрока.ВидРабот	 	 = СтрокаТЧ.ВидРабот;
		НоваяСтрока.ФиксированнаяСтоимость	 = СтрокаТЧ.Номенклатура.ФиксированнаяСтоимость;
		НоваяСтрока.Номенклатура	 = СтрокаТЧ.Номенклатура;
		НоваяСтрока.Характеристика	 = СтрокаТЧ.Характеристика;
		Если ТипЗнч(СтрокаТЧ) = Тип("Структура")
		   И СтрокаТЧ.Свойство("СтавкаНДС") Тогда
			НоваяСтрока.СтавкаНДС		 = СтрокаТЧ.СтавкаНДС;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНоменклатуры.ВидРабот,
	|	ТаблицаНоменклатуры.ФиксированнаяСтоимость,
	|	ТаблицаНоменклатуры.Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика,
	|	ТаблицаНоменклатуры.СтавкаНДС
	|ПОМЕСТИТЬ ВременнаяТаблицаНоменклатуры
	|ИЗ
	|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры";
	
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	Запрос.Выполнить();
	
	// 2. Заполним цены.
	ВидЦенПараметр = СтруктураДанных.ВидЦен;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
	|	ТаблицаНоменклатуры.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР 
	|		КОГДА ЦеныНоменклатурыСрезПоследних.ВалютаЦены <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|		ТОГДА ЦеныНоменклатурыСрезПоследних.ВалютаЦены
	|		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ВидЦен.ВалютаЦены 
	|	КОНЕЦ КАК ЦеныНоменклатурыВалюта,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ПорядокОкругления КАК ПорядокОкругления,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена * КурсВалютыВидЦен.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыВидЦен.Кратность) / ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент, 1), 0) КАК Цена
	|ИЗ
	|	ВременнаяТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаОбработки, ВидЦен = &ВидЦен) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО (ВЫБОР
	|				КОГДА ТаблицаНоменклатуры.ФиксированнаяСтоимость
	|					ТОГДА ТаблицаНоменклатуры.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|				ИНАЧЕ ТаблицаНоменклатуры.ВидРабот = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА ТаблицаНоменклатуры.ФиксированнаяСтоимость
	|					ТОГДА ТаблицаНоменклатуры.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, ) КАК КурсВалютыВидЦен
	|		ПО
	|			ВЫБОР 
	|				КОГДА ЦеныНоменклатурыСрезПоследних.ВалютаЦены <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ТОГДА ЦеныНоменклатурыСрезПоследних.ВалютаЦены = КурсВалютыВидЦен.Валюта
	|				ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ВидЦен.ВалютаЦены = КурсВалютыВидЦен.Валюта 
	|			КОНЕЦ, 
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
	|ГДЕ
	|	ЦеныНоменклатурыСрезПоследних.Актуальность";
		
	Запрос.УстановитьПараметр("ДатаОбработки",	 СтруктураДанных.Дата);
	Запрос.УстановитьПараметр("ВидЦен",			 ВидЦенПараметр);
	Запрос.УстановитьПараметр("ВалютаДокумента", СтруктураДанных.ВалютаДокумента);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаТабЧасти Из ТабличнаяЧастьДокумента Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",	СтрокаТабЧасти.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика",	СтрокаТабЧасти.Характеристика);
		Если ТипЗнч(СтрокаТЧ) = Тип("Структура")
			И СтрокаТабЧасти.Свойство("СтавкаНДС") Тогда
			
			СтруктураПоиска.Вставить("СтавкаНДС", СтрокаТабЧасти.СтавкаНДС);
			
		КонецЕсли;
		
		РезультатПоиска = ТаблицаЦен.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() > 0 Тогда
			
			Цена = РезультатПоиска[0].Цена;
			Если Цена = 0 Тогда
				
				СтрокаТабЧасти.Цена = Цена;
				
			Иначе
				
				ПорядокОкругления = РезультатПоиска[0].ПорядокОкругления;
				ОкруглятьВБольшуюСторону = РезультатПоиска[0].ОкруглятьВБольшуюСторону;
				
				Если СтруктураДанных.Свойство("СуммаВключаетНДС")
					И ((СтруктураДанных.СуммаВключаетНДС И НЕ РезультатПоиска[0].ЦенаВключаетНДС)
						ИЛИ (НЕ СтруктураДанных.СуммаВключаетНДС И РезультатПоиска[0].ЦенаВключаетНДС)) Тогда
					
					Цена = ЦенообразованиеСервер.ПересчитатьСуммуПриИзмененииФлаговНДС(Цена, СтруктураДанных.СуммаВключаетНДС, СтрокаТабЧасти.СтавкаНДС);
					
				КонецЕсли;
				
				СтрокаТабЧасти.Цена = ЦенообразованиеСервер.ОкруглитьЦену(Цена, ПорядокОкругления, ОкруглятьВБольшуюСторону);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МенеджерВременныхТаблиц.Закрыть()
	
КонецПроцедуры

// ПодключаемоеОборудование
&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	// Преобразование весовых штрихкодов.
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодамВМассиве(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		МассивДанныхШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если МассивДанныхШтрихкода <> Неопределено
			И МассивДанныхШтрихкода.Количество() <> 0 Тогда
			
			Для Каждого ДанныеШтрихкода Из МассивДанныхШтрихкода Цикл
				
				СтруктураДанныеНоменклатуры = Новый Структура();
				СтруктураДанныеНоменклатуры.Вставить("Организация", СтруктураДанные.Организация);
				СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
				СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
				СтруктураДанныеНоменклатуры.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
				СтруктураДанныеНоменклатуры.Вставить("Партия", ДанныеШтрихкода.Партия);
				СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", СтруктураДанные.НалогообложениеНДС);
				СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", СтруктураДанные.Дата);
				СтруктураДанныеНоменклатуры.Вставить("СтруктурнаяЕдиница", СтруктураДанные.СтруктурнаяЕдиница);
				Если ЗначениеЗаполнено(СтруктураДанные.ВидЦен) Тогда
					СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", СтруктураДанные.ВалютаДокумента);
					СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", СтруктураДанные.СуммаВключаетНДС);
					СтруктураДанныеНоменклатуры.Вставить("ВидЦен", СтруктураДанные.ВидЦен);
					Если ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения)
						И ТипЗнч(ДанныеШтрихкода.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
						СтруктураДанныеНоменклатуры.Вставить("Коэффициент", ДанныеШтрихкода.ЕдиницаИзмерения.Коэффициент);
					Иначе
						СтруктураДанныеНоменклатуры.Вставить("Коэффициент", 1);
					КонецЕсли;
					СтруктураДанныеНоменклатуры.Вставить("ВидСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки);
				КонецЕсли;
				
				// ДисконтныеКарты
				СтруктураДанныеНоменклатуры.Вставить("ПроцентСкидкиПоДисконтнойКарте", СтруктураДанные.ПроцентСкидкиПоДисконтнойКарте);
				СтруктураДанныеНоменклатуры.Вставить("ДисконтнаяКарта", СтруктураДанные.ДисконтнаяКарта);
				// Конец ДисконтныеКарты

				// МинимальныеЦены
				Если СтруктураДанные.Свойство("СтруктурнаяЕдиница") Тогда 					
					СтруктураДанныеНоменклатуры.Вставить("СтруктурнаяЕдиница", СтруктураДанные.СтруктурнаяЕдиница);					
				КонецЕсли;				
				// Конец МинимальныеЦены
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтруктураДанные, "ЭтоНовыйОбъект") Тогда
					СтруктураДанныеНоменклатуры.Вставить("ЭтоНовыйОбъект", СтруктураДанные.ЭтоНовыйОбъект);
				КонецЕсли;
				
				СтруктураДанныеНоменклатуры.Вставить("ЕстьПартииСНДС", СтруктураДанные.ЕстьПартииСНДС);
				
				ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
				
				Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
					ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	Для каждого парам Из Метаданные.Документы.ЗаказПокупателя.ТабличныеЧасти.Запасы.Реквизиты.Номенклатура.ПараметрыВыбора Цикл
		Если парам.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(парам.Значение)=Тип("ФиксированныйМассив") Тогда
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", парам.Значение);
			Иначе
			    МассивТипов = Новый Массив;
				МассивТипов.Добавить(парам.Значение);
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураДанные.Вставить("Дата", Объект.Дата);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиницаРезерв);
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	// Конец ДисконтныеКарты    
	
	РезервированиеЗапасов = ?(КэшЗначений.Свойство("РезервированиеЗапасов"), КэшЗначений.РезервированиеЗапасов, Ложь);
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, Неопределено, СтруктураДанные, , НЕ РезервированиеЗапасов);
	
	СтруктураПоискаПартииСНДС = Новый Структура("КомиссияСНДС", Истина);
	ЕстьПартииСНДС = Объект.Запасы.НайтиСтроки(СтруктураПоискаПартииСНДС).Количество() > 0;
	СтруктураДанные.Вставить("ЕстьПартииСНДС", ЕстьПартииСНДС);
	
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	// СборкаЗаказов
	Если ФОСборкаЗаказов Тогда
		ИзменилосьРасхождение = Ложь;
	КонецЕсли;
	// Конец СборкаЗаказов
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода.Количество() > 1 Тогда
			
			ПараметрыОткрытия = Новый Структура("МассивНоменклатуры, ТекШтрихкод", ДанныеШтрихкода, ТекШтрихкод);
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоДаннымШтрихкодовЗавершение", ЭтотОбъект, Новый Структура("СтруктураДанные",СтруктураДанные));
			
			ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ДублиНоменклатурыПоШтрихКодам", ПараметрыОткрытия, ЭтаФорма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Продолжить;
		КонецЕсли;
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры", ТекШтрихкод.Штрихкод, ДанныеШтрихкода[0].Номенклатура, ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры));
		Иначе
			
			ДанныеШтрихкода = ДанныеШтрихкода[0];
			
			СтруктураПоиска = СформироватьСтруктуруПоискаСтрокиЗапасов(ДанныеШтрихкода, ТекущийВариантКП);
			МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(СтруктураПоиска);
			СборкаЗаказовКлиент.СортироватьМассивПоРасхождению(МассивСтрокТЧ);
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				Если ФОСборкаЗаказов
					И РежимСборки
					И Не ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
					СтруктураПоиска.Удалить("ЕдиницаИзмерения");
					МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(СтруктураПоиска);
					Если МассивСтрокТЧ.Количество() = 0 Тогда
						ТекстСообщения = СтрШаблон("В заказе отсутствует ""%1"". Позиция не добавлена", ДанныеШтрихкода.Номенклатура);
						ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
						Продолжить;
					Иначе
						НайденнаяСтрока = МассивСтрокТЧ[0];
						БылоРасхождение = НайденнаяСтрока.ЕстьРасхождение;
						НайденнаяСтрока.КоличествоСобрано = НайденнаяСтрока.КоличествоСобрано
							+ ТекШтрихкод.Количество*СборкаЗаказовВызовСервера.КоэффициентПриСборке(НайденнаяСтрока.ЕдиницаИзмерения, ДанныеШтрихкода.ЕдиницаИзмерения);
						СборкаЗаказовКлиент.РассчитатьРасхождения(ЭтаФорма, НайденнаяСтрока, Ложь);
						ИзменилосьРасхождение = ИзменилосьРасхождение ИЛИ (БылоРасхождение <> НайденнаяСтрока.ЕстьРасхождение);
					КонецЕсли;
				Иначе
					НоваяСтрока = Объект.Запасы.Добавить();
					ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "ДатаОтгрузки", "ПоложениеДатыОтгрузки");
					ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "СтруктурнаяЕдиницаРезерв", "ПоложениеСклада");
					НоваяСтрока.НомерВариантаКП = ТекущийВариантКП;
					НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
					НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
					НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
					НоваяСтрока.Количество = ТекШтрихкод.Количество;
					НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
					НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
					
					Если КэшЗначений.ИспользоватьМинимальныеЦены
						И НоваяСтрока.Свойство("МинимальнаяЦена")
						И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("МинимальнаяЦена") Тогда
						
						НоваяСтрока.МинимальнаяЦена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.МинимальнаяЦена;
						
					КонецЕсли;
					
					НоваяСтрока.ПроцентСкидкиНаценки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПроцентСкидкиНаценки;
					НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
					НоваяСтрока.Спецификация = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Спецификация;
					НоваяСтрока.ЭтоШаблонСпецификации = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоШаблонСпецификации;
					НоваяСтрока.ЕстьДопРеквизитыСпецификации = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕстьДопРеквизитыСпецификации;
					Если НоваяСтрока.ЕстьДопРеквизитыСпецификации Тогда
						Если НоваяСтрока.КлючСвязи<>0 Тогда
							ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.РеквизитыПараметрическихСпецификаций, НоваяСтрока);
						КонецЕсли; 
						ЗаполнитьДопРеквизитыПоУмолчанию(НоваяСтрока.ПолучитьИдентификатор());
						ОбновитьОписанияДопРеквизитов(ЭтотОбъект, НоваяСтрока.КлючСвязи);
					КонецЕсли; 
					
					НоваяСтрока.ТипНоменклатурыЗапас = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоЗапас;
					Если НоваяСтрока.ТипНоменклатурыЗапас Тогда
						
						НоваяСтрока.ВесЕдиницыТовара = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ВесЕдиницыТовара;
						НоваяСтрока.Вес = НоваяСтрока.ВесЕдиницыТовара * НоваяСтрока.Количество;
						НоваяСтрока.ОбъемЕдиницыТовара = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ОбъемЕдиницыТовара;
						НоваяСтрока.Объем = НоваяСтрока.ОбъемЕдиницыТовара * НоваяСтрока.Количество;
						
						Если Объект.ПоложениеСклада=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
							НоваяСтрока.СтруктурнаяЕдиницаРезерв = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Склад;
						Иначе
							НоваяСтрока.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
						КонецЕсли;
					КонецЕсли; 
					
					Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
						// Наборы
						ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, НоваяСтрока, ДанныеШтрихкода.СтруктураДанныеНоменклатуры);
						// Конец Наборы
						// АвтоматическиеСкидки.
						СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
						// Конец АвтоматическиеСкидки
						// СборкаЗаказов
						Для Каждого СтрокаЗапасы Из Объект.Запасы Цикл
							СборкаЗаказовКлиент.РассчитатьРасхождения(ЭтаФорма, СтрокаЗапасы, Ложь);
						КонецЦикла;
						// Конец СборкаЗаказов
					Иначе
						РассчитатьСуммуВСтрокеТабличнойЧасти( , НоваяСтрока);
						СборкаЗаказовКлиент.РассчитатьРасхождения(ЭтаФорма, НоваяСтрока, Ложь);
						Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
					КонецЕсли;
					
					Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
						СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
					КонецЕсли;
					
					Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
						Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС");
						ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
						ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,УчетВалютныхОпераций);
						ТребуетсяИзменениеНалогообложениеНаСНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТребуетсяИзменениеНалогообложениеНаСНДС;
						РаботаСНоменклатуройКлиентУНФ.ВывестиОповещениеПользователяОбИзмененииРежимаНалогообложенияНаСДНС(ТребуетсяИзменениеНалогообложениеНаСНДС);
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				НайденнаяСтрока = МассивСтрокТЧ[0];
				Если ФОСборкаЗаказов Тогда
					БылоРасхождение = НайденнаяСтрока.ЕстьРасхождение;
				КонецЕсли;
				Если ФОСборкаЗаказов И РежимСборки Тогда
					НайденнаяСтрока.КоличествоСобрано = НайденнаяСтрока.КоличествоСобрано + ТекШтрихкод.Количество;
					СборкаЗаказовКлиент.РассчитатьРасхождения(ЭтаФорма, НайденнаяСтрока, Ложь);
				Иначе
					НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + ТекШтрихкод.Количество;
					НайденнаяСтрока.Вес = НайденнаяСтрока.ВесЕдиницыТовара * НайденнаяСтрока.Количество;
					НайденнаяСтрока.Объем = НайденнаяСтрока.ОбъемЕдиницыТовара * НайденнаяСтрока.Количество;
					
					РассчитатьСуммуВСтрокеТабличнойЧасти( , НайденнаяСтрока);
					Элементы.Запасы.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
					Если ФОСборкаЗаказов Тогда
						СборкаЗаказовКлиент.РассчитатьРасхождения(ЭтаФорма, НайденнаяСтрока, Ложь);
					КонецЕсли;
				КонецЕсли;
				Если ФОСборкаЗаказов Тогда
					ИзменилосьРасхождение = ИзменилосьРасхождение ИЛИ (БылоРасхождение <> НайденнаяСтрока.ЕстьРасхождение);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ФОСборкаЗаказов И РежимСборки И ИзменилосьРасхождение Тогда
		СборкаЗаказовКлиент.ПереустановитьОтбор(Элементы);
	КонецЕсли;
	
	ЗаполнитьНомераСтрокТаблицаЗапасы(Объект.Запасы, ТекущийВариантКП, ЗапасыКоличествоСтрок);
	
	ОбновитьИтогиКлиент();
	
	ОбновитьВидимостьКолонкиПараметровСпецификации(ЭтотОбъект);
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов) Экспорт
	
	Модифицированность = Истина;
	
	НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов);
	НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект,,,,Оповещение);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для Каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияХарактеристик()
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для Каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры
// Конец ПодключаемоеОборудование

&НаСервере
Процедура ЗаполнитьКолонкуРезервПоОстаткамНаСервере(СтруктураОтбораНоменклатуры = Неопределено)
	
	НоменклатураВДокументахСервер.ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧасти(Объект,,ТекущийВариантКП,, РезервированиеЗапасов);
	
	КоличествоСтрокДоЗаполнения = Объект.Запасы.Количество();
	
	НоменклатураВДокументахСервер.ЗаполнитьКолонкуРезервПоОстаткамЗаказПокупателя(Объект, Новый Структура("НомерВариантаКП", ТекущийВариантКП), СтруктураОтбораНоменклатуры);
	
	ОбновитьДанныеПоСтрокамТабличнойЧасти();
	
	РежимОстаткиИРезервы = ?(Не РежимОстаткиИРезервы И Не КоличествоСтрокДоЗаполнения = Объект.Запасы.Количество(), Истина, РежимОстаткиИРезервы);
	
	Если РежимОстаткиИРезервы Тогда
		
		ОбновитьОтображениеКолонокВРазрезеЗапасовСервер();
		
		Элементы.ОстаткиИРезервы.Пометка = Истина;
		НоменклатураВДокументахСервер.ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧасти(Объект,,ТекущийВариантКП,, РезервированиеЗапасов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоСтрокамТабличнойЧасти()
	
	ЗаполнитьНомераСтрокТаблицаЗапасы(Объект.Запасы, ТекущийВариантКП, ЗапасыКоличествоСтрок);
	ЗаполнитьСлужебныеПоляТабличнойЧасти();
	
	ДействияПослеЧтенияОбъекта();
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	ПараметрыРасчета = Новый Структура("СброситьФлагСкидкиРассчитаны",Истина);
	ПараметрыРасчета.Вставить("СуммаВключаетНДС",Объект.СуммаВключаетНДС);
	
	Для Каждого СтрокаТаблицыЗапасы Из Объект.Запасы Цикл
		ТабличныеЧастиУНФКлиентСервер.РассчитатьСуммыВСтрокеТЧ(СтрокаТаблицыЗапасы, ПараметрыРасчета);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКолонкуРезервПоОстаткамНаСервереБезРазбиения()
	
	НоменклатураВДокументахСервер.ЗаполнитьКолонкуРезервПоОстаткамЗаказПокупателяБезРазбиения(Объект, Новый Структура("НомерВариантаКП", ТекущийВариантКП));
	
	ЗаполнитьНомераСтрокТаблицаЗапасы(Объект.Запасы, ТекущийВариантКП, ЗапасыКоличествоСтрок);
	ЗаполнитьСлужебныеПоляТабличнойЧасти();
	
	ДействияПослеЧтенияОбъекта();
	
	Если РежимОстаткиИРезервы Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			Если НЕ СтрокаТабличнойЧасти.ТипНоменклатурыЗапас 
				Или ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв) Тогда
				Продолжить;
			КонецЕсли; 
			СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
		КонецЦикла;
		
		НоменклатураВДокументахСервер.ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧасти(Объект,,ТекущийВариантКП,, РезервированиеЗапасов);
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбораДоговора(Документ, Организация, Контрагент, Договор, ВидОперации)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура ОбработатьИзменениеВидаОперации()
	
	Объект.Договор = Справочники.ДоговорыКонтрагентов.ПоДокументуКонтрагентуОрганизацииИВидуОперации(Объект.Ссылка,
		Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
	
	Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
		СтрокаЗапасы.Резерв = 0;
	КонецЦикла;
	
	ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеДоговора(ДанныеДоговора = Неопределено)
	
	ДоговорПередИзменением = Договор;
	Договор = Объект.Договор;
		
	Если ДоговорПередИзменением <> Объект.Договор Тогда
		
		Если ДанныеДоговора = Неопределено Тогда
			ДанныеДоговора = ДанныеДоговораДляИзменения(Объект.Дата, Объект.Контрагент, Договор, Объект.Организация,
				Объект.ВалютаДокумента);
		КонецЕсли;
		
		Если Объект.Предоплата.Количество() > 0
			И Объект.Договор <> ДоговорПередИзменением Тогда
			
			Если Объект.СпособЗачетаПредоплаты <> ДанныеДоговора.СпособЗачетаПредоплаты Тогда
				Объект.СпособЗачетаПредоплаты = ДанныеДоговора.СпособЗачетаПредоплаты;
				СпособЗачетаПредоплатыПриИзмененииНаСервере();
			КонецЕсли;
			
			ПараметрыДокумента = Новый Структура;
			ПараметрыДокумента.Вставить("ДоговорПередИзменением", ДоговорПередИзменением);
			ПараметрыДокумента.Вставить("ДанныеДоговора", ДанныеДоговора);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОбОчисткеПредоплатыЗавершение", ЭтотОбъект, ПараметрыДокумента);
			ТекстВопроса = НСтр("ru = 'Зачет предоплаты будет очищен, продолжить?'");
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
			Возврат;
			
		КонецЕсли;
		
		РассчитатьДатуОтгрузкиКлиент();
		СформироватьЗаголовокПодсказкиДатыОтгрузки();
		
		ОбработатьИзменениеУсловийДоговора(ДанныеДоговора, ДоговорПередИзменением);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеУсловийДоговора(ДанныеДоговора, ДоговорПередИзменением)
	
	ИзменилсяВидЦен = Объект.ВидЦен <> ДанныеДоговора.ВидЦен И ЗначениеЗаполнено(ДанныеДоговора.ВидЦен);
	ИзменилсяВидСкидки = Объект.ВидСкидкиНаценки <> ДанныеДоговора.ВидСкидкиНаценки;
	
	Если ДанныеДоговора.Свойство("ВызовИзПроцедурыПриИзмененииКонтрагента") Тогда
		
		// В дальнейшем реквизит ДисконтнаяКрата будет очищен.
		ОчиститьДисконтнуюКарту = ЗначениеЗаполнено(Объект.ДисконтнаяКарта)
			И ДисконтныеКартыУНФВызовСервера.НужноОчиститьДисконтнуюКартуПриСменеВладельца(
				Объект.Контрагент,
				Объект.ДисконтнаяКарта,
				ДанныеДоговора.ПустойКонтрагентПередИзменением);
		
	Иначе
		
		ОчиститьДисконтнуюКарту = Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(ДанныеДоговора) = Тип("Структура")
		И НЕ ДанныеДоговора.Свойство("ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати") Тогда
		
		ДанныеДоговора.Вставить("ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати", ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати);
		
	КонецЕсли;
	ПечатьДокументовУНФКлиент.ПриИзмененииДоговораКонтрагента(Объект.Договор, Объект.ОснованиеПечатиСсылка, Объект.ОснованиеПечати, ДанныеДоговора);
	
	ВопросВидЦен = (ЗначениеЗаполнено(Объект.Договор) И (ИзменилсяВидЦен ИЛИ ИзменилсяВидСкидки));
	
	ВалютаРасчетовПередИзменением = ВалютаРасчетов;
	ВалютаРасчетов = ДанныеДоговора.ВалютаРасчетов;
	
	НовыйДоговорИВалютаРасчетов = ЗначениеЗаполнено(Объект.Договор) И ЗначениеЗаполнено(ВалютаРасчетов) 
									И Объект.Договор <> ДоговорПередИзменением И ВалютаРасчетовПередИзменением <> ДанныеДоговора.ВалютаРасчетов;
	ОткрытьФормуЦеныИВалюты = НовыйДоговорИВалютаРасчетов И Объект.ВалютаДокумента <> ДанныеДоговора.ВалютаРасчетов
		И (Объект.Запасы.Количество() > 0 ИЛИ Объект.СтоимостьДоставки<>0);
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("ДоговорПередИзменением", ДоговорПередИзменением);
	ПараметрыДокумента.Вставить("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением);
	ПараметрыДокумента.Вставить("ДанныеДоговора", ДанныеДоговора);
	ПараметрыДокумента.Вставить("ВопросВидЦен", ВопросВидЦен);
	ПараметрыДокумента.Вставить("ОткрытьФормуЦеныИВалюты", ОткрытьФормуЦеныИВалюты);
	ПараметрыДокумента.Вставить("ИзменилсяВидЦен", ИзменилсяВидЦен);
	ПараметрыДокумента.Вставить("ИзменилсяВидСкидки", ИзменилсяВидСкидки);
	ПараметрыДокумента.Вставить("ОчиститьДисконтнуюКарту", ОчиститьДисконтнуюКарту);
	ПараметрыДокумента.Вставить("ПересчетНеобходимПоЗапасам", Объект.Запасы.Количество() > 0);
	ПараметрыДокумента.Вставить("ПересчетНеобходимПоРаботам", Ложь);
	
	ОбработатьИзменениеВидаЦенИВалютыРасчетов(ПараметрыДокумента);
	
	// Номенклатура.
	УстановитьПараметрыВыбораНоменклатуры();
	
КонецПроцедуры

// Выполняет действия после ответа на вопрос об очистке предоплаты.
//
&НаКлиенте
Процедура ВопросОбОчисткеПредоплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДоговорПередИзменением = ДополнительныеПараметры.ДоговорПередИзменением;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Предоплата.Очистить();
	Иначе
		Если ДополнительныеПараметры.Свойство("ИзменениеКонтрагента") Тогда
			Объект.Контрагент = ДополнительныеПараметры.КонтрагентПередИзменением;
			Объект.КонтактноеЛицоПодписант = ДополнительныеПараметры.КонтактноеЛицоПодписант;
			Контрагент = ДополнительныеПараметры.КонтрагентПередИзменением;
			Элементы.Договор.Видимость = ДополнительныеПараметры.ВидимостьДоговораПередИзменением;
		КонецЕсли;
		Объект.Договор = ДоговорПередИзменением;
		Договор = ДоговорПередИзменением;
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеУсловийДоговора(ДополнительныеПараметры.ДанныеДоговора, ДоговорПередИзменением);

КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьИОстаткиВзаиморасчетов()
	
	Элементы.ОстатокВзаиморасчетов.Видимость = Не ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.Контрагент.АвтоМаксимальнаяШирина = Не Элементы.ОстатокВзаиморасчетов.Видимость;
	
	Если (ОбщегоНазначения.ЭтоМобильныйКлиент() ИЛИ НЕ Элементы.ГруппаПредоплата.Видимость) И НЕ Элементы.ОстатокВзаиморасчетов.Видимость Тогда
		Элементы.ОстатокВзаиморасчетовСтраницаОплата.Видимость = Ложь;
		Возврат;
	Иначе
		Элементы.ОстатокВзаиморасчетовСтраницаОплата.Видимость = НЕ Элементы.ОстатокВзаиморасчетов.Видимость И НЕ Объект.Контрагент.Ссылка.Пустая();
	КонецЕсли;
	
	Элементы.Контрагент.МаксимальнаяШирина = 22;
	Элементы.ОстатокВзаиморасчетов.Заголовок = РаботаСКонтрагентамиУНФ.ЗаголовокНадписиВзаиморасчетов(Объект.Контрагент);
	Элементы.ОстатокВзаиморасчетовСтраницаОплата.Заголовок = Элементы.ОстатокВзаиморасчетов.Заголовок;
	
КонецПроцедуры

//@skip-warning обработчик ожидания
&НаКлиенте
Процедура ПоказатьВыборИзКлассификатораКонтактов()
	
	ЭлектроннаяПочтаУНФКлиент.ПоказатьВыборИзКлассификатораКонтактов(ЭтотОбъект);
	
КонецПроцедуры

// Открыть форму цены и валюта завершение.
// 
// Параметры:
//  РезультатФормыЦеныИВалюта - см. ЦеныИВалютаКлиентСервер.РезультатФормыЦеныИВалюта
//  ДополнительныеПараметры - Структура
&НаКлиенте
Процедура ОткрытьФормуЦеныИВалютаЗавершение(РезультатФормыЦеныИВалюта, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатФормыЦеныИВалюта) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РезультатФормыЦеныИВалюта.БылиВнесеныИзменения Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Объект.ВидЦен = РезультатФормыЦеныИВалюта.ВидЦен;
	Объект.ВидСкидкиНаценки = РезультатФормыЦеныИВалюта.ВидСкидкиНаценки;
	
	// ДисконтныеКарты
	Если ЗначениеЗаполнено(РезультатФормыЦеныИВалюта.ДисконтнаяКарта) И ЗначениеЗаполнено(РезультатФормыЦеныИВалюта.Контрагент) И Не Объект.Контрагент.Пустая() Тогда
		Если РезультатФормыЦеныИВалюта.Контрагент = Объект.Контрагент Тогда
			Объект.ДисконтнаяКарта = РезультатФормыЦеныИВалюта.ДисконтнаяКарта;
			Объект.ПроцентСкидкиПоДисконтнойКарте = РезультатФормыЦеныИВалюта.ПроцентСкидкиПоДисконтнойКарте;
		Иначе // Выдадим сообщение и не будем менять данные о дисконтной карте.
			ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр(
				"ru = 'Дисконтная карта не считана. Владелец дисконтной карты не совпадает с контрагентом в документе.'"), ,
				"Контрагент", "Объект");
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(РезультатФормыЦеныИВалюта.ДисконтнаяКарта) И ЗначениеЗаполнено(РезультатФормыЦеныИВалюта.Контрагент) И Объект.Контрагент.Пустая() Тогда
		Объект.Контрагент = РезультатФормыЦеныИВалюта.Контрагент;
		КонтрагентПриИзменении(Элементы.Контрагент); // Данные о дисконтной карте в этой процедуре очищаются.
		Объект.ДисконтнаяКарта = РезультатФормыЦеныИВалюта.ДисконтнаяКарта;
		Объект.ПроцентСкидкиПоДисконтнойКарте = РезультатФормыЦеныИВалюта.ПроцентСкидкиПоДисконтнойКарте;
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Заполнен контрагент и считана дисконтная карта'"),
			ПолучитьНавигационнуюСсылку(
			Объект.ДисконтнаяКарта), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'В документе заполнен контрагент и считана дисконтная карта %1'"), Объект.ДисконтнаяКарта),
			БиблиотекаКартинок.Информация32);
	Иначе
		Объект.ДисконтнаяКарта = РезультатФормыЦеныИВалюта.ДисконтнаяКарта;
		Объект.ПроцентСкидкиПоДисконтнойКарте = РезультатФормыЦеныИВалюта.ПроцентСкидкиПоДисконтнойКарте;
	КонецЕсли;
	// Конец ДисконтныеКарты
	
	Объект.ВалютаДокумента = РезультатФормыЦеныИВалюта.ВалютаДокумента;
	Объект.Курс = РезультатФормыЦеныИВалюта.КурсРасчетов;
	Объект.Кратность = РезультатФормыЦеныИВалюта.КратностьРасчетов;
	
	Объект.СуммаВключаетНДС = РезультатФормыЦеныИВалюта.СуммаВключаетНДС;
	Объект.НДСВключатьВСтоимость = РезультатФормыЦеныИВалюта.НДСВключатьВСтоимость;
	Объект.НалогообложениеНДС = РезультатФормыЦеныИВалюта.НалогообложениеНДС;
	Объект.СпециальныйНалоговыйРежим = РезультатФормыЦеныИВалюта.СпециальныйНалоговыйРежим;
	
	ВалютаРасчетовПередИзменением = ДополнительныеПараметры.ВалютаРасчетовПередИзменением;
	
	ОбработатьИзмененияПоКнопкеЦеныИВалютыНаСервере(РезультатФормыЦеныИВалюта, ДополнительныеПараметры);
	
	// Пересчитываем цены по виду цен.
	Если РезультатФормыЦеныИВалюта.ПерезаполнитьЦены Тогда
		
		ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтотОбъект, "Запасы", Истина);
		
	КонецЕсли;
	
	// Пересчитываем цены по валюте.
	Если НЕ РезультатФормыЦеныИВалюта.ПерезаполнитьЦены
		И РезультатФормыЦеныИВалюта.ПересчитатьЦены Тогда
		
		ЦенообразованиеКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтотОбъект, ВалютаРасчетовПередИзменением,
			"Запасы", РезультатФормыЦеныИВалюта.КурсПересчетаЦен);
		// Доставка
		ПересчитатьЦенуДоставки(ВалютаРасчетовПередИзменением, РезультатФормыЦеныИВалюта.КурсПересчетаЦен);
		
	КонецЕсли;
	
	// Пересчитываем сумму если изменился признак Налогообложение НДС.
	Если РезультатФормыЦеныИВалюта.НалогообложениеНДС <> РезультатФормыЦеныИВалюта.ПредНалогообложениеНДС Тогда
		
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		
	КонецЕсли;
	
	// Пересчитываем сумму если изменился признак "Сумма включает НДС".
	Если НЕ РезультатФормыЦеныИВалюта.ПерезаполнитьЦены
		И НЕ РезультатФормыЦеныИВалюта.СуммаВключаетНДС = РезультатФормыЦеныИВалюта.ПредСуммаВключаетНДС Тогда
		
		ЦенообразованиеКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтотОбъект, "Запасы");
		// Доставка
		Если Объект.СтоимостьДоставки <> 0 Тогда
			ОбновитьСуммуНДСДоставкиПриРасчете(ЭтотОбъект);
		КонецЕсли; 
		
	КонецЕсли;
	
	// ДисконтныеКарты
	Если РезультатФормыЦеныИВалюта.ПерезаполнитьСкидки И Не РезультатФормыЦеныИВалюта.ПерезаполнитьЦены
		И РезультатФормыЦеныИВалюта.ИзмененаДисконтнаяКарта Тогда
		УправлениеНебольшойФирмойКлиент.ПерезаполнитьСкидкиТабличнойЧастиПослеСчитыванияДисконтнойКарты(ЭтотОбъект,
			"Запасы");
	КонецЕсли;
	// Конец ДисконтныеКарты
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
		
		СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
			СтрокаТабличнойЧасти.СуммаРасчетов,
			СтрокаТабличнойЧасти.Курс,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
			СтрокаТабличнойЧасти.Кратность,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КратностьНациональнаяВалюта, Объект.Кратность));
			
	КонецЦикла;
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	
	// АвтоматическиеСкидки
	Если РезультатФормыЦеныИВалюта.ПерезаполнитьСкидки
		Или РезультатФормыЦеныИВалюта.ПерезаполнитьЦены
		Или РезультатФормыЦеныИВалюта.ПересчитатьЦены Тогда
		СброситьФлагСкидкиРассчитаныКлиент("ПерезаполнениеПоДаннымФормыЦеныИВалюта");
	КонецЕсли;
	
	// Ручная скидка - заполнение полей ввода на форме
	СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект,, ПараметрыОтбораСтрок(ТекущийВариантКП));
	// Конец Ручная скидка
	
	ОбновитьИтогиКлиент();
	ПересчитатьПлатежныйКалендарь();
	ОчиститьКалькуляцию();
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыНаСервере(РезультатЗакрытия, ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.ВалютаРасчетовПередИзменением <> РезультатЗакрытия.ВалютаДокумента Тогда
		
		Объект.БанковскийСчет = Справочники.БанковскиеСчета.БанковскийСчетСубъекта(Объект.Организация, Объект.ВалютаДокумента, Объект.Дата);
		
	КонецЕсли;
	
	ОбновитьКартинкуДисконтнойКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьНеобходимостьПересчетаДокументаПоУсловиямДоговора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	Если ДополнительныеПараметры.ПересчетНеобходимПоЗапасам Тогда

		ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтотОбъект, "Запасы", Истина);

	КонецЕсли;

	Если ДополнительныеПараметры.ПересчетНеобходимПоРаботам Тогда

		ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен();

	КонецЕсли;

	ОбновитьИтогиКлиент();
	ПересчитатьПлатежныйКалендарь();

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступностьМобильноеПриложение()
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		Элементы.ОтгрузкаИОплата.Видимость = Ложь;
		Элементы.ГруппаЦеныИВалюта.Видимость = Ложь;
		Элементы.СтраницаДополнительно.Видимость = Ложь;
		Элементы.ИтогСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыКомандыКопированияСтрок.Видимость = Ложь;
		Элементы.ЗагрузкаДанныхИзВнешнегоИсточника.Видимость = Ложь;
		Элементы.ЗапасыИзменитьСтроки.Видимость = Ложь;
		Элементы.КомандыГлобальные.Видимость = Ложь;
		Элементы.ШапкаТабличнаяЧасть.Видимость = Ложь;
		Элементы.ПоказатьВЖурналеКонтрагентов.Видимость = Ложь;
		Элементы.ФормаОбщаяКомандаНапомнитьЗаказПокупателя.Видимость = Ложь;
		Элементы.ЗапасыПодбор.Видимость = Ложь;
		Элементы.ВидИСостояние.Видимость = Ложь;
		Если НЕ ЗначениеЗаполнено(Объект.ДатаОтгрузки) Тогда
			Объект.ДатаОтгрузки = ТекущаяДатаСеанса();
		КонецЕсли;
		Элементы.ФормаЗаписать.Видимость = Ложь;
		Элементы.ФормаПровести.Видимость = Ложь;
		Элементы.ФормаОтменаПроведения.Видимость = Ложь;
		Элементы.ФормаПоказатьВСписке.Видимость = Ложь;
		Элементы.ФормаКоманднаяПанельКомандыЭДО.Видимость = Ложь;
		Элементы.ФормаПровестиИЗакрыть.Заголовок = НСтр("ru = 'Готово'");
		// Доставка
		Элементы.СтавкаНДСДоставки.Видимость = Ложь;
		Элементы.СуммаНДСДоставки.Видимость = Ложь;
	КонецЕсли;
	// Конец МобильноеПриложение
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаписьКонтрагентаНаСервере(Знач Контрагент)
	
	ПрочитатьРеквизитыКонтрагента(РеквизитыКонтрагента, Контрагент);
	
	ДанныеКонтактныхЛиц = ДанныеКонтактныхЛиц(Контрагент);
	АдресаДоставки = АдресаДоставки(Контрагент);
	
	Если ЗначениеЗаполнено(АдресаДоставки)
		И Не ЗначениеЗаполнено(Объект.АдресДоставки) Тогда
		Объект.АдресДоставки = АдресаДоставки[0].АдресДоставки;
		Объект.АдресДоставкиЗначение = АдресаДоставки[0].АдресДоставкиЗначение;
		Объект.АдресДоставкиЗначенияПолей = АдресаДоставки[0].АдресДоставкиЗначенияПолей;
	КонецЕсли;
	
	ЗаполнитьСписокВыбораПолучателя(Элементы.КонтактноеЛицо, ДанныеКонтактныхЛиц);
	ЗаполнитьСписокВыбораАдресаДоставки(Элементы.АдресДоставкиПолучателя, АдресаДоставки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПрочитатьРеквизитыКонтрагента(СтруктураРеквизитов, знач Контрагент)
	
	Реквизиты = "ВестиРасчетыПоДоговорам";
	
	Если СтруктураРеквизитов = Неопределено Тогда
		СтруктураРеквизитов = Новый Структура(Реквизиты);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, Реквизиты));
	Иначе
		СтруктураРеквизитов.ВестиРасчетыПоДоговорам = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВозможностьРедактированияСпискомЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Пока Объект.ПлатежныйКалендарь.Количество() > 1 Цикл
		Объект.ПлатежныйКалендарь.Удалить(Объект.ПлатежныйКалендарь.Количество()-1);
	КонецЦикла;
	
	Элементы.РедактироватьСписком.Пометка = НЕ Элементы.РедактироватьСписком.Пометка;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКолонкуРезервПоОстаткамЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьКолонкуРезервПоОстаткамНаСервере();
		
		Если Объект.СкидкиРассчитаны Тогда
			
			Если Объект.Запасы.Количество() = 0 Тогда
				Если Объект.СкидкиНаценки.Количество() > 0 Тогда
					Объект.СкидкиНаценки.Очистить();
				КонецЕсли;
				Возврат;
			КонецЕсли;
			
			РассчитатьСкидкиНаценкиКлиент();
			ОбновитьИтогиКлиент();
			ОчиститьКалькуляцию();
			ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	Элементы.ФормаПровести.Доступность = РазрешеноРедактированиеДокумента;
	Элементы.ФормаЗаписать.Доступность = РазрешеноРедактированиеДокумента;
	Элементы.ФормаПровестиИЗакрыть.Доступность = РазрешеноРедактированиеДокумента;
	
	РедактироватьСписком	= Элементы.РедактироватьСписком.Пометка;
	ЭтоЗаказНаПереработку	= Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку");
	ЗаказЗавершен			= Объект.СостояниеЗаказа = ПредопределенноеЗначение("Справочник.СостоянияЗаказовПокупателей.Завершен");
	ЗаказОтменен			= Объект.ВариантЗавершения = ПредопределенноеЗначение("Перечисление.ВариантыЗавершенияЗаказа.Отменен");
	ДатаОтгрузкиВШапке		= Объект.ПоложениеДатыОтгрузки <> ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");
	СкладВШапке				= Объект.ПоложениеСклада <> ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") ИЛИ ЭтоЗаказНаПереработку;
	
	Если ЭтоЗаказНаПереработку Тогда
		
		Элементы.ОстаткиИРезервы.Пометка = Ложь;
		Элементы.ОстаткиИРезервы.Видимость = Ложь;
		
		Если РежимОстаткиИРезервы Тогда
			РежимОстаткиИРезервы = Ложь;
			ОбновитьОтображениеКолонокВРазрезеЗапасовСервер();
		КонецЕсли;
		
	Иначе
		
		Элементы.ОстаткиИРезервы.Видимость = Истина;
		
	КонецЕсли;
	
	Элементы.ДатаОтгрузки.Видимость						= ДатаОтгрузкиВШапке;
	Элементы.ЗапасыДатаОтгрузки.Видимость				= Не ДатаОтгрузкиВШапке;
	Элементы.СтруктурнаяЕдиницаРезерв.Видимость			= СкладВШапке И (РезервированиеЗапасов ИЛИ Объект.УчетПотребностиПоСкладам);
	Элементы.ВариантыКПОтступ.Видимость					= Элементы.СтруктурнаяЕдиницаРезерв.Видимость И НЕ ОбщегоНазначения.ЭтоМобильныйКлиент();
	Элементы.ЗапасыСтруктурнаяЕдиницаРезервТЧ.Видимость	= Не СкладВШапке И Не РежимОстаткиИРезервы И (РезервированиеЗапасов ИЛИ Объект.УчетПотребностиПоСкладам);
	Элементы.БанковскийСчет.Видимость					= Объект.ТипДенежныхСредств = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Безналичные");
	Элементы.Касса.Видимость							= Объект.ТипДенежныхСредств = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Наличные");
	Элементы.ПлатежныйКалендарьСтрокой.Видимость		= Не РедактироватьСписком;
	Элементы.СписокПлатежныйКалендарь.Видимость			= РедактироватьСписком;
	Элементы.Договор.Видимость							= РеквизитыКонтрагента.ВестиРасчетыПоДоговорам;
	Элементы.ЗапасыКомандыИзменитьРезерв.Видимость		= Не ЭтоЗаказНаПереработку;
	Элементы.ЗапасыРезерв.Видимость						= Не ЭтоЗаказНаПереработку;
	Элементы.СтраницаМатериалыЗаказчика.Видимость		= ЭтоЗаказНаПереработку;
	Элементы.ЗапасыПартия.Видимость						= Не ЭтоЗаказНаПереработку И РезервированиеЗапасов;
	Элементы.СтраницаЗавершениеЗаказа.Видимость			= ЗаказЗавершен;
	Элементы.ПричинаОтмены.Доступность					= ЗаказОтменен;
	Элементы.ПлатежныйКалендарьПоля.Доступность			= Объект.ЗапланироватьОплату;
	Элементы.БанковскийСчет.ОтметкаНезаполненного		= Объект.ЗапланироватьОплату И Не ЗначениеЗаполнено(Объект.БанковскийСчет);
	Элементы.Касса.ОтметкаНезаполненного				= Объект.ЗапланироватьОплату И Не ЗначениеЗаполнено(Объект.Касса);
	
	Элементы.ЗаполнитьОбновитьКалькуляцию.Видимость 	= НЕ Объект.КалькуляцияРассчитана И НЕ ТолькоПросмотр;
	Элементы.ОткрытьКалькуляцию.Видимость				= Объект.КалькуляцияРассчитана;
	
	Элементы.РедактироватьСписком.Доступность 		   	= Объект.ЗапланироватьОплату;
	Элементы.ПлатежныйКалендарьОбщаяГруппа.Доступность 	= Объект.ЗапланироватьОплату;
	
	Элементы.ИзменитьРезервЗаполнитьПоОстаткамБезРазбиения.Доступность = Не ТолькоПросмотр;
	Элементы.ОстаткиИРезервы.Доступность = Не ТолькоПросмотр;
	
	// Наборы
	ВидимостьНаборов = Ложь;
	Для каждого Стр Из Объект.Запасы Цикл
		Если Стр.КартинкаНабора>0 Тогда
			ВидимостьНаборов = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	Если Элементы.ЗапасыКартинкаНабора.Видимость<>ВидимостьНаборов Тогда
		Элементы.ЗапасыКартинкаНабора.Видимость = ВидимостьНаборов;
	КонецЕсли; 
	// Конец Наборы
	
	Если ОбязательноЗаполнятьИсточникВЗаказах Тогда
		Элементы.ИсточникПривлечения.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	// Номенклатура.
	УстановитьПараметрыВыбораНоменклатуры();
	
	Элементы.СтраницаОбменССайтом.Видимость = ИспользоватьОбменССайтами;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ФормаДокументПриходнаяНакладнаяСоздатьНаОсновании", 
		"Заголовок",
		НСтр("ru = 'Возврат от покупателя'"));
		
	// Взаиморасчеты
	Элементы.ГруппаПредоплата.Видимость = (Объект.ВидОперации = ВидОперацииЗаказНаПродажу И Объект.Контрагент.ВестиРасчетыПоЗаказам);
	// Конец Взаиморасчеты
	
	КонтрагентПроект = Объект.Проект.Контрагент;
	Если ЗначениеЗаполнено(Объект.Проект) И ЗначениеЗаполнено(КонтрагентПроект) 
		И НЕ Объект.Контрагент = КонтрагентПроект Тогда
		Объект.Проект = Справочники.Проекты.ПустаяСсылка()
	КонецЕсли;
	
	// ПараметрическиеСпецификации
	Если ЭтоЗаказНаПереработку И НЕ ТолькоПросмотр Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			Если СтрокаТабличнойЧасти.ЭтоШаблонСпецификации Тогда
				СтрокаТабличнойЧасти.Спецификация = Неопределено;
				СтрокаТабличнойЧасти.ЭтоШаблонСпецификации = Ложь;
				СтрокаТабличнойЧасти.ЕстьДопРеквизитыСпецификации = Ложь;
			КонецЕсли; 
		КонецЦикла;
		Объект.РеквизитыПараметрическихСпецификаций.Очистить();
	КонецЕсли; 
	// Конец ПараметрическиеСпецификации
	
	// ОплатаБонусами
	ВидимостьПодменюБонусыИСертификаты = Ложь;
	Элементы.ПредоплатаДобавитьОплатуБонусами.Видимость = НЕ ЭтоЗаказНаПереработку;
	Для Каждого КнопкиПодменю Из Элементы.ПредоплатаГруппаДобавитьПодменю.ПодчиненныеЭлементы Цикл
		Если КнопкиПодменю.Видимость Тогда
			ВидимостьПодменюБонусыИСертификаты = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Элементы.ПредоплатаГруппаДобавитьПодменю.Видимость = ВидимостьПодменюБонусыИСертификаты;
	// Конец ОплатаБонусами
	
	// Итоги по весу и объему
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИтогОбъем",
		"Видимость", ПоказыватьКолонкуОбъемВЗаказеПокупателя);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИтогВес",
		"Видимость", ПоказыватьКолонкуВесВЗаказеПокупателя);		
	
	Справочники.ПроцессыСостоянийЗаказов.УстановитьПризнакОбязательногоЗаполненияПоля(Элементы, "ОтмененныеЗапасы.ПричинаОтмены", Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьЭлементовПоНастройкеПользователя(Форма)
	
	Элементы = Форма.Элементы;
	
	// Видимость колонок, настроенная пользователем
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСодержание", "Видимость",
		Форма.ПоказыватьКолонкуСодержаниеВЗаказеПокупателяЗапасы);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыВес", "Видимость",
		Форма.ПоказыватьКолонкуВесВЗаказеПокупателя);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыОбъем", "Видимость",
		Форма.ПоказыватьКолонкуОбъемВЗаказеПокупателя);
		
	// Итоги по весу и объему
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИтогОбъем",
		"Видимость", Форма.ПоказыватьКолонкуОбъемВЗаказеПокупателя);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИтогВес",
		"Видимость", Форма.ПоказыватьКолонкуВесВЗаказеПокупателя);

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораНоменклатуры()
	
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ЗаказПокупателя", НастройкиФормыВыбораНоменклатуры);
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ЗаказПокупателя", НастройкиФормыВыбораНоменклатуры,,"МатериалыЗаказчика");
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
	НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	Если (Не ЗначениеЗаполнено(ВалютаРасчетов) Или ВалютаРасчетов = НациональнаяВалюта)
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу") Тогда
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
	КонецЕсли;
	МассивТипов = Новый ФиксированныйМассив(НовыйМассив);
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипНоменклатуры", МассивТипов);
	НовыйПараметр2 = Новый ПараметрВыбора("Дополнительно.ОграничениеТипа", МассивТипов);
	НовыйПараметр3 = Новый ПараметрВыбора("Дополнительно.ТипВладельца", "ЗаказПокупателя");
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыйМассив.Добавить(НовыйПараметр2);
	НовыйМассив.Добавить(НовыйПараметр3);
	
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.ЗапасыНоменклатура.ПараметрыВыбора = НовыеПараметры;
	
	Если (ЗначениеЗаполнено(ВалютаРасчетов) И ВалютаРасчетов <> НациональнаяВалюта)
		ИЛИ Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу") Тогда
		Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
			Если СтрокаЗапасы.ЭтоРазделитель Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаЗапасы.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат") Тогда
				СтрокаЗапасы.Номенклатура = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "МатериалыЗаказчика");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСостояниеЗаказаПокупателя(ВидЗаказа)
	
	Возврат ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказаПокупателя(ВидЗаказа);
	
КонецФункции

&НаКлиенте
Процедура УстановитьТекущейСтраницейЗавершениеЗаказа()
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗавершениеЗаказа;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтогиКлиент()
	
	ДанныеДляРасчетаИтогов = Новый Структура;
	ДанныеДляРасчетаИтогов.Вставить("ТекущийВариантКП", ТекущийВариантКП);
	ДанныеДляРасчетаИтогов.Вставить("СтоимостьДоставки", СтоимостьДоставкиСНДС);
	ДанныеДляРасчетаИтогов.Вставить("СуммаНДСДоставки", Объект.СуммаНДСДоставки);
	
	// Ручная скидка - заполнение полей ввода на форме
	СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект,, ПараметрыОтбораСтрок(ТекущийВариантКП));
	// Конец Ручная скидка

	ОбновитьИтоги(
		Объект.Запасы,
		ИтогВсего,
		ИтогСуммаНДС,
		ДанныеДляРасчетаИтогов);
	ЗаполнитьЗаголовокГруппыСтоимость(ЭтотОбъект);

	Объект.СуммаДокумента = ИтогВсего + Объект.Работы.Итог("Всего");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиСервер()
	
	ДанныеДляРасчетаИтогов = Новый Структура;
	ДанныеДляРасчетаИтогов.Вставить("ТекущийВариантКП", ТекущийВариантКП);
	ДанныеДляРасчетаИтогов.Вставить("СтоимостьДоставки", СтоимостьДоставкиСНДС);
	ДанныеДляРасчетаИтогов.Вставить("СуммаНДСДоставки", Объект.СуммаНДСДоставки);
	
	// Ручная скидка - заполнение полей ввода на форме
	СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект,, ПараметрыОтбораСтрок(ТекущийВариантКП));
	// Конец Ручная скидка

	ОбновитьИтоги(
		Объект.Запасы,
		ИтогВсего,
		ИтогСуммаНДС,
		ДанныеДляРасчетаИтогов);
	Объект.СуммаДокумента = ИтогВсего + Объект.Работы.Итог("Всего");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(ТаблицаЗапасы, ИтогВсего, ИтогСуммаНДС, Знач ДанныеДляРасчетаИтогов)
	
	Родитель = Неопределено;
	Сумма    = 0;
	СуммаНДС = 0;
	Всего    = 0;
	
	ИтогВсего = 0;
	ИтогСуммаНДС = 0;
	
	Для Каждого Стр Из ТаблицаЗапасы.НайтиСтроки(Новый Структура("НомерВариантаКП", ДанныеДляРасчетаИтогов.ТекущийВариантКП)) Цикл
		Если Стр.ЭтоРазделитель Тогда
			Если Родитель <> Неопределено Тогда
				Родитель.Сумма    = Сумма;
				Родитель.СуммаНДС = СуммаНДС;
				Родитель.Всего    = Всего;
			КонецЕсли;
			Родитель = Стр;
			Сумма    = 0;
			СуммаНДС = 0;
			Всего    = 0;
		Иначе
			Сумма    = Сумма + Стр.Сумма;
			СуммаНДС = СуммаНДС + Стр.СуммаНДС;
			Всего    = Всего + Стр.Всего;
			
			ИтогВсего = ИтогВсего + Стр.Всего;
			ИтогСуммаНДС = ИтогСуммаНДС + Стр.СуммаНДС;
		КонецЕсли;
	КонецЦикла;
	
	Если Родитель <> Неопределено Тогда
		Родитель.Сумма    = Сумма;
		Родитель.СуммаНДС = СуммаНДС;
		Родитель.Всего    = Всего;
	КонецЕсли;
	
	ИтогВсего = ИтогВсего + ДанныеДляРасчетаИтогов.СтоимостьДоставки;
	ИтогСуммаНДС = ИтогСуммаНДС + ДанныеДляРасчетаИтогов.СуммаНДСДоставки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеПоляТабличнойЧасти()
	
	Для каждого Строка Из Объект.Запасы Цикл
		Строка.НоменклатураСсылка = Строка.Номенклатура;
	КонецЦикла;  
	
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы");
	
КонецПроцедуры

&НаСервере
Процедура ЗаменитьКоманду(Идентификатор, ИмяКоманды)
	
	Если НЕ ПараметрыПодключаемыхКоманд.Свойство("АдресТаблицыКоманд") ИЛИ НЕ ЭтоАдресВременногоХранилища(ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд) Тогда
		Возврат;
	КонецЕсли; 
	КомандыПечати = ПолучитьИзВременногоХранилища(ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд);
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Идентификатор", Идентификатор);
	Строки = КомандыПечати.НайтиСтроки(СтруктураОтбора);
	Если Строки.Количество()>0 Тогда
		СтароеИмяКоманды = Строки[0].ИмяВФорме;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, СтароеИмяКоманды, "Видимость", Ложь);
		Строки[0].ИмяВФорме = ИмяКоманды;
		ПоместитьВоВременноеХранилище(КомандыПечати, ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяКоманды, "Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРеквизитыЗаказаНаСайте()
	
	Если Не ИспользоватьОбменССайтами Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказыПокупателейССайта.НомерЗаказаНаСайте КАК НомерНаСайте,
	|	ЗаказыПокупателейССайта.ДатаЗаказаНаСайте КАК ДатаНаСайте
	|ИЗ
	|	РегистрСведений.ЗаказыПокупателейССайта КАК ЗаказыПокупателейССайта
	|ГДЕ
	|	ЗаказыПокупателейССайта.ЗаказПокупателя = &Заказ";
	
	Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НомерНаСайте = Выборка.НомерНаСайте;
		ДатаНаСайте = Выборка.ДатаНаСайте;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Объект.ИнформацияПоКонтрагенту.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаИнформацииПоКонтрагенту = "";
	Для каждого СтрокаТаблицы Из Объект.ИнформацияПоКонтрагенту Цикл
		
		СтрокаИнформацииПоКонтрагенту = СтрокаИнформацииПоКонтрагенту
			+ ?(СтрокаИнформацииПоКонтрагенту = "", "", "; ")
			+ СтрокаТаблицы.Вид + " - " + СтрокаТаблицы.Представление;
			
		Если СтрокаТаблицы.НомерСтроки >= 3 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрДлина(СтрокаИнформацииПоКонтрагенту) > 70 Тогда
		СтрокаИнформацииПоКонтрагенту = Сред(СтрокаИнформацииПоКонтрагенту, 1, 70);
	КонецЕсли;
	
	ТекстЗаголовка = "Информация о контрагенте: " + СтрокаИнформацииПоКонтрагенту + "...";
	Элементы.ПоказатьИнформациюПоКонтрагенту.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКартинкуДисконтнойКарты()
	
	Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		Команды.СчитатьДисконтнуюКарту.Картинка = БиблиотекаКартинок.СчитанаДисконтнаяКарта;
	Иначе
		Команды.СчитатьДисконтнуюКарту.Картинка = БиблиотекаКартинок.СчитатьДисконтнуюКарту;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеСостоянияЗаказа()
	
	Если Объект.СостояниеЗаказа = ПредопределенноеЗначение("Справочник.СостоянияЗаказовПокупателей.Завершен") Тогда
		Если ОжидаетсяВыборВариантаКП() Тогда
			Объект.ВариантЗавершения = ПредопределенноеЗначение("Перечисление.ВариантыЗавершенияЗаказа.Отменен");
		Иначе
			Объект.ВариантЗавершения = ПредопределенноеЗначение("Перечисление.ВариантыЗавершенияЗаказа.Успешно");
		КонецЕсли;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗавершениеЗаказа;
		#Если ВебКлиент Тогда
			// В веб-клиенте установка текущей страницы должна происходить после включения видимости у страницы
			ПодключитьОбработчикОжидания("УстановитьТекущейСтраницейЗавершениеЗаказа", 0.1, Истина);
		#КонецЕсли
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Функция СвободныйОстатокПоСтруктурнойЕдинице(СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия, ЕдиницаИзмерения)
	
Коэффициент = ?(ТипЗнч(ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения"), ЕдиницаИзмерения.Коэффициент, 1);
	
	Организация = Константы.УчетПоКомпании.Компания(Объект.Организация);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Партия", Партия);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ЗапасыОстаткиСвободные.КоличествоОстаток) КАК КоличествоСвободно,
	|	СУММА(ЗапасыОстаткиРезерв.КоличествоОстаток) КАК КоличествоРезерв
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(
	|			,
	|			Номенклатура = &Номенклатура
	|				И ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|				И Организация = &Организация
	|				И Характеристика = &Характеристика
	|				И Партия = &Партия
	|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЗапасыОстаткиСвободные,
	|	РегистрНакопления.Запасы.Остатки(
	|			,
	|			Номенклатура = &Номенклатура
	|				И ЗаказПокупателя = &Заказ
	|				И Организация = &Организация
	|				И Характеристика = &Характеристика
	|				И Партия = &Партия
	|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЗапасыОстаткиРезерв
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоличествоСвободно УБЫВ";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	СтруктураВозврата = Новый Структура("КоличествоСвободно, КоличествоРезерв");
	
	Пока Результат.Следующий() Цикл
		СтруктураВозврата.КоличествоСвободно = Результат.КоличествоСвободно/Коэффициент;
		СтруктураВозврата.КоличествоРезерв = ?(ЗначениеЗаполнено(Объект.Ссылка), Результат.КоличествоРезерв/Коэффициент, 0);
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьОтображениеКолонокВРазрезеЗапасов()
	
	Если РежимОстаткиИРезервы Тогда
		
		Элементы.ЗапасыОстатки.Видимость = Истина;
		Элементы.ЗапасыГруппаКПоступлению.Видимость = Истина;
		Элементы.ЗапасыОстатокОбщий.Видимость = Истина;
		
		Элементы.ЗапасыМожноОтгрузить.Видимость = РезервированиеЗапасов;
		
		Элементы.ЗапасыНеОтгружено.Видимость = Объект.Проведен;
		Элементы.ЗапасыСтруктурнаяЕдиницаРезерв.Видимость = РазрешитьСкладыВТабличныхЧастях;
		
		Если РезервированиеЗапасов Тогда
			Элементы.ЗапасыОбеспечение.Видимость = Объект.Проведен;
		Иначе
			Элементы.ЗапасыОбеспечение.Видимость = Ложь;
			
			Элементы.ЗапасыОбеспечено.Видимость = Ложь;
			Элементы.ЗапасыОстатокСвободно.Видимость = Ложь;
			Элементы.ЗапасыРезервДляРежимаОстатки.Видимость = Ложь;
			
		КонецЕсли;
		
		Элементы.ЗапасыСтруктурнаяЕдиницаРезервТЧ.Видимость = Ложь;
		Элементы.ЗапасыРезерв.Видимость = Ложь;
		Элементы.ЗапасыКонтекстноеМенюГруппаРаботаССтрокамиОбновить.Видимость = Истина;
		
	Иначе
		
		Элементы.ЗапасыОстатки.Видимость = Ложь;
		Элементы.ЗапасыГруппаКПоступлению.Видимость = Ложь;
		Элементы.ЗапасыОстатокОбщий.Видимость = Ложь;
		Элементы.ЗапасыНеОтгружено.Видимость = Ложь;
		
		Элементы.ЗапасыОбеспечение.Видимость = Ложь;
		Элементы.ЗапасыРезерв.Видимость = РезервированиеЗапасов;
		Элементы.ЗапасыСтруктурнаяЕдиницаРезервТЧ.Видимость = НЕ СкладВШапке 
			И (РезервированиеЗапасов ИЛИ Объект.УчетПотребностиПоСкладам);
		
		Элементы.ЗапасыКонтекстноеМенюГруппаРаботаССтрокамиОбновить.Видимость = Ложь;
		
	КонецЕсли;
	
	Элементы.ЗапасыИзменитьРезервЗаполнитьПоОстаткам.Видимость = РазрешитьСкладыВТабличныхЧастях;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеКолонокВРазрезеЗапасовСервер()
	
	Если РежимОстаткиИРезервы Тогда
		
		Элементы.ЗапасыОстатки.Видимость = Истина;
		Элементы.ЗапасыГруппаКПоступлению.Видимость = Истина;
		Элементы.ЗапасыОстатокОбщий.Видимость = Истина;
		
		Элементы.ЗапасыНеОтгружено.Видимость = Объект.Проведен;
		Элементы.ЗапасыОбеспечение.Видимость = Объект.Проведен;
		Элементы.ЗапасыРезерв.Видимость = Ложь;
		Элементы.ЗапасыСтруктурнаяЕдиницаРезервТЧ.Видимость = Ложь;
		Элементы.ЗапасыКонтекстноеМенюГруппаРаботаССтрокамиОбновить.Видимость = Истина;
		
	Иначе
		
		Элементы.ЗапасыОстатки.Видимость = Ложь;
		Элементы.ЗапасыГруппаКПоступлению.Видимость = Ложь;
		Элементы.ЗапасыОстатокОбщий.Видимость = Ложь;
		Элементы.ЗапасыНеОтгружено.Видимость = Ложь;
		Элементы.ЗапасыОбеспечение.Видимость = Ложь;
		
		Элементы.ЗапасыРезерв.Видимость = Истина;
		Элементы.ЗапасыСтруктурнаяЕдиницаРезервТЧ.Видимость = НЕ СкладВШапке 
			И (РезервированиеЗапасов ИЛИ Объект.УчетПотребностиПоСкладам);
		Элементы.ЗапасыКонтекстноеМенюГруппаРаботаССтрокамиОбновить.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные = Неопределено, НоменклатураОтбора = Неопределено)
	
	НоменклатураВДокументахСервер.ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧасти(Объект, СтруктураДанные, ТекущийВариантКП, НоменклатураОтбора, РезервированиеЗапасов)
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда Возврат КонецЕсли;
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Если Параметры.ВыбранноеПоле = "ЗапасыВРезерве" И Результат.Значение = Объект.Ссылка Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.ЗапасыРезервДляРежимаОстатки;
		Возврат;
	КонецЕсли;
	
	Если Параметры.ВыбранноеПоле = "ЗапасыОстатокОбщий" Тогда
		
		Если Результат.Значение = "ОтчетОстаткиНаСкладах" Тогда
			
			Если ТекущиеДанные = Неопределено ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда Возврат КонецЕсли;
			
			Вариант = РаботаСФормойДокументаКлиентСервер.ВариантОтчета("ОстаткиТоваров", "ПоМестамХранения");
			
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
			ОтборРасшифровки = Новый Соответствие;
			ОтборРасшифровки.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
			ОтборРасшифровки.Вставить("Характеристика", ТекущиеДанные.Характеристика);
			ОтборРасшифровки.Вставить("СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы", ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Склад"));
			ПараметрыОткрытия.Вставить("ОтборРасшифровки", ОтборРасшифровки);
			
			ВариантыОтчетовКлиент.ОткрытьФормуОтчета(, Вариант, ПараметрыОткрытия);
			
		КонецЕсли;
		
		
		Если Не РезервированиеЗапасов Или Не РазрешитьСкладыВТабличныхЧастях Тогда 
			Если Объект.УчетПотребностиПоСкладам И ТипЗнч(Результат.Значение) = Тип("Структура") 
				И Результат.Значение.Свойство("Склад") 
				И ТекущиеДанные.СтруктурнаяЕдиницаРезерв <> Результат.Значение.Склад Тогда
				ТекущиеДанные.СтруктурнаяЕдиницаРезерв = Результат.Значение.Склад;
			КонецЕсли;
			Возврат 
		КонецЕсли;
		
		Если Результат.Значение = "РаспределитьПоРезервам" Тогда
			
			ПараметрыОтбораНоменклатуры = Новый Структура;
			ПараметрыОтбораНоменклатуры.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
			ПараметрыОтбораНоменклатуры.Вставить("Характеристика", ТекущиеДанные.Характеристика);
			ПараметрыОтбораНоменклатуры.Вставить("Партия", ТекущиеДанные.Партия);
			ПараметрыОтбораНоменклатуры.Вставить("Цена", ТекущиеДанные.Цена);
			ПараметрыОтбораНоменклатуры.Вставить("ДатаОтгрузки", ТекущиеДанные.ДатаОтгрузки);
			ПараметрыОтбораНоменклатуры.Вставить("НомерВариантаКП", ТекущийВариантКП);
			
			ЗаполнитьКолонкуРезервПоОстаткамНаСервере(ПараметрыОтбораНоменклатуры);
			
			Модифицированность = Истина;
			
		Иначе
			
			Если ТипЗнч(Результат.Значение) = Тип("Структура") И Результат.Значение.Свойство("Склад") 
				И Не ТекущиеДанные.СтруктурнаяЕдиницаРезерв = Результат.Значение.Склад Тогда
				
				Если Не Объект.Проведен И ТекущиеДанные.Количество > ТекущиеДанные.МожноОтгрузить
										И Результат.Значение.Количество < ТекущиеДанные.МожноОтгрузить Тогда
					
					НоваяСтрока = Объект.Запасы.Вставить(ТекущиеДанные.НомерСтроки);
					ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущиеДанные);
					
					НоваяСтрока.СтруктурнаяЕдиницаРезерв = Результат.Значение.Склад;
					
					СтруктураОстатков = СвободныйОстатокПоСтруктурнойЕдинице(НоваяСтрока.СтруктурнаяЕдиницаРезерв, НоваяСтрока.Номенклатура
					, НоваяСтрока.Характеристика, НоваяСтрока.Партия, НоваяСтрока.ЕдиницаИзмерения);
					
					НоваяСтрока.Количество = ТекущиеДанные.Количество - ТекущиеДанные.МожноОтгрузить;
					
					ТекущиеДанные.Количество =  ТекущиеДанные.МожноОтгрузить;
					
					НоваяСтрока.Резерв = ?(СтруктураОстатков.КоличествоСвободно >= НоваяСтрока.Количество, НоваяСтрока.Количество, СтруктураОстатков.КоличествоСвободно);
					
					РассчитатьСуммуВСтрокеТабличнойЧасти(,ТекущиеДанные);
					РассчитатьСуммуВСтрокеТабличнойЧасти(,НоваяСтрока);
					
					ОбрабатываемаяСтрока = НоваяСтрока;
					
					ОбновитьИтогиКлиент();
					ПересчитатьПлатежныйКалендарь();
					ОчиститьКалькуляцию();
					ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
					
					Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
					
				Иначе
					
					ТекущиеДанные.СтруктурнаяЕдиницаРезерв = Результат.Значение.Склад;
					ОбрабатываемаяСтрока = ТекущиеДанные;
					
				КонецЕсли;
				
				СтруктураДанные = Новый Структура;
				СтруктураДанные.Вставить("Организация",Компания);
				СтруктураДанные.Вставить("Номенклатура",ОбрабатываемаяСтрока.Номенклатура);
				СтруктураДанные.Вставить("Характеристика",ОбрабатываемаяСтрока.Характеристика);
				СтруктураДанные.Вставить("Партия",ОбрабатываемаяСтрока.Партия);
				СтруктураДанные.Вставить("ИспользоватьХарактеристики",ОбрабатываемаяСтрока.ИспользоватьХарактеристики);
				СтруктураДанные.Вставить("ИспользоватьПартии", ОбрабатываемаяСтрока.ИспользоватьПартии);
				
				ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ПоказатьЗначение(,Результат.Значение);
		
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуТабличнойЧастиЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда Возврат КонецЕсли;
	
	СтрокаТабличнойЧасти = Параметры.СтрокаТабличнойЧасти;
	
	Если Результат <= 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Количество в новой строке должно быть больше нуля.'");
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Сообщить();
		Возврат
	КонецЕсли;
	
	Если Результат >= СтрокаТабличнойЧасти.Количество И СтрокаТабличнойЧасти.Отменен = 0  Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Количество в новой строке должно быть меньше чем в текущей.'");
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Сообщить();
		Возврат
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Отменен = 1 И Результат >= СтрокаТабличнойЧасти.КоличествоДоОтмены Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Количество в новой строке должно быть меньше чем в текущей.'");
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Сообщить();
		Возврат
	КонецЕсли;
	
	НоваяСтрока = Объект.Запасы.Вставить(СтрокаТабличнойЧасти.НомерСтроки);
	ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТабличнойЧасти);
	НоваяСтрока.Резерв = 0;
	
	Если СтрокаТабличнойЧасти.Отменен = 1 Тогда
		
		КоличествоВСтроке = СтрокаТабличнойЧасти.Количество;
		
		ОтменитьВернутьЗапасы(СтрокаТабличнойЧасти); 
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество - Результат;
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТабличнойЧасти); 
		
		НоваяСтрока.Отменен = 0;
		НоваяСтрока.Количество = Результат;
		ОтменитьВернутьЗапасы(НоваяСтрока);
		НоваяСтрока.Резерв = 0;
		
		Если СтрокаТабличнойЧасти.Количество < СтрокаТабличнойЧасти.Резерв Тогда
			РезервПревышенНа = СтрокаТабличнойЧасти.Резерв - СтрокаТабличнойЧасти.Количество;
			НоваяСтрока.Резерв = РезервПревышенНа;
			СтрокаТабличнойЧасти.Резерв = СтрокаТабличнойЧасти.Резерв - РезервПревышенНа;
		КонецЕсли;
		
		НастроитьЭлементыОтменыТоваров();
		
	Иначе
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество - Результат;
		НоваяСтрока.Количество = Результат;
	КонецЕсли;
	
	Если ИспользоватьАвтоматическиеСкидки Тогда
		// Автоматические скидки стали неактуальны.
		СброситьФлагСкидкиРассчитаныКлиент("ПриНачалеРедактирования");
	ИначеЕсли (НоваяСтрока.ПроцентАвтоматическойСкидки <> 0 ИЛИ НоваяСтрока.СуммаАвтоматическойСкидки <> 0) Тогда
		
		НоваяСтрока.ПроцентАвтоматическойСкидки = 0;
		НоваяСтрока.СуммаАвтоматическойСкидки = 0;
		
		СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки = 0;
		СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = 0;
		
	КонецЕсли;
	
	НоваяСтрока.КлючСвязи = 0;
	НоваяСтрока.СерииНоменклатуры = "";
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, НоваяСтрока, , 
		КэшЗначений.ПередачаТоваровМеждуОрганизациями);
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(,СтрокаТабличнойЧасти);
	РассчитатьСуммуВСтрокеТабличнойЧасти(,НоваяСтрока);
	
	ОбновитьИтогиКлиент();
	ПересчитатьПлатежныйКалендарь();
	ОчиститьКалькуляцию();
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	
	Если РежимОстаткиИРезервы Тогда
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Компания);
		СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
		СтруктураДанные.Вставить("Партия", 	СтрокаТабличнойЧасти.Партия);
		СтруктураДанные.Вставить("ИспользоватьХарактеристики", СтрокаТабличнойЧасти.ИспользоватьХарактеристики);
		СтруктураДанные.Вставить("ИспользоватьПартии", СтрокаТабличнойЧасти.ИспользоватьПартии);
		
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные);
		
	КонецЕсли;
	
	Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПоложениеСклада()
	
	Если СкладВШапке И РазрешитьСкладыВТабличныхЧастях Тогда
		
		ЗначениеСклада = Объект.СтруктурнаяЕдиницаРезерв;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			
			Если НЕ СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = ЗначениеСклада Тогда
				Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");
				УправлениеФормой();
				// ГрупповоеИзменениеСтрок
				ЗаполнитьСписокДействий();
				// Конец ГрупповоеИзменениеСтрок
				Возврат;
			КонецЕсли;
			
			ЗначениеСклада = СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаказОтгружен()
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ЗаказыПокупателейОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя = &Ссылка) КАК ЗаказыПокупателейОстатки";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	ЗначениеВозврата = Ложь;
	
	Пока Результат.Следующий() Цикл
		ЗначениеВозврата = ?(Не ЗначениеЗаполнено(Результат.КоличествоОстаток), Истина, Ложь);
	КонецЦикла;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

&НаСервере
Функция СписокДокументовПоЗаказу(ТипОперации, СтруктураПараметров)
	Возврат НоменклатураВДокументахСервер.СписокДокументовПоЗаказу(Объект, ТипОперации,СтруктураПараметров);
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнениеОбязательныхРеквизитов(Отказ)
	
	ОбязательныеДляЗаполненияРеквизиты = РегистрыСведений.ОбязательностьЗаполненияРеквизитов.ОбязательныеДляЗаполненияРеквизитыОбъекта("ЗаказПокупателя");
	
	Для Каждого Реквизит Из ОбязательныеДляЗаполненияРеквизиты Цикл
				
		Если ЗначениеЗаполнено(Объект[Реквизит]) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(
			ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", 
			"Источник привлечения"),,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Объект[%1]", Реквизит),,
			Отказ);
			
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыФормы()
	
	РезервированиеЗапасов = ПолучитьФункциональнуюОпцию("РезервированиеЗапасов");
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	УчетПотребностиПоСкладам = ПолучитьФункциональнуюОпцию("УчетПотребностиПоСкладам");
	РазрешитьСкладыВТабличныхЧастях = ПолучитьФункциональнуюОпцию("РазрешитьСкладыВТабличныхЧастях");
	
	НациональнаяВалюта = УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту();
	НациональнаяВалютаКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НациональнаяВалюта, ДатаДокумента);
	КурсНациональнаяВалюта = НациональнаяВалютаКурсКратность.Курс;
	КратностьНациональнаяВалюта = НациональнаяВалютаКурсКратность.Кратность;
	ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
	ИспользоватьВидыЗаказовПокупателей = ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей");
	ИспользоватьПараметрическиеСпецификации = ПолучитьФункциональнуюОпцию("ИспользоватьПараметрическиеСпецификации");
	ИспользоватьДополнительныеРеквизитыИСведения = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	
	Контрагент = Объект.Контрагент;
	
КонецПроцедуры

&НаСервере
Процедура ДействияПослеЧтенияОбъекта()
	
	// Наборы
	ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы);
	ОбновитьПризнакиНабора(Объект.Запасы);
	// Конец Наборы
	
	// ПараметрическиеСпецификации
	ОбновитьПризнакиПараметрическихСпецификаций(Объект.Запасы);
	ОбновитьОписанияДопРеквизитов(ЭтотОбъект);
	// Конец ПараметрическиеСпецификации
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеСпецификацияПриИзменении(СтруктураДанные)
	
	// ПараметрическиеСпецификации
	Если ЗначениеЗаполнено(СтруктураДанные.Спецификация)
		И ТипЗнч(СтруктураДанные.Спецификация)=Тип("СправочникСсылка.Спецификации") Тогда
		СтруктураДанные.Вставить("ЭтоШаблонСпецификации", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураДанные.Спецификация, "ЭтоШаблон"));
		СтруктураДанные.Вставить("ЕстьДопРеквизитыСпецификации", ПроизводствоСервер.ЕстьДопРеквизитыСпецификации(СтруктураДанные.Спецификация));
	Иначе
		СтруктураДанные.Вставить("ЭтоШаблонСпецификации", Ложь);
		СтруктураДанные.Вставить("ЕстьДопРеквизитыСпецификации", Ложь);
	КонецЕсли; 
	// Конец ПараметрическиеСпецификации
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоДаннымШтрихкодовЗавершение(СтруктураНоменклатуры, Параметры) Экспорт
	
	Если СтруктураНоменклатуры = Неопределено Тогда Возврат КонецЕсли;
	
	// СборкаЗаказов
	Если ФОСборкаЗаказов Тогда
		ИзменилосьРасхождение = Ложь;
	КонецЕсли;
	// Конец СборкаЗаказов	
	
	ДанныеШтрихкода = СтруктураНоменклатуры.МассивНоменклатуры[0];
	ТекШтрихкод = СтруктураНоменклатуры.ТекШтрихкод;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	СтруктураДанные = Параметры.СтруктураДанные;
	
	Если СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено Тогда
		ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры", ТекШтрихкод.Штрихкод, ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры));
	Иначе
		СтруктураПоиска = СформироватьСтруктуруПоискаСтрокиЗапасов(ДанныеШтрихкода, ТекущийВариантКП);
		МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(СтруктураПоиска);
		СборкаЗаказовКлиент.СортироватьМассивПоРасхождению(МассивСтрокТЧ);
		Если МассивСтрокТЧ.Количество() = 0 Тогда
			Если ФОСборкаЗаказов
				И РежимСборки
				И Не ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
				СтруктураПоиска.Удалить("ЕдиницаИзмерения");
				МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(СтруктураПоиска);
				Если МассивСтрокТЧ.Количество() = 0 Тогда
					ТекстСообщения = СтрШаблон("В заказе отсутствует ""%1"". Позиция не добавлена", ДанныеШтрихкода.Номенклатура);
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
					Возврат;
				Иначе
					НайденнаяСтрока = МассивСтрокТЧ[0];
					БылоРасхождение = НайденнаяСтрока.ЕстьРасхождение;
					НайденнаяСтрока.КоличествоСобрано = НайденнаяСтрока.КоличествоСобрано
						+ ТекШтрихкод.Количество*СборкаЗаказовВызовСервера.КоэффициентПриСборке(НайденнаяСтрока.ЕдиницаИзмерения, ДанныеШтрихкода.ЕдиницаИзмерения);
					СборкаЗаказовКлиент.РассчитатьРасхождения(ЭтаФорма, НайденнаяСтрока, Ложь);
					ИзменилосьРасхождение = ИзменилосьРасхождение ИЛИ (БылоРасхождение <> НайденнаяСтрока.ЕстьРасхождение);
				КонецЕсли;
			Иначе
				НоваяСтрока = Объект.Запасы.Добавить();
				ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "ДатаОтгрузки", "ПоложениеДатыОтгрузки");
				ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "СтруктурнаяЕдиницаРезерв", "ПоложениеСклада");
				НоваяСтрока.НомерВариантаКП = ТекущийВариантКП;
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
				НоваяСтрока.ПроцентСкидкиНаценки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПроцентСкидкиНаценки;
				НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
				НоваяСтрока.Спецификация = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Спецификация;
				НоваяСтрока.ЭтоШаблонСпецификации = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоШаблонСпецификации;
				НоваяСтрока.ЕстьДопРеквизитыСпецификации = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕстьДопРеквизитыСпецификации;
				Если НоваяСтрока.ЕстьДопРеквизитыСпецификации Тогда
					Если НоваяСтрока.КлючСвязи<>0 Тогда
						ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.РеквизитыПараметрическихСпецификаций, НоваяСтрока);
					КонецЕсли; 
					ЗаполнитьДопРеквизитыПоУмолчанию(НоваяСтрока.ПолучитьИдентификатор());
					ОбновитьОписанияДопРеквизитов(ЭтотОбъект, НоваяСтрока.КлючСвязи);
				КонецЕсли; 
				
				НоваяСтрока.ТипНоменклатурыЗапас = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоЗапас;
				Если НоваяСтрока.ТипНоменклатурыЗапас Тогда
					Если Объект.ПоложениеСклада=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
						НоваяСтрока.СтруктурнаяЕдиницаРезерв = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Склад;
					Иначе
						НоваяСтрока.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
					КонецЕсли; 
				КонецЕсли; 
				
				Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
					// Наборы
					ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, НоваяСтрока, ДанныеШтрихкода.СтруктураДанныеНоменклатуры);
					// Конец Наборы
					// АвтоматическиеСкидки.
					СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
					// Конец АвтоматическиеСкидки
				Иначе
					РассчитатьСуммуВСтрокеТабличнойЧасти( , НоваяСтрока);
					Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			НайденнаяСтрока = МассивСтрокТЧ[0];
			Если ФОСборкаЗаказов Тогда
				БылоРасхождение = НайденнаяСтрока.ЕстьРасхождение;
			КонецЕсли;
			Если ФОСборкаЗаказов И РежимСборки Тогда
				НайденнаяСтрока.КоличествоСобрано = НайденнаяСтрока.КоличествоСобрано + ТекШтрихкод.Количество;
				СборкаЗаказовКлиент.РассчитатьРасхождения(ЭтаФорма, НайденнаяСтрока, Ложь);
			Иначе
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + ТекШтрихкод.Количество;
				РассчитатьСуммуВСтрокеТабличнойЧасти( , НайденнаяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				Если ФОСборкаЗаказов Тогда
					СборкаЗаказовКлиент.РассчитатьРасхождения(ЭтаФорма, НайденнаяСтрока, Ложь);
				КонецЕсли;
			КонецЕсли;
			Если ФОСборкаЗаказов Тогда
				ИзменилосьРасхождение = ИзменилосьРасхождение ИЛИ (БылоРасхождение <> НайденнаяСтрока.ЕстьРасхождение);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ФОСборкаЗаказов И РежимСборки И ИзменилосьРасхождение Тогда
		СборкаЗаказовКлиент.ПереустановитьОтбор(Элементы);
	КонецЕсли;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
	ЗаполнитьНомераСтрокТаблицаЗапасы(Объект.Запасы, ТекущийВариантКП, ЗапасыКоличествоСтрок);
	ОбновитьИтогиКлиент();
	ОбновитьВидимостьКолонкиПараметровСпецификации(ЭтотОбъект);
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстСодержания(Знач Номенклатура, Знач Характеристика)
	Возврат ТабличныеЧастиУНФ.ТекстСодержания(Номенклатура, Характеристика);
КонецФункции

&НаКлиенте
Процедура ПослеВыполненияФоновогоЗадания(Прогресс, ДополнительныеПараметры) Экспорт
	
	Если НЕ Прогресс = Неопределено Тогда
		ОбработатьПодготовленныеДанные(Прогресс.АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеобходимостьПодключенияОбработчикаОжидания(ДлительнаяОперация, СтруктураПараметров = Неопределено)
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ПослеВыполненияФоновогоЗадания(ДлительнаяОперация, СтруктураПараметров);
		
	Иначе
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеВыполненияФоновогоЗадания", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Идет загрузка данных.'");
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты)
	
	ДокументыУНФ.ДатаПриИзменении(ДанныеДляИзмененияДаты, ЭтотОбъект, Объект);
	
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ДокументыУНФ.ОрганизацияПриИзменении(ЭтотОбъект, Объект);
	
	Объект.БанковскийСчет = Справочники.БанковскиеСчета.БанковскийСчетСубъекта(Объект.Организация,
		Объект.ВалютаДокумента, Объект.Дата);
	
	ВалютаИКассаПоУмолчанию = Справочники.Организации.ВалютаИКассаПоУмолчанию(Объект);
	Если ЗначениеЗаполнено(ВалютаИКассаПоУмолчанию) Тогда
		Объект.Касса = ВалютаИКассаПоУмолчанию.Касса;
	КонецЕсли;
	// Конец Касса по умолчанию
	
	Объект.Договор = Справочники.ДоговорыКонтрагентов.ПоДокументуКонтрагентуОрганизацииИВидуОперации(Объект.Ссылка,
		Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
	
	Если ДоставкаСервер.АдресОтправленияИзСклада() Тогда
		ПоляАдресаОтправления = ДоставкаСервер.ПоляАдресаОтправления(Объект.СтруктурнаяЕдиницаРезерв);
	Иначе
		ПоляАдресаОтправления = ДоставкаСервер.ПоляАдресаОтправления(Объект.Организация);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПоляАдресаОтправления);
	Элементы.АдресОтправления.РасширеннаяПодсказка.Заголовок = АдресОтправленияПодсказка;
	НастройкаЯндексДоставки = ЯндексДоставка.НастройкаПоОрганизации(Объект.Организация);
	
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
	ОбновитьСуммуНДСДоставки();
	
	УстановитьНастройкиУчетаВНалогообложении();
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
	ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов();
	
	УстановитьОтображениеГрузоперевозки();
	
	ОбновитьУсловияПечатныхФорм();

КонецПроцедуры

&НаСервере
Функция ДанныеКонтрагентаДляИзменения()
	
	ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПоДокументуКонтрагентуОрганизацииИВидуОперации(Объект.Ссылка,
		Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
	
	Результат = Новый Структура;
	
	Результат.Вставить("Договор", ДоговорПоУмолчанию);
	
	ДанныеДоговора = ДанныеДоговораДляИзменения(Объект.Дата, Объект.Контрагент, ДоговорПоУмолчанию, Объект.Организация,
		Объект.ВалютаДокумента);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат, ДанныеДоговора);
	
	ПрочитатьРеквизитыКонтрагента(РеквизитыКонтрагента, Контрагент);
	
	Если ПолучитьФункциональнуюОпцию("УчетПоПроектам") И НЕ ЗначениеЗаполнено(Объект.Проект) Тогда
		Результат.Вставить("Проект", Справочники.Проекты.ПолучитьПроектПоДоговору(ДоговорПоУмолчанию));
	КонецЕсли;
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	Результат.Вставить("ДанныеОсновногоКонтактногоЛица", ДанныеОсновногоКонтактногоЛица(Контрагент));
	Результат.Вставить("ДанныеКонтактныхЛиц", ДанныеКонтактныхЛиц(Контрагент));
	Результат.Вставить("АдресаДоставки", АдресаДоставки(Контрагент));
	
	// Внимание: побочный эффект во имя производительности - данные контрагента будут прочитаны при переключении на вкладку "Доставка".
	// Установка реквизита формы выполняется здесь для предотвращения излишнего серверного вызова.
	ДанныеКонтрагентаПрочитаны = Истина;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеДоговораДляИзменения(Знач Дата, Знач Контрагент, Знач Договор, Знач Организация, Знач ВалютаДокумента)
	
	Результат = Новый Структура;
	Результат.Вставить("ВалютаРасчетов", Договор.ВалютаРасчетов);
	ОтборВалютаРасчетов = Новый Структура("Валюта", Договор.ВалютаРасчетов);
	ВалютаРасчетовКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, ОтборВалютаРасчетов);
	Результат.Вставить("ВалютаРасчетовКурсКратность", ВалютаРасчетовКурсКратность);
	Результат.Вставить("РасчетыВУсловныхЕдиницах", Договор.РасчетыВУсловныхЕдиницах);
	Результат.Вставить("ВидСкидкиНаценки", Договор.ВидСкидкиНаценки);
	Результат.Вставить("ВидЦен", Договор.ВидЦен);
	Результат.Вставить("СуммаВключаетНДС", Неопределено);
	Если ЗначениеЗаполнено(Договор.ВидЦен) Тогда
		Результат.СуммаВключаетНДС = Договор.ВидЦен.ЦенаВключаетНДС;
	КонецЕсли;
	ОснованиеПечатиЗаказПокупателя = Константы.ОснованиеПечатиЗаказПокупателя.Получить();
	Результат.Вставить("ОснованиеПечатиЗаказПокупателя", ОснованиеПечатиЗаказПокупателя);
	Результат.Вставить("ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати",
		Константы.ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати.Получить());
	
	Если ВалютаДокумента <> Результат.ВалютаРасчетов Тогда
		БанковскийСчет = Справочники.БанковскиеСчета.БанковскийСчетСубъекта(Организация,
			Результат.ВалютаРасчетов, Дата);
		Результат.Вставить("БанковскийСчет", БанковскийСчет);
	КонецЕсли;
	
	СпособЗачетаПредоплаты = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляДоговора(Договор,
		Контрагент, Истина);
	
	Результат.Вставить("СпособЗачетаПредоплаты", СпособЗачетаПредоплаты);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРеквизитыПечати(ПараметрыФормы = Неопределено)
	
	НаборОснований = Новый Массив;
	НаборОснований.Добавить(Объект.Ссылка);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КонтекстПечати", Объект);
	ПараметрыОткрытия.Вставить("НаборОснований", НаборОснований);
	
	Если ПараметрыФормы <> Неопределено Тогда
		
		Если ПараметрыФормы.Свойство("ТекущийЭлемент") Тогда
			ПараметрыОткрытия.Вставить("ТекущийЭлемент", ПараметрыФормы.ТекущийЭлемент);
		КонецЕсли;
		
		Если ПараметрыФормы.Свойство("РазвернутьГруппы") Тогда
			ПараметрыОткрытия.Вставить("РазвернутьГруппы", ПараметрыФормы.РазвернутьГруппы);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("ГрузоотправительОнЖе", НЕ ЗначениеЗаполнено(Объект.Грузоотправитель));
	ПараметрыОткрытия.Вставить("ГрузополучательОнЖе", НЕ ЗначениеЗаполнено(Объект.Грузополучатель));
	
	ПараметрыОткрытия.Вставить("КонтекстПечати", Объект);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзмененияРеквизитовПечати", ЭтотОбъект);
	ОткрытьФорму("Обработка.РеквизитыПечати.Форма.РеквизитыПечатиЗаказПокупателя", ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокПодсказкиДатыОтгрузки()
		
	СтрокиЗаголовка =  Новый Массив();
    СтрокиЗаголовка.Добавить(Нстр("ru='Желаемая дата отгрузки в новых документах заполняется
		|в соответствии с '"));
	СтрокиЗаголовка.Добавить(Нстр("ru='настройкой '"));
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		СтрокиЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='договора контрагента'"),,,,
			ПолучитьНавигационнуюСсылку(Объект.Договор)));
	Иначе
		СтрокиЗаголовка.Добавить(НСтр("ru='договора контрагента'"));		
	КонецЕсли;
	
	СтрокиЗаголовка.Добавить(Символы.ПС);	
	СтрокиЗаголовка.Добавить(НСтр("ru='Указать параметры заполнения даты отгрузки по умолчанию
		|для новых договоров можно в '"));
	СтрокиЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='настройках программы'"),,,,"Настройка"));
	
	СтрокаЗаголовка = Новый ФорматированнаяСтрока(СтрокиЗаголовка);
	Элементы.ДатаОтгрузкиРасширеннаяПодсказка.Заголовок = СтрокаЗаголовка;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьДатуОтгрузкиКлиент()
	
	РасчетДатыОтгрузки = РассчитатьДатуОтгрузки(Объект.Дата, Объект.Договор);
	НоваяДатаОтгрузки = РасчетДатыОтгрузки.ДатаОтгрузки;
	
	Если ЗначениеЗаполнено(РасчетДатыОтгрузки.ТекстОшибки) Тогда
		ПоказатьПредупреждение(, РасчетДатыОтгрузки.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоваяДатаОтгрузки) И НоваяДатаОтгрузки <> Объект.ДатаОтгрузки Тогда
		СтараяДатаОтгрузки = Объект.ДатаОтгрузки;
		Объект.ДатаОтгрузки = НоваяДатаОтгрузки;
		
		Если Объект.ПоложениеДатыОтгрузки = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
			Для Каждого СтрокаТЧ Из Объект.Запасы Цикл
				
				Если ТипЗнч(СтрокаТЧ.Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
					Продолжить;
				КонецЕсли;
								
				СтрокаТЧ.ДатаОтгрузки = НоваяДатаОтгрузки;
			КонецЦикла;	
		КонецЕсли;
		
		Если СтараяДатаОтгрузки <> Дата(1,1,1) Тогда				
			СтрокаЗаголовка = НСтр("ru='Внимание'");
			СтрокаТекста = НСтр("ru='Дата отгрузки пересчитана в соответствии с договором'");
			ПоказатьОповещениеПользователя(СтрокаЗаголовка, , СтрокаТекста,,
				СтатусОповещенияПользователя.Информация)
		КонецЕсли;
				
	КонецЕсли;
		
КонецПроцедуры
	
&НаСервере
Функция РассчитатьДатуОтгрузки(ДатаДокумента, Договор)
	
	НоваяДатаОтгрузки = Документы.ЗаказПокупателя.РассчитатьДатуОтгрузки(ДатаДокумента, Договор);
	Возврат НоваяДатаОтгрузки;
	
КонецФункции

&НаСервере
Процедура ОбновитьВидимостьПодарков()  
	
	ОтборСтрокПодарков = Новый Структура("НомерВариантаКП", ТекущийВариантКП);
	СтрокиПодарков = Объект.Подарки.НайтиСтроки(ОтборСтрокПодарков);
	ЕстьПодарки = СтрокиПодарков.Количество() > 0;
	Если ЕстьПодарки Тогда
		ЗаполнитьНомераСтрокТаблицаПодарки(Объект.Подарки, ТекущийВариантКП, ПодаркиКоличествоСтрок);
	КонецЕсли;
	Элементы.СтраницаПодарки.Видимость = ЕстьПодарки;	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьБонусовКНачислению()  
	
	ОтборСтрокБонусов = Новый Структура("НомерВариантаКП", ТекущийВариантКП);
	СтрокиБонусов= Объект.БонусныеБаллыКНачислению.НайтиСтроки(ОтборСтрокБонусов);
	ЕстьБонусы = СтрокиБонусов.Количество() > 0;
	Если ЕстьБонусы Тогда
		ЗаполнитьНомераСтрокТаблицаБонусов(Объект.БонусныеБаллыКНачислению, ТекущийВариантКП, БонусыКНачислениюСуммаНачислено);
	КонецЕсли;
	Элементы.СтраницаБонусы.Видимость = ЕстьБонусы;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеГрузоперевозки()

	РаботаСФормойДокумента.НастроитьГруппуГрузоперевозки(ЭтотОбъект, Объект.Организация, Объект.Контрагент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНастройкиИзмененияКоличества()
	
	НастройкиКоличества = ДокументыУНФКлиентСервер.ПараметрыСбросаКоличества();
	ДокументыУНФ.ЗаполнитьНастройкиКоличества(НастройкиКоличества);
	Возврат НастройкиКоличества;
	
КонецФункции

&НаКлиенте
Функция ТипШтрихкодаПоддерживается(Штрихкод, ВыводитьПредупреждение = Истина)
	
	ТипыМарок = Новый Массив;
	ТипыМарок.Добавить("CODE128");
	ТипыМарок.Добавить("EAN128");
	ЗначениеТипаШтрихкода = МенеджерОборудованияКлиентСервер.ОпределитьТипШтрихкода(Штрихкод);
	
	ТипШтрихкодаПоддерживается = ТипыМарок.Найти(ЗначениеТипаШтрихкода) = Неопределено;
	
	Если НЕ ТипШтрихкодаПоддерживается И ВыводитьПредупреждение Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Считывание кодов маркировки в документе не поддерживается'"));
	КонецЕсли;
	
	Возврат ТипШтрихкодаПоддерживается;
	
КонецФункции

&НаСервере
Процедура ОбновитьУсловияПечатныхФорм()
	
	Если ПустаяСтрока(Объект.ТекстУсловийЗаказаПокупателя) Тогда
		Объект.УсловияЗаказаПокупателя = 
			УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("УсловияЗаказаПокупателя", Объект.Организация);
	КонецЕсли;

	Если ПустаяСтрока(Объект.ТекстУсловийКоммерческогоПредложения) Тогда
		Объект.УсловияКоммерческогоПредложения = 
			УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("УсловияКоммерческогоПредложения",
				Объект.Организация);
	КонецЕсли;
			
	Если ПустаяСтрока(Объект.ТекстУсловийСчетаЗаказа) Тогда
		Объект.УсловияСчетаЗаказа = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("УсловияСчетаЗаказа", 
			Объект.Организация);
		Если НЕ ЗначениеЗаполнено(Объект.УсловияСчетаЗаказа) Тогда
			НастройкаУсловий = ПланыВидовХарактеристик.НастройкиПользователей.УсловияСчетаЗаказа;
			Объект.УсловияСчетаЗаказа = Справочники.ДополнительныеУсловия.ПолучитьТиповыеУсловия(НастройкаУсловий,
				Объект.Организация);
		КонецЕсли;
	КонецЕсли;

	Если ПустаяСтрока(Объект.ТекстУсловийГарантийногоТалона) Тогда
		Объект.УсловияГарантийногоТалона = 
			УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("УсловияГарантии", Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОповеститьОДатеОтгрузки(ДатаОтгрузки, ДатаДокумента)
	
	Если ЗначениеЗаполнено(ДатаОтгрузки) И ДатаДокумента > КонецДня(ДатаОтгрузки) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Обратите внимание: дата отгрузки ранее даты документа.'");
		Сообщение.Сообщить();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОповеститьОДатеОтгрузкиВТЧ()
	
	ДатаДок = Объект.Дата;
	СтрокиДляПредупреждения = Новый Массив;
	Для Каждого СтрокаТЧ Из Объект.Запасы Цикл
		Если КонецДня(СтрокаТЧ.ДатаОтгрузки) < ДатаДок Тогда
			СтрокиДляПредупреждения.Добавить(СтрокаТЧ.НомерСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокиДляПредупреждения.Количество() <> 0 Тогда
		Если СтрокиДляПредупреждения.Количество() = 1 Тогда
			ШаблонСообщения = НСтр("ru='Обратите внимание: в строке %1 дата отгрузки ранее даты документа.'");
		Иначе
			ШаблонСообщения = НСтр("ru='Обратите внимание: в строках %1 дата отгрузки ранее даты документа.'");		
		КонецЕсли;
		ПеречислениеСтрок = СтрСоединить(СтрокиДляПредупреждения, ", ");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПеречислениеСтрок);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

//+mega

&НаСервере
Процедура ДобавлениеНовыхРеквизитовТабличнойЧасти()
		
	ДобавляемыеРеквизиты	= Новый Массив;		
    
    НовыйРеквизит = Новый РеквизитФормы("mega_НомерВходящегоДокумента",	
    	Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)),,
    		"НомерВходящегоДокумента");
    ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
    
    НовыйРеквизит = Новый РеквизитФормы("mega_ДатаВходящегоДокумента",	
    	Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)),,
    		"ДатаВходящегоДокумента");
    ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);

	НовыйРеквизит = Новый РеквизитФормы("mega_Собран",	
    	Новый ОписаниеТипов("Булево"),,
    		"Собран");
    ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);	      
        
    ИзменитьРеквизиты(ДобавляемыеРеквизиты);		
КонецПроцедуры

&НаСервере
Процедура СоздатьРеквизитТабличнойЧасти(ИмяЭлемента, ТабличнаяЧасть, Вид)
	
	Если Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
		ЭлементФормы = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ТабличнаяЧасть);        
		ЭлементФормы.Вид = Вид;
		ЭлементФормы.ПутьКДанным = "Объект." + ТабличнаяЧасть.Имя + "." + ИмяЭлемента;
		
		Если ЭлементФормы.Вид <> ВидПоляФормы.ПолеФлажка Тогда
			
			ЭлементФормы.КнопкаВыбора = Истина;
		КонецЕсли;			
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СоздатьРеквизитыФормы()
	
		
	ТабличнаяЧастьЗапасы = Элементы.Найти("Запасы");
	
	ДобавлениеНовыхРеквизитовТабличнойЧасти();	
			
	СоздатьРеквизитТабличнойЧасти("mega_НомерВходящегоДокумента", ТабличнаяЧастьЗапасы, ВидПоляФормы.ПолеВвода);
	СоздатьРеквизитТабличнойЧасти("mega_ДатаВходящегоДокумента", ТабличнаяЧастьЗапасы, ВидПоляФормы.ПолеВвода);
	СоздатьРеквизитТабличнойЧасти("mega_Собран", ТабличнаяЧастьЗапасы, ВидПоляФормы.ПолеФлажка);
КонецПроцедуры

//-mega

#КонецОбласти

#Область РаботаСПодбором

&НаКлиенте
Процедура ЗапасыПодбор(Команда)
	
	ИмяТабличнойЧасти = "Запасы";
	МаркерПодбора = "Запасы";
	
	СтруктураПоискаПартииСНДС = Новый Структура("КомиссияСНДС", Истина);
	ЕстьПартииСНДС = Объект.Запасы.НайтиСтроки(СтруктураПоискаПартииСНДС).Количество() > 0;
	ПараметрыПодбора = Новый Структура("ЕстьПартииСНДС, ПолностьюОбновить", ЕстьПартииСНДС, Истина);
		
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти, ПараметрыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПодбор(Команда)
	
	ИмяТабличнойЧасти = "МатериалыЗаказчика";
	МаркерПодбора = "Материалы";
	
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьОшибкуЧтенияДанныхИзХранилища()
	
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации("Ошибка", , ТекстОшибкиЖурналаРегистрации);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Если НЕ (ТипЗнч(ТаблицаДляЗагрузки) = Тип("ТаблицаЗначений")
		ИЛИ ТипЗнч(ТаблицаДляЗагрузки) = Тип("Массив")) Тогда
		
		ТекстОшибкиЖурналаРегистрации = "Несоответствие типа переданного в документ из подбора [" + ТипЗнч(ТаблицаДляЗагрузки) + "].
				|Адрес запасов в хранилище: " + СокрЛП(АдресЗапасовВХранилище) + "
				|Имя табличной части: " + СокрЛП(ИмяТабличнойЧасти);
		
		Возврат;
		
	Иначе
		
		ТекстОшибкиЖурналаРегистрации = "";
		
	КонецЕсли;
	
	ЕстьСтруктурнаяЕдинцаВПодборе = НЕ ТаблицаДляЗагрузки.Колонки.Найти("СтруктурнаяЕдиница") = Неопределено;
	
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаЗагрузки, "СтруктурнаяЕдиница")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "СтруктурнаяЕдиницаРезерв") Тогда 
			НоваяСтрока.СтруктурнаяЕдиницаРезерв = СтрокаЗагрузки.СтруктурнаяЕдиница;
		КонецЕсли;
		
		Если Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке И РазрешитьСкладыВТабличныхЧастях Тогда
			Если ЕстьСтруктурнаяЕдинцаВПодборе 
				И ЗначениеЗаполнено(СтрокаЗагрузки.СтруктурнаяЕдиница) И Не СтрокаЗагрузки.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиницаРезерв Тогда
				Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
				УправлениеФормой();
			КонецЕсли;
		КонецЕсли;
		
		КодАкцизнойМарки = Неопределено;
		
		ОбработатьДобавлениеСтрокиЗапасов(НоваяСтрока, ИмяТабличнойЧасти, КодАкцизнойМарки);
		
	КонецЦикла;
	
	ЗаполнитьСлужебныеПоляТабличнойЧасти();
	ЗаполнитьНомераСтрокТаблицаЗапасы(Объект.Запасы, ТекущийВариантКП, ЗапасыКоличествоСтрок);
	
	// Ручная скидка - заполнение полей ввода на форме
	СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект,, ПараметрыОтбораСтрок(ТекущийВариантКП));
	// Конец Ручная скидка
	
	// АвтоматическиеСкидки
	Если ТаблицаДляЗагрузки.Количество() > 0 Тогда
		СброситьФлагСкидкиРассчитаныСервер("ОбработкаПодбора");
	КонецЕсли;
		
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;

	ОбновитьВидимостьКолонкиПараметровСпецификации(ЭтотОбъект);
	
КонецПроцедуры 

&НаСервере
Процедура ОбработатьДобавлениеСтрокиЗапасов(НоваяСтрока, ИмяТабличнойЧасти = "Запасы", КодАкцизнойМарки = Неопределено, ПересчитыватьНДС = Ложь)
	Если НоваяСтрока.Свойство("Пометка") Тогда
		НоваяСтрока.Пометка = Истина;
	КонецЕсли;
	Если ИмяТабличнойЧасти="Запасы" Тогда
		ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "ДатаОтгрузки", "ПоложениеДатыОтгрузки");		
		ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "СтруктурнаяЕдиницаРезерв", "ПоложениеСклада");
	КонецЕсли; 
	
	СтруктураДанныеНоменклатуры = Новый Структура();
	СтруктураДанныеНоменклатуры.Вставить("Номенклатура", НоваяСтрока.Номенклатура);
	СтруктураДанныеНоменклатуры.Вставить("Характеристика", НоваяСтрока.Характеристика);
	СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
	СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
	СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		
	РезервированиеЗапасов = ?(КэшЗначений.Свойство("РезервированиеЗапасов"), КэшЗначений.РезервированиеЗапасов, Ложь);
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, НоваяСтрока, СтруктураДанныеНоменклатуры, , НЕ РезервированиеЗапасов);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу")
		Тогда
		СтатусПартии = Новый СписокЗначений;
		СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
		СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
		
		СтруктураДанныеНоменклатуры.Вставить("СтатусПартии", СтатусПартии);
	КонецЕсли;
		
	Если НоваяСтрока.Свойство("Всего")
		И НЕ ЗначениеЗаполнено(НоваяСтрока.Всего) Тогда
		
		НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(Объект.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
		
	КонецЕсли;
	
	// Дозаполнение
	Если ИмяТабличнойЧасти = "Работы" Тогда
		
		НоваяСтрока.КлючСвязи = ТабличныеЧастиУНФКлиентСервер.СоздатьНовыйКлючСвязи(ЭтотОбъект);
		
		Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
			
			НоваяСтрока.ТипНоменклатурыУслуга = (НоваяСтрока.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
			
			СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
			
		КонецЕсли;
		
	ИначеЕсли ИмяТабличнойЧасти = "Запасы" Тогда
		
		Если НоваяСтрока.НомерВариантаКП = 0 Тогда
			НоваяСтрока.НомерВариантаКП = ТекущийВариантКП;
		КонецЕсли;
		
		СтруктураДанныеНоменклатуры.Вставить("Партия", НоваяСтрока.Партия);
		
		Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
			
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяСтрока.Номенклатура, "ТипНоменклатуры, Вес, Объем, ЭтоНабор, СпособРасчетаЦеныНабора");
			
			СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
			СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ЗначенияРеквизитов.ТипНоменклатуры);
			СтруктураДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", НоваяСтрока.ЕдиницаИзмерения);
			СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
			СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
			СтруктураДанныеНоменклатуры.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиницаРезерв);
			
			// Наборы
			Если ЗначенияРеквизитов.ЭтоНабор Тогда
				
				Если ЗначениеЗаполнено(НоваяСтрока.Цена) 
					И ЗначенияРеквизитов.СпособРасчетаЦеныНабора <> Перечисления.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих Тогда
					СтруктураДанныеНоменклатуры.Вставить("Цена", НоваяСтрока.Цена);
				КонецЕсли;
				Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
					СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
					СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
					СтруктураДанныеНоменклатуры.Вставить("ВидЦен", Объект.ВидЦен);
					СтруктураДанныеНоменклатуры.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
				КонецЕсли;
				
				// ДисконтныеКарты
				СтруктураДанныеНоменклатуры.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
				СтруктураДанныеНоменклатуры.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
				// Конец ДисконтныеКарты

				РезервированиеЗапасов = ?(КэшЗначений.Свойство("РезервированиеЗапасов"), КэшЗначений.РезервированиеЗапасов, Ложь);
				ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, НоваяСтрока, СтруктураДанныеНоменклатуры, , НЕ РезервированиеЗапасов);

				СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
				
				ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, НоваяСтрока, СтруктураДанные);
				
				НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
				
				Если СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
					Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
					ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
					ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, Объект.Курс, КурсНациональнаяВалюта,УчетВалютныхОпераций);
					ТребуетсяИзменениеНалогообложениеНаСНДС = СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС;
				КонецЕсли;
				
				Если РежимОстаткиИРезервы Тогда
					НоменклатураВДокументахСервер.ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧасти(Объект,,ТекущийВариантКП,, РезервированиеЗапасов);
				КонецЕсли;
				
				Возврат;
				
			Иначе
				
				НоваяСтрока.ТипНоменклатурыЗапас = ((ЗначенияРеквизитов.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"))
												ИЛИ (ЗначенияРеквизитов.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат")));
												
				Если НоваяСтрока.ТипНоменклатурыЗапас Тогда
					Если Объект.ПоложениеСклада=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
						НоваяСтрока.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
					КонецЕсли; 
				КонецЕсли; 
												
				НоваяСтрока.ВесЕдиницыТовара = ЗначенияРеквизитов.Вес;
				НоваяСтрока.Вес = НоваяСтрока.ВесЕдиницыТовара * НоваяСтрока.Количество;
				НоваяСтрока.ОбъемЕдиницыТовара = ЗначенияРеквизитов.Объем;
				НоваяСтрока.Объем = НоваяСтрока.ОбъемЕдиницыТовара * НоваяСтрока.Количество;

				РезервированиеЗапасов = ?(КэшЗначений.Свойство("РезервированиеЗапасов"), КэшЗначений.РезервированиеЗапасов, Ложь);
				ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, НоваяСтрока, СтруктураДанныеНоменклатуры, , НЕ РезервированиеЗапасов);

				СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанныеНоменклатуры);
				СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
				
			КонецЕсли;
			
			//Партии
			НоваяСтрока.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
			НоваяСтрока.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
			НоваяСтрока.КомиссияСНДС = СтруктураДанные.КомиссияСНДС;
			
			НоваяСтрока.Партия = ?(ЗначениеЗаполнено(НоваяСтрока.Партия), НоваяСтрока.Партия, СтруктураДанные.Партия);
			// Конец Партии
			
			НоваяСтрока.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
			ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект[ИмяТабличнойЧасти], НоваяСтрока, "КлючСвязи");
			
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку Тогда
			
			НоваяСтрока.Резерв = 0;
			
		КонецЕсли;
		
		Если СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
			Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
			ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, Объект.Курс, КурсНациональнаяВалюта,УчетВалютныхОпераций);
			ТребуетсяИзменениеНалогообложениеНаСНДС = СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС;
		КонецЕсли;
		
	Иначе
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
	КонецЕсли;
	
	Если ПересчитыватьНДС Тогда
		НоваяСтрока.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		ТабличныеЧастиУНФКлиентСервер.РассчитатьСуммуНДСИВсего(НоваяСтрока, Новый Структура("СуммаВключаетНДС", Объект.СуммаВключаетНДС));
	КонецЕсли;
	
	Если Не ИмяТабличнойЧасти = "МатериалыЗаказчика" Тогда
		ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект[ИмяТабличнойЧасти], НоваяСтрока, "КлючСвязи");
	КонецЕсли;

	// Характеристики
	Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) 
		Тогда
		НоваяСтрока.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
		НоваяСтрока.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
		НоваяСтрока.ЗаполнениеХарактеристикиПроверено = Истина;
		
		Если СтруктураДанные.ИспользоватьХарактеристики
			Тогда
			НоваяСтрока.Характеристика = СтруктураДанные.Характеристика;
		КонецЕсли;
	КонецЕсли;
	// Конец Характеристики
	
	Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) И НоваяСтрока.Свойство("Спецификация") 
		И СтруктураДанные.Свойство("Спецификация") Тогда 
		
		НоваяСтрока.Спецификация = СтруктураДанные.Спецификация;
		НоваяСтрока.ЭтоШаблонСпецификации = СтруктураДанные.ЭтоШаблонСпецификации;
		НоваяСтрока.ЕстьДопРеквизитыСпецификации = СтруктураДанные.ЕстьДопРеквизитыСпецификации;
		Если НоваяСтрока.ЕстьДопРеквизитыСпецификации Тогда
			Если НоваяСтрока.КлючСвязи<>0 Тогда
				ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.РеквизитыПараметрическихСпецификаций, НоваяСтрока);
			КонецЕсли; 
			ЗаполнитьДопРеквизитыПоУмолчанию(НоваяСтрока.ПолучитьИдентификатор());
			ОбновитьОписанияДопРеквизитов(ЭтотОбъект, НоваяСтрока.КлючСвязи);
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область ДисконтныеКарты

&НаКлиенте
Процедура ВыбранаДисконтнаяКарта(ДисконтнаяКарта)

	ВладелецДисконтнойКарты = ПолучитьВладельцаДисконтнойКарты(ДисконтнаяКарта);
	Если Не ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Дисконтная карта в документе очищена'"),
			,
			НСтр("ru = 'Дисконтная карта не предъявлена'"),
			БиблиотекаКартинок.Информация32);
	ИначеЕсли Объект.Контрагент.Пустая() И Не ВладелецДисконтнойКарты.Пустая() Тогда
		Объект.Контрагент = ВладелецДисконтнойКарты;
		КонтрагентПриИзменении(Элементы.Контрагент);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Заполнен контрагент и считана дисконтная карта'"),
			ПолучитьНавигационнуюСсылку(ДисконтнаяКарта),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В документе заполнен контрагент и считана дисконтная карта %1'"), ДисконтнаяКарта),
			БиблиотекаКартинок.Информация32);
	ИначеЕсли Объект.Контрагент <> ВладелецДисконтнойКарты И Не ВладелецДисконтнойКарты.Пустая() Тогда
		
		ТекстСОобщения = НСтр("ru = 'Дисконтная карта %1 не применена. 
		|Владелец дисконтной карты (%2) не совпадает с контрагентом в документе.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю( 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСОобщения, ДисконтнаяКарта, ВладелецДисконтнойКарты),
			,
			"Контрагент",
			"Объект");
		
		Возврат;
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Считана дисконтная карта'"),
			ПолучитьНавигационнуюСсылку(ДисконтнаяКарта),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Считана дисконтная карта %1'"), ДисконтнаяКарта),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВыбранаДисконтнаяКартаДополнительно(ДисконтнаяКарта);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранаДисконтнаяКартаДополнительно(ДисконтнаяКарта)
	
	Если Не Модифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Объект.ДисконтнаяКарта = ДисконтнаяКарта;
	Объект.ПроцентСкидкиПоДисконтнойКарте = ДисконтныеКартыУНФВызовСервера.ВычислитьПроцентСкидкиПоДисконтнойКарте(
		Объект.Дата, ДисконтнаяКарта);
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	
	ОбновитьКартинкуДисконтнойКарты();
	
	Если ДисконтныеКартыУНФВызовСервера.СтарыйМеханизмСкидок(ДисконтнаяКарта) Тогда
	
		Если Объект.Запасы.Количество() > 0 Тогда
			Текст = НСтр("ru = 'Перезаполнить скидки во всех строках?'");
			Оповещение = Новый ОписаниеОповещения("ВыбранаДисконтнаяКартаДополнительноЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		КонецЕсли;
		
	Иначе
		
		Если ВыдатьПодаркиНаВыбор ИЛИ ВывестиСообщения Тогда 			
			// Если на форме уже выведены сообщения, то всего лишь сбросим флаг расчета скидок, но не станем дублировать окна
			СброситьФлагСкидкиРассчитаныКлиент("ВыборДисконтнойКарты");
		Иначе
			РассчитатьСкидкиНаценки(Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранаДисконтнаяКартаДополнительноЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		УправлениеНебольшойФирмойКлиент.ПерезаполнитьСкидкиТабличнойЧастиПослеСчитыванияДисконтнойКарты(ЭтотОбъект, "Запасы");
		
		// Ручная скидка - заполнение полей ввода на форме
		СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект,, ПараметрыОтбораСтрок(ТекущийВариантКП));
		// Конец Ручная скидка
		
		ОбновитьИтогиКлиент();
		ПересчитатьПлатежныйКалендарь();
	КонецЕсли;
	
	// АвтоматическиеСкидки
	СброситьФлагСкидкиРассчитаныКлиент("ПересчетСкидокПоДисконтнойКарте");
	
	ОчиститьКалькуляцию();
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	
КонецПроцедуры

// Функция возвращает Истина, если дисконтная карта, которая передана в качестве параметра, является фиксированной.
//
&НаСервереБезКонтекста
Функция ЭтоДисконтнаяКартаСФиксированнойСкидкой(ДисконтнаяКарта)
	
	Возврат ДисконтнаяКарта.Владелец.ВидСкидкиВДисконтныхКартах = Перечисления.ВидыСкидокВДисконтныхКартах.ФиксированнаяСкидка;
	
КонецФункции

// Процедура выполняется только для НАКОПИТЕЛЬНЫХ дисконтных карт.
// Процедура пересчитывает скидки документа, после изменения даты документа. Пересчёт выполняется, если процент скидки
// по выбранной дисконтной карте, изменился. 
//
&НаКлиенте
Процедура ПересчитатьПроцентСкидкиПриИзмененииДатыДокумента()
	
	Если Объект.ДисконтнаяКарта.Пустая() ИЛИ ЭтоДисконтнаяКартаСФиксированнойСкидкой(Объект.ДисконтнаяКарта) Тогда
		Возврат;
	КонецЕсли;
	
	ПредПроцентСкидкиПоДисконтнойКарте = Объект.ПроцентСкидкиПоДисконтнойКарте;
	НовПроцентСкидкиПоДисконтнойКарте = ДисконтныеКартыУНФВызовСервера.ВычислитьПроцентСкидкиПоДисконтнойКарте(Объект.Дата, Объект.ДисконтнаяКарта);
	
	Если ПредПроцентСкидкиПоДисконтнойКарте <> НовПроцентСкидкиПоДисконтнойКарте Тогда
		
		Если Объект.Запасы.Количество() > 0 Тогда
			Текст = СтрШаблон(НСтр(
				"ru='Изменить % скидки по накопительной дисконтной карте с %1 на %2 и перезаполнить скидки во всех строках?'"),
				ПредПроцентСкидкиПоДисконтнойКарте, НовПроцентСкидкиПоДисконтнойКарте);
			
			ДополнительныеПараметры = Новый Структура("НовПроцентСкидкиПоДисконтнойКарте, ПересчитатьТЧ", НовПроцентСкидкиПоДисконтнойКарте, Истина);
			Оповещение = Новый ОписаниеОповещения("ПересчитатьПроцентСкидкиПриИзмененииДатыДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		Иначе
			Текст = СтрШаблон(НСтр("ru='Изменить % скидки по накопительной дисконтной карте с %1 на %2 ?'"),
				ПредПроцентСкидкиПоДисконтнойКарте, НовПроцентСкидкиПоДисконтнойКарте);
			
			ДополнительныеПараметры = Новый Структура("НовПроцентСкидкиПоДисконтнойКарте, ПересчитатьТЧ", НовПроцентСкидкиПоДисконтнойКарте, Ложь);
			Оповещение = Новый ОписаниеОповещения("ПересчитатьПроцентСкидкиПриИзмененииДатыДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		КонецЕсли;
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняется только для НАКОПИТЕЛЬНЫХ дисконтных карт.
// Процедура пересчитывает скидки документа, после изменения даты документа. Пересчёт выполняется, если процент скидки
// по выбранной дисконтной карте, изменился. 
//
&НаКлиенте
Процедура ПересчитатьПроцентСкидкиПриИзмененииДатыДокументаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ПроцентСкидкиПоДисконтнойКарте = ДополнительныеПараметры.НовПроцентСкидкиПоДисконтнойКарте;
		
		ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
			УчетВалютныхОпераций);
		
		Если ДополнительныеПараметры.ПересчитатьТЧ Тогда
			УправлениеНебольшойФирмойКлиент.ПерезаполнитьСкидкиТабличнойЧастиПослеСчитыванияДисконтнойКарты(ЭтотОбъект,
				"Запасы");
			
			ОбновитьИтогиКлиент();
			ПересчитатьПлатежныйКалендарь();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает владельца дисконтной карты.
//
&НаСервереБезКонтекста
Функция ПолучитьВладельцаДисконтнойКарты(ДисконтнаяКарта)
	
	Возврат ДисконтнаяКарта.ВладелецКарты;
	
КонецФункции

&НаКлиенте
Процедура СчитатьДисконтнуюКартуНажатие(Элемент)
	
	СтруктураПараметров = Новый Структура("Контрагент, ДисконтнаяКарта", Объект.Контрагент, Объект.ДисконтнаяКарта);
	ОписаниеОповещения = Новый ОписаниеОповещения("СчитатьДисконтнуюКартуНажатиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ДисконтныеКарты.Форма.СчитываниеДисконтнойКарты", СтруктураПараметров, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "Нажатие");
	
КонецПроцедуры

// Завершающая часть процедуры - обработчика команды СчитатьДисконтнуюКарту формы.
// Вызывается после закрытия формы считывания дисконтной карты.
//
&НаКлиенте
Процедура СчитатьДисконтнуюКартуНажатиеЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт

	Если ТипЗнч(ВозвращаемыеПараметры) = Тип("Структура") Тогда
		СчитанаДисконтнаяКарта = ВозвращаемыеПараметры.СчитанаДисконтнаяКарта;
		ВыбранаДисконтнаяКарта(ВозвращаемыеПараметры.ДисконтнаяКарта);
	КонецЕсли;

КонецПроцедуры
&НаКлиенте
Процедура ДобавитьОплатуБонусами(Команда)
	
	ТекстПредупреждения = "";
	Если РаботаСБонусамиКлиентСервер.ИспользованиеБонусовЗапрещено(ВалютаРасчетов, НациональнаяВалюта, ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	Если ОжидаетсяВыборВариантаКП() Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не выбран основной вариант коммерческого предложения.'"));
		Возврат;		
	КонецЕсли;	
	// Проверим рассчитанность скидок перед добавлением оплаты бонусами
	Если ИспользоватьАвтоматическиеСкидки Тогда
		
		Если Не Объект.СкидкиРассчитаны Тогда
			Если ВыдатьПодаркиНаВыбор ИЛИ ВывестиСообщения Тогда 			
				// Если на форме уже выведены сообщения, то всего лишь сбросим флаг расчета скидок, но не станем дублировать окна
				СброситьФлагСкидкиРассчитаныКлиент("ВыборДисконтнойКарты");
			Иначе
				РассчитатьСкидкиНаценкиКлиент();
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Рассчитаны автоматические скидки (наценки).'");
				Сообщение.КлючДанных = Объект.Ссылка;
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	Оповещение = Новый ОписаниеОповещения("ДобавитьОплатуБонусамиЗавершение", ЭтаФорма);
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("КОплате", ИтогВсего - Объект.Предоплата.Итог("СуммаРасчетов"));
	СтруктураПараметров.Вставить("Сумма", СтруктураПараметров.КОплате);
	СтруктураПараметров.Вставить("Документ", Объект);
	СтруктураПараметров.Вставить("СуммаБонусов", Объект.Запасы.Итог("СуммаСкидкиОплатыБонусом"));
	
	Если Не ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Оповещение", Оповещение);
		ДополнительныеПараметры.Вставить("СтруктураПараметров", СтруктураПараметров);
		ОповещениеКарты = Новый ОписаниеОповещения("СчитатьДисконтнуюКартуИДобавитьОплатуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Справочник.ДисконтныеКарты.Форма.СчитываниеДисконтнойКарты",, ЭтаФорма,,,, ОповещениеКарты, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОткрытьФорму("Справочник.ДисконтныеКарты.Форма.ФормаОплатыБонусами", СтруктураПараметров, ЭтотОбъект,,,, Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчитатьДисконтнуюКартуИДобавитьОплатуЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		СчитанаДисконтнаяКарта = Результат.СчитанаДисконтнаяКарта;
		ВыбранаДисконтнаяКарта(Результат.ДисконтнаяКарта);
		ОткрытьФорму("Справочник.ДисконтныеКарты.Форма.ФормаОплатыБонусами", Параметры.СтруктураПараметров, ЭтотОбъект,,,, Параметры.Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплатуБонусамиЗавершение(Результат, Параметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		
		СтруктураОтбора = Новый Структура("ОплатаБонусами, Документ", Истина, Результат.БонуснаяКарта);
		СтрокиОплатыБонусами = Объект.Предоплата.НайтиСтроки(СтруктураОтбора);
		СтрокаОплаты = Неопределено;
		Если СтрокиОплатыБонусами.Количество() > 0 Тогда
			СтрокаОплаты = СтрокиОплатыБонусами[0];
		КонецЕсли;
		Если СтрокаОплаты = Неопределено Тогда
			СтрокаОплаты = Объект.Предоплата.Добавить();
			СтрокаОплаты.ОплатаБонусами = Истина;
			СтрокаОплаты.Документ = Результат.БонуснаяКарта;		
		КонецЕсли;		
		
		СтрокаОплаты.ОплатаБонусами				= Истина;
		СтрокаОплаты.Документ					= Результат.БонуснаяКарта;		
		СтрокаОплаты.СуммаРасчетов				= Результат.СуммаБонусов;
		
		СтрокаОплаты.Курс = 
			?(СтрокаОплаты.Курс = 0,
				?(Объект.Курс = 0,
				1,
				Объект.Курс),
			СтрокаОплаты.Курс);
			
		СтрокаОплаты.Кратность =
			?(СтрокаОплаты.Кратность = 0,
				?(Объект.Кратность = 0,
				1,
				Объект.Кратность),
			СтрокаОплаты.Кратность);
			
		СтрокаОплаты.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
			СтрокаОплаты.СуммаРасчетов,
			СтрокаОплаты.Курс,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
			СтрокаОплаты.Кратность,
			?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность));
		
		Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокОплаты(Объект.СпособЗачетаПредоплаты, Объект.Предоплата);
		
		Объект.БонусныеБаллыКНачислению.Очистить();
		ОбновитьВидимостьБонусовКНачислению();
	КонецЕсли;
	РаспределитьОплатуБонусамиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьОплатуБонусамиНаСервере()
	
	ОтборБонусов = Новый Структура("ОплатаБонусами", Истина);
	СтрокиБонусов = Объект.Предоплата.НайтиСтроки(ОтборБонусов);
	ТаблицаОплатыБонусами = Объект.Предоплата.Выгрузить(СтрокиБонусов, "СуммаРасчетов");
	ТаблицаОплатыБонусами.Колонки.СуммаРасчетов.Имя = "СуммаБонусов";
	ТаблицаОплатыБонусами.Колонки.Добавить("ВидОплаты", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыБезналичныхОплат"));
	ТаблицаОплатыБонусами.ЗаполнитьЗначения(ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.Бонусы"), "ВидОплаты");
	
	РаботаСБонусами.РаспределитьОплатуБонусамиКакСкидку(Объект, ТаблицаОплатыБонусами);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьБонуснуюПрограмму(Знач Объект, СтруктураПараметры)
	
	Если Не ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		Если Не Объект.БонусныеБаллыКНачислению.Количество() = 0 Тогда
			Объект.БонусныеБаллыКНачислению.Очистить();
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Если Не Объект.БонусныеБаллыКНачислению.Количество() = 0 Тогда
			Объект.БонусныеБаллыКНачислению.Очистить();
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	РеквизитыБП = РаботаСБонусами.РеквизитыБонуснойПрограммы(Объект.ДисконтнаяКарта);
	
	Если РеквизитыБП.БонуснаяПрограмма.Пустая() Тогда
		Если Не Объект.БонусныеБаллыКНачислению.Количество() = 0 Тогда
			Объект.БонусныеБаллыКНачислению.Очистить();
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Если РеквизитыБП.НеНачислятьПриОплатеБонусами Тогда
		Если РаботаСБонусами.ЕстьОплатаБонусами(Объект.Предоплата) Тогда
			Объект.БонусныеБаллыКНачислению.Очистить();
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметры.Вставить("БонуснаяПрограмма", РеквизитыБП.БонуснаяПрограмма);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область АвтоматическиеСкидки

&НаКлиенте
Процедура РассчитатьСкидкиНаценки(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Если Объект.СкидкиНаценки.Количество() > 0 Тогда
			Объект.СкидкиНаценки.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	РассчитатьСкидкиНаценкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",           Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет", Ложь);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		РабочееМесто = МенеджерОборудованияКлиент.РабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	ОтразитьСкидкиНаФормеКлиент(СтруктураПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПослеСообщенияКассиру(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ИДЗамера = Неопределено;
	Если НЕ ДополнительныеПараметры = Неопределено И
		ДополнительныеПараметры.Свойство("ИДЗамераПроизводительности", ИДЗамера) Тогда	
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
	КонецЕсли;
	
	ВывестиСообщения = Ложь;
	Если ВыдатьПодаркиНаВыбор Тогда
		ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("ЧекККМ_ВыбораПодарка", Истина, Ложь);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИДЗамераПроизводительности",ИДЗамера);
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВыдатьПодаркиНаВыбор", ЭтотОбъект, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресПодарковНаВыбор);
		НомераВариантов = Новый Массив;
		Для НВарианта = ?(Объект.КоличествоВариантовКП = 0, 0, 1) По Объект.КоличествоВариантовКП Цикл
			НомераВариантов.Добавить(НВарианта);
		КонецЦикла;
		ПараметрыФормы.Вставить("НомераВариантовКП", НомераВариантов);
		ОткрытьФорму("ОбщаяФорма.ПодаркиНаВыбор", ПараметрыФормы, ЭтотОбъект, , , , ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОповещениеВыдатьПодаркиНаВыбор();
	КонецЕсли;
		
КонецПроцедуры 

&НаКлиенте
Процедура ОповещениеВыдатьПодаркиНаВыбор(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено И ВыдатьПодаркиНаВыбор Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Скидки не рассчитаны. Не выбран подарок.'");
		Сообщение.ПутьКДанным = "Объект";
		Сообщение.Сообщить();		
		
		СброситьФлагСкидкиРассчитаныКлиент("ОтказОтВыбораПодарка");
		ВыдатьПодаркиНаВыбор = Ложь;
	ИначеЕсли ВыдатьПодаркиНаВыбор Тогда	
		ВыдатьПодаркиНаВыборНаСервере(Результат, ДополнительныеПараметры);
		Если ДействиеПослеВыдачиПодарка = "Проведение" Тогда
			ПараметрыЗаписи = Новый Структура;
			ПараметрыЗаписи.Вставить("РежимЗаписи",		РежимЗаписиДокумента.Проведение);
			ПараметрыЗаписи.Вставить("РежимПроведения",	РежимПроведенияДокумента.Неоперативный);
			
			Записать(ПараметрыЗаписи);
		ИначеЕсли ДействиеПослеВыдачиПодарка = "Запись" Тогда
			ПараметрыЗаписи = Новый Структура;
			ПараметрыЗаписи.Вставить("РежимЗаписи",		РежимЗаписиДокумента.Запись);
			
			Записать(ПараметрыЗаписи);
		КонецЕсли;
	КонецЕсли;
	
	ДействиеПослеВыдачиПодарка = "";
	
КонецПроцедуры


// Функция сравнивает данные расчёта скидок на текущий момент времени с данными последнего расчёт скидок в документе.
// Если скидки изменились, то функция возвращает значение Истина.
//
&НаСервереБезКонтекста
Функция СкидкиИзменились(Объект, РасчетныеСкидки)
	
	СкидкиИзменились = Ложь;
	
	КоличествоСтрок = РасчетныеСкидки.ТаблицаСкидкиНаценки.Количество();
	Если КоличествоСтрок <> Объект.СкидкиНаценки.Количество() Тогда
		СкидкиИзменились = Истина;
	Иначе
		Если Объект.Запасы.Итог("СуммаАвтоматическойСкидки") + Объект.Подарки.Итог("Сумма") <> Объект.СкидкиНаценки.Итог("Сумма") Тогда
			СкидкиИзменились = Истина;
		КонецЕсли;
		
		Если Не СкидкиИзменились Тогда
			Для НомерСтроки = 1 По КоличествоСтрок Цикл
				Если    Объект.СкидкиНаценки[НомерСтроки-1].Сумма <> РасчетныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].Сумма
					ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].КлючСвязи <> РасчетныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].КлючСвязи
					ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].СкидкаНаценка <> РасчетныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].СкидкаНаценка Тогда
					СкидкиИзменились = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если Не СкидкиИзменились Тогда
			СкидкиИзменились = СкидкиПодаркиИзменились(Объект, РасчетныеСкидки);
		КонецЕсли;
		Если Не СкидкиИзменились Тогда
			СкидкиИзменились = БонусыИзменились(Объект, РасчетныеСкидки);
		КонецЕсли;
	КонецЕсли;
		
	Возврат СкидкиИзменились;
	
КонецФункции

&НаСервереБезКонтекста
Функция СкидкиПодаркиИзменились(Объект, ПримененныеСкидки)
	СкидкиИзменились = Ложь;
	ТаблицаПодарков = Неопределено;
	Если ПримененныеСкидки.Свойство("ТаблицаПодарковНаВыбор") Тогда
		// Если требуется выдать подарок из списка, необходимо пересчитать скидки, чтобы предложить пользователю выбор.
		СкидкиИзменились = Истина;
	ИначеЕсли ПримененныеСкидки.Свойство("ТаблицаПодарков", ТаблицаПодарков) Тогда
		Для Каждого СтрокаПодарка Из ТаблицаПодарков Цикл
			Если СкидкиИзменились Тогда
				Прервать;
			КонецЕсли;
			Если СтрокаПодарка.ПодарокИзСписка Тогда
				// Если требуется выдать подарок из списка, необходимо пересчитать скидки, чтобы предложить пользователю выбор.
				СкидкиИзменились = Истина;
			Иначе                             
				ПараметрыСкидкиПодарком = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаПодарка.СкидкаНаценка, "УчитыватьПодарокКакПродажу");
				ТаблицаПоискаПодарков = Объект.Подарки;
				Если ПараметрыСкидкиПодарком.УчитыватьПодарокКакПродажу Тогда
					ТаблицаПоискаПодарков = Объект.Запасы;
				КонецЕсли;
				ОтборПодарка = Новый Структура("Номенклатура, Характеристика", СтрокаПодарка.Номенклатура, СтрокаПодарка.Характеристика);
				СтрокиПодаркаОбъекта = ТаблицаПоискаПодарков.НайтиСтроки(ОтборПодарка);
				Если СтрокиПодаркаОбъекта.Количество() > 0 Тогда
					СтрокаПодаркаОбъекта = СтрокиПодаркаОбъекта[0];
					Если НЕ СтрокаПодаркаОбъекта.Количество = СтрокаПодарка.Количество Тогда
						СкидкиИзменились = Истина;
					КонецЕсли;
				КонецЕсли;				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат СкидкиИзменились
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьРасчетСкидокНаСервере(ОбъектДляРасчета, СтруктураПараметры)
	
	СтруктураПараметры.Вставить("ПрименятьКОбъекту", Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет", Ложь);
	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(ОбъектДляРасчета, "Запасы");
	
	РассчитанныеСкидкиПоВсемВариантам = Неопределено;
	
	Для НВарианта = ?(ОбъектДляРасчета.КоличествоВариантовКП = 0, 0, 1) По ОбъектДляРасчета.КоличествоВариантовКП Цикл
		
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("НомерВариантаКП", НВарианта);
		ОтборСтрок.Вставить("ЭтоРазделитель", Ложь);
		СтруктураПараметры.Вставить("ОтборСтрок", ОтборСтрок);
		
		РассчитанныеСкидки = СкидкиНаценкиСерверПереопределяемый.ВыполнитьРасчетСкидокНаСервере(ОбъектДляРасчета, СтруктураПараметры);
		Если РассчитанныеСкидки.Свойство("ТаблицаПодарков") Тогда
			РассчитанныеСкидки.ТаблицаПодарков.Колонки.Добавить("НомерВариантаКП",  Новый ОписаниеТипов("Число"));
			РассчитанныеСкидки.ТаблицаПодарков.ЗаполнитьЗначения(НВарианта, "НомерВариантаКП"); 
		КонецЕсли;
		Если РассчитанныеСкидки.Свойство("ТаблицаБонусыКНачислению") Тогда
			РассчитанныеСкидки.ТаблицаБонусыКНачислению.Колонки.Добавить("НомерВариантаКП",  Новый ОписаниеТипов("Число"));
			РассчитанныеСкидки.ТаблицаБонусыКНачислению.ЗаполнитьЗначения(НВарианта, "НомерВариантаКП"); 
		КонецЕсли;
		
		Если РассчитанныеСкидкиПоВсемВариантам = Неопределено Тогда
			ТаблицаСообщений = СкидкиНаценкиСервер.ПустаяТаблицаСообщений();
			ТаблицаПодарков = СкидкиНаценкиСервер.ПустаяТаблицаПодарков();
			ТаблицаПодарков.Колонки.Добавить("НомерВариантаКП",  Новый ОписаниеТипов("Число"));
			ТаблицаБонусыКНачислению = СкидкиНаценкиСервер.ПустаяТаблицаБонусов();
			ТаблицаБонусыКНачислению.Колонки.Добавить("НомерВариантаКП",  Новый ОписаниеТипов("Число"));
			РассчитанныеСкидкиПоВсемВариантам = Новый Структура("ДеревоСкидок, ТаблицаСкидкиНаценки, ТаблицаСообщений, ТаблицаПодарков, ТаблицаБонусыКНачислению", 
					РассчитанныеСкидки.ДеревоСкидок, 
					РассчитанныеСкидки.ТаблицаСкидкиНаценки,
					ТаблицаСообщений,
					ТаблицаПодарков,
					ТаблицаБонусыКНачислению); 
			Если РассчитанныеСкидки.Свойство("ТаблицаСообщений", ТаблицаСообщений) Тогда
				РассчитанныеСкидкиПоВсемВариантам.Вставить("ТаблицаСообщений", ТаблицаСообщений);
			КонецЕсли;
			Если РассчитанныеСкидки.Свойство("ТаблицаПодарков", ТаблицаПодарков) Тогда
				РассчитанныеСкидкиПоВсемВариантам.Вставить("ТаблицаПодарков", ТаблицаПодарков);
			КонецЕсли;
			Если РассчитанныеСкидки.Свойство("ТаблицаБонусыКНачислению", ТаблицаБонусыКНачислению) Тогда
				РассчитанныеСкидкиПоВсемВариантам.Вставить("ТаблицаБонусыКНачислению", ТаблицаБонусыКНачислению);
			КонецЕсли;
		Иначе
			ТаблицаСкидкиНаценки = Неопределено;
			Если РассчитанныеСкидки.Свойство("ТаблицаСкидкиНаценки", ТаблицаСкидкиНаценки) Тогда
				Для Каждого Стр Из ТаблицаСкидкиНаценки Цикл
					НоваяСтрока = РассчитанныеСкидкиПоВсемВариантам.ТаблицаСкидкиНаценки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
				КонецЦикла;
			КонецЕсли;
			ТаблицаСообщений = Неопределено;
			Если РассчитанныеСкидки.Свойство("ТаблицаСообщений", ТаблицаСообщений) Тогда
				Для Каждого Стр Из ТаблицаСообщений Цикл
					НоваяСтрока = РассчитанныеСкидкиПоВсемВариантам.ТаблицаСообщений.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
				КонецЦикла;
			КонецЕсли;
			ТаблицаПодарков = Неопределено;
			Если РассчитанныеСкидки.Свойство("ТаблицаПодарков", ТаблицаПодарков) Тогда
				Для Каждого Стр Из ТаблицаПодарков Цикл
					НоваяСтрока = РассчитанныеСкидкиПоВсемВариантам.ТаблицаПодарков.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
				КонецЦикла;
			КонецЕсли;
			ТаблицаБонусыКНачислению = Неопределено;
			Если РассчитанныеСкидки.Свойство("ТаблицаБонусыКНачислению", ТаблицаБонусыКНачислению) Тогда
				Для Каждого Стр Из ТаблицаБонусыКНачислению Цикл
					НоваяСтрока = РассчитанныеСкидкиПоВсемВариантам.ТаблицаБонусыКНачислению.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РассчитанныеСкидкиПоВсемВариантам

КонецФункции 

&НаСервереБезКонтекста
Функция ПрименитьРассчитанныеСкидкиКОбъекту(Объект, РасчетныеСкидки, НаименованиеТЧ = "Запасы")
	
	Результат = СкидкиНаценкиСервер.ПрименитьРассчитанныеСкидкиКОбъекту(Объект, РасчетныеСкидки); 

	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры, Знач ОбъектДляРасчета = Неопределено)
	
	Если ОбъектДляРасчета = Неопределено Тогда
		ОбъектДляРасчета = Объект;
	КонецЕсли;
	ЗаполнитьБонуснуюПрограмму(Объект, СтруктураПараметры);

	РасчетныеСкидки = ВыполнитьРасчетСкидокНаСервере(ОбъектДляРасчета, СтруктураПараметры);
    РезультатПрименения = ПрименитьРассчитанныеСкидкиКОбъекту(ОбъектДляРасчета, РасчетныеСкидки);
    ОтразитьСкидкиНаФорме(РезультатПрименения);
							
КонецПроцедуры 

&НаСервере
Процедура ОтразитьСкидкиНаФорме(РезультатРасчета) 
	
	Если НЕ РезультатРасчета.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ПримененныеСкидки = РезультатРасчета.ПримененныеСкидкиНаценки;
	// Интерактивные действия после расчета
	ДействиеПослеВыдачиПодарка = "";
	ТаблицаПодарковНаВыбор = Неопределено;
	Если НЕ ПримененныеСкидки = Неопределено И ПримененныеСкидки.Свойство("ТаблицаПодарковНаВыбор",ТаблицаПодарковНаВыбор) И ТаблицаПодарковНаВыбор.Количество() > 0 Тогда
		АдресПодарковНаВыбор = ПоместитьВоВременноеХранилище(ТаблицаПодарковНаВыбор, УникальныйИдентификатор);
		ВыдатьПодаркиНаВыбор = Истина;
	Иначе
		АдресПодарковНаВыбор = "";
		ВыдатьПодаркиНаВыбор = Ложь;
	КонецЕсли;
	
	ВывестиСообщения = ложь;
	ТаблицаСообщений = Неопределено;
	Если  НЕ ПримененныеСкидки = Неопределено И ПримененныеСкидки.Свойство("ТаблицаСообщений", ТаблицаСообщений) И ТаблицаСообщений.Количество() > 0 Тогда
		ВывестиСообщения = Истина;
	КонецЕсли;

	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);	
	Модифицированность = Истина;
	// Конец Интерактивные действия после расчета
	
	// Обработка добавленных строк (подарки)
	ПеренесенМаркируемыйТовар = Ложь;
	ИмяТЧ = "Запасы";
	
	Для Каждого ОписаниеДобавленнойСтроки Из РезультатРасчета.ДобавленныеСтрокиЗапасов Цикл 
		ДобавленнаяСтрокаЗапасов = ОписаниеДобавленнойСтроки.Ключ;
		Если НЕ ТипЗнч(ДобавленнаяСтрокаЗапасов) = Тип("ДанныеФормыЭлементКоллекции") Тогда
			// Добавлялась строка ТЧ документа-объекта, а не строка в таблицу формы
			НайденныеСтрокиФормы = Объект.Запасы.НайтиСтроки(Новый Структура("ИсходныйНомерСтроки", ДобавленнаяСтрокаЗапасов.НомерСтроки));
			Если НайденныеСтрокиФормы.Количество() > 0 Тогда
				ДобавленнаяСтрокаЗапасов = НайденныеСтрокиФормы[0];
			КонецЕсли;
		КонецЕсли;
		КодАкцизнойМарки = ОписаниеДобавленнойСтроки.Значение;
		Если ЗначениеЗаполнено(КодАкцизнойМарки) Тогда
			ПеренесенМаркируемыйТовар = Истина;
		КонецЕсли;
		ОбработатьДобавлениеСтрокиЗапасов(ДобавленнаяСтрокаЗапасов, ИмяТЧ, КодАкцизнойМарки, Истина);
	КонецЦикла;
	Если ПеренесенМаркируемыйТовар Тогда
		ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(ЭтаФорма);
	КонецЕсли;
	// Конец Обработка добавленных строк (подарки)
	
	ОбновитьСостояниеПромокода();
	
	ОтразитьНаФормеУспешныйРасчетСкидок(ИмяТЧ);
	
КонецПроцедуры

&НаСервере
Процедура ОтразитьНаФормеУспешныйРасчетСкидок(ИмяТЧ)
	
	СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект, ИмяТЧ);
	ОбновитьВидимостьПодарков();
	ОбновитьВидимостьБонусовКНачислению();
		
	Если НЕ ВыдатьПодаркиНаВыбор Тогда // Картинка обновится после успешного выбора подарков
		Если НЕ Объект.СкидкиРассчитаны Тогда
			Объект.СкидкиРассчитаны = Истина;
		КонецЕсли;
		Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьСкидкиНаФормеКлиент(СтруктураПараметры)
	
 	СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект, "Запасы");
	ОбновитьИтогиКлиент();
	ПересчитатьПлатежныйКалендарь();	
	ОчиститьКалькуляцию();
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	ОбновитьКартинкуПромокода();

	ЦенообразованиеКлиент.ПоказатьОповещениеПользователяОКорректировкеЦены(СтруктураПараметры);
	Если ВывестиСообщения Тогда
		ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("ЗаказПокупателя_СообщениеКассиру", Истина, Ложь);
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИДЗамераПроизводительности",ИДЗамера);
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеПослеСообщенияКассиру", ЭтотОбъект, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресПримененныхСкидокВоВременномХранилище);
		КлючиВариантов = Новый Соответствие;
		Для Каждого строкаЗапасов Из Объект.Запасы Цикл
			КлючиВариантов.Вставить(строкаЗапасов.КлючСвязи, строкаЗапасов.НомерВариантаКП);
		КонецЦикла;
		ПараметрыФормы.Вставить("КлючиВариантов", КлючиВариантов);
		ОткрытьФорму("ОбщаяФорма.ФормаВыводаСообщений", ПараметрыФормы, ЭтотОбъект, , , , ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОповещениеПослеСообщенияКассиру();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьИнформациюОСкидкахКлиент()
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		РабочееМесто = МенеджерОборудованияКлиент.РабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
		ТекстВопроса = НСтр("ru='Скидки (наценки) не рассчитаны, рассчитать?'");
		
		ДополнительныеПараметры = Новый Структура; 
		ДополнительныеПараметры.Вставить("СтруктураПараметры", СтруктураПараметры);
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросРассчитатьСкидки", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Завершение немодального открытия окна "ПоказатьВопрос()". Процедура открывает общую форму для анализа информации о
// скидках по текущей строке.
//
&НаКлиенте
Процедура ОповещениеВопросРассчитатьСкидки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	СтруктураПараметры = ДополнительныеПараметры.СтруктураПараметры;
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры);
	
КонецПроцедуры

// Процедура открывает общую форму для анализа информации о скидках по текущей строке после расчета автоматических скидок (если это было необходимо).
//
&НаКлиенте
Процедура РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры)
	
	Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		РассчитатьСкидкиНаценкиКлиент();
		ОбновитьИтогиКлиент();
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтотОбъект, "ОповещениеПослеВыбораУправляемыхСкидок");
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПослеВыбораУправляемыхСкидок(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ИДЗамера = неопределено;
	Если НЕ ДополнительныеПараметры = Неопределено И
		ДополнительныеПараметры.Свойство("ИДЗамераПроизводительности", ИДЗамера) Тогда	
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		КлючСвязиАктивацииСкидки = Неопределено;
		Если Не ДополнительныеПараметры.Свойство("КлючСвязи", КлючСвязиАктивацииСкидки) Тогда
			КлючСвязиАктивацииСкидки = 0;
		КонецЕсли;
		Если Результат.СкидкиИзменились Тогда
			СброситьФлагСкидкиРассчитаныКлиент("ВыборУправляемыхСкидок");
		Иначе
			// Пересчитывать скидки не требуется
			Возврат;
		КонецЕсли;
		ВыбранныеСкидки = Неопределено;
		Если Не Результат.Свойство("ВыбранныеУправляемыеСкидки", ВыбранныеСкидки) 
			ИЛИ ВыбранныеСкидки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ЗафиксироватьВыбранныеУправляемыеСкидки(ВыбранныеСкидки, КлючСвязиАктивацииСкидки);
	КонецЕсли;
КонецПроцедуры 

&НаСервере
Процедура ЗафиксироватьВыбранныеУправляемыеСкидки(ВыбранныеСкидки, КлючСвязиТекущейСтроки = 0)
	СкидкиДляУдаления = Новый Массив;
	// Удалим скидки, кроме тех что были активированы для других строк
	Для Каждого СтрокаУправляемойСкидки Из Объект.ВыбранныеУправляемыеСкидки Цикл 
		Если СтрокаУправляемойСкидки.НомерВариантаКП = ТекущийВариантКП
			И (СтрокаУправляемойСкидки.КлючСвязи = 0
			Или СтрокаУправляемойСкидки.КлючСвязи = КлючСвязиТекущейСтроки) Тогда
			СкидкиДляУдаления.Добавить(СтрокаУправляемойСкидки);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаУправляемойСкидки ИЗ СкидкиДляУдаления Цикл
		Объект.ВыбранныеУправляемыеСкидки.Удалить(СтрокаУправляемойСкидки);
	КонецЦикла; 
	// Активируем скидки, которые были активированы для данной строки или документа в целом
	Для Каждого Скидка Из ВыбранныеСкидки Цикл
		НоваяУправляемаяСкидка = Объект.ВыбранныеУправляемыеСкидки.Добавить();
		НоваяУправляемаяСкидка.СкидкаНаценка = Скидка;
		НоваяУправляемаяСкидка.НомерВариантаКП = ТекущийВариантКП;
		Если СкидкиНаценкиСервер.ЭтоУправляемаяСкидкаНаСтроку(Скидка) Тогда
			НоваяУправляемаяСкидка.КлючСвязи = КлючСвязиТекущейСтроки;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Функция сбрасывает флаг "СкидкиРассчитаны", если это необходимо, и возвращает Истина, если требуется пересчёт скидок.
//
&НаСервере
Функция СброситьФлагСкидкиРассчитаныСервер(Действие, КолонкаТЧ = "")
	
	ТребуетсяПересчет = Ложь;
	Если ИспользоватьАвтоматическиеСкидки И Объект.Запасы.Количество() > 0 И (Объект.СкидкиРассчитаны ИЛИ УстановленСерыйЦвет) Тогда
		ТребуетсяПересчет = СброситьФлагСкидкиРассчитаны(Действие, КолонкаТЧ);
	КонецЕсли;
	Если ТребуетсяПересчет Тогда
		ВывестиСообщения = Ложь;
		ВыдатьПодаркиНаВыбор = Ложь;
	КонецЕсли;
	Возврат ТребуетсяПересчет;
	
КонецФункции

// Функция сбрасывает флаг "СкидкиРассчитаны", если это необходимо, и возвращает Истина, если требуется пересчёт скидок.
//
&НаКлиенте
Функция СброситьФлагСкидкиРассчитаныКлиент(Действие, КолонкаТЧ = "")
	
	ТребуетсяПересчет = Ложь;
	Если ИспользоватьАвтоматическиеСкидки И Объект.Запасы.Количество() > 0 И (Объект.СкидкиРассчитаны ИЛИ УстановленСерыйЦвет) Тогда
		ТребуетсяПересчет = СброситьФлагСкидкиРассчитаны(Действие, КолонкаТЧ);
		Если ТребуетсяПересчет Тогда
			ПодключитьОбработчикОжидания("ОбновитьКартинкиСкидкиРассчитаны", 0.2, Истина);
		КонецЕсли;
	КонецЕсли;
	Если ТребуетсяПересчет Тогда
		ВывестиСообщения = Ложь;
		ВыдатьПодаркиНаВыбор = Ложь;
	КонецЕсли;
	Возврат ТребуетсяПересчет;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьКартинкиСкидкиРассчитаны()
	СкидкиНаценкиКлиент.ОбновитьКартинкиСкидкиРассчитаны(ЭтотОбъект);
КонецПроцедуры

// Функция сбрасывает флаг СкидкиРассчитаны, если это необходимо, и возвращает Истина, если требуется пересчёт скидок.
//
&НаСервере
Функция СброситьФлагСкидкиРассчитаны(Действие, КолонкаТЧ = "")
	
	Возврат СкидкиНаценкиСервер.СброситьФлагСкидкиРассчитаны(ЭтотОбъект, Действие, КолонкаТЧ);
	
КонецФункции

// Процедура выполняет действия необходимые при создании формы на сервере.
//
&НаСервере
Процедура АвтоматическиеСкидкиПриСозданииНаСервере()
	
	УстановленСерыйЦвет = Ложь;
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки");
	Если ИспользоватьАвтоматическиеСкидки Тогда
		Если Объект.Запасы.Количество() = 0 Тогда
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.ОбновитьСерый;
			УстановленСерыйЦвет = Истина;
		ИначеЕсли НЕ Объект.СкидкиРассчитаны Тогда
			Объект.СкидкиРассчитаны = Ложь;
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.ОбновитьКрасный;
		Иначе
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РучныеСкидкиПриСозданииНаСервере()

	ИспользоватьРучныеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиНаценкиПродажи");
	
КонецПроцедуры

&НаСервере
Процедура НаборыПриСозданииНаСервере()

	ИспользоватьНаборы = ПолучитьФункциональнуюОпцию("ИспользоватьНаборы");
	
КонецПроцедуры

// Выполняет перенос строк из табличной части объекта "Подарки"
// в табличную часть "Запасы".
//
// Параметры:
//  ПримененныеСкидкиНаценки - ДеревоЗначений - дерево с примененными скидками.

//
&НаСервере
Процедура ПеренестиСкидкиПодаркиВЗапасы(ПримененныеСкидкиНаценки = неопределено) Экспорт
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Подарки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Результат = СкидкиНаценкиСервер.ПеренестиПодаркиВЗапасы(Объект, ПримененныеСкидкиНаценки);
	Если Результат.Успех Тогда
		ПеренесенМаркируемыйТовар = Ложь;
		Для Каждого ОписаниеДобавленнойСтроки Из Результат.ДобавленныеСтрокиЗапасов Цикл 
			ДобавленнаяСтрокаЗапасов = ОписаниеДобавленнойСтроки.Ключ;
			КодАкцизнойМарки = ОписаниеДобавленнойСтроки.Значение;
			Если ЗначениеЗаполнено(КодАкцизнойМарки) Тогда
				ПеренесенМаркируемыйТовар = Истина;
			КонецЕсли;
			ОбработатьДобавлениеСтрокиЗапасов(ДобавленнаяСтрокаЗапасов, "Запасы", КодАкцизнойМарки, Истина);
		КонецЦикла;
		Если ПеренесенМаркируемыйТовар Тогда
			ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
				
КонецПроцедуры

&НаСервере
Процедура ВыдатьПодаркиНаВыборНаСервере(Результат, ДополнительныеПараметры) Экспорт
	
	ПереноситьВПродажи = Ложь;
	ТаблицаПодарков = ПолучитьИзВременногоХранилища(Результат);
	Для каждого СтрокаПодарка Из ТаблицаПодарков Цикл
		НоваяСтрока = Объект.Подарки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПодарка,,"КлючСвязи");
		// Уточнить сумму скидки в результате выбора подарка
		ОтборСкидок = Новый Структура;
		ОтборСкидок.Вставить("СкидкаНаценка", СтрокаПодарка.СкидкаНаценка);
		ОтборСкидок.Вставить("КлючСвязи", 0);
		СтрокиСкидки = Объект.СкидкиНаценки.НайтиСтроки(ОтборСкидок);
		Если СтрокиСкидки.Количество() > 0 Тогда
			ТекущаяСкидка = СтрокиСкидки[0];
			ТекущаяСкидка.Сумма = СтрокаПодарка.Сумма;
		КонецЕсли;
		
		// Серии номенклатуры
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура", СтрокаПодарка.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", СтрокаПодарка.Характеристика);		

		СтатусПартии = Новый СписокЗначений;
		СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
		СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
		
		СтруктураДанные.Вставить("СтатусПартии", СтатусПартии);
		СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
		
		ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект.Подарки, НоваяСтрока, "КлючСвязи");
		СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанные);
		
		НоваяСтрока.СтатусыСерийНоменклатуры = СерииНоменклатурыУНФ.СтатусСерийНоменклатурыПриИзменении(СтруктураДанные);
		
		УчитыватьПодарокКакПродажу = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПодарка.СкидкаНаценка, "УчитыватьПодарокКакПродажу");
		Если УчитыватьПодарокКакПродажу Тогда
			ПереноситьВПродажи = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ВыдатьПодаркиНаВыбор = Ложь;
	Если ПереноситьВПродажи Тогда
		РезультатПереноса = СкидкиНаценкиСервер.ПеренестиПодаркиВЗапасы(Объект,,АдресПримененныхСкидокВоВременномХранилище,"Запасы");
		// Подарки на выбор уже предоставлены, сообщения выведены
		Если РезультатПереноса.ПримененныеСкидкиНаценки.Свойство("ТаблицаПодарковНаВыбор") Тогда
			РезультатПереноса.ПримененныеСкидкиНаценки.Удалить("ТаблицаПодарковНаВыбор");
		КонецЕсли;
		РезультатПереноса.ПримененныеСкидкиНаценки.Вставить("ТаблицаСообщений", СкидкиНаценкиСервер.ПустаяТаблицаСообщений());
		ОтразитьСкидкиНаФорме(РезультатПереноса); 
		ЗаполнитьНомераСтрокТаблицаЗапасы(Объект.Запасы, ТекущийВариантКП, ЗапасыКоличествоСтрок);
	Иначе
		ОтразитьНаФормеУспешныйРасчетСкидок("Запасы");
	КонецЕсли;
	ЗаполнитьНомераСтрокТаблицаПодарки(Объект.Подарки, ТекущийВариантКП, ПодаркиКоличествоСтрок);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьАвтоматическиеСкидкиПриНеобходимостиПередЗаписью(Знач ДокументОбъект, ПараметрыРасчетаСкидок = Неопределено)
	
	СкидкиИзменились = Ложь;
	Если ДокументОбъект.СкидкиРассчитаны Тогда
		Возврат СкидкиИзменились;
	КонецЕсли;

	ПараметрыРасчетаСкидок.Вставить("ПрименятьКОбъекту",                Ложь);
	ПараметрыРасчетаСкидок.Вставить("ТолькоПредварительныйРасчет",      Ложь);

	РасчетныеСкидки = ВыполнитьРасчетСкидокНаСервере(ДокументОбъект, ПараметрыРасчетаСкидок);
	Если СкидкиИзменились(ДокументОбъект, РасчетныеСкидки) Тогда
		СкидкиИзменились = Истина;
       	РезультатПримененияСкидок = ПрименитьРассчитанныеСкидкиКОбъекту(ДокументОбъект, РасчетныеСкидки);
		Если РезультатПримененияСкидок.Успех Тогда
			АдресРезультатаПримененияСкидок = ПоместитьВоВременноеХранилище(РезультатПримененияСкидок);
			ПараметрыРасчетаСкидок.Вставить("АдресРезультатаПримененияСкидок", АдресРезультатаПримененияСкидок);
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Рассчитаны автоматические скидки (наценки).'");
			Сообщение.КлючДанных = ДокументОбъект.Ссылка;
			Сообщение.Сообщить();
		КонецЕсли;
	Иначе
		ДокументОбъект.СкидкиРассчитаны = Истина;
	КонецЕсли;
	Возврат СкидкиИзменились;
	
КонецФункции

&НаСервереБезКонтекста
Функция БонусыИзменились(Объект, ПримененныеСкидки)
	СкидкиИзменились = Ложь;
	ТаблицаБонусныхБаллов = Неопределено;
	НачисленоДоРасчета = Объект.БонусныеБаллыКНачислению.Итог("КоличествоБонусныхБаллов");
	НачисленаПослеРасчета = 0;
	Если ПримененныеСкидки.Свойство("ТаблицаБонусыКНачислению", ТаблицаБонусныхБаллов) Тогда
		НачисленаПослеРасчета = ТаблицаБонусныхБаллов.Итог("КоличествоБонусныхБаллов");
	КонецЕсли;
	Возврат Не НачисленоДоРасчета = НачисленаПослеРасчета;
КонецФункции
#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

&НаКлиенте
Процедура ЗапасыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Запасы", "Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВставитьСтроки(Команда)
	
	ВставитьСтроки("Запасы", "Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыКопироватьСтроки(Команда)
	
	КопироватьСтроки("МатериалыЗаказчика", "МатериалыЗаказчика");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыВставитьСтроки(Команда)
	
	ВставитьСтроки("МатериалыЗаказчика", "МатериалыЗаказчика");
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ, ИмяЭлемента)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяЭлемента].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, ИмяЭлемента, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ, ИмяЭлемента)
	
	ИмяТабличнойЧасти = ИмяТЧ;
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, ИмяЭлемента, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтроки(ИмяТЧ, ИмяЭлемента, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, ИмяЭлемента, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяЭлемента].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, ИмяЭлемента, КоличествоСкопированных, КоличествоВставленных)
	
	ИмяТЧ = Новый Структура("ИмяТЧ,ИмяЭлемента", ИмяТЧ, ИмяЭлемента);
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, ИмяЭлемента, КоличествоВставленных);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	Если РежимОстаткиИРезервы Тогда
		НоменклатураВДокументахСервер.ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧасти(Объект,,ТекущийВариантКП,, РезервированиеЗапасов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВставленныеСтроки(ИмяТЧ, ИмяЭлемента, КоличествоВставленных)
	
	Если ИмяТЧ = "Запасы" Тогда
		Количество = Объект[ИмяТЧ].Количество();
		
		Для Итератор = 1 По КоличествоВставленных Цикл
			
			Строка = Объект[ИмяТЧ][Количество - Итератор];
			РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", Строка);
			ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект, Строка);
			
			// Наборы
			Строка.НоменклатураНабора = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
			Строка.ХарактеристикаНабора = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
			Строка.ДоляСтоимости = 0;
			// Конец Наборы
			
		КонецЦикла;
		
		ОбновитьИтогиКлиент();
		РассчитатьОбъемИВесЗаказа();
		ПересчитатьПлатежныйКалендарь();
		ОчиститьКалькуляцию();
		ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, ИмяЭлемента, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		
		Если ИмяТЧ = "Запасы" И Строка.ЭтоРазделитель Тогда
			Строка.НомерВариантаКП = ТекущийВариантКП;
			ЗапасыИспользуетсяГруппировка = Истина;
			
			Продолжить;
		КонецЕсли;
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация",        Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура",       Строка.Номенклатура);
		СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);   
		
		РезервированиеЗапасов = ?(КэшЗначений.Свойство("РезервированиеЗапасов"), КэшЗначений.РезервированиеЗапасов, Ложь);
		ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, Строка, СтруктураДанные, , НЕ РезервированиеЗапасов);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		Если ИмяТЧ = "Запасы" Тогда
			Строка.НомерВариантаКП = ТекущийВариантКП;
			Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
			Строка.ТипНоменклатурыЗапас = СтруктураДанные.ЭтоЗапас;
			Если Строка.ТипНоменклатурыЗапас Тогда
				Если Объект.ПоложениеСклада=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
					Строка.СтруктурнаяЕдиницаРезерв = СтруктураДанные.Склад;
				Иначе
					Строка.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьУпорядочиваниеСтрокТаблицаЗапасы();
	
КонецПроцедуры

#КонецОбласти

#Область ГрупповоеИзменениеСтрок

&НаКлиенте
Процедура ЗапасыСнятьФлажки(Команда)
	
	УстановитьПометку(Ложь, "Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыУстановитьФлажки(Команда)
	
	УстановитьПометку(Истина, "Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменитьСтроки(Команда)
	
	ЗапасыПоказатьСкрытьПанельРедактирования(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВыполнитьДействие(Команда)
	
	ОбработатьТаблицу("Запасы");
	ЗапасыНастроитьОформлениеПанелиРедактирования(4);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыОтменитьИзменения(Команда)
	
	ЗапасыПоказатьСкрытьПанельРедактирования();
	ОбновитьИтогиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменениеСтрокДействиеПриИзменении(Элемент)
	
	ОпределитьОбъектИзменений("Запасы");
	ЗапасыНастроитьОформлениеПанелиРедактирования(2);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменениеСтрокЗначениеПриИзменении(Элемент)
	
	ЗапасыНастроитьОформлениеПанелиРедактирования(3);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометку(Пометка, ИмяТЧ)
	
	Элементы[ИмяТЧ + "СнятьФлажки"].Видимость = НЕ Элементы[ИмяТЧ + "СнятьФлажки"].Видимость;
	Элементы[ИмяТЧ + "УстановитьФлажки"].Видимость = НЕ Элементы[ИмяТЧ + "УстановитьФлажки"].Видимость;
	
	Для каждого Строка Из Объект[ИмяТЧ] Цикл
		Если Строка.Свойство("НомерВариантаКП") И Строка.НомерВариантаКП <> ТекущийВариантКП Тогда
			Продолжить;
		КонецЕсли;
		Строка.Пометка = Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗапасыПоказатьСкрытьПанельРедактирования(ИзменяетДанные = Неопределено)
	
	Перем СостояниеПерехода;
	ГрупповоеИзменениеСтрокСервер.ПоказатьСкрытьПанельРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрок(ЭтотОбъект, "Запасы"),
		СостояниеПерехода,
		ИзменяетДанные);
	
	Элементы.Скидки.Доступность = (СостояниеПерехода=0);
	
	УправлениеРезервнымиКопиямиТаблицы(СостояниеПерехода, ИзменяетДанные, "Запасы");
	УправлениеРезервнымиКопиямиТаблицы(СостояниеПерехода, ИзменяетДанные, "ОтмененныеЗапасы");
	НастроитьЭлементыОтменыТоваров();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеРезервнымиКопиямиТаблицы(СостояниеПерехода, ИзменяетДанные, ИмяТЧ)
	
	ГрупповоеИзменениеСтрокСервер.УправлениеРезервнымиКопиями(
		ЭтотОбъект,
		Объект[ИмяТЧ],
		ЭтотОбъект[ИмяТЧ + "РезервнаяКопияТаблицыАдрес"],
		СостояниеПерехода,
		ИзменяетДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНастроитьОформлениеПанелиРедактирования(Состояние)
	
	Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьСуммы") Тогда
		Элементы.НастроитьОкругления.Видимость = Истина;
	Иначе
		Элементы.НастроитьОкругления.Видимость = Ложь;
	КонецЕсли;
	
	ГрупповоеИзменениеСтрокКлиент.НастроитьОформлениеПанелиРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрок(ЭтотОбъект, "Запасы"),
		Состояние,
		ЗапасыИзменениеСтрокЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекущееДействиеИзмененияСтрок()
	
	Если ЗапасыИзменениеСтрокДействие = ЗапасыИзменениеСтрокДействиеПриОткрытии 
		И МатериалыЗаказчикаИзменениеСтрокДействие = МатериалыЗаказчикаИзменениеСтрокДействиеПриОткрытии Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьТекущееДействиеИзмененияСтрокСервер();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьТекущееДействиеИзмененияСтрокСервер()
	
	Если ЗапасыИзменениеСтрокДействие<>ЗапасыИзменениеСтрокДействиеПриОткрытии Тогда
		ГрупповоеИзменениеСтрокСервер.СохранитьНастройки(НаборЭлементовГрупповогоИзмененияСтрок(ЭтотОбъект, "Запасы"));
	КонецЕсли;
	Если МатериалыЗаказчикаИзменениеСтрокДействие<>МатериалыЗаказчикаИзменениеСтрокДействиеПриОткрытии Тогда
		ГрупповоеИзменениеСтрокСервер.СохранитьНастройки(НаборЭлементовГрупповогоИзмененияСтрок(ЭтотОбъект, "МатериалыЗаказчика"));
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТаблицу(ИмяТЧ)
	
	// Наборы
	Если ИмяТЧ="Запасы" И ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки") Тогда
		
		ИзменяемыеСтроки = Объект.Запасы.НайтиСтроки(Новый Структура("Пометка", Истина));
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("НомерВариантаКП", ТекущийВариантКП);
		ВсеСтрокиВарианта = Объект.Запасы.НайтиСтроки(СтруктураОтбора);
		Если ИзменяемыеСтроки.Количество()=ВсеСтрокиВарианта.Количество() Тогда
			// Если выделены все строки - проверки удаления наборов не выполняются
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("НомерВариантаКП", ТекущийВариантКП);
			УдаляемыеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОтбора);
			Для каждого СтрНабора Из УдаляемыеСтроки Цикл
				Объект.ДобавленныеНаборы.Удалить(СтрНабора);
			КонецЦикла; 
		Иначе
			Для каждого Строка Из ИзменяемыеСтроки Цикл
				Если ЗначениеЗаполнено(Строка.НоменклатураНабора) Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Действие недоступно для наборов.'");
					Сообщение.Поле = "Объект.Запасы";
					Сообщение.Сообщить();
					Возврат;
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	// Конец Наборы
	
	ОбработатьТаблицуНаСервере(ИмяТЧ);
	
	ИзменяемыеСтроки = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("Пометка", Истина));
	ИзменениеСтрокДействие = ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокДействие"];
	ИзменениеСтрокЗначение = ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокЗначение"];
	
	Для каждого Строка Из ИзменяемыеСтроки Цикл
		
		Если ИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент")
			ИЛИ ИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены")
			ИЛИ ИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки")
			ИЛИ ИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду")
			ИЛИ ИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
			
			Если ИмяТЧ="Запасы" Тогда
				РассчитатьСуммуВСтрокеТабличнойЧасти(, Строка);
			КонецЕсли; 
			
		ИначеЕсли ИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСкидкуСуммой") Тогда
			
			ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(Строка, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
			
			// АвтоматическиеСкидки.
			СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти");
			
			Строка.ПроцентАвтоматическойСкидки = 0;
			Строка.СуммаАвтоматическойСкидки = 0;
			// Конец АвтоматическиеСкидки
			
		ИначеЕсли ИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьСуммы") Тогда
			
			// Цена.
			Если Строка.Количество <> 0 Тогда
				Строка.Цена = Строка.Сумма / Строка.Количество;
			КонецЕсли;
			
			// Скидка.
			Если Строка.ПроцентСкидкиНаценки = 100 Тогда
				Строка.Цена = 0;
			ИначеЕсли Строка.ПроцентСкидкиНаценки <> 0 И Строка.Количество <> 0 Тогда
				Строка.Цена = Строка.Сумма / ((1 - Строка.ПроцентСкидкиНаценки / 100) * Строка.Количество);
			КонецЕсли;
			
			//РассчитатьСуммуНДС(Строка);
			ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(Строка, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
			
			// Платежный календарь.
			ПересчитатьПлатежныйКалендарь();
			
			// АвтоматическиеСкидки.
			СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
			
			Строка.ПроцентАвтоматическойСкидки = 0;
			Строка.СуммаАвтоматическойСкидки = 0;
			// Конец АвтоматическиеСкидки
			
		ИначеЕсли ИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
			
			ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(Строка, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
			
		ИначеЕсли ИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству")
			ИЛИ ИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			
			Если Строка.Количество <> 0 Тогда
				Строка.Цена = Строка.Сумма / Строка.Количество;
			КонецЕсли;
			
			// Скидка.
			Если Строка.ПроцентСкидкиНаценки = 100 Тогда
				Строка.Сумма = 0;
			ИначеЕсли Строка.ПроцентСкидкиНаценки <> 0 И Строка.Количество <> 0 Тогда
				Строка.Сумма = Строка.Сумма * (1 - Строка.ПроцентСкидкиНаценки / 100);
			КонецЕсли;
			
			ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(Строка, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
			
			// АвтоматическиеСкидки.
			СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти");
			
			Строка.ПроцентАвтоматическойСкидки = 0;
			Строка.СуммаАвтоматическойСкидки = 0;
			// Конец АвтоматическиеСкидки
			
		ИначеЕсли ИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьКоличествоКратноЕдиницеИзмерения") Тогда
			
			Строка.Вес = Строка.ВесЕдиницыТовара * Строка.Количество;
			Строка.Объем = Строка.ОбъемЕдиницыТовара * Строка.Количество;
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(, Строка);
			
			НоменклатураВДокументахКлиент.КонтрольЗначенияРезерваВТекущейСтроке(Строка);
			
			СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, Строка, ,
				КэшЗначений.ПередачаТоваровМеждуОрганизациями);
			
			// СборкаЗаказов
			Если ФОСборкаЗаказов Тогда
				СборкаЗаказовКлиент.РассчитатьРасхождения(ЭтаФорма, Строка);
			КонецЕсли;
			// Конец СборкаЗаказов
		ИначеЕсли ИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОтменитьСтроки") Тогда
			
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(Строка.ПолучитьИдентификатор());
			ОбработатьОтменуТоваров(МассивСтрок, ЗапасыИзменениеСтрокЗначение, "ГрупповоеИзменение");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОтменитьСтроки") Тогда
		ОтображатьГруппуОтмененных = Истина;
		НастроитьЭлементыОтменыТоваров();
	КонецЕсли;
	
	Если ИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьКоличествоКратноЕдиницеИзмерения") Тогда
		
		РассчитатьОбъемИВесЗаказа();
		ОбновитьИтогиКлиент();
		ПересчитатьПлатежныйКалендарь();
		ОчиститьКалькуляцию();
		ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
		
	КонецЕсли;
	
	Если ИмяТЧ="Запасы" Тогда
		// Ручная скидка - заполнение полей ввода на форме
		СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект,, ?(Объект.КоличествоВариантовКП > 1, ПараметрыОтбораСтрок(ТекущийВариантКП), Неопределено));
		// Конец Ручная скидка
		ОбновитьИтогиКлиент();
		ПересчитатьПлатежныйКалендарь();
		ОчиститьКалькуляцию();
		ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	КонецЕсли; 
	
	Если ИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки")
		ИЛИ ИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСкидкуСуммой") Тогда
		ГрупповоеИзменениеСтрокКлиент.ОчиститьДействиеЗначение(ИзменениеСтрокДействие, ИзменениеСтрокЗначение);
		ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокДействие"] = ИзменениеСтрокДействие;
		ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокЗначение"] = ИзменениеСтрокЗначение;
	КонецЕсли;
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьТаблицуНаСервере(ИмяТЧ)
	
	Строки = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("Пометка", Истина));
	Для каждого Строка Из Строки Цикл
		Если ИмяТЧ="Запасы" И (Строка.НомерВариантаКП <> ТекущийВариантКП ИЛИ Строка.ЭтоРазделитель) Тогда
			Строка.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	ИзменениеСтрокДействие = ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокДействие"];
	ИзменениеСтрокОбъектИзмененийРеквизит = ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокОбъектИзмененийРеквизит"];
	ИзменениеСтрокЗначение = ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокЗначение"];
	
	ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
		ЭтотОбъект,
		Объект[ИмяТЧ],
		ИзменениеСтрокДействие,
		ИзменениеСтрокОбъектИзмененийРеквизит,
		ИзменениеСтрокЗначение,
		ИмяТЧ + "Номенклатура",
		?(ИмяТЧ="Запасы", ПараметрыОтбораСтрок(ТекущийВариантКП), Неопределено));
	
	Если ИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
		
		ИзменяемыеСтроки = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("Пометка", Истина));
		Для каждого Строка Из ИзменяемыеСтроки Цикл
			
			СтруктураДанные = Новый Структура;
			СтруктураДанные.Вставить("Организация", Объект.Организация);
			СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
			СтруктураДанные.Вставить("Характеристика", Строка.Характеристика);
			СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
			СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
			
			Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				
				СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
				СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
				СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
				СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
				СтруктураДанные.Вставить("Коэффициент", 1);
				СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
				
			КонецЕсли;
			
			// ДисконтныеКарты
			СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
			СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);		
			// Конец ДисконтныеКарты
			
			РезервированиеЗапасов = ?(КэшЗначений.Свойство("РезервированиеЗапасов"), КэшЗначений.РезервированиеЗапасов, Ложь);
			ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, Строка, СтруктураДанные, , НЕ РезервированиеЗапасов);

			СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
			
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
			Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
				Если СбрасыватьКоличество Тогда 
					Строка.Количество = НовоеКоличествоПриИзмененииНоменклатуры;
				КонецЕсли;
			КонецЕсли;
			
			Если ИмяТЧ="Запасы" Тогда
				Строка.НомерВариантаКП = ТекущийВариантКП;
				Строка.Цена = СтруктураДанные.Цена;
				Если СтруктураДанные.Свойство("МинимальнаяЦена") 
					И Строка.Свойство("МинимальнаяЦена") Тогда
					Строка.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;					
				КонецЕсли;
				Строка.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
				Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
				Строка.Содержание = "";
				Строка.Спецификация = СтруктураДанные.Спецификация;
				Строка.ЭтоШаблонСпецификации = СтруктураДанные.ЭтоШаблонСпецификации;
				Строка.ЕстьДопРеквизитыСпецификации = СтруктураДанные.ЕстьДопРеквизитыСпецификации;
				Если Строка.ЕстьДопРеквизитыСпецификации Тогда
					Если Строка.КлючСвязи<>0 Тогда
						ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.РеквизитыПараметрическихСпецификаций, Строка);
					КонецЕсли; 
					ЗаполнитьДопРеквизитыПоУмолчанию(Строка.ПолучитьИдентификатор());
					ОбновитьОписанияДопРеквизитов(ЭтотОбъект, Строка.КлючСвязи);
				КонецЕсли; 
				Строка.ТипНоменклатурыЗапас = СтруктураДанные.ЭтоЗапас;
				Если Строка.ТипНоменклатурыЗапас Тогда
					Если Объект.ПоложениеСклада=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
						Строка.СтруктурнаяЕдиницаРезерв = СтруктураДанные.Склад;
					Иначе
						Строка.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяТЧ="Запасы" Тогда
		НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
		
		Если РежимОстаткиИРезервы Тогда
			НоменклатураВДокументахСервер.ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧасти(Объект,,ТекущийВариантКП,, РезервированиеЗапасов);
		КонецЕсли;
		
		ОбновитьВидимостьКолонкиПараметровСпецификации(ЭтотОбъект);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьОбъектИзменений(ИмяТЧ)
	
	ИзменениеСтрокДействие = ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокДействие"];
	
	Если ИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент") Тогда
		
		ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокОбъектИзмененийРеквизит"] = "Цена";
		ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокОбъектИзмененийЭлемент"] = ИмяТЧ + "Цена";
		
	ИначеЕсли ИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены") Тогда
		
		ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокОбъектИзмененийРеквизит"] = "Цена";
		ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокОбъектИзмененийЭлемент"] = ИмяТЧ + "Цена";
		
	ИначеЕсли ИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьСуммы") Тогда
		
		ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокОбъектИзмененийРеквизит"] = "Сумма";
		ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокОбъектИзмененийЭлемент"] = ИмяТЧ + "Сумма";
		
	ИначеЕсли ИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду") Тогда
		
		ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокОбъектИзмененийРеквизит"] = "Цена";
		ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокОбъектИзмененийЭлемент"] = ИмяТЧ + "Цена";
		
	ИначеЕсли ИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки") Тогда
		
		ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокОбъектИзмененийРеквизит"] = "ПроцентСкидкиНаценки";
		ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокОбъектИзмененийЭлемент"] = ИмяТЧ + "ПроцентСкидкиНаценки";
		
	ИначеЕсли ИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству") Тогда
		
		ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокОбъектИзмененийРеквизит"] = "Сумма";
		ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокОбъектИзмененийЭлемент"] = ИмяТЧ + "Сумма";
		
	ИначеЕсли ИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
		
		ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокОбъектИзмененийРеквизит"] = "Сумма";
		ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокОбъектИзмененийЭлемент"] = ИмяТЧ + "Сумма";
		
	ИначеЕсли ИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
		
		ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокОбъектИзмененийРеквизит"] = "СтавкаНДС";
		ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокОбъектИзмененийЭлемент"] = ИмяТЧ + "СтавкаНДС";
		
	ИначеЕсли ИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьДатуОтгрузки") Тогда
		
		ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокОбъектИзмененийРеквизит"] = "ДатаОтгрузки";
		ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокОбъектИзмененийЭлемент"] = ИмяТЧ + "ДатаОтгрузки";
		
	ИначеЕсли ИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСклад") Тогда
		
		ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокОбъектИзмененийРеквизит"] = "СтруктурнаяЕдиницаРезерв";
		ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокОбъектИзмененийЭлемент"] = ИмяТЧ + "СтруктурнаяЕдиницаРезерв";
		
	ИначеЕсли ИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьДатуПоступления") Тогда
		
		ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокОбъектИзмененийРеквизит"] = "ДатаПоступления";
		ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокОбъектИзмененийЭлемент"] = ИмяТЧ + "ДатаПоступления";
		
	ИначеЕсли ИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки")
		ИЛИ ИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
		
		ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокОбъектИзмененийРеквизит"] = "";
		ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокОбъектИзмененийЭлемент"] = "";
		
	ИначеЕсли ИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОтменитьСтроки") Тогда
		ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокОбъектИзмененийРеквизит"] = "ПричинаОтмены";
		ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокОбъектИзмененийЭлемент"] = ИмяТЧ + "ПричинаОтмены"; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НаборЭлементовГрупповогоИзмененияСтрок(Форма, ИмяТЧ)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	НаборЭлементов = Новый Структура();
	НаборЭлементов.Вставить("ИмяТЧ", ИмяТЧ);
	НаборЭлементов.Вставить("ДокументСсылка", Объект.Ссылка);
	НаборЭлементов.Вставить("ПанельРедактирования", Элементы[ИмяТЧ + "КоманднаяПанельГрупповогоИзменения"]);
	НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы[ИмяТЧ + "ВыполнитьДействие"]);
	НаборЭлементов.Вставить("КнопкаИзменитьСтроки", Элементы[ИмяТЧ + "ИзменитьСтроки"]);
	НаборЭлементов.Вставить("КолонкаПометка", Элементы[ИмяТЧ + "Пометка"]);
	Если ИмяТЧ<>"Запасы" ИЛИ Элементы[ИмяТЧ + "НомерСтроки"].Видимость Тогда
		НаборЭлементов.Вставить("КолонкаНомерСтроки", Элементы[ИмяТЧ + "НомерСтроки"]);
	Иначе
		НаборЭлементов.Вставить("КолонкаНомерСтроки", Элементы[ИмяТЧ + "НомерСтрокиПредставление"]);
	КонецЕсли;
	НаборЭлементов.Вставить("Действие", Форма[ИмяТЧ + "ИзменениеСтрокДействие"]);
	НаборЭлементов.Вставить("ДействиеЭлемент", Элементы[ИмяТЧ + "ИзменениеСтрокДействие"]);
	НаборЭлементов.Вставить("Значение", Форма[ИмяТЧ + "ИзменениеСтрокЗначение"]);
	НаборЭлементов.Вставить("ЗначениеЭлемент", Элементы[ИмяТЧ + "ИзменениеСтрокЗначение"]);
	НаборЭлементов.Вставить("ОбъектИзменений", Форма[ИмяТЧ + "ИзменениеСтрокОбъектИзмененийЭлемент"]);
	НаборЭлементов.Вставить("КолонкаОбъектИзменений", ?(ЗначениеЗаполнено(Форма[ИмяТЧ + "ИзменениеСтрокОбъектИзмененийЭлемент"]), Элементы[Форма[ИмяТЧ + "ИзменениеСтрокОбъектИзмененийЭлемент"]], Неопределено));
	Возврат НаборЭлементов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокДействий(РазрешеноРедактированиеЦенДокументов = Неопределено)
	
	Если РазрешеноРедактированиеЦенДокументов = Неопределено Тогда
		РазрешеноРедактированиеЦенДокументов = УправлениеДоступомУНФ.РазрешеноРедактированиеЦенДокументов();
	КонецЕсли;
	
	// Запасы
	
	Действия = Новый Массив;
	Если РазрешеноРедактированиеЦенДокументов Тогда
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент);
	КонецЕсли;
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОкруглитьСуммы);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду);
	Если РазрешеноРедактированиеЦенДокументов Тогда
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам);
	КонецЕсли;
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОкруглитьКоличествоКратноЕдиницеИзмерения);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС);
	Если Объект.ПоложениеДатыОтгрузки = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьДатуОтгрузки);
	КонецЕсли;
	Если НЕ СкладВШапке Тогда
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСклад);
	КонецЕсли;
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки);
	
	Если ИспользоватьПроцессыСостояний Тогда
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОтменитьСтроки);
	КонецЕсли;
	
	Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Очистить();
	Для каждого Действие Из Действия Цикл
		ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
		Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
	КонецЦикла;
	
	Если Действия.Найти(ЗапасыИзменениеСтрокДействие) = Неопределено Тогда
		ЗапасыИзменениеСтрокДействие = Неопределено;
		ГрупповоеИзменениеСтрокСервер.НастроитьИсходнуюПанельРедактирования(ЗапасыИзменениеСтрокЗначение, НаборЭлементовГрупповогоИзмененияСтрок(ЭтотОбъект, "Запасы"));
	КонецЕсли;
	
	// МатериалыЗаказчика
	
	Действия = Новый Массив;
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьДатуПоступления);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки);
	
	Элементы.МатериалыЗаказчикаИзменениеСтрокДействие.СписокВыбора.Очистить();
	Для каждого Действие Из Действия Цикл
		ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
		Элементы.МатериалыЗаказчикаИзменениеСтрокДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПометкаПриИзменении(Элемент)
	
	ГрупповоеИзменениеСтрокКлиент.СтрокаПометкаПриИзменении(Объект.Запасы, Элементы.ЗапасыУстановитьФлажки, Элементы.ЗапасыСнятьФлажки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Владелец", Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоров.СПокупателем"));
	ПараметрыФормы.Вставить("ОповеститьОЗаписиДоговора", Истина);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, Элемент);
КонецПроцедуры

// Материалы заказчика

&НаКлиенте
Процедура МатериалыЗаказчикаИзменитьСтроки(Команда)
	
	МатериалыЗаказчикаПоказатьСкрытьПанельРедактирования(Истина);
	
КонецПроцедуры

&НаСервере
Процедура МатериалыЗаказчикаПоказатьСкрытьПанельРедактирования(ИзменяетДанные = Неопределено)
	
	Перем СостояниеПерехода;
	ГрупповоеИзменениеСтрокСервер.ПоказатьСкрытьПанельРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрок(ЭтотОбъект, "МатериалыЗаказчика"),
		СостояниеПерехода,
		ИзменяетДанные);
	
	УправлениеРезервнымиКопиямиТаблицы(СостояниеПерехода, ИзменяетДанные, "МатериалыЗаказчика");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаНастроитьОформлениеПанелиРедактирования(Состояние)
	
	ГрупповоеИзменениеСтрокКлиент.НастроитьОформлениеПанелиРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрок(ЭтотОбъект, "МатериалыЗаказчика"),
		Состояние,
		МатериалыЗаказчикаИзменениеСтрокЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаВыполнитьДействие(Команда)
	
	ОбработатьТаблицу("МатериалыЗаказчика");
	МатериалыЗаказчикаНастроитьОформлениеПанелиРедактирования(4);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаОтменитьИзменения(Команда)
	
	МатериалыЗаказчикаПоказатьСкрытьПанельРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаУстановитьФлажки(Команда)
	
	УстановитьПометку(Истина, "МатериалыЗаказчика");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаСнятьФлажки(Команда)
	
	УстановитьПометку(Ложь, "МатериалыЗаказчика");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаИзменениеСтрокДействиеПриИзменении(Элемент)
	
	ОпределитьОбъектИзменений("МатериалыЗаказчика");
	МатериалыЗаказчикаНастроитьОформлениеПанелиРедактирования(2);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаИзменениеСтрокЗначениеПриИзменении(Элемент)
	
	МатериалыЗаказчикаНастроитьОформлениеПанелиРедактирования(3);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаПометкаПриИзменении(Элемент)
	
	ГрупповоеИзменениеСтрокКлиент.СтрокаПометкаПриИзменении(Объект.МатериалыЗаказчика, Элементы.МатериалыЗаказчикаУстановитьФлажки, Элементы.МатериалыЗаказчикаСнятьФлажки);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.МатериалыЗаказчика.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	НоменклатураВДокументахКлиент.КонтрольЗначенияРезерваВТекущейСтроке(СтрокаТабличнойЧасти);
	
КонецПроцедуры

#КонецОбласти

#Область АвтоподборКонтактов

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_ОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_АвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, Параметры, Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Функция ОписаниеПолейДляАвтоподбора()
	
	Результат = Новый Соответствие;
	Результат.Вставить("Контрагент", Новый Структура);
	
	Результат["Контрагент"].Вставить("ПутьКДанным", "Объект.Контрагент");
	Результат["Контрагент"].Вставить("ТипЗначения", Тип("СправочникСсылка.Контрагенты"));
	Результат["Контрагент"].Вставить("ИмяФормыОбъекта", "Справочник.Контрагенты.ФормаОбъекта");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Калькуляция

&НаКлиенте
Процедура ЗаписатьИОткрытьКалькуляцию()
	
	// Доставка
	Если НеЗаполненыПоляДоставки() Тогда
		Возврат;
	КонецЕсли; 
	// Конец Доставка
	
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗаписатьИОткрытьКалькуляциюЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, 
		НСтр("ru = 'Заполнение калькуляции возможно только после записи данных.
					|Данные будут записаны.'"),
		РежимДиалогаВопрос.ОКОтмена);
		Возврат;
		
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура;
	ЗаполнитьПараметрыОткрытияКалькуляции(СтруктураПараметры);
	Если СтруктураПараметры.Свойство("Отказ") И СтруктураПараметры.Отказ Тогда
		// Серверные операции перед открытием калькуляции выполнены с ошибкой
		Возврат;
	КонецЕсли; 
	Оповещение = Новый ОписаниеОповещения("ПриИзмененииКалькуляции", ЭтотОбъект);
	ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ФормаКалькуляции", СтруктураПараметры, ЭтотОбъект,
		УникальныйИдентификатор, , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Функция НеЗаполненыПоляДоставки()

	Результат = Ложь;

	Если Не ЗначениеЗаполнено(Объект.СпособДоставки) Тогда
		Возврат Результат;
	КонецЕсли;

	Если Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.Самовывоз") Тогда
		Возврат Результат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.СлужбаДоставки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru='Заполнение калькуляции с расчетом доставки возможно только после выбора службы доставки'"), ,
			"СлужбаДоставки");
		Результат = Истина;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.НоменклатураДоставки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru='Заполнение калькуляции с расчетом доставки возможно только после выбора услуги'"), ,
			"НоменклатураДоставки");
		Результат = Истина;
	КонецЕсли;

	Возврат Результат

КонецФункции

&НаКлиенте
Процедура ЗаписатьИОткрытьКалькуляциюЗавершение(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ=КодВозвратаДиалога.ОК Тогда
		Записать();
		Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
			Возврат; // Запись не удалась, сообщения о причинах выводит платформа.
		КонецЕсли;
		ЗаписатьИОткрытьКалькуляцию();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКалькуляции(РезультатОткрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатОткрытия=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТолькоПросмотр И РезультатОткрытия.Свойство("АдресДанных") Тогда
		ПриИзмененииКалькуляцииСервер(РезультатОткрытия.АдресДанных);
		ОбновитьИтогиКлиент();
		ПересчитатьПлатежныйКалендарь();
		ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	КонецЕсли;
	
	Если РезультатОткрытия.Свойство("Распечатать") И РезультатОткрытия.Распечатать=Истина Тогда
		Команда = Команды.Калькуляция;
		ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
		// УНФ
		СтатистикаИспользованияФормКлиент.ДобавитьСтатистикуПодключаемойКоманды(ЭтотОбъект, Команда);
		// Конец УНФ
	КонецЕсли;
	
	ОбновитьОтображениеКолонокВРазрезеЗапасов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКалькуляцию()
	
	Если НЕ Объект.КалькуляцияРассчитана Тогда
		Возврат;
	КонецЕсли; 
	
	Объект.КалькуляцияРассчитана = Ложь;
	
	// Удаляем все строки калькуляции, кроме общих
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Источник", ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Запас"));
	СтрокиКУдалению = Объект.Калькуляция.НайтиСтроки(СтруктураОтбора);
	Для каждого Стр Из СтрокиКУдалению Цикл
		Если Стр.РучноеИзменение Тогда
			Продолжить;
		КонецЕсли; 
		Объект.Калькуляция.Удалить(Стр);
	КонецЦикла;
	
	Элементы.ЗаполнитьОбновитьКалькуляцию.Видимость = НЕ Объект.КалькуляцияРассчитана;
	Элементы.ОткрытьКалькуляцию.Видимость			= Объект.КалькуляцияРассчитана;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКалькуляцииСервер(АдресНастроек)
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресНастроек) Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресНастроек);
	Объект.Калькуляция.Загрузить(СтруктураДанных.Калькуляция);
	Объект.Запасы.Очистить();
	Для каждого СтрокаКалькуляции Из СтруктураДанных.Запасы Цикл
		НоваяСтрока = Объект.Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКалькуляции);
	КонецЦикла;
	УстановитьПометку(Истина, "Запасы");
	УстановитьПометку(Истина, "МатериалыЗаказчика");
	ЗаполнитьСлужебныеПоляТабличнойЧасти();
	Если Объект.КоличествоВариантовКП>1 Тогда
		Для ии = 1 По Объект.КоличествоВариантовКП Цикл
			Если ии=ТекущийВариантКП Тогда
				ЗаполнитьНомераСтрокТаблицаЗапасы(Объект.Запасы, ии, ЗапасыКоличествоСтрок);
			Иначе
				КоличествоСтрок = 0;
				ЗаполнитьНомераСтрокТаблицаЗапасы(Объект.Запасы, ии, КоличествоСтрок);
			КонецЕсли; 
		КонецЦикла;  
	КонецЕсли; 
	Объект.ВидыЦенКалькуляции.Очистить();
	Для каждого ВидЦен Из СтруктураДанных.ВидыЦен Цикл
		Объект.ВидыЦенКалькуляции.Добавить().ВидЦен = ВидЦен;
	КонецЦикла; 
	ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "СпособРасчетаСебестоимостиКалькуляции, ШаблонКалькуляции, КомментарийКалькуляции");
	Объект.КалькуляцияРассчитана = Истина;
	
	// Ручные скидки
	СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект,, ПараметрыОтбораСтрок(Объект.ОсновнойВариантКП));
	// Конец Ручные скидки
	
	ЗаполнитьНомераСтрокТаблицаЗапасы(Объект.Запасы, Объект.ОсновнойВариантКП, ЗапасыКоличествоСтрок);
	ДействияПослеЧтенияОбъекта();
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	Если РежимОстаткиИРезервы Тогда
		НоменклатураВДокументахСервер.ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧасти(Объект,,ТекущийВариантКП,, РезервированиеЗапасов);
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыОткрытияКалькуляции(СтруктураПараметры)
	
	// ПараметрическиеСпецификации
	Отказ = Ложь;
	ПроизводствоФормулыСервер.РассчитатьПараметрическиеСпецификации(Объект, "Запасы", Отказ);
	ОбновитьПризнакиПараметрическихСпецификаций(Объект.Запасы);
	ОбновитьВидимостьКолонкиПараметровСпецификации(ЭтотОбъект);
	СтруктураПараметры.Вставить("Отказ", Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	// Конец ПараметрическиеСпецификации
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.КлючСвязи) Тогда
			ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект.Запасы, СтрокаТабличнойЧасти, "КлючСвязи");
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Ссылка", Объект.Ссылка);
	СтруктураДанных.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	СтруктураДанных.Вставить("ПечатьКалькуляцииСкрыта", ПечатьКалькуляцииСкрыта);
	СтруктураДанных.Вставить("СкидкаПроцент", СкидкаПроцент);
	СтруктураДанных.Вставить("СкидкаСумма", СкидкаСумма);
	ДанныеЗаказа = Новый Структура;
	ДанныеЗаказа.Вставить("Дата", Объект.Дата);
	ДанныеЗаказа.Вставить("Номер", Объект.Номер);
	Для каждого Реквизит Из Метаданные.Документы.ЗаказПокупателя.Реквизиты Цикл
		ДанныеЗаказа.Вставить(Реквизит.Имя, Объект[Реквизит.Имя]);
	КонецЦикла;
	СтруктураДанных.Вставить("ДанныеЗаказа", ДанныеЗаказа);
	СтруктураДанных.Вставить("ВидыЦен", Объект.ВидыЦенКалькуляции.Выгрузить().ВыгрузитьКолонку("ВидЦен"));
	ТаблицаЗапасов = Объект.Запасы.Выгрузить();
	СтруктураДанных.Вставить("Запасы", ТаблицаЗапасов);
	ТаблицаКалькуляции = Объект.Калькуляция.Выгрузить();
	СтруктураДанных.Вставить("Калькуляция", ТаблицаКалькуляции);
	ТаблицаПараметрыДоставки = Объект.ПараметрыДоставки.Выгрузить();
	СтруктураДанных.Вставить("ПараметрыДоставки", ТаблицаПараметрыДоставки);
	СтруктураДанных.Вставить("ТекущийВариантКП", ТекущийВариантКП);
	СтруктураПараметры.Вставить("АдресДанных", ПоместитьВоВременноеХранилище(СтруктураДанных, УникальныйИдентификатор));
	
КонецПроцедуры

#КонецОбласти

#Область ВариантыКП

&НаКлиенте
Функция ОжидаетсяВыборВариантаКП()
	
	Возврат Объект.КоличествоВариантовКП <> 0 И Объект.ОсновнойВариантКП = 0;
	
КонецФункции

&НаСервере
Процедура ОпределитьИспользованиеРазделителейВТаблице()
	
	// Признак проверяется при чтении объекта. Взводится при интерактивном вызове команды.
	ЗапасыИспользуетсяГруппировка = Объект.Запасы.НайтиСтроки(
		Новый Структура("ЭтоРазделитель", Истина)
	).Количество();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНомераСтрокТаблицаЗапасы(Запасы, ТекущийВариантКП, ЗапасыКоличествоСтрок)
	
	ЗапасыНомерПоследнейСтрокиВнутренний    = 1;
	ЗапасыНомерПоследнейСтрокиПредставление = 1;
	ЗапасыКоличествоСтрок = 0;
	
	СтруктураПоиска = Новый Структура("НомерВариантаКП", ТекущийВариантКП);
	НайденныеСтроки = Запасы.НайтиСтроки(СтруктураПоиска);
	
	Для каждого Строка Из НайденныеСтроки Цикл
		
		Строка.НомерСтрокиВнутренний = ЗапасыНомерПоследнейСтрокиВнутренний;
		ЗапасыНомерПоследнейСтрокиВнутренний = ЗапасыНомерПоследнейСтрокиВнутренний + 1;
		
		Если Строка.ЭтоРазделитель Тогда
			ЗапасыНомерПоследнейСтрокиПредставление = 1;
			Строка.НомерСтрокиПредставление = 0;
		Иначе
			ЗапасыКоличествоСтрок = ЗапасыКоличествоСтрок + 1;
			Строка.НомерСтрокиПредставление = ЗапасыНомерПоследнейСтрокиПредставление;
			ЗапасыНомерПоследнейСтрокиПредставление = ЗапасыНомерПоследнейСтрокиПредставление + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНомераСтрокТаблицаПодарки(Подарки, ТекущийВариантКП, ПодаркиКоличествоСтрок)
	
	ПодаркиНомерПоследнейСтрокиВнутренний    = 1;
	ПодаркиНомерПоследнейСтрокиПредставление = 1;
	ПодаркиКоличествоСтрок = 0;
	
	СтруктураПоиска = Новый Структура("НомерВариантаКП", ТекущийВариантКП);
	НайденныеСтроки = Подарки.НайтиСтроки(СтруктураПоиска);
	
	Для каждого Строка Из НайденныеСтроки Цикл
		
		Строка.НомерСтрокиВнутренний = ПодаркиНомерПоследнейСтрокиВнутренний;
		ПодаркиНомерПоследнейСтрокиВнутренний = ПодаркиНомерПоследнейСтрокиВнутренний + 1;
	
		ПодаркиКоличествоСтрок = ПодаркиКоличествоСтрок + 1;
		Строка.НомерСтрокиПредставление = ПодаркиНомерПоследнейСтрокиПредставление;
		ПодаркиНомерПоследнейСтрокиПредставление = ПодаркиНомерПоследнейСтрокиПредставление + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНомераСтрокТаблицаБонусов(БонусыКНачислению, ТекущийВариантКП, БонусыКНачислениюСуммаНачислено)
	
	БонусыКНачислениюНомерПоследнейСтрокиВнутренний    = 1;
	БонусыКНачислениюНомерПоследнейСтрокиПредставление = 1;
	БонусыКНачислениюКоличествоСтрок = 0;
	БонусыКНачислениюСуммаНачислено = 0;
	
	СтруктураПоиска = Новый Структура("НомерВариантаКП", ТекущийВариантКП);
	НайденныеСтроки = БонусыКНачислению.НайтиСтроки(СтруктураПоиска);
	
	Для каждого Строка Из НайденныеСтроки Цикл
		
		Строка.НомерСтрокиВнутренний = БонусыКНачислениюНомерПоследнейСтрокиВнутренний;
		БонусыКНачислениюНомерПоследнейСтрокиВнутренний = БонусыКНачислениюНомерПоследнейСтрокиВнутренний + 1;
	
		БонусыКНачислениюКоличествоСтрок = БонусыКНачислениюКоличествоСтрок + 1;
		Строка.НомерСтрокиПредставление = БонусыКНачислениюНомерПоследнейСтрокиПредставление;
		БонусыКНачислениюНомерПоследнейСтрокиПредставление = БонусыКНачислениюНомерПоследнейСтрокиПредставление + 1;
		
		БонусыКНачислениюСуммаНачислено = БонусыКНачислениюСуммаНачислено + Строка.КоличествоБонусныхБаллов;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьУпорядочиваниеСтрокТаблицаЗапасы()
	
	ОпределитьИспользованиеРазделителейВТаблице();
	
	ПлатформенноеУпорядочиваниеСтрок = ТекущийВариантКП = 0 И НЕ ЗапасыИспользуетсяГруппировка;
	
	Элементы.ЗапасыКомандыПеремещенияСтрок.ПодчиненныеЭлементы.ЗапасыПереместитьВверх.Видимость        = ПлатформенноеУпорядочиваниеСтрок;
	Элементы.ЗапасыКомандыПеремещенияСтрок.ПодчиненныеЭлементы.ЗапасыПереместитьВниз.Видимость         = ПлатформенноеУпорядочиваниеСтрок;
	Элементы.ЗапасыКонтекстноеМеню.ПодчиненныеЭлементы.ЗапасыКонтекстноеМенюПереместитьВверх.Видимость = ПлатформенноеУпорядочиваниеСтрок;
	Элементы.ЗапасыКонтекстноеМеню.ПодчиненныеЭлементы.ЗапасыКонтекстноеМенюПереместитьВниз.Видимость  = ПлатформенноеУпорядочиваниеСтрок;
	
	Элементы.ЗапасыКомандыПеремещенияСтрокКП.ПодчиненныеЭлементы.ЗапасыПереместитьВверхСтрокуКП.Видимость            = НЕ ПлатформенноеУпорядочиваниеСтрок;
	Элементы.ЗапасыКомандыПеремещенияСтрокКП.ПодчиненныеЭлементы.ЗапасыПереместитьВнизСтрокуКП.Видимость             = НЕ ПлатформенноеУпорядочиваниеСтрок;
	Элементы.ЗапасыКонтекстноеМеню.ПодчиненныеЭлементы.ЗапасыКонтекстноеМенюЗапасыПереместитьВверхСтрокуКП.Видимость = НЕ ПлатформенноеУпорядочиваниеСтрок;
	Элементы.ЗапасыКонтекстноеМеню.ПодчиненныеЭлементы.ЗапасыКонтекстноеМенюЗапасыПереместитьВнизСтрокуКП.Видимость  = НЕ ПлатформенноеУпорядочиваниеСтрок;
	
	Элементы.ЗапасыНомерСтроки.Видимость              = ПлатформенноеУпорядочиваниеСтрок;
	Элементы.ЗапасыНомерСтрокиПредставление.Видимость = НЕ ПлатформенноеУпорядочиваниеСтрок;
	
	ЗаполнитьНомераСтрокТаблицаЗапасы(Объект.Запасы, ТекущийВариантКП, ЗапасыКоличествоСтрок);
	ЗаполнитьНомераСтрокТаблицаПодарки(Объект.Подарки, ТекущийВариантКП, ПодаркиКоличествоСтрок);
	ЗаполнитьНомераСтрокТаблицаБонусов(Объект.БонусныеБаллыКНачислению, ТекущийВариантКП, БонусыКНачислениюСуммаНачислено);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеСоставаВариантов(Операция)
	
	Если Операция = "Создание" ИЛИ Операция = "Копирование" Тогда
		
		Если Объект.КоличествоВариантовКП = 0 Тогда
			Для каждого Строка Из Объект.Запасы Цикл
				Строка.НомерВариантаКП = 1;
			КонецЦикла;
			// Наборы
			Для каждого Строка Из Объект.ДобавленныеНаборы Цикл
				Строка.НомерВариантаКП = 1;
			КонецЦикла;
			// Конец Наборы
			// Калькуляция
			Для каждого Строка Из Объект.Калькуляция Цикл
				Строка.НомерВариантаКП = 1;
			КонецЦикла;
			// Конец Калькуляция
			// Подарки
			Для каждого Строка Из Объект.Подарки Цикл
				Строка.НомерВариантаКП = 1;
			КонецЦикла;
			// Конец Подарки
		КонецЕсли;
		
		Если Объект.КоличествоВариантовКП = 0 Тогда
			Объект.КоличествоВариантовКП = 2;
			КопируемыйВариант = 1;
		Иначе
			Объект.КоличествоВариантовКП = Объект.КоличествоВариантовКП + 1;
			КопируемыйВариант = ТекущийВариантКП;
		КонецЕсли;
		
		Если Операция = "Копирование" Тогда
			СтруктураОтбора = Новый Структура("НомерВариантаКП", КопируемыйВариант);
			Строки = Объект.Запасы.НайтиСтроки(СтруктураОтбора);
			Для каждого Строка Из Строки Цикл
				НоваяСтрока = Объект.Запасы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,, "КлючСвязи");
				Строка.НомерВариантаКП = Объект.КоличествоВариантовКП;
			КонецЦикла;
			// Наборы
			СтрокиНаборов = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОтбора);
			Для каждого СтрокаНабора Из СтрокиНаборов Цикл
				НоваяСтрока = Объект.ДобавленныеНаборы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНабора);
				СтрокаНабора.НомерВариантаКП = Объект.КоличествоВариантовКП;
			КонецЦикла;
			// Конец Наборы
			// Калькуляция
			СтрокиКалькуляции = Объект.Калькуляция.НайтиСтроки(СтруктураОтбора);
			Для каждого СтрокаКалькуляции Из СтрокиКалькуляции Цикл
				НоваяСтрока = Объект.Калькуляция.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКалькуляции);
				СтрокаКалькуляции.НомерВариантаКП = Объект.КоличествоВариантовКП;
			КонецЦикла;
			// Конец Калькуляция
			// Подарки
			СтрокиПодарки = Объект.Подарки.НайтиСтроки(СтруктураОтбора);
			Для каждого СтрокаПодарка Из СтрокиПодарки Цикл
				НоваяСтрока = Объект.Подарки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПодарка);
				СтрокаКалькуляции.НомерВариантаКП = Объект.КоличествоВариантовКП;
			КонецЦикла;
			// Конец Подарки
			
			СброситьФлагСкидкиРассчитаны("ПриНачалеРедактирования");
		КонецЕсли;
		
		ТекущийВариантКП = Объект.КоличествоВариантовКП;
		
	КонецЕсли;
	
	Если Операция = "Удаление" Тогда
		
		Строки = Объект.Запасы.НайтиСтроки(Новый Структура("НомерВариантаКП", ТекущийВариантКП));
		Для каждого Строка Из Строки Цикл
			Объект.Запасы.Удалить(Строка);
		КонецЦикла;
		// Наборы
		Строки = Объект.ДобавленныеНаборы.НайтиСтроки(Новый Структура("НомерВариантаКП", ТекущийВариантКП));
		Для каждого Строка Из Строки Цикл
			Объект.ДобавленныеНаборы.Удалить(Строка);
		КонецЦикла;
		// Конец Наборы
		// Калькуляция
		Строки = Объект.Калькуляция.НайтиСтроки(Новый Структура("НомерВариантаКП", ТекущийВариантКП));
		Для каждого Строка Из Строки Цикл
			Объект.Калькуляция.Удалить(Строка);
		КонецЦикла;
		// Конец Калькуляция
		// Подарки
		Строки = Объект.Подарки.НайтиСтроки(Новый Структура("НомерВариантаКП", ТекущийВариантКП));
		Для каждого Строка Из Строки Цикл
			Объект.Подарки.Удалить(Строка);
		КонецЦикла;
		// Конец Подарки
		
		Если Объект.КоличествоВариантовКП = 2 Тогда
			Объект.КоличествоВариантовКП = 0;
		Иначе
			Объект.КоличествоВариантовКП = Объект.КоличествоВариантовКП - 1;
		КонецЕсли;
		
		Если Объект.КоличествоВариантовКП = 0 Тогда
			Для каждого Строка Из Объект.Запасы Цикл
				Строка.НомерВариантаКП = 0;
			КонецЦикла;
			// Наборы
			Для каждого Строка Из Объект.ДобавленныеНаборы Цикл
				Строка.НомерВариантаКП = 0;
			КонецЦикла;
			// Конец Наборы
			// Калькуляция
			Для каждого Строка Из Объект.Калькуляция Цикл
				Строка.НомерВариантаКП = 0;
			КонецЦикла;
			// Конец Калькуляция
			// Подарки
			Для каждого Строка Из Объект.Подарки Цикл
				Строка.НомерВариантаКП = 0;
			КонецЦикла;
			// Конец Подарки
		Иначе
			Для каждого Строка Из Объект.Запасы Цикл
				Если Строка.НомерВариантаКП <= ТекущийВариантКП Тогда
					Продолжить;
				КонецЕсли;
				Строка.НомерВариантаКП = Строка.НомерВариантаКП - 1;
			КонецЦикла;
			// Наборы
			Для каждого Строка Из Объект.ДобавленныеНаборы Цикл
				Если Строка.НомерВариантаКП <= ТекущийВариантКП Тогда
					Продолжить;
				КонецЕсли;
				Строка.НомерВариантаКП = Строка.НомерВариантаКП - 1;
			КонецЦикла;
			// Конец Наборы
			// Калькуляция
			Для каждого Строка Из Объект.Калькуляция Цикл
				Если Строка.НомерВариантаКП <= ТекущийВариантКП Тогда
					Продолжить;
				КонецЕсли;
				Строка.НомерВариантаКП = Строка.НомерВариантаКП - 1;
			КонецЦикла;
			// Конец Калькуляция
			// Подарки
			Для каждого Строка Из Объект.Подарки Цикл
				Если Строка.НомерВариантаКП <= ТекущийВариантКП Тогда
					Продолжить;
				КонецЕсли;
				Строка.НомерВариантаКП = Строка.НомерВариантаКП - 1;
			КонецЦикла;
			// Конец Подарки
		КонецЕсли;
		
		Если Объект.ОсновнойВариантКП = ТекущийВариантКП ИЛИ Объект.КоличествоВариантовКП = 0 Тогда
			Объект.ОсновнойВариантКП = 0;
		ИначеЕсли Объект.ОсновнойВариантКП > ТекущийВариантКП Тогда
			Объект.ОсновнойВариантКП = Объект.ОсновнойВариантКП - 1;
		КонецЕсли;
		
		ТекущийВариантКП = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВариантыКП(Операция = Неопределено, УстановитьОтбор = Истина)
	
	РазрешеноРедактированиеДокумента = ПравоДоступа("Редактирование", Метаданные.Документы.ЗаказПокупателя);

	Если Операция <> Неопределено Тогда
		ОбработатьИзменениеСоставаВариантов(Операция);
	КонецЕсли;
	
	Элементы.ТекущийВариантКП.СписокВыбора.Очистить();
	
	ЕстьНесколькоВариантовКП = Объект.КоличествоВариантовКП > 1;
	
	Если ЕстьНесколькоВариантовКП Тогда
		Для НомерВарианта = 1 По Объект.КоличествоВариантовКП Цикл
			Если НомерВарианта = Объект.ОсновнойВариантКП Тогда
				ПостфиксВарианта = НСтр("ru='(основной)'");
			Иначе
				ПостфиксВарианта = "";
			КонецЕсли;
			ИмяВарианта = СтрШаблон(НСтр("ru='Вариант %1 %2'"), НомерВарианта, ПостфиксВарианта);
			
			Элементы.ТекущийВариантКП.СписокВыбора.Добавить(НомерВарианта, ИмяВарианта);
		КонецЦикла;
		
		Если РазрешеноРедактированиеДокумента Тогда
			Элементы.ТекущийВариантКП.СписокВыбора.Добавить(НомерВарианта, "+");
		КонецЕсли;
	Иначе
		ИмяВарианта = НСтр("ru='Основной вариант'");
		Элементы.ТекущийВариантКП.СписокВыбора.Добавить(0, ИмяВарианта);
		Если РазрешеноРедактированиеДокумента Тогда
			Элементы.ТекущийВариантКП.СписокВыбора.Добавить(2, "+");
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.ТекущийВариантКП.СписокВыбора.НайтиПоЗначению(ТекущийВариантКП) = Неопределено Тогда
		ТекущийВариантКП = ?(Объект.ОсновнойВариантКП <> 0, Объект.ОсновнойВариантКП, Элементы.ТекущийВариантКП.СписокВыбора[0].Значение);
	КонецЕсли;
	
	Элементы.КоманднаяПанельВариантыКП.Видимость = РазрешеноРедактированиеДокумента И ЕстьНесколькоВариантовКП;
	Элементы.ТекущийВариантКПКонтекстноеМеню.ПодчиненныеЭлементы.ВариантыКПВыбратьОсновнымКонтекстноеМеню.Видимость = РазрешеноРедактированиеДокумента И ЕстьНесколькоВариантовКП;
	Элементы.ТекущийВариантКПКонтекстноеМеню.ПодчиненныеЭлементы.ВариантыКПДобавитьКонтекстноеМеню.Видимость        = РазрешеноРедактированиеДокумента И ЕстьНесколькоВариантовКП;
	Элементы.ТекущийВариантКПКонтекстноеМеню.ПодчиненныеЭлементы.ВариантыКПСкопироватьКонтекстноеМеню.Видимость     = РазрешеноРедактированиеДокумента;
	Элементы.ТекущийВариантКПКонтекстноеМеню.ПодчиненныеЭлементы.ВариантыКПУдалитьКонтекстноеМеню.Видимость         = РазрешеноРедактированиеДокумента И ЕстьНесколькоВариантовКП;
	Элементы.ДействияСВариантом.ПодчиненныеЭлементы.ВариантыКПВыбратьОсновным.Пометка  = (ТекущийВариантКП = Объект.ОсновнойВариантКП);
	Элементы.ТекущийВариантКПКонтекстноеМеню.ПодчиненныеЭлементы.ВариантыКПВыбратьОсновнымКонтекстноеМеню.Пометка = (ТекущийВариантКП = Объект.ОсновнойВариантКП);
	
	Если УстановитьОтбор Тогда
		УстановитьОтборПоВариантуКП();
	КонецЕсли;
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
	НастроитьЭлементыОтменыТоваров();
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоВариантуКП()
	
	ОбновитьУпорядочиваниеСтрокТаблицаЗапасы();
	
	Если Объект.КоличествоВариантовКП <= 1 Тогда
		Если Элементы.Запасы.ОтборСтрок <> Неопределено Тогда
			Если РежимСборки Тогда
				Элементы.Запасы.ОтборСтрок = Новый ФиксированнаяСтруктура("ЕстьРасхождение, ТипНоменклатурыЗапас", Истина, Истина);
			Иначе
				Элементы.Запасы.ОтборСтрок = Неопределено;
				Элементы.Подарки.ОтборСтрок = Неопределено;
				Элементы.БонусныеБаллыКНачислению.ОтборСтрок = Неопределено;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если РежимСборки Тогда
			Элементы.Запасы.ОтборСтрок = Новый ФиксированнаяСтруктура("ЕстьРасхождение, ТипНоменклатурыЗапас, НомерВариантаКП", Истина, Истина, ТекущийВариантКП);
		Иначе
			Элементы.Запасы.ОтборСтрок 					 = Новый ФиксированнаяСтруктура("НомерВариантаКП", ТекущийВариантКП);						
			Элементы.Подарки.ОтборСтрок 				 = Новый ФиксированнаяСтруктура("НомерВариантаКП", ТекущийВариантКП);
			Элементы.БонусныеБаллыКНачислению.ОтборСтрок = Новый ФиксированнаяСтруктура("НомерВариантаКП", ТекущийВариантКП);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ОтмененныеЗапасы.ОтборСтрок = Новый ФиксированнаяСтруктура("НомерВариантаКП", ТекущийВариантКП);
	НастроитьЭлементыОтменыТоваров();
	
	ОбновитьВидимостьПодарков();
	ОбновитьВидимостьБонусовКНачислению();
	ОбновитьИтогиСервер();
	
	// Ручная скидка - заполнение полей ввода на форме
	СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект,, ПараметрыОтбораСтрок(ТекущийВариантКП));
	// Конец Ручная скидка
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыОтбораСтрок(ВариантКП)
	
	ПараметрыОтбора = Новый Соответствие;
	ПараметрыОтбора.Вставить("НомерВариантаКП", ВариантКП);
	ПараметрыОтбора.Вставить("ЭтоРазделитель", Ложь);
	
	Возврат ПараметрыОтбора;
	
КонецФункции

#КонецОбласти

#Область Доставка

&НаСервере
Процедура ПрочитатьДанныеПоЗаказуНаДоставкуСервер()
	
	Если ЗначениеЗаполнено(ИдентификаторЗаказаИзСервиса)
		И Элементы.Страницы.ТекущаяСтраница <> Элементы.СтраницаДоставка Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказыСервисовДоставки.ДокументОснование КАК ДокументОснование,
	|	ЗаказыСервисовДоставки.ИдентификаторЗаказа КАК ИдентификаторЗаказа,
	|	ЗаказыСервисовДоставки.ТрекНомер КАК ТрекНомер,
	|	ЗаказыСервисовДоставки.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.ЗаказыСервисовДоставки КАК ЗаказыСервисовДоставки
	|ГДЕ
	|	ЗаказыСервисовДоставки.ДокументОснование = &Основание";
	
	Запрос.УстановитьПараметр("Основание", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ИдентификаторЗаказаИзСервиса) Тогда
			ИдентификаторЗаказаИзСервиса = Выборка.ИдентификаторЗаказа;
			
			Если НЕ ЗначениеЗаполнено(ИдентификаторЗаказаИзСервиса) Тогда
				Возврат;
			КонецЕсли;
			
			Если Элементы.Страницы.ТекущаяСтраница <> Элементы.СтраницаДоставка Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ТрекНомер) И ЗначениеЗаполнено(Выборка.ТрекНомер) Тогда
			Объект.ТрекНомер = Выборка.ТрекНомер;
			Модифицированность = Истина;
		КонецЕсли;
					
		ДанныеЗаказаИзСервиса = ДоставкаСервер.ПолучитьЗаказНаДоставкуИзСервиса(Объект.Организация,Объект.Ссылка,ИдентификаторЗаказаИзСервиса);
		
		Если ДанныеЗаказаИзСервиса = "" Тогда
			СтатусЗаказаВСервисе = Выборка.Статус;
			Возврат;
		КонецЕсли;
		
		СтатусЗаказаВСервисе = ДанныеЗаказаИзСервиса.Состояние;
		
		Если НЕ ЗначениеЗаполнено(Объект.ОжидаемаяДатаВручения) И Модифицированность Тогда
			Объект.ОжидаемаяДатаВручения = ДанныеЗаказаИзСервиса.ДатаДоставки;
		КонецЕсли;
		
		Если ИзменилсяСпособДоставки(ДанныеЗаказаИзСервиса.СпособДоставки) Тогда
			Объект.СпособДоставки = СпособДоставкиПоДаннымИзСервиса(ДанныеЗаказаИзСервиса.СпособДоставки);
			Модифицированность = Истина;
		КонецЕсли;
		
		ОбработатьУстановкуСпособаДоставкиНаСервере(Ложь);
		
		Если НЕ ЗначениеЗаполнено(Объект.СтоимостьДоставки) И ЗначениеЗаполнено(ДанныеЗаказаИзСервиса.СуммаДокумента) Тогда
			СтоимостьДоставкиИзСервиса = ДанныеЗаказаИзСервиса.СуммаДокумента;
			Элементы.ИндикаторТребуетсяРасчетЗаголовок.Видимость = Истина;
			Элементы.ГруппаРассчитатьДоставку.Видимость = Истина;
			Элементы.РассчитатьСтоимостьДоставки.Доступность = Истина;
			Элементы.СтраницаДоставка.Картинка = БиблиотекаКартинок.ВниманиеВВидеТреугольника;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Функция ИзменилсяСпособДоставки(СпособДоставкиСервиса)
	
	НовыйСпособДоставки = СпособДоставкиПоДаннымИзСервиса(СпособДоставкиСервиса);
	Возврат НовыйСпособДоставки <> Объект.СпособДоставки;
	
КонецФункции

&НаСервере
Функция СпособДоставкиПоДаннымИзСервиса(СпособДоставкиСервиса)
	
	Если СпособДоставкиСервиса = 1 Тогда
		Возврат Перечисления.СпособыДоставки.ПунктВыдачи;
	ИначеЕсли СпособДоставкиСервиса = 2 Тогда
		Возврат Перечисления.СпособыДоставки.Курьер;
	Иначе
		Возврат Объект.СпособДоставки;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЗаголовкиГруппДоставки()
	ЗаполнитьЗаголовокГруппыПолучатель(ЭтотОбъект);
	ЗаполнитьЗаголовокГруппыГабариты(ЭтотОбъект);
	ЗаполнитьЗаголовокГруппыСтоимость(ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьЗаголовокГруппыПолучатель(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
			
	Если НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
		Элементы.ГруппаПолучательВсплывающая.Заголовок = НСтр("ru = '<Не указан>'");
		Возврат;
	КонецЕсли;
	
	ЗаголовокПолучатель = Новый Массив;
	ЗаголовокПолучатель.Добавить(Объект.КонтактноеЛицо);
	
	Если ЗначениеЗаполнено(Объект.КонтактныйТелефон) И НЕ ЗначениеЗаполнено(Объект.ЗапаснойТелефон) Тогда
		ЗаголовокПолучатель.Добавить(Объект.КонтактныйТелефон);
	ИначеЕсли ЗначениеЗаполнено(Объект.КонтактныйТелефон) И ЗначениеЗаполнено(Объект.ЗапаснойТелефон) Тогда
		ЗаголовокПолучатель.Добавить(СтрШаблон(НСтр("ru = '%1 (еще 1)'"),Объект.КонтактныйТелефон));
	ИначеЕсли ЗначениеЗаполнено(Объект.ЗапаснойТелефон) Тогда
		ЗаголовокПолучатель.Добавить(Объект.ЗапаснойТелефон);
	Иначе
		ЗаголовокПолучатель.Добавить(НСтр("ru = '<Не указан>'"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПочтаПолучателя) Тогда
		ЗаголовокПолучатель.Добавить(Объект.ПочтаПолучателя);
	Иначе
		ЗаголовокПолучатель.Добавить(НСтр("ru = '<Не указан>'"));
	КонецЕсли;

	Элементы.ГруппаПолучательВсплывающая.Заголовок = СтрСоединить(ЗаголовокПолучатель, ",");
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьЗаголовокГруппыГабариты(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ШаблонЗаголовка = НСтр("ru = 'Габариты: %1 * %2 * %3 см= %4 м³, вес = %5 кг'");
	Элементы.ГруппаВесИОбъявленнаяЦенность.Заголовок = СтрШаблон(ШаблонЗаголовка,
		Объект.Длина,
		Объект.Ширина,
		Объект.Высота,
		Объект.Объем,
		Объект.Вес);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьЗаголовокГруппыСтоимость(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ШаблонЗаголовка = НСтр("ru = '%1 / НДС: %2'");
	Элементы.ГруппаСтоимостьРассчитать.Заголовок = СтрШаблон(ШаблонЗаголовка,
		Объект.СтоимостьДоставки,
		Объект.СуммаНДСДоставки);
		
КонецПроцедуры

&НаСервере
Процедура ПрочитатьВесИОбъемЕдиницыТовара()
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ ВТЗаказПокупателяЗапасы
	|ИЗ
	|	&ЗаказПокупателяЗапасы КАК ЗаказПокупателяЗапасы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТЗаказПокупателяЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(ВесИОбъемЕдиницТоваров.Вес, СпрНоменклатура.Вес * ЕСТЬNULL(СпрЕдиницыИзмерения.Коэффициент, 1)) КАК ВесЕдиницыТовара,
	|	ЕСТЬNULL(ВесИОбъемЕдиницТоваров.Объем, СпрНоменклатура.Объем * ЕСТЬNULL(СпрЕдиницыИзмерения.Коэффициент, 1)) КАК ОбъемЕдиницыТовара
	|ИЗ
	|	ВТЗаказПокупателяЗапасы КАК ВТЗаказПокупателяЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ВТЗаказПокупателяЗапасы.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК СпрЕдиницыИзмерения
	|		ПО ВТЗаказПокупателяЗапасы.ЕдиницаИзмерения = СпрЕдиницыИзмерения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВесИОбъемЕдиницТоваров КАК ВесИОбъемЕдиницТоваров
	|		ПО ВТЗаказПокупателяЗапасы.Номенклатура = ВесИОбъемЕдиницТоваров.Номенклатура
	|			И ВТЗаказПокупателяЗапасы.ЕдиницаИзмерения = ВесИОбъемЕдиницТоваров.ЕдиницаИзмерения");
	Запрос.УстановитьПараметр("ЗаказПокупателяЗапасы", Объект.Запасы.Выгрузить(Новый Структура("ТипНоменклатурыЗапас", Истина), "НомерСтроки, Номенклатура, ЕдиницаИзмерения"));
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВесИОбъемЕдиницыТовара = Новый Соответствие;
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ВесИОбъемЕдиницыТовара[Выборка.НомерСтроки] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВесИОбъемЕдиницыТовара[Выборка.НомерСтроки] = Новый Структура;
		ВесИОбъемЕдиницыТовара[Выборка.НомерСтроки].Вставить("ВесЕдиницыТовара", Выборка.ВесЕдиницыТовара);
		ВесИОбъемЕдиницыТовара[Выборка.НомерСтроки].Вставить("ОбъемЕдиницыТовара", Выборка.ОбъемЕдиницыТовара);
		
	КонецЦикла;
	
	ТребуетсяРасчетВесаЗаказа = Ложь;
	ТребуетсяРасчетОбъемаЗаказа = Ложь;
	
	Для Каждого ТекСтрокаЗапасы Из Объект.Запасы Цикл
		
		Если ВесИОбъемЕдиницыТовара[ТекСтрокаЗапасы.НомерСтроки] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекСтрокаЗапасы.ВесЕдиницыТовара = ВесИОбъемЕдиницыТовара[ТекСтрокаЗапасы.НомерСтроки].ВесЕдиницыТовара;
		Если Не ЗначениеЗаполнено(ТекСтрокаЗапасы.Вес)
			И ЗначениеЗаполнено(ТекСтрокаЗапасы.ВесЕдиницыТовара * ТекСтрокаЗапасы.Количество) Тогда
			ТекСтрокаЗапасы.Вес = ТекСтрокаЗапасы.ВесЕдиницыТовара * ТекСтрокаЗапасы.Количество;
			ТребуетсяРасчетВесаЗаказа = Истина;
		КонецЕсли;
		
		ТекСтрокаЗапасы.ОбъемЕдиницыТовара = ВесИОбъемЕдиницыТовара[ТекСтрокаЗапасы.НомерСтроки].ОбъемЕдиницыТовара;
		Если Не ЗначениеЗаполнено(ТекСтрокаЗапасы.Объем)
			И ЗначениеЗаполнено(ТекСтрокаЗапасы.ОбъемЕдиницыТовара * ТекСтрокаЗапасы.Количество) Тогда
			ТекСтрокаЗапасы.Объем = ТекСтрокаЗапасы.ОбъемЕдиницыТовара * ТекСтрокаЗапасы.Количество;
			ТребуетсяРасчетОбъемаЗаказа = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ВесИтог = 0;
	ОбъемИтог = 0;
	
	Для Каждого ТекСтрока Из Объект.Запасы.НайтиСтроки(Новый Структура("НомерВариантаКП", Объект.ОсновнойВариантКП)) Цикл
		ВесИтог = ВесИтог + ТекСтрока.Вес;
		ОбъемИтог = ОбъемИтог + ТекСтрока.Объем;
	КонецЦикла;
	
	Если ТребуетсяРасчетВесаЗаказа И ЗначениеЗаполнено(ВесИтог) Тогда
		Объект.Вес = ВесИтог;
	КонецЕсли;
	
	Если ТребуетсяРасчетОбъемаЗаказа И ЗначениеЗаполнено(ОбъемИтог) Тогда
		Объект.Объем = ОбъемИтог;
	КонецЕсли;
	
	ЗаполнитьЗаголовокГруппыГабариты(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыПодсистемыДоставка()
	
	Если ДоставкаСервер.АдресОтправленияИзСклада() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДоставкаСервер.ПоляАдресаОтправления(Объект.СтруктурнаяЕдиницаРезерв));
	Иначе
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДоставкаСервер.ПоляАдресаОтправления(Объект.Организация));
	КонецЕсли;
	
	Элементы.АдресОтправления.РасширеннаяПодсказка.Заголовок = АдресОтправленияПодсказка;
	
	ОбработатьУстановкуСпособаДоставкиНаСервере(НЕ ТолькоПросмотр И Объект.Ссылка.Пустая());
	
	Если ЗначениеЗаполнено(Объект.СлужбаДоставки) Тогда
		ДоставкаСервер.ОбновитьРеквизитыПараметрыДоставки(
		ЭтотОбъект,
		Объект.СлужбаДоставки,
		Объект.ПараметрыДоставки.Выгрузить(),
		Элементы.ГруппаПараметрыДоставки);
	КонецЕсли;
	
	ЗаполнитьСписокВыбораПолучателя(Элементы.КонтактноеЛицо, ДанныеКонтактныхЛиц(Контрагент));
	ЗаполнитьСписокВыбораАдресаДоставки(Элементы.АдресДоставкиПолучателя, АдресаДоставки(Контрагент));
	
	НастроитьЭлементыЯндексДоставки();
	ЗаполнитьЗаголовкиГруппДоставки();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПоляДоставки(Знач Объект, Знач ДанныеКонтрагента, Форма)
	
	Если Не ТребуетсяПерезаполнитьПоляДоставки(Объект, ДанныеКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.КонтактноеЛицо = Неопределено;
	Объект.КонтактныйТелефон = Неопределено;
	Объект.ЗапаснойТелефон = Неопределено;
	Объект.ПочтаПолучателя = Неопределено;
	
	Если ЗначениеЗаполнено(ДанныеКонтрагента.ДанныеОсновногоКонтактногоЛица) Тогда
		Объект.КонтактноеЛицо = ДанныеКонтрагента.ДанныеОсновногоКонтактногоЛица.Представление;
		Объект.КонтактныйТелефон = ДанныеКонтрагента.ДанныеОсновногоКонтактногоЛица.КонтактныйТелефон;
		Объект.ЗапаснойТелефон = ДанныеКонтрагента.ДанныеОсновногоКонтактногоЛица.ЗапаснойТелефон;
		Объект.ПочтаПолучателя = ДанныеКонтрагента.ДанныеОсновногоКонтактногоЛица.ПочтаПолучателя;
	Иначе
		Для Каждого ТекЭлемент Из ДанныеКонтрагента.ДанныеКонтактныхЛиц Цикл
			Объект.КонтактноеЛицо = ТекЭлемент.Значение.Представление;
			Объект.КонтактныйТелефон = ТекЭлемент.Значение.КонтактныйТелефон;
			Объект.ЗапаснойТелефон = ТекЭлемент.Значение.ЗапаснойТелефон;
			Объект.ПочтаПолучателя = ТекЭлемент.Значение.ПочтаПолучателя;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКонтрагента.АдресаДоставки) Тогда
		Объект.АдресДоставки = ДанныеКонтрагента.АдресаДоставки[0].АдресДоставки;
		Объект.АдресДоставкиЗначение = ДанныеКонтрагента.АдресаДоставки[0].АдресДоставкиЗначение;
		Объект.АдресДоставкиЗначенияПолей = ДанныеКонтрагента.АдресаДоставки[0].АдресДоставкиЗначенияПолей;
	Иначе
		Объект.АдресДоставки = "";
		Объект.АдресДоставкиЗначение = "";
		Объект.АдресДоставкиЗначенияПолей = "";
	КонецЕсли;
	
	ЗаполнитьЗаголовокГруппыПолучатель(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораПолучателя(ЭлементКонтактноеЛицо, ДанныеКонтактныхЛиц)
	
	ЭлементКонтактноеЛицо.СписокВыбора.Очистить();
	ЭлементКонтактноеЛицо.КнопкаВыпадающегоСписка = Ложь;
	
	Если ДанныеКонтактныхЛиц.Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекЭлемент Из ДанныеКонтактныхЛиц Цикл
		ЭлементКонтактноеЛицо.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Значение.Представление);
	КонецЦикла;
	
	ЭлементКонтактноеЛицо.КнопкаВыпадающегоСписка = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораАдресаДоставки(ЭлементАдресДоставки, АдресаДоставки)
	
	ЭлементАдресДоставки.СписокВыбора.Очистить();
	ЭлементАдресДоставки.КнопкаВыпадающегоСписка = Ложь;
	
	Если АдресаДоставки.Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекАдресДоставки Из АдресаДоставки Цикл
		ЭлементАдресДоставки.СписокВыбора.Добавить(ТекАдресДоставки, ТекАдресДоставки.АдресДоставки);
	КонецЦикла;
	
	ЭлементАдресДоставки.КнопкаВыпадающегоСписка = Истина;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыЯндексДоставки()
	
	НастройкаЯндексДоставки = ЯндексДоставка.НастройкаПоОрганизации(Объект.Организация);
	
	Если ЗначениеЗаполнено(НастройкаЯндексДоставки) Тогда
		
		СвойстваЗаказа = РегистрыСведений.ЯндексДоставка.СвойстваЗаказа(Объект.Ссылка);
		ИдентификаторЯндексДоставки = СвойстваЗаказа.ИдентификаторЗаказа;
		НомерЗаказаЯндексДоставки = СвойстваЗаказа.НомерЗаказа;
		СтатусЗаказаЯндексДоставки = СвойстваЗаказа.Статус;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПередатьВЯндексДоставку",
			"Доступность", Не ТолькоПросмотр);
		
	Иначе
		
		Элементы.ГруппаЯндексДоставка.Видимость = Ложь;
		
	КонецЕсли;
	
	НастроитьКомандуПерейтиКЗаказуЯндексДоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки()
	
	Если Не ЗначениеЗаполнено(Объект.СпособДоставки) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.Самовывоз") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДоставкаСтороннегоСервиса Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗаданаФормулаРасчетаСтоимости И Не ЗаданаФормулаРасчетаСебестоимости И Не ВыбранаСлужбаДоставкиЯндекса Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СтраницаДоставка.Картинка = БиблиотекаКартинок.ВниманиеВВидеТреугольника;
	Элементы.ИндикаторТребуетсяРасчет.Видимость = Истина;
	Элементы.ИндикаторТребуетсяРасчетЗаголовок.Видимость = Истина;
	
	Если Не Объект.ВидимостьИндикатораТребуетсяРасчет Тогда
		Объект.ВидимостьИндикатораТребуетсяРасчет = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки(Форма)
	
	Если Форма.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.СтраницаДоставка.Картинка = Новый Картинка;
	Форма.Элементы.ИндикаторТребуетсяРасчет.Видимость = Ложь;
	Форма.Элементы.ИндикаторТребуетсяРасчетЗаголовок.Видимость = Ложь;
	Форма.Объект.ВидимостьИндикатораТребуетсяРасчет = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКомандуПерейтиКЗаказуЯндексДоставки()
	
	КомпонентыЗаголовка = Новый Массив;
	КомпонентыЗаголовка.Добавить(НомерЗаказаЯндексДоставки);
	КомпонентыЗаголовка.Добавить(СтатусЗаказаЯндексДоставки);
	Элементы.ПерейтиКЗаказуЯндексДоставки.Заголовок = СтрСоединить(КомпонентыЗаголовка, " / ");
	Элементы.ПерейтиКЗаказуЯндексДоставки.Видимость = ЗначениеЗаполнено(ИдентификаторЯндексДоставки)
	И ЗначениеЗаполнено(НомерЗаказаЯндексДоставки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидаемаяДатаВрученияПриИзменении(Элемент)
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительОнЖеПриИзменении(Элемент)
	
	Если ГрузоотправительОнЖе Тогда
		Объект.Грузоотправитель = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	КонецЕсли;

	УстановитьОтображениеГрузоперевозки();

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательОнЖеПриИзменении(Элемент)
	
	Если ГрузополучательОнЖе Тогда
		Объект.Грузополучатель = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	КонецЕсли;

	УстановитьОтображениеГрузоперевозки();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяДоставкиСПриИзменении(Элемент)

	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяДоставкиПоПриИзменении(Элемент)
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура СлужбаДоставкиПриИзменении(Элемент)
	
	ОбновитьЗначенияПараметровДоставки();
	СлужбыДоставкиПриИзмененииСервер();
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	ОбновитьИтогиКлиент();
	
КонецПроцедуры

&НаСервере
Процедура СлужбыДоставкиПриИзмененииСервер()
	
	ОбновитьПараметрыСлужбыДоставки();
	ДоставкаСервер.ОбновитьРеквизитыПараметрыДоставки(ЭтотОбъект, Объект.СлужбаДоставки, Объект.ПараметрыДоставки.Выгрузить(), Элементы.ГруппаПараметрыДоставки);
	
	Если ВыбранаСлужбаДоставкиЯндекса Тогда
		НастройкаЯндексДоставки = ЯндексДоставка.НастройкаПоОрганизации(Объект.Организация);
	ИначеЕсли ЗначениеЗаполнено(Объект.НоменклатураДоставки) И НЕ ЗаданаФормулаРасчетаСтоимости И НЕ ЗаданаФормулаРасчетаСебестоимости Тогда 
		НоменклатураДоставкиПриИзмененииНаСервере();
	КонецЕсли;
	
	НастроитьЭлементыПоВариантуУчетаДоставки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СервисДоставкиПриИзменении(Элемент)
	Объект.ТрекНомер = "";
	ИдентификаторЗаказаИзСервиса = "";
	СтатусЗаказаВСервисе = "";
	ОбработатьУстановкуСпособаДоставкиНаСервере(,Истина);
КонецПроцедуры

&НаКлиенте
Процедура СлужбаДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораСлужбыДоставки(ВыбранаСлужбаДоставкиЯндекса);
	
КонецПроцедуры

&НаКлиенте
Процедура СлужбаДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.НастройкиЯндексДоставки") Тогда
		
		СтандартнаяОбработка = Ложь;
		НастройкаЯндексДоставки = ВыбранноеЗначение;
		ОткрытьФормуВыбораСлужбыДоставки(Истина);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Объект.СпособДоставки = ВыбранноеЗначение.СпособДоставки;
		Объект.СлужбаДоставки = ВыбранноеЗначение.СлужбаДоставки;
		Объект.ЗонаТариф = ВыбранноеЗначение.ЗонаТариф;
		Объект.ИдентификаторНаправленияДоставки = ВыбранноеЗначение.ИдентификаторНаправленияДоставки;
		СтоимостьДоставкиСНДС = ВыбранноеЗначение.СтоимостьДляПолучателя;
		Объект.СебестоимостьДоставки = ВыбранноеЗначение.СтоимостьДляМагазина;
		ОбновитьСуммуНДСДоставкиПриРасчете(ЭтотОбъект);
		
		Объект.ОжидаемаяДатаВручения = ВыбранноеЗначение.МаксСрок;
		ВыбранноеЗначение.Свойство("ВремяДоставкиС", Объект.ВремяДоставкиС);
		ВыбранноеЗначение.Свойство("ВремяДоставкиПо", Объект.ВремяДоставкиПо);
		ВыбранноеЗначение.Свойство("ПунктВыдачиЗаказа", Объект.ПунктВыдачиЗаказа);
		
		НастроитьЭлементыПоСпособуДоставки(ЭтотОбъект);
		НастроитьЭлементыПоВариантуУчетаДоставки(ЭтотОбъект);
		
		Модифицированность = Истина;
		
		ОтключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки(ЭтотОбъект);
		ОбновитьИтогиКлиент();
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СлужбыДоставки") Тогда
		
		Если ВыбранаСлужбаДоставкиЯндекса Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		
		НастроитьЭлементыПоСпособуДоставки(ЭтотОбъект);
		НастроитьЭлементыПоВариантуУчетаДоставки(ЭтотОбъект);
		
	КонецЕсли;
	
	Элементы.ПунктВыдачиЗаказа.Доступность = ЗначениеЗаполнено(Объект.СлужбаДоставки);
	
КонецПроцедуры

&НаКлиенте
Процедура СлужбаДоставкиОчистка(Элемент, СтандартнаяОбработка)
	
	НастроитьЭлементыПоСпособуДоставки(ЭтотОбъект);
	Элементы.ПунктВыдачиЗаказа.Доступность = ЗначениеЗаполнено(Объект.СлужбаДоставки);
	
КонецПроцедуры

&НаКлиенте
Процедура СлужбаДоставкиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокВыбораСлужбыДоставки(Текст, Объект.СпособДоставки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокВыбораСлужбыДоставки(Текст, СпособДоставки)
	
	Результат = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СлужбыДоставкиДоступныеСпособыДоставки.Ссылка,
	|	СлужбыДоставкиДоступныеСпособыДоставки.Ссылка.Наименование КАК Наименование
	|ИЗ
	|	Справочник.СлужбыДоставки.ДоступныеСпособыДоставки КАК СлужбыДоставкиДоступныеСпособыДоставки
	|ГДЕ
	|	СлужбыДоставкиДоступныеСпособыДоставки.Ссылка.ИдентификаторЯндекса = 0
	|	И СлужбыДоставкиДоступныеСпособыДоставки.СпособДоставки = &СпособДоставки
	|	И СлужбыДоставкиДоступныеСпособыДоставки.Ссылка.Наименование ПОДОБНО ""%"" + &Текст + ""%""
	|
	|СГРУППИРОВАТЬ ПО
	|	СлужбыДоставкиДоступныеСпособыДоставки.Ссылка,
	|	СлужбыДоставкиДоступныеСпособыДоставки.Ссылка.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("СпособДоставки", СпособДоставки);
	Запрос.УстановитьПараметр("Текст", Текст);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НовыйЭлемент = Результат.Добавить();
		НовыйЭлемент.Значение = Выборка.Ссылка;
		НовыйЭлемент.Представление = Выборка.Наименование;
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СтоимостьДоставкиПриИзменении(Элемент)
	
	ОбновитьСуммуНДСДоставки();
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	ОбновитьИтогиКлиент();
	ПересчитатьПлатежныйКалендарь();
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	ОчиститьКалькуляцию();
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСДоставкиПриИзменении(Элемент)
	
	ОбновитьСуммуНДСДоставки();
	Если НЕ Объект.СуммаВключаетНДС Тогда
		ОбновитьИтогиКлиент();
	КонецЕсли; 
	ЗаполнитьЗаголовокГруппыСтоимость(ЭтотОбъект);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОбъемИВес(Команда)
	РассчитатьОбъемИВесЗаказа();
	ЗаполнитьЗаголовокГруппыГабариты(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтоимостьДоставки(Команда)
	
	Если ДоставкаСтороннегоСервиса Тогда
		РассчитатьСтоимостьДоставкиСтороннегоСервиса();
		Возврат;
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	Задание = РассчитатьСтоимостьДоставкиНаСервере();
	
	Если ТипЗнч(Задание) = Тип("Структура") Тогда
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
		Задание,
		Новый ОписаниеОповещения("ОбработатьРасчетСтоимостиДоставки", ЭтотОбъект),
		ПараметрыОжидания);
	Иначе
		ОбновитьИтогиКлиент();
		ПересчитатьПлатежныйКалендарь();
	КонецЕсли;
	
	ЗаполнитьЗаголовокГруппыСтоимость(ЭтотОбъект);
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элементы.РассчитатьСтоимостьДоставки, "Нажатие");
	ОчиститьКалькуляцию();
	
КонецПроцедуры

&НаСервере
Функция РассчитатьСтоимостьДоставкиНаСервере()
	
	ОтключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(НастройкаЯндексДоставки)
		И ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СлужбаДоставки, "ИдентификаторЯндекса", Истина)) Тогда
		
		// Расчет стоимости доставки по данным Яндекса выполняется асинхронно.
		// Результат расчета затем передается в ОбработатьРасчетСтоимостиДоставки.
		Элементы.СтраницыСтоимостьРассчитать.ТекущаяСтраница = Элементы.СтраницаВыполняетсяРасчет;
		
		ПараметрыРасчета = Новый Структура;
		ПараметрыРасчета.Вставить("СлужбаДоставки", Объект.СлужбаДоставки);
		ПараметрыРасчета.Вставить("ЗонаТариф", Объект.ЗонаТариф);
		ПараметрыРасчета.Вставить("ПараметрыПоискаСпособаДоставки", ПараметрыПоискаСпособаДоставки());
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.ОжидатьЗавершение = 0;
		
		Результат = ДлительныеОперации.ВыполнитьВФоне(
		"ЯндексДоставка.ЗаданиеРассчитатьСтоимостьДоставки",
		ПараметрыРасчета,
		ПараметрыВыполнения);
		
		Возврат Результат;
		
	Иначе
		
		// Расчет стоимости доставки на основе формул выполняется синхронно.
		// Результат расчета помещается непосредственно в поля объекта.
		ПараметрыРасчета = Новый Структура;
		Для каждого СтрокаТабличнойЧасти Из ПараметрыДоставки Цикл
			ПараметрыРасчета.Вставить(СтрокаТабличнойЧасти.Идентификатор, ЭтаФорма[СтрокаТабличнойЧасти.ИмяРеквизита]);
		КонецЦикла;
		
		СтоимостьДоставкиСНДС = ДоставкаСервер.СтоимостьДоставки(Объект, ПараметрыРасчета);
		Объект.СебестоимостьДоставки = ДоставкаСервер.СебестоимостьДоставки(Объект, ПараметрыРасчета);
		ТекущаяВалюта = Константы.ВалютаУчета.Получить();
		Если ТекущаяВалюта <> Объект.ВалютаДокумента Тогда
			СтруктураКурсы = ЦенообразованиеСервер.ПолучитьКурсыВалют(ТекущаяВалюта, Объект.ВалютаДокумента, Объект.Дата);
			СтоимостьДоставкиСНДС = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(СтоимостьДоставкиСНДС, СтруктураКурсы.КурсНач, СтруктураКурсы.Курс, СтруктураКурсы.КратностьНач, СтруктураКурсы.Кратность);
			Объект.СебестоимостьДоставки = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(Объект.СебестоимостьДоставки, СтруктураКурсы.КурсНач, СтруктураКурсы.Курс, СтруктураКурсы.КратностьНач, СтруктураКурсы.Кратность);
		КонецЕсли; 
		ОбновитьСуммуНДСДоставкиПриРасчете(ЭтотОбъект);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура РассчитатьСтоимостьДоставкиСтороннегоСервиса()
	
	Объект.СтоимостьДоставки = СтоимостьДоставкиИзСервиса;
	СтоимостьДоставкиСНДС = СтоимостьДоставкиИзСервиса;
	
	ОбновитьСуммуНДСДоставкиПриРасчете(ЭтотОбъект);
	ОбновитьИтогиКлиент();
	ПересчитатьПлатежныйКалендарь();
	ОчиститьКалькуляцию();

	Элементы.ИндикаторТребуетсяРасчет.Видимость = Ложь;
	Элементы.ИндикаторТребуетсяРасчетЗаголовок.Видимость = Ложь;
	Элементы.СтраницаДоставка.Картинка = Новый Картинка;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРасчетСтоимостиДоставки(Результат, Параметры) Экспорт
	
	Элементы.СтраницыСтоимостьРассчитать.ТекущаяСтраница = Элементы.СтраницаКнопкаРассчитать;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		ОбработатьРасчетСтоимостиДоставкиНаСервере(Результат.АдресРезультата);
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
		Результат.ПодробноеПредставлениеОшибки,,
		"СтоимостьДоставки",
		"Объект");
		
	КонецЕсли;
	
	ОбновитьИтогиКлиент();
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРасчетСтоимостиДоставкиНаСервере(АдресХранилища)
	
	РезультатРасчета = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(РезультатРасчета) <> Тип("Структура") Тогда
		ОбщегоНазначения.СообщитьПользователю(
		НСтр("ru = 'Не удалось рассчитать стоимость.
		|Попробуйте выбрать другую службу доставки.'"),,
		"СтоимостьДоставки",
		"Объект");
		Возврат;
	КонецЕсли;
	
	Если РезультатРасчета.Свойство("СтоимостьДоставки") Тогда
		СтоимостьДоставкиСНДС = РезультатРасчета.СтоимостьДоставки;
	Иначе
		СтоимостьДоставкиСНДС = 0;
	КонецЕсли;
	Если РезультатРасчета.Свойство("СебестоимостьДоставки") Тогда
		Объект.СебестоимостьДоставки = РезультатРасчета.СебестоимостьДоставки;
	Иначе
		Объект.СебестоимостьДоставки = 0;
	КонецЕсли;
	Если РезультатРасчета.Свойство("ЗонаТариф") Тогда
		Объект.ЗонаТариф = РезультатРасчета.ЗонаТариф;
	КонецЕсли;
	
	ТекущаяВалюта = Константы.НациональнаяВалюта.Получить();
	Если ТекущаяВалюта <> Объект.ВалютаДокумента И (СтоимостьДоставкиСНДС <> 0 ИЛИ Объект.СебестоимостьДоставки <> 0) Тогда
		СтруктураКурсы = ЦенообразованиеСервер.ПолучитьКурсыВалют(ТекущаяВалюта, Объект.ВалютаДокумента, Объект.Дата);
		СтоимостьДоставкиСНДС = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(СтоимостьДоставкиСНДС, СтруктураКурсы.КурсНач, СтруктураКурсы.Курс, СтруктураКурсы.КратностьНач, СтруктураКурсы.Кратность);
		Объект.СебестоимостьДоставки = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(Объект.СебестоимостьДоставки, СтруктураКурсы.КурсНач, СтруктураКурсы.Курс, СтруктураКурсы.КратностьНач, СтруктураКурсы.Кратность);
	КонецЕсли; 
	
	ОбновитьСуммуНДСДоставкиПриРасчете(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСуммуНДСДоставки()
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДСДоставки);
	
	Если Объект.СуммаВключаетНДС Тогда
		Объект.СуммаНДСДоставки = Объект.СтоимостьДоставки - (Объект.СтоимостьДоставки) / ((СтавкаНДС + 100) / 100);
		СтоимостьДоставкиСНДС = Объект.СтоимостьДоставки;
	Иначе
		Объект.СуммаНДСДоставки = Объект.СтоимостьДоставки * СтавкаНДС / 100;
		СтоимостьДоставкиСНДС = Объект.СтоимостьДоставки + Объект.СуммаНДСДоставки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиПолучателяПриИзменении(Элемент)
	
	ПриИзмененииПредставленияАдреса(
	Элемент.ТекстРедактирования,
	Объект["АдресДоставкиЗначение"]);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиПолучателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОткрытьФормуВыбораАдресаИОбработатьРезультат(
		Элемент,
		Объект,
		"АдресДоставки",
		СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиПолучателяОчистка(Элемент, СтандартнаяОбработка)
	АдресДоставкиПолучателяПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиПолучателяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Объект.АдресДоставки = ВыбранноеЗначение.АдресДоставки;
	Объект.АдресДоставкиЗначение = ВыбранноеЗначение.АдресДоставкиЗначение;
	Объект.АдресДоставкиЗначенияПолей = ВыбранноеЗначение.АдресДоставкиЗначенияПолей;
	
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПоДоставкеПриИзменении(Элемент)
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПоДоставкеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
	Элемент.ТекстРедактирования,
	ЭтотОбъект,
	"Объект.ДополнительнаяИнформацияПоДоставке",
	НСтр("ru = 'Комментарий для службы доставки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СпособДоставкиПриИзменении(Элемент)
	
	ОбработатьУстановкуСпособаДоставкиНаСервере();
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	Если НЕ ЗначениеЗаполнено(Объект.СлужбаДоставки) Тогда
		// В случае очистки поля
		ОбновитьЗначенияПараметровДоставки();
	КонецЕсли; 
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	ОчиститьКалькуляцию();
	ОбновитьИтогиКлиент();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУстановкуСпособаДоставкиНаСервере(ОбновлятьДанные = Истина, ИзменениеСервиса = Ложь)
	
	НастроитьЭлементыПоСпособуДоставки(ЭтотОбъект);
	НастроитьВидимостьСервисовДоставки();
	
	Если ОбновлятьДанные Тогда
		
		Если СервисДоставкиНеПоддерживаетУказанныйСпособДоставки() Тогда
			Объект.СервисДоставки = Перечисления.СервисыДоставки.ПустаяСсылка();
		КонецЕсли;
		
		Если ИзменениеСервиса Тогда
			Объект.СлужбаДоставки = Справочники.СлужбыДоставки.ПустаяСсылка();
		КонецЕсли;
		
		Если СлужбаДоставкиНеПоддерживаетУказанныйСпособДоставки()
			Или Не ДоставкаСервер.ИспользуетсяДоставка(Объект.СпособДоставки) Тогда
			Объект.СлужбаДоставки = Справочники.СлужбыДоставки.ПустаяСсылка();
			Объект.Курьер = Справочники.ФизическиеЛица.ПустаяСсылка();
			Объект.ЗонаТариф = Справочники.ЗоныТарифыДоставки.ПустаяСсылка();
			Объект.ПунктВыдачиЗаказа = Справочники.ПунктыВыдачиЗаказа.ПустаяСсылка();
			Объект.ТрекНомер = "";
			СлужбыДоставкиПриИзмененииСервер();
		КонецЕсли;
		
		Если НЕ ДоставкаСервер.ИспользуетсяДоставка(Объект.СпособДоставки) Тогда
			СтоимостьДоставкиСНДС = 0;
			Объект.СтоимостьДоставки = 0;
			Объект.СуммаНДСДоставки = 0;
			Объект.СебестоимостьДоставки = 0;
			ЗаполнитьЗаголовокГруппыСтоимость(ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли; 

	НастроитьЭлементыПоСервисуДоставки();
	НастроитьЭлементыПоВариантуУчетаДоставки(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция СервисДоставкиНеПоддерживаетУказанныйСпособДоставки()
	
	Если НЕ ЗначениеЗаполнено(Объект.СервисДоставки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ДоставкаСервер.ИспользуетсяДоставка(Объект.СпособДоставки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Объект.СервисДоставки = Перечисления.СервисыДоставки.Сервис1СДоставка
		И Объект.СпособДоставки = Перечисления.СпособыДоставки.Почта Тогда
		Возврат Истина;
	КонецЕсли;

	Если Объект.СервисДоставки = Перечисления.СервисыДоставки.Сервис1СКурьер
		И (Объект.СпособДоставки = Перечисления.СпособыДоставки.Почта
		ИЛИ Объект.СпособДоставки = Перечисления.СпособыДоставки.ПунктВыдачи) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЭлементыПоСпособуДоставки(Форма)
	
	Элементы = Форма.Элементы;
	СпособДоставки = Форма.Объект.СпособДоставки;
	
	Если СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.Самовывоз") 
		Или Не ЗначениеЗаполнено(СпособДоставки) Тогда
		
		Элементы.СлужбаДоставки.Видимость = Ложь;
		Элементы.СлужбаДоставки.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Курьер.Видимость = Ложь;
		Элементы.НоменклатураДоставки.Видимость = Ложь;
		Элементы.НоменклатураДоставки.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ГруппаСтоимостьВсплывающая.Видимость = Ложь;
		Элементы.ЗонаТариф.Видимость = Ложь;
		Элементы.ГруппаВремяДоставки.Видимость = Ложь;
		Элементы.ДополнительнаяИнформацияПоДоставке.Видимость = Истина;
		Элементы.ПунктВыдачиЗаказа.Видимость = Ложь;
		Элементы.ГруппаВремяДоставки.Видимость = Ложь;
		Элементы.ТрекНомер.Видимость = Ложь;
		Элементы.АдресДоставкиПолучателя.Заголовок = НСтр("ru = 'Адрес доставки'");
		
	ИначеЕсли СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.ПунктВыдачи") Тогда
		
		Элементы.СлужбаДоставки.Видимость = Истина;
		Элементы.СлужбаДоставки.АвтоОтметкаНезаполненного = Истина;
		Элементы.Курьер.Видимость = Истина;
		Элементы.НоменклатураДоставки.Видимость = Истина;
		Элементы.НоменклатураДоставки.АвтоОтметкаНезаполненного = Истина;
		Элементы.ГруппаСтоимостьВсплывающая.Видимость = Истина;
		Элементы.ЗонаТариф.Видимость = Истина;
		Элементы.ГруппаВремяДоставки.Видимость = Ложь;
		Элементы.АдресДоставкиПолучателя.Заголовок = НСтр("ru = 'Населенный пункт, где расположен пункт выдачи'");
		Элементы.ДополнительнаяИнформацияПоДоставке.Видимость = Истина;
		Элементы.ПунктВыдачиЗаказа.Видимость = Истина;
		Элементы.ТрекНомер.Видимость = Истина;
		
	ИначеЕсли СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.Курьер") Тогда
		
		Элементы.СлужбаДоставки.Видимость = Истина;
		Элементы.СлужбаДоставки.АвтоОтметкаНезаполненного = Истина;
		Элементы.Курьер.Видимость = Истина;
		Элементы.НоменклатураДоставки.Видимость = Истина;
		Элементы.НоменклатураДоставки.АвтоОтметкаНезаполненного = Истина;
		Элементы.ГруппаСтоимостьВсплывающая.Видимость = Истина;
		Элементы.ЗонаТариф.Видимость = Истина;
		Элементы.ГруппаВремяДоставки.Видимость = Истина;
		Элементы.АдресДоставкиПолучателя.Заголовок = НСтр("ru = 'Адрес доставки'");
		Элементы.ДополнительнаяИнформацияПоДоставке.Видимость = Истина;
		Элементы.ПунктВыдачиЗаказа.Видимость = Ложь;
		Элементы.ТрекНомер.Видимость = Истина;
		
	ИначеЕсли СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.Почта") Тогда
		
		Элементы.СлужбаДоставки.Видимость = Истина;
		Элементы.СлужбаДоставки.АвтоОтметкаНезаполненного = Истина;
		Элементы.Курьер.Видимость = Истина;
		Элементы.НоменклатураДоставки.Видимость = Истина;
		Элементы.НоменклатураДоставки.АвтоОтметкаНезаполненного = Истина;
		Элементы.ГруппаСтоимостьВсплывающая.Видимость = Истина;
		Элементы.ЗонаТариф.Видимость = Истина;
		Элементы.ГруппаВремяДоставки.Видимость = Ложь;
		Элементы.АдресДоставкиПолучателя.Заголовок = НСтр("ru = 'Адрес, куда придёт извещение о прибытии посылки в отделение'");
		Элементы.ДополнительнаяИнформацияПоДоставке.Видимость = Истина;
		Элементы.ПунктВыдачиЗаказа.Видимость = Ложь;
		Элементы.ТрекНомер.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыПоСервисуДоставки()
	
	ДоставкаСтороннегоСервиса = Объект.СервисДоставки = Перечисления.СервисыДоставки.Сервис1СДоставка 
		ИЛИ Объект.СервисДоставки = Перечисления.СервисыДоставки.Сервис1СКурьер;
	ВыбранаСлужбаДоставкиЯндекса = Объект.СервисДоставки = Перечисления.СервисыДоставки.ЯндексДоставка;
	
	Элементы.ДанныеПоДоставке.Видимость = Объект.СервисДоставки = Перечисления.СервисыДоставки.ПустаяСсылка()
		ИЛИ Объект.СервисДоставки = Перечисления.СервисыДоставки.ЯндексДоставка;
	
	Элементы.ГруппаЯндексДоставка.Видимость = Объект.СервисДоставки = Перечисления.СервисыДоставки.ЯндексДоставка;	
	Элементы.Группа1CДоставка.Видимость = Объект.СервисДоставки = Перечисления.СервисыДоставки.Сервис1СДоставка;
	Элементы.Группа1СКурьер.Видимость = Объект.СервисДоставки = Перечисления.СервисыДоставки.Сервис1СКурьер;	
		
	Элементы.ПерейтиКЗаказуВ1СДоставке.Видимость = ЗначениеЗаполнено(ИдентификаторЗаказаИзСервиса);
	Элементы.ПередатьВ1СДоставку.Видимость = НЕ ЗначениеЗаполнено(ИдентификаторЗаказаИзСервиса);
	
	Элементы.ПерейтиКЗаказуВ1СКурьер.Видимость = ЗначениеЗаполнено(ИдентификаторЗаказаИзСервиса);
	Элементы.ПередатьВ1СКурьер.Видимость = НЕ ЗначениеЗаполнено(ИдентификаторЗаказаИзСервиса);
	Элементы.ОтследитьЗаказВСервисе.Видимость = ДоставкаСтороннегоСервиса;
	Элементы.ТрекНомер.ТолькоПросмотр = ДоставкаСтороннегоСервиса;
	Элементы.СтатусЗаказаВСервисе.Видимость = ДоставкаСтороннегоСервиса;
	Элементы.РассчитатьСтоимостьДоставки.Доступность = Объект.ВидимостьИндикатораТребуетсяРасчет И НЕ ДоставкаСтороннегоСервиса;
	Элементы.ИндикаторТребуетсяРасчетЗаголовок.Видимость = Объект.ВидимостьИндикатораТребуетсяРасчет 
		И НЕ ДоставкаСтороннегоСервиса;
	
	Элементы.СлужбаДоставки.КнопкаВыпадающегоСписка = НЕ ВыбранаСлужбаДоставкиЯндекса;
	Элементы.СлужбаДоставки.КнопкаСоздания = НЕ ВыбранаСлужбаДоставкиЯндекса;
	
	Если ВыбранаСлужбаДоставкиЯндекса Тогда
		Элементы.СлужбаДоставки.ОтображениеКнопкиВыбора=ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
	Иначе
		Элементы.СлужбаДоставки.ОтображениеКнопкиВыбора=ОтображениеКнопкиВыбора.Авто;
	КонецЕсли;
	
	Если ДоставкаСтороннегоСервиса Тогда
		Элементы.ПунктВыдачиЗаказа.Видимость = Ложь;
		Элементы.ТрекНомер.МаксимальнаяШирина = 31;
		Элементы.ТрекНомер.ПодсказкаВвода = НСтр("ru = 'Будет заполнен автоматически из сервиса'");
		Элементы.СлужбаДоставки.АвтоОтметкаНезаполненного = Ложь;
	Иначе
		Элементы.ТрекНомер.МаксимальнаяШирина = 35;
		Элементы.ТрекНомер.ПодсказкаВвода = "";
	КонецЕсли;
	
	Если Объект.СервисДоставки = Перечисления.СервисыДоставки.Сервис1СДоставка Тогда
		ТипГрузоперевозки = 1;
	ИначеЕсли Объект.СервисДоставки = Перечисления.СервисыДоставки.Сервис1СКурьер Тогда
		ТипГрузоперевозки = 2;
	Иначе
		ТипГрузоперевозки = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЭлементыПоВариантуУчетаДоставки(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Форма.ВыбранаСлужбаДоставкиЯндекса ИЛИ Форма.ДоставкаСтороннегоСервиса Тогда
		Элементы.СтоимостьДоставки.ТолькоПросмотр = Не Форма.РазрешеноРедактированиеСтоимостиДоставки;
		Элементы.РассчитатьСтоимостьДоставки.Доступность = Форма.ВыбранаСлужбаДоставкиЯндекса;
		Элементы.СтавкаНДСДоставки.ТолькоПросмотр = Ложь;
	ИначеЕсли Форма.ВариантУчетаДоставки = ПредопределенноеЗначение("Перечисление.ВариантыУчетаДоставки.ДоставкаСОплатой")
		Или Форма.ВариантУчетаДоставки = ПредопределенноеЗначение("Перечисление.ВариантыУчетаДоставки.ВозмещениеСтоимости") Тогда
		Элементы.СтоимостьДоставки.ТолькоПросмотр = Не Форма.РазрешеноРедактированиеСтоимостиДоставки;
		Элементы.РассчитатьСтоимостьДоставки.Доступность = Форма.ЗаданаФормулаРасчетаСтоимости ИЛИ Форма.ЗаданаФормулаРасчетаСебестоимости;
		Элементы.СтавкаНДСДоставки.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.СтоимостьДоставки.ТолькоПросмотр = Истина;
		Элементы.РассчитатьСтоимостьДоставки.Доступность = Ложь;
		Элементы.СтавкаНДСДоставки.ТолькоПросмотр = Истина;
		Если Форма.Объект.СтоимостьДоставки > 0 Тогда
			Форма.СтоимостьДоставкиСНДС = 0;
			Форма.Объект.СтоимостьДоставки = 0;
			Форма.Объект.СуммаНДСДоставки = 0;
			ЗаполнитьЗаголовокГруппыСтоимость(Форма);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ПунктВыдачиЗаказа.Доступность = ЗначениеЗаполнено(Форма.Объект.СлужбаДоставки);

	Если Форма.Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.Курьер") 
		Или Форма.Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.Почта") 
		Или Форма.Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.ПунктВыдачи") Тогда
		Форма.Элементы.СтраницаДоставка.Формат = "ЧДЦ=2; ЧН=";
	Иначе
		Форма.Элементы.СтраницаДоставка.Формат = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьСервисовДоставки()
	
	Элементы.СервисДоставки.СписокВыбора.Очистить();
	Элементы.СервисДоставки.СписокВыбора.Добавить(Перечисления.СервисыДоставки.ПустаяСсылка(), НСтр("ru = 'Без сервиса'"));
	Элементы.СервисДоставки.СписокВыбора.Добавить(Перечисления.СервисыДоставки.ЯндексДоставка, НСтр("ru = 'Яндекс.Доставка'"));
	Элементы.СервисДоставки.СписокВыбора.Добавить(Перечисления.СервисыДоставки.Сервис1СДоставка, НСтр("ru = '1С:Доставка'"));
	Элементы.СервисДоставки.СписокВыбора.Добавить(Перечисления.СервисыДоставки.Сервис1СКурьер, НСтр("ru = '1С:Курьер'"));
	
	Если НЕ ИспользоватьСервисЯндексДоставка
		ИЛИ (ИспользоватьСервисЯндексДоставка И Объект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз) Тогда
		
		СервисЯндексДоставка = Элементы.СервисДоставки.СписокВыбора.НайтиПоЗначению(Перечисления.СервисыДоставки.ЯндексДоставка);
		Элементы.СервисДоставки.СписокВыбора.Удалить(СервисЯндексДоставка);
		
	КонецЕсли;

	Если НЕ ИспользоватьСервис1СДоставка
		ИЛИ (ИспользоватьСервис1СДоставка И (Объект.СпособДоставки = Перечисления.СпособыДоставки.Почта
		ИЛИ Объект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз)) Тогда
		
		Сервис1СДоставка = Элементы.СервисДоставки.СписокВыбора.НайтиПоЗначению(Перечисления.СервисыДоставки.Сервис1СДоставка);
		Элементы.СервисДоставки.СписокВыбора.Удалить(Сервис1СДоставка);
		
	КонецЕсли;
	
	Если НЕ ИспользоватьСервис1СКурьер
		ИЛИ (ИспользоватьСервис1СДоставка И (Объект.СпособДоставки = Перечисления.СпособыДоставки.Почта
		ИЛИ Объект.СпособДоставки = Перечисления.СпособыДоставки.ПунктВыдачи
		ИЛИ Объект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз)) Тогда
		
		Сервис1СКурьер = Элементы.СервисДоставки.СписокВыбора.НайтиПоЗначению(Перечисления.СервисыДоставки.Сервис1СКурьер);
		Элементы.СервисДоставки.СписокВыбора.Удалить(Сервис1СКурьер);
	КонецЕсли;
	
	Элементы.СервисДоставки.Видимость = Элементы.СервисДоставки.СписокВыбора.Количество() > 1;
	
КонецПроцедуры

&НаСервере
Функция РазрешеноРедактированиеСтоимостиДоставки()
	
	Возврат Пользователи.РолиДоступны("РедактированиеЦенДокументов");
	
КонецФункции

&НаСервере
Процедура ОбновитьПараметрыСлужбыДоставки()
	
	Если ЗначениеЗаполнено(Объект.СлужбаДоставки) Тогда
		СтруктураПараметров = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СлужбаДоставки, "ВариантУчета, ФормулаСтоимости, ФормулаСебестоимости, ИдентификаторЯндекса");
		ВариантУчетаДоставки = СтруктураПараметров.ВариантУчета;
		Если ВариантУчетаДоставки = Перечисления.ВариантыУчетаДоставки.ДоставкаСОплатой Тогда
			ЗаданаФормулаРасчетаСтоимости = НЕ ПустаяСтрока(СтруктураПараметров.ФормулаСтоимости) И НЕ СокрЛП(СтруктураПараметров.ФормулаСтоимости) = "0";
		ИначеЕсли ВариантУчетаДоставки=Перечисления.ВариантыУчетаДоставки.ВозмещениеСтоимости Тогда
			ЗаданаФормулаРасчетаСтоимости = НЕ ПустаяСтрока(СтруктураПараметров.ФормулаСебестоимости) И НЕ СокрЛП(СтруктураПараметров.ФормулаСебестоимости) = "0";
		Иначе
			ЗаданаФормулаРасчетаСтоимости = Ложь;
		КонецЕсли;
		ЗаданаФормулаРасчетаСебестоимости = НЕ ПустаяСтрока(СтруктураПараметров.ФормулаСебестоимости) И НЕ СокрЛП(СтруктураПараметров.ФормулаСебестоимости) = "0";
	Иначе
		ВариантУчетаДоставки = Перечисления.ВариантыУчетаДоставки.БесплатнаяДоставка;
		ЗаданаФормулаРасчетаСтоимости = Ложь;
		ЗаданаФормулаРасчетаСебестоимости = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция СлужбаДоставкиНеПоддерживаетУказанныйСпособДоставки()
	
	Если Не ЗначениеЗаполнено(Объект.СлужбаДоставки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.СервисДоставки = Перечисления.СервисыДоставки.Сервис1СДоставка Тогда
		Возврат Истина;
	КонецЕсли;

	Если Объект.СервисДоставки = Перечисления.СервисыДоставки.Сервис1СКурьер Тогда
		Возврат Истина;
	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СлужбыДоставкиДоступныеСпособыДоставки.Ссылка КАК СлужбаДоставки,
	|	СлужбыДоставкиДоступныеСпособыДоставки.СпособДоставки
	|ИЗ
	|	Справочник.СлужбыДоставки.ДоступныеСпособыДоставки КАК СлужбыДоставкиДоступныеСпособыДоставки
	|ГДЕ
	|	СлужбыДоставкиДоступныеСпособыДоставки.Ссылка = &СлужбаДоставки
	|	И СлужбыДоставкиДоступныеСпособыДоставки.СпособДоставки = &СпособДоставки");
	Запрос.УстановитьПараметр("СлужбаДоставки", Объект.СлужбаДоставки);
	Запрос.УстановитьПараметр("СпособДоставки", Объект.СпособДоставки);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПриИзмененииПредставленияАдреса(Представление, АдресЗначение)
	
	Если ЗначениеЗаполнено(Представление) Тогда
		АдресЗначение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Представление, Перечисления.ТипыКонтактнойИнформации.Адрес);
	Иначе
		АдресЗначение = "";
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму ввода адреса с заполненными из параметра значениями полей адреса.
// 
// Параметры:
//  Элемент - ПолеФормы
//  Объект - ДанныеФормыСтруктура
//  ИмяРеквизитаАдресаДоставки - Строка
//  СтандартнаяОбработка - Булево
&НаКлиенте
Процедура ОткрытьФормуВыбораАдресаИОбработатьРезультат(Элемент, Объект, ИмяРеквизитаАдресаДоставки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АдресПредставление = Объект[ИмяРеквизитаАдресаДоставки];
	АдресЗначение = Объект[ИмяРеквизитаАдресаДоставки + "Значение"];
	
	// Откроем диалог редактирования КИ
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ПредопределенноеЗначение(
		"Справочник.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента"));
	ПараметрыОткрытия.Вставить("Значение", АдресЗначение);
	ПараметрыОткрытия.Вставить("Представление", АдресПредставление);
	ПараметрыОткрытия.Вставить("Комментарий", Объект.ДополнительнаяИнформацияПоДоставке);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяРеквизитаАдресаДоставки", ИмяРеквизитаАдресаДоставки);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуВыбораАдресаИОбработатьРезультатЗавершение", 
		ЭтотОбъект, ДополнительныеПараметры);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораАдресаИОбработатьРезультатЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ИмяРеквизитаАдресаДоставки = ДополнительныеПараметры.ИмяРеквизитаАдресаДоставки;
		
	Если ТипЗнч(Результат) = Тип("Структура") Тогда // КИ введена
		
		// Перенесем данные в форму
		Объект[ИмяРеквизитаАдресаДоставки + "Значение"] = Результат.Значение;
		Объект[ИмяРеквизитаАдресаДоставки] = Результат.Представление;
		Объект.ДополнительнаяИнформацияПоДоставке = Результат.Комментарий;
		
		ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
		
		Модифицированность = Истина;
		ОбновитьОтображениеДанных();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначенияПараметровДоставки()
	
	Объект.ПараметрыДоставки.Очистить();
	Если ЗначениеЗаполнено(Объект.СлужбаДоставки) Тогда
		Для каждого СтрокаТабличнойЧасти Из ПараметрыДоставки Цикл
			НоваяСтрока = Объект.ПараметрыДоставки.Добавить();
			НоваяСтрока.Параметр = СтрокаТабличнойЧасти.Параметр;
			НоваяСтрока.Значение = ЭтаФорма[СтрокаТабличнойЧасти.ИмяРеквизита];
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеКонтактныхЛиц(Контрагент)
	
	Результат = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	" ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактныеЛица.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(КонтактныеЛица.Ссылка) КАК Представление,
	|	КонтактныеЛицаКонтактнаяИнформация.Тип КАК Тип,
	|	КонтактныеЛицаКонтактнаяИнформация.АдресЭП КАК АдресЭП,
	|	КонтактныеЛицаКонтактнаяИнформация.НомерТелефона КАК НомерТелефона
	|ИЗ
	|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних(, Контрагент = &Контрагент) КАК СвязиКонтрагентКонтакт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица КАК КонтактныеЛица
	|		ПО СвязиКонтрагентКонтакт.Контакт = КонтактныеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
	|		ПО (КонтактныеЛицаКонтактнаяИнформация.Ссылка = КонтактныеЛица.Ссылка)
	|ГДЕ
	|	(КонтактныеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ИЛИ КонтактныеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|	И СвязиКонтрагентКонтакт.СвязьНедействительна = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(Контрагенты.Ссылка) КАК Представление,
	|	КонтрагентыКонтактнаяИнформация.Тип,
	|	КонтрагентыКонтактнаяИнформация.АдресЭП,
	|	КонтрагентыКонтактнаяИнформация.НомерТелефона
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|		ПО (КонтрагентыКонтактнаяИнформация.Ссылка = &Контрагент)
	|			И (Контрагенты.Ссылка = &Контрагент)
	|ГДЕ
	|	(КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ИЛИ КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|	И Контрагенты.Ссылка = &Контрагент");
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Результат[Выборка.Ссылка] = Неопределено Тогда
			Результат[Выборка.Ссылка] = НовыеДанныеКонтактногоЛица();
			Результат[Выборка.Ссылка].Представление = Выборка.Представление;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат[Выборка.Ссылка].КонтактныйТелефон)
			И ЗначениеЗаполнено(Результат[Выборка.Ссылка].ЗапаснойТелефон)
			И ЗначениеЗаполнено(Результат[Выборка.Ссылка].ПочтаПолучателя) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты
			И Не ЗначениеЗаполнено(Результат[Выборка.Ссылка].ПочтаПолучателя) Тогда
			Результат[Выборка.Ссылка].ПочтаПолучателя = Выборка.АдресЭП;
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
			И Не ЗначениеЗаполнено(Результат[Выборка.Ссылка].КонтактныйТелефон) Тогда
			Результат[Выборка.Ссылка].КонтактныйТелефон = Выборка.НомерТелефона;
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
			И Не ЗначениеЗаполнено(Результат[Выборка.Ссылка].ЗапаснойТелефон) Тогда
			Результат[Выборка.Ссылка].ЗапаснойТелефон = Выборка.НомерТелефона;
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеДанныеКонтактногоЛица()
	
	Результат = Новый Структура;
	Результат.Вставить("Представление");
	Результат.Вставить("КонтактныйТелефон");
	Результат.Вставить("ЗапаснойТелефон");
	Результат.Вставить("ПочтаПолучателя");
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция АдресаДоставки(Контрагент)
	
	Результат = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Результат;
	КонецЕсли;
	
	МассивКонтрагент = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Контрагент);
	Адреса = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивКонтрагент,
		,
		ВидыКИАдресаДоставки(),
		ТекущаяДатаСеанса());
	Адреса.Сортировать("Вид Возр");
	
	УникальныеАдреса = Новый Массив;
	УникальныеЗначения = Новый Соответствие;
	Для каждого АдресКонтрагента Из Адреса Цикл
		Если УникальныеЗначения[АдресКонтрагента.Представление] = Неопределено Тогда
			УникальныеЗначения[АдресКонтрагента.Представление] = Истина;
			УникальныеАдреса.Добавить(АдресКонтрагента);
		КонецЕсли;
	КонецЦикла;
	УникальныеЗначения.Очистить();
	
	Для каждого АдресКонтрагента Из УникальныеАдреса Цикл
		ДобавляемоеЗначение = Новый Структура;
		ДобавляемоеЗначение.Вставить("АдресДоставки", АдресКонтрагента.Представление);
		ДобавляемоеЗначение.Вставить("АдресДоставкиЗначение", АдресКонтрагента.Значение);
		ДобавляемоеЗначение.Вставить("АдресДоставкиЗначенияПолей", АдресКонтрагента.ЗначенияПолей);
		Результат.Добавить(ДобавляемоеЗначение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВидыКИАдресаДоставки()
	
	Результат = Новый Массив;
	Результат.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	Результат.Добавить(Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗонаПриИзменении(Элемент)
	
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДоставкиПриИзменении(Элемент)
	
	НоменклатураДоставкиПриИзмененииНаСервере();
	ОчиститьКалькуляцию();
	ОбновитьИтогиКлиент();
	
КонецПроцедуры

&НаСервере
Процедура НоменклатураДоставкиПриИзмененииНаСервере()
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", Объект.НоменклатураДоставки);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
	СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("Коэффициент", 1);  
	
	РезервированиеЗапасов = ?(КэшЗначений.Свойство("РезервированиеЗапасов"), КэшЗначений.РезервированиеЗапасов, Ложь);
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, Неопределено, СтруктураДанные, , НЕ РезервированиеЗапасов);
	
	ЗаполнятьСтоимость = ЗаполнятьСтоимостьДоставкиПоЦенеНоменклатуры(ЗаданаФормулаРасчетаСтоимости, 
		ВыбранаСлужбаДоставкиЯндекса, 
		ВариантУчетаДоставки);
	Если ЗаполнятьСтоимость И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		Если СтруктураДанные.Свойство("Цена") 
			И СтруктураДанные.Цена <> 0 Тогда
			Объект.СтоимостьДоставки = СтруктураДанные.Цена;
		КонецЕсли;
		Объект.СтавкаНДСДоставки = СтруктураДанные.СтавкаНДС;
		ОбновитьСуммуНДСДоставки();
		
	КонецЕсли;
	
	ЗаполнятьСебестоимость = ЗаполнятьСебестоимостьДоставкиПоЦенеНоменклатуры(ЗаданаФормулаРасчетаСебестоимости, ВыбранаСлужбаДоставкиЯндекса);
	Если ЗаполнятьСебестоимость И УправлениеДоступом.ЧтениеРазрешено(Справочники.ВидыЦен.Учетная) Тогда
		
		СтруктураДанные.Вставить("СуммаВключаетНДС", Истина);
		СтруктураДанные.Вставить("ВидЦен", Справочники.ВидыЦен.Учетная);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Справочники.ВидыСкидокНаценок.ПустаяСсылка());
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		Если СтруктураДанные.Свойство("Цена") 
			И СтруктураДанные.Цена <> 0 Тогда
			Объект.СебестоимостьДоставки = СтруктураДанные.Цена;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТрекНомерПриИзменении(Элемент)
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ДлинаПриИзменении(Элемент)
	
	РассчитатьОбъем();
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	ЗаполнитьЗаголовокГруппыГабариты(ЭтотОбъект);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ШиринаПриИзменении(Элемент)
	
	РассчитатьОбъем();
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	ЗаполнитьЗаголовокГруппыГабариты(ЭтотОбъект);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ВысотаПриИзменении(Элемент)
	
	РассчитатьОбъем();
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	ЗаполнитьЗаголовокГруппыГабариты(ЭтотОбъект);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъемПриИзменении(Элемент)
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	ЗаполнитьЗаголовокГруппыГабариты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОбъем()
	
	Объем = Объект.Длина * Объект.Ширина * Объект.Высота * 0.000001;
	
	Если Объем = 0 Тогда
		Объект.Объем = 0;
	Иначе
		Объект.Объем = Макс(Объем, 0.0001);
	КонецЕсли;
	
	ЗаполнитьЗаголовокГруппыГабариты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВесПриИзменении(Элемент)
	
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	ЗаполнитьЗаголовокГруппыГабариты(ЭтотОбъект);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьВЯндексДоставку(Команда)
	
	Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		КнопкиДиалога = Новый СписокЗначений;
		КнопкиДиалога.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Записать'"));
		КнопкиДиалога.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(
		Новый ОписаниеОповещения("ОбработатьОтветПередПередачейВЯндексДоставку", ЭтотОбъект),
		НСтр("ru = 'Перед отправкой следует записать документ.'"),
		КнопкиДиалога);
	Иначе
		ПередатьЗаказВЯндексДоставку();
	КонецЕсли;
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элементы.ПередатьВЯндексДоставку, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьЗаказВЯндексДоставку()
	
	Если Объект.СостояниеЗаказа = ПредопределенноеЗначение("Справочник.СостоянияЗаказовПокупателей.Завершен") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Завершенный заказ не может быть передан в Яндекс.Доставку.'"));
		Возврат;
	КонецЕсли;
	
	Элементы.СтраницыЯндексДоставка.ТекущаяСтраница = Элементы.СтраницаПередачаЗаказаВЯндексДоставку;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ЗаказПокупателя", Объект.Ссылка);
	ПараметрыЗадания.Вставить("СлужбаДоставки", Объект.СлужбаДоставки);
	
	Задание = ЗаданиеПередачаЗаказаВЯндексДоставку(УникальныйИдентификатор, ПараметрыЗадания);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
	Задание,
	Новый ОписаниеОповещения("ОбработатьПередачуЗаказаВЯндексДоставку", ЭтотОбъект),
	ПараметрыОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеПередачаЗаказаВЯндексДоставку(ИдентификаторФормы, ПараметрыЗадания)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
	"ЯндексДоставка.ЗаданиеПередатьЗаказ",
	ПараметрыЗадания,
	ПараметрыВыполнения);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПередачуЗаказаВЯндексДоставку(Результат, Параметры) Экспорт
	
	Элементы.СтраницыЯндексДоставка.ТекущаяСтраница = Элементы.СтраницаПерейтиКЗаказуЯндексДоставки;
	
	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	ОтветЯндексДоставки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если ТипЗнч(ОтветЯндексДоставки) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтветЯндексДоставки["status"] = "ok" Тогда
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Заказ передан в Яндекс.Доставку.'"));
		ИдентификаторЯндексДоставки = ОтветЯндексДоставки["data"]["order"]["id"];
		НомерЗаказаЯндексДоставки = ОтветЯндексДоставки["data"]["order"]["full_num"];
		СтатусЗаказаЯндексДоставки = ЯндексДоставкаКлиентСервер.СтатусПоКоду(ОтветЯндексДоставки["data"]["order"]["status"]);
		НастроитьКомандуПерейтиКЗаказуЯндексДоставки();
		ОтключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки(ЭтотОбъект);
		
	ИначеЕсли ОтветЯндексДоставки["status"] = "error" Тогда
		
		Ошибки = Новый Массив;
		Ошибки.Добавить(НСтр("ru = 'При попытке передачи заказа в Яндекс.Доставку произошли следующие ошибки:'"));
		Для Каждого ТекОшибка Из ОтветЯндексДоставки["data"]["errors"] Цикл
			Если ТипЗнч(ТекОшибка) = Тип("Строка") Тогда
				Ошибки.Добавить(ТекОшибка);
			Иначе
				Ошибки.Добавить(СтрШаблон("%1: %2", ТекОшибка.Ключ, ТекОшибка.Значение));
			КонецЕсли;
		КонецЦикла;
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрСоединить(Ошибки, Символы.ПС));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветПередПередачейВЯндексДоставку(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Записать();
		ПередатьЗаказВЯндексДоставку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветПередПередачейВСервисДоставки(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Записать();
		ПередатьВСервисДоставки(Параметры.ТипГрузоперевозки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСлужбыДоставки(ВыборВариантовЯндекса)
	
	ПараметрыВыбораСлужбыДоставки = Новый Структура;
	ПараметрыВыбораСлужбыДоставки.Вставить("ЗаказПокупателя", Объект.Ссылка);
	ПараметрыВыбораСлужбыДоставки.Вставить("СпособДоставки", Объект.СпособДоставки);
	ПараметрыВыбораСлужбыДоставки.Вставить("ТекущаяСтрока", Объект.СлужбаДоставки);
	ПараметрыВыбораСлужбыДоставки.Вставить("ВремяДоставкиС", Объект.ВремяДоставкиС);
	ПараметрыВыбораСлужбыДоставки.Вставить("ВремяДоставкиПо", Объект.ВремяДоставкиПо);
	ПараметрыВыбораСлужбыДоставки.Вставить("ПараметрыПоискаСпособаДоставки", ПараметрыПоискаСпособаДоставки());
	Если ЗначениеЗаполнено(Объект.ПунктВыдачиЗаказа) Тогда
		ПараметрыВыбораСлужбыДоставки.Вставить("ПунктВыдачиЗаказа", Объект.ПунктВыдачиЗаказа);
	КонецЕсли;
	
	Если Не ВыборВариантовЯндекса
		И Не ЗначениеЗаполнено(ИдентификаторЯндексДоставки) Тогда
		ОткрытьФорму("Справочник.СлужбыДоставки.ФормаВыбора", ПараметрыВыбораСлужбыДоставки, Элементы.СлужбаДоставки);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкаЯндексДоставки) Тогда
		ПараметрыПодключенияЯндексДоставки = Новый Структура;
		ПараметрыПодключенияЯндексДоставки.Вставить("Организация", Объект.Организация);
		ПараметрыПодключенияЯндексДоставки.Вставить("Подразделение", Объект.СтруктурнаяЕдиницаПродажи);
		ПараметрыПодключенияЯндексДоставки.Вставить("Склад", Объект.СтруктурнаяЕдиницаРезерв);
		ОткрытьФорму("Справочник.НастройкиЯндексДоставки.Форма.ПодключениеЯндексДоставки", ПараметрыПодключенияЯндексДоставки, Элементы.СлужбаДоставки);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресОтправленияЗначение) Тогда
		Элементы.АдресОтправления.КнопкаОткрытия = Истина;
		ОбщегоНазначенияКлиент.СообщитьПользователю(
		НСтр("ru = 'Не указан адрес отправления.'"),,
		"АдресОтправления");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.АдресДоставкиЗначение)
		И Не ЗначениеЗаполнено(Объект.АдресДоставкиЗначенияПолей) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
		НСтр("ru = 'Не указан адрес доставки.'"),,
		"АдресДоставки",
		"Объект");
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.СлужбыДоставки.Форма.ВыборВариантовЯндекса", ПараметрыВыбораСлужбыДоставки, Элементы.СлужбаДоставки);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыПоискаСпособаДоставки()
	
	ЭтотЗаказ = РеквизитФормыВЗначение("Объект");
	Возврат ЭтотЗаказ.ПараметрыПоискаСпособаДоставки(ТекущийВариантКП);
	
КонецФункции

// @skip-warning см. АдресНаЯндексКартах
&НаСервереБезКонтекста
Функция КодироватьСтрокуНаСервере(Знач ИсходнаяСтрока)
	Возврат КодироватьСтроку(ИсходнаяСтрока, СпособКодированияСтроки.КодировкаURL);
КонецФункции

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	ЗаполнитьЗаголовокГруппыПолучатель(ЭтотОбъект);
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеЗначение.Свойство("КонтактныйТелефон", Объект.КонтактныйТелефон);
	ВыбранноеЗначение.Свойство("ЗапаснойТелефон", Объект.ЗапаснойТелефон);
	ВыбранноеЗначение.Свойство("ПочтаПолучателя", Объект.ПочтаПолучателя);
	Если ВыбранноеЗначение.Свойство("Представление") Тогда
		ВыбранноеЗначение = ВыбранноеЗначение.Представление;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныйТелефонПриИзменении(Элемент)
	
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	ЗаполнитьЗаголовокГруппыПолучатель(ЭтотОбъект);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапаснойТелефонПриИзменении(Элемент)
	
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	ЗаполнитьЗаголовокГруппыПолучатель(ЭтотОбъект);
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ПочтаПолучателяПриИзменении(Элемент)
	
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	ЗаполнитьЗаголовокГруппыПолучатель(ЭтотОбъект);
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъявленнаяЦенностьПриИзменении(Элемент)
	
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура АдресОтправленияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(АдресОтправленияНавигационнаяСсылка) Тогда
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(АдресОтправленияНавигационнаяСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресНаЯндексКартах(Команда)
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(
		СтрШаблон("https://maps.yandex.ru/?text=%1", КодироватьСтрокуНаСервере(Объект.АдресДоставки)));
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элементы.АдресНаЯндексКартах, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура АдресНаGoogleMaps(Команда)
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(
		СтрШаблон("https://maps.google.ru/?q=%1", КодироватьСтрокуНаСервере(Объект.АдресДоставки)));
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элементы.АдресНаGoogleMaps, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКЗаказуЯндексДоставки(Команда)
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(
		СтрШаблон("https://delivery.yandex.ru/order/create?id=%1", ИдентификаторЯндексДоставки));
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элементы.ПерейтиКЗаказуЯндексДоставки, "Нажатие");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоляАдресаОтправления(Субъект)
	
	Возврат ДоставкаСервер.ПоляАдресаОтправления(Субъект);
	
КонецФункции

&НаСервере
Процедура УстановитьНастройкуНоменклатурыДоставки(УстанавливаемоеЗначение)
	
	Если Не ЗначениеЗаполнено(УстанавливаемоеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееЗначение = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
	Пользователи.ТекущийПользователь(),
	"НоменклатураДоставки");
	
	Если ЗначениеЗаполнено(ТекущееЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.НастройкиПользователей.Установить(УстанавливаемоеЗначение, "НоменклатураДоставки");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнятьСтоимостьДоставкиПоЦенеНоменклатуры(ЗаданаФормулаРасчета, ВыбранаСлужбаДоставкиЯндекса, ВариантУчетаДоставки)
	
	Возврат НЕ ЗаданаФормулаРасчета
	И НЕ ВыбранаСлужбаДоставкиЯндекса
	И ЗначениеЗаполнено(ВариантУчетаДоставки) 
	И ВариантУчетаДоставки<>ПредопределенноеЗначение("Перечисление.ВариантыУчетаДоставки.БесплатнаяДоставка");	
	
КонецФункции

&НаСервере
Процедура ПересчитатьЦенуДоставки(ПредыдущаяВалюта, КурсПересчетаЦен = Неопределено)
	
	СтруктураКурсы = ЦенообразованиеСервер.ПолучитьКурсыВалют(ПредыдущаяВалюта, Объект.ВалютаДокумента, Объект.Дата);
	
	Если КурсПересчетаЦен <> Неопределено И КурсПересчетаЦен.Свойство("Курс") И КурсПересчетаЦен.Свойство("Кратность") Тогда
		Если ПредыдущаяВалюта = УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту() Тогда
			СтруктураКурсы.Курс 	 = ?(КурсПересчетаЦен.Курс 		= 0, 1, КурсПересчетаЦен.Курс);
			СтруктураКурсы.Кратность = ?(КурсПересчетаЦен.Кратность = 0, 1, КурсПересчетаЦен.Кратность);
		Иначе
			СтруктураКурсы.КурсНач 	 	= ?(КурсПересчетаЦен.Курс	   = 0, 1, КурсПересчетаЦен.Курс);
			СтруктураКурсы.КратностьНач = ?(КурсПересчетаЦен.Кратность = 0, 1, КурсПересчетаЦен.Кратность);
		КонецЕсли;
	КонецЕсли;
	
	Объект.СтоимостьДоставки = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(Объект.СтоимостьДоставки, СтруктураКурсы.КурсНач, СтруктураКурсы.Курс, СтруктураКурсы.КратностьНач, СтруктураКурсы.Кратность);
	ОбновитьСуммуНДСДоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоляСтраницыДоставка()
	
	Если Элементы.Страницы.ТекущаяСтраница <> Элементы.СтраницаДоставка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеКонтрагентаПрочитаны Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКонтрагента = ДанныеКонтрагентаДляИзменения();
	
	ЗаполнитьПоляДоставки(Объект, ДанныеКонтрагента, ЭтотОбъект);
	
	ЗаполнитьСписокВыбораПолучателя(Элементы.КонтактноеЛицо, ДанныеКонтрагента.ДанныеКонтактныхЛиц);
	ЗаполнитьСписокВыбораАдресаДоставки(Элементы.АдресДоставкиПолучателя, ДанныеКонтрагента.АдресаДоставки);
	ПрочитатьДанныеПоЗаказуНаДоставкуСервер();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяПерезаполнитьПоляДоставки(Знач Объект, Знач ДанныеКонтрагента)
	
	Если ДанныеКонтрагента.Свойство("ВызовИзПроцедурыПриИзмененииКонтрагента") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.КонтактноеЛицо)
		И Не ЗначениеЗаполнено(Объект.КонтактныйТелефон)
		И Не ЗначениеЗаполнено(Объект.ЗапаснойТелефон)
		И Не ЗначениеЗаполнено(Объект.ПочтаПолучателя)
		И Не ЗначениеЗаполнено(Объект.АдресДоставки)
		И Не ЗначениеЗаполнено(Объект.АдресДоставкиЗначение)
		И Не ЗначениеЗаполнено(Объект.АдресДоставкиЗначенияПолей) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнятьСебестоимостьДоставкиПоЦенеНоменклатуры(ЗаданаФормулаРасчета, ВыбранаСлужбаДоставкиЯндекса)
	
	Возврат НЕ ЗаданаФормулаРасчета
	И НЕ ВыбранаСлужбаДоставкиЯндекса;	
	
КонецФункции

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ПриИзмененииПараметраДоставки(Элемент)
	
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	
КонецПроцедуры

#КонецОбласти

#Область Наборы

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаменитьСтрокуЗапасовДаннымиНабора(Форма, СтрокаТабличнойЧасти, СтруктураДанные)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	// СборкаЗаказов
	Если Форма.ФОСборкаЗаказов Тогда
		СтруктураДанные.Вставить("РежимСборки", Форма.РежимСборки);
	КонецЕсли;
	// Конец СборкаЗаказов
	
	НаборыКлиентСервер.ЗаменитьСтрокуДаннымиНабора(Объект, "Запасы", СтрокаТабличнойЧасти, СтруктураДанные); 
		
	ЗаполнитьНомераСтрокТаблицаЗапасы(Объект.Запасы, Форма.ТекущийВариантКП, Форма.ЗапасыКоличествоСтрок);
	ЗаполнитьНомераСтрокТаблицаПодарки(Объект.Подарки, Форма.ТекущийВариантКП, Форма.ПодаркиКоличествоСтрок);
	ЗаполнитьНомераСтрокТаблицаБонусов(Объект.БонусныеБаллыКНачислению, Форма.ТекущийВариантКП, Форма.БонусыКНачислениюКоличествоСтрок);
	
	// Ручная скидка - заполнение полей ввода на форме
	СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(Форма, , ПараметрыОтбораСтрок(Форма.ТекущийВариантКП));
	// Конец Ручная скидка
		
	// Обновление отбора для отображения добавленных строк
	Если Элементы.Запасы.ОтборСтрок<>Неопределено И Элементы.Запасы.ОтборСтрок.Количество()>0 Тогда
		СтарыйОтборСтрок = Элементы.Запасы.ОтборСтрок;
		Элементы.Запасы.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура);
		Элементы.Запасы.ОтборСтрок = СтарыйОтборСтрок;
	КонецЕсли;
	
	Элементы.ЗапасыКартинкаНабора.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСоставНабора(СтрокаТабличнойЧасти)
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.НоменклатураНабора);
	СтруктураОткрытия.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.ХарактеристикаНабора);
	СтруктураОткрытия.Вставить("НомерВариантаКП", ТекущийВариантКП);
	ДобавленныеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОткрытия);
	СтрокиНабора = Объект.Запасы.НайтиСтроки(СтруктураОткрытия);
	Если ДобавленныеСтроки.Количество() = 0 Тогда
		СтруктураОткрытия.Вставить("Количество", 1);
	Иначе
		СтруктураОткрытия.Вставить("Количество", ДобавленныеСтроки[0].Количество);
	КонецЕсли; 
	СтруктураОткрытия.Вставить("СоставНабора", Новый Массив);
	Для Каждого Стр Из СтрокиНабора Цикл
		СвойстваСтроки = Новый Структура;
		СвойстваСтроки.Вставить("Номенклатура");
		СвойстваСтроки.Вставить("Характеристика");
		СвойстваСтроки.Вставить("Количество");
		СвойстваСтроки.Вставить("Цена");
		СвойстваСтроки.Вставить("ДоляСтоимости");
		СвойстваСтроки.Вставить("ЕдиницаИзмерения");
		СвойстваСтроки.Вставить("Активная");
		ЗаполнитьЗначенияСвойств(СвойстваСтроки, Стр);
		СвойстваСтроки.Активная = (Стр = СтрокаТабличнойЧасти);
		СтруктураОткрытия.СоставНабора.Добавить(СвойстваСтроки);
	КонецЦикла;
	ОткрытьФорму("РегистрСведений.СоставНаборов.Форма.ФормаРедактированияСостава", СтруктураОткрытия, ЭтотОбъект, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоставНабора(НоменклатураНабора, ХарактеристикаНабора, КоличествоНаборов, ЦенаНабора, СоставНабора)
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("НоменклатураНабора", НоменклатураНабора);
	СтруктураДанных.Вставить("ХарактеристикаНабора", ХарактеристикаНабора);
	СтруктураДанных.Вставить("НомерВариантаКП", ТекущийВариантКП);
	СтруктураДанных.Вставить("ИмяТабличнойЧасти", "Запасы");
	СтруктураДанных.Вставить("СоставНабора", СоставНабора);
	СтруктураДанных.Вставить("КоличествоНаборов", КоличествоНаборов);
	СтруктураДанных.Вставить("ЦенаНабора", ЦенаНабора);
	НаборыСервер.ОбновитьСоставНабораВДокументе(СтруктураДанных, Объект);
	ЗаполнитьСлужебныеПоляТабличнойЧасти();
	Модифицированность = Истина;

	// АвтоматическиеСкидки.
	СброситьФлагСкидкиРассчитаныСервер("ОбработкаПодбора");
	// Конец АвтоматическиеСкидки
	
	// Ручная скидка - заполнение полей ввода на форме
	СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект,, ПараметрыОтбораСтрок(ТекущийВариантКП));
	// Конец Ручная скидка
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
	Если РежимОстаткиИРезервы Тогда
		НоменклатураВДокументахСервер.ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧасти(Объект,,ТекущийВариантКП,, РезервированиеЗапасов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДанныеКартинокНаборов(Запасы, ДобавленныеНаборы)
	
	Для каждого Стр Из Запасы Цикл
		Если Стр.НомерВариантаКП=0 Тогда
			Стр.КартинкаНабора = НаборыКлиентСервер.КартинкаНабора(Стр, ДобавленныеНаборы);
		Иначе
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("НомерВариантаКП", Стр.НомерВариантаКП);
			Стр.КартинкаНабора = НаборыКлиентСервер.КартинкаНабора(Стр, ДобавленныеНаборы.НайтиСтроки(СтруктураОтбора));
		КонецЕсли; 
		Если Стр.КартинкаНабора>5 Тогда
			Стр.КартинкаНабора = ((Стр.КартинкаНабора - 1) % 5) + 1;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьПризнакиНабора(Запасы)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНаборы") Тогда
		Возврат;
	КонецЕсли; 
	
	МассивНоменклатуры = Новый Массив;
	Для каждого Стр Из Запасы Цикл
		Если ЗначениеЗаполнено(Стр.Номенклатура) И НЕ ЗначениеЗаполнено(Стр.НоменклатураНабора) И ТипЗнч(Стр.Номенклатура)=Тип("СправочникСсылка.Номенклатура") Тогда
			МассивНоменклатуры.Добавить(Стр.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивНоменклатуры.Количество()>0 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&МассивНоменклатуры)
		|	И Номенклатура.ЭтоНабор";
		Выборка = Запрос.Выполнить().Выбрать();
		ПараметрыНоменклатуры = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			ПараметрыНоменклатуры.Вставить(Выборка.Ссылка, Истина);	
		КонецЦикла; 
		
		Для каждого Стр Из Запасы Цикл
			Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) ИЛИ ЗначениеЗаполнено(Стр.НоменклатураНабора) ИЛИ ТипЗнч(Стр.Номенклатура)<>Тип("СправочникСсылка.Номенклатура") Тогда
				Стр.ЭтоНабор = Ложь;
			Иначе
				Стр.ЭтоНабор = ПараметрыНоменклатуры.Получить(Стр.Номенклатура);
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьОписаниеНабора(МассивНаборов, НоменклатураНабора, ХарактеристикаНабора, НомерВариантаКП)
	
	Для каждого ОписаниеНабора Из МассивНаборов Цикл
		Если ОписаниеНабора.НоменклатураНабора=НоменклатураНабора 
			И ОписаниеНабора.ХарактеристикаНабора=ХарактеристикаНабора 
			И ОписаниеНабора.НомерВариантаКП=НомерВариантаКП Тогда
			// Уже добавлено
			Возврат;
		КонецЕсли; 
	КонецЦикла; 	
	СтруктураНабора = Новый Структура;
	СтруктураНабора.Вставить("НоменклатураНабора", НоменклатураНабора);
	СтруктураНабора.Вставить("ХарактеристикаНабора", ХарактеристикаНабора);
	СтруктураНабора.Вставить("НомерВариантаКП", НомерВариантаКП);
	МассивНаборов.Добавить(СтруктураНабора);
	
КонецПроцедуры

&НаСервере
Функция  ХарактеристикиНабора(Номенклатура, Текст)
	
	СтруктураПараметров = Новый Структура();
	Если ПустаяСтрока(Текст) Тогда
		СтруктураПараметров.Вставить("СтрокаПоиска", Неопределено);
	Иначе
		СтруктураПараметров.Вставить("СтрокаПоиска", Текст);
	КонецЕсли; 
	СтруктураПараметров.Вставить("Отбор", Новый Структура);
	СтруктураПараметров.Отбор.Вставить("Владелец", Номенклатура);
	Возврат Справочники.ХарактеристикиНоменклатуры.ПолучитьДанныеВыбора(СтруктураПараметров);
	
КонецФункции

#КонецОбласти

#Область УчетОригиналовПервичныхДокументов

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ИзменитьСостояниеОригинала(Команда)
	УчетОригиналовПервичныхДокументовУНФКлиент.ИзменитьСостояниеОригинала(Команда, ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область Взаиморасчеты

&НаСервере
Процедура ВзаиморасчетыПриСозданииНаСервере()
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	ВидОперацииПомощника = ВидОперацииЗаказНаПродажу;
	Если Объект.Ссылка.Пустая() ИЛИ Объект.СпособЗачетаПредоплаты.Пустая() Тогда
		// В заказе всегда ручной зачет предоплаты, т.к. не факт, что заказ стоит оплачивать, даже если он проведен.
		Объект.СпособЗачетаПредоплаты = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
	КонецЕсли;
	
	ВариантЗаполненияРасшифровки = РасчетыРаботаСФормамиВызовСервера.ПолучитьВариантЗаполненияРасшифровкиДляДокументаОтгрузки(Объект.Проведен, Объект.СпособЗачетаПредоплаты);
	ИстинаПриСозданииНаСервере = Истина;
	ВариантЗаполненияРасшифровкиПриИзмененииНаСервере(ИстинаПриСозданииНаСервере);
	
	РасчетыРаботаСФормамиВызовСервера.ЗаполнитьРеквизитыРасчетов(ЭтотОбъект, СтруктураПараметровРасчетов, Неопределено, Истина);
	
	Массив = Новый Массив();
	Массив.Добавить(Тип("ДокументСсылка.Взаимозачет"));
	Массив.Добавить(Тип("ДокументСсылка.ОперацияПоПлатежнымКартам"));
	Массив.Добавить(Тип("ДокументСсылка.ПоступлениеВКассу"));
	Массив.Добавить(Тип("ДокументСсылка.ПоступлениеНаСчет"));
	
	ДопустимыеТипы = Новый ОписаниеТипов(Массив, , );
	Элементы.ПредоплатаДокумент.ОграничениеТипа = ДопустимыеТипы;
	
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокОплаты(Объект.СпособЗачетаПредоплаты, Объект.Предоплата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПодбор(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале контрагента.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале договор контрагента.'"));
		Возврат;
	КонецЕсли;
	
	АдресПредоплатаВХранилище = ПоместитьПредоплатаВХранилище();
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("АдресПредоплатаВХранилище", АдресПредоплатаВХранилище);
	ПараметрыПодбора.Вставить("Подбор", Истина);
	ПараметрыПодбора.Вставить("ЕстьЗаказ", Ложь);
	ПараметрыПодбора.Вставить("ЗаказВШапке", Ложь);
	ПараметрыПодбора.Вставить("Компания", Компания);
	ПараметрыПодбора.Вставить("Заказ", Неопределено);
	ПараметрыПодбора.Вставить("Дата", Объект.Дата);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыПодбора.Вставить("Договор", Объект.Договор);
	ПараметрыПодбора.Вставить("Курс", Объект.Курс);
	ПараметрыПодбора.Вставить("Кратность", Объект.Кратность);
	ПараметрыПодбора.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("СуммаДокумента", Объект.Запасы.Итог("Всего"));
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораАвансовПокупателей", ПараметрыПодбора, , , , ,
		Новый ОписаниеОповещения("РедактироватьЗачетПредоплатыЗавершение", ЭтотОбъект,
		Новый Структура("АдресПредоплатаВХранилище", АдресПредоплатаВХранилище)));
	
КонецПроцедуры

&НаКлиенте
Процедура СпособЗачетаПредоплатыПриИзменении(Элемент)
	СпособЗачетаПредоплатыПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СпособЗачетаПредоплатыПриИзмененииНаСервере()
	РасчетыРаботаСФормамиВызовСервера.СпособЗачетаПредоплатыПриИзмененииНаСервере(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ВариантЗаполненияРасшифровкиПриИзмененииНаСервере(ПриСозданииНаСервере = Ложь)
	РасчетыРаботаСФормамиВызовСервера.ВариантЗаполненияРасшифровкиПриИзмененииНаСервере(ЭтотОбъект, ПриСозданииНаСервере);
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаполненияРасшифровкиПриИзменении(Элемент)
	ВариантЗаполненияРасшифровкиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПросмотра(Команда)
	ЗаполнитьТаблицуПросмотраНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПросмотраНаКлиенте()
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаПредоплата
		И ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиПросмотр Тогда
		ЗаполнитьТаблицуПросмотраНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПросмотраНаСервере()
	РасчетыРаботаСФормамиВызовСервера.ЗаполнитьТаблицуПросмотраНаСервере(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникЗачетаПредоплаты(Команда) Экспорт
	
	Если Объект.КоличествоВариантовКП > 1 И Объект.ОсновнойВариантКП = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите вначале основной вариант!'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Контрагент.Пустая() Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите вначале контрагента!'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите вначале договор контрагента!'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗаписатьИОткрытьФормуРаспределенияПлатежа", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, 
		НСтр("ru = 'Перед открытием помощника данные будут записаны.
					|Продолжить?'"),
		РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФормуРаспределенияПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИОткрытьФормуРаспределенияПлатежа(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Записать();
		Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
			Возврат; // Запись не удалась, сообщения о причинах выводит платформа.
		КонецЕсли;
		ОткрытьФормуРаспределенияПлатежа();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРаспределенияПлатежа()
	
	Если Модифицированность Тогда
		РассчитатьСкидкиНаценки(Неопределено);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураАдресов = ПолучитьСтруктуруАдресовВХранилище();
	СтруктураПараметров.Вставить("СтруктураАдресов", СтруктураАдресов);
	СоответствиеИменТЧИРеквизитовДляИтогов = Новый Соответствие;
	СоответствиеИменТЧИРеквизитовДляИтогов.Вставить("Запасы", "Всего");
	СтруктураПараметров.Вставить("СоответствиеИменТЧИРеквизитовДляИтогов", СоответствиеИменТЧИРеквизитовДляИтогов);
	СтруктураПараметров.Вставить("ИмяРеквизитаЗаказ", "ЗаказПокупателя");
	СтруктураПараметров.Вставить("ВалютаРасчетов", ВалютаРасчетов);
	СтруктураПараметров.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("ЭтоЗаказ", Истина);
	СтруктураПараметров.Вставить("ЕстьДоставка", Истина);
	
	РасчетыРаботаСФормамиКлиент.ОткрытьФормуРаспределенияСуммыПлатежа(Ложь, ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруАдресовВХранилище()
	
	СтруктураДляВозврата = Новый Структура();
	
	СтруктураДляВозврата.Вставить("АдресРасшифровкаПлатежаВХранилище",
		ПоместитьВоВременноеХранилище(
			Объект.Предоплата.Выгрузить(),
			УникальныйИдентификатор));
	
	СтруктураДляВозврата.Вставить("АдресТаблицаДокументовДляИзмененияВХранилище",
		ПоместитьВоВременноеХранилище(
			ТаблицаДокументовДляИзменения.Выгрузить(),
			УникальныйИдентификатор));
	
	// Суммы в разрезе заказов.
	ТЗЗаказыИСуммы = РасчетыРаботаСФормамиВызовСервера.ПолучитьПустуюТЗЗаказыИСуммы();
	Для Каждого ТекущаяСтрока Из Объект.Запасы Цикл
		НоваяСтрока = ТЗЗаказыИСуммы.Добавить();
		НоваяСтрока.Заказ = Документы.ЗаказПокупателя.ПустаяСсылка();
		НоваяСтрока.Всего = ТекущаяСтрока.Всего;
	КонецЦикла;
	
	// Добавим информацию о доставке.
	Если НЕ Объект.НоменклатураДоставки.Пустая() Тогда
		СтрокаДоставки = ТЗЗаказыИСуммы.Добавить();
		СтрокаДоставки.Всего = Объект.СтоимостьДоставки + ?(Объект.СуммаВключаетНДС, 0, Объект.СуммаНДСДоставки);
		СтрокаДоставки.Заказ = Документы.ЗаказПокупателя.ПустаяСсылка();
	КонецЕсли;
	
	ТЗЗаказыИСуммы.Свернуть("Заказ", "Всего");
	
	СтруктураДляВозврата.Вставить("АдресТаблицаЗаказыИСумма",
		ПоместитьВоВременноеХранилище(
			ТЗЗаказыИСуммы,
			УникальныйИдентификатор));
	
	Возврат СтруктураДляВозврата;
	
КонецФункции // ПоместитьРасшифровкаПлатежаВХранилище()

&НаКлиенте
Процедура РаспределитьСуммуПлатежаПослеРаспределения(РезультатЗакрытия, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") И РезультатЗакрытия.Свойство("ДеревоРаспределенияСуммыПлатежа") Тогда
		
		РасчетыРаботаСФормамиКлиент.РаспределитьСуммуПлатежаПослеРаспределения(ЭтотОбъект, РезультатЗакрытия, ДопПараметры);
		
		РаспределитьСуммуПлатежаПослеРаспределенияЗавершение();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьСуммуПлатежаПослеРаспределенияЗавершение()
	
	РасчетыРаботаСФормамиВызовСервера.РаспределитьСуммуПлатежаПослеРаспределенияЗавершение(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьПредоплатаВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(
		Объект.Предоплата.Выгрузить(),
		УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

#Область ТабличнаяЧастьПредоплата

&НаКлиенте
Процедура ПредоплатаДокументПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Документ) Тогда
		
		СтруктураДанные = РасчетыРаботаСФормамиВызовСервера.ПолучитьДанныеДокументПриИзменении(СтрокаТабличнойЧасти.Документ, Объект.Контрагент, Объект.Договор);
		
		СтрокаТабличнойЧасти.СуммаРасчетов = СтруктураДанные.СуммаРасчетов;
		
		СтрокаТабличнойЧасти.Курс = 
			?(СтрокаТабличнойЧасти.Курс = 0,
				?(Объект.Курс = 0,
				1,
				Объект.Курс),
			СтрокаТабличнойЧасти.Курс);
		
		СтрокаТабличнойЧасти.Кратность =
			?(СтрокаТабличнойЧасти.Кратность = 0,
				?(Объект.Кратность = 0,
				1,
				Объект.Кратность),
			СтрокаТабличнойЧасти.Кратность);
			
		СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
			СтрокаТабличнойЧасти.СуммаРасчетов,
			СтрокаТабличнойЧасти.Курс,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
			СтрокаТабличнойЧасти.Кратность,
			?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаСуммаРасчетовПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	РасчетыРаботаСФормамиКлиент.ПредоплатаСуммаРасчетовПриИзменении(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКурсПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.ПриИзмененииКурсаВСтрокеПредоплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКурсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасчетыРаботаСФормамиКлиент.ПредоплатаКурсНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКратностьПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.ПриИзмененииКурсаВСтрокеПредоплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс);
	
	СтрокаТабличнойЧасти.Кратность = 1;
	
	СтрокаТабличнойЧасти.Курс =
		?(СтрокаТабличнойЧасти.СуммаРасчетов = 0,
			1,
			СтрокаТабличнойЧасти.СуммаПлатежа
			/ СтрокаТабличнойЧасти.СуммаРасчетов
			* Объект.Курс);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	АдресПредоплатаВХранилище = ДополнительныеПараметры.АдресПредоплатаВХранилище;
	
	КодВозврата = Результат;
	Если КодВозврата = КодВозвратаДиалога.OK Тогда
		ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище);
	КонецЕсли;
	
КонецПроцедуры // РедактироватьЗачетПредоплаты()

&НаСервере
Процедура ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресПредоплатаВХранилище);
	Объект.Предоплата.Загрузить(ТаблицаДляЗагрузки);
	
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокОплаты(Объект.СпособЗачетаПредоплаты, Объект.Предоплата);
	
КонецПроцедуры // ПолучитьПредоплатаИзХранилища()

&НаКлиенте
Процедура ТаблицаДляПросмотраОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	РасчетыРаботаСФормамиКлиент.ТаблицаДляПросмотраОбработкаРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка, СтруктураПараметровРасчетов, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область АссистентУправления

&НаКлиенте
Процедура ВыполнитьДействиеСообщенияАссистента(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> АссистентУправленияКлиентСервер.КодДействияСообщенияВыполнитьДействие() Тогда
		Возврат;
	КонецЕсли;
	
	Действие = Неопределено;
	
	Если НЕ ДополнительныеПараметры.ДанныеСообщения.Свойство("Действие", Действие) Тогда
		Возврат;
	КонецЕсли;
	
	Если Действие = "ИзменитьСостояние"  И ДополнительныеПараметры.ДанныеСообщения.Свойство("СостояниеЗаказа") Тогда
		
		Если Объект.СостояниеЗаказа <> ДополнительныеПараметры.ДанныеСообщения.СостояниеЗаказа Тогда
			
			ЗаблокироватьДанныеФормыДляРедактирования();
			
			Объект.СостояниеЗаказа = ДополнительныеПараметры.ДанныеСообщения.СостояниеЗаказа;
			Модифицированность = Истина;
			ОбработатьИзменениеСостоянияЗаказа();
			Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// ЭДО
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец ЭДО

// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
&НаСервере
Процедура ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	ТоварыДобавлены = Ложь;
	Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТовары = Объект.Запасы.Добавить();
		НоваяСтрокаТовары.НомерВариантаКП = ТекущийВариантКП;
		НоваяСтрокаТовары.Номенклатура = СтрокаТаблицы.Номенклатура;
		ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрокаТовары, Объект, "ДатаОтгрузки", "ПоложениеДатыОтгрузки");
		ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрокаТовары, Объект, "СтруктурнаяЕдиницаРезерв", "ПоложениеСклада");
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			НоваяСтрокаТовары.Характеристика = СтрокаТаблицы.Характеристика;
			
		КонецЕсли;
		
		НоваяСтрокаТовары.Цена = СтрокаТаблицы.Цена;
		НоваяСтрокаТовары.Количество = СтрокаТаблицы.Количество;
		
		Если ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения") Тогда
			
			НоваяСтрокаТовары.ЕдиницаИзмерения = СтрокаТаблицы.ЕдиницаИзмерения;
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрокаТовары.Номенклатура) Тогда
			
			НоваяСтрокаТовары.ЕдиницаИзмерения = СтрокаТаблицы.Номенклатура.ЕдиницаИзмерения;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
			НоваяСтрокаТовары.СтавкаНДС = СтрокаТаблицы.СтавкаНДС;
		Иначе
			НоваяСтрокаТовары.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТаблицы.Номенклатура.ВидСтавкиНДС);
		КонецЕсли;
		
		ТоварыДобавлены = Истина;
		
	КонецЦикла;
	
	Если ТоварыДобавлены Тогда
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	Если РежимОстаткиИРезервы Тогда
		НоменклатураВДокументахСервер.ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧасти(Объект,,ТекущийВариантКП,, РезервированиеЗапасов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(АдресЗагруженныхДанных) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных);
	Для каждого СтрокаТаблицы Из Объект.Запасы Цикл 
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТаблицы);
	КонецЦикла;
	
	ОбновитьИтогиКлиент();
	ПересчитатьПлатежныйКалендарь();
	ОчиститьКалькуляцию();
	ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	ЗаполнитьНомераСтрокТаблицаЗапасы(Объект.Запасы, ТекущийВариантКП, ЗапасыКоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзФайлаЗапасы(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
	
	НастройкиЗагрузкиДанных.Вставить("ПолноеИмяТабличнойЧасти", "ЗаказПокупателя.Запасы");
	НастройкиЗагрузкиДанных.Вставить("ИмяМакетаСШаблоном","ЗагрузкаИзФайлаЗапасы");
	НастройкиЗагрузкиДанных.Вставить("Заголовок", НСтр("ru = 'Загрузка запасов из файла'"));
	НастройкиЗагрузкиДанных.Вставить("ПоложениеДатыВЗаказе", Объект.ПоложениеДатыОтгрузки);
	НастройкиЗагрузкиДанных.Вставить("СодержаниеВидимо", Истина);
	НастройкиЗагрузкиДанных.Вставить("ПоложениеСклада", Объект.ПоложениеСклада);
	НастройкиЗагрузкиДанных.Вставить("ЗагрузкаТабличнойЧастиУслуги", Ложь);
	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда
		
		Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда
		
			ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
			ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
			
		ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда
			
			ДлительнаяОперация = ОбработатьПодготовленныеДанныеНоменклатуры(РезультатЗагрузки);
			
			СтруктураПараметров = Новый Структура;
			ПроверитьНеобходимостьПодключенияОбработчикаОжидания(ДлительнаяОперация, СтруктураПараметров);
			
		КонецЕсли;
		
	Иначе
		
		ЗагрузитьИзФайлаЗавершение(РезультатЗагрузки);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанные(АдресРезультатаЗагрузки)
	
	СтруктураПоискаПартииСНДС = Новый Структура("КомиссияСНДС", Истина);
	ЕстьПартииСНДС = Объект.Запасы.НайтиСтроки(СтруктураПоискаПартииСНДС).Количество() > 0;

	НалогообложениеНДСОрганизации = НалогиУНФ.НалогообложениеНДС(Объект.Организация,, Объект.Дата);
	ОрганизацияБезНДС = НалогообложениеНДСОрганизации = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС;
	
	ДобавлениеБезНДС = ЕстьПартииСНДС И ОрганизацияБезНДС;
	
	ТребуетсяИзменениеНалогообложениеНаСНДС = Ложь;
	
	Попытка
		
		ПоказатьСодержание = Ложь;
		
		НачатьТранзакцию();
		
		РезультатЗагрузки = ПолучитьИзВременногоХранилища(АдресРезультатаЗагрузки);
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = Объект.Запасы.Добавить();
				
				ИменаСвойств = "Номенклатура, Содержание, Количество, Резерв, ЕдиницаИзмерения, СтавкаНДС, ДатаОтгрузки";
				Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
					
					ИменаСвойств = ИменаСвойств + ", Характеристика";
					
				КонецЕсли;
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
					
					ИменаСвойств = ИменаСвойств + ", Партия";
					
				КонецЕсли;
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы")
					ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство") Тогда
					
					ИменаСвойств = ИменаСвойств + ", Спецификация";
					
				КонецЕсли;
				
				Если ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам") Тогда
					
					ИменаСвойств = ИменаСвойств + ", СтруктурнаяЕдиницаРезерв";
					
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, ИменаСвойств);
				ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "ДатаОтгрузки", "ПоложениеДатыОтгрузки");
				ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "СтруктурнаяЕдиницаРезерв", "ПоложениеСклада");
				
				НоваяСтрока.НомерВариантаКП = ТекущийВариантКП;
				НоваяСтрока.ТипНоменклатурыЗапас = ((НоваяСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас)
												ИЛИ (НоваяСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат));
				СкладВТЧ = (Объект.ПоложениеСклада=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти"));								
				Если НоваяСтрока.ТипНоменклатурыЗапас И СкладВТЧ И НЕ ЗначениеЗаполнено(НоваяСтрока.СтруктурнаяЕдиницаРезерв) Тогда
					НоваяСтрока.СтруктурнаяЕдиницаРезерв = НоваяСтрока.Номенклатура.Склад;
				ИначеЕсли НоваяСтрока.ТипНоменклатурыЗапас И НЕ СкладВТЧ Тогда
					НоваяСтрока.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
				ИначеЕсли НЕ НоваяСтрока.ТипНоменклатурыЗапас Тогда
					НоваяСтрока.СтруктурнаяЕдиницаРезерв = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
				КонецЕсли; 
				НоваяСтрока.Цена = СтрокаТаблицы.Цена;
				НоваяСтрока.Сумма = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
				
				ПартияСНДС = Ложь;
				Если ЗначениеЗаполнено(НоваяСтрока.Партия) И НоваяСтрока.Партия.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС 
					И НЕ Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
					ТребуетсяИзменениеНалогообложениеНаСНДС = Истина;
					ПартияСНДС = Истина;
				КонецЕсли;
				
				Если (Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС И НЕ ДобавлениеБезНДС) Или ПартияСНДС Тогда
					
					Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
						
						НоваяСтрока.СтавкаНДС = ?(ЗначениеЗаполнено(НоваяСтрока.Номенклатура.ВидСтавкиНДС), Справочники.СтавкиНДС.СтавкаНДС(НоваяСтрока.Номенклатура.ВидСтавкиНДС), Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию));
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаТаблицы.СуммаНДС) Тогда
						
						НоваяСтрока.СуммаНДС = СтрокаТаблицы.СуммаНДС;
						
					Иначе
						
						СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
						
						НоваяСтрока.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
							НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((СтавкаНДС + 100) / 100),
							НоваяСтрока.Сумма * СтавкаНДС / 100);
						
					КонецЕсли;
					
				Иначе
					
					Если ДобавлениеБезНДС Тогда
						НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
					Иначе
						НоваяСтрока.СтавкаНДС = ?(Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС,
						УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС(),
						УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
					КонецЕсли;
					
					НоваяСтрока.СуммаНДС = 0;
					
				КонецЕсли;
				
				НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(Объект.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
				
				ПоказатьСодержание = (ПоказатьСодержание ИЛИ НЕ ПустаяСтрока(НоваяСтрока.Содержание));
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		ЗаполнитьНомераСтрокТаблицаЗапасы(Объект.Запасы, ТекущийВариантКП, ЗапасыКоличествоСтрок);
		
		ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы");

		ОбновитьИтогиСервер();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка данных'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ЗаказПокупателя, , ТекстОшибки);
		
	КонецПопытки;
		
		Если ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
			Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
			ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, Объект.Курс, КурсНациональнаяВалюта,УчетВалютныхОпераций);
		КонецЕсли;
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	Если РежимОстаткиИРезервы Тогда
		НоменклатураВДокументахСервер.ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧасти(Объект,,ТекущийВариантКП,, РезервированиеЗапасов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПодготовленныеДанныеНоменклатуры(РезультатЗагрузки)
	
	ПараметрыВызоваСервера = Новый Структура;
	ПараметрыВызоваСервера.Вставить("НастройкиЗагрузкиДанных", РезультатЗагрузки.НастройкиЗагрузкиДанных);
	ПараметрыВызоваСервера.Вставить("ТаблицаСопоставленияДанных", ДанныеФормыВЗначение(РезультатЗагрузки.ТаблицаСопоставленияДанных, Тип("ТаблицаЗначений")));
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Подсистема ЗагрузкаДанныхИзВнешнегоИсточника: Выполнение серверного метода загрузки результата'");
	ПараметрыВыполнения.ЗапуститьНеВФоне    = Ложь;
	ПараметрыВыполнения.ЗапуститьВФоне      = Истина;	
	
	ИмяМетода = "Справочники.Номенклатура.ОбработатьПодготовленныеДанные";
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыВызоваСервера, ПараметрыВыполнения);
	
КонецФункции
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено,
	СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ЗапасыВесПриИзменении(Элемент)
	
	РассчитатьОбъемИВесЗаказа();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыОбъемПриИзменении(Элемент)
	
	РассчитатьОбъемИВесЗаказа();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОбъемИВесЗаказа()
	
	СтрокиТекущегоВарианта = Объект.Запасы.НайтиСтроки(Новый Структура("НомерВариантаКП", Объект.ОсновнойВариантКП));
	
	Если СтрокиТекущегоВарианта.Количество() = 0 Тогда
		Объект.Вес = 0;
		Объект.Объем = 0;
		Возврат;
	КонецЕсли;
	
	ВесИтог = 0;
	ОбъемИтог = 0;
	
	Для Каждого ТекСтрока Из СтрокиТекущегоВарианта Цикл
		ВесИтог = ВесИтог + ТекСтрока.Вес;
		ОбъемИтог = ОбъемИтог + ТекСтрока.Объем;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ВесИтог) Тогда
		Объект.Вес = ВесИтог;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъемИтог) Тогда
		Объект.Объем = ОбъемИтог;
	КонецЕсли;
	
	ЗаполнитьЗаголовокГруппыГабариты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойТелефонНажатие(Элемент)

	Если НЕ ЗначениеЗаполнено(Объект.КонтактныйТелефон) Тогда
		Возврат
	КонецЕсли; 
	
	ЗначенияЗаполнения = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОснованиеЗаполнения = Новый Структура;
		ОснованиеЗаполнения.Вставить("ДокументОснование", Объект.Ссылка);
	Иначе
		ОснованиеЗаполнения = Неопределено;
	КонецЕсли; 
	
	ЗначенияЗаполнения.Вставить("Контрагент", Объект.Контрагент);
	ЗначенияЗаполнения.Вставить("ТипСобытия", ПредопределенноеЗначение("Перечисление.ТипыСобытий.ТелефонныйЗвонок"));
	Если ОснованиеЗаполнения<>Неопределено Тогда
		ЗначенияЗаполнения.Вставить("ОснованиеЗаполнения", ОснованиеЗаполнения);
	КонецЕсли; 
	Если НЕ ПустаяСтрока(Объект.КонтактноеЛицо) Тогда
		ЗначенияЗаполнения.Вставить("Контакт", Объект.КонтактноеЛицо);
	Иначе
		ЗначенияЗаполнения.Вставить("Контакт", Объект.Контрагент);
	КонецЕсли; 
	ЗначенияЗаполнения.Вставить("ЗначениеКИ", Объект.КонтактныйТелефон);
		
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапаснойТелефонНажатие(Элемент)

	Если НЕ ЗначениеЗаполнено(Объект.ЗапаснойТелефон) Тогда
		Возврат
	КонецЕсли; 
	
	ЗначенияЗаполнения = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОснованиеЗаполнения = Новый Структура;
		ОснованиеЗаполнения.Вставить("ДокументОснование", Объект.Ссылка);
	Иначе
		ОснованиеЗаполнения = Неопределено;
	КонецЕсли; 
	
	ЗначенияЗаполнения.Вставить("Контрагент", Объект.Контрагент);
	ЗначенияЗаполнения.Вставить("ТипСобытия", ПредопределенноеЗначение("Перечисление.ТипыСобытий.ТелефонныйЗвонок"));
	Если ОснованиеЗаполнения<>Неопределено Тогда
		ЗначенияЗаполнения.Вставить("ОснованиеЗаполнения", ОснованиеЗаполнения);
	КонецЕсли;
	Если НЕ ПустаяСтрока(Объект.КонтактноеЛицо) Тогда
		ЗначенияЗаполнения.Вставить("Контакт", Объект.КонтактноеЛицо);
	Иначе
		ЗначенияЗаполнения.Вставить("Контакт", Объект.Контрагент);
	КонецЕсли; 
	ЗначенияЗаполнения.Вставить("ЗначениеКИ", Объект.ЗапаснойТелефон);
		
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПочтаНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПочтаПолучателя) Тогда
		Возврат
	КонецЕсли; 
	
	ЗначенияЗаполнения = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОснованиеЗаполнения = Новый Структура;
		ОснованиеЗаполнения.Вставить("ДокументОснование", Объект.Ссылка);
	Иначе
		ОснованиеЗаполнения = Неопределено;
	КонецЕсли; 
	
	ЗначенияЗаполнения.Вставить("ТипСобытия", ПредопределенноеЗначение("Перечисление.ТипыСобытий.ЭлектронноеПисьмо"));
	Если ОснованиеЗаполнения<>Неопределено Тогда
		ЗначенияЗаполнения.Вставить("ОснованиеЗаполнения", ОснованиеЗаполнения);
	КонецЕсли; 
	Если НЕ ПустаяСтрока(Объект.КонтактноеЛицо) Тогда
		ЗначенияЗаполнения.Вставить("Контакт", Объект.КонтактноеЛицо);
	Иначе
		ЗначенияЗаполнения.Вставить("Контакт", Объект.Контрагент);
	КонецЕсли; 
	ЗначенияЗаполнения.Вставить("ЗначениеКИ", Объект.ПочтаПолучателя);
		
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСуммуНДСДоставкиПриРасчете(Форма)
	
	Объект = Форма.Объект;
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДСДоставки);
	Объект.СуммаНДСДоставки = Форма.СтоимостьДоставкиСНДС - (Форма.СтоимостьДоставкиСНДС) / ((СтавкаНДС + 100) / 100);
	
	Если Объект.СуммаВключаетНДС Тогда
		Объект.СтоимостьДоставки = Форма.СтоимостьДоставкиСНДС;
	Иначе
		Объект.СтоимостьДоставки = Форма.СтоимостьДоставкиСНДС - Объект.СуммаНДСДоставки;
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеОсновногоКонтактногоЛица(Контрагент)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.КонтактноеЛицо,
	|	ПРЕДСТАВЛЕНИЕ(Контрагенты.КонтактноеЛицо) КАК Представление,
	|	КонтактныеЛицаКонтактнаяИнформация.Тип,
	|	КонтактныеЛицаКонтактнаяИнформация.АдресЭП,
	|	КонтактныеЛицаКонтактнаяИнформация.НомерТелефона
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
	|		ПО (КонтактныеЛицаКонтактнаяИнформация.Ссылка = Контрагенты.КонтактноеЛицо И Контрагенты.Ссылка = &Контрагент)
	|ГДЕ
	|	(КонтактныеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ИЛИ КонтактныеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|	И Контрагенты.Ссылка = &Контрагент");
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	Результат = НовыеДанныеКонтактногоЛица();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Результат.Представление) Тогда
			Результат.Представление = Выборка.Представление;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат.КонтактныйТелефон)
			И ЗначениеЗаполнено(Результат.ЗапаснойТелефон)
			И ЗначениеЗаполнено(Результат.ПочтаПолучателя) Тогда
			Прервать;
		КонецЕсли;
		
		Если Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты
			И Не ЗначениеЗаполнено(Результат.ПочтаПолучателя) Тогда
			Результат.ПочтаПолучателя = Выборка.АдресЭП;
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
			И Не ЗначениеЗаполнено(Результат.КонтактныйТелефон) Тогда
			Результат.КонтактныйТелефон = Выборка.НомерТелефона;
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
			И Не ЗначениеЗаполнено(Результат.ЗапаснойТелефон) Тогда
			Результат.ЗапаснойТелефон = Выборка.НомерТелефона;
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ДекорацияОтборПоДублямОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.ЗапасыКонтекстноеМенюПоказатьДублиСтрок.Пометка = Ложь;
	Элементы.ДекорацияОтборПоДублям.Видимость = Ложь;
	
	УстановитьОтборПоВариантуКП();
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ДекорацияСостояниеОригиналаНажатие(Элемент)
	УчетОригиналовПервичныхДокументовКлиент.ОткрытьМенюВыбораСостояния(ЭтотОбъект,Элементы.ДекорацияСостояниеОригинала);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
//Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

#КонецОбласти

#Область ПараметрическиеСпецификации

&НаСервереБезКонтекста
Процедура ОбновитьПризнакиПараметрическихСпецификаций(Запасы)

	ПроизводствоСервер.ОбновитьПризнакиПараметрическихСпецификаций(Запасы); 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьКолонкиПараметровСпецификации(Форма)
	
	Запасы = Форма.Объект.Запасы;
	Элементы = Форма.Элементы;
	
	Если НЕ Форма.ИспользоватьПараметрическиеСпецификации
		ИЛИ НЕ Форма.ИспользоватьДополнительныеРеквизитыИСведения
		ИЛИ Форма.Объект.ВидОперации<>ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу")  Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыПараметрыСпецификации", "Видимость", Ложь); 
		Возврат;
	КонецЕсли; 
	
	ВидимостьКолонки = Ложь;
	Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
		Если СтрокаТабличнойЧасти.ЭтоШаблонСпецификации И СтрокаТабличнойЧасти.ЕстьДопРеквизитыСпецификации Тогда
			ВидимостьКолонки = Истина;
		КонецЕсли; 
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыПараметрыСпецификации", "Видимость", ВидимостьКолонки); 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОписанияДопРеквизитов(Форма, КлючСвязи = Неопределено)
	
	Запасы = Форма.Объект.Запасы;
	Реквизиты = Форма.Объект.РеквизитыПараметрическихСпецификаций;
	
	Если НЕ Форма.ИспользоватьПараметрическиеСпецификации
		ИЛИ НЕ Форма.ИспользоватьДополнительныеРеквизитыИСведения
		ИЛИ Форма.Объект.ВидОперации<>ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу")  Тогда
		Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
			СтрокаТабличнойЧасти.ПараметрыСпецификации = "";
		КонецЦикла; 
		Возврат;
	КонецЕсли; 
	
	Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) 
			ИЛИ НЕ СтрокаТабличнойЧасти.ЕстьДопРеквизитыСпецификации Тогда
			Продолжить;
		КонецЕсли;
		Если КлючСвязи<>Неопределено И СтрокаТабличнойЧасти.КлючСвязи<>КлючСвязи Тогда
			Продолжить;
		КонецЕсли; 
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
		СтрокиРеквизитов = Реквизиты.НайтиСтроки(СтруктураОтбора);
		ЭлементыОписания = Новый Массив;
		Для каждого СтрокаРеквизита Из СтрокиРеквизитов Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаРеквизита.Значение) Тогда
				Продолжить;
			КонецЕсли;
			ИмяСвойства = Строка(СтрокаРеквизита.Свойство);
			Позиция = СтрНайти(ИмяСвойства, "(");
			Если Позиция>0 Тогда
				ИмяСвойства = Лев(ИмяСвойства, Позиция - 2);
			КонецЕсли; 
			Если ТипЗнч(СтрокаРеквизита.Значение)=Тип("Число") Тогда
				ПредставлениеЗначения = Формат(СтрокаРеквизита.Значение, "ЧРД=.; ЧН=0; ЧГ=0");
			Иначе
				ПредставлениеЗначения = Строка(СтрокаРеквизита.Значение);
			КонецЕсли; 
			ЭлементыОписания.Добавить(ИмяСвойства + ": " + ПредставлениеЗначения);
		КонецЦикла;
		СтрокаТабличнойЧасти.ПараметрыСпецификации = СтрСоединить(ЭлементыОписания, "; ");
	КонецЦикла; 
 
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДопРеквизитыПоУмолчанию(Идентификатор)
	
	СтрокаТабличнойЧасти = Объект.Запасы.НайтиПоИдентификатору(Идентификатор);
	Если СтрокаТабличнойЧасти=Неопределено 
		ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация)
		ИЛИ НЕ СтрокаТабличнойЧасти.ЕстьДопРеквизитыСпецификации Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.КлючСвязи=0 Тогда
		ИмяТабличнойЧасти = "Запасы";
		СтрокаТабличнойЧасти.КлючСвязи = ТабличныеЧастиУНФКлиентСервер.СоздатьНовыйКлючСвязи(ЭтотОбъект);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Спецификация", СтрокаТабличнойЧасти.Спецификация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпецификацииДополнительныеРеквизиты.Свойство КАК Свойство,
	|	СпецификацииДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Справочник.Спецификации.ДополнительныеРеквизиты КАК СпецификацииДополнительныеРеквизиты
	|ГДЕ
	|	СпецификацииДополнительныеРеквизиты.Ссылка = &Спецификация";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.Значение) Тогда
			Продолжить;
		КонецЕсли; 
		НоваяСтрока = Объект.РеквизитыПараметрическихСпецификаций.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи;
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти 

#Область Промокоды
&НаКлиенте
Процедура ОповещениеВведенПромокод(Результат, ДополнительныеПараметры) Экспорт
	
	ТребуетсяПересчетСкидок = Ложь;
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	Промокод = Неопределено;
	ПредъявленныеПромокоды = Объект.ПримененныеПромокоды.НайтиСтроки(Новый Структура("ЭтоАктивацияПромокода", Ложь));
	Если НЕ Результат.Свойство("Промокод", Промокод) ИЛИ Не ЗначениеЗаполнено(Промокод) Тогда
		Если ПредъявленныеПромокоды.Количество() > 0 Тогда
			Для Каждого СтрокаПредъявленногоПромокода Из ПредъявленныеПромокоды Цикл
				Объект.ПримененныеПромокоды.Удалить(СтрокаПредъявленногоПромокода);
			КонецЦикла;
			ПредъявленныеПромокоды.Очистить();
			ТребуетсяПересчетСкидок = Истина;
		КонецЕсли;
	КонецЕсли;		
	
	СтрокаПромокода = Неопределено;
	Если ПредъявленныеПромокоды.Количество() > 0 И ЗначениеЗаполнено(Промокод) Тогда
		СтрокаПромокода = ПредъявленныеПромокоды[0];
	ИначеЕсли ЗначениеЗаполнено(Промокод) Тогда
		СтрокаПромокода = Объект.ПримененныеПромокоды.Добавить();
	КонецЕсли;
	Если Не СтрокаПромокода = Неопределено Тогда
		Если СтрокаПромокода.Промокод = Промокод Тогда
			Возврат;
		КонецЕсли;
		СтрокаПромокода.Промокод = Промокод;
		УсловиеПредоставленияСкидки = Неопределено;
		Если Результат.Свойство("УсловиеПредоставленияСкидки") Тогда
			УсловиеПредоставленияСкидки = Результат.УсловиеПредоставленияСкидки;
		КонецЕсли;
		СтрокаПромокода.УсловиеПредоставленияСкидки = УсловиеПредоставленияСкидки;		
		ТребуетсяПересчетСкидок = Истина;
	КонецЕсли; 

	Если ТребуетсяПересчетСкидок Тогда
		РассчитатьСкидкиНаценки(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеПромокода()
	ПромокодВведен = Ложь;
	ПромокодСработал = Ложь;
	ПредъявленныеПромокоды = Объект.ПримененныеПромокоды.НайтиСтроки(Новый Структура("ЭтоАктивацияПромокода", Ложь));
	ПримененныеСкидки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Объект.СкидкиНаценки.Выгрузить(,"СкидкаНаценка").ВыгрузитьКолонку("СкидкаНаценка"));
	СкидкиУсловий = ПромокодыУНФ.СкидкиСвязанныеСУсловиемНаПромокод(Объект.ПримененныеПромокоды.Выгрузить(ПредъявленныеПромокоды, "УсловиеПредоставленияСкидки"));
	Для Каждого СтрокаПромокода Из ПредъявленныеПромокоды Цикл
		Если ЗначениеЗаполнено(СтрокаПромокода.Промокод) Тогда
			ПромокодВведен = Истина;
			ПромокодСработал = Истина;
			СкидкиПромокода = СкидкиУсловий[СтрокаПромокода.УсловиеПредоставленияСкидки];
			СкидкиНеСработали = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СкидкиПромокода, ПримененныеСкидки);
			Если СкидкиНеСработали.Количество() = СкидкиПромокода.Количество() Тогда
				// Если хотя бы один промокод не сработал (т.е. ни одной связанной с ним скидки нет в документе)
				// Отразим на форме
				ПромокодСработал = Ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКартинкуПромокода()
	Если ПромокодВведен И Объект.СкидкиРассчитаны и НЕ ПромокодСработал Тогда
		Элементы.ДобавитьПромокод.Картинка = БиблиотекаКартинок.ВведенКупонВнимание;
	ИначеЕсли ПромокодВведен Тогда
		Элементы.ДобавитьПромокод.Картинка = БиблиотекаКартинок.ВведенКупон;	
	Иначе
		Элементы.ДобавитьПромокод.Картинка = БиблиотекаКартинок.ВвестиКупон;
	КонецЕсли
КонецПроцедуры
	
&НаКлиенте
Процедура ДобавитьПромокод(Команда)
	ТекущийПромокод = "";
	ПромокодыПредъявленные = Объект.ПримененныеПромокоды.НайтиСтроки(Новый Структура("ЭтоАктивацияПромокода", Ложь));
	Если ПромокодыПредъявленные.Количество() > 0 Тогда
		ТекущийПромокод = ПромокодыПредъявленные[0].Промокод;
	КонецЕсли;
	ПараметрыОткрытия = Новый Структура("Промокод", ТекущийПромокод);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеВведенПромокод", ЭтаФорма);
	ОткрытьФорму("Справочник.АвтоматическиеСкидки.Форма.ФормаВводаПромокода", ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти

#Область ОтменаТоваровУслуг

&НаСервере
Процедура ЗаполнитьДанныеПоОтменеТоваров()
	
	Для Каждого Строка Из Объект.Запасы Цикл
		Строка.ПричинаОтменыДатаЗапрета = НСтр("ru = 'выбрать'"); 
	КонецЦикла;
	
	Если Объект.ОтмененныеЗапасы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОтменненныйТовар Из Объект.ОтмененныеЗапасы Цикл
		ОтменненныйТовар.ВернутьТовар = НСтр("ru = 'вернуть'");
		ОтменненныйТовар.Редактируется = Ложь;
		ОтменненныйТовар.ИндексСвязаннойСтрокиЗапаса = 0;
		ОтменненныйТовар.ПричинаОтменыДатаЗапрета = НСтр("ru = 'выбрать'");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыОтменыТоваров()
	
	Массив = Новый Массив(); 
	Массив.Добавить(Тип("СправочникСсылка.ПричиныОтменыЗаказа")); 
	ОписаниеТиповПричин = Новый ОписаниеТипов(Массив);
	
	ВидимостьГруппыОтмененных = Элементы.ГруппаОтмененныеТоварыУслуги.Видимость;
	
	Элементы.ЗапасыПричинаОтмены.ОграничениеТипа = ОписаниеТиповПричин;
	
	РедактируемыеТовары = Объект.ОтмененныеЗапасы.НайтиСтроки(Новый Структура("Редактируется, НомерВариантаКП", Истина, ТекущийВариантКП));
	КоличествоРедактируемыхТоваров = РедактируемыеТовары.Количество();
	
	КоличествоОтмененныхВТаблице = Объект.ОтмененныеЗапасы.НайтиСтроки(Новый Структура("Редактируется, НомерВариантаКП", Ложь, ТекущийВариантКП));
	КоличествоОтмененных = Объект.ОтмененныеЗапасы.НайтиСтроки(Новый Структура("НомерВариантаКП", ТекущийВариантКП));
	
	Если КоличествоРедактируемыхТоваров <> 0 Тогда
		ЗаголовокГруппыОтмененныхТоваров = СтрШаблон(НСтр("ru ='%1, редактируется: %2'"), КоличествоОтмененныхВТаблице.Количество(), КоличествоРедактируемыхТоваров);
	Иначе
		ЗаголовокГруппыОтмененныхТоваров = СтрШаблон(НСтр("ru = '%1'"), КоличествоОтмененныхВТаблице.Количество());
	КонецЕсли;
	
	РежимРедактированияЗапасов = КоличествоРедактируемыхТоваров > 0;
	
	Элементы.ГруппаОтмененныеТоварыУслуги.Видимость = КоличествоОтмененных.Количество() <> 0 ИЛИ ОтображатьГруппуОтмененных;
	
	Если РежимРедактированияЗапасов Тогда
		Элементы.ЗапасыГруппаОтменаТоваров.ФиксацияВТаблице = ФиксацияВТаблице.Право;		
		Элементы.ЗапасыОтменен.ФиксацияВТаблице = ФиксацияВТаблице.Право;
		Элементы.ЗапасыОтменен.Гиперссылка = Истина;		
		Элементы.ЗапасыОтменен.ГиперссылкаЯчейки = Истина;
		Элементы.ЗапасыКоличествоОтмены.Гиперссылка = Истина;		
		Элементы.ЗапасыКоличествоОтмены.ГиперссылкаЯчейки = Истина;
	Иначе
		Элементы.ЗапасыГруппаОтменаТоваров.ФиксацияВТаблице = ФиксацияВТаблице.Нет;
		Элементы.ЗапасыОтменен.ФиксацияВТаблице = ФиксацияВТаблице.Нет;
	КонецЕсли;
	
	Элементы.ДекорацияРежимРедактирования.Видимость = РежимРедактированияЗапасов;
	Элементы.ЗапасыПричинаОтменыДатаЗапрета.Видимость = РазрешеноРедактированиеДокумента И ТолькоПросмотр;
	Элементы.ЗапасыПричинаОтмены.Видимость = НЕ Элементы.ЗапасыПричинаОтменыДатаЗапрета.Видимость;
	
	Элементы.ОтмененныеЗапасыПричинаОтменыДатаЗапрета.Видимость = РазрешеноРедактированиеДокумента И ТолькоПросмотр;
	Элементы.ОтмененныеЗапасыПричинаОтмены.Видимость = НЕ Элементы.ЗапасыПричинаОтменыДатаЗапрета.Видимость;
	
	Если ВидимостьГруппыОтмененных = Ложь И Элементы.ГруппаОтмененныеТоварыУслуги.Видимость Тогда
		Элементы.ГруппаОтмененныеТоварыУслуги.Скрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВернутьЗапасы(ДанныеЗапаса, ПричинаОтмены = Неопределено)
	
	ЗапасОтменен = ДанныеЗапаса.Отменен = 0;
	
	Если ЗапасОтменен Тогда
		
		ДанныеЗапаса.Отменен = 1;
		
		ДанныеЗапаса.НоменклатураДоОтмены = ДанныеЗапаса.Номенклатура;
		ДанныеЗапаса.КоличествоДоОтмены   = ДанныеЗапаса.Количество;
		ДанныеЗапаса.ЦенаДоОтмены		  = ДанныеЗапаса.Цена;
		ДанныеЗапаса.ЕдиницаИзмеренияДоОтмены = ДанныеЗапаса.ЕдиницаИзмерения;
		
		Если ДанныеЗапаса.Свойство("Партия") Тогда
			ДанныеЗапаса.ПартияДоОтмены 	  = ДанныеЗапаса.Партия;
		КонецЕсли;
		
		Если ДанныеЗапаса.Свойство("Серия") Тогда
			ДанныеЗапаса.СерияДоОтмены 		  = ДанныеЗапаса.Серия;
		КонецЕсли;
		
		Если ДанныеЗапаса.Свойство("Характеристика") Тогда
			ДанныеЗапаса.ХарактеристикаДоОтмены = ДанныеЗапаса.Характеристика;
		КонецЕсли;
				
		Если НЕ ЗначениеЗаполнено(ДанныеЗапаса.ПричинаОтмены) Тогда
			ДанныеЗапаса.ПричинаОтмены = ВыбраннаяПричинаОтменыЗапаса;
			Если ЗначениеЗаполнено(ВыбраннаяПричинаОтменыЗапаса) Тогда
				ДанныеЗапаса.ПричинаОтменыДатаЗапрета = Строка(ВыбраннаяПричинаОтменыЗапаса);
			Иначе
				ДанныеЗапаса.ПричинаОтменыДатаЗапрета = НСтр("ru = 'выбрать'");
			КонецЕсли;
		КонецЕсли;
		
		ДанныеЗапаса.ЦенаДоОтменыСтрокой = Формат(ДанныеЗапаса.Цена, "ЧДЦ=2");
		ДанныеЗапаса.КоличествоДоОтменыСтрокой = Формат(ДанныеЗапаса.Количество, "ЧДЦ=3");

		НовыйОтмененныйЗапас = Объект.ОтмененныеЗапасы.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйОтмененныйЗапас, ДанныеЗапаса);
		НовыйОтмененныйЗапас.Редактируется = Истина;
		
		ДанныеЗапаса.Номенклатура = НоменклатураОтмены;
		
		ДанныеЗапаса.КлючСвязиОтмененные         = "КлючСвязи_"+ИндексКлючаСвязиОтмененные;
		НовыйОтмененныйЗапас.КлючСвязиОтмененные = "КлючСвязи_"+ИндексКлючаСвязиОтмененные;
		
		ИндексКлючаСвязиОтмененные = ИндексКлючаСвязиОтмененные +1;
		ДанныеЗапаса.Цена = 0;
		РассчитатьСуммуВСтрокеТабличнойЧасти(, ДанныеЗапаса);
		ЗапасыНоменклатураПриИзмененииПродолжить(Элементы.ЗапасыНоменклатура, 0, ДанныеЗапаса);
		
	Иначе
		
		ДанныеЗапаса.Отменен = 0;
		ДанныеЗапаса.НоменклатураДоОтмены = Неопределено;
		ДанныеЗапаса.КоличествоДоОтмены   = Неопределено;
		ДанныеЗапаса.ЦенаДоОтмены		  = Неопределено;
		ДанныеЗапаса.ПартияДоОтмены 	  = Неопределено;
		ДанныеЗапаса.ХарактеристикаДоОтмены = Неопределено;
		ДанныеЗапаса.ЦенаДоОтменыСтрокой = Неопределено;
		ДанныеЗапаса.КоличествоДоОтменыСтрокой = Неопределено;
		ДанныеЗапаса.ЕдиницаИзмеренияДоОтмены = Неопределено;
		ДанныеЗапаса.ПричинаОтмены = Неопределено;
		ДанныеЗапаса.ПричинаОтменыДатаЗапрета = НСтр("ru = выбрать");
		
		СтруктураПоиска = Новый Структура("КлючСвязиОтмененные", ДанныеЗапаса.КлючСвязиОтмененные);
		СвязаннаяСтрока = Объект.ОтмененныеЗапасы.НайтиСтроки(СтруктураПоиска);
		
		ДанныеЗапаса.КлючСвязиОтмененные = Неопределено;
		
		Если СвязаннаяСтрока.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеЗапаса,СвязаннаяСтрока[0],,"ПричинаОтмены");
		Партия = Неопределено;
		Если ДанныеЗапаса.Свойство("Партия") Тогда
			Партия = ДанныеЗапаса.Партия;
		КонецЕсли;
		
		ЦенаЗапаса = ДанныеЗапаса.Цена;
		РассчитатьСуммуВСтрокеТабличнойЧасти(, ДанныеЗапаса);
		ЗапасыНоменклатураПриИзмененииПродолжить(Элементы.ЗапасыНоменклатура, ДанныеЗапаса.Количество, ДанныеЗапаса, ЦенаЗапаса, Партия);
		Объект.ОтмененныеЗапасы.Удалить(СвязаннаяСтрока[0]); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеОтмененнойСтроки() 
	
	// 1.Условное оформление строк в таблице
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПутьКТЧ = Элементы.Запасы.ПутьКДанным;
	
	ИсключаяПоля = Новый Массив;
	ИсключаяПоля.Добавить("ЗапасыКоличествоОтмены");
	ИсключаяПоля.Добавить("ЗапасыОтменен");
	ИсключаяПоля.Добавить("ЗапасыПричинаОтмены");
	ИсключаяПоля.Добавить("ЗапасыЕдиницаИзмеренияДоОтмены");
	ИсключаяПоля.Добавить("ЗапасыПричинаОтменыДатаЗапрета");
	
	ЗаполнитьРекурсивноПоляУсловногоОформления(Элемент.Поля, Элементы.Запасы.ПодчиненныеЭлементы, ИсключаяПоля);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(Элемент.Отбор, 
		ПутьКТЧ + ".Отменен", 1);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(Элемент, "ЦветТекста", 
		ЦветаСтиля.ЦветРамки);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(Элемент, "Шрифт", 
		ШрифтыСтиля.ЗачеркнутыйШрифтБЭД);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(Элемент, "ОтметкаНезаполненного", 
		Ложь);
		
	// 2. Подмена данных в строке
	ПоляДляОформления = Новый Соответствие;
	ПоляДляОформления.Вставить("ЗапасыХарактеристика", ".ХарактеристикаДоОтмены");
	ПоляДляОформления.Вставить("ЗапасыЦена", ".ЦенаДоОтменыСтрокой");
	ПоляДляОформления.Вставить("ЗапасыПартия", ".ПартияДоОтмены");
	ПоляДляОформления.Вставить("ЗапасыНоменклатура", ".НоменклатураДоОтмены");
	ПоляДляОформления.Вставить("ЗапасыКоличество", ".КоличествоДоОтменыСтрокой");
	ПоляДляОформления.Вставить("ЗапасыСерия", ".СерияДоОтмены");
	
	Для Каждого Поле Из ПоляДляОформления Цикл
		Элемент = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(Элемент.Отбор, 
			ПутьКТЧ + ".Отменен", 
			1);
		РаботаСФормой.ДобавитьОформляемыеПоля(Элемент, Поле.Ключ);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(Элемент, "Текст", 
			Новый ПолеКомпоновкиДанных(ПутьКТЧ + Поле.Значение));
	КонецЦикла;
	
	// 3. Условное оформление таблицы отмененных
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ПутьКТЧ = Элементы.ОтмененныеЗапасы.ПутьКДанным;
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ЭлементОформления.Отбор, 
			ПутьКТЧ + ".Редактируется", 
			Истина);
	РаботаСФормой.ДобавитьОформляемыеПоля(ЭлементОформления, "ОтмененныеЗапасыВернутьТовар");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(ЭлементОформления, "Текст", 
			 НСтр("ru = '<редактируется>'"));
 
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ИсключаяПоля = Новый Массив;
	ЗаполнитьРекурсивноПоляУсловногоОформления(ЭлементОформления.Поля, Элементы.ОтмененныеЗапасы.ПодчиненныеЭлементы, ИсключаяПоля);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ЭлементОформления.Отбор, 
			ПутьКТЧ + ".Редактируется", 
			Истина);
			
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(ЭлементОформления, "ЦветТекста", 
			 ЦветаСтиля.ЦветРамки);
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ПутьКТЧ = Элементы.Запасы.ПутьКДанным;
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ЭлементОформления.Отбор, 
			ПутьКТЧ + ".Отменен", 
			0);
	РаботаСФормой.ДобавитьОформляемыеПоля(ЭлементОформления, "ЗапасыПричинаОтмены");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(ЭлементОформления, "ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРекурсивноПоляУсловногоОформления(ОформляемыеПоляКомпоновкиДанных, КоллекцияЭлементов, Знач ИсключаяПоля = Неопределено) Экспорт
	
	Если ТипЗнч(ИсключаяПоля) = Тип("Строка") Тогда
		ИсключаяПоля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсключаяПоля);
	КонецЕсли;
	
	Для Каждого Поле Из КоллекцияЭлементов Цикл
		Если ТипЗнч(Поле) = Тип("ПолеФормы") Тогда
			Если ИсключаяПоля = Неопределено
				Или ИсключаяПоля.Найти(Поле.Имя) = Неопределено Тогда
					ПолеЭлемента = ОформляемыеПоляКомпоновкиДанных.Элементы.Добавить();
					ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Поле.Имя);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Поле) = Тип("ГруппаФормы")Тогда	
			ЗаполнитьРекурсивноПоляУсловногоОформления(ОформляемыеПоляКомпоновкиДанных, Поле.ПодчиненныеЭлементы, ИсключаяПоля);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьОтмененныеЗапасы()
	
	ОтмененныеЗапасы = Объект.Запасы.НайтиСтроки(Новый Структура("Отменен", 1));
	
	Если ОтмененныеЗапасы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОтмененныйЗапас Из ОтмененныеЗапасы Цикл
		Объект.Запасы.Удалить(ОтмененныйЗапас);
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ДополнитьДанныеОтмененныхТоваров(ТекущийОбъект)
	
	Для Каждого ОтмененныйЗапас Из ТекущийОбъект.ОтмененныеЗапасы Цикл
		
		Если НЕ ЗначениеЗаполнено(ОтмененныйЗапас.ДатаОтмены) Тогда
			ОтмененныйЗапас.ДатаОтмены = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОтмененныйЗапас.Автор) Тогда
			ОтмененныйЗапас.Автор = 
				УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойОтветственный");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОтмененныйЗапас.СостояниеОтмены) Тогда
			ОтмененныйЗапас.СостояниеОтмены = ТекущийОбъект.СостояниеЗаказа;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПричиныОтмены(Результат, ДополнительныеПараметры) Экспорт
	
	ОтменитьНеотгруженныеТоварыСервер(Результат); 
	
	БылиОтменененыСтроки = Ложь;
	
	Для Каждого Строка Из Объект.Запасы Цикл
		
		Если Строка.НеОтгружено = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.ПричинаОтмены = Результат;
		Если Строка.Отменен = 0 Тогда
			БылиОтменененыСтроки = Истина;
			ОтменитьВернутьЗапасы(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ БылиОтменененыСтроки Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Заказ полностью отгружен'"));
	КонецЕсли;
	
	НастроитьЭлементыОтменыТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПричиныОтменыОтмененные(Результат, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = Элементы.ОтмененныеЗапасы.ВыделенныеСтроки;
	
	Если ТипЗнч(ВыделенныеСтроки) <> Тип("Массив") И ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		
		СтрокаТабличнойЧасти = Объект.ОтмененныеЗапасы.НайтиПоИдентификатору(Строка);
		СтрокаТабличнойЧасти.ПричинаОтмены = Результат;
		
		Если НЕ СтрокаТабличнойЧасти.Редактируется Тогда
			Продолжить;
		КонецЕсли;
	
		СтрокаЗапаса = Объект.Запасы.НайтиСтроки(Новый Структура("КлючСвязиОтмененные", СтрокаТабличнойЧасти.КлючСвязиОтмененные));
		Если СтрокаЗапаса.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
	
		СтрокаЗапаса[0].ПричинаОтмены = СтрокаТабличнойЧасти.ПричинаОтмены;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОтменитьНеотгруженныеТоварыСервер(Результат)
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтменуТоваров(СтрокиОбработки, ПричинаОтмены = Неопределено, Действие = "ОтменаСтроки")
		
	Если ТипЗнч(СтрокиОбработки) <> Тип("Массив") И СтрокиОбработки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтказВОтмене = Ложь;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("НомерВариантаКП", ТекущийВариантКП);
	ВсеСтрокиВарианта = Объект.Запасы.НайтиСтроки(СтруктураОтбора);
	
	ПроверкаНаборов = СтрокиОбработки.Количество() <> ВсеСтрокиВарианта.Количество();
	Если НЕ ПроверкаНаборов Тогда
		Для Каждого Строка Из СтрокиОбработки Цикл
			СтрокаТабличнойЧасти = Объект.Запасы.НайтиПоИдентификатору(Строка);
			ОтменитьВернутьЗапасы(СтрокаТабличнойЧасти, ПричинаОтмены);
		КонецЦикла;
		НастроитьЭлементыОтменыТоваров();
		Возврат;
	КонецЕсли;
	
	ДанныеНабора = Новый Структура("НоменклатураНабора, ХарактеристикаНабора");
	Для Каждого ВыделеннаяСтрока Из СтрокиОбработки Цикл
		
		Если ТипЗнч(ВыделеннаяСтрока) = Тип("Число") Тогда
			ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
		Иначе
			ТекущиеДанныеСтроки = ВыделеннаяСтрока;
		КонецЕсли;
		
		Если ДанныеНабора.НоменклатураНабора = Неопределено Тогда
			ДанныеНабора.НоменклатураНабора = ТекущиеДанныеСтроки.НоменклатураНабора;
			ДанныеНабора.ХарактеристикаНабора = ТекущиеДанныеСтроки.ХарактеристикаНабора;
		ИначеЕсли ДанныеНабора.НоменклатураНабора<>ТекущиеДанныеСтроки.НоменклатураНабора 
			ИЛИ ДанныеНабора.ХарактеристикаНабора<>ТекущиеДанныеСтроки.ХарактеристикаНабора Тогда
			// Выделены строки разных наборов
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Действие недоступно для наборов!'");
			Сообщение.Поле = "Объект.Запасы";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли; 
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеНабора.НоменклатураНабора) Тогда
		Если Действие = "ГрупповоеИзменение" Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Действие недоступно для наборов!'");
			Сообщение.Поле = "Объект.Запасы";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
		ДанныеНабора.Вставить("НомерВариантаКП", ТекущийВариантКП);
		ДобавленныеНаборы = Объект.ДобавленныеНаборы.НайтиСтроки(ДанныеНабора);
		Оповещение = Новый ОписаниеОповещения("ЗапасыПередОтменойЗавершение", ЭтотОбъект, ДанныеНабора);
		СписокКнопок = Новый СписокЗначений;
		Если ДобавленныеНаборы.Количество()>0 Тогда
			ТекстВопроса = НСтр("ru = 'Набор можно отменить только целиком'");
			СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Отменить'"));
		КонецЕсли; 
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Оповещение, ТекстВопроса, СписокКнопок, 0, КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из СтрокиОбработки Цикл
		
		Если ТипЗнч(ВыделеннаяСтрока) = Тип("Число") Тогда
			СтрокаТабличнойЧасти = Объект.Запасы.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Иначе
			СтрокаТабличнойЧасти = ВыделеннаяСтрока;
		КонецЕсли;
		
		ОтменитьВернутьЗапасы(СтрокаТабличнойЧасти, ПричинаОтмены);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередОтменойЗавершение(Результат, ДанныеНабора) Экспорт
	
	Если Результат=Неопределено ИЛИ Результат=КодВозвратаДиалога.Отмена Тогда
		Возврат
	КонецЕсли;
	
	СтрокиНабора = Объект.Запасы.НайтиСтроки(ДанныеНабора);
	Если СтрокиНабора.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти = СтрокиНабора[0];
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.НоменклатураНабора);
		СтруктураОтбора.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.ХарактеристикаНабора);
		Если ТекущийВариантКП <> Неопределено Тогда
			СтруктураОтбора.Вставить("НомерВариантаКП", ТекущийВариантКП);
		КонецЕсли;
		
		СтрокиНабора = Объект.Запасы.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого Стр Из СтрокиНабора Цикл
			ОтменитьВернутьЗапасы(Стр);
			ЗапасыНоменклатураПриИзмененииПродолжить(Элементы.ЗапасыНоменклатура, Стр.Количество, Стр);
		КонецЦикла;
		
		Модифицированность = Истина;
		НастроитьЭлементыОтменыТоваров();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВозвратТоваров(СтрокаТабличнойЧасти)
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураНабора) Тогда
		ДанныеНабора = Новый Структура("НоменклатураНабора, ХарактеристикаНабора");
		ЗаполнитьЗначенияСвойств(ДанныеНабора, СтрокаТабличнойЧасти);
		
		ДанныеНабора.Вставить("НомерВариантаКП", ТекущийВариантКП);
		ДобавленныеНаборы = Объект.ОтмененныеЗапасы.НайтиСтроки(ДанныеНабора);
		Оповещение = Новый ОписаниеОповещения("ЗапасыПередВозвратомЗавершение", ЭтотОбъект, ДанныеНабора);
		СписокКнопок = Новый СписокЗначений;
		Если ДобавленныеНаборы.Количество()>0 Тогда
			ТекстВопроса = НСтр("ru = 'Набор можно вернуть в заказ только целиком'");
			СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Вернуть'"));
		КонецЕсли; 
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Оповещение, ТекстВопроса, СписокКнопок, 0, КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	СтрокаЗапаса = Объект.Запасы.НайтиСтроки(Новый Структура("КлючСвязиОтмененные", 
	СтрокаТабличнойЧасти.КлючСвязиОтмененные));
	
	Если СтрокаТабличнойЧасти.Редактируется И СтрокаЗапаса.Количество() <> 0 Тогда
		
		НоваяСтрока = СтрокаЗапаса[0];
		ОтменитьВернутьЗапасы(НоваяСтрока);
		
	Иначе
		НоваяСтрока = Объект.Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти,,"ПричинаОтмены");
		Индекс = Объект.ОтмененныеЗапасы.Индекс(СтрокаТабличнойЧасти);
		Объект.ОтмененныеЗапасы.Удалить(Индекс); 
		Партия = Неопределено;
		
		Если НоваяСтрока.Свойство("Партия") Тогда
			Партия = НоваяСтрока.Партия;
		КонецЕсли;
		
		ЦенаЗапаса = НоваяСтрока.Цена;
		ЗапасыНоменклатураПриИзмененииПродолжить(Элементы.ЗапасыНоменклатура, НоваяСтрока.Количество, НоваяСтрока, , Партия);
		
	КонецЕсли;
			
	Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Элементы.Запасы.ВыделенныеСтроки.Очистить();
	Элементы.Запасы.ВыделенныеСтроки.Добавить(НоваяСтрока.ПолучитьИдентификатор());
	
	Модифицированность = Истина;
	ОтображатьГруппуОтмененных = Истина;
	НастроитьЭлементыОтменыТоваров();

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередВозвратомЗавершение(Результат, ДанныеНабора) Экспорт
	
	Если Результат=Неопределено ИЛИ Результат=КодВозвратаДиалога.Отмена Тогда
		Возврат
	КонецЕсли;
	
	СтрокиНабора = Объект.ОтмененныеЗапасы.НайтиСтроки(ДанныеНабора);
	Если СтрокиНабора.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти = СтрокиНабора[0];
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.НоменклатураНабора);
		СтруктураОтбора.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.ХарактеристикаНабора);
		Если ТекущийВариантКП <> Неопределено Тогда
			СтруктураОтбора.Вставить("НомерВариантаКП", ТекущийВариантКП);
		КонецЕсли; 
		
		СтрокиНабора = Объект.ОтмененныеЗапасы.НайтиСтроки(СтруктураОтбора);
		НоваяСтрока = Неопределено;
		НаборДобавлен = Ложь;
		
		Для каждого Стр Из СтрокиНабора Цикл
			
			СтрокаЗапаса = Объект.Запасы.НайтиСтроки(Новый Структура("КлючСвязиОтмененные", Стр.КлючСвязиОтмененные));
			
			Если Стр.Редактируется И СтрокаЗапаса.Количество() <> 0 Тогда
				
				НоваяСтрока = СтрокаЗапаса[0];
				ОтменитьВернутьЗапасы(НоваяСтрока);
								
			Иначе
				Если НЕ НаборДобавлен Тогда
					НоваяСтрока = Объект.Запасы.Добавить();
					НоваяСтрока.Номенклатура = Стр.НоменклатураНабора;
					Если НоваяСтрока.Свойство("Характеристика") Тогда
						НоваяСтрока.Характеристика = Стр.ХарактеристикаНабора;
					КонецЕсли;
					
					ЗапасыНоменклатураПриИзмененииПродолжить(Элементы.ЗапасыНоменклатура, НоваяСтрока.Количество, 
					НоваяСтрока);
					
					НаборДобавлен = Истина;
				КонецЕсли;

				Индекс = Объект.ОтмененныеЗапасы.Индекс(Стр);
				Объект.ОтмененныеЗапасы.Удалить(Индекс);
			КонецЕсли;
		КонецЦикла;
		
		Если НоваяСтрока <> Неопределено Тогда
			Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Элементы.Запасы.ВыделенныеСтроки.Очистить();
			Элементы.Запасы.ВыделенныеСтроки.Добавить(НоваяСтрока.ПолучитьИдентификатор());
		КонецЕсли;
		
		ОтображатьГруппуОтмененных = Истина;
		
		Модифицированность = Истина;
		НастроитьЭлементыОтменыТоваров();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

