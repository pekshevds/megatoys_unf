#Область ОписаниеПеременных

#Область ПеременныеФормы

&НаКлиенте
Перем ПриИзмененииСтарт;

&НаКлиенте
Перем ПриИзмененииФиниш;

&НаКлиенте
Перем КопированиеСтрокиРаботы;

&НаКлиенте
Перем КопированиеСтрокиТовары;

&НаКлиенте
Перем ДанныеВыбораСостояния;

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	#Область БиблиотекаСтандартныхПодсистем
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиУНФ.ЗаполнитьДополнительныеПараметры(Объект,
		"ЗНГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	#КонецОбласти  
	
	ДоступенОрдерныйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныйСклад");
	
	Если ТипЗнч(КэшЗначений) <> Тип("Структура") Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	КэшЗначений.Вставить("ИспользоватьМинимальныеЦены", ЦенообразованиеСерверПовтИсп.МинимальныеЦеныИспользуются());
	КэшЗначений.Вставить("ПередачаТоваровМеждуОрганизациями", 
		ПолучитьФункциональнуюОпцию("ПередачаТоваровМеждуОрганизациями"));
	
	НаборСвойств_Документ_ЗаказПокупателя = УправлениеСвойствами.НаборСвойствПоИмени("Документ_ЗаказПокупателя");
	КэшЗначений.Вставить("НаборСвойств_Документ_ЗаказПокупателя", НаборСвойств_Документ_ЗаказПокупателя);
	
	// Прослеживаемость
	Если Объект.Контрагент.Пустая() Тогда
		КэшЗначений.Вставить("РеализацияВЕАЭС", Ложь);
	Иначе
		КэшЗначений.Вставить("РеализацияВЕАЭС", Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Объект.Контрагент));
	КонецЕсли;
	
	КэшЗначений.Вставить("ЗапретКомиссионныхПартийБезВладельца", Константы.ЗапретКомиссионныхПартийБезВладельца.Получить());
	
	РеализацияВЕАЭС = КэшЗначений.РеализацияВЕАЭС;
	Если Объект.Ссылка.Пустая() Тогда
		
		ОбновитьПризнакПрослеживаемости = (ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ЗаказПокупателя"));
		
		Если ОбновитьПризнакПрослеживаемости Тогда
			ОбновитьПризнакПрослеживаемости();
		КонецЕсли;
		
		ОбновитьОтображениеПрослеживаемости();
		
	КонецЕсли;
	// Конец Прослеживаемость
	
	УстановитьУсловноеОформлениеФормы(); 
	
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы");
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Работы");
	
	//Доставка
	УстановитьВидимостьДанныхПоДоставке();
	Если НЕ Объект.Контрагент.Пустая() Тогда
		АдресаДоставки = АдресаДоставки(Объект.Контрагент);
		ЗаполнитьСписокВыбораАдресаДоставки(Элементы.АдресДоставки, АдресаДоставки);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.ЗаказПокупателя.ТабличныеЧасти.Запасы,
		НастройкиЗагрузкиДанных, ЭтотОбъект, Ложь);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	// Запомним предопределённые значения
	ВариантЗаполненияРасшифровкиПросмотр = ПредопределенноеЗначение(
		"Перечисление.ВариантыЗаполненияРасшифровкиПлатежа.Просмотр");
	ВариантЗаполненияРасшифровкиВручную = ПредопределенноеЗначение(
		"Перечисление.ВариантыЗаполненияРасшифровкиПлатежа.Вручную");
	
	СпособыЗачетаВручную = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Вручную");
	СпособыЗачетаАвто = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто");
	
	ВидОперацииЗаказНаряд = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд");
	
	РазрешитьСкладыВТабличныхЧастях = ПолучитьФункциональнуюОпцию("РазрешитьСкладыВТабличныхЧастях");
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	ДатаПриСозданииНаСервере = Объект.Дата;
	
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	Контрагент = Объект.Контрагент;
	ЗаполнитьПараметрыРасчетовСКонтрагентом();
	
	Договор = Объект.Договор;
	ВалютаРасчетов = Справочники.ДоговорыКонтрагентов.ВалютаРасчетов(Договор);
	НациональнаяВалюта = УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту();
	НациональнаяВалютаКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НациональнаяВалюта, ДатаДокумента);
	КурсНациональнаяВалюта = НациональнаяВалютаКурсКратность.Курс;
	КратностьНациональнаяВалюта = НациональнаяВалютаКурсКратность.Кратность;
	ИмяТабличнойЧасти = "Работы";
	ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
	ЭтотОбъект.ИспользоватьВидыЗаказНарядов = ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказНарядов");
	ЭтотОбъект.ЗаказНарядВСостоянииВыполнения = СостоянияЗаказов.ЭтоСостояниеВыполненияЗаказНаряда(Объект.СостояниеЗаказа, Объект.ВидЗаказа);
	
	ФункциональнаяОпцияРезервированиеЗапасов = ПолучитьФункциональнуюОпцию("РезервированиеЗапасов");
	ИспользоватьПроцессыСостояний = ПолучитьФункциональнуюОпцию("ИспользоватьПроцессыСостояний");
	РазрешеноРедактированиеДокумента = ПравоДоступа("Редактирование", Метаданные.Документы.ЗаказПокупателя);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		// Старт и Финиш
		Если НЕ (Параметры.ЗначенияЗаполнения.Свойство("Старт") ИЛИ Параметры.ЗначенияЗаполнения.Свойство("Финиш")) Тогда
			Объект.Старт = ?(Не ЗначениеЗаполнено(Объект.Старт), ДатаДокумента, Объект.Старт);
			Объект.Финиш = ?(Не ЗначениеЗаполнено(Объект.Финиш), КонецДня(ДатаДокумента), Объект.Финиш);
		КонецЕсли;
		Если Объект.Финиш = КонецМесяца(Объект.Финиш) Тогда
			// Возможен конфликт с закрытием месяца
			Объект.Финиш = Объект.Финиш - 60;
		КонецЕсли; 
		
		// Если заполняем ТЧ Запасы, она должна быть видима на форме
		Если Параметры.ЗначенияЗаполнения.Свойство("Запасы") И Параметры.ЗначенияЗаполнения.Запасы.Количество()>0 Тогда
			Объект.ИспользоватьТовары = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			Объект.ДокументОснование = Документы.ПриемИПередачаВРемонт.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	СформироватьНаименованияМатериаловИИсполнителей();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		И Не ЗначениеЗаполнено(Параметры.Основание) 
		И Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования)
		И Не ЗаполнениеОбъектовУНФ.ЭтоЗаполнениеПоШаблону(Параметры.ЗначенияЗаполнения) Тогда
		ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС(Истина);
		НалогиУНФ.ЗаполнитьНДСВключенВСтоимостьВДокументе(Объект);
		Объект.СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Объект.Организация,,Объект.Дата);
	ИначеЕсли Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		Элементы.ЗНРаботыСтавкаНДС.Видимость = Истина;
		Элементы.ЗНРаботыСуммаНДС.Видимость = Истина;
		Элементы.ЗНРаботыВсего.Видимость = Истина;
		Элементы.ПлатежныйКалендарьСуммаНДСОплаты.Видимость = Истина;
		Элементы.СписокПлатежныйКалендарьСуммаНДСОплаты.Видимость = Истина;
		Элементы.СчетФактураНадпись.Видимость = Истина;
	Иначе
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		Элементы.ЗНРаботыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗНРаботыСуммаНДС.Видимость = Ложь;
		Элементы.ЗНРаботыВсего.Видимость = Ложь;
		Элементы.ПлатежныйКалендарьСуммаНДСОплаты.Видимость = Ложь;
		Элементы.СписокПлатежныйКалендарьСуммаНДСОплаты.Видимость = Ложь;
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НаЭкспорт Тогда
			Элементы.СчетФактураНадпись.Видимость = Истина;
		Иначе
			Элементы.СчетФактураНадпись.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СпециальныйНалоговыйРежим) Тогда
		Объект.СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Объект.Организация,,Объект.Дата);
	КонецЕсли;
	
	РаботаСФормойДокумента.НастроитьГруппуЦеныИВалюты(ЭтотОбъект);
	
	Элементы.РедактироватьСписком.Пометка = Объект.ПлатежныйКалендарь.Количество() > 1;
	Элементы.СтраницаПлатежныйКалендарь.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
	Элементы.ВидЗаказа.ОграничениеТипа			= Новый ОписаниеТипов("СправочникСсылка.ВидыЗаказНарядов");
	Элементы.СостояниеЗаказа.ОграничениеТипа	= Новый ОписаниеТипов("СправочникСсылка.СостоянияЗаказНарядов");
	Если Не ЭтотОбъект.ИспользоватьВидыЗаказНарядов Тогда
		Элементы.ВидЗаказа.Видимость					= Ложь;
		Элементы.СостояниеЗаказа.ПоложениеЗаголовка		= ПоложениеЗаголовкаЭлементаФормы.Авто;
		Элементы.СостояниеЗаказа.АвтоМаксимальнаяШирина	= Истина;
		Элементы.СостояниеЗаказа.МаксимальнаяШирина		= 0;
		Элементы.СостояниеЗаказа.КнопкаСоздания			= Неопределено;
	КонецЕсли;
	
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	ОбновитьКартинкуДисконтнойКарты();
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		// ГТД и РНПТ.
		ИменаТЧИПолей = ГрузовыеТаможенныеДекларацииСервер.ИменаТЧИПолейДляТаблицыЗапасы_БазовыеПоляСПрослеживаемостью();
		ГрузовыеТаможенныеДекларацииСервер.ПриСозданииНаСервереДляДокументаСПрослеживаемостью(ЭтаФорма, ИменаТЧИПолей, КэшЗначений);
		// Конец ГТД и РНПТ
	КонецЕсли;
	
	ИспользоватьПодсистемуЗарплата = ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуЗарплата")
		И ПравоДоступа("Просмотр", Метаданные.Подсистемы.Персонал);
	
	Элементы.ЗНГруппаПредоплата.Доступность = Объект.СостояниеЗаказа = ПредопределенноеЗначение("Справочник.СостоянияЗаказНарядов.Завершен")
		И Объект.ВариантЗавершения = ПредопределенноеЗначение("Перечисление.ВариантыЗавершенияЗаказа.Успешно");
	
	// Если документ открыт из подбора, заполнить табличную часть товары
	Если Параметры.ЗначенияЗаполнения.Свойство("АдресЗапасовВХранилище") 
		И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.АдресЗапасовВХранилище) Тогда
		
		ПолучитьЗапасыИзХранилища(Параметры.ЗначенияЗаполнения.АдресЗапасовВХранилище, 
							Параметры.ЗначенияЗаполнения.ИмяТабличнойЧасти,
							Параметры.ЗначенияЗаполнения.ЕстьХарактеристики,
							Параметры.ЗначенияЗаполнения.ЕстьПартии);
		
	КонецЕсли;
	
	КэшЗначений.Вставить("ВерсияПодчиненногоСчетФактуры", Неопределено);
	КэшЗначений.Вставить("МодифицированностьФормы", Ложь);
	КэшЗначений.Вставить("ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати", Константы.ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати.Получить());
	
	// Установить надписи счет-фактура и основание
	СчетФактураСсылка = СчетаФактурыУНФ.ПолучитьПодчиненныйСчетФактуру(Объект.Ссылка, Ложь);
	Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(СчетФактураСсылка,,, Объект.ЭтоУниверсальныйДокумент);
	КэшЗначений.Вставить("СчетФактураСсылка", ?(ТипЗнч(СчетФактураСсылка) = Тип("Структура"), СчетФактураСсылка.Ссылка, Неопределено));
	
	ИтогВсего = Объект.Работы.Итог("Всего") + Объект.Запасы.Итог("Всего");
	ИтогСуммаНДС = Объект.Работы.Итог("СуммаНДС") + Объект.Запасы.Итог("СуммаНДС");
	
	// Установка заголовка формы.
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = НСтр("ru = 'Заказ-наряд (создание)'");
	КонецЕсли;
	
	// Установить отбор для ТаблицаРаботы по типу номенклатуры.
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ТипНоменклатурыУслуга", Ложь);
	ФиксированнаяСтруктураОтбора = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	Элементы.ТаблицаРаботы.ОтборСтрок = ФиксированнаяСтруктураОтбора;
	
	// Установка доступности цен для редактирования.
	РазрешеноРедактированиеЦенДокументов = УправлениеДоступомУНФ.РазрешеноРедактированиеЦенДокументов();
	
	Элементы.ЗНРаботыЦена.ТолькоПросмотр 				  = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗНРаботыПроцентСкидкиНаценки.ТолькоПросмотр  = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗНРаботыСумма.ТолькоПросмотр 				  = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗНРаботыСуммаНДС.ТолькоПросмотр 			  = НЕ РазрешеноРедактированиеЦенДокументов;
	
	Элементы.ЗапасыЦена.ТолькоПросмотр 					  = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыПроцентСкидкиНаценки.ТолькоПросмотр	  = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСумма.ТолькоПросмотр 				  = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСуммаНДС.ТолькоПросмотр	 			  = НЕ РазрешеноРедактированиеЦенДокументов;
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Работы");
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Материалы");
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Запасы");
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "МатериалыЗаказчика");
	
	АвтоподборКонтактов.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект);
	
	// СписокАвтоПодбораКонтрагента
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЭлектроннаяПочтаУНФ.ЗаполнитьСписокАвтоПодбораКонтрагентаИзСобытия(СписокАвтоПодбораКонтрагента, Объект.Событие);
	КонецЕсли;
	// Конец СписокАвтоПодбораКонтрагента
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// ГрупповоеИзменениеСтрок
	ЗаполнитьСписокДействий("Запасы", РазрешеноРедактированиеЦенДокументов);
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрокСервер("Запасы"), ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
	ЗапасыИзменениеСтрокДействиеПриОткрытии = ЗапасыИзменениеСтрокДействие;
	УстановитьПометку("Запасы", Истина);
	
	ЗаполнитьСписокДействий("Работы", РазрешеноРедактированиеЦенДокументов);
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрокСервер("Работы"), ЭтотОбъект.РаботыИзменениеСтрокДействие);
	РаботыИзменениеСтрокДействиеПриОткрытии = РаботыИзменениеСтрокДействие;
	УстановитьПометку("Работы", Истина);
	// Конец ГрупповоеИзменениеСтрок
	
	// АвтоматическиеСкидки.
	АвтоматическиеСкидкиПриСозданииНаСервере();
	ОбновитьВидимостьБонусовКНачислению();
	ОбновитьСостояниеПромокода();	
	
	// Отмена товаров, услуг
	ЗаполнитьДанныеПоОтменеТоваров();
	НастроитьЭлементыОтменыТоваров();
	// Конец Отмена товаров, услуг
	
	// ЭДО
	УстановитьВидЭД();
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.КомандыЭДО_ФормаДокумента(ЭтотОбъект);
	// Конец ЭДО
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	СписокЭлектронныхВесов = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("ЭлектронныеВесы", ,
		МенеджерОборудованияВызовСервера.РабочееМестоКлиента());
	Если СписокЭлектронныхВесов.Количество() = 0 Тогда
		// Нет подключенных весов.
		Элементы.ЗапасыПолучитьВес.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	УстановитьВидимостьПечатиЧека();
	Если ИспользоватьПодключаемоеОборудование И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Справочники.Контрагенты.ДанныеКИКонтрагентаДляВыбораНаФорме(Объект.Контрагент, Элементы, ПоляКИДляОтправкиЧека());
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Ручные скидки
	РассчитатьСуммуИПроцентСкидкиРаботыЗапасы(Объект, СкидкаСумма, СкидкаПроцент);
	// Конец Ручные скидки
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();

	// Серии номенклатуры
	ИспользоватьСерииНоменклатурыОстатки = СерииНоменклатурыУНФ.ИспользоватьСерииНоменклатурыОстатки();
	
	ИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	Элементы.ЗНМатериалыГруппаСерииНоменклатуры.Видимость = ИспользоватьСерииНоменклатуры;
	Элементы.ЗапасыГруппаСерииНоменклатуры.Видимость = ИспользоватьСерииНоменклатуры;
	
	// Ремонты
	Элементы.ГруппаЗаполнитьПоОснованию.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьРемонты");

	// Наборы
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ИменаТабличныхЧастей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Запасы,Работы");
		Для каждого ИмяТЧ Из ИменаТабличныхЧастей Цикл
			Если НЕ Параметры.ЗначенияЗаполнения.Свойство(ИмяТЧ) Тогда
				Продолжить;
			КонецЕсли; 
			Для каждого ДанныеСтроки Из Параметры.ЗначенияЗаполнения[ИмяТЧ] Цикл
				Если ДанныеСтроки.Свойство("ЭтоНабор") И ДанныеСтроки.ЭтоНабор Тогда
					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
					Если ДанныеСтроки.Свойство("Характеристика") И ЗначениеЗаполнено(ДанныеСтроки.Характеристика) Тогда
						СтруктураОтбора.Вставить("Характеристика", ДанныеСтроки.Характеристика);
					КонецЕсли;
					Строки = Объект[ИмяТЧ].НайтиСтроки(СтруктураОтбора);
					Для каждого СтрокаНабора Из Строки Цикл
						СтруктураДанные = Новый Структура;
						СтруктураДанные.Вставить("Организация", Объект.Организация);
						СтруктураДанные.Вставить("Номенклатура", СтрокаНабора.Номенклатура);
						СтруктураДанные.Вставить("Характеристика", СтрокаНабора.Характеристика);
						СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
						СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
						Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
							СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
							СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
							СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
							СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
							СтруктураДанные.Вставить("Коэффициент", 1);
							СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
						КонецЕсли;
						// ДисконтныеКарты
						СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
						СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
						// Конец ДисконтныеКарты 
						
						ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, СтрокаНабора, СтруктураДанные);

						СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
						Если НЕ СтруктураДанные.ИспользоватьХарактеристики Тогда
							ЗаменитьСтрокуДаннымиНабора(ЭтотОбъект, ИмяТЧ, СтрокаНабора, СтруктураДанные);
						КонецЕсли;
					КонецЦикла; 
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла; 
	КонецЕсли;
	// Конец Наборы
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ДействияПослеЧтенияОбъекта();
	КонецЕсли; 
	
	// КомандыПечати
	ПечатьДокументовУНФ.КорректировкаРазмещениеПодчиненнойГруппыКомандПечати(ЭтаФорма, Элементы.ПодменюПечать, Элементы.ПодменюДоговорКонтрагента);
	Элементы.КомандыПечатиДоговорКонтрагента.Вид = ВидГруппыФормы.ГруппаКнопок;
	ШаблоныПечатиОфисныхДокументов.ОпределитьВидимостьКомандШаблоновПечати(Элементы.ФормаОткрытьШаблоныПечатиДоговоровКонтрагентов);
	
	ПечатьДокументовУНФ.КорректировкаРазмещениеПодчиненнойГруппыКомандПечати(ЭтаФорма, Элементы.ПодменюПечать, Элементы.ПодменюПечатьФаксимиле);
	
	ЗаменитьКоманду("СводныйОтчетЗаказНаряд", "СводныйОтчет");
	ЗаменитьКоманду("Калькуляция", "Калькуляция");
	// Конец КомандыПечати
	
	НапоминанияПользователяУНФ.УстановитьОтображениеКомандОрганайзера(Элементы);
	ЭлектроннаяПочтаУНФ.УстановитьОтображениеКомандОтправкиСообщений(Элементы);

	// Доставка
	Если ЗначениеЗаполнено(Объект.НоменклатураДоставки) Тогда
		Объект.НоменклатураДоставки = Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли; 
	// Конец Доставка
	ОпределитьВидимостьИУстановитьНастройкиУчетаВНалогообложении();
	
	// ПодарочныеСертификаты
	КэшЗначений.Вставить("ВыводитьСоветОплатаСертификатомВВалюте", УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		Пользователи.ТекущийПользователь(),
		"ВыводитьСоветОплатаСертификатомВВалюте",
		Истина));
	
	ИсходноеОписаниеТипов = РеквизитФормыВЗначение("Объект").Метаданные().ТабличныеЧасти.Предоплата.Реквизиты.Документ.Тип;
	ОписаниеТиповБезНоменклатуры = Новый ОписаниеТипов(ИсходноеОписаниеТипов,, "СправочникСсылка.Номенклатура");
	Элементы.Предоплата.ПодчиненныеЭлементы.ПредоплатаГруппаДокумент.ПодчиненныеЭлементы.ПредоплатаДокумент.ОграничениеТипа = ОписаниеТиповБезНоменклатуры;
	// Конец ПодарочныеСертификаты
	
	Если Параметры.Ключ.Пустая()
		Тогда
		
		Если Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			Объект.ПоложениеДокументаПоступления = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
		КонецЕсли;
		
		НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект, Истина);
		УчетОстатковПоСкладскимОрдерам = УчетОстатковВРазрезеСкладскихОрдеров();
		УстановитьВидимостьДокументаПоступления(ЭтаФорма);
		
	КонецЕсли;
	
	ОбязательноЗаполнятьИсточникВЗаказах = 
		РегистрыСведений.ОбязательностьЗаполненияРеквизитов.ОбязательностьЗаполненияРеквизита("ЗаказНаряд", "ИсточникПривлечения");
		
	// Взаиморасчеты
	ВзаиморасчетыПриСозданииНаСервере();
	// Конец Взаиморасчеты
	
	// ИнтеграцияГосИС
	СобытияФормИСУНФ.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// Конец ИнтеграцияГосИС
			
	// МобильныйКлиент
	МобильныйКлиентУНФ.НастроитьФормуОбъектаМобильныйКлиент(Элементы);
	// Конец МобильныйКлиент
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовУНФ.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
	ОткрытИзПланировщика = Параметры.Свойство("ВыбранныеРесурсы");
	
	Если ОткрытИзПланировщика И Не ЭтаФорма.ТолькоПросмотр Тогда
		ЗаполнитьРесурсыИзПланировщика(Параметры.ВыбранныеРесурсы);
	КонецЕсли;
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");

	ГрузоотправительОнЖе = НЕ ЗначениеЗаполнено(Объект.Грузоотправитель);
	ГрузополучательОнЖе = НЕ ЗначениеЗаполнено(Объект.Грузополучатель);
	УстановитьОтображениеГрузоперевозки();
	
	НастройкиКоличества = ПолучитьНастройкиИзмененияКоличества();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиКоличества);
	
	Пользователь = Пользователи.ТекущийПользователь();
	ПоказыватьКолонкуСодержаниеВЗаказеПокупателяЗапасы =
		УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,
			"ПоказыватьКолонкуСодержаниеВЗаказеПокупателяЗапасы");	
	ПоказыватьКолонкуСодержаниеВЗаказеПокупателяРаботы =
		УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,
			"ПоказыватьКолонкуСодержаниеВЗаказеПокупателяРаботы");
				
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию") Тогда
	
		Если Не Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
			Если РаботаСКомиссионерамиКомитентамиСервер.ВТабличнойЧастиЕстьКомиссионнаяПартияСНалогообложениемНДС(Объект) Тогда
				ТребуетсяИзменениеНалогообложениеНаСНДС = Истина;
				Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
				ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
				ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
				УчетВалютныхОпераций);
			КонецЕсли;
		ИначеЕсли РаботаСКомиссионерамиКомитентамиСервер.ВТабличнойЧастиЕстьКомиссионнаяПартияСНалогообложением(Объект) Тогда
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ПриИзмененииСтарт = Объект.Старт;
	ПриИзмененииФиниш = Объект.Финиш;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	УправлениеНебольшойФирмойКлиент.ЗаполнитьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП);
	УправлениеНебольшойФирмойКлиент.УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП);
	// Конец ПодключаемоеОборудование
	
	УправлениеФормой();
	
	// ГрупповоеИзменениеСтрок
	ОпределитьОбъектИзменений("Запасы");
	ОпределитьОбъектИзменений("Работы");
	// Конец ГрупповоеИзменениеСтрок
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СписокАвтоПодбораКонтрагента
	Если ЗначениеЗаполнено(СписокАвтоПодбораКонтрагента) Тогда
		ПодключитьОбработчикОжидания("ПоказатьВыборИзКлассификатораКонтактов", 0.1, Истина);
	КонецЕсли;
	// Конец СписокАвтоПодбораКонтрагента
	
	// ЭДО
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭДО
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	//Ресурсы
	Если ОткрытИзПланировщика И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Не Элементы.Найти("ЗНГруппаРесурсыПредприятия") = Неопределено Тогда
			ТекущийЭлемент = Элементы.ЗНГруппаРесурсыПредприятия;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(Элементы, "ЗНСтраницы", "ТекущаяСтраница") = Неопределено Тогда
		Если Элементы.ЗНСтраницы.ТекущаяСтраница.Имя = "ЗНГруппаРесурсыПредприятия" Тогда
			УстановитьДоступностьПовторов(Истина);
			ЗаполнитьДанныеТаблицыРесурсовНаФорме();
			ПланированиеРесурсовУНФКлиент.ЗаполнитьДлительностьВТаблицеВыбранныхРесурсов(Объект.РесурсыПредприятия)
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьПечатиЧека();
	
	Если ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
		РаботаСНоменклатуройКлиентУНФ.ВывестиОповещениеПользователяОбИзмененииРежимаНалогообложенияНаСДНС(ТребуетсяИзменениеНалогообложениеНаСНДС);
	КонецЕсли;
	ОбновитьКартинкуПромокода();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// АвтоматическиеСкидки
	СкидкиНаценкиКлиент.ПриЗакрытииФормы(Объект.Ссылка, ИспользоватьАвтоматическиеСкидки, СкидкиРассчитаныПередЗаписью);
	// Конец АвтоматическиеСкидки
	
	Если НЕ ЗавершениеРаботы Тогда
		// ГрупповоеИзменениеСтрок
		СохранитьТекущееДействиеИзмененияСтрок();
	КонецЕсли;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	// Прослеживаемость
	Если ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаПодбораРНПТ" Тогда
		
		ОбработкаВыбораРНПТННаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаВыбора" Тогда
		
		ОбработкаВыбораГТДНаКлиенте(ВыбранноеЗначение);
		
		// Конец Прослеживаемость
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() И Не СчитанаДисконтнаяКарта Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Данные = МенеджерОборудованияУНФКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// ДисконтныеКарты
	Если СчитанаДисконтнаяКарта Тогда
		СчитанаДисконтнаяКарта = Ложь;
	КонецЕсли;
	// Конец ДисконтныеКарты
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" Тогда
		
		ЭтотОбъект.Прочитать();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновлениеТекстаПроСчетФактуру" Тогда
		
		ПредставлениеЗаголовка = РаботаСФормойДокументаКлиент.ПредставлениеЗаголовкаПодчиненногоСчетаФактуры(
			Объект.Ссылка, Источник, Параметр, КэшЗначений);
		Если ПредставлениеЗаголовка <> Неопределено Тогда

			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СчетФактураНадпись", "Заголовок",
				ПредставлениеЗаголовка);

		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_Контрагент" 
		И ЗначениеЗаполнено(Параметр)
		И Объект.Контрагент = Параметр Тогда
		
		ЗаполнитьПараметрыРасчетовСКонтрагентом();
		УстановитьВидимостьДоговора();
		
	ИначеЕсли ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
			
		АдресЗапасовВХранилище	= Параметр;
		ЕстьХарактеристики 		= Истина;
		
		Если МаркерПодбора = "Работы" Тогда
			
			Если ПодборДляМатериаловВРаботах Тогда
				
				ИмяТабличнойЧасти 	= "ЗНМатериалы";
				ЕстьПартии 			= Истина;
				
				ЗНМатериалыПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии);
				
				СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", Элементы[ИмяТабличнойЧасти].ОтборСтрок["КлючСвязи"]);
				Элементы[ИмяТабличнойЧасти].ОтборСтрок = СтрОтбора;
				
			Иначе
				
				ИмяТабличнойЧасти 	= "Работы";
				ЕстьПартии 			= Ложь;
				
				ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии);
				Для Каждого СтрокаТабличнойЧасти Из Объект.Работы Цикл
					РассчитатьСуммуВСтрокеТабличнойЧасти("Работы", СтрокаТабличнойЧасти);
				КонецЦикла;
				
				ИтогВсего = Объект.Работы.Итог("Всего") + Объект.Запасы.Итог("Всего");
				ИтогСуммаНДС = Объект.Работы.Итог("СуммаНДС") + Объект.Запасы.Итог("СуммаНДС");
				
				// Платежный календарь.
				ПересчитатьПлатежныйКалендарь();
				
			КонецЕсли;
			
			// Калькуляция
			ОчиститьКалькуляцию();
			// Конец Калькуляция
	
		ИначеЕсли МаркерПодбора = "Запасы" Тогда
			
			ИмяТабличнойЧасти	= "Запасы";
			ЕстьПартии 			= Истина;
			
			ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии);
			
			Если НЕ ПустаяСтрока(ТекстОшибкиЖурналаРегистрации) Тогда
				ЗаписатьОшибкуЧтенияДанныхИзХранилища();
			КонецЕсли;
			
			//Подвал
			ИтогВсего = Объект.Работы.Итог("Всего") + Объект.Запасы.Итог("Всего");
			ИтогСуммаНДС = Объект.Работы.Итог("СуммаНДС") + Объект.Запасы.Итог("СуммаНДС");
			
			// Платежный календарь.
			ПересчитатьПлатежныйКалендарь();
			
			// Калькуляция
			ОчиститьКалькуляцию();
			// Конец Калькуляция
			
			РаботаСНоменклатуройКлиентУНФ.ВывестиОповещениеПользователяОбИзмененииРежимаНалогообложенияНаСДНС(ТребуетсяИзменениеНалогообложениеНаСНДС);
	
		ИначеЕсли МаркерПодбора = "МатериалыЗаказчика" Тогда
			
			ИмяТабличнойЧасти	= "МатериалыЗаказчика";
			ЕстьПартии 			= Ложь;
			
			ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии);
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПодборСерий"
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		ПараметрыИменаПолей = Новый Структура;
		
		Если Элементы.ЗНСтраницы.ТекущаяСтраница = Элементы.ЗНГруппаРаботы Тогда
			
			ПараметрыИменаПолей.Вставить("ИмяТЧЗапасы", "Материалы");
			ПараметрыИменаПолей.Вставить("ИмяТЧСерииНоменклатуры", "СерииНоменклатурыМатериалы");
			ПараметрыИменаПолей.Вставить("ИмяПоляКлючСвязи", "КлючСвязиСерииНоменклатуры");

			ИзменилосьКоличество = ПолучитьСерииНоменклатурыИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки, ПараметрыИменаПолей);
			Если ИзменилосьКоличество Тогда
				РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");
				// Калькуляция
				ОчиститьКалькуляцию();
				// Конец Калькуляция
			КонецЕсли;
			
		ИначеЕсли Элементы.ЗНСтраницы.ТекущаяСтраница = Элементы.ЗНГруппаЗапасы Тогда
			
			ПараметрыИменаПолей.Вставить("ИмяТЧЗапасы", "Запасы");
			ПараметрыИменаПолей.Вставить("ИмяТЧСерииНоменклатуры", "СерииНоменклатуры");
			ПараметрыИменаПолей.Вставить("ИмяПоляКлючСвязи", "КлючСвязи");
			
			ИзменилосьКоличество = ПолучитьСерииНоменклатурыИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки, ПараметрыИменаПолей);
			Если ИзменилосьКоличество Тогда
				// Калькуляция
				ОчиститьКалькуляцию();
				// Конец Калькуляция
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ВидыЗаказНарядов"
		Или ИмяСобытия = "Запись_СостоянияЗаказНарядов" Тогда
		
		ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостояния_ЗаказНаряд" И Параметр <> Неопределено Тогда
		
		ЗаказИзменен = Неопределено;
		
		Если ТипЗнч(Параметр) = Тип("Массив") Тогда
			ЗаказИзменен = Параметр.Найти(Объект.Ссылка);
		ИначеЕсли ТипЗнч(Параметр) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ЗаказИзменен = Параметр = Объект.Ссылка;
		КонецЕсли;
		
		Если ЗаказИзменен = Неопределено ИЛИ (ТипЗнч(ЗаказИзменен) = Тип("Булево") И ЗаказИзменен = Ложь) Тогда
			Возврат;
		КонецЕсли;
		
		ЭтотОбъект.Прочитать();
		УправлениеФормой();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьСписокЗаказовНаДоставку" Тогда
		УстановитьВидимостьДанныхПоДоставке();
	КонецЕсли;

	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Работы");
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Материалы");
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Запасы");
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "МатериалыЗаказчика");
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
	// ЭДО
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец ЭДО
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтеграцияГосИС
	СобытияФормИСУНФКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтеграцияГосИС
	
	Если ИмяСобытия = "Запись_ШаблоныПечатиОфисныхДокументов" И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство(
		"Назначение") Тогда
		Если Параметр.Назначение = ПредопределенноеЗначение(
			"Перечисление.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагента") Или Параметр.Назначение
			= ПредопределенноеЗначение(
			"Перечисление.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаЗаказНаряд") Тогда
			ГруппаКомандПечати = Элементы.ПодменюДоговорКонтрагента;
			ШаблоныПечатиОфисныхДокументовКлиент.УстановитьПризнакПоявленияНовойКомандыПечати(ГруппаКомандПечати);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновлениеФормыЗаказНаряд" И ЭтаФорма.УникальныйИдентификатор = Источник Тогда
		
		СтруктураДанныеНоменклатуры = Новый Структура();
		
		СтруктураДанныеНоменклатуры.Вставить("Номенклатура",);
		СтруктураДанныеНоменклатуры.Вставить("Характеристика",);
		СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", );
		СтруктураДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", );
		
		СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
		СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
		СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанныеНоменклатуры.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанныеНоменклатуры.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
		
		// ДисконтныеКарты
		СтруктураДанныеНоменклатуры.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
		СтруктураДанныеНоменклатуры.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
		// Конец ДисконтныеКарты

		
		Для Каждого ТаблицаДанных Из Параметр Цикл
			
			Для Каждого СтрокаТаблицыДанных Из ТаблицаДанных.Значение Цикл
				НоваяСтрока = Объект[ТаблицаДанных.Ключ].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыДанных);
				
				Если НоваяСтрока.ЭтоНабор Тогда
					// Наборы
					
					СтруктураДанныеНоменклатуры.Номенклатура =  СтрокаТаблицыДанных.Номенклатура;
					СтруктураДанныеНоменклатуры.Характеристика = СтрокаТаблицыДанных.Характеристика;
					СтруктураДанныеНоменклатуры.ТипНоменклатуры = СтрокаТаблицыДанных.ТипНоменклатуры;
					СтруктураДанныеНоменклатуры.ЕдиницаИзмерения = СтрокаТаблицыДанных.ЕдиницаИзмерения;

					ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, НоваяСтрока, СтруктураДанныеНоменклатуры);

					СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
					
					ЗаменитьСтрокуДаннымиНабора(ЭтотОбъект, ТаблицаДанных.Ключ, НоваяСтрока, СтруктураДанные);
					
					Продолжить;
					
				КонецЕсли;
				
				Если НоваяСтрока.Свойство("Спецификация") Тогда 
					НоваяСтрока.Спецификация = СпецификацияПоУмолчанию(НоваяСтрока.Номенклатура,
						НоваяСтрока.Характеристика);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТаблицаДанных.Ключ = "Материалы" Тогда
				ЗаполнитьНомераСтрокТаблицаМатериалы(Объект.Материалы);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаполнитьПризнакиИспользованияХарактеристик();
		СброситьФлагСкидкиРассчитаныСервер("ОбработкаПодбора");
		ДействияПослеЧтенияОбъекта();
		
		ИмяТЧ = "Запасы";
		
		Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТч] Цикл
			РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТч,СтрокаТабличнойЧасти);
		КонецЦикла;
		
		Если РежимОстаткиИРезервы Тогда
			ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	// Наборы
	Если НаборыКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Источник) Тогда
		
		Если ИмяТабличнойЧасти = "Работы" Тогда
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("НоменклатураНабора", Параметр.НоменклатураНабора);
			СтруктураОтбора.Вставить("ХарактеристикаНабора", Параметр.ХарактеристикаНабора);
			Строки = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
			Для каждого Стр Из Строки Цикл
				Элементы.Работы.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
				ТабличныеЧастиУНФКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "Материалы");
				ТабличныеЧастиУНФКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "Исполнители");
			КонецЦикла; 
		КонецЕсли; 
		
		ОбновитьСоставНабора(Параметр.НоменклатураНабора, Параметр.ХарактеристикаНабора, Параметр.Количество, 
			Параметр.Цена, Параметр.СоставНабора);
		
		Если ИмяТабличнойЧасти = "Работы" Тогда
			ВыполнитьДействияПослеУдаленияСтрокиРаботы();
		Иначе
			ВыполнитьДействияПослеУдаленияСтрокиТовары();
		КонецЕсли;
		
		ЗаполнитьПризнакиИспользованияХарактеристик();
		
	КонецЕсли;
	// Конец Наборы
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовУНФКлиент.ОбработчикОповещенияФормаДокумента(ИмяСобытия,ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	// ИнтеграцияГосИС
	СобытияФормИСУНФКлиент.ОбработкаНавигационнойСсылки(ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	// Конец ИнтеграцияГосИС
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// ИнтеграцияГосИС
	СобытияФормИСУНФ.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец ИнтеграцияГосИС
	
	СформироватьНаименованияМатериаловИИсполнителей();
	
	Элементы.ВариантЗавершенияРасширеннаяПодсказка.Заголовок = СтрШаблон(НСтр("ru='Предыдущее состояние: %1'"),
		СостоянияЗаказов.ПолучитьСостояниеЗаказаПередЗавершением(
			ТекущийОбъект.Ссылка,
			Справочники.СостоянияЗаказНарядов.Завершен));
			
	Если Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Объект.ПоложениеДокументаПоступления = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
	КонецЕсли;
			
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ДействияПослеЧтенияОбъекта();
	Элементы.ЗНГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокОплаты(Объект.СпособЗачетаПредоплаты, Объект.Предоплата);
	
	// Ресурсы
	ПланированиеРесурсовУНФ.ПерезаполнитьСлужебныеРеквизитыТаблицыРесурсов(Объект.РесурсыПредприятия);
	
	// Остатки и Резервы
	ПроверитьЗаполнениеСтруктурнойЕдиницыВТабличныхЧастях();
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,Истина);
	
	Если ЗначениеЗаполнено(ДатаПриСозданииНаСервере) Тогда
		// Чтение в открытой форме
		УстановитьВидимостьОтПользовательскихНастроек(Объект, ЭтотОбъект);
	КонецЕсли; 
	
	// Обновим реквизиты формы
	ЭтотОбъект.Контрагент = Объект.Контрагент;
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
	// ЭДО
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.КомандыЭДО_ПриЧтенииФормыДокумента(ЭтотОбъект);
	// Конец ЭДО
	
	// Прослеживаемость
	Если КэшЗначений = Неопределено Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	КэшЗначений.Вставить("РеализацияВЕАЭС", Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Объект.Контрагент));
	РеализацияВЕАЭС = КэшЗначений.РеализацияВЕАЭС;
	ОбновитьОтображениеПрослеживаемости(); 
	// Конец Прослеживаемость
	
	Если Не КэшЗначений.Свойство("СчетФактураСсылка") Тогда
		СчетФактураСсылка = СчетаФактурыУНФ.ПолучитьПодчиненныйСчетФактуру(Объект.Ссылка, Ложь);
		КэшЗначений.Вставить("СчетФактураСсылка", ?(ТипЗнч(СчетФактураСсылка) = Тип("Структура"), СчетФактураСсылка.Ссылка, Неопределено));
	КонецЕсли;
	
	Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(КэшЗначений.СчетФактураСсылка,,, Объект.ЭтоУниверсальныйДокумент);
	
	ДоступенОрдерныйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныйСклад");
	УчетОстатковПоСкладскимОрдерам = УчетОстатковВРазрезеСкладскихОрдеров();
	УстановитьВидимостьДокументаПоступления(ЭтаФорма);
	
	КэшЗначений.Вставить("ЗапретКомиссионныхПартийБезВладельца", Константы.ЗапретКомиссионныхПартийБезВладельца.Получить());
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	УправлениеНебольшойФирмойКлиент.УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП, Истина);
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("ПроведениеДокументЗаказНаряд");
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	КэшЗначений.МодифицированностьФормы = Модифицированность;
	
	УдалитьОтмененныеЗапасы();
	
	// АвтоматическиеСкидки
	СкидкиРассчитаныПередЗаписью = Ложь;
	// Если документ проводится, проверим рассчитанность скидок.
	Если ИспользоватьАвтоматическиеСкидки Тогда
		
		Если Не Объект.СкидкиРассчитаны И СкидкиИзменились() Тогда
			РассчитатьСкидкиНаценкиКлиент();
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Рассчитаны автоматические скидки (наценки).'");
			Сообщение.КлючДанных = Объект.Ссылка;
			Сообщение.Сообщить();
			
			СкидкиРассчитаныПередЗаписью = Истина;
		Иначе
			Объект.СкидкиРассчитаны = Истина;
			ОбновитьКартинкуАвтоСкидкиПослеЗаписи = Истина;
		КонецЕсли;
		
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ТекстСообщения = "";
		Справочники.ДоговорыКонтрагентов.ПроверитьСоответствиеДоговораУсловиямДокумента(
			ТекстСообщения, 
			ТекущийОбъект.Договор, 
			ТекущийОбъект.Ссылка, 
			ТекущийОбъект.Организация, 
			ТекущийОбъект.Контрагент, 
			Отказ,
			ТекущийОбъект.ВидОперации);
		
		Если ТекстСообщения <> "" Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Если Отказ Тогда
				Сообщение.Текст = СтрШаблон(НСтр("ru = 'Документ не проведен. %1'"), ТекстСообщения);
			Иначе
				Сообщение.Текст = ТекстСообщения;
			КонецЕсли;
			
			Если Отказ Тогда
				Сообщение.ПутьКДанным = "Объект";
				Сообщение.Поле = "Договор";
				Сообщение.Сообщить();
				Возврат;
			Иначе
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
		
		Если УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройкиЗачетаАвансов() = ПредопределенноеЗначение("Перечисление.ДаНет.Да")
			И Элементы.ЗНГруппаПредоплата.Доступность
			И ТекущийОбъект.Предоплата.Количество() = 0
			И ТекущийОбъект.СпособЗачетаПредоплаты = СпособыЗачетаВручную Тогда
			ЗаполнитьПредоплату(ТекущийОбъект);
		КонецЕсли;
	КонецЕсли;
	
		// Отмена товаров, услуг
	Если РежимРедактированияЗапасов Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ВерсионированиеОбъектовКомментарийКВерсии", НСтр("ru = '#Были отменены товары, услуги'"));
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ИгнорироватьПроверкуДатыЗапрета");
		РежимРедактированияЗапасов = Ложь;
	КонецЕсли;

	ДополнитьДанныеОтмененныхТоваров(ТекущийОбъект);
	//Конец отмена товаров, услуг

	ТекущийОбъект.ДополнительныеСвойства.Вставить("ТаблицаДокументовДляИзменения", ТаблицаДокументовДляИзменения);
	
	// АвтоматическиеСкидки
	Если ОбновитьКартинкуАвтоСкидкиПослеЗаписи Тогда
		Элементы.РаботыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
		Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
		ОбновитьКартинкуАвтоСкидкиПослеЗаписи = Ложь;
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность", Модифицированность);
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение И РежимОстаткиИРезервы Тогда
		ПроверитьПоложениеСкладаПриПроведении(ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Установка заголовка формы.
	Заголовок = "";
	АвтоЗаголовок = Истина;
	
	СформироватьНаименованияМатериаловИИсполнителей();
	
	// Отмена товаров, услуг
	ЗаполнитьДанныеПоОтменеТоваров();
	НастроитьЭлементыОтменыТоваров();
	// Конец Отмена товаров, услуг
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	ТекущийОбъект.ДополнительныеСвойства.Свойство("ВерсияПодчиненногоСчетФактуры", КэшЗначений.ВерсияПодчиненногоСчетФактуры);
	
	Элементы.ВариантЗавершенияРасширеннаяПодсказка.Заголовок = СтрШаблон(НСтр("ru='Предыдущее состояние: %1'"),
		СостоянияЗаказов.ПолучитьСостояниеЗаказаПередЗавершением(
			ТекущийОбъект.Ссылка,
			Справочники.СостоянияЗаказНарядов.Завершен));
	
	// ГрупповоеИзменениеСтрок
	Если Элементы.ГруппаЗапасыИзменениеСтрок.Видимость Тогда
		УстановитьПометку("Запасы", Истина);
	КонецЕсли;
	Если Элементы.ЗНГруппаРаботыИзменениеСтрок.Видимость Тогда
		УстановитьПометку("Работы", Истина);
	КонецЕсли;
	// Конец ГрупповоеИзменениеСтрок
	
	// ЭДО
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец ЭДО
	
	//Ячейки
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	// Конец Ячейки
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ДействияПослеЧтенияОбъекта(); 
	
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы");
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Работы");
	
	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);
	// Конец Обсуждения
	
	// Взаиморасчеты
	ДатаПриСозданииНаСервере = Объект.Дата;
	
	Если ТекущийОбъект.Проведен ИЛИ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ТаблицаДокументовДляИзменения.Очистить();
	КонецЕсли;
	
	Если Элементы.ЗНСтраницы.ТекущаяСтраница = Элементы.ЗНГруппаПредоплата
		И Элементы.СтраницыРасчетовСКонтрагентом.ТекущаяСтраница = Элементы.СтраницаПросмотр Тогда
		ИстинаПослеЗаписиНаСервере = Истина;
		РасчетыРаботаСФормамиВызовСервера.ЗаполнитьТаблицуПросмотраНаСервере(ЭтотОбъект, ИстинаПослеЗаписиНаСервере);
	КонецЕсли;
	// Конец Взаиморасчеты
	
	// ИнтеграцияГосИС
	СобытияФормИСУНФ.ПослеЗаписиНаСервере(ЭтаФорма);
	// Конец ИнтеграцияГосИС
	
	// Ресурсы
	ПланированиеРесурсовУНФ.ПерезаполнитьСлужебныеРеквизитыТаблицыРесурсов(Объект.РесурсыПредприятия);
	
	// Остатки и резервы
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,Истина);
	ОбновитьОтображениеКолонокВРазрезеЗапасовСервер();
	
	АссистентУправления.ПослеЗаписиНаСервере(ТекущийОбъект);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Если Объект.ЭтоУниверсальныйДокумент 
		И СостоянияЗаказовВызовСервера.ЭтоСостояниеВыполненияЗаказНаряда(Объект.СостояниеЗаказа, Объект.ВидЗаказа) 
		И Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда

		СчетФактураСсылка = СчетаФактурыУНФ.ПолучитьПодчиненныйСчетФактуру(Объект.Ссылка, Ложь);
		СтруктураСистемаНалогообложения = Справочники.Организации.ПолучитьСистемуНалогообложения(Объект.Дата, Объект.Организация);
		
		Если СчетФактураСсылка = Неопределено 
			И СтруктураСистемаНалогообложения.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
			ПараметрыСчетФактуры = СчетаФактурыУНФ.СоздатьСчетФактуру(Объект.Ссылка, Объект.Дата);
			Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(ПараметрыСчетФактуры.Ссылка,,, Истина);
			КэшЗначений.Вставить("СчетФактураСсылка", ?(ТипЗнч(ПараметрыСчетФактуры) = Тип("Структура"), ПараметрыСчетФактуры.Ссылка, Неопределено));
		КонецЕсли;
	КонецЕсли;
	
	Справочники.ДоговорыКонтрагентов.СохранитьСпособВыставленияДокументов(ТекущийОбъект.Договор, ТекущийОбъект.ЭтоУниверсальныйДокумент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	Если КэшЗначений.МодифицированностьФормы = Истина
		И КэшЗначений.ВерсияПодчиненногоСчетФактуры = "1.6.11" Тогда
		
		ТекстВопроса = НСтр("ru = 'В накладную были внесены изменения.
			|Требуется самостоятельно поправить подчиненный документ счет-фактура'");
		
		ПоказатьПредупреждение(, ТекстВопроса, 0, НСтр("ru ='Счет-фактура'"));
		
	КонецЕсли;
	
	Оповестить("Запись_ЗаказНаряды", Объект.Ссылка, ЭтотОбъект);
	Оповестить("ОповещениеОбИзмененииДолга");
	
	Если ОткрытИзПланировщика Тогда Оповестить("ОбновитьПланировщик") КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Событие) И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		СтруктураОповещения = Новый Структура("СсылкаНаЗаказНаряд, СсылкаНаСобытие", Объект.Ссылка, Объект.Событие);
		Оповестить("ПроведениеЗаказНаряда", СтруктураОповещения, ЭтотОбъект);
	КонецЕсли;
	
	// Наборы
	ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.Работы, Объект.ДобавленныеНаборы); 
	// Конец Наборы
	
	// Подарочные сертификаты
	Если Объект.ВалютаДокумента <> УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеКонстанты("НациональнаяВалюта")
		И ЕстьСертификаты("Запасы") Тогда
		
		Если КэшЗначений.ВыводитьСоветОплатаСертификатомВВалюте Тогда
		
			ПараметрыСовета = Новый Структура;
			ПараметрыСовета.Вставить("Заголовок", НСтр("ru = 'Предупреждение'"));
			ПараметрыСовета.Вставить("ТекстСообщения", НСтр("ru = 'Оплата сертификатом будет возможна только в национальной валюте.'"));
			ПараметрыСовета.Вставить("ВидимостьБольшеНеПоказывать", Истина);
			ПараметрыСовета.Вставить("ИмяПользовательскойНастройки", "ВыводитьСоветОплатаСертификатомВВалюте");
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыводаСовета", ЭтотОбъект, ПараметрыСовета);
			ОткрытьФорму("ОбщаяФорма.ФормаСообщения", ПараметрыСовета, ЭтаФорма, Истина, , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ВалютаДокумента <> НациональнаяВалюта И ЕстьКорректировкиПоДокументу(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru ='По документу создана корректировка, необходимо проверить ее актуальность'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Прослеживаемость
	Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	КонецЦикла;
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьЗаполнениеОбязательныхРеквизитов(Отказ);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
// Процедура обрабатывает результаты открытия формы совета пользователю
//
Процедура ПослеВыводаСовета(РезультатЗакрытия, ПараметрыСовета) Экспорт
	
	Если ПараметрыСовета.ВидимостьБольшеНеПоказывать 
		И ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		КэшЗначений.Вставить(ПараметрыСовета.ИмяПользовательскойНастройки, РезультатЗакрытия.ЗначениеПользовательскойНастройки);
		ПерсональныеНастройкиВызовСервера.Установить(РезультатЗакрытия.ЗначениеПользовательскойНастройки,
			ПараметрыСовета.ИмяПользовательскойНастройки);
		
	КонецЕсли;
	
КонецПроцедуры // ПослеВыводаСовета()

&НаСервере
Функция ЕстьСертификаты(ИмяТЧ)
	
	Возврат РаботаСПодарочнымиСертификатами.ЕстьСертификаты(Объект[ИмяТЧ].Выгрузить());
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДанныеДляИзмененияДаты = ДокументыУНФКлиент.ДанныеДляИзмененияДаты(ЭтотОбъект, Объект);
	Если ДанныеДляИзмененияДаты.ДатаНеМенялась Тогда
		Возврат;
	КонецЕсли;
	
	ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты);
	
	ЦеныИВалютаКлиент.ПересчитатьКурсКратностьВалютыРасчетов(ДанныеДляИзмененияДаты.ВалютаКурсКратность, Объект,
		ЭтотОбъект);
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	
	ПересчитатьПлатежныйКалендарь();
	ОбновитьПодвалФормы();
	
	// ДисконтныеКарты
	ПересчитатьПроцентСкидкиПриИзмененииДатыДокумента();
	// Конец ДисконтныеКарты
	
	ОпределитьВидимостьИУстановитьНастройкиУчетаВНалогообложении();
	
	// АвтоматическиеСкидки
	ДатаДокументаИзмененаВручную = Истина;
	СброситьФлагСкидкиРассчитаныКлиент("ДатаПриИзменении");
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ОрганизацияПриИзмененииНаСервере();
	ОбработатьИзменениеДоговора();
	ПересчитатьПлатежныйКалендарь();
	ОбновитьПодвалФормы();
	ОчиститьКалькуляцию();
	ЗаполнитьРеквизитыПечати();

	УстановитьОтображениеГрузоперевозки();	
	СброситьФлагСкидкиРассчитаныКлиент("ИзменениеВторостепенногоРеквизита", "Организация");	
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		
		ДанныеДоговора = ДанныеКонтрагентаДляИзменения();
		ЗаполнитьПараметрыРасчетовСКонтрагентом();
		УстановитьВидимостьДоговора();
		
		ДоговорПередИзменением = Объект.Договор;
		Объект.Договор = ДанныеДоговора.Договор;
		
		Объект.ЭтоУниверсальныйДокумент = ДанныеДоговора.ЭтоУниверсальныйДокумент;
		Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(КэшЗначений.СчетФактураСсылка,,, Объект.ЭтоУниверсальныйДокумент);
		
		// Прослеживаемость
		РеализацияВЕАЭС = ДанныеДоговора.РеализацияВЕАЭС;
		КэшЗначений.Вставить("РеализацияВЕАЭС", РеализацияВЕАЭС);
		// Конец Прослеживаемость
		
		Если Объект.Договор <> ДоговорПередИзменением 
			И Объект.СпособЗачетаПредоплаты <> ДанныеДоговора.СпособЗачетаПредоплаты Тогда
			Объект.СпособЗачетаПредоплаты = ДанныеДоговора.СпособЗачетаПредоплаты;
			СпособЗачетаПредоплатыПриИзмененииНаСервере();
		КонецЕсли;
		
		Объект.КонтактноеЛицоПодписант = ДанныеДоговора.КонтактноеЛицоПодписант;
		ОбработатьИзменениеДоговора(ДанныеДоговора);
		
		Если ДанныеДоговора.Свойство("Проект") Тогда
			Объект.Проект = ДанныеДоговора.Проект;
		КонецЕсли;
		
		ЗаполнитьПоляДоставки(Объект, Элементы.АдресДоставки);
		
	Иначе
		
		Объект.Договор = Договор; // Восстанавливаем автоматически очищенный договор.
		
	КонецЕсли;
	
	// АвтоматическиеСкидки
	СброситьФлагСкидкиРассчитаныКлиент("КонтрагентПриИзменении");
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
	УстановитьОтображениеГрузоперевозки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговора();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	СброситьФлагСкидкиРассчитаныКлиент("ИзменениеВторостепенногоРеквизита", "Договор");	
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбораДоговора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, Объект.Договор, Объект.ВидОперации);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурнаяЕдиницаПродажиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаПродажи) Тогда
		
		Если Не ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаРезерв) Тогда
			
			СтруктураДанные = Новый Структура();
			СтруктураДанные.Вставить("Подразделение", Объект.СтруктурнаяЕдиницаПродажи);
			
			СтруктураДанные = ПолучитьДанныеСтруктурнаяЕдиницаПриИзменении(СтруктураДанные);
			
			Объект.СтруктурнаяЕдиницаРезерв = СтруктураДанные.СтруктурнаяЕдиницаЗапасов;
			Объект.Ячейка = СтруктураДанные.ЯчейкаЗапасов;
				
		КонецЕсли;
		
	Иначе
		
		Элементы.ЗНЯчейкаЗапасов.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНПроектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивОтбора = Новый Массив;
	
	ПустаяСсылкаНаПроект = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	
	МассивОтбора.Добавить(ПустаяСсылкаНаПроект);
	МассивОтбора.Добавить(Объект.Контрагент);
	
	СтруктураОтбора = Новый Структура;
	
	СтруктураОтбора.Вставить("Отбор", Новый Структура("Контрагент", МассивОтбора));
	СтруктураОтбора.Вставить("РежимВыбора", Истина);
	СтруктураОтбора.Вставить("МножественныйВыбор", Ложь);
	СтруктураОтбора.Вставить("ЗакрыватьПриВыборе", Истина);
	
	ОткрытьФорму("Справочник.Проекты.ФормаВыбора", СтруктураОтбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНСтруктурнаяЕдиницаЗапасовПриИзменении(Элемент)
	
	ТребуетсяОбновлениеТЧПоОстаткамМатериалы = РежимОстаткиИРезервы И Объект.ИспользоватьМатериалы;
	ТребуетсяОбновлениеТЧПоОстаткамЗапасы = РежимОстаткиИРезервы И Объект.ИспользоватьТовары;
	ЗаполнитьСкладВТабличныхЧастях();
	ОбработатьИзменениеСтруктурнойЕдиницыЗапасовНаСервере();
	
	Если КэшЗначений.ИспользоватьМинимальныеЦены Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Работы Цикл 	
			
			РассчитатьСуммуВСтрокеТабличнойЧасти("Работы", СтрокаТабличнойЧасти); 			
			
		КонецЦикла;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл   		
			
			
			РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", СтрокаТабличнойЧасти); 	
			
			
		КонецЦикла;  
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументПоступленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Организация", Объект.Организация);
	СтруктураОткрытия.Вставить("ТолькоПоДокументам", Истина);
	СтруктураОткрытия.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиницаРезерв);
	СтруктураОткрытия.Вставить("ТолькоПоОрдерам", Истина);
	СтруктураОткрытия.Вставить("КПоступлению", Ложь);
	
	ОткрытьФорму("ОбщаяФорма.ПодборПоОстаткамТоваровКПоступлениюРеализации", СтруктураОткрытия, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНЯчейкаЗапасовПриИзменении(Элемент)
	
	ЗаполнитьСкладВТабличныхЧастях();
	
КонецПроцедуры

&НаКлиенте
Процедура СчитатьДисконтнуюКартуНажатие(Элемент)
	
	СтруктураПараметров = Новый Структура("Контрагент", Объект.Контрагент);
	ОписаниеОповещения = Новый ОписаниеОповещения("СчитатьДисконтнуюКартуНажатиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ДисконтныеКарты.Форма.СчитываниеДисконтнойКарты", СтруктураПараметров, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьБонуснуюПрограмму(Знач Объект, СтруктураПараметры)
	
	Если Не ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		Если Не Объект.БонусныеБаллыКНачислению.Количество() = 0 Тогда
			Объект.БонусныеБаллыКНачислению.Очистить();
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.Работы.Количество() = 0 Тогда
		Если Не Объект.БонусныеБаллыКНачислению.Количество() = 0 Тогда
			Объект.БонусныеБаллыКНачислению.Очистить();
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	РеквизитыБП = РаботаСБонусами.РеквизитыБонуснойПрограммы(Объект.ДисконтнаяКарта);
	
	Если РеквизитыБП.БонуснаяПрограмма.Пустая() Тогда
		Если Не Объект.БонусныеБаллыКНачислению.Количество() = 0 Тогда
			Объект.БонусныеБаллыКНачислению.Очистить();
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Если РеквизитыБП.НеНачислятьПриОплатеБонусами Тогда
		Если РаботаСБонусами.ЕстьОплатаБонусами(Объект.Предоплата) Тогда
			Объект.БонусныеБаллыКНачислению.Очистить();
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметры.Вставить("БонуснаяПрограмма", РеквизитыБП.БонуснаяПрограмма);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВидЗаказаПриИзменении(Элемент)
	
	ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
	ТребуетсяОбновлениеТЧПоОстаткамМатериалы = РежимОстаткиИРезервы И Объект.ИспользоватьМатериалы;
	ТребуетсяОбновлениеТЧПоОстаткамЗапасы = РежимОстаткиИРезервы И Объект.ИспользоватьТовары;
	ВидЗаказаПриИзмененииСервер();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЗаказаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.ВидыЗаказНарядов"), ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаказаПриИзменении(Элемент)
 	
	Если Объект.СостояниеЗаказа = ПредопределенноеЗначение("Справочник.СостоянияЗаказНарядов.Завершен") Тогда
		Объект.ВариантЗавершения = ПредопределенноеЗначение("Перечисление.ВариантыЗавершенияЗаказа.Успешно");
		Элементы.ЗНСтраницы.ТекущаяСтраница = Элементы.СтраницаЗавершениеЗаказа;
		
		#Если ВебКлиент Тогда
			// В веб-клиенте установка текущей страницы должна происходить после включения видимости у страницы
			ПодключитьОбработчикОжидания("УстановитьТекущейСтраницейЗавершениеЗаказа", 0.1, Истина);
		#КонецЕсли
		
	КонецЕсли;
	
	ЭтотОбъект.ЗаказНарядВСостоянииВыполнения = СостоянияЗаказовВызовСервера.ЭтоСостояниеВыполненияЗаказНаряда(Объект.СостояниеЗаказа, Объект.ВидЗаказа);
	ТребуетсяОбновлениеТЧПоОстаткамМатериалы = РежимОстаткиИРезервы И Объект.ИспользоватьМатериалы;
	ТребуетсяОбновлениеТЧПоОстаткамЗапасы = РежимОстаткиИРезервы И Объект.ИспользоватьТовары;
	УправлениеФормой();
	
	ОбновитьОтображениеКолонокВРазрезеЗапасов(,Не РежимОстаткиИРезервы);
	НастроитьЭлементыОтменыТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаказаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния Тогда
		ПараметрыПолученияДанных.Вставить("ВидЗаказа", Объект.ВидЗаказа);
		ДанныеВыбораСостояния = ПолучитьДанныеВыбора(Тип("СправочникСсылка.СостоянияЗаказНарядов"), ПараметрыПолученияДанных);
		ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Ложь;
	КонецЕсли;
	
	ДанныеВыбора = ДанныеВыбораСостояния;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНСтартПриИзменении(Элемент)
	
	Если Объект.Старт > Объект.Финиш Тогда
		Объект.Старт = ПриИзмененииСтарт;
		ТекстСообщения = НСтр("ru='Дата старта не может быть больше даты финиша.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	Иначе
		ПриИзмененииСтарт = Объект.Старт;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНФинишПриИзменении(Элемент)
	
	Если Час(Объект.Финиш) = 0 И Минута(Объект.Финиш) = 0 Тогда
		Объект.Финиш = КонецДня(Объект.Финиш);
	КонецЕсли;
	Если Объект.Финиш = КонецМесяца(Объект.Финиш) Тогда
		// Возможен конфликт с закрытием месяца
		Объект.Финиш = Объект.Финиш - 60;
	КонецЕсли; 
	
	Если Объект.Финиш < Объект.Старт Тогда
		Объект.Финиш = ПриИзмененииФиниш;
		ТекстСообщения = НСтр("ru='Дата финиша не может быть меньше даты старта.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	Иначе
		ПриИзмененииФиниш = Объект.Финиш;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРаботПриИзменении(Элемент)
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Работы Цикл
		СтрокаТабличнойЧасти.ВидРабот = Объект.ВидРабот;
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен();
	КонецЕсли;
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДенежныхСредствПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапланироватьОплатуПриИзменении(Элемент)
	
	Если Объект.ЗапланироватьОплату И Объект.ПлатежныйКалендарь.Количество() = 0 Тогда
		
		НоваяСтрока = Объект.ПлатежныйКалендарь.Добавить();
		НоваяСтрока.ДатаОплаты = Объект.Дата + ПолучитьСрокОплатыПокупателя(Объект.Договор) * 86400;
		НоваяСтрока.ПроцентОплаты = 100;
		НоваяСтрока.СуммаОплаты = Объект.Запасы.Итог("Всего") + Объект.Работы.Итог("Всего");
		НоваяСтрока.СуммаНДСОплаты = Объект.Запасы.Итог("СуммаНДС") + Объект.Работы.Итог("СуммаНДС");
		
	ИначеЕсли НЕ Объект.ЗапланироватьОплату И Объект.ПлатежныйКалендарь.Количество() > 0 Тогда
		
		Объект.ПлатежныйКалендарь.Очистить();
		
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Договор) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбораБанковскогоСчета(Объект.Договор, Объект.Организация, НациональнаяВалюта);
	Если ПараметрыФормы.РасчетыВУсловныхЕдиницах Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.БанковскиеСчета.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокВзаиморасчетовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСФормойДокументаКлиент.ОткрытьОтчетВзаиморасчетыСКонтрагентом(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗавершенияПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРеквизитыПечатиНажатие(Элемент)
	ОткрытьФормуРеквизитыПечати();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовПодвалаФормы

&НаКлиенте
Процедура СчетФактураНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СчетаФактурыУНФКлиент.ОткрытьСчетФактуру(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтоУниверсальныйДокументПриИзменении(Элемент)
	Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(КэшЗначений.СчетФактураСсылка,,, Объект.ЭтоУниверсальныйДокумент);
КонецПроцедуры

&НаКлиенте
Процедура СкидкаПроцентПриИзменении(Элемент)
	
	РаботыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки");
	РаботыИзменениеСтрокОбъектИзмененийРеквизит = "ПроцентСкидкиНаценки";
	РаботыИзменениеСтрокЗначение = СкидкаПроцент;
	
	ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки");
	ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "ПроцентСкидкиНаценки";
	ЗапасыИзменениеСтрокЗначение = СкидкаПроцент;
	
	Если Объект.Работы.Количество()>0 Тогда
		ОбработатьТаблицу("Работы");
	КонецЕсли;
	Если Объект.Запасы.Количество()>0 Тогда
		ОбработатьТаблицу("Запасы");
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаСуммаПриИзменении(Элемент)
	
	ВсегоРаботы = Объект.Работы.Итог("Всего");
	ВсегоЗапасы = Объект.Запасы.Итог("Всего");
	Если ВсегоРаботы=0 И ВсегоЗапасы=0 Тогда
		ВсегоРаботы = Объект.Работы.Итог("СуммаСкидкиНаценки");
		ВсегоЗапасы = Объект.Запасы.Итог("СуммаСкидкиНаценки");
	КонецЕсли;
	Если ВсегоРаботы=0 И ВсегоЗапасы=0 Тогда
		Возврат;
	КонецЕсли; 
	ПроцентСкидкиРаботы = ВсегоРаботы / (ВсегоРаботы + ВсегоЗапасы);
	ПроцентСкидкиЗапасы = 1 - ПроцентСкидкиРаботы;
	
	РаботыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСкидкуСуммой");
	РаботыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
	РаботыИзменениеСтрокЗначение = СкидкаСумма * ПроцентСкидкиРаботы;
	
	ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСкидкуСуммой");
	ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
	ЗапасыИзменениеСтрокЗначение = СкидкаСумма * ПроцентСкидкиЗапасы;

	СтруктураОповещения = Новый Структура;
	СтруктураОповещения.Вставить("СуммаДоРасчета", СкидкаСумма);
	
	ОбработатьТаблицу("Работы");
	ОбработатьТаблицу("Запасы");

	СтруктураОповещения.Вставить("СуммаПослеРасчета", СкидкаСумма);                             	
	ЦенообразованиеКлиент.ПоказатьОповещениеПользователяОКорректировкеЦены(СтруктураОповещения);

	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ЗапасыПричинаОтменыПриИзменении(Элемент)
	
	ТекущийЗапас = Элементы.Запасы.ТекущиеДанные;
	Если ТекущийЗапас = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущийЗапас.Отменен = 0 Тогда
		ОтменитьВернутьЗапасы(ТекущийЗапас, "Запасы");
	КонецЕсли;
	
	ТекущийЗапас.ПричинаОтменыДатаЗапрета = Строка(ТекущийЗапас.ПричинаОтмены);
	
	СвязанныеСтроки = Объект.ОтмененныеЗапасы.НайтиСтроки(Новый Структура("КлючСвязиОтмененные", ТекущийЗапас.КлючСвязиОтмененные));
	СвязаннаяСтрока = СвязанныеСтроки[0];
	
	СвязаннаяСтрока.ПричинаОтмены = ТекущийЗапас.ПричинаОтмены;
	ВыбраннаяПричинаОтменыЗапаса = ТекущийЗапас.ПричинаОтмены;
	Модифицированность = Истина;
	ОтображатьГруппуОтмененных = Истина;
	
	НастроитьЭлементыОтменыТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	ЭтоНоваяСтрокаЗапасы = Ложь;
	
	// ИнтеграцияГосИС
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПриОкончанииРедактирования");
	ДополнительныеПараметры.Вставить("ОповещениеСерверногоВызова", "ОповещениеПриОкончанииРедактированияТабличнойЧастиИС");
	СобытияФормИСУНФКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "ТабличнаяЧасть", ДополнительныеПараметры);
	// Конец ИнтеграцияГосИС
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПослеУдаления(Элемент)
	
	ВыполнитьДействияПослеУдаленияСтрокиТовары();
	
	// ИнтеграцияГосИС
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПослеУдаления");
	ДополнительныеПараметры.Вставить("ОповещениеСерверногоВызова", "ОповещениеПриОкончанииРедактированияТабличнойЧастиИС");
	СобытияФормИСУНФКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "ТабличнаяЧасть", ДополнительныеПараметры);
	// Конец ИнтеграцияГосИС
	
	УстановитьВидимостьДокументаПоступления(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	// Наборы
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если Копирование И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураНабора) Тогда
		// Состав набора не копируется
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	// Конец Наборы
	
	Если Копирование Тогда
		
		Если РежимОстаткиИРезервы Тогда
			
			Отказ = Истина;
			
			НоваяСтрока = Объект.Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
			
			НоваяСтрока.Резерв = 0;
			
			СтруктураДанные = Новый Структура;
			СтруктураДанные.Вставить("Организация", Компания);
			СтруктураДанные.Вставить("Номенклатура", 	НоваяСтрока.Номенклатура);
			СтруктураДанные.Вставить("Характеристика", 	НоваяСтрока.Характеристика);
			СтруктураДанные.Вставить("Партия", 	НоваяСтрока.Партия);
			СтруктураДанные.Вставить("ИспользоватьХарактеристики", НоваяСтрока.ИспользоватьХарактеристики);
			СтруктураДанные.Вставить("ИспользоватьПартии", НоваяСтрока.ИспользоватьПартии);
			
			ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные,,,Истина);
			
		КонецЕсли;
		
		ИтогВсего = Объект.Работы.Итог("Всего") + Объект.Запасы.Итог("Всего");
		ИтогСуммаНДС = Объект.Работы.Итог("СуммаНДС") + Объект.Запасы.Итог("СуммаНДС");
		КопированиеСтрокиТовары = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриИзменении(Элемент)
	
	Если КопированиеСтрокиТовары = Неопределено ИЛИ НЕ КопированиеСтрокиТовары Тогда
		ОбновитьПодвалФормы();
	Иначе
		КопированиеСтрокиТовары = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьДокументаПоступленияПриИзмененииТабличнойЧасти(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьСбросКоличества И СбрасыватьКоличество
		И СтрокаТабличнойЧасти.Количество <> НовоеКоличествоПриИзмененииНоменклатуры Тогда
		
		ДопПараметр = Новый Структура();
		ДопПараметр.Вставить("Элемент", Элемент);
		ДопПараметр.Вставить("Количество", СтрокаТабличнойЧасти.Количество);
		Оповещение = Новый ОписаниеОповещения("ЗапасыПодтверждениеСбросаКоличестваЗавершение", ЭтотОбъект, ДопПараметр);
		ОткрытьФорму("ОбщаяФорма.ПодтверждениеСбросаКоличества", , , , , , Оповещение);
		
	Иначе
		
		Если СбрасыватьКоличество Тогда
			НовоеКоличество = НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
		ЗапасыНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПодтверждениеСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗапрашиватьСбросКоличества = Результат.ЗапрашиватьСбросКоличества;
		Если НЕ ЗапрашиватьСбросКоличества Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		КонецЕсли;
		Если Результат.СбрасыватьКоличество Тогда
			НовоеКоличество = Результат.НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = ДополнительныеПараметры.Количество;
		КонецЕсли;
	Иначе
		НовоеКоличество = ДополнительныеПараметры.Количество;
	КонецЕсли;
	
	ЗапасыНоменклатураПриИзмененииПродолжить(ДополнительныеПараметры.Элемент, НовоеКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество, СтрокаТабличнойЧасти = Неопределено, Партия = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	КонецЕсли;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
	СтруктураДанные.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиницаРезерв);
	
	СтруктураПоискаПартииСНДС = Новый Структура("КомиссияСНДС", Истина);
	ЕстьПартииСНДС = Объект.Запасы.НайтиСтроки(СтруктураПоискаПартииСНДС).Количество() > 0;
	СтруктураДанные.Вставить("ЕстьПартииСНДС", ЕстьПартииСНДС);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
		
	КонецЕсли;
	
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	// Конец ДисконтныеКарты
	
	СтруктураДанные.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
	
	СтатусПартии = Новый СписокЗначений;
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
	
	СтруктураДанные.Вставить("СтатусПартии", СтатусПартии);
	
	Если СкладВШапке Тогда
		СтруктураДанные.Вставить("Склад", Объект.СтруктурнаяЕдиницаРезерв);
		СтруктураДанные.Вставить("Ячейка", Объект.Ячейка);
	КонецЕсли;
	
	СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанные);
	
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, СтрокаТабличнойЧасти, СтруктураДанные);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	Если СтруктураДанные.Свойство("МинимальнаяЦена") 
		И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
		СтрокаТабличнойЧасти.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;			
	КонецЕсли;
	
	Если СтруктураДанные.ЭтоНабор И НЕ СтруктураДанные.ИспользоватьХарактеристики Тогда
		
		// Наборы
		ЗаменитьСтрокуДаннымиНабора(ЭтотОбъект, "Запасы", СтрокаТабличнойЧасти, СтруктураДанные);
		
		ЗаполнитьПризнакиИспользованияХарактеристик();
		ОбновитьДоступностьЯчеек();
		ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
		
		// АвтоматическиеСкидки.
		СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
		// Конец АвтоматическиеСкидки
	
		#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
		Элементы.Запасы.ЗакончитьРедактированиеСтроки(Истина);
		#КонецЕсли 
		
	Иначе
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			СтрокаТабличнойЧасти.НоменклатураСсылка = СтрокаТабличнойЧасти.Номенклатура;
		КонецЕсли;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
		СтрокаТабличнойЧасти.НомерГТД = Неопределено;
		СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
		СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		СтрокаТабличнойЧасти.Содержание = "";
		СтрокаТабличнойЧасти.ТипНоменклатурыЗапас = СтруктураДанные.ЭтоЗапас;
		СтрокаТабличнойЧасти.Количество = НовоеКоличество;
		
		Если СтрокаТабличнойЧасти.ТипНоменклатурыЗапас Тогда
			Если СкладВШапке Тогда
				СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
				ЗаполнитьСкладВСтрокеТЧ(СтрокаТабличнойЧасти, СтруктураДанные);
			Иначе
				Если Не (ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв) И ПодборНоменклатурыИзСписка) Тогда
					СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
					ЗаполнитьСкладВСтрокеТЧ(СтрокаТабличнойЧасти, СтруктураДанные);
					ЗапасыСтруктурнаяЕдиницаРезервПриИзменении(Элемент);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
		СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
		СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
		
		Если СтруктураДанные.ИспользоватьХарактеристики Тогда
			Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
				СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
				СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
			Иначе
				СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
			КонецЕсли;
		КонецЕсли;
		
		// Партии
		СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
		СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
				
		Если СтруктураДанные.ИспользоватьПартии Тогда
			Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
				СтрокаТабличнойЧасти.Партия = СтруктураВыбораНоменклатуры.Партия;
				СтруктураВыбораНоменклатуры.Партия = Неопределено;
			Иначе
				СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
			КонецЕсли;
			
			Если Партия <> Неопределено Тогда
				СтрокаТабличнойЧасти.Партия = Партия;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.КомиссияСНДС = СтруктураДанные.КомиссияСНДС;
		КонецЕсли;
		// Конец Партии
		
		СтрокаТабличнойЧасти.УказыватьДокументПоступления = СтруктураДанные.УказыватьДокументПоступления;
		
		// Прослеживаемость
		Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
			СтрокаТабличнойЧасти.ПрослеживаемыйТовар = СтруктураДанные.ПрослеживаемыйТовар;
			СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = СтруктураДанные.ПрослеживаемыйКомплект;
			СтрокаТабличнойЧасти.КодТНВЭД = СтруктураДанные.ТоварнаяНоменклатураВЭД;
		Иначе
			СтрокаТабличнойЧасти.ПрослеживаемыйТовар = Ложь;
			СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = Ложь;
			СтрокаТабличнойЧасти.КодТНВЭД = Неопределено;
		КонецЕсли;
		// Конец Прослеживаемость
		
		СтрокаТабличнойЧасти.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
		
		// Наборы
		СтрокаТабличнойЧасти.ЭтоНабор = СтруктураДанные.ЭтоНабор;
		
		// Серии номенклатуры
		Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
			СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, ТекущиеДанныеСтроки,
				ИспользоватьСерииНоменклатурыОстатки);
		КонецЦикла;

		РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");
		
	КонецЕсли;
	
	ПодборНоменклатурыИзСписка = Ложь;
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
	КонецЕсли;
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
	// Прослеживаемость
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	КонецЕсли;
	// Конец Прослеживаемость
	
	Если СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
		Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС");
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,УчетВалютныхОпераций);
		ТребуетсяИзменениеНалогообложениеНаСНДС = СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС;
		РаботаСНоменклатуройКлиентУНФ.ВывестиОповещениеПользователяОбИзмененииРежимаНалогообложенияНаСДНС(ТребуетсяИзменениеНалогообложениеНаСНДС);
	КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ЗаказНаряд", НастройкиФормыВыбораНоменклатуры, Истина, "Запасы", ВыбранноеЗначение.СтруктураНастроек);
		КонецЕсли;
		
		Если РазрешитьСкладыВТабличныхЧастях Тогда
			Если Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти")
				Или Объект.СтруктурнаяЕдиницаРезерв = ВыбранноеЗначение.Склад
				Или Не ЗначениеЗаполнено(ВыбранноеЗначение.Склад) Тогда
				
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
				
				Если СтрокаТабличнойЧасти.Свойство("СтруктурнаяЕдиницаРезерв") Тогда
					СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = ВыбранноеЗначение.Склад;
				КонецЕсли;
				
				НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
				
			ИначеЕсли ЗначениеЗаполнено(ВыбранноеЗначение.Склад) И Не Объект.СтруктурнаяЕдиницаРезерв = ВыбранноеЗначение.Склад Тогда
				Режим = РежимДиалогаВопрос.ДаНет;
				ПараметрыОповещения = ВыбранноеЗначение;
				Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаСкладВТЧ", ЭтотОбъект, ПараметрыОповещения);
				ПоказатьВопрос(Оповещение, НСтр("ru = 'Выбранный склад отличен от склада в шапке. Отобразить склад в табличной части?'"), Режим, 0);
				СтандартнаяОбработка = Ложь;
				Возврат;
			Иначе
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
				НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
			КонецЕсли;
		Иначе
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
		КонецЕсли;
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаСкладВТЧ(Результат, ПараметрыОповещения) Экспорт
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ПараметрыОповещения);
		ЗапасыНоменклатураПриИзменении(Неопределено);
		НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
		Возврат;
	КонецЕсли;
	
	Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");
	
	УправлениеФормой();
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ПараметрыОповещения);
	
	Если СтрокаТабличнойЧасти.Свойство("СтруктурнаяЕдиницаРезерв") Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = ПараметрыОповещения.Склад;
	КонецЕсли;
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
	
	ЗапасыНоменклатураПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("СтранаПроисхождения", СтрокаТабличнойЧасти.СтранаПроисхождения);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки", 			Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", 		Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", 		Объект.СуммаВключаетНДС);
		
		СтруктураДанные.Вставить("СтавкаНДС", 				СтрокаТабличнойЧасти.СтавкаНДС);
		СтруктураДанные.Вставить("Цена", 					СтрокаТабличнойЧасти.Цена);
		
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
		
	КонецЕсли;
	
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, СтрокаТабличнойЧасти, СтруктураДанные);
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	Если СтруктураДанные.Свойство("МинимальнаяЦена") 
		И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
		СтрокаТабличнойЧасти.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;			
	КонецЕсли;
	
	Если СтруктураДанные.ЭтоНабор Тогда
		
		// Наборы
		ЗаменитьСтрокуДаннымиНабора(ЭтотОбъект, "Запасы", СтрокаТабличнойЧасти, СтруктураДанные);
		
		ЗаполнитьПризнакиИспользованияХарактеристик();
		
		// АвтоматическиеСкидки.
		СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
		// Конец АвтоматическиеСкидки
		
		Если РежимОстаткиИРезервы Тогда
			ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
		КонецЕсли;
		
	Иначе
		
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
		СтрокаТабличнойЧасти.Содержание = "";
		СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
		СтрокаТабличнойЧасти.НомерГТД = СтруктураДанные.НомерГТД;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");
		
		Если РежимОстаткиИРезервы Тогда
			ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,СтрокаТабличнойЧасти.Номенклатура,,Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
	// Прослеживаемость
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	КонецЕсли;
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПартияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", 				Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура",				СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",				СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", 						СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("ИспользоватьХарактеристики",	СтрокаТабличнойЧасти.ИспользоватьХарактеристики);
	СтруктураДанные.Вставить("ИспользоватьПартии", 			СтрокаТабличнойЧасти.ИспользоватьПартии);
	СтруктураДанные.Вставить("СтранаПроисхождения",			СтрокаТабличнойЧасти.СтранаПроисхождения);
	СтруктураДанные.Вставить("НалогообложениеНДС",			Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("ДатаОбработки",				Объект.Дата);
	СтруктураДанные.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиницаРезерв);
	
	СтрокаТаблицыПартияПриИзмененииНаСервере(СтруктураДанные);
	
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = СтруктураДанные.НомерГТД;
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
	// Прослеживаемость
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	КонецЕсли;
	// Конец Прослеживаемость
	
	СтрокаТабличнойЧасти.КомиссияСНДС = СтруктураДанные.КомиссияСНДС;
	
	Если ЗначениеЗаполнено(СтруктураДанные.СтавкаНДС) И НЕ СтруктураДанные.СтавкаНДС = СтрокаТабличнойЧасти.СтавкаНДС Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		РассчитатьСуммуВСтрокеТабличнойЧасти();
	КонецЕсли;
	
	Если СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
		Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС");
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,УчетВалютныхОпераций);
		ТребуетсяИзменениеНалогообложениеНаСНДС = СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС;
		РаботаСНоменклатуройКлиентУНФ.ВывестиОповещениеПользователяОбИзмененииРежимаНалогообложенияНаСДНС(ТребуетсяИзменениеНалогообложениеНаСНДС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСодержаниеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		ШаблонСодержания = ТекстСодержания(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика);
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ШаблонСодержания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковПоНоменклатуре();
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Элементы["Запасы"].ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат 
	КонецЕсли;
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти, , 
		НЕ ЗаказНарядВСостоянииВыполнения И КэшЗначений.ПередачаТоваровМеждуОрганизациями);
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение 
		Или СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	// Цена.
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		Если КэшЗначений.ИспользоватьМинимальныеЦены
			И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
			
			СтрокаТабличнойЧасти.МинимальнаяЦена = СтрокаТабличнойЧасти.МинимальнаяЦена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
		
		КонецЕсли;
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
	КонецЕсли;
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияПриИзменении(Элемент)
	
	// В процедуре РассчитатьСуммуВСтрокеТабличнойЧасти есть вызов серверной процедуры.
	// Из-за этого данный вызов нельзя выполнить в процедуре ЗапасыЕдиницаИзмеренияОбработкаВыбора.
	// Использование ЗапасыЕдиницаИзмеренияОбработкаВыбора более оптимально, т.к. позволяет отказаться от выполнения
	// большей части алгоритма, если единица измерения не поменялась.
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковПоНоменклатуре();
	КонецЕсли;
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
	СтрокаТабличнойЧасти = Элементы["Запасы"].ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат 
	КонецЕсли;
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти, ,
		НЕ ЗаказНарядВСостоянииВыполнения И КэшЗначений.ПередачаТоваровМеждуОрганизациями);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	//РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	ПараметрыРасчета = Новый Структура("РассчитатьСуммуСкидки, СброситьФлагСкидкиРассчитаны", Истина, Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", СтрокаТабличнойЧасти, ПараметрыРасчета);

	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	ПараметрыРасчета = Новый Структура("РассчитатьСуммуСкидки, СброситьФлагСкидкиРассчитаны, РассчитатьЦену", Истина, Истина, Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", СтрокаТабличнойЧасти, ПараметрыРасчета);
		
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Сумма НДС и Всего
	ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(СтрокаТабличнойЧасти, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРезервПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	СтрокаТабличнойЧасти.РезервОтгрузка = СтрокаТабличнойЧасти.Резерв;
	
	НоменклатураВДокументахКлиент.КонтрольЗначенияРезерваВТекущейСтроке(СтрокаТабличнойЧасти, "ПриИзмененииРезерваПроверитьКоличество", Объект);
	
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти, , 
		НЕ ЗаказНарядВСостоянииВыполнения И КэшЗначений.ПередачаТоваровМеждуОрганизациями);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРезервОтгрузкаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.РезервОтгрузка < СтрокаТабличнойЧасти.Резерв Тогда
		
		СтрокаТабличнойЧасти.Резерв = СтрокаТабличнойЧасти.РезервОтгрузка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Запасы.ТекущиеДанные;
	СтруктураРеквизита = Новый Структура;
	СтруктураРеквизита.Вставить("Объект", "Объект");
	СтруктураРеквизита.Вставить("ТабЧасть", "Запасы");
	СтруктураРеквизита.Вставить("НомерСтроки", ТекущаяСтрока.НомерСтроки - 1);
	СтруктураРеквизита.Вставить("ИмяРеквизита", "Содержание");
	ЗаголовокФормыРедактирования = СтрШаблон(НСтр("ru='%1: содержание'"), Строка(ТекущаяСтрока.Номенклатура));
	ОбщегоНазначенияУНФКлиент.ПоказатьФормуРедактированияРеквизита(Элемент.ТекстРедактирования, ЭтотОбъект,
		СтруктураРеквизита, ЗаголовокФормыРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтранаПроисхожденияПриИзменении(Элемент)
	
	Если КэшЗначений.УчетГТД Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения)
			ИЛИ СтрокаТабличнойЧасти.СтранаПроисхождения = КэшЗначений.Россия Тогда
			
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНомерГТДПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
		
		ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
		Если ДатаГТД > КонецДня(Объект.Дата) Тогда
			
			ТекстСообщения = НСтр("ru ='Внимание: выбранная ГТД датирована более поздней датой, чем текущий документ'");
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Запасы",
				СтрокаТабличнойЧасти.НомерСтроки, "НомерГТД");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , КонтекстноеПоле);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРНПТНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Запасы", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРНПТОчистка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		Если СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
			УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
		Иначе
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
		КонецЕсли;
		
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаРезервПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	СтрокаТабличнойЧасти.ЯчейкаДоступна = ЯчейкаДоступна(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв);
	
	Если КэшЗначений.Свойство("ИспользоватьМинимальныеЦены")
		И КэшЗначений.ИспользоватьМинимальныеЦены Тогда
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
		СтруктураДанные.Вставить("СтранаПроисхождения", СтрокаТабличнойЧасти.СтранаПроисхождения);
		СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		
		Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
			
			СтруктураДанные.Вставить("ДатаОбработки", 			Объект.Дата);
			СтруктураДанные.Вставить("ВалютаДокумента", 		Объект.ВалютаДокумента);
			СтруктураДанные.Вставить("СуммаВключаетНДС", 		Объект.СуммаВключаетНДС);
			
			СтруктураДанные.Вставить("СтавкаНДС", 				СтрокаТабличнойЧасти.СтавкаНДС);
			СтруктураДанные.Вставить("Цена", 					СтрокаТабличнойЧасти.Цена);
			
			СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
			СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
			
		КонецЕсли;
		
		ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, СтрокаТабличнойЧасти, СтруктураДанные);
		
		СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
		
		Если СтруктураДанные.Свойство("МинимальнаяЦена") 
			И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
			СтрокаТабличнойЧасти.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;			
		КонецЕсли;
			
	КонецЕсли;
	
	ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(СтрокаТабличнойЧасти.НомерСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыДокументПоступленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Организация", Объект.Организация);
	СтруктураОткрытия.Вставить("ТолькоПоДокументам", Ложь);
	СтруктураОткрытия.Вставить("СтруктурнаяЕдиница", ТекущиеДанные.СтруктурнаяЕдиница);
	СтруктураОткрытия.Вставить("ТолькоПоОрдерам", Истина);
	СтруктураОткрытия.Вставить("КПоступлению", Ложь);
	СтруктураОткрытия.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	СтруктураОткрытия.Вставить("Характеристика", ТекущиеДанные.Характеристика);
	СтруктураОткрытия.Вставить("Партия", ТекущиеДанные.Партия);
	СтруктураОткрытия.Вставить("Контрагент", Объект.Контрагент);
	
	ОткрытьФорму("ОбщаяФорма.ПодборПоОстаткамТоваровКПоступлениюРеализации", СтруктураОткрытия, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаРезервЗаказПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат 
	КонецЕсли;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Компания);
	СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", 	СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("ИспользоватьХарактеристики", СтрокаТабличнойЧасти.ИспользоватьХарактеристики);
	СтруктураДанные.Вставить("ИспользоватьПартии", СтрокаТабличнойЧасти.ИспользоватьПартии);
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные,,, Истина);
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаРезервЗаказОчистка(Элемент, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Компания);
	СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", 	СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("ИспользоватьХарактеристики", СтрокаТабличнойЧасти.ИспользоватьХарактеристики);
	СтруктураДанные.Вставить("ИспользоватьПартии", СтрокаТабличнойЧасти.ИспользоватьПартии);
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные,,,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПослеУдаленияСтрокиТовары()
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	// АвтоматическиеСкидки.
	СброситьФлагСкидкиРассчитаныКлиент("УдалениеСтроки");
	
	ОбновитьПодвалФормы();
	
	Если РежимОстаткиИРезервы Тогда
		Если ЗначениеЗаполнено(НоменклатураУдаленнойСтроки) Тогда
			ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,НоменклатураУдаленнойСтроки);
		Иначе
			ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	
	// ИнтеграцияГосИС
	СобытияФормИСУНФКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "ТабличнаяЧасть", Новый Структура("ПередУдалением"));
	// Конец ИнтеграцияГосИС
	
	// Наборы
	Если Элементы.Запасы.ВыделенныеСтроки.Количество()=Объект.Запасы.Количество() Тогда
		// Если выделены все строки - проверки удаления наборов не выполняются
		УдаляемыеНаборы = Новый Массив;
		Для каждого Строка Из Объект.Запасы Цикл
			Если ЗначениеЗаполнено(Строка.НоменклатураНабора) И УдаляемыеНаборы.Найти(Строка.НоменклатураНабора)=Неопределено Тогда
				УдаляемыеНаборы.Добавить(Строка.НоменклатураНабора);
			КонецЕсли; 
		КонецЦикла;
		Для каждого НоменклатураНабора Из УдаляемыеНаборы Цикл
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("НоменклатураНабора", НоменклатураНабора);
			УдаляемыеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОтбора);
			Для каждого СтрНабора Из УдаляемыеСтроки Цикл
				Объект.ДобавленныеНаборы.Удалить(СтрНабора);
			КонецЦикла; 
		КонецЦикла; 
	Иначе
		ДанныеНабора = Новый Структура("НоменклатураНабора, ХарактеристикаНабора");
		Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
			Если ДанныеНабора.НоменклатураНабора=Неопределено Тогда
				ДанныеНабора.НоменклатураНабора = ТекущиеДанныеСтроки.НоменклатураНабора;
				ДанныеНабора.ХарактеристикаНабора = ТекущиеДанныеСтроки.ХарактеристикаНабора;
			ИначеЕсли ДанныеНабора.НоменклатураНабора<>ТекущиеДанныеСтроки.НоменклатураНабора 
				ИЛИ ДанныеНабора.ХарактеристикаНабора<>ТекущиеДанныеСтроки.ХарактеристикаНабора Тогда
				// Выделены строки разных наборов
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Действие недоступно для наборов.'");
				Сообщение.Поле = "Объект.Запасы";
				Сообщение.Сообщить();
				Отказ = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		Если НЕ Отказ И ЗначениеЗаполнено(ДанныеНабора.НоменклатураНабора) Тогда
			// Набор можно удалить только целиком
			Отказ = Истина;
			ДобавленныеНаборы = Объект.ДобавленныеНаборы.НайтиСтроки(ДанныеНабора);
			Оповещение = Новый ОписаниеОповещения("ТоварыПередУдалениемЗавершение", ЭтотОбъект, ДанныеНабора);
			СписокКнопок = Новый СписокЗначений;
			Если ДобавленныеНаборы.Количество()>0 И ДобавленныеНаборы[0].Количество>1 Тогда
				// в ТЧ есть несколько одинаковых наборов
				ТекстВопроса = НСтр("ru = 'Набор можно удалить только целиком. В табличную часть добавлено несколько экземпляров данного набора'");
				СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить все'"));
				СписокКнопок.Добавить("УдалитьОдин", НСтр("ru = 'Удалить один экземпляр'"));
			Иначе
				ТекстВопроса = НСтр("ru = 'Набор можно удалить только целиком'");
				СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить'"));
			КонецЕсли; 
			СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Редактировать состав'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
			ПоказатьВопрос(Оповещение, ТекстВопроса, СписокКнопок, 0, КодВозвратаДиалога.Да);
		КонецЕсли; 
	КонецЕсли; 
	// Конец Наборы
	
	// Серии номенклатуры
	Если НЕ Отказ Тогда
		Для Каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
			СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, ТекущиеДанныеСтроки,
				ИспользоватьСерииНоменклатурыОстатки);
			// Прослеживаемость
			УдалитьСвязанныеЗаписи(ТекущиеДанныеСтроки);
		КонецЦикла;
	КонецЕсли; 
	
	// Остатки и резервы
	Если РежимОстаткиИРезервы И Не Отказ Тогда
		ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
		НоменклатураУдаленнойСтроки = ТекущиеДанные.Номенклатура;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалениемЗавершение(Результат, ДанныеНабора) Экспорт
	
	// Наборы
	Если Результат=Неопределено ИЛИ Результат=КодВозвратаДиалога.Отмена Тогда
		Возврат
	КонецЕсли;
	
	СтрокиНабора = Объект.Запасы.НайтиСтроки(ДанныеНабора);
	Если СтрокиНабора.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	СтрокаТабличнойЧасти = СтрокиНабора[0];
	
	ИмяТабличнойЧасти = "Запасы";
	Если Результат=КодВозвратаДиалога.Нет Тогда
		
		РедактироватьСоставНабора(СтрокаТабличнойЧасти);
		
	ИначеЕсли Результат=КодВозвратаДиалога.Да Тогда
		
		Для каждого Стр Из СтрокиНабора Цикл
			СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, Стр,
				ИспользоватьСерииНоменклатурыОстатки);
		КонецЦикла;
		НаборыКлиент.УдалитьСтрокиНабора(СтрокаТабличнойЧасти.НоменклатураНабора, СтрокаТабличнойЧасти.ХарактеристикаНабора, , Объект.Запасы, Объект.ДобавленныеНаборы);
		
		ВыполнитьДействияПослеУдаленияСтрокиТовары();
		Модифицированность = Истина;
		
	ИначеЕсли Результат="УдалитьОдин" Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.НоменклатураНабора);
		СтруктураОтбора.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.ХарактеристикаНабора);
		ДобавленныеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОтбора);
		СтрокиНабора = Объект.Запасы.НайтиСтроки(СтруктураОтбора);
		Если ДобавленныеСтроки.Количество()=0 ИЛИ ДобавленныеСтроки[0].Количество<=1 Тогда
			Для каждого Стр Из СтрокиНабора Цикл
				СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, Стр,
					ИспользоватьСерииНоменклатурыОстатки);
				Объект.Запасы.Удалить(Стр);
			КонецЦикла;
			Для каждого Стр Из ДобавленныеСтроки Цикл
				Объект.ДобавленныеСтроки.Удалить(Стр);
			КонецЦикла;
			Возврат;
		КонецЕсли;
		СтароеКоличество = ДобавленныеСтроки[0].Количество;
		ДобавленныеСтроки[0].Количество = СтароеКоличество-1;
		НаборыКлиентСервер.УдалитьЭкземплярНабора(СтрокаТабличнойЧасти.НоменклатураНабора, СтрокаТабличнойЧасти.ХарактеристикаНабора, , Объект.Запасы, , СтароеКоличество);
		СтрокиНабора = Объект.Запасы.НайтиСтроки(СтруктураОтбора);
		Для каждого Стр Из СтрокиНабора Цикл
			РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", Стр);
		КонецЦикла;
		
		ВыполнитьДействияПослеУдаленияСтрокиТовары();
		Модифицированность = Истина;
		
	КонецЕсли; 
	// Конец Наборы
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	// Наборы
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ХарактеристикиНабора(СтрокаТабличнойЧасти.Номенклатура, Текст);
	КонецЕсли;                              
	// Конец Наборы
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	// Наборы
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		СтандартнаяОбработка = Ложь;
		СтруктураОткрытия = Новый Структура;
		СтруктураОткрытия.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураОткрытия.Вставить("РежимВыбора", Истина);
		СтруктураОткрытия.Вставить("ЗакрыватьПриВыборе", Истина);
		ОткрытьФорму("РегистрСведений.СоставНаборов.Форма.ФормаРедактированияСостава", СтруктураОткрытия, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	КонецЕсли;                              
	// Конец Наборы
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСуммаСкидкиНаценкиПриИзменении(Элемент)
	
	//РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	ПараметрыРасчета = Новый Структура("РассчитатьПроцентСкидки, СброситьФлагСкидкиРассчитаны", Истина, Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", СтрокаТабличнойЧасти, ПараметрыРасчета);

	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗНРаботы

&НаКлиенте
Процедура РаботыПриАктивизацииСтроки(Элемент)
	
	ИмяТабличнойЧасти = "Работы";
	ТабличныеЧастиУНФКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ЗНМатериалы");
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Элементы.ЗНРаботаМатериалы.Доступность = НЕ СтрокаТабличнойЧасти.ТипНоменклатурыУслуга;
	КонецЕсли;
	
	Если РежимОстаткиИРезервы Тогда
		ПоказатьДублиСтрок(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРаботыПриАктивизацииСтроки(Элемент)
	
	ИмяТабличнойЧасти = "ТаблицаРаботы";
	ТабличныеЧастиУНФКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "Исполнители");
	
КонецПроцедуры // ТаблицаРаботыПриАктивизацииСтроки()

&НаКлиенте
Процедура РаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИмяТабличнойЧасти = "Работы";
	Если НоваяСтрока Тогда
		
		ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект);
		ТабличныеЧастиУНФКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ЗНМатериалы");
		
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Элементы.ЗНРаботаМатериалы.Доступность = НЕ СтрокаТабличнойЧасти.ТипНоменклатурыУслуга;
	КонецЕсли;
	
	// АвтоматическиеСкидки
	Если НоваяСтрока И Копирование И
		(Элемент.ТекущиеДанные.ПроцентАвтоматическойСкидки <> 0 ИЛИ Элемент.ТекущиеДанные.СуммаАвтоматическойСкидки <> 0) Тогда
		Элемент.ТекущиеДанные.ПроцентАвтоматическойСкидки = 0;
		Элемент.ТекущиеДанные.СуммаАвтоматическойСкидки = 0;
		РассчитатьСуммуВСтрокеТабличнойЧасти("Работы", Элемент.ТекущиеДанные);
	ИначеЕсли ИспользоватьАвтоматическиеСкидки И НоваяСтрока И Копирование Тогда
		// Автоматические скидки стали неактуальны.
		СброситьФлагСкидкиРассчитаныКлиент("ПриНачалеРедактирования");
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	Если НоваяСтрока И Копирование Тогда
		// Калькуляция
		ОчиститьКалькуляцию();
		// Конец Калькуляция
	КонецЕсли; 
	
	Если НоваяСтрока Тогда
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "ВидРабот", "ПоложениеВидаРабот");
	КонецЕсли; 
		
	// ГрупповоеИзменениеСтрок
	Элемент.ТекущиеДанные.Пометка = Истина;
	// Конец ГрупповоеИзменениеСтрок

КонецПроцедуры // РаботыПриНачалеРедактирования()

&НаКлиенте
Процедура РаботыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	// Наборы
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если Копирование И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураНабора) Тогда
		// Состав набора не копируется
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	// Конец Наборы
	
	Если Копирование Тогда
		ИтогВсего = Объект.Работы.Итог("Всего") + Объект.Запасы.Итог("Всего") + Элемент.ТекущиеДанные.Всего;
		ИтогСуммаНДС = Объект.Работы.Итог("СуммаНДС") + Объект.Запасы.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		КопированиеСтрокиРаботы = Истина;
	КонецЕсли;
	
КонецПроцедуры // ЗапасыПередНачаломДобавления()

&НаКлиенте
Процедура РаботыПриИзменении(Элемент)
	
	Если КопированиеСтрокиРаботы = Неопределено ИЛИ НЕ КопированиеСтрокиРаботы Тогда
		ОбновитьПодвалФормы();
	Иначе
		КопированиеСтрокиРаботы = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ЗапасыПриИзменении()

&НаКлиенте
Процедура РаботыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	// Установить отбор для ТаблицаРаботы по типу номенклатуры.
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ТипНоменклатурыУслуга", Ложь);
	ФиксированнаяСтруктураОтбора = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	Элементы.ТаблицаРаботы.ОтборСтрок = ФиксированнаяСтруктураОтбора;
	
КонецПроцедуры // РаботыПриОкончанииРедактирования()

&НаКлиенте
Процедура РаботыПередУдалением(Элемент, Отказ)

	// Наборы
	Если Элементы.Работы.ВыделенныеСтроки.Количество()=Объект.Работы.Количество() Тогда
		// Если выделены все строки - проверки удаления наборов не выполняются
		УдаляемыеНаборы = Новый Массив;
		Для каждого Строка Из Объект.Работы Цикл
			Если ЗначениеЗаполнено(Строка.НоменклатураНабора) И УдаляемыеНаборы.Найти(Строка.НоменклатураНабора)=Неопределено Тогда
				УдаляемыеНаборы.Добавить(Строка.НоменклатураНабора);
			КонецЕсли; 
		КонецЦикла;
		Для каждого НоменклатураНабора Из УдаляемыеНаборы Цикл
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("НоменклатураНабора", НоменклатураНабора);
			УдаляемыеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОтбора);
			Для каждого СтрНабора Из УдаляемыеСтроки Цикл
				Объект.ДобавленныеНаборы.Удалить(СтрНабора);
			КонецЦикла; 
		КонецЦикла; 
	Иначе
		ДанныеНабора = Новый Структура("НоменклатураНабора, ХарактеристикаНабора");
		Для каждого ВыделеннаяСтрока Из Элементы.Работы.ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = Элементы.Работы.ДанныеСтроки(ВыделеннаяСтрока);
			Если ДанныеНабора.НоменклатураНабора=Неопределено Тогда
				ДанныеНабора.НоменклатураНабора = ТекущиеДанныеСтроки.НоменклатураНабора;
				ДанныеНабора.ХарактеристикаНабора = ТекущиеДанныеСтроки.ХарактеристикаНабора;
			ИначеЕсли ДанныеНабора.НоменклатураНабора<>ТекущиеДанныеСтроки.НоменклатураНабора 
				ИЛИ ДанныеНабора.ХарактеристикаНабора<>ТекущиеДанныеСтроки.ХарактеристикаНабора Тогда
				// Выделены строки разных наборов
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Действие недоступно для наборов.'");
				Сообщение.Поле = "Объект.Запасы";
				Сообщение.Сообщить();
				Отказ = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		Если НЕ Отказ И ЗначениеЗаполнено(ДанныеНабора.НоменклатураНабора) Тогда
			// Набор можно удалить только целиком
			Отказ = Истина;
			ДобавленныеНаборы = Объект.ДобавленныеНаборы.НайтиСтроки(ДанныеНабора);
			Оповещение = Новый ОписаниеОповещения("РаботыПередУдалениемЗавершение", ЭтотОбъект, ДанныеНабора);
			СписокКнопок = Новый СписокЗначений;
			Если ДобавленныеНаборы.Количество()>0 И ДобавленныеНаборы[0].Количество>1 Тогда
				// в ТЧ есть несколько одинаковых наборов
				ТекстВопроса = НСтр("ru = 'Набор можно удалить только целиком. В табличную часть добавлено несколько экземпляров данного набора'");
				СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить все'"));
				СписокКнопок.Добавить("УдалитьОдин", НСтр("ru = 'Удалить один экземпляр'"));
			Иначе
				ТекстВопроса = НСтр("ru = 'Набор можно удалить только целиком'");
				СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить'"));
			КонецЕсли; 
			СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Редактировать состав'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
			ПоказатьВопрос(Оповещение, ТекстВопроса, СписокКнопок, 0, КодВозвратаДиалога.Да);
		КонецЕсли; 
	КонецЕсли; 
	// Конец Наборы
	
	Если НЕ Отказ Тогда
		ИмяТабличнойЧасти = "Работы";
		ТабличныеЧастиУНФКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "Материалы");
		ТабличныеЧастиУНФКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "Исполнители");
		
		СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			Элементы.ЗНРаботаМатериалы.Доступность = НЕ СтрокаТабличнойЧасти.ТипНоменклатурыУслуга;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры // РаботыПередУдалением()

&НаКлиенте
Процедура РаботыПослеУдаления(Элемент)
	
	ВыполнитьДействияПослеУдаленияСтрокиРаботы();
	УстановитьВидимостьДокументаПоступления(ЭтаФорма);
	
КонецПроцедуры // РаботыПослеУдаления()

&НаКлиенте
Процедура РаботыНоменклатураПриИзменении(Элемент)
	
	РаботыНоменклатураПриИзмененииЗначения(Элемент);
	
КонецПроцедуры // РаботыНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗНРаботыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ЗаказНаряд", НастройкиФормыВыбораНоменклатуры, Истина, "ЗНРаботы", ВыбранноеЗначение.СтруктураНастроек);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "ЗНРаботы");
		КонецЕсли;
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура РаботыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
	СтруктураДанные.Вставить("НормаВремени", 1);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		Если ВидРаботВШапке Тогда
			
			СтруктураДанные.Вставить("ВидРабот", Объект.ВидРабот);
			
		ИначеЕсли НЕ ВидРаботВШапке Тогда
			
			СтруктураДанные.Вставить("ВидРабот", СтрокаТабличнойЧасти.ВидРабот);
			
		КонецЕсли;
		
		СтруктураДанные.Вставить("ВалютаДокумента",	Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС",Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен",			Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент",		1);
		СтруктураДанные.Вставить("ВидСкидкиНаценки",Объект.ВидСкидкиНаценки);
		
	КонецЕсли;
	
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	// Конец ДисконтныеКарты

	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, СтрокаТабличнойЧасти, СтруктураДанные);

	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);

	Если СтруктураДанные.Свойство("МинимальнаяЦена") 
		И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
		СтрокаТабличнойЧасти.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;			
	КонецЕсли;
	
	Если СтруктураДанные.ЭтоНабор Тогда
		
		// Наборы
		ЗаменитьСтрокуДаннымиНабора(ЭтотОбъект, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, СтруктураДанные);
		
		ЗаполнитьПризнакиИспользованияХарактеристик();
		
		// АвтоматическиеСкидки.
		СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
		// Конец АвтоматическиеСкидки
	
	Иначе
		
		СтрокаТабличнойЧасти.Количество = СтруктураДанные.НормаВремени;
		СтрокаТабличнойЧасти.Кратность = 1; 
		СтрокаТабличнойЧасти.Коэффициент = 1; 
		СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		СтрокаТабличнойЧасти.Содержание = "";
		СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
		
		Если (ВидРаботВШапке И ЗначениеЗаполнено(Объект.ВидЦен)) ИЛИ СтруктураДанные.Свойство("Цена") Тогда
			СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
		КонецЕсли;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти("Работы");
		
	КонецЕсли;
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // РаботыХарактеристикаПриИзменении()

&НаКлиенте
Процедура ЗНРаботыСодержаниеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
		ШаблонСодержания = ТекстСодержания(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика);
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ШаблонСодержания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыВидРаботПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
		
		// Наборы
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураНабора) Тогда
			
			ОбновитьЦеныНабора(СтрокаТабличнойЧасти.ПолучитьИдентификатор(), "Работы");
			
		Иначе
		// Конец Наборы
			
			СтруктураДанные = Новый Структура;
			СтруктураДанные.Вставить("Организация", 		Компания);
			СтруктураДанные.Вставить("Номенклатура", 		СтрокаТабличнойЧасти.Номенклатура);
			СтруктураДанные.Вставить("Характеристика", 		СтрокаТабличнойЧасти.Характеристика);
			СтруктураДанные.Вставить("ВидРабот", 			СтрокаТабличнойЧасти.ВидРабот);
			
			СтруктураДанные.Вставить("ДатаОбработки", 		Объект.Дата);
			СтруктураДанные.Вставить("ВалютаДокумента", 	Объект.ВалютаДокумента);
			СтруктураДанные.Вставить("СуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
			СтруктураДанные.Вставить("ВидЦен", 				Объект.ВидЦен);
			СтруктураДанные.Вставить("Коэффициент", 		1);
			
			СтруктураДанные.Вставить("ВидСкидкиНаценки", 	Объект.ВидСкидкиНаценки);
			
			// ДисконтныеКарты
			СтруктураДанные.Вставить("ДисконтнаяКарта", 	Объект.ДисконтнаяКарта);
			СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);		
			// Конец ДисконтныеКарты

			ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, СтрокаТабличнойЧасти, СтруктураДанные);

			СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
			
			СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
			
			Если СтруктураДанные.Свойство("МинимальнаяЦена") 
				И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
				
				СтрокаТабличнойЧасти.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;
				
			КонецЕсли;
			
		КонецЕсли; 
		
		РассчитатьСуммуВСтрокеТабличнойЧасти("Работы");
		
	КонецЕсли;
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // РаботыНоменклатураПриИзменении()

&НаКлиенте
Процедура РаботыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Работы");
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	//Исполнители
	ОтразитьИзменениеКлючевыхПараметровВНачисленияхИсполнителей();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // РаботыКоличествоПриИзменении()

&НаКлиенте
Процедура РаботыКоэффициентПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Работы");
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	//Исполнители
	ОтразитьИзменениеКлючевыхПараметровВНачисленияхИсполнителей();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // РаботыКоличествоПриИзменении()

&НаКлиенте
Процедура РаботыКратностьПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Работы");
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	//Исполнители
	ОтразитьИзменениеКлючевыхПараметровВНачисленияхИсполнителей();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // РаботыКоличествоПриИзменении()

&НаКлиенте
Процедура РаботыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Работы");
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	//Исполнители
	ОтразитьИзменениеКлючевыхПараметровВНачисленияхИсполнителей();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // РаботыЦенаПриИзменении()

&НаКлиенте
Процедура РаботыПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	//РассчитатьСуммуВСтрокеТабличнойЧасти("Работы");
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	ПараметрыРасчета = Новый Структура("РассчитатьСуммуСкидки, СброситьФлагСкидкиРассчитаны", Истина, Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти("Работы", СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	//Исполнители
	ОтразитьИзменениеКлючевыхПараметровВНачисленияхИсполнителей();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // РаботыПроцентСкидкиНаценкиПриИзменении()

&НаКлиенте
Процедура РаботыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	ПараметрыРасчета = Новый Структура("РассчитатьСуммуСкидки, СброситьФлагСкидкиРассчитаны, РассчитатьЦену", Истина, Истина, Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти("Работы", СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	//Исполнители
	ОтразитьИзменениеКлючевыхПараметровВНачисленияхИсполнителей();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // РаботыСуммаПриИзменении()

&НаКлиенте
Процедура РаботыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	
	// Сумма НДС и Всего
	ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(СтрокаТабличнойЧасти, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	//Исполнители
	ОтразитьИзменениеКлючевыхПараметровВНачисленияхИсполнителей();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры  // РаботыСтавкаНДСПриИзменении()

&НаКлиенте
Процедура РаботыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	//Исполнители
	ОтразитьИзменениеКлючевыхПараметровВНачисленияхИсполнителей();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // РаботыСуммаНДСПриИзменении()

&НаКлиенте
Процедура ЗНРаботыСодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Работы.ТекущиеДанные;
	СтруктураРеквизита = Новый Структура;
	СтруктураРеквизита.Вставить("Объект", "Объект");
	СтруктураРеквизита.Вставить("ТабЧасть", "Работы");
	СтруктураРеквизита.Вставить("НомерСтроки", ТекущаяСтрока.НомерСтроки - 1);
	СтруктураРеквизита.Вставить("ИмяРеквизита", "Содержание");
	ЗаголовокФормыРедактирования = СтрШаблон(НСтр("ru='%1: содержание'"), Строка(ТекущаяСтрока.Номенклатура));
	ОбщегоНазначенияУНФКлиент.ПоказатьФормуРедактированияРеквизита(Элемент.ТекстРедактирования, ЭтотОбъект,
		СтруктураРеквизита, ЗаголовокФормыРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПередУдалениемЗавершение(Результат, ДанныеНабора) Экспорт
	
	// Наборы
	Если Результат=Неопределено ИЛИ Результат=КодВозвратаДиалога.Отмена Тогда
		Возврат
	КонецЕсли;
	
	СтрокиНабора = Объект.Работы.НайтиСтроки(ДанныеНабора);
	Если СтрокиНабора.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	СтрокаТабличнойЧасти = СтрокиНабора[0];
	
	ИмяТабличнойЧасти = "Работы";
	Если Результат=КодВозвратаДиалога.Нет Тогда
		
		РедактироватьСоставНабора(СтрокаТабличнойЧасти);
		
	ИначеЕсли Результат=КодВозвратаДиалога.Да Тогда
		
		Для каждого Стр Из СтрокиНабора Цикл
			Элементы.Работы.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
			ТабличныеЧастиУНФКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "Материалы");
			ТабличныеЧастиУНФКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "Исполнители");
		КонецЦикла;
		НаборыКлиент.УдалитьСтрокиНабора(СтрокаТабличнойЧасти.НоменклатураНабора, СтрокаТабличнойЧасти.ХарактеристикаНабора, , Объект.Работы, Объект.ДобавленныеНаборы);
		
		СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			Элементы.ЗНРаботаМатериалы.Доступность = НЕ СтрокаТабличнойЧасти.ТипНоменклатурыУслуга;
		КонецЕсли;
		
		ВыполнитьДействияПослеУдаленияСтрокиРаботы();
		Модифицированность = Истина;
		
	ИначеЕсли Результат="УдалитьОдин" Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.НоменклатураНабора);
		СтруктураОтбора.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.ХарактеристикаНабора);
		ДобавленныеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОтбора);
		СтрокиНабора = Объект.Работы.НайтиСтроки(СтруктураОтбора);
		Если ДобавленныеСтроки.Количество()=0 ИЛИ ДобавленныеСтроки[0].Количество<=1 Тогда
			Для каждого Стр Из СтрокиНабора Цикл
				Элементы.Работы.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
				ТабличныеЧастиУНФКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "Материалы");
				ТабличныеЧастиУНФКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "Исполнители");
				Объект.Работы.Удалить(Стр);
			КонецЦикла;
			Для каждого Стр Из ДобавленныеСтроки Цикл
				Объект.ДобавленныеСтроки.Удалить(Стр);
			КонецЦикла;
			Возврат;
		КонецЕсли;
		СтароеКоличество = ДобавленныеСтроки[0].Количество;
		ДобавленныеСтроки[0].Количество = СтароеКоличество-1;
		НаборыКлиентСервер.УдалитьЭкземплярНабора(СтрокаТабличнойЧасти.НоменклатураНабора, СтрокаТабличнойЧасти.ХарактеристикаНабора, , Объект.Работы, , СтароеКоличество);
		СтрокиНабора = Объект.Работы.НайтиСтроки(СтруктураОтбора);
		Для каждого Стр Из СтрокиНабора Цикл
			РассчитатьСуммуВСтрокеТабличнойЧасти("Работы", Стр);
		КонецЦикла;
		СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			Элементы.ЗНРаботаМатериалы.Доступность = НЕ СтрокаТабличнойЧасти.ТипНоменклатурыУслуга;
		КонецЕсли;
		
		ВыполнитьДействияПослеУдаленияСтрокиРаботы();
		Модифицированность = Истина;
		
	КонецЕсли; 
	// Конец Наборы
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПослеУдаленияСтрокиРаботы()
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	// АвтоматическиеСкидки.
	СброситьФлагСкидкиРассчитаныКлиент("УдалениеСтроки");
	
	ОбновитьПодвалФормы();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыХарактеристикаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	// Наборы
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ХарактеристикиНабора(СтрокаТабличнойЧасти.Номенклатура, Текст);
	КонецЕсли;                              
	// Конец Наборы
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	// Наборы
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		СтандартнаяОбработка = Ложь;
		СтруктураОткрытия = Новый Структура;
		СтруктураОткрытия.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураОткрытия.Вставить("РежимВыбора", Истина);
		СтруктураОткрытия.Вставить("ЗакрыватьПриВыборе", Истина);
		ОткрытьФорму("РегистрСведений.СоставНаборов.Форма.ФормаРедактированияСостава", СтруктураОткрытия, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	КонецЕсли;                              
	// Конец Наборы
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыСуммаСкидкиНаценкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	ПараметрыРасчета = Новый Структура("РассчитатьПроцентСкидки, СброситьФлагСкидкиРассчитаны", Истина, Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти("Работы", СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	//Исполнители
	ОтразитьИзменениеКлючевыхПараметровВНачисленияхИсполнителей();
	
КонецПроцедуры // РаботыПроцентСкидкиНаценкиПриИзменении()

&НаКлиенте
Процедура РаботыСпецификацияПриИзменении(Элемент)
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалы

&НаКлиенте
Процедура ЗНМатериалыПриИзменении(Элемент)
	УстановитьВидимостьДокументаПоступленияПриИзмененииТабличнойЧасти(Элемент, "Материалы");
КонецПроцедуры

&НаКлиенте
Процедура ЗНМатериалыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ИмяТабличнойЧасти = "Работы";
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтотОбъект, Элемент.Имя) Тогда
		Отказ = Истина;
	КонецЕсли; 
	
	Если Копирование И Не Отказ Тогда
		
		Если РежимОстаткиИРезервы Тогда
			
			СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
			
			Отказ = Истина;
			
			НоваяСтрока = Объект.Материалы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
			
			НоваяСтрока.Резерв = 0;
			
			СтруктураДанные = Новый Структура;
			СтруктураДанные.Вставить("Организация", Компания);
			СтруктураДанные.Вставить("Номенклатура", 	НоваяСтрока.Номенклатура);
			СтруктураДанные.Вставить("Характеристика", 	НоваяСтрока.Характеристика);
			СтруктураДанные.Вставить("Партия", 	НоваяСтрока.Партия);
			СтруктураДанные.Вставить("ИспользоватьХарактеристики", НоваяСтрока.ИспользоватьХарактеристики);
			СтруктураДанные.Вставить("ИспользоватьПартии", НоваяСтрока.ИспользоватьПартии);
			
			ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные,,,Истина);
			ЗаполнитьНомераСтрокТаблицаМатериалы(Объект.Материалы);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ЗНМатериалыПередНачаломДобавления()

&НаКлиенте
Процедура ЗНМатериалыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	
	ИмяТабличнойЧасти = "Работы";
	Если НоваяСтрока Тогда
		ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтотОбъект, Элемент.Имя);
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ЗНМатериалыСерииНоменклатуры" Тогда
		ОткрытьПодборМатериалыСерииНоменклатуры();
	КонецЕсли;
	
	Если НоваяСтрока И Копирование Тогда
		СтрокаТабличнойЧасти.КлючСвязи = 0;
		СтрокаТабличнойЧасти.СерииНоменклатуры = "";
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти, 
			"СерииНоменклатурыМатериалы", 
			НЕ ЗаказНарядВСостоянииВыполнения И КэшЗначений.ПередачаТоваровМеждуОрганизациями);
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "СтруктурнаяЕдиницаРезерв", "ПоложениеСклада");
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "Ячейка", "ПоложениеСклада");
		ЗаполнитьНомераСтрокТаблицаМатериалы(Объект.Материалы);
	КонецЕсли;
	 
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТабличнойЧасти.Количество = НовоеКоличествоПриИзмененииНоменклатуры;
	КонецЕсли; 
	
КонецПроцедуры // ЗНМатериалыПриНачалеРедактирования()

&НаКлиенте
Процедура ЗНМатериалыСтранаПроисхожденияПриИзменении(Элемент)
	
	Если КэшЗначений.УчетГТД Тогда
		
		СтрокаТабличнойЧасти = Элементы.ЗНМатериалы.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения)
			ИЛИ СтрокаТабличнойЧасти.СтранаПроисхождения = КэшЗначений.Россия Тогда
			
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНМатериалыНомерГТДПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗНМатериалы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
		
		ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
		Если ДатаГТД > КонецДня(Объект.Дата) Тогда
			
			ТекстСообщения = НСтр("ru ='Внимание: Выбранная ГТД датирована более поздней датой, чем текущий документ'");
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Материалы",
				СтрокаТабличнойЧасти.НомерСтроки, "НомерГТД");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , КонтекстноеПоле);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсполнители

&НаКлиенте
Процедура ИсполнителиПослеУдаления(Элемент)
	
	ОбновитьТабличнуюЧастьИсполнители();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьТабличнуюЧастьИсполнители();
	
	// Калькуляция
	Если Объект.РасчетКалькуляцииПоДаннымТЧ И НЕ ОтменаРедактирования Тогда
		ОчиститьКалькуляцию();
	КонецЕсли; 
	// Конец Калькуляция
	
КонецПроцедуры // ИсполнителиПриОкончанииРедактирования()

&НаКлиенте
Процедура ИсполнителиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ИмяТабличнойЧасти = "ТаблицаРаботы";
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтотОбъект, Элемент.Имя) Тогда
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры // ИсполнителиПередНачаломДобавления()

&НаКлиенте
Процедура ИсполнителиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИмяТабличнойЧасти = "ТаблицаРаботы";
	Если НоваяСтрока Тогда
		ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтотОбъект, Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры // ИсполнителиПриНачалеРедактирования()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗНМатериалы

&НаКлиенте
Процедура ЗНМатериалыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗНМатериалы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьСбросКоличества И СбрасыватьКоличество
		И СтрокаТабличнойЧасти.Количество <> НовоеКоличествоПриИзмененииНоменклатуры Тогда
		
		ДопПараметр = Новый Структура();
		ДопПараметр.Вставить("Элемент", Элемент);
		ДопПараметр.Вставить("Количество", СтрокаТабличнойЧасти.Количество);
		Оповещение = Новый ОписаниеОповещения("ЗНМатериалыПодтверждениеСбросаКоличестваЗавершение", ЭтотОбъект, ДопПараметр);
		ОткрытьФорму("ОбщаяФорма.ПодтверждениеСбросаКоличества", , , , , , Оповещение);
		
	Иначе
		
		Если СбрасыватьКоличество Тогда
			НовоеКоличество = НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
		ЗНМатериалыНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество);
		
	КонецЕсли;

	
КонецПроцедуры // ЗНМатериалыНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗНМатериалыПодтверждениеСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗапрашиватьСбросКоличества = Результат.ЗапрашиватьСбросКоличества;
		Если НЕ ЗапрашиватьСбросКоличества Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		КонецЕсли;
		Если Результат.СбрасыватьКоличество Тогда
			НовоеКоличество = Результат.НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = ДополнительныеПараметры.Количество;
		КонецЕсли;
	Иначе
		НовоеКоличество = ДополнительныеПараметры.Количество;
	КонецЕсли;
	
	ЗНМатериалыНоменклатураПриИзмененииПродолжить(ДополнительныеПараметры.Элемент, НовоеКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНМатериалыНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество)
	СтрокаТабличнойЧасти = Элементы.ЗНМатериалы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация",		Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура",	СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",	СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия",			СтрокаТабличнойЧасти.Партия);
	
	Если СкладВШапке Тогда
		СтруктураДанные.Вставить("Склад", Объект.СтруктурнаяЕдиницаРезерв);
		СтруктураДанные.Вставить("Ячейка", Объект.Ячейка);
	КонецЕсли;
	
	СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанные);
	СтруктураДанные = МатериалыПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = СтруктураДанные.НомерГТД;
	СтрокаТабличнойЧасти.Резерв = 0;
	СтрокаТабличнойЧасти.РезервОтгрузка = 0;
	СтрокаТабличнойЧасти.Количество = НовоеКоличество;	
	
	СтрокаТабличнойЧасти.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
	
	Если СкладВШапке Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = СтруктураДанные.Склад;
		СтрокаТабличнойЧасти.Ячейка = СтруктураДанные.Ячейка;
	Иначе
		Если Не (ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв) И ПодборНоменклатурыИзСписка) Тогда
			ЗаполнитьСкладВСтрокеТЧ(СтрокаТабличнойЧасти, СтруктураДанные);
		КонецЕсли;
	КонецЕсли;
	
	// Серии номенклатуры
	Для каждого ВыделеннаяСтрока Из Элементы.ЗНМатериалы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.ЗНМатериалы.ДанныеСтроки(ВыделеннаяСтрока);
		СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатурыМатериалы, ТекущиеДанныеСтроки,
			ИспользоватьСерииНоменклатурыОстатки, "КлючСвязиСерииНоменклатуры");
	КонецЦикла;
			
	// Характеристики
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура)
		Тогда
		СтруктураДанныеНоменклатуры = Новый Структура();
		СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
		СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
		СтруктураДанныеНоменклатуры.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанныеНоменклатуры.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
		СтруктураДанныеНоменклатуры.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
		
		СтатусПартии = Новый СписокЗначений;
		СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
		
		СтруктураДанныеНоменклатуры.Вставить("СтатусПартии", СтатусПартии);
		
		ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, СтрокаТабличнойЧасти, СтруктураДанныеНоменклатуры);

		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
		
		СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
		СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
		СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
		
		Если СтруктураДанные.ИспользоватьХарактеристики Тогда
			Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
				СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
				СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
			Иначе
				СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
			КонецЕсли;
		КонецЕсли;
		
		//Партии
		СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
		СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
		
		Если СтруктураДанные.ИспользоватьПартии Тогда
			Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
				СтрокаТабличнойЧасти.Партия = СтруктураВыбораНоменклатуры.Партия;
				СтруктураВыбораНоменклатуры.Партия = Неопределено;
			Иначе
				СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	// Конец Характеристики и Партии
	
	СтрокаТабличнойЧасти.УказыватьДокументПоступления = СтруктураДанные.УказыватьДокументПоступления;
	
	ПодборНоменклатурыИзСписка = Ложь;
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
	КонецЕсли;
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНМатериалыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			
			ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
			
			Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
				СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
			КонецЕсли;
			
			СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
			СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
			
		СтрокаТабличнойЧасти = Элементы.ЗНМатериалы.ТекущиеДанные;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ЗаказНаряд", НастройкиФормыВыбораНоменклатуры, Истина, "ЗНМатериалы", ВыбранноеЗначение.СтруктураНастроек);
		КонецЕсли;
		
		Если РазрешитьСкладыВТабличныхЧастях Тогда
			Если Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") 
				Или Объект.СтруктурнаяЕдиницаРезерв = ВыбранноеЗначение.Склад
				Или Не ЗначениеЗаполнено(ВыбранноеЗначение.Склад) Тогда
				
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
				
				Если СтрокаТабличнойЧасти.Свойство("СтруктурнаяЕдиницаРезерв") Тогда
					СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = ВыбранноеЗначение.Склад;
				КонецЕсли;
				
				НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "ЗНМатериалы");
				
			ИначеЕсли ЗначениеЗаполнено(ВыбранноеЗначение.Склад) И Не Объект.СтруктурнаяЕдиницаРезерв = ВыбранноеЗначение.Склад Тогда
				Режим = РежимДиалогаВопрос.ДаНет;
				ПараметрыОповещения = ВыбранноеЗначение;
				Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаСкладВТЧМатериалы", ЭтотОбъект, ПараметрыОповещения);
				ПоказатьВопрос(Оповещение, НСтр("ru = 'Выбранный склад отличен от склада в шапке. Отобразить склад в табличной части?'"), Режим, 0);
				СтандартнаяОбработка = Ложь;
				Возврат;
			Иначе
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
				НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "ЗНМатериалы");
			КонецЕсли;
		Иначе
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "ЗНМатериалы");
		КонецЕсли;
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаСкладВТЧМатериалы(Результат, ПараметрыОповещения) Экспорт
	
	СтрокаТабличнойЧасти = Элементы.ЗНМатериалы.ТекущиеДанные;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ПараметрыОповещения);
		ЗНМатериалыНоменклатураПриИзменении(Неопределено);
		НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "ЗНМатериалы");
		Возврат;
	КонецЕсли;
	
	Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");
	
	УправлениеФормой();
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ПараметрыОповещения);
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "ЗНМатериалы");
	
	Если СтрокаТабличнойЧасти.Свойство("СтруктурнаяЕдиницаРезерв") Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = ПараметрыОповещения.Склад;
	КонецЕсли;
	
	ЗНМатериалыНоменклатураПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНМатериалыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗНМатериалы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация",			Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура",		СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",		СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия",				СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("СтранаПроисхождения",	СтрокаТабличнойЧасти.СтранаПроисхождения);

	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, СтрокаТабличнойЧасти, СтруктураДанные);

	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = СтруктураДанные.НомерГТД;
	
	Если РежимОстаткиИРезервы Тогда
		
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,СтрокаТабличнойЧасти.Номенклатура,,Истина);
		
	КонецЕсли;
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНМатериалыПартияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗНМатериалы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", 				Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура",				СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",				СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", 						СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("ИспользоватьХарактеристики",	СтрокаТабличнойЧасти.ИспользоватьХарактеристики);
	СтруктураДанные.Вставить("ИспользоватьПартии", 			СтрокаТабличнойЧасти.ИспользоватьПартии);
	СтруктураДанные.Вставить("СтранаПроисхождения",			СтрокаТабличнойЧасти.СтранаПроисхождения);
	СтруктураДанные.Вставить("ДатаОбработки", 				Объект.Дата);
	
	СтрокаТаблицыПартияПриИзмененииНаСервере(СтруктураДанные);
	
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = СтруктураДанные.НомерГТД;
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНМатериалыКоличествоПриИзменении(Элемент)
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковПоНоменклатуре("ЗНМатериалы");
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Элементы["ЗНМатериалы"].ТекущиеДанные;
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти, 
		"СерииНоменклатурыМатериалы", 
		НЕ ЗаказНарядВСостоянииВыполнения И КэшЗначений.ПередачаТоваровМеждуОрганизациями);
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСтруктурнаяЕдиницаРезервЗаказПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗНМатериалы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Компания);
	СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", 	СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("ИспользоватьХарактеристики", СтрокаТабличнойЧасти.ИспользоватьХарактеристики);
	СтруктураДанные.Вставить("ИспользоватьПартии", СтрокаТабличнойЧасти.ИспользоватьПартии);
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные,,, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСтруктурнаяЕдиницаРезервЗаказОчистка(Элемент, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.ЗНМатериалы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Компания);
	СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", 	СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("ИспользоватьХарактеристики", СтрокаТабличнойЧасти.ИспользоватьХарактеристики);
	СтруктураДанные.Вставить("ИспользоватьПартии", СтрокаТабличнойЧасти.ИспользоватьПартии);
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные,,,Истина);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыСтруктурнаяЕдиницаРезервЗаказОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Тогда Возврат КонецЕсли;
	СтруктурнаяЕдиницаРезервЗаказОбработкаВыбора("ЗНМатериалы", ВыбранноеЗначение, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыРезервДляРежимаОстаткиПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ЗНМатериалы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	НоменклатураВДокументахКлиент.КонтрольЗначенияРезерваВТекущейСтроке(СтрокаТабличнойЧасти, "ПриИзмененииРезерваПроверитьКоличество", Объект, "Материалы");
	
	ЗаполнитьЗначенияОстатковПоНоменклатуре("ЗНМатериалы");
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСтруктурнаяЕдиницаРезервРасходОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = Неопределено Тогда Возврат КонецЕсли;
	СтруктурнаяЕдиницаРезервРасходОбработкаВыбора("ЗНМатериалы", ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыЯчейкаДляРежимаОстаткиПриИзменении(Элемент)
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковПоНоменклатуре("ЗНМатериалы");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериалыРезервДляРежимаОстаткиРасходПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ЗНМатериалы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	НоменклатураВДокументахКлиент.КонтрольЗначенияРезерваВТекущейСтроке(СтрокаТабличнойЧасти, "ПриИзмененииРезерваПроверитьКоличество", Объект);
	
	ЗаполнитьЗначенияОстатковПоНоменклатуре("ЗНМатериалы");
КонецПроцедуры

&НаКлиенте
Процедура ЗНМатериалыРезервПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗНМатериалы.ТекущиеДанные;
	СтрокаТабличнойЧасти.РезервОтгрузка = СтрокаТабличнойЧасти.Резерв;
	
	НоменклатураВДокументахКлиент.КонтрольЗначенияРезерваВТекущейСтроке(СтрокаТабличнойЧасти, "ПриИзмененииРезерваПроверитьКоличество", Объект, "Материалы");
	
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти, 
		"СерииНоменклатурыМатериалы", 
		НЕ ЗаказНарядВСостоянииВыполнения И КэшЗначений.ПередачаТоваровМеждуОрганизациями);
		
КонецПроцедуры // ЗНМатериалыРезервПриИзменении()

&НаКлиенте
Процедура ЗНМатериалыРезервОтгрузкаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗНМатериалы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.РезервОтгрузка < СтрокаТабличнойЧасти.Резерв Тогда
		
		СтрокаТабличнойЧасти.Резерв = СтрокаТабличнойЧасти.РезервОтгрузка;
		
	КонецЕсли;
	
КонецПроцедуры // ЗНМатериалыРезервОтгрузкаПриИзменении()

&НаКлиенте
Процедура ЗНМатериалыСерииНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборМатериалыСерииНоменклатуры();
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗНМатериалыСтруктурнаяЕдиницаРезервПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗНМатериалы.ТекущиеДанные;
	СтрокаТабличнойЧасти.ЯчейкаДоступна = ЯчейкаДоступна(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв);
	ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(СтрокаТабличнойЧасти.НомерСтроки, "Материалы", "СерииНоменклатурыМатериалы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНМатериалыДокументПоступленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Организация", Объект.Организация);
	СтруктураОткрытия.Вставить("ТолькоПоДокументам", Ложь);
	СтруктураОткрытия.Вставить("СтруктурнаяЕдиница", ТекущиеДанные.СтруктурнаяЕдиница);
	СтруктураОткрытия.Вставить("ТолькоПоОрдерам", Истина);
	СтруктураОткрытия.Вставить("КПоступлению", Ложь);
	СтруктураОткрытия.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	СтруктураОткрытия.Вставить("Характеристика", ТекущиеДанные.Характеристика);
	СтруктураОткрытия.Вставить("Партия", ТекущиеДанные.Партия);
	СтруктураОткрытия.Вставить("Контрагент", Объект.Контрагент);
	
	ОткрытьФорму("ОбщаяФорма.ПодборПоОстаткамТоваровКПоступлениюРеализации", СтруктураОткрытия, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(НомерСтроки, ИмяТаблицы = "Запасы", ИмяТаблицыСерии = "СерииНоменклатуры")
	ДополнительныеСвойства = Новый Структура("НомерСтроки", НомерСтроки);
	СерииНоменклатурыУНФ.ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(Объект, ИмяТаблицы, ДополнительныеСвойства, ИмяТаблицыСерии);
	
	Если ДоступенОрдерныйУчет И Объект.ПоложениеДокументаПоступления = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		
		СтрокаТабличнойЧасти = Объект[ИмяТаблицы][НомерСтроки - 1];
		СтрокаТабличнойЧасти.УказыватьДокументПоступления = СкладскойУчетСервер.УказыватьДокументПоступления(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв, Ложь);
		СтрокаТабличнойЧасти.ДокументПоступления = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНМатериалыПередУдалением(Элемент, Отказ)
	
	// Серии номенклатуры
	Для каждого ВыделеннаяСтрока Из Элементы.ЗНМатериалы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.ЗНМатериалы.ДанныеСтроки(ВыделеннаяСтрока);
		СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатурыМатериалы, ТекущиеДанныеСтроки,
			ИспользоватьСерииНоменклатурыОстатки, "КлючСвязиСерииНоменклатуры");
	КонецЦикла;
	
	// Остатки и резервы
	Если РежимОстаткиИРезервы И Не Отказ Тогда
		ТекущиеДанные = Элементы.ЗНМатериалы.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
		НоменклатураУдаленнойСтроки = ТекущиеДанные.Номенклатура;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНМатериалыПослеУдаления(Элемент)
	
	Если РежимОстаткиИРезервы Тогда
		Если ЗначениеЗаполнено(НоменклатураУдаленнойСтроки) Тогда
			ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,НоменклатураУдаленнойСтроки);
		Иначе
			ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьНомераСтрокТаблицаМатериалы(Объект.Материалы);
	УстановитьВидимостьДокументаПоступления(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНМатериалыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Остатки и резервы
	ОбработатьВыборЭлементаТабличнойЧасти(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЗНМатериалыЕдиницаИзмеренияПриИзменении(Элемент)
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
	СтрокаТабличнойЧасти = Элементы["ЗНМатериалы"].ТекущиеДанные;
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти, 
		"СерииНоменклатурыМатериалы", 
		НЕ ЗаказНарядВСостоянииВыполнения И КэшЗначений.ПередачаТоваровМеждуОрганизациями);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсполнители

&НаКлиенте
Процедура ИсполнителиСотрудникПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Исполнители.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("НаДату", Объект.Дата);
	СтруктураДанные.Вставить("Организация", Компания);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("Сотрудник", СтрокаТабличнойЧасти.Сотрудник);
	
	СтруктураДанные = ПолучитьДанныеСотрудникаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ВидНачисленияУдержания = СтруктураДанные.ВидНачисленияУдержания;
	СтрокаТабличнойЧасти.РазмерНачисленияУдержания = СтруктураДанные.Сумма;
	СтрокаТабличнойЧасти.КТУ = 1;
	
КонецПроцедуры // ИсполнителиСотрудникПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалыЗаказчика

&НаКлиенте
Процедура ЗНМатериалыЗаказчикаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТабличнойЧасти.Количество = НовоеКоличествоПриИзмененииНоменклатуры;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНМатериалыЗаказчикаНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗНМатериалыЗаказчика.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьСбросКоличества И СбрасыватьКоличество
		И СтрокаТабличнойЧасти.Количество <> НовоеКоличествоПриИзмененииНоменклатуры Тогда
		
		ДопПараметр = Новый Структура();
		ДопПараметр.Вставить("Элемент", Элемент);
		ДопПараметр.Вставить("Количество", СтрокаТабличнойЧасти.Количество);
		Оповещение = Новый ОписаниеОповещения("ЗНМатериалыЗаказчикаПодтверждениеСбросаКоличестваЗавершение",
			ЭтотОбъект, ДопПараметр);
		ОткрытьФорму("ОбщаяФорма.ПодтверждениеСбросаКоличества", , , , , , Оповещение);
		
	Иначе
		
		Если СбрасыватьКоличество Тогда
			НовоеКоличество = НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
		ЗНМатериалыЗаказчикаНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество);
		
	КонецЕсли;	
	
КонецПроцедуры // МатериалыНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗНМатериалыЗаказчикаПодтверждениеСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗапрашиватьСбросКоличества = Результат.ЗапрашиватьСбросКоличества;
		Если НЕ ЗапрашиватьСбросКоличества Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		КонецЕсли;
		Если Результат.СбрасыватьКоличество Тогда
			НовоеКоличество = Результат.НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = ДополнительныеПараметры.Количество;
		КонецЕсли;
	Иначе
		НовоеКоличество = ДополнительныеПараметры.Количество;
	КонецЕсли;
	
	ЗНМатериалыЗаказчикаНоменклатураПриИзмененииПродолжить(ДополнительныеПараметры.Элемент, НовоеКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНМатериалыЗаказчикаНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество)

	СтрокаТабличнойЧасти = Элементы.ЗНМатериалыЗаказчика.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Компания);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("ДатаОбработки", 		Объект.Дата); 
	
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, СтрокаТабличнойЧасти, СтруктураДанные);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = НовоеКоличество;
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если СтруктураДанные.ИспользоватьХарактеристики
		Тогда
		СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗНМатериалыЗаказчикаНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти = Элементы.ЗНМатериалыЗаказчика.ТекущиеДанные;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗНМатериалыЗаказчикаКомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	СтрокаТабличнойЧасти = Элементы.ЗНМатериалыЗаказчика.ТекущиеДанные;
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("СтрокаТабличнойЧасти", СтрокаТабличнойЧасти);
	Оповещение = Новый ОписаниеОповещения("ЗНМатериалыЗаказчикаКомментарийЗавершениеВвода", ЭтотОбъект, ДопПараметры);
	ПоказатьВводСтроки(Оповещение, Элемент.ТекстРедактирования, НСтр("ru='Комментарий'"), ,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНМатериалыЗаказчикаКомментарийЗавершениеВвода(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		СтрокаТабличнойЧасти = ДополнительныеПараметры.СтрокаТабличнойЧасти;
		СтрокаТабличнойЧасти.Комментарий = Результат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРесурсыПредприятия

&НаКлиенте
Процедура РесурсыПредприятияРесурсПредприятияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РесурсыПредприятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Ресурс", ТекущиеДанные.РесурсПредприятия);
	
	ТекущиеДанные.Мощность = 1;
	
	ПланированиеРесурсовУНФКлиент.ОчиститьДанныеСтроки(ТекущиеДанные);
	ЗаполнитьДанныеТаблицыРесурсовНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияСтартПриИзменении(Элемент)
	ПриИзмененииПериода(Истина)
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияСтартВремяПриИзменении(Элемент)
	ПриИзмененииПериода(Истина)
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияДниПриИзменении(Элемент)
	ЗадатьОкончаниеПериода();
	УстановитьДоступностьПовторов();
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияВремяПриИзменении(Элемент)
	ЗадатьОкончаниеПериода();
	УстановитьДоступностьПовторов();
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияФинишПриИзменении(Элемент)
	ПриИзмененииПериода()
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияФинишВремяПриИзменении(Элемент)
	ПриИзмененииПериода()
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияРасписаниеПредставлениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.РесурсыПредприятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	ДатаСтроки = День(ТекущиеДанные.Старт);
	
	ПараметрыОповещения = Новый Структура;
	
	Оповещение = Новый ОписаниеОповещения("ПослеОкончанияРедактированияРасписания", ЭтотОбъект, ПараметрыОповещения);
	
	СтруктураПовторов = Новый Структура;
	СтруктураПовторов.Вставить("ИнтервалПовторения", ТекущиеДанные.ИнтервалПовторения);
	СтруктураПовторов.Вставить("Пн", ТекущиеДанные.Пн);
	СтруктураПовторов.Вставить("Вт", ТекущиеДанные.Вт);
	СтруктураПовторов.Вставить("Ср", ТекущиеДанные.Ср);
	СтруктураПовторов.Вставить("Чт", ТекущиеДанные.Чт);
	СтруктураПовторов.Вставить("Пт", ТекущиеДанные.Пт);
	СтруктураПовторов.Вставить("Сб", ТекущиеДанные.Сб);
	СтруктураПовторов.Вставить("Вс", ТекущиеДанные.Вс);
	СтруктураПовторов.Вставить("ПоследнийДеньМесяца", ТекущиеДанные.ПоследнийДеньМесяца);
	СтруктураПовторов.Вставить("ДатаПовторения", ТекущиеДанные.ДатаПовторения);
	СтруктураПовторов.Вставить("ДеньНеделиМесяца", ТекущиеДанные.ДеньНеделиМесяца);
	СтруктураПовторов.Вставить("ДатаСтроки", ДатаСтроки);
	СтруктураПовторов.Вставить("ТекДеньНедели", ДеньНедели(ТекущиеДанные.Старт));
	СтруктураПовторов.Вставить("НомерНеделиМесяца", ТекущиеДанные.НомерНеделиМесяца);
	СтруктураПовторов.Вставить("ПериодСтроки", ТекущиеДанные.Старт);
	СтруктураПовторов.Вставить("НомерМесяца", ТекущиеДанные.НомерМесяца);

	ПараметрыОткрытия = Новый Структура("Повторяемость, СтруктураПовторов", ТекущиеДанные.ВидПовтора, СтруктураПовторов);
	
	ОткрытьФорму("Обработка.ПланировщикРесурсов.Форма.ФормаРедактированияРасписания", ПараметрыОткрытия, ЭтотОбъект, , , ,
		Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияВидЗавершенияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РесурсыПредприятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Если ТекущиеДанные.ВидЗавершения = ПредопределенноеЗначение("Перечисление.ВидыЗавершенияПовторовРасписания.ПоДате") Тогда
		ТекущиеДанные.ЗавершатьПосле = НачалоДня(ТекущиеДанные.Финиш+86400);
		ТекущиеДанные.РасшифровкаСчетчика = "";
	ИначеЕсли ТекущиеДанные.ВидЗавершения = ПредопределенноеЗначение("Перечисление.ВидыЗавершенияПовторовРасписания.ПоСчетчику") Тогда
		ТекущиеДанные.ЗавершатьПосле = 1;
		ТекущиеДанные.РасшифровкаСчетчика = "раза";
	Иначе
		ТекущиеДанные.РасшифровкаСчетчика = "";
		ТекущиеДанные.ЗавершатьПосле = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияЗавершатьПослеПриИзменении(Элемент)
		ТекущиеДанные = Элементы.РесурсыПредприятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Если ТекущиеДанные.ВидЗавершения = ПредопределенноеЗначение("Перечисление.ВидыЗавершенияПовторовРасписания.ПоСчетчику")
										И ЗначениеЗаполнено(ТекущиеДанные.ЗавершатьПосле) Тогда 
		
		РасшифровкаСчетчика = ПланированиеРесурсовУНФКлиент.ПредметИсчисления(
		ТекущиеДанные.ЗавершатьПосле,
		НСтр("ru = 'раза'"),
		НСтр("ru = 'раз'"),
		НСтр("ru = 'раз'"),
		"м");
		
		ТекущиеДанные.РасшифровкаСчетчика = РасшифровкаСчетчика;
	Иначе
		ТекущиеДанные.РасшифровкаСчетчика = "";
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.ЗавершатьПосле) = Тип("Дата")
		И ЗначениеЗаполнено(ТекущиеДанные.ЗавершатьПосле)
		И ЗначениеЗаполнено(ТекущиеДанные.Старт)
		И ТекущиеДанные.ЗавершатьПосле<НачалоДня(ТекущиеДанные.Старт)
		Тогда
		ТекущиеДанные.ЗавершатьПосле=НачалоДня(ТекущиеДанные.Старт)
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоставка

&НаКлиенте
Процедура ГрузоотправительОнЖеПриИзменении(Элемент)
	
	Если ГрузоотправительОнЖе Тогда
		Объект.Грузоотправитель = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	КонецЕсли;

	УстановитьОтображениеГрузоперевозки();

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательОнЖеПриИзменении(Элемент)
	
	Если ГрузополучательОнЖе Тогда
		Объект.Грузополучатель = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	КонецЕсли;

	УстановитьОтображениеГрузоперевозки();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОткрытьФормуВыбораАдресаИОбработатьРезультат(
		Элемент,
		Объект,
		"АдресДоставки",
		СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиПриИзменении(Элемент)
	
	ПриИзмененииПредставленияАдреса(
	Элемент.ТекстРедактирования,
	Объект["АдресДоставкиЗначение"]);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРеквизитыДоставкиНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("РазвернутьГруппы", "ГруппаГрузы,ГруппаПеревозка");
	ПараметрыФормы.Вставить("ТекущийЭлемент", "Автомобиль");
	ОткрытьФормуРеквизитыПечати(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Объект.АдресДоставки = ВыбранноеЗначение.АдресДоставки;
	Объект.АдресДоставкиЗначение = ВыбранноеЗначение.АдресДоставкиЗначение;
	Объект.АдресДоставкиЗначенияПолей = ВыбранноеЗначение.АдресДоставкиЗначенияПолей;
	
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОчистка(Элемент, СтандартнаяОбработка)
	АдресДоставкиПриИзменении(Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредоплата

&НаКлиенте
Процедура ПредоплатаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные.ОплатаСертификатом Тогда
		СтандартнаяОбработка = Ложь;
		РедактироватьОплату();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПриИзменении(Элемент)
	
	Элементы.ЗНГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокОплаты(Объект.СпособЗачетаПредоплаты, Объект.Предоплата);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьОплату()
	
	Оповещение = Новый ОписаниеОповещения("РедактироватьОплатуЗавершение", ЭтаФорма);
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("КОплате", ИтогВсего - Объект.Предоплата.Итог("СуммаРасчетов")
									+ Элементы.Предоплата.ТекущиеДанные.СуммаРасчетов);
	СтруктураПараметров.Вставить("ПодарочныйСертификат", Элементы.Предоплата.ТекущиеДанные.Документ);
	СтруктураПараметров.Вставить("НомерСертификата", Элементы.Предоплата.ТекущиеДанные.НомерСертификата);
	СтруктураПараметров.Вставить("Сумма", Элементы.Предоплата.ТекущиеДанные.СуммаРасчетов);
	СтруктураПараметров.Вставить("Документ", Объект.Ссылка);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаОплатыСертификатом", СтруктураПараметров,,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьОплатуЗавершение(Результат, Параметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		
		СтрокаОплаты = Элементы.Предоплата.ТекущиеДанные;
		
		СтрокаОплаты.Документ = Результат.ПодарочныйСертификат;
		СтрокаОплаты.НомерСертификата = Результат.НомерСертификата;
		СтрокаОплаты.СуммаРасчетов = Результат.Сумма;
		
		СтрокаОплаты.Курс = 
			?(СтрокаОплаты.Курс = 0,
				?(Объект.Курс = 0,
				1,
				Объект.Курс),
			СтрокаОплаты.Курс);
			
		СтрокаОплаты.Кратность =
			?(СтрокаОплаты.Кратность = 0,
				?(Объект.Кратность = 0,
				1,
				Объект.Кратность),
			СтрокаОплаты.Кратность);
			
		СтрокаОплаты.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
			СтрокаОплаты.СуммаРасчетов,
			СтрокаОплаты.Курс,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
			СтрокаОплаты.Кратность,
			?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаСуммаРасчетовПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
		
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
			?(Объект.Курс = 0,
			1,
			Объект.Курс),
		СтрокаТабличнойЧасти.Курс);
	
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
			?(Объект.Кратность = 0,
			1,
			Объект.Кратность),
		СтрокаТабличнойЧасти.Кратность);
	
	СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
		СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс,
		?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
		СтрокаТабличнойЧасти.Кратность,
		?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность));

КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКурсПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.ПриИзмененииКурсаВСтрокеПредоплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКурсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасчетыРаботаСФормамиКлиент.ПредоплатаКурсНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКратностьПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.ПриИзмененииКурсаВСтрокеПредоплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс);
	
	СтрокаТабличнойЧасти.Кратность = 1;
	
	СтрокаТабличнойЧасти.Курс =
		?(СтрокаТабличнойЧасти.СуммаРасчетов = 0,
			1,
			СтрокаТабличнойЧасти.СуммаПлатежа
		  / СтрокаТабличнойЧасти.СуммаРасчетов
		  * Объект.Курс);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПередУдалением(Элемент, Отказ)
	Если Не Отказ И Элемент.ТекущиеДанные.ОплатаБонусами Тогда
		Для Каждого СтрокаЗапаса Из Объект.Запасы Цикл
			СтрокаЗапаса.СуммаСкидкиОплатыБонусом = 0;
			ПараметрыРасчета = Новый Структура("РассчитатьСуммуСкидки, СброситьФлагСкидкиРассчитаны", Истина, Истина);
			РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", СтрокаЗапаса, ПараметрыРасчета);
		КонецЦикла;
		Для Каждого СтрокаРаботы Из Объект.Работы Цикл
			СтрокаРаботы.СуммаСкидкиОплатыБонусом = 0;
			ПараметрыРасчета = Новый Структура("РассчитатьСуммуСкидки, СброситьФлагСкидкиРассчитаны", Истина, Истина);
			РассчитатьСуммуВСтрокеТабличнойЧасти("Работы", СтрокаРаботы, ПараметрыРасчета);
		КонецЦикла;
		ОбновитьПодвалФормы();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗНДоговорСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Владелец", Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоров.СПокупателем"));
	ПараметрыФормы.Вставить("ОповеститьОЗаписиДоговора", Истина);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПлатежныйКалендарь

&НаКлиенте
Процедура ПлатежныйКалендарьПередУдалением(Элемент, Отказ)
	
	Если Объект.ПлатежныйКалендарь.Количество() = 1 Тогда
		Объект.ЗапланироватьОплату = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныйКалендарьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Объект.ЗапланироватьОплату = Истина;
		ТекущаяСтрока = Элемент.ТекущиеДанные;
		ПроцентОплатыИтог = Объект.ПлатежныйКалендарь.Итог("ПроцентОплаты");
		
		Если ПроцентОплатыИтог > 100 Тогда
			ТекущаяСтрока.ПроцентОплаты = ТекущаяСтрока.ПроцентОплаты - (ПроцентОплатыИтог - 100);
		КонецЕсли;
		
		ТекущаяСтрока.СуммаОплаты = Окр((Объект.Запасы.Итог("Всего") + Объект.Работы.Итог("Всего")) * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
		ТекущаяСтрока.СуммаНДСОплаты = Окр((Объект.Запасы.Итог("СуммаНДС") + Объект.Работы.Итог("СуммаНДС")) * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
		
		Если Объект.ПлатежныйКалендарь.Итог("ПроцентОплаты") = 100 И Объект.ПлатежныйКалендарь.Итог("СуммаОплаты") <> ИтогВсего Тогда
			ОбработатьИтогиПлатежныйКалендарь();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПлатежныйКалендарьПроцентОплатыПриИзменении(Элемент)
	
	Если Элементы.РедактироватьСписком.Пометка Тогда
		ТекущаяСтрока = Элементы.СписокПлатежныйКалендарь.ТекущиеДанные;
	Иначе
		ТекущаяСтрока = Объект.ПлатежныйКалендарь[0];
	КонецЕсли;
	ПроцентОплатыИтог = Объект.ПлатежныйКалендарь.Итог("ПроцентОплаты");
	
	Если ПроцентОплатыИтог > 100 Тогда
		ТекущаяСтрока.ПроцентОплаты = ТекущаяСтрока.ПроцентОплаты - (ПроцентОплатыИтог - 100);
	КонецЕсли;
	
	ТекущаяСтрока.СуммаОплаты = Окр((Объект.Запасы.Итог("Всего") + Объект.Работы.Итог("Всего")) * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
	ТекущаяСтрока.СуммаНДСОплаты = Окр((Объект.Запасы.Итог("СуммаНДС") + Объект.Работы.Итог("СуммаНДС")) * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
	
	Если Объект.ПлатежныйКалендарь.Итог("ПроцентОплаты") = 100 И Объект.ПлатежныйКалендарь.Итог("СуммаОплаты") <> ИтогВсего Тогда
		ОбработатьИтогиПлатежныйКалендарь();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПлатежныйКалендарьСуммаОплатыПриИзменении(Элемент)
	
	Если Элементы.РедактироватьСписком.Пометка Тогда
		ТекущаяСтрока = Элементы.СписокПлатежныйКалендарь.ТекущиеДанные;
	Иначе
		ТекущаяСтрока = Объект.ПлатежныйКалендарь[0];
	КонецЕсли;
	ЗапасыРаботыИтог = Объект.Запасы.Итог("Всего") + Объект.Работы.Итог("Всего");
	ПлатежныйКалендарьИтог = Объект.ПлатежныйКалендарь.Итог("СуммаОплаты");
	
	Если ПлатежныйКалендарьИтог > ЗапасыРаботыИтог Тогда
		ТекущаяСтрока.СуммаОплаты = ТекущаяСтрока.СуммаОплаты - (ПлатежныйКалендарьИтог - ЗапасыРаботыИтог);
	КонецЕсли;
	
	ТекущаяСтрока.ПроцентОплаты = ?(ЗапасыРаботыИтог = 0, 0, Окр(ТекущаяСтрока.СуммаОплаты / ЗапасыРаботыИтог * 100, 2, 1));
	ТекущаяСтрока.СуммаНДСОплаты = Окр((Объект.Запасы.Итог("СуммаНДС") + Объект.Работы.Итог("СуммаНДС")) * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
	
	Если Объект.ПлатежныйКалендарь.Итог("ПроцентОплаты") = 100 И Объект.ПлатежныйКалендарь.Итог("СуммаОплаты") <> ИтогВсего Тогда
		ОбработатьИтогиПлатежныйКалендарь();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПлатежныйКалендарьСуммаНДСОплатыПриИзменении(Элемент)
	
	Если Элементы.РедактироватьСписком.Пометка Тогда
		ТекущаяСтрока = Элементы.СписокПлатежныйКалендарь.ТекущиеДанные;
	Иначе
		ТекущаяСтрока = Объект.ПлатежныйКалендарь[0];
	КонецЕсли;
	
	ЗапасыРаботыИтог = Объект.Запасы.Итог("СуммаНДС") + Объект.Работы.Итог("СуммаНДС");
	ПлатежныйКалендарьИтог = Объект.ПлатежныйКалендарь.Итог("СуммаНДСОплаты");
	
	Если ПлатежныйКалендарьИтог > ЗапасыРаботыИтог Тогда
		ТекущаяСтрока.СуммаНДСОплаты = ТекущаяСтрока.СуммаНДСОплаты - (ПлатежныйКалендарьИтог - ЗапасыРаботыИтог);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьИтогиПлатежныйКалендарь()
	
	ТаблицаРаспределения = Объект.ПлатежныйКалендарь.Выгрузить();
	РасчетыПроведениеДокументов.РаспределитьСуммуПоКолонкеТаблицы(ИтогВсего, ТаблицаРаспределения, "СуммаОплаты",
		"ПроцентОплаты");
	Объект.ПлатежныйКалендарь.Загрузить(ТаблицаРаспределения);
	
КонецПроцедуры
 
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтмененныеЗапасы

&НаКлиенте
Процедура ОтмененныеЗапасыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
	ТекущийЗапас = Элементы.ОтмененныеЗапасы.ТекущиеДанные;
	Если ТекущийЗапас = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийЗапас.ПричинаОтмены = ВыбранноеЗначение;
	ТекущийЗапас.ПричинаОтменыДатаЗапрета = Строка(ВыбранноеЗначение);
	ВыбраннаяПричинаОтменыЗапаса = ВыбранноеЗначение;
	
	Если НЕ ТекущийЗапас.Редактируется Тогда
		Модифицированность = Истина;
		НастроитьЭлементыОтменыТоваров();
		Возврат;
	КонецЕсли;
	
	ИндексОтмененнегоЗапаса = Объект.Запасы.НайтиСтроки(Новый Структура("КлючСвязиОтмененные", ТекущийЗапас.КлючСвязиОтмененные));
	
	Если ИндексОтмененнегоЗапаса.Количество() = 0 Тогда
		Модифицированность = Истина;
		НастроитьЭлементыОтменыТоваров();
		Возврат;
	КонецЕсли;
	
	Для Каждого Запас Из ИндексОтмененнегоЗапаса Цикл
		Запас.ПричинаОтмены = ВыбраннаяПричинаОтменыЗапаса;
		Запас.ПричинаОтменыДатаЗапрета = ВыбраннаяПричинаОтменыЗапаса;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтмененныеЗапасыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент = Элементы.ОтмененныеЗапасыВернутьТовар Тогда
		
		СтрокаТабличнойЧасти = Элементы.ОтмененныеЗапасы.ТекущиеДанные; 
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти.ЭтоРабота Тогда
			ИмяТЧ = "Работы";
		Иначе
			ИмяТЧ = "Запасы";
			ОбработатьВозвратТоваров(СтрокаТабличнойЧасти);
			Возврат;
		КонецЕсли;
				
		СтрокаЗапаса = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("КлючСвязиОтмененные", 
		СтрокаТабличнойЧасти.КлючСвязиОтмененные));
		
		Если СтрокаТабличнойЧасти.Редактируется И СтрокаЗапаса.Количество() <> 0 Тогда
			
			НоваяСтрока = СтрокаЗапаса[0];
			ОтменитьВернутьЗапасы(НоваяСтрока,ИмяТЧ);
			Элементы[ИмяТЧ].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Элементы[ИмяТЧ].ВыделенныеСтроки.Очистить();
			Элементы[ИмяТЧ].ВыделенныеСтроки.Добавить(НоваяСтрока.ПолучитьИдентификатор());
			
			Модифицированность = Истина;
			ОтображатьГруппуОтмененных = Истина;
			НастроитьЭлементыОтменыТоваров();
			Возврат;
			
		Иначе
			НоваяСтрока = Объект[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти,,"ПричинаОтмены");
			Элементы[ИмяТЧ].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Элементы[ИмяТЧ].ВыделенныеСтроки.Очистить();
			Элементы[ИмяТЧ].ВыделенныеСтроки.Добавить(НоваяСтрока.ПолучитьИдентификатор());
			
			Партия = Неопределено;
			
			Если НоваяСтрока.Свойство("Партия") Тогда
				Партия = НоваяСтрока.Партия;
			КонецЕсли;
			
			Если ИмяТЧ = "Запасы" Тогда
				ЗапасыНоменклатураПриИзмененииПродолжить(Элементы.ЗапасыНоменклатура, НоваяСтрока.Количество, НоваяСтрока, Партия);
			Иначе
				РаботыНоменклатураПриИзмененииЗначения(Элементы.ЗНРаботыНоменклатура, Истина, НоваяСтрока);
			КонецЕсли;
			
			Индекс = Объект.ОтмененныеЗапасы.Индекс(СтрокаТабличнойЧасти);
			Объект.ОтмененныеЗапасы.Удалить(Индекс);
			Модифицированность = Истина;
			
			ОтображатьГруппуОтмененных = Истина;
			НастроитьЭлементыОтменыТоваров();
		КонецЕсли;		
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ОтмененныеЗапасыПричинаОтменыДатаЗапрета Тогда
		
		СтрокаТабличнойЧасти = Элементы.ОтмененныеЗапасы.ТекущиеДанные;
		Если СтрокаТабличнойЧасти = Неопределено Тогда 
			Возврат 
		КонецЕсли;
		
		ПараметрыПричины = Новый Структура("РежимВыбора", Истина);
		ОткрытьФорму("Справочник.ПричиныОтменыЗаказа.ФормаВыбора", ПараметрыПричины, Элементы.ОтмененныеЗапасы);
			
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтмененныеЗапасыПослеУдаления(Элемент)
	ОтображатьГруппуОтмененных = Истина;
	НастроитьЭлементыОтменыТоваров();
КонецПроцедуры

&НаКлиенте
Процедура ОтмененныеЗапасыПричинаОтменыПриИзменении(Элемент)
	
	ТекущаяСтрокаОтмененных = Элементы.ОтмененныеЗапасы.ТекущиеДанные;
	Если ТекущаяСтрокаОтмененных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбраннаяПричинаОтменыЗапаса = ТекущаяСтрокаОтмененных.ПричинаОтмены;
	
	Если НЕ ТекущаяСтрокаОтмененных.Редактируется Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрокаОтмененных.ЭтоРабота Тогда
		СтрокаЗапаса = Объект.Работы.НайтиСтроки(Новый Структура("КлючСвязиОтмененные", ТекущаяСтрокаОтмененных.КлючСвязиОтмененные));
	Иначе
		СтрокаЗапаса = Объект.Запасы.НайтиСтроки(Новый Структура("КлючСвязиОтмененные", ТекущаяСтрокаОтмененных.КлючСвязиОтмененные));
	КонецЕсли;
	
	Если СтрокаЗапаса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаЗапаса[0].ПричинаОтмены = ТекущаяСтрокаОтмененных.ПричинаОтмены;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоОстаткамРасходныхОрдеров(Команда)
	
	Отказ = ЗаполнениеПоОрдерамНеВозможно();
	
	Если Отказ Тогда
		Возврат 
	КонецЕсли;
	
	Если Объект.Запасы.Количество() Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросОчиститьЗапасыИЗаполнитьПоОрдерам", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Перед заполнением табличная часть будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат
	КонецЕсли;
	
	Объект.Запасы.Очистить();
	Объект.СведенияПрослеживаемости.Очистить();
	Объект.СерииНоменклатуры.Очистить();
	
	Если Объект.ПоложениеДокументаПоступления = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке")
		И Не ЗначениеЗаполнено(Объект.ДокументПоступления) Тогда
		Объект.ПоложениеДокументаПоступления = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");
		УстановитьВидимостьДокументаПоступления(ЭтаФорма);
	КонецЕсли;
		
	ИдентификаторыНовыхСтрок = Новый Массив;
	ЗагрузитьПоОстаткамНаСервере(ИдентификаторыНовыхСтрок);
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", СтрокаТабличнойЧасти);
	КонецЦикла;
	
	Если Объект.Запасы.Количество() Тогда
		ЭтаФорма.Модифицированность = Истина;
		ОбновитьПодвалФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьЗапасыИЗаполнитьПоОрдерам(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда 
		Возврат 
	КонецЕсли;
	
	Объект.Запасы.Очистить();
	Объект.СведенияПрослеживаемости.Очистить();
	Объект.СерииНоменклатуры.Очистить();
	
	Если Объект.ПоложениеДокументаПоступления = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке")
		И Не ЗначениеЗаполнено(Объект.ДокументПоступления) Тогда
		Объект.ПоложениеДокументаПоступления = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");
		УстановитьВидимостьДокументаПоступления(ЭтаФорма);
	КонецЕсли;
		
	ИдентификаторыНовыхСтрок = Новый Массив;
	ЗагрузитьПоОстаткамНаСервере(ИдентификаторыНовыхСтрок);
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", СтрокаТабличнойЧасти);
	КонецЦикла;
	
	Если Объект.Запасы.Количество() Тогда
		ЭтаФорма.Модифицированность = Истина;
		ОбновитьПодвалФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРасходныеОрдераПоНоменклатуре(Команда)
	
	Отказ = ЗаполнениеПоОрдерамНеВозможно();
	
	Если Отказ Тогда
		Возврат 
	КонецЕсли;
	
	Если Не Объект.Запасы.Количество() Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Распределение производится по номенклатуре которая предварительно добавлена в таблицу.'"),, НСтр("ru = 'Добавьте номенклатуру в таблицу'"));
		Возврат
	КонецЕсли;
	
	Объект.СерииНоменклатуры.Очистить();
	
	ЗаполнитьРасходныеОрдераПоНоменклатуреСервер();
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда Продолжить КонецЕсли;
		
		ПараметрыРасчета = Новый Структура("РассчитатьЦену", Истина);
		
		РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументуПоступления(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоРасходномуОрдеру", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Документ будет перезаполнен по ""Расходному ордеру"". Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРасходномуОрдеру(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоДокументу("ДокументПоступления");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторнаяПечатьЧека()
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПовторнаяПечатьЧекаПродолжение", ЭтотОбъект);
		МассивОборудования = Новый Массив;
		МассивОборудования.Добавить("ФискальныйРегистратор");
		МассивОборудования.Добавить("ККТ");
		ОтборОборудования = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();
		ОтборОборудования.Вставить("ТипыПО", МассивОборудования);
		ОтборОборудования.Вставить("Организация", Объект.Организация);
		МенеджерОборудованияКлиент.ВыбратьУстройство(ОписаниеОповещения, ОтборОборудования,
				НСтр("ru='Выберите оборудование'"), НСтр("ru='Оборудование не подключено.'"));
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторнаяПечатьЧекаПродолжение(РезультатВыбора, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		ИдентификаторУстройстваФискальногоРегистратора = РезультатВыбора.ИдентификаторУстройства;
	КонецЕсли;
	
	Если ИдентификаторУстройстваФискальногоРегистратора = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗавершитьПовторнуюПечатьФискальногоЧека", ЭтотОбъект);
	
	Если ЗначениеЗаполнено(ИдентификаторУстройстваФискальногоРегистратора) Тогда
		
		ПараметрыОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПечатьКопииЧека();
		ПараметрыОперации.ДокументСсылка = Объект.Ссылка;
		ПараметрыОперации.Аппаратно = Ложь;
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПечатьКопииЧека(ОповещениеПриЗавершении,
			ЭтаФорма, ИдентификаторУстройстваФискальногоРегистратора, ПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПовторнуюПечатьФискальногоЧека(РезультатВыполнения, ПараметрДействия) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РезультатВыполнения, "Результат") И НЕ РезультатВыполнения.Результат Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Произошла ошибка при попытке повторной печати фискального чека.
			|Причина: %1'"), РезультатВыполнения.ОписаниеОшибки);
		ПоказатьПредупреждение(, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКЗаказуВСервисе(Команда)
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДокументОснование", Объект.Ссылка);
	ПараметрыФормы.Вставить("ОрганизацияБизнесСети", Объект.Организация);
	ПараметрыФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыФормы.Вставить("ИдентификаторЗаказа", ИдентификаторЗаказаНаДоставку);
	ПараметрыФормы.Вставить("РежимМастера", 2);
	СервисДоставкиКлиент.ОткрытьФормуКарточкиЗаказаНаДоставку(ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	
КонецПроцедуры // РедактироватьЦеныИВалюту()

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект,
		Новый Структура("ТекШтрихкод", ТекШтрихкод));
	
	#Если МобильныйКлиент Тогда
	ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду", , , , , , ОбработкаЗавершения);
	#Иначе
	ПоказатьВводЗначения(ОбработкаЗавершения, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, СокрЛП(ДополнительныеПараметры.ТекШтрихкод), СокрЛП(Результат));
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
	КонецЕсли;
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
		
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // ПоискПоШтрихкоду()

&НаКлиенте
Процедура ПолучитьВесЗавершение(Параметры) Экспорт
	
	СтрокаТабличнойЧасти = Параметры;
	РассчитатьСуммуВСтрокеТабличнойЧасти(, СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНПолучитьВес(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтотОбъект, "Запасы");
	
КонецПроцедуры // ПолучитьВес()

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", "Запасы");
	ПодключаемоеОборудованиеУНФКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина, ДополнительныеПараметры);
	
КонецПроцедуры

// Конец ПодключаемоеОборудование

&НаКлиенте
Процедура ЗаполнитьПоСпецификации(Команда)
	
	ТекущаяСтрокаТЧ = Элементы.Работы.ТекущиеДанные;
	
	Если ТекущаяСтрокаТЧ = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана строка основной табличной части.'"), ,
			"Объект.Работы");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрокаТЧ.Спецификация) Тогда
		КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Работы", ТекущаяСтрокаТЧ.НомерСтроки,
			"Спецификация");
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указана спецификация'"), , КонтекстноеПоле);
		Возврат;
	КонецЕсли;
	
	РезультатПоиска = Объект.Материалы.НайтиСтроки(Новый Структура("КлючСвязи", Элементы.ЗНМатериалы.ОтборСтрок["КлючСвязи"]));
	
	Если РезультатПоиска.Количество() <> 0 Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоСпецификацииЗавершение", ЭтотОбъект,
			Новый Структура("РезультатПоиска", РезультатПоиска)), НСтр(
			"ru = 'Табличная часть ""Материалы"" будет перезаполнена. Продолжить выполнение операции?'"),
			РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПоСпецификацииФрагмент(РезультатПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСпецификацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РезультатПоиска = ДополнительныеПараметры.РезультатПоиска;
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоСпецификацииФрагмент(РезультатПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСпецификацииФрагмент(Знач РезультатПоиска)
	
	Перем ИндексУдаления, СтрокаПоиска, СтрОтбора, ТекущаяСтрокаТЧ;
	
	Модифицированность = Истина;
	
	Для каждого СтрокаПоиска Из РезультатПоиска Цикл
		ИндексУдаления = Объект.Материалы.Индекс(СтрокаПоиска);
		Объект.Материалы.Удалить(ИндексУдаления);
	КонецЦикла;
	
	ТекущаяСтрокаТЧ = Элементы.Работы.ТекущиеДанные;
	ЗаполнитьПоСпецификацииНаСервере(ТекущаяСтрокаТЧ.Спецификация, ТекущаяСтрокаТЧ.Кратность);
	
	СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", Элементы.ЗНМатериалы.ОтборСтрок["КлючСвязи"]);
	Элементы.ЗНМатериалы.ОтборСтрок = СтрОтбора;
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // ЗаполнитьПоСпецификации()

&НаКлиенте
Процедура ЗаполнитьМатериалыИзВсехСпецификаций(Команда)
	
	Если НЕ Объект.Работы.Количество() > 0 Тогда
		
		Сообщение		= Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Заполните табличную часть ""Работы"".'");
		Сообщение.ПутьКДанным = "Работы";
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.Материалы.Количество() > 0 Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьМатериалыИзВсехСпецификацийЗавершение", ЭтотОбъект), НСтр(
			"ru = 'Для выполнения операции требуется очистить табличную часть ""Материалы"". Продолжить выполнение операции?'"),
			РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьМатериалыИзВсехСпецификацийФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМатериалыИзВсехСпецификацийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьМатериалыИзВсехСпецификацийФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМатериалыИзВсехСпецификацийФрагмент()
	
	Модифицированность = Истина;
	
	Объект.Материалы.Очистить();
	
	ЗаполнитьМатериалыПоВсемСпецификациямНаСервере();
	
	// Для ВЕБа повторим отбор, что бы корректно отобразить следующие ТЧ
	ИмяТабличнойЧасти = "Работы";
	ТабличныеЧастиУНФКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ЗНМатериалы");
	ТабличныеЧастиУНФКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "Исполнители");
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры //ЗаполнитьМатериалыИзВсехСпецификаций()

&НаКлиенте
Процедура ЗаполнитьПоРесурсамДляТекущейРаботы(Команда)
	
	ИмяТабличнойЧасти = "ТаблицаРаботы";
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтотОбъект, ИмяТабличнойЧасти) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаТЧ = Элементы.ТаблицаРаботы.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущаяСтрокаТЧ.Номенклатура) Тогда
		
		КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Работы", ТекущаяСтрокаТЧ.НомерСтроки,
			"Номенклатура");
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указана работа'"), , КонтекстноеПоле);
		Возврат;
		
	КонецЕсли;
	
	Если Объект.РесурсыПредприятия.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru = 'В табличной части ""Задействованные ресурсы"" нет записей.'"), , "Объект.РесурсыПредприятия");
		Возврат;
		
	КонецЕсли;
	
	РезультатПоиска = Объект.Исполнители.НайтиСтроки(Новый Структура("КлючСвязи",
		Элементы.Исполнители.ОтборСтрок["КлючСвязи"]));
	
	Если РезультатПоиска.Количество() <> 0 Тогда
		
		ТекстВопроса = НСтр(
			"ru = 'Табличная часть ""Исполнители"" для текущей работы будет перезаполнена. Продолжить выполнение операции?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоРесурсамДляТекущейРаботыЗавершение", ЭтотОбъект,
			Новый Структура("РезультатПоиска", РезультатПоиска)), ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПоРесурсамДляТекущейРаботыФрагмент(РезультатПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРесурсамДляТекущейРаботыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РезультатПоиска = ДополнительныеПараметры.РезультатПоиска;
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПоРесурсамДляТекущейРаботыФрагмент(РезультатПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРесурсамДляТекущейРаботыФрагмент(Знач РезультатПоиска)
	
	Перем ИндексУдаления, ИсполнителиКлючСвязи, СтрокаПоиска, СтрОтбора;
	
	Для каждого СтрокаПоиска Из РезультатПоиска Цикл
		
		ИндексУдаления = Объект.Исполнители.Индекс(СтрокаПоиска);
		Объект.Исполнители.Удалить(ИндексУдаления);
		
	КонецЦикла;
	
	ИсполнителиКлючСвязи = Элементы.Исполнители.ОтборСтрок["КлючСвязи"];
	ЗаполнитьТабличнуюЧастьИсполнителиПоРесурсамНаСервере(ИсполнителиКлючСвязи);
	
	СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", Элементы.Исполнители.ОтборСтрок["КлючСвязи"]);
	Элементы.Исполнители.ОтборСтрок = СтрОтбора;
	
КонецПроцедуры // ЗаполнитьПоРесурсамДляТекущейРаботы()

&НаКлиенте
Процедура ЗаполнитьПоРесурсамДляВсехРабот(Команда)
	
	ИмяТабличнойЧасти = "ТаблицаРаботы";
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтотОбъект, ИмяТабличнойЧасти) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.РесурсыПредприятия.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru = 'В табличной части ""Задействованные ресурсы"" нет записей'"), , "Объект.РесурсыПредприятия");
		Возврат;
	КонецЕсли;
	
	Если Объект.Исполнители.Количество() <> 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоРесурсамДляВсехРаботЗавершение", ЭтотОбъект), НСтр(
			"ru = 'Табличная часть ""Исполнители"" будет перезаполнена. Продолжить выполнение операции?'"),
			РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоРесурсамДляВсехРаботФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРесурсамДляВсехРаботЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоРесурсамДляВсехРаботФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРесурсамДляВсехРаботФрагмент()
	
	Перем СтрОтбора;
	
	Объект.Исполнители.Очистить();
	
	ЗаполнитьТабличнуюЧастьИсполнителиПоРесурсамНаСервере();
	
	СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", Элементы.Исполнители.ОтборСтрок["КлючСвязи"]);
	Элементы.Исполнители.ОтборСтрок = СтрОтбора;
	
КонецПроцедуры // ЗаполнитьПоРесурсамДляВсехРабот()

&НаКлиенте
Процедура ЗаполнитьПоБригадамДляТекущейРаботы(Команда)
	
	ИмяТабличнойЧасти = "ТаблицаРаботы";
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтотОбъект, ИмяТабличнойЧасти) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаТЧ = Элементы.ТаблицаРаботы.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущаяСтрокаТЧ.Номенклатура) Тогда
		КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Работы", ТекущаяСтрокаТЧ.НомерСтроки,
			"Номенклатура");
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указана работа'"), , КонтекстноеПоле);
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СписокМножественныВыбор", Истина);
	
	ОткрытьФорму("Справочник.Бригады.ФормаВыбора", ПараметрыОткрытия, , , , ,
		Новый ОписаниеОповещения("ЗаполнитьПоБригадамДляТекущейРаботыЗавершение1", ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоБригадамДляТекущейРаботыЗавершение1(Результат, ДополнительныеПараметры) Экспорт
	
	МассивБригад = Результат;
	Если МассивБригад = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПоиска = Объект.Исполнители.НайтиСтроки(Новый Структура("КлючСвязи", Элементы.Исполнители.ОтборСтрок["КлючСвязи"]));
	
	Если РезультатПоиска.Количество() <> 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоБригадамДляТекущейРаботыЗавершение", ЭтотОбъект,
			Новый Структура("МассивБригад, РезультатПоиска", МассивБригад, РезультатПоиска)), НСтр(
			"ru = 'Табличная часть ""Исполнители"" для текущей работы будет перезаполнена. Продолжить выполнение операции?'"),
			РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоБригадамДляТекущейРаботыФрагмент(МассивБригад, РезультатПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоБригадамДляТекущейРаботыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	МассивБригад = ДополнительныеПараметры.МассивБригад;
	РезультатПоиска = ДополнительныеПараметры.РезультатПоиска;
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоБригадамДляТекущейРаботыФрагмент(МассивБригад, РезультатПоиска);
	   	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоБригадамДляТекущейРаботыФрагмент(Знач МассивБригад, Знач РезультатПоиска)
	
	Перем ИндексУдаления, ИсполнителиКлючСвязи, СтрокаПоиска, СтрОтбора;
	
	Для каждого СтрокаПоиска Из РезультатПоиска Цикл
		ИндексУдаления = Объект.Исполнители.Индекс(СтрокаПоиска);
		Объект.Исполнители.Удалить(ИндексУдаления);
	КонецЦикла;
	
	ИсполнителиКлючСвязи = Элементы.Исполнители.ОтборСтрок["КлючСвязи"];
	ЗаполнитьТабличнуюЧастьИсполнителиПоБригадамНаСервере(МассивБригад, ИсполнителиКлючСвязи);
	
	СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", Элементы.Исполнители.ОтборСтрок["КлючСвязи"]);
	Элементы.Исполнители.ОтборСтрок = СтрОтбора;
	
КонецПроцедуры // ЗаполнитьПоБригадамДляТекущейРаботы()

&НаКлиенте
Процедура ЗаполнитьПоБригадамДляВсехРабот(Команда)
	
	ИмяТабличнойЧасти = "ТаблицаРаботы";
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтотОбъект, ИмяТабличнойЧасти) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СписокМножественныВыбор", Истина);
	
	ОткрытьФорму("Справочник.Бригады.ФормаВыбора", ПараметрыОткрытия, , , , ,
		Новый ОписаниеОповещения("ЗаполнитьПоБригадамДляВсехРаботЗавершение1", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоБригадамДляВсехРаботЗавершение1(Результат, ДополнительныеПараметры) Экспорт
	
	МассивБригад = Результат;
	Если МассивБригад = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Исполнители.Количество() <> 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоБригадамДляВсехРаботЗавершение", ЭтотОбъект,
			Новый Структура("МассивБригад", МассивБригад)), НСтр(
			"ru = 'Табличная часть ""Исполнители"" будет перезаполнена. Продолжить выполнение операции?'"),
			РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоБригадамДляВсехРаботФрагмент(МассивБригад);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоБригадамДляВсехРаботЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	МассивБригад = ДополнительныеПараметры.МассивБригад;
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоБригадамДляВсехРаботФрагмент(МассивБригад);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоБригадамДляВсехРаботФрагмент(Знач МассивБригад)
	
	Перем СтрОтбора;
	
	Объект.Исполнители.Очистить();
	
	ЗаполнитьТабличнуюЧастьИсполнителиПоБригадамНаСервере(МассивБригад);
	
	СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", Элементы.Исполнители.ОтборСтрок["КлючСвязи"]);
	Элементы.Исполнители.ОтборСтрок = СтрОтбора;
	
КонецПроцедуры // ЗаполнитьПоБригадамДляВсехРабот()

&НаКлиенте
Процедура РедактироватьСписком(Команда)
	
	Если Элементы.РедактироватьСписком.Пометка И Объект.ПлатежныйКалендарь.Количество() > 1 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьВозможностьРедактированияСпискомЗавершение", ЭтотОбъект);
		
		ПоказатьВопрос(
			ОписаниеОповещения,
			НСтр("ru='Все строки кроме первой будут удалены. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	Элементы.РедактироватьСписком.Пометка = НЕ Элементы.РедактироватьСписком.Пометка;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)

	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоПоступлениюВРемонтЗавершение", ЭтотОбъект), НСтр(
		"ru = 'Документ будет полностью перезаполнен по документу-основанию. Продолжить выполнение операции?'"),
		РежимДиалогаВопрос.ДаНет, 0);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлениюВРемонтЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.ДокументПоступления = Неопределено;
		ЗаполнитьПоДокументу();
		УстановитьВидимостьОтПользовательскихНастроек(Объект, ЭтотОбъект);
		ОбновитьПодвалФормы();
		Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(КэшЗначений.СчетФактураСсылка,,, Объект.ЭтоУниверсальныйДокумент);
		УстановитьВидимостьДоговора();
		
		// Прослеживаемость
		ОбновитьОтображениеПрослеживаемости(); 
		// Конец Прослеживаемость
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоЗаказуПокупателя()

&НаКлиенте
Процедура РежимГТДЗапасы(Команда)
	
	Если РежимОстаткиИРезервы Тогда
		Элементы.ОстаткиИРезервы.Пометка = Ложь;
		РежимОстаткиИРезервы = Ложь;
		ОбновитьОтображениеКолонокВРазрезеЗапасов(,Не РежимОстаткиИРезервы);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РежимГТДЗапасы", "Пометка", НЕ Элементы.РежимГТДЗапасы.Пометка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РежимГТДЗапасыКонтекст", "Пометка", НЕ Элементы.РежимГТДЗапасыКонтекст.Пометка);
	
	ИзменитьРежимРаботаГТД(Элементы.РежимГТДЗапасы.Пометка, "Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура РежимГТДМатериалы(Команда)
	
	Если РежимОстаткиИРезервы Тогда
		Элементы.ОстаткиИРезервы.Пометка = Ложь;
		Элементы.ОстаткиИРезервыМатериалы.Пометка = Ложь;
		РежимОстаткиИРезервы = Ложь;
		ОбновитьОтображениеКолонокВРазрезеЗапасов(,Не РежимОстаткиИРезервы);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗНМатериалыРежимГТДМатериалы", "Пометка", НЕ Элементы.ЗНМатериалыРежимГТДМатериалы.Пометка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗНМатериалыРежимГТДМатериалыКонтекст", "Пометка", НЕ Элементы.ЗНМатериалыРежимГТДМатериалыКонтекст.Пометка);
	
	ИзменитьРежимРаботаГТД(Элементы.ЗНМатериалыРежимГТДМатериалы.Пометка, "ЗНМатериалы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНМатериалыПодбор(Команда)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана строка основной табличной части.'"), ,
			"Объект.Работы");
		Возврат;
	КонецЕсли;
	
	ИмяТабличнойЧасти = "ЗНМатериалы";
	МаркерПодбора = "Работы";
	
	ПодборДляМатериаловВРаботах = Истина;
	
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти);
	
КонецПроцедуры // ЗНМатериалыПодбор()

&НаКлиенте
Процедура НастройкаФормы(Команда)
	
	ОткрытьФормуНастройки(Истина);
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элементы.ФормаНастройкаФормы, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура ШапкаТабличнаяЧасть(Команда)
	
	ОткрытьФормуНастройки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройки(ПередаватьВидДокумента)

	ЗаполнениеОбъектовУНФКлиент.ЗаполнитьПустыеПоложения(Объект, "ПоложениеСклада, ПоложениеВидаРабот");
	
	// 1. Формируем структуру параметров для заполнения формы "Настройка документа".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПоложениеСкладаВДокументахОтгрузки", 				Объект.ПоложениеСклада);
	СтруктураПараметров.Вставить("ПоложениеВидаРаботВЗаказНаряде", 					Объект.ПоложениеВидаРабот);
	СтруктураПараметров.Вставить("ИспользоватьТоварыВЗаказНаряде", 					Объект.ИспользоватьТовары);
	СтруктураПараметров.Вставить("ИспользоватьМатериалыЗаказчикаВЗаказНаряде", 		Объект.ИспользоватьМатериалыЗаказчика);
	СтруктураПараметров.Вставить("ИспользоватьМатериалыВЗаказНаряде", 				Объект.ИспользоватьМатериалы);
	
	Если ИспользоватьПодсистемуЗарплата Тогда
		СтруктураПараметров.Вставить("ИспользоватьЗарплатаИсполнителейВЗаказНаряде",	Объект.ИспользоватьЗарплатаИсполнителей);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	СтруктураПараметров.Вставить("Доступность", Новый Структура("ПоложениеСкладаВДокументахОтгрузки", НЕ РежимОстаткиИРезервы));
	ТекстУсловий = "";	
	Если РежимОстаткиИРезервы Тогда
		ТекстУсловий = НСтр("ru='При включенном режиме Остатки и резервы склад всегда указывается в табличной части.'");
	КонецЕсли;
	СтруктураПараметров.Вставить("ДополнениеПодсказкиПоложениеСклада", ТекстУсловий);
	
	СтруктураПараметров.Вставить("ПоказыватьКолонкуСодержаниеВЗаказеПокупателяЗапасы",
		ПоказыватьКолонкуСодержаниеВЗаказеПокупателяЗапасы); 
	СтруктураПараметров.Вставить("ПоказыватьКолонкуСодержаниеВЗаказеПокупателяРаботы",
		ПоказыватьКолонкуСодержаниеВЗаказеПокупателяРаботы); 
	
	Заголовки = Новый Структура();
	Заголовки.Вставить("ПоказыватьКолонкуСодержаниеВЗаказеПокупателяЗапасы", "Товары");
	Заголовки.Вставить("ПоказыватьКолонкуСодержаниеВЗаказеПокупателяРаботы", "Работы");
	
	Если Не ЗначениеЗаполнено(Объект.ПоложениеДокументаПоступления) Тогда 
		Объект.ПоложениеДокументаПоступления = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке");
	КонецЕсли;
	
	Если Элементы.ГруппаДокументПоступления.Видимость 
		Или (Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") И (Элементы.ЗапасыДокументПоступления.Видимость Или Элементы.ЗНМатериалыДокументПоступления.Видимость)) Тогда
		СтруктураПараметров.Вставить("ПоложениеДокументаПоступления", Объект.ПоложениеДокументаПоступления);
		СтруктураПараметров.Вставить("Доступность", Новый Структура("ПоложениеДокументаПоступления", Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке")));
	ИначеЕсли (Элементы.ЗапасыДокументПоступления.Видимость Или Элементы.ЗНМатериалыДокументПоступления.Видимость)
		И Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		СтруктураПараметров.Вставить("ПоложениеДокументаПоступления", Объект.ПоложениеДокументаПоступления);
		СтруктураПараметров.Вставить("Доступность", Новый Структура("ПоложениеДокументаПоступления", Ложь));
	Иначе
		СтруктураПараметров.Вставить("Видимость", Новый Структура("ПоложениеДокументаПоступления", Ложь));
	КонецЕсли;
	
	Заголовки.Вставить("ПоложениеДокументаПоступления", "Положение расходного ордера");
	
	СтруктураПараметров.Вставить("Заголовки", Заголовки);
	
	Если ПередаватьВидДокумента Тогда
		СтруктураПараметров.Вставить("ВидДокумента", "заказ-наряд");
	КонецЕсли;
	
	ОткрытьФорму(
	"ОбщаяФорма.ШапкаТабличнаяЧасть",
	СтруктураПараметров,,,,,
	Новый ОписаниеОповещения("ШапкаТабличнаяЧастьЗавершение", ЭтотОбъект));	

КонецПроцедуры

&НаКлиенте
Процедура ШапкаТабличнаяЧастьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// 2. Открываем форму "Настройка документа".
	СтруктураНастройкаДокумента = Результат;
	
	// 3. Применяем изменения, сделанные в форме "Настройка документа".
	Если ТипЗнч(СтруктураНастройкаДокумента) = Тип("Структура") И СтруктураНастройкаДокумента.БылиВнесеныИзменения Тогда
		
		ИзмененоПоложенияВидаРабот = Ложь;
		Если Объект.ПоложениеВидаРабот <> СтруктураНастройкаДокумента.ПоложениеВидаРаботВЗаказНаряде Тогда
			Объект.ПоложениеВидаРабот = СтруктураНастройкаДокумента.ПоложениеВидаРаботВЗаказНаряде;
			ИзмененоПоложенияВидаРабот = Истина;
			ЗаполнениеОбъектовУНФКлиент.ОбработатьИзменениеПоложения(Объект, "Работы", "ВидРабот", "ПоложениеВидаРабот");
		КонецЕсли; 
		Объект.ИспользоватьТовары 				= СтруктураНастройкаДокумента.ИспользоватьТоварыВЗаказНаряде;
		Объект.ИспользоватьМатериалыЗаказчика 	= СтруктураНастройкаДокумента.ИспользоватьМатериалыЗаказчикаВЗаказНаряде;
		Объект.ИспользоватьМатериалы 			= СтруктураНастройкаДокумента.ИспользоватьМатериалыВЗаказНаряде;
		
		Если ИспользоватьПодсистемуЗарплата Тогда
			Объект.ИспользоватьЗарплатаИсполнителей = СтруктураНастройкаДокумента.ИспользоватьЗарплатаИсполнителейВЗаказНаряде;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ДатаОтгрузки) Тогда
			Объект.ДатаОтгрузки = Объект.Финиш;
		КонецЕсли;
		
		ШапкаТабличнаяЧастьЗавершениеНаСервере(СтруктураНастройкаДокумента);
		ПоказыватьКолонкуСодержаниеВЗаказеПокупателяЗапасы = 
			СтруктураНастройкаДокумента.ПоказыватьКолонкуСодержаниеВЗаказеПокупателяЗапасы;

		ПоказыватьКолонкуСодержаниеВЗаказеПокупателяРаботы = 
			СтруктураНастройкаДокумента.ПоказыватьКолонкуСодержаниеВЗаказеПокупателяРаботы;
		
		УстановитьВидимостьОтПользовательскихНастроек(Объект, ЭтотОбъект);
		Если ИзмененоПоложенияВидаРабот Тогда
			ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен();
		КонецЕсли;
		
		Если РежимОстаткиИРезервы Тогда
			ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
		КонецЕсли;
		
		ОбновитьОтображениеКолонокВРазрезеЗапасов(,Не РежимОстаткиИРезервы);
		
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.БылиИзмененыПерсональныеНастройки Тогда
		НастройкиКоличества = ПолучитьНастройкиИзмененияКоличества();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиКоличества);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ШапкаТабличнаяЧастьЗавершениеНаСервере(СтруктураНастройкаДокумента)
	
	// Положение склада
	Если Объект.ПоложениеСклада<>СтруктураНастройкаДокумента.ПоложениеСкладаВДокументахОтгрузки Тогда
		Объект.ПоложениеСклада = СтруктураНастройкаДокумента.ПоложениеСкладаВДокументахОтгрузки;
		Если НЕ РежимОстаткиИРезервы Тогда
			Если СтруктураНастройкаДокумента.ПоложениеСкладаВДокументахОтгрузки<>ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
				Если Объект.Запасы.Количество() > 0 Тогда
					СтруктураПолей = СтруктурнаяЕдиницаИЯчейкаДляШапки(Объект.Запасы);
					ЗаполнитьЗначенияСвойств(Объект, СтруктураПолей);
				ИначеЕсли Объект.Материалы.Количество() > 0 Тогда
					СтруктураПолей = СтруктурнаяЕдиницаИЯчейкаДляШапки(Объект.Материалы);
					ЗаполнитьЗначенияСвойств(Объект, СтруктураПолей);
				КонецЕсли; 
			КонецЕсли; 
			Для каждого Строка Из Объект.Запасы Цикл
				Если НЕ Строка.ТипНоменклатурыЗапас Тогда
					Продолжить;
				КонецЕсли; 
				Строка.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
				Строка.Ячейка = Объект.Ячейка;
			КонецЦикла;
			Для каждого Строка Из Объект.Материалы Цикл
				Строка.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
				Строка.Ячейка = Объект.Ячейка;
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли;
	
	Если СтруктураНастройкаДокумента.Свойство("ПоложениеДокументаПоступления")
		И Объект.ПоложениеДокументаПоступления <> СтруктураНастройкаДокумента.ПоложениеДокументаПоступления Тогда
		Объект.ПоложениеДокументаПоступления = СтруктураНастройкаДокумента.ПоложениеДокументаПоступления;
		ЗаполнитьПризнакиИспользованияХарактеристик();
	КонецЕсли;
		
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
	ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита();
	
	УстановитьВидимостьДокументаПоступления(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСбросаКоличества(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтрокаПоиска", НСтр("ru = 'Сбрасывать количество при изменении номенклатуры'"));
	Оповещение = Новый ОписаниеОповещения("НастройкаСбросаКоличестваЗавершение", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.НастройкиПользователей.Форма.ФормаНастройкиПользователя", СтруктураПараметров, , , , ,
		Оповещение);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, 
		Элементы.ЗапасыКонтекстноеМенюНастройкаСбросаКоличества, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НастройкиКоличества = ПолучитьНастройкиИзмененияКоличества();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиКоличества);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьШаблоныПечатиДоговоровКонтрагентов(Команда)
	
	ШаблоныПечатиОфисныхДокументовКлиент.ОткрытьШаблоныПечатиОфисныхДокументов(
	ПредопределенноеЗначение("Перечисление.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаЗаказНаряд"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплатуСертификатом(Команда)
	
	ТекстПредупреждения = "";
	Если РаботаСПодарочнымиСертификатамиКлиентСервер.ИспользованиеСертификатовЗапрещено(ВалютаРасчетов, НациональнаяВалюта, ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	// Проверим рассчитанность скидок перед добавлением сертификата
	Если ИспользоватьАвтоматическиеСкидки Тогда
		
		Если Не Объект.СкидкиРассчитаны И СкидкиИзменились() Тогда
			РассчитатьСкидкиНаценкиКлиент();
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Рассчитаны автоматические скидки (наценки).'");
			Сообщение.КлючДанных = Объект.Ссылка;
			Сообщение.Сообщить();
		Иначе
			Объект.СкидкиРассчитаны = Истина;
			ОбновитьКартинкуАвтоСкидкиПослеЗаписи = Истина;
		КонецЕсли;
		
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	Оповещение = Новый ОписаниеОповещения("ДобавитьОплатуСертификатомЗавершение", ЭтаФорма);
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("КОплате", ИтогВсего - Объект.Предоплата.Итог("СуммаРасчетов"));
	СтруктураПараметров.Вставить("Документ", Объект.Ссылка);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаОплатыСертификатом", СтруктураПараметров,,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплатуСертификатомЗавершение(Результат, Параметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		
		СтрокаОплаты = Объект.Предоплата.Добавить();
		
		СтрокаОплаты.ОплатаСертификатом			= Истина;
		СтрокаОплаты.Документ					= Результат.ПодарочныйСертификат;
		СтрокаОплаты.НомерСертификата			= Результат.НомерСертификата;
		СтрокаОплаты.СуммаРасчетов				= Результат.Сумма;
		СтрокаОплаты.СуммаПогашенияСертификата	= Результат.СуммаПогашенияСертификата;
		
		СтрокаОплаты.Курс = 
			?(СтрокаОплаты.Курс = 0,
				?(Объект.Курс = 0,
				1,
				Объект.Курс),
			СтрокаОплаты.Курс);
			
		СтрокаОплаты.Кратность =
			?(СтрокаОплаты.Кратность = 0,
				?(Объект.Кратность = 0,
				1,
				Объект.Кратность),
			СтрокаОплаты.Кратность);
			
		СтрокаОплаты.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
			СтрокаОплаты.СуммаРасчетов,
			СтрокаОплаты.Курс,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
			СтрокаОплаты.Кратность,
			?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность));
		
		Элементы.ЗНГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокОплаты(Объект.СпособЗачетаПредоплаты, Объект.Предоплата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплатуБонусами(Команда)
	
	ТекстПредупреждения = "";
	Если РаботаСБонусамиКлиентСервер.ИспользованиеБонусовЗапрещено(ВалютаРасчетов, НациональнаяВалюта, ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	// Проверим рассчитанность скидок перед добавлением сертификата
	Если ИспользоватьАвтоматическиеСкидки Тогда
		
		Если Не Объект.СкидкиРассчитаны Тогда
			//Если ВыдатьПодаркиНаВыбор ИЛИ ВывестиСообщения Тогда 			
			//	//Если на форме уже выведены сообщения, то всего лишь сбросим флаг расчета скидок, но не станем дублировать окна
			//	СброситьФлагСкидкиРассчитаныКлиент("ВыборДисконтнойКарты");
			//Иначе
				РассчитатьСкидкиНаценкиКлиент();
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Рассчитаны автоматические скидки (наценки).'");
				Сообщение.КлючДанных = Объект.Ссылка;
				Сообщение.Сообщить();
			//КонецЕсли;
		Иначе
			Объект.СкидкиРассчитаны = Истина;
			ОбновитьКартинкуАвтоСкидкиПослеЗаписи = Истина;
		КонецЕсли;
		
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	Оповещение = Новый ОписаниеОповещения("ДобавитьОплатуБонусамиЗавершение", ЭтаФорма);
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("КОплате", ИтогВсего - Объект.Предоплата.Итог("СуммаРасчетов"));
	СтруктураПараметров.Вставить("Сумма", СтруктураПараметров.КОплате);
	СтруктураПараметров.Вставить("Документ", Объект);
	
	Если Не ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Оповещение", Оповещение);
		ДополнительныеПараметры.Вставить("СтруктураПараметров", СтруктураПараметров);
		ОповещениеКарты = Новый ОписаниеОповещения("СчитатьДисконтнуюКартуИДобавитьОплатуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Справочник.ДисконтныеКарты.Форма.СчитываниеДисконтнойКарты",, ЭтаФорма,,,, ОповещениеКарты, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОткрытьФорму("Справочник.ДисконтныеКарты.Форма.ФормаОплатыБонусами", СтруктураПараметров, ЭтотОбъект,,,, Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчитатьДисконтнуюКартуИДобавитьОплатуЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		СчитанаДисконтнаяКарта = Результат.СчитанаДисконтнаяКарта;
		ВыбранаДисконтнаяКарта(Результат.ДисконтнаяКарта);
		ОткрытьФорму("Справочник.ДисконтныеКарты.Форма.ФормаОплатыБонусами", Параметры.СтруктураПараметров, ЭтотОбъект,,,, Параметры.Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплатуБонусамиЗавершение(Результат, Параметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		
		СтрокаОплаты = Объект.Предоплата.Добавить();
		
		СтрокаОплаты.ОплатаБонусами				= Истина;
		СтрокаОплаты.Документ					= Результат.БонуснаяКарта;		
		СтрокаОплаты.СуммаРасчетов				= Результат.СуммаБонусов;
		
		СтрокаОплаты.Курс = 
			?(СтрокаОплаты.Курс = 0,
				?(Объект.Курс = 0,
				1,
				Объект.Курс),
			СтрокаОплаты.Курс);
			
		СтрокаОплаты.Кратность =
			?(СтрокаОплаты.Кратность = 0,
				?(Объект.Кратность = 0,
				1,
				Объект.Кратность),
			СтрокаОплаты.Кратность);
			
		СтрокаОплаты.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
			СтрокаОплаты.СуммаРасчетов,
			СтрокаОплаты.Курс,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
			СтрокаОплаты.Кратность,
			?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность));
		
		Элементы.ЗНГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокОплаты(Объект.СпособЗачетаПредоплаты, Объект.Предоплата);
		
		Объект.БонусныеБаллыКНачислению.Очистить();
		ОбновитьВидимостьБонусовКНачислению();
		
	КонецЕсли;
	РаспределитьОплатуБонусамиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьОплатуБонусамиНаСервере()
	
	ОтборБонусов = Новый Структура("ОплатаБонусами", Истина);
	СтрокиБонусов = Объект.Предоплата.НайтиСтроки(ОтборБонусов);
	ТаблицаОплатыБонусами = Объект.Предоплата.Выгрузить(СтрокиБонусов, "СуммаРасчетов");
	ТаблицаОплатыБонусами.Колонки.СуммаРасчетов.Имя = "СуммаБонусов";
	ТаблицаОплатыБонусами.Колонки.Добавить("ВидОплаты", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыБезналичныхОплат"));
	ТаблицаОплатыБонусами.ЗаполнитьЗначения(ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.Бонусы"), "ВидОплаты");
	
	РаботаСБонусами.РаспределитьОплатуБонусамиКакСкидку(Объект, ТаблицаОплатыБонусами);
	
КонецПроцедуры

&НаКлиенте
Процедура НомераГТДЗапасыЗаполнитьПоФактическимОстаткам(Команда)
	
	НомераГТДЗаполнитьПоФактическимОстаткамНаСервере(Истина, "Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура НомераГТДЗапасыПодобрать(Команда)
	
	НомераГТДПодобратьНаСервере(Истина, "Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура НомераГТДМатериалыЗаполнитьПоФактическимОстаткам(Команда)
	
	НомераГТДЗаполнитьПоФактическимОстаткамНаСервере(Истина, "Материалы");
	
КонецПроцедуры

&НаКлиенте
Процедура НомераГТДМатериалыПодобрать(Команда)
	
	НомераГТДПодобратьНаСервере(Истина, "Материалы");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", КэшЗначений.НаборСвойств_Документ_ЗаказПокупателя);
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы, , , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПричинуОтмены(Команда)
	ОписаниеЗавершения = Новый ОписаниеОповещения("ОбработатьВыборПричиныОтменыОтмененные", ЭтотОбъект);
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора", Истина);
	ОткрытьФорму("Справочник.ПричиныОтменыЗаказа.ФормаВыбора",ПараметрыФормыВыбора,,,,,ОписаниеЗавершения);
КонецПроцедуры

&НаКлиенте
Процедура ВернутьЗапасыВТаблицу(Команда)
	
	ВыделенныеСтроки = Элементы.ОтмененныеЗапасы.ВыделенныеСтроки;
	
	Если ТипЗнч(ВыделенныеСтроки) <> Тип("Массив") И ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		
		СтрокаТабличнойЧасти = Объект.ОтмененныеЗапасы.НайтиПоИдентификатору(Строка);
		Если СтрокаТабличнойЧасти.ЭтоРабота Тогда
			ИмяТЧ = "Работы";
		Иначе
			ИмяТЧ = "Запасы"; 
			ОбработатьВозвратТоваров(СтрокаТабличнойЧасти); 
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти.Редактируется Тогда
			
			СтрокаЗапаса = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("КлючСвязиОтмененные", СтрокаТабличнойЧасти.КлючСвязиОтмененные));
						
			Если СтрокаЗапаса.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = СтрокаЗапаса[0];
			ОтменитьВернутьЗапасы(НоваяСтрока, ИмяТЧ);
			Элементы[ИмяТЧ].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Элементы[ИмяТЧ].ВыделенныеСтроки.Очистить();
			Элементы[ИмяТЧ].ВыделенныеСтроки.Добавить(НоваяСтрока.ПолучитьИдентификатор());
			Продолжить;
			
		КонецЕсли;
		
		
		НоваяСтрока = Объект[ИмяТЧ].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти,,"ПричинаОтмены");
		
		Элементы[ИмяТЧ].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Элементы[ИмяТЧ].ВыделенныеСтроки.Очистить();
		Элементы[ИмяТЧ].ВыделенныеСтроки.Добавить(НоваяСтрока.ПолучитьИдентификатор());
		
		Партия = Неопределено;
		НоваяСтрока.Свойство("Партия", Партия);
		
		Если ИмяТЧ = "Запасы" Тогда	
			ЗапасыНоменклатураПриИзмененииПродолжить(Элементы.ЗапасыНоменклатура, НоваяСтрока.Количество, НоваяСтрока, Партия);
		Иначе
			РаботыНоменклатураПриИзмененииЗначения(Элементы.ЗНРаботыНоменклатура, Истина, НоваяСтрока);
		КонецЕсли;
		
		Индекс = Объект.ОтмененныеЗапасы.Индекс(СтрокаТабличнойЧасти);
		Объект.ОтмененныеЗапасы.Удалить(Индекс);
		
	КонецЦикла;
	
	ОтображатьГруппуОтмененных = Истина;
	Модифицированность = Истина;
	НастроитьЭлементыОтменыТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьТоварыУслуги(Команда)
	
	Если Элементы.ЗНСтраницы.ТекущаяСтраница = Элементы.ЗНГруппаЗапасы Тогда
		ВыделенныеСтроки = Элементы.Запасы.ВыделенныеСтроки;
		ИмяТЧ = "Запасы";
	Иначе
		ВыделенныеСтроки = Элементы.Работы.ВыделенныеСтроки;
		ИмяТЧ = "Работы";
	КонецЕсли;
	
	Если ТипЗнч(ВыделенныеСтроки) <> Тип("Массив") И ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ОбработатьОтменуТоваров(ВыделенныеСтроки, ИмяТЧ);
	НастроитьЭлементыОтменыТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьНеотгруженныеСтроки(Команда)
	
	ОписаниеЗавершения = Новый ОписаниеОповещения("ОбработатьВыборПричиныОтмены", ЭтотОбъект);
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора", Истина);
	ОткрытьФорму("Справочник.ПричиныОтменыЗаказа.ФормаВыбора",ПараметрыФормыВыбора,,,,,ОписаниеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДатаЗапрета(Команда)
	
	ОчиститьСообщения();
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи",		РежимЗаписиДокумента.Проведение);
	ПараметрыЗаписи.Вставить("РежимПроведения",	РежимПроведенияДокумента.Неоперативный);
	
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДатаЗапрета(Команда)
	
	ОчиститьСообщения();
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи",		РежимЗаписиДокумента.Запись);
	
	Записать(ПараметрыЗаписи); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрытьДатаЗапрета(Команда)
	
	ОчиститьСообщения();
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи",		РежимЗаписиДокумента.Проведение);
	ПараметрыЗаписи.Вставить("РежимПроведения",	РежимПроведенияДокумента.Неоперативный);
	ПараметрыЗаписи.Вставить("ПринудительноЗакрытьФорму", Истина);
	
	Записать(ПараметрыЗаписи);

КонецПроцедуры

#Область ИнтеграцияИС

// ИнтеграцияИС

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ПолеИнтеграцииИСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияИСКлиент.ОбработкаНавигационнойСсылкиВФормеДокументаОснования(
		ЭтотОбъект,
		Объект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры
// Конец ИнтеграцияИС

#КонецОбласти

&НаКлиенте
Процедура Контроль(Команда)
	КонтрольНаСервере();
КонецПроцедуры

&НаСервере
Процедура КонтрольВсеНаСервере()
	ПланированиеРесурсовУНФ.КонтрольПараметровЗагрузкиРесурсов(Истина, Истина, Объект.РесурсыПредприятия, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольВсе(Команда)
	КонтрольВсеНаСервере();
КонецПроцедуры

&НаСервере
Процедура КонтрольГраницНаСервере()
	ПланированиеРесурсовУНФ.КонтрольПараметровЗагрузкиРесурсов(,Истина, Объект.РесурсыПредприятия, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольГраниц(Команда)
	КонтрольГраницНаСервере();
КонецПроцедуры

&НаСервере
Процедура КонтрольНаСервере()
	Если Объект.РесурсыПредприятия.Количество() Тогда
		ПланированиеРесурсовУНФ.КонтрольПараметровЗагрузкиРесурсов(Истина, , Объект.РесурсыПредприятия, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодборРесурсы(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЭтоПодбор", Истина);
	ПараметрыОткрытия.Вставить("РесурсыПредприятия", Объект.РесурсыПредприятия);
	ПараметрыОткрытия.Вставить("ГраницыПланирования");
	ПараметрыОткрытия.Вставить("НомерПодсистемы", 1);
	
	Оповещение = Новый ОписаниеОповещения("ПослеПодбораИзПланировщикаЗавершение", ЭтотОбъект, ПараметрыОткрытия);
	
	ОткрытьФорму("Обработка.ПланировщикРесурсов.Форма.ФормаПланировщика", ПараметрыОткрытия, , , , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодбораИзПланировщикаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Объект.РесурсыПредприятия.Очистить();
	
	ВыбранныеРесурсы = Результат;
	
	Для Каждого СтрокаРесурсов Из ВыбранныеРесурсы Цикл
		
		НоваяСтрока = Объект.РесурсыПредприятия.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРесурсов);
		
		НоваяСтрока.РесурсПредприятия = СтрокаРесурсов.Ресурс;
		НоваяСтрока.Старт = СтрокаРесурсов.НачалоПериода;
		НоваяСтрока.Финиш = СтрокаРесурсов.ОкончаниеПериода;
		НоваяСтрока.Мощность = СтрокаРесурсов.Загрузка;
		НоваяСтрока.Длительность = Дата(1,1,1)+(НоваяСтрока.Финиш - НоваяСтрока.Старт); 
		
	КонецЦикла;
	
	ЗаполнитьДанныеТаблицыРесурсовНаФорме();
	
	УстановитьДоступностьПовторов(, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПереместитьВверхСтроку(Команда)
	
	ПереместитьСтрокуТаблицы(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПереместитьВнизСтроку(Команда)
	
	ПереместитьСтрокуТаблицы(1);
	
КонецПроцедуры

// Перемещает выделенные в таблице строки на одну позицию вверх/вниз.
//
// Параметры:
//  Сдвиг	 - Число [-1;1] - Задает направление перемещения строк.
//                            Положительное значение означает, что строка будет передвинута ближе к концу таблицы (вниз),
//                            отрицательное - ближе к началу (вверх).
//
&НаСервере
Процедура ПереместитьСтрокуТаблицы(Направление)
	
	Если Элементы.ЗНМатериалы.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Направление > 0 Тогда
		КрайняяСтрокаИдентификатор = Элементы.ЗНМатериалы.ВыделенныеСтроки[Элементы.ЗНМатериалы.ВыделенныеСтроки.ВГраница()];
	Иначе
		КрайняяСтрокаИдентификатор = Элементы.ЗНМатериалы.ВыделенныеСтроки[0];
	КонецЕсли;
	КрайняяСтрока = Объект.Материалы.НайтиПоИдентификатору(КрайняяСтрокаИдентификатор);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязи", КрайняяСтрока.КлючСвязи);
	СтруктураПоиска.Вставить("НомерСтрокиВнутренний", КрайняяСтрока.НомерСтрокиВнутренний + Направление);
	Строки = Объект.Материалы.НайтиСтроки(СтруктураПоиска);
	СоседняяСтрока = Неопределено;
	Если Строки.Количество() <> 0 Тогда
		СоседняяСтрока = Строки[0];
	КонецЕсли;
	
	Если СоседняяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Направление > 0 Тогда
		Итератор = Элементы.ЗНМатериалы.ВыделенныеСтроки.ВГраница();
		Пока Итератор >= 0 Цикл
			ИдентификаторСтроки = Элементы.ЗНМатериалы.ВыделенныеСтроки[Итератор];
			Строка = Объект.Материалы.НайтиПоИдентификатору(ИдентификаторСтроки);
			Объект.Материалы.Сдвинуть(Объект.Материалы.Индекс(Строка), СоседняяСтрока.НомерСтроки - Строка.НомерСтроки);
			Итератор = Итератор - 1;
		КонецЦикла;
	Иначе
		Для каждого ИдентификаторСтроки Из Элементы.ЗНМатериалы.ВыделенныеСтроки Цикл
			Строка = Объект.Материалы.НайтиПоИдентификатору(ИдентификаторСтроки);
			Объект.Материалы.Сдвинуть(Объект.Материалы.Индекс(Строка), СоседняяСтрока.НомерСтроки - Строка.НомерСтроки);
		КонецЦикла;
	КонецЕсли;
	ЗаполнитьНомераСтрокТаблицаМатериалы(Объект.Материалы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрЧека(Команда)
	
	Если Модифицированность Тогда
		Если Объект.Проведен Тогда
			ТекстВопроса = НСтр("ru = 'Для выполнения команды ""Предварительный просмотр""
				|документ будет проведен. Продолжить?'");
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Провести и продолжить'"));
		Иначе
			ТекстВопроса = НСтр("ru = 'Для выполнения команды ""Предварительный просмотр""
				|документ будет записан. Продолжить?'");
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Записать и продолжить'"));
		КонецЕсли;
		Обработчик = Новый ОписаниеОповещения("ПредварительныйПросмотрЧекаПродолжение", ЭтотОбъект);
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки);
	Иначе
		ПредварительныйПросмотрЧекаПродолжение(Неопределено, "");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрЧекаПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда
		Если Объект.Проведен Тогда
			РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		Иначе
			РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		КонецЕсли;
		Если Не РезультатЗаписи Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПредварительныйПросмотрЧекаЗавершение", ЭтотОбъект);
		МассивОборудования = Новый Массив;
		МассивОборудования.Добавить("ФискальныйРегистратор");
		МассивОборудования.Добавить("ККТ");
		ОтборОборудования = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();
		ОтборОборудования.Вставить("ТипыПО", МассивОборудования);
		ОтборОборудования.Вставить("Организация", Объект.Организация);
		МенеджерОборудованияКлиент.ВыбратьУстройство(ОписаниеОповещения, ОтборОборудования,
				НСтр("ru='Выберите оборудование'"), НСтр("ru='Оборудование не подключено.'"));
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрЧекаЗавершение(РезультатВыбора, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		ИдентификаторУстройстваФР = РезультатВыбора.ИдентификаторУстройства;
	КонецЕсли;
	
	Если ИдентификаторУстройстваФР = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры = ПодготовитьДанныеДляПробитияЧека(ИдентификаторУстройстваФР);
	
	Если ОбщиеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры.ДатаВремя = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	РабочееМестоКассираКлиент.ПредпросмотрЧекаДенежныхДокументов(ОбщиеПараметры, ЭтотОбъект,
		ИдентификаторУстройстваФР);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОбновитьКалькуляцию(Команда)
	
	ЗаписатьИОткрытьКалькуляцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКалькуляцию(Команда)
	
	ЗаписатьИОткрытьКалькуляцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзФайлаЗапасы(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект,
		НастройкиЗагрузкиДанных);

	НастройкиЗагрузкиДанных.Вставить("ПолноеИмяТабличнойЧасти", "ЗаказПокупателя.Запасы");
	НастройкиЗагрузкиДанных.Вставить("ИмяМакетаСШаблоном", "ЗагрузкаИзФайлаЗапасы");
	НастройкиЗагрузкиДанных.Вставить("Заголовок", НСтр("ru = 'Загрузка запасов из файла'"));
	НастройкиЗагрузкиДанных.Вставить("ПоложениеДатыВЗаказе", Объект.ПоложениеДатыОтгрузки);
	НастройкиЗагрузкиДанных.Вставить("СодержаниеВидимо", Истина);
	НастройкиЗагрузкиДанных.Вставить("ПоложениеСклада", Объект.ПоложениеСклада);
	НастройкиЗагрузкиДанных.Вставить("ЗагрузкаТабличнойЧастиУслуги", Ложь);
	НастройкиЗагрузкиДанных.Вставить("ПолноеИмяОбъектаЗаполнения", "Документ.ЗаказПокупателя.ТабличнаяЧасть.Запасы");

	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных,
		ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзФайлаРаботы(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект,
		НастройкиЗагрузкиДанных);

	НастройкиЗагрузкиДанных.Вставить("ПолноеИмяТабличнойЧасти", "ЗаказПокупателя.Работы");
	НастройкиЗагрузкиДанных.Вставить("ИмяМакетаСШаблоном", "ЗагрузкаИзФайлаРаботы");
	НастройкиЗагрузкиДанных.Вставить("Заголовок", НСтр("ru = 'Загрузка работ из файла'"));
	НастройкиЗагрузкиДанных.Вставить("ПоложениеДатыВЗаказе", Объект.ПоложениеДатыОтгрузки);
	НастройкиЗагрузкиДанных.Вставить("СодержаниеВидимо", Истина);
	НастройкиЗагрузкиДанных.Вставить("ПоложениеСклада", Объект.ПоложениеСклада);
	НастройкиЗагрузкиДанных.Вставить("ЗагрузкаТабличнойЧастиУслуги", Ложь);
	НастройкиЗагрузкиДанных.Вставить("ПолноеИмяОбъектаЗаполнения", "Документ.ЗаказПокупателя.ТабличнаяЧасть.Работы");

	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных,
		ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзФайлаМатериалы(Команда)
	
	Если Не ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтаФорма, "Работы") Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект,
			НастройкиЗагрузкиДанных);
	
		НастройкиЗагрузкиДанных.Вставить("ПолноеИмяТабличнойЧасти", "ЗаказПокупателя.Материалы");
		НастройкиЗагрузкиДанных.Вставить("ИмяМакетаСШаблоном", "ЗагрузкаИзФайлаМатериалы");
		НастройкиЗагрузкиДанных.Вставить("Заголовок", НСтр("ru = 'Загрузка материалов из файла'"));
		НастройкиЗагрузкиДанных.Вставить("ПоложениеДатыВЗаказе", Объект.ПоложениеДатыОтгрузки);
		НастройкиЗагрузкиДанных.Вставить("СодержаниеВидимо", Истина);
		НастройкиЗагрузкиДанных.Вставить("ПоложениеСклада", Объект.ПоложениеСклада);
		НастройкиЗагрузкиДанных.Вставить("ЗагрузкаТабличнойЧастиУслуги", Ложь);
		НастройкиЗагрузкиДанных.Вставить("ПолноеИмяОбъектаЗаполнения", "Документ.ЗаказПокупателя.ТабличнаяЧасть.Материалы");
	
		ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных,
			ОписаниеОповещения, ЭтотОбъект);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзФайлаМатериалыЗаказчика(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект,
		НастройкиЗагрузкиДанных);

	НастройкиЗагрузкиДанных.Вставить("ПолноеИмяТабличнойЧасти", "ЗаказПокупателя.МатериалыЗаказчика");
	НастройкиЗагрузкиДанных.Вставить("ИмяМакетаСШаблоном", "ЗагрузкаИзФайлаМатериалыЗаказчика");
	НастройкиЗагрузкиДанных.Вставить("Заголовок", НСтр("ru = 'Загрузка материалов заказчика из файла'"));
	НастройкиЗагрузкиДанных.Вставить("ПоложениеДатыВЗаказе", Объект.ПоложениеДатыОтгрузки);
	НастройкиЗагрузкиДанных.Вставить("СодержаниеВидимо", Истина);
	НастройкиЗагрузкиДанных.Вставить("ПоложениеСклада", Объект.ПоложениеСклада);
	НастройкиЗагрузкиДанных.Вставить("ЗагрузкаТабличнойЧастиУслуги", Ложь);
	НастройкиЗагрузкиДанных.Вставить("ПолноеИмяОбъектаЗаполнения",
		"Документ.ЗаказПокупателя.ТабличнаяЧасть.МатериалыЗаказчика");

	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных,
		ОписаниеОповещения, ЭтотОбъект);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция УчетОстатковВРазрезеСкладскихОрдеров(СтруктурнаяЕдиница = Неопределено)
	
	Если НЕ СтруктурнаяЕдиница = Неопределено Тогда
		Возврат СкладскойУчетСервер.УчетОстатковВРазрезеСкладскихОрдеров(СтруктурнаяЕдиница, Ложь);
	КонецЕсли;
	
	Возврат СкладскойУчетСервер.УчетОстатковВРазрезеСкладскихОрдеров(Объект.СтруктурнаяЕдиницаРезерв, Ложь);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПоОстаткамНаСервере(ИдентификаторыНовыхСтрок)
	
	ДополнительныеПараметры = Новый Структура("ПоложениеСклада, ПоложениеДокументаПоступления, ИмяПоляСтруктурнаяЕдиница"
	, Объект.ПоложениеСклада, Объект.ПоложениеДокументаПоступления, "СтруктурнаяЕдиницаРезерв");
	
	ЗапасыКОтгрузке= СкладскойУчетСервер.ПолучитьТаблицуОстатковПоРасходнымОрдерам(Объект, ДополнительныеПараметры);
	ПолучитьЗапасыИзХранилища(ЗапасыКОтгрузке, "Запасы", ИдентификаторыНовыхСтрок, Истина,, Истина);
	СерииНоменклатурыУНФ.УдалитьСерииНоменклатурыВТабличнойЧастиВЗависимостиОтПолитики(Объект);
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасходныеОрдераПоНоменклатуреСервер()
	
	ДополнительныеПараметры = Новый Структура("ПоложениеСклада, ПоложениеДокументаПоступления, Отгрузка, ИмяПоляСтруктурнаяЕдиница"
	, Объект.ПоложениеСклада, Объект.ПоложениеДокументаПоступления, Истина, "СтруктурнаяЕдиницаРезерв");
	
	СкладскойУчетСервер.РаспределитьНоменклатуруПоОрдерам(ЭтотОбъект, ДополнительныеПараметры, "Запасы");
	СерииНоменклатурыУНФ.УдалитьСерииНоменклатурыВТабличнойЧастиВЗависимостиОтПолитики(Объект);
	
	ЭтаФорма.Модифицированность = Истина;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнениеПоОрдерамНеВозможно()
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Организация"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Организация", , Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Контрагент"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Контрагент", , Отказ);
	КонецЕсли;
	
	Если Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
		
		Если Не ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаРезерв) Тогда
			ТекстСообщения = НСтр("ru = 'Поле ""Склад"" не заполнено'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.СтруктурнаяЕдиницаРезерв", , Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДокументаПоступления(Форма)
	
	Если Не Форма.ДоступенОрдерныйУчет Тогда
		Форма.Элементы.ГруппаДокументПоступления.Видимость = Ложь;
		Форма.Элементы.ЗНМатериалыДокументПоступления.Видимость = Ложь;
		Форма.Элементы.ЗапасыДокументПоступления.Видимость = Ложь;
		Форма.Элементы.ЗапасыЗаполнитьОрдер.Видимость = Ложь;
		Форма.Элементы.ЗаполнитьРасходныеОрдераПоНоменклатуре.Видимость = Форма.Элементы.ЗапасыДокументПоступления.Видимость;
		Возврат
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("УказыватьДокументПоступления", Истина);
	НайденныеСтрокиЗапасы = Форма.Объект.Запасы.НайтиСтроки(ПараметрыПоиска);
	НайденныеСтрокиМатериалы = Форма.Объект.Материалы.НайтиСтроки(ПараметрыПоиска);
	
	Если Форма.Объект.ПоложениеДокументаПоступления = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
		
		Форма.Элементы.ГруппаДокументПоступления.Видимость = Форма.УчетОстатковПоСкладскимОрдерам;
		Форма.Элементы.ЗНМатериалыДокументПоступления.Видимость = Ложь;
		Форма.Элементы.ЗапасыДокументПоступления.Видимость = Ложь;
		
	Иначе
		
		Если Форма.Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
			Форма.Элементы.ЗНМатериалыДокументПоступления.Видимость = Форма.УчетОстатковПоСкладскимОрдерам;
			Форма.Элементы.ЗапасыДокументПоступления.Видимость = Форма.УчетОстатковПоСкладскимОрдерам;
		Иначе
			Форма.Элементы.ЗНМатериалыДокументПоступления.Видимость = НайденныеСтрокиМатериалы.Количество();
			Форма.Элементы.ЗапасыДокументПоступления.Видимость = НайденныеСтрокиЗапасы.Количество();
		КонецЕсли;
		
		Форма.Элементы.ГруппаДокументПоступления.Видимость = Ложь;
		
	КонецЕсли;
	
	Форма.Элементы.ЗапасыЗаполнитьОрдер.Видимость = Истина;
	Форма.Элементы.ЗаполнитьРасходныеОрдераПоНоменклатуре.Видимость = Форма.Элементы.ЗапасыДокументПоступления.Видимость;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДокументаПоступленияПриИзмененииТабличнойЧасти(Элемент, ИмяТаблицы = "Запасы")
	
	Если Не Объект.ПоложениеДокументаПоступления = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		Возврат
	КонецЕсли;
	
	Если Не Элемент.ТекущийЭлемент = Неопределено Тогда
		
		Если Элемент.ТекущийЭлемент.Имя = "ЗапасыНоменклатура" Или Элемент.ТекущийЭлемент.Имя = "ЗапасыСтруктурнаяЕдиницаРезерв"
			Или Элемент.ТекущийЭлемент.Имя = "ЗНМатериалыНоменклатура" Или Элемент.ТекущийЭлемент.Имя = "ЗНМатериалыСтруктурнаяЕдиницаРезерв" Тогда
			
			ПараметрыПоиска = Новый Структура("УказыватьДокументПоступления", Истина);
			
			Если ИмяТаблицы = "Материалы" Тогда
				НайденныеСтрокиМатериалы = Объект.Материалы.НайтиСтроки(ПараметрыПоиска);
				Элементы.ЗНМатериалыДокументПоступления.Видимость = НайденныеСтрокиМатериалы.Количество();
			Иначе
				НайденныеСтрокиЗапасы = Объект.Запасы.НайтиСтроки(ПараметрыПоиска);
				Элементы.ЗапасыДокументПоступления.Видимость = НайденныеСтрокиЗапасы.Количество();
				Элементы.ЗаполнитьРасходныеОрдераПоНоменклатуре.Видимость = Элементы.ЗапасыДокументПоступления.Видимость;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеСтруктурнойЕдиницыЗапасовНаСервере()
	
	ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита();
	ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов();
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы");
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Работы");
	
	Если ДоступенОрдерныйУчет Тогда
		
		Объект.ДокументПоступления = Неопределено;
		УчетОстатковПоСкладскимОрдерам = УчетОстатковВРазрезеСкладскихОрдеров();
		
		ЗаполнитьПризнакиИспользованияХарактеристик();
		УстановитьВидимостьДокументаПоступления(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов()
	ДополнительныеСвойства = Новый Структура("ИзменениеКлючевыхРеквизитов", Истина);
	СерииНоменклатурыУНФ.ЗаполнитьПризнакиИспользованияСерий(Объект, ДополнительныеСвойства);
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита()
	НоменклатураВДокументахСервер.ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита(ЭтотОбъект,
		"ЗаказНаряд", "Запасы", НастройкиФормыВыбораНоменклатуры);
	НоменклатураВДокументахСервер.ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита(ЭтотОбъект,
		"ЗаказНаряд", "ЗНМатериалы", НастройкиФормыВыбораНоменклатуры);
	НоменклатураВДокументахСервер.ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита(ЭтотОбъект,
		"ЗаказНаряд", "ЗНРаботы", НастройкиФормыВыбораНоменклатуры);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРесурсыИзПланировщика(ВыбранныеРесурсы)
	
	Для Каждого СтрокаРесурсов Из ВыбранныеРесурсы Цикл
		
		
		НоваяСтрока = Объект.РесурсыПредприятия.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРесурсов);
		
		НоваяСтрока.РесурсПредприятия = СтрокаРесурсов.Ресурс;
		НоваяСтрока.Старт = СтрокаРесурсов.НачалоПериода;
		НоваяСтрока.Финиш = СтрокаРесурсов.ОкончаниеПериода;
		НоваяСтрока.Мощность = СтрокаРесурсов.Загрузка;
		НоваяСтрока.Длительность = Дата(1,1,1)+(НоваяСтрока.Финиш - НоваяСтрока.Старт); 
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПовторов(ОткрытиеФормы = Ложь, БылПодбор = Ложь)
	
	Если ОткрытиеФормы ИЛИ БылПодбор Тогда
		
		Для Каждого СтрокаРесурсыПредприятия Из Объект.РесурсыПредприятия Цикл
			
			СтрокаРесурсыПредприятия.РасписаниеПредставление = ?(СтрокаРесурсыПредприятия.РасписаниеПредставление = "", "Не повторять", СтрокаРесурсыПредприятия.РасписаниеПредставление);
			
			Если ЗначениеЗаполнено(СтрокаРесурсыПредприятия.Старт) И ЗначениеЗаполнено(СтрокаРесурсыПредприятия.Финиш) Тогда
				
				СтрокаРесурсыПредприятия.ПериодРазличный = ?(Не НачалоДня(СтрокаРесурсыПредприятия.Старт) = НачалоДня(СтрокаРесурсыПредприятия.Финиш), Истина, Ложь);
				
				Если НачалоДня(СтрокаРесурсыПредприятия.Старт) = НачалоДня(СтрокаРесурсыПредприятия.Финиш) Тогда
					СтрокаРесурсыПредприятия.ПовторыДоступны = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РесурсыПредприятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	ТекущиеДанные.ПовторыДоступны = Ложь;
	ТекущиеДанные.ПериодРазличный = Ложь;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Старт) И ЗначениеЗаполнено(ТекущиеДанные.Финиш) Тогда
		
		ТекущиеДанные.ПериодРазличный = ?(Не НачалоДня(ТекущиеДанные.Старт) = НачалоДня(ТекущиеДанные.Финиш), Истина, Ложь);
		
		Если НачалоДня(ТекущиеДанные.Старт) = НачалоДня(ТекущиеДанные.Финиш) Тогда
			ТекущиеДанные.ПовторыДоступны = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПериода(ЭтоДатаНачала = Ложь)
	
	ТекущиеДанные = Элементы.РесурсыПредприятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	ОстатокСекундДоКонцаДня = КонецДня(ТекущиеДанные.Финиш) - ТекущиеДанные.Финиш;
	
	Если ОстатокСекундДоКонцаДня = 59 Тогда ТекущиеДанные.Финиш = КонецДня(ТекущиеДанные.Финиш) КонецЕсли;
	Если ТекущиеДанные.Финиш = НачалоДня(ТекущиеДанные.Финиш) Тогда ТекущиеДанные.Финиш = ТекущиеДанные.Финиш-1 КонецЕсли; 
	
	ТекущиеДанные.Старт = ?(Минута(ТекущиеДанные.Старт)%5 = 0, ТекущиеДанные.Старт, ТекущиеДанные.Старт - (Минута(ТекущиеДанные.Старт)%5*60));
	
	ОстатокОтДеления = Минута(ТекущиеДанные.Финиш)%5;
	
	Если Не (ОстатокОтДеления = 0 ИЛИ ТекущиеДанные.Финиш = КонецДня(ТекущиеДанные.Финиш)) Тогда
		
		Если ОстатокОтДеления < 3 Тогда
			ТекущиеДанные.Финиш = ТекущиеДанные.Финиш - (ОстатокОтДеления*60);
		ИначеЕсли (КонецДня(ТекущиеДанные.Финиш) - ТекущиеДанные.Финиш)<300 Тогда
			ТекущиеДанные.Финиш = КонецДня(ТекущиеДанные.Финиш);
		Иначе
			ТекущиеДанные.Финиш = ТекущиеДанные.Финиш + (300 - (ОстатокОтДеления*60));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущиеДанные.Старт > ТекущиеДанные.Финиш Тогда 
		Если ЭтоДатаНачала Тогда 
			ТекущиеДанные.Финиш = ТекущиеДанные.Старт+ТекущиеДанные.КратностьПланирования*60;
		Иначе
			ТекущиеДанные.Финиш = ТекущиеДанные.Старт;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущиеДанные.Старт = ?(Секунда(ТекущиеДанные.Старт) = 0, ТекущиеДанные.Старт, ТекущиеДанные.Старт - Секунда(ТекущиеДанные.Старт));
	
	Если Не (Секунда(ТекущиеДанные.Финиш) = 0 ИЛИ ТекущиеДанные.Финиш = КонецДня(ТекущиеДанные.Финиш)) Тогда  
		ТекущиеДанные.Финиш = ТекущиеДанные.Финиш - Секунда(ТекущиеДанные.Финиш)
	КонецЕсли;
	
	ПланированиеРесурсовУНФКлиент.ПроконтролироватьШагПланирования(ТекущиеДанные,ЭтоДатаНачала,Истина);
	
	УстановитьДоступностьПовторов();
	
	Если ТекущиеДанные.ПовторыДоступны Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ДатаПовторения) Тогда
			ТекущиеДанные.ДатаПовторения = День(ТекущиеДанные.Старт);
		КонецЕсли;
		
		Если ТекущиеДанные.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Ежемесячно") Тогда
			
			Если ЗначениеЗаполнено(ТекущиеДанные.ДеньНеделиМесяца) Тогда
				
				Если КонецДня(ТекущиеДанные.Старт) = КонецМесяца(ТекущиеДанные.Старт) Тогда
					
					ТекущиеДанные.ДеньНеделиМесяца = 0;
					ТекущиеДанные.НомерНеделиМесяца = 0;
					ТекущиеДанные.ПоследнийДеньМесяца = Истина
					
				Иначе
					
					ТекущиеДанные.ДеньНеделиМесяца = ДеньНедели(ТекущиеДанные.Старт);
					
					ТекНомерНедели = НеделяГода(ТекущиеДанные.Старт)-НеделяГода(НачалоМесяца(ТекущиеДанные.Старт))+1;
					
					Если ЗначениеЗаполнено(ТекущиеДанные.НомерНеделиМесяца) И Не ТекущиеДанные.НомерНеделиМесяца = ТекНомерНедели  Тогда
						ТекущиеДанные.НомерНеделиМесяца = ТекНомерНедели;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТекущиеДанные.ПоследнийДеньМесяца И Не КонецДня(ТекущиеДанные.Старт) = КонецМесяца(ТекущиеДанные.Старт) Тогда
				
				ТекущиеДанные.ПоследнийДеньМесяца = Ложь;
				ТекущиеДанные.ДеньНеделиМесяца = ДеньНедели(ТекущиеДанные.Старт);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущиеДанные.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Ежегодно")
										И ЗначениеЗаполнено(ТекущиеДанные.НомерМесяца) Тогда
			
			ТекущиеДанные.НомерМесяца = Месяц(ТекущиеДанные.Старт);
			
		КонецЕсли;
		
	Иначе
		
		ТекущиеДанные.НомерНеделиМесяца = 0;
		ТекущиеДанные.НомерМесяца = 0;
		ТекущиеДанные.ДатаПовторения = 0;
		ТекущиеДанные.ДеньНеделиМесяца = 0;
		ТекущиеДанные.ПоследнийДеньМесяца = Ложь;
		
		ТекущиеДанные.ВидЗавершения = Неопределено;
		ТекущиеДанные.ЗавершатьПосле = Неопределено;
		
		ТекущиеДанные.ИнтервалПовторения = 0;
		ТекущиеДанные.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.НеПовторять");
		ТекущиеДанные.РасшифровкаСчетчика = "";
		
		ТекущиеДанные.Пн = Ложь;
		ТекущиеДанные.Вт = Ложь;
		ТекущиеДанные.Ср = Ложь;
		ТекущиеДанные.Чт = Ложь;
		ТекущиеДанные.Пт = Ложь;
		ТекущиеДанные.Сб = Ложь;
		ТекущиеДанные.Вс = Ложь;
		
	КонецЕсли;
	
	ТекущиеДанные.Длительность = Дата(1,1,1)+(ТекущиеДанные.Финиш - ТекущиеДанные.Старт);
	
	ЗаполнитьДанныеТаблицыРесурсовНаФорме();
	
	Если ЭтоДатаНачала Тогда
		Если ТипЗнч(ТекущиеДанные.ЗавершатьПосле) = Тип("Дата")
			И ЗначениеЗаполнено(ТекущиеДанные.ЗавершатьПосле)
			И ЗначениеЗаполнено(ТекущиеДанные.Старт)
			И ТекущиеДанные.ЗавершатьПосле<НачалоДня(ТекущиеДанные.Старт)
			Тогда
			ТекущиеДанные.ЗавершатьПосле=НачалоДня(ТекущиеДанные.Старт)
		КонецЕсли;
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеТаблицыРесурсовНаФорме()
	
	ДанныеРесурсов = СоответствиеДанныхРесурсов();
	
	Элементы.РесурсыПредприятияПодборРесурсы.Доступность = Не ЭтаФорма.ТолькоПросмотр;
	Элементы.РесурсыПредприятияГруппаПроверить.Доступность = Не ЭтаФорма.ТолькоПросмотр;
	
	Для Каждого СтрокаРесурсов Из Объект.РесурсыПредприятия Цикл
		
		ДанныеРесурса = ДанныеРесурсов.Получить(СтрокаРесурсов.РесурсПредприятия);
		
		Если Не ДанныеРесурса = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаРесурсов, ДанныеРесурса)
		КонецЕсли;
		
		ВыбранныеДниНедели = ПланированиеРесурсовУНФКлиент.ПредставлениеДнейНедели(СтрокаРесурсов);
		
		ДополнениеПоМесяцуГоду = "";
		
		Старт = СтрокаРесурсов.Старт;
		ДеньНеделиМесяца = СтрокаРесурсов.ДеньНеделиМесяца;
		ДатаПовторения = СтрокаРесурсов.ДатаПовторения;
		
		Если СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Ежемесячно")
			ИЛИ СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Ежегодно") Тогда
			
			Если ЗначениеЗаполнено(ДатаПовторения) Тогда
				
				ДополнениеПоМесяцуГоду = СтрШаблон(НСтр("ru = ', каждое %1 %2.'"), Строка(ДатаПовторения), ПланированиеРесурсовУНФКлиент.ПолучитьМесяцПоНомеру(СтрокаРесурсов.НомерМесяца));
				
			ИначеЕсли ЗначениеЗаполнено(ДеньНеделиМесяца) Тогда
				
				Если ПланированиеРесурсовУНФКлиент.ЭтоПоследняяНеделяМесяца(Старт) Тогда
					ДополнениеПоМесяцуГоду = СтрШаблон(НСтр("ru = ', в послед. %1 месяца'"), ПланированиеРесурсовУНФКлиент.СоответствиеНомераДнюНедели(ДеньНеделиМесяца))
				Иначе
					НомерНеделиМесяца = НеделяГода(Старт)-НеделяГода(НачалоМесяца(Старт))+1;
					ДополнениеПоМесяцуГоду = СтрШаблон(НСтр("ru = ' %1 каждой %2 недели'"), ПланированиеРесурсовУНФКлиент.СоответствиеНомераДнюНедели(ДеньНеделиМесяца), Строка(НомерНеделиМесяца));
				КонецЕсли;
				
			ИначеЕсли СтрокаРесурсов.ПоследнийДеньМесяца = Истина Тогда
				ДополнениеПоМесяцуГоду = НСтр("ru = ', последний день месяца.'");
			КонецЕсли;
			
		КонецЕсли;
		
		Междометие = ?(СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Еженедельно"), НСтр("ru='каждую'"), НСтр("ru='каждый'"));
		
		Окончание = "";
		
		Если СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Еженедельно") Тогда
			Окончание = НСтр("ru='неделю'")
		ИначеЕсли СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Ежедневно") Тогда
			Окончание = НСтр("ru='день'")
		ИначеЕсли СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Ежемесячно") Тогда
			Окончание = НСтр("ru='месяц'")
		ИначеЕсли СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Ежегодно") Тогда
			Окончание = НСтр("ru='год'")
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаРесурсов.ВидПовтора) 
			И Не СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.НеПовторять") Тогда
			
			РасписаниеПредставление = Строка(СтрокаРесурсов.ВидПовтора)+", "+Междометие+" "+Строка(СтрокаРесурсов.ИнтервалПовторения)+
			" "+ Окончание+ВыбранныеДниНедели+ДополнениеПоМесяцуГоду;
		Иначе
			РасписаниеПредставление = НСтр("ru='Не повторять'");
		КонецЕсли;
		
		СтрокаРесурсов.РасписаниеПредставление = РасписаниеПредставление;
		
		Если СтрокаРесурсов.ВидЗавершения = ПредопределенноеЗначение("Перечисление.ВидыЗавершенияПовторовРасписания.ПоСчетчику")
			И ЗначениеЗаполнено(СтрокаРесурсов.ЗавершатьПосле) Тогда 
			
			РасшифровкаСчетчика = ПланированиеРесурсовУНФКлиент.ПредметИсчисления(
			СтрокаРесурсов.ЗавершатьПосле,
			НСтр("ru = 'раза'"),
			НСтр("ru = 'раз'"),
			НСтр("ru = 'раз'"),
			"м");
			
			СтрокаРесурсов.РасшифровкаСчетчика = РасшифровкаСчетчика;
		Иначе
			СтрокаРесурсов.РасшифровкаСчетчика = "";
		КонецЕсли;
		
	КонецЦикла;
	
	ПланированиеРесурсовУНФКлиент.ЗаполнитьДлительностьВТаблицеВыбранныхРесурсов(Объект.РесурсыПредприятия)
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьОкончаниеПериода()
	
	ТекущиеДанные = Элементы.РесурсыПредприятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	СекундыПоВремени = ТекущиеДанные.Время - Дата(1,1,1);
	СекундыПоДням = ?(ЗначениеЗаполнено(ТекущиеДанные.Дни), ТекущиеДанные.Дни*1440*60, 0);
	
	ТекущиеДанные.Финиш = ТекущиеДанные.Старт + СекундыПоДням + СекундыПоВремени;
	ТекущиеДанные.Финиш = ?(Не СекундыПоДням = 0 И ТекущиеДанные.Финиш = НачалоДня(ТекущиеДанные.Финиш)
										, ТекущиеДанные.Финиш - 1, ТекущиеДанные.Финиш);
	
	ПланированиеРесурсовУНФКлиент.ПроконтролироватьШагПланирования(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОкончанияРедактированияРасписания(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения = Неопределено Тогда Возврат КонецЕсли;
	
	ТекущиеДанные = Элементы.РесурсыПредприятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	ВидПовтора = РезультатВыполнения.ВидПовтора;
	
	ТекущиеДанные.ВидПовтора = ВидПовтора;
	
	Если ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.НеПовторять") Тогда
		 ПланированиеРесурсовУНФКлиент.ОчиститьДанныеСтроки(ТекущиеДанные, Ложь);
		 ЗаполнитьДанныеТаблицыРесурсовНаФорме();
		 Возврат;
	 КонецЕсли;
	
	ТекущиеДанные.ИнтервалПовторения = РезультатВыполнения.ИнтервалПовторения;
	ТекущиеДанные.Пн = РезультатВыполнения.Пн;
	ТекущиеДанные.Вт = РезультатВыполнения.Вт;
	ТекущиеДанные.Ср = РезультатВыполнения.Ср;
	ТекущиеДанные.Чт = РезультатВыполнения.Чт;
	ТекущиеДанные.Пт = РезультатВыполнения.Пт;
	ТекущиеДанные.Сб = РезультатВыполнения.Сб;
	ТекущиеДанные.Вс = РезультатВыполнения.Вс;
	ТекущиеДанные.ПоследнийДеньМесяца = РезультатВыполнения.ПоследнийДеньМесяца;
	ТекущиеДанные.ДатаПовторения = РезультатВыполнения.ДатаПовторения;
	ТекущиеДанные.ДеньНеделиМесяца = РезультатВыполнения.ДеньНеделиМесяца;
	ТекущиеДанные.НомерНеделиМесяца = РезультатВыполнения.НомерНеделиМесяца;
	ТекущиеДанные.НомерМесяца = РезультатВыполнения.НомерМесяца;
	
	ЗаполнитьДанныеТаблицыРесурсовНаФорме();
	
КонецПроцедуры

&НаСервере
Функция СоответствиеДанныхРесурсов()
	
	СвернутаяТаблицаРесурсов = Объект.РесурсыПредприятия.Выгрузить(,"РесурсПредприятия");
	СвернутаяТаблицаРесурсов.Свернуть("РесурсПредприятия");
	
	СоответствиеВозврата = Новый Соответствие();
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	ТаблицаДанных.Колонки.Добавить("РесурсПредприятия");
	ТаблицаДанных.Колонки.Добавить("КонтролироватьШаг");
	ТаблицаДанных.Колонки.Добавить("КратностьПланирования");
	
	Для каждого СтрокаТаблицы Из СвернутаяТаблицаРесурсов Цикл
		
		РесурсПредприятия = СтрокаТаблицы.РесурсПредприятия;
		
		СтруктураДанных = Новый Структура("КонтролироватьШаг,КратностьПланирования"
											,РесурсПредприятия.КонтролироватьШагИнтервалаВДокументах, РесурсПредприятия.КратностьПланирования);
		
		СоответствиеВозврата.Вставить(РесурсПредприятия, СтруктураДанных);
		
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзмененияРеквизитовПечати(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ПечатьДокументовУНФКлиент.ОбновитьЗначенияРеквизитовПечати(ЭтотОбъект, Результат.ИзмененныеРеквизиты);
		
		Если Результат.Свойство("Команда") Тогда
			
			Подключаемый_ВыполнитьКоманду(Результат.Команда);
			
		КонецЕсли;

		ГрузоотправительОнЖе = Результат.ГрузоотправительОнЖе;
		ГрузополучательОнЖе = Результат.ГрузополучательОнЖе;
		
		УстановитьОтображениеГрузоперевозки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОснованиеПечатиНаКлиенте(ДоговорПередИзменением, ДанныеНовогоДоговора)
	
	КомпонентыПредставления = Новый Массив;
	Если КэшЗначений.ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати Тогда
		КомпонентыПредставления.Добавить(НСтр("ru = 'Договор:'"));
	КонецЕсли;
	
	КомпонентыПредставления.Добавить(ДанныеНовогоДоговора.НаименованиеДоговора);
	
	Если СледуетЗаполнитьОснованиеПечати(ДоговорПередИзменением) Тогда
		
		Объект.ОснованиеПечатиСсылка = Объект.Договор;
		Объект.ОснованиеПечати = СтрСоединить(КомпонентыПредставления, " ");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СледуетЗаполнитьОснованиеПечати(ДоговорПередИзменением)
	
	Если Не ЗначениеЗаполнено(Объект.ОснованиеПечатиСсылка) И ПустаяСтрока(Объект.ОснованиеПечати) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ОснованиеПечатиСсылка) И Объект.ОснованиеПечатиСсылка = ДоговорПередИзменением Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоДокументу(РеквизитОснование = "ДокументОснование")
		
	Документ = РеквизитФормыВЗначение("Объект");
	Если ТипЗнч(Объект[РеквизитОснование]) = Тип("ДокументСсылка.СчетНаОплату") Тогда
		ПараметрыЗаполнения = Новый Структура("Основание", Объект[РеквизитОснование]);
		ПараметрыЗаполнения.Вставить("ВидОперации", Объект.ВидОперации);	
		Документ.Заполнить(ПараметрыЗаполнения);	
	Иначе
		Документ.Заполнить(Объект[РеквизитОснование]);
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Документ, "Объект");
	ЗаполнитьПараметрыРасчетовСКонтрагентом();
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ДействияПослеЧтенияОбъекта();
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,Истина);
	
КонецПроцедуры // ЗаполнитьПоДокументу()

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбораБанковскогоСчета(Договор, Организация, НациональнаяВалюта)
	
	РеквизитыДоговора = Справочники.ДоговорыКонтрагентов.РеквизитыРасчетовВУсловныхЕдиницах(Договор);
	
	СписокВалют = Новый СписокЗначений;
	СписокВалют.Добавить(РеквизитыДоговора.ВалютаРасчетов);
	СписокВалют.Добавить(НациональнаяВалюта);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РасчетыВУсловныхЕдиницах", РеквизитыДоговора.РасчетыВУсловныхЕдиницах);
	ПараметрыФормы.Вставить("Владелец", Организация);
	ПараметрыФормы.Вставить("СписокВалют", СписокВалют);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПредоплату(ТекущийОбъект)
	
	ТекущийОбъект.ЗаполнитьПредоплату();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеВидаЦенИВалютыРасчетов(ПараметрыДокумента)
	
	ВалютаРасчетовПередИзменением = ПараметрыДокумента.ВалютаРасчетовПередИзменением;
	ДанныеДоговора = ПараметрыДокумента.ДанныеДоговора;
	ВопросВидЦен = ПараметрыДокумента.ВопросВидЦен;
	ОткрытьФормуЦеныИВалюты = ПараметрыДокумента.ОткрытьФормуЦеныИВалюты;
	ИзменилсяВидЦен = ПараметрыДокумента.ИзменилсяВидЦен;
	ИзменилсяВидСкидки = ПараметрыДокумента.ИзменилсяВидСкидки;
	Если ПараметрыДокумента.Свойство("ОчиститьДисконтнуюКарту") Тогда
		ОчиститьДисконтнуюКарту = ПараметрыДокумента.ОчиститьДисконтнуюКарту;
	Иначе
		ОчиститьДисконтнуюКарту = Ложь;
	КонецЕсли;
	ПересчетНеобходимПоЗапасам = ПараметрыДокумента.ПересчетНеобходимПоЗапасам;
	ПересчетНеобходимПоРаботам = ПараметрыДокумента.ПересчетНеобходимПоРаботам;
	
	Если НЕ ДанныеДоговора.СуммаВключаетНДС = Неопределено Тогда
		
		Объект.СуммаВключаетНДС = ДанныеДоговора.СуммаВключаетНДС;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда 
		
		Объект.Курс      = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс = 0, 1, ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс);
		Объект.Кратность = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность = 0, 1, ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность);
		
	КонецЕсли;
	
	Если ИзменилсяВидЦен Тогда
		
		Объект.ВидЦен = ДанныеДоговора.ВидЦен;
		
	КонецЕсли; 
	
	Если ИзменилсяВидСкидки Тогда
		
		Объект.ВидСкидкиНаценки = ДанныеДоговора.ВидСкидкиНаценки;
		
	КонецЕсли;
	
	Если ОчиститьДисконтнуюКарту Тогда
		
		Объект.ДисконтнаяКарта = ПредопределенноеЗначение("Справочник.ДисконтныеКарты.ПустаяСсылка");
		Объект.ПроцентСкидкиПоДисконтнойКарте = 0;
		
		ДисконтныеКартыУНФКлиент.ПоказатьПользователюИнформациюОбОчисткеДКИРучныхСкидок();
		
	КонецЕсли;
	
	Если Объект.ВалютаДокумента <> ДанныеДоговора.ВалютаРасчетов Тогда
		
		Объект.БанковскийСчет = Неопределено;
		
	КонецЕсли;
	Объект.ВалютаДокумента = ДанныеДоговора.ВалютаРасчетов;
	
	Если ОткрытьФормуЦеныИВалюты Тогда
		
		ТекстПредупреждения = "";
		Если ИзменилсяВидЦен ИЛИ ИзменилсяВидСкидки Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Договор с контрагентом предусматривает условия цен и скидок, 
									|отличные от установленных в документе. 
									|Возможно, необходимо перезаполнить цены.'") + Символы.ПС + Символы.ПС;
			
		КонецЕсли;
		
		ТекстПредупреждения = ТекстПредупреждения + НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом. 
										|Необходимо проверить валюту документа.'");
		
		ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаРасчетовПередИзменением, Истина, (ИзменилсяВидЦен ИЛИ ИзменилсяВидСкидки), ТекстПредупреждения);
		
	ИначеЕсли ВопросВидЦен Тогда
		
		ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
			УчетВалютныхОпераций);
		
		Если (ПересчетНеобходимПоЗапасам И Объект.Запасы.Количество() > 0)
			ИЛИ (ПересчетНеобходимПоРаботам И Объект.Работы.Количество() > 0) Тогда
			
			ТекстВопроса = НСтр("ru = 'Договор с контрагентом предусматривает условия цен и скидок, отличные от установленных в документе. 
										|Пересчитать документ в соответствии с договором?'");
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОпределитьНеобходимостьПересчетаДокументаПоУсловиямДоговора",
				ЭтотОбъект, ПараметрыДокумента);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	Иначе
		
		ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
			УчетВалютныхОпераций);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзменениеВидаЦенИВалютыРасчетов()

&НаКлиенте
Процедура ОтразитьИзменениеКлючевыхПараметровВНачисленияхИсполнителей()
	
	ТекущаяСтрокаРабот = Элементы.Работы.ТекущиеДанные; 
	Если ТекущаяСтрокаРабот <> Неопределено Тогда
		
		ОтразитьИзмененияПоТаблицеИсполнителей(ТекущаяСтрокаРабот.КлючСвязи);
		
	КонецЕсли;
	
КонецПроцедуры // ОтразитьИзменениеКлючевыхПараметровВНачисленияхИсполнителей()

&НаКлиенте
Процедура ОбновитьТабличнуюЧастьИсполнители()
	
	ТекущаяСтрокаИсполнители = Элементы.Исполнители.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрокаИсполнители = Неопределено 
		И ЗначениеЗаполнено(ТекущаяСтрокаИсполнители.КлючСвязи) Тогда
		
		ОтразитьИзмененияПоТаблицеИсполнителей(ТекущаяСтрокаИсполнители.КлючСвязи);
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьТабличнуюЧастьИсполнители()

&НаСервере
Процедура ПересчитатьСуммуНачисленийПоУказаннойРаботе(КлючСвязи)
	
	// Без ключа нет возможности отработать корректно...
	Если НЕ ЗначениеЗаполнено(КлючСвязи) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МассивИсполнителей	= Документы.ЗаказПокупателя.ПолучитьСтрокиИсполнителейПоКлючуСвязи(Объект.Исполнители, КлючСвязи);
	
	// Если нет исполнителей, пересчитывать не чего...
	Если МассивИсполнителей.Количество() = 0 Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	ТекущаяРабота		= Документы.ЗаказПокупателя.ПолучитьСтрокуРаботыПоКлючуСвязи(Объект.Работы, КлючСвязи);
	СуммаКТУ			= Документы.ЗаказПокупателя.ВычислитьСуммуКТУПоКлючуСвязи(Объект.Исполнители, КлючСвязи);
	КоэффициентыРаботы	= ТекущаяРабота.Количество * ТекущаяРабота.Коэффициент * ТекущаяРабота.Кратность;
	СуммаРаботы			= ТекущаяРабота.Сумма;
	
	Для каждого СтрокаИсполнителя Из МассивИсполнителей Цикл
		
		СтрокаИсполнителя.СуммаНачисления = 
			Документы.ЗаказПокупателя.РассчитатьЗначениеНачисленияПоСтрокеНаСервере(
				КоэффициентыРаботы, 
				СуммаРаботы, 
				СтрокаИсполнителя.КТУ, 
				СуммаКТУ, 
				СтрокаИсполнителя.ВидНачисленияУдержания, 
				СтрокаИсполнителя.РазмерНачисленияУдержания);
		
	КонецЦикла;
	
КонецПроцедуры // ПересчитатьСуммуНачисленияПоУказаннойРаботе()

&НаСервере
Процедура ОтразитьИзмененияПоТаблицеИсполнителей(КлючСвязи = Неопределено)
	
	Если КлючСвязи <> Неопределено Тогда
		
		ПересчитатьСуммуНачисленийПоУказаннойРаботе(КлючСвязи);
		
	Иначе
		
		// Используется при обновлении/заполнении по всем работам.
		МассивРабот = Объект.Работы.НайтиСтроки(Новый Структура("ТипНоменклатурыУслуга", Ложь));
		Для каждого СтрокаРаботы Из МассивРабот Цикл
			
			ПересчитатьСуммуНачисленийПоУказаннойРаботе(СтрокаРаботы.КлючСвязи);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОтразитьИзмененияКТУ()

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты)
	
	ДокументыУНФ.ДатаПриИзменении(ДанныеДляИзмененияДаты, ЭтотОбъект, Объект);
	
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
	// Прослеживаемость
	КэшЗначений.Вставить("ВестиУчетПрослеживаемыхТоваров", ВестиУчетПрослеживаемыхТоваров());
	ОбновитьПризнакПрослеживаемости();
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ДокументыУНФ.ОрганизацияПриИзменении(ЭтотОбъект, Объект);
	
	Если Объект.ВалютаДокумента = Объект.Организация.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств Тогда
		Объект.БанковскийСчет = Объект.Организация.БанковскийСчетПоУмолчанию;
	КонецЕсли;
	
	ВалютаИКассаПоУмолчанию = Справочники.Организации.ВалютаИКассаПоУмолчанию(Объект);
	Если ЗначениеЗаполнено(ВалютаИКассаПоУмолчанию) Тогда
		Объект.Касса = ВалютаИКассаПоУмолчанию.Касса;
	КонецЕсли;
	
	Объект.Договор = Справочники.ДоговорыКонтрагентов.ПоДокументуКонтрагентуОрганизацииИВидуОперации(Объект.Ссылка,
		Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
	
	УстановитьНастройкиУчетаВНалогообложении();
	
	ТребуетсяОбновлениеТЧПоОстаткамМатериалы = РежимОстаткиИРезервы И Объект.ИспользоватьМатериалы;
	ТребуетсяОбновлениеТЧПоОстаткамЗапасы = РежимОстаткиИРезервы И Объект.ИспользоватьТовары;
	ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита();
	
	ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов();
	
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	
КонецПроцедуры

&НаСервере
Процедура СтрокаТаблицыПартияПриИзмененииНаСервере(СтруктураДанные)
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанные.СтранаПроисхождения) Тогда
		
		СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("НомерГТД", Неопределено);
	
	ГрузовыеТаможенныеДекларацииСервер.АвтоматическийПодборВРеализацииНомераГТД(СтруктураДанные);
	
	Если РежимОстаткиИРезервы Тогда
		
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(, СтруктураДанные.Номенклатура, , Истина)
		
	КонецЕсли;

	СтруктурнаяЕдиница = ?(СтруктураДанные.Свойство("СтруктурнаяЕдиница"), СтруктураДанные.СтруктурнаяЕдиница, Неопределено);
	НалогообложениеНДСОрганизации = НалогиУНФ.НалогообложениеНДС(СтруктураДанные.Организация,, СтруктураДанные.ДатаОбработки);
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС")
		И (НЕ СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС")
		ИЛИ НалогообложениеНДСОрганизации = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС")) Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС")
			ИЛИ НалогообложениеНДСОрганизации = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.ВидСтавкиНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Номенклатура.ВидСтавкиНДС));
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Организация.ВидСтавкиНДСПоУмолчанию));
	КонецЕсли;
	
	СтруктураДанные.Вставить("ТребуетсяИзменениеНалогообложениеНаСНДС", Ложь);
	СтруктураДанные.Вставить("КомиссияСНДС", СтруктураДанные.Партия.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС);
	РаботаСКомиссионерамиКомитентамиСервер.СкорректироватьСтавкуНДСКомиссионногоТовара(СтруктураДанные);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	// Наборы
	Если НЕ СтруктураДанные.Свойство("ЕдиницаИзмерения") И ТипЗнч(СтруктураДанные.Номенклатура)=Тип("СправочникСсылка.Номенклатура") Тогда
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	КонецЕсли; 
	Если НЕ СтруктураДанные.Свойство("Коэффициент") Тогда
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения)=Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
		Иначе
			СтруктураДанные.Вставить("Коэффициент", 1);
		КонецЕсли; 
	КонецЕсли;
	// Конец Наборы
	
	НоменклатураСтроки = СтруктураДанные.Номенклатура;
	
	СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
	СтруктураДанные.Вставить("НомерГТД", Неопределено);
	СтруктураДанные.Вставить("ФиксированнаяСтоимость", СтруктураДанные.Номенклатура.ФиксированнаяСтоимость);
	СтруктураДанные.Вставить("ТоварнаяНоменклатураВЭД", СтруктураДанные.Номенклатура.ТоварнаяНоменклатураВЭД);
	
	СтруктураДанные.Вставить("ЭтоУслуга", СтруктураДанные.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	СтруктураДанные.Вставить("ЭтоЗапас", (СтруктураДанные.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
									ИЛИ СтруктураДанные.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат")));
	
	Если СтруктураДанные.Свойство("НормаВремени") Тогда
		СтруктураДанные.НормаВремени = ЦенообразованиеСервер.ПолучитьНормуВремениРаботы(СтруктураДанные);
	КонецЕсли;
	
	ДатаОбработки = ?(СтруктураДанные.Свойство("ДатаОбработки"), ДатаОбработки, ТекущаяДатаСеанса());
	НалогообложениеНДСОрганизации = НалогиУНФ.НалогообложениеНДС(СтруктураДанные.Организация,, ДатаОбработки);
	
	Если Не СтруктураДанные.Свойство("ЕстьПартииСНДС") Тогда
		СтруктураДанные.Вставить("ЕстьПартииСНДС", Ложь);
	КонецЕсли;
		
	Если СтруктураДанные.Свойство("НалогообложениеНДС")
		И (НЕ СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС")
		ИЛИ (НалогообложениеНДСОрганизации = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") И СтруктураДанные.ЕстьПартииСНДС)) Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС")
			ИЛИ (НалогообложениеНДСОрганизации = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") И СтруктураДанные.ЕстьПартииСНДС) Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.ВидСтавкиНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки), СтруктураДанные.ДатаОбработки, ТекущаяДатаСеанса())));
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки), СтруктураДанные.ДатаОбработки, ТекущаяДатаСеанса())));
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("Характеристика") Тогда
		СтруктураДанные.Вставить("Спецификация", Справочники.Спецификации.СпецификацияПоУмолчанию(СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика));
	Иначе
		СтруктураДанные.Вставить("Спецификация", Справочники.Спецификации.СпецификацияПоУмолчанию(СтруктураДанные.Номенклатура));
	КонецЕсли;
	
	// Характеристики
	СтруктураДанные.Вставить("ИспользоватьХарактеристики",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",Ложь);
	
	Если ЗначениеЗаполнено(НоменклатураСтроки) И НоменклатураСтроки.ИспользоватьХарактеристики
		Тогда
		ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(НоменклатураСтроки);
		
		Если Не ЗначенияПоУмолчанию = Неопределено
			Тогда
			ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
		КонецЕсли;
		
		Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика",ХарактеристикаПоУмолчанию);
		Иначе
			СтруктураДанные.Характеристика = ?(ЗначениеЗаполнено(СтруктураДанные.Характеристика), СтруктураДанные.Характеристика, ХарактеристикаПоУмолчанию);
		КонецЕсли;
		
		СтруктураДанные.ИспользоватьХарактеристики = Истина;
		СтруктураДанные.ПроверятьЗаполнениеХарактеристики = НоменклатураСтроки.ПроверятьЗаполнениеХарактеристики;
	КонецЕсли; 
	// Конец Характеристики
	
	Если СтруктураДанные.Свойство("Цена") И ЗначениеЗаполнено(СтруктураДанные.Цена) Тогда
		// При подборе наборов расчет цены не требуется - используется цена, указанная в подборе
	ИначеЕсли СтруктураДанные.Свойство("ВидЦен") Тогда
		
		Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		КонецЕсли;
		
		Если СтруктураДанные.Свойство("ВидРабот") Тогда
		
			Если СтруктураДанные.Номенклатура.ТипНоменклатуры <> ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") 
				ИЛИ СтруктураДанные.Номенклатура.ФиксированнаяСтоимость 
				ИЛИ СтруктураДанные.Номенклатура.ЭтоНабор Тогда
				
				Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
				СтруктураДанные.Вставить("Цена", Цена);
				СтруктураДанные.Вставить("МинимальнаяЦена", ЦенообразованиеСервер.ПолучитьМинимальнуюЦенуНоменклатуры(СтруктураДанные));   
				
			Иначе
				
				СтруктураДляВидаРабот = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанные);
				
				СтруктураДляВидаРабот.Номенклатура = СтруктураДанные.ВидРабот;
				СтруктураДляВидаРабот.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				
				Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДляВидаРабот);
				СтруктураДанные.Вставить("Цена", Цена);  
				СтруктураДанные.Вставить("МинимальнаяЦена", ЦенообразованиеСервер.ПолучитьМинимальнуюЦенуНоменклатуры(СтруктураДляВидаРабот));

				
			КонецЕсли;
		
		Иначе
			
			Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);			
			СтруктураДанные.Вставить("Цена", Цена);                                         
			СтруктураДанные.Вставить("МинимальнаяЦена", ЦенообразованиеСервер.ПолучитьМинимальнуюЦенуНоменклатуры(СтруктураДанные));
			
		КонецЕсли;
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ВидСкидкиНаценки")
		И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки) Тогда
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки.Процент);
	Иначе
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", 0);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ПроцентСкидкиПоДисконтнойКарте") 
		И ЗначениеЗаполнено(СтруктураДанные.ДисконтнаяКарта) Тогда
		ТекПроцент = СтруктураДанные.ПроцентСкидкиНаценки;
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", ТекПроцент + СтруктураДанные.ПроцентСкидкиПоДисконтнойКарте);
	КонецЕсли;
	
	// Наборы
	НаборыСервер.ДобавитьИнформациюОНабореПриПолученииДанныхНоменклатуры(СтруктураДанные);
	// Конец Наборы
	
	//Партии
	СтруктураДанные.Вставить("ИспользоватьПартии",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеПартий",Ложь);
	
	Если Не СтруктураДанные.Свойство("ТребуетсяИзменениеНалогообложениеНаСНДС") Тогда
		СтруктураДанные.Вставить("ТребуетсяИзменениеНалогообложениеНаСНДС", Ложь);
	КонецЕсли;
	
	Если НЕ СтруктураДанные.Свойство("КомиссияСНДС") Тогда
		СтруктураДанные.Вставить("КомиссияСНДС", Ложь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоменклатураСтроки) И НоменклатураСтроки.ИспользоватьПартии
		Тогда
		
		Если СтруктураДанные.Свойство("СтатусПартии")
			Тогда
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(НоменклатураСтроки,СтруктураДанные.СтатусПартии);
		Иначе
			Если Не СтруктураДанные.Свойство("ВидОперации")
				Тогда
				ВидОперации = Неопределено
			Иначе
				ВидОперации = СтруктураДанные.ВидОперации
			КонецЕсли;
			
			СтатусПартии = НоменклатураВДокументахСервер.СоответствиеВидаОперацииИлиХозОперацииСтатусуПартии(, ВидОперации);
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(НоменклатураСтроки,СтатусПартии);
		КонецЕсли;
		
		ПартияПоУмолчанию = Справочники.ПартииНоменклатуры.ПустаяСсылка();
		
		Если Не ЗначенияПартииПоУмолчанию = Неопределено
			Тогда
			ПартияПоУмолчанию = ЗначенияПартииПоУмолчанию;
		КонецЕсли;
		
		Если НЕ СтруктураДанные.Свойство("Партия") Тогда
			СтруктураДанные.Вставить("Партия",ПартияПоУмолчанию);
		Иначе
			СтруктураДанные.Партия = ?(ЗначениеЗаполнено(СтруктураДанные.Партия), СтруктураДанные.Партия, ПартияПоУмолчанию);
		КонецЕсли;
		
		СтруктураДанные.ПроверятьЗаполнениеПартий = НоменклатураСтроки.ПроверятьЗаполнениеПартий;
		СтруктураДанные.ИспользоватьПартии = Истина;
		
		Если Не СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
			РаботаСКомиссионерамиКомитентамиСервер.СкорректироватьСтавкуНДСКомиссионногоТовара(СтруктураДанные);
		КонецЕсли;
		
		СтруктураДанные.КомиссияСНДС = СтруктураДанные.Партия.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		
	КонецЕсли;
	// Конец Партии
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьСерииНоменклатуры Тогда
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", СерииНоменклатурыУНФ.СтатусСерийНоменклатурыПриИзменении(СтруктураДанные));
	Иначе
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", 0);
	КонецЕсли;
	
	Если Не СтруктураДанные.Свойство("Склад") Тогда
		СтруктураДанные.Вставить("Склад", СтруктураДанные.Номенклатура.Склад);
		СтруктураДанные.Вставить("Ячейка", СтруктураДанные.Номенклатура.Ячейка);
	КонецЕсли;
	
	СтруктураДанные.Вставить("УказыватьДокументПоступления", СкладскойУчетСервер.УказыватьДокументПоступления(СтруктураДанные.Склад, Ложь));
	
	ГрузовыеТаможенныеДекларацииСервер.АвтоматическийПодборВРеализацииНомераГТД(СтруктураДанные);
	
	// Прослеживаемость
	СтруктураДанные.Вставить("ПрослеживаемыйТовар", СтруктураДанные.Номенклатура.ПрослеживаемыйТовар 
		И СтруктураДанные.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас);
	СтруктураДанные.Вставить("ПрослеживаемыйКомплект", СтруктураДанные.Номенклатура.ПрослеживаемыйКомплект
		И СтруктураДанные.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас);
	Если СтруктураДанные.ПрослеживаемыйТовар 
		И ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров") Тогда
		СтруктураДанные.Вставить("НомерГТД", Неопределено);
	КонецЕсли; 
	// Конец Прослеживаемость
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
			СтруктураДанные.Вставить("Коэффициент", 1);
		Иначе
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
		КонецЕсли;
		
		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		
	КонецЕсли; 
	
	СтруктураДанные.Вставить("МинимальнаяЦена", ЦенообразованиеСервер.ПолучитьМинимальнуюЦенуНоменклатуры(СтруктураДанные));
	
	СтруктураДанные.Вставить("Спецификация", Справочники.Спецификации.СпецификацияПоУмолчанию(СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика));
	
	Если СтруктураДанные.Свойство("НормаВремени") Тогда
		СтруктураДанные.НормаВремени = ЦенообразованиеСервер.ПолучитьНормуВремениРаботы(СтруктураДанные);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанные.СтранаПроисхождения) Тогда
		
		СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("НомерГТД", Неопределено);
	
	ГрузовыеТаможенныеДекларацииСервер.АвтоматическийПодборВРеализацииНомераГТД(СтруктураДанные);
	
	// Наборы
	НаборыСервер.ДобавитьИнформациюОНабореПриПолученииДанныхНоменклатуры(СтруктураДанные);
	// Конец Наборы
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура();
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()

&НаСервере
Функция ДанныеКонтрагентаДляИзменения()
	
	ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПоДокументуКонтрагентуОрганизацииИВидуОперации(Объект.Ссылка,
		Контрагент, Объект.Организация, Объект.ВидОперации);
	
	Результат = Новый Структура;
	
	Результат.Вставить("Договор", ДоговорПоУмолчанию);
	
	ДанныеДоговора = ДанныеДоговораДляИзменения(ДатаДокумента, ДоговорПоУмолчанию, Контрагент);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат, ДанныеДоговора);
	
	Результат.Вставить("КонтактноеЛицоПодписант", Контрагент.КонтактноеЛицоПодписант);
	
	Если ПолучитьФункциональнуюОпцию("УчетПоПроектам") И ЗначениеЗаполнено(ДоговорПоУмолчанию) И НЕ ЗначениеЗаполнено(Объект.Проект) Тогда
		Результат.Вставить("Проект", Справочники.Проекты.ПолучитьПроектПоДоговору(ДоговорПоУмолчанию));
	КонецЕсли;
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ДанныеКИКонтрагента = Справочники.Контрагенты.ДанныеКИКонтрагентаДляВыбораНаФорме(Контрагент, Элементы,
			ПоляКИДляОтправкиЧека());
		ЗаполнитьПоляКИДляОтправкиЧекаПоУмолчанию(ДанныеКИКонтрагента);
	КонецЕсли;
	
	// Прослеживаемость
	Результат.Вставить(
		"РеализацияВЕАЭС",
		Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Объект.Контрагент));
	// Конец Прослеживаемость
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеДоговораДляИзменения(Знач Дата, Знач Договор, Знач Контрагент)
	
	Результат = Новый Структура;
	Результат.Вставить("НаименованиеДоговора", Договор.Наименование);
	Результат.Вставить("ВалютаРасчетов", Договор.ВалютаРасчетов);
	Результат.Вставить("ВалютаРасчетовКурсКратность", РаботаСКурсамиВалют.ПолучитьКурсВалюты(Договор.ВалютаРасчетов,
		Дата));
	Результат.Вставить("ВидЦен", Договор.ВидЦен);
	Результат.Вставить("ВидСкидкиНаценки", Договор.ВидСкидкиНаценки);
	Результат.Вставить("РасчетыВУсловныхЕдиницах", Договор.РасчетыВУсловныхЕдиницах);
	Результат.Вставить("СуммаВключаетНДС", Неопределено);
	Если ЗначениеЗаполнено(Договор.ВидЦен) Тогда
		Результат.СуммаВключаетНДС = Договор.ВидЦен.ЦенаВключаетНДС;
	КонецЕсли;
	
	СпособЗачетаПредоплаты = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляДоговора(Договор,
		Контрагент, Истина);
	
	Результат.Вставить("СпособЗачетаПредоплаты", СпособЗачетаПредоплаты);
	
	ПараметрыДоговора = Справочники.ДоговорыКонтрагентов.ПараметрыДоговора(Договор);
	Результат.Вставить("ЭтоУниверсальныйДокумент", ПараметрыДоговора.ЭтоУниверсальныйДокумент);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция МатериалыПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
	СтруктураДанные.Вставить("НомерГТД", Неопределено);
	
	Если Не СтруктураДанные.Свойство("Склад") Тогда
		СтруктураДанные.Вставить("Склад", СтруктураДанные.Номенклатура.Склад);
		СтруктураДанные.Вставить("Ячейка", СтруктураДанные.Номенклатура.Ячейка);
	КонецЕсли;
	
	СтруктураДанные.Вставить("УказыватьДокументПоступления", СкладскойУчетСервер.УказыватьДокументПоступления(СтруктураДанные.Склад, Ложь));
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьСерииНоменклатуры Тогда
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", СерииНоменклатурыУНФ.СтатусСерийНоменклатурыПриИзменении(СтруктураДанные));
	Иначе
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", 0);
	КонецЕсли;
	
	ГрузовыеТаможенныеДекларацииСервер.АвтоматическийПодборВРеализацииНомераГТД(СтруктураДанные);
	
	Возврат СтруктураДанные;
	
КонецФункции // МатериалыПолучитьДанныеНоменклатураПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеСотрудникаПриИзменении(СтруктураДанные)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлановыеНачисленияИУдержанияСрезПоследних.Сотрудник КАК Сотрудник,
	|	МИНИМУМ(ПлановыеНачисленияИУдержанияСрезПоследних.ВидНачисленияУдержания) КАК ВидНачисленияУдержания
	|ПОМЕСТИТЬ ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияИУдержания.СрезПоследних(
	|			&НаДату,
	|			Организация = &Организация
	|				И Актуальность
	|				И Сотрудник = &Сотрудник
	|				И ВидНачисленияУдержания В (ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплата), ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплатаПроцент), ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.ФиксированнаяСумма))) КАК ПлановыеНачисленияИУдержанияСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлановыеНачисленияИУдержанияСрезПоследних.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.Сотрудник КАК Сотрудник,
	|	ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.ВидНачисленияУдержания КАК ВидНачисленияУдержания,
	|	ПлановыеНачисленияИУдержанияСрезПоследних.Сумма * КурсВалютыНачисления.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыНачисления.Кратность) КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний КАК ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияИУдержания.СрезПоследних(
	|				&НаДату,
	|				Организация = &Организация
	|					И Актуальность) КАК ПлановыеНачисленияИУдержанияСрезПоследних
	|		ПО ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.Сотрудник = ПлановыеНачисленияИУдержанияСрезПоследних.Сотрудник
	|			И ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.ВидНачисленияУдержания = ПлановыеНачисленияИУдержанияСрезПоследних.ВидНачисленияУдержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&НаДату, ) КАК КурсВалютыНачисления
	|		ПО (ПлановыеНачисленияИУдержанияСрезПоследних.Валюта = КурсВалютыНачисления.Валюта),
	|	РегистрСведений.КурсыВалют.СрезПоследних(&НаДату, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента";
	
	Запрос.УстановитьПараметр("НаДату", СтруктураДанные.НаДату);
	Запрос.УстановитьПараметр("Организация", СтруктураДанные.Организация);
	Запрос.УстановитьПараметр("ВалютаДокумента", СтруктураДанные.ВалютаДокумента);
	Запрос.УстановитьПараметр("Сотрудник", СтруктураДанные.Сотрудник);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаСотрудников = МассивРезультатов[1].Выгрузить();
	
	Если ТаблицаСотрудников.Количество() = 0 Тогда
		СтруктураДанные.Вставить("ВидНачисленияУдержания", Справочники.ВидыНачисленийИУдержаний.ПустаяСсылка());
		СтруктураДанные.Вставить("Сумма", 0);
	Иначе
		СтруктураДанные.Вставить("ВидНачисленияУдержания", ТаблицаСотрудников[0].ВидНачисленияУдержания);
		СтруктураДанные.Вставить("Сумма", ТаблицаСотрудников[0].Сумма);
	КонецЕсли; 
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеСотрудникаПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьСрокОплатыПокупателя(Договор)
	
	Возврат Договор.СрокОплатыПокупателя;

КонецФункции // ПолучитьСрокОплатыПокупателя()

&НаКлиенте
Процедура ЗаполнитьСкладВСтрокеТЧ(СтрокаТабличнойЧасти, СтруктураДанные)
	
	Если Объект.ПоложениеСклада=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = СтруктураДанные.Склад;
		СтрокаТабличнойЧасти.Ячейка = СтруктураДанные.Ячейка;
	Иначе
		СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
		СтрокаТабличнойЧасти.Ячейка = Объект.Ячейка;
	КонецЕсли; 
	СтрокаТабличнойЧасти.ЯчейкаДоступна = ЯчейкаДоступна(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС(ЭтоОткрытие = Ложь)
	
	НалогообложениеПередИзменением = Объект.НалогообложениеНДС;
	Объект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Объект.Организация,, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
	
	Если НЕ НалогообложениеПередИзменением = Объект.НалогообложениеНДС ИЛИ ЭтоОткрытие Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС(НалогообложениеПередИзменением);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС(НалогообложениеПередИзменением = Неопределено)
	
	Если НалогообложениеПередИзменением = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС 
		И Не Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС
		И РаботаСКомиссионерамиКомитентамиСервер.ВТабличнойЧастиЕстьКомиссионнаяПартияСНалогообложениемНДС(Объект) Тогда
		Объект.НалогообложениеНДС = НалогообложениеПередИзменением;
		СтрокаСообщения = НСтр("ru = 'В табличной части присутствует комиссионная номенклатура облагаемая НДС. Тип налогообложения НДС не изменен.'");
		ОбщегоНазначения.СообщитьПользователю(СтрокаСообщения);
		Возврат;
	КонецЕсли;
	
	НалогообложениеНДСОрганизации = НалогиУНФ.НалогообложениеНДС(Объект.Организация,, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
	ОрганизацияБезНДС = НалогообложениеНДСОрганизации = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС;
	
	Если Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		Элементы.ПлатежныйКалендарьСуммаНДСОплаты.Видимость = Истина;
		Элементы.СписокПлатежныйКалендарьСуммаНДСОплаты.Видимость = Истина;
		Элементы.СчетФактураНадпись.Видимость = Истина;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			
			Партия = СтрокаТабличнойЧасти.Партия;
			Если ОрганизацияБезНДС Тогда
				
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.БезНДС);
				
				Если ЗначениеЗаполнено(Партия) И Партия.Статус = Перечисления.СтатусыПартий.ТоварыНаКомиссии 
					И Партия.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
					
					Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС) Тогда
						СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
					Иначе
						СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				Если ЗначениеЗаполнено(Партия) И Партия.Статус = Перечисления.СтатусыПартий.ТоварыНаКомиссии 
					И Партия.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
					
					СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.БезНДС);;
				Иначе
					
					Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС) Тогда
						СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
					Иначе
						СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;
		
		Элементы.ЗНРаботыСтавкаНДС.Видимость = Истина;
		Элементы.ЗНРаботыСуммаНДС.Видимость = Истина;
		Элементы.ЗНРаботыВсего.Видимость = Истина;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Работы Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
			КонецЕсли;
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;
		
	Иначе
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		Элементы.ПлатежныйКалендарьСуммаНДСОплаты.Видимость = Ложь;
		Элементы.СписокПлатежныйКалендарьСуммаНДСОплаты.Видимость = Ложь;
		
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			Элементы.СчетФактураНадпись.Видимость = Ложь;
		Иначе
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
			Элементы.СчетФактураНадпись.Видимость = Истина;
		КонецЕсли;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;
		
		Элементы.ЗНРаботыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗНРаботыСуммаНДС.Видимость = Ложь;
		Элементы.ЗНРаботыВсего.Видимость = Ложь;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Работы Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

&НаСервереБезКонтекста
Функция ПолучитьДанныеСтруктурнаяЕдиницаПриИзменении(СтруктураДанные)
	
	Если СтруктураДанные.Подразделение.ИсточникПеремещения.ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Склад")
		ИЛИ СтруктураДанные.Подразделение.ИсточникПеремещения.ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Подразделение") Тогда
	
		СтруктураДанные.Вставить("СтруктурнаяЕдиницаЗапасов", СтруктураДанные.Подразделение.ИсточникПеремещения);
		СтруктураДанные.Вставить("ЯчейкаЗапасов", СтруктураДанные.Подразделение.ЯчейкаИсточникаПеремещения);

	Иначе
		
		СтруктураДанные.Вставить("СтруктурнаяЕдиницаЗапасов", Неопределено);
		СтруктураДанные.Вставить("ЯчейкаЗапасов", Неопределено);
		
	КонецЕсли;
		
	СтруктураДанные.Вставить("ОрдерныйСкладЗапасов", НЕ СтруктураДанные.Подразделение.ИсточникПеремещения.ОрдерныйСклад);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеСтруктурнаяЕдиницаПриИзменении()

&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТабличнойЧасти = "Запасы", СтрокаТабличнойЧасти = Неопределено, ПараметрыРасчета = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
	КонецЕсли;
	
	Если ПараметрыРасчета=Неопределено Тогда
		ПараметрыРасчета = Новый Структура("СброситьФлагСкидкиРассчитаны",Истина);
	КонецЕсли;	

	ПараметрыРасчета.Вставить("ИспользоватьМинимальныеЦены", КэшЗначений.ИспользоватьМинимальныеЦены);
	ПараметрыРасчета.Вставить("СуммаВключаетНДС",Объект.СуммаВключаетНДС);

	ТабличныеЧастиУНФКлиент.РассчитатьСуммыВСтрокеТЧ(СтрокаТабличнойЧасти, ПараметрыРасчета);

	ЦенообразованиеКлиент.ПоказатьОповещениеПользователяОКорректировкеЦены(ПараметрыРасчета);

	ОбновитьПодвалФормы();
	
	// АвтоматическиеСкидки.
	СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти");
	// Конец АвтоматическиеСкидки
	
	// Ручные скидки
	РассчитатьСуммуИПроцентСкидкиРаботыЗапасы(Объект, СкидкаСумма, СкидкаПроцент);
	// Конец Ручные скидки
	
	// Серии номенклатуры
	Если ИспользоватьСерииНоменклатурыОстатки<>Неопределено И ИмяТабличнойЧасти = "Запасы" Тогда
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСерииНоменклатурыКоличество(Объект, СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()	

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуИПроцентСкидкиРаботыЗапасы(Объект, СкидкаСумма, СкидкаПроцент)
	
	ОбщаяСуммаБезСкидок = 0;
	Для каждого стр Из Объект.Работы Цикл
		ОбщаяСуммаБезСкидок = ОбщаяСуммаБезСкидок + стр.Цена * стр.Количество * стр.Кратность * стр.Коэффициент;
	КонецЦикла;
	Для каждого стр Из Объект.Запасы Цикл
		ОбщаяСуммаБезСкидок = ОбщаяСуммаБезСкидок + стр.Цена * стр.Количество;
	КонецЦикла;
	
	СкидкаСумма = Объект.Работы.Итог("СуммаСкидкиНаценки") + Объект.Запасы.Итог("СуммаСкидкиНаценки");
	СкидкаПроцент = ?(ОбщаяСуммаБезСкидок=0, 0, СкидкаСумма / ОбщаяСуммаБезСкидок * 100);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьПлатежныйКалендарь()
	
	Для каждого ТекСтрока Из Объект.ПлатежныйКалендарь Цикл
		ТекСтрока.СуммаОплаты = Окр((Объект.Запасы.Итог("Всего") + Объект.Работы.Итог("Всего")) * ТекСтрока.ПроцентОплаты / 100, 2, 1);
		ТекСтрока.СуммаНДСОплаты = Окр((Объект.Запасы.Итог("СуммаНДС") + Объект.Работы.Итог("СуммаНДС")) * ТекСтрока.ПроцентОплаты / 100, 2, 1);
	КонецЦикла;
	
КонецПроцедуры // ПересчитатьПлатежныйКалендарь()

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь,
	ПерезаполнитьЦены = Ложь, ТекстПредупреждения = "")
	
	ПараметрыФормыЦеныИВалюта = ЦеныИВалютаКлиентСервер.НовыеПараметрыФормыЦеныИВалюта(Объект, ТолькоПросмотр,
		Компания, ПерезаполнитьЦены, ПересчитатьЦены, ТекстПредупреждения);
	ПараметрыФормыЦеныИВалюта.ВалютаПередИзменением = ВалютаРасчетовПередИзменением;
	
	ЦенообразованиеКлиент.ДополнитьСтруктуруВызоваФормыЦеныИВалютыСтруктурнойЕдиницей(Объект, Объект.Запасы,
		Элементы.Запасы.ТекущиеДанные, ПараметрыФормыЦеныИВалюта);
		
	Если Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") 
		И Элементы.ЗапасыПартия.Видимость Тогда
		РаботаСНоменклатуройКлиентУНФ.ДополнитьСтруктуруВызоваФормыЦеныИВалютыМассивомПартийНоменклатуры(Объект.Запасы, ПараметрыФормыЦеныИВалюта);
	КонецЕсли;
		
	ПараметрыФормыЦеныИВалюта.Вставить("ДополнительнаяИнформацияМинимальныеЦены", Символы.ПС + НСтр(
		"ru = 'Для табличной части работы используются %1'"));

	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуЦеныИВалютаЗавершение", ЭтотОбъект,
		Новый Структура("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением));
	ОткрытьФорму("ОбщаяФорма.ЦеныИВалюта", ПараметрыФормыЦеныИВалюта, ЭтотОбъект, , , , ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
Процедура ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен() 
	
	СтруктураДанных = Новый Структура;
	ТабличнаяЧастьДокумента = Новый Массив;

	СтруктураДанных.Вставить("Дата",				Объект.Дата);
	СтруктураДанных.Вставить("Организация",			Компания);
	СтруктураДанных.Вставить("ВидЦен",				Объект.ВидЦен);
	СтруктураДанных.Вставить("ВалютаДокумента",		Объект.ВалютаДокумента);
	СтруктураДанных.Вставить("СуммаВключаетНДС",	Объект.СуммаВключаетНДС);
	
	СтруктураДанных.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	СтруктураДанных.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	СтруктураДанных.Вставить("ПроцентСкидкиНаценки", 0);
	
	Для каждого СтрокаТЧ Из Объект.Работы Цикл
		
		СтрокаТЧ.Цена = 0;
		
		СтрокаТабличнойЧасти = Новый Структура();
		СтрокаТабличнойЧасти.Вставить("ВидРабот",			?(ВидРаботВШапке, Объект.ВидРабот, СтрокаТЧ.ВидРабот));
		Если НЕ СтрокаТЧ.ФиксированнаяСтоимость Тогда
			СтрокаТабличнойЧасти.Вставить("ОригинальнаяНоменклатура", СтрокаТЧ.Номенклатура);
			СтрокаТабличнойЧасти.Вставить("ОригинальнаяХарактеристика", СтрокаТЧ.Характеристика);
			СтрокаТабличнойЧасти.Вставить("Номенклатура", СтрокаТабличнойЧасти.ВидРабот);
			СтрокаТабличнойЧасти.Вставить("Характеристика", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
		Иначе
			СтрокаТабличнойЧасти.Вставить("Номенклатура",		СтрокаТЧ.Номенклатура);
			СтрокаТабличнойЧасти.Вставить("Характеристика",		СтрокаТЧ.Характеристика);
		КонецЕсли; 
		СтрокаТабличнойЧасти.Вставить("ЕдиницаИзмерения",	ПредопределенноеЗначение("Справочник.КлассификаторЕдиницИзмерения.шт"));
		СтрокаТабличнойЧасти.Вставить("СтавкаНДС",			СтрокаТЧ.СтавкаНДС);
		// Наборы
		Если СтрокаТЧ.Свойство("НоменклатураНабора") Тогда
			СтрокаТабличнойЧасти.Вставить("НоменклатураНабора",		СтрокаТЧ.НоменклатураНабора);
			СтрокаТабличнойЧасти.Вставить("ХарактеристикаНабора",	СтрокаТЧ.ХарактеристикаНабора);
			СтрокаТабличнойЧасти.Вставить("ДоляСтоимости",			СтрокаТЧ.ДоляСтоимости);
			СтрокаТабличнойЧасти.Вставить("Количество",				СтрокаТЧ.Количество*СтрокаТЧ.Кратность*СтрокаТЧ.Коэффициент);
			Если Объект.Свойство("ДобавленныеНаборы") Тогда
				// Количество добавленных наборов
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("НоменклатураНабора", СтрокаТЧ.НоменклатураНабора);
				СтруктураОтбора.Вставить("ХарактеристикаНабора", СтрокаТЧ.ХарактеристикаНабора);
				ДобавленныеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОтбора);
				Если ДобавленныеСтроки.Количество()=0 Тогда
					СтрокаТабличнойЧасти.Вставить("КоличествоНаборов", 1);
				Иначе
					СтрокаТабличнойЧасти.Вставить("КоличествоНаборов", ДобавленныеСтроки[0].Количество);
				КонецЕсли;
			Иначе
				СтрокаТабличнойЧасти.Вставить("КоличествоНаборов", 1);
			КонецЕсли;
		КонецЕсли;
		// Конец Наборы
		СтрокаТабличнойЧасти.Вставить("Цена",				0);

		Если КэшЗначений.ИспользоватьМинимальныеЦены Тогда
			СтрокаТабличнойЧасти.Вставить("МинимальнаяЦена", 0);
		КонецЕсли;    	
		
		ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, СтрокаТЧ, СтрокаТабличнойЧасти); 
	
		ТабличнаяЧастьДокумента.Добавить(СтрокаТабличнойЧасти);
		
	КонецЦикла;

	ЦенообразованиеСервер.ПолучитьЦеныТабличнойЧастиПоВидуЦен(СтруктураДанных, ТабличнаяЧастьДокумента);
	
	Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл
		
		Если СтрокаТЧ.Свойство("ОригинальнаяНоменклатура") Тогда
			СтрокаТЧ.Номенклатура = СтрокаТЧ.ОригинальнаяНоменклатура;
		КонецЕсли; 
		Если СтрокаТЧ.Свойство("ОригинальнаяХарактеристика") Тогда
			СтрокаТЧ.Характеристика = СтрокаТЧ.ОригинальнаяХарактеристика;
		КонецЕсли; 
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаТЧ.Характеристика);
		Если СтрокаТЧ.Свойство("НоменклатураНабора") Тогда
			СтруктураПоиска.Вставить("НоменклатураНабора",	 СтрокаТЧ.НоменклатураНабора);
			СтруктураПоиска.Вставить("ХарактеристикаНабора", СтрокаТЧ.ХарактеристикаНабора);
		КонецЕсли; 
		
		РезультатПоиска = Объект.Работы.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаРезультат Из РезультатПоиска Цикл
			СтрокаРезультат.Цена = СтрокаТЧ.Цена;
			
			Если СтрокаТЧ.Свойство("МинимальнаяЦена") Тогда
				СтрокаРезультат.МинимальнаяЦена = СтрокаТЧ.МинимальнаяЦена;
			КонецЕсли;
			
			РассчитатьСуммуВСтрокеТабличнойЧасти("Работы", СтрокаРезультат);
		КонецЦикла;
		
	КонецЦикла;
	
	// Наборы
	// Округление цен составляющих набора
	Если СтруктураДанных.Свойство("ОкругленияНаборов") И СтруктураДанных.ОкругленияНаборов.Количество()>0 Тогда
		Для каждого ОписаниеОкругления Из СтруктураДанных.ОкругленияНаборов Цикл
			НаборыКлиентСервер.ОкруглениеЦеныНабора(
			ОписаниеОкругления.НоменклатураНабора, 
			ОписаниеОкругления.ХарактеристикаНабора, 
			?(ОписаниеОкругления.Свойство("НомерВариантаКП"), ОписаниеОкругления.НомерВариантаКП, Неопределено), 
			Объект.Работы, 
			ОписаниеОкругления.Округление);
		КонецЦикла; 
	КонецЕсли;
	// Конец Наборы
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Работы Цикл
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанных.ПроцентСкидкиНаценки;
		РассчитатьСуммуВСтрокеТабличнойЧасти("Работы", СтрокаТабличнойЧасти);
	КонецЦикла;
	
КонецПроцедуры // ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен()

&НаКлиенте
Процедура ОбновитьПодвалФормы()
	
	ИтогВсего = Объект.Работы.Итог("Всего") + Объект.Запасы.Итог("Всего");
	ИтогСуммаНДС = Объект.Работы.Итог("СуммаНДС") + Объект.Запасы.Итог("СуммаНДС");
	
КонецПроцедуры // ОбновитьПодвалФормы()

&НаСервере
Процедура ЗаполнитьРеквизитыПечати()
	
	Объект.ПодписьКладовщика = 
		УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ПодписьМОЛ", Объект.Организация);
	Объект.Автомобиль = 
		УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОсновнойАвтомобиль", Объект.Организация);
	Объект.Водитель = 
		УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОсновнойВодитель", Объект.Организация);
	Объект.Перевозчик = 
		УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОсновнойПеревозчик", Объект.Организация);
	ОбновитьУсловияПечатныхФорм();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьУсловияПечатныхФорм()
	
	Если ПустаяСтрока(Объект.ТекстУсловийСчетаЗаказа) Тогда
		Объект.УсловияСчетаЗаказа = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("УсловияСчетаЗаказа", 
			Объект.Организация);
		Если НЕ ЗначениеЗаполнено(Объект.УсловияСчетаЗаказа) Тогда
			НастройкаУсловий = ПланыВидовХарактеристик.НастройкиПользователей.УсловияСчетаЗаказа;
			Объект.УсловияСчетаЗаказа = Справочники.ДополнительныеУсловия.ПолучитьТиповыеУсловия(НастройкаУсловий,
				Объект.Организация);
		КонецЕсли;
	КонецЕсли;

	Если ПустаяСтрока(Объект.ТекстУсловийГарантийногоТалона) Тогда
		Объект.УсловияГарантийногоТалона = 
			УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("УсловияГарантии", Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

// ПодключаемоеОборудование
&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные, ИмяТабличнойЧасти = "Запасы")
	
	// Преобразование весовых штрихкодов.
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодамВМассиве(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		МассивДанныхШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если МассивДанныхШтрихкода <> Неопределено
			И МассивДанныхШтрихкода.Количество() <> 0 Тогда
			
			Для Каждого ДанныеШтрихкода Из МассивДанныхШтрихкода Цикл
				
				ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеШтрихкода.Номенклатура, "ТипНоменклатуры, ЕдиницаИзмерения");
				
				СтруктураДанныеНоменклатуры = Новый Структура();
				СтруктураДанныеНоменклатуры.Вставить("Организация", СтруктураДанные.Организация);
				СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
				СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ЗначенияРеквизитов.ТипНоменклатуры);
				СтруктураДанныеНоменклатуры.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
				СтруктураДанныеНоменклатуры.Вставить("Партия", ДанныеШтрихкода.Партия);
				СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", СтруктураДанные.НалогообложениеНДС);
				СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", СтруктураДанные.Дата);
				СтруктураДанныеНоменклатуры.Вставить("СтруктурнаяЕдиница", СтруктураДанные.СтруктурнаяЕдиница);
				
				Если ЗначениеЗаполнено(СтруктураДанные.ВидЦен) Тогда
					СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", СтруктураДанные.ВалютаДокумента);
					СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", СтруктураДанные.СуммаВключаетНДС);
					СтруктураДанныеНоменклатуры.Вставить("ВидЦен", СтруктураДанные.ВидЦен);
					Если ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения)
						И ТипЗнч(ДанныеШтрихкода.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
						СтруктураДанныеНоменклатуры.Вставить("Коэффициент", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
							ДанныеШтрихкода.ЕдиницаИзмерения, "Коэффициент"));
					Иначе
						СтруктураДанныеНоменклатуры.Вставить("Коэффициент", 1);
					КонецЕсли;
					СтруктураДанныеНоменклатуры.Вставить("ВидСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки);
				КонецЕсли;
				
				Если ИмяТабличнойЧасти = "Работы" Тогда
					Если СтруктураДанные.Свойство("ВидРабот") Тогда
						СтруктураДанныеНоменклатуры.Вставить("ВидРабот", СтруктураДанные.ВидРабот);
					КонецЕсли; 
					СтруктураДанныеНоменклатуры.Вставить("НормаВремени", 1);
				КонецЕсли;
				
				// ДисконтныеКарты
				СтруктураДанныеНоменклатуры.Вставить("ПроцентСкидкиПоДисконтнойКарте", СтруктураДанные.ПроцентСкидкиПоДисконтнойКарте);
				СтруктураДанныеНоменклатуры.Вставить("ДисконтнаяКарта", СтруктураДанные.ДисконтнаяКарта);
				// Конец ДисконтныеКарты 
				
				// МинимальныеЦены
				Если СтруктураДанные.Свойство("СтруктурнаяЕдиница") Тогда 					
					СтруктураДанныеНоменклатуры.Вставить("СтруктурнаяЕдиница", СтруктураДанные.СтруктурнаяЕдиница);					
				КонецЕсли;				
				// Конец МинимальныеЦены

				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтруктураДанные, "ЭтоНовыйОбъект") Тогда
					СтруктураДанныеНоменклатуры.Вставить("ЭтоНовыйОбъект", СтруктураДанные.ЭтоНовыйОбъект);
				КонецЕсли;
				
				СтруктураДанныеНоменклатуры.Вставить("ЕстьПартииСНДС", СтруктураДанные.ЕстьПартииСНДС);
				
				ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
				
				Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
					ДанныеШтрихкода.ЕдиницаИзмерения = ЗначенияРеквизитов.ЕдиницаИзмерения;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	МассивТипов = Новый Массив;
	Если ИмяТабличнойЧасти="Запасы" Тогда
		МассивТипов.Добавить(Перечисления.ТипыНоменклатуры.Запас);
		МассивТипов.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
		МассивТипов.Добавить(Перечисления.ТипыНоменклатуры.ПодарочныйСертификат);
	ИначеЕсли ИмяТабличнойЧасти="Работы" Тогда
		// Работы и материалы
		МассивТипов.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
		МассивТипов.Добавить(Перечисления.ТипыНоменклатуры.Работа);
		Если СтруктураДанные.ИспользоватьМатериалы Тогда
			МассивТипов.Добавить(Перечисления.ТипыНоменклатуры.Запас);
		КонецЕсли; 
	КонецЕсли; 
	СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов)
	
	ИмяТекущейСтраницы = Элементы.ЗНСтраницы.ТекущаяСтраница.Имя;
	Если ИмяТекущейСтраницы = "ЗНГруппаРаботы" Тогда
		ИмяТабличнойЧасти = "Работы";
	ИначеЕсли ИмяТекущейСтраницы = "ЗНГруппаЗапасы" Тогда
		ИмяТабличнойЧасти = "Запасы";
	ИначеЕсли Объект.ИспользоватьТовары Тогда
		ИмяТабличнойЧасти = "Запасы";
	Иначе
		Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа", Новый Массив, Новый Массив);
	КонецЕсли;
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураДанные.Вставить("Дата", Объект.Дата);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("ИспользоватьМатериалы", Объект.ИспользоватьМатериалы);
	СтруктураДанные.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиницаРезерв);
	Если ИмяТабличнойЧасти = "Работы" Тогда
		СтруктураДанные.Вставить("НормаВремени", 1);
		Если Объект.ПоложениеВидаРабот=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
			СтруктураДанные.Вставить("ВидРабот", Объект.ВидРабот);
		КонецЕсли; 
	КонецЕсли;
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	// Конец ДисконтныеКарты

	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, Неопределено,
		СтруктураДанные);
		
	СтруктураПоискаПартииСНДС = Новый Структура("КомиссияСНДС", Истина);
	ЕстьПартииСНДС = Объект.Запасы.НайтиСтроки(СтруктураПоискаПартииСНДС).Количество() > 0;
	СтруктураДанные.Вставить("ЕстьПартииСНДС", ЕстьПартииСНДС);
		
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные, ИмяТабличнойЧасти);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода.Количество() > 1 Тогда
			
			ПараметрыОткрытия = Новый Структура("МассивНоменклатуры, ТекШтрихкод", ДанныеШтрихкода, ТекШтрихкод);
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоДаннымШтрихкодовЗавершение", ЭтотОбъект,
				Новый Структура("СтруктураДанные, ИмяТабличнойЧасти", СтруктураДанные, ИмяТабличнойЧасти));
			
			ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ДублиНоменклатурыПоШтрихКодам",
				ПараметрыОткрытия, ЭтотОбъект, , , , ОповещениеОЗакрытии,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Продолжить;
		КонецЕсли;
		
		Если ДанныеШтрихкода <> Неопределено И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(
			ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры",
				ТекШтрихкод.Штрихкод, ДанныеШтрихкода[0].Номенклатура,
				ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры));
		Иначе
			
			ДанныеШтрихкода = ДанныеШтрихкода[0];
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
			ПараметрыОтбора.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			
			Если ИмяТабличнойЧасти = "Запасы" Тогда
				ПараметрыОтбора.Вставить("Партия", ДанныеШтрихкода.Партия);
				ПараметрыОтбора.Вставить("ЕдиницаИзмерения", ДанныеШтрихкода.ЕдиницаИзмерения);
				ПараметрыОтбора.Вставить("НоменклатураНабора", 
					ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
				МассивСтрокТЧ = Объект[ИмяТабличнойЧасти].НайтиСтроки(ПараметрыОтбора);
			ИначеЕсли ИмяТабличнойЧасти = "Работы" И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры
				= ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас") Тогда
				ПараметрыОтбора.Вставить("Партия", ДанныеШтрихкода.Партия);
				ПараметрыОтбора.Вставить("ЕдиницаИзмерения", ДанныеШтрихкода.ЕдиницаИзмерения);
				МассивСтрокТЧ = Объект.Материалы.НайтиСтроки(ПараметрыОтбора);
			Иначе	
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("НоменклатураНабора",
					ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
				МассивСтрокТЧ = Объект.Работы.НайтиСтроки(ПараметрыОтбора);
			КонецЕсли;
			
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				
				Если ИмяТабличнойЧасти = "Запасы" Тогда
					//Запасы
					НоваяСтрока = Объект.Запасы.Добавить();
					
					ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "СтруктурнаяЕдиницаРезерв", "ПоложениеСклада");
					ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Ячейка", "ПоложениеСклада");
					
					НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
					НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
					
					НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
					Если ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
						НоваяСтрока.ЕдиницаИзмерения = ДанныеШтрихкода.ЕдиницаИзмерения
					Иначе
						НоваяСтрока.ЕдиницаИзмерения = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения;
					КонецЕсли;
					НоваяСтрока.ТипНоменклатурыЗапас = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоЗапас;
					НоваяСтрока.Количество = ТекШтрихкод.Количество;
					
					НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
					Если КэшЗначений.ИспользоватьМинимальныеЦены
						И НоваяСтрока.Свойство("МинимальнаяЦена")
						И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("МинимальнаяЦена") Тогда
						
						НоваяСтрока.МинимальнаяЦена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.МинимальнаяЦена;
						
					КонецЕсли;
					НоваяСтрока.ПроцентСкидкиНаценки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПроцентСкидкиНаценки;
					НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
					НоваяСтрока.Спецификация = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Спецификация;
					
					ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("СтранаПроисхождения", НоваяСтрока.СтранаПроисхождения);
					ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("НомерГТД", НоваяСтрока.НомерГТД);
					
					// Прослеживаемость
					НоваяСтрока.СтранаПроисхождения = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтранаПроисхождения;
					Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
						НоваяСтрока.ПрослеживаемыйТовар = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПрослеживаемыйТовар;
						НоваяСтрока.ПрослеживаемыйКомплект = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПрослеживаемыйКомплект;
						ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, НоваяСтрока);
						НоваяСтрока.КодТНВЭД = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТоварнаяНоменклатураВЭД;
					Иначе
						НоваяСтрока.ПрослеживаемыйТовар = Ложь;
						НоваяСтрока.ПрослеживаемыйКомплект = Ложь;
					КонецЕсли;
					Если НЕ НоваяСтрока.ПрослеживаемыйТовар Тогда
						ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("НомерГТД", НоваяСтрока.НомерГТД);
					КонецЕсли;
					// Конец Прослеживаемость
					
					ЗаполнитьСкладВСтрокеТЧ(НоваяСтрока, ДанныеШтрихкода.СтруктураДанныеНоменклатуры);
					
					Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
						// Наборы
						ЗаменитьСтрокуДаннымиНабора(ЭтотОбъект, "Запасы", НоваяСтрока, ДанныеШтрихкода.СтруктураДанныеНоменклатуры);
						// Конец Наборы
						// АвтоматическиеСкидки.
						СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
						// Конец АвтоматическиеСкидки
					Иначе
						РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТабличнойЧасти , НоваяСтрока);
						Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
					КонецЕсли;
					
					Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
						Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС");
						ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
						ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,УчетВалютныхОпераций);
						ТребуетсяИзменениеНалогообложениеНаСНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТребуетсяИзменениеНалогообложениеНаСНДС;
						РаботаСНоменклатуройКлиентУНФ.ВывестиОповещениеПользователяОбИзмененииРежимаНалогообложенияНаСДНС(ТребуетсяИзменениеНалогообложениеНаСНДС);
					КонецЕсли;
					
				ИначеЕсли ИмяТабличнойЧасти = "Работы" И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас") Тогда
					//Материалы
					ТекСтрокаРаботы = Элементы.Работы.ТекущиеДанные;
					Если НЕ (ТекСтрокаРаботы=Неопределено ИЛИ ТекСтрокаРаботы.ТипНоменклатурыУслуга) Тогда
						НоваяСтрока = Объект.Материалы.Добавить();
						
						ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "СтруктурнаяЕдиницаРезерв", "ПоложениеСклада");
						ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Ячейка", "ПоложениеСклада");
						
						НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
						НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
						
						НоваяСтрока.КлючСвязи = ТекСтрокаРаботы.КлючСвязи;
						НоваяСтрока.Количество= ТекШтрихкод.Количество;
						НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
						НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
						ЗаполнитьНомераСтрокТаблицаМатериалы(Объект.Материалы);
					КонецЕсли; 
					
				Иначе //Работы
					
					НоваяСтрока = Объект.Работы.Добавить();
					
					ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "ВидРабот", "ПоложениеВидаРабот");
					
					НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
					НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
					
					НоваяСтрока.ТипНоменклатурыУслуга= ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоУслуга;
					НоваяСтрока.Количество	= СтруктураДанные.НормаВремени;
					НоваяСтрока.Кратность	= ТекШтрихкод.Количество; 
					НоваяСтрока.Коэффициент = 1;
					НоваяСтрока.Содержание	= "";
					
					НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
					НоваяСтрока.ПроцентСкидкиНаценки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПроцентСкидкиНаценки;
					НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
					НоваяСтрока.Спецификация = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Спецификация;
					НоваяСтрока.ФиксированнаяСтоимость = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ФиксированнаяСтоимость;
					
					Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
						// Наборы
						ЗаменитьСтрокуДаннымиНабора(ЭтотОбъект, "Работы", НоваяСтрока, ДанныеШтрихкода.СтруктураДанныеНоменклатуры);
						// Конец Наборы
					Иначе
						РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТабличнойЧасти , НоваяСтрока);
						Элементы.Работы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
						ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект);
						ТабличныеЧастиУНФКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ЗНМатериалы");
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				НоваяСтрока = МассивСтрокТЧ[0];
				
				Если ИмяТабличнойЧасти = "Запасы" Тогда
					НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
					РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТабличнойЧасти , НоваяСтрока);
					Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				ИначеЕсли ИмяТабличнойЧасти = "Работы" И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас") Тогда
					НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				Иначе
					НоваяСтрока.Кратность = НоваяСтрока.Кратность + ТекШтрихкод.Количество;
					РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТабличнойЧасти , НоваяСтрока);
					Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				КонецЕсли;
				
			КонецЕсли;
			
			Если ИмяТабличнойЧасти="Запасы" Тогда
				Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
					СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаКлиенте
Процедура ЗаполнитьПоДаннымШтрихкодовЗавершение(СтруктураНоменклатуры, Параметры) Экспорт
	
	Если СтруктураНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеШтрихкода = СтруктураНоменклатуры.МассивНоменклатуры[0];
	ТекШтрихкод = СтруктураНоменклатуры.ТекШтрихкод;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	СтруктураДанные = Параметры.СтруктураДанные;
	ИмяТабличнойЧасти = Параметры.ИмяТабличнойЧасти;
	
	Если СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры)
		= Неопределено Тогда
		ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры",
			ТекШтрихкод.Штрихкод, ДанныеШтрихкода.Номенклатура,
			ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры));
	Иначе
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
		
		Если ИмяТабличнойЧасти = "Запасы" Тогда
			ПараметрыОтбора.Вставить("Партия", ДанныеШтрихкода.Партия);
			ПараметрыОтбора.Вставить("ЕдиницаИзмерения", ДанныеШтрихкода.ЕдиницаИзмерения);
			ПараметрыОтбора.Вставить("НоменклатураНабора",
				ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
			МассивСтрокТЧ = Объект[ИмяТабличнойЧасти].НайтиСтроки(ПараметрыОтбора);
		ИначеЕсли ИмяТабличнойЧасти = "Работы"И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры
			= ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас") Тогда
			ПараметрыОтбора.Вставить("Партия", ДанныеШтрихкода.Партия);
			ПараметрыОтбора.Вставить("ЕдиницаИзмерения", ДанныеШтрихкода.ЕдиницаИзмерения);
			МассивСтрокТЧ = Объект.Материалы.НайтиСтроки(ПараметрыОтбора);
		Иначе	
			ПараметрыОтбора.Вставить("НоменклатураНабора",
				ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
			МассивСтрокТЧ = Объект.Работы.НайтиСтроки(ПараметрыОтбора);
		КонецЕсли;
		
		Если МассивСтрокТЧ.Количество() = 0 Тогда
			
			Если ИмяТабличнойЧасти = "Запасы" Тогда
				//Запасы
				НоваяСтрока = Объект.Запасы.Добавить();
				
				ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "СтруктурнаяЕдиницаРезерв", "ПоложениеСклада");
				ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Ячейка", "ПоложениеСклада");
				
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				НоваяСтрока.ТипНоменклатурыЗапас = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоЗапас;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				
				НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
				НоваяСтрока.ПроцентСкидкиНаценки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПроцентСкидкиНаценки;
				НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
				НоваяСтрока.Спецификация = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Спецификация;
				
				ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("СтранаПроисхождения", НоваяСтрока.СтранаПроисхождения);
				ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("НомерГТД", НоваяСтрока.НомерГТД);
				
				// Прослеживаемость
				НоваяСтрока.СтранаПроисхождения = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтранаПроисхождения;
				Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
					НоваяСтрока.ПрослеживаемыйТовар = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПрослеживаемыйТовар;
					НоваяСтрока.ПрослеживаемыйКомплект = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПрослеживаемыйКомплект;
					ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, НоваяСтрока);
				Иначе
					НоваяСтрока.ПрослеживаемыйТовар = Ложь;
					НоваяСтрока.ПрослеживаемыйКомплект = Ложь;
				КонецЕсли;
				Если НЕ НоваяСтрока.ПрослеживаемыйТовар Тогда
					ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("НомерГТД", НоваяСтрока.НомерГТД);
				КонецЕсли; 
				// Конец Прослеживаемость
				
				ЗаполнитьСкладВСтрокеТЧ(НоваяСтрока, ДанныеШтрихкода.СтруктураДанныеНоменклатуры);
				
				Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
					// Наборы
					ЗаменитьСтрокуДаннымиНабора(ЭтотОбъект, "Запасы", НоваяСтрока, ДанныеШтрихкода.СтруктураДанныеНоменклатуры);
					// Конец Наборы
					// АвтоматическиеСкидки.
					СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
					// Конец АвтоматическиеСкидки
				Иначе
					РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТабличнойЧасти , НоваяСтрока);
					Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				КонецЕсли;
				
			ИначеЕсли ИмяТабличнойЧасти = "Работы" И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас") Тогда
				//Материалы
				ТекСтрокаРаботы = Элементы.Работы.ТекущиеДанные;
				Если НЕ (ТекСтрокаРаботы=Неопределено ИЛИ ТекСтрокаРаботы.ТипНоменклатурыУслуга) Тогда
					НоваяСтрока = Объект.Материалы.Добавить();
					
					ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "СтруктурнаяЕдиницаРезерв", "ПоложениеСклада");
					ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Ячейка", "ПоложениеСклада");
					
					НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
					НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
					
					НоваяСтрока.КлючСвязи = ТекСтрокаРаботы.КлючСвязи;
					НоваяСтрока.Количество= ТекШтрихкод.Количество;
					НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
					НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
					ЗаполнитьНомераСтрокТаблицаМатериалы(Объект.Материалы);
				КонецЕсли; 
				
			Иначе //Работы
				
				НоваяСтрока = Объект.Работы.Добавить();
				
				ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "ВидРабот", "ПоложениеВидаРабот");
				
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				
				НоваяСтрока.ТипНоменклатурыУслуга= ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоУслуга;
				НоваяСтрока.Количество	= СтруктураДанные.НормаВремени;
				НоваяСтрока.Кратность	= ТекШтрихкод.Количество; 
				НоваяСтрока.Коэффициент = 1;
				НоваяСтрока.Содержание	= "";
				
				НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
				НоваяСтрока.ПроцентСкидкиНаценки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПроцентСкидкиНаценки;
				НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
				НоваяСтрока.Спецификация = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Спецификация;
				НоваяСтрока.ФиксированнаяСтоимость = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ФиксированнаяСтоимость;
				
				Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
					// Наборы
					ЗаменитьСтрокуДаннымиНабора(ЭтотОбъект, "Работы", НоваяСтрока, ДанныеШтрихкода.СтруктураДанныеНоменклатуры);
					// Конец Наборы
				Иначе
					РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТабличнойЧасти , НоваяСтрока);
					Элементы.Работы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
					ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект);
					ТабличныеЧастиУНФКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ЗНМатериалы");
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			НоваяСтрока = МассивСтрокТЧ[0];
			
			Если ИмяТабличнойЧасти = "Запасы" Тогда
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТабличнойЧасти , НоваяСтрока);
				Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			ИначеЕсли ИмяТабличнойЧасти = "Работы" И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас") Тогда
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
			Иначе
				НоваяСтрока.Кратность = НоваяСтрока.Кратность + ТекШтрихкод.Количество;
				РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТабличнойЧасти , НоваяСтрока);
				Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИмяТабличнойЧасти="Запасы" Тогда
			Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
				СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	ЗаполнитьПризнакиИспользованияХарактеристик();

КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов) Экспорт
	
	Модифицированность = Истина;
	
	НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов);
	НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект,,,,Оповещение);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = СтрШаблон(НСтр("ru = 'Данные по штрихкоду не найдены: %1; количество: %2'"),
			ТекНеизвестныйШтрихкод.Штрихкод, ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
	УстановитьВидимостьДокументаПоступления(ЭтаФорма);
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияХарактеристик()
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = СтрШаблон(НСтр(
			"ru = 'Найденная по штрихкоду %1 номенклатура ""%2"" имеет тип %3, который не подходит для этой табличной части'"),
			ТекНекорректныйШтрихкод.Штрихкод, ТекНекорректныйШтрихкод.Номенклатура,
			ТекНекорректныйШтрихкод.ТипНоменклатуры);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры
// Конец ПодключаемоеОборудование

&НаСервере
Процедура ЗаполнитьПоСпецификацииНаСервере(ПоСпецификации, ТребуемоеКоличество, ИспользуемаяЕдиницаИзмерения = Неопределено)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(СпецификацииСостав.НомерСтроки) КАК СпецификацииСоставНомерСтроки,
	|	СпецификацииСостав.Номенклатура КАК Номенклатура,
	|	СпецификацииСостав.ТипСтрокиСостава КАК ТипСтрокиСостава,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА СпецификацииСостав.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	СпецификацииСостав.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СпецификацииСостав.Спецификация КАК Спецификация,
	|	СУММА(СпецификацииСостав.Количество / СпецификацииСостав.КоличествоПродукции * &Коэффициент * &Количество) КАК Количество
	|ИЗ
	|	Справочник.Спецификации.Состав КАК СпецификацииСостав
	|ГДЕ
	|	СпецификацииСостав.Ссылка = &Спецификация
	|	И СпецификацииСостав.Номенклатура.ТипНоменклатуры = &ТипНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	СпецификацииСостав.Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА СпецификацииСостав.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ,
	|	СпецификацииСостав.ЕдиницаИзмерения,
	|	СпецификацииСостав.Спецификация,
	|	СпецификацииСостав.ТипСтрокиСостава
	|
	|УПОРЯДОЧИТЬ ПО
	|	СпецификацииСоставНомерСтроки");
	
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики"));
	
	Запрос.УстановитьПараметр("Спецификация", ПоСпецификации);
	Запрос.УстановитьПараметр("Количество", ТребуемоеКоличество);
	
	Если НЕ ТипЗнч(ИспользуемаяЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения")
		И ИспользуемаяЕдиницаИзмерения <> Неопределено Тогда
		Запрос.УстановитьПараметр("Коэффициент", ИспользуемаяЕдиницаИзмерения.Коэффициент);
	Иначе
		Запрос.УстановитьПараметр("Коэффициент", 1);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипСтрокиСостава = ПредопределенноеЗначение("Перечисление.ТипыСтрокСоставаСпецификации.Узел") Тогда
			
			ЗаполнитьПоСпецификацииНаСервере(Выборка.Спецификация, Выборка.Количество, Выборка.ЕдиницаИзмерения);
			
		Иначе
			
			НоваяСтрока = Объект.Материалы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.КлючСвязи = Элементы.ЗНМатериалы.ОтборСтрок["КлючСвязи"];
			
		КонецЕсли;
		
	КонецЦикла;
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ЗаполнитьНомераСтрокТаблицаМатериалы(Объект.Материалы);
	
КонецПроцедуры // ЗаполнитьПоСпецификацииНаСервере()

&НаСервере
Процедура ПеренестиМатериалыВТабличноеПолеСКлючамиЗаписей(ТаблицаСпецификаций)
	
	Запрос	= Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСпецификаций.Спецификация,
	|	ТаблицаСпецификаций.Кратность КАК Кратность,
	|	ТаблицаСпецификаций.КоэффициентОтБазовойЕдиницыИзмерения КАК КоэффициентОтБазовойЕдиницыИзмерения,
	|	ТаблицаСпецификаций.КлючСвязи
	|ПОМЕСТИТЬ ВрТабСпецификаций
	|ИЗ
	|	&ТаблицаСпецификаций КАК ТаблицаСпецификаций
	|ГДЕ
	|	НЕ ТаблицаСпецификаций.ТипНоменклатурыУслуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВрТабСпецификаций.КлючСвязи,
	|	ВрТабСпецификаций.Кратность,
	|	СпецификацииСостав.ТипСтрокиСостава,
	|	СпецификацииСостав.Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА СпецификацииСостав.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	СпецификацииСостав.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА СпецификацииСостав.ТипСтрокиСостава = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокСоставаСпецификации.Узел)
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ СпецификацииСостав.ЕдиницаИзмерения = СпецификацииСостав.Номенклатура.ЕдиницаИзмерения
	|						ТОГДА ВЫБОР
	|								КОГДА СпецификацииСостав.ЕдиницаИзмерения.Коэффициент = 0
	|									ТОГДА 1
	|								ИНАЧЕ СпецификацииСостав.ЕдиницаИзмерения.Коэффициент
	|							КОНЕЦ
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоэффициентОтБазовойЕдиницыИзмерения,
	|	СпецификацииСостав.Количество / СпецификацииСостав.КоличествоПродукции * ВрТабСпецификаций.Кратность * ВЫБОР
	|		КОГДА ЕСТЬNULL(ВрТабСпецификаций.КоэффициентОтБазовойЕдиницыИзмерения, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ ВрТабСпецификаций.КоэффициентОтБазовойЕдиницыИзмерения
	|	КОНЕЦ КАК Количество,
	|	СпецификацииСостав.КоличествоПродукции,
	|	СпецификацииСостав.Спецификация КАК Спецификация
	|ИЗ
	|	ВрТабСпецификаций КАК ВрТабСпецификаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Спецификации.Состав КАК СпецификацииСостав
	|		ПО ВрТабСпецификаций.Спецификация = СпецификацииСостав.Ссылка
	|ГДЕ
	|	(СпецификацииСостав.ТипСтрокиСостава = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокСоставаСпецификации.Материал)
	|			ИЛИ СпецификацииСостав.ТипСтрокиСостава = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокСоставаСпецификации.УЗЕЛ))
	|	И СпецификацииСостав.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)";
	
	Запрос.УстановитьПараметр("ТаблицаСпецификаций", ТаблицаСпецификаций);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики"));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ТаблицаУзлов = ТаблицаСпецификаций.Скопировать();
	ТаблицаУзлов.Очистить();
	
	Для каждого СтрокаТаблицы Из РезультатЗапроса Цикл
		
		Если СтрокаТаблицы.ТипСтрокиСостава = ПредопределенноеЗначение("Перечисление.ТипыСтрокСоставаСпецификации.Узел") Тогда
			
			НоваяСтрока = ТаблицаУзлов.Добавить();
			
		Иначе
			
			НоваяСтрока = Объект.Материалы.Добавить();
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
	КонецЦикла;
	
	Если ТаблицаУзлов.Количество() > 0 Тогда
		
		Для каждого Стр Из ТаблицаУзлов Цикл
			Стр.Кратность = Стр.Количество;
			Стр.Количество = 1;
		КонецЦикла; 
		ПеренестиМатериалыВТабличноеПолеСКлючамиЗаписей(ТаблицаУзлов);
		
	КонецЕсли;
	
	ЗаполнитьНомераСтрокТаблицаМатериалы(Объект.Материалы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМатериалыПоВсемСпецификациямНаСервере()
	
	Работы_ТаблицаЗначений = РеквизитФормыВЗначение("Объект").Работы.Выгрузить();
	
	// Удалим строки с без спецификаций и со спецификациями без состава
	Счетчик = (Работы_ТаблицаЗначений.Количество() - 1);
	Пока Счетчик >= 0 Цикл
		Если Работы_ТаблицаЗначений[Счетчик].Спецификация.Состав.Количество() = 0 Тогда 
			Работы_ТаблицаЗначений.Удалить(Работы_ТаблицаЗначений[Счетчик]);
		КонецЕсли;
		Счетчик = Счетчик - 1;
	КонецЦикла;
	
	Работы_ТаблицаЗначений.Колонки.Добавить("КоэффициентОтБазовойЕдиницыИзмерения", Новый ОписаниеТипов("Число"));
	ПеренестиМатериалыВТабличноеПолеСКлючамиЗаписей(Работы_ТаблицаЗначений);
	
	// Все заполнено, теперь свернем строки.
	ТаблицаМатериалов = Объект.Материалы.Выгрузить();
	ТаблицаМатериалов.Свернуть("КлючСвязи, Номенклатура, Характеристика, Партия, ЕдиницаИзмерения, НомерСтрокиВнутренний", "Количество, Резерв, РезервОтгрузка");
	
	Объект.Материалы.Очистить();
	Объект.Материалы.Загрузить(ТаблицаМатериалов);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
	
КонецПроцедуры // ЗаполнитьМатериалыПоВсемСпецификациямНаСервере()

&НаСервере
Процедура СформироватьНаименованияМатериаловИИсполнителей()
	
	// Подчиненные ТЧ
	ИспользоватьСовместительство = ПолучитьФункциональнуюОпцию("ИспользоватьСовместительство");
	Для каждого СтрокаРаботы Из Объект.Работы Цикл
	
		СтрокаМатериалы = "";
		МассивПоКлючуЗаписи = Объект.Материалы.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаРаботы.КлючСвязи));
		Для каждого СтрокаТЧ Из МассивПоКлючуЗаписи Цикл
			СтрокаМатериалы = СтрокаМатериалы + ?(СтрокаМатериалы = "", "", ", ") + СтрокаТЧ.Номенклатура 
								+ ?(ЗначениеЗаполнено(СтрокаТЧ.Характеристика), " (" + СтрокаТЧ.Характеристика + ")", "");
		КонецЦикла;
		СтрокаРаботы.Материалы = СтрокаМатериалы;
		
		ТаблицаИсполнители = Объект.Исполнители.Выгрузить(Новый Структура("КлючСвязи", СтрокаРаботы.КлючСвязи), "Сотрудник");
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Код,
		|	Сотрудники.Наименование,
		|	ФИОФизЛицСрезПоследних.Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя,
		|	ФИОФизЛицСрезПоследних.Отчество
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&НаДату, ) КАК ФИОФизЛицСрезПоследних
		|		ПО Сотрудники.Физлицо = ФИОФизЛицСрезПоследних.ФизическоеЛицо
		|ГДЕ
		|	Сотрудники.Ссылка В(&ТаблицаИсполнители)";
		
		Запрос.УстановитьПараметр("НаДату", Объект.Дата);
		Запрос.УстановитьПараметр("ТаблицаИсполнители", ТаблицаИсполнители);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		СтрокаИсполнители = "";
		Пока Выборка.Следующий() Цикл
			ПредставлениеСотрудник = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Выборка);
			СтрокаИсполнители = СтрокаИсполнители + ?(СтрокаИсполнители = "", "", ", ") 
								+ ?(ЗначениеЗаполнено(ПредставлениеСотрудник), ПредставлениеСотрудник, Выборка.Наименование);
			Если ИспользоватьСовместительство Тогда
				СтрокаИсполнители = СтрокаИсполнители + " (" + СокрЛП(Выборка.Код) + ")";
			КонецЕсли;
		КонецЦикла;
		СтрокаРаботы.Исполнители = СтрокаИсполнители;
	
	КонецЦикла;
	
КонецПроцедуры // СформироватьНаименованияМатериаловИИсполнителей()

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьИсполнителиПоРесурсамНаСервере(ИсполнителиКлючСвязи = Неопределено)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьТабличнуюЧастьИсполнителиПоРесурсам(ИсполнителиКлючСвязи);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	ОтразитьИзмененияПоТаблицеИсполнителей(ИсполнителиКлючСвязи);
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ДействияПослеЧтенияОбъекта();
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьИсполнителиПоРесурсамНаСервере()

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьИсполнителиПоБригадамНаСервере(МассивБригад, ИсполнителиКлючСвязи = Неопределено)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьТабличнуюЧастьИсполнителиПоБригадам(МассивБригад, ИсполнителиКлючСвязи);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	ОтразитьИзмененияПоТаблицеИсполнителей(ИсполнителиКлючСвязи);
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ДействияПослеЧтенияОбъекта();
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьИсполнителиПоБригадамНаСервере()

&НаСервере
Процедура ЗНТоварыЗаполнитьКолонкуРезервПоОстаткамНаСервере()
	
	ИмяТЧ = Элементы.ЗНСтраницы.ТекущаяСтраница.Имя;
	
	Если ИмяТЧ = "ЗНГруппаЗапасы" Или (ИмяТЧ = "ЗНГруппаРаботы" И Элементы.ЗНМатериалы.Видимость) Тогда
		ИмяТЧ = ?(ИмяТЧ = "ЗНГруппаЗапасы", "Запасы", "Материалы");
		НоменклатураВДокументахСервер.ЗаполнитьКолонкуРезервПоОстаткамЗаказПокупателяБезРазбиения(Объект,,ИмяТЧ);
	КонецЕсли;
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ДействияПослеЧтенияОбъекта();
	
КонецПроцедуры // ЗНТоварыЗаполнитьКолонкуРезервПоОстаткамНаСервере()

&НаСервере
Процедура ЗНТоварыЗаполнитьКолонкуРезервПоРезервамНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ТоварыЗаполнитьКолонкуРезервПоРезервам();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ДействияПослеЧтенияОбъекта();
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
	
КонецПроцедуры // ЗНТоварыЗаполнитьКолонкуРезервПоРезервамНаСервере()

&НаСервере
Процедура ЗНМатериалыЗаполнитьКолонкуРезервПоОстаткамНаСервере(МатериалыКлючСвязи = Неопределено)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.МатериалыЗаполнитьКолонкуРезервПоОстаткам(МатериалыКлючСвязи);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ДействияПослеЧтенияОбъекта();
	
КонецПроцедуры // ЗНМатериалыЗаполнитьКолонкуРезервПоОстаткамНаСервере()

&НаСервере
Процедура ЗНМатериалыЗаполнитьКолонкуРезервПоРезервамНаСервере(МатериалыКлючСвязи = Неопределено)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.МатериалыЗаполнитьКолонкуРезервПоРезервам(МатериалыКлючСвязи);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ДействияПослеЧтенияОбъекта();
	
КонецПроцедуры // ЗНМатериалыЗаполнитьКолонкуРезервПоРезервамНаСервере()

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбораДоговора(Документ, Организация, Контрагент, Договор, ВидОперации)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеДоговора(ДанныеДоговора = Неопределено)
	
	ДоговорПередИзменением = Договор;
	Договор = Объект.Договор;
	
	Если ДоговорПередИзменением <> Объект.Договор Тогда
		
		Если ДанныеДоговора = Неопределено Тогда
			
			ДанныеДоговора = ДанныеДоговораДляИзменения(ДатаДокумента, Объект.Договор, Объект.Контрагент);
			
		КонецЕсли;
		
		Если Объект.СпособЗачетаПредоплаты <> ДанныеДоговора.СпособЗачетаПредоплаты Тогда
			Объект.СпособЗачетаПредоплаты = ДанныеДоговора.СпособЗачетаПредоплаты;
			СпособЗачетаПредоплатыПриИзмененииНаСервере();
		КонецЕсли;
		
		ПечатьДокументовУНФКлиент.ПриИзмененииДоговораКонтрагента(Объект.Договор, Объект.ОснованиеПечатиСсылка, Объект.ОснованиеПечати, КэшЗначений);
		
		Если Объект.Предоплата.Количество() > 0 Тогда
			
			ПараметрыДокумента = Новый Структура;
			ПараметрыДокумента.Вставить("ДоговорПередИзменением", ДоговорПередИзменением);
			ПараметрыДокумента.Вставить("ДанныеДоговора", ДанныеДоговора);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОбОчисткеПредоплатыЗавершение", ЭтотОбъект, ПараметрыДокумента);
			ТекстВопроса = НСтр("ru = 'Зачет предоплаты будет очищен, продолжить?'");
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
		
		ОбработатьИзменениеУсловийДоговора(ДанныеДоговора, ДоговорПередИзменением);
		ЗаполнитьТаблицуПросмотраНаКлиенте();
		
		// Номенклатура.
		УстановитьПараметрыВыбораНоменклатуры();
		
		Объект.ЭтоУниверсальныйДокумент = ДанныеДоговора.ЭтоУниверсальныйДокумент;
		Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(КэшЗначений.СчетФактураСсылка,,, Объект.ЭтоУниверсальныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОбОчисткеПредоплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДоговорПередИзменением = ДополнительныеПараметры.ДоговорПередИзменением;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Предоплата.Очистить();
	Иначе
		Если ДополнительныеПараметры.Свойство("ИзменениеКонтрагента") Тогда
			Объект.Контрагент = ДополнительныеПараметры.КонтрагентПередИзменением;
			Контрагент = ДополнительныеПараметры.КонтрагентПередИзменением;
			КонтрагентВестиРасчетыПоЗаказам = ДополнительныеПараметры.КонтрагентВестиРасчетыПоЗаказамПередИзменением;
			Элементы.Договор.Видимость = ДополнительныеПараметры.ВидимостьДоговораПередИзменением;
		КонецЕсли;
		Объект.Договор = ДоговорПередИзменением;
		Договор = ДоговорПередИзменением;
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеУсловийДоговора(ДополнительныеПараметры.ДанныеДоговора, ДоговорПередИзменением);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеУсловийДоговора(ДанныеДоговора, ДоговорПередИзменением)
	
	ЗаполнитьОснованиеПечатиНаКлиенте(ДоговорПередИзменением, ДанныеДоговора);
	
	ИзменилсяВидЦен = Объект.ВидЦен <> ДанныеДоговора.ВидЦен И ЗначениеЗаполнено(ДанныеДоговора.ВидЦен);
	ИзменилсяВидСкидки = Объект.ВидСкидкиНаценки <> ДанныеДоговора.ВидСкидкиНаценки;
	
	Если ДанныеДоговора.Свойство("ВызовИзПроцедурыПриИзмененииКонтрагента") Тогда
		
		// В дальнейшем реквизит ДисконтнаяКрата будет очищен.
		ОчиститьДисконтнуюКарту = ЗначениеЗаполнено(Объект.ДисконтнаяКарта)
			И ДисконтныеКартыУНФВызовСервера.НужноОчиститьДисконтнуюКартуПриСменеВладельца(
				Объект.Контрагент,
				Объект.ДисконтнаяКарта,
				ДанныеДоговора.ПустойКонтрагентПередИзменением);
		
	Иначе
		
		ОчиститьДисконтнуюКарту = Ложь;
		
	КонецЕсли;
	
	ВопросВидЦен = (ЗначениеЗаполнено(Объект.Договор) И (ИзменилсяВидЦен ИЛИ ИзменилсяВидСкидки));
	
	ВалютаРасчетовПередИзменением = ВалютаРасчетов;
	ВалютаРасчетов = ДанныеДоговора.ВалютаРасчетов;
	
	НовыйДоговорИВалютаРасчетов = ЗначениеЗаполнено(Объект.Договор) И ЗначениеЗаполнено(ВалютаРасчетов) 
									И Объект.Договор <> ДоговорПередИзменением И ВалютаРасчетовПередИзменением <> ДанныеДоговора.ВалютаРасчетов;
	ОткрытьФормуЦеныИВалюты = НовыйДоговорИВалютаРасчетов И Объект.ВалютаДокумента <> ДанныеДоговора.ВалютаРасчетов
		И (Объект.Запасы.Количество() > 0 ИЛИ Объект.Работы.Количество() > 0);
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("ДоговорПередИзменением", ДоговорПередИзменением);
	ПараметрыДокумента.Вставить("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением);
	ПараметрыДокумента.Вставить("ДанныеДоговора", ДанныеДоговора);
	ПараметрыДокумента.Вставить("ВопросВидЦен", ВопросВидЦен);
	ПараметрыДокумента.Вставить("ОткрытьФормуЦеныИВалюты", ОткрытьФормуЦеныИВалюты);
	ПараметрыДокумента.Вставить("ИзменилсяВидЦен", ИзменилсяВидЦен);
	ПараметрыДокумента.Вставить("ИзменилсяВидСкидки", ИзменилсяВидСкидки);
	ПараметрыДокумента.Вставить("ОчиститьДисконтнуюКарту", ОчиститьДисконтнуюКарту);
	ПараметрыДокумента.Вставить("ПересчетНеобходимПоЗапасам", Объект.Запасы.Количество() > 0);
	ПараметрыДокумента.Вставить("ПересчетНеобходимПоРаботам", Объект.Работы.Количество() > 0);
	
	ОбработатьИзменениеВидаЦенИВалютыРасчетов(ПараметрыДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьИОстаткиВзаиморасчетов()
	
	Элементы.ОстатокВзаиморасчетов.Видимость = НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.ЗНКонтрагент.АвтоМаксимальнаяШирина = НЕ Элементы.ОстатокВзаиморасчетов.Видимость;
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() И НЕ Элементы.ОстатокВзаиморасчетов.Видимость Тогда
		Элементы.ОстатокВзаиморасчетовСтраницаОплата.Видимость = Ложь;
		Возврат;
	Иначе
		Элементы.ОстатокВзаиморасчетовСтраницаОплата.Видимость = НЕ Элементы.ОстатокВзаиморасчетов.Видимость И НЕ Объект.Контрагент.Ссылка.Пустая();
	КонецЕсли;
	
	Элементы.ОстатокВзаиморасчетов.Заголовок = РаботаСКонтрагентамиУНФ.ЗаголовокНадписиВзаиморасчетов(Объект.Контрагент);
	Элементы.ОстатокВзаиморасчетовСтраницаОплата.Заголовок = Элементы.ОстатокВзаиморасчетов.Заголовок;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРежимРаботаГТД(Ключ, ИмяТабличнойЧасти)
	
	НеизменяемыеРеквизиты = Новый Массив;
	НеизменяемыеРеквизиты.Добавить(ИмяТабличнойЧасти + "Пометка");
	НеизменяемыеРеквизиты.Добавить(ИмяТабличнойЧасти + "НомерСтроки");
	НеизменяемыеРеквизиты.Добавить(ИмяТабличнойЧасти + "Номенклатура");
	НеизменяемыеРеквизиты.Добавить(ИмяТабличнойЧасти + "Характеристика");
	НеизменяемыеРеквизиты.Добавить(ИмяТабличнойЧасти + "Партия");
	НеизменяемыеРеквизиты.Добавить(ИмяТабличнойЧасти + "Количество");
	НеизменяемыеРеквизиты.Добавить(ИмяТабличнойЧасти + "ЕдиницаИзмерения");
	НеизменяемыеРеквизиты.Добавить(ИмяТабличнойЧасти + "СтранаПроисхождения");
	НеизменяемыеРеквизиты.Добавить(ИмяТабличнойЧасти + "НомерГТД");

	Если ИмяТабличнойЧасти = "Запасы" Тогда
		
		НеизменяемыеРеквизиты.Добавить(ИмяТабличнойЧасти + "КодТНВЭД");
		НеизменяемыеРеквизиты.Добавить("ЗапасыГруппаНоменклатура");
		НеизменяемыеРеквизиты.Добавить("ЗапасыНоменклатураСсылка");
		ПрослеживаемостьФормыКлиентСерверУНФ.ДобавитьНеизменяемыеРеквизитыДляРежимаГТД(НеизменяемыеРеквизиты);
		
	КонецЕсли;
	
	Для каждого ЭлементФормы Из Элементы[ИмяТабличнойЧасти].ПодчиненныеЭлементы Цикл
		
		Если НеизменяемыеРеквизиты.Найти(ЭлементФормы.Имя) = Неопределено
			И ЭлементФормы.Видимость = Истина Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементФормы.Имя, "Видимость", Ложь);
			КэшЗначений[Ключ].Добавить(ЭлементФормы.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяТабличнойЧасти + "ЕдиницаИзмерения", "Доступность", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьРежимРаботаГТД(Ключ, ИмяТабличнойЧасти)
	
	Для каждого ИмяЭлементаФормы Из КэшЗначений[Ключ] Цикл
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлементаФормы, "Видимость", Истина);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяТабличнойЧасти + "ЕдиницаИзмерения", "Доступность", Истина);
	
	КэшЗначений[Ключ] = Новый Массив;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимРаботаГТД(ВключитьРежимГТД, ИмяТабличнойЧасти)
	
	Если КэшЗначений = Неопределено Тогда
		
		КэшЗначений = Новый Структура;
		
	КонецЕсли;
	
	Ключ = "ОбрабатываемыеРеквизиты" + ИмяТабличнойЧасти;
	
	Если НЕ КэшЗначений.Свойство(Ключ) Тогда
		
		КэшЗначений.Вставить(Ключ, Новый Массив);
		
	КонецЕсли;
	
	Если ВключитьРежимГТД Тогда
		
		ВключитьРежимРаботаГТД(Ключ, ИмяТабличнойЧасти);
		
	Иначе
		
		ВыключитьРежимРаботаГТД(Ключ, ИмяТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗНМатериалыПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии, МассивСтрок = Неопределено)
	
	ТаблицаДляЗагрузки = ?(Не МассивСтрок = Неопределено, МассивСтрок, ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище));
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект.Материалы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
		Если Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке И РазрешитьСкладыВТабличныхЧастях Тогда
			Если ЗначениеЗаполнено(СтрокаЗагрузки.СтруктурнаяЕдиница) И Не СтрокаЗагрузки.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиницаРезерв Тогда
				Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
				УстановитьВидимостьОтПользовательскихНастроек(Объект, ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
			
		ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "СтруктурнаяЕдиницаРезерв", "ПоложениеСклада");
		ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Ячейка", "ПоложениеСклада");
		НоваяСтрока.КлючСвязи = Элементы.ЗНМатериалы.ОтборСтрок["КлючСвязи"];
		
		НоваяСтрока.РезервОтгрузка = НоваяСтрока.Резерв;
		
		// Характеристики
		СтруктураДанныеНоменклатуры = Новый Структура();
		СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
		СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
		СтруктураДанныеНоменклатуры.Вставить("Номенклатура", СтрокаЗагрузки.Номенклатура);
		СтруктураДанныеНоменклатуры.Вставить("Характеристика", СтрокаЗагрузки.Характеристика);
		
		СтатусПартии = Новый СписокЗначений;
		СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
		
		СтруктураДанныеНоменклатуры.Вставить("СтатусПартии", СтатусПартии);
		
		СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанныеНоменклатуры);

		ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, НоваяСтрока, СтруктураДанныеНоменклатуры);

		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
		
		НоваяСтрока.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
		НоваяСтрока.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
		НоваяСтрока.ЗаполнениеХарактеристикиПроверено = Истина;
		
		Если СтруктураДанные.ИспользоватьХарактеристики
			Тогда
			НоваяСтрока.Характеристика = СтруктураДанные.Характеристика;
		КонецЕсли;
		// Конец Характеристики
		
		//Партии
		НоваяСтрока.ИспользоватьПартии = СтрокаЗагрузки.Номенклатура.ИспользоватьПартии;
		НоваяСтрока.ПроверятьЗаполнениеПартий = СтрокаЗагрузки.Номенклатура.ПроверятьЗаполнениеПартий;
		
		ЗначенияПартииПоУмолчанию = ?(СтруктураДанные.Свойство("Партия"), СтруктураДанные.Партия, Неопределено);
		
		НоваяСтрока.Партия = ?(ЗначениеЗаполнено(СтрокаЗагрузки.Партия), СтрокаЗагрузки.Партия, ЗначенияПартииПоУмолчанию);
		// Конец Партии
		
		НоваяСтрока.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
		
		НоваяСтрока.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
		НоваяСтрока.НомерГТД = СтруктураДанные.НомерГТД;
		
		Если Объект.ПоложениеСклада=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
			НоваяСтрока.СтруктурнаяЕдиницаРезерв = СтруктураДанные.Склад;
		Иначе
			НоваяСтрока.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
		КонецЕсли;
		
		НоваяСтрока.УказыватьДокументПоступления = СкладскойУчетСервер.УказыватьДокументПоступления(НоваяСтрока.СтруктурнаяЕдиницаРезерв, Ложь);
			
	КонецЦикла;
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
	КонецЕсли;
	
	УстановитьВидимостьДокументаПоступления(ЭтаФорма);
	
	ЗаполнитьНомераСтрокТаблицаМатериалы(Объект.Материалы);
	
КонецПроцедуры

&НаСервере
Процедура ВидЗаказаПриИзмененииСервер()
	
	ЭтотОбъект.ЗаказНарядВСостоянииВыполнения = СостоянияЗаказовВызовСервера.ЭтоСостояниеВыполненияЗаказНаряда(Объект.СостояниеЗаказа, Объект.ВидЗаказа);
	Объект.СостояниеЗаказа = ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказНаряда(Объект.ВидЗаказа);
	
КонецПроцедуры

// @skip-warning обработчик ожидания см. СостояниеЗаказаПриИзменении
&НаКлиенте
Процедура УстановитьТекущейСтраницейЗавершениеЗаказа()
	
	Элементы.ЗНСтраницы.ТекущаяСтраница = Элементы.СтраницаЗавершениеЗаказа;
	
КонецПроцедуры

&НаСервере
Процедура ЗаменитьКоманду(Идентификатор, ИмяКоманды)
	
	Если НЕ ПараметрыПодключаемыхКоманд.Свойство("АдресТаблицыКоманд") ИЛИ НЕ ЭтоАдресВременногоХранилища(ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд) Тогда
		Возврат;
	КонецЕсли; 
	КомандыПечати = ПолучитьИзВременногоХранилища(ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд);
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Идентификатор", Идентификатор);
	Строки = КомандыПечати.НайтиСтроки(СтруктураОтбора);
	Если Строки.Количество()>0 Тогда
		СтароеИмяКоманды = Строки[0].ИмяВФорме;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, СтароеИмяКоманды, "Видимость", Ложь);
		Строки[0].ИмяВФорме = ИмяКоманды;
		ПоместитьВоВременноеХранилище(КомандыПечати, ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяКоманды, "Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ТипНоменклатурыЗапас", Ложь);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ЗапасыРезерв.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ЗапасыСтруктурнаяЕдиницаРезерв.Имя);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ТекстВторостепеннойНадписи);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Для товаров>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);
	
	// Наборы
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.НоменклатураНабора", Справочники.Номенклатура.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыНоменклатура,ЗапасыХарактеристика,ЗапасыКоличество,ЗапасыЕдиницаИзмерения");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Работы.НоменклатураНабора", Справочники.Номенклатура.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗНРаботыНоменклатура,ЗНРаботыХарактеристика,ЗНРаботыКоличество,ЗНРаботыКратность,ЗНРаботыКоэффициент");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	// Конец Наборы
	
	// 8. Скидки Запасы
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	ГруппаОтборов = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Объект.Запасы.ПроцентСкидкиНаценки", 100);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Объект.Запасы.СуммаСкидкиНаценки", Новый ПолеКомпоновкиДанных("Объект.Запасы.Сумма"),ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСумма");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ПроцентСкидкиНаценки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыПроцентСкидкиНаценки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "%");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.СуммаСкидкиНаценки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСуммаСкидкиНаценки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = 'сумма'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ПроцентАвтоматическойСкидки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыПроцентАвтоматическойСкидки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "%");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.СуммаАвтоматическойСкидки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСуммаАвтоматическойСкидки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = 'сумма'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);	
	
	// 8.1.Скидки Работы
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	ГруппаОтборов = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Объект.Работы.ПроцентСкидкиНаценки", 100);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Объект.Работы.СуммаСкидкиНаценки", Новый ПолеКомпоновкиДанных("Объект.Работы.Сумма"), ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗНРаботыСумма");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Работы.ПроцентСкидкиНаценки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗНРаботыПроцентСкидкиНаценки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "%");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Работы.СуммаСкидкиНаценки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗНРаботыСуммаСкидкиНаценки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = 'сумма'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Работы.ПроцентАвтоматическойСкидки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗНРаботыПроцентАвтоматическойСкидки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "%");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Работы.СуммаАвтоматическойСкидки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗНРаботыСуммаАвтоматическойСкидки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = 'сумма'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);	
	// Конец Скидки
	
	// Характеристики
	СоответствиеИменТабличныхЧастей = Новый Соответствие;
	
	СоответствиеИменТабличныхЧастей.Вставить("Работы","ЗНРаботыХарактеристика");
	СоответствиеИменТабличныхЧастей.Вставить("ЗНМатериалы","");
	СоответствиеИменТабличныхЧастей.Вставить("Запасы",);	
	СоответствиеИменТабличныхЧастей.Вставить("ЗНМатериалыЗаказчика","");
	
	НоменклатураВДокументахСервер.ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристик(ЭтаФорма, СоответствиеИменТабличныхЧастей);
	
	// Взаиморасчеты
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(
		НовоеУсловноеОформление.Отбор,
		"Объект.Предоплата.ЭтоПредоплатаБезЗаказа",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПредоплатаЗаказ");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<текущий документ>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(
		НовоеУсловноеОформление.Отбор,
		"Объект.Предоплата.ЭтоПредоплатаБезЗаказа",
		Истина,
		ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПредоплатаЗаказ");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = ''")); // Нужно, чтобы отображение было такое же, как в других документах.
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	// Конец Взаиморасчеты
	
	//Ресурсы
	ПланированиеРесурсовУНФ.УстановитьУсловноеОформлениеРесурсы("РесурсыПредприятия", ЭтотОбъект, Истина);
	
	// Ячейки
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ЯчейкаДоступна", Ложь);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыЯчейка");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Материалы.ЯчейкаДоступна", Ложь);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗНМатериалыЯчейка");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);
	
	// Остатки и резервы
	НоменклатураВДокументахСервер.УстановитьУсловноеОформлениеЗапасыИРезервы(ЭтаФорма, "Запасы", "ЗаказНаряд");
	НоменклатураВДокументахСервер.УстановитьУсловноеОформлениеЗапасыИРезервы(ЭтаФорма, "Материалы", "ЗаказНаряд");

	// Минимальные цены 	
	Использование = ?(КэшЗначений.Свойство("ИспользоватьМинимальныеЦены"), КэшЗначений.ИспользоватьМинимальныеЦены, Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
		"Объект.Запасы.Цена", 
		Новый ПолеКомпоновкиДанных("Объект.Запасы.МинимальнаяЦена"), ВидСравненияКомпоновкиДанных.Меньше); 		
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыЦена");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", WebЦвета.Красный);	
	НовоеУсловноеОформление.Использование = Использование;
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
		"Объект.Работы.Цена", 
		Новый ПолеКомпоновкиДанных("Объект.Работы.МинимальнаяЦена"), ВидСравненияКомпоновкиДанных.Меньше); 		
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗНРаботыЦена");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", WebЦвета.Красный);	
	НовоеУсловноеОформление.Использование = Использование;
	
	// Прослеживаемость
	ПрослеживаемостьФормыУНФ.ОбновитьУсловноеОформлениеТабличнойЧастиДляПрослеживаемости(ЭтаФорма);
	
	СкладскойУчетСервер.УстановитьУсловноеОформлениеДокументовПоступления(УсловноеОформление, Ложь,, ТипЗнч(Объект.Ссылка));
	
	УстановитьОформлениеОтмененнойСтроки();
	
КонецПроцедуры

&НаСервере
Процедура ДействияПослеЧтенияОбъекта()
	
	Если ТипЗнч(КэшЗначений) <> Тип("Структура") Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	КэшЗначений.Вставить("УчетПоЯчейкам", ПолучитьФункциональнуюОпцию("УчетПоЯчейкам"));
	
	ЗаполнитьСлужебныеПоляТабличнойЧасти(Объект.Запасы, Объект.Работы);	
	ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.Работы, Объект.ДобавленныеНаборы);

	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	ЗаполнитьНомераСтрокТаблицаМатериалы(Объект.Материалы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСлужебныеПоляТабличнойЧасти(Запасы, Работы)
	
	МассивНоменклатуры = Новый Массив;
	Для каждого Стр Из Запасы Цикл
		МассивНоменклатуры.Добавить(Стр.Номенклатура);
	КонецЦикла;
	Для каждого Стр Из Работы Цикл
		МассивНоменклатуры.Добавить(Стр.Номенклатура);
	КонецЦикла;
	
	Если МассивНоменклатуры.Количество()>0 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	Номенклатура.ЭтоНабор КАК ЭтоНабор,
		|	ВЫБОР
		|		КОГДА Номенклатура.ФиксированнаяСтоимость
		|				ИЛИ НЕ Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ФиксированнаяСтоимость
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&МассивНоменклатуры)";
		Выборка = Запрос.Выполнить().Выбрать();
		НоменклатураНабор = Новый Соответствие;
		НоменклатураФиксированнаяСтоимость = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			НоменклатураНабор.Вставить(Выборка.Ссылка, Выборка.ЭтоНабор);	
			НоменклатураФиксированнаяСтоимость.Вставить(Выборка.Ссылка, Выборка.ФиксированнаяСтоимость);	
		КонецЦикла; 
		
		Для каждого Стр Из Запасы Цикл
			Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) ИЛИ ЗначениеЗаполнено(Стр.НоменклатураНабора) ИЛИ ТипЗнч(Стр.Номенклатура)<>Тип("СправочникСсылка.Номенклатура") Тогда
				Стр.ЭтоНабор = Ложь;
			Иначе
				Стр.ЭтоНабор = НоменклатураНабор.Получить(Стр.Номенклатура);
			КонецЕсли;
		КонецЦикла; 
		Для каждого Стр Из Работы Цикл
			Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) ИЛИ ЗначениеЗаполнено(Стр.НоменклатураНабора) Тогда
				Стр.ЭтоНабор = Ложь;
			Иначе
				Стр.ЭтоНабор = НоменклатураНабор.Получить(Стр.Номенклатура);
			КонецЕсли;
			Стр.ФиксированнаяСтоимость = НоменклатураФиксированнаяСтоимость.Получить(Стр.Номенклатура);
		КонецЦикла; 
	КонецЕсли; 
	
	Для каждого Строка Из Запасы Цикл
		Строка.НоменклатураСсылка = Строка.Номенклатура;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьВидимостьИУстановитьНастройкиУчетаВНалогообложении()
	
	ВидимостьГруппыУчетВНУДоИзменения = Элементы.ГруппаУчетВНУ.Видимость;
	
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда
		Элементы.ГруппаУчетВНУ.Видимость = Ложь;
		
		Возврат;
	Иначе
		Элементы.ГруппаУчетВНУ.Видимость = Истина;
	КонецЕсли;
	
	СистемаНалогообложенияСтруктура = РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(Объект.Организация, Объект.Дата);
	
	Если Не СистемаНалогообложенияСтруктура.ПлательщикУСН Тогда
		Элементы.ГруппаУчетВНУ.Видимость = Ложь;
	Иначе
		Элементы.ГруппаУчетВНУ.Видимость = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И СистемаНалогообложенияСтруктура.ПлательщикУСН И СистемаНалогообложенияСтруктура.ПлательщикЕНВД Тогда
		Объект.УчитыватьВНУ = НЕ (Объект.Организация.ВидУчетаСтраховыхВзносов = Перечисления.ВидыУчетаСтраховыхВзносов.УчитыватьВЕНВД);
	КонецЕсли;
	
	ГруппаУчетВНУСталаВидимой = Не ВидимостьГруппыУчетВНУДоИзменения И Элементы.ГруппаУчетВНУ.Видимость;
	ГруппаУчетВНУСталаНевидимой = ВидимостьГруппыУчетВНУДоИзменения И Не Элементы.ГруппаУчетВНУ.Видимость;
	Если Объект.УчитыватьВНУ
		И ((НЕ Элементы.ГруппаУчетВНУ.Видимость И Объект.Ссылка.Пустая())
		Или ГруппаУчетВНУСталаНевидимой) Тогда
		Объект.УчитыватьВНУ = Ложь;
		Модифицированность = Истина;
	ИначеЕсли ГруппаУчетВНУСталаВидимой И Не Объект.УчитыватьВНУ Тогда
		Объект.УчитыватьВНУ = Истина;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиУчетаВНалогообложении()
	
	ОпределитьВидимостьИУстановитьНастройкиУчетаВНалогообложении();
	Объект.СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Объект.Организация,,Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьЦенуСертификата(Результат, ВыбраннаяСтрока) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ВыбраннаяСтрока.Цена = Результат;
		РассчитатьСуммуВСтрокеТабличнойЧасти();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НомераГТДЗаполнитьПоФактическимОстаткамНаСервере(ЭтоКонтекстныйВызов, ИмяТабличнойЧасти)
	
	ИмяЭлемента			= ?(ИмяТабличнойЧасти = "Запасы", "Запасы", "ЗНМатериалы");
	ИмяТаблицыОбъекта	= ?(ИмяТабличнойЧасти = "Запасы", "Запасы", "Материалы");
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ТаблицаЗапасы", Неопределено);
	ПараметрыПодбора.Вставить("ОстаткиПоГТД", Неопределено);
	ПараметрыПодбора.Вставить("ПоддержкаИнтеркампани", Истина);
	ПараметрыПодбора.Вставить("Дата", Объект.Дата);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("ИндексТекущейСтроки", ?(ЗначениеЗаполнено(Элементы[ИмяЭлемента].ТекущаяСтрока), Объект[ИмяТаблицыОбъекта].Индекс(Объект[ИмяТаблицыОбъекта].НайтиПоИдентификатору(Элементы[ИмяЭлемента].ТекущаяСтрока)), 0));
	ПараметрыПодбора.Вставить("ЕстьКлючСвязиАвтоматическихСкидок", Неопределено);
	ПараметрыПодбора.Вставить("ИменаПолей", Новый Массив);
	
	Если ИмяТаблицыОбъекта = "Запасы" Тогда
		
		Если НЕ ЭтоКонтекстныйВызов Тогда
			
			ПараметрыПодбора.Вставить("ПроверятьПометку", Истина);
			
		КонецЕсли;
		
		ПараметрыПодбора.ИменаПолей.Добавить("Резерв");
		ПараметрыПодбора.ИменаПолей.Добавить("Сумма");
		ПараметрыПодбора.ИменаПолей.Добавить("СуммаНДС");
		ПараметрыПодбора.ИменаПолей.Добавить("Всего");
		
	КонецЕсли;
	
	ГрузовыеТаможенныеДекларацииСервер.ПодготовитьТаблицуЗапасовИзТаблицыФормы(ПараметрыПодбора, Объект[ИмяТаблицыОбъекта]);
	ГрузовыеТаможенныеДекларацииСервер.СформироватьОстаткиНомеровГТД(ПараметрыПодбора);
	ГрузовыеТаможенныеДекларацииСервер.ПеренестиОстаткиНомеровГТДВТаблицуФормы(Объект[ИмяТаблицыОбъекта], ПараметрыПодбора);
	
	Если ПараметрыПодбора.ИндексТекущейСтроки <> -1 Тогда
		
		СтрокаКоллекции = Объект[ИмяТаблицыОбъекта].Получить(ПараметрыПодбора.ИндексТекущейСтроки);
		Элементы[ИмяЭлемента].ТекущаяСтрока = СтрокаКоллекции.ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НомераГТДПодобратьНаСервере(ЭтоКонтекстныйВызов, ИмяТабличнойЧасти)
	
	ИмяТаблицыОбъекта	= ?(ИмяТабличнойЧасти = "Запасы", "Запасы", "Материалы");
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ТаблицаЗапасы", Неопределено);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("ПоддержкаИнтеркампани", Истина);
	
	Если НЕ ЭтоКонтекстныйВызов
		И ИмяТаблицыОбъекта = "Запасы" Тогда
		
		ПараметрыПодбора.Вставить("ПроверятьПометку", Истина);
		
	КонецЕсли;
	
	ГрузовыеТаможенныеДекларацииСервер.ПодготовитьТаблицуЗапасовИзТаблицыФормы(ПараметрыПодбора, Объект[ИмяТаблицыОбъекта]);
	ГрузовыеТаможенныеДекларацииСервер.ПодобратьНомераГТДПоПредыдущимПоступлениям(ПараметрыПодбора);
	ГрузовыеТаможенныеДекларацииСервер.ПеренестиНомераГТДВТаблицуФормы(Объект[ИмяТаблицыОбъекта], ПараметрыПодбора);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКартинкуДисконтнойКарты()
	
	Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		Команды.СчитатьДисконтнуюКарту.Картинка = БиблиотекаКартинок.СчитанаДисконтнаяКарта;
	Иначе
		Команды.СчитатьДисконтнуюКарту.Картинка = БиблиотекаКартинок.СчитатьДисконтнуюКарту;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНомераСтрокТаблицаМатериалы(Материалы)
	
	ТекущиеНомераСтрок = Новый Соответствие;
	Для каждого СтрокаТабличнойЧасти Из Материалы Цикл
		ПоследнийНомер = ТекущиеНомераСтрок.Получить(СтрокаТабличнойЧасти.КлючСвязи);
		Если ПоследнийНомер=Неопределено Тогда
			ПоследнийНомер = 0;
		КонецЕсли; 
		ПоследнийНомер = ПоследнийНомер + 1;
		СтрокаТабличнойЧасти.НомерСтрокиВнутренний = ПоследнийНомер;
		ТекущиеНомераСтрок.Вставить(СтрокаТабличнойЧасти.КлючСвязи, ПоследнийНомер);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьКорректировкиПоДокументу(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорректировкаРеализации.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|ГДЕ
		|	КорректировкаРеализации.ДокументОснование = &ДокументОснование
		|	И НЕ КорректировкаРеализации.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

&НаСервере
Функция СтруктурнаяЕдиницаИЯчейкаДляШапки(ТабличнаяЧасть)
	
	Результат = Новый Структура;
	Результат.Вставить("СтруктурнаяЕдиницаРезерв", Неопределено);
	Результат.Вставить("Ячейка", Неопределено);
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.СтруктурнаяЕдиницаРезерв = ТабличнаяЧасть[0].СтруктурнаяЕдиницаРезерв;
	Результат.Ячейка = ТабличнаяЧасть[0].Ячейка;
	
	Если ТабличнаяЧасть.Количество() = 1 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТаблицаСтруктурныеЕдиницыИЯчейки = ТабличнаяЧасть.Выгрузить(, "СтруктурнаяЕдиницаРезерв, Ячейка");
	ТаблицаСтруктурныеЕдиницыИЯчейки.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	Для Каждого ТекСтрока Из ТаблицаСтруктурныеЕдиницыИЯчейки Цикл
		ТекСтрока.Количество = 1;
	КонецЦикла;
	ТаблицаСтруктурныеЕдиницыИЯчейки.Свернуть("СтруктурнаяЕдиницаРезерв, Ячейка", "Количество");
	
	Если ТаблицаСтруктурныеЕдиницыИЯчейки.Количество() < 2 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТаблицаСтруктурныеЕдиницыИЯчейки.Сортировать("Количество Убыв");
	
	Если ТаблицаСтруктурныеЕдиницыИЯчейки[0].Количество = ТаблицаСтруктурныеЕдиницыИЯчейки[1].Количество Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.СтруктурнаяЕдиницаРезерв = ТаблицаСтруктурныеЕдиницыИЯчейки[0].СтруктурнаяЕдиницаРезерв;
	Результат.Ячейка = ТаблицаСтруктурныеЕдиницыИЯчейки[0].Ячейка;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстСодержания(Знач Номенклатура, Знач Характеристика)
	Возврат ТабличныеЧастиУНФ.ТекстСодержания(Номенклатура, Характеристика);
КонецФункции

&НаСервереБезКонтекста
Функция СпецификацияПоУмолчанию(Знач Номенклатура, Знач Характеристика)
	Возврат Справочники.Спецификации.СпецификацияПоУмолчанию(Номенклатура, Характеристика);
КонецФункции

// Открывает форму ввода адреса с заполненными из параметра значениями полей адреса.
//
//  Параметры:
//		Элемент - элемент формы для ввода адреса
//		АдресПредставление - представление адреса
//		АдресЗначенияПолей - служебная информация, значения полей адреса
//		СтандартнаяОбработка - стандартная обработка выбора
//
&НаКлиенте
Процедура ОткрытьФормуВыбораАдресаИОбработатьРезультат(Элемент, Объект, ИмяРеквизитаАдресаДоставки, СтандартнаяОбработка = Ложь)
	
	СтандартнаяОбработка = Ложь;
	
	АдресПредставление = Объект[ИмяРеквизитаАдресаДоставки];
	АдресЗначение = Объект[ИмяРеквизитаАдресаДоставки + "Значение"];
	
	// Откроем диалог редактирования КИ
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента"));
	ПараметрыОткрытия.Вставить("Значение", АдресЗначение);
	ПараметрыОткрытия.Вставить("Представление", АдресПредставление);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяРеквизитаАдресаДоставки", ИмяРеквизитаАдресаДоставки);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуВыбораАдресаИОбработатьРезультатЗавершение", 
		ЭтаФорма, ДополнительныеПараметры);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораАдресаИОбработатьРезультатЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ИмяРеквизитаАдресаДоставки = ДополнительныеПараметры.ИмяРеквизитаАдресаДоставки;
		
	Если ТипЗнч(Результат) = Тип("Структура") Тогда // КИ введена
		
		// Перенесем данные в форму
		Объект[ИмяРеквизитаАдресаДоставки + "Значение"] = Результат.Значение;
		Объект[ИмяРеквизитаАдресаДоставки] = Результат.Представление;
		Объект.ДополнительнаяИнформацияПоДоставке = Результат.Комментарий;
		
		Модифицированность = Истина;
		ОбновитьОтображениеДанных();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриИзмененииПредставленияАдреса(Представление, АдресЗначение)
	
	Если ЗначениеЗаполнено(Представление) Тогда
		АдресЗначение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Представление, Перечисления.ТипыКонтактнойИнформации.Адрес);
	Иначе
		АдресЗначение = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРеквизитыПечати(ПараметрыФормы = Неопределено)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КонтекстПечати", Объект);
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование)
		И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплату") Тогда
		
		НаборОснований = Новый Массив;
		НаборОснований.Добавить(Объект.ДокументОснование);
		
		ПараметрыОткрытия.Вставить("НаборОснований", НаборОснований);
		
	КонецЕсли;
	
	Если ПараметрыФормы <> Неопределено Тогда
		
		Если ПараметрыФормы.Свойство("ТекущийЭлемент") Тогда
			ПараметрыОткрытия.Вставить("ТекущийЭлемент", ПараметрыФормы.ТекущийЭлемент);
		КонецЕсли;
		
		Если ПараметрыФормы.Свойство("РазвернутьГруппы") Тогда
			ПараметрыОткрытия.Вставить("РазвернутьГруппы", ПараметрыФормы.РазвернутьГруппы);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("ГрузоотправительОнЖе", ГрузоотправительОнЖе);
	ПараметрыОткрытия.Вставить("ГрузополучательОнЖе", ГрузополучательОнЖе);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзмененияРеквизитовПечати", ЭтотОбъект);
	ОткрытьФорму("Обработка.РеквизитыПечати.Форма.РеквизитыПечатиЗаказНаряд", ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНастройкиИзмененияКоличества()
	
	НастройкиКоличества = ДокументыУНФКлиентСервер.ПараметрыСбросаКоличества();
	ДокументыУНФ.ЗаполнитьНастройкиКоличества(НастройкиКоличества);
	Возврат НастройкиКоличества;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда

		Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда

			ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(
				НастройкиЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);

			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата",
				ЭтотОбъект, НастройкиЗагрузкиДанных);
			ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(
				НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);

		ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда

			ДлительнаяОперация = ОбработатьПодготовленныеДанныеНоменклатуры(РезультатЗагрузки);

			СтруктураПараметров = Новый Структура;
			ПроверитьНеобходимостьПодключенияОбработчикаОжидания(ДлительнаяОперация, СтруктураПараметров);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОбработатьПодготовленныеДанныеНоменклатуры(РезультатЗагрузки)

	ПараметрыВызоваСервера = Новый Структура;
	ПараметрыВызоваСервера.Вставить("НастройкиЗагрузкиДанных", РезультатЗагрузки.НастройкиЗагрузкиДанных);
	ПараметрыВызоваСервера.Вставить("ТаблицаСопоставленияДанных", ДанныеФормыВЗначение(
		РезультатЗагрузки.ТаблицаСопоставленияДанных, Тип("ТаблицаЗначений")));

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр(
		"ru = 'Подсистема ЗагрузкаДанныхИзВнешнегоИсточника: Выполнение серверного метода загрузки результата'");
	ПараметрыВыполнения.ЗапуститьНеВФоне    = Ложь;
	ПараметрыВыполнения.ЗапуститьВФоне      = Истина;

	ИмяМетода = "Справочники.Номенклатура.ОбработатьПодготовленныеДанные";

	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыВызоваСервера, ПараметрыВыполнения);

КонецФункции

&НаКлиенте
Процедура ПроверитьНеобходимостьПодключенияОбработчикаОжидания(ДлительнаяОперация, СтруктураПараметров = Неопределено)
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ПослеВыполненияФоновогоЗадания(ДлительнаяОперация, СтруктураПараметров);
		
	Иначе
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеВыполненияФоновогоЗадания", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Идет загрузка данных.'");
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияФоновогоЗадания(Прогресс, ДополнительныеПараметры) Экспорт
	
	Если НЕ Прогресс = Неопределено Тогда
		ОбработатьПодготовленныеДанные(Прогресс.АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанные(АдресРезультатаЗагрузки)

	НачатьТранзакцию();
	Попытка
		РезультатЗагрузки = ПолучитьИзВременногоХранилища(АдресРезультатаЗагрузки);
		Если РезультатЗагрузки.НастройкиЗагрузкиДанных.ПолноеИмяТабличнойЧасти = "ЗаказПокупателя.Запасы" Тогда

			ОбработатьПодготовленныеДанныеЗапасов(РезультатЗагрузки);

		ИначеЕсли РезультатЗагрузки.НастройкиЗагрузкиДанных.ПолноеИмяТабличнойЧасти = "ЗаказПокупателя.Работы" Тогда

			ОбработатьПодготовленныеДанныеРабот(РезультатЗагрузки);

		ИначеЕсли РезультатЗагрузки.НастройкиЗагрузкиДанных.ПолноеИмяТабличнойЧасти = "ЗаказПокупателя.Материалы" Тогда

			ОбработатьПодготовленныеДанныеМатериалов(РезультатЗагрузки);

		ИначеЕсли РезультатЗагрузки.НастройкиЗагрузкиДанных.ПолноеИмяТабличнойЧасти
			= "ЗаказПокупателя.МатериалыЗаказчика" Тогда

			ОбработатьПодготовленныеДанныеМатериаловЗаказчика(РезультатЗагрузки);

		КонецЕсли;

		ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы");
		ЗафиксироватьТранзакцию();

	Исключение

		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка данных'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ЗаказПокупателя, , ТекстОшибки);

	КонецПопытки;

	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	УстановитьВидимостьДокументаПоступления(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанныеЗапасов(РезультатЗагрузки)
	Перем ИмяСлужебногоПоля;
	Перем ТаблицаСопоставленияДанных;
	Перем СтавкаНДС;
	Перем ЗагрузкаВПриложениеВозможна;
	Перем ИменаСвойств;
	Перем СкладВТЧ;
	Перем НоваяСтрока;
	Перем СтрокаТаблицы;
	
	ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
	
	СтруктураПоискаПартииСНДС = Новый Структура("КомиссияСНДС", Истина);
	ЕстьПартииСНДС = Объект.Запасы.НайтиСтроки(СтруктураПоискаПартииСНДС).Количество() > 0;
	
	НалогообложениеНДСОрганизации = НалогиУНФ.НалогообложениеНДС(Объект.Организация,, Объект.Дата);
	ОрганизацияБезНДС = НалогообложениеНДСОрганизации = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС;
	
	ДобавлениеБезНДС = ЕстьПартииСНДС И ОрганизацияБезНДС;
	
	ТребуетсяИзменениеНалогообложениеНаСНДС = Ложь;
	
	Для Каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл

		ИмяСлужебногоПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();
		ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ИмяСлужебногоПоля];
		Если ЗагрузкаВПриложениеВозможна Тогда

			НоваяСтрока = Объект.Запасы.Добавить();

			ИменаСвойств = "Номенклатура, Содержание, Количество, Резерв, ЕдиницаИзмерения, СтавкаНДС, ДатаОтгрузки";
			Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда

				ИменаСвойств = ИменаСвойств + ", Характеристика";

			КонецЕсли;

			Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда

				ИменаСвойств = ИменаСвойств + ", Партия";

			КонецЕсли;

			Если ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы") Или ПолучитьФункциональнуюОпцию(
				"ИспользоватьПодсистемуПроизводство") Тогда

				ИменаСвойств = ИменаСвойств + ", Спецификация";

			КонецЕсли;

			Если ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам") Тогда

				ИменаСвойств = ИменаСвойств + ", СтруктурнаяЕдиницаРезерв";

			КонецЕсли;

			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, ИменаСвойств);
			ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "ДатаОтгрузки",
				"ПоложениеДатыОтгрузки");
			ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "СтруктурнаяЕдиницаРезерв",
				"ПоложениеСклада");

			НоваяСтрока.ТипНоменклатурыЗапас = ((НоваяСтрока.Номенклатура.ТипНоменклатуры
				= Перечисления.ТипыНоменклатуры.Запас) Или (НоваяСтрока.Номенклатура.ТипНоменклатуры
				= Перечисления.ТипыНоменклатуры.ПодарочныйСертификат));
			СкладВТЧ = (Объект.ПоложениеСклада = ПредопределенноеЗначение(
				"Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти"));
			Если НоваяСтрока.ТипНоменклатурыЗапас И СкладВТЧ И Не ЗначениеЗаполнено(
				НоваяСтрока.СтруктурнаяЕдиницаРезерв) Тогда
				НоваяСтрока.СтруктурнаяЕдиницаРезерв = НоваяСтрока.Номенклатура.Склад;
			ИначеЕсли НоваяСтрока.ТипНоменклатурыЗапас И Не СкладВТЧ Тогда
				НоваяСтрока.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
			ИначеЕсли Не НоваяСтрока.ТипНоменклатурыЗапас Тогда
				НоваяСтрока.СтруктурнаяЕдиницаРезерв = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
			КонецЕсли;
			НоваяСтрока.Цена = СтрокаТаблицы.Цена;
			НоваяСтрока.Сумма = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
			
			ПартияСНДС = Ложь;
			Если ЗначениеЗаполнено(НоваяСтрока.Партия) И НоваяСтрока.Партия.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС 
				И НЕ Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
				ТребуетсяИзменениеНалогообложениеНаСНДС = Истина;
				ПартияСНДС = Истина;
			КонецЕсли;

			Если (Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС И НЕ ДобавлениеБезНДС) Или ПартияСНДС Тогда

				Если Не ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда

					НоваяСтрока.СтавкаНДС = ?(ЗначениеЗаполнено(НоваяСтрока.Номенклатура.ВидСтавкиНДС),
						Справочники.СтавкиНДС.СтавкаНДС(НоваяСтрока.Номенклатура.ВидСтавкиНДС),
						Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию));

				КонецЕсли;

				Если ЗначениеЗаполнено(СтрокаТаблицы.СуммаНДС) Тогда

					НоваяСтрока.СуммаНДС = СтрокаТаблицы.СуммаНДС;

				Иначе

					СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);

					НоваяСтрока.СуммаНДС = ?(Объект.СуммаВключаетНДС, НоваяСтрока.Сумма - (НоваяСтрока.Сумма)
						/ ((СтавкаНДС + 100) / 100), НоваяСтрока.Сумма * СтавкаНДС / 100);

				КонецЕсли;

			Иначе
				
				Если ДобавлениеБезНДС Тогда
					НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
				Иначе
					
					НоваяСтрока.СтавкаНДС = ?(Объект.НалогообложениеНДС
					= Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС,
					УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС(),
					УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
					
				КонецЕсли;

				НоваяСтрока.СуммаНДС = 0;

			КонецЕсли;

			НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(Объект.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);

		КонецЕсли;

	КонецЦикла;
	
	Если ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
		Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, Объект.Курс, КурсНациональнаяВалюта,УчетВалютныхОпераций);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанныеРабот(РезультатЗагрузки)
	
	Перем ИмяСлужебногоПоля;
	Перем ТаблицаСопоставленияДанных;
	Перем СтавкаНДС;
	Перем ЗагрузкаВПриложениеВозможна;
	Перем ИменаСвойств;
	Перем НоваяСтрока;
	Перем СтрокаТаблицы;
	ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
	Для Каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл

		ИмяСлужебногоПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();
		ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ИмяСлужебногоПоля];
		Если ЗагрузкаВПриложениеВозможна Тогда

			НоваяСтрока = Объект.Работы.Добавить();

			ИменаСвойств = "Номенклатура, Содержание, Количество, Кратность, Коэффициент, СтавкаНДС";
			Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда

				ИменаСвойств = ИменаСвойств + ", Характеристика";

			КонецЕсли;
			
			НоваяСтрока.КлючСвязи = ТабличныеЧастиУНФКлиентСервер.СоздатьНовыйКлючСвязи(ЭтаФорма);

			Элементы.Работы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();

			Элементы.ЗНМатериалы.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", НоваяСтрока.КлючСвязи);
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, ИменаСвойств);

			НоваяСтрока.ТипНоменклатурыУслуга = (НоваяСтрока.Номенклатура.ТипНоменклатуры
				= Перечисления.ТипыНоменклатуры.Услуга);
			
			НоваяСтрока.Цена = СтрокаТаблицы.Цена;
			НоваяСтрока.Сумма = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;

			Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда

				Если Не ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда

					НоваяСтрока.СтавкаНДС = ?(ЗначениеЗаполнено(НоваяСтрока.Номенклатура.ВидСтавкиНДС),
						Справочники.СтавкиНДС.СтавкаНДС(НоваяСтрока.Номенклатура.ВидСтавкиНДС),
						Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию));

				КонецЕсли;

				Если ЗначениеЗаполнено(СтрокаТаблицы.СуммаНДС) Тогда

					НоваяСтрока.СуммаНДС = СтрокаТаблицы.СуммаНДС;

				Иначе

					СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);

					НоваяСтрока.СуммаНДС = ?(Объект.СуммаВключаетНДС, НоваяСтрока.Сумма - (НоваяСтрока.Сумма)
						/ ((СтавкаНДС + 100) / 100), НоваяСтрока.Сумма * СтавкаНДС / 100);

				КонецЕсли;

			Иначе

				НоваяСтрока.СтавкаНДС = ?(Объект.НалогообложениеНДС
					= Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС,
					УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС(),
					УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());

				НоваяСтрока.СуммаНДС = 0;

			КонецЕсли;

			НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(Объект.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);

		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанныеМатериалов(РезультатЗагрузки)
	Перем ИмяСлужебногоПоля;
	Перем ТаблицаСопоставленияДанных;
	Перем ЗагрузкаВПриложениеВозможна;
	Перем ИменаСвойств;
	Перем СкладВТЧ;
	Перем НоваяСтрока;
	Перем СтрокаТаблицы;
	ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
	Для Каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл

		ИмяСлужебногоПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();
		ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ИмяСлужебногоПоля];
		Если ЗагрузкаВПриложениеВозможна Тогда

			НоваяСтрока = Объект.Материалы.Добавить();
			
			НоваяСтрока.КлючСвязи = Элементы.ЗНМатериалы.ОтборСтрок["КлючСвязи"];

			ИменаСвойств = "Номенклатура, Количество, Резерв, ЕдиницаИзмерения";
			Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда

				ИменаСвойств = ИменаСвойств + ", Характеристика";

			КонецЕсли;

			Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда

				ИменаСвойств = ИменаСвойств + ", Партия";

			КонецЕсли;

			Если ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам") Тогда

				ИменаСвойств = ИменаСвойств + ", СтруктурнаяЕдиницаРезерв";

			КонецЕсли;

			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, ИменаСвойств);
			ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "СтруктурнаяЕдиницаРезерв",
				"ПоложениеСклада");

			ТипНоменклатурыЗапас = ((НоваяСтрока.Номенклатура.ТипНоменклатуры
				= Перечисления.ТипыНоменклатуры.Запас) Или (НоваяСтрока.Номенклатура.ТипНоменклатуры
				= Перечисления.ТипыНоменклатуры.ПодарочныйСертификат));
			СкладВТЧ = (Объект.ПоложениеСклада = ПредопределенноеЗначение(
				"Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти"));
			Если ТипНоменклатурыЗапас И СкладВТЧ И Не ЗначениеЗаполнено(
				НоваяСтрока.СтруктурнаяЕдиницаРезерв) Тогда
				НоваяСтрока.СтруктурнаяЕдиницаРезерв = НоваяСтрока.Номенклатура.Склад;
			ИначеЕсли ТипНоменклатурыЗапас И Не СкладВТЧ Тогда
				НоваяСтрока.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
			ИначеЕсли Не ТипНоменклатурыЗапас Тогда
				НоваяСтрока.СтруктурнаяЕдиницаРезерв = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанныеМатериаловЗаказчика(РезультатЗагрузки)
	Перем ИмяСлужебногоПоля;
	Перем ТаблицаСопоставленияДанных;
	Перем СтавкаНДС;
	Перем ЗагрузкаВПриложениеВозможна;
	Перем ИменаСвойств;
	Перем СкладВТЧ;
	Перем НоваяСтрока;
	Перем СтрокаТаблицы;
	ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
	Для Каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл

		ИмяСлужебногоПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();
		ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ИмяСлужебногоПоля];
		Если ЗагрузкаВПриложениеВозможна Тогда

			НоваяСтрока = Объект.МатериалыЗаказчика.Добавить();

			ИменаСвойств = "Номенклатура, Количество, ЕдиницаИзмерения, ДатаПоступления";
			Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда

				ИменаСвойств = ИменаСвойств + ", Характеристика";

			КонецЕсли;

			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, ИменаСвойств);

		КонецЕсли;

	КонецЦикла;
КонецПроцедуры

#Область ИнтеграцияГосИС

&НаКлиенте
Процедура ОповещениеПриОкончанииРедактированияТабличнойЧастиИС(Результат, ДополнительныеПараметры) Экспорт
	ПриОкончанииРедактированияТабличнойЧастиИСНаСервере(ДополнительныеПараметры);
КонецПроцедуры

&НаСервере
Процедура ПриОкончанииРедактированияТабличнойЧастиИСНаСервере(ДополнительныеПараметры)
	СобытияФормИСУНФ.ПриИзмененииЭлемента(ЭтотОбъект, "ТабличнаяЧасть", ДополнительныеПараметры);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормИСУНФКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

// Открыть форму цены и валюта завершение.
// 
// Параметры:
//  РезультатФормыЦеныИВалюта - см. ЦеныИВалютаКлиентСервер.РезультатФормыЦеныИВалюта
//  ДополнительныеПараметры - Структура
&НаКлиенте
Процедура ОткрытьФормуЦеныИВалютаЗавершение(РезультатФормыЦеныИВалюта, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатФормыЦеныИВалюта) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РезультатФормыЦеныИВалюта.БылиВнесеныИзменения Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если Объект.ВалютаДокумента <> РезультатФормыЦеныИВалюта.ВалютаДокумента Тогда
		
		Объект.БанковскийСчет = Неопределено;
		
	КонецЕсли;
	
	Объект.ВидЦен = РезультатФормыЦеныИВалюта.ВидЦен;
	Объект.ВидСкидкиНаценки = РезультатФормыЦеныИВалюта.ВидСкидкиНаценки;
	
	// ДисконтныеКарты
	Если ЗначениеЗаполнено(РезультатФормыЦеныИВалюта.ДисконтнаяКарта) И ЗначениеЗаполнено(
		РезультатФормыЦеныИВалюта.Контрагент) И Не Объект.Контрагент.Пустая() Тогда
		Если РезультатФормыЦеныИВалюта.Контрагент = Объект.Контрагент Тогда
			Объект.ДисконтнаяКарта = РезультатФормыЦеныИВалюта.ДисконтнаяКарта;
			Объект.ПроцентСкидкиПоДисконтнойКарте = РезультатФормыЦеныИВалюта.ПроцентСкидкиПоДисконтнойКарте;
		Иначе // Выдадим сообщение и не будем менять данные о дисконтной карте.
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
				"ru = 'Дисконтная карта не считана. Владелец дисконтной карты не совпадает с контрагентом в документе.'"), ,
				"Контрагент", "Объект");
		КонецЕсли;
	Иначе
		Объект.ДисконтнаяКарта = РезультатФормыЦеныИВалюта.ДисконтнаяКарта;
		Объект.ПроцентСкидкиПоДисконтнойКарте = РезультатФормыЦеныИВалюта.ПроцентСкидкиПоДисконтнойКарте;
	КонецЕсли;
	ОбновитьКартинкуДисконтнойКарты();
	// Конец ДисконтныеКарты
	Объект.ВалютаДокумента = РезультатФормыЦеныИВалюта.ВалютаДокумента;
	Объект.Курс = РезультатФормыЦеныИВалюта.КурсРасчетов;
	Объект.Кратность = РезультатФормыЦеныИВалюта.КратностьРасчетов;
	Объект.СуммаВключаетНДС = РезультатФормыЦеныИВалюта.СуммаВключаетНДС;
	Объект.НДСВключатьВСтоимость = РезультатФормыЦеныИВалюта.НДСВключатьВСтоимость;
	Объект.НалогообложениеНДС = РезультатФормыЦеныИВалюта.НалогообложениеНДС;
	Объект.СпециальныйНалоговыйРежим = РезультатФормыЦеныИВалюта.СпециальныйНалоговыйРежим;
	ВалютаРасчетовПередИзменением = ДополнительныеПараметры.ВалютаРасчетовПередИзменением;
	
	// Пересчитываем цены по виду цен.
	Если РезультатФормыЦеныИВалюта.ПерезаполнитьЦены Тогда
		
		ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтотОбъект, "Запасы", Истина);
		ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен();
		
	КонецЕсли;
	
	// Пересчитываем цены по валюте.
	Если Не РезультатФормыЦеныИВалюта.ПерезаполнитьЦены И РезультатФормыЦеныИВалюта.ПересчитатьЦены Тогда
		
		ЦенообразованиеКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтотОбъект, ВалютаРасчетовПередИзменением,
			"Запасы", РезультатФормыЦеныИВалюта.КурсПересчетаЦен);
		ЦенообразованиеКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтотОбъект, ВалютаРасчетовПередИзменением,
			"Работы", РезультатФормыЦеныИВалюта.КурсПересчетаЦен);
		
	КонецЕсли;
	
	// Пересчитываем сумму если изменился признак Налогообложение НДС.
	Если РезультатФормыЦеныИВалюта.НалогообложениеНДС <> РезультатФормыЦеныИВалюта.ПредНалогообложениеНДС Тогда
		
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		
	КонецЕсли;
	
	// Пересчитываем сумму если изменился признак "Сумма включает НДС".
	Если НЕ РезультатФормыЦеныИВалюта.ПерезаполнитьЦены
		И НЕ РезультатФормыЦеныИВалюта.СуммаВключаетНДС = РезультатФормыЦеныИВалюта.ПредСуммаВключаетНДС Тогда
		
		ЦенообразованиеКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтотОбъект, "Запасы");
		ЦенообразованиеКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтотОбъект, "Работы");
		
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
		
		СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
			СтрокаТабличнойЧасти.СуммаРасчетов,
			СтрокаТабличнойЧасти.Курс,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
			СтрокаТабличнойЧасти.Кратность,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КратностьНациональнаяВалюта, Объект.Кратность));
			
	КонецЦикла;
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	
	// АвтоматическиеСкидки
	Если РезультатФормыЦеныИВалюта.ПерезаполнитьСкидки Или РезультатФормыЦеныИВалюта.ПерезаполнитьЦены
		Или РезультатФормыЦеныИВалюта.ПересчитатьЦены Тогда
		СброситьФлагСкидкиРассчитаныКлиент("ПерезаполнениеПоДаннымФормыЦеныИВалюта");
	КонецЕсли;
		
	// Ручная скидка - заполнение полей ввода на форме
	РассчитатьСуммуИПроцентСкидкиРаботыЗапасы(Объект, СкидкаСумма, СкидкаПроцент);
	// Конец Ручная скидка	
	
	ПересчитатьПлатежныйКалендарь();
	ОбновитьПодвалФормы();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // ОткрытьФормуЦеныИВалютаЗавершение()

&НаКлиенте
Процедура ОпределитьНеобходимостьПересчетаДокументаПоУсловиямДоговора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	Если ДополнительныеПараметры.ПересчетНеобходимПоЗапасам Тогда

		ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтотОбъект, "Запасы", Истина);

	КонецЕсли;

	Если ДополнительныеПараметры.ПересчетНеобходимПоРаботам Тогда

		ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен();

	КонецЕсли;

	ПересчитатьПлатежныйКалендарь();
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВозможностьРедактированияСпискомЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Пока Объект.ПлатежныйКалендарь.Количество() > 1 Цикл
		Объект.ПлатежныйКалендарь.Удалить(Объект.ПлатежныйКалендарь.Количество()-1);
	КонецЦикла;
	
	Элементы.РедактироватьСписком.Пометка = НЕ Элементы.РедактироватьСписком.Пометка;
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПодбором

&НаКлиенте
Процедура ЗапасыПодбор(Команда)
	
	ИмяТабличнойЧасти = "Запасы";
	МаркерПодбора = "Запасы";
	
	СтруктураПоискаПартииСНДС = Новый Структура("КомиссияСНДС", Истина);
	ЕстьПартииСНДС = Объект.Запасы.НайтиСтроки(СтруктураПоискаПартииСНДС).Количество() > 0;
	ПараметрыПодбора = Новый Структура("ЕстьПартииСНДС, ПолностьюОбновить", ЕстьПартииСНДС, Истина);
	
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти, ПараметрыПодбора);
	
КонецПроцедуры // ПодборВыполнить()

&НаКлиенте
Процедура РаботыПодбор(Команда)
	
	ИмяТабличнойЧасти = "Работы";
	МаркерПодбора = "Работы";
	
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти);
	
КонецПроцедуры // ПодборВыполнить()

&НаКлиенте
Процедура МатериалыПодбор(Команда)
	
	ИмяТабличнойЧасти = "МатериалыЗаказчика";
	МаркерПодбора = "МатериалыЗаказчика";
	
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти);
	
КонецПроцедуры // ПодборВыполнить()

&НаКлиенте
Процедура ЗаписатьОшибкуЧтенияДанныхИзХранилища()
	
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации("Ошибка", , ТекстОшибкиЖурналаРегистрации);
	
КонецПроцедуры // ЗаписатьОшибкуЧтенияДанныхИзХранилища()

&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии, МассивСтрок = Неопределено, РассчитатьЦены = Ложь)
	
	ТаблицаДляЗагрузки = ?(Не МассивСтрок = Неопределено, МассивСтрок, ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище));
	
	Если НЕ (ТипЗнч(ТаблицаДляЗагрузки) = Тип("ТаблицаЗначений")
		ИЛИ ТипЗнч(ТаблицаДляЗагрузки) = Тип("Массив")) Тогда
		
		ТекстОшибкиЖурналаРегистрации = "Несоответствие типа переданного в документ из подбора [" + ТипЗнч(ТаблицаДляЗагрузки) + "].
				|Адрес запасов в хранилище: " + СокрЛП(АдресЗапасовВХранилище) + "
				|Имя табличной части: " + СокрЛП(ИмяТабличнойЧасти);
		
		Возврат;
		
	Иначе
		
		ТекстОшибкиЖурналаРегистрации = "";
		
	КонецЕсли;
	
	СтруктураПоискаПартииСНДС = Новый Структура("КомиссияСНДС", Истина);
	ЕстьПартииСНДС = Объект.Запасы.НайтиСтроки(СтруктураПоискаПартииСНДС).Количество() > 0;
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		Если НоваяСтрока.Свойство("Пометка") Тогда
			НоваяСтрока.Пометка = Истина;
		КонецЕсли;
		
		Если НоваяСтрока.Свойство("Всего")
			И НЕ ЗначениеЗаполнено(НоваяСтрока.Всего) Тогда
			
			НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(Объект.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
			
		КонецЕсли;
		
		СтруктураДанныеНоменклатуры = Новый Структура();
		СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
		СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
		СтруктураДанныеНоменклатуры.Вставить("Номенклатура", СтрокаЗагрузки.Номенклатура);
		СтруктураДанныеНоменклатуры.Вставить("Характеристика", СтрокаЗагрузки.Характеристика);
		
		СтатусПартии = Новый СписокЗначений;
		СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
		СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
		
		СтруктураДанныеНоменклатуры.Вставить("СтатусПартии", СтатусПартии);
		
		// Дозаполнение
		Если ИмяТабличнойЧасти = "Работы" Тогда
			
			НоваяСтрока.Кратность = 1;
			НоваяСтрока.Коэффициент = 1;
			
			ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "ВидРабот", "ПоложениеВидаРабот");			
			НоваяСтрока.КлючСвязи = ТабличныеЧастиУНФКлиентСервер.СоздатьНовыйКлючСвязи(ЭтотОбъект);
			
			Если ЗначениеЗаполнено(СтрокаЗагрузки.Номенклатура) Тогда
				
				ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаЗагрузки.Номенклатура, "ТипНоменклатуры, ЭтоНабор, СпособРасчетаЦеныНабора");
				
				СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
				СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ЗначенияРеквизитов.ТипНоменклатуры);
				СтруктураДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", СтрокаЗагрузки.ЕдиницаИзмерения);
				СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
				СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
				СтруктураДанныеНоменклатуры.Вставить("НормаВремени", 1);
				
				Если ЗначенияРеквизитов.ЭтоНабор Тогда
					
					// Наборы
					Если ЗначениеЗаполнено(НоваяСтрока.Цена) 
						И ЗначенияРеквизитов.СпособРасчетаЦеныНабора <> Перечисления.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих Тогда
						СтруктураДанныеНоменклатуры.Вставить("Цена", НоваяСтрока.Цена);
					КонецЕсли;
					Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
						СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
						СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
						СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
						СтруктураДанныеНоменклатуры.Вставить("ВидЦен", Объект.ВидЦен);
						СтруктураДанныеНоменклатуры.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
					КонецЕсли;
					
					// ДисконтныеКарты
					СтруктураДанныеНоменклатуры.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
					СтруктураДанныеНоменклатуры.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
					// Конец ДисконтныеКарты

					ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, НоваяСтрока, СтруктураДанныеНоменклатуры);

					СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
					
					ЗаменитьСтрокуДаннымиНабора(ЭтотОбъект, ИмяТабличнойЧасти, НоваяСтрока, СтруктураДанные);
					
					Продолжить;
					// Конец Наборы
					
				Иначе
					
					НоваяСтрока.ТипНоменклатурыУслуга = (ЗначенияРеквизитов.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));

					ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, НоваяСтрока, СтруктураДанныеНоменклатуры);
					
					Если ВидРаботВШапке И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
						СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
						СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
						СтруктураДанныеНоменклатуры.Вставить("ВидЦен", Объект.ВидЦен);
						СтруктураДанныеНоменклатуры.Вставить("Коэффициент", 1);
						СтруктураДанныеНоменклатуры.Вставить("ВидРабот", Объект.ВидРабот);
						СтруктураДанныеНоменклатуры.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
					КонецЕсли;
					
					СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
					
				КонецЕсли;
				
				Если СтруктураДанные.ФиксированнаяСтоимость Тогда
				    НоваяСтрока.Кратность = НоваяСтрока.Количество;
					НоваяСтрока.Количество = СтруктураДанные.НормаВремени;
				Иначе
					НоваяСтрока.Цена = СтруктураДанные.Цена;
				КонецЕсли;
				
				// Характеристики
				НоваяСтрока.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
				НоваяСтрока.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
				НоваяСтрока.ЗаполнениеХарактеристикиПроверено = Истина;
				
				Если СтруктураДанные.ИспользоватьХарактеристики
					Тогда
					НоваяСтрока.Характеристика = СтруктураДанные.Характеристика;
				КонецЕсли;
				// Конец Характеристики
				
			КонецЕсли;
			
		ИначеЕсли ИмяТабличнойЧасти = "Запасы" Тогда
			
			Если Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке И РазрешитьСкладыВТабличныхЧастях Тогда
				Если ЗначениеЗаполнено(СтрокаЗагрузки.СтруктурнаяЕдиница) И Не СтрокаЗагрузки.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиницаРезерв Тогда
					Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
					УстановитьВидимостьОтПользовательскихНастроек(Объект, ЭтотОбъект);
				КонецЕсли;
			КонецЕсли;
			
			ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "СтруктурнаяЕдиницаРезерв", "ПоложениеСклада");
			ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Ячейка", "ПоложениеСклада");
			
			Если ЗначениеЗаполнено(СтрокаЗагрузки.Номенклатура) Тогда
				
				ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаЗагрузки.Номенклатура, "ТипНоменклатуры, ЭтоНабор, СпособРасчетаЦеныНабора");
				
				СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
				Если ЗначенияРеквизитов.ЭтоНабор Тогда
					
					// Наборы
					СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
					СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ЗначенияРеквизитов.ТипНоменклатуры);
					СтруктураДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", СтрокаЗагрузки.ЕдиницаИзмерения);
					СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
					СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
					СтруктураДанныеНоменклатуры.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиницаРезерв);
					Если ЗначениеЗаполнено(НоваяСтрока.Цена) 
						И ЗначенияРеквизитов.СпособРасчетаЦеныНабора <> Перечисления.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих Тогда
						СтруктураДанныеНоменклатуры.Вставить("Цена", НоваяСтрока.Цена);
					КонецЕсли;
					Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
						СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
						СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
						СтруктураДанныеНоменклатуры.Вставить("ВидЦен", Объект.ВидЦен);
						СтруктураДанныеНоменклатуры.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
					КонецЕсли;
					
					// ДисконтныеКарты
					СтруктураДанныеНоменклатуры.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
					СтруктураДанныеНоменклатуры.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
					// Конец ДисконтныеКарты

					ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, НоваяСтрока, СтруктураДанныеНоменклатуры);

					СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
					
					ЗаменитьСтрокуДаннымиНабора(ЭтотОбъект, ИмяТабличнойЧасти, НоваяСтрока, СтруктураДанные);
					
					Если СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
						Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
						ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
						ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, Объект.Курс, КурсНациональнаяВалюта,УчетВалютныхОпераций);
						ТребуетсяИзменениеНалогообложениеНаСНДС = СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС;
					КонецЕсли;
					
					Продолжить;
					// Конец Наборы
					
				Иначе
					
					НоваяСтрока.ТипНоменклатурыЗапас = ((ЗначенияРеквизитов.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"))
													ИЛИ (ЗначенияРеквизитов.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат")));
					
					Если НоваяСтрока.ТипНоменклатурыЗапас Тогда
						Если Объект.ПоложениеСклада=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
							НоваяСтрока.СтруктурнаяЕдиницаРезерв = СтрокаЗагрузки.СтруктурнаяЕдиница;
						Иначе
							НоваяСтрока.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
						КонецЕсли; 
					КонецЕсли;
					
					// Если заказ "Выполнен" знач. в подборе выбирали товар отгруженный,
					// иначе в подборе выбирали товар к резерву, но поле тоже нужно заполнить.
					НоваяСтрока.РезервОтгрузка = НоваяСтрока.Резерв;
					
					СтруктураДанныеНоменклатуры = Новый Структура();
					СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
					СтруктураДанныеНоменклатуры.Вставить("Номенклатура", СтрокаЗагрузки.Номенклатура);
					СтруктураДанныеНоменклатуры.Вставить("Характеристика", СтрокаЗагрузки.Характеристика);
					СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
					СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
					СтруктураДанныеНоменклатуры.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиницаРезерв);
					
					СтатусПартии = Новый СписокЗначений;
					СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
					СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
					
					СтруктураДанныеНоменклатуры.Вставить("СтатусПартии", СтатусПартии);
					
					СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанныеНоменклатуры);
					
					ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, НоваяСтрока, СтруктураДанныеНоменклатуры);
					
					СтруктураДанныеНоменклатуры.Вставить("ЕстьПартииСНДС", ЕстьПартииСНДС);
					
					Если РассчитатьЦены И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
						
						СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
						СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
						СтруктураДанныеНоменклатуры.Вставить("ВидЦен", Объект.ВидЦен);
						СтруктураДанныеНоменклатуры.Вставить("Коэффициент", 1);
						СтруктураДанныеНоменклатуры.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
						
						// ДисконтныеКарты
						СтруктураДанныеНоменклатуры.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
						СтруктураДанныеНоменклатуры.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
						// Конец ДисконтныеКарты
						
					КонецЕсли;
					
					СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
					
					НоваяСтрока.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
					НоваяСтрока.НомерГТД = СтруктураДанные.НомерГТД;
					НоваяСтрока.КомиссияСНДС = СтруктураДанные.КомиссияСНДС; 
					
					Если СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
						Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
						ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
						ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, Объект.Курс, КурсНациональнаяВалюта,УчетВалютныхОпераций);
						ТребуетсяИзменениеНалогообложениеНаСНДС = СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС;
					КонецЕсли;
					
				КонецЕсли;
				
				// Характеристики
				НоваяСтрока.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
				НоваяСтрока.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
				НоваяСтрока.ЗаполнениеХарактеристикиПроверено = Истина;
				
				Если СтруктураДанные.ИспользоватьХарактеристики
					Тогда
					НоваяСтрока.Характеристика = СтруктураДанные.Характеристика;
				КонецЕсли;
				// Конец Характеристики
				
				// Прослеживаемость
				НоваяСтрока.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
				Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
					НоваяСтрока.ПрослеживаемыйТовар = СтруктураДанные.ПрослеживаемыйТовар;
					НоваяСтрока.ПрослеживаемыйКомплект = СтруктураДанные.ПрослеживаемыйКомплект;
					ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, НоваяСтрока);
					НоваяСтрока.КодТНВЭД = СтруктураДанные.ТоварнаяНоменклатураВЭД;
				Иначе
					НоваяСтрока.ПрослеживаемыйТовар = Ложь;
					НоваяСтрока.ПрослеживаемыйКомплект = Ложь;
				КонецЕсли;
				Если НЕ НоваяСтрока.ПрослеживаемыйТовар Тогда
					НоваяСтрока.НомерГТД = СтруктураДанные.НомерГТД;
				Иначе
					НоваяСтрока.НомерГТД = Неопределено;
				КонецЕсли; 
				// Конец Прослеживаемость
				
				НоваяСтрока.УказыватьДокументПоступления = СкладскойУчетСервер.УказыватьДокументПоступления(НоваяСтрока.СтруктурнаяЕдиницаРезерв, Ложь);
				
				Если РассчитатьЦены Тогда
					НоваяСтрока.СтавкаНДС = СтруктураДанные.СтавкаНДС;
					НоваяСтрока.Цена = СтруктураДанные.Цена;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе

			ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, НоваяСтрока, СтруктураДанныеНоменклатуры);

			СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
			
			// Характеристики
			НоваяСтрока.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
			НоваяСтрока.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
			НоваяСтрока.ЗаполнениеХарактеристикиПроверено = Истина;
			
			Если СтруктураДанные.ИспользоватьХарактеристики
				Тогда
				НоваяСтрока.Характеристика = СтруктураДанные.Характеристика;
			КонецЕсли;
			// Конец Характеристики
			
		КонецЕсли;
		
		Если ИмяТабличнойЧасти = "Запасы" ИЛИ ИмяТабличнойЧасти = "Материалы"
			Тогда
			
			//Партии
			НоваяСтрока.ИспользоватьПартии = СтрокаЗагрузки.Номенклатура.ИспользоватьПартии;
			НоваяСтрока.ПроверятьЗаполнениеПартий = СтрокаЗагрузки.Номенклатура.ПроверятьЗаполнениеПартий;
			
			ЗначенияПартииПоУмолчанию = ?(СтруктураДанные.Свойство("Партия"), СтруктураДанные.Партия, Неопределено);
			
			НоваяСтрока.Партия = ?(ЗначениеЗаполнено(СтрокаЗагрузки.Партия), СтрокаЗагрузки.Партия, ЗначенияПартииПоУмолчанию);
			// Конец Партии
			
			НоваяСтрока.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
			
			ИмяПоляКлючСвязи = ?(ИмяТабличнойЧасти = "Материалы", "КлючСвязиСерииНоменклатуры", "КлючСвязи");
			ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект[ИмяТабличнойЧасти], НоваяСтрока, ИмяПоляКлючСвязи);
			
			ОбновитьДоступностьЯчеек();
			ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
			
		КонецЕсли;
		
		Если НоваяСтрока.Свойство("Спецификация") Тогда 
			
			НоваяСтрока.Спецификация = СпецификацияПоУмолчанию(СтрокаЗагрузки.Номенклатура,
				СтрокаЗагрузки.Характеристика);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИмяТабличнойЧасти = "Работы" Тогда
		ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, ИмяТабличнойЧасти, Истина);
	ИначеЕсли ИмяТабличнойЧасти = "Запасы" Тогда
		ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, ИмяТабличнойЧасти);
		УстановитьВидимостьДокументаПоступления(ЭтаФорма);
	КонецЕсли;
	
	ДействияПослеЧтенияОбъекта();
	
	// АвтоматическиеСкидки
	Если ТаблицаДляЗагрузки.Количество() > 0 Тогда
		СброситьФлагСкидкиРассчитаныСервер("ОбработкаПодбора");
	КонецЕсли;
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Материалы" Тогда
		ЗаполнитьНомераСтрокТаблицаМатериалы(Объект.Материалы);
	КонецЕсли;
	
	// ИнтеграцияГосИС
	Если ИмяТабличнойЧасти = "Запасы" Тогда
		СобытияФормИСУНФ.ПриИзмененииЭлемента(ЭтотОбъект, "ТабличнаяЧасть", Новый Структура("ТребуетсяЗаполнениеСлужебныхРеквизитов"));
	КонецЕсли;
	// Конец ИнтеграцияГосИС
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

&НаСервере
Функция ПоместитьПредоплатаВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(
		Объект.Предоплата.Выгрузить(,
			"Документ,
			|НомерСертификата,
			|СуммаРасчетов,
			|Курс,
			|Кратность,
			|СуммаПлатежа"),
		УникальныйИдентификатор);
	
КонецФункции // ПоместитьПредоплатаВХранилище()

&НаСервере
Процедура ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресПредоплатаВХранилище);
	Объект.Предоплата.Загрузить(ТаблицаДляЗагрузки);
	
	Элементы.ЗНГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокОплаты(Объект.СпособЗачетаПредоплаты, Объект.Предоплата);
	
КонецПроцедуры // ПолучитьПредоплатаИзХранилища()

#КонецОбласти

#Область УправлениеВнешнимВидомФормы

&НаКлиенте
Процедура УстановитьВидимостьИДоступностьДатаЗапрета()
	
	Если НЕ ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РазрешеноРедактированиеДокумента Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФормаГруппаПроведениеДатаЗапрета.Видимость = ТолькоПросмотр И РазрешеноРедактированиеДокумента;
	Элементы.ФормаПровестиИЗакрытьДатаЗапрета.КнопкаПоУмолчанию = Элементы.ФормаГруппаПроведениеДатаЗапрета.Видимость;
	
	Если ТолькоПросмотр И РазрешеноРедактированиеДокумента Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаЗаписать", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПровестиИЗакрыть", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПровести", "Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой()
	
	УстановитьВидимостьИДоступностьДатаЗапрета();
	УстановитьВидимостьИДоступностьОтСостояния();
	УстановитьВидимостьОтФОИспользоватьПодсистемуЗарплата();
	УстановитьВидимостьОтПользовательскихНастроек(Объект, ЭтотОбъект);
	ОбновитьОтображениеКолонокВРазрезеЗапасов(,,Ложь);
	УстановитьВидимостьДоговора();
	
	ЗаказЗавершен	= Объект.СостояниеЗаказа = ПредопределенноеЗначение("Справочник.СостоянияЗаказНарядов.Завершен");
	ЗаказОтменен	= Объект.ВариантЗавершения = ПредопределенноеЗначение("Перечисление.ВариантыЗавершенияЗаказа.Отменен");
	РедактироватьСписком = Элементы.РедактироватьСписком.Пометка;
	
	Элементы.СтраницаЗавершениеЗаказа.Видимость		= ЗаказЗавершен;
	Элементы.ПричинаОтмены.Доступность				= ЗаказОтменен;
	Элементы.БанковскийСчет.Видимость				= Объект.ТипДенежныхСредств = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Безналичные");
	Элементы.Касса.Видимость						= Объект.ТипДенежныхСредств = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Наличные");
	Элементы.ПлатежныйКалендарьСтрокой.Видимость	= Не РедактироватьСписком;
	Элементы.СписокПлатежныйКалендарь.Видимость		= РедактироватьСписком;
	Элементы.БанковскийСчет.ОтметкаНезаполненного	= Объект.ЗапланироватьОплату И Не ЗначениеЗаполнено(Объект.БанковскийСчет);
	Элементы.Касса.ОтметкаНезаполненного			= Объект.ЗапланироватьОплату И Не ЗначениеЗаполнено(Объект.Касса);
	Элементы.ПлатежныйКалендарьДатаОплаты.ОтметкаНезаполненного = Объект.ЗапланироватьОплату;
	Элементы.ПлатежныйКалендарьДатаОплаты.АвтоОтметкаНезаполненного = Объект.ЗапланироватьОплату;
	Элементы.РедактироватьСписком.Доступность 		   = Объект.ЗапланироватьОплату;
	Элементы.ПлатежныйКалендарьОбщаяГруппа.Доступность = Объект.ЗапланироватьОплату;
	Элементы.ЗНМатериалыГруппаЗаполнить.Доступность = Не ЭтаФорма.ТолькоПросмотр;
	Элементы.ЗапасыИзменитьРезерв.Доступность = Не ЭтаФорма.ТолькоПросмотр;
	
	Элементы.ЗаполнитьОбновитьКалькуляцию.Видимость 	= НЕ Объект.КалькуляцияРассчитана И НЕ ТолькоПросмотр;
	Элементы.ОткрытьКалькуляцию.Видимость				= Объект.КалькуляцияРассчитана;
	
	Если ОбязательноЗаполнятьИсточникВЗаказах Тогда
		Элементы.ИсточникПривлечения.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;

	// Наборы
	Элементы.ЗНРаботыКартинкаНабора.Видимость			= Ложь;
	Для каждого Стр Из Объект.Работы Цикл
		Если Стр.КартинкаНабора>0 Тогда
			Элементы.ЗНРаботыКартинкаНабора.Видимость = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	Элементы.ЗапасыКартинкаНабора.Видимость			= Ложь;
	Для каждого Стр Из Объект.Запасы Цикл
		Если Стр.КартинкаНабора>0 Тогда
			Элементы.ЗапасыКартинкаНабора.Видимость = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	// Конец Наборы
	
	// Номенклатура.
	УстановитьПараметрыВыбораНоменклатуры();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ФормаДокументПриходнаяНакладнаяСоздатьНаОсновании", 
		"Заголовок",
		НСтр("ru = 'Возврат от покупателя'"));
		
	// Остатки и резервы
	Элементы.ЗапасыИзменитьРезервОчиститьРезерв.Заголовок = ?(ЗаказНарядВСостоянииВыполнения, "Очистить ""Из резерва""" ,"Очистить ""В резерв""");
	Элементы.МатериалыИзменитьРезервОчиститьРезерв.Заголовок = ?(ЗаказНарядВСостоянииВыполнения, "Очистить ""Из резерва""" ,"Очистить ""В резерв""");
	Элементы.МатериалыИзменитьРезервОчиститьРезервДляВсех.Заголовок = ?(ЗаказНарядВСостоянииВыполнения, "Очистить ""Из резерва"" для всех работ" ,"Очистить ""В резерв"" для всех работ");
	
	// Прослеживаемость
	ПрослеживаемостьФормыКлиентСерверУНФ.НастроитьВидимостьКолонокРНПТ(ЭтотОбъект);
	// Конец Прослеживаемость

	// ОплатаБонусами
	ВидимостьПодменюПредоплаты = Ложь;
	Для Каждого КнопкиПодменю Из Элементы.ПредоплатаГруппаДобавитьПодменю.ПодчиненныеЭлементы Цикл
		Если КнопкиПодменю.Видимость Тогда
			ВидимостьПодменюПредоплаты = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Элементы.ПредоплатаГруппаДобавитьПодменю.Видимость = ВидимостьПодменюПредоплаты;
	// Конец ОплатаБонусами
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораНоменклатуры()
	
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ЗаказНаряд", НастройкиФормыВыбораНоменклатуры);
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ЗаказНаряд", НастройкиФормыВыбораНоменклатуры,,"ЗНМатериалы");
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ЗаказНаряд", НастройкиФормыВыбораНоменклатуры,,"ЗНРаботы");
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
	НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	Если Не РаботаСПодарочнымиСертификатамиКлиентСервер.ИспользованиеСертификатовЗапрещено(ВалютаРасчетов, НациональнаяВалюта) Тогда
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
	КонецЕсли;
	МассивТипов = Новый ФиксированныйМассив(НовыйМассив);
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипНоменклатуры", МассивТипов);
	НовыйПараметр2 = Новый ПараметрВыбора("Дополнительно.ОграничениеТипа", МассивТипов);
	НовыйПараметр3 = Новый ПараметрВыбора("Дополнительно.ТипВладельца", "ЗаказПокупателя");
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыйМассив.Добавить(НовыйПараметр2);
	НовыйМассив.Добавить(НовыйПараметр3);
	
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.ЗапасыНоменклатура.ПараметрыВыбора = НовыеПараметры;
	
	Если РаботаСПодарочнымиСертификатамиКлиентСервер.ИспользованиеСертификатовЗапрещено(ВалютаРасчетов, НациональнаяВалюта) Тогда
		Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
			Если СтрокаЗапасы.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат") Тогда
				СтрокаЗапасы.Номенклатура = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "ЗНМатериалы");
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "ЗНРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьИДоступностьОтСостояния()
	
	Если РежимОстаткиИРезервы Тогда
		Элементы.ЗапасыОстаткиРасход.Видимость = Ложь;
		Элементы.ЗапасыОстаткиЗаказ.Видимость = Ложь;
		Элементы.ЗапасыОбеспечение.Видимость = Ложь;
		Элементы.ЗапасыГруппаКПоступлению.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗаказНарядВСостоянииВыполнения Тогда
		
		Элементы.ЗапасыРезерв.Видимость = Ложь;
		Элементы.ЗапасыРезервОтгрузка.Видимость = ?(НЕ РежимОстаткиИРезервы, Истина, Ложь);
		
		Элементы.ЗапасыИзменитьРезервЗаполнитьПоОстаткам.Видимость = Ложь;
		Элементы.ЗапасыИзменитьРезервЗаполнитьПоРезервам.Видимость = Истина;
		
		Элементы.ЗНМатериалыРезерв.Видимость = Ложь;
		Элементы.ЗНМатериалыРезервОтгрузка.Видимость = ?(НЕ РежимОстаткиИРезервы, Истина, Ложь);
		
		Элементы.МатериалыИзменитьРезервЗаполнитьПоОстаткам.Видимость = Ложь;
		Элементы.МатериалыИзменитьРезервЗаполнитьПоОстаткамДляВсех.Видимость = Ложь;
		Элементы.МатериалыИзменитьРезервЗаполнитьПоРезервам.Видимость = Истина;
		Элементы.МатериалыИзменитьРезервЗаполнитьПоРезервамДляВсех.Видимость = Истина;
		
		Элементы.ЗНГруппаПредоплата.Доступность = Истина;
		
		Элементы.ЗапасыОстаткиРасход.Видимость = РежимОстаткиИРезервы;
		
	Иначе
		
		Элементы.ЗапасыРезерв.Видимость = ?(НЕ РежимОстаткиИРезервы, Истина, Ложь);
		Элементы.ЗапасыРезервОтгрузка.Видимость = Ложь;
		
		Элементы.ЗапасыИзменитьРезервЗаполнитьПоОстаткам.Видимость = Истина;
		Элементы.ЗапасыИзменитьРезервЗаполнитьПоРезервам.Видимость = Ложь;
		
		Элементы.ЗНМатериалыРезерв.Видимость = ?(НЕ РежимОстаткиИРезервы, Истина, Ложь);
		Элементы.ЗНМатериалыРезервОтгрузка.Видимость = Ложь;
		
		Элементы.МатериалыИзменитьРезервЗаполнитьПоОстаткам.Видимость = Истина;
		Элементы.МатериалыИзменитьРезервЗаполнитьПоОстаткамДляВсех.Видимость = Истина;
		Элементы.МатериалыИзменитьРезервЗаполнитьПоРезервам.Видимость = Ложь;
		Элементы.МатериалыИзменитьРезервЗаполнитьПоРезервамДляВсех.Видимость = Ложь;
		
		Если Не ЭтотОбъект.ТолькоПросмотр Тогда
			Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
				СтрокаЗапасы.РезервОтгрузка = СтрокаЗапасы.Резерв;
			КонецЦикла;
			
			Для каждого СтрокаМатериалы Из Объект.Материалы Цикл
				СтрокаМатериалы.РезервОтгрузка = СтрокаМатериалы.Резерв;
			КонецЦикла;
			
			Элементы.ЗНГруппаПредоплата.Доступность = Ложь;
			
			Если Объект.Предоплата.Количество() > 0 Тогда
				Объект.Предоплата.Очистить();
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ЗапасыОстаткиЗаказ.Видимость = РежимОстаткиИРезервы;
		Элементы.ЗапасыОбеспечение.Видимость = ?(Объект.Проведен И РежимОстаткиИРезервы, Истина, Ложь);
		Элементы.ЗапасыГруппаКПоступлению.Видимость = РежимОстаткиИРезервы;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьОтФОИспользоватьПодсистемуЗарплата()
	
	// Зарплата.
	Элементы.ЗНГруппаИсполнители.Видимость = ИспользоватьПодсистемуЗарплата;
	
КонецПроцедуры // УстановитьВидимостьОтФОИспользоватьПодсистемуЗарплата()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьОтПользовательскихНастроек(Объект, Форма)
	
	Элементы = Форма.Элементы;
	
	Если Объект.ПоложениеВидаРабот = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
		Элементы.ЗНВидРабот.Видимость = Истина;
		Элементы.ЗНРаботыВидРабот.Видимость = Ложь;
		Элементы.ЗНРаботыВидРабот.ФиксацияВТаблице = ФиксацияВТаблице.Нет;
		Элементы.ТаблицаРаботыВидРабот.Видимость = Ложь;
		Форма.ВидРаботВШапке = Истина;
	Иначе
		Элементы.ЗНВидРабот.Видимость = Ложь;
		Элементы.ЗНРаботыВидРабот.Видимость = Истина;
		Элементы.ЗНРаботыВидРабот.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
		Элементы.ТаблицаРаботыВидРабот.Видимость = Истина;
		Форма.ВидРаботВШапке = Ложь;
	КонецЕсли;
	
	Если Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		Форма.СкладВШапке = Ложь;
		Элементы.ЗНСтруктурнаяЕдиницаЗапасов.Видимость = Ложь;
		Элементы.ЗНЯчейкаЗапасов.Видимость = Ложь;
		Элементы.ЗНМатериалыСтруктурнаяЕдиницаРезерв.Видимость = Истина;
		Элементы.ЗНМатериалыЯчейка.Видимость = Форма.ЗаказНарядВСостоянииВыполнения;
		Элементы.ЗапасыСтруктурнаяЕдиницаРезерв.Видимость = Истина;
		Элементы.ЗапасыЯчейка.Видимость = Форма.ЗаказНарядВСостоянииВыполнения;
	Иначе
		Форма.СкладВШапке = Истина;
		Элементы.ЗНСтруктурнаяЕдиницаЗапасов.Видимость = Истина;
		Элементы.ЗНЯчейкаЗапасов.Видимость = Истина;
		Элементы.ЗНМатериалыСтруктурнаяЕдиницаРезерв.Видимость = Ложь;
		Элементы.ЗНМатериалыЯчейка.Видимость = Ложь;
		Элементы.ЗапасыСтруктурнаяЕдиницаРезерв.Видимость = Ложь;
		Элементы.ЗапасыЯчейка.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ИспользоватьТовары Тогда
		Элементы.ЗНГруппаЗапасы.Видимость = Истина;
	Иначе
		Элементы.ЗНГруппаЗапасы.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ИспользоватьМатериалыЗаказчика Тогда
		Элементы.ЗНГруппаМатериалыЗаказчика.Видимость = Истина
	Иначе
		Элементы.ЗНГруппаМатериалыЗаказчика.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ИспользоватьМатериалы Тогда
		Элементы.ЗНМатериалы.Видимость = Истина;
		Элементы.ГруппаКоманднаяПанельМатериалы.Видимость = Истина;
		Элементы.ОстаткиИРезервыМатериалы.Пометка = Форма.РежимОстаткиИРезервы;
	Иначе
		Элементы.ЗНМатериалы.Видимость = Ложь;
		Элементы.ГруппаКоманднаяПанельМатериалы.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ИспользоватьЗарплатаИсполнителей 
		И Форма.ИспользоватьПодсистемуЗарплата Тогда
		
		Элементы.ЗНГруппаИсполнители.Видимость = Истина
		
	Иначе
		
		Элементы.ЗНГруппаИсполнители.Видимость = Ложь;
		
	КонецЕсли;
	
	// Видимость колонок, настроенная пользователем
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСодержание", "Видимость",
		Форма.ПоказыватьКолонкуСодержаниеВЗаказеПокупателяЗапасы);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗНРаботыСодержание", "Видимость",
		Форма.ПоказыватьКолонкуСодержаниеВЗаказеПокупателяРаботы);
		
КонецПроцедуры // УстановитьВидимостьОтПользовательскихНастроек()

&НаКлиенте
Процедура РедактироватьЗачетПредоплаты(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале контрагента.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале договор контрагента.'"));
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ЗаказДляПодбораПредоплаты = ПредопределенноеЗначение("Документ.ПриемИПередачаВРемонт.ПустаяСсылка");
	Иначе
		ЗаказДляПодбораПредоплаты = ?(КонтрагентВестиРасчетыПоЗаказам, Объект.Ссылка, Неопределено);
	КонецЕсли;
	
	АдресПредоплатаВХранилище = ПоместитьПредоплатаВХранилище();
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("АдресПредоплатаВХранилище", АдресПредоплатаВХранилище);
	ПараметрыПодбора.Вставить("Подбор", Истина);
	ПараметрыПодбора.Вставить("ЕстьЗаказ", Ложь);
	ПараметрыПодбора.Вставить("ЗаказВШапке", Истина);
	ПараметрыПодбора.Вставить("Компания", Компания);
	ПараметрыПодбора.Вставить("Заказ", ЗаказДляПодбораПредоплаты);
	ПараметрыПодбора.Вставить("Дата", Объект.Дата);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыПодбора.Вставить("Договор", Объект.Договор);
	ПараметрыПодбора.Вставить("Курс", Объект.Курс);
	ПараметрыПодбора.Вставить("Кратность", Объект.Кратность);
	ПараметрыПодбора.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("СуммаДокумента", Объект.Работы.Итог("Всего") + Объект.Запасы.Итог("Всего"));
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораАвансовПокупателей", ПараметрыПодбора, , , , ,
		Новый ОписаниеОповещения("РедактироватьЗачетПредоплатыЗавершение", ЭтотОбъект,
		Новый Структура("АдресПредоплатаВХранилище", АдресПредоплатаВХранилище)));
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	АдресПредоплатаВХранилище = ДополнительныеПараметры.АдресПредоплатаВХранилище;
	
	КодВозврата = Результат;
	Если КодВозврата = КодВозвратаДиалога.OK Тогда
		ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище);
	КонецЕсли;
	
КонецПроцедуры // РедактироватьЗачетПредоплаты()

&НаКлиенте
Процедура УстановитьВидимостьДоговора()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		КонтрагентВестиРасчетыПоЗаказам = ПараметрыРасчетовСКонтрагентом.ВестиРасчетыПоЗаказам;
		Элементы.ЗНДоговор.Видимость = ПараметрыРасчетовСКонтрагентом.ВестиРасчетыПоДоговорам;
		
	Иначе
		
		КонтрагентВестиРасчетыПоЗаказам = Ложь;
		Элементы.ЗНДоговор.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьДоговора()

&НаСервере
Процедура ЗаполнитьПараметрыРасчетовСКонтрагентом()
	
	КонтрагентПроект = Объект.Проект.Контрагент;
	Если ЗначениеЗаполнено(Объект.Проект) И ЗначениеЗаполнено(КонтрагентПроект) 
		И НЕ Объект.Контрагент = КонтрагентПроект Тогда
		Объект.Проект = Справочники.Проекты.ПустаяСсылка()
	КонецЕсли;
	
	ПараметрыРасчетовСКонтрагентом = 
		Новый ФиксированнаяСтруктура(
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Контрагент, "ВестиРасчетыПоЗаказам, ВестиРасчетыПоДоговорам"));

КонецПроцедуры

&НаКлиенте
Функция ЯчейкаДоступна(СтруктурнаяЕдиница)
	
	Если НЕ КэшЗначений.УчетПоЯчейкам Тогда
		Возврат Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) ИЛИ ТипЗнч(СтруктурнаяЕдиница)<>Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		Возврат Ложь;
	КонецЕсли; 
	Если НЕ КэшЗначений.Свойство("ДоступностьЯчеек") Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Результат = КэшЗначений.ДоступностьЯчеек.Получить(СтруктурнаяЕдиница);
	Если Результат = Неопределено Тогда
		МассивСтруктурныхЕдиниц = Новый Массив;
		МассивСтруктурныхЕдиниц.Добавить(СтруктурнаяЕдиница);
		ДополнитьДоступностьЯчеек(МассивСтруктурныхЕдиниц, КэшЗначений.ДоступностьЯчеек);
		Результат = КэшЗначений.ДоступностьЯчеек.Получить(СтруктурнаяЕдиница);
		Если Результат=Неопределено Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьДоступностьЯчеек()
	
	Если НЕ КэшЗначений.УчетПоЯчейкам Тогда
		Возврат;
	КонецЕсли; 	
	
	Если НЕ КэшЗначений.Свойство("ДоступностьЯчеек") Тогда
		КэшЗначений.Вставить("ДоступностьЯчеек", Новый ФиксированноеСоответствие(Новый Соответствие));
	КонецЕсли; 
	
	МассивСтруктурныхЕдиниц = Новый Массив;
	Если Объект.ПоложениеСклада=Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			МассивСтруктурныхЕдиниц.Добавить(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв);
		КонецЦикла; 
		Для каждого СтрокаТабличнойЧасти Из Объект.Материалы Цикл
			МассивСтруктурныхЕдиниц.Добавить(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв);
		КонецЦикла; 
	Иначе
		МассивСтруктурныхЕдиниц.Добавить(Объект.СтруктурнаяЕдиницаРезерв);
	КонецЕсли;
	МассивСтруктурныхЕдиниц = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСтруктурныхЕдиниц);
	ДополнитьДоступностьЯчеек(МассивСтруктурныхЕдиниц, КэшЗначений.ДоступностьЯчеек);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьДоступностьЯчеек(СтруктурныеЕдиницы, СоответствиеСтруктурныхЕдиниц)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтруктурныеЕдиницы", СтруктурныеЕдиницы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Ссылка,
	|	СтруктурныеЕдиницы.ОрдерныйСклад КАК ОрдерныйСклад,
	|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.Ссылка В(&СтруктурныеЕдиницы)";
	Выборка = Запрос.Выполнить().Выбрать();
	Соответствие = Новый Соответствие(СоответствиеСтруктурныхЕдиниц);
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.Ссылка, Выборка.ТипСтруктурнойЕдиницы=Перечисления.ТипыСтруктурныхЕдиниц.Склад);
	КонецЦикла; 
	СоответствиеСтруктурныхЕдиниц = Новый ФиксированноеСоответствие(Соответствие);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПризнакиДоступностиЯчеек(Форма)

	Объект = Форма.Объект;
	КэшЗначений = Форма.КэшЗначений;
	Если НЕ КэшЗначений.УчетПоЯчейкам Тогда
		Возврат;
	КонецЕсли;
	Если Объект.ПоложениеСклада<>ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		Возврат;
	КонецЕсли; 
	 
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		Результат = КэшЗначений.ДоступностьЯчеек.Получить(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв);
		Если Результат=Неопределено Тогда
			Результат = Ложь;
		КонецЕсли; 
		СтрокаТабличнойЧасти.ЯчейкаДоступна = Результат И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв) И СтрокаТабличнойЧасти.ТипНоменклатурыЗапас;
	КонецЦикла; 
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Материалы Цикл
		Результат = КэшЗначений.ДоступностьЯчеек.Получить(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв);
		Если Результат=Неопределено Тогда
			Результат = Ложь;
		КонецЕсли; 
		СтрокаТабличнойЧасти.ЯчейкаДоступна = Результат И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв);
	КонецЦикла; 
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьОтображениеГрузоперевозки()

	РаботаСФормойДокумента.НастроитьГруппуГрузоперевозки(ЭтотОбъект, Объект.Организация, Объект.Контрагент);
	
КонецПроцедуры

#КонецОбласти

#Область ИзменитьРезервТовары

&НаКлиенте
Процедура ЗНИзменитьТоварыРезервЗаполнитьПоОстаткам(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Товары"" не заполнена.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ЗНТоварыЗаполнитьКолонкуРезервПоОстаткамНаСервере();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // ЗНИзменитьТоварыРезервЗаполнитьПоОстаткам()

&НаКлиенте
Процедура ЗНИзменитьТоварыРезервЗаполнитьПоРезервам(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Товары"" не заполнена.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ЗНТоварыЗаполнитьКолонкуРезервПоРезервамНаСервере();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // ЗНИзменитьТоварыРезервЗаполнитьПоРезервам()

&НаКлиенте
Процедура ЗНИзменитьТоварыРезервОчиститьРезерв(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Товары"" не заполнена.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
		Если СтрокаТабличнойЧасти.ТипНоменклатурыЗапас Тогда
			СтрокаТабличнойЧасти.Резерв = 0;
			СтрокаТабличнойЧасти.РезервОтгрузка = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
	
КонецПроцедуры // ЗНИзменитьТоварыРезервОчиститьРезерв()

#КонецОбласти

#Область ИзменитьРезервМатериалы

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервЗаполнитьПоОстаткам(Команда)
	
	ТекущаяСтрокаТЧ = Элементы.Работы.ТекущиеДанные;
	
	Если ТекущаяСтрокаТЧ = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана строка основной табличной части.'"), ,
			"Объект.Работы");
		Возврат;
	КонецЕсли;
	
	МатериалыКлючСвязи = Элементы.ЗНМатериалы.ОтборСтрок["КлючСвязи"];
	РезультатПоиска = Объект.Материалы.НайтиСтроки(Новый Структура("КлючСвязи", МатериалыКлючСвязи));
	Если РезультатПоиска.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Табличная часть ""Материалы"" не заполнена.'"), ,
			"Объект.Материалы");
		Возврат;
	КонецЕсли;
	
	ЗНМатериалыЗаполнитьКолонкуРезервПоОстаткамНаСервере(МатериалыКлючСвязи);
	
	ТабличныеЧастиУНФКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ЗНМатериалы");
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // ЗНИзменитьМатериалыРезервЗаполнитьПоОстаткам()

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервЗаполнитьПоОстаткамДляВсех(Команда)
	
	Если Объект.Материалы.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Табличная часть ""Материалы"" не заполнена.'"), ,
			"Объект.Материалы");
		Возврат;
	КонецЕсли;
	
	Если Объект.Работы.Количество() > 1 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗНИзменитьМатериалыРезервЗаполнитьПоОстаткамДляВсехЗавершение",
			ЭтотОбъект), НСтр(
			"ru = 'В табличной части ""Материалы"" колонка ""Резерв"" будет перезаполнена для всех работ. Продолжить выполнение операции?'"),
			РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
	КонецЕсли;
	
	ЗНИзменитьМатериалыРезервЗаполнитьПоОстаткамДляВсехФрагмент();
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервЗаполнитьПоОстаткамДляВсехЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗНИзменитьМатериалыРезервЗаполнитьПоОстаткамДляВсехФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервЗаполнитьПоОстаткамДляВсехФрагмент()
	
	ЗНМатериалыЗаполнитьКолонкуРезервПоОстаткамНаСервере();
	
	ТабличныеЧастиУНФКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ЗНМатериалы");
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // ЗНИзменитьМатериалыРезервЗаполнитьПоОстаткамДляВсех()

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервЗаполнитьПоРезервам(Команда)
	
	ТекущаяСтрокаТЧ = Элементы.Работы.ТекущиеДанные;
	
	Если ТекущаяСтрокаТЧ = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана строка основной табличной части.'"), ,
			"Объект.Работы");
		Возврат;
	КонецЕсли;
	
	МатериалыКлючСвязи = Элементы.ЗНМатериалы.ОтборСтрок["КлючСвязи"];
	РезультатПоиска = Объект.Материалы.НайтиСтроки(Новый Структура("КлючСвязи", МатериалыКлючСвязи));
	Если РезультатПоиска.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Табличная часть ""Материалы"" не заполнена.'"), ,
			"Объект.Материалы");
		Возврат;
	КонецЕсли;
	
	ЗНМатериалыЗаполнитьКолонкуРезервПоРезервамНаСервере(МатериалыКлючСвязи);
	
	ТабличныеЧастиУНФКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ЗНМатериалы");
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // ЗНИзменитьМатериалыРезервЗаполнитьПоРезервам()

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервЗаполнитьПоРезервамДляВсех(Команда)
	
	Если Объект.Материалы.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Табличная часть ""Материалы"" не заполнена.'"), ,
			"Объект.Материалы");
		Возврат;
	КонецЕсли;
	
	Если Объект.Работы.Количество() > 1 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗНИзменитьМатериалыРезервЗаполнитьПоРезервамДляВсехЗавершение",
			ЭтотОбъект), НСтр(
			"ru = 'В табличной части ""Материалы"" колонка ""Резерв"" будет перезаполнена для всех работ. Продолжить выполнение операции?'"),
			РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
	КонецЕсли;
	
	ЗНИзменитьМатериалыРезервЗаполнитьПоРезервамДляВсехФрагмент();
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервЗаполнитьПоРезервамДляВсехЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗНИзменитьМатериалыРезервЗаполнитьПоРезервамДляВсехФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервЗаполнитьПоРезервамДляВсехФрагмент()
	
	ЗНМатериалыЗаполнитьКолонкуРезервПоРезервамНаСервере();
	
	ТабличныеЧастиУНФКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ЗНМатериалы");
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // ЗНИзменитьМатериалыРезервЗаполнитьПоРезервамДляВсех()

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервОчиститьРезерв(Команда)
	
	ТекущаяСтрокаТЧ = Элементы.Работы.ТекущиеДанные;
	
	Если ТекущаяСтрокаТЧ = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана строка основной табличной части.'"), ,
			"Объект.Работы");
		Возврат;
	КонецЕсли;
	
	РезультатПоиска = Объект.Материалы.НайтиСтроки(Новый Структура("КлючСвязи",
		Элементы.ЗНМатериалы.ОтборСтрок["КлючСвязи"]));
	Если РезультатПоиска.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Табличная часть ""Материалы"" не заполнена.'"), ,
			"Объект.Материалы");
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из РезультатПоиска Цикл
		
		СтрокаТабличнойЧасти.Резерв = 0;
		СтрокаТабличнойЧасти.РезервОтгрузка = 0;
		
	КонецЦикла;
		
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
	
КонецПроцедуры // ЗНИзменитьМатериалыРезервОчиститьРезерв()

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервОчиститьРезервДляВсех(Команда)
	
	Если Объект.Материалы.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Табличная часть ""Материалы"" не заполнена.'"), ,
			"Объект.Материалы");
		Возврат;
	КонецЕсли;
	
	Если Объект.Работы.Количество() > 1 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗНИзменитьМатериалыРезервОчиститьРезервДляВсехЗавершение", ЭтотОбъект),
			НСтр(
			"ru = 'В табличной части ""Материалы"" колонка ""Резерв"" будет перезаполнена для всех работ. Продолжить выполнение операции?'"),
			РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
	КонецЕсли;
	
	ЗНИзменитьМатериалыРезервОчиститьРезервДляВсехФрагмент();
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервОчиститьРезервДляВсехЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗНИзменитьМатериалыРезервОчиститьРезервДляВсехФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервОчиститьРезервДляВсехФрагмент()
	
	Перем СтрокаТабличнойЧасти;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Материалы Цикл
		
		СтрокаТабличнойЧасти.Резерв = 0;
		СтрокаТабличнойЧасти.РезервОтгрузка = 0;
		
	КонецЦикла;
	
КонецПроцедуры // ЗНИзменитьМатериалыРезервОчиститьРезервДляВсех()

#КонецОбласти

#Область ДисконтныеКарты

&НаКлиенте
Процедура ВыбранаДисконтнаяКарта(ДисконтнаяКарта)

	ВладелецДисконтнойКарты = ПолучитьВладельцаДисконтнойКарты(ДисконтнаяКарта);
	Если Объект.Контрагент.Пустая() И Не ВладелецДисконтнойКарты.Пустая() Тогда
		Объект.Контрагент = ВладелецДисконтнойКарты;
		КонтрагентПриИзменении(Элементы.ЗНКонтрагент);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Заполнен контрагент и считана дисконтная карта'"),
			ПолучитьНавигационнуюСсылку(ДисконтнаяКарта),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В документе заполнен контрагент и считана дисконтная карта %1'"), ДисконтнаяКарта),
			БиблиотекаКартинок.Информация32);
	ИначеЕсли Объект.Контрагент <> ВладелецДисконтнойКарты И Не ВладелецДисконтнойКарты.Пустая() Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Дисконтная карта не считана. Владелец дисконтной карты не совпадает с контрагентом в документе.'"),
			,
			"Контрагент",
			"Объект");
		
		Возврат;
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Считана дисконтная карта'"),
			ПолучитьНавигационнуюСсылку(ДисконтнаяКарта),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Считана дисконтная карта %1'"), ДисконтнаяКарта),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВыбранаДисконтнаяКартаДополнительно(ДисконтнаяКарта);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбранаДисконтнаяКартаДополнительно(ДисконтнаяКарта)
	
	Если Не Модифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Объект.ДисконтнаяКарта = ДисконтнаяКарта;
	Объект.ПроцентСкидкиПоДисконтнойКарте = ДисконтныеКартыУНФВызовСервера.ВычислитьПроцентСкидкиПоДисконтнойКарте(
		Объект.Дата, ДисконтнаяКарта);
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	
	ОбновитьКартинкуДисконтнойКарты();
	
	Если ДисконтныеКартыУНФВызовСервера.СтарыйМеханизмСкидок(ДисконтнаяКарта) Тогда
	
		Если Объект.Запасы.Количество() > 0 Тогда
			Текст = НСтр("ru = 'Перезаполнить скидки во всех строках?'");
			Оповещение = Новый ОписаниеОповещения("ВыбранаДисконтнаяКартаДополнительноЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		КонецЕсли;
		
	Иначе
		
		//Если ВыдатьПодаркиНаВыбор ИЛИ ВывестиСообщения Тогда 			
		//	//Если на форме уже выведены сообщения, то всего лишь сбросим флаг расчета скидок, но не станем дублировать окна
		//	СброситьФлагСкидкиРассчитаныКлиент("ВыборДисконтнойКарты");
		//Иначе
			РассчитатьСкидкиНаценки(Неопределено);
		//КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранаДисконтнаяКартаДополнительноЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		УправлениеНебольшойФирмойКлиент.ПерезаполнитьСкидкиТабличнойЧастиПослеСчитыванияДисконтнойКарты(ЭтотОбъект, "Запасы");
		УправлениеНебольшойФирмойКлиент.ПерезаполнитьСкидкиТабличнойЧастиПослеСчитыванияДисконтнойКарты(ЭтотОбъект, "Работы");
		// Ручные скидки
		РассчитатьСуммуИПроцентСкидкиРаботыЗапасы(Объект, СкидкаСумма, СкидкаПроцент);
		// Конец Ручные скидки
	КонецЕсли;
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	// АвтоматическиеСкидки
	СброситьФлагСкидкиРассчитаныКлиент("ПересчетСкидокПоДисконтнойКарте");
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВладельцаДисконтнойКарты(ДисконтнаяКарта)
	
	Возврат ДисконтнаяКарта.ВладелецКарты;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоДисконтнаяКартаСФиксированнойСкидкой(ДисконтнаяКарта)
	
	Возврат ДисконтнаяКарта.Владелец.ВидСкидкиВДисконтныхКартах = Перечисления.ВидыСкидокВДисконтныхКартах.ФиксированнаяСкидка;
	
КонецФункции

// Процедура выполняется только для НАКОПИТЕЛЬНЫХ дисконтных карт.
// Процедура пересчитывает скидки документа, после изменения даты документа. Пересчёт выполняется, если процент скидки
// по выбранной дисконтной карте, изменился. 
//
&НаКлиенте
Процедура ПересчитатьПроцентСкидкиПриИзмененииДатыДокумента()
	
	Если Объект.ДисконтнаяКарта.Пустая() ИЛИ ЭтоДисконтнаяКартаСФиксированнойСкидкой(Объект.ДисконтнаяКарта) Тогда
		Возврат;
	КонецЕсли;
	
	ПредПроцентСкидкиПоДисконтнойКарте = Объект.ПроцентСкидкиПоДисконтнойКарте;
	НовПроцентСкидкиПоДисконтнойКарте = ДисконтныеКартыУНФВызовСервера.ВычислитьПроцентСкидкиПоДисконтнойКарте(Объект.Дата, Объект.ДисконтнаяКарта);
	
	Если ПредПроцентСкидкиПоДисконтнойКарте <> НовПроцентСкидкиПоДисконтнойКарте Тогда
		
		Если Объект.Запасы.Количество() > 0 Тогда
			Текст = СтрШаблон(НСтр(
				"ru='Изменить % скидки по накопительной дисконтной карте с %1 на %2 и перезаполнить скидки во всех строках?'"),
				ПредПроцентСкидкиПоДисконтнойКарте, НовПроцентСкидкиПоДисконтнойКарте);
			
			ДополнительныеПараметры = Новый Структура("НовПроцентСкидкиПоДисконтнойКарте, ПересчитатьТЧ", НовПроцентСкидкиПоДисконтнойКарте, Истина);
			Оповещение = Новый ОписаниеОповещения("ПересчитатьПроцентСкидкиПриИзмененииДатыДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		Иначе
			Текст = СтрШаблон(НСтр("ru='Изменить % скидки по накопительной дисконтной карте с %1 на %2 ?'"),
				ПредПроцентСкидкиПоДисконтнойКарте, НовПроцентСкидкиПоДисконтнойКарте);
			
			ДополнительныеПараметры = Новый Структура("НовПроцентСкидкиПоДисконтнойКарте, ПересчитатьТЧ", НовПроцентСкидкиПоДисконтнойКарте, Ложь);
			Оповещение = Новый ОписаниеОповещения("ПересчитатьПроцентСкидкиПриИзмененииДатыДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		КонецЕсли;
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняется только для НАКОПИТЕЛЬНЫХ дисконтных карт.
// Процедура пересчитывает скидки документа, после изменения даты документа. Пересчёт выполняется, если процент скидки
// по выбранной дисконтной карте, изменился. 
//
&НаКлиенте
Процедура ПересчитатьПроцентСкидкиПриИзмененииДатыДокументаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ПроцентСкидкиПоДисконтнойКарте = ДополнительныеПараметры.НовПроцентСкидкиПоДисконтнойКарте;
		
		ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
			УчетВалютныхОпераций);
		
		Если ДополнительныеПараметры.ПересчитатьТЧ Тогда
			УправлениеНебольшойФирмойКлиент.ПерезаполнитьСкидкиТабличнойЧастиПослеСчитыванияДисконтнойКарты(ЭтотОбъект, "Запасы");
			
			// Платежный календарь.
			ПересчитатьПлатежныйКалендарь();
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчитатьДисконтнуюКартуНажатиеЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт

	Если ТипЗнч(ВозвращаемыеПараметры) = Тип("Структура") Тогда
		СчитанаДисконтнаяКарта = ВозвращаемыеПараметры.СчитанаДисконтнаяКарта;
		ВыбранаДисконтнаяКарта(ВозвращаемыеПараметры.ДисконтнаяКарта);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьБонусовКНачислению()  
	
	ЕстьБонусы = Объект.БонусныеБаллыКНачислению.Количество() > 0;	
	Элементы.БонусныеБаллыКНачислению.Видимость = ЕстьБонусы;
	
КонецПроцедуры
#КонецОбласти

#Область АвтоматическиеСкидки

&НаКлиенте
Процедура РассчитатьСкидкиНаценки(Команда)
	
	Если Объект.Запасы.Количество() = 0 И Объект.Работы.Количество() = 0 Тогда
		Если Объект.СкидкиНаценки.Количество() > 0 Тогда
			Объект.СкидкиНаценки.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	РассчитатьСкидкиНаценкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ИспользоватьМинимальныеЦены",      КэшЗначений.ИспользоватьМинимальныеЦены);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		РабочееМесто = МенеджерОборудованияКлиент.РабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	
	ЦенообразованиеКлиент.ПоказатьОповещениеПользователяОКорректировкеЦены(СтруктураПараметры);
	
	РассчитатьСуммуИПроцентСкидкиРаботыЗапасы(Объект, СкидкаСумма, СкидкаПроцент);

	ОбновитьПодвалФормы();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	ОбновитьКартинкуПромокода();
	
КонецПроцедуры

// Функция сравнивает данные расчёта скидок на текущий момент времени с данными последнего расчёт скидок в документе.
// Если скидки изменились, то функция возвращает значение Истина.
//
&НаСервере
Функция СкидкиИзменились()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	
	ЗаполнитьБонуснуюПрограмму(Объект, СтруктураПараметры);	
	ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	
	СкидкиИзменились = Ложь;
	
	КоличествоСтрок = ПримененныеСкидки.ТаблицаСкидкиНаценки.Количество();
	Если КоличествоСтрок <> Объект.СкидкиНаценки.Количество() Тогда
		СкидкиИзменились = Истина;
	Иначе
		
		Если Объект.Запасы.Итог("СуммаАвтоматическойСкидки") <> Объект.СкидкиНаценки.Итог("Сумма") Тогда
			СкидкиИзменились = Истина;
		КонецЕсли;
		
		Если Не СкидкиИзменились Тогда
			Для НомерСтроки = 1 По КоличествоСтрок Цикл
				Если    Объект.СкидкиНаценки[НомерСтроки-1].Сумма <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].Сумма
					ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].КлючСвязи <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].КлючСвязи
					ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].СкидкаНаценка <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].СкидкаНаценка Тогда
					СкидкиИзменились = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СкидкиИзменились Тогда
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат СкидкиИзменились;
	
КонецФункции

&НаСервере
Процедура РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры)
	
	ЗаполнитьБонуснуюПрограмму(Объект, СтруктураПараметры);
	ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	Если ПримененныеСкидки.Свойство("ТаблицаБонусыКНачислению") Тогда
		РаботаСБонусами.ПрименитьРезультатРасчетаБонусовКОбъекту(Объект, ПримененныеСкидки.ТаблицаБонусыКНачислению);
	КонецЕсли;
	
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
	Модифицированность = Истина;
	
	СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект, "Запасы");
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
	
		Объект.СкидкиРассчитаны = Истина;
	
	КонецЕсли;
	
	Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
	Элементы.РаботыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
	ОбновитьВидимостьБонусовКНачислению();
	ОбновитьСостояниеПромокода();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьИнформациюОСкидкахКлиент("Запасы")
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахРаботы(Команда)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьИнформациюОСкидкахКлиент("Работы");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахКлиент(ИмяТЧ)
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		РабочееМесто = МенеджерОборудованияКлиент.РабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
		ТекстВопроса = НСтр("ru='Скидки (наценки) не рассчитаны, рассчитать?'");
		
		ДополнительныеПараметры = Новый Структура("ИмяТЧ", ИмяТЧ); 
		ДополнительныеПараметры.Вставить("СтруктураПараметры", СтруктураПараметры);
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросРассчитатьСкидки", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры, ИмяТЧ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросРассчитатьСкидки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	СтруктураПараметры = ДополнительныеПараметры.СтруктураПараметры;
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры, ДополнительныеПараметры.ИмяТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры, ИмяТЧ)
	
	Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		РассчитатьСкидкиНаценкиКлиент();
	КонецЕсли;
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтотОбъект, "ОповещениеПослеВыбораУправляемыхСкидок");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если (Элемент.ТекущийЭлемент = Элементы.ЗапасыПроцентАвтоматическойСкидки ИЛИ Элемент.ТекущийЭлемент = Элементы.ЗапасыСуммаАвтоматическойСкидки)
		И НЕ ТолькоПросмотр Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьИнформациюОСкидкахКлиент("Запасы");
		
	КонецЕсли;
	
	// Наборы
	СтрокаТабличнойЧасти = Объект.Запасы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если НЕ ТолькоПросмотр И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураНабора) И  
		(Элемент.ТекущийЭлемент = Элементы.ЗапасыНоменклатура ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗапасыХарактеристика ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗапасыКоличество ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗапасыЕдиницаИзмерения ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗапасыКартинкаНабора) Тогда 
		
		СтандартнаяОбработка = Ложь;
		ИмяТабличнойЧасти = "Запасы";
		РедактироватьСоставНабора(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	// Конец Наборы
	
	// Подарочные сертификаты
	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыЦена И Элемент.ТекущийЭлемент.ТолькоПросмотр Тогда
		
		ПоляНоменклатуры = ТипНоменклатурыПроизвольныйНоминал(СтрокаТабличнойЧасти.Номенклатура);
			
		Если ПоляНоменклатуры.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат")
			И ПоляНоменклатуры.ПроизвольныйНоминал Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("УказатьЦенуСертификата", ЭтотОбъект, СтрокаТабличнойЧасти);
			ПоказатьВводЧисла(ОписаниеОповещения, СтрокаТабличнойЧасти.Цена, НСтр(
				"ru = 'Введите стоимость сертификата'"), 15, 2);
			
		КонецЕсли;
			
	КонецЕсли;
	// Конец Подарочные сертификаты
	
	// Прослеживаемость
	СтрокаТабличнойЧасти = Объект.Запасы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Поле = Элементы.ЗапасыРНПТ И СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
		ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Запасы", Ложь);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	Если Поле.Имя = "ЗапасыПрослеживаемыйТовар" Тогда
		ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
		Если ТекущиеДанные.ПрослеживаемыйТовар Тогда
			ПрослеживаемостьФормыКлиентУНФ.ПоказатьПредупреждениеПрослеживаемыйТовар();
		КонецЕсли;
	КонецЕсли;
	
	// Конец Прослеживаемость
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	
	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыОтменен Тогда
			
		СтрокиОбработки = Новый Массив;
		СтрокиОбработки.Добавить(ТекущиеДанные.ПолучитьИдентификатор());
		ОбработатьОтменуТоваров(СтрокиОбработки, "Запасы");
		НастроитьЭлементыОтменыТоваров();

		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыКоличествоОтмены Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		Если СтрокаТабличнойЧасти = Неопределено Тогда 
			Возврат 
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти.КоличествоДоОтмены = 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Количество в текущей строке равно нулю.'");
			Сообщение.КлючДанных = Объект.Ссылка;
			Сообщение.Сообщить();
			Возврат
		КонецЕсли;
		
		ПараметрыОповещения = Новый Структура("СтрокаТабличнойЧасти, АвтоматическиеСкидкиРассчитаны, ИмяТЧ", СтрокаТабличнойЧасти,
		Объект.СкидкиРассчитаны, "Запасы");
		Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуТабличнойЧастиЗавершение", ЭтотОбъект, ПараметрыОповещения);
		
		ПоказатьВводЧисла(Оповещение, СтрокаТабличнойЧасти.Количество, НСтр("ru = 'Введите количество отменяемых товаров, услуг'"),
		15, 3);
		
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыПричинаОтменыДатаЗапрета Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		Если СтрокаТабличнойЧасти = Неопределено Тогда 
			Возврат 
		КонецЕсли;
		
		ПараметрыПричины = Новый Структура("РежимВыбора", Истина);
		ОткрытьФорму("Справочник.ПричиныОтменыЗаказа.ФормаВыбора", ПараметрыПричины, ЭтотОбъект);
		
	КонецЕсли;

	// Остатки и резервы
	ОбработатьВыборЭлементаТабличнойЧасти(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриАктивизацииЯчейки(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат 
	КонецЕсли;
	
	// Прослеживаемость
	Если ЭтоНоваяСтрокаЗапасы
		И Элементы.Запасы.ТекущийЭлемент = Элементы.ЗапасыРНПТ 
		И Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.РНПТ) Тогда
			ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Запасы", Ложь);
	КонецЕсли;
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипНоменклатурыПроизвольныйНоминал(Знач Номенклатура)
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "ТипНоменклатуры, ПроизвольныйНоминал");
КонецФункции

&НаКлиенте
Процедура РаботыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// Наборы
	СтрокаТабличнойЧасти = Объект.Работы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если НЕ ТолькоПросмотр И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураНабора) И  
		(Элемент.ТекущийЭлемент = Элементы.ЗНРаботыНоменклатура ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗНРаботыХарактеристика ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗНРаботыКоличество ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗНРаботыКратность ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗНРаботыКоэффициент ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗНРаботыКартинкаНабора) Тогда 
		   
		СтандартнаяОбработка = Ложь;
		ИмяТабличнойЧасти = "Работы";
		РедактироватьСоставНабора(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	// Конец Наборы
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	
	Если Элемент.ТекущийЭлемент = Элементы.РаботыОтменен Тогда
			
		СтрокиОбработки = Новый Массив;
		СтрокиОбработки.Добавить(ТекущиеДанные.ПолучитьИдентификатор());
		ОбработатьОтменуТоваров(СтрокиОбработки, "Работы");
		НастроитьЭлементыОтменыТоваров();

		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.РаботыКоличествоОтмены Тогда
		
		СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
		Если СтрокаТабличнойЧасти = Неопределено Тогда 
			Возврат 
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти.КоличествоДоОтмены = 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Количество в текущей строке равно нулю.'");
			Сообщение.КлючДанных = Объект.Ссылка;
			Сообщение.Сообщить();
			Возврат
		КонецЕсли;
		
		ПараметрыОповещения = Новый Структура("СтрокаТабличнойЧасти, АвтоматическиеСкидкиРассчитаны, ИмяТЧ", СтрокаТабличнойЧасти,
			Объект.СкидкиРассчитаны, "Работы");
		Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуТабличнойЧастиЗавершение", ЭтотОбъект, ПараметрыОповещения);
		
		ПоказатьВводЧисла(Оповещение, СтрокаТабличнойЧасти.Количество, НСтр("ru = 'Введите количество отменяемых товаров, услуг'"),
		15, 3);
		
	КонецЕсли;
	
	// АвтоматическиеСкидки
	// Размещать в конце процедуры. Возможно перезаполнение табличной части
	Если (Элемент.ТекущийЭлемент = Элементы.ЗНРаботыПроцентАвтоматическойСкидки ИЛИ Элемент.ТекущийЭлемент = Элементы.ЗНРаботыСуммаАвтоматическойСкидки)
		И НЕ ТолькоПросмотр Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьИнформациюОСкидкахКлиент("Работы");
		
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры

&НаСервере
Функция СброситьФлагСкидкиРассчитаныСервер(Действие, КолонкаТЧ = "")
	
	ТребуетсяПересчет = Ложь;
	Если ИспользоватьАвтоматическиеСкидки И (Объект.Запасы.Количество() > 0 ИЛИ Объект.Работы.Количество() > 0) И (Объект.СкидкиРассчитаны ИЛИ УстановленСерыйЦвет) Тогда
		ТребуетсяПересчет = СброситьФлагСкидкиРассчитаны(Действие, КолонкаТЧ);
	КонецЕсли;
	Возврат ТребуетсяПересчет;
	
КонецФункции

&НаКлиенте
Функция СброситьФлагСкидкиРассчитаныКлиент(Действие, КолонкаТЧ = "")
	
	ТребуетсяПересчет = Ложь;
	Если ИспользоватьАвтоматическиеСкидки И (Объект.Запасы.Количество() > 0 ИЛИ Объект.Работы.Количество() > 0) И (Объект.СкидкиРассчитаны ИЛИ УстановленСерыйЦвет) Тогда
		ТребуетсяПересчет = СброситьФлагСкидкиРассчитаны(Действие, КолонкаТЧ);
		Если ТребуетсяПересчет Тогда
			ПодключитьОбработчикОжидания("ОбновитьКартинкиСкидкиРассчитаны", 0.2, Истина);
		КонецЕсли;
	КонецЕсли;
	Возврат ТребуетсяПересчет;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьКартинкиСкидкиРассчитаны()
	СкидкиНаценкиКлиент.ОбновитьКартинкиСкидкиРассчитаны(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция СброситьФлагСкидкиРассчитаны(Действие, КолонкаТЧ = "")
	
	Возврат СкидкиНаценкиСервер.СброситьФлагСкидкиРассчитаны(ЭтотОбъект, Действие, КолонкаТЧ, "Запасы", "Работы");
	
КонецФункции

&НаСервере
Процедура АвтоматическиеСкидкиПриСозданииНаСервере()
	
	УстановленСерыйЦвет = Ложь;
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки");
	Если ИспользоватьАвтоматическиеСкидки Тогда
		Если Объект.Запасы.Количество() = 0 И Объект.Работы.Количество() = 0 Тогда
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.ОбновитьСерый;
			Элементы.РаботыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.ОбновитьСерый;
			УстановленСерыйЦвет = Истина;
		ИначеЕсли НЕ Объект.СкидкиРассчитаны Тогда
			Объект.СкидкиРассчитаны = Ложь;
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.ОбновитьКрасный;
			Элементы.РаботыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.ОбновитьКрасный;
		Иначе
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
			Элементы.РаботыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	
	// ИнтеграцияГосИС
	СобытияФормИСУНФКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "ТабличнаяЧасть", Новый Структура("ПриНачалеРедактирования"));
	// Конец ИнтеграцияГосИС
	
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТабличнойЧасти.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
		СтрокаТабличнойЧасти.Количество = НовоеКоличествоПриИзмененииНоменклатуры;
	КонецЕсли;
	
	// АвтоматическиеСкидки
	Если НоваяСтрока И Копирование И
		(СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки <> 0 ИЛИ СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки <> 0) Тогда
		СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки = 0;
		СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = 0;
		РассчитатьСуммуВСтрокеТабличнойЧасти();
	ИначеЕсли ИспользоватьАвтоматическиеСкидки И НоваяСтрока И Копирование Тогда
		// Автоматические скидки стали неактуальны.
		СброситьФлагСкидкиРассчитаныКлиент("ПриНачалеРедактирования");
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	Если НоваяСтрока И Копирование Тогда
		СтрокаТабличнойЧасти.КлючСвязи = 0;
		СтрокаТабличнойЧасти.СерииНоменклатуры = "";
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти, ,
			НЕ ЗаказНарядВСостоянииВыполнения И КэшЗначений.ПередачаТоваровМеждуОрганизациями);
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "СтруктурнаяЕдиницаРезерв", "ПоложениеСклада");
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "Ячейка", "ПоложениеСклада");
	КонецЕсли; 
	
	// ГрупповоеИзменениеСтрок
	СтрокаТабличнойЧасти.Пометка = Истина;
	// Конец ГрупповоеИзменениеСтрок
	
	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыСерииНоменклатуры Тогда
		ОткрытьПодборСерииНоменклатуры();
	КонецЕсли;	
	
	ЭтоНоваяСтрокаЗапасы = НоваяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПослеВыбораУправляемыхСкидок(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ИДЗамера = неопределено;
	Если НЕ ДополнительныеПараметры = Неопределено И
		ДополнительныеПараметры.Свойство("ИДЗамераПроизводительности", ИДЗамера) Тогда	
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		КлючСвязиАктивацииСкидки = Неопределено;
		Если Не ДополнительныеПараметры.Свойство("КлючСвязи", КлючСвязиАктивацииСкидки) Тогда
			КлючСвязиАктивацииСкидки = 0;
		КонецЕсли;
		Если Результат.СкидкиИзменились Тогда
			СброситьФлагСкидкиРассчитаныКлиент("ВыборУправляемыхСкидок");
		Иначе
			// Пересчитывать скидки не требуется
			Возврат;
		КонецЕсли;
		ВыбранныеСкидки = Неопределено;
		Если Не Результат.Свойство("ВыбранныеУправляемыеСкидки", ВыбранныеСкидки) 
			ИЛИ ВыбранныеСкидки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ЗафиксироватьВыбранныеУправляемыеСкидки(ВыбранныеСкидки, КлючСвязиАктивацииСкидки);
	КонецЕсли;
КонецПроцедуры 

&НаСервере
Процедура ЗафиксироватьВыбранныеУправляемыеСкидки(ВыбранныеСкидки, КлючСвязиТекущейСтроки = 0)
	СкидкиДляУдаления = Новый Массив;
	// Удалим скидки, кроме тех что были активированы для других строк
	Для Каждого СтрокаУправляемойСкидки Из Объект.ВыбранныеУправляемыеСкидки Цикл 
		Если СтрокаУправляемойСкидки.КлючСвязи = 0
			Или СтрокаУправляемойСкидки.КлючСвязи = КлючСвязиТекущейСтроки Тогда
			СкидкиДляУдаления.Добавить(СтрокаУправляемойСкидки);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаУправляемойСкидки ИЗ СкидкиДляУдаления Цикл
		Объект.ВыбранныеУправляемыеСкидки.Удалить(СтрокаУправляемойСкидки);
	КонецЦикла; 
	// Активируем скидки, которые были активированы для данной строки или документа в целом
	Для Каждого Скидка Из ВыбранныеСкидки Цикл
		НоваяУправляемаяСкидка = Объект.ВыбранныеУправляемыеСкидки.Добавить();
		НоваяУправляемаяСкидка.СкидкаНаценка = Скидка;
		Если СкидкиНаценкиСервер.ЭтоУправляемаяСкидкаНаСтроку(Скидка) Тогда
			НоваяУправляемаяСкидка.КлючСвязи = КлючСвязиТекущейСтроки;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтотОбъект);
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнениеОбязательныхРеквизитов(Отказ)
	
	ОбязательныеДляЗаполненияРеквизиты = РегистрыСведений.ОбязательностьЗаполненияРеквизитов.ОбязательныеДляЗаполненияРеквизитыОбъекта("ЗаказНаряд");
	
	Для Каждого Реквизит Из ОбязательныеДляЗаполненияРеквизиты Цикл
				
		Если ЗначениеЗаполнено(Объект[Реквизит]) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(
			ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", 
			"Источник привлечения"),,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Объект[%1]", Реквизит),,
			Отказ);
			
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

&НаКлиенте
Процедура РаботыКопироватьСтроки(Команда)
	КопироватьСтроки("Работы", "Работы");
КонецПроцедуры

&НаКлиенте
Процедура МатериалыКопироватьСтроки(Команда)
	КопироватьСтроки("Материалы", "ЗНМатериалы");
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыКопироватьСтроки(Команда)
	КопироватьСтроки("Запасы", "Запасы");
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаКопироватьСтроки(Команда)
	КопироватьСтроки("МатериалыЗаказчика", "ЗНМатериалыЗаказчика");
КонецПроцедуры

&НаКлиенте
Процедура РаботыВставитьСтроки(Команда)
	ИмяТабличнойЧасти = "Работы";
	ВставитьСтроки("Работы", "Работы");
КонецПроцедуры

&НаКлиенте
Процедура МатериалыВставитьСтроки(Команда)
	
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтотОбъект, "ЗНМатериалы") Тогда
		Возврат;
	КонецЕсли; 
	ВставитьСтроки("Материалы", "ЗНМатериалы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВставитьСтроки(Команда)
	ВставитьСтроки("Запасы", "Запасы");
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаВставитьСтроки(Команда)
	ВставитьСтроки("МатериалыЗаказчика", "ЗНМатериалыЗаказчика");
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ, ИмяЭлемента)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяЭлемента].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, ИмяЭлемента, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ, ИмяЭлемента)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, ИмяЭлемента, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтроки(ИмяТЧ, ИмяЭлемента, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, ИмяЭлемента, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяЭлемента].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, ИмяЭлемента, КоличествоСкопированных, КоличествоВставленных)
	
	ИмяТЧ = Новый Структура("ИмяТЧ,ИмяЭлемента", ИмяТЧ, ИмяЭлемента);
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, ИмяЭлемента, КоличествоВставленных);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	Если ИмяТЧ = "Материалы" Или ИмяТЧ = "Запасы" Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);		
	КонецЕсли;
	
	Если ИмяТЧ = "Запасы"
		ИЛИ ИмяТЧ = "Работы" Тогда
		
		ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, ИмяТЧ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВставленныеСтроки(ИмяТЧ, ИмяЭлемента, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		
		Если ИмяТЧ = "Работы" Тогда
			
			Строка = Объект.Работы[Количество - Итератор];
			ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект, Строка);
			ТабличныеЧастиУНФКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ЗНМатериалы", Строка);
			
			РассчитатьСуммуВСтрокеТабличнойЧасти("Работы", Строка);
			
			// Наборы
			Строка.НоменклатураНабора = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
			Строка.ХарактеристикаНабора = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
			Строка.ДоляСтоимости = 0;
			// Конец Наборы
			
			// Калькуляция
			ОчиститьКалькуляцию();
			// Конец Калькуляция
			
		ИначеЕсли ИмяТЧ = "Материалы" Тогда
			
			Строка = Объект.Материалы[Количество - Итератор];
			Строка.ЯчейкаДоступна = ЯчейкаДоступна(Строка.СтруктурнаяЕдиницаРезерв);
			ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтотОбъект, "ЗНМатериалы", Строка);
			
			Элементы.ЗНМатериалы.ВыделенныеСтроки.Добавить(Строка.ПолучитьИдентификатор());
			
			// Калькуляция
			ОчиститьКалькуляцию();
			// Конец Калькуляция
			
		ИначеЕсли ИмяТЧ = "Запасы" Тогда
			
			Строка = Объект.Запасы[Количество - Итератор];
			Строка.ЯчейкаДоступна = ЯчейкаДоступна(Строка.СтруктурнаяЕдиницаРезерв);
			РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", Строка);
			
			// Наборы
			Строка.НоменклатураНабора = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
			Строка.ХарактеристикаНабора = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
			Строка.ДоляСтоимости = 0;
			// Конец Наборы
			
			// Калькуляция
			ОчиститьКалькуляцию();
			// Конец Калькуляция
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьПодвалФормы();
	ПересчитатьПлатежныйКалендарь();
	ЗаполнитьНомераСтрокТаблицаМатериалы(Объект.Материалы);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, ИмяЭлемента, КоличествоВставленных)
	
	СтрокиКУдалению = Новый Массив;
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		
		Если ТипЗнч(Строка.Номенклатура) = Тип("Строка") Тогда
			СтрокиКУдалению.Добавить(Строка);
			Продолжить;
		КонецЕсли;
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
		СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);

		ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, Строка, СтруктураДанные);

		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		Если ИмяТЧ = "Работы" Тогда
			
			Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
				Строка.Количество = СтруктураДанные.НормаВремени;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Строка.Кратность) Тогда
				Строка.Кратность = 1;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Строка.Коэффициент) Тогда
				Строка.Коэффициент = 1;
			КонецЕсли;
			Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
			
			Строка.ТипНоменклатурыУслуга = СтруктураДанные.ЭтоУслуга;
			
		ИначеЕсли ИмяТЧ = "Запасы" Тогда
			
			Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
			Строка.ТипНоменклатурыЗапас = СтруктураДанные.ЭтоЗапас;
			
			Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
				Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
			КонецЕсли;
			
			// Прослеживаемость
			Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
				Строка.ПрослеживаемыйТовар = СтруктураДанные.ПрослеживаемыйТовар;
				Строка.ПрослеживаемыйКомплект = СтруктураДанные.ПрослеживаемыйКомплект;
				Строка.КодТНВЭД = СтруктураДанные.ТоварнаяНоменклатураВЭД;
			Иначе
				Строка.ПрослеживаемыйТовар = Ложь;
				Строка.ПрослеживаемыйКомплект = Ложь;
				Строка.КодТНВЭД = Неопределено;
			КонецЕсли;
			// КонецПрослеживаемость
			
		ИначеЕсли ИмяТЧ = "МатериалыЗаказчика" Тогда
			
			Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
				Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;  
	
	Если ИмяТЧ = "Работы" Тогда
		ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, ИмяТЧ, Истина);
	ИначеЕсли ИмяТЧ = "Запасы" Тогда
		ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, ИмяТЧ);
	КонецЕсли;
	
	Для каждого Строка Из СтрокиКУдалению Цикл
		Объект[ИмяТЧ].Удалить(Строка);
		КоличествоВставленных = КоличествоВставленных - 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ГрупповоеИзменениеСтрок

&НаКлиенте
Процедура ЗапасыСнятьФлажки(Команда)
	УстановитьПометку("Запасы", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыУстановитьФлажки(Команда)
	УстановитьПометку("Запасы", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменитьСтроки(Команда)
	
	ПоказатьСкрытьПанельРедактирования("Запасы", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВыполнитьДействие(Команда)
	
	ОбработатьТаблицу("Запасы");
	НастроитьОформлениеПанелиРедактирования("Запасы", 4);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыОтменитьИзменения(Команда)
	
	ПоказатьСкрытьПанельРедактирования("Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыСнятьФлажки(Команда)
	УстановитьПометку("Работы", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура РаботыУстановитьФлажки(Команда)
	УстановитьПометку("Работы", Истина);
КонецПроцедуры

&НаКлиенте
Процедура РаботыИзменитьСтроки(Команда)
	
	ПоказатьСкрытьПанельРедактирования("Работы", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыВыполнитьДействие(Команда)
	
	ОбработатьТаблицу("Работы");
	НастроитьОформлениеПанелиРедактирования("Работы", 4);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыОтменитьИзменения(Команда)
	
	ПоказатьСкрытьПанельРедактирования("Работы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменениеСтрокДействиеПриИзменении(Элемент)
	
	ОпределитьОбъектИзменений("Запасы");
	НастроитьОформлениеПанелиРедактирования("Запасы", 2);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменениеСтрокЗначениеПриИзменении(Элемент)
	
	НастроитьОформлениеПанелиРедактирования("Запасы", 3);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыИзменениеСтрокДействиеПриИзменении(Элемент)
	
	ОпределитьОбъектИзменений("Работы");
	НастроитьОформлениеПанелиРедактирования("Работы", 2);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыИзменениеСтрокЗначениеПриИзменении(Элемент)
	
	НастроитьОформлениеПанелиРедактирования("Работы", 3);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометку(ИмяТЧ, Пометка)
	
	НаборЭлементов = НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ);
	НаборЭлементов.КнопкаСнятьФлажки.Видимость = НЕ НаборЭлементов.КнопкаСнятьФлажки.Видимость;
	НаборЭлементов.КнопкаУстановитьФлажки.Видимость = НЕ НаборЭлементов.КнопкаУстановитьФлажки.Видимость;
	
	Для каждого Строка Из Объект[НаборЭлементов.ИмяТЧ] Цикл
		Строка.Пометка = Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСкрытьПанельРедактирования(ИмяТЧ, ИзменяетДанные = Неопределено)
	
	Перем СостояниеПерехода;
	ГрупповоеИзменениеСтрокСервер.ПоказатьСкрытьПанельРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ),
		СостояниеПерехода,
		ИзменяетДанные);
	
	УправлениеРезервнымиКопиямиТаблицы(ИмяТЧ, СостояниеПерехода, ИзменяетДанные);
	УправлениеРезервнымиКопиямиТаблицы("ОтмененныеЗапасы", СостояниеПерехода, ИзменяетДанные);
	НастроитьЭлементыОтменыТоваров();

КонецПроцедуры

&НаСервере
Процедура УправлениеРезервнымиКопиямиТаблицы(ИмяТЧ, СостояниеПерехода, ИзменяетДанные)
	
	Если ИмяТЧ = "Запасы" Тогда
		РеквизитРезервнаяКопияТаблицыАдрес = "ЗапасыРезервнаяКопияТаблицыАдрес";
	ИначеЕсли ИмяТЧ = "Работы" Тогда
		РеквизитРезервнаяКопияТаблицыАдрес = "РаботыРезервнаяКопияТаблицыАдрес";
	ИначеЕсли ИмяТЧ = "ОтмененныеЗапасы" Тогда
		РеквизитРезервнаяКопияТаблицыАдрес = "ОтмененныеЗапасыРезервнаяКопияТаблицыАдрес";
	КонецЕсли;
	
	ГрупповоеИзменениеСтрокСервер.УправлениеРезервнымиКопиями(
		ЭтотОбъект,
		Объект[ИмяТЧ],
		ЭтотОбъект[РеквизитРезервнаяКопияТаблицыАдрес],
		СостояниеПерехода,
		ИзменяетДанные);
	
	Если ИмяТЧ = "Запасы" Тогда
		ГрупповоеИзменениеСтрокСервер.УправлениеРезервнымиКопиями(
			ЭтотОбъект,
			Объект.СерииНоменклатуры,
			ЭтотОбъект.СерииНоменклатурыРезервнаяКопияТаблицыАдрес,
			СостояниеПерехода,
			ИзменяетДанные);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОформлениеПанелиРедактирования(ИмяТЧ, Состояние, СохранитьИзменения = Неопределено)
	
	Если ИмяТЧ = "Запасы" Тогда
		РеквизитЗначение = "ЗапасыИзменениеСтрокЗначение";
	ИначеЕсли ИмяТЧ = "Работы" Тогда
		РеквизитЗначение = "РаботыИзменениеСтрокЗначение";
	КонецЕсли;
	
	ГрупповоеИзменениеСтрокКлиент.НастроитьОформлениеПанелиРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокКлиент(ИмяТЧ),
		Состояние,
		ЭтотОбъект[РеквизитЗначение]);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекущееДействиеИзмененияСтрок()
	
	СохраняемыеНастройки = "";
	
	Если ЗапасыИзменениеСтрокДействие <> ЗапасыИзменениеСтрокДействиеПриОткрытии Тогда
		СохраняемыеНастройки = "Запасы";
	КонецЕсли;
	
	Если РаботыИзменениеСтрокДействие <> РаботыИзменениеСтрокДействиеПриОткрытии Тогда
		Если ЗначениеЗаполнено(СохраняемыеНастройки) Тогда
			СохраняемыеНастройки = СохраняемыеНастройки + ",";
		КонецЕсли;
		СохраняемыеНастройки = СохраняемыеНастройки + "Работы";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СохраняемыеНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьТекущееДействиеИзмененияСтрокСервер(СохраняемыеНастройки);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьТекущееДействиеИзмененияСтрокСервер(СохраняемыеНастройки)
	
	ИменаТЧ = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СохраняемыеНастройки);
	Для каждого ИмяТЧ Из ИменаТЧ Цикл
		ГрупповоеИзменениеСтрокСервер.СохранитьНастройки(НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТаблицу(ИмяТЧ)
	
	Если ИмяТЧ = "Запасы" Тогда
		ВыполненноеДействие = ЗапасыИзменениеСтрокДействие;
		ПримененноеЗначение = ЗапасыИзменениеСтрокЗначение;
	ИначеЕсли ИмяТЧ = "Работы" Тогда
		ВыполненноеДействие = РаботыИзменениеСтрокДействие;
		ПримененноеЗначение = РаботыИзменениеСтрокЗначение;
	КонецЕсли;
	
	// Наборы
	Если ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки") Тогда
		
		ИзменяемыеСтроки = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("Пометка", Истина));
		Если ИзменяемыеСтроки.Количество()=Объект[ИмяТЧ].Количество() Тогда
			// Если выделены все строки - проверки удаления наборов не выполняются
			УдаляемыеНаборы = Новый Массив;
			Для каждого Строка Из ИзменяемыеСтроки Цикл
				Если ЗначениеЗаполнено(Строка.НоменклатураНабора) И УдаляемыеНаборы.Найти(Строка.НоменклатураНабора)=Неопределено Тогда
					УдаляемыеНаборы.Добавить(Строка.НоменклатураНабора);
				КонецЕсли; 
			КонецЦикла;
			Для каждого НоменклатураНабора Из УдаляемыеНаборы Цикл
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("НоменклатураНабора", НоменклатураНабора);
				УдаляемыеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОтбора);
				Для каждого СтрНабора Из УдаляемыеСтроки Цикл
					Объект.ДобавленныеНаборы.Удалить(СтрНабора);
				КонецЦикла; 
			КонецЦикла; 
		Иначе
			Для каждого Строка Из ИзменяемыеСтроки Цикл
				Если ЗначениеЗаполнено(Строка.НоменклатураНабора) Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Действие недоступно для наборов.'");
					Сообщение.Поле = "Объект."+ИмяТЧ;
					Сообщение.Сообщить();
					Возврат;
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	// Конец Наборы
	
	ОбработатьТаблицуНаСервере(ИмяТЧ);
	
	ИзменяемыеСтроки = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("Пометка", Истина));
	Для каждого Строка Из ИзменяемыеСтроки Цикл
		
		Если ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент")
			ИЛИ ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены")
			ИЛИ ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки")
			ИЛИ ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду")
			ИЛИ ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧ, Строка);
			
		ИначеЕсли ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСкидкуСуммой") Тогда
			
			ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(Строка, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
			
			// Ручные скидки
			РассчитатьСуммуИПроцентСкидкиРаботыЗапасы(Объект, СкидкаСумма, СкидкаПроцент);
			// Конец Ручные скидки
			
			// АвтоматическиеСкидки.
			СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти");
			
			Строка.ПроцентАвтоматическойСкидки = 0;
			Строка.СуммаАвтоматическойСкидки = 0;
			// Конец АвтоматическиеСкидки
			
			ОбновитьПодвалФормы();
			
		ИначеЕсли ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
			
			ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(Строка, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
			
		ИначеЕсли ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству")
			ИЛИ ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			
			Если Строка.Количество <> 0 Тогда
				Строка.Цена = Строка.Сумма / Строка.Количество;
			КонецЕсли;
			
			// Скидки.
			Если Строка.ПроцентСкидкиНаценки = 100 Тогда
				Строка.Сумма = 0;
			ИначеЕсли Строка.ПроцентСкидкиНаценки <> 0 И Строка.Количество <> 0 Тогда
				Строка.Сумма = Строка.Сумма * (1 - Строка.ПроцентСкидкиНаценки / 100);
			КонецЕсли;
			
			ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(Строка, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
			
			// АвтоматическиеСкидки.
			СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти");
			
			Строка.ПроцентАвтоматическойСкидки = 0;
			Строка.СуммаАвтоматическойСкидки = 0;
			// Конец АвтоматическиеСкидки
			
			ОбновитьПодвалФормы();
			
		ИначеЕсли ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОтменитьСтроки") Тогда
			
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(Строка.ПолучитьИдентификатор());
			ОбработатьОтменуТоваров(МассивСтрок, ИмяТЧ, ПримененноеЗначение, "ГрупповоеИзменение");

		КонецЕсли;
		
	КонецЦикла;
	
	Если ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОтменитьСтроки") Тогда
		ОтображатьГруппуОтмененных = Истина;
		НастроитьЭлементыОтменыТоваров();
	КонецЕсли;
	
	ПересчитатьПлатежныйКалендарь();
	
	Если ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки")
		ИЛИ ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСкидкуСуммой") Тогда
		
		ГрупповоеИзменениеСтрокКлиент.ОчиститьДействиеЗначение(ВыполненноеДействие, ПримененноеЗначение);
	КонецЕсли;
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьТаблицуНаСервере(ИмяТЧ)
	
	Если ИмяТЧ = "Запасы" Тогда
		
		ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
			ЭтотОбъект,
			Объект.Запасы,
			ЗапасыИзменениеСтрокДействие,
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит,
			ЗапасыИзменениеСтрокЗначение,
			"ЗапасыНоменклатура");
		
		Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
			
			ИзменяемыеСтроки = Объект.Запасы.НайтиСтроки(Новый Структура("Пометка", Истина));
			Для каждого Строка Из ИзменяемыеСтроки Цикл
				
				СтруктураДанные = Новый Структура;
				СтруктураДанные.Вставить("Организация", Объект.Организация);
				СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
				СтруктураДанные.Вставить("Характеристика", Строка.Характеристика);
				СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
				СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
				
				Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
					
					СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
					СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
					СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
					СтруктураДанные.Вставить("Коэффициент", 1);
					СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
					
				КонецЕсли;
				
				// ДисконтныеКарты
				СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
				СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);		
				// Конец ДисконтныеКарты

				ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, Строка, СтруктураДанные);

				СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
				
				Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
				Строка.Спецификация = СтруктураДанные.Спецификация;
				Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
					Строка.Количество = 1;
				КонецЕсли;
				Строка.Цена = СтруктураДанные.Цена;
				Строка.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
				Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
				Строка.Содержание = "";
				
				Строка.ТипНоменклатурыЗапас = СтруктураДанные.ЭтоЗапас;
				
				// Прослеживаемость
				Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
					Строка.ПрослеживаемыйТовар = СтруктураДанные.ПрослеживаемыйТовар;
					Строка.ПрослеживаемыйКомплект = СтруктураДанные.ПрослеживаемыйКомплект;
				Иначе
					Строка.ПрослеживаемыйТовар = Ложь;
					Строка.ПрослеживаемыйКомплект = Ложь;
				КонецЕсли; 
				// Конец Прослеживаемость
				
			КонецЦикла;
			
			// Прослеживаемость
			ОбновитьОтображениеПрослеживаемости();
			// Конец Прослеживаемость
			
		КонецЕсли;
		
		Если ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.ЗаполнитьПоФактическимОстаткамНомераГТД Тогда
			
			НомераГТДЗаполнитьПоФактическимОстаткамНаСервере(Ложь, "Запасы");
			
		КонецЕсли;
		
		Если ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.ПодобратьНомераГТД Тогда
			
			НомераГТДПодобратьНаСервере(Ложь, "Запасы");
			
		КонецЕсли;
		
		Если ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.ОчиститьНомераГТДИСтраныПроисхождения Тогда
			
			ГрузовыеТаможенныеДекларацииСервер.ОчиститьНомераГТДИСтраныПроисхождения(Объект.Запасы);
			
		КонецЕсли;
		
	ИначеЕсли ИмяТЧ = "Работы" Тогда
		
		ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
			ЭтотОбъект,
			Объект.Работы,
			РаботыИзменениеСтрокДействие,
			РаботыИзменениеСтрокОбъектИзмененийРеквизит,
			РаботыИзменениеСтрокЗначение,
			"ЗНРаботыНоменклатура");
		
		Если РаботыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
			
			ИзменяемыеСтроки = Объект.Работы.НайтиСтроки(Новый Структура("Пометка", Истина));
			Для каждого Строка Из ИзменяемыеСтроки Цикл
				
				Строка.Материалы = "";
				Строка.Исполнители = "";
				
				СтруктураДанные = Новый Структура;
				СтруктураДанные.Вставить("Организация", Объект.Организация);
				СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
				СтруктураДанные.Вставить("Характеристика", Строка.Характеристика);
				СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
				СтруктураДанные.Вставить("НормаВремени", 1);
				СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
				
				Если ВидРаботВШапке И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
					СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
					СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
					СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
					СтруктураДанные.Вставить("Коэффициент", 1);
					СтруктураДанные.Вставить("ВидРабот", Объект.ВидРабот);
					СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
				ИначеЕсли (НЕ ВидРаботВШапке) И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
					СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
					СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
					СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
					СтруктураДанные.Вставить("Коэффициент", 1);
					СтруктураДанные.Вставить("ВидРабот", Строка.ВидРабот);
					СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
				КонецЕсли;
				
				// ДисконтныеКарты
				СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
				СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);		
				// Конец ДисконтныеКарты
				
				ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, Строка, СтруктураДанные);

				СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
				
				Строка.Количество = СтруктураДанные.НормаВремени;
				Строка.Кратность = 1; 
				Строка.Коэффициент = 1;
				Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
				Строка.Спецификация = СтруктураДанные.Спецификация;
				Строка.Содержание = "";
				
				Если (ВидРаботВШапке И ЗначениеЗаполнено(Объект.ВидЦен) И СтруктураДанные.Свойство("Цена")) ИЛИ СтруктураДанные.Свойство("Цена") Тогда
					Строка.Цена = СтруктураДанные.Цена;
					Строка.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
				КонецЕсли;
				
				Строка.ТипНоменклатурыУслуга = СтруктураДанные.ЭтоУслуга;
				
				Если Строка <> Неопределено Тогда
					Элементы.ЗНРаботаМатериалы.Доступность = НЕ Строка.ТипНоменклатурыУслуга;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьОбъектИзменений(ИмяТЧ)
	
	Если ИмяТЧ = "Запасы" Тогда
		
		Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "ПроцентСкидкиНаценки";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыПроцентСкидкиНаценки";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "СтавкаНДС";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСтавкаНДС";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСклад") Тогда
			
			ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокОбъектИзмененийРеквизит"] = "СтруктурнаяЕдиницаРезерв";
			ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокОбъектИзмененийЭлемент"] = ИмяТЧ + "СтруктурнаяЕдиницаРезерв";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЯчейку") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Ячейка";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЯчейка";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОтменитьСтроки") Тогда
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "ПричинаОтмены";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент =  "ЗапасыПричинаОтмены";
		КонецЕсли;
		
	ИначеЕсли ИмяТЧ = "Работы" Тогда
		
		Если РаботыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент") Тогда
			
			РаботыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
			РаботыИзменениеСтрокОбъектИзмененийЭлемент = "ЗНРаботыЦена";
			
		ИначеЕсли РаботыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены") Тогда
			
			РаботыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
			РаботыИзменениеСтрокОбъектИзмененийЭлемент = "ЗНРаботыЦена";
			
		ИначеЕсли РаботыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду") Тогда
			
			РаботыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
			РаботыИзменениеСтрокОбъектИзмененийЭлемент = "ЗНРаботыЦена";
			
		ИначеЕсли РаботыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки") Тогда
			
			РаботыИзменениеСтрокОбъектИзмененийРеквизит = "ПроцентСкидкиНаценки";
			РаботыИзменениеСтрокОбъектИзмененийЭлемент = "ЗНРаботыПроцентСкидкиНаценки";
			
		ИначеЕсли РаботыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству") Тогда
			
			РаботыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
			РаботыИзменениеСтрокОбъектИзмененийЭлемент = "ЗНРаботыСумма";
			
		ИначеЕсли РаботыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			
			РаботыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
			РаботыИзменениеСтрокОбъектИзмененийЭлемент = "ЗНРаботыСумма";
			
		ИначеЕсли РаботыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
			
			РаботыИзменениеСтрокОбъектИзмененийРеквизит = "СтавкаНДС";
			РаботыИзменениеСтрокОбъектИзмененийЭлемент = "ЗНРаботыСтавкаНДС";
			
		ИначеЕсли РаботыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки")
			ИЛИ РаботыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
			
			РаботыИзменениеСтрокОбъектИзмененийРеквизит = "";
			РаботыИзменениеСтрокОбъектИзмененийЭлемент = "";
					
		ИначеЕсли РаботыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОтменитьСтроки") Тогда
			
			РаботыИзменениеСтрокОбъектИзмененийРеквизит = "ПричинаОтмены";
			РаботыИзменениеСтрокОбъектИзмененийЭлемент = "РаботыПричинаОтмены";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НаборЭлементовГрупповогоИзмененияСтрокКлиент(ИмяТЧ)
	
	Если ИмяТЧ = "Запасы" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "Запасы");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаЗапасыИзменениеСтрок);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.ЗапасыУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.ЗапасыСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ЗапасыВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.ЗапасыПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.ЗапасыНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.ЗапасыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.ЗапасыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.ЗапасыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         ЗапасыИзменениеСтрокОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(ЗапасыИзменениеСтрокОбъектИзмененийЭлемент), 
		                                                     Элементы[ЗапасыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	ИначеЕсли ИмяТЧ = "Работы" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "Работы");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ЗНГруппаРаботыИзменениеСтрок);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.РаботыУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.РаботыСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.РаботыВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.ЗНРаботыПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.ЗНРаботыНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.РаботыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.РаботыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.РаботыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.РаботыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         РаботыИзменениеСтрокОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(РаботыИзменениеСтрокОбъектИзмененийЭлемент), 
		                                                     Элементы[РаботыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	КонецЕсли;
	
	Возврат НаборЭлементов;
	
КонецФункции

&НаСервере
Функция НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ)
	
	Если ИмяТЧ = "Запасы" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "Запасы");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаЗапасыИзменениеСтрок);
		НаборЭлементов.Вставить("КнопкаИзменитьСтроки",    Элементы.ЗапасыИзменитьСтроки);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.ЗапасыУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.ЗапасыСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ЗапасыВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.ЗапасыПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.ЗапасыНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.ЗапасыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.ЗапасыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.ЗапасыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         ЗапасыИзменениеСтрокОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(ЗапасыИзменениеСтрокОбъектИзмененийЭлемент), 
		                                                     Элементы[ЗапасыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	ИначеЕсли ИмяТЧ = "Работы" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "Работы");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ЗНГруппаРаботыИзменениеСтрок);
		НаборЭлементов.Вставить("КнопкаИзменитьСтроки",    Элементы.РаботыИзменитьСтроки);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.РаботыУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.РаботыСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.РаботыВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.ЗНРаботыПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.ЗНРаботыНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.РаботыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.РаботыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.РаботыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.РаботыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         РаботыИзменениеСтрокОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(РаботыИзменениеСтрокОбъектИзмененийЭлемент), 
		                                                     Элементы[РаботыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	КонецЕсли;
	
	Возврат НаборЭлементов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокДействий(ИмяТЧ, РазрешеноРедактированиеЦенДокументов)
	
	Если ИмяТЧ = "Запасы" Тогда
		
		Действия = Новый Массив;
		Если РазрешеноРедактированиеЦенДокументов Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент);
		КонецЕсли;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду);
		Если РазрешеноРедактированиеЦенДокументов Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству);
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам);
		КонецЕсли;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС);
		Если НЕ СкладВШапке Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСклад);
			Если ПолучитьФункциональнуюОпцию("УчетПоЯчейкам") Тогда
				Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЯчейку);
			КонецЕсли;
		КонецЕсли;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки);
		
		Если ИспользоватьПроцессыСостояний Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОтменитьСтроки);
		КонецЕсли;
		ГрузовыеТаможенныеДекларацииСервер.ЗаполнитьСписокДействий(Действия, Истина, ИмяТЧ);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ЗаполнитьСерииНоменклатуры);
		КонецЕсли;
		
		Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Очистить();
		Для каждого Действие Из Действия Цикл
			ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
			Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
		КонецЦикла;
		
	ИначеЕсли ИмяТЧ = "Работы" Тогда
		
		Действия = Новый Массив;
		Если РазрешеноРедактированиеЦенДокументов Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент);
		КонецЕсли;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду);
		Если РазрешеноРедактированиеЦенДокументов Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству);
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам);
		КонецЕсли;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки);
		
		Если ИспользоватьПроцессыСостояний Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОтменитьСтроки);
		КонецЕсли;
		
		Элементы.РаботыИзменениеСтрокДействие.СписокВыбора.Очистить();
		Для каждого Действие Из Действия Цикл
			ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
			Элементы.РаботыИзменениеСтрокДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АвтоподборКонтактов

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_ОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_АвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, Параметры, Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССериямиНоменклатуры

&НаКлиенте
Процедура ЗапасыСерииНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерииНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерииНоменклатуры()
		
	ТекущиеДанныеИдентификатор = Элементы.Запасы.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыСерийНоменклатуры = ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор);
	
	ОткрытьФорму("Обработка.ПодборСерийНоменклатуры.Форма", ПараметрыСерийНоменклатуры, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборМатериалыСерииНоменклатуры()
	
	ТекущиеДанныеИдентификатор = Элементы.ЗНМатериалы.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыСерийНоменклатуры = ПараметрыПодбораСерийНоменклатурыМатериалы(ТекущиеДанныеИдентификатор);
	
	ОткрытьФорму("Обработка.ПодборСерийНоменклатуры.Форма", ПараметрыСерийНоменклатуры, ЭтотОбъект);

КонецПроцедуры
&НаСервере
Функция ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор)
	
	Возврат СерииНоменклатурыУНФ.ПараметрыПодбораСерийНоменклатуры(Объект, ЭтотОбъект.УникальныйИдентификатор, ТекущиеДанныеИдентификатор, Истина,
		"Запасы", "СерииНоменклатуры", "КлючСвязи");
	
КонецФункции

&НаСервере
Функция ПараметрыПодбораСерийНоменклатурыМатериалы(ТекущиеДанныеИдентификатор) Экспорт
	
	Возврат СерииНоменклатурыУНФ.ПараметрыПодбораСерийНоменклатуры(Объект, ЭтотОбъект.УникальныйИдентификатор, ТекущиеДанныеИдентификатор, Истина,
		"Материалы", "СерииНоменклатурыМатериалы", "КлючСвязиСерииНоменклатуры");
	
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыСерийНоменклатурыМатериалы(ДокОбъект, ТекСтрокаДанные, УИДФормы, ИмяТЧ = "Материалы", ИмяТЧСерийНоменклатуры="СерииНоменклатурыМатериалы") Экспорт
	
	ОтборСерииНоменклатурыТекущейСтроки = Новый Структура("КлючСвязи", ТекСтрокаДанные.КлючСвязиСерииНоменклатуры);
	ОтборСерииНоменклатурыТекущейСтроки = ДокОбъект[ИмяТЧСерийНоменклатуры].НайтиСтроки(ОтборСерииНоменклатурыТекущейСтроки);
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДокОбъект[ИмяТЧСерийНоменклатуры].Выгрузить(ОтборСерииНоменклатурыТекущейСтроки), УИДФормы);
	
	ПараметрыЗапасы = Новый Структура;
	ПараметрыЗапасы.Вставить("КлючСвязи", ТекСтрокаДанные.КлючСвязиСерииНоменклатуры);
	ПараметрыЗапасы.Вставить("Номенклатура", ТекСтрокаДанные.Номенклатура);
	ПараметрыЗапасы.Вставить("Характеристика", ТекСтрокаДанные.Характеристика);
	ПараметрыЗапасы.Вставить("Количество", ТекСтрокаДанные.Количество);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Запасы", ПараметрыЗапасы);
	ПараметрыОткрытия.Вставить("УникальныйИдентификаторФормыВладельца", УИДФормы);
	ПараметрыОткрытия.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	ПараметрыОткрытия.Вставить("ДокСсылка", ДокОбъект.Ссылка);
	
	Если ДокОбъект.Свойство("Организация") Тогда
		ПараметрыОткрытия.Вставить("Организация", ДокОбъект.Организация);
	КонецЕсли; 
	Если ТекСтрокаДанные.Свойство("СтруктурнаяЕдиница") Тогда
		ПараметрыОткрытия.Вставить("СтруктурнаяЕдиница", ТекСтрокаДанные.СтруктурнаяЕдиница);
	ИначеЕсли ДокОбъект.Свойство("СтруктурнаяЕдиница") Тогда
		ПараметрыОткрытия.Вставить("СтруктурнаяЕдиница", ДокОбъект.СтруктурнаяЕдиница);
	КонецЕсли; 		
	Если ТекСтрокаДанные.Свойство("Ячейка") Тогда
		ПараметрыОткрытия.Вставить("Ячейка", ТекСтрокаДанные.Ячейка);
	ИначеЕсли ДокОбъект.Свойство("Ячейка") Тогда
		ПараметрыОткрытия.Вставить("Ячейка", ДокОбъект.Ячейка);
	КонецЕсли; 		
	Если ТекСтрокаДанные.Свойство("ЕдиницаИзмерения") Тогда
		ПараметрыОткрытия.Запасы.Вставить("ЕдиницаИзмерения", ТекСтрокаДанные.ЕдиницаИзмерения);
		Если ТипЗнч(ТекСтрокаДанные.ЕдиницаИзмерения)=Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
		    ПараметрыОткрытия.Запасы.Вставить("Коэффициент", ТекСтрокаДанные.ЕдиницаИзмерения.Коэффициент);
		Иначе
			ПараметрыОткрытия.Запасы.Вставить("Коэффициент", 1);
		КонецЕсли;
	КонецЕсли;
	Если ТекСтрокаДанные.Свойство("Партия") Тогда
		ПараметрыОткрытия.Запасы.Вставить("Партия", ТекСтрокаДанные.Партия);
	Иначе
		ПараметрыОткрытия.Запасы.Вставить("Партия", Справочники.ПартииНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

&НаСервере
Функция ПолучитьСерииНоменклатурыИзХранилища(АдресВоВременномХранилище, КлючСтроки, ПараметрыИменаПолей)
	
	Модифицированность = Истина;
	Возврат СерииНоменклатурыУНФ.ПолучитьСерииНоменклатурыИзХранилища(Объект, АдресВоВременномХранилище, КлючСтроки,
		ПараметрыИменаПолей);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиБиблиотек

// ЭДО
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидЭД()
	
	Элементы.ВидЭД.СписокВыбора.Очистить();
	
	Элементы.ВидЭД.СписокВыбора.Добавить(Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная, НСтр("ru = 'Товарная накладная'"));
	Элементы.ВидЭД.СписокВыбора.Добавить(Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот, НСтр("ru = 'Акт выполненных работ'"));
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ВидЭлектронногоДокумента = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДОНажатие(Элемент, СтандартнаяОбработка)
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект, СтандартнаяОбработка);
КонецПроцедуры
// Конец ЭДО

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено,
	СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

//@skip-check module-unused-method
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-check module-unused-method обработчик ожидания см. ПриОткрытии
&НаКлиенте
Процедура ПоказатьВыборИзКлассификатораКонтактов()
	
	ЭлектроннаяПочтаУНФКлиент.ПоказатьВыборИзКлассификатораКонтактов(ЭтотОбъект, "ЗНКонтрагент");
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ДекорацияСостояниеОригиналаНажатие(Элемент)
	УчетОригиналовПервичныхДокументовКлиент.ОткрытьМенюВыбораСостояния(ЭтотОбъект,Элементы.ДекорацияСостояниеОригинала);
КонецПроцедуры
//Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

#КонецОбласти

#Область Наборы

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаменитьСтрокуДаннымиНабора(Форма, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, СтруктураДанные)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если ИмяТабличнойЧасти="Запасы" Тогда
		СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, СтрокаТабличнойЧасти,
			Форма.ИспользоватьСерииНоменклатурыОстатки);
	КонецЕсли; 
	
	НаборыКлиентСервер.ЗаменитьСтрокуДаннымиНабора(Объект, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, СтруктураДанные); 
		
	// Ручные скидки
	РассчитатьСуммуИПроцентСкидкиРаботыЗапасы(Форма.Объект, Форма.СкидкаСумма, Форма.СкидкаПроцент);
	// Конец Ручные скидки
	
	Если ИмяТабличнойЧасти="Запасы" Тогда
		Элементы.ЗапасыКартинкаНабора.Видимость = Истина;
	ИначеЕсли ИмяТабличнойЧасти="Работы" Тогда
		Элементы.ЗНРаботыКартинкаНабора.Видимость = Истина;
	КонецЕсли;
	
	// Прослеживаемость
	Если Форма.КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
		Для Каждого СтрокаЗапасы Из Объект.Запасы Цикл
			ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(Форма, СтрокаЗапасы);
		КонецЦикла; 
	КонецЕсли; 
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСоставНабора(СтрокаТабличнойЧасти)
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.НоменклатураНабора);
	СтруктураОткрытия.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.ХарактеристикаНабора);
	ДобавленныеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОткрытия);
	СтрокиНабора = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОткрытия);
	Если ДобавленныеСтроки.Количество() = 0 Тогда
		СтруктураОткрытия.Вставить("Количество", 1);
	Иначе
		СтруктураОткрытия.Вставить("Количество", ДобавленныеСтроки[0].Количество);
	КонецЕсли; 
	СтруктураОткрытия.Вставить("СоставНабора", Новый Массив);
	Для каждого Стр Из СтрокиНабора Цикл
		СвойстваСтроки = Новый Структура;
		СвойстваСтроки.Вставить("Номенклатура");
		СвойстваСтроки.Вставить("Характеристика");
		СвойстваСтроки.Вставить("Количество");
		СвойстваСтроки.Вставить("Цена");
		СвойстваСтроки.Вставить("ДоляСтоимости");
		СвойстваСтроки.Вставить("Активная");
		Если ИмяТабличнойЧасти = "Запасы" Тогда
			СвойстваСтроки.Вставить("ЕдиницаИзмерения");
		ИначеЕсли ИмяТабличнойЧасти = "Работы" Тогда
			СвойстваСтроки.Вставить("ФиксированнаяСтоимость");
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(СвойстваСтроки, Стр);
		Если Стр.Свойство("Кратность") Тогда
			СвойстваСтроки.Количество = СвойстваСтроки.Количество * Стр.Кратность;
		КонецЕсли; 
		СвойстваСтроки.Активная = (Стр = СтрокаТабличнойЧасти); 
		СтруктураОткрытия.СоставНабора.Добавить(СвойстваСтроки);
	КонецЦикла;
	ОткрытьФорму("РегистрСведений.СоставНаборов.Форма.ФормаРедактированияСостава", СтруктураОткрытия, ЭтотОбъект, , , , , 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоставНабора(НоменклатураНабора, ХарактеристикаНабора, КоличествоНаборов, ЦенаНабора, СоставНабора)
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("НоменклатураНабора", НоменклатураНабора);
	СтруктураДанных.Вставить("ХарактеристикаНабора", ХарактеристикаНабора);
	СтруктураДанных.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
	СтруктураДанных.Вставить("СоставНабора", СоставНабора);
	СтруктураДанных.Вставить("КоличествоНаборов", КоличествоНаборов);
	СтруктураДанных.Вставить("ЦенаНабора", ЦенаНабора);
	НаборыСервер.ОбновитьСоставНабораВДокументе(СтруктураДанных, Объект);
	ЗаполнитьСлужебныеПоляТабличнойЧасти(Объект.Запасы, Объект.Работы);
	Модифицированность = Истина;

	// АвтоматическиеСкидки.
	СброситьФлагСкидкиРассчитаныСервер("ОбработкаПодбора");
	// Конец АвтоматическиеСкидки
	
	// Ручные скидки
	РассчитатьСуммуИПроцентСкидкиРаботыЗапасы(Объект, СкидкаСумма, СкидкаПроцент);
	// Конец Ручные скидки
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДанныеКартинокНаборов(Запасы, Работы, ДобавленныеНаборы)
	
	ДобавленныеНаборыЗапасы = Новый Массив;
	ДобавленныеНаборыРаботы = Новый Массив;
	Для каждого ДобавленнаяСтрока Из ДобавленныеНаборы Цикл
		Если НЕ ЗначениеЗаполнено(ДобавленнаяСтрока.НоменклатураНабора) Тогда
			Продолжить;
		КонецЕсли; 
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("НоменклатураНабора", ДобавленнаяСтрока.НоменклатураНабора);
		Если Запасы.НайтиСтроки(СтруктураОтбора).Количество()>0 Тогда
			ДобавленныеНаборыЗапасы.Добавить(ДобавленнаяСтрока);
		ИначеЕсли Работы.НайтиСтроки(СтруктураОтбора).Количество()>0 Тогда
			ДобавленныеНаборыРаботы.Добавить(ДобавленнаяСтрока);
		КонецЕсли; 
	КонецЦикла;
	Для каждого Стр Из Запасы Цикл
		Стр.КартинкаНабора = НаборыКлиентСервер.КартинкаНабора(Стр, ДобавленныеНаборыЗапасы);
		Если Стр.КартинкаНабора>5 Тогда
			Стр.КартинкаНабора = ((Стр.КартинкаНабора - 1) % 5) + 1;
		КонецЕсли; 
	КонецЦикла; 
	Для каждого Стр Из Работы Цикл
		Стр.КартинкаНабора = НаборыКлиентСервер.КартинкаНабора(Стр, ДобавленныеНаборыРаботы);
		Если Стр.КартинкаНабора>5 Тогда
			Стр.КартинкаНабора = ((Стр.КартинкаНабора - 1) % 5) + 1;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры
 
&НаСервере
Функция  ХарактеристикиНабора(Номенклатура, Текст)
	
	СтруктураПараметров = Новый Структура();
	Если ПустаяСтрока(Текст) Тогда
		СтруктураПараметров.Вставить("СтрокаПоиска", Неопределено);
	Иначе
		СтруктураПараметров.Вставить("СтрокаПоиска", Текст);
	КонецЕсли; 
	СтруктураПараметров.Вставить("Отбор", Новый Структура);
	СтруктураПараметров.Отбор.Вставить("Владелец", Номенклатура);
	Возврат Справочники.ХарактеристикиНоменклатуры.ПолучитьДанныеВыбора(СтруктураПараметров);
	
КонецФункции

&НаСервере
Процедура ОбновитьЦеныНабора(Идентификатор, ИмяТЧ)
	
	СтрокаТабличнойЧасти = Объект[ИмяТЧ].НайтиПоИдентификатору(Идентификатор);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("СброситьФлагСкидкиРассчитаны", Истина);
	ПараметрыРасчета.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	
	КоличествоНаборов = КоличествоНаборов(СтрокаТабличнойЧасти.НоменклатураНабора, СтрокаТабличнойЧасти.ХарактеристикаНабора);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.НоменклатураНабора);
	СтруктураОтбора.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.ХарактеристикаНабора);
	СтрокиНабора = Объект[ИмяТЧ].НайтиСтроки(СтруктураОтбора); 
	
	СоставНабора = Новый Массив;
	Колонки = Объект.Работы.Выгрузить().Колонки;
	ЦенаНабора = 0;
	Для каждого СтрокаНабора Из СтрокиНабора Цикл
		СтрокаСостава = Новый Структура;
		Для каждого Колонка Из Колонки Цикл
			СтрокаСостава.Вставить(Колонка.Имя, СтрокаНабора[Колонка.Имя]);
		КонецЦикла; 
		Если ИмяТЧ = "Работы" Тогда
			Если Объект.ПоложениеВидаРабот = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти 
				И НЕ СтрокаСостава.ФиксированнаяСтоимость Тогда
				СтрокаСостава.Вставить("ОригинальнаяНоменклатура", СтрокаСостава.Номенклатура);
				СтрокаСостава.Вставить("ОригинальнаяХарактеристика", СтрокаСостава.Характеристика);
				СтрокаСостава.Вставить("Номенклатура", СтрокаСостава.ВидРабот);
				СтрокаСостава.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			КонецЕсли; 
			СтрокаСостава.Вставить("ЕдиницаИзмерения", Справочники.КлассификаторЕдиницИзмерения.шт);
			СтрокаСостава.Количество = СтрокаСостава.Количество * СтрокаСостава.Кратность * СтрокаСостава.Коэффициент;
		КонецЕсли;
		ЦенаНабора = ЦенаНабора + СтрокаСостава.Цена * СтрокаСостава.Количество;
		СоставНабора.Добавить(СтрокаСостава);
	КонецЦикла;
	СпособРасчетаЦен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.НоменклатураНабора,
		"СпособРасчетаЦеныНабора", Истина);
	Если СпособРасчетаЦен <> Перечисления.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих И ЦенаНабора > 0 И КоличествоНаборов > 0 Тогда
		// Не обновляем зафиксированную цену набора при изменении состава
		ЦенаНабора = ЦенаНабора / КоличествоНаборов;
	Иначе
		ЦенаНабора = 0;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.НоменклатураНабора);
	СтруктураДанных.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.ХарактеристикаНабора);
	СтруктураДанных.Вставить("СоставНабора", СоставНабора);
	СтруктураДанных.Вставить("КоличествоНаборов", КоличествоНаборов);
	СтруктураДанных.Вставить("ЦенаНабора", ЦенаНабора);
	НаборыСервер.ОбновитьЦеныСоставаНабора(СтруктураДанных, Объект);
	
	Для каждого ЭлементСостава Из СоставНабора Цикл
		Если ЭлементСостава.Свойство("ОригинальнаяНоменклатура") Тогда
			ЭлементСостава.Номенклатура = ЭлементСостава.ОригинальнаяНоменклатура;
		КонецЕсли; 
		Если ЭлементСостава.Свойство("ОригинальнаяХарактеристика") Тогда
			ЭлементСостава.Характеристика = ЭлементСостава.ОригинальнаяХарактеристика;
		КонецЕсли; 
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.НоменклатураНабора);
		СтруктураОтбора.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.ХарактеристикаНабора);
		СтруктураОтбора.Вставить("Номенклатура", ЭлементСостава.Номенклатура);
		СтруктураОтбора.Вставить("Характеристика", ЭлементСостава.Характеристика);
		Если Колонки.Найти("ЕдиницаИзмерения") <> Неопределено Тогда
			СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЭлементСостава.ЕдиницаИзмерения);
		КонецЕсли; 
	    СтрокиТЧ = Объект[ИмяТЧ].НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаТабличнойЧасти Из СтрокиТЧ Цикл
			СтрокаТабличнойЧасти.Цена = ЭлементСостава.Цена;
			ТабличныеЧастиУНФКлиентСервер.РассчитатьСуммыВСтрокеТЧ(СтрокаТабличнойЧасти, ПараметрыРасчета);
		КонецЦикла;
	КонецЦикла;

	// АвтоматическиеСкидки.
	СброситьФлагСкидкиРассчитаныСервер("ОбработкаПодбора");
	// Конец АвтоматическиеСкидки
					
КонецПроцедуры

&НаСервере
Функция КоличествоНаборов(НоменклатураНабора, ХарактеристикаНабора, НомерВариантаКП = Неопределено)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("НоменклатураНабора", НоменклатураНабора);
	СтруктураОтбора.Вставить("ХарактеристикаНабора", ХарактеристикаНабора);
	Если НомерВариантаКП<>Неопределено Тогда
		СтруктураОтбора.Вставить("НомерВариантаКП", НомерВариантаКП);
	КонецЕсли; 
	ДобавленныеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОтбора);
	Если ДобавленныеСтроки.Количество()=0 Тогда
		Возврат 0;
	Иначе
		Возврат ДобавленныеСтроки[0].Количество;
	КонецЕсли; 
	
КонецФункции
 
#КонецОбласти 

#Область УчетОригиналовПервичныхДокументов

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ИзменитьСостояниеОригинала(Команда)
	УчетОригиналовПервичныхДокументовУНФКлиент.ИзменитьСостояниеОригинала(Команда, ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ПечатьЧековККМ

&НаКлиенте
Процедура НапечататьЧек(Команда)
	
	Если Объект.ВалютаДокумента <> УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту() Тогда
		ТекстСообщения = НСтр("ru = 'Валюта документа отличается от национальной.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат
	КонецЕсли;
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на оборудовании.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
		
	ЕстьПартииБезВладельца = ВТабличнойЧастиЕстьКомиссионнаяПартияБезВладельца();
	
	Если ЕстьПартииБезВладельца Тогда
		ТекстСообщения = НСтр("ru = 'В табличной части есть комиссионные партии в которых не указан владелец. Печать чека невозможна.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат
	КонецЕсли;
		
	Если ПечатьДокументовУНФКлиент.ПечатьЧекаНевозможна(ЭтотОбъект, НСтр("ru = 'Не удалось провести документ'")) Тогда
		Возврат;
	КонецЕсли;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключенияФискальногоРегистратораЗавершение", ЭтотОбъект);
		МассивОборудования = Новый Массив;
		МассивОборудования.Добавить("ФискальныйРегистратор");
		МассивОборудования.Добавить("ККТ");
		ОтборОборудования = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();
		ОтборОборудования.Вставить("ТипыПО", МассивОборудования);
		ОтборОборудования.Вставить("Организация", Объект.Организация);
		МенеджерОборудованияКлиент.ВыбратьУстройство(ОписаниеОповещения, ОтборОборудования,
				НСтр("ru='Выберите оборудование'"), НСтр("ru='Оборудование не подключено.'"));
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // НапечататьЧек()

&НаСервере
Функция ВТабличнойЧастиЕстьКомиссионнаяПартияБезВладельца()
	
	Возврат РаботаСКомиссионерамиКомитентамиСервер.ВТабличнойЧастиЕстьКомиссионнаяПартияБезВладельца(Объект);
	
КонецФункции

&НаСервере
Функция ПодготовитьДанныеДляПробитияЧека(ИдентификаторУстройстваФР) 
	
	Возврат РозничныеПродажиСервер.ПолучитьДанныеДляФискализации(Объект.Ссылка, ИдентификаторУстройстваФР);
	
КонецФункции // ПодготовитьДанныеДляПробитияЧека()

&НаКлиенте
Процедура ПодключенияФискальногоРегистратораЗавершение(РезультатВыбора, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		ИдентификаторУстройстваФР = РезультатВыбора.ИдентификаторУстройства;
	КонецЕсли;
	
	Если ИдентификаторУстройстваФР = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры = ПодготовитьДанныеДляПробитияЧека(ИдентификаторУстройстваФР);
	
	Если ОбщиеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры.ДатаВремя = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбщиеПараметры", ОбщиеПараметры);
	ДополнительныеПараметры.Вставить("ИдентификаторУстройстваФР", ИдентификаторУстройстваФР);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверитьКодМаркировкиСредствамиККТЗавершение", ЭтотОбъект,
		ДополнительныеПараметры);
	РозничныеПродажиКлиент.ПроверитьКодМаркировкиСредствамиККТ(ОбщиеПараметры, ЭтотОбъект, НСтр("ru = 'Пробить чек'"),
		ОповещениеОЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКодМаркировкиСредствамиККТЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ШтрихкодированиеИСМПКлиент.РезультатПроверкиСредствамиККТТребуетФискализации(Результат)
		И ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ОбщиеПараметры") Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПробитьЧекЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
			Оповещение,
			УникальныйИдентификатор,
			ДополнительныеПараметры.ИдентификаторУстройстваФР,
			ДополнительныеПараметры.ОбщиеПараметры);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		
		// Установить полученное значение номера чека реквизиту документа.
		Объект.НомерСменыККМ = РезультатВыполнения.НомерСменыККТ;
		Объект.НомерЧекаККМ = РезультатВыполнения.НомерЧекаККТ;
		Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		Если НЕ ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
			Объект.НомерЧекаККМ = 1;
		КонецЕсли;
		
		Модифицированность = Истина;
		
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		
	Иначе
		
		ТекстСообщения = СтрШаблон(НСтр(
		"ru = 'При печати чека произошла ошибка.
		|Чек не напечатан на фискальном регистраторе.
		|Дополнительное описание:
		|%1'"), РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	УстановитьДоступностьПечатиЧека();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПечатиЧека()
	
	ИспользоватьПО = ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование");
	ВидОперацииПодразумеваетЧек = Объект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд;
	Если ИспользоватьПО
		И НЕ ТолькоПросмотр
		И ВидОперацииПодразумеваетЧек Тогда
		НапечататьЧекВидимость = Истина;
	Иначе
		НапечататьЧекВидимость = Ложь;
	КонецЕсли;
	
	Элементы.НомерЧекаККМ.Видимость = ВидОперацииПодразумеваетЧек;
	Элементы.НапечататьЧек.Видимость = НапечататьЧекВидимость;
	Элементы.ГруппаОтправкаЧека.Видимость = НапечататьЧекВидимость;
	Элементы.ПредварительныйПросмотрЧека.Видимость = НапечататьЧекВидимость;
	Элементы.ПодписьКассира.Видимость = НапечататьЧекВидимость;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПовторнаяПечатьЧека",
		"Видимость",
		ИспользоватьПО);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПечатиЧека()
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		Элементы.ГруппаОтправкаЧека.Доступность = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПовторнаяПечатьЧека",
		"Доступность",
		Объект.НомерЧекаККМ <> 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонАдресЭППриИзменении(Элемент)
	
	УправлениеНебольшойФирмойКлиент.УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП);
	
КонецПроцедуры

&НаСервере
Функция ПоляКИДляОтправкиЧека()
	
	ПоляКИ = Новый Соответствие;
	ПоляКИ.Вставить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Элементы.АдресЭП.Имя);
	ПоляКИ.Вставить(Перечисления.ТипыКонтактнойИнформации.Телефон, Элементы.Телефон.Имя);
	
	Возврат ПоляКИ;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоляКИДляОтправкиЧекаПоУмолчанию(ДанныеКИ)
	
	Если ДанныеКИ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.АдресЭП = ДанныеКИ.Получить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Объект.Телефон = ДанныеКИ.Получить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНМатериалыПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ЗНМатериалы.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура)
		Тогда
		ТекстСообщения = НСтр("ru = 'Для выбора партии необходимо заполнить номенклатуру.'");
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	ДоступныеСтатусы = Новый Массив;
	ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ДавальческоеСырье"));
	
	ПараметрыОтбора = Новый Структура("Владелец, Статус",ТекущиеДанные.Номенклатура, ДоступныеСтатусы);
	
	ПараметрыВыбораПартии = Новый Структура("ОперацияДокумента, Отбор, РежимВыбора",, ПараметрыОтбора, Истина);
	
	ОткрытьФорму("Справочник.ПартииНоменклатуры.ФормаСписка",ПараметрыВыбораПартии, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область Взаиморасчеты

&НаКлиенте
Процедура СпособЗачетаПредоплатыПриИзменении(Элемент)
	СпособЗачетаПредоплатыПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СпособЗачетаПредоплатыПриИзмененииНаСервере()
	РасчетыРаботаСФормамиВызовСервера.СпособЗачетаПредоплатыПриИзмененииНаСервере(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ВариантЗаполненияРасшифровкиПриИзмененииНаСервере(ПриСозданииНаСервере = Ложь)
	РасчетыРаботаСФормамиВызовСервера.ВариантЗаполненияРасшифровкиПриИзмененииНаСервере(ЭтотОбъект, ПриСозданииНаСервере);
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаполненияРасшифровкиПриИзменении(Элемент)
	ВариантЗаполненияРасшифровкиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПросмотра(Команда)
	ЗаполнитьТаблицуПросмотраНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПросмотраНаКлиенте()
	Если Элементы.ЗНСтраницы.ТекущаяСтраница = Элементы.ЗНГруппаПредоплата
		И Элементы.СтраницыРасчетовСКонтрагентом.ТекущаяСтраница = Элементы.СтраницаПросмотр Тогда
		ЗаполнитьТаблицуПросмотраНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПросмотраНаСервере()
	РасчетыРаботаСФормамиВызовСервера.ЗаполнитьТаблицуПросмотраНаСервере(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникЗачетаПредоплаты(Команда) Экспорт
	
	Если Объект.Контрагент.Пустая() Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите вначале контрагента.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите вначале договор контрагента.'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая()
		ИЛИ Объект.Дата <> ДатаПриСозданииНаСервере Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗаписатьИОткрытьФормуРаспределенияПлатежа", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, 
		НСтр("ru = 'Перед открытием помощника данные будут записаны.
					|Продолжить?'"),
		РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФормуРаспределенияПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИОткрытьФормуРаспределенияПлатежа(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Записать();
		Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
			Возврат; // Запись не удалась, сообщения о причинах выводит платформа.
		КонецЕсли;
		ОткрытьФормуРаспределенияПлатежа();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРаспределенияПлатежа()
	
	СтруктураПараметров = Новый Структура();
	СтруктураАдресов = ПолучитьСтруктуруАдресовВХранилище();
	СтруктураПараметров.Вставить("СтруктураАдресов", СтруктураАдресов);
	
	СоответствиеИменТЧИРеквизитовДляИтогов = Новый Соответствие;
	СоответствиеИменТЧИРеквизитовДляИтогов.Вставить("Запасы", "Всего");
	СоответствиеИменТЧИРеквизитовДляИтогов.Вставить("Работы", "Всего");
	СтруктураПараметров.Вставить("СоответствиеИменТЧИРеквизитовДляИтогов", СоответствиеИменТЧИРеквизитовДляИтогов);
	СтруктураПараметров.Вставить("СоответствиеИменТЧИРеквизитаЗаказ", ПолучитьСоответствиеИменТЧИРеквизитаЗаказ());
	СтруктураПараметров.Вставить("ВалютаРасчетов", ВалютаРасчетов);
	СтруктураПараметров.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("ЭтоЗаказНаряд", Истина);
	СтруктураПараметров.Вставить("ЭтоРасчетыСПоставщиком", Ложь);
	
	РасчетыРаботаСФормамиКлиент.ОткрытьФормуРаспределенияСуммыПлатежа(Ложь, ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруАдресовВХранилище()
	
	СтруктураДляВозврата = Новый Структура();
	
	ТаблицаПредоплата = Объект.Предоплата.Выгрузить();
	ТаблицаПредоплата.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	Для Каждого ТекущаяСтрока Из ТаблицаПредоплата Цикл
		Если НЕ ТекущаяСтрока.ЭтоПредоплатаБезЗаказа Тогда
			ТекущаяСтрока.Заказ = Объект.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДляВозврата.Вставить("АдресРасшифровкаПлатежаВХранилище",
		ПоместитьВоВременноеХранилище(
			ТаблицаПредоплата,
			УникальныйИдентификатор));
	
	СтруктураДляВозврата.Вставить("АдресТаблицаДокументовДляИзмененияВХранилище",
		ПоместитьВоВременноеХранилище(
			ТаблицаДокументовДляИзменения.Выгрузить(),
			УникальныйИдентификатор));
	
	// Суммы в разрезе заказов.
	ТЗЗаказыИСуммы = РасчетыРаботаСФормамиВызовСервера.ПолучитьПустуюТЗЗаказыИСуммы();
	Для Каждого ТекущаяСтрока Из Объект.Запасы Цикл
		НоваяСтрока = ТЗЗаказыИСуммы.Добавить();
		НоваяСтрока.Заказ = Объект.Ссылка;
		НоваяСтрока.Всего = ТекущаяСтрока.Всего;
	КонецЦикла;
	Для Каждого ТекущаяСтрока Из Объект.Работы Цикл
		НоваяСтрока = ТЗЗаказыИСуммы.Добавить();
		НоваяСтрока.Заказ = Объект.Ссылка;
		НоваяСтрока.Всего = ТекущаяСтрока.Всего;
	КонецЦикла;
	ТЗЗаказыИСуммы.Свернуть("Заказ", "Всего");
	СтруктураДляВозврата.Вставить("АдресТаблицаЗаказыИСумма",
		ПоместитьВоВременноеХранилище(
			ТЗЗаказыИСуммы,
			УникальныйИдентификатор));
	
	Возврат СтруктураДляВозврата;
	
КонецФункции // ПоместитьРасшифровкаПлатежаВХранилище()

&НаКлиенте
Процедура РаспределитьСуммуПлатежаПослеРаспределения(РезультатЗакрытия, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") И РезультатЗакрытия.Свойство("ДеревоРаспределенияСуммыПлатежа") Тогда
		
		РасчетыРаботаСФормамиКлиент.РаспределитьСуммуПлатежаПослеРаспределения(ЭтотОбъект, РезультатЗакрытия, ДопПараметры);
		
		РаспределитьСуммуПлатежаПослеРаспределенияЗавершение();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьСуммуПлатежаПослеРаспределенияЗавершение()
	
	РасчетыРаботаСФормамиВызовСервера.РаспределитьСуммуПлатежаПослеРаспределенияЗавершение(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ЗаполнитьТаблицуПросмотраНаКлиенте();
	
	Если ТекущаяСтраница.Имя = "ЗНГруппаРесурсыПредприятия" Тогда
		УстановитьДоступностьПовторов(Истина);
		ЗаполнитьДанныеТаблицыРесурсовНаФорме();
	КонецЕсли;
	
	Если ТребуетсяОбновлениеТЧПоОстаткамМатериалы Или ТребуетсяОбновлениеТЧПоОстаткамЗапасы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
	Если ТекущаяСтраница.Имя = "ЗНГруппаДоставка" Тогда	
		УстановитьВидимостьДанныхПоДоставке();
	КонецЕсли;
	
	Если ТекущаяСтраница.Имя = "ЗНГруппаРаботы" ИЛИ ТекущаяСтраница.Имя = "ЗНГруппаЗапасы" Тогда
		НастроитьЭлементыОтменыТоваров();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьСоответствиеИменТЧИРеквизитаЗаказ()
	
	СоответствиеИменТЧИРеквизитаЗаказ = Новый Соответствие;
	СоответствиеИменТЧИРеквизитаЗаказ.Вставить("Запасы", "Заказ");
	СоответствиеИменТЧИРеквизитаЗаказ.Вставить("Работы", "Заказ");
	Возврат СоответствиеИменТЧИРеквизитаЗаказ;
	
КонецФункции

&НаСервере
Процедура ВзаиморасчетыПриСозданииНаСервере()
	
	ВидОперацииПомощника = ВидОперацииЗаказНаряд;
	Если Объект.Ссылка.Пустая() Тогда
		Если Объект.ВидОперации = ВидОперацииЗаказНаряд Тогда
			Объект.СпособЗачетаПредоплаты = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляДоговора(Объект.Договор, Объект.Контрагент, Истина);
		Иначе
			Объект.СпособЗачетаПредоплаты = СпособыЗачетаВручную;
		КонецЕсли;
	ИначеЕсли Объект.СпособЗачетаПредоплаты.Пустая() Тогда
		Объект.СпособЗачетаПредоплаты = СпособыЗачетаВручную;
	КонецЕсли;
	ВариантЗаполненияРасшифровки = РасчетыРаботаСФормамиВызовСервера.ПолучитьВариантЗаполненияРасшифровкиДляДокументаОтгрузки(Объект.Проведен, Объект.СпособЗачетаПредоплаты);
	ИстинаПриСозданииНаСервере = Истина;
	ВариантЗаполненияРасшифровкиПриИзмененииНаСервере(ИстинаПриСозданииНаСервере);
	
	РасчетыРаботаСФормамиВызовСервера.ЗаполнитьРеквизитыРасчетов(ЭтотОбъект, СтруктураПараметровРасчетов, Неопределено, Истина);
	
	РасчетыРаботаСФормамиВызовСервера.СпособЗачетаПредоплатыПриИзмененииНаСервере(ЭтотОбъект);
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	Элементы.ЗНГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокОплаты(Объект.СпособЗачетаПредоплаты, Объект.Предоплата);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДляПросмотраОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	РасчетыРаботаСФормамиКлиент.ТаблицаДляПросмотраОбработкаРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка, СтруктураПараметровРасчетов, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаЗаказПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Предоплата.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.ЭтоПредоплатаБезЗаказа = (ТекущиеДанные.ЗаказСтрока <> "<текущий документ>");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОстаткиИРезервы

&НаКлиенте
Процедура ЗаполнитьСкладВТабличныхЧастях()
	
	Для Каждого СтрокаТЧ Из Объект.Запасы Цикл
		СтрокаТЧ.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
		СтрокаТЧ.Ячейка = Объект.Ячейка;
		СтрокаТЧ.ДокументПоступления = Неопределено;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Объект.Материалы Цикл
		СтрокаТЧ.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
		СтрокаТЧ.Ячейка = Объект.Ячейка;
		СтрокаТЧ.ДокументПоступления = Неопределено;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОстаткиИРезервы(Команда)
	
	УстановитьВидимостьОтПользовательскихНастроек(Объект, ЭтотОбъект);
	
	РежимОстаткиИРезервы = Не РежимОстаткиИРезервы;
	Элементы.ОстаткиИРезервы.Пометка = РежимОстаткиИРезервы;
	Элементы.ОстаткиИРезервыМатериалы.Пометка = РежимОстаткиИРезервы;
	
	Элементы.ЗапасыКонтекстноеМенюОтменитьТоварыУслугиЗапасыРезервы.Видимость = РежимОстаткиИРезервы;
	Элементы.ЗапасыКонтекстноеМенюОтменитьТоварыУслуги.Видимость = НЕ РежимОстаткиИРезервы;
		
	Элементы.ЗапасыИзменитьРезервОчиститьРезерв.Заголовок = ?(ЗаказНарядВСостоянииВыполнения, "Очистить ""Из резерва""" ,"Очистить ""В резерв""");
	Элементы.МатериалыИзменитьРезервОчиститьРезерв.Заголовок = ?(ЗаказНарядВСостоянииВыполнения, "Очистить ""Из резерва""" ,"Очистить ""В резерв""");
	Элементы.МатериалыИзменитьРезервОчиститьРезервДляВсех.Заголовок = ?(ЗаказНарядВСостоянииВыполнения, "Очистить ""Из резерва"" для всех работ" ,"Очистить ""В резерв"" для всех работ");
	
	ИмяТЧ = ТекущееИмяТабличнойЧастиДляОстатковИРезервов();
	
	Если СкладВШапке Тогда
		Для каждого Строка Из Объект.Запасы Цикл
			Если НЕ Строка.ТипНоменклатурыЗапас 
				Или ЗначениеЗаполнено(Строка.СтруктурнаяЕдиницаРезерв) Тогда
				Продолжить;
			КонецЕсли; 
			Строка.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
		КонецЦикла;
	КонецЕсли; 
	
	Если РежимОстаткиИРезервы Тогда
		
		Если ИмяТЧ = "Запасы" Тогда
			
			Если Элементы.РежимГТДЗапасы.Пометка Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РежимГТДЗапасы", "Пометка", НЕ Элементы.РежимГТДЗапасы.Пометка);
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РежимГТДЗапасыКонтекст", "Пометка", НЕ Элементы.РежимГТДЗапасыКонтекст.Пометка);
				ИзменитьРежимРаботаГТД(Элементы.РежимГТДЗапасы.Пометка, "Запасы");
			КонецЕсли;
		
			ТребуетсяОбновлениеТЧПоОстаткамМатериалы = РежимОстаткиИРезервы И Объект.ИспользоватьМатериалы;
		ИначеЕсли ИмяТЧ = "Материалы" Тогда
			
			Если Элементы.ЗНМатериалыРежимГТДМатериалы.Пометка Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗНМатериалыРежимГТДМатериалы", "Пометка", НЕ Элементы.ЗНМатериалыРежимГТДМатериалы.Пометка);
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗНМатериалыРежимГТДМатериалыКонтекст", "Пометка", НЕ Элементы.ЗНМатериалыРежимГТДМатериалыКонтекст.Пометка);
				ИзменитьРежимРаботаГТД(Элементы.ЗНМатериалыРежимГТДМатериалы.Пометка, "ЗНМатериалы");
			КонецЕсли;
			
			ТребуетсяОбновлениеТЧПоОстаткамЗапасы = РежимОстаткиИРезервы И Объект.ИспользоватьТовары;
		Иначе
			Возврат;
		КонецЕсли;
		
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	Иначе
		ТребуетсяОбновлениеТЧПоОстаткамМатериалы = Ложь;
		ТребуетсяОбновлениеТЧПоОстаткамЗапасы = Ложь;
		ПроверитьПоложениеСклада();
		ОтменитьОтбор(Истина);
	КонецЕсли;
	
	ОбновитьОтображениеКолонокВРазрезеЗапасов(,Не РежимОстаткиИРезервы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборЭлементаТабличнойЧасти(Элемент)
	
	ИмяТЧ = Элементы.ЗНСтраницы.ТекущаяСтраница.Имя;
	
	Если ИмяТЧ = "ЗНГруппаЗапасы" Или (ИмяТЧ = "ЗНГруппаРаботы" И Элементы.ЗНМатериалы.Видимость) Тогда
		ИмяТЧ = ?(ИмяТЧ = "ЗНГруппаЗапасы", "Запасы", "Материалы");
		
		Если ИмяТЧ = "Материалы" Тогда 
			ИмяТЧФорма = "ЗНМатериалы";
		Иначе
			ИмяТЧФорма = "Запасы" 
		КонецЕсли;
		
	Иначе
		Возврат
	КонецЕсли;
	
	ТекущиеДанные = Элементы[ИмяТЧФорма].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Номенклатура = ТекущиеДанные.Номенклатура;
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда Возврат КонецЕсли;
	
	Характеристика = ТекущиеДанные.Характеристика;
	Партия = ТекущиеДанные.Партия;
	
	СтруктурнаяЕдиницаОбъекта = ?(ЗаказНарядВСостоянииВыполнения, Объект.СтруктурнаяЕдиницаПродажи, Объект.СтруктурнаяЕдиницаРезерв);
	
	Склад = ?(ЗначениеЗаполнено(ТекущиеДанные.СтруктурнаяЕдиницаРезерв), ТекущиеДанные.СтруктурнаяЕдиницаРезерв, СтруктурнаяЕдиницаОбъекта);
	
	ПараметрыОтбораДокументов = Новый Структура;
	ПараметрыОтбораДокументов.Вставить("ОрганизацияОбъекта", Объект.Организация);
	ПараметрыОтбораДокументов.Вставить("Номенклатура", Номенклатура);
	ПараметрыОтбораДокументов.Вставить("Характеристика", Характеристика);
	ПараметрыОтбораДокументов.Вставить("Партия", Партия);
	ПараметрыОтбораДокументов.Вставить("Склад", Склад);
	ПараметрыОтбораДокументов.Вставить("ЕдиницаИзмерения", ТекущиеДанные.ЕдиницаИзмерения);
	ПараметрыОтбораДокументов.Вставить("ЗаказПокупателя", Объект.Ссылка);
	ПараметрыОтбораДокументов.Вставить("НомерВариантаКП", 0);
	ПараметрыОтбораДокументов.Вставить("КакВЗаказеПокупателя");
	ПараметрыОтбораДокументов.Вставить("ВидыЗаполненияПоЗаказНаряду");
	
	ВидыЗаполненияПоЗаказНаряду = Новый Структура("КакВЗаказеПокупателя, КакВРасходнойНакладной");
	ВидыЗаполненияПоЗаказНаряду.КакВЗаказеПокупателя = Не ЗаказНарядВСостоянииВыполнения;
	ВидыЗаполненияПоЗаказНаряду.КакВРасходнойНакладной = ЗаказНарядВСостоянииВыполнения;
	
	ПараметрыОтбораДокументов.ВидыЗаполненияПоЗаказНаряду = ВидыЗаполненияПоЗаказНаряду;
	
	СтруктурнаяЕдиницаРезервРасход = ИмяТЧ + "СтруктурнаяЕдиницаРезервРасход";
	ВРезервеВсего = ИмяТЧ + "ВРезервеВсего";
	ОстатокОбщий = ?(Не ЗаказНарядВСостоянииВыполнения, ИмяТЧ + "ОстатокОбщий", ИмяТЧ + "ОстатокОбщийРасход");
	СтруктурнаяЕдиницаРезервЗаказ = ИмяТЧ + "СтруктурнаяЕдиницаРезервЗаказ";
	Зарезервировано = ИмяТЧ + "Зарезервировано";
	ВРезерве = ИмяТЧ + "ВРезерве";
	Размещено = ИмяТЧ + "Размещено";
	ДатаПоступления = ИмяТЧ + "ДатаПоступления";
	
	Если ЗаказНарядВСостоянииВыполнения Тогда
		
		Если Элемент.ТекущийЭлемент = Элементы[ОстатокОбщий]
			Или Элемент.ТекущийЭлемент = Элементы[СтруктурнаяЕдиницаРезервРасход] Тогда
			
			ЗначениеПоля = ТекущиеДанные.ОстатокОбщий;
			
			СписокВыбораСклад = Элементы[СтруктурнаяЕдиницаРезервРасход].СписокВыбора;
			СписокВыбораСклад.Очистить();
			
			Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
				
				ПараметрыОповещения = Новый Структура("ВыбранноеПоле", "ЗапасыОстатокОбщий");
				Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти", ЭтаФорма, ПараметрыОповещения);
				
				СписокДокументов = СписокДокументовПоЗаказу("ОбщиеЗапасы", ПараметрыОтбораДокументов, ИмяТЧ, "Отгрузка", "ЗаказНаряд");
				
				Для Каждого ЭлементСписка Из СписокДокументов Цикл
					СписокВыбораСклад.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление,, ЭлементСписка.Картинка);
				КонецЦикла;
				
				Если СписокДокументов.Количество() Тогда
					СписокДокументов.Добавить("ОтчетОстаткиНаСкладах", НСтр("ru = 'Остатки на складах (отчет)'"),, БиблиотекаКартинок.Отчет);
					СписокВыбораСклад.Добавить("ОтчетОстаткиНаСкладах", НСтр("ru = 'Остатки на складах (отчет)'"),, БиблиотекаКартинок.Отчет);
				КонецЕсли;
				
				Если Элемент.ТекущийЭлемент = Элементы[ОстатокОбщий] Тогда
					ПоказатьВыборИзМеню(Оповещение, СписокДокументов, Элемент.ТекущийЭлемент);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Элемент.ТекущийЭлемент = Элементы[ВРезервеВсего]
			Или Элемент.ТекущийЭлемент = Элементы[Зарезервировано] Тогда
			
			ЗначениеПоля = ?(Элемент.ТекущийЭлемент = Элементы[ВРезервеВсего], ТекущиеДанные.ВРезерве, ТекущиеДанные.ВРезервеТекСклад);
			
			Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
				
				ПараметрыОповещения = Новый Структура("ВыбранноеПоле", "ЗапасыВРезерве");
				Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти", ЭтаФорма, ПараметрыОповещения);
				
				ПараметрыОтбораДокументов.Склад = ?(Элемент.ТекущийЭлемент = Элементы[ВРезервеВсего], Неопределено, ПараметрыОтбораДокументов.Склад);
				
				СписокДокументов = СписокДокументовПоЗаказу("Остаток", ПараметрыОтбораДокументов, ИмяТЧ, "Отгрузка", "ЗаказНаряд");
				
				ПоказатьВыборИзМеню(Оповещение, СписокДокументов, Элемент.ТекущийЭлемент);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если Элемент.ТекущийЭлемент = Элементы[ВРезерве] Тогда
			
			ЗначениеПоля = ТекущиеДанные.ВРезерве;
			
			Если ЗначениеЗаполнено(ЗначениеПоля) И ЗначениеЗаполнено(Объект.Ссылка) Тогда
				
				ПараметрыОповещения = Новый Структура("ВыбранноеПоле", "ЗапасыВРезерве");
				Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти", ЭтаФорма, ПараметрыОповещения);
				
				ПараметрыОтбораДокументов.Склад = Неопределено;
				
				СписокДокументов = СписокДокументовПоЗаказу("Остаток", ПараметрыОтбораДокументов, ИмяТЧ);
				
				ПоказатьВыборИзМеню(Оповещение, СписокДокументов, Элемент.ТекущийЭлемент);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Элемент.ТекущийЭлемент = Элементы[Размещено] И ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			ЗначениеПоля = ТекущиеДанные.Размещено;
			
			Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
				
				ПараметрыОповещения = Новый Структура("ВыбранноеПоле", "ЗапасыРазмещено");
				Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти", ЭтаФорма, ПараметрыОповещения);
				
				ПараметрыОтбораДокументов.Склад = Неопределено;
				
				СписокДокументов = СписокДокументовПоЗаказу("Заказано", ПараметрыОтбораДокументов, ИмяТЧ);
				ПоказатьВыборИзМеню(Оповещение, СписокДокументов, Элемент.ТекущийЭлемент);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Элемент.ТекущийЭлемент = Элементы[ОстатокОбщий]
			Или Элемент.ТекущийЭлемент = Элементы[СтруктурнаяЕдиницаРезервЗаказ] Тогда
			
			ЗначениеПоля = ТекущиеДанные.ОстатокОбщий;
			
			СписокВыбораСклад = Элементы[СтруктурнаяЕдиницаРезервЗаказ].СписокВыбора;
			СписокВыбораСклад.Очистить();
			
			Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
				
				ПараметрыОповещения = Новый Структура("ВыбранноеПоле", "ЗапасыОстатокОбщий");
				Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти", ЭтаФорма, ПараметрыОповещения);
				
				СписокДокументов = СписокДокументовПоЗаказу("ОбщиеЗапасы", ПараметрыОтбораДокументов, ИмяТЧ);
				
				Для Каждого ЭлементСписка Из СписокДокументов Цикл
					СписокВыбораСклад.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление,, ЭлементСписка.Картинка);
				КонецЦикла;
				
				Если Не ТекущиеДанные.ОстатокОбщий = 0 И РазрешитьСкладыВТабличныхЧастях Тогда
					
					ЗначениеОстатокОбщий = ?(ТекущиеДанные.ОстатокОбщий <= 0, "", Формат(ТекущиеДанные.ОстатокОбщий, "ЧДЦ = 3"));
					
					ПредставлениеОбщегоОстатка = ЗначениеОстатокОбщий + " " + Строка(ТекущиеДанные.ЕдиницаИзмерения) + ". <Всего>; Заполнить по остаткам.";
					
					ЭлементСпискаЗначений = Новый СписокЗначений;
					ЭлементСпискаЗначений.Добавить("РаспределитьПоРезервам", ПредставлениеОбщегоОстатка);
					
					СписокВыбораСклад.Добавить(ЭлементСпискаЗначений[0].Значение, ПредставлениеОбщегоОстатка);
					СписокДокументов.Добавить(ЭлементСпискаЗначений[0].Значение, ПредставлениеОбщегоОстатка);
					
				КонецЕсли;
				
				Если СписокДокументов.Количество() Тогда
					СписокДокументов.Добавить("ОтчетОстаткиНаСкладах", НСтр("ru = 'Остатки на складах (отчет)'"),, БиблиотекаКартинок.Отчет);
					СписокВыбораСклад.Добавить("ОтчетОстаткиНаСкладах", НСтр("ru = 'Остатки на складах (отчет)'"),, БиблиотекаКартинок.Отчет);
				КонецЕсли;
				
				Если Элемент.ТекущийЭлемент = Элементы[ОстатокОбщий] Тогда
					ПоказатьВыборИзМеню(Оповещение, СписокДокументов, Элемент.ТекущийЭлемент);
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЕсли;
		
		Если Элемент.ТекущийЭлемент = Элементы[ДатаПоступления] Тогда
			
			ЗначениеПоля = ТекущиеДанные.ДатаПоступления;
			
			Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
				
				ПараметрыОповещения = Новый Структура("ВыбранноеПоле", "ЗапасыПоступления");
				Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти", ЭтаФорма, ПараметрыОповещения);
				
				СписокДокументов = СписокДокументовПоЗаказу("ЗапасыПоступления", ПараметрыОтбораДокументов, ИмяТЧ);
				ПоказатьВыборИзМеню(Оповещение, СписокДокументов, Элемент.ТекущийЭлемент);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРазбитьСтроку(Команда)
	РазбитьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку()
	
	ИмяТЧ = ТекущееИмяТабличнойЧастиДляОстатковИРезервов();
	
	Если ИмяТЧ = "Материалы" Тогда 
		ИмяТЧФорма = "ЗНМатериалы";
	Иначе
		ИмяТЧФорма = "Запасы" 
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Элементы[ИмяТЧФорма].ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Количество в текущей строке равно нулю.'");
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Сообщить();
		Возврат
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("СтрокаТабличнойЧасти, АвтоматическиеСкидкиРассчитаны, ИмяТЧ", СтрокаТабличнойЧасти, Объект.СкидкиРассчитаны, ИмяТЧ);
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуТабличнойЧастиЗавершение", ЭтаФорма, ПараметрыОповещения);
	
	ПоказатьВводЧисла(Оповещение, СтрокаТабличнойЧасти.Количество, "Введите количество в новой строке", 15, 3);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПоказатьДублиСтрок(Команда)
	
	ПоказатьДублиСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыОбновить(Команда)
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДублиСтрок(ПоказатьВЛюбомСлучае = Ложь)
		
	ИмяТЧ = ТекущееИмяТабличнойЧастиДляОстатковИРезервов();
	
	Если ИмяТЧ = Неопределено Тогда Возврат КонецЕсли;
	
	Если ИмяТЧ = "Материалы" Тогда 
		ИмяТЧФорма = "ЗНМатериалы";
	Иначе
		ИмяТЧФорма = "Запасы" 
	КонецЕсли;
	
	ИдентификаторСтроки = Элементы[ИмяТЧФорма].ТекущаяСтрока;
	
	Если ИдентификаторСтроки = Неопределено Или Объект[ИмяТЧ].НайтиПоИдентификатору(ИдентификаторСтроки) = Неопределено Тогда Возврат КонецЕсли;

	НомерСтроки = Объект[ИмяТЧ].НайтиПоИдентификатору(ИдентификаторСтроки).НомерСтроки-1;
	
	СтрокаТабличнойЧасти = Объект[ИмяТЧ][НомерСтроки];
	
	ДекорацияОтборПоДублям = ИмяТЧФорма+"ДекорацияОтборПоДублям";
	КонтекстноеМенюПоказатьДублиСтрок = ИмяТЧ+"КонтекстноеМенюПоказатьДублиСтрок";
	
	Если (Не Элементы[ДекорацияОтборПоДублям].Видимость И Не ПоказатьВЛюбомСлучае)
		Или (Элементы[ДекорацияОтборПоДублям].Видимость И ПоказатьВЛюбомСлучае) Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
		ПараметрыОтбора.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
		ПараметрыОтбора.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
		
		НайденныеСтроки = Объект[ИмяТЧ].НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() <=1 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Дубли строки не найдены.'");
			Сообщение.КлючДанных = Объект.Ссылка;
			Сообщение.Сообщить();
			Возврат
		КонецЕсли;
		
		ПараметрыОтбора = Новый ФиксированнаяСтруктура(ПараметрыОтбора);
		
		Элементы[КонтекстноеМенюПоказатьДублиСтрок].Пометка = Истина;
		
		Элементы[ДекорацияОтборПоДублям].Заголовок = ИнформацияОбОтборе(СтрокаТабличнойЧасти.НомерСтроки);
		Элементы[ДекорацияОтборПоДублям].Видимость = Истина;
		
		Возврат;
		
	Иначе
		ОтменитьОтбор()
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПоложениеСклада()
	
	Если СкладВШапке Тогда
		
		ЗначениеСклада = Объект.СтруктурнаяЕдиницаРезерв;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			
			Если НЕ СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = ЗначениеСклада Тогда
				Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");
				Возврат;
			КонецЕсли;
			
			ЗначениеСклада = СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеКолонокВРазрезеЗапасов(ИмяТЧ = Неопределено, УбратьВидимостьРежима = Ложь, ОбновлятьСостояние = Истина)
	
	МассивИменТЧ = Новый Массив;
	
	Если ИмяТЧ = Неопределено Тогда
		Если Объект.ИспользоватьТовары Тогда
			МассивИменТЧ.Добавить("Запасы");
		КонецЕсли;
		Если Объект.ИспользоватьМатериалы Тогда
			МассивИменТЧ.Добавить("Материалы");
		КонецЕсли;
	Иначе
		МассивИменТЧ.Добавить(ИмяТЧ);
	КонецЕсли;
	
	Если Не МассивИменТЧ.Количество() Тогда Возврат КонецЕсли;
	
	Если УбратьВидимостьРежима Тогда
		
		Для Каждого ИмяТЧ Из МассивИменТЧ Цикл
			
			КонтекстноеМенюГруппаРаботаССтроками = ИмяТЧ + "КонтекстноеМенюГруппаРаботаССтроками";
			
			ОстаткиРасход = ИмяТЧ + "ОстаткиРасход";
			ОстаткиЗаказ = ИмяТЧ + "ОстаткиЗаказ";
			Обеспечение = ИмяТЧ + "Обеспечение";
			ГруппаКПоступлению = ИмяТЧ + "ГруппаКПоступлению";
			
			Элементы[ОстаткиРасход].Видимость = Ложь;
			Элементы[ОстаткиЗаказ].Видимость = Ложь;
			Элементы[Обеспечение].Видимость = Ложь;
			Элементы[ГруппаКПоступлению].Видимость = Ложь;
			
			Элементы[КонтекстноеМенюГруппаРаботаССтроками].Видимость = Ложь;
			
			Если ИмяТч = "Материалы" Тогда
				Ячейка = "ЗНМатериалы" + "Ячейка";
			Иначе
				Ячейка = ИмяТЧ + "Ячейка";
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОбновлятьСостояние Тогда
			УстановитьВидимостьИДоступностьОтСостояния();
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого ИмяТЧ Из МассивИменТЧ Цикл
		
		Если ИмяТЧ = "Материалы" Тогда
			Элементы["ЗНМатериалы"].ВысотаШапки = ?(РежимОстаткиИРезервы,2,1);
		Иначе
			Элементы[ИмяТЧ].ВысотаШапки = ?(РежимОстаткиИРезервы,2,1);
		КонецЕсли;
		
		КонтекстноеМенюГруппаРаботаССтроками = ИмяТЧ + "КонтекстноеМенюГруппаРаботаССтроками";
			
			ОстаткиРасход = ИмяТЧ + "ОстаткиРасход";
			ОстаткиЗаказ = ИмяТЧ + "ОстаткиЗаказ";
			Обеспечение = ИмяТЧ + "Обеспечение";
			ГруппаКПоступлению = ИмяТЧ + "ГруппаКПоступлению";
			
			Если ИмяТч = "Материалы" Тогда
				СтруктурнаяЕдиницаРезерв = "ЗНМатериалы" + "СтруктурнаяЕдиницаРезерв";
				Ячейка = "ЗНМатериалы" + "Ячейка";
				Резерв = "ЗНМатериалы" + "Резерв";
				РезервОтгрузка = "ЗНМатериалы" + "РезервОтгрузка";
			Иначе
				СтруктурнаяЕдиницаРезерв = ИмяТЧ + "СтруктурнаяЕдиницаРезерв";
				Ячейка = ИмяТЧ + "Ячейка";
				Резерв = ИмяТЧ + "Резерв";
				РезервОтгрузка = "ЗНМатериалы" + "РезервОтгрузка";
			КонецЕсли;
			
			РезервДляРежимаОстаткиРасход = ИмяТЧ + "РезервДляРежимаОстаткиРасход";
			ВРезервеВсего = ИмяТЧ + "ВРезервеВсего";
			РезервДляРежимаОстаткиРасход = ИмяТЧ + "РезервДляРежимаОстаткиРасход";
			ЗарезервированоРасход = ИмяТЧ + "ЗарезервированоРасход";
			ЯчейкаДляРежимаОстатки = ИмяТЧ + "ЯчейкаДляРежимаОстатки";
			ОстатокОбщий = ИмяТЧ + "ОстатокОбщий";
			НеОтгружено = ИмяТЧ + "НеОтгружено";
			Обеспечено = ИмяТЧ + "Обеспечено";
			ОстатокСвободно = ИмяТЧ + "ОстатокСвободно";
			РезервДляРежимаОстатки = ИмяТЧ + "РезервДляРежимаОстатки";
			СтруктурнаяЕдиницаРезервЗаказ = ИмяТЧ + "СтруктурнаяЕдиницаРезервЗаказ";
			
			Элементы[ОстаткиРасход].Видимость = Ложь;
			Элементы[ОстаткиЗаказ].Видимость = Ложь;
			Элементы[Обеспечение].Видимость = Ложь;
			Элементы[ГруппаКПоступлению].Видимость = Ложь;
			
			Если ЗаказНарядВСостоянииВыполнения Тогда
				
				Элементы[ОстаткиРасход].Видимость  = РежимОстаткиИРезервы;
				Элементы[СтруктурнаяЕдиницаРезерв].Видимость = Не РежимОстаткиИРезервы;
				
				Элементы[РезервДляРежимаОстаткиРасход].Видимость = Объект.Проведен;
				Элементы[ВРезервеВсего].Видимость = РежимОстаткиИРезервы И Объект.Проведен И ФункциональнаяОпцияРезервированиеЗапасов;
				
				Элементы[РезервДляРежимаОстаткиРасход].Видимость = РежимОстаткиИРезервы И ФункциональнаяОпцияРезервированиеЗапасов;
				Элементы[ЗарезервированоРасход].Видимость = РежимОстаткиИРезервы И ФункциональнаяОпцияРезервированиеЗапасов;
				
				Если КэшЗначений.УчетПоЯчейкам И Элементы[Ячейка].Видимость Тогда
					Элементы[Ячейка].Видимость = НЕ РежимОстаткиИРезервы И РазрешитьСкладыВТабличныхЧастях;
					Элементы[ЯчейкаДляРежимаОстатки].Видимость = РежимОстаткиИРезервы И РазрешитьСкладыВТабличныхЧастях;
				КонецЕсли;
				
				Элементы[РезервОтгрузка].Видимость = Не РежимОстаткиИРезервы И ФункциональнаяОпцияРезервированиеЗапасов;
				
			Иначе
				Элементы[ОстаткиЗаказ].Видимость = РежимОстаткиИРезервы;
				Элементы[СтруктурнаяЕдиницаРезервЗаказ].Видимость = РежимОстаткиИРезервы И РазрешитьСкладыВТабличныхЧастях;
				
				Элементы[ГруппаКПоступлению].Видимость = РежимОстаткиИРезервы;
				Элементы[ОстатокОбщий].Видимость = РежимОстаткиИРезервы;
				
				Элементы[НеОтгружено].Видимость = Объект.Проведен;
				
				Если ФункциональнаяОпцияРезервированиеЗапасов Тогда
					Элементы[Обеспечение].Видимость = Объект.Проведен И РежимОстаткиИРезервы;
				Иначе
					Элементы[Обеспечение].Видимость = Ложь;
					
					Элементы[Обеспечено].Видимость = Ложь;
					Элементы[СтруктурнаяЕдиницаРезервЗаказ].Видимость = Ложь;
					Элементы[ОстатокСвободно].Видимость = Ложь;
					Элементы[РезервДляРежимаОстатки].Видимость = Ложь;
					
				КонецЕсли;
				
				Элементы[СтруктурнаяЕдиницаРезерв].Видимость = РежимОстаткиИРезервы Или Не СкладВШапке;
				Элементы[Резерв].Видимость = Не РежимОстаткиИРезервы И ФункциональнаяОпцияРезервированиеЗапасов;
				
				Если КэшЗначений.УчетПоЯчейкам И Элементы[Ячейка].Видимость Тогда
					Элементы[Ячейка].Видимость = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			Элементы[КонтекстноеМенюГруппаРаботаССтроками].Видимость = РежимОстаткиИРезервы;
			
		КонецЦикла;
		
		Если ОбновлятьСостояние Тогда
			УстановитьВидимостьИДоступностьОтСостояния();
		КонецЕсли;
		
		Если ЗаказНарядВСостоянииВыполнения Тогда
			Элементы.ИзменитьРезервЗаполнитьПоОстаткам.Заголовок = НСтр("ru = 'По остаткам и резервам (все склады)'");
			Элементы.ЗНМатериалыИзменитьРезервЗаполнитьПоОстаткам.Заголовок = НСтр("ru = 'По остаткам и резервам (все склады / для всех работ)'");
		Иначе
			Элементы.ИзменитьРезервЗаполнитьПоОстаткам.Заголовок = НСтр("ru = 'По остаткам (все склады)'");
			Элементы.ЗНМатериалыИзменитьРезервЗаполнитьПоОстаткам.Заголовок = НСтр("ru = 'По остаткам (все склады / все работы)'");
		КонецЕсли;
		
		Элементы.ЗаполнитьКоличествоТемЧтоМожноОтгрузить.Видимость = ЗаказНарядВСостоянииВыполнения;
		Элементы.ЗНМатериалыИзменитьРезервЗаполнитьПоОстаткам.Видимость = ?(Элементы.ЗНМатериалыИзменитьРезервЗаполнитьПоОстаткам.Видимость
																			, РазрешитьСкладыВТабличныхЧастях, Элементы.ЗНМатериалыИзменитьРезервЗаполнитьПоОстаткам.Видимость);
		Элементы.ИзменитьРезервЗаполнитьПоОстаткам.Видимость = ?(Элементы.ИзменитьРезервЗаполнитьПоОстаткам.Видимость, РазрешитьСкладыВТабличныхЧастях
																, Элементы.ИзменитьРезервЗаполнитьПоОстаткам.Видимость);

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда Возврат КонецЕсли;
	
	ИмяТЧ = Элементы.ЗНСтраницы.ТекущаяСтраница.Имя;
	
	Если ИмяТЧ = "ЗНГруппаЗапасы" Или (ИмяТЧ = "ЗНГруппаРаботы" И Элементы.ЗНМатериалы.Видимость) Тогда
		
		ИмяТЧ = ?(ИмяТЧ = "ЗНГруппаЗапасы", "Запасы", "Материалы");
	Иначе
		Возврат
	КонецЕсли;
	
	ИмяТЧФорма = ?(ИмяТЧ = "Материалы", "ЗНМатериалы", "Запасы");
	
	ТекущиеДанные = Элементы[ИмяТЧФорма].ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Если Параметры.ВыбранноеПоле = "ЗапасыВРезерве" И Результат.Значение = Объект.Ссылка Тогда
		Если Не ЗаказНарядВСостоянииВыполнения Тогда
			ЭтаФорма.ТекущийЭлемент = Элементы[ИмяТЧ+"РезервДляРежимаОстатки"];
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Параметры.ВыбранноеПоле = "ЗапасыОстатокОбщий" Тогда
		
		Если Результат.Значение = "ОтчетОстаткиНаСкладах" Тогда
			
			Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
				Возврат;
			КонецЕсли;
			
			Вариант = РаботаСФормойДокументаКлиентСервер.ВариантОтчета("ОстаткиТоваров", "ПоМестамХранения");
			
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
			ОтборРасшифровки = Новый Соответствие;
			ОтборРасшифровки.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
			ОтборРасшифровки.Вставить("Характеристика", ТекущиеДанные.Характеристика);
			ОтборРасшифровки.Вставить("СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы", ПредопределенноеЗначение(
				"Перечисление.ТипыСтруктурныхЕдиниц.Склад"));
			ПараметрыОткрытия.Вставить("ОтборРасшифровки", ОтборРасшифровки);
			
			ВариантыОтчетовКлиент.ОткрытьФормуОтчета(, Вариант, ПараметрыОткрытия);
			
		КонецЕсли;
		
		Если Не ФункциональнаяОпцияРезервированиеЗапасов Или Не РазрешитьСкладыВТабличныхЧастях Тогда
			Возврат;
		КонецЕсли;
		
		Если Результат.Значение = "РаспределитьПоРезервам" Тогда
			
			СтруктураОтбораНоменклатуры = Новый Структура("Номенклатура, Характеристика, Партия",
				ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика, ТекущиеДанные.Партия);

			ЗаполнитьКолонкуРезервПоОстаткамНаСервере(СтруктураОтбораНоменклатуры, ИмяТЧ);
			
			ЭтаФорма.Модифицированность = Истина;
		
		Иначе
			
			Если ТипЗнч(Результат.Значение) = Тип("Структура") И Результат.Значение.Свойство("Склад") 
				И Не ТекущиеДанные.СтруктурнаяЕдиницаРезерв = Результат.Значение.Склад Тогда
				
				Если Не Объект.Проведен И ТекущиеДанные.Количество > ТекущиеДанные.МожноОтгрузить
										И Результат.Значение.Количество < ТекущиеДанные.МожноОтгрузить Тогда
					
					НоваяСтрока = Объект.Запасы.Вставить(ТекущиеДанные.НомерСтроки);
					ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущиеДанные);
					
					НоваяСтрока.СтруктурнаяЕдиницаРезерв = Результат.Значение.Склад;
					
					СтруктураОстатков = СвободныйОстатокПоСтруктурнойЕдинице(НоваяСтрока.СтруктурнаяЕдиницаРезерв, НоваяСтрока.Номенклатура
					, НоваяСтрока.Характеристика, НоваяСтрока.Партия, НоваяСтрока.ЕдиницаИзмерения);
					
					НоваяСтрока.Количество = ТекущиеДанные.Количество - ТекущиеДанные.МожноОтгрузить;
					
					ТекущиеДанные.Количество =  ТекущиеДанные.МожноОтгрузить;
					
					НоваяСтрока.Резерв = ?(СтруктураОстатков.КоличествоСвободно >= НоваяСтрока.Количество, НоваяСтрока.Количество, СтруктураОстатков.КоличествоСвободно);
					
					Если ИмяТЧ = "Запасы" Тогда
						РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧ,ТекущиеДанные);
						РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧ,НоваяСтрока);
					КонецЕсли;
					
					ОбрабатываемаяСтрока = НоваяСтрока;
					
					Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
					
					// Калькуляция
					ОчиститьКалькуляцию();
					// Конец Калькуляция
	
				Иначе
					
					ТекущиеДанные.СтруктурнаяЕдиницаРезерв = Результат.Значение.Склад;
					ОбрабатываемаяСтрока = ТекущиеДанные;
					
				КонецЕсли;
				
				СтруктураДанные = Новый Структура;
				СтруктураДанные.Вставить("Организация",Компания);
				СтруктураДанные.Вставить("Номенклатура",ОбрабатываемаяСтрока.Номенклатура);
				СтруктураДанные.Вставить("Характеристика",ОбрабатываемаяСтрока.Характеристика);
				СтруктураДанные.Вставить("Партия",ОбрабатываемаяСтрока.Партия);
				СтруктураДанные.Вставить("ИспользоватьХарактеристики",ОбрабатываемаяСтрока.ИспользоватьХарактеристики);
				СтруктураДанные.Вставить("ИспользоватьПартии", ОбрабатываемаяСтрока.ИспользоватьПартии);
				
				ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные,,,Истина);
				
			КонецЕсли;
			
		КонецЕсли;

		
		Возврат;
		
	КонецЕсли;
	
	ПоказатьЗначение(,Результат.Значение);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРезервДляРежимаОстаткиПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	НоменклатураВДокументахКлиент.КонтрольЗначенияРезерваВТекущейСтроке(СтрокаТабличнойЧасти, "ПриИзмененииРезерваПроверитьКоличество", Объект);
	
	ЗаполнитьЗначенияОстатковПоНоменклатуре();
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаРезервЗаказОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Тогда Возврат КонецЕсли;
	
	СтруктурнаяЕдиницаРезервЗаказОбработкаВыбора("Запасы", ВыбранноеЗначение, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуТабличнойЧастиЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда Возврат КонецЕсли;
	
	СтрокаТабличнойЧасти = Параметры.СтрокаТабличнойЧасти;
	ИмяТЧ = Параметры.ИмяТЧ;
	
	Если Результат <= 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Количество в новой строке должно быть больше нуля.'");
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Сообщить();
		Возврат
	КонецЕсли;
	
	Если Результат >= СтрокаТабличнойЧасти.Количество И СтрокаТабличнойЧасти.Отменен = 0  Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Количество в новой строке должно быть меньше чем в текущей.'");
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Сообщить();
		Возврат
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Отменен = 1 И Результат >= СтрокаТабличнойЧасти.КоличествоДоОтмены Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Количество в новой строке должно быть меньше чем в текущей.'");
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Сообщить();
		Возврат
	КонецЕсли;
	
	НоваяСтрока = Объект[ИмяТЧ].Вставить(СтрокаТабличнойЧасти.НомерСтроки);
	ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТабличнойЧасти);
	
	Если СтрокаТабличнойЧасти.Отменен = 1 Тогда
		
		КоличествоВСтроке = СтрокаТабличнойЧасти.Количество;
		
		ОтменитьВернутьЗапасы(СтрокаТабличнойЧасти, ИмяТЧ); 
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество - Результат;
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТабличнойЧасти); 
		
		НоваяСтрока.Отменен = 0;
		ОтменитьВернутьЗапасы(НоваяСтрока, ИмяТЧ);
		НоваяСтрока.Количество = Результат;
		
		НастроитьЭлементыОтменыТоваров();
		
	Иначе
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество - Результат;
		НоваяСтрока.Количество = Результат;
	КонецЕсли;
	
	Если ИмяТЧ = "Запасы" Тогда 
		НоваяСтрока.Резерв = 0;
		РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧ,СтрокаТабличнойЧасти);
		РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧ,НоваяСтрока);
	КонецЕсли;
	
	Если РежимОстаткиИРезервы Тогда
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Компания);
		СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
		СтруктураДанные.Вставить("Партия", 	СтрокаТабличнойЧасти.Партия);
		СтруктураДанные.Вставить("ИспользоватьХарактеристики", СтрокаТабличнойЧасти.ИспользоватьХарактеристики);
		СтруктураДанные.Вставить("ИспользоватьПартии", СтрокаТабличнойЧасти.ИспользоватьПартии);
		
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные,,, Истина);
		
	КонецЕсли;
	
	Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаРезервРасходОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = Неопределено Тогда Возврат КонецЕсли;
	
	СтруктурнаяЕдиницаРезервРасходОбработкаВыбора("Запасы", ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура СтруктурнаяЕдиницаРезервРасходОбработкаВыбора(ИмяТЧ, ВыбранноеЗначение)
	
	СтрокаТабличнойЧасти = Элементы[ИмяТЧ].ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	Если ВыбранноеЗначение = "ОтчетОстаткиНаСкладах" Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда Возврат КонецЕсли;
		
		Вариант = РаботаСФормойДокументаКлиентСервер.ВариантОтчета("ОстаткиТоваров", "ПоМестамХранения");
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
		ОтборРасшифровки = Новый Соответствие;
		ОтборРасшифровки.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		ОтборРасшифровки.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
		ОтборРасшифровки.Вставить("СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы", ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Склад"));
		ПараметрыОткрытия.Вставить("ОтборРасшифровки", ОтборРасшифровки);
		
		ВариантыОтчетовКлиент.ОткрытьФормуОтчета(, Вариант, ПараметрыОткрытия);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("Склад") Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = ВыбранноеЗначение.Склад;
		СтрокаТабличнойЧасти.Ячейка = ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка");
	Иначе
		СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = ВыбранноеЗначение;
		СтрокаТабличнойЧасти.Ячейка = ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка");
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЯчейкаДоступна = ЯчейкаДоступна(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Компания);
	СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", 	СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("ИспользоватьХарактеристики", СтрокаТабличнойЧасти.ИспользоватьХарактеристики);
	СтруктураДанные.Вставить("ИспользоватьПартии", СтрокаТабличнойЧасти.ИспользоватьПартии);
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные, СтрокаТабличнойЧасти.Номенклатура,, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурнаяЕдиницаРезервЗаказОбработкаВыбора(ИмяТЧ, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы[ИмяТЧ].ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") ИЛИ ВыбранноеЗначение = "РаспределитьПоРезервам" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтруктураПараметров = Новый Структура("ВыбранноеПоле", "ЗапасыОстатокОбщий");
		
		ЭлементСпискаЗначений = Новый СписокЗначений;
		ЭлементСпискаЗначений.Добавить(ВыбранноеЗначение);
		
		ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти(ЭлементСпискаЗначений[0], СтруктураПараметров);
		
	ИначеЕсли ВыбранноеЗначение = "ОтчетОстаткиНаСкладах" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда Возврат КонецЕсли;
		
		Вариант = РаботаСФормойДокументаКлиентСервер.ВариантОтчета("ОстаткиТоваров", "ПоМестамХранения");
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
		ОтборРасшифровки = Новый Соответствие;
		ОтборРасшифровки.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		ОтборРасшифровки.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
		ОтборРасшифровки.Вставить("СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы", ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Склад"));
		ПараметрыОткрытия.Вставить("ОтборРасшифровки", ОтборРасшифровки);
		
		ВариантыОтчетовКлиент.ОткрытьФормуОтчета(, Вариант, ПараметрыОткрытия);
		
	Иначе
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Компания);
		СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
		СтруктураДанные.Вставить("Партия", 	СтрокаТабличнойЧасти.Партия);
		СтруктураДанные.Вставить("ИспользоватьХарактеристики", СтрокаТабличнойЧасти.ИспользоватьХарактеристики);
		СтруктураДанные.Вставить("ИспользоватьПартии", СтрокаТабличнойЧасти.ИспользоватьПартии);
		
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные,,,Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРезервДляРежимаОстаткиРасходПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	НоменклатураВДокументахКлиент.КонтрольЗначенияРезерваВТекущейСтроке(СтрокаТабличнойЧасти, "ПриИзмененииРезерваПроверитьКоличество", Объект);
	
	ЗаполнитьЗначенияОстатковПоНоменклатуре();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЯчейкаДляРежимаОстаткиПриИзменении(Элемент)
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковПоНоменклатуре();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗначенияОстатковПоНоменклатуре(ИмяТЧ = "Запасы")
	
	СтрокаТабличнойЧасти = Элементы[ИмяТЧ].ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Компания);
	СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", 	СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("ИспользоватьХарактеристики", СтрокаТабличнойЧасти.ИспользоватьХарактеристики);
	СтруктураДанные.Вставить("ИспользоватьПартии", СтрокаТабличнойЧасти.ИспользоватьПартии);
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные,,,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРезервЗаполнитьПоОстаткам(Команда)
	
	ИмяТЧ = Элементы.ЗНСтраницы.ТекущаяСтраница.Имя;
	
	Если ИмяТЧ = "ЗНГруппаЗапасы" Или (ИмяТЧ = "ЗНГруппаРаботы" И Элементы.ЗНМатериалы.Видимость) Тогда
		
		ИмяТЧ = ?(ИмяТЧ = "ЗНГруппаЗапасы", "Запасы", "Материалы");
		
		Если Объект[ИмяТЧ].Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьТабличнуюЧастьПоОстаткамИРезервамНаСервере(ИмяТЧ);
		ЭтаФорма.Модифицированность = Истина;
		
		Если ИмяТЧ = "Запасы" Тогда
			Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТч] Цикл
				РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТч,СтрокаТабличнойЧасти);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКоличествоТемЧтоМожноОтгрузить(Команда)
	ЗаполнитьКоличествоПоМожноОтгрузить("Запасы");
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыДекорацияОтборПоДублямОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОтменитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОтбор(ОтменитьВезде = Ложь)
	
	МассивТЧ = Новый Массив;
	
	Если ОтменитьВезде Тогда
		МассивТЧ.Добавить("Запасы");
		МассивТЧ.Добавить("Материалы");
	Иначе
		ИмяТЧ = ТекущееИмяТабличнойЧастиДляОстатковИРезервов();
		МассивТЧ.Добавить(ИмяТч);
	КонецЕсли;
	
	Для Каждого ИмяТЧ Из МассивТЧ Цикл
		
		Элементы[ИмяТЧ+"КонтекстноеМенюПоказатьДублиСтрок"].Пометка = Ложь;
		
		Если ИмяТЧ = "Материалы" Тогда
			ИмяТЧФорма = "ЗНМатериалы";
			Элементы[ИмяТЧФорма+"ДекорацияОтборПоДублям"].Видимость = Ложь;
		Иначе
			ИмяТЧФорма = "Запасы";
			
			Элементы[ИмяТЧФорма].ОтборСтрок = Неопределено;
			
			Элементы[ИмяТЧФорма+"ДекорацияОтборПоДублям"].Видимость = Ложь;
			
			Продолжить;
			
		КонецЕсли;
		
		ИдентификаторСтроки = Элементы[ИмяТЧФорма].ТекущаяСтрока;
		
		Если ИдентификаторСтроки = Неопределено Тогда 
			Элементы[ИмяТЧФорма].ОтборСтрок = Неопределено;
			Продолжить;
		КонецЕсли;
		
		НомерСтроки = Объект[ИмяТЧ].НайтиПоИдентификатору(ИдентификаторСтроки).НомерСтроки - 1;
		
		СтрокаТабличнойЧасти = Объект[ИмяТЧ][НомерСтроки];
		
		ПараметрыОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
		
		Элементы[ИмяТЧФорма].ОтборСтрок = ПараметрыОтбора;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ТекущееИмяТабличнойЧастиДляОстатковИРезервов()
	
	ИмяТЧ = Элементы.ЗНСтраницы.ТекущаяСтраница.Имя;
	
	Если ИмяТЧ = "ЗНГруппаЗапасы" Тогда
		ИмяТЧ = "Запасы";
	ИначеЕсли ИмяТЧ = "ЗНГруппаРаботы" Тогда
		ИмяТЧ = "Материалы";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ИмяТЧ;
	
КонецФункции

&НаСервере
Процедура ПроверитьПоложениеСкладаПриПроведении(ТекущийОбъект)
	
	Если ТекущийОбъект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") И РазрешитьСкладыВТабличныхЧастях Тогда
		
		ЗначениеСклада = ТекущийОбъект.СтруктурнаяЕдиницаРезерв;
		
		Для Каждого СтрокаТабличнойЧасти Из ТекущийОбъект.Материалы Цикл
			
			Если НЕ СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = ЗначениеСклада Тогда
				ТекущийОбъект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");
				Элементы.ЗНСтруктурнаяЕдиницаЗапасов.Видимость = Ложь;
				Элементы.ЗНЯчейкаЗапасов.Видимость = Ложь;
				Возврат;
			КонецЕсли;
			
			ЗначениеСклада = СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв;
			
		КонецЦикла;
		
		Для Каждого СтрокаТабличнойЧасти Из ТекущийОбъект.Запасы Цикл
			
			Если НЕ СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = ЗначениеСклада Тогда
				ТекущийОбъект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");
				Элементы.ЗНСтруктурнаяЕдиницаЗапасов.Видимость = Ложь;
				Элементы.ЗНЯчейкаЗапасов.Видимость = Ложь;
				Возврат;
			КонецЕсли;
			
			ЗначениеСклада = СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв;
			
		КонецЦикла
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИнформацияОбОтборе(НомерСтроки)
	КомпонентыПредставления = Новый Массив;
	КомпонентыПредставления.Добавить(НСтр("ru = 'Дубли строки'"));
	КомпонентыПредставления.Добавить(НомерСтроки);
	ТекстПредставления = СтрСоединить(КомпонентыПредставления, " ");
	Возврат НоменклатураВДокументахСервер.ИнформацияОбОтборе(ТекстПредставления);
КонецФункции

&НаСервере
Процедура ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные = Неопределено, НоменклатураОтбора = Неопределено, ОбновитьВсе = Ложь, ОбновитьТекущую = Ложь)
	
	Если Не РежимОстаткиИРезервы Тогда Возврат КонецЕсли;
	
	Если ОбновитьВсе Тогда
		ТребуетсяОбновлениеТЧПоОстаткамМатериалы = Истина;
		ТребуетсяОбновлениеТЧПоОстаткамЗапасы = Истина;
	КонецЕсли;
		
	
	ИмяТЧ = Элементы.ЗНСтраницы.ТекущаяСтраница.Имя;
	
	Если ИмяТЧ = "ЗНГруппаЗапасы" Или (ИмяТЧ = "ЗНГруппаРаботы" И Элементы.ЗНМатериалы.Видимость) Тогда
		
		ИмяТЧ = ?(ИмяТЧ = "ЗНГруппаЗапасы", "Запасы", "Материалы");
		
		Если ЗаказНарядВСостоянииВыполнения Тогда
			НоменклатураВДокументахСервер.ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧасти(Объект, СтруктураДанные,НоменклатураОтбора, ИмяТЧ, "ЗаказНаряд")
		Иначе
			НоменклатураВДокументахСервер.ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧасти(Объект, СтруктураДанные, 0, НоменклатураОтбора, ФункциональнаяОпцияРезервированиеЗапасов, ИмяТЧ)
		КонецЕсли;
		
		Если ИмяТЧ = "Запасы" Тогда
			
			ТребуетсяОбновлениеТЧПоОстаткамЗапасы = Ложь;
			
			Если ОбновитьТекущую Тогда Возврат КонецЕсли;
			
		ИначеЕсли ИмяТЧ = "Материалы" Тогда 
			
			ТребуетсяОбновлениеТЧПоОстаткамМатериалы = Ложь;
			
			Если ОбновитьТекущую Тогда Возврат КонецЕсли;
			
		Иначе
			ТребуетсяОбновлениеТЧПоОстаткамМатериалы = Истина;
			ТребуетсяОбновлениеТЧПоОстаткамЗапасы = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СвободныйОстатокПоСтруктурнойЕдинице(СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия, ЕдиницаИзмерения)
	
Коэффициент = ?(ТипЗнч(ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения"), ЕдиницаИзмерения.Коэффициент, 1);
	
	Организация = Константы.УчетПоКомпании.Компания(Объект.Организация);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Партия", Партия);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ЗапасыОстаткиСвободные.КоличествоОстаток) КАК КоличествоСвободно,
	|	СУММА(ЗапасыОстаткиРезерв.КоличествоОстаток) КАК КоличествоРезерв
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(
	|			,
	|			Номенклатура = &Номенклатура
	|				И ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|				И Организация = &Организация
	|				И Характеристика = &Характеристика
	|				И Партия = &Партия
	|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЗапасыОстаткиСвободные,
	|	РегистрНакопления.Запасы.Остатки(
	|			,
	|			Номенклатура = &Номенклатура
	|				И ЗаказПокупателя = &Заказ
	|				И Организация = &Организация
	|				И Характеристика = &Характеристика
	|				И Партия = &Партия
	|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЗапасыОстаткиРезерв
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоличествоСвободно УБЫВ";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	СтруктураВозврата = Новый Структура("КоличествоСвободно, КоличествоРезерв");
	
	Пока Результат.Следующий() Цикл
		СтруктураВозврата.КоличествоСвободно = Результат.КоличествоСвободно/Коэффициент;
		СтруктураВозврата.КоличествоРезерв = ?(ЗначениеЗаполнено(Объект.Ссылка), Результат.КоличествоРезерв/Коэффициент, 0);
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКолонкуРезервПоОстаткамНаСервере(СтруктураОтбораНоменклатуры = Неопределено, ИмяТЧ)
	
	НоменклатураВДокументахСервер.ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧасти(Объект,,,, ФункциональнаяОпцияРезервированиеЗапасов, ИмяТЧ);
	
	КоличествоСтрокДоЗаполнения = Объект[ИмяТЧ].Количество();
	
	НоменклатураВДокументахСервер.ЗаполнитьКолонкуРезервПоОстаткамЗаказПокупателя(Объект,, СтруктураОтбораНоменклатуры, ИмяТЧ);
	
	ЗаполнитьСлужебныеПоляТабличнойЧасти(Объект.Запасы, Объект.Работы);
	
	// Наборы
	ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.Работы, Объект.ДобавленныеНаборы);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	ПараметрыРасчета = Новый Структура("СброситьФлагСкидкиРассчитаны",Истина);
	ПараметрыРасчета.Вставить("СуммаВключаетНДС",Объект.СуммаВключаетНДС);
	
	Для Каждого СтрокаТаблицыЗапасы Из Объект.Запасы Цикл
		ТабличныеЧастиУНФКлиентСервер.РассчитатьСуммыВСтрокеТЧ(СтрокаТаблицыЗапасы, ПараметрыРасчета);
	КонецЦикла;
	
	РежимОстаткиИРезервы = ?(Не РежимОстаткиИРезервы И Не КоличествоСтрокДоЗаполнения = Объект[ИмяТЧ].Количество(), Истина, РежимОстаткиИРезервы);
	
	Если РежимОстаткиИРезервы Тогда
		
		ОбновитьОтображениеКолонокВРазрезеЗапасовСервер(ИмяТЧ);
		
		Элементы.ОстаткиИРезервы.Пометка = Истина;
		Элементы.ОстаткиИРезервыМатериалы.Пометка = Истина;
		НоменклатураВДокументахСервер.ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧасти(Объект,,,, ФункциональнаяОпцияРезервированиеЗапасов, ИмяТЧ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеСтруктурнойЕдиницыВТабличныхЧастях()
	
	Если Не РежимОстаткиИРезервы Тогда Возврат КонецЕсли;
	
	Если Объект.ИспользоватьТовары Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			Если НЕ СтрокаТабличнойЧасти.ТипНоменклатурыЗапас 
				Или ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв) Тогда
				Продолжить;
			КонецЕсли; 
			СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.ИспользоватьМатериалы Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект.Материалы Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв) Тогда
				Продолжить;
			КонецЕсли; 
			СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеКолонокВРазрезеЗапасовСервер(ИмяТЧ = Неопределено, УбратьВидимостьРежима = Ложь)
	
	МассивИменТЧ = Новый Массив;
	
	Если ИмяТЧ = Неопределено Тогда
		Если Объект.ИспользоватьТовары Тогда
			МассивИменТЧ.Добавить("Запасы");
			Элементы.ЗапасыКонтекстноеМенюГруппаРаботаССтроками.Видимость = РежимОстаткиИРезервы;
		КонецЕсли;
		Если Объект.ИспользоватьМатериалы Тогда
			МассивИменТЧ.Добавить("Материалы");
			Элементы.МатериалыКонтекстноеМенюГруппаРаботаССтроками.Видимость = РежимОстаткиИРезервы;
		КонецЕсли;
	Иначе
		МассивИменТЧ.Добавить(ИмяТЧ);
	КонецЕсли;
	
	Если Не МассивИменТЧ.Количество() Тогда Возврат КонецЕсли;
	
	Если УбратьВидимостьРежима Тогда
		
		Для Каждого ИмяТабЧасти Из МассивИменТЧ Цикл
			
			ОстаткиРасход = ИмяТабЧасти + "ОстаткиРасход";
			ОстаткиЗаказ = ИмяТабЧасти + "ОстаткиЗаказ";
			Обеспечение = ИмяТабЧасти + "Обеспечение";
			ГруппаКПоступлению = ИмяТабЧасти + "ГруппаКПоступлению";
			
			Элементы[ОстаткиРасход].Видимость = Ложь;
			Элементы[ОстаткиЗаказ].Видимость = Ложь;
			Элементы[Обеспечение].Видимость = Ложь;
			Элементы[ГруппаКПоступлению].Видимость = Ложь;
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого ИмяТЧ Из МассивИменТЧ Цикл
		
		КонтекстноеМенюГруппаРаботаССтроками = ИмяТЧ + "КонтекстноеМенюГруппаРаботаССтроками";
		
		Если РежимОстаткиИРезервы Тогда
			
			ОстаткиРасход = ИмяТЧ + "ОстаткиРасход";
			ОстаткиЗаказ = ИмяТЧ + "ОстаткиЗаказ";
			Обеспечение = ИмяТЧ + "Обеспечение";
			ГруппаКПоступлению = ИмяТЧ + "ГруппаКПоступлению";
			
			Если ИмяТч = "Материалы" Тогда
				СтруктурнаяЕдиницаРезерв = "ЗНМатериалы" + "СтруктурнаяЕдиницаРезерв";
				Ячейка = "ЗНМатериалы" + "Ячейка";
				Резерв = "ЗНМатериалы" + "Резерв";
				РезервОтгрузка = "ЗНМатериалы" + "РезервОтгрузка";
			Иначе
				СтруктурнаяЕдиницаРезерв = ИмяТЧ + "СтруктурнаяЕдиницаРезерв";
				Ячейка = ИмяТЧ + "Ячейка";
				Резерв = ИмяТЧ + "Резерв";
				РезервОтгрузка = "ЗНМатериалы" + "РезервОтгрузка";
			КонецЕсли;
			
			РезервДляРежимаОстаткиРасход = ИмяТЧ + "РезервДляРежимаОстаткиРасход";
			ВРезервеВсего = ИмяТЧ + "ВРезервеВсего";
			РезервДляРежимаОстаткиРасход = ИмяТЧ + "РезервДляРежимаОстаткиРасход";
			ЗарезервированоРасход = ИмяТЧ + "ЗарезервированоРасход";
			ЯчейкаДляРежимаОстатки = ИмяТЧ + "ЯчейкаДляРежимаОстатки";
			ОстатокОбщий = ИмяТЧ + "ОстатокОбщий";
			НеОтгружено = ИмяТЧ + "НеОтгружено";
			Обеспечено = ИмяТЧ + "Обеспечено";
			ОстатокСвободно = ИмяТЧ + "ОстатокСвободно";
			РезервДляРежимаОстатки = ИмяТЧ + "РезервДляРежимаОстатки";
			СтруктурнаяЕдиницаРезервЗаказ = ИмяТЧ + "СтруктурнаяЕдиницаРезервЗаказ";
			
			Элементы[ОстаткиРасход].Видимость = Ложь;
			Элементы[ОстаткиЗаказ].Видимость = Ложь;
			Элементы[Обеспечение].Видимость = Ложь;
			Элементы[ГруппаКПоступлению].Видимость = Ложь;
			
			Если ЗаказНарядВСостоянииВыполнения Тогда
				
				Элементы[ОстаткиРасход].Видимость  = Истина;
				Элементы[СтруктурнаяЕдиницаРезерв].Видимость = Ложь;
				
				Элементы[РезервДляРежимаОстаткиРасход].Видимость = Объект.Проведен;
				Элементы[ВРезервеВсего].Видимость = Объект.Проведен И ФункциональнаяОпцияРезервированиеЗапасов;
				
				Элементы[РезервДляРежимаОстаткиРасход].Видимость = ФункциональнаяОпцияРезервированиеЗапасов;
				Элементы[ЗарезервированоРасход].Видимость = ФункциональнаяОпцияРезервированиеЗапасов;
				
				Если КэшЗначений.УчетПоЯчейкам И Элементы[Ячейка].Видимость Тогда
					Элементы[Ячейка].Видимость = Ложь;
					Элементы[ЯчейкаДляРежимаОстатки].Видимость = Истина;
				КонецЕсли;
				
			Иначе
				Элементы[ОстаткиЗаказ].Видимость = Истина;
				Элементы[ГруппаКПоступлению].Видимость = Истина;
				Элементы[ОстатокОбщий].Видимость = Истина;
				
				Элементы[НеОтгружено].Видимость = Объект.Проведен;
				
				Если ФункциональнаяОпцияРезервированиеЗапасов Тогда
					Элементы[Обеспечение].Видимость = Объект.Проведен;
				Иначе
					Элементы[Обеспечение].Видимость = Ложь;
					
					Элементы[Обеспечено].Видимость = Ложь;
					Элементы[СтруктурнаяЕдиницаРезервЗаказ].Видимость = Ложь;
					Элементы[ОстатокСвободно].Видимость = Ложь;
					Элементы[РезервДляРежимаОстатки].Видимость = Ложь;
					
				КонецЕсли;
				
				Элементы[СтруктурнаяЕдиницаРезерв].Видимость = Ложь;
				Элементы[Резерв].Видимость = Ложь;
				Элементы[РезервОтгрузка].Видимость = Ложь;
			КонецЕсли;
			
			Элементы[КонтекстноеМенюГруппаРаботаССтроками].Видимость = Истина;
			
		Иначе
			
			Элементы[КонтекстноеМенюГруппаРаботаССтроками].Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СписокДокументовПоЗаказу(ТипОперации, СтруктураПараметров, ИмяТЧ, ДопПараметр = Неопределено, ТипДокумента = Неопределено)
	Возврат НоменклатураВДокументахСервер.СписокДокументовПоЗаказу(Объект, ТипОперации, СтруктураПараметров, ИмяТЧ, ДопПараметр, ТипДокумента);
КонецФункции

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьПоОстаткамИРезервамНаСервере(ИмяТЧ)
	
	Если СкладВШапке Тогда
		ЗначениеСклада = ?(Не ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаРезерв), Неопределено, Объект.СтруктурнаяЕдиницаРезерв);
		Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТЧ] Цикл
			СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = ЗначениеСклада;
		КонецЦикла;
	КонецЕсли;
		
	Если Не ЗаказНарядВСостоянииВыполнения Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
		
		КоличествоСтрокДоЗаполнения = Объект.Запасы.Количество();
		НоменклатураВДокументахСервер.ЗаполнитьКолонкуРезервПоОстаткамЗаказПокупателя(Объект,,,ИмяТЧ);
		
		РежимОстаткиИРезервы = ?(Не РежимОстаткиИРезервы И Не КоличествоСтрокДоЗаполнения = Объект.Запасы.Количество(), Истина, РежимОстаткиИРезервы);
		
		Если РежимОстаткиИРезервы Тогда
			ОбновитьОтображениеКолонокВРазрезеЗапасовСервер(ИмяТЧ);
			Элементы.ОстаткиИРезервы.Пометка = Истина;
			Элементы.ОстаткиИРезервыМатериалы.Пометка = Истина;
			ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
		КонецЕсли
	Иначе
		НоменклатураВДокументахСервер.ЗаполнитьКоличествоПоОстаткамИРезервамПродажа(Объект,,,ИмяТЧ);
	КонецЕсли;
	
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКоличествоПоМожноОтгрузить(ИмяТЧ)
	
	Если Не РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
	Для Каждого СтрокаЗапасов Из Объект[ИмяТЧ] Цикл
		СтрокаЗапасов.Количество = СтрокаЗапасов.МожноОтгрузить;
		РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", СтрокаЗапасов);
	КонецЦикла;
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры
#КонецОбласти

#Область Доставка

&НаСервере
Процедура УстановитьВидимостьДанныхПоДоставке()
	
	ДоставкаСервер.ОбновитьДанныеПоДоставкеИзСервиса(Объект.Ссылка,"ГруппаДоставка", Объект.Организация, ЭтотОбъект, "ЗНСтраницы");
	Элементы.ГруппаГрузоперевозка.ОтображатьЗаголовок = Элементы.ГруппаДоставка.Видимость;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораАдресаДоставки(ЭлементАдресДоставки, АдресаДоставки)
	
	ЭлементАдресДоставки.СписокВыбора.Очистить();
	ЭлементАдресДоставки.КнопкаВыпадающегоСписка = Ложь;
	
	Если АдресаДоставки.Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекАдресДоставки Из АдресаДоставки Цикл
		ЭлементАдресДоставки.СписокВыбора.Добавить(ТекАдресДоставки, ТекАдресДоставки.АдресДоставки);
	КонецЦикла;
	
	ЭлементАдресДоставки.КнопкаВыпадающегоСписка = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АдресаДоставки(Контрагент)
	
	Результат = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Результат;
	КонецЕсли;
	
	МассивКонтрагент = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Контрагент);
	Адреса = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивКонтрагент,
		,
		ВидыКИАдресаДоставки(),
		ТекущаяДатаСеанса());
	
	УникальныеЗначения = Новый Соответствие;
	Для Каждого АдресКонтрагента Из Адреса Цикл
		Если УникальныеЗначения[АдресКонтрагента.Представление] = Неопределено Тогда
			УникальныеЗначения[АдресКонтрагента.Представление] = Новый Структура;
			УникальныеЗначения[АдресКонтрагента.Представление].Вставить("Значение", АдресКонтрагента.Значение);
			УникальныеЗначения[АдресКонтрагента.Представление].Вставить("ЗначенияПолей", АдресКонтрагента.ЗначенияПолей);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из УникальныеЗначения Цикл
		ДобавляемоеЗначение = Новый Структура;
		ДобавляемоеЗначение.Вставить("АдресДоставки", ТекЭлемент.Ключ);
		ДобавляемоеЗначение.Вставить("АдресДоставкиЗначение", ТекЭлемент.Значение.Значение);
		ДобавляемоеЗначение.Вставить("АдресДоставкиЗначенияПолей", ТекЭлемент.Значение.ЗначенияПолей);
		Результат.Добавить(ДобавляемоеЗначение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВидыКИАдресаДоставки()
	
	Результат = Новый Массив;
	Результат.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	Результат.Добавить(Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПоляДоставки(Знач Объект, Элемент)
	
	АдресаДоставки = АдресаДоставки(Объект.Контрагент);
	ЗаполнитьСписокВыбораАдресаДоставки(Элемент, АдресаДоставки);
	
	Если ЗначениеЗаполнено(АдресаДоставки) Тогда
		Объект.АдресДоставки = АдресаДоставки[0].АдресДоставки;
		Объект.АдресДоставкиЗначение = АдресаДоставки[0].АдресДоставкиЗначение;
		Объект.АдресДоставкиЗначенияПолей = АдресаДоставки[0].АдресДоставкиЗначенияПолей;
	Иначе
		Объект.АдресДоставки = "";
		Объект.АдресДоставкиЗначение = "";
		Объект.АдресДоставкиЗначенияПолей = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Калькуляция

&НаКлиенте
Процедура ЗаписатьИОткрытьКалькуляцию()
	
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗаписатьИОткрытьКалькуляциюЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, 
		НСтр("ru = 'Заполнение калькуляции возможно только после записи данных.
					|Данные будут записаны.'"),
		РежимДиалогаВопрос.ОКОтмена);
		Возврат;
		
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура;
	ЗаполнитьПараметрыОткрытияКалькуляции(СтруктураПараметры);
	Если СтруктураПараметры.Свойство("Отказ") И СтруктураПараметры.Отказ Тогда
		// Серверные операции перед открытием калькуляции выполнены с ошибкой
		Возврат;
	КонецЕсли; 
	Оповещение = Новый ОписаниеОповещения("ПриИзмененииКалькуляции", ЭтотОбъект);
	ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ФормаКалькуляции", СтруктураПараметры, ЭтотОбъект, УникальныйИдентификатор,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИОткрытьКалькуляциюЗавершение(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ=КодВозвратаДиалога.ОК Тогда
		Записать();
		Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
			Возврат; // Запись не удалась, сообщения о причинах выводит платформа.
		КонецЕсли;
		ЗаписатьИОткрытьКалькуляцию();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКалькуляции(РезультатОткрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатОткрытия=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТолькоПросмотр И РезультатОткрытия.Свойство("АдресДанных") Тогда
		ПриИзмененииКалькуляцииСервер(РезультатОткрытия.АдресДанных);
		УправлениеФормой();
		ОбновитьПодвалФормы();
		ПересчитатьПлатежныйКалендарь();
	КонецЕсли;
	
	Если РезультатОткрытия.Свойство("Распечатать") И РезультатОткрытия.Распечатать=Истина Тогда
		Команда = Команды.Калькуляция;
		ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
		// УНФ
		СтатистикаИспользованияФормКлиент.ДобавитьСтатистикуПодключаемойКоманды(ЭтотОбъект, Команда);
		// Конец УНФ
	КонецЕсли;
	
	ОбновитьОтображениеКолонокВРазрезеЗапасов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКалькуляцию()
	
	Если НЕ Объект.КалькуляцияРассчитана Тогда
		Возврат;
	КонецЕсли; 
	
	Объект.КалькуляцияРассчитана = Ложь;
	
	// Удаляем все строки калькуляции, кроме общих
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Источник", ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Запас"));
	СтрокиКУдалению = Объект.Калькуляция.НайтиСтроки(СтруктураОтбора);
	Для каждого Стр Из СтрокиКУдалению Цикл
		Если Стр.РучноеИзменение Тогда
			Продолжить;
		КонецЕсли; 
		Объект.Калькуляция.Удалить(Стр);
	КонецЦикла;
	
	Элементы.ЗаполнитьОбновитьКалькуляцию.Видимость = НЕ Объект.КалькуляцияРассчитана;
	Элементы.ОткрытьКалькуляцию.Видимость			= Объект.КалькуляцияРассчитана;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКалькуляцииСервер(АдресНастроек)
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресНастроек) Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресНастроек);
	Объект.Калькуляция.Загрузить(СтруктураДанных.Калькуляция);
	Объект.Запасы.Очистить();
	Для каждого СтрокаКалькуляции Из СтруктураДанных.Запасы Цикл
		НоваяСтрока = Объект.Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКалькуляции);
	КонецЦикла;
	Объект.Работы.Очистить();
	Для каждого СтрокаКалькуляции Из СтруктураДанных.Работы Цикл
		НоваяСтрока = Объект.Работы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКалькуляции);
	КонецЦикла;
	Объект.Материалы.Очистить();
	Объект.СерииНоменклатурыМатериалы.Очистить();
	Для каждого СтрокаКалькуляции Из СтруктураДанных.Материалы Цикл
		НоваяСтрока = Объект.Материалы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКалькуляции);
	КонецЦикла;
	УстановитьПометку("Запасы", Истина);
	УстановитьПометку("Работы", Истина);
	Объект.ВидыЦенКалькуляции.Очистить();
	Для каждого ВидЦен Из СтруктураДанных.ВидыЦен Цикл
		Объект.ВидыЦенКалькуляции.Добавить().ВидЦен = ВидЦен;
	КонецЦикла; 
	ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "СпособРасчетаСебестоимостиКалькуляции, ШаблонКалькуляции, КомментарийКалькуляции, РасчетКалькуляцииПоДаннымТЧ");
	Объект.КалькуляцияРассчитана = Истина;
	
	// Ручные скидки
	СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект);
	// Конец Ручные скидки
	
	ЗаполнитьНомераСтрокТаблицаМатериалы(Объект.Материалы);
	ДействияПослеЧтенияОбъекта();
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	Если РежимОстаткиИРезервы Тогда
		НоменклатураВДокументахСервер.ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧасти(Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыОткрытияКалькуляции(СтруктураПараметры)
	
	// ПараметрическиеСпецификации
	Отказ = Ложь;
	ПроизводствоФормулыСервер.РассчитатьПараметрическиеСпецификации(Объект, "Запасы", Отказ);
	СтруктураПараметры.Вставить("Отказ", Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	// Конец ПараметрическиеСпецификации
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.КлючСвязи) Тогда
			ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект.Запасы, СтрокаТабличнойЧасти, "КлючСвязи");
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Ссылка", Объект.Ссылка);
	СтруктураДанных.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	СтруктураДанных.Вставить("ПечатьКалькуляцииСкрыта", ПечатьКалькуляцииСкрыта);
	СтруктураДанных.Вставить("СкидкаПроцент", СкидкаПроцент);
	СтруктураДанных.Вставить("СкидкаСумма", СкидкаСумма);
	ДанныеЗаказа = Новый Структура;
	ДанныеЗаказа.Вставить("Дата", Объект.Дата);
	ДанныеЗаказа.Вставить("Номер", Объект.Номер);
	Для каждого Реквизит Из Метаданные.Документы.ЗаказПокупателя.Реквизиты Цикл
		ДанныеЗаказа.Вставить(Реквизит.Имя, Объект[Реквизит.Имя]);
	КонецЦикла;
	СтруктураДанных.Вставить("ДанныеЗаказа", ДанныеЗаказа);
	СтруктураДанных.Вставить("ВидыЦен", Объект.ВидыЦенКалькуляции.Выгрузить().ВыгрузитьКолонку("ВидЦен"));
	ТаблицаЗапасов = Объект.Запасы.Выгрузить();
	СтруктураДанных.Вставить("Запасы", ТаблицаЗапасов);
	ТаблицаРабот = Объект.Работы.Выгрузить();
	СтруктураДанных.Вставить("Работы", ТаблицаРабот);
	ТаблицаМатериалов = Объект.Материалы.Выгрузить();
	СтруктураДанных.Вставить("Материалы", ТаблицаМатериалов);
	ТаблицаИсполнителей = Объект.Исполнители.Выгрузить();
	СтруктураДанных.Вставить("Исполнители", ТаблицаИсполнителей);
	ТаблицаКалькуляции = Объект.Калькуляция.Выгрузить();
	СтруктураДанных.Вставить("Калькуляция", ТаблицаКалькуляции);
	ТаблицаПараметрыДоставки = Объект.ПараметрыДоставки.Выгрузить();
	СтруктураДанных.Вставить("ПараметрыДоставки", ТаблицаПараметрыДоставки);
	СтруктураПараметры.Вставить("АдресДанных", ПоместитьВоВременноеХранилище(СтруктураДанных, УникальныйИдентификатор));
	
КонецПроцедуры

#КонецОбласти

#Область Прослеживаемость

&НаКлиенте
Процедура ОбработкаВыбораРНПТННаКлиенте(ВыбранноеЗначение)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторСтроки) Тогда
			СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;
		ОбработкаВыбораРНПТННаСервере(СтрокаТабличнойЧасти.ИдентификаторСтроки, ВыбранноеЗначение);
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбработкаВыбораГТДНаКлиенте(ВыбранноеЗначение)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		// Если в результате выбора пришло только значение,
		// то переложим его в структуру.
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.НомераГТД") Тогда
			ВыбранноеЗначение = Новый Структура("НомерГТД", ВыбранноеЗначение);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
			
			ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
			Если ДатаГТД > КонецДня(Объект.Дата) Тогда
				
				ТекстСообщения = НСтр("ru ='Выбранная ГТД датирована более поздней датой, чем текущий документ'");
				ТекстПутьКДанным = СтрШаблон("Объект.Запасы[%1].РНПТ", СтрокаТабличнойЧасти.ПолучитьИдентификатор());
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , ТекстПутьКДанным);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораРНПТННаСервере(ИдентификаторСтроки, ВыбранноеЗначение)
	
	ПрослеживаемостьФормыУНФ.ОбработкаВыбораРНПТН(ЭтотОбъект, ИдентификаторСтроки, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСвязанныеЗаписи(СтрокаЗапасы)
	
	СтруктураОтбора = Новый Структура("ИдентификаторСтроки", СтрокаЗапасы.ИдентификаторСтроки);
	МассивСтрокСведенияПрослеживаемости = Объект.СведенияПрослеживаемости.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаТЧ Из МассивСтрокСведенияПрослеживаемости Цикл
		Объект.СведенияПрослеживаемости.Удалить(СтрокаТЧ);
	КонецЦикла;
	ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаЗапасы);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПризнакПрослеживаемости()
	
	Если Не КэшЗначений.Свойство("ВестиУчетПрослеживаемыхТоваров") Тогда
		КэшЗначений.Вставить("ВестиУчетПрослеживаемыхТоваров", ВестиУчетПрослеживаемыхТоваров());
	КонецЕсли;
	ИспользуетсяПрослеживаемость = КэшЗначений.ВестиУчетПрослеживаемыхТоваров;
	ПрослеживаемостьФормыУНФ.ОбновитьПризнакПрослеживаемости(Объект.Запасы, Объект.СведенияПрослеживаемости, ИспользуетсяПрослеживаемость);
	Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВестиУчетПрослеживаемыхТоваров()
	
	ВестиУчетПрослеживаемыхТоваров = ПрослеживаемостьУНФ.ВедетсяУчетПрослеживаемыхТоваров(Объект.Дата);
	
	Возврат ВестиУчетПрослеживаемыхТоваров;
	
КонецФункции

&НаСервере
Процедура ОбновитьОтображениеПрослеживаемости()
	
	ПрослеживаемостьФормыУНФ.ПриСозданииФормы(ЭтотОбъект, КэшЗначений);
	Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНомерГТДПриРНПТПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
		
		ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
		Если ДатаГТД > КонецДня(Объект.Дата) Тогда
			
			ТекстСообщения = НСтр("ru ='Внимание: выбранная ГТД датирована более поздней датой, чем текущий документ'");
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Запасы",
			СтрокаТабличнойЧасти.НомерСтроки, "НомерГТД");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , КонтекстноеПоле);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область Промокоды
&НаКлиенте
Процедура ОповещениеВведенПромокод(Результат, ДополнительныеПараметры) Экспорт
	
	ТребуетсяПересчетСкидок = Ложь;
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	Промокод = Неопределено;
	ПредъявленныеПромокоды = Объект.ПримененныеПромокоды.НайтиСтроки(Новый Структура("ЭтоАктивацияПромокода", Ложь));
	Если НЕ Результат.Свойство("Промокод", Промокод) ИЛИ Не ЗначениеЗаполнено(Промокод) Тогда
		Если ПредъявленныеПромокоды.Количество() > 0 Тогда
			Для Каждого СтрокаПредъявленногоПромокода Из ПредъявленныеПромокоды Цикл
				Объект.ПримененныеПромокоды.Удалить(СтрокаПредъявленногоПромокода);
			КонецЦикла;
			ПредъявленныеПромокоды.Очистить();
			ТребуетсяПересчетСкидок = Истина;
		КонецЕсли;
	КонецЕсли;		
	
	СтрокаПромокода = Неопределено;
	Если ПредъявленныеПромокоды.Количество() > 0 И ЗначениеЗаполнено(Промокод) Тогда
		СтрокаПромокода = ПредъявленныеПромокоды[0];
	ИначеЕсли ЗначениеЗаполнено(Промокод) Тогда
		СтрокаПромокода = Объект.ПримененныеПромокоды.Добавить();
	КонецЕсли;
	Если Не СтрокаПромокода = Неопределено Тогда
		Если СтрокаПромокода.Промокод = Промокод Тогда
			Возврат;
		КонецЕсли;
		СтрокаПромокода.Промокод = Промокод;
		УсловиеПредоставленияСкидки = Неопределено;
		Если Результат.Свойство("УсловиеПредоставленияСкидки") Тогда
			УсловиеПредоставленияСкидки = Результат.УсловиеПредоставленияСкидки;
		КонецЕсли;
		СтрокаПромокода.УсловиеПредоставленияСкидки = УсловиеПредоставленияСкидки;		
		ТребуетсяПересчетСкидок = Истина;
	КонецЕсли; 

	Если ТребуетсяПересчетСкидок Тогда
		РассчитатьСкидкиНаценки(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеПромокода()
	ПромокодВведен = Ложь;
	ПромокодСработал = Ложь;
	ПредъявленныеПромокоды = Объект.ПримененныеПромокоды.НайтиСтроки(Новый Структура("ЭтоАктивацияПромокода", Ложь));
	ПримененныеСкидки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Объект.СкидкиНаценки.Выгрузить(,"СкидкаНаценка").ВыгрузитьКолонку("СкидкаНаценка"));
	СкидкиУсловий = ПромокодыУНФ.СкидкиСвязанныеСУсловиемНаПромокод(Объект.ПримененныеПромокоды.Выгрузить(ПредъявленныеПромокоды, "УсловиеПредоставленияСкидки"));
	Для Каждого СтрокаПромокода Из ПредъявленныеПромокоды Цикл
		Если ЗначениеЗаполнено(СтрокаПромокода.Промокод) Тогда
			ПромокодВведен = Истина;
			ПромокодСработал = Истина;
			СкидкиПромокода = СкидкиУсловий[СтрокаПромокода.УсловиеПредоставленияСкидки];
			СкидкиНеСработали = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СкидкиПромокода, ПримененныеСкидки);
			Если СкидкиНеСработали.Количество() = СкидкиПромокода.Количество() Тогда
				СтрокаПромокода.СкидкаПредоставлена = Ложь;
				// Если хотя бы один промокод не сработал (т.е. ни одной связанной с ним скидки нет в документе)
				// Отразим на форме
				ПромокодСработал = Ложь;
			Иначе
				СтрокаПромокода.СкидкаПредоставлена = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
    ПромокодыПереопределяемый.ДобавитьПромокодыКВыдаче(Объект.ПримененныеПромокоды, Объект.СкидкиНаценки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКартинкуПромокода()
	Если ПромокодВведен И Объект.СкидкиРассчитаны и НЕ ПромокодСработал Тогда
		Элементы.ДобавитьПромокод.Картинка = БиблиотекаКартинок.ВведенКупонВнимание;
	ИначеЕсли ПромокодВведен Тогда
		Элементы.ДобавитьПромокод.Картинка = БиблиотекаКартинок.ВведенКупон;	
	Иначе
		Элементы.ДобавитьПромокод.Картинка = БиблиотекаКартинок.ВвестиКупон;
	КонецЕсли
КонецПроцедуры
	
&НаКлиенте
Процедура ДобавитьПромокод(Команда)
	ТекущийПромокод = "";
	ПромокодыПредъявленные = Объект.ПримененныеПромокоды.НайтиСтроки(Новый Структура("ЭтоАктивацияПромокода", Ложь));
	Если ПромокодыПредъявленные.Количество() > 0 Тогда
		ТекущийПромокод = ПромокодыПредъявленные[0].Промокод;
	КонецЕсли;
	ПараметрыОткрытия = Новый Структура("Промокод", ТекущийПромокод);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеВведенПромокод", ЭтаФорма);
	ОткрытьФорму("Справочник.АвтоматическиеСкидки.Форма.ФормаВводаПромокода", ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти

#Область ОтменаТоваровУслуг

&НаСервере
Процедура ЗаполнитьДанныеПоОтменеТоваров()
	
	Для Каждого Строка Из Объект.Запасы Цикл
		Строка.ПричинаОтменыДатаЗапрета = НСтр("ru = 'выбрать'"); 
	КонецЦикла;
	
	Если Объект.ОтмененныеЗапасы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОтменненныйТовар Из Объект.ОтмененныеЗапасы Цикл
		ОтменненныйТовар.ВернутьТовар = НСтр("ru = 'вернуть'");
		ОтменненныйТовар.Редактируется = Ложь;
		ОтменненныйТовар.ИндексСвязаннойСтрокиЗапаса = 0;
		ОтменненныйТовар.ПричинаОтменыДатаЗапрета = НСтр("ru = 'выбрать'");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыОтменыТоваров()
	
	Справочники.ПроцессыСостоянийЗаказов.УстановитьПризнакОбязательногоЗаполненияПоля(Элементы, "ОтмененныеЗапасы.ПричинаОтмены", Объект);
	
	Массив = Новый Массив(); 
	Массив.Добавить(Тип("СправочникСсылка.ПричиныОтменыЗаказа")); 
	ОписаниеТиповПричин = Новый ОписаниеТипов(Массив);
	
	ВидимостьГруппыОтмененных = Элементы.ГруппаОтмененныеТоварыУслуги.Видимость;
	Элементы.ЗапасыПричинаОтмены.ОграничениеТипа = ОписаниеТиповПричин;
	Элементы.РаботыПричинаОтмены.ОграничениеТипа = ОписаниеТиповПричин;
	
	ОтборПоРаботе = Ложь;
	Если Элементы.ЗНСтраницы.ТекущаяСтраница = Элементы.ЗНГруппаРаботы Тогда
		ОтборПоРаботе = Истина;
	КонецЕсли;
	
	Элементы.ОтмененныеЗапасы.ОтборСтрок = Новый ФиксированнаяСтруктура("ЭтоРабота", ОтборПоРаботе);
	РедактируемыеТовары = Объект.ОтмененныеЗапасы.НайтиСтроки(Новый Структура("Редактируется, ЭтоРабота", Истина, ОтборПоРаботе));
	КоличествоРедактируемыхТоваров = РедактируемыеТовары.Количество();
	
	КоличествоОтмененныхВТаблице = Объект.ОтмененныеЗапасы.НайтиСтроки(Новый Структура("Редактируется, ЭтоРабота", Ложь, ОтборПоРаботе));
	КоличествоОтмененных = Объект.ОтмененныеЗапасы.НайтиСтроки(Новый Структура("ЭтоРабота", ОтборПоРаботе));
	
	Если КоличествоРедактируемыхТоваров <> 0 Тогда
		ЗаголовокГруппыОтмененныхТоваров = СтрШаблон(НСтр("ru ='%1, редактируется: %2'"), КоличествоОтмененныхВТаблице.Количество(), КоличествоРедактируемыхТоваров);
	Иначе
		ЗаголовокГруппыОтмененныхТоваров = СтрШаблон(НСтр("ru = '%1'"), КоличествоОтмененныхВТаблице.Количество());
	КонецЕсли;
	
	РежимРедактированияЗапасов = КоличествоРедактируемыхТоваров > 0;
	
	Элементы.ГруппаОтмененныеТоварыУслуги.Видимость = КоличествоОтмененных.Количество() <> 0 ИЛИ ОтображатьГруппуОтмененных;
	
	Если ОтборПоРаботе Тогда
		ИмяТЧ = "Работы";
	Иначе
		ИмяТЧ = "Запасы";
	КонецЕсли;

	Если РежимРедактированияЗапасов Тогда
		Элементы[ИмяТЧ + "ГруппаОтменаТоваров"].ФиксацияВТаблице = ФиксацияВТаблице.Право;
		Элементы[ИмяТЧ + "Отменен"].ФиксацияВТаблице = ФиксацияВТаблице.Право;
		Элементы[ИмяТЧ + "Отменен"].Гиперссылка = Истина;		
		Элементы[ИмяТЧ + "Отменен"].ГиперссылкаЯчейки = Истина;
		Элементы[ИмяТЧ + "КоличествоОтмены"].Гиперссылка = Истина;		
		Элементы[ИмяТЧ + "КоличествоОтмены"].ГиперссылкаЯчейки = Истина;
	Иначе
		Элементы[ИмяТЧ + "ГруппаОтменаТоваров"].ФиксацияВТаблице = ФиксацияВТаблице.Нет;
		Элементы[ИмяТЧ + "Отменен"].ФиксацияВТаблице = ФиксацияВТаблице.Нет;
	КонецЕсли;

	Элементы.ДекорацияРежимРедактирования.Видимость = РежимРедактированияЗапасов;
	Элементы.ЗапасыПричинаОтменыДатаЗапрета.Видимость = ТолькоПросмотр;
	Элементы.ЗапасыПричинаОтмены.Видимость = НЕ Элементы.ЗапасыПричинаОтменыДатаЗапрета.Видимость;
	
	Элементы.РаботыПричинаОтменыДатаЗапрета.Видимость = ТолькоПросмотр;
	Элементы.РаботыПричинаОтмены.Видимость = НЕ Элементы.ЗапасыПричинаОтменыДатаЗапрета.Видимость;
	
	Элементы.ОтмененныеЗапасыПричинаОтменыДатаЗапрета.Видимость = ТолькоПросмотр;
	Элементы.ОтмененныеЗапасыПричинаОтмены.Видимость = НЕ Элементы.ЗапасыПричинаОтменыДатаЗапрета.Видимость;
	
	Если Элементы.ЗНСтраницы.ТекущаяСтраница = Элементы.ЗНГруппаРаботы Тогда
		Элементы.Переместить(Элементы.ГруппаОтмененныеТоварыУслуги, Элементы.ЗНГруппаРаботы);
		Элементы.ГруппаОтмененныеТоварыУслуги.Заголовок = НСтр("ru = 'Отмененные работы'");
	Иначе
		Элементы.Переместить(Элементы.ГруппаОтмененныеТоварыУслуги, Элементы.ЗНГруппаЗапасы);
		Элементы.ГруппаОтмененныеТоварыУслуги.Заголовок = НСтр("ru = 'Отмененные товары'");
	КонецЕсли;
	
	Если ВидимостьГруппыОтмененных = Ложь И Элементы.ГруппаОтмененныеТоварыУслуги.Видимость Тогда
		Элементы.ГруппаОтмененныеТоварыУслуги.Скрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВернутьЗапасы(ДанныеЗапаса, ТаблицаОбработки = "Запасы", ПричинаОтмены = Неопределено)
	
	ЗапасОтменен = ДанныеЗапаса.Отменен = 0;
	РежимРедактированияЗапасов = Истина;
	
	Если ЗапасОтменен Тогда
		
		ДанныеЗапаса.Отменен = 1;
		
		ДанныеЗапаса.НоменклатураДоОтмены = ДанныеЗапаса.Номенклатура;
		ДанныеЗапаса.КоличествоДоОтмены   = ДанныеЗапаса.Количество;
		ДанныеЗапаса.ЦенаДоОтмены		  = ДанныеЗапаса.Цена;
		
		Если ДанныеЗапаса.Свойство("ЕдиницаИзмерения") Тогда
			ДанныеЗапаса.ЕдиницаИзмеренияДоОтмены = ДанныеЗапаса.ЕдиницаИзмерения;
		КонецЕсли;
		
		Если ДанныеЗапаса.Свойство("Партия") Тогда
			ДанныеЗапаса.ПартияДоОтмены 	  = ДанныеЗапаса.Партия;
		КонецЕсли;
		
		Если ДанныеЗапаса.Свойство("Серия") Тогда
			ДанныеЗапаса.СерияДоОтмены 		  = ДанныеЗапаса.Серия;
		КонецЕсли;
		
		Если ДанныеЗапаса.Свойство("Характеристика") Тогда
			ДанныеЗапаса.ХарактеристикаДоОтмены = ДанныеЗапаса.Характеристика;
		КонецЕсли;
		
		Если ДанныеЗапаса.Свойство("Кратность") Тогда
			ДанныеЗапаса.КратностьДоОтмены = ДанныеЗапаса.Характеристика;
		КонецЕсли;
		
		Если ДанныеЗапаса.Свойство("Коэффициент") Тогда
			ДанныеЗапаса.КоэффициентДоОтмены = ДанныеЗапаса.Коэффициент;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеЗапаса.ПричинаОтмены) Тогда
			ДанныеЗапаса.ПричинаОтмены = ВыбраннаяПричинаОтменыЗапаса;
			Если ЗначениеЗаполнено(ВыбраннаяПричинаОтменыЗапаса) Тогда
				ДанныеЗапаса.ПричинаОтменыДатаЗапрета = Строка(ВыбраннаяПричинаОтменыЗапаса);
			Иначе
				ДанныеЗапаса.ПричинаОтменыДатаЗапрета = НСтр("ru = 'выбрать'");
			КонецЕсли;
		КонецЕсли;
		
		ДанныеЗапаса.ЦенаДоОтменыСтрокой = Формат(ДанныеЗапаса.Цена, "ЧДЦ=2");
		ДанныеЗапаса.КоличествоДоОтменыСтрокой = Формат(ДанныеЗапаса.Количество, "ЧДЦ=3");
		
		Если ДанныеЗапаса.Свойство("Кратность") Тогда
			ДанныеЗапаса.КратностьДоОтменыСтрокой = Формат(ДанныеЗапаса.Кратность, "ЧДЦ=3");
		КонецЕсли; 
		
		Если ДанныеЗапаса.Свойство("Коэффициент") Тогда
			ДанныеЗапаса.КоэффициентДоОтменыСтрокой = Формат(ДанныеЗапаса.Коэффициент, "ЧДЦ=3");
		КонецЕсли;
		
		НовыйОтмененныйЗапас = Объект.ОтмененныеЗапасы.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйОтмененныйЗапас, ДанныеЗапаса);
		НовыйОтмененныйЗапас.Редактируется = Истина;
		
		Если ТаблицаОбработки = "Работы" Тогда
			НовыйОтмененныйЗапас.ЭтоРабота = Истина;
		КонецЕсли;
		
		ДанныеЗапаса.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
		
		ДанныеЗапаса.КлючСвязиОтмененные         = "КлючСвязи_"+ИндексКлючаСвязиОтмененные;
		НовыйОтмененныйЗапас.КлючСвязиОтмененные = "КлючСвязи_"+ИндексКлючаСвязиОтмененные;
		
		ИндексКлючаСвязиОтмененные = ИндексКлючаСвязиОтмененные +1;
		ДанныеЗапаса.Цена = 0;
	Иначе
		
		ДанныеЗапаса.Отменен = 0;
		ДанныеЗапаса.НоменклатураДоОтмены = Неопределено;
		ДанныеЗапаса.КоличествоДоОтмены   = Неопределено;
		ДанныеЗапаса.ЦенаДоОтмены		  = Неопределено;
		ДанныеЗапаса.ПартияДоОтмены 	  = Неопределено;
		ДанныеЗапаса.ХарактеристикаДоОтмены = Неопределено;
		ДанныеЗапаса.ЦенаДоОтменыСтрокой = Неопределено;
		ДанныеЗапаса.КоличествоДоОтменыСтрокой = Неопределено;
		ДанныеЗапаса.ЕдиницаИзмеренияДоОтмены = Неопределено;
		ДанныеЗапаса.ПричинаОтмены = Неопределено;
		ДанныеЗапаса.ПричинаОтменыДатаЗапрета = НСтр("ru = выбрать");
		
		СтруктураПоиска = Новый Структура("КлючСвязиОтмененные", ДанныеЗапаса.КлючСвязиОтмененные);
		СвязаннаяСтрока = Объект.ОтмененныеЗапасы.НайтиСтроки(СтруктураПоиска);
		
		ДанныеЗапаса.КлючСвязиОтмененные = Неопределено;
		
		Если СвязаннаяСтрока.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеЗапаса,СвязаннаяСтрока[0],,"ПричинаОтмены");
		
		Объект.ОтмененныеЗапасы.Удалить(СвязаннаяСтрока[0]);
	КонецЕсли;
	
	Партия = Неопределено;
	ДанныеЗапаса.Свойство("Партия", Партия);
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТаблицаОбработки, ДанныеЗапаса);
	
	Если ТаблицаОбработки = "Запасы" Тогда
		ЗапасыНоменклатураПриИзмененииПродолжить(Элементы.ЗапасыНоменклатура, ДанныеЗапаса.Количество, ДанныеЗапаса, Партия);
	Иначе
		РаботыНоменклатураПриИзмененииЗначения(Элементы.ЗНРаботыНоменклатура, Истина, ДанныеЗапаса); 
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеОтмененнойСтроки() Экспорт
	
	// 1.Условное оформление строк в таблице запасы
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПутьКТЧ = Элементы.Запасы.ПутьКДанным;
	
	ИсключаяПоля = Новый Массив;
	ИсключаяПоля.Добавить("ЗапасыКоличествоОтмены");
	ИсключаяПоля.Добавить("ЗапасыОтменен");
	ИсключаяПоля.Добавить("ЗапасыПричинаОтмены");
	ИсключаяПоля.Добавить("ЗапасыЕдиницаИзмеренияДоОтмены");
	ИсключаяПоля.Добавить("ЗапасыПричинаОтменыДатаЗапрета");
	
	ЗаполнитьРекурсивноПоляУсловногоОформления(Элемент.Поля, Элементы.Запасы.ПодчиненныеЭлементы, ИсключаяПоля);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(Элемент.Отбор, 
		ПутьКТЧ + ".Отменен", 1);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(Элемент, "ЦветТекста", 
		ЦветаСтиля.ЦветРамки);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(Элемент, "Шрифт", 
		ШрифтыСтиля.ЗачеркнутыйШрифтБЭД);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(Элемент, "ОтметкаНезаполненного", 
		Ложь);
		
	// 1.1 Условное оформление строк в таблице работы
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПутьКТЧ = Элементы.Работы.ПутьКДанным;
	
	ИсключаяПоля = Новый Массив;
	ИсключаяПоля.Добавить("РаботыКоличествоОтмены");
	ИсключаяПоля.Добавить("РаботыОтменен");
	ИсключаяПоля.Добавить("РаботыПричинаОтмены");
	ИсключаяПоля.Добавить("РаботыЕдиницаИзмеренияДоОтмены");
	ИсключаяПоля.Добавить("РаботыПричинаОтменыДатаЗапрета");
	
	ЗаполнитьРекурсивноПоляУсловногоОформления(Элемент.Поля, Элементы.Работы.ПодчиненныеЭлементы, ИсключаяПоля);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(Элемент.Отбор, 
		ПутьКТЧ + ".Отменен", 1);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(Элемент, "ЦветТекста", 
		ЦветаСтиля.ЦветРамки);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(Элемент, "Шрифт", 
		ШрифтыСтиля.ЗачеркнутыйШрифтБЭД);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(Элемент, "ОтметкаНезаполненного", 
		Ложь);
		
	// 1.2 Условное оформление строк в таблице материалы
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПутьКТЧ = Элементы.ЗНМатериалы.ПутьКДанным;
	
	ИсключаяПоля = Новый Массив;	
	ЗаполнитьРекурсивноПоляУсловногоОформления(Элемент.Поля, Элементы.ЗНМатериалы.ПодчиненныеЭлементы, ИсключаяПоля);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(Элемент.Отбор, 
		ПутьКТЧ + ".Отменен", 1);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(Элемент, "ЦветТекста", 
		ЦветаСтиля.ЦветРамки);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(Элемент, "Шрифт", 
		ШрифтыСтиля.ЗачеркнутыйШрифтБЭД);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(Элемент, "ОтметкаНезаполненного", 
		Ложь);
		
	// 1.3 Условное оформление строк в таблице исполнители
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПутьКТЧ = Элементы.Исполнители.ПутьКДанным;
	
	ИсключаяПоля = Новый Массив;	
	ЗаполнитьРекурсивноПоляУсловногоОформления(Элемент.Поля, Элементы.Исполнители.ПодчиненныеЭлементы, ИсключаяПоля);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(Элемент.Отбор, 
		ПутьКТЧ + ".Отменен", 1);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(Элемент, "ЦветТекста", 
		ЦветаСтиля.ЦветРамки);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(Элемент, "Шрифт", 
		ШрифтыСтиля.ЗачеркнутыйШрифтБЭД);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(Элемент, "ОтметкаНезаполненного", 
		Ложь); 
		
	// 1.4 Условное оформление строк в таблице работы
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПутьКТЧ = Элементы.ТаблицаРаботы.ПутьКДанным;
	
	ИсключаяПоля = Новый Массив;	
	ЗаполнитьРекурсивноПоляУсловногоОформления(Элемент.Поля, Элементы.ТаблицаРаботы.ПодчиненныеЭлементы, ИсключаяПоля);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(Элемент.Отбор, 
		ПутьКТЧ + ".Отменен", 1);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(Элемент, "ЦветТекста", 
		ЦветаСтиля.ЦветРамки);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(Элемент, "Шрифт", 
		ШрифтыСтиля.ЗачеркнутыйШрифтБЭД);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(Элемент, "ОтметкаНезаполненного", 
		Ложь);

	
	// 2. Подмена данных в строке запасы
	ПоляДляОформления = Новый Соответствие;
	ПутьКТЧ = Элементы.Запасы.ПутьКДанным;
	ПоляДляОформления.Вставить("ЗапасыХарактеристика", ".ХарактеристикаДоОтмены");
	ПоляДляОформления.Вставить("ЗапасыЦена", ".ЦенаДоОтменыСтрокой");
	ПоляДляОформления.Вставить("ЗапасыПартия", ".ПартияДоОтмены");
	ПоляДляОформления.Вставить("ЗапасыНоменклатура", ".НоменклатураДоОтмены");
	ПоляДляОформления.Вставить("ЗапасыКоличество", ".КоличествоДоОтменыСтрокой");
	ПоляДляОформления.Вставить("ЗапасыСерия", ".СерияДоОтмены");
	
	Для Каждого Поле Из ПоляДляОформления Цикл
		Элемент = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(Элемент.Отбор, 
			ПутьКТЧ + ".Отменен", 
			1);
		РаботаСФормой.ДобавитьОформляемыеПоля(Элемент, Поле.Ключ);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(Элемент, "Текст", 
			Новый ПолеКомпоновкиДанных(ПутьКТЧ + Поле.Значение));
	КонецЦикла;
	
	// 2.1 Подмена данных в строке работы
	ПутьКТЧ = Элементы.Работы.ПутьКДанным;
	ПоляДляОформления = Новый Соответствие;
	ПоляДляОформления.Вставить("ЗНРаботыХарактеристика", ".ХарактеристикаДоОтмены");
	ПоляДляОформления.Вставить("ЗНРаботыЦена", ".ЦенаДоОтменыСтрокой");
	ПоляДляОформления.Вставить("ЗНРаботыПартия", ".ПартияДоОтмены");
	ПоляДляОформления.Вставить("ЗНРаботыНоменклатура", ".НоменклатураДоОтмены");
	ПоляДляОформления.Вставить("ЗНРаботыКоличество", ".КоличествоДоОтменыСтрокой");
	ПоляДляОформления.Вставить("ЗНРаботыСерия", ".СерияДоОтмены");
	ПоляДляОформления.Вставить("ЗНРаботыКратность", ".КратностьДоОтменыСтрокой");
	ПоляДляОформления.Вставить("ЗНРаботыКоэффициент", ".КоэффициентДоОтменыСтрокой");
	
	Для Каждого Поле Из ПоляДляОформления Цикл
		Элемент = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(Элемент.Отбор, 
			ПутьКТЧ + ".Отменен", 
			1);
		РаботаСФормой.ДобавитьОформляемыеПоля(Элемент, Поле.Ключ);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(Элемент, "Текст", 
			Новый ПолеКомпоновкиДанных(ПутьКТЧ + Поле.Значение));
	КонецЦикла; 
		
	// 2.3 Подмена данных в строке работы
	ПутьКТЧ = Элементы.ТаблицаРаботы.ПутьКДанным;
	ПоляДляОформления = Новый Соответствие;
	ПоляДляОформления.Вставить("ТаблицаРаботыХарактеристика", ".ХарактеристикаДоОтмены");
	ПоляДляОформления.Вставить("ТаблицаРаботыНоменклатура", ".НоменклатураДоОтмены");
	
	Для Каждого Поле Из ПоляДляОформления Цикл
		Элемент = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(Элемент.Отбор, 
			ПутьКТЧ + ".Отменен", 
			1);
		РаботаСФормой.ДобавитьОформляемыеПоля(Элемент, Поле.Ключ);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(Элемент, "Текст", 
			Новый ПолеКомпоновкиДанных(ПутьКТЧ + Поле.Значение));
	КонецЦикла;
		
	// 3. Условное оформление таблицы отмененных
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ПутьКТЧ = Элементы.ОтмененныеЗапасы.ПутьКДанным;
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ЭлементОформления.Отбор, 
			ПутьКТЧ + ".Редактируется", 
			Истина);
	РаботаСФормой.ДобавитьОформляемыеПоля(ЭлементОформления, "ОтмененныеЗапасыВернутьТовар");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(ЭлементОформления, "Текст", 
			 НСтр("ru = '<редактируется>'"));
 
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ИсключаяПоля = Новый Массив;
	ЗаполнитьРекурсивноПоляУсловногоОформления(ЭлементОформления.Поля, Элементы.ОтмененныеЗапасы.ПодчиненныеЭлементы, ИсключаяПоля);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ЭлементОформления.Отбор, 
			ПутьКТЧ + ".Редактируется", 
			Истина);
			
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(ЭлементОформления, "ЦветТекста", 
			 ЦветаСтиля.ЦветРамки);
			 
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ПутьКТЧ = Элементы.Запасы.ПутьКДанным;
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ЭлементОформления.Отбор, 
			ПутьКТЧ + ".Отменен", 
			0);
	РаботаСФормой.ДобавитьОформляемыеПоля(ЭлементОформления, "ЗапасыПричинаОтмены");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(ЭлементОформления, "ОтметкаНезаполненного", Ложь);
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ПутьКТЧ = Элементы.Работы.ПутьКДанным;
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ЭлементОформления.Отбор, 
			ПутьКТЧ + ".Отменен", 
			0);
	РаботаСФормой.ДобавитьОформляемыеПоля(ЭлементОформления, "РаботыПричинаОтмены");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(ЭлементОформления, "ОтметкаНезаполненного", Ложь);

КонецПроцедуры

// Процедура заполняет всеми подчиненными полями (с учетом вложенности в группы) оформляемые поля условного оформления
// Пример вызова: ЗаполнитьРекурсивноПоляУсловногоОформления(ЭлементУО.Поля, Элементы.Товары.ПодчиненныеЭлементы).
//
// Параметры:
//	ОформляемыеПоляКомпоновкиДанных	- ОформляемыеПоляКомпоновкиДанных -
//	КоллекцияЭлементов - ЭлементыФормы -
//	ИсключаяПоля - Массив -
//	             - Строка -
//	             - Неопределено - значение по умолчанию Неопределено, массив имен элементов, которые не нужно добавлять в оформляемые поля.
// 
&НаСервере
Процедура ЗаполнитьРекурсивноПоляУсловногоОформления(ОформляемыеПоляКомпоновкиДанных, КоллекцияЭлементов, Знач ИсключаяПоля = Неопределено) Экспорт
	
	Если ТипЗнч(ИсключаяПоля) = Тип("Строка") Тогда
		ИсключаяПоля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсключаяПоля);
	КонецЕсли;
	
	Для Каждого Поле Из КоллекцияЭлементов Цикл
		Если ТипЗнч(Поле) = Тип("ПолеФормы") Тогда
			Если ИсключаяПоля = Неопределено
				Или ИсключаяПоля.Найти(Поле.Имя) = Неопределено Тогда
					ПолеЭлемента = ОформляемыеПоляКомпоновкиДанных.Элементы.Добавить();
					ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Поле.Имя);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Поле) = Тип("ГруппаФормы")Тогда	
			ЗаполнитьРекурсивноПоляУсловногоОформления(ОформляемыеПоляКомпоновкиДанных, Поле.ПодчиненныеЭлементы, ИсключаяПоля);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьОтмененныеЗапасы()
	
	ОтмененныеЗапасы = Объект.Запасы.НайтиСтроки(Новый Структура("Отменен", 1));
	ОтмененныеРаботы = Объект.Работы.НайтиСтроки(Новый Структура("Отменен", 1));
	
	Если ОтмененныеЗапасы.Количество() = 0 И ОтмененныеРаботы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОтмененныйЗапас Из ОтмененныеЗапасы Цикл
		Объект.Запасы.Удалить(ОтмененныйЗапас);
	КонецЦикла;
	
	Для Каждого ОтмененнаяРабота Из ОтмененныеРаботы Цикл
		ТабличныеЧастиУНФКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "Материалы", Ложь, ОтмененнаяРабота);
		ТабличныеЧастиУНФКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "Исполнители", Ложь, ОтмененнаяРабота);

		Объект.Работы.Удалить(ОтмененнаяРабота);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьДанныеОтмененныхТоваров(ТекущийОбъект)
	
	Для Каждого ОтмененныйЗапас Из ТекущийОбъект.ОтмененныеЗапасы Цикл
		
		Если НЕ ЗначениеЗаполнено(ОтмененныйЗапас.ДатаОтмены) Тогда
			ОтмененныйЗапас.ДатаОтмены = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОтмененныйЗапас.Автор) Тогда
			ОтмененныйЗапас.Автор = 
			УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойОтветственный");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОтмененныйЗапас.СостояниеОтмены) Тогда
			ОтмененныйЗапас.СостояниеОтмены = ТекущийОбъект.СостояниеЗаказа;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПричиныОтмены(Результат, ДополнительныеПараметры) Экспорт
	
	ОтменитьНеотгруженныеТоварыСервер(); 
	
	 Если Элементы.ЗНСтраницы.ТекущаяСтраница = Элементы.ЗНГруппаРаботы Тогда
		ТаблицаИзменения = Объект.Работы;
		ИмяТЧ = "Работы";
	Иначе
		ТаблицаИзменения = Объект.Запасы;
		ИмяТЧ = "Запасы";
	КонецЕсли;
	
	БылиОтменененыСтроки = Ложь;
	Для Каждого Строка Из ТаблицаИзменения Цикл
		
		Если Строка.НеОтгружено = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.ПричинаОтмены = Результат;
		Если Строка.Отменен = 0 Тогда
			БылиОтменененыСтроки = Истина;
			ОтменитьВернутьЗапасы(Строка, ИмяТЧ);
		КонецЕсли;
		
	КонецЦикла;
	
	НастроитьЭлементыОтменыТоваров();
	
	Если НЕ БылиОтменененыСтроки Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Заказ полностью отгружен'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПричиныОтменыОтмененные(Результат, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = Элементы.ОтмененныеЗапасы.ВыделенныеСтроки;
	
	Если ТипЗнч(ВыделенныеСтроки) <> Тип("Массив") И ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		
		СтрокаТабличнойЧасти = Объект.ОтмененныеЗапасы.НайтиПоИдентификатору(Строка);
		СтрокаТабличнойЧасти.ПричинаОтмены = Результат;
		
		Если НЕ СтрокаТабличнойЧасти.Редактируется Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СтрокаТабличнойЧасти.ЭтоРабота Тогда
			СтрокаЗапаса = Объект.Запасы.НайтиСтроки(Новый Структура("КлючСвязиОтмененные", СтрокаТабличнойЧасти.КлючСвязиОтмененные));
		Иначе
			СтрокаЗапаса = Объект.Работы.НайтиСтроки(Новый Структура("КлючСвязиОтмененные", СтрокаТабличнойЧасти.КлючСвязиОтмененные));
		КонецЕсли;
		
		Если СтрокаЗапаса.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
	
		СтрокаЗапаса[0].ПричинаОтмены = СтрокаТабличнойЧасти.ПричинаОтмены;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОтменитьНеотгруженныеТоварыСервер()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПокупателейОстаткиИОбороты.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателейОстаткиИОбороты.Характеристика КАК Характеристика,
	|	ЗаказыПокупателейОстаткиИОбороты.КоличествоПриход КАК Заказано,
	|	ЗаказыПокупателейОстаткиИОбороты.КоличествоРасход КАК Получено,
	|	ЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.ОстаткиИОбороты(, , , , ЗаказПокупателя = &Заказ) КАК ЗаказыПокупателейОстаткиИОбороты
	|ГДЕ
	|	ЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток > 0";
	
	Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
	Результат = Запрос.Выполнить().Выгрузить();
	
	НеотгруженныеТоварыМассив = Новый Массив;
	Если Элементы.ЗНСтраницы.ТекущаяСтраница = Элементы.ЗНГруппаРаботы Тогда
		ТаблицаИзменения = Объект.Работы;
	Иначе
		ТаблицаИзменения = Объект.Запасы;
	КонецЕсли;
	
	Для Каждого Товар ИЗ ТаблицаИзменения Цикл
		
		ОстаткиПоТовару = Результат.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Товар.Номенклатура, Товар.Характеристика));
		
		Если ОстаткиПоТовару.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОстаткиПоТовару[0].КоличествоКонечныйОстаток = 0 Тогда
			Товар.НеОтгружено = 0;
		КонецЕсли; 
		
		Если ОстаткиПоТовару[0].Заказано = Товар.Количество И ОстаткиПоТовару[0].КоличествоКонечныйОстаток > 0 Тогда
			Товар.НеОтгружено = ОстаткиПоТовару[0].КоличествоКонечныйОстаток;
			Продолжить;
		КонецЕсли;
		
		Если ОстаткиПоТовару[0].Заказано > Товар.Количество И Товар.Количество < ОстаткиПоТовару[0].Получено Тогда
			ОстаткиПоТовару[0].Получено = ОстаткиПоТовару[0].Получено - Товар.Количество;
			Продолжить;
		КонецЕсли;
		
		Товар.НеОтгружено = ОстаткиПоТовару[0].КоличествоКонечныйОстаток;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура РаботыНоменклатураПриИзмененииЗначения(Элемент, ОтменаСтроки = Ложь, СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	КонецЕсли;

	ИмяТабличнойЧасти = "Работы";
	ТабличныеЧастиУНФКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "Материалы", ОтменаСтроки, СтрокаТабличнойЧасти);
	ТабличныеЧастиУНФКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "Исполнители", ОтменаСтроки, СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Материалы = "";
	СтрокаТабличнойЧасти.Исполнители = "";
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
	СтруктураДанные.Вставить("НормаВремени", 1);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);	
	
	Если ВидРаботВШапке И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("ВидРабот", Объект.ВидРабот);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	ИначеЕсли (НЕ ВидРаботВШапке) И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("ВидРабот", СтрокаТабличнойЧасти.ВидРабот);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	КонецЕсли;
	
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	// Конец ДисконтныеКарты 
	
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Объект, СтрокаТабличнойЧасти, СтруктураДанные);

	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);

	Если СтруктураДанные.Свойство("МинимальнаяЦена") 
		И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
		СтрокаТабличнойЧасти.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;			
	КонецЕсли;
	
	Если СтруктураДанные.ЭтоНабор И НЕ СтруктураДанные.ИспользоватьХарактеристики Тогда
		
		// Наборы
		ЗаменитьСтрокуДаннымиНабора(ЭтотОбъект, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, СтруктураДанные);
		
		ЗаполнитьПризнакиИспользованияХарактеристик();
		
		// АвтоматическиеСкидки.
		СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
		// Конец АвтоматическиеСкидки
	
		#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
		Элементы.Работы.ЗакончитьРедактированиеСтроки(Истина);
		#КонецЕсли 
		
	Иначе
		
		СтрокаТабличнойЧасти.Количество = СтруктураДанные.НормаВремени;
		СтрокаТабличнойЧасти.Кратность = 1; 
		СтрокаТабличнойЧасти.Коэффициент = 1;
		СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
		СтрокаТабличнойЧасти.Содержание = "";
		
		СтрокаТабличнойЧасти.ЭтоНабор = СтруктураДанные.ЭтоНабор;
		СтрокаТабличнойЧасти.ФиксированнаяСтоимость = СтруктураДанные.ФиксированнаяСтоимость;
		
		СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
		СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
		СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
		
		Если СтруктураДанные.ИспользоватьХарактеристики Тогда
			Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
				СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
				СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
			Иначе
				СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
			КонецЕсли;
		КонецЕсли;
		
		Если (ВидРаботВШапке И ЗначениеЗаполнено(Объект.ВидЦен) И СтруктураДанные.Свойство("Цена")) ИЛИ СтруктураДанные.Свойство("Цена") Тогда
			СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.ТипНоменклатурыУслуга = СтруктураДанные.ЭтоУслуга;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			Элементы.ЗНРаботаМатериалы.Доступность = НЕ СтрокаТабличнойЧасти.ТипНоменклатурыУслуга;
		КонецЕсли;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти("Работы");
		
	КонецЕсли;
	
	ПодборНоменклатурыИзСписка = Ложь;
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура ОтмененныеЗапасыПередУдалением(Элемент, Отказ)
	
	Для Каждого ИдентификаторСтроки Из Элемент.ВыделенныеСтроки Цикл
		Строка = Объект.ОтмененныеЗапасы.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если Строка.ЭтоРабота Тогда
			ИмяТЧ = "Работы";
		Иначе
			ИмяТЧ = "Запасы";
		КонецЕсли;
		
		СвязанныйЗапас = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("КлючСвязиОтмененные", Строка.КлючСвязиОтмененные));
		Если СвязанныйЗапас.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОтменитьВернутьЗапасы(СвязанныйЗапас[0], ИмяТЧ);
	КонецЦикла;
	
	ОтображатьГруппуОтмененных = Истина;
	НастроитьЭлементыОтменыТоваров();

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтменуТоваров(СтрокиОбработки, ИмяТЧ, ПричинаОтмены = Неопределено, Действие = "ОтменаСтроки")
		
	Если ТипЗнч(СтрокиОбработки) <> Тип("Массив") И СтрокиОбработки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТЧ = "Работы" Тогда
		
		Для Каждого ВыделеннаяСтрока Из СтрокиОбработки Цикл
			
			Если ТипЗнч(ВыделеннаяСтрока) = Тип("Число") Тогда
				СтрокаТабличнойЧасти = Объект[ИмяТЧ].НайтиПоИдентификатору(ВыделеннаяСтрока);;
			Иначе
				СтрокаТабличнойЧасти = ВыделеннаяСтрока;
			КонецЕсли;
			
			ОтменитьВернутьЗапасы(СтрокаТабличнойЧасти,ИмяТЧ, ПричинаОтмены);
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	ОтказВОтмене = Ложь;
	СтруктураОтбора = Новый Структура;
	ВсеСтрокиВарианта = Объект.Запасы.НайтиСтроки(СтруктураОтбора);
	
	ПроверкаНаборов = СтрокиОбработки.Количество() <> ВсеСтрокиВарианта.Количество();
	Если НЕ ПроверкаНаборов Тогда
		Для Каждого Строка Из СтрокиОбработки Цикл
			СтрокаТабличнойЧасти = Объект.Запасы.НайтиПоИдентификатору(Строка);
			ОтменитьВернутьЗапасы(СтрокаТабличнойЧасти, ИмяТЧ, ПричинаОтмены);
		КонецЦикла;
		НастроитьЭлементыОтменыТоваров();
		Возврат;
	КонецЕсли;
	
	ДанныеНабора = Новый Структура("НоменклатураНабора, ХарактеристикаНабора");
	Для Каждого ВыделеннаяСтрока Из СтрокиОбработки Цикл
		
		Если ТипЗнч(ВыделеннаяСтрока) = Тип("Число") Тогда
			ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
		Иначе
			ТекущиеДанныеСтроки = ВыделеннаяСтрока;
		КонецЕсли;
		
		Если ДанныеНабора.НоменклатураНабора = Неопределено Тогда
			ДанныеНабора.НоменклатураНабора = ТекущиеДанныеСтроки.НоменклатураНабора;
			ДанныеНабора.ХарактеристикаНабора = ТекущиеДанныеСтроки.ХарактеристикаНабора;
		ИначеЕсли ДанныеНабора.НоменклатураНабора<>ТекущиеДанныеСтроки.НоменклатураНабора 
			ИЛИ ДанныеНабора.ХарактеристикаНабора<>ТекущиеДанныеСтроки.ХарактеристикаНабора Тогда
			// Выделены строки разных наборов
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Действие недоступно для наборов!'");
			Сообщение.Поле = "Объект.Запасы";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли; 
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеНабора.НоменклатураНабора) Тогда
		Если Действие = "ГрупповоеИзменение" Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Действие недоступно для наборов!'");
			Сообщение.Поле = "Объект.Запасы";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
		ДобавленныеНаборы = Объект.ДобавленныеНаборы.НайтиСтроки(ДанныеНабора);
		Оповещение = Новый ОписаниеОповещения("ЗапасыПередОтменойЗавершение", ЭтотОбъект, ДанныеНабора);
		СписокКнопок = Новый СписокЗначений;
		Если ДобавленныеНаборы.Количество()>0 Тогда
			ТекстВопроса = НСтр("ru = 'Набор можно отменить только целиком'");
			СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Отменить'"));
		КонецЕсли; 
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Оповещение, ТекстВопроса, СписокКнопок, 0, КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из СтрокиОбработки Цикл
		
		Если ТипЗнч(ВыделеннаяСтрока) = Тип("Число") Тогда
			СтрокаТабличнойЧасти = Объект.Запасы.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Иначе
			СтрокаТабличнойЧасти = ВыделеннаяСтрока;
		КонецЕсли;
		
		ОтменитьВернутьЗапасы(СтрокаТабличнойЧасти, "Запасы", ПричинаОтмены);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередОтменойЗавершение(Результат, ДанныеНабора) Экспорт
	
	Если Результат=Неопределено ИЛИ Результат=КодВозвратаДиалога.Отмена Тогда
		Возврат
	КонецЕсли;
	
	СтрокиНабора = Объект.Запасы.НайтиСтроки(ДанныеНабора);
	Если СтрокиНабора.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти = СтрокиНабора[0];
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.НоменклатураНабора);
		СтруктураОтбора.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.ХарактеристикаНабора);
		
		СтрокиНабора = Объект.Запасы.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого Стр Из СтрокиНабора Цикл
			ОтменитьВернутьЗапасы(Стр);
			ЗапасыНоменклатураПриИзмененииПродолжить(Элементы.ЗапасыНоменклатура, Стр.Количество, Стр);
		КонецЦикла;
		
		Модифицированность = Истина;
		НастроитьЭлементыОтменыТоваров();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВозвратТоваров(СтрокаТабличнойЧасти)
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураНабора) Тогда
		ДанныеНабора = Новый Структура("НоменклатураНабора, ХарактеристикаНабора");
		ЗаполнитьЗначенияСвойств(ДанныеНабора, СтрокаТабличнойЧасти);
		
		ДобавленныеНаборы = Объект.ОтмененныеЗапасы.НайтиСтроки(ДанныеНабора);
		Оповещение = Новый ОписаниеОповещения("ЗапасыПередВозвратомЗавершение", ЭтотОбъект, ДанныеНабора);
		СписокКнопок = Новый СписокЗначений;
		Если ДобавленныеНаборы.Количество()>0 Тогда
			ТекстВопроса = НСтр("ru = 'Набор можно вернуть в заказ только целиком'");
			СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Вернуть'"));
		КонецЕсли; 
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Оповещение, ТекстВопроса, СписокКнопок, 0, КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	СтрокаЗапаса = Объект.Запасы.НайтиСтроки(Новый Структура("КлючСвязиОтмененные", 
	СтрокаТабличнойЧасти.КлючСвязиОтмененные));
	
	Если СтрокаТабличнойЧасти.Редактируется И СтрокаЗапаса.Количество() <> 0 Тогда
		
		НоваяСтрока = СтрокаЗапаса[0];
		ОтменитьВернутьЗапасы(НоваяСтрока);
		
	Иначе
		НоваяСтрока = Объект.Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти,,"ПричинаОтмены");
		Индекс = Объект.ОтмененныеЗапасы.Индекс(СтрокаТабличнойЧасти);
		Объект.ОтмененныеЗапасы.Удалить(Индекс); 
		Партия = Неопределено;
		
		Если НоваяСтрока.Свойство("Партия") Тогда
			Партия = НоваяСтрока.Партия;
		КонецЕсли;
		
		ЦенаЗапаса = НоваяСтрока.Цена;
		ЗапасыНоменклатураПриИзмененииПродолжить(Элементы.ЗапасыНоменклатура, НоваяСтрока.Количество, НоваяСтрока, Партия);
		
	КонецЕсли;
			
	Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Элементы.Запасы.ВыделенныеСтроки.Очистить();
	Элементы.Запасы.ВыделенныеСтроки.Добавить(НоваяСтрока.ПолучитьИдентификатор());
	
	Модифицированность = Истина;
	ОтображатьГруппуОтмененных = Истина;
	НастроитьЭлементыОтменыТоваров();

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередВозвратомЗавершение(Результат, ДанныеНабора) Экспорт
	
	Если Результат=Неопределено ИЛИ Результат=КодВозвратаДиалога.Отмена Тогда
		Возврат
	КонецЕсли;
	
	СтрокиНабора = Объект.ОтмененныеЗапасы.НайтиСтроки(ДанныеНабора);
	Если СтрокиНабора.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти = СтрокиНабора[0];
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.НоменклатураНабора);
		СтруктураОтбора.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.ХарактеристикаНабора);
		
		СтрокиНабора = Объект.ОтмененныеЗапасы.НайтиСтроки(СтруктураОтбора);
		НоваяСтрока = Неопределено;
		НаборДобавлен = Ложь;
		
		Для каждого Стр Из СтрокиНабора Цикл
			
			СтрокаЗапаса = Объект.Запасы.НайтиСтроки(Новый Структура("КлючСвязиОтмененные", Стр.КлючСвязиОтмененные));
			
			Если Стр.Редактируется И СтрокаЗапаса.Количество() <> 0 Тогда
				
				НоваяСтрока = СтрокаЗапаса[0];
				ОтменитьВернутьЗапасы(НоваяСтрока);
								
			Иначе
				Если НЕ НаборДобавлен Тогда
					НоваяСтрока = Объект.Запасы.Добавить();
					НоваяСтрока.Номенклатура = Стр.НоменклатураНабора;
					Если НоваяСтрока.Свойство("Характеристика") Тогда
						НоваяСтрока.Характеристика = Стр.ХарактеристикаНабора;
					КонецЕсли;
					
					ЗапасыНоменклатураПриИзмененииПродолжить(Элементы.ЗапасыНоменклатура, НоваяСтрока.Количество, 
					НоваяСтрока);
					
					НаборДобавлен = Истина;
				КонецЕсли;

				Индекс = Объект.ОтмененныеЗапасы.Индекс(Стр);
				Объект.ОтмененныеЗапасы.Удалить(Индекс);
			КонецЕсли;
		КонецЦикла;
		
		Если НоваяСтрока <> Неопределено Тогда
			Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Элементы.Запасы.ВыделенныеСтроки.Очистить();
			Элементы.Запасы.ВыделенныеСтроки.Добавить(НоваяСтрока.ПолучитьИдентификатор());
		КонецЕсли;
		
		ОтображатьГруппуОтмененных = Истина;
		
		Модифицированность = Истина;
		НастроитьЭлементыОтменыТоваров();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
