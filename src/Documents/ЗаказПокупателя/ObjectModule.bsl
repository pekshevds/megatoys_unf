#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОписаниеПеременных

Перем ПервичноеПроведение;

#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция ПараметрыПоискаСпособаДоставки(Знач ТекущийВариантКП) Экспорт
	
	Результат = Новый Структура;
	
	СкладВШапке = (ПоложениеСклада <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	
	Результат.Вставить("Организация", Организация);
	Результат.Вставить("Магазин", СтруктурнаяЕдиницаПродажи);
	Результат.Вставить("Склад", ?(СкладВШапке, СтруктурнаяЕдиницаРезерв, Справочники.СтруктурныеЕдиницы.ПустаяСсылка()));
	Результат.Вставить("СпособДоставки", СпособДоставки);
	Если ДоставкаСервер.АдресОтправленияИзСклада() И СкладВШапке Тогда
		ПоляАдресаОтправления = ДоставкаСервер.ПоляАдресаОтправления(СтруктурнаяЕдиницаРезерв);
	Иначе
		ПоляАдресаОтправления = ДоставкаСервер.ПоляАдресаОтправления(Организация);
	КонецЕсли;
	Результат.Вставить("АдресОтправленияЗначение", ПоляАдресаОтправления.АдресОтправленияЗначение);
	Результат.Вставить("АдресДоставкиЗначение", АдресДоставкиЗначение);
	Результат.Вставить("Ширина", Ширина);
	Результат.Вставить("Высота", Высота);
	Результат.Вставить("Длина", Длина);
	Результат.Вставить("Вес", Вес);
	Результат.Вставить("ОбъявленнаяЦенность", ОбъявленнаяЦенность);
	
	ТаблицаЗапасы = Запасы.Выгрузить(Новый Структура("ТипНоменклатурыЗапас, НомерВариантаКП", Истина, ТекущийВариантКП));
	ТаблицаЗапасы.Колонки.Добавить("ЦенаДляДоставки", Новый ОписаниеТипов("Число"));
	ТаблицаЗапасы.Колонки.Добавить("КоличествоДляДоставки", Новый ОписаниеТипов("Число"));
	ТаблицаЗапасы.Колонки.Добавить("СуммаДляДоставки", Новый ОписаниеТипов("Число"));
	
	ЯндексДоставка.РассчитатьЦеныДляДоставки(ТаблицаЗапасы);
	
	Результат.Вставить("СуммаЗаказа", ТаблицаЗапасы.Итог("СуммаДляДоставки"));
	Результат.Вставить("КоличествоТоваров", ТаблицаЗапасы.Итог("КоличествоДляДоставки"));
	
	Возврат Результат;
	
КонецФункции

// Определяет по виду операции, что заказ является Заказ-нарядом.
// 
// Возвращаемое значение:
//  Булево - Истина, когда ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд.
//
Функция ЭтоЗаказНаряд() Экспорт
	
	Возврат ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд;
	
КонецФункции

// Определяет необходимость перепроведения заказа при смене состояния.
// 
// Возвращаемое значение:
//  РежимЗаписиДокумента - Рекомендуемый режим записи документа.
//
Функция РежимЗаписиПриСменеСостояния() Экспорт
	
	Если ЭтоЗаказНаряд() Тогда
		Возврат РежимЗаписиЗаказНарядаПриСменеСостояния();
	Иначе
		Возврат СостоянияЗаказов.РежимЗаписиДокументаПриСменеСостояния(ЭтотОбъект);
	КонецЕсли;
	
КонецФункции

// Заполняет платежную ссылку данными для оплаты по ЮКассе.
//
Процедура СформироватьПлатежнуюСсылку() Экспорт
	
	Попытка
	
		ПлатежнаяСсылка 	= ОнлайнОплаты.ПлатежнаяСсылка(Ссылка);
	
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='Формирование платежной ссылки'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ЗаказПокупателя, , ТекстОшибки);
		
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ПлатежнаяСсылка) Тогда
		СсылкаДляОплаты = ПлатежнаяСсылка;
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьАвтоматическиеСкидки() Экспорт
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",           Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет", Ложь);
	
	ПримененныеСкидкиПоВсемВариантам = Неопределено;
	
	Для НВарианта = ?(КоличествоВариантовКП = 0, 0, 1) По КоличествоВариантовКП Цикл
		
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("НомерВариантаКП", НВарианта);
		ОтборСтрок.Вставить("ЭтоРазделитель", Ложь);
		СтруктураПараметры.Вставить("ОтборСтрок", ОтборСтрок);
		
		ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(ЭтотОбъект, СтруктураПараметры);
		
		Если ПримененныеСкидкиПоВсемВариантам = Неопределено Тогда
			ПримененныеСкидкиПоВсемВариантам = Новый Структура("ДеревоСкидок,ТаблицаСкидкиНаценки", ПримененныеСкидки.ДеревоСкидок, ПримененныеСкидки.ТаблицаСкидкиНаценки);
		Иначе
			Для каждого Стр Из ПримененныеСкидки.ТаблицаСкидкиНаценки Цикл
				НоваяСтрока = ПримененныеСкидкиПоВсемВариантам.ТаблицаСкидкиНаценки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(ЭтотОбъект, "Запасы", ПримененныеСкидкиПоВсемВариантам.ТаблицаСкидкиНаценки,,,, ПримененныеСкидкиПоВсемВариантам.ДеревоСкидок);
	СкидкиРассчитаны = Истина;
	
КонецПроцедуры

// Возвращает тип расчета для подготовки к фискализации документа
// 
// Возвращаемое значение:
//  Перечисление.ТипыРасчетаДенежнымиСредствами
// 
Функция ТипРасчетаДляФискализации() Экспорт
	
	Возврат Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ОчиститьДатуНомерВходящегоДокумента(ЭтотОбъект);
	
	ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.ПустаяСсылка();
	ПричинаОтмены = Справочники.ПричиныОтменыЗаказа.ПустаяСсылка();
	Заметки = "";
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		СостояниеЗаказа = ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказНаряда(ВидЗаказа);
	Иначе
		СостояниеЗаказа = ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказаПокупателя(ВидЗаказа);
	КонецЕсли;
	УдалитьЗакрыт = Ложь;
	КалькуляцияРассчитана = Ложь;
	Событие = Документы.Событие.ПустаяСсылка();
	
	// Поведение должно быть таким же как при создании нового документа.
	// Причина:
	//   в основании печати может быть указан сам заказ,
	//   а при копировании еще не сформировалась новая ссылка
	//   и, соответственно, нет данных и для текстовое представление.
	//
	
	ОснованиеПечатиСсылка = Неопределено;
	ОснованиеПечати = Неопределено;
	Если ЗначениеЗаполнено(Договор) Тогда
		
		ОснованиеПечатиСсылка = Договор;
		КомпонентыПредставления = Новый Массив;
		Если Константы.ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати.Получить() Тогда
			КомпонентыПредставления.Добавить(НСтр("ru = 'Договор:'"));
		КонецЕсли;
		КомпонентыПредставления.Добавить(Строка(Договор));
		
		ОснованиеПечати = СтрСоединить(КомпонентыПредставления, " ");
		
	КонецЕсли;
	
	Предоплата.Очистить();
	ШтрихкодыУпаковок.Очистить();
	// Автоматические скидки
	СкидкиНаценки.Очистить();
	ПримененныеПромокоды.Очистить();
	ВыбранныеУправляемыеСкидки.Очистить();
	СкидкиРассчитаны = Ложь;
    // Конец Автоматические скидки
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		// Прослеживаемость
		СведенияПрослеживаемости.Очистить();
		ПрослеживаемостьУНФ.ОчиститьДанныеПрослеживаемости(Запасы, СведенияПрослеживаемости);
		// Конец Прослеживаемость
	КонецЕсли;
	
	ТрекНомер = "";
	НомерЧекаККМ = 0;
	ПодписьКассира = Неопределено;
	СозданИзКабинетаКлиента = Ложь;
	УчетПотребностиПоСкладам = ПолучитьФункциональнуюОпцию("УчетПотребностиПоСкладам");
	УчетПотребностиПоЗаказам = Истина;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ВидОперации")
		И ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд
		И ДанныеЗаполнения.Свойство("Номенклатура") Тогда
		
		Номенклатура = ДанныеЗаполнения.Номенклатура;
		ТабличнаяЧасть = Новый ТаблицаЗначений;
		ТабличнаяЧасть.Колонки.Добавить("Номенклатура");
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		НоваяСтрока.Номенклатура = Номенклатура;
		
		Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
			ИмяТЧ = "Запасы";
		ИначеЕсли Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
			ИЛИ Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
			ИмяТЧ = "Работы";
		Иначе
			ИмяТЧ = "";
		КонецЕсли;
		
		ДанныеЗаполнения = Новый Структура;
		Если ЗначениеЗаполнено(ИмяТЧ) Тогда
			ДанныеЗаполнения.Вставить(ИмяТЧ, ТабличнаяЧасть);
		КонецЕсли;
		Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ВидРабот Тогда
			ДанныеЗаполнения.Вставить("ВидРабот", Номенклатура);
		КонецЕсли;
		ДанныеЗаполнения.Вставить("ВидОперации", Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд);
		
	КонецЕсли;
	
	// Перенос количества в колонку кратности при подборе через корзину
	Если ТипЗнч(ДанныеЗаполнения)=Тип("Структура") 
		И ДанныеЗаполнения.Свойство("Работы")
		И ТипЗнч(ДанныеЗаполнения.Работы)=Тип("Массив") Тогда
		Для каждого СтрокаРабот Из ДанныеЗаполнения.Работы Цикл
			Если ТипЗнч(СтрокаРабот)<>Тип("Структура")
				ИЛИ НЕ СтрокаРабот.Свойство("Количество")
				ИЛИ СтрокаРабот.Свойство("Кратность") Тогда
				Продолжить;
			КонецЕсли; 
			СтрокаРабот.Вставить("Кратность", СтрокаРабот.Количество);
			СтрокаРабот.Вставить("Количество", 1);
		КонецЦикла;
	КонецЕсли;
	
	// Ресурсы на основании события "Запись"
	Если ТипЗнч(ДанныеЗаполнения)=Тип("Структура")
		И ДанныеЗаполнения.Свойство("Событие")
		И ЗначениеЗаполнено(ДанныеЗаполнения.Событие)
		И ДанныеЗаполнения.Событие.ТипСобытия = Перечисления.ТипыСобытий.Запись Тогда
		РесурсыПредприятияСобытие = ДанныеЗаполнения.Событие.РесурсыПредприятия;
		Для каждого СтрокаРесурсов Из РесурсыПредприятияСобытие Цикл
			НоваяСтрока = РесурсыПредприятия.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРесурсов);
		КонецЦикла;
		Старт = ДанныеЗаполнения.Событие.НачалоСобытия;
		Финиш = ДанныеЗаполнения.Событие.ОкончаниеСобытия;
	КонецЕсли;
	
	// Заказ-наряд на основании СчетаНаОплату
	ЭтоЗаполнениеЗаказНарядаПоСчетуНаОплату = Ложь;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("Основание")
		И ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка.СчетНаОплату")
		И ДанныеЗаполнения.Свойство("ВидОперации")
		И ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
			ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд;
			ЭтоЗаполнениеЗаказНарядаПоСчетуНаОплату = Истина;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриемИПередачаВРемонт") Тогда
		ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, "ЗаполнитьПоПриемуВРемонт", "СуммаВключаетНДС");
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ДоговорСтруктура = Справочники.ДоговорыКонтрагентов.СтруктураДляЗаполненияПоДоговоруКонтрагента(ДанныеЗаполнения);
		ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДоговорСтруктура);
		//ДанныеЗаполненияСтруктура = ДанныеДоговораКонтрагентаСтруктура(ДанныеЗаполнения);
		//ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполненияСтруктура, "ЗаполнитьПоСтруктуре");
		//ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, "ОбработчикЗаполнения");
		//ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, "ЗаполнитьПоДоговоруКонтрагента");
	ИначеЕсли ЭтоЗаполнениеЗаказНарядаПоСчетуНаОплату Тогда
		ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, "ЗаполнитьЗаказНарядПоСчетуНаОплату",
			"ИспользоватьТовары");
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходныйОрдер") Тогда
		ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, "ЗаполнитьЗаказНарядПоРасходномуОрдеру", "ИспользоватьТовары");
	ИначеЕсли ОбщегоНазначения.ЗначениеСсылочногоТипа(ДанныеЗаполнения) Тогда
		ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, "ОбработчикЗаполнения",
			"Грузоотправитель, Грузополучатель");
	Иначе
		ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, ,
			"СостояниеЗаказа, ВариантЗавершения, ПричинаОтмены");
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Событие")
		И ДанныеЗаполнения.ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		ЗаполнитьДанныеЗапасовПоДаннымФормы(ДанныеЗаполнения, "ЗаказПокупателя");
	КонецЕсли;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("Событие")
		И ЗначениеЗаполнено(ДанныеЗаполнения.Событие)
		И ДанныеЗаполнения.Событие.ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		ЗаполнитьДанныеЗапасовПоДаннымФормы(ДанныеЗаполнения.Событие, "ЗаказНаряд", ДанныеЗаполнения);
	КонецЕсли;
	
	ЗаполнитьДоставку(ДанныеЗаполнения);
	
	ДозаполнитьПоУмолчанию();
	
	ПечатьДокументовУНФ.ОбработкаЗаполненияОснованияПечати(ЭтотОбъект);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		НоменклатураВДокументахСервер.ПроверитьПереопределитьПоложениеСклада(ЭтотОбъект);
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		ПараметрыДоговора = Справочники.ДоговорыКонтрагентов.ПараметрыДоговора(Договор);
		ЭтоУниверсальныйДокумент = ПараметрыДоговора.ЭтоУниверсальныйДокумент;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Договор) Тогда 
		ДатаОтсчета = Дата;		
		Если ДатаОтсчета = Дата(1,1,1) Тогда 
			ДатаОтсчета = ТекущаяДата();
		КонецЕсли;
		РезультатРасчета = Документы.ЗаказПокупателя.РассчитатьДатуОтгрузки(ДатаОтсчета, Договор);
		ДатаОтгрузки = РезультатРасчета.ДатаОтгрузки;
	КонецЕсли;
	
	УчитыватьВНУ = Ложь;
	
	ЗаполнитьРеквизитыПечати();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Этапы производства
	ПроверитьЗаполнениеЭтаповПроизводства(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	// Взаиморасчеты
	СоответствиеТабличныхЧастейИРеквизитаЗаказ = Новый Соответствие;
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		СоответствиеТабличныхЧастейИРеквизитаЗаказ.Вставить("Запасы", "Заказ");
		СоответствиеТабличныхЧастейИРеквизитаЗаказ.Вставить("Работы", "Заказ");
		
		СоответствиеВременныхТаблицИРеквизитаЗаказ = Новый Соответствие;
		СоответствиеВременныхТаблицИРеквизитаЗаказ.Вставить("Товары", "Заказ");
		СоответствиеВременныхТаблицИРеквизитаЗаказ.Вставить("Работы", "Заказ");
		ДополнительныеСвойства.Вставить("ИмяРеквизитаЗаказ", "Ссылка");
	Иначе
		
		ДополнительныеСвойства.Вставить("ПервичноеПроведение", ПервичноеПроведение);
		
		СоответствиеТабличныхЧастейИРеквизитаЗаказ.Вставить("Запасы", "Заказ");
		
		СоответствиеВременныхТаблицИРеквизитаЗаказ = Неопределено;
	КонецЕсли;
	РасчетыПроведениеДокументов.ИнициализироватьДополнительныеСвойстваДляПроведения(ЭтотОбъект, ДополнительныеСвойства,
		Отказ, Ложь, СоответствиеТабличныхЧастейИРеквизитаЗаказ, СоответствиеВременныхТаблицИРеквизитаЗаказ);
	// Конец Взаиморасчеты
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		ТаблицаСкладов = Запасы.Выгрузить(,"СтруктурнаяЕдиницаРезерв");
		
		Для Каждого СтрокаМатериалов Из Материалы Цикл
			НоваяСтрока = ТаблицаСкладов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМатериалов);
		КонецЦикла;
		
		ТаблицаСкладов.Свернуть("СтруктурнаяЕдиницаРезерв");
		
		МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам = СкладскойУчетСервер.МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам(ТаблицаСкладов);
		ДополнительныеСвойства.Вставить("МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам", МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам);
	Иначе
		ДополнительныеСвойства.Вставить("МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам", Новый Массив);
	КонецЕсли;
	
	// Инициализация данных документа
	Документы.ЗаказПокупателя.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства, ЭтотОбъект);
	
	// Взаиморасчеты
	// Проверим, можно ли продолжать и не было ли отказа в процедурах
	// формирования движений по взаиморасчетам.
	Если ДополнительныеСвойства.Отказ = Истина Тогда
		Отказ = Истина;
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// Конец Взаиморасчеты
	
	// Подготовка наборов записей
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ПроведениеДокументовУНФ.ОтразитьДвижения("ГрафикДвиженияЗапасов", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗаказыПокупателей", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПотребностьВЗапасах", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("РазмещениеЗаказов", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("Запасы", ТаблицыДляДвижений, Движения, Отказ);
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыВРазрезеГТД", ТаблицыДляДвижений, Движения, Отказ);
		ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыПоНалогам", ТаблицыДляДвижений, Движения, Отказ);
		
	КонецЕсли;
	
	// Интеркампани
	ПроведениеДокументовУНФ.ОтразитьДвижения("РезервыТоваровОрганизаций", ТаблицыДляДвижений, Движения, Отказ);
	// Конец Интеркампани
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПлатежныйКалендарь", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОплатаСчетовИЗаказов", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ВыпускПродукции", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыСПокупателями", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыКассовыйМетод", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыНераспределенные", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыОтложенные", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыПоЗаказамПрогноз", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыНаСкладах", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыКРасходуСоСкладов", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыИАгентскиеУслугиПринятые", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("НачисленияИУдержания", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыСПерсоналом", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("Продажи", ТаблицыДляДвижений, Движения, Отказ);
	
	// СерииНоменклатуры
	ПроведениеДокументовУНФ.ОтразитьДвижения("СерииНоменклатурыГарантии", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДвиженияСерииНоменклатуры", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("СерииНоменклатуры", ТаблицыДляДвижений, Движения, Отказ);
	
	ПроведениеДокументовУНФ.ОтразитьДвижения("СерииНоменклатурыКРасходу", ТаблицыДляДвижений, Движения, Отказ);
	
	// Подарочные сертификаты
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПодарочныеСертификаты", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОплатаПодарочнымиСертификатами", ТаблицыДляДвижений, Движения, Отказ);
	
	// ДисконтныеКарты
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПродажиПоДисконтнымКартам", ТаблицыДляДвижений, Движения, Отказ);
	// АвтоматическиеСкидки
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПредоставленныеСкидки", ТаблицыДляДвижений, Движения, Отказ);
	
	// Бонусы
	ПроведениеДокументовУНФ.ОтразитьДвижения("БонусныеБаллы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("НачисленияБонусныхБаллов", ТаблицыДляДвижений, Движения, Отказ);
	
	//Промокоды
	ПроведениеДокументовУНФ.ОтразитьДвижения("Промокоды", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоступностьПромокодов", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПрименениеПромокодов", ТаблицыДляДвижений, Движения, Отказ);

	// Эквайринг
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыКассовыйМетодЭквайринг", ТаблицыДляДвижений, Движения, Отказ);
	
	ПроведениеДокументовУНФ.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);
	
	// Биллинг
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаВыполнениеДоговоровОбслуживания") Тогда
		ПроведениеДокументовУНФ.ОтразитьДвижения("ВыполнениеДоговоровОбслуживания", ТаблицыДляДвижений, Движения, Отказ);
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		// Прослеживаемость
		ПроведениеДокументовУНФ.ОтразитьДвижения("ПрослеживаемыеТовары", ТаблицыДляДвижений, Движения, Отказ);
		ПроведениеДокументовУНФ.ОтразитьДвижения("ОперацииСПрослеживаемымиТоварами", ТаблицыДляДвижений, Движения, Отказ);
		ПрослеживаемостьУНФ.СформироватьДвиженияПрослеживаемыхТоваровВЕАЭС(Движения, ДополнительныеСвойства, "ВременнаяТаблицаТовары");
	КонецЕсли;
	
	// Запись наборов записей
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Взаиморасчеты
	Если ДополнительныеСвойства.Свойство("ТаблицаДокументовДляИзменения")
		И ДополнительныеСвойства.ТаблицаДокументовДляИзменения.Количество() > 0
		Тогда
		РасчетыПроведениеДокументов.ОбработатьТаблицуДокументовДляИзмененияПриОтгрузке(ДополнительныеСвойства, Отказ);
	КонецЕсли;
	// Конец Взаиморасчеты
	
	// Этапы производства
	Если ВидОперации=Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу
		ИЛИ ВидОперации=Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		ПроведениеДокументовУНФ.ОтразитьДвижения("ЭтапыПроизводства", ТаблицыДляДвижений, Движения, Отказ);
	КонецЕсли; 
	
	// Ресурсы предприятия
	Если ПолучитьФункциональнуюОпцию("ПланироватьЗагрузкуРесурсовПредприятияРаботы") 
		И ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		Если ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен Тогда
			ПланированиеРесурсовУНФ.СформироватьЗаписиКалендаряСотрудникаПоРесурсам(Ссылка,Неопределено,Отказ);
		Иначе
			ПроведениеДокументовУНФ.ОтразитьДвижения("РасписаниеЗагрузкиРесурсов", ТаблицыДляДвижений, Движения, Отказ);
			ТаблицаРасписаниеЗагрузкиРесурсов = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасписаниеЗагрузкиРесурсов;
			ПланированиеРесурсовУНФ.СформироватьЗаписиКалендаряСотрудникаПоРесурсам(Ссылка,ТаблицаРасписаниеЗагрузкиРесурсов,Отказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Событие) И Не Событие.ПометкаУдаления 
			И Не Событие.Состояние = Справочники.СостоянияСобытий.НайтиПоНаименованию("Отменено") Тогда
			ПланированиеРесурсовУНФ.СформироватьЗаписиКалендаряСотрудникаПоРесурсам(Событие,, Отказ);
			ПланированиеРесурсовУНФ.ЗаписатьРасписаниеЗагрузкиРесурсов(Событие,,Отказ)
		КонецЕсли;
		
	КонецЕсли;
	
	// Суммы документов для регламентированного учета
	ПроведениеДокументовУНФ.ОтразитьДвижения("СуммыДокументовРегламентированныйУчет", ТаблицыДляДвижений, Движения, Отказ);
	
	Справочники.ПроцессыСостоянийЗаказов.ОбработкаПроведения(Ссылка, Отказ);
	
	// Контроль
	Документы.ЗаказПокупателя.ВыполнитьКонтроль(ЭтотОбъект, ДополнительныеСвойства, Отказ);
	
	ПроведениеДокументовУНФ.ЗакрытьМенеджерВременныхТаблиц(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Этапы производства
	ПроверитьЗаполнениеЭтаповПроизводства(Отказ, Истина);
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	// Инициализация дополнительных свойств для удаления проведения документа
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	// Взаиморасчеты
	СоответствиеТабличныхЧастейИРеквизитаЗаказ = Новый Соответствие;
	СоответствиеТабличныхЧастейИРеквизитаЗаказ.Вставить("Запасы", "Заказ");
	СоответствиеТабличныхЧастейИРеквизитаЗаказ.Вставить("Работы", "Заказ");
	РасчетыПроведениеДокументов.ИнициализироватьДополнительныеСвойстваДляПроведения(ЭтотОбъект, ДополнительныеСвойства, Отказ, Ложь, СоответствиеТабличныхЧастейИРеквизитаЗаказ);
	// Конец Взаиморасчеты
	
	// Подготовка наборов записей
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Взаиморасчеты
	Если ДополнительныеСвойства.Свойство("ТаблицаДокументовДляИзменения")
		И ДополнительныеСвойства.ТаблицаДокументовДляИзменения.Количество() > 0
		Тогда
		РасчетыПроведениеДокументов.ОбработатьТаблицуДокументовДляИзмененияПриОтгрузке(ДополнительныеСвойства, Отказ);
	КонецЕсли;
	// Конец Взаиморасчеты
	
	// Ресурсы предприятия
	Если ПолучитьФункциональнуюОпцию("ПланироватьЗагрузкуРесурсовПредприятияРаботы")
		И ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		ПланированиеРесурсовУНФ.СформироватьЗаписиКалендаряСотрудникаПоРесурсам(Ссылка,Неопределено,Отказ);
		
		Если ЗначениеЗаполнено(Событие) И Не Событие.ПометкаУдаления 
			И Не Событие.Состояние = Справочники.СостоянияСобытий.НайтиПоНаименованию("Отменено") Тогда
			ТаблицаДвиженийРесурсы = ПланированиеРесурсовУНФ.ТаблицаДвиженийДокументов(Событие);
			ПланированиеРесурсовУНФ.СформироватьЗаписиКалендаряСотрудникаПоРесурсам(Событие, ТаблицаДвиженийРесурсы, Отказ);
			ПланированиеРесурсовУНФ.ЗаписатьРасписаниеЗагрузкиРесурсов(Событие, ТаблицаДвиженийРесурсы, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		ТаблицаСкладов = Запасы.Выгрузить(,"СтруктурнаяЕдиницаРезерв");
		
		Для Каждого СтрокаМатериалов Из Материалы Цикл
			НоваяСтрока = ТаблицаСкладов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМатериалов);
		КонецЦикла;
		
		ТаблицаСкладов.Свернуть("СтруктурнаяЕдиницаРезерв");
		
		МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам = СкладскойУчетСервер.МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам(ТаблицаСкладов);
		ДополнительныеСвойства.Вставить("МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам", МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам);
	Иначе
		ДополнительныеСвойства.Вставить("МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам", Новый Массив);
	КонецЕсли;
	
	// Контроль
	Документы.ЗаказПокупателя.ВыполнитьКонтроль(ЭтотОбъект, ДополнительныеСвойства, Отказ, Истина);
	
	// Подчиненный счет-фактура
	Если НЕ Отказ Тогда
		СчетаФактурыУНФ.ОтменитьПроведениеПодчиненногоСчетаФактуры(Ссылка, Номер, Дата, ДополнительныеСвойства, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИсключаемыеРеквизиты = Новый Массив;
	
	Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Договор");
	КонецЕсли;
	
	ЭтоЗаказНаПродажу = (ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу);
	ЭтоЗаказНаряд = (ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд);
	СкладВШапке = (ПоложениеСклада <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	
	Справочники.ПроцессыСостоянийЗаказов.ОбработкаПроверкиЗаполнения(Ссылка, 
		СостояниеЗаказа,
		ВариантЗавершения,
		ПроверяемыеРеквизиты,
		ВидЗаказа,
		ВидОперации);
		
	Если ЭтоЗаказНаряд Тогда
		
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ДатаОтгрузки"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("МатериалыЗаказчика.ДатаПоступления"));
		
		ПроверяемыеРеквизиты.Добавить("Старт");
		ПроверяемыеРеквизиты.Добавить("Финиш");
		
	Иначе
		
		Если ПоложениеДатыОтгрузки = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ДатаОтгрузки"));
		КонецЕсли;
		
	КонецЕсли;
	
	МетаданныеДокумента = Документы.ЗаказПокупателя.ПустаяСсылка().Метаданные();
	ТекстКолонкаНеЗаполненаШаблон = НСтр("ru='Не заполнена колонка ""%1"" в строке %2 списка ""%3""'");
	
	Для каждого Стр Из Запасы Цикл
		
		Если Стр.ЭтоРазделитель Тогда
			Продолжить;
		КонецЕсли;
		
		Если Стр.НомерВариантаКП <> ОсновнойВариантКП Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЭтоЗаказНаряд Тогда
			Если Не ЗначениеЗаполнено(Стр.ДатаОтгрузки)
				И ПоложениеДатыОтгрузки = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
				ТекстСообщения = СтрШаблон(ТекстКолонкаНеЗаполненаШаблон,
					МетаданныеДокумента.ТабличныеЧасти.Запасы.Реквизиты.ДатаОтгрузки.Синоним, Стр.НомерСтроки,
					МетаданныеДокумента.ТабличныеЧасти.Запасы.Синоним);
				КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", Стр.НомерСтроки,
					"ДатаОтгрузки");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Стр.Количество) Тогда
			ТекстСообщения = СтрШаблон(ТекстКолонкаНеЗаполненаШаблон,
				МетаданныеДокумента.ТабличныеЧасти.Запасы.Реквизиты.Количество.Синоним, Стр.НомерСтроки,
				МетаданныеДокумента.ТабличныеЧасти.Запасы.Синоним);
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", Стр.НомерСтроки,
				"Количество");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Стр.Цена) Тогда
			ТекстСообщения = СтрШаблон(ТекстКолонкаНеЗаполненаШаблон,
				МетаданныеДокумента.ТабличныеЧасти.Запасы.Реквизиты.Цена.Синоним, Стр.НомерСтроки,
				МетаданныеДокумента.ТабличныеЧасти.Запасы.Синоним);
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", Стр.НомерСтроки, "Цена");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Стр.СтавкаНДС) Тогда
			ТекстСообщения = СтрШаблон(ТекстКолонкаНеЗаполненаШаблон,
				МетаданныеДокумента.ТабличныеЧасти.Запасы.Реквизиты.СтавкаНДС.Синоним, Стр.НомерСтроки,
				МетаданныеДокумента.ТабличныеЧасти.Запасы.Синоним);
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", Стр.НомерСтроки,
				"СтавкаНДС");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	// Структурная единицы (резерв)
	Если СкладВШапке Тогда
		
		Если ЭтоЗаказНаряд И СкладВШапке И (Материалы.Количество() > 0 ИЛИ Запасы.Количество() > 0) Тогда
			ПроверяемыеРеквизиты.Добавить("СтруктурнаяЕдиницаРезерв");
		ИначеЕсли НЕ ЭтоЗаказНаряд И (Запасы.Итог("Резерв") > 0 ИЛИ УчетПотребностиПоСкладам) 
			И Запасы.Итог("ТипНоменклатурыЗапас") > 0 Тогда
			ПроверяемыеРеквизиты.Добавить("СтруктурнаяЕдиницаРезерв");
		КонецЕсли;
		
	Иначе
		
		Если ЭтоЗаказНаряд Тогда
			ПроверяемыеРеквизиты.Добавить("Запасы.СтруктурнаяЕдиницаРезерв");
			ПроверяемыеРеквизиты.Добавить("Материалы.СтруктурнаяЕдиницаРезерв");
		Иначе
			Для каждого Стр Из Запасы Цикл
				Если (Стр.Резерв > 0 ИЛИ УчетПотребностиПоСкладам) И НЕ ЗначениеЗаполнено(Стр.СтруктурнаяЕдиницаРезерв) 
					И Стр.ТипНоменклатурыЗапас Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru='Не заполнена колонка ""%1"" в строке %2 списка ""%3""'"),
						МетаданныеДокумента.ТабличныеЧасти.Запасы.Реквизиты.СтруктурнаяЕдиницаРезерв.Синоним,
						Стр.НомерСтроки, МетаданныеДокумента.ТабличныеЧасти.Запасы.Синоним);
					КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", Стр.НомерСтроки,
						"СтруктурнаяЕдиницаРезерв");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если ЗапланироватьОплату
		И ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Безналичные Тогда
		
		Если ПроверяемыеРеквизиты.Найти("Касса") <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Касса"));
		КонецЕсли;
		
	ИначеЕсли ЗапланироватьОплату
		И ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Наличные Тогда
		
		Если ПроверяемыеРеквизиты.Найти("БанковскийСчет") <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("БанковскийСчет"));
		КонецЕсли;
		
	Иначе
		
		Если ПроверяемыеРеквизиты.Найти("Касса") <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Касса"));
		КонецЕсли;
		Если ПроверяемыеРеквизиты.Найти("БанковскийСчет") <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("БанковскийСчет"));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗапланироватьОплату
		И ПлатежныйКалендарь.Количество() = 1
		И НЕ ЗначениеЗаполнено(ПлатежныйКалендарь[0].ДатаОплаты) Тогда
		
		ТекстСообщения = НСтр("ru = 'Поле ""Дата оплаты"" не заполнено.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "ДатаОплаты", , Отказ);
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ПлатежныйКалендарь.ДатаОплаты"));
		
	КонецЕсли;
	
	Если Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить() Тогда
		
		ЗаказНарядВСостоянииВыполнения = Ложь;
		
		Если ЭтоЗаказНаПродажу Тогда
			
			Для каждого СтрокаЗапасы Из Запасы Цикл
				
				Если СтрокаЗапасы.Резерв > СтрокаЗапасы.Количество Тогда
					
					ТекстСообщения = СтрШаблон(НСтр(
						"ru = 'В строке №%1 табл. части ""Товары, услуги"" количество резервируемых позиций превышает общее количество запасов.'"),
						СтрокаЗапасы.НомерСтроки);
					КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы",
						СтрокаЗапасы.НомерСтроки, "Резерв");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ЭтоЗаказНаряд Тогда
			
			СтрокаСостояния = ВидЗаказа.ПорядокСостояний.Найти(СостояниеЗаказа, "Состояние");
			Если СтрокаСостояния <> Неопределено Тогда
				
				ЗаказНарядВСостоянииВыполнения = СтрокаСостояния.НомерСтроки >= ВидЗаказа.НомерСостоянияВыполнения;
				
				Для Каждого СтрокаЗапасы Из Запасы Цикл
					
					Если ЗаказНарядВСостоянииВыполнения
						И СтрокаЗапасы.РезервОтгрузка > СтрокаЗапасы.Количество Тогда
						
						ТекстСообщения = СтрШаблон(НСтр(
							"ru = 'В строке №%1 табл. части ""Товары"" количество списываемых позиций из резерва превышает общее количество запасов.'"),
							СтрокаЗапасы.НомерСтроки);
						КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы",
							СтрокаЗапасы.НомерСтроки, "РезервОтгрузка");
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
						
					ИначеЕсли СтрокаЗапасы.Резерв > СтрокаЗапасы.Количество Тогда	
						
						ТекстСообщения = СтрШаблон(НСтр(
							"ru = 'В строке №%1 табл. части ""Товары"" количество резервируемых позиций превышает общее количество запасов.'"),
							СтрокаЗапасы.НомерСтроки);
						КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы",
							СтрокаЗапасы.НомерСтроки, "Резерв");
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
						
					КонецЕсли;
					
				КонецЦикла;
				
				Для Каждого СтрокаЗапасы Из Материалы Цикл
					
					Если ЗаказНарядВСостоянииВыполнения
						И СтрокаЗапасы.РезервОтгрузка > СтрокаЗапасы.Количество Тогда
						
						ТекстСообщения = СтрШаблон(НСтр(
							"ru = 'В строке №%1 табл. части ""Материалы"" количество списываемых позиций из резерва превышает общее количество запасов.'"),
							СтрокаЗапасы.НомерСтроки);
						КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Материалы",
							СтрокаЗапасы.НомерСтроки, "РезервОтгрузка");
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
						
					ИначеЕсли СтрокаЗапасы.Резерв > СтрокаЗапасы.Количество Тогда
						
						ТекстСообщения = СтрШаблон(НСтр(
							"ru = 'В строке №%1 табл. части ""Материалы"" количество резервируемых позиций превышает общее количество запасов.'"),
							СтрокаЗапасы.НомерСтроки);
						КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Материалы",
							СтрокаЗапасы.НомерСтроки, "Резерв");
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Серии номенклатуры
		// При использовании интеркампани контроль выполняется и при плановом проведении
		// Количество серий должно соответствовать резервируемому количеству
		ИспользуетсяИнтеркампани = ПолучитьФункциональнуюОпцию("ПередачаТоваровМеждуОрганизациями");
		Если ЭтоЗаказНаряд И ЗаказНарядВСостоянииВыполнения Тогда
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Объект", ЭтотОбъект);
			ДополнительныеПараметры.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиницаРезерв);
			ДополнительныеПараметры.Вставить("ИмяПоляСтруктурнаяЕдиница", "СтруктурнаяЕдиницаРезерв");
			СерииНоменклатурыУНФ.ПроверитьЗаполнениеСерийНоменклатуры(Отказ, Запасы, СерииНоменклатуры, 
				ДополнительныеПараметры);
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Объект", ЭтотОбъект);
			ДополнительныеПараметры.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиницаРезерв);
			ДополнительныеПараметры.Вставить("ИмяПоляКлючСвязи", "КлючСвязиСерииНоменклатуры");
			ДополнительныеПараметры.Вставить("ИмяПоляСтруктурнаяЕдиница", "СтруктурнаяЕдиницаРезерв");
			СерииНоменклатурыУНФ.ПроверитьЗаполнениеСерийНоменклатуры(Отказ, Материалы, СерииНоменклатурыМатериалы, 
				ДополнительныеПараметры);
		ИначеЕсли ЭтоЗаказНаряд И НЕ ЗаказНарядВСостоянииВыполнения И ИспользуетсяИнтеркампани Тогда
			ТаблицаЗапасы = Запасы.Выгрузить();
			НеПроверяемыеСтроки = Новый Массив;
			Для Каждого СтрокаЗапасы Из ТаблицаЗапасы Цикл
				СтрокаЗапасы.Количество = СтрокаЗапасы.Резерв;
				Если СтрокаЗапасы.Количество = 0 Тогда
					НеПроверяемыеСтроки.Добавить(СтрокаЗапасы);
				КонецЕсли;
			КонецЦикла;
			Для Каждого СтрокаЗапасы Из НеПроверяемыеСтроки Цикл
				ТаблицаЗапасы.Удалить(СтрокаЗапасы);
			КонецЦикла;
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Объект", ЭтотОбъект);
			ДополнительныеПараметры.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиницаРезерв);
			ДополнительныеПараметры.Вставить("ИмяПоляСтруктурнаяЕдиница", "СтруктурнаяЕдиницаРезерв");
			ДополнительныеПараметры.Вставить("ПоРезерву", Истина);
			СерииНоменклатурыУНФ.ПроверитьЗаполнениеСерийНоменклатуры(Отказ, ТаблицаЗапасы, СерииНоменклатуры, 
				ДополнительныеПараметры);
			ТаблицаМатериалы = Материалы.Выгрузить();
			НеПроверяемыеСтроки = Новый Массив;
			Для Каждого СтрокаМатериалы Из ТаблицаМатериалы Цикл
				СтрокаМатериалы.Количество = СтрокаМатериалы.Резерв;
				Если СтрокаМатериалы.Количество = 0 Тогда
					НеПроверяемыеСтроки.Добавить(СтрокаМатериалы);
				КонецЕсли;
			КонецЦикла;
			Для Каждого СтрокаМатериалы Из НеПроверяемыеСтроки Цикл
				ТаблицаМатериалы.Удалить(СтрокаМатериалы);
			КонецЦикла;
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Объект", ЭтотОбъект);
			ДополнительныеПараметры.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиницаРезерв);
			ДополнительныеПараметры.Вставить("ИмяПоляСтруктурнаяЕдиница", "СтруктурнаяЕдиницаРезерв");
			ДополнительныеПараметры.Вставить("ПоРезерву", Истина);
			СерииНоменклатурыУНФ.ПроверитьЗаполнениеСерийНоменклатуры(Отказ, ТаблицаМатериалы, 
				СерииНоменклатурыМатериалы, ДополнительныеПараметры);
		ИначеЕсли НЕ ЭтоЗаказНаряд И ИспользуетсяИнтеркампани Тогда
			ТаблицаЗапасы = Запасы.Выгрузить();
			НеПроверяемыеСтроки = Новый Массив;
			Для Каждого СтрокаЗапасы Из ТаблицаЗапасы Цикл
				СтрокаЗапасы.Количество = СтрокаЗапасы.Резерв;
				Если СтрокаЗапасы.Количество = 0 Тогда
					НеПроверяемыеСтроки.Добавить(СтрокаЗапасы);
				КонецЕсли;
			КонецЦикла;
			Для Каждого СтрокаЗапасы Из НеПроверяемыеСтроки Цикл
				ТаблицаЗапасы.Удалить(СтрокаЗапасы);
			КонецЦикла;
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Объект", ЭтотОбъект);
			ДополнительныеПараметры.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиницаРезерв);
			ДополнительныеПараметры.Вставить("ИмяПоляСтруктурнаяЕдиница", "СтруктурнаяЕдиницаРезерв");
			ДополнительныеПараметры.Вставить("ПоРезерву", Истина);
			СерииНоменклатурыУНФ.ПроверитьЗаполнениеСерийНоменклатуры(Отказ, ТаблицаЗапасы, СерииНоменклатуры, 
				ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
		
	// Скидка 100%.
	ЕстьРучныеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиНаценкиПродажи");
	ЕстьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки"); // АвтоматическиеСкидки
	ЕстьОплатаБонусами= ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммы"); // Бонусные программы
	Если ЕстьРучныеСкидки ИЛИ ЕстьАвтоматическиеСкидки ИЛИ ЕстьОплатаБонусами Тогда
		Для каждого СтрокаЗапасы Из Запасы Цикл
			// АвтоматическиеСкидки
			ТекСумма = Окр(СтрокаЗапасы.Цена * СтрокаЗапасы.Количество, 2);
			ТекСуммаРучнойСкидки = ?(ЕстьРучныеСкидки, СтрокаЗапасы.СуммаСкидкиНаценки, 0);
			ТекСуммаАвтоматическойСкидки = ?(ЕстьАвтоматическиеСкидки, СтрокаЗапасы.СуммаАвтоматическойСкидки, 0);
			ТекСуммаОплатаБонусами = ?(ЕстьОплатаБонусами, СтрокаЗапасы.СуммаСкидкиОплатыБонусом, 0);
			ТекСуммаСкидки = ТекСуммаРучнойСкидки + ТекСуммаАвтоматическойСкидки + ТекСуммаОплатаБонусами;
			Если СтрокаЗапасы.ПроцентСкидкиНаценки <> 100 И ТекСуммаСкидки < ТекСумма
				И НЕ ЗначениеЗаполнено(СтрокаЗапасы.Сумма) Тогда
				ТекстСообщения = СтрШаблон(НСтр(
					"ru = 'Не заполнена колонка ""Сумма"" в строке %1 списка ""Товары, работы, услуги"".'"),
					СтрокаЗапасы.НомерСтроки);
				КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", СтрокаЗапасы.НомерСтроки,
					"Сумма");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ЕстьРучныеСкидки ИЛИ ЕстьАвтоматическиеСкидки ИЛИ ЕстьОплатаБонусами Тогда
		Для каждого СтрокаРаботы Из Работы Цикл
			// АвтоматическиеСкидки
			ТекСумма = СтрокаРаботы.Цена * СтрокаРаботы.Количество;
			ТекСуммаРучнойСкидки = ?(ЕстьРучныеСкидки, СтрокаРаботы.СуммаСкидкиНаценки, 0);
			ТекСуммаАвтоматическойСкидки = ?(ЕстьАвтоматическиеСкидки, СтрокаРаботы.СуммаАвтоматическойСкидки, 0);
			ТекСуммаОплатаБонусами = ?(ЕстьОплатаБонусами, СтрокаРаботы.СуммаСкидкиОплатыБонусом, 0);
			ТекСуммаСкидки = ТекСуммаРучнойСкидки + ТекСуммаАвтоматическойСкидки + ТекСуммаОплатаБонусами;
			Если СтрокаРаботы.ПроцентСкидкиНаценки <> 100 И ТекСуммаСкидки < ТекСумма
				И НЕ ЗначениеЗаполнено(СтрокаРаботы.Сумма) Тогда
				ТекстСообщения = СтрШаблон(НСтр(
					"ru = 'Не заполнена колонка ""Сумма"" в строке %1 списка ""Работы"".'"), СтрокаРаботы.НомерСтроки);
				КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Работы", СтрокаРаботы.НомерСтроки,
					"Сумма");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Так же проверим заполнение начислений сотрудников
	Документы.ЗаказПокупателя.ЕстьИсполнителиСПустойСуммойНачисления(Исполнители);
	
	ПроверитьЗаполнениеНоменклатурыПоДоговоруОбслуживания(Отказ);
	
	// Доставка
	Если ДоставкаСервер.ИспользуетсяДоставка(СпособДоставки) Тогда
		ПроверяемыеРеквизиты.Добавить("НоменклатураДоставки");
		Если СервисДоставки <> Перечисления.СервисыДоставки.Сервис1СДоставка 
			И СервисДоставки <> Перечисления.СервисыДоставки.Сервис1СКурьер Тогда
			ПроверяемыеРеквизиты.Добавить("СлужбаДоставки");
		КонецЕсли;
	КонецЕсли; 
	// Конец Доставка
	
	Если Не СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.Завершен
		И Не СостояниеЗаказа = Справочники.СостоянияЗаказНарядов.Завершен Тогда
		
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ВариантЗавершения"));
	КонецЕсли;
	
	Если Не ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ПричинаОтмены"));
	КонецЕсли;
	
	// Наборы
	НаборыСервер.ПроверитьТабличнуюЧасть(ЭтотОбъект, "Запасы", Отказ);
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		НаборыСервер.ПроверитьТабличнуюЧасть(ЭтотОбъект, "Работы", Отказ);
	КонецЕсли; 
	// КонецНаборы
	
	ПроверятьЗаполнениеПартий = Истина;
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку 
		Или Не ПолучитьФункциональнуюОпцию("РезервированиеЗапасов") Тогда
		ПроверятьЗаполнениеПартий = Ложь
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, Отказ, ПроверятьЗаполнениеПартий);
	
	// Прослеживаемость
	// Исключаем из проверки те реквизиты табличных частей, обязательность которых
	//  зависит от значений других реквизитов в строках табличных частей:
	ИсключаемыеРеквизиты.Добавить("Запасы.КодТНВЭД");
	
	Если ЭтоЗаказНаряд Тогда
		
		ИменаТабличныхЧастей = Новый Массив;
		ИменаТабличныхЧастей.Добавить("Запасы");
		ИменаТабличныхЧастей.Добавить("Материалы");
		
		ГрузовыеТаможенныеДекларацииСервер.ПриОбработкеПроверкиЗаполнения(Отказ, ЭтотОбъект, ИменаТабличныхЧастей);
		
		// Прослеживаемость
		РеализацияВЕАЭС = Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Контрагент);
		
		// Проверяем табличную часть "Товары":
		Если Запасы.Количество() > 0 Тогда
			ИмяСписка = НСтр("ru = 'Запасы'");
			
			СтруктураПоиска = Новый Структура("ИдентификаторСтроки");
			Для каждого СтрокаЗапасы Из Запасы Цикл
				
				Если Не СтрокаЗапасы.ПрослеживаемыйТовар Тогда
					Продолжить;
				КонецЕсли;
				
				// Проверка кода ТН ВЭД.
				Если РеализацияВЕАЭС
					И СтрокаЗапасы.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль()
					И НЕ ЗначениеЗаполнено(СтрокаЗапасы.КодТНВЭД) Тогда
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Код ТН ВЭД'"),
					СтрокаЗапасы.НомерСтроки, ИмяСписка);
					
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", СтрокаЗапасы.НомерСтроки, "КодТНВЭД");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
				// Для прослеживаемого товара обязательно указывается страна происхождения.
				Если СтрокаЗапасы.ПрослеживаемыйТовар
					И НЕ ЗначениеЗаполнено(СтрокаЗапасы.СтранаПроисхождения) Тогда
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Страна происхождения'"),
					СтрокаЗапасы.НомерСтроки, ИмяСписка);
					
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", СтрокаЗапасы.НомерСтроки, "СтранаПроисхождения");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
				
				Если СтрокаЗапасы.ПрослеживаемыйКомплект Тогда
					
					СтруктураПоиска.ИдентификаторСтроки = СтрокаЗапасы.ИдентификаторСтроки;
					НайденныеСтроки = СведенияПрослеживаемости.НайтиСтроки(СтруктураПоиска);
					
					Если Не НайденныеСтроки.Количество() Тогда
						ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", , НСтр(
						"ru = 'Номер РНПТ'"), СтрокаЗапасы.НомерСтроки, ИмяСписка);
						
						Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", СтрокаЗапасы.НомерСтроки,
						"ЗапасыРНПТ");
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныйСклад") Тогда
			
			Если ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
				
				УчетОстатковПоСкладскимОрдерам = СкладскойУчетСервер.УчетОстатковВРазрезеСкладскихОрдеров(СтруктурнаяЕдиницаРезерв);
				
				Если УчетОстатковПоСкладскимОрдерам Тогда  
					
					Если Не ЗначениеЗаполнено(ПоложениеДокументаПоступления) Или ПоложениеДокументаПоступления = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
						ПроверяемыеРеквизиты.Добавить("ДокументПоступления");
					Иначе
						Для Каждого СтрокаТабличнойЧасти Из Запасы Цикл
							Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументПоступления) Тогда
								ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Расходный ордер'"), СтрокаТабличнойЧасти.НомерСтроки, "Запасы");
								Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", СтрокаТабличнойЧасти.НомерСтроки, "ДокументПоступления");
								ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
							КонецЕсли;
						КонецЦикла;
						
						Для Каждого СтрокаТабличнойЧасти Из Материалы Цикл
							Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументПоступления) Тогда
								ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Расходный ордер'"), СтрокаТабличнойЧасти.НомерСтроки, "Материалы");
								Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Материалы", СтрокаТабличнойЧасти.НомерСтроки, "ДокументПоступления");
								ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				ТаблицаОрдерныхСкладовПоВидамУчета = СкладскойУчетСервер.ТаблицаОрдерныхСкладовПоВидамУчета();
				Если ТаблицаОрдерныхСкладовПоВидамУчета.Количество() Тогда
					ПараметрыПоиска = Новый Структура("СтруктурнаяЕдиница, Расход");
					
					Для Каждого СтрокаТабличнойЧасти Из Запасы Цикл
						
						ПараметрыПоиска.СтруктурнаяЕдиница = СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв;
						ПараметрыПоиска.Расход = Истина;
						
						НайденныеСтроки = ТаблицаОрдерныхСкладовПоВидамУчета.НайтиСтроки(ПараметрыПоиска);
						УчетОстатковПоСкладскимОрдерам = НайденныеСтроки.Количество();
						
						Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументПоступления) И УчетОстатковПоСкладскимОрдерам Тогда
							ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Расходный ордер'"), СтрокаТабличнойЧасти.НомерСтроки, "Запасы");
							Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", СтрокаТабличнойЧасти.НомерСтроки, "ДокументПоступления");
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Для Каждого СтрокаТабличнойЧасти Из Материалы Цикл
						
						ПараметрыПоиска.СтруктурнаяЕдиница = СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв;
						ПараметрыПоиска.Расход = Истина;
						
						НайденныеСтроки = ТаблицаОрдерныхСкладовПоВидамУчета.НайтиСтроки(ПараметрыПоиска);
						УчетОстатковПоСкладскимОрдерам = НайденныеСтроки.Количество();
						
						Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументПоступления) И УчетОстатковПоСкладскимОрдерам Тогда
							ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Расходный ордер'"), СтрокаТабличнойЧасти.НомерСтроки, "Материалы");
							Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Материалы", СтрокаТабличнойЧасти.НомерСтроки, "ДокументПоступления");
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// ПодарочныеСертификаты
	Если Константы.ФункциональнаяОпцияИспользоватьПодарочныеСертификаты.Получить()
		И ЭтоЗаказНаряд Тогда
		
		Если Не РаботаСПодарочнымиСертификатами.УказанКонтрагентДляПредоплаты() Тогда
			ТекстСообщения = НСтр(
				"ru = 'Не заполнена константа ""Служебный контрагент для подарочных сертификатов"".
				|Необходимо указать контрагента: Продажи - Еще больше возможностей.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЕсли;
		
		// Проверка срока и области действия подарочных сертификатов
		ВыполнитьПроверкуОграниченийСертификатов(Отказ);
		
	КонецЕсли;
	// Конец ПодарочныеСертификаты
	
	РасчетыРаботаСФормамиВызовСервера.ПроверитьЗаполнениеДокументаПредоплаты(Контрагент, ПроверяемыеРеквизиты);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, ИсключаемыеРеквизиты);
	
	//Ресурсы
	ЕстьОшибки = ПланированиеРесурсовУНФ.ЕстьОшибкиЗаполнения(РесурсыПредприятия, ЭтотОбъект);
	Если ЕстьОшибки Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		ДатаОтгрузки = Дата;
	КонецЕсли;
	// Конец МобильноеПриложение
	
	Если НЕ ПолучитьФункциональнуюОпцию("СебестоимостьБезНДС") Тогда
		НДСВключатьВСтоимость = Истина;
	КонецЕсли;
	
	Если ПоложениеДатыОтгрузки <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
			СтрокаТабличнойЧасти.ДатаОтгрузки = ДатаОтгрузки;
		КонецЦикла;
	Иначе
		Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
			ДатаОтгрузки = Финиш;
		Иначе
			ДатаОтгрузки = ЗаполнениеОбъектовУНФ.ЗначениеДляШапки(Запасы, "ДатаОтгрузки");
		КонецЕсли;
	КонецЕсли;
	
	Если ПоложениеСклада <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		ЗаполнитьСтруктурнуюЕдиницуРезерваВТЧ();
	Иначе
		Если Запасы.Количество() > 0 Тогда
			СтруктураПолей = СтруктурнаяЕдиницаИЯчейкаДляШапки(Запасы);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураПолей);
		ИначеЕсли Материалы.Количество() > 0 Тогда
			СтруктураПолей = СтруктурнаяЕдиницаИЯчейкаДляШапки(Материалы);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураПолей);
		Иначе
			СтруктурнаяЕдиницаРезерв = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
			Ячейка = Справочники.Ячейки.ПустаяСсылка();
		КонецЕсли; 
	КонецЕсли; 
	
	Если ПоложениеВидаРабот = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		Для каждого СтрокаТабличнойЧасти Из Работы Цикл
			СтрокаТабличнойЧасти.ВидРабот = ВидРабот;
		КонецЦикла;
	Иначе
		ВидРабот = ЗаполнениеОбъектовУНФ.ЗначениеДляШапки(Работы, "ВидРабот");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		СписокРесурсов = "";
		Для Каждого СтрокаРесурс Из РесурсыПредприятия Цикл
			СписокРесурсов = СписокРесурсов + ?(СписокРесурсов = "","","; " + Символы.ПС) + СокрЛП(СтрокаРесурс.РесурсПредприятия);
		КонецЦикла;
		
		СписокНоменклатуры = "";
		Для Каждого СтрокаНоменклатура Из Работы Цикл
			ХарактеристикаПредставление = "";
			Если Константы.ФункциональнаяОпцияИспользоватьХарактеристики.Получить() 
				И ЗначениеЗаполнено(СтрокаНоменклатура.Характеристика) Тогда
				ХарактеристикаПредставление = " (" + СокрЛП(СтрокаНоменклатура.Характеристика) + ")";
			КонецЕсли;
			КоличествоНоменклатуры = СтрокаНоменклатура.Количество * СтрокаНоменклатура.Кратность * СтрокаНоменклатура.Коэффициент;
			СписокНоменклатуры = СписокНоменклатуры + ?(СписокНоменклатуры = "","","; " + Символы.ПС) + СокрЛП(СтрокаНоменклатура.Номенклатура) + ХарактеристикаПредставление + ", " + КоличествоНоменклатуры + " " + СокрЛП(Справочники.КлассификаторЕдиницИзмерения.ч);
		КонецЦикла;
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказНарядов") Тогда
			ВидЗаказа = Справочники.ВидыЗаказНарядов.Основной;
		КонецЕсли;
		
	Иначе
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей") Тогда
			ВидЗаказа = Справочники.ВидыЗаказовПокупателей.Основной;
		КонецЕсли;
		
		Если ОснованиеПечати = ПечатьДокументовУНФ.ПараметрЭтотДокументЗаказПокупателя() Тогда
			
			Если ЗначениеЗаполнено(Ссылка) Тогда
				
				ОснованиеПечатиСсылка = Ссылка;
				
			Иначе
				
				СсылкаНового = Документы.ЗаказПокупателя.ПолучитьСсылку();
				УстановитьСсылкуНового(СсылкаНового);
				
				ОснованиеПечатиСсылка = СсылкаНового;
				
				УстановитьНовыйНомер();
				
			КонецЕсли;
			
			НомерДокумента	= ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Дата, Номер, Организация.Префикс);
			ОснованиеПечати	= СтрШаблон(НСтр("ru='Заказ покупателя %1 от %2'"), НомерДокумента, Формат(Дата, "ДЛФ=D"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент)
		И НЕ Контрагент.ВестиРасчетыПоДоговорам
		И НЕ ЗначениеЗаполнено(Договор) Тогда
		Договор = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;
	
	ОжидаетсяВыборВариантаКП = КоличествоВариантовКП <> 0 И ОсновнойВариантКП = 0;
	РассчитатьСуммуДокумента();

	ОплатыБезБонусов = Предоплата.НайтиСтроки(Новый Структура("ОплатаБонусами", Ложь)); // Возврат оплаченного бонусами
	СуммаОплаты = Предоплата.Выгрузить(ОплатыБезБонусов, "СуммаРасчетов").Итог("СуммаРасчетов");	
	РасчетыПроведениеДокументов.ВыполнитьКонтрольСуммыОплаты(СуммаОплаты, СуммаДокумента, Отказ);

	ДатаИзменения = ТекущаяДатаСеанса();
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность()
		И НЕ ПометкаУдаления Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	// Конец МобильноеПриложение
	
	СостоянияЗаказов.ПередЗаписьюЗаказа(ЭтотОбъект);
	
	ПривестиДанныеКСогласованномуСостоянию();
	ДополнительныеСвойства.Вставить("ЯндексДоставкаИзмененЛокально", ЯндексДоставка.ИзмененЛокально(ЭтотОбъект));
	
	// Взаиморасчеты
	МассивДоступныхОпераций = Новый Массив;
	МассивДоступныхОпераций.Добавить(Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу);
	МассивДоступныхОпераций.Добавить(Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд);
	РасчетыПроведениеДокументов.ПередЗаписьюНакладной(ЭтотОбъект, МассивДоступныхОпераций);
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу
		И НЕ Контрагент.ВестиРасчетыПоЗаказам Тогда
		Предоплата.Очистить();
	КонецЕсли;
	// Конец Взаиморасчеты
	
	// До включения автоматических скидок будем считать, что скидки рассчитаны.
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		СкидкиРассчитаны = Истина;
	КонецЕсли;
	
	Если ЭтоНовый() И НЕ ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторПлатежа) Тогда
		ИдентификаторПлатежа = РасчетыСлужебный.ПолучитьУникальныйИдентификаторПлатежа(ЭтотОбъект);
	КонецЕсли;
	
	РегистрыСведений.ОбъектыИнтеграцииCRM.ПередЗаписьюОбъекта(ЭтотОбъект);
	
	// ПараметрическиеСпецификации
	Если РежимЗаписи=РежимЗаписиДокумента.Проведение
		И ВидОперации=Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу Тогда
		ПроизводствоФормулыСервер.РассчитатьПараметрическиеСпецификации(ЭтотОбъект, "Запасы", Отказ);
	КонецЕсли; 
	// Конец ПараметрическиеСпецификации
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		// Автоматический подбор РНПТ и очистка признака прослеживаемого товара.
		ПрослеживаемыйТовар = Запасы.НайтиСтроки(Новый Структура("ПрослеживаемыйТовар", Истина));
		ЕстьПрослеживаемыйТовар = ПрослеживаемыйТовар.Количество() <> 0;
		Если ЕстьПрослеживаемыйТовар Тогда
			Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				ПрослеживаемостьУНФ.ПодобратьРНПТОстатки(ЭтотОбъект, Отказ);
			КонецЕсли;
		Иначе
			СведенияПрослеживаемости.Очистить();
			Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
				СтрокаТабличнойЧасти.ПрослеживаемыйТовар = Ложь;
			КонецЦикла; 
		КонецЕсли;
		// Конец Прослеживаемость
		
	КонецЕсли;
	
	// Очистка скрытых строк ТЧ материалов
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		Ключи = Работы.ВыгрузитьКолонку("КлючСвязи"); 
		КУдалению = Новый Массив;
		Для каждого СтрокаТабличнойЧасти Из Материалы Цикл
			Если Ключи.Найти(СтрокаТабличнойЧасти.КлючСвязи) = Неопределено Тогда
				КУдалению.Добавить(СтрокаТабличнойЧасти);	
			КонецЕсли;	
		КонецЦикла;
		Для каждого СтрокаТабличнойЧасти Из КУдалению Цикл
			Материалы.Удалить(СтрокаТабличнойЧасти);	
		КонецЦикла;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСборкуЗаказов") Тогда
		СборкаЗаказов.УстановитьСтатусСборкиЗаказа(ЭтотОбъект, Истина, ОсновнойВариантКП);
	КонецЕсли;
	
	ПервичноеПроведение = РежимЗаписи = РежимЗаписиДокумента.Проведение И Не Проведен;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СостоянияЗаказов.ПриЗаписиЗаказа(ЭтотОбъект);
	
	Если ДополнительныеСвойства.ЯндексДоставкаИзмененЛокально Тогда
		
		РегистрыСведений.ЯндексДоставка.УстановитьОтметкуИзмененЛокально(Ссылка);
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		СчетаФактурыУНФ.ПриЗаписиДокументаОснованияСчетаФактуры(Ссылка, ДополнительныеСвойства, Ложь);
		
	КонецЕсли;
	
	РегистрыСведений.ОбъектыИнтеграцииCRM.ПриЗаписиОбъекта(ЭтотОбъект);
	
	// ПараметрическиеСпецификации
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство") Тогда
		ПроизводствоСервер.ОбновитьСвязанныеСпецификации(Ссылка, ПометкаУдаления);
	КонецЕсли; 
	// Конец ПараметрическиеСпецификации
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыЗаполненияДокумента

Процедура ОбработчикЗаполнения(ДанныеЗаполнения) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЗначениеСсылочногоТипа(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяТабличнойЧасти(ДанныеЗаполнения)) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = ЗапросДанныхДляЗаполнения(ДанныеЗаполнения).Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаШапка = РезультатЗапроса.Выбрать();
	ВыборкаШапка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	
	Если ВалютаДокумента <> Константы.НациональнаяВалюта.Получить() Тогда
		ВалютаКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Договор.ВалютаРасчетов, Дата);
		Курс = ВалютаКурсКратность.Курс;
		Кратность = ВалютаКурсКратность.Кратность;
	КонецЕсли;
	
	Запасы.Очистить();
	ВыборкаТабличнаяЧасть = ВыборкаШапка[ИмяТабличнойЧасти(ДанныеЗаполнения)].Выбрать();
	Пока ВыборкаТабличнаяЧасть.Следующий() Цикл
		НовСтр = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаТабличнаяЧасть);
		НовСтр.ТипНоменклатурыЗапас = ((ВыборкаТабличнаяЧасть.НоменклатураТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас)
		ИЛИ (ВыборкаТабличнаяЧасть.НоменклатураТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат));
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		ВыборкаСкидкиНаценки = ВыборкаШапка.СкидкиНаценки.Выбрать();
		Пока ВыборкаСкидкиНаценки.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(СкидкиНаценки.Добавить(), ВыборкаСкидкиНаценки);
		КонецЦикла;
	КонецЕсли;
	
	// Наборы
	ДобавленныеНаборы.Очистить();
	Если ДанныеЗаполнения.Метаданные().ТабличныеЧасти.Найти("ДобавленныеНаборы")<>Неопределено Тогда
		ВыборкаДобавленныеНаборы = ВыборкаШапка.ДобавленныеНаборы.Выбрать();
		Пока ВыборкаДобавленныеНаборы.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ДобавленныеНаборы.Добавить(), ВыборкаДобавленныеНаборы);
		КонецЦикла;
	КонецЕсли;
	// Конец Наборы
	
КонецПроцедуры

Процедура ЗаполнитьПоПриемуВРемонт(ДокументСсылкаПриемВРемонт) Экспорт
	
	ДокументОснование = ДокументСсылкаПриемВРемонт.Ссылка;
	ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд;
	
	Организация = ДокументСсылкаПриемВРемонт.Организация;
	Контрагент = ДокументСсылкаПриемВРемонт.Контрагент;
	Договор = ДокументСсылкаПриемВРемонт.Договор;
	
	ВидЦен = Договор.ВидЦен;
	ВидСкидкиНаценки = Договор.ВидСкидкиНаценки;
	ВалютаДокумента = Договор.ВалютаРасчетов;
	СуммаВключаетНДС = ?(ЗначениеЗаполнено(Договор.ВидЦен), Договор.ВидЦен.ЦенаВключаетНДС, Неопределено);
	НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Организация,, Дата);
	НалогиУНФ.ЗаполнитьНДСВключенВСтоимостьВДокументе(ЭтотОбъект);
	
	ВалютаКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Договор.ВалютаРасчетов, Дата);
	Курс = ВалютаКурсКратность.Курс;
	Кратность = ВалютаКурсКратность.Кратность;
	
	Проект = ДокументСсылкаПриемВРемонт.Проект;
	
КонецПроцедуры

Процедура ЗаполнитьЗаказНарядПоСчетуНаОплату(ДокументСсылкаСчетНаОплату) Экспорт
	
	Основание = ДокументСсылкаСчетНаОплату.Основание;  
	ДокументОснование = Основание.Ссылка;
	ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд;
	
	Организация = Основание.Организация;
	Контрагент = Основание.Контрагент;
	Договор = Основание.Договор;
	
	Если ЗначениеЗаполнено(Основание.УсловияСчетаЗаказа) Тогда
		УсловияСчетаЗаказа = Основание.УсловияСчетаЗаказа;
		ТекстУсловийСчетаЗаказа = Основание.ТекстУсловийСчетаЗаказа;
	КонецЕсли;
	
	ВидЦен = Договор.ВидЦен;
	ВидСкидкиНаценки = Договор.ВидСкидкиНаценки;
	ВалютаДокумента = Договор.ВалютаРасчетов;
	СуммаВключаетНДС = ?(ЗначениеЗаполнено(Договор.ВидЦен), Договор.ВидЦен.ЦенаВключаетНДС, Неопределено);
	НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Организация,, Дата);
	НалогиУНФ.ЗаполнитьНДСВключенВСтоимостьВДокументе(ЭтотОбъект);
	
	ВалютаКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Договор.ВалютаРасчетов, Дата);
	Курс = ВалютаКурсКратность.Курс;
	Кратность = ВалютаКурсКратность.Кратность;
	
	Запасы.Очистить();
	Работы.Очистить();
	
	РезультатЗапроса = ЗапросДанныхДляЗаполнения(Основание).Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаШапка = РезультатЗапроса.Выбрать();
	ВыборкаШапка.Следующий(); 
				
	ТаблицаЗапасы = ВыборкаШапка["Запасы"].Выбрать();
	Пока ТаблицаЗапасы.Следующий() Цикл
		Если ТаблицаЗапасы.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа 
			ИЛИ ТаблицаЗапасы.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
			ТабЧасть = Работы; 
		Иначе
			ТабЧасть = Запасы;
		КонецЕсли;		
		
		НоваяСтрока = ТабЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаЗапасы);
		
		Если ТабЧасть = Запасы Тогда
			НоваяСтрока.ТипНоменклатурыЗапас = 
				(ТаблицаЗапасы.НоменклатураТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас)
				ИЛИ (ТаблицаЗапасы.НоменклатураТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат);
		Иначе
			НоваяСтрока.ТипНоменклатурыУслуга = ТаблицаЗапасы.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
			НоваяСтрока.Коэффициент = 1;
			НоваяСтрока.Кратность = ТаблицаЗапасы.Количество;
			НоваяСтрока.Количество = 1;
		КонецЕсли;
	
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДокументОснование.НоменклатураДоставки) Тогда
		НоваяСтрока = Работы.Добавить();
		НоменклатураДоставки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "НоменклатураДоставки");
		НоваяСтрока.Номенклатура = НоменклатураДоставки;
		НоваяСтрока.ТипНоменклатурыУслуга = НоменклатураДоставки.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.Кратность = 1;
		НоваяСтрока.Коэффициент = 1;
		НоваяСтрока.Цена = ДокументОснование.СтоимостьДоставки;
		НоваяСтрока.СтавкаНДС = ДокументОснование.СтавкаНДСДоставки;
		НоваяСтрока.СуммаНДС = ДокументОснование.СуммаНДСДоставки;
		НоваяСтрока.Сумма = ДокументОснование.СтоимостьДоставки;
		НоваяСтрока.Всего = ДокументОснование.СтоимостьДоставки;
	КонецЕсли;	
		
	Если Запасы.Количество() <> 0 Тогда
		ИспользоватьТовары = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗаказНарядПоРасходномуОрдеру(ДанныеЗаполнения) Экспорт
	
// Заполнение шапки документа.
	ДокументОснование = ДанныеЗаполнения.Ссылка;
	ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд;
	Организация = ДанныеЗаполнения.Организация;
	СтруктурнаяЕдиницаРезерв = ДанныеЗаполнения.СтруктурнаяЕдиница;
	Ячейка = ДанныеЗаполнения.Ячейка;
	НалогиУНФ.ЗаполнитьНДСВключенВСтоимостьВДокументе(ЭтотОбъект);
	
	Запасы.Очистить();
	СерииНоменклатуры.Очистить();
	СведенияПрослеживаемости.Очистить();
	ДобавленныеНаборы.Очистить();
	СкидкиНаценки.Очистить();
	
	УчетГТД = ПолучитьФункциональнуюОпцию("УчетГТД");
	
	ВидУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиницаРезерв, "ВидУчетаОрдерныхСкладов");
	
	Если ВидУчета = Перечисления.ВидыУчетаОрдерныхСкладов.УчетОстатковПоПрочимДокументам Тогда
		ТекстИсключения = НСтр("ru = 'Вид учета остатков на ордерном складе - по Расходным накладным. Ввод(заполнение) Расходной накладной на основании Складского ордера недоступен.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ПоложениеСклада = ДанныеЗаполнения.ПоложениеЯчейки;
	
	УчетОстатковПоСкладскимОрдерам = СкладскойУчетСервер.УчетОстатковВРазрезеСкладскихОрдеров(СтруктурнаяЕдиницаРезерв, Ложь);
	
	Контрагент = ДанныеЗаполнения.Контрагент;
	Договор = Справочники.ДоговорыКонтрагентов.ПоДокументуКонтрагентуОрганизацииИВидуОперации(Ссылка, Контрагент, Организация, ВидОперации);
	
	Компания = Константы.УчетПоКомпании.Компания(Организация);
	
	Если ВидУчета = Перечисления.ВидыУчетаОрдерныхСкладов.ПоСкладуВЦелом Тогда
		ЗаполнитьПоСкладскомуОрдеруБезУчетаОстатков(ДанныеЗаполнения, Компания);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Договор) Или НЕ ЗначениеЗаполнено(Контрагент) Тогда
		
		ДоговорСтруктура = Справочники.ДоговорыКонтрагентов.СтруктураДляЗаполненияПоДоговоруКонтрагента(Договор, Истина);
		ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДоговорСтруктура);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РасходныйОрдерЗапасы.НомерСтроки КАК НомерСтроки,
		|	РасходныйОрдерЗапасы.Номенклатура КАК Номенклатура,
		|	РасходныйОрдерЗапасы.Характеристика КАК Характеристика,
		|	РасходныйОрдерЗапасы.Партия КАК Партия,
		|	РасходныйОрдерЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	РасходныйОрдерЗапасы.СерииНоменклатуры КАК СерииНоменклатуры,
		|	РасходныйОрдерЗапасы.КлючСвязи КАК КлючСвязи,
		|	РасходныйОрдерЗапасы.Количество КАК Количество,
		|	ВЫБОР
		|		КОГДА &КонтролироватьОстаткиПоДокументам
		|			ТОГДА &ДокументОснование
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДокументПоступления,
		|	РасходныйОрдерЗапасы.Ячейка КАК Ячейка,
		|	&СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаРезерв
		|ИЗ
		|	Документ.РасходныйОрдер.Запасы КАК РасходныйОрдерЗапасы
		|ГДЕ
		|	РасходныйОрдерЗапасы.Ссылка = &ДокументОснование
		|	И РасходныйОрдерЗапасы.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗапасыКРасходуСоСкладовОстатки.Номенклатура КАК Номенклатура,
		|	ЗапасыКРасходуСоСкладовОстатки.Характеристика КАК Характеристика,
		|	ЗапасыКРасходуСоСкладовОстатки.Партия КАК Партия,
		|	ВЫБОР
		|		КОГДА ЗапасыКРасходуСоСкладовОстатки.КоличествоОстаток < 0
		|			ТОГДА -ЗапасыКРасходуСоСкладовОстатки.КоличествоОстаток
		|		ИНАЧЕ ЗапасыКРасходуСоСкладовОстатки.КоличествоОстаток
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА &КонтролироватьОстаткиПоДокументам
		|			ТОГДА &ДокументОснование
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДокументПоступления,
		|	&СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ЗапасыКРасходуСоСкладовОстатки.Ячейка КАК Ячейка
		|ПОМЕСТИТЬ КПоступлению
		|ИЗ
		|	РегистрНакопления.ЗапасыКРасходуСоСкладов.Остатки(
		|			,
		|			Организация = &Организация
		|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница
		|				И ДокументОснование = &ДокументОснование) КАК ЗапасыКРасходуСоСкладовОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗапасыКРасходуСоСкладов.Номенклатура,
		|	ЗапасыКРасходуСоСкладов.Характеристика,
		|	ЗапасыКРасходуСоСкладов.Партия,
		|	ВЫБОР
		|		КОГДА ЗапасыКРасходуСоСкладов.Количество < 0
		|			ТОГДА -ЗапасыКРасходуСоСкладов.Количество
		|		ИНАЧЕ ЗапасыКРасходуСоСкладов.Количество
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &КонтролироватьОстаткиПоДокументам
		|			ТОГДА &ДокументОснование
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	&СтруктурнаяЕдиница,
		|	ЗапасыКРасходуСоСкладов.Ячейка
		|ИЗ
		|	РегистрНакопления.ЗапасыКРасходуСоСкладов КАК ЗапасыКРасходуСоСкладов
		|ГДЕ
		|	ЗапасыКРасходуСоСкладов.Регистратор = &Ссылка
		|	И ЗапасыКРасходуСоСкладов.ДокументОснование = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КПоступлению.Номенклатура КАК Номенклатура,
		|	КПоступлению.Характеристика КАК Характеристика,
		|	КПоступлению.Партия КАК Партия,
		|	СУММА(КПоступлению.Количество) КАК Количество,
		|	КПоступлению.ДокументПоступления КАК ДокументПоступления,
		|	КПоступлению.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	КПоступлению.Ячейка КАК Ячейка
		|ИЗ
		|	КПоступлению КАК КПоступлению
		|
		|СГРУППИРОВАТЬ ПО
		|	КПоступлению.ДокументПоступления,
		|	КПоступлению.Ячейка,
		|	КПоступлению.Номенклатура,
		|	КПоступлению.Партия,
		|	КПоступлению.СтруктурнаяЕдиница,
		|	КПоступлению.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасходныйОрдерЗапасы.Номенклатура КАК Номенклатура,
		|	РасходныйОрдерЗапасы.Характеристика КАК Характеристика,
		|	РасходныйОрдерЗапасы.Партия КАК Партия,
		|	РасходныйОрдерСерииНоменклатуры.Серия КАК Серия,
		|	РасходныйОрдерЗапасы.КлючСвязи КАК КлючСвязи,
		|	РасходныйОрдерСерииНоменклатуры.Количество КАК Количество
		|ИЗ
		|	Документ.РасходныйОрдер.СерииНоменклатуры КАК РасходныйОрдерСерииНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдер.Запасы КАК РасходныйОрдерЗапасы
		|		ПО (РасходныйОрдерСерииНоменклатуры.Ссылка = &ДокументОснование)
		|			И (РасходныйОрдерЗапасы.Ссылка = &ДокументОснование)
		|			И (РасходныйОрдерЗапасы.КлючСвязи = РасходныйОрдерСерииНоменклатуры.КлючСвязи)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СерииНоменклатурыКРасходуОстатки.Серия КАК Серия,
		|	-СерииНоменклатурыКРасходуОстатки.КоличествоОстаток КАК Количество,
		|	СерииНоменклатурыКРасходуОстатки.Номенклатура КАК Номенклатура,
		|	СерииНоменклатурыКРасходуОстатки.Характеристика КАК Характеристика,
		|	СерииНоменклатурыКРасходуОстатки.Партия КАК Партия
		|ПОМЕСТИТЬ ОстаткиСерииИтог
		|ИЗ
		|	РегистрНакопления.СерииНоменклатурыКРасходу.Остатки(
		|			,
		|			Организация = &Организация
		|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница
		|				И ДокументОснование = &ДокументОснование) КАК СерииНоменклатурыКРасходуОстатки
		|ГДЕ
		|	СерииНоменклатурыКРасходуОстатки.КоличествоОстаток < 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СерииНоменклатурыКРасходу.Серия,
		|	СерииНоменклатурыКРасходу.Количество,
		|	СерииНоменклатурыКРасходу.Номенклатура,
		|	СерииНоменклатурыКРасходу.Характеристика,
		|	СерииНоменклатурыКРасходу.Партия
		|ИЗ
		|	РегистрНакопления.СерииНоменклатурыКРасходу КАК СерииНоменклатурыКРасходу
		|ГДЕ
		|	СерииНоменклатурыКРасходу.Регистратор = &Ссылка
		|	И СерииНоменклатурыКРасходу.ДокументОснование = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиСерииИтог.Серия КАК Серия,
		|	СУММА(ОстаткиСерииИтог.Количество) КАК Количество,
		|	ОстаткиСерииИтог.Номенклатура КАК Номенклатура,
		|	ОстаткиСерииИтог.Характеристика КАК Характеристика,
		|	ОстаткиСерииИтог.Партия КАК Партия
		|ИЗ
		|	ОстаткиСерииИтог КАК ОстаткиСерииИтог
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиСерииИтог.Серия,
		|	ОстаткиСерииИтог.Характеристика,
		|	ОстаткиСерииИтог.Партия,
		|	ОстаткиСерииИтог.Номенклатура");
		
		КонтролироватьОстаткиПоДокументам = ВидУчета = Перечисления.ВидыУчетаОрдерныхСкладов.УчетОстатковПоСкладскимОрдерам;
		Запрос.УстановитьПараметр("ДокументОснование", ?(КонтролироватьОстаткиПоДокументам, ДанныеЗаполнения, Неопределено));
		
		Запрос.УстановитьПараметр("Организация", Компания);
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиницаРезерв);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Запрос.УстановитьПараметр("КонтролироватьОстаткиПоДокументам", Истина);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		Если КонтролироватьОстаткиПоДокументам Тогда
			ДокументПоступления = ДанныеЗаполнения;
		КонецЕсли;
		
		Если РезультатыЗапроса[2].Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаСерииНоменклатуры = РезультатыЗапроса[3].Выгрузить();
		ТаблицаОстаткиСерииНоменклатуры = РезультатыЗапроса[5].Выгрузить();
		ТаблицаОстаткиЗапасы = РезультатыЗапроса[2].Выгрузить();
		
		ВыборкаЗапасы = РезультатыЗапроса[0].Выбрать();
		
		ПараметрыПоискаСерии = Новый Структура("КлючСвязи");
		
		Если СкладскойУчетСервер.КонтролироватьОстаткиПоЯчейкамКПоступлениюОтгрзуке(СтруктурнаяЕдиницаРезерв) Тогда
			ПараметрыПоискаОстаткиЗапасы = Новый Структура("Номенклатура, Характеристика, Партия, Ячейка");
		Иначе
			ПараметрыПоискаОстаткиЗапасы = Новый Структура("Номенклатура, Характеристика, Партия");
		КонецЕсли;
		
		ПараметрыПоискаОстаткиСерииНоменклатуры = Новый Структура("Номенклатура, Характеристика, Партия, Серия");
		
		ОблагаетсяНДС = НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		
		СтруктураЦен = Новый Структура;
		СтруктураЦен.Вставить("ВидЦен", ВидЦен);
		СтруктураЦен.Вставить("ЭтоНовыйОбъект", Истина);
		СтруктураЦен.Вставить("ДатаОбработки", ТекущаяДатаСеанса());
		СтруктураЦен.Вставить("Номенклатура", Неопределено);
		СтруктураЦен.Вставить("Коэффициент", 1);
		СтруктураЦен.Вставить("ВалютаДокумента", ВалютаДокумента);
		СтруктураЦен.Вставить("Характеристика", Неопределено);
		СтруктураЦен.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
		
		ДанныеСтроки = Новый Структура;
		ДанныеСтроки.Вставить("Количество", 1);
		ДанныеСтроки.Вставить("Цена", 0);
		ДанныеСтроки.Вставить("Сумма", 0);
		ДанныеСтроки.Вставить("ПроцентСкидкиНаценки", 0);
		ДанныеСтроки.Вставить("СуммаСкидкиНаценки", 0);
		ДанныеСтроки.Вставить("СтавкаНДС", Неопределено);
		ДанныеСтроки.Вставить("СуммаНДС", 0);
		ДанныеСтроки.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
		ДанныеСтроки.Вставить("Всего", 0);
		
		Пока ВыборкаЗапасы.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ВыборкаЗапасы.Количество) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ПараметрыПоискаОстаткиЗапасы, ВыборкаЗапасы);
			НайденныеОстаткиЗапасы = ТаблицаОстаткиЗапасы.НайтиСтроки(ПараметрыПоискаОстаткиЗапасы);
			
			Если Не НайденныеОстаткиЗапасы.Количество() Или (НайденныеОстаткиЗапасы.Количество() И НайденныеОстаткиЗапасы[0].Количество = 0) Тогда
				Продолжить
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ПараметрыПоискаСерии, ВыборкаЗапасы);
			НайденныеСерии = ТаблицаСерииНоменклатуры.НайтиСтроки(ПараметрыПоискаСерии);
			
			КоличествоСерий = 0;
			ИспользуютсяСерииВСтроке = Ложь;
			Для Каждого СтрокаСерии Из НайденныеСерии Цикл
				
				ИспользуютсяСерииВСтроке = Истина;
				
				ЗаполнитьЗначенияСвойств(ПараметрыПоискаОстаткиСерииНоменклатуры, СтрокаСерии);
				НайденныеОстаткиСерий = ТаблицаОстаткиСерииНоменклатуры.НайтиСтроки(ПараметрыПоискаОстаткиСерииНоменклатуры);
				
				Если Не НайденныеОстаткиСерий.Количество() Или (НайденныеОстаткиСерий.Количество() И НайденныеОстаткиСерий[0].Количество = 0) Тогда
					Продолжить
				КонецЕсли;
				
				ОстатокСерий = НайденныеОстаткиСерий[0];
				
				Если Не ОстатокСерий.Количество > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрокаСерии = СерииНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, СтрокаСерии); 
				
				Если НоваяСтрокаСерии.Количество >= ОстатокСерий.Количество Тогда
					НоваяСтрокаСерии.Количество = ОстатокСерий.Количество;
				КонецЕсли;
				
				ОстатокСерий.Количество = ОстатокСерий.Количество - НоваяСтрокаСерии.Количество;
				
				КоличествоСерий = КоличествоСерий + НоваяСтрокаСерии.Количество;
				
			КонецЦикла;
			
			
			Если ИспользуютсяСерииВСтроке И КоличествоСерий = 0 Тогда
				Продолжить
			КонецЕсли;
			
			ОстатокЗапасов = НайденныеОстаткиЗапасы[0];
			
			НоваяСтрокаЗапасы = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЗапасы, ВыборкаЗапасы);
			
			Если ТипЗнч(НоваяСтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
				
				КоличествоВСтрокеЗапасов = ?(КоличествоСерий > 0, КоличествоСерий, НоваяСтрокаЗапасы.Количество);
				
				Если КоличествоВСтрокеЗапасов >= ОстатокЗапасов.Количество Тогда
					КоличествоВСтрокеЗапасов = ОстатокЗапасов.Количество;
					ОстатокЗапасов.Количество = 0;
				Иначе
					ОстатокЗапасов.Количество = ОстатокЗапасов.Количество - КоличествоВСтрокеЗапасов;
				КонецЕсли;
				
				НоваяСтрокаЗапасы.Количество = КоличествоВСтрокеЗапасов;
				
			Иначе
				
				КоличествоСтрокиВЕдиницахХранения = НоваяСтрокаЗапасы.Количество * НоваяСтрокаЗапасы.ЕдиницаИзмерения.Коэффициент;
				КоличествоВСтрокеЗапасов = ?(КоличествоСерий > 0, КоличествоСерий, КоличествоСтрокиВЕдиницахХранения);
				
				Если КоличествоВСтрокеЗапасов >= ОстатокЗапасов.Количество Тогда
					КоличествоВСтрокеЗапасов = ОстатокЗапасов.Количество;
					ОстатокЗапасов.Количество = 0;
				Иначе
					ОстатокЗапасов.Количество = ОстатокЗапасов.Количество - КоличествоВСтрокеЗапасов;
				КонецЕсли;
				
				НоваяСтрокаЗапасы.Количество = КоличествоВСтрокеЗапасов/ НоваяСтрокаЗапасы.ЕдиницаИзмерения.Коэффициент;;
				
			КонецЕсли;
			
			Если СерииНоменклатурыУНФ.ИспользоватьСерииНоменклатурыОстатки() = Истина Тогда
				НоваяСтрокаЗапасы.СерииНоменклатуры = СерииНоменклатурыУНФ.ПредставлениеСерийНоменклатуры(СерииНоменклатуры, НоваяСтрокаЗапасы.КлючСвязи)
			КонецЕсли;
			
			Если ОблагаетсяНДС Тогда
				Партия = НоваяСтрокаЗапасы.Партия;
				Если ЗначениеЗаполнено(Партия) И Партия.Статус = Перечисления.СтатусыПартий.ТоварыНаКомиссии 
					И Партия.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
					
					НоваяСтрокаЗапасы.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.БезНДС);;
				Иначе
					
					Если ЗначениеЗаполнено(НоваяСтрокаЗапасы.Номенклатура.ВидСтавкиНДС) Тогда
						НоваяСтрокаЗапасы.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(НоваяСтрокаЗапасы.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
					Иначе
						НоваяСтрокаЗапасы.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Компания.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				
				Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
					СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
				Иначе
					СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
				КонецЕсли;
				
				НоваяСтрокаЗапасы.СтавкаНДС = СтавкаНДСПоУмолчанию;
				
			КонецЕсли;
			
			Если УчетГТД Тогда
				НоваяСтрокаЗапасы.СтранаПроисхождения = НоваяСтрокаЗапасы.Номенклатура.СтранаПроисхождения;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтруктураЦен, НоваяСтрокаЗапасы);
			НоваяСтрокаЗапасы.Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураЦен);
			
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, НоваяСтрокаЗапасы);
			ЗаполнениеОбъектовУНФ.РассчитатьСуммыВСтрокеТабличнойЧасти(ДанныеСтроки);
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЗапасы, ДанныеСтроки);
			
			НоваяСтрокаЗапасы.ТипНоменклатурыЗапас = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СерииНоменклатурыУНФ.УдалитьСерииНоменклатурыВТабличнойЧастиВЗависимостиОтПолитики(ЭтотОбъект);
	
	ЭтотОбъект.ИспользоватьТовары = Истина;
	
КонецПроцедуры

// Обработчик заполнения на основании складского ордера без учета остатков.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ПриходныйОрдер Или ДокументСсылка.РасходныйОрдер.
//	Приходный - Признак вида ордера.
//
Процедура ЗаполнитьПоСкладскомуОрдеруБезУчетаОстатков(ДанныеЗаполнения, Компания) Экспорт
	
	УчетГТД = ПолучитьФункциональнуюОпцию("УчетГТД");
	ОблагаетсяНДС = НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
	НалогиУНФ.ЗаполнитьНДСВключенВСтоимостьВДокументе(ЭтотОбъект);
	
	СтруктураЦен = Новый Структура;
	СтруктураЦен.Вставить("ВидЦен", ВидЦен);
	СтруктураЦен.Вставить("ЭтоНовыйОбъект", Истина);
	СтруктураЦен.Вставить("ДатаОбработки", ТекущаяДатаСеанса());
	СтруктураЦен.Вставить("Номенклатура", Неопределено);
	СтруктураЦен.Вставить("Коэффициент", 1);
	СтруктураЦен.Вставить("ВалютаДокумента", ВалютаДокумента);
	СтруктураЦен.Вставить("Характеристика", Неопределено);
	СтруктураЦен.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
	
	ДанныеСтроки = Новый Структура;
	ДанныеСтроки.Вставить("Количество", 1);
	ДанныеСтроки.Вставить("Цена", 0);
	ДанныеСтроки.Вставить("Сумма", 0);
	ДанныеСтроки.Вставить("ПроцентСкидкиНаценки", 0);
	ДанныеСтроки.Вставить("СуммаСкидкиНаценки", 0);
	ДанныеСтроки.Вставить("СтавкаНДС", Неопределено);
	ДанныеСтроки.Вставить("СуммаНДС", 0);
	ДанныеСтроки.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
	ДанныеСтроки.Вставить("Всего", 0);
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Запасы Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Количество) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаЗапасы = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗапасы, СтрокаТабличнойЧасти);
		
		НоваяСтрокаЗапасы.СтруктурнаяЕдиницаРезерв = ДанныеЗаполнения.СтруктурнаяЕдиница;
		НоваяСтрокаЗапасы.Ячейка = СтрокаТабличнойЧасти.Ячейка;
		
		Если ОблагаетсяНДС Тогда
			Партия = НоваяСтрокаЗапасы.Партия;
			Если ЗначениеЗаполнено(Партия) И Партия.Статус = Перечисления.СтатусыПартий.ТоварыНаКомиссии 
				И Партия.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
				
				НоваяСтрокаЗапасы.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.БезНДС);;
			Иначе
				
				Если ЗначениеЗаполнено(НоваяСтрокаЗапасы.Номенклатура.ВидСтавкиНДС) Тогда
					НоваяСтрокаЗапасы.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(НоваяСтрокаЗапасы.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
				Иначе
					НоваяСтрокаЗапасы.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Компания.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			
			Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
				СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			Иначе
				СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
			КонецЕсли;
			
			НоваяСтрокаЗапасы.СтавкаНДС = СтавкаНДСПоУмолчанию;
			
		КонецЕсли;
		
		Если УчетГТД Тогда
			НоваяСтрокаЗапасы.СтранаПроисхождения = НоваяСтрокаЗапасы.Номенклатура.СтранаПроисхождения;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураЦен, НоваяСтрокаЗапасы);
		НоваяСтрокаЗапасы.Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураЦен);
		
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, НоваяСтрокаЗапасы);
		ЗаполнениеОбъектовУНФ.РассчитатьСуммыВСтрокеТабличнойЧасти(ДанныеСтроки);
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗапасы, ДанныеСтроки);
		
		НоваяСтрокаЗапасы.ТипНоменклатурыЗапас = Истина;
		
	КонецЦикла;
	
	ЭтотОбъект.ИспользоватьТовары = Истина;
	
	СерииНоменклатурыУНФ.ЗаполнитьТЧСерииНоменклатурыПоКлючуСвязи(ЭтотОбъект, ДанныеЗаполнения);
	СерииНоменклатурыУНФ.УдалитьСерииНоменклатурыВТабличнойЧастиВЗависимостиОтПолитики(ЭтотОбъект);
	
КонецПроцедуры

Функция ЗапросДанныхДляЗаполнения(ДанныеЗаполнения)
	
	Конструктор = Новый СхемаЗапроса;
	Пакет = Конструктор.ПакетЗапросов[0];
	Пакет.ВыбиратьРазрешенные = Истина;
	Оператор0 = Пакет.Операторы[0];
	Оператор0.Источники.Добавить(ДанныеЗаполнения.Метаданные().ПолноеИмя());
	Для Каждого ОписаниеПоляШапки Из ОписаниеПолейШапки(ДанныеЗаполнения) Цикл
		Оператор0.ВыбираемыеПоля.Добавить(ОписаниеПоляШапки.Ключ);
		Если ЗначениеЗаполнено(ОписаниеПоляШапки.Значение) Тогда
			Пакет.Колонки[Пакет.Колонки.Количество() - 1].Псевдоним = ОписаниеПоляШапки.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекОписаниеПоляТабличнойЧастиЗапасы Из ОписаниеПолейТабличнойЧастиЗапасы(ДанныеЗаполнения) Цикл
		Оператор0.ВыбираемыеПоля.Добавить(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1.%2",
		ИмяТабличнойЧасти(ДанныеЗаполнения),
		ТекОписаниеПоляТабличнойЧастиЗапасы.Ключ));
		Если ЗначениеЗаполнено(ТекОписаниеПоляТабличнойЧастиЗапасы.Значение) Тогда
			Пакет.Колонки[Пакет.Колонки.Количество() - 1].Псевдоним = ТекОписаниеПоляТабличнойЧастиЗапасы.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		Оператор0.ВыбираемыеПоля.Добавить("СкидкиНаценки.КлючСвязи");
		Оператор0.ВыбираемыеПоля.Добавить("СкидкиНаценки.СкидкаНаценка");
		Оператор0.ВыбираемыеПоля.Добавить("СкидкиНаценки.Сумма");
	КонецЕсли;
	
	// Наборы
	Если ДанныеЗаполнения.Метаданные().ТабличныеЧасти.Найти("ДобавленныеНаборы")<>Неопределено Тогда
		Оператор0.ВыбираемыеПоля.Добавить("ДобавленныеНаборы.НоменклатураНабора");
		Оператор0.ВыбираемыеПоля.Добавить("ДобавленныеНаборы.ХарактеристикаНабора");
		Оператор0.ВыбираемыеПоля.Добавить("ДобавленныеНаборы.Количество");
	КонецЕсли;
	// Конец Наборы
	
	Оператор0.Отбор.Добавить("Ссылка = &Параметр");
	
	Результат = Новый Запрос(Конструктор.ПолучитьТекстЗапроса());
	Результат.УстановитьПараметр("Параметр", ДанныеЗаполнения);
	
	Возврат Результат;
	
КонецФункции

Функция ИмяТабличнойЧасти(ДанныеЗаполнения)
	
	ИменаТабличныхЧастей = Новый Соответствие;
	ИменаТабличныхЧастей[Тип("ДокументСсылка.СчетНаОплату")] = "Запасы";
	
	Возврат ИменаТабличныхЧастей[ТипЗнч(ДанныеЗаполнения)];
	
КонецФункции

Функция ОписаниеПолейШапки(ДанныеЗаполнения)
	
	Результат = Новый Соответствие;
	
	ДанныеЗаполненияМетаданные = ДанныеЗаполнения.Метаданные();
	
	Результат.Вставить("Ссылка", "ДокументОснование");
	Результат.Вставить("Организация");
	Результат.Вставить("Организация.БанковскийСчетПоУмолчанию", "БанковскийСчет");
	
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "ДисконтнаяКарта");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "УсловияСчетаЗаказа");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "ТекстУсловийСчетаЗаказа");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "ПроцентСкидкиПоДисконтнойКарте");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "Курс");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "Кратность");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "СуммаВключаетНДС");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "НалогообложениеНДС");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "Договор");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "Контрагент");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "ВалютаДокумента");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		Результат.Вставить("СкидкиРассчитаны");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьРеквизитЕслиОнЕстьВДокументе(РезультатСоответствие, ДанныеЗаполненияМетаданные, ИмяРеквизита)
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита, ДанныеЗаполненияМетаданные) Тогда
		РезультатСоответствие.Вставить(ИмяРеквизита);
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеПолейТабличнойЧастиЗапасы(ДанныеЗаполнения)
	
	Результат = Новый Соответствие;
	Результат.Вставить("Номенклатура");
	Результат.Вставить("Номенклатура.ТипНоменклатуры");
	Результат.Вставить("Характеристика");
	Результат.Вставить("Содержание");
	Результат.Вставить("ЕдиницаИзмерения");
	Результат.Вставить("Количество");
	Результат.Вставить("Цена");
	Результат.Вставить("ПроцентСкидкиНаценки");
	Результат.Вставить("СуммаСкидкиНаценки");
	Результат.Вставить("Сумма");
	Результат.Вставить("СтавкаНДС");
	Результат.Вставить("СуммаНДС");
	Результат.Вставить("Всего");
	Если ИмяТабличнойЧасти(ДанныеЗаполнения) <> "РаботыИУслуги" Тогда
		Результат.Вставить("Партия");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		Результат.Вставить("КлючСвязи");
		Результат.Вставить("СуммаАвтоматическойСкидки");
		Результат.Вставить("ПроцентАвтоматическойСкидки");
	КонецЕсли;
	
	// Наборы
	Если ДанныеЗаполнения.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти(ДанныеЗаполнения)].Реквизиты.Найти("НоменклатураНабора")<>Неопределено Тогда
		Результат.Вставить("НоменклатураНабора");
		Результат.Вставить("ХарактеристикаНабора");
		Результат.Вставить("ДоляСтоимости");
	КонецЕсли;
	// Конец Наборы
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьТабличнуюЧастьИсполнителиПоРесурсам(ИсполнителиКлючСвязи) Экспорт
	
	МассивСотрудников	= Новый Массив();
	МассивБригад 		= Новый Массив();
	Для каждого СтрокаТЧ Из РесурсыПредприятия Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.РесурсПредприятия) Тогда
			
			ЗначениеРесурса = СтрокаТЧ.РесурсПредприятия.ЗначениеРесурса;
			Если ТипЗнч(ЗначениеРесурса) = Тип("СправочникСсылка.Сотрудники") Тогда
				
				МассивСотрудников.Добавить(ЗначениеРесурса);
				
			ИначеЕсли ТипЗнч(ЗначениеРесурса) = Тип("СправочникСсылка.Бригады") Тогда
				
				МассивБригад.Добавить(ЗначениеРесурса);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСотрудников.Сотрудник КАК Сотрудник,
	|	ТаблицаСотрудников.Наименование КАК Наименование,
	|	ПлановыеНачисленияИУдержанияСрезПоследних.ВидНачисленияУдержания КАК ВидНачисленияУдержания
	|ПОМЕСТИТЬ ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний
	|ИЗ
	|	(ВЫБРАТЬ
	|		Сотрудники.Ссылка КАК Сотрудник,
	|		Сотрудники.Наименование КАК Наименование
	|	ИЗ
	|		Справочник.Сотрудники КАК Сотрудники
	|	ГДЕ
	|		Сотрудники.Ссылка В(&МассивСотрудников)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Сотрудники.Ссылка,
	|		Сотрудники.Наименование
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		БригадыСостав.Сотрудник,
	|		БригадыСостав.Сотрудник.Наименование
	|	ИЗ
	|		Справочник.Бригады.Состав КАК БригадыСостав
	|	ГДЕ
	|		БригадыСостав.Ссылка В(&МассивБригад)) КАК ТаблицаСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияИУдержания.СрезПоследних(
	|				&НаДату,
	|				Организация = &Организация
	|					И Актуальность
	|					И ВидНачисленияУдержания В (ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплата), ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплатаПроцент), ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.ФиксированнаяСумма))) КАК ПлановыеНачисленияИУдержанияСрезПоследних
	|		ПО ТаблицаСотрудников.Сотрудник = ПлановыеНачисленияИУдержанияСрезПоследних.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.Сотрудник КАК Сотрудник,
	|	ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.Наименование КАК Наименование,
	|	ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.ВидНачисленияУдержания КАК ВидНачисленияУдержания,
	|	1 КАК КТУ,
	|	ПлановыеНачисленияИУдержанияСрезПоследних.Сумма * КурсВалютыНачисления.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыНачисления.Кратность) КАК РазмерНачисленияУдержания
	|ИЗ
	|	ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний КАК ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияИУдержания.СрезПоследних(
	|				&НаДату,
	|				Организация = &Организация
	|					И Актуальность) КАК ПлановыеНачисленияИУдержанияСрезПоследних
	|		ПО ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.Сотрудник = ПлановыеНачисленияИУдержанияСрезПоследних.Сотрудник
	|			И ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.ВидНачисленияУдержания = ПлановыеНачисленияИУдержанияСрезПоследних.ВидНачисленияУдержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&НаДату, ) КАК КурсВалютыНачисления
	|		ПО (ПлановыеНачисленияИУдержанияСрезПоследних.Валюта = КурсВалютыНачисления.Валюта),
	|	РегистрСведений.КурсыВалют.СрезПоследних(&НаДату, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("НаДату", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	Запрос.УстановитьПараметр("МассивБригад", МассивБригад);
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаСотрудников = МассивРезультатов[1].Выгрузить();
	
	Если ИсполнителиКлючСвязи = Неопределено Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Работы Цикл
			
			Если СтрокаТабличнойЧасти.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
				
				Для каждого СтрокаТЧ Из ТаблицаСотрудников Цикл
					
					НоваяСтрока = Исполнители.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
					НоваяСтрока.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для каждого СтрокаТЧ Из ТаблицаСотрудников Цикл
			
			НоваяСтрока = Исполнители.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			НоваяСтрока.КлючСвязи = ИсполнителиКлючСвязи;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьИсполнителиПоБригадам(МассивБригад, ИсполнителиКлючСвязи) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БригадыСостав.Сотрудник КАК Сотрудник,
	|	БригадыСостав.Сотрудник.Наименование КАК Наименование,
	|	ПлановыеНачисленияИУдержанияСрезПоследних.ВидНачисленияУдержания КАК ВидНачисленияУдержания
	|ПОМЕСТИТЬ ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний
	|ИЗ
	|	Справочник.Бригады.Состав КАК БригадыСостав
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияИУдержания.СрезПоследних(
	|				&НаДату,
	|				Организация = &Организация
	|					И Актуальность
	|					И ВидНачисленияУдержания В (ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплата), ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплатаПроцент), ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.ФиксированнаяСумма))) КАК ПлановыеНачисленияИУдержанияСрезПоследних
	|		ПО БригадыСостав.Сотрудник = ПлановыеНачисленияИУдержанияСрезПоследних.Сотрудник
	|ГДЕ
	|	БригадыСостав.Ссылка В(&МассивБригад)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.Сотрудник КАК Сотрудник,
	|	ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.Наименование КАК Наименование,
	|	ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.ВидНачисленияУдержания КАК ВидНачисленияУдержания,
	|	1 КАК КТУ,
	|	ПлановыеНачисленияИУдержанияСрезПоследних.Сумма * КурсВалютыНачисления.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыНачисления.Кратность) КАК РазмерНачисленияУдержания
	|ИЗ
	|	ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний КАК ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияИУдержания.СрезПоследних(
	|				&НаДату,
	|				Организация = &Организация
	|					И Актуальность) КАК ПлановыеНачисленияИУдержанияСрезПоследних
	|		ПО ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.Сотрудник = ПлановыеНачисленияИУдержанияСрезПоследних.Сотрудник
	|			И ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.ВидНачисленияУдержания = ПлановыеНачисленияИУдержанияСрезПоследних.ВидНачисленияУдержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&НаДату, ) КАК КурсВалютыНачисления
	|		ПО (ПлановыеНачисленияИУдержанияСрезПоследних.Валюта = КурсВалютыНачисления.Валюта),
	|	РегистрСведений.КурсыВалют.СрезПоследних(&НаДату, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("НаДату", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	Запрос.УстановитьПараметр("МассивБригад", МассивБригад);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаСотрудников = МассивРезультатов[1].Выгрузить();
	
	Если ИсполнителиКлючСвязи = Неопределено Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Работы Цикл
			
			Если СтрокаТабличнойЧасти.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
				
				Для каждого СтрокаТЧ Из ТаблицаСотрудников Цикл
					
					НоваяСтрока = Исполнители.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
					НоваяСтрока.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для каждого СтрокаТЧ Из ТаблицаСотрудников Цикл
			
			НоваяСтрока = Исполнители.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			НоваяСтрока.КлючСвязи = ИсполнителиКлючСвязи;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКолонкуРезервПоОстаткам(ПараметрыОтбора = Неопределено) Экспорт
	
	Если ПараметрыОтбора = Неопределено Тогда
		ПараметрыОтбора = Новый Структура;
	КонецЕсли;
	ПараметрыОтбора.Вставить("ЭтоРазделитель", Ложь);
	
	Строки = Запасы.НайтиСтроки(ПараметрыОтбора);
	Для каждого Строка Из Строки Цикл
		Строка.Резерв = 0;
	КонецЦикла;
	
	СтрокиДляВыгрузки = Запасы.НайтиСтроки(ПараметрыОтбора);
	ТаблицаЗапасы = Запасы.Выгрузить(СтрокиДляВыгрузки,"Номенклатура, Характеристика, Партия, СтруктурнаяЕдиницаРезерв");
	ТаблицаЗапасы.Свернуть("Номенклатура, Характеристика, Партия, СтруктурнаяЕдиницаРезерв");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА &СкладВТабличнойЧасти
	|			ТОГДА ТаблицаЗапасы.СтруктурнаяЕдиницаРезерв
	|		ИНАЧЕ &СтруктурнаяЕдиница
	|	КОНЕЦ КАК СтруктурнаяЕдиницаРезерв
	|ПОМЕСТИТЬ ВТНоменклатура
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаЗапасы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТНоменклатура.Номенклатура КАК Номенклатура,
	|	ВТНоменклатура.Характеристика КАК Характеристика,
	|	ВТНоменклатура.Партия КАК Партия,
	|	ВТНоменклатура.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиницаРезерв,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ОстаткиНаСкладе
	|ИЗ
	|	ВТНоменклатура КАК ВТНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(
	|				,
	|				Организация = &Организация
	|					И ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)) КАК ЗапасыОстатки
	|		ПО ВТНоменклатура.Номенклатура = ЗапасыОстатки.Номенклатура
	|			И ВТНоменклатура.Характеристика = ЗапасыОстатки.Характеристика
	|			И ВТНоменклатура.Партия = ЗапасыОстатки.Партия
	|			И ВТНоменклатура.СтруктурнаяЕдиницаРезерв = ЗапасыОстатки.СтруктурнаяЕдиница
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТНоменклатура.Номенклатура,
	|	ВТНоменклатура.Партия,
	|	ВТНоменклатура.СтруктурнаяЕдиницаРезерв,
	|	ВТНоменклатура.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТНоменклатура.Номенклатура КАК Номенклатура,
	|	ВТНоменклатура.Характеристика КАК Характеристика,
	|	ВТНоменклатура.Партия КАК Партия,
	|	ВТНоменклатура.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиницаРезерв,
	|	СУММА(ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ) КАК КоличествоДвижение
	|ПОМЕСТИТЬ ДвижениеДокумента
	|ИЗ
	|	ВТНоменклатура КАК ВТНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|		ПО ВТНоменклатура.Номенклатура = ДвиженияДокументаЗапасы.Номенклатура
	|			И ВТНоменклатура.Характеристика = ДвиженияДокументаЗапасы.Характеристика
	|			И ВТНоменклатура.Партия = ДвиженияДокументаЗапасы.Партия
	|			И ВТНоменклатура.СтруктурнаяЕдиницаРезерв = ДвиженияДокументаЗапасы.СтруктурнаяЕдиница
	|ГДЕ
	|	ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|	И ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТНоменклатура.Партия,
	|	ВТНоменклатура.Характеристика,
	|	ВТНоменклатура.СтруктурнаяЕдиницаРезерв,
	|	ВТНоменклатура.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТНоменклатура.Номенклатура КАК Номенклатура,
	|	ВТНоменклатура.Характеристика КАК Характеристика,
	|	ВТНоменклатура.Партия КАК Партия,
	|	ВТНоменклатура.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиницаРезерв,
	|	СУММА(ЕСТЬNULL(ДвижениеДокумента.КоличествоДвижение, 0) + ЕСТЬNULL(ОстаткиНаСкладе.КоличествоОстаток, 0)) КАК КоличествоОстаток
	|ИЗ
	|	ВТНоменклатура КАК ВТНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНаСкладе КАК ОстаткиНаСкладе
	|		ПО ВТНоменклатура.Номенклатура = ОстаткиНаСкладе.Номенклатура
	|			И ВТНоменклатура.Характеристика = ОстаткиНаСкладе.Характеристика
	|			И ВТНоменклатура.Партия = ОстаткиНаСкладе.Партия
	|			И ВТНоменклатура.СтруктурнаяЕдиницаРезерв = ОстаткиНаСкладе.СтруктурнаяЕдиницаРезерв
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДвижениеДокумента КАК ДвижениеДокумента
	|		ПО ВТНоменклатура.Номенклатура = ДвижениеДокумента.Номенклатура
	|			И ВТНоменклатура.Характеристика = ДвижениеДокумента.Характеристика
	|			И ВТНоменклатура.Партия = ДвижениеДокумента.Партия
	|			И ВТНоменклатура.СтруктурнаяЕдиницаРезерв = ДвижениеДокумента.СтруктурнаяЕдиницаРезерв
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТНоменклатура.Характеристика,
	|	ВТНоменклатура.СтруктурнаяЕдиницаРезерв,
	|	ВТНоменклатура.Номенклатура,
	|	ВТНоменклатура.Партия";
	
	Запрос.УстановитьПараметр("ТаблицаЗапасы", ТаблицаЗапасы);
	Запрос.УстановитьПараметр("СкладВТабличнойЧасти", ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиницаРезерв);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", Константы.УчетПоКомпании.Компания(Организация));
	
	ТаблицаПериодов = Новый ТаблицаЗначений();
	ТаблицаПериодов.Колонки.Добавить("ДатаОтгрузки");
	ТаблицаПериодов.Колонки.Добавить("СтрокаЗапасы");
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", Выборка.Партия);
		
		Для каждого КлючИЗначение Из ПараметрыОтбора Цикл
			Если СтруктураДляПоиска.Свойство(КлючИЗначение.Ключ) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураДляПоиска.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
		МассивСтрокЗапасы = Запасы.НайтиСтроки(СтруктураДляПоиска);
		Для каждого СтрокаЗапасы Из МассивСтрокЗапасы Цикл
			НоваяСтрока = ТаблицаПериодов.Добавить();
			НоваяСтрока.ДатаОтгрузки = СтрокаЗапасы.ДатаОтгрузки;
			НоваяСтрока.СтрокаЗапасы = СтрокаЗапасы;
		КонецЦикла;
		
		ВсегоОстаток = Выборка.КоличествоОстаток;
		ТаблицаПериодов.Сортировать("ДатаОтгрузки");
		Для каждого СтрокаТаблицыПериодов Из ТаблицаПериодов Цикл
			СтрокаЗапасы = СтрокаТаблицыПериодов.СтрокаЗапасы;
			ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток / СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			Если СтрокаЗапасы.Количество >= ВсегоОстаток Тогда
				СтрокаЗапасы.Резерв = ВсегоОстаток;
				ВсегоОстаток = 0;
			Иначе
				СтрокаЗапасы.Резерв = СтрокаЗапасы.Количество;
				ВсегоОстаток = ВсегоОстаток - СтрокаЗапасы.Количество;
				ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток * СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаПериодов.Очистить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ТоварыЗаполнитьКолонкуРезервПоОстаткам() Экспорт
	
	Запасы.ЗагрузитьКолонку(Новый Массив(Запасы.Количество()), "Резерв");
	Запасы.ЗагрузитьКолонку(Новый Массив(Запасы.Количество()), "РезервОтгрузка");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ТипНоменклатурыЗапас";
	
	Запрос.УстановитьПараметр("ТаблицаЗапасы", Запасы.Выгрузить());
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						&Организация,
	|						&СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.Номенклатура.СчетУчетаЗапасов,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы)) КАК ЗапасыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &Период
	|		И ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия";
	
	Запрос.УстановитьПараметр("Период", Финиш);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", Константы.УчетПоКомпании.Компания(Организация));
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиницаРезерв);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", Выборка.Партия);
		
		ВсегоОстаток = Выборка.КоличествоОстаток;
		МассивСтрокЗапасы = Запасы.НайтиСтроки(СтруктураДляПоиска);
		Для каждого СтрокаЗапасы Из МассивСтрокЗапасы Цикл
			ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток / СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			Если СтрокаЗапасы.Количество >= ВсегоОстаток Тогда
				СтрокаЗапасы.Резерв = ВсегоОстаток;
				СтрокаЗапасы.РезервОтгрузка = СтрокаЗапасы.Резерв;
				ВсегоОстаток = 0;
			Иначе
				СтрокаЗапасы.Резерв = СтрокаЗапасы.Количество;
				СтрокаЗапасы.РезервОтгрузка = СтрокаЗапасы.Резерв;
				ВсегоОстаток = ВсегоОстаток - СтрокаЗапасы.Количество;
				ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток * СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ТоварыЗаполнитьКолонкуРезервПоРезервам() Экспорт
	
	ЗаполнитьСтруктурнуюЕдиницуРезерваВТЧ();
	
	Запасы.ЗагрузитьКолонку(Новый Массив(Запасы.Количество()), "РезервОтгрузка");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	&Заказ КАК ЗаказПокупателя
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ТипНоменклатурыЗапас";
	
	Запрос.УстановитьПараметр("ТаблицаЗапасы", Запасы.Выгрузить());
	Запрос.УстановитьПараметр("Заказ", Ссылка);
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						&Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.Номенклатура.СчетУчетаЗапасов,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ТаблицаЗапасы.ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|					ГДЕ
	|						ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))) КАК ЗапасыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.ЗаказПокупателя,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &Период
	|		И ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И ДвиженияДокументаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.ЗаказПокупателя,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия";
	
	Запрос.УстановитьПараметр("Период", Финиш);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", Константы.УчетПоКомпании.Компания(Организация));
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиницаРезерв", Выборка.СтруктурнаяЕдиница);
		СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", Выборка.Партия);
		
		ВсегоОстаток = Выборка.КоличествоОстаток;
		МассивСтрокЗапасы = Запасы.НайтиСтроки(СтруктураДляПоиска);
		Для каждого СтрокаЗапасы Из МассивСтрокЗапасы Цикл
			
			ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток / СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			Если СтрокаЗапасы.Количество >= ВсегоОстаток Тогда
				
				СтрокаЗапасы.РезервОтгрузка = ВсегоОстаток;
				ВсегоОстаток = 0;
				
			Иначе
				
				СтрокаЗапасы.РезервОтгрузка = СтрокаЗапасы.Количество;
				ВсегоОстаток = ВсегоОстаток - СтрокаЗапасы.Количество;
				ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток * СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
		Если СтрокаТабличнойЧасти.РезервОтгрузка < СтрокаТабличнойЧасти.Резерв Тогда
			СтрокаТабличнойЧасти.Резерв = СтрокаТабличнойЧасти.РезервОтгрузка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура МатериалыЗаполнитьКолонкуРезервПоОстаткам(МатериалыКлючСвязи) Экспорт
	
	ЗаполнитьСтруктурнуюЕдиницуРезерваВТЧ();
	
	Если МатериалыКлючСвязи = Неопределено Тогда
		Материалы.ЗагрузитьКолонку(Новый Массив(Материалы.Количество()), "Резерв");
		Материалы.ЗагрузитьКолонку(Новый Массив(Материалы.Количество()), "РезервОтгрузка");
	Иначе
		РезультатПоиска = Материалы.НайтиСтроки(Новый Структура("КлючСвязи", МатериалыКлючСвязи));
		Для каждого СтрокаТабличнойЧасти Из РезультатПоиска Цикл
			СтрокаТабличнойЧасти.Резерв = 0;
			СтрокаТабличнойЧасти.РезервОтгрузка = 0;
		КонецЦикла;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтборПоКлючуСвязи
	|				ТОГДА ТаблицаЗапасы.КлючСвязи = &КлючСвязи
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("ТаблицаЗапасы", Материалы.Выгрузить());
	Запрос.УстановитьПараметр("ОтборПоКлючуСвязи", ?(МатериалыКлючСвязи = Неопределено, Ложь, Истина));
	Запрос.УстановитьПараметр("КлючСвязи", МатериалыКлючСвязи);
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						&Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.Номенклатура.СчетУчетаЗапасов,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы)) КАК ЗапасыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &Период
	|		И ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия";
	
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", Константы.УчетПоКомпании.Компания(Организация));
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураДляПоиска = Новый Структура;
		Если МатериалыКлючСвязи <> Неопределено Тогда
			СтруктураДляПоиска.Вставить("КлючСвязи", МатериалыКлючСвязи);
		КонецЕсли;
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиницаРезерв", Выборка.СтруктурнаяЕдиница);
		СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", Выборка.Партия);
		
		ВсегоОстаток = Выборка.КоличествоОстаток;
		МассивСтрокЗапасы = Материалы.НайтиСтроки(СтруктураДляПоиска);
		Для каждого СтрокаЗапасы Из МассивСтрокЗапасы Цикл
			ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток / СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			Если СтрокаЗапасы.Количество >= ВсегоОстаток Тогда
				СтрокаЗапасы.Резерв = ВсегоОстаток;
				СтрокаЗапасы.РезервОтгрузка = СтрокаЗапасы.Резерв;
				ВсегоОстаток = 0;
			Иначе
				СтрокаЗапасы.Резерв = СтрокаЗапасы.Количество;
				СтрокаЗапасы.РезервОтгрузка = СтрокаЗапасы.Резерв;
				ВсегоОстаток = ВсегоОстаток - СтрокаЗапасы.Количество;
				ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток * СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура МатериалыЗаполнитьКолонкуРезервПоРезервам(МатериалыКлючСвязи) Экспорт
	
	ЗаполнитьСтруктурнуюЕдиницуРезерваВТЧ();
	
	Если МатериалыКлючСвязи = Неопределено Тогда
		Материалы.ЗагрузитьКолонку(Новый Массив(Материалы.Количество()), "РезервОтгрузка");
	Иначе
		РезультатПоиска = Материалы.НайтиСтроки(Новый Структура("КлючСвязи", МатериалыКлючСвязи));
		Для каждого СтрокаТабличнойЧасти Из РезультатПоиска Цикл
			СтрокаТабличнойЧасти.РезервОтгрузка = 0;
		КонецЦикла;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	&Заказ КАК ЗаказПокупателя
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтборПоКлючуСвязи
	|				ТОГДА ТаблицаЗапасы.КлючСвязи = &КлючСвязи
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("ТаблицаЗапасы", Материалы.Выгрузить());
	Запрос.УстановитьПараметр("ОтборПоКлючуСвязи", ?(МатериалыКлючСвязи = Неопределено, Ложь, Истина));
	Запрос.УстановитьПараметр("КлючСвязи", МатериалыКлючСвязи);
	Запрос.УстановитьПараметр("Заказ", Ссылка);
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						&Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.Номенклатура.СчетУчетаЗапасов,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ТаблицаЗапасы.ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|					ГДЕ
	|						ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))) КАК ЗапасыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.ЗаказПокупателя,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &Период
	|		И ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И ДвиженияДокументаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.ЗаказПокупателя,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия";
	
	Запрос.УстановитьПараметр("Период", Финиш);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", Константы.УчетПоКомпании.Компания(Организация));
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураДляПоиска = Новый Структура;
		Если МатериалыКлючСвязи <> Неопределено Тогда
			СтруктураДляПоиска.Вставить("КлючСвязи", МатериалыКлючСвязи);
		КонецЕсли;
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиницаРезерв", Выборка.СтруктурнаяЕдиница);
		СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", Выборка.Партия);
		
		ВсегоОстаток = Выборка.КоличествоОстаток;
		МассивСтрокЗапасы = Материалы.НайтиСтроки(СтруктураДляПоиска);
		Для каждого СтрокаЗапасы Из МассивСтрокЗапасы Цикл
			
			ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток / СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			Если СтрокаЗапасы.Количество >= ВсегоОстаток Тогда
				
				СтрокаЗапасы.РезервОтгрузка = ВсегоОстаток;
				ВсегоОстаток = 0;
				
			Иначе
				
				СтрокаЗапасы.РезервОтгрузка = СтрокаЗапасы.Количество;
				ВсегоОстаток = ВсегоОстаток - СтрокаЗапасы.Количество;
				ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток * СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если МатериалыКлючСвязи = Неопределено Тогда
		Для каждого СтрокаТабличнойЧасти Из Материалы Цикл
			Если СтрокаТабличнойЧасти.РезервОтгрузка < СтрокаТабличнойЧасти.Резерв Тогда
				СтрокаТабличнойЧасти.Резерв = СтрокаТабличнойЧасти.РезервОтгрузка;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для каждого СтрокаТабличнойЧасти Из РезультатПоиска Цикл
			Если СтрокаТабличнойЧасти.РезервОтгрузка < СтрокаТабличнойЧасти.Резерв Тогда
				СтрокаТабличнойЧасти.Резерв = СтрокаТабличнойЧасти.РезервОтгрузка;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьОбъемИВесЗаказа()
	
	ОтборСтрокТекущегоВарианта = Новый Структура("НомерВариантаКП", ОсновнойВариантКП);
	Строки = Запасы.НайтиСтроки(ОтборСтрокТекущегоВарианта);
	
	Если Строки.Количество() = 0 Тогда
		Вес = 0;
		Объем = 0;
		Возврат;
	КонецЕсли;
	
	ВесИтог = 0;
	ОбъемИтог = 0;
	Для каждого ТекСтрока Из Строки Цикл
		ВесИтог = ВесИтог + ТекСтрока.Вес;
		ОбъемИтог = ОбъемИтог + ТекСтрока.Объем;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ВесИтог) Тогда
		Вес = ВесИтог;
	КонецЕсли;
	Если ЗначениеЗаполнено(ОбъемИтог) Тогда
		Объем = ОбъемИтог;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДоставку(ДанныеЗаполнения)
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СчетНаОплату") Тогда
		ЗаполнитьДоставкуНаОснованииСчета(ДанныеЗаполнения);
	Иначе
		РассчитатьОбъемИВесЗаказа();
	КонецЕсли;
	
	КонтактнаяИнформацияПолучателяЗаполнена = ЗначениеЗаполнено(КонтактныйТелефон)
		ИЛИ ЗначениеЗаполнено(ПочтаПолучателя);
	
	Если НЕ КонтактнаяИнформацияПолучателяЗаполнена Тогда
		ЗаполнитьПолучателяДоставки();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПолучателяДоставки()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПРЕДСТАВЛЕНИЕ(КонтактныеЛица.Ссылка) КАК КонтактноеЛицо,
	|	ВЫБОР
	|		КОГДА СвязиКонтрагентКонтакт.Контрагент.КонтактноеЛицо = КонтактныеЛица.Ссылка
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Порядок,
	|	ЕСТЬNULL(КонтактнаяИнформацияТелефон.НомерТелефона, """""""") КАК КонтактныйТелефон,
	|	ЕСТЬNULL(КонтактнаяИнформацияАдресЭлектроннойПочты.АдресЭП, """""""") КАК ПочтаПолучателя
	|ИЗ
	|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних(, Контрагент = &Владелец) КАК СвязиКонтрагентКонтакт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица КАК КонтактныеЛица
	|		ПО (СвязиКонтрагентКонтакт.Контакт = КонтактныеЛица.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактнаяИнформацияТелефон
	|		ПО (КонтактнаяИнформацияТелефон.Ссылка = КонтактныеЛица.Ссылка)
	|			И (КонтактнаяИнформацияТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактнаяИнформацияАдресЭлектроннойПочты
	|		ПО (КонтактнаяИнформацияАдресЭлектроннойПочты.Ссылка = КонтактныеЛица.Ссылка)
	|			И (КонтактнаяИнформацияАдресЭлектроннойПочты.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|ГДЕ
	|	СвязиКонтрагентКонтакт.СвязьНедействительна = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка, "КонтактноеЛицо, КонтактныйТелефон, ПочтаПолучателя");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДоставкуНаОснованииСчета(ДанныеЗаполнения)
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("ДокументСсылка.СчетНаОплату") Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияПолей = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения,
		"НоменклатураДоставки, СтоимостьДоставки, СтавкаНДСДоставки, СуммаНДСДоставки, Вес, Объем");
	Если НЕ ЗначениеЗаполнено(ЗначенияПолей.НоменклатураДоставки) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗначенияПолей);
	СлужбаДоставки = Справочники.СлужбыДоставки.ДоставкаСобственнымиСилами;
	
	Для каждого СтрокаСпособДоставки Из СлужбаДоставки.ДоступныеСпособыДоставки Цикл
		Если СтрокаСпособДоставки.СпособДоставки=Перечисления.СпособыДоставки.Самовывоз Тогда
			Продолжить;
		КонецЕсли; 
		СпособДоставки = СтрокаСпособДоставки.СпособДоставки;
		Прервать;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДозаполнитьПоУмолчанию()
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		Если Не ЗначениеЗаполнено(ВидЗаказа) Тогда
			
			ВидЗаказа = ЗаполнениеОбъектовУНФ.ПолучитьВидЗаказНаряда();
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СостояниеЗаказа) Тогда
			
			СостояниеЗаказа = ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказНаряда(ВидЗаказа);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктурнаяЕдиницаРезерв) И ПоложениеСклада <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			
			ПодписьКладовщика = СтруктурнаяЕдиницаРезерв.ПодписьМОЛ;
			
		КонецЕсли;
		
	Иначе // Заказ покупателя
		
		Если Не ЗначениеЗаполнено(ВидЗаказа) Тогда
			
			ВидЗаказа = ЗаполнениеОбъектовУНФ.ПолучитьВидЗаказаПокупателя();
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СостояниеЗаказа) Тогда
			
			СостояниеЗаказа = ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказаПокупателя(ВидЗаказа);
			
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку Тогда
			
			ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		УчетПотребностиПоСкладам = ПолучитьФункциональнуюОпцию("УчетПотребностиПоСкладам");
		УчетПотребностиПоЗаказам = Истина;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьМатериалыЗаказчикаПоСпецификации(СтекСпецификацийУзлов, ТаблицаУзлы = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаПродукция.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПродукция.Количество КАК Количество,
	|	ТаблицаПродукция.Коэффициент КАК Коэффициент,
	|	ТаблицаПродукция.Спецификация КАК Спецификация
	|ПОМЕСТИТЬ ВременнаяТаблицаПродукция
	|ИЗ
	|	&ТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.Спецификация <> ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)";
	
	Если ТаблицаУзлы = Неопределено Тогда
		МатериалыЗаказчика.Очистить();
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ЭтоРазделитель", Ложь);
		СтруктураОтбора.Вставить("НомерВариантаКП", ОсновнойВариантКП);
		ТаблицаПродукция = Запасы.Выгрузить(СтруктураОтбора);
		Массив = Новый Массив();
		Массив.Добавить(Тип("Число"));
		ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,Новый КвалификаторыЧисла(10,3));
		ТаблицаПродукция.Колонки.Добавить("Коэффициент", ОписаниеТиповЧ);
		Для каждого СтрокаПродукция Из ТаблицаПродукция Цикл
			Если ЗначениеЗаполнено(СтрокаПродукция.ЕдиницаИзмерения)
				И ТипЗнч(СтрокаПродукция.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
				СтрокаПродукция.Коэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПродукция.ЕдиницаИзмерения, "Коэффициент");
			Иначе
				СтрокаПродукция.Коэффициент = 1;
			КонецЕсли;
		КонецЦикла;
		ТаблицаУзлы = ТаблицаПродукция.СкопироватьКолонки("НомерСтроки,Количество,Коэффициент,Спецификация");
		Запрос.УстановитьПараметр("ТаблицаПродукция", ТаблицаПродукция);
	Иначе
		Запрос.УстановитьПараметр("ТаблицаПродукция", ТаблицаУзлы);
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МИНИМУМ(ТаблицаПродукция.НомерСтроки) КАК НомерСтрокиПродукции,
	|	ТаблицаПродукция.Спецификация КАК СпецификацияПродукции,
	|	МИНИМУМ(ТаблицаМатериалы.НомерСтроки) КАК НомерСтрокиСостава,
	|	ТаблицаМатериалы.ТипСтрокиСостава КАК ТипСтрокиСостава,
	|	ТаблицаМатериалы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ИспользоватьХарактеристики.Значение
	|			ТОГДА ТаблицаМатериалы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	СУММА(ТаблицаМатериалы.Количество / ТаблицаМатериалы.КоличествоПродукции * ТаблицаПродукция.Коэффициент * ТаблицаПродукция.Количество) КАК Количество,
	|	ТаблицаМатериалы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаМатериалы.ТипСтрокиСостава = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокСоставаСпецификации.Узел)
	|				И ТИПЗНАЧЕНИЯ(ТаблицаМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|				И ТаблицаМатериалы.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ТаблицаМатериалы.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА ТаблицаМатериалы.Спецификация = ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(СпецификацииПоУмолчанию.Спецификация, ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка))
	|		ИНАЧЕ ТаблицаМатериалы.Спецификация
	|	КОНЕЦ КАК Спецификация
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Спецификации.Состав КАК ТаблицаМатериалы
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииПоУмолчанию КАК СпецификацииПоУмолчанию
	|			ПО ТаблицаМатериалы.Номенклатура = СпецификацииПоУмолчанию.Номенклатура
	|				И ТаблицаМатериалы.Характеристика = СпецификацииПоУмолчанию.Характеристика
	|		ПО ТаблицаПродукция.Спецификация = ТаблицаМатериалы.Ссылка,
	|	Константа.ФункциональнаяОпцияИспользоватьХарактеристики КАК ИспользоватьХарактеристики
	|ГДЕ
	|	ТаблицаМатериалы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Спецификация,
	|	ТаблицаМатериалы.ТипСтрокиСостава,
	|	ТаблицаМатериалы.Номенклатура,
	|	ТаблицаМатериалы.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаМатериалы.ТипСтрокиСостава = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокСоставаСпецификации.Узел)
	|				И ТИПЗНАЧЕНИЯ(ТаблицаМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|				И ТаблицаМатериалы.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ТаблицаМатериалы.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаМатериалы.Спецификация = ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(СпецификацииПоУмолчанию.Спецификация, ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка))
	|		ИНАЧЕ ТаблицаМатериалы.Спецификация
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИспользоватьХарактеристики.Значение
	|			ТОГДА ТаблицаМатериалы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиПродукции,
	|	НомерСтрокиСостава";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ТипСтрокиСостава = Перечисления.ТипыСтрокСоставаСпецификации.Узел Тогда
			ТаблицаУзлы.Очистить();
			Если НЕ СтекСпецификацийУзлов.Найти(Выборка.Спецификация) = Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'При попытке заполнить табличную часть ""Материалы заказчика"" по спецификации,
				|обнаружено рекурсивное вхождение элемента'")+" "+Выборка.Номенклатура+" "+НСтр("ru = 'в спецификации'")+" "+Выборка.СпецификацияПродукции+"
				|Операция не выполнена!";
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			СтекСпецификацийУзлов.Добавить(Выборка.Спецификация);
			НоваяСтрока = ТаблицаУзлы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			ЗаполнитьМатериалыЗаказчикаПоСпецификации(СтекСпецификацийУзлов, ТаблицаУзлы);
		Иначе
			НоваяСтрока = МатериалыЗаказчика.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЕсли;
	КонецЦикла;
	
	СтекСпецификацийУзлов.Очистить();
	МатериалыЗаказчика.Свернуть("Номенклатура, Характеристика, ЕдиницаИзмерения", "Количество");
	
КонецПроцедуры

Процедура ЗаполнитьДанныеЗапасовПоДаннымФормы(ДанныеСобытия, Операция, ДанныеЗаполнения = Неопределено)
	
	Если СтрНайти(ДанныеСобытия.Тема,"Заполнена форма") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИндексИдентификатораФормы = СтрНайти(ДанныеСобытия.Содержание,"formId:");
	
	Если ИндексИдентификатораФормы = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторФормы = СокрЛП(Сред(ДанныеСобытия.Содержание,ИндексИдентификатораФормы + 7, СтрНайти(ДанныеСобытия.Содержание,";") - (ИндексИдентификатораФормы + 7)));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактныеФормыGoogleПоляКонструктора.Ссылка КАК Ссылка,
	|	КонтактныеФормыGoogleПоляКонструктора.Заголовок КАК Заголовок,
	|	КонтактныеФормыGoogleПоляКонструктора.КаталогТоваров КАК КаталогТоваров,
	|	КонтактныеФормыGoogleПоляКонструктора.ВидЦен КАК ВидЦен
	|ИЗ
	|	Справочник.КонтактныеФормыGoogle.ПоляКонструктора КАК КонтактныеФормыGoogleПоляКонструктора
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеФормыGoogle КАК КонтактныеФормыGoogle
	|		ПО КонтактныеФормыGoogleПоляКонструктора.Ссылка = КонтактныеФормыGoogle.Ссылка
	|ГДЕ
	|	КонтактныеФормыGoogleПоляКонструктора.ЭтоТовар
	|	И КонтактныеФормыGoogle.ИдентификаторФормы ПОДОБНО &Идентификатор
	|	И НЕ КонтактныеФормыGoogle.ПометкаУдаления";

	Запрос.УстановитьПараметр("Идентификатор", ИдентификаторФормы);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ИндексОтвета = СтрНайти(ДанныеСобытия.Содержание, Выборка.Заголовок);
		Если ИндексОтвета = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НачалоОтвета = ИндексОтвета + СтрДлина(Выборка.Заголовок) + 1;
		ДлинаОтвета  = СтрНайти(ДанныеСобытия.Содержание,";;",,НачалоОтвета) - НачалоОтвета;
		Ответ = Сред(ДанныеСобытия.Содержание, НачалоОтвета, ДлинаОтвета);
		Ответ = СтрЗаменить(Ответ,Символы.ВК,"");
		Ответ = СтрЗаменить(Ответ," ","");
		Ответ = СокрЛП(СтрЗаменить(Ответ,Символы.ПС,""));
		
		ВариантыОтветов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ответ,";,");
		ТЗТовары = Выборка.КаталогТоваров.Получить();
		ВидЦен = Выборка.ВидЦен;
		МассивЗапасов = Новый Массив;
		Для Каждого Вариант Из ВариантыОтветов Цикл
			Вариант = СтрЗаменить(Вариант,Символы.ВК," ");
			Для Каждого Товар Из ТЗТовары Цикл
				
				Если Товар.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа 
					И Операция = "ЗаказПокупателя" Тогда
					Продолжить;
				КонецЕсли;
				
				МассивСтрок = Новый Массив;
				Если ЗначениеЗаполнено(Товар.Артикул) Тогда
					МассивСтрок.Добавить(Строка(Товар.Артикул));
				КонецЕсли;
				Если ЗначениеЗаполнено(Товар.Наименование)Тогда
					МассивСтрок.Добавить(Строка(Товар.Наименование));
				КонецЕсли;
				
				Если СтрНайти(Вариант,СокрЛП(СтрЗаменить(СтрСоединить(МассивСтрок,", ")," ","")))=0 Тогда
					Продолжить;
				КонецЕсли;
								
				Если Операция = "ЗаказПокупателя" Тогда 
					НовыйТовар = Запасы.Добавить();
					НовыйТовар.Номенклатура = Товар.Номенклатура;
					НовыйТовар.Количество = 1;
					НоменклатураВДокументахСервер.ЗаполнитьДанныеВСтрокеТабличнойЧасти(ЭтотОбъект,"Запасы",НовыйТовар);
					Продолжить;
				КонецЕсли;
					
				Если Операция = "ЗаказНаряд" 
					И Товар.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас И ДанныеЗаполнения <> Неопределено Тогда
						СтруктураТоваров = Новый Структура;
						СтруктураТоваров.Вставить("Номенклатура", Товар.Номенклатура);
						НовыйТовар = Запасы.Добавить();
						НовыйТовар.Номенклатура = Товар.Номенклатура;
						НовыйТовар.Количество = 1;
						НоменклатураВДокументахСервер.ЗаполнитьДанныеВСтрокеТабличнойЧасти(ЭтотОбъект,"Запасы",НовыйТовар);
						МассивЗапасов.Добавить(СтруктураТоваров);
					Продолжить;
				КонецЕсли;
				Если ДанныеЗаполнения <> Неопределено Тогда
					НовыйТовар = Работы.Добавить();
					НовыйТовар.Номенклатура = Товар.Номенклатура;
					НовыйТовар.Количество = 1;
					НоменклатураВДокументахСервер.ЗаполнитьДанныеВСтрокеТабличнойЧасти(ЭтотОбъект,"Работы",НовыйТовар);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если МассивЗапасов.Количество() > 0 Тогда
		ДанныеЗаполнения.Вставить("Запасы", МассивЗапасов);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет авансы.
//
Процедура ЗаполнитьПредоплату() Экспорт
	
	Предоплата.Очистить();
	
	ТаблицаЗаказов = ТаблицаЗаказовДляЗаполненияПредоплаты();
	
	Запрос = НовыйЗапросРасшифровкиПредоплаты(ТаблицаЗаказов);
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		
		НайденнаяСтрока = ТаблицаЗаказов.Найти(ВыборкаРезультатаЗапроса.Заказ, "Заказ");
		
		Если НайденнаяСтрока.ВсегоРасч = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаРезультатаЗапроса.СуммаРасчетов <= НайденнаяСтрока.ВсегоРасч Тогда // сумма остатка меньше или равна чем осталось распределить
			
			НоваяСтрока = Предоплата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
			НайденнаяСтрока.ВсегоРасч = НайденнаяСтрока.ВсегоРасч - ВыборкаРезультатаЗапроса.СуммаРасчетов;
			
		Иначе // сумма остатка больше чем нужно распределить
			
			НоваяСтрока = Предоплата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
			НоваяСтрока.СуммаРасчетов = НайденнаяСтрока.ВсегоРасч;
			НоваяСтрока.СуммаПлатежа = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
				НоваяСтрока.СуммаРасчетов,
				ВыборкаРезультатаЗапроса.Курс,
				ВыборкаРезультатаЗапроса.КурсыВалютыДокументаКурс,
				ВыборкаРезультатаЗапроса.Кратность,
				ВыборкаРезультатаЗапроса.КурсыВалютыДокументаКратность);
			НайденнаяСтрока.ВсегоРасч = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйЗапросРасшифровкиПредоплаты(Знач ТаблицаЗаказов)
	
	Результат = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) КАК СуммаВалОстаток,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаРегОстаток) КАК СуммаРегОстаток
	|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыСПокупателямиОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПокупателямиОстатки.Договор КАК Договор,
	|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|		РасчетыСПокупателямиОстатки.Документ.Дата КАК ДокументДата,
	|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРегОстаток, 0) КАК СуммаРегОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями.Остатки(
	|				&Период,
	|				Организация = &Организация
	|					И Контрагент = &Контрагент
	|					И Договор = &Договор
	|					И Заказ В (&Заказ)
	|					И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПокупателямиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаРасчетыСПокупателями.Договор,
	|		ДвиженияДокументаРасчетыСПокупателями.Документ,
	|		ДвиженияДокументаРасчетыСПокупателями.Документ.Дата,
	|		ДвиженияДокументаРасчетыСПокупателями.Заказ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаРег, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаРег, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями КАК ДвиженияДокументаРасчетыСПокупателями
	|	ГДЕ
	|		ДвиженияДокументаРасчетыСПокупателями.Регистратор = &Ссылка
	|		И ДвиженияДокументаРасчетыСПокупателями.Период <= &Период
	|		И ДвиженияДокументаРасчетыСПокупателями.Организация = &Организация
	|		И ДвиженияДокументаРасчетыСПокупателями.Контрагент = &Контрагент
	|		И ДвиженияДокументаРасчетыСПокупателями.Договор = &Договор
	|		И ДвиженияДокументаРасчетыСПокупателями.Заказ В(&Заказ)
	|		И ДвиженияДокументаРасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПокупателямиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОстатки.Документ,
	|	РасчетыСПокупателямиОстатки.Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата,
	|	РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов
	|
	|ИМЕЮЩИЕ
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПокупателямиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаУчета) КАК СуммаУчета,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаРасчетов) КАК СуммаРасчетов,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаПлатежа) КАК СуммаПлатежа,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРег, 0) = 0
	|				ТОГДА РасчетыСПокупателямиОстатки.СуммаУчета / ВЫБОР
	|						КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРасчетов, 0) <> 0
	|							ТОГДА РасчетыСПокупателямиОстатки.СуммаРасчетов
	|						ИНАЧЕ 1
	|					КОНЕЦ * (РасчетыСПокупателямиОстатки.КурсыВалютыУчетаКурс / РасчетыСПокупателямиОстатки.КурсыВалютыУчетаКратность)
	|			ИНАЧЕ РасчетыСПокупателямиОстатки.СуммаРег / ВЫБОР
	|					КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРасчетов, 0) <> 0
	|						ТОГДА РасчетыСПокупателямиОстатки.СуммаРасчетов
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ) КАК Курс,
	|	1 КАК Кратность,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКурс КАК КурсыВалютыДокументаКурс,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКратность КАК КурсыВалютыДокументаКратность
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПокупателямиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|		РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаУчета,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаРасчетов,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) * КурсыВалютыУчета.Курс * &КратностьВалютыДокумента / (&КурсВалютыДокумента * КурсыВалютыУчета.Кратность) КАК СуммаПлатежа,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРегОстаток, 0) КАК СуммаРег,
	|		КурсыВалютыУчета.Курс КАК КурсыВалютыУчетаКурс,
	|		КурсыВалютыУчета.Кратность КАК КурсыВалютыУчетаКратность,
	|		&КурсВалютыДокумента КАК КурсыВалютыДокументаКурс,
	|		&КратностьВалютыДокумента КАК КурсыВалютыДокументаКратность
	|	ИЗ
	|		ВременнаяТаблицаРасчетыСПокупателямиОстатки КАК РасчетыСПокупателямиОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаУчета) КАК КурсыВалютыУчета
	|			ПО (ИСТИНА)) КАК РасчетыСПокупателямиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОстатки.Документ,
	|	РасчетыСПокупателямиОстатки.Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата,
	|	РасчетыСПокупателямиОстатки.ВалютаРасчетов,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыУчетаКурс,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыУчетаКратность,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКурс,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКратность
	|
	|ИМЕЮЩИЕ
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаРасчетов) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата");
	
	Результат.УстановитьПараметр("Заказ", ТаблицаЗаказов.ВыгрузитьКолонку("Заказ"));
	Результат.УстановитьПараметр("Организация", Константы.УчетПоКомпании.Компания(Организация));
	Результат.УстановитьПараметр("Контрагент", Контрагент);
	Результат.УстановитьПараметр("Договор", Договор);
	Результат.УстановитьПараметр("Период", Дата);
	Результат.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	Результат.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Если Договор.ВалютаРасчетов = ВалютаДокумента Тогда
		Результат.УстановитьПараметр("КурсВалютыДокумента", Курс);
		Результат.УстановитьПараметр("КратностьВалютыДокумента", Кратность);
	Иначе
		Результат.УстановитьПараметр("КурсВалютыДокумента", 1);
		Результат.УстановитьПараметр("КратностьВалютыДокумента", 1);
	КонецЕсли;
	Результат.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицаЗаказовДляЗаполненияПредоплаты()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Заказ");
	Результат.Колонки.Добавить("Всего");
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Заказ = Ссылка;
	НоваяСтрока.Всего = СуммаДокумента;
	
	Результат.Колонки.Добавить("ВсегоРасч");
	Для каждого ТекСтрока Из Результат Цикл
		Если НЕ Контрагент.ВестиРасчетыПоЗаказам Тогда
			ТекСтрока.Заказ = Документы.ЗаказПокупателя.ПустаяСсылка();
		КонецЕсли;
		ТекСтрока.ВсегоРасч = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
		ТекСтрока.Всего,
		?(Договор.ВалютаРасчетов = ВалютаДокумента, Курс, 1),
		Курс,
		?(Договор.ВалютаРасчетов = ВалютаДокумента, Кратность, 1),
		Кратность);
	КонецЦикла;
	Результат.Свернуть("Заказ", "Всего, ВсегоРасч");
	Результат.Сортировать("Заказ Возр");
	
	Возврат Результат;
	
КонецФункции // ЗаполнитьПредоплату()

// Процедура заполняет реквизиты печати
Процедура ЗаполнитьРеквизитыПечати()
	
	Автомобиль = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОсновнойАвтомобиль", Организация);
	Водитель = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОсновнойВодитель", Организация);
	Перевозчик = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОсновнойПеревозчик", Организация);
	
	Если НЕ ЗначениеЗаполнено(УсловияСчетаЗаказа) Тогда
		УсловияСчетаЗаказа = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("УсловияСчетаЗаказа", 
			Организация);
		Если НЕ ЗначениеЗаполнено(УсловияСчетаЗаказа) Тогда
			НастройкаУсловий = ПланыВидовХарактеристик.НастройкиПользователей.УсловияСчетаЗаказа;
			УсловияСчетаЗаказа = Справочники.ДополнительныеУсловия.ПолучитьТиповыеУсловия(НастройкаУсловий,
				Организация);
		КонецЕсли;				
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(УсловияГарантийногоТалона) Тогда
		УсловияГарантийногоТалона = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("УсловияГарантии", 
			Организация);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(УсловияКоммерческогоПредложения) Тогда
		УсловияКоммерческогоПредложения =
			УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("УсловияКоммерческогоПредложения", Организация);
	КонецЕсли;	

	Если НЕ ЗначениеЗаполнено(УсловияЗаказаПокупателя) Тогда
		УсловияЗаказаПокупателя = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("УсловияЗаказаПокупателя",
			Организация);
	КонецЕсли;	
	
	НастройкаКладовщик = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ПодписьМОЛ", Организация);
	Если ЗначениеЗаполнено(НастройкаКладовщик) Тогда
		ПодписьКладовщика = НастройкаКладовщик;
	КонецЕсли;
		
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РежимЗаписиЗаказНарядаПриСменеСостояния()
	
	Если НЕ Проведен Тогда
		Возврат РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
	ПредыдущееСостояниеЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "СостояниеЗаказа");
	
	ПредыдущееСостояниеВыполнения = СостоянияЗаказов.ЭтоСостояниеВыполненияЗаказНаряда(СостояниеЗаказа, ВидЗаказа);
	НовоеСостояниеВыполнения = СостоянияЗаказов.ЭтоСостояниеВыполненияЗаказНаряда(ПредыдущееСостояниеЗаказа, ВидЗаказа);
	
	Если ПредыдущееСостояниеВыполнения = НовоеСостояниеВыполнения Тогда
		Возврат РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
	Возврат РежимЗаписиДокумента.Проведение;

КонецФункции

Процедура ПривестиДанныеКСогласованномуСостоянию()
	
	Если СостояниеЗаказа <> Справочники.СостоянияЗаказовПокупателей.Завершен 
		И СостояниеЗаказа <> Справочники.СостоянияЗаказНарядов.Завершен Тогда
		
		ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.ПустаяСсылка();
	КонецЕсли;
	
	Если ВариантЗавершения <> Перечисления.ВариантыЗавершенияЗаказа.Отменен Тогда
		ПричинаОтмены	= Справочники.ПричиныОтменыЗаказа.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьСуммуДокумента()
	
	СуммаДокумента = 0;
	
	Если ОжидаетсяВыборВариантаКП Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Стр Из Запасы Цикл
		Если Стр.ЭтоРазделитель ИЛИ Стр.НомерВариантаКП <> ОсновнойВариантКП Тогда
			Продолжить;
		КонецЕсли;
		СуммаДокумента = СуммаДокумента + Стр.Всего;
	КонецЦикла;
	
	СуммаДокумента = СуммаДокумента + Работы.Итог("Всего") + СтоимостьДоставки + ?(СуммаВключаетНДС, 0, СуммаНДСДоставки);
	
КонецПроцедуры

Процедура ВыполнитьПроверкуОграниченийСертификатов(Отказ)
	
	// Проверка срока действия
	РаботаСПодарочнымиСертификатами.ПроверитьСрокДействия(ЭтотОбъект, "Запасы", Отказ);
	РаботаСПодарочнымиСертификатами.ПроверитьСрокДействия(ЭтотОбъект, "Предоплата", Отказ);
	
	// Проверка области действия
	СтруктураДляПроверки = Новый Структура;
	ТаблицаТоварыУслуги = Запасы.Выгрузить(,"Номенклатура, Характеристика, Сумма");
	Для Каждого СтрокаТаблицы Из Работы Цикл
		НоваяСтрока = ТаблицаТоварыУслуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	СтруктураДляПроверки.Вставить("Запасы", ТаблицаТоварыУслуги);
	Сертификаты = Предоплата.Выгрузить(
	Новый Структура("ОплатаСертификатом", Истина),
	"Документ, СуммаРасчетов");
	Сертификаты.Колонки.Документ.Имя = "ПодарочныйСертификат";
	Сертификаты.Колонки.СуммаРасчетов.Имя = "Сумма";
	СтруктураДляПроверки.Вставить("Сертификаты", Сертификаты);
	РаботаСПодарочнымиСертификатами.ПроверитьОбластьДействияСертификатов(СтруктураДляПроверки, Отказ);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеЭтаповПроизводства(Отказ, ОтменаПроведения = Ложь)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЭтапыПроизводства") Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование таблицы продукции, использующей этапы производства
	Если ОтменаПроведения ИЛИ ОжидаетсяВыборВариантаКП Тогда
		ТаблицаПродукции = Запасы.ВыгрузитьКолонки();
	Иначе
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("НомерВариантаКП", ОсновнойВариантКП);
		ТаблицаПродукции = Запасы.Выгрузить(СтруктураОтбора);
	КонецЕсли; 
	ТаблицаПродукции.Колонки.Добавить("ИмяТЧ", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ТаблицаПродукции.ЗаполнитьЗначения("Запасы", "ИмяТЧ");
	Для каждого СтрокаТабличнойЧасти Из Материалы Цикл
		Если ОтменаПроведения Тогда
			Прервать;
		КонецЕсли; 
		НоваяСтрока = ТаблицаПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		НоваяСтрока.ИмяТЧ = "Материалы";
	КонецЦикла;
	ПроизводствоСервер.ДобавитьУдаленнуюПродукцию(Ссылка, ТаблицаПродукции, "Запасы");
	ПроизводствоСервер.ДобавитьУдаленнуюПродукцию(Ссылка, ТаблицаПродукции, "Материалы");
	ТаблицаПродукции.Колонки.Добавить("ЗаказНаПроизводство", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство"));
	ТаблицаПродукции.Колонки.Добавить("ЗаказПокупателя", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	ТаблицаПродукции.ЗаполнитьЗначения(Ссылка, "ЗаказПокупателя");
	ТаблицаПродукции.Колонки.Добавить("ПодразделениеЗавершающегоЭтапа", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	МассивСпецификаций = Новый Массив;
	Для каждого СтрокаТабличнойЧасти Из ТаблицаПродукции Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) Тогда
			Продолжить;
		КонецЕсли; 
		Если МассивСпецификаций.Найти(СтрокаТабличнойЧасти.Спецификация)=Неопределено Тогда
			МассивСпецификаций.Добавить(СтрокаТабличнойЧасти.Спецификация);
		КонецЕсли; 
	КонецЦикла; 
	МассивСпецификаций = ПроизводствоСервер.СпецификацииСПоэтапнымПроизводством(МассивСпецификаций);
	ПроверяемаяПродукция = ТаблицаПродукции.СкопироватьКолонки();
	Для каждого СтрокаПродукция Из ТаблицаПродукции Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаПродукция.Спецификация) ИЛИ МассивСпецификаций.Найти(СтрокаПродукция.Спецификация)=Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Если СтрокаПродукция.Резерв>=СтрокаПродукция.Количество Тогда
			Продолжить;
		КонецЕсли;
		СтрокаПродукция.Количество = СтрокаПродукция.Количество-СтрокаПродукция.Резерв;
		ЗаполнитьЗначенияСвойств(ПроверяемаяПродукция.Добавить(), СтрокаПродукция);
	КонецЦикла;
	
	// Запрет дублирования продукции
	ТаблицаКонтроляДублей = ПроверяемаяПродукция.Скопировать();
	ТаблицаКонтроляДублей.Колонки.Добавить("КоличествоСтрок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0)));
	ТаблицаКонтроляДублей.ЗаполнитьЗначения(1, "КоличествоСтрок");
	ТаблицаКонтроляДублей.Свернуть("ЗаказПокупателя, ЗаказНаПроизводство, Номенклатура, Характеристика, Партия", "КоличествоСтрок");
	Для Каждого СтрокаПродукция Из ТаблицаКонтроляДублей Цикл
		Если СтрокаПродукция.КоличествоСтрок > 1 Тогда
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ЗаказПокупателя");
			СтруктураОтбора.Вставить("ЗаказНаПроизводство");
			СтруктураОтбора.Вставить("Номенклатура");
			СтруктураОтбора.Вставить("Характеристика");
			СтруктураОтбора.Вставить("Партия");
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаПродукция);
			СтрокиТЧ = ТаблицаПродукции.НайтиСтроки(СтруктураОтбора);
			Для Каждого НайденнаяСтрока Из СтрокиТЧ Цикл
				ТекстСообщения = СтрШаблон(НСтр(
					"ru = 'Дублирующаяся продукция, использующая этапы производства, в строке %1'"),
					НайденнаяСтрока.НомерСтроки);
				КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы",
					НайденнаяСтрока.НомерСтроки, "Номенклатура");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла; 
	
	// Проверка уникальности завершающего подразделения и количества продукции
	ПроизводствоСервер.ПроверкаПоэтапногоПроизводства(ЭтотОбъект, ПроверяемаяПродукция, Отказ);
	
КонецПроцедуры

Процедура ЗаполнитьСтруктурнуюЕдиницуРезерваВТЧ()
	
	Если ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
		СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) 
			ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Номенклатура)<>Тип("СправочникСсылка.Номенклатура") Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ СтрокаТабличнойЧасти.ТипНоменклатурыЗапас Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = СтруктурнаяЕдиницаРезерв;
		СтрокаТабличнойЧасти.Ячейка = Ячейка;
	КонецЦикла;
	Для каждого СтрокаТабличнойЧасти Из Материалы Цикл
		СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = СтруктурнаяЕдиницаРезерв;
		СтрокаТабличнойЧасти.Ячейка = Ячейка;
	КонецЦикла;
	
КонецПроцедуры

Функция СтруктурнаяЕдиницаИЯчейкаДляШапки(ТабличнаяЧасть)
	
	Результат = Новый Структура;
	Результат.Вставить("СтруктурнаяЕдиницаРезерв", Неопределено);
	Результат.Вставить("Ячейка", Неопределено);
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.СтруктурнаяЕдиницаРезерв = ТабличнаяЧасть[0].СтруктурнаяЕдиницаРезерв;
	Результат.Ячейка = ТабличнаяЧасть[0].Ячейка;
	
	Если ТабличнаяЧасть.Количество() = 1 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТаблицаСтруктурныеЕдиницыИЯчейки = ТабличнаяЧасть.Выгрузить(, "СтруктурнаяЕдиницаРезерв, Ячейка");
	ТаблицаСтруктурныеЕдиницыИЯчейки.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	Для Каждого ТекСтрока Из ТаблицаСтруктурныеЕдиницыИЯчейки Цикл
		ТекСтрока.Количество = 1;
	КонецЦикла;
	ТаблицаСтруктурныеЕдиницыИЯчейки.Свернуть("СтруктурнаяЕдиницаРезерв, Ячейка", "Количество");
	
	Если ТаблицаСтруктурныеЕдиницыИЯчейки.Количество() < 2 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТаблицаСтруктурныеЕдиницыИЯчейки.Сортировать("Количество Убыв");
	
	Если ТаблицаСтруктурныеЕдиницыИЯчейки[0].Количество = ТаблицаСтруктурныеЕдиницыИЯчейки[1].Количество Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.СтруктурнаяЕдиницаРезерв = ТаблицаСтруктурныеЕдиницыИЯчейки[0].СтруктурнаяЕдиницаРезерв;
	Результат.Ячейка = ТаблицаСтруктурныеЕдиницыИЯчейки[0].Ячейка;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьЗаполнениеНоменклатурыПоДоговоруОбслуживания(Отказ)
	
	Если Не ЭтоЗаказНаряд() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБиллинг") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваДоговора = Справочники.ДоговорыКонтрагентов.СвойстваДоговораОбслуживания(Договор);
	
	Если Не СвойстваДоговора.ЭтоДоговорОбслуживания Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаРаботы Из Работы Цикл
		РазрешенаПродажаПозиции = Справочники.ДоговорыКонтрагентов.РазрешенаПродажаНоменклатурыПоДоговоруОбслуживания(
			Договор, СтрокаРаботы.Номенклатура, СтрокаРаботы.Характеристика);
		Если РазрешенаПродажаПозиции Тогда
			Продолжить;
		КонецЕсли;
		ТекстСообщения = НСтр("ru = 'Запрещено проводить незапланированные работы/услуги по текущему договору обслуживания.'");
		ПутьКДанным = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Работы", СтрокаРаботы.НомерСтроки, "Номенклатура");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СвойстваДоговора.ДоговорОбслуживанияТарифныйПлан,
			ПутьКДанным, , Отказ);
	КонецЦикла;
	
	Для Каждого СтрокаЗапасы Из Запасы Цикл
		РазрешенаПродажаПозиции = Справочники.ДоговорыКонтрагентов.РазрешенаПродажаНоменклатурыПоДоговоруОбслуживания(
			Договор, СтрокаЗапасы.Номенклатура, СтрокаЗапасы.Характеристика);
		Если РазрешенаПродажаПозиции Тогда
			Продолжить;
		КонецЕсли;
		ТекстСообщения = НСтр("ru = 'Запрещено проводить незапланированные товары по текущему договору обслуживания.'");
		ПутьКДанным = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", СтрокаЗапасы.НомерСтроки, "Номенклатура");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СвойстваДоговора.ДоговорОбслуживанияТарифныйПлан,
			ПутьКДанным, , Отказ);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли