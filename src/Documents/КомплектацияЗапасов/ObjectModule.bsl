#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	СтратегияЗаполнения = "";
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда 
		СтратегияЗаполнения = "ЗаполнитьПоСтруктуре";
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = ТИП("ДокументСсылка.ЗаказПокупателя") Тогда
		СтратегияЗаполнения = "ЗаполнитьПоЗаказуПокупателя";
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = ТИП("ДокументСсылка.ПриходныйОрдер") Тогда
		СтратегияЗаполнения = "ЗаполнитьПоПриходномуОрдеру";
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = ТИП("ДокументСсылка.РасходныйОрдер") Тогда
		СтратегияЗаполнения = "ЗаполнитьПоРасходномуОрдеру";
	КонецЕсли;
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения,СтратегияЗаполнения);
	ЗаполнениеОтветственныхЛиц();
	
	// Прослеживаемость
	СведенияПрослеживаемости.Очистить();
	// Конец Прослеживаемость
	
	// Прослеживаемость
	ПрослеживаемостьУНФ.ОбновитьПризнакПрослеживаемости(Запасы, Дата);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события ПередЗаписью.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроизводствоСервер.ЗаполнитьКлючиСвязи(Запасы);
	
	
	Если ВидОперации = Перечисления.ВидыОперацийКомплектацияЗапасов.Сборка Тогда
		
		// Прослеживаемость
		ТребуетсяПодобратьРНПТ = ПрослеживаемостьУНФ.ТребуетсяПодобратьРНПТ(Запасы, Дата, Истина);
		Если ТребуетсяПодобратьРНПТ Тогда
			Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				ПрослеживаемостьУНФ.ПодобратьРНПТОстатки(ЭтотОбъект, Отказ);
			КонецЕсли; 
		Иначе
			СведенияПрослеживаемости.Очистить();
		КонецЕсли;
		
		Для Каждого СтрокаТабличнойЧасти Из Запасы Цикл
			Если СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
				СтрокаТабличнойЧасти.НомерГТД = Ложь;
			КонецЕсли;
		КонецЦикла;
		// Конец Прослеживаемость
		
	КонецЕсли;
	
	Если ПрослеживаемыйКомплект И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Для Каждого СтрокаТабличнойЧасти Из Запасы Цикл
			Если СтрокаТабличнойЧасти.Номенклатура.ПрослеживаемыйКомплект Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Номенклатура в строке %1 не может быть прослеживаемым комплектом'"), СтрокаТабличнойЧасти.НомерСтроки);
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", СтрокаТабличнойЧасти.НомерСтроки,
				"ЗапасыНоменклатура");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриКопировании(ОбъектКопирования)
	// Прослеживаемость
	СведенияПрослеживаемости.Очистить();
	ПрослеживаемостьУНФ.ОбновитьПризнакПрослеживаемости(Запасы, Дата);
	// Конец Прослеживаемость
	
	Если ПрослеживаемыйКомплект Тогда
		Для Каждого СтрокаТабличнойЧасти Из Запасы Цикл
			СтрокаТабличнойЧасти.ПрослеживаемыйКомплект = Ложь;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		ЗначенияРеквизитовНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура,
			"ИспользоватьПартии, ПроверятьЗаполнениеПартий, ИспользоватьХарактеристики, ПроверятьЗаполнениеХарактеристики, ИспользоватьСерииНоменклатуры", Истина);
		
		// Серии номенклатуры
		Если СерииНоменклатурыУНФ.ИспользоватьСерииНоменклатурыОстатки() = Истина Тогда
			ОрдерныйСклад = ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныйСклад") 
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиница, "ОрдерныйСклад", Истина);
			Если ЗначенияРеквизитовНоменклатуры.ИспользоватьСерииНоменклатуры И НЕ ОрдерныйСклад Тогда
				Если ТипЗнч(ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
					Коэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕдиницаИзмерения, "Коэффициент");
				Иначе
					Коэффициент = 1;
				КонецЕсли;
				ПродукцияКоличество = Количество * Коэффициент;
				
				КонтрольКоличестваСерий = СерииНоменклатурыУНФ.КонтролироватьЗаполнениеСерии(Номенклатура, Организация, СтруктурнаяЕдиница);
				
				Если КонтрольКоличестваСерий Тогда
					Если Не СерииНоменклатуры.Итог("Количество") = ПродукцияКоличество Тогда
						ТекстОшибки = НСтр("ru = 'Число серий номенклатуры не равно количеству.'");
						ПолеОшибки = "Объект.Количество";
						ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , ПолеОшибки, , Отказ);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли; 
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Объект", ЭтотОбъект);
		ДополнительныеПараметры.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
		СерииНоменклатурыУНФ.ПроверитьЗаполнениеСерийНоменклатуры(Отказ, Запасы, СерииНоменклатурыЗапасы, 
			ДополнительныеПараметры);
		
		// Характеристики и партии
		ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
		ИспользоватьПартии = ПолучитьФункциональнуюОпцию("ИспользоватьПартии");
		Если ИспользоватьХарактеристики И ЗначенияРеквизитовНоменклатуры.ИспользоватьХарактеристики 
			И ЗначенияРеквизитовНоменклатуры.ПроверятьЗаполнениеХарактеристики Тогда
			ПроверяемыеРеквизиты.Добавить("Характеристика");
		КонецЕсли; 
		Если ИспользоватьПартии И ЗначенияРеквизитовНоменклатуры.ИспользоватьПартии 
			И ЗначенияРеквизитовНоменклатуры.ПроверятьЗаполнениеПартий Тогда
			ПроверяемыеРеквизиты.Добавить("Партия");
		КонецЕсли;
		НоменклатураВДокументахСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, Отказ, Истина);
		
		// ГТД
		УчетГТД = ПолучитьФункциональнуюОпцию("УчетГТД");
		СтранаПроисхожденияТребуетНомерГТД = ЗначениеЗаполнено(СтранаПроисхождения)
			И СтранаПроисхождения <> Справочники.СтраныМира.Россия;
		Если УчетГТД И Константы.ТребоватьЗаполнениеГТДИмпортногоТовара.Получить() И СтранаПроисхожденияТребуетНомерГТД
			И ВидОперации = Перечисления.ВидыОперацийКомплектацияЗапасов.Разборка И НЕ ПрослеживаемыйКомплект Тогда
			ПроверяемыеРеквизиты.Добавить("НомерГТД");
		КонецЕсли;
		Если НЕ СтранаПроисхожденияТребуетНомерГТД И ЗначениеЗаполнено(НомерГТД) Тогда
			ТекстОшибки = НСтр("ru = 'Не верно указана страна происхождения'");
			ПолеОшибки = "Объект.СтранаПроисхождения";
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , ПолеОшибки, , Отказ);
		КонецЕсли; 
		ГрузовыеТаможенныеДекларацииСервер.ПриОбработкеПроверкиЗаполнения(Отказ, ЭтотОбъект);
		
		ПроверитьТЧНаСовпадениеНоменклатуры(Отказ);
		
		// Прослеживаемые комплекты
		ПрослеживаемыйТоварВТабличнойЧасти = Не Запасы.Найти(Истина, "ПрослеживаемыйТовар") = Неопределено;
		
		Если ПрослеживаемыйКомплект И Не ПрослеживаемыйТоварВТабличнойЧасти Тогда
			ТекстОшибки = НСтр("ru = 'Для прослеживаемого комплекта в табличной части должна присутствовать прослеживаемая номенклатура.'");
			ПолеОшибки = "Объект.Номенклатура";
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , ПолеОшибки, , Отказ);
		КонецЕсли;
		
		Если Не ПрослеживаемыйКомплект И ПрослеживаемыйТоварВТабличнойЧасти Тогда
			ТекстОшибки = НСтр("ru = 'В табличной части присутствует прослеживаемая номенклатура. Необходимо выбрать прослеживаемый комплект .'");
			ПолеОшибки = "Объект.Номенклатура";
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , ПолеОшибки, , Отказ);
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийКомплектацияЗапасов.Разборка Тогда
			
			СтруктураПоиска = Новый Структура("ИдентификаторСтроки");
			Для Каждого СтрокаЗапасы Из Запасы Цикл
				Если СтрокаЗапасы.ПрослеживаемыйТовар Тогда
					СтруктураПоиска.ИдентификаторСтроки = СтрокаЗапасы.ИдентификаторСтроки;
					НайденныеСтроки = СведенияПрослеживаемости.НайтиСтроки(СтруктураПоиска);
					
					Если Не НайденныеСтроки.Количество() Тогда
						ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", , НСтр(
						"ru = 'Номер РНПТ'"), СтрокаЗапасы.НомерСтроки, "Запасы");
						
						Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", СтрокаЗапасы.НомерСтроки,
						"ЗапасыНомерГТДПриРНПТ");
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныйСклад") Тогда
		
		УчетОстатковПоСкладскимОрдерам = СкладскойУчетСервер.УчетОстатковВРазрезеСкладскихОрдеров(СтруктурнаяЕдиница, Ложь);
		Если УчетОстатковПоСкладскимОрдерам Тогда  
			ПроверяемыеРеквизиты.Добавить("ДокументОтгрузки");
		КонецЕсли;
		
		УчетОстатковПоСкладскимОрдерам = СкладскойУчетСервер.УчетОстатковВРазрезеСкладскихОрдеров(СтруктурнаяЕдиница);
		Если УчетОстатковПоСкладскимОрдерам Тогда  
			ПроверяемыеРеквизиты.Добавить("ДокументПоступления");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	ДополнительныеСвойства.Вставить("Отказ", Отказ);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныйСклад") Тогда
		
		МассивСтруктурныхЕдиниц = Новый Массив;
		МассивСтруктурныхЕдиниц.Добавить(СтруктурнаяЕдиница);
		
		МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам = СкладскойУчетСервер.МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам(МассивСтруктурныхЕдиниц);
		МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам = СкладскойУчетСервер.МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам(МассивСтруктурныхЕдиниц);
		
	Иначе
		МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам = Новый Массив;
		МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам = Новый Массив;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам", МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам);
	ДополнительныеСвойства.Вставить("МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам", МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам);
	
	// Инициализация данных документа
	Документы.КомплектацияЗапасов.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Проверим, можно ли продолжать и не было ли отказа в процедурах формирования движений.
	Если ДополнительныеСвойства.Отказ = Истина Тогда
		Отказ = Истина;
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовка наборов записей
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ПроведениеДокументовУНФ.ОтразитьДвижения("Запасы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыВРазрезеГТД", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыНаСкладах", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыКПоступлениюНаСклады", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыКРасходуСоСкладов", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ВыпускПродукции", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("СуммовойУчетВРознице", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);
	
	// СерииНоменклатуры
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДвиженияСерииНоменклатуры", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("СерииНоменклатуры", ТаблицыДляДвижений, Движения, Отказ);
	
	ПроведениеДокументовУНФ.ОтразитьДвижения("СерииНоменклатурыКПоступлению", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("СерииНоменклатурыКРасходу", ТаблицыДляДвижений, Движения, Отказ);
	
	// Прослеживаемость
	УправлениеНебольшойФирмойСервер.ОтразитьПрослеживаемыеТовары(ДополнительныеСвойства, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОперацииСПрослеживаемымиТоварами", ТаблицыДляДвижений, Движения, Отказ);
	
	// Запись наборов записей
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль
	Документы.КомплектацияЗапасов.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	ПроведениеДокументовУНФ.ЗакрытьМенеджерВременныхТаблиц(ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Этапы производства
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 

	// Инициализация дополнительных свойств для проведения документа
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныйСклад") Тогда
		
		МассивСтруктурныхЕдиниц = Новый Массив;
		МассивСтруктурныхЕдиниц.Добавить(СтруктурнаяЕдиница);
		
		МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам = СкладскойУчетСервер.МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам(МассивСтруктурныхЕдиниц);
		МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам = СкладскойУчетСервер.МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам(МассивСтруктурныхЕдиниц);
		
	Иначе
		МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам = Новый Массив;
		МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам = Новый Массив;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам", МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам);
	ДополнительныеСвойства.Вставить("МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам", МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам);
	
	// Контроль
	Документы.КомплектацияЗапасов.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ПроцедурыЗаполненияДокумента

Процедура ЗаполнитьТабличнуюЧастьПоКомплектации() Экспорт
	
	Запасы.Очистить();
	Если НЕ ЗначениеЗаполнено(Комплектация) Тогда
		Возврат;
	КонецЕсли; 
	
	КоличествоПродукции = Количество * ?(ТипЗнч(ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения"), ЕдиницаИзмерения.Коэффициент, 1);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Комплектация", Комплектация);
	Запрос.УстановитьПараметр("КоличествоПродукции", КоличествоПродукции);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КомплектацииНоменклатурыСостав.Номенклатура КАК Номенклатура,
	|	КомплектацииНоменклатурыСостав.Характеристика КАК Характеристика,
	|	КомплектацииНоменклатурыСостав.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(КомплектацииНоменклатурыСостав.Количество * &КоличествоПродукции / ВЫБОР
	|			КОГДА КомплектацииНоменклатурыСостав.КоличествоПродукции = 0
	|				ТОГДА 1
	|			ИНАЧЕ КомплектацииНоменклатурыСостав.КоличествоПродукции
	|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
	|	КомплектацииНоменклатурыСостав.ДоляСтоимости КАК ДоляСтоимости,
	|	ВЫБОР
	|		КОГДА ФункциональнаяОпцияУчетГТД.Значение
	|			ТОГДА КомплектацииНоменклатурыСостав.Номенклатура.СтранаПроисхождения
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|	КОНЕЦ КАК СтранаПроисхождения,
	|	КомплектацииНоменклатурыСостав.Номенклатура.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар
	|ИЗ
	|	Справочник.КомплектацииНоменклатуры.Состав КАК КомплектацииНоменклатурыСостав,
	|	Константа.ФункциональнаяОпцияУчетГТД КАК ФункциональнаяОпцияУчетГТД
	|ГДЕ
	|	КомплектацииНоменклатурыСостав.Ссылка = &Комплектация";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли; 	
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла; 
	
	СтатусПартии = Новый СписокЗначений;
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	
	Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
		
		СтрокаТабличнойЧасти.Партия = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура), 
			НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, 
			СтатусПартии), Неопределено);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоСтруктуре(ДанныеЗаполнения) Экспорт
	Если ДанныеЗаполнения.Свойство("АдресТовары") Тогда
	ЗапасыККомплектации = ПолучитьИзВременногоХранилища(ДанныеЗаполнения.АдресТовары); 
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ЗапасыККомплектации[0]);
	ЗаполнитьТабличнуюЧастьПоКомплектации();
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуПокупателя(ДанныеЗаполнения) Экспорт
	Если ЗначениеЗаполнено(ДанныеЗаполнения) И ТипЗнч(ДанныеЗаполнения)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "Проведен, ОжидаетсяВыборВариантаКП, ВидОперации");
		Документы.ЗаказПокупателя.ПроверитьВозможностьВводаНаОснованииЗаказаПокупателя(ДанныеЗаполнения, ЗначенияРеквизитов);
	Иначе
		ЗначенияРеквизитов = Новый Структура("Проведен, ОжидаетсяВыборВариантаКП, ВидОперации", Истина, Ложь, Перечисления.ВидыОперацийЗаказПокупателя.ПустаяСсылка());
	КонецЕсли; 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыОстатки.Характеристика КАК Характеристика,
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	КомплектацииПоУмолчанию.Комплектация КАК Комплектация
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|		ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|		(ЗаказПокупателяЗапасы.Количество - ЗаказПокупателяЗапасы.Резерв) * ВЫБОР
	|			КОГДА ЗаказПокупателяЗапасы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|				ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК КоличествоОстаток,
	|		ЗаказПокупателяЗапасы.КлючСвязи КАК КлючСвязи
	|	ИЗ
	|		Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|	ГДЕ
	|		ЗаказПокупателяЗапасы.Ссылка = &ЗаказПокупателя
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВыпускПродукции.Номенклатура,
	|		ВыпускПродукции.Характеристика,
	|		-ВыпускПродукции.КоличествоОборот,
	|		0
	|	ИЗ
	|		РегистрНакопления.ВыпускПродукции.Обороты(, , Авто, ЗаказПокупателя = &ЗаказПокупателя) КАК ВыпускПродукции
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаВыпускПродукции.Номенклатура,
	|		ДвиженияДокументаВыпускПродукции.Характеристика,
	|		ДвиженияДокументаВыпускПродукции.Количество,
	|		0
	|	ИЗ
	|		РегистрНакопления.ВыпускПродукции КАК ДвиженияДокументаВыпускПродукции
	|	ГДЕ
	|		ДвиженияДокументаВыпускПродукции.Регистратор = &Ссылка
	|		И ДвиженияДокументаВыпускПродукции.ЗаказПокупателя = &ЗаказПокупателя) КАК ЗаказыОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КомплектацииПоУмолчанию КАК КомплектацииПоУмолчанию
	|		ПО ЗаказыОстатки.Номенклатура = КомплектацииПоУмолчанию.Номенклатура
	|			И ЗаказыОстатки.Характеристика = КомплектацииПоУмолчанию.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыОстатки.Номенклатура,
	|	ЗаказыОстатки.Характеристика,
	|	КомплектацииПоУмолчанию.Комплектация
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|			ТОГДА ЗаказПокупателяЗапасы.Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ЗаказПокупателяЗапасы.Ссылка.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяЗапасы.Ссылка.СтруктурнаяЕдиницаРезерв <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателяЗапасы.Ссылка.СтруктурнаяЕдиницаРезерв
	|		КОГДА ЗаказПокупателяЗапасы.Ссылка.СтруктурнаяЕдиницаПродажи.ПолучательПеремещения.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|				ИЛИ ЗаказПокупателяЗапасы.Ссылка.СтруктурнаяЕдиницаПродажи.ПолучательПеремещения.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|			ТОГДА ЗаказПокупателяЗапасы.Ссылка.СтруктурнаяЕдиницаПродажи.ПолучательПеремещения
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяЗапасы.Ссылка.СтруктурнаяЕдиницаПродажи.ПолучательПеремещения.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|				ИЛИ ЗаказПокупателяЗапасы.Ссылка.СтруктурнаяЕдиницаПродажи.ПолучательПеремещения.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|			ТОГДА ЗаказПокупателяЗапасы.Ссылка.СтруктурнаяЕдиницаПродажи.ЯчейкаПолучателяПеремещения
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК Ячейка,
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяЗапасы.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|	ЗаказПокупателяЗапасы.Партия КАК Партия,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ВЫБОР
	|			КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКомплектацияЗапасов.Разборка)
	|				ТОГДА ЗаказПокупателяЗапасы.Количество
	|			ИНАЧЕ ЗаказПокупателяЗапасы.Количество - ЗаказПокупателяЗапасы.Резерв
	|		КОНЕЦ) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКомплектацияЗапасов.Разборка)
	|				ТОГДА ЗаказПокупателяЗапасы.КоличествоСобрано
	|			ИНАЧЕ ЗаказПокупателяЗапасы.КоличествоСобрано - ЗаказПокупателяЗапасы.Резерв
	|		КОНЕЦ) КАК КоличествоСобрано,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Коэффициент,
	|	ЗаказПокупателяЗапасы.ЕстьСборка КАК ЕстьСборка,
	|	КомплектацииПоУмолчанию.Комплектация КАК Комплектация
	|ИЗ
	|	ВТЗаказПокупателяЗапасы КАК ЗаказПокупателяЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КомплектацииПоУмолчанию КАК КомплектацииПоУмолчанию
	|		ПО ЗаказПокупателяЗапасы.Номенклатура = КомплектацииПоУмолчанию.Номенклатура
	|			И ЗаказПокупателяЗапасы.Характеристика = КомплектацииПоУмолчанию.Характеристика,
	|	Константа.ФункциональнаяОпцияРезервированиеЗапасов КАК ФункциональнаяОпцияРезервированиеЗапасов
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Ссылка = &ЗаказПокупателя
	|	И (КомплектацииПоУмолчанию.Комплектация <> ЗНАЧЕНИЕ(Справочник.КомплектацииНоменклатуры.ПустаяСсылка)
	|			ИЛИ ЗаказПокупателяЗапасы.Номенклатура.СпособПополнения = ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Производство)
	|			ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКомплектацияЗапасов.Разборка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателяЗапасы.Ссылка.Организация,
	|	ЗаказПокупателяЗапасы.Номенклатура,
	|	ЗаказПокупателяЗапасы.Номенклатура.СтранаПроисхождения,
	|	ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры,
	|	ЗаказПокупателяЗапасы.Характеристика,
	|	ЗаказПокупателяЗапасы.Партия,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|			ТОГДА ЗаказПокупателяЗапасы.Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяЗапасы.Ссылка.СтруктурнаяЕдиницаРезерв <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателяЗапасы.Ссылка.СтруктурнаяЕдиницаРезерв
	|		КОГДА ЗаказПокупателяЗапасы.Ссылка.СтруктурнаяЕдиницаПродажи.ПолучательПеремещения.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|				ИЛИ ЗаказПокупателяЗапасы.Ссылка.СтруктурнаяЕдиницаПродажи.ПолучательПеремещения.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|			ТОГДА ЗаказПокупателяЗапасы.Ссылка.СтруктурнаяЕдиницаПродажи.ПолучательПеремещения
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяЗапасы.Ссылка.СтруктурнаяЕдиницаПродажи.ПолучательПеремещения.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|				ИЛИ ЗаказПокупателяЗапасы.Ссылка.СтруктурнаяЕдиницаПродажи.ПолучательПеремещения.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|			ТОГДА ЗаказПокупателяЗапасы.Ссылка.СтруктурнаяЕдиницаПродажи.ЯчейкаПолучателяПеремещения
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ,
	|	ЗаказПокупателяЗапасы.ЕстьСборка,
	|	ВЫБОР
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКомплектацияЗапасов.Разборка)
	|			ТОГДА ЗаказПокупателяЗапасы.КоличествоСобрано
	|		ИНАЧЕ ЗаказПокупателяЗапасы.КоличествоСобрано - ЗаказПокупателяЗапасы.Резерв
	|	КОНЕЦ,
	|	КомплектацииПоУмолчанию.Комплектация
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКомплектацияЗапасов.Разборка)
	|				ТОГДА ЗаказПокупателяЗапасы.Количество
	|			ИНАЧЕ ЗаказПокупателяЗапасы.Количество - ЗаказПокупателяЗапасы.Резерв
	|		КОНЕЦ) > 0");
	Запрос.УстановитьПараметр("ЗаказПокупателя", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ВидОперации", ВидОперации);
	Документы.ЗаказПокупателя.ДобавитьТаблицуЗапасыВМенеджерВременныхТаблиц(ДанныеЗаполнения, Запрос.МенеджерВременныхТаблиц, Ложь);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаОстатков = МассивРезультатов[0].Выгрузить();
	ТаблицаОстатков.Индексы.Добавить("Номенклатура,Характеристика");
	
	ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
	Если ТаблицаОстатков.Количество() = 0 ИЛИ ВыборкаИзРезультатаЗапроса.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
		
	ВыборкаИзРезультатаЗапроса.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаИзРезультатаЗапроса);
	
	ЗаполнитьТабличнуюЧастьПоКомплектации();
КонецПроцедуры 

// Обработчик заполнения на основании документа ПриходныйОрдер.
//
// Параметры:
//  ДокументСсылкаПриходныйОрдер	 - ДокументСсылка.ПриходныйОрдер
//
Процедура ЗаполнитьПоПриходномуОрдеру(ДокументСсылкаПриходныйОрдер) Экспорт
	
	Организация = ДокументСсылкаПриходныйОрдер.Организация;
	СтруктурнаяЕдиница = ДокументСсылкаПриходныйОрдер.СтруктурнаяЕдиница;
	Ячейка = ДокументСсылкаПриходныйОрдер.Ячейка;
	ДокументОснование = ДокументСсылкаПриходныйОрдер;
	ВидОперации = Перечисления.ВидыОперацийКомплектацияЗапасов.Разборка;
	
	Запасы.Очистить();
	СерииНоменклатурыЗапасы.Очистить();
	СведенияПрослеживаемости.Очистить();
	
	УчетГТД = ПолучитьФункциональнуюОпцию("УчетГТД");
	
	ВидУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиница, "ВидУчетаОрдерныхСкладов");
	
	Если ВидУчета = Перечисления.ВидыУчетаОрдерныхСкладов.ПоСкладуВЦелом Тогда
		ЗаполнитьПоСкладскомуОрдеруБезУчетаОстатков(ДокументСсылкаПриходныйОрдер);
		Возврат;
	КонецЕсли;
	
	Если ВидУчета = Перечисления.ВидыУчетаОрдерныхСкладов.УчетОстатковПоПрочимДокументам Тогда
		ТекстИсключения = НСтр("ru = 'Вид учета остатков на ордерном складе - по Комплектации запасов. Ввод Комплектации запасов на основании Складского ордера недоступен.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	УчетОстатковПоСкладскимОрдерам = СкладскойУчетСервер.УчетОстатковВРазрезеСкладскихОрдеров(СтруктурнаяЕдиница);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПриходныйОрдерЗапасы.НомерСтроки КАК НомерСтроки,
	|	ПриходныйОрдерЗапасы.Номенклатура КАК Номенклатура,
	|	ПриходныйОрдерЗапасы.Характеристика КАК Характеристика,
	|	ПриходныйОрдерЗапасы.Партия КАК Партия,
	|	ПриходныйОрдерЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПриходныйОрдерЗапасы.СерииНоменклатуры КАК СерииНоменклатуры,
	|	ПриходныйОрдерЗапасы.КлючСвязи КАК КлючСвязи,
	|	ПриходныйОрдерЗапасы.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА &КонтролироватьОстаткиПоДокументам
	|			ТОГДА &ДокументОснование
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументПоступления,
	|	ПриходныйОрдерЗапасы.Ячейка КАК Ячейка,
	|	&СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ИЗ
	|	Документ.ПриходныйОрдер.Запасы КАК ПриходныйОрдерЗапасы
	|ГДЕ
	|	ПриходныйОрдерЗапасы.Ссылка = &ДокументОснование
	|	И ПриходныйОрдерЗапасы.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗапасыКПоступлениюНаСкладыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыКПоступлениюНаСкладыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыКПоступлениюНаСкладыОстатки.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА ЗапасыКПоступлениюНаСкладыОстатки.КоличествоОстаток < 0
	|			ТОГДА -ЗапасыКПоступлениюНаСкладыОстатки.КоличествоОстаток
	|		ИНАЧЕ ЗапасыКПоступлениюНаСкладыОстатки.КоличествоОстаток
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА &КонтролироватьОстаткиПоДокументам
	|			ТОГДА &ДокументОснование
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументПоступления,
	|	&СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыКПоступлениюНаСкладыОстатки.Ячейка КАК Ячейка
	|ИЗ
	|	РегистрНакопления.ЗапасыКПоступлениюНаСклады.Остатки(
	|			,
	|			Организация = &Организация
	|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|				И ДокументОснование = &ДокументОснование) КАК ЗапасыКПоступлениюНаСкладыОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗапасыКПоступлениюНаСклады.Номенклатура,
	|	ЗапасыКПоступлениюНаСклады.Характеристика,
	|	ЗапасыКПоступлениюНаСклады.Партия,
	|	ВЫБОР
	|		КОГДА ЗапасыКПоступлениюНаСклады.Количество < 0
	|			ТОГДА -ЗапасыКПоступлениюНаСклады.Количество
	|		ИНАЧЕ ЗапасыКПоступлениюНаСклады.Количество
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &КонтролироватьОстаткиПоДокументам
	|			ТОГДА &ДокументОснование
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	&СтруктурнаяЕдиница,
	|	ЗапасыКПоступлениюНаСклады.Ячейка
	|ИЗ
	|	РегистрНакопления.ЗапасыКПоступлениюНаСклады КАК ЗапасыКПоступлениюНаСклады
	|ГДЕ
	|	ЗапасыКПоступлениюНаСклады.Регистратор = &Ссылка
	|	И ЗапасыКПоступлениюНаСклады.ДокументОснование = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриходныйОрдерЗапасы.Номенклатура КАК Номенклатура,
	|	ПриходныйОрдерЗапасы.Характеристика КАК Характеристика,
	|	ПриходныйОрдерЗапасы.Партия КАК Партия,
	|	ПриходныйОрдерСерииНоменклатуры.Серия КАК Серия,
	|	ПриходныйОрдерЗапасы.КлючСвязи КАК КлючСвязи,
	|	ПриходныйОрдерСерииНоменклатуры.Количество КАК Количество
	|ИЗ
	|	Документ.ПриходныйОрдер.СерииНоменклатуры КАК ПриходныйОрдерСерииНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдер.Запасы КАК ПриходныйОрдерЗапасы
	|		ПО (ПриходныйОрдерСерииНоменклатуры.Ссылка = &ДокументОснование)
	|			И (ПриходныйОрдерЗапасы.Ссылка = &ДокументОснование)
	|			И (ПриходныйОрдерЗапасы.КлючСвязи = ПриходныйОрдерСерииНоменклатуры.КлючСвязи)
	|ГДЕ
	|	ПриходныйОрдерЗапасы.Ссылка = &ДокументОснование
	|	И ПриходныйОрдерСерииНоменклатуры.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерииНоменклатурыКПоступлениюОстатки.Серия КАК Серия,
	|	СерииНоменклатурыКПоступлениюОстатки.КоличествоОстаток КАК Количество,
	|	СерииНоменклатурыКПоступлениюОстатки.Номенклатура КАК Номенклатура,
	|	СерииНоменклатурыКПоступлениюОстатки.Характеристика КАК Характеристика,
	|	СерииНоменклатурыКПоступлениюОстатки.Партия КАК Партия
	|ПОМЕСТИТЬ ОстаткиСерииИтог
	|ИЗ
	|	РегистрНакопления.СерииНоменклатурыКПоступлению.Остатки(
	|			,
	|			Организация = &Организация
	|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|				И ДокументОснование = &ДокументОснование) КАК СерииНоменклатурыКПоступлениюОстатки
	|ГДЕ
	|	СерииНоменклатурыКПоступлениюОстатки.КоличествоОстаток > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СерииНоменклатурыКПоступлению.Серия,
	|	СерииНоменклатурыКПоступлению.Количество,
	|	СерииНоменклатурыКПоступлению.Номенклатура,
	|	СерииНоменклатурыКПоступлению.Характеристика,
	|	СерииНоменклатурыКПоступлению.Партия
	|ИЗ
	|	РегистрНакопления.СерииНоменклатурыКПоступлению КАК СерииНоменклатурыКПоступлению
	|ГДЕ
	|	СерииНоменклатурыКПоступлению.Регистратор = &Ссылка
	|	И СерииНоменклатурыКПоступлению.ДокументОснование = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиСерииИтог.Серия КАК Серия,
	|	СУММА(ОстаткиСерииИтог.Количество) КАК Количество,
	|	ОстаткиСерииИтог.Номенклатура КАК Номенклатура,
	|	ОстаткиСерииИтог.Характеристика КАК Характеристика,
	|	ОстаткиСерииИтог.Партия КАК Партия
	|ИЗ
	|	ОстаткиСерииИтог КАК ОстаткиСерииИтог
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиСерииИтог.Серия,
	|	ОстаткиСерииИтог.Характеристика,
	|	ОстаткиСерииИтог.Партия,
	|	ОстаткиСерииИтог.Номенклатура");
	
	Компания = Константы.УчетПоКомпании.Компания(Организация);
	
	КонтролироватьОстаткиПоДокументам = ВидУчета = Перечисления.ВидыУчетаОрдерныхСкладов.УчетОстатковПоСкладскимОрдерам;
	
	ДокументПоступления = ?(КонтролироватьОстаткиПоДокументам, ДокументСсылкаПриходныйОрдер, Неопределено);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументПоступления);
	
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.УстановитьПараметр("КонтролироватьОстаткиПоДокументам", Истина);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатыЗапроса[1].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСерииНоменклатуры = РезультатыЗапроса[2].Выгрузить();
	ТаблицаОстаткиСерииНоменклатуры = РезультатыЗапроса[4].Выгрузить();
	ТаблицаОстаткиЗапасы = РезультатыЗапроса[1].Выгрузить();
	
	ВыборкаЗапасы = РезультатыЗапроса[0].Выбрать();
	
	ПараметрыПоискаСерии = Новый Структура("КлючСвязи");
	
	Если СкладскойУчетСервер.КонтролироватьОстаткиПоЯчейкамКПоступлениюОтгрзуке(СтруктурнаяЕдиница) Тогда
		ПараметрыПоискаОстаткиЗапасы = Новый Структура("Номенклатура, Характеристика, Партия, Ячейка");
	Иначе
		ПараметрыПоискаОстаткиЗапасы = Новый Структура("Номенклатура, Характеристика, Партия");
	КонецЕсли;
	
	ПараметрыПоискаОстаткиСерииНоменклатуры = Новый Структура("Номенклатура, Характеристика, Партия, Серия");
	
	Пока ВыборкаЗапасы.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаЗапасы.Количество) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПараметрыПоискаОстаткиЗапасы, ВыборкаЗапасы);
		НайденныеОстаткиЗапасы = ТаблицаОстаткиЗапасы.НайтиСтроки(ПараметрыПоискаОстаткиЗапасы);
		
		Если Не НайденныеОстаткиЗапасы.Количество() Или (НайденныеОстаткиЗапасы.Количество() И НайденныеОстаткиЗапасы[0].Количество = 0) Тогда
			Продолжить
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПараметрыПоискаСерии, ВыборкаЗапасы);
		НайденныеСерии = ТаблицаСерииНоменклатуры.НайтиСтроки(ПараметрыПоискаСерии);
		
		КоличествоСерий = 0;
		ИспользуютсяСерииВСтроке = Ложь;
		Для Каждого СтрокаСерии Из НайденныеСерии Цикл
			ИспользуютсяСерииВСтроке = Истина;
			
			ЗаполнитьЗначенияСвойств(ПараметрыПоискаОстаткиСерииНоменклатуры, СтрокаСерии);
			НайденныеОстаткиСерий = ТаблицаОстаткиСерииНоменклатуры.НайтиСтроки(ПараметрыПоискаОстаткиСерииНоменклатуры);
			
			Если Не НайденныеОстаткиСерий.Количество() Или (НайденныеОстаткиСерий.Количество() И НайденныеОстаткиСерий[0].Количество = 0) Тогда
				Продолжить
			КонецЕсли;
			
			ОстатокСерий = НайденныеОстаткиСерий[0];
			
			Если Не ОстатокСерий.Количество > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаСерии = СерииНоменклатурыЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, СтрокаСерии); 
			
			Если НоваяСтрокаСерии.Количество >= ОстатокСерий.Количество Тогда
				НоваяСтрокаСерии.Количество = ОстатокСерий.Количество;
			КонецЕсли;
			
			ОстатокСерий.Количество = ОстатокСерий.Количество - НоваяСтрокаСерии.Количество;
			
			КоличествоСерий = КоличествоСерий + НоваяСтрокаСерии.Количество;
			
		КонецЦикла;
		
		Если ИспользуютсяСерииВСтроке И КоличествоСерий = 0 Тогда
			Продолжить
		КонецЕсли;
		
		ОстатокЗапасов = НайденныеОстаткиЗапасы[0];
		
		НоваяСтрокаЗапасы = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗапасы, ВыборкаЗапасы);
		
		Если ТипЗнч(НоваяСтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
			
			КоличествоВСтрокеЗапасов = ?(КоличествоСерий > 0, КоличествоСерий, НоваяСтрокаЗапасы.Количество);
			
			Если КоличествоВСтрокеЗапасов >= ОстатокЗапасов.Количество Тогда
				КоличествоВСтрокеЗапасов = ОстатокЗапасов.Количество;
				ОстатокЗапасов.Количество = 0;
			Иначе
				ОстатокЗапасов.Количество = ОстатокЗапасов.Количество - КоличествоВСтрокеЗапасов;
			КонецЕсли;
			
			НоваяСтрокаЗапасы.Количество = КоличествоВСтрокеЗапасов;
			
		Иначе
			
			КоличествоСтрокиВЕдиницахХранения = НоваяСтрокаЗапасы.Количество * НоваяСтрокаЗапасы.ЕдиницаИзмерения.Коэффициент;
			КоличествоВСтрокеЗапасов = ?(КоличествоСерий > 0, КоличествоСерий, КоличествоСтрокиВЕдиницахХранения);
			
			Если КоличествоВСтрокеЗапасов >= ОстатокЗапасов.Количество Тогда
				КоличествоВСтрокеЗапасов = ОстатокЗапасов.Количество;
				ОстатокЗапасов.Количество = 0;
			Иначе
				ОстатокЗапасов.Количество = ОстатокЗапасов.Количество - КоличествоВСтрокеЗапасов;
			КонецЕсли;
			
			НоваяСтрокаЗапасы.Количество = КоличествоВСтрокеЗапасов/ НоваяСтрокаЗапасы.ЕдиницаИзмерения.Коэффициент;;
			
		КонецЕсли;
		
		Если СерииНоменклатурыУНФ.ИспользоватьСерииНоменклатурыОстатки() = Истина Тогда
			НоваяСтрокаЗапасы.СерииНоменклатуры = СерииНоменклатурыУНФ.ПредставлениеСерийНоменклатуры(СерииНоменклатурыЗапасы, НоваяСтрокаЗапасы.КлючСвязи)
		КонецЕсли;
		
		Если УчетГТД Тогда
			НоваяСтрокаЗапасы.СтранаПроисхождения = НоваяСтрокаЗапасы.Номенклатура.СтранаПроисхождения;
		КонецЕсли;
		
	КонецЦикла;
	
	СерииНоменклатурыУНФ.УдалитьСерииНоменклатурыВТабличнойЧастиВЗависимостиОтПолитики(ЭтотОбъект);
		
КонецПроцедуры

// Обработчик заполнения на основании документа РасходныйОрдер.
//
// Параметры:
//  ДокументСсылкаПРасходныйОрдер	 - ДокументСсылка.РасходныйОрдер
//
Процедура ЗаполнитьПоРасходномуОрдеру(ДокументСсылкаРасходныйОрдер) Экспорт
	
	Организация = ДокументСсылкаРасходныйОрдер.Организация;
	СтруктурнаяЕдиница = ДокументСсылкаРасходныйОрдер.СтруктурнаяЕдиница;
	Ячейка = ДокументСсылкаРасходныйОрдер.Ячейка;
	ДокументОснование = ДокументСсылкаРасходныйОрдер;
	ВидОперации = Перечисления.ВидыОперацийКомплектацияЗапасов.Сборка;
	
	Запасы.Очистить();
	СерииНоменклатурыЗапасы.Очистить();
	СведенияПрослеживаемости.Очистить();
	
	УчетГТД = ПолучитьФункциональнуюОпцию("УчетГТД");
	
	ВидУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиница, "ВидУчетаОрдерныхСкладов");
	
	Если ВидУчета = Перечисления.ВидыУчетаОрдерныхСкладов.ПоСкладуВЦелом Тогда
		ЗаполнитьПоСкладскомуОрдеруБезУчетаОстатков(ДокументСсылкаРасходныйОрдер, Ложь);
		Возврат;
	КонецЕсли;
	
	Если ВидУчета = Перечисления.ВидыУчетаОрдерныхСкладов.УчетОстатковПоПрочимДокументам Тогда
		ТекстИсключения = НСтр("ru = 'Вид учета остатков на ордерном складе - по Комплектации запасов. Ввод Комплектации запасов на основании Расходного ордера недоступен.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	УчетОстатковПоСкладскимОрдерам = СкладскойУчетСервер.УчетОстатковВРазрезеСкладскихОрдеров(СтруктурнаяЕдиница, Ложь);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РасходныйОрдерЗапасы.НомерСтроки КАК НомерСтроки,
	|	РасходныйОрдерЗапасы.Номенклатура КАК Номенклатура,
	|	РасходныйОрдерЗапасы.Характеристика КАК Характеристика,
	|	РасходныйОрдерЗапасы.Партия КАК Партия,
	|	РасходныйОрдерЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РасходныйОрдерЗапасы.СерииНоменклатуры КАК СерииНоменклатуры,
	|	РасходныйОрдерЗапасы.КлючСвязи КАК КлючСвязи,
	|	РасходныйОрдерЗапасы.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА &КонтролироватьОстаткиПоДокументам
	|			ТОГДА &ДокументОснование
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументПоступления,
	|	РасходныйОрдерЗапасы.Ячейка КАК Ячейка,
	|	&СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ИЗ
	|	Документ.РасходныйОрдер.Запасы КАК РасходныйОрдерЗапасы
	|ГДЕ
	|	РасходныйОрдерЗапасы.Ссылка = &ДокументОснование
	|	И РасходныйОрдерЗапасы.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗапасыКРасходуСоСкладовОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыКРасходуСоСкладовОстатки.Характеристика КАК Характеристика,
	|	ЗапасыКРасходуСоСкладовОстатки.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА ЗапасыКРасходуСоСкладовОстатки.КоличествоОстаток < 0
	|			ТОГДА -ЗапасыКРасходуСоСкладовОстатки.КоличествоОстаток
	|		ИНАЧЕ ЗапасыКРасходуСоСкладовОстатки.КоличествоОстаток
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА &КонтролироватьОстаткиПоДокументам
	|			ТОГДА &ДокументОснование
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументПоступления,
	|	&СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыКРасходуСоСкладовОстатки.Ячейка КАК Ячейка
	|ИЗ
	|	РегистрНакопления.ЗапасыКРасходуСоСкладов.Остатки(
	|			,
	|			Организация = &Организация
	|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|				И ДокументОснование = &ДокументОснование) КАК ЗапасыКРасходуСоСкладовОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗапасыКРасходуСоСкладов.Номенклатура,
	|	ЗапасыКРасходуСоСкладов.Характеристика,
	|	ЗапасыКРасходуСоСкладов.Партия,
	|	ВЫБОР
	|		КОГДА ЗапасыКРасходуСоСкладов.Количество < 0
	|			ТОГДА -ЗапасыКРасходуСоСкладов.Количество
	|		ИНАЧЕ ЗапасыКРасходуСоСкладов.Количество
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &КонтролироватьОстаткиПоДокументам
	|			ТОГДА &ДокументОснование
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	&СтруктурнаяЕдиница,
	|	ЗапасыКРасходуСоСкладов.Ячейка
	|ИЗ
	|	РегистрНакопления.ЗапасыКРасходуСоСкладов КАК ЗапасыКРасходуСоСкладов
	|ГДЕ
	|	ЗапасыКРасходуСоСкладов.Регистратор = &Ссылка
	|	И ЗапасыКРасходуСоСкладов.ДокументОснование = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходныйОрдерЗапасы.Номенклатура КАК Номенклатура,
	|	РасходныйОрдерЗапасы.Характеристика КАК Характеристика,
	|	РасходныйОрдерЗапасы.Партия КАК Партия,
	|	РасходныйОрдерСерииНоменклатуры.Серия КАК Серия,
	|	РасходныйОрдерЗапасы.КлючСвязи КАК КлючСвязи,
	|	РасходныйОрдерСерииНоменклатуры.Количество КАК Количество
	|ИЗ
	|	Документ.РасходныйОрдер.СерииНоменклатуры КАК РасходныйОрдерСерииНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдер.Запасы КАК РасходныйОрдерЗапасы
	|		ПО (РасходныйОрдерСерииНоменклатуры.Ссылка = &ДокументОснование)
	|			И (РасходныйОрдерЗапасы.Ссылка = &ДокументОснование)
	|			И (РасходныйОрдерЗапасы.КлючСвязи = РасходныйОрдерСерииНоменклатуры.КлючСвязи)
	|ГДЕ
	|	РасходныйОрдерЗапасы.Ссылка = &ДокументОснование
	|	И РасходныйОрдерСерииНоменклатуры.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерииНоменклатурыКРасходуОстатки.Серия КАК Серия,
	|	-СерииНоменклатурыКРасходуОстатки.КоличествоОстаток КАК Количество,
	|	СерииНоменклатурыКРасходуОстатки.Номенклатура КАК Номенклатура,
	|	СерииНоменклатурыКРасходуОстатки.Характеристика КАК Характеристика,
	|	СерииНоменклатурыКРасходуОстатки.Партия КАК Партия
	|ПОМЕСТИТЬ ОстаткиСерииИтог
	|ИЗ
	|	РегистрНакопления.СерииНоменклатурыКРасходу.Остатки(
	|			,
	|			Организация = &Организация
	|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|				И ДокументОснование = &ДокументОснование) КАК СерииНоменклатурыКРасходуОстатки
	|ГДЕ
	|	СерииНоменклатурыКРасходуОстатки.КоличествоОстаток < 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СерииНоменклатурыКРасходу.Серия,
	|	СерииНоменклатурыКРасходу.Количество,
	|	СерииНоменклатурыКРасходу.Номенклатура,
	|	СерииНоменклатурыКРасходу.Характеристика,
	|	СерииНоменклатурыКРасходу.Партия
	|ИЗ
	|	РегистрНакопления.СерииНоменклатурыКРасходу КАК СерииНоменклатурыКРасходу
	|ГДЕ
	|	СерииНоменклатурыКРасходу.Регистратор = &Ссылка
	|	И СерииНоменклатурыКРасходу.ДокументОснование = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиСерииИтог.Серия КАК Серия,
	|	СУММА(ОстаткиСерииИтог.Количество) КАК Количество,
	|	ОстаткиСерииИтог.Номенклатура КАК Номенклатура,
	|	ОстаткиСерииИтог.Характеристика КАК Характеристика,
	|	ОстаткиСерииИтог.Партия КАК Партия
	|ИЗ
	|	ОстаткиСерииИтог КАК ОстаткиСерииИтог
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиСерииИтог.Серия,
	|	ОстаткиСерииИтог.Характеристика,
	|	ОстаткиСерииИтог.Партия,
	|	ОстаткиСерииИтог.Номенклатура");
	
	Компания = Константы.УчетПоКомпании.Компания(Организация);
	
	КонтролироватьОстаткиПоДокументам = ВидУчета = Перечисления.ВидыУчетаОрдерныхСкладов.УчетОстатковПоСкладскимОрдерам;
	
	ДокументОтгрузки = ?(КонтролироватьОстаткиПоДокументам, ДокументСсылкаРасходныйОрдер, Неопределено);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОтгрузки);
	
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.УстановитьПараметр("КонтролироватьОстаткиПоДокументам", Истина);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатыЗапроса[1].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСерииНоменклатуры = РезультатыЗапроса[2].Выгрузить();
	ТаблицаОстаткиСерииНоменклатуры = РезультатыЗапроса[4].Выгрузить();
	ТаблицаОстаткиЗапасы = РезультатыЗапроса[1].Выгрузить();
	
	ВыборкаЗапасы = РезультатыЗапроса[0].Выбрать();
	
	ПараметрыПоискаСерии = Новый Структура("КлючСвязи");
	
	Если СкладскойУчетСервер.КонтролироватьОстаткиПоЯчейкамКПоступлениюОтгрзуке(СтруктурнаяЕдиница) Тогда
		ПараметрыПоискаОстаткиЗапасы = Новый Структура("Номенклатура, Характеристика, Партия, Ячейка");
	Иначе
		ПараметрыПоискаОстаткиЗапасы = Новый Структура("Номенклатура, Характеристика, Партия");
	КонецЕсли;

	ПараметрыПоискаОстаткиСерииНоменклатуры = Новый Структура("Номенклатура, Характеристика, Партия, Серия");
	
	Пока ВыборкаЗапасы.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаЗапасы.Количество) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПараметрыПоискаОстаткиЗапасы, ВыборкаЗапасы);
		НайденныеОстаткиЗапасы = ТаблицаОстаткиЗапасы.НайтиСтроки(ПараметрыПоискаОстаткиЗапасы);
		
		Если Не НайденныеОстаткиЗапасы.Количество() Или (НайденныеОстаткиЗапасы.Количество() И НайденныеОстаткиЗапасы[0].Количество = 0) Тогда
			Продолжить
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПараметрыПоискаСерии, ВыборкаЗапасы);
		НайденныеСерии = ТаблицаСерииНоменклатуры.НайтиСтроки(ПараметрыПоискаСерии);
		
		КоличествоСерий = 0;
		ИспользуютсяСерииВСтроке = Ложь;
		Для Каждого СтрокаСерии Из НайденныеСерии Цикл
			
			ИспользуютсяСерииВСтроке = Истина;
			
			ЗаполнитьЗначенияСвойств(ПараметрыПоискаОстаткиСерииНоменклатуры, СтрокаСерии);
			НайденныеОстаткиСерий = ТаблицаОстаткиСерииНоменклатуры.НайтиСтроки(ПараметрыПоискаОстаткиСерииНоменклатуры);
			
			Если Не НайденныеОстаткиСерий.Количество() Или (НайденныеОстаткиСерий.Количество() И НайденныеОстаткиСерий[0].Количество = 0) Тогда
				Продолжить
			КонецЕсли;
			
			ОстатокСерий = НайденныеОстаткиСерий[0];
			
			Если Не ОстатокСерий.Количество > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаСерии = СерииНоменклатурыЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, СтрокаСерии); 
			
			Если НоваяСтрокаСерии.Количество >= ОстатокСерий.Количество Тогда
				НоваяСтрокаСерии.Количество = ОстатокСерий.Количество;
			КонецЕсли;
			
			ОстатокСерий.Количество = ОстатокСерий.Количество - НоваяСтрокаСерии.Количество;
			
			КоличествоСерий = КоличествоСерий + НоваяСтрокаСерии.Количество;
			
		КонецЦикла;
		
		Если ИспользуютсяСерииВСтроке И КоличествоСерий = 0 Тогда
			Продолжить
		КонецЕсли;
		
		ОстатокЗапасов = НайденныеОстаткиЗапасы[0];
		
		НоваяСтрокаЗапасы = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗапасы, ВыборкаЗапасы);
		
		Если ТипЗнч(НоваяСтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
			
			КоличествоВСтрокеЗапасов = ?(КоличествоСерий > 0, КоличествоСерий, НоваяСтрокаЗапасы.Количество);
			
			Если КоличествоВСтрокеЗапасов >= ОстатокЗапасов.Количество Тогда
				КоличествоВСтрокеЗапасов = ОстатокЗапасов.Количество;
				ОстатокЗапасов.Количество = 0;
			Иначе
				ОстатокЗапасов.Количество = ОстатокЗапасов.Количество - КоличествоВСтрокеЗапасов;
			КонецЕсли;
			
			НоваяСтрокаЗапасы.Количество = КоличествоВСтрокеЗапасов;
			
		Иначе
			
			КоличествоСтрокиВЕдиницахХранения = НоваяСтрокаЗапасы.Количество * НоваяСтрокаЗапасы.ЕдиницаИзмерения.Коэффициент;
			КоличествоВСтрокеЗапасов = ?(КоличествоСерий > 0, КоличествоСерий, КоличествоСтрокиВЕдиницахХранения);
			
			Если КоличествоВСтрокеЗапасов >= ОстатокЗапасов.Количество Тогда
				КоличествоВСтрокеЗапасов = ОстатокЗапасов.Количество;
				ОстатокЗапасов.Количество = 0;
			Иначе
				ОстатокЗапасов.Количество = ОстатокЗапасов.Количество - КоличествоВСтрокеЗапасов;
			КонецЕсли;
			
			НоваяСтрокаЗапасы.Количество = КоличествоВСтрокеЗапасов/ НоваяСтрокаЗапасы.ЕдиницаИзмерения.Коэффициент;;
			
		КонецЕсли;
		
		Если СерииНоменклатурыУНФ.ИспользоватьСерииНоменклатурыОстатки() = Истина Тогда
			НоваяСтрокаЗапасы.СерииНоменклатуры = СерииНоменклатурыУНФ.ПредставлениеСерийНоменклатуры(СерииНоменклатурыЗапасы, НоваяСтрокаЗапасы.КлючСвязи)
		КонецЕсли;
		
		Если УчетГТД Тогда
			НоваяСтрокаЗапасы.СтранаПроисхождения = НоваяСтрокаЗапасы.Номенклатура.СтранаПроисхождения;
		КонецЕсли;
		
	КонецЦикла;
	
	СерииНоменклатурыУНФ.УдалитьСерииНоменклатурыВТабличнойЧастиВЗависимостиОтПолитики(ЭтотОбъект);
		
КонецПроцедуры

// Обработчик заполнения на основании складского ордера без учета остатков.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ПриходныйОрдер Или ДокументСсылка.РасходныйОрдер.
//	Приходный - Признак вида ордера.
//
Процедура ЗаполнитьПоСкладскомуОрдеруБезУчетаОстатков(ДанныеЗаполнения, Приходный = Истина) Экспорт
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Запасы Цикл
		
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		
		Если ПолучитьФункциональнуюОпцию("УчетГТД") Тогда
			
			НоваяСтрока.СтранаПроисхождения = НоваяСтрока.Номенклатура.СтранаПроисхождения;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СерииНоменклатурыУНФ.ЗаполнитьТЧСерииНоменклатурыПоКлючуСвязи(ЭтотОбъект, ДанныеЗаполнения,,, "СерииНоменклатурыЗапасы");
	СерииНоменклатурыУНФ.УдалитьСерииНоменклатурыВТабличнойЧастиВЗависимостиОтПолитики(ЭтотОбъект,,, "СерииНоменклатурыЗапасы");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Процедура - Проверка использования в продукции и материалах одинаковых запасов
//
// Параметры:
//  Отказ	 - 	Булево - Признак отказа проведения, устанавливается, если проверка не пройдена
//
Процедура ПроверитьТЧНаСовпадениеНоменклатуры(Отказ)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", Номенклатура);
	СтруктураПоиска.Вставить("Характеристика", Характеристика);
	СтруктураПоиска.Вставить("Партия", Партия);
	НайденныеСтроки = Запасы.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаТаблицы = НайденныеСтроки[0];
		ТекстСообщения = НСтр(
		"ru = 'В таблице товаров присутствует сам комплект. Такой режим комплектации
		|не поддерживается, он может приводить к ошибкам расчета фактической себестоимости
		|при закрытии месяца. Следует использовать дополнительные разрезы учета для разделения 
		|комплекта и комплектующих (характеристики, партии)'");
		КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", СтрокаТаблицы.НомерСтроки,
			"Номенклатура");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле);
	КонецЕсли; 
	
КонецПроцедуры

#Область ПроцедурыЗаполненияДокумента

Процедура ЗаполнениеОтветственныхЛиц()
	
	ПодписьКладовщика = СтруктурнаяЕдиница.ПодписьМОЛ;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти 

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли