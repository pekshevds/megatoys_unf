#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Контрагент)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
//@skip-warning
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Сервисные_Методы

// Для табличной части ДанныеКонтрагента заполняем пустые даты
// датами из расчетных документов
Процедура ЗаполнитьПустыеДатыДляКонтрагентаНаСервере(ДанныеКонтрагента) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьПустыеДатыДляКонтрагентаНаСервере()

// Устанавливает статус для массива документов
//
// Параметры:
//   МассивДокументов - Массив(ДокументСсылка.СверкаВзаиморасчетов) 	  - Массив документов для установки статуса
//   ЗначениеСтатуса  - ПеречислениеСсылка.СтатусыСверокВзаиморасчетов - Устанавливаемый статус
//
// Возвращаемое значение: Булево - Результат выполнения функции
//
Функция УстановитьСтатус(МассивДокументов, ЗначениеСтатуса) Экспорт

	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Таблица.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СверкаВзаиморасчетов КАК Таблица
		|ГДЕ
		|	Таблица.Статус <> &Статус
		|	И Таблица.Ссылка В(&МассивДокументов)
		|	И НЕ Таблица.ПометкаУдаления
		|");
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("Статус", ЗначениеСтатуса);
	Выборка = Запрос.Выполнить().Выбрать();

	КоличествоОбработанных = 0;

	НачатьТранзакцию();
	Пока Выборка.Следующий() Цикл

		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение

			ТекстОшибки = НСтр("ru='Не удалось заблокировать %Документ%. %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%",       Выборка.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение ТекстОшибки;

		КонецПопытки;

		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокОбъект.Статус = ЗначениеСтатуса;
		
		Попытка
		
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			КоличествоОбработанных = КоличествоОбработанных + 1;
			
		Исключение
		
			ТекстОшибки = НСтр("ru='Не удалось записать %Документ%. %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%",       Выборка.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение ТекстОшибки;

		КонецПопытки;

	КонецЦикла;

	ЗафиксироватьТранзакцию();

	Возврат КоличествоОбработанных;

КонецФункции // УстановитьСтатус()

#КонецОбласти

#Область Описания_и_представления_реквизитов

// Процедура обрабатывает данные запроса и заполняет строку (строки) документа
//
// Параметры:
//	ВыборкаДанныхИзЗапроса - данные запроса для переноса в табличную часть
//	СтруктураДанныхДокумента - структура данных из документа сверки, по которой формируем запрос
//
//	СтруктураПолейТекущейСтрокиДокумента - структура полей текущей строки документа СверкиВзаиморасчетов
//											Если выбран документ ВводОстатков, то возможно добавление срок
//
Функция ПолучитьДанныеСтрокиПоОрганизации(ДанныеДокумента, Выборка) Экспорт
	
	ДанныеСтроки = Новый Структура;
	
	ДанныеСтроки.Вставить("Договор", 		Выборка.Договор);
	ДанныеСтроки.Вставить("ВалютаДоговора", Выборка.ВалютаДоговора);
	ДанныеСтроки.Вставить("РасчетныйДокумент", Выборка.РасчетныйДокумент);
	ДанныеСтроки.Вставить("НомерДокумента", Выборка.НомерДокумента);
	ДанныеСтроки.Вставить("ДатаДокумента",	Выборка.Период);
	
	ВалютаУчета = УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета();
	
	НомерДокумента = ДанныеСтроки.НомерДокумента;
	ДатаДокумента = ДанныеСтроки.ДатаДокумента;
	
	Если ЗначениеЗаполнено(Выборка.РасчетныйДокумент) Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("НомерВходящегоДокумента", Выборка.РасчетныйДокумент.Метаданные()) Тогда
			
			ВходящиеНомерИДата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.РасчетныйДокумент,
				"ДатаВходящегоДокумента, НомерВходящегоДокумента");
			
			Если ЗначениеЗаполнено(ВходящиеНомерИДата.ДатаВходящегоДокумента) Тогда
				
				ДатаДокумента = ВходящиеНомерИДата.ДатаВходящегоДокумента;
				НомерДокумента = ВходящиеНомерИДата.НомерВходящегоДокумента;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеДокумента = ОписаниеРасчетногоДокументаОрганизации(Выборка.Регистратор, ДанныеДокумента,
		НомерДокумента, ДатаДокумента);
	ДанныеСтроки.Вставить("ОписаниеДокумента", ОписаниеДокумента);
	
	СуммаДокумента = 0;
	Сумма = 0;
	СуммаРег = 0;
	
	Если Выборка.СуммаВалОборот > 0 Тогда 
		
		СуммаДокумента = Выборка.СуммаВалОборот;
		Сумма 		   = Выборка.СуммаОборот;
		КлючСтруктуры  = "СуммаДолгКонтрагента";
		
	ИначеЕсли Выборка.СуммаВалОборот < 0 Тогда
		
		СуммаДокумента = - Выборка.СуммаВалОборот;
		Сумма 		   = - Выборка.СуммаОборот;
		КлючСтруктуры  = "СуммаДолгОрганизации";
		
	Иначе //СуммаВал = 0 - это закрытие месяца
		
		КлючСтруктуры  = ?(Выборка.СуммаОборот > 0, "СуммаДолгКонтрагента", "СуммаДолгОрганизации");
		СуммаДокумента =  ?(Выборка.СуммаОборот > 0, Выборка.СуммаОборот, - Выборка.СуммаОборот);
		
		Если ДанныеДокумента.ВалютаДокумента <> ВалютаУчета Тогда
			СуммаДокумента = РаботаСКурсамиВалют.ПересчитатьВВалюту(СуммаДокумента, ВалютаУчета, ДанныеДокумента.ВалютаДокумента, Выборка.Период);
		КонецЕсли;
		
		ДанныеСтроки.Вставить(КлючСтруктуры, СуммаДокумента);
		
		Возврат ДанныеСтроки;
		
	КонецЕсли;
	
	Если Выборка.ВалютаДоговора <> ДанныеДокумента.ВалютаДокумента Тогда
		Если ДанныеДокумента.ВалютаДокумента = ВалютаУчета И НЕ Выборка.ФормироватьКурсовуюРазницу Тогда
			СуммаДокумента = Сумма;
		Иначе
			Если РасчетныйДокументВВалютеУчета(Выборка.РасчетныйДокумент) И ДанныеДокумента.ВалютаДокумента = ВалютаУчета Тогда
				СуммаДокумента = Выборка.СуммаПлатежа;
			Иначе
				СуммаДокумента = РаботаСКурсамиВалют.ПересчитатьВВалюту(СуммаДокумента, Выборка.ВалютаДоговора, 
					ДанныеДокумента.ВалютаДокумента, Выборка.Период);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеСтроки.Вставить(КлючСтруктуры, СуммаДокумента);
	
	ДанныеСтроки.Вставить("ДатаОперации", ДанныеСтроки.ДатаДокумента); 
	
	НаименованиеОперации = НСтр("ru='Реализация'");
	Если ЗначениеЗаполнено(Выборка.РасчетныйДокумент) Тогда
		
		НаименованиеОперации = Выборка.РасчетныйДокумент.Метаданные().Синоним;
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидОперации", Выборка.РасчетныйДокумент.Метаданные()) Тогда
			ВидОперацииДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.РасчетныйДокумент, "ВидОперации");
			Если ЗначениеЗаполнено(ВидОперацииДокумента) Тогда
				НаименованиеОперации = НаименованиеОперации + " (" + Строка(ВидОперацииДокумента) + ")";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	ДанныеСтроки.Вставить("НаименованиеОперации", НаименованиеОперации);
	
	Возврат ДанныеСтроки;
	
КонецФункции //ЗаполнитьСтрокуДокументаОрганизации()

// Процедура обрабатывает данные исходной строки и заполняет строку с курсовой разницей документа
//
// Параметры:
//	СтруктураДанныхДокумента - структура данных из документа сверки, по которой формируем запрос
//	ДанныеСтрокиДокумента - структура данных строки документа, по которому формируется курсовая разница
//	Выборка - данные запроса для переноса в табличную часть
//
//	СтруктураПолейТекущейСтрокиДокумента - структура полей текущей строки документа СверкиВзаиморасчетов
//
Функция ПолучитьКурсовуюРазницуДокумента(ДанныеДокумента, ДанныеСтрокиДокумента, Выборка)
	
	Если ДанныеСтрокиДокумента.ВалютаДоговора = ДанныеДокумента.ВалютаДокумента 
		ИЛИ ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ЗакрытиеМесяца") ИЛИ НЕ Выборка.ФормироватьКурсовуюРазницу Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВалютаУчета = УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета();
	НациональнаяВалюта = УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту();
	
	ДанныеСтроки = Новый Структура;
	
	ДанныеСтроки.Вставить("Договор", 		ДанныеСтрокиДокумента.Договор);
	ДанныеСтроки.Вставить("ВалютаДоговора", ДанныеСтрокиДокумента.ВалютаДоговора);
	ДанныеСтроки.Вставить("РасчетныйДокумент", ДанныеСтрокиДокумента.РасчетныйДокумент);
	ДанныеСтроки.Вставить("НомерДокумента", ДанныеСтрокиДокумента.НомерДокумента);
	ДанныеСтроки.Вставить("ДатаДокумента",	ДанныеСтрокиДокумента.ДатаДокумента);
	ДанныеСтроки.Вставить("РасчетныйДокумент",	ДанныеСтрокиДокумента.РасчетныйДокумент);
	
	ОписаниеДокумента = СтрШаблон(НСтр("ru='Курсовые разницы (%1)'"), Формат(ДанныеСтрокиДокумента.ДатаДокумента, "ДЛФ=D"));
	ДанныеСтроки.Вставить("ОписаниеДокумента", ОписаниеДокумента);
	
	КурсоваяРазница = 0;
	СуммаДокумента = 0;
	Сумма = 0;
	СуммаРег = 0;
	
	Если Выборка.СуммаВалОборот > 0 Тогда 
		
		СуммаДокумента = Выборка.СуммаВалОборот;
		Сумма 		   = Выборка.СуммаОборот;
		СуммаРег 	   = Выборка.СуммаРегОборот;
		КлючСтруктуры  = "СуммаДолгКонтрагента";
		
	Иначе
		
		СуммаДокумента = - Выборка.СуммаВалОборот;
		Сумма 		   = - Выборка.СуммаОборот;
		СуммаРег	   = - Выборка.СуммаРегОборот;
		КлючСтруктуры  = "СуммаДолгОрганизации";
		
	КонецЕсли;
	
	СуммаВРегистре = ?(ВалютаУчета = НациональнаяВалюта, Сумма, СуммаРег);
	
	Если РасчетныйДокументВВалютеУчета(ДанныеСтрокиДокумента.РасчетныйДокумент) И ДанныеДокумента.ВалютаДокумента = ВалютаУчета Тогда
		СуммаПоКурсу = ДанныеСтрокиДокумента[КлючСтруктуры];
	Иначе
		СуммаПоКурсу = РаботаСКурсамиВалют.ПересчитатьВВалюту(СуммаДокумента, Выборка.ВалютаДоговора, ДанныеДокумента.ВалютаДокумента, Выборка.Период);
	КонецЕсли;
	
	Если СуммаВРегистре > СуммаПоКурсу Тогда
		КурсоваяРазница = СуммаВРегистре - СуммаПоКурсу;
	Иначе
		КурсоваяРазница = СуммаПоКурсу - СуммаВРегистре;
		Если КлючСтруктуры  = "СуммаДолгОрганизации" Тогда
			КлючСтруктуры  = "СуммаДолгКонтрагента";
		Иначе
			КлючСтруктуры  = "СуммаДолгОрганизации"
		КонецЕсли;
	КонецЕсли;
	
	Если КурсоваяРазница < 0.01 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеСтроки.Вставить(КлючСтруктуры, КурсоваяРазница);
	
	Возврат ДанныеСтроки;
	
КонецФункции //ЗаполнитьСтрокуДокументаОрганизации()

// Возвращает перечень документов с их синонимами для акта сверки взаиморасчетов
//
Функция ПолучитьПредставленияДокументовДляКонтрагентов()
	
	ВидыДокументовКонтрагента = Новый Структура;
	
	ВидыДокументовКонтрагента.Вставить("АвансовыйОтчет",					НСтр("ru='Приходный кассовый ордер'"));
	ВидыДокументовКонтрагента.Вставить("АктВыполненныхРабот",				НСтр("ru='Поступление (товаров, услуг)'"));
	ВидыДокументовКонтрагента.Вставить("Взаимозачет",						НСтр("ru='Взаимозачет задолженности'"));
	ВидыДокументовКонтрагента.Вставить("ЗаказПокупателя",					НСтр("ru='Заказ'"));
	ВидыДокументовКонтрагента.Вставить("ЗаказПоставщику", 					НСтр("ru='Заказ'"));
	ВидыДокументовКонтрагента.Вставить("КорректировкаРегистров",			НСтр("ru='Корректировка задолженности'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомиссионера",					НСтр("ru='Отчет комитенту'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитенту",					НСтр("ru='Отчет комиссионера'"));
	ВидыДокументовКонтрагента.Вставить("ПоступлениеНаСчет", 				НСтр("ru='Расход со счета'"));
	ВидыДокументовКонтрагента.Вставить("ПоступлениеВКассу",					НСтр("ru='Расходный кассовый ордер'"));
	ВидыДокументовКонтрагента.Вставить("РасходСоСчета",						НСтр("ru='Поступление на счет'"));
	ВидыДокументовКонтрагента.Вставить("РасходИзКассы",						НСтр("ru='Приходный кассовый ордер'"));
	ВидыДокументовКонтрагента.Вставить("ПриходнаяНакладная",				НСтр("ru='Реализация (товаров, услуг)'"));
	ВидыДокументовКонтрагента.Вставить("РасходнаяНакладная", 				НСтр("ru='Поступление (товаров, услуг)'"));
	ВидыДокументовКонтрагента.Вставить("СчетНаОплату", 						НСтр("ru='Счет на оплату'"));
	ВидыДокументовКонтрагента.Вставить("СчетФактура", 						НСтр("ru='Счет-фактура (полученный)'"));
	ВидыДокументовКонтрагента.Вставить("СчетФактураПолученный", 			НСтр("ru='Счет-фактура (выданный)'"));
	
	Возврат ВидыДокументовКонтрагента;
	
КонецФункции // ПолучитьПредставленияДокументов()

// Получает входящий номер по документу контрагента,
// если номер получить не возможно, то возвращает пустую строку
Функция ПолучитьВходНомер(ДокументСсылка, РасшифровкаАО = Неопределено) Экспорт
	
	НомерВходящегоДокумента = "";
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда 
		
		Возврат НомерВходящегоДокумента;
		
	КонецЕсли;
	
	// Список возможных расчетных документов в описании
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АвансовыйОтчет") 
		И ТипЗнч(РасшифровкаАО) = Тип("Структура") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Договор", РасшифровкаАО.Договор);
		Запрос.УстановитьПараметр("СуммаПлатежа", РасшифровкаАО.СуммаПлатежа);
		Запрос.Текст = "ВЫБРАТЬ АО.НомерВходящегоДокумента ИЗ Документ.АвансовыйОтчет.Оплаты КАК АО ГДЕ АО.ПризнакАванса И АО.Договор = &Договор И АО.СуммаПлатежа = &СуммаПлатежа";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			НомерВходящегоДокумента = Выборка.НомерВходящегоДокумента;
			
		КонецЕсли;
		
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("НомерВходящегоДокумента", ДокументСсылка.Метаданные()) Тогда
		
		НомерВходящегоДокумента = ДокументСсылка.НомерВходящегоДокумента;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НомерВходящегоДокумента) Тогда
		НомерВходящегоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДокументСсылка.Номер, Истина, Истина);
	КонецЕсли;
	
	Возврат НомерВходящегоДокумента;
	
КонецФункции //ПолучитьВходНомер()

// Получает входящую дату по документу контрагента,
// если дату получить не возможно, то возвращает пустую дату
Функция ПолучитьВходДату(ДокументСсылка, РасшифровкаАО = Неопределено) Экспорт
	
	ДатаВходящегоДокумента = Дата(01, 01, 01);
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда 
		
		Возврат ДатаВходящегоДокумента;
		
	КонецЕсли;
	
	// Список возможных расчетных документов в описании к функции ПолучитьВходНомер()
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АвансовыйОтчет") 
		И ТипЗнч(РасшифровкаАО) = Тип("Структура") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Договор", РасшифровкаАО.Договор);
		Запрос.УстановитьПараметр("СуммаПлатежа", РасшифровкаАО.СуммаПлатежа);
		Запрос.Текст = "ВЫБРАТЬ АО.ДатаВходящегоДокумента ИЗ Документ.АвансовыйОтчет.Оплаты КАК АО ГДЕ АО.ПризнакАванса И АО.Договор = &Договор И АО.СуммаПлатежа = &СуммаПлатежа";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			ДатаВходящегоДокумента = Выборка.ДатаВходящегоДокумента;
			
		КонецЕсли;
		
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("ДатаВходящегоДокумента", ДокументСсылка.Метаданные()) Тогда
		
		ДатаВходящегоДокумента = ДокументСсылка.ДатаВходящегоДокумента;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаВходящегоДокумента) Тогда
		ДатаВходящегоДокумента = ДокументСсылка.Дата;
	КонецЕсли;
	
	Возврат ДатаВходящегоДокумента;
	
КонецФункции //ПолучитьВходДату()

// Возвращает данные актов сверки взаиморасчетов
//
// Параметры:
//    ДокументПечати - ДокументСсылка.СверкаВзаиморасчетов - Документ для выборки
//
// Возвращаемое значение: Выборка из результата запроса
//
Функция ДанныеДокументовПечати(ДокументПечати, ИспользоватьФаксимиле) Экспорт
	
	ЗапросДанныеДокумента = Новый Запрос;
	ЗапросДанныеДокумента.УстановитьПараметр("ДокументПечати", ДокументПечати);
	ЗапросДанныеДокумента.УстановитьПараметр("ИспользоватьФаксимиле", ИспользоватьФаксимиле);
	
	ЗапросДанныеДокумента.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК ДокументСсылка,
	|	ДанныеДокумента.ВерсияДанных КАК ВерсияДанных,
	|	ДанныеДокумента.ПометкаУдаления КАК ПометкаУдаления,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Организация.ФайлФаксимильнаяПечать КАК ФаксимилеПечати,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.НачалоПериода КАК НачалоПериода,
	|	ДанныеДокумента.КонецПериода КАК КонецПериода,
	|	ДанныеДокумента.Статус КАК Статус,
	|	ВЫБОР
	|		КОГДА &ИспользоватьФаксимиле = ИСТИНА
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДаНет.Да)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ДаНет.Нет)
	|	КОНЕЦ КАК ИспользоватьФаксимиле,
	|	ДанныеДокумента.ПодписьОтветственного.Должность КАК ДолжностьОтветственного,
	|	ДанныеДокумента.ПодписьОтветственного.РасшифровкаПодписи КАК РасшифровкаПодписиОтветственного,
	|	ДанныеДокумента.ПодписьОтветственного.Факсимиле КАК ФаксимилеПодписиОтветственного,
	|	ДанныеДокумента.Комментарий КАК Комментарий,
	|	ДанныеДокумента.ПредставительКонтрагента.Наименование КАК РасшифровкаПодписиКонтрагента,
	|	СвязиКонтрагентКонтакт.Должность КАК ДолжностьПредставителяКонтрагента,
	|	ДанныеДокумента.Автор КАК Автор,
	|	ДанныеДокумента.Представление КАК Представление,
	|	ДанныеДокумента.МоментВремени КАК МоментВремени,
	|	ДанныеДокумента.СальдоНачалоПериода КАК СальдоНачалоПериода,
	|	ДанныеДокумента.СортироватьПоДоговорам КАК СортироватьПоДоговорам,
	|	ДанныеДокумента.ОписаниеДокумента КАК ОписаниеДокумента,
	|	ДанныеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеДокумента.Организация.Префикс КАК Префикс,
	|	ДанныеДокумента.ДанныеОрганизации.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ДатаДокумента КАК ДатаДокумента,
	|		НомерДокумента КАК НомерДокумента,
	|		РасчетныйДокумент КАК РасчетныйДокумент,
	|		Договор КАК Договор,
	|		ОписаниеДокумента КАК ОписаниеДокументаОрганизации,
	|		СуммаДолгОрганизации КАК СуммаДолгОрганизации,
	|		СуммаДолгКонтрагента КАК СуммаДолгКонтрагента,
	|		ВалютаДоговора КАК ВалютаДоговора
	|	) КАК ДанныеОрганизации,
	|	ДанныеДокумента.ДанныеКонтрагента.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Договор КАК Договор,
	|		ВхДатаДокумента КАК ВхДатаДокумента,
	|		ВхНомерДокумента КАК ВхНомерДокумента,
	|		РасчетныйДокумент КАК РасчетныйДокумент,
	|		ОписаниеДокумента КАК ОписаниеДокументаКонтрагента,
	|		ВалютаДокумента КАК ВалютаДокумента,
	|		СуммаДолгОрганизации КАК СуммаДолгОрганизации,
	|		СуммаДолгКонтрагента КАК СуммаДолгКонтрагента
	|	) КАК ДанныеКонтрагента,
	|	ДанныеДокумента.ДоговорыКонтрагентов.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Отметка КАК Отметка,
	|		Договор КАК Договор
	|	) КАК ДоговорыКонтрагентов
	|ИЗ
	|	Документ.СверкаВзаиморасчетов КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних КАК СвязиКонтрагентКонтакт
	|		ПО (СвязиКонтрагентКонтакт.Контакт = ДанныеДокумента.ПредставительКонтрагента)
	|			И ДанныеДокумента.Контрагент = СвязиКонтрагентКонтакт.Контрагент
	|ГДЕ
	|	ДанныеДокумента.Ссылка В(&ДокументПечати)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Номер";
	
	Возврат ЗапросДанныеДокумента.Выполнить();
	
КонецФункции // ДанныеДокументовПечати()

// Возвращает представление расчетного документа для акта сверки взаиморасчетов.
//
// Параметры:
//    ДокументСсылка 		- ДокументСсылка - Ссылка на расчетный документ;
//    Номер			 		- Строка		 - Номер расчетного документа
//    Дата			 		- Дата			 - Дата расчетного документа
//
// Возвращаемое значение: Строка.
//
Функция ОписаниеРасчетногоДокументаОрганизации(ДокументСсылка, ДанныеДокумента, НомерДокумента, ДатаДокумента) Экспорт
	
	Если ДокументСсылка = Неопределено Тогда
		
		СтрокаОписания =  НСтр("ru = 'Расчетный документ № %1 от %2 г.'");
		СтрокаОписания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаОписания, 
			?(ПустаяСтрока(НомерДокумента), НСтр("ru = '_______'"), ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерДокумента, Ложь, Истина)), 
			?(ЗначениеЗаполнено(ДатаДокумента), Формат(ДатаДокумента, "ДЛФ=D"), НСтр("ru = '___.___.________'")));
		
		Возврат СтрокаОписания;
		
	КонецЕсли;
	
	// Описание документа
	ОписаниеДокумента = "";
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗакрытиеМесяца") Тогда
		Возврат СтрШаблон(НСтр("ru='Курсовые разницы (%1)'"), Формат(ДатаДокумента, "ДЛФ=D"));
	КонецЕсли;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказПокупателя") 
		И ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		ОписаниеДокумента = НСтр("ru = 'Заказ-наряд'");
		
	Иначе
		
		ОписаниеДокумента = Строка(ТипЗнч(ДокументСсылка));
		
	КонецЕсли;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
		Получатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ОрганизацияПолучатель");
		Если ДанныеДокумента.Организация = Получатель Тогда
			ОписаниеДокумента = НСтр("ru='Поступление (товаров, услуг)'");
		Иначе
			ОписаниеДокумента = НСтр("ru='Реализация (товаров, услуг)'");
		КонецЕсли;
	КонецЕсли;
	
	// Добавка к описанию
	ДобавитьКОписанию = "";
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриходнаяНакладная") 
		И (ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера
			ИЛИ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя) Тогда
		
		ДобавитьКОписанию = " (возврат от покупателя)";
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходнаяНакладная") 
		И (ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту
			ИЛИ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику) Тогда
		
		ДобавитьКОписанию = " (возврат поставщику)";
		
	КонецЕсли;
	
	НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(ДатаДокумента, НомерДокумента, Неопределено);
	ДатаДокументаСтрокой = Формат(ДатаДокумента, "ДЛФ=D");
	
	ПредставлениеСчетаФактуры = "";
	Если ДанныеДокумента.УказатьСчетФактуру Тогда
		
		ПредставлениеСчетаФактуры = ОписаниеСчетаФактуры(ДокументСсылка);
		
	КонецЕсли;
	
	УказатьПредставлениеОрганизации = "";
	Если ДанныеДокумента.ОрганизациюВПредставление Тогда
		
		УказатьПредставлениеОрганизации = НСтр("ru = ' ('") + ДокументСсылка.Организация.НаименованиеПолное + НСтр("ru = ')'");
		
	КонецЕсли;
	
	Возврат ОписаниеДокумента + ДобавитьКОписанию 
		+ НСтр("ru=' № '") + НомерДокумента 
		+ НСтр("ru=' от '") + ДатаДокументаСтрокой + НСтр("ru=' г.'") + ПредставлениеСчетаФактуры + УказатьПредставлениеОрганизации;
	
КонецФункции // ОписаниеРасчетногоДокументаОрганизации()

// Возвращает представление расчетного документа для акта сверки взаиморасчетов.
//
// Параметры:
//    ДокументСсылка 				- ДокументСсылка - Ссылка на расчетный документ
//    ОписаниеДокументаОрганизации	- Строка		 - Описание документа организации
//    НомерДокумента			 	- Строка		 - Номер расчетного документа
//    ДатаДокумента			 		- Дата			 - Дата расчетного документа
//    ОрганизациюВПредставление		- Булево		 - Признак указания Организации в представлении
//    УказатьСчетФактуру	 		- Булево		 - Признак указания С/Ф
//    Организация			 		- СправочникСсылка.Организации - Организация
//
// Возвращаемое значение:
//	  Строка - Описание документа
//
Функция ОписаниеРасчетногоДокументаКонтрагента(ДокументСсылка, Знач ОписаниеДокументаОрганизации, Знач НомерДокумента,
		Знач ДатаДокумента, ОрганизациюВПредставление = Ложь, УказатьСчетФактуру = Ложь, Организация = Неопределено) Экспорт
		
	// Номер и дату обработаем сразу, так как понадобиться и для пустой ссылки
	НомерДокумента	= ?(ПустаяСтрока(НомерДокумента), НСтр("ru = '_______'"),
		ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерДокумента, Ложь, Истина));
	ДатаДокумента	= ?(ЗначениеЗаполнено(ДатаДокумента), Формат(ДатаДокумента, "ДЛФ=D"), НСтр("ru = '___.___._______'"));
	
	Если ДокументСсылка = Неопределено Тогда
		
		СтрокаОписания = НСтр("ru = 'Расчетный документ № %1 от %2 г.'");
		СтрокаОписания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаОписания, НомерДокумента, ДатаДокумента);
		
		Возврат СтрокаОписания;
		
	КонецЕсли;
	
	// Описание документа
	ОписаниеДокумента =
		ОписаниеРасчетногоДокументаКонтрагентаФрагмент(ДокументСсылка, ОписаниеДокументаОрганизации, Организация);
	
	// Добавка к описанию
	ДобавитьКОписанию = "";
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриходнаяНакладная")
		И (ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера
			ИЛИ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя) Тогда
		
		ДобавитьКОписанию = " (возврат поставщику)";
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходнаяНакладная")
		И (ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту
			ИЛИ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику) Тогда
		
		ДобавитьКОписанию = " (возврат от покупателя)";
		
	КонецЕсли;
	
	ПредставлениеСчетаФактуры = "";
	Если УказатьСчетФактуру Тогда
		
		ПредставлениеСчетаФактуры = ОписаниеСчетаФактуры(ДокументСсылка);
		
	КонецЕсли;
	
	// Организация, когда включена опция "Учет по компании".
	УказатьПредставлениеОрганизации = "";
	Если ОрганизациюВПредставление Тогда
		
		УказатьПредставлениеОрганизации = НСтр("ru = ' ('") + ДокументСсылка.Организация.НаименованиеПолное + НСтр("ru = ')'");
		
	КонецЕсли;
	
	Возврат ОписаниеДокумента + ДобавитьКОписанию 
		+ НСтр("ru=' № '") + НомерДокумента 
		+ НСтр("ru=' от '") + ДатаДокумента + НСтр("ru=' г.'") + ПредставлениеСчетаФактуры + УказатьПредставлениеОрганизации;
	
КонецФункции

Функция ОписаниеРасчетногоДокументаКонтрагентаФрагмент(ДокументСсылка, ОписаниеДокументаОрганизации, Организация)
	
	ОписаниеДокумента = "";
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказПокупателя") 
		И ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		// Предполагаем, что документ заказ-наряд у контрагента может быть отражен как Поступление (товаров, услуг),
		// Дополнительные расходы. Учитывая, что последнее менее вероятно, остановимся на первом случае
		ОписаниеДокумента = НСтр("ru = 'Поступление (товаров, услуг)'");
		
	Иначе
		
		ПредставленияДокументовКонтрагента = ПолучитьПредставленияДокументовДляКонтрагентов();
		ПредставленияДокументовКонтрагента.Свойство(ДокументСсылка.Метаданные().Имя, ОписаниеДокумента);
		
	КонецЕсли;
	
	// Корректировки поступления и реализации обрабатываются по отдельному правилу
	ЭтоКорректировка = (Лев(ОписаниеДокументаОрганизации, 13) = НСтр("ru = 'Корректировка'"));
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриходнаяНакладная") И ЭтоКорректировка Тогда
		ОписаниеДокумента = НСтр("ru = 'Корректировка реализации (товаров, услуг)'");		
	КонецЕсли;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходнаяНакладная") И ЭтоКорректировка Тогда
		ОписаниеДокумента = НСтр("ru = 'Корректировка поступления (товаров, услуг)'");		
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеДокумента) Тогда
		
		ОписаниеДокумента = НСтр("ru = 'Расчетный документ'");
		
	КонецЕсли;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
		Получатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ОрганизацияПолучатель");
		Если Организация = Получатель Тогда
			ОписаниеДокумента = НСтр("ru='Реализация (товаров, услуг)'");
		Иначе
			ОписаниеДокумента = НСтр("ru='Поступление (товаров, услуг)'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОписаниеДокумента;

КонецФункции // ОписаниеРасчетногоДокументаКонтрагента()

Функция ОписаниеСчетаФактуры(ДокументСсылка) Экспорт
	
	ПредставлениеСчетаФактуры = "";
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		
		Возврат ПредставлениеСчетаФактуры;
		
	КонецЕсли;
	
	МассивОснованийВходящегоСФ = Новый Массив;
	МассивОснованийВходящегоСФ.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
	МассивОснованийВходящегоСФ.Добавить(Тип("ДокументСсылка.ДополнительныеРасходы"));
	МассивОснованийВходящегоСФ.Добавить(Тип("ДокументСсылка.ОтчетКомиссионера"));
	МассивОснованийВходящегоСФ.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
	МассивОснованийВходящегоСФ.Добавить(Тип("ДокументСсылка.ОтчетПереработчика"));
	МассивОснованийВходящегоСФ.Добавить(Тип("ДокументСсылка.КорректировкаПоступления"));
	
	ЭтоВходящийДокумент = (МассивОснованийВходящегоСФ.Найти(ТипЗнч(ДокументСсылка)) <> Неопределено);
	ОписаниеСчетФактуры = СчетаФактурыУНФ.ПолучитьПодчиненныйСчетФактуру(ДокументСсылка, ЭтоВходящийДокумент);
	
	Если ОписаниеСчетФактуры = Неопределено Тогда
		
		ПредставлениеСчетаФактуры = ""; 
		
	Иначе
		
		НомерДокументаСФ = "______";
		ДатаДокументаСФ = "__.__.__г.";
		Если ЗначениеЗаполнено(ОписаниеСчетФактуры.Ссылка) Тогда
			
			НомерДокументаСФ = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(ОписаниеСчетФактуры.Дата, ОписаниеСчетФактуры.Номер, Неопределено);
			ДатаДокументаСФ = Формат(ОписаниеСчетФактуры.Дата, "ДЛФ=D");
			
		КонецЕсли;
		
		ПредставлениеСчетаФактуры = СтрШаблон(НСтр("ru = ' (СФ № %1 от %2)'"), НомерДокументаСФ, ДатаДокументаСФ);
		
	КонецЕсли;
	
	Возврат ПредставлениеСчетаФактуры;
	
КонецФункции

#КонецОбласти

#Область Служебные

// Процедура заполняет табличную часть "Данные организации".
//
// Параметры:
//	ДанныеДокумента	 - Структура					- Данные акта сверки взаиморасчетов;
//	ТабличнаяЧасть	 - Табличная часть документа	- Табличная часть к заполнению.
//
Процедура ЗаполнитьДанныеПоОрганизации(ДанныеДокумента, ТабличнаяЧасть) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДокумента.Вставить("РассчитыватьКурсовыеРазницы", ПолучитьНеобходимостьРасчетаКурсовыхРазниц(ДанныеДокумента));
	
	ТабличнаяЧасть.Очистить();
	РезультатЗапроса = ПолучитьВыборкуДанныхОрганизации(ДанныеДокумента);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураДанных = ПолучитьДанныеСтрокиПоОрганизации(ДанныеДокумента, Выборка);
		
		Если 	(СтруктураДанных.Свойство("СуммаДолгКонтрагента") И СтруктураДанных.СуммаДолгКонтрагента <> 0)
			ИЛИ (СтруктураДанных.Свойство("СуммаДолгОрганизации") И СтруктураДанных.СуммаДолгОрганизации <> 0) Тогда
			
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураДанных);
			
		КонецЕсли;
		
		Если ДанныеДокумента.РассчитыватьКурсовыеРазницы Тогда
			СтруктураДанных = ПолучитьКурсовуюРазницуДокумента(ДанныеДокумента, СтруктураДанных, Выборка);
			Если СтруктураДанных <> Неопределено Тогда
				НоваяСтрока = ТабличнаяЧасть.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураДанных);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // ЗаполнитьДанныеКонтрагента()

// Процедура заполняет табличную часть "Данные организации".
//
Процедура ЗаполнитьСведенияКонтрагентаПоДаннымОрганизации(ДанныеОрганизации, ДанныеКонтрагента, ОрганизациюВПредставление = Ложь, УказатьСчетФактуру = Ложь, Организация = Неопределено) Экспорт
	
	ДанныеКонтрагента.Очистить();
	Для каждого СтрокаОрганизации Из ДанныеОрганизации Цикл
		
		СтрокаКонтрагента = ДанныеКонтрагента.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКонтрагента, СтрокаОрганизации, "РасчетныйДокумент, Договор");
		СтрокаКонтрагента.ВалютаДокумента = СтрокаОрганизации.ВалютаДоговора;
		
		РасшифровкаАО = Неопределено;
		Если ТипЗнч(СтрокаОрганизации.РасчетныйДокумент) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			
			РасшифровкаАО = Новый Структура;
			РасшифровкаАО.Вставить("Договор", СтрокаОрганизации.Договор);
			РасшифровкаАО.Вставить("СуммаПлатежа", СтрокаОрганизации.СуммаДолгКонтрагента);
			
		КонецЕсли;
		
		СтрокаКонтрагента.ВхНомерДокумента = ПолучитьВходНомер(СтрокаОрганизации.РасчетныйДокумент, РасшифровкаАО);
		СтрокаКонтрагента.ВхДатаДокумента = ПолучитьВходДату(СтрокаОрганизации.РасчетныйДокумент, РасшифровкаАО);
		
		СтрокаКонтрагента.ОписаниеДокумента = ОписаниеРасчетногоДокументаКонтрагента(СтрокаОрганизации.РасчетныйДокумент,
			СтрокаОрганизации.ОписаниеДокумента, СтрокаКонтрагента.ВхНомерДокумента, СтрокаКонтрагента.ВхДатаДокумента,
			ОрганизациюВПредставление, УказатьСчетФактуру, Организация);
		
		СтрокаКонтрагента.СуммаДолгОрганизации = СтрокаОрганизации.СуммаДолгКонтрагента;
		СтрокаКонтрагента.СуммаДолгКонтрагента = СтрокаОрганизации.СуммаДолгОрганизации;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСведенияКонтрагентаПоДаннымОрганизации()

// Функция возвращает признак необходимости расчета курсовых разниц.
//
Функция ПолучитьНеобходимостьРасчетаКурсовыхРазниц(ДанныеДокумента)
	
	РассчитыватьКурсовыеРазницы = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеКонстанты("ФункциональнаяУчетВалютныхОпераций");
	
	Если РассчитыватьКурсовыеРазницы Тогда
		Запрос = Новый Запрос();
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка В(&ДоговорыКонтрагентов)
		|	И ДоговорыКонтрагентов.ВалютаРасчетов <> &ВалютаДокумента";
		
		Запрос.УстановитьПараметр("ВалютаДокумента", ДанныеДокумента.ВалютаДокумента);
		Запрос.УстановитьПараметр("ДоговорыКонтрагентов", ДанныеДокумента.ДоговорыКонтрагентов.ВыгрузитьКолонку("Договор"));
		РассчитыватьКурсовыеРазницы = НЕ Запрос.Выполнить().Пустой();
	КонецЕсли;
	
	Если РассчитыватьКурсовыеРазницы Тогда
		ЧастотаРасчетаКурсовыхРазниц = Константы.ЧастотаРасчетаКурсовыхРазниц.Получить();
		Если ЧастотаРасчетаКурсовыхРазниц = Перечисления.ЧастотаРасчетаКурсовыхРазниц.ВМоментВыполненияОпераций Тогда
			РассчитыватьКурсовыеРазницы = Истина;
		Иначе
			РассчитыватьКурсовыеРазницы = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РассчитыватьКурсовыеРазницы;
	
КонецФункции

Функция РасчетныйДокументВВалютеУчета(РасчетныйДокумент)
	
	ВалютаУчета = УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета();
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДенежныхСредств", РасчетныйДокумент.Метаданные()) Тогда
		ВалютаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РасчетныйДокумент, "ВалютаДенежныхСредств");
		Возврат (ВалютаДокумента = ВалютаУчета);
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДокумента", РасчетныйДокумент.Метаданные()) Тогда
		ВалютаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РасчетныйДокумент, "ВалютаДокумента");
		Возврат (ВалютаДокумента = ВалютаУчета);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Процедура вычисляет начальное сальдо по указанным договорам контрагента
//
// Организация (Объект.Организация) - организация, по которой вычисляется начальное сальдо взаиморасчетов
// ДоговорыКонтрагентов (Объект.ДоговорыКонтрагентов) - табличная часть документа
//
Процедура НачальноеСальдоПоДоговорам(Организация, Знач НачалоПериода, ДоговорыКонтрагентов, ВалютаДокумента, СальдоНачалоПериода) Экспорт
	
	Если НЕ ЗначениеЗаполнено(НачалоПериода) Тогда
		
		НачалоПериода = Дата(1980, 01, 01);
		
	КонецЕсли;
	
	Если ТипЗнч(ДоговорыКонтрагентов) = Тип("Массив") Тогда
		МассивДоговоров = ДоговорыКонтрагентов;
	Иначе
		МассивДоговоров = Новый Массив;
		МассивДоговоров.Добавить(ДоговорыКонтрагентов);
	КонецЕсли;
	
	СальдоНачалоПериода = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Константы.УчетПоКомпании.Компания(Организация));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ДоговорыКонтрагентов", МассивДоговоров);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор
	|ПОМЕСТИТЬ ДоговорыКонтрагентов
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка В(&ДоговорыКонтрагентов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиОстатки.СуммаВалОстаток > 0
	|				И РасчетыСПокупателямиОстатки.СуммаВалОстаток < 0
	|			ТОГДА -1 * РасчетыСПокупателямиОстатки.СуммаВалОстаток + РасчетыСПоставщикамиОстатки.СуммаВалОстаток
	|		КОГДА РасчетыСПоставщикамиОстатки.СуммаВалОстаток > 0
	|			ТОГДА РасчетыСПоставщикамиОстатки.СуммаВалОстаток
	|		КОГДА РасчетыСПокупателямиОстатки.СуммаВалОстаток < 0
	|			ТОГДА -РасчетыСПокупателямиОстатки.СуммаВалОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА РасчетыСПоставщикамиОстатки.СуммаВалОстаток < 0
	|				И РасчетыСПокупателямиОстатки.СуммаВалОстаток > 0
	|			ТОГДА -1 * РасчетыСПоставщикамиОстатки.СуммаВалОстаток + РасчетыСПокупателямиОстатки.СуммаВалОстаток
	|		КОГДА РасчетыСПоставщикамиОстатки.СуммаВалОстаток < 0
	|			ТОГДА -РасчетыСПоставщикамиОстатки.СуммаВалОстаток
	|		КОГДА РасчетыСПокупателямиОстатки.СуммаВалОстаток > 0
	|			ТОГДА РасчетыСПокупателямиОстатки.СуммаВалОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ - ЕСТЬNULL(РасчетыСПрочимиКонтрагентамиОстатки.СуммаВалОстаток, 0) КАК СальдоВал,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиОстатки.СуммаОстаток > 0
	|				И РасчетыСПокупателямиОстатки.СуммаОстаток < 0
	|			ТОГДА -1 * РасчетыСПокупателямиОстатки.СуммаОстаток + РасчетыСПоставщикамиОстатки.СуммаОстаток
	|		КОГДА РасчетыСПоставщикамиОстатки.СуммаОстаток > 0
	|			ТОГДА РасчетыСПоставщикамиОстатки.СуммаОстаток
	|		КОГДА РасчетыСПокупателямиОстатки.СуммаОстаток < 0
	|			ТОГДА -РасчетыСПокупателямиОстатки.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА РасчетыСПоставщикамиОстатки.СуммаОстаток < 0
	|				И РасчетыСПокупателямиОстатки.СуммаОстаток > 0
	|			ТОГДА -1 * РасчетыСПоставщикамиОстатки.СуммаОстаток + РасчетыСПокупателямиОстатки.СуммаОстаток
	|		КОГДА РасчетыСПоставщикамиОстатки.СуммаОстаток < 0
	|			ТОГДА -РасчетыСПоставщикамиОстатки.СуммаОстаток
	|		КОГДА РасчетыСПокупателямиОстатки.СуммаОстаток > 0
	|			ТОГДА РасчетыСПокупателямиОстатки.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ - ЕСТЬNULL(РасчетыСПрочимиКонтрагентамиОстатки.СуммаОстаток, 0) КАК СальдоУпр,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиОстатки.СуммаРегОстаток > 0
	|				И РасчетыСПокупателямиОстатки.СуммаРегОстаток < 0
	|			ТОГДА -1 * РасчетыСПокупателямиОстатки.СуммаРегОстаток + РасчетыСПоставщикамиОстатки.СуммаРегОстаток
	|		КОГДА РасчетыСПоставщикамиОстатки.СуммаРегОстаток > 0
	|			ТОГДА РасчетыСПоставщикамиОстатки.СуммаРегОстаток
	|		КОГДА РасчетыСПокупателямиОстатки.СуммаРегОстаток < 0
	|			ТОГДА -РасчетыСПокупателямиОстатки.СуммаРегОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА РасчетыСПоставщикамиОстатки.СуммаРегОстаток < 0
	|				И РасчетыСПокупателямиОстатки.СуммаРегОстаток > 0
	|			ТОГДА -1 * РасчетыСПоставщикамиОстатки.СуммаРегОстаток + РасчетыСПокупателямиОстатки.СуммаРегОстаток
	|		КОГДА РасчетыСПоставщикамиОстатки.СуммаРегОстаток < 0
	|			ТОГДА -РасчетыСПоставщикамиОстатки.СуммаРегОстаток
	|		КОГДА РасчетыСПокупателямиОстатки.СуммаРегОстаток > 0
	|			ТОГДА РасчетыСПокупателямиОстатки.СуммаРегОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ - ЕСТЬNULL(РасчетыСПрочимиКонтрагентамиОстатки.СуммаОстаток, 0) КАК СальдоРег,
	|	ДоговорыКонтрагентов.Договор.ВалютаРасчетов КАК ВалютыРасчетов
	|ИЗ
	|	ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПокупателями.Остатки(&НачалоПериода, Организация = &Организация) КАК РасчетыСПокупателямиОстатки
	|		ПО ДоговорыКонтрагентов.Договор = РасчетыСПокупателямиОстатки.Договор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками.Остатки(&НачалоПериода, Организация = &Организация) КАК РасчетыСПоставщикамиОстатки
	|		ПО ДоговорыКонтрагентов.Договор = РасчетыСПоставщикамиОстатки.Договор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПрочимиКонтрагентами.Остатки(&НачалоПериода, Организация = &Организация) КАК РасчетыСПрочимиКонтрагентамиОстатки
	|		ПО ДоговорыКонтрагентов.Договор = РасчетыСПрочимиКонтрагентамиОстатки.Договор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	ВалютаУчета = УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета();
	НациональнаяВалюта = УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту();
	
	Пока Выборка.Следующий() Цикл 
		
		СальдоПоДоговору = 0;
		
		Если УчетВалютныхОпераций Тогда
			
			Если ВалютаДокумента = Выборка.ВалютыРасчетов Тогда
				СальдоПоДоговору = Выборка.СальдоВал;
			ИначеЕсли ВалютаДокумента = ВалютаУчета Тогда
				СальдоПоДоговору = Выборка.СальдоУпр;
			ИначеЕсли ВалютаДокумента = НациональнаяВалюта Тогда
				СальдоПоДоговору = Выборка.СальдоРег;
			Иначе
				
				КурсВалютыРасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Выборка.ВалютыРасчетов, НачалоПериода);
				КурсВалютыДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, НачалоПериода);
				
				Если Выборка.СальдоВал <> 0 Тогда
					
					ПараметрыТекущегоКурса = Новый Структура;
					ПараметрыТекущегоКурса.Вставить("Валюта",	Выборка.ВалютыРасчетов);
					ПараметрыТекущегоКурса.Вставить("Курс",		КурсВалютыРасчетов.Курс);
					ПараметрыТекущегоКурса.Вставить("Кратность",КурсВалютыРасчетов.Кратность);
					
					ПараметрыНовогоКурса = Новый Структура;
					ПараметрыНовогоКурса.Вставить("Валюта",		ВалютаДокумента);
					ПараметрыНовогоКурса.Вставить("Курс",		КурсВалютыДокумента.Курс);
					ПараметрыНовогоКурса.Вставить("Кратность",	КурсВалютыДокумента.Кратность);
					
					СальдоПоДоговору = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(Выборка.СальдоВал, ПараметрыТекущегоКурса, ПараметрыНовогоКурса);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			СальдоПоДоговору = Выборка.СальдоВал;
			
		КонецЕсли;
		
		СальдоНачалоПериода = СальдоНачалоПериода + СальдоПоДоговору;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаДляФормированияЭлектронногоДокументаДанныеОтправителя() Экспорт
	
	Возврат 
	"ВЫБРАТЬ
	|	АктСверкиВзаиморасчетов.Номер КАК Номер,
	|	АктСверкиВзаиморасчетов.Дата КАК Дата,
	|	АктСверкиВзаиморасчетов.Организация КАК Организация,
	|	АктСверкиВзаиморасчетов.Контрагент КАК Контрагент,
	|	АктСверкиВзаиморасчетов.ВалютаДокумента КАК ВалютаДокумента,
	|	АктСверкиВзаиморасчетов.НачалоПериода КАК ДатаНачала,
	|	АктСверкиВзаиморасчетов.КонецПериода КАК ДатаОкончания,
	|	- АктСверкиВзаиморасчетов.СальдоНачалоПериода КАК ОстатокНаНачало,
	|	ЕСТЬNULL(Валюты.Код, ""643"") КАК КодВалюты
	|ИЗ
	|	Документ.СверкаВзаиморасчетов КАК АктСверкиВзаиморасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО АктСверкиВзаиморасчетов.ВалютаДокумента = Валюты.Ссылка
	|ГДЕ
	|	АктСверкиВзаиморасчетов.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(АктСверкиВзаиморасчетовПоДаннымОрганизации.СуммаДолгКонтрагента) КАК Дебет,
	|	СУММА(АктСверкиВзаиморасчетовПоДаннымОрганизации.СуммаДолгОрганизации) КАК Кредит
	|ИЗ
	|	Документ.СверкаВзаиморасчетов.ДанныеОрганизации КАК АктСверкиВзаиморасчетовПоДаннымОрганизации
	|ГДЕ
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.НомерСтроки КАК НомерСтроки,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Договор КАК Договор,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.ДатаОперации КАК ДатаОперации,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.СуммаДолгКонтрагента КАК СуммаДебет,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.СуммаДолгОрганизации КАК СуммаКредит,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.НомерДокумента КАК НомерДокумента,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.ДатаДокумента КАК ДатаДокумента,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.ОписаниеДокумента КАК НаименованиеДокумента,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.НаименованиеОперации КАК НаименованиеОперации,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ДатаДоговора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДоговора,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.НомерДоговора, """") КАК НомерДоговора,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ВидДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыДоговоров.ПустаяСсылка)) КАК ВидДоговора
	|ИЗ
	|	Документ.СверкаВзаиморасчетов.ДанныеОрганизации КАК АктСверкиВзаиморасчетовПоДаннымОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО АктСверкиВзаиморасчетовПоДаннымОрганизации.Договор = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка = &Ссылка
	|ИТОГИ
	|	МАКСИМУМ(ДатаДоговора),
	|	МАКСИМУМ(НомерДоговора),
	|	МАКСИМУМ(ВидДоговора)
	|ПО
	|	Договор";
	
КонецФункции

Функция ТекстЗапросаДляФормированияЭлектронногоДокументаДанныеПолучателя() Экспорт
	
	Возврат
	"ВЫБРАТЬ
	|	- АктСверкиВзаиморасчетов.СальдоНачалоПериода КАК ОстатокНаНачало,
	|	АктСверкиВзаиморасчетов.Статус КАК Статус
	|ИЗ
	|	Документ.СверкаВзаиморасчетов КАК АктСверкиВзаиморасчетов
	|ГДЕ
	|	АктСверкиВзаиморасчетов.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(АктСверкиВзаиморасчетовПоДаннымОрганизации.СуммаДолгКонтрагента) КАК Дебет,
	|	СУММА(АктСверкиВзаиморасчетовПоДаннымОрганизации.СуммаДолгОрганизации) КАК Кредит
	|ИЗ
	|	Документ.СверкаВзаиморасчетов.ДанныеОрганизации КАК АктСверкиВзаиморасчетовПоДаннымОрганизации
	|ГДЕ
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.НомерСтроки КАК НомерСтроки,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Договор КАК Договор,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.ДатаОперации КАК ДатаОперации,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.СуммаДолгКонтрагента КАК СуммаДебет,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.СуммаДолгОрганизации КАК СуммаКредит,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.НомерДокумента КАК НомерДокумента,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.ДатаДокумента КАК ДатаДокумента,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.ОписаниеДокумента КАК НаименованиеДокумента,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.НаименованиеОперации КАК НаименованиеОперации,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ДатаДоговора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДоговора,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.НомерДоговора, """") КАК НомерДоговора,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ВидДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыДоговоров.ПустаяСсылка)) КАК ВидДоговора
	|ИЗ
	|	Документ.СверкаВзаиморасчетов.ДанныеОрганизации КАК АктСверкиВзаиморасчетовПоДаннымОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО АктСверкиВзаиморасчетовПоДаннымОрганизации.Договор = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка = &Ссылка
	|ИТОГИ
	|	МАКСИМУМ(ДатаДоговора),
	|	МАКСИМУМ(НомерДоговора),
	|	МАКСИМУМ(ВидДоговора)
	|ПО
	|	Договор";
	
КонецФункции

Функция ИтоговоеРасхождениеДанных(ДанныеДокумента) Экспорт
	
	СальдоПоДаннымОрганизацииИтог	= ДанныеДокумента.ДанныеОрганизации.Итог("СуммаДолгКонтрагента") - ДанныеДокумента.ДанныеОрганизации.Итог("СуммаДолгОрганизации");
	СальдоПоДаннымКонтрагентаИтог	= ДанныеДокумента.ДанныеКонтрагента.Итог("СуммаДолгОрганизации") - ДанныеДокумента.ДанныеКонтрагента.Итог("СуммаДолгКонтрагента");
	
	РасхождениеИтог					= СальдоПоДаннымОрганизацииИтог - СальдоПоДаннымКонтрагентаИтог;
	
	Возврат РасхождениеИтог;
	
КонецФункции

Функция ПолучитьСтруктуруДанныхДокумента(Документ, ЗаполнятьПоВходящимДатам) Экспорт
	
	СтруктуруДанных = Новый Структура;
	СтруктуруДанных.Вставить("Дата",					Документ.Дата);
	СтруктуруДанных.Вставить("НачалоПериода",			Документ.НачалоПериода);
	СтруктуруДанных.Вставить("КонецПериода", 			Документ.КонецПериода);
	СтруктуруДанных.Вставить("Организация",				Константы.УчетПоКомпании.Компания(Документ.Организация));
	СтруктуруДанных.Вставить("Ссылка",					Документ.Ссылка);
	СтруктуруДанных.Вставить("СортироватьПоДоговорам",	Документ.СортироватьПоДоговорам);
	СтруктуруДанных.Вставить("ВалютаДокумента",			Документ.ВалютаДокумента);
	СтруктуруДанных.Вставить("ОрганизациюВПредставление",Документ.ДобавлятьОрганизациюВПредставлениеДокумента);
	СтруктуруДанных.Вставить("УказатьСчетФактуру",		Документ.ДобавлятьСчетФактуруВПредставлениеДокумента);
	СтруктуруДанных.Вставить("ВхНомерВПоступлениеНаСчет",Документ.ВходящийНомерВПредставлениеПоступленияНаСчет);
	СтруктуруДанных.Вставить("ВхНомерВРасходСоСчета",	Документ.ВходящийНомерВПредставлениеРасходаСоСчета);
	СтруктуруДанных.Вставить("ПоВходящимДатам",			ЗаполнятьПоВходящимДатам);
	СтруктуруДанных.Вставить("Контрагент",				Документ.Контрагент);
	СтруктуруДанных.Вставить("ВестиРасчетыПоДоговорам",	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.Контрагент, "ВестиРасчетыПоДоговорам"));
	
	Если СтруктуруДанных.ВестиРасчетыПоДоговорам = Неопределено Тогда
		СтруктуруДанных.ВестиРасчетыПоДоговорам = Ложь;
	КонецЕсли;
	
	МассивСтрок = Документ.ДоговорыКонтрагентов.НайтиСтроки(Новый Структура("Отметка", Истина));
	СтруктуруДанных.Вставить("ДоговорыКонтрагентов",	Документ.ДоговорыКонтрагентов.Выгрузить(МассивСтрок));
	
	Возврат СтруктуруДанных;
	
КонецФункции
#КонецОбласти

#Область ПолучениеДанных

// Возвращает выборку данных по остаткам расчетов с контрагентом
// по регистрам "Расчеты с клиентами" и "Расчеты с поставщиками"
// 
// Параметры:
//    ДанныеДокументов - Структура - Структура, содержащая поля:
//    									Организация - СправочникСсылка.Организации - Организация для выборки из регистров;
//    									Контрагент  - СправочникСсылка.Контрагенты - Контрагент для выборки из регистров;
//    									КонецПериода - Дата - Период для получения остатков.
// Возвращаемое значение:
//    Выборка из результата запроса ИЛИ Неопределено - если пустой результат запроса.
//
Функция ПолучитьВыборкуДанныхОрганизации(ДанныеДокумента) Экспорт
	
	// АПК:123-выкл
	ЗапросДанныхОрганизации = Новый Запрос;
	ЗапросДанныхОрганизации.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.ЗаказПокупателя) ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА РасчетыСПокупателямиОбороты.Регистратор.Финиш
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.ВводНачальныхОстатков) ССЫЛКА Документ.ВводНачальныхОстатков
	|				И РасчетыСПокупателямиОбороты.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ЗаказПокупателя) ССЫЛКА Документ.ЗаказПокупателя
	|						ТОГДА РасчетыСПокупателямиОбороты.Документ.Финиш
	|					ИНАЧЕ РасчетыСПокупателямиОбороты.Документ.Дата
	|				КОНЕЦ
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.КорректировкаРегистров) ССЫЛКА Документ.КорректировкаРегистров
	|				И РасчетыСПокупателямиОбороты.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ЗаказПокупателя) ССЫЛКА Документ.ЗаказПокупателя
	|						ТОГДА РасчетыСПокупателямиОбороты.Документ.Финиш
	|					ИНАЧЕ РасчетыСПокупателямиОбороты.Документ.Дата
	|				КОНЕЦ
	|		ИНАЧЕ РасчетыСПокупателямиОбороты.Регистратор.Дата
	|	КОНЕЦ КАК Период,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.ВводНачальныхОстатков) ССЫЛКА Документ.ВводНачальныхОстатков
	|				И РасчетыСПокупателямиОбороты.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА РасчетыСПокупателямиОбороты.Документ.Номер
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.КорректировкаРегистров) ССЫЛКА Документ.КорректировкаРегистров
	|				И РасчетыСПокупателямиОбороты.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА РасчетыСПокупателямиОбороты.Документ.Номер
	|		ИНАЧЕ РасчетыСПокупателямиОбороты.Регистратор.Номер
	|	КОНЕЦ КАК НомерДокумента,
	|	РасчетыСПокупателямиОбороты.Договор КАК Договор,
	|	РасчетыСПокупателямиОбороты.Договор.ДатаДоговора КАК ДатаДоговора,
	|	РасчетыСПокупателямиОбороты.Договор.ВалютаРасчетов КАК ВалютаДоговора,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.ВводНачальныхОстатков) ССЫЛКА Документ.ВводНачальныхОстатков
	|				И РасчетыСПокупателямиОбороты.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА РасчетыСПокупателямиОбороты.Документ
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.КорректировкаРегистров) ССЫЛКА Документ.КорректировкаРегистров
	|				И РасчетыСПокупателямиОбороты.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА РасчетыСПокупателямиОбороты.Документ
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.КорректировкаРеализации) ССЫЛКА Документ.КорректировкаРеализации
	|				И РасчетыСПокупателямиОбороты.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА РасчетыСПокупателямиОбороты.Документ
	|		ИНАЧЕ РасчетыСПокупателямиОбороты.Регистратор
	|	КОНЕЦ КАК РасчетныйДокумент,
	|	РасчетыСПокупателямиОбороты.Регистратор КАК Регистратор,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА РасчетыСПокупателямиОбороты.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|					И (РасчетыСПокупателямиОбороты.Регистратор ССЫЛКА Документ.ПоступлениеВКассу
	|						ИЛИ РасчетыСПокупателямиОбороты.Регистратор ССЫЛКА Документ.ПоступлениеНаСчет
	|						ИЛИ РасчетыСПокупателямиОбороты.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца
	|						ИЛИ РасчетыСПокупателямиОбороты.Регистратор ССЫЛКА Документ.ОперацияПоПлатежнымКартам
	|						ИЛИ РасчетыСПокупателямиОбороты.Регистратор ССЫЛКА Документ.РасходИзКассы
	|						ИЛИ РасчетыСПокупателямиОбороты.Регистратор ССЫЛКА Документ.РасходСоСчета
	|						ИЛИ РасчетыСПокупателямиОбороты.Регистратор ССЫЛКА Документ.ЧекККМ
	|						ИЛИ РасчетыСПокупателямиОбороты.Регистратор ССЫЛКА Документ.ЧекККМВозврат)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ФормироватьКурсовуюРазницу,
	|	СУММА(РасчетыСПокупателямиОбороты.СуммаВалОборот) КАК СуммаВалОборот,
	|	СУММА(РасчетыСПокупателямиОбороты.СуммаОборот) КАК СуммаОборот,
	|	СУММА(РасчетыСПокупателямиОбороты.СуммаРегОборот) КАК СуммаРегОборот
	|ПОМЕСТИТЬ ВТ_Расчеты
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			Организация = &Организация
	|				И Договор В (&МассивДоговоров)) КАК РасчетыСПокупателямиОбороты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ПоВходящимДатам
	|				ТОГДА ВЫБОР
	|							КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.ЗакрытиеМесяца) ЕСТЬ NULL
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ РасчетыСПокупателямиОбороты.Договор.ВалютаРасчетов <> &ВалютаДокумента
	|						КОНЕЦ
	|						И ВЫБОР
	|							КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.ЗаказПокупателя) ССЫЛКА Документ.ЗаказПокупателя
	|								ТОГДА РасчетыСПокупателямиОбороты.Регистратор.Финиш МЕЖДУ &НачалоПериода И &КонецПериода
	|							КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.ПриходнаяНакладная) ССЫЛКА Документ.ПриходнаяНакладная
	|									И РасчетыСПокупателямиОбороты.Регистратор.ДатаВходящегоДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|								ТОГДА РасчетыСПокупателямиОбороты.Регистратор.ДатаВходящегоДокумента МЕЖДУ &НачалоПериода И &КонецПериода
	|							КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.ПоступлениеНаСчет) ССЫЛКА Документ.ПоступлениеНаСчет
	|									И РасчетыСПокупателямиОбороты.Регистратор.ДатаВходящегоДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|								ТОГДА РасчетыСПокупателямиОбороты.Регистратор.ДатаВходящегоДокумента МЕЖДУ &НачалоПериода И &КонецПериода
	|							ИНАЧЕ РасчетыСПокупателямиОбороты.Регистратор.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|						КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|						КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.ЗакрытиеМесяца) ЕСТЬ NULL
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ РасчетыСПокупателямиОбороты.Договор.ВалютаРасчетов <> &ВалютаДокумента
	|					КОНЕЦ
	|					И ВЫБОР
	|						КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.ЗаказПокупателя) ССЫЛКА Документ.ЗаказПокупателя
	|							ТОГДА РасчетыСПокупателямиОбороты.Регистратор.Финиш МЕЖДУ &НачалоПериода И &КонецПериода
	|						ИНАЧЕ РасчетыСПокупателямиОбороты.Регистратор.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|					КОНЕЦ
	|		КОНЕЦ
	|	И &ВыбратьДанныеДокументаПоПокупателям
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОбороты.Договор,
	|	РасчетыСПокупателямиОбороты.Договор.ВалютаРасчетов,
	|	РасчетыСПокупателямиОбороты.Регистратор,
	|	РасчетыСПокупателямиОбороты.Договор.ДатаДоговора,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.ЗаказПокупателя) ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА РасчетыСПокупателямиОбороты.Регистратор.Финиш
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.ВводНачальныхОстатков) ССЫЛКА Документ.ВводНачальныхОстатков
	|				И РасчетыСПокупателямиОбороты.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ЗаказПокупателя) ССЫЛКА Документ.ЗаказПокупателя
	|						ТОГДА РасчетыСПокупателямиОбороты.Документ.Финиш
	|					ИНАЧЕ РасчетыСПокупателямиОбороты.Документ.Дата
	|				КОНЕЦ
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.КорректировкаРегистров) ССЫЛКА Документ.КорректировкаРегистров
	|				И РасчетыСПокупателямиОбороты.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ЗаказПокупателя) ССЫЛКА Документ.ЗаказПокупателя
	|						ТОГДА РасчетыСПокупателямиОбороты.Документ.Финиш
	|					ИНАЧЕ РасчетыСПокупателямиОбороты.Документ.Дата
	|				КОНЕЦ
	|		ИНАЧЕ РасчетыСПокупателямиОбороты.Регистратор.Дата
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.ВводНачальныхОстатков) ССЫЛКА Документ.ВводНачальныхОстатков
	|				И РасчетыСПокупателямиОбороты.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА РасчетыСПокупателямиОбороты.Документ.Номер
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.КорректировкаРегистров) ССЫЛКА Документ.КорректировкаРегистров
	|				И РасчетыСПокупателямиОбороты.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА РасчетыСПокупателямиОбороты.Документ.Номер
	|		ИНАЧЕ РасчетыСПокупателямиОбороты.Регистратор.Номер
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.ВводНачальныхОстатков) ССЫЛКА Документ.ВводНачальныхОстатков
	|				И РасчетыСПокупателямиОбороты.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА РасчетыСПокупателямиОбороты.Документ
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.КорректировкаРегистров) ССЫЛКА Документ.КорректировкаРегистров
	|				И РасчетыСПокупателямиОбороты.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА РасчетыСПокупателямиОбороты.Документ
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.КорректировкаРеализации) ССЫЛКА Документ.КорректировкаРеализации
	|				И РасчетыСПокупателямиОбороты.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА РасчетыСПокупателямиОбороты.Документ
	|		ИНАЧЕ РасчетыСПокупателямиОбороты.Регистратор
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПоставщикамиОбороты.Регистратор КАК Документ.ВводНачальныхОстатков) ССЫЛКА Документ.ВводНачальныхОстатков
	|				И РасчетыСПоставщикамиОбороты.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА РасчетыСПоставщикамиОбороты.Документ.Дата
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПоставщикамиОбороты.Регистратор КАК Документ.КорректировкаРегистров) ССЫЛКА Документ.КорректировкаРегистров
	|				И РасчетыСПоставщикамиОбороты.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА РасчетыСПоставщикамиОбороты.Документ.Дата
	|		ИНАЧЕ РасчетыСПоставщикамиОбороты.Регистратор.Дата
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПоставщикамиОбороты.Регистратор КАК Документ.ВводНачальныхОстатков) ССЫЛКА Документ.ВводНачальныхОстатков
	|				И РасчетыСПоставщикамиОбороты.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА РасчетыСПоставщикамиОбороты.Документ.Номер
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПоставщикамиОбороты.Регистратор КАК Документ.КорректировкаРегистров) ССЫЛКА Документ.КорректировкаРегистров
	|				И РасчетыСПоставщикамиОбороты.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА РасчетыСПоставщикамиОбороты.Документ.Номер
	|		ИНАЧЕ РасчетыСПоставщикамиОбороты.Регистратор.Номер
	|	КОНЕЦ,
	|	РасчетыСПоставщикамиОбороты.Договор,
	|	РасчетыСПоставщикамиОбороты.Договор.ДатаДоговора,
	|	РасчетыСПоставщикамиОбороты.Договор.ВалютаРасчетов,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПоставщикамиОбороты.Регистратор КАК Документ.ВводНачальныхОстатков) ССЫЛКА Документ.ВводНачальныхОстатков
	|				И РасчетыСПоставщикамиОбороты.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА РасчетыСПоставщикамиОбороты.Документ
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПоставщикамиОбороты.Регистратор КАК Документ.КорректировкаРегистров) ССЫЛКА Документ.КорректировкаРегистров
	|				И РасчетыСПоставщикамиОбороты.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА РасчетыСПоставщикамиОбороты.Документ
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПоставщикамиОбороты.Регистратор КАК Документ.КорректировкаПоступления) ССЫЛКА Документ.КорректировкаПоступления
	|				И РасчетыСПоставщикамиОбороты.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА РасчетыСПоставщикамиОбороты.Документ
	|		ИНАЧЕ РасчетыСПоставщикамиОбороты.Регистратор
	|	КОНЕЦ,
	|	РасчетыСПоставщикамиОбороты.Регистратор,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА РасчетыСПоставщикамиОбороты.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|					И (РасчетыСПоставщикамиОбороты.Регистратор ССЫЛКА Документ.ПоступлениеВКассу
	|						ИЛИ РасчетыСПоставщикамиОбороты.Регистратор ССЫЛКА Документ.ПоступлениеНаСчет
	|						ИЛИ РасчетыСПоставщикамиОбороты.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца
	|						ИЛИ РасчетыСПоставщикамиОбороты.Регистратор ССЫЛКА Документ.ОперацияПоПлатежнымКартам
	|						ИЛИ РасчетыСПоставщикамиОбороты.Регистратор ССЫЛКА Документ.РасходИзКассы
	|						ИЛИ РасчетыСПоставщикамиОбороты.Регистратор ССЫЛКА Документ.РасходСоСчета)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ),
	|	СУММА(-РасчетыСПоставщикамиОбороты.СуммаВалОборот),
	|	СУММА(-РасчетыСПоставщикамиОбороты.СуммаОборот),
	|	СУММА(-РасчетыСПоставщикамиОбороты.СуммаРегОборот)
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			Организация = &Организация
	|				И Договор В (&МассивДоговоров)) КАК РасчетыСПоставщикамиОбороты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ПоВходящимДатам
	|				ТОГДА ВЫБОР
	|							КОГДА ВЫРАЗИТЬ(РасчетыСПоставщикамиОбороты.Регистратор КАК Документ.ЗакрытиеМесяца) ЕСТЬ NULL
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ РасчетыСПоставщикамиОбороты.Договор.ВалютаРасчетов <> &ВалютаДокумента
	|						КОНЕЦ
	|						И ВЫБОР
	|							КОГДА (ВЫРАЗИТЬ(РасчетыСПоставщикамиОбороты.Регистратор КАК Документ.ПриходнаяНакладная) ССЫЛКА Документ.ПриходнаяНакладная
	|									ИЛИ ВЫРАЗИТЬ(РасчетыСПоставщикамиОбороты.Регистратор КАК Документ.ДополнительныеРасходы) ССЫЛКА Документ.ДополнительныеРасходы)
	|									И РасчетыСПоставщикамиОбороты.Регистратор.ДатаВходящегоДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|								ТОГДА РасчетыСПоставщикамиОбороты.Регистратор.ДатаВходящегоДокумента МЕЖДУ &НачалоПериода И &КонецПериода
	|							ИНАЧЕ РасчетыСПоставщикамиОбороты.Регистратор.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|						КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|						КОГДА ВЫРАЗИТЬ(РасчетыСПоставщикамиОбороты.Регистратор КАК Документ.ЗакрытиеМесяца) ЕСТЬ NULL
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ РасчетыСПоставщикамиОбороты.Договор.ВалютаРасчетов <> &ВалютаДокумента
	|					КОНЕЦ
	|					И (РасчетыСПоставщикамиОбороты.Регистратор.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
	|		КОНЕЦ
	|	И &ВыбратьДанныеДокументаПоПоставщикам
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщикамиОбороты.Договор,
	|	РасчетыСПоставщикамиОбороты.Договор.ВалютаРасчетов,
	|	РасчетыСПоставщикамиОбороты.Регистратор,
	|	РасчетыСПоставщикамиОбороты.Договор.ДатаДоговора,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПоставщикамиОбороты.Регистратор КАК Документ.ВводНачальныхОстатков) ССЫЛКА Документ.ВводНачальныхОстатков
	|				И РасчетыСПоставщикамиОбороты.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА РасчетыСПоставщикамиОбороты.Документ.Дата
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПоставщикамиОбороты.Регистратор КАК Документ.КорректировкаРегистров) ССЫЛКА Документ.КорректировкаРегистров
	|				И РасчетыСПоставщикамиОбороты.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА РасчетыСПоставщикамиОбороты.Документ.Дата
	|		ИНАЧЕ РасчетыСПоставщикамиОбороты.Регистратор.Дата
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПоставщикамиОбороты.Регистратор КАК Документ.ВводНачальныхОстатков) ССЫЛКА Документ.ВводНачальныхОстатков
	|				И РасчетыСПоставщикамиОбороты.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА РасчетыСПоставщикамиОбороты.Документ.Номер
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПоставщикамиОбороты.Регистратор КАК Документ.КорректировкаРегистров) ССЫЛКА Документ.КорректировкаРегистров
	|				И РасчетыСПоставщикамиОбороты.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА РасчетыСПоставщикамиОбороты.Документ.Номер
	|		ИНАЧЕ РасчетыСПоставщикамиОбороты.Регистратор.Номер
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПоставщикамиОбороты.Регистратор КАК Документ.ВводНачальныхОстатков) ССЫЛКА Документ.ВводНачальныхОстатков
	|				И РасчетыСПоставщикамиОбороты.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА РасчетыСПоставщикамиОбороты.Документ
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПоставщикамиОбороты.Регистратор КАК Документ.КорректировкаРегистров) ССЫЛКА Документ.КорректировкаРегистров
	|				И РасчетыСПоставщикамиОбороты.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА РасчетыСПоставщикамиОбороты.Документ
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПоставщикамиОбороты.Регистратор КАК Документ.КорректировкаПоступления) ССЫЛКА Документ.КорректировкаПоступления
	|				И РасчетыСПоставщикамиОбороты.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА РасчетыСПоставщикамиОбороты.Документ
	|		ИНАЧЕ РасчетыСПоставщикамиОбороты.Регистратор
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПрочимиКонтрагентамиОбороты.Регистратор.Дата,
	|	РасчетыСПрочимиКонтрагентамиОбороты.Регистратор.Номер,
	|	РасчетыСПрочимиКонтрагентамиОбороты.Договор,
	|	РасчетыСПрочимиКонтрагентамиОбороты.Договор.ДатаДоговора,
	|	РасчетыСПрочимиКонтрагентамиОбороты.Договор.ВалютаРасчетов,
	|	РасчетыСПрочимиКонтрагентамиОбороты.Регистратор,
	|	РасчетыСПрочимиКонтрагентамиОбороты.Регистратор,
	|	ИСТИНА,
	|	СУММА(РасчетыСПрочимиКонтрагентамиОбороты.СуммаВалОборот),
	|	СУММА(РасчетыСПрочимиКонтрагентамиОбороты.СуммаОборот),
	|	0
	|ИЗ
	|	РегистрНакопления.РасчетыСПрочимиКонтрагентами.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			Организация = &Организация
	|				И Договор В (&МассивДоговоров)) КАК РасчетыСПрочимиКонтрагентамиОбороты
	|ГДЕ
	|	РасчетыСПрочимиКонтрагентамиОбороты.Регистратор.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И &ВыбратьДанныеДокументаПоПрочимКонтрагентам
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПрочимиКонтрагентамиОбороты.Регистратор.Дата,
	|	РасчетыСПрочимиКонтрагентамиОбороты.Регистратор.Номер,
	|	РасчетыСПрочимиКонтрагентамиОбороты.Договор,
	|	РасчетыСПрочимиКонтрагентамиОбороты.Договор.ВалютаРасчетов,
	|	РасчетыСПрочимиКонтрагентамиОбороты.Регистратор,
	|	РасчетыСПрочимиКонтрагентамиОбороты.Договор.ДатаДоговора,
	|	РасчетыСПрочимиКонтрагентамиОбороты.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Расчеты.Регистратор КАК Ссылка,
	|	ВТ_Расчеты.Договор КАК Договор
	|ПОМЕСТИТЬ ВТ_Фильтр
	|ИЗ
	|	ВТ_Расчеты КАК ВТ_Расчеты
	|ГДЕ
	|	ВТ_Расчеты.ФормироватьКурсовуюРазницу
	|	И (ТИПЗНАЧЕНИЯ(ВТ_Расчеты.Регистратор) = ТИП(Документ.ПоступлениеНаСчет)
	|			ИЛИ ТИПЗНАЧЕНИЯ(ВТ_Расчеты.Регистратор) = ТИП(Документ.ПоступлениеВКассу)
	|			ИЛИ ТИПЗНАЧЕНИЯ(ВТ_Расчеты.Регистратор) = ТИП(Документ.РасходСоСчета)
	|			ИЛИ ТИПЗНАЧЕНИЯ(ВТ_Расчеты.Регистратор) = ТИП(Документ.РасходИзКассы)
	|			ИЛИ ТИПЗНАЧЕНИЯ(ВТ_Расчеты.Регистратор) = ТИП(Документ.ОперацияПоПлатежнымКартам))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеВКассуРасшифровкаПлатежа.Ссылка КАК Регистратор,
	|	ПоступлениеВКассуРасшифровкаПлатежа.Договор КАК Договор,
	|	СУММА(ПоступлениеВКассуРасшифровкаПлатежа.СуммаПлатежа) КАК СуммаПлатежа
	|ПОМЕСТИТЬ ВТ_РасшифровкаПлатежа
	|ИЗ
	|	Документ.ПоступлениеВКассу.РасшифровкаПлатежа КАК ПоступлениеВКассуРасшифровкаПлатежа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Фильтр КАК ВТ_Фильтр
	|		ПО ПоступлениеВКассуРасшифровкаПлатежа.Ссылка = ВТ_Фильтр.Ссылка
	|			И ПоступлениеВКассуРасшифровкаПлатежа.Договор = ВТ_Фильтр.Договор
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеВКассуРасшифровкаПлатежа.Договор,
	|	ПоступлениеВКассуРасшифровкаПлатежа.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеНаСчетРасшифровкаПлатежа.Ссылка,
	|	ПоступлениеНаСчетРасшифровкаПлатежа.Договор,
	|	СУММА(ПоступлениеНаСчетРасшифровкаПлатежа.СуммаПлатежа)
	|ИЗ
	|	Документ.ПоступлениеНаСчет.РасшифровкаПлатежа КАК ПоступлениеНаСчетРасшифровкаПлатежа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Фильтр КАК ВТ_Фильтр
	|		ПО ПоступлениеНаСчетРасшифровкаПлатежа.Ссылка = ВТ_Фильтр.Ссылка
	|			И ПоступлениеНаСчетРасшифровкаПлатежа.Договор = ВТ_Фильтр.Договор
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеНаСчетРасшифровкаПлатежа.Договор,
	|	ПоступлениеНаСчетРасшифровкаПлатежа.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходИзКассыРасшифровкаПлатежа.Ссылка,
	|	РасходИзКассыРасшифровкаПлатежа.Договор,
	|	СУММА(РасходИзКассыРасшифровкаПлатежа.СуммаПлатежа)
	|ИЗ
	|	Документ.РасходИзКассы.РасшифровкаПлатежа КАК РасходИзКассыРасшифровкаПлатежа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Фильтр КАК ВТ_Фильтр
	|		ПО РасходИзКассыРасшифровкаПлатежа.Ссылка = ВТ_Фильтр.Ссылка
	|			И РасходИзКассыРасшифровкаПлатежа.Договор = ВТ_Фильтр.Договор
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходИзКассыРасшифровкаПлатежа.Договор,
	|	РасходИзКассыРасшифровкаПлатежа.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходСоСчетаРасшифровкаПлатежа.Ссылка,
	|	РасходСоСчетаРасшифровкаПлатежа.Договор,
	|	СУММА(РасходСоСчетаРасшифровкаПлатежа.СуммаПлатежа)
	|ИЗ
	|	Документ.РасходСоСчета.РасшифровкаПлатежа КАК РасходСоСчетаРасшифровкаПлатежа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Фильтр КАК ВТ_Фильтр
	|		ПО РасходСоСчетаРасшифровкаПлатежа.Ссылка = ВТ_Фильтр.Ссылка
	|			И РасходСоСчетаРасшифровкаПлатежа.Договор = ВТ_Фильтр.Договор
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходСоСчетаРасшифровкаПлатежа.Договор,
	|	РасходСоСчетаРасшифровкаПлатежа.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОперацияПоПлатежнымКартамРасшифровкаПлатежа.Ссылка,
	|	ОперацияПоПлатежнымКартамРасшифровкаПлатежа.Договор,
	|	СУММА(ОперацияПоПлатежнымКартамРасшифровкаПлатежа.СуммаПлатежа)
	|ИЗ
	|	Документ.ОперацияПоПлатежнымКартам.РасшифровкаПлатежа КАК ОперацияПоПлатежнымКартамРасшифровкаПлатежа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Фильтр КАК ВТ_Фильтр
	|		ПО ОперацияПоПлатежнымКартамРасшифровкаПлатежа.Ссылка = ВТ_Фильтр.Ссылка
	|			И ОперацияПоПлатежнымКартамРасшифровкаПлатежа.Договор = ВТ_Фильтр.Договор
	|
	|СГРУППИРОВАТЬ ПО
	|	ОперацияПоПлатежнымКартамРасшифровкаПлатежа.Договор,
	|	ОперацияПоПлатежнымКартамРасшифровкаПлатежа.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Расчеты.Период КАК Период,
	|	ВТ_Расчеты.НомерДокумента КАК НомерДокумента,
	|	ВТ_Расчеты.Договор КАК Договор,
	|	ВТ_Расчеты.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Расчеты.ВалютаДоговора КАК ВалютаДоговора,
	|	ВТ_Расчеты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ВТ_Расчеты.Регистратор КАК Регистратор,
	|	ВТ_Расчеты.ФормироватьКурсовуюРазницу КАК ФормироватьКурсовуюРазницу,
	|	ВТ_Расчеты.СуммаВалОборот КАК СуммаВалОборот,
	|	ВТ_Расчеты.СуммаОборот КАК СуммаОборот,
	|	ВТ_Расчеты.СуммаРегОборот КАК СуммаРегОборот,
	|	ЕСТЬNULL(ВТ_РасшифровкаПлатежа.СуммаПлатежа, 0) КАК СуммаПлатежа
	|ИЗ
	|	ВТ_Расчеты КАК ВТ_Расчеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РасшифровкаПлатежа КАК ВТ_РасшифровкаПлатежа
	|		ПО ВТ_Расчеты.Регистратор = ВТ_РасшифровкаПлатежа.Регистратор
	|			И ВТ_Расчеты.Договор = ВТ_РасшифровкаПлатежа.Договор
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДоговора,
	|	Договор,
	|	Период";
	// АПК:123-вкл.
	
	ЗапросДанныхОрганизации.УстановитьПараметр("ПоВходящимДатам",	ДанныеДокумента.ПоВходящимДатам);
	ЗапросДанныхОрганизации.УстановитьПараметр("НачалоПериода",		ДанныеДокумента.НачалоПериода);
	ЗапросДанныхОрганизации.УстановитьПараметр("КонецПериода",		КонецДня(ДанныеДокумента.КонецПериода));
	ЗапросДанныхОрганизации.УстановитьПараметр("Организация",		ДанныеДокумента.Организация);
	ЗапросДанныхОрганизации.УстановитьПараметр("ВалютаДокумента",	ДанныеДокумента.ВалютаДокумента);
	ЗапросДанныхОрганизации.УстановитьПараметр("МассивДоговоров",	ДанныеДокумента.ДоговорыКонтрагентов.ВыгрузитьКолонку("Договор"));
	
	Если НЕ ДанныеДокумента.ВестиРасчетыПоДоговорам Тогда
		
		ЗапросДанныхОрганизации.УстановитьПараметр("Контрагент",		ДанныеДокумента.Контрагент);
		
		ОтборПоДоговорам = "Договор В (&МассивДоговоров)";
		ОтборПоКонтрагенту = "Контрагент = &Контрагент";
		ЗапросДанныхОрганизации.Текст = СтрЗаменить(ЗапросДанныхОрганизации.Текст, ОтборПоДоговорам, ОтборПоКонтрагенту);
		
	КонецЕсли;
	
	Если НЕ ДанныеДокумента.СортироватьПоДоговорам Тогда
		
		Строки_СортировкаПоДоговорам = 
		"	ДатаДоговора,
		|	Договор,
		|	Период";
		
		Строки_СортировкаПоДатам = 
		"	Период,
		|	Договор,
		|	ДатаДоговора";
		
		ЗапросДанныхОрганизации.Текст = СтрЗаменить(ЗапросДанныхОрганизации.Текст, Строки_СортировкаПоДоговорам, Строки_СортировкаПоДатам); 
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДокумента.Ссылка) Тогда
		
		ЗапросДанныхОрганизации.Текст = СтрЗаменить(ЗапросДанныхОрганизации.Текст, "&ВыбратьДанныеДокументаПоПокупателям", "РасчетыСПокупателями.Регистратор.Ссылка = &Ссылка");
		ЗапросДанныхОрганизации.Текст = СтрЗаменить(ЗапросДанныхОрганизации.Текст, "&ВыбратьДанныеДокументаПоПоставщикам", "РасчетыСПоставщиками.Регистратор.Ссылка = &Ссылка");
		ЗапросДанныхОрганизации.Текст = СтрЗаменить(ЗапросДанныхОрганизации.Текст, "&ВыбратьДанныеДокументаПоПрочимКонтрагентам", "РасчетыСПрочимиКонтрагентами.Регистратор.Ссылка = &Ссылка");
		ЗапросДанныхОрганизации.УстановитьПараметр("Ссылка",		ДанныеДокумента.Ссылка);
		
	Иначе
		
		ЗапросДанныхОрганизации.Текст = СтрЗаменить(ЗапросДанныхОрганизации.Текст, "&ВыбратьДанныеДокументаПоПокупателям", "Истина");
		ЗапросДанныхОрганизации.Текст = СтрЗаменить(ЗапросДанныхОрганизации.Текст, "&ВыбратьДанныеДокументаПоПоставщикам", "Истина");
		ЗапросДанныхОрганизации.Текст = СтрЗаменить(ЗапросДанныхОрганизации.Текст, "&ВыбратьДанныеДокументаПоПрочимКонтрагентам", "Истина");
		
	КонецЕсли;
	
	Возврат ЗапросДанныхОрганизации.Выполнить();
	
КонецФункции // ПолучитьВыборкуНашихДанныхОстатков()

#КонецОбласти

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//@skip-warning
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ИнтерфейсПечати

Функция ОписатьПравилаЗаполненияПодписей() Экспорт
	
	РеквизитыОбъекта = Новый Соответствие;
	
	РеквизитыОбъекта.Вставить("ПодписьОтветственного", "Организация.ПодписьГлавногоБухгалтера");
	РеквизитыОбъекта.Вставить("ПредставительКонтрагента", "Контрагент.КонтактноеЛицоПодписант");
	
	Возврат РеквизитыОбъекта;
	
КонецФункции

// Обходит коллекцию параметров и проставляет прочерки для незаполненных записей
//
Процедура ЗаменитьПустыеПараметрыПодчеркиванием(ПараметрыМакета)
	
	Подчеркивание = НСтр("ru = '__________________'");
	Для каждого Параметр Из ПараметрыМакета Цикл
		
		Если Параметр.Ключ = "ПредставлениеПериода" 
			ИЛИ Параметр.Ключ = "ПредставлениеОрганизации"
			ИЛИ Параметр.Ключ = "ПредставлениеКонтрагента" Тогда
			
			Продолжить;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(Параметр.Значение) Тогда
			
			ПараметрыМакета[Параметр.Ключ] = Подчеркивание;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаменитьПустыеПараметрыПодчеркиванием()

// Возвращает заполненную печатную форму "Акт сверки взаимных расчетов (без расхождений)"
//
// Параметры:
//    ДокументПечати  - ДокументСсылка    - Документ, который нужно распечатать
//    ОбъектыПечати	  - СписокЗначений	  - Список объектов печати
//
// Возвращаемое значение: Табличный документ
//
Функция СформироватьПечатнуюФормуАктБезРасхождений(ОписаниеПечатнойФормы, ДокументПечати, ОбъектыПечати, ИспользоватьФаксимиле)
	Перем Ошибки, ПервыйДокумент, НомерСтрокиНачало;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = ОписаниеПечатнойФормы.ТабличныйДокумент;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ОписаниеПечатнойФормы.ПолныйПутьКМакету);
	ПараметрыМакета = Новый Структура; 
	
	РезультатЗапроса = ДанныеДокументовПечати(ДокументПечати, ИспользоватьФаксимиле);
	
	ВыборкаДокументов = РезультатЗапроса.Выбрать();
	Пока ВыборкаДокументов.Следующий() Цикл
		
		ПечатьДокументовУНФ.ПередНачаломФормированияДокумента(ТабличныйДокумент, ПервыйДокумент, НомерСтрокиНачало, ПараметрыМакета);
		
		Шапка = ВыборкаДокументов;
		
		ДанныеОрганизации = ВыборкаДокументов.ДанныеОрганизации.Выгрузить();
		
		// Заголовок (идентичен для обоих макетов)
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		
		НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(
			Шапка.Дата, Шапка.Номер, Шапка.Префикс);

		ПараметрыМакета.Вставить("НомерДокумента", НомерДокумента);

		ПредставлениеДатыСоставления = НСтр("ru= 'Документ сформирован %1'");
		ПредставлениеДатыСоставления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеДатыСоставления, Формат(Шапка.Дата, "ДЛФ=DD"));
		ПараметрыМакета.Вставить("ПредставлениеДатыСоставления", ПредставлениеДатыСоставления);
		
		СведенияОбОрганизации = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		ПараметрыМакета.Вставить("ПредставлениеОрганизации", НСтр("ru ='1. '") + ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование, ИНН, ЮридическийАдрес, Телефоны, Факс"));
		
		ПолноеНаименованиеОрганизации = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование");
		ПараметрыМакета.Вставить("ПолноеНаименованиеОрганизации", ПолноеНаименованиеОрганизации);
		
		СведенияОКонтрагенте = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Шапка.Контрагент,  Шапка.Дата);
		ПараметрыМакета.Вставить("ПредставлениеКонтрагента", НСтр("ru ='2. '") + ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование, ИНН, РегистрационныйНомер, ЮридическийАдрес, Телефоны, Факс"));
		
		ПолноеНаименованиеКонтрагента = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование");
		ПараметрыМакета.Вставить("ПолноеНаименованиеКонтрагента", ПолноеНаименованиеКонтрагента);
		
		ПараметрыМакета.Вставить("ДолжностьОтветственного", Шапка.ДолжностьОтветственного);
		ПараметрыМакета.Вставить("РасшифровкаПодписиОтветственного", Шапка.РасшифровкаПодписиОтветственного);
		ПараметрыМакета.Вставить("ДолжностьПредставителяКонтрагента", Шапка.ДолжностьПредставителяКонтрагента);
		ПараметрыМакета.Вставить("РасшифровкаПодписиКонтрагента", Шапка.РасшифровкаПодписиКонтрагента);
		
		Если ЗначениеЗаполнено(Шапка.НачалоПериода) Тогда
			
			ПредставлениеПериода = НСтр("ru ='в период с %1 по %2'");
			ПредставлениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеПериода, Формат(Шапка.НачалоПериода, "ДЛФ=DD"), Формат(Шапка.КонецПериода, "ДЛФ=DD"));
			
		Иначе
			
			ПредставлениеПериода = НСтр("ru ='по состоянию на %1'");
			ПредставлениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеПериода, Формат(Шапка.КонецПериода, "ДЛФ=DD"));
			
		КонецЕсли;
		ПараметрыМакета.Вставить("ПредставлениеПериода", ПредставлениеПериода);
		
		ЗаменитьПустыеПараметрыПодчеркиванием(ПараметрыМакета);
		ОбластьМакета.Параметры.Заполнить(ПараметрыМакета);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// ШапкаТаблицы
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		
		ПараметрыМакета.Вставить("КраткоеНаименованиеОрганизации", Шапка.Организация);
		ПараметрыМакета.Вставить("КраткоеНаименованиеКонтрагента", Шапка.Контрагент);
		
		ОбластьМакета.Параметры.Заполнить(ПараметрыМакета);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// СтрокаСальдоНачалоПериода (идентичен для обоих макетов)
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСальдоНачалоПериода");
		ПараметрыМакета.Очистить();
		
		Если Шапка.СальдоНачалоПериода > 0 Тогда
			
			ПараметрыМакета.Вставить("ДолгОрганизацииНачалоПериода", Шапка.СальдоНачалоПериода);
			
		Иначе
			
			ПараметрыМакета.Вставить("ДолгКонтрагентаНачалоПериода", - Шапка.СальдоНачалоПериода);
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ПараметрыМакета);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Макет.Области.Найти("Договор") = Неопределено Тогда
			ТекстСообщения = НСтр(
			"ru = 'Изменился типовой макет печатной формы ""Акт сверки взаиморасчетов (сверено)"". Для корректной
			|работы печатной формы необходимо обновить отредактированный ранее макет. 
			|Это можно выполнить самостоятельно в разделе ""Компания - Администрирование - Печатные формы,
			|отчеты, обработки - Макеты печатных форм"" или обратиться к специалисту обслуживающей организации.'");
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Область("R1C1").Текст = ТекстСообщения;
			Возврат ТабличныйДокумент;
		КонецЕсли;
		
		// Договор, СтрокаТаблицыРасчеты
		ОбластьМакетаДоговор = Макет.ПолучитьОбласть("Договор");
		ОбластьМакетаДоговорИтоги = Макет.ПолучитьОбласть("ДоговорИтоги");
		ОбластьМакетаДетали = Макет.ПолучитьОбласть("СтрокаТаблицыРасчеты");
		
		Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ИндексМаксСтрокиОрганизации = ДанныеОрганизации.Количество() - 1;
		
		НачальноеСальдоПоДоговору = 0;
		СуммаДолгОрганизации = 0;
		СуммаДолгКонтрагента = 0;
		
		ПередаваемыеПараметры = Новый Структура();
		ПередаваемыеПараметры.Вставить("ДанныеОрганизации", ДанныеОрганизации);
		ПередаваемыеПараметры.Вставить("Договор", Договор);
		ПередаваемыеПараметры.Вставить("ИндексМаксСтрокиОрганизации", ИндексМаксСтрокиОрганизации);
		ПередаваемыеПараметры.Вставить("НачальноеСальдоПоДоговору", НачальноеСальдоПоДоговору);
		ПередаваемыеПараметры.Вставить("ОбластьМакетаДетали", ОбластьМакетаДетали);
		ПередаваемыеПараметры.Вставить("ОбластьМакетаДоговор", ОбластьМакетаДоговор);
		ПередаваемыеПараметры.Вставить("ОбластьМакетаДоговорИтоги", ОбластьМакетаДоговорИтоги);
		ПередаваемыеПараметры.Вставить("ПараметрыМакета", ПараметрыМакета);
		ПередаваемыеПараметры.Вставить("СуммаДолгКонтрагента", СуммаДолгКонтрагента);
		ПередаваемыеПараметры.Вставить("СуммаДолгОрганизации", СуммаДолгОрганизации);
		ПередаваемыеПараметры.Вставить("ТабличныйДокумент", ТабличныйДокумент);
		ПередаваемыеПараметры.Вставить("Шапка", Шапка);
		
		СформироватьПечатнуюФормуАктБезРасхожденийФрагмент(ПередаваемыеПараметры);
		
		СуммаДолгКонтрагента = ПередаваемыеПараметры.СуммаДолгКонтрагента;
		СуммаДолгОрганизации = ПередаваемыеПараметры.СуммаДолгОрганизации;
		ТабличныйДокумент = ПередаваемыеПараметры.ТабличныйДокумент;
		
		Если Шапка.СортироватьПоДоговорам Тогда
			
			ОбластьМакетаДоговорИтоги.Параметры.СуммаДолгОрганизации = СуммаДолгОрганизации;
			ОбластьМакетаДоговорИтоги.Параметры.СуммаДолгКонтрагента = СуммаДолгКонтрагента;
			
			ОстатокНаКонец = НачальноеСальдоПоДоговору + СуммаДолгОрганизации - СуммаДолгКонтрагента;
			
			ОбластьМакетаДоговорИтоги.Параметры.ДолгОрганизацииДоговорКонец = Макс(ОстатокНаКонец, 0);
			ОбластьМакетаДоговорИтоги.Параметры.ДолгКонтрагентаДоговорКонец = Макс(-ОстатокНаКонец, 0);
			
			ТабличныйДокумент.Вывести(ОбластьМакетаДоговорИтоги);
			
			СуммаДолгОрганизации = 0;
			СуммаДолгКонтрагента = 0;
			
		КонецЕсли;
		
		// СтрокаОборотыЗаПериод
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаОборотыЗаПериод");
		
		ПараметрыМакета.Очистить();
		ПараметрыМакета.Вставить("СуммаДолгОрганизации", ДанныеОрганизации.Итог("СуммаДолгОрганизации"));
		ПараметрыМакета.Вставить("СуммаДолгКонтрагента", ДанныеОрганизации.Итог("СуммаДолгКонтрагента"));
		
		ОбластьМакета.Параметры.Заполнить(ПараметрыМакета);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// СтрокаСальдоКонецПериода
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСальдоКонецПериода");
		ПараметрыМакета.Очистить();
		
		ОстатокНаКонец = Шапка.СальдоНачалоПериода + ДанныеОрганизации.Итог("СуммаДолгОрганизации") - ДанныеОрганизации.Итог("СуммаДолгКонтрагента");
		ПараметрыМакета.Вставить("ДолгОрганизацииКонецПериода", Макс(ОстатокНаКонец, 0));
		ПараметрыМакета.Вставить("ДолгКонтрагентаКонецПериода", Макс(-ОстатокНаКонец, 0));
		
		ОбластьМакета.Параметры.Заполнить(ПараметрыМакета);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// ПодвалЗадолженностьОтсутствует либо ПодвалЗадолженностьПрисутствует 
		ПараметрыМакета.Очистить();
		ПараметрыМакета.Вставить("КонецПериодаСверки", Формат(Шапка.КонецПериода, "ДЛФ=DD"));
		Если ОстатокНаКонец = 0 Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗадолженностьОтсутствует");
			
		Иначе
			
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗадолженностьПрисутствует");
			
			ПараметрыМакета.Вставить("ПолноеНаименованиеОрганизации", ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование"));
			
			Если ОстатокНаКонец > 0 Тогда
				
				ПредставлениеДебитора = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование");
				
			Иначе
				
				ПредставлениеДебитора = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование");
				
			КонецЕсли;
			
			ПараметрыМакета.Вставить("Дебитор", ПредставлениеДебитора);
			
			СуммаПоМодулю = Макс(ОстатокНаКонец, -ОстатокНаКонец);
			ПараметрыМакета.Вставить("Сумма", Формат(СуммаПоМодулю, "ЧЦ=15; ЧДЦ=2; ЧГ=3,0"));
			ПараметрыМакета.Вставить("ВалютаДокумента", Шапка.ВалютаДокумента);
			ПараметрыМакета.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаПоМодулю, Шапка.ВалютаДокумента));
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ПараметрыМакета);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Подписи
		ИмяОбласти = ?(Шапка.ИспользоватьФаксимиле = Перечисления.ДаНет.Да, "ПодписиСФаксимиле", "Подписи");
		ОбластьМакета = ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, ИмяОбласти, , Ошибки);
		Если ОбластьМакета <> Неопределено Тогда
			
			ПараметрыМакета.Очистить();
			
			ПараметрыМакета.Вставить("ПредставлениеОрганизации", ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование, ИНН, ЮридическийАдрес"));
			ПараметрыМакета.Вставить("ПредставлениеКонтрагента", ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование, ИНН, РегистрационныйНомер, ЮридическийАдрес"));
			ПараметрыМакета.Вставить("ДолжностьОтветственного", Шапка.ДолжностьОтветственного);
			ПараметрыМакета.Вставить("РасшифровкаПодписиОтветственного", Шапка.РасшифровкаПодписиОтветственного);
			ПараметрыМакета.Вставить("ДолжностьПредставителяКонтрагента", Шапка.ДолжностьПредставителяКонтрагента);
			ПараметрыМакета.Вставить("РасшифровкаПодписиКонтрагента", Шапка.РасшифровкаПодписиКонтрагента);
			
			Если Шапка.ИспользоватьФаксимиле = Перечисления.ДаНет.Да Тогда
				
				ПодписиИФаксимиле = Новый Соответствие; // Ключ - имя картинки в области, Значение - имя реквизита
				ПодписиИФаксимиле.Вставить("ПодписьОтветственного", "ФаксимилеПодписиОтветственного");
				ПодписиИФаксимиле.Вставить("ПечатьОрганизации", "ФаксимилеПечати");
				
				ПодписьДокументовУНФ.ЗаполнитьФаксимилеВОбластиМакета(ОбластьМакета, Шапка, ПодписиИФаксимиле, Ошибки);
				
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(ПараметрыМакета);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.ДокументСсылка);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура СформироватьПечатнуюФормуАктБезРасхожденийФрагмент(ПередаваемыеПараметры)
	
	ДанныеОрганизации = ПередаваемыеПараметры.ДанныеОрганизации;
	Договор = ПередаваемыеПараметры.Договор;
	ИндексМаксСтрокиОрганизации = ПередаваемыеПараметры.ИндексМаксСтрокиОрганизации;
	НачальноеСальдоПоДоговору = ПередаваемыеПараметры.НачальноеСальдоПоДоговору;
	ОбластьМакетаДетали = ПередаваемыеПараметры.ОбластьМакетаДетали;
	ОбластьМакетаДоговор = ПередаваемыеПараметры.ОбластьМакетаДоговор;
	ОбластьМакетаДоговорИтоги = ПередаваемыеПараметры.ОбластьМакетаДоговорИтоги;
	ПараметрыМакета = ПередаваемыеПараметры.ПараметрыМакета;
	СуммаДолгКонтрагента = ПередаваемыеПараметры.СуммаДолгКонтрагента;
	СуммаДолгОрганизации = ПередаваемыеПараметры.СуммаДолгОрганизации;
	ТабличныйДокумент = ПередаваемыеПараметры.ТабличныйДокумент;
	Шапка = ПередаваемыеПараметры.Шапка;
		
	Для СчетчикСтрок = 0 По ИндексМаксСтрокиОрганизации Цикл
		
		ПараметрыМакета.Очистить();
		
		СтрокаДанныхОрганизации = ЗаполнитьПараметрыМакета(ДанныеОрганизации, ИндексМаксСтрокиОрганизации, ПараметрыМакета,
			СчетчикСтрок);
		
		Если Шапка.СортироватьПоДоговорам Тогда
			
			СтрокаДанных = СтрокаДанныхОрганизации;
			
			Если СтрокаДанных.Договор <> Договор Тогда
				
				Если НЕ Договор.Пустая() Тогда
					
					ОбластьМакетаДоговорИтоги.Параметры.СуммаДолгОрганизации = СуммаДолгОрганизации;
					ОбластьМакетаДоговорИтоги.Параметры.СуммаДолгКонтрагента = СуммаДолгКонтрагента;
					
					ОстатокНаКонец = НачальноеСальдоПоДоговору + СуммаДолгОрганизации - СуммаДолгКонтрагента;
					
					ОбластьМакетаДоговорИтоги.Параметры.ДолгОрганизацииДоговорКонец = Макс(ОстатокНаКонец, 0);
					ОбластьМакетаДоговорИтоги.Параметры.ДолгКонтрагентаДоговорКонец = Макс(-ОстатокНаКонец, 0);
					
					ТабличныйДокумент.Вывести(ОбластьМакетаДоговорИтоги);
					
					СуммаДолгОрганизации = 0;
					СуммаДолгКонтрагента = 0;
					
				КонецЕсли;
				
				Договор = СтрокаДанных.Договор;
				ТекстПредставления = НСтр("ru = 'По договору:  %1'");
				ПредставлениеДоговора = СтрШаблон(ТекстПредставления, Договор);
				ПараметрыМакета.Вставить("ПредставлениеДоговора", ПредставлениеДоговора);
				ОбластьМакетаДоговор.Параметры.Заполнить(ПараметрыМакета);
				
				НачальноеСальдоПоДоговорам(Шапка.Организация, Шапка.НачалоПериода, Договор, Шапка.ВалютаДокумента,
					НачальноеСальдоПоДоговору);
				
				ОбластьМакетаДоговор.Параметры.ДолгОрганизацииДоговор = Макс(НачальноеСальдоПоДоговору, 0);
				ОбластьМакетаДоговор.Параметры.ДолгКонтрагентаДоговор = Макс(-НачальноеСальдоПоДоговору, 0);
				
				ТабличныйДокумент.Вывести(ОбластьМакетаДоговор);
				
			КонецЕсли;
			
			ВычислитьСумму(ПараметрыМакета.СуммаДолгОрганизации, СуммаДолгОрганизации);
			
			ВычислитьСумму(ПараметрыМакета.СуммаДолгКонтрагента, СуммаДолгКонтрагента);
			
		КонецЕсли;
		
		ОбластьМакетаДетали.Параметры.Заполнить(ПараметрыМакета);
		ТабличныйДокумент.Вывести(ОбластьМакетаДетали);
		
	КонецЦикла;

КонецПроцедуры

Функция ЗаполнитьПараметрыМакета(ДанныеОрганизации, ИндексМаксСтрокиОрганизации, ПараметрыМакета, СчетчикСтрок)
	
	Перем СтрокаДанныхОрганизации;
	
	Если СчетчикСтрок <= ИндексМаксСтрокиОрганизации Тогда
		
		СтрокаДанныхОрганизации = ДанныеОрганизации[СчетчикСтрок];
		ПараметрыМакета.Вставить("Договор", СтрокаДанныхОрганизации.Договор);
		ПараметрыМакета.Вставить("ДатаДокумента", СтрокаДанныхОрганизации.ДатаДокумента);
		ПараметрыМакета.Вставить("ОписаниеДокументаОрганизации", СтрокаДанныхОрганизации.ОписаниеДокументаОрганизации);
		ПараметрыМакета.Вставить("СуммаДолгОрганизации", СтрокаДанныхОрганизации.СуммаДолгОрганизации);
		ПараметрыМакета.Вставить("СуммаДолгКонтрагента", СтрокаДанныхОрганизации.СуммаДолгКонтрагента);
		
	Иначе
		
		СтрокаДанныхОрганизации = Неопределено;
		ПараметрыМакета.Вставить("ДатаДокумента", Неопределено);
		ПараметрыМакета.Вставить("ОписаниеДокументаОрганизации", Неопределено);
		ПараметрыМакета.Вставить("СуммаДолгОрганизации", Неопределено);
		ПараметрыМакета.Вставить("СуммаДолгКонтрагента", Неопределено);
		
	КонецЕсли;
	
	Возврат СтрокаДанныхОрганизации;

КонецФункции // СформироватьПечатнуюФормуАктБезРасхождений()

Процедура ВычислитьСумму(Слагаемое, Сумма)
	
	Если Слагаемое <> Неопределено Тогда
		Сумма = Сумма + Слагаемое;
	КонецЕсли;

КонецПроцедуры

// Возвращает заполненную печатную форму "Акт сверки взаимных расчетов (с данными контрагента)"
//
// Параметры:
//    ДокументПечати  - ДокументСсылка	  - Документ, который нужно распечатать
//    ОбъектыПечати	  - СписокЗначений	  - Список объектов печати
//
// Возвращаемое значение: Табличный документ
//
Функция СформироватьПечатнуюФормуАктСДаннымиКонтрагента(ОписаниеПечатнойФормы, ДокументПечати, ОбъектыПечати, ИспользоватьФаксимиле)
	Перем Ошибки, ПервыйДокумент, НомерСтрокиНачало;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = ОписаниеПечатнойФормы.ТабличныйДокумент;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ОписаниеПечатнойФормы.ПолныйПутьКМакету);
	ПараметрыМакета = Новый Структура;
	
	РезультатЗапроса = ДанныеДокументовПечати(ДокументПечати, ИспользоватьФаксимиле);
	
	ВыборкаДокументов = РезультатЗапроса.Выбрать();
	Пока ВыборкаДокументов.Следующий() Цикл
		
		ПечатьДокументовУНФ.ПередНачаломФормированияДокумента(ТабличныйДокумент, ПервыйДокумент, НомерСтрокиНачало, ПараметрыМакета);
		
		Шапка = ВыборкаДокументов;
		
		ДанныеОрганизации = ВыборкаДокументов.ДанныеОрганизации.Выгрузить();
		ДанныеКонтрагента = ВыборкаДокументов.ДанныеКонтрагента.Выгрузить();
		
		// Заголовок (идентичен для обоих макетов)
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		
		НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(
			Шапка.Дата, Шапка.Номер, Шапка.Префикс);

		ПараметрыМакета.Вставить("НомерДокумента", НомерДокумента);

		ПредставлениеДатыСоставления = НСтр("ru= 'Документ сформирован %1'");
		ПредставлениеДатыСоставления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеДатыСоставления, Формат(Шапка.Дата, "ДЛФ=DD"));
		ПараметрыМакета.Вставить("ПредставлениеДатыСоставления", ПредставлениеДатыСоставления);
		
		СведенияОбОрганизации = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		ПараметрыМакета.Вставить("ПредставлениеОрганизации", НСтр("ru ='1. '") + ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование, ИНН, ЮридическийАдрес, Телефоны, Факс"));
		
		ПолноеНаименованиеОрганизации = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование");
		ПараметрыМакета.Вставить("ПолноеНаименованиеОрганизации", ПолноеНаименованиеОрганизации);
		
		СведенияОКонтрагенте = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Шапка.Контрагент,  Шапка.Дата);
		ПараметрыМакета.Вставить("ПредставлениеКонтрагента", НСтр("ru ='2. '") + ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование, ИНН, РегистрационныйНомер, ЮридическийАдрес, Телефоны, Факс"));
		
		ПолноеНаименованиеКонтрагента = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование");
		ПараметрыМакета.Вставить("ПолноеНаименованиеКонтрагента", ПолноеНаименованиеКонтрагента);
		
		ПараметрыМакета.Вставить("ДолжностьОтветственного", Шапка.ДолжностьОтветственного);
		ПараметрыМакета.Вставить("РасшифровкаПодписиОтветственного", Шапка.РасшифровкаПодписиОтветственного);
		ПараметрыМакета.Вставить("ДолжностьПредставителяКонтрагента", Шапка.ДолжностьПредставителяКонтрагента);
		ПараметрыМакета.Вставить("РасшифровкаПодписиКонтрагента", Шапка.РасшифровкаПодписиКонтрагента);
		
		Если ЗначениеЗаполнено(Шапка.НачалоПериода) Тогда
			
			ПредставлениеПериода = НСтр("ru ='в период с %1 по %2'");
			ПредставлениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеПериода, Формат(Шапка.НачалоПериода, "ДЛФ=DD"), Формат(Шапка.КонецПериода, "ДЛФ=DD"));
			
		Иначе
			
			ПредставлениеПериода = НСтр("ru ='по состоянию на %1'");
			ПредставлениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеПериода, Формат(Шапка.КонецПериода, "ДЛФ=DD"));
			
		КонецЕсли;
		ПараметрыМакета.Вставить("ПредставлениеПериода", ПредставлениеПериода);
		
		ЗаменитьПустыеПараметрыПодчеркиванием(ПараметрыМакета);
		ОбластьМакета.Параметры.Заполнить(ПараметрыМакета);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// ШапкаТаблицы (идентичен для обоих макетов)
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		
		ПараметрыМакета.Вставить("КраткоеНаименованиеОрганизации", Шапка.Организация);
		ПараметрыМакета.Вставить("КраткоеНаименованиеКонтрагента", Шапка.Контрагент);
		
		ОбластьМакета.Параметры.Заполнить(ПараметрыМакета);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// СтрокаСальдоНачалоПериода (идентичен для обоих макетов)
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСальдоНачалоПериода");
		ПараметрыМакета.Очистить();
		
		// Считаем, что на начало периода сальдо согласовано
		Если Шапка.СальдоНачалоПериода > 0 Тогда
			
			ПараметрыМакета.Вставить("ДолгОрганизацииНачалоПериода", Шапка.СальдоНачалоПериода);
			
		Иначе
			
			ПараметрыМакета.Вставить("ДолгКонтрагентаНачалоПериода", - Шапка.СальдоНачалоПериода);
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ПараметрыМакета);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Договор, СтрокаТаблицыРасчеты
		ОбластьМакетаДоговор = Макет.ПолучитьОбласть("Договор");
		ОбластьМакетаДоговорИтоги = Макет.ПолучитьОбласть("ДоговорИтоги");
		ОбластьМакетаДетали = Макет.ПолучитьОбласть("СтрокаТаблицыРасчеты");
		
		Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ИндексМаксСтрокиОрганизации = ДанныеОрганизации.Количество() - 1;
		ИндексМаксСтрокиКонтрагента = ДанныеКонтрагента.Количество() - 1;
		МаксИндекс = Макс(ИндексМаксСтрокиОрганизации, ИндексМаксСтрокиКонтрагента);
		
		НачальноеСальдоПоДоговору = 0;
		СуммаДолгОрганизации = 0;
		СуммаДолгКонтрагента = 0;
		КонтрагентСуммаДолгОрганизации = 0;
		КонтрагентСуммаДолгКонтрагента = 0;
		
		Для СчетчикСтрок = 0 По МаксИндекс Цикл
			
			ПараметрыМакета.Очистить();
			
			Если СчетчикСтрок <= ИндексМаксСтрокиОрганизации Тогда
				
				СтрокаДанныхОрганизации = ДанныеОрганизации[СчетчикСтрок];
				ПараметрыМакета.Вставить("Договор", СтрокаДанныхОрганизации.Договор);
				ПараметрыМакета.Вставить("ДатаДокумента", СтрокаДанныхОрганизации.ДатаДокумента);
				ПараметрыМакета.Вставить("ОписаниеДокументаОрганизации", СтрокаДанныхОрганизации.ОписаниеДокументаОрганизации);
				ПараметрыМакета.Вставить("СуммаДолгОрганизации", СтрокаДанныхОрганизации.СуммаДолгОрганизации);
				ПараметрыМакета.Вставить("СуммаДолгКонтрагента", СтрокаДанныхОрганизации.СуммаДолгКонтрагента);
				
			Иначе
				
				СтрокаДанныхОрганизации = Неопределено;
				ПараметрыМакета.Вставить("ДатаДокумента", Неопределено);
				ПараметрыМакета.Вставить("ОписаниеДокументаОрганизации", Неопределено);
				ПараметрыМакета.Вставить("СуммаДолгОрганизации", Неопределено);
				ПараметрыМакета.Вставить("СуммаДолгКонтрагента", Неопределено);
			
			КонецЕсли;
			
			Если СчетчикСтрок <= ИндексМаксСтрокиКонтрагента Тогда
				
				СтрокаДанныхКонтрагента = ДанныеКонтрагента[СчетчикСтрок];
				ПараметрыМакета.Вставить("Договор", СтрокаДанныхКонтрагента.Договор);
				ПараметрыМакета.Вставить("КонтрагентДата", СтрокаДанныхКонтрагента.ВхДатаДокумента);
				ПараметрыМакета.Вставить("ОписаниеДокументаКонтрагента", СтрокаДанныхКонтрагента.ОписаниеДокументаКонтрагента);
				ПараметрыМакета.Вставить("КонтрагентСуммаДолгОрганизации", СтрокаДанныхКонтрагента.СуммаДолгОрганизации);
				ПараметрыМакета.Вставить("КонтрагентСуммаДолгКонтрагента", СтрокаДанныхКонтрагента.СуммаДолгКонтрагента);
				
			Иначе
				
				СтрокаДанныхКонтрагента = Неопределено;
				ПараметрыМакета.Вставить("КонтрагентДата", Неопределено);
				ПараметрыМакета.Вставить("ОписаниеДокументаКонтрагента", Неопределено);
				ПараметрыМакета.Вставить("КонтрагентСуммаДолгОрганизации", Неопределено);
				ПараметрыМакета.Вставить("КонтрагентСуммаДолгКонтрагента", Неопределено);
				
			КонецЕсли;
			
			Если Шапка.СортироватьПоДоговорам Тогда
				
				СтрокаДанных = ?(СтрокаДанныхОрганизации <> Неопределено, СтрокаДанныхОрганизации, СтрокаДанныхКонтрагента);
				
				Если СтрокаДанных.Договор <> Договор Тогда
					
					Если НЕ Договор.Пустая() Тогда
						
						ОбластьМакетаДоговорИтоги.Параметры.СуммаДолгОрганизации = СуммаДолгОрганизации;
						ОбластьМакетаДоговорИтоги.Параметры.СуммаДолгКонтрагента = СуммаДолгКонтрагента;
						ОбластьМакетаДоговорИтоги.Параметры.КонтрагентСуммаДолгОрганизации = КонтрагентСуммаДолгОрганизации;
						ОбластьМакетаДоговорИтоги.Параметры.КонтрагентСуммаДолгКонтрагента = КонтрагентСуммаДолгКонтрагента;
						
						ОстатокНаКонец = НачальноеСальдоПоДоговору + СуммаДолгОрганизации - СуммаДолгКонтрагента;
						ОстатокНаКонецК = -НачальноеСальдоПоДоговору + КонтрагентСуммаДолгОрганизации - КонтрагентСуммаДолгКонтрагента;
						
						ОбластьМакетаДоговорИтоги.Параметры.ДолгОрганизацииДоговорКонец = Макс(ОстатокНаКонец, 0);
						ОбластьМакетаДоговорИтоги.Параметры.ДолгКонтрагентаДоговорКонец = Макс(-ОстатокНаКонец, 0);
						ОбластьМакетаДоговорИтоги.Параметры.ДолгОрганизацииПоДаннымКонтрагентаДоговорКонец = Макс(ОстатокНаКонецК, 0);
						ОбластьМакетаДоговорИтоги.Параметры.ДолгКонтрагентаПоДаннымКонтрагентаДоговорКонец = Макс(-ОстатокНаКонецК, 0);
						
						ТабличныйДокумент.Вывести(ОбластьМакетаДоговорИтоги);
						
						СуммаДолгОрганизации = 0;
						СуммаДолгКонтрагента = 0;
						КонтрагентСуммаДолгОрганизации = 0;
						КонтрагентСуммаДолгКонтрагента = 0;
						
					КонецЕсли;
					
					Договор = СтрокаДанных.Договор;
					ПараметрыМакета.Вставить("ПредставлениеДоговора", НСтр("ru = 'По договору: '") + Договор);
					ОбластьМакетаДоговор.Параметры.Заполнить(ПараметрыМакета);
					
					НачальноеСальдоПоДоговорам(Шапка.Организация, Шапка.НачалоПериода, Договор, Шапка.ВалютаДокумента,
						НачальноеСальдоПоДоговору);
					
					ОбластьМакетаДоговор.Параметры.ДолгОрганизацииДоговор = Макс(НачальноеСальдоПоДоговору, 0);
					ОбластьМакетаДоговор.Параметры.ДолгКонтрагентаДоговор = Макс(-НачальноеСальдоПоДоговору, 0);
					
					ТабличныйДокумент.Вывести(ОбластьМакетаДоговор);
					
				КонецЕсли;
				
				Если ПараметрыМакета.СуммаДолгОрганизации <> Неопределено Тогда
					СуммаДолгОрганизации = СуммаДолгОрганизации + ПараметрыМакета.СуммаДолгОрганизации;
				КонецЕсли;
				
				Если ПараметрыМакета.СуммаДолгКонтрагента <> Неопределено Тогда
					СуммаДолгКонтрагента = СуммаДолгКонтрагента + ПараметрыМакета.СуммаДолгКонтрагента;
				КонецЕсли;
				
				Если ПараметрыМакета.КонтрагентСуммаДолгОрганизации <> Неопределено Тогда
					КонтрагентСуммаДолгОрганизации = КонтрагентСуммаДолгОрганизации + ПараметрыМакета.КонтрагентСуммаДолгОрганизации;
				КонецЕсли;
				
				Если ПараметрыМакета.КонтрагентСуммаДолгКонтрагента <> Неопределено Тогда
					КонтрагентСуммаДолгКонтрагента = КонтрагентСуммаДолгКонтрагента + ПараметрыМакета.КонтрагентСуммаДолгКонтрагента;
				КонецЕсли;
				
			КонецЕсли;
			
			ОбластьМакетаДетали.Параметры.Заполнить(ПараметрыМакета);
			ТабличныйДокумент.Вывести(ОбластьМакетаДетали);
			
		КонецЦикла;
		
		Если Шапка.СортироватьПоДоговорам Тогда
			
			ОбластьМакетаДоговорИтоги.Параметры.СуммаДолгОрганизации = СуммаДолгОрганизации;
			ОбластьМакетаДоговорИтоги.Параметры.СуммаДолгКонтрагента = СуммаДолгКонтрагента;
			ОбластьМакетаДоговорИтоги.Параметры.КонтрагентСуммаДолгОрганизации = КонтрагентСуммаДолгОрганизации;
			ОбластьМакетаДоговорИтоги.Параметры.КонтрагентСуммаДолгКонтрагента = КонтрагентСуммаДолгКонтрагента;
			
			ОстатокНаКонец = НачальноеСальдоПоДоговору + СуммаДолгОрганизации - СуммаДолгКонтрагента;
			ОстатокНаКонецК = -НачальноеСальдоПоДоговору + КонтрагентСуммаДолгОрганизации - КонтрагентСуммаДолгКонтрагента;
			
			ОбластьМакетаДоговорИтоги.Параметры.ДолгОрганизацииДоговорКонец = Макс(ОстатокНаКонец, 0);
			ОбластьМакетаДоговорИтоги.Параметры.ДолгКонтрагентаДоговорКонец = Макс(-ОстатокНаКонец, 0);
			ОбластьМакетаДоговорИтоги.Параметры.ДолгОрганизацииПоДаннымКонтрагентаДоговорКонец = Макс(ОстатокНаКонецК, 0);
			ОбластьМакетаДоговорИтоги.Параметры.ДолгКонтрагентаПоДаннымКонтрагентаДоговорКонец = Макс(-ОстатокНаКонецК, 0);
			
			ТабличныйДокумент.Вывести(ОбластьМакетаДоговорИтоги);
			
			СуммаДолгОрганизации = 0;
			СуммаДолгКонтрагента = 0;
			КонтрагентСуммаДолгОрганизации = 0;
			КонтрагентСуммаДолгКонтрагента = 0;
			
		КонецЕсли;
		
		// СтрокаОборотыЗаПериод
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаОборотыЗаПериод");
		ПараметрыМакета.Очистить();
		
		ПараметрыМакета.Вставить("СуммаДолгОрганизации", ДанныеОрганизации.Итог("СуммаДолгОрганизации"));
		ПараметрыМакета.Вставить("СуммаДолгКонтрагента", ДанныеОрганизации.Итог("СуммаДолгКонтрагента"));
		ПараметрыМакета.Вставить("КонтрагентСуммаДолгОрганизации", ДанныеКонтрагента.Итог("СуммаДолгОрганизации"));
		ПараметрыМакета.Вставить("КонтрагентСуммаДолгКонтрагента", ДанныеКонтрагента.Итог("СуммаДолгКонтрагента"));
		
		ОбластьМакета.Параметры.Заполнить(ПараметрыМакета);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// СтрокаСальдоКонецПериода
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСальдоКонецПериода");
		ПараметрыМакета.Очистить();
		
		ОстатокНаКонец = Шапка.СальдоНачалоПериода + ДанныеОрганизации.Итог("СуммаДолгОрганизации") - ДанныеОрганизации.Итог("СуммаДолгКонтрагента");
		ПараметрыМакета.Вставить("ДолгОрганизацииКонецПериода", Макс(ОстатокНаКонец, 0));
		ПараметрыМакета.Вставить("ДолгКонтрагентаКонецПериода", Макс(-ОстатокНаКонец, 0));
		
		ОстатокНаКонецК = -Шапка.СальдоНачалоПериода + ДанныеКонтрагента.Итог("СуммаДолгОрганизации") - ДанныеКонтрагента.Итог("СуммаДолгКонтрагента");
		ПараметрыМакета.Вставить("ДолгОрганизацииПоДаннымКонтрагентаКонецПериода", Макс(ОстатокНаКонецК, 0));
		ПараметрыМакета.Вставить("ДолгКонтрагентаПоДаннымКонтрагентаКонецПериода", Макс(-ОстатокНаКонецК, 0));
		
		ОбластьМакета.Параметры.Заполнить(ПараметрыМакета);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Подвал
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ПараметрыМакета.Очистить();
		
		ПараметрыМакета.Вставить("КонецПериодаСверки", Формат(Шапка.КонецПериода, "ДЛФ=DD"));
		ПараметрыМакета.Вставить("ПолноеНаименованиеОрганизации", ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование"));
		ПараметрыМакета.Вставить("ПолноеНаименованиеКонтрагента", ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование"));
		ПараметрыМакета.Вставить("ВалютаДокумента", Шапка.ВалютаДокумента);
		
		Если ОстатокНаКонец < 0 Тогда
			
			ПредставлениеДебитора = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование");
			
		Иначе
			
			ПредставлениеДебитора = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование");
			
		КонецЕсли;
		ПараметрыМакета.Вставить("ДебиторПоДаннымОрганизации", ПредставлениеДебитора);
		
		СуммаПоМодулю = Макс(ОстатокНаКонец, -ОстатокНаКонец);
		ПараметрыМакета.Вставить("СуммаДанныеОрганизации", Формат(СуммаПоМодулю, "ЧЦ=15; ЧДЦ=2; ЧГ=3,0"));
		ПараметрыМакета.Вставить("СуммаПрописьюДанныеОрганизации", РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаПоМодулю, Шапка.ВалютаДокумента));
		
		Если ОстатокНаКонецК > 0 Тогда
			
			ПредставлениеДебитора = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование");
			
		Иначе
			
			ПредставлениеДебитора = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование");
			
		КонецЕсли;
		ПараметрыМакета.Вставить("ДебиторПоДаннымКонтрагента", ПредставлениеДебитора);
		
		СуммаПоМодулю = Макс(ОстатокНаКонецК, -ОстатокНаКонецК);
		ПараметрыМакета.Вставить("СуммаДанныеКонтрагента", Формат(СуммаПоМодулю, "ЧЦ=15; ЧДЦ=2; ЧГ=3,0"));
		ПараметрыМакета.Вставить("СуммаПрописьюДанныеКонтрагента", РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаПоМодулю, Шапка.ВалютаДокумента));
		
		ОбластьМакета.Параметры.Заполнить(ПараметрыМакета);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Расхождения
		Расхождение = Макс(ОстатокНаКонец + ОстатокНаКонецК, -1 * (ОстатокНаКонец + ОстатокНаКонецК));
		Если Расхождение <> 0 Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("Расхождения");
			ПараметрыМакета.Очистить();
			
			ИтогСверки = "В результате сверки выявлено расхождение информации о состоянии расчетов в размере "
						+ Формат(Расхождение, "ЧЦ=21; ЧДЦ=2") + " " + Строка(Шапка.ВалютаДокумента)
						+ " (" + РаботаСКурсамиВалют.СформироватьСуммуПрописью(Расхождение, Шапка.ВалютаДокумента, Ложь) + ")";
						
			ПараметрыМакета.Вставить("ИтогСверки", ИтогСверки);
			
			ОбластьМакета.Параметры.Заполнить(ПараметрыМакета);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли; 
		
		// Описание документа
		Если НЕ ПустаяСтрока(Шапка.ОписаниеДокумента) Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ОписаниеДокумента");
			ПараметрыМакета.Очистить();
			
			ПараметрыМакета.Вставить("ОписаниеДокумента", Шапка.ОписаниеДокумента);
			
			ОбластьМакета.Параметры.Заполнить(ПараметрыМакета);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		// Подписи
		ИмяОбласти = ?(Шапка.ИспользоватьФаксимиле = Перечисления.ДаНет.Да, "ПодписиСФаксимиле", "Подписи");
		ОбластьМакета = ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, ИмяОбласти, , Ошибки);
		Если ОбластьМакета <> Неопределено Тогда
		
			ПараметрыМакета.Очистить();
			
			ПараметрыМакета.Вставить("ПредставлениеОрганизации", ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование, ИНН, ЮридическийАдрес"));
			ПараметрыМакета.Вставить("ПредставлениеКонтрагента", ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование, ИНН, РегистрационныйНомер, ЮридическийАдрес"));
			ПараметрыМакета.Вставить("ДолжностьОтветственного", Шапка.ДолжностьОтветственного);
			ПараметрыМакета.Вставить("РасшифровкаПодписиОтветственного", Шапка.РасшифровкаПодписиОтветственного);
			ПараметрыМакета.Вставить("ДолжностьПредставителяКонтрагента", Шапка.ДолжностьПредставителяКонтрагента);
			ПараметрыМакета.Вставить("РасшифровкаПодписиКонтрагента", Шапка.РасшифровкаПодписиКонтрагента);
			
			Если Шапка.ИспользоватьФаксимиле = Перечисления.ДаНет.Да Тогда
				
				ПодписиИФаксимиле = Новый Соответствие; // Ключ - имя картинки в области, Значение - имя реквизита
				ПодписиИФаксимиле.Вставить("ПодписьОтветственного", "ФаксимилеПодписиОтветственного");
				ПодписиИФаксимиле.Вставить("ПечатьОрганизации", "ФаксимилеПечати");
				
				ПодписьДокументовУНФ.ЗаполнитьФаксимилеВОбластиМакета(ОбластьМакета, Шапка, ПодписиИФаксимиле, Ошибки);
				
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(ПараметрыМакета);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.ДокументСсылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТабличныйДокумент;
	
КонецФункции // СформироватьПечатнуюФормуАктСДаннымиКонтрагента()

// Сформировать печатные формы объектов
//
// ПАРАМЕТРЫ.
// ВХОДЯЩИЕ:
//   ДокументПечати  - ДокументСсылка		- Документ, который нужно распечатать
//   ПараметрыПечати - Структура 			- Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ОбъектыПечати		   - СписокЗначений	  - Список объектов печати
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(ДокументПечати, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "АктБезРасхождений");
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктСверкиВзаиморасчетовСверено";
		ПечатнаяФорма.ПолныйПутьКМакету = "Документ.СверкаВзаиморасчетов.ПФ_MXL_АктСверкиВзаиморасчетовСверено";
		ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Акт сверки взаиморасчетов (без расхождений)'");
		
		СформироватьПечатнуюФормуАктБезРасхождений(ПечатнаяФорма, ДокументПечати, ОбъектыПечати, Ложь);
		
	КонецЕсли;
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "АктБезРасхожденийФаксимиле");
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктСверкиВзаиморасчетовСверено";
		ПечатнаяФорма.ПолныйПутьКМакету = "Документ.СверкаВзаиморасчетов.ПФ_MXL_АктСверкиВзаиморасчетовСверено";
		ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Акт сверки взаиморасчетов (без расхождений)'");
		
		СформироватьПечатнуюФормуАктБезРасхождений(ПечатнаяФорма, ДокументПечати, ОбъектыПечати, Истина);
		
	КонецЕсли;
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "АктСДаннымиКонтрагента");
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктСверкиВзаиморасчетов";
		ПечатнаяФорма.ПолныйПутьКМакету = "Документ.СверкаВзаиморасчетов.ПФ_MXL_АктСверкиВзаиморасчетов";
		ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Акт сверки взаиморасчетов (с данными контрагента)'");
		
		СформироватьПечатнуюФормуАктСДаннымиКонтрагента(ПечатнаяФорма, ДокументПечати, ОбъектыПечати, Ложь);
		
	КонецЕсли;
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "АктСДаннымиКонтрагентаФаксимиле");
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктСверкиВзаиморасчетов";
		ПечатнаяФорма.ПолныйПутьКМакету = "Документ.СверкаВзаиморасчетов.ПФ_MXL_АктСверкиВзаиморасчетов";
		ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Акт сверки взаиморасчетов (с данными контрагента)'");
		
		СформироватьПечатнуюФормуАктСДаннымиКонтрагента(ПечатнаяФорма, ДокументПечати, ОбъектыПечати, Истина);
		
	КонецЕсли;
	
	Если ДокументПечати.Количество() > 0 Тогда
		
		МассивОбъектовПечати = Новый Массив;
		МассивОбъектовПечати.Добавить(ДокументПечати[0]);
		
		// параметры отправки печатных форм по электронной почте
		ЭлектроннаяПочтаУНФ.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектовПечати,
			КоллекцияПечатныхФорм);
		
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктБезРасхождений,АктСДаннымиКонтрагента";
	КомандаПечати.Представление = ПечатьДокументовУНФ.ПредставлениеКомплектаДокументов();
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 1;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктБезРасхождений";
	КомандаПечати.Представление = НСтр("ru = 'Акт сверки взаиморасчетов (без расхождений)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 4;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктБезРасхожденийФаксимиле";
	КомандаПечати.Представление = НСтр("ru = 'Акт сверки взаиморасчетов (факсимиле, без расхождений)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.МестоРазмещения = "ПодменюПечатьФаксимиле";
	КомандаПечати.Порядок = 4;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктСДаннымиКонтрагента";
	КомандаПечати.Представление = НСтр("ru = 'Акт сверки взаиморасчетов (с данными контрагента)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 7;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктСДаннымиКонтрагентаФаксимиле";
	КомандаПечати.Представление = НСтр("ru = 'Акт сверки взаиморасчетов (факсимиле, с данными контрагента)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.МестоРазмещения = "ПодменюПечатьФаксимиле";
	КомандаПечати.Порядок = 7;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Конверт";
	КомандаПечати.Представление = НСтр("ru = 'Конверт'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.Обработчик = "ПечатьДокументовУНФКлиент.ПечатьКонверта";
	КомандаПечати.Порядок = 10;
	
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли