///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//  КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ПодключаемыеКоманды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании
//  Параметры                  - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
КонецПроцедуры

// Для использования в процедуре ДобавитьКомандыСозданияНаОсновании других модулей менеджеров объектов.
//  Добавляет в список команд создания на основании этот объект.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений, Неопределено - описание добавленной команды.
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Возврат СозданиеНаОсновании.ДобавитьКомандуСозданияНаОсновании(КомандыСозданияНаОсновании, Метаданные.Документы.ИсходящееСообщениеОСтраховомСлучаеФСС);
	
КонецФункции

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ФизическоеЛицо)
	|	И ЗначениеРазрешено(Организация)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#Область СЭДО

Функция ТекстXML(Документ) Экспорт
	МенеджерXML = Обработки.ПостроительXML.Создать();
	МенеджерXML.ФорматДат = "ДФ=yyyy-MM-dd";
	
	// В корне 1 элемент: Информирование ФСС о жизненных событиях.
	КореньXML = МенеджерXML.ДобавитьУзел(МенеджерXML.ДеревоXML, "eventLife");
	МенеджерXML.ДобавитьПространствоИмен(КореньXML, "", "urn:ru:fss:integration:types:information:EventLife:v01");
	МенеджерXML.ДобавитьПространствоИмен(КореньXML, "common", "http://www.fss.ru/integration/types/common/v01");
	МенеджерXML.ДобавитьПространствоИмен(КореньXML, "person", "http://www.fss.ru/integration/types/person/v02");
	МенеджерXML.ДобавитьПространствоИмен(КореньXML, "xsi", "http://www.w3.org/2001/XMLSchema-instance");
	РодительXML = МенеджерXML.ДобавитьУзел(КореньXML, "event");
	
	МенеджерXML.ДобавитьУзел(РодительXML, "category", ВРег(УбратьПробелы(Документ.СотрудникКатегория)), Истина);
	
	ВидПособия = СЭДОФСС.СведенияОВидеПособия(Документ.ВидПособия);
	
	Особенности = ОсобенностиВыгрузки(Документ);
	
	Если Документ.Перерасчет Тогда
		// Инициация перерасчета. Запрос сведений о записи реестра выплаты.
		УзелДанных = МенеджерXML.ДобавитьУзел(РодительXML, "recalculation");
		// Идентификатор (BATCH_NO) записи реестра выплаты,
		// по которому необходимы сведения для формирования перерасчетного документа.
		МенеджерXML.ДобавитьУзел(УзелДанных, "batchNo", Документ.ИдентификаторСтрокиРеестра);
	
	ИначеЕсли ВидПособия.ЭтоОтпускПоУходу Тогда
		// Отпуск по уходу за ребёнком по достижении им возраста полутора лет.
		УзелДанных = МенеджерXML.ДобавитьУзел(РодительXML, "childCareVocation");
		ВыгрузитьСведенияОЗастрахованномЛице(Документ, МенеджерXML, УзелДанных, ВидПособия);
		ВыгрузитьИнформациюОРебенке(Документ, МенеджерXML, УзелДанных);
		ВыгрузитьОснованияДляНазначенияОтпускаПоУходу(Документ, МенеджерXML, УзелДанных);
		
	ИначеЕсли ВидПособия.ЭтоПособиеПриРождении Тогда
		// Рождение ребёнка.
		УзелДанных = МенеджерXML.ДобавитьУзел(РодительXML, "birthChild");
		ВыгрузитьСведенияОЗастрахованномЛице(Документ, МенеджерXML, УзелДанных, ВидПособия);
		ВыгрузитьИнформациюОРебенке(Документ, МенеджерXML, УзелДанных);
		ВыгрузитьОснованияДляНазначенияПособияПриРождении(Документ, МенеджерXML, УзелДанных, Особенности);
		
	ИначеЕсли ВидПособия.ЭтоЛН Тогда
		// Данные о закрытии листка нетрудоспособности.
		УзелДанных = МенеджерXML.ДобавитьУзел(РодительXML, "elnClosed");
		ВыгрузитьСведенияОЗастрахованномЛице(Документ, МенеджерXML, УзелДанных, ВидПособия);
		ВыгрузитьСведенияОбЭЛН(Документ, МенеджерXML, УзелДанных);
		
	КонецЕсли;
	
	МенеджерXML.НачатьЗаписьВСтрокуXML(Ложь);
	СтрокаXML = МенеджерXML.СтрокаXML();
	Возврат СтрокаXML;
КонецФункции

Функция ТипСообщения() Экспорт
	Возврат 109;
КонецФункции

Процедура ПриЗаполненииПараметровОтправки(МассивСсылок, ТаблицаОтправки) Экспорт
	
	ИменаРеквизитовСтроки = "Ссылка, Номер, Дата, ФизическоеЛицо, Организация";
	ИменаРеквизитов = "Ссылка, Номер, Дата, ДатаОтправки, ФизическоеЛицо, Организация, ХранилищеXML, ПометкаУдаления, Проведен";
	Соответствие = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСсылок, ИменаРеквизитов);
	Для Каждого КлючИЗначение Из Соответствие Цикл
		Документ = КлючИЗначение.Значение;
		// Добавление строки отправки и заполнение представления.
		СтрокаОтправки = ТаблицаОтправки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОтправки, Документ, ИменаРеквизитовСтроки);
		СтрокаОтправки.ТипСообщения = ТипСообщения();
		СтрокаОтправки.ТекстXML     = Документ.ХранилищеXML.Получить();
		СтрокаОтправки.Отправить    = Ложь;
		СтрокаОтправки.ШаблонОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось отправить ответ на запрос ФСС для расчета пособия сотруднику %1:%2'"),
			СтрокаОтправки.ФизическоеЛицо,
			"%1");
		// Проверки и обновление вторичных данных документа перед отправкой.
		Если Документ.ПометкаУдаления Тогда
			СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиУдален();
			СтрокаОтправки.Результат = НСтр("ru = 'Документ помечен на удаление'");
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Документ.ДатаОтправки) Тогда
			СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиОтправлен();
			Если НачалоДня(Документ.ДатаОтправки) <= ТекущаяДатаСеанса() Тогда
				Текст = НСтр("ru = 'Документ уже отправлен %1'");
				СтрокаОтправки.Результат = СтрШаблон(Текст, Формат(Документ.ДатаОтправки, "ДЛФ=D"));
			Иначе
				Текст = НСтр("ru = 'Документ уже отправлен в %1'");
				СтрокаОтправки.Результат = СтрШаблон(Текст, Формат(Документ.ДатаОтправки, "ДФ=HH:mm"));
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		ДокументОбъект = Документ.Ссылка.ПолучитьОбъект();
		Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
			СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиПредупреждение();
			ЗаполнитьТекстОшибкиПроверкиЗаполнения(СтрокаОтправки, "");
			Если Не ДокументОбъект.ОтключитьПроверкиПроведения Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		// Проведение документа если требуется.
		ЕстьИзменения = ДокументОбъект.ОбновитьВторичныеДанные();
		СтрокаОтправки.Отправить = Истина;
		Если ЕстьИзменения Или Не ДокументОбъект.Проведен Тогда
			Попытка
				СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиПроведен();
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ЗаполнитьЗначенияСвойств(СтрокаОтправки, ДокументОбъект, ИменаРеквизитовСтроки);
				СтрокаОтправки.ТекстXML = ДокументОбъект.ХранилищеXML.Получить();
			Исключение
				СтрокаОтправки.Отправить = Ложь;
				СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиОстановлен();
				СтрокаОтправки.ЗначениеРасшифровки = Документ.Ссылка;
				ТекстИсключения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаполнитьТекстОшибкиПроверкиЗаполнения(СтрокаОтправки, ТекстИсключения);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриПодготовкеВыбранныхДокументовКОтправке(МассивСсылок, ТаблицаОтправки) Экспорт
	// Действие не требуется.
КонецПроцедуры

Процедура ЗарегистрироватьРезультатыОтправки(СтрокаОтправки, Измененные) Экспорт
	ДатаОтправки = ?(СтрокаОтправки.Доставлен, СтрокаОтправки.ДатаОтправки, '00010101');
	
	// Сначала записывается отправленный документ, т.к. его данные используются при обновлении регистров (кэшей).
	ДокументОбъект = СтрокаОтправки.Ссылка.ПолучитьОбъект();
	ДокументОбъект.ДатаОтправки           = ДатаОтправки;
	ДокументОбъект.ИдентификаторСообщения = СтрокаОтправки.ДоставкаИдентификатор;
	СЭДОФСС.ЗаписатьДокумент(ДокументОбъект, Истина, Ложь);
	
	// Затем записывается транспортный регистр.
	РегистрыСведений.РегистрацииИсходящихСообщенийОСтраховыхСлучаяхФСС.ЗаполнитьПоДокументу(ДокументОбъект, СтрокаОтправки);
	
	Измененные.Добавить(ДокументОбъект.Ссылка);
КонецПроцедуры

Функция ЗаголовокФормыОтправкиСведенийВФСС() Экспорт
	Возврат НСтр("ru = 'Отправка исходящих сообщений о страховых случаях в ФСС через СЭДО'");
КонецФункции

#КонецОбласти

#Область СоставДокументов

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
//
Функция ОписаниеСоставаОбъекта() Экспорт
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаФизическоеЛицоВШапке("ФизическоеЛицо", "Сотрудник");
КонецФункции

#КонецОбласти

#Область ФиксацияВторичныхДанныхВДокументах

Функция ПараметрыФиксацииВторичныхДанных(Документ = Неопределено) Экспорт
	Возврат ФиксацияВторичныхДанныхВДокументах.ПараметрыФиксации(ФиксируемыеРеквизиты(Документ));
КонецФункции

// Определяет по данным документа признак фиксации.
//
// Параметры:
//   Документ - ДокументОбъект.ИсходящееСообщениеОСтраховомСлучаеФСС, ДанныеФормыСтруктура
//
// Возвращаемое значение:
//   Булево
//
Функция ОбъектЗафиксирован(Документ) Экспорт
	Возврат Не Документ.ПометкаУдаления И ЗначениеЗаполнено(Документ.ДатаОтправки);
КонецФункции

#КонецОбласти

#Область МногофункциональныеДокументы

// Возвращает метаданные разделов документа.
//
// Возвращаемое значение:
//   Соответствие, Неопределено - Описание разделов документа.
//
Функция ОписаниеРазделовДанных() Экспорт
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("МногофункциональныеДокументыБЗККлиентСервер");
		ВсеРазделы = Модуль.РазделыДанных();
		
		ОписаниеРазделовДанных = Новый Соответствие();
		
		ОписаниеРаздела = Модуль.НовыйОписаниеРазделаДанных();
		ОписаниеРазделовДанных.Вставить(ВсеРазделы.КадровыеДанные, ОписаниеРаздела);
		ОписаниеРаздела.РеквизитСостояние    = "Проведен";
		ОписаниеРаздела.РеквизитОтветсвенный = "Ответственный";
		
		ОписаниеРаздела = Модуль.НовыйОписаниеРазделаДанных();
		ОписаниеРазделовДанных.Вставить(ВсеРазделы.НачисленнаяЗарплата, ОписаниеРаздела);
		Возврат ОписаниеРазделовДанных;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

// Возвращает значения по которым будут проверяться права на документ.
//
// Параметры:
//   ДокументОбъект - ДокументОбъект, ДанныеФормыСтруктура
//
// Возвращаемое значение:
//   Структура - Значения доступа по которым будут проверяться права на документ
//
Функция ЗначенияДоступа(ДокументОбъект) Экспорт
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда
		МодульМногофункциональныеДокументыБЗК = ОбщегоНазначения.ОбщийМодуль("МногофункциональныеДокументыБЗК");
		Возврат МодульМногофункциональныеДокументыБЗК.ЗначенияДоступаПоСоставуДокумента(
			ДокументОбъект,
			ДокументОбъект.Организация);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ФиксацияВторичныхДанныхВДокументах

Функция ФиксируемыеРеквизиты(Документ = Неопределено)
	ФиксируемыеРеквизиты = Новый Соответствие;
	
	Если Документ = Неопределено Тогда
		ЗаполненДокументОснование = Истина;
		ЗаполненСотрудник         = Истина;
		ЗаполненРебенок           = Истина;
	Иначе
		ЗаполненДокументОснование = ЗначениеЗаполнено(Документ.ДокументОснование);
		ЗаполненСотрудник         = ЗаполненДокументОснование Или ЗначениеЗаполнено(Документ.Сотрудник);
		ЗаполненРебенок           = ЗаполненДокументОснование Или ЗначениеЗаполнено(Документ.Ребенок);
	КонецЕсли;
	
	// Реквизиты организации.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "ТекущаяДатаСеанса";
	Группа.ИмяГруппы           = "ТекущаяДатаСеанса";
	Группа.ФиксацияГруппы      = Ложь;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ВерсияСпецификации");
	
	// Реквизиты оснований.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения      = "ДокументОснование";
	Группа.ИмяГруппы                = "ДокументОснование";
	Группа.ФиксацияГруппы           = Ложь;
	Группа.ОтображатьПредупреждение = Истина;
	
	Если ЗаполненДокументОснование Тогда
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "Организация");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "Сотрудник");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "Ребенок", Ложь);
		
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "НомерЛН");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ДатаНачалаСобытия");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИдентификаторСтрокиРеестра");
		
		// Далее - фиксируемые группы без предупреждений.
		Группа.ФиксацияГруппы           = Истина;
		Группа.ОтображатьПредупреждение = Ложь;
		Группа.ИмяГруппы = "ОтпускПоУходу";
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ОтпускПоУходуДатаНачала");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ОтпускПоУходуДатаОкончания");
		Группа.ИмяГруппы = "СвидетельствоОРождении";
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СвидетельствоОРожденииСерия");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СвидетельствоОРожденииНомер");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СвидетельствоОРожденииДатаВыдачи");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СвидетельствоОРожденииКемВыдано");
		Группа.ИмяГруппы = "СправкаОРождении";
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СправкаОРожденииФорма");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СправкаОРожденииНомер");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СправкаОРожденииДатаВыдачи");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СправкаОРожденииКемВыдана");
		Группа.ИмяГруппы = "ИнойДокументОРождении";
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИнойДокументОРожденииСерия");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИнойДокументОРожденииНомер");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИнойДокументОРожденииДатаВыдачи");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИнойДокументОРожденииКемВыдан");
		Группа.ИмяГруппы = "АктоваяЗаписьОРождении";
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АктоваяЗаписьОРожденииНомер");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АктоваяЗаписьОРожденииДата");
	КонецЕсли;
	
	// Реквизиты организации.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "Организация";
	Группа.ИмяГруппы           = "Организация";
	Группа.ФиксацияГруппы      = Ложь;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "Страхователь");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "НомерСтрахователяФСС");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "КодПодчиненностиФСС");
	
	// Сотрудник: Кадровые данные: Независимые.
	ГруппаКадровыеДанные = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	ГруппаКадровыеДанные.ОснованиеЗаполнения = "Сотрудник";
	ГруппаКадровыеДанные.ИмяГруппы           = "СотрудникКадровыеДанные";
	ГруппаКадровыеДанные.Используется        = ЗаполненСотрудник;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "СотрудникСНИЛС");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "СотрудникДатаРождения");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "СотрудникКатегория");
	
	// Кадровые данные: ФИО.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "Сотрудник";
	Группа.ИмяГруппы           = "ФИОСотрудника";
	Группа.ФиксацияГруппы      = Истина;
	Группа.Используется        = ЗаполненСотрудник;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СотрудникФамилия");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СотрудникИмя");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СотрудникОтчество");
	
	// Ребенок.
	Если ЗаполненРебенок Тогда
		// Кадровые данные: Независимые.
		ГруппаКадровыеДанные = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
		ГруппаКадровыеДанные.ОснованиеЗаполнения = "Ребенок";
		ГруппаКадровыеДанные.ИмяГруппы           = "СотрудникКадровыеДанные";
		ГруппаКадровыеДанные.ФиксацияГруппы      = Ложь;
		
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "РебенокКодСвязи");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "РебенокДатаРождения");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "РебенокСНИЛС");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "РебенокПол");
		
		// Кадровые данные: ФИО.
		Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
		Группа.ОснованиеЗаполнения = "Ребенок";
		Группа.ИмяГруппы           = "ФИОРебенка";
		Группа.ФиксацияГруппы      = Истина;
		
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РебенокФамилия");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РебенокИмя");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РебенокОтчество");
	КонецЕсли;
	
	Возврат Новый ФиксированноеСоответствие(ФиксируемыеРеквизиты);
КонецФункции

Процедура ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, ИмяРеквизита, ОтображатьПредупреждение = Неопределено)
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(
		ФиксируемыеРеквизиты,
		Группа,
		ИмяРеквизита,
		ОтображатьПредупреждение);
КонецПроцедуры

#КонецОбласти

#Область ТекстXML

Функция ПоддерживаемыеВерсииСпецификации() Экспорт
	Список = Новый СписокЗначений;
	Список.Добавить("", "2.20");
	Список.Добавить("2.34", "2.34");
	Возврат Список;
КонецФункции

Функция ОсобенностиВыгрузки(Документ) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Версия_2_34", СЭДОФСС.ВерсияЧислом(Документ.ВерсияСпецификации) >= СЭДОФСС.ВерсияЧислом("2.34"));
	Возврат Результат;
КонецФункции

Процедура ВыгрузитьСведенияОбЭЛН(Документ, МенеджерXML, УзелДанных)
	МенеджерXML.ДобавитьУзел(УзелДанных, "lnCode", Документ.НомерЛН);
КонецПроцедуры

Процедура ВыгрузитьСведенияОЗастрахованномЛице(Документ, МенеджерXML, УзелДанных, ВидПособия)
	
	УзелСотрудник = МенеджерXML.ДобавитьУзел(УзелДанных, "insuredInfo");
	
	// СНИЛС.
	МенеджерXML.ДобавитьУзел(УзелСотрудник, "snils", УбратьПробелы(Документ.СотрудникСНИЛС));
	
	Если ВидПособия.ЭтоОтпускПоУходу Или ВидПособия.ЭтоПособиеПриРождении Тогда
		// ФИО.
		УзелФИО = МенеджерXML.ДобавитьУзел(УзелСотрудник, "fullName");
		МенеджерXML.ДобавитьУзел(УзелФИО, "person:firstName",  Документ.СотрудникИмя);
		МенеджерXML.ДобавитьУзел(УзелФИО, "person:lastName",   Документ.СотрудникФамилия);
		МенеджерXML.ДобавитьУзел(УзелФИО, "person:middleName", Документ.СотрудникОтчество, Истина);
		
		// Дата рождения.
		МенеджерXML.ДобавитьУзел(УзелСотрудник, "birthDate", Документ.СотрудникДатаРождения);
		
		// Код связи с ребенком: для 4го пособия - мать, отец, опекун; для 5го пособия - мать, отец, иной родственник, опекун.
		МенеджерXML.ДобавитьУзел(УзелСотрудник, "childRelType", Документ.РебенокКодСвязи);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьИнформациюОРебенке(Документ, МенеджерXML, УзелДанных)
	
	УзелРебенок = МенеджерXML.ДобавитьУзел(УзелДанных, "childInfo");
	
	// ФИО.
	УзелФИО = МенеджерXML.ДобавитьУзел(УзелРебенок, "fullName");
	МенеджерXML.ДобавитьУзел(УзелФИО, "person:firstName",  Документ.РебенокИмя);
	МенеджерXML.ДобавитьУзел(УзелФИО, "person:lastName",   Документ.РебенокФамилия);
	МенеджерXML.ДобавитьУзел(УзелФИО, "person:middleName", Документ.РебенокОтчество, Истина);
	
	// Дата рождения.
	МенеджерXML.ДобавитьУзел(УзелРебенок, "birthDate", Документ.РебенокДатаРождения);
	
	// СНИЛС или пол.
	Если ЗначениеЗаполнено(Документ.РебенокСНИЛС) Тогда
		МенеджерXML.ДобавитьУзел(УзелРебенок, "snils", УбратьПробелы(Документ.РебенокСНИЛС));
	Иначе
		Пол = ?(Документ.РебенокПол = Перечисления.ПолФизическогоЛица.Женский, "FEMALE", "MALE");
		МенеджерXML.ДобавитьУзел(УзелРебенок, "gender", Пол);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьОснованияДляНазначенияОтпускаПоУходу(Документ, МенеджерXML, УзелДанных)
	// Пример: МенеджерXML.ДобавитьУзел(Родитель, Имя, Значение = Неопределено, МожетОтсутствовать = Ложь, МожетБытьНеопределено = Ложь).
	
	УзелОснования = МенеджерXML.ДобавитьУзел(УзелДанных, "baseDocuments");
	
	// Период отпуска.
	УзелПериод = МенеджерXML.ДобавитьУзел(УзелОснования, "vocationPeriod");
	Если ЗначениеЗаполнено(Документ.ОтпускПоУходуДатаНачала) И ЗначениеЗаполнено(Документ.ОтпускПоУходуДатаОкончания) Тогда
		МенеджерXML.ДобавитьУзел(УзелПериод, "begin", Документ.ОтпускПоУходуДатаНачала);
		МенеджерXML.ДобавитьУзел(УзелПериод, "end",   Документ.ОтпускПоУходуДатаОкончания);
	КонецЕсли;
	
	УзелДокумент = МенеджерXML.ДобавитьУзел(УзелОснования, "identityDocument");
	
	Если ЗначениеЗаполнено(Документ.СвидетельствоОРожденииСерия)
		И ЗначениеЗаполнено(Документ.СвидетельствоОРожденииНомер)
		И ЗначениеЗаполнено(Документ.СвидетельствоОРожденииДатаВыдачи) Тогда
		// Свидетельство о рождении.
		Свидетельство = МенеджерXML.ДобавитьУзел(УзелДокумент, "birthCertificate");
		МенеджерXML.ДобавитьУзел(Свидетельство, "series",    Документ.СвидетельствоОРожденииСерия);
		МенеджерXML.ДобавитьУзел(Свидетельство, "number",    Документ.СвидетельствоОРожденииНомер);
		МенеджерXML.ДобавитьУзел(Свидетельство, "issueDate", Документ.СвидетельствоОРожденииДатаВыдачи);
		МенеджерXML.ДобавитьУзел(Свидетельство, "issuer",    Документ.СвидетельствоОРожденииКемВыдано);
	ИначеЕсли ЗначениеЗаполнено(Документ.ИнойДокументОРожденииДатаВыдачи)
		И ЗначениеЗаполнено(Документ.ИнойДокументОРожденииНомер) Тогда
		// Иной документ подтверждающий рождение ребенка.
		УзелИное = МенеджерXML.ДобавитьУзел(УзелДокумент, "birthDocOtherCountry");
		МенеджерXML.ДобавитьУзел(УзелИное, "series",    Документ.ИнойДокументОРожденииСерия, Истина, Ложь);
		МенеджерXML.ДобавитьУзел(УзелИное, "number",    Документ.ИнойДокументОРожденииНомер);
		МенеджерXML.ДобавитьУзел(УзелИное, "issueDate", Документ.ИнойДокументОРожденииДатаВыдачи);
		МенеджерXML.ДобавитьУзел(УзелИное, "issuer",    Документ.ИнойДокументОРожденииКемВыдан);
	КонецЕсли;
	
	// Актовая запись ЗАГС.
	Если ЗначениеЗаполнено(Документ.АктоваяЗаписьОРожденииНомер)
		И ЗначениеЗаполнено(Документ.АктоваяЗаписьОРожденииДата) Тогда
		УзелЗАГС = МенеджерXML.ДобавитьУзел(УзелДокумент, "birthRecord");
		МенеджерXML.ДобавитьУзел(УзелЗАГС, "number",    Документ.АктоваяЗаписьОРожденииНомер);
		МенеджерXML.ДобавитьУзел(УзелЗАГС, "issueDate", Документ.АктоваяЗаписьОРожденииДата);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьОснованияДляНазначенияПособияПриРождении(Документ, МенеджерXML, УзелДанных, Особенности)
	// Пример: МенеджерXML.ДобавитьУзел(Родитель, Имя, Значение = Неопределено, МожетОтсутствовать = Ложь, МожетБытьНеопределено = Ложь).
	
	УзелОснования = МенеджерXML.ДобавитьУзел(УзелДанных, "baseDocuments");
	
	УзелДокумент = МенеджерXML.ДобавитьУзел(УзелОснования, "identityDocument");
	
	Если ЗначениеЗаполнено(Документ.СвидетельствоОРожденииСерия)
		И ЗначениеЗаполнено(Документ.СвидетельствоОРожденииНомер)
		И ЗначениеЗаполнено(Документ.СвидетельствоОРожденииДатаВыдачи)
		И Не Особенности.Версия_2_34 Тогда
		// Свидетельство о рождении.
		Свидетельство = МенеджерXML.ДобавитьУзел(УзелДокумент, "birthCertificate");
		МенеджерXML.ДобавитьУзел(Свидетельство, "series",    Документ.СвидетельствоОРожденииСерия);
		МенеджерXML.ДобавитьУзел(Свидетельство, "number",    Документ.СвидетельствоОРожденииНомер);
		МенеджерXML.ДобавитьУзел(Свидетельство, "issueDate", Документ.СвидетельствоОРожденииДатаВыдачи);
		МенеджерXML.ДобавитьУзел(Свидетельство, "issuer",    Документ.СвидетельствоОРожденииКемВыдано);
	ИначеЕсли ЗначениеЗаполнено(Документ.СправкаОРожденииФорма)
		И ЗначениеЗаполнено(Документ.СправкаОРожденииНомер) Тогда
		// Справка о рождении.
		КодФормы = Перечисления.ФормыСправкиОРожденииРебенка.КодЗначения(Документ.СправкаОРожденииФорма);
		УзелИное = МенеджерXML.ДобавитьУзел(УзелДокумент, "birthReference");
		МенеджерXML.ДобавитьУзел(УзелИное, "number",    Документ.СправкаОРожденииНомер);
		МенеджерXML.ДобавитьУзел(УзелИное, "issueDate", Документ.СправкаОРожденииДатаВыдачи);
		МенеджерXML.ДобавитьУзел(УзелИное, "issuer",    Документ.СправкаОРожденииКемВыдана);
		МенеджерXML.ДобавитьУзел(УзелИное, "refType",   КодФормы);
	ИначеЕсли ЗначениеЗаполнено(Документ.ИнойДокументОРожденииДатаВыдачи)
		И ЗначениеЗаполнено(Документ.ИнойДокументОРожденииНомер) Тогда
		// Иной документ подтверждающий рождение ребенка.
		УзелИное = МенеджерXML.ДобавитьУзел(УзелДокумент, "birthDocOtherCountry");
		МенеджерXML.ДобавитьУзел(УзелИное, "series",    Документ.ИнойДокументОРожденииСерия, Истина, Ложь);
		МенеджерXML.ДобавитьУзел(УзелИное, "number",    Документ.ИнойДокументОРожденииНомер);
		МенеджерXML.ДобавитьУзел(УзелИное, "issueDate", Документ.ИнойДокументОРожденииДатаВыдачи);
		МенеджерXML.ДобавитьУзел(УзелИное, "issuer",    Документ.ИнойДокументОРожденииКемВыдан);
	КонецЕсли;
	
	// Актовая запись ЗАГС.
	Если ЗначениеЗаполнено(Документ.АктоваяЗаписьОРожденииНомер)
		И ЗначениеЗаполнено(Документ.АктоваяЗаписьОРожденииДата) Тогда
		УзелЗАГС = МенеджерXML.ДобавитьУзел(УзелДокумент, "birthRecord");
		МенеджерXML.ДобавитьУзел(УзелЗАГС, "number",    Документ.АктоваяЗаписьОРожденииНомер);
		МенеджерXML.ДобавитьУзел(УзелЗАГС, "issueDate", Документ.АктоваяЗаписьОРожденииДата);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПриЗаполненииПараметровОтправки

Функция ЗаполнитьТекстОшибкиПроверкиЗаполнения(СтрокаОтправки, ТекстИсключенияПриПроведении)
	СтрокаОтправки.Ошибки = ПолучитьСообщенияПользователю(Истина);
	
	Количество = СтрокаОтправки.Ошибки.Количество();
	Если Количество = 1 Тогда
		СтрокаОтправки.Результат = СтрокаОтправки.Ошибки[0].Текст;
	ИначеЕсли Количество > 1 Тогда
		СтрокаОтправки.Результат = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';%1 ошибка заполнения;;%1 ошибки заполнения;%1 ошибок заполнения;'"),
			Количество);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстИсключенияПриПроведении) Тогда
		Если СтрокаОтправки.Результат = "" Тогда
			СтрокаОтправки.Результат = СтрШаблон(НСтр("ru = 'Ошибка проведения: %1'"), ТекстИсключенияПриПроведении);
		Иначе
			СтрокаОтправки.Результат = СтрокаОтправки.Результат + ";" + Символы.ПС + СтрШаблон(НСтр("ru = 'И ошибка проведения: %1'"), ТекстИсключенияПриПроведении);
		КонецЕсли;
	КонецЕсли;
КонецФункции

#КонецОбласти

Функция ИменаПолейТребуемыхКадровыхДанных() Экспорт
	ИменаПолей = 
	"ГоловнаяОрганизация,
	|Организация,
	|ФизическоеЛицо,
	|Фамилия,
	|Имя,
	|Отчество,
	|СтраховойНомерПФР,
	|ДатаРождения,
	|Страна";
	Возврат ИменаПолей;
КонецФункции

Функция УбратьПробелы(Строка, УбратьТире = Истина)
	ПробелыИПереносыСтрок = " " + Символы.ВК + Символы.ВТаб + Символы.НПП + Символы.ПС + Символы.ПФ + Символы.Таб;
	Если УбратьТире Тогда
		ПробелыИПереносыСтрок = ПробелыИПереносыСтрок + "-";
	КонецЕсли;
	Возврат СтрСоединить(СтрРазделить(СокрЛП(Строка), ПробелыИПереносыСтрок, Ложь), "");
КонецФункции

Функция КоличествоОжидаемыхСообщений(ГоловнаяОрганизация, Организации) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 КАК Поле1
	|ИЗ
	|	РегистрСведений.РегистрацииИсходящихСообщенийОСтраховыхСлучаяхФСС КАК Регистрации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Регистрации.ГоловнаяОрганизация = Организации.Ссылка
	|ГДЕ
	|	Регистрации.Состояние = &Отправлен
	|	И Регистрации.ДатаОтправки > &ДатаНачалаАктуальности
	|	И Регистрации.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И Организации.Ссылка В(&Организации)";
	
	Запрос.УстановитьПараметр("Отправлен", Перечисления.СостоянияДокументаСЭДОФСС.Отправлен);
	Запрос.УстановитьПараметр("ДатаНачалаАктуальности", ДатаНачалаАктуальности());
	
	Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Регистрации.ГоловнаяОрганизация = &ГоловнаяОрганизация", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организации) Тогда
		Запрос.УстановитьПараметр("Организации", Организации);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Регистрации.ГоловнаяОрганизация = Организации.Ссылка", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Организации.Ссылка В(&Организации)", "");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выбрать().Количество();
КонецФункции

Функция ДатаНачалаАктуальности()
	Возврат НачалоДня(ДобавитьМесяц(ТекущаяДатаСеанса(), -1));
КонецФункции

#КонецОбласти

#КонецЕсли