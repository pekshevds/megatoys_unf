#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	// Взаиморасчеты
	СоответствиеТабличныхЧастейИРеквизитаЗаказ = Новый Соответствие;
	СоответствиеТабличныхЧастейИРеквизитаЗаказ.Вставить("Запасы", "Заказ");
	РасчетыПроведениеДокументов.ИнициализироватьДополнительныеСвойстваДляПроведения(ЭтотОбъект, ДополнительныеСвойства,
		Отказ, Истина, СоответствиеТабличныхЧастейИРеквизитаЗаказ);
	// Конец Взаиморасчеты
	
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныйСклад") Тогда
		
		МассивСтруктурныхЕдиниц = Новый Массив;
		МассивСтруктурныхЕдиниц.Добавить(СтруктурнаяЕдиница);
		
		МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам = СкладскойУчетСервер.МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам(МассивСтруктурныхЕдиниц);
		МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам = СкладскойУчетСервер.МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам(МассивСтруктурныхЕдиниц);
		
	Иначе
		МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам = Новый Массив;
		МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам = Новый Массив;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам", МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам);
	ДополнительныеСвойства.Вставить("МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам", МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам);
	
	// Инициализация данных документа.
	Документы.ПередачаТоваровМеждуОрганизациями.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	ДополнительныеСвойства.ДляПроведения.Вставить("ОрганизацияПолучатель", ОрганизацияПолучатель);
	
	// Взаиморасчеты
	// Проверим, можно ли продолжать и не было ли отказа в процедурах
	// формирования движений по взаиморасчетам.
	Если ДополнительныеСвойства.Отказ = Истина Тогда
		Отказ = Истина;
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// Конец Взаиморасчеты
	
	// Подготовка наборов записей.
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ПроведениеДокументовУНФ.ОтразитьДвижения("Запасы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыВРазрезеГТД", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("Закупки", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("Продажи", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыНаСкладах", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыКассовыйМетод", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыНераспределенные", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыОтложенные", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыСПоставщиками", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыСПокупателями", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыИАгентскиеУслугиПринятые", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыКРасходуСоСкладов", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыКПоступлениюНаСклады", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыПоНалогам", ТаблицыДляДвижений, Движения, Отказ);
	
	// СерииНоменклатуры
	ПроведениеДокументовУНФ.ОтразитьДвижения("СерииНоменклатурыГарантии", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДвиженияСерииНоменклатуры", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("СерииНоменклатуры", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("СерииНоменклатурыКРасходу", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("СерииНоменклатурыКПоступлению", ТаблицыДляДвижений, Движения, Отказ);
	
	ПроведениеДокументовУНФ.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);
	
	// Суммы документов для регламентированного учета
	ПроведениеДокументовУНФ.ОтразитьДвижения("СуммыДокументовРегламентированныйУчет",
		ДополнительныеСвойства.ТаблицыДляДвижений, Движения, Отказ);
	
	ПроведениеДокументовУНФ.ОтразитьДвижения("СуммыДокументовРегламентированныйУчет", ТаблицыДляДвижений, Движения,
		Отказ);
	
	// Взаиморасчеты
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОплатаДокументов", ТаблицыДляДвижений, Движения, Отказ);
	// Конец Взаиморасчеты
	
	// Интеркампани
	ПроведениеДокументовУНФ.ОтразитьДвижения("РезервыТоваровОрганизаций", ТаблицыДляДвижений, Движения, Отказ);
	// Конец Интеркампани
	
	// Запись наборов записей.
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	Если ДополнительныеСвойства.Свойство("ТаблицаДокументовДляИзменения")
		И ДополнительныеСвойства.ТаблицаДокументовДляИзменения.Количество() > 0
		Тогда
		РасчетыПроведениеДокументов.ОбработатьТаблицуДокументовДляИзмененияПриОтгрузке(ДополнительныеСвойства, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Контроль возникновения отрицательного остатка.
	Документы.ПередачаТоваровМеждуОрганизациями.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	ПроведениеДокументовУНФ.ЗакрытьМенеджерВременныхТаблиц(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПокупателя")] = "ЗаполнитьПоЗаказуПокупателя";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПриходнаяНакладная")] = "ЗаполнитьПоПриходнойНакладной";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПриходныйОрдер")] = "ЗаполнитьПоПриходномуОрдеру";
	СтратегияЗаполнения[Тип("ДокументСсылка.РасходныйОрдер")] = "ЗаполнитьПоРасходномуОрдеру";
	СтратегияЗаполнения[Тип("ДокументСсылка.ОтчетОРозничныхПродажах")] = "ЗаполнитьПоОтчетуОРозничныхПродажах";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")] = 
		"ЗаполнитьПоПередачеТоваровМеждуОрганизациями";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения, "ВидЦен");
	
	Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
		СтруктураДанные.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
		СтруктураДанные.Вставить("НалогообложениеНДС", НалогообложениеНДС);
		СтруктураДанные.Вставить("ДатаОбработки", Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтрокаТабличнойЧасти.Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		РассчитатьСуммыВСтрокеТЧ(СтрокаТабличнойЧасти);
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(Организация) Тогда
		КонтрагентВладелец = Организация.КонтрагентИнтеркампани;
	КонецЕсли;
	
	УчитыватьВНУ = Ложь;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ОчиститьДатуНомерВходящегоДокумента(ЭтотОбъект);
	
	Предоплата.Очистить();
	ПредоплатаПолучатель.Очистить();
	ШтрихкодыУпаковок.Очистить();
	
	СпособПродажиГИСМ = "";
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("Подразделение");
	
	ПроверитьЗаполненностьСтруктурнойЕдиницы(Отказ, ПроверяемыеРеквизиты);
	
	РасчетыРаботаСФормамиВызовСервера.ПроверитьЗаполнениеДокументаПредоплаты(КонтрагентПолучатель, ПроверяемыеРеквизиты);
	
	// Серии номенклатуры
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	СерииНоменклатурыУНФ.ПроверитьЗаполнениеСерийНоменклатуры(Отказ, Запасы, СерииНоменклатуры, 
		ДополнительныеПараметры);
	
	ПроверитьЗаполнениеНоменклатурыПоДоговоруОбслуживания(Отказ);
	
	// Наборы
	НаборыСервер.ПроверитьТабличнуюЧасть(ЭтотОбъект, "Запасы", Отказ);
	// КонецНаборы
	
	НоменклатураВДокументахСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, Отказ, Истина);
	
	ГрузовыеТаможенныеДекларацииСервер.ПриОбработкеПроверкиЗаполнения(Отказ, ЭтотОбъект);
	
	Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
		Если СтрокаТабличнойЧасти.Количество = 0 И СтрокаТабличнойЧасти.КоличествоПлан = 0 Тогда
			ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'В таблице ""Запасы"" для номенклатуры %2 в строке %3 не указано плановое и фактическое количество передачи.'"),
				СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.НомерСтроки);
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", СтрокаТабличнойЧасти.НомерСтроки, "Количество");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
		КонецЕсли; 
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныйСклад") Тогда
		
		Если ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
			
			УчетОстатковПоСкладскимОрдерам = СкладскойУчетСервер.УчетОстатковВРазрезеСкладскихОрдеров(СтруктурнаяЕдиница);
			
			Если УчетОстатковПоСкладскимОрдерам Тогда  
				ПроверяемыеРеквизиты.Добавить("ДокументПоступления");
			КонецЕсли;
			
			УчетОстатковПоСкладскимОрдерам = СкладскойУчетСервер.УчетОстатковВРазрезеСкладскихОрдеров(СтруктурнаяЕдиница, Ложь);
			
			Если УчетОстатковПоСкладскимОрдерам Тогда  
				ПроверяемыеРеквизиты.Добавить("ДокументОтгрузки");
			КонецЕсли;
			
		Иначе
			
			ТаблицаОрдерныхСкладовПоВидамУчета = СкладскойУчетСервер.ТаблицаОрдерныхСкладовПоВидамУчета();
			
			Если ТаблицаОрдерныхСкладовПоВидамУчета.Количество() Тогда
				ПараметрыПоиска = Новый Структура("СтруктурнаяЕдиница, Приход");
				
				Для Каждого СтрокаТабличнойЧасти Из Запасы Цикл
					
					ПараметрыПоиска.СтруктурнаяЕдиница = СтрокаТабличнойЧасти.СтруктурнаяЕдиница;
					
					ПараметрыПоиска.Приход = Истина;
					НайденныеСтроки = ТаблицаОрдерныхСкладовПоВидамУчета.НайтиСтроки(ПараметрыПоиска);
					УчетОстатковПоСкладскимОрдерам = НайденныеСтроки.Количество();
					
					Если Не ЗначениеЗаполнено(ДокументПоступления) И УчетОстатковПоСкладскимОрдерам Тогда
						ПроверяемыеРеквизиты.Добавить("ДокументПоступления");
						Прервать;
					КонецЕсли;
					
					ПараметрыПоиска.Расход = Истина;
					НайденныеСтроки = ТаблицаОрдерныхСкладовПоВидамУчета.НайтиСтроки(ПараметрыПоиска);
					УчетОстатковПоСкладскимОрдерам = НайденныеСтроки.Количество();
					
					Если Не ЗначениеЗаполнено(ДокументОтгрузки) И УчетОстатковПоСкладскимОрдерам Тогда
						ПроверяемыеРеквизиты.Добавить("ДокументОтгрузки");
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДокумента = Запасы.Итог("Всего") ;
	
	РасчетыПроведениеДокументов.ВыполнитьКонтрольСуммыОплаты(Предоплата.Итог("СуммаРасчетов"), СуммаДокумента, Отказ);

	Если НЕ ПолучитьФункциональнуюОпцию("СебестоимостьБезНДС") Тогда
		НДСВключатьВСтоимость = Истина;
	КонецЕсли;
	
	// Положение склада
	Если ПоложениеСклада<>Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
			СтрокаТабличнойЧасти.Ячейка = Ячейка;
		КонецЦикла;
	Иначе
		СтруктураПолей = ЗаполнениеОбъектовУНФ.СтруктурнаяЕдиницаИЯчейкаДляШапки(Запасы);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураПолей);
	КонецЕсли;
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность()
		И НЕ ПометкаУдаления Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	// Конец МобильноеПриложение
	
	// ИнтеграцияГИСМ
	ЕстьМаркируемаяПродукцияГИСМ = ИнтеграцияГИСМУНФ.ЕстьМаркируемаяПродукцияГИСМ(Запасы);
	// Конец ИнтеграцияГИСМ
	
	// Интеграция ВЕТИС
	ЕстьПодконтрольнаяПродукцияВЕТИС = ИнтеграцияВЕТИСУНФ.ЕстьПодконтрольнаяПродукцияВЕТИС(Запасы);
	// Конец ИнтеграцияВЕТИС
	
	РасчетыПроведениеДокументов.ПередЗаписьюНакладной(ЭтотОбъект);
	
	// До включения автоматических скидок будем считать, что скидки рассчитаны.
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		СкидкиРассчитаны = Истина;
	КонецЕсли;
	
	Если ЭтоНовый() И НЕ ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СчетаФактурыУНФ.ПриЗаписиДокументаОснованияСчетаФактуры(Ссылка, ДополнительныеСвойства, Ложь);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	ДополнительныеСвойства.ДляПроведения.Вставить("ОрганизацияПолучатель", ОрганизацияПолучатель);
	
	// Взаиморасчеты
	СоответствиеТабличныхЧастейИРеквизитаЗаказ = Новый Соответствие;
	СоответствиеТабличныхЧастейИРеквизитаЗаказ.Вставить("Запасы", "Заказ");
	РасчетыПроведениеДокументов.ИнициализироватьДополнительныеСвойстваДляПроведения(ЭтотОбъект, ДополнительныеСвойства, Отказ, Ложь, СоответствиеТабличныхЧастейИРеквизитаЗаказ);
	// Конец Взаиморасчеты
	
	// Подготовка наборов записей
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	Если ДополнительныеСвойства.Свойство("ТаблицаДокументовДляИзменения")
		И ДополнительныеСвойства.ТаблицаДокументовДляИзменения.Количество() > 0
		Тогда
		РасчетыПроведениеДокументов.ОбработатьТаблицуДокументовДляИзмененияПриОтгрузке(ДополнительныеСвойства, Отказ);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныйСклад") Тогда
		
		МассивСтруктурныхЕдиниц = Новый Массив;
		МассивСтруктурныхЕдиниц.Добавить(СтруктурнаяЕдиница);
		
		МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам = СкладскойУчетСервер.МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам(МассивСтруктурныхЕдиниц);
		МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам = СкладскойУчетСервер.МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам(МассивСтруктурныхЕдиниц);
		
	Иначе
		МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам = Новый Массив;
		МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам = Новый Массив;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам", МассивКонтроляПоЗапасамКПоступлениюПоСкладскимОрдерам);
	ДополнительныеСвойства.Вставить("МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам", МассивКонтроляПоЗапасамКОтгрузкеПоСкладскимОрдерам);
	
	// Контроль возникновения отрицательного остатка.
	Документы.ПередачаТоваровМеждуОрганизациями.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
	// Подчиненный счет-фактура
	Если Не Отказ Тогда
		СчетаФактурыУНФ.ОтменитьПроведениеПодчиненногоСчетаФактуры(Ссылка, Номер, Дата, ДополнительныеСвойства, Ложь);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыЗаполненияДокумента

// Процедура заполняет авансы.
//
Процедура ЗаполнитьПредоплату(ИмяТЧ) Экспорт
	
	ЭтотОбъект[ИмяТЧ].Очистить();
	
	ОстатокРасчетов = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
		Запасы.Итог("Всего"),
		?(Договор.ВалютаРасчетов = ВалютаДокумента, Курс, 1),
		Курс,
		?(Договор.ВалютаРасчетов = ВалютаДокумента, Кратность, 1),
		Кратность);	
	
	ПоПоставщикам = (ИмяТЧ = "ПредоплатаПолучатель");
	Запрос = НовыйЗапросРасшифровкиПредоплаты(ПоПоставщикам);
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		
		Если ОстатокРасчетов = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если ВыборкаРезультатаЗапроса.СуммаРасчетов <= ОстатокРасчетов Тогда // сумма остатка меньше или равна чем осталось распределить
			
			НоваяСтрока = ЭтотОбъект[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
			ОстатокРасчетов = ОстатокРасчетов - ВыборкаРезультатаЗапроса.СуммаРасчетов;
			
		Иначе // сумма остатка больше чем нужно распределить
			
			НоваяСтрока = ЭтотОбъект[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
			НоваяСтрока.СуммаРасчетов = ОстатокРасчетов;
			НоваяСтрока.СуммаПлатежа = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
				НоваяСтрока.СуммаРасчетов,
				ВыборкаРезультатаЗапроса.Курс,
				ВыборкаРезультатаЗапроса.КурсыВалютыДокументаКурс,
				ВыборкаРезультатаЗапроса.Кратность,
				ВыборкаРезультатаЗапроса.КурсыВалютыДокументаКратность);
			ОстатокРасчетов = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// АПК:299-выкл процедуры вызываются в ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент()

Процедура ЗаполнитьПоЗаказуПокупателя(ДокументСсылкаЗаказ) Экспорт
	
	Запрос = Новый Запрос;
	Документы.ЗаказПокупателя.ДобавитьТаблицуЗапасыВМенеджерВременныхТаблиц(ДокументСсылкаЗаказ, Запрос.МенеджерВременныхТаблиц, Ложь);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказ);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.Организация КАК ОрганизацияПолучатель,
	|	ТаблицаДокумента.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиница,
	|	ТаблицаДокумента.Ячейка КАК Ячейка,
	|	НастройкаПередачиТоваровМеждуОрганизациями.ВидЦены КАК ВидЦен,
	|	НастройкаПередачиТоваровМеждуОрганизациями.ОрганизацияВладелец КАК Организация,
	|	НастройкаПередачиТоваровМеждуОрганизациями.КонтрагентВладельца КАК КонтрагентВладелец,
	|	НастройкаПередачиТоваровМеждуОрганизациями.КонтрагентПродавец КАК КонтрагентПолучатель,
	|	НастройкаПередачиТоваровМеждуОрганизациями.Договор КАК Договор,
	|	ТаблицаДокумента.ПоложениеСклада КАК ПоложениеСклада
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаПередачиТоваровМеждуОрганизациями КАК
	|			НастройкаПередачиТоваровМеждуОрганизациями
	|		ПО ТаблицаДокумента.Организация = НастройкаПередачиТоваровМеждуОрганизациями.ОрганизацияПродавец
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧастьЗапасы.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧастьЗапасы.Номенклатура.ВидСтавкиНДС КАК ВидСтавкиНДС,
	|	ТабличнаяЧастьЗапасы.ТипНоменклатурыЗапас КАК ТипНоменклатурыЗапас,
	|	ТабличнаяЧастьЗапасы.Характеристика КАК Характеристика,
	|	ТабличнаяЧастьЗапасы.Партия КАК Партия,
	|	ТабличнаяЧастьЗапасы.СерииНоменклатуры КАК СерииНоменклатуры,
	|	ТабличнаяЧастьЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТабличнаяЧастьЗапасы.НомерГТД КАК НомерГТД,
	|	ТабличнаяЧастьЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабличнаяЧастьЗапасы.КлючСвязи КАК КлючСвязи,
	|	ТабличнаяЧастьЗапасы.Количество КАК Количество,
	|	ТабличнаяЧастьЗапасы.Вес КАК Вес,
	|	ТабличнаяЧастьЗапасы.Объем КАК Объем,
	|	ТабличнаяЧастьЗапасы.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиница,
	|	ТабличнаяЧастьЗапасы.Ячейка КАК Ячейка
	|ИЗ
	|	ВТЗаказПокупателяЗапасы КАК ТабличнаяЧастьЗапасы
	|ГДЕ
	|	ТабличнаяЧастьЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧастьЗапасы.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерииНоменклатуры.Серия,
	|	СерииНоменклатуры.КлючСвязи,
	|	СерииНоменклатуры.Количество
	|ИЗ
	|	Документ.ЗаказПокупателя.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.Ссылка = &Ссылка";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатыЗапроса[0].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаШапка = РезультатыЗапроса[0].Выбрать();
	ВыборкаШапка.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	ВидОперации = Перечисления.ВидыОперацийПередачаТоваровМеждуОрганизациями.РучноеЗаполнение;
	НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Организация, , Дата);
	
	Запасы.Очистить();
	ВыборкаЗапасы = РезультатыЗапроса[1].Выбрать();
	Пока ВыборкаЗапасы.Следующий() Цикл
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗапасы);
		Если НалогообложениеНДС <> ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
			Если НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") Тогда
				НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			Иначе
				НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ВыборкаЗапасы.ВидСтавкиНДС) Тогда
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(ВыборкаЗапасы.ВидСтавкиНДС);
		Иначе
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Организация.ВидСтавкиНДСПоУмолчанию);
		КонецЕсли;
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Номенклатура", НоваяСтрока.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", НоваяСтрока.Характеристика);
		СтруктураДанные.Вставить("Партия", НоваяСтрока.Партия);
		СтруктураДанные.Вставить("НалогообложениеНДС", НалогообложениеНДС);
		СтруктураДанные.Вставить("ДатаОбработки", Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", ?(ТипЗнч(НоваяСтрока.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения"), 
			НоваяСтрока.ЕдиницаИзмерения.Коэффициент, 1));
		НоваяСтрока.Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		НоваяСтрока.Сумма = НоваяСтрока.Цена * НоваяСтрока.Количество;
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
		Если СуммаВключаетНДС Тогда
			НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((СтавкаНДС + 100) / 100);
			НоваяСтрока.Всего = НоваяСтрока.Сумма;
		Иначе
			НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма * СтавкаНДС / 100;
			НоваяСтрока.Всего = НоваяСтрока.Сумма + НоваяСтрока.СуммаНДС;
		КонецЕсли; 
	КонецЦикла; 
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		
		СерииНоменклатуры.Очистить();
		
		ВыборкаСерии = РезультатыЗапроса[2].Выбрать();
		Пока ВыборкаСерии.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаСерии.КлючСвязи) Тогда
				Продолжить;
			КонецЕсли;
			СтрокиЗапасы = ТабличныеЧастиУНФКлиентСервер.СтрокиПоКлючуСвязи(Запасы, ВыборкаСерии.КлючСвязи);
			Если СтрокиЗапасы.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = СерииНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСерии);
		КонецЦикла;
		
	КонецЕсли;
	
	СерииНоменклатурыУНФ.УдалитьСерииНоменклатурыВТабличнойЧастиВЗависимостиОтПолитики(ЭтотОбъект);
	
КонецПроцедуры

Процедура ЗаполнитьПоПриходнойНакладной(ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения.ВидОперации <> Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя Тогда
		ТекстИсключения = НСтр("ru = 'Невозможен ввод обратной передачи товаров на основании операции - ""%1"".'");
		ТекстИсключения = СтрШаблон(ТекстИсключения, ДанныеЗаполнения.ВидОперации);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Организация.КонтрагентИнтеркампани КАК КонтрагентВладелец,
	|	ТаблицаДокумента.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаДокумента.Ячейка КАК Ячейка,
	|	ТаблицаДокумента.ПоложениеСклада КАК ПоложениеСклада
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧастьЗапасы.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧастьЗапасы.Номенклатура.ВидСтавкиНДС КАК ВидСтавкиНДС,
	|	ИСТИНА КАК ТипНоменклатурыЗапас,
	|	ТабличнаяЧастьЗапасы.Характеристика КАК Характеристика,
	|	ТабличнаяЧастьЗапасы.Партия КАК Партия,
	|	ТабличнаяЧастьЗапасы.СерииНоменклатуры КАК СерииНоменклатуры,
	|	ТабличнаяЧастьЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТабличнаяЧастьЗапасы.НомерГТД КАК НомерГТД,
	|	ТабличнаяЧастьЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабличнаяЧастьЗапасы.КлючСвязи КАК КлючСвязи,
	|	ТабличнаяЧастьЗапасы.Количество КАК Количество,
	|	ТабличнаяЧастьЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТабличнаяЧастьЗапасы.Ячейка КАК Ячейка
	|ИЗ
	|	Документ.ПриходнаяНакладная.Запасы КАК ТабличнаяЧастьЗапасы
	|ГДЕ
	|	ТабличнаяЧастьЗапасы.Ссылка = &Ссылка
	|	И ТабличнаяЧастьЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧастьЗапасы.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерииНоменклатуры.Серия,
	|	СерииНоменклатуры.КлючСвязи,
	|	СерииНоменклатуры.Количество
	|ИЗ
	|	Документ.ПриходнаяНакладная.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.Ссылка = &Ссылка";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатыЗапроса[0].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаШапка = РезультатыЗапроса[0].Выбрать();
	ВыборкаШапка.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	ВидОперации = Перечисления.ВидыОперацийПередачаТоваровМеждуОрганизациями.РучноеЗаполнение;
	НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Организация, , Дата);
	ЗаполнитьПолучателяПоНастройкам();
	Договор = Справочники.ДоговорыКонтрагентов.ПоКонтрагентуПоОрганизации(ОрганизацияПолучатель, Организация);
	ВидЦен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВидЦен");
	
	Запасы.Очистить();
	ВыборкаЗапасы = РезультатыЗапроса[1].Выбрать();
	Пока ВыборкаЗапасы.Следующий() Цикл
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗапасы);
		Если НалогообложениеНДС <> ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
			Если НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") Тогда
				НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			Иначе
				НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ВыборкаЗапасы.ВидСтавкиНДС) Тогда
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(ВыборкаЗапасы.ВидСтавкиНДС);
		Иначе
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Организация.ВидСтавкиНДСПоУмолчанию);
		КонецЕсли;
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Номенклатура", НоваяСтрока.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", НоваяСтрока.Характеристика);
		СтруктураДанные.Вставить("Партия", НоваяСтрока.Партия);
		СтруктураДанные.Вставить("НалогообложениеНДС", НалогообложениеНДС);
		СтруктураДанные.Вставить("ДатаОбработки", Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", ?(ТипЗнч(НоваяСтрока.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения"), 
			НоваяСтрока.ЕдиницаИзмерения.Коэффициент, 1));
		НоваяСтрока.Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		НоваяСтрока.Сумма = НоваяСтрока.Цена * НоваяСтрока.Количество;
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
		Если СуммаВключаетНДС Тогда
			НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((СтавкаНДС + 100) / 100);
			НоваяСтрока.Всего = НоваяСтрока.Сумма;
		Иначе
			НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма * СтавкаНДС / 100;
			НоваяСтрока.Всего = НоваяСтрока.Сумма + НоваяСтрока.СуммаНДС;
		КонецЕсли; 
	КонецЦикла; 
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		
		СерииНоменклатуры.Очистить();
		
		ВыборкаСерии = РезультатыЗапроса[2].Выбрать();
		Пока ВыборкаСерии.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаСерии.КлючСвязи) Тогда
				Продолжить;
			КонецЕсли;
			СтрокиЗапасы = ТабличныеЧастиУНФКлиентСервер.СтрокиПоКлючуСвязи(Запасы, ВыборкаСерии.КлючСвязи);
			Если СтрокиЗапасы.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = СерииНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСерии);
		КонецЦикла;
		
	КонецЕсли;
	
	СерииНоменклатурыУНФ.УдалитьСерииНоменклатурыВТабличнойЧастиВЗависимостиОтПолитики(ЭтотОбъект);
	
КонецПроцедуры

Процедура ЗаполнитьПоОтчетуОРозничныхПродажах(ДанныеЗаполнения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Организация.КонтрагентИнтеркампани КАК КонтрагентВладелец,
	|	ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти) КАК ПоложениеСклада
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧастьЗапасы.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧастьЗапасы.Номенклатура.ВидСтавкиНДС КАК ВидСтавкиНДС,
	|	ИСТИНА КАК ТипНоменклатурыЗапас,
	|	ТабличнаяЧастьЗапасы.Характеристика КАК Характеристика,
	|	ТабличнаяЧастьЗапасы.Партия КАК Партия,
	|	ТабличнаяЧастьЗапасы.СерииНоменклатуры КАК СерииНоменклатуры,
	|	ТабличнаяЧастьЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТабличнаяЧастьЗапасы.НомерГТД КАК НомерГТД,
	|	ТабличнаяЧастьЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабличнаяЧастьЗапасы.КлючСвязи КАК КлючСвязи,
	|	-ТабличнаяЧастьЗапасы.Количество КАК Количество,
	|	ТабличнаяЧастьЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТабличнаяЧастьЗапасы.Ячейка КАК Ячейка
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Запасы КАК ТабличнаяЧастьЗапасы
	|ГДЕ
	|	ТабличнаяЧастьЗапасы.Ссылка = &Ссылка
	|	И ТабличнаяЧастьЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И ТабличнаяЧастьЗапасы.Количество < 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧастьЗапасы.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерииНоменклатуры.Серия КАК Серия,
	|	СерииНоменклатуры.КлючСвязи КАК КлючСвязи,
	|	СерииНоменклатуры.Количество КАК Количество
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.Ссылка = &Ссылка";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатыЗапроса[0].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатыЗапроса[1].Пустой() Тогда
		ТекстИсключения = НСтр("ru = 'Невозможен ввод обратной передачи товаров на основании отчет о розничных продажах без возврата.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ВыборкаШапка = РезультатыЗапроса[0].Выбрать();
	ВыборкаШапка.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	ВидОперации = Перечисления.ВидыОперацийПередачаТоваровМеждуОрганизациями.РучноеЗаполнение;
	НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Организация, , Дата);
	ЗаполнитьПолучателяПоНастройкам();
	Договор = Справочники.ДоговорыКонтрагентов.ПоКонтрагентуПоОрганизации(ОрганизацияПолучатель, Организация);
	ВидЦен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВидЦен");
	
	ВыборкаЗапасы = РезультатыЗапроса[1].Выбрать();
	Запасы.Очистить();
	
	Пока ВыборкаЗапасы.Следующий() Цикл
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗапасы);
		Если НалогообложениеНДС <> ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
			Если НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") Тогда
				НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			Иначе
				НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ВыборкаЗапасы.ВидСтавкиНДС) Тогда
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(ВыборкаЗапасы.ВидСтавкиНДС);
		Иначе
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Организация.ВидСтавкиНДСПоУмолчанию);
		КонецЕсли;
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Номенклатура", НоваяСтрока.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", НоваяСтрока.Характеристика);
		СтруктураДанные.Вставить("Партия", НоваяСтрока.Партия);
		СтруктураДанные.Вставить("НалогообложениеНДС", НалогообложениеНДС);
		СтруктураДанные.Вставить("ДатаОбработки", Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", ?(ТипЗнч(НоваяСтрока.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения"), 
			НоваяСтрока.ЕдиницаИзмерения.Коэффициент, 1));
		НоваяСтрока.Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		НоваяСтрока.Сумма = НоваяСтрока.Цена * НоваяСтрока.Количество;
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
		Если СуммаВключаетНДС Тогда
			НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((СтавкаНДС + 100) / 100);
			НоваяСтрока.Всего = НоваяСтрока.Сумма;
		Иначе
			НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма * СтавкаНДС / 100;
			НоваяСтрока.Всего = НоваяСтрока.Сумма + НоваяСтрока.СуммаНДС;
		КонецЕсли; 
	КонецЦикла; 
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		
		СерииНоменклатуры.Очистить();
		
		ВыборкаСерии = РезультатыЗапроса[2].Выбрать();
		Пока ВыборкаСерии.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаСерии.КлючСвязи) Тогда
				Продолжить;
			КонецЕсли;
			СтрокиЗапасы = ТабличныеЧастиУНФКлиентСервер.СтрокиПоКлючуСвязи(Запасы, ВыборкаСерии.КлючСвязи);
			Если СтрокиЗапасы.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = СерииНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСерии);
		КонецЦикла;
		
	КонецЕсли;
	
	СерииНоменклатурыУНФ.УдалитьСерииНоменклатурыВТабличнойЧастиВЗависимостиОтПолитики(ЭтотОбъект);
	
КонецПроцедуры

Процедура ЗаполнитьПоПередачеТоваровМеждуОрганизациями(ДанныеЗаполнения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.ОрганизацияПолучатель КАК Организация,
	|	ТаблицаДокумента.КонтрагентПолучатель КАК КонтрагентВладелец,
	|	ТаблицаДокумента.Организация КАК ОрганизацияПолучатель,
	|	ТаблицаДокумента.КонтрагентВладелец КАК КонтрагентПолучатель,
	|	ТаблицаДокумента.ПоложениеСклада КАК ПоложениеСклада,
	|	ТаблицаДокумента.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаДокумента.Ячейка КАК Ячейка
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧастьЗапасы.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧастьЗапасы.Номенклатура.ВидСтавкиНДС КАК ВидСтавкиНДС,
	|	ИСТИНА КАК ТипНоменклатурыЗапас,
	|	ТабличнаяЧастьЗапасы.Характеристика КАК Характеристика,
	|	ТабличнаяЧастьЗапасы.Партия КАК Партия,
	|	ТабличнаяЧастьЗапасы.СерииНоменклатуры КАК СерииНоменклатуры,
	|	ТабличнаяЧастьЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТабличнаяЧастьЗапасы.НомерГТД КАК НомерГТД,
	|	ТабличнаяЧастьЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабличнаяЧастьЗапасы.КлючСвязи КАК КлючСвязи,
	|	ТабличнаяЧастьЗапасы.Количество КАК Количество,
	|	ТабличнаяЧастьЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТабличнаяЧастьЗапасы.Ячейка КАК Ячейка
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями.Запасы КАК ТабличнаяЧастьЗапасы
	|ГДЕ
	|	ТабличнаяЧастьЗапасы.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧастьЗапасы.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерииНоменклатуры.Серия КАК Серия,
	|	СерииНоменклатуры.КлючСвязи КАК КлючСвязи,
	|	СерииНоменклатуры.Количество КАК Количество
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.Ссылка = &Ссылка";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатыЗапроса[0].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатыЗапроса[1].Пустой() Тогда
		ТекстИсключения = НСтр("ru = 'Невозможен ввод обратной передачи товаров на основании отчет о розничных продажах без возврата.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ВыборкаШапка = РезультатыЗапроса[0].Выбрать();
	ВыборкаШапка.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	ВидОперации = Перечисления.ВидыОперацийПередачаТоваровМеждуОрганизациями.РучноеЗаполнение;
	НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Организация, , Дата);
	Договор = Справочники.ДоговорыКонтрагентов.ПоКонтрагентуПоОрганизации(ОрганизацияПолучатель, Организация);
	ВидЦен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВидЦен");
	
	ВыборкаЗапасы = РезультатыЗапроса[1].Выбрать();
	Запасы.Очистить();
	
	Пока ВыборкаЗапасы.Следующий() Цикл
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗапасы);
		Если НалогообложениеНДС <> ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
			Если НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") Тогда
				НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			Иначе
				НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ВыборкаЗапасы.ВидСтавкиНДС) Тогда
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(ВыборкаЗапасы.ВидСтавкиНДС);
		Иначе
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Организация.ВидСтавкиНДСПоУмолчанию);
		КонецЕсли;
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Номенклатура", НоваяСтрока.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", НоваяСтрока.Характеристика);
		СтруктураДанные.Вставить("Партия", НоваяСтрока.Партия);
		СтруктураДанные.Вставить("НалогообложениеНДС", НалогообложениеНДС);
		СтруктураДанные.Вставить("ДатаОбработки", Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", ?(ТипЗнч(НоваяСтрока.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения"), 
			НоваяСтрока.ЕдиницаИзмерения.Коэффициент, 1));
		НоваяСтрока.Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		НоваяСтрока.Сумма = НоваяСтрока.Цена * НоваяСтрока.Количество;
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
		Если СуммаВключаетНДС Тогда
			НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((СтавкаНДС + 100) / 100);
			НоваяСтрока.Всего = НоваяСтрока.Сумма;
		Иначе
			НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма * СтавкаНДС / 100;
			НоваяСтрока.Всего = НоваяСтрока.Сумма + НоваяСтрока.СуммаНДС;
		КонецЕсли; 
	КонецЦикла; 
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		
		СерииНоменклатуры.Очистить();
		
		ВыборкаСерии = РезультатыЗапроса[2].Выбрать();
		Пока ВыборкаСерии.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаСерии.КлючСвязи) Тогда
				Продолжить;
			КонецЕсли;
			СтрокиЗапасы = ТабличныеЧастиУНФКлиентСервер.СтрокиПоКлючуСвязи(Запасы, ВыборкаСерии.КлючСвязи);
			Если СтрокиЗапасы.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = СерииНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСерии);
		КонецЦикла;
		
	КонецЕсли;
	
	СерииНоменклатурыУНФ.УдалитьСерииНоменклатурыВТабличнойЧастиВЗависимостиОтПолитики(ЭтотОбъект);
	
КонецПроцедуры

// Процедура заполнения документа на основании приходного ордера.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоПриходномуОрдеру(ДанныеЗаполнения) Экспорт
	
	// Заполнение шапки документа.
	ДокументПоступления = ДанныеЗаполнения.Ссылка;
	ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика;
	ОрганизацияПолучатель = ДанныеЗаполнения.Организация;
	СтруктурнаяЕдиница = ДанныеЗаполнения.СтруктурнаяЕдиница;
	Ячейка = ДанныеЗаполнения.Ячейка;
	ДокументОснование = ДанныеЗаполнения.Ссылка;
	НалогиУНФ.ЗаполнитьНДСВключенВСтоимостьВДокументе(ЭтотОбъект);
	
	Запасы.Очистить();
	СерииНоменклатуры.Очистить();
	
	УчетГТД = ПолучитьФункциональнуюОпцию("УчетГТД");
	
	ВидУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиница, "ВидУчетаОрдерныхСкладов");
	
	Если ВидУчета = Перечисления.ВидыУчетаОрдерныхСкладов.УчетОстатковПоПрочимДокументам Тогда
		ТекстИсключения = НСтр("ru = 'Вид учета остатков на ордерном складе - по документам передачи товаров между организациями.
		|Ввод Передачи товароd между организациями на основании Складского ордера недоступен.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ПоложениеСклада = ДанныеЗаполнения.ПоложениеЯчейки;
	
	УчетОстатковПоСкладскимОрдерам = СкладскойУчетСервер.УчетОстатковВРазрезеСкладскихОрдеров(СтруктурнаяЕдиница);
	
	КонтрагентПолучатель = ДанныеЗаполнения.Контрагент;
	Договор = Справочники.ДоговорыКонтрагентов.ПоДокументуКонтрагентуОрганизацииИВидуОперации(Ссылка, КонтрагентПолучатель, ОрганизацияПолучатель, ВидОперации);
	
	Компания = Константы.УчетПоКомпании.Компания(ОрганизацияПолучатель);
	
	Если ВидУчета = Перечисления.ВидыУчетаОрдерныхСкладов.ПоСкладуВЦелом Тогда
		ЗаполнитьПоСкладскомуОрдеруБезУчетаОстатков(ДанныеЗаполнения,,Компания);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Договор) Или НЕ ЗначениеЗаполнено(КонтрагентПолучатель) Тогда
		
		ДоговорСтруктура = Справочники.ДоговорыКонтрагентов.СтруктураДляЗаполненияПоДоговоруКонтрагента(Договор, Истина);
		ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДоговорСтруктура);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПриходныйОрдерЗапасы.НомерСтроки КАК НомерСтроки,
		|	ПриходныйОрдерЗапасы.Номенклатура КАК Номенклатура,
		|	ПриходныйОрдерЗапасы.Характеристика КАК Характеристика,
		|	ПриходныйОрдерЗапасы.Партия КАК Партия,
		|	ПриходныйОрдерЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ПриходныйОрдерЗапасы.СерииНоменклатуры КАК СерииНоменклатуры,
		|	ПриходныйОрдерЗапасы.КлючСвязи КАК КлючСвязи,
		|	ПриходныйОрдерЗапасы.Количество КАК Количество,
		|	ВЫБОР
		|		КОГДА &КонтролироватьОстаткиПоДокументам
		|			ТОГДА &ДокументОснование
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДокументПоступления,
		|	ПриходныйОрдерЗапасы.Ячейка КАК Ячейка,
		|	&СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
		|ИЗ
		|	Документ.ПриходныйОрдер.Запасы КАК ПриходныйОрдерЗапасы
		|ГДЕ
		|	ПриходныйОрдерЗапасы.Ссылка = &ДокументОснование
		|	И ПриходныйОрдерЗапасы.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗапасыКПоступлениюНаСкладыОстатки.Номенклатура КАК Номенклатура,
		|	ЗапасыКПоступлениюНаСкладыОстатки.Характеристика КАК Характеристика,
		|	ЗапасыКПоступлениюНаСкладыОстатки.Партия КАК Партия,
		|	ВЫБОР
		|		КОГДА ЗапасыКПоступлениюНаСкладыОстатки.КоличествоОстаток < 0
		|			ТОГДА -ЗапасыКПоступлениюНаСкладыОстатки.КоличествоОстаток
		|		ИНАЧЕ ЗапасыКПоступлениюНаСкладыОстатки.КоличествоОстаток
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА &КонтролироватьОстаткиПоДокументам
		|			ТОГДА &ДокументОснование
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДокументПоступления,
		|	&СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ЗапасыКПоступлениюНаСкладыОстатки.Ячейка КАК Ячейка
		|ПОМЕСТИТЬ КПоступлению
		|ИЗ
		|	РегистрНакопления.ЗапасыКПоступлениюНаСклады.Остатки(
		|			,
		|			Организация = &Организация
		|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница
		|				И ДокументОснование = &ДокументОснование) КАК ЗапасыКПоступлениюНаСкладыОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗапасыКПоступлениюНаСклады.Номенклатура,
		|	ЗапасыКПоступлениюНаСклады.Характеристика,
		|	ЗапасыКПоступлениюНаСклады.Партия,
		|	ВЫБОР
		|		КОГДА ЗапасыКПоступлениюНаСклады.Количество < 0
		|			ТОГДА -ЗапасыКПоступлениюНаСклады.Количество
		|		ИНАЧЕ ЗапасыКПоступлениюНаСклады.Количество
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &КонтролироватьОстаткиПоДокументам
		|			ТОГДА &ДокументОснование
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	&СтруктурнаяЕдиница,
		|	ЗапасыКПоступлениюНаСклады.Ячейка
		|ИЗ
		|	РегистрНакопления.ЗапасыКПоступлениюНаСклады КАК ЗапасыКПоступлениюНаСклады
		|ГДЕ
		|	ЗапасыКПоступлениюНаСклады.Регистратор = &Ссылка
		|	И ЗапасыКПоступлениюНаСклады.ДокументОснование = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КПоступлению.Номенклатура КАК Номенклатура,
		|	КПоступлению.Характеристика КАК Характеристика,
		|	КПоступлению.Партия КАК Партия,
		|	СУММА(КПоступлению.Количество) КАК Количество,
		|	КПоступлению.ДокументПоступления КАК ДокументПоступления,
		|	КПоступлению.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	КПоступлению.Ячейка КАК Ячейка
		|ИЗ
		|	КПоступлению КАК КПоступлению
		|
		|СГРУППИРОВАТЬ ПО
		|	КПоступлению.ДокументПоступления,
		|	КПоступлению.Ячейка,
		|	КПоступлению.Номенклатура,
		|	КПоступлению.Партия,
		|	КПоступлению.СтруктурнаяЕдиница,
		|	КПоступлению.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриходныйОрдерЗапасы.Номенклатура КАК Номенклатура,
		|	ПриходныйОрдерЗапасы.Характеристика КАК Характеристика,
		|	ПриходныйОрдерЗапасы.Партия КАК Партия,
		|	ПриходныйОрдерСерииНоменклатуры.Серия КАК Серия,
		|	ПриходныйОрдерЗапасы.КлючСвязи КАК КлючСвязи,
		|	ПриходныйОрдерСерииНоменклатуры.Количество КАК Количество
		|ИЗ
		|	Документ.ПриходныйОрдер.СерииНоменклатуры КАК ПриходныйОрдерСерииНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдер.Запасы КАК ПриходныйОрдерЗапасы
		|		ПО (ПриходныйОрдерСерииНоменклатуры.Ссылка = &ДокументОснование)
		|			И (ПриходныйОрдерЗапасы.Ссылка = &ДокументОснование)
		|			И (ПриходныйОрдерЗапасы.КлючСвязи = ПриходныйОрдерСерииНоменклатуры.КлючСвязи)
		|ГДЕ
		|	ПриходныйОрдерЗапасы.Ссылка = &ДокументОснование
		|	И ПриходныйОрдерСерииНоменклатуры.Ссылка.Ссылка = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СерииНоменклатурыКПоступлениюОстатки.Серия КАК Серия,
		|	СерииНоменклатурыКПоступлениюОстатки.КоличествоОстаток КАК Количество,
		|	СерииНоменклатурыКПоступлениюОстатки.Номенклатура КАК Номенклатура,
		|	СерииНоменклатурыКПоступлениюОстатки.Характеристика КАК Характеристика,
		|	СерииНоменклатурыКПоступлениюОстатки.Партия КАК Партия
		|ПОМЕСТИТЬ ОстаткиСерииИтог
		|ИЗ
		|	РегистрНакопления.СерииНоменклатурыКПоступлению.Остатки(
		|			,
		|			Организация = &Организация
		|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница
		|				И ДокументОснование = &ДокументОснование) КАК СерииНоменклатурыКПоступлениюОстатки
		|ГДЕ
		|	СерииНоменклатурыКПоступлениюОстатки.КоличествоОстаток > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СерииНоменклатурыКПоступлению1.Серия,
		|	СерииНоменклатурыКПоступлению1.Количество,
		|	СерииНоменклатурыКПоступлению1.Номенклатура,
		|	СерииНоменклатурыКПоступлению1.Характеристика,
		|	СерииНоменклатурыКПоступлению1.Партия
		|ИЗ
		|	РегистрНакопления.СерииНоменклатурыКПоступлению КАК СерииНоменклатурыКПоступлению1
		|ГДЕ
		|	СерииНоменклатурыКПоступлению1.Регистратор = &Ссылка
		|	И СерииНоменклатурыКПоступлению1.ДокументОснование = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиСерииИтог.Серия КАК Серия,
		|	СУММА(ОстаткиСерииИтог.Количество) КАК Количество,
		|	ОстаткиСерииИтог.Номенклатура КАК Номенклатура,
		|	ОстаткиСерииИтог.Характеристика КАК Характеристика,
		|	ОстаткиСерииИтог.Партия КАК Партия
		|ИЗ
		|	ОстаткиСерииИтог КАК ОстаткиСерииИтог
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиСерииИтог.Серия,
		|	ОстаткиСерииИтог.Характеристика,
		|	ОстаткиСерииИтог.Партия,
		|	ОстаткиСерииИтог.Номенклатура");
		
		КонтролироватьОстаткиПоДокументам = ВидУчета = Перечисления.ВидыУчетаОрдерныхСкладов.УчетОстатковПоСкладскимОрдерам;
		Запрос.УстановитьПараметр("ДокументОснование", ?(КонтролироватьОстаткиПоДокументам, ДанныеЗаполнения, Неопределено));
		
		Запрос.УстановитьПараметр("Организация", Компания);
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Запрос.УстановитьПараметр("КонтролироватьОстаткиПоДокументам", Истина);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		Если РезультатыЗапроса[2].Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаСерииНоменклатуры = РезультатыЗапроса[3].Выгрузить();
		ТаблицаОстаткиСерииНоменклатуры = РезультатыЗапроса[5].Выгрузить();
		ТаблицаОстаткиЗапасы = РезультатыЗапроса[2].Выгрузить();
		
		ВыборкаЗапасы = РезультатыЗапроса[0].Выбрать();
		
		ПараметрыПоискаСерии = Новый Структура("КлючСвязи");
		
		Если СкладскойУчетСервер.КонтролироватьОстаткиПоЯчейкамКПоступлениюОтгрзуке(СтруктурнаяЕдиница) Тогда
			ПараметрыПоискаОстаткиЗапасы = Новый Структура("Номенклатура, Характеристика, Партия, Ячейка");
		Иначе
			ПараметрыПоискаОстаткиЗапасы = Новый Структура("Номенклатура, Характеристика, Партия");
		КонецЕсли;
	
		ПараметрыПоискаОстаткиСерииНоменклатуры = Новый Структура("Номенклатура, Характеристика, Партия, Серия");
		
		ОблагаетсяНДС = НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		
		СтруктураЦен = Новый Структура;
		СтруктураЦен.Вставить("ВидЦен", ВидЦен);
		СтруктураЦен.Вставить("ЭтоНовыйОбъект", Истина);
		СтруктураЦен.Вставить("ДатаОбработки", ТекущаяДатаСеанса());
		СтруктураЦен.Вставить("Номенклатура", Неопределено);
		СтруктураЦен.Вставить("Коэффициент", 1);
		СтруктураЦен.Вставить("ВалютаДокумента", ВалютаДокумента);
		СтруктураЦен.Вставить("Характеристика", Неопределено);
		СтруктураЦен.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
		
		ДанныеСтроки = Новый Структура;
		ДанныеСтроки.Вставить("Количество", 1);
		ДанныеСтроки.Вставить("Цена", 0);
		ДанныеСтроки.Вставить("Сумма", 0);
		ДанныеСтроки.Вставить("ПроцентСкидкиНаценки", 0);
		ДанныеСтроки.Вставить("СуммаСкидкиНаценки", 0);
		ДанныеСтроки.Вставить("СтавкаНДС", Неопределено);
		ДанныеСтроки.Вставить("СуммаНДС", 0);
		ДанныеСтроки.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
		ДанныеСтроки.Вставить("Всего", 0);
		
		Пока ВыборкаЗапасы.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ВыборкаЗапасы.Количество) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ПараметрыПоискаОстаткиЗапасы, ВыборкаЗапасы);
			НайденныеОстаткиЗапасы = ТаблицаОстаткиЗапасы.НайтиСтроки(ПараметрыПоискаОстаткиЗапасы);
			
			Если Не НайденныеОстаткиЗапасы.Количество() Или (НайденныеОстаткиЗапасы.Количество() И НайденныеОстаткиЗапасы[0].Количество = 0) Тогда
				Продолжить
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ПараметрыПоискаСерии, ВыборкаЗапасы);
			НайденныеСерии = ТаблицаСерииНоменклатуры.НайтиСтроки(ПараметрыПоискаСерии);
			
			КоличествоСерий = 0;
			ИспользуютсяСерииВСтроке = Ложь;
			Для Каждого СтрокаСерии Из НайденныеСерии Цикл
				
				ИспользуютсяСерииВСтроке = Истина;
				
				ЗаполнитьЗначенияСвойств(ПараметрыПоискаОстаткиСерииНоменклатуры, СтрокаСерии);
				НайденныеОстаткиСерий = ТаблицаОстаткиСерииНоменклатуры.НайтиСтроки(ПараметрыПоискаОстаткиСерииНоменклатуры);
				
				Если Не НайденныеОстаткиСерий.Количество() Или (НайденныеОстаткиСерий.Количество() И НайденныеОстаткиСерий[0].Количество = 0) Тогда
					Продолжить
				КонецЕсли;
				
				ОстатокСерий = НайденныеОстаткиСерий[0];
				
				Если Не ОстатокСерий.Количество > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрокаСерии = СерииНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, СтрокаСерии); 
				
				Если НоваяСтрокаСерии.Количество >= ОстатокСерий.Количество Тогда
					НоваяСтрокаСерии.Количество = ОстатокСерий.Количество;
				КонецЕсли;
				
				ОстатокСерий.Количество = ОстатокСерий.Количество - НоваяСтрокаСерии.Количество;
				
				КоличествоСерий = КоличествоСерий + НоваяСтрокаСерии.Количество;
				
			КонецЦикла;
			
			Если ИспользуютсяСерииВСтроке И КоличествоСерий = 0 Тогда
				Продолжить
			КонецЕсли;
			
			ОстатокЗапасов = НайденныеОстаткиЗапасы[0];
			
			НоваяСтрокаЗапасы = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЗапасы, ВыборкаЗапасы);
			НоваяСтрокаЗапасы.ТипНоменклатурыЗапас = Истина;
			
			Если ТипЗнч(НоваяСтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
				
				КоличествоВСтрокеЗапасов = ?(КоличествоСерий > 0, КоличествоСерий, НоваяСтрокаЗапасы.Количество);
				
				Если КоличествоВСтрокеЗапасов >= ОстатокЗапасов.Количество Тогда
					КоличествоВСтрокеЗапасов = ОстатокЗапасов.Количество;
					ОстатокЗапасов.Количество = 0;
				Иначе
					ОстатокЗапасов.Количество = ОстатокЗапасов.Количество - КоличествоВСтрокеЗапасов;
				КонецЕсли;
				
				НоваяСтрокаЗапасы.Количество = КоличествоВСтрокеЗапасов;
				
			Иначе
				
				КоличествоСтрокиВЕдиницахХранения = НоваяСтрокаЗапасы.Количество * НоваяСтрокаЗапасы.ЕдиницаИзмерения.Коэффициент;
				КоличествоВСтрокеЗапасов = ?(КоличествоСерий > 0, КоличествоСерий, КоличествоСтрокиВЕдиницахХранения);
				
				Если КоличествоВСтрокеЗапасов >= ОстатокЗапасов.Количество Тогда
					КоличествоВСтрокеЗапасов = ОстатокЗапасов.Количество;
					ОстатокЗапасов.Количество = 0;
				Иначе
					ОстатокЗапасов.Количество = ОстатокЗапасов.Количество - КоличествоВСтрокеЗапасов;
				КонецЕсли;
				
				НоваяСтрокаЗапасы.Количество = КоличествоВСтрокеЗапасов/ НоваяСтрокаЗапасы.ЕдиницаИзмерения.Коэффициент;;
				
			КонецЕсли;
			
			Если СерииНоменклатурыУНФ.ИспользоватьСерииНоменклатурыОстатки() = Истина Тогда
				НоваяСтрокаЗапасы.СерииНоменклатуры = СерииНоменклатурыУНФ.ПредставлениеСерийНоменклатуры(СерииНоменклатуры, НоваяСтрокаЗапасы.КлючСвязи)
			КонецЕсли;
			
			Если ОблагаетсяНДС Тогда
				Партия = НоваяСтрокаЗапасы.Партия;
				Если ЗначениеЗаполнено(Партия) И Партия.Статус = Перечисления.СтатусыПартий.ТоварыНаКомиссии 
					И Партия.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
					
					НоваяСтрокаЗапасы.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.БезНДС);;
				Иначе
					
					Если ЗначениеЗаполнено(НоваяСтрокаЗапасы.Номенклатура.ВидСтавкиНДС) Тогда
						НоваяСтрокаЗапасы.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(НоваяСтрокаЗапасы.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
					Иначе
						НоваяСтрокаЗапасы.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Компания.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				
				Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
					СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
				Иначе
					СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
				КонецЕсли;
				
				НоваяСтрокаЗапасы.СтавкаНДС = СтавкаНДСПоУмолчанию;
				
			КонецЕсли;
			
			Если УчетГТД Тогда
				НоваяСтрокаЗапасы.СтранаПроисхождения = НоваяСтрокаЗапасы.Номенклатура.СтранаПроисхождения;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтруктураЦен, НоваяСтрокаЗапасы);
			НоваяСтрокаЗапасы.Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураЦен);
			
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, НоваяСтрокаЗапасы);
			ЗаполнениеОбъектовУНФ.РассчитатьСуммыВСтрокеТабличнойЧасти(ДанныеСтроки);
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЗапасы, ДанныеСтроки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	СерииНоменклатурыУНФ.УдалитьСерииНоменклатурыВТабличнойЧастиВЗависимостиОтПолитики(ЭтотОбъект);
	
КонецПроцедуры // ЗаполнитьПоПриходныйОрдер()

// Процедура заполнения документа на основании расходного ордера.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоРасходномуОрдеру(ДанныеЗаполнения) Экспорт
	
	// Заполнение шапки документа.
	ДокументОтгрузки = ДанныеЗаполнения.Ссылка;
	ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика;
	Организация = ДанныеЗаполнения.Организация;
	СтруктурнаяЕдиница = ДанныеЗаполнения.СтруктурнаяЕдиница;
	Ячейка = ДанныеЗаполнения.Ячейка;
	ДокументОснование = ДанныеЗаполнения.Ссылка;
	НалогиУНФ.ЗаполнитьНДСВключенВСтоимостьВДокументе(ЭтотОбъект);
	
	Запасы.Очистить();
	СерииНоменклатуры.Очистить();
	
	УчетГТД = ПолучитьФункциональнуюОпцию("УчетГТД");
	
	ВидУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиница, "ВидУчетаОрдерныхСкладов");
	
	Если ВидУчета = Перечисления.ВидыУчетаОрдерныхСкладов.УчетОстатковПоПрочимДокументам Тогда
		ТекстИсключения = НСтр("ru = 'Вид учета остатков на ордерном складе - по документам передачи товаров между организациями.
		|Ввод Передачи товароd между организациями на основании Складского ордера недоступен.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ПоложениеСклада = ДанныеЗаполнения.ПоложениеЯчейки;
	
	Компания = Константы.УчетПоКомпании.Компания(Организация);
	
	Если ВидУчета = Перечисления.ВидыУчетаОрдерныхСкладов.ПоСкладуВЦелом Тогда
		ЗаполнитьПоСкладскомуОрдеруБезУчетаОстатков(ДанныеЗаполнения, Ложь, Компания);
		Возврат;
	КонецЕсли;
	
	УчетОстатковПоСкладскимОрдерам = СкладскойУчетСервер.УчетОстатковВРазрезеСкладскихОрдеров(СтруктурнаяЕдиница);
	
	КонтрагентВладелец = ДанныеЗаполнения.Контрагент;
	
	ДоговорСтруктура = Справочники.ДоговорыКонтрагентов.СтруктураДляЗаполненияПоДоговоруКонтрагента(Договор, Истина);
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДоговорСтруктура);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РасходныйОрдерЗапасы.НомерСтроки КАК НомерСтроки,
		|	РасходныйОрдерЗапасы.Номенклатура КАК Номенклатура,
		|	РасходныйОрдерЗапасы.Характеристика КАК Характеристика,
		|	РасходныйОрдерЗапасы.Партия КАК Партия,
		|	РасходныйОрдерЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	РасходныйОрдерЗапасы.СерииНоменклатуры КАК СерииНоменклатуры,
		|	РасходныйОрдерЗапасы.КлючСвязи КАК КлючСвязи,
		|	РасходныйОрдерЗапасы.Количество КАК Количество,
		|	ВЫБОР
		|		КОГДА &КонтролироватьОстаткиПоДокументам
		|			ТОГДА &ДокументОснование
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДокументПоступления,
		|	РасходныйОрдерЗапасы.Ячейка КАК Ячейка,
		|	&СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
		|ИЗ
		|	Документ.РасходныйОрдер.Запасы КАК РасходныйОрдерЗапасы
		|ГДЕ
		|	РасходныйОрдерЗапасы.Ссылка = &ДокументОснование
		|	И РасходныйОрдерЗапасы.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗапасыКРасходуСоСкладовОстатки.Номенклатура КАК Номенклатура,
		|	ЗапасыКРасходуСоСкладовОстатки.Характеристика КАК Характеристика,
		|	ЗапасыКРасходуСоСкладовОстатки.Партия КАК Партия,
		|	ВЫБОР
		|		КОГДА ЗапасыКРасходуСоСкладовОстатки.КоличествоОстаток < 0
		|			ТОГДА -ЗапасыКРасходуСоСкладовОстатки.КоличествоОстаток
		|		ИНАЧЕ ЗапасыКРасходуСоСкладовОстатки.КоличествоОстаток
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА &КонтролироватьОстаткиПоДокументам
		|			ТОГДА &ДокументОснование
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДокументПоступления,
		|	&СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ЗапасыКРасходуСоСкладовОстатки.Ячейка КАК Ячейка
		|ПОМЕСТИТЬ КПоступлению
		|ИЗ
		|	РегистрНакопления.ЗапасыКРасходуСоСкладов.Остатки(
		|			,
		|			Организация = &Организация
		|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница
		|				И ДокументОснование = &ДокументОснование) КАК ЗапасыКРасходуСоСкладовОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗапасыКРасходуСоСкладов.Номенклатура,
		|	ЗапасыКРасходуСоСкладов.Характеристика,
		|	ЗапасыКРасходуСоСкладов.Партия,
		|	ВЫБОР
		|		КОГДА ЗапасыКРасходуСоСкладов.Количество < 0
		|			ТОГДА -ЗапасыКРасходуСоСкладов.Количество
		|		ИНАЧЕ ЗапасыКРасходуСоСкладов.Количество
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &КонтролироватьОстаткиПоДокументам
		|			ТОГДА &ДокументОснование
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	&СтруктурнаяЕдиница,
		|	ЗапасыКРасходуСоСкладов.Ячейка
		|ИЗ
		|	РегистрНакопления.ЗапасыКРасходуСоСкладов КАК ЗапасыКРасходуСоСкладов
		|ГДЕ
		|	ЗапасыКРасходуСоСкладов.Регистратор = &Ссылка
		|	И ЗапасыКРасходуСоСкладов.ДокументОснование = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КПоступлению.Номенклатура КАК Номенклатура,
		|	КПоступлению.Характеристика КАК Характеристика,
		|	КПоступлению.Партия КАК Партия,
		|	СУММА(КПоступлению.Количество) КАК Количество,
		|	КПоступлению.ДокументПоступления КАК ДокументПоступления,
		|	КПоступлению.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	КПоступлению.Ячейка КАК Ячейка
		|ИЗ
		|	КПоступлению КАК КПоступлению
		|
		|СГРУППИРОВАТЬ ПО
		|	КПоступлению.ДокументПоступления,
		|	КПоступлению.Ячейка,
		|	КПоступлению.Номенклатура,
		|	КПоступлению.Партия,
		|	КПоступлению.СтруктурнаяЕдиница,
		|	КПоступлению.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасходныйОрдерЗапасы.Номенклатура КАК Номенклатура,
		|	РасходныйОрдерЗапасы.Характеристика КАК Характеристика,
		|	РасходныйОрдерЗапасы.Партия КАК Партия,
		|	РасходныйОрдерСерииНоменклатуры.Серия КАК Серия,
		|	РасходныйОрдерЗапасы.КлючСвязи КАК КлючСвязи,
		|	РасходныйОрдерСерииНоменклатуры.Количество КАК Количество
		|ИЗ
		|	Документ.РасходныйОрдер.СерииНоменклатуры КАК РасходныйОрдерСерииНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдер.Запасы КАК РасходныйОрдерЗапасы
		|		ПО (РасходныйОрдерСерииНоменклатуры.Ссылка = &ДокументОснование)
		|			И (РасходныйОрдерЗапасы.Ссылка = &ДокументОснование)
		|			И (РасходныйОрдерЗапасы.КлючСвязи = РасходныйОрдерСерииНоменклатуры.КлючСвязи)
		|ГДЕ
		|	РасходныйОрдерЗапасы.Ссылка = &ДокументОснование
		|	И РасходныйОрдерСерииНоменклатуры.Ссылка = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СерииНоменклатурыКРасходуОстатки.Серия КАК Серия,
		|	-СерииНоменклатурыКРасходуОстатки.КоличествоОстаток КАК Количество,
		|	СерииНоменклатурыКРасходуОстатки.Номенклатура КАК Номенклатура,
		|	СерииНоменклатурыКРасходуОстатки.Характеристика КАК Характеристика,
		|	СерииНоменклатурыКРасходуОстатки.Партия КАК Партия
		|ПОМЕСТИТЬ ОстаткиСерииИтог
		|ИЗ
		|	РегистрНакопления.СерииНоменклатурыКРасходу.Остатки(
		|			,
		|			Организация = &Организация
		|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница
		|				И ДокументОснование = &ДокументОснование) КАК СерииНоменклатурыКРасходуОстатки
		|ГДЕ
		|	СерииНоменклатурыКРасходуОстатки.КоличествоОстаток < 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СерииНоменклатурыКРасходу.Серия,
		|	СерииНоменклатурыКРасходу.Количество,
		|	СерииНоменклатурыКРасходу.Номенклатура,
		|	СерииНоменклатурыКРасходу.Характеристика,
		|	СерииНоменклатурыКРасходу.Партия
		|ИЗ
		|	РегистрНакопления.СерииНоменклатурыКРасходу КАК СерииНоменклатурыКРасходу
		|ГДЕ
		|	СерииНоменклатурыКРасходу.Регистратор = &Ссылка
		|	И СерииНоменклатурыКРасходу.ДокументОснование = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиСерииИтог.Серия КАК Серия,
		|	СУММА(ОстаткиСерииИтог.Количество) КАК Количество,
		|	ОстаткиСерииИтог.Номенклатура КАК Номенклатура,
		|	ОстаткиСерииИтог.Характеристика КАК Характеристика,
		|	ОстаткиСерииИтог.Партия КАК Партия
		|ИЗ
		|	ОстаткиСерииИтог КАК ОстаткиСерииИтог
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиСерииИтог.Серия,
		|	ОстаткиСерииИтог.Характеристика,
		|	ОстаткиСерииИтог.Партия,
		|	ОстаткиСерииИтог.Номенклатура");
		
		КонтролироватьОстаткиПоДокументам = ВидУчета = Перечисления.ВидыУчетаОрдерныхСкладов.УчетОстатковПоСкладскимОрдерам;
		Запрос.УстановитьПараметр("ДокументОснование", ?(КонтролироватьОстаткиПоДокументам, ДанныеЗаполнения, Неопределено));
		
		Запрос.УстановитьПараметр("Организация", Компания);
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Запрос.УстановитьПараметр("КонтролироватьОстаткиПоДокументам", Истина);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		Если РезультатыЗапроса[2].Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаСерииНоменклатуры = РезультатыЗапроса[3].Выгрузить();
		ТаблицаОстаткиСерииНоменклатуры = РезультатыЗапроса[5].Выгрузить();
		ТаблицаОстаткиЗапасы = РезультатыЗапроса[2].Выгрузить();
		
		ВыборкаЗапасы = РезультатыЗапроса[0].Выбрать();
		
		ПараметрыПоискаСерии = Новый Структура("КлючСвязи");
		
		Если СкладскойУчетСервер.КонтролироватьОстаткиПоЯчейкамКПоступлениюОтгрзуке(СтруктурнаяЕдиница) Тогда
			ПараметрыПоискаОстаткиЗапасы = Новый Структура("Номенклатура, Характеристика, Партия, Ячейка");
		Иначе
			ПараметрыПоискаОстаткиЗапасы = Новый Структура("Номенклатура, Характеристика, Партия");
		КонецЕсли;
	
		ПараметрыПоискаОстаткиСерииНоменклатуры = Новый Структура("Номенклатура, Характеристика, Партия, Серия");
		
		ОблагаетсяНДС = НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		
		Пока ВыборкаЗапасы.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ВыборкаЗапасы.Количество) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ПараметрыПоискаОстаткиЗапасы, ВыборкаЗапасы);
			НайденныеОстаткиЗапасы = ТаблицаОстаткиЗапасы.НайтиСтроки(ПараметрыПоискаОстаткиЗапасы);
			
			Если Не НайденныеОстаткиЗапасы.Количество() Или (НайденныеОстаткиЗапасы.Количество() И НайденныеОстаткиЗапасы[0].Количество = 0) Тогда
				Продолжить
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ПараметрыПоискаСерии, ВыборкаЗапасы);
			НайденныеСерии = ТаблицаСерииНоменклатуры.НайтиСтроки(ПараметрыПоискаСерии);
			
			КоличествоСерий = 0;
			ИспользуютсяСерииВСтроке = Ложь;
			Для Каждого СтрокаСерии Из НайденныеСерии Цикл
				
				ИспользуютсяСерииВСтроке = Истина;
				
				ЗаполнитьЗначенияСвойств(ПараметрыПоискаОстаткиСерииНоменклатуры, СтрокаСерии);
				НайденныеОстаткиСерий = ТаблицаОстаткиСерииНоменклатуры.НайтиСтроки(ПараметрыПоискаОстаткиСерииНоменклатуры);
				
				Если Не НайденныеОстаткиСерий.Количество() Или (НайденныеОстаткиСерий.Количество() И НайденныеОстаткиСерий[0].Количество = 0) Тогда
					Продолжить
				КонецЕсли;
				
				ОстатокСерий = НайденныеОстаткиСерий[0];
				
				Если Не ОстатокСерий.Количество > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрокаСерии = СерииНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, СтрокаСерии); 
				
				Если НоваяСтрокаСерии.Количество >= ОстатокСерий.Количество Тогда
					НоваяСтрокаСерии.Количество = ОстатокСерий.Количество;
				КонецЕсли;
				
				ОстатокСерий.Количество = ОстатокСерий.Количество - НоваяСтрокаСерии.Количество;
				
				КоличествоСерий = КоличествоСерий + НоваяСтрокаСерии.Количество;
				
			КонецЦикла;
			
			Если ИспользуютсяСерииВСтроке И КоличествоСерий = 0 Тогда
				Продолжить
			КонецЕсли;
			
			ОстатокЗапасов = НайденныеОстаткиЗапасы[0];
			
			НоваяСтрокаЗапасы = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЗапасы, ВыборкаЗапасы);
			НоваяСтрокаЗапасы.ТипНоменклатурыЗапас = Истина;
			
			Если ТипЗнч(НоваяСтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
				
				КоличествоВСтрокеЗапасов = ?(КоличествоСерий > 0, КоличествоСерий, НоваяСтрокаЗапасы.Количество);
				
				Если КоличествоВСтрокеЗапасов >= ОстатокЗапасов.Количество Тогда
					КоличествоВСтрокеЗапасов = ОстатокЗапасов.Количество;
					ОстатокЗапасов.Количество = 0;
				Иначе
					ОстатокЗапасов.Количество = ОстатокЗапасов.Количество - КоличествоВСтрокеЗапасов;
				КонецЕсли;
				
				НоваяСтрокаЗапасы.Количество = КоличествоВСтрокеЗапасов;
				
			Иначе
				
				КоличествоСтрокиВЕдиницахХранения = НоваяСтрокаЗапасы.Количество * НоваяСтрокаЗапасы.ЕдиницаИзмерения.Коэффициент;
				КоличествоВСтрокеЗапасов = ?(КоличествоСерий > 0, КоличествоСерий, КоличествоСтрокиВЕдиницахХранения);
				
				Если КоличествоВСтрокеЗапасов >= ОстатокЗапасов.Количество Тогда
					КоличествоВСтрокеЗапасов = ОстатокЗапасов.Количество;
					ОстатокЗапасов.Количество = 0;
				Иначе
					ОстатокЗапасов.Количество = ОстатокЗапасов.Количество - КоличествоВСтрокеЗапасов;
				КонецЕсли;
				
				НоваяСтрокаЗапасы.Количество = КоличествоВСтрокеЗапасов/ НоваяСтрокаЗапасы.ЕдиницаИзмерения.Коэффициент;;
				
			КонецЕсли;
			
			Если СерииНоменклатурыУНФ.ИспользоватьСерииНоменклатурыОстатки() = Истина Тогда
				НоваяСтрокаЗапасы.СерииНоменклатуры = СерииНоменклатурыУНФ.ПредставлениеСерийНоменклатуры(СерииНоменклатуры, НоваяСтрокаЗапасы.КлючСвязи)
			КонецЕсли;
			
			Если ОблагаетсяНДС Тогда
				Партия = НоваяСтрокаЗапасы.Партия;
				Если ЗначениеЗаполнено(Партия) И Партия.Статус = Перечисления.СтатусыПартий.ТоварыНаКомиссии 
					И Партия.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
					
					НоваяСтрокаЗапасы.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.БезНДС);;
				Иначе
					
					Если ЗначениеЗаполнено(НоваяСтрокаЗапасы.Номенклатура.ВидСтавкиНДС) Тогда
						НоваяСтрокаЗапасы.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(НоваяСтрокаЗапасы.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
					Иначе
						НоваяСтрокаЗапасы.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Компания.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				
				Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
					СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
				Иначе
					СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
				КонецЕсли;
				
				НоваяСтрокаЗапасы.СтавкаНДС = СтавкаНДСПоУмолчанию;
				
			КонецЕсли;
			
			Если УчетГТД Тогда
				НоваяСтрокаЗапасы.СтранаПроисхождения = НоваяСтрокаЗапасы.Номенклатура.СтранаПроисхождения;
			КонецЕсли;
			
		КонецЦикла;
		
		СерииНоменклатурыУНФ.УдалитьСерииНоменклатурыВТабличнойЧастиВЗависимостиОтПолитики(ЭтотОбъект);
	
КонецПроцедуры // ЗаполнитьПоПриходныйОрдер()

// Обработчик заполнения на основании складского ордера без учета остатков.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ПриходныйОрдер Или ДокументСсылка.РасходныйОрдер.
//	Приходный - Признак вида ордера.
//	Компания - Организация.
//
Процедура ЗаполнитьПоСкладскомуОрдеруБезУчетаОстатков(ДанныеЗаполнения, Приходный = Истина, Компания) Экспорт
	
		ОблагаетсяНДС = НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		УчетГТД = ПолучитьФункциональнуюОпцию("УчетГТД");
		НалогиУНФ.ЗаполнитьНДСВключенВСтоимостьВДокументе(ЭтотОбъект);
		
		СтруктураЦен = Новый Структура;
		СтруктураЦен.Вставить("ВидЦен", ВидЦен);
		СтруктураЦен.Вставить("ЭтоНовыйОбъект", Истина);
		СтруктураЦен.Вставить("ДатаОбработки", ТекущаяДатаСеанса());
		СтруктураЦен.Вставить("Номенклатура", Неопределено);
		СтруктураЦен.Вставить("Коэффициент", 1);
		СтруктураЦен.Вставить("ВалютаДокумента", ВалютаДокумента);
		СтруктураЦен.Вставить("Характеристика", Неопределено);
		СтруктураЦен.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
		
		ДанныеСтроки = Новый Структура;
		ДанныеСтроки.Вставить("Количество", 1);
		ДанныеСтроки.Вставить("Цена", 0);
		ДанныеСтроки.Вставить("Сумма", 0);
		ДанныеСтроки.Вставить("ПроцентСкидкиНаценки", 0);
		ДанныеСтроки.Вставить("СуммаСкидкиНаценки", 0);
		ДанныеСтроки.Вставить("СтавкаНДС", Неопределено);
		ДанныеСтроки.Вставить("СуммаНДС", 0);
		ДанныеСтроки.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
		ДанныеСтроки.Вставить("Всего", 0);
		
		Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Запасы Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Количество) Тогда
				Продолжить;
			КонецЕсли;
		
			НоваяСтрокаЗапасы = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЗапасы, СтрокаТабличнойЧасти);
			НоваяСтрокаЗапасы.ТипНоменклатурыЗапас = Истина;
			
			Если ОблагаетсяНДС Тогда
				Партия = НоваяСтрокаЗапасы.Партия;
				Если ЗначениеЗаполнено(Партия) И Партия.Статус = Перечисления.СтатусыПартий.ТоварыНаКомиссии 
					И Партия.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
					
					НоваяСтрокаЗапасы.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.БезНДС);;
				Иначе
					
					Если ЗначениеЗаполнено(НоваяСтрокаЗапасы.Номенклатура.ВидСтавкиНДС) Тогда
						НоваяСтрокаЗапасы.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(НоваяСтрокаЗапасы.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
					Иначе
						НоваяСтрокаЗапасы.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Компания.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				
				Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
					СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
				Иначе
					СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
				КонецЕсли;
				
				НоваяСтрокаЗапасы.СтавкаНДС = СтавкаНДСПоУмолчанию;
				
			КонецЕсли;
			
			Если УчетГТД Тогда
				НоваяСтрокаЗапасы.СтранаПроисхождения = НоваяСтрокаЗапасы.Номенклатура.СтранаПроисхождения;
			КонецЕсли;
			
			НоваяСтрокаЗапасы.СтруктурнаяЕдиница = ДанныеЗаполнения.СтруктурнаяЕдиница;
			НоваяСтрокаЗапасы.Ячейка = СтрокаТабличнойЧасти.Ячейка;
			
			ЗаполнитьЗначенияСвойств(СтруктураЦен, НоваяСтрокаЗапасы);
			НоваяСтрокаЗапасы.Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураЦен);
			
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, НоваяСтрокаЗапасы);
			ЗаполнениеОбъектовУНФ.РассчитатьСуммыВСтрокеТабличнойЧасти(ДанныеСтроки);
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЗапасы, ДанныеСтроки);
			
		КонецЦикла;
	
	СерииНоменклатурыУНФ.ЗаполнитьТЧСерииНоменклатурыПоКлючуСвязи(ЭтотОбъект, ДанныеЗаполнения);
	СерииНоменклатурыУНФ.УдалитьСерииНоменклатурыВТабличнойЧастиВЗависимостиОтПолитики(ЭтотОбъект);
	
КонецПроцедуры

// АПК:299-вкл

Процедура ЗаполнитьПоПлануПередачи() Экспорт
	
	ОбновитьПланПередачи();
	
	Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоПлан;
		РассчитатьСуммыВСтрокеТЧ(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	УдалитьПустыеСтроки();
	
КонецПроцедуры

Процедура ЗаполнитьПоФактическойНехватке() Экспорт
	
	СкладВТЧ = (ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	
	ОбновитьПланПередачи();
	
	Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
		СтрокаТабличнойЧасти.Количество = 0;
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(Дата) + 1);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", ОрганизацияПолучатель);
	Если СкладВТЧ Тогда
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Неопределено);
		Запрос.УстановитьПараметр("Ячейка", Неопределено);
	Иначе
		Если ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам") Тогда
			Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
		Иначе
			Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Неопределено);
		КонецЕсли; 
		Если ПолучитьФункциональнуюОпцию("УчетПоЯчейкам") Тогда
			Запрос.УстановитьПараметр("Ячейка", Ячейка);
		Иначе
			Запрос.УстановитьПараметр("Ячейка", Неопределено);
		КонецЕсли; 
	КонецЕсли; 
	Запрос.Текст = ТекстЗапросаФактическиеОстатки();
	Результат = Запрос.ВыполнитьПакет();
	
	// Заполнение по учету запасов на складах
	Выборка = Результат[Результат.Количество() - 4].Выбрать();
	СтруктураПоиска = Новый Структура;
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска.Очистить();
		СтруктураПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураПоиска.Вставить("Партия", Выборка.Партия);
		Если СкладВТЧ Тогда
			СтруктураПоиска.Вставить("СтруктурнаяЕдиница", Выборка.СтруктурнаяЕдиница);
			СтруктураПоиска.Вставить("Ячейка", Выборка.Ячейка);
		КонецЕсли; 
		Строки = Запасы.НайтиСтроки(СтруктураПоиска);
		Если Строки.Количество() = 0 Тогда
			СтрокаТабличнойЧасти = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
			ЗаполнитьЦенуВСтрокеТЧ(СтрокаТабличнойЧасти);
		Иначе
			Коэффициент = ?(ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения"), 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.ЕдиницаИзмерения, "Коэффициент", Истина), 1);
			СтрокаТабличнойЧасти = Строки[0];
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Выборка.Количество / ?(Коэффициент = 0, 1, Коэффициент);
			СтрокаТабличнойЧасти.Вес = СтрокаТабличнойЧасти.Вес + Выборка.Вес;
			СтрокаТабличнойЧасти.Объем = СтрокаТабличнойЧасти.Объем + Выборка.Объем;
		КонецЕсли;
		РассчитатьСуммыВСтрокеТЧ(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	Выборка = Результат[Результат.Количество() - 3].Выбрать();
	КорректировкаПоУчетуЗапасов(Выборка);
	Выборка = Результат[Результат.Количество() - 2].Выбрать();
	КорректировкаПоУчетуГТД(Выборка);
	Выборка = Результат[Результат.Количество() - 1].Выбрать();
	КорректировкаПоУчетуСерий(Выборка);
	УдалитьПустыеСтроки();
	
КонецПроцедуры

Процедура ОбновитьПланПередачи()
	
	Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
		СтрокаТабличнойЧасти.КоличествоПлан = 0;
	КонецЦикла;
	СерииНоменклатуры.Очистить();
	
	Если НЕ ЗначениеЗаполнено(ВидОперации)
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПередачаТоваровМеждуОрганизациями.РучноеЗаполнение Тогда
		Возврат;
	КонецЕсли;
	
	СкладВТЧ = (ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(Дата));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Дата));
	Запрос.УстановитьПараметр("Организация", ОрганизацияПолучатель);
	Запрос.УстановитьПараметр("КорОрганизация", Организация);
	Если СкладВТЧ Тогда
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Неопределено);
		Запрос.УстановитьПараметр("Ячейка", Неопределено);
	Иначе
		Если ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам") Тогда
			Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
		Иначе
			Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Неопределено);
		КонецЕсли; 
		Если ПолучитьФункциональнуюОпцию("УчетПоЯчейкам") Тогда
			Запрос.УстановитьПараметр("Ячейка", Ячейка);
		Иначе
			Запрос.УстановитьПараметр("Ячейка", Неопределено);
		КонецЕсли; 
	КонецЕсли; 
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РезервыТоваровОрганизаций.Номенклатура КАК Номенклатура,
	|	РезервыТоваровОрганизаций.Характеристика КАК Характеристика,
	|	РезервыТоваровОрганизаций.Партия КАК Партия,
	|	РезервыТоваровОрганизаций.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	РезервыТоваровОрганизаций.Ячейка КАК Ячейка,
	|	РезервыТоваровОрганизаций.Серия КАК Серия,
	|	СУММА(РезервыТоваровОрганизаций.Количество) КАК КоличествоПлан,
	|	РезервыТоваровОрганизаций.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РезервыТоваровОрганизаций.НомерГТД КАК НомерГТД,
	|	РезервыТоваровОрганизаций.СтранаПроисхождения КАК СтранаПроисхождения
	|ИЗ
	|	РегистрНакопления.РезервыТоваровОрганизаций КАК РезервыТоваровОрганизаций
	|ГДЕ
	|	РезервыТоваровОрганизаций.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РезервыТоваровОрганизаций.Организация = &Организация
	|	И РезервыТоваровОрганизаций.КорОрганизация = &КорОрганизация
	|	И РезервыТоваровОрганизаций.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И (&СтруктурнаяЕдиница = НЕОПРЕДЕЛЕНО
	|			ИЛИ РезервыТоваровОрганизаций.СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
	|	И (&Ячейка = НЕОПРЕДЕЛЕНО
	|			ИЛИ РезервыТоваровОрганизаций.Ячейка = &Ячейка)
	|	И РезервыТоваровОрганизаций.Регистратор <> &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РезервыТоваровОрганизаций.Характеристика,
	|	РезервыТоваровОрганизаций.Ячейка,
	|	РезервыТоваровОрганизаций.Серия,
	|	РезервыТоваровОрганизаций.Номенклатура,
	|	РезервыТоваровОрганизаций.Партия,
	|	РезервыТоваровОрганизаций.СтруктурнаяЕдиница,
	|	РезервыТоваровОрганизаций.Номенклатура.ЕдиницаИзмерения,
	|	РезервыТоваровОрганизаций.НомерГТД,
	|	РезервыТоваровОрганизаций.СтранаПроисхождения
	|
	|ИМЕЮЩИЕ
	|	СУММА(РезервыТоваровОрганизаций.Количество) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика";
	Выборка = Запрос.Выполнить().Выбрать();
	СтруктураПоиска = Новый Структура;
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска.Очистить();
		СтруктураПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураПоиска.Вставить("Партия", Выборка.Партия);
		СтруктураПоиска.Вставить("НомерГТД", Выборка.НомерГТД);
		СтруктураПоиска.Вставить("СтранаПроисхождения", Выборка.СтранаПроисхождения);
		Если СкладВТЧ Тогда
			СтруктураПоиска.Вставить("СтруктурнаяЕдиница", Выборка.СтруктурнаяЕдиница);
			СтруктураПоиска.Вставить("Ячейка", Выборка.Ячейка);
		КонецЕсли; 
		Строки = Запасы.НайтиСтроки(СтруктураПоиска);
		Если Строки.Количество() = 0 Тогда
			СтрокаТабличнойЧасти = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
			СтруктураДанные = Новый Структура;
			СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
			СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
			СтруктураДанные.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
			СтруктураДанные.Вставить("НалогообложениеНДС", НалогообложениеНДС);
			СтруктураДанные.Вставить("ДатаОбработки", Дата);
			СтруктураДанные.Вставить("ВалютаДокумента", ВалютаДокумента);
			СтруктураДанные.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
			СтруктураДанные.Вставить("ВидЦен", ВидЦен);
			СтруктураДанные.Вставить("Коэффициент", 1);
			СтрокаТабличнойЧасти.Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		Иначе
			Коэффициент = ?(ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения"), 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.ЕдиницаИзмерения, "Коэффициент", Истина), 1);
			СтрокаТабличнойЧасти = Строки[0];
			СтрокаТабличнойЧасти.КоличествоПлан = СтрокаТабличнойЧасти.КоличествоПлан 
				+ Выборка.КоличествоПлан / ?(Коэффициент = 0, 1, Коэффициент);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.КлючСвязи) Тогда
			ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Запасы, СтрокаТабличнойЧасти, "КлючСвязи");
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.Серия) Тогда
			СтрокаСерия = СерииНоменклатуры.Добавить();
			СтрокаСерия.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи;
			СтрокаСерия.Количество = Выборка.КоличествоПлан;
			СтрокаСерия.Серия = Выборка.Серия;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

Процедура УдалитьПустыеСтроки()
		
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Количество", 0);
	СтруктураПоиска.Вставить("КоличествоПлан", 0);
	Строки = Запасы.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаТабличнойЧасти Из Строки Цикл
		Запасы.Удалить(СтрокаТабличнойЧасти);
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйЗапросРасшифровкиПредоплаты(ПоПоставщикам)
	
	Результат = Новый Запрос;
	Если ПоПоставщикам Тогда
		Результат.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РасчетыСПоставщикамиОстатки.Документ КАК Документ,
		|	РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
		|	РасчетыСПоставщикамиОстатки.ДокументДата КАК ДокументДата,
		|	РасчетыСПоставщикамиОстатки.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
		|	СУММА(РасчетыСПоставщикамиОстатки.СуммаОстаток) КАК СуммаОстаток,
		|	СУММА(РасчетыСПоставщикамиОстатки.СуммаВалОстаток) КАК СуммаВалОстаток,
		|	СУММА(РасчетыСПоставщикамиОстатки.СуммаРегОстаток) КАК СуммаРегОстаток
		|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыСПоставщикамиОстатки
		|ИЗ
		|	(ВЫБРАТЬ
		|		РасчетыСПоставщикамиОстатки.Договор КАК Договор,
		|		РасчетыСПоставщикамиОстатки.Документ КАК Документ,
		|		РасчетыСПоставщикамиОстатки.Документ.Дата КАК ДокументДата,
		|		РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
		|		РасчетыСПоставщикамиОстатки.СуммаОстаток КАК СуммаОстаток,
		|		РасчетыСПоставщикамиОстатки.СуммаВалОстаток КАК СуммаВалОстаток,
		|		РасчетыСПоставщикамиОстатки.СуммаРегОстаток КАК СуммаРегОстаток
		|	ИЗ
		|		РегистрНакопления.РасчетыСПоставщиками.Остатки(
		|				,
		|				Организация = &Организация
		|					И Контрагент = &Контрагент
		|					И Договор = &Договор
		|					И Заказ В (&Заказ)
		|					И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПоставщикамиОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДвиженияДокументаРасчетыСПоставщиками.Договор,
		|		ДвиженияДокументаРасчетыСПоставщиками.Документ,
		|		ДвиженияДокументаРасчетыСПоставщиками.Документ.Дата,
		|		ДвиженияДокументаРасчетыСПоставщиками.Заказ,
		|		ВЫБОР
		|			КОГДА ДвиженияДокументаРасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.Сумма, 0)
		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.Сумма, 0)
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ДвиженияДокументаРасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.СуммаВал, 0)
		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.СуммаВал, 0)
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ДвиженияДокументаРасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.СуммаРег, 0)
		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.СуммаРег, 0)
		|		КОНЕЦ
		|	ИЗ
		|		РегистрНакопления.РасчетыСПоставщиками КАК ДвиженияДокументаРасчетыСПоставщиками
		|	ГДЕ
		|		ДвиженияДокументаРасчетыСПоставщиками.Регистратор = &Ссылка
		|		И ДвиженияДокументаРасчетыСПоставщиками.Период <= &Период
		|		И ДвиженияДокументаРасчетыСПоставщиками.Организация = &Организация
		|		И ДвиженияДокументаРасчетыСПоставщиками.Контрагент = &Контрагент
		|		И ДвиженияДокументаРасчетыСПоставщиками.Договор = &Договор
		|		И ДвиженияДокументаРасчетыСПоставщиками.Заказ В(&Заказ)
		|		И ДвиженияДокументаРасчетыСПоставщиками.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПоставщикамиОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСПоставщикамиОстатки.Документ,
		|	РасчетыСПоставщикамиОстатки.Заказ,
		|	РасчетыСПоставщикамиОстатки.ДокументДата,
		|	РасчетыСПоставщикамиОстатки.Договор.ВалютаРасчетов
		|
		|ИМЕЮЩИЕ
		|	СУММА(РасчетыСПоставщикамиОстатки.СуммаВалОстаток) < 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РасчетыСПоставщикамиОстатки.Документ КАК Документ,
		|	РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
		|	РасчетыСПоставщикамиОстатки.ДокументДата КАК ДокументДата,
		|	РасчетыСПоставщикамиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
		|	-СУММА(РасчетыСПоставщикамиОстатки.СуммаУчета) КАК СуммаУчета,
		|	-СУММА(РасчетыСПоставщикамиОстатки.СуммаРасчетов) КАК СуммаРасчетов,
		|	-СУММА(РасчетыСПоставщикамиОстатки.СуммаПлатежа) КАК СуммаПлатежа,
		|	СУММА(ВЫБОР
		|			КОГДА ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаРег, 0) = 0
		|				ТОГДА РасчетыСПоставщикамиОстатки.СуммаУчета / ВЫБОР
		|						КОГДА ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаРасчетов, 0) <> 0
		|							ТОГДА РасчетыСПоставщикамиОстатки.СуммаРасчетов
		|						ИНАЧЕ 1
		|					КОНЕЦ * (РасчетыСПоставщикамиОстатки.КурсыВалютыУчетаКурс / РасчетыСПоставщикамиОстатки.КурсыВалютыУчетаКратность)
		|			ИНАЧЕ РасчетыСПоставщикамиОстатки.СуммаРег / ВЫБОР
		|					КОГДА ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаРасчетов, 0) <> 0
		|						ТОГДА РасчетыСПоставщикамиОстатки.СуммаРасчетов
		|					ИНАЧЕ 1
		|				КОНЕЦ
		|		КОНЕЦ) КАК Курс,
		|	1 КАК Кратность,
		|	РасчетыСПоставщикамиОстатки.КурсыВалютыДокументаКурс КАК КурсыВалютыДокументаКурс,
		|	РасчетыСПоставщикамиОстатки.КурсыВалютыДокументаКратность КАК КурсыВалютыДокументаКратность
		|ИЗ
		|	(ВЫБРАТЬ
		|		РасчетыСПоставщикамиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
		|		РасчетыСПоставщикамиОстатки.Документ КАК Документ,
		|		РасчетыСПоставщикамиОстатки.ДокументДата КАК ДокументДата,
		|		РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
		|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаОстаток, 0) КАК СуммаУчета,
		|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаВалОстаток, 0) КАК СуммаРасчетов,
		|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаОстаток, 0) * КурсыВалютыУчета.Курс * &КратностьВалютыДокумента / (&КурсВалютыДокумента * КурсыВалютыУчета.Кратность) КАК СуммаПлатежа,
		|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаРегОстаток, 0) КАК СуммаРег,
		|		КурсыВалютыУчета.Курс КАК КурсыВалютыУчетаКурс,
		|		КурсыВалютыУчета.Кратность КАК КурсыВалютыУчетаКратность,
		|		&КурсВалютыДокумента КАК КурсыВалютыДокументаКурс,
		|		&КратностьВалютыДокумента КАК КурсыВалютыДокументаКратность
		|	ИЗ
		|		ВременнаяТаблицаРасчетыСПоставщикамиОстатки КАК РасчетыСПоставщикамиОстатки
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаУчета) КАК КурсыВалютыУчета
		|			ПО (ИСТИНА)) КАК РасчетыСПоставщикамиОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСПоставщикамиОстатки.Документ,
		|	РасчетыСПоставщикамиОстатки.Заказ,
		|	РасчетыСПоставщикамиОстатки.ДокументДата,
		|	РасчетыСПоставщикамиОстатки.ВалютаРасчетов,
		|	РасчетыСПоставщикамиОстатки.КурсыВалютыУчетаКурс,
		|	РасчетыСПоставщикамиОстатки.КурсыВалютыУчетаКратность,
		|	РасчетыСПоставщикамиОстатки.КурсыВалютыДокументаКурс,
		|	РасчетыСПоставщикамиОстатки.КурсыВалютыДокументаКратность
		|
		|ИМЕЮЩИЕ
		|	СУММА(РасчетыСПоставщикамиОстатки.СуммаРасчетов) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументДата";
	Иначе
		Результат.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
		|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
		|	РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
		|	РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
		|	СУММА(РасчетыСПокупателямиОстатки.СуммаОстаток) КАК СуммаОстаток,
		|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) КАК СуммаВалОстаток,
		|	СУММА(РасчетыСПокупателямиОстатки.СуммаРегОстаток) КАК СуммаРегОстаток
		|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыСПокупателямиОстатки
		|ИЗ
		|	(ВЫБРАТЬ
		|		РасчетыСПокупателямиОстатки.Договор КАК Договор,
		|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
		|		РасчетыСПокупателямиОстатки.Документ.Дата КАК ДокументДата,
		|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
		|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
		|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток,
		|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРегОстаток, 0) КАК СуммаРегОстаток
		|	ИЗ
		|		РегистрНакопления.РасчетыСПокупателями.Остатки(
		|				,
		|				Организация = &Организация
		|					И Контрагент = &Контрагент
		|					И Договор = &Договор
		|					И Заказ В (&Заказ)
		|					И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПокупателямиОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДвиженияДокументаРасчетыСПокупателями.Договор,
		|		ДвиженияДокументаРасчетыСПокупателями.Документ,
		|		ДвиженияДокументаРасчетыСПокупателями.Документ.Дата,
		|		ДвиженияДокументаРасчетыСПокупателями.Заказ,
		|		ВЫБОР
		|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаРег, 0)
		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаРег, 0)
		|		КОНЕЦ
		|	ИЗ
		|		РегистрНакопления.РасчетыСПокупателями КАК ДвиженияДокументаРасчетыСПокупателями
		|	ГДЕ
		|		ДвиженияДокументаРасчетыСПокупателями.Регистратор = &Ссылка
		|		И ДвиженияДокументаРасчетыСПокупателями.Период <= &Период
		|		И ДвиженияДокументаРасчетыСПокупателями.Организация = &Организация
		|		И ДвиженияДокументаРасчетыСПокупателями.Контрагент = &Контрагент
		|		И ДвиженияДокументаРасчетыСПокупателями.Договор = &Договор
		|		И ДвиженияДокументаРасчетыСПокупателями.Заказ В(&Заказ)
		|		И ДвиженияДокументаРасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПокупателямиОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСПокупателямиОстатки.Документ,
		|	РасчетыСПокупателямиОстатки.Заказ,
		|	РасчетыСПокупателямиОстатки.ДокументДата,
		|	РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов
		|
		|ИМЕЮЩИЕ
		|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) < 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
		|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
		|	РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
		|	РасчетыСПокупателямиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
		|	-СУММА(РасчетыСПокупателямиОстатки.СуммаУчета) КАК СуммаУчета,
		|	-СУММА(РасчетыСПокупателямиОстатки.СуммаРасчетов) КАК СуммаРасчетов,
		|	-СУММА(РасчетыСПокупателямиОстатки.СуммаПлатежа) КАК СуммаПлатежа,
		|	СУММА(ВЫБОР
		|			КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРег, 0) = 0
		|				ТОГДА РасчетыСПокупателямиОстатки.СуммаУчета / ВЫБОР
		|						КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРасчетов, 0) <> 0
		|							ТОГДА РасчетыСПокупателямиОстатки.СуммаРасчетов
		|						ИНАЧЕ 1
		|					КОНЕЦ * (РасчетыСПокупателямиОстатки.КурсыВалютыУчетаКурс / РасчетыСПокупателямиОстатки.КурсыВалютыУчетаКратность)
		|			ИНАЧЕ РасчетыСПокупателямиОстатки.СуммаРег / ВЫБОР
		|					КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРасчетов, 0) <> 0
		|						ТОГДА РасчетыСПокупателямиОстатки.СуммаРасчетов
		|					ИНАЧЕ 1
		|				КОНЕЦ
		|		КОНЕЦ) КАК Курс,
		|	1 КАК Кратность,
		|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКурс КАК КурсыВалютыДокументаКурс,
		|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКратность КАК КурсыВалютыДокументаКратность
		|ИЗ
		|	(ВЫБРАТЬ
		|		РасчетыСПокупателямиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
		|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
		|		РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
		|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
		|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаУчета,
		|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаРасчетов,
		|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) * КурсыВалютыУчета.Курс * &КратностьВалютыДокумента / (&КурсВалютыДокумента * КурсыВалютыУчета.Кратность) КАК СуммаПлатежа,
		|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРегОстаток, 0) КАК СуммаРег,
		|		КурсыВалютыУчета.Курс КАК КурсыВалютыУчетаКурс,
		|		КурсыВалютыУчета.Кратность КАК КурсыВалютыУчетаКратность,
		|		&КурсВалютыДокумента КАК КурсыВалютыДокументаКурс,
		|		&КратностьВалютыДокумента КАК КурсыВалютыДокументаКратность
		|	ИЗ
		|		ВременнаяТаблицаРасчетыСПокупателямиОстатки КАК РасчетыСПокупателямиОстатки
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаУчета) КАК КурсыВалютыУчета
		|			ПО (ИСТИНА)) КАК РасчетыСПокупателямиОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСПокупателямиОстатки.Документ,
		|	РасчетыСПокупателямиОстатки.Заказ,
		|	РасчетыСПокупателямиОстатки.ДокументДата,
		|	РасчетыСПокупателямиОстатки.ВалютаРасчетов,
		|	РасчетыСПокупателямиОстатки.КурсыВалютыУчетаКурс,
		|	РасчетыСПокупателямиОстатки.КурсыВалютыУчетаКратность,
		|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКурс,
		|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКратность
		|
		|ИМЕЮЩИЕ
		|	СУММА(РасчетыСПокупателямиОстатки.СуммаРасчетов) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументДата";
	КонецЕсли;
	
	Если ПоПоставщикам Тогда
		Результат.УстановитьПараметр("Заказ", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Документы.ЗаказПоставщику.ПустаяСсылка()));
		Результат.УстановитьПараметр("Организация", ОрганизацияПолучатель);
		Результат.УстановитьПараметр("Контрагент", КонтрагентВладелец);
	Иначе
		Результат.УстановитьПараметр("Заказ", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Документы.ЗаказПокупателя.ПустаяСсылка()));
		Результат.УстановитьПараметр("Организация", Организация);
		Результат.УстановитьПараметр("Контрагент", КонтрагентПолучатель);
	КонецЕсли;
	Результат.УстановитьПараметр("Договор", Договор);
	Результат.УстановитьПараметр("Период", Дата);
	Результат.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	Результат.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Если Договор.ВалютаРасчетов = ВалютаДокумента Тогда
		Результат.УстановитьПараметр("КурсВалютыДокумента", Курс);
		Результат.УстановитьПараметр("КратностьВалютыДокумента", Кратность);
	Иначе
		Результат.УстановитьПараметр("КурсВалютыДокумента", 1);
		Результат.УстановитьПараметр("КратностьВалютыДокумента", 1);
	КонецЕсли;
	Результат.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаФактическиеОстатки()
	
	Возврат 
	"ВЫБРАТЬ
	|	ЗапасыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыНаСкладахОстатки.Характеристика КАК Характеристика,
	|	ЗапасыНаСкладахОстатки.Партия КАК Партия,
	|	ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыНаСкладахОстатки.Ячейка КАК Ячейка,
	|	ЗапасыНаСкладахОстатки.КоличествоОстаток КАК Количество
	|ПОМЕСТИТЬ ОстаткиСклад
	|ИЗ
	|	РегистрНакопления.ЗапасыНаСкладах.Остатки(
	|			&ДатаОстатков,
	|			Организация = &Организация
	|				И (&СтруктурнаяЕдиница = НЕОПРЕДЕЛЕНО
	|					ИЛИ СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
	|				И (&Ячейка = НЕОПРЕДЕЛЕНО
	|					ИЛИ Ячейка = &Ячейка)) КАК ЗапасыНаСкладахОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗапасыНаСкладах.Номенклатура,
	|	ЗапасыНаСкладах.Характеристика,
	|	ЗапасыНаСкладах.Партия,
	|	ЗапасыНаСкладах.СтруктурнаяЕдиница,
	|	ЗапасыНаСкладах.Ячейка,
	|	-ЗапасыНаСкладах.Количество
	|ИЗ
	|	РегистрНакопления.ЗапасыНаСкладах КАК ЗапасыНаСкладах
	|ГДЕ
	|	ЗапасыНаСкладах.Регистратор = &Ссылка
	|	И ЗапасыНаСкладах.Период < &ДатаОстатков
	|	И ЗапасыНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ЗапасыНаСкладах.Организация = &Организация
	|	И (&СтруктурнаяЕдиница = НЕОПРЕДЕЛЕНО
	|			ИЛИ ЗапасыНаСкладах.СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
	|	И (&Ячейка = НЕОПРЕДЕЛЕНО
	|			ИЛИ ЗапасыНаСкладах.Ячейка = &Ячейка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.КоличествоОстаток КАК Количество
	|ПОМЕСТИТЬ ОстаткиЗапасы
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(
	|			&ДатаОстатков,
	|			Организация = &Организация
	|				И (&СтруктурнаяЕдиница = НЕОПРЕДЕЛЕНО
	|					ИЛИ СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
	|				И ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)) КАК ЗапасыОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Запасы.Номенклатура,
	|	Запасы.Характеристика,
	|	Запасы.Партия,
	|	Запасы.СтруктурнаяЕдиница,
	|	-Запасы.Количество
	|ИЗ
	|	РегистрНакопления.Запасы КАК Запасы
	|ГДЕ
	|	Запасы.Регистратор = &Ссылка
	|	И Запасы.Период < &ДатаОстатков
	|	И Запасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И Запасы.Организация = &Организация
	|	И (&СтруктурнаяЕдиница = НЕОПРЕДЕЛЕНО
	|			ИЛИ Запасы.СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
	|	И Запасы.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗапасыВРазрезеГТДОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыВРазрезеГТДОстатки.Характеристика КАК Характеристика,
	|	ЗапасыВРазрезеГТДОстатки.Партия КАК Партия,
	|	ЗапасыВРазрезеГТДОстатки.НомерГТД КАК НомерГТД,
	|	ЗапасыВРазрезеГТДОстатки.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ЗапасыВРазрезеГТДОстатки.КоличествоОстаток КАК Количество
	|ПОМЕСТИТЬ ОстаткиГТД
	|ИЗ
	|	РегистрНакопления.ЗапасыВРазрезеГТД.Остатки(&ДатаОстатков, Организация = &Организация) КАК ЗапасыВРазрезеГТДОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗапасыВРазрезеГТД.Номенклатура,
	|	ЗапасыВРазрезеГТД.Характеристика,
	|	ЗапасыВРазрезеГТД.Партия,
	|	ЗапасыВРазрезеГТД.НомерГТД,
	|	ЗапасыВРазрезеГТД.СтранаПроисхождения,
	|	-ЗапасыВРазрезеГТД.Количество
	|ИЗ
	|	РегистрНакопления.ЗапасыВРазрезеГТД КАК ЗапасыВРазрезеГТД
	|ГДЕ
	|	ЗапасыВРазрезеГТД.Регистратор = &Ссылка
	|	И ЗапасыВРазрезеГТД.Период < &ДатаОстатков
	|	И ЗапасыВРазрезеГТД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ЗапасыВРазрезеГТД.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерииНоменклатурыОстатки.Номенклатура КАК Номенклатура,
	|	СерииНоменклатурыОстатки.Характеристика КАК Характеристика,
	|	СерииНоменклатурыОстатки.Партия КАК Партия,
	|	СерииНоменклатурыОстатки.Серия КАК Серия,
	|	СерииНоменклатурыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СерииНоменклатурыОстатки.Ячейка КАК Ячейка,
	|	СерииНоменклатурыОстатки.КоличествоОстаток КАК Количество
	|ПОМЕСТИТЬ ОстаткиСерии
	|ИЗ
	|	РегистрНакопления.СерииНоменклатуры.Остатки(
	|			&ДатаОстатков,
	|			Организация = &Организация
	|				И (&СтруктурнаяЕдиница = НЕОПРЕДЕЛЕНО
	|					ИЛИ СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
	|				И (&Ячейка = НЕОПРЕДЕЛЕНО
	|					ИЛИ Ячейка = &Ячейка)) КАК СерииНоменклатурыОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СерииНоменклатуры.Номенклатура,
	|	СерииНоменклатуры.Характеристика,
	|	СерииНоменклатуры.Партия,
	|	СерииНоменклатуры.Серия,
	|	СерииНоменклатуры.СтруктурнаяЕдиница,
	|	СерииНоменклатуры.Ячейка,
	|	-СерииНоменклатуры.Количество
	|ИЗ
	|	РегистрНакопления.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.Регистратор = &Ссылка
	|	И СерииНоменклатуры.Период < &ДатаОстатков
	|	И СерииНоменклатуры.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И СерииНоменклатуры.Организация = &Организация
	|	И (&СтруктурнаяЕдиница = НЕОПРЕДЕЛЕНО
	|			ИЛИ СерииНоменклатуры.СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
	|	И (&Ячейка = НЕОПРЕДЕЛЕНО
	|			ИЛИ СерииНоменклатуры.Ячейка = &Ячейка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиСклад.Номенклатура КАК Номенклатура,
	|	ОстаткиСклад.Характеристика КАК Характеристика,
	|	ОстаткиСклад.Партия КАК Партия,
	|	ОстаткиСклад.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ОстаткиСклад.Ячейка КАК Ячейка,
	|	СУММА(-ОстаткиСклад.Количество) КАК Количество,
	|	ОстаткиСклад.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ОстаткиСклад.Номенклатура.Вес * СУММА(-ОстаткиСклад.Количество) КАК Вес,
	|	ОстаткиСклад.Номенклатура.Объем * СУММА(-ОстаткиСклад.Количество) КАК Объем
	|ИЗ
	|	ОстаткиСклад КАК ОстаткиСклад
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиСклад.Партия,
	|	ОстаткиСклад.Ячейка,
	|	ОстаткиСклад.Характеристика,
	|	ОстаткиСклад.Номенклатура,
	|	ОстаткиСклад.СтруктурнаяЕдиница,
	|	ОстаткиСклад.Номенклатура.ЕдиницаИзмерения,
	|	ОстаткиСклад.Номенклатура.Вес,
	|	ОстаткиСклад.Номенклатура.Объем
	|
	|ИМЕЮЩИЕ
	|	СУММА(ОстаткиСклад.Количество) < 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиЗапасы.Номенклатура КАК Номенклатура,
	|	ОстаткиЗапасы.Характеристика КАК Характеристика,
	|	ОстаткиЗапасы.Партия КАК Партия,
	|	ОстаткиЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СУММА(-ОстаткиЗапасы.Количество) КАК Количество,
	|	ОстаткиЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ОстаткиЗапасы.Номенклатура.Вес * СУММА(-ОстаткиЗапасы.Количество) КАК Вес,
	|	ОстаткиЗапасы.Номенклатура.Объем * СУММА(-ОстаткиЗапасы.Количество) КАК Объем
	|ИЗ
	|	ОстаткиЗапасы КАК ОстаткиЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиЗапасы.Партия,
	|	ОстаткиЗапасы.Характеристика,
	|	ОстаткиЗапасы.Номенклатура,
	|	ОстаткиЗапасы.СтруктурнаяЕдиница,
	|	ОстаткиЗапасы.Номенклатура.ЕдиницаИзмерения,
	|	ОстаткиЗапасы.Номенклатура.Вес,
	|	ОстаткиЗапасы.Номенклатура.Объем
	|
	|ИМЕЮЩИЕ
	|	СУММА(ОстаткиЗапасы.Количество) < 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиГТД.Номенклатура КАК Номенклатура,
	|	ОстаткиГТД.Характеристика КАК Характеристика,
	|	ОстаткиГТД.Партия КАК Партия,
	|	ОстаткиГТД.НомерГТД КАК НомерГТД,
	|	ОстаткиГТД.СтранаПроисхождения КАК СтранаПроисхождения,
	|	СУММА(-ОстаткиГТД.Количество) КАК Количество,
	|	ОстаткиГТД.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ОстаткиГТД.Номенклатура.Вес * СУММА(-ОстаткиГТД.Количество) КАК Вес,
	|	ОстаткиГТД.Номенклатура.Объем * СУММА(-ОстаткиГТД.Количество) КАК Объем
	|ИЗ
	|	ОстаткиГТД КАК ОстаткиГТД
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиГТД.Партия,
	|	ОстаткиГТД.Характеристика,
	|	ОстаткиГТД.Номенклатура,
	|	ОстаткиГТД.НомерГТД,
	|	ОстаткиГТД.СтранаПроисхождения,
	|	ОстаткиГТД.Номенклатура.ЕдиницаИзмерения,
	|	ОстаткиГТД.Номенклатура.Вес,
	|	ОстаткиГТД.Номенклатура.Объем
	|
	|ИМЕЮЩИЕ
	|	СУММА(ОстаткиГТД.Количество) < 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиСерии.Номенклатура КАК Номенклатура,
	|	ОстаткиСерии.Характеристика КАК Характеристика,
	|	ОстаткиСерии.Партия КАК Партия,
	|	ОстаткиСерии.Серия КАК Серия,
	|	ОстаткиСерии.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ОстаткиСерии.Ячейка КАК Ячейка,
	|	СУММА(-ОстаткиСерии.Количество) КАК Количество,
	|	ОстаткиСерии.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ОстаткиСерии.Номенклатура.Вес * СУММА(-ОстаткиСерии.Количество) КАК Вес,
	|	ОстаткиСерии.Номенклатура.Объем * СУММА(-ОстаткиСерии.Количество) КАК Объем
	|ИЗ
	|	ОстаткиСерии КАК ОстаткиСерии
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиСерии.Партия,
	|	ОстаткиСерии.Характеристика,
	|	ОстаткиСерии.Номенклатура,
	|	ОстаткиСерии.Серия,
	|	ОстаткиСерии.СтруктурнаяЕдиница,
	|	ОстаткиСерии.Ячейка,
	|	ОстаткиСерии.Номенклатура.ЕдиницаИзмерения,
	|	ОстаткиСерии.Номенклатура.Вес,
	|	ОстаткиСерии.Номенклатура.Объем
	|
	|ИМЕЮЩИЕ
	|	СУММА(ОстаткиСерии.Количество) < 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика";	
	
КонецФункции

Процедура КорректировкаПоУчетуЗапасов(Выборка)
	
	Если НЕ ПолучитьФункциональнуюОпцию("РезервированиеЗапасов") Тогда
		Возврат;
	КонецЕсли;
	СкладВТЧ = (ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	
	СтруктураПоиска = Новый Структура;
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска.Очистить();
		СтруктураПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураПоиска.Вставить("Партия", Выборка.Партия);
		Если СкладВТЧ Тогда
			СтруктураПоиска.Вставить("СтруктурнаяЕдиница", Выборка.СтруктурнаяЕдиница);
		КонецЕсли; 
		Строки = Запасы.НайтиСтроки(СтруктураПоиска);
		Если Строки.Количество() = 0 Тогда
			СтрокаТабличнойЧасти = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
			ЗаполнитьЦенуВСтрокеТЧ(СтрокаТабличнойЧасти);
		Иначе
			НехваткаПоСкладу = 0;
			Для каждого СтрокаТабличнойЧасти Из Строки Цикл
				Коэффициент = ?(ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения"), 
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.ЕдиницаИзмерения, "Коэффициент", Истина), 1);
				НехваткаПоСкладу = НехваткаПоСкладу + СтрокаТабличнойЧасти.Количество * ?(Коэффициент = 0, 1, Коэффициент);
			КонецЦикла;
			Если НехваткаПоСкладу >= Выборка.Количество Тогда
				Продолжить;
			КонецЕсли;
			Разница = Выборка.Количество - НехваткаПоСкладу;
			Если СкладВТЧ Тогда
				СтруктураПоиска.Вставить("Ячейка", Справочники.Ячейки.ПустаяСсылка());
				Строки = Запасы.НайтиСтроки(СтруктураПоиска);
			КонецЕсли;
			Если Строки.Количество() = 0 Тогда
				СтрокаТабличнойЧасти = Запасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
				ЗаполнитьЦенуВСтрокеТЧ(СтрокаТабличнойЧасти);
				СтрокаТабличнойЧасти.Количество = 0;
			Иначе
				СтрокаТабличнойЧасти = Строки[0];
			КонецЕсли; 
			Коэффициент = ?(ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения"), 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.ЕдиницаИзмерения, "Коэффициент", Истина), 1);
			КоличествоЗапасов = Разница / ?(Коэффициент = 0, 1, Коэффициент);
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Разница;
			СтрокаТабличнойЧасти.Вес = СтрокаТабличнойЧасти.Вес + Выборка.Вес * Разница / КоличествоЗапасов;
			СтрокаТабличнойЧасти.Объем = СтрокаТабличнойЧасти.Объем + Выборка.Объем * Разница / КоличествоЗапасов;
		КонецЕсли; 
		РассчитатьСуммыВСтрокеТЧ(СтрокаТабличнойЧасти);
	КонецЦикла;
	
КонецПроцедуры
 
Процедура КорректировкаПоУчетуГТД(Выборка)
	
	Если НЕ ПолучитьФункциональнуюОпцию("УчетГТД") Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураПоиска = Новый Структура;
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска.Очистить();
		СтруктураПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураПоиска.Вставить("Партия", Выборка.Партия);
		СтруктураПоиска.Вставить("НомерГТД", Выборка.НомерГТД);
		СтруктураПоиска.Вставить("СтранаПроисхождения", Выборка.СтранаПроисхождения);
		Строки = Запасы.НайтиСтроки(СтруктураПоиска);
		Разница = 0;
		Если Строки.Количество() = 0 Тогда
			СтрокаТабличнойЧасти = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
			ЗаполнитьЦенуВСтрокеТЧ(СтрокаТабличнойЧасти);
			Разница = Выборка.Количество;
		Иначе
			СтрокаТабличнойЧасти = Строки[0];
			Коэффициент = ?(ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения"), 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.ЕдиницаИзмерения, "Коэффициент", Истина), 1);
			КоличествоГТД = Выборка.Количество / ?(Коэффициент = 0, 1, Коэффициент);
			Если СтрокаТабличнойЧасти.Количество >= КоличествоГТД Тогда
				Продолжить;
			КонецЕсли; 
			Разница = КоличествоГТД - СтрокаТабличнойЧасти.Количество;
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Разница;
			СтрокаТабличнойЧасти.Вес = СтрокаТабличнойЧасти.Вес + Выборка.Вес * Разница / КоличествоГТД;
			СтрокаТабличнойЧасти.Объем = СтрокаТабличнойЧасти.Объем + Выборка.Объем * Разница / КоличествоГТД;
			Разница = Разница * ?(Коэффициент = 0, 1, Коэффициент);
		КонецЕсли;
		Если Разница <= 0 Тогда
			Продолжить;
		КонецЕсли;
		РассчитатьСуммыВСтрокеТЧ(СтрокаТабличнойЧасти);
		// Уменьшение передачи по пустому ГТД
		СтруктураПоиска.Вставить("НомерГТД", Справочники.НомераГТД.ПустаяСсылка());
		СтруктураПоиска.Вставить("СтранаПроисхождения", Справочники.СтраныМира.ПустаяСсылка());
		Строки = Запасы.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаТабличнойЧасти Из Строки Цикл
			Коэффициент = ?(ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения"), 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.ЕдиницаИзмерения, "Коэффициент", Истина), 1);
			КоличествоПоСтроке = СтрокаТабличнойЧасти.Количество * ?(Коэффициент = 0, 1, Коэффициент);
			СнятьПоСтроке = Мин(Разница, КоличествоПоСтроке);
			Если СнятьПоСтроке <= 0 Тогда
				Продолжить;
			КонецЕсли;
			Разница = Разница - СнятьПоСтроке;
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество - СнятьПоСтроке / ?(Коэффициент = 0, 1, Коэффициент);
			Если Разница <= 0 Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

Процедура КорректировкаПоУчетуСерий(Выборка)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	СкладВТЧ = (ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	
	СтруктураПоиска = Новый Структура;
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска.Очистить();
		СтруктураПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураПоиска.Вставить("Партия", Выборка.Партия);
		Если СкладВТЧ Тогда
			СтруктураПоиска.Вставить("СтруктурнаяЕдиница", Выборка.СтруктурнаяЕдиница);
			СтруктураПоиска.Вставить("Ячейка", Выборка.Ячейка);
		КонецЕсли;
		Строки = Запасы.НайтиСтроки(СтруктураПоиска);
		Если Строки.Количество() = 0 Тогда
			СтрокаТабличнойЧасти = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
			ЗаполнитьЦенуВСтрокеТЧ(СтрокаТабличнойЧасти);
			РассчитатьСуммыВСтрокеТЧ(СтрокаТабличнойЧасти);
		Иначе
			СтрокаТабличнойЧасти = Строки[0];
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.КлючСвязи) Тогда
			ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Запасы, СтрокаТабличнойЧасти, "КлючСвязи");
		КонецЕсли;
		Коэффициент = ?(ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения"), 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.ЕдиницаИзмерения, "Коэффициент", Истина), 1);
		
		СтруктураПоиска.Очистить();
		СтруктураПоиска.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
		СтруктураПоиска.Вставить("Серия", Выборка.Серия);
        Строки = СерииНоменклатуры.НайтиСтроки(СтруктураПоиска);
		Если Строки.Количество() = 0 И СтрокаТабличнойЧасти.КоличествоПлан <> 0 Тогда
			// Фактический перечень серий не может отличаться от планового
			// В таких случаях добавляется отдельная строка в таблице запасов
			СтрокаДобавления = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДобавления, СтрокаТабличнойЧасти);
			СтрокаДобавления.КоличествоПлан = 0;
			СтрокаДобавления.Количество = Выборка.Количество / ?(Коэффициент = 0, 1, Коэффициент);
			СтрокаДобавления.Вес = Выборка.Вес;
			СтрокаДобавления.Объем = Выборка.Объем;
			СтрокаДобавления.КлючСвязи = 0;
			ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Запасы, СтрокаДобавления, "КлючСвязи");
		ИначеЕсли Строки.Количество() = 0 Тогда
			СтрокаДобавления = СтрокаТабличнойЧасти;
			СтрокаДобавления.Количество = СтрокаДобавления.Количество + Выборка.Количество / ?(Коэффициент = 0, 1, Коэффициент);
			СтрокаДобавления.Вес = СтрокаДобавления.Вес + Выборка.Вес;
			СтрокаДобавления.Объем = СтрокаДобавления.Объем + Выборка.Объем;
		Иначе
			// Серия есть в плане передачи
			СтрокаДобавления = Неопределено;
		КонецЕсли;
		Если СтрокаДобавления <> Неопределено Тогда
			СтрокаСерия = СерииНоменклатуры.Добавить();
			СтрокаСерия.КлючСвязи = СтрокаДобавления.КлючСвязи;
			СтрокаСерия.Количество = Выборка.Количество;
			СтрокаСерия.Серия = Выборка.Серия;
			СерииНоменклатурыУНФКлиентСервер.ОбновитьСтроковоеПредставлениеСерийНоменклатурыСтроки(СтрокаДобавления, ЭтотОбъект, 
				"КлючСвязи");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПолучателяПоНастройкам()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкаПередачиТоваровМеждуОрганизациями.ОрганизацияВладелец КАК ОрганизацияВладелец,
	|	НастройкаПередачиТоваровМеждуОрганизациями.КонтрагентВладельца КАК КонтрагентВладельца,
	|	НастройкаПередачиТоваровМеждуОрганизациями.КонтрагентПродавец КАК КонтрагентПродавец
	|ИЗ
	|	РегистрСведений.НастройкаПередачиТоваровМеждуОрганизациями КАК НастройкаПередачиТоваровМеждуОрганизациями
	|ГДЕ
	|	НастройкаПередачиТоваровМеждуОрганизациями.ОрганизацияПродавец = &Организация";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Если НЕ ЗначениеЗаполнено(ОрганизацияПолучатель) Тогда
			ОрганизацияПолучатель = Выборка.ОрганизацияВладелец;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(КонтрагентПолучатель) Тогда
			КонтрагентПолучатель = Выборка.КонтрагентВладельца;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(КонтрагентВладелец) Тогда
			КонтрагентВладелец = Выборка.КонтрагентПродавец;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ПроверитьЗаполненностьСтруктурнойЕдиницы(Отказ, ПроверяемыеРеквизиты)
	
	Если ПоложениеСклада <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		ПроверяемыеРеквизиты.Добавить("СтруктурнаяЕдиница");
		Возврат;
	КонецЕсли;
		
	Для Каждого ТекСтрокаТЧ Из Запасы Цикл
		Если Не ТекСтрокаТЧ.ТипНоменклатурыЗапас Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрокаТЧ.СтруктурнаяЕдиница) Тогда
			Продолжить;
		КонецЕсли;
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнена колонка ""Склад"" в строке %1 списка ""Запасы""'"),
			ТекСтрокаТЧ.НомерСтроки);
		КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", ТекСтрокаТЧ.НомерСтроки,
			"СтруктурнаяЕдиница");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеНоменклатурыПоДоговоруОбслуживания(Отказ)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБиллинг") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваДоговора = Справочники.ДоговорыКонтрагентов.СвойстваДоговораОбслуживания(Договор);
	
	Если Не СвойстваДоговора.ЭтоДоговорОбслуживания Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаЗапасы Из Запасы Цикл
		РазрешенаПродажаПозиции = Справочники.ДоговорыКонтрагентов.РазрешенаПродажаНоменклатурыПоДоговоруОбслуживания(
			Договор, СтрокаЗапасы.Номенклатура, СтрокаЗапасы.Характеристика);
		Если РазрешенаПродажаПозиции Тогда
			Продолжить;
		КонецЕсли;
		ТекстСообщения = НСтр("ru = 'Запрещено проводить незапланированные товары/услуги по текущему договору обслуживания.'");
		ПутьКДанным = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", СтрокаЗапасы.НомерСтроки, "Номенклатура");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СвойстваДоговора.ДоговорОбслуживанияТарифныйПлан,
			ПутьКДанным, , Отказ);
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьСуммыВСтрокеТЧ(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	Если СуммаВключаетНДС Тогда
		СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100);
	Иначе
		СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100;
	КонецЕсли; 
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры

Процедура ЗаполнитьЦенуВСтрокеТЧ(СтрокаТабличнойЧасти)
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("НалогообложениеНДС", НалогообложениеНДС);
	СтруктураДанные.Вставить("ДатаОбработки", Дата);
	СтруктураДанные.Вставить("ВалютаДокумента", ВалютаДокумента);
	СтруктураДанные.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
	СтруктураДанные.Вставить("ВидЦен", ВидЦен);
	СтруктураДанные.Вставить("Коэффициент", 1);
	СтрокаТабличнойЧасти.Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли