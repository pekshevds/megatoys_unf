
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьИменаСтраниц();
	СформироватьСписокРазделовУчета();
	
	ДатаДокумента = Объект.Дата;
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Наличные = Перечисления.ТипыДенежныхСредств.Наличные;
	
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	
	ВалютаПоУмолчанию = Константы.НациональнаяВалюта.Получить();
	
	ВалютаУчета = Константы.ВалютаУчета.Получить();

	ОтображатьСчетаУчета = ПолучитьФункциональнуюОпцию("ОтображатьСчетаУчета");
	
	ПолучитьСтруктуруВидовОпераций();
	
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// Прослеживаемость
		ОбновитьОтображениеПрослеживаемости();
		// Конец Прослеживаемость
		НалогиУНФ.ЗаполнитьНДСВключенВСтоимостьВДокументе(Объект);
	КонецЕсли; 
	
	
	// ГТД и РНПТ
	ИменаТЧИПолей = ГрузовыеТаможенныеДекларацииСервер.ИменаТЧИПолейДляТаблицыЗапасы_БазовыеПоляСПрослеживаемостью( ,
		"ЗапасыВРазрезеГТД");
	ИменаТЧИПолей = ГрузовыеТаможенныеДекларацииСервер.ИменаТЧИПолейДляТаблицыЗапасы_БазовыеПоляСПрослеживаемостью(
		ИменаТЧИПолей, "ЗапасыПереданныеВРазрезеГТД");
	ИменаТЧИПолей = ГрузовыеТаможенныеДекларацииСервер.ИменаТЧИПолейДляТаблицыЗапасы_БазовыеПоляСПрослеживаемостью(
		ИменаТЧИПолей, "ЗапасыПринятыеВРазрезеГТД");
	ГрузовыеТаможенныеДекларацииСервер.ПриСозданииНаСервереДляДокументаСПрослеживаемостью(ЭтотОбъект, ИменаТЧИПолей,
		КэшЗначений);

	Элементы.ЗапасыПереданныеВРазрезеГТДКомиссионер.Видимость = КэшЗначений.Свойство("ВестиУчетПрослеживаемыхТоваров")
		И КэшЗначений.ВестиУчетПрослеживаемыхТоваров;
	// ГТД и РНПТ
	
	УстановитьВидимостьДоступностьЭлементов();
	
	ОбновитьОтображениеЗакупокУСН();
	
	Если НЕ Константы.ФункциональнаяОпцияИспользоватьСовместительство.Получить() Тогда
		Если Элементы.Найти("РасчетыСПерсоналомСотрудникКод") <> Неопределено Тогда
			Элементы.РасчетыСПерсоналомСотрудникКод.Видимость = Ложь;
		КонецЕсли;
		Если Элементы.Найти("РасчетыСПодотчетникамиСотрудникКод") <> Неопределено Тогда
			Элементы.РасчетыСПодотчетникамиСотрудникКод.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,
		"ОсновнойСклад");
	Склад = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
	ОсновнойСклад = ?(Склад.ОрдерныйСклад, Неопределено, Склад);
	
	Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить()
		И ОсновнойСклад <> Неопределено Тогда
		
		Элементы.ЗапасыПринятыеСтруктурнаяЕдиница.Видимость = Ложь;
		
	КонецЕсли;
	
	ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,
		"ОсновноеПодразделение");
	ОсновноеПодразделение = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки,
		Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
	
	ВалютаУчетаИНацСовпадают = (УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета()
		= УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту());
	
	УстановитьОтборыПоЭквайрингу();
	
	// Заполнение дополнительных реквизитов табличной части.
	УстановитьВидимостьРеквизитовРасчетов("РасчетыСПоставщиками");
	УстановитьВидимостьРеквизитовРасчетов("РасчетыСПокупателями");
	УстановитьВидимостьРеквизитовРасчетов("РасчетыСПрочимиКонтрагентами");
	УстановитьВидимостьРеквизитовРасчетов("ЗапасыПереданные");
	УстановитьВидимостьРеквизитовРасчетов("ЗапасыПринятые");
	
	// ФО Использовать подсистему Производство.
	УстановитьВидимостьОтФОИспользоватьПодсистемуПроизводство();
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Настройки = Новый Структура;
	Настройки.Вставить("Запасы");
	Настройки.Вставить("БонусныеБаллы");
	Настройки.Вставить("ПодарочныеСертификаты");
	Настройки.Вставить("НакопленныеПродажиПоДисконтнымКартам");
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.Запасы, Настройки.Запасы, ЭтотОбъект, Ложь);
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.БонусныеБаллы, Настройки.БонусныеБаллы, ЭтотОбъект, Ложь);
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.ПодарочныеСертификаты, Настройки.ПодарочныеСертификаты, ЭтотОбъект, Ложь);
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.НакопленныеПродажиПоДисконтнымКартам, Настройки.НакопленныеПродажиПоДисконтнымКартам, ЭтотОбъект, Ложь);
	НастройкиЗагрузкиДанных = Новый ФиксированнаяСтруктура(Настройки);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость			= ИспользоватьПодключаемоеОборудование;
	Элементы.ЗапасыПереданныеЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	Элементы.ЗапасыПринятыеЗагрузитьДанныеИзТСД.Видимость   = ИспользоватьПодключаемоеОборудование;
	Элементы.ЗапасыВРазрезеГТДЗагрузитьДанныеИзТСД.Видимость= ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
	
	// Серии
	ИспользоватьСерииНоменклатурыОстатки = СерииНоменклатурыУНФ.ИспользоватьСерииНоменклатурыОстатки();
	
	// Характеристики
	НоменклатураВДокументахСервер.ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристик(ЭтотОбъект);
	Если Параметры.Ключ.Пустая() Тогда
		НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект, Истина)
	КонецЕсли;
	
	// Прослеживаемость
	ПрослеживаемостьФормыУНФ.ОбновитьУсловноеОформлениеТабличнойЧастиДляПрослеживаемости(ЭтотОбъект);
	
	// МобильныйКлиент
	МобильныйКлиентУНФ.НастроитьФормуОбъектаМобильныйКлиент(Элементы);
	// Конец МобильныйКлиент
	
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтотОбъект,
		"ВводНачальныхОстатков", НастройкиФормыВыбораНоменклатуры, , "Запасы");
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтотОбъект,
		"ВводНачальныхОстатков", НастройкиФормыВыбораНоменклатуры, , "ЗапасыПереданные");
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтотОбъект,
		"ВводНачальныхОстатков", НастройкиФормыВыбораНоменклатуры, , "ЗапасыПринятые");
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтотОбъект,
		"ВводНачальныхОстатков", НастройкиФормыВыбораНоменклатуры, , "ЗапасыВРазрезеГТД");
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтотОбъект,
		"ВводНачальныхОстатков", НастройкиФормыВыбораНоменклатуры, , "НакопленныеПродажиПоДисконтнымКартам");
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтотОбъект, "Запасы");
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтотОбъект, "ЗапасыПереданные");
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтотОбъект, "ЗапасыПринятые");
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтотОбъект, "ЗапасыВРазрезеГТД");
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтотОбъект, "НакопленныеПродажиПоДисконтнымКартам");
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
	НастройкиКоличества = ПолучитьНастройкиИзмененияКоличества();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиКоличества);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УставитьТекущуюСтраницу();
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект,
		"СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	// Прослеживаемость
	Если ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаПодбораРНПТ" Тогда
		ОбработкаВыбораРНПТННаКлиенте(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаВыбора" Тогда
		ОбработкаВыбораГТДНаКлиенте(ВыбранноеЗначение);
	КонецЕсли	
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Контрагент" Тогда
		Если ЗначениеЗаполнено(Параметр) Тогда
			Для каждого ТекСтрока Из Объект.ЗапасыПереданные Цикл
				Если Параметр = ТекСтрока.Контрагент Тогда
					//@skip-check query-in-loop
					УстановитьВидимостьРеквизитовРасчетов("ЗапасыПереданные");
					Возврат;
				КонецЕсли;
			КонецЦикла;
			Для каждого ТекСтрока Из Объект.ЗапасыПринятые Цикл
				Если Параметр = ТекСтрока.Контрагент Тогда
					//@skip-check query-in-loop
					УстановитьВидимостьРеквизитовРасчетов("ЗапасыПринятые");
					Возврат;
				КонецЕсли;
			КонецЦикла;
			Для каждого ТекСтрока Из Объект.РасчетыСПокупателями Цикл
				Если Параметр = ТекСтрока.Контрагент Тогда
					//@skip-check query-in-loop
					УстановитьВидимостьРеквизитовРасчетов("РасчетыСПокупателями");
					Возврат;
				КонецЕсли;
			КонецЦикла;
			Для каждого ТекСтрока Из Объект.РасчетыСПоставщиками Цикл
				Если Параметр = ТекСтрока.Контрагент Тогда
					//@skip-check query-in-loop
					УстановитьВидимостьРеквизитовРасчетов("РасчетыСПоставщиками");
					Возврат;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПодборСерий"
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		ПолучитьСерииНоменклатурыИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки);

	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Данные = МенеджерОборудованияУНФКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Прослеживаемость
	ОбновитьОтображениеПрослеживаемости(); 
	// Конец Прослеживаемость
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Заполнение дополнительных реквизитов табличной части.
	УстановитьВидимостьРеквизитовРасчетов("РасчетыСПоставщиками");
	УстановитьВидимостьРеквизитовРасчетов("РасчетыСПокупателями");
	УстановитьВидимостьРеквизитовРасчетов("РасчетыСПрочимиКонтрагентами");
	УстановитьВидимостьРеквизитовРасчетов("ЗапасыПереданные");
	УстановитьВидимостьРеквизитовРасчетов("ЗапасыПринятые");
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	Оповестить("ОповещениеОбИзмененииДолга");
	
	// Прослеживаемость
	Для Каждого СтрокаЗапасы Из Объект.ЗапасыВРазрезеГТД Цикл
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	КонецЦикла;
	
	Для Каждого СтрокаЗапасы Из Объект.ЗапасыПереданныеВРазрезеГТД Цикл
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	КонецЦикла;
	
	Для Каждого СтрокаЗапасы Из Объект.ЗапасыПринятыеВРазрезеГТД Цикл
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	КонецЦикла;
	// Конец Прослеживаемость
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДанныеДляИзмененияДаты = ДокументыУНФКлиент.ДанныеДляИзмененияДаты(ЭтотОбъект, Объект);
	Если ДанныеДляИзмененияДаты.ДатаНеМенялась Тогда
		Возврат;
	КонецЕсли;
	
	ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РазделУчетаПриИзменении(Элемент)
	
	// Установка текущей страницы формы.
	УставитьТекущуюСтраницу();
	УстановитьВидимостьДоступностьЭлементов();
	
	Объект.ВнеоборотныеАктивы.Очистить();
	Объект.Запасы.Очистить();
	Объект.ПрямыеЗатраты.Очистить();
	Объект.ЗапасыПринятые.Очистить();
	Объект.ЗапасыПереданные.Очистить();
	Объект.ДенежныеСредства.Очистить();
	Объект.РасчетыСПокупателями.Очистить();
	Объект.РасчетыСПоставщиками.Очистить();
	Объект.РасчетыПоНалогам.Очистить();
	Объект.РасчетыСПерсоналом.Очистить();
	Объект.РасчетыСПодотчетниками.Очистить();
	Объект.ПрочиеРазделы.Очистить();
	Объект.РасчетыПоЭквайрингу.Очистить();
	Объект.РасчетыПоКредитамИЗаймам.Очистить();
	Объект.БонусныеБаллы.Очистить();
	Объект.ПодарочныеСертификаты.Очистить();
	Объект.НакопленныеПродажиПоДисконтнымКартам.Очистить();
	
КонецПроцедуры // РазделУчетаПриИзменении()

&НаКлиенте
Процедура АвтоформированиеПриИзменении(Элемент)
	
	Если Объект.Автоформирование Тогда
		Для каждого СтрокаТЧ Из Объект.РасчетыСПокупателями Цикл
			СтрокаТЧ.Документ = Неопределено;
		КонецЦикла;
		
		Для каждого СтрокаТЧ Из Объект.РасчетыСПоставщиками Цикл
			СтрокаТЧ.Документ = Неопределено;
		КонецЦикла;
		
		Для каждого СтрокаТЧ Из Объект.РасчетыСПодотчетниками Цикл
			СтрокаТЧ.Документ = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // АвтоформированиеПриИзменении()

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект,
		"Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВнеоборотныеАктивы

&НаКлиенте
Процедура ВнеоборотныеАктивыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
 
		СтрокаТабличнойЧасти = Элементы.ВнеоборотныеАктивы.ТекущиеДанные;
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ОсновноеПодразделение;
		
	КонецЕсли;
	
КонецПроцедуры // ВнеоборотныеАктивыПриНачалеРедактирования()

&НаКлиенте
Процедура ВнеоборотныеАктивыОбъемПродукцииРаботДляВычисленияАмортизацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВнеоборотныеАктивы.ТекущиеДанные;
	ДанныеВнеоборотныйАктив = ДанныеВнеоборотныйАктив(СтрокаТабличнойЧасти.ВнеоборотныйАктив);
	
	Если Не ДанныеВнеоборотныйАктив.СпособАмортизацииПропорциональноОбъемуПродукции Тогда
		ПоказатьПредупреждение(Неопределено, НСтр(
			"ru = '""Объем продукции (работ) для исчисления амортизации"" не может быть заполнен для указанного способа начисления амортизации.'"));
		СтрокаТабличнойЧасти.ОбъемПродукцииРаботДляВычисленияАмортизации = 0;
	КонецЕсли;
	
КонецПроцедуры // ВнеоборотныеАктивыОбъемПродукцииРаботДляВычисленияАмортизацииПриИзменении()

&НаКлиенте
Процедура ВнеоборотныеАктивыСрокИспользованияДляВычисленияАмортизацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВнеоборотныеАктивы.ТекущиеДанные;
	ДанныеВнеоборотныйАктив = ДанныеВнеоборотныйАктив(СтрокаТабличнойЧасти.ВнеоборотныйАктив);
	
	Если ДанныеВнеоборотныйАктив.СпособАмортизацииПропорциональноОбъемуПродукции Тогда
		ПоказатьПредупреждение(Неопределено, НСтр(
			"ru = '""Срок использования для вычисления амортизации"" не может быть заполнен для указанного способа начисления амортизации.'"));
		СтрокаТабличнойЧасти.СрокИспользованияДляВычисленияАмортизации = 0;
	КонецЕсли;
	
КонецПроцедуры // ВнеоборотныеАктивыСрокИспользованияДляВычисленияАмортизацииПриИзменении()

&НаКлиенте
Процедура ВнеоборотныеАктивыВнеоборотныйАктивПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВнеоборотныеАктивы.ТекущиеДанные;
	ДанныеВнеоборотныйАктив = ДанныеВнеоборотныйАктив(СтрокаТабличнойЧасти.ВнеоборотныйАктив);
	
	Если ДанныеВнеоборотныйАктив.СпособАмортизацииПропорциональноОбъемуПродукции Тогда
		СтрокаТабличнойЧасти.СрокИспользованияДляВычисленияАмортизации = 0;
	Иначе
		СтрокаТабличнойЧасти.ОбъемПродукцииРаботДляВычисленияАмортизации = 0;
		СтрокаТабличнойЧасти.ТекущаяВыработкаКоличество = 0;
	КонецЕсли;
	
КонецПроцедуры // ВнеоборотныеАктивыВнеоборотныйАктивПриИзменении()

&НаКлиенте
Процедура ВнеоборотныеАктивыТекущаяВыработкаКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВнеоборотныеАктивы.ТекущиеДанные;
	ДанныеВнеоборотныйАктив = ДанныеВнеоборотныйАктив(СтрокаТабличнойЧасти.ВнеоборотныйАктив);
	
	Если НЕ ДанныеВнеоборотныйАктив.СпособАмортизацииПропорциональноОбъемуПродукции Тогда
		ПоказатьПредупреждение(Неопределено, НСтр(
			"ru = '""Объем продукции (работ) для исчисления амортизации"" не может быть заполнен для указанного способа начисления амортизации.'"));
		СтрокаТабличнойЧасти.ТекущаяВыработкаКоличество = 0;
	КонецЕсли;

КонецПроцедуры // ВнеоборотныеАктивыТекущаяВыработкаКоличествоПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрямыеЗатраты

&НаКлиенте
Процедура ПрямыеЗатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
 
		СтрокаТабличнойЧасти = Элементы.ПрямыеЗатраты.ТекущиеДанные;
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ОсновноеПодразделение;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасы

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(СтрокаТабличнойЧасти.НомерСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока
	   И НЕ Копирование Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		Если ЗначениеЗаполнено(ОсновнойСклад) Тогда
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ОсновнойСклад;
		Иначе
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ОсновноеПодразделение;
		КонецЕсли;
	КонецЕсли;
	
	Если НоваяСтрока И Копирование Тогда
		Элемент.ТекущиеДанные.КлючСвязи = 0;
		Элемент.ТекущиеДанные.СерииНоменклатуры = "";
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, Элемент.ТекущиеДанные);
	КонецЕсли;	
	
	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыСерииНоменклатуры Тогда
		ОткрытьПодборСерииНоменклатуры();
	КонецЕсли;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТабличнойЧасти.Количество = НовоеКоличествоПриИзмененииНоменклатуры;
	КонецЕсли;	
	
КонецПроцедуры // ЗапасыПриНачалеРедактирования()

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьСбросКоличества И СбрасыватьКоличество
		И СтрокаТабличнойЧасти.Количество <> НовоеКоличествоПриИзмененииНоменклатуры Тогда
		
		ДопПараметр = Новый Структура();
		ДопПараметр.Вставить("Элемент", Элемент);
		ДопПараметр.Вставить("Количество", СтрокаТабличнойЧасти.Количество);
		Оповещение = Новый ОписаниеОповещения("ЗапасыПодтверждениеСбросаКоличестваЗавершение", ЭтотОбъект, ДопПараметр);
		ОткрытьФорму("ОбщаяФорма.ПодтверждениеСбросаКоличества", , , , , , Оповещение);
		
	Иначе
		
		Если СбрасыватьКоличество Тогда
			НовоеКоличество = НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
		ЗапасыНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество);
		
	КонецЕсли;
	
КонецПроцедуры // ЗапасыНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗапасыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтотОбъект,
				"ВводНачальныхОстатков", НастройкиФормыВыбораНоменклатуры, Истина, "Запасы",
				ВыбранноеЗначение.СтруктураНастроек);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтотОбъект, "Запасы");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		Если ЗначениеЗаполнено(ВыбранноеЗначение.Склад) Тогда
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ВыбранноеЗначение.Склад;
		КонецЕсли;
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	// Серии
	Если ИспользоватьСерииНоменклатурыОстатки<>Неопределено Тогда
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСерииНоменклатурыКоличество(Объект, Элементы.Запасы.ТекущиеДанные);
	КонецЕсли;
	
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, Элементы.Запасы.ТекущиеДанные);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	
	// Серии
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.СерииНоменклатуры, ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтавкаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСуммаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаБезНДС = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаНДС;
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСуммаБезНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаБезНДС;
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСерииНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерииНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияПриИзменении(Элемент)
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, Элементы.Запасы.ТекущиеДанные);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасыПереданные

&НаКлиенте
Процедура ЗапасыПереданныеПриАктивизацииЯчейки(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыПереданные.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
					
	// Доступность типов заказов.
	Если Элемент.ТекущийЭлемент.Имя = "ЗапасыПереданныеЗаказ" Тогда
			
		Если СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение(
			"Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку") Тогда
			
			ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику");
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидОперации", ПредопределенноеЗначение(
				"Перечисление.ВидыОперацийЗаказПоставщику.ЗаказНаПереработку"));
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
		ИначеЕсли СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение(
			"Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию") Тогда
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидОперации", ПредопределенноеЗначение(
				"Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу"));
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
			ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя");
			
		Иначе
			
			МассивОтбора = Новый Массив;
			МассивОтбора.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
			МассивОтбора.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
			ДопустимыеТипы = Новый ОписаниеТипов(МассивОтбора);	
			
		КонецЕсли;
		
		Элемент.ТекущийЭлемент.ОграничениеТипа = ДопустимыеТипы;
		
	КонецЕсли;
		
КонецПроцедуры // ЗапасыПереданныеПриАктивизацииЯчейки()

&НаКлиенте
Процедура ЗапасыПереданныеПослеУдаления(Элемент)
	
	УстановитьВидимостьРеквизитовРасчетов("ЗапасыПереданные");
	
КонецПроцедуры // ЗапасыПереданныеПослеУдаления()

&НаКлиенте
Процедура ЗапасыПереданныеВидОперацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыПереданные.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Договор = ДоговорПоУказаннымПараметрам(Объект.Ссылка, СтрокаТабличнойЧасти.Контрагент,
		Объект.Организация, "ЗапасыПереданные", СтрокаТабличнойЧасти.ВидОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПереданныеКонтрагентПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыПереданные.ТекущиеДанные;
	
	ДанныеКонтрагента = ДанныеКонтрагентаДляИзменения(
		СтрокаТабличнойЧасти.Контрагент, Объект.Организация, "ЗапасыПереданные", СтрокаТабличнойЧасти.ВидОперации);
	
	СтрокаТабличнойЧасти.ВестиРасчетыПоДоговорам = ДанныеКонтрагента.ВестиРасчетыПоДоговорам;
	СтрокаТабличнойЧасти.ВестиРасчетыПоДокументам = ДанныеКонтрагента.ВестиРасчетыПоДокументам;
	СтрокаТабличнойЧасти.ВестиРасчетыПоЗаказам = ДанныеКонтрагента.ВестиРасчетыПоЗаказам;
	СтрокаТабличнойЧасти.ВестиУчетОплатыПоСчетам = ДанныеКонтрагента.ВестиУчетОплатыПоСчетам;
	
	СтрокаТабличнойЧасти.Договор = ДанныеКонтрагента.Договор;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПереданныеДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыПереданные.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПараметрыФормыВыбора(Объект.Ссылка, 
		Объект.Организация, 
		СтрокаТабличнойЧасти.Контрагент, 
		СтрокаТабличнойЧасти.Договор, 
		СтрокаТабличнойЧасти.ВидОперации, 
		"ЗапасыПереданные");
	
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПереданныеНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыПереданные.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьСбросКоличества И СбрасыватьКоличество
		И СтрокаТабличнойЧасти.Количество <> НовоеКоличествоПриИзмененииНоменклатуры Тогда
		
		ДопПараметр = Новый Структура();
		ДопПараметр.Вставить("Элемент", Элемент);
		ДопПараметр.Вставить("Количество", СтрокаТабличнойЧасти.Количество);
		Оповещение = Новый ОписаниеОповещения("ЗапасыПереданныеПодтверждениеСбросаКоличестваЗавершение", 
			ЭтотОбъект, ДопПараметр);
		ОткрытьФорму("ОбщаяФорма.ПодтверждениеСбросаКоличества", , , , , , Оповещение);
		
	Иначе
		
		Если СбрасыватьКоличество Тогда
			НовоеКоличество = НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
		ЗапасыПереданныеНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество);
		
	КонецЕсли;
	
КонецПроцедуры // ЗапасыПереданныеНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗапасыПереданныеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
		
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТабличнойЧасти.Количество = НовоеКоличествоПриИзмененииНоменклатуры;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПереданныеНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти = Элементы.ЗапасыПереданные.ТекущиеДанные;
		
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтотОбъект,
				"ВводНачальныхОстатков", НастройкиФормыВыбораНоменклатуры, Истина, "ЗапасыПереданные",
				ВыбранноеЗначение.СтруктураНастроек);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтотОбъект, "ЗапасыПереданные");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасыПринятые

&НаКлиенте
Процедура ЗапасыПринятыеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		СтрокаТабличнойЧасти = Элементы.ЗапасыПринятые.ТекущиеДанные;
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ОсновнойСклад;
		
		Если Не Копирование Тогда
			СтрокаТабличнойЧасти.Количество = НовоеКоличествоПриИзмененииНоменклатуры;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗапасыПринятыеПриНачалеРедактирования()

&НаКлиенте
Процедура ЗапасыПринятыеПослеУдаления(Элемент)
	
	УстановитьВидимостьРеквизитовРасчетов("ЗапасыПринятые");
	
КонецПроцедуры // ЗапасыПринятыеПослеУдаления()

&НаКлиенте
Процедура ЗапасыПринятыеПриАктивизацииЯчейки(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыПринятые.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	// Доступность типов заказов.
	Если Элемент.ТекущийЭлемент.Имя = "ЗапасыПринятыеЗаказ" Тогда
		
		Если СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение(
			"Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию") Тогда
			
			ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику");
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидОперации", ПредопределенноеЗначение(
				"Перечисление.ВидыОперацийЗаказПоставщику.ЗаказНаЗакупку"));
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
		ИначеЕсли СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение(
			"Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку") Тогда
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидОперации", ПредопределенноеЗначение(
				"Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку"));
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
			ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя");
			
		Иначе
			
			МассивОтбора = Новый Массив;
			МассивОтбора.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
			МассивОтбора.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
			ДопустимыеТипы = Новый ОписаниеТипов(МассивОтбора);	
			
		КонецЕсли;
		
		Элемент.ТекущийЭлемент.ОграничениеТипа = ДопустимыеТипы;
		
	// Партии.
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ЗапасыПринятыеПартия" Тогда	
		
		Если СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение(
			"Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию") Тогда
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", ПредопределенноеЗначение(
				"Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
		ИначеЕсли СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение(
			"Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку") Тогда
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", ПредопределенноеЗначение(
				"Перечисление.СтатусыПартий.ДавальческоеСырье"));
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
		ИначеЕсли СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение(
			"Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаОтветХранение") Тогда
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", ПредопределенноеЗначение(
				"Перечисление.СтатусыПартий.ОтветственноеХранение"));
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры // ЗапасыПринятыеПриАктивизацииЯчейки()

&НаКлиенте
Процедура ЗапасыПринятыеВидОперацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыПринятые.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Договор = ДоговорПоУказаннымПараметрам(
		Объект.Ссылка, СтрокаТабличнойЧасти.Контрагент, Объект.Организация, "ЗапасыПринятые",
		СтрокаТабличнойЧасти.ВидОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПринятыеКонтрагентПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыПринятые.ТекущиеДанные;
	
	ДанныеКонтрагента = ДанныеКонтрагентаДляИзменения(СтрокаТабличнойЧасти.Контрагент, Объект.Организация,
		"ЗапасыПринятые", СтрокаТабличнойЧасти.ВидОперации);
	
	СтрокаТабличнойЧасти.ВестиРасчетыПоДоговорам = ДанныеКонтрагента.ВестиРасчетыПоДоговорам;
	СтрокаТабличнойЧасти.ВестиРасчетыПоДокументам = ДанныеКонтрагента.ВестиРасчетыПоДокументам;
	СтрокаТабличнойЧасти.ВестиРасчетыПоЗаказам = ДанныеКонтрагента.ВестиРасчетыПоЗаказам;
	СтрокаТабличнойЧасти.ВестиУчетОплатыПоСчетам = ДанныеКонтрагента.ВестиУчетОплатыПоСчетам;
	
	СтрокаТабличнойЧасти.Договор = ДанныеКонтрагента.Договор;
	
КонецПроцедуры // ЗапасыПринятыеКонтрагентПриИзменении()

&НаКлиенте
Процедура ЗапасыПринятыеДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыПринятые.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПараметрыФормыВыбора(Объект.Ссылка, 
		Объект.Организация, 
		СтрокаТабличнойЧасти.Контрагент,
		СтрокаТабличнойЧасти.Договор, 
		СтрокаТабличнойЧасти.ВидОперации,
		"ЗапасыПринятые");
	
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПринятыеНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыПринятые.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьСбросКоличества И СбрасыватьКоличество
		И СтрокаТабличнойЧасти.Количество <> НовоеКоличествоПриИзмененииНоменклатуры Тогда
		
		ДопПараметр = Новый Структура();
		ДопПараметр.Вставить("Элемент", Элемент);
		ДопПараметр.Вставить("Количество", СтрокаТабличнойЧасти.Количество);
		Оповещение = Новый ОписаниеОповещения("ЗапасыПринятыеПодтверждениеСбросаКоличестваЗавершение",
			ЭтотОбъект, ДопПараметр);
		ОткрытьФорму("ОбщаяФорма.ПодтверждениеСбросаКоличества", , , , , , Оповещение);
		
	Иначе
		
		Если СбрасыватьКоличество Тогда
			НовоеКоличество = НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
		ЗапасыПринятыеНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество);
		
	КонецЕсли;
	
КонецПроцедуры // ЗапасыПереданныеНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗапасыПринятыеНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти = Элементы.ЗапасыПринятые.ТекущиеДанные;
		
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтотОбъект,
				"ВводНачальныхОстатков", НастройкиФормыВыбораНоменклатуры, Истина, "ЗапасыПринятые",
				ВыбранноеЗначение.СтруктураНастроек);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтотОбъект, "ЗапасыПринятые");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		Если ЗначениеЗаполнено(ВыбранноеЗначение.Склад) Тогда
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ВыбранноеЗначение.Склад;
		КонецЕсли;
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасыВРазрезеГТД

&НаКлиенте
Процедура ЗапасыВРазрезеГТДПередУдалением(Элемент, Отказ)
	
	// Подчиненные табличные части
	Если НЕ Отказ Тогда
		Для Каждого ВыделеннаяСтрока Из Элементы.ЗапасыВРазрезеГТД.ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = Элементы.ЗапасыВРазрезеГТД.ДанныеСтроки(ВыделеннаяСтрока);
			// Прослеживаемость
			УдалитьСвязанныеЗаписи(ТекущиеДанныеСтроки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВРазрезеГТДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Объект.ЗапасыВРазрезеГТД.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	// Прослеживаемость
	Если Поле = Элементы.ЗапасыВРазрезеГТДРНПТ И СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
		ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтотОбъект, "ЗапасыВРазрезеГТД");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	Если Поле.Имя = "ЗапасыВРазрезеГТДПрослеживаемыйТовар" Тогда
		Если СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
			ПрослеживаемостьФормыКлиентУНФ.ПоказатьПредупреждениеПрослеживаемыйТовар();
		КонецЕсли;
	КонецЕсли;
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВРазрезеГТДПриАктивизацииЯчейки(Элемент)

	СтрокаТабличнойЧасти = Элементы.ЗапасыВРазрезеГТД.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат 
	КонецЕсли;
	
	// Прослеживаемость
	Если ЭтоНоваяСтрокаЗапасы
		И Элементы.ЗапасыВРазрезеГТД.ТекущийЭлемент = Элементы.ЗапасыВРазрезеГТДРНПТ 
		И Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.РНПТ) Тогда
		ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтотОбъект, "ЗапасыВРазрезеГТД");
	КонецЕсли;
	// Конец Прослеживаемость
		
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВРазрезеГТДПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЭтоНоваяСтрокаЗапасы = НоваяСтрока;
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если НоваяСтрока И Не Копирование Тогда
		СтрокаТабличнойЧасти.Количество = НовоеКоличествоПриИзмененииНоменклатуры;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВРазрезеГТДПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ЭтоНоваяСтрокаЗапасы = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВРазрезеГТДНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыВРазрезеГТД.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьСбросКоличества И СбрасыватьКоличество
		И СтрокаТабличнойЧасти.Количество <> НовоеКоличествоПриИзмененииНоменклатуры Тогда
		
		ДопПараметр = Новый Структура();
		ДопПараметр.Вставить("Элемент", Элемент);
		ДопПараметр.Вставить("Количество", СтрокаТабличнойЧасти.Количество);
		Оповещение = Новый ОписаниеОповещения("ЗапасыВРазрезеГТДПодтверждениеСбросаКоличестваЗавершение",
			ЭтотОбъект, ДопПараметр);
		ОткрытьФорму("ОбщаяФорма.ПодтверждениеСбросаКоличества", , , , , , Оповещение);
		
	Иначе
		
		Если СбрасыватьКоличество Тогда
			НовоеКоличество = НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
		ЗапасыВРазрезеГТДНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВРазрезеГТДХарактеристикаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ЗапасыВРазрезеГТД.ТекущиеДанные;
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВРазрезеГТДПартияПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ЗапасыВРазрезеГТД.ТекущиеДанные;
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВРазрезеГТДЕдиницаИзмеренияПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ЗапасыВРазрезеГТД.ТекущиеДанные;
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВРазрезеГТДКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ЗапасыВРазрезеГТД.ТекущиеДанные;
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВРазрезеГТДНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти = Элементы.ЗапасыВРазрезеГТД.ТекущиеДанные;
		
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтотОбъект,
				"ВводНачальныхОстатков", НастройкиФормыВыбораНоменклатуры, Истина, "ЗапасыВРазрезеГТД",
				ВыбранноеЗначение.СтруктураНастроек);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтотОбъект, "ЗапасыВРазрезеГТД");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВРазрезеГТДНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеТекущейСтроки = Элементы.ЗапасыВРазрезеГТД.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		ТекстСообщения = "";
		
		Если НЕ ЗначениеЗаполнено(ДанныеТекущейСтроки.СтранаПроисхождения) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не заполнена страна происхождения.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеТекущейСтроки.СтранаПроисхождения)
		   И ДанныеТекущейСтроки.СтранаПроисхождения = ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
			
			ТекстСообщения = НСтр("ru = 'Учет ГТД для отечественных товаров не ведется.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
		Если (ЗначениеЗаполнено(ДанныеТекущейСтроки.Номенклатура)
			И НЕ ТипНоменклатурыЗапас(ДанныеТекущейСтроки.Номенклатура)) Тогда
			
			ТекстСообщения = НСтр("ru = 'Учет ГТД в программе ведеться только для номенклатуры с типом ""Запас"".'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗапасыВРазрезеГТДНомерГТДНачалоВыбора()

&НаКлиенте
Процедура ЗапасыВРазрезеГТДПриРНПТНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеТекущейСтроки = Элементы.ЗапасыВРазрезеГТД.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		ТекстСообщения = "";
		
		Если НЕ ЗначениеЗаполнено(ДанныеТекущейСтроки.СтранаПроисхождения) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не заполнена страна происхождения.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеТекущейСтроки.СтранаПроисхождения)
		   И ДанныеТекущейСтроки.СтранаПроисхождения = ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
			
			ТекстСообщения = НСтр("ru = 'Учет ГТД для отечественных товаров не ведется.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
		Если (ЗначениеЗаполнено(ДанныеТекущейСтроки.Номенклатура)
			И НЕ ТипНоменклатурыЗапас(ДанныеТекущейСтроки.Номенклатура)) Тогда
			
			ТекстСообщения = НСтр("ru = 'Учет ГТД в программе ведеться только для номенклатуры с типом ""Запас"".'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВРазрезеГТДРНПТНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтотОбъект, "ЗапасыВРазрезеГТД");
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВРазрезеГТДРНПТОчистка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыВРазрезеГТД.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		Если СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
			УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
		Иначе
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
		КонецЕсли;
		
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВРазрезеГТДСтранаПроисхожденияПриИзменении(Элемент)
	
	ОчиститьНомерГТДПриИзмененииСтраны("ЗапасыВРазрезеГТД");
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыВРазрезеГТД.ТекущиеДанные;
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасыПереданныеВРазрезеГТД

&НаКлиенте
Процедура ЗапасыПереданныеВРазрезеГТДПередУдалением(Элемент, Отказ)
	// Подчиненные табличные части
	Если НЕ Отказ Тогда
		Для Каждого ВыделеннаяСтрока Из Элементы.ЗапасыПереданныеВРазрезеГТД.ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = Элементы.ЗапасыПереданныеВРазрезеГТД.ДанныеСтроки(ВыделеннаяСтрока);
			// Прослеживаемость
			УдалитьСвязанныеЗаписи(ТекущиеДанныеСтроки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПереданныеВРазрезеГТДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Объект.ЗапасыПереданныеВРазрезеГТД.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	// Прослеживаемость
	Если Поле = Элементы.ЗапасыПереданныеВРазрезеГТДРНПТ И СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
		ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтотОбъект, "ЗапасыПереданныеВРазрезеГТД");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	Если Поле.Имя = "ЗапасыПереданныеВРазрезеГТДПрослеживаемыйТовар" Тогда
		Если СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
			ПрослеживаемостьФормыКлиентУНФ.ПоказатьПредупреждениеПрослеживаемыйТовар();
		КонецЕсли;
	КонецЕсли;
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПереданныеВРазрезеГТДПриАктивизацииЯчейки(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыПереданныеВРазрезеГТД.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат 
	КонецЕсли;
	
	// Прослеживаемость
	Если ЭтоНоваяСтрокаЗапасы
		И Элементы.ЗапасыПереданныеВРазрезеГТД.ТекущийЭлемент = Элементы.ЗапасыПереданныеВРазрезеГТДРНПТ 
		И Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.РНПТ) Тогда
		ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтотОбъект, "ЗапасыПереданныеВРазрезеГТД");
	КонецЕсли;
	// Конец Прослеживаемость
			
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПереданныеВРазрезеГТДПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ЭтоНоваяСтрокаЗапасы = НоваяСтрока;
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если НоваяСтрока И Не Копирование Тогда
		СтрокаТабличнойЧасти.Количество = НовоеКоличествоПриИзмененииНоменклатуры;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПереданныеВРазрезеГТДПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ЭтоНоваяСтрокаЗапасы = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПереданныеВРазрезеГТДНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыПереданныеВРазрезеГТД.ТекущиеДанные;

	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьСбросКоличества И СбрасыватьКоличество
		И СтрокаТабличнойЧасти.Количество <> НовоеКоличествоПриИзмененииНоменклатуры Тогда
		
		ДопПараметр = Новый Структура();
		ДопПараметр.Вставить("Элемент", Элемент);
		ДопПараметр.Вставить("Количество", СтрокаТабличнойЧасти.Количество);
		Оповещение = Новый ОписаниеОповещения("ЗапасыПереданныеВРазрезеГТДПодтверждениеСбросаКоличестваЗавершение",
			ЭтотОбъект, ДопПараметр);
		ОткрытьФорму("ОбщаяФорма.ПодтверждениеСбросаКоличества", , , , , , Оповещение);
		
	Иначе
		
		Если СбрасыватьКоличество Тогда
			НовоеКоличество = НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
		ЗапасыПереданныеВРазрезеГТДНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество);
		
	КонецЕсли;	
	
КонецПроцедуры // ЗапасыВРазрезеГТДНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗапасыПереданныеВРазрезеГТДХарактеристикаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ЗапасыПереданныеВРазрезеГТД.ТекущиеДанные;
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПереданныеВРазрезеГТДПартияПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ЗапасыПереданныеВРазрезеГТД.ТекущиеДанные;
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПереданныеВРазрезеГТДКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ЗапасыПереданныеВРазрезеГТД.ТекущиеДанные;
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПереданныеВРазрезеГТДЕдиницаИзмеренияПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ЗапасыПереданныеВРазрезеГТД.ТекущиеДанные;
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПереданныеВРазрезеГТДНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти = Элементы.ЗапасыПереданныеВРазрезеГТД.ТекущиеДанные;
		
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтотОбъект,
				"ВводНачальныхОстатков", НастройкиФормыВыбораНоменклатуры, Истина, "ЗапасыПереданныеВРазрезеГТД",
				ВыбранноеЗначение.СтруктураНастроек);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтотОбъект,
				"ЗапасыПереданныеВРазрезеГТД");
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПереданныеВРазрезеГТДНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеТекущейСтроки = Элементы.ЗапасыПереданныеВРазрезеГТД.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		ТекстСообщения = "";
		
		Если НЕ ЗначениеЗаполнено(ДанныеТекущейСтроки.СтранаПроисхождения) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не заполнена страна происхождения.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеТекущейСтроки.СтранаПроисхождения)
		   И ДанныеТекущейСтроки.СтранаПроисхождения = ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
			
			ТекстСообщения = НСтр("ru = 'Учет ГТД для отечественных товаров не ведется.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
		Если (ЗначениеЗаполнено(ДанныеТекущейСтроки.Номенклатура)
			И НЕ ТипНоменклатурыЗапас(ДанныеТекущейСтроки.Номенклатура)) Тогда
			
			ТекстСообщения = НСтр("ru = 'Учет ГТД в программе ведеться только для номенклатуры с типом ""Запас"".'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПереданныеВРазрезеГТДПриРНПТНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
		ДанныеТекущейСтроки = Элементы.ЗапасыПереданныеВРазрезеГТД.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		ТекстСообщения = "";
		
		Если НЕ ЗначениеЗаполнено(ДанныеТекущейСтроки.СтранаПроисхождения) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не заполнена страна происхождения.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеТекущейСтроки.СтранаПроисхождения)
		   И ДанныеТекущейСтроки.СтранаПроисхождения = ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
			
			ТекстСообщения = НСтр("ru = 'Учет ГТД для отечественных товаров не ведется.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
		Если (ЗначениеЗаполнено(ДанныеТекущейСтроки.Номенклатура)
			И НЕ ТипНоменклатурыЗапас(ДанныеТекущейСтроки.Номенклатура)) Тогда
			
			ТекстСообщения = НСтр("ru = 'Учет ГТД в программе ведеться только для номенклатуры с типом ""Запас"".'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПереданныеВРазрезеГТДРНПТНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтотОбъект, "ЗапасыПереданныеВРазрезеГТД");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПереданныеВРазрезеГТДРНПТОчистка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыПереданныеВРазрезеГТД.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		Если СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
			УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
		Иначе
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
		КонецЕсли;
		
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПереданныеВРазрезеГТДСтранаПроисхожденияПриИзменении(Элемент)
	
	ОчиститьНомерГТДПриИзмененииСтраны("ЗапасыПереданныеВРазрезеГТД");
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыПереданныеВРазрезеГТД.ТекущиеДанные;
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасыПринятыеВРазрезеГТД

&НаКлиенте
Процедура ЗапасыПринятыеВРазрезеГТДПередУдалением(Элемент, Отказ)
	// Подчиненные табличные части
	Если НЕ Отказ Тогда
		Для Каждого ВыделеннаяСтрока Из Элементы.ЗапасыПринятыеВРазрезеГТД.ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = Элементы.ЗапасыПринятыеВРазрезеГТД.ДанныеСтроки(ВыделеннаяСтрока);
			// Прослеживаемость
			УдалитьСвязанныеЗаписи(ТекущиеДанныеСтроки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПринятыеВРазрезеГТДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = Объект.ЗапасыПринятыеВРазрезеГТД.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	// Прослеживаемость
	Если Поле = Элементы.ЗапасыПринятыеВРазрезеГТДРНПТ И СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
		ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтотОбъект, "ЗапасыПринятыеВРазрезеГТД");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	Если Поле.Имя = "ЗапасыПринятыеВРазрезеГТДПрослеживаемыйТовар" Тогда
		Если СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
			ПрослеживаемостьФормыКлиентУНФ.ПоказатьПредупреждениеПрослеживаемыйТовар();
		КонецЕсли;
	КонецЕсли;
	
	// Конец Прослеживаемость

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПринятыеВРазрезеГТДПриАктивизацииЯчейки(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыПринятыеВРазрезеГТД.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат 
	КонецЕсли;
	
	// Прослеживаемость
	Если ЭтоНоваяСтрокаЗапасы
		И Элементы.ЗапасыПринятыеВРазрезеГТД.ТекущийЭлемент = Элементы.ЗапасыПринятыеВРазрезеГТДРНПТ 
		И Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.РНПТ) Тогда
		ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтотОбъект, "ЗапасыПринятыеВРазрезеГТД");
	КонецЕсли;
	// Конец Прослеживаемость
			
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПринятыеВРазрезеГТДПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ЭтоНоваяСтрокаЗапасы = НоваяСтрока;

	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если НоваяСтрока И Не Копирование Тогда
		СтрокаТабличнойЧасти.Количество = НовоеКоличествоПриИзмененииНоменклатуры;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПринятыеВРазрезеГТДПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ЭтоНоваяСтрокаЗапасы = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПринятыеВРазрезеГТДНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыПринятыеВРазрезеГТД.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьСбросКоличества И СбрасыватьКоличество
		И СтрокаТабличнойЧасти.Количество <> НовоеКоличествоПриИзмененииНоменклатуры Тогда
		
		ДопПараметр = Новый Структура();
		ДопПараметр.Вставить("Элемент", Элемент);
		ДопПараметр.Вставить("Количество", СтрокаТабличнойЧасти.Количество);
		Оповещение = Новый ОписаниеОповещения("ЗапасыПринятыеВРазрезеГТДПодтверждениеСбросаКоличестваЗавершение",
			ЭтотОбъект, ДопПараметр);
		ОткрытьФорму("ОбщаяФорма.ПодтверждениеСбросаКоличества", , , , , , Оповещение);
		
	Иначе
		
		Если СбрасыватьКоличество Тогда
			НовоеКоличество = НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
		ЗапасыПринятыеВРазрезеГТДНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПринятыеВРазрезеГТДХарактеристикаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ЗапасыПринятыеВРазрезеГТД.ТекущиеДанные;
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПринятыеВРазрезеГТДПартияПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ЗапасыПринятыеВРазрезеГТД.ТекущиеДанные;
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПринятыеВРазрезеГТДКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ЗапасыПринятыеВРазрезеГТД.ТекущиеДанные;
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПринятыеВРазрезеГТДЕдиницаИзмеренияПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ЗапасыПринятыеВРазрезеГТД.ТекущиеДанные;
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПринятыеВРазрезеГТДНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти = Элементы.ЗапасыПринятыеВРазрезеГТД.ТекущиеДанные;
		
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтотОбъект,
				"ВводНачальныхОстатков", НастройкиФормыВыбораНоменклатуры, Истина, "ЗапасыПринятыеВРазрезеГТД",
				ВыбранноеЗначение.СтруктураНастроек);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтотОбъект,
				"ЗапасыПринятыеВРазрезеГТД");
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПринятыеВРазрезеГТДНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеТекущейСтроки = Элементы.ЗапасыПринятыеВРазрезеГТД.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		ТекстСообщения = "";
		
		Если НЕ ЗначениеЗаполнено(ДанныеТекущейСтроки.СтранаПроисхождения) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не заполнена страна происхождения.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеТекущейСтроки.СтранаПроисхождения)
		   И ДанныеТекущейСтроки.СтранаПроисхождения = ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
			
			ТекстСообщения = НСтр("ru = 'Учет ГТД для отечественных товаров не ведется.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
		Если (ЗначениеЗаполнено(ДанныеТекущейСтроки.Номенклатура)
			И НЕ ТипНоменклатурыЗапас(ДанныеТекущейСтроки.Номенклатура)) Тогда
			
			ТекстСообщения = НСтр("ru = 'Учет ГТД в программе ведеться только для номенклатуры с типом ""Запас"".'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПринятыеВРазрезеГТДПриРНПТНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеТекущейСтроки = Элементы.ЗапасыПринятыеВРазрезеГТД.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		ТекстСообщения = "";
		
		Если НЕ ЗначениеЗаполнено(ДанныеТекущейСтроки.СтранаПроисхождения) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не заполнена страна происхождения.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеТекущейСтроки.СтранаПроисхождения)
		   И ДанныеТекущейСтроки.СтранаПроисхождения = ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
			
			ТекстСообщения = НСтр("ru = 'Учет ГТД для отечественных товаров не ведется.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
		Если (ЗначениеЗаполнено(ДанныеТекущейСтроки.Номенклатура)
			И НЕ ТипНоменклатурыЗапас(ДанныеТекущейСтроки.Номенклатура)) Тогда
			
			ТекстСообщения = НСтр("ru = 'Учет ГТД в программе ведеться только для номенклатуры с типом ""Запас"".'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПринятыеВРазрезеГТДРНПТНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтотОбъект, "ЗапасыПринятыеВРазрезеГТД");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПринятыеВРазрезеГТДРНПТОчистка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыПринятыеВРазрезеГТД.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		Если СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
			УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
		Иначе
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
		КонецЕсли;
		
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПринятыеВРазрезеГТДСтранаПроисхожденияПриИзменении(Элемент)
	
	ОчиститьНомерГТДПриИзмененииСтраны("ЗапасыПринятыеВРазрезеГТД");
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыПринятыеВРазрезеГТД.ТекущиеДанные;
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДенежныеСредства

&НаКлиенте
Процедура ДенежныеСредстваБанковскийСчетКассаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.ДенежныеСредства.ТекущиеДанные;

	ДанныеДенежныеСредстваБанковскийСчетКассаПриИзменении = ДанныеДенежныеСредстваБанковскийСчетКассаПриИзменении(
		СтрокаТабличнойЧасти.БанковскийСчетКасса);
	
	СтрокаТабличнойЧасти.ВалютаДенежныхСредств = ДанныеДенежныеСредстваБанковскийСчетКассаПриИзменении.Валюта;
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(
		СтрокаТабличнойЧасти.СуммаВал, СтрокаТабличнойЧасти.ВалютаДенежныхСредств, Объект.Дата);

КонецПроцедуры

&НаКлиенте
Процедура ДенежныеСредстваВалютаДенежныхСредствПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.ДенежныеСредства.ТекущиеДанные;

	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
		СтрокаТабличнойЧасти.ВалютаДенежныхСредств, Объект.Дата);
		
КонецПроцедуры

&НаКлиенте
Процедура ДенежныеСредстваСуммаВалПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДенежныеСредства.ТекущиеДанные;

	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
																 СтрокаТабличнойЧасти.ВалютаДенежныхСредств,
																 Объект.Дата);

КонецПроцедуры // ДенежныеСредстваСуммаВалПриИзменении()

&НаКлиенте
Процедура ДенежныеСредстваВалютаДенежныхСредствНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ДенежныеСредства.ТекущиеДанные;
	ВалютаДенежныеСредства = ВалютаДенежныеСредстваНачалоВыбора(СтрокаТабличнойЧасти.БанковскийСчетКасса);
	
	// Если тип денежных средств изменился, необходимо выполнить соответствующие действия.
	Если ЗначениеЗаполнено(ВалютаДенежныеСредства.ТипДенежныхСредств)
		И ВалютаДенежныеСредства.ТипДенежныхСредств <> Наличные Тогда
		ПоказатьПредупреждение(Неопределено, НСТР(
			"ru='Для банковского счета нельзя изменить валюту денежных средств.'"));
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры // ДенежныеСредстваВалютаДенежныхСредствНачалоВыбора()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасчетыСПокупателями

&НаКлиенте
Процедура РасчетыСПокупателямиКонтрагентПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.РасчетыСПокупателями.ТекущиеДанные;
	
	ДанныеКонтрагента = ДанныеКонтрагентаДляИзменения(СтрокаТабличнойЧасти.Контрагент, Объект.Организация,
		"РасчетыСПокупателями");
	
	СтрокаТабличнойЧасти.Договор = ДанныеКонтрагента.Договор;
	
	СтрокаТабличнойЧасти.ВестиРасчетыПоДоговорам = ДанныеКонтрагента.ВестиРасчетыПоДоговорам;
	СтрокаТабличнойЧасти.ВестиРасчетыПоДокументам = ДанныеКонтрагента.ВестиРасчетыПоДокументам;
	СтрокаТабличнойЧасти.ВестиРасчетыПоЗаказам = ДанныеКонтрагента.ВестиРасчетыПоЗаказам;
	СтрокаТабличнойЧасти.ВестиУчетОплатыПоСчетам = ДанныеКонтрагента.ВестиУчетОплатыПоСчетам;
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
		ДанныеКонтрагента.ВалютаРасчетов, Объект.Дата);

КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПокупателямиДоговорПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасчетыСПокупателями.ТекущиеДанные;
	
	ДанныеДоговора = ДанныеДоговораДляИзменения(СтрокаТабличнойЧасти.Договор);
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
		ДанныеДоговора.ВалютаРасчетов, Объект.Дата);

КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПокупателямиДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.РасчетыСПокупателями.ТекущиеДанные;
	
	ПараметрыФормы = ПараметрыФормыВыбора(Объект.Ссылка, 
		Объект.Организация, 
		СтрокаТабличнойЧасти.Контрагент, 
		СтрокаТабличнойЧасти.Договор, 
		Неопределено, 
		"РасчетыСПокупателями");
	
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПокупателямиСуммаВалПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасчетыСПокупателями.ТекущиеДанные;
	
	ДанныеДоговора = ДанныеДоговораДляИзменения(СтрокаТабличнойЧасти.Договор);

	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
		ДанныеДоговора.ВалютаРасчетов, Объект.Дата);
		
	Если Не ВалютаУчетаИНацСовпадают Тогда
		СтрокаТабличнойЧасти.СуммаРег = ПересчитатьИзВалютыВНациональнуюВалюту(СтрокаТабличнойЧасти.СуммаВал,
			ДанныеДоговора.ВалютаРасчетов, Объект.Дата);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПокупателямиПризнакАвансаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасчетыСПокупателями.ТекущиеДанные;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.Взаимозачет") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ПризнакАванса Тогда
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.ПоступлениеВКассу")
			И ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
			СтрокаТабличнойЧасти.Документ = Неопределено;
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеВКассу")
		 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
			СтрокаТабличнойЧасти.Документ = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // РасчетыСПокупателямиПризнакАвансаПриИзменении()

&НаКлиенте
Процедура РасчетыСПокупателямиДокументПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасчетыСПокупателями.ТекущиеДанные;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеВКассу")
	 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
		СтрокаТабличнойЧасти.ПризнакАванса = Истина;
	ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.Взаимозачет") Тогда
		СтрокаТабличнойЧасти.ПризнакАванса = Ложь;
	КонецЕсли;
	
КонецПроцедуры // РасчетыСПокупателямиДокументПриИзменении()

&НаКлиенте
Процедура РасчетыСПокупателямиПослеУдаления(Элемент)
	
	УстановитьВидимостьРеквизитовРасчетов("РасчетыСПокупателями");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасчетыСПоставщиками

&НаКлиенте
Процедура РасчетыСПоставщикамиКонтрагентПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.РасчетыСПоставщиками.ТекущиеДанные;
	
	ДанныеКонтрагента = ДанныеКонтрагентаДляИзменения(СтрокаТабличнойЧасти.Контрагент, Объект.Организация,
		"РасчетыСПоставщиками");
	
	СтрокаТабличнойЧасти.Договор = ДанныеКонтрагента.Договор;
	
	СтрокаТабличнойЧасти.ВестиРасчетыПоДоговорам = ДанныеКонтрагента.ВестиРасчетыПоДоговорам;
	СтрокаТабличнойЧасти.ВестиРасчетыПоДокументам = ДанныеКонтрагента.ВестиРасчетыПоДокументам;
	СтрокаТабличнойЧасти.ВестиРасчетыПоЗаказам = ДанныеКонтрагента.ВестиРасчетыПоЗаказам;
	СтрокаТабличнойЧасти.ВестиУчетОплатыПоСчетам = ДанныеКонтрагента.ВестиУчетОплатыПоСчетам;
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
		ДанныеКонтрагента.ВалютаРасчетов, Объект.Дата);

КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПоставщикамиДоговорПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасчетыСПоставщиками.ТекущиеДанные;
	
	ДанныеДоговора = ДанныеДоговораДляИзменения(СтрокаТабличнойЧасти.Договор);
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
		ДанныеДоговора.ВалютаРасчетов, Объект.Дата);

КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПоставщикамиДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.РасчетыСПоставщиками.ТекущиеДанные;
	
	ПараметрыФормы = ПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация, СтрокаТабличнойЧасти.Контрагент,
		СтрокаТабличнойЧасти.Договор, Неопределено, "РасчетыСПоставщиками");
	
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПоставщикамиСуммаВалПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасчетыСПоставщиками.ТекущиеДанные;
	
	ДанныеДоговора = ДанныеДоговораДляИзменения(СтрокаТабличнойЧасти.Договор);
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
		ДанныеДоговора.ВалютаРасчетов, Объект.Дата);
		
	Если Не ВалютаУчетаИНацСовпадают Тогда
		СтрокаТабличнойЧасти.СуммаРег = ПересчитатьИзВалютыВНациональнуюВалюту(СтрокаТабличнойЧасти.СуммаВал,
			ДанныеДоговора.ВалютаРасчетов, Объект.Дата);
	КонецЕсли;
	
КонецПроцедуры // РасчетыСПоставщикамиСуммаВалПриИзменении()

&НаКлиенте
Процедура РасчетыСПоставщикамиПослеУдаления(Элемент)
	
	УстановитьВидимостьРеквизитовРасчетов("РасчетыСПоставщиками");
	
КонецПроцедуры // РасчетыСПоставщикамиПослеУдаления()

&НаКлиенте
Процедура РасчетыСПоставщикамиПризнакАвансаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасчетыСПоставщиками.ТекущиеДанные;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.Взаимозачет") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ПризнакАванса Тогда
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.РасходИзКассы")
			И ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.РасходСоСчета")
			И ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			СтрокаТабличнойЧасти.Документ = Неопределено;
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.РасходИзКассы")
		 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.РасходСоСчета")
		 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			СтрокаТабличнойЧасти.Документ = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // РасчетыСПоставщикамиПризнакАвансаПриИзменении()

&НаКлиенте
Процедура РасчетыСПоставщикамиДокументПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасчетыСПоставщиками.ТекущиеДанные;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.РасходИзКассы")
	 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.РасходСоСчета")
	 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		СтрокаТабличнойЧасти.ПризнакАванса = Истина;
	ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.Взаимозачет") Тогда
		СтрокаТабличнойЧасти.ПризнакАванса = Ложь;
	КонецЕсли;
	
КонецПроцедуры // РасчетыСПоставщикамиДокументПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасчетыСПерсоналом

&НаКлиенте
Процедура РасчетыСПерсоналомПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		СтрокаТабличнойЧасти = Элементы.РасчетыСПерсоналом.ТекущиеДанные;
		СтрокаТабличнойЧасти.Валюта = ВалютаПоУмолчанию;
		
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ОсновноеПодразделение;
		
	КонецЕсли;
	
КонецПроцедуры // РасчетыСПерсоналомПриНачалеРедактирования()

&НаКлиенте
Процедура РасчетыСПерсоналомВалютаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасчетыСПерсоналом.ТекущиеДанные;
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
		СтрокаТабличнойЧасти.Валюта, Объект.Дата);

КонецПроцедуры // РасчетыСПерсоналомВалютаПриИзменении()

&НаКлиенте
Процедура РасчетыСПерсоналомСуммаВалПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасчетыСПерсоналом.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
		СтрокаТабличнойЧасти.Валюта, Объект.Дата);
	
КонецПроцедуры // РасчетыСПерсоналомСуммаВалПриИзменении()

&НаКлиенте
Процедура РасчетыСПерсоналомПериодРегистрацииПриИзменении(Элемент)
	
	ТекСтрока = Элементы.РасчетыСПерсоналом.ТекущиеДанные;
	ТекСтрока.ПериодРегистрации = НачалоМесяца(ТекСтрока.ПериодРегистрации);
	
КонецПроцедуры // РасчетыСПерсоналомПериодРегистрацииПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасчетыСПодотчетниками

&НаКлиенте
Процедура РасчетыСПодотчетникамиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		СтрокаТабличнойЧасти = Элементы.РасчетыСПодотчетниками.ТекущиеДанные;
		СтрокаТабличнойЧасти.Валюта = ВалютаПоУмолчанию;
		
	КонецЕсли;
	
КонецПроцедуры // РасчетыСПодотчетникамиПриНачалеРедактирования()

&НаКлиенте
Процедура РасчетыСПодотчетникамиВалютаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасчетыСПодотчетниками.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
		СтрокаТабличнойЧасти.Валюта, Объект.Дата);
	
КонецПроцедуры // РасчетыСПодотчетникамиВалютаПриИзменении()

&НаКлиенте
Процедура РасчетыСПодотчетникамиСуммаВалПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасчетыСПодотчетниками.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
		СтрокаТабличнойЧасти.Валюта, Объект.Дата);
	
КонецПроцедуры // РасчетыСПодотчетнымиЛицамиСуммаВалПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасчетыСПрочимиКонтрагентами

&НаКлиенте
Процедура РасчетыСПрочимиКонтрагентамиКонтрагентПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасчетыСПрочимиКонтрагентами.ТекущиеДанные;
	
	ДанныеКонтрагента = ДанныеКонтрагентаДляИзменения(СтрокаТабличнойЧасти.Контрагент, Объект.Организация,
		"РасчетыСПрочимиКонтрагентами");
	
	СтрокаТабличнойЧасти.Договор = ДанныеКонтрагента.Договор;
	
	СтрокаТабличнойЧасти.ВестиРасчетыПоДоговорам = ДанныеКонтрагента.ВестиРасчетыПоДоговорам;
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
		ДанныеКонтрагента.ВалютаРасчетов, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПрочимиКонтрагентамиСуммаВалПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасчетыСПрочимиКонтрагентами.ТекущиеДанные;
	
	ДанныеДоговора = ДанныеДоговораДляИзменения(СтрокаТабличнойЧасти.Договор);
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
		ДанныеДоговора.ВалютаРасчетов, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПрочимиКонтрагентамиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не ОтображатьСчетаУчета И НоваяСтрока Тогда
		Элемент.ТекущиеДанные.СчетУчета = ПредопределенноеЗначение(
			"ПланСчетов.Управленческий.РасчетыСРазнымиДебиторамиИКредиторами");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрочиеРазделы

&НаКлиенте
Процедура ПрочиеРазделыСчетПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПрочиеРазделы.ТекущиеДанные;
	ДанныеСчета = ДанныеСчетаПриИзменении(ТекущаяСтрока.Счет);
	
	Если ДанныеСчета.Валютный Тогда
		ТекущаяСтрока.Валюта = ДанныеСчета.Валюта;
		ТекущаяСтрока.СуммаВал = ТекущаяСтрока.Сумма;
	Иначе
		ТекущаяСтрока.Валюта = Неопределено;
		ТекущаяСтрока.СуммаВал = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // ПрочиеРазделыСчетПриИзменении()

&НаКлиенте
Процедура ПрочиеРазделыВалютаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ПрочиеРазделы.ТекущиеДанные;
	ДанныеСчета = ДанныеСчетаПриИзменении(ТекущаяСтрока.Счет);
	
	Если НЕ ДанныеСчета.Валютный Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ТекущаяСтрока.Счет) Тогда
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'У выбранного счета не установлен признак валютный.'"));
		Иначе
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите в начале счет.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПрочиеРазделыВалютаНачалоВыбора()

&НаКлиенте
Процедура ПрочиеРазделыВалютаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПрочиеРазделы.ТекущиеДанные;
	ДанныеСчета = ДанныеСчетаПриИзменении(ТекущаяСтрока.Счет);
	
	Если НЕ ДанныеСчета.Валютный Тогда
		ТекущаяСтрока.Валюта = Неопределено;
		Если ЗначениеЗаполнено(ТекущаяСтрока.Счет) Тогда
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'У выбранного счета не установлен признак валютный.'"));
		Иначе
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите в начале счет.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПрочиеРазделыВалютаПриИзменении()

&НаКлиенте
Процедура ПрочиеРазделыСуммаВалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ПрочиеРазделы.ТекущиеДанные;
	ДанныеСчета = ДанныеСчетаПриИзменении(ТекущаяСтрока.Счет);
	
	Если НЕ ДанныеСчета.Валютный Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ТекущаяСтрока.Счет) Тогда
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'У выбранного счета не установлен признак валютный.'"));
		Иначе
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите в начале счет.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПрочиеРазделыСуммаВалНачалоВыбора()

&НаКлиенте
Процедура ПрочиеРазделыСуммаВалПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПрочиеРазделы.ТекущиеДанные;
	ДанныеСчета = ДанныеСчетаПриИзменении(ТекущаяСтрока.Счет);
	
	Если НЕ ДанныеСчета.Валютный Тогда
		ТекущаяСтрока.СуммаВал = Неопределено;
		Если ЗначениеЗаполнено(ТекущаяСтрока.Счет) Тогда
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'У выбранного счета не установлен признак валютный.'"));
		Иначе
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите в начале счет.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПрочиеРазделыСуммаВалПриИзменении()

&НаКлиенте
Процедура ПрочиеРазделыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПрочиеРазделы.ТекущиеДанные;
	
	ДанныеСчета = ДанныеСчетаПриИзменении(ТекущаяСтрока.Счет);
	Если ДанныеСчета.Валюта = ТекущаяСтрока.Валюта Тогда
		ТекущаяСтрока.СуммаВал = ТекущаяСтрока.Сумма;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасчетыПоЭквайрингу

&НаКлиенте
Процедура РасчетыПоЭквайрингуСуммаВалПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.РасчетыПоЭквайрингу.ТекущиеДанные;

	ДанныеЭквайринговогоТерминала = ДанныеЭквайринговогоТерминалаПриИзменении(
		СтрокаТабличнойЧасти.ЭквайринговыйТерминал);

	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
		ДанныеЭквайринговогоТерминала.ВалютаДенежныхСредств, Объект.Дата);

КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоЭквайрингуКомиссияВалПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.РасчетыПоЭквайрингу.ТекущиеДанные;

	ДанныеЭквайринговогоТерминала = ДанныеЭквайринговогоТерминалаПриИзменении(
		СтрокаТабличнойЧасти.ЭквайринговыйТерминал);

	СтрокаТабличнойЧасти.Комиссия = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.КомиссияВал,
		ДанныеЭквайринговогоТерминала.ВалютаДенежныхСредств, Объект.Дата);

КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоЭквайрингуЭквайринговыйТерминалПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.РасчетыПоЭквайрингу.ТекущиеДанные;

	ДанныеЭквайринговогоТерминала = ДанныеЭквайринговогоТерминалаПриИзменении(
		СтрокаТабличнойЧасти.ЭквайринговыйТерминал);

	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
		ДанныеЭквайринговогоТерминала.ВалютаДенежныхСредств, Объект.Дата);

	СтрокаТабличнойЧасти.Комиссия = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.КомиссияВал,
		ДанныеЭквайринговогоТерминала.ВалютаДенежныхСредств, Объект.Дата);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗакупкиДляКУДИР

&НаКлиенте
Процедура ЗакупкиДляКУДИРПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если НоваяСтрока И Не Копирование Тогда
		СтрокаТабличнойЧасти.Количество = НовоеКоличествоПриИзмененииНоменклатуры;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакупкиДляКУДИРНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗакупкиДляКУДИР.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьСбросКоличества И СбрасыватьКоличество
		И СтрокаТабличнойЧасти.Количество <> НовоеКоличествоПриИзмененииНоменклатуры Тогда
		
		ДопПараметр = Новый Структура();
		ДопПараметр.Вставить("Элемент", Элемент);
		ДопПараметр.Вставить("Количество", СтрокаТабличнойЧасти.Количество);
		Оповещение = Новый ОписаниеОповещения("ЗакупкиДляКУДИРПодтверждениеСбросаКоличестваЗавершение",
			ЭтотОбъект, ДопПараметр);
		ОткрытьФорму("ОбщаяФорма.ПодтверждениеСбросаКоличества", , , , , , Оповещение);
		
	Иначе
		
		Если СбрасыватьКоличество Тогда
			НовоеКоличество = НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
		ЗакупкиДляКУДИРНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьСтавкуНДС(Команда)
	ЗаполнитьСтавкуНДСНаСервере();
	ПоказатьОповещениеПользователя(НСтр("ru = 'Завершено заполнение ставки НДС'"));
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСбросаКоличества(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтрокаПоиска", НСтр("ru = 'Сбрасывать количество при изменении номенклатуры'"));
	Оповещение = Новый ОписаниеОповещения("НастройкаСбросаКоличестваЗавершение", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.НастройкиПользователей.Форма.ФормаНастройкиПользователя", СтруктураПараметров, , , , ,
		Оповещение);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, 
		Элементы.ЗапасыКонтекстноеМенюНастройкаСбросаКоличества, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	
	Если Элементы.ГруппаЗапасыСтраницы.ТекущаяСтраница = Элементы.ГруппаЗапасыПереданные Тогда
		ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", "ЗапасыПереданные");
	ИначеЕсли Элементы.ГруппаЗапасыСтраницы.ТекущаяСтраница = Элементы.ГруппаЗапасыПринятые Тогда
		ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", "ЗапасыПринятые");
	ИначеЕсли Элементы.ГруппаЗапасыСтраницы.ТекущаяСтраница = Элементы.ГруппаЗапасыВРазрезеГТД Тогда
		ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", "ЗапасыВРазрезеГТД");
	КонецЕсли;
	
 	ПодключаемоеОборудованиеУНФКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)

	ТекШтрихкод = "";

	ОбработкаЗавершения = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект,
		Новый Структура("ТекШтрихкод", ТекШтрихкод));

	#Если МобильныйКлиент Тогда
		ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду", , , , , , ОбработкаЗавершения);
	#Иначе
		ПоказатьВводЗначения(ОбработкаЗавершения, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзВнешнегоИсточникаЗапасы(Команда)

	ТекущаяНастройкаЗагрузкиДанных = НастройкиЗагрузкиДанных.Запасы;
	ТекущаяНастройкаЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.Запасы";
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект,
		ТекущаяНастройкаЗагрузкиДанных);

	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(ТекущаяНастройкаЗагрузкиДанных,
		ОписаниеОповещения, ЭтотОбъект);

КонецПроцедуры
	
&НаКлиенте
Процедура ЗагрузитьДанныеИзВнешнегоИсточникаБонусныеБаллы(Команда)

	ТекущаяНастройкаЗагрузкиДанных = НастройкиЗагрузкиДанных.БонусныеБаллы;
	ТекущаяНастройкаЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.БонусныеБаллы";
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект,
		ТекущаяНастройкаЗагрузкиДанных);
	НастройкиПоиска = Новый Структура;
	НастройкиПоиска.Вставить("ИскатьПоКоду", Истина);
	НастройкиПоиска.Вставить("ИскатьПоШтрихкоду", Истина);	
	НастройкиПоиска.Вставить("ИскатьПоАртикулу", Ложь);
	НастройкиПоиска.Вставить("ИскатьПоНаименованию", Истина);
	НастройкиПоиска.Вставить("ИскатьПоНаименованиюЛевойЧасти", Ложь);
	НастройкиПоиска.Вставить("ИскатьПоНаименованиюПолному", Ложь);
	НастройкиПоиска.Вставить("ИскатьПоНаименованиюПолномуЛевойЧасти", Ложь);
	НастройкиПоиска.Вставить("ИскатьПоДополнительномуРеквизиту", Ложь);
	НастройкиПоиска.Вставить("ДополнительныйРеквизитПоиска", Неопределено);
	НастройкиПоиска.Вставить("ВариантПоиска", 0);
	НастройкиПоиска.Вставить("ТаблицаДублирующихсяСтрок",);
	ТекущаяНастройкаЗагрузкиДанных.Вставить("НастройкиПоиска", НастройкиПоиска);
	
	НастройкиОбновленияСвойств = Новый Структура;
	НастройкиОбновленияСвойств.Вставить("ИменаПолейОбновляемые", "ВладелецКарты, Комментарий");
	ТекущаяНастройкаЗагрузкиДанных.Вставить("НастройкиОбновленияСвойств", НастройкиОбновленияСвойств);

	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(ТекущаяНастройкаЗагрузкиДанных,
		ОписаниеОповещения, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзВнешнегоИсточникаПодарочныеСертификаты(Команда)

	ТекущаяНастройкаЗагрузкиДанных = НастройкиЗагрузкиДанных.ПодарочныеСертификаты;
	ТекущаяНастройкаЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ПодарочныеСертификаты";
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект,
		ТекущаяНастройкаЗагрузкиДанных);

	НастройкиПоиска = Новый Структура;
	НастройкиПоиска.Вставить("ИскатьПоКоду", Истина);
	НастройкиПоиска.Вставить("ИскатьПоШтрихкоду", Ложь);	
	НастройкиПоиска.Вставить("ИскатьПоАртикулу", Ложь);
	НастройкиПоиска.Вставить("ИскатьПоНаименованию", Ложь);
	НастройкиПоиска.Вставить("ИскатьПоНаименованиюЛевойЧасти", Ложь);
	НастройкиПоиска.Вставить("ИскатьПоНаименованиюПолному", Ложь);
	НастройкиПоиска.Вставить("ИскатьПоНаименованиюПолномуЛевойЧасти", Ложь);
	НастройкиПоиска.Вставить("ИскатьПоДополнительномуРеквизиту", Ложь);
	НастройкиПоиска.Вставить("ДополнительныйРеквизитПоиска", Неопределено);
	НастройкиПоиска.Вставить("ВариантПоиска", 0);
	ТекущаяНастройкаЗагрузкиДанных.Вставить("НастройкиПоиска", НастройкиПоиска);
	
	НастройкиОбновленияСвойств = Новый Структура;
	НастройкиОбновленияСвойств.Вставить("ИменаПолейОбновляемые", "ВладелецКарты, Комментарий");
	ТекущаяНастройкаЗагрузкиДанных.Вставить("НастройкиОбновленияСвойств", НастройкиОбновленияСвойств);

	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(ТекущаяНастройкаЗагрузкиДанных,
		ОписаниеОповещения, ЭтотОбъект);

КонецПроцедуры
&НаКлиенте

Процедура ЗагрузитьДанныеИзВнешнегоИсточникаНакопленныеПродажиПоДисконтнымКартам(Команда)

	ТекущаяНастройкаЗагрузкиДанных = НастройкиЗагрузкиДанных.НакопленныеПродажиПоДисконтнымКартам;
	ТекущаяНастройкаЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.НакопленныеПродажиПоДисконтнымКартам";
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект,
		ТекущаяНастройкаЗагрузкиДанных);
	
	НастройкиПоиска = Новый Структура;
	НастройкиПоиска.Вставить("ИскатьПоКоду", Истина);
	НастройкиПоиска.Вставить("ИскатьПоШтрихкоду", Истина);	
	НастройкиПоиска.Вставить("ИскатьПоАртикулу", Ложь);
	НастройкиПоиска.Вставить("ИскатьПоНаименованию", Истина);
	НастройкиПоиска.Вставить("ИскатьПоНаименованиюЛевойЧасти", Ложь);
	НастройкиПоиска.Вставить("ИскатьПоНаименованиюПолному", Ложь);
	НастройкиПоиска.Вставить("ИскатьПоНаименованиюПолномуЛевойЧасти", Ложь);
	НастройкиПоиска.Вставить("ИскатьПоДополнительномуРеквизиту", Ложь);
	НастройкиПоиска.Вставить("ДополнительныйРеквизитПоиска", Неопределено);
	НастройкиПоиска.Вставить("ВариантПоиска", 0);
	НастройкиПоиска.Вставить("ТаблицаДублирующихсяСтрок",);
	ТекущаяНастройкаЗагрузкиДанных.Вставить("НастройкиПоиска", НастройкиПоиска);
	
	НастройкиОбновленияСвойств = Новый Структура;
	НастройкиОбновленияСвойств.Вставить("ИменаПолейОбновляемые", "ВладелецКарты, Комментарий");
	ТекущаяНастройкаЗагрузкиДанных.Вставить("НастройкиОбновленияСвойств", НастройкиОбновленияСвойств);

	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(ТекущаяНастройкаЗагрузкиДанных,
		ОписаниеОповещения, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзВнешнегоИсточникаРасчетыСПокупателями(Команда)

	ТекущаяНастройкаЗагрузкиДанных = НастройкиЗагрузкиДанных.Запасы;
	ТекущаяНастройкаЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.РасчетыСПокупателями";
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект,
		ТекущаяНастройкаЗагрузкиДанных);

	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(ТекущаяНастройкаЗагрузкиДанных,
		ОписаниеОповещения, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзВнешнегоИсточникаРасчетыСПоставщиками(Команда)

	ТекущаяНастройкаЗагрузкиДанных = НастройкиЗагрузкиДанных.ПодарочныеСертификаты;
	ТекущаяНастройкаЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.РасчетыСПоставщиками";
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект,
		НастройкиЗагрузкиДанных);

	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(ТекущаяНастройкаЗагрузкиДанных,
		ОписаниеОповещения, ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(НомерСтроки, ИмяТаблицы = "Запасы")
	ДополнительныеСвойства = Новый Структура("НомерСтроки", НомерСтроки);
	СерииНоменклатурыУНФ.ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(Объект, ИмяТаблицы, ДополнительныеСвойства);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПодтверждениеСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗапрашиватьСбросКоличества = Результат.ЗапрашиватьСбросКоличества;
		Если НЕ ЗапрашиватьСбросКоличества Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		КонецЕсли;
		Если Результат.СбрасыватьКоличество Тогда
			НовоеКоличество = Результат.НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = ДополнительныеПараметры.Количество;
		КонецЕсли;
	Иначе
		НовоеКоличество = ДополнительныеПараметры.Количество;
	КонецЕсли;
	
	ЗапасыНоменклатураПриИзмененииПродолжить(ДополнительныеПараметры.Элемент, НовоеКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	ДанныеНоменклатуры = Новый Структура;
	ДанныеНоменклатуры.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	ДанныеНоменклатуры.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	ДанныеНоменклатуры.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
	ДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
	
	СтатусПартии = Новый СписокЗначений;
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	
	ДанныеНоменклатуры.Вставить("СтатусПартии", СтатусПартии);
	ДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
	
	СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, ДанныеНоменклатуры);
	ДанныеНоменклатуры = ДанныеНоменклатурыПриИзменении(ДанныеНоменклатуры);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = ДанныеНоменклатуры.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = НовоеКоличество;
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = ДанныеНоменклатуры.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = ДанныеНоменклатуры.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если ДанныеНоменклатуры.ИспользоватьХарактеристики Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
			СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Характеристика = ДанныеНоменклатуры.Характеристика;
		КонецЕсли;
	КонецЕсли;
	
	//Партии
	СтрокаТабличнойЧасти.ИспользоватьПартии = ДанныеНоменклатуры.ИспользоватьПартии;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = ДанныеНоменклатуры.ПроверятьЗаполнениеПартий;
	
	Если ДанныеНоменклатуры.ИспользоватьПартии Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Партия = СтруктураВыбораНоменклатуры.Партия;
			СтруктураВыбораНоменклатуры.Партия = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Партия = ДанныеНоменклатуры.Партия;
		КонецЕсли;
	КонецЕсли;
	// Конец Партии
	
	ПодборНоменклатурыИзСписка = Ложь;
	
	// Серии
	Если ИспользоватьСерииНоменклатурыОстатки<>Неопределено Тогда
		Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
			СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры,
				ТекущиеДанныеСтроки, ИспользоватьСерииНоменклатурыОстатки);
		КонецЦикла;
	КонецЕсли;
	СтрокаТабличнойЧасти.СтатусыСерийНоменклатуры = ДанныеНоменклатуры.СтатусыСерийНоменклатуры;
	// Серии
	
	СтрокаТабличнойЧасти.СтавкаНДС = ДанныеНоменклатуры.СтавкаНДС;
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НастройкиКоличества = ПолучитьНастройкиИзмененияКоличества();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиКоличества);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПереданныеПодтверждениеСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗапрашиватьСбросКоличества = Результат.ЗапрашиватьСбросКоличества;
		Если НЕ ЗапрашиватьСбросКоличества Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		КонецЕсли;
		Если Результат.СбрасыватьКоличество Тогда
			НовоеКоличество = Результат.НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = ДополнительныеПараметры.Количество;
		КонецЕсли;
	Иначе
		НовоеКоличество = ДополнительныеПараметры.Количество;
	КонецЕсли;
	
	ЗапасыПереданныеНоменклатураПриИзмененииПродолжить(ДополнительныеПараметры.Элемент, НовоеКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПереданныеНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыПереданные.ТекущиеДанные;
	
	ДанныеНоменклатуры = Новый Структура;
	ДанныеНоменклатуры.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	ДанныеНоменклатуры.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	ДанныеНоменклатуры.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
	ДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
	
	СтатусПартии = Новый СписокЗначений;
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	
	ДанныеНоменклатуры.Вставить("СтатусПартии", СтатусПартии);
	ДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
	
	ДанныеНоменклатуры = ДанныеНоменклатурыПриИзменении(ДанныеНоменклатуры);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = ДанныеНоменклатуры.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = НовоеКоличество;
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = ДанныеНоменклатуры.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = ДанныеНоменклатуры.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если ДанныеНоменклатуры.ИспользоватьХарактеристики Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
			СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Характеристика = ДанныеНоменклатуры.Характеристика;
		КонецЕсли;
	КонецЕсли;
	
	//Партии
	СтрокаТабличнойЧасти.ИспользоватьПартии = ДанныеНоменклатуры.ИспользоватьПартии;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = ДанныеНоменклатуры.ПроверятьЗаполнениеПартий;
	
	Если ДанныеНоменклатуры.ИспользоватьПартии Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Партия = СтруктураВыбораНоменклатуры.Партия;
			СтруктураВыбораНоменклатуры.Партия = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Партия = ДанныеНоменклатуры.Партия;
		КонецЕсли;
	КонецЕсли;
	// Конец Партии
	
	ПодборНоменклатурыИзСписка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПринятыеПодтверждениеСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗапрашиватьСбросКоличества = Результат.ЗапрашиватьСбросКоличества;
		Если НЕ ЗапрашиватьСбросКоличества Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		КонецЕсли;
		Если Результат.СбрасыватьКоличество Тогда
			НовоеКоличество = Результат.НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = ДополнительныеПараметры.Количество;
		КонецЕсли;
	Иначе
		НовоеКоличество = ДополнительныеПараметры.Количество;
	КонецЕсли;
	
	ЗапасыПринятыеНоменклатураПриИзмененииПродолжить(ДополнительныеПараметры.Элемент, НовоеКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПринятыеНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыПринятые.ТекущиеДанные;
	
	ДанныеНоменклатуры = Новый Структура;
	ДанныеНоменклатуры.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	ДанныеНоменклатуры.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	ДанныеНоменклатуры.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
	ДанныеНоменклатуры.Вставить("ВидОпреции", СтрокаТабличнойЧасти.ВидОперации);
	ДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
	ДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
	
	Если СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию") Тогда
		СтатусПартии = Новый СписокЗначений;
		СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
		
		ДанныеНоменклатуры.Вставить("СтатусПартии", СтатусПартии);
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку") Тогда
		СтатусПартии = Новый СписокЗначений;
		СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ДавальческоеСырье"));
		
		ДанныеНоменклатуры.Вставить("СтатусПартии", СтатусПартии);
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаОтветХранение") Тогда
		СтатусПартии = Новый СписокЗначений;
		СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ОтветственноеХранение"));
		
		ДанныеНоменклатуры.Вставить("СтатусПартии", СтатусПартии);
	КонецЕсли;
	
	ДанныеНоменклатуры = ДанныеНоменклатурыПриИзменении(ДанныеНоменклатуры);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = ДанныеНоменклатуры.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = НовоеКоличество;
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = ДанныеНоменклатуры.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = ДанныеНоменклатуры.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если ДанныеНоменклатуры.ИспользоватьХарактеристики
		Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
			СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Характеристика = ДанныеНоменклатуры.Характеристика;
		КонецЕсли;
	КонецЕсли;
	
	//Партии
	СтрокаТабличнойЧасти.ИспользоватьПартии = Истина;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = Истина;
	
	Если ДанныеНоменклатуры.Свойство("Партия") Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Партия = СтруктураВыбораНоменклатуры.Партия;
			СтруктураВыбораНоменклатуры.Партия = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Партия = ДанныеНоменклатуры.Партия;
		КонецЕсли;
	КонецЕсли;
	// Конец Партии
	
	ПодборНоменклатурыИзСписка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВРазрезеГТДПодтверждениеСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗапрашиватьСбросКоличества = Результат.ЗапрашиватьСбросКоличества;
		Если НЕ ЗапрашиватьСбросКоличества Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		КонецЕсли;
		Если Результат.СбрасыватьКоличество Тогда
			НовоеКоличество = Результат.НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = ДополнительныеПараметры.Количество;
		КонецЕсли;
	Иначе
		НовоеКоличество = ДополнительныеПараметры.Количество;
	КонецЕсли;
	
	ЗапасыВРазрезеГТДНоменклатураПриИзмененииПродолжить(ДополнительныеПараметры.Элемент, НовоеКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВРазрезеГТДНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество)

	СтрокаТабличнойЧасти = Элементы.ЗапасыВРазрезеГТД.ТекущиеДанные;
	
	ДанныеНоменклатуры = Новый Структура;
	ДанныеНоменклатуры.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	ДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
	
	СтатусПартии = Новый СписокЗначений;
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
	
	ДанныеНоменклатуры.Вставить("СтатусПартии", СтатусПартии);
	ДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
	
	ДанныеНоменклатуры = ДанныеНоменклатурыПриИзменении(ДанныеНоменклатуры);
	
	СтрокаТабличнойЧасти.СтранаПроисхождения = ДанныеНоменклатуры.СтранаПроисхождения;
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = ДанныеНоменклатуры.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = НовоеКоличество;
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = ДанныеНоменклатуры.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = ДанныеНоменклатуры.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если ДанныеНоменклатуры.ИспользоватьХарактеристики
		Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
			СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Характеристика = ДанныеНоменклатуры.Характеристика;
		КонецЕсли;
	КонецЕсли;
	
	//Партии
	СтрокаТабличнойЧасти.ИспользоватьПартии = ДанныеНоменклатуры.ИспользоватьПартии;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = ДанныеНоменклатуры.ПроверятьЗаполнениеПартий;
	
	Если ДанныеНоменклатуры.ИспользоватьПартии Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Партия = СтруктураВыбораНоменклатуры.Партия;
			СтруктураВыбораНоменклатуры.Партия = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Партия = ДанныеНоменклатуры.Партия;
		КонецЕсли;
	КонецЕсли;
	// Конец Партии
	
	ОчиститьНомерГТДПриИзмененииСтраны("ЗапасыВРазрезеГТД");
	ПодборНоменклатурыИзСписка = Ложь;
	
	// Прослеживаемость
	Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
		СтрокаТабличнойЧасти.ПрослеживаемыйТовар = ДанныеНоменклатуры.ПрослеживаемыйТовар;
	Иначе
		СтрокаТабличнойЧасти.ПрослеживаемыйТовар = Ложь;
	КонецЕсли; 
	// Конец Прослеживаемость
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПереданныеВРазрезеГТДПодтверждениеСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗапрашиватьСбросКоличества = Результат.ЗапрашиватьСбросКоличества;
		Если НЕ ЗапрашиватьСбросКоличества Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		КонецЕсли;
		Если Результат.СбрасыватьКоличество Тогда
			НовоеКоличество = Результат.НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = ДополнительныеПараметры.Количество;
		КонецЕсли;
	Иначе
		НовоеКоличество = ДополнительныеПараметры.Количество;
	КонецЕсли;
	
	ЗапасыПереданныеВРазрезеГТДНоменклатураПриИзмененииПродолжить(ДополнительныеПараметры.Элемент, НовоеКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПереданныеВРазрезеГТДНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыПереданныеВРазрезеГТД.ТекущиеДанные;
	
	ДанныеНоменклатуры = Новый Структура;
	ДанныеНоменклатуры.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	ДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
	
	СтатусПартии = Новый СписокЗначений;
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
	
	ДанныеНоменклатуры.Вставить("СтатусПартии", СтатусПартии);
	ДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
	
	ДанныеНоменклатуры = ДанныеНоменклатурыПриИзменении(ДанныеНоменклатуры);
	
	СтрокаТабличнойЧасти.СтранаПроисхождения = ДанныеНоменклатуры.СтранаПроисхождения;
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = ДанныеНоменклатуры.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = НовоеКоличество;
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = ДанныеНоменклатуры.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = ДанныеНоменклатуры.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если ДанныеНоменклатуры.ИспользоватьХарактеристики
		Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
			СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Характеристика = ДанныеНоменклатуры.Характеристика;
		КонецЕсли;
	КонецЕсли;
	
	//Партии
	СтрокаТабличнойЧасти.ИспользоватьПартии = ДанныеНоменклатуры.ИспользоватьПартии;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = ДанныеНоменклатуры.ПроверятьЗаполнениеПартий;
	
	Если ДанныеНоменклатуры.ИспользоватьПартии Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Партия = СтруктураВыбораНоменклатуры.Партия;
			СтруктураВыбораНоменклатуры.Партия = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Партия = ДанныеНоменклатуры.Партия;
		КонецЕсли;
	КонецЕсли;
	// Конец Партии
	
	ПодборНоменклатурыИзСписка = Ложь;
	
	ОчиститьНомерГТДПриИзмененииСтраны("ЗапасыПереданныеВРазрезеГТД");
	
	// Прослеживаемость
	Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
		СтрокаТабличнойЧасти.ПрослеживаемыйТовар = ДанныеНоменклатуры.ПрослеживаемыйТовар;
	Иначе
		СтрокаТабличнойЧасти.ПрослеживаемыйТовар = Ложь;
	КонецЕсли; 
	// Конец Прослеживаемость
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПринятыеВРазрезеГТДПодтверждениеСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗапрашиватьСбросКоличества = Результат.ЗапрашиватьСбросКоличества;
		Если НЕ ЗапрашиватьСбросКоличества Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		КонецЕсли;
		Если Результат.СбрасыватьКоличество Тогда
			НовоеКоличество = Результат.НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = ДополнительныеПараметры.Количество;
		КонецЕсли;
	Иначе
		НовоеКоличество = ДополнительныеПараметры.Количество;
	КонецЕсли;
	
	ЗапасыПринятыеВРазрезеГТДНоменклатураПриИзмененииПродолжить(ДополнительныеПараметры.Элемент, НовоеКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПринятыеВРазрезеГТДНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыПринятыеВРазрезеГТД.ТекущиеДанные;
	
	ДанныеНоменклатуры = Новый Структура;
	ДанныеНоменклатуры.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	ДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
	
	СтатусПартии = Новый СписокЗначений;
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
	
	ДанныеНоменклатуры.Вставить("СтатусПартии", СтатусПартии);
	ДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
	
	ДанныеНоменклатуры = ДанныеНоменклатурыПриИзменении(ДанныеНоменклатуры);
	
	СтрокаТабличнойЧасти.СтранаПроисхождения = ДанныеНоменклатуры.СтранаПроисхождения;
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = ДанныеНоменклатуры.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = НовоеКоличество;
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = ДанныеНоменклатуры.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = ДанныеНоменклатуры.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если ДанныеНоменклатуры.ИспользоватьХарактеристики
		Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
			СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Характеристика = ДанныеНоменклатуры.Характеристика;
		КонецЕсли;
	КонецЕсли;
	
	//Партии
	СтрокаТабличнойЧасти.ИспользоватьПартии = ДанныеНоменклатуры.ИспользоватьПартии;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = ДанныеНоменклатуры.ПроверятьЗаполнениеПартий;
	
	Если ДанныеНоменклатуры.ИспользоватьПартии
		Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Партия = СтруктураВыбораНоменклатуры.Партия;
			СтруктураВыбораНоменклатуры.Партия = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Партия = ДанныеНоменклатуры.Партия;
		КонецЕсли;
	КонецЕсли;
	// Конец Партии
	
	ОчиститьНомерГТДПриИзмененииСтраны("ЗапасыПринятыеВРазрезеГТД");
	ПодборНоменклатурыИзСписка = Ложь;
	
	// Прослеживаемость
	Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
		СтрокаТабличнойЧасти.ПрослеживаемыйТовар = ДанныеНоменклатуры.ПрослеживаемыйТовар;
	Иначе
		СтрокаТабличнойЧасти.ПрослеживаемыйТовар = Ложь;
	КонецЕсли; 
	// Конец Прослеживаемость
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьНомерГТДПриИзмененииСтраны(ИмяТЧ)
	
	ДанныеТекущейСтроки = Элементы[ИмяТЧ].ТекущиеДанные;
	Если ДанныеТекущейСтроки = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеТекущейСтроки.СтранаПроисхождения)
		ИЛИ ДанныеТекущейСтроки.СтранаПроисхождения = ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
		
		ДанныеТекущейСтроки.НомерГТД = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИменаСтраниц()
	
	ИменаСтраницДляЗаполнения = Новый Соответствие;
	ИменаСтраницДляЗаполнения.Вставить(Перечисления.РазделыУчета.Имущество, "ГруппаВнеоборотныеАктивы");
	ИменаСтраницДляЗаполнения.Вставить(Перечисления.РазделыУчета.Запасы, "ГруппаЗапасы");
	ИменаСтраницДляЗаполнения.Вставить(Перечисления.РазделыУчета.ДенежныеСредства, "ГруппаДенежныеСредства");
	ИменаСтраницДляЗаполнения.Вставить(Перечисления.РазделыУчета.РасчетыСПоставщикамиИПокупателями,
		"ГруппаРасчетыСКонтрагентами");
	ИменаСтраницДляЗаполнения.Вставить(Перечисления.РазделыУчета.РасчетыПоНалогам, "ГруппаРасчетыПоНалогам");
	ИменаСтраницДляЗаполнения.Вставить(Перечисления.РазделыУчета.РасчетыСПерсоналом, "ГруппаРасчетыСПерсоналом");
	ИменаСтраницДляЗаполнения.Вставить(Перечисления.РазделыУчета.РасчетыСПодотчетниками, "ГруппаРасчетыСПодотчетниками");
	ИменаСтраницДляЗаполнения.Вставить(Перечисления.РазделыУчета.РасчетыСПрочимиКонтрагентами,
		"ГруппаРасчетыСПрочимиКонтрагентами");
	ИменаСтраницДляЗаполнения.Вставить(Перечисления.РазделыУчета.ПрочиеРазделы, "ГруппаПрочиеРазделы");
	ИменаСтраницДляЗаполнения.Вставить(Перечисления.РазделыУчета.Эквайринг, "ГруппаРасчетыПоЭквайрингу");
	ИменаСтраницДляЗаполнения.Вставить(Перечисления.РазделыУчета.ЗакупкиТоваровДляУСН,
		"ГруппаЗакупкиНоменклатурыДляУСН");
	ИменаСтраницДляЗаполнения.Вставить(Перечисления.РазделыУчета.РасчетыСФондамиПоСтраховымВзносам,
		"ГруппаРасчетыСФондамиПоСтраховымВзносам");
	ИменаСтраницДляЗаполнения.Вставить(Перечисления.РазделыУчета.СкидкиБонусы,
		"ГруппаСкидки");
	ИменаСтраницДляЗаполнения.Вставить(Перечисления.РазделыУчета.РасчетыПоКредитамИЗаймам,
		"ГруппаРасчетыПоКредитамИЗаймам");
		
	ИменаСтраниц = ОбщегоНазначения.ФиксированныеДанные(ИменаСтраницДляЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокРазделовУчета()
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуЗарплата")
		Или Объект.РазделУчета = Перечисления.РазделыУчета.РасчетыСПерсоналом Тогда
		Элементы.РазделУчета.СписокВыбора.Добавить(Перечисления.РазделыУчета.РасчетыСПерсоналом);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УчетВнеоборотныхАктивов")
		Или Объект.РазделУчета = Перечисления.РазделыУчета.Имущество Тогда
		Элементы.РазделУчета.СписокВыбора.Добавить(Перечисления.РазделыУчета.Имущество);
	КонецЕсли;
	
	// Прочее
	Если ПолучитьФункциональнуюОпцию("ОтображатьСчетаУчета")
		Или Объект.РазделУчета = Перечисления.РазделыУчета.ПрочиеРазделы Тогда
		Элементы.РазделУчета.СписокВыбора.Добавить(Перечисления.РазделыУчета.ПрочиеРазделы);
	КонецЕсли;
	
	// Налоги
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОтчетность")
		Или Объект.РазделУчета = Перечисления.РазделыУчета.РасчетыПоНалогам Тогда
		Элементы.РазделУчета.СписокВыбора.Добавить(Перечисления.РазделыУчета.РасчетыПоНалогам);
	КонецЕсли;
	
	// Эквайринг
	Если ПолучитьФункциональнуюОпцию("ВестиУчетРасчетовСБанкомЭквайрером")
		Или Объект.РазделУчета = Перечисления.РазделыУчета.Эквайринг Тогда
		Элементы.РазделУчета.СписокВыбора.Добавить(Перечисления.РазделыУчета.Эквайринг);
	КонецЕсли;
	// Конец Эквайринг
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация,
			"ИспользуетсяОтчетность, ИПИспользуетТрудНаемныхРаботников");
		СистемаНалогообложения = РегистрыСведений.СистемыНалогообложенияОрганизаций.ПолучитьПоследнее(ДатаДокумента,
			Новый Структура("Организация", Объект.Организация));
		УСНДоходыРасходы = СистемаНалогообложения.ПлательщикУСН И СистемаНалогообложения.ОбъектНалогообложения
			= Перечисления.ВидыОбъектовНалогообложения.ДоходыМинусРасходы;
		// ФО Использовать Отчетность.
		ВестиУчетЗакупокДляКУДиР = РеквизитыОрганизации.ИспользуетсяОтчетность И УСНДоходыРасходы;
		Если ВестиУчетЗакупокДляКУДиР И Объект.ЗакупкиКУДиРОтдельнымДокументом
			Или Объект.РазделУчета = Перечисления.РазделыУчета.ЗакупкиТоваровДляУСН Тогда
			Элементы.РазделУчета.СписокВыбора.Добавить(Перечисления.РазделыУчета.ЗакупкиТоваровДляУСН);
		КонецЕсли;
		
		Если РеквизитыОрганизации.ИспользуетсяОтчетность И РеквизитыОрганизации.ИПИспользуетТрудНаемныхРаботников
			Или Объект.РазделУчета = Перечисления.РазделыУчета.РасчетыСФондамиПоСтраховымВзносам Тогда
			Элементы.РазделУчета.СписокВыбора.Добавить(Перечисления.РазделыУчета.РасчетыСФондамиПоСтраховымВзносам);
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("КредитыИЗаймы")
		Или Объект.РазделУчета = Перечисления.РазделыУчета.РасчетыПоКредитамИЗаймам Тогда
		Элементы.РазделУчета.СписокВыбора.Добавить(Перечисления.РазделыУчета.РасчетыПоКредитамИЗаймам);
	КонецЕсли;
	
	// Автоматические скидки
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммы")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьДисконтныеКарты")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты")
		Или Объект.РазделУчета = Перечисления.РазделыУчета.СкидкиБонусы Тогда
		Элементы.РазделУчета.СписокВыбора.Добавить(Перечисления.РазделыУчета.СкидкиБонусы);
	КонецЕсли;
	// Конец Автоматические скидки
	
КонецПроцедуры // СформироватьСписокРазделовУчета()

&НаКлиенте
Процедура УставитьТекущуюСтраницу()
	
	Элемент = Элементы.Найти(ИменаСтраниц.Получить(Объект.РазделУчета));
	
	Если Элемент <> Неопределено Тогда
		Элементы.Страницы.ТекущаяСтраница = Элемент;
	КонецЕсли;
	
КонецПроцедуры // УставитьТекущуюСтраницу()

// Процедура формирует соответствие видов операций.
//
&НаСервере
Процедура ПолучитьСтруктуруВидовОпераций()
	
	Если ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию") Тогда
		Элементы.ЗапасыПринятые.ПодчиненныеЭлементы.ЗапасыПринятыеВидОперации.СписокВыбора.Добавить(
			Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ПереработкаДавальческогоСырья") Тогда
		Элементы.ЗапасыПринятые.ПодчиненныеЭлементы.ЗапасыПринятыеВидОперации.СписокВыбора.Добавить(
			Перечисления.ВидыОперацийПриходнаяНакладная.ПриемВПереработку);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ПриемЗапасовНаОтветХранение") Тогда
		Элементы.ЗапасыПринятые.ПодчиненныеЭлементы.ЗапасыПринятыеВидОперации.СписокВыбора.Добавить(
			Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаОтветХранение);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ПередачаТоваровНаКомиссию") Тогда
		Элементы.ЗапасыПереданные.ПодчиненныеЭлементы.ЗапасыПереданныеВидОперации.СписокВыбора.Добавить(
			Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ПередачаСырьяВПереработку") Тогда
		Элементы.ЗапасыПереданные.ПодчиненныеЭлементы.ЗапасыПереданныеВидОперации.СписокВыбора.Добавить(
			Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ПередачаЗапасовНаОтветХранение") Тогда
		Элементы.ЗапасыПереданные.ПодчиненныеЭлементы.ЗапасыПереданныеВидОперации.СписокВыбора.Добавить(
			Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветХранение);
	КонецЕсли;
	
КонецПроцедуры // ПолучитьСтруктуруВидовОпераций()

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	Элементы.ЗапасыГруппаСерииНоменклатуры.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	Элементы.ГруппаБонусы.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьДисконтныеКарты") ИЛИ Объект.НакопленныеПродажиПоДисконтнымКартам.Количество();
	Элементы.ГруппаПодарочныеСертификаты.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты") ИЛИ Объект.ПодарочныеСертификаты.Количество();
	Элементы.ГруппаНакопленныеПродажиПоКартам.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммы") ИЛИ Объект.БонусныеБаллы.Количество();
	
	Если Объект.РазделУчета = Перечисления.РазделыУчета.РасчетыСПоставщикамиИПокупателями
		ИЛИ Объект.РазделУчета = Перечисления.РазделыУчета.РасчетыСПодотчетниками Тогда
		
		Элементы.Автоформирование.Видимость = Истина;
		
	Иначе
		
		Элементы.Автоформирование.Видимость = Ложь;
		Объект.Автоформирование = Ложь;
		
	КонецЕсли;
	
	Если Объект.РазделУчета = Перечисления.РазделыУчета.Запасы Тогда
		Элементы.ГруппаНДС.Видимость = Истина;
	Иначе
		Элементы.ГруппаНДС.Видимость = Ложь;
	КонецЕсли;
	
	// Прослеживаемость
	ПрослеживаемостьФормыКлиентСерверУНФ.НастроитьВидимостьКолонокРНПТ(ЭтотОбъект, "ЗапасыВРазрезеГТДГруппаРНПТ",
		"ЗапасыВРазрезеГТДПодсказкаРНПТ");
	ПрослеживаемостьФормыКлиентСерверУНФ.НастроитьВидимостьКолонокРНПТ(ЭтотОбъект,
		"ЗапасыПереданныеВРазрезеГТДГруппаРНПТ", "ЗапасыПереданныеВРазрезеГТДПодсказкаРНПТ");
	ПрослеживаемостьФормыКлиентСерверУНФ.НастроитьВидимостьКолонокРНПТ(ЭтотОбъект,
		"ЗапасыПринятыеВРазрезеГТДГруппаРНПТ", "ЗапасыПринятыеВРазрезеГТДПодсказкаРНПТ");
	// Конец Прослеживаемость
	
КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты)
	
	ДокументыУНФ.ДатаПриИзменении(ДанныеДляИзмененияДаты, ЭтотОбъект, Объект);
	
	// Прослеживаемость
	КэшЗначений.Вставить("ВестиУчетПрослеживаемыхТоваров", ПрослеживаемостьУНФ.ВедетсяУчетПрослеживаемыхТоваров(
		Объект.Дата));
	ОбновитьПризнакПрослеживаемости();
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ДокументыУНФ.ОрганизацияПриИзменении(ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеСчетаПриИзменении(Счет)
	
	Результат = Новый Структура();
	
	Валютный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Счет, "Валютный");
	Результат.Вставить("Валютный", Валютный);
	Результат.Вставить("Валюта", Константы.ВалютаУчета.Получить());
	
	Возврат Результат;
	
КонецФункции // ДанныеСчетаПриИзменении()

&НаСервереБезКонтекста
Функция ДанныеВнеоборотныйАктив(ВнеоборотныйАктив)
	
	Результат = Новый Структура;
	
	СпособАмортизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВнеоборотныйАктив, "СпособАмортизации");
	Результат.Вставить("СпособАмортизацииПропорциональноОбъемуПродукции", СпособАмортизации
		= Перечисления.СпособыНачисленияАмортизацииВнеоборотныхАктивов.ПропорциональноОбъемуПродукции);
	
	Возврат Результат;
	
КонецФункции // ДанныеВнеоборотныйАктив()

&НаСервереБезКонтекста
Функция ДанныеНоменклатурыПриИзменении(ДанныеНоменклатуры)
	
	РеквизитыНоменклатуры = Новый Структура;
	РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения");
	РеквизитыНоменклатуры.Вставить("ВидСтавкиНДС");
	РеквизитыНоменклатуры.Вставить("СтранаПроисхождения");
	РеквизитыНоменклатуры.Вставить("ЭтоНабор");
	РеквизитыНоменклатуры.Вставить("ИспользоватьХарактеристики");
	РеквизитыНоменклатуры.Вставить("ПроверятьЗаполнениеХарактеристики");
	РеквизитыНоменклатуры.Вставить("ИспользоватьПартии");
	РеквизитыНоменклатуры.Вставить("ПроверятьЗаполнениеПартий");
	РеквизитыНоменклатуры.Вставить("ИспользоватьСерииНоменклатуры");
	РеквизитыНоменклатуры.Вставить("ПрослеживаемыйТовар");
	РеквизитыНоменклатуры.Вставить("ТипНоменклатуры");
	РеквизитыНоменклатуры.Вставить("Склад");
	
	ЗначенияРеквизитовНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеНоменклатуры.Номенклатура,
		РеквизитыНоменклатуры);
	
	ДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", ЗначенияРеквизитовНоменклатуры.ЕдиницаИзмерения);
	СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(
		ЗначенияРеквизитовНоменклатуры.ВидСтавкиНДС, ?(ЗначениеЗаполнено(ДанныеНоменклатуры.ДатаОбработки),
		ДанныеНоменклатуры.ДатаОбработки, ТекущаяДатаСеанса()));
	ДанныеНоменклатуры.Вставить("СтавкаНДС", СтавкаНДС);
	ДанныеНоменклатуры.Вставить("СтранаПроисхождения", ЗначенияРеквизитовНоменклатуры.СтранаПроисхождения);
	// Наборы
	ДанныеНоменклатуры.Вставить("ЭтоНабор", ЗначенияРеквизитовНоменклатуры.ЭтоНабор);
	
	// Характеристики
	ДанныеНоменклатуры.Вставить("ИспользоватьХарактеристики", Ложь);
	ДанныеНоменклатуры.Вставить("ПроверятьЗаполнениеХарактеристики", Ложь);
	
	Если ЗначениеЗаполнено(ДанныеНоменклатуры.Номенклатура) И ЗначенияРеквизитовНоменклатуры.ИспользоватьХарактеристики Тогда
		
		ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(
			ДанныеНоменклатуры.Номенклатура);
		
		Если Не ЗначенияПоУмолчанию = Неопределено
			Тогда
			ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
		КонецЕсли;
		
		Если НЕ ДанныеНоменклатуры.Свойство("Характеристика") Тогда
			ДанныеНоменклатуры.Вставить("Характеристика",ХарактеристикаПоУмолчанию);
		Иначе
			ДанныеНоменклатуры.Характеристика = ?(ЗначениеЗаполнено(ДанныеНоменклатуры.Характеристика),
				ДанныеНоменклатуры.Характеристика, ХарактеристикаПоУмолчанию);
		КонецЕсли;
		
		ДанныеНоменклатуры.Вставить("ИспользоватьХарактеристики", Истина);
		ДанныеНоменклатуры.Вставить("ПроверятьЗаполнениеХарактеристики",
			ЗначенияРеквизитовНоменклатуры.ПроверятьЗаполнениеХарактеристики);
	КонецЕсли; 
	// Конец Характеристики
	
	Если ДанныеНоменклатуры.Свойство("ВидЦен") Тогда
		
		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(ДанныеНоменклатуры);
		ДанныеНоменклатуры.Вставить("Цена", Цена);
		
	Иначе
		
		ДанныеНоменклатуры.Вставить("Цена", 0);
		
	КонецЕсли;
	
	Если ДанныеНоменклатуры.Свойство("ВидСкидкиНаценки") 
		И ЗначениеЗаполнено(ДанныеНоменклатуры.ВидСкидкиНаценки) Тогда
		ДанныеНоменклатуры.Вставить("ПроцентСкидкиНаценки", ДанныеНоменклатуры.ВидСкидкиНаценки.Процент);
	Иначе
		ДанныеНоменклатуры.Вставить("ПроцентСкидкиНаценки", 0);
	КонецЕсли;
	
	//Партии
	ДанныеНоменклатуры.Вставить("ИспользоватьПартии",Ложь);
	ДанныеНоменклатуры.Вставить("ПроверятьЗаполнениеПартий",Ложь);
	
	Если НЕ ДанныеНоменклатуры.Свойство("Партия") Тогда
		ДанныеНоменклатуры.Вставить("Партия", Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеНоменклатуры.Номенклатура) И ЗначенияРеквизитовНоменклатуры.ИспользоватьПартии Тогда
		
		Если ДанныеНоменклатуры.Свойство("СтатусПартии") Тогда
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(
				ДанныеНоменклатуры.Номенклатура, ДанныеНоменклатуры.СтатусПартии);
		Иначе
			Если Не ДанныеНоменклатуры.Свойство("ВидОперации") Тогда
				ВидОперации = Неопределено;
			Иначе
				ВидОперации = ДанныеНоменклатуры.ВидОперации;
			КонецЕсли;
			СтатусПартии = НоменклатураВДокументахСервер.СоответствиеВидаОперацииИлиХозОперацииСтатусуПартии( ,
				ВидОперации);
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(
				ДанныеНоменклатуры.Номенклатура, СтатусПартии);
		КонецЕсли;
		
		ПартияПоУмолчанию = Справочники.ПартииНоменклатуры.ПустаяСсылка();
		
		Если Не ЗначенияПартииПоУмолчанию = Неопределено
			Тогда
			ПартияПоУмолчанию = ЗначенияПартииПоУмолчанию;
		КонецЕсли;
		
		ДанныеНоменклатуры.Партия = ?(ЗначениеЗаполнено(ДанныеНоменклатуры.Партия), ДанныеНоменклатуры.Партия,
			ПартияПоУмолчанию);
		
		ДанныеНоменклатуры.ПроверятьЗаполнениеПартий = ЗначенияРеквизитовНоменклатуры.ПроверятьЗаполнениеПартий;
		ДанныеНоменклатуры.ИспользоватьПартии = Истина;
		
	КонецЕсли;
	// Конец Партии
	
	Если ЗначениеЗаполнено(ДанныеНоменклатуры.Номенклатура)
		И ЗначенияРеквизитовНоменклатуры.ИспользоватьСерииНоменклатуры Тогда
		ДанныеНоменклатуры.Вставить("СтатусыСерийНоменклатуры",
			СерииНоменклатурыУНФ.СтатусСерийНоменклатурыПриИзменении(ДанныеНоменклатуры));
	Иначе
		ДанныеНоменклатуры.Вставить("СтатусыСерийНоменклатуры", 0);
	КонецЕсли;
	
	// Прослеживаемость
	ДанныеНоменклатуры.Вставить("ПрослеживаемыйТовар", ЗначенияРеквизитовНоменклатуры.ПрослеживаемыйТовар
		И ЗначенияРеквизитовНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас);
	// Конец Прослеживаемость
	
	ДанныеНоменклатуры.Вставить("Склад", ЗначенияРеквизитовНоменклатуры.Склад);
	
	ДополнитьСтавкойНДС(ДанныеНоменклатуры);
	
	Возврат ДанныеНоменклатуры;
	
КонецФункции // ДанныеНоменклатурыПриИзменении()

&НаСервереБезКонтекста
Функция ДанныеДенежныеСредстваБанковскийСчетКассаПриИзменении(БанковскийСчетКасса)

	Результат = Новый Структура();

	Если ТипЗнч(БанковскийСчетКасса) = Тип("СправочникСсылка.Кассы") Тогда
		ВалютаПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчетКасса, "ВалютаПоУмолчанию");
		Результат.Вставить("Валюта", ВалютаПоУмолчанию);
	ИначеЕсли ТипЗнч(БанковскийСчетКасса) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		ВалютаДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчетКасса, "ВалютаДенежныхСредств");
		Результат.Вставить("Валюта", ВалютаДенежныхСредств);
	Иначе
		Результат.Вставить("Валюта", Справочники.Валюты.ПустаяСсылка());
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВалютаДенежныеСредстваНачалоВыбора(БанковскийСчетКасса)

	Результат = Новый Структура;
	
	Если ТипЗнч(БанковскийСчетКасса) = Тип("СправочникСсылка.Кассы") Тогда
		Результат.Вставить("ТипДенежныхСредств", Перечисления.ТипыДенежныхСредств.Наличные);
	ИначеЕсли ТипЗнч(БанковскийСчетКасса) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		Результат.Вставить("ТипДенежныхСредств", Перечисления.ТипыДенежныхСредств.Безналичные);
	Иначе
		Результат.Вставить("ТипДенежныхСредств", Неопределено);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТипНоменклатурыЗапас(НоменклатураСсылка)
	
	ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоменклатураСсылка, "ТипНоменклатуры");
	Возврат ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас;
	
КонецФункции // ТипНоменклатурыЗапас()

&НаСервере
Функция ДанныеКонтрагентаДляИзменения(Знач Контрагент, Знач Организация, Знач ИмяТабличнойЧасти,
	Знач ВидОперации = Неопределено)
	
	Договор = ДоговорПоУказаннымПараметрам(Объект.Ссылка, Контрагент, Организация, ИмяТабличнойЧасти,
		ВидОперации);
	
	Результат = Новый Структура;
	Результат.Вставить("Договор", Договор);
	ВалютаРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВалютаРасчетов");
	Результат.Вставить("ВалютаРасчетов", ВалютаРасчетов);
	РеквизитыКонтрагента = РеквизитыВестиРасчеты();
	ЗначенияРеквизитовКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, РеквизитыКонтрагента);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат, ЗначенияРеквизитовКонтрагента, Истина);
	
	УстановитьВидимостьРеквизитовРасчетов(ИмяТабличнойЧасти, ЗначенияРеквизитовКонтрагента);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДоговорПоУказаннымПараметрам(Документ, Контрагент, Организация, ИмяТабличнойЧасти, ВидОперации = Неопределено)
	
	Если Не ЗначениеЗаполнено(ВидОперации) Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	ВестиРасчетыПоДоговорам = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ВестиРасчетыПоДоговорам");
	Если Не ВестиРасчетыПоДоговорам Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "ЗапасыПереданные" Или ИмяТабличнойЧасти = "ЗапасыПринятые" Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Результат = Справочники.ДоговорыКонтрагентов.ПоДокументуКонтрагентуОрганизацииИВидуОперации(Документ, Контрагент,
		Организация, ВидОперации);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьРеквизитовРасчетов(Знач ИмяТабличнойЧасти,
	Знач ЗначенияРеквизитовКонтрагента = Неопределено)
	
	РеквизитыВестиРасчеты = РеквизитыВестиРасчеты();
	
	Если ЗначениеЗаполнено(ЗначенияРеквизитовКонтрагента) Тогда
		ЗаполнитьЗначенияСвойств(РеквизитыВестиРасчеты, ЗначенияРеквизитовКонтрагента);
	Иначе
		РеквизитыВестиРасчеты.ВестиРасчетыПоДоговорам = Ложь;
		РеквизитыВестиРасчеты.ВестиРасчетыПоДокументам = Ложь;
		РеквизитыВестиРасчеты.ВестиРасчетыПоЗаказам = Ложь;
		РеквизитыВестиРасчеты.ВестиУчетОплатыПоСчетам = Ложь;
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизитыПоКонтрагентуВКоллекции(Объект[ИмяТабличнойЧасти]);
	
	Для каждого ТекСтрока Из Объект[ИмяТабличнойЧасти] Цикл
		Если ТекСтрока.ВестиРасчетыПоДоговорам Тогда
			РеквизитыВестиРасчеты.ВестиРасчетыПоДоговорам = Истина;
		КонецЕсли;
		Если ТекСтрока.ВестиРасчетыПоДокументам Тогда
			РеквизитыВестиРасчеты.ВестиРасчетыПоДокументам = Истина;
		КонецЕсли;
		Если ТекСтрока.ВестиРасчетыПоЗаказам Тогда
			РеквизитыВестиРасчеты.ВестиРасчетыПоЗаказам = Истина;
		КонецЕсли;
		Если ТекСтрока.ВестиУчетОплатыПоСчетам Тогда
			РеквизитыВестиРасчеты.ВестиУчетОплатыПоСчетам = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ИмяТабличнойЧасти = "РасчетыСПоставщиками" Тогда
		Элементы.РасчетыСПоставщикамиДоговор.Видимость = РеквизитыВестиРасчеты.ВестиРасчетыПоДоговорам;
		Элементы.РасчетыСПоставщикамиДокумент.Видимость = РеквизитыВестиРасчеты.ВестиРасчетыПоДокументам;
		Элементы.РасчетыСПоставщикамиЗаказПоставщику.Видимость = РеквизитыВестиРасчеты.ВестиРасчетыПоЗаказам;
		Элементы.РасчетыСПоставщикамиСчетНаОплату.Видимость = РеквизитыВестиРасчеты.ВестиУчетОплатыПоСчетам;
		Элементы.РасчетыСПоставщикамиСуммаРег.Видимость = НЕ ВалютаУчетаИНацСовпадают;
	ИначеЕсли ИмяТабличнойЧасти = "РасчетыСПокупателями" Тогда
		Элементы.РасчетыСПокупателямиДоговор.Видимость = РеквизитыВестиРасчеты.ВестиРасчетыПоДоговорам;
		Элементы.РасчетыСПокупателямиДокумент.Видимость = РеквизитыВестиРасчеты.ВестиРасчетыПоДокументам;
		Элементы.РасчетыСПокупателямиЗаказПокупателя.Видимость = РеквизитыВестиРасчеты.ВестиРасчетыПоЗаказам;
		Элементы.РасчетыСПокупателямиСчетНаОплату.Видимость = РеквизитыВестиРасчеты.ВестиУчетОплатыПоСчетам;
		Элементы.РасчетыСПокупателямиСуммаРег.Видимость = НЕ ВалютаУчетаИНацСовпадают;
	ИначеЕсли ИмяТабличнойЧасти = "ЗапасыПереданные" Тогда
		Элементы.ЗапасыПереданныеДоговор.Видимость = РеквизитыВестиРасчеты.ВестиРасчетыПоДоговорам;
	ИначеЕсли ИмяТабличнойЧасти = "ЗапасыПринятые" Тогда
		Элементы.ЗапасыПринятыеДоговор.Видимость = РеквизитыВестиРасчеты.ВестиРасчетыПоДоговорам;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьРеквизитовРасчетов()

&НаКлиентеНаСервереБезКонтекста
Функция РеквизитыВестиРасчеты()
	
	Результат = Новый Структура;
	Результат.Вставить("ВестиРасчетыПоДоговорам");
	Результат.Вставить("ВестиРасчетыПоДокументам");
	Результат.Вставить("ВестиРасчетыПоЗаказам");
	Результат.Вставить("ВестиУчетОплатыПоСчетам");
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьСлужебныеРеквизитыПоКонтрагентуВКоллекции(КоллекцияДанных)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Таблица.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	|	Таблица.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ ТаблицаКонтрагента
	|ИЗ
	|	&КоллекцияДанных КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКонтрагента.Контрагент.ВестиРасчетыПоДоговорам КАК ВестиРасчетыПоДоговорам,
	|	ТаблицаКонтрагента.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ТаблицаКонтрагента.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	ТаблицаКонтрагента.Контрагент.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам
	|ИЗ
	|	ТаблицаКонтрагента КАК ТаблицаКонтрагента";
	
	Запрос.УстановитьПараметр("КоллекцияДанных", КоллекцияДанных.Выгрузить( ,"НомерСтроки, Контрагент"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Для Сч = 0 По КоллекцияДанных.Количество() - 1 Цикл
		Выборка.Следующий(); // Количество строк в выборке по запросу всегда равно количеству строк в коллекции
		ЗаполнитьЗначенияСвойств(КоллекцияДанных[Сч], Выборка,
			"ВестиРасчетыПоДоговорам, ВестиРасчетыПоДокументам, ВестиРасчетыПоЗаказам, ВестиУчетОплатыПоСчетам");
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСлужебныеРеквизитыПоКонтрагентуВКоллекции()

&НаСервереБезКонтекста
Функция ДанныеДоговораДляИзменения(Знач Договор)

	Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "ВалютаРасчетов");
	Возврат Результат;

КонецФункции

// Функция пересчитывает сумму из указанной валюты в валюту упр. учета.
//
// Параметры:      
//	СуммаВал  - Число                   - сумма в валюте, которую следует пересчитать.
//	Валюта    - СправочникСсылка.Валюты - валюте, из которой следует пересчитать.
// 	ДатаКурса - Дата                    - дата курса.
//
// Возвращаемое значение: 
//  Число - сумма в валюте управленческого учета.
//
&НаСервереБезКонтекста
Функция ПересчитатьИзВалютыВВалютуУчета(СуммаВал, Валюта, ДатаКурса)

	Сумма = 0;

	Если ЗначениеЗаполнено(Валюта) Тогда

		ВалютаУчета = Константы.ВалютаУчета.Получить();

		КурсыВалют = ЦенообразованиеСервер.ПолучитьКурсыВалют(Валюта, ВалютаУчета, ДатаКурса);

		Сумма = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(СуммаВал, КурсыВалют.КурсНач,
			КурсыВалют.Курс, КурсыВалют.КратностьНач, КурсыВалют.Кратность);

	КонецЕсли;

	Возврат Сумма;

КонецФункции // ПересчитатьИзВалютыВВалютуУчета()

// Функция пересчитывает сумму из указанной валюты в валюту упр. учета.
//
// Параметры:      
//	СуммаВал  - Число                   - сумма в валюте, которую следует пересчитать.
//	Валюта    - СправочникСсылка.Валюты - валюте, из которой следует пересчитать.
// 	ДатаКурса - Дата                    - дата курса.
//
// Возвращаемое значение: 
//  Число - сумма в валюте управленческого учета.
//
&НаСервереБезКонтекста
Функция ПересчитатьИзВалютыВНациональнуюВалюту(СуммаВал, Валюта, ДатаКурса)
	
	Сумма = 0;
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		
		КурсыВалют = ЦенообразованиеСервер.ПолучитьКурсыВалют(Валюта, Валюта, ДатаКурса);
		Сумма = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(СуммаВал, КурсыВалют.КурсНач, 1,
			КурсыВалют.КратностьНач, 1);
	
	КонецЕсли;
	
	Возврат Сумма;
	
КонецФункции // ПересчитатьИзВалют()

&НаСервере
Процедура УстановитьВидимостьОтФОИспользоватьПодсистемуПроизводство()
	
	// Производство.
	Если Константы.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство.Получить() Тогда
		
		// Установка способа выбора структурной единицы в зависимости от ФО.
		Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить()
			И НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить() Тогда
			
			Элементы.ЗапасыСтруктурнаяЕдиница.РежимВыбораИзСписка = Истина;
			Если ЗначениеЗаполнено(ОсновнойСклад) Тогда
				Элементы.ЗапасыСтруктурнаяЕдиница.СписокВыбора.Добавить(ОсновнойСклад);
			КонецЕсли;
			Элементы.ЗапасыСтруктурнаяЕдиница.СписокВыбора.Добавить(ОсновноеПодразделение);
			
		КонецЕсли;
		
	Иначе
		
		Если Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить() Тогда
			
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Склад);
			НовыйМассив.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Розница);
			МассивТипыСтруктурныхЕдиниц = Новый ФиксированныйМассив(НовыйМассив);
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСтруктурнойЕдиницы", МассивТипыСтруктурныхЕдиниц);
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			
			Элементы.ЗапасыСтруктурнаяЕдиница.ПараметрыВыбора = НовыеПараметры;
			
		Иначе
			
			Элементы.ЗапасыСтруктурнаяЕдиница.Видимость = Ложь;
			
		КонецЕсли;
		
		Элементы.ГруппаПрямыеЗатраты.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьОтФОИспользоватьПодсистемуПроизводство()

&НаСервереБезКонтекста
Функция ПараметрыФормыВыбора(Документ, Организация, Контрагент, Договор, ВидОперации, ИмяТабличнойЧасти)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ,
		ВидОперации, ИмяТабличнойЧасти);
	
	ВестиРасчетыПоДоговорам = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ВестиРасчетыПоДоговорам");
	Результат = Новый Структура;
	Результат.Вставить("КонтролироватьВыборДоговора", ВестиРасчетыПоДоговорам);
	Результат.Вставить("Контрагент", Контрагент);
	Результат.Вставить("Организация", Организация);
	Результат.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	Результат.Вставить("ТекущаяСтрока", Договор);
	Результат.Вставить("РежимВыбора", Истина);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборыПоЭквайрингу()
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетРасчетовСБанкомЭквайрером") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.ЭтоДоговорЭквайринга
		|	И НЕ ДоговорыКонтрагентов.КонтрольВзаиморасчетовЭквайринг";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивДоговоровЭквайрингаБезКонтроляПоОперациям = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	// Устанавливаем массив договоров как условие для отбора
	МассивПараметров = Новый Массив();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Договор", МассивДоговоровЭквайрингаБезКонтроляПоОперациям));
	НовыеПараметрыВыбора =  Новый ФиксированныйМассив(МассивПараметров);
	
	Элементы.РасчетыПоЭквайрингуЭквайринговыйТерминал.ПараметрыВыбора = НовыеПараметрыВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияФоновогоЗаданияОбработкиНоменклатуры(Прогресс, ДополнительныеПараметры) Экспорт
	
	Если НЕ Прогресс = Неопределено Тогда
		ОбработатьПодготовленныеДанныеЗапасы(Прогресс.АдресРезультата);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияФоновогоЗаданияОбработкиДисконтныхКартБонусныеБаллы(Прогресс, ДополнительныеПараметры) Экспорт
	
	Если НЕ Прогресс = Неопределено Тогда
		ОбработатьПодготовленныеДанныеБонусныеБаллы(Прогресс.АдресРезультата);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияФоновогоЗаданияОбработкиДисконтныхКартНакопленныеПродажиПоДисконтнымКартам(Прогресс, ДополнительныеПараметры) Экспорт
	
	Если НЕ Прогресс = Неопределено Тогда
		ОбработатьПодготовленныеДанныеНакопленныеПродажиПоДисконтнымКартам(Прогресс.АдресРезультата);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияФоновогоЗаданияОбработкиПодарочныхСертификатов(Прогресс, ДополнительныеПараметры) Экспорт
	
	Если НЕ Прогресс = Неопределено Тогда
		ОбработатьПодготовленныеДанныеПодарочныеСертификаты(Прогресс.АдресРезультата);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеобходимостьПодключенияОбработчикаОжиданияОбработкиНоменклатуры(ДлительнаяОперация, СтруктураПараметров = Неопределено)
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ПослеВыполненияФоновогоЗаданияОбработкиНоменклатуры(ДлительнаяОперация, СтруктураПараметров);
		
	Иначе
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеВыполненияФоновогоЗаданияОбработкиНоменклатуры", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Идет загрузка данных.'");
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеобходимостьПодключенияОбработчикаОжиданияОбработкиДисконтныхКартБонусныеБаллы(ДлительнаяОперация, СтруктураПараметров = Неопределено)
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ПослеВыполненияФоновогоЗаданияОбработкиДисконтныхКартБонусныеБаллы(ДлительнаяОперация, СтруктураПараметров);
		
	Иначе
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеВыполненияФоновогоЗаданияОбработкиДисконтныхКартБонусныеБаллы", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Идет загрузка данных.'");
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеобходимостьПодключенияОбработчикаОжиданияОбработкиДисконтныхКартПродажиПоДК(ДлительнаяОперация, СтруктураПараметров = Неопределено)
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ПослеВыполненияФоновогоЗаданияОбработкиДисконтныхКартНакопленныеПродажиПоДисконтнымКартам(ДлительнаяОперация, СтруктураПараметров);
		
	Иначе
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеВыполненияФоновогоЗаданияОбработкиДисконтныхКартНакопленныеПродажиПоДисконтнымКартам", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Идет загрузка данных.'");
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);		
	КонецЕсли;
	
КонецПроцедуры

// Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100);
	СтрокаТабличнойЧасти.СуммаБезНДС = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаНДС;
	
КонецПроцедуры // РассчитатьСуммуНДС()

// Рассчитывается сумма НДС в строке табличной части.
//
&НаСервере
Процедура РассчитатьСуммуНДСНаСервере(СтрокаТабличнойЧасти)
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100);
	СтрокаТабличнойЧасти.СуммаБезНДС = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаНДС;
	
КонецПроцедуры // РассчитатьСуммуНДС()

&НаСервере
Процедура ЗаполнитьСтавкуНДСНаСервере()
	
	ДанныеНоменклатуры = Новый Структура("ДатаОбработки", Объект.Дата);
	Для Каждого ТекущаяСтрока Из Объект.Запасы Цикл
		ДанныеНоменклатуры.Вставить("Номенклатура", ТекущаяСтрока.Номенклатура);
		ДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
		ДополнитьСтавкойНДС(ДанныеНоменклатуры);
		ТекущаяСтрока.СтавкаНДС = ДанныеНоменклатуры.СтавкаНДС;
		РассчитатьСуммуНДСНаСервере(ТекущаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьСтавкойНДС(ДанныеНоменклатуры)
	
	ВидСтавкиНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеНоменклатуры.Номенклатура, "ВидСтавкиНДС");
	Если ЗначениеЗаполнено(ВидСтавкиНДС) Тогда
		СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(ВидСтавкиНДС, ДанныеНоменклатуры.ДатаОбработки);
		ДанныеНоменклатуры.Вставить("СтавкаНДС", СтавкаНДС);
	Иначе
		ВидСтавкиНДСПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеНоменклатуры.Организация,
			"ВидСтавкиНДСПоУмолчанию");
		СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(ВидСтавкиНДСПоУмолчанию, ДанныеНоменклатуры.ДатаОбработки);
		ДанныеНоменклатуры.Вставить("СтавкаНДС", СтавкаНДС);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНастройкиИзмененияКоличества()
	
	НастройкиКоличества = ДокументыУНФКлиентСервер.ПараметрыСбросаКоличества();
	ДокументыУНФ.ЗаполнитьНастройкиКоличества(НастройкиКоличества);
	Возврат НастройкиКоличества;
	
КонецФункции

&НаКлиенте
Процедура ЗакупкиДляКУДИРПодтверждениеСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗапрашиватьСбросКоличества = Результат.ЗапрашиватьСбросКоличества;
		Если НЕ ЗапрашиватьСбросКоличества Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		КонецЕсли;
		Если Результат.СбрасыватьКоличество Тогда
			НовоеКоличество = Результат.НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = ДополнительныеПараметры.Количество;
		КонецЕсли;
	Иначе
		НовоеКоличество = ДополнительныеПараметры.Количество;
	КонецЕсли;
	
	ЗакупкиДляКУДИРНоменклатураПриИзмененииПродолжить(ДополнительныеПараметры.Элемент, НовоеКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакупкиДляКУДИРНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество)

	СтрокаТабличнойЧасти = Элементы.ЗакупкиДляКУДИР.ТекущиеДанные;
	СтрокаТабличнойЧасти.Количество = НовоеКоличество;	

КонецПроцедуры

#Область Прослеживаемость

&НаКлиенте
Процедура ОбработкаВыбораРНПТННаКлиенте(ВыбранноеЗначение)
	
	Если Элементы.Страницы.ТекущаяСтраница.Имя = "ГруппаЗапасы" Тогда
		Если Элементы.ГруппаЗапасыСтраницы.ТекущаяСтраница.Имя = "ГруппаЗапасыВРазрезеГТД" Тогда
			СтрокаТабличнойЧасти = Элементы.ЗапасыВРазрезеГТД.ТекущиеДанные;
		ИначеЕсли Элементы.ГруппаЗапасыСтраницы.ТекущаяСтраница.Имя = "ГруппаЗапасыПереданныеВРазрезеГТД" Тогда
			СтрокаТабличнойЧасти = Элементы.ЗапасыПереданныеВРазрезеГТД.ТекущиеДанные;
		ИначеЕсли Элементы.ГруппаЗапасыСтраницы.ТекущаяСтраница.Имя = "ГруппаЗапасыПринятыеВРазрезеГТД" Тогда
			СтрокаТабличнойЧасти = Элементы.ЗапасыПринятыеВРазрезеГТД.ТекущиеДанные;
		КонецЕсли;
	КонецЕсли;
			
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторСтроки) Тогда
			СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;
		ОбработкаВыбораРНПТННаСервере(СтрокаТабличнойЧасти.ИдентификаторСтроки, ВыбранноеЗначение);
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаТабличнойЧасти);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбработкаВыбораГТДНаКлиенте(ВыбранноеЗначение)
	
	ИмяТабличнойЧасти = "";
	
	Если Элементы.Страницы.ТекущаяСтраница.Имя = "ГруппаЗапасы" Тогда
		Если Элементы.ГруппаЗапасыСтраницы.ТекущаяСтраница.Имя = "ГруппаЗапасыВРазрезеГТД" Тогда
			СтрокаТабличнойЧасти = Элементы.ЗапасыВРазрезеГТД.ТекущиеДанные;
			ИмяТабличнойЧасти = "ЗапасыВРазрезеГТД";
		ИначеЕсли Элементы.ГруппаЗапасыСтраницы.ТекущаяСтраница.Имя = "ГруппаЗапасыПереданныеВРазрезеГТД" Тогда
			СтрокаТабличнойЧасти = Элементы.ЗапасыПереданныеВРазрезеГТД.ТекущиеДанные;
			ИмяТабличнойЧасти = "ЗапасыПереданныеВРазрезеГТД";
		ИначеЕсли Элементы.ГруппаЗапасыСтраницы.ТекущаяСтраница.Имя = "ЗапасыПринятыеВРазрезеГТД" Тогда
			СтрокаТабличнойЧасти = Элементы.ЗапасыПринятыеВРазрезеГТД.ТекущиеДанные;
			ИмяТабличнойЧасти = "ЗапасыПринятыеВРазрезеГТД";
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти <> Неопределено И ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
		
		// Если в результате выбора пришло только значение,
		// то переложим его в структуру.
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.НомераГТД") Тогда
			ВыбранноеЗначение = Новый Структура("НомерГТД", ВыбранноеЗначение);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
			
			ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
			Если ДатаГТД > КонецДня(Объект.Дата) Тогда
				
				ТекстСообщения = НСтр("ru ='Выбранная ГТД датирована более поздней датой, чем текущий документ'");
				ДополнениеТекста = СтрШаблон("Объект.%1[%2].РНПТ", ИмяТабличнойЧасти,
					СтрокаТабличнойЧасти.ПолучитьИдентификатор());
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , ДополнениеТекста);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаТабличнойЧасти);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораРНПТННаСервере(ИдентификаторСтроки, ВыбранноеЗначение)
	
	ПрослеживаемостьФормыУНФ.ОбработкаВыбораРНПТН(ЭтотОбъект, ИдентификаторСтроки, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСвязанныеЗаписи(СтрокаЗапасы)
	
	СтруктураОтбора = Новый Структура("ИдентификаторСтроки", СтрокаЗапасы.ИдентификаторСтроки);
	МассивСтрокСведенияПрослеживаемости = Объект.СведенияПрослеживаемости.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаТЧ Из МассивСтрокСведенияПрослеживаемости Цикл
		Объект.СведенияПрослеживаемости.Удалить(СтрокаТЧ);
	КонецЦикла;
	ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПризнакПрослеживаемости()
	
	ИспользуетсяПрослеживаемость = КэшЗначений.ВестиУчетПрослеживаемыхТоваров;
	ПрослеживаемостьФормыУНФ.ОбновитьПризнакПрослеживаемости(Объект.ЗапасыВРазрезеГТД, Объект.СведенияПрослеживаемости,
		ИспользуетсяПрослеживаемость);
	ПрослеживаемостьФормыУНФ.ОбновитьПризнакПрослеживаемости(Объект.ЗапасыПереданныеВРазрезеГТД,
		Объект.СведенияПрослеживаемости, ИспользуетсяПрослеживаемость);
	ПрослеживаемостьФормыУНФ.ОбновитьПризнакПрослеживаемости(Объект.ЗапасыПринятыеВРазрезеГТД,
		Объект.СведенияПрослеживаемости, ИспользуетсяПрослеживаемость);
	
	Для Каждого СтрокаЗапасы Из Объект.ЗапасыВРазрезеГТД Цикл
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	КонецЦикла;
	
	Для Каждого СтрокаЗапасы Из Объект.ЗапасыПереданныеВРазрезеГТД Цикл
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	КонецЦикла;
	
	Для Каждого СтрокаЗапасы Из Объект.ЗапасыПринятыеВРазрезеГТД Цикл
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеПрослеживаемости()
	
	ПрослеживаемостьФормыУНФ.ПриСозданииФормы(ЭтотОбъект, КэшЗначений);
	Для Каждого СтрокаЗапасы Из Объект.ЗапасыВРазрезеГТД Цикл
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	КонецЦикла;
	
	Для Каждого СтрокаЗапасы Из Объект.ЗапасыПереданныеВРазрезеГТД Цикл
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	КонецЦикла;
	
	Для Каждого СтрокаЗапасы Из Объект.ЗапасыПринятыеВРазрезеГТД Цикл
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемоеОборудование

&НаСервереБезКонтекста
Процедура ДополнитьДанныеПоШтрихКодам(ДополняемыеДанные, ИмяТабличнойЧасти = "Запасы")
	
	// Преобразование весовых штрихкодов.
	Для Каждого ТекШтрихкод Из ДополняемыеДанные.МассивШтрихкодов Цикл
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодамВМассиве(
		ДополняемыеДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из ДополняемыеДанные.МассивШтрихкодов Цикл
		
		МассивДанныхШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если МассивДанныхШтрихкода <> Неопределено
			И МассивДанныхШтрихкода.Количество() <> 0 Тогда
			
			Для Каждого ДанныеШтрихкода Из МассивДанныхШтрихкода Цикл
				
				ДанныеНоменклатуры = Новый Структура;
				ДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
				ДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
				ДанныеНоменклатуры.Вставить("ДатаОбработки", ДополняемыеДанные.Дата);
				ДанныеШтрихкода.Вставить("ДанныеНоменклатуры", ДанныеНоменклатурыПриИзменении(ДанныеНоменклатуры));
				
				Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
					ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДополняемыеДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	МетаданныеТабличнойЧасти = Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти[ИмяТабличнойЧасти];
	ПараметрыВыбораНоменклатуры = МетаданныеТабличнойЧасти.Реквизиты.Номенклатура.ПараметрыВыбора;
	Для Каждого ТекущийПараметрВыбора Из ПараметрыВыбораНоменклатуры Цикл
		Если ТекущийПараметрВыбора.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(ТекущийПараметрВыбора.Значение) = Тип("ФиксированныйМассив") Тогда
				ДополняемыеДанные.Вставить("ОтборТипНоменклатуры", ТекущийПараметрВыбора.Значение);
			Иначе
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(ТекущийПараметрВыбора.Значение);
				ДополняемыеДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ДополнитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов)
	
	ИмяТекущейСтраницы = Элементы.ГруппаЗапасыСтраницы.ТекущаяСтраница.Имя;
	Если ИмяТекущейСтраницы = "ГруппаЗапасыСклад" Тогда
		ИмяТабличнойЧасти = "Запасы";
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаЗапасыПереданные" Тогда
		ИмяТабличнойЧасти = "ЗапасыПереданные";
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаЗапасыПринятые" Тогда
		ИмяТабличнойЧасти = "ЗапасыПринятые";
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаЗапасыВРазрезеГТД" Тогда
		ИмяТабличнойЧасти = "ЗапасыВРазрезеГТД";
	Иначе
		Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа", Новый Массив, Новый Массив);
	КонецЕсли;
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	ШтрихКодыНоменклатуры = Новый Структура();
	ШтрихКодыНоменклатуры.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	ШтрихКодыНоменклатуры.Вставить("Дата", Объект.Дата);
	ДополнитьДанныеПоШтрихКодам(ШтрихКодыНоменклатуры, ИмяТабличнойЧасти);
	
	Для каждого ТекШтрихкод Из ШтрихКодыНоменклатуры.МассивШтрихкодов Цикл
		ДанныеШтрихкода = ШтрихКодыНоменклатуры.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода.Количество() > 1 Тогда
			
			ПараметрыОткрытия = Новый Структура("МассивНоменклатуры, ТекШтрихкод", ДанныеШтрихкода, ТекШтрихкод);
			ШтрихКодыИмяТабличнойЧасти = Новый Структура("ШтрихКодыНоменклатуры, ИмяТабличнойЧасти",
				ШтрихКодыНоменклатуры, ИмяТабличнойЧасти);
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоДаннымШтрихкодовЗавершение", ЭтотОбъект,
				ШтрихКодыИмяТабличнойЧасти);
			ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ДублиНоменклатурыПоШтрихКодам",
				ПараметрыОткрытия, ЭтотОбъект, , , , ОповещениеОЗакрытии,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Продолжить;
		КонецЕсли;
		
		Если ДанныеШтрихкода <> Неопределено И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли ШтрихКодыНоменклатуры.ОтборТипНоменклатуры.Найти(
			ДанныеШтрихкода[0].ДанныеНоменклатуры.ТипНоменклатуры) = Неопределено 
			ИЛИ ДанныеШтрихкода[0].ДанныеНоменклатуры.ЭтоНабор Тогда
			ОписаниеШтрихКода = Новый Структура;
			ОписаниеШтрихКода.Вставить("Штрихкод", ТекШтрихкод.Штрихкод);
			ОписаниеШтрихКода.Вставить("Номенклатура", ДанныеШтрихкода[0].Номенклатура);
			ОписаниеШтрихКода.Вставить("ТипНоменклатуры", ДанныеШтрихкода[0].ДанныеНоменклатуры.ТипНоменклатуры);
			ОписаниеШтрихКода.Вставить("ЭтоНабор", ДанныеШтрихкода[0].ДанныеНоменклатуры.ЭтоНабор);
			ШтрихкодыНекорректногоТипа.Добавить(ОписаниеШтрихКода);
		Иначе
			
			ДанныеШтрихкода = ДанныеШтрихкода[0];
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
			ПараметрыОтбора.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			ПараметрыОтбора.Вставить("Партия", ДанныеШтрихкода.Партия);
			ПараметрыОтбора.Вставить("ЕдиницаИзмерения", ДанныеШтрихкода.ЕдиницаИзмерения);
			МассивСтрокТЧ = Объект[ИмяТабличнойЧасти].НайтиСтроки(ПараметрыОтбора);
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				
				НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
				НоваяСтрока.Номенклатура	= ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика	= ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия			= ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество		= ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения= ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения),
					ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.ДанныеНоменклатуры.ЕдиницаИзмерения);
				Если НоваяСтрока.Свойство("СтруктурнаяЕдиница") Тогда
					НоваяСтрока.СтруктурнаяЕдиница = ПредопределенноеЗначение(
						"Справочник.СтруктурныеЕдиницы.ОсновнойСклад");
				КонецЕсли;
				Если НоваяСтрока.Свойство("СтранаПроисхождения") Тогда
					НоваяСтрока.СтранаПроисхождения = ДанныеШтрихкода.ДанныеНоменклатуры.СтранаПроисхождения;
				КонецЕсли;
				Если НоваяСтрока.Свойство("Сумма") Тогда
					НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
				КонецЕсли;
				Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				
				Если ИмяТабличнойЧасти = "ЗапасыВРазрезеГТД" Тогда
					
					// Прослеживаемость
					НоваяСтрока.СтранаПроисхождения = ДанныеШтрихкода.ДанныеНоменклатуры.СтранаПроисхождения;
					Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
						НоваяСтрока.ПрослеживаемыйТовар = ДанныеШтрихкода.ДанныеНоменклатуры.ПрослеживаемыйТовар;
						ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, НоваяСтрока);
					Иначе
						НоваяСтрока.ПрослеживаемыйТовар = Ложь;
					КонецЕсли;
					// Конец Прослеживаемость
					
				ИначеЕсли ИмяТабличнойЧасти = "Запасы" Тогда
					НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.ДанныеНоменклатуры.СтавкаНДС;
					РассчитатьСуммуНДС(НоваяСтрока);
				КонецЕсли;
				
			Иначе
				
				НоваяСтрока = МассивСтрокТЧ[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				Если НоваяСтрока.Свойство("Сумма") Тогда
					НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
				КонецЕсли;
				Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
			
			Если ИмяТабличнойЧасти="Запасы" Тогда
				Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
					СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа", НеизвестныеШтрихкоды,
		ШтрихкодыНекорректногоТипа);

КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаКлиенте
Процедура ЗаполнитьПоДаннымШтрихкодовЗавершение(ДанныеНоменклатуры, Параметры) Экспорт
	
	Если ДанныеНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеШтрихкода = ДанныеНоменклатуры.МассивНоменклатуры[0];
	ТекШтрихкод = ДанныеНоменклатуры.ТекШтрихкод;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	ШтрихКодыНоменклатуры = Параметры.ШтрихКодыНоменклатуры;
	ИмяТабличнойЧасти = Параметры.ИмяТабличнойЧасти;
	
	Если ШтрихКодыНоменклатуры.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.ДанныеНоменклатуры.ТипНоменклатуры) = Неопределено
		Или ДанныеШтрихкода.ДанныеНоменклатуры.ЭтоНабор Тогда
		ПараметрыШтрихКода = Новый Структура;
		ПараметрыШтрихКода.Вставить("Штрихкод", ТекШтрихкод.Штрихкод);
		ПараметрыШтрихКода.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
		ПараметрыШтрихКода.Вставить("ТипНоменклатуры", ДанныеШтрихкода.ДанныеНоменклатуры.ТипНоменклатуры);
		ПараметрыШтрихКода.Вставить("ЭтоНабор", ДанныеШтрихкода.ДанныеНоменклатуры.ЭтоНабор);
		ШтрихкодыНекорректногоТипа.Добавить(ПараметрыШтрихКода);
	Иначе
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
		ПараметрыОтбора.Вставить("Партия", ДанныеШтрихкода.Партия);
		ПараметрыОтбора.Вставить("ЕдиницаИзмерения", ДанныеШтрихкода.ЕдиницаИзмерения);
		МассивСтрокТЧ = Объект[ИмяТабличнойЧасти].НайтиСтроки(ПараметрыОтбора);
		Если МассивСтрокТЧ.Количество() = 0 Тогда
			
			НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
			НоваяСтрока.Номенклатура	= ДанныеШтрихкода.Номенклатура;
			НоваяСтрока.Характеристика	= ДанныеШтрихкода.Характеристика;
			НоваяСтрока.Партия			= ДанныеШтрихкода.Партия;
			НоваяСтрока.Количество		= ТекШтрихкод.Количество;
			Если ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
				НоваяСтрока.ЕдиницаИзмерения = ДанныеШтрихкода.ЕдиницаИзмерения;
			Иначе
				НоваяСтрока.ЕдиницаИзмерения = ДанныеШтрихкода.ДанныеНоменклатуры.ЕдиницаИзмерения;
			КонецЕсли;
			Если НоваяСтрока.Свойство("СтруктурнаяЕдиница") Тогда
				НоваяСтрока.СтруктурнаяЕдиница = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ОсновнойСклад");
			КонецЕсли;
			Если НоваяСтрока.Свойство("СтранаПроисхождения") Тогда
				НоваяСтрока.СтранаПроисхождения = ДанныеШтрихкода.ДанныеНоменклатуры.СтранаПроисхождения;
			КонецЕсли;
			Если НоваяСтрока.Свойство("Сумма") Тогда
				НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
			КонецЕсли;
			
			Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			
			Если ИмяТабличнойЧасти = "ЗапасыВРазрезеГТД" Тогда
				// Прослеживаемость
				НоваяСтрока.СтранаПроисхождения = ДанныеШтрихкода.ДанныеНоменклатуры.СтранаПроисхождения;
				Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
					НоваяСтрока.ПрослеживаемыйТовар = ДанныеШтрихкода.ДанныеНоменклатуры.ПрослеживаемыйТовар;
					ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, НоваяСтрока);
				Иначе
					НоваяСтрока.ПрослеживаемыйТовар = Ложь;
				КонецЕсли;
				// Конец Прослеживаемость
			ИначеЕсли ИмяТабличнойЧасти = "Запасы" Тогда
				НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.ДанныеНоменклатуры.СтавкаНДС;
				РассчитатьСуммуНДС(НоваяСтрока);
			КонецЕсли;
			
		Иначе
			
			НоваяСтрока = МассивСтрокТЧ[0];
			НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
			Если НоваяСтрока.Свойство("Сумма") Тогда
				НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
			КонецЕсли;
			Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			
		КонецЕсли;
		
		Если ИмяТабличнойЧасти="Запасы" Тогда
			Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
				СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов) Экспорт

	Модифицированность = Истина;

	НеДобавленныеШтрихкоды = ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов);
	НеизвестныеШтрихкоды = НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа = НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;

	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);

	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда

		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);

		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект, , , , Оповещение);

		Возврат;

	КонецЕсли;

	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);

КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияХарактеристик()
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр(
			"ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		Если ТекНекорректныйШтрихкод.Свойство("ЭтоНабор") И ТекНекорректныйШтрихкод.ЭтоНабор Тогда
			// Наборы
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", НСтр("ru = 'Набор'"));
		Иначе
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		КонецЕсли; 
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, СокрЛП(ДополнительныеПараметры.ТекШтрихкод), СокрЛП(Результат));
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры // ПоискПоШтрихкоду()

#КонецОбласти

#Область Эквайринг

&НаСервереБезКонтекста
Функция ДанныеЭквайринговогоТерминалаПриИзменении(ЭквайринговыйТерминал)

	Результат = Новый Структура;

	ВалютаДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭквайринговыйТерминал,
		"БанковскийСчетЭквайринг.ВалютаДенежныхСредств");
	Результат.Вставить("ВалютаДенежныхСредств", ВалютаДенежныхСредств);

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область РаботаССериямиНоменклатуры

&НаКлиенте
Процедура ОткрытьПодборСерииНоменклатуры()
		
	ТекущиеДанныеИдентификатор = Элементы.Запасы.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыСерийНоменклатуры = ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор);
	
	ОткрытьФорму("Обработка.ПодборСерийНоменклатуры.Форма", ПараметрыСерийНоменклатуры, ЭтотОбъект);

КонецПроцедуры

&НаСервере
Функция ПолучитьСерииНоменклатурыИзХранилища(АдресВоВременномХранилище, КлючСтроки)
	
	Модифицированность = Истина;
	Возврат СерииНоменклатурыУНФ.ПолучитьСерииНоменклатурыИзХранилища(Объект, АдресВоВременномХранилище, КлючСтроки);
	
КонецФункции

&НаСервере
Функция ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор)

	Результат = СерииНоменклатурыУНФ.ПараметрыПодбораСерийНоменклатуры(Объект, УникальныйИдентификатор,
		ТекущиеДанныеИдентификатор, Ложь);
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ЗакупкиДляКУДиР

&НаСервере
Процедура ОбновитьОтображениеЗакупокУСН()
	УСНДоходыРасходы = Ложь;
	ВестиУчетЗакупокДляКУДиР = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, "ИспользуетсяОтчетность");
		СистемаНалогообложения = РегистрыСведений.СистемыНалогообложенияОрганизаций.ПолучитьПоследнее(Объект.Дата, Новый Структура("Организация", Объект.Организация));
		УСНДоходыРасходы = СистемаНалогообложения.ПлательщикУСН И СистемаНалогообложения.ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.ДоходыМинусРасходы;
		ВестиУчетЗакупокДляКУДИР = РеквизитыОрганизации.ИспользуетсяОтчетность И УСНДоходыРасходы;
	КонецЕсли;
	
	ВидимостьКолонокЗакупкиУСН = Ложь;
	Если ВестиУчетЗакупокДляКУДиР И НЕ Объект.ЗакупкиКУДиРОтдельнымДокументом Тогда
		ВидимостьКолонокЗакупкиУСН = Истина;
		Для Каждого СтрокаЗапасы Из Объект.Запасы Цикл
			ДанныеЗакупок = ТабличныеЧастиУНФКлиентСервер.СтрокиПоКлючуСвязи(Объект.ЗакупкиДляКУДИР, СтрокаЗапасы.КлючСвязи);
			Для Каждого СтрокаЗакупки Из ДанныеЗакупок Цикл
				СтрокаЗапасы.НомерДокументаКУДиР = СтрокаЗакупки.НомерДокумента;
				СтрокаЗапасы.ДатаДокументаКУДиР = СтрокаЗакупки.ДатаДокумента;
				СтрокаЗапасы.СуммаОплатыКУДиР = СтрокаЗакупки.Сумма;
				СтрокаЗапасы.СуммаНДСКУДиР = СтрокаЗакупки.СуммаНДС;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыГруппаЗакупкиДляКУДиР", "Видимость", ВидимостьКолонокЗакупкиУСН); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНомерДокументаКУДиРПриИзменении(Элемент)
	ОбновитьСтрокиЗапасыКУДиР(Элементы.Запасы.ТекущаяСтрока, "НомерДокументаКУДиР");
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыДатаДокументаКУДиРПриИзменении(Элемент)
	ОбновитьСтрокиЗапасыКУДиР(Элементы.Запасы.ТекущаяСтрока, "ДатаДокументаКУДиР");
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСуммаОплатыКУДиРПриИзменении(Элемент)
	ОбновитьСтрокиЗапасыКУДиР(Элементы.Запасы.ТекущаяСтрока, "СуммаОплатыКУДиР");
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтрокиЗапасыКУДиР(ИдентификаторСтрокиЗапасы, ИзмененнаяКолонка = "")
	СтрокаЗапасы = Объект.Запасы.НайтиПоИдентификатору(ИдентификаторСтрокиЗапасы);
	ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект.Запасы, СтрокаЗапасы, "КлючСвязи");
	
	Если ЗначениеЗаполнено(СтрокаЗапасы.НомерДокументаКУДиР) И ЗначениеЗаполнено(СтрокаЗапасы.ДатаДокументаКУДиР) Тогда
		МассивСтрокЗапасыКУДиР = ТабличныеЧастиУНФКлиентСервер.СтрокиПоКлючуСвязи(Объект.ЗакупкиДляКУДИР, СтрокаЗапасы.КлючСвязи, "КлючСвязи"); 
		Если МассивСтрокЗапасыКУДиР.Количество() = 0 Тогда
			СтрокаЗакупкиКУДиР = Объект.ЗакупкиДляКУДИР.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗакупкиКУДиР, СтрокаЗапасы, , "СуммаНДС");
			МассивСтрокЗапасыКУДиР.Добавить(СтрокаЗакупкиКУДиР);
		КонецЕсли;
		
		Для Каждого СтрокаЗакупки Из МассивСтрокЗапасыКУДиР Цикл
			Если ИзмененнаяКолонка = "СуммаОплатыКУДиР" Тогда
				СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаЗапасы.СтавкаНДС);
				СтрокаЗапасы.СуммаНДСКУДиР = СтрокаЗапасы.СуммаОплатыКУДиР - СтрокаЗапасы.СуммаОплатыКУДиР / ((СтавкаНДС + 100) / 100);
			ИначеЕсли СтрокаЗапасы.СуммаОплатыКУДиР = 0 Тогда
				СтрокаЗапасы.СуммаОплатыКУДиР = СтрокаЗапасы.Сумма;
				СтрокаЗапасы.СуммаНДСКУДиР = СтрокаЗапасы.СуммаНДС;
			КонецЕсли;
			СтрокаЗакупки.НомерДокумента = СтрокаЗапасы.НомерДокументаКУДиР;
			СтрокаЗакупки.ДатаДокумента = СтрокаЗапасы.ДатаДокументаКУДиР;
			СтрокаЗакупки.Сумма = СтрокаЗапасы.СуммаОплатыКУДиР;
			СтрокаЗакупки.СуммаНДС = СтрокаЗапасы.СуммаНДСКУДиР;
		КонецЦикла;
	Иначе
		ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.ЗакупкиДляКУДИР, СтрокаЗапасы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСуммаНДСКУДиРПриИзменении(Элемент)
	ОбновитьСтрокиЗапасыКУДиР(Элементы.Запасы.ТекущаяСтрока, "СуммаНДСКУДиР");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда
		
		ПолноеИмяОбъектаЗаполнения = ДополнительныеПараметры.ПолноеИмяОбъектаЗаполнения;
		Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда
		
			ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(
				НастройкиЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата",
				ЭтотОбъект, НастройкиЗагрузкиДанных);
			ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(
				НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
			
		ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда
			
			Если ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.Запасы" Тогда
				
				ДлительнаяОперация = ОбработатьПодготовленныеДанныеНоменклатуры(РезультатЗагрузки);
				
				СтруктураПараметров = Новый Структура;
				Если РезультатЗагрузки.НастройкиЗагрузкиДанных.Свойство("ТекстОшибки") Тогда
					ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатЗагрузки.НастройкиЗагрузкиДанных.ТекстОшибки);
				КонецЕсли;
				
				ПроверитьНеобходимостьПодключенияОбработчикаОжиданияОбработкиНоменклатуры(ДлительнаяОперация, СтруктураПараметров);
				
			ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.РасчетыСПокупателями" Тогда
				
				ОбработатьПодготовленныеДанныеРасчетыСПокупателями(РезультатЗагрузки);
				
			ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.РасчетыСПоставщиками" Тогда
				
				ОбработатьПодготовленныеДанныеРасчетыСПоставщиками(РезультатЗагрузки);
				
			ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.БонусныеБаллы" Тогда
				
				ДлительнаяОперация = ОбработатьПодготовленныеДанныеДисконтныхКарт(РезультатЗагрузки);
				
				СтруктураПараметров = Новый Структура;
				Если РезультатЗагрузки.НастройкиЗагрузкиДанных.Свойство("ТекстОшибки") Тогда
					ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатЗагрузки.НастройкиЗагрузкиДанных.ТекстОшибки);
				КонецЕсли;
				
				ПроверитьНеобходимостьПодключенияОбработчикаОжиданияОбработкиДисконтныхКартБонусныеБаллы(ДлительнаяОперация, СтруктураПараметров);
				
			ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ПодарочныеСертификаты" Тогда
				
				ОбработатьПодготовленныеДанныеПодарочныеСертификаты(РезультатЗагрузки);
				
			ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.НакопленныеПродажиПоДисконтнымКартам" Тогда
				
				ДлительнаяОперация = ОбработатьПодготовленныеДанныеДисконтныхКарт(РезультатЗагрузки);
				
				СтруктураПараметров = Новый Структура;
				Если РезультатЗагрузки.НастройкиЗагрузкиДанных.Свойство("ТекстОшибки") Тогда
					ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатЗагрузки.НастройкиЗагрузкиДанных.ТекстОшибки);
				КонецЕсли;
				
				ПроверитьНеобходимостьПодключенияОбработчикаОжиданияОбработкиДисконтныхКартПродажиПоДК(ДлительнаяОперация, СтруктураПараметров);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанныеЗапасы(АдресРезультатаЗагрузки)
	
	НачатьТранзакцию();
	
	Попытка
		
		РезультатЗагрузки = ПолучитьИзВременногоХранилища(АдресРезультатаЗагрузки);		
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = Объект.Запасы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
				НоваяСтрока.Сумма = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписатьОшибкуВЖурналРегистрации(ИнформацияОбОшибке, НСтр("ru = 'Запасы'"));
		
	КонецПопытки;
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПодготовленныеДанныеНоменклатуры(РезультатЗагрузки)
	
	ПараметрыВызоваСервера = Новый Структура;
	ПараметрыВызоваСервера.Вставить("НастройкиЗагрузкиДанных", РезультатЗагрузки.НастройкиЗагрузкиДанных);
	ПараметрыВызоваСервера.Вставить("ТаблицаСопоставленияДанных", ДанныеФормыВЗначение(РезультатЗагрузки.ТаблицаСопоставленияДанных, Тип("ТаблицаЗначений")));
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Подсистема ЗагрузкаДанныхИзВнешнегоИсточника: Выполнение серверного метода загрузки результата'");
	ПараметрыВыполнения.ЗапуститьНеВФоне    = Ложь;
	ПараметрыВыполнения.ЗапуститьВФоне      = Истина;	
	
	ИмяМетода = "Справочники.Номенклатура.ОбработатьПодготовленныеДанные";
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыВызоваСервера, ПараметрыВыполнения);
	
КонецФункции

&НаСервере
Функция ОбработатьПодготовленныеДанныеДисконтныхКарт(РезультатЗагрузки)
	
	ПараметрыВызоваСервера = Новый Структура;
	ПараметрыВызоваСервера.Вставить("НастройкиЗагрузкиДанных", РезультатЗагрузки.НастройкиЗагрузкиДанных);
	ПараметрыВызоваСервера.Вставить("ТаблицаСопоставленияДанных", ДанныеФормыВЗначение(РезультатЗагрузки.ТаблицаСопоставленияДанных, Тип("ТаблицаЗначений")));
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Подсистема ЗагрузкаДанныхИзВнешнегоИсточника: Выполнение серверного метода загрузки результата'");
	ПараметрыВыполнения.ЗапуститьНеВФоне    = Ложь;
	ПараметрыВыполнения.ЗапуститьВФоне      = Истина;	
	
	ИмяМетода = "Справочники.ДисконтныеКарты.ОбработатьПодготовленныеДанные";
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыВызоваСервера, ПараметрыВыполнения);
	
КонецФункции

&НаСервере
Процедура ОбработатьПодготовленныеДанныеРасчетыСПокупателями(РезультатЗагрузки)
	
	НачатьТранзакцию();
	
	Попытка
		
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = Объект.РасчетыСПокупателями.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, "Контрагент, Договор, ПризнакАванса, СуммаВал, Сумма", );
				
				ДанныеКонтрагента = ДанныеКонтрагентаДляИзменения(НоваяСтрока.Контрагент, Объект.Организация,
					"РасчетыСПокупателями");
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Договор) Тогда
					
					НоваяСтрока.Договор = ДанныеКонтрагента.Договор;
					
				КонецЕсли;
				
				НоваяСтрока.ВестиРасчетыПоДоговорам = ДанныеКонтрагента.ВестиРасчетыПоДоговорам;
				НоваяСтрока.ВестиРасчетыПоДокументам = ДанныеКонтрагента.ВестиРасчетыПоДокументам;
				НоваяСтрока.ВестиРасчетыПоЗаказам = ДанныеКонтрагента.ВестиРасчетыПоЗаказам;
				НоваяСтрока.ВестиУчетОплатыПоСчетам = ДанныеКонтрагента.ВестиУчетОплатыПоСчетам;
				
				НоваяСтрока.Сумма = ПересчитатьИзВалютыВВалютуУчета(НоваяСтрока.СуммаВал,
					ДанныеКонтрагента.ВалютаРасчетов, Объект.Дата);
				
				Если НоваяСтрока.ВестиРасчетыПоЗаказам Тогда
					
					НоваяСтрока.ЗаказПокупателя = СтрокаТаблицы.Заказ;
					
				КонецЕсли;
				
				Если НоваяСтрока.ВестиРасчетыПоДокументам Тогда
					
					НоваяСтрока.Документ = СтрокаТаблицы.Документ;
					
				КонецЕсли;
				
				Если НоваяСтрока.ВестиУчетОплатыПоСчетам Тогда
					
					НоваяСтрока.СчетНаОплату = СтрокаТаблицы.Счет;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписатьОшибкуВЖурналРегистрации(ИнформацияОбОшибке, НСтр("ru = 'Расчеты с покупателями'"));
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанныеРасчетыСПоставщиками(РезультатЗагрузки)
	
	НачатьТранзакцию();
	
	Попытка
		
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = Объект.РасчетыСПоставщиками.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы,
					"Контрагент, Договор, ПризнакАванса, СуммаВал, Сумма");
				
				ДанныеКонтрагента = ДанныеКонтрагентаДляИзменения(НоваяСтрока.Контрагент, Объект.Организация,
					"РасчетыСПоставщиками");
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Договор) Тогда
					
					НоваяСтрока.Договор = ДанныеКонтрагента.Договор;
					
				КонецЕсли;
				
				НоваяСтрока.ВестиРасчетыПоДоговорам = ДанныеКонтрагента.ВестиРасчетыПоДоговорам;
				НоваяСтрока.ВестиРасчетыПоДокументам = ДанныеКонтрагента.ВестиРасчетыПоДокументам;
				НоваяСтрока.ВестиРасчетыПоЗаказам = ДанныеКонтрагента.ВестиРасчетыПоЗаказам;
				НоваяСтрока.ВестиУчетОплатыПоСчетам = ДанныеКонтрагента.ВестиУчетОплатыПоСчетам;
				
				НоваяСтрока.Сумма = ПересчитатьИзВалютыВВалютуУчета(НоваяСтрока.СуммаВал,
					ДанныеКонтрагента.ВалютаРасчетов, Объект.Дата);
				
				Если НоваяСтрока.ВестиРасчетыПоЗаказам Тогда
					
					НоваяСтрока.ЗаказПоставщику = СтрокаТаблицы.Заказ;
					
				КонецЕсли;
				
				Если НоваяСтрока.ВестиРасчетыПоДокументам Тогда
					
					НоваяСтрока.Документ = СтрокаТаблицы.Документ;
					
				КонецЕсли;
				
				Если НоваяСтрока.ВестиУчетОплатыПоСчетам Тогда
					
					НоваяСтрока.СчетНаОплату = СтрокаТаблицы.Счет;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписатьОшибкуВЖурналРегистрации(ИнформацияОбОшибке, НСтр("ru = 'Расчеты с поставщиками'"));
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанныеБонусныеБаллы(АдресРезультатаЗагрузки)
	
	НачатьТранзакцию();
	
	Попытка
		
		РезультатЗагрузки = ПолучитьИзВременногоХранилища(АдресРезультатаЗагрузки);		
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = Объект.БонусныеБаллы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы,
					"ДисконтнаяКарта, ДатаСписания, Начислено, КСписанию");
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписатьОшибкуВЖурналРегистрации(ИнформацияОбОшибке, НСтр("ru = 'Бонусные баллы'"));
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанныеПодарочныеСертификаты(РезультатЗагрузки)
	
	НачатьТранзакцию();
	
	Попытка
		
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = Объект.ПодарочныеСертификаты.Добавить();
				НоваяСтрока.ПодарочныйСертификат = СтрокаТаблицы.Номенклатура;
				НоваяСтрока.Сумма = СтрокаТаблицы.Сумма;
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.НомерСертификата) 
					И ЗначениеЗаполнено(СтрокаТаблицы.НомерСертификата_ВходящиеДанные) 
					И ЗначениеЗаполнено(НоваяСтрока.ПодарочныйСертификат) Тогда
					НоваяСерия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
					НоваяСерия.Владелец = НоваяСтрока.ПодарочныйСертификат;
					НоваяСерия.Наименование = СтрокаТаблицы.НомерСертификата_ВходящиеДанные;
					НоваяСерия.Продан = Истина;
 					НоваяСерия.Заполнить(Неопределено);
					НоваяСерия.Записать();
					НоваяСтрока.НомерСертификата = НоваяСерия.Ссылка;
				Иначе
					НоваяСтрока.НомерСертификата = СтрокаТаблицы.НомерСертификата;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписатьОшибкуВЖурналРегистрации(ИнформацияОбОшибке, НСтр("ru = 'Подарочные сертификаты'"));
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанныеНакопленныеПродажиПоДисконтнымКартам(АдресРезультатаЗагрузки)
	
	НачатьТранзакцию();
	
	Попытка
		
		РезультатЗагрузки = ПолучитьИзВременногоХранилища(АдресРезультатаЗагрузки);		
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = Объект.НакопленныеПродажиПоДисконтнымКартам.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы,
					"Период, ДисконтнаяКарта, Номенклатура, Характеристика, Покупатель, Количество, Сумма, Скидка");
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписатьОшибкуВЖурналРегистрации(ИнформацияОбОшибке, НСтр("ru = 'Расчеты с поставщиками'"));
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОшибкуВЖурналРегистрации(ИнформацияОбОшибке, КонтекстОшибки)

	ИмяСобытия = НСтр("ru='Загрузка данных'", ОбщегоНазначения.КодОсновногоЯзыка());

	ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	Комментарий = СтрШаблон("%1%2%3", КонтекстОшибки, Символы.ПС, ПодробноеПредставлениеОшибки);

	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ВводНачальныхОстатков,
		, Комментарий);

КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасчетыПоКредитамИЗаймам

&НаКлиенте
Процедура РасчетыПоКредитамИЗаймамДоговорКредитаЗаймаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасчетыПоКредитамИЗаймам.ТекущиеДанные;
	ДоговорКредитаЗайма = СтрокаТабличнойЧасти.ДоговорКредитаЗайма;
	
	Валюта = УправлениеНебольшойФирмойВызовСервера.ЗначениеРеквизитаОбъекта(ДоговорКредитаЗайма,
		"ВалютаРасчетов");

	КурсыВалют = ЦенообразованиеСервер.ПолучитьКурсыВалют(Валюта, ВалютаУчета, Объект.Дата);

	СтрокаТабличнойЧасти.Курс = КурсыВалют.КурсНач;
	СтрокаТабличнойЧасти.Кратность = КурсыВалют.КратностьНач;
	
	ОстаткиЗадолженности = ОстаткиЗадолженностиПоГрафикуКредитаЗайма(ДоговорКредитаЗайма, Объект.Дата);
		
	СтрокаТабличнойЧасти.ОсновнойДолгВал = ОстаткиЗадолженности.СуммаОсновногоДолга;
	СтрокаТабличнойЧасти.ОсновнойДолг = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.ОсновнойДолгВал,
		Валюта, Объект.Дата);
		
	СтрокаТабличнойЧасти.ПроцентыВал = ОстаткиЗадолженности.СуммаПроцентов;
	СтрокаТабличнойЧасти.Проценты = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.ПроцентыВал,
		Валюта, Объект.Дата);
		
	СтрокаТабличнойЧасти.КомиссияВал = ОстаткиЗадолженности.СуммаКомиссии;
	СтрокаТабличнойЧасти.Комиссия = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.КомиссияВал,
		Валюта, Объект.Дата);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОстаткиЗадолженностиПоГрафикуКредитаЗайма(ДоговорКредитаЗайма, Дата)

	Возврат РегистрыСведений.ГрафикПогашенияКредитовИЗаймов.
				ОстаткиЗадолженностиПоГрафикуКредитаЗайма(ДоговорКредитаЗайма, Дата);
	
КонецФункции

&НаКлиенте
Процедура РасчетыПоКредитамИЗаймамОсновнойДолгВалПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасчетыПоКредитамИЗаймам.ТекущиеДанные;
	
	Валюта = УправлениеНебольшойФирмойВызовСервера.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.ДоговорКредитаЗайма,
		"ВалютаРасчетов");

	СтрокаТабличнойЧасти.ОсновнойДолг = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.ОсновнойДолгВал,
		Валюта, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоКредитамИЗаймамПроцентыВалПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасчетыПоКредитамИЗаймам.ТекущиеДанные;
	
	Валюта = УправлениеНебольшойФирмойВызовСервера.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.ДоговорКредитаЗайма,
		"ВалютаРасчетов");

	СтрокаТабличнойЧасти.Проценты = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.ПроцентыВал,
		Валюта, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоКредитамИЗаймамКомиссияВалПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасчетыПоКредитамИЗаймам.ТекущиеДанные;
	
	Валюта = УправлениеНебольшойФирмойВызовСервера.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.ДоговорКредитаЗайма,
		"ВалютаРасчетов");

	СтрокаТабличнойЧасти.Комиссия = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.КомиссияВал,
		Валюта, Объект.Дата);
	
КонецПроцедуры

#КонецОбласти
