#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимНаправлениямДеятельности.Получить() Тогда
		
		СчетаЗатрат = ВнеоборотныеАктивы.ВыгрузитьКолонку("СчетЗатрат");
		ЗначенияРеквизитовСчетовЗатрат = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			СчетаЗатрат, "ТипСчета");
		
		Для каждого СтрокаВнеоборотныеАктивы Из ВнеоборотныеАктивы Цикл
			
			Если ЗначенияРеквизитовСчетовЗатрат[СтрокаВнеоборотныеАктивы.СчетЗатрат].ТипСчета
				= Перечисления.ТипыСчетов.Расходы Тогда
				СтрокаВнеоборотныеАктивы.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	ВалютаУчетаИНацСовпадают = (УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета()
		= УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту());
	
	СвойстваКонтрагентов = СвойстваКонтрагентов();
	
	Для каждого СтрокаТЧ Из РасчетыСПокупателями Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.Контрагент)
		И НЕ СвойстваКонтрагентов[СтрокаТЧ.Контрагент].ВестиРасчетыПоДоговорам
		И НЕ ЗначениеЗаполнено(СтрокаТЧ.Договор) Тогда
			СтрокаТЧ.Договор = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(СтрокаТЧ.Контрагент);
		КонецЕсли;
		
		Если УчетВалютныхОпераций Тогда
			Если ВалютаУчетаИНацСовпадают Тогда
				СтрокаТЧ.СуммаРег = СтрокаТЧ.Сумма;
			КонецЕсли; 
		Иначе
			СтрокаТЧ.СуммаРег = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаТЧ Из РасчетыСПоставщиками Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.Контрагент)
		И НЕ СвойстваКонтрагентов[СтрокаТЧ.Контрагент].ВестиРасчетыПоДоговорам
		И НЕ ЗначениеЗаполнено(СтрокаТЧ.Договор) Тогда
			СтрокаТЧ.Договор = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(СтрокаТЧ.Контрагент);
		КонецЕсли;
		
		Если УчетВалютныхОпераций Тогда
			Если ВалютаУчетаИНацСовпадают Тогда
				СтрокаТЧ.СуммаРег = СтрокаТЧ.Сумма;
			КонецЕсли; 
		Иначе
			СтрокаТЧ.СуммаРег = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаТЧ Из ЗапасыПереданные Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Контрагент)
		И НЕ СвойстваКонтрагентов[СтрокаТЧ.Контрагент].ВестиРасчетыПоДоговорам
		И НЕ ЗначениеЗаполнено(СтрокаТЧ.Договор) Тогда
			СтрокаТЧ.Договор = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(СтрокаТЧ.Контрагент);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаТЧ Из ЗапасыПринятые Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Контрагент)
		И НЕ СвойстваКонтрагентов[СтрокаТЧ.Контрагент].ВестиРасчетыПоДоговорам
		И НЕ ЗначениеЗаполнено(СтрокаТЧ.Договор) Тогда
			СтрокаТЧ.Договор = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(СтрокаТЧ.Контрагент);
		КонецЕсли;
	КонецЦикла; 
	
	// Прослеживаемость
	ПрослеживаемыйТоварЗапасыВРазрезеГТД = ЗапасыВРазрезеГТД.НайтиСтроки(Новый Структура("ПрослеживаемыйТовар", Истина));
	ПрослеживаемыйТоварЗапасыПереданныеВРазрезеГТД = ЗапасыПереданныеВРазрезеГТД.НайтиСтроки(Новый Структура("ПрослеживаемыйТовар", Истина));
	ПрослеживаемыйТоварЗапасыЗапасыПринятыеВРазрезеГТД = ЗапасыПринятыеВРазрезеГТД.НайтиСтроки(Новый Структура("ПрослеживаемыйТовар", Истина));
	
	ЕстьПрослеживаемыйТоварЗапасыВРазрезеГТД = ПрослеживаемыйТоварЗапасыВРазрезеГТД.Количество() <> 0;
	ЕстьПрослеживаемыйТоварЗапасыПереданныеВРазрезеГТД  = ПрослеживаемыйТоварЗапасыПереданныеВРазрезеГТД.Количество() <> 0;
	ЕстьПрослеживаемыйТоварЗапасыПринятыеВРазрезеГТД = ПрослеживаемыйТоварЗапасыЗапасыПринятыеВРазрезеГТД.Количество() <> 0;
	
	Если НЕ ЕстьПрослеживаемыйТоварЗапасыВРазрезеГТД 
		И НЕ ЕстьПрослеживаемыйТоварЗапасыПереданныеВРазрезеГТД 
		И НЕ ЕстьПрослеживаемыйТоварЗапасыПринятыеВРазрезеГТД Тогда
		СведенияПрослеживаемости.Очистить();
	КонецЕсли;
	// Конец Прослеживаемость
	
	Если РазделУчета = Перечисления.РазделыУчета.Запасы И ЗакупкиКУДиРОтдельнымДокументом Тогда
		ЗакупкиДляКУДИР.Очистить();
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ПриЗаписи.
// Осуществляется формирование документов при автозаполнении.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Или Не Автоформирование Тогда
		Возврат;
	КонецЕсли;
	
	БылиВнесеныИзменения = Ложь;
	
	СвойстваКонтрагентов = СвойстваКонтрагентов();
	ОрганизацияКассаПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КассаПоУмолчанию");
	
	// Формирование документов для табличной части РасчетыСПокупателями.
	Для Каждого Строка Из РасчетыСПокупателями Цикл
		Если Не ЗначениеЗаполнено(Строка.Документ) И СвойстваКонтрагентов[Строка.Контрагент].ВестиРасчетыПоДокументам Тогда
			Если Строка.ПризнакАванса Тогда
				НовыйДокумент = Документы.ПоступлениеВКассу.СоздатьДокумент();
				НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя;
				НовыйДокумент.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
				НовыйДокумент.Касса = ОрганизацияКассаПоУмолчанию;
				ВалютаРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Договор, "ВалютаРасчетов");
				НовыйДокумент.ВалютаДенежныхСредств = ВалютаРасчетов;
				НовыйДокумент.СуммаДокумента = Строка.СуммаВал;
				НовыйДокумент.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(
					НовыйДокумент.Организация, , Дата);
				НоваяСтрока = НовыйДокумент.РасшифровкаПлатежа.Добавить();
				НоваяСтрока.Договор = Строка.Договор;
				ДоговорВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
					Дата,
					Новый Структура("Валюта", ВалютаРасчетов));
				ДокументВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
					Дата,
					Новый Структура("Валюта", НовыйДокумент.ВалютаДенежныхСредств));
				НоваяСтрока.Курс = ?(
					ДоговорВалютаКурсКратность.Курс = 0,
					1,
					ДоговорВалютаКурсКратность.Курс);
				НоваяСтрока.Кратность = ?(
					ДоговорВалютаКурсКратность.Кратность = 0,
					1,
					ДоговорВалютаКурсКратность.Кратность);
				НоваяСтрока.ПризнакАванса = Истина;
				НоваяСтрока.СуммаПлатежа = НовыйДокумент.СуммаДокумента;
				НоваяСтрока.СуммаРасчетов = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
					НоваяСтрока.СуммаПлатежа,
					ДокументВалютаКурсКратность.Курс,
					НоваяСтрока.Курс,
					ДокументВалютаКурсКратность.Кратность,
					НоваяСтрока.Кратность);
				НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДСПоУмолчанию(НовыйДокумент.НалогообложениеНДС);
				Если ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
					Ставка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.СтавкаНДС, "Ставка");
					НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаПлатежа - (НоваяСтрока.СуммаПлатежа) / ((Ставка + 100) / 100);
				КонецЕсли;
			Иначе
				НовыйДокумент = Документы.РасходнаяНакладная.СоздатьДокумент();
				НовыйДокумент.Подразделение = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
				НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю;
				НовыйДокумент.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(
					НовыйДокумент.Организация, , Дата);
				Если ЗначениеЗаполнено(Строка.Договор) Тогда
					НовыйДокумент.Договор = Строка.Договор;
				Иначе
					НовыйДокумент.Договор = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Строка.Контрагент);
				КонецЕсли;
				НовыйДокумент.ВалютаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НовыйДокумент.Договор,
					"ВалютаРасчетов");
				ДокументВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
					Дата,
					Новый Структура("Валюта", НовыйДокумент.ВалютаДокумента));
				НовыйДокумент.Курс = ?(
					ДокументВалютаКурсКратность.Курс = 0,
					1,
					ДокументВалютаКурсКратность.Курс);
				НовыйДокумент.Кратность = ?(
					ДокументВалютаКурсКратность.Кратность = 0,
					1,
					ДокументВалютаКурсКратность.Кратность);
				НовыйДокумент.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
			КонецЕсли;
			НовыйДокумент.Дата = Дата;
			НовыйДокумент.Организация = Организация;
			НовыйДокумент.Контрагент = Строка.Контрагент;
			
			СтрокаКомментарий = НСтр("ru='Сформирован автоматически документом Ввод начальных остатков № %Номер% от %Дата%'");
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Номер%", Строка(Номер));
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Дата%", Строка(Дата));
			НовыйДокумент.Комментарий = СтрокаКомментарий;
			
			НовыйДокумент.Записать();
			
			Строка.Документ = НовыйДокумент.Ссылка;
			БылиВнесеныИзменения = Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Формирование документов для табличной части РасчетыСПоставщиками.
	Для Каждого Строка Из РасчетыСПоставщиками Цикл
		Если Не ЗначениеЗаполнено(Строка.Документ) И СвойстваКонтрагентов[Строка.Контрагент].ВестиРасчетыПоДокументам Тогда
			Если Строка.ПризнакАванса Тогда
				НовыйДокумент = Документы.РасходИзКассы.СоздатьДокумент();
				НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику;
				НовыйДокумент.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
				НовыйДокумент.Касса = ОрганизацияКассаПоУмолчанию;
				ВалютаРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Договор, "ВалютаРасчетов");
				НовыйДокумент.ВалютаДенежныхСредств = ВалютаРасчетов;
				НовыйДокумент.СуммаДокумента = Строка.СуммаВал;
				НовыйДокумент.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
				НоваяСтрока = НовыйДокумент.РасшифровкаПлатежа.Добавить();
				НоваяСтрока.Договор = Строка.Договор;
				ДоговорВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
					Дата,
					Новый Структура("Валюта", ВалютаРасчетов));
				ДокументВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
					Дата,
					Новый Структура("Валюта", НовыйДокумент.ВалютаДенежныхСредств));
				НоваяСтрока.Курс = ?(
					ДоговорВалютаКурсКратность.Курс = 0,
					1,
					ДоговорВалютаКурсКратность.Курс);
				НоваяСтрока.Кратность = ?(
					ДоговорВалютаКурсКратность.Кратность = 0,
					1,
					ДоговорВалютаКурсКратность.Кратность);
				НоваяСтрока.СуммаПлатежа = НовыйДокумент.СуммаДокумента;
				НоваяСтрока.ПризнакАванса = Истина;
				НоваяСтрока.СуммаРасчетов = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
					НоваяСтрока.СуммаПлатежа,
					ДокументВалютаКурсКратность.Курс,
					НоваяСтрока.Курс,
					ДокументВалютаКурсКратность.Кратность,
					НоваяСтрока.Кратность);
				НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДСПоУмолчанию(НовыйДокумент.НалогообложениеНДС);
				Если ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
					Ставка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.СтавкаНДС, "Ставка");
					НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаПлатежа - (НоваяСтрока.СуммаПлатежа) / ((Ставка + 100) / 100);
				КонецЕсли;
			Иначе
				НовыйДокумент = Документы.ПриходнаяНакладная.СоздатьДокумент();
				НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика;
				НовыйДокумент.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
				Если ЗначениеЗаполнено(Строка.Договор) Тогда
					НовыйДокумент.Договор = Строка.Договор;
				Иначе
					НовыйДокумент.Договор = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Строка.Контрагент);
				КонецЕсли;
				НовыйДокумент.ВалютаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НовыйДокумент.Договор,
					"ВалютаРасчетов");
				ДокументВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
					Дата,
					Новый Структура("Валюта", НовыйДокумент.ВалютаДокумента));
				НовыйДокумент.Курс = ?(
					ДокументВалютаКурсКратность.Курс = 0,
					1,
					ДокументВалютаКурсКратность.Курс);
				НовыйДокумент.Кратность = ?(
					ДокументВалютаКурсКратность.Кратность = 0,
					1,
					ДокументВалютаКурсКратность.Кратность);
				НовыйДокумент.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
			КонецЕсли;
			НовыйДокумент.Дата = Дата;
			НовыйДокумент.Организация = Организация;
			НовыйДокумент.Контрагент = Строка.Контрагент;
			
			СтрокаКомментарий = НСтр("ru='Сформирован автоматически документом Ввод начальных остатков № %Номер% от %Дата%'");
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Номер%", Строка(Номер));
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Дата%", Строка(Дата));
			НовыйДокумент.Комментарий = СтрокаКомментарий;
			
			НовыйДокумент.Записать();
			
			Строка.Документ = НовыйДокумент.Ссылка;
			БылиВнесеныИзменения = Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Формирование документов для табличной части РасчетыСПодотчетниками.
	Для каждого Строка Из РасчетыСПодотчетниками Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Документ) Тогда
			Если Строка.Перерасход Тогда
				НовыйДокумент = Документы.АвансовыйОтчет.СоздатьДокумент();
				НовыйДокумент.Сотрудник = Строка.Сотрудник;
				НовыйДокумент.ВалютаДокумента = Строка.Валюта;
			Иначе
				НовыйДокумент = Документы.РасходИзКассы.СоздатьДокумент();
				НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Подотчетнику;
				НовыйДокумент.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
				НовыйДокумент.Касса = ОрганизацияКассаПоУмолчанию;
				НовыйДокумент.Подотчетник = Строка.Сотрудник;
				НовыйДокумент.ВалютаДенежныхСредств = Строка.Валюта;
				НовыйДокумент.СуммаДокумента = Строка.СуммаВал;
			КонецЕсли;
			НовыйДокумент.Дата = Дата;
			НовыйДокумент.Организация = Организация;
			
			СтрокаКомментарий = НСтр("ru='Сформирован автоматически документом Ввод начальных остатков № %Номер% от %Дата%'");
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Номер%", Строка(Номер));
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Дата%", Строка(Дата));
			НовыйДокумент.Комментарий = СтрокаКомментарий;
			
			НовыйДокумент.Записать();
			
			Строка.Документ = НовыйДокумент.Ссылка;
			БылиВнесеныИзменения = Истина;
		КонецЕсли;
	КонецЦикла;
		
	Если БылиВнесеныИзменения Тогда
		Записать();
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписи()

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Автоформирование Тогда
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасчетыСПодотчетниками.Документ");
	КонецЕсли;
	
	Счета = ПрочиеРазделы.ВыгрузитьКолонку("Счет");
	ЗначенияРеквизитовСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Счета, "Валютный");
	
	Для каждого СтрокаТЧ Из ПрочиеРазделы Цикл
		Если ЗначенияРеквизитовСчета[СтрокаТЧ.Счет].Валютный
		И НЕ ЗначениеЗаполнено(СтрокаТЧ.Валюта) Тогда
			ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'Не заполнена колонка ""Валюта"" для валютного счета в строке %1 списка ""Прочие разделы"".'"),
				СтрокаТЧ.НомерСтроки);
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПрочиеРазделы", СтрокаТЧ.НомерСтроки,
				"Валюта");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
		КонецЕсли;
		Если ЗначенияРеквизитовСчета[СтрокаТЧ.Счет].Валютный
		И НЕ ЗначениеЗаполнено(СтрокаТЧ.СуммаВал) Тогда
			ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'Не заполнена колонка ""Сумма (вал.)"" для валютного счета в строке %1 списка ""Прочие разделы"".'"),
				СтрокаТЧ.НомерСтроки);
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПрочиеРазделы", СтрокаТЧ.НомерСтроки,
				"СуммаВал");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваКонтрагентов = СвойстваКонтрагентов();
	
	Для каждого СтрокаТЧ Из РасчетыСПокупателями Цикл
		Если СвойстваКонтрагентов[СтрокаТЧ.Контрагент].ВестиРасчетыПоДокументам
		И НЕ Автоформирование
		И НЕ ЗначениеЗаполнено(СтрокаТЧ.Документ) Тогда
			ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'Не заполнена колонка ""Документ расчетов"" в строке %1 списка ""Расчеты с покупателями"".'"),
				СтрокаТЧ.НомерСтроки);
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РасчетыСПокупателями",
				СтрокаТЧ.НомерСтроки, "Документ");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
		КонецЕсли;
		Если СвойстваКонтрагентов[СтрокаТЧ.Контрагент].ВестиРасчетыПоДоговорам
			И НЕ ЗначениеЗаполнено(СтрокаТЧ.Договор) Тогда
			ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'Не заполнена колонка ""Договор"" в строке %1 списка ""Расчеты с покупателями"".'"),
				СтрокаТЧ.НомерСтроки);
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РасчетыСПокупателями",
				СтрокаТЧ.НомерСтроки, "Договор");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаТЧ Из РасчетыСПоставщиками Цикл
		Если СвойстваКонтрагентов[СтрокаТЧ.Контрагент].ВестиРасчетыПоДокументам
		И НЕ Автоформирование
		И НЕ ЗначениеЗаполнено(СтрокаТЧ.Документ) Тогда
			ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'Не заполнена колонка ""Документ расчетов"" в строке %1 списка ""Расчеты с поставщиками"".'"),
				СтрокаТЧ.НомерСтроки);
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РасчетыСПоставщиками",
				СтрокаТЧ.НомерСтроки, "Документ");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
		КонецЕсли;
		Если СвойстваКонтрагентов[СтрокаТЧ.Контрагент].ВестиРасчетыПоДоговорам
			И НЕ ЗначениеЗаполнено(СтрокаТЧ.Договор) Тогда
			ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'Не заполнена колонка ""Договор"" в строке %1 списка ""Расчеты с поставщиками"".'"),
				СтрокаТЧ.НомерСтроки);
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РасчетыСПоставщиками",
				СтрокаТЧ.НомерСтроки, "Договор");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаТЧ Из РасчетыСПрочимиКонтрагентами Цикл
		Если СвойстваКонтрагентов[СтрокаТЧ.Контрагент].ВестиРасчетыПоДоговорам
			И НЕ ЗначениеЗаполнено(СтрокаТЧ.Договор) Тогда
			ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'Не заполнена колонка ""Договор"" в строке %1 списка ""Расчеты с прочими контрагентами"".'"),
				СтрокаТЧ.НомерСтроки);
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РасчетыСПрочимиКонтрагентами",
				СтрокаТЧ.НомерСтроки, "Договор");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
		КонецЕсли;
	КонецЦикла;
	
	// Серии
	ДополнительныеПараметры = Новый Структура("ПоложениеСклада, Объект", 
		Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти, ЭтотОбъект);
	СерииНоменклатурыУНФ.ПроверитьЗаполнениеСерийНоменклатуры(Отказ, Запасы, СерииНоменклатуры, ДополнительныеПараметры);
	
	НоменклатураВДокументахСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, Отказ, Истина);
	
	// Подарочные сертификаты
	РаботаСПодарочнымиСертификатами.ПроверитьВозможностьИспользованияСертификатов(Отказ, ЭтотОбъект, "Запасы",
		"СтруктурнаяЕдиница", Ложь);
	
	ИменаТабличныхЧастей = Новый Массив;
	ИменаТабличныхЧастей.Добавить("ЗапасыВРазрезеГТД");
	ИменаТабличныхЧастей.Добавить("ЗапасыПринятыеВРазрезеГТД");
	ИменаТабличныхЧастей.Добавить("ЗапасыПереданныеВРазрезеГТД");
	
	ГрузовыеТаможенныеДекларацииСервер.ПриОбработкеПроверкиЗаполнения(Отказ, ЭтотОбъект, ИменаТабличныхЧастей);
	
	// Прослеживаемость
	ДанныеПроверки = Новый Структура;
	ДанныеПроверки.Вставить("ИмяТЧ", "ЗапасыВРазрезеГТД");
	ДанныеПроверки.Вставить("ИмяСписка", НСтр("ru = 'ЗапасыВРазрезеГТД'"));
	ПрослеживаемостьУНФ.ПроверитьЗаполнениеДанныхПрослеживаемости(ЭтотОбъект, ДанныеПроверки, Отказ);
	
	ДанныеПроверки = Новый Структура;
	ДанныеПроверки.Вставить("ИмяТЧ", "ЗапасыПереданныеВРазрезеГТД");
	ДанныеПроверки.Вставить("ИмяСписка", НСтр("ru = 'ЗапасыПереданныеВРазрезеГТД'"));
	ПрослеживаемостьУНФ.ПроверитьЗаполнениеДанныхПрослеживаемости(ЭтотОбъект, ДанныеПроверки, Отказ);

	Для Каждого СтрокаТЧ Из ЗапасыПереданныеВРазрезеГТД Цикл
		Если СтрокаТЧ.ПрослеживаемыйТовар
		И НЕ ЗначениеЗаполнено(СтрокаТЧ.Комиссионер) Тогда
			ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'Не заполнена колонка ""Комиссионер"" в строке %1 списка ""Запасы переданные в разрезе ГТД"".'"),
				СтрокаТЧ.НомерСтроки);
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЗапасыПереданныеВРазрезеГТД",
				СтрокаТЧ.НомерСтроки, "Комиссионер");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеПроверки = Новый Структура;
	ДанныеПроверки.Вставить("ИмяТЧ", "ЗапасыПринятыеВРазрезеГТД");
	ДанныеПроверки.Вставить("ИмяСписка", НСтр("ru = 'ЗапасыПринятыеВРазрезеГТД'"));
	ПрослеживаемостьУНФ.ПроверитьЗаполнениеДанныхПрослеживаемости(ЭтотОбъект, ДанныеПроверки, Отказ);

	// Конец Прослеживаемость
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура - обработчик события ОбработкаЗаполнения.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	// Прослеживаемость
	СведенияПрослеживаемости.Очистить();
	// Конец Прослеживаемость
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ИнвентаризацияЗапасов")] = "ЗаполнитьПоИнвентаризацииЗапасов";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
	// Прослеживаемость
	ПрослеживаемостьУНФ.ОбновитьПризнакПрослеживаемости(ЗапасыВРазрезеГТД, Дата);
	ПрослеживаемостьУНФ.ОбновитьПризнакПрослеживаемости(ЗапасыПереданныеВРазрезеГТД, Дата);
	ПрослеживаемостьУНФ.ОбновитьПризнакПрослеживаемости(ЗапасыПринятыеВРазрезеГТД, Дата);
	
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа
	Документы.ВводНачальныхОстатков.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаЗапасыНаСкладах") Тогда
		ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыНаСкладах", ТаблицыДляДвижений, Движения, Отказ);
	КонецЕсли;
	
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаЗапасы") Тогда
		ПроведениеДокументовУНФ.ОтразитьДвижения("Запасы", ТаблицыДляДвижений, Движения, Отказ);
		
		// Серии
		Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаСерииНоменклатуры") Тогда
			ПроведениеДокументовУНФ.ОтразитьДвижения("СерииНоменклатуры", ТаблицыДляДвижений, Движения, Отказ);
		КонецЕсли;
		Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаСерииНоменклатурыГарантии") Тогда
			ПроведениеДокументовУНФ.ОтразитьДвижения("СерииНоменклатурыГарантии", ТаблицыДляДвижений, Движения, Отказ);
		КонецЕсли;
		Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаДвиженияСерииНоменклатуры") Тогда
			ПроведениеДокументовУНФ.ОтразитьДвижения("ДвиженияСерииНоменклатуры", ТаблицыДляДвижений, Движения, Отказ);
		КонецЕсли;
		// Серии
	КонецЕсли;
	
	// Прослеживаемость
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаПрослеживаемыеТовары") Тогда
		ПроведениеДокументовУНФ.ОтразитьДвижения("ПрослеживаемыеТовары", ТаблицыДляДвижений, Движения, Отказ);
	КонецЕсли;
	
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаЗапасыПереданные") Тогда
		ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыПереданные", ТаблицыДляДвижений, Движения, Отказ);
	КонецЕсли;
	
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаЗапасыИАгентскиеУслугиПринятые") Тогда
		ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыИАгентскиеУслугиПринятые", ТаблицыДляДвижений, Движения, Отказ);
	КонецЕсли;
	
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаЗапасыВРазрезеГТД") Тогда
		ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыВРазрезеГТД", ТаблицыДляДвижений, Движения, Отказ);
	КонецЕсли;
	
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаЗапасыПереданныеВРазрезеГТД") Тогда
		ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыПереданныеВРазрезеГТД", ТаблицыДляДвижений, Движения, Отказ);
	КонецЕсли;
	
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаЗапасыПринятыеВРазрезеГТД") Тогда
		ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыПринятыеВРазрезеГТД", ТаблицыДляДвижений, Движения, Отказ);
	КонецЕсли;
	
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаДенежныеСредства") Тогда
		ПроведениеДокументовУНФ.ОтразитьДвижения("ДенежныеСредства", ТаблицыДляДвижений, Движения, Отказ);
	КонецЕсли;
	
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаРасчетыСПокупателями") Тогда
		ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыСПокупателями", ТаблицыДляДвижений, Движения, Отказ);
		ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыКассовыйМетод", ТаблицыДляДвижений, Движения, Отказ);
		ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыНераспределенные", ТаблицыДляДвижений, Движения, Отказ);
	КонецЕсли;
	
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаРасчетыСПоставщиками") Тогда
		ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыСПоставщиками", ТаблицыДляДвижений, Движения, Отказ);
		ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыКассовыйМетод", ТаблицыДляДвижений, Движения, Отказ);
		ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыНераспределенные", ТаблицыДляДвижений, Движения, Отказ);
		ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыОтложенные", ТаблицыДляДвижений, Движения, Отказ);
	КонецЕсли;
	
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаРасчетыПоНалогам") Тогда
		ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыПоНалогам", ТаблицыДляДвижений, Движения, Отказ);
	КонецЕсли;
	
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаРасчетыСПерсоналом") Тогда
		ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыСПерсоналом", ТаблицыДляДвижений, Движения, Отказ);
	КонецЕсли;
	
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаРасчетыСПодотчетниками") Тогда
		ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыСПодотчетниками", ТаблицыДляДвижений, Движения, Отказ);
	КонецЕсли;
	
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаРасчетыСПрочимиКонтрагентами") Тогда
		ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыСПрочимиКонтрагентами", ТаблицыДляДвижений, Движения, Отказ);
	КонецЕсли;
	
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаСостоянияВнеоборотныхАктивов") Тогда
		ПроведениеДокументовУНФ.ОтразитьДвижения("СостоянияВнеоборотныхАктивов", ТаблицыДляДвижений, Движения, Отказ);
	КонецЕсли;
	
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаПараметрыВнеоборотныхАктивов") Тогда
		ПроведениеДокументовУНФ.ОтразитьДвижения("ПараметрыВнеоборотныхАктивов", ТаблицыДляДвижений, Движения, Отказ);
	КонецЕсли;
	
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаВнеоборотныеАктивы") Тогда
		ПроведениеДокументовУНФ.ОтразитьДвижения("ВнеоборотныеАктивы", ТаблицыДляДвижений, Движения, Отказ);
	КонецЕсли;
	
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаВыработкаВнеоборотныхАктивов") Тогда
		ПроведениеДокументовУНФ.ОтразитьДвижения("ВыработкаВнеоборотныхАктивов", ТаблицыДляДвижений, Движения, Отказ);
	КонецЕсли;
	
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаОплатаСчетовИЗаказов") Тогда
		ПроведениеДокументовУНФ.ОтразитьДвижения("ОплатаСчетовИЗаказов", ТаблицыДляДвижений, Движения, Отказ);
	КонецЕсли;
 
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаУправленческий") Тогда
		ПроведениеДокументовУНФ.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	
	// Эквайринг
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаРасчетыПоЭквайрингу") Тогда
		ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыПоЭквайрингу", ТаблицыДляДвижений, Движения, Отказ);
	КонецЕсли;
	// Конец Эквайринг
		
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаРасчетыСФондамиПоСтраховымВзносам") Тогда
		СотрудникиУНФ.ОтразитьРасчетыСФондамиПоСтраховымВзносам(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаРасчетыПоКредитамИЗаймам") Тогда
		ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыПоКредитамИЗаймам", ТаблицыДляДвижений, Движения, Отказ);
	КонецЕсли;
	
	// Автоматические скидки
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаБонусныеБаллы") Тогда
		ПроведениеДокументовУНФ.ОтразитьДвижения("БонусныеБаллы", ТаблицыДляДвижений, Движения, Отказ);
	КонецЕсли;

	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаПодарочныеСертификаты") Тогда
		ПроведениеДокументовУНФ.ОтразитьДвижения("ПодарочныеСертификаты", ТаблицыДляДвижений, Движения, Отказ);
	КонецЕсли;

	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаПродажиПоДисконтнымКартам") Тогда
		ПроведениеДокументовУНФ.ОтразитьДвижения("ПродажиПоДисконтнымКартам", ТаблицыДляДвижений, Движения, Отказ);
	КонецЕсли;
	// Конец Автоматические скидки

	// Запись наборов записей
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	// Контроль
	Документы.ВводНачальныхОстатков.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	ПроведениеДокументовУНФ.ЗакрытьМенеджерВременныхТаблиц(ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	// Контроль
	Документы.ВводНачальныхОстатков.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	// Прослеживаемость
	СведенияПрослеживаемости.Очистить();
	ПрослеживаемостьУНФ.ОбновитьПризнакПрослеживаемости(ЗапасыВРазрезеГТД, Дата);
	ПрослеживаемостьУНФ.ОбновитьПризнакПрослеживаемости(ЗапасыПереданныеВРазрезеГТД, Дата);
	ПрослеживаемостьУНФ.ОбновитьПризнакПрослеживаемости(ЗапасыПринятыеВРазрезеГТД, Дата);
	// Конец Прослеживаемость

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СвойстваКонтрагентов()
	
	Ссылки = РасчетыСПокупателями.ВыгрузитьКолонку("Контрагент");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ссылки, РасчетыСПоставщиками.ВыгрузитьКолонку("Контрагент"));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ссылки, ЗапасыПереданные.ВыгрузитьКолонку("Контрагент"));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ссылки, ЗапасыПринятые.ВыгрузитьКолонку("Контрагент"));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ссылки, РасчетыСПрочимиКонтрагентами.ВыгрузитьКолонку("Контрагент"));
	
	Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Ссылки, "ВестиРасчетыПоДоговорам, ВестиРасчетыПоДокументам");
	Возврат Результат;
	
КонецФункции

// Процедура получает ставку НДС по умолчанию.
//
Функция ПолучитьСтавкуНДСПоУмолчанию(НалогообложениеНДС)
	
	Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		ВидСтавкиНДСПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ВидСтавкиНДСПоУмолчанию");
		СтавкаНДСПоУмолчанию = Справочники.СтавкиНДС.СтавкаНДС(ВидСтавкиНДСПоУмолчанию);
	ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	Иначе
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
	КонецЕсли;
	
	Возврат СтавкаНДСПоУмолчанию;
	
КонецФункции // ПолучитьСтавкуНДСПоУмолчанию()

#Область ПроцедурыЗаполненияДокумента

// Обработчик заполнения на основании документа на основании ИнвентаризацияЗапасов.
//
// Параметры:
//	ДокументСсылкаИнвентаризацияЗапасов - ДокументСсылка.ИнвентаризацияЗапасов.
//	
Процедура ЗаполнитьПоИнвентаризацииЗапасов(ДокументСсылкаИнвентаризацияЗапасов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИнвентаризацияЗапасов.Организация КАК Организация,
	|	ИнвентаризацияЗапасов.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ИнвентаризацияЗапасов.Ячейка КАК Ячейка
	|ИЗ
	|	Документ.ИнвентаризацияЗапасов КАК ИнвентаризацияЗапасов
	|ГДЕ
	|	ИнвентаризацияЗапасов.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнвентаризацияЗапасовЗапасы.Номенклатура КАК Номенклатура,
	|	ИнвентаризацияЗапасовЗапасы.Характеристика КАК Характеристика,
	|	ИнвентаризацияЗапасовЗапасы.Партия КАК Партия,
	|	ИнвентаризацияЗапасовЗапасы.СерииНоменклатуры КАК СерииНоменклатуры,
	|	ИнвентаризацияЗапасовЗапасы.Отклонение КАК Отклонение,
	|	ИнвентаризацияЗапасовЗапасы.Количество КАК Количество,
	|	ИнвентаризацияЗапасовЗапасы.КоличествоУчет КАК КоличествоУчет,
	|	ИнвентаризацияЗапасовЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ИнвентаризацияЗапасовЗапасы.Цена КАК Цена,
	|	ИнвентаризацияЗапасовЗапасы.Сумма КАК Сумма,
	|	ИнвентаризацияЗапасовЗапасы.СуммаУчет КАК СуммаУчет
	|ИЗ
	|	Документ.ИнвентаризацияЗапасов.Запасы КАК ИнвентаризацияЗапасовЗапасы
	|ГДЕ
	|	ИнвентаризацияЗапасовЗапасы.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаИнвентаризацияЗапасов);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатыЗапроса[0].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаШапка = РезультатыЗапроса[0].Выбрать();
	ВыборкаШапка.Следующий();
	Организация = ВыборкаШапка.Организация;
	РазделУчета = Перечисления.РазделыУчета.Запасы;
	
	ВыборкаТабличнаяЧастьЗапасы = РезультатыЗапроса[1].Выбрать();
	Пока ВыборкаТабличнаяЧастьЗапасы.Следующий() Цикл
		
		Если ВыборкаТабличнаяЧастьЗапасы.Количество > 0 Тогда
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТабличнаяЧастьЗапасы);
			НоваяСтрока.СтруктурнаяЕдиница = ВыборкаШапка.СтруктурнаяЕдиница;
			НоваяСтрока.Ячейка = ВыборкаШапка.Ячейка;
		КонецЕсли;
		
	КонецЦикла;
	
	СерииНоменклатурыУНФ.ЗаполнитьТЧСерииНоменклатурыПоКлючуСвязи(ЭтотОбъект, ДокументСсылкаИнвентаризацияЗапасов);
	
КонецПроцедуры // ЗаполнитьПоИнвентаризацииЗапасов()

#КонецОбласти

#КонецОбласти


#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли