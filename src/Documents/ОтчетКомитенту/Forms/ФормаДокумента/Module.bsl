
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	Контрагент = Объект.Контрагент;
	Договор = Объект.Договор;
	ВалютаРасчетов = Объект.Договор.ВалютаРасчетов;
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта",
		НациональнаяВалюта));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		И НЕ ЗначениеЗаполнено(Параметры.Основание) 
		И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		НалогиУНФ.ЗаполнитьНДСВключенВСтоимостьВДокументе(Объект);
	ИначеЕсли Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		Элементы.ЗапасыСуммаНДСПоступления.Видимость = Истина;
		Элементы.СчетФактураНадпись.Видимость = Истина;
	Иначе
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДСПоступления.Видимость = Ложь;
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НаЭкспорт Тогда
			Элементы.СчетФактураНадпись.Видимость = Истина;
		Иначе
			Элементы.СчетФактураНадпись.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		Объект.СтавкаНДСВознаграждения = Справочники.СтавкиНДС.СтавкаНДС(Компания.ВидСтавкиНДСПоУмолчанию);
	КонецЕсли;
	
	УчетВалютныхОпераций = Константы.ФункциональнаяУчетВалютныхОпераций.Получить();
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	
	КэшЗначений = Новый Структура;
	КэшЗначений.Вставить("ВерсияПодчиненногоСчетФактуры", Неопределено);
	КэшЗначений.Вставить("ВерсияПодчиненногоПолученногоСчетФактуры", Неопределено);
	КэшЗначений.Вставить("МодифицированностьФормы", Ложь);
	КэшЗначений.Вставить("ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати",
		Константы.ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати.Получить());
	
	// Установить надписи счет-фактура и основание
	СчетФактураСсылка = СчетаФактурыУНФ.ПолучитьПодчиненныйСчетФактуру(Объект.Ссылка, Ложь);
	Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(СчетФактураСсылка);
	КэшЗначений.Вставить("СчетФактураСсылка", ?(ТипЗнч(СчетФактураСсылка) = Тип("Структура"), СчетФактураСсылка.Ссылка, Неопределено));
	
	ИменаТЧ = Новый Массив;
	ИменаТЧ.Добавить(Новый Структура("ИмяПоляПроверки, ИмяПоляОформления", "Объект.Запасы.СтранаПроисхождения", "ЗапасыНомерГТД"));
	
	// Установка видимости договора.
	УстановитьВидимостьДоговора();
	
	// ГрупповоеИзменениеСтрок
	ЗаполнитьСписокДействий();
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрокСервер(), ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
	ЗапасыИзменениеСтрокДействиеПриОткрытии = ЗапасыИзменениеСтрокДействие;
	УстановитьПометку(Истина);
	// Конец ГрупповоеИзменениеСтрок
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	ПечатьДокументовУНФ.КорректировкаРазмещениеПодчиненнойГруппыКомандПечати(ЭтаФорма, Элементы.ПодменюПечать, Элементы.ПодменюПечатьФаксимиле);
	НапоминанияПользователяУНФ.УстановитьОтображениеКомандОрганайзера(Элементы);
	ЭлектроннаяПочтаУНФ.УстановитьОтображениеКомандОтправкиСообщений(Элементы);
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	СписокЭлектронныхВесов = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("ЭлектронныеВесы", ,
		МенеджерОборудованияВызовСервера.РабочееМестоКлиента());
	Если СписокЭлектронныхВесов.Количество() = 0 Тогда
		// Нет подключенных весов.
		Элементы.ЗапасыПолучитьВес.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Запасы");
	
	АвтоподборКонтактов.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект);
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента);
	
	ОпределитьВидимостьНастроекУчетаВНалогообложении();
	
	// Серии номенклатуры
	ИспользоватьСерииНоменклатурыОстатки = СерииНоменклатурыУНФ.ИспользоватьСерииНоменклатурыОстатки();
	Элементы.ЗапасыГруппаСерииНоменклатуры.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	
	// Характеристики
	НоменклатураВДокументахСервер.ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристик(ЭтаФорма);
	Если Параметры.Ключ.Пустая() Тогда
		НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект, Истина)
	КонецЕсли;
	
	МобильныйКлиентУНФ.НастроитьФормуОбъектаМобильныйКлиент(Элементы, "Запасы,Предоплата");
	
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ОтчетКомитенту", НастройкиФормыВыбораНоменклатуры);
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
	НастроитьФормуПоФункциональнымОпциям();
	
	// Для отражения информации по новой схеме движений
	ИмяКлючаОбъекта = "ОтчетКомитентуНоваяСхемаДвижений";
	
	ЗначениеНастройки = ХранилищеСистемныхНастроек.Загрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_" + "ПоказыватьИнформациюПоНовойСхемеДвижений");
	
	Если ЗначениеНастройки = Неопределено Тогда
		ПоказыватьИнформациюПоНовойСхемеДвижений = Истина;
	Иначе
		ПоказыватьИнформациюПоНовойСхемеДвижений = ЗначениеНастройки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Не Объект.УдержатьКомиссионноеВознаграждение Тогда
			Элементы.ДекорацияСхемаДвижений.Заголовок = НСтр("ru ='Оформление расходной накладной для учета комиссионного вознаграждения не требуется.'");
			Элементы.ДекорацияСхемаДвижений.Видимость = Истина;
		Иначе
			Элементы.ДекорацияСхемаДвижений.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Если Не Объект.УдержатьКомиссионноеВознаграждение Тогда
			Если Объект.ИспользоватьНовуюСхемуДвижений Тогда
				Элементы.ДекорацияСхемаДвижений.Заголовок = НСтр("ru ='Оформление расходной накладной для учета комиссионного вознаграждения не требуется.'");
			Иначе
				Элементы.ДекорацияСхемаДвижений.Заголовок = НСтр("ru ='Чтобы учесть комиссионное вознаграждение необходимо оформить расходную накладную.'");
			КонецЕсли;
		Иначе
			Элементы.ДекорацияСхемаДвижений.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПризнакУслугиВТабличнойЧасти();
	
	Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Объект.ДокументОснование);
	ЗаполнитьСписокДокументОснование();

	НастройкиКоличества = ПолучитьНастройкиИзмененияКоличества();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиКоличества);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию") Тогда
		
		Если Не Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
			Если РаботаСКомиссионерамиКомитентамиСервер.ВТабличнойЧастиЕстьКомиссионнаяПартияСНалогообложениемНДС(Объект) Тогда
				ТребуетсяИзменениеНалогообложениеНаСНДС = Истина;
				Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
				ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
				ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
				УчетВалютныхОпераций);
			КонецЕсли;
		ИначеЕсли РаботаСКомиссионерамиКомитентамиСервер.ВТабличнойЧастиЕстьКомиссионнаяПартияСНалогообложением(Объект) Тогда
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
	Если Не Объект.УдержатьКомиссионноеВознаграждение Тогда
		Если Объект.ИспользоватьНовуюСхемуДвижений Тогда
			Элементы.ДекорацияСхемаДвижений.Заголовок = НСтр("ru ='Оформление расходной накладной для учета комиссионного вознаграждения не требуется.'");
		Иначе
			Элементы.ДекорацияСхемаДвижений.Заголовок = НСтр("ru ='Чтобы учесть комиссионное вознаграждение необходимо оформить расходную накладную.'");
		КонецЕсли;
		Элементы.ДекорацияСхемаДвижений.Видимость = Истина;
	Иначе
		Элементы.ДекорацияСхемаДвижений.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	КэшЗначений.МодифицированностьФормы = Модифицированность;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""Запасы""'");
	
	Для Каждого СтрокаТаблицы Из Объект.Запасы Цикл
		
		Если НЕ СтрокаТаблицы.ЭтоУслуга Тогда
			
			ПредставлениеРеквизита = НСтр("ru = 'Партия'");
			Если СтрокаТаблицы.Партия.Пустая() Тогда
				ИмяРеквизита = СтрШаблон("Запасы[%1].Партия", СтрокаТаблицы.НомерСтроки - 1); // Не локализуется
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ШаблонСообщения, ПредставлениеРеквизита, СтрокаТаблицы.НомерСтроки),,ИмяРеквизита,"Объект",Отказ);
			КонецЕсли;
			
			ПредставлениеРеквизита = НСтр("ru = 'Цена поступления'");
			Если СтрокаТаблицы.Партия.Пустая() Тогда
				ИмяРеквизита = СтрШаблон("Запасы[%1].ЦенаПоступления", СтрокаТаблицы.НомерСтроки - 1); // Не локализуется
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ШаблонСообщения, ПредставлениеРеквизита, СтрокаТаблицы.НомерСтроки),,ИмяРеквизита,"Объект",Отказ);
			КонецЕсли;
			
			ПредставлениеРеквизита = НСтр("ru = 'Сумма поступления'");
			Если СтрокаТаблицы.Партия.Пустая() Тогда
				ИмяРеквизита = СтрШаблон("Запасы[%1].СуммаПоступления", СтрокаТаблицы.НомерСтроки - 1); // Не локализуется
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ШаблонСообщения, ПредставлениеРеквизита, СтрокаТаблицы.НомерСтроки),,ИмяРеквизита,"Объект",Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ТекстСообщения = "";
		Справочники.ДоговорыКонтрагентов.ПроверитьСоответствиеДоговораУсловиямДокумента(
			ТекстСообщения,
			Объект.Договор,
			Объект.Ссылка,
			Объект.Организация,
			Объект.Контрагент,
			Отказ);
		
		Если ТекстСообщения <> "" Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Если Отказ Тогда
				Сообщение.Текст = СтрШаблон(НСтр("ru = 'Документ не проведен. %1'"), ТекстСообщения);
			Иначе
				Сообщение.Текст = ТекстСообщения;
			КонецЕсли;
			
			Если Отказ Тогда
				Сообщение.ПутьКДанным = "Объект";
				Сообщение.Поле = "Договор";
				Сообщение.Сообщить();
				Возврат;
			Иначе
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
		
		Если УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройкиЗачетаАвансов() = Перечисления.ДаНет.Да
			И ТекущийОбъект.Предоплата.Количество() = 0 Тогда
			ЗаполнитьПредоплату(ТекущийОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	Оповестить("ОповещениеОбИзмененииДолга");
	
	Если КэшЗначений.МодифицированностьФормы = Истина
		И (КэшЗначений.ВерсияПодчиненногоСчетФактуры = "1.6.11" 
			ИЛИ КэшЗначений.ВерсияПодчиненногоПолученногоСчетФактуры = "1.6.11" ) Тогда
		
		ТекстВопроса = НСтр("ru = 'В накладную были внесены изменения.
			|Требуется самостоятельно поправить подчиненный документ счет-фактура'");
		
		ПоказатьПредупреждение(, ТекстВопроса, 0, НСтр("ru ='Счет-фактура'"));
		
	КонецЕсли;
	
КонецПроцедуры // ПослеЗаписи()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	ТекущийОбъект.ДополнительныеСвойства.Свойство("ВерсияПодчиненногоСчетФактуры", КэшЗначений.ВерсияПодчиненногоСчетФактуры);
	ТекущийОбъект.ДополнительныеСвойства.Свойство("ВерсияПодчиненногоПолученногоСчетФактуры", КэшЗначений.ВерсияПодчиненногоПолученногоСчетФактуры);
	
	УстановитьПризнакУслугиВТабличнойЧасти();
	
	// ГрупповоеИзменениеСтрок
	Если Элементы.ГруппаЗапасыИзменениеСтрок.Видимость Тогда
		УстановитьПометку(Истина);
	КонецЕсли;
	// Конец ГрупповоеИзменениеСтрок
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);	
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьИДоступность(ЭтотОбъект);
	
	// ГрупповоеИзменениеСтрок
	ОпределитьОбъектИзменений();
	// Конец ГрупповоеИзменениеСтрок
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
		РаботаСНоменклатуройКлиентУНФ.ВывестиОповещениеПользователяОбИзмененииРежимаНалогообложенияНаСДНС(ТребуетсяИзменениеНалогообложениеНаСНДС);
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		// ГрупповоеИзменениеСтрок
		СохранитьТекущееДействиеИзмененияСтрок();
		// Конец ГрупповоеИзменениеСтрок
	КонецЕсли;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры // ПриЗакрытии()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Данные = МенеджерОборудованияУНФКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ОбновлениеТекстаПроСчетФактуру" Тогда
		
		ПредставлениеЗаголовка = РаботаСФормойДокументаКлиент.ПредставлениеЗаголовкаПодчиненногоСчетаФактуры(
			Объект.Ссылка, Источник, Параметр, КэшЗначений);
		Если ПредставлениеЗаголовка <> Неопределено Тогда

			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СчетФактураНадпись", "Заголовок",
				ПредставлениеЗаголовка);

		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_Контрагент" 
		И ЗначениеЗаполнено(Параметр)
		И Объект.Контрагент = Параметр Тогда
		
		УстановитьВидимостьДоговора();
		
	ИначеЕсли ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		АдресЗапасовВХранилище = Параметр;
		
		ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, "Запасы", Истина, Истина);
		
		РаботаСНоменклатуройКлиентУНФ.ВывестиОповещениеПользователяОбИзмененииРежимаНалогообложенияНаСДНС(ТребуетсяИзменениеНалогообложениеНаСНДС);
		
	ИначеЕсли ИмяСобытия = "ПодборСерий"
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		ИзменилосьКоличество = ПолучитьСерииНоменклатурыИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки);
		Если ИзменилосьКоличество Тогда
			РассчитатьСуммуВСтрокеТабличнойЧасти();
		КонецЕсли; 
		
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Запасы");
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
КонецПроцедуры // ОбработкаОповещения()

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.ОтчетКомитенту.Форма.ФормаПодбораПоПродажам" Тогда
		
		ПолучитьЗапасыПринятыеИзХранилища(ВыбранноеЗначение);
		
		Если ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
			РаботаСНоменклатуройКлиентУНФ.ВывестиОповещениеПользователяОбИзмененииРежимаНалогообложенияНаСДНС(ТребуетсяИзменениеНалогообложениеНаСНДС);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКонтрагенту(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоКонтрагентуЗавершение", ЭтотОбъект), НСтр(
		"ru = 'Документ будет полностью перезаполнен. Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКонтрагентуЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоОснованию(Объект.Контрагент);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДанныеДляИзмененияДаты = ДокументыУНФКлиент.ДанныеДляИзмененияДаты(ЭтотОбъект, Объект);
	Если ДанныеДляИзмененияДаты.ДатаНеМенялась Тогда
		Возврат;
	КонецЕсли;
	
	ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты);
	
	ЦеныИВалютаКлиент.ПересчитатьКурсКратностьВалютыРасчетов(ДанныеДляИзмененияДаты.ВалютаКурсКратность, Объект,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СпособРасчетаКомиссионногоВознаграждения.
//
&НаКлиенте
Процедура СпособРасчетаКомиссионногоВознагражденияПриИзменении(Элемент)
	
	Если Объект.СпособРасчетаКомиссионногоВознаграждения <> ПредопределенноеЗначение(
		"Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") И ЗначениеЗаполнено(
		Объект.ПроцентКомиссионногоВознаграждения) Тогда

		Если Объект.Запасы.Количество() > 0 Тогда

			ПоказатьВопрос(Новый ОписаниеОповещения("СпособРасчетаКомиссионногоВознагражденияПриИзмененииЗавершение",
				ЭтотОбъект), НСтр("ru = 'Изменился способ расчета. Пересчитать комиссионное вознаграждение?'"),
				РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СпособРасчетаКомиссионногоВознагражденияПриИзмененииФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаКомиссионногоВознагражденияПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
		КонецЦикла;
	КонецЕсли;

	СпособРасчетаКомиссионногоВознагражденияПриИзмененииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаКомиссионногоВознагражденияПриИзмененииФрагмент()

	УстановитьВидимостьИДоступность(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСВознагражденияПриИзменении(Элемент)

	Если Объект.Запасы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ПоказатьВопрос(Новый ОписаниеОповещения("СтавкаНДСВознагражденияПриИзмененииЗавершение", ЭтотОбъект),
		НСтр("ru = 'Пересчитать суммы НДС вознаграждения?'"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСВознагражденияПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Ответ = Результат;

	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДСВознаграждения);

	Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл

		СтрокаТабличнойЧасти.СуммаНДСВознаграждения = ?(Объект.СуммаВключаетНДС,
			СтрокаТабличнойЧасти.СуммаВознаграждения - (СтрокаТабличнойЧасти.СуммаВознаграждения) / ((СтавкаНДС + 100)
			/ 100), СтрокаТабличнойЧасти.СуммаВознаграждения * СтавкаНДС / 100);

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПроцентКомиссионногоВознагражденияПриИзменении(Элемент)

	Если Объект.Запасы.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПроцентКомиссионногоВознагражденияПриИзмененииЗавершение",
			ЭтотОбъект), НСтр("ru = 'Изменился процент вознаграждения. Пересчитать комиссионное вознаграждение?'"),
			РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроцентКомиссионногоВознагражденияПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// Надо предложить пересчитать комиссионное вознаграждение.
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	КонтрагентВестиРасчетыПоЗаказамПередИзменением = КонтрагентВестиРасчетыПоЗаказам;

	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда

		ДанныеКонтрагента = ДанныеКонтрагентаДляИзменения(ДатаДокумента, Объект.ВалютаДокумента, Объект.Контрагент,
			Объект.Организация);
		Объект.Договор = ДанныеКонтрагента.Договор;
		Объект.КонтактноеЛицоПодписант = ДанныеКонтрагента.КонтактноеЛицоПодписант;

		ДанныеКонтрагента.Вставить("КонтрагентВестиРасчетыПоЗаказамПередИзменением",
			КонтрагентВестиРасчетыПоЗаказамПередИзменением);
		ДанныеКонтрагента.Вставить("КонтрагентПередИзменением", КонтрагентПередИзменением);
		
		Если ДанныеКонтрагента.Свойство("Проект") Тогда
			Объект.Проект = ДанныеКонтрагента.Проект;
		КонецЕсли;
	
		ОбработатьИзменениеДоговора(ДанныеКонтрагента);

	Иначе

		Объект.Договор = Договор; // Восстанавливаем автоматически очищенный договор.

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)

	ОбработатьИзменениеДоговора();

КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, Объект.Договор);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдержатьКомиссионноеВознаграждениеПриИзменении(Элемент)
	
	Если Элементы.Найти("УчитыватьВНУ") <> Неопределено Тогда
		Элементы.УчитыватьВНУ.Доступность = Объект.УдержатьКомиссионноеВознаграждение;
		Объект.УчитыватьВНУ = Объект.УдержатьКомиссионноеВознаграждение;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Не Объект.УдержатьКомиссионноеВознаграждение Тогда
			Элементы.ДекорацияСхемаДвижений.Заголовок = НСтр(
				"ru ='Оформление расходной накладной для учета комиссионного вознаграждения не требуется.'");
			Элементы.ДекорацияСхемаДвижений.Видимость = Истина;
		Иначе
			Элементы.ДекорацияСхемаДвижений.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Если Не Объект.УдержатьКомиссионноеВознаграждение Тогда
			Если Объект.ИспользоватьНовуюСхемуДвижений Тогда
				Элементы.ДекорацияСхемаДвижений.Заголовок = НСтр(
					"ru ='Оформление расходной накладной для учета комиссионного вознаграждения не требуется.'");
			Иначе
				Элементы.ДекорацияСхемаДвижений.Заголовок = НСтр(
					"ru ='Чтобы учесть комиссионное вознаграждение необходимо оформить расходную накладную.'");
			КонецЕсли;
			Элементы.ДекорацияСхемаДвижений.Видимость = Истина;
		Иначе
			Элементы.ДекорацияСхемаДвижений.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнформацияПоНовойСхемеДвиженийЗакрытьНажатие(Элемент)
	
	Элементы.ГруппаИнформацияПоНовойСхеме.Видимость = Ложь;
	ПоказыватьИнформациюПоНовойСхемеДвижений = Ложь;
	СохранитьНастройкуПоказыватьИнформациюПоНовойСхемеДвижений();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкуПоказыватьИнформациюПоНовойСхемеДвижений()

	ИмяКлючаОбъекта = "ОтчетКомитентуНоваяСхемаДвижений";
	ХранилищеСистемныхНастроек.Сохранить(ИмяКлючаОбъекта,
	ИмяКлючаОбъекта+"_" + "ПоказыватьИнформациюПоНовойСхемеДвижений", ПоказыватьИнформациюПоНовойСхемеДвижений);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовПодвалаФормы

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
		
КонецПроцедуры

&НаКлиенте
Процедура СчетФактураНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СчетаФактурыУНФКлиент.ОткрытьСчетФактуру(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "удалить" Тогда
		Объект.ДокументОснование = Неопределено;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Неопределено);
		Модифицированность = Истина;
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "заполнить" Тогда
		ЗаполнитьПоОснованиюНачало();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "выбрать" Тогда
		// Выбрать основание
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборТипаОснованияЗавершение", ЭтотОбъект);
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокДокументОснование, Элементы.ДокументОснованиеНадпись);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "открыть" Тогда
		
		РаботаСФормойДокументаКлиент.ОткрытьФормуДокументаПоСсылке(Объект.ДокументОснование);
		
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ВыборТипаОснованияЗавершение(ВыбранноеИмяФормы, Параметры) Экспорт
	
	Если ВыбранноеИмяФормы<>Неопределено Тогда
		
		СтруктураПараметровОтбора = Новый Структура();
		ВидОперацииПриходнаяНакладная = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию");
		
		СтруктураОтбора = Новый Структура("Контрагент, Договор, ВидОперации", Контрагент, Договор, ВидОперацииПриходнаяНакладная);
		
		СтруктураПараметровОтбора = Новый Структура("Отбор", СтруктураОтбора);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
		ОткрытьФорму(ВыбранноеИмяФормы.Значение, СтруктураПараметровОтбора, ЭтотОбъект, ,,, ОповещениеОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснованиеЗавершение(ВыбранноеЗначение, Параметры) Экспорт

	Если ВыбранноеЗначение<>Неопределено Тогда
		Объект.ДокументОснование = ВыбранноеЗначение;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(ВыбранноеЗначение);
		Модифицированность = Истина;
		
		ЗаполнитьПоОснованиюНачало();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюНачало()

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения, 
		НСтр("ru = 'Заполнить документ по выбранному основанию?'"), 
		РежимДиалогаВопрос.ДаНет, 0);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДокументОснование()
	СписокДокументОснование.Очистить();
	СписокДокументОснование.Добавить("Документ.ПриходнаяНакладная.ФормаВыбора", НСтр("ru = 'Приходная накладная'"));
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьПоДокументу(Объект.ДокументОснование);
		
		ДанныеКонтрагента = ДанныеКонтрагентаДляИзменения(ДатаДокумента, Объект.ВалютаДокумента, Объект.Контрагент,
			Объект.Организация);
		Объект.КонтактноеЛицоПодписант = ДанныеКонтрагента.КонтактноеЛицоПодписант;
		ОбработатьИзменениеДоговора();
		
		Если ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
			РаботаСНоменклатуройКлиентУНФ.ВывестиОповещениеПользователяОбИзмененииРежимаНалогообложенияНаСДНС(ТребуетсяИзменениеНалогообложениеНаСНДС);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументу(ДокОснование)
	
	Объект.Запасы.Очистить();
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(ДокОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;

	ЗаполнитьПризнакиИспользованияХарактеристик();
	
	Если ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию") Тогда
		
		Если Не Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
			Если РаботаСКомиссионерамиКомитентамиСервер.ВТабличнойЧастиЕстьКомиссионнаяПартияСНалогообложениемНДС(Объект) Тогда
				ТребуетсяИзменениеНалогообложениеНаСНДС = Истина;
				Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
				ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
				ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
				УчетВалютныхОпераций);
			КонецЕсли;
		ИначеЕсли РаботаСКомиссионерамиКомитентамиСервер.ВТабличнойЧастиЕстьКомиссионнаяПартияСНалогообложением(Объект) Тогда
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасы

&НаКлиенте
// Процедура - обработчик события ПриНачалеРедактирования табличной части Запасы.
//
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		Элемент.ТекущиеДанные.КлючСвязи = 0;
		Элемент.ТекущиеДанные.СерииНоменклатуры = "";
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, Элемент.ТекущиеДанные);
	КонецЕсли;	
	
	// ГрупповоеИзменениеСтрок
	Элемент.ТекущиеДанные.Пометка = Истина;
	// Конец ГрупповоеИзменениеСтрок
	
	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыСерииНоменклатуры Тогда
		ОткрытьПодборСерииНоменклатуры();
	КонецЕсли;
		
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
		
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТабличнойЧасти.Количество = НовоеКоличествоПриИзмененииНоменклатуры;
	КонецЕсли;
		
	ЭтоНоваяСтрокаЗапасы = НоваяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ЭтоНоваяСтрокаЗапасы = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьСбросКоличества И СбрасыватьКоличество
		И СтрокаТабличнойЧасти.Количество <> НовоеКоличествоПриИзмененииНоменклатуры Тогда
		
		ДопПараметр = Новый Структура();
		ДопПараметр.Вставить("Элемент", Элемент);
		ДопПараметр.Вставить("Количество", СтрокаТабличнойЧасти.Количество);
		Оповещение = Новый ОписаниеОповещения("ЗапасыПодтверждениеСбросаКоличестваЗавершение", ЭтотОбъект, ДопПараметр);
		ОткрытьФорму("ОбщаяФорма.ПодтверждениеСбросаКоличества", , , , , , Оповещение);
		
	Иначе
		
		Если СбрасыватьКоличество Тогда
			НовоеКоличество = НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
		ЗапасыНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество);
		
	КонецЕсли;
		
КонецПроцедуры // ЗапасыНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗапасыПодтверждениеСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗапрашиватьСбросКоличества = Результат.ЗапрашиватьСбросКоличества;
		Если НЕ ЗапрашиватьСбросКоличества Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		КонецЕсли;
		Если Результат.СбрасыватьКоличество Тогда
			НовоеКоличество = Результат.НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = ДополнительныеПараметры.Количество;
		КонецЕсли;
	Иначе
		НовоеКоличество = ДополнительныеПараметры.Количество;
	КонецЕсли;
	
	ЗапасыНоменклатураПриИзмененииПродолжить(ДополнительныеПараметры.Элемент, НовоеКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество)

	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
	
	Если ЗначениеЗаполнено(Объект.ВидЦенКонтрагента) Тогда
		
		СтруктураДанные.Вставить("ВидЦенКонтрагента", Объект.ВидЦенКонтрагента);
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("Коэффициент", 1);
		
	КонецЕсли;
	
	СтруктураПоискаПартииСНДС = Новый Структура("КомиссияСНДС", Истина);
	ЕстьПартииСНДС = Объект.Запасы.НайтиСтроки(СтруктураПоискаПартииСНДС).Количество() > 0;
	СтруктураДанные.Вставить("ЕстьПартииСНДС", ЕстьПартииСНДС);
	
	СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанные);
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = НовоеКоличество;
	СтрокаТабличнойЧасти.Цена = 0;
	СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = СтруктураДанные.НомерГТД;
	
	СтрокаТабличнойЧасти.ЦенаПоступления = СтруктураДанные.ЦенаПоступления;
	
	СтрокаТабличнойЧасти.СуммаПоступления = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаПоступления;
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДСПоступления = ?(
		Объект.СуммаВключаетНДС,
		СтрокаТабличнойЧасти.СуммаПоступления
		- (СтрокаТабличнойЧасти.СуммаПоступления)
		/ ((СтавкаНДС + 100)
		/ 100),
		СтрокаТабличнойЧасти.СуммаПоступления
		* СтавкаНДС
		/ 100);
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
	// Серии номенклатуры
	Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
		СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, ТекущиеДанныеСтроки,
			ИспользоватьСерииНоменклатурыОстатки);
	КонецЦикла;
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если СтруктураДанные.ИспользоватьХарактеристики Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
			СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
		КонецЕсли;
	КонецЕсли;
	
	//Партии
	СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
	
	Если СтруктураДанные.ИспользоватьПартии Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Партия = СтруктураВыбораНоменклатуры.Партия;
			СтруктураВыбораНоменклатуры.Партия = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
		КонецЕсли;
		СтрокаТабличнойЧасти.КомиссияСНДС = СтруктураДанные.КомиссияСНДС;
	КонецЕсли;
	// Конец Партии
	
	СтрокаТабличнойЧасти.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
	
	Если СтруктураДанные.Свойство("ЭтоУслуга") Тогда
		СтрокаТабличнойЧасти.ЭтоУслуга = СтруктураДанные.ЭтоУслуга;
	КонецЕсли;
	
	ПодборНоменклатурыИзСписка = Ложь;
	
	Если СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
		Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС");
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,УчетВалютныхОпераций);
		ТребуетсяИзменениеНалогообложениеНаСНДС = СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС;
		РаботаСНоменклатуройКлиентУНФ.ВывестиОповещениеПользователяОбИзмененииРежимаНалогообложенияНаСДНС(ТребуетсяИзменениеНалогообложениеНаСНДС);
	КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ОтчетКомитенту", НастройкиФормыВыбораНоменклатуры, Истина, "Запасы", ВыбранноеЗначение.СтруктураНастроек);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация",			Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура",		СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",		СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия",				СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("СтранаПроисхождения",	СтрокаТабличнойЧасти.СтранаПроисхождения);
	
	Если ЗначениеЗаполнено(Объект.ВидЦенКонтрагента) Тогда
	
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		СтруктураДанные.Вставить("ДатаОбработки",		Объект.Дата);
		СтруктураДанные.Вставить("ВидЦенКонтрагента",	Объект.ВидЦенКонтрагента);
		СтруктураДанные.Вставить("ВалютаДокумента",		Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС",	Объект.СуммаВключаетНДС);
		
		СтруктураДанные.Вставить("СтавкаНДС", 		 	СтрокаТабличнойЧасти.СтавкаНДС);
		СтруктураДанные.Вставить("ЕдиницаИзмерения",	СтрокаТабличнойЧасти.ЕдиницаИзмерения);
		СтруктураДанные.Вставить("ЦенаПоступления",		СтрокаТабличнойЧасти.ЦенаПоступления);
		
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПартияПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = СтруктураДанные.НомерГТД;
	
	Если ЗначениеЗаполнено(Объект.ВидЦенКонтрагента) Тогда
		
		СтрокаТабличнойЧасти.ЦенаПоступления = СтруктураДанные.ЦенаПоступления;
		СтрокаТабличнойЧасти.СуммаПоступления = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаПоступления;
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		
		СтрокаТабличнойЧасти.СуммаНДСПоступления = ?(Объект.СуммаВключаетНДС, 
													СтрокаТабличнойЧасти.СуммаПоступления - (СтрокаТабличнойЧасти.СуммаПоступления) / ((СтавкаНДС + 100) / 100),
													СтрокаТабличнойЧасти.СуммаПоступления * СтавкаНДС / 100);
		
		РассчитатьСуммуВСтрокеТабличнойЧасти();
		РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры // ЗапасыХарактеристикаПриИзменении()

&НаКлиенте
Процедура ЗапасыПартияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация",			Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура",		СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",		СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия",				СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("СтранаПроисхождения",	СтрокаТабличнойЧасти.СтранаПроисхождения);
	СтруктураДанные.Вставить("НалогообложениеНДС",			Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("ДатаОбработки",				Объект.Дата);
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПартияПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.КомиссияСНДС = СтруктураДанные.КомиссияСНДС;
	
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = СтруктураДанные.НомерГТД;
	
	Если ЗначениеЗаполнено(СтруктураДанные.СтавкаНДС) И НЕ СтруктураДанные.СтавкаНДС = СтрокаТабличнойЧасти.СтавкаНДС Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		РассчитатьСуммуВСтрокеТабличнойЧасти();
	КонецЕсли;
	
	Если СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
		Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС");
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,УчетВалютныхОпераций);
		ТребуетсяИзменениеНалогообложениеНаСНДС = СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС;
		РаботаСНоменклатуройКлиентУНФ.ВывестиОповещениеПользователяОбИзмененииРежимаНалогообложенияНаСДНС(ТребуетсяИзменениеНалогообложениеНаСНДС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Сумма поступления.
	СтрокаТабличнойЧасти.СуммаПоступления = СтрокаТабличнойЧасти.ЦенаПоступления * СтрокаТабличнойЧасти.Количество;
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДСПоступления = ?(Объект.СуммаВключаетНДС, 
													СтрокаТабличнойЧасти.СуммаПоступления - (СтрокаТабличнойЧасти.СуммаПоступления) / ((СтавкаНДС + 100) / 100),
													СтрокаТабличнойЧасти.СуммаПоступления * СтавкаНДС / 100);
	// Сумма вознаграждения.
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
	
КонецПроцедуры // ЗапасыКоличествоПриИзменении()

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение 
		ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	// Цена.
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ЗапасыЕдиницаИзмеренияОбработкаВыбора()

&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ЗапасыЦенаПриИзменении()

&НаКлиенте
Процедура ЗапасыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Сумма вознаграждения.
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ЗапасыСуммаПриИзменении()

&НаКлиенте
Процедура ЗапасыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			
	СтрокаТабличнойЧасти.СуммаНДСПоступления = ?(Объект.СуммаВключаетНДС, 
													СтрокаТабличнойЧасти.СуммаПоступления - (СтрокаТабличнойЧасти.СуммаПоступления) / ((СтавкаНДС + 100) / 100),
													СтрокаТабличнойЧасти.СуммаПоступления * СтавкаНДС / 100);
	
КонецПроцедуры // ЗапасыСтавкаНДСПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДС.
//
Процедура ЗапасыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // ЗапасыСуммаНДСПриИзменении()

&НаКлиенте
Процедура ЗапасыЦенаПоступленияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Сумма поступления.
	СтрокаТабличнойЧасти.СуммаПоступления = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаПоступления;
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			
	СтрокаТабличнойЧасти.СуммаНДСПоступления = ?(Объект.СуммаВключаетНДС, 
													СтрокаТабличнойЧасти.СуммаПоступления - (СтрокаТабличнойЧасти.СуммаПоступления) / ((СтавкаНДС + 100) / 100),
													СтрокаТабличнойЧасти.СуммаПоступления * СтавкаНДС / 100);
	
	// Сумма вознаграждения.
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ЗапасыЦенаПоступленияПриИзменении()

&НаКлиенте
Процедура ЗапасыСуммаПоступленияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.ЦенаПоступления = СтрокаТабличнойЧасти.СуммаПоступления / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	// Сумма НДС поступления.
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			
	СтрокаТабличнойЧасти.СуммаНДСПоступления = ?(Объект.СуммаВключаетНДС, 
													СтрокаТабличнойЧасти.СуммаПоступления - (СтрокаТабличнойЧасти.СуммаПоступления) / ((СтавкаНДС + 100) / 100),
													СтрокаТабличнойЧасти.СуммаПоступления * СтавкаНДС / 100);
		
	// Сумма вознаграждения.
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);

КонецПроцедуры // ЗапасыСуммаПоступленияПриИзменении

&НаКлиенте
Процедура ЗапасыСуммаВознагражденияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДСВознаграждения);
	
	СтрокаТабличнойЧасти.СуммаНДСВознаграждения = ?(Объект.СуммаВключаетНДС, 
	СтрокаТабличнойЧасти.СуммаВознаграждения - (СтрокаТабличнойЧасти.СуммаВознаграждения) / ((СтавкаНДС + 100) / 100),
	СтрокаТабличнойЧасти.СуммаВознаграждения * СтавкаНДС / 100);
	
КонецПроцедуры // ЗапасыСуммаВознагражденияПриИзменении(Элемент)

&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	
	// Серии номенклатуры
	Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
		СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, ТекущиеДанныеСтроки,
			ИспользоватьСерииНоменклатурыОстатки);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтранаПроисхожденияПриИзменении(Элемент)
	
	Если КэшЗначений.УчетГТД Тогда
	
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения)
			ИЛИ СтрокаТабличнойЧасти.СтранаПроисхождения = КэшЗначений.Россия Тогда
			
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНомерГТДПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
		
		ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
		Если ДатаГТД > КонецДня(Объект.Дата) Тогда
			
			ТекстСообщения = НСтр("ru ='Внимание: выбранная ГТД датирована более поздней датой, чем текущий документ.'");
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Запасы",
				СтрокаТабличнойЧасти.НомерСтроки, "НомерГТД");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , КонтекстноеПоле);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредоплата

&НаКлиенте
Процедура ПредоплатаСуммаРасчетовПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
		
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
			?(Объект.Курс = 0,
			1,
			Объект.Курс),
		СтрокаТабличнойЧасти.Курс);
	
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
			?(Объект.Кратность = 0,
			1,
			Объект.Кратность),
		СтрокаТабличнойЧасти.Кратность);
	
	СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
		СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс,
		?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
		СтрокаТабличнойЧасти.Кратность,
		?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность));

КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКурсПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.ПриИзмененииКурсаВСтрокеПредоплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКурсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасчетыРаботаСФормамиКлиент.ПредоплатаКурсНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКратностьПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.ПриИзмененииКурсаВСтрокеПредоплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс);
	
	КурсПересчета = ?(Объект.ВалютаДокумента = НациональнаяВалюта, 1, Объект.Курс);
	СтрокаТабличнойЧасти.Кратность = 1;
	
	СтрокаТабличнойЧасти.Курс =
		?(СтрокаТабличнойЧасти.СуммаРасчетов = 0,
			1,
			СтрокаТабличнойЧасти.СуммаПлатежа
		  / СтрокаТабличнойЧасти.СуммаРасчетов
		  * КурсПересчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПриИзменении(Элемент)
	
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента);

КонецПроцедуры

&НаКлиенте
Процедура ДоговорСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Владелец", Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоров.СКомитентом"));
	ПараметрыФормы.Вставить("ОповеститьОЗаписиДоговора", Истина);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	СуммаРасчетов = Объект.Предоплата.Итог("СуммаРасчетов");
	ИтогВсего = Объект.Запасы.Итог("Всего");
	РасчетыРаботаСФормамиВызовСервера.ВыполнитьКонтрольСуммыОплатыДобавлениеСтроки(
		СуммаРасчетов, ИтогВсего, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПредоплатаПриОкончанииРедактированияНаСервере(Элементы.Предоплата.ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура ПредоплатаПриОкончанииРедактированияНаСервере(ИдентификаторСтроки)
	
	ИтогВсего = Объект.Запасы.Итог("Всего");
	РасчетыРаботаСФормамиВызовСервера.ВыполнитьКонтрольСуммыОплатыВСтроке(ЭтотОбъект, ИдентификаторСтроки, ИтогВсего);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РежимГТД(Команда)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РежимГТД", "Пометка", НЕ Элементы.РежимГТД.Пометка);
	
	ИзменитьРежимРаботаГТД(Элементы.РежимГТД.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура НомераГТДЗаполнитьПоОстаткамПринятым(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НомераГТДПодобратьПоПринятымНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРеквизитыПечатиНажатие(Элемент)
	
	ОткрытьФормуРеквизитыПечати();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	
КонецПроцедуры // РедактироватьЦеныИВалюту()

&НаКлиенте
Процедура РедактироватьЗачетПредоплаты(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале контрагента!'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале договор контрагента!'"));
		Возврат;
	КонецЕсли;
	
	МассивЗаказов = Новый Массив;
	Для каждого ТекЭлемент Из Объект.Запасы Цикл
		СтруктураЗаказа = Новый Структура("Заказ, Всего");
		СтруктураЗаказа.Заказ = ТекЭлемент.ЗаказПоставщику;
		СтруктураЗаказа.Всего = ТекЭлемент.Всего;
		МассивЗаказов.Добавить(СтруктураЗаказа);
	КонецЦикла;
	
	АдресПредоплатаВХранилище = ПоместитьПредоплатаВХранилище();
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("АдресПредоплатаВХранилище", АдресПредоплатаВХранилище);
	ПараметрыПодбора.Вставить("Подбор", Истина);
	ПараметрыПодбора.Вставить("ЕстьЗаказ", Истина);
	ПараметрыПодбора.Вставить("ЗаказВШапке", Ложь);
	ПараметрыПодбора.Вставить("Компания", Компания);
	Если КонтрагентВестиРасчетыПоЗаказам Тогда
		ПараметрыПодбора.Вставить("Заказ", МассивЗаказов);
	Иначе
		ПараметрыПодбора.Вставить("Заказ", Неопределено);
	КонецЕсли;
	ПараметрыПодбора.Вставить("Дата", Объект.Дата);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыПодбора.Вставить("Договор", Объект.Договор);
	ПараметрыПодбора.Вставить("Курс", Объект.Курс);
	ПараметрыПодбора.Вставить("Кратность", Объект.Кратность);
	ПараметрыПодбора.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("СуммаДокумента", Объект.Запасы.Итог("Всего"));
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораАвансовПоставщикам", ПараметрыПодбора, , , , ,
		Новый ОписаниеОповещения("РедактироватьЗачетПредоплатыЗавершение", ЭтотОбъект,
		Новый Структура("АдресПредоплатаВХранилище", АдресПредоплатаВХранилище)));
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт

	АдресПредоплатаВХранилище = ДополнительныеПараметры.АдресПредоплатаВХранилище;
	КодВозврата = Результат;

	Если КодВозврата = КодВозвратаДиалога.OK Тогда
		ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НастройкаСбросаКоличества(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтрокаПоиска", НСтр("ru = 'Сбрасывать количество при изменении номенклатуры'"));
	Оповещение = Новый ОписаниеОповещения("НастройкаСбросаКоличестваЗавершение", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.НастройкиПользователей.Форма.ФормаНастройкиПользователя", СтруктураПараметров, , , , ,
		Оповещение);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, 
		Элементы.ЗапасыКонтекстноеМенюНастройкаСбросаКоличества, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НастройкиКоличества = ПолучитьНастройкиИзмененияКоличества();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиКоличества);
	
КонецПроцедуры

// ПодключаемоеОборудование
// Процедура - обработчик команды командной панели табличной части.
//
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	
	ТекШтрихкод = "";
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект,
		Новый Структура("ТекШтрихкод", ТекШтрихкод));
	
	#Если МобильныйКлиент Тогда
	ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду", , , , , , ОбработкаЗавершения);
	#Иначе
	ПоказатьВводЗначения(ОбработкаЗавершения, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, СокрЛП(ДополнительныеПараметры.ТекШтрихкод), СокрЛП(Результат));
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры // ПоискПоШтрихкоду()

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтотОбъект, "Запасы");
	
КонецПроцедуры // ПолучитьВес()

&НаКлиенте
Процедура ПолучитьВесЗавершение(Параметры) Экспорт
	
	СтрокаТабличнойЧасти = Параметры;
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	
	// Сумма поступления.
	СтрокаТабличнойЧасти.СуммаПоступления = СтрокаТабличнойЧасти.ЦенаПоступления * СтрокаТабличнойЧасти.Количество;
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	СтрокаТабличнойЧасти.СуммаНДСПоступления = ?(
		Объект.СуммаВключаетНДС, 
		СтрокаТабличнойЧасти.СуммаПоступления - (СтрокаТабличнойЧасти.СуммаПоступления) / ((СтавкаНДС + 100) / 100),
		СтрокаТабличнойЧасти.СуммаПоступления * СтавкаНДС / 100);
	
	// Сумма вознаграждения.
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", "Запасы");
	
	ПодключаемоеОборудованиеУНФКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Ложь, ДополнительныеПараметры);
	
КонецПроцедуры

// Конец ПодключаемоеОборудование

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастроитьФормуПоФункциональнымОпциям()
	
	ДоступныеТипыНоменклатуры = Новый Массив;
	
	Если ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию") Тогда
		ДоступныеТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Запас);
	Иначе
		Элементы.ЗапасыЦенаПоступления.Видимость = Ложь;
		Элементы.ЗапасыСуммаПоступления.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДСПоступления.Видимость = Ложь;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("АгентскиеУслуги") Тогда
		ДоступныеТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	КонецЕсли;
	
	НовыеПараметрыВыбора = Новый Массив;
	Для каждого ПараметрВыбора Из Элементы.ЗапасыНоменклатура.ПараметрыВыбора Цикл
		Если ПараметрВыбора.Имя <> "Отбор.ТипНоменклатуры" Тогда
			НовыеПараметрыВыбора.Добавить(ПараметрВыбора);
		КонецЕсли;
	КонецЦикла;
	
	НовыеПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", Новый ФиксированныйМассив(ДоступныеТипыНоменклатуры)));
	
	Элементы.ЗапасыНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметрыВыбора);
	
КонецПроцедуры

&НаСервере
Процедура НомераГТДПодобратьПоПринятымНаСервере(ЭтоКонтекстныйВызов)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ТаблицаЗапасы", Неопределено);
	ПараметрыПодбора.Вставить("ОстаткиПоГТД", Неопределено);
	ПараметрыПодбора.Вставить("Дата", Объект.Дата);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("ИндексТекущейСтроки", ?(ЗначениеЗаполнено(Элементы.Запасы.ТекущаяСтрока), Объект.Запасы.Индекс(Объект.Запасы.НайтиПоИдентификатору(Элементы.Запасы.ТекущаяСтрока)), 0));
	
	Если НЕ ЭтоКонтекстныйВызов Тогда
		
		ПараметрыПодбора.Вставить("ПроверятьПометку", Истина);
		
	КонецЕсли;
	
	МассивИменПолей = Новый Массив;
	МассивИменПолей.Добавить("Сумма");
	МассивИменПолей.Добавить("СуммаНДС");
	МассивИменПолей.Добавить("Всего");
	МассивИменПолей.Добавить("СуммаПоступления");
	МассивИменПолей.Добавить("СуммаНДСПоступления");
	МассивИменПолей.Добавить("СуммаВознаграждения");
	МассивИменПолей.Добавить("СуммаНДСВознаграждения");
	ПараметрыПодбора.Вставить("ИменаПолей", МассивИменПолей);
	
	ГрузовыеТаможенныеДекларацииСервер.ПодготовитьТаблицуЗапасовИзТаблицыФормы(ПараметрыПодбора, Объект.Запасы);
	ГрузовыеТаможенныеДекларацииСервер.СформироватьОстаткиПринятыеНомеровГТД(ПараметрыПодбора);
	ГрузовыеТаможенныеДекларацииСервер.ПеренестиОстаткиНомеровГТДВТаблицуФормы(Объект.Запасы, ПараметрыПодбора);
	
	Если ПараметрыПодбора.ИндексТекущейСтроки <> -1 Тогда
		
		СтрокаКоллекции = Объект.Запасы.Получить(ПараметрыПодбора.ИндексТекущейСтроки);
		Элементы.Запасы.ТекущаяСтрока = СтрокаКоллекции.ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРежимРаботаГТД()
	
	НеизменяемыеРеквизиты = Новый Массив;
	НеизменяемыеРеквизиты.Добавить("ЗапасыПометка");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНомерСтроки");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНоменклатура");
	НеизменяемыеРеквизиты.Добавить("ЗапасыХарактеристика");
	НеизменяемыеРеквизиты.Добавить("ЗапасыПартия");
	НеизменяемыеРеквизиты.Добавить("ЗапасыКоличество");
	НеизменяемыеРеквизиты.Добавить("ЗапасыЕдиницаИзмерения");
	НеизменяемыеРеквизиты.Добавить("ЗапасыСтранаПроисхождения");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНомерГТД");
	НеизменяемыеРеквизиты.Добавить("ЗапасыКодТНВЭД");
	
	Для каждого ЭлементФормы Из Элементы.Запасы.ПодчиненныеЭлементы Цикл
		
		Если НеизменяемыеРеквизиты.Найти(ЭлементФормы.Имя) = Неопределено
			И ЭлементФормы.Видимость = Истина Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементФормы.Имя, "Видимость", Ложь);
			КэшЗначений.ОбрабатываемыеРеквизиты.Добавить(ЭлементФормы.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЕдиницаИзмерения", "Доступность", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьРежимРаботаГТД()
	
	Для каждого ИмяЭлементаФормы Из КэшЗначений.ОбрабатываемыеРеквизиты Цикл
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлементаФормы, "Видимость", Истина);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЕдиницаИзмерения", "Доступность", Истина);
	
	КэшЗначений.ОбрабатываемыеРеквизиты = Новый Массив;
	
КонецПроцедуры

&НаКлиенте 
Процедура ИзменитьРежимРаботаГТД(ВключитьРежимГТД)
	
	Если НЕ КэшЗначений.Свойство("ОбрабатываемыеРеквизиты") Тогда
		
		КэшЗначений.Вставить("ОбрабатываемыеРеквизиты", Новый Массив);
		
	КонецЕсли;
	
	Если ВключитьРежимГТД Тогда
		
		ВключитьРежимРаботаГТД();
		
	Иначе
		
		ВыключитьРежимРаботаГТД();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита()
	НоменклатураВДокументахСервер.ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита(ЭтотОбъект,
		"ОтчетКомитенту", "Запасы", НастройкиФормыВыбораНоменклатуры);
КонецПроцедуры

&НаСервере
Процедура ОпределитьВидимостьНастроекУчетаВНалогообложении()
	
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда
		Элементы.УчитыватьВНУ.Видимость = Ложь;
		
		Возврат;
	КонецЕсли;
	
	СистемаНалогообложенияСтруктура = РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(Объект.Организация, Объект.Дата);
	
	Элементы.УчитыватьВНУ.Видимость = СистемаНалогообложенияСтруктура.ПлательщикУСН;
	Элементы.УчитыватьВНУ.Доступность = Объект.УдержатьКомиссионноеВознаграждение;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И СистемаНалогообложенияСтруктура.ПлательщикУСН Тогда
		Объект.УчитыватьВНУ = Объект.УдержатьКомиссионноеВознаграждение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияРеквизитовПечати(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ПечатьДокументовУНФКлиент.ОбновитьЗначенияРеквизитовПечати(ЭтотОбъект, Результат.ИзмененныеРеквизиты);
		
		Если Результат.Свойство("Команда") Тогда
			
			Подключаемый_ВыполнитьКоманду(Результат.Команда);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеВидаЦенКонтрагентовИВалютыРасчетов(ПараметрыДокумента)
	
	ВалютаРасчетовПередИзменением = ПараметрыДокумента.ВалютаРасчетовПередИзменением;
	ДанныеДоговора = ПараметрыДокумента.ДанныеДоговора;
	ИзменилсяВидЦен = ПараметрыДокумента.ИзменилсяВидЦен;
	ВопросВидЦенКонтрагента = ПараметрыДокумента.ВопросВидЦенКонтрагента;
	ОткрытьФормуЦеныИВалюты = ПараметрыДокумента.ОткрытьФормуЦеныИВалюты;
	
	Если НЕ ДанныеДоговора.СуммаВключаетНДС = Неопределено Тогда
		
		Объект.СуммаВключаетНДС = ДанныеДоговора.СуммаВключаетНДС;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		Объект.Курс = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс = 0, 1,
			ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс);
		Объект.Кратность = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность = 0, 1,
			ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность);
	КонецЕсли;
	
	Если ИзменилсяВидЦен Тогда
		
		Объект.ВидЦенКонтрагента = ДанныеДоговора.ВидЦенКонтрагента;
		
	КонецЕсли;
	
	Объект.ВалютаДокумента = ДанныеДоговора.ВалютаРасчетов;
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	
	Если ОткрытьФормуЦеныИВалюты Тогда

		ТекстПредупреждения = "";
		Если ИзменилсяВидЦен Тогда

			ТекстПредупреждения = НСтр("ru = 'Договор с контрагентом предусматривает вид цен, 
									   |отличный от установленного в документе. 
									   |Пересчитать документ в соответствии с договором?'") + Символы.ПС + Символы.ПС;

		КонецЕсли;

		ТекстПредупреждения = ТекстПредупреждения + НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом. 
														 |Необходимо проверить валюту документа.'");

		ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаРасчетовПередИзменением, Истина, ИзменилсяВидЦен,
			ТекстПредупреждения);

	ИначеЕсли ВопросВидЦенКонтрагента Тогда

		Если Объект.Запасы.Количество() > 0 Тогда

			ТекстВопроса = НСтр("ru = 'Договор с контрагентом предусматривает вид цен, отличный от установленного в документе. 
								|Пересчитать документ в соответствии с договором?'");

			ОписаниеОповещения = Новый ОписаниеОповещения("ОпределитьНеобходимостьПересчетаДокументаПоУсловиямДоговора",
				ЭтотОбъект, ПараметрыДокумента);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзменениеВидаЦенКонтрагентовИВалютыРасчетов()

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты)
	
	ДокументыУНФ.ДатаПриИзменении(ДанныеДляИзмененияДаты, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	НалогообложениеПередИзменением = Объект.НалогообложениеНДС;
	
	ДокументыУНФ.ОрганизацияПриИзменении(ЭтотОбъект, Объект);
	
	Объект.СтавкаНДСВознаграждения = Справочники.СтавкиНДС.СтавкаНДС(Компания.ВидСтавкиНДСПоУмолчанию);
	
	Объект.Договор = Справочники.ДоговорыКонтрагентов.ПоДокументуКонтрагентуОрганизацииИВидуОперации(
		Объект.Ссылка, Объект.Контрагент, Объект.Организация);
		
	Объект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Объект.Организация,, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
		
	ЗаполнитьСтавкуНДСПоНалогообложениеНДС(НалогообложениеПередИзменением);
		
	ОпределитьВидимостьНастроекУчетаВНалогообложении();
	
	ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
	СтруктураДанные.Вставить("НомерГТД", Неопределено);
	
	// Наборы
	СтруктураДанные.Вставить("ЭтоНабор", СтруктураДанные.Номенклатура.ЭтоНабор);
	
	ДатаОбработки = ?(СтруктураДанные.Свойство("ДатаОбработки"), ДатаОбработки, ТекущаяДатаСеанса());
	НалогообложениеНДСОрганизации = НалогиУНФ.НалогообложениеНДС(СтруктураДанные.Организация,, ДатаОбработки);
	
	Если Не СтруктураДанные.Свойство("ЕстьПартииСНДС") Тогда
		СтруктураДанные.Вставить("ЕстьПартииСНДС", Ложь);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС")
		И (НЕ СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС")
		ИЛИ (НалогообложениеНДСОрганизации = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") И СтруктураДанные.ЕстьПартииСНДС)) Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС")
			ИЛИ (НалогообложениеНДСОрганизации = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") И СтруктураДанные.ЕстьПартииСНДС) Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли
	
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.ВидСтавкиНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(
			СтруктураДанные.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки),
			СтруктураДанные.ДатаОбработки, ТекущаяДатаСеанса())));
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(
			СтруктураДанные.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки),
			СтруктураДанные.ДатаОбработки, ТекущаяДатаСеанса())));
	КонецЕсли;
	
	// Характеристики
	СтруктураДанные.Вставить("ИспользоватьХарактеристики",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",Ложь);
	
	СтруктураДанные.Вставить("ЭтоУслуга", СтруктураДанные.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьХарактеристики
		Тогда
		ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура);
		
		Если Не ЗначенияПоУмолчанию = Неопределено
			Тогда
			ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
		КонецЕсли;
		
		Если Не СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика", ХарактеристикаПоУмолчанию);
		Иначе
			СтруктураДанные.Характеристика = ?(ЗначениеЗаполнено(СтруктураДанные.Характеристика),
				СтруктураДанные.Характеристика, ХарактеристикаПоУмолчанию);
		КонецЕсли;
		
		СтруктураДанные.Вставить("ИспользоватьХарактеристики", Истина);
		СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",
			СтруктураДанные.Номенклатура.ПроверятьЗаполнениеХарактеристики);
	КонецЕсли; 
	// Конец Характеристики
	
	Если СтруктураДанные.Свойство("ВидЦенКонтрагента") Тогда
		
		ЦенаПоступления = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦенКонтрагента(СтруктураДанные);
		СтруктураДанные.Вставить("ЦенаПоступления", ЦенаПоступления);
		
	Иначе
		
		СтруктураДанные.Вставить("ЦенаПоступления", 0);
		
	КонецЕсли;
	
	//Партии
	СтруктураДанные.Вставить("ИспользоватьПартии",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеПартий",Ложь);
	
	Если Не СтруктураДанные.Свойство("ТребуетсяИзменениеНалогообложениеНаСНДС") Тогда
		СтруктураДанные.Вставить("ТребуетсяИзменениеНалогообложениеНаСНДС", Ложь);
	КонецЕсли;
	
	Если НЕ СтруктураДанные.Свойство("КомиссияСНДС") Тогда
		СтруктураДанные.Вставить("КомиссияСНДС", Ложь);
	КонецЕсли;
	
	Если НЕ СтруктураДанные.Свойство("Партия") Тогда
		СтруктураДанные.Вставить("Партия", Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьПартии
		Тогда
		
		СтатусПартии = ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии");
		ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(
			СтруктураДанные.Номенклатура, СтатусПартии);
		
		ПартияПоУмолчанию = Справочники.ПартииНоменклатуры.ПустаяСсылка();
		
		Если Не ЗначенияПартииПоУмолчанию = Неопределено
			Тогда
			ПартияПоУмолчанию = ЗначенияПартииПоУмолчанию;
		КонецЕсли;
		
		СтруктураДанные.Партия = ?(ЗначениеЗаполнено(СтруктураДанные.Партия), СтруктураДанные.Партия, ПартияПоУмолчанию);
		
		СтруктураДанные.ПроверятьЗаполнениеПартий = СтруктураДанные.Номенклатура.ПроверятьЗаполнениеПартий;
		СтруктураДанные.ИспользоватьПартии = Истина;
		
		Если Не СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
			РаботаСКомиссионерамиКомитентамиСервер.СкорректироватьСтавкуНДСКомиссионногоТовара(СтруктураДанные);
		КонецЕсли;
		
		СтруктураДанные.КомиссияСНДС = СтруктураДанные.Партия.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		
	КонецЕсли;
	// Конец Партии
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьСерииНоменклатуры Тогда
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", СерииНоменклатурыУНФ.СтатусСерийНоменклатурыПриИзменении(СтруктураДанные));
	Иначе
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", 0);
	КонецЕсли;
	
	ГрузовыеТаможенныеДекларацииСервер.АвтоматическийПодборВКомиссииНомераГТДПринятого(СтруктураДанные);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ХарактеристикаПриИзменении.
//
Функция ПолучитьДанныеХарактеристикаПартияПриИзменении(СтруктураДанные)
	
	Если СтруктураДанные.Свойство("ВидЦенКонтрагента") Тогда
		
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
			
		Иначе
			
			СтруктураДанные.Вставить("Коэффициент", 1);
			
		КонецЕсли;
		
		СтруктураДанные.Вставить("ЦенаПоступления",
			ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦенКонтрагента(СтруктураДанные));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанные.СтранаПроисхождения) Тогда
		
		СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("НомерГТД", Неопределено);
	
	ГрузовыеТаможенныеДекларацииСервер.АвтоматическийПодборВКомиссииНомераГТДПринятого(СтруктураДанные);
	
	СтруктурнаяЕдиница = ?(СтруктураДанные.Свойство("СтруктурнаяЕдиница"), СтруктураДанные.СтруктурнаяЕдиница, Неопределено);
	НалогообложениеНДСОрганизации = НалогиУНФ.НалогообложениеНДС(СтруктураДанные.Организация,, СтруктураДанные.ДатаОбработки);
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС")
		И (НЕ СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС")
		ИЛИ НалогообложениеНДСОрганизации = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС")) Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС")
			ИЛИ НалогообложениеНДСОрганизации = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.ВидСтавкиНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Номенклатура.ВидСтавкиНДС));
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Организация.ВидСтавкиНДСПоУмолчанию));
	КонецЕсли;
	
	СтруктураДанные.Вставить("ТребуетсяИзменениеНалогообложениеНаСНДС", Ложь);
	СтруктураДанные.Вставить("КомиссияСНДС", СтруктураДанные.Партия.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС);
	РаботаСКомиссионерамиКомитентамиСервер.СкорректироватьСтавкуНДСКомиссионногоТовара(СтруктураДанные);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()	

&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено,
	ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура();
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
		
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе	
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()	

&НаСервере
Функция ДанныеКонтрагентаДляИзменения(Знач Дата, Знач ВалютаДокумента, Знач Контрагент, Знач Организация)

	ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПоДокументуКонтрагентуОрганизацииИВидуОперации(
		Объект.Ссылка, Контрагент, Организация);

	Результат = Новый Структура;

	Результат.Вставить("Договор", ДоговорПоУмолчанию);
	
	ДанныеДоговора = ДанныеДоговораДляИзменения(Дата, ДоговорПоУмолчанию);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат, ДанныеДоговора);
	
	Результат.Вставить("КонтактноеЛицоПодписант", Контрагент.КонтактноеЛицоПодписант);

	Если ПолучитьФункциональнуюОпцию("УчетПоПроектам") И ЗначениеЗаполнено(ДоговорПоУмолчанию) И НЕ ЗначениеЗаполнено(Объект.Проект) Тогда
		Результат.Вставить("Проект", Справочники.Проекты.ПолучитьПроектПоДоговору(ДоговорПоУмолчанию));
	КонецЕсли;
	
	УстановитьВидимостьДоговора();

	ОбновитьВидимостьИОстаткиВзаиморасчетов();

	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Функция ДанныеДоговораДляИзменения(Знач Дата, Знач Договор)

	Результат = Новый Структура;

	Результат.Вставить("ВалютаРасчетов", Договор.ВалютаРасчетов);
	Результат.Вставить("ВалютаРасчетовКурсКратность", РаботаСКурсамиВалют.ПолучитьКурсВалюты(Договор.ВалютаРасчетов,
		Дата));
	Результат.Вставить("ВидЦен", Договор.ВидЦен);
	Результат.Вставить("РасчетыВУсловныхЕдиницах", Договор.РасчетыВУсловныхЕдиницах);
	Результат.Вставить("ВидЦенКонтрагента", Договор.ВидЦенКонтрагента);
	Результат.Вставить("СуммаВключаетНДС", Неопределено);
	Если ЗначениеЗаполнено(Договор.ВидЦен) Тогда
		Результат.СуммаВключаетНДС = Договор.ВидЦен.ЦенаВключаетНДС;
	КонецЕсли;
		
	Результат.Вставить("УдержатьКомиссионноеВознаграждение", Договор.УдержатьКомиссионноеВознаграждение);
	Результат.Вставить("СпособРасчетаКомиссионногоВознаграждения", Договор.СпособРасчетаКомиссионногоВознаграждения);
	Результат.Вставить("ПроцентКомиссионногоВознаграждения", Договор.ПроцентКомиссионногоВознаграждения);

	Возврат Результат;

КонецФункции

&НаСервере
Процедура ЗаполнитьПредоплату(ТекущийОбъект)
	
	ТекущийОбъект.ЗаполнитьПредоплату();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС(НалогообложениеПередИзменением = Неопределено)
	
	Если НалогообложениеПередИзменением = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС 
		И Не Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС
		И РаботаСКомиссионерамиКомитентамиСервер.ВТабличнойЧастиЕстьКомиссионнаяПартияСНалогообложениемНДС(Объект) Тогда
		Объект.НалогообложениеНДС = НалогообложениеПередИзменением;
		СтрокаСообщения = НСтр("ru = 'В табличной части присутствует комиссионная номенклатура облагаемая НДС. Тип налогообложения НДС не изменен.'");
		ОбщегоНазначения.СообщитьПользователю(СтрокаСообщения);
		Возврат;
	КонецЕсли;
	
	НалогообложениеНДСОрганизации = НалогиУНФ.НалогообложениеНДС(Объект.Организация,, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
	ОрганизацияБезНДС = НалогообложениеНДСОрганизации = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС;

	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда

		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		Элементы.ЗапасыСуммаНДСПоступления.Видимость = Истина;
		Элементы.СчетФактураНадпись.Видимость = Истина;

		Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл

			Партия = СтрокаТабличнойЧасти.Партия;
			Если ОрганизацияБезНДС Тогда
				
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.БезНДС);
				
				Если ЗначениеЗаполнено(Партия) И Партия.Статус = Перечисления.СтатусыПартий.ТоварыНаКомиссии 
					И Партия.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
					
					Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС) Тогда
						СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
					Иначе
						СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				Если ЗначениеЗаполнено(Партия) И Партия.Статус = Перечисления.СтатусыПартий.ТоварыНаКомиссии 
					И Партия.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
					
					СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.БезНДС);;
				Иначе
					
					Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС) Тогда
						СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
					Иначе
						СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;

			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.Сумма
				- (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100), СтрокаТабличнойЧасти.Сумма * СтавкаНДС
				/ 100);

			СтрокаТабличнойЧасти.СуммаНДСПоступления = ?(Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаПоступления
				- (СтрокаТабличнойЧасти.СуммаПоступления) / ((СтавкаНДС + 100) / 100),
				СтрокаТабличнойЧасти.СуммаПоступления * СтавкаНДС / 100);

			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0,
				СтрокаТабличнойЧасти.СуммаНДС);

		КонецЦикла;

	Иначе

		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДСПоступления.Видимость = Ложь;

		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			Элементы.СчетФактураНадпись.Видимость = Ложь;
		Иначе
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
			Элементы.СчетФактураНадпись.Видимость = Истина;
		КонецЕсли;

		Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл

			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			СтрокаТабличнойЧасти.СуммаНДСПоступления = 0;
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)

	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);

	СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.Сумма
		- (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100), СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);

КонецПроцедуры // РассчитатьСуммуНДС() 

&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	КонецЕсли;
	
	// Сумма.
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Серии номенклатуры
	Если ИспользоватьСерииНоменклатурыОстатки<>Неопределено Тогда
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСерииНоменклатурыКоличество(Объект, СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()	

// Рассчитывает комиссионное вознаграждение в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - ДанныеФормыЭлементКоллекции - строка табличной части документа
//
&НаКлиенте
Процедура РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти)

	Если Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение(
		"Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") Тогда

	ИначеЕсли Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение(
		"Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи") Тогда

		СтрокаТабличнойЧасти.СуммаВознаграждения = Объект.ПроцентКомиссионногоВознаграждения
			* СтрокаТабличнойЧасти.Сумма / 100;

	ИначеЕсли Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение(
		"Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления") Тогда

		СтрокаТабличнойЧасти.СуммаВознаграждения = Объект.ПроцентКомиссионногоВознаграждения
			* (СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаПоступления) / 100;

	Иначе

		СтрокаТабличнойЧасти.СуммаВознаграждения = 0;

	КонецЕсли;

	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДСВознаграждения);

	СтрокаТабличнойЧасти.СуммаНДСВознаграждения = ?(Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаВознаграждения
		- (СтрокаТабличнойЧасти.СуммаВознаграждения) / ((СтавкаНДС + 100) / 100),
		СтрокаТабличнойЧасти.СуммаВознаграждения * СтавкаНДС / 100);

КонецПроцедуры // РассчитатьКомиссионноеВознаграждение()

// Выполняет пересчет цены по валюте табличной части документа после изменений в форме "Цены и валюта".
//
// Параметры:
//  ПредыдущаяВалюта - СправочникСсылка.Валюты - ссылка на предыдущую валюту.
//
&НаКлиенте
Процедура ПересчитатьЦеныПоступленияТабличнойЧастиПоВалюте(ФормаДокумента, ПредыдущаяВалюта, ИмяТабличнойЧасти,
	КурсПересчетаЦен = Неопределено)

	СтруктураКурсы = ЦенообразованиеСервер.ПолучитьКурсыВалют(ПредыдущаяВалюта,
		ФормаДокумента.Объект.ВалютаДокумента, ФормаДокумента.Объект.Дата);

	Если КурсПересчетаЦен <> Неопределено И КурсПересчетаЦен.Свойство("Курс") И КурсПересчетаЦен.Свойство("Кратность") Тогда
		Если ПредыдущаяВалюта = УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту() Тогда
			СтруктураКурсы.Курс = ?(КурсПересчетаЦен.Курс = 0, 1, КурсПересчетаЦен.Курс);
			СтруктураКурсы.Кратность = ?(КурсПересчетаЦен.Кратность = 0, 1, КурсПересчетаЦен.Кратность);
		Иначе
			СтруктураКурсы.КурсНач = ?(КурсПересчетаЦен.Курс = 0, 1, КурсПересчетаЦен.Курс);
			СтруктураКурсы.КратностьНач = ?(КурсПересчетаЦен.Кратность = 0, 1, КурсПересчетаЦен.Кратность);
		КонецЕсли;
	КонецЕсли;

	Для Каждого СтрокаТабличнойЧасти Из ФормаДокумента.Объект[ИмяТабличнойЧасти] Цикл
		
		// Цена.
		Если СтрокаТабличнойЧасти.Свойство("ЦенаПоступления") Тогда

			СтрокаТабличнойЧасти.ЦенаПоступления = ВалютыУНФКлиентСервер.Пересчитать(
				СтрокаТабличнойЧасти.ЦенаПоступления, СтруктураКурсы.КурсНач, СтруктураКурсы.Курс,
				СтруктураКурсы.КратностьНач, СтруктураКурсы.Кратность);
			СтрокаТабличнойЧасти.СуммаПоступления = СтрокаТабличнойЧасти.Количество
				* СтрокаТабличнойЧасти.ЦенаПоступления;

			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);

			СтрокаТабличнойЧасти.СуммаНДСПоступления = ?(Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаПоступления
				- (СтрокаТабличнойЧасти.СуммаПоступления) / ((СтавкаНДС + 100) / 100),
				СтрокаТабличнойЧасти.СуммаПоступления * СтавкаНДС / 100);
		// Сумма.	
		ИначеЕсли СтрокаТабличнойЧасти.Свойство("СуммаПоступления") Тогда

			СтрокаТабличнойЧасти.СуммаПоступления = ВалютыУНФКлиентСервер.Пересчитать(
				СтрокаТабличнойЧасти.СуммаПоступления, СтруктураКурсы.КурсНач, СтруктураКурсы.Курс,
				СтруктураКурсы.КратностьНач, СтруктураКурсы.Кратность);

			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);

			СтрокаТабличнойЧасти.СуммаНДСПоступления = ?(ФормаДокумента.Объект.СуммаВключаетНДС,
				СтрокаТабличнойЧасти.СуммаПоступления - (СтрокаТабличнойЧасти.СуммаПоступления) / ((СтавкаНДС + 100)
				/ 100), СтрокаТабличнойЧасти.СуммаПоступления * СтавкаНДС / 100);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПересчитатьЦеныПоступленияТабличнойЧастиПоВалюте()

// Выполняем пересчет цены по флагу СуммаВключаетНДС табличной части документа после изменений в форме 
// "Цены и валюта".
//
// Параметры:
//  ПредыдущаяВалюта - СправочникСсылка.Валюты, содержит ссылку на предыдущую
//                 валюту.
//
&НаКлиенте
Процедура ПересчитаемСуммуПоступленияТабличнойЧастиПоФлагуСуммаВключаетНДС(ФормаДокумента, ИмяТабличнойЧасти)

	Для Каждого СтрокаТабличнойЧасти Из ФормаДокумента.Объект[ИмяТабличнойЧасти] Цикл

		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);

		Если СтрокаТабличнойЧасти.Свойство("ЦенаПоступления") Тогда
			Если ФормаДокумента.Объект.СуммаВключаетНДС Тогда
				СтрокаТабличнойЧасти.ЦенаПоступления = (СтрокаТабличнойЧасти.ЦенаПоступления * (100 + СтавкаНДС)) / 100;
			Иначе
				СтрокаТабличнойЧасти.ЦенаПоступления = (СтрокаТабличнойЧасти.ЦенаПоступления * 100) / (100 + СтавкаНДС);
			КонецЕсли;
		КонецЕсли;

		СтрокаТабличнойЧасти.СуммаПоступления = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаПоступления;

		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);

		СтрокаТабличнойЧасти.СуммаНДСПоступления = ?(Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаПоступления
			- (СтрокаТабличнойЧасти.СуммаПоступления) / ((СтавкаНДС + 100) / 100),
			СтрокаТабличнойЧасти.СуммаПоступления * СтавкаНДС / 100);

	КонецЦикла;

КонецПроцедуры // ПересчитаемСуммуПоступленияТабличнойЧастиПоФлагуСуммаВключаетНДС()

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь,
	ПерезаполнитьЦены = Ложь, ТекстПредупреждения = "")

	ПараметрыРедактированияЦеныИВалюты = ЦеныИВалютаКлиентСервер.НовыеПараметрыФормыЦеныИВалюта(Объект, ТолькоПросмотр,
		Компания, ПерезаполнитьЦены, ПересчитатьЦены, ТекстПредупреждения);
		
	Если Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") 
		И Элементы.ЗапасыПартия.Видимость Тогда
		РаботаСНоменклатуройКлиентУНФ.ДополнитьСтруктуруВызоваФормыЦеныИВалютыМассивомПартийНоменклатуры(Объект.Запасы, ПараметрыРедактированияЦеныИВалюты);
	КонецЕсли;

	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуЦеныИВалютаЗавершение", ЭтотОбъект,
		Новый Структура("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением));
	ОткрытьФорму("ОбщаяФорма.ЦеныИВалюта", ПараметрыРедактированияЦеныИВалюты, ЭтотОбъект, , , , ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

// ПодключаемоеОборудование
// Процедура получает данные по штрихкодам.
//
&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	// Преобразование весовых штрихкодов.
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодамВМассиве(
		СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		МассивДанныхШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если МассивДанныхШтрихкода <> Неопределено
			И МассивДанныхШтрихкода.Количество() <> 0 Тогда
			
			Для Каждого ДанныеШтрихкода Из МассивДанныхШтрихкода Цикл
				
				СтруктураДанныеНоменклатуры = Новый Структура();
				СтруктураДанныеНоменклатуры.Вставить("Организация", СтруктураДанные.Организация);
				СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
				СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
				СтруктураДанныеНоменклатуры.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
				СтруктураДанныеНоменклатуры.Вставить("Партия", ДанныеШтрихкода.Партия);
				СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", СтруктураДанные.НалогообложениеНДС);
				СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", СтруктураДанные.Дата);
				Если ЗначениеЗаполнено(СтруктураДанные.ВидЦенКонтрагента) Тогда
					СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", СтруктураДанные.ВалютаДокумента);
					СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", СтруктураДанные.СуммаВключаетНДС);
					СтруктураДанныеНоменклатуры.Вставить("ВидЦенКонтрагента", СтруктураДанные.ВидЦенКонтрагента);
					Если ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения)
						И ТипЗнч(ДанныеШтрихкода.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
						СтруктураДанныеНоменклатуры.Вставить("Коэффициент", ДанныеШтрихкода.ЕдиницаИзмерения.Коэффициент);
					Иначе
						СтруктураДанныеНоменклатуры.Вставить("Коэффициент", 1);
					КонецЕсли;
				КонецЕсли;
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтруктураДанные, "ЭтоНовыйОбъект") Тогда
					СтруктураДанныеНоменклатуры.Вставить("ЭтоНовыйОбъект", СтруктураДанные.ЭтоНовыйОбъект);
				КонецЕсли;
				
				СтруктураДанныеНоменклатуры.Вставить("ЕстьПартииСНДС", СтруктураДанные.ЕстьПартииСНДС);
				
				ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
				
				Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
					ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	Для каждого парам Из Метаданные.Документы.ОтчетКомитенту.ТабличныеЧасти.Запасы.Реквизиты.Номенклатура.ПараметрыВыбора Цикл
		Если парам.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(парам.Значение)=Тип("ФиксированныйМассив") Тогда
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", парам.Значение);
			Иначе
			    МассивТипов = Новый Массив;
				МассивТипов.Добавить(парам.Значение);
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("ВидЦенКонтрагента", Объект.ВидЦенКонтрагента);
	СтруктураДанные.Вставить("Дата", Объект.Дата);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	
	СтруктураПоискаПартииСНДС = Новый Структура("КомиссияСНДС", Истина);
	ЕстьПартииСНДС = Объект.Запасы.НайтиСтроки(СтруктураПоискаПартииСНДС).Количество() > 0;
	СтруктураДанные.Вставить("ЕстьПартииСНДС", ЕстьПартииСНДС);
	
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода.Количество() > 1 Тогда
			
			ПараметрыОткрытия = Новый Структура("МассивНоменклатуры, ТекШтрихкод", ДанныеШтрихкода, ТекШтрихкод);
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоДаннымШтрихкодовЗавершение", ЭтотОбъект, Новый Структура("СтруктураДанные",СтруктураДанные));
			
			ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ДублиНоменклатурыПоШтрихКодам", ПараметрыОткрытия, ЭтаФорма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Продолжить;
		КонецЕсли;
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено 
			ИЛИ ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Штрихкод", ТекШтрихкод.Штрихкод);
			ПараметрыОтбора.Вставить("Номенклатура", ДанныеШтрихкода[0].Номенклатура);
			ПараметрыОтбора.Вставить("ТипНоменклатуры", ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры);
			ПараметрыОтбора.Вставить("ЭтоНабор", ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ЭтоНабор);
			ШтрихкодыНекорректногоТипа.Добавить(ПараметрыОтбора);
		Иначе
			
			ДанныеШтрихкода = ДанныеШтрихкода[0];
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
			ПараметрыОтбора.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			ПараметрыОтбора.Вставить("Партия", ДанныеШтрихкода.Партия);
			ПараметрыОтбора.Вставить("ЕдиницаИзмерения", ДанныеШтрихкода.ЕдиницаИзмерения);
			
			МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(ПараметрыОтбора);
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				НоваяСтрока = Объект.Запасы.Добавить();
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				НоваяСтрока.ЦенаПоступления = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЦенаПоступления;
				НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
				НоваяСтрока.СуммаПоступления = НоваяСтрока.Количество * НоваяСтрока.ЦенаПоступления;
				
				ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("СтранаПроисхождения", НоваяСтрока.СтранаПроисхождения);
				ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("НомерГТД", НоваяСтрока.НомерГТД);
				
				СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
				НоваяСтрока.СуммаНДСПоступления = ?(
					Объект.СуммаВключаетНДС,
					НоваяСтрока.СуммаПоступления
					- (НоваяСтрока.СуммаПоступления)
					/ ((СтавкаНДС + 100)
					/ 100),
					НоваяСтрока.СуммаПоступления
					*
					СтавкаНДС
					/ 100);
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
				РассчитатьКомиссионноеВознаграждение(НоваяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				
				Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
					Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС");
					ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
					ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,УчетВалютныхОпераций);
					ТребуетсяИзменениеНалогообложениеНаСНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТребуетсяИзменениеНалогообложениеНаСНДС;
					РаботаСНоменклатуройКлиентУНФ.ВывестиОповещениеПользователяОбИзмененииРежимаНалогообложенияНаСДНС(ТребуетсяИзменениеНалогообложениеНаСНДС);
				КонецЕсли;
				
			Иначе
				НоваяСтрока = МассивСтрокТЧ[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
				РассчитатьКомиссионноеВознаграждение(НоваяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
			Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
				СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаКлиенте
Процедура ЗаполнитьПоДаннымШтрихкодовЗавершение(СтруктураНоменклатуры, Параметры) Экспорт
	
	Если СтруктураНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеШтрихкода = СтруктураНоменклатуры.МассивНоменклатуры[0];
	ТекШтрихкод = СтруктураНоменклатуры.ТекШтрихкод;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	СтруктураДанные = Параметры.СтруктураДанные;
	
	Если СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры)
		= Неопределено Или ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
			ОписаниеШтрихкода = Новый Структура;
			ОписаниеШтрихкода.Вставить("Штрихкод", ТекШтрихкод.Штрихкод);
			ОписаниеШтрихкода.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
			ОписаниеШтрихкода.Вставить("ТипНоменклатуры", ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры);
			ОписаниеШтрихкода.Вставить("ЭтоНабор", ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор);
			ШтрихкодыНекорректногоТипа.Добавить(ОписаниеШтрихкода);
		Иначе
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
			ПараметрыОтбора.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			ПараметрыОтбора.Вставить("Партия", ДанныеШтрихкода.Партия);
			ПараметрыОтбора.Вставить("ЕдиницаИзмерения", ДанныеШтрихкода.ЕдиницаИзмерения);
			
			МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(ПараметрыОтбора);
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				НоваяСтрока = Объект.Запасы.Добавить();
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				НоваяСтрока.ЦенаПоступления = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЦенаПоступления;
				НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
				НоваяСтрока.СуммаПоступления = НоваяСтрока.Количество * НоваяСтрока.ЦенаПоступления;
				
				ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("СтранаПроисхождения", НоваяСтрока.СтранаПроисхождения);
				ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("НомерГТД", НоваяСтрока.НомерГТД);
				
				СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
				НоваяСтрока.СуммаНДСПоступления = ?(
					Объект.СуммаВключаетНДС,
					НоваяСтрока.СуммаПоступления
					- (НоваяСтрока.СуммаПоступления)
					/ ((СтавкаНДС + 100)
					/ 100),
					НоваяСтрока.СуммаПоступления
					*
					СтавкаНДС
					/ 100);
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
				РассчитатьКомиссионноеВознаграждение(НоваяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Иначе
				НоваяСтрока = МассивСтрокТЧ[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
				РассчитатьКомиссионноеВознаграждение(НоваяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
			Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
				СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
			КонецЕсли;
			
		КонецЕсли;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

// Процедура обрабатывает полученные штрихкоды.
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов) Экспорт
	
	Модифицированность = Истина;
	
	НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов);
	НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект,,,,Оповещение);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = СтрШаблон(НСтр("ru = 'Данные по штрихкоду не найдены: %1; количество: %2'"),
			ТекНеизвестныйШтрихкод.Штрихкод, ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияХарактеристик()
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		Если ТекНекорректныйШтрихкод.Свойство("ЭтоНабор") И ТекНекорректныйШтрихкод.ЭтоНабор Тогда
			// Наборы
			ТипНоменклатуры = НСтр("ru = 'Набор'");
		Иначе
			ТипНоменклатуры = ТекНекорректныйШтрихкод.ТипНоменклатуры;
		КонецЕсли; 
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Найденная по штрихкоду %1 номенклатура -%2- имеет тип %3, который не подходит для этой табличной части'"),
			ТекНекорректныйШтрихкод.Штрихкод, ТекНекорректныйШтрихкод.Номенклатура, ТипНоменклатуры);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЦикла;
	
КонецПроцедуры
// Конец ПодключаемоеОборудование

// Процедура вызывает обработку заполнения документа по основанию.
//
&НаСервере
Процедура ЗаполнитьПоОснованию(Основание)
	
	Документ = РеквизитФормыВЗначение("Объект");
	
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.Контрагенты") Тогда
	
		// Добавим в структуру заполнения реквизиты, которые уже 
		// указаны в документе
		ДанныеЗаполнения = Новый Структура();
		ДанныеЗаполнения.Вставить("Контрагент",  Основание);
		ДанныеЗаполнения.Вставить("Договор", 	 Объект.Договор);
		ДанныеЗаполнения.Вставить("Организация", Объект.Организация);
		ДанныеЗаполнения.Вставить("ВидЦенКонтрагента", Объект.ВидЦенКонтрагента);
		Документ.Заполнить(ДанныеЗаполнения);
		
	Иначе
		
		Документ.Заполнить(Основание);
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		
    Иначе
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры // ЗаполнитьПоДокументу()

// Процедура устанавливает видимость договора в зависимости от установленного параметра контрагенту.
//
&НаСервере
Процедура УстановитьВидимостьДоговора()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ПараметрыРасчетовСКонтрагентом = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Контрагент, "ВестиРасчетыПоЗаказам, ВестиРасчетыПоДоговорам");
		
		КонтрагентВестиРасчетыПоЗаказам = ПараметрыРасчетовСКонтрагентом.ВестиРасчетыПоЗаказам;
		Элементы.Договор.Видимость = ПараметрыРасчетовСКонтрагентом.ВестиРасчетыПоДоговорам;
		
	Иначе
		
		КонтрагентВестиРасчетыПоЗаказам = Ложь;
		Элементы.Договор.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьДоговора()

// Получает структуру параметров формы выбора договора контрагента.
//
&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбора(Документ, Организация, Контрагент, Договор)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Выполняет действия при изменении договора контрагента.
//
&НаКлиенте
Процедура ОбработатьИзменениеДоговора(ДанныеДоговора = Неопределено)
	
	ДоговорПередИзменением = Договор;
	Договор = Объект.Договор;
	
	Если ДоговорПередИзменением <> Объект.Договор Тогда
		
		ПараметрыДокумента = Новый Структура;
		Если ДанныеДоговора = Неопределено Тогда
			
			ДанныеДоговора = ДанныеДоговораДляИзменения(ДатаДокумента, Объект.Договор);
			
		Иначе
			
			ПараметрыДокумента.Вставить("КонтрагентВестиРасчетыПоЗаказамПередИзменением",
				ДанныеДоговора.КонтрагентВестиРасчетыПоЗаказамПередИзменением);
			ПараметрыДокумента.Вставить("КонтрагентПередИзменением", ДанныеДоговора.КонтрагентПередИзменением);
			
		КонецЕсли;
		
		ПечатьДокументовУНФКлиент.ПриИзмененииДоговораКонтрагента(Объект.Договор, Объект.ОснованиеПечатиСсылка,
			Объект.ОснованиеПечати, КэшЗначений);
		
		ВопросПредоплата = (Объект.Предоплата.Количество() > 0 И Объект.Договор <> ДоговорПередИзменением);
		
		ИзменилсяВидЦен = Объект.ВидЦенКонтрагента <> ДанныеДоговора.ВидЦенКонтрагента И ЗначениеЗаполнено(
			ДанныеДоговора.ВидЦенКонтрагента);
		ВопросВидЦенКонтрагента = (ЗначениеЗаполнено(Объект.Договор) И ИзменилсяВидЦен);
		
		ВалютаРасчетовПередИзменением = ВалютаРасчетов;
		ВалютаРасчетов = ДанныеДоговора.ВалютаРасчетов;
		
		Объект.УдержатьКомиссионноеВознаграждение = ДанныеДоговора.УдержатьКомиссионноеВознаграждение;
		Объект.СпособРасчетаКомиссионногоВознаграждения = ДанныеДоговора.СпособРасчетаКомиссионногоВознаграждения;
		Объект.ПроцентКомиссионногоВознаграждения = ДанныеДоговора.ПроцентКомиссионногоВознаграждения;
		
		НовыйДоговорИВалютаРасчетов = ЗначениеЗаполнено(Объект.Договор) И ЗначениеЗаполнено(ВалютаРасчетов) 
			И Объект.Договор <> ДоговорПередИзменением И ВалютаРасчетовПередИзменением <> ДанныеДоговора.ВалютаРасчетов;
		ОткрытьФормуЦеныИВалюты = НовыйДоговорИВалютаРасчетов И Объект.ВалютаДокумента <> ДанныеДоговора.ВалютаРасчетов
			И Объект.Запасы.Количество() > 0;
		
		ПараметрыДокумента.Вставить("ДоговорПередИзменением", ДоговорПередИзменением);
		ПараметрыДокумента.Вставить("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением);
		ПараметрыДокумента.Вставить("ДанныеДоговора", ДанныеДоговора);
		ПараметрыДокумента.Вставить("ИзменилсяВидЦен", ИзменилсяВидЦен);
		ПараметрыДокумента.Вставить("ВопросВидЦенКонтрагента", ВопросВидЦенКонтрагента);
		ПараметрыДокумента.Вставить("ОткрытьФормуЦеныИВалюты", ОткрытьФормуЦеныИВалюты);
		ПараметрыДокумента.Вставить("ВидимостьДоговораПередИзменением", Элементы.Договор.Видимость);
		
		Если ВопросПредоплата = Истина Тогда
			
			ТекстВопроса = НСтр("ru = 'Зачет предоплаты будет очищен, продолжить?'");
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОпределитьНеобходимостьОбновитьЗачетыАванса", ЭтотОбъект, ПараметрыДокумента);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			ОбработатьИзменениеВидаЦенКонтрагентовИВалютыРасчетов(ПараметрыДокумента);
			
		КонецЕсли;
		
		УстановитьВидимостьИДоступность(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьИОстаткиВзаиморасчетов()
	
	Элементы.ОстатокВзаиморасчетов.Видимость = НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.Контрагент.МаксимальнаяШирина = ?(Элементы.ОстатокВзаиморасчетов.Видимость, 18, 36);
	
	Если НЕ Элементы.ОстатокВзаиморасчетов.Видимость Тогда
		// Только для новых объектов
		Возврат;
	КонецЕсли;
	
	Элементы.ОстатокВзаиморасчетов.Заголовок = РаботаСКонтрагентамиУНФ.ЗаголовокНадписиВзаиморасчетов(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокВзаиморасчетовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСФормойДокументаКлиент.ОткрытьОтчетВзаиморасчетыСКонтрагентом(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРеквизитыПечати()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзмененияРеквизитовПечати", ЭтотОбъект);
	ОткрытьФорму("Обработка.РеквизитыПечати.Форма.РеквизитыПечатиОтчетКомитенту", Новый Структура("КонтекстПечати", Объект), ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакУслугиВТабличнойЧасти()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&Номенклатура)";
	
	Запрос.УстановитьПараметр("Номенклатура", Объект.Запасы.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	
	ТипыНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы Из Объект.Запасы Цикл
		
		СтрокаСТипом = ТипыНоменклатуры.Найти(СтрокаТаблицы.Номенклатура);
		
		Если СтрокаСТипом <> Неопределено Тогда
			
			СтрокаТаблицы.ЭтоУслуга = СтрокаСТипом.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНастройкиИзмененияКоличества()
	
	НастройкиКоличества = ДокументыУНФКлиентСервер.ПараметрыСбросаКоличества();
	ДокументыУНФ.ЗаполнитьНастройкиКоличества(НастройкиКоличества);
	Возврат НастройкиКоличества;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

// Процедура-обработчик результата открытия формы "Цены и валюты"
//
&НаКлиенте
Процедура ОткрытьФормуЦеныИВалютаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РезультатЗакрытия.БылиВнесеныИзменения Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ВалютаДокумента = РезультатЗакрытия.ВалютаДокумента;
	Объект.Курс = РезультатЗакрытия.КурсРасчетов;
	Объект.Кратность = РезультатЗакрытия.КратностьРасчетов;
	Объект.НалогообложениеНДС = РезультатЗакрытия.НалогообложениеНДС;
	Объект.СуммаВключаетНДС = РезультатЗакрытия.СуммаВключаетНДС;
	Объект.НДСВключатьВСтоимость = РезультатЗакрытия.НДСВключатьВСтоимость;
	Объект.ВидЦенКонтрагента = РезультатЗакрытия.ВидЦенКонтрагента;
	
	// Пересчитываем цены по виду цен.
	Если РезультатЗакрытия.ПерезаполнитьЦены Тогда
		ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенКонтрагента(ЭтотОбъект, "Запасы")
	КонецЕсли;
	
	// Пересчитываем цены по валюте.
	Если Не РезультатЗакрытия.ПерезаполнитьЦены И РезультатЗакрытия.ПересчитатьЦены Тогда
		ЦенообразованиеКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтотОбъект,
			ДополнительныеПараметры.ВалютаРасчетовПередИзменением, "Запасы", РезультатЗакрытия.КурсПересчетаЦен);
		ПересчитатьЦеныПоступленияТабличнойЧастиПоВалюте(ЭтотОбъект,
			ДополнительныеПараметры.ВалютаРасчетовПередИзменением, "Запасы", РезультатЗакрытия.КурсПересчетаЦен);
	КонецЕсли;
	
	// Пересчитываем сумму если изменился признак Налогообложение НДС.
	Если РезультатЗакрытия.НалогообложениеНДС <> РезультатЗакрытия.ПредНалогообложениеНДС Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	КонецЕсли;
	
	// Пересчитываем сумму если изменился признак "Сумма включает НДС".
	Если НЕ РезультатЗакрытия.ПерезаполнитьЦены
		И НЕ РезультатЗакрытия.СуммаВключаетНДС = РезультатЗакрытия.ПредСуммаВключаетНДС Тогда
		ЦенообразованиеКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтотОбъект, "Запасы");
		ПересчитаемСуммуПоступленияТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтотОбъект, "Запасы");
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		// Сумма вознаграждения.
		РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
		
		СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
			СтрокаТабличнойЧасти.СуммаРасчетов,
			СтрокаТабличнойЧасти.Курс,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
			СтрокаТабличнойЧасти.Кратность,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КратностьНациональнаяВалюта, Объект.Кратность));
			
		КонецЦикла;
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	
КонецПроцедуры // ОткрытьФормуЦеныИВалютаЗавершение()

// Процедура-обработчик ответа на вопрос о повторном зачете авансов
//
&НаКлиенте
Процедура ОпределитьНеобходимостьОбновитьЗачетыАванса(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		
		Объект.Предоплата.Очистить();
		ОбработатьИзменениеВидаЦенКонтрагентовИВалютыРасчетов(ДополнительныеПараметры);
		
	Иначе
		
		Объект.Договор = ДополнительныеПараметры.ДоговорПередИзменением;
		Договор = ДополнительныеПараметры.ДоговорПередИзменением;
		
		Если ДополнительныеПараметры.Свойство("КонтрагентПередИзменением") Тогда
			
			Объект.Контрагент = ДополнительныеПараметры.КонтрагентПередИзменением;
			Контрагент = ДополнительныеПараметры.КонтрагентПередИзменением;
			КонтрагентВестиРасчетыПоЗаказам = ДополнительныеПараметры.КонтрагентВестиРасчетыПоЗаказамПередИзменением;
			Элементы.Договор.Видимость = ДополнительныеПараметры.ВидимостьДоговораПередИзменением;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьНеобходимостьОбновитьЗачетАванса()

// Процедура-обработчик ответа на вопрос о пересчете документа по данным договора
//
&НаКлиенте
Процедура ОпределитьНеобходимостьПересчетаДокументаПоУсловиямДоговора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		
		ДанныеДоговора = ДополнительныеПараметры.ДанныеДоговора;
		
		Объект.ВидЦенКонтрагента = ДанныеДоговора.ВидЦенКонтрагента;
		ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
			УчетВалютныхОпераций);
		
		// Пересчитываем цены по виду цен.
		Если Объект.Запасы.Количество() > 0 Тогда
			
			ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенКонтрагента(ЭтотОбъект, "Запасы");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьНеобходимостьПересчетаДокументаПоУсловиямДоговора()

#КонецОбласти

#Область РаботаСПодбором

// Процедура - обработчик события Действие команды Подбор
//
&НаКлиенте
Процедура Подбор(Команда)
	
	ИмяТабличнойЧасти 	= "Запасы";
	
	СтруктураПоискаПартииСНДС = Новый Структура("КомиссияСНДС", Истина);
	ЕстьПартииСНДС = Объект.Запасы.НайтиСтроки(СтруктураПоискаПартииСНДС).Количество() > 0;
	ПараметрыПодбора = Новый Структура("ЕстьПартииСНДС, ПолностьюОбновить", ЕстьПартииСНДС, Истина);
	
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти, ПараметрыПодбора);
	
КонецПроцедуры // ПодборВыполнить()

// Процедура - обработчик события Действие команды Подбор по продажам.
//
&НаКлиенте
Процедура ПодборПоПродажам(Команда)
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Организация"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Организация", , Отказ);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Контрагент"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Контрагент", , Отказ);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Договор"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Договор", , Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Компания", Компания);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыПодбора.Вставить("Договор", Объект.Договор);
	ПараметрыПодбора.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("ВидЦенКонтрагента", Объект.ВидЦенКонтрагента);
	ПараметрыПодбора.Вставить("ДатаДокумента", Объект.Дата);
	ПараметрыПодбора.Вставить("ТекущийДокумент", Объект.Ссылка);
	
	ОткрытьФорму("Документ.ОтчетКомитенту.Форма.ФормаПодбораПоПродажам", ПараметрыПодбора, ЭтотОбъект);
	
КонецПроцедуры // ПодборПоПродажам()

// Функция получает список товаров из временного хранилища
//
&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		Если НоваяСтрока.Свойство("Пометка") Тогда
			НоваяСтрока.Пометка = Истина;
		КонецЕсли;
		НоваяСтрока.ЦенаПоступления 	= СтрокаЗагрузки.Цена;
		НоваяСтрока.СуммаПоступления 	= СтрокаЗагрузки.Сумма;
		НоваяСтрока.СуммаНДСПоступления = СтрокаЗагрузки.СуммаНДС;
		
		СтрокаЗагрузки.Цена 	= 0;
		СтрокаЗагрузки.Сумма 	= 0;
		СтрокаЗагрузки.СуммаНДС = 0;
		СтрокаЗагрузки.Всего 	= 0;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
		//Характеристики
		СтруктураДанныеНоменклатуры = Новый Структура();
		СтруктураДанныеНоменклатуры.Вставить("Номенклатура", СтрокаЗагрузки.Номенклатура);
		СтруктураДанныеНоменклатуры.Вставить("Характеристика", СтрокаЗагрузки.Характеристика);
		СтруктураДанныеНоменклатуры.Вставить("Партия", СтрокаЗагрузки.Партия);
		СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
		СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
		
		СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанныеНоменклатуры);
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
		
		НоваяСтрока.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
		НоваяСтрока.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
		НоваяСтрока.ЗаполнениеХарактеристикиПроверено = Истина;
		
		Если СтруктураДанные.ИспользоватьХарактеристики
			Тогда
			НоваяСтрока.Характеристика = СтруктураДанные.Характеристика;
		КонецЕсли;
		// Конец Характеристики
		
		//Партии
		НоваяСтрока.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
		НоваяСтрока.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
		НоваяСтрока.КомиссияСНДС = СтруктураДанные.КомиссияСНДС;
		
		НоваяСтрока.Партия = ?(ЗначениеЗаполнено(СтрокаЗагрузки.Партия), СтрокаЗагрузки.Партия, СтруктураДанные.Партия);
		// Конец Партии
		
		НоваяСтрока.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
		ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект[ИмяТабличнойЧасти], НоваяСтрока, "КлючСвязи");
		
		НоваяСтрока.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
		НоваяСтрока.НомерГТД = СтруктураДанные.НомерГТД;
		
		Если СтруктураДанные.Свойство("ЭтоУслуга") Тогда
			НоваяСтрока.ЭтоУслуга = СтруктураДанные.ЭтоУслуга;
		КонецЕсли;
		
		Если СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
			Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
			ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, Объект.Курс, КурсНациональнаяВалюта, УчетВалютныхОпераций);
			ТребуетсяИзменениеНалогообложениеНаСНДС = СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

// Функция получает список запасов принятых из временного хранилища
//
&НаСервере
Процедура ПолучитьЗапасыПринятыеИзХранилища(АдресЗапасовПринятыхВХранилище)
	
	ЗапасыПринятые = ПолучитьИзВременногоХранилища(АдресЗапасовПринятыхВХранилище);
	
	Для каждого СтрокаТабличнойЧасти Из ЗапасыПринятые Цикл
		
		НоваяСтрока = Объект.Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		СтруктураДанные.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
		СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		НоваяСтрока.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		НоваяСтрока.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		
		Если СтрокаТабличнойЧасти.Количество > СтрокаТабличнойЧасти.Остаток
			ИЛИ СтрокаТабличнойЧасти.Количество = 0 Тогда
			НоваяСтрока.Цена = 0;
			НоваяСтрока.Сумма = 0;
			НоваяСтрока.ЦенаПоступления = 0;
		ИначеЕсли СтрокаТабличнойЧасти.Количество < СтрокаТабличнойЧасти.Остаток Тогда
			НоваяСтрока.Сумма = НоваяСтрока.Цена * НоваяСтрока.Количество;
		КонецЕсли;
		НоваяСтрока.СуммаПоступления = НоваяСтрока.ЦенаПоступления * НоваяСтрока.Количество;
		
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
		
		НоваяСтрока.СуммаНДС = ?(Объект.СуммаВключаетНДС,
								НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((СтавкаНДС + 100) / 100),
								НоваяСтрока.Сумма * СтавкаНДС / 100);
		
		НоваяСтрока.Всего = СтрокаТабличнойЧасти.Сумма + 
			?(Объект.СуммаВключаетНДС ИЛИ ЗапасыПринятые.Колонки.Найти("СуммаНДС")=Неопределено, 0, СтрокаТабличнойЧасти.СуммаНДС);

		
		НоваяСтрока.СуммаНДСПоступления = ?(Объект.СуммаВключаетНДС,
											НоваяСтрока.СуммаПоступления - (НоваяСтрока.СуммаПоступления) / ((СтавкаНДС + 100) / 100),
											НоваяСтрока.СуммаПоступления * СтавкаНДС / 100);
		
		Если Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") Тогда
		ИначеЕсли Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи") Тогда
			НоваяСтрока.СуммаВознаграждения = Объект.ПроцентКомиссионногоВознаграждения * НоваяСтрока.Сумма / 100;
		ИначеЕсли Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления") Тогда
			НоваяСтрока.СуммаВознаграждения = Объект.ПроцентКомиссионногоВознаграждения * (НоваяСтрока.Сумма - НоваяСтрока.СуммаПоступления) / 100;
		Иначе
			НоваяСтрока.СуммаВознаграждения = 0;
		КонецЕсли;
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДСВознаграждения);
		НоваяСтрока.СуммаНДСВознаграждения = ?(Объект.СуммаВключаетНДС,
		НоваяСтрока.СуммаВознаграждения - (НоваяСтрока.СуммаВознаграждения) / ((СтавкаНДС + 100) / 100),
		НоваяСтрока.СуммаВознаграждения * СтавкаНДС / 100);
		
		Если СтруктураДанные.Свойство("ЭтоУслуга") Тогда
			НоваяСтрока.ЭтоУслуга = СтруктураДанные.ЭтоУслуга;
		КонецЕсли;
		
		Если СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС Тогда
			Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
			ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, Объект.Курс, КурсНациональнаяВалюта, УчетВалютныхОпераций);
			ТребуетсяИзменениеНалогообложениеНаСНДС = СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС;
		КонецЕсли;
		
	КонецЦикла;
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры // ПолучитьЗапасыПринятыеИзХранилища()

// Функция помещает список авансов во временное хранилище и возвращает адрес
//
&НаСервере
Функция ПоместитьПредоплатаВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(
		Объект.Предоплата.Выгрузить(,
			"Документ,
			|Заказ,
			|СуммаРасчетов,
			|Курс,
			|Кратность,
			|СуммаПлатежа"),
		УникальныйИдентификатор);
	
КонецФункции // ПоместитьПредоплатаВХранилище()

// Функция получает список авансов из временного хранилища
//
&НаСервере
Процедура ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресПредоплатаВХранилище);
	Объект.Предоплата.Загрузить(ТаблицаДляЗагрузки);
	
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента);
	
КонецПроцедуры // ПолучитьПредоплатаИзХранилища()

#КонецОбласти

#Область УправлениеВнешнимВидом

// Процедура устанавливает доступность элементов формы.
//
// Параметры:
//  Нет.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьИДоступность(Форма)
	
	Если Форма.Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") Тогда
		
		Форма.Объект.ПроцентКомиссионногоВознаграждения = 0;
		Форма.Элементы.ПроцентКомиссионногоВознаграждения.Доступность = Ложь;
		
	Иначе
		
		Форма.Элементы.ПроцентКомиссионногоВознаграждения.Доступность = Истина;
		
	КонецЕсли;
	
	Форма.Элементы.ГруппаИнформацияПоНовойСхеме.Видимость = Форма.ПоказыватьИнформациюПоНовойСхемеДвижений;
	
КонецПроцедуры // УстановитьВидимостьИДоступность()

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

// Процедура - обработчик нажатия кнопки Копировать строки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Запасы");
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Вставить строки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыВставитьСтроки(Команда)
	
	ВставитьСтроки("Запасы");
	
КонецПроцедуры

// Вызывает процедуру копирования строк и оповещает пользователя о количестве скопированных.
//
&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

// Вызывает процедуру вставки строк и оповещает пользователя о количестве вставленных.
//
&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтроки(ИмяТЧ, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

// Выполняет копирование выделенных строк в буфер обмена.
//
&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

// Вставляет скопированные строки из буфера обмена в выбранную табличную часть.
//
&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры

// Обрабатывает вставленные строки.
//
&НаКлиенте
Процедура ОбработатьВставленныеСтроки(ИмяТЧ, КоличествоВставленных)
	
	Если ИмяТЧ = "Запасы" Тогда
		
		Количество = Объект[ИмяТЧ].Количество();
		
		Для Итератор = 1 По КоличествоВставленных Цикл
			
			Строка = Объект[ИмяТЧ][Количество - Итератор];
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(Строка);
			РассчитатьКомиссионноеВознаграждение(Строка);
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Строка.СтавкаНДС);
			Строка.СуммаНДСПоступления = ?(Объект.СуммаВключаетНДС, 
												Строка.СуммаПоступления - (Строка.СуммаПоступления) / ((СтавкаНДС + 100) / 100),
												Строка.СуммаПоступления * СтавкаНДС / 100);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает вставленные строки.
//
&НаСервере
Процедура ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных)
	
	Если ИмяТЧ = "Запасы" Тогда
		Количество = Объект[ИмяТЧ].Количество();
		
		Для Итератор = 1 По КоличествоВставленных Цикл
			
			Строка = Объект[ИмяТЧ][Количество - Итератор];
			
			СтруктураДанные = Новый Структура();
			
			СтруктураДанные.Вставить("Организация", 	   Объект.Организация);
			СтруктураДанные.Вставить("Номенклатура", 	   Строка.Номенклатура);
			СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
			СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
			
			Если ЗначениеЗаполнено(Объект.ВидЦенКонтрагента) Тогда
			
				СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
				СтруктураДанные.Вставить("ВидЦенКонтрагента", Объект.ВидЦенКонтрагента);
				СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
				СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
				СтруктураДанные.Вставить("Характеристика", Строка.Характеристика);
				СтруктураДанные.Вставить("Коэффициент", 1);
				
			КонецЕсли;
			
			СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
			
			Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
				Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Строка.ЦенаПоступления) Тогда
				Строка.ЦенаПоступления = Строка.Цена;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Строка.СуммаПоступления) Тогда
				Строка.СуммаПоступления = Строка.Сумма;
			КонецЕсли;
			
			Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
			
			Если СтруктураДанные.Свойство("ЭтоУслуга") Тогда
				Строка.ЭтоУслуга = СтруктураДанные.ЭтоУслуга;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ГрупповоеИзменениеСтрок

// Процедура - обработчик нажатия кнопки Снять флажки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыСнятьФлажки(Команда)
	УстановитьПометку(Ложь);
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Установить флажки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыУстановитьФлажки(Команда)
	УстановитьПометку(Истина);
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Изменить в ТЧ Запасы.
// Показывает/скрывает панель редактирования таблицы.
//
&НаКлиенте
Процедура ЗапасыИзменитьСтроки(Команда)
	
	ПоказатьСкрытьПанельРедактирования(Истина);
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Выполнить в панели редактирования таблицы
// Производит выбранные преобразования с таблицей
//
&НаКлиенте
Процедура ЗапасыВыполнитьДействие(Команда)
	
	ОбработатьТаблицу();
	НастроитьОформлениеПанелиРедактирования(4);
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Отменить в панели редактирования таблицы
// Скрывает панель редактирования и восстанавливает данные таблицы до внесения изменений
//
&НаКлиенте
Процедура ЗапасыОтменитьИзменения(Команда)
	
	ПоказатьСкрытьПанельРедактирования();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ЗапасыИзменениеСтрокДействие.
//
&НаКлиенте
Процедура ЗапасыИзменениеСтрокДействиеПриИзменении(Элемент)
	
	ОпределитьОбъектИзменений();
	НастроитьОформлениеПанелиРедактирования(2);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ЗапасыИзменениеСтрокЗначение.
//
&НаКлиенте
Процедура ЗапасыИзменениеСтрокЗначениеПриИзменении(Элемент)
	
	НастроитьОформлениеПанелиРедактирования(3);
	
КонецПроцедуры

// Устанавливает/снимает пометку для всех строк таблицы.
//
&НаСервере
Процедура УстановитьПометку(Пометка)
	
	Элементы.ЗапасыСнятьФлажки.Видимость = НЕ Элементы.ЗапасыСнятьФлажки.Видимость;
	Элементы.ЗапасыУстановитьФлажки.Видимость = НЕ Элементы.ЗапасыУстановитьФлажки.Видимость;
	
	Для каждого Строка Из Объект.Запасы Цикл
		Строка.Пометка = Пометка;
	КонецЦикла;
	
КонецПроцедуры

// Открывает/закрывает панель редактирования ТЧ.
//
&НаСервере
Процедура ПоказатьСкрытьПанельРедактирования(ИзменяетДанные = Неопределено)
	
	Перем СостояниеПерехода;
	ГрупповоеИзменениеСтрокСервер.ПоказатьСкрытьПанельРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокСервер(),
		СостояниеПерехода,
		ИзменяетДанные);
	
	УправлениеРезервнымиКопиямиТаблицы(СостояниеПерехода, ИзменяетДанные);
	
КонецПроцедуры

// Управляет сохранением/отменой изменений в ТЧ.
//
&НаСервере
Процедура УправлениеРезервнымиКопиямиТаблицы(СостояниеПерехода, ИзменяетДанные)
	
	ГрупповоеИзменениеСтрокСервер.УправлениеРезервнымиКопиями(
		ЭтотОбъект,
		Объект.Запасы,
		ЗапасыРезервнаяКопияТаблицыАдрес,
		СостояниеПерехода,
		ИзменяетДанные);
	
КонецПроцедуры

// Управляет оформлением панели редактирования таблицы.
//
&НаКлиенте
Процедура НастроитьОформлениеПанелиРедактирования(Состояние, СохранитьИзменения = Неопределено)
	
	ГрупповоеИзменениеСтрокКлиент.НастроитьОформлениеПанелиРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокКлиент(),
		Состояние,
		ЗапасыИзменениеСтрокЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекущееДействиеИзмененияСтрок()
	
	Если ЗапасыИзменениеСтрокДействие = ЗапасыИзменениеСтрокДействиеПриОткрытии Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьТекущееДействиеИзмененияСтрокСервер();
	
КонецПроцедуры

// Записывает в пользовательские настройки последнее выбранное действие для изменения таблицы.
//
&НаСервере
Процедура СохранитьТекущееДействиеИзмененияСтрокСервер()
	
	ГрупповоеИзменениеСтрокСервер.СохранитьНастройки(НаборЭлементовГрупповогоИзмененияСтрокСервер());
	
КонецПроцедуры

// Производит пересчет связанных реквизитов в строках таблицы после из группового изменения.
//
&НаКлиенте
Процедура ОбработатьТаблицу()
	
	ОбработатьТаблицуНаСервере();
	
	ИзменяемыеСтроки = Объект.Запасы.НайтиСтроки(Новый Структура("Пометка", Истина));
	Для каждого Строка Из ИзменяемыеСтроки Цикл
		
		Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(Строка);
			
			РассчитатьКомиссионноеВознаграждение(Строка);
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
			
			РассчитатьСуммуНДС(Строка);
			Строка.Всего = Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			
			Если Строка.Количество <> 0 Тогда
				Строка.Цена = Строка.Сумма / Строка.Количество;
			КонецЕсли;
			
			РассчитатьСуммуНДС(Строка);
			Строка.Всего = Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);
			
			РассчитатьКомиссионноеВознаграждение(Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Производит пересчет связанных реквизитов в строках таблицы после из группового изменения.
//
&НаСервере
Процедура ОбработатьТаблицуНаСервере()
	
	ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
		ЭтотОбъект,
		Объект.Запасы,
		ЗапасыИзменениеСтрокДействие,
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит,
		ЗапасыИзменениеСтрокЗначение,
		"ЗапасыНоменклатура");
	
	Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
		
		ИзменяемыеСтроки = Объект.Запасы.НайтиСтроки(Новый Структура("Пометка", Истина));
		Для каждого Строка Из ИзменяемыеСтроки Цикл
			
			СтруктураДанные = Новый Структура;
			СтруктураДанные.Вставить("Организация", Объект.Организация);
			СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
			СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
			СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
			
			Если ЗначениеЗаполнено(Объект.ВидЦенКонтрагента) Тогда
				
				СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
				СтруктураДанные.Вставить("ВидЦенКонтрагента", Объект.ВидЦенКонтрагента);
				СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
				СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
				СтруктураДанные.Вставить("Характеристика", Строка.Характеристика);
				СтруктураДанные.Вставить("Коэффициент", 1);
				
			КонецЕсли;
			
			СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
			
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
			Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
				Строка.Количество = 1;
			КонецЕсли;
			Строка.Цена = 0;
			Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
			
			Строка.ЦенаПоступления = СтруктураДанные.ЦенаПоступления;
			
			Строка.СуммаПоступления = Строка.Количество * Строка.ЦенаПоступления;
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Строка.СтавкаНДС);
			
			Строка.СуммаНДСПоступления = ?(
				Объект.СуммаВключаетНДС,
				Строка.СуммаПоступления
				- (Строка.СуммаПоступления)
				/ ((СтавкаНДС + 100)
				/ 100),
				Строка.СуммаПоступления
				* СтавкаНДС
				/ 100);
			
			Если СтруктураДанные.Свойство("ЭтоУслуга") Тогда
				Строка.ЭтоУслуга = СтруктураДанные.ЭтоУслуга;
			КонецЕсли;

			
		КонецЦикла;
		
	КонецЕсли;
	
	НомераГТДПодобратьПоПринятымНаСервере(Истина);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры

// Определяет в зависимости от выбранного действия изменяемый реквизит и связанный с ним элемент на форме.
//
&НаКлиенте
Процедура ОпределитьОбъектИзменений()
	
	Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "СтавкаНДС";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСтавкаНДС";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПокупателя") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Покупатель";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыПокупатель";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьДатуРеализации") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "ДатаРеализации";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыДатаРеализации";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки")
		ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "";
		
	КонецЕсли;
	
КонецПроцедуры

// Создает набор необходимых реквизитов и элементов формы для управления оформлением панели редактирования.
//
&НаКлиенте
Функция НаборЭлементовГрупповогоИзмененияСтрокКлиент()
	
	НаборЭлементов = Новый Структура();
	НаборЭлементов.Вставить("ИмяТЧ", "Запасы");
	НаборЭлементов.Вставить("ДокументСсылка", Объект.Ссылка);
	НаборЭлементов.Вставить("ПанельРедактирования", Элементы.ГруппаЗапасыИзменениеСтрок);
	НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ЗапасыВыполнитьДействие);
	НаборЭлементов.Вставить("КолонкаПометка", Элементы.ЗапасыПометка);
	НаборЭлементов.Вставить("КолонкаНомерСтроки", Элементы.ЗапасыНомерСтроки);
	НаборЭлементов.Вставить("Действие", ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("ДействиеЭлемент", Элементы.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("Значение", ЭтотОбъект.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ЗначениеЭлемент", Элементы.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ОбъектИзменений", ЗапасыИзменениеСтрокОбъектИзмененийЭлемент);
	НаборЭлементов.Вставить("КолонкаОбъектИзменений", ?(ЗначениеЗаполнено(ЗапасыИзменениеСтрокОбъектИзмененийЭлемент), Элементы[ЗапасыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	Возврат НаборЭлементов;
	
КонецФункции

// Создает набор необходимых реквизитов и элементов формы для управления оформлением панели редактирования.
//
&НаСервере
Функция НаборЭлементовГрупповогоИзмененияСтрокСервер()
	
	НаборЭлементов = Новый Структура();
	НаборЭлементов.Вставить("ИмяТЧ", "Запасы");
	НаборЭлементов.Вставить("ДокументСсылка", Объект.Ссылка);
	НаборЭлементов.Вставить("ПанельРедактирования", Элементы.ГруппаЗапасыИзменениеСтрок);
	НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ЗапасыВыполнитьДействие);
	НаборЭлементов.Вставить("КнопкаИзменитьСтроки", Элементы.ЗапасыИзменитьСтроки);
	НаборЭлементов.Вставить("КолонкаПометка", Элементы.ЗапасыПометка);
	НаборЭлементов.Вставить("КолонкаНомерСтроки", Элементы.ЗапасыНомерСтроки);
	НаборЭлементов.Вставить("Действие", ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("ДействиеЭлемент", Элементы.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("Значение", ЭтотОбъект.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ЗначениеЭлемент", Элементы.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ОбъектИзменений", ЗапасыИзменениеСтрокОбъектИзмененийЭлемент);
	НаборЭлементов.Вставить("КолонкаОбъектИзменений", ?(ЗначениеЗаполнено(ЗапасыИзменениеСтрокОбъектИзмененийЭлемент), Элементы[ЗапасыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	Возврат НаборЭлементов;
	
КонецФункции

// Заполняет список выбора реквизита Действие в панели редактирования ТЧ
//
&НаСервере
Процедура ЗаполнитьСписокДействий()
	
	РазрешеноРедактированиеЦенДокументов = УправлениеДоступомУНФ.РазрешеноРедактированиеЦенДокументов();
	
	Действия = Новый Массив;
	Если РазрешеноРедактированиеЦенДокументов Тогда
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент);
	КонецЕсли;
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду);
	Если РазрешеноРедактированиеЦенДокументов Тогда
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам);
	КонецЕсли;
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьПокупателя);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьДатуРеализации);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки);
	
	Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Очистить();
	Для каждого Действие Из Действия Цикл
		ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
		Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПометкаПриИзменении(Элемент)
	ГрупповоеИзменениеСтрокКлиент.СтрокаПометкаПриИзменении(Объект.Запасы, Элементы.ЗапасыУстановитьФлажки, Элементы.ЗапасыСнятьФлажки);
КонецПроцедуры

#КонецОбласти

#Область АвтоподборКонтактов

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_ОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_АвтоПодбор(	ЭтотОбъект, Элемент, Текст, ДанныеВыбора, Параметры, Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССериямиНоменклатуры

&НаКлиенте
Процедура ЗапасыСерииНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерииНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерииНоменклатуры()
		
	ТекущиеДанныеИдентификатор = Элементы.Запасы.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыСерийНоменклатуры = ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор);
	
	ОткрытьФорму("Обработка.ПодборСерийНоменклатуры.Форма", ПараметрыСерийНоменклатуры, ЭтотОбъект);

КонецПроцедуры

&НаСервере
Функция ПолучитьСерииНоменклатурыИзХранилища(АдресВоВременномХранилище, КлючСтроки)
	
	Модифицированность = Истина;
	Возврат СерииНоменклатурыУНФ.ПолучитьСерииНоменклатурыИзХранилища(Объект, АдресВоВременномХранилище, КлючСтроки);
	
КонецФункции

&НаСервере
Функция ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор)
	
	Возврат СерииНоменклатурыУНФ.ПараметрыПодбораСерийНоменклатуры(Объект, ЭтотОбъект.УникальныйИдентификатор,
		ТекущиеДанныеИдентификатор, Ложь);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
