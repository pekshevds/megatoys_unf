
//////////////////////////////////////////////////////////////////////////////// 
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура заполняет таблицу запасов.
//
&НаСервере
Процедура ЗаполнитьТаблицуЗапасов()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",		ОтборОрганизация);
	Запрос.УстановитьПараметр("Контрагент",			ОтборКонтрагент);
	Запрос.УстановитьПараметр("Договор",			ОтборДоговор);
	Запрос.УстановитьПараметр("ВалютаРасчетов",		ОтборДоговор.ВалютаРасчетов);
	Запрос.УстановитьПараметр("ВалютаДокумента",	ВалютаДокумента);
	Запрос.УстановитьПараметр("ВидЦенКонтрагента",	ВидЦенКонтрагента);
	Запрос.УстановитьПараметр("ВалютаВидаЦен",		ВидЦенКонтрагента.ВалютаЦены);
	Запрос.УстановитьПараметр("ВалютаУчета",		Константы.ВалютаУчета.Получить());
	
	Запрос.УстановитьПараметр("НачалоПериода",		НачалоДня(ОтборПериод.ДатаНачала));
	Запрос.УстановитьПараметр("КонецПериода",		КонецДня(ОтборПериод.ДатаОкончания));
	
	МассивТиповСписаний = Новый Массив;
	МассивТиповСписаний.Добавить(Тип("ДокументСсылка.СписаниеЗапасов"));
	МассивТиповСписаний.Добавить(Тип("ДокументСсылка.ПересортицаЗапасов"));
	Запрос.УстановитьПараметр("МассивТиповСписаний",		МассивТиповСписаний);
	
	ОтборВидРасхода = ДанныеМеток.Выгрузить(,"Метка");
	
	Если Не ОтборВидРасхода.Количество() Тогда
		НоваяСтрока = ОтборВидРасхода.Добавить();
		НоваяСтрока.Метка = "Реализация";
		НоваяСтрока = ОтборВидРасхода.Добавить();
		НоваяСтрока.Метка = "Списание";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидРасхода", ОтборВидРасхода);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПродажиОбороты.Номенклатура КАК Номенклатура,
	|	ПродажиОбороты.Характеристика КАК Характеристика,
	|	ПродажиОбороты.Партия КАК Партия,
	|	ПродажиОбороты.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ПродажиОбороты.Контрагент КАК Покупатель,
	|	ПродажиОбороты.КоличествоОборот КАК Количество,
	|	ПродажиОбороты.КоличествоОборот КАК Остаток,
	|	ВЫБОР
	|		КОГДА ПродажиОбороты.КоличествоОборот > 0
	|			ТОГДА ВЫБОР
	|					КОГДА &ВалютаДокумента = &ВалютаУчета
	|						ТОГДА ПродажиОбороты.СуммаОборот / ПродажиОбороты.КоличествоОборот
	|					ИНАЧЕ ЕСТЬNULL(ПродажиОбороты.СуммаОборот * КурсВалютыУчета.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыУчета.Кратность), 0) / ПродажиОбороты.КоличествоОборот
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА ПродажиОбороты.КоличествоОборот > 0
	|			ТОГДА ВЫБОР
	|					КОГДА &ВалютаДокумента = &ВалютаУчета
	|						ТОГДА ПродажиОбороты.СуммаОборот
	|					ИНАЧЕ ЕСТЬNULL(ПродажиОбороты.СуммаОборот * КурсВалютыУчета.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыУчета.Кратность), 0)
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА &ВалютаДокумента = &ВалютаВидаЦен
	|				ТОГДА ФиксированныеЦеныПоступления.Цена
	|			ИНАЧЕ ФиксированныеЦеныПоступления.Цена * КурсВалютыВидаЦен.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыВидаЦен.Кратность)
	|		КОНЕЦ, ВЫБОР
	|			КОГДА ЗапасыПринятыеОстатки.КоличествоОстаток > 0
	|				ТОГДА ВЫБОР
	|						КОГДА &ВалютаДокумента = &ВалютаРасчетов
	|							ТОГДА ЗапасыПринятыеОстатки.СуммаРасчетовОстаток / ЗапасыПринятыеОстатки.КоличествоОстаток
	|						ИНАЧЕ ЕСТЬNULL(ЗапасыПринятыеОстатки.СуммаРасчетовОстаток * КурсВалютыРасчетов.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыРасчетов.Кратность), 0) / ЗапасыПринятыеОстатки.КоличествоОстаток
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЦенаПоступления,
	|	ЗапасыПринятыеОстатки.Заказ КАК ЗаказПоставщику,
	|	""Реализация"" КАК ВидРасхода
	|ПОМЕСТИТЬ ИтоговаяТаблица
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|					И (Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|						И Партия.ВладелецПартии = &Контрагент)
	|				ИЛИ Номенклатура.ЭтоАгентскаяУслуга
	|					И Номенклатура.Поставщик = &Контрагент
	|					И Номенклатура.Договор = &Договор) КАК ПродажиОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыИАгентскиеУслугиПринятые.Остатки(
	|				&КонецПериода,
	|				Организация = &Организация
	|					И Контрагент = &Контрагент
	|					И Договор = &Договор
	|					И ТипПриемаПередачи = ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПоступлениеОтКомитента)) КАК ЗапасыПринятыеОстатки
	|		ПО (ЗапасыПринятыеОстатки.Номенклатура = ПродажиОбороты.Номенклатура)
	|			И (ЗапасыПринятыеОстатки.Характеристика = ПродажиОбороты.Характеристика)
	|			И (ЗапасыПринятыеОстатки.Партия = ПродажиОбороты.Партия)
	|			И (ВЫБОР
	|				КОГДА ПродажиОбороты.Номенклатура.ЭтоАгентскаяУслуга  И ЗапасыПринятыеОстатки.Заказ ССЫЛКА Документ.ЗаказПокупателя И ПродажиОбороты.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя
	|					ТОГДА ЗапасыПринятыеОстатки.Заказ = ПродажиОбороты.ЗаказПокупателя
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
	|				&КонецПериода,
	|				ВидЦенКонтрагента = &ВидЦенКонтрагента
	|					И Актуальность) КАК ФиксированныеЦеныПоступления
	|		ПО (ФиксированныеЦеныПоступления.Номенклатура = ПродажиОбороты.Номенклатура)
	|			И (ФиксированныеЦеныПоступления.Характеристика = ПродажиОбороты.Характеристика)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&КонецПериода, Валюта = &ВалютаРасчетов) КАК КурсВалютыРасчетов
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&КонецПериода, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&КонецПериода, Валюта = &ВалютаУчета) КАК КурсВалютыУчета
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&КонецПериода, Валюта = &ВалютаВидаЦен) КАК КурсВалютыВидаЦен
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ПродажиОбороты.КоличествоОборот > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Запасы.Номенклатура,
	|	Запасы.Характеристика,
	|	Запасы.Партия,
	|	Запасы.ЗаказПокупателя,
	|	НЕОПРЕДЕЛЕНО,
	|	Запасы.Количество,
	|	Запасы.Количество,
	|	0,
	|	0,
	|	0,
	|	НЕОПРЕДЕЛЕНО,
	|	""Списание""
	|ИЗ
	|	РегистрНакопления.Запасы КАК Запасы
	|ГДЕ
	|	Запасы.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Запасы.Организация = &Организация
	|	И Запасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И Запасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|	И ТИПЗНАЧЕНИЯ(Запасы.Регистратор) В (&МассивТиповСписаний)
	|	И Запасы.Партия.ВладелецПартии = &Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговаяТаблица.Номенклатура КАК Номенклатура,
	|	ИтоговаяТаблица.Характеристика КАК Характеристика,
	|	ИтоговаяТаблица.Партия КАК Партия,
	|	ИтоговаяТаблица.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ИтоговаяТаблица.Покупатель КАК Покупатель,
	|	СУММА(ИтоговаяТаблица.Количество) КАК Количество,
	|	СУММА(ИтоговаяТаблица.Остаток) КАК Остаток,
	|	ИтоговаяТаблица.Цена КАК Цена,
	|	ИтоговаяТаблица.Сумма КАК Сумма,
	|	ИтоговаяТаблица.ЦенаПоступления КАК ЦенаПоступления,
	|	ИтоговаяТаблица.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ИтоговаяТаблица.ВидРасхода КАК ВидРасхода
	|ИЗ
	|	ИтоговаяТаблица КАК ИтоговаяТаблица
	|ГДЕ
	|	ИтоговаяТаблица.ВидРасхода В(&ВидРасхода)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтоговаяТаблица.ВидРасхода,
	|	ИтоговаяТаблица.ЗаказПоставщику,
	|	ИтоговаяТаблица.Покупатель,
	|	ИтоговаяТаблица.ЗаказПокупателя,
	|	ИтоговаяТаблица.Партия,
	|	ИтоговаяТаблица.Характеристика,
	|	ИтоговаяТаблица.Номенклатура,
	|	ИтоговаяТаблица.ЦенаПоступления,
	|	ИтоговаяТаблица.Сумма,
	|	ИтоговаяТаблица.Цена
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидРасхода";
	
	ТаблицаЗапасов.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры // ЗаполнитьТаблицуЗапасов()

// Функция помещает результаты подбора в хранилище
//
&НаСервере
Функция ПоместитьЗапасыВХранилище()
	
	Запасы = ТаблицаЗапасов.Выгрузить(, "Выбран, Номенклатура, Характеристика, Партия, ЗаказПокупателя, ЗаказПоставщику, Покупатель, ДатаРеализации, Количество, Остаток, Цена, Сумма, ЦенаПоступления");
	
	МассивУдаляемыхСтрок = Новый Массив;
	Для Каждого СтрокаЗапасы Из Запасы Цикл
		
		Если Не СтрокаЗапасы.Выбран Тогда
			МассивУдаляемыхСтрок.Добавить(СтрокаЗапасы);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого НомерСтроки Из МассивУдаляемыхСтрок Цикл
		Запасы.Удалить(НомерСтроки);
	КонецЦикла;
	
	АдресЗапасовВХранилище = ПоместитьВоВременноеХранилище(Запасы, УникальныйИдентификатор);
	
	Возврат АдресЗапасовВХранилище;
	
КонецФункции // ПоместитьЗапасыВХранилище()

// Процедура заполняет таблицу периодов.
//
Процедура ЗаполнитьПериодПродаж()
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтчетКомитенту.Дата КАК Дата
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ОтчетКомитенту
	|ГДЕ
	|	ОтчетКомитенту.Проведен
	|	И ОтчетКомитенту.Организация = &Организация
	|	И ОтчетКомитенту.Контрагент = &Контрагент
	|	И ОтчетКомитенту.Договор = &Договор
	|	И ОтчетКомитенту.Дата < &ДатаДокумента
	|	И ОтчетКомитенту.Ссылка <> &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("Контрагент",		ОтборКонтрагент);
	Запрос.УстановитьПараметр("Договор",		ОтборДоговор);
	Запрос.УстановитьПараметр("Ссылка",			ТекущийДокумент);
	Запрос.УстановитьПараметр("ДатаДокумента",	КонецДня(ОтборПериод.ДатаОкончания));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ОтборПериод.ДатаНачала = Дата('00010101');
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ОтборПериод.ДатаНачала = НачалоДня(Выборка.Дата+86400);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПериодПродаж()

// Процедура - обработчик команды ВыбратьСтроки.
//
&НаКлиенте
Процедура ВыбратьСтрокиВыполнить()

	Для Каждого СтрокаТабличнойЧасти Из ТаблицаЗапасов Цикл
		
		СтрокаТабличнойЧасти.Выбран = Истина;
		
	КонецЦикла;
	
КонецПроцедуры // ВыбратьСтрокиВыполнить()

// Процедура - обработчик команды ИсключитьСтроки.
//
&НаКлиенте
Процедура ИсключитьСтрокиВыполнить()

	Для Каждого СтрокаТабличнойЧасти Из ТаблицаЗапасов Цикл
		
		СтрокаТабличнойЧасти.Выбран = Ложь
		
	КонецЦикла;
	
КонецПроцедуры // ИсключитьСтрокиВыполнить()

// Процедура - обработчик команды ВыбратьВыделенные.
//
&НаКлиенте
Процедура ВыбратьВыделенныеСтроки(Команда)
	
	МассивСтрок = Элементы.ТаблицаЗапасов.ВыделенныеСтроки;
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		
		СтрокаТабличнойЧасти = ТаблицаЗапасов.НайтиПоИдентификатору(НомерСтроки);
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			СтрокаТабличнойЧасти.Выбран = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ВыбратьВыделенныеСтроки()

// Процедура - обработчик команды ИсключитьВыделенные.
//
&НаКлиенте
Процедура ИсключитьВыделенныеСтроки(Команда)
	
	МассивСтрок = Элементы.ТаблицаЗапасов.ВыделенныеСтроки;
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		
		СтрокаТабличнойЧасти = ТаблицаЗапасов.НайтиПоИдентификатору(НомерСтроки);
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			СтрокаТабличнойЧасти.Выбран = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ИсключитьВыделенныеСтроки()

// Процедура - обработчик команды ПеренестиВДокумент.
//
&НаКлиенте
Процедура ПеренестиВДокументВыполнить()
	
	АдресЗапасовВХранилище = ПоместитьЗапасыВХранилище();
	ОповеститьОВыборе(АдресЗапасовВХранилище);
	
КонецПроцедуры // ПеренестиВДокументВыполнить()

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОтборОрганизация	= Параметры.Компания;
	Организация			= Параметры.Организация;
	ОтборКонтрагент 	= Параметры.Контрагент;
	ОтборДоговор 		= Параметры.Договор;
	ВалютаДокумента 	= Параметры.ВалютаДокумента;
	ВидЦенКонтрагента 	= Параметры.ВидЦенКонтрагента;
	ТекущийДокумент 	= Параметры.ТекущийДокумент;
	ОтборПериод.ДатаОкончания 	= Параметры.ДатаДокумента;
	
	ЗаполнитьПериодПродаж();
	
	ЗаполнитьТаблицуЗапасов();
	
	ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(ОтборПериод);
	
	// МобильныйКлиент
	РаботаСОтборами.НастроитьПанельОтборовМобильныйКлиент(ЭтаФорма,,,,,Истина); 
	// Конец МобильныйКлиент
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события Выбор табличной части ТаблицаЗапасов.
//
&НаКлиенте
Процедура ТаблицаЗапасовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.ТаблицаЗапасов.ТекущиеДанные <> Неопределено Тогда
		Если Поле.Имя = "ТаблицаЗапасовЗаказПокупателя" Тогда
			ПоказатьЗначение(Неопределено, Элементы.ТаблицаЗапасов.ТекущиеДанные.ЗаказПокупателя);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаЗапасовВыбор()

// Процедура - обработчик события ПриИзменении поля Количество табличной части ТаблицаЗапасов.
//
&НаКлиенте
Процедура ТаблицаЗапасовКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ТаблицаЗапасов.ТекущиеДанные;
	СтрокаТабличнойЧасти.Выбран = (СтрокаТабличнойЧасти.Количество <> 0);
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	
КонецПроцедуры // ТаблицаЗапасовКоличествоПриИзменении()

&НаКлиенте
Процедура ДекорацияРазвернутьОтборыНажатие(Элемент)
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПредставлениеПериодаВыбратьПериод();
КонецПроцедуры

&НаКлиенте
Процедура СвернутьОтборыНажатие(Элемент)
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
КонецПроцедуры

#КонецОбласти

#Область МеткиОтборов

&НаКлиенте
Процедура ПредставлениеПериодаВыбратьПериод()
	
	Оповещение = Новый ОписаниеОповещения("ПредставлениеПериодаНажатиеЗавершение", ЭтотОбъект);
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода;
	Диалог.Период = ОтборПериод;
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатиеЗавершение(НовыйПериод, Параметры) Экспорт
	
	Если НовыйПериод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(НовыйПериод)=Тип("СтандартныйПериод") Тогда
		ОтборПериод = НовыйПериод;
	ИначеЕсли ТипЗнч(НовыйПериод)=Тип("Дата") Тогда
		ОтборПериод.ДатаОкончания = НовыйПериод;
	КонецЕсли;
	
	ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(ОтборПериод);
	ЗаполнитьТаблицуЗапасов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения);
	ЗаполнитьТаблицуЗапасов();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_")+1);
	УдалитьМеткуОтбора(МеткаИД);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	УдалитьМеткуОтбораСервер(МеткаИД);

КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбораСервер(МеткаИД) Экспорт
	
	СтрокаМеток = ДанныеМеток[Число(МеткаИД)];
	ИмяПоляОтбора = СтрокаМеток.ИмяПоляОтбора;
	
	СписокГруппФормыДляУдаленияДобавленныхЭлементов = РаботаСОтборами.ПолучитьСписокИмяГруппыРодителя(ДанныеМеток);
	
	ДанныеМеток.Удалить(СтрокаМеток);
	
	РаботаСОтборами.ОбновитьЭлементыМеток(ЭтотОбъект, СписокГруппФормыДляУдаленияДобавленныхЭлементов, "ДанныеМеток");

	ЗаполнитьТаблицуЗапасов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРасходаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("ВидРасхода", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

#КонецОбласти