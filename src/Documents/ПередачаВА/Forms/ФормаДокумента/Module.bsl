
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДатаДокумента = Объект.Дата;
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	Контрагент = Объект.Контрагент;
	Договор = Объект.Договор;
	ВалютаРасчетов = Объект.Договор.ВалютаРасчетов;
	НациональнаяВалютаКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НациональнаяВалюта, ДатаДокумента);
	КурсНациональнаяВалюта = НациональнаяВалютаКурсКратность.Курс;
	КратностьНациональнаяВалюта = НациональнаяВалютаКурсКратность.Кратность;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		И НЕ ЗначениеЗаполнено(Параметры.Основание) 
		И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
		Объект.СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Объект.Организация,,Объект.Дата);
		НалогиУНФ.ЗаполнитьНДСВключенВСтоимостьВДокументе(Объект);
	ИначеЕсли Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда	
		Элементы.ВнеоборотныеАктивыСтавкаНДС.Видимость = Истина;
		Элементы.ВнеоборотныеАктивыСуммаНДС.Видимость = Истина;
		Элементы.ВнеоборотныеАктивыВсего.Видимость = Истина;
	Иначе
		Элементы.ВнеоборотныеАктивыСтавкаНДС.Видимость = Ложь;
		Элементы.ВнеоборотныеАктивыСуммаНДС.Видимость = Ложь;
		Элементы.ВнеоборотныеАктивыВсего.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СпециальныйНалоговыйРежим) Тогда
		Объект.СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Объект.Организация,,Объект.Дата);
	КонецЕсли;
	
	УчетВалютныхОпераций = Константы.ФункциональнаяУчетВалютныхОпераций.Получить();
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	
	// Установка видимости договора.
	УстановитьВидимостьДоговора();
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	УстановитьВидимостьПечатиЧека();
	Если ИспользоватьПодключаемоеОборудование И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Справочники.Контрагенты.ДанныеКИКонтрагентаДляВыбораНаФорме(Объект.Контрагент, Элементы,
			ПоляКИДляОтправкиЧека());
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Элементы.СтраницаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(
		Объект.Предоплата, Объект.ВалютаДокумента);
	
	АвтоподборКонтактов.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект);
	
	МобильныйКлиентУНФ.НастроитьФормуОбъектаМобильныйКлиент(Элементы, "ВнеоборотныеАктивы");
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Контрагент" Тогда
		Если ЗначениеЗаполнено(Параметр)
		   И Объект.Контрагент = Параметр Тогда
			УстановитьВидимостьДоговора();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	УправлениеНебольшойФирмойКлиент.УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
		И УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройкиЗачетаАвансов() = Перечисления.ДаНет.Да
		И ТекущийОбъект.Предоплата.Количество() = 0 Тогда
		ЗаполнитьПредоплату(ТекущийОбъект);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	Оповестить("ОбновлениеСостоянийВнеоборотныхАктивов");
	Оповестить("ОповещениеОбИзмененииДолга");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УправлениеНебольшойФирмойКлиент.ЗаполнитьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП);
	УправлениеНебольшойФирмойКлиент.УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП);
	
	УстановитьДоступностьПечатиЧека();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПредоплатаПриИзменении(Элемент)
	
	Элементы.СтраницаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	
КонецПроцедуры

// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДанныеДляИзмененияДаты = ДокументыУНФКлиент.ДанныеДляИзмененияДаты(ЭтотОбъект, Объект);
	Если ДанныеДляИзмененияДаты.ДатаНеМенялась Тогда
		Возврат;
	КонецЕсли;
	
	ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты);
	
	ЦеныИВалютаКлиент.ПересчитатьКурсКратностьВалютыРасчетов(ДанныеДляИзмененияДаты.ВалютаКурсКратность, Объект,
		ЭтотОбъект);
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	
КонецПроцедуры

// В процедуре осуществляется очистка номера документа,
// а также производится установка параметров функциональных опций формы.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

// Выполняет очистку договора и табличной части.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		
		ДанныеКонтрагента = ДанныеКонтрагентаДляИзменения(ДатаДокумента, Объект.Контрагент, Объект.Организация);
		Объект.Договор = ДанныеКонтрагента.Договор;
		
		ДанныеКонтрагента.Вставить("КонтрагентПередИзменением", КонтрагентПередИзменением);
		
		ОбработатьИзменениеДоговора(ДанныеКонтрагента);
		
	Иначе
		
		Объект.Договор = Договор; // Восстанавливаем автоматически очищенный договор.
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизиты формы курс и кратность.
//
&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
		
КонецПроцедуры

&НаКлиенте
Процедура ДоговорСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Владелец", Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоров.СПокупателем"));
	ПараметрыФормы.Вставить("ОповеститьОЗаписиДоговора", Истина);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВнеоборотныеАктивы

&НаКлиенте
Процедура ВнеоборотныеАктивыВнеоборотныйАктивПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВнеоборотныеАктивы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
	СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	СтрокаТабличнойЧасти.Проект = ПолучитьПроектИзИмущества(СтрокаТабличнойЧасти.ВнеоборотныйАктив, Объект.Организация, Объект.Дата);
    	
КонецПроцедуры // ВнеоборотныеАктивыВнеоборотныйАктивПриИзменении()

&НаКлиенте
Процедура ВнеоборотныеАктивыСтоимостьПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВнеоборотныеАктивы.ТекущиеДанные;
	СтрокаТабличнойЧасти.ОстаточнаяСтоимость = СтрокаТабличнойЧасти.Стоимость - СтрокаТабличнойЧасти.Амортизация;
	
КонецПроцедуры // ВнеоборотныеАктивыСтоимостьПриИзменении()

&НаКлиенте
Процедура ВнеоборотныеАктивыАмортизацияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВнеоборотныеАктивы.ТекущиеДанные;
	СтрокаТабличнойЧасти.Амортизация = ?(
		СтрокаТабличнойЧасти.Амортизация > СтрокаТабличнойЧасти.Стоимость,
		СтрокаТабличнойЧасти.Стоимость,
		СтрокаТабличнойЧасти.Амортизация);
	СтрокаТабличнойЧасти.ОстаточнаяСтоимость = СтрокаТабличнойЧасти.Стоимость - СтрокаТабличнойЧасти.Амортизация;
	АмортизацияЗаТекущийМесяцМакс = СтрокаТабличнойЧасти.Стоимость - СтрокаТабличнойЧасти.Амортизация;
	СтрокаТабличнойЧасти.АмортизацияЗаМесяц = ?(
		СтрокаТабличнойЧасти.АмортизацияЗаМесяц > АмортизацияЗаТекущийМесяцМакс,
		АмортизацияЗаТекущийМесяцМакс,
		СтрокаТабличнойЧасти.АмортизацияЗаМесяц);
	
КонецПроцедуры // ВнеоборотныеАктивыАмортизацияПриИзменении()

&НаКлиенте
Процедура ВнеоборотныеАктивыОстаточнаяСтоимостьПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВнеоборотныеАктивы.ТекущиеДанные;
	СтрокаТабличнойЧасти.ОстаточнаяСтоимость = ?(
		СтрокаТабличнойЧасти.ОстаточнаяСтоимость > СтрокаТабличнойЧасти.Стоимость,
		СтрокаТабличнойЧасти.Стоимость,
		СтрокаТабличнойЧасти.ОстаточнаяСтоимость);
	СтрокаТабличнойЧасти.Амортизация = СтрокаТабличнойЧасти.Стоимость - СтрокаТабличнойЧасти.ОстаточнаяСтоимость;
	АмортизацияЗаТекущийМесяцМакс = СтрокаТабличнойЧасти.Стоимость - СтрокаТабличнойЧасти.Амортизация;
	СтрокаТабличнойЧасти.АмортизацияЗаМесяц = ?(
		СтрокаТабличнойЧасти.АмортизацияЗаМесяц > АмортизацияЗаТекущийМесяцМакс,
		АмортизацияЗаТекущийМесяцМакс,
		СтрокаТабличнойЧасти.АмортизацияЗаМесяц);
	
КонецПроцедуры // ВнеоборотныеАктивыОстаточнаяСтоимостьПриИзменении()

&НаКлиенте
Процедура ВнеоборотныеАктивыАмортизацияЗаМесяцПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВнеоборотныеАктивы.ТекущиеДанные;
	АмортизацияЗаТекущийМесяцМакс = СтрокаТабличнойЧасти.Стоимость - СтрокаТабличнойЧасти.Амортизация;
	СтрокаТабличнойЧасти.АмортизацияЗаМесяц = ?(
		СтрокаТабличнойЧасти.АмортизацияЗаМесяц > АмортизацияЗаТекущийМесяцМакс,
		АмортизацияЗаТекущийМесяцМакс,
		СтрокаТабличнойЧасти.АмортизацияЗаМесяц);
	
КонецПроцедуры // ВнеоборотныеАктивыАмортизацияЗаМесяцПриИзменении()

&НаКлиенте
Процедура ВнеоборотныеАктивыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВнеоборотныеАктивы.ТекущиеДанные;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // ВнеоборотныеАктивыСтавкаНДСПриИзменении()

&НаКлиенте
Процедура ВнеоборотныеАктивыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВнеоборотныеАктивы.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // ВнеоборотныеАктивыСуммаНДСПриИзменении()

&НаКлиенте
Процедура ВнеоборотныеАктивыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВнеоборотныеАктивы.ТекущиеДанные;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // ВнеоборотныеАктивыСуммаПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредоплата

&НаКлиенте
Процедура ПредоплатаСуммаРасчетовПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
		
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
			?(Объект.Курс = 0,
			1,
			Объект.Курс),
		СтрокаТабличнойЧасти.Курс);
	
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
			?(Объект.Кратность = 0,
			1,
			Объект.Кратность),
		СтрокаТабличнойЧасти.Кратность);
	
	СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
		СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс,
		?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
		СтрокаТабличнойЧасти.Кратность,
		?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность));

КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКурсПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.ПриИзмененииКурсаВСтрокеПредоплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКурсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасчетыРаботаСФормамиКлиент.ПредоплатаКурсНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКратностьПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.ПриИзмененииКурсаВСтрокеПредоплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс);
	
	КурсПересчета = ?(Объект.ВалютаДокумента = НациональнаяВалюта, 1, Объект.Курс);
	СтрокаТабличнойЧасти.Кратность = 1;
	
	СтрокаТабличнойЧасти.Курс =
		?(СтрокаТабличнойЧасти.СуммаРасчетов = 0,
			1,
			СтрокаТабличнойЧасти.СуммаПлатежа
		  / СтрокаТабличнойЧасти.СуммаРасчетов
		  * КурсПересчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	СуммаРасчетов = Объект.Предоплата.Итог("СуммаРасчетов");
	ИтогВсего = Объект.ВнеоборотныеАктивы.Итог("Всего");
	РасчетыРаботаСФормамиВызовСервера.ВыполнитьКонтрольСуммыОплатыДобавлениеСтроки(
		СуммаРасчетов, ИтогВсего, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПредоплатаПриОкончанииРедактированияНаСервере(Элементы.Предоплата.ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура ПредоплатаПриОкончанииРедактированияНаСервере(ИдентификаторСтроки)
	
	ИтогВсего = Объект.ВнеоборотныеАктивы.Итог("Всего");
	РасчетыРаботаСФормамиВызовСервера.ВыполнитьКонтрольСуммыОплатыВСтроке(ЭтотОбъект, ИдентификаторСтроки, ИтогВсего);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПовторнаяПечатьЧека()
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПовторнаяПечатьЧекаПродолжение", ЭтотОбъект);
		МассивОборудования = Новый Массив;
		МассивОборудования.Добавить("ФискальныйРегистратор");
		МассивОборудования.Добавить("ККТ");
		ОтборОборудования = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();
		ОтборОборудования.Вставить("ТипыПО", МассивОборудования);
		ОтборОборудования.Вставить("Организация", Объект.Организация);
		МенеджерОборудованияКлиент.ВыбратьУстройство(ОписаниеОповещения, ОтборОборудования,
				НСтр("ru='Выберите оборудование'"), НСтр("ru='Оборудование не подключено.'"));
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторнаяПечатьЧекаПродолжение(РезультатВыбора, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		ИдентификаторУстройстваФискальногоРегистратора = РезультатВыбора.ИдентификаторУстройства;
	КонецЕсли;
	
	Если ИдентификаторУстройстваФискальногоРегистратора = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗавершитьПовторнуюПечатьФискальногоЧека", ЭтотОбъект);
	
	Если ЗначениеЗаполнено(ИдентификаторУстройстваФискальногоРегистратора) Тогда
		
		ПараметрыОперации = Новый Структура("НомерЧека", Объект.НомерЧекаККМ);
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПечатьКопииЧека(ОповещениеПриЗавершении,
			ЭтаФорма, ИдентификаторУстройстваФискальногоРегистратора, ПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПовторнуюПечатьФискальногоЧека(РезультатВыполнения, ПараметрДействия) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РезультатВыполнения, "Результат") И НЕ РезультатВыполнения.Результат Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Произошла ошибка при попытке повторной печати фискального чека.
			|Причина: %1'"), РезультатВыполнения.ОписаниеОшибки);
		ПоказатьПредупреждение(, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачетПредоплатыВыполнить(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале контрагента!'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале договор контрагента!'"));
		Возврат;
	КонецЕсли;
	
	АдресПредоплатаВХранилище = ПоместитьПредоплатаВХранилище();
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("АдресПредоплатаВХранилище", АдресПредоплатаВХранилище);
	ПараметрыПодбора.Вставить("Подбор", Истина);
	ПараметрыПодбора.Вставить("ЕстьЗаказ", Ложь);
	ПараметрыПодбора.Вставить("ЗаказВШапке", Ложь);
	ПараметрыПодбора.Вставить("Компания", Компания);
	ПараметрыПодбора.Вставить("Дата", Объект.Дата);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыПодбора.Вставить("Договор", Объект.Договор);
	ПараметрыПодбора.Вставить("Курс", Объект.Курс);
	ПараметрыПодбора.Вставить("Кратность", Объект.Кратность);
	ПараметрыПодбора.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("СуммаДокумента", Объект.ВнеоборотныеАктивы.Итог("Всего"));
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораАвансовПокупателей", ПараметрыПодбора, , , , ,
		Новый ОписаниеОповещения("ЗачетПредоплатыВыполнитьЗавершение", ЭтотОбъект,
		Новый Структура("АдресПредоплатаВХранилище", АдресПредоплатаВХранилище)));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачетПредоплатыВыполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    АдресПредоплатаВХранилище = ДополнительныеПараметры.АдресПредоплатаВХранилище;
    
    
    КодВозврата = Результат;
    
    Если КодВозврата = КодВозвратаДиалога.OK Тогда
        ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище);
    КонецЕсли;

КонецПроцедуры // ЗачетПредоплатыВыполнить()

&НаКлиенте
Процедура Рассчитать(Команда)
	
	Если Объект.Проведен Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru='Расчет амортизации возможен только в непроведенном документе.'"));
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьЗавершение", ЭтотОбъект), НСтр("ru='Введенные данные будут пересчитаны! Продолжить?'"),РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Объект.ВнеоборотныеАктивы.Количество() > 0
        И Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    АдресВнеоборотныеАктивыВХранилище = ПоместитьВнеоборотныеАктивыВХранилище();
    РассчитатьАмортизацию(АдресВнеоборотныеАктивыВХранилище, Объект.Дата, Компания);
    ПолучитьВнеоборотныеАктивыИзХранилища(АдресВнеоборотныеАктивыВХранилище);

КонецПроцедуры // Рассчитать()

&НаКлиенте
Процедура ПредварительныйПросмотрЧека(Команда)
	
	Если Модифицированность Тогда
		Если Объект.Проведен Тогда
			ТекстВопроса = НСтр("ru = 'Для выполнения команды ""Предварительный просмотр""
				|документ будет проведен. Продолжить?'");
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Провести и продолжить'"));
		Иначе
			ТекстВопроса = НСтр("ru = 'Для выполнения команды ""Предварительный просмотр""
				|документ будет записан. Продолжить?'");
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Записать и продолжить'"));
		КонецЕсли;
		Обработчик = Новый ОписаниеОповещения("ПредварительныйПросмотрЧекаПродолжение", ЭтотОбъект);
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки);
	Иначе
		ПредварительныйПросмотрЧекаПродолжение(Неопределено, "");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрЧекаПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда
		Если Объект.Проведен Тогда
			РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		Иначе
			РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		КонецЕсли;
		Если Не РезультатЗаписи Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПредварительныйПросмотрЧекаЗавершение", ЭтотОбъект);
		МассивОборудования = Новый Массив;
		МассивОборудования.Добавить("ФискальныйРегистратор");
		МассивОборудования.Добавить("ККТ");
		ОтборОборудования = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();
		ОтборОборудования.Вставить("ТипыПО", МассивОборудования);
		ОтборОборудования.Вставить("Организация", Объект.Организация);
		МенеджерОборудованияКлиент.ВыбратьУстройство(ОписаниеОповещения, ОтборОборудования,
				НСтр("ru='Выберите оборудование'"), НСтр("ru='Оборудование не подключено.'"));
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрЧекаЗавершение(РезультатВыбора, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		ИдентификаторУстройстваФР = РезультатВыбора.ИдентификаторУстройства;
	КонецЕсли;
	
	Если ИдентификаторУстройстваФР = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры = ПодготовитьДанныеДляПробитияЧека(ИдентификаторУстройстваФР);
	
	Если ОбщиеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры.ДатаВремя = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	РабочееМестоКассираКлиент.ПредпросмотрЧекаДенежныхДокументов(ОбщиеПараметры, ЭтаФорма, ИдентификаторУстройстваФР);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура обрабатывает изменение реквизитов документов Вид цен и Валюта расчетов
//
&НаКлиенте
Процедура ОбработатьИзменениеВидаЦенИВалютыРасчетов(ПараметрыДокумента)
	
	ВалютаРасчетовПередИзменением = ПараметрыДокумента.ВалютаРасчетовПередИзменением;
	ДанныеДоговора = ПараметрыДокумента.ДанныеДоговора;
	ОткрытьФормуЦеныИВалюты = ПараметрыДокумента.ОткрытьФормуЦеныИВалюты;
	
	Если НЕ ДанныеДоговора.СуммаВключаетНДС = Неопределено Тогда
		
		Объект.СуммаВключаетНДС = ДанныеДоговора.СуммаВключаетНДС;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда 
		
		Объект.Курс      = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс = 0, 1, ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс);
		Объект.Кратность = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность = 0, 1, ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность);
		
	КонецЕсли;
	
	Объект.ВалютаДокумента = ДанныеДоговора.ВалютаРасчетов;
	
	Если ОткрытьФормуЦеныИВалюты Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом! 
										|Необходимо проверить валюту документа!'");
		
		ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаРасчетовПередИзменением, Истина, Ложь, ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзменениеВидаЦенИВалютыРасчетов()

// Функция помещает список авансов во временное хранилище и возвращает адрес
//
&НаСервере
Функция ПоместитьПредоплатаВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(
		Объект.Предоплата.Выгрузить(,
			"Документ,
			|СуммаРасчетов,
			|Курс,
			|Кратность,
			|СуммаПлатежа"),
		УникальныйИдентификатор);
	
КонецФункции // ПоместитьПредоплатаВХранилище()

// Функция получает список авансов из временного хранилища
//
&НаСервере
Процедура ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресПредоплатаВХранилище);
	Объект.Предоплата.Загрузить(ТаблицаДляЗагрузки);
	
КонецПроцедуры // ПолучитьПредоплатаИзХранилища()

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПерезаполнитьЦены = Ложь,
	ПересчитатьЦены = Ложь, ТекстПредупреждения = "")
	
	ПараметрыФормыЦеныИВалюта = ЦеныИВалютаКлиентСервер.НовыеПараметрыФормыЦеныИВалюта(Объект, ТолькоПросмотр,
		Компания, ПерезаполнитьЦены, ПересчитатьЦены, ТекстПредупреждения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуЦеныИВалютаЗавершение", ЭтотОбъект,
		Новый Структура("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением));
	ОткрытьФорму("ОбщаяФорма.ЦеныИВалюта", ПараметрыФормыЦеныИВалюта, ЭтотОбъект, , , , ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

// Процедура-обработчик результата открытия формы "Цены и валюты"
// 
// Параметры:
//  РезультатФормыЦеныИВалюта - см. ЦеныИВалютаКлиентСервер.РезультатФормыЦеныИВалюта
//  ДополнительныеПараметры - Структура
&НаКлиенте
Процедура ОткрытьФормуЦеныИВалютаЗавершение(РезультатФормыЦеныИВалюта, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатФормыЦеныИВалюта) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РезультатФормыЦеныИВалюта.БылиВнесеныИзменения Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
		
	Объект.ВалютаДокумента = РезультатФормыЦеныИВалюта.ВалютаДокумента;
	Объект.Курс = РезультатФормыЦеныИВалюта.КурсРасчетов;
	Объект.Кратность = РезультатФормыЦеныИВалюта.КратностьРасчетов;
	Объект.НалогообложениеНДС = РезультатФормыЦеныИВалюта.НалогообложениеНДС;
	Объект.СпециальныйНалоговыйРежим = РезультатФормыЦеныИВалюта.СпециальныйНалоговыйРежим;
	Объект.СуммаВключаетНДС = РезультатФормыЦеныИВалюта.СуммаВключаетНДС;
	Объект.НДСВключатьВСтоимость = РезультатФормыЦеныИВалюта.НДСВключатьВСтоимость;
	
	// Пересчитываем цены по валюте.
	Если РезультатФормыЦеныИВалюта.ПересчитатьЦены Тогда
		ЦенообразованиеКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтотОбъект,
			ДополнительныеПараметры.ВалютаРасчетовПередИзменением, "ВнеоборотныеАктивы",
			РезультатФормыЦеныИВалюта.КурсПересчетаЦен);
	КонецЕсли;
	
	// Пересчитываем сумму если изменился признак Налогообложение НДС.
	Если РезультатФормыЦеныИВалюта.НалогообложениеНДС <> РезультатФормыЦеныИВалюта.ПредНалогообложениеНДС Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	КонецЕсли;
	
	// Пересчитываем сумму если изменился признак "Сумма включает НДС".
	Если Не РезультатФормыЦеныИВалюта.СуммаВключаетНДС = РезультатФормыЦеныИВалюта.ПредСуммаВключаетНДС Тогда
		ЦенообразованиеКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтотОбъект, "ВнеоборотныеАктивы");
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
		СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
			СтрокаТабличнойЧасти.СуммаРасчетов,
			СтрокаТабличнойЧасти.Курс,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
			СтрокаТабличнойЧасти.Кратность,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КратностьНациональнаяВалюта, Объект.Кратность));  
	КонецЦикла;
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	
КонецПроцедуры // ОткрытьФормуЦеныИВалютаЗавершение()

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ДанныеДляИзмененияДаты)
	
	ДокументыУНФ.ДатаПриИзменении(ДанныеДляИзмененияДаты, ЭтотОбъект, Объект);
	
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры ОрганизацияПриИзменении.
//
&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ДокументыУНФ.ОрганизацияПриИзменении(ЭтотОбъект, Объект);
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	УстановитьНастройкиУчетаВНалогообложении();
	
	ЦеныИВалюта = ЦеныИВалютаКлиентСервер.ТекстНадписиЦеныИВалюта(Объект, ВалютаРасчетов, КурсНациональнаяВалюта,
		УчетВалютныхОпераций);
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ДанныеКонтрагентаДляИзменения(Знач Дата, Знач Контрагент, Знач Организация)
	
	Результат = Новый Структура;
	ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	Результат.Вставить("Договор", ДоговорПоУмолчанию);
	ДанныеДоговора = ДанныеДоговораДляИзменения(Дата, ДоговорПоУмолчанию);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат, ДанныеДоговора);
	
	УстановитьВидимостьДоговора();
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ДанныеКИКонтрагента = Справочники.Контрагенты.ДанныеКИКонтрагентаДляВыбораНаФорме(Контрагент, Элементы,
			ПоляКИДляОтправкиЧека());
		ЗаполнитьПоляКИДляОтправкиЧекаПоУмолчанию(ДанныеКИКонтрагента);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ДанныеДоговораДляИзменения(Знач Дата, Знач Договор)
	
	Результат = Новый Структура;
	Результат.Вставить("ВалютаРасчетов", Договор.ВалютаРасчетов);
	Результат.Вставить("ВалютаРасчетовКурсКратность", РаботаСКурсамиВалют.ПолучитьКурсВалюты(Договор.ВалютаРасчетов,
		Дата));
	Результат.Вставить("РасчетыВУсловныхЕдиницах", Договор.РасчетыВУсловныхЕдиницах);
	Результат.Вставить("СуммаВключаетНДС", Неопределено);
	Если ЗначениеЗаполнено(Договор.ВидЦен) Тогда
		Результат.СуммаВключаетНДС = Договор.ВидЦен.ЦенаВключаетНДС;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	Если НЕ СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Организация.ВидСтавкиНДСПоУмолчанию));
		КонецЕсли;												
	
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Организация.ВидСтавкиНДСПоУмолчанию));
	КонецЕсли;	
				
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьПроектИзИмущества(ВнеоборотныйАктив, Организация, Период)

	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыВнеоборотныхАктивовСрезПоследних.Проект КАК Проект
	|ИЗ
	|	РегистрСведений.ПараметрыВнеоборотныхАктивов.СрезПоследних(
	|			&Период,
	|			ВнеоборотныйАктив = &ВнеоборотныйАктив
	|				И Организация = &Организация) КАК ПараметрыВнеоборотныхАктивовСрезПоследних";
	
	Запрос.УстановитьПараметр("ВнеоборотныйАктив", ВнеоборотныйАктив);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", Период);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Проект = РезультатЗапроса.ВыгрузитьКолонку("Проект");
	
	Если Проект.Количество() > 0 Тогда
		Возврат Проект[0];
	КонецЕсли;
	
	Возврат Справочники.Проекты.ПустаяСсылка();

КонецФункции // ПолучитьПроектИзИмущества()


// Процедура заполняет Ставку НДС в табличной части по системе налогообложения
// организации.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС()
	
	НалогообложениеПередИзменением = Объект.НалогообложениеНДС;
	Объект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Объект.Организация,, Объект.Дата);
	
	Если НЕ НалогообложениеПередИзменением = Объект.НалогообложениеНДС Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

&НаСервере
Процедура УстановитьНастройкиУчетаВНалогообложении()
	
	Объект.СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Объект.Организация,,Объект.Дата);
	
КонецПроцедуры

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Элементы.ВнеоборотныеАктивыСтавкаНДС.Видимость = Истина;
		Элементы.ВнеоборотныеАктивыСуммаНДС.Видимость = Истина;
		Элементы.ВнеоборотныеАктивыВсего.Видимость = Истина;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.ВнеоборотныеАктивы Цикл
			
			СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
						
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;	
		
	Иначе
		
		Элементы.ВнеоборотныеАктивыСтавкаНДС.Видимость = Ложь;
		Элементы.ВнеоборотныеАктивыСуммаНДС.Видимость = Ложь;
		Элементы.ВнеоборотныеАктивыВсего.Видимость = Ложь;
		
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда	
		    СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
		КонецЕсли;	
		
		Для каждого СтрокаТабличнойЧасти Из Объект.ВнеоборотныеАктивы Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()	

// Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	Если Объект.СуммаВключаетНДС Тогда
		СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100);
	Иначе
		СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуНДС()

// Рассчитывает амортизацию имущества.
//
&НаСервереБезКонтекста
Процедура РассчитатьАмортизацию(АдресВнеоборотныеАктивыВХранилище, Дата, Организация)
	
	ТаблицаВнеоборотныеАктивы = ПолучитьИзВременногоХранилища(АдресВнеоборотныеАктивыВХранилище);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Период",		   Дата);
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоГода",	   НачалоГода(Дата));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(Дата));
	Запрос.УстановитьПараметр("СписокВнеоборотныхАктивов", ТаблицаВнеоборотныеАктивы.ВыгрузитьКолонку("ВнеоборотныйАктив"));
	Запрос.УстановитьПараметр("ТаблицаВнеоборотныеАктивы", ТаблицаВнеоборотныеАктивы);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокАмортизируемыхВА.ВнеоборотныйАктив КАК ВнеоборотныйАктив,
	|	ПРЕДСТАВЛЕНИЕ(СписокАмортизируемыхВА.ВнеоборотныйАктив) КАК ВнеоборотныйАктивПредставление,
	|	СписокАмортизируемыхВА.ВнеоборотныйАктив.Код КАК Код,
	|	СписокАмортизируемыхВА.НачалоНачислятьАмортизацию КАК НачалоНачислятьАмортизацию,
	|	СписокАмортизируемыхВА.КонецНачислятьАмортизацию КАК КонецНачислятьАмортизацию,
	|	СписокАмортизируемыхВА.КонецНачислятьВТекущемМесяце КАК КонецНачислятьВТекущемМесяце,
	|	ЕСТЬNULL(СтоимостьВА.АмортизацияКонечныйОстаток, 0) КАК АмортизацияКонечныйОстаток,
	|	ЕСТЬNULL(СтоимостьВА.АмортизацияОборот, 0) КАК АмортизацияОборот,
	|	ЕСТЬNULL(СтоимостьВА.СтоимостьКонечныйОстаток, 0) КАК БалансоваяСтоимость,
	|	ЕСТЬNULL(СтоимостьВА.СтоимостьНачальныйОстаток, 0) КАК СтоимостьНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияОстаткиИОбороты.СтоимостьНачальныйОстаток, 0) - ЕСТЬNULL(АмортизацияОстаткиИОбороты.АмортизацияНачальныйОстаток, 0) КАК СтоимостьНаНачалоГода,
	|	ЕСТЬNULL(СписокАмортизируемыхВА.ВнеоборотныйАктив.СпособАмортизации, 0) КАК СпособНачисленияАмортизации,
	|	ЕСТЬNULL(СписокАмортизируемыхВА.ВнеоборотныйАктив.НачальнаяСтоимость, 0) КАК ПервоначальнаяСтоимость,
	|	ЕСТЬNULL(ПараметрыАмортизацииСрезПоследних.ПрименитьВТекущемМесяце, 0) КАК ПрименитьВТекущемМесяце,
	|	ПараметрыАмортизацииСрезПоследних.Период КАК Период,
	|	ВЫБОР
	|		КОГДА ПараметрыАмортизацииСрезПоследних.ПрименитьВТекущемМесяце
	|			ТОГДА ЕСТЬNULL(ПараметрыАмортизацииСрезПоследних.СрокИспользованияДляВычисленияАмортизации, 0)
	|		ИНАЧЕ ЕСТЬNULL(ПараметрыАмортизацииСрезПоследнихНачалоМесяца.СрокИспользованияДляВычисленияАмортизации, 0)
	|	КОНЕЦ КАК СрокИспользованияДляВычисленияАмортизации,
	|	ВЫБОР
	|		КОГДА ПараметрыАмортизацииСрезПоследних.ПрименитьВТекущемМесяце
	|			ТОГДА ЕСТЬNULL(ПараметрыАмортизацииСрезПоследних.СтоимостьДляВычисленияАмортизации, 0)
	|		ИНАЧЕ ЕСТЬNULL(ПараметрыАмортизацииСрезПоследнихНачалоМесяца.СтоимостьДляВычисленияАмортизации, 0)
	|	КОНЕЦ КАК СтоимостьДляВычисленияАмортизации,
	|	ЕСТЬNULL(ИзменениеПризнакаАмортизации.ИзменениеНачислятьАмортизацию, ЛОЖЬ) КАК ИзменениеНачислятьАмортизацию,
	|	ЕСТЬNULL(ИзменениеПризнакаАмортизации.НачислятьВТекМесяце, ЛОЖЬ) КАК НачислятьВТекМесяце,
	|	ЕСТЬNULL(ВыработкаВнеоборотногоАктиваОбороты.КоличествоОборот, 0) КАК ОбъемВыработки,
	|	ВЫБОР
	|		КОГДА ПараметрыАмортизацииСрезПоследних.ПрименитьВТекущемМесяце
	|			ТОГДА ЕСТЬNULL(ПараметрыАмортизацииСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации, 0)
	|		ИНАЧЕ ЕСТЬNULL(ПараметрыАмортизацииСрезПоследнихНачалоМесяца.ОбъемПродукцииРаботДляВычисленияАмортизации, 0)
	|	КОНЕЦ КАК ОбъемПродукцииРаботДляВычисленияАмортизации
	|ПОМЕСТИТЬ ВременнаяТаблицаДляРасчетаАмортизации
	|ИЗ
	|	(ВЫБРАТЬ
	|		СрезПервых.НачислятьАмортизацию КАК НачалоНачислятьАмортизацию,
	|		СрезПоследних.НачислятьАмортизацию КАК КонецНачислятьАмортизацию,
	|		СрезПоследних.НачислятьАмортизациюВТекущемМесяце КАК КонецНачислятьВТекущемМесяце,
	|		СрезПоследних.ВнеоборотныйАктив КАК ВнеоборотныйАктив
	|	ИЗ
	|		(ВЫБРАТЬ
	|			СостояниеВнеоборотногоАктиваСрезПервых.ВнеоборотныйАктив КАК ВнеоборотныйАктив,
	|			СостояниеВнеоборотногоАктиваСрезПервых.НачислятьАмортизацию КАК НачислятьАмортизацию,
	|			СостояниеВнеоборотногоАктиваСрезПервых.НачислятьАмортизациюВТекущемМесяце КАК НачислятьАмортизациюВТекущемМесяце,
	|			СостояниеВнеоборотногоАктиваСрезПервых.Период КАК Период
	|		ИЗ
	|			РегистрСведений.СостоянияВнеоборотныхАктивов.СрезПоследних(
	|					&НачалоПериода,
	|					Организация = &Организация
	|						И ВнеоборотныйАктив В (&СписокВнеоборотныхАктивов)) КАК СостояниеВнеоборотногоАктиваСрезПервых) КАК СрезПервых
	|			ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				СостояниеВнеоборотногоАктиваСрезПоследних.ВнеоборотныйАктив КАК ВнеоборотныйАктив,
	|				СостояниеВнеоборотногоАктиваСрезПоследних.НачислятьАмортизацию КАК НачислятьАмортизацию,
	|				СостояниеВнеоборотногоАктиваСрезПоследних.НачислятьАмортизациюВТекущемМесяце КАК НачислятьАмортизациюВТекущемМесяце,
	|				СостояниеВнеоборотногоАктиваСрезПоследних.Период КАК Период
	|			ИЗ
	|				РегистрСведений.СостоянияВнеоборотныхАктивов.СрезПоследних(
	|						&КонецПериода,
	|						Организация = &Организация
	|							И ВнеоборотныйАктив В (&СписокВнеоборотныхАктивов)) КАК СостояниеВнеоборотногоАктиваСрезПоследних) КАК СрезПоследних
	|			ПО СрезПервых.ВнеоборотныйАктив = СрезПоследних.ВнеоборотныйАктив) КАК СписокАмортизируемыхВА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВнеоборотныеАктивы.ОстаткиИОбороты(
	|				&НачалоГода,
	|				,
	|				,
	|				,
	|				Организация = &Организация
	|					И ВнеоборотныйАктив В (&СписокВнеоборотныхАктивов)) КАК АмортизацияОстаткиИОбороты
	|		ПО СписокАмортизируемыхВА.ВнеоборотныйАктив = АмортизацияОстаткиИОбороты.ВнеоборотныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВнеоборотныеАктивы.ОстаткиИОбороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				,
	|				Организация = &Организация
	|					И ВнеоборотныйАктив В (&СписокВнеоборотныхАктивов)) КАК СтоимостьВА
	|		ПО СписокАмортизируемыхВА.ВнеоборотныйАктив = СтоимостьВА.ВнеоборотныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыВнеоборотныхАктивов.СрезПоследних(
	|				&КонецПериода,
	|				Организация = &Организация
	|					И ВнеоборотныйАктив В (&СписокВнеоборотныхАктивов)) КАК ПараметрыАмортизацииСрезПоследних
	|		ПО СписокАмортизируемыхВА.ВнеоборотныйАктив = ПараметрыАмортизацииСрезПоследних.ВнеоборотныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыВнеоборотныхАктивов.СрезПоследних(
	|				&НачалоПериода,
	|				Организация = &Организация
	|					И ВнеоборотныйАктив В (&СписокВнеоборотныхАктивов)) КАК ПараметрыАмортизацииСрезПоследнихНачалоМесяца
	|		ПО СписокАмортизируемыхВА.ВнеоборотныйАктив = ПараметрыАмортизацииСрезПоследнихНачалоМесяца.ВнеоборотныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИСТИНА) КАК ИзменениеНачислятьАмортизацию,
	|			СостояниеВнеоборотногоАктива.ВнеоборотныйАктив КАК ВнеоборотныйАктив,
	|			СостояниеВнеоборотногоАктиваСрезПоследних.НачислятьАмортизациюВТекущемМесяце КАК НачислятьВТекМесяце
	|		ИЗ
	|			РегистрСведений.СостоянияВнеоборотныхАктивов КАК СостояниеВнеоборотногоАктива
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияВнеоборотныхАктивов.СрезПоследних(
	|						&КонецПериода,
	|						Организация = &Организация
	|							И ВнеоборотныйАктив В (&СписокВнеоборотныхАктивов)) КАК СостояниеВнеоборотногоАктиваСрезПоследних
	|				ПО СостояниеВнеоборотногоАктива.ВнеоборотныйАктив = СостояниеВнеоборотногоАктиваСрезПоследних.ВнеоборотныйАктив
	|		ГДЕ
	|			СостояниеВнеоборотногоАктива.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|			И СостояниеВнеоборотногоАктива.Организация = &Организация
	|			И СостояниеВнеоборотногоАктива.ВнеоборотныйАктив В(&СписокВнеоборотныхАктивов)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СостояниеВнеоборотногоАктива.ВнеоборотныйАктив,
	|			СостояниеВнеоборотногоАктиваСрезПоследних.НачислятьАмортизациюВТекущемМесяце) КАК ИзменениеПризнакаАмортизации
	|		ПО СписокАмортизируемыхВА.ВнеоборотныйАктив = ИзменениеПризнакаАмортизации.ВнеоборотныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыработкаВнеоборотныхАктивов.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				Организация = &Организация
	|					И ВнеоборотныйАктив В (&СписокВнеоборотныхАктивов)) КАК ВыработкаВнеоборотногоАктиваОбороты
	|		ПО СписокАмортизируемыхВА.ВнеоборотныйАктив = ВыработкаВнеоборотногоАктиваОбороты.ВнеоборотныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	&Период КАК Период,
	|	Таблица.ВнеоборотныйАктив КАК ВнеоборотныйАктив,
	|	Таблица.ВнеоборотныйАктивПредставление КАК ВнеоборотныйАктивПредставление,
	|	Таблица.Код КАК Код,
	|	Таблица.АмортизацияКонечныйОстаток КАК АмортизацияКонечныйОстаток,
	|	Таблица.БалансоваяСтоимость КАК БалансоваяСтоимость,
	|	0 КАК Стоимость,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА Таблица.СуммаАмортизации < Таблица.ВсегоОсталосьСписать
	|					ТОГДА Таблица.СуммаАмортизации
	|				ИНАЧЕ Таблица.ВсегоОсталосьСписать
	|			КОНЕЦ > 0
	|			ТОГДА ВЫБОР
	|					КОГДА Таблица.СуммаАмортизации < Таблица.ВсегоОсталосьСписать
	|						ТОГДА Таблица.СуммаАмортизации
	|					ИНАЧЕ Таблица.ВсегоОсталосьСписать
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Амортизация
	|ПОМЕСТИТЬ ТаблицаРасчетаАмортизации
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА Таблица.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииВнеоборотныхАктивов.Линейный)
	|				ТОГДА Таблица.СтоимостьДляВычисленияАмортизации / ВЫБОР
	|						КОГДА Таблица.СрокИспользованияДляВычисленияАмортизации = 0
	|							ТОГДА 1
	|						ИНАЧЕ Таблица.СрокИспользованияДляВычисленияАмортизации
	|					КОНЕЦ
	|			КОГДА Таблица.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииВнеоборотныхАктивов.ПропорциональноОбъемуПродукции)
	|				ТОГДА Таблица.СтоимостьДляВычисленияАмортизации * Таблица.ОбъемВыработки / ВЫБОР
	|						КОГДА Таблица.ОбъемПродукцииРаботДляВычисленияАмортизации = 0
	|							ТОГДА 1
	|						ИНАЧЕ Таблица.ОбъемПродукцииРаботДляВычисленияАмортизации
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаАмортизации,
	|		Таблица.ВнеоборотныйАктив КАК ВнеоборотныйАктив,
	|		Таблица.ВнеоборотныйАктивПредставление КАК ВнеоборотныйАктивПредставление,
	|		Таблица.Код КАК Код,
	|		Таблица.АмортизацияКонечныйОстаток КАК АмортизацияКонечныйОстаток,
	|		Таблица.БалансоваяСтоимость КАК БалансоваяСтоимость,
	|		Таблица.БалансоваяСтоимость - Таблица.АмортизацияКонечныйОстаток КАК ВсегоОсталосьСписать
	|	ИЗ
	|		ВременнаяТаблицаДляРасчетаАмортизации КАК Таблица) КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВременнаяТаблицаДляРасчетаАмортизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВнеоборотныеАктивы.НомерСтроки КАК НомерСтроки,
	|	ТаблицаВнеоборотныеАктивы.ВнеоборотныйАктив КАК ВнеоборотныйАктив,
	|	ТаблицаВнеоборотныеАктивы.Сумма КАК Сумма,
	|	ТаблицаВнеоборотныеАктивы.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаВнеоборотныеАктивы.СуммаНДС КАК СуммаНДС,
	|	ТаблицаВнеоборотныеАктивы.Всего КАК Всего,
	|	ТаблицаВнеоборотныеАктивы.Проект КАК Проект
	|ПОМЕСТИТЬ ТаблицаВнеоборотныеАктивы
	|ИЗ
	|	&ТаблицаВнеоборотныеАктивы КАК ТаблицаВнеоборотныеАктивы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВнеоборотныеАктивы.НомерСтроки КАК НомерСтроки,
	|	ТаблицаВнеоборотныеАктивы.ВнеоборотныйАктив КАК ВнеоборотныйАктив,
	|	ТаблицаВнеоборотныеАктивы.Сумма КАК Сумма,
	|	ТаблицаВнеоборотныеАктивы.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаВнеоборотныеАктивы.СуммаНДС КАК СуммаНДС,
	|	ТаблицаВнеоборотныеАктивы.Всего КАК Всего,
	|	ТаблицаВнеоборотныеАктивы.Проект КАК Проект,
	|	ТаблицаРасчетаАмортизации.БалансоваяСтоимость КАК Стоимость,
	|	ТаблицаРасчетаАмортизации.Амортизация КАК АмортизацияЗаМесяц,
	|	ТаблицаРасчетаАмортизации.АмортизацияКонечныйОстаток КАК Амортизация,
	|	ТаблицаРасчетаАмортизации.БалансоваяСтоимость - ТаблицаРасчетаАмортизации.АмортизацияКонечныйОстаток КАК ОстаточнаяСтоимость
	|ИЗ
	|	ТаблицаВнеоборотныеАктивы КАК ТаблицаВнеоборотныеАктивы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРасчетаАмортизации КАК ТаблицаРасчетаАмортизации
	|		ПО ТаблицаВнеоборотныеАктивы.ВнеоборотныйАктив = ТаблицаРасчетаАмортизации.ВнеоборотныйАктив
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаВнеоборотныеАктивы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаРасчетаАмортизации";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаАмортизации = РезультатЗапроса[4].Выгрузить();
	
	ПоместитьВоВременноеХранилище(ТаблицаАмортизации, АдресВнеоборотныеАктивыВХранилище);
	
КонецПроцедуры // РассчитатьАмортизацию()

// Функция помещает табличную часть ВнеоборотныеАктивы во временное хранилище
// и возвращает адрес
//
&НаСервере
Функция ПоместитьВнеоборотныеАктивыВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(
		Объект.ВнеоборотныеАктивы.Выгрузить(,
			"НомерСтроки,
			|ВнеоборотныйАктив,
			|Сумма,
			|СтавкаНДС,
			|СуммаНДС,
			|Всего,
			|Проект"
		),
		УникальныйИдентификатор);
	
КонецФункции // ПоместитьВнеоборотныеАктивыВХранилище()

// Функция получает табличную часть ВнеоборотныеАктивы из временного хранилища.
//
&НаСервере
Процедура ПолучитьВнеоборотныеАктивыИзХранилища(АдресВнеоборотныеАктивыВХранилище)
	
	ТаблицаВнеоборотныеАктивы = ПолучитьИзВременногоХранилища(АдресВнеоборотныеАктивыВХранилище);
	Объект.ВнеоборотныеАктивы.Очистить();
	Для каждого СтрокаВнеоборотныеАктивы Из ТаблицаВнеоборотныеАктивы Цикл
		Строка = Объект.ВнеоборотныеАктивы.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, СтрокаВнеоборотныеАктивы);
	КонецЦикла;
	
	ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		
КонецПроцедуры // ПолучитьВнеоборотныеАктивыИзХранилища()

// Процедура устанавливает видимость договора в зависимости от установленного параметра контрагенту.
//
&НаСервере
Процедура УстановитьВидимостьДоговора()
	
	Элементы.Договор.Видимость = Объект.Контрагент.ВестиРасчетыПоДоговорам;
	
КонецПроцедуры // УстановитьВидимостьДоговора()

// Выполняет действия при изменении договора контрагента.
//
&НаКлиенте
Процедура ОбработатьИзменениеДоговора(ДанныеДоговора = Неопределено)
	
	ДоговорПередИзменением = Договор;
	Договор = Объект.Договор;
	
	Если ДоговорПередИзменением <> Объект.Договор Тогда
		
		ПараметрыДокумента = Новый Структура;
		Если ДанныеДоговора = Неопределено Тогда
			
			ДанныеДоговора = ДанныеДоговораДляИзменения(ДатаДокумента, Объект.Договор);
			
		Иначе
			
			ПараметрыДокумента.Вставить("КонтрагентПередИзменением", ДанныеДоговора.КонтрагентПередИзменением);
			
		КонецЕсли;
		
		ВопросПредоплата = Объект.Предоплата.Количество() > 0 И Объект.Договор <> ДоговорПередИзменением;
		
		ВалютаРасчетовПередИзменением = ВалютаРасчетов;
		ВалютаРасчетов = ДанныеДоговора.ВалютаРасчетов;
		
		ОткрытьФормуЦеныИВалюты = Объект.ВалютаДокумента <> ДанныеДоговора.ВалютаРасчетов
			И Объект.ВнеоборотныеАктивы.Количество() > 0;
		
		ПараметрыДокумента.Вставить("ДоговорПередИзменением", ДоговорПередИзменением);
		ПараметрыДокумента.Вставить("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением);
		ПараметрыДокумента.Вставить("ДанныеДоговора", ДанныеДоговора);
		ПараметрыДокумента.Вставить("ОткрытьФормуЦеныИВалюты", ОткрытьФормуЦеныИВалюты);
		ПараметрыДокумента.Вставить("ВидимостьДоговораПередИзменением", Элементы.Договор.Видимость);
		
		Если ВопросПредоплата = Истина Тогда
			
			ТекстВопроса = НСтр("ru = 'Зачет предоплаты будет очищен, продолжить?'");
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОпределитьНеобходимостьОбновитьЗачетыАванса", ЭтотОбъект, ПараметрыДокумента);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			ОбработатьИзменениеВидаЦенИВалютыРасчетов(ПараметрыДокумента);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзменениеДоговораНаКлиенте()

// Процедура заполняет авансы.
//
&НаСервере
Процедура ЗаполнитьПредоплату(ТекущийОбъект)
	
	ТекущийОбъект.ЗаполнитьПредоплату();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

// Выполняет действия после ответа на вопрос об очистке предоплаты.
//
&НаКлиенте
Процедура ОпределитьНеобходимостьОбновитьЗачетыАванса(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		
		Объект.Предоплата.Очистить();
		ОбработатьИзменениеВидаЦенИВалютыРасчетов(ДополнительныеПараметры);
		
	Иначе
		
		Объект.Договор = ДополнительныеПараметры.ДоговорПередИзменением;
		Договор = ДополнительныеПараметры.ДоговорПередИзменением;
		
		Если ДополнительныеПараметры.Свойство("КонтрагентПередИзменением") Тогда
			
			Объект.Контрагент = ДополнительныеПараметры.КонтрагентПередИзменением;
			Контрагент = ДополнительныеПараметры.КонтрагентПередИзменением;
			Элементы.Договор.Видимость = ДополнительныеПараметры.ВидимостьДоговораПередИзменением;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АвтоподборКонтактов

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_ОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_АвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, Параметры, Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ПечатьЧековККМ

&НаКлиенте
Процедура НапечататьЧек(Команда)
	
	Если Объект.ВалютаДокумента <> УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту() Тогда
		ТекстСообщения = НСтр("ru = 'Валюта документа отличается от национальной!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат
	КонецЕсли;
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на оборудовании!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ПечатьДокументовУНФКлиент.ПечатьЧекаНевозможна(ЭтотОбъект, НСтр("ru = 'Не удалось провести документ'")) Тогда
		Возврат;
	КонецЕсли;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключенияФискальногоРегистратораЗавершение", ЭтотОбъект);
		МассивОборудования = Новый Массив;
		МассивОборудования.Добавить("ФискальныйРегистратор");
		МассивОборудования.Добавить("ККТ");
		ОтборОборудования = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();
		ОтборОборудования.Вставить("ТипыПО", МассивОборудования);
		ОтборОборудования.Вставить("Организация", Объект.Организация);
		МенеджерОборудованияКлиент.ВыбратьУстройство(ОписаниеОповещения, ОтборОборудования,
				НСтр("ru='Выберите оборудование'"), НСтр("ru='Оборудование не подключено.'"));
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеДляПробитияЧека(ИдентификаторУстройстваФР) 
	
	Возврат РозничныеПродажиСервер.ПолучитьДанныеДляФискализации(Объект.Ссылка, ИдентификаторУстройстваФР);
	
КонецФункции // ПодготовитьДанныеДляПробитияЧека()

&НаКлиенте
Процедура ПодключенияФискальногоРегистратораЗавершение(РезультатВыбора, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		ИдентификаторУстройстваФР = РезультатВыбора.ИдентификаторУстройства;
	КонецЕсли;
	
	Если ИдентификаторУстройстваФР = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры = ПодготовитьДанныеДляПробитияЧека(ИдентификаторУстройстваФР);
	
	Если ОбщиеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры.ДатаВремя = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	Контекст = Новый Структура();

	Оповещение = Новый ОписаниеОповещения("ПробитьЧекЗавершение", ЭтотОбъект, Контекст);
	
	ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
		Оповещение,
		УникальныйИдентификатор, 
		ИдентификаторУстройстваФР,
		ОбщиеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		
		// Установить полученное значение номера чека реквизиту документа.
		Объект.НомерСменыККМ = РезультатВыполнения.НомерСменыККТ;
		Объект.НомерЧекаККМ = РезультатВыполнения.НомерЧекаККТ;
		Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		Если НЕ ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
			Объект.НомерЧекаККМ = 1;
		КонецЕсли;
		
		Модифицированность = Истина;
		
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		
	Иначе
		
		ТекстСообщения = СтрШаблон(НСтр(
		"ru = 'При печати чека произошла ошибка.
		|Чек не напечатан на фискальном регистраторе.
		|Дополнительное описание:
		|%1'"), РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	УстановитьДоступностьПечатиЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонАдресЭППриИзменении(Элемент)
	
	УправлениеНебольшойФирмойКлиент.УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПечатиЧека()
	
	ИспользоватьПО = ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование");
	Если ИспользоватьПО
		И НЕ ТолькоПросмотр Тогда
		НапечататьЧекВидимость = Истина;
	Иначе
		НапечататьЧекВидимость = Ложь;
	КонецЕсли;
	
	РасчетыРаботаСФормамиВызовСервера.УстановитьВидимостьЭлементовПечатиЧека(ЭтотОбъект, НапечататьЧекВидимость, ИспользоватьПО);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПовторнаяПечатьЧека",
		"Видимость",
		ИспользоватьПО);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПечатиЧека()
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		Элементы.ГруппаОтправкаЧека.Доступность = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПовторнаяПечатьЧека",
		"Доступность",
		Объект.НомерЧекаККМ <> 0);
	
КонецПроцедуры

&НаСервере
Функция ПоляКИДляОтправкиЧека()
	
	ПоляКИ = Новый Соответствие;
	ПоляКИ.Вставить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Элементы.АдресЭП.Имя);
	ПоляКИ.Вставить(Перечисления.ТипыКонтактнойИнформации.Телефон, Элементы.Телефон.Имя);
	
	Возврат ПоляКИ;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоляКИДляОтправкиЧекаПоУмолчанию(ДанныеКИ)
	
	Если ДанныеКИ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.АдресЭП = ДанныеКИ.Получить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Объект.Телефон = ДанныеКИ.Получить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	
КонецПроцедуры

#КонецОбласти
