
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.БазоваяФункциональностьБИП") Тогда
		// Вариант автоматического подключения к сервису недоступен.
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЭтоАвтономноеРабочееМесто = ОбщегоНазначения.ЭтоАвтономноеРабочееМесто();
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	
	СтруктураПредприятияСоответствуетСтруктуреЮридическихЛиц = Истина;
	БазоваяФункциональность = Истина;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		СтруктураПредприятияСоответствуетСтруктуреЮридическихЛиц = МодульОрганизационнаяСтруктура.СтруктураПредприятияСоответствуетСтруктуреЮридическихЛиц();
		БазоваяФункциональность = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"РасчетныеЛистки", "Видимость",
			КабинетСотрудника.ДоступнаПубликацияРасчетныхЛистков());
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"НастроитьПравилаОбработкиЗаявокСотрудников", "Видимость",
			БизнесПроцессыЗаявокСотрудников.ДоступнаНастройкаПравилОбработкиЗаявок());
		
	ПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ИзменитьДанныеСервиса", "Видимость",
			ПолноправныйПользователь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ИзменитьПривязкуАбонента", "Видимость",
			ПолноправныйПользователь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ОтключениеСервиса", "Видимость",
			ПолноправныйПользователь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"СоставПубликуемыхОбъектов", "Видимость",
			ПолноправныйПользователь);
			
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"НастройкаОбсуждений", "Видимость",
			Не РазделениеВключено И ПолноправныйПользователь
			И КабинетСотрудника.ИспользоватьФормат503());
			
	ЕстьПраваНаПросмотрЖурналаРегистрации = ПравоДоступа("ЖурналРегистрации", Метаданные);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ОткрытьЖурналРегистрации", "Видимость",
			ЕстьПраваНаПросмотрЖурналаРегистрации);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаПодготовкаДанныхДляТехническойПоддержки", "Видимость",
			ЕстьПраваНаПросмотрЖурналаРегистрации);
			
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаПубликуемаяСтруктураПриПодключении", "Видимость",
			Не СтруктураПредприятияСоответствуетСтруктуреЮридическихЛиц);
			
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ИзменитьНастройкиПодключения", "Видимость",
			ПолноправныйПользователь И Не РазделениеВключено);

	ЦветСтиляПоясняющийОшибкуТекст 	= ЦветаСтиля.ПоясняющийОшибкуТекст;
	ЦветСтиляТекстаПоля 			= ЦветаСтиля.ЦветТекстаПоля;
	ЦветСтиляПоясняющийТекст 		= ЦветаСтиля.ПоясняющийТекст;
	ЦветСтиляИнформационнойНадписи  = ЦветаСтиля.ТекстИнформационнойНадписи;
	
	ВариантОтключенияОтключить = 1;
	ВариантОтключенияУдалить = 0;
	Если РазделениеВключено Тогда
		Элементы.ОтключениеСервиса.Заголовок = НСтр("ru = 'Отключение сервиса'");
	Иначе
		Элементы.ОтключениеСервиса.Заголовок = НСтр("ru = 'Отключение сервиса, изменение настроек подключения'");
	КонецЕсли;
	
	ВыполнитьНачальноеЗаполнение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ТребуетсяОбновитьИнтерфейс Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;
	ПриНачалеЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ПодключениеВыполняется Тогда
		Если ЗавершениеРаботы Тогда
			ТекстПредупреждения = НСтр("ru = 'Подключение к сервису не завершено.
				|Если программа будет закрыта, подключение к сервису не будет выполнено.'");
		КонецЕсли;
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ФизическиеЛица" И Источник = Ответственный Тогда
		ЗаполнитьРеквизитыОтветственного(Ответственный, Логин, ЭлектроннаяПочта, МобильныйТелефон, Пол, ОтветственныйНаименование);
		ОбновитьЭУОтветственный(ЭтаФорма);
	ИначеЕсли ИмяСобытия = "ИзменениеПравилВыгрузкиИнтеграцияУправлениеПерсоналом" Тогда
		ОбновитьЗаголовокЛичныеКабинеты();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИмяДоменаПриИзменении(Элемент)
	
	ПроверитьИмяДомена();
	Если ИмяДоменаСоответствуетПравилам И Не ПустаяСтрока(ИмяДомена) Тогда
		ИмяДоменаЗарезервировано = Ложь;
		Элементы.ДекорацияИмяДоменаПояснение.Заголовок  = НСтр("ru = 'Выполняется проверка уникальности адреса. Пожалуйста подождите ...'");
		НачатьРезервированиеИмениДомена();
		ПриНачалеЗадания();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяДоменаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	ПроверитьИмяДомена(Текст);
КонецПроцедуры

&НаКлиенте
Процедура АбонентИнтернетПоддержкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка 		= Ложь;
	ИдентификаторИП = ВыбранноеЗначение;
	АбонентИнтернетПоддержки 	= Элементы.АбонентИнтернетПоддержки.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	ЗаполнитьРеквизитыОтветственного(Ответственный, Логин, ЭлектроннаяПочта, МобильныйТелефон, Пол, ОтветственныйНаименование);
	ОбновитьЭУОтветственный(ЭтаФорма);
	ОбновитьСообщениеОПубликации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйЛокальноПриИзменении(Элемент)
	
	ЗаполнитьРеквизитыОтветственного(Ответственный, Логин, ЭлектроннаяПочта, МобильныйТелефон, Пол, ОтветственныйНаименование);
	ОбновитьЭУОтветственный(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантПродолженияАктивироватьПриИзменении(Элемент)
	ВариантПродолженияОтключить = 0;
	ОбновитьЭУАктивацииСервиса(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВариантПродолженияОтключитьПриИзменении(Элемент)
	ВариантПродолженияАктивировать = 0;
	ОбновитьЭУАктивацииСервиса(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗаявокНаОтпускКонтролироватьДатуНачалаОтпускаПриПодачеЗаявленияПриИзменении(Элемент)
	
	Если Не НастройкиЗаявокНаОтпуск.КонтролироватьДатуНачалаОтпускаПриПодачеЗаявления Тогда
		НастройкиЗаявокНаОтпуск.КоличествоДнейДоНачалаОтпуска = 0;
		Если СохранитьНастройкиЗаявокНаОтпуск() Тогда
			НастройкиЗаявокНаОтпускПрежнееЗначение.КонтролироватьДатуНачалаОтпускаПриПодачеЗаявления = НастройкиЗаявокНаОтпуск.КонтролироватьДатуНачалаОтпускаПриПодачеЗаявления;
			НастройкиЗаявокНаОтпускПрежнееЗначение.КоличествоДнейДоНачалаОтпуска = НастройкиЗаявокНаОтпуск.КоличествоДнейДоНачалаОтпуска;
			ОбновитьЭУКоличествоДнейДоНачалаОтпуска(ЭтаФорма);
		Иначе
			НастройкиЗаявокНаОтпуск.КонтролироватьДатуНачалаОтпускаПриПодачеЗаявления = НастройкиЗаявокНаОтпускПрежнееЗначение.КонтролироватьДатуНачалаОтпускаПриПодачеЗаявления;
			НастройкиЗаявокНаОтпуск.КоличествоДнейДоНачалаОтпуска = НастройкиЗаявокНаОтпускПрежнееЗначение.КоличествоДнейДоНачалаОтпуска;
		КонецЕсли;
	Иначе
		// включена настройка, обновляем форму
		ОбновитьЭУКоличествоДнейДоНачалаОтпуска(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗаявокНаОтпускКоличествоДнейДоНачалаОтпускаПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииКоличествоДнейДоНачалаОтпуска", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗаявокНаОтпускКоличествоДнейДоНачалаОтпускаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	НастройкиЗаявокНаОтпуск.КоличествоДнейДоНачалаОтпуска = Число(Текст);
	ПриИзмененииКоличествоДнейДоНачалаОтпуска();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗаявокНаОтпускКонтролироватьНаличиеОтпускаМенее14днейПриИзменении(Элемент)
	
	Если СохранитьНастройкиЗаявокНаОтпуск() Тогда
		НастройкиЗаявокНаОтпускПрежнееЗначение.КонтролироватьНаличиеОтпускаМенее14дней = НастройкиЗаявокНаОтпуск.КонтролироватьНаличиеОтпускаМенее14дней;
	Иначе
		НастройкиЗаявокНаОтпуск.КонтролироватьНаличиеОтпускаМенее14дней = НастройкиЗаявокНаОтпускПрежнееЗначение.КонтролироватьНаличиеОтпускаМенее14дней;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗаявокНаОтпускПроверятьНаличиеРабочихДнейВПериодеОтпускаПриИзменении(Элемент)
	
	Если СохранитьНастройкиЗаявокНаОтпуск() Тогда
		НастройкиЗаявокНаОтпускПрежнееЗначение.ПроверятьНаличиеРабочихДнейВПериодеОтпуска = НастройкиЗаявокНаОтпуск.ПроверятьНаличиеРабочихДнейВПериодеОтпуска;
	Иначе
		НастройкиЗаявокНаОтпуск.ПроверятьНаличиеРабочихДнейВПериодеОтпуска = НастройкиЗаявокНаОтпускПрежнееЗначение.ПроверятьНаличиеРабочихДнейВПериодеОтпуска;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗаявокНаОтпускОграничиватьПредоставлениеОтпускаАвансомПриИзменении(Элемент)
	
	Если Не НастройкиЗаявокНаОтпуск.ОграничиватьПредоставлениеОтпускаАвансом Тогда
		НастройкиЗаявокНаОтпуск.МаксимальноеКоличествоДнейОтпускаАвансом = 0;
		Если СохранитьНастройкиЗаявокНаОтпуск() Тогда
			НастройкиЗаявокНаОтпускПрежнееЗначение.ОграничиватьПредоставлениеОтпускаАвансом = НастройкиЗаявокНаОтпуск.ОграничиватьПредоставлениеОтпускаАвансом;
			НастройкиЗаявокНаОтпускПрежнееЗначение.МаксимальноеКоличествоДнейОтпускаАвансом = НастройкиЗаявокНаОтпуск.МаксимальноеКоличествоДнейОтпускаАвансом;
			ОтпускАвансомНеПредоставляется 	= 0;
			ОтпускАвансомПредоставляется 	= 0;
			ОбновитьЭУМаксимальноеКоличествоДнейОтпускаАвансом(ЭтаФорма);
		Иначе
			НастройкиЗаявокНаОтпуск.ОграничиватьПредоставлениеОтпускаАвансом = НастройкиЗаявокНаОтпускПрежнееЗначение.ОграничиватьПредоставлениеОтпускаАвансом;
			НастройкиЗаявокНаОтпуск.МаксимальноеКоличествоДнейОтпускаАвансом = НастройкиЗаявокНаОтпускПрежнееЗначение.МаксимальноеКоличествоДнейОтпускаАвансом;
		КонецЕсли;
	Иначе
		НастройкиЗаявокНаОтпуск.МаксимальноеКоличествоДнейОтпускаАвансом = 0;
		Если СохранитьНастройкиЗаявокНаОтпуск() Тогда
			НастройкиЗаявокНаОтпускПрежнееЗначение.ОграничиватьПредоставлениеОтпускаАвансом = НастройкиЗаявокНаОтпуск.ОграничиватьПредоставлениеОтпускаАвансом;
			НастройкиЗаявокНаОтпускПрежнееЗначение.МаксимальноеКоличествоДнейОтпускаАвансом = НастройкиЗаявокНаОтпуск.МаксимальноеКоличествоДнейОтпускаАвансом;
			ОтпускАвансомПредоставляется = 0;
			ОтпускАвансомНеПредоставляется = 1;
			ОбновитьЭУМаксимальноеКоличествоДнейОтпускаАвансом(ЭтаФорма);
		Иначе
			НастройкиЗаявокНаОтпуск.ОграничиватьПредоставлениеОтпускаАвансом = НастройкиЗаявокНаОтпускПрежнееЗначение.ОграничиватьПредоставлениеОтпускаАвансом;
			НастройкиЗаявокНаОтпуск.МаксимальноеКоличествоДнейОтпускаАвансом = НастройкиЗаявокНаОтпускПрежнееЗначение.МаксимальноеКоличествоДнейОтпускаАвансом;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗаявокНаОтпускМаксимальноеКоличествоДнейОтпускаАвансомПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииМаксимальноеКоличествоДнейОтпускаАвансом", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗаявокНаОтпускМаксимальноеКоличествоДнейОтпускаАвансомИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	НастройкиЗаявокНаОтпуск.МаксимальноеКоличествоДнейОтпускаАвансом = Число(Текст);
	ПриИзмененииМаксимальноеКоличествоДнейОтпускаАвансом();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявленияНаДСВПриИзменении(Элемент)
	
	Если Не ИспользуемаяФункциональностьСервиса.ЗаявленияНаДСВ Тогда
		
		ИспользуемаяФункциональностьСервиса.СпособРасчетаДСВПроцентом = Ложь;
		ИспользуемаяФункциональностьСервиса.СпособРасчетаДСВПроцентомНеБолееСуммы = Ложь;
		ИспользуемаяФункциональностьСервиса.СпособРасчетаДСВСуммой = Ложь;
		
		СтрокаСвойств = "ЗаявленияНаДСВ,СпособРасчетаДСВПроцентом,СпособРасчетаДСВПроцентомНеБолееСуммы,СпособРасчетаДСВСуммой";
		
		Если СохранитьНастройкиИспользуемаяФункциональностьСервиса() Тогда
			ЗаполнитьЗначенияСвойств(ИспользуемаяФункциональностьСервисаПрежнееЗначение, ИспользуемаяФункциональностьСервиса, СтрокаСвойств);
			ОбновитьЭУСпособРасчетаДСВ(ЭтаФорма);
		Иначе
			ЗаполнитьЗначенияСвойств(ИспользуемаяФункциональностьСервиса, ИспользуемаяФункциональностьСервисаПрежнееЗначение, СтрокаСвойств);
		КонецЕсли;
	Иначе
		// включена настройка, обновляем форму
		ОбновитьЭУСпособРасчетаДСВ(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаДСВПроцентомПриИзменении(Элемент)
	
	Если СохранитьНастройкиИспользуемаяФункциональностьСервиса() Тогда
		ИспользуемаяФункциональностьСервисаПрежнееЗначение.СпособРасчетаДСВПроцентом = ИспользуемаяФункциональностьСервиса.СпособРасчетаДСВПроцентом;
	Иначе
		ИспользуемаяФункциональностьСервиса.СпособРасчетаДСВПроцентом = ИспользуемаяФункциональностьСервисаПрежнееЗначение.СпособРасчетаДСВПроцентом;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаДСВПроцентомНеБолееСуммыПриИзменении(Элемент)
	
	Если СохранитьНастройкиИспользуемаяФункциональностьСервиса() Тогда
		ИспользуемаяФункциональностьСервисаПрежнееЗначение.СпособРасчетаДСВПроцентомНеБолееСуммы = ИспользуемаяФункциональностьСервиса.СпособРасчетаДСВПроцентомНеБолееСуммы;
	Иначе
		ИспользуемаяФункциональностьСервиса.СпособРасчетаДСВПроцентомНеБолееСуммы = ИспользуемаяФункциональностьСервисаПрежнееЗначение.СпособРасчетаДСВПроцентомНеБолееСуммы;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаДСВСуммойПриИзменении(Элемент)
	
	Если СохранитьНастройкиИспользуемаяФункциональностьСервиса() Тогда
		ИспользуемаяФункциональностьСервисаПрежнееЗначение.СпособРасчетаДСВСуммой = ИспользуемаяФункциональностьСервиса.СпособРасчетаДСВСуммой;
	Иначе
		ИспользуемаяФункциональностьСервиса.СпособРасчетаДСВСуммой = ИспользуемаяФункциональностьСервисаПрежнееЗначение.СпособРасчетаДСВСуммой;
	КонецЕсли;
	
КонецПроцедуры

#Область РедактированиеМесяцаСтрокой

&НаКлиенте
Процедура МесяцПубликацииПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "МесяцПубликации", "МесяцПубликацииСтрокой");
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцПубликацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "МесяцПубликации", "МесяцПубликацииСтрокой", Направление);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцПубликацииАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцПубликацииОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцПубликацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "МесяцПубликации", "МесяцПубликацииСтрокой", Ложь);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ИспользуетсяКадровыйЭДОПриИзменении(Элемент)
	
	СохранитьНастройкуИспользуетсяКадровыйЭДО(ИспользуетсяКадровыйЭДО);
	ПрочитатьОбновитьНастройкиИспользуемаяФункциональность();
	Оповестить("ИспользуетсяКадровыйЭДОЗаписанаКонстанта", ИспользуетсяКадровыйЭДО);
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаКлиенте
Процедура ДнейСохраненияПубликацииПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииДнейСохраненияПубликации", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДнейСохраненияПубликацииИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СохранитьНастройкуДнейСохраненияПубликации(Число(Текст));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтпускАвансомНеПредоставляетсяПриИзменении(Элемент)
	
	ОтпускАвансомПредоставляется = 0;
	НастройкиЗаявокНаОтпуск.МаксимальноеКоличествоДнейОтпускаАвансом = 0;
	Если СохранитьНастройкиЗаявокНаОтпуск() Тогда
		НастройкиЗаявокНаОтпускПрежнееЗначение.МаксимальноеКоличествоДнейОтпускаАвансом = НастройкиЗаявокНаОтпуск.МаксимальноеКоличествоДнейОтпускаАвансом;
		ОбновитьЭУМаксимальноеКоличествоДнейОтпускаАвансом(ЭтаФорма);
	Иначе
		НастройкиЗаявокНаОтпуск.МаксимальноеКоличествоДнейОтпускаАвансом = НастройкиЗаявокНаОтпускПрежнееЗначение.МаксимальноеКоличествоДнейОтпускаАвансом;
		ОтпускАвансомПредоставляется = 1;
		ОтпускАвансомНеПредоставляется = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтпускАвансомПредоставляетсяПриИзменении(Элемент)
	ОтпускАвансомНеПредоставляется = 0;
	ОбновитьЭУМаксимальноеКоличествоДнейОтпускаАвансом(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеДокументаСЭПНедоступноПриИзменении(Элемент)
	
	Если СохранитьНастройкиИспользуемаяФункциональностьСервиса() Тогда
		ИспользуемаяФункциональностьСервисаПрежнееЗначение.ПолучениеДокументаСЭПНедоступно = ИспользуемаяФункциональностьСервиса.ПолучениеДокументаСЭПНедоступно;
	Иначе
		ИспользуемаяФункциональностьСервиса.ПолучениеДокументаСЭПНедоступно = ИспользуемаяФункциональностьСервисаПрежнееЗначение.ПолучениеДокументаСЭПНедоступно;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПолученияСогласияНаПрисоединениеККЭДОПриИзменении(Элемент)
	СохранитьНастройкуСпособПолученияСогласияНаПрисоединениеККЭДО(СпособПолученияСогласияНаПрисоединениеККЭДО);
КонецПроцедуры

&НаКлиенте
Процедура АвтоФормированиеСогласийПриИзменении(Элемент)
	АвтоФормированиеСогласийПриИзмененииНаСервере(АвтоФормированиеСогласий);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодробноОСервисе(Команда)
	
	КабинетСотрудникаКлиент.ОткрытьНавигационнуюСсылкуПодробноОСервисе();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Команда)
	
	ПодключитьИнтернетПоддержкуПользователей();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключить(Команда)
	
	Если ИмяДоменаЗарезервировано И ДанныеОтветственногоЗаполнены И ЗначениеЗаполнено(ИмяПриложения) Тогда
		НачатьПодключениеКСервису();
		ПриНачалеЗадания();
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Для подключения к сервису заполните данные в форме'");
		ПоказатьПредупреждение( ,ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПубликации(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбновитьИнформациюПодключения", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура("Приложение, РежимПодключения", Приложение, Не СервисПодключен);
	Если СервисПодключен Тогда
		ОткрытьФорму("Обработка.ИнтеграцияУправлениеПерсоналом.Форма.НастройкаПравилВыгрузки",
			ПараметрыОткрытия,ЭтаФорма,,,,ОповещениеОЗакрытии);
	Иначе
		ОткрытьФорму("Обработка.ИнтеграцияУправлениеПерсоналом.Форма.НастройкаПравилВыгрузки",
			ПараметрыОткрытия,ЭтаФорма,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееОДоступеКДанным(Команда)
	
	КабинетСотрудникаКлиент.ОткрытьНавигационнуюСсылкуОписаниеДоступаКДанным();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееОПоддерживаемыхБраузерах(Команда)
	
	КабинетСотрудникаКлиент.ОткрытьНавигационнуюСсылкуПоддерживаемыеБраузеры();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДанныеСервиса(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ИзменитьДанныеСервисаЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура("СервисКабинетСотрудникаВЛокальнойСети", СервисКабинетСотрудникаВЛокальнойСети);
	ОткрытьФорму("ОбщаяФорма.ИзменитьНастройкиСервиса",
		ПараметрыОткрытия,ЭтаФорма,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпубликоватьРасчетныеЛистки(Команда)
	
	ДлительнаяОперация = ДлительнаяОперацияОпубликоватьРасчетныеЛистки();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Истина;
	ПараметрыОжидания.ОповещениеПользователя.Текст = НСтр("ru = 'Выгрузка прошла успешно.'");
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОпубликоватьРасчетныеЛисткиЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПубликацииРасчетныхЛистков(Команда)
	
	ОткрытьФорму("Обработка.ПубликацияРасчетныхЛистковКабинетСотрудника.Форма.ПубликацияРасчетныхЛистков",,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПривязкуАбонента(Команда)
	
	ИнтернетПоддержкаПодключена = ИнтернетПоддержкаПодключена();
	Если Не ИнтернетПоддержкаПодключена Тогда
		ПодключитьИнтернетПоддержкуПользователей();
	Иначе
		ИзменитьАбонентаСервиса()
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуПользователей()

	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.БазоваяФункциональностьБИП") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект);
		Модуль.ПодключитьИнтернетПоддержкуПользователей(ОповещениеОЗакрытии, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьАбонентаСервиса()

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ИзменитьПривязкуАбонентаЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура("ТекущийИдентификаторПользователяИП,ТекущийИдентификаторАбонентаИП,РазделениеВключено",
		ТекущийИдентификаторПользователяИП, ТекущийИдентификаторАбонентаИП, РазделениеВключено);
	ОткрытьФорму("ОбщаяФорма.ИзменитьАбонентаСервиса",
		ПараметрыОткрытия,ЭтаФорма,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОтключитьСервис(Команда)
	
	ШаблонТекстаВопроса = НСтр("ru = 'Отключить сервис 1С:Кабинет сотрудника по адресу %1, данные сервиса не будут удалены?'");
	ТекстВопроса = СтрШаблон(ШаблонТекстаВопроса, АдресСервиса(ЭтаФорма));
	
	ДополнительныеПараметры = Новый Структура("РежимОтключенияУдалить", Ложь);
	ОбработчикРезультата = Новый ОписаниеОповещения("ПриОтветеНаВопросОтключитьСервис", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОбработчикРезультата, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСервис(Команда)
	
	ШаблонТекстаВопроса = НСтр("ru = 'Удалить все данные сервиса 1С:Кабинет сотрудника по адресу %1?'");
	ТекстВопроса = СтрШаблон(ШаблонТекстаВопроса, АдресСервиса(ЭтаФорма));
	
	ДополнительныеПараметры = Новый Структура("РежимОтключенияУдалить", Истина);
	ОбработчикРезультата = Новый ОписаниеОповещения("ПриОтветеНаВопросОтключитьСервис", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОбработчикРезультата, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкиЗаполнения(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбновитьИнформациюПодключения", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура("Приложение", Приложение);
	ОткрытьФорму("Обработка.ИнтеграцияУправлениеПерсоналом.Форма.ОшибкиЗаполненияОбъектов",ПараметрыОткрытия,ЭтаФорма,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОшибокПубликации(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КлючВарианта", "ОшибкиПубликации");
	ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
	ОткрытьФорму("Отчет.ОшибкиПубликацииКабинетСотрудника.Форма", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовоеПодключение(Команда)
	
	ПерейтиКНовомуПодключению();
	ПриНачалеЗадания();
	ИмяДомена = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСведенияОбОплате(Команда)
	
	НачатьОбновлениеСведенийОбОплате();
	ПриНачалеЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиИзФайла(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = НСтр("ru='Выберите файл с настройками подключения к сервису'");
	ДиалогВыбораФайла.Фильтр = НСтр("ru = 'Файл с настройками (*.json)|*.json'");
	ОбработчикЗавершения = Новый ОписаниеОповещения("ФайлНастроекПослеВыбора", ЭтотОбъект);
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(ОбработчикЗавершения, ДиалогВыбораФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьЛокальнуюВерсию(Команда)
	
	Если ЗначениеЗаполнено(АдресПриложенияЛокально) 
		И ЗначениеЗаполнено(КлючИдентификаторКлиента)
		И ЗначениеЗаполнено(КлючСекретКлиента)
		И ДанныеОтветственногоЗаполнены Тогда
		НачатьПодключениеКСервисуЛокально();
		ПриНачалеЗадания();
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Для подключения к сервису заполните данные в форме'");
		ПоказатьПредупреждение( ,ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПравилаОбработкиЗаявокСотрудников(Команда)
	ОткрытьФорму("Обработка.НастройкаПравилОбработкиЗаявокСотрудников.Форма");
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКодАктивации(Команда)
	
	// если повторное получение кода
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"КодАктивации", "Видимость", Ложь);
	
	НачатьПолучениеКодаАктивации();
	ПриНачалеЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключениеПоКодуАктивации(Команда)
	
	Если КодАктивацииКорректный() Тогда
		НачатьПодключениеПоКодуАктивации();
		ПриНачалеЗадания();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидыКонтактнойИнформации(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ИзменитьВидыКонтактнойИнформацииЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура("ВидКИМобильныйТелефон,ВидКИАдресЭлектроннойПочты", ВидКИМобильныйТелефон, ВидКИАдресЭлектроннойПочты);
	ОткрытьФорму("Обработка.ИнтеграцияУправлениеПерсоналом.Форма.ИзменитьВидыКонтактнойИнформации",ПараметрыОткрытия,ЭтаФорма,,,,
			ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбмен(Команда)
	ВыполнитьОбменССервисом();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбменВыгрузитьЖурнал(Команда)
	
	ЗаголовокВопроса = НСтр("ru = 'Подтверждение'");
	ТекстВопроса = НСтр("ru = 'Подготовка данных для отправки в службу технической поддержки сервиса.
		|Обмен будет выполнен с записью событий в журнал регистрации и выгрузкой журнал в файл для отправки в службу технической поддержки.'");
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыполнитьОбменВыгрузитьЖурналПродолжение", ЭтаФорма);
	ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, ИнтеграцияУправлениеПерсоналомКлиента.ОписаниеКнопокВопроса(),,,ЗаголовокВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПубликуемыхДанных(Команда)
	
	ПараметрыОткрытия = Новый Структура("Приложение", Приложение);
	ОткрытьФорму("Обработка.ИнтеграцияУправлениеПерсоналом.Форма.РегистрацияИзмененийДляОбмена",ПараметрыОткрытия,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЖурналРегистрации(Команда)
	
	ОтборЖурналаРегистрации = ОтборЖурналаРегистрации(ПредопределенноеЗначение("Перечисление.ВидыСобытийОбменаУправлениеПерсоналом.Обмен"), "");
	ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(ОтборЖурналаРегистрации, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЖурналРегистрацииОшибки(Команда)
	
	ОтборЖурналаРегистрации = ОтборЖурналаРегистрации(Неопределено, "Ошибка");
	ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(ОтборЖурналаРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПубликуемуюСтруктураКомпании(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ИзменитьПубликуемуюСтруктураКомпанииЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура("ПубликоватьСтруктуруЮридическихЛиц,СервисПодключен", ПубликоватьСтруктуруЮридическихЛиц, Истина);
	
	ОткрытьФорму("Обработка.ИнтеграцияУправлениеПерсоналом.Форма.ИзменитьСтруктуруКомпании",ПараметрыОткрытия,ЭтаФорма,,,,
			ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПубликуемуюСтруктураКомпанииПриПодключении(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ИзменитьПубликуемуюСтруктураКомпанииЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура("ПубликоватьСтруктуруЮридическихЛиц,СервисПодключен", ПубликоватьСтруктуруЮридическихЛиц, Ложь);
	
	ОткрытьФорму("Обработка.ИнтеграцияУправлениеПерсоналом.Форма.ИзменитьСтруктуруКомпании",ПараметрыОткрытия,ЭтаФорма,,,,
			ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КупитьЛицензии(Команда)
	
	КабинетСотрудникаКлиент.ОткрытьНавигационнуюСсылкуПокупкаЛицензий();

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступностьАдреса(Команда)
	
	ДлительнаяОперация = НачатьПроверкуДоступностиАдреса();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			Новый ОписаниеОповещения("ПроверкаДоступностиАдресаПоИмениЗавершение", ЭтотОбъект),
			ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОбсуждений(Команда)
	
	ОткрытьФорму("ОбщаяФорма.НастройкаОбсужденийКабинетСотрудника",,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкиЗаполненияКабинеты(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбновитьИнформациюПодключения", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура("Приложение,ТолькоОшибкиЗаполнения", Приложение, Истина);
	ОткрытьФорму("Обработка.ИнтеграцияУправлениеПерсоналом.Форма.ПубликуемыеФизическиеЛица",ПараметрыОткрытия,
				ЭтаФорма,,,,ОповещениеОЗакрытии);	
		
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСогласия(Команда)
	ДлительнаяОперация = СформироватьСогласияДлительнаяОперация(УникальныйИдентификатор);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("СформироватьСогласияЗавершение", ЭтотОбъект);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьШаблонСогласияБумажный(Команда)
	ПараметрыОткрытия = ПараметрыОткрытияШаблонаСогласия(Истина);
	ОткрытьФорму("ОбщаяФорма.РедактированиеТабличногоДокумента", ПараметрыОткрытия, ЭтотОбъект);	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьШаблонСогласияУНЭП(Команда)
	ПараметрыОткрытия = ПараметрыОткрытияШаблонаСогласия(Ложь);
	ОткрытьФорму("ОбщаяФорма.РедактированиеТабличногоДокумента", ПараметрыОткрытия, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОтложенноеПодключение(Команда)
	ОчиститьСообщения();
	НачатьПроверкуОтложенногоПодключения();
	ПриНачалеЗадания();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНастройкиПодключения(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ИзменитьНастройкиПодключенияЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура("Приложение", Приложение);
	ОткрытьФорму("Обработка.ИнтеграцияУправлениеПерсоналом.Форма.ИзменитьНастройкиПодключения",
		ПараметрыОткрытия,ЭтаФорма,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
		
КонецПроцедуры

&НаКлиенте
Процедура ИсключенияИзПравилПубликации(Команда)
	
	ОткрытьФорму("РегистрСведений.ИсключенияИзПравилПубликацииКабинетСотрудника.ФормаСписка",,ЭтаФорма,ЭтаФорма);
	
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиПолученияДанных

&НаСервере
Процедура ЗапуститьФоновоеЗадание(ИмяМетода, ИмяЗадания, ИмяДекорации, ПараметрыМетода = Неопределено, КлючФоновогоЗадания = "")
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	ПараметрыВыполненияВФоне.ОжидатьЗавершение = 0;
	Если ЗначениеЗаполнено(КлючФоновогоЗадания) Тогда
		ПараметрыВыполненияВФоне.КлючФоновогоЗадания = КлючФоновогоЗадания;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			ИмяДекорации,
			"Видимость",
			Истина);
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыМетода, ПараметрыВыполненияВФоне);
	
	НовоеЗадание = Новый Структура("Имя,ДлительнаяОперация,ИмяДекорации");
	НовоеЗадание.Имя = ИмяЗадания;
	НовоеЗадание.ДлительнаяОперация = РезультатВыполнения;
	НовоеЗадание.ИмяДекорации = ИмяДекорации;
	
	АктивноеЗадание = Новый ФиксированнаяСтруктура(НовоеЗадание);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриНачалеЗадания()
	
	Если ЗначениеЗаполнено(АктивноеЗадание) Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			АктивноеЗадание.ДлительнаяОперация,
			Новый ОписаниеОповещения("ПриЗавершенииЗадания", ЭтотОбъект, АктивноеЗадание.Имя),
			ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииЗадания(Результат, ИмяЗадания) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			АктивноеЗадание.ИмяДекорации,
			"Видимость",
			Ложь);
	
	АктивноеЗадание = Неопределено;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ТекстСообщения = НСтр("ru = 'При выполнении фонового задания возникла ошибка:'") + Символы.ПС + Результат.КраткоеПредставлениеОшибки;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
		
	Если ИмяЗадания = "ПолучениеАбонентов" Тогда
		ПолучениеАбонентовЗавершение(Результат.АдресРезультата);
	ИначеЕсли ИмяЗадания = "ЗарезервироватьИмяДомена" Тогда
		РезервированиеИмениДоменаЗавершение(Результат.АдресРезультата);
	ИначеЕсли ИмяЗадания = "ПодключениеКСервису" Тогда
		ПодключениеКСервисуЗавершение(Результат.АдресРезультата);
		Если ПодключениеВыполнено Тогда
			ПриНачалеЗадания();
			НачатьПубликациюДанных();
			ПодключитьОбработчикОжидания("ОтложенноеОбновлениеИнтерфейса", 0.5, Истина);
		КонецЕсли;
	ИначеЕсли ИмяЗадания = "ПроверкаОтложенногоПодключения" Тогда
		ПроверкаОтложенногоПодключенияЗавершение(Результат.АдресРезультата);
		Если ПодключениеВыполнено Тогда
			ПриНачалеЗадания();
			НачатьПубликациюДанных();
			ПодключитьОбработчикОжидания("ОтложенноеОбновлениеИнтерфейса", 0.5, Истина);
		КонецЕсли;
	ИначеЕсли ИмяЗадания = "ЗавершитьСценарийОтложенногоПодключения" Тогда
		ПриНачалеЗадания();
		НачатьПубликациюДанных();
	ИначеЕсли ИмяЗадания = "ПолучениеИнформацииОСервисе" Тогда
		ПолучениеИнформацииОСервисеЗавершение(Результат.АдресРезультата);
		Если ЗавершитьСценарийОтложенногоПодключения Тогда
			ЗавершитьСценарийОтложенногоПодключения();
			ПриНачалеЗадания();
		КонецЕсли;
	ИначеЕсли ИмяЗадания = "ОбновлениеСвойствПриложения" Тогда
		ОбновлениеСвойствПриложенияЗавершение(Результат.АдресРезультата);
	ИначеЕсли ИмяЗадания = "ИзменениеАбонентаИнтернетПоддержки" Тогда
		ИзменениеАбонентаИнтернетПоддержкиЗавершение(Результат.АдресРезультата);
	ИначеЕсли ИмяЗадания = "ОбновлениеСведенийОбОплате" Тогда
		ОбновлениеСведенийОбОплатеЗавершение(Результат.АдресРезультата);
	ИначеЕсли ИмяЗадания = "ПодключениеКСервисуЛокально" Тогда
		ПодключениеКСервисуЛокальноЗавершение(Результат.АдресРезультата);
		Если ПодключениеВыполнено Тогда
			ПриНачалеЗадания();
			НачатьПубликациюДанных();
			ПодключитьОбработчикОжидания("ОтложенноеОбновлениеИнтерфейса", 0.5, Истина);
		КонецЕсли;
	ИначеЕсли ИмяЗадания = "ОбновлениеОтветственного" Тогда
		ОбновлениеОтветственногоЗавершение(Результат.АдресРезультата);
	ИначеЕсли ИмяЗадания = "ПолучениеКодаАктивации" Тогда
		ПолучениеКодаАктивацииЗавершение(Результат.АдресРезультата);
	ИначеЕсли ИмяЗадания = "ПодключениеПоКодуАктивации" Тогда
		ПодключениеПоКодуАктивацииЗавершение(Результат.АдресРезультата);
		Если ПодключениеВыполнено Тогда
			ПриНачалеЗадания();
		КонецЕсли;
	ИначеЕсли ИмяЗадания = "ПроверкаДоступностиИнтернетПоддержки" Тогда
		ПроверкаДоступностиИнтернетПоддержкиЗавершение(Результат.АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачатьПолучениеАбонентов()
	
	ИмяЗадания 		= "ПолучениеАбонентов";
	ИмяМетода 		= "КабинетСотрудникаМенеджерСервиса.ПолучитьАбонентовИнтернетПоддержкиФоновоеЗадание";
	ИмяДекорации 	= "";
	ЗапуститьФоновоеЗадание(ИмяМетода, ИмяЗадания, ИмяДекорации);
	
КонецПроцедуры

&НаСервере
Процедура ПолучениеАбонентовЗавершение(АдресРезультата)
	
	Элементы.СтраницыНовоеПодключение.ТекущаяСтраница = Элементы.СтраницаПодключение;
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	// Результат проверки доступности сервиса интернет-поддержки.
	Если Результат.ИнтернетПоддержкаДоступна Или РазделениеВключено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ИнтернетПоддержка", "Видимость", Ложь);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ИнтернетПоддержка", "Видимость", Истина);
	КонецЕсли;
	
	Если Результат.СообщениеОбОшибке <> Неопределено Тогда
		
		Если РазделениеВключено И Не Результат.ИнтернетПоддержкаДоступна Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось выполнить подключение сервиса в связи с отсутствием прав на использование интернет-поддержки.'")
				+ Символы.ПС
				+ НСтр("ru = 'По вопросу предоставления таких прав обратитесь к специалистам, осуществляющим обслуживание информационной базы в вашей организации.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'При получении данных для подключения к сервису возникла ошибка:'") + Символы.ПС + Результат.СообщениеОбОшибке;	
		КонецЕсли;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"НастройкиПодключения", "Доступность", Истина);
	
	Элементы.АбонентИнтернетПоддержки.СписокВыбора.Очистить();
	АбонентИнтернетПоддержки 	= "";
	ИдентификаторИП = "";
	
	// Результат.АбонентыИП - массив структур, возвращаемое значение метода
	// КабинетСотрудникаМенеджерСервиса.АбонентыИППользователяИП.
	Для каждого ЭлементМассива Из Результат.АбонентыИП Цикл
		Элементы.АбонентИнтернетПоддержки.СписокВыбора.Добавить(ЭлементМассива.Идентификатор, ЭлементМассива.Наименование);
	КонецЦикла;
	
	Если Элементы.АбонентИнтернетПоддержки.СписокВыбора.Количество() > 0 Тогда
		АбонентИнтернетПоддержки 	= Элементы.АбонентИнтернетПоддержки.СписокВыбора[0];
		ИдентификаторИП = Элементы.АбонентИнтернетПоддержки.СписокВыбора[0].Значение;
	КонецЕсли;
	
	Если Элементы.АбонентИнтернетПоддержки.СписокВыбора.Количество() > 1 Тогда
		Элементы.АбонентИнтернетПоддержки.КнопкаВыпадающегоСписка = Истина;
		Элементы.ВыборАбонента.Видимость = Истина;
	Иначе
		Элементы.ВыборАбонента.Видимость = Ложь;
	КонецЕсли;
	
	ЗаполнитьИмяПриложения();
	ЗаполнитьОтветственного();
	
КонецПроцедуры

&НаСервере
Процедура НачатьРезервированиеИмениДомена()

	ИмяЗадания 		= "ЗарезервироватьИмяДомена";
	ИмяМетода 		= "КабинетСотрудникаМенеджерСервиса.ЗарезервироватьИмяДоменаФоновоеЗадание";
	ИмяДекорации 	= "ИндикаторДлительнойОперацииРезервированиеИмениДомена";
	
	ПараметрыМетода = Новый Структура("ИмяДомена,ИдентификаторВладельца", ИмяДомена, ИдентификаторИП);
	
	ЗапуститьФоновоеЗадание(ИмяМетода, ИмяЗадания, ИмяДекорации, ПараметрыМетода);

КонецПроцедуры

&НаСервере
Процедура РезервированиеИмениДоменаЗавершение(АдресРезультата)
	
	// Результат - структура, возвращаемое значение метода
	// КабинетСотрудникаМенеджерСервиса.ЗарезервироватьИмяДомена.
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.СообщениеОбОшибке <> Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'При проверке уникальности адреса сервиса возникла ошибка:'") + Символы.ПС + Результат.СообщениеОбОшибке;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ИмяДоменаЗарезервировано = Результат.Зарезервировано;
	
	Если ИмяДоменаЗарезервировано Тогда
		ЦветТекстаЭУ 		= ЦветСтиляТекстаПоля;
		ЦветТекстаСообщения = ЦветСтиляПоясняющийТекст;
		СообщениеПроверки = СтрШаблон(
				НСтр("ru = 'адрес ""%1"" зарезервирован для вашего сервиса'"),
				СтрокаАдресПриложения());
	Иначе	
		ЦветТекстаЭУ 		= ЦветСтиляПоясняющийОшибкуТекст;
		ЦветТекстаСообщения = ЦветСтиляПоясняющийОшибкуТекст;
		СообщениеПроверки = СтрШаблон(
				НСтр("ru = 'К сожалению, адрес ""%1"" уже занят. Придумайте другой адрес'"),
				СтрокаАдресПриложения());
	КонецЕсли;
	
	Элементы.ДекорацияИмяДоменаПояснение.Заголовок  = СообщениеПроверки;
	Элементы.ДекорацияИмяДоменаПояснение.ЦветТекста = ЦветТекстаСообщения;
	Элементы.ИмяДомена.ЦветТекста = ЦветТекстаЭУ;
	
	
КонецПроцедуры

&НаСервере
Процедура НачатьПодключениеКСервису()
	
	ПодключениеВыполняется = Истина;
	
	УстановитьДоступностьЭУПодключенияКСервису(Истина);
	
	ИмяЗадания 		= "ПодключениеКСервису";
	ИмяМетода 		= "КабинетСотрудникаМенеджерСервиса.ПодключитьСервисФоновоеЗадание";
	ИмяДекорации 	= "ГруппаИндикацияДлительнойОперацииПодключение";
	
	ПараметрыМетода = КабинетСотрудникаМенеджерСервиса.ОписаниеДанныеДляПодключения();
	ПараметрыМетода.ИмяПриложения 	= СОКРЛП(ИмяПриложения);
	ПараметрыМетода.ИмяДомена 		= СОКРЛП(ИмяДомена);
	ПараметрыМетода.ИмяИС 			= НСтр("ru='1С:Предприятие'");
	ПараметрыМетода.Администратор 	= Ответственный;
	ПараметрыМетода.ИдентификаторИП = ИдентификаторИП;
	
	ЗапуститьФоновоеЗадание(ИмяМетода, ИмяЗадания, ИмяДекорации, ПараметрыМетода);

КонецПроцедуры

&НаСервере
Процедура НачатьПолучениеИнформацииОСервисе()
	
	Если ЕстьКлючиМенеджераСервиса Тогда
		ИмяЗадания 		= "ПолучениеИнформацииОСервисе";
		ИмяМетода 		= "КабинетСотрудникаМенеджерСервиса.ИнформацияОСервисеФоновоеЗадание";
		ИмяДекорации 	= "";
		ЗапуститьФоновоеЗадание(ИмяМетода, ИмяЗадания, ИмяДекорации);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПолучениеИнформацииОСервисеЗавершение(АдресРезультата)

	Элементы.СтраницыИнформацияОСервисе.ТекущаяСтраница = Элементы.СтраницаИнформацияОСервисе;
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.СообщениеОбОшибке <> Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'При получении информации о сервисе возникла ошибка:'") + Символы.ПС + Результат.СообщениеОбОшибке;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ИмяПриложения 		= Результат.ОписаниеПриложения.Наименование;
	ОбновитьРеквизитыПоОписаниюАдминистратора(Результат.ОписаниеПриложения.Администратор);
	
	// идентификаторы из абонента сервиса
	ТекущийИдентификаторПользователяИП 	= Результат.Абонент.ИдентификаторПользователяИП;
	ТекущийИдентификаторАбонентаИП 		= Результат.Абонент.ИдентификаторАбонентаИП;
	Если Не ЗначениеЗаполнено(ТекущийИдентификаторПользователяИП) Тогда
		Элементы.ГруппаИзменитьПривязкуАбонента.Видимость = Ложь;
	КонецЕсли;
	ОбновитьРеквизитыОплаты(Результат.Абонент, Результат.СервисЗаблокирован);
		
	Элементы.ИзменитьПривязкуАбонента.Доступность = Истина;
	Элементы.ИзменитьДанныеСервиса.Доступность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура НачатьОбновлениеСвойствПриложения(НовыеДанныеПриложения)

	ИмяЗадания 		= "ОбновлениеСвойствПриложения";
	ИмяМетода 		= "КабинетСотрудникаМенеджерСервиса.ОбновитьСвойстваПриложенияФоновоеЗадание";
	ИмяДекорации 	= "ИндикаторДлительнойОперацииОбновлениеПриложения";
	
	ПараметрыМетода = Новый Структура("Идентификатор,ОписаниеПриложения,ОписаниеАдминистратора,Ответственный");
	ПараметрыМетода.Идентификатор = ИдентификаторПриложения;
	
	Если Не ПустаяСтрока(НовыеДанныеПриложения.ИмяПриложения) Тогда
		ОписаниеПриложения = КабинетСотрудникаМенеджерСервиса.НовоеОписаниеПриложения();
		ОписаниеПриложения.Наименование = СОКРЛП(НовыеДанныеПриложения.ИмяПриложения);
		ПараметрыМетода.ОписаниеПриложения = ОписаниеПриложения;
	КонецЕсли;
	Если ЗначениеЗаполнено(НовыеДанныеПриложения.Ответственный) Тогда
		ОписаниеАдминистратора = КабинетСотрудникаМенеджерСервиса.НовоеОписаниеАдминистратора();
		ОписаниеАдминистратора.Логин 					= НовыеДанныеПриложения.Логин;
		ОписаниеАдминистратора.Телефон 					= НовыеДанныеПриложения.МобильныйТелефон;
		ОписаниеАдминистратора.АдресЭлектроннойПочты 	= НовыеДанныеПриложения.ЭлектроннаяПочта;
		ОписаниеАдминистратора.ФизическоеЛицо 			= Строка(НовыеДанныеПриложения.Ответственный.УникальныйИдентификатор());
		ПараметрыМетода.ОписаниеАдминистратора = ОписаниеАдминистратора;
		ПараметрыМетода.Ответственный = НовыеДанныеПриложения.Ответственный;
	КонецЕсли;
	
	ЗапуститьФоновоеЗадание(ИмяМетода, ИмяЗадания, ИмяДекорации, ПараметрыМетода);

КонецПроцедуры

&НаСервере
Процедура ОбновлениеСвойствПриложенияЗавершение(АдресРезультата)

	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.ОписаниеПриложения) Тогда
		ИмяПриложения 		= Результат.ОписаниеПриложения.Наименование;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.ОписаниеАдминистратора) Тогда
		ОбновитьРеквизитыПоОписаниюАдминистратора(Результат.ОписаниеАдминистратора);
	КонецЕсли;
	
	Если Результат.СообщениеОбОшибке <> Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'При изменении данных возникла ошибка:'") + Символы.ПС + Результат.СообщениеОбОшибке;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачатьИзменениеАбонентаИнтернетПоддержки()

	ИмяЗадания 		= "ИзменениеАбонентаИнтернетПоддержки";
	ИмяМетода 		= "КабинетСотрудникаМенеджерСервиса.ИзменитьАбонентаИнтернетПоддержкиФоновоеЗадание";
	ИмяДекорации 	= "ИндикаторДлительнойОперацииИзменениеАбонента";
	
	ЗапуститьФоновоеЗадание(ИмяМетода, ИмяЗадания, ИмяДекорации);

КонецПроцедуры

&НаСервере
Процедура ИзменениеАбонентаИнтернетПоддержкиЗавершение(АдресРезультата)

	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.СообщениеОбОшибке <> Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'При изменении данных возникла ошибка:'") + Символы.ПС + Результат.СообщениеОбОшибке;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	// идентификаторы из абонента сервиса
	ТекущийИдентификаторПользователяИП 	= Результат.Абонент.ИдентификаторПользователяИП;
	ТекущийИдентификаторАбонентаИП 		= Результат.Абонент.ИдентификаторАбонентаИП;
	ОбновитьРеквизитыОплаты(Результат.Абонент, Результат.СервисЗаблокирован);
	
КонецПроцедуры

&НаСервере
Процедура НачатьПубликациюДанных()
	
	ПараметрыМетода = Новый Массив();
	Если Не ЗначениеЗаполнено(ПериодыРасчетныхЛистков) Тогда
		РассчитатьПериодРасчетныхЛистков();
	КонецЕсли;
	ПараметрыМетода.Добавить(ПериодыРасчетныхЛистков);
	ФоновыеЗадания.Выполнить("КабинетСотрудника.ВыполнитьПубликациюПослеПодключенияКСервисуВФоне",
				ПараметрыМетода,
				КабинетСотрудника.КлючФоновогоЗаданияПубликации());
	
КонецПроцедуры

&НаСервере
Процедура НачатьОбновлениеСведенийОбОплате()
	
	ИмяЗадания 		= "ОбновлениеСведенийОбОплате";
	ИмяМетода 		= "КабинетСотрудникаМенеджерСервиса.ОбновлениеСведенийОбОплатеФоновоеЗадание";
	ИмяДекорации 	= "ИндикаторДлительнойОперацииОбновлениеОплаты";
	ЗапуститьФоновоеЗадание(ИмяМетода, ИмяЗадания, ИмяДекорации);
	
КонецПроцедуры

&НаСервере
Процедура ОбновлениеСведенийОбОплатеЗавершение(АдресРезультата)

	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.СообщениеОбОшибке <> Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'При обновлении сведений об оплате возникла ошибка:'") + Символы.ПС + Результат.СообщениеОбОшибке;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОбновитьРеквизитыОплаты(Результат.Абонент, Результат.СервисЗаблокирован);
	
КонецПроцедуры

&НаСервере
Процедура НачатьПодключениеКСервисуЛокально()
	
	ПодключениеВыполняется = Истина;
	
	ИмяЗадания 		= "ПодключениеКСервисуЛокально";
	ИмяМетода 		= "КабинетСотрудника.ПодключениеКСервисуЛокальноФоновоеЗадание";
	ИмяДекорации 	= "ГруппаИндикацияДлительнойОперацииПодключениеЛокально";
	
	ОписаниеАдминистратора = КабинетСотрудникаМенеджерСервиса.НовоеОписаниеАдминистратора();
	ОписаниеАдминистратора.ФизическоеЛицо			= Строка(Ответственный.УникальныйИдентификатор()); 
	ОписаниеАдминистратора.Логин 					= Логин;
	ОписаниеАдминистратора.Телефон 					= МобильныйТелефон;
	ОписаниеАдминистратора.АдресЭлектроннойПочты  	= ЭлектроннаяПочта;
	
	ПараметрыМетода = Новый Структура("Ответственный,ОписаниеАдминистратора,АдресПриложения,ИдентификаторКлиента,СекретКлиента");
	ПараметрыМетода.АдресПриложения 		= АдресПриложенияЛокально;
	ПараметрыМетода.ИдентификаторКлиента 	= КлючИдентификаторКлиента;
	ПараметрыМетода.СекретКлиента 			= КлючСекретКлиента;
	ПараметрыМетода.Ответственный 			= Ответственный;
	ПараметрыМетода.ОписаниеАдминистратора 	= ОписаниеАдминистратора;
	
	ЗапуститьФоновоеЗадание(ИмяМетода, ИмяЗадания, ИмяДекорации, ПараметрыМетода);

КонецПроцедуры

&НаСервере
Процедура ПодключениеКСервисуЛокальноЗавершение(АдресРезультата)

	ПодключениеВыполняется = Ложь;
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.СообщениеОбОшибке <> Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(Результат.СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	СсылкаДляАдминистратора = Результат.СсылкаДляАдминистратора;
	ПодключениеВыполнено = Истина;
	
	УстановитьЗаголовокДекорацияПереходДляАдминистратора();
	КабинетСотрудника.ВключитьНастройкиПрограммыПослеПодключенияСервиса();
	ВыполнитьНачальноеЗаполнение();
	
КонецПроцедуры

&НаСервере
Процедура НачатьОбновлениеОтветственного(НовыеДанные)

	ИмяЗадания 		= "ОбновлениеОтветственного";
	ИмяМетода 		= "КабинетСотрудника.ОбновлениеОтветственногоФоновоеЗадание";
	ИмяДекорации 	= "ИндикаторДлительнойОперацииОбновлениеПриложения";
	
	ОписаниеАдминистратора = КабинетСотрудникаМенеджерСервиса.НовоеОписаниеАдминистратора();
	ОписаниеАдминистратора.ФизическоеЛицо			= Строка(НовыеДанные.Ответственный.УникальныйИдентификатор()); 
	ОписаниеАдминистратора.Логин 					= НовыеДанные.Логин;
	ОписаниеАдминистратора.Телефон 					= НовыеДанные.МобильныйТелефон;
	ОписаниеАдминистратора.АдресЭлектроннойПочты  	= НовыеДанные.ЭлектроннаяПочта;
	
	ПараметрыМетода = Новый Структура("Ответственный,ОписаниеАдминистратора", НовыеДанные.Ответственный, ОписаниеАдминистратора);
	
	ЗапуститьФоновоеЗадание(ИмяМетода, ИмяЗадания, ИмяДекорации, ПараметрыМетода);

КонецПроцедуры

&НаСервере
Процедура ОбновлениеОтветственногоЗавершение(АдресРезультата)

	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.СообщениеОбОшибке <> Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'При изменении данных возникла ошибка:'") + Символы.ПС + Результат.СообщениеОбОшибке;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.НовыйОтветственный) Тогда
		Ответственный = Результат.НовыйОтветственный;
		ОбновитьРеквизитыОтветственныйЗаСервис();
		ОбновитьЗаголовокЛичныеКабинеты();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьСценарийОтложенногоПодключения()

	ИмяЗадания 		= "ЗавершитьСценарийОтложенногоПодключения";
	ИмяМетода 		= "КабинетСотрудникаМенеджерСервиса.ЗавершитьСценарийОтложенногоПодключенияФоновоеЗадание";
	ИмяДекорации 	= "";
	
	ЗапуститьФоновоеЗадание(ИмяМетода, ИмяЗадания, ИмяДекорации);

КонецПроцедуры

&НаСервере
Процедура НачатьПолучениеКодаАктивации()
	
	ИмяЗадания 		= "ПолучениеКодаАктивации";
	ИмяМетода 		= "КабинетСотрудникаМенеджерСервиса.ПолучениеКодаАктивацииФоновоеЗадание";
	ИмяДекорации 	= "ГруппаДекорацияПолучениеКодаАктивации";
	ЗапуститьФоновоеЗадание(ИмяМетода, ИмяЗадания, ИмяДекорации);
	
КонецПроцедуры

&НаСервере
Процедура ПолучениеКодаАктивацииЗавершение(АдресРезультата)

	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.СообщениеОбОшибке <> Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'При получении кода активации возникла ошибка:'") + Символы.ПС + Результат.СообщениеОбОшибке;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	КодАктивации = Результат.КодАктивации;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"КодАктивации", "Видимость", Истина);
	
КонецПроцедуры

&НаСервере
Процедура НачатьПроверкуДоступностиИнтернетПоддержки()

	ИмяЗадания 		= "ПроверкаДоступностиИнтернетПоддержки";
	ИмяМетода 		= "КабинетСотрудникаМенеджерСервиса.ПроверкаДоступностиИнтернетПоддержкиФоновоеЗадание";
	ИмяДекорации 	= "";
	
	ЗапуститьФоновоеЗадание(ИмяМетода, ИмяЗадания, ИмяДекорации);

КонецПроцедуры

&НаСервере
Процедура ПроверкаДоступностиИнтернетПоддержкиЗавершение(АдресРезультата)

	Элементы.СтраницыАктивацияСервиса.ТекущаяСтраница = Элементы.СтраницаАктивация;
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ИнтернетПоддержкаДоступна = Результат.ИнтернетПоддержкаДоступна;
	
	Если РазделениеВключено Тогда
		
		Если Не ИнтернетПоддержкаДоступна Тогда
			ТекстСообщения = НСтр("ru = 'Для активации подключения сервиса требуется доступ к Интернет-поддержке.'")
				+ Символы.ПС
				+ НСтр("ru = 'Отсутствуют права на использование Интернет-поддержки.'")
				+ Символы.ПС
				+ НСтр("ru = 'По вопросу предоставления таких прав обратитесь к специалистам, осуществляющим обслуживание информационной базы в вашей организации.'");
			Элементы.ДекорацияНетПравИнтернетПоддержка.Заголовок = ТекстСообщения;
			Элементы.ДекорацияНетПравИнтернетПоддержка.Видимость = Истина;
		КонецЕсли;
		
	Иначе
		
		Если Не ИнтернетПоддержкаДоступна Тогда
			ТекстСообщения = НСтр("ru = 'При проверки доступности Интернет-поддержки возникла ошибка:'") + Символы.ПС + Результат.СообщениеОбОшибке;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Иначе
			Элементы.ГруппаИнтернетПоддержка.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГруппаВводКодаАктивации.Доступность = ИнтернетПоддержкаДоступна;
	Элементы.ГруппаАктивацияОтключение.Доступность = ИнтернетПоддержкаДоступна;

КонецПроцедуры

&НаСервере
Процедура НачатьПодключениеПоКодуАктивации()

	ИмяЗадания 		= "ПодключениеПоКодуАктивации";
	ИмяМетода 		= "КабинетСотрудникаМенеджерСервиса.ПодключениеПоКодуАктивацииФоновоеЗадание";
	ИмяДекорации 	= "ГруппаДекорацияПодключениеПоКодуАктивации";
	
	ПараметрыМетода = Новый Структура("КодАктивации", КодАктивации);
	
	ЗапуститьФоновоеЗадание(ИмяМетода, ИмяЗадания, ИмяДекорации, ПараметрыМетода);

КонецПроцедуры

&НаСервере
Процедура ПодключениеПоКодуАктивацииЗавершение(АдресРезультата)

	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.СообщениеОбОшибке <> Неопределено Тогда
		
		Если Не Результат.ИнтернетПоддержкаДоступна Тогда
			Если РазделениеВключено Тогда
				ТекстСообщения = НСтр("ru = 'Отсутствуют права на использование Интернет-поддержки.'")
					+ Символы.ПС
					+ НСтр("ru = 'По вопросу предоставления таких прав обратитесь к специалистам, осуществляющим обслуживание информационной базы в вашей организации.'");
			Иначе
				ТекстСообщения = НСтр("ru = 'При проверки доступности Интернет-поддержки возникла ошибка:'") + Символы.ПС + Результат.СообщениеОбОшибке;
			КонецЕсли;
		ИначеЕсли Результат.НеправильныйКодАктивации Тогда
			ТекстСообщения = НСтр("ru = 'Неправильный код активации.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'При подключении сервиса возникла ошибка:'") + Символы.ПС + Результат.СообщениеОбОшибке;
		КонецЕсли;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	ПодключениеВыполнено = Истина;
	ВыполнитьНачальноеЗаполнение();
	
КонецПроцедуры

&НаСервере
Процедура ПодключениеКСервисуЗавершение(АдресРезультата)
	
	ПодключениеВыполняется = Ложь;
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.СообщениеОбОшибке <> Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(Результат.СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	Если Результат.Выполнено Тогда
		
		ПодключениеВыполняется = Ложь;
		ПодключениеВыполнено = Истина;
		
		СсылкаДляАдминистратора = Результат.СсылкаДляАдминистратора;
		УстановитьЗаголовокДекорацияПереходДляАдминистратора();
		КабинетСотрудника.ВключитьНастройкиПрограммыПослеПодключенияСервиса();
		ВыполнитьНачальноеЗаполнение();
		
	ИначеЕсли Результат.Заказано Тогда
		ВыполнитьНачальноеЗаполнение();
		ОтложенноеПодключениеКСервису = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачатьПроверкуОтложенногоПодключения()

	СостояниеПодключения = РегистрыСведений.СостояниеОтложенногоПодключенияКСервису.СостояниеПодключенияКСервису();
	Если СостояниеПодключения.Состояние = Перечисления.СостоянияПодключенияКабинетСотрудника.ОжиданиеПодключения Тогда
		ИмяЗадания 		= "ПроверкаОтложенногоПодключения";
		ИмяМетода 		= "КабинетСотрудникаМенеджерСервиса.ПроверкаОтложенногоПодключенияФоновоеЗадание";
		ИмяДекорации 	= "ИндикаторДлительнойОперацииПроверкаПодключения";
		ЗапуститьФоновоеЗадание(ИмяМетода, ИмяЗадания, ИмяДекорации);
	ИначеЕсли СостояниеПодключения.Состояние = Перечисления.СостоянияПодключенияКабинетСотрудника.ОшибкаСоздания Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось подключить сервис. Подробности см. в журнале регистрации.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		ОбновитьЭУОтложенноеПодключение(Истина);
	Иначе
		ВыполнитьНачальноеЗаполнение();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаОтложенногоПодключенияЗавершение(АдресРезультата)

	ПодключениеВыполняется = Ложь;
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.СообщениеОбОшибке <> Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(Результат.СообщениеОбОшибке);
		ОбновитьЭУОтложенноеПодключение(Истина);
		Возврат;
	КонецЕсли;
	
	Если Результат.Выполнено Тогда
		
		ПодключениеВыполняется = Ложь;
		ПодключениеВыполнено = Истина;
		
		Константы.ИспользуетсяСервисКабинетСотрудника.Установить(Истина);
		// удаляем сведения отложенного подключения
		РегистрыСведений.СостояниеОтложенногоПодключенияКСервису.СоздатьНаборЗаписей().Записать();
		
		СсылкаДляАдминистратора = Результат.СсылкаДляАдминистратора;
		УстановитьЗаголовокДекорацияПереходДляАдминистратора();
		КабинетСотрудника.ВключитьНастройкиПрограммыПослеПодключенияСервиса();
		ВыполнитьНачальноеЗаполнение();
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Подключение к сервису еще не выполнено, повторите проверку позже.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеПроверкиИмениДомена

&НаСервере
Процедура ЗаполнитьДанныеДляПроверкиИмениДомена()
	
	СтрокаСимволы = "abcdefghijklmnopqrstuvwxyz0123456789-";
	РазрешенныеСимволы = Новый Соответствие;
	Для Позиция = 1 По СтрДлина(СтрокаСимволы) Цикл
		РазрешенныеСимволы.Вставить(Сред(СтрокаСимволы,Позиция,1), Истина);
	КонецЦикла;
	РазрешенныеСимволыИмениДомена = Новый ФиксированноеСоответствие(РазрешенныеСимволы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИмяДомена(Текст = Неопределено)
	
	ПроверятьОкончание = Истина;
	Если Текст <> Неопределено Тогда
		ПроверяемаяСтрока = Текст;
		ПроверятьОкончание = Ложь;
	Иначе
		ПроверяемаяСтрока = ИмяДомена;
	КонецЕсли;
	КоличествоСимволов = СтрДлина(ПроверяемаяСтрока);
	
	СообщенияПроверки = "";
	Если СтрНачинаетсяС(ПроверяемаяСтрока, "-") Тогда
		СообщенияПроверки = НСтр("ru = 'Адрес может начинаться только с буквы или цифры'");
	ИначеЕсли ПроверятьОкончание И СтрЗаканчиваетсяНа(ПроверяемаяСтрока, "-") Тогда
		СообщенияПроверки = НСтр("ru = 'Адрес должен заканчиваться буквой или цифрой'");
	ИначеЕсли СтрНайти(ПроверяемаяСтрока, "--") > 0 Тогда
		СообщенияПроверки = НСтр("ru = 'Адрес не может содержать два дефиса подряд'");
	Иначе
		ПроверяемаяСтрока = НРег(ПроверяемаяСтрока);
		ЗапрещенныеСимволы = "";
		Для Позиция = 1 По КоличествоСимволов Цикл
			СимволИмени = Сред(ПроверяемаяСтрока, Позиция, 1);
			Если РазрешенныеСимволыИмениДомена.Получить(СимволИмени) = Неопределено Тогда
				ЗапрещенныеСимволы = ЗапрещенныеСимволы + ?(ПустаяСтрока(ЗапрещенныеСимволы),"",",") + """" +СимволИмени + """";
			КонецЕсли;
		КонецЦикла;
		Если Не ПустаяСтрока(ЗапрещенныеСимволы) Тогда
			СообщенияПроверки = НСтр("ru = 'В адресе используются неразрешенные символы:'") + " ";
			СообщенияПроверки = СтрШаблон("%1 %2", СообщенияПроверки, ЗапрещенныеСимволы);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(СообщенияПроверки) Тогда
		Если ПроверятьОкончание И КоличествоСимволов < 3 Тогда
			СообщенияПроверки = НСтр("ru = 'Длина адреса должна быть от 3 до 63 символов'");
		ИначеЕсли КоличествоСимволов > 63 Тогда
			СообщенияПроверки = НСтр("ru = 'Длина адреса должна быть от 3 до 63 символов'");
		КонецЕсли;
	КонецЕсли;
	
	СообщениеПроверкиИмениДомена = СообщенияПроверки;
	
	Если ПустаяСтрока(СообщенияПроверки) Тогда
		ЦветТекста 			= ЦветСтиляТекстаПоля;
		ЦветТекстаСообщения = ЦветСтиляПоясняющийТекст;
	Иначе
		ЦветТекста 			= ЦветСтиляПоясняющийОшибкуТекст;
		ЦветТекстаСообщения = ЦветСтиляПоясняющийОшибкуТекст;
	КонецЕсли;
	
	Элементы.ИмяДомена.ЦветТекста 					= ЦветТекста;
	Элементы.ДекорацияИмяДоменаПояснение.Заголовок  = СообщениеПроверкиИмениДомена;
	Элементы.ДекорацияИмяДоменаПояснение.ЦветТекста = ЦветТекстаСообщения;
	
	Если ПроверятьОкончание Тогда
		ИмяДоменаСоответствуетПравилам = ПустаяСтрока(СообщенияПроверки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтветственноеЛицо

&НаСервере
Процедура ЗаполнитьОтветственного()

	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
		Ответственный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "ФизическоеЛицо");
		ЗаполнитьРеквизитыОтветственного(Ответственный, Логин, ЭлектроннаяПочта, МобильныйТелефон, Пол, ОтветственныйНаименование);
	КонецЕсли;
	ОбновитьЭУОтветственный(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыОтветственного(Ответственный, Логин, ЭлектроннаяПочта, МобильныйТелефон, Пол, ОтветственныйНаименование)
	
	Логин 			 = "";
	ЭлектроннаяПочта = "";
	МобильныйТелефон = "";
	Пол = Перечисления.ПолФизическогоЛица.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыОбъекта =  ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ответственный, "Фамилия,ФИО,Инициалы,Пол");
	УстановитьПривилегированныйРежим(Ложь);
	Пол = РеквизитыОбъекта["Пол"];
	Инициалы = СтрЗаменить(РеквизитыОбъекта["Инициалы"],".","");
	Инициалы = СтрЗаменить(Инициалы," ","");
	Логин = СтрШаблон("%1%2", РеквизитыОбъекта["Фамилия"], Инициалы);
	ОтветственныйНаименование = РеквизитыОбъекта["ФИО"];
	
	УстановитьПривилегированныйРежим(Истина);
	КонтактнаяИнформация = КабинетСотрудника.КонтактнаяИнформацияФизическихЛиц(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ответственный));
	УстановитьПривилегированныйРежим(Ложь);
	
	МобильныйТелефон = КонтактнаяИнформация.МобильныеТелефоны[Ответственный];
	ЭлектроннаяПочта = КонтактнаяИнформация.АдресаПочты[Ответственный];
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЭУОтветственный(Форма)
	
	Элементы = Форма.Элементы;
	Форма.ДанныеОтветственногоЗаполнены = Ложь;
	
	Если Форма.СервисКабинетСотрудникаВЛокальнойСети Тогда
		ДекорацияТелефонПочтаОтветственного 		= Элементы.ДекорацияТелефонПочтаОтветственногоЛокально;
		ДекорацияРеквизитыОтветственногоПояснение 	= Элементы.ДекорацияРеквизитыОтветственногоПояснениеЛокально;
	Иначе
		ДекорацияТелефонПочтаОтветственного 		= Элементы.ДекорацияТелефонПочтаОтветственного;
		ДекорацияРеквизитыОтветственногоПояснение 	= Элементы.ДекорацияРеквизитыОтветственногоПояснение;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.Ответственный) Тогда
		ДекорацияТелефонПочтаОтветственного.Заголовок = НСтр("ru = 'Укажите ответственное лицо'");
		ДекорацияРеквизитыОтветственногоПояснение.Заголовок = НСтр("ru = 'Убедитесь в том, что у ответственного лица задан действующий мобильный телефон и адрес электронной почты'");
		ДекорацияРеквизитыОтветственногоПояснение.ЦветТекста = Форма.ЦветСтиляИнформационнойНадписи;
	Иначе
		
		ТелефонУказан = Ложь;
		ТелефонСоответствуетТребованиям = Ложь;
		Если ЗначениеЗаполнено(Форма.МобильныйТелефон) Тогда
			СтрокаТелефон = СокрЛП(Форма.МобильныйТелефон);
			ТелефонУказан = Истина;
			ТелефонСоответствуетТребованиям = (Лев(СтрокаТелефон,1) = "+") И СтрНайти("123456789", Сред(СтрокаТелефон, 2, 1)) <> 0;
		Иначе
			СтрокаТелефон = НСтр("ru = '<телефон не указан>'");
		КонецЕсли;
		
		ПочтаУказана = Ложь;
		ПочтаСоответствуетТребованиям = Ложь;
		Если ЗначениеЗаполнено(Форма.ЭлектроннаяПочта) Тогда
			СтрокаПочта = СОКРЛП(Форма.ЭлектроннаяПочта);
			ПочтаУказана = Истина;
			ПочтаСоответствуетТребованиям = ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Форма.ЭлектроннаяПочта);
		Иначе
			СтрокаПочта = НСтр("ru = '<Email не указан>'");
		КонецЕсли;
		
		СтрокаТелефонПочта = СтрШаблон(НСтр("ru = 'Мобильный телефон и почта: %1, %2'"), СтрокаТелефон, СтрокаПочта);
		ДекорацияТелефонПочтаОтветственного.Заголовок = СтрокаТелефонПочта;
		
		Если ТелефонУказан И ТелефонСоответствуетТребованиям И ПочтаУказана И ПочтаСоответствуетТребованиям И ЗначениеЗаполнено(Форма.Пол) Тогда
			ДекорацияРеквизитыОтветственногоПояснение.ЦветТекста = Форма.ЦветСтиляИнформационнойНадписи;
			ДекорацияРеквизитыОтветственногоПояснение.Заголовок = НСтр("ru = 'Убедитесь в том, что у ответственного лица задан действующий мобильный телефон и адрес электронной почты'");
			Форма.ДанныеОтветственногоЗаполнены = Истина;
		Иначе
			
			Если ТелефонУказан И ТелефонСоответствуетТребованиям И ПочтаУказана И ПочтаСоответствуетТребованиям Тогда
				СообщениеОбОшибке =НСтр("ru = 'Заполните, пожалуйста, пол ответственного'");
			Иначе
				
				СообщениеНеУказанПол = "";
				Если Не ЗначениеЗаполнено(Форма.Пол) Тогда
					СообщениеНеУказанПол = НСтр("ru = ', не указан пол'");
				КонецЕсли;
				
				СообщениеПочтаСоответствуетТребованиям = "";
				Если ПочтаУказана И Не ПочтаСоответствуетТребованиям Тогда
					СообщениеПочтаСоответствуетТребованиям = НСтр("ru = ', адрес электронной почты указан некорректно'");
				КонецЕсли;
				
				СообщениеТелефонСоответствуетТребованиям = "";
				Если ТелефонУказан И Не ТелефонСоответствуетТребованиям Тогда
					Если (Лев(СтрокаТелефон,1) <> "+") Тогда
						СообщениеТелефонСоответствуетТребованиям = НСтр("ru = ', номер телефон должен начинаться с символа ""+""'");
					Иначе
						СообщениеТелефонСоответствуетТребованиям = НСтр("ru = ', код страны в мобильном телефоне указан некорректно'");
					КонецЕсли;
				КонецЕсли;
				
				СообщениеОбОшибке = СтрШаблон(
					НСтр("ru = 'Заполните, пожалуйста, контактные данные ответственного%1%2%3'"),
					СообщениеТелефонСоответствуетТребованиям,
					СообщениеПочтаСоответствуетТребованиям,
					СообщениеНеУказанПол);
				
			КонецЕсли;
			
			ДекорацияРеквизитыОтветственногоПояснение.ЦветТекста = Форма.ЦветСтиляПоясняющийОшибкуТекст;
			ДекорацияРеквизитыОтветственногоПояснение.Заголовок = СообщениеОбОшибке;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОжидания

&НаКлиенте
Процедура ОтложенноеОбновлениеИнтерфейса()

	ОбновитьИнтерфейс();

КонецПроцедуры

&НаКлиенте
Процедура ФайлНастроекПослеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") И ВыбранныеФайлы.Количество() > 0 Тогда
		
		АдресПриложенияЛокально 	= "";
		КлючИдентификаторКлиента 	= "";
		КлючСекретКлиента 			= "";
		
		Обработчик = Новый ОписаниеОповещения("ФайлНастроекПослеВыбораЗавершение", ЭтотОбъект);
		НачатьСозданиеДвоичныхДанныхИзФайла(Обработчик, ВыбранныеФайлы[0]);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлНастроекПослеВыбораЗавершение(ДвоичныеДанные, ДополнительныеПараметры) Экспорт

	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	Результат = НастройкиИзФайлаНаСервере(АдресФайла);
	Если Результат.СообщениеОбОшибке <> Неопределено Тогда
		ПоказатьПредупреждение(,Результат.СообщениеОбОшибке);
	Иначе
		АдресПриложенияЛокально 	= Результат.Настройки["url"];
		КлючИдентификаторКлиента 	= Результат.Настройки["clientID"];
		КлючСекретКлиента 			= Результат.Настройки["clientSecret"];
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСообщениеРезультатОбмена(Команда)
	ОбновитьРезультатОбменаНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОповещения

&НаКлиенте
Процедура ОбновитьИнформациюПодключения(Результат, Параметры) Экспорт

	ОбновитьИнформациюПодключенияНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПодключенияНаСервере()
	
	Если СервисПодключен Тогда
		ОбновитьЗаголовокЛичныеКабинеты();
	Иначе	
		ОбновитьСообщениеОПубликации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДанныеСервисаЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Результат.ИмяПриложения) И Не ЗначениеЗаполнено(Результат.Ответственный) Тогда
		Возврат;
	КонецЕсли;
	
	Если СервисКабинетСотрудникаВЛокальнойСети Тогда
		НачатьОбновлениеОтветственного(Результат);
	Иначе
		НачатьОбновлениеСвойствПриложения(Результат);
	КонецЕсли;
	ПриНачалеЗадания();
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПривязкуАбонентаЗавершение(Результат, Параметры) Экспорт

	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	НачатьИзменениеАбонентаИнтернетПоддержки();
	ПриНачалеЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОпубликоватьРасчетныеЛисткиЗавершение(ДлительнаяОперация, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		ПоказатьПредупреждение(, ДлительнаяОперация.КраткоеПредставлениеОшибки);
		Возврат;
	ИначеЕсли ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		Результат = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		Если Результат.БылиОшибки Тогда
			СообщениеОбОшибке = НСтр("ru = 'Публикация расчетных листков завершена с ошибками.'");
			ПоказатьПредупреждение(, СообщениеОбОшибке);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, Параметры) Экспорт

	Если Результат <> Неопределено Тогда
		Если ФормаВРежимеПодключения Тогда
			НачатьПолучениеАбонентов();
			ПриНачалеЗадания();
		ИначеЕсли ФормаВРежимеАктивации Тогда
			Элементы.СтраницыАктивацияСервиса.ТекущаяСтраница = Элементы.СтраницаАктивацияДлительнаяОперация;
			НачатьПроверкуДоступностиИнтернетПоддержки();
			ПриНачалеЗадания();
		Иначе
			ИзменитьАбонентаСервиса();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОтветеНаВопросОтключитьСервис(КодВозврата, ДополнительныеПараметры) Экспорт

	Если КодВозврата <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаОписаниеСостояния.Доступность 	= Ложь;
	Элементы.СтраницыСостояниеСервиса.Доступность = Ложь;
	
	Если ДополнительныеПараметры.РежимОтключенияУдалить Тогда
		ДлительнаяОперация = ДлительнаяОперацияУдалитьСервис();
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ОповещениеОЗавершении = Новый ОписаниеОповещения("УдалитьСервисЗавершение", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	Иначе
		ОчиститьДанныеПриОтключенииСервиса();
		СервисОтключенСообщитьПользователю();
		ПодключитьОбработчикОжидания("ОтложенноеОбновлениеИнтерфейса", 0.5, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СервисОтключенСообщитьПользователю()
	
	ТекстСообщения = НСтр("ru = 'Сервис отключен.'");
	ПоказатьПредупреждение(,ТекстСообщения);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидыКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидКИМобильныйТелефон <> Результат.ВидКИМобильныйТелефон Или ВидКИАдресЭлектроннойПочты <> Результат.ВидКИАдресЭлектроннойПочты Тогда
		СообщениеОбОшибке = Неопределено;
		СохранитьНовыеВидыКонтактнойИнформации(Результат.ВидКИМобильныйТелефон, Результат.ВидКИАдресЭлектроннойПочты, СообщениеОбОшибке);
		Если СообщениеОбОшибке = Неопределено Тогда
			Оповестить("ОбновитьСписокОшибокЗаполненияКабинетСотрудника");
		Иначе	
			ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеСервиса

&НаКлиенте
Процедура ВыполнитьОбменССервисом()
	
	Если ОбменССервисомЗаблокирован() Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ДлительнаяОперация = ДлительнаяОперацияВыполнитьОбмен();
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Истина;
	ПараметрыОжидания.ОповещениеПользователя.Текст = НСтр("ru = 'Обмен выполнен.'");
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыполнитьОбменЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ДлительнаяОперацияВыполнитьОбмен()
	
	ПараметрыПроцедуры = Новый Структура("ПодготовитьДанныеДляТехПоддержки", Ложь);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	
	ПараметрыВыполненияВФоне.Вставить("НаименованиеФоновогоЗадания",
		СтрШаблон(НСтр("ru = 'Выполнение обмена с сервисом 1С:Кабинет сотрудника'")));
	ПараметрыВыполненияВФоне.ОжидатьЗавершение = 0;
	ПараметрыВыполненияВФоне.КлючФоновогоЗадания = КабинетСотрудника.КлючФоновогоЗаданияПубликации();
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"КабинетСотрудника.ВыполнитьОбменССервисомФоновоеЗадание",
		ПараметрыПроцедуры,
		ПараметрыВыполненияВФоне);
		
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьОбменЗавершение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт

	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		ПоказатьПредупреждение(, ДлительнаяОперация.КраткоеПредставлениеОшибки);
	КонецЕсли;
	
	ОбновитьРезультатОбменаНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОбновитьРезультатОбменаНаСервере()
	
	Событие = Перечисления.ВидыСобытийОбменаУправлениеПерсоналом.Обмен;
	РезультатОбмена = РегистрыСведений.СобытияОбменаУпралениеПерсоналом.СобытиеОбмена(Приложение, Событие);
	Если Не ЗначениеЗаполнено(РезультатОбмена.ДатаНачала) Тогда
		Элементы.ДекорацияРезультатОбмена.Заголовок = НСтр("ru = 'Обмен с сервисом еще не выполнялся'");
		Элементы.ОткрытьЖурналРегистрации.Видимость = Ложь;
	Иначе
		Элементы.ОткрытьЖурналРегистрации.Видимость = ЕстьПраваНаПросмотрЖурналаРегистрации;
		СтрокаШаблон = НСтр("ru = 'Обмен выполнен: %1'");
		СтрокаЗаголовок = СтрШаблон(СтрокаШаблон, РезультатОбмена.ДатаОкончания);
		ЦветТекстаСообщения = ЦветСтиляИнформационнойНадписи;
		Если РезультатОбмена.БылиОшибки Тогда
			ЦветТекстаСообщения = ЦветСтиляПоясняющийОшибкуТекст;
			СтрокаБылиОшибки = НСтр("ru = 'При выполнении были ошибки.'");
			СтрокаЗаголовок = СтрШаблон("%1 %2", СтрокаЗаголовок, СтрокаБылиОшибки);
		КонецЕсли;
		Элементы.ДекорацияРезультатОбмена.ЦветТекста = ЦветТекстаСообщения;
		Элементы.ДекорацияРезультатОбмена.Заголовок = СтрокаЗаголовок;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеНастроекЗаявокНаОтпуск

&НаСервере
Процедура ПрочитатьНастройкиЗаявокНаОтпуск()

	Настройки = РегистрыСведений.НастройкиЗаявленийНаОтпускКабинетСотрудника.НастройкиЗаявокНаОтпуск();
	ЗаполнитьЗначенияСвойств(НастройкиЗаявокНаОтпуск, Настройки);
	ЗаполнитьЗначенияСвойств(НастройкиЗаявокНаОтпускПрежнееЗначение, Настройки);
	
	Если НастройкиЗаявокНаОтпуск.ОграничиватьПредоставлениеОтпускаАвансом Тогда
		Если НастройкиЗаявокНаОтпуск.МаксимальноеКоличествоДнейОтпускаАвансом = 0 Тогда
			ОтпускАвансомНеПредоставляется = 1;
			ОтпускАвансомПредоставляется = 0;
		Иначе
			ОтпускАвансомНеПредоставляется = 0;
			ОтпускАвансомПредоставляется = 1;
		КонецЕсли;
	Иначе
		ОтпускАвансомНеПредоставляется = 0;
		ОтпускАвансомПредоставляется = 0;
	КонецЕсли;
	
	ОбновитьЭУКоличествоДнейДоНачалаОтпуска(ЭтаФорма);
	ОбновитьЭУМаксимальноеКоличествоДнейОтпускаАвансом(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция СохранитьНастройкиЗаявокНаОтпуск()

	СообщениеОбОшибке = Неопределено;
	СохранитьНастройкиЗаявокНаОтпускНаСервере(СообщениеОбОшибке);
	Если СообщениеОбОшибке <> Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат (СообщениеОбОшибке = Неопределено);

КонецФункции

&НаСервере
Процедура СохранитьНастройкиЗаявокНаОтпускНаСервере(СообщениеОбОшибке)
	
	НастройкиЗаявокНаОтпуск.ОбновитьНастройкиВСервисе = Истина;
	НастройкиДляСохранения = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(НастройкиЗаявокНаОтпуск, Метаданные.РегистрыСведений.НастройкиЗаявленийНаОтпускКабинетСотрудника);
	
	Если НастройкиЗаявокНаОтпуск.КонтролироватьДатуНачалаОтпускаПриПодачеЗаявления И НастройкиЗаявокНаОтпуск.КоличествоДнейДоНачалаОтпуска = 0 Тогда
		// не сохраняем эти настройки
		НастройкиДляСохранения.Удалить("КонтролироватьДатуНачалаОтпускаПриПодачеЗаявления");
		НастройкиДляСохранения.Удалить("КоличествоДнейДоНачалаОтпуска");
	КонецЕсли;
	
	Если НастройкиЗаявокНаОтпуск.ОграничиватьПредоставлениеОтпускаАвансом И ОтпускАвансомПредоставляется = 1 И НастройкиЗаявокНаОтпуск.МаксимальноеКоличествоДнейОтпускаАвансом = 0 Тогда
		// не сохраняем эти настройки, еще не указали количество дней
		НастройкиДляСохранения.Удалить("ОграничиватьПредоставлениеОтпускаАвансом");
		НастройкиДляСохранения.Удалить("МаксимальноеКоличествоДнейОтпускаАвансом");
	КонецЕсли;
	
	КабинетСотрудника.СохранитьНастройкиЗаявокНаОтпуск(НастройкиДляСохранения, СообщениеОбОшибке);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииКоличествоДнейДоНачалаОтпуска()

	ПриИзмененииКоличествоДнейДоНачалаОтпуска();

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииМаксимальноеКоличествоДнейОтпускаАвансом()

	ПриИзмененииМаксимальноеКоличествоДнейОтпускаАвансом();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЭУКоличествоДнейДоНачалаОтпуска(Форма)
	
	Элементы = Форма.Элементы;
	КонтролироватьДатуНачалаОтпуска = Форма.НастройкиЗаявокНаОтпуск.КонтролироватьДатуНачалаОтпускаПриПодачеЗаявления;
	Элементы.НастройкиЗаявокНаОтпускКоличествоДнейДоНачалаОтпуска.Доступность = КонтролироватьДатуНачалаОтпуска;
	Элементы.НастройкиЗаявокНаОтпускКоличествоДнейДоНачалаОтпуска.АвтоОтметкаНезаполненного = КонтролироватьДатуНачалаОтпуска;
	Элементы.НастройкиЗаявокНаОтпускКоличествоДнейДоНачалаОтпуска.ОтметкаНезаполненного = Не КонтролироватьДатуНачалаОтпуска Или КонтролироватьДатуНачалаОтпуска И Не ЗначениеЗаполнено(Форма.НастройкиЗаявокНаОтпуск.КоличествоДнейДоНачалаОтпуска)

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЭУМаксимальноеКоличествоДнейОтпускаАвансом(Форма)
	
	Элементы = Форма.Элементы;
	ОграничиватьПредоставлениеОтпускаАвансом = Форма.НастройкиЗаявокНаОтпуск.ОграничиватьПредоставлениеОтпускаАвансом;
	Если Форма.НастройкиЗаявокНаОтпуск.ОграничиватьПредоставлениеОтпускаАвансом Тогда
		
		Элементы.ОтпускАвансомНеПредоставляется.Доступность = Истина;
		Элементы.ОтпускАвансомПредоставляется.Доступность 	= Истина;
		Элементы.НастройкиЗаявокНаОтпускМаксимальноеКоличествоДнейОтпускаАвансом.Доступность = (Форма.ОтпускАвансомПредоставляется = 1);
		
		Элементы.НастройкиЗаявокНаОтпускМаксимальноеКоличествоДнейОтпускаАвансом.АвтоОтметкаНезаполненного = (Форма.ОтпускАвансомПредоставляется = 1);
		Элементы.НастройкиЗаявокНаОтпускМаксимальноеКоличествоДнейОтпускаАвансом.ОтметкаНезаполненного = (Форма.ОтпускАвансомПредоставляется = 1)
				Или (Форма.ОтпускАвансомПредоставляется = 1) И Форма.НастройкиЗаявокНаОтпуск.МаксимальноеКоличествоДнейОтпускаАвансом = 0;
		
	Иначе
		
		Элементы.ОтпускАвансомНеПредоставляется.Доступность = Ложь;
		Элементы.ОтпускАвансомПредоставляется.Доступность 	= Ложь;
		Элементы.НастройкиЗаявокНаОтпускМаксимальноеКоличествоДнейОтпускаАвансом.Доступность = Ложь;
		Элементы.НастройкиЗаявокНаОтпускМаксимальноеКоличествоДнейОтпускаАвансом.АвтоОтметкаНезаполненного = Ложь;
		Элементы.НастройкиЗаявокНаОтпускМаксимальноеКоличествоДнейОтпускаАвансом.ОтметкаНезаполненного = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеНастроекИспользуемойФункциональности

&НаКлиенте
Функция СохранитьНастройкиИспользуемаяФункциональностьСервиса()

	СообщениеОбОшибке = Неопределено;
	СохранитьНастройкиИспользуемаяФункциональностьНаСервере(СообщениеОбОшибке);
	Если СообщениеОбОшибке <> Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат (СообщениеОбОшибке = Неопределено);

КонецФункции

&НаСервере
Процедура ПрочитатьНастройкиИспользуемаяФункциональность()

	Настройки = РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.Настройки();
	ЗаполнитьЗначенияСвойств(ИспользуемаяФункциональностьСервиса, Настройки);
	ЗаполнитьЗначенияСвойств(ИспользуемаяФункциональностьСервисаПрежнееЗначение, Настройки);
	
	АвтоФормированиеСогласий = Константы.АвтоматическиФормироватьСогласияНаПрисоединениеККЭДО.Получить();
	
	ОбновитьЭУСпособРасчетаДСВ(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиИспользуемаяФункциональностьНаСервере(СообщениеОбОшибке)
	
	НастройкиДляСохранения = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(ИспользуемаяФункциональностьСервиса, Метаданные.РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника);
	
	Если ИспользуемаяФункциональностьСервиса.ЗаявленияНаДСВ
		И Не ИспользуемаяФункциональностьСервиса.СпособРасчетаДСВПроцентом
		И Не ИспользуемаяФункциональностьСервиса.СпособРасчетаДСВПроцентомНеБолееСуммы
		И Не ИспользуемаяФункциональностьСервиса.СпособРасчетаДСВСуммой Тогда
		// не сохраняем эти настройки
		НастройкиДляСохранения.Удалить("ЗаявленияНаДСВ");
		НастройкиДляСохранения.Удалить("СпособРасчетаДСВПроцентом");
		НастройкиДляСохранения.Удалить("СпособРасчетаДСВПроцентомНеБолееСуммы");
		НастройкиДляСохранения.Удалить("СпособРасчетаДСВСуммой");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	КабинетСотрудника.СохранитьНастройкиИспользуемаяФункциональностьСервиса(НастройкиДляСохранения, СообщениеОбОшибке);
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЭУСпособРасчетаДСВ(Форма)

	Элементы = Форма.Элементы;
	Элементы.СпособРасчетаДСВПроцентом.Доступность = Форма.ИспользуемаяФункциональностьСервиса.ЗаявленияНаДСВ;
	Элементы.СпособРасчетаДСВПроцентомНеБолееСуммы.Доступность = Форма.ИспользуемаяФункциональностьСервиса.ЗаявленияНаДСВ;
	Элементы.СпособРасчетаДСВСуммой.Доступность = Форма.ИспользуемаяФункциональностьСервиса.ЗаявленияНаДСВ;

КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьЭУИспользуемойФункциональности()

	Если Не КабинетСотрудника.ВерсионированиеИспользуется() Тогда
		ОбновитьДоступностьЭУИспользуемойФункциональностиПоВерсииПриложения();
		Возврат;
	КонецЕсли;
	
	НастройкиФункциональности = КабинетСотрудника.НовыеНастройкиФункциональностиСервиса();
	Настройки = КабинетСотрудника.НастройкиПрограммы();
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаЗаявленияНаОтпуск", "Видимость",
			НастройкиФункциональности.Отпуск);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ДекорацияНастройкиФункциональностиОтступ", "Видимость",
			НастройкиФункциональности.Отпуск);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаНастройкиОтпускаРасширенные", "Видимость",
			НастройкиФункциональности.ГрафикОтпусков);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаУдержаниеДСВ", "Видимость",
			Настройки.ИспользоватьДСВ);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаПубликуемаяСтруктура", "Видимость",
			ПубликоватьСтруктуруЮридическихЛиц Или Не СтруктураПредприятияСоответствуетСтруктуреЮридическихЛиц);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"СкрытьРазделДокументы", "Видимость",
			Не ИспользуетсяКадровыйЭДО);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"КомпенсацияОтпускаНедоступна", "Видимость",
			Не БазоваяФункциональность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ПолучениеДокументаСЭПНедоступно", "Видимость",
			Не ИспользуетсяКадровыйЭДО
			И ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи"));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаСогласиеНаПрисоединениеККЭДО",
			"Доступность",
			ИспользуетсяКадровыйЭДО);
			
КонецПроцедуры

#КонецОбласти

#Область СогласияКЭДО

&НаСервереБезКонтекста
Процедура СохранитьНастройкуСпособПолученияСогласияНаПрисоединениеККЭДО(СпособПолучения)
	РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.СохранитьЗначениеСпособПолученияСогласияНаПрисоединениеККЭДО(СпособПолучения);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АвтоФормированиеСогласийПриИзмененииНаСервере(АвтоФормированиеСогласий)
	Константы.АвтоматическиФормироватьСогласияНаПрисоединениеККЭДО.Установить(АвтоФормированиеСогласий);
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьСогласияДлительнаяОперация(УникальныйИдентификатор)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьПроцедуру(
			ПараметрыВыполнения,
			"КадровыйЭДО.СформироватьСогласияНаПрисоединениеККЭДО",
			ИнтеграцияКабинетСотрудника.ДанныеДляФормированияСогласийНаПрисоединениеККЭДО(),
			Истина);
			
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура СформироватьСогласияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Формирование согласий завершено'"));
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыОткрытияШаблонаСогласия(БумажныйДокумент)
	
	МетаданныеСогласия = Метаданные.Документы.СогласиеНаПрисоединениеККЭДО;
	МакетСогласия = Неопределено;
	Если БумажныйДокумент Тогда
		МакетСогласия = МетаданныеСогласия.Макеты.ПФ_MXL_СогласиеНаПрисоединениеККЭДО_БумажныйДокумент;
	Иначе
		МакетСогласия = МетаданныеСогласия.Макеты.ПФ_MXL_СогласиеНаПрисоединениеККЭДО_УНЭП;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИмяОбъектаМетаданныхМакета", СтрЗаменить(МакетСогласия.ПолноеИмя(), "Макет.", ""));
	ПараметрыОткрытия.Вставить("ТипМакета", "MXL");
	ПараметрыОткрытия.Вставить("Владелец", Справочники.ИдентификаторыОбъектовМетаданных.ИдентификаторОбъектаМетаданных(МетаданныеСогласия, Ложь));
	ПараметрыОткрытия.Вставить("ИмяДокумента", МакетСогласия.Синоним);
	ПараметрыОткрытия.Вставить("Редактирование", Истина);
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ОбновитьРеквизитыПоОписаниюАдминистратора(ОписаниеАдминистратора)
	
	Логин 				= ОписаниеАдминистратора.Логин;
	МобильныйТелефон 	= СОКРЛП(ОписаниеАдминистратора.Телефон);
	ЭлектроннаяПочта 	= СОКРЛП(ОписаниеАдминистратора.АдресЭлектроннойПочты);
	СсылкаСтрока 		= ОписаниеАдминистратора.ФизическоеЛицо;
	Ответственный = Неопределено;
	Если Не ПустаяСтрока(СсылкаСтрока) Тогда
		ОтветственныйСсылка = Неопределено;
		Попытка
			ОтветственныйСсылка = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(СсылкаСтрока));
		Исключение
			ОтветственныйСсылка = Неопределено;
		КонецПопытки;
		Если ЗначениеЗаполнено(ОтветственныйСсылка) И ОбщегоНазначения.СсылкаСуществует(ОтветственныйСсылка) Тогда
			Ответственный = ОтветственныйСсылка;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьРеквизитыОтветственныйЗаСервис();
	ОбновитьЗаголовокЛичныеКабинеты();

КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыОплаты(АбонентСервиса, СервисЗаблокирован)

	ИспользуетсяПробныйПериод 			= АбонентСервиса.ИспользуетсяПробныйПериод;
	ОплаченоКабинетов 					= АбонентСервиса.ОплаченоКабинетов;
	НаименованиеАбонента 				= АбонентСервиса.Наименование;
	КоличествоАктивированныхКабинетов 	= АбонентСервиса.КоличествоАктивированныхКабинетов;
	
	Если ЗначениеЗаполнено(АбонентСервиса.ДатаОкончанияПробногоПериода) Тогда
		ДатаОкончанияПробногоПериода = АбонентСервиса.ДатаОкончанияПробногоПериода;
	КонецЕсли;
	Если ЗначениеЗаполнено(АбонентСервиса.ДатаОкончанияОплаченногоПериода) Тогда
		ДатаОкончанияОплаченногоПериода = АбонентСервиса.ДатаОкончанияОплаченногоПериода;
	КонецЕсли;
	
	Строка1 = "";
	Если ИспользуетсяПробныйПериод И ЗначениеЗаполнено(ДатаОкончанияПробногоПериода) Тогда
		ШаблонСтроки = НСтр("ru = 'Используется пробный период по: %1'");
		Строка1 = СтрШаблон(ШаблонСтроки, Формат(ДатаОкончанияПробногоПериода, "ДЛФ=D"));
	КонецЕсли;
	Строка2 = "";
	Если ОплаченоКабинетов > 0 Тогда
		ШаблонСтроки = НСтр("ru = 'Оплачено кабинетов: %1 по %2'");
		Строка2 = СтрШаблон(ШаблонСтроки, ОплаченоКабинетов, Формат(ДатаОкончанияОплаченногоПериода, "ДЛФ=D"));
	Иначе
		Строка2 = НСтр("ru = 'Нет оплаченных кабинетов'");
	КонецЕсли;
	Строка3 = "";
	Если КоличествоАктивированныхКабинетов <> Неопределено Тогда
		Если КоличествоАктивированныхКабинетов > 0 Тогда
			ШаблонСтроки = НСтр("ru = 'Создано кабинетов: %1'");
			Строка3 = СтрШаблон(ШаблонСтроки, КоличествоАктивированныхКабинетов);
		Иначе
			Строка3 = НСтр("ru = 'Нет созданных кабинетов'");
		КонецЕсли;
	КонецЕсли;
	ПереводСтроки = Символы.ПС;
	СтрокаСостояниеОплаты = СтрШаблон("%1%2%3%4%5", Строка1, ?(ПустаяСтрока(Строка1),"",ПереводСтроки), Строка2, ?(ПустаяСтрока(Строка2),"",ПереводСтроки), Строка3);
	Элементы.ДекорацияСостояниеОплаты.Заголовок = СтрокаСостояниеОплаты;
	
	ЗаголовокСервисЗаблокирован = "";
	Если СервисЗаблокирован <> Неопределено Тогда
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьСостояниеБлокировкиСервиса(СервисЗаблокирован);
		Если СервисЗаблокирован Тогда
			Если ОплаченоКабинетов = 0 Тогда
				ЗаголовокСервисЗаблокирован = НСтр("ru = 'Доступ к сервису ограничен: закончился оплаченный (тестовый) период'");
			Иначе
				ЗаголовокСервисЗаблокирован = НСтр("ru = 'Доступ к сервису ограничен: превышен оплаченный лимит на создание личных кабинетов'");
			КонецЕсли;
		КонецЕсли;
		Элементы.ДекорацияБлокировкаСервиса.Заголовок = ЗаголовокСервисЗаблокирован;
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ДекорацияБлокировкаСервиса", "Видимость", Не ПустаяСтрока(ЗаголовокСервисЗаблокирован));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИмяПриложения()
	
	УстановитьПривилегированныйРежим(Истина);
	ИмяПриложения = Константы.ЗаголовокСистемы.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ПустаяСтрока(ИмяПриложения) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Организации КАК Организации";
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Наименование");
		УстановитьПривилегированныйРежим(Ложь);
		Если РезультатЗапроса.Количество() = 1 Тогда
			ИмяПриложения = РезультатЗапроса[0];
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СтрокаАдресПриложения()
	
	ИмяДоменаВАдрес = ?(ПустаяСтрока(ИмяДомена),"<"+НСтр("ru = 'ваш сервис'")+">",СОКРЛП(ИмяДомена));
	Возврат СтрШаблон("%1%2",ИмяДоменаВАдрес,".1c-cabinet.ru");

КонецФункции

&НаСервере
Процедура ОбновитьСообщениеОПубликации()
	
	ТекстЗаголовка = "";
	АдресПриложения = СтрокаАдресПриложения();
	ПредставлениеПериодаРЛ = "";
	Если ПериодыРасчетныхЛистков.Количество() > 0 Тогда
		Дата2 = ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(ПериодыРасчетныхЛистков[0]);
		Дата1 = ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(ПериодыРасчетныхЛистков[1]);
		ПредставлениеПериодаРЛ = СтрШаблон("%1 - %2", Дата1, Дата2);
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ОшибкиЗаполнения.БлокирующаяОшибка КАК ЕстьОшибки
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ВыгружаемыеОбъекты.Ссылка = Сотрудники.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЗаполненияОбъектовУправлениеПерсоналом КАК ОшибкиЗаполнения
	|		ПО (Сотрудники.ФизическоеЛицо = ОшибкиЗаполнения.Ссылка)
	|			И (ОшибкиЗаполнения.БлокирующаяОшибка)
	|			И (ОшибкиЗаполнения.Приложение = ЗНАЧЕНИЕ(Перечисление.ПриложенияДляИнтеграции.КабинетСотрудника))";
	УстановитьПривилегированныйРежим(Истина);
	ПубликуемыеКабинеты = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	Если ПубликуемыеКабинеты.Количество() = 0 Тогда
		
		СтрокаШаблон = НСтр("ru = 'При нажатии кнопки Подключить по адресу ""%1"" будут опубликованы данные ответственного лица.'");
		ТекстЗаголовка = СтрШаблон(СтрокаШаблон, АдресПриложения);
		
	Иначе
		
		КоличествоКабинетов = ПубликуемыеКабинеты.Количество();
		НайденныеСтроки = ПубликуемыеКабинеты.НайтиСтроки(Новый Структура("ЕстьОшибки", Истина));
		КоличествоОшибок = НайденныеСтроки.Количество();
		ПубликуемыхКабинетов = КоличествоКабинетов - КоличествоОшибок;
		
		НайденныеСтроки = ПубликуемыеКабинеты.НайтиСтроки(Новый Структура("ФизическоеЛицо", Ответственный));
		ОтветственныйПубликуется = (НайденныеСтроки.Количество() > 0);
		
		ТекстДанныеДоступны = НСтр("ru = 'Эти данные будут доступны только сотрудникам и их руководителям'");
		
		ТекстСотрудники = "";
		Если ПубликуемыхКабинетов = 1 Или ПубликуемыхКабинетов > 11 И Прав(Строка(ПубликуемыхКабинетов),2) <> "11" И Прав(Строка(ПубликуемыхКабинетов),1) = "1" Тогда
			ТекстСотрудники = НСтр("ru = 'сотрудника'");
		Иначе
			ТекстСотрудники = НСтр("ru = 'сотрудников'");
		КонецЕсли;
		
		ТекстРасчетныеЛистки = "";
		Если Не ПустаяСтрока(ПредставлениеПериодаРЛ) Тогда
			Если ПубликуемыхКабинетов > 1 Тогда
				СтрСообщение = НСтр("ru = 'и их расчетные листки за'");
			Иначе
				СтрСообщение = НСтр("ru = 'и его расчетные листки за'");
			КонецЕсли;
			ТекстРасчетныеЛистки = СтрШаблон("%1 %2", СтрСообщение, ПредставлениеПериодаРЛ);
		КонецЕсли;
		
		Если Не ОтветственныйПубликуется Тогда
			
			Если ПустаяСтрока(ТекстРасчетныеЛистки) Тогда
				СтрокаШаблон = НСтр("ru = 'При нажатии кнопки Подключить по адресу ""%1"" будут опубликованы данные ответственного лица и данные %2 %3.'");
				ТекстЗаголовка = СтрШаблон(СтрокаШаблон, АдресПриложения, ПубликуемыхКабинетов, ТекстСотрудники);
			Иначе
				СтрокаШаблон = НСтр("ru = 'При нажатии кнопки Подключить по адресу ""%1"" будут опубликованы данные ответственного лица, данные %2 %3 %4.'");
				ТекстЗаголовка = СтрШаблон(СтрокаШаблон, АдресПриложения, ПубликуемыхКабинетов, ТекстСотрудники, ТекстРасчетныеЛистки);
				ТекстЗаголовка  = СтрШаблон("%1%2%3",ТекстЗаголовка,  Символы.ПС,  ТекстДанныеДоступны);
			КонецЕсли;
			
		Иначе 
			
			Если ПубликуемыхКабинетов = 1 Тогда
				СтрокаШаблон = НСтр("ru = 'При нажатии кнопки Подключить по адресу ""%1"" будут опубликованы данные ответственного лица'");
				ТекстЗаголовка = СтрШаблон(СтрокаШаблон, АдресПриложения);
				Если ПустаяСтрока(ТекстРасчетныеЛистки) Тогда
					ТекстЗаголовка = СтрШаблон("%1.", ТекстЗаголовка);
				Иначе
					ТекстЗаголовка = СтрШаблон("%1 %2.", ТекстЗаголовка, ТекстРасчетныеЛистки);
				КонецЕсли;
			Иначе
				СтрокаШаблон = НСтр("ru = 'При нажатии кнопки Подключить по адресу ""%1"" будут опубликованы данные %2 %3'");
				ТекстЗаголовка = СтрШаблон(СтрокаШаблон, АдресПриложения, ПубликуемыхКабинетов, ТекстСотрудники); 
				Если ПустаяСтрока(ТекстРасчетныеЛистки) Тогда
					ТекстЗаголовка = СтрШаблон("%1.", ТекстЗаголовка);
				Иначе
					ТекстЗаголовка = СтрШаблон("%1 %2.%3%4", ТекстЗаголовка, ТекстРасчетныеЛистки, Символы.ПС, ТекстДанныеДоступны);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
	Элементы.ДекорацияПодключениеОписание.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПериодРасчетныхЛистков()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НачислениеЗарплаты.МесяцНачисления КАК МесяцНачисления
	|ИЗ
	|	Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
	|ГДЕ
	|	НачислениеЗарплаты.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	МесяцНачисления УБЫВ";
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Периоды = Новый Массив;
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Периоды.Добавить(Выборка.МесяцНачисления);
		Периоды.Добавить(ДобавитьМесяц(Выборка.МесяцНачисления,-1));
	КонецЕсли;
	 
	ПериодыРасчетныхЛистков = Новый ФиксированныйМассив(Периоды);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокДекорацияПереходДляАдминистратора()
	
	ШаблонЗаголовка = НСтр("ru = '<body>Сервис 1С:Кабинет сотрудника подключен.
	|Если вы - %1, тогда <a href=""%2"">%3</a> для авторизации в сервисе.</body>'");
	
	СтрокаЗаголовка = СтрШаблон(ШаблонЗаголовка, Строка(Ответственный), СсылкаДляАдминистратора, НСтр("ru = 'перейдите сюда'"));
	ФорматированныйДокумент = Новый ФорматированныйДокумент;
	ФорматированныйДокумент.УстановитьHTML("<html>" + СтрокаЗаголовка + "</html>", Новый Структура);
	Элементы.ДекорацияПереходДляАдминистратора.Заголовок =ФорматированныйДокумент.ПолучитьФорматированнуюСтроку();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюОСервисеИзНастроек()

	СтруктураНастроек = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	АдресПриложения 		= СтруктураНастроек.АдресПриложения;
	АдресПриложенияПоИмени 	= СтруктураНастроек.АдресПриложенияПоИмени;
	ИдентификаторПриложения = СтруктураНастроек.ИдентификаторПриложения;
	ИмяПриложения 			= СтруктураНастроек.НаименованиеПриложения;
	Ответственный           = СтруктураНастроек.Ответственный;
	
	ЕстьАдресПриложенияПоИмени = Не ПустаяСтрока(АдресПриложенияПоИмени);
	ПоказыватьВременныйАдрес = ЕстьАдресПриложенияПоИмени И Не СтруктураНастроек.АдресПриложенияПоИмениДоступен;
	
	Элементы.ДекорацияАдресПриложенияВременный.Видимость = ПоказыватьВременныйАдрес;
	Элементы.ГруппаПроверкаДоступностиАдреса.Видимость = ПоказыватьВременныйАдрес;
	
	ШаблонЗаголовкаАдресПриложения = НСтр("ru = '<body>Адрес сервиса: <a href=""%1"">%2</a></body>'");
	Если ПоказыватьВременныйАдрес Тогда
		
		Элементы.ДекорацияАдресПриложения.Доступность = Ложь;
		УстановитьЗаголовокСостояниеАдресаПоИмени(Ложь);
		
		СтрокаЗаголовкаДекорацияАдресПриложения = СтрШаблон(ШаблонЗаголовкаАдресПриложения, АдресПриложенияПоИмени, АдресПриложенияПоИмени);
		
		ШаблонЗаголовкаАдресВременный = НСтр("ru = '<body>Сервис доступен по адресу: <a href=""%1"">%2</a></body>'");
		СтрокаЗаголовкаАдресВременный = СтрШаблон(ШаблонЗаголовкаАдресВременный, АдресПриложения, АдресПриложения);
		ФорматированныйДокумент = Новый ФорматированныйДокумент;
		ФорматированныйДокумент.УстановитьHTML("<html>" + СтрокаЗаголовкаАдресВременный + "</html>", Новый Структура);
		Элементы.ДекорацияАдресПриложенияВременный.Заголовок = ФорматированныйДокумент.ПолучитьФорматированнуюСтроку();
		
	ИначеЕсли ЕстьАдресПриложенияПоИмени Тогда
		СтрокаЗаголовкаДекорацияАдресПриложения = СтрШаблон(ШаблонЗаголовкаАдресПриложения, АдресПриложенияПоИмени, АдресПриложенияПоИмени);
	Иначе
		СтрокаЗаголовкаДекорацияАдресПриложения = СтрШаблон(ШаблонЗаголовкаАдресПриложения, АдресПриложения, АдресПриложения);
	КонецЕсли;
	ФорматированныйДокумент = Новый ФорматированныйДокумент;
	ФорматированныйДокумент.УстановитьHTML("<html>" + СтрокаЗаголовкаДекорацияАдресПриложения + "</html>", Новый Структура);
	Элементы.ДекорацияАдресПриложения.Заголовок = ФорматированныйДокумент.ПолучитьФорматированнуюСтроку();
	
	Элементы.ДекорацияПереносОплатыИнформация.Видимость = РазделениеВключено;
	Если РазделениеВключено Тогда
		ШаблонЗаголовка = НСтр("ru = '<body>Порядок переноса сведений об оплате сервиса 1С:Кабинет сотрудника <a href=""%1"">%2</a></body>'");
		СтрокаЗаголовка = СтрШаблон(ШаблонЗаголовка, "https://its.1c.ru/db/partnerits#content:3763:hdoc", НСтр("ru = 'см тут'"));
		ФорматированныйДокумент = Новый ФорматированныйДокумент;
		ФорматированныйДокумент.УстановитьHTML("<html>" + СтрокаЗаголовка + "</html>", Новый Структура);
		Элементы.ДекорацияПереносОплатыИнформация.Заголовок = ФорматированныйДокумент.ПолучитьФорматированнуюСтроку();
	КонецЕсли;
	
	ШаблонЗаголовка = НСтр("ru = 'При отключении будет удален сервис по адресу %1 и все его данные.
		|Для повторного подключения к сервису необходимо будет заново создать все кабинеты сотрудников и разослать приглашения.'");
	ЗаголовокУдалениеСервиса = СтрШаблон(ШаблонЗаголовка, АдресСервиса(ЭтаФорма));
	Элементы.ДекорацияУдалитьСервисПояснение.Заголовок = ЗаголовокУдалениеСервиса;
	
	ШаблонЗаголовка = НСтр("ru = 'При отключении данные больше не будут публиковаться в сервисе, будут удалены все настройки подключения.
		|Сервис по адресу %1 не будет удален.'");
	ЗаголовокОтключениеСервиса = СтрШаблон(ШаблонЗаголовка, АдресСервиса(ЭтаФорма));
	Элементы.ДекорацияОтключитьСервисПояснение.Заголовок = ЗаголовокОтключениеСервиса;
	Элементы.ДекорацияОтключитьСервисЛокальноПояснение.Заголовок = ЗаголовокОтключениеСервиса;
	
	Если РазделениеВключено Тогда
		Строка1 =  НСтр("ru = 'Код активации используется для подключения к сервису 1С:Кабинет сотрудника после переноса данных из облачного сервиса.'");
	Иначе
		Строка1 =  НСтр("ru = 'Код активации используется для подключения к сервису 1С:Кабинет сотрудника после переноса данных в облачный сервис.'");
	КонецЕсли;
	Строка2 =  НСтр("ru = 'После подключения другого приложения по коду активации доступ к сервису из этого приложения будет недоступен.'");
	ЗаголовокКодАктивации = СтрШаблон("%1%2%3", Строка1, Символы.ПС, Строка2);
	Элементы.ДекорацияПолучениеКодаАктивацииОписание.Заголовок = ЗаголовокКодАктивации;
	
	ОбновитьРеквизитыОтветственныйЗаСервис();
	ОбновитьЗаголовокЛичныеКабинеты();
	
	СтрокаШаблон = НСтр("ru = 'Последние опубликованные расчетные листки:'");
	УстановитьПривилегированныйРежим(Истина);
	МесяцПубликацииПоследней = РегистрыСведений.РасчетныеЛисткиКабинетСотрудника.МесяцПубликацииРасчетныхЛистков();
	УстановитьПривилегированныйРежим(Ложь);
	Если ЗначениеЗаполнено(МесяцПубликацииПоследней) Тогда
		МесяцПубликации = ДобавитьМесяц(МесяцПубликацииПоследней, 1);
		МесяцПубликацииРасчетныхЛистков = ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(МесяцПубликацииПоследней);
	Иначе
		МесяцПубликации = НачалоМесяца(ТекущаяДатаСеанса());
		МесяцПубликацииРасчетныхЛистков = НСтр("ru = 'Публикация не выполнялась'");
	КонецЕсли;
	Элементы.ДекорацияРасчетныеЛисткиПубликация.Заголовок = СтрШаблон("%1 %2", СтрокаШаблон, МесяцПубликацииРасчетныхЛистков);
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "МесяцПубликации", "МесяцПубликацииСтрокой");
	
	СтрокаСостояниеОплаты = НСтр("ru = 'Информация об оплаченных кабинетах отсутствует'");
	Элементы.ДекорацияСостояниеОплаты.Заголовок = СтрокаСостояниеОплаты;
	
	Элементы.ГруппаАбонентСервиса.Видимость 	= Не СервисКабинетСотрудникаВЛокальнойСети;
	Элементы.ГруппаНазваниеСервиса.Видимость 	= Не СервисКабинетСотрудникаВЛокальнойСети;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокЛичныеКабинеты()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ФизическиеЛица.Ссылка) КАК Количество,
	|	КОЛИЧЕСТВО(ОшибкиЗаполнения.БлокирующаяОшибка) КАК КоличествоСОшибками
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЗаполненияОбъектовУправлениеПерсоналом КАК ОшибкиЗаполнения
	|		ПО ФизическиеЛица.Ссылка = ОшибкиЗаполнения.Ссылка
	|			И (ОшибкиЗаполнения.БлокирующаяОшибка)
	|			И (ОшибкиЗаполнения.Приложение = ЗНАЧЕНИЕ(Перечисление.ПриложенияДляИнтеграции.КабинетСотрудника))
	|ГДЕ
	|	ФизическиеЛица.Ссылка ССЫЛКА Справочник.ФизическиеЛица";
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	ПубликуемыхКабинетов = 0;
	КоличествоКабинетовСОшибками = 0;
	Если Выборка.Следующий() Тогда
		ПубликуемыхКабинетов = Выборка.Количество - Выборка.КоличествоСОшибками;
		КоличествоКабинетовСОшибками = Выборка.КоличествоСОшибками;
	КонецЕсли;
	
	СтрокаШаблон =  НСтр("ru = 'Сейчас в сервисе публикуются данные для %1'");
	Если ПубликуемыхКабинетов = 1 Тогда
		СтрокаПодстановки = НСтр("ru = '1 сотрудника'");
	Иначе
		СтрокаПодстановки = СтрШаблон(НСтр("ru = '%1 сотрудников'"), ПубликуемыхКабинетов);
	КонецЕсли;
	ТекстСообщения = СтрШаблон(СтрокаШаблон, СтрокаПодстановки);
	Элементы.ДекорацияЛичныеКабинеты.Заголовок = ТекстСообщения;
	
	ЕстьОшибкиЗаполнения = (КоличествоКабинетовСОшибками > 0);
	Элементы.ОшибкиЗаполненияКабинеты.Видимость = ЕстьОшибкиЗаполнения;
	Если ЕстьОшибкиЗаполнения Тогда
		СтрокаШаблон =  НСтр("ru = 'Не публикуются кабинеты из-за ошибок заполнения для %1'");
		Если КоличествоКабинетовСОшибками = 1 Тогда
			СтрокаПодстановки = НСтр("ru = '1 сотрудника'");
		Иначе
			СтрокаПодстановки = СтрШаблон(НСтр("ru = '%1 сотрудников'"), КоличествоКабинетовСОшибками);
		КонецЕсли;
		ТекстСообщенияНеПубликуется = СтрШаблон(СтрокаШаблон, СтрокаПодстановки);
		Элементы.ОшибкиЗаполненияКабинеты.Заголовок = ТекстСообщенияНеПубликуется;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ДлительнаяОперацияОпубликоватьРасчетныеЛистки()
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.Вставить("НаименованиеФоновогоЗадания",
		СтрШаблон(НСтр("ru = 'Выгрузка расчетных листов в 1С:Кабинет сотрудника'")));
	ПараметрыВыполненияВФоне.ОжидатьЗавершение = 0;
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"КабинетСотрудника.ОпубликоватьРасчетныеЛистыЗаМесяцВФоне",
		Новый Структура("Месяц", МесяцПубликации),
		ПараметрыВыполненияВФоне);
		
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаСервере
Процедура ПерейтиКНовомуПодключению()

	РегистрыСведений.СостояниеОтложенногоПодключенияКСервису.СоздатьНаборЗаписей().Записать();
	УстановитьДоступностьЭУПодключенияКСервису(Ложь);
	ВыполнитьНачальноеЗаполнение();

КонецПроцедуры

&НаСервере
Процедура ВыполнитьНачальноеЗаполнение()

	НачатьСценарийПодключения 						= Ложь;
	НачатьПолучениеИнформацииОСервисе 				= Ложь;
	ОтложенноеПодключениеКСервису 					= Ложь;
	ЗавершитьСценарийОтложенногоПодключения 		= Ложь;
	ФормаВРежимеАктивации 							= Ложь;
	Элементы.СоздатьНовоеПодключение.Видимость 		= Ложь;
	
	СтрокаЗаголовок = НСтр("ru = '1С:Кабинет сотрудника. Подключение'");
	
	ПрочитатьНастройкиИнтеграции();
	
	СервисКабинетСотрудникаВЛокальнойСети = Константы.СервисКабинетСотрудникаВЛокальнойСети.Получить();
	СервисПодключен = Константы.ИспользуетсяСервисКабинетСотрудника.Получить();
	СостояниеПодключения = РегистрыСведений.СостояниеОтложенногоПодключенияКСервису.СостояниеПодключенияКСервису();
	Если ЗначениеЗаполнено(СостояниеПодключения.Состояние) Тогда
		// Используется отложенное подключение к сервису.
		Если СостояниеПодключения.Состояние = Перечисления.СостоянияПодключенияКабинетСотрудника.Создано Тогда
			// подключение выполнено
			СсылкаДляАдминистратора = СостояниеПодключения.СсылкаДляАдминистратора;
			УстановитьЗаголовокДекорацияПереходДляАдминистратора();
			Если Не СервисПодключен Тогда
				СервисПодключен = Истина;
				ТребуетсяОбновитьИнтерфейс = Истина;
				ЗавершитьСценарийОтложенногоПодключения = Истина;
				УстановитьПривилегированныйРежим(Истина);
				Константы.ИспользуетсяСервисКабинетСотрудника.Установить(Истина);
				// удаляем сведения отложенного подключения
				РегистрыСведений.СостояниеОтложенногоПодключенияКСервису.СоздатьНаборЗаписей().Записать();
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
		Иначе
			ИдентификаторПриложения = СостояниеПодключения.ИдентификаторПриложения;
			ОтложенноеПодключениеКСервису = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если СервисПодключен Тогда
		
		СтрокаЗаголовок = НСтр("ru = '1С:Кабинет сотрудника'");
		// Включаем страницу, т.к. могла быть выключена.
		Элементы.СтраницаСервисПодключен.Видимость = Истина;
		// Выключаем страницы, чтобы не было полосы прокрутки.
		Элементы.СтраницаПодключениеСервиса.Видимость = Ложь;
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСервисПодключен;
		
		// Выключим декорации длительных операций.
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ИндикаторДлительнойОперацииОбновлениеПриложения", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ИндикаторДлительнойОперацииИзменениеАбонента", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаДекорацияОтключениеСервиса", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ИндикаторДлительнойОперацииОбновлениеОплаты", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаПодключениеВыполнено", "Видимость", ФормаВРежимеПодключения);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаДекорацияПолучениеКодаАктивации", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаДекорацияПодключениеПоКодуАктивации", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"КодАктивации", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ИндикаторДлительнойОперацииПроверитьАдрес", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ИндикаторДлительнойОперацииПроверкаПодключения", "Видимость", Ложь);
		
		// Проверка доступности приложения по наличию ключей.
		ЕстьКлючиПриложения = КабинетСотрудника.ЕстьКлючиПриложения();
		// Проверка доступности менеджера сервиса по наличию ключей при условии работы не в локальном режиме.
		ЕстьКлючиМенеджераСервиса = Не СервисКабинетСотрудникаВЛокальнойСети И КабинетСотрудникаМенеджерСервиса.ЕстьКлючиМенеджераСервиса();
		
		ЗаполнитьИнформациюОСервисеИзНастроек();
		ОбновитьОписаниеВидаКонтактнойИнформации();
		ОбновитьОписаниеПубликуемойСтруктуры();
		ОбновитьРезультатОбменаНаСервере();
		ПрочитатьНастройкиЗаявокНаОтпуск();
		ПрочитатьОбновитьНастройкиИспользуемаяФункциональность();
		
		Если ЕстьКлючиПриложения Тогда
			
			КлючиПриложенияАктуальные = КабинетСотрудника.КлючиПриложенияАктуальные();
			
			Если КлючиПриложенияАктуальные Тогда
				
				Элементы.СтраницыСостояниеСервиса.ТекущаяСтраница = Элементы.СтраницаРаботаССервисом;
				Элементы.СтраницыИнформацияОСервисе.ТекущаяСтраница = Элементы.СтраницаИнформацияОСервисе;
				Если СервисКабинетСотрудникаВЛокальнойСети Тогда
					Элементы.СтраницыОтключениеСервиса.ТекущаяСтраница = Элементы.СтраницаОтключениеЛокальнаяВерсия;
				Иначе
					Элементы.СтраницыОтключениеСервиса.ТекущаяСтраница = Элементы.СтраницаОтключениеПолучениеКодаАктивации;
					НачатьПолучениеИнформацииОСервисе = Истина;
					Если РазделениеВключено Тогда
						ИнтернетПоддержкаПодключена = Истина;
					Иначе
						ИнтернетПоддержкаПодключена = ИнтернетПоддержкаПодключена();
					КонецЕсли;
				КонецЕсли;
				
				Элементы.ДекорацияТребуетсяПодключениеИП.Видимость = Не ИнтернетПоддержкаПодключена;
				ОбновитьЭУОтключенияСервиса(ЭтаФорма);
				
			Иначе
				
				Элементы.СтраницыСостояниеСервиса.ТекущаяСтраница = Элементы.СтраницаПриложениеНедоступно;
				Элементы.ДекорацияСервисНедоступенОписание.Заголовок = ЗаголовокСервисНедоступен();
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
						"ДекорацияОтключениеНедостаточноПрав", "Видимость", НЕ ПолноправныйПользователь);
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
						"ГруппаПриложениеНедоступноОтключить", "Доступность", ПолноправныйПользователь);
				
			КонецЕсли;
			
		Иначе
			
			Элементы.ДекорацияАктивацияСервисаИнформация.Заголовок = ЗаголовокАктивацияСервисаИнформация();
			ФормаВРежимеАктивации = Истина;
			Элементы.СтраницыСостояниеСервиса.ТекущаяСтраница = Элементы.СтраницаАктивацияСервиса;
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
					"ДекорацияНетПравИнтернетПоддержка", "Видимость", Ложь);
			
			Если ПолноправныйПользователь Тогда
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
					"ДекорацияАктивацияНедостаточноПрав", "Видимость", Ложь);
				
				Если РазделениеВключено Тогда
					ИнтернетПоддержкаПодключена = Истина;
					Элементы.СтраницыАктивацияСервиса.ТекущаяСтраница = Элементы.СтраницаАктивация;
					ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
						"ГруппаИнтернетПоддержка", "Видимость", Ложь);
				Иначе
					ИнтернетПоддержкаПодключена = ИнтернетПоддержкаПодключена();
					Если ИнтернетПоддержкаПодключена Тогда
						Элементы.СтраницыАктивацияСервиса.ТекущаяСтраница = Элементы.СтраницаАктивацияДлительнаяОперация;
					Иначе
						Элементы.СтраницыАктивацияСервиса.ТекущаяСтраница = Элементы.СтраницаАктивация;
						ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
							"ГруппаВводКодаАктивации", "Доступность", Ложь);
					КонецЕсли;
					ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
						"ГруппаИнтернетПоддержка", "Видимость", Не ИнтернетПоддержкаПодключена);
				КонецЕсли;
				
				ВариантПродолженияАктивировать = 1;
				ВариантПродолженияОтключить = 0;
				ОбновитьЭУАктивацииСервиса(ЭтаФорма);
				
			Иначе
				
				// У пользователя нет права на подключение к сервису,
				// но есть право на настройку сервиса.
				Элементы.СтраницыАктивацияСервиса.ТекущаяСтраница = Элементы.СтраницаАктивация;
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
					"ГруппаИнтернетПоддержка", "Видимость", Ложь);
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
					"ДекорацияАктивацияНедостаточноПрав", "Видимость", Истина);
				Элементы.СтраницыАктивацияСервиса.ТекущаяСтраница = Элементы.СтраницаАктивация;
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
					"ГруппаАктивацияОтключение", "Доступность", Ложь);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ОтложенноеПодключениеКСервису Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ИндикаторДлительнойОперацииПроверкаПодключения", "Видимость", Ложь);
		
		ИдентификаторПриложения = СостояниеПодключения.ИдентификаторПриложения;
		
		ФормаВРежимеПодключения = Истина;
		Элементы.СтраницаПодключениеСервиса.Видимость = Истина;
		
		// Выключаем страницу, чтобы не было полосы прокрутки.
		Элементы.СтраницаСервисПодключен.Видимость = Ложь;
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПодключениеСервиса;
		Элементы.СтраницыНовоеПодключение.ТекущаяСтраница = Элементы.СтраницаОтложенноеПодключение;
		ОшибкаСоздания = СостояниеПодключения.Состояние = Перечисления.СостоянияПодключенияКабинетСотрудника.ОшибкаСоздания;
		ОбновитьЭУОтложенноеПодключение(ОшибкаСоздания);
	ИначеЕсли ПолноправныйПользователь Тогда
		
		// сервис не подключен, полноправный пользователь
		
		ФормаВРежимеПодключения = Истина;
		Элементы.СтраницаПодключениеСервиса.Видимость = Истина;
		
		// Выключаем страницу, чтобы не было полосы прокрутки.
		Элементы.СтраницаСервисПодключен.Видимость = Ложь;
		
		ОбновитьОписаниеВидаКонтактнойИнформации();
		УстановитьВидимостьЭУИзмененияВидовКИ();
		ОбновитьОписаниеПубликуемойСтруктурыПриПодключении();
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПодключениеСервиса;
		Если СервисКабинетСотрудникаВЛокальнойСети Тогда
			
			Элементы.СтраницыНовоеПодключение.ТекущаяСтраница = Элементы.СтраницаПодключениеЛокально;
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ГруппаИндикацияДлительнойОперацииПодключениеЛокально", "Видимость", Ложь);
			ОбновитьЭУОтветственный(ЭтаФорма);
			
		Иначе
			
			Элементы.СтраницыНовоеПодключение.ТекущаяСтраница = Элементы.СтраницаПодключение;
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ИнтернетПоддержка", "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ВыборАбонента", "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ИндикаторДлительнойОперацииРезервированиеИмениДомена", "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ГруппаИндикацияДлительнойОперацииПодключение", "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"НастройкиПодключения", "Доступность", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"Этап5", "Видимость", Ложь);
			
			ЗаполнитьДанныеДляПроверкиИмениДомена();
			Элементы.ДекорацияИмяДоменаПояснение.Заголовок = НСтр("ru = 'В адресе можно использовать только латинские буквы, цифры и дефис (""-"")'");
			
			ОбновитьЭУОтветственный(ЭтаФорма);
			
			РассчитатьПериодРасчетныхЛистков();
			ОбновитьСообщениеОПубликации();
			
			Если Не ЭтоАвтономноеРабочееМесто Тогда
				Если РазделениеВключено Тогда
					НачатьСценарийПодключения = Истина;
				Иначе
					ИнтернетПоддержкаПодключена = ИнтернетПоддержкаПодключена();
					Если ИнтернетПоддержкаПодключена Тогда
						НачатьСценарийПодключения = Истина;
					Иначе
						ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
							"ИнтернетПоддержка", "Видимость", Истина);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		// Сервис не подключен, у пользователя нет права на подключение к сервису,
		// но есть право на настройку сервиса.
		Элементы.СтраницыНовоеПодключение.ТекущаяСтраница = Элементы.СтраницаПодключениеНедоступно;
		
	КонецЕсли;
	
	Заголовок = СтрокаЗаголовок;
	
	Если НачатьСценарийПодключения Тогда
		Элементы.СтраницыНовоеПодключение.ТекущаяСтраница = Элементы.СтраницаДлительнаяОперация;
		НачатьПолучениеАбонентов();
	ИначеЕсли НачатьПолучениеИнформацииОСервисе И ЕстьКлючиМенеджераСервиса Тогда
		Элементы.СтраницыИнформацияОСервисе.ТекущаяСтраница = Элементы.СтраницаСостояниеДлительнаяОперация;
		НачатьПолучениеИнформацииОСервисе();
	ИначеЕсли СервисПодключен И Не ЕстьКлючиПриложения И ИнтернетПоддержкаПодключена Тогда
		НачатьПроверкуДоступностиИнтернетПоддержки();
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнтернетПоддержкаПодключена()

	МодульИПП = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
	Возврат МодульИПП.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();	

КонецФункции 

&НаСервере
Процедура ОчиститьДанныеПриОтключенииСервиса()

	КабинетСотрудникаМенеджерСервиса.ЗаписатьСобытиеОтключениеСервиса(Ложь);
	КабинетСотрудникаМенеджерСервиса.ОчиститьДанныеПриОтключенииСервиса();

КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкиИзФайлаНаСервере(АдресФайла)
	
	Результат = Новый Структура("Настройки,СообщениеОбОшибке");
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
	УдалитьИзВременногоХранилища(АдресФайла);
	
	НетНастроек = Ложь;
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.ОткрытьФайл(ИмяВременногоФайла);
		Настройки = ПрочитатьJSON(ЧтениеJSON, Истина);
		Если Не ЗначениеЗаполнено(Настройки["url"]) Или Не ЗначениеЗаполнено(Настройки["clientID"]) Или Не ЗначениеЗаполнено(Настройки["clientSecret"]) Тогда
			НетНастроек = Истина;
		Иначе
			Результат.Настройки = Настройки;
		КонецЕсли;
	Исключение
		НетНастроек = Истина;
	КонецПопытки;
	
	Если НетНастроек Тогда
		СообщениеОбОшибке = НСтр("ru='Выбранный файл не содержит настроек подключения к сервису.'");
		Результат.СообщениеОбОшибке = СообщениеОбОшибке;
	КонецЕсли;
	
	ЧтениеJSON.Закрыть();
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура ОбновитьРеквизитыОтветственныйЗаСервис()
	
	СтрокаТелефонПочта = "";
	ЗаполнитьРеквизитыОтветственного(Ответственный, Логин, ЭлектроннаяПочта, МобильныйТелефон, Пол, ОтветственныйНаименование);
	
	СтрокаТелефонПочта = СтрШаблон(НСтр("ru = 'Мобильный телефон и почта, указанные в сервисе: %1, %2'"), МобильныйТелефон, ЭлектроннаяПочта);
	Элементы.ДекорацияТелефонПочтаОтветственногоЗаСервис.Заголовок = СтрокаТелефонПочта;

КонецПроцедуры

&НаСервере
Функция ЗаголовокАктивацияСервисаИнформация()
	
	Если РазделениеВключено Тогда
		Текст1 = НСтр("ru = 'Выполнен перенос данных приложения в облачный сервис.'");
	Иначе
		Текст1 = НСтр("ru = 'Выполнен перенос данных приложения из облачного сервиса.'")
	КонецЕсли;
	Текст2 = НСтр("ru = 'Для продолжения работы с сервисом 1С:Кабинет сотрудника из этого приложения необходимо выполнить активацию подключения.'");
	
	Возврат СтрШаблон("%1%2%3", Текст1, Символы.ПС, Текст2);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЭУАктивацииСервиса(Форма)

	Форма.Элементы.ГруппаАктивироватьГоризонтальная.Доступность = Форма.ВариантПродолженияАктивировать;
	Форма.Элементы.ГруппаОтключитьГоризонтальная.Доступность = Форма.ВариантПродолженияОтключить;
	
КонецПроцедуры

&НаКлиенте
Функция КодАктивацииКорректный()
	
	КодАктивацииКорректный = Истина;
	ТекстСообщения = "";
	КодАктивации = СокрЛП(КодАктивации);
	Если ПустаяСтрока(КодАктивации) Тогда
		ТекстСообщения = НСтр("ru = 'Не указан код активации.'");
	Иначе
		// формат кода активации ххх-ххх.
		Если СтрДлина(КодАктивации) <> 7
			Или Сред(КодАктивации,4,1) <> "-"
			Или Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Лев(КодАктивации,3))
			Или Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Сред(КодАктивации,5,3)) Тогда
			ТекстСообщения = НСтр("ru = 'Неправильный код активации.'");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстСообщения) Тогда
		КодАктивацииКорректный = Ложь;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);	
	КонецЕсли;
	
	Возврат КодАктивацииКорректный;

КонецФункции

&НаСервере
Функция ЗаголовокСервисНедоступен()

	Если РазделениеВключено Тогда
		Строка1 = НСтр("ru = 'Сервис по адресу %1 недоступен для работы из этого приложения.'");
		Строка2 = НСтр("ru = 'Возможно к сервису по этому адресу подключено другое ваше приложение.'");
	Иначе
		Строка1 = НСтр("ru = 'Сервис по адресу %1 недоступен для работы из этой информационной базы.'");
		Строка2 = НСтр("ru = 'Возможно к сервису по этому адресу подключена другая ваша информационная база.'");
	КонецЕсли;
	Строка1 = СтрШаблон(Строка1, АдресСервиса(ЭтаФорма));
	
	Возврат СтрШаблон("%1%2%3", Строка1,Символы.ПС,Строка2);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЭУОтключенияСервиса(Форма)

	Форма.Элементы.ГруппаОтключитьСервисГоризонтальная.Доступность = Форма.ВариантОтключенияОтключить;
	Форма.Элементы.ГруппаУдалитьСервисГоризонтальная.Доступность = Форма.ВариантОтключенияУдалить;

КонецПроцедуры

&НаКлиенте
Процедура ВариантОтключенияОтключитьПриИзменении(Элемент)
	
	ВариантОтключенияУдалить = 0;
	ОбновитьЭУОтключенияСервиса(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтключенияУдалитьПриИзменении(Элемент)
	
	ВариантОтключенияОтключить = 0;
	ОбновитьЭУОтключенияСервиса(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиИнтеграции()
	
	Настройки = РегистрыСведений.НастройкиИнтеграцииУправлениеПерсоналом.Настройки();
	ВидКИМобильныйТелефон 				= Настройки.ВидКИМобильныйТелефон;
	ВидКИАдресЭлектроннойПочты 			= Настройки.ВидКИАдресЭлектроннойПочты;
	ПубликоватьСтруктуруЮридическихЛиц 	= Настройки.ПубликоватьСтруктуруЮридическихЛиц;
	
	Настройки = РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.НастройкиИнтеграции();
	ИспользуетсяКадровыйЭДО 	= Настройки.ИспользуетсяКадровыйЭДО;
	ДнейСохраненияПубликации 	= Настройки.ДнейСохраненияПубликации;
	
	СпособПолученияСогласияНаПрисоединениеККЭДО = Настройки.СпособПолученияСогласияНаПрисоединениеККЭДО;
	
	ИспользоватьОбсуждения = Настройки.ИспользоватьОбсуждения;
	ИспользуютсяОбсуждения = ПолучитьФункциональнуюОпцию("ИспользуютсяОбсужденияКабинетСотрудника");

КонецПроцедуры

&НаСервере
Процедура СохранитьНовыеВидыКонтактнойИнформации(НовыйВидКИМобильныйТелефон, НовыйВидКИАдресЭлектроннойПочты, СообщениеОбОшибке)
	
	УстановитьПривилегированныйРежим(Истина);
	ИнтеграцияУправлениеПерсоналом.СохранитьНовыеВидыКонтактнойИнформации(НовыйВидКИМобильныйТелефон, НовыйВидКИАдресЭлектроннойПочты, СообщениеОбОшибке);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если СообщениеОбОшибке = Неопределено Тогда
		ВидКИМобильныйТелефон = НовыйВидКИМобильныйТелефон;
		ВидКИАдресЭлектроннойПочты = НовыйВидКИАдресЭлектроннойПочты;
		Если СервисПодключен Тогда
			ОбновитьЗаголовокЛичныеКабинеты();
			ОбновитьОписаниеВидаКонтактнойИнформации();
		Иначе
			ОбновитьОписаниеВидаКонтактнойИнформации();
			ЗаполнитьРеквизитыОтветственного(Ответственный, Логин, ЭлектроннаяПочта, МобильныйТелефон, Пол, ОтветственныйНаименование);
			ОбновитьЭУОтветственный(ЭтаФорма);
			ОбновитьСообщениеОПубликации();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОписаниеВидаКонтактнойИнформации()

	ВидыКИ = Новый Массив;
	ВидыКИ.Добавить(ВидКИМобильныйТелефон);
	ВидыКИ.Добавить(ВидКИАдресЭлектроннойПочты);
	НаименованиеВидовКИ = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидыКИ, "Наименование");
	
	Строка1 = НСтр("ru = 'Виды контактной информации, используемые для работы в сервисе,'");
	Строка2 = НСтр("ru = 'мобильный телефон - ""%1"", адрес электронной почты - ""%2""'");
	Строка2 = СтрШаблон(Строка2,НаименованиеВидовКИ[ВидКИМобильныйТелефон],НаименованиеВидовКИ[ВидКИАдресЭлектроннойПочты]);
	
	ТекстЗаголовка = СтрШаблон("%1%2%3",Строка1,Символы.ПС,Строка2);
	Элементы.ДекорацияИзменениеВидаКИПояснение.Заголовок = ТекстЗаголовка;
	Элементы.ДекорацияИзменениеВидаКИЛокальноПояснение.Заголовок = ТекстЗаголовка;
	
	ВидыКИ = Новый Массив;
	ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица);
	ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица);
	НаименованиеВидовКИ = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидыКИ, "Наименование");
	
	Строка1 = НСтр("ru = 'В сервисе 1С:Кабинет сотрудника публикуются мобильные телефоны и адреса электронной почты сотрудников.'");
	Строка2 = НСтр("ru = 'По умолчанию используются предопределенные значения видов контактной информации: мобильный телефон - ""%1"" и адрес электронной почты - ""%2"". Вы можете создать собственные виды контактной информации и использовать их для публикации данных в сервисе.'");
	Строка2 = СтрШаблон(Строка2,
		НаименованиеВидовКИ[Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица],
		НаименованиеВидовКИ[Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица]);
	ТекстЗаголовка = СтрШаблон("%1%2%3",Строка1,Символы.ПС,Строка2);
	
	Элементы.ДекорацияВидыКонтактнойИнформации.Заголовок = ТекстЗаголовка;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭУИзмененияВидовКИ()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Тип В (ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты), ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|	И ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникФизическиеЛица)
	|	И НЕ ВидыКонтактнойИнформации.Предопределенный";
	
	ВидимостьЭУ = Не Запрос.Выполнить().Пустой();
	Элементы.ГруппаИзменениеВидаКИГоризонтальная.Видимость = ВидимостьЭУ;
	Элементы.ГруппаИзменениеВидаКИЛокальноГоризонтальная.Видимость = ВидимостьЭУ;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьАктивныеФоновыеЗадания()

	Возврат КабинетСотрудника.ЕстьАктивныеФоновыеЗаданияОбменПубликация();

КонецФункции
	
&НаСервереБезКонтекста
Функция СервисЗаблокирован()

	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Возврат Настройки.СервисЗаблокирован; 

КонецФункции

&НаСервереБезКонтекста
Функция ОтборЖурналаРегистрации(ВидСобытия, Уровень)
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	Отбор = Новый Структура;
	
	ИменаСобытийЖР = ИнтеграцияУправлениеПерсоналом.ИменаСобытийЖР(Приложение);
	ИменаСобытий = Новый Массив;
	Для каждого ЭлементКоллекции Из ИменаСобытийЖР Цикл
		ИменаСобытий.Добавить(ЭлементКоллекции.Значение);
	КонецЦикла;
	Отбор.Вставить("СобытиеЖурналаРегистрации", ИменаСобытий);
	
	Если ЗначениеЗаполнено(ВидСобытия) Тогда
		СобытиеОбмена = РегистрыСведений.СобытияОбменаУпралениеПерсоналом.СобытиеОбмена(Приложение, ВидСобытия);
		Отбор.Вставить("ДатаНачала", 	СобытиеОбмена.ДатаНачала);
		Отбор.Вставить("ДатаОкончания", СобытиеОбмена.ДатаОкончания);
	Иначе
		Отбор.Вставить("ДатаНачала", НачалоДня(ТекущаяДатаСеанса()) - 86400*7);
	КонецЕсли;
	Если ЗначениеЗаполнено(Уровень) Тогда
		Отбор.Вставить("Уровень", Уровень);
	КонецЕсли;
	
	Возврат Отбор;

КонецФункции

&НаСервере
Функция ДлительнаяОперацияУдалитьСервис()
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.Вставить("НаименованиеФоновогоЗадания", СтрШаблон(НСтр("ru = 'Удаление сервиса 1С:Кабинет сотрудника'")));
	ПараметрыВыполненияВФоне.ОжидатьЗавершение = 0;
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"КабинетСотрудникаМенеджерСервиса.ОтключениеСервисаФоновоеЗадание",
		Неопределено,
		ПараметрыВыполненияВФоне);
		
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура УдалитьСервисЗавершение(ФоновоеЗадание, ДополнительныеПараметры) Экспорт

	Если ФоновоеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ФоновоеЗадание.Статус = "Выполнено" Тогда
		УдалитьСервисЗавершениеНаСервере();
		СервисОтключенСообщитьПользователю();
		ПодключитьОбработчикОжидания("ОтложенноеОбновлениеИнтерфейса", 0.5, Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьСервисЗавершениеНаСервере()

	КабинетСотрудникаМенеджерСервиса.ОчиститьДанныеПриОтключенииСервиса();

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбменВыгрузитьЖурналПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ОбменССервисомЗаблокирован() Тогда
			Возврат;
		КонецЕсли;
		ОчиститьСообщения();
		ВыполнитьОбменСохранитьРезультатВЖурнал();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПубликацииРасчетныхЛистковВыгрузкаЖурнала(Команда)
	
	ПараметрыОткрытия = Новый Структура("ПодготовитьДанныеДляТехПоддержки", Истина);
	ОткрытьФорму("Обработка.ПубликацияРасчетныхЛистковКабинетСотрудника.Форма.ПубликацияРасчетныхЛистков", ПараметрыОткрытия, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкуИспользуетсяКадровыйЭДО(ИспользуетсяКадровыйЭДО)

	РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.СохранитьЗначениеИспользуетсяКадровыйЭДО(ИспользуетсяКадровыйЭДО);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДнейСохраненияПубликации()

	СохранитьНастройкуДнейСохраненияПубликации(ДнейСохраненияПубликации);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкуДнейСохраненияПубликации(ДнейСохраненияПубликации)

	РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.СохранитьЗначениеДнейСохраненияПубликации(ДнейСохраненияПубликации);

КонецПроцедуры

&НаКлиенте
Функция ОбменССервисомЗаблокирован()

	Если СервисЗаблокирован() Тогда
		ТекстСообщения = КабинетСотрудникаКлиент.ТекстСообщенияОБлокировкеСервиса();
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат Истина;
	КонецЕсли;
	
	Если ЕстьАктивныеФоновыеЗадания() Тогда
		ТекстСообщения = НСтр("ru = 'Обмен уже выполняется, повторите попытку позже.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаКлиенте
Процедура ВыполнитьОбменСохранитьРезультатВЖурнал()

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыполнитьОбменСохранитьРезультатВЖурналЗавершение", ЭтотОбъект);
	
	ПараметрыОткрытия = ПараметрыОбменаССохранениемРезультата(Приложение, ИдентификаторПриложения);
	ОткрытьФорму("Обработка.ИнтеграцияУправлениеПерсоналом.Форма.ВыполнитьОбменСохранитьРезультат", ПараметрыОткрытия, ЭтаФорма,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПараметрыОбменаССохранениемРезультата(Приложение, ИдентификаторПриложения)
	
	ИмяФайла = СтрШаблон("%1_%2", "EventLogExchange", ИдентификаторПриложения);
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("СобытиеОбмена", 		Перечисления.ВидыСобытийОбменаУправлениеПерсоналом.Обмен);
	ПараметрыОткрытия.Вставить("Приложение", 			Приложение);
	ПараметрыОткрытия.Вставить("ИмяФайла", 				ИмяФайла);
	ПараметрыОткрытия.Вставить("ИмяМетода", 			"ИнтеграцияКабинетСотрудника.ВыполнитьОбменФоновоеЗадание");
	ПараметрыОткрытия.Вставить("КлючФоновогоЗадания", 	ИнтеграцияКабинетСотрудника.КлючФоновогоЗаданияОбмен());
	
	Возврат ПараметрыОткрытия;

КонецФункции

&НаКлиенте
Процедура ВыполнитьОбменСохранитьРезультатВЖурналЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.РезультатВыполненияОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.РезультатВыполненияОбмена.БылиОшибки И Результат.ИмяСобытияОбмена = "ОбновлениеПубликации" Тогда
		СообщениеОбОшибке = НСтр("ru = 'Обновление публикации в сервисе 1С:Кабинет сотрудника завершено с ошибками.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке);
	КонецЕсли;
	
	Если Не ПустаяСтрока(Результат.ПолноеИмяФайла) Тогда
		ТекстСообщения = СтрШаблон("%1: %2", НСтр("ru = 'Данные сохранены в'"), Результат.ПолноеИмяФайла);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьОписаниеПубликуемойСтруктуры()

	Если ПубликоватьСтруктуруЮридическихЛиц Тогда
		ТекстЗаголовка = НСтр("ru = 'Структура Компании в сервисе 1С:Кабинет сотрудника соответствует Подразделениям организации (структуре юридических лиц).'");
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Структура Компании в сервисе 1С:Кабинет сотрудника соответствует Структуре предприятия.'");
	КонецЕсли;
	Элементы.ДекорацияОписаниеПубликуемойСтруктуры.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОписаниеПубликуемойСтруктурыПриПодключении()

	Если ПубликоватьСтруктуруЮридическихЛиц Тогда
		ТекстЗаголовка = НСтр("ru = 'Структура Компании в сервисе 1С:Кабинет сотрудника будет соответствовать Подразделениям организации (структуре юридических лиц).'");
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Структура Компании в сервисе 1С:Кабинет сотрудника будет соответствовать Структуре предприятия.'");
	КонецЕсли;
	Элементы.ДекорацияПубликуемаяСтруктураПриПодключении.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПубликуемуюСтруктураКомпанииЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПубликоватьСтруктуруЮридическихЛиц <> Результат.ПубликоватьСтруктуруЮридическихЛиц Тогда
		СообщениеОбОшибке = Неопределено;
		СохранитьИзменениеПубликуемойСтруктуры(Результат.ПубликоватьСтруктуруЮридическихЛиц, СообщениеОбОшибке);
		Если СообщениеОбОшибке = Неопределено Тогда
			Оповестить("ИзмененаПубликуемаяСтруктураПредприятия");
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьИзменениеПубликуемойСтруктуры(ЗначениеПубликоватьСтруктуруЮридическихЛиц, СообщениеОбОшибке)
	
	УстановитьПривилегированныйРежим(Истина);
	ИнтеграцияУправлениеПерсоналом.СохранитьНастройкуПубликуемойСтруктурыКомпании(ЗначениеПубликоватьСтруктуруЮридическихЛиц, СообщениеОбОшибке);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если СообщениеОбОшибке = Неопределено Тогда
		ПубликоватьСтруктуруЮридическихЛиц = ЗначениеПубликоватьСтруктуруЮридическихЛиц;
		Если СервисПодключен Тогда
			ОбновитьОписаниеПубликуемойСтруктуры();
		Иначе
			ОбновитьОписаниеПубликуемойСтруктурыПриПодключении();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НачатьПроверкуДоступностиАдреса()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ИндикаторДлительнойОперацииПроверитьАдрес",
			"Видимость",
			Истина);
		
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	ПараметрыВыполненияВФоне.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("КабинетСотрудника.ПроверкаДоступностиАдресаПоИмениФоновоеЗадание", Неопределено, ПараметрыВыполненияВФоне);
	
КонецФункции

&НаКлиенте
Процедура ПроверкаДоступностиАдресаПоИмениЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ИндикаторДлительнойОперацииПроверитьАдрес",
			"Видимость",
			Ложь);
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ТекстСообщения = НСтр("ru = 'При выполнении фонового задания возникла ошибка:'") + Символы.ПС + Результат.КраткоеПредставлениеОшибки;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ПроверкаДоступностиАдресаПоИмениЗавершениеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаДоступностиАдресаПоИмениЗавершениеНаСервере()

	НастройкиСервиса = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	АдресПриложенияПоИмениДоступен = НастройкиСервиса.АдресПриложенияПоИмениДоступен;
	
	УстановитьЗаголовокСостояниеАдресаПоИмени(АдресПриложенияПоИмениДоступен);
	Элементы.ПроверитьДоступностьАдреса.Видимость = Не АдресПриложенияПоИмениДоступен;
	Элементы.ДекорацияАдресПриложения.Доступность = АдресПриложенияПоИмениДоступен;
	Элементы.ДекорацияАдресПриложенияВременный.Видимость = Не АдресПриложенияПоИмениДоступен;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокСостояниеАдресаПоИмени(АдресПриложенияПоИмениДоступен)

	Если АдресПриложенияПоИмениДоступен Тогда
		СтрЗаголовок = НСтр("ru = 'Cервис по этому адресу доступен.'");
	Иначе
		СтрЗаголовок = НСтр("ru = 'Cервис по этому адресу будет доступен через несколько минут.'");
	КонецЕсли;
	Элементы.ДекорацияСостояниеАдресаПоИмени.Заголовок = СтрЗаголовок;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция АдресСервиса(Форма)

	АдресСервиса = Форма.АдресПриложения;
	Если ЗначениеЗаполнено(Форма.АдресПриложенияПоИмени) Тогда
		АдресСервиса = Форма.АдресПриложенияПоИмени;
	КонецЕсли;
	
	Возврат АдресСервиса;

КонецФункции

&НаКлиенте
Процедура СкрытьРазделКомпанияПриИзменении(Элемент)
	
	Если СохранитьНастройкиИспользуемаяФункциональностьСервиса() Тогда
		ИспользуемаяФункциональностьСервисаПрежнееЗначение.СкрытьРазделКомпания = ИспользуемаяФункциональностьСервиса.СкрытьРазделКомпания;
	Иначе
		ИспользуемаяФункциональностьСервиса.СкрытьРазделКомпания = ИспользуемаяФункциональностьСервисаПрежнееЗначение.СкрытьРазделКомпания;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьРазделСправкиПриИзменении(Элемент)
	
	Если СохранитьНастройкиИспользуемаяФункциональностьСервиса() Тогда
		ИспользуемаяФункциональностьСервисаПрежнееЗначение.СкрытьРазделСправки = ИспользуемаяФункциональностьСервиса.СкрытьРазделСправки;
	Иначе
		ИспользуемаяФункциональностьСервиса.СкрытьРазделСправки = ИспользуемаяФункциональностьСервисаПрежнееЗначение.СкрытьРазделСправки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьРазделДокументыПриИзменении(Элемент)
	
	Если СохранитьНастройкиИспользуемаяФункциональностьСервиса() Тогда
		ИспользуемаяФункциональностьСервисаПрежнееЗначение.СкрытьРазделДокументы = ИспользуемаяФункциональностьСервиса.СкрытьРазделДокументы;
	Иначе
		ИспользуемаяФункциональностьСервиса.СкрытьРазделДокументы = ИспользуемаяФункциональностьСервисаПрежнееЗначение.СкрытьРазделДокументы;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомпенсацияОтпускаНедоступнаПриИзменении(Элемент)
	
	Если СохранитьНастройкиИспользуемаяФункциональностьСервиса() Тогда
		ИспользуемаяФункциональностьСервисаПрежнееЗначение.КомпенсацияОтпускаНедоступна = ИспользуемаяФункциональностьСервиса.КомпенсацияОтпускаНедоступна;
	Иначе
		ИспользуемаяФункциональностьСервиса.КомпенсацияОтпускаНедоступна = ИспользуемаяФункциональностьСервисаПрежнееЗначение.КомпенсацияОтпускаНедоступна;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуемаяФункциональностьСервисаУровеньДоступаКИПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_ИспользуемаяФункциональностьСервисаУровеньДоступаКИПриИзменении", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИспользуемаяФункциональностьСервисаУровеньДоступаКИПриИзменении()

	Если СохранитьНастройкиИспользуемаяФункциональностьСервиса() Тогда
		ИспользуемаяФункциональностьСервисаПрежнееЗначение.УровеньДоступаКИ = ИспользуемаяФункциональностьСервиса.УровеньДоступаКИ;
	Иначе
		ИспользуемаяФункциональностьСервиса.УровеньДоступаКИ = ИспользуемаяФункциональностьСервисаПрежнееЗначение.УровеньДоступаКИ;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПрочитатьОбновитьНастройкиИспользуемаяФункциональность()

	ПрочитатьНастройкиИспользуемаяФункциональность();
	ОбновитьДоступностьЭУИспользуемойФункциональности();

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииМаксимальноеКоличествоДнейОтпускаАвансом()

	Если СохранитьНастройкиЗаявокНаОтпуск() Тогда
		НастройкиЗаявокНаОтпускПрежнееЗначение.МаксимальноеКоличествоДнейОтпускаАвансом = НастройкиЗаявокНаОтпуск.МаксимальноеКоличествоДнейОтпускаАвансом;
	Иначе
		НастройкиЗаявокНаОтпуск.МаксимальноеКоличествоДнейОтпускаАвансом = НастройкиЗаявокНаОтпускПрежнееЗначение.МаксимальноеКоличествоДнейОтпускаАвансом;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличествоДнейДоНачалаОтпуска()

	Если СохранитьНастройкиЗаявокНаОтпуск() Тогда
		НастройкиЗаявокНаОтпускПрежнееЗначение.КоличествоДнейДоНачалаОтпуска = НастройкиЗаявокНаОтпуск.КоличествоДнейДоНачалаОтпуска;
	Иначе
		НастройкиЗаявокНаОтпуск.КоличествоДнейДоНачалаОтпуска = НастройкиЗаявокНаОтпускПрежнееЗначение.КоличествоДнейДоНачалаОтпуска;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьЭУОтложенноеПодключение(ОшибкаСоздания)

	Элементы.СоздатьНовоеПодключение.Видимость = ОшибкаСоздания И ПолноправныйПользователь;
	Элементы.ГруппаПроверитьПодключение.Видимость = Не ОшибкаСоздания И ПолноправныйПользователь;
	Если ОшибкаСоздания Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ДекорацияОтложенноеПодключение",
			"Заголовок",
			НСтр("ru = 'При подключении к сервису возникли ошибки. Подробности в журнале регистрации.
				|Обратитесь в отдел технической поддержки сервиса по адресу support@1c-cabinet.ru'"));
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭУПодключенияКСервису(Выключить)

	Элементы.Ответственный.ТолькоПросмотр 	= Выключить;
	Элементы.ИмяДомена.ТолькоПросмотр 		= Выключить;
	Элементы.ИмяПриложения.ТолькоПросмотр 	= Выключить;
	Элементы.Подключить.Доступность 		= Не Выключить;
	Элементы.НастройкиПубликации.Доступность = Не Выключить;
	Элементы.ИзменитьПубликуемуюСтруктураКомпанииПриПодключении.Доступность = Не Выключить;
	Элементы.ИзменитьВидыКонтактнойИнформацииПриПодключении.Доступность = Не Выключить;

КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьЭУИспользуемойФункциональностиПоВерсииПриложения()

	ДоступнаяФункциональностьСервиса = КабинетСотрудника.ДоступнаяФункциональностьСервисаПоВерсииПриложения();
	Настройки = КабинетСотрудника.НастройкиПрограммы();
	ИспользоватьФормат301 	= КабинетСотрудника.ИспользоватьФормат301();
	ИспользоватьФормат303 	= КабинетСотрудника.ИспользоватьФормат303();
	ИспользоватьФормат401 	= КабинетСотрудника.ИспользоватьФормат401();
	ИспользоватьФормат30396 = КабинетСотрудника.ИспользоватьФормат30396();
	ИспользоватьФормат503 	= КабинетСотрудника.ИспользоватьФормат503();
	ИспользоватьФормат50366 = КабинетСотрудника.ИспользоватьФормат50366();
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаЗаявленияНаОтпуск", "Видимость",
			ИспользоватьФормат303 И ДоступнаяФункциональностьСервиса.Отпуск);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ДекорацияНастройкиФункциональностиОтступ", "Видимость",
			ИспользоватьФормат303 И ДоступнаяФункциональностьСервиса.Отпуск);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаНастройкиОтпускаРасширенные", "Видимость",
			ИспользоватьФормат303 И ДоступнаяФункциональностьСервиса.ГрафикОтпусков);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаКадровыйЭДО", "Видимость",
			ИспользоватьФормат303);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаУдержаниеДСВ", "Видимость",
			ИспользоватьФормат303 И Настройки.ИспользоватьДСВ);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаДнейПубликацииУволенных", "Видимость",
			ИспользоватьФормат30396);
	
	// Показываем настройку при условии,
	// версия сервиса 4.0.1.31 и выше и структура предприятия не соответствует структуре юридических лиц,
	// или настройка ПубликоватьСтруктуруЮридическихЛиц = Истина, что бы ее можно было выключить.
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаПубликуемаяСтруктура", "Видимость",
			ПубликоватьСтруктуруЮридическихЛиц Или (ИспользоватьФормат401 И Не СтруктураПредприятияСоответствуетСтруктуреЮридическихЛиц));
			
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаНастройкаРазделовСервиса", "Видимость",
			ИспользоватьФормат503);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"СкрытьРазделДокументы", "Видимость",
			ИспользоватьФормат503 И Не ИспользуетсяКадровыйЭДО);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"КомпенсацияОтпускаНедоступна", "Видимость",
			ИспользоватьФормат503 И Не БазоваяФункциональность);
			
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ПолучениеДокументаСЭПНедоступно", "Видимость",
			ИспользоватьФормат503
			И Не ИспользуетсяКадровыйЭДО
			И ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаСогласиеНаПрисоединениеККЭДО",
			"Видимость",
			ИспользоватьФормат50366);
			
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаСогласиеНаПрисоединениеККЭДО",
			"Доступность",
			ИспользуетсяКадровыйЭДО);
			
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаДоступностьКИ",
			"Видимость",
			Ложь);
			
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНастройкиПодключенияЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ВыполнитьНачальноеЗаполнение();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти