#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	ЗаполнитьПараметрыФормыПриСоздании();
	
	//
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект,
		"НастройкиНоменклатурыХарактеристика",
		"НастройкиНоменклатуры.Номенклатура");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект,
		"НастройкиНоменклатурыХарактеристикаЧастичногоВыбытия",
		"НастройкиНоменклатуры.НоменклатураЧастичногоВыбытия");
	СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(
		ЭтотОбъект,
		ВидПродукции,
		"НастройкиНоменклатурыНоменклатураЧастичногоВыбытия");
	
	//
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект,
		"ХарактеристикаЧастичногоВыбытия",
		"НоменклатураЧастичногоВыбытия");
	СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(
		ЭтотОбъект, ВидПродукции, "НоменклатураЧастичногоВыбытия");
		
	НастроитьЭлементыФормыНаСервере();
	СброситьРазмерыИПоложениеОкна();
	
	СобытияФормИСМППереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	СобытияФормИС.ПрименитьУсловноеОформлениеКПолю(ЭтотОбъект, "ХарактеристикаЧастичногоВыбытия");
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ВариантЧастичногоВыбытия = Перечисления.ВариантыУчетаЧастичногоВыбытияИСМП.НастроеннаяНоменклатура Тогда
		
		Если ХарактеристикиИспользуются Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("НоменклатураЧастичногоВыбытия");
			МассивНепроверяемыхРеквизитов.Добавить("ХарактеристикаЧастичногоВыбытия");
			
		Иначе
			
			МассивНепроверяемыхРеквизитов.Добавить("НастройкиНоменклатуры");
			МассивНепроверяемыхРеквизитов.Добавить("НастройкиНоменклатуры.НоменклатураЧастичногоВыбытия");
			МассивНепроверяемыхРеквизитов.Добавить("НастройкиНоменклатуры.ХарактеристикаЧастичногоВыбытия");
			
			Если Не ХарактеристикиИспользуютсяЧастичногоВыбытия Тогда
				МассивНепроверяемыхРеквизитов.Добавить("ХарактеристикаЧастичногоВыбытия");
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		МассивНепроверяемыхРеквизитов.Добавить("НоменклатураЧастичногоВыбытия");
		МассивНепроверяемыхРеквизитов.Добавить("ХарактеристикаЧастичногоВыбытия");
		МассивНепроверяемыхРеквизитов.Добавить("НастройкиНоменклатуры");
		МассивНепроверяемыхРеквизитов.Добавить("НастройкиНоменклатуры.НоменклатураЧастичногоВыбытия");
		МассивНепроверяемыхРеквизитов.Добавить("НастройкиНоменклатуры.ХарактеристикаЧастичногоВыбытия");
		МассивНепроверяемыхРеквизитов.Добавить("НастройкиНоменклатуры.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("НастройкиНоменклатуры.Характеристика");
		
	КонецЕсли;
	
	Если ПолеКоличествоЧастичноеВыбытие <= 1
		И ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.ЧастьПотребительскойУпаковки Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Поле ""%1"" должно быть больше 1'"),
				Тексты.ПолеКоличествоЧастичноеВыбытиеЗаголовок),,,
			"ПолеКоличествоЧастичноеВыбытие",
			Отказ);
	КонецЕсли;
	
	Если ПолеКоличествоКороб <= 1
		И ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.ГрупповаяЛогистическаяУпаковка Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Поле ""%1"" должно быть больше 1'"),
				Тексты.ПолеКоличествоКоробЗаголовок),,,
			"ПолеКоличествоКороб",
			Отказ);
	КонецЕсли;
	
	Если ПолеКоличествоФиксированныйВес <= 0
		И ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.МернаяПродукцияСФиксированнымЗначением Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Поле должно быть заполнено'"),,,
				"ПолеКоличествоФиксированныйВес",
				Отказ);
	КонецЕсли;
	
	Если ПолеКоличествоУпаковка <= 1
		И ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.ПотребительскаяУпаковка
		И ЗначениеЗаполнено(ВариантЧастичногоВыбытия) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Поле ""%1"" должно быть больше 1'"),
				Тексты.ПолеКоличествоУпаковкаЗаголовок),,,
			"ПолеКоличествоУпаковка",
			Отказ);
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("ПолеКоличествоЧастичноеВыбытие");
	МассивНепроверяемыхРеквизитов.Добавить("ПолеКоличествоКороб");
	МассивНепроверяемыхРеквизитов.Добавить("ПолеКоличествоУпаковка");
	МассивНепроверяемыхРеквизитов.Добавить("ПолеКоличествоФиксированныйВес");
	
	Если ВариантИспользованияЕдиницыХранения <> Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.ЗаданУпаковками Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПотребительскаяУпаковка");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	СобытияФормИСПереопределяемый.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
	Если ВариантЧастичногоВыбытия = Перечисления.ВариантыУчетаЧастичногоВыбытияИСМП.НастроеннаяНоменклатура Тогда
	
		Для Каждого СтрокаТаблицы Из НастройкиНоменклатуры Цикл
			
			Если СтрокаТаблицы.ХарактеристикиИспользуются
				И Не ЗначениеЗаполнено(СтрокаТаблицы.Характеристика) Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'В строке %1 не заполнено поле Характеристика'"),
							СтрокаТаблицы.НомерСтроки),,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
						"НастройкиНоменклатуры",
						НастройкиНоменклатуры.Индекс(СтрокаТаблицы) + 1,
						"Характеристика"),,
					Отказ);
				
			КонецЕсли;
			
			Если ХарактеристикиИспользуются Тогда
				
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.НоменклатураЧастичногоВыбытия) Тогда
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = 'В строке %1 не заполнено поле Номенклатура'"),
								СтрокаТаблицы.НомерСтроки),,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
							"НастройкиНоменклатуры",
							НастройкиНоменклатуры.Индекс(СтрокаТаблицы) + 1,
							"НоменклатураЧастичногоВыбытия"),,
						Отказ);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
					И СтрокаТаблицы.Номенклатура = СтрокаТаблицы.НоменклатураЧастичногоВыбытия Тогда
					ОбщегоНазначения.СообщитьПользователю(
						НСтр("ru = 'Номенклатура для продажи должна отличаться от основной номенклатуры'"),,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
							"НастройкиНоменклатуры",
							НастройкиНоменклатуры.Индекс(СтрокаТаблицы) + 1,
							"НоменклатураЧастичногоВыбытия"),,
						Отказ);
				КонецЕсли;
				
				Если СтрокаТаблицы.ХарактеристикиИспользуютсяЧастичноеВыбытие
					И Не ЗначениеЗаполнено(СтрокаТаблицы.ХарактеристикаЧастичногоВыбытия) Тогда
					
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = 'В строке %1 не заполнено поле Характеристика'"),
								СтрокаТаблицы.НомерСтроки),,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
							"НастройкиНоменклатуры",
							НастройкиНоменклатуры.Индекс(СтрокаТаблицы) + 1,
							"ХарактеристикаЧастичногоВыбытия"),,
						Отказ);
					
				КонецЕсли;
			
			Иначе
				
				Если СтрокаТаблицы.Номенклатура = СтрокаТаблицы.НоменклатураЧастичногоВыбытия Тогда
					ОбщегоНазначения.СообщитьПользователю(
						НСтр("ru = 'Номенклатура для продажи должна отличаться от основной номенклатуры'"),,
						"НоменклатураЧастичногоВыбытия",,
						Отказ);
				КонецЕсли;
				
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
			
			ПоискСтрок = НастройкиНоменклатуры.НайтиСтроки(СтруктураПоиска);
			
			Если ПоискСтрок.Количество() > 1 Тогда
				
				Для Каждого НайденнаяСтрока Из ПоискСтрок Цикл
					
					Если НайденнаяСтрока.НомерСтроки = СтрокаТаблицы.НомерСтроки Тогда
						Продолжить;
					КонецЕсли;
					
					ПредставлениеНоменклатуры = ИнтеграцияИС.ПредставлениеНоменклатуры(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика);
					
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = 'В строке %1 дублируется номенклатура %2'"),
								НайденнаяСтрока.НомерСтроки,
								ПредставлениеНоменклатуры),,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
							"НастройкиНоменклатуры",
							НастройкиНоменклатуры.Индекс(СтрокаТаблицы) + 1,
							"Характеристика"),,
						Отказ);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы
		Или Не Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность
		И Не ЭтоЗакрытие Тогда
		Отказ = Истина;
		ВопросПередЗакрытиемЗавершение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(
			ВопросПередЗакрытиемЗавершение,
			НСтр("ru = 'Данные были изменены. Сохранить изменения?'"),
			РежимДиалогаВопрос.ДаНет,,
			КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВариантЧастичногоВыбытияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	НастроитьЭлементыФормыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантЧастичногоВыбытияНастроеннаяНоменклатураПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ВариантЧастичногоВыбытияНастроеннаяНоменклатураПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантЧастичногоВыбытияТекущаяНоменклатураПриИзменении(Элемент)
	
	Модифицированность = Истина;
	НастроитьЭлементыФормыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаВариантУчетаЧастичногоВыбытияНастроеннаяНоменклатураРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "НастройкаСпискаНоменклатурыЧастичногоВыбытия" Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураЧастичногоВыбытияПриИзменении(Элемент)
	НоменклатураЧастичногоВыбытияПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаЧастичногоВыбытияПриИзменении(Элемент)
	НоменклатураЧастичногоВыбытияПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ВариантЕдиницыИзмеренияПриИзменении(Элемент)
	ВариантЕдиницыИзмеренияУпаковкаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПолеКоличествоЧастичноеВыбытиеПриИзменении(Элемент)
	КоличествоПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ПолеКоличествоКоробПриИзменении(Элемент)
	КоличествоПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ПолеКоличествоФиксированныйВесПриИзменении(Элемент)
	КоличествоПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ПолеКоличествоУпаковкаПриИзменении(Элемент)
	КоличествоПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ПотребительскаяУпаковкаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПотребительскаяУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(НаборУпаковок) Тогда
		ВладелецУпаковок = НаборУпаковок;
	Иначе
		ВладелецУпаковок = Номенклатура;
	КонецЕсли;
	
	ВыборПотребительскойУпаковкиЗавершение = Новый ОписаниеОповещения("ВыборПотребительскойУпаковкиЗавершение", ЭтотОбъект);
	
	СобытияФормИСКлиентПереопределяемый.ПриНачалеВыбораУпаковки(
		ЭтотОбъект, ВладелецУпаковок, СтандартнаяОбработка, ВыборПотребительскойУпаковкиЗавершение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиНоменклатуры

&НаКлиенте
Процедура НастройкиНоменклатурыНоменклатураЧастичногоВыбытияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормИСКлиентПереопределяемый.ПриНачалеВыбораНоменклатуры(Элемент, ВидПродукции, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиНоменклатурыХарактеристикаЧастичногоВыбытияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = НастройкиНоменклатуры.НайтиПоИдентификатору(Элементы.НастройкиНоменклатуры.ТекущаяСтрока);
	СобытияФормИСМПКлиентПереопределяемый.ПриНачалеВыбораХарактеристики(
		Элемент, ТекущиеДанные, СтандартнаяОбработка, "НоменклатураЧастичногоВыбытия");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиНоменклатурыНоменклатураЧастичногоВыбытияПриИзменении(Элемент)
	
	НоменклатураЧастичногоВыбытияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиНоменклатурыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НастройкиНоменклатуры.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриНачалеВыбораХарактеристики(
		Элемент, ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиНоменклатурыПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Для Каждого СтрокаТаблицы Из НастройкиНоменклатуры Цикл
		ЗаполнитьНомерСтроки(СтрокаТаблицы, НастройкиНоменклатуры);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	Отказ = Истина;
	
	Модифицированность = Истина;
	
	НоваяСтрока = НастройкиНоменклатуры.Добавить();
	Если Копирование Тогда
		ТекущиеДанные = НастройкиНоменклатуры.НайтиПоИдентификатору(Элементы.НастройкиНоменклатуры.ТекущаяСтрока);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные,, "Характеристика");
	Иначе
		НоваяСтрока.Номенклатура = Номенклатура;
	КонецЕсли;
	СобытияФормИСМПКлиент.ОпределитьИспользованиеХарактеристик(
		ЭтотОбъект,
		НоваяСтрока,
		"Номенклатура", "ХарактеристикиИспользуются");
		
	ЗаполнитьНомерСтроки(НоваяСтрока, НастройкиНоменклатуры);
	Элементы.НастройкиНоменклатуры.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Элементы.НастройкиНоменклатуры.ИзменитьСтроку();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ОчиститьСообщения();
	ЗакрытиеФормы(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьБезСохранения(Команда)
	ЗакрытиеФормы(Ложь);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗакрытиеФормы(CохранитьИзменения)
	
	РезультатЗакрытия = Неопределено;
	ЭтоЗакрытие       = Ложь;
	
	Если CохранитьИзменения Тогда
		
		ОчиститьСообщения();
		
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		
		Если СохранитьНастройкиНоменклатуры() Тогда
			РезультатЗакрытия = РезультатЗакрытия();
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ЭтоЗакрытие = Истина;
	Закрыть(РезультатЗакрытия);
	
КонецПроцедуры

&НаСервере
Процедура ВариантЕдиницыИзмеренияУпаковкаПриИзмененииНаСервере()
	
	НастроитьЭлементыФормыНаСервере = Истина;
	Если ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.ГрупповаяЛогистическаяУпаковка Тогда
		ВариантЧастичногоВыбытия = Неопределено;
	ИначеЕсли ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.МернаяПродукцияТребуетУказанияЗначения Тогда
		ВариантЧастичногоВыбытия = Неопределено;
	ИначеЕсли ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.МернаяПродукцияСФиксированнымЗначением Тогда
		ВариантЧастичногоВыбытия = Неопределено;
	ИначеЕсли ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.ЧастьПотребительскойУпаковки Тогда
		Если ПоддерживаетсяЧастичноеВыбытие Тогда
			ВариантЧастичногоВыбытия = Перечисления.ВариантыУчетаЧастичногоВыбытияИСМП.ТекущаяНоменклатура;
			ВариантЧастичногоВыбытияНастроеннаяНоменклатураПриИзмененииСервер();
			НастроитьЭлементыФормыНаСервере = Ложь;
		КонецЕсли;
	ИначеЕсли ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.ПотребительскаяУпаковка Тогда
		Если ПоддерживаетсяЧастичноеВыбытие
			И ВариантЧастичногоВыбытия = Перечисления.ВариантыУчетаЧастичногоВыбытияИСМП.ТекущаяНоменклатура Тогда
			ВариантЧастичногоВыбытия = Перечисления.ВариантыУчетаЧастичногоВыбытияИСМП.НастроеннаяНоменклатура;
			ВариантЧастичногоВыбытияНастроеннаяНоменклатураПриИзмененииСервер();
			НастроитьЭлементыФормыНаСервере = Ложь;
		КонецЕсли;
	ИначеЕсли ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.ЗаданУпаковками Тогда
		Если ПоддерживаетсяЧастичноеВыбытие
			И ВариантЧастичногоВыбытия = Перечисления.ВариантыУчетаЧастичногоВыбытияИСМП.НастроеннаяНоменклатура Тогда
			ВариантЧастичногоВыбытия = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	Если НастроитьЭлементыФормыНаСервере Тогда
		НастроитьЭлементыФормыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КоличествоПриИзменении()
	
	Модифицированность = Истина;
	НастроитьЭлементыФормыНаСервере();
	
КонецПроцедуры

&НаСервере
Функция РезультатЗакрытия()
	
	РезультатЗакрытия = Новый Структура();
	РезультатЗакрытия.Вставить("ВариантИспользованияЕдиницыХранения", ВариантИспользованияЕдиницыХранения);
	РезультатЗакрытия.Вставить("ЧастичноеВыбытиеВариантУчета",        ВариантЧастичногоВыбытия);
	РезультатЗакрытия.Вставить("ТаблицаНоменклатуры",                 Новый Массив());
	Если ВариантЧастичногоВыбытия = ПредопределенноеЗначение("Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.НастроеннаяНоменклатура") Тогда
		РезультатЗакрытия.ТаблицаНоменклатуры = ОбщегоНазначения.ТаблицаЗначенийВМассив(НастройкиНоменклатуры.Выгрузить());
	КонецЕсли;
	
	Возврат РезультатЗакрытия;
	
КонецФункции

&НаСервере
Процедура ВариантЧастичногоВыбытияНастроеннаяНоменклатураПриИзмененииСервер()
	
	СоздатьСтрокуНастройкиПриНеобходимости();
	ПеренестиСтрокуНастройкиВДанныеФормы(ЭтотОбъект);
	НастроитьЭлементыФормыНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура НоменклатураЧастичногоВыбытияПриИзмененииСервер()
	
	ПеренестиДанныеФормыВСтроку(ЭтотОбъект);
	ЗаполнитьДанныеНоменклатурыЧастичногоВыбытия();
	ПеренестиСтрокуНастройкиВДанныеФормы(ЭтотОбъект);
	
	СобытияФормИС.ПрименитьУсловноеОформлениеКПолю(ЭтотОбъект, "ХарактеристикаЧастичногоВыбытия");
	
КонецПроцедуры

&НаСервере
Функция СохранитьНастройкиНоменклатуры()
	
	НаборНастройкиЧастичногоВыбытияТоваровИСМП = РегистрыСведений.НастройкиЧастичногоВыбытияТоваровИСМП.СоздатьНаборЗаписей();
	НаборНастройкиЧастичногоВыбытияТоваровИСМП.Отбор.Номенклатура.Установить(Номенклатура);
	
	Если ВариантЧастичногоВыбытия = Перечисления.ВариантыУчетаЧастичногоВыбытияИСМП.НастроеннаяНоменклатура Тогда
		
		НаборНастройкиЧастичногоВыбытияТоваровИСМП.Загрузить(НастройкиНоменклатуры.Выгрузить());
		Для Каждого СтрокаТаблицы Из НаборНастройкиЧастичногоВыбытияТоваровИСМП Цикл
			СтрокаТаблицы.Номенклатура = Номенклатура;
		КонецЦикла;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		НаборНастройкиЧастичногоВыбытияТоваровИСМП.Записать();
		
		ДанныеОписания = РегистрыСведений.ОписаниеНоменклатурыИС.ИнициализироватьДанныеОписанияНоменклатуры();
		ДанныеОписания.Номенклатура                        = Номенклатура;
		ДанныеОписания.ВариантИспользованияЕдиницыХранения = ВариантИспользованияЕдиницыХранения;
		ДанныеОписания.ВариантЧастичногоВыбытия            = ВариантЧастичногоВыбытия;
		
		Если ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.ГрупповаяЛогистическаяУпаковка Тогда
			Если ПолеКоличествоКороб = 0 Тогда
				ВызватьИсключение НСтр("ru = 'Внутренняя ошибка. Не предусмотрено сохранение нулевого количества в потребительской упаковке.'");
			Иначе
				ДанныеОписания.КоличествоВПотребительскойУпаковке = 1 / ПолеКоличествоКороб;
			КонецЕсли;
		ИначеЕсли ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.МернаяПродукцияТребуетУказанияЗначения Тогда
			ДанныеОписания.КоличествоВПотребительскойУпаковке = 0;
			ДанныеОписания.ЕмкостьПотребительскойУпаковки     = 0;
		ИначеЕсли ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.МернаяПродукцияСФиксированнымЗначением Тогда
			ДанныеОписания.КоличествоВПотребительскойУпаковке = ПолеКоличествоФиксированныйВес;
			ДанныеОписания.ЕмкостьПотребительскойУпаковки     = 0;
		ИначеЕсли ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.ПотребительскаяУпаковка Тогда
			ДанныеОписания.КоличествоВПотребительскойУпаковке = 1;
			ДанныеОписания.ЕмкостьПотребительскойУпаковки     = ПолеКоличествоУпаковка;
		ИначеЕсли ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.ЧастьПотребительскойУпаковки Тогда
			ДанныеОписания.КоличествоВПотребительскойУпаковке = ПолеКоличествоЧастичноеВыбытие;
			ДанныеОписания.ЕмкостьПотребительскойУпаковки     = ПолеКоличествоЧастичноеВыбытие;
		ИначеЕсли ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.ЗаданУпаковками Тогда
			ДанныеОписания.ПотребительскаяУпаковка = ПотребительскаяУпаковка;
			КоличествоВПотребительскойУпаковке = ИнтеграцияИСВызовСервера.КоэффициентУпаковки(ПотребительскаяУпаковка, Номенклатура);
			ДанныеОписания.КоличествоВПотребительскойУпаковке = КоличествоВПотребительскойУпаковке;
			Если ЗначениеЗаполнено(ВариантЧастичногоВыбытия) Тогда
				ДанныеОписания.УпаковкаЧастичногоВыбытия      = ЕдиницаХранения;
				ДанныеОписания.ЕмкостьПотребительскойУпаковки = КоличествоВПотребительскойУпаковке;
			КонецЕсли;
		КонецЕсли;
		
		РегистрыСведений.ОписаниеНоменклатурыИС.УстановитьОписание(ДанныеОписания);
		
		ЗафиксироватьТранзакцию();
		УстановитьПривилегированныйРежим(Ложь);
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось записать настройки номенклатуры ИС МП по причине: %1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ГосИС: Запись настройки номенклатуры'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.НастройкиЧастичногоВыбытияТоваровИСМП, Неопределено,
			ТекстСообщения);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура НастроитьЭлементыФормыНаСервере()
	
	Тексты = Новый Структура();
	Тексты.Вставить("НастроеннаяНоменклатураПодсказка");
	Тексты.Вставить("Подвал");
	Тексты.Вставить(
		"НеИспользуетсяЗаголовок" ,
		НСтр("ru = 'Не используется'"));
	Тексты.Вставить(
		"ТекущаяНоменклатураЗаголовок",
		);
	Тексты.Вставить("ТекущаяНоменклатураПодсказка");
	Тексты.Вставить("ЗаголовокГруппыУпаковка");
	Тексты.Вставить("ЗаголовокГруппыШтука");
	Тексты.Вставить("ЗаголовокГруппыВариантыЕдиницы");
	Тексты.Вставить("ЗаголовокГруппыЧастичноеВыбытие");
	
	Тексты.Вставить("ВариантЕдиницыПотребительская",          НСтр("ru = 'Соответствует единице хранения%1'"));
	Тексты.Вставить("ВариантЕдиницыПотребительскаяПодсказка", Неопределено);
	Тексты.Вставить("ВариантЕдиницыКоробБлок",                НСтр("ru = 'Входит в состав короба%1 в количестве:'"));
	Тексты.Вставить("ВариантЕдиницыКоробБлокПодсказка");
	Тексты.Вставить("ВариантЕдиницыЧастьУпаковки");
	Тексты.Вставить("ВариантЕдиницыЧастьУпаковкиПодсказка");
	
	Тексты.Вставить("ПолеКоличествоЧастичноеВыбытиеЗаголовок");
	Тексты.Вставить("ПолеКоличествоКоробЗаголовок");
	Тексты.Вставить("ПолеКоличествоФиксированныйВесЗаголовок");
	Тексты.Вставить("ПолеКоличествоУпаковкаЗаголовок");
	Тексты.Вставить("ПолеКоличествоЧастичноеВыбытиеПодсказка");
	Тексты.Вставить("ПолеКоличествоКоробПодсказка");
	Тексты.Вставить("ПолеКоличествоФиксированныйВесПодсказка");
	Тексты.Вставить("ПолеКоличествоУпаковкаПодсказка");
	Тексты.Вставить(
		"ГруппаБазоваяЕдиницаИмеетФиксированныйВесПодсказка",
		НСтр("ru = 'Продукция, фасованная в заводских условиях, например:
			       |Бутылка молока объемом 950 мл., сыр фасованный по 200 грамм.'"));
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Духи Тогда
		
		Тексты.ТекущаяНоменклатураПодсказка = НСтр("ru = 'Духи (туалетная вода) могут продаваться маркированными флаконами или на разлив. Единица хранения остатков %1соответствует одному миллилитру духов (туалетной воды).'");
		Тексты.Подвал                       = НСтр("ru = 'При продаже флакона на ККТ тэг <1291> не заполняется, код маркирови выбывает из оборота.'");
		
		ДанныеПодсказкиНастроеннаяНоменклатура = Новый Массив();
		ДанныеПодсказкиНастроеннаяНоменклатура.Добавить(
			НСтр("ru = 'Для учета духов (туалетной воды), продаваемых на разлив используется отдельная номенклатура'"));
		ДанныеПодсказкиНастроеннаяНоменклатура.Добавить(" ");
		ДанныеПодсказкиНастроеннаяНоменклатура.Добавить(
			НСтр("ru = 'с единицей хранения остатков соответствующей одному миллилитру.'"));
		ДанныеПодсказкиНастроеннаяНоменклатура.Добавить(Символы.ПС);
		
		Если ВариантЧастичногоВыбытия = ПредопределенноеЗначение("Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.НастроеннаяНоменклатура")
			Или ВариантЧастичногоВыбытия = ПредопределенноеЗначение("Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.ТекущаяНоменклатура") Тогда
			
			ДанныеПодвала = Новый Массив();
			ДанныеПодвала.Добавить(НСтр("ru = 'При продаже духов (туалетной воды) на разлив на ККТ заполняется Тэг <1291>, который в печатной форме чека отображается как: <объем тары>/'"));
			ДанныеПодвала.Добавить(НСтр("ru = '<емкость флакона>.'"));
			ДанныеПодвала.Добавить(Символы.ПС);
			ДанныеПодвала.Добавить(НСтр("ru = 'Код маркировки флакона выбывает из оборота при продаже последнего миллилитра.'"));
			
			Тексты.Подвал = Новый ФорматированнаяСтрока(ДанныеПодвала);
			
		КонецЕсли;
		
		Если ПредставленияДокументовСборкаРазборка.Количество() = 0 Тогда
			ДанныеПодсказкиНастроеннаяНоменклатура.Добавить(
				НСтр("ru = 'Для пересчета флаконов в миллилитры необходимо выполнять отдельную операцию.'"));
		ИначеЕсли ПредставленияДокументовСборкаРазборка.Количество() = 1 Тогда
			ДанныеПодсказкиНастроеннаяНоменклатура.Добавить(
				СтрШаблон(
					НСтр("ru = 'При передаче в торговый зал используется документ ""%1"" для пересчета флаконов в миллилитры.'"),
					СтрСоединить(ПредставленияДокументовСборкаРазборка)));
		Иначе
			ДанныеПодсказкиНастроеннаяНоменклатура.Добавить(
				СтрШаблон(
					НСтр("ru = 'При передаче в торговый зал используются документы ""%1"" для пересчета флаконов в миллилитры.'"),
					СтрСоединить(ПредставленияДокументовСборкаРазборка, ", ")));
		КонецЕсли;
		
		Тексты.НастроеннаяНоменклатураПодсказка = Новый ФорматированнаяСтрока(ДанныеПодсказкиНастроеннаяНоменклатура);
		
		ТекстУпаковкиВПодсказке = СтрШаблон("""%1"" ", Упаковка);
		Тексты.ТекущаяНоменклатураПодсказка = СтрШаблон(Тексты.ТекущаяНоменклатураПодсказка, ТекстУпаковкиВПодсказке);
	
		Тексты.ЗаголовокГруппыЧастичноеВыбытие = НСтр("ru = 'Продажа духов (туалетной воды) на разлив'");
		
		Тексты.ЗаголовокГруппыУпаковка = НСтр("ru = 'Из флакона'");
		Тексты.ЗаголовокГруппыШтука    = НСтр("ru = 'В разливную тару'");
		
		Тексты.ПолеКоличествоЧастичноеВыбытиеЗаголовок = НСтр("ru = 'Во флаконе'");
		Тексты.ПолеКоличествоЧастичноеВыбытиеПодсказка = НСтр("ru = 'мл.'");
		Тексты.ПолеКоличествоКоробЗаголовок            = НСтр("ru = 'Флаконов'");
		Тексты.ПолеКоличествоКоробПодсказка            = НСтр("ru = 'шт.'");
		Тексты.ПолеКоличествоУпаковкаЗаголовок         = НСтр("ru = 'Емкость флакона'");
		Тексты.ПолеКоличествоУпаковкаПодсказка         = НСтр("ru = 'мл.'");
		
		Тексты.ВариантЕдиницыПотребительскаяПодсказка  = НСтр("ru = 'Рекомендуемый вариант ведения учета для оптовых продаж, если минимальной единицей закупки является флакон.
		                                                            |Розничная продажа духов (туалетной воды) на разлив оформляется отдельной номенклатурой после разупаковки и передачи в торговый зал.'");
		Тексты.ВариантЕдиницыКоробБлокПодсказка        = НСтр("ru = 'Может использоваться для оптовых закупок и продаж, если минимальной единицей закупки и продажи является коробка.
		                                                            |Розничная продажа духов (туалетной воды) на разлив не поддерживается.'");
		Тексты.ВариантЕдиницыЧастьУпаковки             = НСтр("ru = 'Миллилитр.'");
		Тексты.ВариантЕдиницыЧастьУпаковкиПодсказка    = НСтр("ru = 'Рекомендуемый вариант ведения учета для розничных продаж духов (туалетной воды) на разлив.'");
		
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда 
		
		Тексты.ТекущаяНоменклатураПодсказка = НСтр("ru = 'Сигары могут продаваться пачками или поштучно. Единица хранения остатков %1соответствует одной сигаре.'");
		Тексты.Подвал                       = НСтр("ru = 'При продаже пачки на ККТ тэг <1291> не заполняется, пачка выбывает из оборота.'");
		
		ДанныеПодсказкиНастроеннаяНоменклатура = Новый Массив();
		ДанныеПодсказкиНастроеннаяНоменклатура.Добавить(
			НСтр("ru = 'Для поштучного учета сигар (сигарилл, ...) используется отдельная номенклатура'"));
		ДанныеПодсказкиНастроеннаяНоменклатура.Добавить(" ");
		ДанныеПодсказкиНастроеннаяНоменклатура.Добавить(
			НСтр("ru = 'с единицей хранения остатков соответствующей одной сигаре (сигарилле, ...).'"));
		ДанныеПодсказкиНастроеннаяНоменклатура.Добавить(Символы.ПС);
		
		Если ВариантЧастичногоВыбытия = Перечисления.ВариантыУчетаЧастичногоВыбытияИСМП.НастроеннаяНоменклатура
				Или ВариантЧастичногоВыбытия = Перечисления.ВариантыУчетаЧастичногоВыбытияИСМП.ТекущаяНоменклатура Тогда
			
			ДанныеПодвала = Новый Массив();
			ДанныеПодвала.Добавить(НСтр("ru = 'При поштучной продаже сигар (сигарилл, ...) на ККТ в чеке заполняется Тэг <1291>, который в печатной форме чека отображается как: <количество штук>/'"));
			ДанныеПодвала.Добавить(НСтр("ru = '<емкость пачки>.'"));
			ДанныеПодвала.Добавить(Символы.ПС);
			ДанныеПодвала.Добавить(НСтр("ru = 'Пачка выбывает из оборота при продаже последней сигары (сигариллы, ...) из пачки.'"));
			
			Тексты.Подвал = Новый ФорматированнаяСтрока(ДанныеПодвала);
			
		КонецЕсли;
		
		Если ПредставленияДокументовСборкаРазборка.Количество() = 0 Тогда
			ДанныеПодсказкиНастроеннаяНоменклатура.Добавить(НСтр("ru = 'Для пересчета пачек в сигары (сигариллы, ...) необходимо выполнять отдельную операцию.'"));
		ИначеЕсли ПредставленияДокументовСборкаРазборка.Количество() = 1 Тогда
			ДанныеПодсказкиНастроеннаяНоменклатура.Добавить(
				СтрШаблон(
					НСтр("ru = 'При передаче в торговый зал используется документ ""%1"" для пересчета пачек в сигары (сигариллы, ...).'"),
					СтрСоединить(ПредставленияДокументовСборкаРазборка)));
		Иначе
			ДанныеПодсказкиНастроеннаяНоменклатура.Добавить(
				СтрШаблон(
					НСтр("ru = 'При передаче в торговый зал используются документы ""%1"" для пересчета пачек в сигары (сигариллы, ...).'"),
					СтрСоединить(ПредставленияДокументовСборкаРазборка, ", ")));
		КонецЕсли;
		
		Тексты.НастроеннаяНоменклатураПодсказка = Новый ФорматированнаяСтрока(ДанныеПодсказкиНастроеннаяНоменклатура);
		
		ТекстУпаковкиВПодсказке = СтрШаблон("""%1"" ", Упаковка);
		Тексты.ТекущаяНоменклатураПодсказка = СтрШаблон(Тексты.ТекущаяНоменклатураПодсказка, ТекстУпаковкиВПодсказке);
		
		Тексты.ЗаголовокГруппыЧастичноеВыбытие = НСтр("ru = 'Поштучная продажа сигар (сигарилл ...) из пачки'");
		
		Тексты.ЗаголовокГруппыУпаковка = НСтр("ru = 'Из упаковки'");
		Тексты.ЗаголовокГруппыШтука    = НСтр("ru = 'Сигара (сигарилла, ...)'");
		
		Тексты.ПолеКоличествоЧастичноеВыбытиеЗаголовок = НСтр("ru = 'В пачке'");
		Тексты.ПолеКоличествоЧастичноеВыбытиеПодсказка = НСтр("ru = 'шт.'");
		Тексты.ПолеКоличествоКоробЗаголовок            = НСтр("ru = 'Пачек'");
		Тексты.ПолеКоличествоКоробПодсказка            = НСтр("ru = 'шт.'");
		Тексты.ПолеКоличествоУпаковкаЗаголовок         = НСтр("ru = 'Емкость пачки'");
		Тексты.ПолеКоличествоУпаковкаПодсказка         = НСтр("ru = 'шт.'");
		
		Тексты.ВариантЕдиницыПотребительскаяПодсказка  = НСтр("ru = 'Рекомендуемый вариант ведения учета для оптовых продаж, если минимальной единицей закупки является пачка.
		                                                            |Поштучная продажа сигар (сигарилл ...) из пачки оформляется отдельной номенклатурой после разупаковки и передачи в торговый зал.'");
		Тексты.ВариантЕдиницыКоробБлок                 = НСтр("ru = 'Входит в состав короба%1 в количестве:'");
		Тексты.ВариантЕдиницыКоробБлокПодсказка        = НСтр("ru = 'Может использоваться для оптовых закупок и продаж, если минимальной единицей закупки и продажи является блок / коробка.
		                                                            |Поштучная продажа сигар (сигарилл ...) из пачки не используется.'");
		Тексты.ВариантЕдиницыЧастьУпаковки             = НСтр("ru = 'Сигара (сигарилла ...).'");
		Тексты.ВариантЕдиницыЧастьУпаковкиПодсказка    = НСтр("ru = 'Рекомендуемый вариант ведения учета для поштучной продажи в розницу сигар (сигарилл ...) из пачки.'");
	
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
		
		Тексты.ВариантЕдиницыПотребительскаяПодсказка = НСтр("ru = 'Рекомендуемый вариант ведения учета для оптовых продаж, если минимальной единицей закупки является пачка.'");
		Тексты.ВариантЕдиницыКоробБлок                = НСтр("ru = 'Входит в состав короба%1 в количестве:'");
		Тексты.ВариантЕдиницыКоробБлокПодсказка = НСтр("ru = 'Может использоваться для оптовых закупок и продаж, если минимальной единицей закупки и продажи является блок или коробка.'");
		
		Тексты.ПолеКоличествоКоробЗаголовок            = НСтр("ru = 'Пачек'");
		Тексты.ПолеКоличествоКоробПодсказка            = НСтр("ru = 'шт.'");
		
	ИначеЕсли ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ВидПродукции) Тогда
		
		
		Тексты.ВариантЕдиницыПотребительскаяПодсказка  = НСтр("ru = 'Рекомендуемый вариант ведения учета для оптовых продаж, если минимальной единицей закупки является потребительская упаковка.'");
		Тексты.ВариантЕдиницыКоробБлокПодсказка        = НСтр("ru = 'Может использоваться для оптовых закупок и продаж, если минимальной единицей закупки и продажи является коробка.'");
		Тексты.ПолеКоличествоКоробЗаголовок            = НСтр("ru = 'Потребительских упаковок'");
		Тексты.ПолеКоличествоКоробПодсказка            = НСтр("ru = 'шт.'");
		Тексты.ПолеКоличествоФиксированныйВесЗаголовок = "";
		Тексты.ПолеКоличествоФиксированныйВесПодсказка = СокрЛП(Упаковка);
		
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.БезалкогольноеПиво Тогда
		
		Тексты.ВариантЕдиницыПотребительскаяПодсказка  = НСтр("ru = 'Рекомендуемый вариант ведения учета для оптовых продаж, если минимальной единицей закупки является потребительская упаковка.
		                                                            |Розничная продажа пива на разлив оформляется отдельной номенклатурой после разупаковки и передачи в торговый зал.'");
		Тексты.ВариантЕдиницыКоробБлокПодсказка        = НСтр("ru = 'Может использоваться для оптовых закупок и продаж, если минимальной единицей закупки и продажи является коробка.
		                                                            |Розничная продажа пива на разлив не поддерживается.'");
		Тексты.ПолеКоличествоКоробЗаголовок            = НСтр("ru = 'Потребительских упаковок'");
		Тексты.ПолеКоличествоКоробПодсказка            = НСтр("ru = 'шт.'");
		Тексты.ПолеКоличествоФиксированныйВесЗаголовок = "";
		Тексты.ПолеКоличествоФиксированныйВесПодсказка = СокрЛП(Упаковка);
		
		Тексты.ГруппаБазоваяЕдиницаИмеетФиксированныйВесПодсказка = НСтр(
			"ru = 'Продукция, фасованная в заводских условиях, например: Кега пива объемом 25 л.'");
		
		Тексты.ТекущаяНоменклатураПодсказка = НСтр("ru = 'Пиво может продаваться потребительскими упаковками или на разлив. Единица хранения остатков %1соответствует одному литру пива.'");
		Тексты.Подвал                       = НСтр("ru = 'При продаже потребительской упаковки на ККТ тэг <1291> не заполняется, код маркирови выбывает из оборота.'");
		
		ДанныеПодсказкиНастроеннаяНоменклатура = Новый Массив();
		ДанныеПодсказкиНастроеннаяНоменклатура.Добавить(
			НСтр("ru = 'Для учета пива, продаваемого на разлив используется отдельная номенклатура'"));
		ДанныеПодсказкиНастроеннаяНоменклатура.Добавить(" ");
		ДанныеПодсказкиНастроеннаяНоменклатура.Добавить(
			НСтр("ru = 'с единицей хранения остатков соответствующей одному литру.'"));
		ДанныеПодсказкиНастроеннаяНоменклатура.Добавить(Символы.ПС);
		
		Если ВариантЧастичногоВыбытия = ПредопределенноеЗначение("Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.НастроеннаяНоменклатура")
			Или ВариантЧастичногоВыбытия = ПредопределенноеЗначение("Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.ТекущаяНоменклатура") Тогда
			
			ДанныеПодвала = Новый Массив();
			ДанныеПодвала.Добавить(НСтр("ru = 'При продаже пива на разлив на ККТ заполняется Тэг <1291>, который в печатной форме чека отображается как: <объем тары>/'"));
			ДанныеПодвала.Добавить(НСтр("ru = '<емкость кеги>.'"));
			ДанныеПодвала.Добавить(Символы.ПС);
			ДанныеПодвала.Добавить(НСтр("ru = 'Код маркировки кеги выбывает из оборота при продаже последнего литра.'"));
			
			Тексты.Подвал = Новый ФорматированнаяСтрока(ДанныеПодвала);
			
		КонецЕсли;
		
		Если ПредставленияДокументовСборкаРазборка.Количество() = 0 Тогда
			ДанныеПодсказкиНастроеннаяНоменклатура.Добавить(
				НСтр("ru = 'Для пересчета кеги в литры необходимо выполнять отдельную операцию.'"));
		ИначеЕсли ПредставленияДокументовСборкаРазборка.Количество() = 1 Тогда
			ДанныеПодсказкиНастроеннаяНоменклатура.Добавить(
				СтрШаблон(
					НСтр("ru = 'При передаче в торговый зал используется документ ""%1"" для пересчета кеги в литры.'"),
					СтрСоединить(ПредставленияДокументовСборкаРазборка)));
		Иначе
			ДанныеПодсказкиНастроеннаяНоменклатура.Добавить(
				СтрШаблон(
					НСтр("ru = 'При передаче в торговый зал используются документы ""%1"" для пересчета кеги в литры.'"),
					СтрСоединить(ПредставленияДокументовСборкаРазборка, ", ")));
		КонецЕсли;
		
		Тексты.НастроеннаяНоменклатураПодсказка = Новый ФорматированнаяСтрока(ДанныеПодсказкиНастроеннаяНоменклатура);
		
		ТекстУпаковкиВПодсказке = СтрШаблон("""%1"" ", Упаковка);
		Тексты.ТекущаяНоменклатураПодсказка = СтрШаблон(Тексты.ТекущаяНоменклатураПодсказка, ТекстУпаковкиВПодсказке);
	
		Тексты.ЗаголовокГруппыЧастичноеВыбытие = НСтр("ru = 'Продажа пива на разлив'");
		
		Тексты.ЗаголовокГруппыУпаковка = НСтр("ru = 'Из кеги'");
		Тексты.ЗаголовокГруппыШтука    = НСтр("ru = 'В разливную тару'");
		
		Тексты.ПолеКоличествоЧастичноеВыбытиеЗаголовок = НСтр("ru = 'В кеге'");
		Тексты.ПолеКоличествоЧастичноеВыбытиеПодсказка = НСтр("ru = 'л.'");
		Тексты.ПолеКоличествоУпаковкаЗаголовок         = НСтр("ru = 'Емкость кеги'");
		Тексты.ПолеКоличествоУпаковкаПодсказка         = НСтр("ru = 'л.'");
		
		Тексты.ВариантЕдиницыЧастьУпаковки             = НСтр("ru = 'Литр.'");
		Тексты.ВариантЕдиницыЧастьУпаковкиПодсказка    = НСтр("ru = 'Рекомендуемый вариант ведения учета для розничных продаж пива на разлив.'");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЕдиницаХранения) Тогда
		ТекстЕдиницыХраненя = СтрШаблон(" ""%1""", ЕдиницаХранения);
	Иначе
		ТекстЕдиницыХраненя = "";
	КонецЕсли;
	
	Тексты.ВариантЕдиницыПотребительская = СтрШаблон(Тексты.ВариантЕдиницыПотребительская, ТекстЕдиницыХраненя);
	Тексты.ВариантЕдиницыКоробБлок       = СтрШаблон(Тексты.ВариантЕдиницыКоробБлок,       ТекстЕдиницыХраненя);
	
	Тексты.ЗаголовокГруппыВариантыЕдиницы = НСтр("ru = 'Единица хранения:'");
	
	Если ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Упаковка") = "" Тогда
		Тексты.ВариантЕдиницыЧастьУпаковкиПодсказка = СтрШаблон(
			"%1%2%3",
			Тексты.ВариантЕдиницыЧастьУпаковкиПодсказка,
			Символы.ПС,
			НСтр("ru = 'Для оптовых закупок и продаж используется отдельная номенклатура.'"));
	Иначе
		Тексты.ВариантЕдиницыЧастьУпаковкиПодсказка = СтрШаблон(
			"%1%2%3",
			Тексты.ВариантЕдиницыЧастьУпаковкиПодсказка,
			Символы.ПС, 
			НСтр("ru = 'Для оптовых закупок и продаж используются упаковки номенклатуры.'"));
	КонецЕсли;
	ДоступноТребуетВзвешивания = (КарточкаТовараСодержитВесовойПризнак = Неопределено);
	
	Элементы.ГруппаВариантыУчетаЧастичногоВыбытия.Заголовок                                   = Тексты.ЗаголовокГруппыЧастичноеВыбытие;
	Элементы.ВариантУчетаЧастичногоВыбытияНеИспользуется.СписокВыбора[0].Представление        = Тексты.НеИспользуетсяЗаголовок;
	Элементы.ГруппаВариантУчетаЧастичногоВыбытияНеИспользуется.РасширеннаяПодсказка.Заголовок = Неопределено;
	Элементы.ВариантУчетаЧастичногоВыбытияТекущаяНоменклатура.СписокВыбора[0].Представление   = ИнтеграцияИСМПСлужебный.ПредставлениеНастройкиВариантаУчетаПоВидуПродукции(
		ВидПродукции,
		Перечисления.ВариантыУчетаЧастичногоВыбытияИСМП.ТекущаяНоменклатура);
	Элементы.ГруппаВариантУчетаЧастичногоВыбытияТекущаяНоменклатура.РасширеннаяПодсказка.Заголовок = Тексты.ТекущаяНоменклатураПодсказка;
	Элементы.ВариантУчетаЧастичногоВыбытияНастроеннаяНоменклатура.СписокВыбора[0].Представление    = ИнтеграцияИСМПСлужебный.ПредставлениеНастройкиВариантаУчетаПоВидуПродукции(
		ВидПродукции,
		Перечисления.ВариантыУчетаЧастичногоВыбытияИСМП.НастроеннаяНоменклатура) + ".";
	Элементы.ГруппаВариантУчетаЧастичногоВыбытияНастроеннаяНоменклатура.РасширеннаяПодсказка.Заголовок = Тексты.НастроеннаяНоменклатураПодсказка;
	Элементы.Подвал.Заголовок                                                                          = Тексты.Подвал;
	Элементы.НастройкиНоменклатурыГруппаУпаковка.Заголовок = Тексты.ЗаголовокГруппыУпаковка;
	Элементы.НастройкиНоменклатурыГруппаИспользуемаяНоменклатура.Заголовок = Тексты.ЗаголовокГруппыШтука;
	
	Элементы.ВариантЕдиницыИзмеренияУпаковка.СписокВыбора[0].Представление      = Тексты.ВариантЕдиницыПотребительская;
	Элементы.ВариантЕдиницыИзмеренияБлокКороб.СписокВыбора[0].Представление     = Тексты.ВариантЕдиницыКоробБлок;
	Элементы.ВариантЕдиницыИзмеренияЧастьУпаковки.СписокВыбора[0].Представление = Тексты.ВариантЕдиницыЧастьУпаковки;
	
	Элементы.ГруппаВариантЕдиницыУпаковка.РасширеннаяПодсказка.Заголовок                = Тексты.ВариантЕдиницыПотребительскаяПодсказка;
	Элементы.ГруппаВариантЕдиницыИзмереняЗаданУпаковками.РасширеннаяПодсказка.Заголовок = Неопределено;
	Элементы.ГруппВариантЕдиницыБлокКороб.РасширеннаяПодсказка.Заголовок                = Тексты.ВариантЕдиницыКоробБлокПодсказка;
	Элементы.ГруппаВариантЕдиницыИзмереняЧастьУпаковки.РасширеннаяПодсказка.Заголовок   = Тексты.ВариантЕдиницыЧастьУпаковкиПодсказка;
	
	Если (ДопустимоИспользованиеУпаковок И Не УпаковкиВключены) Тогда
		Элементы.ПотребительскаяУпаковка.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСправа;
		Элементы.ПотребительскаяУпаковка.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Для настройки необходимо использовать упаковки.'"),,
			ЦветаСтиля.ПоясняющийТекстГосИС);
	КонецЕсли;
	ЭтоНастроеннаяНоменклатура        = (ВариантЧастичногоВыбытия = Перечисления.ВариантыУчетаЧастичногоВыбытияИСМП.НастроеннаяНоменклатура);
	ЭтоЧастьПотребительскойУпаковки   = (ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.ЧастьПотребительскойУпаковки);
	ЭтоГрупповаяЛогистическаяУпаковка = (ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.ГрупповаяЛогистическаяУпаковка);
	ЭтоФасованнаяПродукция            = (ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.МернаяПродукцияСФиксированнымЗначением);
	ЭтоТребуетВзвешивания             = (ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.МернаяПродукцияТребуетУказанияЗначения);
	ДоступноПеременноеКоличество = ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ВидПродукции)
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.БезалкогольноеПиво;
	ЭтоТабак                          = (ВидПродукции = Перечисления.ВидыПродукцииИС.Табак);
	
	Элементы.НастройкиНоменклатуры.Видимость           = (ЭтоНастроеннаяНоменклатура И ХарактеристикиИспользуются И ПоддерживаетсяЧастичноеВыбытие);
	Элементы.НоменклатураЧастичногоВыбытия.Видимость   = (ЭтоНастроеннаяНоменклатура И Не ХарактеристикиИспользуются И ПоддерживаетсяЧастичноеВыбытие);
	Элементы.ХарактеристикаЧастичногоВыбытия.Видимость = (ЭтоНастроеннаяНоменклатура И Не ХарактеристикиИспользуются И ПоддерживаетсяЧастичноеВыбытие);

	Элементы.ГруппаСтраницаНесколько.Видимость         = (ЭтоНастроеннаяНоменклатура И ХарактеристикиИспользуются);
	Элементы.ГруппаСтраницаОднаНоменклатура.Видимость  = (ЭтоНастроеннаяНоменклатура И Не ХарактеристикиИспользуются);
	
	Элементы.ВариантЕдиницыИзмеренияИмеетФиксированныйВес.Видимость   = ДоступноПеременноеКоличество И (ЭтоФасованнаяПродукция Или Не ДопустимоИспользованиеУпаковок);
	Элементы.ВариантЕдиницыИзмеренияИмеетФиксированныйВес.Доступность = ДоступноПеременноеКоличество И Не ДопустимоИспользованиеУпаковок;
	Элементы.ПолеКоличествоФиксированныйВес.Видимость                 = ДоступноПеременноеКоличество И (ЭтоФасованнаяПродукция Или Не ДопустимоИспользованиеУпаковок);
	Элементы.ВариантЕдиницыИзмеренияТребуетсяВзвешивание.Видимость    = ДоступноПеременноеКоличество И (ДоступноТребуетВзвешивания Или ЭтоТребуетВзвешивания);
	Элементы.ВариантЕдиницыИзмеренияТребуетсяВзвешивание.Доступность  = ДоступноПеременноеКоличество И ДоступноТребуетВзвешивания;
	Элементы.ВариантЕдиницыИзмеренияЧастьУпаковки.Видимость         = (ПоддерживаетсяЧастичноеВыбытие И ЭтоЧастьПотребительскойУпаковки);
	Элементы.ПолеКоличествоЧастичноеВыбытие.Видимость               = (ПоддерживаетсяЧастичноеВыбытие И ЭтоЧастьПотребительскойУпаковки);
	Элементы.ПолеКоличествоЧастичноеВыбытие.Доступность             = Ложь;
	Элементы.ВариантЕдиницыИзмеренияЧастьУпаковки.Доступность       = Ложь;
	Элементы.ВариантЕдиницыИзмеренияБлокКороб.Видимость             = Ложь;
	Элементы.ВариантЕдиницыИзмеренияБлокКороб.Доступность           = Ложь;
	Элементы.ПолеКоличествоКороб.Видимость                          = Ложь;
	Элементы.ПолеКоличествоКороб.Доступность                        = Ложь;
	Элементы.ВариантЕдиницыИзмеренияЗаданУпаковками.Видимость       = Ложь;
	Элементы.ВариантЕдиницыИзмеренияЗаданУпаковками.Доступность     = Ложь;
	Элементы.ПотребительскаяУпаковка.Видимость                      = Ложь;
	Элементы.ПотребительскаяУпаковка.Доступность                    = Ложь;
	
	Если ЭтоГрупповаяЛогистическаяУпаковка
		Или Не ДопустимоИспользованиеУпаковок
		Или (ДопустимоИспользованиеУпаковок И Не ДопустимыУпаковкиМеньшеЕдиницыХранения И ЭтоТабак) Тогда
		Элементы.ВариантЕдиницыИзмеренияБлокКороб.Видимость   = (ДопустимаНастройкаЛогистическойЕдиницы Или ЭтоГрупповаяЛогистическаяУпаковка);
		Элементы.ПолеКоличествоКороб.Видимость                = (ДопустимаНастройкаЛогистическойЕдиницы Или ЭтоГрупповаяЛогистическаяУпаковка);;
		Элементы.ВариантЕдиницыИзмеренияБлокКороб.Доступность = ДопустимаНастройкаЛогистическойЕдиницы И (Не ДопустимоИспользованиеУпаковок Или Не ДопустимыУпаковкиМеньшеЕдиницыХранения И ЭтоТабак);
	КонецЕсли;
	
	Если ЭтоГрупповаяЛогистическаяУпаковка
		И (Не ДопустимоИспользованиеУпаковок Или Не ДопустимыУпаковкиМеньшеЕдиницыХранения И ЭтоТабак) Тогда
		Элементы.ПолеКоличествоКороб.Доступность = ДопустимаНастройкаЛогистическойЕдиницы;
	КонецЕсли;
	
	Элементы.ВариантУчетаЧастичногоВыбытияНеИспользуется.Видимость          = Ложь;
	Элементы.ВариантУчетаЧастичногоВыбытияТекущаяНоменклатура.Видимость     = Ложь;
	Элементы.ВариантУчетаЧастичногоВыбытияНастроеннаяНоменклатура.Видимость = Ложь;
	Элементы.ПолеКоличествоЧастичноеВыбытие.Доступность                     = Ложь;
	Элементы.ПолеКоличествоФиксированныйВес.Доступность                     = Ложь;
	Элементы.ПолеКоличествоУпаковка.Доступность                             = Ложь;
	Элементы.ПолеКоличествоУпаковка.Видимость                               = Ложь;
	Элементы.Подвал.Видимость                                               = ПоддерживаетсяЧастичноеВыбытие;
	Элементы.ПолеКоличествоУпаковка.Заголовок                               = Тексты.ПолеКоличествоУпаковкаЗаголовок;
	Элементы.ПолеКоличествоЧастичноеВыбытие.Заголовок                       = Тексты.ПолеКоличествоЧастичноеВыбытиеЗаголовок;
	Элементы.ПолеКоличествоФиксированныйВес.Заголовок                       = Тексты.ПолеКоличествоФиксированныйВесЗаголовок;
	Элементы.ПолеКоличествоКороб.Заголовок                                  = Тексты.ПолеКоличествоКоробЗаголовок;
	Элементы.ПолеКоличествоЧастичноеВыбытие.РасширеннаяПодсказка.Заголовок  = Тексты.ПолеКоличествоЧастичноеВыбытиеПодсказка;
	Элементы.ПолеКоличествоФиксированныйВес.РасширеннаяПодсказка.Заголовок  = Тексты.ПолеКоличествоФиксированныйВесПодсказка;
	Элементы.ПолеКоличествоКороб.РасширеннаяПодсказка.Заголовок             = Тексты.ПолеКоличествоКоробПодсказка;
	Элементы.ПолеКоличествоУпаковка.РасширеннаяПодсказка.Заголовок          = Тексты.ПолеКоличествоУпаковкаПодсказка;
	Элементы.ГруппаБазоваяЕдиницаИмеетФиксированныйВес.РасширеннаяПодсказка.Заголовок = Тексты.ГруппаБазоваяЕдиницаИмеетФиксированныйВесПодсказка;
	
	Если ЭтоТабак Тогда
		Элементы.ВариантЕдиницыИзмеренияЗаданУпаковками.Видимость = (ДопустимоИспользованиеУпаковок И ДопустимыУпаковкиМеньшеЕдиницыХранения);
		Элементы.ПотребительскаяУпаковка.Видимость                = (ДопустимоИспользованиеУпаковок И ДопустимыУпаковкиМеньшеЕдиницыХранения);
	Иначе
		Элементы.ВариантЕдиницыИзмеренияЗаданУпаковками.Видимость = ДопустимоИспользованиеУпаковок;
		Элементы.ПотребительскаяУпаковка.Видимость                = ДопустимоИспользованиеУпаковок;
	КонецЕсли;
	
	Элементы.ВариантЕдиницыИзмеренияЗаданУпаковками.Доступность = УпаковкиВключены;
	
	Если ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.ГрупповаяЛогистическаяУпаковка Тогда
		
		Элементы.Подвал.Видимость = Ложь;
		
	ИначеЕсли ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.ПотребительскаяУпаковка Тогда
		
		Элементы.ВариантУчетаЧастичногоВыбытияНеИспользуется.Видимость          = ПоддерживаетсяЧастичноеВыбытие;
		Элементы.ВариантУчетаЧастичногоВыбытияНастроеннаяНоменклатура.Видимость = ПоддерживаетсяЧастичноеВыбытие;
		Элементы.ПолеКоличествоУпаковка.Видимость                               = ПоддерживаетсяЧастичноеВыбытие;
		Элементы.ПолеКоличествоУпаковка.Доступность                             = (Не РежимПросмотра И ЗначениеЗаполнено(ВариантЧастичногоВыбытия));
		
	ИначеЕсли ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.ЧастьПотребительскойУпаковки Тогда
		
		Элементы.ВариантУчетаЧастичногоВыбытияТекущаяНоменклатура.Видимость = Истина;
		
	ИначеЕсли ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.МернаяПродукцияСФиксированнымЗначением Тогда
		
		Элементы.ПолеКоличествоФиксированныйВес.Доступность = (Не ДопустимоИспользованиеУпаковок);
		Элементы.Подвал.Видимость                           = Ложь;
		
	ИначеЕсли ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.МернаяПродукцияТребуетУказанияЗначения Тогда
		
		Элементы.Подвал.Видимость = Ложь;
	
	ИначеЕсли ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.ЗаданУпаковками Тогда
		
		Элементы.ВариантУчетаЧастичногоВыбытияТекущаяНоменклатура.Видимость = ПоддерживаетсяЧастичноеВыбытие;
		Элементы.ВариантУчетаЧастичногоВыбытияНеИспользуется.Видимость      = ПоддерживаетсяЧастичноеВыбытие;
		Элементы.ПотребительскаяУпаковка.Доступность                        = УпаковкиВключены;
		
	КонецЕсли;
	
	Если Не ТолькоПросмотр Тогда
		Если ВариантЧастичногоВыбытия = Перечисления.ВариантыУчетаЧастичногоВыбытияИСМП.НастроеннаяНоменклатура
			И Номенклатура <> Неопределено
			И Не ЗначениеЗаполнено(Номенклатура) Тогда
			Элементы.ФормаЗаписатьИЗакрыть.Доступность = Ложь;
		Иначе
			Элементы.ФормаЗаписатьИЗакрыть.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ОтступВариантыУчетаЧастичногоВыбытия.Видимость = (Элементы.ВариантУчетаЧастичногоВыбытияНеИспользуется.Видимость
		Или Элементы.ВариантУчетаЧастичногоВыбытияТекущаяНоменклатура.Видимость
		Или Элементы.ВариантУчетаЧастичногоВыбытияНастроеннаяНоменклатура.Видимость);
	
	СобытияФормИС.ПрименитьУсловноеОформлениеКПолю(ЭтотОбъект, "ХарактеристикаЧастичногоВыбытия");

КонецПроцедуры

&НаСервере
Процедура НоменклатураЧастичногоВыбытияПриИзмененииНаСервере()
	
	ЗаполнитьДанныеНоменклатурыЧастичногоВыбытия(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыФормыПриСоздании()
	
	Номенклатура     = Параметры.Номенклатура;
	ВидПродукции     = Параметры.ВидПродукции;
	РежимПросмотра   = Параметры.РежимПросмотра;
	ЕдиницаХранения  = Параметры.ЕдиницаХранения;
	РежимПросмотра   = Параметры.РежимПросмотра;
	НаборУпаковок    = Параметры.НаборУпаковок;
	УпаковкиВключены = Параметры.УпаковкиВключены;
	ДопустимоИспользованиеУпаковок         = Параметры.ДопустимоИспользованиеУпаковок;
	ДопустмаНастроеннаяНоменклатура        = Параметры.ДопустмаНастроеннаяНоменклатура;
	ДопустимыУпаковкиМеньшеЕдиницыХранения = Параметры.ДопустимыУпаковкиМеньшеЕдиницыХранения;
	КарточкаТовараСодержитВесовойПризнак   = Параметры.КарточкаТовараСодержитВесовойПризнак;
	ДопустимаНастройкаЛогистическойЕдиницы = Параметры.ДопустимаНастройкаЛогистическойЕдиницы;
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка. В форму настройки не передана ссылка на номенклатуру.'");
	ИначеЕсли Не ЗначениеЗаполнено(ВидПродукции) Тогда
		ВидПродукции = ИнтеграцияИС.ВидПродукцииПоНоменклатуре(Номенклатура);
	КонецЕсли;
	
	ПоддерживаетсяЧастичноеВыбытие = ИнтеграцияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(ВидПродукции);
	
	Если РежимПросмотра Тогда
		ТолькоПросмотр                                                               = Истина;
		Элементы.ФормаЗаписатьИЗакрыть.Видимость                                     = Ложь;
		Элементы.ВариантЕдиницыИзмеренияУпаковка.ТолькоПросмотр                      = Истина;
		Элементы.ВариантЕдиницыИзмеренияЧастьУпаковки.ТолькоПросмотр                 = Истина;
		Элементы.ПолеКоличествоЧастичноеВыбытие.ТолькоПросмотр                       = Истина;
		Элементы.ВариантЕдиницыИзмеренияБлокКороб.ТолькоПросмотр                     = Истина;
		Элементы.ПолеКоличествоКороб.ТолькоПросмотр                                  = Истина;
		Элементы.ВариантЕдиницыИзмеренияИмеетФиксированныйВес.ТолькоПросмотр         = Истина;
		Элементы.ПолеКоличествоФиксированныйВес.ТолькоПросмотр                       = Истина;
		Элементы.ВариантЕдиницыИзмеренияТребуетсяВзвешивание.ТолькоПросмотр          = Истина;
		Элементы.ВариантУчетаЧастичногоВыбытияНеИспользуется.ТолькоПросмотр          = Истина;
		Элементы.ВариантУчетаЧастичногоВыбытияТекущаяНоменклатура.ТолькоПросмотр     = Истина;
		Элементы.ВариантУчетаЧастичногоВыбытияНастроеннаяНоменклатура.ТолькоПросмотр = Истина;
		Элементы.ПолеКоличествоУпаковка.ТолькоПросмотр                               = Истина;
		Элементы.НастройкиНоменклатуры.ТолькоПросмотр                                = Истина;
		Элементы.НоменклатураЧастичногоВыбытия.ТолькоПросмотр                        = Истина;
		Элементы.ХарактеристикаЧастичногоВыбытия.ТолькоПросмотр                      = Истина;
		Элементы.ПотребительскаяУпаковка.ТолькоПросмотр                              = Истина;
		Элементы.ВариантЕдиницыИзмеренияЗаданУпаковками.ТолькоПросмотр               = Истина;
		Элементы.ПотребительскаяУпаковка.ТолькоПросмотр                              = Истина;
	КонецЕсли;
	
	ДанныеПредставления = Новый Массив();
	Для Каждого ЭлементТип Из Метаданные.ОпределяемыеТипы.СборкаРазборкаЧастичноеВыбытиеИСМП.Тип.Типы() Цикл
		Если Документы.ТипВсеСсылки().СодержитТип(ЭлементТип) Тогда
			МетаданныеПоТипу = Метаданные.НайтиПоТипу(ЭлементТип);
			ДанныеПредставления.Добавить(МетаданныеПоТипу.Синоним);
		КонецЕсли;
	КонецЦикла;
	
	ПредставленияДокументовСборкаРазборка = ОбщегоНазначения.ФиксированныеДанные(ДанныеПредставления);
	ОписаниеНоменклатуры                  = РегистрыСведений.ОписаниеНоменклатурыИС.ПолучитьОписание(Номенклатура)[Номенклатура];
	ВариантЧастичногоВыбытия              = ОписаниеНоменклатуры.ВариантЧастичногоВыбытия;
	ВариантИспользованияЕдиницыХранения   = ОписаниеНоменклатуры.ВариантИспользованияЕдиницыХранения;
	
	Если ВидПродукции <> ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво") Тогда
		
		Элементы.ПолеКоличествоУпаковка.ОграничениеТипа = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0, ДопустимыйЗнак.Неотрицательный));
		
	КонецЕсли;
	
	Если ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.ГрупповаяЛогистическаяУпаковка Тогда
		Если ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке = 0 Тогда
			ПолеКоличествоКороб = 1;
		Иначе
			ПолеКоличествоКороб = Окр(1 / ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке);
		КонецЕсли;
	ИначеЕсли ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.МернаяПродукцияСФиксированнымЗначением Тогда
		ПолеКоличествоФиксированныйВес = ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке;
	ИначеЕсли ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.МернаяПродукцияТребуетУказанияЗначения Тогда
	ИначеЕсли ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.ЧастьПотребительскойУпаковки Тогда
		ПолеКоличествоЧастичноеВыбытие = ОписаниеНоменклатуры.ЕмкостьПотребительскойУпаковки;
	ИначеЕсли ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.ПотребительскаяУпаковка Тогда
		ПолеКоличествоУпаковка  = ОписаниеНоменклатуры.ЕмкостьПотребительскойУпаковки;
	ИначеЕсли ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.ЗаданУпаковками Тогда
		ПотребительскаяУпаковка = ОписаниеНоменклатуры.ПотребительскаяУпаковка;
	КонецЕсли;
	
	СтрокаДляНастроекНоменклатуры = Неопределено;
	ТаблицаНастроекНоменклатуры   = НастройкиНоменклатуры.Выгрузить();
	
	Если ВариантЧастичногоВыбытия = Перечисления.ВариантыУчетаЧастичногоВыбытияИСМП.НастроеннаяНоменклатура Тогда
		
		НаборЧтенияДанных = РегистрыСведений.НастройкиЧастичногоВыбытияТоваровИСМП.СоздатьНаборЗаписей();
		НаборЧтенияДанных.Отбор.Номенклатура.Установить(Номенклатура);
		НаборЧтенияДанных.Прочитать();
		
		Для Каждого СтрокаТаблицы Из НаборЧтенияДанных Цикл
			НоваяСтрока = ТаблицаНастроекНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			ЗаполнитьНомерСтроки(НоваяСтрока, ТаблицаНастроекНоменклатуры);
		КонецЦикла;
		
		ТаблицаНастроекНоменклатуры.Сортировать(
			"Номенклатура, Характеристика, НоменклатураЧастичногоВыбытия, ХарактеристикаЧастичногоВыбытия");
		
		ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, ТаблицаНастроекНоменклатуры);
		НастройкиНоменклатуры.Загрузить(ТаблицаНастроекНоменклатуры);
		
		Если НастройкиНоменклатуры.Количество() Тогда
			СтрокаДляНастроекНоменклатуры = НастройкиНоменклатуры[0];
		КонецЕсли;
		
		ТаблицаНастроекНоменклатуры.Очистить();
		ЗаполнитьДанныеНоменклатурыЧастичногоВыбытия();
		
	КонецЕсли;
	
	Если СтрокаДляНастроекНоменклатуры = Неопределено Тогда
		ТаблицаНастроекНоменклатуры.Очистить();
		СтрокаДляНастроекНоменклатуры = ТаблицаНастроекНоменклатуры.Добавить();
		СтрокаДляНастроекНоменклатуры.Номенклатура = Номенклатура;
		СтрокаДляНастроекНоменклатуры.НомерСтроки  = 1;
		ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, ТаблицаНастроекНоменклатуры);
	КонецЕсли;
	
	Упаковка                   = СтрокаДляНастроекНоменклатуры.ЕдиницаИзмерения;
	ХарактеристикиИспользуются = СтрокаДляНастроекНоменклатуры.ХарактеристикиИспользуются;
	
	СоздатьСтрокуНастройкиПриНеобходимости();
	
	Если ВариантЧастичногоВыбытия = Перечисления.ВариантыУчетаЧастичногоВыбытияИСМП.НастроеннаяНоменклатура
		И Не ХарактеристикиИспользуются Тогда
		ПеренестиСтрокуНастройкиВДанныеФормы(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСтрокуНастройкиПриНеобходимости()
	
	Если ВариантЧастичногоВыбытия = Перечисления.ВариантыУчетаЧастичногоВыбытияИСМП.НастроеннаяНоменклатура
		И НастройкиНоменклатуры.Количество() = 0
		И Не ХарактеристикиИспользуются Тогда
		НоваяСтрока              = НастройкиНоменклатуры.Добавить();
		НоваяСтрока.Номенклатура = Номенклатура;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПеренестиСтрокуНастройкиВДанныеФормы(Форма)
	
	Если Форма.ВариантЧастичногоВыбытия <> ПредопределенноеЗначение("Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.НастроеннаяНоменклатура")
		Или Форма.ХарактеристикиИспользуются Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДанных = Форма.НастройкиНоменклатуры[0];
	
	Форма.НоменклатураЧастичногоВыбытия               = СтрокаДанных.НоменклатураЧастичногоВыбытия;
	Форма.ХарактеристикаЧастичногоВыбытия             = СтрокаДанных.ХарактеристикаЧастичногоВыбытия;
	Форма.ХарактеристикиИспользуютсяЧастичногоВыбытия = СтрокаДанных.ХарактеристикиИспользуютсяЧастичноеВыбытие;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПеренестиДанныеФормыВСтроку(Форма)
	
	Если Форма.ВариантЧастичногоВыбытия <> ПредопределенноеЗначение("Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.НастроеннаяНоменклатура")
		Или Форма.ХарактеристикиИспользуются Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДанных = Форма.НастройкиНоменклатуры[0];
	
	СтрокаДанных.НоменклатураЧастичногоВыбытия              = Форма.НоменклатураЧастичногоВыбытия;
	СтрокаДанных.ХарактеристикаЧастичногоВыбытия            = Форма.ХарактеристикаЧастичногоВыбытия;
	СтрокаДанных.ХарактеристикиИспользуютсяЧастичноеВыбытие = Форма.ХарактеристикиИспользуютсяЧастичногоВыбытия;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеНоменклатурыЧастичногоВыбытия(ПоТекущейСтроке = Ложь)
	
	Если ПоТекущейСтроке Тогда
		ИсходныеСтроки = Новый Массив();
		ИсходныеСтроки.Добавить(
			НастройкиНоменклатуры.НайтиПоИдентификатору(Элементы.НастройкиНоменклатуры.ТекущаяСтрока));
	Иначе
		ИсходныеСтроки = НастройкиНоменклатуры;
	КонецЕсли;
	
	ВременнаяТаблица   = НастройкиНоменклатуры.Выгрузить(Новый Массив());
	КэшСтрокЗаполнения = Новый Соответствие();
	Для Каждого СтрокаТаблицы Из ИсходныеСтроки Цикл
		
		СтрокаТаблицы.ЕдиницаИзмеренияЧастичногоВыбытия          = Неопределено;
		СтрокаТаблицы.ХарактеристикиИспользуютсяЧастичноеВыбытие = Ложь;
		
		НоваяСтрока = ВременнаяТаблица.Добавить();
		НоваяСтрока.Номенклатура   = СтрокаТаблицы.НоменклатураЧастичногоВыбытия;
		НоваяСтрока.Характеристика = СтрокаТаблицы.ХарактеристикаЧастичногоВыбытия;
		ЗаполнитьНомерСтроки(НоваяСтрока, ВременнаяТаблица);
		
		КэшСтрокЗаполнения.Вставить(НоваяСтрока, СтрокаТаблицы);
		
	КонецЦикла;
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, ВременнаяТаблица);
	
	Для Каждого СтрокаТаблицы Из ВременнаяТаблица Цикл
		
		ИсходнаяСтрока                                            = КэшСтрокЗаполнения.Получить(СтрокаТаблицы);
		ИсходнаяСтрока.ЕдиницаИзмеренияЧастичногоВыбытия          = СтрокаТаблицы.ЕдиницаИзмерения;
		ИсходнаяСтрока.ХарактеристикиИспользуютсяЧастичноеВыбытие = СтрокаТаблицы.ХарактеристикиИспользуются
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНомерСтроки(ТекущаяСтрока, Коллекция)
	
	ТекущаяСтрока.НомерСтроки = Коллекция.Индекс(ТекущаяСтрока) + 1;
	
КонецПроцедуры

&НаСервере
Процедура СброситьРазмерыИПоложениеОкна()
	
	ИмяПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		ХранилищеСистемныхНастроек.Удалить("ОбщаяФорма.ФормаУточненияДанныхИС", "", ИмяПользователя);
	КонецЕсли;
	КлючСохраненияПоложенияОкна = Строка(Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление();
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект, "НастройкиНоменклатурыХарактеристика", "НастройкиНоменклатуры.ХарактеристикиИспользуются");
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект, "НастройкиНоменклатурыХарактеристикаЧастичногоВыбытия", "НастройкиНоменклатуры.ХарактеристикиИспользуютсяЧастичноеВыбытие");
	
	//
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект, "ХарактеристикаЧастичногоВыбытия", "ХарактеристикиИспользуютсяЧастичногоВыбытия");
	
КонецПроцедуры

#Область ОписанияОповещений

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗакрытиеФормы(Истина);
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		ЗакрытиеФормы(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПотребительскойУпаковкиЗавершение(Значение, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если Значение = ПотребительскаяУпаковка Тогда
		Возврат;
	КонецЕсли;
	
	ПотребительскаяУпаковка = Значение;
	Модифицированность      = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
