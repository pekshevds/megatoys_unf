

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.Характеристика.Видимость = Параметры.ОтображатьИнформациюОСкидкахПоСтроке;
	Элементы.Номенклатура.Видимость   = Параметры.ОтображатьИнформациюОСкидкахПоСтроке;
	
	Элементы.СуммаРучнойСкидки.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиНаценкиПродажи");
	
	Валюта = "RUB";
	
	Если ЗначениеЗаполнено(Параметры.Заголовок) Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = Параметры.Заголовок;
	КонецЕсли;
	КлючСвязиОтображаемойСтроки = Параметры.ТекущиеДанные.КлючСвязи;
	
	Если Параметры.ОтображатьИнформациюОСкидкахПоСтроке Тогда
		
		Номенклатура   = Параметры.ТекущиеДанные.Номенклатура;
		Характеристика = Параметры.ТекущиеДанные.Характеристика;
		
		// Общая сумма скидки включает в себя сумму автоматической и ручной скидки.
		СуммаАвтоСкидки   = 0;
		СуммаРучнойСкидки = Параметры.ТекущиеДанные.СуммаРучнойСкидки;
		
		Отбор = Новый Структура("КлючСвязи", КлючСвязиОтображаемойСтроки);
		Для Каждого СтрокаТЗСкидкиНаценки Из Параметры.Объект.СкидкиНаценки.НайтиСтроки(Отбор) Цикл
			
			НоваяСтрока = АвтоматическиеСкидки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗСкидкиНаценки);
			Если Параметры.ТекущиеДанные.СуммаБезСкидки <> 0 Тогда
				НоваяСтрока.Процент = 100 * СтрокаТЗСкидкиНаценки.Сумма / Параметры.ТекущиеДанные.СуммаБезСкидки;
			КонецЕсли;
			
			СуммаАвтоСкидки = СуммаАвтоСкидки + НоваяСтрока.Сумма;
			
		КонецЦикла;
		// Скидки, которые нельзя отнести на строку, например подарки не включаемые в чек, или сообщения
		Отбор = Новый Структура("КлючСвязи", 0);
		Для Каждого СтрокаТЗСкидкиНаценки Из Параметры.Объект.СкидкиНаценки.НайтиСтроки(Отбор) Цикл
			
			НоваяСтрока = АвтоматическиеСкидки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗСкидкиНаценки);
			Если Параметры.ТекущиеДанные.СуммаБезСкидки <> 0 Тогда
				НоваяСтрока.Процент = 100 * СтрокаТЗСкидкиНаценки.Сумма / Параметры.ТекущиеДанные.СуммаБезСкидки;
			КонецЕсли;
			
			СуммаАвтоСкидки = СуммаАвтоСкидки + НоваяСтрока.Сумма;
			
		КонецЦикла;
		
		СуммаСкидки       = СуммаАвтоСкидки + СуммаРучнойСкидки;
		
	Иначе
		
		СуммаАвтоСкидки   = Параметры.Объект.Товары.Итог("СуммаАвтоматическойСкидки");
		СуммаРучнойСкидки = Параметры.Объект.Товары.Итог("СуммаРучнойСкидки");
		СуммаСкидки       = СуммаАвтоСкидки + СуммаРучнойСкидки;
		
	КонецЕсли;
	
	Параметры.Свойство("МинимальнаяЦена", МинимальнаяЦена);
	
	Если Параметры.ТекущиеДанные.Свойство("МинимальнаяЦена", МинимальнаяЦена) Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "МинимальныеЦены", "Видимость", Истина);
		
		СтруктурнаяЕдиница = Параметры.ТекущиеДанные.СтруктурнаяЕдиница;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиница", "Видимость", ЗначениеЗаполнено(СтруктурнаяЕдиница));
		
		ВидМинимальныхЦен = ЦенообразованиеСерверПовтИсп.ПолучитьВидМинимальныхЦен(СтруктурнаяЕдиница);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "МинимальныеЦены", "Видимость", Ложь);
		
	КонецЕсли;
	
	Параметры.Свойство("ЗапретУправляемыхСкидокВДокументе", ЗапретУправляемыхСкидокВДокументе);
	Параметры.Свойство("ЗапретУправляемыхСкидокВСтроке", ЗапретУправляемыхСкидокВСтроке);
	
	// Информация может быть отображена только после непосредственного расчета скидок в документе.
	// После закрытия формы эта информация не сохраняется.
	Если ЗначениеЗаполнено(Параметры.АдресПримененныхСкидокВоВременномХранилище) Тогда
		
		ПримененныеСкидки = ПолучитьИзВременногоХранилища(Параметры.АдресПримененныхСкидокВоВременномХранилище);
		
		Если Параметры.ОтображатьИсключение Тогда
			ОтобразитьНадписьИсключения();
		КонецЕсли;
	
		Если Параметры.ОтображатьИнформациюОРасчетеСкидокПоСтроке Тогда 
			СформироватьИнформациюОРасчетеСкидокПоСтроке(ПримененныеСкидки, АвтоматическиеСкидки.Выгрузить());
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ТекстВариантаСовместногоПрименения.Заголовок = Строка(Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить());
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РазвернутьДеревоДоУсловийРекурсивно(ИнформацияОРасчетеСкидокПоСтроке, Элементы.ИнформацияОРасчетеСкидокПоСтроке);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура РазвернутьДеревоДоУсловийРекурсивно(СтрокаДерева, ЭлементФормы)
	
	КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();
	Для каждого Элемент Из КоллекцияЭлементов Цикл
	
		Если Элемент.Разворачивать Тогда
			ЭлементФормы.Развернуть(Элемент.ПолучитьИдентификатор());
			РазвернутьДеревоДоУсловийРекурсивно(Элемент, ЭлементФормы);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьИнформациюОРасчетеСкидокПоСтроке(ВходящееДеревоСкидок, ДеревоСкидок, ТаблицаАвтоматическиеСкидки)
	
	Для Каждого СтрокаДерева Из ДеревоСкидок.Строки Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			РассчитатьИнформациюОРасчетеСкидокПоСтроке(ВходящееДеревоСкидок, СтрокаДерева, ТаблицаАвтоматическиеСкидки);
			
			СтрокаДерева.ИндексКартинки = СкидкиНаценкиСервер.ПолучитьИндексКартинкиДляГруппы(СтрокаДерева);
			СтрокаДерева.Значение = СтрокаДерева.СкидкаНаценка;
			СтрокаДерева.Разворачивать = Истина;
			
			Для каждого Стр Из СтрокаДерева.Строки Цикл
				Если Стр.Действует Тогда
					СтрокаДерева.Действует        = Истина;
					СтрокаДерева.УсловияВыполнены = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			СтрокаДерева.СуммаАвтоматическойСкидки = СтрокаДерева.Строки.Итог("СуммаАвтоматическойСкидки");
			
		Иначе
			
			СтрокаДерева.ИндексКартинки = СкидкиНаценкиСервер.ПолучитьИндексКартинкиДляСкидки(СтрокаДерева);
			СтрокаДерева.Значение = СтрокаДерева.СкидкаНаценка;
			Для каждого СтрокаТаблицыУсловие Из СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий Цикл
				НоваяСтрокаУсловие = СтрокаДерева.Строки.Добавить();
				НоваяСтрокаУсловие.Значение       = СтрокаТаблицыУсловие.УсловиеПредоставления;
				НоваяСтрокаУсловие.ЭтоУсловие     = Истина;
				ПараметрыУсловия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТаблицыУсловие.УсловиеПредоставления, "УсловиеПредоставления, ОбластьОграничения");
				МожноАктивироватьВручную = ПараметрыУсловия.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаАктивациюВручную");
				НоваяСтрокаУсловие.ИндексКартинки = -1;
				НоваяСтрокаУсловие.Действует = Ложь;
				Если ПараметрыУсловия.ОбластьОграничения = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе") Тогда
					НоваяСтрокаУсловие.Действует = СтрокаТаблицыУсловие.Выполнено;
					МожноАктивироватьВручную = МожноАктивироватьВручную И Не ЗапретУправляемыхСкидокВДокументе;
				Иначе
					МожноАктивироватьВручную = МожноАктивироватьВручную И Не ЗапретУправляемыхСкидокВСтроке;
					Если СтрокаТаблицыУсловие.Выполнено Тогда
						НайденныеСтрокиТаблицыПроверкиУсловий = СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.Найти(КлючСвязиОтображаемойСтроки, "КлючСвязи");
						Если НайденныеСтрокиТаблицыПроверкиУсловий <> Неопределено Тогда
							НазваниеКолонки = СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.СоответствиеУсловийКолонкамТаблицыПроверкиУсловий.Получить(СтрокаТаблицыУсловие.УсловиеПредоставления);
							Если НазваниеКолонки <> Неопределено Тогда
								НоваяСтрокаУсловие.Действует = НайденныеСтрокиТаблицыПроверкиУсловий[НазваниеКолонки];
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				НоваяСтрокаУсловие.МожноАктивироватьВручную = МожноАктивироватьВручную;
				Если НоваяСтрокаУсловие.МожноАктивироватьВручную И НоваяСтрокаУсловие.Действует Тогда
					НоваяСтрокаУсловие.АктивированаВручную = Истина;
				КонецЕсли;
			КонецЦикла;
			ОтразитьВыполенниеУсловийСтроки(СтрокаДерева);
			// Удаление начислений бонусов
			Если СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.КоличествоБонусныхБаллов
				Или СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ПроцентОтСуммыВВидеБонусныхБаллов
			Тогда
				СтрокаДерева.Действует = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	ОтразитьВозможностьУправленияСкидками();
КонецПроцедуры // РассчитатьИнформациюОРасчетеСкидокПоДокументу()

&НаСервере
Процедура ОтразитьВозможностьУправленияСкидками()
	Элементы.ГруппаЛегендаУправляемыеСкидки.Видимость = ДоступноУправлениеСкидками;
	Элементы.ОтменаГотово.Видимость = ДоступноУправлениеСкидками;
	Если ДоступноУправлениеСкидками Тогда
		Элементы.Готово.Заголовок = "Применить";
	Иначе
		Элементы.Готово.Заголовок = "Закрыть";
	КонецЕсли;
	Элементы.ИнформацияОРасчетеСкидокПоСтрокеАктивированаВручную.Видимость = ДоступноУправлениеСкидками;
	Если СкидкиИзменились Тогда
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОтразитьВыполенниеУсловийСтроки(СтрокаДерева)
	ВсеУсловияВыполнены = Истина;
	ЕстьУправляемыеУсловия = Ложь;
	ВсеКромеУправляемыхУсловийВыполнены = Истина;
	СкидкаНаценка = СтрокаДерева.Значение;
	Если Не (ТипЗнч(СкидкаНаценка) = Тип("СправочникСсылка.АвтоматическиеСкидки") 
		И ЗначениеЗаполнено(СкидкаНаценка)) Тогда
		// Все действия актуальны только для узловой строки скидки
		Возврат;
	КонецЕсли;
	СтруктураПоискаСкидки = Новый Структура("СкидкаНаценка", СкидкаНаценка);
	
	ПодчиненныеСтроки = Новый Массив;
	Если ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыЭлементДерева") Тогда
		ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	ИначеЕсли ТипЗнч(СтрокаДерева) = Тип("СтрокаДереваЗначений") Тогда
		ПодчиненныеСтроки = СтрокаДерева.Строки;
	Иначе
		ВызватьИсключение(НРег("ru = 'Не удалось проанализировать дерево скидок'"));
	КонецЕсли;
	Для Каждого СтрокаДереваУсловий Из ПодчиненныеСтроки Цикл
		Если СтрокаДереваУсловий.МожноАктивироватьВручную Тогда
			ЕстьУправляемыеУсловия = Истина;
		Иначе
			ВсеКромеУправляемыхУсловийВыполнены = Мин(ВсеКромеУправляемыхУсловийВыполнены, СтрокаДереваУсловий.Действует);
		КонецЕсли;
		Если НЕ СтрокаДереваУсловий.Действует Тогда
			ВсеУсловияВыполнены = Ложь;
		КонецЕсли;
	КонецЦикла;	
	
	СтрокаДерева.МожноАктивироватьВручную = ЕстьУправляемыеУсловия И ВсеКромеУправляемыхУсловийВыполнены;
	
	// Если хоть одна скидка может быть включена вручную, то нужно отразить на форме соответствующие элементы
	ДоступноУправлениеСкидками = Макс(ДоступноУправлениеСкидками, СтрокаДерева.МожноАктивироватьВручную);
	
	Если ВсеУсловияВыполнены Тогда
		СтрокаДерева.Действует = Истина;
		СтрокаДерева.УсловияВыполнены = Истина;
		СтрокаДерева.АктивированаВручную = СтрокаДерева.МожноАктивироватьВручную;
		
		СтрокаДерева.СуммаАвтоматическойСкидки = 0;
		СтрокиПоиска = АвтоматическиеСкидки.НайтиСтроки(СтруктураПоискаСкидки);
		Если СтрокиПоиска.Количество() = 0 
			И Не (СтрокаДерева.МожноАктивироватьВручную 
				И СкидкиИзменились) Тогда
			// Если скидка активируется вручную, то судить, применилась она или нет, можно только до каких-то изменений
			// После ручных изменений уже не понятно, она не была включена, и не применена при расчете в документе,
			// Или мы ее только что включили
			СтрокаДерева.НеПримениласьПоУсловиямСовместногоПрименения = Истина;
		КонецЕсли;
		
		Для каждого СтрокаПоиска Из СтрокиПоиска Цикл
			СтрокаДерева.СуммаАвтоматическойСкидки = СтрокаДерева.СуммаАвтоматическойСкидки + СтрокаПоиска.Сумма;
			Если СтрокаПоиска.ОграниченаМинимальнойЦеной Тогда
				СтрокаДерева.ОграниченаМинимальнойЦеной = Истина;
			КонецЕсли;
			СтрокаДерева.Комментарий = СтрокаПоиска.Комментарий;
		КонецЦикла;
	Иначе
		СтрокаДерева.УсловияВыполнены = Ложь;
		СтрокаДерева.Действует = Ложь;
		СтрокаДерева.АктивированаВручную = Ложь;
	КонецЕсли;
	
	Для Каждого СтрокаУсловие Из ПодчиненныеСтроки Цикл
		СтрокаУсловие.НеПримениласьПоУсловиямСовместногоПрименения = СтрокаДерева.НеПримениласьПоУсловиямСовместногоПрименения;
		СтрокаУсловие.ДействуетСкидка = СтрокаДерева.Действует;
		Если СтрокаУсловие.МожноАктивироватьВручную Тогда
			// Отключение возможности назначить управляемую скидку, если прочие условия не выполнены
			СтрокаУсловие.МожноАктивироватьВручную = СтрокаДерева.МожноАктивироватьВручную;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СформироватьИнформациюОРасчетеСкидокПоСтроке(ВходящееДеревоСкидок, ТаблицаАвтоматическиеСкидки)
	
	ДеревоСкидок = ВходящееДеревоСкидок.ДеревоСкидок.Скопировать();
	
	ДеревоСкидок.Колонки.Добавить("ИндексКартинки",   	Новый ОписаниеТипов("Число"));
	ДеревоСкидок.Колонки.Добавить("Действует",        	Новый ОписаниеТипов("Булево"));
	ДеревоСкидок.Колонки.Добавить("УсловияВыполнены", 	Новый ОписаниеТипов("Булево"));
	ДеревоСкидок.Колонки.Добавить("НеПримениласьПоУсловиямСовместногоПрименения", Новый ОписаниеТипов("Булево"));
	ДеревоСкидок.Колонки.Добавить("Разворачивать",  	Новый ОписаниеТипов("Булево"));
	ДеревоСкидок.Колонки.Добавить("ЭтоУсловие",     	Новый ОписаниеТипов("Булево"));
	ДеревоСкидок.Колонки.Добавить("АктивированаВручную", Новый ОписаниеТипов("Булево"));
	ДеревоСкидок.Колонки.Добавить("МожноАктивироватьВручную", Новый ОписаниеТипов("Булево"));
	ДеревоСкидок.Колонки.Добавить("Значение",       	Новый ОписаниеТипов("СправочникСсылка.АвтоматическиеСкидки, СправочникСсылка.УсловияПредоставленияСкидокНаценок"));
	ДеревоСкидок.Колонки.Добавить("СуммаАвтоматическойСкидки", Новый ОписаниеТипов("Число"));
	ДеревоСкидок.Колонки.Добавить("ОграниченаМинимальнойЦеной", Новый ОписаниеТипов("Булево"));
	ДеревоСкидок.Колонки.Добавить("ДействуетСкидка", 	Новый ОписаниеТипов("Булево"));
	ДеревоСкидок.Колонки.Добавить("Комментарий", 		Новый ОписаниеТипов("Строка"));
	
	РассчитатьИнформациюОРасчетеСкидокПоСтроке(ВходящееДеревоСкидок, ДеревоСкидок, ТаблицаАвтоматическиеСкидки);
	
	ЗначениеВРеквизитФормы(ДеревоСкидок, "ИнформацияОРасчетеСкидокПоСтроке");
	
КонецПроцедуры // СформироватьИнформациюОРасчетеСкидокПоДокументу()

&НаКлиенте
Процедура ИнформацияОРасчетеСкидокПоСтрокеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОРасчетеСкидокПоСтрокеЗначениеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаСервере
Процедура ОтобразитьНадписьИсключения()
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОРасчетеСкидокПоСтрокеАктивированаВручнуюПриИзменении(Элемент)
	ИдентификаторСтроки = Элементы.ИнформацияОРасчетеСкидокПоСтроке.ТекущаяСтрока;
	Если ИдентификаторСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИнформацияОРасчетеСкидокПоСтрокеАктивированаВручнуюПриИзмененииНаСервере(ИдентификаторСтроки);
КонецПроцедуры

&НаСервере
Процедура ИнформацияОРасчетеСкидокПоСтрокеАктивированаВручнуюПриИзмененииНаСервере(ИдентификаторСтроки)
	ТекущаяСтрокаУсловия = ИнформацияОРасчетеСкидокПоСтроке.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если ТекущаяСтрокаУсловия = Неопределено 
		ИЛИ Не ТекущаяСтрокаУсловия.ЭтоУсловие Тогда
		Возврат;
	КонецЕсли;
	ТекущаяСтрокаУсловия.Действует = ТекущаяСтрокаУсловия.АктивированаВручную;
	СкидкиИзменились = Истина;
	ОтразитьВозможностьУправленияСкидками();
	ТекущаяСтрокаСкидки = ТекущаяСтрокаУсловия.ПолучитьРодителя();
	Если Не ТекущаяСтрокаСкидки = Неопределено Тогда
		ОтразитьВыполенниеУсловийСтроки(ТекущаяСтрокаСкидки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция НайтиАктивированныеУправляемыеСкидкиРекурсивно(СтрокаДерева)
	Результат = Новый Массив;
	Если ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыЭлементДерева") Тогда
		СкидкаНаценка = СтрокаДерева.Значение;
		Если СтрокаДерева.АктивированаВручную 
			И ТипЗнч(СкидкаНаценка) = Тип("СправочникСсылка.АвтоматическиеСкидки")
			И ЗначениеЗаполнено(СкидкаНаценка) Тогда
			Результат.Добавить(СкидкаНаценка);
		КонецЕсли;
	КонецЕсли;	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		РезультатСтроки = НайтиАктивированныеУправляемыеСкидкиРекурсивно(ПодчиненнаяСтрока);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, РезультатСтроки, Истина); 
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура Готово(Команда)
	Результат = Новый Структура;
	ВыбранныеУправляемыеСкидки = НайтиАктивированныеУправляемыеСкидкиРекурсивно(ИнформацияОРасчетеСкидокПоСтроке);
	Результат.Вставить("ВыбранныеУправляемыеСкидки", ВыбранныеУправляемыеСкидки);
	Результат.Вставить("СкидкиИзменились", СкидкиИзменились);
	Закрыть(Результат);
КонецПроцедуры

#КонецОбласти


