
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// УНФ.ОтборыСписка
	РаботаСОтборами.ОпределитьПорядокПредопределенныхОтборов(ЭтотОбъект);
	РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, Список,,,Новый Структура("ОтборПериод", "ДатаСоздания"));
	// Конец УНФ.ОтборыСписка
	
	// УНФ.ПанельКонтактнойИнформации
	КонтактнаяИнформацияПанельУНФ.ПриСозданииНаСервере(ЭтотОбъект, "КонтактнаяИнформация", "СписокКонтекстноеМеню");
	// Конец УНФ.ПанельКонтактнойИнформации
	
	ДоступнаРаботаСЛидами = ПравоДоступа("Добавление", Метаданные.Справочники.Лиды);
	ПраваНаПросмотрАдресатов = ПравоДоступа("Просмотр", Метаданные.Справочники.АдресатыПисем);
	
	ТипПолучателя = Перечисления.ТипыПолучателейЭлектронногоПисьма.Кому;
	Если Параметры.Свойство("ТипКИ") Тогда 
		Если Параметры.ТипКИ = "АдресЭлектроннойПочты" Тогда
			ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		Иначе
			ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
		КонецЕсли;
	КонецЕсли;
	
	Параметры.Свойство("ЭтоОтборИзРассылки", ЭтоОтборИзРассылки);
	ПроверитьСоздатьГруппуИзбранное();
	
	Если НЕ ЗначениеЗаполнено(ТипКИ) Тогда
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	КонецЕсли;
	
	Если Параметры.Свойство("АдресТаблицыВыбранныхАдресатов") Тогда
		ДополнитьВыбранныхАдресатов(Параметры.АдресТаблицыВыбранныхАдресатов);
	КонецЕсли;
	
	Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Пометка = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(ИмяФормы,
		"ВключаяВложенные",
		Ложь);
		
	ОтборИерархияТекущая = ХранилищеСистемныхНастроек.Загрузить("ГруппаОтбораАдреснойКниги", 
			"ГруппаОтбораАдреснойКниги_АдреснаяКнига");
		
	ЗначениеКому 			= Перечисления.ТипыПолучателейЭлектронногоПисьма.Кому;
	ЗначениеКопия 			= Перечисления.ТипыПолучателейЭлектронногоПисьма.Копия; 
	ЗначениеСкрытаяКопия 	= Перечисления.ТипыПолучателейЭлектронногоПисьма.СкрытаяКопия;
	
	ПрочитатьИерархию(ОтборИерархияТекущая);
	УстановитьСтильПанелиКИ();
	УправлениеФормой();
	
	Если Параметры.Свойство("ТекущийАдресат") Тогда
		Элементы.Список.ТекущаяСтрока = Параметры.ТекущийАдресат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_КонтрагентГруппа" 
		ИЛИ ИмяСобытия = "Запись_КонтактноеЛицоГруппа"
		ИЛИ ИмяСобытия = "Запись_ЛидГруппа"
		ИЛИ ИмяСобытия = "Запись_ФизЛицоГруппа"
		ИЛИ ИмяСобытия = "Запись_ГруппаАдресатов"
		ИЛИ ИмяСобытия = "Запись_ГруппаАдресатовГруппа" Тогда
		
		НоваяГруппа = Неопределено;
		Если ТипЗнч(Параметр) = Тип("Массив") И Параметр.Количество() <> 0 Тогда
			НоваяГруппа = Параметр[0];
		ИначеЕсли ЗначениеЗаполнено(Параметр) Тогда
			НоваяГруппа = Параметр;
		КонецЕсли;
		
		ПрочитатьИерархию(НоваяГруппа);
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ПустаяСтрока(АдресВХранилище) И (ВыбранныеАдресатыКому.Количество() > 0 
		ИЛИ ВыбранныеАдресатыКопия.Количество() > 0 ИЛИ ВыбранныеАдресатыСкрытаяКопия.Количество() > 0)Тогда
		
		Отказ = Истина;
		
		Если ЗавершениеРаботы Тогда
			ТекстПредупреждения = НСтр("ru = 'Выбранные адресаты не перенесены.'");
			Возврат;
		КонецЕсли;
		
		ТекстВопроса = НСтр("ru = 'Перенести отмеченных адресатов?'");
		
		Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемПереносПредложен", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да, НСтр("ru = 'Адресная книга'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	СохранитьНастройкиОтборов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиВСкрытуюКопиюИзКопии(Команда)
	
	СтрокаДляПереноса = Элементы.ВыбранныеАдресатыКопия.ТекущиеДанные;
	
	ТекущаяТаблицаПолучателей = ВыбранныеАдресатыКопия;
	ТаблицаДляПереноса = ВыбранныеАдресатыСкрытаяКопия;
	
	НоваяСтрока = ТаблицаДляПереноса.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДляПереноса);
	
	ТекущаяТаблицаПолучателей.Удалить(ТекущаяТаблицаПолучателей.Индекс(СтрокаДляПереноса));
	ТекущийТипПолучателя = Элементы.ТипПолучателя.СписокВыбора.НайтиПоЗначению(ЗначениеСкрытаяКопия);
	ВыбраноКому = ТаблицаДляПереноса.НайтиСтроки(Новый Структура("Выбран", Истина));
	
	ТекущийТипПолучателя.Представление = СтрШаблон(НСтр("ru = 'Скрытая копия (%1)'"),
		ВыбраноКому.Количество()); 
		
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтборы(Команда)
	
	ИмяРеквизитаСписка = "Список";
	ИмяТЧДанныеМеток = "ДанныеМеток";
	ИмяТЧДанныеОтборов = "ДанныеОтборов";
	ИмяГруппыОтборов = "ГруппаОтборы";
	ИмяПредопределенныеОтборыПоУмолчанию = "ПредопределенныеОтборыПоУмолчанию";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРеквизитаСписка", ИмяРеквизитаСписка);
	ДополнительныеПараметры.Вставить("ИмяТЧДанныеМеток", ИмяТЧДанныеМеток);
	ДополнительныеПараметры.Вставить("ИмяТЧДанныеОтборов", ИмяТЧДанныеОтборов);
	ДополнительныеПараметры.Вставить("ИмяГруппыОтборов", ИмяГруппыОтборов);
	ДополнительныеПараметры.Вставить("ИмяПредопределенныеОтборыПоУмолчанию", ИмяПредопределенныеОтборыПоУмолчанию);
	
	РаботаСОтборамиКлиент.НастроитьОтборыНажатие(ЭтотОбъект, ПараметрыОткрытияФормыСНастройкамиОтборов(ДополнительныеПараметры), ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьВсеОтборы(Команда)
	РаботаСОтборамиКлиент.СброситьОтборПоПериоду(ЭтотОбъект, "Список", "ДатаСоздания");
	СброситьВсеМеткиОтбораНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВВыбранные(Команда)
	
	ВыделенныеАдресаты = Элементы.Список.ВыделенныеСтроки;
	Если ВыделенныеАдресаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ПеренестиВВыбранныеСервер(ВыделенныеАдресаты);
	ВыбранныйМассив = ВыбранныеАдресатыКому.НайтиСтроки(Новый Структура("КонтактCRM", ВыделенныеАдресаты[0]));
	
	Если ВыбранныйМассив.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныеАдресатыКому.Индекс(ВыбранныйМассив[0]) <> -1 Тогда
		Элементы.ВыбранныеАдресатыКому.ТекущаяСтрока = ВыбранныеАдресатыКому.Индекс(ВыбранныйМассив[0]);
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПеренестиВсехВВыбранные(Команда)
	
	ПеренестиВсехВВыбранныеСервер(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВОбщуюГруппу(Команда)
		
	Отбор = Новый Структура;
	Отбор.Вставить("Доступ", ПредопределенноеЗначение("Перечисление.ВидыДоступовГруппАдреснойКниги.ОбщаяГруппа"));
	
	ВыбранныеАдресаты = Элементы.Список.ВыделенныеСтроки;
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьВыборГруппыАдреснойКниги", ЭтотОбъект, ВыбранныеАдресаты);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);

	ОткрытьФорму("Справочник.ГруппыАдреснойКниги.Форма.ФормаСписка", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьИзГруппы(Команда)
	
	ВыбранныеАдресаты = Элементы.Список.ВыделенныеСтроки;
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИсключениеИЗГруппыАдреснойКниги", 
		ЭтотОбъект, 
		ВыбранныеАдресаты);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыбранныеАдресаты", ВыбранныеАдресаты);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);

	ОткрытьФорму("Справочник.ГруппыАдреснойКниги.Форма.ФормаСписка", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеАдресатыКомуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОбработатьПереходПоСсылкеВСписке(Элемент, Поле, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеАдресатыКопияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОбработатьПереходПоСсылкеВСписке(Элемент, Поле, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеАдресатыСкрытаяКопияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОбработатьПереходПоСсылкеВСписке(Элемент, Поле, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсехАдресатов(Команда)
	
	УстановитьСнятьПометкиАдресатам("Все", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсехКонтрагентов(Команда)
	
	УстановитьСнятьПометкиАдресатам("Контрагенты", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеКонтакты(Команда)
	
	УстановитьСнятьПометкиАдресатам("Контакты", Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсехЛидов(Команда)
	
	УстановитьСнятьПометкиАдресатам("Лиды", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсехФизЛиц(Команда)
	
	УстановитьСнятьПометкиАдресатам("ФизЛица", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкиСоВсехАдресатов(Команда)
	
	УстановитьСнятьПометкиАдресатам("Все", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкиСоВсехКонтактов(Команда)
	
	УстановитьСнятьПометкиАдресатам("Контакты", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкиСоВсехКонтрагентов(Команда)
	
	УстановитьСнятьПометкиАдресатам("Контрагенты", Ложь); 
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкиСоВсехЛидов(Команда)
	
	УстановитьСнятьПометкиАдресатам("Лиды", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкиСоВсехФизЛиц(Команда)
	
	УстановитьСнятьПометкиАдресатам("ФизЛица", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНезаполненные(Команда)
	
	ОчиститьНезаполненныеСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВМоюГруппу(Команда)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Доступ", ПредопределенноеЗначение("Перечисление.ВидыДоступовГруппАдреснойКниги.МояГруппа"));
	
	ВыбранныеАдресаты = Элементы.Список.ВыделенныеСтроки;
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьВыборГруппыАдреснойКниги", ЭтотОбъект, ВыбранныеАдресаты);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Справочник.ГруппыАдреснойКниги.Форма.ФормаСписка", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВыбранныхАдресатов(Команда)
	ОчиститьВыбранныхАдресатовСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВКомуИзКопии(Команда)
	
	СтрокаДляПереноса = Элементы.ВыбранныеАдресатыКопия.ТекущиеДанные;
	
	ТекущаяТаблицаПолучателей = ВыбранныеАдресатыКопия;
	ТаблицаДляПереноса = ВыбранныеАдресатыКому;
	
	НоваяСтрока = ТаблицаДляПереноса.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДляПереноса);
	
	ТекущаяТаблицаПолучателей.Удалить(ТекущаяТаблицаПолучателей.Индекс(СтрокаДляПереноса));
	ТекущийТипПолучателя = Элементы.ТипПолучателя.СписокВыбора.НайтиПоЗначению(ЗначениеКому);
	ВыбраноКому = ТаблицаДляПереноса.НайтиСтроки(Новый Структура("Выбран", Истина));
	
	ТекущийТипПолучателя.Представление = СтрШаблон(НСтр("ru = 'Кому (%1)'"),
		ВыбраноКому.Количество());
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВКопиюИзСкрытойКопии(Команда)
	
	СтрокаДляПереноса = Элементы.ВыбранныеАдресатыСкрытаяКопия.ТекущиеДанные;
	
	ТекущаяТаблицаПолучателей = ВыбранныеАдресатыСкрытаяКопия;
	ТаблицаДляПереноса = ВыбранныеАдресатыКопия;
	
	НоваяСтрока = ТаблицаДляПереноса.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДляПереноса);
	
	ТекущаяТаблицаПолучателей.Удалить(ТекущаяТаблицаПолучателей.Индекс(СтрокаДляПереноса));
	ТекущийТипПолучателя = Элементы.ТипПолучателя.СписокВыбора.НайтиПоЗначению(ЗначениеКопия);
	ВыбраноКому = ТаблицаДляПереноса.НайтиСтроки(Новый Структура("Выбран", Истина));
	
	ТекущийТипПолучателя.Представление = СтрШаблон(НСтр("ru = 'Копия (%1)'"),
		ВыбраноКому.Количество());
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	АдресВХранилище = АдресВыбранныхАдресатовВоВременномХранилище();
	Закрыть(АдресВХранилище);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВКопиюИзКому(Команда)
	
	СтрокаДляПереноса = Элементы.ВыбранныеАдресатыКому.ТекущиеДанные;
	
	ТекущаяТаблицаПолучателей = ВыбранныеАдресатыКому;
	ТаблицаДляПереноса = ВыбранныеАдресатыКопия;
	
	НоваяСтрока = ТаблицаДляПереноса.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДляПереноса);
	
	ТекущаяТаблицаПолучателей.Удалить(ТекущаяТаблицаПолучателей.Индекс(СтрокаДляПереноса));
	ТекущийТипПолучателя = Элементы.ТипПолучателя.СписокВыбора.НайтиПоЗначению(ЗначениеКопия);
	ВыбраноКому = ТаблицаДляПереноса.НайтиСтроки(Новый Структура("Выбран", Истина));
	
	ТекущийТипПолучателя.Представление = СтрШаблон(НСтр("ru = 'Копия (%1)'"),
		ВыбраноКому.Количество());
		
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВСкрытуюКопиюИзКому(Команда)
	
	СтрокаДляПереноса = Элементы.ВыбранныеАдресатыКому.ТекущиеДанные;
	
	ТекущаяТаблицаПолучателей = ВыбранныеАдресатыКому;
	ТаблицаДляПереноса = ВыбранныеАдресатыСкрытаяКопия;
	
	НоваяСтрока = ТаблицаДляПереноса.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДляПереноса);
	
	ТекущаяТаблицаПолучателей.Удалить(ТекущаяТаблицаПолучателей.Индекс(СтрокаДляПереноса));
	ТекущийТипПолучателя = Элементы.ТипПолучателя.СписокВыбора.НайтиПоЗначению(ЗначениеСкрытаяКопия);
	ВыбраноКому = ТаблицаДляПереноса.НайтиСтроки(Новый Структура("Выбран", Истина));
	
	ТекущийТипПолучателя.Представление = СтрШаблон(НСтр("ru = 'Скрытая копия (%1)'"),
		ВыбраноКому.Количество());
		
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВКомуИзСкрытойКопии(Команда)
	
	СтрокаДляПереноса = Элементы.ВыбранныеАдресатыСкрытаяКопия.ТекущиеДанные;
	
	ТекущаяТаблицаПолучателей = ВыбранныеАдресатыСкрытаяКопия;
	ТаблицаДляПереноса = ВыбранныеАдресатыКому;
	
	НоваяСтрока = ТаблицаДляПереноса.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДляПереноса);
	
	ТекущаяТаблицаПолучателей.Удалить(ТекущаяТаблицаПолучателей.Индекс(СтрокаДляПереноса));
	ТекущийТипПолучателя = Элементы.ТипПолучателя.СписокВыбора.НайтиПоЗначению(ЗначениеКому);
	ВыбраноКому = ТаблицаДляПереноса.НайтиСтроки(Новый Структура("Выбран", Истина));
	
	ТекущийТипПолучателя.Представление = СтрШаблон(НСтр("ru = 'Кому (%1)'"),
		ВыбраноКому.Количество());
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура ИерархияИзменить(Команда)
	
	Если Элементы.ОтборИерархия.ТекущиеДанные = Неопределено
		ИЛИ ТипЗнч(Элементы.ОтборИерархия.ТекущиеДанные.ГруппаКонтрагентов) <> Тип("СправочникСсылка.ГруппыАдреснойКниги")
		ИЛИ Не ЗначениеЗаполнено(Элементы.ОтборИерархия.ТекущиеДанные.ГруппаКонтрагентов) Тогда
		
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(Неопределено, Элементы.ОтборИерархия.ТекущиеДанные.ГруппаКонтрагентов);
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияСкопировать(Команда)
	
	Если Элементы.ОтборИерархия.ТекущиеДанные = Неопределено
		Или ТипЗнч(Элементы.ОтборИерархия.ТекущиеДанные.ГруппаКонтрагентов) <> Тип("СправочникСсылка.ГруппыАдреснойКниги")
		Или Не ЗначениеЗаполнено(Элементы.ОтборИерархия.ТекущиеДанные.ГруппаКонтрагентов) Тогда
		
		Возврат;
	КонецЕсли;
	 
	ОткрытьФорму("Справочник.ГруппыАдреснойКниги.ФормаОбъекта",
		Новый Структура("ЗначениеКопирования", Элементы.ОтборИерархия.ТекущиеДанные.ГруппаКонтрагентов),
		Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияУстановитьПометкуУдаления(Команда)
	
	Если Элементы.ОтборИерархия.ТекущиеДанные = Неопределено
		Или ТипЗнч(Элементы.ОтборИерархия.ТекущиеДанные.ГруппаКонтрагентов) <> Тип("СправочникСсылка.ГруппыАдреснойКниги")
		Или Не ЗначениеЗаполнено(Элементы.ОтборИерархия.ТекущиеДанные.ГруппаКонтрагентов) Тогда
		
		Возврат;
	КонецЕсли;
	
	ТекущаяГруппа = Элементы.ОтборИерархия.ТекущиеДанные.ГруппаКонтрагентов;
	ПометкаУдаления = ИзменитьПометкуУдаленияГруппыСервер(Элементы.ОтборИерархия.ТекущиеДанные.ПолучитьИдентификатор());
	
	ТекстОповещения = СтрШаблон(НСтр("ru='Пометка удаления %1'"),
		?(ПометкаУдаления, НСтр("ru='установлена'"), НСтр("ru='снята'")));
		
	ПоказатьОповещениеПользователя(
		ТекстОповещения,
		ПолучитьНавигационнуюСсылку(ТекущаяГруппа),
		ТекущаяГруппа,
		БиблиотекаКартинок.Информация32);
		
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияВключаяВложенные(Команда)
	
	Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Пометка = Не Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Пометка;
	УстановитьОтборПоИерархии();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыделенныеАдресаты = Элементы.Список.ВыделенныеСтроки;
	Если ВыделенныеАдресаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ПеренестиВВыбранныеСервер(ВыделенныеАдресаты);
	ВыбранныйМассив = ВыбранныеАдресатыКому.НайтиСтроки(Новый Структура("КонтактCRM", ВыделенныеАдресаты[0]));
	
	Если ВыбранныйМассив.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныеАдресатыКому.Индекс(ВыбранныйМассив[0]) <> -1 Тогда
		Элементы.ВыбранныеАдресатыКому.ТекущаяСтрока = ВыбранныеАдресатыКому.Индекс(ВыбранныйМассив[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПолучателяПриИзменении(Элемент)
	УстановитьТекущуюСтраницуПереключателя();
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ТекущийКонтакт = Элемент.ТекущиеДанные.Ссылка;
		Элементы.СписокКонтекстноеМенюИсключитьИзГруппы.Видимость = Элемент.ТекущиеДанные.Свойство("ЕстьГруппа")
			И Элемент.ТекущиеДанные.ЕстьГруппа;
	Иначе
		ТекущийКонтакт = Неопределено;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновитьКарточкуКонтакта", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИерархияПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ОтборИерархия.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	УстановитьОтборПоИерархии();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТегОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Теги.Тег", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтветственныйОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Ссылка.Ответственный", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСегментОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьОтборПоСегментамНаСервере(ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСОтборамиКлиент.ПредставлениеПериодаВыбратьПериод(ЭтотОбъект, "Список", "Ссылка.ДатаСоздания");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеАдресатыКомуВыбранПриИзменении(Элемент)
	ВыбраноКому = ВыбранныеАдресатыКому.НайтиСтроки(Новый Структура("Выбран", Истина));
	Элементы.ТипПолучателя.СписокВыбора[0].Представление = СтрШаблон(НСтр("ru = 'Кому (%1)'"), ВыбраноКому.Количество());
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеАдресатыКопияВыбранПриИзменении(Элемент)
	ВыбраноКому = ВыбранныеАдресатыКопия.НайтиСтроки(Новый Структура("Выбран", Истина));
	Элементы.ТипПолучателя.СписокВыбора[1].Представление = СтрШаблон(НСтр("ru = 'Копия (%1)'"), ВыбраноКому.Количество());
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеАдресатыСкрытаяКопияВыбранПриИзменении(Элемент)
	ВыбраноКому = ВыбранныеАдресатыСкрытаяКопия.НайтиСтроки(Новый Структура("Выбран", Истина));
	Элементы.ТипПолучателя.СписокВыбора[2].Представление = СтрШаблон(НСтр("ru = 'Скрытая копия (%1)'"), ВыбраноКому.Количество());
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если Лев(ДанныеСобытия.Href, 6) = "v8doc:" Тогда 
		СтандартнаяОбработка = Ложь;
		НавигационнаяСсылкаПоля = Сред(ДанныеСобытия.Href, 7);
		ПерейтиПоНавигационнойСсылке(НавигационнаяСсылкаПоля);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеАдресатыКомуПослеУдаления(Элемент)
	УстановитьТекущуюСтраницуПереключателя();
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеАдресатыКопияПослеУдаления(Элемент)
	УстановитьТекущуюСтраницуПереключателя();
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеАдресатыСкрытаяКопияПослеУдаления(Элемент)
	УстановитьТекущуюСтраницуПереключателя();
КонецПроцедуры

&НаКлиенте
Процедура ИерархияСоздатьГруппу(Команда)
	
	Если Элементы.ОтборИерархия.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ОткрытьФорму("Справочник.ГруппыАдреснойКниги.Форма.ФормаЭлемента",,Элементы.Список);
	
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПроверитьСоздатьГруппуИзбранное() 
	
	ГруппаСоздана = ХранилищеСистемныхНастроек.Загрузить("ГруппаИзбранноеСоздана", 
			"ГруппаИзбранноеСоздана_АдреснаяКнига");
	
	Если ГруппаСоздана <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаАдреснойКниги = Справочники.ГруппыАдреснойКниги.СоздатьЭлемент();
	ГруппаАдреснойКниги.Доступ = Перечисления.ВидыДоступовГруппАдреснойКниги.МояГруппа;
	ГруппаАдреснойКниги.Автор = Пользователи.ТекущийПользователь();
	ГруппаАдреснойКниги.Наименование = НСтр("ru = 'Избранное'");
	ГруппаАдреснойКниги.Записать();
	
	ХранилищеСистемныхНастроек.Сохранить("ГруппаИзбранноеСоздана", 
			"ГруппаИзбранноеСоздана_АдреснаяКнига",
			Истина);
			
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемПереносПредложен(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		АдресВХранилище = АдресВыбранныхАдресатовВоВременномХранилище();
		Закрыть(АдресВХранилище);
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		АдресВХранилище = "ЗакрытьБезПереноса";
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыбранныхКонтрагентов(знач Контрагенты, ВидыКонтрагентов)
	
	Если Контрагенты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаВыбранныхАдресатов = ТекущаяТаблицаПолучателей();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	КонтрагентыКонтактнаяИнформация.Вид КАК Вид,
	|	КонтрагентыКонтактнаяИнформация.Представление КАК Представление,
	|	3 КАК ИндексКартинки,
	|	КонтрагентыКонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК Порядок
	|ПОМЕСТИТЬ втКИКонтрагентов
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Ссылка В ИЕРАРХИИ(&Контрагенты)
	|	И КонтрагентыКонтактнаяИнформация.Тип В(&ТипыКИ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.Представление КАК КонтрагентПредставление,
	|	Контрагенты.КонтактноеЛицо КАК ОсновноеКонтактноеЛицо,
	|	ЕСТЬNULL(втКИКонтрагентов.Вид, НЕОПРЕДЕЛЕНО) КАК ВидКИ,
	|	ЕСТЬNULL(втКИКонтрагентов.Представление, """") КАК ЗначениеКИ,
	|	втКИКонтрагентов.ИндексКартинки КАК ИндексКартинки,
	|	Контрагенты.ДатаСоздания КАК ДатаСоздания
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКИКонтрагентов КАК втКИКонтрагентов
	|		ПО Контрагенты.Ссылка = втКИКонтрагентов.Ссылка
	|ГДЕ
	|	Контрагенты.Ссылка В ИЕРАРХИИ(&Контрагенты)
	|	И Контрагенты.ЭтоГруппа = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтрагентПредставление,
	|	втКИКонтрагентов.Порядок
	|ИТОГИ
	|	МАКСИМУМ(ОсновноеКонтактноеЛицо)
	|ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактныеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	КонтактныеЛицаКонтактнаяИнформация.Вид КАК Вид,
	|	КонтактныеЛицаКонтактнаяИнформация.Представление КАК Представление,
	|	ВЫБОР
	|		КОГДА КонтактныеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			ТОГДА 0
	|		КОГДА КонтактныеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ТОГДА 3
	|		КОГДА КонтактныеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|			ТОГДА 0
	|	КОНЕЦ КАК ИндексКартинки,
	|	КонтактныеЛицаКонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК Порядок
	|ПОМЕСТИТЬ втКИКонтактныхЛиц
	|ИЗ
	|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних КАК СвязиКонтрагентКонтакт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
	|		ПО СвязиКонтрагентКонтакт.Контакт = КонтактныеЛицаКонтактнаяИнформация.Ссылка
	|ГДЕ
	|	СвязиКонтрагентКонтакт.Контрагент В ИЕРАРХИИ(&Контрагенты)
	|	И КонтактныеЛицаКонтактнаяИнформация.Тип В(&ТипыКИ)
	|	И СвязиКонтрагентКонтакт.СвязьНедействительна = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СвязиКонтрагентКонтакт.Контрагент КАК Контрагент,
	|	КонтактныеЛица.Ссылка КАК КонтактноеЛицо,
	|	КонтактныеЛица.Представление КАК КонтактноеЛицоПредставление,
	|	ЕСТЬNULL(втКИКонтактныхЛиц.Вид, НЕОПРЕДЕЛЕНО) КАК ВидКИ,
	|	ЕСТЬNULL(втКИКонтактныхЛиц.Представление, """") КАК ЗначениеКИ,
	|	втКИКонтактныхЛиц.ИндексКартинки КАК ИндексКартинки
	|ИЗ
	|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних КАК СвязиКонтрагентКонтакт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица КАК КонтактныеЛица
	|		ПО СвязиКонтрагентКонтакт.Контакт = КонтактныеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКИКонтактныхЛиц КАК втКИКонтактныхЛиц
	|		ПО (КонтактныеЛица.Ссылка = втКИКонтактныхЛиц.Ссылка)
	|ГДЕ
	|	СвязиКонтрагентКонтакт.Контрагент В ИЕРАРХИИ(&Контрагенты)
	|	И КонтактныеЛица.ПометкаУдаления = ЛОЖЬ
	|	И СвязиКонтрагентКонтакт.СвязьНедействительна = ЛОЖЬ
	|	И КонтактныеЛица.Недействителен = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтактноеЛицоПредставление,
	|	втКИКонтактныхЛиц.Порядок
	|ИТОГИ
	|	МАКСИМУМ(Контрагент)
	|ПО
	|	КонтактноеЛицо";
	
	Запрос.УстановитьПараметр("Контрагенты", Контрагенты);
	Запрос.УстановитьПараметр("ТипыКИ", Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ВыборкаКонтрагентов = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаКонтактныхЛиц = МассивРезультатов[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Отбор = Новый Структура("Контрагент");
	
	Пока ВыборкаКонтрагентов.Следующий() Цикл
		
		ДобавлениеПервойСтроки = Ложь;
		ВыборкаКИ_Контрагентов = ВыборкаКонтрагентов.Выбрать();
		ЕстьВыбранныйАдресат = Ложь;
		ЕстьВыбранныйКонтакт = Ложь;
		
		Пока ВыборкаКИ_Контрагентов.Следующий() Цикл
			
			ОтборКИ = Новый Структура("КонтактCRM, АдресатПисьма", ВыборкаКонтрагентов.Контрагент, 
				ВыборкаКИ_Контрагентов.ЗначениеКИ);
			АдресатЕстьВТаблице = ТаблицаВыбранныхАдресатов.НайтиСтроки(ОтборКИ);
			
			Если АдресатЕстьВТаблице.Количество() <> 0 Тогда
				АдресатЕстьВТаблице[0].Выбран = ЗначениеЗаполнено(ВыборкаКИ_Контрагентов.ЗначениеКИ_);
				АдресатЕстьВТаблице[0].СвязьCRM = Неопределено;
				Продолжить;
			КонецЕсли;
			
			СтрокаКИКонтрагент = ТаблицаВыбранныхАдресатов.Добавить();
			СтрокаКИКонтрагент.Выбран = ЗначениеЗаполнено(ВыборкаКИ_Контрагентов.ЗначениеКИ);
			СтрокаКИКонтрагент.КонтактCRM = ВыборкаКонтрагентов.Контрагент;
			СтрокаКИКонтрагент.ПредставлениеКонтакта = Строка(ВыборкаКонтрагентов.Контрагент);
			СтрокаКИКонтрагент.АдресатПисьма = ВыборкаКИ_Контрагентов.ЗначениеКИ;
			СтрокаКИКонтрагент.АдресатКИ = ВыборкаКИ_Контрагентов.ЗначениеКИ;
			СтрокаКИКонтрагент.КартинкаКонтакта = КартинкаУчастникаПоТипуКонтакта(ВыборкаКонтрагентов.Контрагент, 
				ВидыКонтрагентов);
				
			Если НЕ ЕстьВыбранныйАдресат Тогда
				ЕстьВыбранныйАдресат = Истина;
			КонецЕсли;
				
		КонецЦикла;
		
		ВыборкаКИ_Контрагентов.Сбросить();
			
		ВыборкаКонтактныхЛиц.Сбросить();
		Отбор.Контрагент = ВыборкаКонтрагентов.Контрагент;
		Пока ВыборкаКонтактныхЛиц.НайтиСледующий(Отбор) Цикл
					
			ВыборкаКИ_КонтактныхЛиц = ВыборкаКонтактныхЛиц.Выбрать();
			Пока ВыборкаКИ_КонтактныхЛиц.Следующий() Цикл
				
				Если ВыборкаКИ_КонтактныхЛиц.ВидКИ = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ОтборКИ = Новый Структура("КонтактCRM, АдресатПисьма", 
					ВыборкаКонтактныхЛиц.КонтактноеЛицо, ВыборкаКИ_КонтактныхЛиц.ЗначениеКИ);
				АдресатЕстьВТаблице = ТаблицаВыбранныхАдресатов.НайтиСтроки(ОтборКИ);
				
				Если АдресатЕстьВТаблице.Количество() <> 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаКИКонтакт = ТаблицаВыбранныхАдресатов.Добавить();
				СтрокаКИКонтакт.Выбран = ЕстьВыбранныйКонтакт;
				СтрокаКИКонтакт.КонтактCRM = ВыборкаКонтактныхЛиц.КонтактноеЛицо;
				СтрокаКИКонтакт.ПредставлениеКонтакта = Строка(ВыборкаКонтактныхЛиц.КонтактноеЛицо);
				СтрокаКИКонтакт.АдресатПисьма = ВыборкаКИ_КонтактныхЛиц.ЗначениеКИ;
				СтрокаКИКонтакт.АдресатКИ = ВыборкаКИ_КонтактныхЛиц.ЗначениеКИ;
				СтрокаКИКонтакт.СвязьCRM = ВыборкаКонтрагентов.Контрагент;
				СтрокаКИКонтакт.КартинкаКонтакта = 4;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыбранныхКонтактов(знач Контакты)
	
	Если Контакты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаВыбранныхАдресатов = ТекущаяТаблицаПолучателей();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактныеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	КонтактныеЛицаКонтактнаяИнформация.Вид КАК Вид,
	|	КонтактныеЛицаКонтактнаяИнформация.Представление КАК Представление,
	|	ВЫБОР
	|		КОГДА КонтактныеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			ТОГДА 0
	|		КОГДА КонтактныеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ТОГДА 3
	|		КОГДА КонтактныеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|			ТОГДА 0
	|	КОНЕЦ КАК ИндексКартинки,
	|	КонтактныеЛицаКонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК Порядок
	|ПОМЕСТИТЬ втКИКонтактов
	|ИЗ
	|	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
	|ГДЕ
	|	КонтактныеЛицаКонтактнаяИнформация.Ссылка В ИЕРАРХИИ(&Контакты)
	|	И КонтактныеЛицаКонтактнаяИнформация.Тип В(&ТипыКИ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтактныеЛица.Ссылка КАК Контакт,
	|	КонтактныеЛица.Представление КАК КонтактПредставление,
	|	ЕСТЬNULL(втКИКонтактов.Вид, НЕОПРЕДЕЛЕНО) КАК ВидКИ,
	|	ЕСТЬNULL(втКИКонтактов.Представление, """") КАК ЗначениеКИ,
	|	втКИКонтактов.ИндексКартинки КАК ИндексКартинки,
	|	КонтактныеЛица.ДатаСоздания КАК ДатаСоздания
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКИКонтактов КАК втКИКонтактов
	|		ПО КонтактныеЛица.Ссылка = втКИКонтактов.Ссылка
	|ГДЕ
	|	КонтактныеЛица.Ссылка В ИЕРАРХИИ(&Контакты)
	|	И КонтактныеЛица.ЭтоГруппа = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтактПредставление,
	|	втКИКонтактов.Порядок
	|ИТОГИ ПО
	|	Контакт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтрагентыЛицаКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	КонтрагентыЛицаКонтактнаяИнформация.Вид КАК Вид,
	|	КонтрагентыЛицаКонтактнаяИнформация.Представление КАК Представление,
	|	ВЫБОР
	|		КОГДА КонтрагентыЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			ТОГДА 0
	|		КОГДА КонтрагентыЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ТОГДА 3
	|		КОГДА КонтрагентыЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|			ТОГДА 0
	|	КОНЕЦ КАК ИндексКартинки,
	|	КонтрагентыЛицаКонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК Порядок,
	|	ВЫБОР
	|		КОГДА КонтрагентыЛицаКонтактнаяИнформация.Ссылка.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.ФизическоеЛицо)
	|			ТОГДА 3
	|		КОГДА КонтрагентыЛицаКонтактнаяИнформация.Ссылка.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.ИндивидуальныйПредприниматель)
	|			ТОГДА 3
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК КартинкаКонтакта
	|ПОМЕСТИТЬ втКИКонтрагентов
	|ИЗ
	|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних КАК СвязиКонтрагентКонтакт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыЛицаКонтактнаяИнформация
	|		ПО СвязиКонтрагентКонтакт.Контрагент = КонтрагентыЛицаКонтактнаяИнформация.Ссылка
	|ГДЕ
	|	СвязиКонтрагентКонтакт.Контакт В ИЕРАРХИИ(&Контакты)
	|	И КонтрагентыЛицаКонтактнаяИнформация.Тип В(&ТипыКИ)
	|	И СвязиКонтрагентКонтакт.СвязьНедействительна = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СвязиКонтрагентКонтакт.Контакт КАК Контакт,
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.Представление КАК КонтрагентПредставление,
	|	ЕСТЬNULL(втКИКонтрагентов.Вид, НЕОПРЕДЕЛЕНО) КАК ВидКИ,
	|	ЕСТЬNULL(втКИКонтрагентов.Представление, """") КАК ЗначениеКИ,
	|	втКИКонтрагентов.ИндексКартинки КАК ИндексКартинки,
	|	втКИКонтрагентов.КартинкаКонтакта КАК КартинкаКонтакта
	|ИЗ
	|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних КАК СвязиКонтрагентКонтакт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО СвязиКонтрагентКонтакт.Контрагент = Контрагенты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКИКонтрагентов КАК втКИКонтрагентов
	|		ПО (Контрагенты.Ссылка = втКИКонтрагентов.Ссылка)
	|ГДЕ
	|	СвязиКонтрагентКонтакт.Контакт В ИЕРАРХИИ(&Контакты)
	|	И Контрагенты.ПометкаУдаления = ЛОЖЬ
	|	И СвязиКонтрагентКонтакт.СвязьНедействительна = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтрагентПредставление,
	|	втКИКонтрагентов.Порядок
	|ИТОГИ
	|	МАКСИМУМ(Контакт)
	|ПО
	|	Контрагент";
	
	Запрос.УстановитьПараметр("Контакты", Контакты);
	Запрос.УстановитьПараметр("ТипыКИ", Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ВыборкаКонтактов = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаКонтрагентов = МассивРезультатов[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Отбор = Новый Структура("Контакт");
	
	Пока ВыборкаКонтактов.Следующий() Цикл
		
		ЕстьВыбранныйАдресат = Ложь;
		ЕстьВыбранныйКонтакт = Ложь;

		ВыборкаКИ_Контактов = ВыборкаКонтактов.Выбрать();
		Пока ВыборкаКИ_Контактов.Следующий() Цикл
			
			ОтборКИ = Новый Структура("КонтактCRM, АдресатПисьма", ВыборкаКонтактов.Контакт, 
				ВыборкаКИ_Контактов.ЗначениеКИ);
			АдресатЕстьВТаблице = ТаблицаВыбранныхАдресатов.НайтиСтроки(ОтборКИ);
			
			Если АдресатЕстьВТаблице.Количество() <> 0 Тогда
				АдресатЕстьВТаблице[0].Выбран = Истина;
				АдресатЕстьВТаблице[0].СвязьCRM = Неопределено;
				Продолжить;
			КонецЕсли;

			Если НЕ ЕстьВыбранныйАдресат Тогда
				ЕстьВыбранныйАдресат = Истина;
			КонецЕсли;
			
			СтрокаКИКонтакт = ТаблицаВыбранныхАдресатов.Добавить();
			СтрокаКИКонтакт.Выбран = Истина;
			СтрокаКИКонтакт.КонтактCRM = ВыборкаКонтактов.Контакт;
			СтрокаКИКонтакт.ПредставлениеКонтакта = Строка(ВыборкаКонтактов.Контакт);
			СтрокаКИКонтакт.АдресатПисьма = ВыборкаКИ_Контактов.ЗначениеКИ;
			СтрокаКИКонтакт.АдресатКИ = ВыборкаКИ_Контактов.ЗначениеКИ;
			СтрокаКИКонтакт.КартинкаКонтакта = 4;
			СтрокаКИКонтакт.Выбран = ЗначениеЗаполнено(ВыборкаКИ_Контактов.ЗначениеКИ);
			
		КонецЦикла;	
				
		ВыборкаКонтрагентов.Сбросить();
		Отбор.Контакт = ВыборкаКонтактов.Контакт;
		Пока ВыборкаКонтрагентов.НайтиСледующий(Отбор) Цикл
					
			ВыборкаКИ_Контрагентов = ВыборкаКонтрагентов.Выбрать();
			Пока ВыборкаКИ_Контрагентов.Следующий() Цикл
				
				Если ВыборкаКИ_Контрагентов.ВидКИ = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ОтборКИ = Новый Структура("КонтактCRM, АдресатПисьма", 
					ВыборкаКонтрагентов.Контрагент, ВыборкаКИ_Контрагентов.ЗначениеКИ);
				АдресатЕстьВТаблице = ТаблицаВыбранныхАдресатов.НайтиСтроки(ОтборКИ);
				
				СтрокаКИКонтакт = ТаблицаВыбранныхАдресатов.Добавить();
				СтрокаКИКонтакт.Выбран = ЕстьВыбранныйКонтакт;
				СтрокаКИКонтакт.КонтактCRM = ВыборкаКонтрагентов.Контрагент;
				СтрокаКИКонтакт.ПредставлениеКонтакта = Строка(ВыборкаКонтрагентов.Контрагент);
				СтрокаКИКонтакт.АдресатПисьма = ВыборкаКИ_Контрагентов.ЗначениеКИ;
				СтрокаКИКонтакт.АдресатКИ = ВыборкаКИ_Контрагентов.ЗначениеКИ;
				СтрокаКИКонтакт.СвязьCRM = ВыборкаКонтактов.Контакт;
				СтрокаКИКонтакт.КартинкаКонтакта = ВыборкаКИ_Контрагентов.КартинкаКонтакта;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыбранныхЛидов(знач Лиды)
	
	Если Лиды.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаВыбранныхАдресатов = ТекущаяТаблицаПолучателей();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛидыКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	ЛидыКонтактнаяИнформация.Вид КАК Вид,
	|	ЛидыКонтактнаяИнформация.Представление КАК Представление,
	|	ВЫБОР
	|		КОГДА ЛидыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			ТОГДА 0
	|		КОГДА ЛидыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ТОГДА 3
	|		КОГДА ЛидыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|			ТОГДА 0
	|	КОНЕЦ КАК ИндексКартинки,
	|	ЛидыКонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК Порядок
	|ПОМЕСТИТЬ втКИЛидов
	|ИЗ
	|	Справочник.Лиды.КонтактнаяИнформация КАК ЛидыКонтактнаяИнформация
	|ГДЕ
	|	ЛидыКонтактнаяИнформация.Ссылка В ИЕРАРХИИ(&Лиды)
	|	И ЛидыКонтактнаяИнформация.Тип В(&ТипыКИ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Лиды.Ссылка КАК Лид,
	|	Лиды.Представление КАК ЛидПредставление,
	|	ЕСТЬNULL(втКИЛидов.Вид, НЕОПРЕДЕЛЕНО) КАК ВидКИ,
	|	ЕСТЬNULL(втКИЛидов.Представление, """") КАК ЗначениеКИ,
	|	втКИЛидов.ИндексКартинки КАК ИндексКартинки,
	|	Лиды.ДатаСоздания КАК ДатаСоздания
	|ИЗ
	|	Справочник.Лиды КАК Лиды
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКИЛидов КАК втКИЛидов
	|		ПО Лиды.Ссылка = втКИЛидов.Ссылка
	|ГДЕ
	|	Лиды.Ссылка В ИЕРАРХИИ(&Лиды)
	|	И Лиды.ЭтоГруппа = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛидПредставление,
	|	втКИЛидов.Порядок
	|ИТОГИ ПО
	|	Лид
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактыЛидовКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	КонтактыЛидовКонтактнаяИнформация.Вид КАК Вид,
	|	КонтактыЛидовКонтактнаяИнформация.Представление КАК Представление,
	|	ВЫБОР
	|		КОГДА КонтактыЛидовКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			ТОГДА 0
	|		КОГДА КонтактыЛидовКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ТОГДА 3
	|		КОГДА КонтактыЛидовКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|			ТОГДА 0
	|	КОНЕЦ КАК ИндексКартинки,
	|	КонтактыЛидовКонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК Порядок
	|ПОМЕСТИТЬ втКИКонтактовЛида
	|ИЗ
	|	Справочник.Лиды КАК Лиды
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактыЛидов КАК КонтактыЛидов
	|		ПО (КонтактыЛидов.Владелец = Лиды.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактыЛидов.КонтактнаяИнформация КАК КонтактыЛидовКонтактнаяИнформация
	|		ПО (КонтактыЛидов.Ссылка = КонтактыЛидовКонтактнаяИнформация.Ссылка)
	|ГДЕ
	|	Лиды.Ссылка В ИЕРАРХИИ(&Лиды)
	|	И КонтактыЛидовКонтактнаяИнформация.Тип  = &ТипыКИ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Лиды.Ссылка КАК Лид,
	|	КонтактыЛидов.Ссылка КАК КонтактЛида,
	|	КонтактыЛидов.Представление КАК КонтактЛидаПредставление,
	|	ЕСТЬNULL(втКИКонтактовЛида.Вид, НЕОПРЕДЕЛЕНО) КАК ВидКИ,
	|	ЕСТЬNULL(втКИКонтактовЛида.Представление, """") КАК ЗначениеКИ,
	|	втКИКонтактовЛида.ИндексКартинки КАК ИндексКартинки,
	|	втКИКонтактовЛида.Порядок КАК Порядок
	|ИЗ
	|	Справочник.Лиды КАК Лиды
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактыЛидов КАК КонтактыЛидов
	|		ПО (КонтактыЛидов.Владелец = Лиды.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКИКонтактовЛида КАК втКИКонтактовЛида
	|		ПО (КонтактыЛидов.Ссылка = втКИКонтактовЛида.Ссылка)
	|ГДЕ
	|	Лиды.Ссылка В ИЕРАРХИИ(&Лиды)
	|	И КонтактыЛидов.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтактЛидаПредставление,
	|	втКИКонтактовЛида.Порядок
	|ИТОГИ ПО
	|	Лид";
	
	Запрос.УстановитьПараметр("Лиды", Лиды);
	Запрос.УстановитьПараметр("ТипыКИ", ТипКИ);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ВыборкаЛидов = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаКонтактовЛидов = МассивРезультатов[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Отбор = Новый Структура("Лид");
	
	Пока ВыборкаЛидов.Следующий() Цикл
		
		ЕстьВыбранныйАдресат = Ложь;
		ЕстьВыбранныйКонтакт = Ложь;

		ВыборкаКИ_Лидов = ВыборкаЛидов.Выбрать();
		Пока ВыборкаКИ_Лидов.Следующий() Цикл
			
			ОтборКИ = Новый Структура("КонтактCRM, АдресатПисьма", ВыборкаЛидов.Лид, 
				ВыборкаКИ_Лидов.ЗначениеКИ);
			АдресатЕстьВТаблице = ТаблицаВыбранныхАдресатов.НайтиСтроки(ОтборКИ);
			
			Если АдресатЕстьВТаблице.Количество() <> 0 Тогда
				АдресатЕстьВТаблице[0].Выбран = Истина;
				АдресатЕстьВТаблице[0].СвязьCRM = Неопределено;
				Продолжить;
			КонецЕсли;

			Если НЕ ЕстьВыбранныйАдресат Тогда
				ЕстьВыбранныйАдресат = Истина;
			КонецЕсли;
			
			СтрокаКИКонтакт = ТаблицаВыбранныхАдресатов.Добавить();
			СтрокаКИКонтакт.Выбран = Истина;
			СтрокаКИКонтакт.КонтактCRM = ВыборкаЛидов.Лид;
			СтрокаКИКонтакт.ПредставлениеКонтакта = Строка(ВыборкаЛидов.Лид);
			СтрокаКИКонтакт.АдресатПисьма = ВыборкаКИ_Лидов.ЗначениеКИ;
			СтрокаКИКонтакт.АдресатКИ = ВыборкаКИ_Лидов.ЗначениеКИ;
			СтрокаКИКонтакт.КартинкаКонтакта = 1;
			СтрокаКИКонтакт.Выбран = ЗначениеЗаполнено(ВыборкаКИ_Лидов.ЗначениеКИ);
			
		КонецЦикла;	
				
		ВыборкаКонтактовЛидов.Сбросить();
		Отбор.Лид = ВыборкаЛидов.Лид;
		Пока ВыборкаКонтактовЛидов.НайтиСледующий(Отбор) Цикл
					
			ВыборкаКИ_КонтактаЛида = ВыборкаКонтактовЛидов.Выбрать();
			Пока ВыборкаКИ_КонтактаЛида.Следующий() Цикл
				
				Если ВыборкаКИ_КонтактаЛида.ВидКИ = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ОтборКИ = Новый Структура("КонтактCRM, АдресатПисьма", 
					ВыборкаКИ_КонтактаЛида.КонтактЛида, ВыборкаКИ_КонтактаЛида.ЗначениеКИ);
				АдресатЕстьВТаблице = ТаблицаВыбранныхАдресатов.НайтиСтроки(ОтборКИ);
				
				СтрокаКИКонтакт = ТаблицаВыбранныхАдресатов.Добавить();
				СтрокаКИКонтакт.Выбран = ЕстьВыбранныйКонтакт;
				СтрокаКИКонтакт.КонтактCRM = ВыборкаКИ_КонтактаЛида.КонтактЛида;
				СтрокаКИКонтакт.ПредставлениеКонтакта = Строка(ВыборкаКИ_КонтактаЛида.КонтактЛида);
				СтрокаКИКонтакт.АдресатПисьма = ВыборкаКИ_КонтактаЛида.ЗначениеКИ;
				СтрокаКИКонтакт.АдресатКИ = ВыборкаКИ_КонтактаЛида.ЗначениеКИ;
				СтрокаКИКонтакт.СвязьCRM = ВыборкаЛидов.Лид;
				СтрокаКИКонтакт.КартинкаКонтакта = 1;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыбранныхФизЛиц(знач ФизЛица)
	
	Если ФизЛица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаВыбранныхАдресатов = ТекущаяТаблицаПолучателей();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизЛицаКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	ФизЛицаКонтактнаяИнформация.Вид КАК Вид,
	|	ФизЛицаКонтактнаяИнформация.Представление КАК Представление,
	|	ВЫБОР
	|		КОГДА ФизЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			ТОГДА 0
	|		КОГДА ФизЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ТОГДА 3
	|		КОГДА ФизЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|			ТОГДА 0
	|	КОНЕЦ КАК ИндексКартинки,
	|	ФизЛицаКонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК Порядок
	|ПОМЕСТИТЬ втКИФизЛиц
	|ИЗ
	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизЛицаКонтактнаяИнформация
	|ГДЕ
	|	ФизЛицаКонтактнаяИнформация.Ссылка В ИЕРАРХИИ(&ФизЛица)
	|	И ФизЛицаКонтактнаяИнформация.Тип = &ТипКИ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизЛица.Ссылка КАК ФизЛицо,
	|	ФизЛица.Представление КАК ФизЛицоПредставление,
	|	ЕСТЬNULL(втКИФизЛиц.Вид, НЕОПРЕДЕЛЕНО) КАК ВидКИ,
	|	ЕСТЬNULL(втКИФизЛиц.Представление, """") КАК ЗначениеКИ,
	|	втКИФизЛиц.ИндексКартинки КАК ИндексКартинки
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКИФизЛиц КАК втКИФизЛиц
	|		ПО ФизЛица.Ссылка = втКИФизЛиц.Ссылка
	|ГДЕ
	|	ФизЛица.Ссылка В ИЕРАРХИИ(&ФизЛица)
	|	И ФизЛица.ЭтоГруппа = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицоПредставление,
	|	втКИФизЛиц.Порядок
	|ИТОГИ ПО
	|	ФизЛицо";
	
	Запрос.УстановитьПараметр("ФизЛица", ФизЛица);
	Запрос.УстановитьПараметр("ТипКИ", ТипКИ);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ВыборкаФизЛиц = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаФизЛиц.Следующий() Цикл
		
		ВыборкаКИ_ФизЛиц = ВыборкаФизЛиц.Выбрать();
		
		Пока ВыборкаКИ_ФизЛиц.Следующий() Цикл
			
			Отбор = Новый Структура("КонтактCRM, АдресатПисьма", ВыборкаФизЛиц.ФизЛицо, 
				ВыборкаКИ_ФизЛиц.ЗначениеКИ);
			АдресатЕстьВТаблице = ТаблицаВыбранныхАдресатов.НайтиСтроки(Отбор);
			
			Если АдресатЕстьВТаблице.Количество() <> 0 Тогда
				АдресатЕстьВТаблице[0].Выбран = Истина;
				АдресатЕстьВТаблице[0].СвязьCRM = Неопределено;
				Продолжить;
			КонецЕсли;

			СтрокаКИКонтакт = ТаблицаВыбранныхАдресатов.Добавить();
			СтрокаКИКонтакт.Выбран = Истина;
			СтрокаКИКонтакт.КонтактCRM = ВыборкаФизЛиц.ФизЛицо;
			СтрокаКИКонтакт.ПредставлениеКонтакта = Строка(ВыборкаФизЛиц.ФизЛицо);
			СтрокаКИКонтакт.АдресатПисьма = ВыборкаКИ_ФизЛиц.ЗначениеКИ;
			СтрокаКИКонтакт.АдресатКИ = ВыборкаКИ_ФизЛиц.ЗначениеКИ;
			СтрокаКИКонтакт.КартинкаКонтакта = 6;
			СтрокаКИКонтакт.Выбран = ЗначениеЗаполнено(ВыборкаКИ_ФизЛиц.ЗначениеКИ);
			
		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборГруппыАдреснойКниги(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьВыборГруппыАдреснойКнигиСервер(Результат, ДополнительныеПараметры);
	ТекстОповещения = СтрШаблон(НСтр("ru='Добавление адресатов (%1)'"), ДополнительныеПараметры.Количество());
	
	ПоказатьОповещениеПользователя(
		ТекстОповещения,
		ПолучитьНавигационнуюСсылку(Результат),
		Результат,
		БиблиотекаКартинок.Информация32);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИсключениеИЗГруппыАдреснойКниги(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьИсключениеГруппыАдреснойКнигиСервер(Результат, ДополнительныеПараметры);
	ТекстОповещения = СтрШаблон(НСтр("ru='Исключение адресатов (%1)'"), ДополнительныеПараметры.Количество());
	
	ПоказатьОповещениеПользователя(
		ТекстОповещения,
		ПолучитьНавигационнуюСсылку(Результат),
		Результат,
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры
	
&НаСервере
Процедура ОбработатьИсключениеГруппыАдреснойКнигиСервер(Результат, ДополнительныеПараметры)
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) <> Тип("Массив") ИЛИ 
		ДополнительныеПараметры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Адресат Из ДополнительныеПараметры Цикл
		МенеджерЗаписи = РегистрыСведений.СоставыГруппАдреснойКниги.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ГруппаАдреснойКниги = Результат;
		МенеджерЗаписи.КонтактCRM = Адресат;
		МенеджерЗаписи.Удалить();
	КонецЦикла;
	
	Элементы.Список.Обновить();
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборГруппыАдреснойКнигиСервер(Результат, ДополнительныеПараметры)
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) <> Тип("Массив") ИЛИ 
		ДополнительныеПараметры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Адресат Из ДополнительныеПараметры Цикл
		МенеджерЗаписи = РегистрыСведений.СоставыГруппАдреснойКниги.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ГруппаАдреснойКниги = Результат;
		МенеджерЗаписи.КонтактCRM = Адресат;
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

#Область ПанельКонтактнойИнформации

&НаСервере
Процедура ОбновитьПанельКонтактнойИнформацииСервер()
	
	КонтактнаяИнформацияПанельУНФ.ОбновитьДанныеПанели(ЭтотОбъект, ТекущийКонтакт);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьАктивизациюСтрокиСписка()
	
	ОбновитьПанельКонтактнойИнформацииСервер();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтильПанелиКИ()
	
	СтилиКонтактнойИнформацииHTML = "<html>
	|<head>
	|
	|<style type=""text/css"">
	|
	|    body {
	|         margin-top: 2px;
	|         margin-left: 2px;
	|         margin-right: 2px;
	|         font-family: Arial; 
	|         font-size: 12pt;}
	|    table {
	|          border: 1px solid;
	|          border-collapse: collapse;}
	|    td {
	|       border: 1px solid;}
	|    th {
	|       border: 1px solid;}
	|    a:link {
	|           color: #A0A0A0;} 
	|    a:hover {
	|            color: #A0A0A0; 
	|            text-decoration: underline;}
	|    p {
	|      margin-top: 10px;}
	|    img {
	|        width: 150;
	|        height: 150}
	|
	|</style>
	|</head>";
	
КонецПроцедуры

// Возвращает общий стиль для документов html.
//
&НаСервере
Функция СтильHTML() Экспорт
	
	Возврат "<style type=""text/css"">
		|	body {
		|		overflow:    auto;
		|		margin-top:  2px;
		|		margin-left: 2px;
		|		font-family: Arial;
		|		font-size:   10pt;}
		|	table {
		|		width:       100%;
		|		font-family: Arial;
		|		font-size:   10pt;
		|		border: 0px solid;}
		|	td {vertical-align: top;}
		| 	a:link {
		|		color: #006699; text-decoration: none;}
		|	a:visited {
		|		color: #006699; text-decoration: none;}
		|	a:hover {
		|		color: #006699; text-decoration: underline;}
		|	p {
		|		margin-top: 15px;}
		|	table.frame {
		|		border-collapse: collapse;
		|		border: 1px solid #C8C8C8;}
		|	td.frame {
		|		border: 1px solid #C8C8C8;}
		|</style>";
	
КонецФункции

&НаСервере
// Добавляет значение любого типа в текст html.
// Если в процедуру передается ссылочный тип данных, то в текст html
// добавляется навигационная ссылка с представлением переданного значения.
//
// Параметры:
//   HTMLТекст - Строка - текст html
//   Значение - Любой тип - значение реквизита
//   Цвет - строка - шестнадцатеричное представление цвета (например: E9B7FF) значения реквизита.
//   Представление - Строка - представление значения, используется для ссылочных данных.
//
&НаСервере
Процедура ДобавитьЗначение(HTMLТекст, ЗначениеДанных, Цвет, Представление = "") Экспорт
	
	Значение = ЗначениеДанных;
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда 
		
		Если ЗначениеЗаполнено(Цвет) Тогда 
			HTMLТекст = HTMLТекст + "<FONT color=#"+Цвет+">";
			HTMLТекст = HTMLТекст + ЗаменитьСпецСимволыHTML(Значение);
			HTMLТекст = HTMLТекст + "</FONT>";
		Иначе	
			HTMLТекст = HTMLТекст + ЗаменитьСпецСимволыHTML(Значение);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата")
		Или ТипЗнч(Значение) = Тип("Число")
		Или ТипЗнч(Значение) = Тип("Булево") Тогда 
		
		ЗаменитьСпецСимволыHTML(Значение);
		
		Если ЗначениеЗаполнено(Цвет) Тогда 
			HTMLТекст = HTMLТекст + "<FONT color=#"+Цвет+">";
			HTMLТекст = HTMLТекст + Значение;
			HTMLТекст = HTMLТекст + "</FONT>";
		Иначе	
			HTMLТекст = HTMLТекст + Значение;
		КонецЕсли;
			
	ИначеЕсли ЗначениеЗаполнено(Значение) Тогда
		
		ПредставлениеЗначения = Представление;
		Если Не ЗначениеЗаполнено(ПредставлениеЗначения) Тогда
			ПредставлениеЗначения = Строка(Значение);
		КонецЕсли;
			
		HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<A href=v8doc:%1>%2</A>",
			ПолучитьНавигационнуюСсылку(Значение),
			ЗаменитьСпецСимволыHTML(ПредставлениеЗначения));
		
	КонецЕсли;
	
КонецПроцедуры

// Заменяет в строке все спецсимволы на соответствующие им имена,
// возвращает измененную строку.
//
&НаСервере
Функция ЗаменитьСпецСимволыHTML(Строка, СпецСимволыСоотв = Неопределено) Экспорт
	
	СоответствиеСпецСимволов = ПолучитьСоответствиеСпецСимволов();
	
	ЗаменитьСпецСимволHTML(Строка, 38, "amp");
	
	НоваяСтрока = "";
	
	Для Поз = 1 По СтрДлина(Строка) Цикл
		
		Код = КодСимвола(Строка, Поз);
		ИмяСимвола = СоответствиеСпецСимволов.Получить(Код);
		
		Если ИмяСимвола = Неопределено Тогда
			НоваяСтрока = НоваяСтрока + Символ(Код);
		Иначе
			НоваяСтрока = НоваяСтрока + "&" + ИмяСимвола + ";";
		КонецЕсли;
		
	КонецЦикла;
	
	Строка = НоваяСтрока;
	
	Возврат Строка;
	
КонецФункции

&НаСервере
Процедура ЗаменитьСпецСимволHTML(Строка, КодСимвола, ИмяСимвола)
	
	Строка = СтрЗаменить(Строка, Символ(КодСимвола), "&" + ИмяСимвола + ";");
	
КонецПроцедуры

// Возвращает соответствие для замены спецсимволов
&НаСервере
Функция ПолучитьСоответствиеСпецСимволов() Экспорт
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(193, "Aacute");
	Результат.Вставить(225, "aacute");
	Результат.Вставить(226, "acirc");
	Результат.Вставить(194, "Acirc");
	Результат.Вставить(180, "acute");
	Результат.Вставить(230, "aelig");
	Результат.Вставить(198, "AElig");
	Результат.Вставить(192, "Agrave");
	Результат.Вставить(224, "agrave");
	Результат.Вставить(8501, "alefsym");
	Результат.Вставить(913, "Alpha");
	Результат.Вставить(945, "alpha");
	Результат.Вставить(8743, "and");
	Результат.Вставить(8736, "ang");
	Результат.Вставить(229, "aring");
	Результат.Вставить(197, "Aring");
	Результат.Вставить(8776, "asymp");
	Результат.Вставить(195, "Atilde");
	Результат.Вставить(227, "atilde");
	Результат.Вставить(196, "Auml");
	Результат.Вставить(228, "auml");
	Результат.Вставить(8222, "bdquo");
	Результат.Вставить(914, "Beta");
	Результат.Вставить(946, "beta");
	Результат.Вставить(166, "brvbar");
	Результат.Вставить(8226, "bull");
	Результат.Вставить(8745, "cap");
	Результат.Вставить(199, "Ccedil");
	Результат.Вставить(231, "ccedil");
	Результат.Вставить(184, "cedil");
	Результат.Вставить(162, "cent");
	Результат.Вставить(967, "chi");
	Результат.Вставить(935, "Chi");
	Результат.Вставить(710, "circ");
	Результат.Вставить(9827, "clubs");
	Результат.Вставить(8773, "cong");
	Результат.Вставить(169, "copy");
	Результат.Вставить(8629, "crarr");
	Результат.Вставить(8746, "cup");
	Результат.Вставить(164, "curren");
	Результат.Вставить(8224, "dagger");
	Результат.Вставить(8225, "Dagger");
	Результат.Вставить(8659, "dArr");
	Результат.Вставить(8595, "darr");
	Результат.Вставить(176, "deg");
	Результат.Вставить(916, "Delta");
	Результат.Вставить(948, "delta");
	Результат.Вставить(9830, "diams");
	Результат.Вставить(247, "divide");
	Результат.Вставить(233, "eacute");
	Результат.Вставить(201, "Eacute");
	Результат.Вставить(202, "Ecirc");
	Результат.Вставить(234, "ecirc");
	Результат.Вставить(232, "egrave");
	Результат.Вставить(200, "Egrave");
	Результат.Вставить(8709, "empty");
	Результат.Вставить(8195, "emsp");
	Результат.Вставить(8194, "ensp");
	Результат.Вставить(949, "epsilon");
	Результат.Вставить(917, "Epsilon");
	Результат.Вставить(8801, "equiv");
	Результат.Вставить(919, "Eta");
	Результат.Вставить(951, "eta");
	Результат.Вставить(240, "eth");
	Результат.Вставить(208, "ETH");
	Результат.Вставить(235, "euml");
	Результат.Вставить(203, "Euml");
	Результат.Вставить(8364, "euro");
	Результат.Вставить(8707, "exist");
	Результат.Вставить(402, "fnof");
	Результат.Вставить(8704, "forall");
	Результат.Вставить(189, "frac12");
	Результат.Вставить(188, "frac14");
	Результат.Вставить(190, "frac34");
	Результат.Вставить(8260, "frasl");
	Результат.Вставить(915, "Gamma");
	Результат.Вставить(947, "gamma");
	Результат.Вставить(8805, "ge");
	Результат.Вставить(62, "gt");
	Результат.Вставить(8660, "hArr");
	Результат.Вставить(8596, "harr");
	Результат.Вставить(9829, "hearts");
	Результат.Вставить(8230, "hellip");
	Результат.Вставить(237, "iacute");
	Результат.Вставить(205, "Iacute");
	Результат.Вставить(238, "icirc");
	Результат.Вставить(206, "Icirc");
	Результат.Вставить(161, "iexcl");
	Результат.Вставить(204, "Igrave");
	Результат.Вставить(236, "igrave");
	Результат.Вставить(8465, "image");
	Результат.Вставить(8734, "infin");
	Результат.Вставить(8747, "int");
	Результат.Вставить(921, "Iota");
	Результат.Вставить(953, "iota");
	Результат.Вставить(191, "iquest");
	Результат.Вставить(8712, "isin");
	Результат.Вставить(207, "Iuml");
	Результат.Вставить(239, "iuml");
	Результат.Вставить(922, "Kappa");
	Результат.Вставить(954, "kappa");
	Результат.Вставить(955, "lambda");
	Результат.Вставить(923, "Lambda");
	Результат.Вставить(9001, "lang");
	Результат.Вставить(171, "laquo");
	Результат.Вставить(8592, "larr");
	Результат.Вставить(8656, "lArr");
	Результат.Вставить(8968, "lceil");
	Результат.Вставить(8220, "ldquo");
	Результат.Вставить(8804, "le");
	Результат.Вставить(8970, "lfloor");
	Результат.Вставить(8727, "lowast");
	Результат.Вставить(9674, "loz");
	Результат.Вставить(8206, "lrm");
	Результат.Вставить(8249, "lsaquo");
	Результат.Вставить(8216, "lsquo");
	Результат.Вставить(60, "lt");
	Результат.Вставить(175, "macr");
	Результат.Вставить(8212, "mdash");
	Результат.Вставить(181, "micro");
	Результат.Вставить(183, "middot");
	Результат.Вставить(8722, "minus");
	Результат.Вставить(924, "Mu");
	Результат.Вставить(956, "mu");
	Результат.Вставить(8711, "nabla");
	Результат.Вставить(160, "nbsp");
	Результат.Вставить(8211, "ndash");
	Результат.Вставить(8800, "ne");
	Результат.Вставить(8715, "ni");
	Результат.Вставить(172, "not");
	Результат.Вставить(8713, "notin");
	Результат.Вставить(8836, "nsub");
	Результат.Вставить(241, "ntilde");
	Результат.Вставить(209, "Ntilde");
	Результат.Вставить(925, "Nu");
	Результат.Вставить(957, "nu");
	Результат.Вставить(243, "oacute");
	Результат.Вставить(211, "Oacute");
	Результат.Вставить(212, "Ocirc");
	Результат.Вставить(244, "ocirc");
	Результат.Вставить(338, "OElig");
	Результат.Вставить(339, "oelig");
	Результат.Вставить(242, "ograve");
	Результат.Вставить(210, "Ograve");
	Результат.Вставить(8254, "oline");
	Результат.Вставить(969, "omega");
	Результат.Вставить(937, "Omega");
	Результат.Вставить(927, "Omicron");
	Результат.Вставить(959, "omicron");
	Результат.Вставить(8853, "oplus");
	Результат.Вставить(8744, "or");
	Результат.Вставить(170, "ordf");
	Результат.Вставить(186, "ordm");
	Результат.Вставить(216, "Oslash");
	Результат.Вставить(248, "oslash");
	Результат.Вставить(213, "Otilde");
	Результат.Вставить(245, "otilde");
	Результат.Вставить(8855, "otimes");
	Результат.Вставить(214, "Ouml");
	Результат.Вставить(246, "ouml");
	Результат.Вставить(182, "para");
	Результат.Вставить(8706, "part");
	Результат.Вставить(8240, "permil");
	Результат.Вставить(8869, "perp");
	Результат.Вставить(966, "phi");
	Результат.Вставить(934, "Phi");
	Результат.Вставить(928, "Pi");
	Результат.Вставить(960, "pi");
	Результат.Вставить(982, "piv");
	Результат.Вставить(177, "plusmn");
	Результат.Вставить(163, "pound");
	Результат.Вставить(8243, "Prime");
	Результат.Вставить(8242, "prime");
	Результат.Вставить(8719, "prod");
	Результат.Вставить(8733, "prop");
	Результат.Вставить(968, "psi");
	Результат.Вставить(936, "Psi");
	Результат.Вставить(34, "quot");
	Результат.Вставить(8730, "radic");
	Результат.Вставить(9002, "rang");
	Результат.Вставить(187, "raquo");
	Результат.Вставить(8658, "rArr");
	Результат.Вставить(8594, "rarr");
	Результат.Вставить(8969, "rceil");
	Результат.Вставить(8221, "rdquo");
	Результат.Вставить(8476, "real");
	Результат.Вставить(174, "reg");
	Результат.Вставить(8971, "rfloor");
	Результат.Вставить(929, "Rho");
	Результат.Вставить(961, "rho");
	Результат.Вставить(8207, "rlm");
	Результат.Вставить(8250, "rsaquo");
	Результат.Вставить(8217, "rsquo");
	Результат.Вставить(8218, "sbquo");
	Результат.Вставить(352, "Scaron");
	Результат.Вставить(353, "scaron");
	Результат.Вставить(8901, "sdot");
	Результат.Вставить(167, "sect");
	Результат.Вставить(173, "shy");
	Результат.Вставить(931, "Sigma");
	Результат.Вставить(963, "sigma");
	Результат.Вставить(962, "sigmaf");
	Результат.Вставить(8764, "sim");
	Результат.Вставить(9824, "spades");
	Результат.Вставить(8834, "sub");
	Результат.Вставить(8838, "sube");
	Результат.Вставить(8721, "sum");
	Результат.Вставить(8835, "sup");
	Результат.Вставить(185, "sup1");
	Результат.Вставить(178, "sup2");
	Результат.Вставить(179, "sup3");
	Результат.Вставить(8839, "supe");
	Результат.Вставить(223, "szlig");
	Результат.Вставить(932, "Tau");
	Результат.Вставить(964, "tau");
	Результат.Вставить(8756, "there4");
	Результат.Вставить(920, "Theta");
	Результат.Вставить(952, "theta");
	Результат.Вставить(977, "thetasym");
	Результат.Вставить(8201, "thinsp");
	Результат.Вставить(222, "THORN");
	Результат.Вставить(254, "thorn");
	Результат.Вставить(732, "tilde");
	Результат.Вставить(215, "times");
	Результат.Вставить(8482, "trade");
	Результат.Вставить(250, "uacute");
	Результат.Вставить(218, "Uacute");
	Результат.Вставить(8657, "uArr");
	Результат.Вставить(8593, "uarr");
	Результат.Вставить(251, "ucirc");
	Результат.Вставить(219, "Ucirc");
	Результат.Вставить(217, "Ugrave");
	Результат.Вставить(249, "ugrave");
	Результат.Вставить(168, "uml");
	Результат.Вставить(978, "upsih");
	Результат.Вставить(965, "upsilon");
	Результат.Вставить(933, "Upsilon");
	Результат.Вставить(252, "uuml");
	Результат.Вставить(220, "Uuml");
	Результат.Вставить(8472, "weierp");
	Результат.Вставить(958, "xi");
	Результат.Вставить(926, "Xi");
	Результат.Вставить(253, "yacute");
	Результат.Вставить(221, "Yacute");
	Результат.Вставить(165, "yen");
	Результат.Вставить(255, "yuml");
	Результат.Вставить(376, "Yuml");
	Результат.Вставить(918, "Zeta");
	Результат.Вставить(950, "zeta");
	Результат.Вставить(8205, "zwj");
	Результат.Вставить(8204, "zwnj");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьКарточкуКонтакта()
	
	Если ЗначениеЗаполнено(ТекущийКонтакт) Тогда
		ВладелецКИ = ТекущийКонтакт;
	Иначе
		ВладелецКИ = Неопределено;
	КонецЕсли;
		
	ОбновитьКарточкуКонтактаСервер(ВладелецКИ);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКарточкуКонтактаСервер(ВладелецКИ)
	
	ДанныеПанелиКонтактнойИнформации = КонтактнаяИнформацияПанельУНФ.ДанныеПанелиКонтактнойИнформации(ВладелецКИ);
	
	ЦветФонаHTMLОписания = "";
	
	HTMLОписаниеКонтакта = "<html>"
		+ "<head>"
		+ СтильHTML()
		+ "<body %bgcolor%>";
		
		Если ВладелецКИ = Неопределено ИЛИ ДанныеПанелиКонтактнойИнформации.Количество() = 1 
				И ДанныеПанелиКонтактнойИнформации[0].ТипОтображаемыхДанных = "НетДанных" Тогда
			HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "<tr>";
			HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + НСтр("ru = '<Нет контактных данных>'");
			HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "</tr>";
			HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "</table>";
			
			HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "</body>";
			HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "</html>";
			
			HTMLОписаниеКонтакта = СтрЗаменить(HTMLОписаниеКонтакта, "%bgcolor%", ЦветФонаHTMLОписания);
			
			ЦветФонаHTMLОписания = "";
			
			КонтактнаяИнформацияHTML = СтилиКонтактнойИнформацииHTML + HTMLОписаниеКонтакта;
			Возврат;
		КонецЕсли;

	Для Каждого КИ Из ДанныеПанелиКонтактнойИнформации Цикл
		
		HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "<tr>";
		
		Если КИ.ТипОтображаемыхДанных = "КонтактноеЛицо" Тогда
			HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "<b>";

			ДобавитьЗначение(
			HTMLОписаниеКонтакта,
			КИ.ВладелецКИ,
			"",
			КИ.Отображение);
			HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "</b>";
			
			HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "<br/>";
		КонецЕсли;
		
		Если КИ.ТипОтображаемыхДанных = "ЗначениеКИ" Тогда
			ОписаниеКонтакта_HTML = "";
			ДобавитьЗначение(
			ОписаниеКонтакта_HTML,
			КИ.Отображение,
			"");
			
			HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + ОписаниеКонтакта_HTML + "<br/>";
		КонецЕсли;
		HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "</tr>";
	КонецЦикла;
		
	HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "</table>";
	
	HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "</body>";
	HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "</html>";
	
	HTMLОписаниеКонтакта = СтрЗаменить(HTMLОписаниеКонтакта, "%bgcolor%", ЦветФонаHTMLОписания);
	
	ЦветФонаHTMLОписания = "";
		
	КонтактнаяИнформацияHTML = СтилиКонтактнойИнформацииHTML + HTMLОписаниеКонтакта;
КонецПроцедуры

#КонецОбласти

#Область Иерархия

&НаСервере
Процедура ПрочитатьИерархию(ГруппаТекущейСтроки = Неопределено)
	
	ЭлементыКоллекции = ОтборИерархия.ПолучитьЭлементы();
	ЭлементыКоллекции.Очистить();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА Контрагенты.ПометкаУдаления
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИндексПиктограммы,
	|	Контрагенты.Ссылка КАК ГруппаКонтрагентов,
	|	ПРЕДСТАВЛЕНИЕ(Контрагенты.Ссылка) КАК ПредставлениеГруппы,
	|	0 КАК РодительГруппы
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ЭтоГруппа = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Контакты.ПометкаУдаления
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	Контакты.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(Контакты.Ссылка),
	|	1
	|ИЗ
	|	Справочник.КонтактныеЛица КАК Контакты
	|ГДЕ
	|	Контакты.ЭтоГруппа = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Лиды.ПометкаУдаления
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	Лиды.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(Лиды.Ссылка),
	|	2
	|ИЗ
	|	Справочник.Лиды КАК Лиды
	|ГДЕ
	|	Лиды.ЭтоГруппа = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ФизЛица.ПометкаУдаления
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ФизЛица.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ФизЛица.Ссылка),
	|	3
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизЛица
	|ГДЕ
	|	ФизЛица.ЭтоГруппа = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	РодительГруппы,
	|	ГруппаКонтрагентов ИЕРАРХИЯ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ДеревоГрупп = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	УстановитьПривилегированныйРежим(Ложь);
	
	ЭлементыКоллекции = ОтборИерархия.ПолучитьЭлементы();
	
	СтрокаДерева = ЭлементыКоллекции.Добавить();
	СтрокаДерева.ИндексПиктограммы = 2;
	СтрокаДерева.ГруппаКонтрагентов = "Контрагенты";
	СтрокаДерева.ПредставлениеГруппы = НСтр("ru='Контрагенты'");

	СтрокаДерева = ЭлементыКоллекции.Добавить();
	СтрокаДерева.ИндексПиктограммы = 2;
	СтрокаДерева.ГруппаКонтрагентов = "Контакты";
	СтрокаДерева.ПредставлениеГруппы = НСтр("ru='Контакты'");
	
	Если ДоступнаРаботаСЛидами Тогда
		СтрокаДерева = ЭлементыКоллекции.Добавить();
		СтрокаДерева.ИндексПиктограммы = 2;
		СтрокаДерева.ГруппаКонтрагентов = "Лиды";
		СтрокаДерева.ПредставлениеГруппы = НСтр("ru='Лиды'");
	КонецЕсли;
	
	СтрокаДерева = ЭлементыКоллекции.Добавить();
	СтрокаДерева.ИндексПиктограммы = 2;
	СтрокаДерева.ГруппаКонтрагентов = "ФизЛица";
	СтрокаДерева.ПредставлениеГруппы = НСтр("ru='Физ. лица'");
	
	ЗаполнитьДеревоОтбораПоИерархии(ДеревоГрупп, ЭлементыКоллекции, СтрокаДерева.ПолучитьЭлементы(), Ложь, Ложь);
		
	ЭлементыКоллекции = ОтборИерархия.ПолучитьЭлементы();
	СтрокаДерева = ЭлементыКоллекции.Добавить();
	СтрокаДерева.ИндексПиктограммы = -1;
	СтрокаДерева.ГруппаКонтрагентов = "СтрокаВидГруппы";
	СтрокаДерева.ПредставлениеГруппы = НСтр("ru='Мои группы:'");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ГруппыАдреснойКниги.Предопределенный
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИндексПиктограммы,
	|	ГруппыАдреснойКниги.Ссылка КАК ГруппаКонтрагентов,
	|	ГруппыАдреснойКниги.Родитель КАК Родитель,
	|	ПРЕДСТАВЛЕНИЕ(ГруппыАдреснойКниги.Ссылка) КАК ПредставлениеГруппы,
	|	ГруппыАдреснойКниги.Предопределенный КАК Предопределенный,
	|	4 КАК РодительГруппы,
	|	ГруппыАдреснойКниги.Доступ КАК Доступ
	|ИЗ
	|	Справочник.ГруппыАдреснойКниги КАК ГруппыАдреснойКниги
	|ГДЕ
	|	(НЕ ГруппыАдреснойКниги.ПометкаУдаления
	|				И (ГруппыАдреснойКниги.Доступ = ЗНАЧЕНИЕ(Перечисление.ВидыДоступовГруппАдреснойКниги.МояГруппа)
	|					И ГруппыАдреснойКниги.Автор = &ТекущийПользователь)
	|			ИЛИ ГруппыАдреснойКниги.Доступ = ЗНАЧЕНИЕ(Перечисление.ВидыДоступовГруппАдреснойКниги.ОбщаяГруппа))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГруппыАдреснойКниги.Доступ,
	|	ГруппаКонтрагентов
	|ИТОГИ ПО
	|	ГруппаКонтрагентов ИЕРАРХИЯ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	ДеревоГрупп = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "ГруппаКонтрагентов");
	МассивГрупп = Новый Массив;
	ЗаполнитьДеревоПапок(ДеревоГрупп, ЭлементыКоллекции, 0, МассивГрупп);
	
	ЭлементыКоллекции = ОтборИерархия.ПолучитьЭлементы();
	СтрокаДерева = ЭлементыКоллекции.Вставить(0);
	СтрокаДерева.ИндексПиктограммы = -1;
	СтрокаДерева.ГруппаКонтрагентов = "ВсеАдресаты";
	СтрокаДерева.ПредставлениеГруппы = НСтр("ru='<Все адресаты>'");
	
	ИдентификаторСтроки = Неопределено;
	Если ГруппаТекущейСтроки <> Неопределено Тогда
		ИдентификаторСтроки = ИдентификаторСтрокиДереваПоЗначению(ОтборИерархия, ГруппаТекущейСтроки);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		Элементы.ОтборИерархия.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПапок(ВыборкаСИерархией, ЭлементыКоллекции, ИндексВставкиОбщейПапки,МассивГрупп)
		
	Пока ВыборкаСИерархией.Следующий() Цикл
		
		Если МассивГрупп.Найти(ВыборкаСИерархией.ГруппаКонтрагентов) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивГрупп.Добавить(ВыборкаСИерархией.ГруппаКонтрагентов);
		
		Если ИндексВставкиОбщейПапки = 0 
			И ВыборкаСИерархией.Доступ = Перечисления.ВидыДоступовГруппАдреснойКниги.ОбщаяГруппа Тогда
			СтрокаДерева = ЭлементыКоллекции.Добавить();
			СтрокаДерева.ИндексПиктограммы = -1;
			СтрокаДерева.ГруппаКонтрагентов = "СтрокаВидГруппы";
			СтрокаДерева.ПредставлениеГруппы = НСтр("ru='Общие группы:'");
			ИндексВставкиОбщейПапки = 1;
		КонецЕсли;

		Если ВыборкаСИерархией.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
						
			Строка = ЭлементыКоллекции.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, ВыборкаСИерархией);
			Выборка = ВыборкаСИерархией.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "ГруппаКонтрагентов");
			ЗаполнитьДеревоПапок(Выборка, Строка.ПолучитьЭлементы(), ИндексВставкиОбщейПапки, МассивГрупп);
			
		ИначеЕсли ВыборкаСИерархией.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
						
			Строка = ЭлементыКоллекции.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, ВыборкаСИерархией);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоОтбораПоИерархии(ДеревоГрупп, ЭлементыКоллекции, ПодчиненныеЭлементыГрупп, ЭтоДобавлениеПодчиненных, ИерархияГрупп)
	
	Пока ДеревоГрупп.Следующий() Цикл
		
		ДобавленаГруппа = Ложь;
		Если НЕ ЭтоДобавлениеПодчиненных Тогда
			Если НЕ ИерархияГрупп Тогда
				ПодчиненныеЭлементыГрупп = ЭлементыКоллекции[ДеревоГрупп.РодительГруппы].ПолучитьЭлементы();
			КонецЕсли;
		КонецЕсли;
		
		НовыйЭлемент = ПодчиненныеЭлементыГрупп.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ДеревоГрупп);
		
		// Продолжим выборку подчиненных записей
		СпособВыборки = ОбходРезультатаЗапроса.ПоГруппировкам;
		Если ДеревоГрупп.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
			ДочерняяВыборка = ДеревоГрупп.Выбрать(СпособВыборки, ДеревоГрупп.Группировка());
		Иначе
			ДочерняяВыборка = ДеревоГрупп.Выбрать(СпособВыборки);
		КонецЕсли;
		
		ПодчиненныеЭлементыГрупп = НовыйЭлемент.ПолучитьЭлементы();
		ЗаполнитьДеревоОтбораПоИерархии(ДочерняяВыборка, ЭлементыКоллекции, ПодчиненныеЭлементыГрупп, Истина, ИерархияГрупп);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ИдентификаторСтрокиДереваПоЗначению(Коллекция, ИскомоеЗначение)
	
	КоллекцияЭлементов = Коллекция.ПолучитьЭлементы();
	
	Для каждого Элемент Из КоллекцияЭлементов Цикл
		
		Если Элемент.ГруппаКонтрагентов = ИскомоеЗначение Тогда
			Возврат Элемент.ПолучитьИдентификатор();
		КонецЕсли;
		
		Идентификатор = ИдентификаторСтрокиДереваПоЗначению(Элемент, ИскомоеЗначение);
		
		Если Идентификатор <> Неопределено Тогда
			Возврат Идентификатор;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура УстановитьОтборПоИерархии()
	
	Если Элементы.ОтборИерархия.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаОтбора = Элементы.ОтборИерархия.ТекущиеДанные.ГруппаКонтрагентов;
	ПредставлениеГруппы = Элементы.ОтборИерархия.ТекущиеДанные.ПредставлениеГруппы;
	
	УстановитьОтборПоИерархииСервер(ГруппаОтбора);
	
	Если ГруппаОтбора = "ВсеАдресаты" Тогда
		Заголовок = НСтр("ru = 'Адресная книга'");
	Иначе
		Заголовок = СтрШаблон(НСтр("ru = 'Адресная книга: %1'"), ПредставлениеГруппы);
	КонецЕсли;
	
	Элементы.Список.Обновить();
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоИерархииСервер(ГруппаОтбора)
	
	ЭтоОтборПоГруппе = ТипЗнч(ГруппаОтбора) = Тип("СправочникСсылка.Контрагенты")
		ИЛИ ТипЗнч(ГруппаОтбора) = Тип("СправочникСсылка.КонтактныеЛица")
		ИЛИ ТипЗнч(ГруппаОтбора) = Тип("СправочникСсылка.Лиды")
		ИЛИ ТипЗнч(ГруппаОтбора) = Тип("СправочникСсылка.ФизическиеЛица");
		
	ЭтоГруппаАдресатов = ТипЗнч(ГруппаОтбора) = Тип("СправочникСсылка.ГруппыАдреснойКниги");
	Элементы.ОтборИерархияКонтекстноеМенюГруппаТолькоДляГрупп.Видимость = ЭтоГруппаАдресатов;

	ПравоеЗначение	= Неопределено;
	Сравнение		= ВидСравненияКомпоновкиДанных.Равно;
	Использование	= Истина;
	
	СогласоватьТаблицуСпискаСОтбором(ГруппаОтбора); 
	
	Если ЭтоГруппаАдресатов Тогда
		
		Использование = Ложь;
		ПравоеЗначение = ГруппаОтбора;
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, 
			"ОтборПоГруппе", 
			ГруппаОтбора, 
			Истина);
			
	ИначеЕсли ЭтоОтборПоГруппе Тогда
		
		Если Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Пометка Тогда
			Сравнение = ВидСравненияКомпоновкиДанных.ВИерархии;
		КонецЕсли;
		ПравоеЗначение = ГруппаОтбора;
		Использование = Истина;
		
	Иначе
		
		ПравоеЗначение = ГруппаОтбора;
		Использование = Ложь;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
		"Ссылка.Родитель",
		ПравоеЗначение,
		Сравнение,
		,
		Использование);
	
	ОтборИерархияТекущая = ПравоеЗначение;
	ПроверитьКорректностьОтборов();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКорректностьОтборов()
	
	Отборы = Список.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	Для Каждого Отбор Из Отборы Цикл
		Если ТипЗнч(Отбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			ПолеОтбора = Список.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Отбор.ЛевоеЗначение);
			
			Если ПолеОтбора <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, Строка(Отбор.ЛевоеЗначение));
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Отбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			Для Каждого ОтборГруппы Из Отбор.Элементы Цикл
				ПолеОтбора = Список.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ОтборГруппы.ЛевоеЗначение);
				
				Если ПолеОтбора <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, Строка(ОтборГруппы.ЛевоеЗначение));
				Метки = ДанныеМеток.НайтиСтроки(Новый Структура("ИмяПоляОтбора", Строка(ОтборГруппы.ЛевоеЗначение)));
				Для Каждого Метка Из Метки Цикл
					УдалитьМеткуОтбора(ДанныеМеток.Индекс(Метка));
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СогласоватьТаблицуСпискаСОтбором(ГруппаОтбора)
	
	ТекущаяТаблицаСписка = "";
	ТекстЗапроса = "";
	
	Если ТипЗнч(ГруппаОтбора) = Тип("Строка") Тогда
		ТекущаяТаблицаСписка = ГруппаОтбора;
		ТекстЗапроса = ТекстЗапросаПоТекущейТаблице(ТекущаяТаблицаСписка);
	ИначеЕсли ТипЗнч(ГруппаОтбора) = Тип("СправочникСсылка.ГруппыАдреснойКниги") Тогда
		ТекущаяТаблицаСписка = "СоставГруппАдреснойКниги";
		ТекстЗапроса = ТекстЗапросаОтборПоГруппеАдреснойКниги();
	Иначе
		ТекущаяТаблицаСписка = ОсновнаяТаблицаСпискаПоТипуГруппы(ГруппаОтбора);
		ТекстЗапроса = ТекстЗапросаПоТекущейТаблице(ТекущаяТаблицаСписка);
	КонецЕсли;
	
	Если ТекущаяТаблицаСписка <> ОсновнаяТаблицаСписка Тогда
		ОсновнаяТаблицаСписка = ТекущаяТаблицаСписка;
		УстановитьЗапросДинамическогоСписка(ТекстЗапроса);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗапросДинамическогоСписка(ТекстЗапроса)
	
	СтруктураСвойствСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СтруктураСвойствСписка.ТекстЗапроса = ТекстЗапроса;
	СтруктураСвойствСписка.ДинамическоеСчитываниеДанных = Истина;
	СтруктураСвойствСписка.ОсновнаяТаблица = Неопределено; 
	
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Список, СтруктураСвойствСписка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОсновнаяТаблицаСпискаПоТипуГруппы(ГруппаОтбора)
	
	Если ТипЗнч(ГруппаОтбора) = Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат "Контрагенты";
	ИначеЕсли ТипЗнч(ГруппаОтбора) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Возврат "Контакты";
	ИначеЕсли ТипЗнч(ГруппаОтбора) = Тип("СправочникСсылка.Лиды") Тогда
		Возврат "Лиды";
	ИначеЕсли ТипЗнч(ГруппаОтбора) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Возврат "ФизЛица";
	Иначе
		Возврат "ВсеАдресаты";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаПоТекущейТаблице(ТекущаяТаблицаСписка)
	
	Если ТекущаяТаблицаСписка = "Контрагенты" Тогда
		Возврат ТекстЗапросаКонтрагенты();
	ИначеЕсли ТекущаяТаблицаСписка = "Контакты" Тогда
		Возврат ТекстЗапросаКонтакты();
	ИначеЕсли ТекущаяТаблицаСписка = "Лиды" Тогда
		Возврат ТекстЗапросаЛиды();
	ИначеЕсли ТекущаяТаблицаСписка = "ФизЛица" Тогда
		Возврат ТекстЗапросаФизЛица();
	Иначе
		Если ДоступнаРаботаСЛидами Тогда
			Возврат ТекстЗапросаВсеАдресаты();
		Иначе
			ТекстЗапросаВсеАдресатыБезЛидов()
		КонецЕсли;
		
	КонецЕсли;

КонецФункции

&НаСервере
Функция ИзменитьПометкуУдаленияГруппыСервер(ИдентификаторТекущейСтроки)
	
	ТекущаяСтрокаДерева = ОтборИерархия.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	ПометкаУдаления = ИзменитьПометкуУдаления(ТекущаяСтрокаДерева.ГруппаКонтрагентов);
	ИзменитьПиктограммуРекурсивно(ТекущаяСтрокаДерева, ПометкаУдаления);
	ПрочитатьИерархию(ТекущаяСтрокаДерева.ГруппаКонтрагентов);
	
	Возврат ПометкаУдаления;
	
КонецФункции

&НаСервере
Процедура ИзменитьПиктограммуРекурсивно(СтрокаДерева, ПометкаУдаления)
	
	СтрокаДерева.ИндексПиктограммы = ?(ПометкаУдаления, 1, 0);
	
	СтрокиДерева = СтрокаДерева.ПолучитьЭлементы();
	Для Каждого СтрокаПодчиненная Из СтрокиДерева Цикл
		ИзменитьПиктограммуРекурсивно(СтрокаПодчиненная, ПометкаУдаления);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменитьПометкуУдаления(ГруппаАдресатов)
	
	ГруппаАдресатовОбъект = ГруппаАдресатов.ПолучитьОбъект();
	ГруппаАдресатовОбъект.УстановитьПометкуУдаления(Не ГруппаАдресатовОбъект.ПометкаУдаления, Истина);
	
	Возврат ГруппаАдресатовОбъект.ПометкаУдаления;
	
КонецФункции

#КонецОбласти

#Область Отборы

&НаСервере
Процедура УстановитьОтборПоСегментамНаСервере(ВыбранноеЗначение)
	
	ИмяГруппы = Элементы.ОтборСегмент.Родитель.Имя;
	
	КонтрагентыСегментов = КонтрагентыСегментов(ВыбранноеЗначение);
	УстановитьМеткуИОтборСписка("Ссылка", ИмяГруппы, КонтрагентыСегментов, Строка(ВыбранноеЗначение));
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КонтрагентыСегментов(Сегмент)
	
	КонтрагентыСегментов = Новый Массив;
	
	СоставСегмента = Справочники.СегментыКонтрагентов.ПолучитьСоставСегмента(Сегмент);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КонтрагентыСегментов, СоставСегмента, Истина);
	
	Возврат КонтрагентыСегментов;

КонецФункции

&НаКлиенте
Процедура НастройкаОтборовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОтборовЗавершениеНаСервере(Результат.АдресВыбранныеОтборы, Результат.АдресУдаленныеОтборы, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура НастройкаОтборовЗавершениеНаСервере(АдресВыбранныеОтборы, АдресУдаленныеОтборы, ДополнительныеПараметры)
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ИмяРеквизитаСписка = "Список";
		ИмяТЧДанныеМеток = "ДанныеМеток";
		ИмяТЧДанныеОтборов = "ДанныеОтборов";
	Иначе
		ИмяРеквизитаСписка = ДополнительныеПараметры.ИмяРеквизитаСписка;
		ИмяТЧДанныеМеток = ДополнительныеПараметры.ИмяТЧДанныеМеток;
		ИмяТЧДанныеОтборов = ДополнительныеПараметры.ИмяТЧДанныеОтборов;
	КонецЕсли;
	
	РаботаСОтборами.НастройкаОтборовЗавершение(ЭтотОбъект, АдресВыбранныеОтборы, АдресУдаленныеОтборы, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура СброситьВсеМеткиОтбораНаСервере()
	РаботаСОтборами.УдалитьМеткиОтбораСервер(ЭтотОбъект, Список);
	УправлениеФормой();
КонецПроцедуры

&НаСервере
Функция ПараметрыОткрытияФормыСНастройкамиОтборов(ДополнительныеПараметры)
	
	Возврат РаботаСОтборами.ПараметрыДляОткрытияФормыСНастройкамиОтборов(ЭтотОбъект, ДополнительныеПараметры);
	
КонецФункции

&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, 
		ИмяПоляОтбораСписка, 
		ГруппаРодительМетки, 
		ВыбранноеЗначение, 
		ПредставлениеЗначения);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, ИмяПоляОтбораСписка,,Истина);
	УправлениеФормой();
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_")+1);
	УдалитьМеткуОтбора(МеткаИД);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, Список, МеткаИД);
	УправлениеФормой();
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОтборПриИзменении(Элемент)
	
	Подключаемый_ОтборПриИзмененииНаСервере(Элемент.Имя, Элемент.Родитель.Имя);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОтборПриИзмененииНаСервере(ЭлементИмя, ЭлементРодительИмя)
	
	РаботаСОтборами.Подключаемый_ОтборПриИзменении(ЭтотОбъект, ЭлементИмя, ЭлементРодительИмя);
	УправлениеФормой();
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОтборОчистка(Элемент)
	
	Подключаемый_ОтборОчисткаНаСервере(Элемент.Имя, Элемент.Родитель.Имя)
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОтборОчисткаНаСервере(ЭлементИмя, ЭлементРодительИмя)
	
	РаботаСОтборами.Подключаемый_ОтборОчистка(ЭтотОбъект, ЭлементИмя);
	УправлениеФормой();
		
КонецПроцедуры

&НаСервере
Функция ПроверитьОтборУстановлен(Форма, ИмяЭлементаПраваяПанель, ИмяТЧДанныеМеток)
	
	РеквизитыОтбораПравойПанели = "ОтборТеги,ОтборОтветственный";
	ОтборУстановлен = Ложь;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ОтборПериод") 
		И ЗначениеЗаполнено(Форма.ОтборПериод) Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	// ... реквизит "ДанныеМеток".
	Попытка
		Если Форма[ИмяТЧДанныеМеток].Количество() > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	Исключение КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ЗапросыСписка

&НаСервере
Функция ТекстЗапросаОтборПоГруппеАдреснойКниги()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоставыГруппАдреснойКниги.КонтактCRM КАК Ссылка,
	|	СоставыГруппАдреснойКниги.ГруппаАдреснойКниги КАК ГруппаАдреснойКниги,
	|	ИСТИНА КАК ЕстьГруппа
	|ПОМЕСТИТЬ СоставыГруппАдреснойКниги
	|ИЗ
	|	РегистрСведений.СоставыГруппАдреснойКниги КАК СоставыГруппАдреснойКниги
	|ГДЕ
	|	СоставыГруппАдреснойКниги.ГруппаАдреснойКниги В ИЕРАРХИИ(&ОтборПоГруппе)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СегментыКонтрагентов.Контрагент КАК КонтрагентСегмента,
	|	ИСТИНА КАК ЕстьСегмент
	|ПОМЕСТИТЬ СегментыКонтрагентов
	|ИЗ
	|	РегистрСведений.СоставСегментаКонтрагентов КАК СегментыКонтрагентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА Контрагенты.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.ФизическоеЛицо)
	|			ТОГДА 3
	|		КОГДА Контрагенты.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.ИндивидуальныйПредприниматель)
	|			ТОГДА 3
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК КартинкаКонтакта,
	|	Контрагенты.Теги.(
	|		Тег КАК Тег
	|	) КАК Теги,
	|	ЕСТЬNULL(СегментыКонтрагентов.ЕстьСегмент, ЛОЖЬ) КАК ЕстьСегмент,
	|	Контрагенты.ОсновныеСведения КАК ОсновныеСведения,
	|	0 КАК Приоритет,
	|	СоставыГруппАдреснойКниги.ЕстьГруппа КАК ЕстьГруппа
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СегментыКонтрагентов КАК СегментыКонтрагентов
	|		ПО (СегментыКонтрагентов.КонтрагентСегмента = Контрагенты.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СоставыГруппАдреснойКниги КАК СоставыГруппАдреснойКниги
	|		ПО (СоставыГруппАдреснойКниги.Ссылка = Контрагенты.Ссылка)
	|ГДЕ
	|	НЕ Контрагенты.ЭтоГруппа
	|	И Контрагенты.Недействителен = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонтактныеЛица.Ссылка,
	|	4,
	|	КонтактныеЛица.Теги.(
	|		Тег
	|	),
	|	ЛОЖЬ,
	|	КонтактныеЛица.ОсновныеСведения,
	|	0,
	|	СоставыГруппАдреснойКниги.ЕстьГруппа
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СоставыГруппАдреснойКниги КАК СоставыГруппАдреснойКниги
	|		ПО (СоставыГруппАдреснойКниги.Ссылка = КонтактныеЛица.Ссылка)
	|ГДЕ
	|	НЕ КонтактныеЛица.ЭтоГруппа
	|	И СоставыГруппАдреснойКниги.ГруппаАдреснойКниги = &ОтборПоГруппе
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка,
	|	6,
	|	ФизическиеЛица.КонтактнаяИнформация.(
	|		Ссылка
	|	),
	|	ЛОЖЬ,
	|	ФизическиеЛица.ОсновныеСведения,
	|	0,
	|	СоставыГруппАдреснойКниги.ЕстьГруппа
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СоставыГруппАдреснойКниги КАК СоставыГруппАдреснойКниги
	|		ПО (СоставыГруппАдреснойКниги.Ссылка = ФизическиеЛица.Ссылка)
	|ГДЕ
	|	НЕ ФизическиеЛица.ЭтоГруппа";
	
	Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты И ПраваНаПросмотрАдресатов Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	АдресатыПисем.Ссылка,
		|	-1,
		|	ФизическиеЛица.КонтактнаяИнформация.(
		|		Ссылка
		|	),
		|	ЛОЖЬ,
		|	АдресатыПисем.Наименование,
		|	1,
		|	СоставыГруппАдреснойКниги.ЕстьГруппа
		|ИЗ
		|	Справочник.АдресатыПисем КАК АдресатыПисем
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиАдресатКонтактCRM КАК СвязиАдресатКонтактCRM
		|		ПО АдресатыПисем.Ссылка = СвязиАдресатКонтактCRM.Адресат
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО (СвязиАдресатКонтактCRM.КонтактCRM = ФизическиеЛица.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СоставыГруппАдреснойКниги КАК СоставыГруппАдреснойКниги
		|		ПО (СоставыГруппАдреснойКниги.Ссылка = АдресатыПисем.Ссылка)
		|ГДЕ
		|	НЕ АдресатыПисем.ПометкаУдаления
		|	И СвязиАдресатКонтактCRM.КонтактCRM ЕСТЬ NULL";
	КонецЕсли;
	
	Если ДоступнаРаботаСЛидами Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Лиды.Ссылка,
		|	1,
		|	Лиды.Теги.(
		|		Тег
		|	),
		|	ЛОЖЬ,
		|	Лиды.ОсновныеСведения,
		|	0,
		|	СоставыГруппАдреснойКниги.ЕстьГруппа
		|ИЗ
		|	Справочник.Лиды КАК Лиды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СоставыГруппАдреснойКниги КАК СоставыГруппАдреснойКниги
		|		ПО (СоставыГруппАдреснойКниги.Ссылка = Лиды.Ссылка)
		|ГДЕ
		|	НЕ Лиды.ЭтоГруппа
		|	И Лиды.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантЗавершенияРаботыСЛидом.ПустаяСсылка)";
	КонецЕсли;

	
	Если НЕ Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Пометка Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "В ИЕРАРХИИ", "=");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаВсеАдресаты()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоставыГруппАдреснойКниги.КонтактCRM КАК Ссылка,
	|	ИСТИНА КАК ЕстьГруппа
	|ПОМЕСТИТЬ СоставыГруппАдреснойКниги
	|ИЗ
	|	РегистрСведений.СоставыГруппАдреснойКниги КАК СоставыГруппАдреснойКниги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СегментыКонтрагентов.Контрагент КАК КонтрагентСегмента,
	|	ИСТИНА КАК ЕстьСегмент
	|ПОМЕСТИТЬ СегментыКонтрагентов
	|ИЗ
	|	РегистрСведений.СоставСегментаКонтрагентов КАК СегментыКонтрагентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА Контрагенты.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.ФизическоеЛицо)
	|			ТОГДА 3
	|		КОГДА Контрагенты.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.ИндивидуальныйПредприниматель)
	|			ТОГДА 3
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК КартинкаКонтакта,
	|	Контрагенты.Теги.(
	|		Тег КАК Тег
	|	) КАК Теги,
	|	ЕСТЬNULL(СегментыКонтрагентов.ЕстьСегмент, ЛОЖЬ) КАК ЕстьСегмент,
	|	Контрагенты.ОсновныеСведения КАК ОсновныеСведения,
	|	0 КАК Приоритет,
	|	СоставыГруппАдреснойКниги.ЕстьГруппа КАК ЕстьГруппа
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		{ЛЕВОЕ СОЕДИНЕНИЕ СегментыКонтрагентов КАК СегментыКонтрагентов
	|		ПО (СегментыКонтрагентов.КонтрагентСегмента = Контрагенты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставыГруппАдреснойКниги КАК СоставыГруппАдреснойКниги
	|		ПО (СоставыГруппАдреснойКниги.Ссылка = Контрагенты.Ссылка)}
	|ГДЕ
	|	НЕ Контрагенты.ЭтоГруппа
	|	И Контрагенты.Недействителен = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонтактныеЛица.Ссылка,
	|	4,
	|	КонтактныеЛица.Теги.(
	|		Тег
	|	),
	|	ЛОЖЬ,
	|	КонтактныеЛица.ОсновныеСведения,
	|	0,
	|	СоставыГруппАдреснойКниги.ЕстьГруппа
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|		{ЛЕВОЕ СОЕДИНЕНИЕ СоставыГруппАдреснойКниги КАК СоставыГруппАдреснойКниги
	|		ПО (СоставыГруппАдреснойКниги.Ссылка = КонтактныеЛица.Ссылка)}
	|ГДЕ
	|	НЕ КонтактныеЛица.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Лиды.Ссылка,
	|	1,
	|	Лиды.Теги.(
	|		Тег
	|	),
	|	ЛОЖЬ,
	|	Лиды.ОсновныеСведения,
	|	0,
	|	СоставыГруппАдреснойКниги.ЕстьГруппа
	|ИЗ
	|	Справочник.Лиды КАК Лиды
	|		{ЛЕВОЕ СОЕДИНЕНИЕ СоставыГруппАдреснойКниги КАК СоставыГруппАдреснойКниги
	|		ПО (СоставыГруппАдреснойКниги.Ссылка = Лиды.Ссылка)}
	|ГДЕ
	|	НЕ Лиды.ЭтоГруппа
	|	И Лиды.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантЗавершенияРаботыСЛидом.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка,
	|	6,
	|	ФизическиеЛица.КонтактнаяИнформация.(
	|		Ссылка
	|	),
	|	ЛОЖЬ,
	|	ФизическиеЛица.ОсновныеСведения,
	|	0,
	|	СоставыГруппАдреснойКниги.ЕстьГруппа
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		{ЛЕВОЕ СОЕДИНЕНИЕ СоставыГруппАдреснойКниги КАК СоставыГруппАдреснойКниги
	|		ПО (СоставыГруппАдреснойКниги.Ссылка = ФизическиеЛица.Ссылка)}
	|ГДЕ
	|	НЕ ФизическиеЛица.ЭтоГруппа";
	
	Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты И ПраваНаПросмотрАдресатов Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	АдресатыПисем.Ссылка,
		|	-1,
		|	ФизическиеЛица.КонтактнаяИнформация.(
		|		Ссылка
		|	),
		|	ЛОЖЬ,
		|	АдресатыПисем.Наименование,
		|	1,
		|	СоставыГруппАдреснойКниги.ЕстьГруппа
		|ИЗ
		|	Справочник.АдресатыПисем КАК АдресатыПисем
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиАдресатКонтактCRM КАК СвязиАдресатКонтактCRM
		|		ПО АдресатыПисем.Ссылка = СвязиАдресатКонтактCRM.Адресат
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО (СвязиАдресатКонтактCRM.КонтактCRM = ФизическиеЛица.Ссылка)
		|		{ЛЕВОЕ СОЕДИНЕНИЕ СоставыГруппАдреснойКниги КАК СоставыГруппАдреснойКниги
		|		ПО (СоставыГруппАдреснойКниги.Ссылка = АдресатыПисем.Ссылка)}
		|ГДЕ
		|	НЕ АдресатыПисем.ПометкаУдаления
		|	И СвязиАдресатКонтактCRM.КонтактCRM ЕСТЬ NULL";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаВсеАдресатыБезЛидов()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоставыГруппАдреснойКниги.КонтактCRM КАК Ссылка,
	|	ИСТИНА КАК ЕстьГруппа
	|ПОМЕСТИТЬ СоставыГруппАдреснойКниги
	|ИЗ
	|	РегистрСведений.СоставыГруппАдреснойКниги КАК СоставыГруппАдреснойКниги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СегментыКонтрагентов.Контрагент КАК КонтрагентСегмента,
	|	ИСТИНА КАК ЕстьСегмент
	|ПОМЕСТИТЬ СегментыКонтрагентов
	|ИЗ
	|	РегистрСведений.СоставСегментаКонтрагентов КАК СегментыКонтрагентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА Контрагенты.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.ФизическоеЛицо)
	|			ТОГДА 3
	|		КОГДА Контрагенты.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.ИндивидуальныйПредприниматель)
	|			ТОГДА 3
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК КартинкаКонтакта,
	|	Контрагенты.Теги.(
	|		Тег КАК Тег
	|	) КАК Теги,
	|	ЕСТЬNULL(СегментыКонтрагентов.ЕстьСегмент, ЛОЖЬ) КАК ЕстьСегмент,
	|	Контрагенты.ОсновныеСведения КАК ОсновныеСведения,
	|	0 КАК Приоритет,
	|	СоставыГруппАдреснойКниги.ЕстьГруппа КАК ЕстьГруппа
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		{ЛЕВОЕ СОЕДИНЕНИЕ СегментыКонтрагентов КАК СегментыКонтрагентов
	|		ПО (СегментыКонтрагентов.КонтрагентСегмента = Контрагенты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставыГруппАдреснойКниги КАК СоставыГруппАдреснойКниги
	|		ПО (СоставыГруппАдреснойКниги.Ссылка = Контрагенты.Ссылка)}
	|ГДЕ
	|	НЕ Контрагенты.ЭтоГруппа
	|	И Контрагенты.Недействителен = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонтактныеЛица.Ссылка,
	|	4,
	|	КонтактныеЛица.Теги.(
	|		Тег
	|	),
	|	ЛОЖЬ,
	|	КонтактныеЛица.ОсновныеСведения,
	|	0,
	|	СоставыГруппАдреснойКниги.ЕстьГруппа
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|		{ЛЕВОЕ СОЕДИНЕНИЕ СоставыГруппАдреснойКниги КАК СоставыГруппАдреснойКниги
	|		ПО (СоставыГруппАдреснойКниги.Ссылка = КонтактныеЛица.Ссылка)}
	|ГДЕ
	|	НЕ КонтактныеЛица.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка,
	|	6,
	|	ФизическиеЛица.КонтактнаяИнформация.(
	|		Ссылка
	|	),
	|	ЛОЖЬ,
	|	ФизическиеЛица.ОсновныеСведения,
	|	0,
	|	СоставыГруппАдреснойКниги.ЕстьГруппа
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		{ЛЕВОЕ СОЕДИНЕНИЕ СоставыГруппАдреснойКниги КАК СоставыГруппАдреснойКниги
	|		ПО (СоставыГруппАдреснойКниги.Ссылка = ФизическиеЛица.Ссылка)}
	|ГДЕ
	|	НЕ ФизическиеЛица.ЭтоГруппа";
	
	Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты И ПраваНаПросмотрАдресатов Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	АдресатыПисем.Ссылка,
		|	-1,
		|	ФизическиеЛица.КонтактнаяИнформация.(
		|		Ссылка
		|	),
		|	ЛОЖЬ,
		|	АдресатыПисем.Наименование,
		|	1,
		|	СоставыГруппАдреснойКниги.ЕстьГруппа
		|ИЗ
		|	Справочник.АдресатыПисем КАК АдресатыПисем
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиАдресатКонтактCRM КАК СвязиАдресатКонтактCRM
		|		ПО АдресатыПисем.Ссылка = СвязиАдресатКонтактCRM.Адресат
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО (СвязиАдресатКонтактCRM.КонтактCRM = ФизическиеЛица.Ссылка)
		|		{ЛЕВОЕ СОЕДИНЕНИЕ СоставыГруппАдреснойКниги КАК СоставыГруппАдреснойКниги
		|		ПО (СоставыГруппАдреснойКниги.Ссылка = АдресатыПисем.Ссылка)}
		|ГДЕ
		|	НЕ АдресатыПисем.ПометкаУдаления
		|	И СвязиАдресатКонтактCRM.КонтактCRM ЕСТЬ NULL";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаКонтрагенты()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоставыГруппАдреснойКниги.КонтактCRM КАК Ссылка,
	|	ИСТИНА КАК ЕстьГруппа
	|ПОМЕСТИТЬ СоставыГруппАдреснойКниги
	|ИЗ
	|	РегистрСведений.СоставыГруппАдреснойКниги КАК СоставыГруппАдреснойКниги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СегментыКонтрагентов.Контрагент КАК КонтрагентСегмента,
	|	ИСТИНА КАК ЕстьСегмент
	|ПОМЕСТИТЬ СегментыКонтрагентов
	|ИЗ
	|	РегистрСведений.СоставСегментаКонтрагентов КАК СегментыКонтрагентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА Контрагенты.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.ФизическоеЛицо)
	|			ТОГДА 3
	|		КОГДА Контрагенты.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.ИндивидуальныйПредприниматель)
	|			ТОГДА 3
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК КартинкаКонтакта,
	|	Контрагенты.Теги.(
	|		Тег КАК Тег
	|	) КАК Теги,
	|	ЕСТЬNULL(СегментыКонтрагентов.ЕстьСегмент, ЛОЖЬ) КАК ЕстьСегмент,
	|	Контрагенты.ОсновныеСведения КАК ОсновныеСведения,
	|	0 КАК Приоритет,
	|	СоставыГруппАдреснойКниги.ЕстьГруппа КАК ЕстьГруппа
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СегментыКонтрагентов КАК СегментыКонтрагентов
	|		ПО (СегментыКонтрагентов.КонтрагентСегмента = Контрагенты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставыГруппАдреснойКниги КАК СоставыГруппАдреснойКниги
	|		ПО (СоставыГруппАдреснойКниги.Ссылка = Контрагенты.Ссылка)
	|ГДЕ
	|	НЕ Контрагенты.ЭтоГруппа";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаКонтакты()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоставыГруппАдреснойКниги.КонтактCRM КАК Ссылка,
	|	ИСТИНА КАК ЕстьГруппа
	|ПОМЕСТИТЬ СоставыГруппАдреснойКниги
	|ИЗ
	|	РегистрСведений.СоставыГруппАдреснойКниги КАК СоставыГруппАдреснойКниги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактныеЛица.Ссылка КАК Ссылка,
	|	4 КАК КартинкаКонтакта,
	|	КонтактныеЛица.Теги.(
	|		Тег КАК Тег
	|	) КАК Теги,
	|	ЛОЖЬ КАК ЕстьСегмент,
	|	КонтактныеЛица.ОсновныеСведения КАК ОсновныеСведения,
	|	0 КАК Приоритет,
	|	СоставыГруппАдреснойКниги.ЕстьГруппа КАК ЕстьГруппа
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставыГруппАдреснойКниги КАК СоставыГруппАдреснойКниги
	|		ПО (СоставыГруппАдреснойКниги.Ссылка = КонтактныеЛица.Ссылка)
	|ГДЕ
	|	НЕ КонтактныеЛица.ЭтоГруппа";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаЛиды()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоставыГруппАдреснойКниги.КонтактCRM КАК Ссылка,
	|	ИСТИНА КАК ЕстьГруппа
	|ПОМЕСТИТЬ СоставыГруппАдреснойКниги
	|ИЗ
	|	РегистрСведений.СоставыГруппАдреснойКниги КАК СоставыГруппАдреснойКниги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Лиды.Ссылка КАК Ссылка,
	|	1 КАК КартинкаКонтакта,
	|	Лиды.Теги.(
	|		Тег КАК Тег
	|	) КАК Теги,
	|	ЛОЖЬ КАК ЕстьСегмент,
	|	Лиды.ОсновныеСведения КАК ОсновныеСведения,
	|	0 КАК Приоритет
	|ИЗ
	|	Справочник.Лиды КАК Лиды
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставыГруппАдреснойКниги КАК СоставыГруппАдреснойКниги
	|		ПО (СоставыГруппАдреснойКниги.Ссылка = Лиды.Ссылка)
	|ГДЕ
	|	НЕ Лиды.ЭтоГруппа
	|	И Лиды.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантЗавершенияРаботыСЛидом.ПустаяСсылка)";
	
	Возврат ТекстЗапроса;

КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаФизЛица()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоставыГруппАдреснойКниги.КонтактCRM КАК Ссылка,
	|	ИСТИНА КАК ЕстьГруппа
	|ПОМЕСТИТЬ СоставыГруппАдреснойКниги
	|ИЗ
	|	РегистрСведений.СоставыГруппАдреснойКниги КАК СоставыГруппАдреснойКниги
	|;
	|ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК Ссылка,
	|	6 КАК КартинкаКонтакта,
	|	ФизическиеЛица.КонтактнаяИнформация.(
	|		Ссылка КАК Тег
	|	) КАК Теги,
	|	ЛОЖЬ КАК ЕстьСегмент,
	|	ФизическиеЛица.ОсновныеСведения КАК ОсновныеСведения,
	|	0 КАК Приоритет
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|	ЛЕВОЕ СОЕДИНЕНИЕ СоставыГруппАдреснойКниги КАК СоставыГруппАдреснойКниги
	|		ПО (СоставыГруппАдреснойКниги.Ссылка = ФизическиеЛица.Ссылка)
	|ГДЕ
	|	НЕ ФизическиеЛица.ЭтоГруппа";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СерверныеОбработчикиКомандФормы

&НаСервере
Процедура ОчиститьВыбранныхАдресатовСервер()
	ТекущаяТаблицаВыбранных = ТекущаяТаблицаПолучателей();
	ТекущаяТаблицаВыбранных.Очистить();
	УстановитьТекущуюСтраницуПереключателя();
КонецПроцедуры

&НаСервере
Процедура ОчиститьНезаполненныеСервер()
	
	ТекущаяТаблицаПолучателей = ТекущаяТаблицаПолучателей();
	
	Если ТекущаяТаблицаПолучателей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоАдресатов = ТекущаяТаблицаПолучателей.Количество() - 1;
	
	Пока КоличествоАдресатов <> 0 Цикл
		Если ЗначениеЗаполнено(ТекущаяТаблицаПолучателей[КоличествоАдресатов].АдресатПисьма) Тогда
			КоличествоАдресатов = КоличествоАдресатов - 1;
			Продолжить;
		КонецЕсли;
		
		ТекущаяТаблицаПолучателей.Удалить(ТекущаяТаблицаПолучателей[КоличествоАдресатов]);
		КоличествоАдресатов = КоличествоАдресатов - 1;
	КонецЦикла;
	
	УстановитьТекущуюСтраницуПереключателя();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПереходПоСсылкеВСписке(Элемент, Поле, СтандартнаяОбработка)
	
	ИмяСтроки = СтрШаблон("%1СвязьCRM",Элемент.Имя);
	
	Если Поле.Имя <> ИмяСтроки Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	СвязанныйКонтакт = Элемент.ТекущиеДанные.СвязьCRM;
	ТаблицаСписка = ЭтотОбъект[Элемент.Имя];
	ВыбранныйМассив = ТаблицаСписка.НайтиСтроки(Новый Структура("КонтактCRM", СвязанныйКонтакт));
	
	Если ВыбранныйМассив.Количество() = 0 Тогда
		Текст = СтрШаблон(НСтр("ru = 'Адресат %1 был удален из выбранных'"), СвязанныйКонтакт);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Возврат;
	КонецЕсли;
	
	ЕстьОтмеченныйАдресат = Ложь;
	Для Каждого Адресат Из ВыбранныйМассив Цикл
		Если НЕ Адресат.Выбран Тогда
			Продолжить;
		КонецЕсли;
		Элемент.ТекущаяСтрока = Адресат;
	КонецЦикла;
	
	Если НЕ ЕстьОтмеченныйАдресат Тогда
		Элемент.ТекущаяСтрока = ВыбранныйМассив[0];
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСнятьПометкиАдресатам(Отбор, ЗначениеПометки)
	
	ТекущаяТаблицаПолучателей = ТекущаяТаблицаПолучателей();
	Для Каждого Адресат Из ТекущаяТаблицаПолучателей Цикл
		
		Если Отбор = "Все" Тогда
			Адресат.Выбран = ЗначениеПометки;
			Продолжить;
		КонецЕсли;
		
		Если Отбор = "Контрагенты" И (Адресат.КартинкаКонтакта = 2 ИЛИ Адресат.КартинкаКонтакта = 3) Тогда
			Адресат.Выбран = ЗначениеПометки;
			Продолжить;
		КонецЕсли;
		
		Если Отбор = "Контакты" И (Адресат.КартинкаКонтакта = 4) Тогда
			Адресат.Выбран = ЗначениеПометки;
			Продолжить;
		КонецЕсли;
		
		Если Отбор = "Лиды" И (Адресат.КартинкаКонтакта = 1) Тогда
			Адресат.Выбран = ЗначениеПометки;
			Продолжить;
		КонецЕсли;
		
		Если Отбор = "ФизЛица" И (Адресат.КартинкаКонтакта = 6) Тогда
			Адресат.Выбран = ЗначениеПометки;
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьТекущуюСтраницуПереключателя();
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиВВыбранныеСервер(ВыбранныеАдресаты)
	
	ТекущаяТаблицаПолучателей = ТекущаяТаблицаПолучателей();
	Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		ПеренестиАдресатовЭлектроннойПочтыВВыбранные(ВыбранныеАдресаты, ТекущаяТаблицаПолучателей);
	Иначе
		ПеренестиАдресатовSMSВВыбранные(ВыбранныеАдресаты, ТекущаяТаблицаПолучателей);
	КонецЕсли;
	
	УстановитьТекущуюСтраницуПереключателя();
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиАдресатовЭлектроннойПочтыВВыбранные(ВыбранныеАдресаты, ТаблицаВыбранныхАдресатов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СвязиАдресатКонтактCRM.КонтактCRM КАК ВладелецКИ,
	|	СвязиАдресатКонтактCRM.КонтактCRM КАК КонтактCRM,
	|	СвязиАдресатКонтактCRM.Адресат КАК Адресат,
	|	АдресатыПисем.Адресат КАК АдресатКИ
	|ИЗ
	|	РегистрСведений.СвязиАдресатКонтактCRM КАК СвязиАдресатКонтактCRM
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АдресатыПисем КАК АдресатыПисем
	|		ПО СвязиАдресатКонтактCRM.Адресат = АдресатыПисем.Ссылка
	|ГДЕ
	|	СвязиАдресатКонтактCRM.КонтактCRM В(&ВыбранныеАдресаты)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АдресатыПисем.Ссылка,
	|	АдресатыПисем.Наименование,
	|	АдресатыПисем.Ссылка,
	|	АдресатыПисем.Адресат
	|ИЗ
	|	Справочник.АдресатыПисем КАК АдресатыПисем
	|ГДЕ
	|	АдресатыПисем.Ссылка В(&ВыбранныеАдресаты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвязиКонтрагентКонтакт.Контакт КАК Владелец,
	|	СвязиКонтрагентКонтакт.Контрагент КАК Связь,
	|	СвязиАдресатКонтактCRM.Адресат КАК Адресат,
	|	АдресатыПисем.Адресат КАК АдресатКИ
	|ИЗ
	|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних(, Контакт В (&ВыбранныеАдресаты)) КАК СвязиКонтрагентКонтакт
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиАдресатКонтактCRM КАК СвязиАдресатКонтактCRM
	|		ПО (СвязиАдресатКонтактCRM.КонтактCRM = СвязиКонтрагентКонтакт.Контрагент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АдресатыПисем КАК АдресатыПисем
	|		ПО (СвязиАдресатКонтактCRM.Адресат = АдресатыПисем.Ссылка)
	|ГДЕ
	|	НЕ СвязиКонтрагентКонтакт.СвязьНедействительна
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СвязиКонтрагентКонтакт.Контрагент,
	|	СвязиКонтрагентКонтакт.Контакт,
	|	СвязиАдресатКонтактCRM.Адресат,
	|	АдресатыПисем.Адресат
	|ИЗ
	|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних(, Контрагент В (&ВыбранныеАдресаты)) КАК СвязиКонтрагентКонтакт
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиАдресатКонтактCRM КАК СвязиАдресатКонтактCRM
	|		ПО (СвязиАдресатКонтактCRM.КонтактCRM = СвязиКонтрагентКонтакт.Контакт)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АдресатыПисем КАК АдресатыПисем
	|		ПО (СвязиАдресатКонтактCRM.Адресат = АдресатыПисем.Ссылка)
	|ГДЕ
	|	НЕ СвязиКонтрагентКонтакт.СвязьНедействительна
	|	И НЕ СвязиАдресатКонтактCRM.Адресат ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонтактыЛидов.Владелец,
	|	КонтактыЛидов.Ссылка,
	|	СвязиАдресатКонтактCRM.Адресат,
	|	АдресатыПисем.Адресат
	|ИЗ
	|	Справочник.КонтактыЛидов КАК КонтактыЛидов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиАдресатКонтактCRM КАК СвязиАдресатКонтактCRM
	|		ПО КонтактыЛидов.Ссылка = СвязиАдресатКонтактCRM.КонтактCRM
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АдресатыПисем КАК АдресатыПисем
	|		ПО (СвязиАдресатКонтактCRM.Адресат = АдресатыПисем.Ссылка)
	|ГДЕ
	|	КонтактыЛидов.Владелец В(&ВыбранныеАдресаты)
	|	И НЕ СвязиАдресатКонтактCRM.Адресат ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ВыбранныеАдресаты", ВыбранныеАдресаты);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ТаблицаКИВладелец = РезультатЗапроса[0].Выгрузить();
	ТаблицаКИСвязи = РезультатЗапроса[1].Выгрузить();
	
	КонтрагентыСвязи = ТаблицаКИСвязи.ВыгрузитьКолонку("Связь");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КонтрагентыСвязи, ВыбранныеАдресаты);
	
	ВидыКонтрагентовСсылок = ВидыКонтрагентов(КонтрагентыСвязи);
	Для Каждого Адресат Из ВыбранныеАдресаты Цикл
				
		КИАдресата = ТаблицаКИВладелец.НайтиСтроки(Новый Структура("ВладелецКИ", Адресат));
				
		Для Каждого КИ Из КИАдресата Цикл
			Отбор = Новый Структура("КонтактCRM, АдресатПисьма", Адресат, КИ.Адресат);
			АдресатЕстьВТаблице = ТаблицаВыбранныхАдресатов.НайтиСтроки(Отбор);
			
			Если АдресатЕстьВТаблице.Количество() <> 0 Тогда
				АдресатЕстьВТаблице[0].Выбран = Истина;
				АдресатЕстьВТаблице[0].СвязьCRM = Неопределено;
				Продолжить;
			КонецЕсли;
			
			НовыйАдресат = ТаблицаВыбранныхАдресатов.Добавить();
			НовыйАдресат.ПредставлениеКонтакта = Строка(КИ.КонтактCRM);
			НовыйАдресат.КонтактCRM = Адресат;
			НовыйАдресат.Выбран = Истина;
			НовыйАдресат.АдресатПисьма = КИ.Адресат;
			НовыйАдресат.КартинкаКонтакта = КартинкаУчастникаПоТипуКонтакта(Адресат, ВидыКонтрагентовСсылок);
			НовыйАдресат.АдресатКИ = КИ.АдресатКИ;
		КонецЦикла;
		
		Если КИАдресата.Количество() = 0 Тогда
			
			Отбор = Новый Структура("КонтактCRM, АдресатПисьма", Адресат, Неопределено);
			АдресатЕстьВТаблице = ТаблицаВыбранныхАдресатов.НайтиСтроки(Отбор);
			
			Если АдресатЕстьВТаблице.Количество() <> 0 Тогда
				АдресатЕстьВТаблице[0].СвязьCRM = Неопределено;
				Продолжить;
			КонецЕсли;

			НовыйАдресат = ТаблицаВыбранныхАдресатов.Добавить();
			НовыйАдресат.ПредставлениеКонтакта = Строка(Адресат);
			НовыйАдресат.КартинкаКонтакта = КартинкаУчастникаПоТипуКонтакта(Адресат, ВидыКонтрагентовСсылок);
			НовыйАдресат.КонтактCRM = Адресат;
			
		КонецЕсли;
		
		КИСвязей = ТаблицаКИСвязи.НайтиСтроки(Новый Структура("Владелец", Адресат));
		Для Каждого КИ Из КИСвязей Цикл
			
			Отбор = Новый Структура("КонтактCRM, АдресатПисьма", КИ.Связь, КИ.Адресат);
			АдресатЕстьВТаблице = ТаблицаВыбранныхАдресатов.НайтиСтроки(Отбор);
			
			Если АдресатЕстьВТаблице.Количество() <> 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйАдресат = ТаблицаВыбранныхАдресатов.Добавить();
			НовыйАдресат.ПредставлениеКонтакта = Строка(КИ.Связь);
			НовыйАдресат.КонтактCRM = КИ.Связь;
			НовыйАдресат.АдресатПисьма = КИ.Адресат;
			НовыйАдресат.СвязьCRM = Адресат;
			НовыйАдресат.КартинкаКонтакта = КартинкаУчастникаПоТипуКонтакта(КИ.Связь, ВидыКонтрагентовСсылок);
			НовыйАдресат.АдресатКИ = КИ.АдресатКИ;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиАдресатовSMSВВыбранные(ВыбранныеАдресаты, ТаблицаВыбранныхАдресатов)
	МассивКонтрагентов = Новый Массив;
	МассивКонтактов = Новый Массив;
	МассивЛидов = Новый Массив;
	МассивФизЛиц = Новый Массив;
	
	Для Каждого Адресат Из ВыбранныеАдресаты Цикл
		Если ТипЗнч(Адресат) = Тип("СправочникСсылка.Контрагенты") Тогда
			МассивКонтрагентов.Добавить(Адресат);
		КонецЕсли;
		
		Если ТипЗнч(Адресат) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			МассивКонтактов.Добавить(Адресат);
		КонецЕсли;
		
		Если ТипЗнч(Адресат) = Тип("СправочникСсылка.Лиды") Тогда
			МассивЛидов.Добавить(Адресат);
		КонецЕсли;
		
		Если ТипЗнч(Адресат) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			МассивФизЛиц.Добавить(Адресат);
		КонецЕсли;
	КонецЦикла;
	
	ВидыКонтрагентовСсылок = ВидыКонтрагентов(МассивКонтрагентов);
	ДобавитьВыбранныхКонтрагентов(МассивКонтрагентов, ВидыКонтрагентовСсылок);
	ДобавитьВыбранныхКонтактов(МассивКонтактов);
	ДобавитьВыбранныхЛидов(МассивЛидов);
	ДобавитьВыбранныхФизЛиц(МассивФизЛиц);
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиВсехВВыбранныеСервер()
	
	ТаблицаВыбранныхАдресатов = ТекущаяТаблицаПолучателей();
	СхемаСКД = Элементы.Список.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	НастройкиСКД = Элементы.Список.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаСКД, НастройкиСКД,,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений ;
	
	ТаблицаДанныеСписка = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаДанныеСписка);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		ПеренестиАдресатовЭлектроннойПочтыВВыбранные(ТаблицаДанныеСписка.ВыгрузитьКолонку("Ссылка"), ТаблицаВыбранныхАдресатов);
	Иначе
		ПеренестиАдресатовSMSВВыбранные(ТаблицаДанныеСписка.ВыгрузитьКолонку("Ссылка"), ТаблицаВыбранныхАдресатов);
	КонецЕсли;
	
	УстановитьТекущуюСтраницуПереключателя();
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УправлениеФормой()
	
	Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Элементы.ВыбранныеАдресатыСкрытаяКопияКонтекстноеМенюГруппаПеренос.Видимость = Ложь;
		Элементы.ВыбранныеАдресатыКопияКонтекстноеМенюГруппаКнопки.Видимость = Ложь;
		Элементы.ВыбранныеАдресатыКомуКонтекстноеМенюГруппаКнопки.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ТипПолучателя.Видимость = НЕ ЭтоОтборИзРассылки 
		И ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	
	Если ПроверитьОтборУстановлен(ЭтотОбъект,"ГруппаФильтры", "ДанныеМеток") Тогда
		Элементы.ГруппаФильтрыВсплывающая.Заголовок = НСтр("ru = 'Фильтры (*)'");
	Иначе
		Элементы.ГруппаФильтрыВсплывающая.Заголовок = НСтр("ru = 'Фильтры'");
	КонецЕсли;
	
	ВыбраноКому = ВыбранныеАдресатыКому.НайтиСтроки(Новый Структура("Выбран", Истина));
	ВыбраноКопия = ВыбранныеАдресатыКопия.НайтиСтроки(Новый Структура("Выбран", Истина));
	ВыбраноСкрытаяКопия = ВыбранныеАдресатыСкрытаяКопия.НайтиСтроки(Новый Структура("Выбран", Истина));
	
	ТипКому = Элементы.ТипПолучателя.СписокВыбора.НайтиПоЗначению(ЗначениеКому);
	ТипКопия = Элементы.ТипПолучателя.СписокВыбора.НайтиПоЗначению(ЗначениеКопия);
	ТипСкрытаяКопия = Элементы.ТипПолучателя.СписокВыбора.НайтиПоЗначению(ЗначениеСкрытаяКопия);
		
	ТипКому.Представление = СтрШаблон(НСтр("ru = '%1 (%2)'"), 
		НСтр("ru = 'Кому'"), ВыбраноКому.Количество());
		
	ТипКопия.Представление = СтрШаблон(НСтр("ru = '%1 (%2)'"), 
		НСтр("ru = 'Копия'"), ВыбраноКопия.Количество());
		
	ТипСкрытаяКопия.Представление = СтрШаблон(НСтр("ru = '%1 (%2)'"), 
		НСтр("ru = 'Скрытая копия'"), ВыбраноСкрытаяКопия.Количество());
		
	УстановитьТекущуюСтраницуПереключателя();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницуПереключателя(ПрефиксПолучателей = "")
	
	Если ПрефиксПолучателей = "" Тогда
		ПрефиксПолучателей = ПрефиксПолучателей();
	КонецЕсли;
	
	ТаблицаВыбранныхАдресатов = ТекущаяТаблицаПолучателей(ПрефиксПолучателей);
	Элементы.СтраницыПереключатель.ТекущаяСтраница = Элементы["Переключатель"+ПрефиксПолучателей];
	
	Если ТаблицаВыбранныхАдресатов.Количество() = 0 Тогда
		Элементы["Страницы"+ПрефиксПолучателей].ТекущаяСтраница = Элементы["СтраницаДекорация"+ПрефиксПолучателей];
	Иначе
		Элементы["Страницы"+ПрефиксПолучателей].ТекущаяСтраница = Элементы["СтраницаСписок"+ПрефиксПолучателей];
	КонецЕсли;
	
	ТекущийТипПолучателя = Элементы.ТипПолучателя.СписокВыбора.НайтиПоЗначению(ТипПолучателя);
	УстановитьЗаголовокПереключателя(ТекущийТипПолучателя, ТаблицаВыбранныхАдресатов, ПрефиксПолучателей);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокПереключателя(ТекущийТипПолучателя, ТаблицаВыбранныхАдресатов, ПрефиксПолучателей)
	
	ВыбраноКому = ТаблицаВыбранныхАдресатов.НайтиСтроки(Новый Структура("Выбран", Истина));
	ЗаголовокПереключателя = Элементы["Страницы"+ПрефиксПолучателей].ТекущаяСтраница.Заголовок;
	
	ТекущийТипПолучателя.Представление = СтрШаблон(НСтр("ru = '%1 (%2)'"), ЗаголовокПереключателя, ВыбраноКому.Количество());
	
КонецПроцедуры

&НаСервере
Функция ПрефиксПолучателей()
	
	Если ТипПолучателя = ЗначениеКому Тогда
		Возврат "Кому"; //Не локализуется - префикс для определения текущих реквизитов
	ИначеЕсли ТипПолучателя = ЗначениеКопия Тогда
		Возврат "Копия";
	ИначеЕсли ТипПолучателя = ЗначениеСкрытаяКопия Тогда
		Возврат "СкрытаяКопия";
	Иначе
		Возврат "Кому";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция КартинкаУчастникаПоТипуКонтакта(Контакт, ВидыКонтрагентов)
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Возврат 4;
	ИначеЕсли ВидыКонтрагентов[Контакт] = Перечисления.ВидыКонтрагентов.ФизическоеЛицо Тогда
		Возврат 3;
	ИначеЕсли ВидыКонтрагентов[Контакт] = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель Тогда
		Возврат 3;
	ИначеЕсли ВидыКонтрагентов[Контакт] <> Неопределено Тогда
		Возврат 2;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.АдресатыПисем") ИЛИ НЕ ЗначениеЗаполнено(Контакт) Тогда
		Возврат 0;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Возврат 6;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
		Возврат 0;
	Иначе
		Возврат 1;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ВидыКонтрагентов(Контрагенты)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.ВидКонтрагента КАК ВидКонтрагента
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка В(&Контрагенты)");
	
	Запрос.УстановитьПараметр("Контрагенты", Контрагенты);
	
	ВидыКонтрагентов = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидыКонтрагентов[Выборка.Ссылка] = Выборка.ВидКонтрагента;
	КонецЦикла;
	
	Возврат ВидыКонтрагентов;
	
КонецФункции

&НаСервере
Функция ТекущаяТаблицаПолучателей(ПрефиксПолучателей = "")
	
	Если ПрефиксПолучателей = "" Тогда
		ПрефиксПолучателей = ПрефиксПолучателей();
	КонецЕсли;
	
	ТаблицаВыбранныхАдресатов = ЭтотОбъект["ВыбранныеАдресаты"+ПрефиксПолучателей];
	Возврат ТаблицаВыбранныхАдресатов;
	
КонецФункции

&НаСервере
Функция АдресВыбранныхАдресатовВоВременномХранилище()
	
	ТаблицаАдресатов = Новый ТаблицаЗначений;
	ТаблицаАдресатов.Колонки.Добавить("Контакт", Новый ОписаниеТипов("СправочникСсылка.Контрагенты,СправочникСсылка.КонтактныеЛица,СправочникСсылка.Лиды,Строка,СправочникСсылка.КонтактыЛидов, СправочникСсылка.ФизическиеЛица, СправочникСсылка.АдресатыПисем"));
	ТаблицаАдресатов.Колонки.Добавить("КакСвязаться", Новый ОписаниеТипов("Строка, СправочникСсылка.АдресатыПисем"));
	ТаблицаАдресатов.Колонки.Добавить("ТипПолучателя", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыПолучателейЭлектронногоПисьма"));
	
	Для Каждого Адресат Из ВыбранныеАдресатыКому Цикл
		
		Если НЕ Адресат.Выбран Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаАдресатов.Добавить();
		Если ЗначениеЗаполнено(Адресат.КонтактCRM) Тогда
			НоваяСтрока.Контакт = Адресат.КонтактCRM;
		Иначе
			НоваяСтрока.Контакт = Адресат.АдресатПисьма;
		КонецЕсли;
		
		НоваяСтрока.КакСвязаться = Адресат.АдресатКИ;
		НоваяСтрока.ТипПолучателя = Перечисления.ТипыПолучателейЭлектронногоПисьма.Кому;
	КонецЦикла;
	
	Для Каждого Адресат Из ВыбранныеАдресатыКопия Цикл
		
		Если НЕ Адресат.Выбран Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаАдресатов.Добавить();
		Если ЗначениеЗаполнено(Адресат.КонтактCRM) Тогда
			НоваяСтрока.Контакт = Адресат.КонтактCRM;
		Иначе
			НоваяСтрока.Контакт = Адресат.АдресатПисьма;
		КонецЕсли;
		НоваяСтрока.КакСвязаться = Адресат.АдресатКИ;
		НоваяСтрока.ТипПолучателя = Перечисления.ТипыПолучателейЭлектронногоПисьма.Копия;
	КонецЦикла; 
	
	Для Каждого Адресат Из ВыбранныеАдресатыСкрытаяКопия Цикл
		
		Если НЕ Адресат.Выбран Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаАдресатов.Добавить();
		Если ЗначениеЗаполнено(Адресат.КонтактCRM) Тогда
			НоваяСтрока.Контакт = Адресат.КонтактCRM;
		Иначе
			НоваяСтрока.Контакт = Адресат.АдресатПисьма;
		КонецЕсли;
		
		НоваяСтрока.КакСвязаться = Адресат.АдресатКИ;
		НоваяСтрока.ТипПолучателя = Перечисления.ТипыПолучателейЭлектронногоПисьма.СкрытаяКопия;
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаАдресатов, Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
	
		ХранилищеСистемныхНастроек.Сохранить("ГруппаОтбораАдреснойКниги", 
			"ГруппаОтбораАдреснойКниги_АдреснаяКнига",
			ОтборИерархияТекущая);
		
	КонецЕсли;
	
	Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Пометка = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(ИмяФормы,
		"ВключаяВложенные",
		Ложь);
		
КонецПроцедуры

&НаСервере
Процедура ДополнитьВыбранныхАдресатов(АдресТаблицаВыбранныхАдресатов)
	
	ТаблицаДляДополнения = ПолучитьИзВременногоХранилища(АдресТаблицаВыбранныхАдресатов);
	
	Для Каждого Адресат Из ТаблицаДляДополнения Цикл 
		
		Если НЕ ЗначениеЗаполнено(Адресат.Контакт) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон ИЛИ ЭтоОтборИзРассылки Тогда
			НоваяСтрока = ВыбранныеАдресатыКому.Добавить();
			НоваяСтрока.КонтактCRM = Адресат.Контакт;
			НоваяСтрока.ПредставлениеКонтакта = Строка(Адресат.Контакт);
			НоваяСтрока.АдресатПисьма = Адресат.КакСвязаться;
			НоваяСтрока.АдресатКИ = Адресат.КакСвязаться;
			НоваяСтрока.Выбран = Истина;
			НоваяСтрока.КартинкаКонтакта = Адресат.ИндексКартинки;
			Продолжить;
		КонецЕсли;
		
		Если Адресат.ТипПолучателяЭлектронногоПисьма = Перечисления.ТипыПолучателейЭлектронногоПисьма.Кому Тогда
			НоваяСтрока = ВыбранныеАдресатыКому.Добавить();
			НоваяСтрока.КонтактCRM = Адресат.КонтактCRM;
			Если ЗначениеЗаполнено(Адресат.КонтактCRM) Тогда
				НоваяСтрока.ПредставлениеКонтакта = Строка(Адресат.КонтактCRM);
			Иначе
				НоваяСтрока.ПредставлениеКонтакта = Строка(Адресат.Контакт);
			КонецЕсли;
			НоваяСтрока.АдресатПисьма = Адресат.Контакт;
			НоваяСтрока.АдресатКИ = Адресат.КакСвязаться;
			НоваяСтрока.Выбран = Истина;
			НоваяСтрока.КартинкаКонтакта = Адресат.ИндексКартинки;
		ИначеЕсли Адресат.ТипПолучателяЭлектронногоПисьма = Перечисления.ТипыПолучателейЭлектронногоПисьма.Копия Тогда
			НоваяСтрока = ВыбранныеАдресатыКопия.Добавить();
			Если ЗначениеЗаполнено(Адресат.КонтактCRM) Тогда
				НоваяСтрока.ПредставлениеКонтакта = Строка(Адресат.КонтактCRM);
			Иначе
				НоваяСтрока.ПредставлениеКонтакта = Строка(Адресат.Контакт);
			КонецЕсли;
			
			НоваяСтрока.ПредставлениеКонтакта = Строка(Адресат.КонтактCRM);
			НоваяСтрока.АдресатПисьма = Адресат.Контакт;
			НоваяСтрока.АдресатКИ = Адресат.КакСвязаться;
			НоваяСтрока.Выбран = Истина;
			НоваяСтрока.КартинкаКонтакта = Адресат.ИндексКартинки;
		ИначеЕсли Адресат.ТипПолучателяЭлектронногоПисьма = Перечисления.ТипыПолучателейЭлектронногоПисьма.СкрытаяКопия Тогда
			НоваяСтрока = ВыбранныеАдресатыСкрытаяКопия.Добавить();
			Если ЗначениеЗаполнено(Адресат.КонтактCRM) Тогда
				НоваяСтрока.ПредставлениеКонтакта = Строка(Адресат.КонтактCRM);
			Иначе
				НоваяСтрока.ПредставлениеКонтакта = Строка(Адресат.Контакт);
			КонецЕсли;
			
			НоваяСтрока.ПредставлениеКонтакта = Строка(Адресат.КонтактCRM);
			НоваяСтрока.АдресатПисьма = Адресат.Контакт;
			НоваяСтрока.АдресатКИ = Адресат.КакСвязаться;
			НоваяСтрока.Выбран = Истина;
			НоваяСтрока.КартинкаКонтакта = Адресат.ИндексКартинки;
		Иначе
			НоваяСтрока = ВыбранныеАдресатыКому.Добавить();
			Если ЗначениеЗаполнено(Адресат.КонтактCRM) Тогда
				НоваяСтрока.ПредставлениеКонтакта = Строка(Адресат.КонтактCRM);
			Иначе
				НоваяСтрока.ПредставлениеКонтакта = Строка(Адресат.Контакт);
			КонецЕсли;
			НоваяСтрока.ПредставлениеКонтакта = Строка(Адресат.КонтактCRM);
			НоваяСтрока.АдресатПисьма = Адресат.Контакт;
			НоваяСтрока.АдресатКИ = Адресат.КакСвязаться;
			НоваяСтрока.Выбран = Истина;
			НоваяСтрока.КартинкаКонтакта = Адресат.ИндексКартинки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
