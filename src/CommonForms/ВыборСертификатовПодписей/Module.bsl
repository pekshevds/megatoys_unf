#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		Если ТипЗнч(Параметры.Организация) = Тип("СправочникСсылка.Организации") Тогда
			Организации.Добавить(Параметры.Организация);
		Иначе
			Организации.ЗагрузитьЗначения(Параметры.Организация);
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Организации.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	НЕ Организации.ПометкаУдаления";
		Организации.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организации) Тогда
		Заголовок = СтрШаблон(
			НСтр("ru = 'Сертификаты подписей (%1)'"),
			Организации);
	КонецЕсли;
	
	ПодписыватьСертификатамиГоловнойОрганизации = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ЭлектронныйКадровыйДокументооборот", "ПодписыватьСертификатамиГоловнойОрганизации");
	
	ПодписыватьСертификатамиГоловнойОрганизацииПрежняя = ПодписыватьСертификатамиГоловнойОрганизации;
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьСписокСертификатовВЛичномХранилище();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы
		И ПодписыватьСертификатамиГоловнойОрганизации <> ПодписыватьСертификатамиГоловнойОрганизацииПрежняя Тогда
		
		СохранитьНастройкуПодписыватьСертификатамиГоловнойОрганизации(ПодписыватьСертификатамиГоловнойОрганизации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыСертификатыПодписей

&НаКлиенте
Процедура СертификатыПодписейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элементы.СертификатыПодписей.ТекущиеДанные <> Неопределено Тогда
		Элементы.СертификатыПодписей.ТекущиеДанные.Использовать =
			Не Элементы.СертификатыПодписей.ТекущиеДанные.Использовать;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подписать(Команда)
	
	Сертификаты = Новый Соответствие;
	ЗаполнитьОтобранныеСертификаты(Сертификаты, СертификатыПодписей);
	
	Если Не ЗначениеЗаполнено(Сертификаты) Тогда
		ТекстПредупреждения = НСтр("ru = 'Не отмечен ни один сертификат'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Закрыть(Сертификаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьНеДействительные(Команда)
	
	Элементы.ФормаПоказыватьНеДействительные.Пометка = Не Элементы.ФормаПоказыватьНеДействительные.Пометка;
	ПоказыватьНеДействительные = Элементы.ФормаПоказыватьНеДействительные.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписыватьСертификатамиГоловнойОрганизации(Команда)
	
	ПодписыватьСертификатамиГоловнойОрганизации = Не ПодписыватьСертификатамиГоловнойОрганизации;
	УстановитьОтображениеПодписыватьСертификатамиГоловнойОрганизации(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьДоступнымиСертификатами()
	
	ДанныеТекущейСтроки = Неопределено;
	Если Элементы.СертификатыПодписей.ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = СертификатыПодписей.НайтиПоИдентификатору(Элементы.СертификатыПодписей.ТекущаяСтрока);
		Если ТекущиеДанные <> Неопределено Тогда
			ДанныеТекущейСтроки = ДанныеСтрокиСертификата(ТекущиеДанные);
		КонецЕсли;
	КонецЕсли;
	
	ВыбранныеСтроки = ВыбранныеСтрокиСертификатов(СертификатыПодписей);
	
	СертификатыПодписей.ПолучитьЭлементы().Очистить();
	ПредставителиСертификатов.Очистить();
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	Если ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		ФизическоеЛицоПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "ФизическоеЛицо");
	КонецЕсли;
	
	Если Организации.Количество() > 0 Тогда
		ОтборОрганизаций = Организации.ВыгрузитьЗначения();
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОтборОрганизаций", ОтборОрганизаций);
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Организации.Ссылка КАК Ссылка,
			|	Организации.Наименование КАК Наименование,
			|	ВЫБОР
			|		КОГДА Организации.Ссылка = Организации.ГоловнаяОрганизация
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК Порядок,
			|	ИСТИНА КАК ОрганизацияОтбора
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.Ссылка В(&ОтборОрганизаций)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Организации.ГоловнаяОрганизация,
			|	Организации.ГоловнаяОрганизация.Наименование,
			|	0,
			|	ЛОЖЬ
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.Ссылка В(&ОтборОрганизаций)
			|	И Организации.ГоловнаяОрганизация <> Организации.Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок,
			|	Наименование";
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		Пока Выборка.Следующий() Цикл
			Если ОтборОрганизаций.Найти(Выборка.Ссылка) = Неопределено Тогда
				ОтборОрганизаций.Добавить(Выборка.Ссылка);
			КонецЕсли;
			СтрокаОрганизации = СертификатыПодписей.ПолучитьЭлементы().Добавить();
			СтрокаОрганизации.Организация = Выборка.Ссылка;
			СтрокаОрганизации.Действителен = Истина;
			СтрокаОрганизации.Доступен = Ложь;
			СтрокаОрганизации.ОрганизацияОтбора = Выборка.ОрганизацияОтбора;
		КонецЦикла;
	Иначе
		ОтборОрганизаций = Новый Массив;
	КонецЕсли;
	ОтборОрганизацийЗапроса = ОбщегоНазначения.СкопироватьРекурсивно(ОтборОрганизаций);
	ОтборОрганизацийЗапроса.Добавить(Неопределено);
	ОтборОрганизацийЗапроса.Добавить(Справочники.Организации.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ОтборОрганизаций", ОтборОрганизацийЗапроса);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка КАК Ссылка,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.ДействителенДо КАК ДействителенДо,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Отпечаток КАК Отпечаток,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Отозван КАК Отозван,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Организация КАК Организация,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА СертификатыКлючейЭлектроннойПодписиИШифрования.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		КОГДА СертификатыКлючейЭлектроннойПодписиИШифрования.Организация = НЕОПРЕДЕЛЕНО
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЗаполненаОрганизация,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
		|ГДЕ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Подписание
		|	И СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователь = &Пользователь
		|	И НЕ СертификатыКлючейЭлектроннойПодписиИШифрования.ПометкаУдаления
		|	И СертификатыКлючейЭлектроннойПодписиИШифрования.Организация В(&ОтборОрганизаций)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи.Ссылка,
		|	СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи.Ссылка.ДействителенДо,
		|	СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи.Ссылка.Отпечаток,
		|	СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи.Ссылка.Отозван,
		|	СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи.Ссылка.Организация,
		|	СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи.Ссылка.ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи.Ссылка.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		КОГДА СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи.Ссылка.Организация = НЕОПРЕДЕЛЕНО
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ,
		|	СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи.Ссылка.Организация.ГоловнаяОрганизация
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователи КАК СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи
		|ГДЕ
		|	СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи.Ссылка.Подписание
		|	И СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи.Пользователь = &Пользователь
		|	И НЕ СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи.Ссылка.ПометкаУдаления
		|	И СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи.Ссылка.Организация В(&ОтборОрганизаций)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаполненаОрганизация УБЫВ,
		|	ГоловнаяОрганизация,
		|	Организация,
		|	ФизическоеЛицо,
		|	ДействителенДо";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		Комментарий = "";
		
		Если ОтборОрганизаций.Количество() > 0 Тогда
			Если ЗначениеЗаполнено(Выборка.Организация) Тогда
				КоллекцияСертификатов = СтрокаОрганизации(Выборка.Организация);
				ЗаполнитьСтрокуСертификата(КоллекцияСертификатов.ПолучитьЭлементы().Добавить(), Выборка);
			Иначе
				Для Каждого ЗначенияОрганизации Из ОтборОрганизаций Цикл
					КоллекцияСертификатов = СтрокаОрганизации(ЗначенияОрганизации);
					ЗаполнитьСтрокуСертификата(КоллекцияСертификатов.ПолучитьЭлементы().Добавить(), Выборка);
				КонецЦикла;
			КонецЕсли;
		Иначе
			ЗаполнитьСтрокуСертификата(СертификатыПодписей.ПолучитьЭлементы().Добавить(), Выборка);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПредставителиСертификатов) Тогда
		
		Запрос.УстановитьПараметр("ПредставителиСертификатов", ПредставителиСертификатов);
		Запрос.Текст =
			"ВЫБРАТЬ
			|	МашиночитаемыеДоверенностиКЭДО.Ссылка КАК Ссылка,
			|	МашиночитаемыеДоверенностиКЭДО.Доверитель КАК Доверитель,
			|	МашиночитаемыеДоверенностиКЭДО.Представитель КАК Представитель,
			|	МашиночитаемыеДоверенностиКЭДО.ДатаОкончания КАК ДатаОкончания,
			|	ЕСТЬNULL(СостоянияМЧД.ДатаОтзыва, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОтзыва,
			|	ЕСТЬNULL(СостоянияМЧД.ДатаРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРегистрации,
			|	МашиночитаемыеДоверенностиКЭДО.Передоверие КАК Передоверие,
			|	МашиночитаемыеДоверенностиКЭДО.ПодписанЭП КАК ПодписанЭП,
			|	МашиночитаемыеДоверенностиКЭДО.ОтветственныйДоверителя КАК ОтветственныйДоверителя
			|ИЗ
			|	Справочник.МашиночитаемыеДоверенностиКЭДО КАК МашиночитаемыеДоверенностиКЭДО
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияМЧДКЭДО КАК СостоянияМЧД
			|		ПО МашиночитаемыеДоверенностиКЭДО.Ссылка = СостоянияМЧД.МЧД
			|ГДЕ
			|	МашиночитаемыеДоверенностиКЭДО.Представитель В(&ПредставителиСертификатов)
			|	И НЕ МашиночитаемыеДоверенностиКЭДО.ПометкаУдаления";
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		Пока Выборка.Следующий() Цикл
			ОрганизацияМЧД = ЭлектроннаяПодписьКЭДО.ОрганизацияМЧД(Выборка.Ссылка);
			Если ОтборОрганизаций.Количество() > 1 Тогда
				Для Каждого СтрокаОрганизации Из СертификатыПодписей.ПолучитьЭлементы() Цикл
					Если СтрокаОрганизации.Организация <> ОрганизацияМЧД Тогда
						Продолжить;
					КонецЕсли;
					Для Каждого СтрокаСертификата Из СтрокаОрганизации.ПолучитьЭлементы() Цикл
						ДобавитьМЧДПоСтрокеСертификата(СтрокаСертификата, Выборка);
					КонецЦикла;
				КонецЦикла;
			Иначе
				Если ОтборОрганизаций.Количество() > 0 Тогда
					ЕдинственнаяОрганизация = ОтборОрганизаций[0];
					Если ОрганизацияМЧД = ЕдинственнаяОрганизация Тогда
						Для Каждого СтрокаСертификата Из СертификатыПодписей.ПолучитьЭлементы() Цикл
							Если ЗначениеЗаполнено(СтрокаСертификата.Организация)
								И ОтборОрганизаций[0] <> СтрокаСертификата.Организация Тогда
								
								Продолжить;
							КонецЕсли;
							ДобавитьМЧДПоСтрокеСертификата(СтрокаСертификата, Выборка);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ДанныеВыбраннойСтроки Из ВыбранныеСтроки Цикл
		НайденнаяСтрока = СтрокаКоллекцииПоСтруктуреДанных(
			СертификатыПодписей, ДанныеВыбраннойСтроки);
		Если НайденнаяСтрока <> Неопределено Тогда
			НайденнаяСтрока.Использовать = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		НайденнаяСтрока = СтрокаКоллекцииПоСтруктуреДанных(
			СертификатыПодписей, ДанныеТекущейСтроки);
		Если НайденнаяСтрока <> Неопределено Тогда
			Элементы.СертификатыПодписей.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		Иначе
			Для Каждого СтрокаСертификата Из СертификатыПодписей.ПолучитьЭлементы() Цикл
				Если СтрокаСертификата.Действителен Или ПоказыватьНеДействительные Тогда
					Элементы.СертификатыПодписей.ТекущаяСтрока = СтрокаСертификата.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыбранныеСтроки) Тогда
		
		СтрокаСертификата = ПервыйДоступныйСертификат(СертификатыПодписей.ПолучитьЭлементы());
		Если СтрокаСертификата <> Неопределено Тогда
			СтрокаСертификата.Использовать = Истина;
			Если Элементы.СертификатыПодписей.ТекущаяСтрока = Неопределено Тогда
				Элементы.СертификатыПодписей.ТекущаяСтрока =  СтрокаСертификата.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПервыйДоступныйСертификат(КоллекцияСертификатов, ДоступныйСертификатГоловнойОрганизации = Неопределено)
	
	ВыбраннаяСтрока = Неопределено;
	Для Каждого СтрокаДерева Из КоллекцияСертификатов Цикл
		
		Если СтрокаДерева.Доступен И СтрокаДерева.Действителен Тогда
			Если Не ПодписыватьСертификатамиГоловнойОрганизации
				И Не СтрокаДерева.ОрганизацияОтбора Тогда
				
				Если Не ЗначениеЗаполнено(ДоступныйСертификатГоловнойОрганизации) Тогда
					ДоступныйСертификатГоловнойОрганизации = СтрокаДерева;
				КонецЕсли;
			Иначе
				ВыбраннаяСтрока = СтрокаДерева;
			КонецЕсли;
		КонецЕсли;
		
		ВыбраннаяСтрокаПодчиненных = ПервыйДоступныйСертификат(СтрокаДерева.ПолучитьЭлементы(), ДоступныйСертификатГоловнойОрганизации);
		Если ВыбраннаяСтрокаПодчиненных <> Неопределено Тогда
			ВыбраннаяСтрока = ВыбраннаяСтрокаПодчиненных;
		КонецЕсли;
		
		Если ВыбраннаяСтрока <> Неопределено
			И (ЗначениеЗаполнено(ВыбраннаяСтрока.Организация)
				Или ЗначениеЗаполнено(ВыбраннаяСтрока.МЧД)) Тогда
			
			Возврат ВыбраннаяСтрока;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВыбраннаяСтрока <> Неопределено
		И ЗначениеЗаполнено(ДоступныйСертификатГоловнойОрганизации) Тогда
		
		ВыбраннаяСтрока = ДоступныйСертификатГоловнойОрганизации;
		ПодписыватьСертификатамиГоловнойОрганизации = Истина;
	КонецЕсли;
	
	Возврат ВыбраннаяСтрока;
	
КонецФункции

&НаКлиенте
Процедура РазвернутьДерево()
	Для Каждого СтрокаВерхнегоУровня Из СертификатыПодписей.ПолучитьЭлементы() Цикл
		Элементы.СертификатыПодписей.Развернуть(СтрокаВерхнегоУровня.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ЕстьСертификатыДляВыбора(СтрокиКоллекции)
	Для Каждого СтрокаКоллекции Из СтрокиКоллекции Цикл
		Если СтрокаКоллекции.Использовать Тогда
			Возврат Истина;
		КонецЕсли;
		Если ЕстьСертификатыДляВыбора(СтрокаКоллекции.ПолучитьЭлементы()) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

&НаСервере
Функция ВыбранныеСтрокиСертификатов(ВладелецКоллекции, ВыбранныеСтроки = Неопределено)
	
	Если ВыбранныеСтроки = Неопределено Тогда
		ВыбранныеСтроки = Новый Массив;
	КонецЕсли;
	
	Для Каждого СтрокаКоллекции Из ВладелецКоллекции.ПолучитьЭлементы() Цикл
		Если СтрокаКоллекции.Использовать Тогда
			ВыбранныеСтроки.Добавить(ДанныеСтрокиСертификата(СтрокаКоллекции));
		КонецЕсли;
		ВыбранныеСтрокиСертификатов(СтрокаКоллекции, ВыбранныеСтроки);
	КонецЦикла;
	
	Возврат ВыбранныеСтроки;
КонецФункции

&НаСервере
Функция ДанныеСтрокиСертификата(ДанныеСтроки)
	
	ДанныеТекущейСтроки = Новый Структура("Сертификат,МЧД,РольПодписанта,Организация");
	ЗаполнитьЗначенияСвойств(ДанныеТекущейСтроки, ДанныеСтроки);
	Если Не ЗначениеЗаполнено(ДанныеТекущейСтроки.Сертификат)
		Или Не ЗначениеЗаполнено(ДанныеТекущейСтроки.Организация) Тогда
		ТекущийРодитель = ДанныеСтроки.ПолучитьРодителя();
		Если ТекущийРодитель <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(ДанныеТекущейСтроки.Сертификат) Тогда
				ДанныеТекущейСтроки.Сертификат = ТекущийРодитель.Сертификат;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ДанныеТекущейСтроки.Организация) Тогда
				ДанныеТекущейСтроки.Организация = ТекущийРодитель.Организация;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТекущийРодитель.Организация) Тогда
				РодительРодителя = ТекущийРодитель.ПолучитьРодителя();
				Если РодительРодителя <> Неопределено Тогда
					ДанныеТекущейСтроки.Организация = РодительРодителя.Организация;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеТекущейСтроки.Организация)
		И Организации.Количество() > 0 Тогда
		
		ДанныеТекущейСтроки.Организация = Организации[0].Значение;
	КонецЕсли;
	
	Возврат ДанныеТекущейСтроки;
	
КонецФункции

&НаСервере
Функция СтрокаКоллекцииПоСтруктуреДанных(ВладелецКоллекции, ДанныеСтроки)
	
	Для Каждого СтрокаКоллекции Из ВладелецКоллекции.ПолучитьЭлементы() Цикл
		
		Если СтрокаКоллекции.МЧД = ДанныеСтроки.МЧД
			И СтрокаКоллекции.РольПодписанта = ДанныеСтроки.РольПодписанта Тогда
			
			Если ЗначениеЗаполнено(СтрокаКоллекции.Сертификат) Тогда
				Если СтрокаКоллекции.Сертификат <> ДанныеСтроки.Сертификат Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ВладелецКоллекции) <> Тип("ДанныеФормыДерево") Тогда
					Если ЗначениеЗаполнено(ВладелецКоллекции.Сертификат)
						И ВладелецКоллекции.Сертификат <> ДанныеСтроки.Сертификат Тогда
						
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаКоллекции.Организация) Тогда
				Если СтрокаКоллекции.Организация <> ДанныеСтроки.Организация Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ВладелецКоллекции) <> Тип("ДанныеФормыДерево") Тогда
					Если ЗначениеЗаполнено(ВладелецКоллекции.Организация) Тогда
						Если ВладелецКоллекции.Организация <> ДанныеСтроки.Организация Тогда
							Продолжить;
						КонецЕсли;
					Иначе
						РодительВладельца = ВладелецКоллекции.ПолучитьРодителя();
						Если РодительВладельца <> Неопределено
							И ЗначениеЗаполнено(РодительВладельца.Организация) Тогда
							
							Если РодительВладельца.Организация <> ДанныеСтроки.Организация Тогда
								Продолжить;
							КонецЕсли;
						Иначе
							Если Организации.Количество() > 0
								И Организации[0].Значение <> ДанныеСтроки.Организация Тогда
								
								Продолжить;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Возврат СтрокаКоллекции;
		КонецЕсли;
		
		НайденнаяСтрока = СтрокаКоллекцииПоСтруктуреДанных(СтрокаКоллекции, ДанныеСтроки);
		Если НайденнаяСтрока <> Неопределено Тогда
			Возврат НайденнаяСтрока;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция СтрокаОрганизации(Организация)
	
	Для Каждого СтрокаКоллекции Из СертификатыПодписей.ПолучитьЭлементы() Цикл
		Если СтрокаКоллекции.Организация = Организация Тогда
			Возврат СтрокаКоллекции;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокуСертификата(СтрокаСертификата, Выборка)
	
	СтрокаСертификата.Сертификат = Выборка.Ссылка;
	СтрокаСертификата.Организация = Выборка.Организация;
	СтрокаСертификата.ФизическоеЛицо = Выборка.ФизическоеЛицо;
	СтрокаСертификата.Действителен = Истина;
	СтрокаСертификата.Доступен = Истина;
	Если Выборка.Отозван Тогда
		СтрокаСертификата.Действителен = Ложь;
		Комментарий = НСтр("ru = 'Сертификат отозван'");
	ИначеЕсли Выборка.ДействителенДо < ТекущаяДатаСеанса() Тогда
		СтрокаСертификата.Действителен = Ложь;
		Комментарий = НСтр("ru = 'Истек срок действия сертификат'");
	ИначеЕсли Не ЗначениеЗаполнено(СтрокаСертификата.Организация)
		И Не ЗначениеЗаполнено(СтрокаСертификата.ФизическоеЛицо) Тогда
		
		СтрокаСертификата.Действителен = Ложь;
		Комментарий = НСтр("ru = 'Для сертификата не задан владелец (организация или физическое лицо)'");
	КонецЕсли;
	Если СертификатыВЛичномХранилище.НайтиПоЗначению(Выборка.Отпечаток) = Неопределено Тогда
		СтрокаСертификата.Действителен = Ложь;
		СтрокаСертификата.Доступен = Ложь;
		Комментарий = НСтр("ru = 'Сертификат не установлен'");
	Иначе
		Если ЗначениеЗаполнено(СтрокаСертификата.Организация) Тогда
			СтрокаСертификата.РольПодписанта = Перечисления.РолиПодписантовКЭДО.Организация;
		Иначе
			Если ФизическоеЛицоПользователя = СтрокаСертификата.ФизическоеЛицо Тогда
				СтрокаСертификата.РольПодписанта = Перечисления.РолиПодписантовКЭДО.Исполнитель;
			Иначе
				СтрокаСертификата.РольПодписанта = Перечисления.РолиПодписантовКЭДО.ПустаяСсылка();
				Комментарий = СтрШаблон(
					НСтр("ru = 'За %1, только по доверенности'"),
					КадровыйУчетПовтИсп.ПросклоненноеФизическоеЛицо(СтрокаСертификата.ФизическоеЛицо, 4));
				СтрокаСертификата.Доступен = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СтрокаСертификата.Организация)
		И ЗначениеЗаполнено(Выборка.ФизическоеЛицо) Тогда
		
		ПредставителиСертификатов.Добавить(Выборка.ФизическоеЛицо);
	КонецЕсли;
	Если ПустаяСтрока(Комментарий) Тогда
		Если ЗначениеЗаполнено(СтрокаСертификата.Организация) Тогда
			Комментарий = СтрШаблон(
				НСтр("ru = 'Организация %1'"),
				СтрокаСертификата.Организация);
			Если ЗначениеЗаполнено(СтрокаСертификата.ФизическоеЛицо)
				И СтрокаСертификата.ФизическоеЛицо <> ФизическоеЛицоПользователя Тогда
				
				Комментарий = СтрШаблон(
					НСтр("ru = '%1, за %2'"),
					Комментарий,
					КадровыйУчетПовтИсп.ПросклоненноеФизическоеЛицо(СтрокаСертификата.ФизическоеЛицо, 4));
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(СтрокаСертификата.ФизическоеЛицо)
				И СтрокаСертификата.ФизическоеЛицо <> ФизическоеЛицоПользователя Тогда
				
				Комментарий = СтрШаблон(
					НСтр("ru = 'За %1, по доверенности'"),
					КадровыйУчетПовтИсп.ПросклоненноеФизическоеЛицо(СтрокаСертификата.ФизическоеЛицо, 4));
			Иначе
				Комментарий = НСтр("ru = 'За себя, как за исполнителя'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	СтрокаСертификата.Комментарий = Комментарий;
	Родитель = СтрокаСертификата.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		СтрокаСертификата.ОрганизацияОтбора = Родитель.ОрганизацияОтбора;
	Иначе
		СтрокаСертификата.ОрганизацияОтбора = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьМЧДПоСтрокеСертификата(СтрокаСертификата, Выборка)
	Если Не ЗначениеЗаполнено(СтрокаСертификата.Организация)
		И СтрокаСертификата.ФизическоеЛицо = Выборка.Представитель Тогда
		
		Комментарий = "";
		ПодчиненнаяСтрока = СтрокаСертификата.ПолучитьЭлементы().Добавить();
		ПодчиненнаяСтрока.МЧД = Выборка.Ссылка;
		ПодчиненнаяСтрока.РольПодписанта = Перечисления.РолиПодписантовКЭДО.Организация;
		ПодчиненнаяСтрока.ОрганизацияОтбора = СтрокаСертификата.ОрганизацияОтбора;
		Если ПодчиненнаяСтрока.ПолучитьРодителя() = Неопределено Тогда
			ПодчиненнаяСтрока.Действителен = Истина;
		Иначе
			ПодчиненнаяСтрока.Действителен = ПодчиненнаяСтрока.ПолучитьРодителя().Действителен;
		КонецЕсли;
		ПодчиненнаяСтрока.Доступен = Истина;
		Если ЗначениеЗаполнено(Выборка.ДатаОтзыва) Тогда
			ПодчиненнаяСтрока.Действителен = Ложь;
			Комментарий = СтрШаблон(
				НСтр("ru = 'Доверенность отозвана с %1'"),
				Формат(Выборка.ДатаОтзыва, "ДЛФ=DD"));
		ИначеЕсли Не ЗначениеЗаполнено(Выборка.ДатаРегистрации) Тогда
			ПодчиненнаяСтрока.Действителен = Ложь;
			Комментарий = НСтр("ru = 'Доверенность не прошла регистрацию реестре'");
		КонецЕсли;
		Если Выборка.ДатаОкончания < ТекущаяДатаСеанса() Тогда
			ПодчиненнаяСтрока.Действителен = Ложь;
			Комментарий = СтрШаблон(
				НСтр("ru = 'Истек срок действия доверенности (%1)'"),
				Формат(Выборка.ДатаОкончания, "ДЛФ=DD"));
		КонецЕсли;
		Если Не Выборка.ПодписанЭП Тогда
			ПодчиненнаяСтрока.Действителен = Ложь;
			Комментарий = НСтр("ru = 'Доверенность не подписана цифровой подписью'");
		КонецЕсли;
		Если ПустаяСтрока(Комментарий) Тогда
			Если ЗначениеЗаполнено(Выборка.ОтветственныйДоверителя) Тогда
				Комментарий = СтрШаблон(
					НСтр("ru = 'За %1'"),
					КадровыйУчетПовтИсп.ПросклоненноеФизическоеЛицо(Выборка.ОтветственныйДоверителя, 4));
			Иначе
				Если ТипЗнч(Выборка.Доверитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
					Комментарий = СтрШаблон(
						НСтр("ru = 'За %1'"),
						КадровыйУчетПовтИсп.ПросклоненноеФизическоеЛицо(Выборка.Доверитель, 4));
				Иначе
					Комментарий = СтрШаблон(
						НСтр("ru = 'За %1'"),
						Выборка.Доверитель);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ПодчиненнаяСтрока.Комментарий = Комментарий;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Отключение видимости МЧД, когда она не задана
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СертификатыПодписей.МЧД");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СертификатыПодписейМЧД");
	ОформляемоеПоле.Использование = Истина;
	
	// Отключение видимости сертификата, когда задана МЧД
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СертификатыПодписей.МЧД");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СертификатыПодписейСертификат");
	ОформляемоеПоле.Использование = Истина;
	
	// Доступность отметки сертификатов
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	
	ГруппаОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СертификатыПодписей.Действителен");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Ложь;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СертификатыПодписей.Доступен");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СертификатыПодписейИспользовать");
	ОформляемоеПоле.Использование = Истина;
	
	// Перечеркивание строки, если не действителен сертификат или МЧД
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СертификатыПодписей.Действителен");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Ложь;
	
	ТекущийШрифт = Элементы.СертификатыПодписей.Шрифт;
	ЗачеркнутыйШрифт = Новый Шрифт(ТекущийШрифт, , , , , , Истина, );
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ЗачеркнутыйШрифт);
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СертификатыПодписейСертификат");
	ОформляемоеПоле.Использование = Истина;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СертификатыПодписейМЧД");
	ОформляемоеПоле.Использование = Истина;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СертификатыПодписейРольПодписанта");
	ОформляемоеПоле.Использование = Истина;
	
	// Отключение видимости строк с не действительными сертификатами или МЧД
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ПоказыватьНеДействительные");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Ложь;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СертификатыПодписей.Действителен");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СертификатыПодписей");
	ОформляемоеПоле.Использование = Истина;
	
	// Отключение видимости Комментария, если его нет
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СертификатыПодписей.Комментарий");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СертификатыПодписейКомментарий");
	ОформляемоеПоле.Использование = Истина;
	
	// Отключение видимости организации
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СертификатыПодписей.РольПодписанта");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СертификатыПодписейОрганизация");
	ОформляемоеПоле.Использование = Истина;
	
	// Отключение видимости организации
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СертификатыПодписей.РольПодписанта");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ТекущийШрифт = Элементы.СертификатыПодписей.Шрифт;
	ЖирныйШрифт = Новый Шрифт(ТекущийШрифт, , , Истина, , , , );
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ЖирныйШрифт);
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СертификатыПодписейОрганизация");
	ОформляемоеПоле.Использование = Истина;
	
	// Установка видимости сертификатов головной организации
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	
	ГруппаОтбораИли = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИли.Использование = Истина;
	ГруппаОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СертификатыПодписей.ОрганизацияОтбора");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ГруппаОтбораИ = ГруппаОтбораИли.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.Использование = Истина;
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбора = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ПодписыватьСертификатамиГоловнойОрганизации");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Ложь;
	
	ЭлементОтбора = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СертификатыПодписей.ОрганизацияОтбора");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СертификатыПодписей");
	ОформляемоеПоле.Использование = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОтобранныеСертификаты(Сертификаты, РодительКоллекции)
	
	Для Каждого СтрокаКоллекции Из РодительКоллекции.ПолучитьЭлементы() Цикл
		Если СтрокаКоллекции.Использовать Тогда
			СертификатСтроки = СтрокаКоллекции.Сертификат;
			Если Не ЗначениеЗаполнено(СертификатСтроки) Тогда
				СертификатСтроки = РодительКоллекции.Сертификат;
			КонецЕсли;
			ДанныеСертификата = Сертификаты.Получить(СертификатСтроки);
			Если ДанныеСертификата = Неопределено Тогда
				ДанныеСертификата = Новый Массив;
				Сертификаты.Вставить(СертификатСтроки, ДанныеСертификата);
			КонецЕсли;
			СвойстваПодписи = Новый Структура("МЧД,РольПодписанта");
			ЗаполнитьЗначенияСвойств(СвойстваПодписи, СтрокаКоллекции);
			ДанныеСертификата.Добавить(СвойстваПодписи);
		КонецЕсли;
		ЗаполнитьОтобранныеСертификаты(Сертификаты, СтрокаКоллекции);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеПодписыватьСертификатамиГоловнойОрганизации(УправляемаяФорма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		УправляемаяФорма.Элементы,
		"ФормаПодписыватьСертификатамиГоловнойОрганизации",
		"Пометка",
		УправляемаяФорма.ПодписыватьСертификатамиГоловнойОрганизации);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкуПодписыватьСертификатамиГоловнойОрганизации(ПодписыватьСертификатамиГоловнойОрганизации)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ЭлектронныйКадровыйДокументооборот", "ПодписыватьСертификатамиГоловнойОрганизации",
		ПодписыватьСертификатамиГоловнойОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокСертификатовВЛичномХранилище()

	СертификатыВЛичномХранилище.Очистить();
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбновитьСписокСертификатовПослеПолученияСвойствСертификатовНаКлиенте",
		ЭтотОбъект, "ОбновитьНаСервере");
	ЭлектроннаяПодписьСлужебныйКлиент.ПолучитьСвойстваСертификатовНаКлиенте(ОписаниеОповещения, Истина, Истина, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокСертификатовПослеПолученияСвойствСертификатовНаКлиенте(Результат, Параметры) Экспорт
	
	Для Каждого КлючИЗначение Из Результат.СвойстваСертификатовНаКлиенте Цикл
		СертификатыВЛичномХранилище.Добавить(КлючИЗначение.Ключ); 
	КонецЦикла;
	
	ЗаполнитьДоступнымиСертификатами();
	РазвернутьДерево();
	УстановитьОтображениеПодписыватьСертификатамиГоловнойОрганизации(ЭтотОбъект);
	
	Если Не ЕстьСертификатыДляВыбора(СертификатыПодписей.ПолучитьЭлементы()) Тогда
		Элементы.ФормаПоказыватьНеДействительные.Пометка = Истина;
		ПоказыватьНеДействительные = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
