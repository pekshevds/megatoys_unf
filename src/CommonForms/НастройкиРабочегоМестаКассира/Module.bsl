#Область ОписаниеПеременных

&НаКлиенте
Перем ЗакрыватьФормуБезКонтроляИзмененийНастроек;

&НаКлиенте
Перем ФайлXML;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	АктуализироватьЭлементыФормы();
	ОбщегоНазначенияРМК.ЗаполнитьДоступныеСценарииИспользованияРМК(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_УзелПланаОбмена" Тогда
		УстановитьВидимостьНаСервере();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_НаборКонстант" Тогда
		
		ОбновитьРеквизитыПоКонстантам();
		НастроитьЭлементыSMSПодтверждения();
		НастроитьЭлементыВидовОплат();
		
	ИначеЕсли ИмяСобытия = "ИзмененПризнакИспользованияПоставляемыйОграниченийПродаж" Тогда
		
		ОбновитьПризнакИспользованияОграниченийПродаж(Параметр);
		ОбновитьИнтерфейс();
		
	ИначеЕсли ИмяСобытия = "Запись_Файл" Тогда
		
		Если ТипЗнч(Источник) = Тип("Массив")
			И Источник.Количество() > 0 Тогда
		
			СсылкаНаФайл = Источник[0];
			
			Если ЭтоВыборИзображения Тогда
				
				ДанныеУзла = ВыбраннаяСтрокаДереваИзбранныхТоваров();
				
				Если ДанныеУзла.ЭтоНекорневойУзелДерева Тогда
					
					ТекущаяСтрокаДерева = ДанныеУзла.УзелДерева;
					ТекущаяСтрокаДерева.ИзображениеЭлемента = СсылкаНаФайл;
					Модифицированность = Истина;
					
				КонецЕсли;
					
			КонецЕсли;
		
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПерезаполнитьБыстрыеТоварыВНастройкеРМК" Тогда
		
		Если НастройкаРМК.СтруктураБыстрыхТоваров = Параметр.СсылкаПалитры Тогда
			Если Элементы.Предпросмотр.Пометка Тогда
				СформироватьПримерЗаполненияПанели(Команды.СформироватьПримерЗаполненияПанели);
			КонецЕсли;
			ЗаполнитьИзбранныеТоварыИРазвернуть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ВладелецФормы = Неопределено Тогда
		Если ВладелецФормы.ИмяФормы = "Обработка.ПомощникНастройкиКассовогоМестаРМК.Форма.Форма" Тогда
			
			Элементы.ГруппаКнопкиНижнейПанели.Видимость = Истина;
			Элементы.ИндикаторИсполнения.МаксимальноеЗначение = ВладелецФормы.Элементы.ИндикаторИсполнения.МаксимальноеЗначение;
			ИндикаторИсполнения = ВладелецФормы.ИндикаторИсполнения;
			
		КонецЕсли;
	КонецЕсли;
	
	НастроитьЭлементыSMSПодтверждения();
	НастроитьЭлементыВидовОплат();
	ЗакрыватьФормуБезКонтроляИзмененийНастроек = Ложь;
	
	ЗаполнитьПанельИзбранныхТоваров();
	ЗаполнитьИзбранныеТоварыИРазвернуть();
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы Тогда
		
		Если НЕ ПомощникНастройкиРМК Тогда
			ЗакрытиеФормыПомощникРМК = Истина;
		КонецЕсли;
		
		Если Не ЗакрыватьФормуБезКонтроляИзмененийНастроек
			И (Модифицированность Или Не ЗначениеЗаполнено(НастройкаРМК.Ссылка)) И ЗакрытиеФормыПомощникРМК Тогда
			
			Отказ = Истина;
			Оповещение = Новый ОписаниеОповещения("СохранитьНастройкиРМКИЗакрыть", ЭтотОбъект);
			ТекстВопроса = НСтр("ru = 'Сохранить настройки?'");
			ПоказатьВопрос(Оповещение,
				ТекстВопроса,
				РежимДиалогаВопрос.ДаНет);
				
		КонецЕсли;
			
	Иначе
		
		Отказ = Истина;
		ТекстПредупреждения = НСтр("ru = 'При закрытии формы все данные будут утеряны. Продолжить?'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКОсновнойПодборПлиточныйПриИзменении(Элемент)
	
	НастроитьЗначениеЭлементаЗакрытьПодбор();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ИерархияТоваров

&НаКлиенте
Процедура ВыбратьИзображениеИзПрисоединенныхФайлов(Команда)
	
	ДанныеУзла = ВыбраннаяСтрокаДереваИзбранныхТоваров();
	
	Если Не ДанныеУзла.ЭтоНекорневойУзелДерева Тогда
	
		ПоказатьПредупреждение(, 
			НСтр("ru = 'Выберите строку для выбора изображения из присоединенных файлов.'"),
			, НСтр("ru = 'Выбор изображения из присоединенных файлов'"));
		Возврат;
		
	КонецЕсли;

	РаботаСФайламиКлиент.ОткрытьФормуВыбораФайлов(НастройкаРМК.СтруктураБыстрыхТоваров, Элементы.ИерархияТоваров);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	ДобавитьИзображениеКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКатегорию(Команда)

	КорневойЭлемент = КореньДерева();
	ИдентификаторКорня = КорневойЭлемент.ПолучитьИдентификатор();
	ЭлементыДерева = КорневойЭлемент.ПолучитьЭлементы();
	НоваяКатегория = ЭлементыДерева.Добавить();
	НоваяКатегория.ЭтоКатегория = Истина;
	НоваяКатегория.НомерИзображения = 1;
	НоваяКатегория.ЦветФона = ЦветаФормы.ПапкаКнопка;
	
	Элементы.ИерархияТоваров.Развернуть(ИдентификаторКорня);
	Элементы.ИерархияТоваров.ТекущаяСтрока = НоваяКатегория.ПолучитьИдентификатор();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображение(Команда)
	
	ДанныеУзла = ВыбраннаяСтрокаДереваИзбранныхТоваров();
	
	Если НЕ ДанныеУзла.ЭтоНекорневойУзелДерева Тогда
		
		ПоказатьПредупреждение(, 
			НСтр("ru = 'Выберите строку для редактирования изображения из присоединенных файлов.'"),
			, НСтр("ru = 'Редактирование изображение'") );
		Возврат
		
	КонецЕсли;
	
	ТекущаяСтрока = ДанныеУзла.УзелДерева;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ИзображениеЭлемента) Тогда
		РаботаСФайламиКлиент.ОткрытьФормуФайла(ТекущаяСтрока.ИзображениеЭлемента);
	Иначе
		
		ПоказатьПредупреждение(,
			НСтр("ru = 'Отсутствует изображение для редактирования.'"),
			, НСтр("ru = 'Редактирование изображение'") );
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбора(Команда)
	
	ЗаголовокФормыПодбора = СтрШаблон(НСтр("ru = 'Подбор товаров в структуру плиточного интерфейса подбора %1'"),
			?(ЗначениеЗаполнено(НастройкаРМК.СтруктураБыстрыхТоваров),
				НастройкаРМК.СтруктураБыстрыхТоваров,
				НСтр("ru = ''")));
				
	ОповещениеОВыборе = Новый ОписаниеОповещения("ЗавершениеОбработкиПодбораТоваров", ЭтотОбъект);
				
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Заголовок", ЗаголовокФормыПодбора);
	ПараметрыОткрытия.Вставить("КлючУникальности", УникальныйИдентификатор);

	ОбщегоНазначенияРМККлиент.ЗаполнитьПараметрыОткрытияФормыПодбораВСоставПалитрыТоваров(ПараметрыОткрытия);
	ОбщегоНазначенияРМККлиент.ОткрытьИнтерфейсПодбораНоменклатуры(ЭтотОбъект, ПараметрыОткрытия, ОповещениеОВыборе);
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	ПросмотретьПрисоединенныйФайл();
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеКатегории(Команда)
	
	Корень = КореньДерева();
	РазвернутьВетви = Истина;
	Элементы.ИерархияТоваров.Развернуть(Корень.ПолучитьИдентификатор(), РазвернутьВетви);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсеКатегории(Команда)
	
	Корень = КореньДерева();
	Ветви = Корень.ПолучитьЭлементы();
	
	Для Каждого Ветвь Из Ветви Цикл
	
		Если Ветвь.ЭтоКатегория Тогда
			Элементы.ИерархияТоваров.Свернуть(Ветвь.ПолучитьИдентификатор());
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьИзображение(Команда)
	
	ДанныеУзла = ВыбраннаяСтрокаДереваИзбранныхТоваров();

	Если Не ДанныеУзла.ЭтоНекорневойУзелДерева Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДанныеУзла.УзелДерева;
		
	РаботаСФайламиКлиент.ОткрытьФормуВыбораФайлов(ТекущаяСтрока.Номенклатура,
		Элементы.ИерархияТоваров);

КонецПроцедуры

&НаКлиенте
Процедура СформироватьПримерЗаполненияПанели(Команда)
	
	Элементы.Предпросмотр.Пометка = Не Элементы.Предпросмотр.Пометка;
	
	ПометкаПредпросмотр = Элементы.Предпросмотр.Пометка;
	
	Если ПометкаПредпросмотр Тогда
		Элементы.Предпросмотр.Заголовок = НСтр("ru = 'Редактировать'");
	Иначе
		Элементы.Предпросмотр.Заголовок = НСтр("ru = 'Показать'");
	КонецЕсли;
	
	Элементы.ИерархияТоваров.Доступность = Не ПометкаПредпросмотр;
	Элементы.ИерархияТоваров.КонтекстноеМеню.Доступность = Не ПометкаПредпросмотр;
	Элементы.НастройкаРМКСтруктураБыстрыхТоваров.Доступность = Не ПометкаПредпросмотр;
	
	Элементы.ПанельИзбранныхТоваров.Видимость = ПометкаПредпросмотр;
	
	Если ПометкаПредпросмотр Тогда
		
		ЗаполнитьСоставПалитрыИзбранногоПоДаннымДерева(Истина);
		
		ТекущиеДанныеСтроки = Элементы.ИерархияТоваров.ТекущиеДанные;
		Если ТекущиеДанныеСтроки.ЭтоКатегория Тогда
			ТекущаяСтраницаКнопок = ТекущиеДанныеСтроки.НомерКатегории;
		Иначе
			ТекущаяСтраницаКнопок = ТекущиеДанныеСтроки.НомерКатегорииРазмещения;
		КонецЕсли;
		
		ЗаполнитьКнопки();
		
		Если ТекущиеДанныеСтроки.ЭтоКатегория Тогда
			ИндексПозиции = 0;
		Иначе
			ИндексПозиции = ТекущиеДанныеСтроки.ИндексПозиции - ?(ТекущиеДанныеСтроки.НомерКатегорииРазмещения = 0, 1, 0);
		КонецЕсли;
		
		Если ИндексПозиции < 12 Тогда
			Если ЗначениеЗаполнено(ТекущиеДанныеСтроки.ИмяЭлемента) Тогда
				ТекущийЭлемент = Элементы["КомандаИзбранныйТовар_Элемент05_" + ИндексПозиции];
			Иначе
				ТекущийЭлемент = Элементы["КомандаИзбранныйТовар_Элемент02_" + ИндексПозиции];
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзображение(Команда)
	
	ДанныеУзла = ВыбраннаяСтрокаДереваИзбранныхТоваров();

	Если Не ДанныеУзла.ЭтоНекорневойУзелДерева Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДанныеУзла.УзелДерева;
		
	ИмяЭлемента = "Справочник.ПалитраТоваровРМКПрисоединенныеФайлы.ПустаяСсылка";
	ТекущаяСтрока.ИзображениеЭлемента = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(ИмяЭлемента);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПерейтиКПросмотруНастройки(Команда)
	
	ТекущиеДанные = Элементы.СписокНастроек.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.Свойство("Ссылка") Тогда
	
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.ГруппаНастройки);
		УстановитьЗначениеНастройки(ТекущиеДанные.Ссылка);
		
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите настройку для просмотра'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСпискуНастроек(Команда)
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.ГруппаВыбораНастроек);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНастройкуДляТекущегоРабочегоМеста(Команда)
	
	ТекущиеДанныеСпискаНастроек = Элементы.СписокНастроек.ТекущиеДанные;
	ЗначениеНастройки = Неопределено;
	
	Если НЕ ТекущиеДанныеСпискаНастроек = Неопределено
		И ТекущиеДанныеСпискаНастроек.Свойство("Ссылка", ЗначениеНастройки)
		И ЗначениеЗаполнено(ЗначениеНастройки) Тогда
		
			ОбщегоНазначенияРМКВызовСервера.УстановитьНастройкуРМКДляТекущегоРабочегоМеста(ЗначениеНастройки);
			Элементы.СписокНастроек.Обновить();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиРМК(Команда)
	
	РезультатВыполнения = СохранитьНастройкиРМКНаСервере();
	
	Если НЕ РезультатВыполнения.ВыполненоУспешно Тогда
		ПоказатьПредупреждение(, РезультатВыполнения.ТекстПредупрежденийОшибок);
	Иначе
		
		ПараметрыОповещения = Новый Структура();
		ПараметрыОповещения.Вставить("РабочееМестоКассираУспешноНастроено", Истина);
		ОткрытаФормаСписка = Ложь;
		Если ЭтаФорма.ВладелецФормы <> Неопределено
			И Найти(ЭтаФорма.ВладелецФормы.ИмяФормы, НСтр("ru = 'ФормаСписка'")) > 0 Тогда
			ОткрытаФормаСписка = Истина;
		КонецЕсли;
		ПараметрыОповещения.Вставить("ОткрытаФормаСписка", ОткрытаФормаСписка);
		Оповестить("РабочееМестоКассираУспешноНастроено", ПараметрыОповещения, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСинхронизацииДанных(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		
		МодульОбменДаннымиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбменДаннымиКлиент");
		МодульОбменДаннымиКлиент.ОткрытьНастройкиСинхронизацииДанных();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПомощникНастройкиОбмена(Команда)
	ОбщегоНазначенияРМККлиентПереопределяемый.ОткрытьПомощникНастройкиОбмена();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
	
	ТекстСообщенияПользователю = НСтр("ru = ''");
	
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		
		ИсходныеДанные = НастройкаРМК;
		ПараметрыПроверкиПодключения = ИсходныеДанныеДляПроверкиДоступностиСервераЛояльности(ИсходныеДанные);
		АдресСервера = ПараметрыПроверкиПодключения.АдресСервера;
		
		Если НЕ ЗначениеЗаполнено(АдресСервера) Тогда
			
			СтрокаСообщения = НСтр("ru = 'Не заполнен адрес сервера лояльности.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения,, "НастройкаРМК.АдресСервераЛояльности");
			Возврат;
			
		КонецЕсли;
		
		ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаПроверитьПодключениеКСерверуЛояльности(ПараметрыПроверкиПодключения);
		РезультатПроверки = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
		
		ТекстСообщенияПользователю = ?(РезультатПроверки.ЕстьОшибки,
			РезультатПроверки.ТекстОшибки,
			НСтр("ru = 'Соединение с сервером успешно установлено.'"));
			
	Иначе
		
		ТекстСообщенияПользователю =
			НСтр("ru = 'Пожалуйста, включите использование сервера лояльности перед проверкой подключения к серверу.'");
			
	КонецЕсли;
		
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияПользователю);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПарольСервераЛояльности(ТекущаяНастройкаРМК)
	Возврат ОбщегоНазначенияРМК.ПарольСервераЛояльности(ТекущаяНастройкаРМК);
КонецФункции

&НаКлиенте
Процедура ВыгрузитьНастройкиВФайл(Команда)
	
	Если НастройкаРМК.Ссылка.Пустая() Тогда
		
		ПоказатьПредупреждение(, НСтр("ru='Сначала сохраните настройку.'"));
		Возврат;
		
	КонецЕсли;
	
	ВыбратьФайлНаКлиенте(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиИзФайла(Команда)
	ВыбратьФайлНаКлиенте(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗапретыПродаж(Команда)
	
	КоличествоЗаписей = КоличествоЗаписейЗапретовПродаж();
	ИмяФормыСуффикс = ?(КоличествоЗаписей > 0, "ФормаСписка", "ФормаЗаписи");
	ПолноеИмяФормы = СтрШаблон("РегистрСведений.УсловияЗапретаПродажРМК.%1", ИмяФормыСуффикс);
	
	ОткрытьФорму(ПолноеИмяФормы,, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПодключенияКЕГАИС(Команда)
	ОткрытьФорму("РегистрСведений.НастройкиОбменаЕГАИС.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ВестиСведенияДляДекларацийПоАлкогольнойПродукцииПриИзменении(Элемент)
	АктуализироватьДоступностьКонтроляИспользованияКалендарныхЗапретовПродаж(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОплатуСертификатамиНСПКПриИзменении(Элемент)
	
	ИспользоватьОплатуСертификатамиНСПКПриИзмененииСервер();
	
	Если ИспользоватьОплатуСертификатамиНСПК Тогда
		
		ОповещениеМетода = Новый ОписаниеОповещения("НСПКВерсияВКЗавершение", ЭтотОбъект);
		ЭлектронныеСертификатыНСПККлиент.НачатьПолучениеВерсииВК(ОповещениеМетода);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресСервисаНСПКПриИзменении(Элемент)
	АдресСервисаНСПКПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗапретПродажПриИзменении(Элемент)
	
	ИспользоватьЗапретПродажПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура АнализШтрихкодов(Команда)
	ОткрытьФорму("ОбщаяФорма.АнализШтрихкодов");
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	НастройкаЗавершена = ВладелецФормы.НастройкаЗавершена;
	
	Если (НЕ ЗначениеЗаполнено(НастройкаРМК.Ссылка) ИЛИ Модифицированность) И НастройкаЗавершена Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Перед переходом на следующую страницу, сохраните настройку'"));
		Возврат;
		
	КонецЕсли;
	ВладелецФормы.ВыполнитьДействияПереходаНаСтраницу(1);
	ЗакрытиеФормыПомощникРМК = НастройкаЗавершена;
	Если НастройкаЗавершена Тогда
		ВладелецФормы.ФормаРМКОткрыта = Ложь;
		Закрыть();
	КонецЕсли;
	ПорядковыйНомер = ВладелецФормы.ПорядковыйНомерНастройки;
	Если ПорядковыйНомер = 0 Тогда
		ВосстановитьНастройкиЭлементовФормы();
	Иначе
		НастроитьВидимостьЭлементовПриПереходеНаСтраницу();
	КонецЕсли;
	ИндикаторИсполнения = ВладелецФормы.ИндикаторИсполнения;
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	ВладелецФормы.ВыполнитьДействияПереходаНаСтраницу(-1);
	НастройкаЗавершена = ВладелецФормы.НастройкаЗавершена;
	ПорядковыйНомер = ВладелецФормы.ПорядковыйНомерНастройки;
	НастроитьВидимостьЭлементовПриПереходеНаСтраницу();
	ИндикаторИсполнения = ВладелецФормы.ИндикаторИсполнения;
	ЗакрытиеФормыПомощникРМК = ПорядковыйНомер = 0;
	Если ПорядковыйНомер = 0 Тогда
		ВладелецФормы.ФормаРМКОткрыта = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПродаж(Команда)
	
	Если НЕ ЗначениеЗаполнено(НастройкаРМК.Ссылка) Тогда
		
		ПоказатьПредупреждение(, НСтр("ru='Сначала сохраните настройку.'"));
		Возврат;
		
	КонецЕсли;

	ОбщегоНазначенияРМККлиентПереопределяемый.ОткрытьНастройкиРаспределенияПродаж();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗаменуТоваровПриИзменении(Элемент)
	
	ИспользоватьЗаменуТоваровПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура БИПНастройкаИнтеграцииСПлатежнымиСистемами(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Раздел", "ИнтеграцияСПлатежнымиСистемами");
	
	ОткрытьФорму(
		"Обработка.ПанельАдминистрированияБИП.Форма.ИнтернетПоддержкаИСервисы",
		ПараметрыФормы,
		ЭтотОбъект,
		"Обработка.ПанельАдминистрированияБИП.Форма.ИнтернетПоддержкаИСервисы." + ПараметрыФормы.Раздел);
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельАдминистрированияБСПОрганайзер(Команда)
	ОткрытьФорму("Обработка.ПанельАдминистрированияБСП.Форма.Органайзер");
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСервераЛояльности(Команда)
	АктивизироватьПолеНастроекАдресСервераЛояльности();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокСкладовДляПродажи(Команда)
	ОбщегоНазначенияРМККлиентПереопределяемый.ОткрытьВыборСкладовДляПродажи(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КонвертироватьНастройкиСтарогоРМК(Команда)
	КонвертироватьНастройкиСтарогоРМКСервер();
КонецПроцедуры

&НаКлиенте
Процедура ЭквайринговыеТерминалы(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтандартнаяОбработка = Истина;
	ОбщегоНазначенияРМККлиентПереопределяемый.ОткрытьФормуНастройкиЭквайринга(СтруктураПараметров, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПанельВводаНаличных(Команда)
	ТекущийЭлемент = Элементы.НастройкаРМКВводНаличных;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаполнитьПоШаблону(Команда)
	
	УстановитьСценарийНачало(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРезервноеКопирование(Команда)
	
	ОткрытьФорму(
		"Обработка.ПанельАдминистрированияБСП.Форма.Обслуживание",
		Новый Структура("Раздел", "РезервноеКопированиеИВосстановление"),
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомбинацииГорячихКлавиш(Команда)
	ТабличныйДокумент = СформироватьТабличныйДокументГорячихКлавиш();
	ТабличныйДокумент.Показать(Нстр("ru='Комбинации горячих клавиш'"));
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПрефиксШтрихкодаВесовогоТовараПриИзменении(Элемент)
	ПрефиксШтрихкодаВесовогоТовараПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПрефиксШтрихкодаШтучногоТовараПриИзменении(Элемент)
	ПрефиксШтрихкодаШтучногоТовараПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ШаблонШтрихкодаТовараПриИзменении(Элемент)
	ШаблонШтрихкодаТовараПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКВводНаличныхКлавишаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.НастройкаРМКВводНаличных.ТекущиеДанные;
	
	Если ПустаяСтрока(ТекущаяСтрока.Клавиша) Тогда
		ТекущаяСтрока.Клавиша = ИнтерфейсРМКСлужебныйКлиентСервер.ПредставлениеПустойКлавиши();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоГорячиеКлавишиКлавишаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоГорячиеКлавиши.ТекущиеДанные;
	ПустаяКлавиша = ИнтерфейсРМКСлужебныйКлиентСервер.ПредставлениеПустойКлавиши();
	
	Если ПустаяСтрока(ТекущаяСтрока.Клавиша) Тогда
		ТекущаяСтрока.Клавиша = ПустаяКлавиша;
	КонецЕсли;
	
	Если ТекущаяСтрока.Клавиша = ПустаяКлавиша Тогда
		
		ТекущаяСтрока.АкселераторAlt	= Ложь;
		ТекущаяСтрока.АкселераторCtrl	= Ложь;
		ТекущаяСтрока.АкселераторShift	= Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКомментарийНажатие(Элемент)
	
	ТекстСообщения = Элементы.ДекорацияКомментарийНоваяНастройкаОбмена.Подсказка;
	ПоказатьПредупреждение(, ТекстСообщения);

КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКБыстрыеТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ Элементы.НастройкаРМКБыстрыеТовары.ТекущиеДанные = Неопределено Тогда
		
		Номенклатура = Элементы.НастройкаРМКБыстрыеТовары.ТекущиеДанные.Номенклатура;
		
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			
			ПараметрыВыбора = Новый Структура;
			ОбщегоНазначенияРМККлиентПереопределяемый.ЗаполнитьПараметрыВыбораХарактеристик(ПараметрыВыбора,
				Номенклатура,
				СтандартнаяОбработка);
				
			Если Не СтандартнаяОбработка Тогда
				ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора",
					ПараметрыВыбора,
					Элемент);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Элементы.НастройкаРМКБыстрыеТовары.ТекущиеДанные.Характеристика = ВыбранноеЗначение;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКБыстрыеТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НастройкаРМКБыстрыеТовары.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		Номенклатура = ТекущиеДанные.Номенклатура;
		ХарактеристикиИспользуются = ПроверитьПрименениеХарактеристикДляНоменклатуры(Номенклатура);
		ТекущиеДанные.ХарактеристикиИспользуются = ХарактеристикиИспользуются;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрефиксИнформационнойБазыПриИзменении(Элемент)
	
	ФоновоеЗадание = ЗапуститьИзменениеПрефиксаИБВФоновомЗадании();
	
	Если ФоновоеЗадание <> Неопределено
		И ФоновоеЗадание.Статус = "Выполняется" Тогда
		
		Элементы.ПрефиксИнформационнойБазы.Доступность = Ложь;
		Элементы.ДекорацияОжиданиеИзмененияПрефикса.Видимость = Истина;
		
	КонецЕсли;
	
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
	
	Обработчик = Новый ОписаниеОповещения("ПослеИзмененияПрефикса", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, Обработчик, НастройкиОжидания);
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьИзменениеПрефиксаИБВФоновомЗадании()
	
	ПараметрыПроцедуры = Новый Структура("НовыйПрефиксИБ, ПродолжитьНумерацию",
		ПрефиксИнформационнойБазы, Истина);
		
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Изменение префикса'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("ПрефиксацияОбъектовСлужебный.ИзменитьПрефиксИБ",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ПослеИзмененияПрефикса(ФоновоеЗадание, ДополнительныеПараметры) Экспорт

	Если НЕ Элементы.ПрефиксИнформационнойБазы.Доступность Тогда
		Элементы.ПрефиксИнформационнойБазы.Доступность = Истина;
	КонецЕсли;
	
	Если Элементы.ДекорацияОжиданиеИзмененияПрефикса.Видимость Тогда
		Элементы.ДекорацияОжиданиеИзмененияПрефикса.Видимость = Ложь;
	КонецЕсли;
	
	Если ФоновоеЗадание <> Неопределено
		И ФоновоеЗадание.Статус = "Выполнено" Тогда
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Префикс изменен.'"));
		
	Иначе
		
		Элементы.ПрефиксИнформационнойБазы.ОбновитьТекстРедактирования();
		
		Если ФоновоеЗадание <> Неопределено Тогда
			
			ТекстОшибки = НСтр("ru='Не удалось изменить префикс.
				|См. подробности в журнале регистрации.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСерверЛояльностиПолучательДанныхПриИзменении(Элемент)
	ИспользоватьСерверЛояльностиПолучательДанныхПриИзмененииНаСервере();
	НастроитьЭлементыSMSПодтверждения();
	НастроитьЭлементыВидовОплат();
	НастроитьДоступностьЭлементовПриПереключенииСервераЛояльности();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОсобенностиПродаж()
	
	ОбщегоНазначенияРМКПереопределяемый.УстановитьПризнакФормеПоДаннымФункциональнойОпции(ЭтотОбъект,
		"ИспользоватьЗапретПродаж");
	ОбщегоНазначенияРМКПереопределяемый.УстановитьПризнакФормеПоДаннымФункциональнойОпции(ЭтотОбъект,
		"ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
	
	АктуализироватьДоступностьКонтроляИспользованияКалендарныхЗапретовПродаж();
	
	ИспользоватьОплатуСертификатамиНСПК = ОбщегоНазначенияРМК.ИспользоватьОплатуСертификатамиНСПК();
	ИспользоватьЗаменуТоваров = ОбщегоНазначенияРМК.ИспользоватьЗаменуТоваров();
	
	Элементы.ПараметрыПодключенияЕГАИС.Доступность = ВестиСведенияДляДекларацийПоАлкогольнойПродукции;
	Элементы.ГруппаПараметрыПодключенияНСПК.Доступность = ИспользоватьОплатуСертификатамиНСПК;
		
	Если ИспользоватьОплатуСертификатамиНСПК Тогда
		ЗаполнитьПараметрыПодключенияНСПК();
	КонецЕсли;
	
	ИспользоватьПоставляемыеОграниченияПродаж = ОбщегоНазначенияРМК.ИспользоватьПоставляемыеОграниченияПродаж();
	Элементы.ИспользоватьЗапретПродаж.Доступность =
		НЕ (ИспользоватьПоставляемыеОграниченияПродаж ИЛИ ВестиСведенияДляДекларацийПоАлкогольнойПродукции);
	Элементы.ИспользоватьЗапретПродаж.РасширеннаяПодсказка.Заголовок =
		ОбщегоНазначенияРМККлиентСервер.ТекстПодсказкиНастройкиЗапретовПродаж();
	ИспользоватьЗапретПродаж = ИспользоватьЗапретПродаж ИЛИ ИспользоватьПоставляемыеОграниченияПродаж;
	
	Элементы.ЗапретыПродаж.Доступность = ИспользоватьЗапретПродаж;
	
	ИспользоватьОплатуПлатежнымиКартами = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакИспользованияОплатПК(ИспользоватьОплатуПлатежнымиКартами);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначениеКонстанты(КонстантаИмя, ТекущееЗначениеКонстанты)
	
	Если КонстантаИмя <> "" Тогда
		
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = ТекущееЗначениеКонстанты;
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура АктуализироватьДоступностьКонтроляИспользованияКалендарныхЗапретовПродаж(СохранятьКонстанту = Ложь)
	
	Если СохранятьКонстанту Тогда
		ИмяКонстанты = ОбщегоНазначенияРМК.ИмяКонстанты("ВестиСведенияДляДекларацийПоАлкоголю");
		СохранитьЗначениеКонстанты(ИмяКонстанты, ВестиСведенияДляДекларацийПоАлкогольнойПродукции);
	КонецЕсли;
	
	Если ВестиСведенияДляДекларацийПоАлкогольнойПродукции И НЕ ИспользоватьЗапретПродаж Тогда
		
		ИспользоватьЗапретПродаж = ВестиСведенияДляДекларацийПоАлкогольнойПродукции;
		ИспользоватьЗапретПродажПриИзмененииСервер();
		
	КонецЕсли;

	Если ИспользоватьЗапретПродаж Тогда
		Элементы.ИспользоватьЗапретПродаж.Доступность = НЕ ВестиСведенияДляДекларацийПоАлкогольнойПродукции;
	КонецЕсли;
	
	Элементы.ПараметрыПодключенияЕГАИС.Доступность = ВестиСведенияДляДекларацийПоАлкогольнойПродукции;
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьОплатуСертификатамиНСПКПриИзмененииСервер()
	
	ИмяКонстанты = ОбщегоНазначенияРМК.ИмяКонстанты("ИспользоватьОплатуСертификатамиНСПК");
	СохранитьЗначениеКонстанты(ИмяКонстанты, ИспользоватьОплатуСертификатамиНСПК);
	Элементы.ГруппаПараметрыПодключенияНСПК.Доступность = ИспользоватьОплатуСертификатамиНСПК;
	
	Если ИспользоватьОплатуСертификатамиНСПК Тогда
		ЭлектронныеСертификатыНСПКРМКПереопределяемый.СоздатьВидыОплатНСПК();
		ЗаполнитьПараметрыПодключенияНСПК();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура АдресСервисаНСПКПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(АдресСервисаНСПК) Тогда
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("ЭС_НСПК_МИР", АдресСервисаНСПК, "АдресСервисаНСПК");
	Иначе
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища("ЭС_НСПК_МИР", "АдресСервисаНСПК");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИспользоватьЗапретПродажПриИзмененииСервер()
	
	ИмяКонстанты = ОбщегоНазначенияРМК.ИмяКонстанты("ИспользоватьЗапретПродаж");
	СохранитьЗначениеКонстанты(ИмяКонстанты, ИспользоватьЗапретПродаж);
	Элементы.ЗапретыПродаж.Доступность = ИспользоватьЗапретПродаж;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКИспользоватьНовыйПодборТоваровПриИзменении(Элемент)
	НастроитьЭлементыПодбораТоваров();
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыПодбораТоваров()
	
	ИспользоватьНовыйПодборТоваров = НастройкаРМК.ИспользоватьНовыйПодборТоваров;
	Элементы.ГруппаКодАртикул.Доступность = ИспользоватьНовыйПодборТоваров;
	
	Если НЕ ИспользоватьНовыйПодборТоваров Тогда
		НастройкаРМК.ПоказыватьАртикулНоменклатуры = ИспользоватьНовыйПодборТоваров;
		НастройкаРМК.ПоказыватьКодНоменклатуры = ИспользоватьНовыйПодборТоваров;
	КонецЕсли;
	
	ОбщегоНазначенияРМКПереопределяемый.НастроитьЭлементыПодбораТоваров(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольСервераЛояльностиПриИзменении(Элемент)
	ПарольСервераЛояльностиИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКПродажиСНесколькихКассККМПриИзменении(Элемент)
	
	Элементы.НастройкаРМКОсновнаяКассаККМ.Доступность = НастройкаРМК.ПродажиСНесколькихКассККМ;
	Если НЕ НастройкаРМК.ПродажиСНесколькихКассККМ Тогда
		НастройкаРМК.ОсновнаяКассаККМ = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКОтправлятьSMSКодПриЗаведенииКартыПриИзменении(Элемент)
	
	Элементы.НастройкаРМКШаблонSMSПриЗаведенииКарты.Доступность = НастройкаРМК.ОтправлятьSMSКодПриЗаведенииКарты;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКБыстрыеТоварыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбщегоНазначенияРМККлиентПереопределяемый.ОбработатьВыбранноеЗначениеБыстрыхТоваров(ЭтотОбъект,
		ВыбранноеЗначение,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПодсказкуАдресаСервераЛояльности()
	
	Элементы.НастройкаРМКАдресСервераЛояльности.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	
	Строка1 = Новый ФорматированнаяСтрока(НСтр("ru = 'При использовании защищенного соединения или
				|нестандартного порта подключения необходимо указать адрес в таком виде: '"), Новый Шрифт());
	
	Строка2 = Новый ФорматированнаяСтрока(НСтр("ru = 'https://server:111/base/hs/loyaltyservice'"), Новый Шрифт(,,Истина));
	
	Строка3 = Новый ФорматированнаяСтрока(НСтр("ru = 'Стандартные порты 80 и 443 указывать не требуется.'"), Новый Шрифт(,,,));
	
	ЗаголовокПодсказки = Новый ФорматированнаяСтрока(Строка1, Строка2, Символы.ПС, Строка3);
	
	Элементы.НастройкаРМКАдресСервераЛояльности.РасширеннаяПодсказка.Заголовок = ЗаголовокПодсказки;
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьЗаменуТоваровПриИзмененииСервер()
	
	ИмяКонстанты = ОбщегоНазначенияРМК.ИмяКонстанты("ИспользоватьЗаменуТоваров");
	СохранитьЗначениеКонстанты(ИмяКонстанты, ИспользоватьЗаменуТоваров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольнаяНастройкаПриИзменении(Элемент) Экспорт
	ОбщегоНазначенияРМККлиентПереопределяемый.ПроизвольнаяНастройкаПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИспользоватьСерверЛояльностиПолучательДанных" Тогда
		СтандартнаяОбработка = Ложь;
		ТекущийЭлемент = Элементы.ИспользоватьСерверЛояльностиПолучательДанных;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьSMSПриОплатеБонусамиПриИзменении(Элемент)
	
	Если ОтправлятьSMSПриОплатеБонусами Тогда
		ОтправлятьSMSПриПоискеКартыПоНомеруТелефона = Ложь;
	КонецЕсли;
	
	НастроитьЭлементыSMSПодтверждения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьSMSПриПоискеКартыПоНомеруТелефонаПриИзменении(Элемент)
	
	Если ОтправлятьSMSПриПоискеКартыПоНомеруТелефона Тогда
		ОтправлятьSMSПриОплатеБонусами = Ложь;
	КонецЕсли;
	
	НастроитьЭлементыSMSПодтверждения();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКРазрешитьВыборСкладаПриИзменении(Элемент)
	Элементы.ОткрытьСписокСкладовДляПродажи.Доступность = НастройкаРМК.РазрешитьВыборСклада;
КонецПроцедуры

&НаКлиенте
Процедура ПечататьКороткийСлипЧекПриИзменении(Элемент)
	ПечататьКороткийСлипЧекПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКФормироватьИнтегрированныйЧекЕГАИСПриИзменении(Элемент)
	НастройкаРМКФормироватьИнтегрированныйЧекЕГАИСПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКЗакрыватьПодборПриВыбореТовараПриИзменении(Элемент)
	УстановитьДоступностьПалитрыПлиточногоИнтерфейсаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКИспользоватьОплатуНаличнымиПриИзменении(Элемент)
	
	НастроитьЭлементыВидовОплат();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОплатуПлатежнымиКартамиПриИзменении(Элемент)
	
	ИспользоватьОплатуПлатежнымиКартамиПриИзмененииНаСервере();
	НастроитьЭлементыВидовОплат();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаБонусыИСертификатыРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	АктивизироватьПолеНастроекАдресСервераЛояльности();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКИспользоватьПанельВводаНаличныхКупюрПриИзменении(Элемент)
	
	ОбработатьИзменениеИспользованияПанелиВводаНаличныхНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКВертикальнаяОриентацияПриИзменении(Элемент)
	НастройкаРМК.ВертикальнаяОриентация = Не ГоризонтальныйОриентация;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКРазрешитьБыстроеДобавлениеПакетаПриИзменении(Элемент)
	Элементы.НастройкаРМКНоменклатураПакет.Доступность = НастройкаРМК.РазрешитьБыстроеДобавлениеПакета;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБыстрыеТовары

&НаКлиенте
Процедура НастройкаРМКБыстрыеТоварыЗначениеЦветаФонаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НастройкаРМКБыстрыеТовары.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		СериализованноеЗначениеЦвета = СериализоватьЗначениеЦвета(ТекущиеДанные.ЗначениеЦветаФона);
		ТекущиеДанные.ЦветФона = СериализованноеЗначениеЦвета;
		
	КонецЕсли;
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИерархияТоваров

&НаКлиенте
Процедура НастройкаРМКСтруктураБыстрыхТоваровПриИзменении(Элемент)
	
	ЗаполнитьИзбранныеТоварыИРазвернуть();
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ИерархияТоваровИзображениеЭлемента" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущаяСтрока = ИерархияТоваров.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
		Если НЕ ТекущаяСтрока = КореньДерева() Тогда
		
			Если ЗначениеЗаполнено(ТекущаяСтрока.ИзображениеЭлемента) Тогда
				
				ЗаблокироватьДанныеФормыДляРедактирования();
				ДобавитьПросмотретьИзображениеПозиции();
				
			ИначеЕсли Не ТолькоПросмотр Тогда
				ДобавитьИзображениеКлиент();
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ДобавитьПозицию();
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.ИерархияТоваров.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		
		ИндексКорневогоЭлемента = ИерархияТоваров.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		Если Не ВыделенныеСтроки.Найти(ИндексКорневогоЭлемента)= Неопределено Тогда
			
			ЗаголовокПредупреждения = НСтр("ru = 'Удаление строк'");
			ТекстПредупреждения = НСтр("ru = 'Снимите выделение с корневого элемента для удаления строк.'");
			ПоказатьПредупреждение(, ТекстПредупреждения, , ЗаголовокПредупреждения);
			Отказ = Истина;
			
		КонецЕсли;
		
		Если Не Отказ Тогда
			
			Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
				
				УдаляемаяСтрока = ИерархияТоваров.НайтиПоИдентификатору(ВыделеннаяСтрока);
				Если ЗначениеЗаполнено(УдаляемаяСтрока.ВидМодификатора) Тогда
					
					Родитель = УдаляемаяСтрока.ПолучитьРодителя();
					
					Если Родитель.ЭтоКатегория Тогда
						ОсталисьГрупповыеМодификаторы = Ложь;
						ВложенныеЭлементыРодителя = Родитель.ПолучитьЭлементы();
						Для Каждого ВложенныйЭлементРодителя Из ВложенныеЭлементыРодителя Цикл
							Если НЕ ЗначениеЗаполнено(ВложенныйЭлементРодителя.ВидМодификатора) Тогда
								Продолжить;
							КонецЕсли;
							Идентификатор = ВложенныйЭлементРодителя.ПолучитьИдентификатор();
							Если ВыделенныеСтроки.Найти(Идентификатор)= Неопределено Тогда
								ОсталисьГрупповыеМодификаторы = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Для Каждого ВложенныйЭлементРодителя Из ВложенныеЭлементыРодителя Цикл
							Если ВложенныйЭлементРодителя.ЭтоКатегория Тогда
								Продолжить;
							КонецЕсли;
							Идентификатор = ВложенныйЭлементРодителя.ПолучитьИдентификатор();
							Если ВыделенныеСтроки.Найти(Идентификатор)= Неопределено Тогда
								ИмеетсяВложенность = ВложенныйЭлементРодителя.ПолучитьЭлементы().Количество() > 0 
									ИЛИ ОсталисьГрупповыеМодификаторы;
								ВложенныйЭлементРодителя.ИмеетсяВложенность = ИмеетсяВложенность;
								Если НЕ ИмеетсяВложенность Тогда
									ВложенныйЭлементРодителя.НомерКатегории = 0;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					Иначе
						ИмеетсяВложенность = Ложь;
						ВложенныеЭлементыРодителя = Родитель.ПолучитьЭлементы();
						Для Каждого ВложенныйЭлементРодителя Из ВложенныеЭлементыРодителя Цикл
							Идентификатор = ВложенныйЭлементРодителя.ПолучитьИдентификатор();
							Если ВыделенныеСтроки.Найти(Идентификатор)= Неопределено Тогда
								ИмеетсяВложенность = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Родитель.ИмеетсяВложенность = ИмеетсяВложенность;
						Если НЕ ИмеетсяВложенность Тогда
							Родитель.НомерКатегории = 0;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДанныеУзла = ВыбраннаяСтрокаДереваИзбранныхТоваров();

	Если Не ДанныеУзла.ЭтоНекорневойУзелДерева Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДанныеУзла.УзелДерева;
	
	Если ТипЗнч(ВыбранноеЗначение) =
			Тип("СправочникСсылка.ПалитраТоваровРМКПрисоединенныеФайлы") Тогда
		ТекущаяСтрока.ИзображениеЭлемента = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если Элемент.Имя = "ИерархияТоваров" Тогда
		
		ИдентификаторЭлемента = ПараметрыПеретаскивания.Значение[0];
		ЭлементДерева = ИерархияТоваров.НайтиПоИдентификатору(ИдентификаторЭлемента);
		
		Если ЭлементДерева = КореньДерева() Тогда
			Выполнение = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементДерева.ВидМодификатора) Тогда
			Выполнение = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Элемент.Имя = "ИерархияТоваров" Тогда
		
		ИдентификаторЭлемента = ПараметрыПеретаскивания.Значение[0];
		ЭлементДерева = ИерархияТоваров.НайтиПоИдентификатору(ИдентификаторЭлемента);
		ИдентификаторРодителя = Строка;
		КорневойЭлемент = КореньДерева();
		
		Если ИдентификаторРодителя = Неопределено Тогда
			ИдентификаторРодителя = КорневойЭлемент.ПолучитьИдентификатор();
		КонецЕсли;
		
		РодительскийЭлемент = ИерархияТоваров.НайтиПоИдентификатору(ИдентификаторРодителя);
		
		Если Не
			(ЭлементДерева = Неопределено ИЛИ РодительскийЭлемент = Неопределено) Тогда
			
			Если ЭлементДерева.ЭтоКатегория Тогда
				
				Если (РодительскийЭлемент.ПолучитьРодителя() = ЭлементДерева)
					Или (Не (РодительскийЭлемент.ЭтоКатегория
							Или РодительскийЭлемент.ПолучитьРодителя() = ЭлементДерева.ПолучитьРодителя()))
					Или (РодительскийЭлемент = КорневойЭлемент) Тогда
					
						ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
						СтандартнаяОбработка = Ложь;
						
				КонецЕсли;
				
			ИначеЕсли Не РодительскийЭлемент.ЭтоКатегория ИЛИ РодительскийЭлемент = КорневойЭлемент Тогда
				ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Элемент.Имя = "ИерархияТоваров" Тогда
		
		ИдентификаторЭлемента = ПараметрыПеретаскивания.Значение[0];
		ЭлементДерева = ИерархияТоваров.НайтиПоИдентификатору(ИдентификаторЭлемента);
		
		ИдентификаторРодителя = Строка;
		РодительскийЭлемент = ИерархияТоваров.НайтиПоИдентификатору(ИдентификаторРодителя);
		
		Если Не
			(ЭлементДерева = Неопределено ИЛИ РодительскийЭлемент = Неопределено) Тогда
			
			Если НЕ ЭлементДерева.ЭтоКатегория Тогда
				
				ВложенныеЭлементы = ЭлементДерева.ПолучитьЭлементы();
				Если ВложенныеЭлементы.Количество() = 0 Тогда
					
					ИмеютсяГрупповыеИдентификаторы = Ложь;
					ЭлементыРодителя = РодительскийЭлемент.ПолучитьЭлементы();
					Для Каждого ЭлементРодителя Из ЭлементыРодителя Цикл
						Если ЗначениеЗаполнено(ЭлементРодителя.ВидМодификатора) Тогда
							ИмеютсяГрупповыеИдентификаторы = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					ЭлементДерева.ИмеетсяВложенность = ИмеютсяГрупповыеИдентификаторы;
					Если Не ИмеютсяГрупповыеИдентификаторы Тогда
						ЭлементДерева.НомерКатегории = 0;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = ТекущаяСтрокаДереваТоваров();

	Если Не ТекущаяСтрока = Неопределено Тогда
		
		Номенклатура = ТекущаяСтрока.Номенклатура;
		ХарактеристикиИспользуются = ПроверитьПрименениеХарактеристикДляНоменклатуры(Номенклатура);
		ТекущаяСтрока.ХарактеристикиИспользуются = ХарактеристикиИспользуются;
		ТекущаяСтрока.ИмяЭлемента = ТекущаяСтрока.Номенклатура;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = ТекущаяСтрокаДереваТоваров();
	Если Не ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока.ИмяЭлемента = СтрШаблон(НСтр("ru = '%1 %2'"), ТекущаяСтрока.ИмяЭлемента, ТекущаяСтрока.Характеристика);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = ТекущаяСтрокаДереваТоваров();
	Если Не ТекущаяСтрока = Неопределено Тогда
		
		Номенклатура = ТекущаяСтрока.Номенклатура;
		
		ПараметрыВыбораХарактеристики = Новый Структура;
		ОбщегоНазначенияРМККлиентПереопределяемый.ЗаполнитьПараметрыВыбораХарактеристик(ПараметрыВыбораХарактеристики,
			Номенклатура, СтандартнаяОбработка);
			
			Если Не СтандартнаяОбработка Тогда
				ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора",
					ПараметрыВыбораХарактеристики,
					Элемент);
			КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровИзображениеЭлементаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьПросмотретьИзображениеПозиции();
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровВидМодификатораПриИзменении(Элемент)
	
	ТекущаяСтрока = ТекущаяСтрокаДереваТоваров();
	
	Если Не ТекущаяСтрока = Неопределено Тогда
		
		КореньДерева = КореньДерева();
		РодительМодификатора = ТекущаяСтрока.ПолучитьРодителя();
		
		Если ТекущаяСтрока.ЭтоКатегория ИЛИ (ТекущаяСтрока.ПолучитьЭлементы().Количество() > 0) ИЛИ 
			РодительМодификатора = КореньДерева ИЛИ ТекущаяСтрока = КореньДерева Тогда
			ТекущаяСтрока.ВидМодификатора = ПредопределенноеЗначение("Перечисление.ВидыМодификаторовРМК.ПустаяСсылка");
			Возврат;
		КонецЕсли;
		
		Если НЕ РодительМодификатора = Неопределено И РодительМодификатора.ЭтоКатегория Тогда
			ВложенныеЭлементы = РодительМодификатора.ПолучитьЭлементы();
			Для Каждого ВложенныйЭлемент Из ВложенныеЭлементы Цикл
				Если НЕ ЗначениеЗаполнено(ВложенныйЭлемент.ВидМодификатора) И Не ВложенныйЭлемент.ЭтоКатегория Тогда
					ВложенныйЭлемент.ИмеетсяВложенность = Истина;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекущаяСтрока.ВидМодификатора) Тогда
			ТекущаяСтрока.ВидМодификатора = ПредопределенноеЗначение("Перечисление.ВидыМодификаторовРМК.ВключатьВЧек")
		КонецЕсли;
		
		Родитель = ТекущаяСтрока.ПолучитьРодителя();
		Если Родитель.ЭтоКатегория Тогда
			ОсталисьГрупповыеМодификаторы = Ложь;
			ВложенныеЭлементыРодителя = Родитель.ПолучитьЭлементы();
			Для Каждого ВложенныйЭлементРодителя Из ВложенныеЭлементыРодителя Цикл
				Если ЗначениеЗаполнено(ВложенныйЭлементРодителя.ВидМодификатора) Тогда
					ОсталисьГрупповыеМодификаторы = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ВложенныйЭлементРодителя Из ВложенныеЭлементыРодителя Цикл
				Если ВложенныйЭлементРодителя.ЭтоКатегория Тогда
					Продолжить;
				КонецЕсли;
				
				ИмеетсяВложенность = (ВложенныйЭлементРодителя.ПолучитьЭлементы().Количество() > 0 
					ИЛИ ОсталисьГрупповыеМодификаторы) И НЕ ЗначениеЗаполнено(ВложенныйЭлементРодителя.ВидМодификатора);
				ВложенныйЭлементРодителя.ИмеетсяВложенность = ИмеетсяВложенность;
				Если НЕ ИмеетсяВложенность Тогда
					ВложенныйЭлементРодителя.НомерКатегории = 0;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
			
		НомерИзображения = 2;
		Если ТекущаяСтрока.ВидМодификатора = ПредопределенноеЗначение("Перечисление.ВидыМодификаторовРМК.ВключатьВЧек") Тогда
			НомерИзображения = 3;
			ТекущаяСтрока.ЦветФона = ЦветаФормы.ЗеленаяКнопка;
			ТекущаяСтрока.ИмеетсяВложенность = Ложь;
			ТекущаяСтрока.НомерКатегории = 0;
		ИначеЕсли ТекущаяСтрока.ВидМодификатора = ПредопределенноеЗначение("Перечисление.ВидыМодификаторовРМК.НеВключатьВЧек") Тогда
			НомерИзображения = 4;
		ИначеЕсли ТекущаяСтрока.ЭтоКатегория  Тогда
			НомерИзображения = 1;
		Иначе
			ТекущаяСтрока.ЦветФона = ЦветаФормы.АктивнаяКнопка;
		КонецЕсли;
		
		ТекущаяСтрока.НомерИзображения = НомерИзображения;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИзбранныеПозиции

&НаКлиенте
Процедура ЗаполнитьИзбранныеТоварыИРазвернуть()
	
	ЗаполнитьИерархиюИзбранныхТоваров();
	
	КорневойЭлемент = КореньДерева();
	ИдентификаторКорня = КорневойЭлемент.ПолучитьИдентификатор();
	Элементы.ИерархияТоваров.Развернуть(ИдентификаторКорня, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПалитруТоваровРМК()

	ЭлементыИерархии = ИерархияТоваров.ПолучитьЭлементы();
	Если ЭлементыИерархии.Количество() > 0 Тогда
		Если ЭлементыИерархии[0].ПолучитьЭлементы().Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(НастройкаРМК.СтруктураБыстрыхТоваров) Тогда
		ТекущийОбъект = НастройкаРМК.СтруктураБыстрыхТоваров.ПолучитьОбъект();
	Иначе
		ТекущийОбъект = Справочники.ПалитраТоваровРМК.СоздатьЭлемент();
		ТекущийОбъект.Наименование = НСтр("ru = 'Палитра быстрых товаров'");
		ТекущийОбъект.ШрифтЭлементовПодбора = ОбщегоНазначения.ЗначениеВСтрокуXML(ШрифтыСтиля.ШрифтОбычныйПолужирный12РМК);
		ТекущийОбъект.КоличествоЭлементовВРяду = 4;
		ТекущийОбъект.КоличествоРядов = 3;
		ТекущийОбъект.ВысотаЭлемента = 5;
	КонецЕсли;
	
	ЗаполнитьСоставПалитрыИзбранногоПоДаннымДерева(Ложь);
	
	ТекущийОбъект.Состав.Очистить();
	
	Для Каждого СтрокаИзбранного Из ИзбранныеПозиции Цикл
		
		СтрокаСостава = ТекущийОбъект.Состав.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСостава, СтрокаИзбранного);
		
		СтрокаСостава.Шрифт = ТекущийОбъект.ШрифтЭлементовПодбора;
		СтрокаСостава.ЦветШрифта = ОбщегоНазначения.ЗначениеВСтрокуXML(СтрокаИзбранного.ЦветШрифта);
		СтрокаСостава.ЦветФона = ОбщегоНазначения.ЗначениеВСтрокуXML(СтрокаИзбранного.ЦветФона);
		
	КонецЦикла;
	
	ТекущийОбъект.Записать();
	
	НастройкаРМК.СтруктураБыстрыхТоваров = ТекущийОбъект.Ссылка;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОбработкиПодбораТоваров(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ДанныеВыбора = ОбработатьПодборНаСервере(Результат);
		
		Если НЕ ДанныеВыбора = Неопределено Тогда
			
			ИдентификаторыПодобранныхЭлементов = ДанныеВыбора.ИдентификаторыЭлементов;
			
			Для Каждого Идентификатор Из ИдентификаторыПодобранныхЭлементов Цикл
				ЭлементДерева = ИерархияТоваров.НайтиПоИдентификатору(Идентификатор);
			КонецЦикла;
			
			Элементы.ИерархияТоваров.Развернуть(ДанныеВыбора.ИдентификаторРодителя);
			Элементы.ИерархияТоваров.ТекущаяСтрока = ДанныеВыбора.ИдентификаторПоследнегоВыбранногоЭлемента;
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПодборНаСервере(ВыбранноеЗначение)
	
	Результат = Неопределено;
	Позиции = ЗначенияПодбора(ВыбранноеЗначение);
	
	Если Позиции.Количество() > 0 Тогда
		
		ТекущаяСтрока = ТекущаяСтрокаДереваТоваровСервер();
		
		Родитель = ТекущаяСтрока;
		
		Если НЕ ТекущаяСтрока.ЭтоКатегория Тогда
			
			Родитель = ТекущаяСтрока.ПолучитьРодителя();
			
			Если Родитель = Неопределено Тогда
				Родитель = КореньДереваСервер();
			КонецЕсли;
			
		КонецЕсли;
		
		ЭлементыДерева = Родитель.ПолучитьЭлементы();
		Результат = Новый Структура("ИдентификаторыЭлементов", Новый Массив);
		
		Для Каждого Позиция Из Позиции Цикл
		
			НовыйЭлемент = ЭлементыДерева.Добавить();
			НовыйЭлемент.ЭтоКатегория = Ложь;
			НовыйЭлемент.НомерИзображения = 2;
			НовыйЭлемент.Номенклатура = Позиция.Номенклатура;
			НовыйЭлемент.ИмяЭлемента = Позиция.Номенклатура;
			НовыйЭлемент.ЦветФона = ЦветаФормы.АктивнаяКнопка;
			
			Результат.ИдентификаторыЭлементов.Добавить(НовыйЭлемент.ПолучитьИдентификатор());
		
		КонецЦикла;
		
			Результат.Вставить("ИдентификаторРодителя", Родитель.ПолучитьИдентификатор());
			Результат.Вставить("ИдентификаторПоследнегоВыбранногоЭлемента", НовыйЭлемент.ПолучитьИдентификатор());
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТекущаяСтрокаДереваТоваровСервер()
	
	Результат = Неопределено;
	ИдентификаторТекущейСтроки = Элементы.ИерархияТоваров.ТекущаяСтрока;
	Если ТипЗнч(ИдентификаторТекущейСтроки) = Тип("Число") Тогда
		Результат = ИерархияТоваров.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗначенияПодбора(ИсходныеДанные)

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Номенклатура");
	Результат.Колонки.Добавить("Характеристика");
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьЗначенияПодбораДляПалитры(ИсходныеДанные, Результат);
	
	Возврат Результат;

КонецФункции

&НаСервере
Функция КореньДереваСервер()
	Возврат ИерархияТоваров.ПолучитьЭлементы()[0];
КонецФункции

&НаКлиенте
Функция КореньДерева()
	Возврат ИерархияТоваров.ПолучитьЭлементы()[0];
КонецФункции

&НаСервере
Процедура ЗаполнитьИерархиюИзбранныхТоваров(ИсходныеДанные = Неопределено)
	
	ИспользоватьХарактеристики = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьИспользованиеХарактеристик(ИспользоватьХарактеристики);

	ЦветаФормы = ОбщегоНазначенияРМК.ЦветаФормыРМК();
	
	Объект = НастройкаРМК.СтруктураБыстрыхТоваров;
	
	ЭлементыДерева = ИерархияТоваров.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	Корень = ЭлементыДерева.Добавить();
	Корень.ИмяЭлемента = НСтр("ru = 'Первый уровень'", ОбщегоНазначения.КодОсновногоЯзыка());
	Корень.ЭтоКатегория = Истина;
	Корень.НомерИзображения = 0;
	
	НумерацияКатегорий = Новый Соответствие;
	НумерацияКатегорий.Вставить(0, Корень);

	Если ИсходныеДанные = Неопределено Тогда
		ИсходныеДанные = Объект.Ссылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсходныеДанные) Тогда

		ТекстЗапросаПостроенияДерева = 
		"ВЫБРАТЬ
		|	СтруктураПлиточногоИнтерфейсаПодбораРМКСостав.Ссылка КАК Ссылка,
		|	СтруктураПлиточногоИнтерфейсаПодбораРМКСостав.НомерСтроки КАК НомерСтроки,
		|	СтруктураПлиточногоИнтерфейсаПодбораРМКСостав.Номенклатура КАК Номенклатура,
		|	СтруктураПлиточногоИнтерфейсаПодбораРМКСостав.Характеристика КАК Характеристика,
		|	СтруктураПлиточногоИнтерфейсаПодбораРМКСостав.ЗаголовокЭлемента КАК ЗаголовокЭлемента,
		|	СтруктураПлиточногоИнтерфейсаПодбораРМКСостав.НомерКатегории КАК НомерКатегории,
		|	СтруктураПлиточногоИнтерфейсаПодбораРМКСостав.ИндексПозиции КАК ИндексПозиции,
		|	СтруктураПлиточногоИнтерфейсаПодбораРМКСостав.НомерКатегорииРазмещения КАК НомерКатегорииРазмещения,
		|	СтруктураПлиточногоИнтерфейсаПодбораРМКСостав.Шрифт КАК Шрифт,
		|	СтруктураПлиточногоИнтерфейсаПодбораРМКСостав.ЦветШрифта КАК ЦветШрифта,
		|	СтруктураПлиточногоИнтерфейсаПодбораРМКСостав.ЦветФона КАК ЦветФона,
		|	СтруктураПлиточногоИнтерфейсаПодбораРМКСостав.ЭтоКатегория КАК ЭтоКатегория,
		|	СтруктураПлиточногоИнтерфейсаПодбораРМКСостав.ИмяЭлемента КАК Наименование,
		|	СтруктураПлиточногоИнтерфейсаПодбораРМКСостав.ИмяЭлемента КАК ИмяЭлемента,
		|	СтруктураПлиточногоИнтерфейсаПодбораРМКСостав.ИзображениеЭлемента КАК ИзображениеЭлемента,
		|	СтруктураПлиточногоИнтерфейсаПодбораРМКСостав.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
		|	СтруктураПлиточногоИнтерфейсаПодбораРМКСостав.КатегорияРазмещения КАК КатегорияРазмещения,
		|	СтруктураПлиточногоИнтерфейсаПодбораРМКСостав.ВидМодификатора КАК ВидМодификатора
		|ПОМЕСТИТЬ ПалитраТоваровРМКСостав
		|ИЗ
		|	Справочник.ПалитраТоваровРМК.Состав КАК СтруктураПлиточногоИнтерфейсаПодбораРМКСостав
		|ГДЕ
		|	СтруктураПлиточногоИнтерфейсаПодбораРМКСостав.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПалитраТоваровРМКСостав.НомерКатегорииРазмещения КАК НомерКатегорииРазмещения
		|ПОМЕСТИТЬ ВТНомераКатегорийРазмещения
		|ИЗ
		|	ПалитраТоваровРМКСостав КАК ПалитраТоваровРМКСостав
		|ГДЕ
		|	ПалитраТоваровРМКСостав.НомерКатегорииРазмещения > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПалитраТоваровРМКСостав.НомерКатегории КАК НомерКатегории,
		|	ПалитраТоваровРМКСостав.НомерКатегорииРазмещения КАК НомерКатегорииРазмещения,
		|	ПалитраТоваровРМКСостав.ИндексПозиции КАК ИндексПозиции
		|ПОМЕСТИТЬ ВТГрупповыеМодификаторы
		|ИЗ
		|	ПалитраТоваровРМКСостав КАК ПалитраТоваровРМКСостав
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ПалитраТоваровРМКСостав.НомерКатегорииРазмещения КАК НомерКатегорииРазмещения
		|		ИЗ
		|			ПалитраТоваровРМКСостав КАК ПалитраТоваровРМКСостав
		|		ГДЕ
		|			ПалитраТоваровРМКСостав.НомерКатегорииРазмещения > 0
		|			И НЕ ПалитраТоваровРМКСостав.ВидМодификатора = ЗНАЧЕНИЕ(Перечисление.ВидыМодификаторовРМК.ПустаяСсылка)) КАК ВложенныйЗапрос
		|		ПО ПалитраТоваровРМКСостав.НомерКатегорииРазмещения = ВложенныйЗапрос.НомерКатегорииРазмещения
		|ГДЕ
		|	ПалитраТоваровРМКСостав.ВидМодификатора = ЗНАЧЕНИЕ(Перечисление.ВидыМодификаторовРМК.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПалитраТоваровРМКСостав.Ссылка КАК Ссылка,
		|	ПалитраТоваровРМКСостав.НомерСтроки КАК НомерСтроки,
		|	ПалитраТоваровРМКСостав.ЭтоКатегория КАК ЭтоКатегория,
		|	ВТНомераКатегорийРазмещения.НомерКатегорииРазмещения ЕСТЬ НЕ NULL 
		|		ИЛИ ВТГрупповыеМодификаторы.НомерКатегорииРазмещения ЕСТЬ НЕ NULL  КАК ИмеетсяВложенность,
		|	ПалитраТоваровРМКСостав.НомерКатегории КАК НомерКатегории,
		|	ПалитраТоваровРМКСостав.НомерКатегорииРазмещения КАК НомерКатегорииРазмещения,
		|	ПалитраТоваровРМКСостав.ИндексПозиции КАК ИндексПозиции,
		|	ПалитраТоваровРМКСостав.ИмяЭлемента КАК ИмяЭлемента,
		|	ПалитраТоваровРМКСостав.Номенклатура КАК Номенклатура,
		|	ПалитраТоваровРМКСостав.Характеристика КАК Характеристика,
		|	ПалитраТоваровРМКСостав.ЗаголовокЭлемента КАК ЗаголовокЭлемента,
		|	ПалитраТоваровРМКСостав.ИзображениеЭлемента КАК ИзображениеЭлемента,
		|	ПалитраТоваровРМКСостав.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
		|	ПалитраТоваровРМКСостав.Шрифт КАК Шрифт,
		|	ПалитраТоваровРМКСостав.ЦветШрифта КАК ЦветШрифта,
		|	ПалитраТоваровРМКСостав.ЦветФона КАК ЦветФона,
		|	ПалитраТоваровРМКСостав.ВидМодификатора КАК ВидМодификатора,
		|	ВЫБОР
		|		КОГДА ПалитраТоваровРМКСостав.ЭтоКатегория
		|			ТОГДА 1
		|		КОГДА ПалитраТоваровРМКСостав.ВидМодификатора = ЗНАЧЕНИЕ(Перечисление.ВидыМодификаторовРМК.ВключатьВЧек)
		|			ТОГДА 3
		|		КОГДА ПалитраТоваровРМКСостав.ВидМодификатора = ЗНАЧЕНИЕ(Перечисление.ВидыМодификаторовРМК.НеВключатьВЧек)
		|			ТОГДА 4
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК НомерИзображения,
		|	ПалитраТоваровРМКСостав.КатегорияРазмещения КАК КатегорияРазмещения
		|ИЗ
		|	ПалитраТоваровРМКСостав КАК ПалитраТоваровРМКСостав
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНомераКатегорийРазмещения КАК ВТНомераКатегорийРазмещения
		|		ПО ПалитраТоваровРМКСостав.НомерКатегории = ВТНомераКатегорийРазмещения.НомерКатегорииРазмещения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрупповыеМодификаторы КАК ВТГрупповыеМодификаторы
		|		ПО ПалитраТоваровРМКСостав.НомерКатегорииРазмещения = ВТГрупповыеМодификаторы.НомерКатегорииРазмещения
		|			И ПалитраТоваровРМКСостав.ИндексПозиции = ВТГрупповыеМодификаторы.ИндексПозиции
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерКатегорииРазмещения,
		|	КатегорияРазмещения,
		|	ИндексПозиции
		|ИТОГИ ПО
		|	НомерКатегорииРазмещения";
		
		Запрос = Новый Запрос(ТекстЗапросаПостроенияДерева);
		Запрос.УстановитьПараметр("Ссылка", ИсходныеДанные);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл
		
			ВыборкаПоКатегории = Выборка.Выбрать();
			РодительскийЭлемент = НумерацияКатегорий.Получить(Выборка.НомерКатегорииРазмещения).ПолучитьЭлементы();
			
			Пока ВыборкаПоКатегории.Следующий() Цикл
				
				НовыйЭлемент = РодительскийЭлемент.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйЭлемент, ВыборкаПоКатегории);
				
				Если НовыйЭлемент.ЭтоКатегория ИЛИ НовыйЭлемент.ИмеетсяВложенность Тогда
					НумерацияКатегорий.Вставить(НовыйЭлемент.НомерКатегории, НовыйЭлемент);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Объект.ШрифтЭлементовПодбора) Тогда
					НовыйЭлемент.Шрифт = ОбщегоНазначения.ЗначениеВСтрокуXML(Объект.ШрифтЭлементовПодбора);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаПоКатегории.ЦветШрифта) Тогда
					НовыйЭлемент.ЦветШрифта = ОбщегоНазначения.ЗначениеИзСтрокиXML(ВыборкаПоКатегории.ЦветШрифта);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаПоКатегории.ЦветФона) Тогда
					НовыйЭлемент.ЦветФона = ОбщегоНазначения.ЗначениеИзСтрокиXML(ВыборкаПоКатегории.ЦветФона);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПросмотретьИзображениеПозиции()
	
	Объект = НастройкаРМК.СтруктураБыстрыхТоваров;
	
	ДанныеУзла = ВыбраннаяСтрокаДереваИзбранныхТоваров();
	
	Если Не ДанныеУзла.ЭтоНекорневойУзелДерева Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект) Тогда
		ВыполнитьДействиеНадИзображениемПослеДобавленияПросмотра();
	Иначе
		
		ТекстВопроса = НСтр("ru = 'Перед выбором изображения необходимо записать объект. Продолжить?'");
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ПодтверждениеЗаписиЭлементаПриДобавленииПросмотреИзображения", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеЗаписиЭлементаПриДобавленииПросмотреИзображения(Ответ, Параметры) Экспорт
	
	Объект = НастройкаРМК.СтруктураБыстрыхТоваров;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		СохранитьНастройкиРМК(Команды.СохранитьНастройкиРМК);
		
		Если ЗначениеЗаполнено(Объект) Тогда
			ВыполнитьДействиеНадИзображениемПослеДобавленияПросмотра();
		КонецЕсли;
		
	Иначе
		
		ТекстПредупреждения = НСтр("ru = 'Невозможно выполнить действие без сохранения структуры.'");
		Заголовок = НСтр("ru = 'Добавление изображения'");
		ПоказатьПредупреждение(,ТекстПредупреждения, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеКлиент()
	
	Объект = НастройкаРМК.СтруктураБыстрыхТоваров;
	
	ДанныеУзла = ВыбраннаяСтрокаДереваИзбранныхТоваров();
	
	Если НЕ ДанныеУзла.ЭтоНекорневойУзелДерева Тогда
		
		ПоказатьПредупреждение(, 
			НСтр("ru = 'Выберите строку для назначения изображения.'"),
			, НСтр("ru = 'Добавление изображения'") );
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкаРМК.СтруктураБыстрыхТоваров) Тогда
		
		ТекстВопроса = НСтр("ru = 'Перед выбором изображения необходимо записать объект. Продолжить?'");
		ОбработчикОповещения = Новый ОписаниеОповещения("ПодтверждениеЗаписиЭлементаПриДобавленииИзображения", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ДобавитьИзображениеЭлементуСтруктуры();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПодтверждениеЗаписиЭлементаПриДобавленииИзображения(Ответ, Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаписатьПалитруТоваровРМК();
		
		Если ЗначениеЗаполнено(НастройкаРМК.СтруктураБыстрыхТоваров) Тогда
			ДобавитьИзображениеЭлементуСтруктуры();
		КонецЕсли;
		
	Иначе
		
		ТекстПредупреждения = НСтр("ru = 'Невозможно добавить изображение без сохранения структуры.'");
		Заголовок = НСтр("ru = 'Добавление изображения'");
		ПоказатьПредупреждение(,ТекстПредупреждения, Заголовок);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ВыбраннаяСтрокаДереваИзбранныхТоваров()
	
	Строка = ТекущаяСтрокаДереваТоваров();
	ЭтоНекорневойУзелДерева = Не(Строка = Неопределено И Строка = КореньДерева());
	
	Результат = Новый Структура();
	Результат.Вставить("ЭтоНекорневойУзелДерева", ЭтоНекорневойУзелДерева);
	Результат.Вставить("УзелДерева", Строка);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ТекущаяСтрокаДереваТоваров()
	
	Результат = Неопределено;
	Если Элементы.ИерархияТоваров.ТекущиеДанные <> Неопределено Тогда
		
		Идентификатор = Элементы.ИерархияТоваров.ТекущиеДанные.ПолучитьИдентификатор();
		Результат = ИерархияТоваров.НайтиПоИдентификатору(Идентификатор);
		
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

&НаКлиенте
Процедура ДобавитьПозицию()

	ТекущаяСтрока = ТекущаяСтрокаДереваТоваров();
	
	Родитель = ТекущаяСтрока;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ВидМодификатора) Тогда
		
		Родитель = ТекущаяСтрока.ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
			Родитель = КореньДерева();
		КонецЕсли;
		
	КонецЕсли;
	
	ИдентификаторРодителя = Родитель.ПолучитьИдентификатор();
	
	ДочерниеЭлементы = Родитель.ПолучитьЭлементы();
	НовыйЭлемент = ДочерниеЭлементы.Добавить();
	НовыйЭлемент.ЭтоКатегория = Ложь;
	НовыйЭлемент.НомерИзображения = 2;
	НовыйЭлемент.ЦветФона = ЦветаФормы.АктивнаяКнопка;
	
	Если НЕ ТекущаяСтрока.ЭтоКатегория Тогда
		НовыйЭлемент.НомерИзображения = 3;
		НовыйЭлемент.ВидМодификатора = ПредопределенноеЗначение("Перечисление.ВидыМодификаторовРМК.ВключатьВЧек");
		НовыйЭлемент.ЦветФона = ЦветаФормы.ЗеленаяКнопка;
		
		Родитель.ИмеетсяВложенность = Истина;
	Иначе
		ВложенныеЭлементы = Родитель.ПолучитьЭлементы();
		ИмеютсяИдентификаторыНаГруппу = Ложь;
		Для Каждого ВложенныйЭлемент Из ВложенныеЭлементы Цикл
			Если ЗначениеЗаполнено(ВложенныйЭлемент.ВидМодификатора) Тогда
				ИмеютсяИдентификаторыНаГруппу = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ИмеютсяИдентификаторыНаГруппу Тогда
			НовыйЭлемент.ИмеетсяВложенность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ИдентификаторЭлемента = НовыйЭлемент.ПолучитьИдентификатор();
	
	ОтображениеДерева = Элементы.ИерархияТоваров;
	
	ОтображениеДерева.Развернуть(ИдентификаторРодителя);
	ОтображениеДерева.ТекущаяСтрока = ИдентификаторЭлемента;
	ОтображениеДерева.ТекущийЭлемент = Элементы.ИерархияТоваровНоменклатура;
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЭлементуСтруктуры()
	
	Объект = НастройкаРМК.СтруктураБыстрыхТоваров;
	ОбъектСсылка = ОбщегоНазначенияРМКВызовСервера.ЗначениеРеквизитаОбъекта(Объект, "Ссылка");
	
	ЭтоВыборИзображения = Истина;
	ИдентификаторФайла = Новый УникальныйИдентификатор;
	РаботаСФайламиКлиент.ДобавитьФайлы(ОбъектСсылка, ИдентификаторФайла, РасширенияИзображений());
	ЭтоВыборИзображения = Ложь;
	
КонецПроцедуры

&НаСервере
Функция РасширенияИзображений()
	
	ПереченьРасширений = СтрШаблон(НСтр("ru = 'Все изображения (%1)|%1"
		                            + "|Все файлы(*.*)|*.*"
		                            + "|Формат bmp(*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle"
		                            + "|Формат GIF(*.gif*)|*.gif"
		                            + "|Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg"
		                            + "|Формат PNG(*.png*)|*.png"
		                            + "|Формат TIFF(*.tif)|*.tif"
		                            + "|Формат icon(*.ico)|*.ico"
		                            + "|Формат метафайл(*.wmf;*.emf)|*.wmf;*.emf'"),
		"*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf");
	Возврат ПереченьРасширений;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьДействиеНадИзображениемПослеДобавленияПросмотра()
	
	Объект = НастройкаРМК.СтруктураБыстрыхТоваров;
	
	ТекущаяСтрока = ТекущаяСтрокаДереваТоваров();
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ИзображениеЭлемента) Тогда
		ПросмотретьПрисоединенныйФайл();
	ИначеЕсли ЗначениеЗаполнено(Объект) И НЕ ТолькоПросмотр Тогда
		ДобавитьИзображениеЭлементуСтруктуры();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл()
	
	ДанныеУзла = ВыбраннаяСтрокаДереваИзбранныхТоваров();

	Если Не ДанныеУзла.ЭтоНекорневойУзелДерева Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДанныеУзла.УзелДерева;
		
	Если ЗначениеЗаполнено(ТекущаяСтрока.ИзображениеЭлемента) Тогда
		
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущаяСтрока.ИзображениеЭлемента,
			УникальныйИдентификатор);
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
		
	Иначе
		
		ТекстПредупреждения = НСтр("ru = 'Не найдено изображение для просмотра.'");
		ЗаголовокПредупреждения = НСтр("ru = 'Просмотр изображения'");
		ПоказатьПредупреждение(,ТекстПредупреждения, ЗаголовокПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПанельИзбранныхТоваров()
	
	АдресИзображенияУровеньВверх = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.УровеньВверх, ЭтотОбъект.УникальныйИдентификатор);
	АдресИзображенияУровеньВниз = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.УровеньВниз, ЭтотОбъект.УникальныйИдентификатор);
	
	ИсходныеДанныеГорячейКлавиши = Неопределено;
	ИнтерфейсРМКСлужебный.СформироватьЭлементыПанелиИзбранныхПозиций(ЭтотОбъект, ИсходныеДанныеГорячейКлавиши);
	
	Элементы.Предпросмотр.Пометка = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоставПалитрыИзбранногоПоДаннымДерева(ПреобразоватьМодификаторы = Ложь)
	
	ИзбранныеПозиции.Очистить();
	ИндексКорневогоЭлемента = 0;
	ЭлементыДерева = ИерархияТоваров.ПолучитьЭлементы();
	КорневойЭлемент = ЭлементыДерева[ИндексКорневогоЭлемента];
	Ветви = КорневойЭлемент.ПолучитьЭлементы();
	
	ПорядковыйНомер = 0;
	ЗаполнитьСоставПалитрыИзбранногоПоДаннымДереваВУзле(ИзбранныеПозиции, Ветви, ИндексКорневогоЭлемента, ПорядковыйНомер,, ПреобразоватьМодификаторы);
	
	МаксимальныйИндекс = 0;
	Для Каждого СтрокаИзбранных Из ИзбранныеПозиции Цикл
		
		СтрокаИзбранных.ДоступностьКоманды = Истина;
		МаксимальныйИндекс = Макс(МаксимальныйИндекс,
			(СтрокаИзбранных.ИндексПозиции + ?(СтрокаИзбранных.НомерКатегорииРазмещения > 0, 1, 0)));
		
	КонецЦикла;
	
	МаксимальноеКоличествоИзбранныхНаСтранице = МаксимальныйИндекс;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоставПалитрыИзбранногоПоДаннымДереваВУзле(ОбъектПалитры, ЭлементыДерева,
	НомерКатегории, ПорядковыйНомер, Знач ЭлементыДереваМодификаторы = Неопределено, ПреобразоватьМодификаторы)
	
	ТекущийИндексПозиции = 0;
	ТекущийНомерКатегории = НомерКатегории;
	
	Если ПреобразоватьМодификаторы Тогда
		Если НЕ ЗначениеЗаполнено(ЭлементыДереваМодификаторы) Тогда
			ЭлементыДереваМодификаторы = Новый Массив;
			Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
				
				Родитель = ЭлементДерева.ПолучитьРодителя();
				Если ЗначениеЗаполнено(ЭлементДерева.ВидМодификатора) И Родитель.ЭтоКатегория Тогда
					ЭлементыДереваМодификаторы.Добавить(ЭлементДерева);
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Для Каждого ЭлементДерева Из ЭлементыДереваМодификаторы Цикл
				НовыйЭлементПалитры = ОбъектПалитры.Добавить();
				ЗаполнитьЭлементПалитрыПоЭлементуДерева(НовыйЭлементПалитры, ОбъектПалитры, Ложь, ПреобразоватьМодификаторы, 
					ЭлементДерева, ЭлементыДереваМодификаторы, ТекущийИндексПозиции, ПорядковыйНомер, НомерКатегории, ТекущийНомерКатегории);
				
				НовыйЭлементПалитры.НомерКатегории = 0;
			КонецЦикла;
			ЭлементыДереваМодификаторы = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		Если ПреобразоватьМодификаторы И НЕ ЭлементыДереваМодификаторы.Найти(ЭлементДерева) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлементПалитры = ОбъектПалитры.Добавить();
		ЗаполнитьЭлементПалитрыПоЭлементуДерева(НовыйЭлементПалитры, ОбъектПалитры, Истина, ПреобразоватьМодификаторы,
			ЭлементДерева, ЭлементыДереваМодификаторы, ТекущийИндексПозиции, ПорядковыйНомер, НомерКатегории, ТекущийНомерКатегории);
		
	КонецЦикла;
	
	НомерКатегории = ТекущийНомерКатегории;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементПалитрыПоЭлементуДерева(НовыйЭлементПалитры, ОбъектПалитры, ЗаполнитьВложенныеЭлементы, ПреобразоватьМодификаторы, 
	ЭлементДерева, ЭлементыДереваМодификаторы, ТекущийИндексПозиции, ПорядковыйНомер, НомерКатегории, ТекущийНомерКатегории)
	
	ЗаполнитьЗначенияСвойств(НовыйЭлементПалитры, ЭлементДерева);
	ТекущийИндексПозиции = ТекущийИндексПозиции + 1;
	НовыйЭлементПалитры.ИндексПозиции = ТекущийИндексПозиции;
	
	НовыйЭлементПалитры.НомерКатегорииРазмещения = НомерКатегории;
	
	ПорядковыйНомер = ПорядковыйНомер + 1;
	ЭлементДерева.ПорядковыйНомер = ПорядковыйНомер;
	НовыйЭлементПалитры.ПорядковыйНомер = ПорядковыйНомер;
	
	Если ЗаполнитьВложенныеЭлементы Тогда
		ВложенныеЭлементы = ЭлементДерева.ПолучитьЭлементы();
		
		Если (ЭлементДерева.ЭтоКатегория ИЛИ ЭлементДерева.ИмеетсяВложенность) Тогда
			ТекущийНомерКатегории = ТекущийНомерКатегории + 1;
			НовыйЭлементПалитры.НомерКатегории = ТекущийНомерКатегории;
			
			Если ЭлементДерева.ЭтоКатегория Тогда
				ЭлементыДереваМодификаторы = Новый Массив;
			КонецЕсли;
			
			ЗаполнитьСоставПалитрыИзбранногоПоДаннымДереваВУзле(ОбъектПалитры,
				ВложенныеЭлементы, ТекущийНомерКатегории, ПорядковыйНомер, ЭлементыДереваМодификаторы, ПреобразоватьМодификаторы);
			
		КонецЕсли;
	КонецЕсли;
	
	ИменаСвойствЗаполнения = "ИндексПозиции, НомерКатегорииРазмещения, НомерКатегории";
	ЗаполнитьЗначенияСвойств(ЭлементДерева,
		НовыйЭлементПалитры, ИменаСвойствЗаполнения);
	
	НовыйЭлементПалитры.ЦветШрифта = ЭлементДерева.ЦветШрифта;
	НовыйЭлементПалитры.ЦветФона = ЭлементДерева.ЦветФона;
	
	Если ЗначениеЗаполнено(НовыйЭлементПалитры.ИзображениеЭлемента) Тогда
		НовыйЭлементПалитры.АдресИзображения = НавигационнаяСсылкаИзображения(ЭлементДерева.ИзображениеЭлемента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НавигационнаяСсылкаИзображения(ДанныеИзображения)
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат РаботаСФайлами.ДанныеФайла(ДанныеИзображения, ЭтотОбъект.УникальныйИдентификатор).СсылкаНаДвоичныеДанныеФайла;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ИзбранноеВыбор(Команда, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомерНажатой = Сред(Команда.Имя, 33);
	НомерНажатой = Число(НомерНажатой);
	
	КоррекцияИндекса = ?(ТекущаяСтраницаКнопок = 0, 0, 1);
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("НомерКатегорииРазмещения", ТекущаяСтраницаКнопок);
	ОтборСтрок.Вставить("ИндексПозиции", НомерНажатой+1-КоррекцияИндекса);
	
	ИзбранныеПозицииНаУровне = ИзбранныеПозиции.НайтиСтроки(ОтборСтрок);
	
	Если ИзбранныеПозицииНаУровне.Количество() = 0 Тогда
		
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("НомерКатегории", ТекущаяСтраницаКнопок);
		ПозицияДляВозврата = ИзбранныеПозиции.НайтиСтроки(ОтборСтрок);
		
		Если ПозицияДляВозврата.Количество() = 0 Тогда
			ТекущаяСтраницаКнопок = 0;
		Иначе
			ТекущаяСтраницаКнопок = ПозицияДляВозврата[0].НомерКатегорииРазмещения;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
			"ПорядковыйНомер", Элементы.ИерархияТоваров.ТекущаяСтрока, ИерархияТоваров.ПолучитьЭлементы(), ТекущаяСтраницаКнопок, Ложь);
		
		ЗаполнитьКнопки();
		Возврат;
	КонецЕсли;
	
	СтрокаНажатой = ИзбранныеПозицииНаУровне[0];
	
	ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
		"ПорядковыйНомер", Элементы.ИерархияТоваров.ТекущаяСтрока, ИерархияТоваров.ПолучитьЭлементы(), СтрокаНажатой.ПорядковыйНомер, Ложь);
	
	Если СтрокаНажатой.ЭтоКатегория ИЛИ 
		СтрокаНажатой.ИмеетсяВложенность Тогда
		
		ТекущаяСтраницаКнопок = СтрокаНажатой.НомерКатегории;
		ЗаполнитьКнопки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКнопки()
	
	ИнтерфейсРМКСлужебныйКлиент.ЗаполнитьКнопкиИзбранныхПозиций(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура КонвертироватьНастройкиСтарогоРМКСервер()
	
	ОбщегоНазначенияРМК.КонвертироватьНастройкиСтарогоРМК(ЭтотОбъект);
	АктуализироватьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Функция ПечататьИнтегрированныйЧекЕГАИС()
	Возврат ОбщегоНазначенияРМК.ИспользоватьОбщийКодДляЧекаККТИЕГАИС();
КонецФункции

&НаСервере
Функция ФормироватьИнтегрированныйСлипЧек()
	Возврат ОбщегоНазначенияРМК.ФормироватьИнтегрированныйСлипЧек();
КонецФункции

&НаСервере
Функция ЛокальныйРасчетСкидокПоддерживаетПромокоды()
	Возврат ОбщегоНазначенияРМК.ЛокальныйРасчетСкидокПоддерживаетПромокоды();
КонецФункции 

&НаСервере
Процедура ОбновитьПризнакИспользованияОграниченийПродаж(ПараметрыОбновления)

	Если ТипЗнч(ПараметрыОбновления) = Тип("Структура")
		И ПараметрыОбновления.Свойство("ИспользоватьОграниченияПродаж") Тогда
	
		ИспользоватьПоставляемыеОграниченияПродаж = ПараметрыОбновления.ИспользоватьОграниченияПродаж;
		ОбщегоНазначенияРМКПереопределяемый.ОбновитьПризнакИспользованияОграниченийПродаж(ИспользоватьПоставляемыеОграниченияПродаж,
			ПараметрыОбновления);
			
			
		ИспользоватьЗапретПродаж = ?(ИспользоватьПоставляемыеОграниченияПродаж,
			ИспользоватьПоставляемыеОграниченияПродаж,
			ИспользоватьСерверЛояльностиПолучательДанных);
			
		ТекстПоУмолчанию = НСтр("ru = 'Ограничение продажи товаров определенного вида по настроенному расписанию.'");
		ПереопределенныйТекстПодсказки = ОбщегоНазначенияРМККлиентСервер.ТекстПодсказкиНастройкиЗапретовПродаж();
		ТекстПодсказкиПризнака =
			?(ИспользоватьПоставляемыеОграниченияПродаж И НЕ ПустаяСтрока(ПереопределенныйТекстПодсказки),
				ПереопределенныйТекстПодсказки,
				ТекстПоУмолчанию); 
		Элементы.ИспользоватьЗапретПродаж.РасширеннаяПодсказка.Заголовок = ТекстПодсказкиПризнака;
		
		ИспользоватьЗапретПродажПриИзмененииСервер();
		Элементы.ИспользоватьЗапретПродаж.Доступность = НЕ ИспользоватьПоставляемыеОграниченияПродаж;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ИменаПолейФлажков()

	Результат = Новый Массив();
	Результат.Добавить("НастройкаРМКСворачиватьСтрокиПриПечатиЧека");
	Результат.Добавить("НастройкаРМКДобавлятьВсеТоварыОтдельнойСтрокой");
	Результат.Добавить("НастройкаРМКОставлятьПоследнийЧекНаЭкране");
	Результат.Добавить("НастройкаРМКПродажиСНесколькихКассККМ");
	Результат.Добавить("НастройкаРМКИспользоватьРежимСкупки");
	Результат.Добавить("ИспользоватьРасширеннуюФормуПодбора");
	Результат.Добавить("НастройкаРМКЗакрыватьПодборПриВыбореТовара");
	Результат.Добавить("НастройкаРМКПоказыватьАртикулНоменклатуры");
	Результат.Добавить("НастройкаРМКПоказыватьКодНоменклатуры");
	Результат.Добавить("НастройкаРМКРазрешитьВыборПродавца");
	Результат.Добавить("ИспользоватьСерверЛояльностиПолучательДанных");
	Результат.Добавить("НастройкаРМКОтправлятьSMSКодПриЗаведенииКарты");
	Результат.Добавить("ОтправлятьSMSПриПоискеКартыПоНомеруТелефона");
	Результат.Добавить("ОтправлятьSMSПриОплатеБонусами");
	Результат.Добавить("ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
	Результат.Добавить("ИспользоватьЗапретПродаж");
	Результат.Добавить("НастройкаРМКОжидатьРезультатПроверкиМарок");
	Результат.Добавить("КонтролироватьЕМРЦ");
	Результат.Добавить("ИспользоватьОплатуСертификатамиНСПК");
	Результат.Добавить("ИспользоватьЗаменуТоваров");
	Результат.Добавить("НастройкаРМКЗапрашиватьПодтверждениеВозраста18Плюс");
	Результат.Добавить("ВопросПоРасчетуСкидок");
	Результат.Добавить("НастройкаРМКИспользоватьПромокоды");
	Результат.Добавить("НастройкаРМКРазрешитьВыборСклада");
	Результат.Добавить("НастройкаРМКВыдаватьНаличныеНаКассе");
	Результат.Добавить("НастройкаРМКЗавершатьСессиюКассираПослеПродажи");
	Результат.Добавить("НастройкаРМКИспользоватьПанельВводаНаличныхКупюр");
	Результат.Добавить("НастройкаРМКВыдаватьПодарокНаКассе");
	Результат.Добавить("НастройкаРМКРаботаВРежимеМедленногоСоединения");
	Возврат Результат;

КонецФункции

&НаСервере
Процедура УстановитьВидОтображенияБинарныхЭлементовИнтерфейса(ИменаЭлементов)
	
	Если ТипЗнч(ИменаЭлементов) = Тип("Массив") Тогда
		
		ВидОтображения = ОбщегоНазначенияРМККлиентСервер.ВидОтображенияБинарногоПоля();
		ПоложениеЗаголовкаЭлемента = ОбщегоНазначенияРМККлиентСервер.ПоложениеЗаголовкаЭлемента();
		
		Для Каждого ИмяЭлемента Из ИменаЭлементов Цикл
		
			Попытка
			
				ЭлементФормы = Элементы[ИмяЭлемента];
				
				Если ТипЗнч(ЭлементФормы) = Тип("ПолеФормы")
					И ЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка Тогда
					
						ЭлементФормы.ВидФлажка = ВидОтображения;
						ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлемента;
						
				КонецЕсли;
			
			Исключение
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Ошибка получения реквизита формы по имени'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Продолжить;
				
			КонецПопытки;
		
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	ИнтерфейсРМКСлужебный.УстановитьУсловноеОформлениеГорячихКлавиш(ЭтотОбъект);
	ИнтерфейсРМКСлужебный.УстановитьУсловноеОформлениеИерархииБыстрыхТоваров(ЭтотОбъект);
	ОбщегоНазначенияРМКПереопределяемый.НастроитьУсловноеОформлениеВНастройкахРМК(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеНастройки(ЗначениеНастройки)
	
	НастройкаОбъект = ЗначениеНастройки.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(НастройкаОбъект, "НастройкаРМК");
	ЗаполнитьДанныеПоНастройкеРМК(НастройкаОбъект.Ссылка);
	
КонецПроцедуры

&НаСервере
Функция СохранитьНастройкиРМКНаСервере()
	
	ПеренестиГорячиеКлавишиВТабличнуюЧастьОбъекта();
	Если ОтправлятьSMSПриПоискеКартыПоНомеруТелефона Тогда
		НастройкаРМК.ОтправлятьSMSКодПриПродаже = Перечисления.ВариантыОтправкиSMSПриПродаже.ПриВыборе;
	ИначеЕсли ОтправлятьSMSПриОплатеБонусами Тогда
		НастройкаРМК.ОтправлятьSMSКодПриПродаже = Перечисления.ВариантыОтправкиSMSПриПродаже.ПриОплатеБаллами;
	Иначе
		НастройкаРМК.ОтправлятьSMSКодПриПродаже = Перечисления.ВариантыОтправкиSMSПриПродаже.ПустаяСсылка();
	КонецЕсли;
	
	РезультатВыполнения = Новый Структура("ВыполненоУспешно,ТекстПредупрежденийОшибок", Истина, "");
	
	ОбъектНастройки = РеквизитФормыВЗначение("НастройкаРМК");
	
	Если НЕ ЗначениеЗаполнено(НастройкаРМК.Ссылка) Тогда
		
		Если КоличествоДоступныхНастроек > 0 Тогда
			
			ТекстПредупреждения =
				НСтр("ru = 'Невозможно создать еще одну настройку для текущего рабочего места
					|Пожалуйста, выберите подходящую настройку из существующих'");
			РезультатВыполнения.Вставить("ВыполненоУспешно", Ложь);
			РезультатВыполнения.Вставить("ТекстПредупрежденийОшибок", ТекстПредупреждения);
			
			Возврат РезультатВыполнения;
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(НастройкаРМК.Наименование) Тогда
				
				ТекстПредупреждения =
					НСтр("ru = 'Пожалуйста, укажите наименование для настройки.'");
				РезультатВыполнения.Вставить("ВыполненоУспешно", Ложь);
				РезультатВыполнения.Вставить("ТекстПредупрежденийОшибок", ТекстПредупреждения);
				
				Возврат РезультатВыполнения;
				
			КонецЕсли;
			
			ТекущееРабочееМесто = ПараметрыСеанса.РабочееМестоКлиента;
			
			Если НЕ ЗначениеЗаполнено(ТекущееРабочееМесто) Тогда
				ТекущееРабочееМесто = МенеджерОборудованияВызовСервера.РабочееМестоКлиента();
			КонецЕсли;
			
			Если НЕ НоваяНастройка Или НЕ ЗначениеЗаполнено(ОбъектНастройки.РабочееМесто) Тогда
				ОбъектНастройки.РабочееМесто = ТекущееРабочееМесто;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НастройкиДляПроверкиЗаполнения = НастройкиДляПроверкиЗаполнения();
	Для Каждого ПроверяемаяНастройка Из НастройкиДляПроверкиЗаполнения Цикл
		
		Если Не ЗначениеЗаполнено(НастройкаРМК[ПроверяемаяНастройка.ИмяНастройки]) Тогда
			
			РезультатВыполнения.Вставить("ВыполненоУспешно", Ложь);
			РезультатВыполнения.Вставить("ТекстПредупрежденийОшибок", ПроверяемаяНастройка.ТекстПредупреждения);
			Возврат РезультатВыполнения;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НастройкаРМК.БыстрыеТовары.Количество() > 12 Тогда
		
		ТекстПредупреждения =
			НСтр("ru = 'Можно добавить не более 12 быстрых товаров.'");
		РезультатВыполнения.Вставить("ВыполненоУспешно", Ложь);
		РезультатВыполнения.Вставить("ТекстПредупрежденийОшибок", ТекстПредупреждения);
		
		Возврат РезультатВыполнения;
		
	КонецЕсли;
	
	Если НастройкаРМК.БыстрыеТовары.Количество() > 0 Тогда
		
		Для Каждого СтрокаТовара Из НастройкаРМК.БыстрыеТовары Цикл
			СтрокаТовара.ЦветФона = ОбщегоНазначения.ЗначениеВСтрокуXML(СтрокаТовара.ЗначениеЦветаФона);
		КонецЦикла;
		
	КонецЕсли;
	
	Если НастройкаРМК.ПродажиСНесколькихКассККМ И НЕ ЗначениеЗаполнено(НастройкаРМК.ОсновнаяКассаККМ) Тогда
		
		ТекстПредупреждения =
			НСтр("ru = 'Пожалуйста, выберите основную кассу ККМ.'");
		РезультатВыполнения.Вставить("ВыполненоУспешно", Ложь);
		РезультатВыполнения.Вставить("ТекстПредупрежденийОшибок", ТекстПредупреждения);
		
		Возврат РезультатВыполнения;
		
	КонецЕсли;
	
	Если ИспользоватьСерверЛояльностиПолучательДанных
			И (НЕ ЗначениеЗаполнено(НастройкаРМК.АдресСервераЛояльности)
				ИЛИ НЕ ЗначениеЗаполнено(НастройкаРМК.ПользовательСервераЛояльности)) Тогда
		
		ТекстПредупреждения =
			НСтр("ru = 'Пожалуйста, укажите адрес и пользователя сервера лояльности.'");
		РезультатВыполнения.Вставить("ВыполненоУспешно", Ложь);
		РезультатВыполнения.Вставить("ТекстПредупрежденийОшибок", ТекстПредупреждения);
		
		Возврат РезультатВыполнения;
		
	КонецЕсли;
	
	ОбщегоНазначенияРМКПереопределяемый.ПриСохраненииНастроекРМК(ЭтотОбъект, РезультатВыполнения);
	Если НЕ РезультатВыполнения.ВыполненоУспешно Тогда
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	
	НачатьТранзакцию();
	
	Попытка
		
		ЗаписатьПалитруТоваровРМК();
		ОбъектНастройки.СтруктураБыстрыхТоваров = НастройкаРМК.СтруктураБыстрыхТоваров;
		
		ОбъектНастройки.Записать(); // АПК:566 - допустимый синхронный вызов
		Модифицированность = Ложь;
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		Модифицированность = Истина;
		
		ТекстОшибки = НСтр("ru = 'Ошибка при записи настроек РМК.'");
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при записи настроек РМК.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		РезультатВыполнения.Вставить("ВыполненоУспешно", Ложь);
		РезультатВыполнения.Вставить("ТекстПредупрежденийОшибок", ТекстОшибки);
		Возврат РезультатВыполнения;
		
	КонецПопытки;
	
	Если ПарольСервераЛояльностиИзменен Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ОбъектНастройки.Ссылка,
			ПарольСервераЛояльности, "ПарольСервераЛояльности");
		УстановитьПривилегированныйРежим(Ложь);
		ПарольСервераЛояльности = ?(ЗначениеЗаполнено(ПарольСервераЛояльности), УникальныйИдентификатор, "");
		ПарольСервераЛояльностиИзменен = Ложь;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ОбъектНастройки, "НастройкаРМК");
	АктуализироватьОтображениеУсловногоОформленияХарактеристик();
	ОбновитьПодсказкуТаблицыГорячихКлавиш(ОбъектНастройки);
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Процедура ПрефиксШтрихкодаВесовогоТовараПриИзмененииНаСервере()
	
	ИмяКонстанты = ОбщегоНазначенияРМК.ИмяКонстанты("ПрефиксШтрихкодаВесовогоТовара");
	СохранитьЗначениеКонстанты(ИмяКонстанты, ПрефиксШтрихкодаВесовогоТовара);
	
КонецПроцедуры

&НаСервере
Процедура ПрефиксШтрихкодаШтучногоТовараПриИзмененииНаСервере()
	
	ИмяКонстанты = ОбщегоНазначенияРМК.ИмяКонстанты("ПрефиксШтрихкодаФасованногоТовара");
	СохранитьЗначениеКонстанты(ИмяКонстанты, ПрефиксШтрихкодаШтучногоФасованногоТовара);
	
КонецПроцедуры

&НаСервере
Процедура ШаблонШтрихкодаТовараПриИзмененииНаСервере()
	
	ИмяКонстанты = ОбщегоНазначенияРМК.ИмяКонстанты("ШаблонШтрихкодаВесовыхТоваров");
	СохранитьЗначениеКонстанты(ИмяКонстанты, ШаблонШтрихкодаТовара);
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиГорячиеКлавишиВТабличнуюЧастьОбъекта()
	
	НастройкаРМК.ГорячиеКлавиши.Очистить();
	Для Каждого СтрокаРаздела Из ДеревоГорячиеКлавиши.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаГорячейКлавиши Из СтрокаРаздела.ПолучитьЭлементы() Цикл
			
			НоваяСтрокаГорячейКлавиши = НастройкаРМК.ГорячиеКлавиши.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаГорячейКлавиши, СтрокаГорячейКлавиши, , "НомерСтроки");
			НоваяСтрокаГорячейКлавиши.ИмяКнопки = СтрокаГорячейКлавиши.ИмяЭлемента;
			НоваяСтрокаГорячейКлавиши.ЗаголовокКнопки = СтрокаГорячейКлавиши.Действие
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГорячиеКлавиши(ТекущаяНастройкаРМК)
	
	Макет = Справочники.НастройкиРабочегоМестаКассира.ПолучитьМакет("ГорячиеКлавиши");
	КолСтрок = Макет.ВысотаТаблицы;
	ИмяРаздела = "";
	СтрокаРаздела = Неопределено;
	НомераКолонок = НомераКолонокГорячихКлавиш();
	НомерНачальнойСтроки = 2;
	Если ДеревоГорячиеКлавиши.ПолучитьЭлементы().Количество() > 0 Тогда
		ДеревоГорячиеКлавиши.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	
	Для НомерСтрокиМакета = НомерНачальнойСтроки По КолСтрок Цикл
		
		ИмяРазделаМакета
			= Макет.Область(НомерСтрокиМакета, НомераКолонок.ИмяРаздела, НомерСтрокиМакета, НомераКолонок.ИмяРаздела).Текст;
		Если СтрокаРаздела = Неопределено Или Не ИмяРаздела = ИмяРазделаМакета Тогда
			ИмяРаздела = ИмяРазделаМакета;
			СтрокаРаздела = ДобавитьСтрокуРазделаГорячихКлавиш(ИмяРаздела);
		КонецЕсли;
		ОбластьЭлемента
			= Макет.Область(НомерСтрокиМакета, НомераКолонок.ИмяЭлемента, НомерСтрокиМакета, НомераКолонок.ИмяЭлемента);
		ИмяЭлемента = ОбластьЭлемента.Текст;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ИмяКнопки", ИмяЭлемента);
		
		МассивСтрок = ТекущаяНастройкаРМК.ГорячиеКлавиши.НайтиСтроки(СтруктураПоиска);
		
		СтрокаНастройки = ?(МассивСтрок.Количество() = 0, Неопределено, МассивСтрок[0]);
		ДобавитьЭлементВРазделГорячихКлавиш(СтрокаРаздела, ИмяЭлемента, Макет, НомерСтрокиМакета, СтрокаНастройки);
		
	КонецЦикла;
	Элементы.ДеревоГорячиеКлавишиКлавиша.СписокВыбора.ЗагрузитьЗначения(МассивКлавиш());
	Элементы.НастройкаРМКВводНаличныхКлавиша.СписокВыбора.ЗагрузитьЗначения(МассивКлавиш());
	ОбновитьПодсказкуТаблицыГорячихКлавиш(ТекущаяНастройкаРМК);
	
КонецПроцедуры

&НаСервере
Функция ДобавитьСтрокуРазделаГорячихКлавиш(ИмяРаздела)
	
	СтрокаРаздела = ДеревоГорячиеКлавиши.ПолучитьЭлементы().Добавить();
	СтрокаРаздела.ИмяРаздела = ИмяРаздела;
	СтрокаРаздела.Действие = ИмяРаздела;
	Возврат СтрокаРаздела;
	
КонецФункции

&НаСервере
Процедура ДобавитьЭлементВРазделГорячихКлавиш(СтрокаРаздела, ИмяЭлемента, Макет, НомерСтрокиМакета, СтрокаНастройки)
	
	НомераКолонок = НомераКолонокГорячихКлавиш();
	СтрокаЭлемента = СтрокаРаздела.ПолучитьЭлементы().Добавить();
	Если СтрокаНастройки = Неопределено Тогда
		СтрокаЭлемента.Клавиша
			= Макет.Область(НомерСтрокиМакета, НомераКолонок.Клавиша, НомерСтрокиМакета, НомераКолонок.Клавиша).Текст;
		СтрокаЭлемента.АкселераторAlt
			= Булево(Макет.Область(НомерСтрокиМакета, НомераКолонок.Alt, НомерСтрокиМакета, НомераКолонок.Alt).Текст);
		СтрокаЭлемента.АкселераторCtrl
			= Булево(Макет.Область(НомерСтрокиМакета, НомераКолонок.Ctrl, НомерСтрокиМакета, НомераКолонок.Ctrl).Текст);
		СтрокаЭлемента.АкселераторShift
			= Булево(Макет.Область(НомерСтрокиМакета, НомераКолонок.Shift, НомерСтрокиМакета, НомераКолонок.Shift).Текст);
	Иначе
		ЗаполнитьЗначенияСвойств(СтрокаЭлемента, СтрокаНастройки);
	КонецЕсли;
	СтрокаЭлемента.Действие
			= Макет.Область(НомерСтрокиМакета, НомераКолонок.Действие, НомерСтрокиМакета, НомераКолонок.Действие).Текст;
	СтрокаЭлемента.НомерСтроки = НомерСтрокиМакета - 1;
	СтрокаЭлемента.ИмяЭлемента = ИмяЭлемента;
	
КонецПроцедуры

&НаСервере
Функция НомераКолонокГорячихКлавиш()
	
	НомераКолонок = Новый Структура;
	НомераКолонок.Вставить("ИмяРаздела", 1);
	НомераКолонок.Вставить("ИмяЭлемента", 2);
	НомераКолонок.Вставить("Действие", 3);
	НомераКолонок.Вставить("Клавиша", 4);
	НомераКолонок.Вставить("Alt", 5);
	НомераКолонок.Вставить("Ctrl", 6);
	НомераКолонок.Вставить("Shift", 7);
	Возврат НомераКолонок;
	
КонецФункции

&НаСервереБезКонтекста
Функция МассивКлавиш()
	
	МассивКлавиш = Новый Массив;
	
	// 0 ... 9
	Для Счетчик = 0 По 9 Цикл
		МассивКлавиш.Добавить(СтрШаблон("_%1", Счетчик));
	КонецЦикла;
	
	// A...Z
	Для Счетчик = 65 По 90 Цикл
		МассивКлавиш.Добавить(Символ(Счетчик));
	КонецЦикла;
	
	МассивКлавиш.Добавить(Строка(Клавиша.BackSpace));
	
	// F1..F12
	Для Счетчик = 1 По 12 Цикл
		МассивКлавиш.Добавить(СтрШаблон("F%1", Счетчик));
	КонецЦикла;
	
	// Num0 ... Num9 
	Для Счетчик = 0 По 9 Цикл
		МассивКлавиш.Добавить(СтрШаблон("Num%1", Счетчик));
	КонецЦикла;
	
	МассивКлавиш.Добавить(Строка(Клавиша.NumAdd));
	МассивКлавиш.Добавить(Строка(Клавиша.NumDecimal));
	МассивКлавиш.Добавить(Строка(Клавиша.NumDivide));
	МассивКлавиш.Добавить(Строка(Клавиша.NumMultiply));
	МассивКлавиш.Добавить(Строка(Клавиша.NumSubtract));
	МассивКлавиш.Добавить(Строка(Клавиша.Space));
	МассивКлавиш.Добавить(Строка(Клавиша.Нет));
	
	Возврат МассивКлавиш;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьНаСервере()
	
	НастройкаСинхронизацииСуществует = 
		ОбщегоНазначенияРМК.НастройкаСинхронизацииДанныхСуществует();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПомощникНастройкиОбмена",
		"Доступность",
		НЕ НастройкаСинхронизацииСуществует);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДекорацияКомментарийНоваяНастройкаОбмена",
		"Видимость",
		НастройкаСинхронизацииСуществует);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДекорацияОжиданиеИзмененияПрефикса",
		"Видимость",
		Ложь);
		
	ОчищатьПрефикс = НЕ НастройкаСинхронизацииСуществует;
	ТекущийПрефиксИБ = "";
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьТекущийПрефиксИБ(ОчищатьПрефикс, ТекущийПрефиксИБ);
	Если ЗначениеЗаполнено(ТекущийПрефиксИБ) И НЕ ТекущийПрефиксИБ = ПрефиксИнформационнойБазы Тогда
		ПрефиксИнформационнойБазы = ТекущийПрефиксИБ;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьОтображениеУсловногоОформленияХарактеристик()
	
	Для Каждого СтрокаИзбранного Из НастройкаРМК.БыстрыеТовары Цикл
		
		Товар = СтрокаИзбранного.Номенклатура;
		
		Если ЗначениеЗаполнено(Товар) Тогда
			
			СтрокаИзбранного.ХарактеристикиИспользуются = ПроверитьПрименениеХарактеристикДляНоменклатуры(Товар);
			
			Если Не ПустаяСтрока(СтрокаИзбранного.ЦветФона) Тогда
				СтрокаИзбранного.ЗначениеЦветаФона = ОбщегоНазначения.ЗначениеИзСтрокиXML(СтрокаИзбранного.ЦветФона);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПодсказкуТаблицыГорячихКлавиш(ТекущаяНастройкаРМК)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяКнопки", "ОткрытьПанельИзбранныхТоваров");
	МассивСтрок = ТекущаяНастройкаРМК.ГорячиеКлавиши.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаГорячихКлавишИзбранного = МассивСтрок[0];
	
	Если (НЕ СтрокаГорячихКлавишИзбранного = Неопределено)
		И (СтрокаГорячихКлавишИзбранного.АкселераторAlt 
			ИЛИ СтрокаГорячихКлавишИзбранного.АкселераторCtrl
			ИЛИ СтрокаГорячихКлавишИзбранного.АкселераторShift)
		И НЕ ПустаяСтрока(СтрокаГорячихКлавишИзбранного.Клавиша) Тогда
		
		СоставляющаяCtrl = ?(СтрокаГорячихКлавишИзбранного.АкселераторCtrl, "Ctrl +", "");
		СоставляющаяAlt = ?(СтрокаГорячихКлавишИзбранного.АкселераторAlt, "Alt +", "");
		СоставляющаяShift = ?(СтрокаГорячихКлавишИзбранного.АкселераторShift, "Shift +", "");
		
		КомбинацияГорячихКлавишСтрокой = СтрШаблон("%1%2%3", СоставляющаяCtrl, СоставляющаяAlt, СоставляющаяShift);
		
		ТекстПодсказки = СтрШаблон(
			НСтр("ru = 'Комбинация горячих клавиш для товара определяется как %1 порядковый номер строки из таблицы ниже.
				|Численное значение следует вводить из основного цифрового блока клавиатуры.'"),
				КомбинацияГорячихКлавишСтрокой);
		Элементы.НастройкаРМКБыстрыеТовары.РасширеннаяПодсказка.Заголовок = ТекстПодсказки;
		Элементы.НастройкаРМКБыстрыеТовары.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСверху;
		
	Иначе
		Элементы.НастройкаРМКБыстрыеТовары.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьПрименениеХарактеристикДляНоменклатуры(Номенклатура)
	
	Возврат ОбщегоНазначенияРМК.ТребуетсяВводХарактеристикиДляНоменклатуры(Номенклатура);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеПоНастройкеРМК(НастройкаРМКСсылка)
	
	ЗаполнитьГорячиеКлавиши(НастройкаРМК);
	НастроитьИспользованиеСервераЛояльности();
	
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		ПарольСервераЛояльности = ?(ЗначениеЗаполнено(ПарольСервераЛояльности), УникальныйИдентификатор, "");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияПоУмолчанию()
	
	Если НЕ ЗначениеЗаполнено(НастройкаРМК.ВидОтображения) Тогда
		НастройкаРМК.ВидОтображения = Перечисления.ВидыОтображения.Стандартный;
	КонецЕсли;
	
	ИнициализироватьЗначенияБулеваТипа = НастройкаРМК.Ссылка.Пустая();
	
	Если ИнициализироватьЗначенияБулеваТипа И НЕ ПомощникНастройкиРМК Тогда
		
		НастройкаРМК.ПечататьБумажныйЧек = ИнициализироватьЗначенияБулеваТипа;
		
		НастройкаРМК.ЗакрыватьПодборПриВыбореТовара = ИнициализироватьЗначенияБулеваТипа;
		НастройкаРМК.ПоказыватьАртикулНоменклатуры = ИнициализироватьЗначенияБулеваТипа;
		НастройкаРМК.ПоказыватьКодНоменклатуры = ИнициализироватьЗначенияБулеваТипа;
		
		НастройкаРМК.ИспользоватьОплатуНаличными = ИнициализироватьЗначенияБулеваТипа;
		
	КонецЕсли;
	
	Если НастройкаРМК.ГорячиеКлавиши.Количество() = 0 Тогда
		ЗаполнитьГорячиеКлавиши(НастройкаРМК);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НастройкаРМК.Наименование) Тогда
		НастройкаРМК.Наименование = НСтр("ru = 'Настройка РМК'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьЭлементыФормы()
	
	ОбновитьРеквизитыПоКонстантам();
	
	// Форма будет заполнена по ссылке переданной параметром при открытии формы.
	Если ЗначениеЗаполнено(Параметры.НастройкаРабочегоМеста) Тогда
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.ГруппаНастройки);
		Если Параметры.Свойство("НоваяНастройка")
			И Параметры.НоваяНастройка Тогда
			НастройкиОбъект = Параметры.НастройкаРабочегоМеста.Скопировать();
			УстановитьВидимостьЭлементаФормы(Элементы.НастройкаРМКРабочееМесто, Истина);
			НоваяНастройка = Параметры.НоваяНастройка;
		Иначе
			НастройкиОбъект = Параметры.НастройкаРабочегоМеста.ПолучитьОбъект();
		КонецЕсли;
		ЗначениеВРеквизитФормы(НастройкиОбъект, "НастройкаРМК");
		
	ИначеЕсли Параметры.Свойство("ПомощникРМК")
		И Параметры.ПомощникРМК Тогда
		
		ПорядковыйНомер = Параметры.ПорядковыйНомер;
		Модифицированность = Параметры.МодифицированностьРеквизитовРМК;
		КопироватьДанныеФормы(Параметры.НастройкаРМК,НастройкаРМК);
		Если Параметры.ПарольИзменен Тогда
			ПарольСервераЛояльностиИзменен = Параметры.ПарольИзменен;
			ПарольСервераЛояльности = Параметры.ПарольСервераЛояльности;
		КонецЕсли;
		ПомощникНастройкиРМК = Истина;
		
	ИначеЕсли Параметры.Свойство("НоваяНастройка")
		И Параметры.НоваяНастройка Тогда
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.ГруппаНастройки);
		УстановитьВидимостьЭлементаФормы(Элементы.НастройкаРМКРабочееМесто, Истина);
		НоваяНастройка = Параметры.НоваяНастройка;
		
		ТекущееРабочееМесто = ПараметрыСеанса.РабочееМестоКлиента;
		
		Если НЕ ЗначениеЗаполнено(ТекущееРабочееМесто) Тогда
			ТекущееРабочееМесто = МенеджерОборудованияВызовСервера.РабочееМестоКлиента();
		КонецЕсли;
		
		НастройкаРМК.РабочееМесто = ТекущееРабочееМесто;
	Иначе
		
		ТекущееРабочееМесто = ПараметрыСеанса.РабочееМестоКлиента;
		
		Если НЕ ЗначениеЗаполнено(ТекущееРабочееМесто) Тогда
			ТекущееРабочееМесто = МенеджерОборудованияВызовСервера.РабочееМестоКлиента();
		КонецЕсли;
		
		ДоступныеНастройкиРМК = ОбщегоНазначенияРМК.НастройкиРМКДляТекущегоРабочегоМеста(ТекущееРабочееМесто);
		КоличествоДоступныхНастроек = ДоступныеНастройкиРМК.Количество();
		
		ТекущаяСтраница = ?(КоличествоДоступныхНастроек > 1, Элементы.ГруппаВыбораНастроек, Элементы.ГруппаНастройки);
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(ТекущаяСтраница);
		
		Если КоличествоДоступныхНастроек = 1
			И ЗначениеЗаполнено(ДоступныеНастройкиРМК[0]) Тогда
			
			НастройкиОбъект = ДоступныеНастройкиРМК[0].ПолучитьОбъект();
			ЗначениеВРеквизитФормы(НастройкиОбъект, "НастройкаРМК");
			
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьГорячиеКлавиши(НастройкаРМК);
	АктуализироватьОтображениеУсловногоОформленияХарактеристик();
	
	Элементы.ПерейтиКСпискуНастроек.Видимость = КоличествоДоступныхНастроек > 1;
	
	ОбщегоНазначенияРМК.НастроитьВидимостьЭлементовНастройкиРМК(ЭтотОбъект);
	ОбщегоНазначенияРМКПереопределяемый.ПереопределитьНастройкиРМК(ЭтотОбъект);
	
	Элементы.НастройкаРМКОсновнаяКассаККМ.Доступность = НастройкаРМК.ПродажиСНесколькихКассККМ;
	Элементы.ОткрытьСписокСкладовДляПродажи.Доступность = НастройкаРМК.РазрешитьВыборСклада;
	Элементы.НастройкаРМКНоменклатураПакет.Доступность = НастройкаРМК.РазрешитьБыстроеДобавлениеПакета;
	
	Если НастройкаРМК.ОтправлятьSMSКодПриПродаже = Перечисления.ВариантыОтправкиSMSПриПродаже.ПриВыборе Тогда
		ОтправлятьSMSПриПоискеКартыПоНомеруТелефона = Истина;
	ИначеЕсли НастройкаРМК.ОтправлятьSMSКодПриПродаже = Перечисления.ВариантыОтправкиSMSПриПродаже.ПриОплатеБаллами Тогда
		ОтправлятьSMSПриОплатеБонусами = Истина;
	КонецЕсли;
	
	ИспользоватьРасширеннуюФормуПодбора = НЕ НастройкаРМК.ИспользоватьНовыйПодборТоваров;
	ГоризонтальныйОриентация = Не НастройкаРМК.ВертикальнаяОриентация;
	
	УстановитьУсловноеОформление();
	УстановитьВидимостьНаСервере();
	НастроитьИспользованиеСервераЛояльности();
	ЗаполнитьЗначенияПоУмолчанию();
	ЗаполнитьОсобенностиПродаж();
	НастроитьЭлементыПодбораТоваров();
	УстановитьПодсказкуАдресаСервераЛояльности();
	УстановитьПодсказкуПоляКонтролироватьЕМРЦ();
	ЗаполнитьСписокНаименованийПользователейПриЗапросеПрав();
	
	ИменаПолейФлажков = ИменаПолейФлажков();
	УстановитьВидОтображенияБинарныхЭлементовИнтерфейса(ИменаПолейФлажков);
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ИнтеграцияСПлатежнымиСистемами")
		И Не ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей") Тогда
		Элементы.БИПГруппаИнтеграцияСПлатежнымиСистемами.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьПалитрыПлиточногоИнтерфейсаНаСервере();
	
	ВыборкаПалитры = Справочники.ПалитраТоваровРМК.Выбрать();
	Элементы.НастройкаРМКСтруктураБыстрыхТоваров.ТолькоПросмотр = Не ВыборкаПалитры.Следующий();
	ЗаполнитьИерархиюИзбранныхТоваров();
	НастроитьВидимостьЭлементовПриПереходеНаСтраницу();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПодсказкуПоляКонтролироватьЕМРЦ()
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.Табак;
	ЕМРЦ = 0;
	ОбщегоНазначенияРМКПереопределяемый.ПолучитьЦенуЕМРЦ(ВидМаркированнойПродукции,, ЕМРЦ);
	
	Если ЕМРЦ > 0 Тогда
		
		ЧислоРублей = Цел(ЕМРЦ);
		ЧислоКопеек = 100 * (ЕМРЦ - ЧислоРублей);
		РублиСтрокой = Строка(ЧислоРублей);
		КопейкиСтрокой = Формат(ЧислоКопеек, "ЧЦ=2; ЧН=00; ЧВН=" );
		НомерГода = Формат(ТекущаяДатаСеанса, НСтр("ru='ДФ=''гггг'''"));
		ШаблонСтрокиТекста = НСтр("ru = 'Контроль ЕМРЦ при продаже табачной продукции согласно №504-ФЗ. ЕМРЦ, установленная на %1 год: %2 руб. %3 коп.'");
		ТекстПодсказки = СтрШаблон(ШаблонСтрокиТекста, НомерГода, РублиСтрокой, КопейкиСтрокой);
		
		Элементы.КонтролироватьЕМРЦ.РасширеннаяПодсказка.Заголовок = ТекстПодсказки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлНаКлиенте(ДляЗагрузки = Ложь)
	
	РежимДиалогаВыбора = ?(ДляЗагрузки, РежимДиалогаВыбораФайла.Открытие, РежимДиалогаВыбораФайла.Сохранение);
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбора);
	ДиалогОткрытияФайла.Фильтр = НСтр("ru = 'НастройкиРМК (*.xml)|*.xml'");
	ДиалогОткрытияФайла.ПолноеИмяФайла = НСтр("ru = 'НастройкиРМК'");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДляЗагрузки", ДляЗагрузки);
	
	ОповещениеВыбора = Новый ОписаниеОповещения("ВыбранФайл", ЭтотОбъект, ДополнительныеПараметры);
	
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(ОповещениеВыбора, ДиалогОткрытияФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранФайл(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = ВыбранныеФайлы[0];
	
	Если ДополнительныеПараметры.Свойство("ДляЗагрузки") И ДополнительныеПараметры.ДляЗагрузки Тогда
		
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЧтениеФайлаНастроекЗавершение", ЭтотОбъект);
		
		ФайлXML = Новый ТекстовыйДокумент;
		ФайлXML.НачатьЧтение(ОписаниеОповещения, ПутьКФайлу);
		
	Иначе
		
		СохранитьНастройкиРМКНаСервере();
		ТекстXML = НастройкиВФорматеXML();
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписьФайлаНастроекЗавершение", ЭтотОбъект);
		
		ФайлXML = Новый ТекстовыйДокумент;
		ФайлXML.УстановитьТекст(ТекстXML);
		ФайлXML.НачатьЗапись(ОписаниеОповещения, ПутьКФайлу);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧтениеФайлаНастроекЗавершение(Результат) Экспорт
	
	ПредыдущийСценарий = НастройкаРМК.СценарийИспользования;
	
	ЕстьОшибки = Ложь;
	ТекстXML = ФайлXML.ПолучитьТекст();
	ЗагрузитьНастройкиИзXML(ТекстXML, ЕстьОшибки);
	
	Если ЕстьОшибки Тогда
		
		ПоказатьПредупреждение(, НСтр("ru='При загрузке настроек произошли ошибки.
		|Подробнее см. в журнале регистрации.'")); 
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru='Настройки успешно загружены.'"));
		НастроитьЭлементыФормыПослеЗагрузкиИзXMLНаСервере(ПредыдущийСценарий);
		НастроитьДоступностьЭлементовВводаНаличных();
		УстановитьДоступностьЭлементов();
		НастроитьЗначениеЭлементаЗакрытьПодбор();
		
	КонецЕсли;
	
	ФайлXML = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьФайлаНастроекЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПоказатьПредупреждение(, НСтр("ru='Настройки успешно выгружены.'"));
	
	ФайлXML = Неопределено;
	
КонецПроцедуры

&НаСервере
Функция НастройкиВФорматеXML()
	
	СтруктураНастроек = Новый Структура;
	ОбщегоНазначенияРМКПереопределяемый.СформироватьСтруктуруНастроек(СтруктураНастроек, НастройкаРМК);
	
	ТекстXML = ОбщегоНазначения.ЗначениеВСтрокуXML(СтруктураНастроек);
	
	Возврат ТекстXML;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьНастройкиИзXML(ТекстXML, ЕстьОшибки)
	
	Если НастройкаРМК.Ссылка.Пустая() Тогда
		ТекущееРабочееМесто = МенеджерОборудованияВызовСервера.РабочееМестоКлиента();
		НастройкаРМКОбъект = Справочники.НастройкиРабочегоМестаКассира.СоздатьЭлемент();
		НастройкаРМКОбъект.РабочееМесто = ТекущееРабочееМесто;
	Иначе
		НастройкаРМКОбъект = НастройкаРМК.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	Справочники.НастройкиРабочегоМестаКассира.ЗагрузитьНастройкиИзXML(ТекстXML, ЕстьОшибки, НастройкаРМКОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьИспользованиеСервераЛояльности()
	
	Элементы.ГруппаНастройкаБСГоризонтальная.Доступность = ИспользоватьСерверЛояльностиПолучательДанных;
	
	ТекущаяСтраницаСерверЛояльности = Элементы.ГруппаСерверВыключен;
	Если ИспользоватьСерверЛояльностиПолучательДанных И НЕ ПарольСервераЛояльностиИзменен Тогда
		ПарольСервераЛояльности = УникальныйИдентификатор;
		ТекущаяСтраницаСерверЛояльности = Элементы.ГруппаСерверВключен;
	КонецЕсли;
	
	Элементы.ГруппаУправлениеСерверЛояльности.ТекущаяСтраница = ТекущаяСтраницаСерверЛояльности;
	
	Элементы.СтраницаНастройкаСервераЛояльности.Видимость = ИспользоватьСерверЛояльностиПолучательДанных;
	Элементы.НастройкиСервераЛояльности.Доступность = ИспользоватьСерверЛояльностиПолучательДанных;
	
КонецПроцедуры

// По данным настройки РМК возвращает адрес сервера лояльности, ресурс для обращения
// и имя пользователя сервера лояльности
//
// Параметры:
//  НастройкиРМК - СправочникСсылка.НастройкиРабочегоМестаКассира - данные настройки РМК
//
// Возвращаемое значение:
// Результат - Структура:
//		* АдресСервераЛояльности - Строка
//		* ПользовательСервераЛояльности - Строка
//		* РесурсДляПроверкиДоступностиСервера - Строка
//
&НаСервереБезКонтекста
Функция ИсходныеДанныеДляПроверкиДоступностиСервераЛояльности(НастройкиРМК)
	
	Результат = Новый Структура();
	Результат.Вставить("АдресСервера", НастройкиРМК.АдресСервераЛояльности);
	Результат.Вставить("Логин", НастройкиРМК.ПользовательСервераЛояльности);
	Результат.Вставить("Пароль", ПарольСервераЛояльности(НастройкиРМК.Ссылка));
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ИспользоватьСерверЛояльностиПолучательДанныхПриИзмененииНаСервере()
	
	ИмяКонстанты = ОбщегоНазначенияРМК.ИмяКонстанты("ИспользоватьСерверЛояльностиПолучательДанных");
	СохранитьЗначениеКонстанты(ИмяКонстанты, ИспользоватьСерверЛояльностиПолучательДанных);
	НастроитьИспользованиеСервераЛояльности();
	
КонецПроцедуры

// Возвращает количество записей запретов продаж
//
// Возвращаемое значение:
//  Число
//
&НаСервереБезКонтекста
Функция КоличествоЗаписейЗапретовПродаж()
	Возврат ОбщегоНазначенияРМК.КоличествоЗаписейЗапретовПродаж();
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыПодключенияНСПК()
	
	Если ИспользоватьОплатуСертификатамиНСПК Тогда
		
		ПараметрыПодключенияНСПК  = Новый Структура("АдресСервисаНСПК, КлючДоступаНСПК");
		ЭлектронныеСертификатыНСПКРМКПереопределяемый.ЗаполнитьПараметрыПодключенияНСПК(ПараметрыПодключенияНСПК);
		
		АдресСервисаНСПК = ПараметрыПодключенияНСПК.АдресСервисаНСПК;
		ВерсияКомпонентыНСПК = ЭлектронныеСертификатыНСПК.ВерсияВК();
		Элементы.ГруппаПараметрыПодключенияНСПК.Заголовок = СтрШаблон(
			НСтр("ru = 'Настройки подключения к сервису НСПК (v. %1)'"), ВерсияКомпонентыНСПК);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НСПКВерсияВКЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	Если Не ТипЗнч(РезультатВыполнения) = Тип("Строка") Тогда
		ЭлектронныеСертификатыНСПККлиент.УстановитьКомпонентуИнтеграцииНСПК();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЭлементыSMSПодтверждения()
	
	СтандартнаяОбработка = Истина;
	
	ОбщегоНазначенияРМККлиентПереопределяемый.НастроитьЭлементыSMSПодтвержденияНаФормеНастроек(
		ЭтотОбъект, СтандартнаяОбработка);
		
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
			
	Если НЕ ИспользоватьСерверЛояльностиПолучательДанных ИЛИ НЕ ИспользоватьШаблоныСообщений Тогда
		НастройкаРМК.ОтправлятьSMSКодПриЗаведенииКарты = Ложь;
		ОтправлятьSMSПриОплатеБонусами = Ложь;
	КонецЕсли;
	
	Если НЕ ИспользоватьШаблоныСообщений Тогда
		ОтправлятьSMSПриПоискеКартыПоНомеруТелефона = Ложь;
	КонецЕсли;
	
	ИспользоватьСерверЛояльностиИШаблоны = ИспользоватьСерверЛояльностиПолучательДанных И ИспользоватьШаблоныСообщений;
	
	Элементы.ОтправлятьSMSПриПоискеКартыПоНомеруТелефона.Доступность = ИспользоватьШаблоныСообщений;
	
	Элементы.НастройкаРМКОтправлятьSMSКодПриЗаведенииКарты.Доступность = ИспользоватьСерверЛояльностиИШаблоны;
	Элементы.ОтправлятьSMSПриОплатеБонусами.Доступность = ИспользоватьСерверЛояльностиИШаблоны;
	
	Элементы.НастройкаРМКШаблонSMSПриЗаведенииКарты.Доступность = ИспользоватьСерверЛояльностиИШаблоны
		И НастройкаРМК.ОтправлятьSMSКодПриЗаведенииКарты;
		
	Элементы.НастройкаРМКШаблонSMSПриПродаже.Доступность =
		ИспользоватьШаблоныСообщений И ОтправлятьSMSПриПоискеКартыПоНомеруТелефона;
		
	Элементы.НастройкаРМКШаблонSMSПриСписанииБонусов.Доступность =
		ИспользоватьШаблоныСообщений И ОтправлятьSMSПриОплатеБонусами;
		
	Элементы.НастройкаРМКСуммаПодтвержденияСписанияБонусов.Доступность =
		ИспользоватьШаблоныСообщений И ОтправлятьSMSПриОплатеБонусами;
		
	ЦветТекстаПодсказки = ?(ИспользоватьСерверЛояльностиИШаблоны, ОбщегоНазначенияКлиент.ЦветСтиля("ЦветТекстаФормы"), ОбщегоНазначенияКлиент.ЦветСтиля("ЦветНеАктивнойСтроки"));
		
	Элементы.НастройкаРМКСуммаПодтвержденияСписанияБонусов.РасширеннаяПодсказка.ЦветТекста = ЦветТекстаПодсказки;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРасширеннуюФормуПодбораПриИзменении(Элемент)
	
	НастройкаРМК.ИспользоватьНовыйПодборТоваров = НЕ ИспользоватьРасширеннуюФормуПодбора;
	НастроитьЭлементыПодбораТоваров();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокНаименованийПользователейПриЗапросеПрав()
	
	СписокВыбора = Элементы.НастройкаРМКНаименованиеПользователяПриЗапросеПрав.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(НСтр("ru = 'администратору'"));
	СписокВыбора.Добавить(НСтр("ru = 'старшему кассиру'"));
	СписокВыбора.Добавить(НСтр("ru = 'сотруднику магазина'"));
	Если ЗначениеЗаполнено(НастройкаРМК.НаименованиеПользователяПриЗапросеПрав) Тогда
		СписокВыбора.Добавить(НастройкаРМК.НаименованиеПользователяПриЗапросеПрав);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПечататьКороткийСлипЧекПриИзмененииНаСервере()

	ИмяКонстанты = ОбщегоНазначенияРМК.ИмяКонстанты("ПечататьКороткийСлипЧек");
	СохранитьЗначениеКонстанты(ИмяКонстанты, ПечататьКороткийСлипЧек);

КонецПроцедуры

&НаСервере
Процедура НастройкаРМКФормироватьИнтегрированныйЧекЕГАИСПриИзмененииНаСервере()
	
	ИмяКонстанты = ОбщегоНазначенияРМК.ИмяКонстанты("ИспользоватьСовмещенныйКодДляЧекаЕГАИСИЧекаККМ");
	СохранитьЗначениеКонстанты(ИмяКонстанты, ФормироватьИнтегрированныйЧекЕГАИС);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиРМКИЗакрыть(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("НастройкаЗаписана", Ложь);
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Результат = СохранитьНастройкиРМКНаСервере();
		ИзмененияСохранены = Результат.ВыполненоУспешно;
		
		Если НЕ ИзмененияСохранены Тогда
			
			ПоказатьПредупреждение(, Результат.ТекстПредупрежденийОшибок,,
				НСтр("ru = 'Ошибка сохранения настроек РМК'"));
			
		КонецЕсли;
		
		ПараметрыОповещения.НастройкаЗаписана = ИзмененияСохранены;
		
	Иначе
		ЗакрыватьФормуБезКонтроляИзмененийНастроек = Истина;
	КонецЕсли;
	
	Оповестить("СохранениеНастроекРМК", ПараметрыОповещения);
	Модифицированность = Ложь;
	
	Если Открыта() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыПоКонстантам()
	
	ИспользоватьШаблоныСообщений = Константы.ИспользоватьШаблоныСообщений.Получить();
	ПечататьКороткийСлипЧек = ФормироватьИнтегрированныйСлипЧек();
	ФормироватьИнтегрированныйЧекЕГАИС = ПечататьИнтегрированныйЧекЕГАИС();
	ЛокальныйРасчетСкидокПоддерживаетПромокоды = ЛокальныйРасчетСкидокПоддерживаетПромокоды();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПалитрыПлиточногоИнтерфейсаНаСервере()
	
	Возврат;
	
	Если Не НастройкаРМК.ЗакрыватьПодборПриВыбореТовара
		И ЗначениеЗаполнено(НастройкаРМК.СтруктураПлиточногоИнтерфейсаПодбора) Тогда
			НастройкаРМК.СтруктураПлиточногоИнтерфейсаПодбора =
				ПредопределенноеЗначение("Справочник.ПалитраТоваровРМК.ПустаяСсылка");
	КонецЕсли;
	Элементы.НастройкаРМКСтруктураПлиточногоИнтерфейсаПодбора.Доступность = НастройкаРМК.ЗакрыватьПодборПриВыбореТовара;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СериализоватьЗначениеЦвета(ЗначениеЦвета)
	Возврат ОбщегоНазначения.ЗначениеВСтрокуXML(ЗначениеЦвета);
КонецФункции

&НаКлиенте
Процедура НастроитьЭлементыВидовОплат()
	
	СтандартнаяОбработка = Истина;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Форма", ЭтотОбъект);
	ОбщегоНазначенияРМККлиентПереопределяемый.НастроитьЭлементыВидовОплат(СтруктураПараметров, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
	
		Если Не ИспользоватьСерверЛояльностиПолучательДанных Тогда
			НастройкаРМК.ИспользоватьОплатуБонусами = Ложь;
			НастройкаРМК.ИспользоватьОплатуСертификатами = Ложь;
			Если Не ЛокальныйРасчетСкидокПоддерживаетПромокоды Тогда
				НастройкаРМК.ИспользоватьПромокоды = Ложь;
			КонецЕсли;
			Элементы.НастройкаРМКИспользоватьПромокоды.Доступность = ЛокальныйРасчетСкидокПоддерживаетПромокоды;
		КонецЕсли;
		
		Элементы.НастройкаРМКИспользоватьОплатуБонусами.Доступность = ИспользоватьСерверЛояльностиПолучательДанных;
		Элементы.НастройкаРМКИспользоватьОплатуСертификатами.Доступность = ИспользоватьСерверЛояльностиПолучательДанных;
		
	КонецЕсли;
	
	Элементы.НастройкаРМКВыдаватьНаличныеНаКассе.Доступность =
		НастройкаРМК.ИспользоватьОплатуНаличными И ИспользоватьОплатуПлатежнымиКартами;
		
	Если Не НастройкаРМК.ИспользоватьОплатуНаличными Или Не ИспользоватьОплатуПлатежнымиКартами Тогда
		НастройкаРМК.ВыдаватьНаличныеНаКассе = Ложь;
	КонецЕсли;
	
	Элементы.ЭквайринговыеТерминалы.Доступность = ИспользоватьОплатуПлатежнымиКартами;
	Если Не НастройкаРМК.ИспользоватьОплатуНаличными Тогда
		НастройкаРМК.ИспользоватьПанельВводаНаличныхКупюр = Ложь;
	КонецЕсли;
	НастроитьДоступностьЭлементовВводаНаличных();
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьОплатуПлатежнымиКартамиПриИзмененииНаСервере()
	
	ИмяКонстанты = ОбщегоНазначенияРМК.ИмяКонстанты("ИспользоватьОплатуПлатежнымиКартами");
	СохранитьЗначениеКонстанты(ИмяКонстанты, ИспользоватьОплатуПлатежнымиКартами);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьПолеНастроекАдресСервераЛояльности()
	ТекущийЭлемент = Элементы.НастройкаРМКАдресСервераЛояльности;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступностьЭлементовВводаНаличных()
	Элементы.НастройкаРМКИспользоватьПанельВводаНаличныхКупюр.Доступность = НастройкаРМК.ИспользоватьОплатуНаличными;
	ОбработатьИзменениеИспользованияПанелиВводаНаличныхНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьТаблицыВводаНаличных()
	
	ДоступностьПанелиВводаНаличных = (НастройкаРМК.ИспользоватьОплатуНаличными 
		И НастройкаРМК.ИспользоватьПанельВводаНаличныхКупюр);
	Элементы.СтраницаВводНаличных.Видимость = ДоступностьПанелиВводаНаличных;
	Элементы.ПанельНастроекВводаНаличных.Доступность = ДоступностьПанелиВводаНаличных;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеИспользованияПанелиВводаНаличныхНаКлиенте()
	Если НастройкаРМК.ИспользоватьОплатуНаличными И НастройкаРМК.ИспользоватьПанельВводаНаличныхКупюр Тогда
		ПерезаполнитьПанельВводаНаличныхПриНеобходимости();
	КонецЕсли;
	НастроитьВидимостьТаблицыВводаНаличных();
КонецПроцедуры 

&НаКлиенте
Процедура ПерезаполнитьПанельВводаНаличныхПриНеобходимости()
	
	МассивНоминаловКупюр = ОбщегоНазначенияРМККлиентСервер.НоминалыКупюр();
	ИспользуемыеНоминалыКупюр = ПолучитьИспользуемыеНоминалыКупюр();
	Если Не ОбщегоНазначенияКлиентСервер.СпискиЗначенийИдентичны(МассивНоминаловКупюр, ИспользуемыеНоминалыКупюр) Тогда
		ПерезаполнитьТаблицуВводаНаличных(МассивНоминаловКупюр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьТаблицуВводаНаличных(МассивНоминаловКупюр)
	ПустаяКлавиша = ИнтерфейсРМКСлужебныйКлиентСервер.ПредставлениеПустойКлавиши();
	КлавишиНоминалов = ПолучитьКлавишиНоминалов();
	НастройкаРМК.ВводНаличных.Очистить();
	Для Каждого ЭлементНоминала Из МассивНоминаловКупюр Цикл
		НоваяСтрока = НастройкаРМК.ВводНаличных.Добавить();
		НоваяСтрока.Номинал = ЭлементНоминала;
		НоваяСтрока.Использование = Истина;
		ПредыдущаяКлавиша = КлавишиНоминалов.Получить(ЭлементНоминала);
		Если ПредыдущаяКлавиша = Неопределено Тогда
			НоваяСтрока.Клавиша = ПустаяКлавиша;
		Иначе
			НоваяСтрока.Клавиша = ПредыдущаяКлавиша.Значение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКлавишиНоминалов()
	
	ПустаяКлавиша = ИнтерфейсРМКСлужебныйКлиентСервер.ПредставлениеПустойКлавиши();
	КлавишиНоминалов = Новый Соответствие;
	Для Каждого СтрокаНаличных Из НастройкаРМК.ВводНаличных Цикл
		Если ЗначениеЗаполнено(СтрокаНаличных.Клавиша) И Не СтрокаНаличных.Клавиша = ПустаяКлавиша Тогда
			КлавишиНоминалов.Вставить(СтрокаНаличных.Номинал, СтрокаНаличных.Клавиша);
		КонецЕсли;
	КонецЦикла;
	Возврат КлавишиНоминалов;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИспользуемыеНоминалыКупюр()  
	
	МассивИспользуемыхНоминаловКупюр = Новый Массив;
	Для Каждого СтрокаНоминала Из НастройкаРМК.ВводНаличных Цикл
		МассивИспользуемыхНоминаловКупюр.Добавить(СтрокаНоминала.Номинал);
	КонецЦикла;
	Возврат МассивИспользуемыхНоминаловКупюр;
	
КонецФункции

&НаСервере
Процедура НастроитьЭлементыФормыПослеЗагрузкиИзXMLНаСервере(ПредыдущийСценарий)
	АктуализироватьЭлементыФормы();
	Если Не НастройкаРМК.СценарийИспользования = ПредыдущийСценарий Тогда
		ВыделитьСценарийИспользования();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()
	НастроитьДоступностьЭлементовПриПереключенииСервераЛояльности();
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЗначениеЭлементаЗакрытьПодбор()
	
	Если НастройкаРМК.СценарийИспользования
			= ПредопределенноеЗначение("Перечисление.СценарииИспользованияРМК.ТерминалСамообслуживания") Тогда
			
		НастройкаРМК.ЗакрыватьПодборПриВыбореТовара = Не НастройкаРМК.ОсновнойПодборПлиточный;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НастройкиДляПроверкиЗаполнения()
	
	МассивНастроек = Новый Массив;
	
	ТекстПредупреждения = НСтр("ru = 'Пожалуйста, укажите точность округления при расчетах с клиентом.'");
	ДобавитьНастройкуДляПроверкиЗаполнения(МассивНастроек, "ТочностьОкругления", ТекстПредупреждения);
	
	ТекстПредупреждения = НСтр("ru = 'Пожалуйста, выберите вариант масштаба интерфейса.'");
	ДобавитьНастройкуДляПроверкиЗаполнения(МассивНастроек, "ВидОтображения", ТекстПредупреждения);
	
	Возврат МассивНастроек;
	
КонецФункции

&НаСервере
Процедура ДобавитьНастройкуДляПроверкиЗаполнения(МассивНастроек, Знач ИмяНастройки, Знач ТекстПредупреждения)
	
	ОписаниеНастройки = Новый Структура;
	ОписаниеНастройки.Вставить("ИмяНастройки", ИмяНастройки);
	ОписаниеНастройки.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	
	МассивНастроек.Добавить(ОписаниеНастройки);
	
КонецПроцедуры

#Область РаботаСоСценариямиИспользованияРМК

&НаКлиенте
Процедура УстановитьСценарийНачало(ИмяКомандыСценария)
	
	ИмяСценария = Сред(ИмяКомандыСценария, 22);
	ВыбранныйСценарий = ПредопределенноеЗначение("Перечисление.СценарииИспользованияРМК." + ИмяСценария);
	ПроизвольныйСценарий = ПредопределенноеЗначение("Перечисление.СценарииИспользованияРМК.Произвольный");
	Если Не ВыбранныйСценарий = НастройкаРМК.СценарийИспользования Тогда
		Если ВыбранныйСценарий = ПроизвольныйСценарий Тогда
			УстановитьСценарийИспользования(ВыбранныйСценарий);
		Иначе
			
			ТекстВопроса = НСтр("ru = 'При смене сценария использования часть настроек будет 
				|заменена на значения по умолчанию. Продолжить?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьСценарийЗавершение", ЭтотОбъект, ВыбранныйСценарий);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , ,
				НСтр("ru = 'Продолжение смены сценария использования.'"));
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСценарийЗавершение(Результат, ВыбранныйСценарий) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УстановитьСценарийИспользования(ВыбранныйСценарий);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСценарийИспользования(НовоеЗначениеСценария)
	НастройкаРМК.СценарийИспользования = НовоеЗначениеСценария;
	ОбработатьВыборСценария();
	НастроитьЗначениеЭлементаЗакрытьПодбор();
КонецПроцедуры

&НаСервере
Процедура ВыделитьСценарийИспользования()
	ИмяВыбранногоСценария = ОбщегоНазначения.ИмяЗначенияПеречисления(НастройкаРМК.СценарийИспользования);
	Для Каждого КнопкаСценария Из Элементы.ГруппаПодменюСценарииИспользования.ПодчиненныеЭлементы Цикл
		ИмяСценарияКнопки = Сред(КнопкаСценария.Имя, 22);
		КнопкаСценария.Пометка = (ИмяВыбранногоСценария = ИмяСценарияКнопки);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборСценария()
	ВыделитьСценарийИспользования();
	ОбщегоНазначенияРМК.НастроитьВидимостьЭлементовНастройкиРМК(ЭтотОбъект);
	Если НастройкаРМК.СценарийИспользования = Перечисления.СценарииИспользованияРМК.ТерминалСамообслуживания Тогда
		УстановитьЗначенияНастроекДляТерминалаСамообслуживания();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияНастроекДляТерминалаСамообслуживания()
	ОбщегоНазначенияРМК.УстановитьЗначенияНастроекДляТерминалаСамообслуживания(ЭтотОбъект);
	ИспользоватьОплатуСертификатамиНСПКПриИзмененииСервер();
	ИспользоватьОплатуПлатежнымиКартамиПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область РаботаСПомощникомНастройкиРМК
&НаСервере
Процедура НастроитьВидимостьЭлементовПриПереходеНаСтраницу()
	Если ПорядковыйНомер = 0 Тогда
		Возврат;
	КонецЕсли;
	Элементы.СтраницыНастройкиРМК.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.СтраницыНастройкиРМК.ТекущаяСтраница = Элементы.СтраницаОбщиеНастройки;
	Если ПорядковыйНомер = 1 Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКоманднойПанели, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИдентификацияНастройки, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСкидкиИОкругление, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплаты, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаШаблоныШтрихкодов, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаДействияСистемы, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнтерфейс, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОсобенностиПродаж, Истина);
		Элементы.ГруппаОсобенностиПродаж.ОтображатьЗаголовок = Ложь;
		Элементы.ГруппаСкупка.ОтображатьЗаголовок = Истина;
		Заголовок = НСтр("ru ='Продажи'");
		Элементы.ГруппаОсобенностиПродаж.Поведение = ПоведениеОбычнойГруппы.Авто;
	ИначеЕсли ПорядковыйНомер = 2 Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОсобенностиПродаж, Ложь);
		Элементы.ГруппаОсобенностиПродаж.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСерверЛояльности, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаSMSПодтверждениеВерх, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСкидкиИОкругление, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСкупка, Истина);
		Элементы.ГруппаСкупка.ОтображатьЗаголовок = Ложь;
		Элементы.ГруппаОсобенностиПродаж.ОтображатьЗаголовок = Истина;
		Элементы.ГруппаСкидкиИОкругление.ОтображатьЗаголовок = Истина;
		Элементы.ГруппаСкупка.Поведение = ПоведениеОбычнойГруппы.Авто;
		Заголовок = НСтр("ru ='Скупка'");
	ИначеЕсли ПорядковыйНомер = 3 Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОсобенностиПродаж, Ложь);
		Элементы.ГруппаОсобенностиПродаж.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСерверЛояльности, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаSMSПодтверждениеВерх, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСкупка, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСкидкиИОкругление, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСерверЛояльности, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаSMSПодтверждениеВерх, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплаты, Ложь);
		Элементы.ГруппаБонусыИСертификаты.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		Элементы.ГруппаСкидкиИОкругление.Поведение = ПоведениеОбычнойГруппы.Авто;
		Элементы.ГруппаСкупка.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
		Заголовок = НСтр("ru ='Маркетинговые акции'");
		Элементы.ГруппаСкупка.ОтображатьЗаголовок = Истина;
		Элементы.ГруппаСкидкиИОкругление.ОтображатьЗаголовок = Ложь;
		Элементы.ГруппаОплаты.ОтображатьЗаголовок = Истина;
		Элементы.ГруппаОсобенностиПродаж.ОтображатьЗаголовок = Истина;
	ИначеЕсли ПорядковыйНомер = 4 Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСкидкиИОкругление, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаДействияСистемы, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплаты, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСерверЛояльности, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаSMSПодтверждениеВерх, Истина);
		Элементы.ГруппаБонусыИСертификаты.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		Элементы.ГруппаОплаты.Поведение = ПоведениеОбычнойГруппы.Авто;
		Элементы.ГруппаСкидкиИОкругление.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
		Заголовок = НСтр("ru ='Виды оплат'");
		Элементы.ГруппаСкидкиИОкругление.ОтображатьЗаголовок = Истина;
		Элементы.ГруппаОплаты.ОтображатьЗаголовок = Ложь;
		Элементы.ГруппаДействияСистемы.ОтображатьЗаголовок = Истина;
	ИначеЕсли ПорядковыйНомер = 5 Тогда
		Элементы.ГруппаБонусыИСертификаты.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		Элементы.ГруппаОплаты.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплаты, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаДействияСистемы, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнтерфейс, Ложь);
		Элементы.ГруппаДействияСистемы.Поведение = ПоведениеОбычнойГруппы.Авто;
		Заголовок = НСтр("ru ='Формирование чека'");
		Элементы.ГруппаОплаты.ОтображатьЗаголовок = Истина;
		Элементы.ГруппаДействияСистемы.ОтображатьЗаголовок = Ложь;
		Элементы.ГруппаИнтерфейс.ОтображатьЗаголовок = Истина;
	ИначеЕсли ПорядковыйНомер = 6 Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКоманднойПанели, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИдентификацияНастройки, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСкидкиИОкругление, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплаты, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаШаблоныШтрихкодов, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаДействияСистемы, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОсобенностиПродаж, Ложь);
		Элементы.ГруппаДействияСистемы.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнтерфейс, Истина);
		Элементы.ГруппаИнтерфейс.Поведение = ПоведениеОбычнойГруппы.Авто;
		Заголовок = НСтр("ru ='Интерфейс'");
		Элементы.ГруппаДействияСистемы.ОтображатьЗаголовок = Истина;
		Элементы.ГруппаИнтерфейс.ОтображатьЗаголовок = Ложь;
	ИначеЕсли ПорядковыйНомер = 7 Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКоманднойПанели, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИдентификацияНастройки, Ложь);
		Элементы.СтраницыНастройкиРМК.ТекущаяСтраница = Элементы.СтраницаГорячиеКлавиши;
		Элементы.ГруппаИнтерфейс.ОтображатьЗаголовок = Истина;
		Элементы.ГруппаИнтерфейс.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
		Заголовок = НСтр("ru ='Горячие клавиши'");
	ИначеЕсли ПорядковыйНомер = 8 Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКоманднойПанели, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИдентификацияНастройки, Ложь);
		Элементы.СтраницыНастройкиРМК.ТекущаяСтраница = Элементы.СтраницаБыстрыеТовары;
		Заголовок = НСтр("ru ='Быстрые товары'");
		Элементы.ГруппаИнтерфейс.ОтображатьЗаголовок = Истина;
		Элементы.ГруппаИнтерфейс.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройкиЭлементовФормы()
	Если НЕ ПорядковыйНомер = 0 Тогда
		Возврат;
	КонецЕсли;
	Заголовок = НСтр("ru = 'Настройки рабочего места кассира'");
	Элементы.СтраницыНастройкиРМК.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	Элементы.СтраницыНастройкиРМК.ТекущаяСтраница = Элементы.СтраницаОбщиеНастройки;
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКоманднойПанели, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИдентификацияНастройки, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСкидкиИОкругление, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплаты, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаШаблоныШтрихкодов, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаДействияСистемы, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнтерфейс, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОсобенностиПродаж, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСерверЛояльности, Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьЭлементаФормы(Элемент, Видимость)
	Элемент.Видимость = Видимость;
КонецПроцедуры

&НаСервере
Функция СформироватьТабличныйДокументГорячихКлавиш()
	
	ГорячиеКлавишыПечать = Новый ТабличныйДокумент;
	ПустаяКлавиша = ИнтерфейсРМКСлужебныйКлиентСервер.ПредставлениеПустойКлавиши();
	МакетПечати = Справочники.НастройкиРабочегоМестаКассира.ПолучитьМакет("ПечатьГорячихКлавиш");
	ОбластьШапкаДействия = МакетПечати.ПолучитьОбласть("ШапкаДействия");
	ОбластьРядРаздела = МакетПечати.ПолучитьОбласть("РядРаздела");
	ОбластьРядДействия = МакетПечати.ПолучитьОбласть("РядДействия");
	ИмяКнопкиОткрытьИзбранное = "ОткрытьПанельИзбранныхТоваров";
	СтроковоеПредставлениеКомбинацииОткрытияПанелиИзбранного = "";
	
	ГорячиеКлавишыПечать.Вывести(ОбластьШапкаДействия);
	Для Каждого СтрокаРаздела Из ДеревоГорячиеКлавиши.ПолучитьЭлементы() Цикл
		НачалоРаздела = Истина;
		Для Каждого СтрокаКомбинации Из СтрокаРаздела.ПолучитьЭлементы() Цикл
			Если ЗначениеЗаполнено(СтрокаКомбинации.Клавиша) И Не СтрокаКомбинации.Клавиша = ПустаяКлавиша Тогда
				Если НачалоРаздела Тогда
					ОбластьРядРаздела.Параметры.ИмяРаздела = СтрокаРаздела.ИмяРаздела;
					ГорячиеКлавишыПечать.Вывести(ОбластьРядРаздела);
					НачалоРаздела = Ложь;
				КонецЕсли;
				ДобавитьКомбинациюКлавишДействия(ГорячиеКлавишыПечать, ОбластьРядДействия, СтрокаКомбинации);
				Если СтрокаКомбинации.ИмяЭлемента = ИмяКнопкиОткрытьИзбранное И ОтмеченАкселератор(СтрокаКомбинации) Тогда
					СтроковоеПредставлениеКомбинацииОткрытияПанелиИзбранного = 
						СформироватьСтроковоеПредставлениеКомбинацииОткрытияПанелиИзбранного(СтрокаКомбинации);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	НачалоРаздела = Истина;
	Если НастройкаРМК.ИспользоватьОплатуНаличными И НастройкаРМК.ИспользоватьПанельВводаНаличныхКупюр Тогда
		ОбластьШапкаКупюр = МакетПечати.ПолучитьОбласть("ШапкаКупюр");
		ОбластьРядКупюры = МакетПечати.ПолучитьОбласть("РядКупюры");
		Для Каждого СтрокаКупюры Из НастройкаРМК.ВводНаличных Цикл
			Если ЗначениеЗаполнено(СтрокаКупюры.Клавиша) И Не СтрокаКупюры.Клавиша = ПустаяКлавиша Тогда
				Если НачалоРаздела Тогда
					ГорячиеКлавишыПечать.Вывести(ОбластьШапкаКупюр);
					НачалоРаздела = Ложь;
				КонецЕсли;
				ДобавитьКомбинациюКлавишКупюры(ГорячиеКлавишыПечать, ОбластьРядКупюры, СтрокаКупюры);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не СтроковоеПредставлениеКомбинацииОткрытияПанелиИзбранного = "" Тогда
		
		ТекстДополнения = СтрШаблон(
			НСтр("ru = 'Для избранных товаров зарезервированы комбинации клавиш ""%1"" [0-9] цифрового ряда.'"),
			СтроковоеПредставлениеКомбинацииОткрытияПанелиИзбранного);
		
		ОбластьДополнение = МакетПечати.ПолучитьОбласть("Дополнение");
		ОбластьДополнение.Параметры.Дополнение = ТекстДополнения;
		ГорячиеКлавишыПечать.Вывести(ОбластьДополнение);
		
	КонецЕсли;
	
	Возврат ГорячиеКлавишыПечать;
	
КонецФункции

&НаСервере
Функция СформироватьСтроковоеПредставлениеКомбинацииОткрытияПанелиИзбранного(СтрокаКомбинации)
	
	СоставляющаяCtrl = ?(СтрокаКомбинации.АкселераторCtrl, "Ctrl +", "");
	СоставляющаяAlt = ?(СтрокаКомбинации.АкселераторAlt, "Alt +", "");
	СоставляющаяShift = ?(СтрокаКомбинации.АкселераторShift, "Shift +", "");
	
	Возврат СтрШаблон("%1%2%3", СоставляющаяCtrl, СоставляющаяAlt, СоставляющаяShift);
	
КонецФункции

&НаСервере
Функция ОтмеченАкселератор(СтрокаКомбинации)
	Возврат (СтрокаКомбинации.АкселераторAlt Или СтрокаКомбинации.АкселераторCtrl Или СтрокаКомбинации.АкселераторShift);
КонецФункции

&НаСервере
Функция ПредставлениеАкселератора(ЗначениеАкселератора)
	Возврат ?(ЗначениеАкселератора, "V", "");
КонецФункции

&НаСервере
Процедура ДобавитьКомбинациюКлавишКупюры(ГорячиеКлавишыПечать, ОбластьРядКупюры, СтрокаНоминала)
	ОбластьРядКупюры.Параметры.Номинал = СтрокаНоминала.Номинал;
	ОбластьРядКупюры.Параметры.Клавиша = СтрокаНоминала.Клавиша;
	ОбластьРядКупюры.Параметры.Alt = ПредставлениеАкселератора(НастройкаРМК.ВводНаличныхАкселераторAlt);
	ОбластьРядКупюры.Параметры.Ctrl = ПредставлениеАкселератора(НастройкаРМК.ВводНаличныхАкселераторCtrl);
	ОбластьРядКупюры.Параметры.Shift = ПредставлениеАкселератора(НастройкаРМК.ВводНаличныхАкселераторShift);
	ГорячиеКлавишыПечать.Вывести(ОбластьРядКупюры);
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомбинациюКлавишДействия(ГорячиеКлавишыПечать, ОбластьРядДействия, СтрокаКомбинации)
	ОбластьРядДействия.Параметры.Номер = СтрокаКомбинации.НомерСтроки;
	ОбластьРядДействия.Параметры.Действие = СтрокаКомбинации.Действие;
	ОбластьРядДействия.Параметры.Клавиша = СтрокаКомбинации.Клавиша;
	ОбластьРядДействия.Параметры.Alt = ПредставлениеАкселератора(СтрокаКомбинации.АкселераторAlt);
	ОбластьРядДействия.Параметры.Ctrl = ПредставлениеАкселератора(СтрокаКомбинации.АкселераторCtrl);
	ОбластьРядДействия.Параметры.Shift = ПредставлениеАкселератора(СтрокаКомбинации.АкселераторShift);
	ГорячиеКлавишыПечать.Вывести(ОбластьРядДействия);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступностьЭлементовПриПереключенииСервераЛояльности()
	Элементы.ГруппаВыдаватьПодарки.Доступность = ИспользоватьСерверЛояльностиПолучательДанных;
КонецПроцедуры

#КонецОбласти

#КонецОбласти