#Область ОписаниеПеременных

&НаСервере
Перем мДерево, мУжеВСписке;

&НаСервере
Перем мКэшРеквизитовДокумента;

&НаКлиенте
Перем СтрокаПозиционированияПослеОбновления;

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
// Процедура вывода дерева структуры подчиненности документа.
//
Процедура ВывестиДеревоДокументов()
	
	Попытка
		ДеревоДокументов.ПолучитьЭлементы().Очистить();
		мДерево = ДеревоДокументов;
		мУжеВСписке = Новый Соответствие;
		мКэшРеквизитовДокумента = Новый Соответствие;
		
		ВывестиРодительскиеДокументы(ДокументСсылка);
		
		ДокументыУНФ.ВывестиПодчиненныеДокументы(мДерево, мКэшРеквизитовДокумента, мУжеВСписке);
		
		ТаблицаДокументов.Очистить();
		ТаблицаДокументовЗначение = РеквизитФормыВЗначение("ТаблицаДокументов");
		ДеревоДокументовЗначение = РеквизитФормыВЗначение("ДеревоДокументов");
		ДеревоЗначенийВТаблицуЗначений(ДеревоДокументовЗначение, ТаблицаДокументовЗначение);
		ЗначениеВРеквизитФормы(ТаблицаДокументовЗначение, "ТаблицаДокументов");
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
// Процедура выполняет вывод родительских документов.
//
Процедура ВывестиРодительскиеДокументы(ДокументСсылка)
	
	СписокРеквизитов = ДокументыУНФ.СписокРеквизитовДокумента(ДокументСсылка, мУжеВСписке);
	
	Если СписокРеквизитов.Количество() = 1 Тогда
		ВывестиРодительскиеДокументы(СписокРеквизитов[0].Значение);
	ИначеЕсли СписокРеквизитов.Количество() > 1 Тогда
		ВывестиБезРодителей(СписокРеквизитов);
	КонецЕсли;
	
	ДокументыУНФ.ВывестиРодительскиеДокументыОкончание(ДокументСсылка, мДерево, мУжеВСписке);
	
КонецПроцедуры

&НаСервере
// Процедура осуществляет вывод родительских документов с ограничением по уровню в дереве.
//
Процедура ВывестиБезРодителей(СписокДокументов)
	
	мУжеВСписке = Новый Соответствие; 
	ДеревоДокументов.ПолучитьЭлементы().Очистить();
	мДерево = ДеревоДокументов;
	
	ДокументыСоВходящимиДанными = ДокументыУНФ.ДокументыСоВходящимиДанными();
	
	ОтборПоКонтрагентам = Новый Массив;
	
	Для Каждого ЭлементМеток Из ДанныеМеток Цикл
		ОтборПоКонтрагентам.Добавить(ЭлементМеток.Метка);
	КонецЦикла;
		
	РасширениеУсловияЗапроса = "";
	ЕстьОтборПоКонтрагентам = ОтборПоКонтрагентам.Количество();
	
	Для Каждого ЭлементСписка Из СписокДокументов Цикл
		
		МетаданныеДокумента = ЭлементСписка.Значение.Метаданные();
		
		ЭтоДокументСВходящимНомеромИДатой = ДокументыСоВходящимиДанными.Найти(МетаданныеДокумента.Имя) <>  Неопределено;
		
		ЭтоДокументСобытие = ?(ТипЗнч(ЭлементСписка.Значение) = Тип("ДокументСсылка.Событие"), Истина, Ложь);
		
		Если ЭтоДокументСобытие Тогда
			
			Если ЕстьОтборПоКонтрагентам Тогда
				РасширениеУсловияЗапроса = " И СобытиеУчастники.Контакт В (&ОтборПоКонтрагентам)";
			КонецЕсли;
			
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 Ссылка, Ссылка.Проведен, Ссылка.ПометкаУдаления, Ссылка.Представление, 
			|Ссылка.Номер КАК Номер, Ссылка.Содержание КАК Комментарий, Ссылка.Автор КАК Автор, Ссылка.ТипСобытия КАК ВидОперации,
			|Ссылка.ВходящееИсходящееСобытие КАК ВходящееИсходящееСобытие, Ссылка.Состояние КАК Состояние, ""Событие"" КАК Метаданные
			|ИЗ Документ.Событие.Участники КАК СобытиеУчастники ГДЕ СобытиеУчастники.Ссылка = &Ссылка" + РасширениеУсловияЗапроса);
			
		Иначе
			
			Если ЕстьОтборПоКонтрагентам Тогда
				РасширениеУсловияЗапроса = " И Ссылка.Контрагент В (&ОтборПоКонтрагентам)";
			КонецЕсли;
			
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка, Проведен, ПометкаУдаления, Представление, #Валюта, #Сумма, #Организация, #ДатаВходящего, 
			|#НомерВходящий, #Номер, #Комментарий, #Ответственный, #Контрагент, #СостояниеЗаказа, #Автор, #ВидОперации, #Состояние, #ВходящееИсходящееСобытие, """ + МетаданныеДокумента.Имя + """ КАК Метаданные
			| ИЗ Документ."+МетаданныеДокумента.Имя + " ГДЕ Ссылка = &Ссылка" + РасширениеУсловияЗапроса);
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "ВалютаДокумента КАК ВалютаДокумента");
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("ВалютаДенежныхСредств") <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "ВалютаДенежныхСредств КАК ВалютаДокумента");
		// Эквайринг
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("ВалютаРасчетов") <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "ВалютаРасчетов КАК ВалютаДокумента");
		// Конец Эквайринг
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "NULL КАК ВалютаДокумента");
		КонецЕсли;
		
		Если МетаданныеДокумента.Имя = "СчетФактура"
			ИЛИ МетаданныеДокумента.Имя = "СчетФактураПолученный" Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Сумма", "СуммаДокумента + СуммаНДСДокумента КАК СуммаДокумента");
			
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("СуммаДокумента") <> Неопределено Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Сумма", "СуммаДокумента КАК СуммаДокумента");
			
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Сумма", "0 КАК СуммаДокумента");
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Организация", "Организация КАК Организация");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Организация", "NULL КАК Организация");
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("Ответственный") <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Ответственный", "Ответственный КАК Ответственный");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Ответственный", "NULL КАК Ответственный");
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("СостояниеЗаказа") <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#СостояниеЗаказа", "СостояниеЗаказа КАК СостояниеЗаказа");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#СостояниеЗаказа", "NULL КАК СостояниеЗаказа");
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("Состояние") <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Состояние", "Состояние КАК Состояние");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Состояние", "NULL КАК Состояние");
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("Автор") <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Автор", "Автор КАК Автор");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Автор", "NULL КАК Автор");
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("ВидОперации") <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВидОперации", "ВидОперации КАК ВидОперации");
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("ТипСобытия") <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВидОперации", 
				"ТипСобытия КАК ВидОперации");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВидОперации", "NULL КАК ВидОперации");
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("ВходящееИсходящееСобытие") <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВходящееИсходящееСобытие", 
			"ВходящееИсходящееСобытие КАК ВходящееИсходящееСобытие");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВходящееИсходящееСобытие", "NULL КАК ВходящееИсходящееСобытие");
		КонецЕсли;

		Если МетаданныеДокумента.Реквизиты.Найти("Контрагент") <> Неопределено  Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Контрагент", "Контрагент КАК Контрагент");
			
			Если ЕстьОтборПоКонтрагентам Тогда
				Запрос.УстановитьПараметр("ОтборПоКонтрагентам", ОтборПоКонтрагентам);
			КонецЕсли;
			
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Контрагент", "NULL КАК Контрагент");
			
			Если ЭтоДокументСобытие Тогда
				Запрос.УстановитьПараметр("ОтборПоКонтрагентам", ОтборПоКонтрагентам);
			ИначеЕсли ЕстьОтборПоКонтрагентам Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, РасширениеУсловияЗапроса, "");
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаЗамены = СтрШаблон("%1 КАК ДатаВходящего", ?(ЭтоДокументСВходящимНомеромИДатой, "ДатаВходящегоДокумента", "Null"));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДатаВходящего", СтрокаЗамены);
		
		СтрокаЗамены = СтрШаблон("%1 КАК НомерВходящий", ?(ЭтоДокументСВходящимНомеромИДатой, "НомерВходящегоДокумента", "Null"));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#НомерВходящий", СтрокаЗамены);
		
		Если МетаданныеДокумента.Реквизиты.Найти("Номер") <> Неопределено Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Номер", "Номер КАК Номер");
			
		Иначе
			
			Попытка
				
				ЕстьНомер = ТипЗнч(МетаданныеДокумента.СтандартныеРеквизиты.Номер);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Номер", "Номер КАК Номер");
				
			Исключение
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Номер", "NULL КАК Номер");
				
			КонецПопытки;
			
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("Комментарий") <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Комментарий", "Комментарий КАК Комментарий");
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("Тема") <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Комментарий", 
			"ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Тема) = ТИП(Справочник.ТемыСобытий) ТОГДА ВЫРАЗИТЬ(Тема КАК Справочник.ТемыСобытий).Наименование ИНАЧЕ ВЫРАЗИТЬ(Тема КАК СТРОКА) КОНЕЦ КАК Комментарий");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Комментарий", """"" КАК Комментарий");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Ссылка", ЭлементСписка.Значение);
		
		Выборка  = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если мУжеВСписке[Выборка.Ссылка] = Неопределено Тогда
				
				СтрокаДерева = мДерево.ПолучитьЭлементы().Добавить();
				СтрокаДерева.Ссылка= Выборка.Ссылка;
				СтрокаДерева.Комментарий = ПреобразоватьМногострочнуюСтроку(Выборка.Комментарий);
				СтрокаДерева.ВидДокумента = Выборка.Метаданные;
				СтрокаДерева.Проведен = Выборка.Проведен;
				СтрокаДерева.ПометкаУдаления = Выборка.ПометкаУдаления;
				СтрокаДерева.ОграничениеПоРодителям = Истина;
				СтрокаДерева.ВидОперации = Выборка.ВидОперации;
				СтрокаДерева.ВходящееИсходящееСобытие = Выборка.ВходящееИсходящееСобытие;
				СтрокаДерева.Картинка = НомерКартинки(СтрокаДерева);
				СтрокаДерева.Номер = Выборка.Номер; 
				
				Если ТипЗнч(СтрокаДерева.Ссылка) = Тип("ДокументСсылка.Событие") Тогда
					
					КонтрагентДокумента = КонтрагентДокументаСобытие(СтрокаДерева.Ссылка);
					Если КонтрагентДокумента = "Несколько" Тогда
						СтрокаДерева.НесколькоКонтрагентов = Истина;
					Иначе
						СтрокаДерева.Контрагент = КонтрагентДокумента;
					КонецЕсли;
					
				Иначе
					СтрокаДерева.Ответственный = Выборка.Ответственный;
					СтрокаДерева.ВалютаДокумента= Выборка.ВалютаДокумента;
					СтрокаДерева.СуммаДокумента= Выборка.СуммаДокумента;
					СтрокаДерева.Организация = Выборка.Организация;
					СтрокаДерева.Контрагент = Выборка.Контрагент;
					СтрокаДерева.СостояниеЗаказа = Выборка.СостояниеЗаказа;
				КонецЕсли;
				
				СтрокаДерева.Автор = Выборка.Автор;
				СтрокаДерева.Состояние = Выборка.Состояние;
				
				Если ЭтоДокументСВходящимНомеромИДатой Тогда
					
					НомерВходящий = ?(ЗначениеЗаполнено(Выборка.НомерВходящий), Выборка.НомерВходящий, "<..>");
					
					ДатаДокумента = Формат(Выборка.ДатаВходящего, "ДФ=dd.MM.yyyy");
					Если ПустаяСтрока(ДатаДокумента) Тогда
						
						ДатаДокумента = Формат(Выборка.Ссылка.Дата, "ДФ=dd.MM.yyyy");
						
					КонецЕсли;
					
					ПредставлениеНомера = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);
					
					СтрокаДерева.ДокументПредставление = СтрШаблон(НСтр("ru ='%1 %2 (вх. %3) от %4'"), МетаданныеДокумента.Синоним, ПредставлениеНомера, НомерВходящий, ДатаДокумента);
					
				Иначе
					
					СтрокаДерева.ДокументПредставление = Выборка.Представление;
					
				КонецЕсли;
				
				мУжеВСписке.Вставить(Выборка.Ссылка, Истина);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

	мДерево = СтрокаДерева;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Функция КонтрагентДокументаСобытие(СсылкаНаДокумент)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СобытиеУчастники.Контакт КАК Контрагент
	|ИЗ
	|	Документ.Событие.Участники КАК СобытиеУчастники
	|ГДЕ
	|	СобытиеУчастники.Ссылка = &Ссылка
	|	И ТИПЗНАЧЕНИЯ(СобытиеУчастники.Контакт) = ТИП(Справочник.Контрагенты)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 1 Тогда 
		Возврат "Несколько";
	ИначеЕсли Выборка.Количество() = 1 Тогда 
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Контрагент;
		КонецЦикла;
	Иначе
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуДокумента()
	
	ПараметрыФормы = Новый Структура("Ключ", Элементы.ДеревоДокументов.ТекущиеДанные.Ссылка);
	ОткрываемаяФорма = СтрШаблон("Документ.%1.ФормаОбъекта", Элементы.ДеревоДокументов.ТекущиеДанные.ВидДокумента);
	ОткрытьФорму(ОткрываемаяФорма, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
// Процедура закрывает форму с предупреждением.
//
Процедура ЗакрытьФормуСПредупреждением(ТекстПредупреждения)
	
	ВызватьИсключение ТекстПредупреждения;
	
КонецПроцедуры

&НаСервере
// Функция проверяет доступность изменяемого документа.
//
Функция ОсновнойДокументЕщеДоступен()
	
	ИмяТекущегоДокумента = ДокументСсылка.Метаданные().Имя;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ Представление ИЗ Документ." + ИмяТекущегоДокумента + " ГДЕ Ссылка = &ТекущийДокумент";
	Запрос.УстановитьПараметр("ТекущийДокумент", ДокументСсылка);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Функция возвращает номер картинки.
//
Функция НомерКартинки(СтрокаДерева)
	
	Если ТипЗнч(СтрокаДерева.Ссылка) <> Тип("ДокументСсылка.Событие") Тогда
		Если СтрокаДерева.ПометкаУдаления Тогда
			Возврат 3;
		ИначеЕсли СтрокаДерева.Проведен Тогда
			Возврат 1;
		Иначе
			Возврат 0;
		КонецЕсли;
	КонецЕсли; 
	
	Если СтрокаДерева.ВидОперации = ПредопределенноеЗначение("Перечисление.ТипыСобытий.Запись") Тогда
		Если СтрокаДерева.ПометкаУдаления Тогда
			Возврат 23;
		Иначе
			Возврат 14;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаДерева.ВидОперации = ПредопределенноеЗначение("Перечисление.ТипыСобытий.ЛичнаяВстреча") Тогда
		Если СтрокаДерева.ПометкаУдаления Тогда
			Возврат 20;
		Иначе
			Возврат 11;
		КонецЕсли;
	КонецЕсли; 
	
	Если СтрокаДерева.ВидОперации = ПредопределенноеЗначение("Перечисление.ТипыСобытий.ТелефонныйЗвонок") Тогда
		Если СтрокаДерева.ВходящееИсходящееСобытие = ПредопределенноеЗначение("Перечисление.ВходящееИсходящееСобытие.Входящее") Тогда
			Если СтрокаДерева.ПометкаУдаления Тогда
				Возврат 17;
			Иначе
				Возврат 8;
			КонецЕсли;
		Иначе
			Если СтрокаДерева.ПометкаУдаления Тогда
				Возврат 18;
			Иначе
				Возврат 9;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаДерева.ВидОперации = ПредопределенноеЗначение("Перечисление.ТипыСобытий.ЭлектронноеПисьмо") Тогда
		Если СтрокаДерева.ВходящееИсходящееСобытие = ПредопределенноеЗначение("Перечисление.ВходящееИсходящееСобытие.Входящее") Тогда
			Если СтрокаДерева.ПометкаУдаления Тогда
				Возврат 15;
			Иначе
				Возврат 6;
			КонецЕсли;
		Иначе
			Если СтрокаДерева.ПометкаУдаления Тогда
				Возврат 16;
			Иначе
				Возврат 7;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаДерева.ВидОперации = ПредопределенноеЗначение("Перечисление.ТипыСобытий.Прочее") Тогда
		Если СтрокаДерева.ПометкаУдаления Тогда
			Возврат 22;
		Иначе
			Возврат 13;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаДерева.ВидОперации = ПредопределенноеЗначение("Перечисление.ТипыСобытий.СообщениеSMS") Тогда
		Если СтрокаДерева.ПометкаУдаления Тогда
			Возврат 21;
		Иначе
			Возврат 12;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
// Процедура обновляет доступность кнопок Провести и Отменить проведение.
//
Процедура ОбновитьДоступностьКнопок()
	
	ДанныеТекущейСтроки = Элементы.ДеревоДокументов.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		ЗначениеСвойства = Элементы.ДеревоДокументов.ТекущиеДанные.ПроведениеРазрешено;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Провести", "Доступность", ЗначениеСвойства);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтменаПроведения", "Доступность", ЗначениеСвойства);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоДокументовКонтекстноеМенюПровести", "Доступность", ЗначениеСвойства);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоДокументовКонтекстноеМенюОтменаПроведения", "Доступность", ЗначениеСвойства);
		
	КонецЕсли;

КонецПроцедуры 

&НаСервере
// Функция осуществляет проведение выбранного документа.
//
Функция ПровестиСервер(ДокументСсылка)
	
	Объект = ДокументСсылка.ПолучитьОбъект();
	Попытка
	    Объект.Заблокировать();
		Объект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Объект.Разблокировать();
	Исключение
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Не удалось провести документ %Документ%!'");
		Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%Документ%", Строка(Объект.Ссылка));
		Сообщение.Сообщить();
	КонецПопытки; 

	Возврат Объект.Проведен;
	
КонецФункции

&НаСервере
// Функция осуществляет отмену проведения выбранного документа.
//
Функция ОтменаПроведенияСервер(ДокументСсылка)
	
	Объект = ДокументСсылка.ПолучитьОбъект();
	Попытка
		Объект.Заблокировать();
		Объект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Объект.Разблокировать();
	Исключение
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Не удалось отменить проведение документа %Документ%!'");
		Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%Документ%", Строка(Объект.Ссылка));
		Сообщение.Сообщить();
	КонецПопытки; 

	Возврат Объект.Проведен;
	
КонецФункции

&НаСервере
// Функция устанавливает пометку на удаление выбранного документа.
//
Функция УстановитьПометкуУдаленияСервер(ДокументСсылка)
	
	Объект = ДокументСсылка.ПолучитьОбъект();
	Попытка
		
		Объект.Заблокировать();
		Объект.УстановитьПометкуУдаления(НЕ Объект.ПометкаУдаления);
		Объект.Разблокировать();
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Не удалось установить пометку удаления на документ %Документ%!'");
		Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%Документ%", Строка(Объект.Ссылка));
		Сообщение.Сообщить();
		
	КонецПопытки; 

	Возврат Новый Структура("ПометкаУдаления, Проведен", ДокументСсылка.ПометкаУдаления, ДокументСсылка.Проведен);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Функция преобразует многострочную строку в однострочную.
//
Функция ПреобразоватьМногострочнуюСтроку(МногострочнаяСтрока)
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(МногострочнаяСтрока, Символы.ПС, Истина);
	Возврат СтрСоединить(МассивСтрок, " ");
	
КонецФункции

&НаСервере
// Функция преобразует дерево значений в таблицу значений.
//
Процедура ДеревоЗначенийВТаблицуЗначений(Дерево, Таблица)
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ДеревоЗначенийВТаблицуЗначений(СтрокаДерева, Таблица);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура выводит все элементы дерева документов без иерархии.
//
Процедура ОтобразитьДокументыСписком()
	
	ВременнаяТаблицаДокументов = РеквизитФормыВЗначение("ТаблицаДокументов");
	МассивДокументов = ВременнаяТаблицаДокументов.ВыгрузитьКолонку("Ссылка");

	ДеревоДокументов.ПолучитьЭлементы().Очистить();
	
	Если МассивДокументов.Количество()
		Тогда
		СписокДокументов = Новый СписокЗначений;
		СписокДокументов.ЗагрузитьЗначения(МассивДокументов);
		
		ДеревоДокументов.ПолучитьЭлементы().Очистить();
		мДерево = ДеревоДокументов;
		мУжеВСписке = Новый Соответствие;
		
		ВывестиБезРодителей(СписокДокументов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура рекурсивно сворачивает дерево значений.
//
Процедура СвернутьВеткуДерева(Дерево)
	
	Для Каждого Элемент Из Дерево.ПолучитьЭлементы() Цикл
		ИдентификаторСтроки=Элемент.ПолучитьИдентификатор();
		Элементы.ДеревоДокументов.Свернуть(ИдентификаторСтроки);
		СвернутьВеткуДерева(Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура рекурсивно разворачивает дерево значений.
//
Процедура РазвернутьВеткуДерева(Дерево)
	
	Для Каждого Элемент Из Дерево.ПолучитьЭлементы() Цикл
		ИдентификаторСтроки=Элемент.ПолучитьИдентификатор();
		Элементы.ДеревоДокументов.Развернуть(ИдентификаторСтроки);
		РазвернутьВеткуДерева(Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура осуществляет поиск строки по дереву документов.
//
Процедура НайтиАктивнуюСтроку(Дерево, ДокументСсылка)
	
		Для Каждого Элемент Из Дерево.ПолучитьЭлементы() Цикл
			Если Элемент.Ссылка = ДокументСсылка
				Тогда
				СтрокаПозиционированияПослеОбновления = Элемент.ПолучитьИдентификатор();
				Прервать;
			Иначе
				НайтиАктивнуюСтроку(Элемент, ДокументСсылка); 
			КонецЕсли;
		КонецЦикла;

КонецПроцедуры 

&НаСервере
// Процедура устанавливает условное оформление формы
//
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ДеревоДокументов.Ссылка", ДокументСсылка, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, Элементы.ДеревоДокументовДокументПредставление.Имя);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, Элементы.ДеревоДокументовСуммаДокумента.Имя);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, Элементы.ДеревоДокументовОрганизация.Имя);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, Элементы.ДеревоДокументовКомментарий.Имя);
	
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,Истина));
	
	// Отображение гиперссылок в подробной информации
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "РеквизитыДокумента.Гиперссылка", Истина, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "РеквизитыДокументаТекстРеквизита");
	
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Шрифт", Новый Шрифт(,,,,Истина));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ГиперссылкаТабличнойЧасти);
	
	// Сделаем серым цветом непроведенные документы
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ДеревоДокументов.ПометкаУдаления", Истина, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ДеревоДокументовДокументПредставление");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ДеревоДокументовСуммаДокумента");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ДеревоДокументовКонтрагент");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ДеревоДокументовОрганизация");
	
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	// Оформим поле Контрагент для документа "Событие"
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ДеревоДокументов.НесколькоКонтрагентов", Истина, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ДеревоДокументовКонтрагент");
	
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Несколько>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);

КонецПроцедуры

&НаКлиенте
// Процедура обновляет Дерево документов
//
Процедура ОбновитьДеревоДокументов()

	Если НЕ ПустаяСтрока(ЭтаФорма.СтрокаПоиска)
		Тогда
		УстановитьОтборСтрок(ЭтаФорма.СтрокаПоиска);
		Возврат;
	КонецЕсли;
	
	Если ОсновнойДокументЕщеДоступен() Тогда
		ТекущаяСсылкаНаДокумент = ?(НЕ Элементы.ДеревоДокументов.ТекущаяСтрока = Неопределено,Элементы.ДеревоДокументов.ТекущиеДанные.Ссылка, Неопределено); 
		
		ВывестиДеревоДокументов(); 
		
		РазвернутьДеревоЗначенийСвойств(Элементы.ДеревоДокументов, ДеревоДокументов); 
		
		Если ТекущаяСсылкаНаДокумент <> Неопределено Тогда
			НайтиАктивнуюСтроку(ДеревоДокументов, ТекущаяСсылкаНаДокумент);
			Элементы.ДеревоДокументов.ТекущаяСтрока = СтрокаПозиционированияПослеОбновления;
			СтрокаПозиционированияПослеОбновления = Неопределено;
		КонецЕсли;
		
	Иначе
		ЗакрытьФормуСПредупреждением(НСтр("ru = 'Документ, для которого сформирован отчет о структуре
		|подчиненности был удален, или же стал недоступен.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтактнуюИнформацию()
	
	КонтактнаяИнформацияПанельУНФ.ОбновитьДанныеПанели(ЭтотОбъект, ТекущийКонтрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюПоРеквизитамДокумента()
	
	РеквизитыДокумента.Очистить();
	
	ТекущиеДанные = Элементы.ДеревоДокументов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	НоваяСтрока = РеквизитыДокумента.Добавить();
	НоваяСтрока.ПредставлениеРеквизита = НСтр("ru='Автор: '");
	НоваяСтрока.ЗначениеРеквизита = ТекущиеДанные.Автор;
	НоваяСтрока.Гиперссылка = Истина;
	НоваяСтрока.ТекстРеквизита = Строка(ТекущиеДанные.Автор);
	
	Если ТипЗнч(ТекущиеДанные.Ответственный) = Тип("СправочникСсылка.Сотрудники") Тогда
		НоваяСтрока = РеквизитыДокумента.Добавить();
		НоваяСтрока.ПредставлениеРеквизита = НСтр("ru='Ответственный: '");
		НоваяСтрока.ЗначениеРеквизита = ТекущиеДанные.Ответственный;
		НоваяСтрока.Гиперссылка = Истина;
		НоваяСтрока.ТекстРеквизита = Строка(ТекущиеДанные.Ответственный);
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.СостояниеЗаказа = Неопределено Тогда
		НоваяСтрока = РеквизитыДокумента.Добавить();
		НоваяСтрока.ПредставлениеРеквизита = НСтр("ru='Состояние: '");
		НоваяСтрока.ЗначениеРеквизита = Строка(ТекущиеДанные.СостояниеЗаказа);
		НоваяСтрока.ТекстРеквизита = Строка(ТекущиеДанные.СостояниеЗаказа);
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.Состояние = Неопределено Тогда
		НоваяСтрока = РеквизитыДокумента.Добавить();
		НоваяСтрока.ПредставлениеРеквизита = НСтр("ru='Состояние: '");
		НоваяСтрока.ЗначениеРеквизита = Строка(ТекущиеДанные.Состояние);
		НоваяСтрока.ТекстРеквизита = Строка(ТекущиеДанные.Состояние);
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.ВидОперации = Неопределено Тогда
		НоваяСтрока = РеквизитыДокумента.Добавить();
		НоваяСтрока.ПредставлениеРеквизита = НСтр("ru='Операция: '");
		НоваяСтрока.ЗначениеРеквизита = Строка(ТекущиеДанные.ВидОперации);
		НоваяСтрока.ТекстРеквизита = Строка(ТекущиеДанные.ВидОперации);
	КонецЕсли;
		
	НоваяСтрока = РеквизитыДокумента.Добавить();
	НоваяСтрока.ПредставлениеРеквизита = НСтр("ru='Комментарий: '");
	НоваяСтрока.ЗначениеРеквизита = Строка(ТекущиеДанные.Комментарий);
	НоваяСтрока.Гиперссылка = Истина;
	НоваяСтрока.ТекстРеквизита = Строка(ТекущиеДанные.Комментарий);
	
	Для Каждого СтрокаРеквизитов Из РеквизитыДокумента Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаРеквизитов.ЗначениеРеквизита) Тогда
			СтрокаРеквизитов.ТекстРеквизита = НСтр("ru='<не заполнено>'");
			НоваяСтрока.Гиперссылка = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	ИмяКлючаОбъекта = "СвязныеДокументы";
	
	ХранилищеСистемныхНастроек.Сохранить(ИмяКлючаОбъекта,
	ИмяКлючаОбъекта+"_" + "ВидимостьПанелиОтборов", Элементы.ФильтрыНастройкиИДопИнфо.Видимость);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	ИмяКлючаОбъекта = "СвязныеДокументы";
	
	НовоеЗначениеВидимость = ХранилищеСистемныхНастроек.Загрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_" + "ВидимостьПанелиОтборов");
	
	Если НовоеЗначениеВидимость = Неопределено Тогда
		НовоеЗначениеВидимость = Истина;
	КонецЕсли;
	
	Элементы.ФильтрыНастройкиИДопИнфо.Видимость = НовоеЗначениеВидимость;
	
КонецПроцедуры

// Процедура разворачивает дерево значений на форме.
//
&НаКлиенте
Процедура РазвернутьДеревоЗначенийСвойств(ЭлементФормы, Дерево) Экспорт
	
	Для каждого Элемент Из Дерево.ПолучитьЭлементы() Цикл
		Идентификатор = Элемент.ПолучитьИдентификатор();
		ЭлементФормы.Развернуть(Идентификатор, Истина);
	КонецЦикла;
	
КонецПроцедуры // РазвернутьДеревоЗначенийСвойств()

&НаКлиенте
Процедура Подключаемый_ОбработатьАктивизациюСтрокиСписка()
		
	ОбновитьКонтактнуюИнформацию();
	
	Если Не ЗначениеЗаполнено(ТекущийКонтрагент) Тогда
		
		Если Не ЭтотОбъект.Элементы.Найти("ДанныеПанелиКонтактнойИнформации") = Неопределено Тогда
			ЭтотОбъект.ДанныеПанелиКонтактнойИнформации[0].Отображение = НСтр("ru='<Выберите документ с контрагентом>'");
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьИнформациюПоРеквизитамДокумента();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.ДокументСсылка = Неопределено ИЛИ Параметры.ДокументСсылка.Пустая() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	ДокументСсылка = Параметры.ДокументСсылка; 
	
	ВосстановитьНастройки();
	
	ВывестиДеревоДокументов();
	
	// УНФ.ПанельКонтактнойИнформации
	КонтактнаяИнформацияПанельУНФ.ПриСозданииНаСервере(ЭтотОбъект, "КонтактнаяИнформация", "ДеревоДокументовКонтекстноеМеню");
	// Конец УНФ.ПанельКонтактнойИнформации

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии(Отказ)
	 
	Элементы.ДеревоДокументов.ТекущаяСтрока = ДеревоДокументов.ПолучитьЭлементы()[0];
	СтрокаПозиционированияПослеОбновления = Неопределено;
	
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, Элементы.ФильтрыНастройкиИДопИнфо.Видимость);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда
		СохранитьНастройки()
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// УНФ.ПанельКонтактнойИнформации
	Если КонтактнаяИнформацияПанельУНФКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьПанельКонтактнойИнформацииСервер();
	КонецЕсли;
	// Конец УНФ.ПанельКонтактнойИнформации
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
// Процедура - обработчик события Перед началом изменения табличного поля ДеревоДокументов.
//
Процедура ДеревоДокументовПередНачаломИзменения(Элемент, Отказ)
	ОткрытьФормуДокумента();
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик действия Открыть.
//
Процедура ОткрытьДокумент(Команда)
	
	Если Элементы.ДеревоДокументов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуДокумента();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик действия Обновить.
//
Процедура Обновить(Команда)
	
	Если ДанныеМеток.Количество() Тогда 
		ТекстПредупреждения = НСтр("ru = 'Для продолжения, очистите значения отбора.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат
	КонецЕсли;
	
	ОбновитьДеревоДокументов();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик действия ВывестиДляТекущего.
//
Процедура ВывестиДляТекущего(Команда)
	
	Если Элементы.ДеревоДокументов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПоиска = "";
	
	ДокументСсылка = Элементы.ДеревоДокументов.ТекущиеДанные.Ссылка;
	Если ОсновнойДокументЕщеДоступен() Тогда
		ДеревоДокументов.ПолучитьЭлементы().Очистить();
		ВывестиДеревоДокументов();
		РазвернутьДеревоЗначенийСвойств(Элементы.ДеревоДокументов,ДеревоДокументов);
	Иначе
		ЗакрытьФормуСПредупреждением(НСтр("ru = 'Документ, для которого сформирован отчет о структуре
										  |подчиненности был удален, или же стал недоступен.'"));
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НайтиВСписке(Команда)
	
	Если Элементы.ДеревоДокументов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрываемаяФорма = СтрШаблон("Документ.%1.ФормаСписка", Элементы.ДеревоДокументов.ТекущиеДанные.ВидДокумента);
	ПараметрыФормы = Новый Структура("ТекущаяСтрока", Элементы.ДеревоДокументов.ТекущиеДанные.Ссылка);
	ОткрытьФорму(ОткрываемаяФорма, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Провести(Кнопка)
	
	Если Не Элементы.ДеревоДокументов.ВыделенныеСтроки.Количество()
		Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоДокументов.ВыделенныеСтроки Цикл
		Попытка
			СтрокаДерева = Элементы.ДеревоДокументов.ДанныеСтроки(ВыделеннаяСтрока);
			СтрокаДерева.Проведен = ПровестиСервер(СтрокаДерева.Ссылка);
			СтрокаДерева.Картинка = НомерКартинки(СтрокаДерева);
		Исключение
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = СтрШаблон(НСтр("ru = 'Не удалось провести документ %1'"),
				СтрокаДерева.ДокументПредставление);
			Сообщение.Сообщить();
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик действия Отмена проведения.
//
Процедура ОтменаПроведения(Кнопка)
	
	Если Не Элементы.ДеревоДокументов.ВыделенныеСтроки.Количество()
		Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоДокументов.ВыделенныеСтроки Цикл
		
		СтрокаДерева = Элементы.ДеревоДокументов.ДанныеСтроки(ВыделеннаяСтрока);
		
		Если Не СтрокаДерева.Проведен Тогда Продолжить КонецЕсли;
		
		Попытка
			СтрокаДерева.Проведен = ОтменаПроведенияСервер(СтрокаДерева.Ссылка);
			СтрокаДерева.Картинка = НомерКартинки(СтрокаДерева);
		Исключение
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Не удалось отменить проведение документа %Документ%!'");
			Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%Документ%", СтрокаДерева.ДокументПредставление);
			Сообщение.Сообщить();
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриАктивизацииСтроки реквизита ДеревоДокументов.
//
Процедура ДеревоДокументовПриАктивизацииСтроки(Элемент)
	
	ОбновитьДоступностьКнопок();
	
	КонтактнаяИнформацияПанельУНФКлиент.ПриАктивизацииДинамическогоСписка(ЭтотОбъект, Элемент, ТекущийКонтрагент,
		"Контрагент");
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик действия УстановитьПометкуУдаления.
//
Процедура УстановитьПометкуУдаления(Кнопка)
	
	Если Не Элементы.ДеревоДокументов.ВыделенныеСтроки.Количество()
		Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоДокументов.ВыделенныеСтроки Цикл
		Попытка
			СтрокаДерева = Элементы.ДеревоДокументов.ДанныеСтроки(ВыделеннаяСтрока);
			
			Результат = УстановитьПометкуУдаленияСервер(СтрокаДерева.Ссылка);
			СтрокаДерева.ПометкаУдаления = Результат.ПометкаУдаления;
			СтрокаДерева.Проведен = Результат.Проведен;
			СтрокаДерева.Картинка = НомерКартинки(СтрокаДерева);
		Исключение
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Не удалось установить пометку удаления на документ %Документ%!'");
			Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%Документ%", СтрокаДерева.ДокументПредставление);
			Сообщение.Сообщить();
		КонецПопытки;
	КонецЦикла;
			
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик действия Выбор дерева документов.
//
Процедура ДеревоДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.ДеревоДокументов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = ложь;
	ОткрытьФормуДокумента();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события очистки поля поиска.
//
Процедура ПолеПоискаОчистка(Элемент, СтандартнаяОбработка)  
	
	Если ДанныеМеток.Количество() Тогда
		ОтобразитьДокументыСписком();
	Иначе
		ВывестиДеревоДокументов();
	КонецЕсли;
	
	РазвернутьДеревоЗначенийСвойств(Элементы.ДеревоДокументов,ДеревоДокументов);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик действия свертывания строки дерева документов.
//
Процедура СвернутьВеткуДереваДокументов(Команда) 
	
	ТекущаяВетка = ДеревоДокументов.НайтиПоИдентификатору(Элементы.ДеревоДокументов.ТекущаяСтрока);
	
	Если Не ТекущаяВетка = Неопределено
		Тогда
		СвернутьВеткуДерева(ТекущаяВетка);
		Элементы.ДеревоДокументов.Свернуть(Элементы.ДеревоДокументов.ТекущаяСтрока);  
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик действия развертывания строки дерева документов.
//
Процедура РазвернутьВеткуДереваДокументов(Команда) 
	
	РазвернутьВеткуДерева(ДеревоДокументов.НайтиПоИдентификатору(Элементы.ДеревоДокументов.ТекущаяСтрока));
	Элементы.ДеревоДокументов.Развернуть(Элементы.ДеревоДокументов.ТекущаяСтрока);   

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик действия отражения документов списком.
//
Процедура ОтобразитьСписком(Команда) 
	ОтобразитьДокументыСписком();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик действия полного развертывания дерева документов.
//
Процедура РазвернутьДерево(Команда)
	РазвернутьДеревоЗначенийСвойств(Элементы.ДеревоДокументов,ДеревоДокументов);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик действия полного свертывания дерева документов.
//
Процедура СвернутьДерево(Команда)
	
	ЭлементыДереваДокументов = ДеревоДокументов.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыДереваДокументов Цикл
		СвернутьВеткуДерева(ЭлементДерева);
		Элементы.ДеревоДокументов.Свернуть(ЭлементДерева.ПолучитьИдентификатор());
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоДвижениям(Команда)
	
	ТекущиеДанные = Элементы.ДеревоДокументов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОткрытьФорму("Отчет.ДвиженияДокумента.Форма", Новый Структура("Документ", ТекущиеДанные.Ссылка), ЭтотОбъект, Истина);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события изменения текста в строке поиска.
//
Процедура СтрокаПоискаПриИзменении(Элемент)
УстановитьОтборСтрок(ЭтаФорма.СтрокаПоиска);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРазвернутьОтборыНажатие(Элемент)
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
КонецПроцедуры

&НаКлиенте
Процедура СвернутьОтборыНажатие(Элемент)
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыДокументаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.РеквизитыДокумента.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если ТекущиеДанные.Гиперссылка Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.ЗначениеРеквизита);
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		УстановитьМеткуИОтборСписка("Контрагент", Элемент.Родитель.Имя, ВыбранноеЗначение,, Ложь);
		УстановитьОтборСтрок(ЭтаФорма.СтрокаПоиска);
		ВыбранноеЗначение = Неопределено;
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Контрагент", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

#Область Отборы

&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="", ВывестиДанные = Истина)
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения);
	
	Если ВывестиДанные Тогда
		ОтобразитьДокументыСписком();
	КонецЕсли;
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_")+1);
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		УдалитьМеткуОтбора(МеткаИД, Ложь);
		УстановитьОтборСтрок(ЭтаФорма.СтрокаПоиска);
		Возврат;
	КонецЕсли;
	
	УдалитьМеткуОтбора(МеткаИД);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД, ВывестиДанные = Истина)
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, Неопределено, МеткаИД,,, Ложь);
	
	Если ВывестиДанные Тогда
		Если ДанныеМеток.Количество() Тогда
			ОтобразитьДокументыСписком();
		Иначе
			ВывестиДеревоДокументов();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПанельКонтактнойИнформации

&НаСервере
Процедура ОбновитьПанельКонтактнойИнформацииСервер()
	
	КонтактнаяИнформацияПанельУНФ.ОбновитьДанныеПанели(ЭтотОбъект, ТекущийКонтрагент);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	КонтактнаяИнформацияПанельУНФКлиент.ДанныеПанелиКонтактнойИнформацииВыбор(ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииПриАктивизацииСтроки(Элемент)
	
	КонтактнаяИнформацияПанельУНФКлиент.ДанныеПанелиКонтактнойИнформацииПриАктивизацииСтроки(ЭтотОбъект, Элемент);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииВыполнитьКоманду(Команда)
	
	КонтактнаяИнформацияПанельУНФКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, ТекущийКонтрагент);
	
КонецПроцедуры

#КонецОбласти

#Область Поиск

&НаКлиенте
// Устанавливает отбор строк в зависимости от значения поля поиска
Процедура УстановитьОтборСтрок(ЗначениеПоиска)
	
	Если ПустаяСтрока(ЗначениеПоиска)
		Тогда 
		
		Если ДанныеМеток.Количество() Тогда
			ОтобразитьДокументыСписком();
		Иначе
			ВывестиДеревоДокументов();
		КонецЕсли;
	
		РазвернутьДеревоЗначенийСвойств(Элементы.ДеревоДокументов,ДеревоДокументов);
	КонецЕсли;
	
	СписокДокументов = Новый СписокЗначений;
	
	ИскомоеЗначение = "" + ЗначениеПоиска;
	
	Если ПустаяСтрока(ИскомоеЗначение) Тогда
		Возврат;
	Иначе
		МассивПоиска =  ПолучитьМассивПоиска(СтрЗаменить(ИскомоеЗначение, ".", ","));
		Если НЕ МассивПоиска.Количество() = 0 Тогда
			Для Каждого ДанныеСтроки Из ЭтаФорма.ТаблицаДокументов Цикл
				ТекстПоиска = СтрЗаменить(ВРЕГ(""+
				ДанныеСтроки.ДокументПредставление + " "+
				ДанныеСтроки.Организация + " "+
				ДанныеСтроки.Контрагент + " "+
				ДанныеСтроки.Номер + " " +
				ДанныеСтроки.Комментарий + " "+
				Формат(ДанныеСтроки.СуммаДокумента, "ЧДЦ=2; ЧРД=,; ЧГ=") + " "+
				""), ".", ",");
				
				ДанныеСтроки.Отбор = Истина;
				Для Каждого ПараПоиска Из МассивПоиска Цикл
					Если Найти(ТекстПоиска, ПараПоиска.ИсходноеЗначение) + Найти(ТекстПоиска, ПараПоиска.ИнвертированноеЗначение) = 0 Тогда
						ДанныеСтроки.Отбор = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ДанныеСтроки.Отбор
					Тогда
					СписокДокументов.Добавить(ДанныеСтроки.Ссылка);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ВывестиБезРодителей(СписокДокументов);
	
КонецПроцедуры

&НаКлиенте
Функция ИнвертироватьСтроку(Строка)
	
	// АПК:1036-выкл
	СтрокаКириллица = "йцукенгшщзхъфывапролджэячсмитьбю.ё";
	СтрокаЛатиница = "qwertyuiop[]asdfghjkl;'zxcvbnm,./`";
	// АПК:1036-вкл
	
	Результат = "";
	Строка = НРег(Строка);
	Для Сч = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(Строка, Сч, 1);
		Позиция = Найти(СтрокаЛатиница, Символ);
		Если Позиция <> 0 Тогда
			Результат = Результат + Сред(СтрокаКириллица, Позиция, 1);
		Иначе
			Позиция = Найти(СтрокаКириллица, Символ);
			Если Позиция <> 0 Тогда
				Результат = Результат + Сред(СтрокаЛатиница, Позиция, 1);
			Иначе
				Результат = Результат + Символ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьМассивПоиска(Знач ИскомоеЗначение)
	
	Результат = Новый Массив;
	
	Если ИскомоеЗначение <> Неопределено Тогда
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"%"," ");
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"["," ");
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"]"," ");
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"_"," ");
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,""""," ");
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"¶"," ");
		ИскомоеЗначение = СокрЛП(ИскомоеЗначение);
		ИскомоеЗначение = ИскомоеЗначение;
		
		ИскомоеЗначение = ИскомоеЗначение + " ";
		Пока Найти(ИскомоеЗначение,"  ") <> 0 Цикл
			ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"  "," ");
		КонецЦикла;
		
		Позиция = Найти(ИскомоеЗначение," ");
		
		Пока Позиция <> 0 Цикл
			
			ИсходноеЗначение = Лев(ИскомоеЗначение,Позиция - 1);
			ИнвертированноеЗначение = ИнвертироватьСтроку(ИсходноеЗначение);
			
			Результат.Добавить(Новый Структура("ИсходноеЗначение,ИнвертированноеЗначение", ВРег(ИсходноеЗначение), ВРег(ИнвертированноеЗначение)));
			
			ИскомоеЗначение = Сред(ИскомоеЗначение, Позиция + 1);
			Позиция = Найти(ИскомоеЗначение," ");
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

