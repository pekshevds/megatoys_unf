
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Параметры.ОснованиеПлатежа) Тогда 
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
	ПоддерживаемыеТипыВО.Добавить("ККТ");
	
	СписокДоступныхУстройств = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам(ПоддерживаемыеТипыВО);
	Если СписокДоступныхУстройств.Количество() = 0 Тогда
		Элементы.ПечатьПречека.Видимость = Ложь;
	КонецЕсли;
	
	ОснованиеПлатежа 		 = Параметры.ОснованиеПлатежа;
	МетаданныеОснования 	 = ОснованиеПлатежа.Метаданные();

	БанковскийСчетВДокументе = Ложь;	
	
	РеквизитыПлатежа 		 = Новый Структура();
	РеквизитыПлатежа.Вставить("ВидКонтрагента", 	"Контрагент.ВидКонтрагента");
	РеквизитыПлатежа.Вставить("ДокументОплаты", 	"Ссылка");
	РеквизитыПлатежа.Вставить("ИтогПоЧеку", 		"СуммаДокумента");
	РеквизитыПлатежа.Вставить("Дата", 				"Дата");
	РеквизитыПлатежа.Вставить("Организация", 		"Организация");

	Если МетаданныеОснования.Реквизиты.Найти("БанковскийСчет") <> Неопределено Тогда

		БанковскийСчетВДокументе = Истина;	
		
		РеквизитыПлатежа.Вставить("БанковскийСчет",		"БанковскийСчет");
		РеквизитыПлатежа.Вставить("Банк",				"БанковскийСчет.Банк");
		РеквизитыПлатежа.Вставить("БИКРасчетногоСчета",	"БанковскийСчет.Банк.Код");        
		РеквизитыПлатежа.Вставить("Валюта",				"БанковскийСчет.ВалютаДенежныхСредств");
		
	Иначе

		РеквизитыПлатежа.Вставить("БанковскийСчет",		"Организация.БанковскийСчетПоУмолчанию");
		РеквизитыПлатежа.Вставить("Банк",				"Организация.БанковскийСчетПоУмолчанию.Банк");
		РеквизитыПлатежа.Вставить("БИКРасчетногоСчета",	"Организация.БанковскийСчетПоУмолчанию.Банк.Код");
		РеквизитыПлатежа.Вставить("Валюта",				"Организация.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств");
		
	КонецЕсли;
	
	Если МетаданныеОснования.Реквизиты.Найти("Подразделение") <> Неопределено Тогда
		РеквизитыПлатежа.Вставить("ТорговыйОбъект",	"Подразделение");
	ИначеЕсли МетаданныеОснования.Реквизиты.Найти("СтруктурнаяЕдиницаПродажи") <> Неопределено Тогда
		РеквизитыПлатежа.Вставить("ТорговыйОбъект",	"СтруктурнаяЕдиницаПродажи");
	ИначеЕсли МетаданныеОснования.Реквизиты.Найти("СтруктурнаяЕдиница") <> Неопределено Тогда
		РеквизитыПлатежа.Вставить("ТорговыйОбъект",	"СтруктурнаяЕдиница");
	Иначе

		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Вид документа не подходит для оплаты по системе быстрых платежей'"),
			,
			,
			, 
			Отказ);
		Возврат;
		
	КонецЕсли;
	
	ОснованиеПлатежа  	= Параметры.ОснованиеПлатежа;
	НастройкаСБП 	  	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОснованиеПлатежа, РеквизитыПлатежа);
	
	НастройкиИнтеграции = ?(ЗначениеЗаполнено(НастройкаСБП.БИКРасчетногоСчета), 
								СистемаБыстрыхПлатежей.ПараметрыПодключенияПоБИК(НастройкаСБП.БИКРасчетногоСчета),
								Новый Структура("ИнтеграцияДоступнаСБПc2b", Ложь));

	НастройкиИнтеграции = ?(НастройкиИнтеграции.ИнтеграцияДоступнаСБПc2b, 
		НастройкиИнтеграции, 
		НастройкиИнтеграцииПайМастер());
								
	НастройкиСчета		= Новый Структура;
	НастройкиСчета.Вставить("ОтложенноеПолучениеСтатуса", 	Истина);
		
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(НастройкаСБП, НастройкиСчета);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(НастройкаСБП, НастройкиИнтеграции);
								
	Если НастройкаСБП.ИтогПоЧеку = 0 Тогда

		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Невозможно сформировать платежную ссылку, поскольку сумма документа равна нулю'"),
			,			
			,
			,
			Отказ);
		
	ИначеЕсли Не НастройкаСБП.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Оплата по системе быстрых платежей допустима только для физических лиц'"),
			,			
			,
			,
			Отказ);
			
	ИначеЕсли Не ЗначениеЗаполнено(НастройкаСБП.БанковскийСчет) Тогда

		Если БанковскийСчетВДокументе Тогда

			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Для оплаты по системе быстрых платежей необходимо заполнить банковский счет документа'"),
				,
				,
				, 
				Отказ);
				
		Иначе
				
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Для оплаты по системе быстрых платежей необходимо заполнить основной банковский счет организации'"),
				,
				,
				, 
				Отказ);
				
		КонецЕсли;

	ИначеЕсли НастройкаСБП.Валюта <> Константы.ВалютаУчета.Получить() Тогда

		Если БанковскийСчетВДокументе Тогда

			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Для оплаты по системе быстрых платежей необходимо выбрать рублевый банковский счет документа'"),
				,
				,
				, 
				Отказ);
				
		Иначе
				
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Для оплаты по системе быстрых платежей необходимо указать рублевый основной банковский счет организации'"),
				,
				,
				, 
				Отказ);
				
		КонецЕсли;

	ИначеЕсли Не НастройкаСБП.ИнтеграцияДоступнаСБПc2b Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не настроено подключение к системе быстрых платежей.'"),
			,
			,
			, 
			Отказ);

	Иначе

		ТребуетсяОбновлениеДанныхВСервисе        = Ложь;
		ДанныеОснованияПлатежаВСервисеОбработаны = Ложь;
	
		ВариантОтправки   = "ЭлектроннаяПочта";
		НастройкиШаблонов = Новый Структура("Используется", Ложь);
		КлючПоложенияОкна = "";
		
		НастроитьФормуПослеПроверкиДоступа();
		ЗаполнитьДанныеОснованияПлатежаВСервисе();
	
		УправлениеЭлементамиФормыПоПодсистемам(КлючПоложенияОкна);
		УправлениеЭлементамиФормыПоДанным(КлючПоложенияОкна);
	
		КлючСохраненияПоложенияОкна = СтрШаблон("СБП.%1.%2", 
			ЭтотОбъект.Заголовок,
			КлючПоложенияОкна);
		
		ВосстановитьШаблоныПоУмолчанию();	

		Если Не МагазинПодключен
			И Не ПравоДоступа("Редактирование", Метаданные.Справочники.НастройкиПодключенияКСистемеБыстрыхПлатежей) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Не настроено подключение к системе быстрых платежей.'"),
				,
				,
				, 
				Отказ);
			
		КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если МагазинПодключен
		И Не ДанныеОснованияПлатежаВСервисеОбработаны Тогда
		НачатьФормированиеПлатежнойСсылки();
	КонецЕсли;
	
	ТипПлатформыКлиента = ОбщегоНазначенияКлиент.ТипПлатформыКлиента();
	
	#Если ВебКлиент Тогда
		ЭтоВебКлиент = Истина;
	#Иначе
		ЭтоВебКлиент = Ложь;
	#КонецЕсли
		
	ОтображатьКнопкуКопироватьВБуфер = (ТипПлатформыКлиента = ТипПлатформы.Windows_x86 
		ИЛИ ТипПлатформыКлиента = ТипПлатформы.Windows_x86_64)
		И Не ЭтоВебКлиент;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"КопироватьВБуфер",
		"Видимость",
		ОтображатьКнопкуКопироватьВБуфер);
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "ДисплейПокупателя");
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкиШаблонов.Используется 
		И ЗначениеЗаполнено(ОснованиеПлатежа) Тогда
		
		СохранитьШаблоныПоУмолчанию(ОснованиеПлатежа, 
			ШаблонСообщенияЭлектроннаяПочта, ШаблонСообщенияТелефон);
	КонецЕсли;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ОтправкаСсылки

&НаКлиенте
Процедура ШаблонСообщенияЭлектроннаяПочтаПриИзменении(Элемент)
	
	ВариантОтправки = "ЭлектроннаяПочта";
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонСообщенияТелефонПриИзменении(Элемент)
	
	ВариантОтправки = "Телефон";
	
КонецПроцедуры

#КонецОбласти

#Область ПодсказкаФормы

&НаКлиенте
Процедура ДекорацияПояснениеКФормеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "НастройкиПодключения" Тогда
		
		СтандартнаяОбработка = Ложь;
		СистемаБыстрыхПлатежейКлиент.НастройкиПодключения(ЭтотОбъект);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьНастройку" Тогда
		
		СтандартнаяОбработка = Ложь;
		Оповещение 			 = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастроек", ЭтотОбъект);

		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Организация", 	НастройкаСБП.Организация);
		ДополнительныеПараметры.Вставить("ТорговыйОбъект", 	НастройкаСБП.ТорговыйОбъект);
	
		ПараметрыПодключения 	= Новый Структура;
		ПараметрыПодключения.Вставить("БИК", НастройкаСБП.БИКРасчетногоСчета);
	
		СистемаБыстрыхПлатежейКлиент.ПодключитьСистемуБыстрыхПлатежей(
			НастройкаСБП.БИКРасчетногоСчета,
			Оповещение,
			ДополнительныеПараметры);

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьСсылку(Команда)
	
	НачатьФормированиеПлатежнойСсылки();
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьВБуфер(Команда)
	
	// Копирование происходит с предварительной очисткой через обработчик, для обхода поведения платформы
	// при повторном копировании - при определенных условиях копирование не происходит.
	
	ЭтотОбъект.БуферОбмена = "";
		
	ПодключитьОбработчикОжидания("КопироватьСсылкуВБуфер", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьQRКод(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаQRКод Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОсновная;
		
	ИначеЕсли ЗначениеЗаполнено(ПлатежнаяСсылка) Тогда  

		ПлатежнаяСистема_ДанныеКода 	  = СформироватьQRКОд(
			НастройкаСБП.Интеграция, 
			ПлатежнаяСсылка, 
			УникальныйИдентификатор);
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаQRКод;

		ОбработкаПечати 				  = Новый ОписаниеОповещения("ПечатьПречекаЗавершение", ЭтотОбъект);
				
        ИнтеграцияСПлатежнымиСистемамиУНФКлиент.ВывестиQRКодНаДисплей(
			ПлатежнаяСсылка,
			ПлатежнаяСистема_ДанныеКода,
			ОбработкаПечати);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСсылку(Команда)
	
	Если ЗначениеЗаполнено(ПлатежнаяСсылка) Тогда
		
		Закрыть();
		ОтправитьПлатежнуюСсылку();
	
	Иначе
		
		ОбработкаОтправки = Новый ОписаниеОповещения("ОтправитьСсылкуПослеФормирования", ЭтотОбъект);
		НачатьФормированиеПлатежнойСсылки(ОбработкаОтправки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПречека(Команда)
	
	ОбработкаПечати = Новый ОписаниеОповещения("ПечатьПречекаЗавершение", ЭтотОбъект);
				
    ИнтеграцияСПлатежнымиСистемамиУНФКлиент.ПечатьПречека(
		ПлатежнаяСсылка,
		СуммаОплаты,
		ОбработкаПечати);
	
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОтправкаСсылки

&НаКлиенте
Процедура ОтправитьПлатежнуюСсылку()
	
	ШаблоныИспользуются = НастройкиШаблонов.Используется;
	
	Если ВариантОтправки = "ЭлектроннаяПочта" Тогда
		
		Если ШаблоныИспользуются И ЗначениеЗаполнено(ШаблонСообщенияЭлектроннаяПочта) Тогда
			СформироватьСообщениеДляОтправки(КонструкторПараметровОтправки(ШаблонСообщенияЭлектроннаяПочта, "Письмо"));
		Иначе
			РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(КонструкторПараметровОтправкиБезШаблона());
		КонецЕсли;
	
	ИначеЕсли ВариантОтправки = "Телефон" Тогда
		
		Если ШаблоныИспользуются И ЗначениеЗаполнено(ШаблонСообщенияТелефон) Тогда
			СформироватьСообщениеДляОтправки(КонструкторПараметровОтправки(ШаблонСообщенияТелефон, "СообщениеSMS"));
		Иначе
			ПоказатьФормуСообщения(Новый Структура("Текст, Получатель, ДополнительныеПараметры", 
				ПлатежнаяСсылка, СписокПолучателей()), "СообщениеSMS", ОснованиеПлатежа);
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСсылкуПослеФормирования(Результат, ДопПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ПлатежнаяСсылка) Тогда
		
		Закрыть();
		ОтправитьПлатежнуюСсылку();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция КонструкторПараметровОтправки(Шаблон, ВидСообщения)
	
	ПараметрыОтправки = Новый Структура();
	ПараметрыОтправки.Вставить("Шаблон", Шаблон);
	ПараметрыОтправки.Вставить("Предмет", ОснованиеПлатежа);
	ПараметрыОтправки.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыОтправки.Вставить("ДополнительныеПараметры", Новый Структура);
	ПараметрыОтправки.ДополнительныеПараметры.Вставить("ПреобразовыватьHTMLДляФорматированногоДокумента", Истина);
	ПараметрыОтправки.ДополнительныеПараметры.Вставить("ВидСообщения", ВидСообщения);
	ПараметрыОтправки.ДополнительныеПараметры.Вставить("ПроизвольныеПараметры", Новый Соответствие);
	ПараметрыОтправки.ДополнительныеПараметры.Вставить("ОтправитьСразу", Ложь);
	ПараметрыОтправки.ДополнительныеПараметры.Вставить("ПлатежнаяСсылка", ПлатежнаяСсылка);
	
	Возврат ПараметрыОтправки;
	
КонецФункции

&НаСервере
Функция КонструкторПараметровОтправкиБезШаблона()

	МакетШаблона			= ПолучитьОбщийМакет("ШаблонСообщенияОплатаСБП");
	Тело 					= МакетШаблона.ПолучитьТекст();
	Тема	 				= НСтр("ru = 'Счет на оплату номер [ТипОснования.Номер] на сумму [ТипОснования.СуммаДокумента] руб.'");

	Тело 					= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Тело,
								НСтр("ru='Благодарим за заказ и просим оплатить счет'"),
								НСтр("ru='Номер заказа:'"),
								НСтр("ru='Идентификатор плательщика:'"),
								НСтр("ru='Сумма:'"),
								НСтр("ru='Для оплаты счета перейдите по ссылке'"));

	КнопкаОплатитьЧерезСБП 	= "<a href=""" + ПлатежнаяСсылка + """>" + НСтр("ru = 'Оплатить счет'") + "</a>";
	
	РеквизитыШаблона 		= Новый Структура;
	РеквизитыШаблона.Вставить("Номер", 			"Номер");
	РеквизитыШаблона.Вставить("СуммаДокумента", "СуммаДокумента");
	РеквизитыШаблона.Вставить("Покупатель", 	"Контрагент");

	ПараметрыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОснованиеПлатежа, РеквизитыШаблона);
	ПараметрыШаблона.Вставить("КнопкаОплатитьЧерезСБП", КнопкаОплатитьЧерезСБП);

	Для Каждого ПараметрШаблона Из ПараметрыШаблона Цикл
		
        Тело = СтрЗаменить(Тело, "[ТипОснования." + ПараметрШаблона.Ключ + "]", Строка(ПараметрШаблона.Значение));
        Тема = СтрЗаменить(Тема, "[ТипОснования." + ПараметрШаблона.Ключ + "]", Строка(ПараметрШаблона.Значение));
		
	КонецЦикла;
	
	Вложения 		   = СформироватьВложенияОтправкиБезШаблона(ОснованиеПлатежа, УникальныйИдентификатор);
	ПараметрыСообщения = Новый Структура;
	
	ПараметрыСообщения.Вставить("Получатель", 		СписокПолучателей());
	ПараметрыСообщения.Вставить("Предмет", 			ОснованиеПлатежа);
	ПараметрыСообщения.Вставить("ПлатежнаяСсылка", 	ПлатежнаяСсылка);
	ПараметрыСообщения.Вставить("Тема", 			Тема);
	ПараметрыСообщения.Вставить("Вложения", 		Вложения);
	ПараметрыСообщения.Вставить("Текст", 			Тело);
	
	Возврат ПараметрыСообщения;
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьВложенияОтправкиБезШаблона(Предмет, УникальныйИдентификатор, ВыбранныйФормат = "PDF", ПодписьИПечать = Ложь)
	
	Вложения		  = Новый Массив;

	ФорматыСохранения = Новый Массив;
    ФорматыСохранения.Добавить(ТипФайлаТабличногоДокумента[ВыбранныйФормат]);
	
	МассивОбъектов 	  = Новый Массив;
	МассивОбъектов.Добавить(Предмет);

	Если ТипЗнч(Предмет) = Тип("ДокументСсылка.СчетНаОплату")
		ИЛИ ТипЗнч(Предмет) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(Предмет) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
	
		ИменаМакетов	  = Обработки.ПечатьСчетНаОплату.ИдентификаторПечатнойФормы(, ПодписьИПечать);
		ПараметрыПечати	  = Новый Структура();
	
		КомандаПечати  	  = Новый Структура;
		КомандаПечати.Вставить("Идентификатор", 		  ИменаМакетов);
		КомандаПечати.Вставить("МенеджерПечати", 		  Предмет.Метаданные().ПолноеИмя());
		КомандаПечати.Вставить("ДополнительныеПараметры", ПараметрыПечати);

		НастройкиСохранения = УправлениеПечатью.НастройкиСохранения();
		НастройкиСохранения.ФорматыСохранения 				= ФорматыСохранения;
		НастройкиСохранения.УпаковатьВАрхив 				= Ложь;
		НастройкиСохранения.ПереводитьИменаФайловВТранслит 	= Ложь;
		НастройкиСохранения.ПодписьИПечать 					= ПодписьИПечать;
	
		КоллекцияПечатныхФорм = УправлениеПечатью.НапечататьВФайл(КомандаПечати, МассивОбъектов, НастройкиСохранения);
		
	ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
	
		ИменаМакетов	  = Обработки.ПечатьАктаОбОказанииУслуг.ИдентификаторПечатнойФормы(, ПодписьИПечать);
		ПараметрыПечати	  = Новый Структура();
	
		КомандаПечати  	  = Новый Структура;
		КомандаПечати.Вставить("Идентификатор", 		  ИменаМакетов);
		КомандаПечати.Вставить("МенеджерПечати", 		  Предмет.Метаданные().ПолноеИмя());
		КомандаПечати.Вставить("ДополнительныеПараметры", ПараметрыПечати);

		НастройкиСохранения = УправлениеПечатью.НастройкиСохранения();
		НастройкиСохранения.ФорматыСохранения 				= ФорматыСохранения;
		НастройкиСохранения.УпаковатьВАрхив 				= Ложь;
		НастройкиСохранения.ПереводитьИменаФайловВТранслит 	= Ложь;
		НастройкиСохранения.ПодписьИПечать 					= ПодписьИПечать;
	
		КоллекцияПечатныхФорм = УправлениеПечатью.НапечататьВФайл(КомандаПечати, МассивОбъектов, НастройкиСохранения);
		
	Иначе
		КоллекцияПечатныхФорм = Новый Массив;
	КонецЕсли;
	
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
					
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПечатнаяФорма.ДвоичныеДанные, УникальныйИдентификатор);

		ТекущееВложение = Новый Структура;
		
		ТекущееВложение.Вставить("Представление", 				ПечатнаяФорма.ИмяФайла);
		ТекущееВложение.Вставить("АдресВоВременномХранилище",	АдресВоВременномХранилище);
		
		Вложения.Добавить(ТекущееВложение);
		
	КонецЦикла;

	Возврат Вложения;
	
КонецФункции

&НаКлиенте
Процедура СформироватьСообщениеДляОтправки(ПараметрыОтправки)
	
	Результат = СформироватьСообщениеНаСервере(ПараметрыОтправки);
	
	ПоказатьФормуСообщения(Результат, ПараметрыОтправки.ДополнительныеПараметры.ВидСообщения, ПараметрыОтправки.Предмет);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьСообщениеНаСервере(ПараметрыОтправки)
	
	МодульШаблоныСообщений = ОбщегоНазначения.ОбщийМодуль("ШаблоныСообщений");
	
	Результат = МодульШаблоныСообщений.СформироватьСообщение(
		ПараметрыОтправки.Шаблон, 
		ПараметрыОтправки.Предмет, 
		ПараметрыОтправки.УникальныйИдентификатор, 
		ПараметрыОтправки.ДополнительныеПараметры);

	Вложения = Новый Массив;
	
	Для каждого ЭлементКоллекции Из Результат.Вложения Цикл
		
		ТекущееВложение = Новый Структура;
		
		ТекущееВложение.Вставить("Представление");
		ТекущееВложение.Вставить("АдресВоВременномХранилище");
		ТекущееВложение.Вставить("Кодировка");
		ТекущееВложение.Вставить("Идентификатор");
		
		ЗаполнитьЗначенияСвойств(ТекущееВложение, ЭлементКоллекции);
		
		Вложения.Добавить(ТекущееВложение);
		
	КонецЦикла;		
	
	Результат.Вложения = Вложения;
		
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьФормуСообщения(Сообщение, ВидСообщения, Предмет)
	
	Если ВидСообщения = "СообщениеSMS" Тогда
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS") Тогда 
			
			ДополнительныеПараметры = Новый Структура("ИсточникКонтактнойИнформации, ПеревестиВТранслит");
			
			Если Сообщение.ДополнительныеПараметры <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, Сообщение.ДополнительныеПараметры);
			КонецЕсли;
			
			ДополнительныеПараметры.ИсточникКонтактнойИнформации = Предмет;
			Текст  = ?(Сообщение.Свойство("Текст"), Сообщение.Текст, "");
			
			Получатели = Новый Массив;
			
			ЗаполнитьПолучателейИзСообщения(Получатели, Сообщение);
			
			МодульОтправкаSMSКлиент= ОбщегоНазначенияКлиент.ОбщийМодуль("ОтправкаSMSКлиент");
			
			МодульОтправкаSMSКлиент.ОтправитьSMS(Получатели, Текст, ДополнительныеПараметры);
			
		Иначе
			КопироватьСсылкуВБуфер();
		КонецЕсли;
	Иначе
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
			МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
			МодульРаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(Сообщение);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолучателейИзСообщения(Получатели, Сообщение)
	
	Если Не Сообщение.Свойство("Получатель") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Сообщение.Получатель) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из Сообщение.Получатель Цикл
		
		КонтактныеДанные = Новый Структура;
		
		КонтактныеДанные.Вставить("Телефон",                      ЭлементКоллекции.Значение);
		КонтактныеДанные.Вставить("Представление",                ЭлементКоллекции.Представление);
		КонтактныеДанные.Вставить("ИсточникКонтактнойИнформации", Неопределено);
		
		Получатели.Добавить(КонтактныеДанные);

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СписокПолучателей()
	
	Контрагент 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеПлатежа, "Контрагент");
	Телефон 	= ПечатьДокументовУНФ.КонтактнаяИнформация(Контрагент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	АдресЭП 	= ПечатьДокументовУНФ.КонтактнаяИнформация(Контрагент, Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
	
	Если ВариантОтправки = "ЭлектроннаяПочта" Тогда
		
		СписокПолучателей 	= Новый Массив; 
		
		СтруктураПолучателя = Новый Структура;
		СтруктураПолучателя.Вставить("Адрес", 						 АдресЭП);
		СтруктураПолучателя.Вставить("Представление", 				 Контрагент.НаименованиеПолное);
		СтруктураПолучателя.Вставить("ИсточникКонтактнойИнформации", Контрагент);
		
		СписокПолучателей.Добавить(СтруктураПолучателя);
		
	ИначеЕсли ВариантОтправки = "Телефон" Тогда

		СписокПолучателей = Новый СписокЗначений;
		СписокПолучателей.Добавить(Телефон);
		
	Иначе
		СписокПолучателей = Новый СписокЗначений;
	КонецЕсли;
	
	Возврат СписокПолучателей;
	
КонецФункции

#КонецОбласти

#Область РаботаССервисом

&НаСервере
Процедура ЗаполнитьДанныеОснованияПлатежаВСервисе()

	ДанныеОснованияПлатежа = Новый Структура("Статус, Сумма", "Новый", НастройкаСБП.ИтогПоЧеку);
	
	ДанныеОперации 		= ПереводыСБПc2b.ДанныеОперации(ОснованиеПлатежа);
	СуммаОплаты 		= ?(ДанныеОперации = Неопределено, 0, ДанныеОперации.СуммаОперации);

	Если СуммаОплаты > 0 
		И ЗначениеЗаполнено(НастройкаСБП.Интеграция) Тогда
		
		ДанныеОснованияПлатежаВСервисеОбработаны = Истина;
		ДанныеОснованияПлатежа.Сумма			 = СуммаОплаты;
		
		ИдентификаторОплаты						 = ПереводыСБПc2b.ДинамическаяСсылка(
														ОснованиеПлатежа,
														НастройкаСБП.Интеграция,
														НастройкаСБП);
		
		Если ИдентификаторОплаты.КодОшибки = "УжеОплачен" Тогда
			ДанныеОснованияПлатежа.Статус 	= "Оплачен";
		Иначе

			РезультатОперации = ПереводыСБПc2b.СтатусОплаты(ОснованиеПлатежа, НастройкаСБП.Интеграция, Ложь);
	
			Если РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполнена()  Тогда
				ДанныеОснованияПлатежа.Статус 	= "Оплачен";
			Иначе			
			
				ДанныеОснованияПлатежа.Статус 	= "НеОплачен";
				ПлатежнаяСсылка 				= РезультатОперации.ПлатежнаяСсылка;
			
				Если ОснованиеПлатежаИзменено(НастройкаСБП, ДанныеОснованияПлатежа) Тогда

					ТребуетсяОбновлениеДанныхВСервисе 	= Истина;
					ПлатежнаяСсылка 					= "";
			
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеОснованияПлатежаВСервисе = ДанныеОснованияПлатежа; 
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьФормированиеПлатежнойСсылки(Знач ОписаниеОповещения = Неопределено)
	
	ОчиститьСообщения();

	Если ТребуетсяОбновлениеДанныхВСервисе Тогда
		
		ПродолжениеВопроса = Новый ОписаниеОповещения("НачатьФормированиеПлатежнойСсылкиЗавершение", 
										ЭтотОбъект, 
										Новый Структура("ОписаниеОповещения", ОписаниеОповещения));
		
		ПоказатьВопрос(ПродолжениеВопроса, 
						НСтр("ru = 'Ранее отправленная ссылка станет неактуальной для подтверждения оплаты. Продолжить?'"), 
						РежимДиалогаВопрос.ДаНет);
						
        Возврат;
		
	КонецЕсли;
	
	НачатьФормированиеПлатежнойСсылкиФрагмент(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьФормированиеПлатежнойСсылкиЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = ДополнительныеПараметры.ОписаниеОповещения;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		НачатьФормированиеПлатежнойСсылкиФрагмент(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьФормированиеПлатежнойСсылкиФрагмент(Знач ОписаниеОповещения)
	
	Элементы.ДекорацияДлительнаяОперация.Видимость = Истина;
		
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
		
	Если ОписаниеОповещения <> Неопределено Тогда
		ДопПараметры = Новый Структура("ОписаниеОповещения", ОписаниеОповещения);
	КонецЕсли;
		
	РезультатВыполнения   = ПолучитьИдентификаторОплаты(НастройкаСБП, УникальныйИдентификатор);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучитьИдентификаторОплатыЗавершение", ЭтотОбъект, ДопПараметры);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершении, ПараметрыОжидания);

КонецПроцедуры

&НаКлиенте
Процедура КопироватьСсылкуВБуфер()
		
	ЭтотОбъект.БуферОбмена = СтрШаблон(
	
	"<!DOCTYPE html>
	|<html>
	|	<body onload='copy()'>
	|		<input id='input' type='text'/>
	|		<script>
	|			function copy() {
	|				var text = '%1';
	|				var ua = navigator.userAgent;
	|				if (ua.search(/MSIE/) > 0 || ua.search(/Trident/) > 0) {
	|					window.clipboardData.setData('Text', text);
	|				} else {
	|					var copyText = document.getElementById('input');
	|					copyText.value = text;
	|					copyText.select();
	|					document.execCommand('copy');
	|				}
	|			}
	|		</script>
	|	</body>
	|</html>", ПлатежнаяСсылка);
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Ссылка получена'"),, 
		НСтр("ru = 'Ссылка для оплаты через СБП скопирована в буфер обмена'"));
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОснованиеПлатежаИзменено(Знач НастройкаСБП, Знач ДанныеОснованияПлатежаВСервисе)
	
	ОснованиеПлатежаИзменено = Ложь;
	
	Если ДанныеОснованияПлатежаВСервисе.Статус <> "Новый" 
		И ДанныеОснованияПлатежаВСервисе.Сумма <> НастройкаСБП.ИтогПоЧеку Тогда
		ОснованиеПлатежаИзменено = Истина;
	КонецЕсли;
	
	Возврат ОснованиеПлатежаИзменено;
	
КонецФункции

#КонецОбласти

#Область РаботаССервисомВФоне

&НаСервереБезКонтекста
Функция ПолучитьИдентификаторОплаты(Знач НастройкаСБП, Знач ИдентификаторФормы)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Формирование идентификатора оплаты.'");
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"ИнтеграцияСПлатежнымиСистемамиУНФ.ИдентификаторОплатыВПлатежнойСистеме",
		НастройкаСБП,
		ПараметрыВыполнения);
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьИдентификаторОплатыЗавершение(Знач Результат, Знач ДопПараметры) Экспорт
	
	Элементы.ДекорацияДлительнаяОперация.Видимость = Ложь;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатОперации = РезультатФоновогоЗаданияИзВременногоХранилища(Результат.АдресРезультата);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатОперации.СообщениеОбОшибке);
	Иначе
		
		ПлатежнаяСсылка 							= РезультатОперации.QRКод;
		
		Если ЗначениеЗаполнено(ПлатежнаяСсылка) Тогда

			ТребуетсяОбновлениеДанныхВСервисе 			= Ложь;
			
			ДанныеОснованияПлатежаВСервисе.Статус		= "НеОплачен";
			ДанныеОснованияПлатежаВСервисеОбработаны    = Истина;
			
		КонецЕсли;
		
		УправлениеЭлементамиФормыПоДанным();
		
	КонецЕсли;
	
	Если ДопПараметры <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДопПараметры.ОписаниеОповещения, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РезультатФоновогоЗаданияИзВременногоХранилища(Адрес)
	
	Результат = ПолучитьИзВременногоХранилища(Адрес);
	УдалитьИзВременногоХранилища(Адрес);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура УправлениеЭлементамиФормыПоПодсистемам(КлючПоложенияОкна = "")
	
	ЕстьЭлектроннаяПочта = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями");
	ЕстьОтправкаSMS = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS");
	ИспользуютсяШаблоны = НастройкиШаблонов.Используется;
	
	ЕстьВыборВариантаОтправки = ЕстьЭлектроннаяПочта И ЕстьОтправкаSMS;
	
	Элементы.ГруппаВариантОтправкиЭлектроннаяПочта.Видимость = ЕстьЭлектроннаяПочта;
	Элементы.НадписьВариантОтправкиЭлектроннаяПочта.Видимость = Не ЕстьВыборВариантаОтправки;
	Элементы.ВариантОтправкиЭлектроннаяПочта.Видимость = ЕстьВыборВариантаОтправки;
	
	Элементы.ГруппаВариантОтправкиТелефон.Видимость = ЕстьОтправкаSMS;
	Элементы.НадписьВариантОтправкиТелефон.Видимость = Не ЕстьВыборВариантаОтправки;
	Элементы.ВариантОтправкиТелефон.Видимость = ЕстьВыборВариантаОтправки;
	
	Если Не (ЕстьВыборВариантаОтправки ИЛИ ИспользуютсяШаблоны) Тогда
		
		Элементы.ГруппаВариантОтправки.Видимость = Ложь;
		Элементы.Переместить(Элементы.ОтправитьСсылку, Элементы.ГруппаСформироватьСсылку);
		Элементы.ОтправитьСсылку.Заголовок = НСтр("ru = 'Отправить покупателю'");
		
	КонецЕсли;
	
	Если Не ИспользуютсяШаблоны Тогда
		Элементы.ГруппаВариантОтправки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		Элементы.ГруппаВариантОтправкиПереключатели.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		Элементы.ШаблонСообщенияЭлектроннаяПочта.Видимость = Ложь;
		Элементы.ШаблонСообщенияТелефон.Видимость = Ложь;
	КонецЕсли;
	
	КлючПоложенияОкна = КлючПоложенияОкна 
		+ Строка(Элементы.ГруппаВариантОтправки.Видимость)
		+ Строка(Элементы.ГруппаВариантОтправки.Группировка)
		+ Строка(Элементы.ГруппаВариантОтправкиЭлектроннаяПочта.Видимость)
		+ Строка(Элементы.ГруппаВариантОтправкиТелефон.Видимость);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормыПоДанным(КлючПоложенияОкна = "", ПроверитьПодключениеКСервису = Ложь)
	
	Если ПроверитьПодключениеКСервису Тогда
		НастроитьФормуПослеПроверкиДоступа();
	КонецЕсли;
	
	Если МагазинПодключен
		И Не ДанныеОснованияПлатежаВСервисеОбработаны Тогда
		
		Элементы.СформироватьСсылку.ЦветТекста = ЦветаСтиля.ЦветТекстаКнопки;
		Элементы.СформироватьСсылку.Заголовок = НСтр("ru = 'Ожидание ответа...'");
		
		Элементы.ДекорацияПояснениеКФорме.Заголовок = НСтр("ru = 'Ожидание ответа сервиса о текущем состоянии счета.'");
		Элементы.ДекорацияПояснениеКФорме.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
		
		Элементы.Страницы.ТолькоПросмотр = Истина;
		Элементы.СформироватьСсылку.Доступность = Ложь;
		Элементы.ОтправитьСсылку.Доступность = Ложь;
		Элементы.КопироватьВБуфер.Доступность = Ложь;
		Элементы.ПоказатьQRКод.Доступность = Ложь;
		
		Возврат;
		
	КонецЕсли;
	
	Если Не МагазинПодключен Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Страницы.ТолькоПросмотр = Ложь;
	Элементы.СформироватьСсылку.Доступность = Истина;
	Элементы.ОтправитьСсылку.Доступность = Истина;
	Элементы.КопироватьВБуфер.Доступность = Истина;
	Элементы.ПоказатьQRКод.Доступность = Истина;
	
	// Управление кнопкой "Сформировать ссылку"
	Если ЗначениеЗаполнено(ПлатежнаяСсылка) Тогда
		
		Если ТребуетсяОбновлениеДанныхВСервисе Тогда
			Элементы.СформироватьСсылку.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
			Элементы.СформироватьСсылку.Доступность = Истина;
		Иначе 
			Элементы.СформироватьСсылку.ЦветТекста = ЦветаСтиля.ЦветТекстаКнопки;
			Элементы.СформироватьСсылку.Доступность = Ложь;
		КонецЕсли; 
		
		Элементы.СформироватьСсылку.Заголовок = НСтр("ru = 'Обновить данные'");
	Иначе
		
		Элементы.СформироватьСсылку.Доступность = Истина;
		Элементы.СформироватьСсылку.Заголовок = НСтр("ru = 'Сформировать ссылку'");
		
	КонецЕсли;
	
	// Управление заголовком формы
	
	Если ТребуетсяОбновлениеДанныхВСервисе Тогда
		Элементы.ДекорацияПояснениеКФорме.Заголовок = 
			НСтр("ru = 'Внимание! Счет был изменен после формирования ссылки для его оплаты. Требуется обновление данных.'");
		
		Элементы.ДекорацияПояснениеКФорме.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
 	
	Иначе 
		
		Если ДанныеОснованияПлатежаВСервисе.Статус = "Оплачен" Тогда
			Элементы.ДекорацияПояснениеКФорме.Заголовок = 
				НСтр("ru = 'Ссылка для оплаты счета была сформирована и отправлена покупателю. Счет оплачен.'");
		ИначеЕсли ДанныеОснованияПлатежаВСервисе.Статус = "ОплаченОжиданиеЧека" Тогда		
			Элементы.ДекорацияПояснениеКФорме.Заголовок = 
				НСтр("ru = 'Ссылка для оплаты счета была сформирована и отправлена покупателю. Счет оплачен. Ожидается доставка чека.'");
		Иначе 
			Если ЗначениеЗаполнено(ПлатежнаяСсылка) Тогда // Ссылка сформирована
				Элементы.ДекорацияПояснениеКФорме.Заголовок = 
					НСтр("ru = 'Ссылка для оплаты счета сформирована и готова к отправке покупателю.'");
			Иначе 
				Элементы.ДекорацияПояснениеКФорме.Заголовок = 
						НСтр("ru = 'Сформируйте ссылку для оплаты счета и отправьте ее покупателю.'");
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ДекорацияПояснениеКФорме.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
		
	КонецЕсли;
	
	Если ДанныеОснованияПлатежаВСервисе.Статус = "Оплачен"
		ИЛИ ДанныеОснованияПлатежаВСервисе.Статус = "ОплаченОжиданиеЧека" Тогда
		
		Элементы.Страницы.ТолькоПросмотр = Истина;
		Элементы.СформироватьСсылку.Доступность = Ложь;
		Элементы.ОтправитьСсылку.Доступность = Ложь;
		Элементы.КопироватьВБуфер.Доступность = Ложь;
		Элементы.ПоказатьQRКод.Доступность = Ложь;
		
		Элементы.ДекорацияПояснениеКФорме.ЦветФона = ЦветаСтиля.ЦветФонаПодсказки;
		Элементы.ДекорацияПояснениеКФорме.ЦветТекста = WebЦвета.Черный;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиФормы

&НаСервереБезКонтекста
Процедура СохранитьШаблоныПоУмолчанию(ОснованиеПлатежа, ШаблонСообщенияЭлектроннаяПочта, ШаблонСообщенияТелефон)
				
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ОснованиеПлатежа)) Тогда
		ПредставлениеОснования = ОснованиеПлатежа.Метаданные().ПолноеИмя();	
	Иначе
		ПредставлениеОснования = ОснованиеПлатежа;
	КонецЕсли;
	
	// Шаблоны электронной почты
	
	КлючНастроек = "ШаблоныСообщенийЭлектроннойПочты";
	
	Настройки = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("ФормаПодготовкиПлатежнойСсылкиСБП", КлючНастроек);
	
	Если Настройки = Неопределено Тогда
		ШаблоныПоУмолчанию = Новый Соответствие();
	Иначе
		ШаблоныПоУмолчанию = Настройки;
	КонецЕсли;
	
	ШаблоныПоУмолчанию.Вставить(ПредставлениеОснования, ШаблонСообщенияЭлектроннаяПочта);
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("ФормаПодготовкиПлатежнойСсылкиСБП", КлючНастроек, ШаблоныПоУмолчанию);
	
	// Шаблоны SMS сообщений
	
	КлючНастроек = "ШаблоныСообщенийSMS";
	
	Настройки = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("ФормаПодготовкиПлатежнойСсылкиСБП", КлючНастроек);
	
	Если Настройки = Неопределено Тогда
		ШаблоныПоУмолчанию = Новый Соответствие();
	Иначе
		ШаблоныПоУмолчанию = Настройки;
	КонецЕсли;
	
	ШаблоныПоУмолчанию.Вставить(ПредставлениеОснования, ШаблонСообщенияТелефон);
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("ФормаПодготовкиПлатежнойСсылкиСБП", КлючНастроек, ШаблоныПоУмолчанию);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьШаблоныПоУмолчанию()
	
	Если НастройкиШаблонов.Используется 	
		И ЗначениеЗаполнено(ОснованиеПлатежа) Тогда
		
		Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ОснованиеПлатежа)) Тогда
			ПредставлениеОснования = ОснованиеПлатежа.Метаданные().ПолноеИмя();	
		Иначе
			ПредставлениеОснования = ОснованиеПлатежа;
		КонецЕсли;
		
		// Шаблоны электронной почты
		
		Настройки = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("ФормаПодготовкиПлатежнойСсылкиСБП", "ШаблоныСообщенийЭлектроннойПочты");
		
		Если Настройки <> Неопределено
			И ТипЗнч(Настройки) = Тип("Соответствие")
			И Настройки[ПредставлениеОснования] <> Неопределено Тогда
			
			ШаблонСообщенияЭлектроннаяПочта = Настройки[ПредставлениеОснования];
			
		КонецЕсли;
		
		// Шаблоны SMS сообщений
		
		Настройки = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("ФормаПодготовкиПлатежнойСсылкиСБП", "ШаблоныСообщенийSMS");
		
		Если Настройки <> Неопределено
			И ТипЗнч(Настройки) = Тип("Соответствие")
			И Настройки[ПредставлениеОснования] <> Неопределено Тогда
			
			ШаблонСообщенияТелефон = Настройки[ПредставлениеОснования];
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ПечатьПречекаЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда  
		ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатВыполнения.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НастройкиИнтеграцииПайМастер()
	
	#Область ТекстЗапроса      
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НастройкиИнтеграцииСПлатежнымиСистемами.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиИнтеграцииСПлатежнымиСистемами
	|ГДЕ
	|	НастройкиИнтеграцииСПлатежнымиСистемами.ИдентификаторУчастника = ""PayMaster""
	|	И НастройкиИнтеграцииСПлатежнымиСистемами.Используется";
	#КонецОбласти
	
	Результат = Новый Структура;
	Результат.Вставить("ИнтеграцияДоступнаСБПc2b", 	 Истина);
	Результат.Вставить("ПараметрыУчастникаСБП ", 	 Неопределено);

	Запрос 		  = Новый Запрос(ТекстЗапроса);
	ТорговыеТочки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ПараметрыУчастникаСБП = Новый Структура;
	ПараметрыУчастникаСБП.Вставить("Наименование",  		НСтр("ru = 'PayMaster (ООО ""Пэймастер"")'")); // АПК:1036 для обратной совместимости
	ПараметрыУчастникаСБП.Вставить("НастройкаПодключения", 	ТорговыеТочки);
	ПараметрыУчастникаСБП.Вставить("Идентификатор", 		"PayMaster");
	
	Результат.ПараметрыУчастникаСБП = ПараметрыУчастникаСБП;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура НастроитьФормуПослеПроверкиДоступа()

	Если ПолучитьФункциональнуюОпцию("УчетПоНесколькимПодразделениям") Тогда
		НастроенныеПодключения = ИнтеграцияСПлатежнымиСистемамиУНФ.НастройкиИнтеграции(НастройкаСБП.Организация, НастройкаСБП.ТорговыйОбъект);
	Иначе
		НастроенныеПодключения = ИнтеграцияСПлатежнымиСистемамиУНФ.НастройкиИнтеграции(НастройкаСБП.Организация);
	КонецЕсли;

	Если НастроенныеПодключения <> Неопределено Тогда

		НастройкиИнтеграции = СистемаБыстрыхПлатежей.ПараметрыПодключенияПоБИК(НастройкаСБП.БИКРасчетногоСчета);
		НастройкиИнтеграции = ?(НастройкиИнтеграции.ИнтеграцияДоступна, НастройкиИнтеграции, НастройкиИнтеграцииПайМастер());
								
		ЗаполнитьЗначенияСвойств(НастройкаСБП, НастройкиИнтеграции);
		
		Для Каждого СтрокаПодключения Из НастроенныеПодключения Цикл
			
			Если НастройкаСБП.ПараметрыУчастникаСБП.НастройкаПодключения.Найти(СтрокаПодключения.Интеграция) <> Неопределено Тогда
				Интеграция = СтрокаПодключения.Интеграция;
				Прервать
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	МагазинПодключен = Интеграция <> Неопределено;
	
	НастройкаСБП.Вставить("Интеграция", Интеграция);
	
	Если Не МагазинПодключен Тогда

		Элементы.ДекорацияПояснениеКФорме.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru = 'Не настроено подключение к системе быстрых платежей.'") 
			+ НСтр("ru = 'Необходимо <a href = ""ОткрытьНастройку"">Подключить доступ</a>'"));

		Элементы.ДекорацияПояснениеКФорме.ЦветТекста = ЦветаСтиля.ЦветТекстаКнопки;
		
	КонецЕсли;
	
	Элементы.КартинкаПредупреждение.Видимость      = Не МагазинПодключен;
	Элементы.ГруппаПлатежнаяСсылка.Доступность     = МагазинПодключен;
	Элементы.ГруппаВариантОтправки.Доступность     = МагазинПодключен;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыНастроек(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеЭлементамиФормыПоДанным(, Истина);
	
	Если МагазинПодключен Тогда
		НачатьФормированиеПлатежнойСсылки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьQRКОд(Интеграция, ИдентификаторОплаты, УникальныйИдентификатор)
	
	ДанныеQRКодаСтруктура = ИнтеграцияСПлатежнымиСистемамиУНФ.СформироватьДанныеQRКода(
		Интеграция,
		ИдентификаторОплаты,
		УникальныйИдентификатор,
		220);

	Возврат ДанныеQRКодаСтруктура.ДанныеQRКода;		
	
КонецФункции

#КонецОбласти

#КонецОбласти

