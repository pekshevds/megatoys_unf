
// Процедура - обработчик команды "ОткрытьКассовуюСмену".
//
&НаКлиенте
Процедура ОткрытьКассовуюСмену(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		ТекстОшибки = НСтр("ru='Выберите кассу ККМ!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, ,"КассаККМ");
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	
	ПараметрыКассыККМ = УправлениеНебольшойФирмойПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КассаККМ", КассаККМ);
	ДополнительныеПараметры.Вставить("СтруктурнаяЕдиница", ПараметрыКассыККМ.СтруктурнаяЕдиница);
	ДополнительныеПараметры.Вставить("Организация", ПараметрыКассыККМ.Организация);
	
	Если ИспользоватьПодключаемоеОборудование И НЕ ИспользоватьБезПодключенияОборудования И ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		ЭтаФорма.Доступность = Ложь;
		
		ПараметрыОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
		РеквизитыКассира = РозничныеПродажиСервер.ПолучитьРеквизитыКассира(ПользователиКлиент.ТекущийПользователь());
		Если РеквизитыКассира.ИмяКассираИДолжность <> "" Тогда
			ПараметрыОперации.Кассир = РеквизитыКассира.ИмяКассираИДолжность;
			ПараметрыОперации.КассирИНН = РеквизитыКассира.КассирИНН;
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ОткрытьКассовуюСменуЗавершение", ЭтотОбъект);    
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьОткрытиеСменыНаФискальномУстройстве(
			Оповещение, 
			УникальныйИдентификатор,  
			ИдентификаторУстройства,
			ПараметрыОперации);
		
	Иначе
		Результат = ОткрытьКассовуюСменуНаСервере(КассаККМ, ОписаниеОшибки);
		Если НЕ Результат Тогда
			ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка.
			                            |Смена не открыта.
			                            |Дополнительное описание:
			                            |%ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписков(КассаККМ);
	КонецЕсли;
		
КонецПроцедуры

// Процедура - обработчик команды "ЗакрытьКассовуюСмену".
//
&НаКлиенте
Процедура ЗакрытьКассовуюСмену(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		ТекстОшибки = НСтр("ru='Выберите кассу ККМ!'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстОшибки,
			,
			"КассаККМ");
		
		Возврат;
	КонецЕсли;
	
	ПараметрыКассыККМ = УправлениеНебольшойФирмойПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	Если Не ПараметрыКассыККМ.СоздаватьВыемку Тогда
		ЗакрытьКассовуюСменуПродолжение(Истина, Новый Структура);
	Иначе
		Оповещение = Новый ОписаниеОповещения("ЗакрытьКассовуюСменуПродолжение", ЭтотОбъект);
		ВыемкаДенег(Неопределено, ПараметрыКассыККМ, Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьКассовуюСменуПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыКассыККМ = УправлениеНебольшойФирмойПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	РезультатПроверки = ПредварительнаяПроверкаЧеков(КассаККМ);
	Если РезультатПроверки.Ошибки Тогда
		// Есть непробитые чеки перед закрытием смены
		Оповещение = Новый ОписаниеОповещения("ОткрытиеСпискаНепробитыхЧековЗавершение", ЭтотОбъект); 
		СтруктураОткрытия = Новый Структура;
		СтруктураОткрытия.Вставить("НепробитыеЧеки", РезультатПроверки.НепробитыеЧеки);
		СтруктураОткрытия.Вставить("ЧекиБезФискальногоНомера", РезультатПроверки.ЧекиБезФискальногоНомера);
		СтруктураОткрытия.Вставить("ОтчетОРозничныхПродажах", РезультатПроверки.ОтчетОРозничныхПродажах);
		ОткрытьФорму("Документ.ЧекККМ.Форма.СписокНепробитыхЧеков", СтруктураОткрытия, ЭтотОбъект, , , , Оповещение, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьБезПодключенияОборудования Тогда
		СформироватьОтчетОРозничныхПродажах(ИспользоватьБезПодключенияОборудования);
	ИначеЕсли ИспользоватьПодключаемоеОборудование И ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		
		ПараметрыОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
		РеквизитыКассира = РозничныеПродажиСервер.ПолучитьРеквизитыКассира(ПользователиКлиент.ТекущийПользователь());
		Если РеквизитыКассира.ИмяКассираИДолжность <> "" Тогда
			ПараметрыОперации.Кассир = РеквизитыКассира.ИмяКассираИДолжность;
			ПараметрыОперации.КассирИНН = РеквизитыКассира.КассирИНН;
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ПечатьФискальногоОтчетаЗавершение", ЭтотОбъект);
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьЗакрытиеСменыНаФискальномУстройстве(
			Оповещение,
			УникальныйИдентификатор,
			ИдентификаторУстройства,  
			ПараметрыОперации);
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредварительнаяПроверкаЧеков(КассаККМ)
	
	ОписаниеОшибки = "";
	Результат = Новый Структура;
	Результат.Вставить("Ошибки", Ложь);
	Результат.Вставить("НеПробитыеЧеки", Новый Массив);
	Результат.Вставить("ЧекиБезФискальногоНомера", Новый Массив);
	Результат.Вставить("ОтчетОРозничныхПродажах", Неопределено);
	
	СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(КассаККМ);
	Если НЕ ЗначениеЗаполнено(СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах) Тогда
		// Если нет связи кассовой смены и отчета, создаем новый отчет.
		Если ЗначениеЗаполнено(СтруктураСостояниеКассовойСмены.КассоваяСмена) Тогда
			ОтчетОРозничныхПродажахОбъект = РозничныеПродажиСервер.СоздатьОтчетОРозничныхПродажах(
				СтруктураСостояниеКассовойСмены.КассоваяСмена, ОписаниеОшибки);
		Иначе
			Возврат Результат;
		КонецЕсли;
		Если ОтчетОРозничныхПродажахОбъект <> Неопределено Тогда
			ОтчетОРозничныхПродажах = ОтчетОРозничныхПродажахОбъект.Ссылка;
			СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах = ОтчетОРозничныхПродажах; 
		КонецЕсли;
	Иначе
		ОтчетОРозничныхПродажах = СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах;
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		
		Результат.Вставить("ОтчетОРозничныхПродажах", ОтчетОРозничныхПродажах);
		
		Если НЕ Константы.УдалятьНепробитыеЧекиПриЗакрытииКассовойСмены.Получить() Тогда
			НепробитыеЧеки = РозничныеПродажиСервер.НепробитыеЧекиПередЗакрытиемСмены(ОтчетОРозничныхПродажах);
			Если НепробитыеЧеки.Количество() > 0 Тогда
				Результат.Вставить("Ошибки", Истина);
				Результат.Вставить("НепробитыеЧеки", НепробитыеЧеки);
			КонецЕсли;
		КонецЕсли;
		
		ЧекиБезФискальногоНомера = РозничныеПродажиСервер.ЧекиБезФискальногоНомераПередЗакрытиемСмены(ОтчетОРозничныхПродажах);
		Если ЧекиБезФискальногоНомера.Количество() > 0 Тогда
			Результат.Вставить("Ошибки", Истина);
			Результат.Вставить("ЧекиБезФискальногоНомера", ЧекиБезФискальногоНомера);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПриЗавершенииФормированияОтчетаОРозничныхПродажах(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыПриложения.Вставить("РозничныеПродажи.ОперацияЗакрытияКассовойСмены", Неопределено);
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	ИспользоватьБезПодключенияОборудования = ДополнительныеПараметры;
	
	СтруктураРезультата	= ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	ОписаниеОшибки		= СтруктураРезультата.ОписаниеОшибки;
	Документ			= СтруктураРезультата.ОтчетОРозничныхПродажах;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки)
	   И ИспользоватьБезПодключенияОборудования Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки);
	ИначеЕсли ЗначениеЗаполнено(ОписаниеОшибки)
		 И НЕ ИспользоватьБезПодключенияОборудования Тогда
		ТекстСообщения = НСтр(
			"ru = 'При формировании отчета о розничных продажах возникли ошибки.
			|Дополнительное описание:
			|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// 2. Заполнение параметров кассовой смены.
	Результат = ЗакрытьКассовуюСменуНаСервере(КассаККМ, ОписаниеОшибки); 
	Если НЕ Результат Тогда
		ТекстСообщения = НСтр("ru = 'При закрытии смены произошла ошибка.
		                            |Смена не закрыта.
		                            |Дополнительное описание:
		                            |%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Все результирующие документы выводим пользователю.
	Если ЗначениеЗаполнено(Документ) Тогда
		ОткрытьФорму("Документ.ОтчетОРозничныхПродажах.ФормаОбъекта", Новый Структура("Ключ", Документ));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтруктураРезультата, "АктыСписанияЕГАИС")
		И СтруктураРезультата.АктыСписанияЕГАИС.Количество() Тогда
		Для Каждого АктСписанияЕГАИС Из СтруктураРезультата.АктыСписанияЕГАИС Цикл
			ПоказатьЗначение(,АктСписанияЕГАИС);
		КонецЦикла;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтруктураРезультата, "СписанияПодарков") Тогда
		Для каждого ДокСписание Из СтруктураРезультата.СписанияПодарков Цикл
			ПоказатьЗначение(,ДокСписание);
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписков(КассаККМ);
	Оповестить("ОбновитьФормыПослеСнятияZОтчета");
	
	Если СтруктураРезультата.ЧекиСДвижениями.Количество() > 0 Тогда
		// Есть чеки с движениями после закрытия смены
		СтруктураОткрытия = Новый Структура;
		СтруктураОткрытия.Вставить("ЧекиСДвижениями", СтруктураРезультата.ЧекиСДвижениями);
		СтруктураОткрытия.Вставить("ОтчетОРозничныхПродажах", СтруктураРезультата.ОтчетОРозничныхПродажах);
		ОткрытьФорму("Документ.ЧекККМ.Форма.СписокНепробитыхЧеков", СтруктураОткрытия, ЭтотОбъект, , , , , 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
	Если СверятьИтогиНаЭТПриЗакрытииСмены Тогда
		СписокЭТДляВыполненияСверки = СписокЭТДляВыполненияСверки(КассаККМ);
		Для Каждого ЭлементСписка Из СписокЭТДляВыполненияСверки Цикл
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьСверкуИтоговЗавершение", ЭтотОбъект);
			ОборудованиеПлатежныеСистемыКлиент.НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале(
				ОписаниеОповещения, УникальныйИдентификатор, ЭлементСписка.Значение);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеСпискаНепробитыхЧековЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения = Истина Тогда
		ЗакрытьКассовуюСменуПродолжение(Истина, Новый Структура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьФискальногоОтчетаЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина; // Разблокировка интерфейса пользователя.
	
	Если РезультатВыполнения.Результат Тогда
		СформироватьОтчетОРозничныхПродажах(Ложь);
	Иначе
		ТекстСообщения = НСтр(
			"ru = 'При закрытии смены на фискальном регистраторе произошла ошибка.
			|""%ОписаниеОшибки%""
			|Отчет на фискальном регистраторе не сформирован.'");
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%ОписаниеОшибки%",
			РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписков(КассаККМ);
		Оповестить("ОбновитьФормыПослеСнятияZОтчета");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды "ВнесениеДенег".
//
&НаКлиенте
Процедура ВнесениеДенегЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено И ДополнительныеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВносимаяСумма = ?(Результат = Неопределено, ДополнительныеПараметры.ВносимаяСумма, Результат);
	
	Если (Результат <> Неопределено) Тогда
		ПараметрыКассыККМ = УправлениеНебольшойФирмойПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
		ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
		
		Доступность = Ложь; // Блокируем интерфейс пользователя.
		
		Если ИдентификаторУстройства <> Неопределено Тогда
			ПараметрыОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыИнкассации();
			ПараметрыОперации.ТипИнкассации = 1;
			ПараметрыОперации.Сумма = ВносимаяСумма;
			ОповещениеПриЗавершении = Новый ОписаниеОповещения("ИнкассацияНаФискальномУстройствеЗавершение", ЭтотОбъект);
			ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьИнкассациюНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства, ПараметрыОперации);
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры // ВнесениеДенег()

// Процедура - обработчик команды "ИзъятиеДенег".
//
&НаКлиенте
Процедура ВыемкаДенег(Команда, ПараметрыКассыККМ = Неопределено, ОповещениеЗакрытияСмены = Неопределено)
	
	Если ПараметрыКассыККМ = Неопределено Тогда
		ПараметрыКассыККМ = УправлениеНебольшойФирмойПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	КонецЕсли;
	
	ИзымаемаяСумма = РассчитатьСуммуВыемки(СтруктураСостояниеКассовойСмены, ПараметрыКассыККМ);
	ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИзымаемаяСумма", ИзымаемаяСумма);
	ДополнительныеПараметры.Вставить("ОповещениеЗакрытияСмены", ОповещениеЗакрытияСмены);
	Если ОповещениеЗакрытияСмены <> Неопределено И ПараметрыКассыККМ.СоздаватьПоступлениеВКассу Тогда
		ОповещениеПоступленияВКассу = Новый ОписаниеОповещения("СоздатьПоступлениеВКассу", ЭтотОбъект, ПараметрыКассыККМ.КассаДляРозничнойВыручки);
		ДополнительныеПараметры.Вставить("ОповещениеПоступленияВКассу", ОповещениеПоступленияВКассу);
	КонецЕсли;
	
	Если ИспользоватьБезПодключенияОборудования Тогда
		ОбработкаЗавершения = Новый ОписаниеОповещения("СформироватьДокументВыемки", ЭтотОбъект, ДополнительныеПараметры);
	ИначеЕсли МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		ОбработкаЗавершения = Новый ОписаниеОповещения("ВыемкаДенегЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
		
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки И СтруктураСостояниеКассовойСмены.СуммаАгентскихПлатежей > 0 Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ОбщаяСумма", ИзымаемаяСумма);
		ПараметрыОткрытия.Вставить("СуммаАгентскихПлатежей", СтруктураСостояниеКассовойСмены.СуммаАгентскихПлатежей);
		ПараметрыОткрытия.Вставить("ДеньгиПоДоговорамПлатежногоАгента", СтруктураСостояниеКассовойСмены.ДеньгиПоДоговорамПлатежногоАгента);
		
		ОткрытьФорму("ОбщаяФорма.ВводПараметровВыемкиДенежныхСредств",ПараметрыОткрытия,,,,,ОбработкаЗавершения);
		
	Иначе
		
		ЗаголовокОкна = НСтр("ru='Сумма выемки, %Валюта%'");
		ЗаголовокОкна = СтрЗаменить(
			ЗаголовокОкна,
			"%Валюта%",
			СтруктураСостояниеКассовойСмены.ВалютаДокументаПредставление);
		
		ПоказатьВводЧисла(ОбработкаЗавершения, ИзымаемаяСумма, ЗаголовокОкна, 15, 2);
		
	КонецЕсли;
	
КонецПроцедуры // ВыемкаДенег()

// Процедура - обработчик команды "ИзъятиеДенег".
//
&НаКлиенте
Процедура ВыемкаДенегЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки И ТипЗнч(Результат) = Тип("Структура") Тогда
		ИзымаемаяСумма = Результат.ИзымаемаяСумма;
	Иначе
		ИзымаемаяСумма = ?(Результат = Неопределено, ДополнительныеПараметры.ИзымаемаяСумма, Результат);
	КонецЕсли;
	
	Если (Результат <> Неопределено) И (ИзымаемаяСумма <> 0) Тогда
		
		Если ИзымаемаяСумма > СтруктураСостояниеКассовойСмены.НаличностьВКассе Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Сумма выемки превышает остаток в кассе. Выемка не произведена'"));
			Если ДополнительныеПараметры.Свойство("ОповещениеЗакрытияСмены") И ДополнительныеПараметры.ОповещениеЗакрытияСмены <> Неопределено Тогда
				ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗакрытияСмены, Результат);
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыКассыККМ = УправлениеНебольшойФирмойПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
		ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
		
		Доступность = Ложь; // Блокируем интерфейс пользователя.
		
		Если ИдентификаторУстройства <> Неопределено Тогда
			ПараметрыОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыИнкассации();
			ПараметрыОперации.ТипИнкассации = 0;
			ПараметрыОперации.Сумма = ИзымаемаяСумма;
			ПараметрыОповещения = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрыОперации);
			ПараметрыОповещения.Вставить("СоздатьВыемкуНаличных", Истина);
			Если ДополнительныеПараметры.Свойство("ОповещениеЗакрытияСмены") Тогда
				ПараметрыОповещения.Вставить("ОповещениеЗакрытияСмены", ДополнительныеПараметры.ОповещениеЗакрытияСмены);
			КонецЕсли;
			Если ДополнительныеПараметры.Свойство("ОповещениеПоступленияВКассу") Тогда
				ПараметрыОповещения.Вставить("ОповещениеПоступленияВКассу", ДополнительныеПараметры.ОповещениеПоступленияВКассу);
			КонецЕсли;
			Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки И ТипЗнч(Результат) = Тип("Структура") Тогда
				ПараметрыОповещения.Вставить("ДеньгиКВыемке", Результат.ДеньгиКВыемке);
			КонецЕсли;
			ОповещениеПриЗавершении = Новый ОписаниеОповещения("ИнкассацияНаФискальномУстройствеЗавершение", ЭтотОбъект, ПараметрыОповещения);
			ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьИнкассациюНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства, ПараметрыОперации);
		КонецЕсли;
		
	Иначе
		
		Если ДополнительныеПараметры.Свойство("ОповещениеЗакрытияСмены") И ДополнительныеПараметры.ОповещениеЗакрытияСмены <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗакрытияСмены, Результат);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ВыемкаДенегЗавершение()

&НаКлиенте
Процедура ЗавершитьВыбораКассыПриОткрытииДенежногоЯщика(ЗначениеВыбораКасса)
	
	Если НЕ ЗначениеЗаполнено(ЗначениеВыбораКасса) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКассыККМ = УправлениеНебольшойФирмойПовтИсп.ПолучитьПараметрыКассыККМ(ЗначениеВыбораКасса);
	ИдентификаторУстройстваФР = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	Если ИспользоватьПодключаемоеОборудование И НЕ ИспользоватьКассуККМБезПодключенияОборудования Тогда
		Оповещение = Новый ОписаниеОповещения("НачатьОткрытиеДенежногоЯщикаКомандаВыполнитьЗавершение", ЭтотОбъект);
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьОткрытиеДенежногоЯщика(Оповещение, ЭтотОбъект, ИдентификаторУстройстваФР);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОткрытиеДенежногоЯщикаКомандаВыполнитьЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДенежныйЯщик(Команда)
	
	Если Не ИспользоватьПодключаемоеОборудование Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Денежный ящик не может быть открыт."),
																	НСтр("ru = 'Подключаемое оборудование не используется.'"));
		Возврат;
	КонецЕсли;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораКассыПриОткрытииДенежногоЯщика", ЭтотОбъект);
		ЗначениеВыбораКасса = КассаККМ; //ВыбраннаяКассаККМ(ОбработчикОповещения);
		ЗавершитьВыбораКассыПриОткрытииДенежногоЯщика(ЗначениеВыбораКасса);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Устройство для печати чеков не подключено.'"))
	КонецЕсли;
	
КонецПроцедуры

// Процедура предназначается для обработки события "ПриАктивизацииСтроки" списка ЧекиККМ
//
&НаКлиенте
Процедура ЧекиККМПриАктивизацииСтрокиНаКлиенте()
	
	Если СтруктураСостояниеКассовойСмены = Неопределено Тогда
		ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписков(КассаККМ);
	КонецЕсли;
	
	Если РежимПросмотра Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЧекиККМ.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если НЕ ТекущиеДанные.Свойство("ГруппировкаСтроки")
			И ЗначениеЗаполнено(ТекущиеДанные.НомерЧекаККМ)
			И ЗначениеЗаполнено(СтруктураСостояниеКассовойСмены)
			И НЕ ТекущиеДанные.ЕстьЧекНаВозврат
			И СменаОткрыта
			И ТекущиеДанные.Тип <> Тип("ДокументСсылка.ЧекККМВозврат") Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ЧекиККМДокументЧекККМВозвратСоздатьНаОсновании",
				"Доступность",
				Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"КонтекстноеМенюЧекиККМДокументЧекККМВозвратСоздатьНаОсновании",
				"Доступность",
				Истина);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ЧекиККМДокументЧекККМВозвратСоздатьНаОсновании",
				"Доступность",
				Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"КонтекстноеМенюЧекиККМДокументЧекККМВозвратСоздатьНаОсновании",
				"Доступность",
				Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЧекиККМПриАктивизацииСтрокиНаКлиенте()

&НаКлиенте
Процедура ОткрытьФормуДляВыбораРасходаИзКассы(БезПодключения = Истина)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Касса", КассаККМ);
	
	Если БезПодключения Тогда
		ОткрытьФорму("Документ.РасходИзКассы.Форма.ФормаВнесенияНаличных",
			ПараметрыОткрытия,
			ЭтотОбъект,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОткрытьФорму("Документ.РасходИзКассы.Форма.ФормаВнесенияНаличных",
			ПараметрыОткрытия,
			ЭтотОбъект,,,,
			Новый ОписаниеОповещения("ВнесениеДенегЗавершение", ЭтотОбъект),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФискальнымУстройством(Команда)
	
	ОткрытьФорму("ОбщаяФорма.УправлениеФискальнымУстройством",, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьПодключаемоеОборудование = ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование");
	ИспользоватьАгентскиеПлатежиИРазделениеВыручки = ПолучитьФункциональнуюОпцию("ИспользоватьАгентскиеПлатежиИРазделениеВыручки");
	
	РежимПросмотра = Не ПравоДоступа("Редактирование", Метаданные.Документы.ЧекККМ)
		Или КассаККМ.ТипКассы = Перечисления.ТипыКассККМ.ККМED;
	
	// Настройка рабочего места
	РабочееМесто = МенеджерОборудованияВызовСервера.РабочееМестоКлиента();
	НастройкаРабочегоМеста = РабочееМестоКассираВызовСервера.ПолучитьНастройкуРМК(РабочееМесто);
	СверятьИтогиНаЭТПриЗакрытииСмены = НастройкаРабочегоМеста.СверятьИтогиНаЭТПриЗакрытииСмены;
	Элементы.ЧекиККМПереключитьСверкуИтогов.Пометка = СверятьИтогиНаЭТПриЗакрытииСмены;
	
	// КассаККМ по умолчанию
	// Определим, сохранялись ли настройки ранее.
	ПользовательСсылка = Пользователи.АвторизованныйПользователь();
	Если НЕ ЗначениеЗаполнено(ПользовательСсылка) Тогда
		ПользовательСсылка = Справочники.Пользователи.ПустаяСсылка();
		ПользовательИнформационнойБазы = "";
	Иначе
		ПользовательИнформационнойБазы = Обработки.НастройкиПользователей.ИмяПользователяИБ(ПользовательСсылка);
	КонецЕсли;
	Отбор = Новый Структура("Пользователь, КлючОбъекта", ПользовательИнформационнойБазы, "ЖурналДокументов.ЧекиККМ.Форма.ФормаСписка/КлючТекущихНастроекДанных");
	
	
	Если Параметры.Свойство("КассаККМ") И ЗначениеЗаполнено(Параметры.КассаККМ) Тогда
		КассаККМ = Параметры.КассаККМ;
		КассаККМИзПараметров = Параметры.КассаККМ;
		КассаККМОтборПриИзмененииНаСервере();
	Иначе
		ВыборкаНастроек = ХранилищеСистемныхНастроек.Выбрать(Отбор);
		
		Если НЕ ВыборкаНастроек.Следующий() Тогда
			// Если не сохранялись, то установим отбор по основной кассе. Иначе отработает обработчик "ПриЗагрузкеДанныхИзНастроекНаСервере".
			КассаККМ = Справочники.КассыККМ.ПолучитьКассуККМПоУмолчанию(Перечисления.ТипыКассККМ.ФискальныйРегистратор);
			
			Если НЕ КассаККМ.Пустая() Тогда
				КассаККМОтборПриИзмененииНаСервере();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Конец КассаККМ по умолчанию
	
	// Заказы покупателей в Рознице
	Элементы.ЕстьЗаказы.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле");
	Элементы.Заказ.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле");
	Элементы.Покупатель.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле");
	// Конец Заказы покупателей в Рознице
	
	ДинамическиеСпискиУНФ.ОтображатьТолькоВремяДляТекущейДаты(ЧекиККМ);
	
	ЭтоМобильныйКлиент = ОбщегоНазначения.ЭтоМобильныйКлиент();
	Если ЭтоМобильныйКлиент Тогда
		Если Параметры.Свойство("ЭтоРМК_МК") И Параметры.ЭтоРМК_МК Тогда
			Элементы.ЧекиККМ.ИспользованиеТекущейСтроки = ИспользованиеТекущейСтрокиТаблицы.ОтображениеВыделения;
		КонецЕсли;
		Элементы.УправлениеОборудованием_МК.Видимость = Истина;
		Элементы.УправлениеОборудованием.Видимость = Ложь;
	Иначе
		Элементы.УправлениеОборудованием_МК.Видимость = Ложь;
		Элементы.УправлениеОборудованием.Видимость = Истина;
	КонецЕсли;
	
	//НСПК
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОплатуСертификатамиНСПК") Тогда
		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Статус.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЧекиККМ.ОшибкаОтправкиНСПК");
		ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Ошибка отправки ФЭС НСПК'"));
		
		Если Параметры.Свойство("ОшибкиОтправкиНСПК") Тогда
			ЭлементОтбора = ЧекиККМ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ОшибкаОтправкиНСПК");
			ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.Использование    = Истина;
			ЭлементОтбора.ПравоеЗначение   = Истина;
			ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(КассаККМИзПараметров) Тогда
		КассаККМ = КассаККМИзПараметров;
	КонецЕсли;
	
	ОперацияЗакрытияКассовойСмены = ПараметрыПриложения["РозничныеПродажи.ОперацияЗакрытияКассовойСмены"];
	Если ОперацияЗакрытияКассовойСмены <> Неопределено Тогда
		ДлительнаяОперация = ОперацияЗакрытияКассовойСмены;
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Выполняется закрытие смены'");
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия  = "ОбновитьФормыПослеСнятияZОтчета" Тогда
		ОповеститьОбИзменении(Тип("ДокументСсылка.ЧекККМ"));
		ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписков(КассаККМ);
		ЧекиККМПриАктивизацииСтрокиНаКлиенте();
	ИначеЕсли ИмяСобытия = "ОбновитьФормуСпискаДокументовЧекККМ" Тогда
		ОповеститьОбИзменении(Тип("ДокументСсылка.ЧекККМ"));
		ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписков(КассаККМ);
		ЧекиККМПриАктивизацииСтрокиНаКлиенте();
	ИначеЕсли ИмяСобытия = "ОбновитьФормыПослеЗакрытияКассовойСмены" Тогда
		ОповеститьОбИзменении(Тип("ДокументСсылка.ЧекККМ"));
		ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписков(КассаККМ);
		ЧекиККМПриАктивизацииСтрокиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если НЕ (Параметры.Свойство("КассаККМ") И ЗначениеЗаполнено(Параметры.КассаККМ)) Тогда
		КассаККМ = Настройки.Получить("КассаККМ");
		
		// Нужно учесть, что RLS могли измениться и касса, которая раньше была доступна,
		// теперь может стать недоступной.
		Если ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписей") Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	КассыККМ.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.КассыККМ КАК КассыККМ
				|ГДЕ
				|	КассыККМ.Ссылка = &КассаККМ";
			
			Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если РезультатЗапроса.Пустой() Тогда
				КассаККМ = Справочники.КассыККМ.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
		ТолькоТекущаяСмена = Настройки.Получить("ТолькоТекущаяСмена");
		КассаККМОтборПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КассаККМОтборПриИзменении(Элемент)
	
	КассаККМОтборПриИзмененииНаСервере();
	
КонецПроцедуры // КассаОтборПриИзменении()

&НаКлиенте
Процедура ТолькоТекущаяСменаОтборПриИзменении(Элемент)

	ТолькоТекущаяСменаОтборПриИзмененииНаСервере();

КонецПроцедуры // ТолькоТекущаяСменаОтбор()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЧекиККМ

&НаКлиенте
Процедура ЧекиККМПриАктивизацииСтроки(Элемент)
	
	ЧекиККМПриАктивизацииСтрокиНаКлиенте();
	
КонецПроцедуры // ЧекиККМПриАктивизацииСтроки()

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("СозданиеФормыЧекККМ");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормыЧекККМ");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьЧек(Команда)
	
	Если СменаОткрыта Тогда
		ПараметрыОткрытия = Новый Структура("Основание", Новый Структура("КассаККМ", КассаККМ));
		ОткрытьФорму("Документ.ЧекККМ.ФормаОбъекта", ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры // СоздатьЧек()

&НаКлиенте
Процедура КассовыеСмены(Команда)
	
	ОткрытьФорму("Документ.КассоваяСмена.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура КорректировочныеЧеки(Команда)
	
	ОткрытьФорму("Документ.ЧекККМКоррекции.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетОРозничныхПродажах(ИспользоватьБезПодключенияОборудования) Экспорт
	
	// 1. Заполнение отчета о розничных продажах.
	ДлительнаяОперация = НачатьФормированиеОтчетаОРозничныхПродажах(КассаККМ);
	
	ПараметрыПриложения.Вставить("РозничныеПродажи.ОперацияЗакрытияКассовойСмены", ДлительнаяОперация);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Выполняется закрытие смены'");
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	
	Оповещение = Новый ОписаниеОповещения("ПриЗавершенииФормированияОтчетаОРозничныхПродажах", ЭтотОбъект, ИспользоватьБезПодключенияОборудования);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ВнесениеДенег(Команда)
	
	ПараметрыКассыККМ = УправлениеНебольшойФирмойПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	Если ИспользоватьБезПодключенияОборудования Тогда
		ОткрытьФормуДляВыбораРасходаИзКассы(Истина);
	ИначеЕсли МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		ОткрытьФормуДляВыбораРасходаИзКассы(Ложь);
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеКассовойСмены(Команда)
	
	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписков(КассаККМ);
	
КонецПроцедуры // ОбновитьСостояниеКассовойСмены()

&НаКлиенте
Процедура ПечатьТоварногоЧека(Команда)
	РозничныеПродажиКлиент.НапечататьТоварныйЧек(ЭтотОбъект,, "ЧекиККМ");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЧекВозврат(Команда)
	
	Если СменаОткрыта Тогда
		ПараметрыОткрытия = Новый Структура("Основание", Новый Структура("КассаККМ", КассаККМ));
		ОткрытьФорму("Документ.ЧекККМВозврат.ФормаОбъекта", ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьСверкуИтогов(Команда)
	
	ПереключитьСверкуИтоговНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПереключитьСверкуИтоговНаСервере()
	
	Если Не ЗначениеЗаполнено(НастройкаРабочегоМеста) Тогда
		ТекстСообщения = НСтр("ru = 'Не найдена настройка рабочего места'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат
	КонецЕсли;
	
	НастройкаОбъект = НастройкаРабочегоМеста.ПолучитьОбъект();
	НастройкаОбъект.СверятьИтогиНаЭТПриЗакрытииСмены = Не СверятьИтогиНаЭТПриЗакрытииСмены;
	
	Попытка
		НастройкаОбъект.Записать();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось переключить режим сверки.
			|%1'") , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	СверятьИтогиНаЭТПриЗакрытииСмены = НастройкаОбъект.СверятьИтогиНаЭТПриЗакрытииСмены;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ЧекиККМПереключитьСверкуИтогов", "Пометка", СверятьИтогиНаЭТПриЗакрытииСмены);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДинамическихСписков()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "КассаККМ", КассаККМ, , ,
		ЗначениеЗаполнено(КассаККМ));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "КассоваяСмена",
		ТекущийОтчетОРозничныхПродажах, ВидСравненияКомпоновкиДанных.Равно, , ТолькоТекущаяСмена);
	
КонецПроцедуры // УстановитьОтборДинамическихСписков()

&НаСервере
Процедура КассаККМОтборПриИзмененииНаСервере()
	
	РежимПросмотра = Не ПравоДоступа("Редактирование", Метаданные.Документы.ЧекККМ)
		Или КассаККМ.ТипКассы = Перечисления.ТипыКассККМ.ККМED
		Или КассаККМ.ТипКассы = Перечисления.ТипыКассККМ.АвтономнаяККМ;
	
	ОбновитьСостояниеКассовойСменыНаСервере(КассаККМ);
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры // КассаОтборПриИзмененииНаСервере()

&НаСервереБезКонтекста
Функция ОткрытьКассовуюСменуНаСервере(КассаККМ, ОписаниеОшибки = "", ТекстПереходящегоОстатка = "")
	
	Результат = РозничныеПродажиСервер.ОткрытьКассовуюСмену(КассаККМ, ОписаниеОшибки, ТекстПереходящегоОстатка);
	Возврат Результат;
	
КонецФункции // ОткрытьКассовуюСменуНаСервере()

&НаСервере
Процедура ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписков(КассаККМ)
	
	ОбновитьСостояниеКассовойСменыНаСервере(КассаККМ);
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры // ОбновитьСостояниеКассовойСменыНаСервере()

&НаКлиенте
Процедура ОткрытьКассовуюСменуЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	Если РезультатВыполнения.Результат Тогда 
		ОписаниеОшибки = "";
		Результат = ОткрытьКассовуюСменуНаСервере(КассаККМ, ОписаниеОшибки); 
		Если НЕ Результат Тогда
			ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка. Смена не открыта.
							       |Дополнительное описание: %ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписков(КассаККМ);
	Иначе
		ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка.
			                      |Смена не открыта на фискальном регистраторе.
			                      |%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НачатьФормированиеОтчетаОРозничныхПродажах(КассаККМ)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"Документы.ОтчетОРозничныхПродажах.СформироватьОтчетОРозничныхПродажахИВыполнитьАрхивацию",
		КассаККМ);
	
КонецФункции

&НаСервере
Функция ЗакрытьКассовуюСменуНаСервере(КассаККМ, ОписаниеОшибки, СсылкаНаОтчет = Неопределено)
	
	Возврат РозничныеПродажиСервер.ЗакрытьКассовуюСмену(КассаККМ, ОписаниеОшибки, СсылкаНаОтчет);
	
КонецФункции

&НаКлиенте
Процедура ИнкассацияНаФискальномУстройствеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина; // Разблокировка интерфейса пользователя.
	
	Если НЕ РезультатВыполнения.Результат Тогда
		
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка.
			                        |Чек не напечатан на фискальном устройстве.
			                        |Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	Если Параметры <> Неопределено И Параметры.Свойство("СоздатьВыемкуНаличных") И Параметры.СоздатьВыемкуНаличных Тогда
		
		ДополнительныеПараметры = Новый Структура("ИзымаемаяСумма", Параметры.Сумма);
		
		Если Параметры.Свойство("ОповещениеЗакрытияСмены") Тогда
			ДополнительныеПараметры.Вставить("ОповещениеЗакрытияСмены", Параметры.ОповещениеЗакрытияСмены);
		КонецЕсли;
		
		Если Параметры.Свойство("ОповещениеПоступленияВКассу") Тогда
			ДополнительныеПараметры.Вставить("ОповещениеПоступленияВКассу", Параметры.ОповещениеПоступленияВКассу);
		КонецЕсли;
		
		Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки И Параметры.Свойство("ДеньгиКВыемке") Тогда
			СформироватьДокументВыемки(Параметры, ДополнительныеПараметры);
		Иначе
			СформироватьДокументВыемки(Параметры.Сумма, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция РассчитатьСуммуВыемки(СтруктураСостояниеКассовойСмены, ПараметрыКассыККМ);
	
	СуммаВыемки = Макс(СтруктураСостояниеКассовойСмены.НаличностьВКассе - ПараметрыКассыККМ.МинимальныйОстатокВКассеККМ, 0);
	
	Возврат СуммаВыемки;
	
КонецФункции

&НаКлиенте
Процедура СоздатьПоступлениеВКассу(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоступлениеВКассу = СоздатьПоступлениеВКассуНаСервере(Результат, ДополнительныеПараметры);
	
	Если ПоступлениеВКассу <> Неопределено Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Создан документ'"),
									   ПолучитьНавигационнуюСсылку(ПоступлениеВКассу), ПоступлениеВКассу);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьПоступлениеВКассуНаСервере(Основание, Касса)
	
	ЕстьПравоЧтения = ПравоДоступа("Чтение", Метаданные.Документы.ПоступлениеВКассу, Пользователи.ТекущийПользователь());
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПоступлениеВКассу = Документы.ПоступлениеВКассу.СоздатьДокумент();
	
	ПоступлениеВКассу.Заполнить(Основание);
	ПоступлениеВКассу.Касса = Касса;
	ПоступлениеВКассу.Дата = ТекущаяДатаСеанса();
	ПоступлениеВКассу.Записать(РежимЗаписиДокумента.Проведение);
	
	Если ЕстьПравоЧтения Тогда
		Возврат ПоступлениеВКассу.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораКассыПриОткрытииДенежногоЯщика(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено И ТипЗнч(РезультатОткрытияФормы) = Тип("Структура") Тогда
		ЗначениеВыбораКасса = РезультатОткрытияФормы.Касса;
		ЗавершитьВыбораКассыПриОткрытииДенежногоЯщика(ЗначениеВыбораКасса);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСостояниеКассовойСменыНаСервере(КассаККМ)
	
	Возврат РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(КассаККМ);
	
КонецФункции // ПолучитьСостояниеКассовойСменыНаСервере()

&НаСервере
Процедура ОбновитьСостояниеКассовойСменыНаСервере(КассаККМ)
	
	СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСменыНаСервере(КассаККМ);
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
		АгентскиеПлатежиУНФ.ДополнитьСтруктуруСостоянияКассовойСмены(СтруктураСостояниеКассовойСмены);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураСостояниеКассовойСмены.СтатусКассовойСмены) Тогда
		
		ТекстСообщения = НСтр("ru='Смена № %НомерСмены%, Статус: %СтатусСмены% %ВремяИзменения%, В кассе %НаличностьВКассе% %Валюта%'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСмены%", СокрЛП(СтруктураСостояниеКассовойСмены.НомерКассовойСмены));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтатусСмены%", СтруктураСостояниеКассовойСмены.СтатусКассовойСмены);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаличностьВКассе%", СтруктураСостояниеКассовойСмены.НаличностьВКассе);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%", СтруктураСостояниеКассовойСмены.ВалютаДокументаПредставление);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВремяИзменения%", Формат(СтруктураСостояниеКассовойСмены.ДатаИзмененияСтатуса,НСтр("ru='ДФ=''dd.MM.yy ЧЧ:мм'''")));    
		
		СостояниеКассовойСмены = ТекстСообщения;
		
		Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
			ТекстСообщенияАгентскиеПлатежи = НСтр("ru='В том числе %СуммаАгентскихПлатежей% %Валюта% по договорам платежных агентов'");
			ТекстСообщенияАгентскиеПлатежи = СтрЗаменить(ТекстСообщенияАгентскиеПлатежи, "%СуммаАгентскихПлатежей%", СтруктураСостояниеКассовойСмены.СуммаАгентскихПлатежей);
			ТекстСообщенияАгентскиеПлатежи = СтрЗаменить(ТекстСообщенияАгентскиеПлатежи, "%Валюта%", СтруктураСостояниеКассовойСмены.ВалютаДокументаПредставление);
			СостояниеКассовойСменыАгентскиеПлатежи = ТекстСообщенияАгентскиеПлатежи;
		КонецЕсли;
		
	Иначе
		
		СостояниеКассовойСмены = НСтр("ru='Смена не открыта.'");
		
	КонецЕсли;
	
	// Переменная формы
	СменаОткрыта = СтруктураСостояниеКассовойСмены.СменаОткрыта;
	ТекущаяКассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
	ТекущийОтчетОРозничныхПродажах = СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах;
	
	// Управление доступностью.  
	Если ЭтоМобильныйКлиент
		И КассаККМ.ТипКассы = Перечисления.ТипыКассККМ.АвтономнаяККМ
		И ПравоДоступа("Редактирование", Метаданные.Документы.ЧекККМ) Тогда

		Элементы.СнятьZОтчет.Видимость		  = СменаОткрыта;
		Элементы.ОткрытьКассовуюСмену.Видимость = НЕ СменаОткрыта И ЗначениеЗаполнено(КассаККМ);
		
		Элементы.ЧекиККМСоздатьЧек.Доступность								= СменаОткрыта;
		Элементы.КонтекстноеМенюЧекиККМСоздать.Доступность					= СменаОткрыта;
		Элементы.ЧекиККМДокументЧекККМВозвратСоздатьНаОсновании.Доступность = СменаОткрыта;
		Элементы.ЧекиККМСоздатьЧекВозврат.Доступность						= СменаОткрыта;
		Элементы.ЧекиККМСкопировать.Доступность								= СменаОткрыта;
		Элементы.КонтекстноеМенюЧекиККМСкопировать.Доступность				= СменаОткрыта;
		Элементы.ЧекиККМСоздатьЧекВозврат.Доступность						= СменаОткрыта;

	ИначеЕсли РежимПросмотра Тогда
		
		Элементы.СнятьZОтчет.Видимость		  = Ложь;
		Элементы.ОткрытьКассовуюСмену.Видимость = Ложь;
		
		Элементы.ЧекиККМСоздатьЧек.Доступность					= Ложь;
		Элементы.КонтекстноеМенюЧекиККМСоздать.Доступность		= Ложь;
		Элементы.ЧекиККМСоздатьЧекВозврат.Доступность			= Ложь;
		Элементы.ЧекиККМСоздатьЧекВозврат.Доступность			= Ложь;
		
		Элементы.ВнесениеДенег.Видимость = Ложь;
		Элементы.ВыемкаДенег.Видимость   = Ложь;
		
	Иначе

		Элементы.СнятьZОтчет.Видимость		  = СменаОткрыта;
		Элементы.ОткрытьКассовуюСмену.Видимость = НЕ СменаОткрыта И ЗначениеЗаполнено(КассаККМ);
		
		Элементы.ЧекиККМСоздатьЧек.Доступность								= СменаОткрыта;
		Элементы.КонтекстноеМенюЧекиККМСоздать.Доступность					= СменаОткрыта;
		Элементы.ЧекиККМДокументЧекККМВозвратСоздатьНаОсновании.Доступность = СменаОткрыта;
		Элементы.ЧекиККМСоздатьЧекВозврат.Доступность						= СменаОткрыта;
		Элементы.ЧекиККМСкопировать.Доступность								= СменаОткрыта;
		Элементы.КонтекстноеМенюЧекиККМСкопировать.Доступность				= СменаОткрыта;
		Элементы.ЧекиККМСоздатьЧекВозврат.Доступность						= СменаОткрыта;
		
		Элементы.ВнесениеДенег.Видимость = Истина;
		Элементы.ВыемкаДенег.Видимость   = Истина;
		Элементы.ВнесениеДенег.Доступность = СменаОткрыта;
		Элементы.ВыемкаДенег.Доступность   = СменаОткрыта;
	
	КонецЕсли;
	
КонецПроцедуры // ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписков()

&НаСервере
Процедура ТолькоТекущаяСменаОтборПриИзмененииНаСервере()
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры // ТолькоТекущаяСменаОтборПриИзмененииНаСервере()

&НаКлиенте
Процедура СформироватьДокументВыемки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат <> 0 Тогда
		
		Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("ОповещениеЗакрытияСмены") Тогда
			Результат.Удалить("ОповещениеЗакрытияСмены");
		КонецЕсли;
		
		ДокументВыемка = СформироватьДокументВыемкиНаСервере(Результат, ДополнительныеПараметры.ИзымаемаяСумма);
		
		Если ДокументВыемка <> Неопределено Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Создан документ'"),
										   ПолучитьНавигационнуюСсылку(ДокументВыемка), ДокументВыемка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеПоступленияВКассу") И ДополнительныеПараметры.ОповещениеПоступленияВКассу <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПоступленияВКассу, ДокументВыемка);
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеЗакрытияСмены") И ДополнительныеПараметры.ОповещениеЗакрытияСмены <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗакрытияСмены, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьДокументВыемкиНаСервере(Результат, ИзымаемаяСумма)
	
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки И ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Для каждого СтруктураДокумента Из Результат.ДеньгиКВыемке Цикл
			
			ДокументВыемка = Документы.ВыемкаНаличных.СоздатьДокумент();
			СтруктураЗаполнения = Новый Структура;
			СтруктураЗаполнения.Вставить("Дата", ТекущаяДатаСеанса());
			СтруктураЗаполнения.Вставить("ДоговорПлатежногоАгента", СтруктураДокумента.ДоговорКонтрагента);
			СтруктураЗаполнения.Вставить("СуммаДокумента", СтруктураДокумента.Сумма);
			СтруктураЗаполнения.Вставить("КассаККМ", КассаККМ);
			СтруктураЗаполнения.Вставить("ВалютаДенежныхСредств", КассаККМ.ВалютаДенежныхСредств);
			СтруктураЗаполнения.Вставить("Организация", КассаККМ.Владелец);
			СтруктураЗаполнения.Вставить("ОтчетОРозничныхПродажах", СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах);
			ДокументВыемка.Заполнить(СтруктураЗаполнения);
			ДокументВыемка.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЦикла;
		
		Возврат ДокументВыемка.Ссылка;
		
	КонецЕсли;
	
	СуммаДокумента = ?(Результат = Неопределено, ИзымаемаяСумма, Результат);
	
	Если Результат <> Неопределено Тогда
		
		ДокументВыемка = Документы.ВыемкаНаличных.СоздатьДокумент();
		СтруктураЗаполнения = Новый Структура;
		СтруктураЗаполнения.Вставить("Дата", ТекущаяДатаСеанса());
		СтруктураЗаполнения.Вставить("СуммаДокумента", СуммаДокумента);
		СтруктураЗаполнения.Вставить("КассаККМ", КассаККМ);
		СтруктураЗаполнения.Вставить("ВалютаДенежныхСредств", КассаККМ.ВалютаДенежныхСредств);
		СтруктураЗаполнения.Вставить("Организация", КассаККМ.Владелец);
		СтруктураЗаполнения.Вставить("ОтчетОРозничныхПродажах", СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах);
		ДокументВыемка.Заполнить(СтруктураЗаполнения);
		ДокументВыемка.Записать(РежимЗаписиДокумента.Проведение);
		
		Возврат ДокументВыемка.Ссылка;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьСверкуИтоговЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Свойство("Результат") И Не РезультатВыполнения.Результат Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатВыполнения.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокЭТДляВыполненияСверки(КассаККМ)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Оборудование.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СпособыОплаты КАК СпособыОплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодключаемоеОборудование КАК Оборудование
	|		ПО СпособыОплаты.ПодключаемоеОборудование = Оборудование.Ссылка
	|			И (Оборудование.РабочееМесто = &РабочееМесто
	|				И Оборудование.УстройствоИспользуется
	|				И НЕ Оборудование.ПометкаУдаления
	|				И Оборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал)
	|				И НЕ СпособыОплаты.ПометкаУдаления
	|				И СпособыОплаты.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыСпособовОплат.Эквайринг)
	|				И СпособыОплаты.Касса = &КассаККМ)");
	Запрос.УстановитьПараметр("РабочееМесто", МенеджерОборудованияВызовСервера.РабочееМестоКлиента());
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокТерминалов = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		СписокТерминалов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СписокТерминалов;
	
КонецФункции

#КонецОбласти