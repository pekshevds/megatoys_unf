////////////////////////////////////////////////////////////////////////////////
// Подсистема "КонфигурацииЗарплатаКадры".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.БазоваяФункциональность

// См. ОбщегоНазначенияПереопределяемый.ПриОпределенииОбщихПараметровБазовойФункциональности.
Процедура ПриОпределенииОбщихПараметровБазовойФункциональности(ОбщиеПараметры) Экспорт
	КонфигурацииЗарплатаКадрыВнутренний.ПриОпределенииОбщихПараметровБазовойФункциональности(ОбщиеПараметры)
КонецПроцедуры

// Конец СтандартныеПодсистемы.БазоваяФункциональность

// СтандартныеПодсистемы.Пользователи

// См. ПользователиПереопределяемый.ПриУстановкеНачальныхНастроек
Процедура ПриУстановкеНачальныхНастроек(НачальныеНастройки) Экспорт
	КонфигурацииЗарплатаКадрыВнутренний.ПриУстановкеНачальныхНастроек(НачальныеНастройки)
КонецПроцедуры

// Конец СтандартныеПодсистемы.Пользователи

// СтандартныеПодсистемы.КонтрольВеденияУчета

// См. КонтрольВеденияУчетаПереопределяемый.ПриОпределенииПроверок.
Процедура ПриОпределенииПроверок(ГруппыПроверок, Проверки) Экспорт
	
	Проверка = Проверки.Найти("СтандартныеПодсистемы.ПроверкаНезаполненныхОбязательныхРеквизитов", "Идентификатор");
	Если Проверка <> Неопределено Тогда
		Проверки.Удалить(Проверка);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтрольВеденияУчета

// ТехнологияСервиса

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки.
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт
	ИсключенныеПланыОбмена = Новый Структура(
	"АвтономнаяРабота,
	|ОбменВРаспределеннойИнформационнойБазе,
	|ОбменЗарплата3Бухгалтерия3,
	|ОбменЗГУБГУ1,
	|ОбменЗГУБГУ2,
	|СинхронизацияДанныхЧерезУниверсальныйФормат");
	Для Каждого КлючИЗначение Из ИсключенныеПланыОбмена Цикл
		МетаданныеПланаОбмена = Метаданные.ПланыОбмена.Найти(КлючИЗначение.Ключ);
		Если МетаданныеПланаОбмена <> Неопределено
			И Типы.Найти(МетаданныеПланаОбмена) = Неопределено Тогда
			Типы.Добавить(МетаданныеПланаОбмена);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Конец ТехнологияСервиса

// РегламентированнаяОтчетность

// См. РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации.
Функция ИДКонфигурации() Экспорт
	Возврат КраткоеИмяПрограммы(Модуль().СведенияОКонфигурации());
КонецФункции

// См. РегламентированнаяОтчетностьПереопределяемый.КраткоеНазваниеПрограммы.
Функция КраткоеНазваниеПрограммы() Экспорт
	Возврат КраткоеНазваниеПрограммыСлужебный();
КонецФункции

// См. РегламентированнаяОтчетностьПереопределяемый.ПолучитьУИДКонфигурации.
Процедура ПолучитьУИДКонфигурации(УИДКонфигурации) Экспорт
	СведенияОКонфигурации = Модуль().СведенияОКонфигурации();
	Если СведенияОКонфигурации.Хозрасчетная Тогда
		УИДКонфигурации = "4759bb58-0ce1-11df-85fa-001b24e002fe";
	ИначеЕсли СведенияОКонфигурации.Бюджетная Тогда
		УИДКонфигурации = "bd688976-15b9-11e1-82b8-001b24e002fe";
	КонецЕсли;
КонецПроцедуры

// Конец РегламентированнаяОтчетность

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует обновить БИД и использовать процедуру ДополнитьСоответствиеТипов.
// См. ИнтеграцияС1СДокументооборотПереопределяемый.ПриОпределенииПодходящегоТипа.
Процедура ПриОпределенииПодходящегоТипа(ТипОбъектаXDTO, ТипыКандидаты, ПодходящийТип) Экспорт
	
	// АПК:278-выкл Базовые подсистемы могут условно вызывать расширенные.
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КонфигурацииЗарплатаКадрыРасширенный");
		Модуль.ПриОпределенииПодходящегоТипа(ТипОбъектаXDTO, ТипыКандидаты, ПодходящийТип);
	КонецЕсли;
	// АПК:278-вкл
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#Область ОбновлениеИБ

// Возвращает идентификатор интернет-поддержки подсистемы ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадры.
//
// Возвращаемое значение:
//   Строка - Пустая строка.
//
Функция ИдентификаторИнтернетПоддержки() Экспорт
	Конфигурация = Модуль().СведенияОКонфигурации();
	
	Если Конфигурация.Хозрасчетная Тогда
		Если Конфигурация.Базовая Тогда
			Возврат "HRMBase";
		ИначеЕсли Конфигурация.Корпоративная Тогда
			Возврат "HRMCorp";
		Иначе
			Возврат "HRM";
		КонецЕсли;
	ИначеЕсли Конфигурация.Бюджетная Тогда
		Если Конфигурация.Базовая Тогда
			Возврат "StateHRMBase";
		ИначеЕсли Конфигурация.Корпоративная Тогда
			Возврат "StateHRMCorp";
		Иначе
			Возврат "StateHRM";
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
КонецФункции

// Регистрирует обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления().
//
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.10.103";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("348217de-98c7-11e9-80cd-4cedfb43b11a");
	Обработчик.Процедура       = "КонфигурацииЗарплатаКадры.ОбновитьРасписаниеОбменаСКонтролирующимиОрганамиПриОбновлении";
	Обработчик.Комментарий     = НСтр("ru = 'Обновление расписания обмена с контролирующими органами.'");
	
КонецПроцедуры

// Обработчик обновления на 3.1.10.103.
Процедура ОбновитьРасписаниеОбменаСКонтролирующимиОрганамиПриОбновлении(ПараметрыОбновления = Неопределено) Экспорт
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиОбновлениеИнформационнойБазы.ВключитьАвтоматическийОбменСКонтролирующимиОрганамиПриОбновлении();
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

// Возвращает модуль, реализующий базовый контракт служебного программного интерфейса.
Функция Модуль() Экспорт
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная") Тогда
		Возврат ОбщегоНазначения.ОбщийМодуль("КонфигурацииЗарплатаКадрыРасширенный");
	Иначе
		Возврат КонфигурацииЗарплатаКадры;
	КонецЕсли;
КонецФункции

// Возвращает краткое название конфигурации.
// Длина возвращаемого значения не должна превышать 30 символов.
//
// Возвращаемое значение:
//   Строка - краткое название конфигурации.
//
// Пример:
//   Возврат "1С:Бухгалтерия";
//
Функция КраткоеНазваниеПрограммыСлужебный() Экспорт
	
	СведенияОКонфигурации = Модуль().СведенияОКонфигурации();
	
	КраткоеНазвание = КраткоеИмяПрограммы(СведенияОКонфигурации);
	Если Не ЗначениеЗаполнено(КраткоеНазвание) Тогда
		Возврат "";
	КонецЕсли;
	
	Если СведенияОКонфигурации.Корпоративная Тогда
		КраткоеНазвание = КраткоеНазвание + " КОРП";
	КонецЕсли;
	
	Возврат "1С:" + КраткоеНазвание;
	
КонецФункции

#Область БазовыйКонтракт

// Возвращает сведения о конфигурации.
//
// Возвращаемое значение:
//   Структура - Сведения о конфигурации
//       * Хозрасчетная - Булево
//       * Бюджетная - Булево
//       * Базовая - Булево
//       * Корпоративная - Булево
//
Функция СведенияОКонфигурации() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Сведения = Новый Структура("Хозрасчетная, Бюджетная, Базовая, Корпоративная");
	
	Сведения.Хозрасчетная  = Ложь;
	Сведения.Бюджетная     = Ложь;
	Сведения.Корпоративная = Ложь;
	Сведения.Базовая       = СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	
	Возврат Сведения;
КонецФункции

#КонецОбласти

#Область ЗарплатаКадрыПереопределяемый

// См. ЗарплатаКадрыПереопределяемый.ПриОпределенииИмениКлиентскогоПриложения.
Процедура ПриОпределенииИмениКлиентскогоПриложения(ИмяПриложения, СтандартнаяОбработка) Экспорт
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	ИдентификаторИнтернетПоддержки = ИдентификаторИнтернетПоддержки();
	Если ЗначениеЗаполнено(ИдентификаторИнтернетПоддержки) Тогда
		ИмяПриложения = ИмяПриложения + " " + ИдентификаторИнтернетПоддержки + " " + Метаданные.Версия;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытий

// См. ПодпискаНаСобытие.ОбновитьРасписаниеОбменаСКонтролирующимиОрганами (СправочникОбъект.Организации.ПриЗаписи).
Процедура ОбновитьРасписаниеОбменаСКонтролирующимиОрганами(Источник, Отказ) Экспорт
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПриЗаписиОрганизации(Источник, Отказ);
КонецПроцедуры

// См. ПодпискаНаСобытие.НеИспользоватьНесколькоОрганизацийПриЗаписи (КонстантаМенеджерЗначения.НеИспользоватьНесколькоОрганизаций.ПриЗаписи).
Процедура НеИспользоватьНесколькоОрганизацийПриЗаписи(Источник, Отказ) Экспорт
	
	РазрешеноДобавлениеОрганизации = Не СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	Константы.РазрешитьДобавлениеОрганизацииЗарплатаКадры.Установить(Источник.Значение И РазрешеноДобавлениеОрганизации);
	
КонецПроцедуры

#КонецОбласти

Процедура УстановитьФункциональнуюОпциюРазрешитьДобавлениеОрганизацииЗарплатаКадры() Экспорт
	
	РазрешеноДобавлениеОрганизации = Константы.НеИспользоватьНесколькоОрганизаций.Получить() И Не СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	Константы.РазрешитьДобавлениеОрганизацииЗарплатаКадры.Установить(РазрешеноДобавлениеОрганизации);	
	
КонецПроцедуры

// Возвращает краткое имя программы без уточнения.
Функция КраткоеИмяПрограммы(СведенияОКонфигурации)
	Если СведенияОКонфигурации.Хозрасчетная Тогда
		Возврат "ЗУП";
	ИначеЕсли СведенияОКонфигурации.Бюджетная Тогда
		Возврат "ЗГУ";
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

#КонецОбласти
