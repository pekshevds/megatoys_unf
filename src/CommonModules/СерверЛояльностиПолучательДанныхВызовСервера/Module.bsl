///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Вспомогательный метод для обработки JSON на web - клиенте
//
// Параметры:
//  СтрокаJSON - Строка - исходные данные в формате JSON
//  ДанныеОтвета - Структура, Неопределено - результат разбора ответа
//
Процедура ОбработатьJSON(СтрокаJSON, ДанныеОтвета) Экспорт
	
	Если ЗначениеЗаполнено(СтрокаJSON) Тогда
		
		ЧтениеОтвета = Новый ЧтениеJSON;
		ЧтениеОтвета.УстановитьСтроку(СтрокаJSON);
		
		Попытка
			ДанныеОтвета = ПрочитатьJSON(ЧтениеОтвета);
		Исключение
			
			ЛокализованноеСообщение = НСтр("ru = 'Ошибка разбора JSON, возможно, получено служебное сообщение о недоступности сервера лояльности.'");
			
			КодОсновногоЯзыка = Неопределено;
			СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьКодОсновногоЯзыка(КодОсновногоЯзыка);
			ИмяСобытия = НСтр("ru = 'Попытка разбора ответа от сервера лояльности'", КодОсновногоЯзыка);
					
			ЗаписьЖурналаРегистрации(ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка, , , ЛокализованноеСообщение);
				
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Вспомогательный метод для сериализации на web - клиенте
//
// Параметры:
//  СтруктураПараметров - Структура - параметры для сериализации
// 
// Возвращаемое значение:
//  Результат - Строка, Неопределено - результат сериализации
//
Функция СериализоватьСтруктуруПараметров(СтруктураПараметров) Экспорт
	
	СтруктураОтветаJSON = Новый ЗаписьJSON;
	СтруктураОтветаJSON.УстановитьСтроку();
	ЗаписатьJSON(СтруктураОтветаJSON, СтруктураПараметров);
	СериализованнаяСтруктураПараметров = СтруктураОтветаJSON.Закрыть();
	
КонецФункции

// Процедура пакетной записи сообщений в журнал регистрации.
// После записи переменная СобытияДляЖурналаРегистрации очищается.
//
// Параметры:
//  ИмяСобытия - Строка - имя записываемого события.
//  ЛокализованноеСообщение - Строка - сообщение для записи в журнал регистрации
//
Процедура ЗаписатьСобытияВЖурналРегистрации(ИмяСобытия, ЛокализованноеСообщение) Экспорт
	
	ЗаписьЖурналаРегистрации(ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка, , , ЛокализованноеСообщение);
	
КонецПроцедуры

// Выполняет обращение к ресурсу сервера лояльности 
//
// Параметры:
//  ПараметрыВыполненияЗапроса - Структура:
//		* ТипЗапроса - Строка - по умолчанию "POST"
//		* АдресСервера - Строка
//		* Логин - Строка
//		* Пароль - Строка
//		* Ресурс - Строка
//		* ПараметрыМетода - Структура
//
// Возвращаемое значение:
//   Структура:
//		* ДанныеОтвета - Строка
//		* ЕстьОшибки - Булево
//		* ТекстОшибки - Строка
//
Функция ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса) Экспорт
	
	Возврат СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
	
КонецФункции

// Получает интернет прокси
//
// Параметры:
//  ЭтоЗащищенноеСоединение - Булево
//
Функция ПолучитьИнтернетПрокси(ЭтоЗащищенноеСоединение) Экспорт
	
	ИнтернетПрокси = Неопределено;
	
	Если ЭтоЗащищенноеСоединение = Истина Тогда
		ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTPS");
	Иначе
		ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTP");
	КонецЕсли;
	
	Возврат ИнтернетПрокси;
	
КонецФункции

#КонецОбласти
