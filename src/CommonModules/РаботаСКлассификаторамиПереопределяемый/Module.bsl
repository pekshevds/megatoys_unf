///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.РаботаСКлассификаторами".
// ОбщийМодуль.РаботаСКлассификаторамиПереопределяемый.
//
// Серверные переопределяемые процедуры загрузки классификаторов:
//  - определение списка автоматический обновляемых классификаторов;
//  - определение алгоритмов обработки файлов классификаторов;
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Переопределяется список и настройки классификаторов обновления которых необходимо
// загружать из сервиса классификаторов. Для получения идентификатора необходимо
// перевести наименование объекта метаданных, данные которого планируется обновлять,
// на английский язык. При переводе рекомендуется использовать профессиональные
// программы перевода текста, либо воспользоваться услугами переводчика, т.к. при
// обнаружении смысловых ошибок в идентификаторе потребуется заводить новый классификатор
// и изменять код конфигурации.
//
// Параметры:
//  Классификаторы  - Массив из Структура - содержит настройки загрузки классификаторов.
//                    Состав настроек см. функцию РаботаСКлассификаторами.ОписаниеКлассификатора.
//
// Пример:
//	Описатель = РаботаСКлассификаторами.ОписаниеКлассификатора();
//	Описатель.Наименование               = НСтр("ru = 'Ставки рефинансирования'");
//	Описатель.Идентификатор              = "CentralBankRefinancingRate";
//	Описатель.ОбновлятьАвтоматически     = Истина;
//	Описатель.ОбщиеДанные                = Истина;
//	Описатель.СохранятьФайлВКэш          = Ложь;
//	Описатель.ОбработкаРазделенныхДанных = Ложь;
//	Классификаторы.Добавить(Описатель);
//
//@skip-warning
Процедура ПриДобавленииКлассификаторов(Классификаторы) Экспорт
	
	РаботаСКлассификаторамиУНФ.ПриДобавленииКлассификаторов(Классификаторы);
	
	// ЗарплатаКадрыПодсистемы
	ЗарплатаКадры.ПриДобавленииКлассификаторов(Классификаторы);
	// Конец ЗарплатаКадрыПодсистемы
	
КонецПроцедуры

// Переопределяются номер версии классификатора, который уже загружен в информационную базу.
// При начале использовании подсистемы "РаботаСКлассификаторами" или при подключении нового
// классификатора к сервису, неизвестно какой номер версии классификатора загружен в ИБ,
// поэтому при очередной итерации обновления данных из сервиса данные будут загружены повторно.
// Чтобы избежать повторной загрузки, необходимо указать задать начальный номер версии.
// Метод будет вызван при попытке загрузить версию классификатора, у которого установлена
// версия равная 0.
//
// Параметры:
//  Идентификатор        - Строка - идентификатор классификатора в сервисе классификаторов.
//                         Определяется в процедуре ПриДобавленииКлассификаторов.
//  НачальныйНомерВерсии - Число - номер версии загруженного классификатора.
//
// Пример:
//	Если Идентификатор = "CentralBankRefinancingRate" Тогда
//		НачальныйНомерВерсии = РегистрыСведений.СтавкиРефинансирования.НомерЗагруженнойВерсии();
//	КонецЕсли;
//
//@skip-warning
Процедура ПриОпределенииНачальногоНомераВерсииКлассификатора(Идентификатор, НачальныйНомерВерсии) Экспорт
	
	РаботаСКлассификаторамиУНФ.ПриОпределенииНачальногоНомераВерсииКлассификатора(Идентификатор, НачальныйНомерВерсии);
	
КонецПроцедуры

// Переопределяются алгоритмы обработки файла загруженного
// из сервиса классификаторов. После обработки файла нельзя удалять
// временного хранилища, т.к. при необходимости он будет сохранен в
// кэше для последующего использования.
//
// Параметры:
//  Идентификатор           - Строка - идентификатор классификатора в сервисе классификаторов.
//                            Определяется в процедуре ПриДобавленииКлассификаторов.
//  Версия                  - Число - номер загруженной версии;
//  Адрес                   - Строка - адрес двоичных данных файла обновления во
//                            временном хранилище;
//  Обработан               - Булево - если Ложь, при обработке файла обновления были ошибки
//                            и его необходимо загрузить повторно;
//  ДополнительныеПараметры - Структура - содержит дополнительные параметры обработки.
//                            Необходимо использовать для передачи значений в переопределяемый
//                            метод РаботаСКлассификаторамиВМоделиСервисаПереопределяемый.ПриОбработкеОбластиДанных
//                            и метод ИнтеграцияПодсистемБИП.ПриОбработкеОбластиДанных..
// Пример:
//	Если Идентификатор = "CentralBankRefinancingRate" Тогда
//		Обработан = РегистрыСведений.СтавкиРефинансирования.ОбновитьДанныеРегистраИзФайла(Адрес, ДополнительныеПараметры);
//	КонецЕсли;
//
//@skip-warning
Процедура ПриЗагрузкеКлассификатора(Идентификатор, Версия, Адрес, Обработан, ДополнительныеПараметры) Экспорт
	
	МодульЗагрузкаМРОТ = ОбщегоНазначения.ОбщийМодуль("РегистрыСведений.МРОТ");
	МодульЗагрузкаМРОТ.ПриЗагрузкеКлассификатора(Идентификатор, Версия, Адрес, Обработан,
	ДополнительныеПараметры);
	
	МодульЗагрузкаРазмерВычетовНДФЛ = ОбщегоНазначения.ОбщийМодуль("РегистрыСведений.НДФЛРазмерВычетов");
	МодульЗагрузкаРазмерВычетовНДФЛ.ПриЗагрузкеКлассификатора(Идентификатор, Версия, Адрес, Обработан,
		ДополнительныеПараметры);
	
	// ИнтеграцияИС
	ИнтеграцияИС.ПриЗагрузкеКлассификатора(Идентификатор, Версия, Адрес, Обработан, ДополнительныеПараметры);
	// Конец ИнтеграцияИС
	
КонецПроцедуры

// Считывает текст из двоичных данных, используя поток в памяти.
//
// Параметры:
//   ДвоичныеДанные - ДвоичныеДанные - Двоичные данные текста.
//   Кодировка - КодировкаТекста - Кодировка текста.
//
// Возвращаемое значение:
//   Строка - Результат чтения текста из двоичных данных.
//
Функция ДвоичныеДанныеВСтроку(ДвоичныеДанные, Кодировка) Экспорт
	БуферДвоичныхДанных = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ДвоичныеДанные);
	ПотокВПамяти = Новый ПотокВПамяти(БуферДвоичныхДанных);
	ЧтениеТекста = Новый ЧтениеТекста(ПотокВПамяти, Кодировка);
	Возврат ЧтениеТекста.Прочитать();
КонецФункции

// Загружает классификатор из веб-сервиса и возвращает его "Распакованные" данные.
//
// Параметры:
//   Идентификатор - Строка - Идентификатор классификатора в веб-сервисе.
//
// Возвращаемое значение:
//   Структура - Данные классификатора.
//
Функция ПолучитьДанныеКлассификатораИзСервиса(Идентификатор) Экспорт
	МодульРаботаСКлассификаторами = ОбщегоНазначения.ОбщийМодуль("РаботаСКлассификаторами");
	
	Идентификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификатор);
	РезультатПолученияФайлов = МодульРаботаСКлассификаторами.ПолучитьФайлыКлассификаторов(Идентификаторы);
	
	Если РезультатПолученияФайлов.КодОшибки = "ОбновлениеНеТребуется" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Значение = Неопределено;
	Если Не ЗначениеЗаполнено(РезультатПолученияФайлов.КодОшибки)
		И ТипЗнч(РезультатПолученияФайлов.ДанныеКлассификаторов) = Тип("ТаблицаЗначений") Тогда
		СтрокаТаблицы = РезультатПолученияФайлов.ДанныеКлассификаторов.Найти(Идентификатор, "Идентификатор");
		Если СтрокаТаблицы <> Неопределено Тогда
			Попытка
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(СтрокаТаблицы.АдресФайла);
				ТекстXML = ДвоичныеДанныеВСтроку(ДвоичныеДанные, КодировкаТекста.UTF8);
				Значение = ОбщегоНазначения.ЗначениеИзСтрокиXML(ТекстXML);
			Исключение
				Значение = Неопределено;
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				РезультатПолученияФайлов.КодОшибки = "ОшибкаИзвлеченияЗначенияИзФайла";
				РезультатПолученияФайлов.СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
				РезультатПолученияФайлов.ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если Значение = Неопределено Тогда
		УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
		ТекстЖурнала = НСтр("ru = 'При получении классификатора %1 из веб-сервиса возникла ошибка:
			|Код: %2
			|Краткая информация: %3
			|Подробная информация:
			|%4'");
		ТекстЖурнала = СтрШаблон(ТекстЖурнала,
			Идентификатор,
			Строка(РезультатПолученияФайлов.КодОшибки),
			Строка(РезультатПолученияФайлов.СообщениеОбОшибке),
			Строка(РезультатПолученияФайлов.ИнформацияОбОшибке));
	Иначе
		УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
		ТекстЖурнала = СтрШаблон(НСтр("ru = 'Файл классификатора %1 получен из веб-сервиса.'"), Идентификатор);
	КонецЕсли;
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Нормативно-правовая информация БЗК'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурнала,
		,
		,
		ТекстЖурнала);
	
	Возврат Значение;
КонецФункции


#КонецОбласти
