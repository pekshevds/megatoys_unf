
#Область ПрограммныйИнтерфейс

Процедура ДобавитьОтборДатаОтветаПросрочена(ГруппаОтбора, Использование, Дата) Экспорт
	
	ГруппаОтбораОтветПросрочен = СоздатьГруппуОтбораСУдалением(
		ГруппаОтбора, 
		НСтр("ru = 'Ответ просрочен'"), 
		Использование,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
		
	ГруппаОтбораПросроченоОтносительноДатаИзмененная = СоздатьГруппуЭлементовОтбора(
		ГруппаОтбораОтветПросрочен, 
		НСтр("ru = 'Ответ просрочен относительно измененной даты'"), 
		Использование,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбораПросроченоОтносительноДатаИзмененная,
		"ДатаОтветаИзмененная",
		ВидСравненияКомпоновкиДанных.Меньше,
		Дата,
		,
		Использование);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбораПросроченоОтносительноДатаИзмененная,
		"ДатаОтветаИзмененная",
		ВидСравненияКомпоновкиДанных.Заполнено,
		,
		,
		Использование);
		
	ГруппаОтбораПросроченоОтносительноДатаРасчетная = СоздатьГруппуЭлементовОтбора(
		ГруппаОтбораОтветПросрочен, 
		НСтр("ru = 'Ответ просрочен относительно расчетная даты'"),
		Использование,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
				
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбораПросроченоОтносительноДатаРасчетная,
		"ОтветитьДо",
		ВидСравненияКомпоновкиДанных.Меньше,
		Дата,
		,
		Использование);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбораПросроченоОтносительноДатаРасчетная,
		"ОтветитьДо",
		ВидСравненияКомпоновкиДанных.Заполнено,
		,
		,
		Использование);
		
КонецПроцедуры

Процедура ДобавитьОтборДатаОтветаЗаполнена(ГруппаОтбора, Использование, ИмяПоляДаты) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора,
		ИмяПоляДаты,
		ВидСравненияКомпоновкиДанных.Заполнено,
		,
		,
		Использование);
	
КонецПроцедуры

Функция ДобавитьЭлементКомпоновкиСУдалением(Куда, ИмяПоля, ВидСравнения, ПравоеЗначение = Неопределено, Использование = Истина) Экспорт
	
	Результат = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
		Куда,
		ИмяПоля);
		
	Если Результат.Количество() > 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
			Куда,
			ИмяПоля);
			
	КонецЕсли;
	
	Элемент = ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Куда,
		ИмяПоля,
		ВидСравнения,
		ПравоеЗначение,
		,
		Использование);
	
	Возврат Элемент;
	
КонецФункции

Функция ВыделитьЦветом(Форма, Цвет, Поле, ПравоеЗначение) Экспорт
	
	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Поле); 
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;  
	ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;
	ЭлементОтбора.Использование  = Истина;

	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Цвет);

	Возврат ЭлементОформления;
	 
КонецФункции

Функция СоздатьГруппуОтбораСУдалением(Куда, ПредставлениеГруппы, Использование, ТипГруппы) Экспорт
	
	Результат = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
		Куда,
		,
		ПредставлениеГруппы);
		
	Если Результат.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
			Куда,
			,
			ПредставлениеГруппы);
	КонецЕсли;
	
	ГруппаОтбора = СоздатьГруппуЭлементовОтбора(
		Куда, 
		ПредставлениеГруппы,
		Использование,
		ТипГруппы);
	
	Возврат ГруппаОтбора;
	
КонецФункции

Функция СоздатьГруппуЭлементовОтбора(Куда, ПредставлениеГруппы, Использование, ТипГруппы) Экспорт
	
	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Куда, 
		ПредставлениеГруппы, 
		ТипГруппы);
	ГруппаОтбора.Использование = Использование;
	
	Возврат ГруппаОтбора;
	
КонецФункции

Функция ТекстДляПанелиТребований(ДобавитьСсылку, Организация = Неопределено) Экспорт
	
	ШаблонПодтверждений = НСтр("ru=';%1 подтверждение о приеме;;%1 подтверждения о приеме;%1 подтверждений о приеме;%1 подтверждений о приеме'");
	ШаблонОтвет = НСтр("ru=';%1 ответ на требование;;%1 ответа на требования;%1 ответов на требования;%1 ответов на требования'");
	
	Состояние = ТребованияФНСВызовСервера.СостояниеТребованийДляПанели(Организация);
	СостояниеСФР = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СостояниеТребованийСФРДляПанели();
	
	Если ТипЗнч(Состояние) = Тип("Структура") Тогда
		Состояние.БезОтвета = Состояние.БезОтвета + СостояниеСФР.БезОтвета;
		Состояние.Подтвердить = Состояние.Подтвердить + СостояниеСФР.Подтвердить;
	КонецЕсли;
	
	Ссылка = Новый ФорматированнаяСтрока("Показать", , , , "ОткрытьСписокТребований");
	
	ПредставлениеПодтверждений = ДокументооборотСКОКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ШаблонПодтверждений, Состояние.Подтвердить);
	ПредставлениеОтветов = ДокументооборотСКОКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ШаблонОтвет, Состояние.БезОтвета);
	
	Если Состояние.Подтвердить > 0 И Состояние.БезОтвета > 0 Тогда
		Тело = ПредставлениеПодтверждений + НСтр("ru = ' и '") + ПредставлениеОтветов;
	ИначеЕсли Состояние.Подтвердить > 0 И Состояние.БезОтвета = 0 Тогда
		Тело = ПредставлениеПодтверждений;
	ИначеЕсли Состояние.Подтвердить = 0  И Состояние.БезОтвета > 0 Тогда
		Тело = ПредставлениеОтветов;
	Иначе
		Возврат "";
	КонецЕсли;
	
	Текст = Новый ФорматированнаяСтрока(
		 	НСтр("ru = 'Отправьте '"),
			Тело,
			НСтр("ru = ' в ближайшее время. '"),
			?(ДобавитьСсылку, Ссылка, ""));
			
	Возврат Текст;
			
КонецФункции

Процедура ДополнитьОтборПоТипуВходящих(Форма, Использование = Истина) Экспорт
	
	Элементы = Форма.Элементы;
	
	ТекущаяСтраница = Элементы.ГруппаКатегориииВх.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.СтраницаРассылки Тогда
		ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовВЖурнале.Рассылка");
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаТребования Тогда
		ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовВЖурнале.ТребованиеИлиУведомление");
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВходящиеПисьма Тогда
		ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовВЖурнале.ВходящееПисьмо");
	КонецЕсли;

	ТребованияФНСКлиентСервер.ДобавитьЭлементКомпоновкиСУдалением(
		Форма.Входящие.Отбор, 
		"ВидДокумента", 
		ВидСравненияКомпоновкиДанных.Равно, 
		ВидДокумента, 
		Использование);
	
КонецПроцедуры
	
Функция ЭтоФормат_ON_DOCNPNO_1_886_00_05_02() Экспорт
	
	НенайденноеСчитатьНаступившим = Ложь;
	Наступило = ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("ОтвТребФНС5.02", НенайденноеСчитатьНаступившим);
	
	Возврат Наступило;
	
КонецФункции

Функция ПараметрыВыбораФайловВОтветНаТребованиеДокументов(МножественныйВыбор = Истина) Экспорт
	
	Требования = ТребованияКИзображениямОтветаНаТребованиеДокументов();
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ДопустимыеТипыФайлов", 	Требования.ДопустимыеТипыФайлов);
	ДополнительныеПараметры.Вставить("МаксимальныйРазмерФайла", 60*1024*1024);
	ДополнительныеПараметры.Вставить("ВозвращатьРазмер", 		Истина);
	ДополнительныеПараметры.Вставить("МножественныйВыбор", 		МножественныйВыбор);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция ТребованияКИзображениямОтветаНаТребованиеДокументов() Экспорт
	
	// Требования установлены ПРИКАЗом от 18 января 2017 г. N ММВ-7-6/16@ (ответ на требование документов). 
	// Расширение имени файла - tif | jpg | pdf | png. К файлам, содержащим отсканированные изображения, предъявляются следующие требования: 
	// черно-белое изображение с разрешением отсканированного документа не менее 150 и не более 300 точек на дюйм 
	// с использованием 256 градаций серого цвета. ФНС проверяет только те свойства, которые есть в картинке.
	
	ПараметрыМетода = ОперацииСФайламиЭДКОКлиентСервер.ТребованияКСканам();
	
	ДопустимыеТипыФайлов = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ДопустимыеТипыФайловТребования();
	
	ПараметрыМетода.Вставить("ДопустимыеТипыФайлов", 	    ДопустимыеТипыФайлов);
	ПараметрыМетода.Вставить("ГлубинаЦвета", 				"БитНаПиксел8"); // 2^8 = 256
	ПараметрыМетода.Вставить("ПреобразоватьВОттенкиСерого", Истина);
	ПараметрыМетода.Вставить("МинимальнаяПлотность",		150);
	ПараметрыМетода.Вставить("МаксимальнаяПлотность", 		300);
	ПараметрыМетода.Вставить("МаксимальныйРазмерФайла", 	60*1024*1024);
	ПараметрыМетода.Вставить("Пояснение", 					НСтр("ru = 'Суммарный размер файлов должен быть не более 72 Мб'"));
	
	Возврат ПараметрыМетода;
	
КонецФункции

#КонецОбласти