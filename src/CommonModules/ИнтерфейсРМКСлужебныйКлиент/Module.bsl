
///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Открывает форму плиточного интерфейса подбора
//
// Параметры:
//  ПараметрыОткрытияИнтерфейсаПодбора - Структура:
//  	*СтруктураПлиточногоИнтерфейса - СправочникСсылка.ПалитраТоваровРМК.
//  	*ЗакрыватьПриВыбореТовара - Булево.
//  Владелец - форма или элемент управления другой формы.
//
Процедура ОткрытьПлиточныйИнтерфейсПодбора(ПараметрыОткрытияИнтерфейсаПодбора, Владелец) Экспорт
	
	ОткрытьФорму("Справочник.ПалитраТоваровРМК.Форма.ПлиточныйИнтерфейсВыбораТоваров",
		ПараметрыОткрытияИнтерфейсаПодбора,
		Владелец,
		Новый УникальныйИдентификатор,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Настраивает доступность перехода в режим оплаты на форме РМК
//
// Параметры:
//  Форма - форма РМК.
//  ДоступенРежимОплаты - Булево - предварительно рассчитанное значение доступности режима оплаты.
//
Процедура НастроитьДоступностьРежимаОплаты(Форма, ДоступенРежимОплаты = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;

	Если Форма.ПриемАванса Тогда
		
		ДоступенРежимОплаты = Истина;
		
	ИначеЕсли ДоступенРежимОплаты = Неопределено Тогда
		
		ДоступенРежимОплаты = (Объект.Товары.Количество() > 0) И (Элементы.ОбластьОперативногоУправленияЧеком
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)); 
		
		ЭтоОперацияВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
		ЭтоВозвратТовара = ЭтоОперацияВозврат Или Форма.ЭтоВозвратБезОснования;
	
		ОсобенностиУчетаТоваровДопускающиеВозвратМаркированныхТоваровБезКМ = Новый Массив;
		ОбщегоНазначенияРМККлиентПереопределяемый.ЗаполнитьМассивОсобенностейДляВозвратаБезМарки(ОсобенностиУчетаТоваровДопускающиеВозвратМаркированныхТоваровБезКМ);
		
		КоличествоТоваров = Объект.Товары.Количество();
		ИндексТовара = 0;
		Пока ИндексТовара < КоличествоТоваров И ДоступенРежимОплаты Цикл
			Строка = Объект.Товары.Получить(ИндексТовара);
			
			ТоварДопускаетсяКВозвратуБезМарки =
				ОсобенностиУчетаТоваровДопускающиеВозвратМаркированныхТоваровБезКМ.Найти(
					Строка.ОсобенностьУчета) <> Неопределено;
					
			ЭтоВозвратМаркируемогоТовараБезПроверкиКонтрольнойМарки = ЭтоВозвратТовара
				И Строка.НеобходимостьВводаКодаМаркировки
				И НЕ ЗначениеЗаполнено(Строка.КодМаркировки)
				И ТоварДопускаетсяКВозвратуБезМарки;
			
			Если Строка.НеобходимостьВводаКодаМаркировки
				И Не Форма.ЭтоЧекКоррекции
				И Не (ЗначениеЗаполнено(Строка.КодМаркировки)
				Или ЭтоВозвратМаркируемогоТовараБезПроверкиКонтрольнойМарки)
				Или (Строка.ПроверятьЗаполнениеСерий И Не ЗначениеЗаполнено(Строка.Серия))
				Или (Строка.ПроверятьЗаполнениеПартий И Не ЗначениеЗаполнено(Строка.Партия))
				Или Строка.Количество = 0
				Или Строка.Цена = 0 Тогда
				
					ДоступенРежимОплаты = Ложь;
				
			КонецЕсли;
			ИндексТовара = ИндексТовара + 1;
		КонецЦикла;
		
	КонецЕсли;
	Элементы.ПерейтиКОплате.Доступность = ДоступенРежимОплаты;
	Элементы.ПерейтиВОплату.Доступность = ДоступенРежимОплаты;
	
КонецПроцедуры

// Устанавливает текст и цвет декорации персональных данных
//
// Параметры:
//  ДекорацияПерсональныеДанные - элемент формы декорация.
//  ТекстДекорации - Строка - устанавливаемый текст.
//
Процедура УстановитьТекстДекорацииОПерсональныхДанных(ДекорацияПерсональныеДанные, ТекстДекорации = "") Экспорт
	Перем ЦветТекста;
	
	Если ТекстДекорации = "" Тогда
		ЦветТекста = WebЦвета.Черный;
		ТекстДекорации = НСтр("ru = 'Не забудьте дать клиенту
			|на подпись заявление
			|о хранении персональных
			|данных.'");
	Иначе
		ЦветТекста = WebЦвета.ТемноКрасный;
	КонецЕсли;
	ДекорацияПерсональныеДанные.Заголовок = ТекстДекорации;
	ДекорацияПерсональныеДанные.ЦветТекста = ЦветТекста;
	
КонецПроцедуры

Процедура ПодготовитьДанныеДляПлитки(Форма) Экспорт

	Форма.ДанныеДляПлитки.Очистить();
	Если Форма.ДанныеКнопокПлиток.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.ТипПостроенияПлитки = Форма.ТипыПостроенияПлитки.ПоПалитре Тогда
		ПодготовитьДанныеДляПлиткиПоПалитре(Форма);
	ИначеЕсли Форма.ТипПостроенияПлитки = Форма.ТипыПостроенияПлитки.ВесовойТовар Тогда
		ПодготовитьДанныеВесовыхТоваровДляПлитки(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКнопкиИзбранныхПозиций(Форма) Экспорт
	
	ИзбранныеПозиции = Форма.ИзбранныеПозиции;
	ДанныеКнопок = Форма.ДанныеКнопок;
	Если ДанныеКнопок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Элементы = Форма.Элементы;
	ТекущаяСтраницаКнопок = Форма.ТекущаяСтраницаКнопок;
	МаксимальноеКоличествоИзбранныхНаСтранице = Форма.МаксимальноеКоличествоИзбранныхНаСтранице;
	
	АдресИзображенияУровеньВверх = Форма.АдресИзображенияУровеньВверх;
	АдресИзображенияУровеньВниз = Форма.АдресИзображенияУровеньВниз;
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("НомерКатегорииРазмещения", ТекущаяСтраницаКнопок);
	
	ИзбранныеПозицииНаУровне = ИзбранныеПозиции.НайтиСтроки(ОтборСтрок);
	
	ОтобразитьКнопкуНазад = Не ТекущаяСтраницаКнопок = 0;
	КнопкаНазадНеКатегория = Ложь;
	КоррекцияИндекса = ?(ОтобразитьКнопкуНазад, 1, 0);
	
	КоличествоНаУровне = ИзбранныеПозицииНаУровне.Количество();
	КоличествоНаУровне = КоличествоНаУровне + КоррекцияИндекса;
	КоличествоИндексов = 11;
	
	ИмяОсновнойГруппы = "КомандаИзбранныйТовар_Элемент01_";
	ИмяЭлементаКартинка = "КомандаИзбранныйТовар_Элемент02_";
	ИмяЭлементаГорячаяКлавиша = "КомандаИзбранныйТовар_Элемент07_";
	ИмяЭлементаТекст = "КомандаИзбранныйТовар_Элемент05_";
	ИмяЭлементаЦена = "КомандаИзбранныйТовар_Элемент11_";
	ИмяЭлементаСнизуОтЦены = "КомандаИзбранныйТовар_Элемент08_";
	ИмяЭлементаСлеваОтЦены = "КомандаИзбранныйТовар_Элемент10_";
	
	ИмяЭлементаПравойГруппы = "КомандаИзбранныйТовар_Элемент03_";
	ИмяЭлементаНижнейГруппы ="КомандаИзбранныйТовар_Элемент09_";
	
	Для ИндексПП = 0 По КоличествоИндексов Цикл 
		
		ПозицияКнопки = ДанныеКнопок[ИндексПП];
		ПозицияКнопки.АдресИзображения = "";
		ПозицияКнопки.АдресИзображенияПапка = "";
		
		Элементы[ИмяОсновнойГруппы + ИндексПП].Доступность = Истина;
		Элементы[ИмяОсновнойГруппы + ИндексПП].ЦветФона = Новый Цвет();
		Элементы[ИмяЭлементаГорячаяКлавиша + ИндексПП].Видимость = Истина;
		
		Элементы[ИмяЭлементаПравойГруппы + ИндексПП].РастягиватьПоГоризонтали = Истина;
		Элементы[ИмяЭлементаПравойГруппы + ИндексПП].Ширина= 0;
		
		Элементы[ИмяЭлементаТекст + ИндексПП].Видимость = Истина;
		Элементы[ИмяЭлементаТекст + ИндексПП].ТекстНевыбраннойКартинки = "";
		Элементы[ИмяЭлементаЦена + ИндексПП].Ширина = 7;
		Элементы[ИмяЭлементаЦена + ИндексПП].ТекстНевыбраннойКартинки = ""; 
		Элементы[ИмяЭлементаСлеваОтЦены + ИндексПП].ТекстНевыбраннойКартинки = "";
		
		Элементы[ИмяЭлементаКартинка + ИндексПП].РастягиватьПоГоризонтали = Ложь;
		Элементы[ИмяЭлементаКартинка + ИндексПП].АвтоМаксимальнаяШирина = Ложь;
		Элементы[ИмяЭлементаКартинка + ИндексПП].МаксимальнаяШирина = 5;
		Элементы[ИмяЭлементаКартинка + ИндексПП].Ширина = 5;
		Элементы[ИмяЭлементаКартинка + ИндексПП].Видимость = Истина;
		
		Элементы[ИмяЭлементаСлеваОтЦены + ИндексПП].Видимость = Истина;
		Элементы[ИмяЭлементаНижнейГруппы + ИндексПП].Видимость = Истина;
		Элементы[ИмяЭлементаСнизуОтЦены + ИндексПП].Видимость = Ложь;
		
		ЭлементРяд = Элементы[ИмяОсновнойГруппы + ИндексПП].Родитель;
		Если ИндексПП + 1 <= МаксимальноеКоличествоИзбранныхНаСтранице Тогда
			ЭлементРяд.Видимость = Истина;
		КонецЕсли;
		
		Если ИндексПП + 1 > КоличествоНаУровне И Не ОтобразитьКнопкуНазад Тогда
			Элементы[ИмяОсновнойГруппы + ИндексПП].Доступность = Ложь;
			Элементы[ИмяЭлементаГорячаяКлавиша + ИндексПП].Видимость = Ложь;
			Продолжить;
		КонецЕсли;
		
		Если ОтобразитьКнопкуНазад Тогда
			
			ОтборСтрок = Новый Структура;
			ОтборСтрок.Вставить("НомерКатегории", ТекущаяСтраницаКнопок);
			ИзбранныеПозицииКатегория = ИзбранныеПозиции.НайтиСтроки(ОтборСтрок);
			Если ИзбранныеПозицииКатегория.Количество() > 0 Тогда
				ИзбраннаяПозиция = ИзбранныеПозицииКатегория[0];
			КонецЕсли;
			
			Если НЕ ИзбраннаяПозиция.ЭтоКатегория И 
				ИзбраннаяПозиция.ИмеетсяВложенность Тогда
				
				КнопкаНазадНеКатегория = Истина;
				
			Иначе
				ОтобразитьКнопкуНазад = Ложь;
			КонецЕсли;
			
			
			ПозицияКнопки.АдресИзображенияПапка = АдресИзображенияУровеньВверх;
			
		Иначе
			ПозицияКнопки.АдресИзображенияПапка = АдресИзображенияУровеньВниз;
			ИзбраннаяПозиция = ИзбранныеПозицииНаУровне[ИндексПП - КоррекцияИндекса];
		КонецЕсли;
		
		Элементы[ИмяОсновнойГруппы + ИндексПП].Доступность = ИзбраннаяПозиция.ДоступностьКоманды;
		
		Если ЗначениеЗаполнено(ИзбраннаяПозиция.АдресИзображения) Тогда
			ПозицияКнопки.АдресИзображения = ИзбраннаяПозиция.АдресИзображения;
		Иначе
			Элементы[ИмяЭлементаКартинка + ИндексПП].Видимость = Ложь;
		КонецЕсли;
		
		Элементы[ИмяОсновнойГруппы + ИндексПП].ЦветФона = ИзбраннаяПозиция.ЦветФона;
		Элементы[ИмяЭлементаТекст + ИндексПП].ЦветТекста = ИзбраннаяПозиция.ЦветШрифта;
		
		Если ИзбраннаяПозиция.ЭтоКатегория ИЛИ 
			КнопкаНазадНеКатегория Тогда
			
			КнопкаНазадНеКатегория = Ложь;
			ОтобразитьКнопкуНазад = Ложь;
			
			Элементы[ИмяОсновнойГруппы + ИндексПП].Доступность = Истина;
			Элементы[ИмяЭлементаНижнейГруппы + ИндексПП].Видимость = Ложь;
			Элементы[ИмяЭлементаСнизуОтЦены + ИндексПП].Видимость = Истина;
			Элементы[ИмяЭлементаЦена + ИндексПП].Ширина = 2;
			
		Иначе
			
			ЦенаТекстом = "";
			Если ЗначениеЗаполнено(ИзбраннаяПозиция.Цена) Тогда
				ЦенаТекст = Формат(ИзбраннаяПозиция.Цена, "ЧДЦ=2");
				ДлинаЦены = СтрДлина(ЦенаТекст);
				НужноДлину = ((9 - ДлинаЦены) * 2) + ДлинаЦены - ?(ДлинаЦены < 7, 1, 0);
				ЦенаТекстом = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ЦенаТекст, НужноДлину, " ");
			КонецЕсли;
			Элементы[ИмяЭлементаЦена + ИндексПП].ТекстНевыбраннойКартинки = ЦенаТекстом;
			
			ОстатокТекстом = "";
			Если ЗначениеЗаполнено(ИзбраннаяПозиция.Доступно) И Форма.ОтображатьОстаток
				И ЗначениеЗаполнено(ИзбраннаяПозиция.ИмяЭлемента) Тогда
				ОстатокТекстом = СтрШаблон(НСтр("ru = '%1 %2'"),Формат(ИзбраннаяПозиция.Доступно, "ЧДЦ=3"), ИзбраннаяПозиция.ПредставлениеЕдиницыИзмерения);
			КонецЕсли;
			Элементы[ИмяЭлементаСлеваОтЦены + ИндексПП].ТекстНевыбраннойКартинки = ОстатокТекстом;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИзбраннаяПозиция.ИмяЭлемента) Тогда
			Элементы[ИмяЭлементаТекст + ИндексПП].ТекстНевыбраннойКартинки = ИзбраннаяПозиция.ИмяЭлемента;
		Иначе
			
			Элементы[ИмяЭлементаКартинка + ИндексПП].РастягиватьПоГоризонтали = Истина;
			Элементы[ИмяЭлементаКартинка + ИндексПП].АвтоМаксимальнаяШирина = Истина;
			Элементы[ИмяЭлементаКартинка + ИндексПП].МаксимальнаяШирина = 0;
			Элементы[ИмяЭлементаКартинка + ИндексПП].Ширина = 0;
			Элементы[ИмяЭлементаПравойГруппы + ИндексПП].РастягиватьПоГоризонтали = Ложь;
			Элементы[ИмяЭлементаПравойГруппы + ИндексПП].Ширина = 7;
			Элементы[ИмяЭлементаСлеваОтЦены + ИндексПП].Видимость = Ложь;
			
			Если ИзбраннаяПозиция.ЭтоКатегория Тогда
				Элементы[ИмяЭлементаТекст + ИндексПП].Видимость = Ложь;
				Элементы[ИмяЭлементаПравойГруппы + ИндексПП].Ширина = 2;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКнопкиПлиток(Форма) Экспорт
	
	ДанныеПлиток = Форма.ОпорныеДанные;
	ДанныеКнопокПлиток = Форма.ДанныеКнопокПлиток;
	ДанныеДляПлитки = Форма.ДанныеДляПлитки;
	
	Если ДанныеКнопокПлиток.Количество() = 0 Или ДанныеДляПлитки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЦветФормы = Форма.ЦветаФормы.ФонФормы;
	Элементы = Форма.Элементы;
	ПредставлениеВалюты = Форма.ПредставлениеВалюты;
	КоличествоПлитокНаСтранице = Форма.КоличествоЭлементовВРяду * Форма.КоличествоРядовНаСтранице;
	КоличествоИндексов = КоличествоПлитокНаСтранице - 1;
	
	ЕстьСледующаяСтраница = Ложь;
	ЕстьПредыдущаяСтраница = Ложь;
	ПервыйИндексПлитки = Форма.ТекущийПервыйИндексПлитки;
	НомерКатегорииПредыдущий = Неопределено;
	ДанныеПлитокДляЗаполнения = Новый Массив;
	ОтображатьОстаток = Форма.ОтображатьОстаток;
	Для Индекс = 0 По КоличествоПлитокНаСтранице Цикл
		СтрокаПоИндексу = ПолучитьЭлементМассиваПоИндеску(ДанныеДляПлитки, ПервыйИндексПлитки + Индекс);
		Если СтрокаПоИндексу = Неопределено Тогда
			Прервать;
		КонецЕсли;
		Если Не Индекс = 0 И Не СтрокаПоИндексу.НомерКатегорииРазмещенияЭлемента = НомерКатегорииПредыдущий Тогда
			Прервать;
		КонецЕсли;
		
		Если Индекс = 0 И СтрокаПоИндексу.ИндексПозицииВКатегории > 1 Тогда
			ЕстьПредыдущаяСтраница = Истина;
		КонецЕсли;
		
		Если Индекс > КоличествоИндексов Тогда
			ЕстьСледующаяСтраница = Истина;
		Иначе
			НомерКатегорииПредыдущий = СтрокаПоИндексу.НомерКатегорииРазмещенияЭлемента;
			ДанныеПлитокДляЗаполнения.Добавить(СтрокаПоИндексу);
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ПерейтиДалее.Доступность = ЕстьСледующаяСтраница;
	Элементы.ПерейтиНазад.Доступность = ЕстьПредыдущаяСтраница;
	Элементы.ПерейтиНаНачальнуюСтраницу.Доступность = (ПервыйИндексПлитки > 0);
	
	КоличествоНаСтранице = ДанныеПлитокДляЗаполнения.Количество();
	ИмяОсновнойГруппы = "Плитка_Элемент07_";
	ИмяЭлементаКартинка = "Плитка_Элемент09_";
	ИмяЭлементаКартинкаПапка = "Плитка_Элемент10_";
	ИмяЭлементаЛинии = "Плитка_Элемент04_";
	ИмяЭлементаСтраницыЛинии = "Плитка_Элемент02_";
	ИмяЭлементаСтраницаЛинии = "Плитка_Элемент03_";
	ИмяЭлементаТекст = "Плитка_Элемент08_";
	ИмяЭлементаЦена = "Плитка_Элемент11_";
	ИмяЭлементаОстаток = "Плитка_Элемент12_";
	
	Для ИндексПП = 0 По КоличествоИндексов Цикл 
		
		ПозицияКнопки = ДанныеКнопокПлиток[ИндексПП];
		ПозицияКнопки.АдресИзображения = "";
		ПозицияКнопки.ПервыйИндексПлитки = -1;
		ПозицияКнопки.ЭтоКатегория = Ложь;
		ПозицияКнопки.Номенклатура = Неопределено;
		ПозицияКнопки.Характеристика = Неопределено;
		ПозицияКнопки.ЭтоТекущаяКатегория = Ложь;
		ПозицияКнопки.ИмеетсяВложенность = Ложь;
		
		Элементы[ИмяЭлементаКартинка + ИндексПП].Видимость = Истина;
		Элементы[ИмяЭлементаКартинкаПапка + ИндексПП].Видимость = Ложь;
		Элементы[ИмяОсновнойГруппы + ИндексПП].Доступность = Истина;
		Элементы[ИмяОсновнойГруппы + ИндексПП].ЦветФона = ЦветФормы;
		Элементы[ИмяЭлементаЛинии + ИндексПП].ЦветФона = ЦветФормы;
		Элементы[ИмяЭлементаСтраницыЛинии + ИндексПП].ТекущаяСтраница = Элементы[ИмяЭлементаСтраницаЛинии + ИндексПП];
		Элементы[ИмяЭлементаТекст + ИндексПП].ТекстНевыбраннойКартинки = "";
		Если ОтображатьОстаток Тогда
			Элементы[ИмяЭлементаОстаток + ИндексПП].Заголовок = "";
			НаименованиеЭлемента = "Заголовок";
		Иначе
			НаименованиеЭлемента = "ТекстНевыбраннойКартинки";
		КонецЕсли;
		
		Элементы[ИмяЭлементаЦена + ИндексПП][НаименованиеЭлемента] = "";
		
		Если ИндексПП + 1 > КоличествоНаСтранице Тогда
			Элементы[ИмяОсновнойГруппы + ИндексПП].Доступность = Ложь;
			Продолжить;
		КонецЕсли;
		
		СтрокаДанныхЭлементаПлитки = ДанныеПлитокДляЗаполнения[ИндексПП];
		ИзбраннаяПозиция = ДанныеПлиток.НайтиПоИдентификатору(СтрокаДанныхЭлементаПлитки.ИндексИзОпорныхДанных);
		
		Если ЗначениеЗаполнено(ИзбраннаяПозиция.АдресИзображения) Тогда
			ПозицияКнопки.АдресИзображения = ИзбраннаяПозиция.АдресИзображения;
		Иначе
			Если ИзбраннаяПозиция.ЭтоКатегория Тогда
				Элементы[ИмяЭлементаКартинка + ИндексПП].Видимость = Ложь;
				Элементы[ИмяЭлементаКартинкаПапка + ИндексПП].Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ОтображатьОстаток Тогда
			Элементы[ИмяЭлементаОстаток + ИндексПП].ЦветТекста = ИзбраннаяПозиция.ЦветШрифта;
		КонецЕсли;
		
		ПозицияКнопки.ЭтоКатегория = ИзбраннаяПозиция.ЭтоКатегория;
		ПозицияКнопки.ИмеетсяВложенность = ИзбраннаяПозиция.ИмеетсяВложенность;
		Элементы[ИмяЭлементаЛинии + ИндексПП].ЦветФона = ИзбраннаяПозиция.ЦветФона;
		Элементы[ИмяОсновнойГруппы + ИндексПП].ЦветФона = ИзбраннаяПозиция.ЦветФона;
		Элементы[ИмяЭлементаТекст + ИндексПП].ЦветТекста = ИзбраннаяПозиция.ЦветШрифта;
		Элементы[ИмяЭлементаЦена + ИндексПП].ЦветТекста = ИзбраннаяПозиция.ЦветШрифта;
		
		Если ЗначениеЗаполнено(ИзбраннаяПозиция.Цена) И Не ИзбраннаяПозиция.ЭтоКатегория Тогда
			ЦенаВФормате = Формат(ИзбраннаяПозиция.Цена, "ЧДЦ=2");
			ЦенаТекст = СтрШаблон(НСтр("ru = '%1 %2'"), ЦенаВФормате, ПредставлениеВалюты);
			Элементы[ИмяЭлементаЦена + ИндексПП][НаименованиеЭлемента] = ЦенаТекст;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИзбраннаяПозиция.Доступно) И Не ИзбраннаяПозиция.ЭтоКатегория
			И ОтображатьОстаток Тогда
			ДоступноВФормате = Формат(ИзбраннаяПозиция.Доступно, "ЧДЦ=2");
			ДоступноТекст = СтрШаблон(НСтр("ru = '%1 %2'"), ДоступноВФормате, ИзбраннаяПозиция.ПредставлениеЕдиницыИзмерения);
			Элементы[ИмяЭлементаОстаток + ИндексПП].Заголовок = ДоступноТекст;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИзбраннаяПозиция.ИмяЭлемента) Тогда
			Элементы[ИмяЭлементаТекст + ИндексПП].ТекстНевыбраннойКартинки = ИзбраннаяПозиция.ИмяЭлемента;
		КонецЕсли;
		
		Если ИзбраннаяПозиция.ЭтоКатегория ИЛИ ИзбраннаяПозиция.ИмеетсяВложенность Тогда
			ПозицияКнопки.ПервыйИндексПлитки = СтрокаДанныхЭлементаПлитки.ПервыйИндексПлитки;
			Если СтрокаДанныхЭлементаПлитки.НомерКатегории = 0 Тогда
				ПозицияКнопки.ЭтоТекущаяКатегория = Истина;
			КонецЕсли;
		Иначе
			ПозицияКнопки.Номенклатура = ИзбраннаяПозиция.Номенклатура;
			ПозицияКнопки.Характеристика = ИзбраннаяПозиция.Характеристика;
			ПозицияКнопки.ИмеетсяВложенность = ИзбраннаяПозиция.ИмеетсяВложенность;
			ПозицияКнопки.ПервыйИндексПлитки = СтрокаДанныхЭлементаПлитки.ПорядковыйНомер;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НекорректноВведеныЦифрыДаты(МассивЦифрДаты) Экспорт

	РезультатФункции = Ложь;
	МассивОписанияОграничений = МассивОграниченийЦифрДаты();
	
	КопияМассиваСЦифрами = Новый Массив;
	КоличествоЭлементов = МассивЦифрДаты.Количество();
	ИндексЭлемента = 0;
	Пока ИндексЭлемента < КоличествоЭлементов Цикл
		КопируемоеЗначение = МассивЦифрДаты[ИндексЭлемента];
		Если КопируемоеЗначение = Неопределено Тогда
			КопируемоеЗначение = 0;
		КонецЕсли;
		КопияМассиваСЦифрами.Добавить(КопируемоеЗначение);
		ИндексЭлемента = ИндексЭлемента + 1;
	КонецЦикла;
	
	ИндексЭлементаОписания = 0;
	Пока ИндексЭлементаОписания < МассивОписанияОграничений.Количество() И Не РезультатФункции Цикл
		ОписаниеОграничения = МассивОписанияОграничений[ИндексЭлементаОписания];
		ПроверяемоеЗначение = КопияМассиваСЦифрами[ОписаниеОграничения.НомерПозиции];
		Если Не ПроверяемоеЗначение = Неопределено Тогда
			Если ЗначениеЗаполнено(ОписаниеОграничения.ТекстУсловия) Тогда
				ТекстВычисления = "КопияМассиваСЦифрами" + ОписаниеОграничения.ТекстУсловия;
				ЗначениеВычисления = Вычислить(ТекстВычисления);
				Если ЗначениеВычисления И ПроверяемоеЗначение > ОписаниеОграничения.МаксимальноеЗначение Тогда
					РезультатФункции = Истина;
				КонецЕсли;
			Иначе
				Если ПроверяемоеЗначение > ОписаниеОграничения.МаксимальноеЗначение Тогда
					РезультатФункции = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ИндексЭлементаОписания = ИндексЭлементаОписания + 1;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Очищает поля ввода новой карты на форме РМК
//
// Параметры:
//  Форма - форма РМК.
//
Процедура ОчиститьПоляВводаНовойКарты(Форма) Экспорт
	
	СтрокаПустая = НСтр("ru = ''");
	Форма.НоваяКартаНомер = СтрокаПустая;
	Форма.НоваяКартаТелефон = СтрокаПустая;
	Форма.НоваяКартаПочта = СтрокаПустая;
	Форма.НоваяКартаФИО = СтрокаПустая;
	Форма.НоваяКартаДатаРождения = СтрокаПустая;
	
КонецПроцедуры

// Очищает поля ввода новой карты на форме РМК, если соответствующие данные не заполнены
//
// Параметры:
//  Форма - форма РМК.
//
Процедура ОчиститьПоляВводаНовойКартыПриНеобходимости(Форма) Экспорт
	
	СтрокаПустая = НСтр("ru = ''");
	Если Не ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеДисконтнойКартыЗаполнены(Форма) Тогда
		Форма.НоваяКартаНомер = СтрокаПустая;
		Если Не ЗначениеЗаполнено(Форма.Объект.Контрагент) Тогда
			Форма.НоваяКартаТелефон = СтрокаПустая;
			Форма.НоваяКартаПочта = СтрокаПустая;
			Форма.НоваяКартаФИО = СтрокаПустая;
			Форма.НоваяКартаДатаРождения = СтрокаПустая;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСозданнойКартыНаСервереЛояльности(Форма, ДанныеОтвета) Экспорт

	СтрокаXMLТолькоЧастьДата = Лев(ДанныеОтвета.DateOfBirth, 10);
	СтрокаДатыДляПреобразования = СтрЗаменить(СтрокаXMLТолькоЧастьДата, "-", "");
	ДатаРожденияКлиента = Дата(СтрокаДатыДляПреобразования);
	ДатаРожденияСтрокой = ?(ЗначениеЗаполнено(ДатаРожденияКлиента),
							Формат(ДатаРожденияКлиента, "ДЛФ=D"), "");
	
	Форма.НайденнаяКартаНомер = ДанныеОтвета.CardID;
	Форма.НайденнаяКартаФИО = ДанныеОтвета.Client;
	Форма.НайденнаяКартаДатаРождения = ДатаРожденияСтрокой;
	Форма.НайденнаяКартаТелефон = ДанныеОтвета.PhoneNumber;
	Форма.НайденнаяКартаПочта = ДанныеОтвета.Email;
	
	Форма.НоваяКартаФИО = ДанныеОтвета.Client;
	Форма.НоваяКартаПочта = ДанныеОтвета.Email;
	Форма.НоваяКартаДатаРождения = ДатаРожденияСтрокой;
	
	МаскаТелефона = ИнтерфейсРМКСлужебныйКлиентСервер.МаскаВводаТелефона();
	Форма.ОтправкаЧекаПочта = ДанныеОтвета.Email;
	Форма.ОтправкаЧекаТелефон
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПривестиЗначениеКМаскеТелефона(ДанныеОтвета.PhoneNumber, МаскаТелефона);
	
	Форма.ПараметрыКартыЛояльности = ИнтерфейсРМКСлужебныйКлиентСервер.ПараметрыКартыЛояльности();
	Форма.ПараметрыКартыЛояльности.ИдентификаторКарты = ДанныеОтвета.CardRef;
	Форма.ПараметрыКартыЛояльности.КодКарты = ДанныеОтвета.CardID;
	Форма.ПараметрыКартыЛояльности.ФИО = ДанныеОтвета.Client;
	Форма.ПараметрыКартыЛояльности.НомерТелефонаВладельцаКарты = ДанныеОтвета.PhoneNumber;
	Форма.ПараметрыКартыЛояльности.АдресЭПВладельцаКарты = ДанныеОтвета.Email;
	Форма.ПараметрыКартыЛояльности.ДатаРождения = ДатаРожденияКлиента;
	
	ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьДоступностьСозданияКарты(Форма, Ложь, Ложь);
	
КонецПроцедуры

Процедура ДополнитьФормуЛокальнойКартойКлиента(Форма, ДанныеКартыКлиента) Экспорт
	
	Если ЗначениеЗаполнено(ДанныеКартыКлиента.Карта) Тогда
		Форма.Объект.ДисконтнаяКарта = ДанныеКартыКлиента.Карта;
		Форма.НайденнаяКартаНомер = ДанныеКартыКлиента.НомерКарты;
		Форма.НоваяКартаНомер = ДанныеКартыКлиента.НомерКарты;
		ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьДоступностьСозданияКарты(Форма, Ложь, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьСвойстваКнопкиПробитьИОтправить(Форма, РедактированиеПочты = Ложь,
		РедактированиеТелефона = Ложь) Экспорт

	Элементы = Форма.Элементы;
	ЗаполненаКонтактнаяИнформация
		= ЗаполненаКонтактнаяИнформацияДляОтправкиЧека(Форма, РедактированиеПочты, РедактированиеТелефона);
	ПродолжениеДоступно = (Форма.ХочуБумажныйЧек Или ЗаполненаКонтактнаяИнформация);
	СтраницаПробития = Элементы.ГруппаСтраницаКнопкаПробитьИОтправить;
	Если ЗаполненаКонтактнаяИнформация И Не Форма.ХочуБумажныйЧек Тогда
		СтраницаПробития = Элементы.ГруппаСтраницаКнопкаОтправитьЧек;
	ИначеЕсли Форма.ХочуБумажныйЧек И Не ЗаполненаКонтактнаяИнформация Тогда
		СтраницаПробития = Элементы.ГруппаСтраницаКнопкаПробитьЧек;
	КонецЕсли;
	Элементы.ГруппаСтраницыКнопкиОтправитьЧек.Доступность = ПродолжениеДоступно;
	Если Не Элементы.ГруппаСтраницыКнопкиОтправитьЧек.ТекущаяСтраница = СтраницаПробития Тогда
		Элементы.ГруппаСтраницыКнопкиОтправитьЧек.ТекущаяСтраница = СтраницаПробития;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполненаКонтактнаяИнформацияДляОтправкиЧека(Форма, РедактированиеПочты = Ложь,
		РедактированиеТелефона = Ложь) Экспорт
	
	РезультатФункции = Ложь;
	
	Элементы = Форма.Элементы;
	СтрокаТелефона = ?(РедактированиеТелефона, Элементы.ОтправкаЧекаТелефон.ТекстРедактирования,
		Форма.ОтправкаЧекаТелефон);
	СтрокаПочты = ?(РедактированиеПочты, Элементы.ОтправкаЧекаПочта.ТекстРедактирования, Форма.ОтправкаЧекаПочта);
	
	НомерТелефонаДляОтправки = ОбщегоНазначенияРМККлиентСервер.ПодготовитьНомерТелефона(СтрокаТелефона);
	НомерТелефонаВведенКорректно = ЗначениеЗаполнено(НомерТелефонаДляОтправки);
	
	АдресЭлектроннойПочтыВведенКорректно = Ложь;
	Если Не Форма.РежимКассыСамообслуживания Тогда
		АдресЭлектроннойПочтыВведенКорректно =
			ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(СтрокаПочты);
	КонецЕсли;
		
	Если НомерТелефонаВведенКорректно Или АдресЭлектроннойПочтыВведенКорректно Тогда
		РезультатФункции = Истина;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ИнициализироватьТипыПостроенияПлитки(Форма) Экспорт
	
	Форма.ТипыПостроенияПлитки = Новый Структура;
	Форма.ТипыПостроенияПлитки.Вставить("ПоПалитре", 0);
	Форма.ТипыПостроенияПлитки.Вставить("ВесовойТовар", 1);
	Форма.ТипыПостроенияПлитки.Вставить("РаспознанныйВесовойТовар", 2);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьЭлементМассиваПоИндеску(ИсходныйМассив, ИндексЭлемента)
	
	СтрокаЭлемента = Неопределено;
	
	Если ИсходныйМассив.Количество() > ИндексЭлемента Тогда
		СтрокаЭлемента = ИсходныйМассив[ИндексЭлемента];
	КонецЕсли;
	
	Возврат СтрокаЭлемента;
	
КонецФункции

Функция ШаблонЭлементаПлитки()
	
	ШаблонЭлемента = Новый Структура;
	ШаблонЭлемента.Вставить("ПорядковыйНомер", -1);
	ШаблонЭлемента.Вставить("ИндексИзОпорныхДанных", -1);
	ШаблонЭлемента.Вставить("НомерКатегории", -1);
	ШаблонЭлемента.Вставить("ИндексПозицииВКатегории", -1);
	ШаблонЭлемента.Вставить("НомерКатегорииРазмещенияЭлемента", -1);
	ШаблонЭлемента.Вставить("ПервыйИндексПлитки", 0);
	ШаблонЭлемента.Вставить("Наименование", "");
	ШаблонЭлемента.Вставить("ИмяДействия", "");
	
	Возврат ШаблонЭлемента;
	
КонецФункции

Процедура ПодготовитьДанныеДляПлиткиПоПалитре(Форма)
	
	ОпорныеДанные = Форма.ОпорныеДанные;
	ИсточникиДанныхПлитки = ИнтерфейсРМКСлужебныйКлиентСервер.ИсточникиДанныхДляПлитки();
	ИсточникПалитра = ИсточникиДанныхПлитки.Палитра;
	ПорядковыйНомер = 0;
	Для Каждого СтрокаОпорныхДанных Из ОпорныеДанные Цикл
		Если СтрокаОпорныхДанных.ИсточникПлитки = ИсточникПалитра Тогда
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ЕстьВесовойТоварВПалитре")
					И СтрокаОпорныхДанных.Весовой И Не Форма.ЕстьВесовойТоварВПалитре Тогда
				Форма.ЕстьВесовойТоварВПалитре = Истина;
			КонецЕсли;
			НовыйЭлемент = ШаблонЭлементаПлитки();
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтрокаОпорныхДанных, , "ИмяДействия");
			НовыйЭлемент.ИндексИзОпорныхДанных = ОпорныеДанные.Индекс(СтрокаОпорныхДанных);
			НовыйЭлемент.ПорядковыйНомер = ПорядковыйНомер;
			Форма.ДанныеДляПлитки.Добавить(НовыйЭлемент);
			
			ПорядковыйНомер = ПорядковыйНомер + 1;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьДанныеВесовыхТоваровДляПлитки(Форма)
	
	ОпорныеДанные = Форма.ОпорныеДанные;
	ДанныеДляПлитки = Форма.ДанныеДляПлитки;

	КоличествоСлужебныхЭлементов = 0;
	
	ПеренесенныеГруппы = Новый Массив;
	РасчетныеПараметры = Новый Структура();
	РасчетныеПараметры.Вставить("ПеренесенныеГруппы", ПеренесенныеГруппы);
	РасчетныеПараметры.Вставить("КоличествоСлужебныхЭлементов", КоличествоСлужебныхЭлементов);
	РасчетныеПараметры.Вставить("ИсходноеКоличество", ОпорныеДанные.Количество());
	
	ИндексОбхода = 0;
	Пока ИндексОбхода < РасчетныеПараметры.ИсходноеКоличество Цикл
		ИндексЭлемента = РасчетныеПараметры.ИсходноеКоличество - ИндексОбхода - 1;
		СтрокаОпорныхДанных = ОпорныеДанные.Получить(ИндексЭлемента);
		Если СтрокаОпорныхДанных.Весовой Тогда
			
			ПеренестиЭлементВДанныеДляПлитки(ДанныеДляПлитки, ОпорныеДанные, СтрокаОпорныхДанных, РасчетныеПараметры);
			ДобавитьГруппуПлиткиПриНеобходимости(ДанныеДляПлитки, СтрокаОпорныхДанных,
				ОпорныеДанные, ИндексЭлемента, РасчетныеПараметры);
			
		КонецЕсли;
		ИндексОбхода = ИндексОбхода + 1;
	КонецЦикла;
	КолонкиСравнения = СтрРазделить("НомерКатегорииРазмещенияЭлемента,ИндексПозицииВКатегории", ",");
	ОтсортироватьМассивСтруктурВДиапазоне(ДанныеДляПлитки, КолонкиСравнения, 0, ДанныеДляПлитки.Количество() - 1);
	
	ПервыеИндексыВКатегориях = Новый Соответствие;
	ХранилищеГрупп = Новый Соответствие;
	ПорядковыйНомер = 0;
	СчетчикПозицииВКатегории = 1;
	ПредыдущийНомерКатегорииРазмещения = 0;
	Для Каждого ОписаниеДляПлитки Из ДанныеДляПлитки Цикл
		Если ОписаниеДляПлитки.НомерКатегории > 0 Тогда
			НовыйНомерКатагории = РасчетныеПараметры.ПеренесенныеГруппы.Найти(ОписаниеДляПлитки.НомерКатегории);
			Если Не НовыйНомерКатагории = Неопределено Тогда
				ОписаниеДляПлитки.НомерКатегории = НовыйНомерКатагории + 1;
			КонецЕсли;
			ХранилищеГрупп.Вставить(ОписаниеДляПлитки.НомерКатегории, ОписаниеДляПлитки);
		КонецЕсли;
		Если ОписаниеДляПлитки.НомерКатегорииРазмещенияЭлемента > 0 Тогда
			НовыйНомер = РасчетныеПараметры.ПеренесенныеГруппы.Найти(ОписаниеДляПлитки.НомерКатегорииРазмещенияЭлемента);
			Если Не НовыйНомер = Неопределено Тогда
				ОписаниеДляПлитки.НомерКатегорииРазмещенияЭлемента = НовыйНомер + 1;
			КонецЕсли;
		КонецЕсли;
		Если ПредыдущийНомерКатегорииРазмещения <> ОписаниеДляПлитки.НомерКатегорииРазмещенияЭлемента Тогда
			СчетчикПозицииВКатегории = 1;
			ПервыеИндексыВКатегориях.Вставить(ОписаниеДляПлитки.НомерКатегорииРазмещенияЭлемента, ПорядковыйНомер);
			Если ОписаниеДляПлитки.НомерКатегорииРазмещенияЭлемента > 0 Тогда
				СтрокаРодителя = ХранилищеГрупп.Получить(ОписаниеДляПлитки.НомерКатегорииРазмещенияЭлемента);
				Если Не СтрокаРодителя = Неопределено Тогда
					СтрокаРодителя.ПервыйИндексПлитки = ПорядковыйНомер;
					ЗначениеПервогоИндекса = ПервыеИндексыВКатегориях.Получить(СтрокаРодителя.НомерКатегорииРазмещенияЭлемента);
					Если Не ЗначениеПервогоИндекса = Неопределено Тогда
						ОписаниеДляПлитки.ПервыйИндексПлитки = ЗначениеПервогоИндекса;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ПредыдущийНомерКатегорииРазмещения = ОписаниеДляПлитки.НомерКатегорииРазмещенияЭлемента;
		КонецЕсли;
		
		ОписаниеДляПлитки.ИндексПозицииВКатегории = СчетчикПозицииВКатегории;
		ОписаниеДляПлитки.ПорядковыйНомер = ПорядковыйНомер;
		
		СчетчикПозицииВКатегории = СчетчикПозицииВКатегории + 1;
		ПорядковыйНомер = ПорядковыйНомер + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСлужебныйЭлементПлитки(ДанныеДляПлитки, НаименованиеЭлемента, ИмяДействия,
		ИндексПозицииВКатегории)
	
	НовыйЭлемент = ШаблонЭлементаПлитки();
	НовыйЭлемент.НомерКатегории = 0;
	НовыйЭлемент.ИндексПозицииВКатегории = ИндексПозицииВКатегории;
	НовыйЭлемент.НомерКатегорииРазмещенияЭлемента = 0;
	НовыйЭлемент.ПервыйИндексПлитки = 0;
	НовыйЭлемент.Наименование = НаименованиеЭлемента;
	НовыйЭлемент.ИмяДействия = ИмяДействия;
	
	ДанныеДляПлитки.Вставить(0, НовыйЭлемент);
	
КонецПроцедуры

Процедура ДобавитьГруппуПлиткиПриНеобходимости(ДанныеДляПлитки, СтрокаОпорныхДанных,
		ОпорныеДанные, ИндексЭлемента, РасчетныеПараметры)

	НомерКатегорииРодителя = СтрокаОпорныхДанных.НомерКатегорииРазмещенияЭлемента;
	Если НомерКатегорииРодителя > 0
			И РасчетныеПараметры.ПеренесенныеГруппы.Найти(НомерКатегорииРодителя) = Неопределено Тогда
			
		ДанныеРодителя = ПолучитьДанныеРодителяЭлемента(ОпорныеДанные, НомерКатегорииРодителя, ИндексЭлемента);
		Если Не ДанныеРодителя.СтрокаРодителя = Неопределено Тогда
			
			СтрокаРодителя = ДанныеРодителя.СтрокаРодителя;
			ПеренестиЭлементВДанныеДляПлитки(ДанныеДляПлитки, ОпорныеДанные, СтрокаРодителя, РасчетныеПараметры);
			ПеренестиЭлементВДанныеДляПлитки(ДанныеДляПлитки, ОпорныеДанные, ДанныеРодителя.СтрокаВозврата, РасчетныеПараметры);
			ВставитьНомерВМассивВПорядкеВозрастания(РасчетныеПараметры.ПеренесенныеГруппы, НомерКатегорииРодителя);
			ДобавитьГруппуПлиткиПриНеобходимости(ДанныеДляПлитки, СтрокаРодителя,
				ОпорныеДанные, ДанныеРодителя.ИндексРодителя, РасчетныеПараметры);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренестиЭлементВДанныеДляПлитки(ДанныеДляПлитки, ОпорныеДанные, СтрокаОпорныхДанных, РасчетныеПараметры)
	
	НовыйЭлемент = ШаблонЭлементаПлитки();
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтрокаОпорныхДанных, , "ИмяДействия,ПервыйИндексПлитки");
	НовыйЭлемент.ИндексИзОпорныхДанных = ОпорныеДанные.Индекс(СтрокаОпорныхДанных);
	Если НовыйЭлемент.НомерКатегорииРазмещенияЭлемента = 0 Тогда
		НовыйЭлемент.ИндексПозицииВКатегории
			= СтрокаОпорныхДанных.ИндексПозицииВКатегории + РасчетныеПараметры.КоличествоСлужебныхЭлементов;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаОпорныхДанных.Номенклатура) Тогда
		НовыйЭлемент.НомерКатегории = 0;
	КонецЕсли;
	ДанныеДляПлитки.Вставить(0, НовыйЭлемент);
	
КонецПроцедуры

Функция ПолучитьДанныеРодителяЭлемента(ОпорныеДанные, НомерКатегории, ИндексПодчиненногоЭлемента)
	
	ИндексРодителя = -1;
	СтрокаРодителя = Неопределено;
	СтрокаВозврата = Неопределено;
	
	ИндексОбхода = ИндексПодчиненногоЭлемента - 1;
	Пока ИндексОбхода >= 0 И ИндексРодителя < 0 Цикл
		ПроверяемаяСтрока = ОпорныеДанные.Получить(ИндексОбхода);
		Если ПроверяемаяСтрока.НомерКатегории = НомерКатегории Тогда
			СтрокаРодителя = ПроверяемаяСтрока;
			ИндексРодителя = ИндексОбхода;
		ИначеЕсли ПроверяемаяСтрока.НомерКатегорииРазмещенияЭлемента = НомерКатегории И ПроверяемаяСтрока.НомерКатегории = 0
				И ПроверяемаяСтрока.ЭтоКатегория Тогда
			СтрокаВозврата = ПроверяемаяСтрока;
		КонецЕсли;
		ИндексОбхода = ИндексОбхода - 1;
	КонецЦикла;
	
	РезультатФункции = Новый Структура();
	РезультатФункции.Вставить("СтрокаРодителя", СтрокаРодителя);
	РезультатФункции.Вставить("СтрокаВозврата", СтрокаВозврата);
	РезультатФункции.Вставить("ИндексРодителя", ИндексРодителя);
	Возврат РезультатФункции;
	
КонецФункции

Процедура ВставитьНомерВМассивВПорядкеВозрастания(МассивНомеров, ВставляемыйНомер)
	
	ЭлементДобавлен = Ложь;
	ИндексЭлемента = 0;
	Пока ИндексЭлемента < МассивНомеров.Количество() И Не ЭлементДобавлен Цикл
		ТекущийНомер = МассивНомеров[ИндексЭлемента];
		Если ТекущийНомер > ВставляемыйНомер Тогда
			МассивНомеров.Вставить(ИндексЭлемента, ВставляемыйНомер);
			ЭлементДобавлен = Истина;
		КонецЕсли;
		ИндексЭлемента = ИндексЭлемента + 1;
	КонецЦикла;
	Если Не ЭлементДобавлен Тогда
		МассивНомеров.Добавить(ВставляемыйНомер);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтсортироватьМассивСтруктурВДиапазоне(СортируемыйМассив, КолонкиСравнения,
		Знач НачальныйИндекс, Знач КонечныйИндекс)

	СреднийИндекс = Цел((НачальныйИндекс + КонечныйИндекс) / 2);
	ИсходныйНачальныйИндекс = НачальныйИндекс;
	Если СреднийИндекс >= 0 И СортируемыйМассив.Количество() > 0 Тогда
		СреднийЭлемент = СортируемыйМассив[СреднийИндекс];
		Пока НачальныйИндекс <= КонечныйИндекс Цикл 
			
			Если НачальныйИндекс = СреднийИндекс Тогда
				НачальныйИндекс = НачальныйИндекс + 1;
			Иначе
				
				ПроверяемыйЭлемент = СортируемыйМассив[НачальныйИндекс];
				Если ПроверяемоеЗначениеБольше(СреднийЭлемент, ПроверяемыйЭлемент, КолонкиСравнения) Тогда
					Если НачальныйИндекс < СреднийИндекс Тогда
						СортируемыйМассив.Удалить(НачальныйИндекс);
						СортируемыйМассив.Вставить(КонечныйИндекс, ПроверяемыйЭлемент);
						СреднийИндекс = СреднийИндекс - 1;
					Иначе
						НачальныйИндекс = НачальныйИндекс + 1;
					КонецЕсли;
				Иначе
					Если НачальныйИндекс > СреднийИндекс Тогда 
					СортируемыйМассив.Удалить(НачальныйИндекс);
					СортируемыйМассив.Вставить(СреднийИндекс, ПроверяемыйЭлемент);
					СреднийИндекс = СреднийИндекс + 1;
					КонецЕсли;
					НачальныйИндекс = НачальныйИндекс + 1;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		Если СреднийИндекс > ИсходныйНачальныйИндекс + 1 Тогда
			ОтсортироватьМассивСтруктурВДиапазоне(СортируемыйМассив, КолонкиСравнения,
				ИсходныйНачальныйИндекс, СреднийИндекс - 1);
		КонецЕсли;
		Если СреднийИндекс + 1 < КонечныйИндекс Тогда
			ОтсортироватьМассивСтруктурВДиапазоне(СортируемыйМассив, КолонкиСравнения,
				СреднийИндекс + 1, КонечныйИндекс);
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

Функция ПроверяемоеЗначениеБольше(ИсходноеЗначение, ПроверяемоеЗначение, КолонкиСравнения)
	
	Результатфункции = Ложь;
	ЭлементыРавны = Истина;
	КоличествоКолонок = КолонкиСравнения.Количество();
	ИндексСравнения = 0;
	Пока ЭлементыРавны И ИндексСравнения < КоличествоКолонок Цикл
		Колонкасравнения = КолонкиСравнения[ИндексСравнения];
		Если ПроверяемоеЗначение[Колонкасравнения] > ИсходноеЗначение[Колонкасравнения] Тогда
			ЭлементыРавны = Ложь;
			Результатфункции = Истина;
		ИначеЕсли ПроверяемоеЗначение[Колонкасравнения] < ИсходноеЗначение[Колонкасравнения] Тогда
			ЭлементыРавны = Ложь;
		КонецЕсли;
		ИндексСравнения = ИндексСравнения + 1;
	КонецЦикла;
	
	Возврат Результатфункции;
	
КонецФункции

Функция МассивОграниченийЦифрДаты()
	
	МассивОграничений = Новый Массив;
	ДобавитьОграничениеЦифрДаты(МассивОграничений, 0, 3, "");
	ДобавитьОграничениеЦифрДаты(МассивОграничений, 1, 1, "[0] > 2");
	ДобавитьОграничениеЦифрДаты(МассивОграничений, 2, 1, "");
	ДобавитьОграничениеЦифрДаты(МассивОграничений, 3, 2, "[2] > 0");
	
	Возврат МассивОграничений;
	
КонецФункции

Процедура ДобавитьОграничениеЦифрДаты(МассивОграничений, НомерПозиции, МаксимальноеЗначение, ТекстУсловия)
	
	ОписаниеОграничения = Новый Структура;
	ОписаниеОграничения.Вставить("НомерПозиции", НомерПозиции);
	ОписаниеОграничения.Вставить("МаксимальноеЗначение", МаксимальноеЗначение);
	ОписаниеОграничения.Вставить("ТекстУсловия", ТекстУсловия);
	МассивОграничений.Добавить(ОписаниеОграничения);
	
КонецПроцедуры

#КонецОбласти