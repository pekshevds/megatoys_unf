#Область ПрограммныйИнтерфейс

Функция ОписаниеПоказателейРасчетаРезерваОтпусков() Экспорт
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить(Показатель_СохраняемыйЗаработок());
	МассивПоказателей.Добавить(Показатель_ОстатокОтпуска());
	
	СоответствиеПоказателей = Новый Соответствие;
	СоответствиеПоказателей.Вставить(Показатель_СохраняемыйЗаработок(), Показатель_СохраняемыйЗаработокПредставление());
	СоответствиеПоказателей.Вставить(Показатель_ОстатокОтпуска(),       Показатель_ОстатокОтпускаПредставление());
	
	ОписаниеПоказателей = Новый Структура;
	ОписаниеПоказателей.Вставить("ВидРезерваПоОплатеТруда", Перечисления.ВидыРезервовПоОплатеТруда.Отпуск);
	ОписаниеПоказателей.Вставить("МассивПоказателей"      , МассивПоказателей);
	ОписаниеПоказателей.Вставить("Формула"                , ФормулаРасчетаРезерваОтпусков());
	ОписаниеПоказателей.Вставить("Представление"          , СоответствиеПоказателей);
	
	Возврат ОписаниеПоказателей;
	
КонецФункции

Функция ОписаниеПоказателейРасчетаРезерваПремии() Экспорт
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить(Показатель_ПроцентГодовойПремии());
	МассивПоказателей.Добавить(Показатель_РасчетнаяБаза());
	
	СоответствиеПоказателей = Новый Соответствие;
	СоответствиеПоказателей.Вставить(Показатель_ПроцентГодовойПремии(), Показатель_ПроцентГодовойПремииПредставление());
	СоответствиеПоказателей.Вставить(Показатель_РасчетнаяБаза(),        Показатель_РасчетнаяБазаПредставление());
	
	ОписаниеПоказателей = Новый Структура;
	ОписаниеПоказателей.Вставить("ВидРезерваПоОплатеТруда", Перечисления.ВидыРезервовПоОплатеТруда.ГодоваяПремия);
	ОписаниеПоказателей.Вставить("МассивПоказателей"      , МассивПоказателей);
	ОписаниеПоказателей.Вставить("Формула"                , ФормулаРасчетаРезерваГодовойПремии());
	ОписаниеПоказателей.Вставить("Представление"          , СоответствиеПоказателей);
	
	Возврат ОписаниеПоказателей;
	
КонецФункции

Функция ТаблицаПоказателейРасчетаРезервов() Экспорт
	
	ТаблицаПоказателей = РезервыПоОплатеТруда.НоваяТаблицаПоказателейРасчетаРезервов();
	
	ДанныеПоказателейВТаблицу(ТаблицаПоказателей, ОписаниеПоказателейРасчетаРезерваОтпусков());
	ДанныеПоказателейВТаблицу(ТаблицаПоказателей, ОписаниеПоказателейРасчетаРезерваПремии());
	
	Возврат ТаблицаПоказателей;
	
КонецФункции

Процедура ДанныеПоказателейВТаблицу(ТаблицаПоказателей, ОписаниеПоказателей)
	
	НомерСтроки = 1;
	Для Каждого Показатель Из ОписаниеПоказателей.МассивПоказателей Цикл
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		НоваяСтрока.ВидРезерваПоОплатеТруда = ОписаниеПоказателей.ВидРезерваПоОплатеТруда;
		НоваяСтрока.Идентификатор           = Показатель;
		НоваяСтрока.КраткоеНаименование     = ОписаниеПоказателей.Представление[Показатель];
		НоваяСтрока.Формула                 = ОписаниеПоказателей.Формула;
		НоваяСтрока.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьРезервы(СтруктураТаблицРасчета, НастройкаРезервов) Экспорт
	
	РассчитатьРезервыСлужебный(СтруктураТаблицРасчета, НастройкаРезервов);
	
КонецПроцедуры

Функция ДокументРезервыПоОплатеТруда(МесяцНачисления, Организация, ВидРезерва, ВидОперации = Неопределено, ДополнительныеСвойства = Неопределено) Экспорт
	
	ДокументСсылка = Неопределено;
	
	Если ВидОперации = Неопределено Тогда
		ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Начисление;
	КонецЕсли;
	
	НастройкаРезерва = РезервыПоОплатеТрудаДляНебольшихОрганизаций.НастройкаРезерваПоВиду(Организация, ВидРезерва, МесяцНачисления);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РезервыПоОплатеТруда.Ссылка КАК Документ
	|ИЗ
	|	Документ.РезервыПоОплатеТруда КАК РезервыПоОплатеТруда
	|ГДЕ
	|	РезервыПоОплатеТруда.МесяцНачисления = &МесяцНачисления
	|	И РезервыПоОплатеТруда.Организация = &Организация
	|	И РезервыПоОплатеТруда.Резерв = &Резерв
	|	И РезервыПоОплатеТруда.ВидОперации = &ВидОперации
	|	И РезервыПоОплатеТруда.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	РезервыПоОплатеТруда.Дата,
	|	РезервыПоОплатеТруда.Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	Запрос.УстановитьПараметр("Организация",     Организация);
	Запрос.УстановитьПараметр("Резерв",          НастройкаРезерва.Резерв);
	Запрос.УстановитьПараметр("ВидОперации",     ВидОперации);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
	Иначе
		ДокументОбъект = Документы.РезервыПоОплатеТруда.СоздатьДокумент();
		ДокументОбъект.Дата            = ТекущаяДатаСеанса();
		ДокументОбъект.МесяцНачисления = МесяцНачисления;
		ДокументОбъект.Организация     = Организация;
		ДокументОбъект.Резерв          = НастройкаРезерва.Резерв;
		ДокументОбъект.ВидОперации     = ВидОперации;
		
		ОписаниеДокумента = Новый Структура("ДокументСсылка, Организация, Подразделение, ВидОперации, Дата, МесяцНачисления, Резерв, Сотрудники");
		ЗаполнитьЗначенияСвойств(ОписаниеДокумента, ДокументОбъект);
		
		ОписаниеДокумента.Вставить("ДокументСсылка",                      ДокументОбъект.Ссылка);
		ОписаниеДокумента.Вставить("Начисления",                          ДокументОбъект.Начисления.ВыгрузитьКолонки());
		ОписаниеДокумента.Вставить("Взносы",                              ДокументОбъект.Взносы.ВыгрузитьКолонки());
		ОписаниеДокумента.Вставить("РасчетРезервов",                      ДокументОбъект.РасчетРезервов.ВыгрузитьКолонки());
		ОписаниеДокумента.Вставить("ОценочныеОбязательстваПоСотрудникам", ДокументОбъект.ОценочныеОбязательстваПоСотрудникам.ВыгрузитьКолонки());
		ОписаниеДокумента.Вставить("ОценочныеОбязательства",              ДокументОбъект.ОценочныеОбязательства.ВыгрузитьКолонки());
		ОписаниеДокумента.Вставить("ФизическиеЛица",                      ДокументОбъект.ФизическиеЛица.ВыгрузитьКолонки());
	
		ДополнительныеПараметры = РезервыПоОплатеТруда.ДополнительныеПараметрыЗаполненияТаблицДокумента();
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, ОписаниеДокумента);
		
		ДанныеЗаполнения = РезервыПоОплатеТрудаДляНебольшихОрганизаций.ДанныеДляЗаполненияТаблицДокумента(ОписаниеДокумента,
			ОписаниеДокумента.Организация,
			ОписаниеДокумента.Резерв,
			ОписаниеДокумента.МесяцНачисления,
			ДополнительныеПараметры);
			
		ДокументОбъект.Начисления.Загрузить(ДанныеЗаполнения.Начисления);
		ДокументОбъект.Взносы.Загрузить(ДанныеЗаполнения.Взносы);
		ДокументОбъект.РасчетРезервов.Загрузить(ДанныеЗаполнения.РасчетРезервов);
		ДокументОбъект.ОценочныеОбязательстваПоСотрудникам.Загрузить(ДанныеЗаполнения.ОценочныеОбязательстваПоСотрудникам);
		ДокументОбъект.ОценочныеОбязательства.Загрузить(ДанныеЗаполнения.ОценочныеОбязательства);
		
		Для Каждого СтрокаТаблицыИсточника Из ДанныеЗаполнения.Начисления Цикл
			Для Каждого СтрокаТаблицыПоказателей Из СтрокаТаблицыИсточника.Показатели Цикл
				СтрокаПоказателей = ДокументОбъект.Показатели.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПоказателей, СтрокаТаблицыПоказателей);
			КонецЦикла;
		КонецЦикла;
		
		ФизическиеЛицаСотрудников = КадровыйУчет.ФизическиеЛицаСотрудников(ОбщегоНазначения.ВыгрузитьКолонку(ДанныеЗаполнения.Начисления, "Сотрудник", Истина));
		Для Каждого ЗаписьМассива Из ФизическиеЛицаСотрудников Цикл
			НоваяСтрока = ОписаниеДокумента.ФизическиеЛица.Добавить();
			НоваяСтрока.ФизическоеЛицо = ЗаписьМассива;
		КонецЦикла;
		ОписаниеДокумента.ФизическиеЛица.Свернуть("ФизическоеЛицо");
		
		ДокументОбъект.ФизическиеЛица.Загрузить(ОписаниеДокумента.ФизическиеЛица);
		
		Если ДополнительныеСвойства <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДокументОбъект.ДополнительныеСвойства, ДополнительныеСвойства);
		КонецЕсли;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЕсли;
	
	ДокументСсылка = ДокументОбъект.Ссылка;
	
	Возврат ДокументСсылка;
	
КонецФункции

Функция НовыйВидРасчетаРезерва(ВидРасчета, Организация, Резерв, ЭтоРасчетОтпуска) Экспорт
	
	ОписаниеЭлемента = Новый Структура();
	ОписаниеЭлемента.Вставить("Организация",          Организация);
	ОписаниеЭлемента.Вставить("Резерв",               Резерв);
	ОписаниеЭлемента.Вставить("ВидРасчета",           ВидРасчета);
	ОписаниеЭлемента.Вставить("ЭтоРасчетОтпуска",     ЭтоРасчетОтпуска);
	
	ВидРасчетаРезерва = Справочники.ВидыРасчетовРезервовПоОплатеТруда.СоздатьЭлементПоОписанию(ОписаниеЭлемента);
	
	Возврат ВидРасчетаРезерва;
	
КонецФункции

Процедура ПроверитьЗаполнитьВидРасчетаРезерва(НастройкиРасчетаРезервовПоОплатеТруда, ВидНачисления) Экспорт
	
	ЭтоРасчетОтпуска = НастройкиРасчетаРезервовПоОплатеТруда.ВидРезерва = Перечисления.ВидыРезервовПоОплатеТруда.Отпуск;
	
	Если ЭтоРасчетОтпуска Тогда
		Отбор = Новый Структура("КатегорияНачисленияИлиНеоплаченногоВремени", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
		ВидНачисления = ПланыВидовРасчета.Начисления.НачислениеПоУмолчанию(Отбор);
	Иначе
		ВидыНачисления = ПланыВидовРасчета.Начисления.НачисленияПоОтбору(Новый СТруктура("Код", "ПРГП"));
		Если ВидыНачисления.Количество() = 0 Тогда
			ПланыВидовРасчета.Начисления.СоздатьГодовуюПремию();
			ВидыНачисления = ПланыВидовРасчета.Начисления.НачисленияПоОтбору(Новый СТруктура("Код", "ПРГП"));
		КонецЕсли;
		ВидНачисления = ВидыНачисления[0];
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидыРасчетовРезервовПоОплатеТруда(НастройкиРасчетаРезервовПоОплатеТруда, ВидНачисления) Экспорт
	
	ЭтоРасчетОтпуска = НастройкиРасчетаРезервовПоОплатеТруда.ВидРезерва = Перечисления.ВидыРезервовПоОплатеТруда.Отпуск;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидРасчета",       ВидНачисления);
	Запрос.УстановитьПараметр("Организация",      НастройкиРасчетаРезервовПоОплатеТруда.Организация);
	Запрос.УстановитьПараметр("Резерв",           НастройкиРасчетаРезервовПоОплатеТруда.Резерв);
	Запрос.УстановитьПараметр("ЭтоРасчетОтпуска", ЭтоРасчетОтпуска);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ВидыРасчетовРезервовПоОплатеТруда.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ВидыРасчетовРезервовПоОплатеТруда КАК ВидыРасчетовРезервовПоОплатеТруда
	               |ГДЕ
	               |	ВидыРасчетовРезервовПоОплатеТруда.Организация = &Организация
	               |	И ВидыРасчетовРезервовПоОплатеТруда.Резерв = &Резерв
	               |	И ВидыРасчетовРезервовПоОплатеТруда.ВидРасчета = &ВидРасчета
	               |	И ВидыРасчетовРезервовПоОплатеТруда.ЭтоРасчетОтпуска = &ЭтоРасчетОтпуска";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВидРасчетаРезерва = Выборка.Ссылка;
	Иначе
		ВидРасчетаРезерва = НовыйВидРасчетаРезерва(ВидНачисления,
			НастройкиРасчетаРезервовПоОплатеТруда.Организация,
			НастройкиРасчетаРезервовПоОплатеТруда.Резерв,
			ЭтоРасчетОтпуска);
	КонецЕсли;
	
	НастройкиРасчетаРезервовПоОплатеТруда.ВидыРасчетовРезерва.Очистить();
	НоваяСтрока = НастройкиРасчетаРезервовПоОплатеТруда.ВидыРасчетовРезерва.Добавить();
	НоваяСтрока.ВидРасчетаРезерва = ВидРасчетаРезерва;
	
КонецПроцедуры

Процедура УстановитьРезерв(НастройкиРасчетаРезервовПоОплатеТруда, Организация, Период) Экспорт
	
	ЭтоРасчетОтпуска = НастройкиРасчетаРезервовПоОплатеТруда.ВидРезерва = Перечисления.ВидыРезервовПоОплатеТруда.Отпуск;
	
	Если ЭтоРасчетОтпуска Тогда
		Резерв = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.Резервы.РезервЕжегодныхОтпусков");
	Иначе
		Резерв = Справочники.Резервы.ПустаяСсылка();
		ПолучитьРезервНаВыплатуГодовыхПремий(Организация, Период, Резерв);
	КонецЕсли;
	
	НастройкиРасчетаРезервовПоОплатеТруда.Резерв = Резерв;
	
КонецПроцедуры

Процедура ПолучитьРезервНаВыплатуГодовыхПремий(Организация, Период, Резерв) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаименованиеРезерва = СтрШаблон(НСтр("ru = 'Резерв на премию по итогам %1 г.'"), Формат(Период, "ДФ=yyyy"));
	ЭлементСсылка = Справочники.Резервы.НайтиПоНаименованию(НаименованиеРезерва, Истина);
	
	Если ЗначениеЗаполнено(ЭлементСсылка) Тогда
		ЭлементОбъект = ЭлементСсылка.ПолучитьОбъект();
		ЭлементОбъект.УстановитьПометкуУдаления(Ложь);
		ЭлементОбъект.Записать();
	Иначе
		ЭлементОбъект = Справочники.Резервы.СоздатьЭлемент();
		ЭлементОбъект.Наименование = НаименованиеРезерва;
		ЭлементОбъект.Записать();
	КонецЕсли;
	
	Резерв = ЭлементОбъект.Ссылка;
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "065def23-4783-45a9-81a0-fd531458035e", Метаданные.Документы.РезервыПоОплатеТруда);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "0410336e-bddb-4ec2-a329-61dd1de5dba2", Метаданные.Справочники.НастройкиРасчетаРезервовПоОплатеТруда);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "bd36cd62-1a0e-4528-bb58-3cc0688cdbc2", Метаданные.Справочники.ВидыРасчетовРезервовПоОплатеТруда);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Документы.РезервыПоОплатеТруда, Истина);
	Списки.Вставить(Метаданные.Справочники.НастройкиРасчетаРезервовПоОплатеТруда, Истина);
	Списки.Вставить(Метаданные.Справочники.ВидыРасчетовРезервовПоОплатеТруда, Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ФормулаРасчетаРезерваОтпусков(ДляВыполнения = Ложь) Экспорт
	
	Возврат РезервыПоОплатеТруда.ФормулаРасчетаРезерваОтпусков(ДляВыполнения);
	
КонецФункции

Функция Показатель_ОстатокОтпуска() Экспорт
	
	Возврат "ОстатокОтпуска";
	
КонецФункции

Функция Показатель_ОстатокОтпускаПредставление() Экспорт
	
	Возврат НСтр("ru = 'Остаток отпуска'");
	
КонецФункции

Функция Показатель_СохраняемыйЗаработок() Экспорт
	
	Возврат "СохраняемыйЗаработок";
	
КонецФункции

Функция Показатель_СохраняемыйЗаработокПредставление() Экспорт
	
	Возврат НСтр("ru = 'Сохр.заработок'");
	
КонецФункции

Функция ФормулаРасчетаРезерваГодовойПремии(ДляВыполнения = Ложь) Экспорт
	
	Формула = "ИсходныеДанные.ПроцентГодовойПремии / 100 * ИсходныеДанные.РасчетнаяБаза";
	Если Не ДляВыполнения Тогда
		Формула = СтрЗаменить(Формула, "ИсходныеДанные.", "");
	КонецЕсли;
	
	Возврат Формула;
	
КонецФункции

Функция Показатель_ПроцентГодовойПремии() Экспорт
	
	Возврат "ПроцентГодовойПремии";
	
КонецФункции

Функция Показатель_ПроцентГодовойПремииПредставление() Экспорт
	
	Возврат НСтр("ru='% прем.'");
	
КонецФункции

Функция Показатель_РасчетнаяБаза() Экспорт
	
	Возврат "РасчетнаяБаза";
	
КонецФункции

Функция Показатель_РасчетнаяБазаПредставление() Экспорт
	
	Возврат НСтр("ru = 'Расч. база'");
	
КонецФункции

Функция ТаблицаПоказателей() Экспорт
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("ИдентификаторСтрокиВидаРасчета", Новый ОписаниеТипов("Число"));
	Показатели.Колонки.Добавить("Показатель", Новый ОписаниеТипов("Строка"));
	Показатели.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));

	Возврат Показатели;
	
КонецФункции

Функция ПараметрыПолученияДанныхЗаполненияДокумента() Экспорт
	
	СтруктураПараметров = Новый Структура(
	"Организация, 
	|ДокументСсылка, 
	|Подразделение, 
	|МесяцНачисления, 
	|Резерв, 
	|ВидОперации, 
	|Сотрудники,
	|ФизическиеЛица,
	|ОкончаниеПериода, 
	|ОписаниеДокумента, 
	|ПозицииВставки, 
	|КонтролируемыеПоля, 
	|ДопПараметрыОтбора");
	
	СтруктураПараметров.ПозицииВставки = Новый Структура;
	
	Возврат СтруктураПараметров;
	
КонецФункции

Процедура ПодготовитьДанныеДляПерезаполнения(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеЗаполнения = РезервыПоОплатеТруда.ОписаниеДанныхДляЗаполненияТаблицДокумента();
	
	ОписаниеДокумента = СтруктураПараметров.ОписаниеДокумента; 
	Организация                      = СтруктураПараметров.Организация; 
	ДокументСсылка                   = СтруктураПараметров.ДокументСсылка;
	Подразделение                    = СтруктураПараметров.Подразделение;
	МесяцНачисления                  = СтруктураПараметров.МесяцНачисления;
	Сотрудники                       = СтруктураПараметров.Сотрудники;
	ОкончаниеПериода                 = СтруктураПараметров.ОкончаниеПериода;
	ПозицииВставки                   = СтруктураПараметров.ПозицииВставки;
	Резерв                           = ОписаниеДокумента.Резерв;
	ВидОперации                      = ОписаниеДокумента.ВидОперации;
	ИсключаемыйРегистратор           = ДокументСсылка;
	
	Если ОкончаниеПериода = Неопределено Тогда
		ОкончаниеПериода = КонецМесяца(МесяцНачисления);
	КонецЕсли;
	
	ЗаполнениеДокумента = Сотрудники = Неопределено;
	ИмяДанныхЗаполнения = ?(ЗаполнениеДокумента, "ДанныеДляЗаполненияТаблицДокумента", "ДанныеДляПерезаполненияТаблицДокумента");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Имена временных таблиц для последующего сбора физических лиц.
	ИменаВТ = Новый Массив;
	
	// Выявляем сотрудников, для которых будет выполняться заполнение документа.
	ЗамерВыявленияСотрудников = ОценкаПроизводительности.НачатьЗамерВремени();
	
	КадровыеДанные = "ГоловнаяОрганизация,Организация,Подразделение,ДатаУвольнения";
	
	Если Сотрудники = Неопределено Тогда
		// Получаем сотрудников, работавших в организации из подсистемы КадровыйУчет.
		ПараметрыСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыСотрудников.Организация                             = Организация;
		ПараметрыСотрудников.Подразделение                           = Подразделение;
		ПараметрыСотрудников.ОтбиратьПоГоловнойОрганизации           = Ложь;
		ПараметрыСотрудников.НачалоПериода                           = МесяцНачисления;
		ПараметрыСотрудников.ОкончаниеПериода                        = ОкончаниеПериода;
		ПараметрыСотрудников.КадровыеДанные                          = КадровыеДанные;
		
		СотрудникиДляНачислений = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыСотрудников);
	Иначе
		СотрудникиДляНачислений = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудники, КадровыеДанные);
	КонецЕсли;
	
	СтруктураТаблицРасчета = ДетальноеОписаниеДанныхДляЗаполненияТаблицДокумента();
	
	НастройкаРезервов = РезервыПоОплатеТруда.НастройкиРасчетаРезервов(Организация, Резерв, МесяцНачисления, ДокументСсылка, ВидОперации);
	
	// Заполняем показатели расчета по формуле
	ЗаполнитьРезервыПоОплатеТруда(СотрудникиДляНачислений, СтруктураТаблицРасчета, НастройкаРезервов);
	РассчитатьРезервы(СтруктураТаблицРасчета, НастройкаРезервов);
	
	РезервыПоОплатеТруда.РассчитатьТекущийМесяц(СтруктураТаблицРасчета,
		Организация,
		Резерв,
		МесяцНачисления,
		ИсключаемыйРегистратор,
		ВидОперации);
		
	РезервыПоОплатеТруда.РассчитатьСуммыРезерваПоСотрудникам(СтруктураТаблицРасчета,
		Организация,
		Резерв,
		МесяцНачисления,
		ИсключаемыйРегистратор,
		ВидОперации);
		
	РезервыПоОплатеТруда.РассчитатьСуммыРезерва(СтруктураТаблицРасчета,
		Организация,
		Резерв,
		МесяцНачисления,
		ИсключаемыйРегистратор,
		ВидОперации);
	
	ДанныеЗаполнения.Начисления
		= СтруктураТаблицРасчета.Начисления;
	ДанныеЗаполнения.Взносы
		= СтруктураТаблицРасчета.Взносы;
	ДанныеЗаполнения.РасчетРезервов
		= СтруктураТаблицРасчета.РасчетРезервов;
	ДанныеЗаполнения.ОценочныеОбязательстваПоСотрудникам
		= СтруктураТаблицРасчета.ОценочныеОбязательстваПоСотрудникам;
	ДанныеЗаполнения.ОценочныеОбязательства
		= СтруктураТаблицРасчета.ОценочныеОбязательства;
	
	РезультатЗаполнения = Новый Структура;
	
	РезультатЗаполнения.Вставить(ИмяДанныхЗаполнения, ДанныеЗаполнения);
	РезультатЗаполнения.Вставить("СтруктураПараметров", СтруктураПараметров);
	
	ПоместитьВоВременноеХранилище(РезультатЗаполнения, АдресХранилища);
	
КонецПроцедуры

Функция ПерезаполнитьДанныеФормы(Форма, ОписаниеДокумента, Знач СотрудникиФизическиеЛица = Неопределено, ИспользоватьДлительнуюОперацию = Ложь) Экспорт
	
	Объект = Форма.Объект;
	
	МесяцНачисления = Объект.МесяцНачисления;
	
	Организация    = Объект.Организация;
	Подразделение  = Объект.Подразделение;
	ДокументСсылка = Объект.Ссылка;
	ВидОперации    = Объект.ВидОперации;
	Резерв         = Объект.Резерв;
	
	ФизическиеЛица = Неопределено;
	ПозицииВставки = Неопределено;
	
	// В качестве параметров могут быть получены физические лица, а не сотрудники.
	Если СотрудникиФизическиеЛица <> Неопределено Тогда
		Сотрудники     = СотрудникиФизическиеЛица;
		Физлица        = КадровыйУчет.ФизическиеЛицаСотрудников(СотрудникиФизическиеЛица);
		ПозицииВставки = Новый Структура;
	КонецЕсли;
	
	ОкончаниеПериода = КонецМесяца(МесяцНачисления);
	
	СтруктураПараметров = ПараметрыПолученияДанныхЗаполненияДокумента();
	СтруктураПараметров.Организация               = Организация;
	СтруктураПараметров.Подразделение             = Подразделение;
	СтруктураПараметров.ДокументСсылка            = ДокументСсылка;
	СтруктураПараметров.ВидОперации               = ВидОперации;
	СтруктураПараметров.Резерв                    = Резерв;
	СтруктураПараметров.МесяцНачисления           = МесяцНачисления;
	СтруктураПараметров.Сотрудники                = Сотрудники;
	СтруктураПараметров.ОкончаниеПериода          = ОкончаниеПериода;
	СтруктураПараметров.ОписаниеДокумента         = ОписаниеДокумента;
	СтруктураПараметров.КонтролируемыеПоля        = Форма.ПолучитьКонтролируемыеПоля();
	СтруктураПараметров.ПозицииВставки            = ПозицииВставки;
	
	Если Не ИспользоватьДлительнуюОперацию Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Форма.УникальныйИдентификатор);
		ПодготовитьДанныеДляПерезаполнения(СтруктураПараметров, АдресХранилища);
		Возврат Новый Структура("ЗаданиеВыполнено, АдресХранилища", Истина, АдресХранилища);
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru = 'Заполнение документа ""Резервы по оплате труда""'");
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		Форма.УникальныйИдентификатор,
		"РезервыПоОплатеТрудаДляНебольшихОрганизаций.ПодготовитьДанныеДляПерезаполнения",
		СтруктураПараметров,
		НаименованиеЗадания);
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеДляЗаполненияТаблицДокумента(ОписаниеДокумента, Организация, Резерв, МесяцНачисления, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = РезервыПоОплатеТруда.ДополнительныеПараметрыЗаполненияТаблицДокумента();
	КонецЕсли;
	
	Сотрудники             = ДополнительныеПараметры.Сотрудники;
	ДокументСсылка         = ДополнительныеПараметры.ДокументСсылка;
	Подразделение          = ДополнительныеПараметры.Подразделение;
	ВидОперации            = ДополнительныеПараметры.ВидОперации;
	АдресХранилища         = ДополнительныеПараметры.АдресХранилища;
	ДанныеЗаполнения       = РезервыПоОплатеТруда.ОписаниеДанныхДляЗаполненияТаблицДокумента();
	ИсключаемыйРегистратор = ОписаниеДокумента.ДокументСсылка;
	ДопПараметрыОтбора     = ДополнительныеПараметры.ДопПараметрыОтбора;
	
	ОкончаниеПериода = КонецМесяца(МесяцНачисления);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Имена временных таблиц для последующего сбора физических лиц.
	ИменаВТ = Новый Массив;
	
	// Выявляем сотрудников, для которых будет выполняться заполнение документа.
	ЗамерВыявленияСотрудников = ОценкаПроизводительности.НачатьЗамерВремени();
	Если Сотрудники = Неопределено Тогда
		
		КадровыеДанные = "ГоловнаяОрганизация,Организация,Подразделение,ДатаУвольнения";
		
		// Получаем сотрудников, работавших в организации из подсистемы КадровыйУчет.
		ПараметрыСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыСотрудников.Организация                             = Организация;
		ПараметрыСотрудников.Подразделение                           = Подразделение;
		ПараметрыСотрудников.ОтбиратьПоГоловнойОрганизации           = Ложь;
		ПараметрыСотрудников.НачалоПериода                           = МесяцНачисления;
		ПараметрыСотрудников.ОкончаниеПериода                        = ОкончаниеПериода;
		ПараметрыСотрудников.КадровыеДанные                          = КадровыеДанные;
		
		СотрудникиДляНачислений = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыСотрудников);
		
		Если ДопПараметрыОтбора <> Неопределено Тогда
			УточнитьСписокСотрудников(Организация, СотрудникиДляНачислений, ОкончаниеПериода, ДопПараметрыОтбора.ИмяПоказателяДопОтбора);
		КонецЕсли;
		
		Если СотрудникиДляНачислений.Количество() = 0 Тогда 
			Возврат ДанныеЗаполнения;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураТаблицРасчета = ДетальноеОписаниеДанныхДляЗаполненияТаблицДокумента();
	
	НастройкаРезервов = РезервыПоОплатеТруда.НастройкиРасчетаРезервов(Организация, Резерв, МесяцНачисления, ДокументСсылка, ВидОперации);
	
	Если ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Начисление Тогда
		// Расчет текущего месяца
		
		// Заполняем показатели расчета по формуле
		ЗаполнитьРезервыПоОплатеТруда(СотрудникиДляНачислений, СтруктураТаблицРасчета, НастройкаРезервов);
		РассчитатьРезервы(СтруктураТаблицРасчета, НастройкаРезервов);
		
		РезервыПоОплатеТруда.РассчитатьТекущийМесяц(СтруктураТаблицРасчета,
			Организация,
			Резерв,
			МесяцНачисления,
			ИсключаемыйРегистратор,
			ВидОперации);
		
		ДанныеЗаполнения.Начисления
			= СтруктураТаблицРасчета.Начисления;
		ДанныеЗаполнения.Взносы
			= СтруктураТаблицРасчета.Взносы;
		ДанныеЗаполнения.РасчетРезервов
			= СтруктураТаблицРасчета.РасчетРезервов;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Инвентаризация Тогда
		// Расчет инвентаризации
		
		// Заполняем показатели расчета по формуле
		ЗаполнитьРезервыПоОплатеТруда(СотрудникиДляНачислений, СтруктураТаблицРасчета, НастройкаРезервов);
		РассчитатьРезервы(СтруктураТаблицРасчета, НастройкаРезервов);
		
		РезервыПоОплатеТруда.РассчитатьТекущийМесяц(СтруктураТаблицРасчета,
			Организация,
			Резерв,
			МесяцНачисления,
			ИсключаемыйРегистратор,
			ВидОперации);
		
		ДанныеЗаполнения.Начисления
			= СтруктураТаблицРасчета.Начисления;
		ДанныеЗаполнения.Взносы
			= СтруктураТаблицРасчета.Взносы;
		ДанныеЗаполнения.РасчетРезервов
			= СтруктураТаблицРасчета.РасчетРезервов;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Списание Тогда
		// Заполняем остатками
		
		ЗаполнитьРезервыПоОплатеТруда(СотрудникиДляНачислений, СтруктураТаблицРасчета, НастройкаРезервов);
		РассчитатьРезервы(СтруктураТаблицРасчета, НастройкаРезервов);
		
		РезервыПоОплатеТруда.РассчитатьТекущийМесяц(СтруктураТаблицРасчета,
			Организация,
			Резерв,
			МесяцНачисления,
			ИсключаемыйРегистратор,
			ВидОперации);
			
		ДанныеЗаполнения.РасчетРезервов
			= СтруктураТаблицРасчета.РасчетРезервов;
		
	КонецЕсли;
	
	РезервыПоОплатеТруда.РассчитатьСуммыРезерваПоСотрудникам(СтруктураТаблицРасчета,
		Организация,
		Резерв,
		МесяцНачисления,
		ИсключаемыйРегистратор,
		ВидОперации);
		
	РезервыПоОплатеТруда.РассчитатьСуммыРезерва(СтруктураТаблицРасчета,
		Организация,
		Резерв,
		МесяцНачисления,
		ИсключаемыйРегистратор,
		ВидОперации);
	
	ДанныеЗаполнения.ОценочныеОбязательстваПоСотрудникам
		= СтруктураТаблицРасчета.ОценочныеОбязательстваПоСотрудникам;
	ДанныеЗаполнения.ОценочныеОбязательства
		= СтруктураТаблицРасчета.ОценочныеОбязательства;
		
	РезервыПоОплатеТруда.СвернутьТаблицуРасчетаРезервов(ДанныеЗаполнения.РасчетРезервов);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Процедура УточнитьСписокСотрудников(Организация, ТаблицаСотрудников, Период, ИмяПоказателя)
	
	ТаблицаСостоянияСотрудников = РезервыПоОплатеТруда.СостоянияСотрудниковДляРасчетаОценочныхОбязательств(Организация,
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаСотрудников, "Сотрудник", Истина), Период);
		
	МассивСтрокКУдалению = Новый Массив();
	Для Каждого СтрокаТаблицы Из ТаблицаСостоянияСотрудников Цикл
		Если Не СтрокаТаблицы[ИмяПоказателя] Тогда
			МассивСтрок = ТаблицаСотрудников.НайтиСтроки(Новый Структура("Сотрудник", СтрокаТаблицы.Сотрудник));
			Если МассивСтрок.Количество() <> 0 Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтрокКУдалению, МассивСтрок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаМассива Из МассивСтрокКУдалению Цикл
		ТаблицаСотрудников.Удалить(СтрокаМассива);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРезервыПоОплатеТруда(ТаблицаСотрудников, СтруктураТаблицРасчета, НастройкаРезервов) Экспорт
	
	СтруктураТаблицРасчета.Начисления = НачисленияРезервов(ТаблицаСотрудников, СтруктураТаблицРасчета, НастройкаРезервов);
	
КонецПроцедуры

Функция ДетальноеОписаниеДанныхДляЗаполненияТаблицДокумента() Экспорт
	
	СтруктураТаблицРасчета = РезервыПоОплатеТруда.ОписаниеДанныхДляЗаполненияТаблицДокумента();
	СтруктураТаблицРасчета.Начисления                          = РезервыПоОплатеТруда.ТаблицаНачисления();
	СтруктураТаблицРасчета.Взносы                              = РезервыПоОплатеТруда.ТаблицаВзносы();
	СтруктураТаблицРасчета.РасчетРезервов                      = РезервыПоОплатеТруда.ТаблицаРасчетРезервов();
	СтруктураТаблицРасчета.ОценочныеОбязательстваПоСотрудникам = РезервыПоОплатеТруда.ТаблицаОценочныеОбязательстваПоСотрудникам();
	СтруктураТаблицРасчета.ОценочныеОбязательства              = РезервыПоОплатеТруда.ТаблицаОценочныеОбязательства();
	
	Возврат СтруктураТаблицРасчета;
	
КонецФункции

Процедура ЗаполнитьСотрудникамиКРасчету(ТаблицаСотрудников, Начисления, НастройкаРезервов) Экспорт
	
	ТаблицаСотрудников.Сортировать("Сотрудник", Новый СравнениеЗначений);
	
	Для Каждого СтрокаПоСотруднику Из ТаблицаСотрудников Цикл
		СтрокаДобавляемыхНачислений = Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДобавляемыхНачислений, СтрокаПоСотруднику);
	КонецЦикла;
	
КонецПроцедуры

Функция НастройкаРезерваПоВиду(Организация, ВидРезерва, Период) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидРезерва",  ВидРезерва);
	Запрос.УстановитьПараметр("Период",      Период);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиРасчетаРезервовПоОплатеТруда.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиРасчетаРезервовПоОплатеТруда КАК НастройкиРасчетаРезервовПоОплатеТруда
	|ГДЕ
	|	НастройкиРасчетаРезервовПоОплатеТруда.Организация = &Организация
	|	И &Период МЕЖДУ НАЧАЛОПЕРИОДА(НастройкиРасчетаРезервовПоОплатеТруда.НачалоПериода, МЕСЯЦ) И КОНЕЦПЕРИОДА(НастройкиРасчетаРезервовПоОплатеТруда.КонецПериода, МЕСЯЦ)
	|	И НастройкиРасчетаРезервовПоОплатеТруда.ВидРезерва = &ВидРезерва";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Настройка = Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		Настройка = Справочники.НастройкиРасчетаРезервовПоОплатеТруда.СоздатьЭлемент();
	КонецЕсли;
	
	Возврат Настройка;
	
КонецФункции

Функция СоздатьНастройкуРезерваПоВиду(Организация, ВидРезерва, Период) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Настройка = Справочники.НастройкиРасчетаРезервовПоОплатеТруда.СоздатьЭлемент();
	Настройка.Организация        = Организация;
	Настройка.ВидРезерва         = ВидРезерва;
	Настройка.НачалоПериода      = НачалоГода(Период);
	Настройка.КонецПериода       = КонецГода(Период);
	
	Если ВидРезерва = Перечисления.ВидыРезервовПоОплатеТруда.Отпуск Тогда
		Настройка.Резерв = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.Резервы.РезервЕжегодныхОтпусков");
	Иначе
		УстановитьРезерв(Настройка,
			Организация,
			Период);
	КонецЕсли;
	
	Настройка.Наименование       = РезервыПоОплатеТруда.НаименованиеНастройки(Настройка);
	Настройка.ПолноеНаименование = РезервыПоОплатеТруда.ПолноеНаименованиеНастройки(Настройка);
	
	ВидНачисления = ПланыВидовРасчета.Начисления.ПустаяСсылка();
	ПроверитьЗаполнитьВидРасчетаРезерва(Настройка, ВидНачисления);
	УстановитьВидыРасчетовРезервовПоОплатеТруда(Настройка, ВидНачисления);
	
	Возврат Настройка;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НачисленияРезервов(ТаблицаСотрудников, СтруктураТаблицРасчета, НастройкаРезервов)
	
	Начисления = РезервыПоОплатеТруда.ТаблицаНачисления();
	
	Если НастройкаРезервов.Инвентаризация Тогда
		ЗаполнитьВыявленнымиРезервами(ТаблицаСотрудников, Начисления, НастройкаРезервов);
	Иначе
		ЗаполнитьСотрудникамиКРасчету(ТаблицаСотрудников, Начисления, НастройкаРезервов);
	КонецЕсли;
	
	Если Не НастройкаРезервов.Списание
		И Не НастройкаРезервов.Корректировка Тогда
		
		РезервыПоОплатеТруда.ВычеркнутьПериодыРанееВыполненныхНачисленийРезервов(ТаблицаСотрудников, Начисления, НастройкаРезервов);
		
		Если Не НастройкаРезервов.Инвентаризация Тогда
			// Дополняем данными фонда оплаты труда и данными норматива
			РезервыПоОплатеТруда.ЗаполнитьПоказателиРасчетаДляНормативногоМетода(Начисления, НастройкаРезервов);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Начисления;
	
КонецФункции

Процедура ЗаполнитьВыявленнымиРезервами(ТаблицаСотрудников, Начисления, НастройкаРезервов)
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(Начисления, "Сотрудник");
	
	ТаблицаСотрудников.Сортировать("Сотрудник", Новый СравнениеЗначений);
	
	ДобавитьПлановыеНачисленияРезервов(ТаблицаСотрудников, Начисления, НастройкаРезервов);
	
КонецПроцедуры

Процедура ДобавитьПлановыеНачисленияРезервов(СотрудникиПериоды, Начисления, НастройкаРезервов)
	
	ЭтоРезервОтпусков = НастройкаРезервов.ВидРезерва = Перечисления.ВидыРезервовПоОплатеТруда.Отпуск;
	ЭтоГодоваяПремия  = НастройкаРезервов.ВидРезерва = Перечисления.ВидыРезервовПоОплатеТруда.ГодоваяПремия;
	
	Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(СотрудникиПериоды, "Сотрудник");
	Если ЭтоРезервОтпусков Тогда
		ОписаниеПоказателей = РезервыПоОплатеТрудаДляНебольшихОрганизаций.ОписаниеПоказателейРасчетаРезерваОтпусков();
		
		ДанныеПоказателей = ОтражениеЗарплатыВБухучетеБазовый.СреднийЗаработокСотрудниковДляОценочныхОбязательств(Сотрудники,
			НастройкаРезервов.Период);
			
		ДанныеПоказателей.Колонки.Добавить("ОстатокОтпусков",
			Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
			
		РезервыПоОплатеТрудаПереопределяемый.ДополнитьТаблицуОстатковОтпусков(НастройкаРезервов.Организация, НастройкаРезервов.Период, ДанныеПоказателей);
		
	ИначеЕсли ЭтоГодоваяПремия Тогда
		ОписаниеПоказателей = РезервыПоОплатеТрудаДляНебольшихОрганизаций.ОписаниеПоказателейРасчетаРезерваПремии();
		
		Если НастройкаРезервов.Инвентаризация Тогда
			НачалоПериода = НачалоГода(НастройкаРезервов.Период);
		Иначе
			НачалоПериода = НачалоМесяца(НастройкаРезервов.Период);
		КонецЕсли;
		КонецПериода = КонецМесяца(НастройкаРезервов.Период);
		
		ДанныеПоказателей = ОтражениеЗарплатыВБухучетеБазовый.НачисленияПоОплатеТрудаДляРасчетаОценочныхОбязательств(НастройкаРезервов.Организация,
			Сотрудники,
			НачалоПериода,
			КонецПериода);
			
		ДанныеПоказателей.Колонки.Добавить(Показатель_ПроцентГодовойПремии(),
			Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
		
		РезервыПоОплатеТрудаДляНебольшихОрганизацийПереопределяемый.ДополнитьТаблицуПроцентомГодовойПремии(НастройкаРезервов.Организация, НастройкаРезервов.Период, ДанныеПоказателей);
		
	Иначе
		Возврат;
	КонецЕсли;
	
	МаксимальноеКоличествоПоказателейНачисления = ОписаниеПоказателей.МассивПоказателей.Количество();
	
	Для Каждого СтрокаПоСотруднику Из СотрудникиПериоды Цикл
		СтрокаДобавляемыхНачислений = Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДобавляемыхНачислений, СтрокаПоСотруднику);
		СтрокаДобавляемыхНачислений.ИдентификаторСтрокиВидаРасчета = СотрудникиПериоды.Индекс(СтрокаПоСотруднику) + 1;
		СтрокаДобавляемыхНачислений.Показатели = ТаблицаПоказателей();
		
		СтрокаПоказателей = ДанныеПоказателей.Найти(СтрокаДобавляемыхНачислений.Сотрудник);
		
		Для НомерПоказателя = 1 По МаксимальноеКоличествоПоказателейНачисления Цикл
			СтрокаПоказателя = СтрокаДобавляемыхНачислений.Показатели.Добавить();
			СтрокаПоказателя.Показатель                     = ОписаниеПоказателей.МассивПоказателей[НомерПоказателя-1];
			СтрокаПоказателя.ИдентификаторСтрокиВидаРасчета = СтрокаДобавляемыхНачислений.ИдентификаторСтрокиВидаРасчета;
			Если СтрокаПоказателей <> Неопределено Тогда
				Если СтрокаПоказателя.Показатель = Показатель_ОстатокОтпуска() Тогда
					СтрокаПоказателя.Значение = СтрокаПоказателей.ОстатокОтпусков;
				ИначеЕсли СтрокаПоказателя.Показатель = Показатель_СохраняемыйЗаработок() Тогда
					СтрокаПоказателя.Значение = СтрокаПоказателей.СреднийЗаработок;
				ИначеЕсли СтрокаПоказателя.Показатель = Показатель_РасчетнаяБаза() Тогда
					СтрокаПоказателя.Значение = СтрокаПоказателей.Сумма;
				ИначеЕсли СтрокаПоказателя.Показатель = Показатель_ПроцентГодовойПремии() Тогда
					СтрокаПоказателя.Значение = СтрокаПоказателей.ПроцентГодовойПремии;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьРезервыСлужебный(СтруктураТаблицРасчета, НастройкаРезервов)
	
	РассчитатьРезерв(СтруктураТаблицРасчета, НастройкаРезервов);
	РассчитатьСтраховыеВзносы(СтруктураТаблицРасчета, НастройкаРезервов);
	
КонецПроцедуры

Процедура РассчитатьРезерв(СтруктураТаблицРасчета, НастройкаРезервов)
	
	Начисления = СтруктураТаблицРасчета.Начисления;
	
	РезервыПоОплатеТруда.ДополнитьТаблицуРасчетаКадровымСостоянием(Начисления, НастройкаРезервов.Организация, НастройкаРезервов.Период);
	
	Если НастройкаРезервов.Инвентаризация Тогда
		РассчитатьРезервыМетодомМСФО(Начисления, НастройкаРезервов);
	Иначе
		РезервыПоОплатеТруда.РассчитатьРезервыНормативнымМетодом(Начисления, НастройкаРезервов);
	КонецЕсли;
	
	Если НастройкаРезервов.ФормироватьРезервНУ Тогда
		РезервыПоОплатеТруда.РассчитатьРезервыВНалоговомУчете(Начисления, НастройкаРезервов);
	КонецЕсли;
	
	РезервыПоОплатеТруда.СкорректироватьРасчетСУчетомКадровыхСостояний(Начисления);
	
КонецПроцедуры

Процедура РассчитатьСтраховыеВзносы(СтруктураТаблицРасчета, НастройкаРезервов)
	
	Начисления = СтруктураТаблицРасчета.Начисления;
	Взносы     = СтруктураТаблицРасчета.Взносы;
	
	Если Начисления.Количество() = 0 Тогда
		Взносы = РезервыПоОплатеТруда.ТаблицаВзносы();
		Возврат;
	КонецЕсли;
	
	РезервыПоОплатеТруда.РассчитатьСтраховыеВзносы(Начисления, Взносы, НастройкаРезервов);
	
	СтруктураТаблицРасчета.Вставить("Взносы", Взносы);
	
КонецПроцедуры

Процедура РассчитатьРезервыМетодомМСФО(Начисления, НастройкаРезервов)
	
	ЭтоРезервОтпусков = НастройкаРезервов.ВидРезерва = Перечисления.ВидыРезервовПоОплатеТруда.Отпуск;
	ЭтоГодоваяПремия  = НастройкаРезервов.ВидРезерва = Перечисления.ВидыРезервовПоОплатеТруда.ГодоваяПремия;
	
	Если ЭтоРезервОтпусков Тогда
		ФормулаДляВыполнения    = ФормулаРасчетаРезерваОтпусков(Истина);
		ФормулаДляПредставления = ФормулаРасчетаРезерваОтпусков(Ложь);
	ИначеЕсли ЭтоГодоваяПремия Тогда
		ФормулаДляВыполнения    = ФормулаРасчетаРезерваГодовойПремии(Истина);
		ФормулаДляПредставления = ФормулаРасчетаРезерваГодовойПремии(Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Начисления Цикл
		Если Не СтрокаТаблицы.ФиксРасчет Тогда
			Если СтрокаТаблицы.Уволен Или СтрокаТаблицы.Перемещен Тогда
				СтрокаТаблицы.Результат = 0;
			Иначе
				СтрокаТаблицы.Результат = Окр(РезультатПоФормуле(СтрокаТаблицы, ФормулаДляВыполнения, ФормулаДляПредставления), 2);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция РезультатПоФормуле(СтрокаРасчета, ФормулаДляВыполнения, ФормулаДляПредставления)
	
	Показатели = СтрокаРасчета.Показатели;
	КоличествоПоказателей = Показатели.Количество();
	Если КоличествоПоказателей = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	ФормулаДляВычисления = СтрЗаменить(ФормулаДляВыполнения, "ИсходныеДанные.", "Параметры.");
	
	ИсходныеДанные = Новый Структура;
	Для НомерПоказателя = 1 По КоличествоПоказателей Цикл
		ИсходныеДанные.Вставить(Показатели[НомерПоказателя - 1].Показатель, Показатели[НомерПоказателя - 1].Значение);
	КонецЦикла;
	
	Попытка
		Возврат ОбщегоНазначения.ВычислитьВБезопасномРежиме(ФормулаДляВычисления, ИсходныеДанные);
	Исключение
		Возврат 0;
	КонецПопытки;
	
КонецФункции

Процедура ДополнитьТаблицуСведениямиОбОсобенностяхОтпусков(НачисленнаяЗарплатаИВзносы) Экспорт
	
	РезервыПоОплатеТрудаДляНебольшихОрганизацийПереопределяемый.ДополнитьТаблицуСведениямиОбОсобенностяхОтпусков(НачисленнаяЗарплатаИВзносы);
	
КонецПроцедуры

#КонецОбласти