#Область ОбработчикиОбновления
Функция БанкПоПлатежнымРеквизитам(ПлатежныеРеквизиты) Экспорт
	
	Банк = Справочники.Банки.СсылкаНаБанк(ПлатежныеРеквизиты.БИК, , ПлатежныеРеквизиты.КоррСчет);
	Если Не ЗначениеЗаполнено(Банк) Тогда
		Банки = Новый Массив;
		Банки.Добавить(РаботаСБанкамиБП.СсылкаПоКлассификатору(ПлатежныеРеквизиты.БИК, ПлатежныеРеквизиты.КоррСчет));
		РаботаСБанкамиБП.ПодобратьБанкИзКлассификатора(Банки);
		Банк = Справочники.Банки.СсылкаНаБанк(ПлатежныеРеквизиты.БИК, , ПлатежныеРеквизиты.КоррСчет);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Банк) Тогда
		НаименованиеБанка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ПлатежныеРеквизиты, "НаименованиеБанка", "");
		ДанныеБанка = ДанныеБанкаИзНаименования(НаименованиеБанка);
		БанкОбъект  = СоздатьБанкОбъект(ПлатежныеРеквизиты, ДанныеБанка);
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(БанкОбъект);
		Банк = БанкОбъект.Ссылка;
	КонецЕсли;
	
	Возврат Банк;
	
КонецФункции
#КонецОбласти

#Область ПрограммныйИнтерфейс

// Функция осуществляет подбор данных классификатора, для копирования в элемент справочника Банки.
// Если такого банка ещё нет, то он создается.
// Если банк находится в иерархии не на первом уровне, то создается/копируется вся цепочка родителей.
//
// Параметры:
//
// - СсылкиБанков - Массив с элементами типа СправочникСсылка.КлассификаторБанков - список значений классификатора
//   которые необходимо обработать
// - ИгнорироватьРучноеИзменение - Булево - указание не обрабатывать банки, измененные вручную
//
// Возвращаемое значение:
//
// - Массив с элементами типа СправочникСсылка.Банки
//
Функция ПодобратьБанкИзКлассификатора(Знач СсылкиБанков, ИгнорироватьРучноеИзменение = Ложь) Экспорт
	
	МассивБанков = Новый Массив;
	
	Если СсылкиБанков.Количество() = 0 Тогда
		Возврат МассивБанков;
	КонецЕсли;
	
	СсылкиИерархия = ДополнитьМассивРодителямиСсылок(СсылкиБанков);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкиИерархия", СсылкиИерархия);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторБанков.Код КАК БИК,
	|	КлассификаторБанков.КоррСчет КАК КоррСчет,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КлассификаторБанковРКЦ.Наименование, """") = """"
	|			ТОГДА КлассификаторБанков.Наименование
	|		ИНАЧЕ ЕСТЬNULL(КлассификаторБанковРКЦ.Наименование, """") + ""//"" + КлассификаторБанков.Наименование
	|	КОНЕЦ КАК Наименование,
	|	КлассификаторБанков.Город КАК Город,
	|	КлассификаторБанков.Адрес КАК Адрес,
	|	КлассификаторБанков.Телефоны КАК Телефоны,
	|	КлассификаторБанков.ЭтоГруппа КАК ЭтоГруппа,
	|	КлассификаторБанков.ДеятельностьПрекращена КАК ДеятельностьПрекращена,
	|	КлассификаторБанков.Родитель.Код КАК РодительКод,
	|	КлассификаторБанков.СВИФТБИК КАК СВИФТБИК
	|ПОМЕСТИТЬ ВТ_КлассификаторБанков
	|ИЗ
	|	Справочник.КлассификаторБанков КАК КлассификаторБанков
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанковРКЦ
	|		ПО КлассификаторБанков.БИКРКЦ = КлассификаторБанковРКЦ.Ссылка
	|ГДЕ
	|	КлассификаторБанков.Ссылка В(&СсылкиИерархия)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	БИК,
	|	КоррСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Банки.Ссылка, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)) КАК Банк,
	|	ВТ_КлассификаторБанков.БИК КАК Код,
	|	ВТ_КлассификаторБанков.КоррСчет КАК КоррСчет,
	|	ВТ_КлассификаторБанков.ЭтоГруппа КАК ЭтоРегион,
	|	ВТ_КлассификаторБанков.Наименование КАК Наименование,
	|	ВТ_КлассификаторБанков.Город КАК Город,
	|	ВТ_КлассификаторБанков.Адрес КАК Адрес,
	|	ВТ_КлассификаторБанков.Телефоны КАК Телефоны,
	|	ВТ_КлассификаторБанков.СВИФТБИК КАК СВИФТБИК,
	|	ВЫБОР
	|		КОГДА ВТ_КлассификаторБанков.ДеятельностьПрекращена
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РучноеИзменение,
	|	ЕСТЬNULL(ВТ_КлассификаторБанков.РодительКод, """") КАК РодительКод
	|ПОМЕСТИТЬ БанкиБезРодителей
	|ИЗ
	|	ВТ_КлассификаторБанков КАК ВТ_КлассификаторБанков
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
	|		ПО ВТ_КлассификаторБанков.КоррСчет = Банки.КоррСчет
	|			И ВТ_КлассификаторБанков.БИК = Банки.Код
	|			И ВТ_КлассификаторБанков.ЭтоГруппа = Банки.ЭтоГруппа
	|ГДЕ
	|	НЕ ВТ_КлассификаторБанков.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Банки.Ссылка, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)),
	|	ВТ_КлассификаторБанков.БИК,
	|	NULL,
	|	ВТ_КлассификаторБанков.ЭтоГруппа,
	|	ВТ_КлассификаторБанков.Наименование,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	0,
	|	ЕСТЬNULL(ВТ_КлассификаторБанков.РодительКод, """")
	|ИЗ
	|	ВТ_КлассификаторБанков КАК ВТ_КлассификаторБанков
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
	|		ПО ВТ_КлассификаторБанков.БИК = Банки.Код
	|			И ВТ_КлассификаторБанков.ЭтоГруппа = Банки.ЭтоГруппа
	|ГДЕ
	|	ВТ_КлассификаторБанков.ЭтоГруппа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РодительКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БанкиБезРодителей.Банк КАК Банк,
	|	БанкиБезРодителей.Код КАК Код,
	|	БанкиБезРодителей.КоррСчет КАК КоррСчет,
	|	БанкиБезРодителей.ЭтоРегион КАК ЭтоРегион,
	|	БанкиБезРодителей.Наименование КАК Наименование,
	|	БанкиБезРодителей.Город КАК Город,
	|	БанкиБезРодителей.Адрес КАК Адрес,
	|	БанкиБезРодителей.Телефоны КАК Телефоны,
	|	БанкиБезРодителей.РучноеИзменение КАК РучноеИзменение,
	|	БанкиБезРодителей.РодительКод КАК РодительКод,
	|	ЕСТЬNULL(Банки.Ссылка, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)) КАК Родитель,
	|	БанкиБезРодителей.СВИФТБИК КАК СВИФТБИК
	|ИЗ
	|	БанкиБезРодителей КАК БанкиБезРодителей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
	|		ПО БанкиБезРодителей.РодительКод = Банки.Родитель
	|			И БанкиБезРодителей.ЭтоРегион = Банки.ЭтоГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоРегион УБЫВ,
	|	Код";
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаБанков = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Ссылки = Новый Массив;
	Для каждого СтрокаТаблицыЗначений Из ТаблицаБанков Цикл
		
		ПараметрыОбъекта = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыЗначений);
		УдалитьНеВалидныеКлючиСтруктуры(ПараметрыОбъекта);
		Ссылки.Добавить(ПараметрыОбъекта);
		
	КонецЦикла;
	
	МассивБанков = СоздатьОбновитьБанкиВИБ(Ссылки, ИгнорироватьРучноеИзменение);
	
	Возврат МассивБанков;
	
КонецФункции

Функция СсылкаПоКлассификатору(БИК, Коррсчет = "", ЭтоРегион = Ложь) Экспорт
	
	Если ПустаяСтрока(БИК) Тогда
		Возврат Справочники.КлассификаторБанков.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КлассификаторБанков.Ссылка
	|ИЗ
	|	Справочник.КлассификаторБанков КАК КлассификаторБанков
	|ГДЕ
	|	КлассификаторБанков.Код = &БИК
	|	И КлассификаторБанков.ЭтоГруппа = &ЭтоГруппа
	|	И КлассификаторБанков.КоррСчет = &Коррсчет";
	
	Запрос.УстановитьПараметр("БИК", БИК);
	
	Если ЭтоРегион Тогда
		Запрос.УстановитьПараметр("ЭтоГруппа", ЭтоРегион);
	Иначе
		Если ПустаяСтрока(Коррсчет) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И КлассификаторБанков.ЭтоГруппа = &ЭтоГруппа", "");
		Иначе
			Запрос.УстановитьПараметр("ЭтоГруппа", ЭтоРегион);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(Коррсчет) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И КлассификаторБанков.КоррСчет = &Коррсчет", "");
	Иначе
		Запрос.УстановитьПараметр("Коррсчет", Коррсчет);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат Справочники.КлассификаторБанков.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Результат.Выгрузить()[0].Ссылка;
	
КонецФункции

Функция СсылкаПоКлассификаторуСВИФТ(СВИФТБИК) Экспорт
	
	Если ПустаяСтрока(СВИФТБИК) Тогда
		Возврат Справочники.КлассификаторБанков.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СВИФТБИК", СВИФТБИК);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторБанков.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторБанков КАК КлассификаторБанков
	|ГДЕ
	|	КлассификаторБанков.СВИФТБИК = &СВИФТБИК
	|	И НЕ КлассификаторБанков.ПометкаУдаления";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат Справочники.КлассификаторБанков.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Результат.Выгрузить()[0].Ссылка;
	
КонецФункции

// Дополняет данные заполнения ссылкой на банк, найденной (созданной) на основании содержащихся в данных заполнения сведений
// о БИК и других реквизитах банка.
//
// Параметры:
//  ДанныеЗаполнения - Структура - обрабатываются ключи БИК, ВозможныйБИК, БИКБанкаДляРасчетов, ГородБанка,
//                                 НаименованиеБанка, КоррСчетБанка.
// 
// Возвращаемое значение:
//  Булево - Истина, если удалось определить ссылку на банк; Ложь, если не удалось.
//
Функция УстановитьБанк(ДанныеЗаполнения) Экспорт
	
	УстановитьБИК(ДанныеЗаполнения);
	
	Если Не ДанныеЗаполнения.Свойство("БИК") И Не ДанныеЗаполнения.Свойство("СВИФТБИК") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ДанныеЗаполнения.Свойство("БИК") Тогда
		ДанныеЗаполнения.Вставить("БИК", "");
	КонецЕсли;
	
	БИК = СокрЛП(ДанныеЗаполнения.БИК);
	КоррСчет = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаполнения, "КоррСчетБанка", "");
	
	Если ПустаяСтрока(БИК) И ДанныеЗаполнения.Свойство("БИКБанкаДляРасчетов") Тогда
		Возврат Ложь; // Если передан БИКБанкаДляРасчетов, то создать нельзя, поскольку свойства НаименованиеБанка, ГородБанка и КоррСчетБанка содержат реквизиты банка для расчетов
	КонецЕсли;
	
	Если БанковскиеПравила.ЭтоБИКБанкаРФ(БИК) Тогда
		Банк = НайтиБанк(БИК, , КоррСчет);
		Если Не ЗначениеЗаполнено(Банк) Тогда
			Банк = СоздатьБанк(БИК, ДанныеЗаполнения);
		КонецЕсли;
	ИначеЕсли ДанныеЗаполнения.Свойство("СВИФТБИК") И НЕ ПустаяСтрока(ДанныеЗаполнения.СВИФТБИК) Тогда
		Банк = НайтиБанкПоСВИФТБИК(СокрЛП(ДанныеЗаполнения.СВИФТБИК));
		Если Не ЗначениеЗаполнено(Банк) Тогда
			Банк = СоздатьОбновитьИностранныйБанкПоСВИФТБИК(ДанныеЗаполнения);
		КонецЕсли;
	Иначе
		Банк = НайтиБанк(БИК, Истина);
		ЭтоКодСВИФТ = БанковскиеПравила.СтрокаСоответствуетФорматуSWIFT(БИК);
		Если ЭтоКодСВИФТ Тогда
			Если ЗначениеЗаполнено(Банк) Тогда
				Банк = НайтиБанкПоСВИФТБИК(БИК);
				Если Не ЗначениеЗаполнено(Банк) Тогда
					Банк = СоздатьОбновитьИностранныйБанкПоСВИФТБИК(ДанныеЗаполнения);
				КонецЕсли;
			Иначе
				Банк = СоздатьОбновитьИностранныйБанкПоСВИФТБИК(ДанныеЗаполнения, Банк);
			КонецЕсли;
		Иначе // Код банка не является российским "БИК" и не удовлетворяет требованиям SWIFT, возможно пустой.
			Если Не ЗначениеЗаполнено(Банк) Тогда
				Банк = СоздатьБанк(БИК, ДанныеЗаполнения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Банк) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("Банк", Банк);
	Возврат Истина;
	
КонецФункции

Функция НайтиБанк(БИК, Иностранный = Ложь, КоррСчет = "") Экспорт
	
	Банк = Справочники.Банки.СсылкаНаБанк(БИК,, КоррСчет);
	Если ЗначениеЗаполнено(Банк) ИЛИ Иностранный Тогда
		Возврат Банк;
	КонецЕсли;
	
	БанкВКлассификаторе = СсылкаПоКлассификатору(БИК, Коррсчет);
	Банки = ПодобратьБанкИзКлассификатора(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(БанкВКлассификаторе));
		
	Если ЗначениеЗаполнено(Банки) Тогда
		Возврат Банки[Банки.ВГраница()];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция для изменения и запись справочника Банки по переданным параметрам.
// Если такого банка ещё нет, то он создается.
// Если банк находится в иерархии не на первом уровне, то создается/копируется вся цепочка родителей.
//
// Параметры:
//
// - Ссылки - Массив с элементами типа Структура - Ключи структуры - названия реквизитов справочника,
//   Значения структуры - значения данных реквизитов
// - ИгнорироватьРучноеИзменение - Булево - указание не обрабатывать банки, измененные вручную
//   
// Возвращаемое значение:
//
// - Массив с элементами типа СправочникСсылка.Банки
//
Функция СоздатьОбновитьБанкиВИБ(Ссылки, ИгнорироватьРучноеИзменение)
	
	МассивБанков = Новый Массив;
	
	Для инд = 0 По Ссылки.ВГраница() Цикл
		ПараметрыОбъект = Ссылки[инд];
		
		Банк = ПараметрыОбъект.Банк;
		
		Если ПараметрыОбъект.РучноеИзменение = 1
			И НЕ ИгнорироватьРучноеИзменение Тогда
			МассивБанков.Добавить(Банк);
			Продолжить;
		КонецЕсли;
		
		Если Банк.Пустая() Тогда
			Если ПараметрыОбъект.ЭтоРегион Тогда
				БанкОбъект = Справочники.Банки.СоздатьГруппу();
			Иначе
				БанкОбъект = Справочники.Банки.СоздатьЭлемент();
			КонецЕсли;
		Иначе
			БанкОбъект = Банк.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не БанкОбъект.ЭтоГруппа Тогда
			ПараметрыОбъект.Вставить("Страна", Справочники.СтраныМира.Россия);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(БанкОбъект, ПараметрыОбъект);
		
		Если НЕ ПустаяСтрока(ПараметрыОбъект.РодительКод) И НЕ ЗначениеЗаполнено(ПараметрыОбъект.Родитель) Тогда
			Регион = Справочники.Банки.СсылкаНаБанк(ПараметрыОбъект.РодительКод, Истина);
			
			Если НЕ ЗначениеЗаполнено(Регион) Тогда
				ПараметрыБанковВышеПоИерархии = Новый Массив;
				ПараметрыБанковВышеПоИерархии.Добавить(СсылкаПоКлассификатору(ПараметрыОбъект.РодительКод,, Истина));
				
				// Если переданный Родитель не является корневым элементом,
				// то будет возвращен массив всех элементов (групп) выше по иерархии.
				// В начале массива будет корневой элемент иерархии, в конце массива - элемента переданный в параметрах 
				МассивБанковВышеПоИерархии = ПодобратьБанкИзКлассификатора(ПараметрыБанковВышеПоИерархии);
				
				Если МассивБанковВышеПоИерархии.Количество() > 0 Тогда
					// Переданный в параметре элемент (к созданию) в возвращенном Массиве будет всегда на последней позиции
					ПоследнийЭлемент = МассивБанковВышеПоИерархии.ВГраница();
					Регион = МассивБанковВышеПоИерархии[ПоследнийЭлемент];
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Регион) И Регион.ЭтоГруппа Тогда
				БанкОбъект.Родитель = Регион;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(БанкОбъект.Родитель) Тогда
				ШаблонСообщения = НСтр("ru = 'Не определена группа для элемента с кодом %1'");
				ТекстСообщения = СтрШаблон(
					ШаблонСообщения,
					СокрЛП(ПараметрыОбъект.Код));
				
				ЗаписьЖурналаРегистрации(
					ИмяСобытияВЖурналеРегистрации(), 
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.Банки,
					Банк,
					ТекстСообщения);
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			БанкОбъект.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ШаблонСообщения = НСтр( "ru = 'Не удалось записать элемент
                                  |%1'");
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияВЖурналеРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.Банки,
				Банк,
				ТекстСообщения);
			
			Прервать;
		КонецПопытки;
		
		МассивБанков.Добавить(БанкОбъект.Ссылка);
	КонецЦикла;
	
	Возврат МассивБанков;
	
КонецФункции

Функция ДополнитьМассивРодителямиСсылок(Знач Ссылки)
	
	ИмяТаблицы = Ссылки[0].Метаданные().ПолноеИмя();
	
	МассивСсылок = Новый Массив;
	Для каждого Ссылка Из Ссылки Цикл
		МассивСсылок.Добавить(Ссылка);
	КонецЦикла;
	
	ТекущиеСсылки = Ссылки;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Родитель КАК Ссылка
	|ИЗ
	|	" + ИмяТаблицы + " КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка В (&Ссылки)
	|	И Таблица.Родитель <> ЗНАЧЕНИЕ(" + ИмяТаблицы + ".ПустаяСсылка)";
	
	Пока Истина Цикл
		Запрос.УстановитьПараметр("Ссылки", ТекущиеСсылки);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		ТекущиеСсылки = Новый Массив;
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекущиеСсылки.Добавить(Выборка.Ссылка);
			МассивСсылок.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЦикла;
	
	Возврат МассивСсылок;
	
КонецФункции

Процедура УдалитьНеВалидныеКлючиСтруктуры(ПараметрыСтруктураСправочника)
	
	Для каждого КлючИЗначение Из ПараметрыСтруктураСправочника Цикл
		Если КлючИЗначение.Значение = Null ИЛИ КлючИЗначение.Ключ = "ЭтоГруппа" Тогда
			ПараметрыСтруктураСправочника.Удалить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ИмяСобытияВЖурналеРегистрации()

	Возврат НСтр("ru = 'Классификатор банков'", ОбщегоНазначения.КодОсновногоЯзыка());

КонецФункции

Процедура УстановитьБИК(ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.Свойство("БИК") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеЗаполнения.Свойство("ВозможныйБИК") Или Не ДанныеЗаполнения.Свойство("НомерСчета") Тогда
		Возврат;
	КонецЕсли;
	
	БИКСоответствуетСчету = БанковскиеПравила.ПроверитьКонтрольныйКлючВНомереБанковскогоСчета(
		ДанныеЗаполнения.НомерСчета,
			ДанныеЗаполнения.ВозможныйБИК);
	Если Не БИКСоответствуетСчету Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("БИК", ДанныеЗаполнения.ВозможныйБИК);
	
КонецПроцедуры

Функция НайтиБанкПоСВИФТБИК(СВИФТБИК)
	
	Банк = Справочники.Банки.СсылкаНаБанкПоСВИФТБИК(СВИФТБИК);
	Если ЗначениеЗаполнено(Банк) Тогда
		Возврат Банк;
	КонецЕсли;
	
	БанкВКлассификаторе = СсылкаПоКлассификаторуСВИФТ(СВИФТБИК);
	Банки = ПодобратьБанкИзКлассификатора(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(БанкВКлассификаторе));
	
	Если ЗначениеЗаполнено(Банки) Тогда
		Возврат Банки[Банки.ВГраница()];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция СоздатьБанк(БИК, ДанныеЗаполнения)
	
	Если ПустаяСтрока(БИК) Или Не ДанныеЗаполнения.Свойство("НаименованиеБанка") Или ПустаяСтрока(ДанныеЗаполнения.НаименованиеБанка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйБанк = Справочники.Банки.СоздатьЭлемент();
	НовыйБанк.Код          = БИК;
	НовыйБанк.Наименование = ДанныеЗаполнения.НаименованиеБанка;
	Если ДанныеЗаполнения.Свойство("ГородБанка") Тогда
		НовыйБанк.Город    = ДанныеЗаполнения.ГородБанка;
	КонецЕсли;
	Если ДанныеЗаполнения.Свойство("КоррСчетБанка") Тогда
		НовыйБанк.КоррСчет = ДанныеЗаполнения.КоррСчетБанка;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("СВИФТБИК") Тогда
		НовыйБанк.СВИФТБИК = СокрЛП(ДанныеЗаполнения.СВИФТБИК);
	КонецЕсли;
	
	НовыйБанк.Страна = Справочники.СтраныМира.Россия;
	НовыйБанк.СнятьСПоддержки();
	НовыйБанк.Записать();
	
	Возврат НовыйБанк.Ссылка;
	
КонецФункции

Функция СоздатьОбновитьИностранныйБанкПоСВИФТБИК(ДанныеЗаполнения, Банк = Неопределено)
	
	Если Не ДанныеЗаполнения.Свойство("НаименованиеБанка") Или ПустаяСтрока(ДанныеЗаполнения.НаименованиеБанка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Банк) Тогда
		БанкОбъект = Банк.ПолучитьОбъект();
	Иначе
		БанкОбъект = Справочники.Банки.СоздатьЭлемент();
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("СВИФТБИК") И НЕ ПустаяСтрока(ДанныеЗаполнения.СВИФТБИК) Тогда
		БанкОбъект.Код      = СокрЛП(ДанныеЗаполнения.БИК);
		БанкОбъект.СВИФТБИК = СокрЛП(ДанныеЗаполнения.СВИФТБИК);
	Иначе // Если передан только БИК, значит это СВИФТБИК, а национальный код не передан.
		БанкОбъект.Код      = "";
		БанкОбъект.СВИФТБИК = СокрЛП(ДанныеЗаполнения.БИК);
	КонецЕсли;
	
	БанкОбъект.Наименование = СокрЛП(ДанныеЗаполнения.НаименованиеБанка);
	Если ДанныеЗаполнения.Свойство("ГородБанка") Тогда
		БанкОбъект.Город    = СокрЛП(ДанныеЗаполнения.ГородБанка);
	КонецЕсли;
	
	БанкОбъект.Страна = Справочники.Банки.СтранаПоSWIFT(БанкОбъект.СВИФТБИК);
	БанкОбъект.СнятьСПоддержки();
	БанкОбъект.Записать();
	
	Возврат БанкОбъект.Ссылка;
	
КонецФункции

Функция ДанныеБанкаИзНаименования(НаименованиеБанка)
	
	ДанныеБанка = Новый Структура("НаименованиеБанка, ГородБанка");
	ДанныеБанка.НаименованиеБанка = НаименованиеБанка;
	ДанныеБанка.ГородБанка = "";
	
	ПризнакНачалаГорода = НСтр("ru = 'г. '");
	ПозицияГорода = СтрНайти(НаименованиеБанка, ПризнакНачалаГорода, НаправлениеПоиска.СКонца);
	Если ПозицияГорода > 0 Тогда
		ДанныеБанка.НаименованиеБанка = СокрП(Лев(НаименованиеБанка, ПозицияГорода - 1));
		ДанныеБанка.ГородБанка = Сред(НаименованиеБанка, ПозицияГорода);
	КонецЕсли;
	
	Возврат ДанныеБанка;
	
КонецФункции  

Функция СоздатьБанкОбъект(ПлатежныеРеквизиты, ДанныеБанка)
	
	БанкОбъект = Справочники.Банки.СоздатьЭлемент();
	БанкОбъект.Код = ПлатежныеРеквизиты.БИК;
	БанкОбъект.КоррСчет = ПлатежныеРеквизиты.КоррСчет;
	БанкОбъект.Наименование = ДанныеБанка.НаименованиеБанка;
	БанкОбъект.Город = ДанныеБанка.ГородБанка;
	БанкОбъект.Страна = Справочники.СтраныМира.Россия;
	
	БанкОбъект.СнятьСПоддержки();
	
	НоваяСсылкаБанки = Справочники.Банки.ПолучитьСсылку();
	БанкОбъект.УстановитьСсылкуНового(НоваяСсылкаБанки);
	
	Возврат БанкОбъект;
	
КонецФункции

#КонецОбласти
