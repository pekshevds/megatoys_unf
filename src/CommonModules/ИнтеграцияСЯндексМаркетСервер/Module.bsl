#Область ПрограммныйИнтерфейс

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	
КонецПроцедуры

// Функция получает данные авторизации
//
// Параметры:
//  СтруктураОтвета  - Структура - структура содержит набор ключей, которые необходимо вернуть.
//
// Возвращаемое значение:
//  СтруктураДанныхАвторизации  - Структура - структура содержит запрошенный набор ключей.
//
Функция ДанныеАвторизацииИзОтветаЯндексаПолучить(УчетнаяЗапись, СтруктураОтвета) Экспорт
	
	СтруктураДанныхАвторизации = Новый Структура;
	
	Если СтруктураОтвета.Свойство("access_token")
	И СтруктураОтвета.Свойство("expires_in")
	И СтруктураОтвета.Свойство("refresh_token") Тогда
		
		expires_in = СтруктураОтвета.expires_in;
		
		Если ЭтаСтрокаЯвляетсяЦелымНеотрицательнымЧислом(expires_in) Тогда
			СрокЖизниТокена = НачалоДня(ТекущаяДатаСеанса() + Число(expires_in));
			СтруктураДанныхАвторизации.Вставить("access_token", СтруктураОтвета.access_token);
			СтруктураДанныхАвторизации.Вставить("access_token_expires", СрокЖизниТокена);
			СтруктураДанныхАвторизации.Вставить("refresh_token", СтруктураОтвета.refresh_token);
			
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( "Данные авторизации Яндекс маркет получены.", УчетнаяЗапись );
			
		Иначе
			ТекстОшибки = НСтр("ru = 'Ошибка получения данных авторизации Яндекс маркет: Некорректное значение свойства expires_in:'") + " " + СтруктураОтвета.expires_in;
			ОбщегоНазначения.СообщитьПользователю( ТекстОшибки );
			ЗаписьЖурналаРегистрации(ЯндексМаркетСобытиеЖурналаРегистрацииПолучить(), УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки );
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстОшибки, УчетнаяЗапись, Истина );
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураДанныхАвторизации;
	
КонецФункции

// Функция возвращает HTTPЗапрос запрос для обновления ключей доступа к сервису для учетную запись.
//
// Параметры:
//  УчетнаяЗапись  - СправочникСсылка.УчетныеЗаписиМаркетплейсов - ссылка на учетную запись, для которой запрашиваются ключи.
//
// Возвращаемое значение:
//  HTTPЗапрос  - HTTPЗапрос - HTTPЗапрос для получения ключей.
//
Функция ЗапросОбновитьТокеныДоступа(УчетнаяЗапись) Экспорт
	
	ЯндексПриложениеДанные = ЯндексМаркетПриложениеДанныеПолучить();
	client_id = ЯндексПриложениеДанные.client_id;
	client_secret = ЯндексПриложениеДанные.client_secret;
	
	СтруктураДанныхАвторизации = ЯндексМаркетДанныеАвторизацииПолучить(УчетнаяЗапись);
	
	Если СтруктураДанныхАвторизации <> Неопределено Тогда
		refresh_token = СтруктураДанныхАвторизации.refresh_token;	
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");	
	
	ПараметрыURL = Новый Массив;
	ПараметрыURL.Добавить("grant_type=refresh_token");
	ПараметрыURL.Добавить("refresh_token" + refresh_token);
	ПараметрыURL.Добавить("client_id=" + client_id);
	ПараметрыURL.Добавить("client_secret=" + client_secret);
	
	Адрес = "/token?"; 
	HTTPЗапрос = Новый HTTPЗапрос( Адрес, Заголовки );
	Тело = СтрСоединить( ПараметрыURL, "&");
	
	HTTPЗапрос.УстановитьТелоИзСтроки( Тело, "windows-1251" );
	
	Возврат HTTPЗапрос;
	
КонецФункции

// Функция возвращает имя сервера авторизации для обновления ключей доступа к сервису.
//
// Возвращаемое значение:
//  Сервер  - строка - имя сервера сервиса
//
Функция СерверАвторизацииЯндекс() Экспорт
	
	Сервер = "oauth.yandex.ru";	
	
	Возврат  Сервер;
	
КонецФункции

// Функция возвращает имя сервера партнерского API.
//
// Возвращаемое значение:
//  Сервер  - строка - имя сервера сервиса
//
Функция СерверПартнерскогоAPIЯндексМаркет() Экспорт
	
	Сервер = "api.partner.market.yandex.ru/v2/campaigns";	
	
	Возврат  Сервер;
	
КонецФункции

// Функция возвращает url авторизации.
//
// Возвращаемое значение:
//  Сервер  - строка - 
//
Функция АдресАвторизацииЯндекс() Экспорт

	ЯндексПриложениеДанные = ЯндексМаркетПриложениеДанныеПолучить();
	client_id = ЯндексПриложениеДанные.client_id;
	client_secret = ЯндексПриложениеДанные.client_secret;

	Адрес = "https://oauth.yandex.ru/authorize?response_type=code&client_id=" + client_id + "&client_secret=" + client_secret + "&redirect_uri=" + "https://oauth.yandex.ru/verification_code";		
	Возврат Адрес;
	
КонецФункции

Функция ЗапросПолучитьТокеныПоКоду(ВременныйКод) Экспорт
	
	ЯндексПриложениеДанные = ЯндексМаркетПриложениеДанныеПолучить();
	client_id = ЯндексПриложениеДанные.client_id;
	client_secret = ЯндексПриложениеДанные.client_secret;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");	
	
	ПараметрыURL = Новый Массив;
	ПараметрыURL.Добавить( "grant_type=authorization_code" );
	ПараметрыURL.Добавить( "code=" + ВременныйКод );
	ПараметрыURL.Добавить( "client_id=" + client_id );
	ПараметрыURL.Добавить( "client_secret=" + client_secret );
	
	Адрес = "/token?"; 
	HTTPЗапрос = Новый HTTPЗапрос( Адрес, Заголовки );
	Тело = СтрСоединить( ПараметрыURL, "&" );
	
	HTTPЗапрос.УстановитьТелоИзСтроки( Тело, "windows-1251" );
	
	Возврат HTTPЗапрос;
	
КонецФункции

Функция ЗаписатьНастройкиАвторизации(УчетнаяЗапись, ДанныеАвторизации) Экспорт
	
	Владелец = УчетнаяЗапись;
	
	Если ДанныеАвторизации.Свойство( "access_token_expires" ) Тогда
		expires_in = ДанныеАвторизации.access_token_expires;
	ИначеЕсли ДанныеАвторизации.Свойство( "expires_in" ) Тогда
		expires_in = ДанныеАвторизации.expires_in;
	Иначе
		expires_in = Неопределено;
	КонецЕсли;
	
	Если ДанныеАвторизации.Свойство("access_token")
	И ЗначениеЗаполнено( expires_in )
	И ДанныеАвторизации.Свойство("refresh_token") Тогда
	
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, ДанныеАвторизации.access_token, "access_token");
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, expires_in, "access_token_expires");	
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, ДанныеАвторизации.refresh_token, "refresh_token");
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( "Данные авторизации Яндекс маркет записаны в безопасное хранилище", УчетнаяЗапись );
		Возврат Истина;
	Иначе
		ТекстОшибки = НСтр("ru = 'Не удалось сохранить данные авторизации в безопасном хранилище, получены не все обязательные поля. Учетная запись:'") + " " + УчетнаяЗапись;
		ОбщегоНазначения.СообщитьПользователю( ТекстОшибки );
		ЗаписьЖурналаРегистрации(ЯндексМаркетСобытиеЖурналаРегистрацииПолучить(), УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстОшибки, УчетнаяЗапись, Истина );
		Возврат Ложь;	
	КонецЕсли;
	
КонецФункции

Функция ЯндексМаркетДанныеАвторизацииПолучить(УчетнаяЗапись) Экспорт
	
	Владелец = УчетнаяЗапись;
	ДанныеАвторизации = "access_token, access_token_expires, refresh_token";
	ДанныеАвторизации =	ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, ДанныеАвторизации, Ложь);
	
	Возврат ДанныеАвторизации;
КонецФункции

Процедура ЯндексМаркетДанныеАвторизацииУдалить(УчетнаяЗапись) Экспорт
	
	Владелец = УчетнаяЗапись;
	ДанныеАвторизации = "access_token, access_token_expires, refresh_token";
	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Владелец, ДанныеАвторизации);
	
	ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( "Данные авторизации ""Яндекс маркет"" удалены", УчетнаяЗапись );
КонецПроцедуры

Процедура ЯндексМаркетУчетнаяЗаписьУдалить(УчетнаяЗапись) Экспорт

	ИнтеграцияСЯндексМаркетСервер.ЯндексМаркетДанныеАвторизацииУдалить(УчетнаяЗапись);
	
	НЗ = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей();
	НЗ.Отбор.УчетнаяЗаписьМаркетплейса.Установить( УчетнаяЗапись, Истина );
	НЗ.Записать();
	
	НЗ = РегистрыСведений.СоответствияОбъектовМаркетплейсов.СоздатьНаборЗаписей();
	НЗ.Отбор.УчетнаяЗаписьМаркетплейса.Установить( УчетнаяЗапись, Истина );
	НЗ.Записать();

	НЗ = РегистрыСведений.ОстаткиТоваровМаркетплейсов.СоздатьНаборЗаписей();
	НЗ.Отбор.УчетнаяЗаписьМаркетплейса.Установить( УчетнаяЗапись, Истина );
	НЗ.Записать();
	
	УчетнаяЗаписьОбъект = УчетнаяЗапись.ПолучитьОбъект();
	УчетнаяЗаписьОбъект.ПометкаУдаления = Истина;
	УчетнаяЗаписьОбъект.Записать();
	
	ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( "Данные регистров сведений ""Яндекс маркет"" удалены", УчетнаяЗапись );
	
КонецПроцедуры

Функция ОбменДаннымиЯндексМаркетОбновитьВсеДанные(УчетнаяЗапись) Экспорт

	ДанныеАвторизации = ИнтеграцияСЯндексМаркетСервер.ЯндексМаркетДанныеАвторизацииПолучить(УчетнаяЗапись);
	Если Не ЗначениеЗаполнено( ДанныеАвторизации.access_token ) Тогда
		ТекстОшибки =  "Ошибка при обновлении данных в Яндекс Маркет: Токен для авторизации не задан. Необходимо выполнить авторизацию в форме настройки.";
		ОбщегоНазначения.СообщитьПользователю( ТекстОшибки );
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстОшибки, УчетнаяЗапись );
		Возврат Ложь;
	КонецЕсли;
	
	ОбменДаннымиОбновитьТоварныйКаталог( УчетнаяЗапись );
	ОбменДаннымиВыгрузитьЦеныИз1СВЯндексМаркет( УчетнаяЗапись );
	ОбменДаннымиВыгрузитьОстаткиТоваровВЯндексМаркет(  УчетнаяЗапись );
	
	Возврат Истина;
КонецФункции

Функция ОбменДаннымиОбновитьТоварныйКаталог(УчетнаяЗапись) Экспорт

	ДанныеАвторизации = ИнтеграцияСЯндексМаркетСервер.ЯндексМаркетДанныеАвторизацииПолучить(УчетнаяЗапись);
	Если Не ЗначениеЗаполнено( ДанныеАвторизации.access_token ) Тогда
		ТекстОшибки =  "Ошибка при обновлении данных в Яндекс Маркет: Токен для авторизации не задан. Необходимо выполнить авторизацию в форме настройки.";
		ОбщегоНазначения.СообщитьПользователю( ТекстОшибки );
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстОшибки, УчетнаяЗапись );
		Возврат Ложь;
	КонецЕсли;

	ОбменДаннымиПолучитьРекомендации( УчетнаяЗапись );
	ОбменДаннымиОтправитьСвязиТоваровНаМодерацию( УчетнаяЗапись );
	ОбменДаннымиПолучитьСтатусыМодерации( УчетнаяЗапись );
	
КонецФункции

Функция ОбменДаннымиПолучитьРекомендации(УчетнаяЗапись, ShopSKU = Неопределено)
	
	Склады = СкладыСоответствияПолучить( УчетнаяЗапись );
	Если Склады.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	СкладыСтрока = Склады[0];
	
	Если ShopSKU = Неопределено Тогда
		ЗапросТекст = 
		"ВЫБРАТЬ ПЕРВЫЕ 200
		|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации КАК shopSku,
		|	СтатусыПубликацииТоваровЯндексМаркет.ПредставлениеТовара КАК name,
		|	СтатусыПубликацииТоваровЯндексМаркет.КатегорияНоменклатуры КАК category,
		|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Производитель.Наименование, """") КАК vendor,
		|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Производитель.Наименование, """") КАК ПроизводительНаименование,
		|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.СтранаПроисхождения.Наименование, """") КАК СтранаПроисхожденияНаименование,
		|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Артикул, """") КАК vendorCode
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
		|ГДЕ
		|	(СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.Новый)
		|)
		|	И СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись";
	Иначе
		ЗапросТекст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации КАК shopSku,
		|	СтатусыПубликацииТоваровЯндексМаркет.ПредставлениеТовара КАК name,
		|	СтатусыПубликацииТоваровЯндексМаркет.КатегорияНоменклатуры КАК category,
		|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Производитель.Наименование, """") КАК vendor,
		|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Производитель.Наименование, """") КАК ПроизводительНаименование,
		|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.СтранаПроисхождения.Наименование, """") КАК СтранаПроисхожденияНаименование,
		|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Артикул, """") КАК vendorCode
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
		|ГДЕ
		|	(СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.Новый)
		|)
		|	И СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации = &shopSku
		|	И СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись";
	КонецЕсли;	

	Запрос = Новый Запрос( ЗапросТекст );
	Запрос.УстановитьПараметр("shopSku", ShopSKU);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТоварыДляПолученияРекомендаций = РезультатЗапроса.Выбрать();
	
	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		
		ТоварыДляПолученияРекомендацийПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( РезультатЗапроса.Выгрузить() );
		
		ЛогКомментарий = НСтр("ru = 'ОбменДаннымиПолучитьРекомендации: ТоварыДляПолученияРекомендаций:'") + " " +  Символы.ПС
		+ ТоварыДляПолученияРекомендацийПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		
		ЛогПараметры = Новый Структура;
		ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ПолучениеРекомендации );
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, , ЛогПараметры );
	КонецЕсли;	
	
	Если ТоварыДляПолученияРекомендаций.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДанныеАвторизации = ИнтеграцияСЯндексМаркетСервер.ЯндексМаркетДанныеАвторизацииПолучить(УчетнаяЗапись);
	
	ЯндексПриложениеДанные = ЯндексМаркетПриложениеДанныеПолучить();
	client_id = ЯндексПриложениеДанные.client_id;
	ssl = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	
	Сервер = ИнтеграцияСЯндексМаркетСервер.СерверПартнерскогоAPIЯндексМаркет();
	ИмяМетода = "/offer-mapping-entries/suggestions.json";
	СкладыСтрока = Склады[0];
	
	campaign_id = СокрЛП( СкладыСтрока.ИдентификаторКампанииМаркетплейса );
	Адрес ="/" + campaign_id + ИмяМетода;	
	
	Пока ТоварыДляПолученияРекомендаций.Следующий() Цикл
		
		СтруктураПредложения = Новый Структура("shopSku, name, category, vendor, vendorCode");
		
		ЗаполнитьЗначенияСвойств(СтруктураПредложения, ТоварыДляПолученияРекомендаций);
		
		СтруктураПредложения.Вставить( "manufacturer", ТоварыДляПолученияРекомендаций.ПроизводительНаименование );

		manufacturerCountries = Новый Массив;
		manufacturerCountries.Добавить( ТоварыДляПолученияРекомендаций.СтранаПроисхожденияНаименование );
		СтруктураПредложения.Вставить( "manufacturerCountries", manufacturerCountries );

		offers = Новый Массив;
		offers.Добавить(СтруктураПредложения);	
		
		СтруктураДляJSON = Новый Структура;
		СтруктураДляJSON.Вставить("offers",offers);
		
		ТелоЗапроса = ИнтеграцияСЯндексМаркетСервер.ВJSON( СтруктураДляJSON );
		HTTPСоединение = Новый HTTPСоединение(Сервер,,,,,,ssl);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");
		Заголовки.Вставить("Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token + ", oauth_client_id=" + client_id);
		
		HTTPЗапрос = Новый HTTPЗапрос(Адрес, Заголовки);
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8");

		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
			HTTPЗапросПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPЗапрос );
			
			ЛогКомментарий = НСтр("ru = 'HTTP: Запрос:'") + Символы.ПС
			+ HTTPЗапросПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
			
			ЛогПараметры = Новый Структура;
			ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ПолучениеРекомендации );
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, , ЛогПараметры );
		КонецЕсли;	
		
		Попытка
			HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки( HTTPЗапрос );
		Исключение
			ТекстОшибки = НСтр("ru = 'Ошибка при получении рекомендаций Яндекс Маркет:'") + " " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначения.СообщитьПользователю( ТекстОшибки );
			ЗаписьЖурналаРегистрации(ЯндексМаркетСобытиеЖурналаРегистрацииПолучить(), УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстОшибки, УчетнаяЗапись, Истина );
			Возврат Ложь;
		КонецПопытки;

		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
			HTTPМетод = "POST";
			HTTPСоединениеПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPСоединение );
			HTTPОтветПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPОтвет );
			
			ЛогКомментарий = НСтр("ru = 'HTTP: Ответ: Метод:'") + " " + HTTPМетод + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков() 
			+ HTTPОтветПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ HTTPСоединениеПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
			
			ЛогПараметры = Новый Структура;
			ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ПолучениеРекомендации );
			ЛогПараметры.Вставить( "Сервер", HTTPСоединение.Сервер );
			ЛогПараметры.Вставить( "АдресРесурса", HTTPЗапрос.АдресРесурса );
			
			ЛогЭтоОшибка = HTTPОтвет.КодСостояния <> 200;
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, ЛогЭтоОшибка, ЛогПараметры );
		КонецЕсли;	
		
		HTTPОтветТелоСтрока = HTTPОтвет.ПолучитьТелоКакСтроку();
		СтруктураОтвета = ИнтеграцияСЯндексМаркетСервер.ИзJSON(HTTPОтветТелоСтрока);
		КодСостояния = HTTPОтвет.КодСостояния;
		
		Если СтруктураОтвета = Неопределено 
			Или НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтруктураОтвета, "status") Тогда
			ЗаписатьОшибкуПоSKU(УчетнаяЗапись, ТоварыДляПолученияРекомендаций.ShopSKU, "Ошибка выполнения запроса: " + HTTPОтветТелоСтрока, "E153825" );
			Продолжить;
		КонецЕсли;
		
		Если КодСостояния = 200 И СтруктураОтвета.status = "OK" Тогда
			ОбновитьСтатусыПубликации(УчетнаяЗапись, СтруктураОтвета.result);
		Иначе
			Если СтруктураОтвета.status = "ERROR" Тогда
				ЗаписатьОшибкиПоSKU(УчетнаяЗапись, ТоварыДляПолученияРекомендаций.ShopSKU, СтруктураОтвета.errors);
			Иначе
				ЗаписатьОшибкуПоSKU(УчетнаяЗапись, ТоварыДляПолученияРекомендаций.ShopSKU, "Ошибка выполнения запроса: " + HTTPОтветТелоСтрока, "E85716" );
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Процедура ЗаписатьОшибкиПоSKU( УчетнаяЗапись, shopSku, МассивОшибок )
	
	ТекстыОшибок = "";
	КодыОшибок = "";
	Для Каждого СтруктураОшибки Из МассивОшибок Цикл
	
		ТекстОшибки = "" + shopSku + ": " + СтруктураОшибки.message + " ( " + СтруктураОшибки.code + " )";
		ТекстОшибкиПояснение = ОбменСВнешнимиСистемамиЛогирование.БазаЗнанийСовпаденияНайтиСтрокойПолучить( "Yandex: " + ТекстОшибки );
		ТекстОшибкиПодробный = ?(ПустаяСтрока( ТекстОшибкиПояснение ), "", ТекстОшибкиПояснение + " " ) + ТекстОшибки;

		ТекстыОшибок = ТекстыОшибок + ТекстОшибкиПодробный + ";";
		КодыОшибок = КодыОшибок + СтруктураОшибки.code + ";";
		
	КонецЦикла;
	ЗаписатьОшибкуПоSKU( УчетнаяЗапись, shopSku, ТекстыОшибок, КодыОшибок );
	
КонецПроцедуры

Процедура ЗаписатьОшибкуПоSKU( УчетнаяЗапись, shopSku, ТекстОшибки, КодОшибки )

	ОбщегоНазначения.СообщитьПользователю( ТекстОшибки );
	ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстОшибки, УчетнаяЗапись, Истина );

	СтруктураИзмерений = ПолучитьСтруктуруИзмеренийПоИдентификаторуПубликации(УчетнаяЗапись, shopSku);
	
	МенеджерЗаписи = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.УчетнаяЗаписьМаркетплейса = СтруктураИзмерений.УчетнаяЗапись;
	МенеджерЗаписи.Номенклатура = СтруктураИзмерений.Номенклатура;
	МенеджерЗаписи.Характеристика = СтруктураИзмерений.Характеристика;
	
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.КодОшибки = КодОшибки;
		МенеджерЗаписи.ОписаниеОшибки = ТекстОшибки;
		МенеджерЗаписи.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.ОшибкаПриОтправкеНаМодерацию;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтруктуруИзмеренийПоИдентификаторуПубликации( УчетнаяЗапись, ИдентификаторПубликации) Экспорт
	
	Структура = Новый Структура( "УчетнаяЗапись, Номенклатура, Характеристика" );

	ЗапросТекст = 
	"ВЫБРАТЬ Первые 1
	|	СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗапись,
	|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура,
	|	СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
	|ГДЕ
	|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации = &ИдентификаторПубликации
	|	И СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись";

	Запрос = Новый Запрос( ЗапросТекст );
	Запрос.УстановитьПараметр( "УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр( "ИдентификаторПубликации",ИдентификаторПубликации);
	ЗапросВыборка = Запрос.Выполнить().Выбрать();
	
	Если ЗапросВыборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств( Структура, ЗапросВыборка );
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

Процедура ОбновитьСтатусыПубликации(УчетнаяЗапись, Рекомендации)
	
	Для Каждого СтруктураПредложения Из Рекомендации.offers Цикл
	
		Если Не СтруктураПредложения.Свойство("shopSku") Тогда
			Продолжить;
		КонецЕсли;
		
		Набор = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей();
		СтруктураИзмерений = ПолучитьСтруктуруИзмеренийПоИдентификаторуПубликации( УчетнаяЗапись, СтруктураПредложения.shopSku);
		
		Набор.Отбор.УчетнаяЗаписьМаркетплейса.Установить(СтруктураИзмерений.УчетнаяЗапись);
		Набор.Отбор.Номенклатура.Установить(СтруктураИзмерений.Номенклатура);
		Набор.Отбор.Характеристика.Установить(СтруктураИзмерений.Характеристика);
		
		Набор.Прочитать();
		
		Если Набор.Количество() > 0 Тогда
			Запись = Набор[0];
			Если СтруктураПредложения.Свойство("marketSku") Тогда
				marketSku = СокрЛП(СтрЗаменить(СтруктураПредложения.marketSku,Символ(160),""));  
				Запись.ИдентификаторТовараПлощадки = marketSku; 
				Запись.ЕстьИдентификаторПлощадки = Истина;
			КонецЕсли;
			Если СтруктураПредложения.Свойство("marketSkuName") Тогда 
				Запись.НаименованиеТовараПлощадки = СтруктураПредложения.marketSkuName;
				Запись.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.ПолученаРекомендация;
			Иначе
				Запись.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.РекомендацияНеНайдена;
				Запись.ОписаниеОшибки = 
				"Для товара с указанными свойствами не была подобрана рекомендованная карточка товара на Яндекс Маркет. 
				|Для получения рекомендации укажите в запросе как можно больше информации о товаре (категорию, бренд "
				+ "(марку),штрих-коды товара, ориентировочную цену товара). После заполненения данных отправьте "
				+ "повторно публикацию на получение рекомендации (кнопка ""Получить рекомендацию"").
				|Попробуйте найти товар в поиске по разделу «Покупки» на Маркете. 
				|Если товар найдется, SKU на Яндексе можно взять из URL его страницы. 
				|Например, если URL страницы товара — https://pokupki.market.yandex.ru/product/7715752, то его SKU на Яндексе — 7715752.
				|Если вы смогли самостоятельно подобрать SKU на Яндексе - заполните его и отправьте товар на модерацию (кнопка ""Отправить на модерацию"").
				|Если SKU не удалось подобрать - наиболее подробно опишите товар и отправьте запрос без указания SKU "
				+ "(кнопка ""Отправить на модерацию"") - сотрудники Маркета могут подобрать или создать карточки "
				+ "для ваших товаров в личном кабинете, если товар еще не продается на Маркете."; 
			КонецЕсли;
			Если СтруктураПредложения.Свойство("marketCategoryName") Тогда 
				Запись.НаименованиеКатегорииПлощадки = СтруктураПредложения.marketCategoryName;
			КонецЕсли;
			Если СтруктураПредложения.Свойство("marketModelName") Тогда 
				Запись.НаименованиеМоделиПлощадки = СтруктураПредложения.marketModelName;
			КонецЕсли;
			Набор.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбменДаннымиОтправитьСвязиТоваровНаМодерацию(УчетнаяЗапись)

	Склады = СкладыСоответствияПолучить( УчетнаяЗапись );
	Если Склады.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПолеDescriptionМаксимальнаяДлина = 6000;// значение из документации: https://yandex.ru/dev/market/partner-api/doc/ru/reference/offer-mappings/updateOfferMappingEntries
	
	ЗапросТекст = 
	"ВЫБРАТЬ ПЕРВЫЕ 500
	|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Ссылка КАК Номенклатура,
	|	СтатусыПубликацииТоваровЯндексМаркет.Характеристика.Ссылка КАК Характеристика,
	|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации КАК shopSku,
	|	"""" КАК vendor,
	|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Артикул, """") КАК vendorCode,
	|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Производитель.Наименование, """") КАК manufacturer,
	|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.СтранаПроисхождения.Наименование, """") КАК manufacturerCountry,
	|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторТовараПлощадки КАК marketSku,
	|	СтатусыПубликацииТоваровЯндексМаркет.НаименованиеТовараПлощадки КАК name,
	|	СтатусыПубликацииТоваровЯндексМаркет.НаименованиеКатегорииПлощадки КАК category,
	|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Вес КАК НоменклатураВес,
	|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Высота КАК НоменклатураВысота,
	|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Длина КАК НоменклатураДлина,
	|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Ширина КАК НоменклатураШирина,
	|	ПОДСТРОКА(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Комментарий, 1, &ПолеDescriptionМаксимальнаяДлина) КАК Description,
	|	СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса
	|ИЗ
	|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
	|ГДЕ
	|	(СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.УтвержденаРекомендация)
	|			ИЛИ СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.СозданиеНового))
	|	И СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись";
	
	
	Запрос = Новый Запрос( ЗапросТекст );
	Запрос.УстановитьПараметр( "УчетнаяЗапись", УчетнаяЗапись );
	Запрос.УстановитьПараметр( "ПолеDescriptionМаксимальнаяДлина", ПолеDescriptionМаксимальнаяДлина );
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		
		ТоварыДляМодерацииПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( РезультатЗапроса.Выгрузить() );
		СкладыПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( Склады );
		
		ЛогКомментарий = НСтр("ru = 'ОбменДаннымиОтправитьСвязиТоваровНаМодерацию: ТоварыДляМодерацииПредставление:'") + Символы.ПС
		+ ТоварыДляМодерацииПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ "Склады:" + Символы.ПС
		+ СкладыПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		
		ЛогПараметры = Новый Структура;
		ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаТоваровИз1С );
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, , ЛогПараметры );
	КонецЕсли;	
	
	Товары = РезультатЗапроса.Выбрать();
	Если Товары.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ssl = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	
	ДанныеАвторизации = ИнтеграцияСЯндексМаркетСервер.ЯндексМаркетДанныеАвторизацииПолучить(УчетнаяЗапись);
	
	ЯндексПриложениеДанные = ЯндексМаркетПриложениеДанныеПолучить();
	client_id = ЯндексПриложениеДанные.client_id;
	
	Сервер = ИнтеграцияСЯндексМаркетСервер.СерверПартнерскогоAPIЯндексМаркет();
	ИмяМетода = "/offer-mapping-entries/updates.json";	

	HTTPСоединение = Новый HTTPСоединение(Сервер,,,,,,ssl);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token + ", oauth_client_id=" + client_id);
	
	Пока Товары.Следующий() Цикл
		
		Для Каждого СкладыСтрока Из Склады Цикл
			
			campaign_id = СокрЛП( СкладыСтрока.ИдентификаторКампанииМаркетплейса );
			Адрес ="/" + campaign_id + ИмяМетода;
			
			СтруктураОписанияТовара = Новый Структура( "shopSku, name, category, manufacturer, manufacturerCountries, weightDimensions, urls, barcodes, vendor, vendorCode, description" );
			ЗаполнитьЗначенияСвойств(СтруктураОписанияТовара, Товары );
			
			urls = Новый Массив;
			urls.Добавить("https://pokupki.market.yandex.ru/product/" + СокрЛП(СтрЗаменить(Товары.marketSku, Символ(160),"")));
			СтруктураОписанияТовара.urls = urls;
			
			barcodes = ПолучитьШрихКоды( Товары.Номенклатура, Товары.Характеристика );
			СтруктураОписанияТовара.Вставить("barcodes", barcodes);
			СтруктураОписанияТовара.barcodes = barcodes; 
			
			manufacturerCountries = Новый Массив;
			manufacturerCountries.Добавить(Товары.manufacturerCountry);
			СтруктураОписанияТовара.manufacturerCountries = manufacturerCountries;
			
			СтруктураВесогабаритов = ПолучитьВесогабариты(Товары.НоменклатураВес,
			Товары.НоменклатураВысота,
			Товары.НоменклатураДлина,
			Товары.НоменклатураШирина);
			
			СтруктураОписанияТовара.weightDimensions = СтруктураВесогабаритов;
			
			СтруктураСвязи = Новый Структура( "offer, mapping" );
			СтруктураСвязи.mapping = Новый Структура( "marketSku", Товары.marketSku );
			СтруктураСвязи.offer = СтруктураОписанияТовара; 
			
			offerMappingEntries = Новый Массив;
			// можно до 500 товаров: https://yandex.ru/dev/market/partner-api/doc/ru/reference/offer-mappings/updateOfferMappingEntries
			// но в случае ошибки в одном товаре ответ сервера {"status":"ERROR","errors":[{"code":"BAD_REQUEST","message":"bad request"}]}
			// и невозможно определить товар с ошибкой
			offerMappingEntries.Добавить( СтруктураСвязи );
			
			СтруктураДляJSON = Новый Структура;
			СтруктураДляJSON.Вставить( "offerMappingEntries", offerMappingEntries );
			
			ТелоЗапроса = ИнтеграцияСЯндексМаркетСервер.ВJSON( СтруктураДляJSON );
			
			HTTPЗапрос = Новый HTTPЗапрос( Адрес, Заголовки );
			HTTPЗапрос.УстановитьТелоИзСтроки( ТелоЗапроса, "UTF-8" );
			
			Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
				HTTPЗапросПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPЗапрос );
				
				ЛогКомментарий = НСтр("ru = 'HTTP: Запрос:'") + Символы.ПС
				+ HTTPЗапросПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
				+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
				
				ЛогПараметры = Новый Структура;
				ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаТоваровИз1С );
				ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, , ЛогПараметры );
			КонецЕсли;
			
			Попытка
				HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки( HTTPЗапрос );
			Исключение 
				ТекстОшибки = НСтр("ru = 'Ошибка выполнения запроса'") + " " + ПодробноеПредставлениеОшибки( ИнформацияОбОшибке() );
				ЗаписьЖурналаРегистрации(ЯндексМаркетСобытиеЖурналаРегистрацииПолучить(), УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
				ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстОшибки, УчетнаяЗапись, Истина );
				Возврат Ложь;
			КонецПопытки;	
			
			Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
				HTTPМетод = "POST";
				HTTPСоединениеПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPСоединение );
				HTTPОтветПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPОтвет );
				
				ЛогКомментарий = НСтр("ru = 'HTTP: Ответ: Метод:'") + " " + HTTPМетод + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков() 
				+ HTTPОтветПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
				+ HTTPСоединениеПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
				+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
				
				ЛогПараметры = Новый Структура;
				ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаТоваровИз1С );
				ЛогПараметры.Вставить( "Сервер", HTTPСоединение.Сервер );
				ЛогПараметры.Вставить( "АдресРесурса", HTTPЗапрос.АдресРесурса );
				
				ЛогЭтоОшибка = HTTPОтвет.КодСостояния <> 200;
				ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, ЛогЭтоОшибка, ЛогПараметры );
			КонецЕсли;
			
			СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
			СтруктураОтвета = ИнтеграцияСЯндексМаркетСервер.ИзJSON(СтрокаОтвета);
			КодСостояния = HTTPОтвет.КодСостояния;
			
			shopSku = Товары.shopSku;
			Если КодСостояния= 200 И СтруктураОтвета.status = "OK" Тогда
				ЗаписатьСтатусНаМодерации( УчетнаяЗапись, shopSku );
			Иначе	
				Если СтруктураОтвета.status = "ERROR" Тогда
					ЗаписатьОшибкиПоSKU( УчетнаяЗапись, shopSku, СтруктураОтвета.errors );
				Иначе
					КодОшибки = "E53253";
					ТоварПредставление = ПредставлениеНоменклатуры( Товары.Номенклатура, Товары.Характеристика );
					ТекстОшибки = "Ошибка при отправке товара на модерацию: " + ТоварПредставление + " ( " + Товары.shopSku + " ) "
					 + ": Идентификатор кампании: " + campaign_id + ": " + СтрокаОтвета;
					ЗаписатьОшибкуПоSKU( УчетнаяЗапись, shopSku, СтрокаОтвета, КодОшибки );
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;	// склады
	КонецЦикла;	// товары
	
	Возврат Истина;
КонецФункции

Функция ПредставлениеНоменклатуры( Номенклатура, Характеристика )

	СтрПредставление = СокрЛП(Номенклатура);

	Если ЗначениеЗаполнено(Характеристика)Тогда
		СтрПредставление = СтрПредставление + ", " + СокрЛП(Характеристика);
	КонецЕсли;

	Возврат СтрПредставление;

КонецФункции

Функция ПолучитьШрихКоды(Номенклатура, Характеристика)
	
	Запрос = Новый Запрос ();
	Запрос.Параметры.Вставить("Номенклатура",Номенклатура);
	Запрос.Параметры.Вставить("Характеристика",Характеристика);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК barcode,
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	|	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ШтрихКоды = Новый Массив;
	
	Если Результат.Количество()>0 Тогда
		ШтрихКоды = Результат.ВыгрузитьКолонку( "barcode" );
	КонецЕсли;	
	
	Возврат ШтрихКоды;
КонецФункции

Функция ПолучитьВесогабариты(пВес, пВысота, пДлина, пШирина) Экспорт
	
	СтруктураВесогабаритов = Новый Структура("length,width,height,weight", 0, 0, 0, 0);
	
	СтруктураВесогабаритов.weight = Формат(пВес, "ЧДЦ=2; ЧРД=.");
	СтруктураВесогабаритов.height = Формат(пВысота, "ЧДЦ=2; ЧРД=.");
	СтруктураВесогабаритов.length = Формат(пДлина, "ЧДЦ=2; ЧРД=.");
	СтруктураВесогабаритов.width = Формат(пШирина, "ЧДЦ=2; ЧРД=.");
	
	Возврат СтруктураВесогабаритов;
	
КонецФункции

Процедура ЗаписатьСтатусНаМодерации( УчетнаяЗапись, shopSku )
	
	Набор = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей();
	СтруктураИзмерений = ПолучитьСтруктуруИзмеренийПоИдентификаторуПубликации( УчетнаяЗапись, shopSku);
	
	Набор.Отбор.УчетнаяЗаписьМаркетплейса.Установить(СтруктураИзмерений.УчетнаяЗапись);
	Набор.Отбор.Номенклатура.Установить(СтруктураИзмерений.Номенклатура);
	Набор.Отбор.Характеристика.Установить(СтруктураИзмерений.Характеристика);
	
	Набор.Прочитать();
	Если Набор.Количество() > 0 Тогда
		Запись = Набор[0];
		Если Запись.Статус <> Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации Тогда
			Запись.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации;
			Набор.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбменДаннымиПолучитьСтатусПубликации( УчетнаяЗапись, shopSku )

	Склады = СкладыСоответствияПолучить( УчетнаяЗапись );
	Если Склады.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеАвторизации = ИнтеграцияСЯндексМаркетСервер.ЯндексМаркетДанныеАвторизацииПолучить(УчетнаяЗапись);
	
	ЯндексПриложениеДанные = ЯндексМаркетПриложениеДанныеПолучить();
	client_id = ЯндексПриложениеДанные.client_id;
	
	Сервер = ИнтеграцияСЯндексМаркетСервер.СерверПартнерскогоAPIЯндексМаркет();
	ИмяМетода = "/offer-mapping-entries.json";	

	ssl = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	HTTPСоединение = Новый HTTPСоединение(Сервер,,,,,,ssl);

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token + ", oauth_client_id=" + client_id);

	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
	КонецЕсли;
	
	СтатусыМодерацииПоСкладам = Новый Массив;
	Для Каждого СкладыСтрока Из Склады Цикл
		
		campaign_id = СокрЛП( СкладыСтрока.ИдентификаторКампанииМаркетплейса );
		Адрес = "/" + campaign_id + ИмяМетода + "?shop_sku=" + shopSku;
		
		HTTPЗапрос = Новый HTTPЗапрос( Адрес, Заголовки );
		
		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
			
			HTTPЗапросПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPЗапрос );
			
			ЛогКомментарий = НСтр("ru = 'HTTP: Запрос:'") + Символы.ПС
			+ HTTPЗапросПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
			
			ЛогПараметры = Новый Структура;
			ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ПроверкаСтатусаПубликации );
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, , ЛогПараметры );
		КонецЕсли;
		
		Попытка
			HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод( "GET", HTTPЗапрос );
		Исключение 
			ТекстОшибки = НСтр("ru = 'ОбменДаннымиПолучитьСтатусПубликации: Ошибка выполнения HTTP запроса:'") + " " + ПодробноеПредставлениеОшибки( ИнформацияОбОшибке() );
			ЗаписьЖурналаРегистрации(ЯндексМаркетСобытиеЖурналаРегистрацииПолучить(), УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстОшибки, УчетнаяЗапись, Истина );
		КонецПопытки;	
		
		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
			HTTPМетод = "GET";
			HTTPСоединениеПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPСоединение );
			HTTPОтветПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPОтвет );
			
			ЛогКомментарий = НСтр("ru = 'HTTP: Ответ: Метод:'") + " " + HTTPМетод + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков() 
			+ HTTPОтветПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ HTTPСоединениеПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
			
			ЛогПараметры = Новый Структура;
			ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ПроверкаСтатусаПубликации );
			ЛогПараметры.Вставить( "Сервер", HTTPСоединение.Сервер );
			ЛогПараметры.Вставить( "АдресРесурса", HTTPЗапрос.АдресРесурса );
			
			ЛогЭтоОшибка = HTTPОтвет.КодСостояния <> 200;
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, ЛогЭтоОшибка, ЛогПараметры );
		КонецЕсли;
		
		СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		СтруктураОтвета = ИнтеграцияСЯндексМаркетСервер.ИзJSON(СтрокаОтвета);
		КодСостояния = HTTPОтвет.КодСостояния;
		
		Если КодСостояния = 200 И СтруктураОтвета.status = "OK" Тогда
		
			СтатусМодерацииИзОтветаЯндекса = СтатусМодерацииИзОтветаЯндексаПолучить( УчетнаяЗапись, СтруктураОтвета.result, shopSku );
			Значение = Новый Структура( "Склад1С, СкладМаркетплейсИдентификатор, СтатусМодерацииИзОтветаЯндекса", 
			СкладыСтрока.Склад1С, СкладыСтрока.СкладМаркетплейсИдентификатор, СтатусМодерацииИзОтветаЯндекса );
			СтатусыМодерацииПоСкладам.Добавить( Значение );
			
		Иначе
			
			СобытиеОписание = "Получение статуса публикации: shopSku = " + shopSku;
			ТекстОшибки = СтрокаОтвета;
			ТекстОшибкиПояснение = ОбменСВнешнимиСистемамиЛогирование.БазаЗнанийСовпаденияНайтиСтрокойПолучить( "Yandex: " + ТекстОшибки );
			ТекстОшибкиПодробный = СобытиеОписание + ": " + ?(ПустаяСтрока( ТекстОшибкиПояснение ), "", ТекстОшибкиПояснение + " " ) + ТекстОшибки;
			
			ЗаписатьОшибкуПоSKU( УчетнаяЗапись, shopSku, ТекстОшибкиПодробный, "E6327" );
		КонецЕсли;
		
	КонецЦикла; // склады
	
	// обновим статус "худшим" статусом по складам
	ОбновитьСтатусМодерацииТовара( УчетнаяЗапись, shopSku, СтатусыМодерацииПоСкладам )
	
КонецПроцедуры
 
 Функция СтатусМодерацииИзОтветаЯндексаПолучить( УчетнаяЗапись, result, shopSku )
	
	offerMappingEntries = result.offerMappingEntries;
	Если offerMappingEntries.Количество() = 0 Тогда
		ТекстОшибки = "Ошибка: ОбновитьСтатусыНаМодерации: shopSku = " + shopSku + ": offerMappingEntries: Количество элементов 0";
		ЗаписьЖурналаРегистрации(ЯндексМаркетСобытиеЖурналаРегистрацииПолучить(), УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстОшибки, УчетнаяЗапись, Истина );
		Возврат Неопределено;
	КонецЕсли;
	
	offer = offerMappingEntries[0].offer;
	processingState = offer.processingState;
	Если shopSku <> offer.shopSku Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если processingState.Свойство( "notes" ) Тогда 
		notes = processingState.notes;
	Иначе
		notes = Неопределено;
	КонецЕсли;
	
	СтатусСОписанием = ПолучитьСатусМодерацииСОписанием( processingState.status, notes );
	
	marketSku = "";
	Если offerMappingEntries[0].Свойство( "mapping" ) И offerMappingEntries[0].mapping.Свойство( "marketSku" ) Тогда
		marketSku = offerMappingEntries[0].mapping.marketSku;
		marketSku = СокрЛП( СтрЗаменить( marketSku, Символ( 160 ), "" ));
	КонецЕсли;
	
	СтатусСОписанием.Вставить( "marketSku", marketSku );
	
	Возврат СтатусСОписанием;
КонецФункции

 
Функция ПолучитьСатусМодерацииСОписанием( status, notes = Неопределено )
	
	Структура = Новый Структура( "Статус, ОписаниеОшибки, status" );
	Структура.status = status;
	
	Если status = "IN_WORK" Тогда
	
		Структура.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации;
		
	ИначеЕсли status = "READY" Тогда
		
		Структура.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена; 
		
	ИначеЕсли status = "CREATE_ERROR" Тогда
		
		Структура.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена;
		
		Структура.ОписаниеОшибки = "Товар не создан из-за ошибки заполнения полей. "
		+ "Необходимо проверить заполнение полей в личном кабинете на сайте Яндекс маркет.";
	
	ИначеЕсли status = "NEED_CONTENT" Тогда
		
		Структура.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена;
		
		Структура.ОписаниеОшибки = "Для товара не указан SKU на Яндексе, и сотрудники Маркета не"
		+ " смогли привязать его к карточке. Найдите карточку товара самостоятельно в поиске "
		+ "по разделу «Покупки» или создайте ее, если товар еще не продается на Маркете.";
		
	ИначеЕсли status = "NEED_INFO" Тогда
		
		Структура.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена;
		СтрокаКомментария = "Вы указали для товара неверную или недостаточную информацию. "
		+ "Уточните входные данные запроса и отправьте связь на модерацию повторно.";
		
		Если notes <> "Неопределено" И ТипЗнч(notes) = Тип("Строка") Тогда 
			СтрокаКомментария  = СтрокаКомментария + notes; 
		КонецЕсли;	
		
		Структура.ОписаниеОшибки = СтрокаКомментария;
		
	ИначеЕсли status = "SUSPENDED" Тогда
		
		Структура.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена;
		
		Структура.ОписаниеОшибки = "Маркет пока не размещает товары данной категории.";
		
	ИначеЕсли status = "REJECTED" Или status = "EJECTED" Тогда
		
		Структура.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена;
		
		Структура.ОписаниеОшибки = "Маркет не планирует размещать подобные товары. "
		+ "Если у вас есть вопросы по категориям товаров, размещаемым на Маркете, обратитесь в службу поддержки.";
		
	ИначеЕсли status = "OTHER" Тогда
		
		Структура.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена; 
		
		Структура.ОписаниеОшибки = "Товар не прошел модерацию по неуточненной причине. Обратитесь в службу "
		+ "поддержки или к вашему менеджеру.";
		
	КонецЕсли;
	
	Возврат Структура;
КонецФункции

Функция ОбновитьСтатусМодерацииТовара( УчетнаяЗапись, shopSku, СтатусыМодерацииПоСкладам )

    Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
    	СтатусыМодерацииПоСкладамПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( СтатусыМодерацииПоСкладам );
		ЛогКомментарий = "ОбновитьСтатусМодерацииТовара: shopSku = " + shopSku + ": " + Символы.ПС 
		+ "СтатусыМодерацииПоСкладам: " +  Символы.ПС + СтатусыМодерацииПоСкладамПредставление;

		ЛогПараметры = Новый Структура;
		ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ПроверкаСтатусаПубликации );
		
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, , ЛогПараметры );
	КонецЕсли;
	
	СтатусыМодерацииОсновной = Неопределено;
	Для Каждого СтатусМодерации Из СтатусыМодерацииПоСкладам Цикл 
	
		Если СтатусМодерации.СтатусМодерацииИзОтветаЯндекса = Неопределено Тогда
			Статус = Неопределено;
			Прервать;;
		КонецЕсли;
		
		Статус = СтатусМодерации.СтатусМодерацииИзОтветаЯндекса.Статус;
		Если Статус = Неопределено Тогда
			Прервать;
		ИначеЕсли Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена Тогда
			Прервать;
		ИначеЕсли Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации Тогда
			Прервать;
		КонецЕсли;
			
	КонецЦикла;
	
	Набор = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей();
	СтруктураИзмерений = ПолучитьСтруктуруИзмеренийПоИдентификаторуПубликации( УчетнаяЗапись, shopSku );
	
	Набор.Отбор.УчетнаяЗаписьМаркетплейса.Установить( СтруктураИзмерений.УчетнаяЗапись );
	Набор.Отбор.Номенклатура.Установить( СтруктураИзмерений.Номенклатура );
	Набор.Отбор.Характеристика.Установить( СтруктураИзмерений.Характеристика );
	
	Набор.Прочитать();
	Если Набор.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запись = Набор[0];
	
	Если СтатусМодерации.СтатусМодерацииИзОтветаЯндекса <> Неопределено 
	И ЗначениеЗаполнено( СтатусМодерации.СтатусМодерацииИзОтветаЯндекса.marketSku ) Тогда
		Запись.ИдентификаторТовараПлощадки = СтатусМодерации.СтатусМодерацииИзОтветаЯндекса.marketSku;
	КонецЕсли;
	
	Если ЗначениеЗаполнено( Статус ) Тогда
		Запись.Статус = Статус;
	Иначе

		СтатусДляЛога = ИнтеграцияСМаркетплейсамиСервер.СтруктураСвойствоЗначениеПолучить( СтатусМодерации.СтатусМодерацииИзОтветаЯндекса, "status", Неопределено );
		ЛогКомментарий = "Ошибка: ОбновитьСтатусМодерацииТовара: " + shopSku + ": Значение не обработано: processingState.status = <" + СтатусДляЛога + ">";

		ЛогПараметры = Новый Структура;
		ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ПроверкаСтатусаПубликации );

		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, Истина, ЛогПараметры );

	КонецЕсли;
	
	Если СтатусМодерации.СтатусМодерацииИзОтветаЯндекса <> Неопределено Тогда
		Запись.ОписаниеОшибки = СтатусМодерации.СтатусМодерацииИзОтветаЯндекса.ОписаниеОшибки;
	КонецЕсли;
	
	Набор.Записать();
	
	Возврат СтатусМодерации;
КонецФункции

Процедура ОбменДаннымиПолучитьСтатусыМодерации( УчетнаяЗапись )
	
	ЗапросТекст = 
	"ВЫБРАТЬ
	|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации КАК ИдентификаторПубликации
	|ИЗ
	|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
	|ГДЕ
	|	СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации)
	|	И СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись";
	
	Запрос = Новый Запрос(ЗапросТекст);
	Запрос.УстановитьПараметр( "УчетнаяЗапись", УчетнаяЗапись );
   
   	РезультатЗапроса = Запрос.Выполнить();
   	
	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		
		ТоварыПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( РезультатЗапроса.Выгрузить() );
		
		ЛогКомментарий = НСтр("ru = 'ОбменДаннымиПолучитьСтатусыМодерации: Товары:'") + " " +  Символы.ПС
		+ ТоварыПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		
		ЛогПараметры = Новый Структура;
		ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ПолучениеРекомендации );
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, , ЛогПараметры );
	КонецЕсли;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВыборка = РезультатЗапроса.Выбрать();
	
	Пока ЗапросВыборка.Следующий() Цикл
		ОбменДаннымиПолучитьСтатусПубликации( УчетнаяЗапись, ЗапросВыборка.ИдентификаторПубликации );
	КонецЦикла;
	
КонецПроцедуры

Функция ОбменДаннымиКампанииПолучить(УчетнаяЗапись) Экспорт
	
	Кампании = Новый Массив;
	
	ДанныеАвторизации = ИнтеграцияСЯндексМаркетСервер.ЯндексМаркетДанныеАвторизацииПолучить(УчетнаяЗапись);
	
	ЯндексПриложениеДанные = ИнтеграцияСЯндексМаркетСервер.ЯндексМаркетПриложениеДанныеПолучить();
	client_id = ЯндексПриложениеДанные.client_id;
	
	// https://yandex.ru/dev/market/partner/doc/dg/reference/get-campaigns.html
	Сервер = "api.partner.market.yandex.ru/v2";
	Адрес = "/campaigns";
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Authorization", "OAuth oauth_token=""" + ДанныеАвторизации.access_token + """, oauth_client_id=""" + client_id + """");
	
	ssl = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	HTTPСоединение = Новый HTTPСоединение(Сервер,,,,,,ssl);
	
	HTTPЗапрос = Новый HTTPЗапрос( Адрес, Заголовки );
	
	Попытка
		HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод( "GET", HTTPЗапрос );
	Исключение 
		ТекстОшибки = НСтр("ru = 'ОбменДаннымиКампанииПолучить: Ошибка выполнения запроса:'") + " " + ПодробноеПредставлениеОшибки( ИнформацияОбОшибке() );
		ЗаписьЖурналаРегистрации(ИнтеграцияСЯндексМаркетСервер.ЯндексМаркетСобытиеЖурналаРегистрацииПолучить(), УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		Возврат Неопределено;
	КонецПопытки;	
	
	СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	СтруктураОтвета = ИнтеграцияСЯндексМаркетСервер.ИзJSON(СтрокаОтвета);
	КодСостояния = HTTPОтвет.КодСостояния;

	Если КодСостояния <> 200 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КампанииДанные = ИзJSON( СтрокаОтвета );
	
	campaigns = ИнтеграцияСМаркетплейсамиСервер.СтруктураСвойствоЗначениеПолучить( КампанииДанные, "campaigns", Неопределено );
	Если ТипЗнч( campaigns ) <> Тип( "Массив" ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого Элемент Из campaigns Цикл
		
		НаименованиеМагазина = ИнтеграцияСМаркетплейсамиСервер.СтруктураСвойствоЗначениеПолучить( Элемент, "domain", "" );
		Если ПустаяСтрока( НаименованиеМагазина ) Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторПлательщикаВЯндексБалансе = ИнтеграцияСМаркетплейсамиСервер.СтруктураСвойствоЗначениеПолучить( Элемент, "clientId", 0 );
		Если Не ЗначениеЗаполнено( ИдентификаторПлательщикаВЯндексБалансе ) Тогда
			Продолжить;
		КонецЕсли;
		ИдентификаторПлательщикаВЯндексБалансе = Формат( ИдентификаторПлательщикаВЯндексБалансе, "ЧГ=0" );
		
		ИдентификаторКампании = ИнтеграцияСМаркетплейсамиСервер.СтруктураСвойствоЗначениеПолучить( Элемент, "id", 0 );
		Если Не ЗначениеЗаполнено( ИдентификаторКампании ) Тогда
			Продолжить;
		КонецЕсли;
		ИдентификаторКампании = Формат( ИдентификаторКампании, "ЧГ=0" );
		
		Значение = Новый Структура( "НаименованиеМагазина, ИдентификаторПлательщикаВЯндексБалансе, ИдентификаторКампании",
		НаименованиеМагазина, ИдентификаторПлательщикаВЯндексБалансе, ИдентификаторКампании );
		Кампании.Добавить( Значение );
		
	КонецЦикла;
	
	Возврат Кампании;
КонецФункции

Функция ЯндексМаркетПриложениеДанныеПолучить() Экспорт

	Данные = Новый Структура;
	
	Данные.Вставить( "client_id", "cc9b7be075074e6caaff515a3c5ef0e5" );
	Данные.Вставить( "client_secret", "dc807379134444cca2a27e21c9bf9d7d" );
	
	Возврат Данные;
КонецФункции

Функция ОбменДаннымиВыгрузитьЦеныИз1СВЯндексМаркет( УчетнаяЗапись ) Экспорт

	Склады = СкладыСоответствияПолучить( УчетнаяЗапись );
	Если Склады.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена);
	Статусы.Добавить(Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации);
	Статусы.Добавить(Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена);
	
	ВидыЦен = Склады.Скопировать( , "ВидЦены" );
	ВидыЦен.Свернуть( "ВидЦены" );
	ВидыЦен = ВидыЦен.ВыгрузитьКолонку( "ВидЦены" );
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр( "Статусы", Статусы );
	Запрос.УстановитьПараметр( "ВидыЦен", ВидыЦен );
	Запрос.УстановитьПараметр( "УчетнаяЗапись", УчетнаяЗапись );
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура,
	|	СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика,
	|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторТовараПлощадки КАК ИдентификаторТовараПлощадки,
	|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации КАК ИдентификаторПубликации,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦены,
	|	ЦеныНоменклатурыСрезПоследних.Период КАК Период,
	|	ЕСТЬNULL(ВыгруженныеЦеныМаркетплейсов.Цена, 0) КАК ВыгруженнаяЦена
	|ИЗ
	|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦен В (&ВидыЦен)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО СтатусыПубликацииТоваровЯндексМаркет.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И СтатусыПубликацииТоваровЯндексМаркет.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгруженныеЦеныМаркетплейсов КАК ВыгруженныеЦеныМаркетплейсов
	|		ПО СтатусыПубликацииТоваровЯндексМаркет.Номенклатура = ВыгруженныеЦеныМаркетплейсов.Номенклатура
	|			И СтатусыПубликацииТоваровЯндексМаркет.Характеристика = ВыгруженныеЦеныМаркетплейсов.Характеристика
	|			И СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗаписьМаркетплейса = ВыгруженныеЦеныМаркетплейсов.УчетнаяЗаписьМаркетплейса
	|			И (ЦеныНоменклатурыСрезПоследних.ВидЦен = ВыгруженныеЦеныМаркетплейсов.ВидЦены)
	|ГДЕ
	|	НЕ ЦеныНоменклатурыСрезПоследних.Номенклатура ЕСТЬ NULL
	|	И СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторТовараПлощадки <> """"
	|	И СтатусыПубликацииТоваровЯндексМаркет.Статус В(&Статусы)
	|	И СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
	|	И ЦеныНоменклатурыСрезПоследних.Цена <> ЕСТЬNULL(ВыгруженныеЦеныМаркетплейсов.Цена, 0)";
	
	ЦеныДляВыгрузки = Запрос.Выполнить().Выгрузить();
	
	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		
		ЦеныДляВыгрузкиПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( ЦеныДляВыгрузки );
		
		ЛогКомментарий = НСтр("ru = 'ОбменДаннымиВыгрузитьЦеныИз1СВЯндексМаркет: Цены:'") + " " +  Символы.ПС
		+ ЦеныДляВыгрузкиПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		
		ЛогПараметры = Новый Структура;
		ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаЦенИз1С );
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, , ЛогПараметры );
	КонецЕсли;	
	
	Если ЦеныДляВыгрузки.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// каждый склад это отдельная кампания в Яндекс маркет, нужен отдельный HTTPЗапрос
	ЦеныДляВыгрузкиПоСкладам = Склады.Скопировать( , "ВидЦены, ИдентификаторКампанииМаркетплейса" );
	ЦеныДляВыгрузкиПоСкладам.Свернуть( "ВидЦены, ИдентификаторКампанииМаркетплейса" );
	
	ЦеныДляВыгрузкиПоСкладам.Колонки.Добавить( "offers" );
	ЦеныДляВыгрузкиПоСкладам.Колонки.Добавить( "ЦеныПоСкладу" );
	ЦеныДляВыгрузкиПоСкладам.Колонки.Добавить( "Результат" );

	ЦеныДляВыгрузки.Индексы.Добавить( "ВидЦены" );
	
	КешЦеныДляВыгрузки = Новый Соответствие;
	ОтборПоЦенам = Новый Структура( "ВидЦены" );
	Для Каждого ЦеныДляВыгрузкиПоСкладамСтрока Из ЦеныДляВыгрузкиПоСкладам Цикл
		
		ДанныеИзКеша = КешЦеныДляВыгрузки.Получить( ЦеныДляВыгрузкиПоСкладамСтрока.ВидЦены );
		Если ДанныеИзКеша <> Неопределено Тогда
			ЦеныДляВыгрузкиПоСкладамСтрока.offers = ДанныеИзКеша.offers;
			ЦеныДляВыгрузкиПоСкладамСтрока.ЦеныПоСкладу = ДанныеИзКеша.ЦеныПоСкладу;
			Продолжить;
		КонецЕсли;
		
		ОтборПоЦенам.ВидЦены = ЦеныДляВыгрузкиПоСкладамСтрока.ВидЦены;
		ЦеныПоСкладу = ЦеныДляВыгрузки.Скопировать( ОтборПоЦенам );
		
		offers = Новый Массив;
		Для Каждого ЦеныПоСкладуСтрока Из ЦеныПоСкладу Цикл
			
			СтруктураПредложения = Новый Структура( "offerId, price" );
			СтруктураПредложения.offerId = ЦеныПоСкладуСтрока.ИдентификаторПубликации;;
			СтруктураЦены = Новый Структура( "currencyId, value" );
			СтруктураЦены.currencyId = "RUR";
			СтруктураЦены.value = ЦеныПоСкладуСтрока.Цена;
			СтруктураПредложения.price = СтруктураЦены;
			
			offers.Добавить( СтруктураПредложения );
		КонецЦикла;
		
		ЦеныДляВыгрузкиПоСкладамСтрока.offers = offers;
		ЦеныДляВыгрузкиПоСкладамСтрока.ЦеныПоСкладу = ЦеныПоСкладу;
		
		ДанныеВКеш = Новый Структура( "offers, ЦеныПоСкладу" );
		ДанныеВКеш.offers = offers;
		ДанныеВКеш.ЦеныПоСкладу = ЦеныПоСкладу;
		КешЦеныДляВыгрузки.Вставить( ЦеныДляВыгрузкиПоСкладамСтрока.ВидЦены, ДанныеВКеш );
		
	КонецЦикла;
 
 	ДанныеАвторизации = ИнтеграцияСЯндексМаркетСервер.ЯндексМаркетДанныеАвторизацииПолучить(УчетнаяЗапись);
	
	ssl = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	Сервер = ИнтеграцияСЯндексМаркетСервер.СерверПартнерскогоAPIЯндексМаркет();
	ИмяМетода = "/offer-prices/updates.json";
	HTTPСоединение = Новый HTTPСоединение(Сервер,,,,,,ssl);
	
	client_id = ЯндексМаркетПриложениеДанныеПолучить().client_id;

	Заголовки = Новый Соответствие;
	Заголовки.Вставить( "Content-Type", "application/json" );
	Заголовки.Вставить( "Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token + ", oauth_client_id=" + client_id );

	БылиОшибки = Ложь;	
	Для Каждого ЦеныДляВыгрузкиПоСкладамСтрока Из ЦеныДляВыгрузкиПоСкладам Цикл

		offers = ЦеныДляВыгрузкиПоСкладамСтрока.offers;
		Если offers.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		campaign_id = СокрЛП( ЦеныДляВыгрузкиПоСкладамСтрока.ИдентификаторКампанииМаркетплейса );
		Адрес ="/" + campaign_id + ИмяМетода;

		
		СтруктураДляJSON = Новый Структура;
		СтруктураДляJSON.Вставить( "offers", offers );
		ТелоЗапроса = ИнтеграцияСЯндексМаркетСервер.ВJSON( СтруктураДляJSON );
		
		HTTPЗапрос = Новый HTTPЗапрос( Адрес, Заголовки );
		HTTPЗапрос.УстановитьТелоИзСтроки( ТелоЗапроса, "UTF-8" );

		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
			HTTPЗапросПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPЗапрос );
			
			ЛогКомментарий = НСтр("ru = 'HTTP: Запрос:'") + Символы.ПС
			+ HTTPЗапросПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
			
			ЛогПараметры = Новый Структура;
			ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаЦенИз1С );
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, , ЛогПараметры );
		КонецЕсли;	

		Попытка
			HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки( HTTPЗапрос );
		Исключение 
			ТекстОшибки = НСтр("ru = 'Выгрузка цены из 1С в Яндекс маркет: Ошибка выполнения запроса'") + ": " + Символы.ПС + ПодробноеПредставлениеОшибки( ИнформацияОбОшибке() );
			ОбщегоНазначения.СообщитьПользователю( ТекстОшибки );
			ЗаписьЖурналаРегистрации(ЯндексМаркетСобытиеЖурналаРегистрацииПолучить(), УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстОшибки, УчетнаяЗапись, Истина );
			БылиОшибки = Истина;
			Продолжить;
		КонецПопытки;	

		СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		СтруктураОтвета = ИнтеграцияСЯндексМаркетСервер.ИзJSON(СтрокаОтвета);
		КодСостояния = HTTPОтвет.КодСостояния;

		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
			HTTPМетод = "POST";
			HTTPСоединениеПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPСоединение );
			HTTPОтветПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPОтвет );
			
			ЛогКомментарий = НСтр("ru = 'HTTP: Ответ: Метод:'") + " " + HTTPМетод + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков() 
			+ HTTPОтветПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ HTTPСоединениеПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
			
			ЛогПараметры = Новый Структура;
			ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаЦенИз1С );
			ЛогПараметры.Вставить( "Сервер", HTTPСоединение.Сервер );
			ЛогПараметры.Вставить( "АдресРесурса", HTTPЗапрос.АдресРесурса );
			
			ЛогЭтоОшибка = HTTPОтвет.КодСостояния <> 200;
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, ЛогЭтоОшибка, ЛогПараметры );
		КонецЕсли;	
		
		Если КодСостояния = 200 И СтруктураОтвета.status = "OK" Тогда
			
			ОбновитьДатуУстановкиЦены( УчетнаяЗапись, ЦеныДляВыгрузкиПоСкладамСтрока.ЦеныПоСкладу );
			
		Иначе
			
			СобытиеОписание = "Выгрузка цены из 1С в Яндекс маркет: Идентификатор кампании """ + campaign_id + """";
			ТекстОшибки = СтрокаОтвета;
			ТекстОшибкиПояснение = ОбменСВнешнимиСистемамиЛогирование.БазаЗнанийСовпаденияНайтиСтрокойПолучить( "Yandex: " + ТекстОшибки );
			ТекстОшибкиПодробный = СобытиеОписание + ": " + ?(ПустаяСтрока( ТекстОшибкиПояснение ), "", ТекстОшибкиПояснение + " " ) + ТекстОшибки;
			
			ОбщегоНазначения.СообщитьПользователю( ТекстОшибкиПодробный );
			ЗаписьЖурналаРегистрации(ЯндексМаркетСобытиеЖурналаРегистрацииПолучить(), УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибкиПодробный);
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстОшибкиПодробный, УчетнаяЗапись, Истина );
			
			БылиОшибки = Истина;
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;// ЦеныДляВыгрузкиПоСкладам

	ВыгруженныеЦеныНеактуальныеУдалить( УчетнаяЗапись );
	
	Возврат (БылиОшибки = Ложь);
КонецФункции

Процедура ОбновитьДатуУстановкиЦены( УчетнаяЗапись, Цены )

	Для Каждого ЦеныСтрока Из Цены Цикл
	
		Набор = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей();
		
		Набор.Отбор.УчетнаяЗаписьМаркетплейса.Установить( УчетнаяЗапись );
		Набор.Отбор.Номенклатура.Установить( ЦеныСтрока.Номенклатура );
		Набор.Отбор.Характеристика.Установить( ЦеныСтрока.Характеристика );
		
		Набор.Прочитать();
		
		ДатаУстановкиЦены = ТекущаяДатаСеанса();
		Если Набор.Количество() > 0 Тогда
			Запись = Набор[0];
			Запись.ДатаУстановкиЦены = ДатаУстановкиЦены;
			Набор.Записать();
		КонецЕсли;
		
		// запишем новое значение выгруженной цены
		Запись = РегистрыСведений.ВыгруженныеЦеныМаркетплейсов.СоздатьМенеджерЗаписи();
		Запись.УчетнаяЗаписьМаркетплейса = УчетнаяЗапись;
		Запись.ВидЦены = ЦеныСтрока.ВидЦены;
		Запись.Номенклатура = ЦеныСтрока.Номенклатура;
		Запись.Характеристика = ЦеныСтрока.Характеристика;
		Запись.Цена = ЦеныСтрока.Цена;
		Запись.ДатаВыгрузки = ДатаУстановкиЦены;
		Запись.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Проверяет, является ли строка целым неотрицательным числом	
// Параметры:
//  ПроверяемаяСтрока - Строка - проверяемый строка.
//
// Возвращаемое значение:
//  Булево - Истина, если строка содержит только цифры.
//
Функция ЭтаСтрокаЯвляетсяЦелымНеотрицательнымЧислом(ПроверяемаяСтрока) Экспорт
	
	СтрокаЯвляетсяЧислом = Истина;
	ПроверяемаяСтрока = СокрЛП(ПроверяемаяСтрока);
	Длина = СтрДлина(ПроверяемаяСтрока);
	
	Для НомерСимвола = 1 По Длина Цикл
		Симв = Сред(ПроверяемаяСтрока, НомерСимвола, 1);
		Если Найти("0123456789", Симв) = 0 И КодСимвола(Симв)<>160 Тогда
			СтрокаЯвляетсяЧислом = Ложь;		
		КонецЕсли;		
	КонецЦикла;
	
	Возврат СтрокаЯвляетсяЧислом;
	
КонецФункции

Функция ВJSON( Структура )Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();	
	ЗаписьJSON.ПроверятьСтруктуру = Истина;
	
	Попытка
		ЗаписатьJSON( ЗаписьJSON, Структура );
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ИнформацияОбОшибкеПричина = ОбменСВнешнимиСистемамиЛогирование.ИнформацияОбОшибкеПричина( ИнформацияОбОшибке );
		СтруктураПредставление = СтрЗаменить( ЗначениеВСтрокуВнутр( Структура ), Символы.ПС, "" );
		
		ТекстОшибки = "Ошибка при подготовке JSON: " + ИнформацияОбОшибкеПричина + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ СтруктураПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ ПодробноеПредставлениеОшибки( ИнформацияОбОшибке );
		
		ЗаписьЖурналаРегистрации(ЯндексМаркетСобытиеЖурналаРегистрацииПолучить(), УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю( ТекстОшибки );
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстОшибки, , Истина );
		
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;

	Результат = ЗаписьJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ИзJSON( Строка, СтрДат = "", ФлСоответствие = Ложь )Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Строка);
	ЗапросСтруктура = ПрочитатьJSON(ЧтениеJSON, ФлСоответствие, СтрДат );
	
	Возврат ЗапросСтруктура;
	
КонецФункции

Функция ЯндексМаркетСобытиеЖурналаРегистрацииПолучить() Экспорт
	Возврат НСтр( "ru = 'Яндекс маркет'" );
КонецФункции

Функция ОбменДаннымиВыгрузитьОстаткиТоваровВЯндексМаркет( УчетнаяЗапись ) Экспорт

	ДанныеАвторизации = ИнтеграцияСЯндексМаркетСервер.ЯндексМаркетДанныеАвторизацииПолучить( УчетнаяЗапись );
	Если Не ЗначениеЗаполнено( ДанныеАвторизации.access_token ) Тогда
		ТекстСообщения = НСтр( "ru = 'Ошибка при выгрузке остатков товаров в Яндекс Маркет: Токен для авторизации не задан. Необходимо выполнить авторизацию в форме настройки.'" );
		ОбщегоНазначения.СообщитьПользователю( ТекстСообщения );
		Возврат Ложь;
	КонецЕсли;
	
	ЗапросТекст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2000
	|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура,
	|	СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика,
	|	ВЫРАЗИТЬ(СоответствияОбъектовМаркетплейсов.Объект1С КАК Справочник.СтруктурныеЕдиницы) КАК Склад,
	|	СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса КАК СкладМаркетплейсИдентификатор,
	|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации КАК ТоварМаркетплейсИдентификатор,
	|	СоответствияОбъектовМаркетплейсов.ИдентификаторВладельцаОбъектаМаркетплейса КАК ИдентификаторКампанииМаркетплейса
	|ПОМЕСТИТЬ ВТТоварыИСклады
	|ИЗ
	|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
	|		ПО (СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса.ВидМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.МаркетплейсЯндексМаркет))
	|			И (СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Склад))
	|			И (СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись)
	|			И (СоответствияОбъектовМаркетплейсов.МодельСклада <> &МодельСкладаFBY)
	|			И ((ВЫРАЗИТЬ(СоответствияОбъектовМаркетплейсов.Объект1С КАК Справочник.СтруктурныеЕдиницы)) <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|ГДЕ
	|	СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена)
	|	И СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТоварыИСклады.Номенклатура КАК Номенклатура,
	|	ВТТоварыИСклады.ТоварМаркетплейсИдентификатор КАК ТоварМаркетплейсИдентификатор,
	|	ВТТоварыИСклады.Характеристика КАК Характеристика,
	|	ВТТоварыИСклады.Склад КАК Склад,
	|	ВТТоварыИСклады.СкладМаркетплейсИдентификатор КАК СкладМаркетплейсИдентификатор,
	|	СУММА(ЕСТЬNULL(ОстаткиТоваров.Количество, 0)) КАК Остаток,
	|	СУММА(ЕСТЬNULL(ОстаткиТоваровМаркетплейсов.Количество, 0)) КАК ОстатокВыгружен,
	|	ВТТоварыИСклады.ИдентификаторКампанииМаркетплейса КАК ИдентификаторКампанииМаркетплейса
	|ИЗ
	|	ВТТоварыИСклады КАК ВТТоварыИСклады
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОстаткиТоваров КАК ОстаткиТоваров
	|		ПО (ОстаткиТоваров.СтруктурнаяЕдиница = ВТТоварыИСклады.Склад)
	|			И (ОстаткиТоваров.Характеристика = ВТТоварыИСклады.Характеристика)
	|			И (ОстаткиТоваров.Номенклатура = ВТТоварыИСклады.Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОстаткиТоваровМаркетплейсов КАК ОстаткиТоваровМаркетплейсов
	|		ПО ВТТоварыИСклады.Номенклатура = ОстаткиТоваровМаркетплейсов.Номенклатура
	|			И ВТТоварыИСклады.Характеристика = ОстаткиТоваровМаркетплейсов.Характеристика
	|			И ВТТоварыИСклады.Склад = ОстаткиТоваровМаркетплейсов.Склад
	|			И (ОстаткиТоваровМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТТоварыИСклады.Склад,
	|	ВТТоварыИСклады.СкладМаркетплейсИдентификатор,
	|	ВТТоварыИСклады.Номенклатура,
	|	ВТТоварыИСклады.ТоварМаркетплейсИдентификатор,
	|	ВТТоварыИСклады.Характеристика,
	|	ВТТоварыИСклады.ИдентификаторКампанииМаркетплейса
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЕСТЬNULL(ОстаткиТоваров.Количество, 0)) <> СУММА(ЕСТЬNULL(ОстаткиТоваровМаркетплейсов.Количество, 0))";
	
	Запрос = Новый Запрос( ЗапросТекст );
	Запрос.УстановитьПараметр( "УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр( "МодельСкладаFBY", ПредопределенноеЗначение( "Перечисление.МоделиСкладовЯндексМаркета.FBY" ) );
	Остатки = Запрос.Выполнить().Выгрузить();

	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		
		ОстаткиПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( Остатки );
		
		ЛогКомментарий = НСтр("ru = 'ОбменДаннымиВыгрузитьОстаткиТоваровВЯндексМаркет: Остатки:'") + " " +  Символы.ПС
		+ ОстаткиПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		
		ЛогПараметры = Новый Структура;
		ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаОстатковИз1С );
		
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, , ЛогПараметры );
	КонецЕсли;	
	
	Если Остатки.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	// каждый склад это отдельная кампания в Яндекс маркет, нужен отдельный HTTPЗапрос
	ОстаткиДляВыгрузкиПоСкладам = Остатки.Скопировать( , "Склад, ИдентификаторКампанииМаркетплейса" );
	
	ОстаткиДляВыгрузкиПоСкладам.Свернуть( "Склад, ИдентификаторКампанииМаркетплейса" );
	
	ОстаткиДляВыгрузкиПоСкладам.Колонки.Добавить( "ОстаткиДляВыгрузки" );
	ОстаткиДляВыгрузкиПоСкладам.Колонки.Добавить( "Результат" );

	Остатки.Индексы.Добавить( "Склад" );
	
	ОтборПоСкладам = Новый Структура( "Склад" );
	Для Каждого ОстаткиДляВыгрузкиПоСкладамСтрока Из ОстаткиДляВыгрузкиПоСкладам Цикл
	
		ОтборПоСкладам.Склад = ОстаткиДляВыгрузкиПоСкладамСтрока.Склад;
		ОстаткиПоСкладу = Остатки.НайтиСтроки( ОтборПоСкладам );
		
		ОстаткиДляВыгрузки = Новый Массив;	
		Для Каждого ОстаткиПоСкладуСтрока Из ОстаткиПоСкладу Цикл
			
			СтруктураОстатков = Новый Структура( "sku, warehouseId, items" );
			
			СтруктураОстатков.sku = ОстаткиПоСкладуСтрока.ТоварМаркетплейсИдентификатор;  
			СтруктураОстатков.warehouseId = ОстаткиПоСкладуСтрока.СкладМаркетплейсИдентификатор;
			
			СтруктураПозиции = Новый Структура( "type, count, updatedAt" );
			
			СтруктураПозиции.type = "FIT";// из документации API Яндекса: "type - Этот параметр пока не используется. Всегда передавайте одно значение — FIT"
			СтруктураПозиции.count = ОстаткиПоСкладуСтрока.Остаток;
			СтруктураПозиции.updatedAt = ЗаписатьДатуJSON( ТекущаяДатаСеанса(), ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.УниверсальнаяДата );
			
			items = Новый Массив;
			items.Добавить( СтруктураПозиции );
			
			СтруктураОстатков.items = items;// из документации API Яндекса: "items - Информация об остатках товара. Представлена в виде массива, состоящего из одного объекта."
			
			ОстаткиДляВыгрузки.Добавить( СтруктураОстатков );
		КонецЦикла;
		
		ОстаткиДляВыгрузкиПоСкладамСтрока.ОстаткиДляВыгрузки = ОстаткиДляВыгрузки;
	КонецЦикла;

	ЯндексПриложениеДанные = ЯндексМаркетПриложениеДанныеПолучить();
	
	ИнтернетПрокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	КонецЕсли;

	Сервер = ИнтеграцияСЯндексМаркетСервер.СерверПартнерскогоAPIЯндексМаркет();
	ИмяМетода = "offers/stocks.json";	
	Таймаут = 180;
	СоединениеOpenSSL = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	HTTPСоединение = Новый HTTPСоединение( Сервер, , , , ИнтернетПрокси, Таймаут, СоединениеOpenSSL );

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token + ", oauth_client_id=" + ЯндексПриложениеДанные.client_id);
    
	СтруктураДляJSON = Новый Структура;
	
    // отправим запросы по остаткам в Яндекс маркет
	Для Каждого ОстаткиДляВыгрузкиПоСкладамСтрока Из ОстаткиДляВыгрузкиПоСкладам Цикл
		
		campaign_id = СокрЛП( ОстаткиДляВыгрузкиПоСкладамСтрока.ИдентификаторКампанииМаркетплейса );
		Адрес = "/" + campaign_id + "/" + ИмяМетода;	
		
		ОстаткиДляВыгрузки = ОстаткиДляВыгрузкиПоСкладамСтрока.ОстаткиДляВыгрузки;
		
		СтруктураДляJSON.Вставить( "skus", ОстаткиДляВыгрузки );
		
		ТелоЗапроса = ИнтеграцияСЯндексМаркетСервер.ВJSON( СтруктураДляJSON );
		
		HTTPЗапрос = Новый HTTPЗапрос( Адрес, Заголовки );
		HTTPЗапрос.УстановитьТелоИзСтроки( ТелоЗапроса, "UTF-8");
		
		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
			СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
			
			HTTPЗапросПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPЗапрос );
			
			ЛогКомментарий = НСтр("ru = 'HTTP: Запрос:'") + Символы.ПС
			+ HTTPЗапросПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
			
			ЛогПараметры = Новый Структура;
			ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаОстатковИз1С );
			
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, , ЛогПараметры );
		КонецЕсли;	
		
		Попытка
			HTTPОтвет = HTTPСоединение.Записать( HTTPЗапрос );
		Исключение 
			ТекстОшибки = НСтр("ru = 'Ошибка при выгрузке остатков товаров в Яндекс Маркет:'") + " " + campaign_id + ": " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначения.СообщитьПользователю( ТекстОшибки );
			ЗаписьЖурналаРегистрации(ЯндексМаркетСобытиеЖурналаРегистрацииПолучить(), УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстОшибки, УчетнаяЗапись, Истина );
			ОстаткиДляВыгрузкиПоСкладамСтрока.Результат = Ложь;
			Продолжить;
		КонецПопытки;	
		
		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
			СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
			
			HTTPМетод = "PUT";
			HTTPСоединениеПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPСоединение );
			HTTPОтветПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPОтвет );
			
			ЛогКомментарий = НСтр("ru = 'HTTP: Ответ: Метод:'") + " " + HTTPМетод + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков() 
			+ HTTPОтветПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ HTTPСоединениеПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
			
			ЛогПараметры = Новый Структура;
			ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаОстатковИз1С );
			ЛогПараметры.Вставить( "Сервер", HTTPСоединение.Сервер );
			ЛогПараметры.Вставить( "АдресРесурса", HTTPЗапрос.АдресРесурса );
			
			ЛогЭтоОшибка = HTTPОтвет.КодСостояния <> 200;
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, ЛогЭтоОшибка, ЛогПараметры );
		КонецЕсли;	
		
		СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		СтруктураОтвета = ИнтеграцияСЯндексМаркетСервер.ИзJSON(СтрокаОтвета);
		КодСостояния = HTTPОтвет.КодСостояния;
		
		Если КодСостояния= 200 И СтруктураОтвета.status = "OK" Тогда
			
			ВыгруженныеВЯндексОстаткиЗаписать( УчетнаяЗапись, Остатки );
			
		Иначе
			ТекстОшибки = НСтр("ru = 'Ошибка при выгрузке остатков товаров в Яндекс Маркет:'") + " " + campaign_id + ": " + КодСостояния + ": "+ СтрокаОтвета;
			ОбщегоНазначения.СообщитьПользователю( ТекстОшибки );
			ЗаписьЖурналаРегистрации(ЯндексМаркетСобытиеЖурналаРегистрацииПолучить(), УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);		
			ОстаткиДляВыгрузкиПоСкладамСтрока.Результат = Ложь;
			Продолжить;
			
		КонецЕсли;
		
		ОстаткиДляВыгрузкиПоСкладамСтрока.Результат = Истина;
	КонецЦикла;
	
	Если ОстаткиДляВыгрузкиПоСкладам.Найти( Ложь, "Результат" ) = Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ВыгруженныеВЯндексОстаткиЗаписать( УчетнаяЗапись, Остатки )
	
	Если Не ЗначениеЗаполнено( УчетнаяЗапись ) Тогда
		ТекстОшибки = НСтр( "ru = 'ВыгруженныеВЯндексОстаткиЗаписать: УчетнаяЗапись не заполнена.'" );
		ЗаписьЖурналаРегистрации(ЯндексМаркетСобытиеЖурналаРегистрацииПолучить(), УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстОшибки, УчетнаяЗапись, Истина );
		Возврат;
	КонецЕсли;
	
	Для Каждого ОстаткиСтрока Из Остатки Цикл
		Набор = РегистрыСведений.ОстаткиТоваровМаркетплейсов.СоздатьНаборЗаписей(); 
		
		Набор.Отбор.УчетнаяЗаписьМаркетплейса.Установить(УчетнаяЗапись);
		Набор.Отбор.Склад.Установить(ОстаткиСтрока.Склад);
		Набор.Отбор.Номенклатура.Установить(ОстаткиСтрока.Номенклатура);
		Набор.Отбор.Характеристика.Установить(ОстаткиСтрока.Характеристика);
		
		Набор.Прочитать();
		Если Набор.Количество() > 0 Тогда
			Запись = Набор[0];
			Запись.Количество = ОстаткиСтрока.Остаток; 
			Запись.ДатаВыгрузкиОстатков = ТекущаяДатаСеанса();
		Иначе
			Запись = Набор.Добавить();  
			Запись.УчетнаяЗаписьМаркетплейса = УчетнаяЗапись; 
			Запись.Склад = ОстаткиСтрока.Склад;
			Запись.Номенклатура = ОстаткиСтрока.Номенклатура;  
			Запись.Характеристика = ОстаткиСтрока.Характеристика;
			Запись.Количество = ОстаткиСтрока.Остаток;
			Запись.ДатаВыгрузкиОстатков = ТекущаяДатаСеанса();	
		КонецЕсли;
		Набор.Записать();
	КонецЦикла; 	
	
	ТоварыДляЗаписи = Остатки.Скопировать();
	ТоварыДляЗаписи.Свернуть( "Номенклатура, Характеристика" );
	
	ЗапросТекст = 
	"ВЫБРАТЬ
	|	ВТТовары.Номенклатура КАК Номенклатура,
	|	ВТТовары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	&ТоварыДляЗаписи КАК ВТТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиТоваровМаркетплейсов.Номенклатура КАК Номенклатура,
	|	ОстаткиТоваровМаркетплейсов.Характеристика КАК Характеристика,
	|	СУММА(ОстаткиТоваровМаркетплейсов.Количество) КАК Остаток
	|ИЗ
	|	РегистрСведений.ОстаткиТоваровМаркетплейсов КАК ОстаткиТоваровМаркетплейсов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТовары КАК ВТТовары
	|		ПО ОстаткиТоваровМаркетплейсов.Номенклатура = ВТТовары.Номенклатура
	|			И ОстаткиТоваровМаркетплейсов.Характеристика = ВТТовары.Характеристика
	|ГДЕ
	|	ОстаткиТоваровМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиТоваровМаркетплейсов.Номенклатура,
	|	ОстаткиТоваровМаркетплейсов.Характеристика";
	
	Запрос = Новый Запрос( ЗапросТекст );
	Запрос.УстановитьПараметр( "ТоварыДляЗаписи", ТоварыДляЗаписи );
	Запрос.УстановитьПараметр( "УчетнаяЗапись", УчетнаяЗапись );
	ОбщиеОстаткиБезСкладов = Запрос.Выполнить().Выбрать();
	
	Пока ОбщиеОстаткиБезСкладов.Следующий() Цикл	
		Набор = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей();
		
		Набор.Отбор.УчетнаяЗаписьМаркетплейса.Установить( УчетнаяЗапись );
		Набор.Отбор.Номенклатура.Установить( ОбщиеОстаткиБезСкладов.Номенклатура );
		Набор.Отбор.Характеристика.Установить( ОбщиеОстаткиБезСкладов.Характеристика );
		
		Набор.Прочитать();
		
		Если Набор.Количество() > 0 Тогда
			Запись = Набор[0];
			Запись.ОстатокВУпаковках = ОбщиеОстаткиБезСкладов.Остаток;
			Набор.Записать();
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

Функция СкладыСоответствияПолучить( УчетнаяЗапись ) Экспорт

	ЗапросТекст = 
	"ВЫБРАТЬ
	|	СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса КАК СкладМаркетплейсИдентификатор,
	|	СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса КАК НаименованиеСкладаМаркетплейса,
	|	СоответствияОбъектовМаркетплейсов.Объект1С КАК Склад1С,
	|	СоответствияОбъектовМаркетплейсов.ИдентификаторВладельцаОбъектаМаркетплейса КАК ИдентификаторКампанииМаркетплейса,
	|	СоответствияОбъектовМаркетплейсов.ВидЦены КАК ВидЦены,
	|	СоответствияОбъектовМаркетплейсов.МодельСклада КАК МодельСклада,
	|	СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса
	|ИЗ
	|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
	|ГДЕ
	|	СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Склад)
	|	И СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись";
	
	Запрос = Новый Запрос( ЗапросТекст );
	
	Запрос.УстановитьПараметр( "ВидОбъектаМаркетплейса", Перечисления.ВидыОбъектовМаркетплейсов.Склад );
	Запрос.УстановитьПараметр( "УчетнаяЗапись", УчетнаяЗапись );
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Процедура СкладыСоответствияЗаписать( УчетнаяЗапись, Склады ) Экспорт
	
	НаборЗаписей = РегистрыСведений.СоответствияОбъектовМаркетплейсов.СоздатьНаборЗаписей();   
	
	НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(УчетнаяЗапись);
	НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Склад"));  
			
	ДатаАктуальности = ТекущаяДатаСеанса();
	Для Каждого СкладыСтрока Из Склады Цикл  	
		
		Запись = НаборЗаписей.Добавить();  
		
		Запись.УчетнаяЗаписьМаркетплейса = УчетнаяЗапись;	 	                                                
		Запись.ВидОбъектаМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Склад"); 
		Запись.ИдентификаторОбъектаМаркетплейса = СкладыСтрока.СкладМаркетплейсИдентификатор; 
		Запись.ИдентификаторВладельцаОбъектаМаркетплейса = СкладыСтрока.ИдентификаторКампанииМаркетплейса; 
		Запись.НаименованиеОбъектаМаркетплейса =  СкладыСтрока.НаименованиеСкладаМаркетплейса; 
		Запись.Объект1С = СкладыСтрока.Склад1С; 
		Запись.ДатаАктуальности = ДатаАктуальности;
		Запись.ВидЦены = СкладыСтрока.ВидЦены; 
		Запись.МодельСклада = СкладыСтрока.МодельСклада; 
		
	КонецЦикла;
	
	НаборЗаписей.Записать();  
	
КонецПроцедуры

Функция ВыгруженныеЦеныНеактуальныеУдалить( УчетнаяЗапись )

	// очистим старые записи на случай если менялись виды цен для складов
	
    Склады = СкладыСоответствияПолучить( УчетнаяЗапись );
	АктуальныеВидыЦен = Склады.Скопировать( , "ВидЦены" );
	АктуальныеВидыЦен.Свернуть( "ВидЦены" );
	
	ЗапросТекст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыгруженныеЦеныМаркетплейсов.ВидЦены КАК ВидЦены
	|ИЗ
	|	РегистрСведений.ВыгруженныеЦеныМаркетплейсов КАК ВыгруженныеЦеныМаркетплейсов
	|ГДЕ
	|	ВыгруженныеЦеныМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
	|	И НЕ ВыгруженныеЦеныМаркетплейсов.ВидЦены В (&АктуальныеВидыЦен)";
	
	Запрос = Новый Запрос( ЗапросТекст );
	Запрос.УстановитьПараметр( "УчетнаяЗапись", УчетнаяЗапись );
	Запрос.УстановитьПараметр( "АктуальныеВидыЦен", АктуальныеВидыЦен );
	
	ЗапросВыборка = Запрос.Выполнить().Выбрать();
	Пока ЗапросВыборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ВыгруженныеЦеныМаркетплейсов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить( УчетнаяЗапись );
		НаборЗаписей.Отбор.ВидЦены.Установить( ЗапросВыборка.ВидЦены );
		НаборЗаписей.Записать();
	КонецЦикла;
				
	Возврат Истина;
КонецФункции

Функция ЯндексМаркетПроверитьДанныеАвторизацииПомещеныВХранилище(УчетнаяЗапись) Экспорт
	Попытка
		ДанныеАвторизации = ЯндексМаркетДанныеАвторизацииПолучить(УчетнаяЗапись);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Возврат ЗначениеЗаполнено( ДанныеАвторизации.access_token );
КонецФункции
