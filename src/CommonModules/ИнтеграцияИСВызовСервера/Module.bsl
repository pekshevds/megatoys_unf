#Область СлужебныйПрограммныйИнтерфейс

#Область ФункцииИспользующиеПереопределение

// Возвращает ИНН и КПП переданной организации и торгового объекта, структурой со свойствами:
//   * КПП - Строка - КПП организации,
//   * ИНН - Строка - ИНН организации.
//
// Параметры:
//   ОрганизацияКонтрагент - ОпределяемыйТип.ОрганизацияКонтрагентГосИС, ОпределяемыйТип.КонтрагентГосИС - 
//     ссылка на организацию, реквизиты которой нужно определить,
//   ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - ссылка на торговый объект для определения КПП.
// 
// Возвращаемое значение:
//   Структура - структура со свойствами ИНН, КПП
//
Функция ИННКПППоОрганизацииКонтрагенту(ОрганизацияКонтрагент, ТорговыйОбъект = Неопределено) Экспорт
	
	ИННиКПП = Новый Структура("ИНН, КПП", "", "");
	ИнтеграцияИСПереопределяемый.ЗаполнитьИННКПППоОрганизацииКонтрагенту(ИННиКПП, ОрганизацияКонтрагент, ТорговыйОбъект);
	Возврат ИННиКПП;
	
КонецФункции

Функция НалоговыйНомерКонтрагента(Контрагент) Экспорт
	
	МассивКонтрагентов = Новый Массив;
	МассивКонтрагентов.Добавить(Контрагент);
	
	СоответствиеНалоговыхНомеров = Новый Соответствие;
	ИнтеграцияИСПереопределяемый.ПриОпределенииИНННалоговыхНомеровКонтрагентов(СоответствиеНалоговыхНомеров, МассивКонтрагентов);
	
	Возврат СоответствиеНалоговыхНомеров[Контрагент];
	
КонецФункции

#КонецОбласти

// см. ОбщегоНазначения.ЗначениеРеквизитаОбъекта
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные = Ложь, КодЯзыка = Неопределено) Экспорт
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные, КодЯзыка);
КонецФункции

#Область УпаковкиЕдиницыИзмерения

// Коэффициент упаковки.
// 
// Параметры:
//  Упаковка - ОпределяемыйТип.Упаковка - Упаковка
//  Номенклатура - Неопределено, ОпределяемыйТип.Номенклатура - Номенклатура
//  КэшированныеЗначения - Неопределено, Структура -
// Возвращаемое значение:
//  Число - Коэффициент упаковки
Функция КоэффициентУпаковки(Упаковка, Номенклатура = Неопределено, КэшированныеЗначения = Неопределено) Экспорт
	
	Коэффициент = 1;
	Если ЗначениеЗаполнено(Упаковка) Тогда
		ИнтеграцияИСПереопределяемый.КоэффициентУпаковки(Коэффициент, Упаковка, Номенклатура, КэшированныеЗначения);
	КонецЕсли;
	
	Возврат Коэффициент;
	
КонецФункции

// Возвращает вес упаковки в килограммах.
// 
// Параметры:
//  Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура
//  Упаковка - ОпределяемыйТип.Упаковка, Неопределено - Упаковка
//  КэшированныеЗначения - Неопределено, Структура - кэшированные значения
// Возвращаемое значение:
//  Число - Вес упаковки в килограммах
Функция ВесУпаковки(Номенклатура, Упаковка = Неопределено, КэшированныеЗначения = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат КоэффициентВесОбъемУпаковки(Номенклатура, Упаковка, КэшированныеЗначения).Вес;
	
КонецФункции

// Возвращает объем упаковки в литрах.
// 
// Параметры:
//  Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура
//  Упаковка - ОпределяемыйТип.Упаковка, Неопределено - Упаковка
//  КэшированныеЗначения - Неопределено, Структура - кэшированные значения
// Возвращаемое значение:
//  Число - Объем упаковки в литрах
Функция ОбъемУпаковки(Номенклатура, Упаковка = Неопределено, КэшированныеЗначения = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат КоэффициентВесОбъемУпаковки(Номенклатура, Упаковка, КэшированныеЗначения).Объем;
	
КонецФункции

// Возвращает коэффициент упаковки, вес упаковки в килограммах, объем упаковки в литрах.
// 
// Параметры:
//  Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура
//  Упаковка - ОпределяемыйТип.Упаковка, ОпределяемыйТип.ЕдиницаИзмерения, Неопределено - Упаковка
//  КэшированныеЗначения - Неопределено - кэшированные значения не используются,
//                         Структура - кэшированные значения:
//                          Ключ - "КоэффициентВесОбъемУпаковки", Значение - Соответствие:
//                          Ключ - Номенклатура,                  Значение - Соответствие:
//                          Ключ - Упаковка,                      Значение - Структура:
//                           Ключ - "Коэффициент", Значение - Число,
//                           Ключ - "Вес",         Значение - Число,
//                           Ключ - "Объем",       Значение - Число.
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * Коэффициент - Число - коэффициент упаковки,
//   * Вес         - Число - вес упаковки в килограммах,
//   * Объем       - Число - объем упаковки в килограммах.
//
Функция КоэффициентВесОбъемУпаковки(Номенклатура, Упаковка = Неопределено, КэшированныеЗначения = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Коэффициент", 0);
	Результат.Вставить("Вес",        0);
	Результат.Вставить("Объем",      0);
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ИспользоватьКэшированныеЗначения = КэшированныеЗначения <> Неопределено;
	
	Если ИспользоватьКэшированныеЗначения Тогда
		
		Если Не КэшированныеЗначения.Свойство("КоэффициентВесОбъемУпаковки") Тогда
			КэшированныеЗначения.Вставить("КоэффициентВесОбъемУпаковки", Новый Соответствие);
		КонецЕсли;
		
		ДанныеНоменклатуры = КэшированныеЗначения.КоэффициентВесОбъемУпаковки[Номенклатура];
		Если ДанныеНоменклатуры = Неопределено Тогда
			КэшированныеЗначения.КоэффициентВесОбъемУпаковки.Вставить(Номенклатура, Новый Соответствие);
			ДанныеНоменклатуры = КэшированныеЗначения.КоэффициентВесОбъемУпаковки[Номенклатура];
		КонецЕсли;
		
		Если Упаковка = Неопределено Тогда
			КлючУпаковки = ИнтеграцияИСКлиентСерверПовтИсп.ПустоеЗначениеУпаковки();
			Если КлючУпаковки = Неопределено Тогда
				КлючУпаковки = "";
			КонецЕсли;
		Иначе
			КлючУпаковки = Упаковка;
		КонецЕсли;
		
		ДанныеУпаковки = ДанныеНоменклатуры[КлючУпаковки];
		
	Иначе
		ДанныеУпаковки = Неопределено;
	КонецЕсли;
	
	Если ДанныеУпаковки = Неопределено Тогда
		
		ДанныеУпаковок = ТаблицаДанныхУпаковок();
		
		Строка = ДанныеУпаковок.Добавить();
		Строка.Номенклатура = Номенклатура;
		Строка.Упаковка     = Упаковка;
		
		ИнтеграцияИСПереопределяемый.КоэффициентВесОбъемУпаковок(ДанныеУпаковок);
		
		ДанныеУпаковки = ДанныеУпаковок[0];
		ЗаполнитьЗначенияСвойств(Результат, ДанныеУпаковки);
		
		Если ИспользоватьКэшированныеЗначения Тогда
			ДанныеНоменклатуры.Вставить(КлючУпаковки, Результат);
		КонецЕсли;
		
	Иначе
		ЗаполнитьЗначенияСвойств(Результат, ДанныеУпаковки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает значения коэффициента, веса и объема упаковок
//
// Параметры:
//  ВходящиеДанные - ТаблицаЗначений, ТабличнаяЧасть - Таблица с колонками:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - Ссылка на номенклатуру - обязательно для указания.
//   * Упаковка     - ОпределяемыйТип.Упаковка - упаковка, данные которой нужно получить - если не указана,
//                    тогда получаются данные базовой единицы измерения номенклатуры.
//                 - Массив из Структура со свойствами:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - см.ТаблицаЗначений
//   * Упаковка     - ОпределяемыйТип.Упаковка - см.ТаблицаЗначений
//                 - Массив из ОпределяемыйТип.Номенклатура - см.ТаблицаЗначений, Упаковка считается не указанной.
//  ВесОбъемУпаковкиВЕдиницеКонстантИС - Булево - если ЛОЖЬ, то вес и объем возвращаются в единицах измерения веса и объема,
//                                       иначе - в единицах измерения, указанных в константах:
//                                       ЕдиницаИзмеренияКилограммИС, ЕдиницаИзмеренияЛитрИС.
// Возвращаемое значение:
//  Соответствие - Соответствие из КлючИЗначение:
//   * Ключ - ОпределяемыйТип.Номенклатура,
//   * Значение - Соответствие из КлючИЗначение:
//    * Ключ - ОпределяемыйТип.Упаковка,
//    * Значение - Структура со свойствами:
//     * Коэффициент - Число - Разрядность (15, 3),
//     * Вес         - Число - Разрядность (15, 3),
//     * Объем       - Число - Разрядность (15, 3).
//
Функция КоэффициентВесОбъемУпаковок(ВходящиеДанные, ВесОбъемУпаковкиВЕдиницеКонстантИС = Истина) Экспорт
	
	Результат = Новый Соответствие;
	
	ДанныеУпаковок = ТаблицаДанныхУпаковокИзВходящихДанных(ВходящиеДанные);
	
	ИнтеграцияИСПереопределяемый.КоэффициентВесОбъемУпаковок(ДанныеУпаковок, ВесОбъемУпаковкиВЕдиницеКонстантИС);
	
	Для Каждого СтрокаДанных Из ДанныеУпаковок Цикл
		
		ДанныеУпаковки = Новый Структура;
		ДанныеУпаковки.Вставить("Коэффициент", СтрокаДанных.Коэффициент);
		ДанныеУпаковки.Вставить("Вес",         СтрокаДанных.Вес);
		ДанныеУпаковки.Вставить("Объем",       СтрокаДанных.Объем);
		
		ДанныеНоменклатуры = Результат[СтрокаДанных.Номенклатура];
		Если ДанныеНоменклатуры = Неопределено Тогда
			Результат.Вставить(СтрокаДанных.Номенклатура, Новый Соответствие);
			ДанныеНоменклатуры = Результат[СтрокаДанных.Номенклатура];
		КонецЕсли;
		
		Если СтрокаДанных.Упаковка = Неопределено Тогда
			КлючУпаковки = "";
		Иначе
			КлючУпаковки = СтрокаДанных.Упаковка;
		КонецЕсли;
		
		ДанныеНоменклатуры.Вставить(КлючУпаковки, ДанныеУпаковки);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает единицу измерения, указанную в константе ЕдиницаИзмеренияКилограммИС.
//
// Возвращаемое значение:
// 	ОпределяемыйТип.Упаковка
// 
Функция ЕдиницаИзмеренияКилограмм() Экспорт
	
	Возврат Константы.ЕдиницаИзмеренияКилограммИС.Получить();
	
КонецФункции

// Возвращает единицу измерения, указанную в константе ЕдиницаИзмеренияЛитрИС.
//
// Возвращаемое значение:
// 	ОпределяемыйТип.Упаковка
// 
Функция ЕдиницаИзмеренияЛитр() Экспорт
	
	Возврат Константы.ЕдиницаИзмеренияЛитрИС.Получить();
	
КонецФункции

Функция ПустоеЗначениеУпаковки() Экспорт
	
	Возврат ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Упаковка");
	
КонецФункции

#КонецОбласти

#Область ЧастичноеВыбытие

// Возвращает признак возможности для вида продукции участвовать в частичном выбытии.
// 
// Параметры:
//  ВидПродукции    - ПеречислениеСсылка.ВидыПродукцииИС                - вид маркируемой продукции.
//  ВидОперацииИСМП - ПеречислениеСсылка.ВидыОперацийИСМП, Неопределено - вид операции ИСМП.
// Возвращаемое значение:
//  Булево - Вид продукци может выбывать частично.
Функция ПоддерживаетсяЧастичноеВыбытие(ВидПродукции, ВидОперацииИСМП = Неопределено) Экспорт
	
	Если Не ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ВидПродукции, Истина)
		Или Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МодульИнтеграцияИСМПКлиентСерверПовтИсп = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМПКлиентСерверПовтИсп");
	
	Возврат МодульИнтеграцияИСМПКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(
		ВидПродукции,
		ВидОперацииИСМП);
	
КонецФункции

#КонецОбласти

// Классифицирует текущий сеанс, как сеанс, запущенный в фоновом задании в клиент-серверном варианте, в остальных
// случаях, сеанс имеет ту же файловую систему на стороне сервера, что и основной сеанс.
//	
// Возвращаемое значение:
// 	Булево - Описание
Функция ЭтоФоновоеЗаданиеНаСервере() Экспорт
	
	Если ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание() <> Неопределено
		И Не ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#Область ОбработкаОшибок

// Выполняет запись ошибки в журнал регистрации, добавляя имя события ГосИС если оно не задано.
//
// Параметры:
//  ТекстОшибки      - Строка           - текст ошибки.
//  ИмяСобытия       - Строка           - имя события.
//  ОбъектМетаданных - ОбъектМетаданных - объект метаданных с ошибкой.
//  Данные           - Произвольный     - объект данных с ошибкой.
//
Процедура ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки, ИмяСобытия = Неопределено, ОбъектМетаданных = Неопределено, Данные = Неопределено) Экспорт
	
	Если ИмяСобытия = Неопределено Тогда
		ИмяСобытия = НСтр("ru='ГосИС'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		УровеньЖурналаРегистрации.Ошибка,
		ОбъектМетаданных,
		Данные,
		ТекстОшибки);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПолямимСоставногоТипа

Функция СписокАвтоподбораПолеСоставногоТипа(ОписаниеТипов, ТекстДляАвтоПодбора,
	ДобавлятьСлужебныеЭлементы = Истина, МинимальнаяДлинаСтрокиПоиска = 1) Экспорт
	
	Возврат СобытияФормИС.СписокАвтоподбораПолеСоставногоТипа(
		ОписаниеТипов, ТекстДляАвтоПодбора, ДобавлятьСлужебныеЭлементы, МинимальнаяДлинаСтрокиПоиска);
	
КонецФункции

#КонецОбласти

#Область ОпределяемыеТипы

Функция ЗемельныйУчастокИСПереопределен() Экспорт
	
	ОписаниеТипов = Метаданные.ОпределяемыеТипы.ЗемельныйУчастокИС.Тип.Типы();
	
	Возврат ОписаниеТипов.Количество() > 1 Или ОписаниеТипов[0] <> Тип("СправочникСсылка.ЗемельныеУчасткиИС");
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТаблицаДанныхУпаковок()
	
	ОписаниеТипаЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(15, 3);
	
	ДанныеУпаковок = Новый ТаблицаЗначений;
	ДанныеУпаковок.Колонки.Добавить("Номенклатура", Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДанныеУпаковок.Колонки.Добавить("Упаковка",     Метаданные.ОпределяемыеТипы.Упаковка.Тип);
	ДанныеУпаковок.Колонки.Добавить("Коэффициент",  ОписаниеТипаЧисло);
	ДанныеУпаковок.Колонки.Добавить("Вес",          ОписаниеТипаЧисло);
	ДанныеУпаковок.Колонки.Добавить("Объем",        ОписаниеТипаЧисло);
	
	Возврат ДанныеУпаковок;
	
КонецФункции

Функция ТаблицаДанныхУпаковокИзВходящихДанных(ВходящиеДанные)
	
	ДанныеУпаковок = ТаблицаДанныхУпаковок();
	
	Если ТипЗнч(ВходящиеДанные) = Тип("Массив")
		И ВходящиеДанные.Количество() > 0
		И ТипЗнч(ВходящиеДанные[0]) <> Тип("Структура") Тогда
		Для Каждого Элемент Из ВходящиеДанные Цикл
			СтрокаДанных = ДанныеУпаковок.Добавить();
			СтрокаДанных.Номенклатура = Элемент;
		КонецЦикла;
	Иначе
		Для Каждого Строка Из ВходящиеДанные Цикл
			СтрокаДанных = ДанныеУпаковок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДанных, Строка, "Номенклатура, Упаковка");
		КонецЦикла;
	КонецЕсли;
	
	ДанныеУпаковок.Свернуть("Номенклатура, Упаковка, Коэффициент, Вес, Объем");
	
	Возврат ДанныеУпаковок;
	
КонецФункции

#КонецОбласти