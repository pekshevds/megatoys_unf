#Область ПрограммныйИнтерфейс

// См. ОбменДаннымиПереопределяемый.ПриОпределенииПрефиксаИнформационнойБазыПоУмолчанию.
// 
Процедура ПриОпределенииПрефиксаИнформационнойБазыПоУмолчанию(Префикс) Экспорт
	
	Если ОбщегоНазначенияУНФ.ЭтоРозница() Тогда
		Префикс = НСтр("ru = 'РТ'");
	Иначе
		Префикс = НСтр("ru = 'НФ'");
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменДаннымиПереопределяемый.ПолучитьПланыОбмена.
// 
Процедура ПолучитьПланыОбмена(ПланыОбменаПодсистемы) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Если ПолучитьФункциональнуюОпцию("РаботаВЛокальномРежиме")
		И ОбщегоНазначенияУНФ.ЭтоУНФ() Тогда
		ПланыОбменаПодсистемы.Добавить(Метаданные.ПланыОбмена.ОбменУправлениеНебольшойФирмойБухгалтерия20);
	КонецЕсли;
	
	Если ОбщегоНазначенияУНФ.ЭтоУНФ() Тогда
		ПланыОбменаПодсистемы.Добавить(Метаданные.ПланыОбмена.ОбменРозницаУправлениеНебольшойФирмой);
		ПланыОбменаПодсистемы.Добавить(Метаданные.ПланыОбмена.ОбменУправлениеНебольшойФирмойБухгалтерия30);
	КонецЕсли;
	
	ПланыОбменаПодсистемы.Добавить(Метаданные.ПланыОбмена.АвтономнаяРабота);
	ПланыОбменаПодсистемы.Добавить(Метаданные.ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат);
	Если ВРег(Метаданные.Имя) = ВРег("УправлениеНебольшойФирмой")
		Или ВРег(Метаданные.Имя) = ВРег("Розница") Тогда
		ПланыОбменаПодсистемы.Добавить(Метаданные.ПланыОбмена.Полный);
		ПланыОбменаПодсистемы.Добавить(Метаданные.ПланыОбмена.СОтборами);
	КонецЕсли;

КонецПроцедуры

// См. ОбменДаннымиПереопределяемый.РегистрацияИзмененийНачальнойВыгрузкиДанных.
// 
Процедура РегистрацияИзмененийНачальнойВыгрузкиДанных(Получатель, СтандартнаяОбработка, Отбор) Экспорт

	Если ТипЗнч(Получатель) <> Тип("ПланОбменаСсылка.ОбменУправлениеНебольшойФирмойБухгалтерия20") И ТипЗнч(Получатель)
		<> Тип("ПланОбменаСсылка.ОбменУправлениеНебольшойФирмойБухгалтерия30") И ТипЗнч(Получатель) <> Тип(
		"ПланОбменаСсылка.СинхронизацияДанныхЧерезУниверсальныйФормат") Тогда
		Возврат;
	КонецЕсли;

	ВариантНастройки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Получатель, "ВариантНастройки");

	Если ВариантНастройки = "КабинетКлиента" Тогда
		Справочники.НастройкиПубликацииМЛК.РегистрацияИзмененийНачальнойВыгрузкиДанных(
			Получатель, СтандартнаяОбработка, Отбор);
	Иначе
		ЗарегистрироватьНачальнуюВыгрузкуПоУмолчанию(Получатель, СтандартнаяОбработка, Отбор);
	КонецЕсли;

КонецПроцедуры

// См. ОбменДаннымиПереопределяемый.ПриПолученииДоступныхВерсийФормата.
// 
Процедура ПриПолученииДоступныхВерсийФормата(ВерсииФормата) Экспорт

	ВерсииФормата.Вставить("1.6", МенеджерОбменаЧерезУниверсальныйФормат);
	ВерсииФормата.Вставить("1.7", МенеджерОбменаЧерезУниверсальныйФормат);
	ВерсииФормата.Вставить("1.8", МенеджерОбменаЧерезУниверсальныйФормат);
	ВерсииФормата.Вставить("1.10", МенеджерОбменаЧерезУниверсальныйФормат);
	ВерсииФормата.Вставить("1.14", МенеджерОбменаЧерезУниверсальныйФормат);
	ВерсииФормата.Вставить("1.8.Cashbox", МенеджерОбменаЧерезУниверсальныйФормат);

КонецПроцедуры

// Возвращает результат обработки данных при загрузке сообщения обмена.
//
// Параметры:
//  - ИмяФайла - ИмяФайла - Файл на диске с сообщением обмена.
//
// Возвращаемое значение:
//  Булево - Истина - если загрузка прошла без ошибки.
//
Функция ЗагрузитьДанныеПерехода(ИмяФайла) Экспорт
	
	Константы.ИспользоватьНесколькоОрганизаций.Установить(Истина);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	ЧтениеXML.Прочитать(); // Message
	ЧтениеXML.Прочитать(); // Header
	
	Header = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаXDTO.Тип("http://www.1c.ru/SSL/Exchange/Message", "Header"));
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
		Или ЧтениеXML.ЛокальноеИмя <> "Body" Тогда
		
		ЗаписьЖурналаРегистрации(
			"ОбменEnterpriseData.ЗагрузкаДанныхПерехода",
			УровеньЖурналаРегистрации.Ошибка,,, 
			НСтр("ru='Ошибка чтения сообщения загрузки. Неверный формат сообщения.'"));
			
		Возврат Ложь;
	КонецЕсли;
	
	ФорматОбмена = РазложитьФорматОбмена(Header.Format);
	ВерсияФорматаДляЗагрузки = ФорматОбмена.Версия;
	КомпонентыОбмена = КомпонентыОбмена("Получение",,ВерсияФорматаДляЗагрузки);
	КомпонентыОбмена.XMLСхема = Header.Format;
	
	ЧтениеXML.Прочитать(); // Body
	КомпонентыОбмена.Вставить("ФайлОбмена", ЧтениеXML);
	
	ОбменДаннымиXDTOСервер.ПроизвестиЧтениеДанных(КомпонентыОбмена);
	
	ЧтениеXML.Закрыть();
	Если КомпонентыОбмена.ФлагОшибки Тогда
		ЗаписьЖурналаРегистрации(
			"ОбменEnterpriseData.ЗагрузкаДанныхПерехода",
			УровеньЖурналаРегистрации.Ошибка,,, 
			НСтр("ru='В ходе выполнения операции возникли ошибки'") + ": " + Символы.ПС + КомпонентыОбмена.СтрокаСообщенияОбОшибке);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Выполняет подготовку структуры КомпонентыОбмена.
//
// Параметры:
//   НаправлениеОбмена - Строка - отправка или Получение.
//	 ВерсияФормата - Строка - версия формата при отправке данных.
//   ВерсияФорматаОбменаПриЗагрузке - Строка - версия формата, которая должна применяться при загрузке данных.
//
// Возвращаемое значение:
//   Структура - компоненты обмена.
//
Функция КомпонентыОбмена(НаправлениеОбмена, ВерсияФормата = "", ВерсияФорматаОбменаПриЗагрузке = "") Экспорт
	
	КомпонентыОбмена = Новый Структура;

	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		МодульОбменДаннымиXDTOСервер = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиXDTOСервер");

		КомпонентыОбмена = МодульОбменДаннымиXDTOСервер.ИнициализироватьКомпонентыОбмена(НаправлениеОбмена);
		ТекВерсияФормата = ?(НаправлениеОбмена = "Отправка", ВерсияФормата, ВерсияФорматаОбменаПриЗагрузке);
		
		КомпонентыОбмена.ЭтоОбменЧерезПланОбмена = Ложь;
		КомпонентыОбмена.КлючСообщенияЖурналаРегистрации = НСтр("ru = 'Обмен через EnterpriseData'", ОбщегоНазначения.КодОсновногоЯзыка());
		КомпонентыОбмена.ВерсияФорматаОбмена = ТекВерсияФормата;
		КомпонентыОбмена.XMLСхема = "http://v8.1c.ru/edi/edi_stnd/EnterpriseData/" + ТекВерсияФормата;
		
		ВерсииФорматаОбмена = Новый Соответствие;
		
		МодульОбменДаннымиПереопределяемый = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиПереопределяемый");
		
		МодульОбменДаннымиПереопределяемый.ПриПолученииДоступныхВерсийФормата(ВерсииФорматаОбмена);
		КомпонентыОбмена.МенеджерОбмена = ВерсииФорматаОбмена.Получить(ТекВерсияФормата);
		Если КомпонентыОбмена.МенеджерОбмена = Неопределено Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не поддерживается версия формата обмена: <%1>.'"), ТекВерсияФормата);
		КонецЕсли;
		
		МодульОбменДаннымиXDTOСервер.ИнициализироватьТаблицыПравилОбмена(КомпонентыОбмена);
	КонецЕсли;
	
	Возврат КомпонентыОбмена;

КонецФункции

// Возвращает результат чтения заголовка сообщения обмена.
//
// Параметры:
//  ИмяФайла - ИмяФайла - Файл обмена.
//
// Возвращаемое значение:
//  ОбъектXDTO - ОбъектXDTO.
//
Функция ПрочитатьЗаголовокСообщенияОбмена(ИмяФайла) Экспорт
	
	Результат = Неопределено;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	ЧтениеXML.Прочитать(); // Message
	ЧтениеXML.Прочитать(); // Header
	
	Результат = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаXDTO.Тип("http://www.1c.ru/SSL/Exchange/Message", "Header"));
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
		ИЛИ ЧтениеXML.ЛокальноеИмя <> "Body" Тогда
		
		ЗаписьЖурналаРегистрации(
			"ОбменEnterpriseData.ЗагрузкаДанныхПерехода",
			УровеньЖурналаРегистрации.Ошибка,,, 
			НСтр("ru='Ошибка чтения сообщения загрузки. Неверный формат сообщения.'"));
			
		ЧтениеXML.Закрыть();
		Возврат Результат;
		
	КонецЕсли;
	
	ЧтениеXML.Закрыть();
	Возврат Результат;
	
КонецФункции

// Возвращает структуру с информацией по версии формата.
//
// Параметры:
//  ФорматОбмена - Строка - Версия формата.
//
// Возвращаемое значение:
//  Структура - Структура.
//
Функция РазложитьФорматОбмена(Знач ФорматОбмена) Экспорт
	
	Результат = Новый Структура("БазовыйФормат, Версия");
	
	ЭлементыФормата = СтрРазделить(ФорматОбмена, "/");
	
	Если ЭлементыФормата.Количество() = 0 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неканоническое имя формата обмена <%1>'"), ФорматОбмена);
	КонецЕсли;
	
	Результат.Версия = ЭлементыФормата[ЭлементыФормата.ВГраница()];
	
	Версии = СтрРазделить(Результат.Версия, ".");
	
	Если Версии.Количество() = 0 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неканоническое представление версии формата обмена: <%1>.'"), Результат.Версия);
	КонецЕсли;
	
	ЭлементыФормата.Удалить(ЭлементыФормата.ВГраница());
	
	Результат.БазовыйФормат = СтрСоединить(ЭлементыФормата, "/");
	
	Возврат Результат;
	
КонецФункции

// Возвращает версию формата числом.
//
// Параметры:
//  СтрокаВерсии - Строка - Версия формата строкой.
//
// Возвращаемое значение:
//  Число - Версия формата числом.
//
Функция ВерсияФорматаЧислом(СтрокаВерсии) Экспорт
	Если Не ЗначениеЗаполнено(СтрокаВерсии) Или СтрокаВерсии = "1.0.beta" Тогда
		Возврат 0;
	КонецЕсли;
	
	ВерсияФорматаЧислом = 0;
	
	РазрядыВерсии = СтрРазделить(СтрокаВерсии, ".");
	
	МножительРазряда = 10000;
	Для ИндексРазрядаОбратный = 0 По 1 Цикл
		ВерсияФорматаЧислом = ВерсияФорматаЧислом + Число(РазрядыВерсии[ИндексРазрядаОбратный])*МножительРазряда;
		МножительРазряда = МножительРазряда / 100;
	КонецЦикла;
	Возврат ВерсияФорматаЧислом;
КонецФункции

// Возвращает признак существования узлов обмена с УРМК с включенной выгрузкой заказов.
//
// Возвращаемое значение:
//  Булево - Истина, если план обмена с выгрузкой заказов существует.
//
Функция РегистрироватьЗаказыПокупателейКОбменуСУРМК() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	ПланОбмена.ОбменСУРМК КАК ПланОбмена
	|ГДЕ
	|	НЕ ПланОбмена.ПометкаУдаления
	|	И НЕ ПланОбмена.ЭтотУзел
	|	И ПланОбмена.ВыгружатьЗаказы";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// АПК:299-выкл вызывается из правил регистрации объекта

// Формирует текст запроса и параметры запроса по узлам обмена
// Для контроля прохождения фильтра ПРО
// 
// Параметры:
//  Объект - Произвольный - синхронизируемый объект
//  ТекстЗапроса - Строка - текст запроса
//  ПараметрыЗапроса - см. ОпределитьПараметрыЗапросаОбъекта 
//  ИмяПланаОбмена - Строка - "АвтономнаяРабота" или "СОтборами"
Процедура ЗаполнитьПараметрыЗапроса(Объект, ТекстЗапроса, ПараметрыЗапроса, ИмяПланаОбмена) Экспорт

	Если Не ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;

	ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект);
	ТекстЗапроса = ТекстЗапросаПравилРегистрации(ИмяПланаОбмена);

КонецПроцедуры

// АПК:299-вкл

// Возвращает структуру отборов на узле плана обмена с установленными значениями по умолчанию;
// Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
// а для табличных частей используются структуры,
// содержащие массивы значений полей табличных частей плана обмена.
// 
// Возвращаемое значение:
//  Структура - Настройка отборов на узле:
//   * Организации - Структура -:
//   ** Организация - Массив -
//   * СкладыИМагазины - Структура -:
//   ** СкладыИМагазины - Массив -
Функция НастройкаОтборовНаУзле() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ИспользоватьОтборПоОрганизациям", Ложь);
	Результат.Вставить("ИспользоватьОтборПоСкладамИМагазинам", Ложь);
	
	КолонкиТабличнойЧастиОрганизации = Новый Структура;
	КолонкиТабличнойЧастиОрганизации.Вставить("Организация", Новый Массив);
	Результат.Вставить("Организации", КолонкиТабличнойЧастиОрганизации);
	
	КолонкиТабличнойЧастиМагазиныИСклады = Новый Структура;
	КолонкиТабличнойЧастиМагазиныИСклады.Вставить("СтруктурнаяЕдиница", Новый Массив);
	Результат.Вставить("СкладыИМагазины", КолонкиТабличнойЧастиМагазиныИСклады);
	
	Результат.Вставить("СинхронизироватьТокеныАвторизацииИСМП", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Возвращает имена реквизитов и табличных частей плана обмена, перечисленных через запятую,
// которые являются общими для пары обменивающихся конфигураций.
//
// Возвращаемое значение:
//  Строка - Общие данные узлов
Функция ОбщиеДанныеУзлов() Экспорт

	Возврат "ИспользоватьОтборПоОрганизациям, ИспользоватьОтборПоСкладамИМагазинам, Организации, СкладыИМагазины, СинхронизироватьТокеныАвторизацииИСМП";

КонецФункции

// Обработчик при создании на сервере формы узла.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
Процедура ПриСозданииНаСервереФормыУзла(Форма, Элементы) Экспорт

	Форма.ДоступныОрганизации = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций")
		И Не ЗначениеЗаполнено(Справочники.Организации.ОрганизацияКомпания());
	Форма.ДоступныСкладыИМагазины = ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам");

КонецПроцедуры

Процедура ОбновитьДанныеОбъекта(Объект, ВыбранноеЗначение) Экспорт

	Объект[ВыбранноеЗначение.ТаблицаЗаполнения].Очистить();

	ТаблицаВыбранныхЗначений = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТаблицыВыбранныхЗначений);

	Если ТаблицаВыбранныхЗначений.Количество() > 0 Тогда
		ТаблицаВыбранныхЗначений.Колонки.Ссылка.Имя = ВыбранноеЗначение.КолонкаЗаполнения;
		Объект[ВыбранноеЗначение.ТаблицаЗаполнения].Загрузить(ТаблицаВыбранныхЗначений);
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьЗаголовкиКомандФормы(Объект, Элементы) Экспорт

	Если Объект.Организации.Количество() > 0 Тогда
		НовыйЗаголовокОрганизаций = ТекстовоеПредставлениеОрганизаций(Объект.Организации);
	Иначе
		НовыйЗаголовокОрганизаций = НСтр("ru = 'Выбрать организации'");
	КонецЕсли;
	Элементы.ВыбратьОрганизации.Заголовок = НовыйЗаголовокОрганизаций;

	Если Объект.СкладыИМагазины.Количество() > 0 Тогда
		ВыбранныеМагазиныИСклады = Объект.СкладыИМагазины.Выгрузить();
		ВыбранныеМагазиныИСклады.Колонки.СтруктурнаяЕдиница.Имя = "Ссылка";
		НовыйЗаголовокМагазиновИСкладов = ТекстовоеПредставлениеМагазиновИСкладов(ВыбранныеМагазиныИСклады);
	Иначе
		НовыйЗаголовокМагазиновИСкладов = НСтр("ru = 'Выбрать склады и магазины'");
	КонецЕсли;
	Элементы.ВыбратьСкладыИМагазины.Заголовок = НовыйЗаголовокМагазиновИСкладов;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗарегистрироватьНачальнуюВыгрузкуПоУмолчанию(Получатель, СтандартнаяОбработка, Отбор)

	СтандартнаяОбработка = Ложь;

	Отбор = Новый Массив;

	РеквизитыПолучателя = Новый Массив;
	РеквизитыПолучателя.Добавить("ВариантНастройки");
	РеквизитыПолучателя.Добавить("ИспользоватьОтборПоВидамДокументов");
	РеквизитыПолучателя.Добавить("РучнойОбмен");
	РеквизитыПолучателя.Добавить("ВидыДокументов");
	РеквизитыПолучателя.Добавить("ИспользоватьОтборПоОрганизациям");
	РеквизитыПолучателя.Добавить("ДатаНачалаВыгрузкиДокументов");
	РеквизитыПолучателя.Добавить("Организации");
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ИспользоватьОтборПоСкладамИМагазинам", Получатель.Метаданные()) Тогда
		РеквизитыПолучателя.Добавить("ИспользоватьОтборПоСкладамИМагазинам");
	КонецЕсли;

	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Получатель, РеквизитыПолучателя);

	Если ЗначенияРеквизитов.РучнойОбмен Или ЗначенияРеквизитов.ИспользоватьОтборПоВидамДокументов Тогда

		Для Каждого ЭлементСостава Из Получатель.Метаданные().Состав Цикл
			Если Метаданные.Справочники.Содержит(ЭлементСостава.Метаданные) Тогда
				Отбор.Добавить(ЭлементСостава.Метаданные);
			КонецЕсли;
		КонецЦикла;

		Если ЗначенияРеквизитов.ИспользоватьОтборПоВидамДокументов Тогда

			Для Каждого СтрокаТабличнойЧасти Из Получатель.ВидыДокументов Цикл
				ОбъектМетаданных = Метаданные.Документы.Найти(СтрокаТабличнойЧасти.ИмяОбъектаМетаданных);
				Если ОбъектМетаданных <> Неопределено Тогда
					Отбор.Добавить(ОбъектМетаданных);
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;

	Иначе

		Для Каждого ЭлементСостава Из Получатель.Метаданные().Состав Цикл
			Отбор.Добавить(ЭлементСостава.Метаданные);
		КонецЦикла;

	КонецЕсли;

	МетаданныеКлассификаторов = Новый Массив;
	МетаданныеКлассификаторов.Добавить(Метаданные.Справочники.Банки);
	МетаданныеКлассификаторов.Добавить(Метаданные.Справочники.Валюты);
	МетаданныеКлассификаторов.Добавить(Метаданные.Справочники.КлассификаторЕдиницИзмерения);
	МетаданныеКлассификаторов.Добавить(Метаданные.Справочники.СтраныМира);

	МетаданныеРегистрируютсяВручную = Новый Массив;
	МетаданныеРегистрируютсяВручную.Добавить(Метаданные.РегистрыСведений.ФактОплатыЗаказов);

	Для Каждого ЭлементМассива Из МетаданныеКлассификаторов Цикл
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Отбор, ЭлементМассива);
	КонецЦикла;
	Для Каждого ЭлементМассива Из МетаданныеРегистрируютсяВручную Цикл
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Отбор, ЭлементМассива);
	КонецЦикла;

	Если ЗначенияРеквизитов.ИспользоватьОтборПоОрганизациям Тогда
		ОтборОрганизации = ЗначенияРеквизитов.Организации.Выгрузить().ВыгрузитьКолонку("Организация");
	Иначе
		ОтборОрганизации = Неопределено;
	КонецЕсли;
	
	МетаданныеРегистрируютсяОтдельно = Новый Массив;
	Если ОтборОрганизации <> Неопределено Тогда
		Для каждого ЭлементСоставаПланаОбмена Из Отбор Цикл
			Если ОбщегоНазначения.ЭтоСправочник(ЭлементСоставаПланаОбмена) Тогда
				
				Если ЭлементСоставаПланаОбмена = Метаданные.Справочники.Организации
					ИЛИ ЭлементСоставаПланаОбмена = Метаданные.Справочники.БанковскиеСчета
					ИЛИ ЭлементСоставаПланаОбмена.Реквизиты.Найти("Организация") <> Неопределено Тогда
					
					МетаданныеРегистрируютсяОтдельно.Добавить(ЭлементСоставаПланаОбмена);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Для Каждого ЭлементМассива Из МетаданныеРегистрируютсяОтдельно Цикл
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Отбор, ЭлементМассива);
	КонецЦикла;

	ОбменДаннымиСервер.ЗарегистрироватьДанныеПоДатеНачалаВыгрузкиИОрганизациям(Получатель,
		ЗначенияРеквизитов.ДатаНачалаВыгрузкиДокументов, ОтборОрганизации, Отбор);
	
	// регистрация справочников с организацией
	Для каждого ЭлементСоставаПланаОбмена Из МетаданныеРегистрируютсяОтдельно Цикл
		
		ПолноеИмяОбъекта = ЭлементСоставаПланаОбмена.ПолноеИмя();
		
		Если ОбщегоНазначения.ЭтоСправочник(ЭлементСоставаПланаОбмена) И ОтборОрганизации <> Неопределено Тогда
			
			Если ЭлементСоставаПланаОбмена = Метаданные.Справочники.Организации Тогда
				
				Для каждого ОрганизацияСсылка Из ОтборОрганизации Цикл
					
					ПланыОбмена.ЗарегистрироватьИзменения(Получатель, ОрганизацияСсылка);
					
				КонецЦикла;
				
			ИначеЕсли ЭлементСоставаПланаОбмена = Метаданные.Справочники.БанковскиеСчета Тогда
				
				Выборка = Справочники.БанковскиеСчета.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					Если ТипЗнч(Выборка.Владелец) = Тип("СправочникСсылка.Организации") Тогда
						Если ОтборОрганизации.Найти(Выборка.Владелец) <> Неопределено Тогда
							ПланыОбмена.ЗарегистрироватьИзменения(Получатель, Выборка.Ссылка);
						КонецЕсли;
					Иначе
						ПланыОбмена.ЗарегистрироватьИзменения(Получатель, Выборка.Ссылка);
					КонецЕсли;
					
				КонецЦикла;
				
			ИначеЕсли ЭлементСоставаПланаОбмена.Реквизиты.Найти("Организация") <> Неопределено Тогда
				
				Если ЭлементСоставаПланаОбмена = Метаданные.Справочники.СтруктурныеЕдиницы Тогда
					
					Выборка = Справочники.СтруктурныеЕдиницы.Выбрать();
					Пока Выборка.Следующий() Цикл
						
						Если Выборка.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
							Если ОтборОрганизации.Найти(Выборка.Организация) <> Неопределено Тогда
								ПланыОбмена.ЗарегистрироватьИзменения(Получатель, Выборка.Ссылка);
							КонецЕсли;
						Иначе
							ПланыОбмена.ЗарегистрироватьИзменения(Получатель, Выборка.Ссылка);
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе
					
					Выборка = ВыборкаСправочниковПоОрганизациям(ПолноеИмяОбъекта, ОтборОрганизации);
					
					Пока Выборка.Следующий() Цикл
						
						ПланыОбмена.ЗарегистрироватьИзменения(Получатель, Выборка.Ссылка);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

// Определяет параметры запроса ПРО для выгружаемых объектов
// 
// Параметры:
//  ЭлементДанных - выгружаемый элемент данных, для которого требуется определить параметры
// 
// Возвращаемое значение:
//  Структура - Определить параметры запроса объекта:
//   * Отказ - Булево
//   * КонтрольПроведенияПоОдномуИзУсловий - Булево
//   * СообщениеПользователю - Строка
//   * РеквизитПроверкиПодразделения - Строка
//   * Организации - Массив из СправочникСсылка.Организации
//   * СтруктурныеЕдиницы - Массив из СправочникСсылка.СтруктурныеЕдиницы
//   * ФильтрПоОрганизации - Булево - применять к объекту фильтр по организации
//   * ФильтрПоСкладуМагазину - Булево - применять к объекту фильтр по складу / магазину
Функция ОпределитьПараметрыЗапросаОбъекта(ЭлементДанных)

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Отказ", Ложь);
	ПараметрыЗапроса.Вставить("КонтрольПроведенияПоОдномуИзУсловий", Ложь);
	ПараметрыЗапроса.Вставить("СообщениеПользователю", "");
	ПараметрыЗапроса.Вставить("РеквизитПроверкиПодразделения", "");

	ПараметрыЗапроса.Вставить("Организации", Новый Массив);
	ПараметрыЗапроса.Вставить("СтруктурныеЕдиницы", Новый Массив);

	ПараметрыЗапроса.Вставить("ФильтрПоОрганизации", Ложь);
	ПараметрыЗапроса.Вставить("ФильтрПоСкладуМагазину", Ложь);

	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(ЭлементДанных));
	Если МетаданныеОбъекта = Неопределено Тогда
		Возврат ПараметрыЗапроса;
	КонецЕсли;

	ЗаполнитьПоля_ОрганизацияИСтруктурнаяЕдиница(ЭлементДанных, ПараметрыЗапроса, МетаданныеОбъекта);
	ЗаполнитьПоля_Владелец(ЭлементДанных, ПараметрыЗапроса, МетаданныеОбъекта);
	ЗаполнитьПоля_ВладелецФайла(ЭлементДанных, ПараметрыЗапроса, МетаданныеОбъекта);
	ЗаполнитьПоля_СтруктурнаяЕдиница_Документа(ЭлементДанных, ПараметрыЗапроса, МетаданныеОбъекта);
	ЗаполнитьПоля_СтруктурнаяЕдиница_ПоложениеСклада(ЭлементДанных, ПараметрыЗапроса, МетаданныеОбъекта);
	ЗаполнитьПоля_ОплатыПокупателейССайта(ЭлементДанных, ПараметрыЗапроса, МетаданныеОбъекта);

	ОчиститьПустыеСсылкиИзМассиваОбъектов(ПараметрыЗапроса.Организации);

	ПараметрыЗапроса.СтруктурныеЕдиницы = ИерархияПоСкладамИМагазинам(ПараметрыЗапроса.СтруктурныеЕдиницы);

	ОчиститьПустыеСсылкиИзМассиваОбъектов(ПараметрыЗапроса.СтруктурныеЕдиницы);

	ПараметрыЗапроса.ФильтрПоОрганизации = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций")
		И ЗначениеЗаполнено(ПараметрыЗапроса.Организации);

	ПараметрыЗапроса.ФильтрПоСкладуМагазину = ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам")
		И ЗначениеЗаполнено(ПараметрыЗапроса.СтруктурныеЕдиницы);

	Возврат ПараметрыЗапроса;

КонецФункции

// Возвращает текст запроса ПРО для использования его в обработчиках правил регистрации
//
// Возвращаемое значение:
//  Строка - Текст запроса ПРО
//
Функция ТекстЗапросаПравилРегистрации(ИмяПланаОбмена)

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПланОбменаОсновнаяТаблица.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.СОтборами КАК ПланОбменаОсновнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.СОтборами.Организации КАК ПланОбменаТаблицаОрганизации
	|		ПО ПланОбменаОсновнаяТаблица.Ссылка = ПланОбменаТаблицаОрганизации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.СОтборами.СкладыИМагазины КАК ПланОбменаТаблицаСкладыМагазины
	|		ПО ПланОбменаОсновнаяТаблица.Ссылка = ПланОбменаТаблицаСкладыМагазины.Ссылка
	|ГДЕ
	|	НЕ ПланОбменаОсновнаяТаблица.Ссылка = &СОтборамиЭтотУзел
	|	И НЕ ПланОбменаОсновнаяТаблица.ПометкаУдаления
	|	И (НЕ &СвойствоОбъекта_ФильтрПоОрганизации
	|			ИЛИ (ПланОбменаТаблицаОрганизации.Организация В (&СвойствоОбъекта_Организации)
	|				ИЛИ НЕ ПланОбменаОсновнаяТаблица.ИспользоватьОтборПоОрганизациям))
	|	И (НЕ &СвойствоОбъекта_ФильтрПоСкладуМагазину
	|			ИЛИ (ПланОбменаТаблицаСкладыМагазины.СтруктурнаяЕдиница В (&СвойствоОбъекта_СтруктурныеЕдиницы)
	|				ИЛИ НЕ ПланОбменаОсновнаяТаблица.ИспользоватьОтборПоСкладамИМагазинам))";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СОтборами", ИмяПланаОбмена);

	Возврат ТекстЗапроса;

КонецФункции

// Очищает пустые значения в массиве объектов
//
Процедура ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов)

	МаксимальныйИндекс = МассивОбъектов.ВГраница();

	Если МаксимальныйИндекс > 0 Тогда

		Пока МаксимальныйИндекс >= 0 Цикл

			ЭлементМассива = МассивОбъектов[МаксимальныйИндекс];

			Если Не ЗначениеЗаполнено(ЭлементМассива) Тогда
				МассивОбъектов.Удалить(МаксимальныйИндекс);
			КонецЕсли;

			МаксимальныйИндекс = МаксимальныйИндекс - 1;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Функция ИерархияПоСкладамИМагазинам(СтруктурныеЕдиницы)

	Если Не ЗначениеЗаполнено(СтруктурныеЕдиницы) Тогда
		Возврат Новый Массив;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтруктурныеЕдиницы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.Ссылка В (&СтруктурныеЕдиницы)
	|	И СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы В (&ТипыСтруктурныхЕдиниц)
	|ИТОГИ
	|ПО
	|	Ссылка ТОЛЬКО ИЕРАРХИЯ";
	Запрос.УстановитьПараметр("СтруктурныеЕдиницы", СтруктурныеЕдиницы);
	Запрос.УстановитьПараметр("ТипыСтруктурныхЕдиниц",
		ОбменДаннымиУНФКлиентСервер.ТипыСтруктурныхЕдиницСкладыИМагазины());
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат Результат;

КонецФункции

Функция ВыборкаСправочниковПоОрганизациям(ПолноеИмяОбъекта, Организации)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	&ПолноеИмяОбъекта КАК Таблица
	|ГДЕ
	|	Таблица.Организация В(&Организации)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

#Область РИБСОтборами

Процедура ЗаполнитьПоля_ОрганизацияИСтруктурнаяЕдиница(Объект, ПараметрыЗапроса, МетаданныеОбъекта)
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.Организации") Тогда
		ПараметрыЗапроса.Организации.Добавить(Объект.Ссылка);
	КонецЕсли;
	
	Если ЕстьИзмерениеРегистра("ГоловнаяОрганизация", МетаданныеОбъекта) Тогда
		ПараметрыЗапроса.Организации.Добавить(Объект.ГоловнаяОрганизация);
	КонецЕсли;	
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ГоловнаяОрганизация", МетаданныеОбъекта) Тогда
		ПараметрыЗапроса.Организации.Добавить(Объект.ГоловнаяОрганизация);
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", МетаданныеОбъекта) Тогда
		ПараметрыЗапроса.Организации.Добавить(Объект.Организация);
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СтруктурнаяЕдиница", МетаданныеОбъекта) Тогда
		ПараметрыЗапроса.СтруктурныеЕдиницы.Добавить(Объект.СтруктурнаяЕдиница);
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ТорговыйОбъект", МетаданныеОбъекта) 
		И ТипЗнч(Объект.ТорговыйОбъект) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		ПараметрыЗапроса.СтруктурныеЕдиницы.Добавить(Объект.ТорговыйОбъект);
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПередачаТоваровМеждуОрганизациями") Тогда
		ПараметрыЗапроса.СтруктурныеЕдиницы.Добавить(Объект.ОрганизацияПолучатель);
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("РегистрСведенийЗапись.НастройкаПередачиТоваровМеждуОрганизациями") Тогда
		ПараметрыЗапроса.СтруктурныеЕдиницы.Добавить(Объект.ОрганизацияВладелец);
		ПараметрыЗапроса.СтруктурныеЕдиницы.Добавить(Объект.ОрганизацияПродавец);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоля_Владелец(ЭлементДанных, ПараметрыЗапроса, МетаданныеОбъекта)

	Если Не ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъекта) Тогда
		Возврат;
	КонецЕсли;

	Если МетаданныеОбъекта.Владельцы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ЭлементДанных.Владелец) = Тип("СправочникСсылка.Организации") Тогда
		ПараметрыЗапроса.Организации.Добавить(ЭлементДанных.Владелец);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПоля_ВладелецФайла(ЭлементДанных, ПараметрыЗапроса, МетаданныеОбъекта)

	Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта("ВладелецФайла", МетаданныеОбъекта) Тогда
		Возврат;
	КонецЕсли;

	МетаданныеВладельца = ЭлементДанных.ВладелецФайла.Метаданные();

	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", МетаданныеВладельца) Тогда
		ЗначениеФильтра = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементДанных.ВладелецФайла, "Организация");
		ПараметрыЗапроса.Организации.Добавить(ЗначениеФильтра);
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СтруктурнаяЕдиница", МетаданныеВладельца) Тогда
		ЗначениеФильтра = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементДанных.ВладелецФайла, "СтруктурнаяЕдиница");
		ПараметрыЗапроса.СтруктурныеЕдиницы.Добавить(ЗначениеФильтра);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПоля_СтруктурнаяЕдиница_Документа(Объект, ПараметрыЗапроса, МетаданныеОбъекта)

	Если Не ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта) Тогда
		Возврат;
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СтруктурнаяЕдиницаПолучатель", МетаданныеОбъекта) Тогда
		ПараметрыЗапроса.СтруктурныеЕдиницы.Добавить(Объект.СтруктурнаяЕдиницаПолучатель);
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СтруктурнаяЕдиницаПродажи", МетаданныеОбъекта) Тогда
		ПараметрыЗапроса.СтруктурныеЕдиницы.Добавить(Объект.СтруктурнаяЕдиницаПродажи);
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СтруктурнаяЕдиницаРезерв", МетаданныеОбъекта) Тогда
		ПараметрыЗапроса.СтруктурныеЕдиницы.Добавить(Объект.СтруктурнаяЕдиницаРезерв);
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СтруктурнаяЕдиницаПродукции", МетаданныеОбъекта) Тогда
		ПараметрыЗапроса.СтруктурныеЕдиницы.Добавить(Объект.СтруктурнаяЕдиницаПродукции);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПоля_СтруктурнаяЕдиница_ПоложениеСклада(Объект, ПараметрыЗапроса, МетаданныеОбъекта)

	Если Не ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта) Тогда
		Возврат;
	КонецЕсли;

	Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта("ПоложениеСклада", МетаданныеОбъекта) Тогда
		Возврат;
	КонецЕсли;

	Если Не ЕстьРеквизитТабличнойЧастиОбъекта("Запасы.СтруктурнаяЕдиница", МетаданныеОбъекта) Тогда
		Возврат;
	КонецЕсли;

	Для Каждого ЗначениеРеквизита Из Объект.Запасы.ВыгрузитьКолонку("СтруктурнаяЕдиница") Цикл
		ПараметрыЗапроса.СтруктурныеЕдиницы.Добавить(ЗначениеРеквизита);
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьПоля_ОплатыПокупателейССайта(ЭлементДанных, ПараметрыЗапроса, МетаданныеОбъекта)

	Если ТипЗнч(ЭлементДанных) <> Тип("РегистрСведенийЗапись.ОплатыПокупателейССайта") Тогда
		Возврат;
	КонецЕсли;

	ЗначениеФильтра = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементДанных.ДокументОплаты, "Организация");
	ПараметрыЗапроса.Организации.Добавить(ЗначениеФильтра);

КонецПроцедуры

#КонецОбласти

Функция ЕстьИзмерениеРегистра(ИмяИзмерения, МетаданныеОбъекта)
	
	Если Не ОбщегоНазначения.ЭтоРегистр(МетаданныеОбъекта) Тогда
		Возврат Ложь;
	КонецЕсли;

	Измерения = МетаданныеОбъекта.Измерения; // КоллекцияОбъектовМетаданных
	Возврат НЕ (Измерения.Найти(ИмяИзмерения) = Неопределено);

КонецФункции

Функция ЕстьРеквизитТабличнойЧастиОбъекта(ПутьКДанным, МетаданныеОбъекта)

	КомпонентыПути = СтрРазделить(ПутьКДанным, ".");
	Если КомпонентыПути.Количество() <> 2 Тогда
		Возврат Ложь;
	КонецЕсли;

	ТабличнаяЧасть = МетаданныеОбъекта.ТабличныеЧасти.Найти(КомпонентыПути[0]);
	Если ТабличнаяЧасть = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Реквизит = ТабличнаяЧасть.Реквизиты.Найти(КомпонентыПути[1]);
	Возврат Реквизит <> Неопределено;

КонецФункции

Функция ТекстовоеПредставлениеОрганизаций(Коллекция)

	ВыбранныеОрганизации = Коллекция.Выгрузить().ВыгрузитьКолонку("Организация");
	Результат = СтрСоединить(ВыбранныеОрганизации, ", ");
	Возврат Результат;

КонецФункции

Функция ТекстовоеПредставлениеМагазиновИСкладов(Коллекция)

	Если Не ЗначениеЗаполнено(Коллекция) Тогда
		Возврат "";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаВыбранныхЗначений.Ссылка КАК СсылкаНаОбъект
	|ПОМЕСТИТЬ ТаблицаВыбранныхЗначений
	|ИЗ
	|	&ТаблицаВыбранныхЗначений КАК ТаблицаВыбранныхЗначений
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СсылкаНаОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Наименование КАК НаименованиеОбъекта,
	|	ТаблицаВыбранныхЗначений.СсылкаНаОбъект КАК СсылкаНаОбъект,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПодчиненныеЭлементы.Ссылка) КАК ЕстьПодчиненные
	|ИЗ
	|	ТаблицаВыбранныхЗначений КАК ТаблицаВыбранныхЗначений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК ПодчиненныеЭлементы
	|		ПО ПодчиненныеЭлементы.Родитель = ТаблицаВыбранныхЗначений.СсылкаНаОбъект
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ПО СтруктурныеЕдиницы.Ссылка = ТаблицаВыбранныхЗначений.СсылкаНаОбъект
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВыбранныхЗначений.СсылкаНаОбъект,
	|	СтруктурныеЕдиницы.Наименование";

	Запрос.УстановитьПараметр("ТаблицаВыбранныхЗначений", Коллекция);

	Выборка = Запрос.Выполнить().Выбрать();

	КомпонентыПредставления = Новый Массив;

	Пока Выборка.Следующий() Цикл

		НаименованиеОбъекта = Выборка.НаименованиеОбъекта;

		Если Выборка.ЕстьПодчиненные > 0 Тогда
			НаименованиеОбъекта = СтрШаблон(НСтр("ru = '%1 (Включая подчиненные)'"), НаименованиеОбъекта);
		КонецЕсли;

		КомпонентыПредставления.Добавить(НаименованиеОбъекта);

	КонецЦикла;

	Возврат СтрСоединить(КомпонентыПредставления, ", ");

КонецФункции

#КонецОбласти