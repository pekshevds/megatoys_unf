#Область ПрограммныйИнтерфейс

// Функция возвращает дату изменения последовательности уплаты налогов
// Возвращаемое значение:
//  Дата смены алгоритма - Дата
Функция ДатаСменыПоследовательностиЗачетаУплат() Экспорт
	
	// Дата по 196-ФЗ от 29.05.2023 г.
	Возврат Дата(2023,05,29);
	
КонецФункции

// Функция возвращает дату изменения последовательности уплаты налогов при подачи уведомления
// Возвращаемое значение:
//  Дата смены алгоритма - Дата
Функция ДатаПриоритезацииУведомленияПоНДФЛ() Экспорт
	
	// Дата по 196-ФЗ от 29.05.2023 г. - через месяц после публикации
	Возврат ДобавитьМесяц(ДатаСменыПоследовательностиЗачетаУплат(), 1) + 86400;
	
КонецФункции

// Функция возвращает дату изменения последовательности уплаты налогов при подачи уведомления
// Возвращаемое значение:
//  Дата смены алгоритма - Дата
Функция ДатаПриоритезацииУведомленияПоСтраховымВзносам() Экспорт
	
	// Дата по 389-ФЗ от 31.07.2023 г. - с 01.10.2023
	Возврат Дата(2023, 10, 01);
	
КонецФункции

// Функция возвращает таблицу зачета налогов за заданный период.
//
// Параметры:
//  Организация     - СправочникСсылка.Организации - Организация для получения остатков
//  ДатаНачала      - Дата начала осмотра.
//  ДатаОкончания   - Дата окончания осмотра.
//  ВидыНалогов     - Массив значений ПеречислениеСсылка.ВидыНалогов, или пусто
// Возвращаемое значение:
//  Таблица значений 
//     Организация                 - СправочникСсылка.Организации
//     РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//     ВидНалога                   - ПеречислениеСсылка.ВидыНалогов
//     Сумма                       - Сумма оборота по ЕНС в разрезе платежныхналогов документов
//
Функция ЗачтенныеУплатыНалоговЗаПериод(Организация, ДатаНачала, ДатаОкончания, ВидыНалогов = Неопределено) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Организация КАК Организация,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВидыНалоговИПлатежейВБюджет.ВидНалога КАК ВидНалога,
	|	СУММА(РасчетыПоНалогамНаЕдиномНалоговомСчете.Сумма) КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете КАК РасчетыПоНалогамНаЕдиномНалоговомСчете
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНалоговИПлатежейВБюджет КАК ВидыНалоговИПлатежейВБюджет
	|		ПО РасчетыПоНалогамНаЕдиномНалоговомСчете.Налог = ВидыНалоговИПлатежейВБюджет.Ссылка
	|ГДЕ
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.ВидДвижения = &ВидДвижения
	|	И &УсловиеВидыНалога
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.РегистрацияВНалоговомОргане,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Организация,
	|	ВидыНалоговИПлатежейВБюджет.ВидНалога";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация"));
	Запрос.УстановитьПараметр("ДатаНачала",          НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания",       КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("ВидДвижения",         ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("ВидыНалогов",         ВидыНалогов);
	Если ЗначениеЗаполнено(ВидыНалогов) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВидыНалога", "ВидыНалоговИПлатежейВБюджет.ВидНалога В(&ВидыНалогов)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВидыНалога", "Истина");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Возвращает суммы по видам налогов, которые зарезервированы по заявлениям
//
// Параметры:
//   Налог     - Массив из СправочникСсылка.ВидыНалоговИПлатежейВБюджет - Виды налогов
//   Документы - Массив из ДокументСсылка.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности - Заявления о зачете
//
// Возвращаемое значение:
//   ТаблицаЗначений
//    * Налог - СправочникСсылка.ВидыНалоговИПлатежейВБюджет
//    * Сумма - Число
//
Функция ЗарезервированыеСуммыПоВидамНалогов(ВидыНалогов, Документы) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаявлениеОЗачетеВСчетПредстоящейОбязанностиНалоги.Налог КАК Налог,
	|	СУММА(ЗаявлениеОЗачетеВСчетПредстоящейОбязанностиНалоги.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.Налоги КАК ЗаявлениеОЗачетеВСчетПредстоящейОбязанностиНалоги
	|ГДЕ
	|	ЗаявлениеОЗачетеВСчетПредстоящейОбязанностиНалоги.Ссылка В(&Документы)
	|	И ЗаявлениеОЗачетеВСчетПредстоящейОбязанностиНалоги.Налог В(&ВидыНалогов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявлениеОЗачетеВСчетПредстоящейОбязанностиНалоги.Налог
	|
	|УПОРЯДОЧИТЬ ПО
	|	Налог");
		
	Запрос.УстановитьПараметр("Документы", Документы);
	Запрос.УстановитьПараметр("ВидыНалогов", ВидыНалогов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает сумму, которые зарезервирована по организации за период по конкретному виду налога
//
// Параметры:
//   Организаци    - СправочникСсылка.Организации - Организация, по которой необходимо вычислить зарезервированную сумму
//   ДатаНачала    - Дата - Дата периода, с которого необходимо рассчитать зарезервированную сумму
//   датаОкончания - Дата - Дата периода, по которую необходимо рассчитать зарезервированную сумму
//   ВидНалога     - СправочникСсылка.ВидыНалоговИПлатежейВБюджет - Вид налогов
//
// Возвращаемое значение:
//   Число
//
Функция ЗарезервированнаяСуммаЗаПериод(Организация, ДатаНачала, ДатаОкончания, ВидНалога) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ЗаявлениеОЗачетеВСчетПредстоящейОбязанностиНалоги.Сумма), 0) КАК Сумма
	|ИЗ
	|	Документ.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.Налоги КАК ЗаявлениеОЗачетеВСчетПредстоящейОбязанностиНалоги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности КАК ЗаявлениеОЗачетеВСчетПредстоящейОбязанности
	|		ПО ЗаявлениеОЗачетеВСчетПредстоящейОбязанностиНалоги.Ссылка = ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.Ссылка
	|			И (ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.Проведен)
	|			И (ЗаявлениеОЗачетеВСчетПредстоящейОбязанностиНалоги.Налог = &Налог)
	|			И (ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.Организация = &Организация)
	|			И (ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Налог", ВидНалога);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Сумма;
	
КонецФункции

// Проверяет можно ли для данного налога использовать отрицательную сумму в уведомлении
//
// Параметры:
//  Налог - СправочникСсылка.ВидыНалоговИПлатежейВБюджет - проверяемый налог
// 
// Возвращаемое значение:
//  Булево - Истина, если можно
//
Функция МожноИспользоватьОтрицательнуюСуммуВУведомлении(Налог) Экспорт
	Возврат Налог = Справочники.ВидыНалогов.АвансовыйПлатежПриУСН
	Или Налог = Справочники.ВидыНалогов.АвансовыйПлатежПриУСНРасходы
	Или Налог = Справочники.ВидыНалогов.ЕдиныйНалогПриУСН
	Или Налог = Справочники.ВидыНалогов.ЕдиныйНалогПриУСНРасходы 
КонецФункции

// Функция возвращает таблицу зачета налогов за заданный период.
//
// Параметры:
//  Организация     - СправочникСсылка.Организации - Организация для получения остатков
//  ДатаНачала      - Дата начала осмотра.
//  ДатаОкончания   - Дата окончания осмотра.
//  ВидыНалогов     - Массив значений ПеречислениеСсылка.ВидыНалогов
//
// Возвращаемое значение:
//  Таблица значений 
//     Организация - СправочникСсылка.Организации 
//     Сумма       - Число - Сумма зачтенной уплаты
//     Ссылка      - ДокументСсылка.СписаниеСРасчетногоСчета, ДокументСсылка.РасходныйКассовыйОрдер
//     Дата        - Дата - Дата отражения в учете
//     Уведомление - ДокументСсылка.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности - Заявление о зачете сумм на ЕНС
//     Оплачено    - Булево - Признак состояние оплаченого вида налога
//     Состояние   - ПеречислениеСсылка.СостоянияБанковскихДокументов - Состояние оплаченого вида налог
//
Функция ЗачтенныеУплатыНалоговПоДокументамЗаПериод(Организация, ДатаНачала, ДатаОкончания, ВидыНалогов) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Организация КАК Организация,
	|	СУММА(РасчетыПоНалогамНаЕдиномНалоговомСчете.Сумма) КАК Сумма,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.ПлатежныйДокумент КАК Ссылка,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Период КАК Дата,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Регистратор КАК Уведомление,
	|	ИСТИНА КАК Оплачено,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Оплачено) КАК Состояние
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете КАК РасчетыПоНалогамНаЕдиномНалоговомСчете
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНалогов КАК ВидыНалоговИПлатежейВБюджет
	|		ПО РасчетыПоНалогамНаЕдиномНалоговомСчете.Налог = ВидыНалоговИПлатежейВБюджет.Ссылка
	|			И (РасчетыПоНалогамНаЕдиномНалоговомСчете.Период МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			И (РасчетыПоНалогамНаЕдиномНалоговомСчете.ГоловнаяОрганизация = &ГоловнаяОрганизация)
	|			И (РасчетыПоНалогамНаЕдиномНалоговомСчете.ВидДвижения = &ВидДвижения)
	|			И (ВидыНалоговИПлатежейВБюджет.ВидНалога В (&ВидыНалогов))
	|			И (РасчетыПоНалогамНаЕдиномНалоговомСчете.Активность)
	|			И (РасчетыПоНалогамНаЕдиномНалоговомСчете.Регистратор ССЫЛКА Документ.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Организация,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.ПлатежныйДокумент,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Регистратор,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Период";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация"));
	Запрос.УстановитьПараметр("ДатаНачала",          НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания",       КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("ВидДвижения",         ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("ВидыНалогов",         ВидыНалогов);
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс


Функция ЗначенияРеквизитовЕдиногоНалоговогоСчета() Экспорт
	
	// Реквизиты единого налогового счета едины для всех.
	// Поэтому зададим их в явном виде.
	
	Реквизиты = Новый Структура();
	
	Реквизиты.Вставить("БИК",           "017003983");
	Реквизиты.Вставить("РасчетныйСчет", "03100643000000018500");
	Реквизиты.Вставить("КоррСчет",      "40102810445370000059");
	Реквизиты.Вставить("НаименованиеБанка",
		НСтр("ru = 'ОТДЕЛЕНИЕ ТУЛА БАНКА РОССИИ//УФК по Тульской области г. Тула'"));
	Реквизиты.Вставить("ТекстКорреспондента", "");
	
	Возврат Реквизиты;
	
КонецФункции

Функция ЭтоРеквизитыЕдиногоНалоговогоСчета(ПлатежныеРеквизиты) Экспорт
	
	Если Не ЗначениеЗаполнено(ПлатежныеРеквизиты) Или ТипЗнч(ПлатежныеРеквизиты) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РеквизитыЕНС = ЗначенияРеквизитовЕдиногоНалоговогоСчета();
	КлючиДляПроверки = Новый Структура("БИК, РасчетныйСчет, КоррСчет");
	
	Для Каждого КлючИЗначение Из КлючиДляПроверки Цикл
		Если Не ПлатежныеРеквизиты.Свойство(КлючИЗначение.Ключ)
			Или РеквизитыЕНС[КлючИЗначение.Ключ] <> ПлатежныеРеквизиты[КлючИЗначение.Ключ] Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция РеквизитыМИДол() Экспорт
	
	// Реквизиты получателя единого налогового платежа едины для всех.
	// Поэтому зададим их в явном виде.
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Ссылка");
	Реквизиты.Вставить("Вид", Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган);
	Реквизиты.Вставить("Код", "9967");
	Реквизиты.Вставить("ИНН", "7727406020");
	Реквизиты.Вставить("КПП", "770801001");
	Реквизиты.Вставить("Наименование",
		НСтр("ru = 'МИ ФНС России по управлению долгом'"));
	Реквизиты.Вставить("ПолноеНаименование",
		НСтр("ru = 'Межрегиональная инспекция Федеральной налоговой службы по управлению долгом'"));
	
	Реквизиты.Вставить("ПлатежныеРеквизиты", ЗначенияРеквизитовЕдиногоНалоговогоСчета());
	
	Реквизиты.ПлатежныеРеквизиты.Вставить("Банк");
	Реквизиты.ПлатежныеРеквизиты.Вставить("БанковскийСчет");
	Реквизиты.ПлатежныеРеквизиты.Вставить("ПолучательПлатежа",
		НСтр("ru = 'Казначейство России (ФНС России)'"));	
	Возврат Реквизиты;
	
КонецФункции

Функция ОКТМОЕдиногоНалоговогоСчета() Экспорт
	
	Возврат "0";
	
КонецФункции

Функция КППОКТМООрганизацииДляУплатыВБюджет(Знач Организация, Налог, Период) Экспорт
	
	РеквизитыОрганизации = Новый Структура("КПП, ОКТМО");
	
	НалогиУплачиваемыеОтдельно = ЕдиныйНалоговыйСчетПовтИсп.НалогиУплачиваемыеОтдельно();
	НалогУплачиваетсяОтдельно  = НалогиУплачиваемыеОтдельно.Найти(Налог) <> Неопределено;
	ЭтоЕНП = Налог = Справочники.ВидыНалогов.ЕдиныйНалоговыйПлатеж;
	
	ИспользуетсяЕдиныйНалоговыйПлатеж = Период >= '20230101'
		И РегламентированнаяОтчетностьУСН.ПлательщикЕНП(Организация, Период);
	
	РегистрацияВНалоговомОргане = Организация.РегистрацияВНалоговомОргане;
	РеквизитыОрганизации.КПП    = Справочники.Организации.КППНаДату(Организация, Период);
	
	Если ЭтоЕНП И ИспользуетсяЕдиныйНалоговыйПлатеж Тогда
		РеквизитыОрганизации.ОКТМО = ОКТМОЕдиногоНалоговогоСчета();
	Иначе
		РеквизитыОрганизации.ОКТМО = РегламентированнаяОтчетностьУСН.КодТерритории(
			РегистрацияВНалоговомОргане, "ОКТМО");
	КонецЕсли;
	
	Возврат РеквизитыОрганизации;
	
КонецФункции

Процедура ПлатежныеРеквизитыЕдиногоНалоговогоСчета(ПлатежныеРеквизиты) Экспорт
	
	ЗаполнитьЗначенияСвойств(ПлатежныеРеквизиты,
		ЗначенияРеквизитовЕдиногоНалоговогоСчета());
	
КонецПроцедуры

Процедура ПроверкаРеквизитовЕдиногоНалоговогоПлатежа(Организация) Экспорт
	
	КодНалоговогоОргана = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КодНалоговогоОргана");
	Если Не ЗначениеЗаполнено(КодНалоговогоОргана) Тогда
		Возврат
	КонецЕсли;
	ГосударственныйОрган = ДанныеГосударственныхОрганов.ГосударственныйОрган(Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган,
		КодНалоговогоОргана);
	ГосударственныйОрганСсылка = ГосударственныйОрган.Ссылка;
	Если Не ЗначениеЗаполнено(ГосударственныйОрганСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ЕдиныйБанковскийСчетГосударственногоОргана(ГосударственныйОрганСсылка);
	
КонецПроцедуры

Функция ЕдиныйБанковскийСчетГосударственногоОргана(ГосударственныйОрган) Экспорт
	
	БанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
	Если Не ЗначениеЗаполнено(ГосударственныйОрган) Тогда
		Возврат БанковскийСчет;
	КонецЕсли;
	
	ЗначенияРеквизитовСчета = ЗначенияРеквизитовЕдиногоНалоговогоСчета();
	Банк = РаботаСБанкамиБП.БанкПоПлатежнымРеквизитам(ЗначенияРеквизитовСчета);
	
	// Находим или создаем счет
	НомерСчетаЕдиногоНалоговогоПлатежа = ЗначенияРеквизитовСчета.РасчетныйСчет;
	
	БанковскийСчет = Справочники.БанковскиеСчета.БанковскийСчетПоРеквизитам(ГосударственныйОрган,
		Банк,
		НомерСчетаЕдиногоНалоговогоПлатежа);
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
		
		БанковскийСчет = Справочники.БанковскиеСчета.ПолучитьЭлемент(ГосударственныйОрган,
			НомерСчетаЕдиногоНалоговогоПлатежа,
			ЗначенияРеквизитовСчета.БИК);
			
		РеквизитыГосударственногоОргана = ДанныеГосударственныхОрганов.ПолучитьПлатежныеРеквизитыКонтрагента(ГосударственныйОрган);
		Если РеквизитыГосударственногоОргана <> Неопределено Тогда
			БанковскийСчетОбъект = БанковскийСчет.ПолучитьОбъект();
			БанковскийСчетОбъект.ТекстКорреспондента = РеквизитыГосударственногоОргана.ПлатежныеРеквизиты.ПолучательПлатежа;
			БанковскийСчетОбъект.Записать();
		КонецЕсли;
		
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат БанковскийСчет;
	
КонецФункции

Процедура ЗачетАвансаПоЕдиномуНалоговомуСчету(ПараметрыПроведения, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыЗачетаАвансаПоЕдиномуНалоговомуСчету(ПараметрыПроведения.ТаблицаРеквизиты);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	ТаблицаОстатковНаЕдиномНалоговомСчете = ТаблицаОстатковНаЕдиномНалоговомСчете(Реквизиты.Организация, Реквизиты.Период);
	
	РаспределитьОплатуПоОстаткамРасчетов565ФЗ(ТаблицаОстатковНаЕдиномНалоговомСчете, Параметры.Реквизиты, Движения, Отказ);
	
	ЗачетНалогов = Движения.РасчетыПоНалогамНаЕдиномНалоговомСчете.Выгрузить();
	
	Если ЗачетНалогов.Итог("Сумма") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Отражение факта уплаты по видам учетов
	
	Параметры.Реквизиты.Колонки.Добавить("ВидОперации",                         Новый ОписаниеТипов("Булево"));
	Параметры.Реквизиты.Колонки.Добавить("ЗачетАвансаПоЕдиномуНалоговомуСчету", Новый ОписаниеТипов("Булево"));
	Параметры.Реквизиты.Колонки.Добавить("СчетУчета",                           Новый ОписаниеТипов("ПланСчетовСсылка.Управленческий"));
	Параметры.Реквизиты.Колонки.Добавить("ДатаВходящегоДокумента",              ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Параметры.Реквизиты.Колонки.Добавить("НомерВходящегоДокумента",             ОбщегоНазначения.ОписаниеТипаСтрока(30));
	Параметры.Реквизиты.Колонки.Добавить("ПлатежныйДокумент",                   Метаданные.РегистрыНакопления.РасчетыПоЕдиномуНалоговомуСчету.Измерения.ПлатежныйДокумент.Тип);
	
	Параметры.Реквизиты.ЗаполнитьЗначения(Истина, "ЗачетАвансаПоЕдиномуНалоговомуСчету");
	
	Параметры.Реквизиты.ЗаполнитьЗначения(Истина, "ВидОперации");  
	
	СобратьТаблицыПогашенияНалоговПоРегистратору(Параметры, Движения);
	
	//БЗКБ
	СформироватьДвиженияПоНалогамИВзносамСФОТ(Параметры.Реквизиты,
	Параметры, Движения, Отказ);
	//БЗКБ
	
	СформироватьДвиженияРасчетыПоНалогам(Параметры, Движения);
	
	СформироватьРасчетыСФондамиПоСтраховымВзносам(Параметры, Движения);
		
	ДокументОбъект = Новый Структура;
	ДокументОбъект.Вставить("Ссылка",      Реквизиты.Регистратор);
	ДокументОбъект.Вставить("Регистратор", Реквизиты.Регистратор);
	ДокументОбъект.Вставить("Организация", Реквизиты.Организация);
	ДокументОбъект.Вставить("Движения",    Движения);
	ДокументОбъект.Вставить("Имя",         Реквизиты.Регистратор.Метаданные().Имя);
	ДокументОбъект.Вставить("Дата",        Реквизиты.Период);
	СформироватьДвиженияУСН(Параметры, Движения);
	//
	СформироватьДвиженияНДФЛРасчетыНалоговыхАгентовСБюджетом(Параметры, Движения);
	
КонецПроцедуры


Процедура СобратьТаблицыПогашенияНалоговПоРегистратору(ПараметрыПроведения, Движения) Экспорт
	
	ПараметрыПроведения.Вставить("ТаблицаУплатыПоЕдиномуНалоговомуСчету", Неопределено);
	
	Реквизиты = ПараметрыПроведения.Реквизиты[0];
	
	ПлательщикЕНП = РегламентированнаяОтчетностьУСН.ПлательщикЕНП(
	Реквизиты.Организация,
	Реквизиты.Период);
	
	Если Не ПлательщикЕНП Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНалогов = Движения.РасчетыПоНалогамНаЕдиномНалоговомСчете.Выгрузить().Скопировать(Новый Структура("ВидДвижения",ВидДвиженияНакопления.Расход));
	Если ТаблицаНалогов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ТаблицаНалогов.Свернуть("СчетУчета, КодБК, Налог, РегистрацияВНалоговомОргане, СрокУплаты, ПлатежныйДокумент", "Сумма");
	
	ПлатежныеДокументы = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНалогов, "ПлатежныйДокумент", Истина);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        Реквизиты.Организация);
	Запрос.УстановитьПараметр("ПлатежныеДокументы", ПлатежныеДокументы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходСоСчета.Номер КАК Номер,
	|	РасходСоСчета.Дата КАК Дата,
	|	РасходСоСчета.Ссылка КАК Документ
	|ИЗ
	|	Документ.РасходСоСчета КАК РасходСоСчета
	|ГДЕ
	|	РасходСоСчета.Ссылка В(&ПлатежныеДокументы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходИзКассы.Номер,
	|	РасходИзКассы.Дата,
	|	РасходИзКассы.Ссылка
	|ИЗ
	|	Документ.РасходИзКассы КАК РасходИзКассы
	|ГДЕ
	|	РасходИзКассы.Ссылка В(&ПлатежныеДокументы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОперацияПоЕдиномуНалоговомуСчету.Номер,
	|	ОперацияПоЕдиномуНалоговомуСчету.Дата,
	|	ОперацияПоЕдиномуНалоговомуСчету.Ссылка
	|ИЗ
	|	Документ.ОперацияПоЕдиномуНалоговомуСчету КАК ОперацияПоЕдиномуНалоговомуСчету
	|ГДЕ
	|	ОперацияПоЕдиномуНалоговомуСчету.Ссылка В(&ПлатежныеДокументы)";
	
	ТаблицаРеквизитов = Запрос.Выполнить().Выгрузить();
	ДанныеПервичныхДокументов = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из ТаблицаРеквизитов Цикл
		ДанныеПервичныхДокументов.Вставить(СтрокаТаблицы.Документ,
			Новый Структура("Дата, Номер", СтрокаТаблицы.Дата, СтрокаТаблицы.Номер));
	КонецЦикла;
	
	ТаблицаНалогов.Колонки.Добавить("НомерВходящегоДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(30));
	ТаблицаНалогов.Колонки.Добавить("ДатаВходящегоДокумента",  ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	ТаблицаУплатыПоНалогам = ТаблицаНалогов.СкопироватьКолонки();
	ТаблицаУплатыПоНалогам.Колонки.Добавить("ТаблицаУплатыПоНалогам", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	ПеречислениеНалоговИсходная = ТаблицаРасшифровкиПлатежа();
	
	Для Каждого СтрокаТаблицы Из ТаблицаНалогов Цикл
		
		НоваяСтрокаТаблицыНалогов = ТаблицаУплатыПоНалогам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыНалогов, СтрокаТаблицы);
		
		ДанныеДокумента = ДанныеПервичныхДокументов[СтрокаТаблицы.ПлатежныйДокумент];
		Если ЗначениеЗаполнено(ДанныеДокумента) Тогда
			НоваяСтрокаТаблицыНалогов.НомерВходящегоДокумента = ДанныеДокумента.Номер;
			НоваяСтрокаТаблицыНалогов.ДатаВходящегоДокумента  = ДанныеДокумента.Дата;
		КонецЕсли;
		
		ТаблицаНалога = ПеречислениеНалоговИсходная.СкопироватьКолонки();
		НоваяСтрока = ТаблицаНалога.Добавить();
		НоваяСтрока.СчетДт                               = СтрокаТаблицы.СчетУчета;
		НоваяСтрока.Налог                          = СтрокаТаблицы.Налог;

		
		НоваяСтрока.РегистрацияВНалоговомОргане          = СтрокаТаблицы.РегистрацияВНалоговомОргане;
		НоваяСтрока.СуммаРуб                             = СтрокаТаблицы.Сумма;
		НоваяСтрока.Период                               = Реквизиты.Период;
		НоваяСтрока.НалоговыйПериод                      = НачалоМесяца(СтрокаТаблицы.СрокУплаты);
		НоваяСтрока.Организация                          = Реквизиты.Организация;
		НоваяСтрокаТаблицыНалогов.ТаблицаУплатыПоНалогам = ТаблицаНалога;
		
	КонецЦикла;
	
	ПараметрыПроведения.Вставить("ТаблицаУплатыПоЕдиномуНалоговомуСчету", ТаблицаУплатыПоНалогам);
	
КонецПроцедуры

Процедура ЗачетАвансаПоЕдиномуНалоговомуСчетуПоУведомлению(ПараметрыПроведения, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыЗачетаАвансаПоЕдиномуНалоговомуСчетуПоДвижениямДокумента(ПараметрыПроведения.Реквизиты);
	
	Реквизиты = Параметры.Реквизиты[0];    
	
	Если Реквизиты.Период >= '20230101' Тогда
		Возврат;
	КонецЕсли; 	 
	
	ТаблицаОстатковНаЕдиномНалоговомСчете = ТаблицаОстатковНаЕдиномНалоговомСчете(Реквизиты.Организация, Реквизиты.Период, Реквизиты.Регистратор);
	
	РаспределитьОплатуПоДвижениямДокумента(ТаблицаОстатковНаЕдиномНалоговомСчете, Параметры.Реквизиты, Движения, Отказ);
	
	ЗачетНалогов = Движения.РасчетыПоНалогамНаЕдиномНалоговомСчете.Выгрузить();
	
	Если ЗачетНалогов.Итог("Сумма") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Отражение факта уплаты по видам учетов
	
	Параметры.Реквизиты.Колонки.Добавить("ВидОперации",                         Новый ОписаниеТипов("Булево"));
	Параметры.Реквизиты.Колонки.Добавить("ЗачетАвансаПоЕдиномуНалоговомуСчету", Новый ОписаниеТипов("Булево"));
	Параметры.Реквизиты.Колонки.Добавить("СчетУчета",                           Новый ОписаниеТипов("ПланСчетовСсылка.Управленческий"));
	Параметры.Реквизиты.Колонки.Добавить("ДатаВходящегоДокумента",              ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Параметры.Реквизиты.Колонки.Добавить("НомерВходящегоДокумента",             ОбщегоНазначения.ОписаниеТипаСтрока(30));
	Параметры.Реквизиты.Колонки.Добавить("ПлатежныйДокумент",                   Метаданные.РегистрыНакопления.РасчетыПоЕдиномуНалоговомуСчету.Измерения.ПлатежныйДокумент.Тип);
	
	Параметры.Реквизиты.ЗаполнитьЗначения(Истина, "ЗачетАвансаПоЕдиномуНалоговомуСчету");
	
	Параметры.Реквизиты.ЗаполнитьЗначения(Истина, "ВидОперации");  
	
	СобратьТаблицыПогашенияНалоговПоРегистратору(Параметры, Движения); 
	
	//БЗКБ
	СформироватьДвиженияПоНалогамИВзносамСФОТ(Параметры.Реквизиты,
	Параметры, Движения, Отказ);
	//БЗКБ
	
	СформироватьДвиженияРасчетыПоНалогам(Параметры, Движения);
	
	СформироватьРасчетыСФондамиПоСтраховымВзносам(Параметры, Движения);
		
	ДокументОбъект = Новый Структура;
	ДокументОбъект.Вставить("Ссылка",      Реквизиты.Регистратор);
	ДокументОбъект.Вставить("Регистратор", Реквизиты.Регистратор);
	ДокументОбъект.Вставить("Организация", Реквизиты.Организация);
	ДокументОбъект.Вставить("Движения",    Движения);
	ДокументОбъект.Вставить("Имя",         Реквизиты.Регистратор.Метаданные().Имя);
	ДокументОбъект.Вставить("Дата",        Реквизиты.Период);
	СформироватьДвиженияУСН(Параметры, Движения);
	//
	СформироватьДвиженияНДФЛРасчетыНалоговыхАгентовСБюджетом(Параметры, Движения);	
	
КонецПроцедуры 

Процедура ЗачетАвансаПоЕдиномуНалоговомуСчетуПоЗаявлениюОЗачете(ПараметрыПроведения, ТаблицаНалоги, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНалоги) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыЗачетаАвансаПоЕдиномуНалоговомуСчетуПоЗаявлениеОЗачете(ПараметрыПроведения.Реквизиты, ТаблицаНалоги);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	ТаблицаОстатковНаЕдиномНалоговомСчете = ТаблицаОстатковНаЕдиномНалоговомСчете(Реквизиты.Организация, Реквизиты.Период, Реквизиты.Регистратор);
	
	ДоступныйОстаток = ТаблицаОстатковНаЕдиномНалоговомСчете.Итог("Сумма");
	СуммаКЗачету     = Параметры.ТаблицаНалоги.Итог("Сумма");
	Если ДоступныйОстаток < СуммаКЗачету Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Сумма, заявленная к зачету (%1) превышает доступный остаток ЕНС (%2)'"),
			Формат(СуммаКЗачету, "ЧДЦ=2; ЧН=0,00"), Формат(ДоступныйОстаток, "ЧДЦ=2; ЧН=0,00"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		Возврат;
	КонецЕсли;
	
	РаспределитьПредварительнуюОплатуПоТаблицеДвижений(ТаблицаОстатковНаЕдиномНалоговомСчете, Параметры.Реквизиты, Параметры.ТаблицаНалоги, Движения, Отказ);
	
	ЗачетНалогов = Движения.РасчетыПоНалогамНаЕдиномНалоговомСчете.Выгрузить();
	
	Если ЗачетНалогов.Итог("Сумма") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Отражение факта уплаты по видам учетов
	
	Параметры.Реквизиты.Колонки.Добавить("ВидОперации",                         Новый ОписаниеТипов("Булево"));
	Параметры.Реквизиты.Колонки.Добавить("ЗачетАвансаПоЕдиномуНалоговомуСчету", Новый ОписаниеТипов("Булево"));
	Параметры.Реквизиты.Колонки.Добавить("СчетУчета",                           Новый ОписаниеТипов("ПланСчетовСсылка.Управленческий"));
	Параметры.Реквизиты.Колонки.Добавить("ДатаВходящегоДокумента",              ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Параметры.Реквизиты.Колонки.Добавить("НомерВходящегоДокумента",             ОбщегоНазначения.ОписаниеТипаСтрока(30));
	Параметры.Реквизиты.Колонки.Добавить("ПлатежныйДокумент",                   Метаданные.РегистрыНакопления.РасчетыПоЕдиномуНалоговомуСчету.Измерения.ПлатежныйДокумент.Тип);
	
	Параметры.Реквизиты.ЗаполнитьЗначения(Истина, "ЗачетАвансаПоЕдиномуНалоговомуСчету");
	
	Параметры.Реквизиты.ЗаполнитьЗначения(Истина, "ВидОперации"); 
	
	СобратьТаблицыПогашенияНалоговПоРегистратору(Параметры, Движения);
	
	//БЗКБ
	СформироватьДвиженияПоНалогамИВзносамСФОТ(Параметры.Реквизиты,
	Параметры, Движения, Отказ);
	//БЗКБ
	
	//УПР. УНФ
	СформироватьДвиженияРасчетыПоНалогам(Параметры, Движения); 
	СформироватьДвиженияНДФЛРасчетыНалоговыхАгентовСБюджетом(Параметры, Движения);
	СформироватьРасчетыСФондамиПоСтраховымВзносам(Параметры, Движения);
	//УПР. УНФ

	ДокументОбъект = Новый Структура;
	ДокументОбъект.Вставить("Ссылка",      Реквизиты.Регистратор);
	ДокументОбъект.Вставить("Регистратор", Реквизиты.Регистратор);
	ДокументОбъект.Вставить("Организация", Реквизиты.Организация);
	ДокументОбъект.Вставить("Движения",    Движения);
	ДокументОбъект.Вставить("Имя",         Реквизиты.Регистратор.Метаданные().Имя);
	ДокументОбъект.Вставить("Дата",        Реквизиты.Период);
	//УСН
	СформироватьДвиженияУСН(Параметры, Движения);
	//УСН  
	
КонецПроцедуры

Процедура ЗачетАвансаПоЕдиномуНалоговомуСчетуПоОперацииЕНС(ТаблицаРеквизиты, ТаблицаНалогов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНалогов) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыЗачетаАвансаПоЕдиномуНалоговомуСчетуПоОперацииЕНС(ТаблицаРеквизиты, ТаблицаНалогов);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Реквизиты.Период < '20230101' Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаУплатыПоНалогам = Параметры.ТаблицаНалоги.Скопировать(Новый Структура("КорректировкаЕНС", Ложь));
	Параметры.Вставить("ТаблицаНалогов", ТаблицаУплатыПоНалогам);
	
	// Отражение факта уплаты по видам учетов
	Параметры.Реквизиты.Колонки.Добавить("ВидОперации",                         Новый ОписаниеТипов("Булево"));
	Параметры.Реквизиты.Колонки.Добавить("ЗачетАвансаПоЕдиномуНалоговомуСчету", Новый ОписаниеТипов("Булево"));
	Параметры.Реквизиты.Колонки.Добавить("СчетУчета",                           Новый ОписаниеТипов("ПланСчетовСсылка.Управленческий"));
	Параметры.Реквизиты.Колонки.Добавить("ДатаВходящегоДокумента",              ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Параметры.Реквизиты.Колонки.Добавить("НомерВходящегоДокумента",             ОбщегоНазначения.ОписаниеТипаСтрока(30));
	Параметры.Реквизиты.Колонки.Добавить("ПлатежныйДокумент",                   Метаданные.РегистрыНакопления.РасчетыПоЕдиномуНалоговомуСчету.Измерения.ПлатежныйДокумент.Тип);
	
	Параметры.Реквизиты.ЗаполнитьЗначения(Истина, "ЗачетАвансаПоЕдиномуНалоговомуСчету");
	
	Параметры.Реквизиты.ЗаполнитьЗначения(Истина, "ВидОперации");  
	
	СобратьТаблицыПогашенияНалоговПоРегистратору(Параметры, Движения);
	//БЗКБ
	СформироватьДвиженияПоНалогамИВзносамСФОТ(Параметры.Реквизиты,
	Параметры, Движения, Отказ);
	//БЗКБ
	
	//УПР. УНФ
	СформироватьДвиженияРасчетыПоНалогам(Параметры, Движения); 
	СформироватьДвиженияНДФЛРасчетыНалоговыхАгентовСБюджетом(Параметры, Движения);
	СформироватьРасчетыСФондамиПоСтраховымВзносам(Параметры, Движения);
	//УПР. УНФ

	ДокументОбъект = Новый Структура;
	ДокументОбъект.Вставить("Ссылка",      Реквизиты.Регистратор);
	ДокументОбъект.Вставить("Регистратор", Реквизиты.Регистратор);
	ДокументОбъект.Вставить("Организация", Реквизиты.Организация);
	ДокументОбъект.Вставить("Движения",    Движения);
	ДокументОбъект.Вставить("Имя",         Реквизиты.Регистратор.Метаданные().Имя);
	ДокументОбъект.Вставить("Дата",        Реквизиты.Период);
	//УСН
	СформироватьДвиженияУСН(Параметры, Движения);
	//УСН  
	
КонецПроцедуры

Функция ТаблицаРасшифровкиПлатежа() Экспорт
	
	РасшифровкаПлатежаПрочее = Новый ТаблицаЗначений;
	РасшифровкаПлатежаПрочее.Колонки.Добавить("Организация",                 Новый ОписаниеТипов("СправочникСсылка.Организации"));
	РасшифровкаПлатежаПрочее.Колонки.Добавить("СчетДт",                      Новый ОписаниеТипов("ПланСчетовСсылка.Управленческий"));
	РасшифровкаПлатежаПрочее.Колонки.Добавить("Налог",                      Новый ОписаниеТипов("СправочникСсылка.ВидыНалогов"));
	РасшифровкаПлатежаПрочее.Колонки.Добавить("ПодразделениеДт",             Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	РасшифровкаПлатежаПрочее.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	РасшифровкаПлатежаПрочее.Колонки.Добавить("СуммаРуб",                    ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	РасшифровкаПлатежаПрочее.Колонки.Добавить("Период",                      ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	РасшифровкаПлатежаПрочее.Колонки.Добавить("НалоговыйПериод",             ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	РасшифровкаПлатежаПрочее.Колонки.Добавить("ПлатежныйДокумент",           Метаданные.РегистрыНакопления.РасчетыПоЕдиномуНалоговомуСчету.Измерения.ПлатежныйДокумент.Тип);
	
	Возврат РасшифровкаПлатежаПрочее;
	
КонецФункции

#Область ФормированиеДвиженийВБухгалтерскомУчете

#КонецОбласти

#Область ФормированиеДвиженийПоРегистрам

Процедура СформироватьДвиженияПоНалогамНаЕдиномНалоговомСчете(ТаблицаРеквизиты, ТаблицаНалогов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНалогов)
		Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНалоги = ТаблицаНалогов.Скопировать();
	
	СтрокаСвертки = "СчетУчета, Налог, КодБК, РегистрацияВНалоговомОргане, КодПоОКТМО, СрокУплаты, ВидДвижения";
	Если ТаблицаНалоги.Колонки.Найти("ПлатежныйДокумент") <> Неопределено Тогда
		СтрокаСвертки = СтрокаСвертки + ", ПлатежныйДокумент";
	КонецЕсли;
	ТаблицаНалоги.Свернуть(СтрокаСвертки, "Сумма");
	
	Реквизиты = ТаблицаРеквизиты[0];
	ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Организация, "ГоловнаяОрганизация");
	НаборДвижений = Движения.РасчетыПоНалогамНаЕдиномНалоговомСчете;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНалоги Цикл
		
		// При отрицательной сумме по УСН или ЕСХН формируем движение Расход
		Если СтрокаТаблицы.Сумма < 0
			И ЕдиныйНалоговыйСчет.МожноИспользоватьОтрицательнуюСуммуВУведомлении(СтрокаТаблицы.Налог) Тогда
			СформироватьДвиженияУСНПоПредыдущимСрокамУплаты(НаборДвижений, СтрокаТаблицы, Реквизиты, ГоловнаяОрганизация);
			СформироватьДвиженияУСНПоПредыдущимСрокамУплатыРасчетыПоНалогам(СтрокаТаблицы,Реквизиты, Движения, ГоловнаяОрганизация);
		Иначе
			НоваяСтрока = НаборДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.ГоловнаяОрганизация = ГоловнаяОрганизация;
			НоваяСтрока.Активность = Истина;
       	КонецЕсли;
	КонецЦикла;
	
	НаборДвижений.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоСанкциямНаЕдиномНалоговомСчете(ТаблицаРеквизиты, ТаблицаНалогов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНалогов)
		Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНалоги = ТаблицаНалогов.Скопировать();
	
	Реквизиты = ТаблицаРеквизиты[0];
	ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Организация, "ГоловнаяОрганизация");
	НаборДвижений = Движения.РасчетыПоСанкциямНаЕдиномНалоговомСчете;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНалоги Цикл
		НоваяСтрока = НаборДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.ГоловнаяОрганизация = ГоловнаяОрганизация;
		НоваяСтрока.Активность = Истина;
	КонецЦикла;
	
	НаборДвижений.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияНаЕдиномНалоговомСчете(ТаблицаРеквизиты, ТаблицаНалогов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНалогов)
		Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНалоги = ТаблицаНалогов.Скопировать();
	КолонкиСвертки = "ПлатежныйДокумент, ВидДвижения";
	Если ТаблицаНалоги.Колонки.Найти("Организация") <> Неопределено Тогда
		КолонкиСвертки = КолонкиСвертки + ", Организация";
	КонецЕсли;
	Если ТаблицаНалоги.Колонки.Найти("Период") <> Неопределено Тогда
		КолонкиСвертки = КолонкиСвертки + ", Период";
	КонецЕсли;
	ТаблицаНалоги.Свернуть(КолонкиСвертки, "Сумма");
	
	Реквизиты = ТаблицаРеквизиты[0];
	ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Организация, "ГоловнаяОрганизация");
	НаборДвижений = Движения.РасчетыПоЕдиномуНалоговомуСчету;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНалоги Цикл
		НоваяСтрока = НаборДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.ГоловнаяОрганизация = ГоловнаяОрганизация;
		НоваяСтрока.Активность  = Истина;
	КонецЦикла;
	
	НаборДвижений.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

Процедура СинхронизироватьСостояниеУведомлений(Уведомление) Экспорт
	
	Если Уведомление.ДополнительныеСвойства.Свойство("СинхронизацияСостоянийУведомлений") Тогда
		Возврат;
	Иначе
		Уведомление.ДополнительныеСвойства.Вставить("СинхронизацияСостоянийУведомлений", Истина);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Уведомление",     Уведомление.Ссылка);
	Запрос.УстановитьПараметр("ПометкаУдаления", Уведомление.ПометкаУдаления);
	
	Если ТипЗнч(Уведомление) = Тип("ДокументОбъект.УведомлениеОбИсчисленныхСуммахНалогов") Тогда
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	УведомлениеОСпецрежимахНалогообложения.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.УведомлениеОбИсчисленныхСуммахНалогов КАК УведомлениеОбИсчисленныхСуммахНалогов
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОСпецрежимахНалогообложения КАК УведомлениеОСпецрежимахНалогообложения
			|		ПО УведомлениеОбИсчисленныхСуммахНалогов.Уведомление = УведомлениеОСпецрежимахНалогообложения.Ссылка
			|ГДЕ
			|	УведомлениеОбИсчисленныхСуммахНалогов.Ссылка = &Уведомление
			|	И УведомлениеОСпецрежимахНалогообложения.ПометкаУдаления <> &ПометкаУдаления";
	ИначеЕсли ТипЗнч(Уведомление) = Тип("ДокументОбъект.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности") Тогда
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	УведомлениеОСпецрежимахНалогообложения.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности КАК ЗаявлениеОЗачетеВСчетПредстоящейОбязанности
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОСпецрежимахНалогообложения КАК УведомлениеОСпецрежимахНалогообложения
			|		ПО ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.Уведомление = УведомлениеОСпецрежимахНалогообложения.Ссылка
			|ГДЕ
			|	ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.Ссылка = &Уведомление
			|	И УведомлениеОСпецрежимахНалогообложения.ПометкаУдаления <> &ПометкаУдаления";
	ИначеЕсли ТипЗнч(Уведомление) = Тип("ДокументОбъект.УведомлениеОСпецрежимахНалогообложения") Тогда
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	УведомлениеОбИсчисленныхСуммахНалогов.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.УведомлениеОбИсчисленныхСуммахНалогов КАК УведомлениеОбИсчисленныхСуммахНалогов
			|ГДЕ
			|	УведомлениеОбИсчисленныхСуммахНалогов.Уведомление = &Уведомление
			|	И УведомлениеОбИсчисленныхСуммахНалогов.ПометкаУдаления <> &ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.Ссылка
			|ИЗ
			|	Документ.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности КАК ЗаявлениеОЗачетеВСчетПредстоящейОбязанности
			|ГДЕ
			|	ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.Уведомление = &Уведомление
			|	И ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.ПометкаУдаления <> &ПометкаУдаления";
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ДополнительныеСвойства.Вставить("СинхронизацияСостоянийУведомлений", Истина);
		ДокументОбъект.УстановитьПометкуУдаления(Уведомление.ПометкаУдаления);
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура СформироватьОперациюПоЕНСВТихомРежиме(Организация, АдресХранилищаТаблицыНалоги, ЗаписьКалендаря, ПериодСобытия, ВыполненоВТихомРежиме) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		ДокументОбъект = Документы.ОперацияПоЕдиномуНалоговомуСчету.СоздатьДокумент();
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов;
		ДокументОбъект.Организация = Организация;
		ДокументОбъект.Дата        = ОбщегоНазначения.ТекущаяДатаПользователя();
		
		ТаблицыЗаполнения = ПолучитьИзВременногоХранилища(АдресХранилищаТаблицыНалоги);
		ТаблицаНалоги = ТаблицыЗаполнения.ТаблицаНалоги;
		
		Если ЗначениеЗаполнено(ТаблицыЗаполнения.ТаблицаНалоги) Тогда
			ДокументОбъект.Налоги.Загрузить(ТаблицыЗаполнения.ТаблицаНалоги);
		КонецЕсли;
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаписьКалендаря",     ЗаписьКалендаря);
		ДокументОбъект.ДополнительныеСвойства.Вставить("ПериодСобытия", ПериодСобытия);
		
		МетаданныеДокумента = ДокументОбъект.Метаданные();
		
		БезОшибок = ДокументОбъект.ПроверитьЗаполнение();
		Если БезОшибок Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
	Исключение
		
		ШаблонСообщения = НСтр("ru = 'Не удалось провести документ %1
								|%2'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ДокументОбъект.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Отражение на едином налоговом счете'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.ОперацияПоЕдиномуНалоговомуСчету,, 
			ТекстСообщения);
	
		ОтменитьТранзакцию();
		Возврат;
	КонецПопытки;
	
	ВыполненоВТихомРежиме = Истина;
	
КонецПроцедуры

Процедура СформироватьПроводкиНачислениеНалогов(ТаблицаРеквизиты, ТаблицаНалоги, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНалоги)
		Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;	
	
	Параметры = ПодготовитьПараметрыНачислениеНалогов(ТаблицаРеквизиты, ТаблицаНалоги);
	
	Проводки  = Движения.Управленческий;
	Реквизиты = ТаблицаРеквизиты[0];
	
	СчетУчета = ПланыСчетов.Управленческий.ЕдиныйНалоговыйСчет;
	
	СодержаниеПроводки = НСтр("ru='Единый налоговый платеж (начисление):'", 
	ОбщегоНазначения.КодОсновногоЯзыка());
	
	РазделитьФиксированныеВзносыПоВидамПлатежа(Реквизиты, ТаблицаНалоги);
	
	Для Каждого СтрокаТаблицы Из ТаблицаНалоги Цикл
		
		Если СтрокаТаблицы.КорректировкаЕНС Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка             = Проводки.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СодержаниеПроводки;
		Если ЗначениеЗаполнено(СтрокаТаблицы.Налог) Тогда
			Проводка.Содержание = СтрШаблон(НСтр("ru='%1 %2'"),
			Проводка.Содержание,
			СокрЛП(Строка(СтрокаТаблицы.Налог)));
		КонецЕсли;
		Проводка.Сумма = СтрокаТаблицы.Сумма;
		
		Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
		Проводка.СчетКт = СчетУчета; 
		
		Проводка.СценарийПланирования = Справочники.СценарииПланирования.Фактический;
	КонецЦикла;
	
	Проводки.Записывать = Истина;
	
КонецПроцедуры 

Процедура ЗарегистрироватьЗачислениеНаЕдиныйНалоговыйСчет(ТаблицаРеквизиты, ТаблицаНалогов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНалогов)
		Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНалоги = ТаблицаНалогов.Скопировать();
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если Не УчетнаяПолитика.ПлательщикЕНП(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	ГоловнаяОрганизация = РегламентированнаяОтчетность.ГоловнаяОрганизация(Реквизиты.Организация);
	
	СуммаЕдиногоНалоговогоПлатежа = 0;
	Если ТаблицаНалоги.Колонки.Найти("СчетДт") <> Неопределено Тогда
		СчетУчета = ПланыСчетов.Управленческий.ЕдиныйНалоговыйСчет;
		Для Каждого СтрокаТаблицы Из ТаблицаНалоги Цикл
			Если СтрокаТаблицы.СчетДт = СчетУчета Тогда
				СуммаЕдиногоНалоговогоПлатежа = СуммаЕдиногоНалоговогоПлатежа + СтрокаТаблицы.СуммаРуб;
			КонецЕсли;
		КонецЦикла;
	Иначе
		СуммаЕдиногоНалоговогоПлатежа = СуммаПлатежаКВозврату(ТаблицаНалоги, ГоловнаяОрганизация, Реквизиты.Период);
	КонецЕсли;
	
	Если СуммаЕдиногоНалоговогоПлатежа = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРасчетов = Движения.РасчетыПоЕдиномуНалоговомуСчету.Выгрузить();
	НоваяСтрока = ТаблицаРасчетов.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
	НоваяСтрока.ГоловнаяОрганизация = ГоловнаяОрганизация;
	НоваяСтрока.Сумма               = СуммаЕдиногоНалоговогоПлатежа;
	НоваяСтрока.ВидДвижения         = ВидДвиженияНакопления.Приход;
	НоваяСтрока.ПлатежныйДокумент   = Реквизиты.Регистратор;
	СформироватьДвиженияНаЕдиномНалоговомСчете(ТаблицаРеквизиты, ТаблицаРасчетов, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьПараметрыНачислениеНалогов(ТаблицаРеквизитов, ТаблицаНалоги)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+"Регистратор,"					// <ДокументСсылка>
	+"Период,"						// <Дата>
	+"Организация";					// <СправочникСсылка.Организация>
	
	Параметры.Вставить("Реквизиты", ПрослеживаемостьПереопределяемый.ПолучитьТаблицуПараметровПроведения(
	ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.ТаблицаНалоги
	
	СписокОбязательныхКолонок = ""
	+"НомерСтроки,"					// <Число>
	+"РегистрацияВНалоговомОргане,"	// <СправочникСсылка.РегистрацииВНалоговомОргане>
	+"КодПоОКТМО,"					// <Строка, 11>
	+"Налог,"						// <СправочникСсылка.ВидыНалоговИПлатежейВБюджет>
	+"КодБК,"						// <Строка, 20>
	+"СрокУплаты,"					// <Дата>
	+"СчетУчета,"					// <ПланСчетовСсылка.Хозрасчетный>
	+"ВидДвижения,"					// <ВидДвиженияНакопления>
	+"КорректировкаЕНС,"			// <Булево>
	+"Сумма";						// <Число 15, 2>	
	
	Параметры.Вставить("ТаблицаНалоги", ПрослеживаемостьПереопределяемый.ПолучитьТаблицуПараметровПроведения(
	ТаблицаНалоги, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Процедура ПодготовитьТаблицуСписания(ТаблицаНалоги, ТаблицаУплаты, ИспользоватьПериодИсходныхОперации = Ложь)
	
	КолонкиСвертки = "ПлатежныйДокумент, Организация, ВидДвижения";
	Если ИспользоватьПериодИсходныхОперации Тогда
		КолонкиСвертки = КолонкиСвертки + ", Период";
	КонецЕсли;
	ТаблицаНалоги.Свернуть(КолонкиСвертки, "Сумма");
	ПлатежныеДокументы = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНалоги, "ПлатежныйДокумент", Истина);
	
	СтруктураОтбора = Новый Структура("ПлатежныйДокумент");
	Для Каждого ПлатежныйДокумент Из ПлатежныеДокументы Цикл
		СтруктураОтбора.ПлатежныйДокумент = ПлатежныйДокумент;
		СтрокиТаблицаНалоги = ТаблицаНалоги.НайтиСтроки(СтруктураОтбора);
		Если СтрокиТаблицаНалоги.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокиТаблицаУплаты = ТаблицаУплаты.НайтиСтроки(СтруктураОтбора);
		Если СтрокиТаблицаУплаты.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		ТекущаяОрганизация = СтрокиТаблицаУплаты[0].Организация;
		Для Каждого СтрокаТаблицыНалоги Из СтрокиТаблицаНалоги Цикл
			СтрокаТаблицыНалоги.Организация = ТекущаяОрганизация;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура РазделитьФиксированныеВзносыПоВидамПлатежа(Реквизиты, ТаблицаНалоги)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Налог", Справочники.ВидыНалогов.ПФРСтраховая);
	СтруктураПоиска.Вставить("Налог", Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники);
	СтруктураПоиска.Вставить("Налог", Справочники.ВидыНалогов.ТФОМС);
	СтруктураПоиска.Вставить("Налог", Справочники.ВидыНалогов.ФФОМС);
	
	МассивСтрок = ТаблицаНалоги.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФиксированныеСтраховыеВзносыКУплате = РегламентированнаяОтчетностьУСН.РассчитатьФиксированныеСтраховыеВзносы(Реквизиты.Период, Реквизиты.Организация);
	
	СуммаВзносаПФРКУплате = ФиксированныеСтраховыеВзносыКУплате.ПФР;
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		
		Если СтрокаТаблицы.Сумма > СуммаВзносаПФРКУплате Тогда
			
			Сумма = СтрокаТаблицы.Сумма;
			
			СтрокаТаблицы.Сумма = СуммаВзносаПФРКУплате;
			
			НоваяСтрока = ТаблицаНалоги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Сумма = Сумма - СуммаВзносаПФРКУплате;
			
			СуммаВзносаПФРКУплате = 0;
			
		Иначе
			
			СуммаВзносаПФРКУплате = СуммаВзносаПФРКУплате - СтрокаТаблицы.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияУСН(ТаблицаРеквизиты, Движения)
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты.ТаблицаУплатыПоЕдиномуНалоговомуСчету)
		Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты.Реквизиты[0];
	
	ДокументФормирования = РегламентированнаяОтчетностьУСН.ПолучитьДокументЗаписейУСНВПериодеПоВиду(
	Реквизиты.Организация,
	КонецКвартала(Реквизиты.Регистратор.Дата),
	Перечисления.ВидыЗаписейФормированийКУДиР.РасходыЕНП, Реквизиты.Регистратор);
	
	ТаблицаУплаты = ТаблицаРеквизиты.ТаблицаУплатыПоЕдиномуНалоговомуСчету;
	
	// оплаты УСН  не могут признаваться
	ВидыВзаиморасчетовУСН = Новый СписокЗначений;
	ВидыВзаиморасчетовУСН.Добавить(Справочники.ВидыНалогов.ЕдиныйНалогПриУСН);
	ВидыВзаиморасчетовУСН.Добавить(Справочники.ВидыНалогов.АвансовыйПлатежПриУСН);
	ВидыВзаиморасчетовУСН.Добавить(Справочники.ВидыНалогов.ЕдиныйНалогПриУСНРасходы);
	ВидыВзаиморасчетовУСН.Добавить(Справочники.ВидыНалогов.АвансовыйПлатежПриУСНРасходы);

	Построитель = Новый ПостроительЗапроса;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаУплаты);
	
	тОтбор = Построитель.Отбор.Добавить("Налог");
	тОтбор.ВидСравнения = ВидСравнения.НеВСписке;
	тОтбор.Значение = ВидыВзаиморасчетовУСН;
	тОтбор.Использование = Истина;
	
	Построитель.Выполнить();
	ТаблицаУплаты = Построитель.Результат.Выгрузить();	
	
	ТаблицаУплаты.Свернуть("ПлатежныйДокумент, СрокУплаты", "Сумма");
	
	СрокПоЕНП = РегламентированнаяОтчетностьУСН.ОпределитьСрокПлатежаПоЕНП(Реквизиты.Регистратор.Дата);
	
	Если ДокументФормирования = Неопределено И ТаблицаУплаты.Количество() > 0 Тогда
		ДокументФормирования = Документы.ЗаписиУСН.СоздатьДокумент();
		ДокументФормирования.Дата = КонецКвартала(Реквизиты.Регистратор.Дата);   
		ДокументФормирования.ДокументОснование = Реквизиты.Регистратор;
		ДокументФормирования.Организация = Реквизиты.Организация;
		ДокументФормирования.ВидЗаписей = Перечисления.ВидыЗаписейФормированийКУДиР.РасходыЕНП;
	КонецЕсли;
	
	Если ДокументФормирования <> Неопределено Тогда
		ДокументФормирования.ЗаписиКУДиР.Очистить();		
	КонецЕсли;
	          
	Для Каждого СтрокаТаблицы Из ТаблицаУплаты Цикл		
		
		ЭтоОтрицательноеУвдомление = Тип("ДокументСсылка.УведомлениеОбИсчисленныхСуммахНалогов") = ТипЗнч(СтрокаТаблицы.ПлатежныйДокумент)
			И СтрокаТаблицы.ПлатежныйДокумент.СуммаДокумента < 0;
		
		Если ЭтоОтрицательноеУвдомление
			ИЛИ СтрокаТаблицы.ПлатежныйДокумент.УчитыватьВНУ Тогда
			                                    
		НоваяСтрока = ДокументФормирования.ЗаписиКУДиР.Добавить();
		Если ЭтоОтрицательноеУвдомление ИЛИ
			СтрокаТаблицы.ПлатежныйДокумент.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Налоги Тогда
			НоваяСтрока.Содержание = НСтр("ru = 'Расход наличных денежных средств на уплату налогов'");
		ИначеЕсли СтрокаТаблицы.ПлатежныйДокумент.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее 
			ИЛИ СтрокаТаблицы.ПлатежныйДокумент.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты
			ИЛИ СтрокаТаблицы.ПлатежныйДокумент.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НаРасходы Тогда
			НоваяСтрока.Содержание =  НСтр("ru = 'Расход наличных денежных средств по прочим операциям'");
		ИначеЕсли СтрокаТаблицы.ПлатежныйДокумент.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги Тогда
			НоваяСтрока.Содержание = НСтр("ru = 'Расход безналичных денежных средств на уплату налогов'");
		ИначеЕсли СтрокаТаблицы.ПлатежныйДокумент.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Прочее
			ИЛИ СтрокаТаблицы.ПлатежныйДокумент.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты
			ИЛИ СтрокаТаблицы.ПлатежныйДокумент.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НаРасходы Тогда
			НоваяСтрока.Содержание = НСтр("ru = 'Расход безналичных денежных средств по прочим операциям'");
		ИначеЕсли СтрокаТаблицы.ПлатежныйДокумент.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.КомиссияБанка Тогда
			НоваяСтрока.Содержание = НСтр("ru = 'Расходы, связанные с оплатой услуг, оказываемых кредитными организациями'");
		ИначеЕсли СтрокаТаблицы.ПлатежныйДокумент.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Налоги Тогда
			НоваяСтрока.Содержание = НСтр("ru = 'Возврат излишне уплаченных налогов'");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.РасходБаза = СтрокаТаблицы.Сумма;
		НоваяСтрока.РасходВсего = СтрокаТаблицы.Сумма;
		НоваяСтрока.ДатаПервичногоДокумента = СрокПоЕНП;
		НоваяСтрока.ПервичныйДокумент = СтрокаТаблицы.ПлатежныйДокумент;
		НоваяСтрока.НомерПервичногоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаТаблицы.ПлатежныйДокумент.Номер, Истина, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДокументФормирования <> Неопределено Тогда
		ДокументФормирования.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли; 
	
КонецПроцедуры

Процедура СформироватьДвиженияРасчетыПоНалогам(ТаблицаРеквизиты, Движения);	
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты.ТаблицаУплатыПоЕдиномуНалоговомуСчету)
		Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты.Реквизиты[0];
	НаборДвижений = Движения.РасчетыПоНалогам;
	
	Для Каждого СтрокаТаблицы Из ТаблицаРеквизиты.ТаблицаУплатыПоЕдиномуНалоговомуСчету Цикл
		НоваяСтрока = НаборДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);  
		Если Тип("ДокументСсылка.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности") = ТипЗнч(Реквизиты.Регистратор) Тогда
			НоваяСтрока.СрокУплаты = КонецКвартала(Реквизиты.Регистратор.Дата); 			
		КонецЕсли;		
		НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
		НоваяСтрока.Организация = Реквизиты.Организация;
		НоваяСтрока.ВидНалога = СтрокаТаблицы.Налог; 
		НоваяСтрока.СодержаниеПроводки = НСтр("ru = 'Оплата налога'");
		НоваяСтрока.Активность  = Истина;
	КонецЦикла;
	
	НаборДвижений.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияНДФЛРасчетыНалоговыхАгентовСБюджетом(ТаблицаРеквизиты, Движения);	
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты.ТаблицаУплатыПоЕдиномуНалоговомуСчету)
		Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРеквизитов = ТаблицаРеквизиты.Реквизиты[0];
	ТаблицаПоНДФЛ = Движения.НДФЛРасчетыНалоговыхАгентовСБюджетом;
	Для Каждого СтрокаТаблицы Из ТаблицаРеквизиты.ТаблицаУплатыПоЕдиномуНалоговомуСчету Цикл 
		ЭтоНДФЛ = СтрокаТаблицы.Налог = Справочники.ВидыНалогов.НДФЛДоходыСвышеПредельнойВеличины ИЛИ
		СтрокаТаблицы.Налог = Справочники.ВидыНалогов.НДФЛСотрудники;
		
		Если ЭтоНДФЛ Тогда
			Для Каждого СтрокаНалога Из СтрокаТаблицы.ТаблицаУплатыПоНалогам Цикл
				ТаблицаРеквизитов.СчетУчета         = СтрокаТаблицы.СчетУчета;
				ТаблицаРеквизитов.ПлатежныйДокумент = СтрокаТаблицы.ПлатежныйДокумент; 		
				РасчетПоПрогрессивнойШкале = ПолучитьФункциональнуюОпцию("ВыполнятьРасчетНДФЛПоПрогрессивнойШкалеУНФ") 
				И СтрокаНалога.НалоговыйПериод > УчетНДФЛПредпринимателяКлиентСервер.ДатаНачалаПрогрессивнойШкалы()
				И СтрокаТаблицы.Налог = Справочники.ВидыНалогов.НДФЛДоходыСвышеПредельнойВеличины;
				
				Если РасчетПоПрогрессивнойШкале Тогда
					СтрокиРаспределения = СотрудникиУНФ.РаспределитьПеречисленныйНалогПоФизическимЛицамСПревышения(ТаблицаРеквизитов.ПлатежныйДокумент, ТаблицаРеквизитов.ПлатежныйДокумент.Организация,СтрокаНалога.Период, СтрокаНалога.СуммаРуб, СтрокаНалога.НалоговыйПериод);
				Иначе
					СтрокиРаспределения = СотрудникиУНФ.РаспределитьПеречисленныйНалогПоФизическимЛицам(ТаблицаРеквизитов.ПлатежныйДокумент, ТаблицаРеквизитов.ПлатежныйДокумент.Организация,СтрокаНалога.Период , СтрокаНалога.СуммаРуб, СтрокаНалога.НалоговыйПериод);
				КонецЕсли; 
				
				Для Каждого СтрокаТЗ Из СтрокиРаспределения Цикл
					НоваяСтрока = ТаблицаПоНДФЛ.Добавить();
					//ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНалога, ,"Сумма");
					НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
					НоваяСтрока.Период = СтрокаНалога.Период; 
					НоваяСтрока.ПериодРегистрации = СтрокаНалога.НалоговыйПериод;
					НоваяСтрока.Регистратор = ТаблицаРеквизитов.Регистратор;
					НоваяСтрока.Организация = ТаблицаРеквизитов.Организация;
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли; 
		
		
	КонецЦикла;
	
	ТаблицаПоНДФЛ.Записывать = Истина;
	
КонецПроцедуры  

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьРасчетыСФондамиПоСтраховымВзносам(ТаблицаРеквизиты, Движения)
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты.ТаблицаУплатыПоЕдиномуНалоговомуСчету)
		Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРеквизитов = ТаблицаРеквизиты.Реквизиты[0];
	ТаблицаПоВзносам = Движения.РасчетыСФондамиПоСтраховымВзносамУНФ;
	ТЗПоВзносам = ТаблицаРеквизиты.ТаблицаУплатыПоЕдиномуНалоговомуСчету.Скопировать();
	
	СтраховыеВидыВзаиморасчетов = Новый СписокЗначений;
	СтраховыеВидыВзаиморасчетов.Добавить(Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники);
	СтраховыеВидыВзаиморасчетов.Добавить(Справочники.ВидыНалогов.ПФРСтраховаяСотрудники);
	СтраховыеВидыВзаиморасчетов.Добавить(Справочники.ВидыНалогов.ФОМССотрудники);
	СтраховыеВидыВзаиморасчетов.Добавить(Справочники.ВидыНалогов.ФСССотрудники);
	СтраховыеВидыВзаиморасчетов.Добавить(Справочники.ВидыНалогов.ФССТравматизмСотрудники); 
	СтраховыеВидыВзаиморасчетов.Добавить(Справочники.ВидыНалогов.СтраховыеВзносыЕдиныйТариф);
	
	ВидыОбязательногоСтрахованияСотрудников = СооответсвияВидовНалоговВидуОбязательногоСтрахованияСотрудников();
	
	Построитель = Новый ПостроительЗапроса;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТЗПоВзносам);
	
	тОтбор = Построитель.Отбор.Добавить("Налог");
	тОтбор.ВидСравнения = ВидСравнения.ВСписке;
	тОтбор.Значение = СтраховыеВидыВзаиморасчетов;
	тОтбор.Использование = Истина;
	
	Построитель.Выполнить();
	ТЗПоВзносам = Построитель.Результат.Выгрузить(); 
	
	ПараметрыОтбора = Новый Структура; 	
 
	ТаблицаПоВзносам = Движения.РасчетыСФондамиПоСтраховымВзносамУНФ;
	
	Для Каждого СтрокаВзносов Из ТЗПоВзносам Цикл  
		ТаблицаРеквизитов.СчетУчета         = СтрокаВзносов.СчетУчета;
		ТаблицаРеквизитов.ПлатежныйДокумент = СтрокаВзносов.ПлатежныйДокумент; 
		//Для Каждого СтрокаНалога Из СтрокаВзносов.ТаблицаУплатыПоНалогам Цикл 
		СтрокиРаспределения = СотрудникиУНФ.РаспределитьПеречисленныйВзносПоФизическимЛицам(ТаблицаРеквизитов.ПлатежныйДокумент, 
		ТаблицаРеквизитов.ПлатежныйДокумент.Организация,ТаблицаРеквизитов.ПлатежныйДокумент.Дата , СтрокаВзносов.Сумма, ВидыОбязательногоСтрахованияСотрудников[СтрокаВзносов.Налог]);
		Для Каждого СтрокаТЗ Из СтрокиРаспределения Цикл
			НоваяСтрока = ТаблицаПоВзносам.Добавить();
			НоваяСтрока.Период = ТаблицаРеквизитов.ПлатежныйДокумент.Дата;
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
			НоваяСтрока.Регистратор = ТаблицаРеквизитов.ПлатежныйДокумент;
			НоваяСтрока.Организация = ТаблицаРеквизитов.Организация; 
			НоваяСтрока.ВидОбязательногоСтрахованияСотрудников = ВидыОбязательногоСтрахованияСотрудников[СтрокаВзносов.Налог];
			НоваяСтрока.ЭтоСтраховыеВзносы = Истина;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВзносов, , "Сумма");
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		КонецЦикла;
		
		//КонецЦикла;
	КонецЦикла; 
	
	ТаблицаПоВзносам.Записывать = Истина;
	
КонецПроцедуры // СформироватьРасчетыСФондамиПоСтраховымВзносам()	

Функция ПодготовитьПараметрыПеречисленияНалоговИВзносовСФОТ(ТаблицаРеквизиты, ТаблицыУплатаНалогов, ДополнятьРеквизитамиПервичногоДокумента)
	
	Перем ТаблицаПеречислениеНалогов, ТаблицаПеречислениеНДФЛ;
	
	ТаблицыУплатаНалогов.Свойство("ПеречислениеНалогов", ТаблицаПеречислениеНалогов);
	ТаблицыУплатаНалогов.Свойство("ПеречислениеНДФЛ",    ТаблицаПеречислениеНДФЛ);
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата> - период движений - дата документа
	+ "Регистратор,"               // <ДокументСсылка>
	+ "ВидОперации,"               // <ПеречислениеСсылка.ВидыОперацийСписаниеДенежныхСредств>
	+ "ДатаВходящегоДокумента,"    // <Дата> - дата платежного поручения
	+ "НомерВходящегоДокумента,"   // Строка
	+ "Организация";               // <СправочникСсылка.Организации>
	
	
	Параметры.Вставить("Реквизиты", ПрослеживаемостьПереопределяемый.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.ТаблицаПеречислениеНалогов
	
	СписокОбязательныхКолонок = ""
	+ "НалоговыйПериод,"             // <Дата> - период за который отражена уплата налога
	+ "Период,"                      // <Дата> - период движений - дата документа
	+ "СчетДт,"                      // <ПланСчетовСсылка.Хозрасчетный> - счет учета налогов и взносов с ФОТ
	+ "Налог,"                 // <СправочникСсылка.ВидыНалогов>
	+ "РегистрацияВНалоговомОргане," // <СправочникСсылка.РегистрацииВНалоговомОргане>
	+ "СуммаРуб";                    // <Число,15,2> - сумма налога, взноса
	Если Не ДополнятьРеквизитамиПервичногоДокумента Тогда
		СписокОбязательныхКолонок = СписокОбязательныхКолонок + ","
		+ "ПлатежноеПоручениеНомер," // <Строка> - Номер платежного документа
		+ "ПлатежноеПоручениеДата";  // <Дата> - дата платежного документа
	КонецЕсли;
	
	Параметры.Вставить("ТаблицаПеречислениеНалогов", ПрослеживаемостьПереопределяемый.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПеречислениеНалогов, СписокОбязательныхКолонок));
	
	Если ТаблицаПеречислениеНДФЛ <> Неопределено Тогда
		// Подготовка таблицы Параметры.ТаблицаПеречислениеНДФЛ
		
		СписокОбязательныхКолонок = ""
		+ "ФизическоеЛицо,"                       // <СправочникСсылка.ФизическиеЛица>
		+ "Сумма,"                                // <Число,15,2> - сумма налога, взноса
		+ "Ставка,"                               // <ПеречислениеСсылка.НДФЛСтавки>
		+ "ИсчисленоПоДивидендам,"                // Булево
		+ "ВключатьВДекларациюПоНалогуНаПрибыль," // Булево
		+ "МесяцНалоговогоПериода";               // Дата
		
		Параметры.Вставить("ТаблицаПеречислениеНДФЛ", ПрослеживаемостьПереопределяемый.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПеречислениеНДФЛ, СписокОбязательныхКолонок));
	Иначе
		Параметры.Вставить("ТаблицаПеречислениеНДФЛ", Неопределено);
	КонецЕсли;
	
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияПоНалогамИВзносамСФОТ(ТаблицаРеквизиты, ТаблицыУплатаНалогов, Движения, Отказ) Экспорт

	Если (Не ТаблицыУплатаНалогов.Свойство("ПеречислениеНалогов")
	 Или Не ЗначениеЗаполнено(ТаблицыУплатаНалогов.ПеречислениеНалогов))
	 И (Не ТаблицыУплатаНалогов.Свойство("ТаблицаУплатыПоЕдиномуНалоговомуСчету")
		Или Не ЗначениеЗаполнено(ТаблицыУплатаНалогов.ТаблицаУплатыПоЕдиномуНалоговомуСчету)) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийРасходСоСчета.Налоги
		И Реквизиты.ВидОперации <> Перечисления.ВидыОперацийРасходИзКассы.Налоги
		И НЕ Реквизиты.ЗачетАвансаПоЕдиномуНалоговомуСчету Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицыУплатаНалогов.Свойство("ТаблицаУплатыПоЕдиномуНалоговомуСчету")
		И ЗначениеЗаполнено(ТаблицыУплатаНалогов.ТаблицаУплатыПоЕдиномуНалоговомуСчету) Тогда
		
		Налоги = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицыУплатаНалогов.ТаблицаУплатыПоЕдиномуНалоговомуСчету, "Налог", Истина);
		
		Если Налоги.Найти(Справочники.ВидыНалогов.НДФЛСотрудники) <> Неопределено
			Или Налоги.Найти(Справочники.ВидыНалогов.НДФЛДоходыСвышеПредельнойВеличины) <> Неопределено Тогда
			ОчиститьДвиженияПередОтражениемУплатыНДФЛ(Движения);
		КонецЕсли;
		
		Для Каждого Налог Из Налоги Цикл
			ПеречислениеНалогов = ЕдиныйНалоговыйСчет.ТаблицаРасшифровкиПлатежа();
			ПеречислениеНалогов.Колонки.Добавить("ПлатежноеПоручениеНомер");
			ПеречислениеНалогов.Колонки.Добавить("ПлатежноеПоручениеДата");
			Для Каждого СтрокаТаблицы Из ТаблицыУплатаНалогов.ТаблицаУплатыПоЕдиномуНалоговомуСчету Цикл
				Если СтрокаТаблицы.Налог <> Налог Тогда
					Продолжить;
				КонецЕсли;
				Для Каждого СтрокаТаблицыНалогов Из СтрокаТаблицы.ТаблицаУплатыПоНалогам Цикл
					НоваяСтрока = ПеречислениеНалогов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыНалогов);
					НоваяСтрока.ПлатежноеПоручениеНомер = СтрокаТаблицы.НомерВходящегоДокумента;
					НоваяСтрока.ПлатежноеПоручениеДата  = СтрокаТаблицы.ДатаВходящегоДокумента;
				КонецЦикла;
			КонецЦикла;
			ТаблицыУплатаНалогов.Вставить("ПеречислениеНалогов", ПеречислениеНалогов);
			ПеречисленныйНалог = ТаблицыУплатаНалогов.ПеречислениеНалогов.Итог("СуммаРуб");
			Если ПеречисленныйНалог = 0 Тогда
				Продолжить;
			КонецЕсли;
			СформироватьДвиженияПоНалогамИВзносамСФОТПоТаблицам(ТаблицаРеквизиты, ТаблицыУплатаНалогов, Движения, Отказ, Ложь);
		КонецЦикла;
	Иначе
		ПеречисленныйНалог = ТаблицыУплатаНалогов.ПеречислениеНалогов.Итог("СуммаРуб");
		Если ПеречисленныйНалог = 0 Тогда
			Возврат;
		КонецЕсли;
		СформироватьДвиженияПоНалогамИВзносамСФОТПоТаблицам(ТаблицаРеквизиты, ТаблицыУплатаНалогов, Движения, Отказ, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоНалогамИВзносамСФОТПоТаблицам(ТаблицаРеквизиты, ТаблицыУплатаНалогов, Движения, Отказ, ДополнятьРеквизитамиПервичногоДокумента)
	
	Параметры = ПодготовитьПараметрыПеречисленияНалоговИВзносовСФОТ(ТаблицаРеквизиты, ТаблицыУплатаНалогов, ДополнятьРеквизитамиПервичногоДокумента);
	Реквизиты = Параметры.Реквизиты[0];
	
	ТаблицаПеречислениеНалогов = Параметры.ТаблицаПеречислениеНалогов.Скопировать();
	
	ВидыОбязательногоСтрахованияСотрудников = СооответсвияВидовНалоговВидуОбязательногоСтрахованияСотрудников();
	
	ТаблицаПеречислениеНалогов.Колонки.Добавить("ВидОбязательногоСтрахованияСотрудников");
	ТаблицаПеречислениеНалогов.Колонки.Добавить("ЭтоСтраховыеВзносы");
	ТаблицаПеречислениеНалогов.Колонки.Добавить("ВидДвижения");
	
	Если ДополнятьРеквизитамиПервичногоДокумента Тогда
		ТаблицаПеречислениеНалогов.Колонки.Добавить("ПлатежноеПоручениеНомер");
		ТаблицаПеречислениеНалогов.Колонки.Добавить("ПлатежноеПоручениеДата");
		ТаблицаПеречислениеНалогов.ЗаполнитьЗначения(Реквизиты.НомерВходящегоДокумента, "ПлатежноеПоручениеНомер");
		ТаблицаПеречислениеНалогов.ЗаполнитьЗначения(Реквизиты.ДатаВходящегоДокумента,  "ПлатежноеПоручениеДата");
	КонецЕсли;
	
	ТаблицаПеречислениеНалогов.Колонки.СуммаРуб.Имя = "Сумма";
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаПеречислениеНалогов Цикл
		
		ВидОбязательногоСтрахованияСотрудников = ВидыОбязательногоСтрахованияСотрудников[СтрокаТаблицы.Налог];
		
		Если ЗначениеЗаполнено(ВидОбязательногоСтрахованияСотрудников) Тогда
		СтрокаТаблицы.ВидОбязательногоСтрахованияСотрудников = ВидОбязательногоСтрахованияСотрудников;
		СтрокаТаблицы.ЭтоСтраховыеВзносы = Истина;
		СтрокаТаблицы.ВидДвижения = ВидДвиженияНакопления.Расход;
		КонецЕсли;
	КонецЦикла;
	
	МассивНазначенийПлатежа = Новый Массив;
	МассивНазначенийПлатежа.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	МассивНазначенийПлатежа.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогСам);
	МассивНазначенийПлатежа.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
			
	Если ТаблицаПеречислениеНалогов[0].Налог = Справочники.ВидыНалогов.НДФЛСотрудники
		ИЛИ ТаблицаПеречислениеНалогов[0].Налог = Справочники.ВидыНалогов.НДФЛДоходыСвышеПредельнойВеличины Тогда
		
		МесяцНалоговогоПериода = ТаблицаПеречислениеНалогов[0].НалоговыйПериод;
		Если НЕ ЗначениеЗаполнено(МесяцНалоговогоПериода) Тогда
			Возврат;
		КонецЕсли;
		
		РегистрацияВНалоговомОргане = РегламентированнаяОтчетностьУСН.ПолучитьРегистрациюВИФНС(Реквизиты.Организация);
		
		ТаблицаПеречислениеНалогов.Колонки.НалоговыйПериод.Имя = "МесяцНалоговогоПериода";
		// НДФЛ
		
		ФизическиеЛица = Новый Массив;
		Если Параметры.ТаблицаПеречислениеНДФЛ <> Неопределено Тогда
			ФизическиеЛица = Параметры.ТаблицаПеречислениеНДФЛ.ВыгрузитьКолонку("ФизическоеЛицо");
		КонецЕсли;
		
		Ставка = ?( ТаблицаПеречислениеНалогов[0].Налог = Справочники.ВидыНалогов.НДФЛДоходыСвышеПредельнойВеличины,
			СтавкаНДФЛСПревышения(),
			Неопределено);
			
		Если ФизическиеЛица.Количество() = 0 Тогда
			МассивРегистраций = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПеречислениеНалогов, "РегистрацияВНалоговоморгане", Истина);
			Для Каждого ЗначениеМассива Из МассивРегистраций Цикл
				ТаблицаПеречислениеНалоговПоРегистрации = ТаблицаПеречислениеНалогов.Скопировать(Новый Структура("РегистрацияВНалоговоморгане", ЗначениеМассива));
				УчетНДФЛ.СформироватьПеречисленныйНалог(
					Реквизиты.Регистратор, Движения, Отказ, Реквизиты.Организация, Реквизиты.Период,
					ТаблицаПеречислениеНалоговПоРегистрации, ,
					?(ЗначениеЗаполнено(ЗначениеМассива), ЗначениеМассива, РегистрацияВНалоговомОргане), Год(Реквизиты.Период) > 2014,
					Ставка);
			КонецЦикла;
		Иначе
			
			ВТПеречислениеНДФЛ = СформироватьВременнуюТаблицуПеречислениеНДФЛ(Параметры.ТаблицаПеречислениеНДФЛ, МесяцНалоговогоПериода, РегистрацияВНалоговомОргане,
				Реквизиты.ДатаВходящегоДокумента, Реквизиты.НомерВходящегоДокумента);
			
			УчетНДФЛ.СформироватьПеречисленныйНалогПоВременнойТаблице(Движения, Отказ, Реквизиты.Организация, Реквизиты.Период, ВТПеречислениеНДФЛ);
			
			СтрокаДанных = Новый Структура;
			Для Каждого Колонка ИЗ ТаблицаПеречислениеНалогов.Колонки Цикл
				СтрокаДанных.Вставить(Колонка.Имя);
			КонецЦикла;
			ЗаполнитьЗначенияСвойств(СтрокаДанных, ТаблицаПеречислениеНалогов[0]);
			СтрокаДанных.Сумма = ТаблицаПеречислениеНалогов.Итог("Сумма");
			
			РеквизитыПлатежногоПоручения = УчетНДФЛ.РеквизитыПлатежногоПорученияПоДатеНомеру(Реквизиты.ДатаВходящегоДокумента, Реквизиты.НомерВходящегоДокумента);
			
			СтрокаПриход = СтрокаУплатыНалоговогоАгента(Движения, Реквизиты.Организация, Реквизиты.Период, ВидДвиженияНакопления.Приход, СтрокаДанных, Ставка);
			СтрокаПриход.РеквизитыПлатежногоПоручения = РеквизитыПлатежногоПоручения;
			СтрокаПриход.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
			СтрокаПриход.ДатаПлатежа = Реквизиты.Период;
			
			СтрокаРасход = СтрокаУплатыНалоговогоАгента(Движения, Реквизиты.Организация, Реквизиты.Период, ВидДвиженияНакопления.Расход, СтрокаДанных, Ставка);
			СтрокаРасход.РеквизитыПлатежногоПоручения = РеквизитыПлатежногоПоручения;
			СтрокаРасход.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
			СтрокаРасход.ДатаПлатежа = Реквизиты.Период;
			
			Движения.УплатаНДФЛНалоговымиАгентамиКРаспределению.Записывать = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ВидыОбязательногоСтрахованияСотрудников.Получить(ТаблицаПеречислениеНалогов[0].Налог) <> Неопределено Тогда 
		
		МассивНазначенийПлатежа.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НеПринято);
		
		//Взносы
		УчетСтраховыхВзносов.СформироватьУплатуВзносовВФонд(Движения, Отказ, Реквизиты.Организация, ТаблицаПеречислениеНалогов);
		
	КонецЕсли;
	
КонецПроцедуры 

Функция СформироватьВременнуюТаблицуПеречислениеНДФЛ(ТаблицаПеречислениеНДФЛ, МесяцНалоговогоПериода, РегистрацияВНалоговомОргане,
			ПлатежноеПоручениеДата, ПлатежноеПоручениеНомер)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаПеречислениеНДФЛ",      ТаблицаПеречислениеНДФЛ);
	Запрос.УстановитьПараметр("МесяцНалоговогоПериода",       МесяцНалоговогоПериода);
	Запрос.УстановитьПараметр("РеквизитыПлатежногоПоручения", УчетНДФЛ.РеквизитыПлатежногоПорученияПоДатеНомеру(ПлатежноеПоручениеДата, ПлатежноеПоручениеНомер));
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане",  ?(РегистрацияВНалоговомОргане = Неопределено, Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка(), РегистрацияВНалоговомОргане));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПеречислениеНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаПеречислениеНДФЛ.Сумма КАК Сумма,
	|	ТаблицаПеречислениеНДФЛ.Ставка КАК Ставка,
	|	ТаблицаПеречислениеНДФЛ.ИсчисленоПоДивидендам КАК ИсчисленоПоДивидендам,
	|	ТаблицаПеречислениеНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ТаблицаПеречислениеНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода
	|ПОМЕСТИТЬ ТаблицаПеречислениеНДФЛ
	|ИЗ
	|	&ТаблицаПеречислениеНДФЛ КАК ТаблицаПеречислениеНДФЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Налоги.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Налоги.Ставка КАК Ставка,
	|	ВЫБОР
	|		КОГДА Налоги.МесяцНалоговогоПериода = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &МесяцНалоговогоПериода
	|		ИНАЧЕ Налоги.МесяцНалоговогоПериода
	|	КОНЕЦ КАК МесяцНалоговогоПериода,
	|	Налоги.Сумма КАК Сумма,
	|	Налоги.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	Налоги.ИсчисленоПоДивидендам КАК ИсчисленоПоДивидендам,
	|	&РеквизитыПлатежногоПоручения КАК РеквизитыПлатежногоПоручения,
	|	&РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ВТНалогПеречисленный
	|ИЗ
	|	ТаблицаПеречислениеНДФЛ КАК Налоги";
	
	Результаты = Запрос.Выполнить();
	
	Возврат Запрос.МенеджерВременныхТаблиц;
	
КонецФункции

Функция СтрокаУплатыНалоговогоАгента(Движения, Организация, ДатаОперации, ВидДвижения, ДанныеДокумента, Ставка)
	
	НоваяСтрока = Движения.УплатаНДФЛНалоговымиАгентамиКРаспределению.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДокумента);
	НоваяСтрока.ВидДвижения = ВидДвижения;
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Ставка      = Ставка;
	НоваяСтрока.Период      = ДатаОперации;
	Если НоваяСтрока.МесяцНалоговогоПериода >= '20150101' Тогда
		НоваяСтрока.МесяцНалоговогоПериода = '00010101'
	КонецЕсли;
	
    Возврат НоваяСтрока
	
КонецФункции  

Функция СтавкаНДФЛСПревышения() Экспорт
	
	Возврат Перечисления.НДФЛСтавки.Ставка15;
	
КонецФункции

Процедура ОчиститьДвиженияПередОтражениемУплатыНДФЛ(Движения)
	
	ОчищаемыеРегистры = Новый Массив;
	ОчищаемыеРегистры.Добавить("НДФЛПеречисленный");
	ОчищаемыеРегистры.Добавить("РасчетыНалоговыхАгентовСБюджетомПоНДФЛ");
	ОчищаемыеРегистры.Добавить("УплатаНДФЛНалоговымиАгентамиКРаспределению");
	
	Для Каждого ИмяРегистра Из ОчищаемыеРегистры Цикл
		Если Движения.Найти(ИмяРегистра) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Движения[ИмяРегистра].Очистить();
		Движения[ИмяРегистра].Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция СооответсвияВидовНалоговВидуОбязательногоСтрахованияСотрудников() Экспорт
	
	ВидыОбязательногоСтрахованияСотрудников = Новый Соответствие;
	ВидыОбязательногоСтрахованияСотрудников.Вставить(Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники, Перечисления.ВидыОбязательногоСтрахованияСотрудниковУНФ.ПФРНакопительная); 
	ВидыОбязательногоСтрахованияСотрудников.Вставить(Справочники.ВидыНалогов.ПФРСтраховаяСотрудники, Перечисления.ВидыОбязательногоСтрахованияСотрудниковУНФ.ПФРПоСуммарномуТарифу);     
	ВидыОбязательногоСтрахованияСотрудников.Вставить(Справочники.ВидыНалогов.СтраховыеВзносыЕдиныйТариф, Перечисления.ВидыОбязательногоСтрахованияСотрудниковУНФ.ПФРПоСуммарномуТарифу);
	ВидыОбязательногоСтрахованияСотрудников.Вставить(Справочники.ВидыНалогов.ФОМССотрудники, Перечисления.ВидыОбязательногоСтрахованияСотрудниковУНФ.ФФОМС);
	ВидыОбязательногоСтрахованияСотрудников.Вставить(Справочники.ВидыНалогов.ФСССотрудники, Перечисления.ВидыОбязательногоСтрахованияСотрудниковУНФ.ФСС);
	ВидыОбязательногоСтрахованияСотрудников.Вставить(Справочники.ВидыНалогов.ФССТравматизмСотрудники, Перечисления.ВидыОбязательногоСтрахованияСотрудниковУНФ.ФССНесчастныеСлучаи);
	
	Возврат ВидыОбязательногоСтрахованияСотрудников;	
	
КонецФункции
	
Процедура РаспределитьОплатуПоДвижениямДокумента(ТаблицаСуммыЕдиногоНалоговогоПлатежа, ТаблицаРеквизиты, Движения, Отказ);
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	// Основные параметры алгоритма
	ВерсияАлгоритмаЗачетаУплат               = ВерсияАлгоритмаЗачетаУплат(Реквизиты.Период);
	ДействуетНоваяВерсияАлгоритмаЗачетаУплат = ВерсияАлгоритмаЗачетаУплат = 2;
	
	СуммыЕдиногоНалоговогоПлатежа = ТаблицаСуммыЕдиногоНалоговогоПлатежа.Скопировать();
	
	НаборДвиженийНалог = Движения.РасчетыПоНалогамНаЕдиномНалоговомСчете;
	
	УстановитьПривилегированныйРежим(Истина); 
	
	ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Организация, "ГоловнаяОрганизация");
	
	// Предварительно следует избавиться от налогов, которые уже оказались оплачены
	// В частности, это НДФЛ, введенный в учет ЕНС при начале эксперимента
	
	ТаблицаНалогов = Движения.РасчетыПоНалогамНаЕдиномНалоговомСчете.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",           ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Организация",                   Реквизиты.Организация);
	Запрос.УстановитьПараметр("ПериодОстатков",                Новый Граница(Реквизиты.Регистратор.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ПериодОплаты",                  НачалоДня(Реквизиты.Период));
	Запрос.УстановитьПараметр("ТаблицаНалогов",                ТаблицаНалогов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНалогов.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ТаблицаНалогов.КодПоОКТМО КАК КодПоОКТМО,
	|	ТаблицаНалогов.Налог КАК Налог,
	|	ТаблицаНалогов.КодБК КАК КодБК,
	|	ТаблицаНалогов.СчетУчета КАК СчетУчета,
	|	ТаблицаНалогов.СрокУплаты КАК СрокУплаты,
	|	ТаблицаНалогов.Организация КАК Организация,
	|	ТаблицаНалогов.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ТаблицаНалогов.Сумма КАК Сумма,
	|	ТаблицаНалогов.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_ТаблицаНалогов
	|ИЗ
	|	&ТаблицаНалогов КАК ТаблицаНалогов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	РегистрацияВНалоговомОргане,
	|	КодПоОКТМО,
	|	Налог,
	|	КодБК,
	|	СчетУчета,
	|	СрокУплаты,
	|	ГоловнаяОрганизация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Организация КАК Организация,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.КодПоОКТМО КАК КодПоОКТМО,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Налог КАК Налог,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.КодБК КАК КодБК,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СчетУчета КАК СчетУчета,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СрокУплаты КАК СрокУплаты,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СуммаОстаток КАК СуммаОстаток
	|ПОМЕСТИТЬ РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете.Остатки(
	|			&ПериодОстатков,
	|			ГоловнаяОрганизация = &ГоловнаяОрганизация
	|				И Организация = &Организация
	|				И СчетУчета В
	|					(ВЫБРАТЬ
	|						ВТ_ТаблицаНалогов.СчетУчета
	|					ИЗ
	|						ВТ_ТаблицаНалогов)) КАК РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СрокУплаты,
	|	ГоловнаяОрганизация,
	|	Налог,
	|	Организация,
	|	КодПоОКТМО,
	|	РегистрацияВНалоговомОргане,
	|	КодБК,
	|	СчетУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаНалогов.Организация КАК Организация,
	|	ВТ_ТаблицаНалогов.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВТ_ТаблицаНалогов.СчетУчета КАК СчетУчета,
	|	ВТ_ТаблицаНалогов.Налог КАК Налог,
	|	ВТ_ТаблицаНалогов.КодБК КАК КодБК,
	|	ВТ_ТаблицаНалогов.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВТ_ТаблицаНалогов.КодПоОКТМО КАК КодПоОКТМО,
	|	ВТ_ТаблицаНалогов.СрокУплаты КАК СрокУплаты,
	|	СУММА(ВТ_ТаблицаНалогов.Сумма + ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СуммаОстаток, 0) < 0
	|				ТОГДА РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Сумма,
	|	ЛОЖЬ КАК Недоимка,
	|	МАКСИМУМ(ВТ_ТаблицаНалогов.НомерСтроки) КАК НомерЗаписи,
	|	ИСТИНА КАК ЭтоНалог,
	|	2 КАК Приоритет
	|ИЗ
	|	ВТ_ТаблицаНалогов КАК ВТ_ТаблицаНалогов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки КАК РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки
	|		ПО ВТ_ТаблицаНалогов.ГоловнаяОрганизация = РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.ГоловнаяОрганизация
	|			И ВТ_ТаблицаНалогов.Организация = РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Организация
	|			И ВТ_ТаблицаНалогов.РегистрацияВНалоговомОргане = РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.РегистрацияВНалоговомОргане
	|			И ВТ_ТаблицаНалогов.КодПоОКТМО = РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.КодПоОКТМО
	|			И ВТ_ТаблицаНалогов.Налог = РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Налог
	|			И ВТ_ТаблицаНалогов.КодБК = РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.КодБК
	|			И ВТ_ТаблицаНалогов.СчетУчета = РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СчетУчета
	|			И ВТ_ТаблицаНалогов.СрокУплаты = РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СрокУплаты
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ВТ_ТаблицаНалогов.СрокУплаты, ДЕНЬ) <= &ПериодОплаты
	|	И ВТ_ТаблицаНалогов.Сумма + ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СуммаОстаток, 0) < 0
	|				ТОГДА РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаНалогов.КодБК,
	|	ВТ_ТаблицаНалогов.СчетУчета,
	|	ВТ_ТаблицаНалогов.СрокУплаты,
	|	ВТ_ТаблицаНалогов.ГоловнаяОрганизация,
	|	ВТ_ТаблицаНалогов.Организация,
	|	ВТ_ТаблицаНалогов.Налог,
	|	ВТ_ТаблицаНалогов.РегистрацияВНалоговомОргане,
	|	ВТ_ТаблицаНалогов.КодПоОКТМО";
	
	ОстаткиПоНалогам = Запрос.Выполнить().Выгрузить();
	ОстаткиПоНалогам.Индексы.Добавить("СрокУплаты");
	
	Если Не ДействуетНоваяВерсияАлгоритмаЗачетаУплат Тогда
		СрокиУплаты = ОстаткиПоНалогам.Скопировать(, "СрокУплаты");
		СрокиУплаты.Свернуть("СрокУплаты", );
		СрокиУплаты.Сортировать("СрокУплаты");
		РаспределениеСуммыОплатыПоСрокам(Реквизиты, СуммыЕдиногоНалоговогоПлатежа, ОстаткиПоНалогам, СрокиУплаты, НаборДвиженийНалог);
	Иначе
		РаспределениеСуммыОплатыПоСрокамИПриоритетамПогашения(Реквизиты, СуммыЕдиногоНалоговогоПлатежа, ОстаткиПоНалогам, НаборДвиженийНалог);
	КонецЕсли;
	
	ТаблицаНалоги = НаборДвиженийНалог.Выгрузить().Скопировать(Новый Структура("ВидДвижения",ВидДвиженияНакопления.Расход));
	
	СформироватьДвиженияНаЕдиномНалоговомСчете(ТаблицаРеквизиты, ТаблицаНалоги, Движения, Отказ);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Функция возвращает дату изменения алгоритма
// Возвращаемое значение:
//  Дата смены алгоритма - Дата
Функция ДатаСменыАлгоритмаЗачетаУплат() Экспорт
	
	Возврат Дата(2022,09,09);
	
КонецФункции

// Функция возвращает версию используемого алгоритма
// Параметры:
//  Дата - Дата проведения зачета.
// Возвращаемое значение:
//  Версия алгоритма - число
Функция ВерсияАлгоритмаЗачетаУплат(Дата) Экспорт
	
	Если Дата <= ДатаСменыАлгоритмаЗачетаУплат() Тогда
		// Зачет с даты самого первого документа оплаты
		Возврат 1;
	Иначе
		// Зачет в обратой последовательности с даты ближайшего документа оплаты
		Возврат 2;
	КонецЕсли;
	
КонецФункции  

// Функция возвращает таблицу остатков расчетов по единому налоговому счету по правилам НК.
//
// Параметры:
//  Организация    - СправочникСсылка.Организации - Организация для получения остатков
//  Дата           - Дата получения остатков.
//  ДокументСсылка - ДокументСсылк, если заполнен - остаток будет получен на момент времени документа
// Возвращаемое значение:
//  Таблица значений 
//     ПлатежныйДокумент - документ, которым зарегистрирована уплата
//     Сумма             - Сумма остатка по ЕНС в разрезе платежных документов
//
Функция ТаблицаОстатковНаЕдиномНалоговомСчете(Организация, Дата, ДокументСсылка = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СуммаОстаток = 0;
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		ПериодОстатков = Новый Граница(ДокументСсылка.МоментВремени(), ВидГраницы.Исключая);
	Иначе
		ПериодОстатков = Новый Граница(КонецДня(Дата), ВидГраницы.Включая);
	КонецЕсли;
	
	ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация");
	Организации         = ПрослеживаемостьПереопределяемый.ВсяОрганизация(ГоловнаяОрганизация);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Организации",         Организации);
	Запрос.УстановитьПараметр("ПериодОстатков",      ПериодОстатков);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетыПоЕдиномуНалоговомуСчетуОстатки.СуммаОстаток КАК СуммаОстаток,
	|	РасчетыПоЕдиномуНалоговомуСчетуОстатки.ПлатежныйДокумент КАК ПлатежныйДокумент,
	|	РасчетыПоЕдиномуНалоговомуСчетуОстатки.Организация КАК Организация,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_РасчетыПоЕдиномуНалоговомуСчетуОстатки
	|ИЗ
	|	РегистрНакопления.РасчетыПоЕдиномуНалоговомуСчету.Остатки(
	|			&ПериодОстатков,
	|			ГоловнаяОрганизация = &ГоловнаяОрганизация
	|				И Организация В (&Организации)) КАК РасчетыПоЕдиномуНалоговомуСчетуОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПлатежныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоЕдиномуНалоговомуСчетуОстатки.СуммаОстаток КАК Сумма,
	|	РасчетыПоЕдиномуНалоговомуСчетуОстатки.ПлатежныйДокумент КАК ПлатежныйДокумент,
	|	РасчетыПоЕдиномуНалоговомуСчетуОстатки.ПлатежныйДокумент.Дата КАК ДатаРегистратора,
	|	РасчетыПоЕдиномуНалоговомуСчетуОстатки.Организация КАК Организация,
	|	РасчетыПоЕдиномуНалоговомуСчетуОстатки.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ_РасчетыПоЕдиномуНалоговомуСчетуОстатки КАК РасчетыПоЕдиномуНалоговомуСчетуОстатки
	|ГДЕ
	|	РасчетыПоЕдиномуНалоговомуСчетуОстатки.СуммаОстаток > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаРегистратора,
	|	ПлатежныйДокумент";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьПараметрыЗачетаАвансаПоЕдиномуНалоговомуСчетуПоДвижениямДокумента(ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"            // <Дата>
	+ "Организация,"       // <СправочникСсылка.Организации>
	+ "Регистратор";       // <ДокументСсылка.*>
	
	Параметры.Вставить("Реквизиты",
	ПрослеживаемостьПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции 

Функция ПодготовитьПараметрыЗачетаАвансаПоЕдиномуНалоговомуСчетуПоЗаявлениеОЗачете(ТаблицаРеквизиты, ТаблицаНалоги)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"            // <Дата>
	+ "Организация,"       // <СправочникСсылка.Организации>  
	+ "Регистратор";       // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ПрослеживаемостьПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	// Подготовка таблицы Параметры.ТаблицаНалоги
	
	СписокОбязательныхКолонок = ""
	+"НомерСтроки,"					// <Число>
	+"РегистрацияВНалоговомОргане,"	// <СправочникСсылка.РегистрацииВНалоговомОргане>
	+"КодПоОКТМО,"					// <Строка, 11>
	+"Налог,"						// <СправочникСсылка.ВидыНалогов>
	+"КодБК,"						// <Строка, 20>
	+"СрокУплаты,"					// <Дата>
	+"СчетУчета,"					// <ПланСчетовСсылка.Управленческий>
	+"ВидДвижения,"					// <ВидДвиженияНакопления>
	+"Сумма";						// <Число 15, 2>
	
	Параметры.Вставить("ТаблицаНалоги", ПрослеживаемостьПереопределяемый.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНалоги, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Функция ПодготовитьПараметрыЗачетаАвансаПоЕдиномуНалоговомуСчетуПоОперацииЕНС(ТаблицаРеквизиты, ТаблицаНалоги)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"            // <Дата>
	+ "Организация,"       // <СправочникСсылка.Организации>
	+ "Регистратор";       // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ПрослеживаемостьПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	// Подготовка таблицы Параметры.ТаблицаНалоги
	
	СписокОбязательныхКолонок = ""
	+"НомерСтроки,"					// <Число>
	+"РегистрацияВНалоговомОргане,"	// <СправочникСсылка.РегистрацииВНалоговомОргане>
	+"КодПоОКТМО,"					// <Строка, 11>
	+"Налог,"						// <СправочникСсылка.ВидыНалоговИПлатежейВБюджет>
	+"КодБК,"						// <Строка, 20>
	+"СрокУплаты,"					// <Дата>
	+"СчетУчета,"					// <ПланСчетовСсылка.Хозрасчетный>
	+"ПлатежныйДокумент,"			// <ДокументСсылка>
	+"ВидДвижения,"					// <ВидДвиженияНакопления>
	+"КорректировкаЕНС,"			// <Булево>
	+"Сумма";						// <Число 15, 2>
	
	Параметры.Вставить("ТаблицаНалоги", ПрослеживаемостьПереопределяемый.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНалоги, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции


Функция ПодготовитьПараметрыЗачетаАвансаПоЕдиномуНалоговомуСчету(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"            // <Дата>
	+ "Организация,"       // <СправочникСсылка.Организации>
	+ "Регистратор";       // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ПрослеживаемостьПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Возвращает данные о сформированных уведомлениях
// 
// Параметры:
//  Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов, Массив
//  Организация - СправочникСсылка.Организации
//  ПериодСобытия - Дата
//
// Возвращаемое значение:
//  Уведомления - Структура - см. НовыйТаблицаПлатежи()
//
Функция ДанныеДляУведомлений(ЗаписьКалендаря, Организация, ПериодСобытия) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ЗаписьКалендаря",       ЗаписьКалендаря);
	Запрос.УстановитьПараметр("ПериодСобытия", ПериодСобытия);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачиБухгалтераУведомления.Уведомление КАК Уведомление,
	|	УведомлениеОбИсчисленныхСуммахНалогов.Дата КАК Дата,
	|	УведомлениеОбИсчисленныхСуммахНалогов.СуммаДокумента КАК Сумма
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтераУведомления КАК ЗадачиБухгалтераУведомления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УведомлениеОбИсчисленныхСуммахНалогов КАК УведомлениеОбИсчисленныхСуммахНалогов
	|		ПО ЗадачиБухгалтераУведомления.Уведомление = УведомлениеОбИсчисленныхСуммахНалогов.Ссылка
	|ГДЕ
	|	ЗадачиБухгалтераУведомления.Организация = &Организация
	|	И ЗадачиБухгалтераУведомления.ЗаписьКалендаря В(&ЗаписьКалендаря)
	|	И ЗадачиБухгалтераУведомления.ПериодСобытия = &ПериодСобытия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадачиБухгалтераУведомления.Уведомление,
	|	ОперацияПоЕдиномуНалоговомуСчету.Дата,
	|	ОперацияПоЕдиномуНалоговомуСчету.СуммаДокумента
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтераУведомления КАК ЗадачиБухгалтераУведомления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОперацияПоЕдиномуНалоговомуСчету КАК ОперацияПоЕдиномуНалоговомуСчету
	|		ПО ЗадачиБухгалтераУведомления.Уведомление = ОперацияПоЕдиномуНалоговомуСчету.Ссылка
	|ГДЕ
	|	ЗадачиБухгалтераУведомления.Организация = &Организация
	|	И ЗадачиБухгалтераУведомления.ЗаписьКалендаря В(&ЗаписьКалендаря)
	|	И ЗадачиБухгалтераУведомления.ПериодСобытия = &ПериодСобытия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадачиБухгалтераУведомления.Уведомление,
	|	ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.Дата,
	|	ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.СуммаДокумента
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтераУведомления КАК ЗадачиБухгалтераУведомления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности КАК ЗаявлениеОЗачетеВСчетПредстоящейОбязанности
	|		ПО ЗадачиБухгалтераУведомления.Уведомление = ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.Ссылка
	|ГДЕ
	|	ЗадачиБухгалтераУведомления.Организация = &Организация
	|	И ЗадачиБухгалтераУведомления.ЗаписьКалендаря В(&ЗаписьКалендаря)
	|	И ЗадачиБухгалтераУведомления.ПериодСобытия = &ПериодСобытия
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Уведомления = Запрос.Выполнить().Выгрузить();
	
	Возврат Уведомления;
	
КонецФункции

Процедура УправлениеФормойБлокУведомление(Форма,
										  ТребуетсяУведомление = Истина,
										  ИнформацияУведомление = Неопределено,
										  Разрядность = 0, 
										  ПодаетсяЗаявлениеОЗачете = Ложь) Экспорт
	Элементы      = Форма.Элементы;
	ПлательщикЕНП = Форма.ПлательщикЕНП;
	
	Если Элементы.Найти("ГруппаЗаявлениеОЗачете") <> Неопределено Тогда
		Элементы.ГруппаЗаявлениеОЗачете.Видимость = ПодаетсяЗаявлениеОЗачете;
		Элементы.ГруппаОплата.ОтображатьЗаголовок = Не ПодаетсяЗаявлениеОЗачете;
	КонецЕсли;
	
	ОтображатьЗаявленияЗаПериодПослеУплаты = Ложь;
	Если СтрНайти(Форма.ИмяФормы, "СтраховыеВзносыИП") Тогда
		ОтображатьЗаявленияЗаПериодПослеУплаты = Форма.СуммаКУплате = 0;
	КонецЕсли;

	
	ПодаетсяУведомлениеПоНалогуЗаПериод =
		Форма.ПодаетсяУведомлениеПоНалогуЗаПериод;
		
	Элементы.ГруппаУведомлениеОНалогах.Видимость = ПлательщикЕНП
	И Не ПодаетсяЗаявлениеОЗачете;
	
	Элементы.СтраницаРезультатВыполненияУведомление.Видимость = ПлательщикЕНП;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаУведомлениеОНалогахПустая",
		"Видимость",
		ПлательщикЕНП);
	
	Если Не ПлательщикЕНП Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПодаетсяУведомлениеПоНалогуЗаПериод Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			"ГруппаУведомлениеОНалогах",
			"Заголовок",
			НСтр("ru = 'Отражение в ЕНС'"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			"ДекорацияУведомление",
			"Заголовок",
			НСтр("ru = 'Отражение в ЕНС'"));
	КонецЕсли;
	
	Форма.УведомлениеОбИсчисленныхНалогахПодготовлено = Форма.УведомленияОбИсчисленныхНалогах.Количество() <> 0;
	Если ТребуетсяУведомление Тогда
		ТребуетсяУведомление = ПлательщикЕНП;
	КонецЕсли;
	
	КУдалению    = Новый Массив;
	Форма.ИтогПоУведомлениям = 0;
	
	Если ПодаетсяУведомлениеПоНалогуЗаПериод Тогда
		ТекстИнформацияУведомление = НСтр("ru = '• Подготовка уведомления'");
		Если ЗначениеЗаполнено(ИнформацияУведомление) Тогда
			ТекстИнформацияУведомление = ИнформацияУведомление;
		ИначеЕсли Не ТребуетсяУведомление Тогда
			ТекстИнформацияУведомление  = НСтр("ru = '• Нет сумм налога к уплате. Уведомление не требуется.'");
		КонецЕсли;
	Иначе
		Если СтрНайти(Форма.ИмяФормы, "Декларация") > 0 Тогда
				ТекстИнформацияУведомление = НСтр("ru = '• При отправке декларации формировать уведомление по исчисленным налогам не нужно,
														|но для корректного ведения расчетов по налогам нужно отразить их на едином налоговом счете.'");
		Иначе
			ТекстИнформацияУведомление = СтрШаблон(НСтр("ru = '• За %1 формировать уведомление по исчисленным налогам не нужно,
														|но для корректного ведения расчетов по налогам нужно отразить их на едином налоговом счете.'"),
											ПредставлениеПериода(НачалоМесяца(Форма.Объект.СобытиеКалендаря.ДатаНачалаДокументов), КонецМесяца(Форма.Объект.СобытиеКалендаря.ДатаОкончанияДокументов)));
		КонецЕсли;
		Если ЗначениеЗаполнено(ИнформацияУведомление) Тогда
			ТекстИнформацияУведомление = ИнформацияУведомление;
		ИначеЕсли Не ТребуетсяУведомление Тогда
			ТекстИнформацияУведомление  = НСтр("ru = '• Нет сумм налога к уплате. Отражать в ЕНС не требуется.'");
		КонецЕсли;
	КонецЕсли;
	Элементы.ВыполнитьДействиеСформироватьУведомление.Видимость   = ПодаетсяУведомлениеПоНалогуЗаПериод;
	Элементы.ВыполнитьДействиеСформироватьОперациюПоЕНС.Видимость = Не ПодаетсяУведомлениеПоНалогуЗаПериод;
	
	ТекстИнформацияУведомление = ТекстИнформацияУведомление;
	ШрифтИнформацияУведомление = Новый Шрифт(,,,Ложь);
	
	Элементы.ДекорацияИнформацияУведомление.Заголовок = Новый ФорматированнаяСтрока(
	ТекстИнформацияУведомление,
	ШрифтИнформацияУведомление);    
	
	Если ПодаетсяЗаявлениеОЗачете Тогда
		Элементы.СтраницыЗаявление.Видимость = ТребуетсяУведомление Или ОтображатьЗаявленияЗаПериодПослеУплаты;
	КонецЕсли;  
	
	Если Не ТребуетсяУведомление Тогда
		Элементы.СтраницыУведомление.Видимость = Ложь;
	Иначе
		Элементы.СтраницыУведомление.Видимость = Истина;
		
		Если Форма.УведомлениеОбИсчисленныхНалогахПодготовлено Тогда
			
			Элементы.СтраницаРезультатВыполненияУведомление.Видимость = Истина;
			Элементы.СтраницаВыполнитьДействиеУведомление.Видимость   = Ложь;
			Если ПодаетсяЗаявлениеОЗачете Тогда
				Элементы.СтраницаРезультатВыполненияЗаявление.Видимость = Истина;
				Элементы.СтраницаВыполнитьДействиеЗаявление.Видимость   = Истина;
			КонецЕсли;
			
			Для Каждого Уведомление Из Форма.УведомленияОбИсчисленныхНалогах Цикл
				Если ТипЗнч(Уведомление.Уведомление) = Тип("ДокументСсылка.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности") Тогда
					НомерКонтейнера = НомерКонтейнера(Уведомление.ПолучитьИдентификатор());
					Если Элементы.Найти("ОписаниеЗаявление" + НомерКонтейнера) = Неопределено Тогда
						КопироватьЭлементСПодчиненными(Форма, Элементы.ОписаниеЗаявление, Элементы.СтраницаРезультатВыполненияЗаявление, НомерКонтейнера); 
						КопироватьЭлементСПодчиненными(Форма, Элементы.ОписаниеЗаявлениеСуммы, Элементы.СтраницаРезультатВыполненияЗаявление, НомерКонтейнера);
					КонецЕсли;
					ОформитьСобытиеУведомление(Форма, Уведомление, НомерКонтейнера, Разрядность);
					Элементы["ОписаниеЗаявление" + НомерКонтейнера].Видимость = Истина;  
					Элементы["ОписаниеЗаявлениеСуммы" + НомерКонтейнера].Видимость = Истина
				Иначе
					НомерКонтейнера = НомерКонтейнера(Уведомление.ПолучитьИдентификатор());
					Если Элементы.Найти("ОписаниеУведомление" + НомерКонтейнера) = Неопределено Тогда
						КопироватьЭлементСПодчиненными(Форма, Элементы.ОписаниеУведомление, Элементы.СтраницаРезультатВыполненияУведомление, НомерКонтейнера);
						КопироватьЭлементСПодчиненными(Форма, Элементы.ОписаниеУведомлениеСуммы, Элементы.СтраницаРезультатВыполненияУведомление, НомерКонтейнера);
					КонецЕсли;
					ОформитьСобытиеУведомление(Форма, Уведомление, НомерКонтейнера, Разрядность);
					Элементы["ОписаниеУведомление" + НомерКонтейнера].Видимость = Истина;
					Элементы["ОписаниеУведомлениеСуммы" + НомерКонтейнера].Видимость = Истина;
				КонецЕсли;	
			КонецЦикла;
			
		Иначе
			
			Элементы.СтраницаРезультатВыполненияУведомление.Видимость = Ложь;
			Элементы.СтраницаВыполнитьДействиеУведомление.Видимость   = Истина;
			
			Если ПодаетсяЗаявлениеОЗачете Тогда
				Элементы.СтраницаРезультатВыполненияЗаявление.Видимость = Ложь;
				Элементы.СтраницаВыполнитьДействиеЗаявление.Видимость   = Истина;
			КонецЕсли;

			
		КонецЕсли;
		
	КонецЕсли;
	
	//Удалим лишние контейнеры
	Если ПодаетсяЗаявлениеОЗачете Тогда
		СтраницаРезультата = Элементы.СтраницаРезультатВыполненияЗаявление;
	Иначе
		СтраницаРезультата = Элементы.СтраницаРезультатВыполненияУведомление;
	КонецЕсли;
	Для Каждого Контейнер Из СтраницаРезультата.ПодчиненныеЭлементы Цикл
		Идентификатор = Идентификатор(Контейнер.Имя);
		Если Идентификатор = Неопределено Тогда
			// Это шаблон
			Продолжить;
		КонецЕсли;
		Если Форма.УведомленияОбИсчисленныхНалогах.НайтиПоИдентификатору(Идентификатор) = Неопределено Тогда
			КУдалению.Добавить(Контейнер);
		КонецЕсли;
	КонецЦикла;
	УдалитьНеиспользуемыеЭлементы(Форма, КУдалению);
	
	ФорматнаяСтрока = "ЧЦ=15; ЧН=";
	Если Разрядность <> 0 Тогда
		ФорматнаяСтрока = ФорматнаяСтрока + ";ЧДЦ=" + Разрядность; 
	КонецЕсли;
	//Итог по уплате
	Если Форма.УведомленияОбИсчисленныхНалогах.Количество() > 1 Тогда
		// Обеспечим контейнер для вывода итога, для которго установим числовой идентификатор контейнера "0"
		Если ПодаетсяЗаявлениеОЗачете Тогда
			Если Элементы.Найти("ОписаниеЗаявленияИтог0") = Неопределено Тогда
				КопироватьЭлементСПодчиненными(Форма, Элементы.ОписаниеЗаявлениеИтог, Элементы.СтраницаРезультатВыполненияЗаявление, 0);
			КонецЕсли;
		Иначе
			Если Элементы.Найти("ОписаниеУведомлениеИтог0") = Неопределено Тогда
				КопироватьЭлементСПодчиненными(Форма, Элементы.ОписаниеУведомлениеИтог, Элементы.СтраницаРезультатВыполненияУведомление, 0);
			КонецЕсли;
		КонецЕсли;
		Элементы.ЗначениеУведомлениеИтог0.Заголовок = Формат(Форма.ИтогПоУведомлениям, ФорматнаяСтрока);
		Элементы.ОписаниеУведомлениеИтог0.Видимость = Истина;
	КонецЕсли;
	
	// Уберем шаблоны
	Элементы.ОписаниеУведомление.Видимость     = Ложь; 
	Элементы.ОписаниеУведомлениеСуммы.Видимость     = Ложь;
	Элементы.ОписаниеУведомлениеИтог.Видимость = Ложь;
	
	// Подсказка по заявлению
	Если ПодаетсяЗаявлениеОЗачете И ТребуетсяУведомление Тогда
		ТаблицаОстатковНаЕдиномНалоговомСчете = ЕдиныйНалоговыйСчет.ТаблицаОстатковНаЕдиномНалоговомСчете(
		Форма.ОрганизацияПредставление,
		Форма.ПериодСобытия);
		ДоступныйОстаток = ТаблицаОстатковНаЕдиномНалоговомСчете.Итог("Сумма");
		
		// Взносы ФСС платим отдельной платежкой не через ЕНС
		Если ДоступныйОстаток >= Форма.СуммаКУплате Тогда
			ТекстИнформацияЗаявление = СтрШаблон(
			НСтр("ru = 'Доступный остаток по ЕНС составляет %1. Данная сумма позволяет произвести зачет взносов в счет предстоящей обязанности.'"),
			Формат(ДоступныйОстаток, ФорматнаяСтрока));
			Элементы.СформироватьЗаявление.Доступность = Истина;
			Элементы.СформироватьЗаявление.Видимость = Истина;
		Иначе
			ТекстИнформацияЗаявление = СтрШаблон(
			НСтр("ru = 'Доступный остаток по ЕНС составляет %1. Данная сумма не позволяет произвести зачет взносов в счет предстоящей обязанности.'"),
			Формат(ДоступныйОстаток, ФорматнаяСтрока));
			Элементы.СформироватьЗаявление.Доступность = Ложь;
			Элементы.ДекорацияИнформацияЗаявление.Видимость = Не Форма.СуммаКУплате = 0;
		КонецЕсли;
		Элементы.ДекорацияИнформацияЗаявление.Заголовок = Новый ФорматированнаяСтрока(
		ТекстИнформацияЗаявление,
		ШрифтИнформацияУведомление);
		Элементы.ДекорацияИнформацияЗаявление.Видимость = Истина;
	ИначеЕсли ПодаетсяЗаявлениеОЗачете Тогда
		Элементы.ДекорацияИнформацияЗаявление.Видимость = Ложь;
		Элементы.СформироватьЗаявление.Доступность = Ложь;
		Элементы.СформироватьЗаявление.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры   

Функция НомерКонтейнера(Индекс) Экспорт
	
	Возврат Формат(Индекс + 1, "ЧГ=0");
	
КонецФункции

Функция Идентификатор(Имя) Экспорт
	
	Цифры = "1234567890";
	НомерСтрокой = "";
	ДлинаИмени = СтрДлина(Имя);
	Для Индекс = 0 По ДлинаИмени - 1 Цикл
		Позиция = ДлинаИмени - Индекс;
		Символ = Сред(Имя,Позиция,1);
		Если СтрНайти(Цифры, Символ) = 0 Тогда
			Прервать;
		КонецЕсли;
		НомерСтрокой = Символ + НомерСтрокой;
	КонецЦикла;
	
	Если ПустаяСтрока(НомерСтрокой) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		Возврат Число(НомерСтрокой) - 1;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Процедура КопироватьЭлементСПодчиненными(Форма, Источник, Владелец, Номер) Экспорт
	
	ТипИсточника = ТипЗнч(Источник);
	Приемник = Форма.Элементы.Добавить(Источник.Имя + Номер, ТипИсточника, Владелец);
	
	Если ТипИсточника = Тип("ГруппаФормы") Тогда
		Приемник.Вид = Источник.Вид;
		ЗаполнитьЗначенияСвойств(Приемник, Источник, , "Имя,ПутьКДаннымЗаголовка,ПодчиненныеЭлементы");
		Для Каждого ПодчиненныйЭлемент Из Источник.ПодчиненныеЭлементы Цикл
			КопироватьЭлементСПодчиненными(Форма, ПодчиненныйЭлемент, Приемник, Номер);
		КонецЦикла;
	ИначеЕсли ТипИсточника = Тип("КнопкаФормы") Тогда
		ИмяКоманды = Источник.ИмяКоманды + Номер;
		Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
			НоваяКоманда = Форма.Команды.Добавить(ИмяКоманды);
			ЗаполнитьЗначенияСвойств(НоваяКоманда, Форма.Команды[Источник.ИмяКоманды]);
		КонецЕсли;
		Приемник.ИмяКоманды = ИмяКоманды;
		ЗаполнитьЗначенияСвойств(Приемник, Источник, , "Имя, ИмяКоманды");  
	ИначеЕсли ТипИсточника = Тип("ДекорацияФормы") И Источник.Гиперссылка Тогда
		Приемник.Вид = Источник.Вид;
		ЗаполнитьЗначенияСвойств(Приемник, Источник, , "Имя");
		ДействиеДекорации = Источник.ПолучитьДействие("Нажатие");
		Приемник.УстановитьДействие("Нажатие", ДействиеДекорации);		
	Иначе
		Приемник.Вид = Источник.Вид;
		ЗаполнитьЗначенияСвойств(Приемник, Источник, , "Имя");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОформитьСобытиеУведомление(Форма, Событие, Номер, Разрядность)
	
	Элементы = Форма.Элементы;
	
	Если ЗначениеЗаполнено(Событие.Уведомление) Тогда
		Если ТипЗнч(Событие.Уведомление) = Тип("ДокументСсылка.ОперацияПоЕдиномуНалоговомуСчету") Тогда
			ПредставлениеУведомления = Документы.ОперацияПоЕдиномуНалоговомуСчету.ОписаниеДокумента(Событие.Уведомление);
		ИначеЕсли ТипЗнч(Событие.Уведомление) = Тип("ДокументСсылка.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности") Тогда
			ПредставлениеУведомления = Документы.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.ОписаниеДокумента(Событие.Уведомление);
		Иначе
			ПредставлениеУведомления = Документы.УведомлениеОбИсчисленныхСуммахНалогов.ОписаниеДокумента(Событие.Уведомление);
		КонецЕсли;
		ЗаголовокУведомления     = ПредставлениеУведомления.Наименование;
		СуммаУведомления         = ПредставлениеУведомления.Сумма;
	Иначе
		ЗаголовокУведомления = Событие.Наименование;
		СуммаУведомления     = Событие.Сумма;
	КонецЕсли;
	
	Форма.ИтогПоУведомлениям = Форма.ИтогПоУведомлениям + СуммаУведомления;
	// Платежный документ
	Если ТипЗнч(Событие.Уведомление) = Тип("ДокументСсылка.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности") Тогда
		Элемент = Элементы["ОткрытьЗаявление" + Номер];
	Иначе
		Элемент = Элементы["ОткрытьУведомление" + Номер];
	КонецЕсли;
	Элемент.Заголовок = ЗаголовокУведомления;
	
	// Сумма
	ФорматнаяСтрока = "ЧЦ=15; ЧН=";
	Если Разрядность <> 0 Тогда
		ФорматнаяСтрока = ФорматнаяСтрока + ";ЧДЦ=" + Разрядность; 
	КонецЕсли;
	Если ТипЗнч(Событие.Уведомление) = Тип("ДокументСсылка.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности") Тогда
		Элемент = Элементы["СуммаЗаявление" + Номер];
	Иначе
		Элемент = Элементы["СуммаУведомления" + Номер];
	КонецЕсли;
	Элемент.Заголовок = Формат(СуммаУведомления, ФорматнаяСтрока);
	
КонецПроцедуры   

Процедура УдалитьНеиспользуемыеЭлементы(Форма, ЭлементыКУдалению) Экспорт
	
	Элементы = Форма.Элементы;
	
	Для Каждого Элемент Из ЭлементыКУдалению Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеВспомогательныеПроцедуры

Процедура РаспределитьОплатуПоОстаткамРасчетов565ФЗ(ТаблицаСуммыЕдиногоНалоговогоПлатежа, ТаблицаРеквизиты, Движения, Отказ)
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	// Основные параметры алгоритма
	
	// Исторически сначала был изменен приоритет зачета для НДФЛ, потом для страховых взносов.
	// Поэтому если не действует новая версия НДФЛ, то это значит, что и для взносов тоже не действует.
	ДатаСменыПоследовательностиЗачетаУплатНДФЛ   = ДатаСменыПоследовательностиЗачетаУплат();
	НоваяВерсияПоследовательностиЗачетаУплатНДФЛ = Реквизиты.Период >= ДатаСменыПоследовательностиЗачетаУплатНДФЛ;
	ПереходныйПериодНДФЛ                         = НачалоМесяца(Реквизиты.Период) = НачалоМесяца(ДатаСменыПоследовательностиЗачетаУплатНДФЛ);
	
	СуммыЕдиногоНалоговогоПлатежа = ТаблицаСуммыЕдиногоНалоговогоПлатежа.Скопировать();
	СуммыЕдиногоНалоговогоПлатежа.Сортировать("ДатаРегистратора Возр");
	
	НаборДвиженийНалог   = Движения.РасчетыПоНалогамНаЕдиномНалоговомСчете;
	НаборДвиженийСанкции = Движения.РасчетыПоСанкциямНаЕдиномНалоговомСчете;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Организация, "ГоловнаяОрганизация");
	Организации         = ПрослеживаемостьПереопределяемый.ВсяОрганизация(ГоловнаяОрганизация);
	
	ПериодОстатков      = Новый Граница(КонецМесяца(ДобавитьМесяц(Реквизиты.Период, -1)), ВидГраницы.Включая);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",                            ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Организации",                                    Организации);
	Запрос.УстановитьПараметр("ПериодОстатков",                                 ПериодОстатков);
	Запрос.УстановитьПараметр("НачалоПериода",                                  НачалоМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("КонецПериода",                                   КонецМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("ПредельныйСрокУплаты",                           Реквизиты.Период);
	Запрос.УстановитьПараметр("ВсеВидыНалоговНДФЛ",                             ЕдиныйНалоговыйСчетПовтИсп.ВсеВидыНалоговНДФЛ());
	Запрос.УстановитьПараметр("ВидыНалоговНДФЛНалоговогоАгента",                ЕдиныйНалоговыйСчетПовтИсп.ВидыНалоговНДФЛНалоговогоАгента());
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор",                         Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("НоваяВерсияПоследовательностиЗачетаУплатНДФЛ",   НоваяВерсияПоследовательностиЗачетаУплатНДФЛ);
	Запрос.УстановитьПараметр("ДатаПриоритезацииУведомленияПоНДФЛ",             ДатаПриоритезацииУведомленияПоНДФЛ());
	Запрос.УстановитьПараметр("ДатаПриоритезацииУведомленияПоСтраховымВзносам", ДатаПриоритезацииУведомленияПоСтраховымВзносам());
	Запрос.УстановитьПараметр("ВидыНалоговСтраховыеВзносы",                     ЕдиныйНалоговыйСчетПовтИсп.ВидыНалоговСтраховыеВзносы());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА НАЧАЛОПЕРИОДА(РасчетыПоНалогамНаЕдиномНалоговомСчете.СрокУплаты, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ)
	|				ТОГДА ВЫБОР
	|						КОГДА РасчетыПоНалогамНаЕдиномНалоговомСчете.Период > РасчетыПоНалогамНаЕдиномНалоговомСчете.СрокУплаты
	|							ТОГДА РасчетыПоНалогамНаЕдиномНалоговомСчете.Период
	|							
	|						КОГДА &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ
	|								И РасчетыПоНалогамНаЕдиномНалоговомСчете.Налог В (&ВидыНалоговНДФЛНалоговогоАгента)
	|								И РасчетыПоНалогамНаЕдиномНалоговомСчете.Период >= &ДатаПриоритезацииУведомленияПоНДФЛ
	|							ТОГДА РасчетыПоНалогамНаЕдиномНалоговомСчете.Период
	|							
	|						КОГДА РасчетыПоНалогамНаЕдиномНалоговомСчете.Налог В (&ВидыНалоговСтраховыеВзносы)
	|								И РасчетыПоНалогамНаЕдиномНалоговомСчете.Период >= &ДатаПриоритезацииУведомленияПоСтраховымВзносам
	|							ТОГДА РасчетыПоНалогамНаЕдиномНалоговомСчете.Период
	|							
	|						ИНАЧЕ РасчетыПоНалогамНаЕдиномНалоговомСчете.СрокУплаты
	|					КОНЕЦ
	|			ИНАЧЕ РасчетыПоНалогамНаЕдиномНалоговомСчете.Период
	|		КОНЕЦ, ДЕНЬ) КАК Период,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Организация КАК Организация,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.СчетУчета КАК СчетУчета,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Налог КАК Налог,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.КодБК КАК КодБК,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.КодПоОКТМО КАК КодПоОКТМО,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.СрокУплаты КАК СрокУплаты,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Сумма КАК Сумма,
	|	NULL КАК ВидПлатежа,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(РасчетыПоНалогамНаЕдиномНалоговомСчете.СрокУплаты, МЕСЯЦ) < НАЧАЛОПЕРИОДА(&ПредельныйСрокУплаты, МЕСЯЦ)
	|			ТОГДА ВЫБОР
	|					КОГДА &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ
	|								И РасчетыПоНалогамНаЕдиномНалоговомСчете.Налог В (&ВсеВидыНалоговНДФЛ)
	|							ИЛИ НЕ &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ
	|						ТОГДА 1
	|					ИНАЧЕ 3
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ = ЛОЖЬ
	|					ТОГДА 2
	|				КОГДА РасчетыПоНалогамНаЕдиномНалоговомСчете.Налог В (&ВидыНалоговНДФЛНалоговогоАгента)
	|					ТОГДА 2
	|				КОГДА РасчетыПоНалогамНаЕдиномНалоговомСчете.Налог В (&ВидыНалоговСтраховыеВзносы)
	|						И РасчетыПоНалогамНаЕдиномНалоговомСчете.Период >= &ДатаПриоритезацииУведомленияПоСтраховымВзносам
	|					ТОГДА 4
	|				ИНАЧЕ 5
	|			КОНЕЦ
	|	КОНЕЦ КАК Приоритет,
	|	ИСТИНА КАК ЭтоНалог
	|ПОМЕСТИТЬ ВТ_Начисление
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете КАК РасчетыПоНалогамНаЕдиномНалоговомСчете
	|ГДЕ
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.Организация В(&Организации)
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.Регистратор <> &ИсключаемыйРегистратор
	|	И НАЧАЛОПЕРИОДА(РасчетыПоНалогамНаЕдиномНалоговомСчете.СрокУплаты, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ)
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(ВЫБОР
	|			КОГДА НАЧАЛОПЕРИОДА(РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СрокУплаты, МЕСЯЦ) >= НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ)
	|					И &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ
	|					И РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Налог В (&ВидыНалоговНДФЛНалоговогоАгента)
	|				ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, -1), МЕСЯЦ)
	|				
	|			КОГДА НАЧАЛОПЕРИОДА(РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СрокУплаты, МЕСЯЦ) >= НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ)
	|					И &НачалоПериода >= &ДатаПриоритезацииУведомленияПоСтраховымВзносам
	|					И РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Налог В (&ВидыНалоговСтраховыеВзносы)
	|				ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, -1), МЕСЯЦ)
	|				
	|			ИНАЧЕ РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СрокУплаты
	|		КОНЕЦ, ДЕНЬ),
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.ГоловнаяОрганизация,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Организация,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СчетУчета,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Налог,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.КодБК,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.РегистрацияВНалоговомОргане,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.КодПоОКТМО,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СрокУплаты,
	|	СУММА(РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СуммаОстаток),
	|	NULL,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СрокУплаты, МЕСЯЦ) < НАЧАЛОПЕРИОДА(&ПредельныйСрокУплаты, МЕСЯЦ)
	|			ТОГДА ВЫБОР
	|					КОГДА &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ
	|								И РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Налог В (&ВсеВидыНалоговНДФЛ)
	|							ИЛИ НЕ &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ
	|						ТОГДА 1
	|					ИНАЧЕ 3
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ = ЛОЖЬ
	|					ТОГДА 2
	|				КОГДА РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Налог В (&ВидыНалоговНДФЛНалоговогоАгента)
	|					ТОГДА 2
	|				КОГДА РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Налог В (&ВидыНалоговСтраховыеВзносы)
	|						И &НачалоПериода >= &ДатаПриоритезацииУведомленияПоСтраховымВзносам
	|					ТОГДА 4
	|				ИНАЧЕ 5
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ИСТИНА
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете.Остатки(
	|			&ПериодОстатков,
	|			ГоловнаяОрганизация = &ГоловнаяОрганизация
	|				И Организация В (&Организации)
	|				И НАЧАЛОПЕРИОДА(СрокУплаты, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ)) КАК РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки
	|ГДЕ
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СуммаОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Налог,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СчетУчета,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СрокУплаты,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.КодПоОКТМО,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.РегистрацияВНалоговомОргане,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Организация,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.КодБК,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.ГоловнаяОрганизация,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СрокУплаты, МЕСЯЦ) < НАЧАЛОПЕРИОДА(&ПредельныйСрокУплаты, МЕСЯЦ)
	|			ТОГДА ВЫБОР
	|					КОГДА &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ
	|								И РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Налог В (&ВсеВидыНалоговНДФЛ)
	|							ИЛИ НЕ &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ
	|						ТОГДА 1
	|					ИНАЧЕ 3
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ = ЛОЖЬ
	|					ТОГДА 2
	|				КОГДА РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Налог В (&ВидыНалоговНДФЛНалоговогоАгента)
	|					ТОГДА 2
	|				КОГДА РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Налог В (&ВидыНалоговСтраховыеВзносы)
	|						И &НачалоПериода >= &ДатаПриоритезацииУведомленияПоСтраховымВзносам
	|					ТОГДА 4
	|				ИНАЧЕ 5
	|			КОНЕЦ
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(РасчетыПоСанкциямНаЕдиномНалоговомСчете.Период, ДЕНЬ),
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчете.ГоловнаяОрганизация,
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчете.Организация,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчете.Сумма,
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчете.ВидПлатежа,
	|	ВЫБОР
	|		КОГДА &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ
	|			ТОГДА ВЫБОР
	|					КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчете.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.ПениАкт), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.ПениСам))
	|						ТОГДА 6
	|					КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчете.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.Проценты))
	|						ТОГДА 7
	|					КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчете.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.Штраф))
	|						ТОГДА 8
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчете.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.ПениАкт), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.ПениСам))
	|					ТОГДА 3
	|				КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчете.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.Проценты))
	|					ТОГДА 4
	|				КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчете.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.Штраф))
	|					ТОГДА 5
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрНакопления.РасчетыПоСанкциямНаЕдиномНалоговомСчете КАК РасчетыПоСанкциямНаЕдиномНалоговомСчете
	|ГДЕ
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчете.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И РасчетыПоСанкциямНаЕдиномНалоговомСчете.Организация В(&Организации)
	|	И РасчетыПоСанкциямНаЕдиномНалоговомСчете.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РасчетыПоСанкциямНаЕдиномНалоговомСчете.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И РасчетыПоСанкциямНаЕдиномНалоговомСчете.Регистратор <> &ИсключаемыйРегистратор
	|	И РасчетыПоСанкциямНаЕдиномНалоговомСчете.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, -1), МЕСЯЦ),
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ГоловнаяОрганизация,
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.Организация,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	СУММА(РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.СуммаОстаток),
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа,
	|	ВЫБОР
	|		КОГДА &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ
	|			ТОГДА ВЫБОР
	|					КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.ПениАкт), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.ПениСам))
	|						ТОГДА 6
	|					КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.Проценты))
	|						ТОГДА 7
	|					КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.Штраф))
	|						ТОГДА 8
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.ПениАкт), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.ПениСам))
	|					ТОГДА 3
	|				КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.Проценты))
	|					ТОГДА 4
	|				КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.Штраф))
	|					ТОГДА 5
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрНакопления.РасчетыПоСанкциямНаЕдиномНалоговомСчете.Остатки(
	|			&ПериодОстатков,
	|			ГоловнаяОрганизация = &ГоловнаяОрганизация
	|				И Организация В (&Организации)) КАК РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ГоловнаяОрганизация,
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.Организация,
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа,
	|	ВЫБОР
	|		КОГДА &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ
	|			ТОГДА ВЫБОР
	|					КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.ПениАкт), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.ПениСам))
	|						ТОГДА 6
	|					КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.Проценты))
	|						ТОГДА 7
	|					КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.Штраф))
	|						ТОГДА 8
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.ПениАкт), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.ПениСам))
	|					ТОГДА 3
	|				КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.Проценты))
	|					ТОГДА 4
	|				КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.Штраф))
	|					ТОГДА 5
	|			КОНЕЦ
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Начисление.Период КАК Период,
	|	ВТ_Начисление.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВТ_Начисление.Организация КАК Организация,
	|	ВТ_Начисление.СчетУчета КАК СчетУчета,
	|	ВТ_Начисление.Налог КАК Налог,
	|	ВТ_Начисление.КодБК КАК КодБК,
	|	ВТ_Начисление.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВТ_Начисление.КодПоОКТМО КАК КодПоОКТМО,
	|	ВТ_Начисление.СрокУплаты КАК СрокУплаты,
	|	СУММА(ВТ_Начисление.Сумма) КАК Сумма,
	|	ВТ_Начисление.ВидПлатежа КАК ВидПлатежа,
	|	ВТ_Начисление.Приоритет КАК Приоритет,
	|	ВТ_Начисление.ЭтоНалог КАК ЭтоНалог,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_РасчетыПоНалогам
	|ИЗ
	|	ВТ_Начисление КАК ВТ_Начисление
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Начисление.ВидПлатежа,
	|	ВТ_Начисление.СрокУплаты,
	|	ВТ_Начисление.ЭтоНалог,
	|	ВТ_Начисление.Налог,
	|	ВТ_Начисление.Период,
	|	ВТ_Начисление.СчетУчета,
	|	ВТ_Начисление.РегистрацияВНалоговомОргане,
	|	ВТ_Начисление.ГоловнаяОрганизация,
	|	ВТ_Начисление.Организация,
	|	ВТ_Начисление.КодПоОКТМО,
	|	ВТ_Начисление.КодБК,
	|	ВТ_Начисление.Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РасчетыПоНалогам.Период КАК Период,
	|	ВТ_РасчетыПоНалогам.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВТ_РасчетыПоНалогам.Организация КАК Организация,
	|	ВТ_РасчетыПоНалогам.СчетУчета КАК СчетУчета,
	|	ВТ_РасчетыПоНалогам.Налог КАК Налог,
	|	ВТ_РасчетыПоНалогам.КодБК КАК КодБК,
	|	ВТ_РасчетыПоНалогам.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВТ_РасчетыПоНалогам.КодПоОКТМО КАК КодПоОКТМО,
	|	ВТ_РасчетыПоНалогам.СрокУплаты КАК СрокУплаты,
	|	СУММА(ВТ_РасчетыПоНалогам.Сумма) КАК Сумма,
	|	ВТ_РасчетыПоНалогам.ВидПлатежа КАК ВидПлатежа,
	|	ВТ_РасчетыПоНалогам.Приоритет КАК Приоритет,
	|	ВТ_РасчетыПоНалогам.НомерСтроки КАК НомерСтроки,
	|	ВТ_РасчетыПоНалогам.ЭтоНалог КАК ЭтоНалог
	|ПОМЕСТИТЬ ВТ_ТаблицаРасчетыПромежуточная
	|ИЗ
	|	ВТ_РасчетыПоНалогам КАК ВТ_РасчетыПоНалогам
	|ГДЕ
	|	ВТ_РасчетыПоНалогам.Сумма > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РасчетыПоНалогам.Период,
	|	ВТ_РасчетыПоНалогам.КодБК,
	|	ВТ_РасчетыПоНалогам.Налог,
	|	ВТ_РасчетыПоНалогам.СрокУплаты,
	|	ВТ_РасчетыПоНалогам.РегистрацияВНалоговомОргане,
	|	ВТ_РасчетыПоНалогам.КодПоОКТМО,
	|	ВТ_РасчетыПоНалогам.ВидПлатежа,
	|	ВТ_РасчетыПоНалогам.Организация,
	|	ВТ_РасчетыПоНалогам.ЭтоНалог,
	|	ВТ_РасчетыПоНалогам.СчетУчета,
	|	ВТ_РасчетыПоНалогам.ГоловнаяОрганизация,
	|	ВТ_РасчетыПоНалогам.Приоритет,
	|	ВТ_РасчетыПоНалогам.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(РасчетыПоНалогамНаЕдиномНалоговомСчете.СрокУплаты, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ)
	|			ТОГДА РасчетыПоНалогамНаЕдиномНалоговомСчете.СрокУплаты
	|		ИНАЧЕ РасчетыПоНалогамНаЕдиномНалоговомСчете.Период
	|	КОНЕЦ КАК Период,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Организация КАК Организация,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.СчетУчета КАК СчетУчета,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Налог КАК Налог,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.КодБК КАК КодБК,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.КодПоОКТМО КАК КодПоОКТМО,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.СрокУплаты КАК СрокУплаты,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Сумма КАК Сумма,
	|	NULL КАК ВидПлатежа
	|ПОМЕСТИТЬ ВТ_Списание
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете КАК РасчетыПоНалогамНаЕдиномНалоговомСчете
	|ГДЕ
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.Организация В(&Организации)
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.Регистратор <> &ИсключаемыйРегистратор
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.СрокУплаты <= НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ)
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчете.Период,
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчете.ГоловнаяОрганизация,
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчете.Организация,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчете.Сумма,
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчете.ВидПлатежа
	|ИЗ
	|	РегистрНакопления.РасчетыПоСанкциямНаЕдиномНалоговомСчете КАК РасчетыПоСанкциямНаЕдиномНалоговомСчете
	|ГДЕ
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчете.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И РасчетыПоСанкциямНаЕдиномНалоговомСчете.Организация В(&Организации)
	|	И РасчетыПоСанкциямНаЕдиномНалоговомСчете.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РасчетыПоСанкциямНаЕдиномНалоговомСчете.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И РасчетыПоСанкциямНаЕдиномНалоговомСчете.Активность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Списание.Период КАК Период,
	|	ВТ_Списание.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВТ_Списание.Организация КАК Организация,
	|	ВТ_Списание.СчетУчета КАК СчетУчета,
	|	ВТ_Списание.Налог КАК Налог,
	|	ВТ_Списание.КодБК КАК КодБК,
	|	ВТ_Списание.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВТ_Списание.КодПоОКТМО КАК КодПоОКТМО,
	|	ВТ_Списание.СрокУплаты КАК СрокУплаты,
	|	СУММА(ВТ_Списание.Сумма) КАК Сумма,
	|	ВТ_Списание.ВидПлатежа КАК ВидПлатежа
	|ПОМЕСТИТЬ ВТ_ТаблицаЗачетыПромежуточная
	|ИЗ
	|	ВТ_Списание КАК ВТ_Списание
	|ГДЕ
	|	ВТ_Списание.Сумма > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Списание.КодПоОКТМО,
	|	ВТ_Списание.СчетУчета,
	|	ВТ_Списание.Период,
	|	ВТ_Списание.РегистрацияВНалоговомОргане,
	|	ВТ_Списание.КодБК,
	|	ВТ_Списание.ВидПлатежа,
	|	ВТ_Списание.ГоловнаяОрганизация,
	|	ВТ_Списание.Налог,
	|	ВТ_Списание.СрокУплаты,
	|	ВТ_Списание.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РасчетыПоНалогам.Период КАК Период,
	|	ВТ_РасчетыПоНалогам.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВТ_РасчетыПоНалогам.Организация КАК Организация,
	|	ВТ_РасчетыПоНалогам.СчетУчета КАК СчетУчета,
	|	ВТ_РасчетыПоНалогам.Налог КАК Налог,
	|	ВТ_РасчетыПоНалогам.КодБК КАК КодБК,
	|	ВТ_РасчетыПоНалогам.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВТ_РасчетыПоНалогам.КодПоОКТМО КАК КодПоОКТМО,
	|	ВТ_РасчетыПоНалогам.СрокУплаты КАК СрокУплаты,
	|	СУММА(-ВТ_РасчетыПоНалогам.Сумма) КАК Сумма,
	|	ВТ_РасчетыПоНалогам.ВидПлатежа КАК ВидПлатежа
	|ИЗ
	|	ВТ_РасчетыПоНалогам КАК ВТ_РасчетыПоНалогам
	|ГДЕ
	|	ВТ_РасчетыПоНалогам.Сумма < 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РасчетыПоНалогам.СчетУчета,
	|	ВТ_РасчетыПоНалогам.ВидПлатежа,
	|	ВТ_РасчетыПоНалогам.ГоловнаяОрганизация,
	|	ВТ_РасчетыПоНалогам.Организация,
	|	ВТ_РасчетыПоНалогам.СрокУплаты,
	|	ВТ_РасчетыПоНалогам.КодПоОКТМО,
	|	ВТ_РасчетыПоНалогам.Налог,
	|	ВТ_РасчетыПоНалогам.КодБК,
	|	ВТ_РасчетыПоНалогам.РегистрацияВНалоговомОргане,
	|	ВТ_РасчетыПоНалогам.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаРасчетыПромежуточная.Период КАК Период,
	|	ВТ_ТаблицаРасчетыПромежуточная.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВТ_ТаблицаРасчетыПромежуточная.Организация КАК Организация,
	|	ВТ_ТаблицаРасчетыПромежуточная.СчетУчета КАК СчетУчета,
	|	ВТ_ТаблицаРасчетыПромежуточная.Налог КАК Налог,
	|	ВТ_ТаблицаРасчетыПромежуточная.КодБК КАК КодБК,
	|	ВТ_ТаблицаРасчетыПромежуточная.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВТ_ТаблицаРасчетыПромежуточная.КодПоОКТМО КАК КодПоОКТМО,
	|	ВТ_ТаблицаРасчетыПромежуточная.СрокУплаты КАК СрокУплаты,
	|	СУММА(ВТ_ТаблицаРасчетыПромежуточная.Сумма) КАК Сумма,
	|	ВТ_ТаблицаРасчетыПромежуточная.ВидПлатежа КАК ВидПлатежа,
	|	ВТ_ТаблицаРасчетыПромежуточная.Приоритет КАК Приоритет,
	|	ВТ_ТаблицаРасчетыПромежуточная.НомерСтроки КАК НомерСтроки,
	|	ВТ_ТаблицаРасчетыПромежуточная.ЭтоНалог КАК ЭтоНалог,
	|	ЛОЖЬ КАК Недоимка
	|ИЗ
	|	ВТ_ТаблицаРасчетыПромежуточная КАК ВТ_ТаблицаРасчетыПромежуточная
	|ГДЕ
	|	ВТ_ТаблицаРасчетыПромежуточная.Сумма > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаРасчетыПромежуточная.ГоловнаяОрганизация,
	|	ВТ_ТаблицаРасчетыПромежуточная.ЭтоНалог,
	|	ВТ_ТаблицаРасчетыПромежуточная.ВидПлатежа,
	|	ВТ_ТаблицаРасчетыПромежуточная.Период,
	|	ВТ_ТаблицаРасчетыПромежуточная.Организация,
	|	ВТ_ТаблицаРасчетыПромежуточная.СчетУчета,
	|	ВТ_ТаблицаРасчетыПромежуточная.Налог,
	|	ВТ_ТаблицаРасчетыПромежуточная.КодБК,
	|	ВТ_ТаблицаРасчетыПромежуточная.РегистрацияВНалоговомОргане,
	|	ВТ_ТаблицаРасчетыПромежуточная.КодПоОКТМО,
	|	ВТ_ТаблицаРасчетыПромежуточная.СрокУплаты,
	|	ВТ_ТаблицаРасчетыПромежуточная.Приоритет,
	|	ВТ_ТаблицаРасчетыПромежуточная.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Списание.Период КАК Период,
	|	ВТ_Списание.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВТ_Списание.Организация КАК Организация,
	|	ВТ_Списание.СчетУчета КАК СчетУчета,
	|	ВТ_Списание.Налог КАК Налог,
	|	ВТ_Списание.КодБК КАК КодБК,
	|	ВТ_Списание.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВТ_Списание.КодПоОКТМО КАК КодПоОКТМО,
	|	ВТ_Списание.СрокУплаты КАК СрокУплаты,
	|	СУММА(-ВТ_Списание.Сумма) КАК Сумма,
	|	ВТ_Списание.ВидПлатежа КАК ВидПлатежа
	|ИЗ
	|	ВТ_Списание КАК ВТ_Списание
	|ГДЕ
	|	ВТ_Списание.Сумма < 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Списание.ГоловнаяОрганизация,
	|	ВТ_Списание.Организация,
	|	ВТ_Списание.СчетУчета,
	|	ВТ_Списание.КодБК,
	|	ВТ_Списание.Налог,
	|	ВТ_Списание.РегистрацияВНалоговомОргане,
	|	ВТ_Списание.КодПоОКТМО,
	|	ВТ_Списание.СрокУплаты,
	|	ВТ_Списание.ВидПлатежа,
	|	ВТ_Списание.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаЗачетыПромежуточная.Период КАК Период,
	|	ВТ_ТаблицаЗачетыПромежуточная.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВТ_ТаблицаЗачетыПромежуточная.Организация КАК Организация,
	|	ВТ_ТаблицаЗачетыПромежуточная.СчетУчета КАК СчетУчета,
	|	ВТ_ТаблицаЗачетыПромежуточная.Налог КАК Налог,
	|	ВТ_ТаблицаЗачетыПромежуточная.КодБК КАК КодБК,
	|	ВТ_ТаблицаЗачетыПромежуточная.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВТ_ТаблицаЗачетыПромежуточная.КодПоОКТМО КАК КодПоОКТМО,
	|	ВТ_ТаблицаЗачетыПромежуточная.СрокУплаты КАК СрокУплаты,
	|	СУММА(ВТ_ТаблицаЗачетыПромежуточная.Сумма) КАК Сумма,
	|	ВТ_ТаблицаЗачетыПромежуточная.ВидПлатежа КАК ВидПлатежа
	|ИЗ
	|	ВТ_ТаблицаЗачетыПромежуточная КАК ВТ_ТаблицаЗачетыПромежуточная
	|ГДЕ
	|	ВТ_ТаблицаЗачетыПромежуточная.Сумма > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаЗачетыПромежуточная.Период,
	|	ВТ_ТаблицаЗачетыПромежуточная.ВидПлатежа,
	|	ВТ_ТаблицаЗачетыПромежуточная.СчетУчета,
	|	ВТ_ТаблицаЗачетыПромежуточная.Организация,
	|	ВТ_ТаблицаЗачетыПромежуточная.ГоловнаяОрганизация,
	|	ВТ_ТаблицаЗачетыПромежуточная.Налог,
	|	ВТ_ТаблицаЗачетыПромежуточная.СрокУплаты,
	|	ВТ_ТаблицаЗачетыПромежуточная.КодПоОКТМО,
	|	ВТ_ТаблицаЗачетыПромежуточная.РегистрацияВНалоговомОргане,
	|	ВТ_ТаблицаЗачетыПромежуточная.КодБК
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаРасчетыСторно = Результат[Результат.Количество()-4].Выгрузить();
	ТаблицаРасчеты       = Результат[Результат.Количество()-3].Выгрузить();
	ТаблицаЗачетыСторно  = Результат[Результат.Количество()-2].Выгрузить();
	ТаблицаЗачеты        = Результат[Результат.Количество()-1].Выгрузить();
	
	КолонкиОтбора = "ГоловнаяОрганизация, Организация, СчетУчета, Налог, КодБК,
		|РегистрацияВНалоговомОргане, КодПоОКТМО, СрокУплаты, ВидПлатежа";
		
	ТаблицаРасчеты.Индексы.Добавить(КолонкиОтбора);
	ТаблицаРасчеты.Индексы.Добавить("Период, СрокУплаты, ЭтоНалог");
	ТаблицаРасчеты.Индексы.Добавить("НомерСтроки");
	
	СкорректироватьНаСуммыСторно(ТаблицаРасчеты, ТаблицаРасчетыСторно);
	СкорректироватьНаСуммыСторно(ТаблицаЗачеты,  ТаблицаЗачетыСторно);
	
	СтруктураОтбора = Новый Структура(КолонкиОтбора);
	
	//Исключим из оборотов принудительно проведенные зачеты (операции, уведомления, заявления)
	Для Каждого СтрокаТаблицыЗачета Из ТаблицаЗачеты Цикл
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТаблицыЗачета);
		ТаблицаКЗачету = ТаблицаРасчеты.Скопировать(СтруктураОтбора);
		ТаблицаКЗачету.Сортировать("Период Убыв, Приоритет");
		
		МассивОбработанныхСтрок = Новый Массив;
		Для Каждого СтрокаТаблицыКЗачету Из ТаблицаКЗачету Цикл
			// Считается зачтенной сумма, которая ранее была отражена в учете как начисленная
			Если СтрокаТаблицыКЗачету.Период > СтрокаТаблицыЗачета.Период Тогда
				Продолжить;
			КонецЕсли;
			ЗачтеннаяСумма = Макс(0, СтрокаТаблицыКЗачету.Сумма - СтрокаТаблицыЗачета.Сумма);
			СтрокаТаблицыКЗачету.Сумма = ЗачтеннаяСумма;
			СтрокаТаблицыЗачета.Сумма = СтрокаТаблицыЗачета.Сумма - ЗачтеннаяСумма;
			МассивОбработанныхСтрок.Добавить(СтрокаТаблицыКЗачету);
		КонецЦикла;
		Для Каждого СтрокаТаблицыКЗачету Из МассивОбработанныхСтрок Цикл
			ТекущаяСтрока = ТаблицаРасчеты.Найти(СтрокаТаблицыКЗачету.НомерСтроки, "НомерСтроки");
			Если ТекущаяСтрока <> Неопределено Тогда
				ТекущаяСтрока.Сумма = СтрокаТаблицыКЗачету.Сумма;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОчиститьТаблицуОтПустыхЗаписей(ТаблицаРасчеты);
	
	ПериодыОплаты = ОбщегоНазначения.ВыгрузитьКолонку(СуммыЕдиногоНалоговогоПлатежа, "ДатаРегистратора", Истина);
	ОтборПериодовОплаты   = Новый Структура("ДатаРегистратора");
	ОстаткиПоНалогам      = ТаблицаРасчеты.СкопироватьКолонки();
	ОстаткиПоСанкциям     = ТаблицаРасчеты.СкопироватьКолонки();
	УчтенныеДанныеНалоги  = ТаблицаРасчеты.СкопироватьКолонки();
	УчтенныеДанныеСанкции = ТаблицаРасчеты.СкопироватьКолонки();
	
	УчтенныеДанныеНалоги.Индексы.Добавить("НомерСтроки");
	УчтенныеДанныеСанкции.Индексы.Добавить("НомерСтроки");
	
	ПериодыРегистраций = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаРасчеты, "Период", Истина);
	
	// Принцип зачета налогов:
	// - Обрабатываем данные в последовательности документов уплаты.
	// - Переплата прошлого периода распределяется по всей имеющейся задолженности в последовательности ее возникновения (*1).
	// - Уплата текущего периода (*2):
	//     - сначала погашает задолженность, зарегистрированную до отражения уплаты (*3);
	//     - если сумма списана не вся, погашается задолженность, зарегистрированная после отражения уплаты (*4).
	// - Последовательность зачета корректируется из-за переходного периода, который создал 196-ФЗ:
	//     - в выборке новая последовательность устанавливается для всех записей нового периода;
	//     - если зачет фактически происходит до даты применения 196-ФЗ, то последовательность принудительно указывается "старая" (*5).
	// - В первую очередь зачитываются недоимки и текущая задолженность по налогу/взносу. Приоритеты 1-5.(*6)
	// - После каждой итерации зачета налогов запускается итерация зачета санкций. Приоритеты 6-8. (*7).
	
	Для Каждого ПериодОплаты Из ПериодыОплаты Цикл
		
		// Уточнение приоритета требуется только для переходного периода по НДФЛ.
		// Для страховых взносов переходного периода нет, т.к. они изменения приоритета по ним вступают в силу с 01.10.2023
		УточнятьПриоритет = ПереходныйПериодНДФЛ И ПериодОплаты < ДатаСменыПоследовательностиЗачетаУплатНДФЛ;
		
		ОтборПериодовОплаты.ДатаРегистратора = ПериодОплаты;
		СуммыЕдиногоНалоговогоПлатежаПоПериодам = СуммыЕдиногоНалоговогоПлатежа.Скопировать(ОтборПериодовОплаты);
		
		Если НачалоМесяца(ПериодОплаты) < НачалоМесяца(Реквизиты.Период) Тогда
			// (*1)
			Отбор = Новый Структура("ЭтоНалог, Период");
			Для Каждого ПериодРегистрации Из ПериодыРегистраций Цикл
				Отбор.Период   = ПериодРегистрации;
				Отбор.ЭтоНалог = Истина;
				ТекущиеОстаткиПоНалогам(ОстаткиПоНалогам,
					ТаблицаРасчеты,
					УчтенныеДанныеНалоги,
					Отбор,
					УточнятьПриоритет И ПериодРегистрации < ДатаСменыПоследовательностиЗачетаУплатНДФЛ);
				// (*6)
				РаспределениеСуммыОплатыПоСрокамИПриоритетамПогашения(Реквизиты,
					СуммыЕдиногоНалоговогоПлатежаПоПериодам,
					ОстаткиПоНалогам,
					НаборДвиженийНалог,
					УчтенныеДанныеНалоги);
				Если СуммыЕдиногоНалоговогоПлатежаПоПериодам.Итог("Сумма") > 0 Тогда
					// (*7)
					Отбор.ЭтоНалог = Ложь;
					ТекущиеОстаткиПоНалогам(ОстаткиПоСанкциям,
						ТаблицаРасчеты,
						УчтенныеДанныеСанкции,
						Отбор,
						Ложь);
					РаспределениеСуммыОплатыСанкцийПоПриоритетам(Реквизиты,
						СуммыЕдиногоНалоговогоПлатежаПоПериодам,
						ОстаткиПоСанкциям,
						НаборДвиженийСанкции,
						УчтенныеДанныеСанкции);
				КонецЕсли;
			КонецЦикла;
		Иначе
			// (*2)
			Отбор = Новый Структура("ЭтоНалог, Период, ПериодОплаты, Ретроспективно");
			Отбор.Период       = Дата('00010101');
			Отбор.ПериодОплаты = ПериодОплаты;
			
			КоличествоИтераций = ?(ПереходныйПериодНДФЛ, 3, 2);
			// 1. Ретроспективно осмотр (*3)
			// 2. Перспективный осмотр (*4). С ограничением на переходную дату, если применимо
			// 3. Перспективный осмотр (*4). Без ограничения на переходную дату, если она была применена на ш. 2
			Для НомерИтерации = 1 По КоличествоИтераций Цикл
				
				Если СуммыЕдиногоНалоговогоПлатежаПоПериодам.Итог("Сумма") <= 0 Тогда
					Продолжить;
				КонецЕсли;
				Отбор.Ретроспективно = НомерИтерации = 1;
				
				Если НомерИтерации = 1 Тогда 
					// (*6)
					Отбор.ЭтоНалог = Истина;
					ТекущиеОстаткиПоНалогам(ОстаткиПоНалогам,
						ТаблицаРасчеты,
						УчтенныеДанныеНалоги,
						Отбор,
						УточнятьПриоритет);
					РаспределениеСуммыОплатыПоСрокамИПриоритетамПогашения(Реквизиты,
						СуммыЕдиногоНалоговогоПлатежаПоПериодам,
						ОстаткиПоНалогам,
						НаборДвиженийНалог,
						УчтенныеДанныеНалоги);
					Если СуммыЕдиногоНалоговогоПлатежаПоПериодам.Итог("Сумма") > 0 Тогда
						// (*7)
						Отбор.ЭтоНалог = Ложь;
						ТекущиеОстаткиПоНалогам(ОстаткиПоСанкциям,
							ТаблицаРасчеты,
							УчтенныеДанныеСанкции,
							Отбор,
							Ложь);
						РаспределениеСуммыОплатыСанкцийПоПриоритетам(Реквизиты,
							СуммыЕдиногоНалоговогоПлатежаПоПериодам,
							ОстаткиПоСанкциям,
							НаборДвиженийСанкции,
							УчтенныеДанныеСанкции);
					КонецЕсли;
				Иначе
					Для Каждого ПериодРегистрации Из ПериодыРегистраций Цикл
						Отбор.Период = ПериодРегистрации;
						// (*6)
						Отбор.ЭтоНалог = Истина;
						ТекущиеОстаткиПоНалогам(ОстаткиПоНалогам,
							ТаблицаРасчеты,
							УчтенныеДанныеНалоги,
							Отбор,
							УточнятьПриоритет И ПериодРегистрации < ДатаСменыПоследовательностиЗачетаУплатНДФЛ);
						РаспределениеСуммыОплатыПоСрокамИПриоритетамПогашения(Реквизиты,
							СуммыЕдиногоНалоговогоПлатежаПоПериодам,
							ОстаткиПоНалогам,
							НаборДвиженийНалог,
							УчтенныеДанныеНалоги);
						Если СуммыЕдиногоНалоговогоПлатежаПоПериодам.Итог("Сумма") > 0 Тогда
							// (*7)
							Отбор.ЭтоНалог = Ложь;
							ТекущиеОстаткиПоНалогам(ОстаткиПоСанкциям,
								ТаблицаРасчеты,
								УчтенныеДанныеСанкции,
								Отбор,
								Ложь);
							РаспределениеСуммыОплатыСанкцийПоПриоритетам(Реквизиты,
								СуммыЕдиногоНалоговогоПлатежаПоПериодам,
								ОстаткиПоСанкциям,
								НаборДвиженийСанкции,
								УчтенныеДанныеСанкции);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаНалоги = Движения.РасчетыПоЕдиномуНалоговомуСчету.Выгрузить().СкопироватьКолонки();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НаборДвиженийНалог.Выгрузить(),   ТаблицаНалоги);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НаборДвиженийСанкции.Выгрузить(), ТаблицаНалоги);
	
	ПодготовитьТаблицуСписания(ТаблицаНалоги, ТаблицаСуммыЕдиногоНалоговогоПлатежа, Истина);
	
	СформироватьДвиженияНаЕдиномНалоговомСчете(ТаблицаРеквизиты, ТаблицаНалоги, Движения, Отказ);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура СкорректироватьНаСуммыСторно(ТаблицаРасчета, ТаблицаСторно)
		
	СтруктураОтбора = Новый Структура("ГоловнаяОрганизация, Организация, СчетУчета, Налог, КодБК,
		|РегистрацияВНалоговомОргане, КодПоОКТМО, СрокУплаты, ВидПлатежа");
	
	// Поправка на сторно записи расчетов по налогам и санкциям
	Для Каждого СтрокаТаблицыЗачета Из ТаблицаСторно Цикл
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТаблицыЗачета);
		ТаблицаКЗачету = ТаблицаРасчета.Скопировать(СтруктураОтбора);
		ТаблицаКЗачету.Сортировать("Период Убыв");
		
		МассивОбработанныхСтрок = Новый Массив;
		Для Каждого СтрокаТаблицыКЗачету Из ТаблицаКЗачету Цикл
			// Считается зачтенной сумма, которая ранее была отражена в учете как начисленная
			Если СтрокаТаблицыКЗачету.Период > СтрокаТаблицыЗачета.Период
				Или СтрокаТаблицыЗачета.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			ЗачтеннаяСумма = Мин(СтрокаТаблицыКЗачету.Сумма, СтрокаТаблицыЗачета.Сумма);
			СтрокаТаблицыКЗачету.Сумма = СтрокаТаблицыКЗачету.Сумма - ЗачтеннаяСумма;
			СтрокаТаблицыЗачета.Сумма  = СтрокаТаблицыЗачета.Сумма - ЗачтеннаяСумма;
			МассивОбработанныхСтрок.Добавить(СтрокаТаблицыКЗачету);
		КонецЦикла;
		Если СтрокаТаблицыЗачета.Сумма <> 0 И ТаблицаКЗачету.Итог("Сумма") <> 0 Тогда
			ТаблицаКЗачету.Сортировать("Период Возр");
			Для Каждого СтрокаТаблицыКЗачету Из ТаблицаКЗачету Цикл
				// Считается зачтенной сумма, которая позже была отражена в учете как начисленная
				Если СтрокаТаблицыКЗачету.Период <= СтрокаТаблицыЗачета.Период
					Или СтрокаТаблицыЗачета.Сумма = 0 Тогда
					Продолжить;
				КонецЕсли;
				ЗачтеннаяСумма = Мин(СтрокаТаблицыКЗачету.Сумма, СтрокаТаблицыЗачета.Сумма);
				СтрокаТаблицыКЗачету.Сумма = СтрокаТаблицыКЗачету.Сумма - ЗачтеннаяСумма;
				СтрокаТаблицыЗачета.Сумма  = СтрокаТаблицыЗачета.Сумма - ЗачтеннаяСумма;
				МассивОбработанныхСтрок.Добавить(СтрокаТаблицыКЗачету);
			КонецЦикла;
		КонецЕсли;
		Для Каждого СтрокаТаблицыКЗачету Из МассивОбработанныхСтрок Цикл
			ТекущаяСтрока = ТаблицаРасчета.Найти(СтрокаТаблицыКЗачету.НомерСтроки, "НомерСтроки");
			Если ТекущаяСтрока <> Неопределено Тогда
				ТекущаяСтрока.Сумма = СтрокаТаблицыКЗачету.Сумма;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОчиститьТаблицуОтПустыхЗаписей(ТаблицаРасчета);
	
КонецПроцедуры

Процедура ТекущиеОстаткиПоНалогам(ОстаткиПоНалогам, ТаблицаРасчеты, УчтенныеДанные, Отбор, УточнятьПриоритет)
	
	ДатаСменыПоследовательностиЗачетаУплат = ДатаСменыПоследовательностиЗачетаУплат();
	
	ЭтоНалог       = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Отбор, "ЭтоНалог",       Ложь);
	Ретроспективно = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Отбор, "Ретроспективно", Ложь);
	
	Период         = НачалоДня(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Отбор, "Период",         Дата('00010101')));
	ПериодОплаты   = НачалоДня(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Отбор, "ПериодОплаты",   Дата('00010101')));
	
	ДополнитьОграничениеПериода = ЭтоНалог И Не Ретроспективно И УточнятьПриоритет;
	
	ОстаткиПоНалогам.Очистить();
	Для Каждого СтрокаТаблицы ИЗ ТаблицаРасчеты Цикл
		Если ЗначениеЗаполнено(Период) Тогда
			ВыполненоУсловиеПериода = НачалоДня(СтрокаТаблицы.Период) = Период;
		Иначе
			ВыполненоУсловиеПериода = ?(Ретроспективно, НачалоДня(СтрокаТаблицы.Период) <= ПериодОплаты, НачалоДня(СтрокаТаблицы.Период) > ПериодОплаты);
		КонецЕсли;
		Если ДополнитьОграничениеПериода Тогда
			ВыполненоУсловиеПериода = ВыполненоУсловиеПериода И СтрокаТаблицы.Период < ДатаСменыПоследовательностиЗачетаУплат;
		КонецЕсли;
		Если СтрокаТаблицы.ЭтоНалог = ЭтоНалог И ВыполненоУсловиеПериода Тогда
			НепогашеннаяСумма = СтрокаТаблицы.Сумма;
			УчтенныеСтроки = УчтенныеДанные.НайтиСтроки(Новый Структура("НомерСтроки", СтрокаТаблицы.НомерСтроки));
			Для Каждого УчтеннаяСтрока Из УчтенныеСтроки Цикл
				НепогашеннаяСумма = Макс(0, НепогашеннаяСумма - УчтеннаяСтрока.Сумма);
			КонецЦикла;
			Если НепогашеннаяСумма > 0 Тогда
				НоваяСтрока = ОстаткиПоНалогам.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.Сумма = НепогашеннаяСумма;
				// (*5)
				УточнитьПриоритетЗачета(УточнятьПриоритет, НоваяСтрока.Приоритет);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УточнитьПриоритетЗачета(УточнитьПриоритет, Приоритет)
	
	Если Не УточнитьПриоритет Тогда
		Возврат;
	КонецЕсли;
	
	// До даты смены последовательности НДФЛ зачитываем по-старому
	Если Приоритет = 3 Тогда
		Приоритет = 1;
	ИначеЕсли Приоритет = 5 Тогда
		Приоритет = 2;
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспределитьПредварительнуюОплатуПоТаблицеДвижений(ТаблицаСуммыЕдиногоНалоговогоПлатежа, ТаблицаРеквизиты, ТаблицаНалогов, Движения, Отказ)
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	СуммыЕдиногоНалоговогоПлатежа = ТаблицаСуммыЕдиногоНалоговогоПлатежа.Скопировать();
	
	НаборДвиженийНалог = Движения.РасчетыПоНалогамНаЕдиномНалоговомСчете;
	
	УстановитьПривилегированныйРежим(Истина);
	
    ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Организация, "ГоловнаяОрганизация");
	
	Если ТаблицаНалогов.Колонки.Найти("ГоловнаяОрганизация") = Неопределено Тогда
		ТаблицаНалогов.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	ТаблицаНалогов.ЗаполнитьЗначения(ГоловнаяОрганизация,   "ГоловнаяОрганизация");
	
	Если ТаблицаНалогов.Колонки.Найти("Организация") = Неопределено Тогда
		ТаблицаНалогов.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	ТаблицаНалогов.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	
	НоваяВерсияПоследовательностиЗачетаУплатНДФЛ = Реквизиты.Период >= ДатаСменыПоследовательностиЗачетаУплат();
	НоваяВерсияПоследовательностиЗачетаУплатСтраховыеВзносы = Реквизиты.Период >= ДатаПриоритезацииУведомленияПоСтраховымВзносам();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",                            ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Организация",                                    Реквизиты.Организация);
	Запрос.УстановитьПараметр("ПериодОстатков",                                 Новый Граница(Реквизиты.Регистратор.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ПериодОплаты",                                   НачалоДня(Реквизиты.Период));
	Запрос.УстановитьПараметр("ТаблицаНалогов",                                 ТаблицаНалогов);
	Запрос.УстановитьПараметр("НоваяВерсияПоследовательностиЗачетаУплатНДФЛ",   НоваяВерсияПоследовательностиЗачетаУплатНДФЛ);
	Запрос.УстановитьПараметр("ВидыНалоговНДФЛНалоговогоАгента",                ЕдиныйНалоговыйСчетПовтИсп.ВидыНалоговНДФЛНалоговогоАгента());
	Запрос.УстановитьПараметр("НоваяВерсияПоследовательностиЗачетаУплатСтраховыеВзносы", НоваяВерсияПоследовательностиЗачетаУплатСтраховыеВзносы);
	Запрос.УстановитьПараметр("ВидыНалоговСтраховыеВзносы",                     ЕдиныйНалоговыйСчетПовтИсп.ВидыНалоговСтраховыеВзносы());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНалогов.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ТаблицаНалогов.КодПоОКТМО КАК КодПоОКТМО,
	|	ТаблицаНалогов.Налог КАК Налог,
	|	ТаблицаНалогов.КодБК КАК КодБК,
	|	ТаблицаНалогов.СчетУчета КАК СчетУчета,
	|	ТаблицаНалогов.СрокУплаты КАК СрокУплаты,
	|	ТаблицаНалогов.Организация КАК Организация,
	|	ТаблицаНалогов.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ТаблицаНалогов.Сумма КАК Сумма,
	|	ТаблицаНалогов.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_ТаблицаНалогов
	|ИЗ
	|	&ТаблицаНалогов КАК ТаблицаНалогов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаНалогов.Организация КАК Организация,
	|	ВТ_ТаблицаНалогов.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВТ_ТаблицаНалогов.СчетУчета КАК СчетУчета,
	|	ВТ_ТаблицаНалогов.Налог КАК Налог,
	|	ВТ_ТаблицаНалогов.КодБК КАК КодБК,
	|	ВТ_ТаблицаНалогов.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВТ_ТаблицаНалогов.КодПоОКТМО КАК КодПоОКТМО,
	|	ВТ_ТаблицаНалогов.СрокУплаты КАК СрокУплаты,
	|	СУММА(ВТ_ТаблицаНалогов.Сумма) КАК Сумма,
	|	ЛОЖЬ КАК Недоимка,
	|	МАКСИМУМ(ВТ_ТаблицаНалогов.НомерСтроки) КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА НЕ &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ
	|			ТОГДА 2
	|		КОГДА ВТ_ТаблицаНалогов.Налог В (&ВидыНалоговНДФЛНалоговогоАгента)
	|			ТОГДА 2
	|		КОГДА &НоваяВерсияПоследовательностиЗачетаУплатСтраховыеВзносы
	|				И ВТ_ТаблицаНалогов.Налог В (&ВидыНалоговСтраховыеВзносы)
	|			ТОГДА 3
	|		ИНАЧЕ 4
	|	КОНЕЦ КАК Приоритет,
	|	ИСТИНА КАК ЭтоНалог
	|ИЗ
	|	ВТ_ТаблицаНалогов КАК ВТ_ТаблицаНалогов
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ВТ_ТаблицаНалогов.СрокУплаты, ДЕНЬ) >= &ПериодОплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаНалогов.КодБК,
	|	ВТ_ТаблицаНалогов.СчетУчета,
	|	ВТ_ТаблицаНалогов.СрокУплаты,
	|	ВТ_ТаблицаНалогов.ГоловнаяОрганизация,
	|	ВТ_ТаблицаНалогов.Организация,
	|	ВТ_ТаблицаНалогов.Налог,
	|	ВТ_ТаблицаНалогов.РегистрацияВНалоговомОргане,
	|	ВТ_ТаблицаНалогов.КодПоОКТМО,
	|	ВЫБОР
	|		КОГДА НЕ &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ
	|			ТОГДА 2
	|		КОГДА ВТ_ТаблицаНалогов.Налог В (&ВидыНалоговНДФЛНалоговогоАгента)
	|			ТОГДА 2
	|		КОГДА &НоваяВерсияПоследовательностиЗачетаУплатСтраховыеВзносы
	|				И ВТ_ТаблицаНалогов.Налог В (&ВидыНалоговСтраховыеВзносы)
	|			ТОГДА 3
	|		ИНАЧЕ 4
	|	КОНЕЦ";
	
	ОстаткиПоНалогам = Запрос.Выполнить().Выгрузить();
	ОстаткиПоНалогам.Индексы.Добавить("СрокУплаты");
	
	РаспределениеСуммыОплатыПоСрокамИПриоритетамПогашения(Реквизиты, СуммыЕдиногоНалоговогоПлатежа, ОстаткиПоНалогам, НаборДвиженийНалог);
	
	ТаблицаНалоги = НаборДвиженийНалог.Выгрузить().Скопировать(Новый Структура("ВидДвижения",ВидДвиженияНакопления.Расход));
	ПодготовитьТаблицуСписания(ТаблицаНалоги, ТаблицаСуммыЕдиногоНалоговогоПлатежа);
	
	СформироватьДвиженияНаЕдиномНалоговомСчете(ТаблицаРеквизиты, ТаблицаНалоги, Движения, Отказ);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура РаспределениеСуммыОплатыПоСрокам(Реквизиты, СуммыЕдиногоНалоговогоПлатежа, ОстаткиПоНалогам, СрокиУплаты, НаборДвиженийНалог, УчтенныеДанные = Неопределено)
	
	ИспользуетсяЕдиныйНалоговыйПлатеж = Реквизиты.Период >= '20230101';
	
	НоваяВерсияПоследовательностиЗачетаУплатНДФЛ = Реквизиты.Период >= ДатаСменыПоследовательностиЗачетаУплат();
	ВсеВидыНалоговНДФЛ = ЕдиныйНалоговыйСчетПовтИсп.ВсеВидыНалоговНДФЛ();
	
	НоваяВерсияПоследовательностиЗачетаУплатСтраховыеВзносы = Реквизиты.Период >= ДатаПриоритезацииУведомленияПоСтраховымВзносам();
	ВидыНалоговСтраховыеВзносы = ЕдиныйНалоговыйСчетПовтИсп.ВидыНалоговСтраховыеВзносы();
	
	УточнятьДатуОперации = ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ЗакрытиеМесяца");
	
	ОтборПоСрокам = Новый Структура("СрокУплаты");
	ОтборПоИзмерениям = Новый Структура("ГоловнаяОрганизация, Организация, РегистрацияВНалоговомОргане, КодПоОКТМО, Налог, КодБК, СчетУчета, СрокУплаты");
	
	Для Каждого СтрокаТаблицыПлатежа Из СуммыЕдиногоНалоговогоПлатежа Цикл
		Если СтрокаТаблицыПлатежа.Сумма <= 0 Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаТаблицы Из СрокиУплаты Цикл
			ОтборПоСрокам.СрокУплаты = СтрокаТаблицы.СрокУплаты;
			ОстаткиПоДате = ОстаткиПоНалогам.Скопировать(ОтборПоСрокам);
			
			СуммаОстаток = ОстаткиПоДате.Итог("Сумма");
			СуммаПогашения = Мин(СтрокаТаблицыПлатежа.Сумма, СуммаОстаток);
			Если СуммаПогашения <> 0 Тогда
				
				Коэффициенты = ОстаткиПоДате.ВыгрузитьКолонку("Сумма");
				РаспределеннаяСумма = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаПогашения, Коэффициенты, 2);
				Если РаспределеннаяСумма = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ОстаткиПоДате.ЗагрузитьКолонку(РаспределеннаяСумма, "Сумма");
				
				Для Каждого СтрокаТаблицыПоДате Из ОстаткиПоДате Цикл
					
					Если СтрокаТаблицыПоДате.Сумма = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = НаборДвиженийНалог.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыПоДате);
					
					Если ИспользуетсяЕдиныйНалоговыйПлатеж И УточнятьДатуОперации Тогда
						// Уточнение периода уплаты - привязываемся к дате операции
						
						ПриоритетныйЗачетНДФЛ = НоваяВерсияПоследовательностиЗачетаУплатНДФЛ
							И ВсеВидыНалоговНДФЛ.Найти(НоваяСтрока.Налог) <> Неопределено;
						
						ПриоритетныйЗачетСтраховыхВзносов = НоваяВерсияПоследовательностиЗачетаУплатСтраховыеВзносы
							И ВидыНалоговСтраховыеВзносы.Найти(НоваяСтрока.Налог) <> Неопределено;
						
						Если СтрокаТаблицыПлатежа.ДатаРегистратора >= НоваяСтрока.СрокУплаты 
							Или ПриоритетныйЗачетНДФЛ
							Или ПриоритетныйЗачетСтраховыхВзносов
							Или НоваяСтрока.СрокУплаты < НачалоМесяца(Реквизиты.Период) Тогда
							ДатаОперации = Макс(НоваяСтрока.Период, СтрокаТаблицыПлатежа.ДатаРегистратора);
						Иначе
							ДатаОперации = НоваяСтрока.СрокУплаты;
						КонецЕсли;
						НоваяСтрока.Период = КонецДня(ДатаОперации);
					КонецЕсли;
					
					Если УчтенныеДанные <> Неопределено Тогда
						ЗаполнитьЗначенияСвойств(УчтенныеДанные.Добавить(), СтрокаТаблицыПоДате);
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(ОтборПоИзмерениям, НоваяСтрока);
					СтрокиИсходнойТаблицы = ОстаткиПоНалогам.НайтиСтроки(ОтборПоИзмерениям);
					СтрокиИсходнойТаблицы[0].Сумма = СтрокиИсходнойТаблицы[0].Сумма - НоваяСтрока.Сумма;
					
					НоваяСтрока.ВидДвижения       = ВидДвиженияНакопления.Расход;
					НоваяСтрока.ПлатежныйДокумент = СтрокаТаблицыПлатежа.ПлатежныйДокумент;
				КонецЦикла;
				
				СтрокаТаблицыПлатежа.Сумма = СтрокаТаблицыПлатежа.Сумма - СуммаПогашения;
				
			КонецЕсли;
			
			Если СтрокаТаблицыПлатежа.Сумма <= 0 Тогда
				СтрокаТаблицыПлатежа.Сумма = 0;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	НаборДвиженийНалог.Записывать = Истина;
	
КонецПроцедуры

Процедура РаспределениеСуммыОплатыПоСрокамИПриоритетамПогашения(Реквизиты, СуммыЕдиногоНалоговогоПлатежа, ОстаткиПоНалогам, НаборДвиженийНалог, УчтенныеДанные = Неопределено)
	
	ДатаСменыАлгоритмаЗачетаУплат = ДатаСменыАлгоритмаЗачетаУплат();
	ПереходныйПериод              = ВерсияАлгоритмаЗачетаУплат(НачалоМесяца(Реквизиты.Период)) = 1;
	
	ВременнаяТаблицаОстатков = ОстаткиПоНалогам.СкопироватьКолонки();
	ВременнаяТаблицаОплат    = СуммыЕдиногоНалоговогоПлатежа.СкопироватьКолонки();
	
	// Приоритеты:
	Если Реквизиты.Период < ДатаСменыПоследовательностиЗачетаУплат() Тогда
		// - 1. Недоимка прочие налоги
		// - 2. Текущий платеж прочие налоги
		ЧислоПриоритетов = 2;
	Иначе
		// - 1. Недоимка НДФЛ
		// - 2. Текущий платеж НДФЛ
		// - 3. Недоимка прочие налоги
		//   4. Текущий платеж по взносам (начиная с 01.10.2023 - вступления в силу 389-ФЗ, до этого момента страховые взносы идут с приоритетом 5)
		// - 5. Текущий платеж прочие налоги
		ЧислоПриоритетов = 5;
	КонецЕсли;
	
	Для Приоритет = 1 По ЧислоПриоритетов Цикл
		// Погашение недоимки (определяемой однозначно определенной по сроку платежа)
		ОстаткиПоТекущимНалогам = ОстаткиПоНалогам.Скопировать(Новый Структура("Недоимка, Приоритет, ЭтоНалог", Истина, Приоритет, Истина));
		Если ОстаткиПоТекущимНалогам.Итог("Сумма") > 0 И СуммыЕдиногоНалоговогоПлатежа.Итог("Сумма") > 0 Тогда
			// Сначала очистим таблицы от пустых записей, чтобы уменьшить количество итераций
			ОчиститьТаблицуОтПустыхЗаписей(ОстаткиПоТекущимНалогам);
			ОчиститьТаблицуОтПустыхЗаписей(СуммыЕдиногоНалоговогоПлатежа);
			
			СрокиУплаты = ОстаткиПоТекущимНалогам.Скопировать(Новый Структура("Недоимка", Истина), "СрокУплаты, Недоимка");
			СрокиУплаты.Свернуть("СрокУплаты, Недоимка", );
			СрокиУплаты.Сортировать("СрокУплаты");
			РаспределениеСуммыОплатыПоСрокам(Реквизиты,
				СуммыЕдиногоНалоговогоПлатежа,
				ОстаткиПоТекущимНалогам,
				СрокиУплаты,
				НаборДвиженийНалог,
				УчтенныеДанные);
			// Принудительно сменим приоритет, чтобы последующее распределение обязательно выполнилось.
			Приоритет = Приоритет + 1;
		КонецЕсли;
		// Погашение текущей задолженности или выявленной недоимки периода проведения
		ОстаткиПоТекущимНалогам = ОстаткиПоНалогам.Скопировать(Новый Структура("Недоимка, Приоритет, ЭтоНалог", Ложь, Приоритет, Истина));
		
		Если ПереходныйПериод Тогда
			Если СуммыЕдиногоНалоговогоПлатежа.Итог("Сумма") > 0 Тогда
				// Сначала очистим таблицы от пустых записей, чтобы уменьшить количество итераций
				ОчиститьТаблицуОтПустыхЗаписей(ОстаткиПоТекущимНалогам);
				ОчиститьТаблицуОтПустыхЗаписей(СуммыЕдиногоНалоговогоПлатежа);
				
				// При условии, что есть что распределять
				// Сначала обработаем налоги и платежи до даты изменения алгоритма - "по старому"
				ВременнаяТаблицаОстатков.Очистить();
				ВременнаяТаблицаОплат.Очистить();
				Для Каждого СтрокаТаблицыОстатков Из ОстаткиПоТекущимНалогам Цикл
					Если СтрокаТаблицыОстатков.СрокУплаты < ДатаСменыАлгоритмаЗачетаУплат Тогда
						ЗаполнитьЗначенияСвойств(ВременнаяТаблицаОстатков.Добавить(), СтрокаТаблицыОстатков);
					КонецЕсли;
				КонецЦикла;
				Если ВременнаяТаблицаОстатков.Итог("Сумма") > 0 Тогда
					Для Каждого СтрокаТаблицыПлатежа Из СуммыЕдиногоНалоговогоПлатежа Цикл
						Если СтрокаТаблицыПлатежа.ДатаРегистратора < ДатаСменыАлгоритмаЗачетаУплат Тогда
							ЗаполнитьЗначенияСвойств(ВременнаяТаблицаОплат.Добавить(), СтрокаТаблицыПлатежа);
						КонецЕсли;
					КонецЦикла;
					СрокиУплаты = ВременнаяТаблицаОстатков.Скопировать(
						Новый Структура("Недоимка, Приоритет", Ложь, Приоритет), "СрокУплаты, Недоимка");
					СрокиУплаты.Свернуть("СрокУплаты", );
					СрокиУплаты.Сортировать("СрокУплаты");
					РаспределениеСуммыОплатыПоСрокам(Реквизиты,
						ВременнаяТаблицаОплат,
						ВременнаяТаблицаОстатков,
						СрокиУплаты,
						НаборДвиженийНалог,
						УчтенныеДанные);
					
					// Учтем списанные суммы
					Для Каждого СтрокаТаблицыПлатежа Из ВременнаяТаблицаОплат Цикл
						ТекущаяСтрокаПлатежа = СуммыЕдиногоНалоговогоПлатежа.Найти(СтрокаТаблицыПлатежа.ПлатежныйДокумент, "ПлатежныйДокумент");
						Если ТекущаяСтрокаПлатежа <> Неопределено Тогда
							ЗаполнитьЗначенияСвойств(ТекущаяСтрокаПлатежа, СтрокаТаблицыПлатежа);
						КонецЕсли;
					КонецЦикла;
					Для Каждого СтрокаТаблицыОстатков Из ВременнаяТаблицаОстатков Цикл
						ТекущаяСтрокаОстатков = ОстаткиПоТекущимНалогам.Найти(СтрокаТаблицыОстатков.НомерСтроки, "НомерСтроки");
						Если ТекущаяСтрокаОстатков <> Неопределено Тогда
							ЗаполнитьЗначенияСвойств(ТекущаяСтрокаОстатков, СтрокаТаблицыОстатков);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ОстаткиПоТекущимНалогам.Итог("Сумма") > 0 И СуммыЕдиногоНалоговогоПлатежа.Итог("Сумма") > 0 Тогда
			// При условии, что есть что распределять и погашать
			
			// Принцип следующий:
			//   Перебираем таблицу остатков и ищем в таблице оплат суммы со сроками более ранними чем срок уплаты налога
			//   Если сумма остатка погашена не полностью (оперативная недоимка) переходим к перебору таблицы оплат со сроками
			//   болеее поздними чем срок уплаты налога
			
			// Сначала очистим таблицы от пустых записей, чтобы уменьшить количество итераций
			ОчиститьТаблицуОтПустыхЗаписей(ОстаткиПоТекущимНалогам);
			ОчиститьТаблицуОтПустыхЗаписей(СуммыЕдиногоНалоговогоПлатежа);
			
			СрокиУплаты = ОстаткиПоТекущимНалогам.Скопировать(
				Новый Структура("Недоимка, Приоритет, ЭтоНалог", Ложь, Приоритет, Истина), "СрокУплаты, Недоимка");
			СрокиУплаты.Свернуть("СрокУплаты", );
			СрокиУплаты.Сортировать("СрокУплаты");
			
			ОтборПоСрокам = Новый Структура("СрокУплаты");
			
			Для Каждого СтрокаТаблицы Из СрокиУплаты Цикл
				
				ОтборПоСрокам.СрокУплаты = СтрокаТаблицы.СрокУплаты;
				ВременнаяТаблицаОстатков = ОстаткиПоТекущимНалогам.Скопировать(ОтборПоСрокам);
				
				ВременнаяТаблицаОплат.Очистить();
				Для Каждого СтрокаТаблицыПлатежа Из СуммыЕдиногоНалоговогоПлатежа Цикл
					Если СтрокаТаблицыПлатежа.Сумма > 0 И НачалоДня(СтрокаТаблицыПлатежа.ДатаРегистратора) <= СтрокаТаблицы.СрокУплаты Тогда
						ЗаполнитьЗначенияСвойств(ВременнаяТаблицаОплат.Добавить(), СтрокаТаблицыПлатежа);
					КонецЕсли;
				КонецЦикла;
				ВременнаяТаблицаОплат.Сортировать("ДатаРегистратора Убыв");
				
				// Погасим задолженнность уплатами, совершенными до наступления срока платежа
				СрокиУплатыВрем = ВременнаяТаблицаОстатков.Скопировать(, "СрокУплаты");
				СрокиУплатыВрем.Свернуть("СрокУплаты", );
				СрокиУплатыВрем.Сортировать("СрокУплаты");
				РаспределениеСуммыОплатыПоСрокам(Реквизиты,
					ВременнаяТаблицаОплат,
					ВременнаяТаблицаОстатков,
					СрокиУплатыВрем,
					НаборДвиженийНалог,
					УчтенныеДанные);
				
				// Учтем списанные суммы
				Для Каждого СтрокаТаблицыПлатежа Из ВременнаяТаблицаОплат Цикл
					ТекущаяСтрокаПлатежа = СуммыЕдиногоНалоговогоПлатежа.Найти(СтрокаТаблицыПлатежа.ПлатежныйДокумент, "ПлатежныйДокумент");
					Если ТекущаяСтрокаПлатежа <> Неопределено Тогда
						ЗаполнитьЗначенияСвойств(ТекущаяСтрокаПлатежа, СтрокаТаблицыПлатежа);
					КонецЕсли;
				КонецЦикла;
				
				// Задолженность не погашена полностью: появилась оперативная недоимка - ее погашают документы уплаты после срока платежа
				Если ВременнаяТаблицаОстатков.Итог("Сумма") > 0 Тогда
					РаспределениеСуммыОплатыПоСрокам(Реквизиты,
						СуммыЕдиногоНалоговогоПлатежа,
						ВременнаяТаблицаОстатков,
						СрокиУплатыВрем,
						НаборДвиженийНалог,
						УчтенныеДанные);
				КонецЕсли;
				
				Если СуммыЕдиногоНалоговогоПлатежа.Итог("Сумма") > 0 Тогда
					// Очистим таблицу от пустых записей, чтобы уменьшить количество итераций
					ОчиститьТаблицуОтПустыхЗаписей(СуммыЕдиногоНалоговогоПлатежа);
				Иначе
					// Распределять больше нечего
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура РаспределениеСуммыОплатыСанкцийПоПриоритетам(Реквизиты, СуммыЕдиногоНалоговогоПлатежа, ОстаткиПоНалогам, НаборДвиженийСанкции, УчтенныеДанные = Неопределено)
	
	ИспользуетсяЕдиныйНалоговыйПлатеж = Реквизиты.Период >= '20230101';
	
	// Приоритеты:
	Если Реквизиты.Период < ДатаСменыПоследовательностиЗачетаУплат() Тогда
		// - 3. Пени
		// - 4. Проценты
		// - 5. Штрафы
		НачальноеЗначение = 3;
		ЧислоПриоритетов  = 5;
	Иначе
		// - 6. Пени
		// - 7. Проценты
		// - 8. Штрафы
		НачальноеЗначение = 6;
		ЧислоПриоритетов  = 8;
	КонецЕсли;
	
	Для Приоритет = НачальноеЗначение По ЧислоПриоритетов Цикл
		ОстаткиПоСанкциям = ОстаткиПоНалогам.Скопировать(Новый Структура("Приоритет", Приоритет));
		Если СуммыЕдиногоНалоговогоПлатежа.Итог("Сумма") > 0 Тогда
			// При условии, что есть что погашать
			Для Каждого СтрокаТаблицы Из ОстаткиПоСанкциям Цикл
				Для Каждого СтрокаТаблицыПлатежа Из СуммыЕдиногоНалоговогоПлатежа Цикл
					Если СтрокаТаблицыПлатежа.Сумма <= 0 Тогда
						Продолжить;
					КонецЕсли;
					СуммаПогашения = Мин(СтрокаТаблицыПлатежа.Сумма, СтрокаТаблицы.Сумма);
					Если СуммаПогашения <> 0 Тогда
						
						НоваяСтрока = НаборДвиженийСанкции.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
						НоваяСтрока.Сумма             = СуммаПогашения;
						НоваяСтрока.ВидДвижения       = ВидДвиженияНакопления.Расход;
						НоваяСтрока.ПлатежныйДокумент = СтрокаТаблицыПлатежа.ПлатежныйДокумент;
						
						Если ИспользуетсяЕдиныйНалоговыйПлатеж Тогда
							// Уточнение периода уплаты - привязываемся к дате операции
							Если СтрокаТаблицыПлатежа.ДатаРегистратора < НачалоМесяца(Реквизиты.Период) Тогда
								ДатаОперации = НоваяСтрока.Период;
							Иначе
								ДатаОперации = Макс(СтрокаТаблицыПлатежа.ДатаРегистратора, НоваяСтрока.Период);
							КонецЕсли;
							НоваяСтрока.Период = ДатаОперации;
						КонецЕсли;
						
						Если УчтенныеДанные <> Неопределено Тогда
							НоваяСтрока = УчтенныеДанные.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
							НоваяСтрока.Сумма = СуммаПогашения;
						КонецЕсли;
						
						СтрокаТаблицы.Сумма        = СтрокаТаблицы.Сумма - СуммаПогашения;
						СтрокаТаблицыПлатежа.Сумма = СтрокаТаблицыПлатежа.Сумма - СуммаПогашения;
					КонецЕсли;
					Если СтрокаТаблицыПлатежа.Сумма <= 0 Тогда
						СтрокаТаблицыПлатежа.Сумма = 0;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			НаборДвиженийСанкции.Записывать = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьТаблицуОтПустыхЗаписей(ТаблицаДанных)
	
	МассивСтрокКУдалению = ТаблицаДанных.НайтиСтроки(Новый Структура("Сумма", 0));
	Для Каждого СтрокаМассива Из МассивСтрокКУдалению Цикл
		ТаблицаДанных.Удалить(СтрокаМассива);
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияУСНПоПредыдущимСрокамУплаты(НаборДвижений, СтрокаТаблицы, Реквизиты, ГоловнаяОрганизация)
	
	// Выберем все положительные движения за указанный налоговый период,
	// а также задолженность на дату создания уведомления
	НалоговыйПериод = НачалоГода(СтрокаТаблицы.СрокУплаты); 
	ВидыНалогаУСН = Новый Массив;
	ВидыНалогаУСН.Добавить(Справочники.ВидыНалогов.АвансовыйПлатежПриУСН);
	ВидыНалогаУСН.Добавить(Справочники.ВидыНалогов.АвансовыйПлатежПриУСНРасходы); 
	ВидыНалогаУСН.Добавить(Справочники.ВидыНалогов.ЕдиныйНалогПриУСН); 
	ВидыНалогаУСН.Добавить(Справочники.ВидыНалогов.ЕдиныйНалогПриУСНРасходы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.СрокУплаты КАК СрокУплаты,
		|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.СуммаПриход КАК Сумма
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Регистратор,
		|			Налог В (&ВидыНалогаУСН)
		|				И ГоловнаяОрганизация = &Организация) КАК РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	СрокУплаты УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СуммаОстаток КАК Задолженность
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете.Остатки(
		|			&Период,
		|			ГоловнаяОрганизация = &Организация
		|				И Налог В (&ВидыНалогаУСН)) КАК РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки";
	
	Запрос.УстановитьПараметр("НачалоПериода", НалоговыйПериод);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтрокаТаблицы.СрокУплаты));
	Запрос.УстановитьПараметр("ВидыНалогаУСН", ВидыНалогаУСН);
	Запрос.УстановитьПараметр("Организация", ГоловнаяОрганизация);
	Период = Новый Граница(КонецМесяца(ДобавитьМесяц(Реквизиты.Период, -1)), ВидГраницы.Исключая);
	Запрос.УстановитьПараметр("Период", Период);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаНачислений = Результат[0].Выгрузить();
	
	РезультатЗадолженности = Результат[1].Выбрать();
	Если РезультатЗадолженности.Следующий() Тогда
		Задолженность = РезультатЗадолженности.Задолженность;
	Иначе
		Задолженность = 0;
	КонецЕсли;

	СуммаСторно = Мин(- СтрокаТаблицы.Сумма, Задолженность);	
	Для Каждого СтрокаНачисления Из ТаблицаНачислений Цикл
		Если СуммаСторно > 0 Тогда
			НоваяСтрока = НаборДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.ПлатежныйДокумент = Реквизиты.Регистратор;
			НоваяСтрока.ГоловнаяОрганизация = ГоловнаяОрганизация;
			НоваяСтрока.Активность = Истина;
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
			НоваяСтрока.Период = КонецМесяца(ДобавитьМесяц(Реквизиты.Период, -1));
			
			СуммаКЗачету = Мин(СтрокаНачисления.Сумма, СуммаСторно);
			НоваяСтрока.Сумма = СуммаКЗачету;
			НоваяСтрока.СрокУплаты = СтрокаНачисления.СрокУплаты;
			СуммаСторно = СуммаСторно - СуммаКЗачету;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;   

КонецПроцедуры

Функция СуммаПлатежаКВозврату(ТаблицаНалоги, ГоловнаяОрганизация, Период)
	
	СуммаКЗачету = 0;
	СрокУплаты = Дата(1, 1, 1);
	Для Каждого СтрокаТаблицы Из ТаблицаНалоги Цикл
		Если СтрокаТаблицы.Сумма < 0
			И ЕдиныйНалоговыйСчет.МожноИспользоватьОтрицательнуюСуммуВУведомлении(СтрокаТаблицы.Налог) Тогда
			СуммаКЗачету = СуммаКЗачету - СтрокаТаблицы.Сумма;
			// Предполагаем что в одном уведомлени не может встретиться два налога: УСН и ЕСХН
			СчетУчета = СтрокаТаблицы.СчетУчета;
			СрокУплаты = Макс(СрокУплаты, СтрокаТаблицы.СрокУплаты);
		КонецЕсли;
	КонецЦикла;
	
	// Если не было строк с отрицательными суммами по УСН или ЕСХН, то и считать дальше нет смысла
	Если СуммаКЗачету = 0 Тогда
		Возврат СуммаКЗачету;
	КонецЕсли;
	
	// Определим период уплаты
	// За год уведомление не отправляется, поэтому уведомление со сроком первого квартала
	// относится к текущему году
	// Также в первом квартале никогда не должно получиться отрицательной суммы
 	НомерКвартала = ОбщегоНазначенияУНФКлиентСервер.НомерКвартала(ДобавитьМесяц(СрокУплаты, -1));
	Если НомерКвартала = 1 Тогда
		Возврат 0;
	Иначе
		НалоговыйПериод = НачалоГода(СрокУплаты);
	КонецЕсли;
	
	// Нужен оборот расход (зачет в счет налога)
	// Счет, т.к. может быть или УСН или ЕСХН
	// Конец периода = срок уплаты (не смотрим в будущее)
	// Отсекаем проводки расхода, сделанные Уведомлением
	// Формируем задолженность без учета созданного уведомления
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.СуммаРасход), 0) КАК СуммаРасход
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Регистратор,
		|			СчетУчета = &СчетУчета
		|				И ГоловнаяОрганизация = &Организация) КАК РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.Регистратор) <> ТИП(Документ.УведомлениеОбИсчисленныхСуммахНалогов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СуммаОстаток КАК Задолженность
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете.Остатки(
		|			&Период,
		|			ГоловнаяОрганизация = &Организация
		|				И СчетУчета = &СчетУчета) КАК РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки";
	
	Запрос.УстановитьПараметр("НачалоПериода", НалоговыйПериод);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СрокУплаты));
	Запрос.УстановитьПараметр("СчетУчета", СчетУчета);
	Запрос.УстановитьПараметр("Организация", ГоловнаяОрганизация);
	ПериодОстатков = Новый Граница(КонецМесяца(ДобавитьМесяц(Период, -1)), ВидГраницы.Исключая);
	Запрос.УстановитьПараметр("Период", ПериодОстатков);
	
	Результат = Запрос.ВыполнитьПакет();
	
	РезультатЗадолженности = Результат[1].Выбрать();
	Если РезультатЗадолженности.Следующий() Тогда
		Задолженность = РезультатЗадолженности.Задолженность;
		СуммаКЗачету = Макс(0, СуммаКЗачету - Задолженность);
	КонецЕсли;
	
	Выборка = Результат[0].Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаКЗачету = Мин(СуммаКЗачету, Выборка.СуммаРасход);
	Иначе
		Возврат 0;
	КонецЕсли;
	
	Возврат СуммаКЗачету;
КонецФункции

Процедура СформироватьДвиженияУСНПоПредыдущимСрокамУплатыРасчетыПоНалогам(СтрокаТаблицы, Реквизиты, Движения, ГоловнаяОрганизация)
	
	// Выберем все положительные движения за указанный налоговый период
	НалоговыйПериод = НачалоГода(СтрокаТаблицы.СрокУплаты);  
	ВидыНалогаУСН = Новый Массив;
	ВидыНалогаУСН.Добавить(Справочники.ВидыНалогов.АвансовыйПлатежПриУСН);
	ВидыНалогаУСН.Добавить(Справочники.ВидыНалогов.АвансовыйПлатежПриУСНРасходы); 
	ВидыНалогаУСН.Добавить(Справочники.ВидыНалогов.ЕдиныйНалогПриУСН); 
	ВидыНалогаУСН.Добавить(Справочники.ВидыНалогов.ЕдиныйНалогПриУСНРасходы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыПоНалогамОбороты.СрокУплаты КАК СрокУплаты,
		|	РасчетыПоНалогамОбороты.СуммаПриход КАК Сумма
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Регистратор,
		|			ВидНалога В (&ВидыНалогаУСН)
		|				И Организация = &Организация) КАК РасчетыПоНалогамОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	СрокУплаты УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыПоНалогамОстатки.СуммаОстаток КАК Задолженность
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам.Остатки(
		|			&Период,
		|			Организация = &Организация
		|				И ВидНалога В (&ВидыНалогаУСН)) КАК РасчетыПоНалогамОстатки";
	
	Запрос.УстановитьПараметр("НачалоПериода", НалоговыйПериод);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтрокаТаблицы.СрокУплаты));
	Запрос.УстановитьПараметр("ВидыНалогаУСН", ВидыНалогаУСН);
	Запрос.УстановитьПараметр("Организация", ГоловнаяОрганизация);
	Период = Новый Граница(КонецМесяца(ДобавитьМесяц(Реквизиты.Период, -1)), ВидГраницы.Исключая);
	Запрос.УстановитьПараметр("Период", Период);

	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаНачислений = Результат[0].Выгрузить();
	
	РезультатЗадолженности = Результат[1].Выбрать();
	Если РезультатЗадолженности.Следующий() Тогда
		Задолженность = РезультатЗадолженности.Задолженность;
	Иначе
		Задолженность = 0;
	КонецЕсли;            
	
	НаборДвижений = Движения.РасчетыПоНалогам;

	СуммаСторно = Мин(- СтрокаТаблицы.Сумма, Задолженность);	
	Для Каждого СтрокаНачисления Из ТаблицаНачислений Цикл
		Если СуммаСторно > 0 Тогда
			НоваяСтрока = НаборДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
			НоваяСтрока.Организация = Реквизиты.Организация;
			НоваяСтрока.ВидНалога = СтрокаТаблицы.Налог; 
			НоваяСтрока.СодержаниеПроводки = НСтр("ru = 'Возврат налога'");
			НоваяСтрока.Активность  = Истина;  
			НоваяСтрока.Период = КонецМесяца(ДобавитьМесяц(Реквизиты.Период, -1));		
			
			СуммаКЗачету = Мин(СтрокаНачисления.Сумма, СуммаСторно);
			НоваяСтрока.Сумма = СуммаКЗачету;
			НоваяСтрока.СрокУплаты = СтрокаНачисления.СрокУплаты;
			
			СуммаСторно = СуммаСторно - СуммаКЗачету;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
	НаборДвижений.Записывать = Истина; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновления

#КонецОбласти
