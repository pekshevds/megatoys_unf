#Область ПрограммныйИнтерфейс

// Заполняет дополнительные параметры
// 
// Параметры:
// 	Объект - Произвольный
// 	ИмяЭлементаДляРазмещения - Строка
// 	ПроизвольныйОбъект - Произвольный
// 	ИмяЭлементаКоманднойПанели - Строка
// 	СкрытьУдаленные - Булево
// Возвращаемое значение:
// 	Структура - см. УправлениеСвойствами.ПриСозданииНаСервере.ДополнительныеПараметры
Функция ЗаполнитьДополнительныеПараметры(Объект, ИмяЭлементаДляРазмещения, ПроизвольныйОбъект = Неопределено,
	ИмяЭлементаКоманднойПанели = Неопределено, СкрытьУдаленные = Неопределено) Экспорт

	ДополнительныеПараметры = Новый Структура;

	Если Объект <> Неопределено Тогда

		ДополнительныеПараметры.Вставить("Объект", Объект);

	КонецЕсли;

	Если ИмяЭлементаДляРазмещения <> Неопределено Тогда

		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", ИмяЭлементаДляРазмещения);

	КонецЕсли;

	Если ПроизвольныйОбъект <> Неопределено Тогда

		ДополнительныеПараметры.Вставить("ПроизвольныйОбъект", ПроизвольныйОбъект);

	КонецЕсли;

	Если ИмяЭлементаКоманднойПанели <> Неопределено Тогда

		ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", ИмяЭлементаКоманднойПанели);

	КонецЕсли;

	Если СкрытьУдаленные <> Неопределено Тогда

		ДополнительныеПараметры.Вставить("СкрытьУдаленные", СкрытьУдаленные);

	КонецЕсли;

	Возврат ДополнительныеПараметры;

КонецФункции

// Заполняет таблицу свойств характеристик при открытии формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Объект - Произвольный
//  ВладелецСвойств - ЛюбаяСсылка
//  ЗаполнитьОписаниеЗависимостей - Булево
//
Процедура ТаблицаСвойствПриСозданииНаСервере(Форма, Объект = Неопределено, ВладелецСвойств = Неопределено,
	ЗаполнитьОписаниеЗависимостей = Истина) Экспорт

	Реквизиты = Новый Массив;
	
	// Проверка значения функциональной опции "Использование свойств".
	ОпцияИспользоватьСвойства = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьДополнительныеРеквизитыИСведения");
	РеквизитИспользоватьСвойства = Новый РеквизитФормы("Свойства_ИспользоватьСвойства", Новый ОписаниеТипов("Булево"));
	Реквизиты.Добавить(РеквизитИспользоватьСвойства);

	Если ОпцияИспользоватьСвойства Тогда
		
		// Добавление реквизита содержащего используемые наборы дополнительных реквизитов.
		Реквизиты.Добавить(Новый РеквизитФормы("Свойства_НаборыДополнительныхРеквизитовОбъекта",
			Новый ОписаниеТипов("СписокЗначений")));
		
		// Добавление реквизита описания зависимых реквизитов.
		ТаблицаЗависимыхРеквизитов = "Свойства_ОписаниеЗависимыхДополнительныхРеквизитов";

		Реквизиты.Добавить(Новый РеквизитФормы(ТаблицаЗависимыхРеквизитов, Новый ОписаниеТипов("ТаблицаЗначений")));

		Реквизиты.Добавить(Новый РеквизитФормы("ИмяРеквизитаЗначение", Новый ОписаниеТипов("Строка"),
			ТаблицаЗависимыхРеквизитов));

		Реквизиты.Добавить(Новый РеквизитФормы("Свойство",
			Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"),
			ТаблицаЗависимыхРеквизитов));

		Реквизиты.Добавить(Новый РеквизитФормы("Доступен", Новый ОписаниеТипов("Булево"), ТаблицаЗависимыхРеквизитов));

		Реквизиты.Добавить(Новый РеквизитФормы("УсловиеДоступности", Новый ОписаниеТипов, ТаблицаЗависимыхРеквизитов));

		Реквизиты.Добавить(Новый РеквизитФормы("Виден", Новый ОписаниеТипов("Булево"), ТаблицаЗависимыхРеквизитов));

		Реквизиты.Добавить(Новый РеквизитФормы("УсловиеВидимости", Новый ОписаниеТипов, ТаблицаЗависимыхРеквизитов));

		Реквизиты.Добавить(Новый РеквизитФормы("ЗаполнятьОбязательно", Новый ОписаниеТипов("Булево"),
			ТаблицаЗависимыхРеквизитов));

		Реквизиты.Добавить(Новый РеквизитФормы("УсловиеОбязательностиЗаполнения", Новый ОписаниеТипов,
			ТаблицаЗависимыхРеквизитов));
		
		// Добавление команды формы, если установлена роль "ДобавлениеИзменениеДополнительныхРеквизитовИСведений" или это
		// полноправный пользователь.
		Если Пользователи.РолиДоступны("ДобавлениеИзменениеДополнительныхРеквизитовИСведений") Тогда
			// Добавление команды.
			Команда = Форма.Команды.Добавить("РедактироватьСоставДополнительныхРеквизитов");
			Команда.Заголовок = НСтр("ru = 'Изменить состав дополнительных реквизитов'");
			Команда.Действие = "Подключаемый_РедактироватьСоставСвойств";
			Команда.Подсказка = НСтр("ru = 'Изменить состав дополнительных реквизитов'");
			Команда.Картинка = БиблиотекаКартинок.НастройкаСписка;

			Кнопка = Форма.Элементы.Добавить("РедактироватьСоставДополнительныхРеквизитов", Тип("КнопкаФормы"),
				Форма.КоманднаяПанель);

			Кнопка.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
			Кнопка.ИмяКоманды = "РедактироватьСоставДополнительныхРеквизитов";
		КонецЕсли;

	КонецЕсли;

	Форма.ИзменитьРеквизиты(Реквизиты);

	Форма.Свойства_ИспользоватьСвойства = ОпцияИспользоватьСвойства;

	ЗаполнитьДополнительныеРеквизитыВФорме(Форма, Объект, ВладелецСвойств, ЗаполнитьОписаниеЗависимостей);

КонецПроцедуры

// Таблица свойств обработка проверки заполнения на сервере
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения
// 	Объект - Произвольный
// 	Отказ - Булево
Процедура ТаблицаСвойствОбработкаПроверкиЗаполненияНаСервере(Форма, Объект, Отказ) Экспорт

	ПараметрыСеанса.ИнтерактивнаяПроверкаЗаполненияСвойств = Истина;

	Ошибки = Неопределено;

	Итератор = 0;
	Для Каждого Строка Из Форма.Свойства_ТаблицаСвойстваИЗначения Цикл

		Если Строка.ЗаполнятьОбязательно Тогда

			Результат = Истина;

			Если Объект = Неопределено Тогда
				//@skip-check module-unused-local-variable
				ОписаниеОбъекта = Форма.Объект;
			Иначе
				ОписаниеОбъекта = Объект;
			КонецЕсли;

			Для Каждого ЗависимыйРеквизит Из Форма.Свойства_ОписаниеЗависимыхДополнительныхРеквизитов Цикл

				Если ЗависимыйРеквизит.Свойство = Строка.Свойство И ЗависимыйРеквизит.УсловиеОбязательностиЗаполнения
					<> Неопределено Тогда
					
					//@skip-check module-unused-local-variable
					ЗначенияПараметров = ЗависимыйРеквизит.УсловиеОбязательностиЗаполнения.ЗначенияПараметров;
					КодУсловия         = ЗависимыйРеквизит.УсловиеОбязательностиЗаполнения.КодУсловия;
					ОбщегоНазначения.ВыполнитьВБезопасномРежиме("Результат = (" + КодУсловия + ")");
					Прервать;
				КонецЕсли;

			КонецЦикла;

			Если Не Результат Тогда
				Продолжить;
			КонецЕсли;

			Если Не ЗначениеЗаполнено(Строка.Значение) Тогда

				ТекстОшибки = СтрШаблон(НСтр("ru = 'Поле ""%1"" не заполнено.'"), Строка.Наименование);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
					Форма.Свойства_ТаблицаСвойстваИЗначения[Итератор].Значение, ТекстОшибки, "");
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);

КонецПроцедуры

// Таблица свойств перед записью на сервере
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения
// 	Объект - Произвольный
Процедура ТаблицаСвойствПередЗаписьюНаСервере(Форма, Объект) Экспорт

	Объект.ДополнительныеРеквизиты.Очистить();

	Для Каждого Стр Из Форма.Свойства_ТаблицаСвойстваИЗначения Цикл

		Если Не ЗначениеЗаполнено(Стр.Значение) Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока = Объект.ДополнительныеРеквизиты.Добавить();
		НоваяСтрока.Свойство = Стр.Свойство;
		НоваяСтрока.Значение = Стр.Значение;

	КонецЦикла;

КонецПроцедуры

// Заполнить дополнительные реквизиты в форме
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения
// 	Объект - Произвольный
// 	ВладелецСвойств - ЛюбаяСсылка
// 	ЗаполнитьОписаниеЗависимостей - Булево
Процедура ЗаполнитьДополнительныеРеквизитыВФорме(Форма, Объект = Неопределено, ВладелецСвойств = Неопределено,
	ЗаполнитьОписаниеЗависимостей = Истина) Экспорт

	Если Не Форма.Свойства_ИспользоватьСвойства Тогда
		Возврат;
	КонецЕсли;

	Если Объект = Неопределено Тогда
		ОписаниеОбъекта = Форма.Объект;
	Иначе
		ОписаниеОбъекта = Объект;
	КонецЕсли;

	Форма.Свойства_НаборыДополнительныхРеквизитовОбъекта = Новый СписокЗначений;

	Если ОписаниеОбъекта = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() Тогда

		ОписаниеОбъектаПустаяСсылка = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		ТипСсылки = ТипЗнч(ОписаниеОбъекта);

		НаборыСвойствОбъекта = Новый ТаблицаЗначений;
		НаборыСвойствОбъекта.Колонки.Добавить("Набор");
		НаборыСвойствОбъекта.Колонки.Добавить("Заголовок");

		ЗаполнитьНаборСвойствХарактеристикиПоКатегории(ОписаниеОбъектаПустаяСсылка, ТипСсылки, НаборыСвойствОбъекта,
			ВладелецСвойств);

	Иначе

		НаборыСвойствОбъекта = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(ОписаниеОбъекта);

	КонецЕсли;

	Для Каждого Строка Из НаборыСвойствОбъекта Цикл
		Если УправлениеСвойствамиСлужебный.ВидыСвойствНабора(Строка.Набор).ДополнительныеРеквизиты Тогда

			Форма.Свойства_НаборыДополнительныхРеквизитовОбъекта.Добавить(
				Строка.Набор, Строка.Заголовок);
		КонецЕсли;
	КонецЦикла;

	ОписаниеСвойств = УправлениеСвойствамиСлужебный.ЗначенияСвойств(
		ОписаниеОбъекта.ДополнительныеРеквизиты.Выгрузить(), Форма.Свойства_НаборыДополнительныхРеквизитовОбъекта, Ложь);

	Для Каждого ОписаниеСвойства Из ОписаниеСвойств Цикл
		ОписаниеСвойства.Виден = Истина;
	КонецЦикла;

	Форма.Свойства_ТаблицаСвойстваИЗначения.Загрузить(ОписаниеСвойств);
	Для Каждого Эл Из Форма.Свойства_ТаблицаСвойстваИЗначения Цикл
		Эл.ФорматСвойства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Эл.Свойство, "ФорматСвойства");
	КонецЦикла;

	Итератор = 0;
	Для Каждого ОписаниеСвойства Из ОписаниеСвойств Цикл

		Если Не ЗаполнитьОписаниеЗависимостей Тогда
			Продолжить;
		КонецЕсли;
		
		СвойствоПринадлежитНаборуСвойствОбъекта = НаборыСвойствОбъекта.НайтиСтроки(Новый Структура("Набор", ОписаниеСвойства.Набор)).Количество() <> 0;
		Если Не СвойствоПринадлежитНаборуСвойствОбъекта Тогда
			Продолжить;
		КонецЕсли;
		
		// Заполнение таблицы зависимых дополнительных реквизитов.
		Если ОписаниеСвойства.ЗависимостиДополнительныхРеквизитов.Количество() > 0 Тогда
			ОписаниеЗависимогоРеквизита = Форма.Свойства_ОписаниеЗависимыхДополнительныхРеквизитов.Добавить();
			ЗаполнитьЗначенияСвойств(ОписаниеЗависимогоРеквизита, ОписаниеСвойства);
		КонецЕсли;

		Для Каждого СтрокаТаблицы Из ОписаниеСвойства.ЗависимостиДополнительныхРеквизитов Цикл

			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ЗависимоеСвойство) И Не ЗначениеЗаполнено(СтрокаТаблицы.Условие)
				И СтрокаТаблицы.Реквизит = Неопределено Тогда

				Продолжить;
			КонецЕсли;

			Если ТипЗнч(СтрокаТаблицы.Реквизит) = Тип("Строка") Тогда
				ПутьКРеквизиту = "ОписаниеОбъекта." + СтрокаТаблицы.Реквизит;
			Иначе
				Строки = Форма.Свойства_ТаблицаСвойстваИЗначения.НайтиСтроки(Новый Структура("Свойство",
					СтрокаТаблицы.Реквизит));
				Если Строки.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				Для Каждого Стр Из Строки Цикл
					ПутьКРеквизиту = "Форма.Свойства_ТаблицаСвойстваИЗначения" + "[" + Стр.ПолучитьИдентификатор()
						+ "]" + ".Значение";
				КонецЦикла;
			КонецЕсли;

			ШаблонУсловия = "";
			Если СтрокаТаблицы.Условие = "Равно" Тогда
				ШаблонУсловия = "%1 = %2";
			ИначеЕсли СтрокаТаблицы.Условие = "НеРавно" Тогда
				ШаблонУсловия = "%1 <> %2";
			КонецЕсли;

			Если СтрокаТаблицы.Условие = "ВСписке" Тогда
				ШаблонУсловия = "%2.НайтиПоЗначению(%1) <> Неопределено";
			ИначеЕсли СтрокаТаблицы.Условие = "НеВСписке" Тогда
				ШаблонУсловия = "%2.НайтиПоЗначению(%1) = Неопределено";
			КонецЕсли;

			ПравоеЗначение = "";
			Если ЗначениеЗаполнено(ШаблонУсловия) Тогда
				ПравоеЗначение = "ЗначенияПараметров[""" + ПутьКРеквизиту + """]";
			КонецЕсли;

			Если СтрокаТаблицы.Условие = "Заполнено" Тогда
				ШаблонУсловия = "ЗначениеЗаполнено(%1)";
			ИначеЕсли СтрокаТаблицы.Условие = "НеЗаполнено" Тогда
				ШаблонУсловия = "Не ЗначениеЗаполнено(%1)";
			КонецЕсли;

			Если ЗначениеЗаполнено(ШаблонУсловия) Тогда
				Если ЗначениеЗаполнено(ПравоеЗначение) Тогда
					КодУсловия = СтрШаблон(ШаблонУсловия, ПутьКРеквизиту, ПравоеЗначение);
				Иначе
					КодУсловия = СтрШаблон(ШаблонУсловия, ПутьКРеквизиту);
				КонецЕсли;
			КонецЕсли;

			Если СтрокаТаблицы.ЗависимоеСвойство = "Доступен" Тогда
				УстановитьУсловиеЗависимости(ОписаниеЗависимогоРеквизита.УсловиеДоступности, ПутьКРеквизиту,
					СтрокаТаблицы, КодУсловия, СтрокаТаблицы.Условие);
			ИначеЕсли СтрокаТаблицы.ЗависимоеСвойство = "Виден" Тогда
				УстановитьУсловиеЗависимости(ОписаниеЗависимогоРеквизита.УсловиеВидимости, ПутьКРеквизиту,
					СтрокаТаблицы, КодУсловия, СтрокаТаблицы.Условие);
			Иначе
				УстановитьУсловиеЗависимости(ОписаниеЗависимогоРеквизита.УсловиеОбязательностиЗаполнения,
					ПутьКРеквизиту, СтрокаТаблицы, КодУсловия, СтрокаТаблицы.Условие);
			КонецЕсли;
		КонецЦикла;

		Итератор = Итератор + 1;

	КонецЦикла;

КонецПроцедуры

// См. УправлениеСвойствамиПереопределяемый.ЗаполнитьНаборыСвойствОбъекта
Процедура ЗаполнитьНаборыСвойствОбъекта(Знач Объект, ТипСсылки, НаборыСвойств, СтандартнаяОбработка, КлючНазначения) Экспорт
	
	Если ТипСсылки = Тип("СправочникСсылка.Номенклатура") Тогда
		ЗаполнитьНаборСвойствНоменклатурыПоКатегории(Объект, ТипСсылки, НаборыСвойств);
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
		ЗаполнитьНаборСвойствХарактеристикиПоКатегории(Объект, ТипСсылки, НаборыСвойств);
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.Спецификации") Тогда
		ЗаполнитьНаборСвойствСпецификацииПоКатегории(Объект, ТипСсылки, НаборыСвойств);
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.КомплектацииНоменклатуры") Тогда
		ЗаполнитьНаборСвойствКомплектацииПоКатегории(Объект, ТипСсылки, НаборыСвойств);
	КонецЕсли;

КонецПроцедуры

// Заполнить набор свойств номенклатуры по категории
// 
// Параметры:
// 	Объект - Произвольный
// 	ТипСсылки - Тип
// 	НаборыСвойств - см. УправлениеСвойствамиПереопределяемый.ЗаполнитьНаборыСвойствОбъекта.НаборыСвойств
Процедура ЗаполнитьНаборСвойствНоменклатурыПоКатегории(Объект, ТипСсылки, НаборыСвойств) Экспорт
	
	Строка = НаборыСвойств.Добавить();
	Строка.Набор = УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Номенклатура_Общие");
	
	Если ТипЗнч(Объект) = ТипСсылки Тогда
		Номенклатура = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, "ЭтоГруппа, КатегорияНоменклатуры");
	Иначе
		Номенклатура = Объект;
	КонецЕсли;
	
	Если Номенклатура.ЭтоГруппа = Ложь Тогда
		
		СвойстваКатегории = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура.КатегорияНоменклатуры,
			"ЭтоГруппа, НаборСвойств");
		
		Если СвойстваКатегории.ЭтоГруппа = Ложь Тогда
			Строка = НаборыСвойств.Добавить();
			Строка.Набор = СвойстваКатегории.НаборСвойств;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполнить набор свойств характеристики по категории
// 
// Параметры:
// 	Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
// 	ТипСсылки - Тип
// 	НаборыСвойств - см. УправлениеСвойствамиПереопределяемый.ЗаполнитьНаборыСвойствОбъекта.НаборыСвойств
// 	Категория - СправочникСсылка.КатегорииНоменклатуры
Процедура ЗаполнитьНаборСвойствХарактеристикиПоКатегории(Характеристика, ТипСсылки, НаборыСвойств,
	Категория = Неопределено) Экспорт
	
	Если Категория = Неопределено Тогда
		Если ТипЗнч(Характеристика) = ТипСсылки Тогда
			Характеристика = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Характеристика, "Владелец");
		КонецЕсли;
		
		Категория = Справочники.КатегорииНоменклатуры.ПустаяСсылка();
		Если ТипЗнч(Характеристика.Владелец) = Тип("СправочникСсылка.КатегорииНоменклатуры") Тогда
			Категория = Характеристика.Владелец;
		ИначеЕсли ТипЗнч(Характеристика.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
			Категория = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Характеристика.Владелец, "КатегорияНоменклатуры");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Категория) Тогда
		
		СвойстваКатегории = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Категория,
			"ЭтоГруппа, НаборСвойствХарактеристики");
		
		Если СвойстваКатегории.ЭтоГруппа = Ложь Тогда
			Строка = НаборыСвойств.Добавить();
			Строка.Набор = СвойстваКатегории.НаборСвойствХарактеристики;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполнить набор свойств спецификации по категории
// 
// Параметры:
// 	Объект - Произвольный
// 	ТипСсылки - Тип
// 	НаборыСвойств - см. УправлениеСвойствамиПереопределяемый.ЗаполнитьНаборыСвойствОбъекта.НаборыСвойств
// 	Категория - СправочникСсылка.КатегорииНоменклатуры
Процедура ЗаполнитьНаборСвойствСпецификацииПоКатегории(Объект, ТипСсылки, НаборыСвойств, Категория = Неопределено) Экспорт
	
	Строка = НаборыСвойств.Добавить();
	Строка.Набор = УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Спецификации_Общие");
	
	Если Категория = Неопределено Тогда
		Если ТипЗнч(Объект) = ТипСсылки Тогда
			Объект = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, "Владелец");
		КонецЕсли;
		Категория = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "КатегорияНоменклатуры");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Категория) Тогда
		
		СвойстваКатегории = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Категория,
			"ЭтоГруппа, НаборСвойствСпецификации");
		
		Если СвойстваКатегории.ЭтоГруппа = Ложь Тогда
			Строка = НаборыСвойств.Добавить();
			Строка.Набор = СвойстваКатегории.НаборСвойствСпецификации;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполнить набор свойств комплектации по категории
// 
// Параметры:
// 	Объект - Произвольный
// 	ТипСсылки - Тип
// 	НаборыСвойств - см. УправлениеСвойствамиПереопределяемый.ЗаполнитьНаборыСвойствОбъекта.НаборыСвойств
// 	Категория - СправочникСсылка.КатегорииНоменклатуры
Процедура ЗаполнитьНаборСвойствКомплектацииПоКатегории(Объект, ТипСсылки, НаборыСвойств, Категория = Неопределено) Экспорт
	
	Строка = НаборыСвойств.Добавить();
	Строка.Набор = УправлениеСвойствами.НаборСвойствПоИмени("Справочник_КомплектацииНоменклатуры_Общие");
	
	Если Категория = Неопределено Тогда
		Если ТипЗнч(Объект) = ТипСсылки Тогда
			Объект = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, "Владелец");
		КонецЕсли;
		Категория = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "КатегорияНоменклатуры");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Категория) Тогда
		
		СвойстваКатегории = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Категория,
			"ЭтоГруппа, НаборСвойствКомплектацииНоменклатуры");
		
		Если СвойстваКатегории.ЭтоГруппа = Ложь Тогда
			Строка = НаборыСвойств.Добавить();
			Строка.Набор = СвойстваКатегории.НаборСвойствКомплектацииНоменклатуры;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список всех свойств для объекта метаданных.
//
// Параметры:
//  ВидОбъектов - Строка - полное имя объекта метаданных;
//  ВидСвойств  - Строка - "ДополнительныеРеквизиты" или "ДополнительныеСведения".
//
// Возвращаемое значение:
//  ТаблицаЗначений - свойство, Наименование, ТипЗначения.
//  Неопределено    - для указанного вида объекта нет набора свойств.
//
Функция СписокСвойствДляВидаОбъектов(ВидОбъектов, Знач ВидСвойств) Экспорт
	Возврат УправлениеСвойствамиСлужебный.СписокСвойствДляВидаОбъектов(ВидОбъектов, ВидСвойств);
КонецФункции

// См. УправлениеСвойствамиПереопределяемый.ПриНачальномЗаполненииЭлементов
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт

	Справочник_КомплектацииНоменклатуры = Элементы.Добавить();
	Справочник_КомплектацииНоменклатуры.ИмяПредопределенногоНабора = "Справочник_КомплектацииНоменклатуры";
	Справочник_КомплектацииНоменклатуры.ЭтоГруппа = Истина;
	Справочник_КомплектацииНоменклатуры.Используется = Истина;
	Справочник_КомплектацииНоменклатуры.Ссылка = Новый УникальныйИдентификатор("1481e35e-d05e-4159-b792-ef9192744e91");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Справочник_КомплектацииНоменклатуры, "Наименование",
		"ru = 'Варианты комплектации'", КодыЯзыков); // @НСтр-1

	Справочник_КомплектацииНоменклатуры_Общие = Элементы.Добавить();
	Справочник_КомплектацииНоменклатуры_Общие.Родитель = Новый УникальныйИдентификатор("1481e35e-d05e-4159-b792-ef9192744e91");
	Справочник_КомплектацииНоменклатуры_Общие.ИмяПредопределенногоНабора = "Справочник_КомплектацииНоменклатуры_Общие";
	Справочник_КомплектацииНоменклатуры_Общие.Используется = Истина;
	Справочник_КомплектацииНоменклатуры_Общие.Ссылка = Новый УникальныйИдентификатор("c84daf8e-9fa3-4566-b2e4-57ade771cf1c");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Справочник_КомплектацииНоменклатуры_Общие, "Наименование",
		"ru = '""Общие""'", КодыЯзыков); // @НСтр-1

	Справочник_Номенклатура = Элементы.Добавить();
	Справочник_Номенклатура.ИмяПредопределенногоНабора = "Справочник_Номенклатура";
	Справочник_Номенклатура.ЭтоГруппа = Истина;
	Справочник_Номенклатура.Используется = Истина;
	Справочник_Номенклатура.Ссылка = Новый УникальныйИдентификатор("7f8170f8-f503-4d97-8a4f-545a1e72fea3");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Справочник_Номенклатура, "Наименование",
		"ru = 'Номенклатура'", КодыЯзыков); // @НСтр-1

	Справочник_Номенклатура_Общие = Элементы.Добавить();
	Справочник_Номенклатура_Общие.Родитель = Новый УникальныйИдентификатор("7f8170f8-f503-4d97-8a4f-545a1e72fea3");
	Справочник_Номенклатура_Общие.ИмяПредопределенногоНабора = "Справочник_Номенклатура_Общие";
	Справочник_Номенклатура_Общие.Используется = Истина;
	Справочник_Номенклатура_Общие.Ссылка = Новый УникальныйИдентификатор("3759b75f-3b6b-41d6-af4e-7f3c5a3cf115");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Справочник_Номенклатура_Общие, "Наименование",
		"ru = '""Общие""'", КодыЯзыков); // @НСтр-1

	Справочник_Спецификации = Элементы.Добавить();
	Справочник_Спецификации.ИмяПредопределенногоНабора = "Справочник_Спецификации";
	Справочник_Спецификации.ЭтоГруппа = Истина;
	Справочник_Спецификации.Используется = Истина;
	Справочник_Спецификации.Ссылка = Новый УникальныйИдентификатор("55b3399b-00f5-4495-846e-5dc086ed452a");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Справочник_Спецификации, "Наименование",
		"ru = 'Спецификации'", КодыЯзыков); // @НСтр-1

	Справочник_Спецификации_Общие = Элементы.Добавить();
	Справочник_Спецификации_Общие.Родитель = Новый УникальныйИдентификатор("55b3399b-00f5-4495-846e-5dc086ed452a");
	Справочник_Спецификации_Общие.ИмяПредопределенногоНабора = "Справочник_Спецификации_Общие";
	Справочник_Спецификации_Общие.Используется = Истина;
	Справочник_Спецификации_Общие.Ссылка = Новый УникальныйИдентификатор("c0952031-cc1b-4dea-88fa-c323fe0c8c1a");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Справочник_Спецификации_Общие, "Наименование",
		"ru = '""Общие""'", КодыЯзыков); // @НСтр-1

	Справочник_ХарактеристикиНоменклатуры = Элементы.Добавить();
	Справочник_ХарактеристикиНоменклатуры.ИмяПредопределенногоНабора = "Справочник_ХарактеристикиНоменклатуры";
	Справочник_ХарактеристикиНоменклатуры.ЭтоГруппа = Истина;
	Справочник_ХарактеристикиНоменклатуры.Используется = Истина;
	Справочник_ХарактеристикиНоменклатуры.Ссылка = Новый УникальныйИдентификатор("f27aad84-f305-4016-a448-08362ef2d71c");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Справочник_ХарактеристикиНоменклатуры, "Наименование",
		"ru = 'Характеристики номенклатуры'", КодыЯзыков); // @НСтр-1

	Документ_АвансовыйОтчет = Элементы.Добавить();
	Документ_АвансовыйОтчет.ИмяПредопределенногоНабора = "Документ_АвансовыйОтчет";
	Документ_АвансовыйОтчет.Используется = Истина;
	Документ_АвансовыйОтчет.Ссылка = Новый УникальныйИдентификатор("cb71b748-2331-45d4-bb77-219f1da9b863");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_АвансовыйОтчет, "Наименование",
		"ru = 'Авансовые отчеты'", КодыЯзыков); // @НСтр-1

	Документ_АктВыполненныхРабот = Элементы.Добавить();
	Документ_АктВыполненныхРабот.ИмяПредопределенногоНабора = "Документ_АктВыполненныхРабот";
	Документ_АктВыполненныхРабот.Используется = Истина;
	Документ_АктВыполненныхРабот.Ссылка = Новый УникальныйИдентификатор("02f0a48f-f891-4b44-9199-a81eaea7d3df");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_АктВыполненныхРабот, "Наименование",
		"ru = 'Акты выполненных работ'", КодыЯзыков); // @НСтр-1

	Документ_АктОРасхождениях = Элементы.Добавить();
	Документ_АктОРасхождениях.ИмяПредопределенногоНабора = "Документ_АктОРасхождениях";
	Документ_АктОРасхождениях.Используется = Истина;
	Документ_АктОРасхождениях.Ссылка = Новый УникальныйИдентификатор("908268a4-ab7a-4aee-b990-98e83e397369");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_АктОРасхождениях, "Наименование",
		"ru = 'Акты о расхождениях'", КодыЯзыков); // @НСтр-1

	Документ_АктОРасхожденияхПолученный = Элементы.Добавить();
	Документ_АктОРасхожденияхПолученный.ИмяПредопределенногоНабора = "Документ_АктОРасхожденияхПолученный";
	Документ_АктОРасхожденияхПолученный.Используется = Истина;
	Документ_АктОРасхожденияхПолученный.Ссылка = Новый УникальныйИдентификатор("6abc2237-fc42-4352-b2da-0a1d9f39564e");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_АктОРасхожденияхПолученный, "Наименование",
		"ru = 'Акты о расхождениях (полученные)'", КодыЯзыков); // @НСтр-1

	Документ_ДоговорКредитаИЗайма = Элементы.Добавить();
	Документ_ДоговорКредитаИЗайма.ИмяПредопределенногоНабора = "Документ_ДоговорКредитаИЗайма";
	Документ_ДоговорКредитаИЗайма.Используется = Истина;
	Документ_ДоговорКредитаИЗайма.Ссылка = Новый УникальныйИдентификатор("1ecd036f-68a1-4fdb-98d6-9c7f9838fade");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_ДоговорКредитаИЗайма, "Наименование",
		"ru = 'Договоры кредитов и займов'", КодыЯзыков); // @НСтр-1

	Справочник_ДоговорыКонтрагентов = Элементы.Добавить();
	Справочник_ДоговорыКонтрагентов.ИмяПредопределенногоНабора = "Справочник_ДоговорыКонтрагентов";
	Справочник_ДоговорыКонтрагентов.Используется = Истина;
	Справочник_ДоговорыКонтрагентов.Ссылка = Новый УникальныйИдентификатор("ce6f6f7e-d84f-4cdf-96fe-d3e608358779");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Справочник_ДоговорыКонтрагентов, "Наименование",
		"ru = 'Договоры'", КодыЯзыков); // @НСтр-1

	Документ_ОтчетКомиссионераОСписании = Элементы.Добавить();
	Документ_ОтчетКомиссионераОСписании.ИмяПредопределенногоНабора = "Документ_ОтчетКомиссионераОСписании";
	Документ_ОтчетКомиссионераОСписании.Используется = Истина;
	Документ_ОтчетКомиссионераОСписании.Ссылка = Новый УникальныйИдентификатор("d1343cce-cc1e-4f2a-9903-01f31660c5cb");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_ОтчетКомиссионераОСписании, "Наименование",
		"ru = 'Списание товаров у комиссионера'", КодыЯзыков); // @НСтр-1

	Документ_ПриемИПередачаВРемонт = Элементы.Добавить();
	Документ_ПриемИПередачаВРемонт.ИмяПредопределенногоНабора = "Документ_ПриемИПередачаВРемонт";
	Документ_ПриемИПередачаВРемонт.Используется = Истина;
	Документ_ПриемИПередачаВРемонт.Ссылка = Новый УникальныйИдентификатор("595bfd9a-3e5f-49a7-b31a-7c61389e8850");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_ПриемИПередачаВРемонт, "Наименование",
		"ru = 'Прием и передача в ремонт'", КодыЯзыков); // @НСтр-1

	Документ_ЕжедневныйОтчет = Элементы.Добавить();
	Документ_ЕжедневныйОтчет.ИмяПредопределенногоНабора = "Документ_ЕжедневныйОтчет";
	Документ_ЕжедневныйОтчет.Используется = Истина;
	Документ_ЕжедневныйОтчет.Ссылка = Новый УникальныйИдентификатор("df87403b-d9c6-4316-8717-c74fb832efe0");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_ЕжедневныйОтчет, "Наименование",
		"ru = 'Ежедневные отчеты'", КодыЯзыков); // @НСтр-1

	Документ_ЗаданиеНаРаботу = Элементы.Добавить();
	Документ_ЗаданиеНаРаботу.ИмяПредопределенногоНабора = "Документ_ЗаданиеНаРаботу";
	Документ_ЗаданиеНаРаботу.Используется = Истина;
	Документ_ЗаданиеНаРаботу.Ссылка = Новый УникальныйИдентификатор("ae880caf-2d61-4bc8-a7bc-936e46310919");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_ЗаданиеНаРаботу, "Наименование",
		"ru = 'Задания на работу'", КодыЯзыков); // @НСтр-1

	Документ_ЗадачаСотрудника = Элементы.Добавить();
	Документ_ЗадачаСотрудника.ИмяПредопределенногоНабора = "Документ_ЗадачаСотрудника";
	Документ_ЗадачаСотрудника.Используется = Истина;
	Документ_ЗадачаСотрудника.Ссылка = Новый УникальныйИдентификатор("9ea2ba5a-f14f-456d-b2af-cfcc642f10e6");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_ЗадачаСотрудника, "Наименование",
		"ru = 'Задачи'", КодыЯзыков); // @НСтр-1

	Документ_ЗаказНаПеремещение = Элементы.Добавить();
	Документ_ЗаказНаПеремещение.ИмяПредопределенногоНабора = "Документ_ЗаказНаПеремещение";
	Документ_ЗаказНаПеремещение.Используется = Истина;
	Документ_ЗаказНаПеремещение.Ссылка = Новый УникальныйИдентификатор("8eb9da32-f5ac-4497-80b8-6e57b9d247b3");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_ЗаказНаПеремещение, "Наименование",
		"ru = 'Заказы на перемещение'", КодыЯзыков); // @НСтр-1

	Документ_ЗаказНаПроизводство = Элементы.Добавить();
	Документ_ЗаказНаПроизводство.ИмяПредопределенногоНабора = "Документ_ЗаказНаПроизводство";
	Документ_ЗаказНаПроизводство.Используется = Истина;
	Документ_ЗаказНаПроизводство.Ссылка = Новый УникальныйИдентификатор("3846f690-6573-46b7-bf35-d71ee2803c07");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_ЗаказНаПроизводство, "Наименование",
		"ru = 'Заказы на производство'", КодыЯзыков); // @НСтр-1

	Документ_ЗаказПокупателя = Элементы.Добавить();
	Документ_ЗаказПокупателя.ИмяПредопределенногоНабора = "Документ_ЗаказПокупателя";
	Документ_ЗаказПокупателя.Используется = Истина;
	Документ_ЗаказПокупателя.Ссылка = Новый УникальныйИдентификатор("4989c725-680e-4ec4-aff9-3858ec7a7e21");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_ЗаказПокупателя, "Наименование",
		"ru = 'Заказы покупателей'", КодыЯзыков); // @НСтр-1

	Документ_ЗаказПоставщику = Элементы.Добавить();
	Документ_ЗаказПоставщику.ИмяПредопределенногоНабора = "Документ_ЗаказПоставщику";
	Документ_ЗаказПоставщику.Используется = Истина;
	Документ_ЗаказПоставщику.Ссылка = Новый УникальныйИдентификатор("d738331f-5335-40de-a9ee-d0ace5f7a642");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_ЗаказПоставщику, "Наименование",
		"ru = 'Заказы поставщикам'", КодыЯзыков); // @НСтр-1

	Документ_РасходДСПлан = Элементы.Добавить();
	Документ_РасходДСПлан.ИмяПредопределенногоНабора = "Документ_РасходДСПлан";
	Документ_РасходДСПлан.Используется = Истина;
	Документ_РасходДСПлан.Ссылка = Новый УникальныйИдентификатор("2bd84ece-965c-44d2-8fc0-957221074629");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_РасходДСПлан, "Наименование",
		"ru = 'Заявки на расход денег'", КодыЯзыков); // @НСтр-1

	Документ_ЗаявленияОПредоставленииСведенийОТрудовойДеятельности = Элементы.Добавить();
	Документ_ЗаявленияОПредоставленииСведенийОТрудовойДеятельности.ИмяПредопределенногоНабора = "Документ_ЗаявленияОПредоставленииСведенийОТрудовойДеятельности";
	Документ_ЗаявленияОПредоставленииСведенийОТрудовойДеятельности.Используется = Истина;
	Документ_ЗаявленияОПредоставленииСведенийОТрудовойДеятельности.Ссылка = Новый УникальныйИдентификатор("6f853238-34a8-4e80-b314-8ca12ec7550a");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(
		Документ_ЗаявленияОПредоставленииСведенийОТрудовойДеятельности, "Наименование",
		"ru = 'Заявления о предоставлении сведений о трудовой деятельности'", КодыЯзыков); // @НСтр-1

	Справочник_ВнеоборотныеАктивы = Элементы.Добавить();
	Справочник_ВнеоборотныеАктивы.ИмяПредопределенногоНабора = "Справочник_ВнеоборотныеАктивы";
	Справочник_ВнеоборотныеАктивы.Используется = Истина;
	Справочник_ВнеоборотныеАктивы.Ссылка = Новый УникальныйИдентификатор("6fa4721a-f7b5-4729-b489-d1966e3b5827");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Справочник_ВнеоборотныеАктивы, "Наименование",
		"ru = 'Имущество'", КодыЯзыков); // @НСтр-1

	Документ_КомплектацияЗапасов = Элементы.Добавить();
	Документ_КомплектацияЗапасов.ИмяПредопределенногоНабора = "Документ_КомплектацияЗапасов";
	Документ_КомплектацияЗапасов.Используется = Истина;
	Документ_КомплектацияЗапасов.Ссылка = Новый УникальныйИдентификатор("c53d862a-4c17-4ba2-849b-381c7459da02");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_КомплектацияЗапасов, "Наименование",
		"ru = 'Комплектации'", КодыЯзыков); // @НСтр-1

	Справочник_КонтактныеЛица = Элементы.Добавить();
	Справочник_КонтактныеЛица.ИмяПредопределенногоНабора = "Справочник_КонтактныеЛица";
	Справочник_КонтактныеЛица.Используется = Истина;
	Справочник_КонтактныеЛица.Ссылка = Новый УникальныйИдентификатор("73cdf01b-8107-4ef4-ac80-ae5b39b5b916");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Справочник_КонтактныеЛица, "Наименование",
		"ru = 'Контакты'", КодыЯзыков); // @НСтр-1

	Справочник_Контрагенты = Элементы.Добавить();
	Справочник_Контрагенты.ИмяПредопределенногоНабора = "Справочник_Контрагенты";
	Справочник_Контрагенты.Используется = Истина;
	Справочник_Контрагенты.Ссылка = Новый УникальныйИдентификатор("a865a9fe-b1e9-43e6-8b6c-7eb34d0e302b");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Справочник_Контрагенты, "Наименование",
		"ru = 'Контрагенты'", КодыЯзыков); // @НСтр-1

	Документ_КорректировкаПоступления = Элементы.Добавить();
	Документ_КорректировкаПоступления.ИмяПредопределенногоНабора = "Документ_КорректировкаПоступления";
	Документ_КорректировкаПоступления.Используется = Истина;
	Документ_КорректировкаПоступления.Ссылка = Новый УникальныйИдентификатор("4021db79-9ebf-489e-a091-f26128f5bba5");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_КорректировкаПоступления, "Наименование",
		"ru = 'Корректировки поступлений'", КодыЯзыков); // @НСтр-1

	Документ_КорректировкаРеализации = Элементы.Добавить();
	Документ_КорректировкаРеализации.ИмяПредопределенногоНабора = "Документ_КорректировкаРеализации";
	Документ_КорректировкаРеализации.Используется = Истина;
	Документ_КорректировкаРеализации.Ссылка = Новый УникальныйИдентификатор("1a803d83-28c2-4578-b072-59c9d0aff449");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_КорректировкаРеализации, "Наименование",
		"ru = 'Корректировки реализаций'", КодыЯзыков); // @НСтр-1

	Справочник_Лиды = Элементы.Добавить();
	Справочник_Лиды.ИмяПредопределенногоНабора = "Справочник_Лиды";
	Справочник_Лиды.Используется = Истина;
	Справочник_Лиды.Ссылка = Новый УникальныйИдентификатор("430ce4e6-2232-4bb5-a160-c6abb35aa90e");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Справочник_Лиды, "Наименование", "ru = 'Лиды'", КодыЯзыков); // @НСтр-1

	Документ_НачисленияПоКредитамИЗаймам = Элементы.Добавить();
	Документ_НачисленияПоКредитамИЗаймам.ИмяПредопределенногоНабора = "Документ_НачисленияПоКредитамИЗаймам";
	Документ_НачисленияПоКредитамИЗаймам.Используется = Истина;
	Документ_НачисленияПоКредитамИЗаймам.Ссылка = Новый УникальныйИдентификатор("28257a2f-e199-4fbb-8f8b-08cd33484ab0");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_НачисленияПоКредитамИЗаймам, "Наименование",
		"ru = 'Начисления по кредитам и займам'", КодыЯзыков); // @НСтр-1

	Справочник_НоменклатураПоставщиков = Элементы.Добавить();
	Справочник_НоменклатураПоставщиков.ИмяПредопределенногоНабора = "Справочник_НоменклатураПоставщиков";
	Справочник_НоменклатураПоставщиков.Используется = Истина;
	Справочник_НоменклатураПоставщиков.Ссылка = Новый УникальныйИдентификатор("c6d65644-e77b-4544-91b4-2dc4d5bc4738");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Справочник_НоменклатураПоставщиков, "Наименование",
		"ru = 'Номенклатура поставщиков'", КодыЯзыков); // @НСтр-1

	Документ_ОперацияПоПлатежнымКартам = Элементы.Добавить();
	Документ_ОперацияПоПлатежнымКартам.ИмяПредопределенногоНабора = "Документ_ОперацияПоПлатежнымКартам";
	Документ_ОперацияПоПлатежнымКартам.Используется = Истина;
	Документ_ОперацияПоПлатежнымКартам.Ссылка = Новый УникальныйИдентификатор("bd44a7a6-1cef-40ff-8e0f-6ebabdd56e8c");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_ОперацияПоПлатежнымКартам, "Наименование",
		"ru = 'Операции по платежным картам'", КодыЯзыков); // @НСтр-1

	Справочник_Организации = Элементы.Добавить();
	Справочник_Организации.ИмяПредопределенногоНабора = "Справочник_Организации";
	Справочник_Организации.Используется = Истина;
	Справочник_Организации.Ссылка = Новый УникальныйИдентификатор("b64b1cdb-9f91-43d7-aa4b-6c7e8c0417ff");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Справочник_Организации, "Наименование",
		"ru = 'Организации'", КодыЯзыков); // @НСтр-1

	Справочник_ПартииНоменклатуры = Элементы.Добавить();
	Справочник_ПартииНоменклатуры.ИмяПредопределенногоНабора = "Справочник_ПартииНоменклатуры";
	Справочник_ПартииНоменклатуры.Используется = Истина;
	Справочник_ПартииНоменклатуры.Ссылка = Новый УникальныйИдентификатор("26944e2c-3629-42f1-87af-634acbda8b61");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Справочник_ПартииНоменклатуры, "Наименование",
		"ru = 'Партии'", КодыЯзыков); // @НСтр-1

	Документ_ПередачаТоваровМеждуОрганизациями = Элементы.Добавить();
	Документ_ПередачаТоваровМеждуОрганизациями.ИмяПредопределенногоНабора = "Документ_ПередачаТоваровМеждуОрганизациями";
	Документ_ПередачаТоваровМеждуОрганизациями.Используется = Истина;
	Документ_ПередачаТоваровМеждуОрганизациями.Ссылка = Новый УникальныйИдентификатор("b2707782-06cb-4a40-9582-018fa98439a3");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_ПередачаТоваровМеждуОрганизациями, "Наименование",
		"ru = 'Передачи между организациями'", КодыЯзыков); // @НСтр-1

	Документ_ПеремещениеЗапасов = Элементы.Добавить();
	Документ_ПеремещениеЗапасов.ИмяПредопределенногоНабора = "Документ_ПеремещениеЗапасов";
	Документ_ПеремещениеЗапасов.Используется = Истина;
	Документ_ПеремещениеЗапасов.Ссылка = Новый УникальныйИдентификатор("b78c9630-f2da-4200-abb8-fd363eddfd3c");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_ПеремещениеЗапасов, "Наименование",
		"ru = 'Перемещения'", КодыЯзыков); // @НСтр-1

	Документ_ПереоценкаТоваровНаКомиссии = Элементы.Добавить();
	Документ_ПереоценкаТоваровНаКомиссии.ИмяПредопределенногоНабора = "Документ_ПереоценкаТоваровНаКомиссии";
	Документ_ПереоценкаТоваровНаКомиссии.Используется = Истина;
	Документ_ПереоценкаТоваровНаКомиссии.Ссылка = Новый УникальныйИдентификатор("f5d2a397-647c-4ea9-9a26-e177353e07af");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_ПереоценкаТоваровНаКомиссии, "Наименование",
		"ru = 'Переоценка товаров на комиссии'", КодыЯзыков); // @НСтр-1

	Документ_ПоложениеОПремировании = Элементы.Добавить();
	Документ_ПоложениеОПремировании.ИмяПредопределенногоНабора = "Документ_ПоложениеОПремировании";
	Документ_ПоложениеОПремировании.Используется = Истина;
	Документ_ПоложениеОПремировании.Ссылка = Новый УникальныйИдентификатор("d8711c23-18e9-47a2-8426-9cf72282ce95");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_ПоложениеОПремировании, "Наименование",
		"ru = 'Положения о премировании'", КодыЯзыков); // @НСтр-1

	Документ_ПоступлениеВКассу = Элементы.Добавить();
	Документ_ПоступлениеВКассу.ИмяПредопределенногоНабора = "Документ_ПоступлениеВКассу";
	Документ_ПоступлениеВКассу.Используется = Истина;
	Документ_ПоступлениеВКассу.Ссылка = Новый УникальныйИдентификатор("759e3da3-ecb5-474b-af47-c23447cadd5a");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_ПоступлениеВКассу, "Наименование",
		"ru = 'Поступления в кассу'", КодыЯзыков); // @НСтр-1

	Документ_ПоступлениеНаСчет = Элементы.Добавить();
	Документ_ПоступлениеНаСчет.ИмяПредопределенногоНабора = "Документ_ПоступлениеНаСчет";
	Документ_ПоступлениеНаСчет.Используется = Истина;
	Документ_ПоступлениеНаСчет.Ссылка = Новый УникальныйИдентификатор("83710e1f-1b88-450f-85f3-905cafaee75b");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_ПоступлениеНаСчет, "Наименование",
		"ru = 'Поступления на счет'", КодыЯзыков); // @НСтр-1

	Документ_ПриходнаяНакладная = Элементы.Добавить();
	Документ_ПриходнаяНакладная.ИмяПредопределенногоНабора = "Документ_ПриходнаяНакладная";
	Документ_ПриходнаяНакладная.Используется = Истина;
	Документ_ПриходнаяНакладная.Ссылка = Новый УникальныйИдентификатор("172c5224-ff65-482d-b2f9-a87a9b313ff8");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_ПриходнаяНакладная, "Наименование",
		"ru = 'Приходные накладные'", КодыЯзыков); // @НСтр-1

	Документ_ПриходныйОрдер = Элементы.Добавить();
	Документ_ПриходныйОрдер.ИмяПредопределенногоНабора = "Документ_ПриходныйОрдер";
	Документ_ПриходныйОрдер.Используется = Истина;
	Документ_ПриходныйОрдер.Ссылка = Новый УникальныйИдентификатор("0a1826a3-3fd4-4b19-a1c4-b82fcfb9e9f0");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_ПриходныйОрдер, "Наименование",
		"ru = 'Приходные ордера'", КодыЯзыков); // @НСтр-1

	Справочник_Проекты = Элементы.Добавить();
	Справочник_Проекты.ИмяПредопределенногоНабора = "Справочник_Проекты";
	Справочник_Проекты.Используется = Истина;
	Справочник_Проекты.Ссылка = Новый УникальныйИдентификатор("322e4640-d8cf-4908-be4d-7f2b737b8585");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Справочник_Проекты, "Наименование",
		"ru = 'Проекты'", КодыЯзыков); // @НСтр-1

	Документ_СборкаЗапасов = Элементы.Добавить();
	Документ_СборкаЗапасов.ИмяПредопределенногоНабора = "Документ_СборкаЗапасов";
	Документ_СборкаЗапасов.Используется = Истина;
	Документ_СборкаЗапасов.Ссылка = Новый УникальныйИдентификатор("ccfc1af2-6f26-4bb2-bddd-e0f1be84b75d");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_СборкаЗапасов, "Наименование",
		"ru = 'Производство'", КодыЯзыков); // @НСтр-1

	Документ_РасходИзКассы = Элементы.Добавить();
	Документ_РасходИзКассы.ИмяПредопределенногоНабора = "Документ_РасходИзКассы";
	Документ_РасходИзКассы.Используется = Истина;
	Документ_РасходИзКассы.Ссылка = Новый УникальныйИдентификатор("b12bdc83-963f-470a-9fb1-08c1f22950c6");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_РасходИзКассы, "Наименование",
		"ru = 'Расход из кассы'", КодыЯзыков); // @НСтр-1

	Документ_РасходнаяНакладная = Элементы.Добавить();
	Документ_РасходнаяНакладная.ИмяПредопределенногоНабора = "Документ_РасходнаяНакладная";
	Документ_РасходнаяНакладная.Используется = Истина;
	Документ_РасходнаяНакладная.Ссылка = Новый УникальныйИдентификатор("9885879f-1f14-46dc-b861-686521513887");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_РасходнаяНакладная, "Наименование",
		"ru = 'Расходные накладные'", КодыЯзыков); // @НСтр-1

	Документ_РасходныйОрдер = Элементы.Добавить();
	Документ_РасходныйОрдер.ИмяПредопределенногоНабора = "Документ_РасходныйОрдер";
	Документ_РасходныйОрдер.Используется = Истина;
	Документ_РасходныйОрдер.Ссылка = Новый УникальныйИдентификатор("7cb7cb86-63c3-4947-994f-8173efabd4a6");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_РасходныйОрдер, "Наименование",
		"ru = 'Расходные ордера'", КодыЯзыков); // @НСтр-1

	Документ_РасходСоСчета = Элементы.Добавить();
	Документ_РасходСоСчета.ИмяПредопределенногоНабора = "Документ_РасходСоСчета";
	Документ_РасходСоСчета.Используется = Истина;
	Документ_РасходСоСчета.Ссылка = Новый УникальныйИдентификатор("05752ac1-ec37-4fc1-bc42-5c259ee5544d");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_РасходСоСчета, "Наименование",
		"ru = 'Расход со счета'", КодыЯзыков); // @НСтр-1

	Документ_СдельныйНаряд = Элементы.Добавить();
	Документ_СдельныйНаряд.ИмяПредопределенногоНабора = "Документ_СдельныйНаряд";
	Документ_СдельныйНаряд.Используется = Истина;
	Документ_СдельныйНаряд.Ссылка = Новый УникальныйИдентификатор("a0bdc12e-e22a-4e93-b658-d0faff35f578");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_СдельныйНаряд, "Наименование",
		"ru = 'Сдельные наряды'", КодыЯзыков); // @НСтр-1

	Справочник_СерииНоменклатуры = Элементы.Добавить();
	Справочник_СерииНоменклатуры.ИмяПредопределенногоНабора = "Справочник_СерииНоменклатуры";
	Справочник_СерииНоменклатуры.Используется = Истина;
	Справочник_СерииНоменклатуры.Ссылка = Новый УникальныйИдентификатор("02d4710b-8bd7-40c2-835e-40aaecd19a0d");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Справочник_СерииНоменклатуры, "Наименование",
		"ru = 'Серии номенклатуры'", КодыЯзыков); // @НСтр-1

	Документ_СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД = Элементы.Добавить();
	Документ_СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ИмяПредопределенногоНабора = "Документ_СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД";
	Документ_СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Используется = Истина;
	Документ_СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Ссылка = Новый УникальныйИдентификатор("252a0bd5-1b65-493c-9b5e-505223fe14b6");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД,
		"Наименование", "ru = 'СЗВ-ТД'", КодыЯзыков); // @НСтр-1

	Документ_Событие = Элементы.Добавить();
	Документ_Событие.ИмяПредопределенногоНабора = "Документ_Событие";
	Документ_Событие.Используется = Истина;
	Документ_Событие.Ссылка = Новый УникальныйИдентификатор("90140e5b-9623-4264-b89e-8ac02fa8e007");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_Событие, "Наименование", "ru = 'События'", КодыЯзыков); // @НСтр-1

	Справочник_Сотрудники = Элементы.Добавить();
	Справочник_Сотрудники.ИмяПредопределенногоНабора = "Справочник_Сотрудники";
	Справочник_Сотрудники.Используется = Истина;
	Справочник_Сотрудники.Ссылка = Новый УникальныйИдентификатор("d056fbb0-12f6-4459-a04d-a0513b93be66");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Справочник_Сотрудники, "Наименование",
		"ru = 'Сотрудники'", КодыЯзыков); // @НСтр-1

	Документ_СписаниеЗапасов = Элементы.Добавить();
	Документ_СписаниеЗапасов.ИмяПредопределенногоНабора = "Документ_СписаниеЗапасов";
	Документ_СписаниеЗапасов.Используется = Истина;
	Документ_СписаниеЗапасов.Ссылка = Новый УникальныйИдентификатор("6bdd5c4e-e21e-49c3-8ec4-16eed4736480");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_СписаниеЗапасов, "Наименование",
		"ru = 'Списания запасов'", КодыЯзыков); // @НСтр-1

	Документ_СписаниеПроданныхПодарочныхСертификатов = Элементы.Добавить();
	Документ_СписаниеПроданныхПодарочныхСертификатов.ИмяПредопределенногоНабора = "Документ_СписаниеПроданныхПодарочныхСертификатов";
	Документ_СписаниеПроданныхПодарочныхСертификатов.Используется = Истина;
	Документ_СписаниеПроданныхПодарочныхСертификатов.Ссылка = Новый УникальныйИдентификатор("c3cec484-7217-4b34-9a12-201cb349ad55");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_СписаниеПроданныхПодарочныхСертификатов,
		"Наименование", "ru = 'Списания проданных сертификатов'", КодыЯзыков); // @НСтр-1
	
	Справочник_СтатьиДвиженияДенежныхСредств = Элементы.Добавить();
	Справочник_СтатьиДвиженияДенежныхСредств.ИмяПредопределенногоНабора = "Справочник_СтатьиДвиженияДенежныхСредств";
	Справочник_СтатьиДвиженияДенежныхСредств.Используется = Истина;
	Справочник_СтатьиДвиженияДенежныхСредств.Ссылка = Новый УникальныйИдентификатор("cb6313d6-6cce-4a87-9ad8-a5e4f60f93be");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Справочник_СтатьиДвиженияДенежныхСредств,
		"Наименование", "ru = 'Статьи движения денег'", КодыЯзыков); // @НСтр-1
	
	НаборДокументаСведенияОТрудовойДеятельностиРаботникаСТД_Р = Элементы.Добавить();
	НаборДокументаСведенияОТрудовойДеятельностиРаботникаСТД_Р.ИмяПредопределенногоНабора = "Документ_СведенияОТрудовойДеятельностиРаботникаСТД_Р";
	НаборДокументаСведенияОТрудовойДеятельностиРаботникаСТД_Р.Используется = Истина;
	НаборДокументаСведенияОТрудовойДеятельностиРаботникаСТД_Р.Ссылка = Новый УникальныйИдентификатор("01d641c8-b680-45cd-80ce-875ce155e86c");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(НаборДокументаСведенияОТрудовойДеятельностиРаботникаСТД_Р,
		"Наименование", "ru = 'СТД-Р'", КодыЯзыков); // @НСтр-1
	
	Справочник_СтруктурныеЕдиницы = Элементы.Добавить();
	Справочник_СтруктурныеЕдиницы.ИмяПредопределенногоНабора = "Справочник_СтруктурныеЕдиницы";
	Справочник_СтруктурныеЕдиницы.Используется = Истина;
	Справочник_СтруктурныеЕдиницы.Ссылка = Новый УникальныйИдентификатор("0acd98ca-62a6-49d4-84f6-d1bfa6a9ca49");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Справочник_СтруктурныеЕдиницы, "Наименование",
		"ru = 'Структурные единицы'", КодыЯзыков); // @НСтр-1
	
	Документ_СчетНаОплату = Элементы.Добавить();
	Документ_СчетНаОплату.ИмяПредопределенногоНабора = "Документ_СчетНаОплату";
	Документ_СчетНаОплату.Используется = Истина;
	Документ_СчетНаОплату.Ссылка = Новый УникальныйИдентификатор("b494ca53-d1b2-4744-82cc-c445f6a8846e");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_СчетНаОплату, "Наименование",
		"ru = 'Счета на оплату'", КодыЯзыков); // @НСтр-1
	
	Документ_СчетНаОплатуПоставщика = Элементы.Добавить();
	Документ_СчетНаОплатуПоставщика.ИмяПредопределенногоНабора = "Документ_СчетНаОплатуПоставщика";
	Документ_СчетНаОплатуПоставщика.Используется = Истина;
	Документ_СчетНаОплатуПоставщика.Ссылка = Новый УникальныйИдентификатор("0e848dbc-dbe4-4f69-a8cc-ed666133d6fd");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_СчетНаОплатуПоставщика, "Наименование",
		"ru = 'Счета на оплату (полученные)'", КодыЯзыков); // @НСтр-1
	
	Справочник_ТранспортныеСредства = Элементы.Добавить();
	Справочник_ТранспортныеСредства.ИмяПредопределенногоНабора = "Справочник_ТранспортныеСредства";
	Справочник_ТранспортныеСредства.Используется = Истина;
	Справочник_ТранспортныеСредства.Ссылка = Новый УникальныйИдентификатор("a3ba891b-2a87-442f-9e8b-39d1b39b1b68");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Справочник_ТранспортныеСредства, "Наименование",
		"ru = 'Транспортные средства'", КодыЯзыков); // @НСтр-1
	
	Документ_УстановкаЦенНоменклатуры = Элементы.Добавить();
	Документ_УстановкаЦенНоменклатуры.ИмяПредопределенногоНабора = "Документ_УстановкаЦенНоменклатуры";
	Документ_УстановкаЦенНоменклатуры.Используется = Истина;
	Документ_УстановкаЦенНоменклатуры.Ссылка = Новый УникальныйИдентификатор("67d8899c-f4e0-409d-b410-4648ae9ccace");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_УстановкаЦенНоменклатуры, "Наименование",
		"ru = 'Установка цен'", КодыЯзыков); // @НСтр-1
	
	Справочник_ФизическиеЛица = Элементы.Добавить();
	Справочник_ФизическиеЛица.ИмяПредопределенногоНабора = "Справочник_ФизическиеЛица";
	Справочник_ФизическиеЛица.Используется = Истина;
	Справочник_ФизическиеЛица.Ссылка = Новый УникальныйИдентификатор("6495b8b2-ecf0-430b-b624-17b81d49744a");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Справочник_ФизическиеЛица, "Наименование",
	"ru = 'Физические лица'", КодыЯзыков); // @НСтр-1 
	
	Документ_УведомлениеОбИсчисленныхСуммахНалогов = Элементы.Добавить();
	Документ_УведомлениеОбИсчисленныхСуммахНалогов.ИмяПредопределенногоНабора = "Документ_УведомлениеОбИсчисленныхСуммахНалогов";
	Документ_УведомлениеОбИсчисленныхСуммахНалогов.Используется = Истина;
	Документ_УведомлениеОбИсчисленныхСуммахНалогов.Ссылка = Новый УникальныйИдентификатор("19f137ea-503e-43a0-a38b-dc1dcd6b3f52");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_УведомлениеОбИсчисленныхСуммахНалогов, "Наименование",
	"ru = 'Уведомление об исчисленных суммах налогов'", КодыЯзыков); // @НСтр-1
	
	Документ_ОперацияПоЕдиномуНалоговомуСчету = Элементы.Добавить();
	Документ_ОперацияПоЕдиномуНалоговомуСчету.ИмяПредопределенногоНабора = "Документ_ОперацияПоЕдиномуНалоговомуСчету";
	Документ_ОперацияПоЕдиномуНалоговомуСчету.Используется = Истина;
	Документ_ОперацияПоЕдиномуНалоговомуСчету.Ссылка = Новый УникальныйИдентификатор("6552560b-a7a5-4858-abe7-a15560926cd6");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_ОперацияПоЕдиномуНалоговомуСчету, "Наименование",
	"ru = 'Операция по единому налоговому счету'", КодыЯзыков); // @НСтр-1     
	
	Документ_ЗаявлениеОЗачетеВСчетПредстоящейОбязанности = Элементы.Добавить();
	Документ_ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.ИмяПредопределенногоНабора = "Документ_ЗаявлениеОЗачетеВСчетПредстоящейОбязанности";
	Документ_ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.Используется = Истина;
	Документ_ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.Ссылка = Новый УникальныйИдентификатор("5a20a484-14a4-45ee-b418-73eaacbdcd9f");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_ЗаявлениеОЗачетеВСчетПредстоящейОбязанности, "Наименование",
	"ru = 'Заявление о зачете в счет предстоящей обязанности'", КодыЯзыков); // @НСтр-1 
	
	Документ_ОтчетПереработчика = Элементы.Добавить();
	Документ_ОтчетПереработчика.ИмяПредопределенногоНабора = "Документ_ОтчетПереработчика";
	Документ_ОтчетПереработчика.Используется = Истина;
	Документ_ОтчетПереработчика.Ссылка = Новый УникальныйИдентификатор("11911f0e-ec5f-4640-ac8b-bdc65ac18b97");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_ОтчетПереработчика, "Наименование",
	"ru = 'Отчет переработчика'", КодыЯзыков); // @НСтр-1
	
	Документ_ОтчетОПереработке = Элементы.Добавить();
	Документ_ОтчетОПереработке.ИмяПредопределенногоНабора = "Документ_ОтчетОПереработке";
	Документ_ОтчетОПереработке.Используется = Истина;
	Документ_ОтчетОПереработке.Ссылка = Новый УникальныйИдентификатор("a98a6c5f-4669-45d8-81ab-ad1141642a67");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_ОтчетОПереработке, "Наименование",
	"ru = 'Отчет о переработке'", КодыЯзыков); // @НСтр-1
	
	Документ_ПеремещениеПоЯчейкам = Элементы.Добавить();
	Документ_ПеремещениеПоЯчейкам.ИмяПредопределенногоНабора = "Документ_ПеремещениеПоЯчейкам";
	Документ_ПеремещениеПоЯчейкам.Используется = Истина;
	Документ_ПеремещениеПоЯчейкам.Ссылка = Новый УникальныйИдентификатор("78bf1218-587e-45a3-813d-cf79b97a9997");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Документ_ПеремещениеПоЯчейкам, "Наименование",
	"ru = 'Перемещение по ячейкам'", КодыЯзыков); // @НСтр-1
	
	Справочник_АвтоматическиеСкидки = Элементы.Добавить();
	Справочник_АвтоматическиеСкидки.ИмяПредопределенногоНабора = "Справочник_АвтоматическиеСкидки";
	Справочник_АвтоматическиеСкидки.Используется = Истина;
	Справочник_АвтоматическиеСкидки.Ссылка = Новый УникальныйИдентификатор("0e16e837-d41f-46b4-a817-788c4dd0d786");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Справочник_АвтоматическиеСкидки, "Наименование",
		"ru = 'Автоматические скидки'", КодыЯзыков); // @НСтр-1
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ВосстановитьНастройкиФормСДополнительнымиРеквизитами() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведений.Родитель = &Родитель
		|	И НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенногоНабора = """"";
	
	// Наборы свойств, помеченные к удалению.
	Наборы = Новый Соответствие;
	ИменаПредопределенныхНаборов = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ПолучитьИменаПредопределенных();
	Для Каждого ИмяПредопределенногоНабора Из ИменаПредопределенныхНаборов Цикл
		Если СтрНачинаетсяС(ИмяПредопределенногоНабора, "Удалить") Тогда
			Попытка
				ПредопределенныйНабор = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяПредопределенногоНабора];
				ЭтоГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредопределенныйНабор, "ЭтоГруппа");
				Если ЭтоГруппа Тогда
					Продолжить;
				КонецЕсли;
				
				ДлинаПрефикса = СтрДлина("Удалить");
				ИмяНабора = Сред(ИмяПредопределенногоНабора, ДлинаПрефикса + 1, СтрДлина(ИмяПредопределенногоНабора) - ДлинаПрефикса);
				
				ИдентификаторСсылки = Строка(ПредопределенныйНабор.УникальныйИдентификатор());
				Если СтрЗаканчиваетсяНа(ИмяНабора, "_Общие") Тогда 
					Дочерние = Новый Массив;
					ИмяНабора     = СтрЗаменить(ИмяНабора, "_Общие", "");
					НаборРодитель = УправлениеСвойствами.НаборСвойствПоИмени(ИмяНабора);
					Запрос.УстановитьПараметр("Родитель", НаборРодитель);
					//@skip-check query-in-loop
					ДочерниеНаборы = Запрос.Выполнить().Выгрузить();
					Для Каждого ДочернийНабор Из ДочерниеНаборы Цикл
						ИдентификаторСсылкиДочернего = Строка(ДочернийНабор.Ссылка.УникальныйИдентификатор());
						ИдентификаторПолный = ИдентификаторСсылки + ИдентификаторСсылкиДочернего;
						КонтрольнаяСумма = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(СтрЗаменить(ИдентификаторПолный, "-", ""));
						Дочерние.Добавить("КлючНаборовСвойств" + КонтрольнаяСумма);
					КонецЦикла;
					Наборы.Вставить(ИмяНабора, Дочерние);
				Иначе
					КонтрольнаяСумма = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(СтрЗаменить(ИдентификаторСсылки, "-", ""));
					Наборы.Вставить(ИмяНабора, "КлючНаборовСвойств" + КонтрольнаяСумма + "," + ИдентификаторСсылки);
				КонецЕсли;
			Исключение
				// Обработка исключения не требуется, отсутствует предопределенный элемент в данных.
				Продолжить;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Настройки = ЧтениеНастроекИзХранилища(ХранилищеСистемныхНастроек);
	Для Каждого Настройка Из Настройки Цикл
		КлючОбъекта = Настройка.КлючОбъекта;
		КлючОбъектаЧастями = СтрРазделить(КлючОбъекта, ".", Ложь);
		Если КлючОбъектаЧастями.Количество() < 3 Тогда
			Продолжить;
		КонецЕсли;
		ИмяНабора     = КлючОбъектаЧастями[0] + "_" + КлючОбъектаЧастями[1];
		КлючНазначения = Наборы[ИмяНабора];
		Если КлючНазначения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(КлючНазначения) = Тип("Массив") Тогда
			Для Каждого Элемент Из КлючНазначения Цикл
				ПеренестиНастройку(Настройка, Элемент, ИмяНабора);
			КонецЦикла;
		Иначе 
			КлючНазначенияЧастями = СтрРазделить(КлючНазначения, ",");
			ПеренестиНастройку(Настройка, КлючНазначенияЧастями[0], ИмяНабора, КлючНазначенияЧастями[1]);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьУсловиеЗависимости(СтруктураЗависимостей, ПутьКРеквизиту, СтрокаТаблицы, КодУсловия, Условие)
	Если СтруктураЗависимостей = Неопределено Тогда
		ЗначенияПараметров = Новый Соответствие;
		Если Условие = "ВСписке" Или Условие = "НеВСписке" Тогда
			Значение = Новый СписокЗначений;
			Значение.Добавить(СтрокаТаблицы.Значение);
		Иначе
			Значение = СтрокаТаблицы.Значение;
		КонецЕсли;
		ЗначенияПараметров.Вставить(ПутьКРеквизиту, Значение);
		СтруктураЗависимостей = Новый Структура;
		СтруктураЗависимостей.Вставить("КодУсловия", КодУсловия);
		СтруктураЗависимостей.Вставить("ЗначенияПараметров", ЗначенияПараметров);
	ИначеЕсли (Условие = "ВСписке" Или Условие = "НеВСписке") И ТипЗнч(
		СтруктураЗависимостей.ЗначенияПараметров[ПутьКРеквизиту]) = Тип("СписокЗначений") Тогда
		СтруктураЗависимостей.ЗначенияПараметров[ПутьКРеквизиту].Добавить(СтрокаТаблицы.Значение);
	Иначе
		СтруктураЗависимостей.КодУсловия = СтруктураЗависимостей.КодУсловия + " И " + КодУсловия;
		Если Условие = "ВСписке" Или Условие = "НеВСписке" Тогда
			Значение = Новый СписокЗначений;
			Значение.Добавить(СтрокаТаблицы.Значение);
		Иначе
			Значение = СтрокаТаблицы.Значение;
		КонецЕсли;
		СтруктураЗависимостей.ЗначенияПараметров.Вставить(ПутьКРеквизиту, Значение);
	КонецЕсли;
КонецПроцедуры

Процедура ПеренестиНастройку(Настройка, КлючНазначения, ИмяНабора, УИДСтарогоНабора = Неопределено)
	
	Если СтрНайти(Настройка.КлючОбъекта, КлючНазначения) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НовыйНабор = УправлениеСвойствами.НаборСвойствПоИмени(ИмяНабора);
	Если ТипЗнч(НовыйНабор) <> Тип("СправочникСсылка.НаборыДополнительныхРеквизитовИСведений") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторНовогоНабора = НовыйНабор.УникальныйИдентификатор();
	КонтрольнаяСумма = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(СтрЗаменить(ИдентификаторНовогоНабора, "-", ""));
	НовыйКлючНазначения  = "КлючНаборовСвойств" + КонтрольнаяСумма;
	
	ЗначениеНастройки = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(Настройка.КлючОбъекта,
		Настройка.КлючНастроек, , , Настройка.Пользователь);
	
	Если УИДСтарогоНабора <> Неопределено Тогда
		ИДСтарогоНабора = СтрЗаменить(ВРег(УИДСтарогоНабора), "-", "x");
		ИДНовогоНабора  = СтрЗаменить(ВРег(ИдентификаторНовогоНабора), "-", "x");
		ЗначениеНастройкиСтрокой = ЗначениеВСтрокуВнутр(ЗначениеНастройки);
		ЗначениеНастройкиСтрокой = СтрЗаменить(ЗначениеНастройкиСтрокой, ИДСтарогоНабора, ИДНовогоНабора);
		ЗначениеНастройки = ЗначениеИзСтрокиВнутр(ЗначениеНастройкиСтрокой);
	КонецЕсли;
	
	НовыйКлючОбъекта = СтрЗаменить(Настройка.КлючОбъекта, КлючНазначения, НовыйКлючНазначения);
	ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить(НовыйКлючОбъекта, Настройка.КлючНастроек,
		ЗначениеНастройки, , Настройка.Пользователь);
	
КонецПроцедуры

Функция ЧтениеНастроекИзХранилища(МенеджерНастроек)
	
	Настройки = Новый ТаблицаЗначений;
	Настройки.Колонки.Добавить("КлючОбъекта");
	Настройки.Колонки.Добавить("КлючНастроек");
	Настройки.Колонки.Добавить("Пользователь");
	
	ВыборкаНастроек = МенеджерНастроек.Выбрать();
	Пока СледующаяНастройка(ВыборкаНастроек) Цикл
		
		Если СтрНайти(ВыборкаНастроек.КлючОбъекта, "КлючНаборовСвойств") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Настройки.Добавить();
		НоваяСтрока.КлючОбъекта = ВыборкаНастроек.КлючОбъекта;
		НоваяСтрока.КлючНастроек = ВыборкаНастроек.КлючНастроек;
		НоваяСтрока.Пользователь = ВыборкаНастроек.Пользователь;
		
	КонецЦикла;
	
	Возврат Настройки;
	
КонецФункции

Функция СледующаяНастройка(Выборка)
	
	ЕстьСледующий = Ложь;
	Попытка
		ЕстьСледующий = Выборка.Следующий();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат ЕстьСледующий;
	
КонецФункции

#КонецОбласти