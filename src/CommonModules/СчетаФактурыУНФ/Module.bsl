#Область ПрограммныйИнтерфейс

// При записи документа основания устанавливает версию Счет-фактуры
//
// Параметры:
//  ДокументОснованиеСсылка - документ основания счет фактуры
//  ДополнительныеСвойства - дополнительные свойства документа основания
//  Полученный - определяет вид документа (СчетФактура или СчетФактураПолученный)
Процедура ПриЗаписиДокументаОснованияСчетаФактуры(ДокументОснованиеСсылка, ДополнительныеСвойства, Полученный) Экспорт
	
	ДополнительныеСвойства.Вставить("ВерсияПодчиненногоСчетФактуры", Неопределено);
	
	ОписаниеСчетФактуры = ПолучитьПодчиненныйСчетФактуру(ДокументОснованиеСсылка, Полученный);
	Если ТипЗнч(ОписаниеСчетФактуры) = Тип("Структура") Тогда
		
		Если ОписаниеСчетФактуры.Свойство("Версия", ДополнительныеСвойства.ВерсияПодчиненногоСчетФактуры)
			И ОписаниеСчетФактуры.Версия = "1.6.12" Тогда
			
			ИзменитьПодчиненныйСчетФактуру(ОписаниеСчетФактуры.Ссылка, ДополнительныеСвойства);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает ссылку на подчиненный счет-фактуру
//
// Параметры:
//  ДокументОснование - документ основания счет фактуры
//  Полученный - определяет вид документа (СчетФактура или СчетФактураПолученный)
// Возвращаемое значение:
//  Структура - структура с данными счет фактуры
Функция ПолучитьПодчиненныйСчетФактуру(ДокументОснование, Полученный = Ложь, Корректировочный = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если Корректировочный = Неопределено Тогда
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
			Корректировочный = ДокументОснование.ПокупателюВыставляетсяКорректировочныйСчетФактура;
		Иначе
			Корректировочный = Ложь;
		КонецЕсли;
	КонецЕсли;
		
	Если Полученный И Не Корректировочный Тогда
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионера") 
			И ДокументОснование.ИспользоватьНовыйВидДокумента И ДокументОснование.ПокупателиВозвраты.Количество() Тогда 
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	СчетФактураДокументыОснования.Ссылка КАК Ссылка,
			|	СчетФактураДокументыОснования.Ссылка.НомерВходящегоДокумента КАК Номер,
			|	СчетФактураДокументыОснования.Ссылка.Дата КАК Дата,
			|	СчетФактураДокументыОснования.Ссылка.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
			|	СчетФактураДокументыОснования.Ссылка.Проведен КАК Проведен
			|ИЗ
			|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураДокументыОснования
			|ГДЕ
			|	СчетФактураДокументыОснования.ДокументОснование = &ДокументОснование
			|	И НЕ СчетФактураДокументыОснования.Ссылка.ПометкаУдаления
			|	И СчетФактураДокументыОснования.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.СуммовыеРазницы)
			|	И НЕ (СчетФактураДокументыОснования.Ссылка.НомерВходящегоДокумента, СчетФактураДокументыОснования.Ссылка.Контрагент) В
			|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|					ОтчетКомиссионераПокупателиВозвраты.НомерСФ КАК НомерСФ,
			|					ОтчетКомиссионераПокупателиВозвраты.Покупатель КАК Покупатель
			|				ИЗ
			|					Документ.ОтчетКомиссионера.ПокупателиВозвраты КАК ОтчетКомиссионераПокупателиВозвраты
			|				ГДЕ
			|					ОтчетКомиссионераПокупателиВозвраты.Ссылка = &ДокументОснование)";
			
			
		Иначе
			
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СчетФактураДокументыОснования.Ссылка КАК Ссылка,
		|	СчетФактураДокументыОснования.Ссылка.НомерВходящегоДокумента КАК Номер,
		|	СчетФактураДокументыОснования.Ссылка.Дата КАК Дата,
		|	СчетФактураДокументыОснования.Ссылка.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	СчетФактураДокументыОснования.Ссылка.Проведен КАК Проведен
		|ИЗ
		|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураДокументыОснования
		|ГДЕ
		|	СчетФактураДокументыОснования.ДокументОснование = &ДокументОснование
		|	И НЕ СчетФактураДокументыОснования.Ссылка.ПометкаУдаления
		|	И
		|		СчетФактураДокументыОснования.Ссылка.ВидОперации <> Значение(Перечисление.ВидыОперацийСчетФактураПолученный.СуммовыеРазницы)";
		
		КонецЕсли;
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СчетФактураДокументыОснования.Ссылка КАК Ссылка,
		|	СчетФактураДокументыОснования.Ссылка.Номер КАК Номер,
		|	СчетФактураДокументыОснования.Ссылка.Дата КАК Дата,
		|	НЕОПРЕДЕЛЕНО КАК ДатаВходящегоДокумента,
		|	СчетФактураДокументыОснования.Ссылка.Проведен КАК Проведен
		|ИЗ
		|	Документ.СчетФактура.ДокументыОснования КАК СчетФактураДокументыОснования
		|ГДЕ
		|	СчетФактураДокументыОснования.ДокументОснование = &ДокументОснование
		|	И СчетФактураДокументыОснования.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактура.СуммовыеРазницы)
		|	И НЕ СчетФактураДокументыОснования.Ссылка.ПометкаУдаления";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	 Выборка = РезультатЗапроса.Выбрать();
	
	Если Полученный И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет")
		И ДокументОснование.СчетФактураВТабличнойЧастиДокумента Тогда
		// Проверим находится ли счет-фактура действительно в табличной части
		
		ПараметрыПоиска = Новый Структура("СчетФактура");
		Результат = Новый Структура;
		Пока Выборка.Следующий() Цикл
			
			ПараметрыПоиска.Вставить("СчетФактура", Выборка.Ссылка);
			РезультатПоиска = ДокументОснование.Запасы.НайтиСтроки(ПараметрыПоиска);
			
			СчетФактураЕстьВДокументе = РезультатПоиска.Количество();
			
			Если Не СчетФактураЕстьВДокументе Тогда
				РезультатПоиска = ДокументОснование.Расходы.НайтиСтроки(ПараметрыПоиска);
				СчетФактураЕстьВДокументе = РезультатПоиска.Количество();
			КонецЕсли;
			
			Если Не СчетФактураЕстьВДокументе Тогда 
				Продолжить
			КонецЕсли;
			
			Результат.Вставить("Ссылка", Выборка.Ссылка);
			Результат.Вставить("Номер", Выборка.Номер);
			Результат.Вставить("Версия", ?(Выборка.Ссылка.УдалитьЗапасы.Количество() > 0, "1.6.11", "1.6.12"));
			
			Если ЗначениеЗаполнено(Выборка.ДатаВходящегоДокумента) Тогда
				Результат.Вставить("Дата", Выборка.ДатаВходящегоДокумента);
			Иначе
				Результат.Вставить("Дата", Выборка.Дата);
			КонецЕсли;
			
			Результат.Вставить("Проведен", Выборка.Проведен);
			
			Прервать;
			
		КонецЦикла;
		
		Если Не Результат.Количество() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		
		Выборка.Следующий();
		
		Результат = Новый Структура;
		Результат.Вставить("Ссылка", Выборка.Ссылка);
		Результат.Вставить("Номер", Выборка.Номер);
		Результат.Вставить("Версия", ?(Выборка.Ссылка.УдалитьЗапасы.Количество() > 0, "1.6.11", "1.6.12"));
		
		Если ЗначениеЗаполнено(Выборка.ДатаВходящегоДокумента) Тогда
			Результат.Вставить("Дата", Выборка.ДатаВходящегоДокумента);
		Иначе
			Результат.Вставить("Дата", Выборка.Дата);
		КонецЕсли;
		
		Результат.Вставить("Проведен", Выборка.Проведен);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьПодчиненныйСчетФактуру()

// Устанавливает надпись гиперссылки на Счет-фактуру
//
// Параметры:
//  ФормаДокумента - форма документа для установки надписи
//  Полученный - определяет вид документа (СчетФактура или СчетФактураПолученный)
Процедура УстановитьТекстПроСчетФактуру(ФормаДокумента, Полученный = Ложь) Экспорт

	НайденныйСчетФактура = ПолучитьПодчиненныйСчетФактуру(ФормаДокумента.Объект.Ссылка, Полученный);
	Если ЗначениеЗаполнено(НайденныйСчетФактура) Тогда
		ТекстПроСчетФактуру = НСтр("ru = '№ %Номер% от %Дата% г.'");
		ТекстПроСчетФактуру = СтрЗаменить(ТекстПроСчетФактуру, "%Номер%", НайденныйСчетФактура.Номер);
		ТекстПроСчетФактуру = СтрЗаменить(ТекстПроСчетФактуру, "%Дата%", Формат(НайденныйСчетФактура.Дата, "ДЛФ=D"));
		ФормаДокумента.СчетФактураТекст = ТекстПроСчетФактуру;	
	Иначе
		ФормаДокумента.СчетФактураТекст = НСтр("ru = 'Ввести счет-фактуру'");
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТекстПроСчетФактуру()

// Процедура заполняет параметры для формирования печатной формы Универсального передаточного документа
//
// Параметры:
//  ПараметрКоманды - параметры выполнения команды
//  ИсточникиПечати - источник печати УПД
//  СообщенияПользователю - текст сообщения пользователю
Процедура ЗаполнитьПараметрыПечатиУПД(ПараметрКоманды, ИсточникиПечати, СообщенияПользователю) Экспорт
	
	ОпределитьИсточникиПечатиУПД(ПараметрКоманды, ИсточникиПечати, СообщенияПользователю);
	
КонецПроцедуры // ЗаполнитьПараметрыПечатиУПД()

// Процедура заполняет параметры для формирования печатной формы Универсального корректировочного документа
//
// Параметры:
//  ПараметрКоманды - параметры выполнения команды
//  ИсточникиПечати - источник печати УПД
//  СообщенияПользователю - текст сообщения пользователю
Процедура ЗаполнитьПараметрыПечатиУКД(ПараметрКоманды, ИсточникиПечати, СообщенияПользователю) Экспорт
	
	ОпределитьИсточникиПечатиУКД(ПараметрКоманды, ИсточникиПечати, СообщенияПользователю);
	
КонецПроцедуры // ЗаполнитьПараметрыПечатиУПД()

// Отменяет проведение подчиненного счета-фактуры при отмене проведения основания
// 
// Параметры:
//  ДокументСсылка - ДокументСсылка
//  ДокументНомер - Строка
//  ДокументДата - Дата
//  ДополнительныеСвойства - Структура
//  Полученный - Булево
Процедура ОтменитьПроведениеПодчиненногоСчетаФактуры(ДокументСсылка, ДокументНомер, ДокументДата,
	ДополнительныеСвойства, Полученный) Экспорт

	ПодчиненныйСчетФактура = ПолучитьПодчиненныйСчетФактуру(ДокументСсылка, Полученный);
	Если ПодчиненныйСчетФактура = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не ПодчиненныйСчетФактура.Проведен Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ПредставлениеОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ВидОперации");
	Иначе
		ПредставлениеОперации = ДокументСсылка.Метаданные().Представление();
	КонецЕсли;

	ШаблонПредставления = НСтр("ru = '%1 № %2 от %3'");

	ПредставлениеДокумента = СтрШаблон(ШаблонПредставления, ПредставлениеОперации, ДокументНомер, Формат(ДокументДата,
		"ДЛФ=D;"));

	ПредставлениеСчетаФактуры = СтрШаблон(ШаблонПредставления,
		ПодчиненныйСчетФактура.Ссылка.Метаданные().Представление(), ПодчиненныйСчетФактура.Номер, Формат(
		ПодчиненныйСчетФактура.Дата, "ДЛФ=D;"));

	ТекстСообщения = СтрШаблон(НСтр(
		"ru = 'В связи с отсутствием движений у документа ""%1"" отменяется проведение ""%2"".'"),
		ПредставлениеДокумента, ПредставлениеСчетаФактуры);

	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

	СчетФактураОбъект = ПодчиненныйСчетФактура.Ссылка.ПолучитьОбъект();
	Если ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииОбъектов") Тогда
		СчетФактураОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов",
			ДополнительныеСвойства.ОтключитьМеханизмРегистрацииОбъектов);
	КонецЕсли;
	СчетФактураОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);

КонецПроцедуры

// Создает счет-фактуру по документу основанию
//
// Параметры:
//  ДокументОснование - ссылка на документ основание
//  СчетФактураДата - дата счет-фактуры
//  СчетФактураНомер - номер счет-фактуры
// Возвращаемое значение:
//  Структура - структура параметров созданной счет-фактуры
Функция СоздатьСчетФактуру(ДокументОснование, СчетФактураДата, СчетФактураНомер = Неопределено) Экспорт
	
	Полученный = Не СчетФактураНомер = Неопределено;
	
	Корректировочный = Ложь;
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		Корректировочный = ДокументОснование.ПокупателюВыставляетсяКорректировочныйСчетФактура;
	КонецЕсли;
	
	Если Полученный Тогда
		СчетФактура = Документы.СчетФактураПолученный.СоздатьДокумент();
	Иначе
		СчетФактура = Документы.СчетФактура.СоздатьДокумент();
	КонецЕсли;
	
	СчетФактура.Заполнить(ДокументОснование);
	
	СтруктураВозврата = Новый Структура;
	
	Если Полученный И Не Корректировочный Тогда
		СчетФактура.Дата = ДокументОснование.Дата;
		СчетФактура.НомерВходящегоДокумента = СчетФактураНомер;
		СчетФактура.ДатаВходящегоДокумента = СчетФактураДата;
		СчетФактура.УдалитьОбновлениеЗавершено = Истина;
		
		Если ДокументОснование.Проведен Тогда
			СчетФактура.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			СчетФактура.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		СтруктураВозврата.Вставить("ДатаВходящегоДокумента", СчетФактура.ДатаВходящегоДокумента);
		СтруктураВозврата.Вставить("НомерВходящегоДокумента", СчетФактура.НомерВходящегоДокумента);
		
		СтруктураВозврата.Вставить("Дата", Дата(1,1,1));
		СтруктураВозврата.Вставить("Номер", "");
	Иначе
		
		Если Не ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			СчетФактура.Дата = СчетФактураДата;
		КонецЕсли;
		
		Если ДокументОснование.Проведен Тогда
			СчетФактура.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			СчетФактура.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		СтруктураВозврата.Вставить("Дата", СчетФактура.Дата);
		СтруктураВозврата.Вставить("Номер", СчетФактура.Номер);
		
		СтруктураВозврата.Вставить("ДатаВходящегоДокумента", Дата(1,1,1));
		СтруктураВозврата.Вставить("НомерВходящегоДокумента", "");
	КонецЕсли;
	
	СтруктураВозврата.Вставить("Ссылка", СчетФактура.Ссылка);

	Возврат СтруктураВозврата;
	
КонецФункции // ЗаполнитьПараметрыПечатиУПД()

// Устанавливает надпись гиперссылки на Счет-фактуру
//
// Параметры:
//  Ссылка - Ссылка на документ основание
Процедура ПометитьНаУдалениеСчетФактурыНеверногоТипа(Ссылка, ПокупателюВыставляетсяКорректировочныйСчетФактура) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Если ПокупателюВыставляетсяКорректировочныйСчетФактура Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетФактураПолученныйДокументыОснования.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
		|ГДЕ
		|	СчетФактураПолученныйДокументыОснования.ДокументОснование = &Ссылка
		|	И НЕ СчетФактураПолученныйДокументыОснования.Ссылка.ПометкаУдаления
		|	И СчетФактураПолученныйДокументыОснования.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.Поступление)"
		
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетФактураДокументыОснования.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СчетФактура.ДокументыОснования КАК СчетФактураДокументыОснования
		|ГДЕ
		|	СчетФактураДокументыОснования.ДокументОснование = &Ссылка
		|	И НЕ СчетФактураДокументыОснования.Ссылка.ПометкаУдаления
		|	И СчетФактураДокументыОснования.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактура.Корректировка)";
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СчетФактураОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СчетФактураОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
		
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Устарела. Будет удалена в следующей версии программы
Процедура ИзменитьПодчиненнуюСчетФактуру(СчетФактураСсылка, Полученный = Ложь) Экспорт
	ИзменитьПодчиненныйСчетФактуру(СчетФактураСсылка, Новый Структура);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция проверяет наличие счет-фактуры выданной
// 
// В случае ее отсутствия документ СФ (выданная) будет создан.
//
Функция ПроверитьВыпискуСчетовФактур(ИсточникиПечати, ДокументРеализации, СообщенияПользователю, ВидОперации = Неопределено)
	
	СчетФактураВыданный = ПолучитьПодчиненныйСчетФактуру(ДокументРеализации, Ложь);
	
	Если СчетФактураВыданный = Неопределено Тогда
		
		НовыйСчетФактура = Документы.СчетФактура.СоздатьДокумент();
		НовыйСчетФактура.Заполнить(ДокументРеализации);
		НовыйСчетФактура.Дата = ТекущаяДатаСеанса();
		
		Если ЗначениеЗаполнено(ВидОперации) Тогда
			НовыйСчетФактура.ВидОперации = ВидОперации;
		КонецЕсли;
		
		Попытка 
			
			// При расчетах в у.е. нужно распределять сумму аванса по ТЧ Запасы. Это выполняется при проведении документа.
			Если ДокументРеализации.Проведен Тогда
				НовыйСчетФактура.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				НовыйСчетФактура.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
			ТекстСообщения = НСтр("ru = 'Сформирован подчиненный документ Счет-фактура № %1 от %2.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НовыйСчетФактура.Номер, НовыйСчетФактура.Дата);
			
			СчетФактураВыданный = НовыйСчетФактура.Ссылка;
			
			ДобавитьОписаниеСозданнойСчетФактуры(ДокументРеализации, НовыйСчетФактура.Ссылка, ИсточникиПечати.СозданныеСчетаФактуры);
			
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Не удалось сформировать подчиненный документ Счет-фактура для документа %1. Для формирования счет-фактуры нажмите на гиперссылку ""Создать"" внизу.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументРеализации);
			
		КонецПопытки;
		
		// Выводить сообщения сразу неэффективно, так как окно документа прячется за окном ОФ "Печать"
		СообщенияПользователю.Добавить(ТекстСообщения);
		
	Иначе
		
		СчетФактураВыданный = СчетФактураВыданный.Ссылка;
		
	КонецЕсли;
	
	Возврат СчетФактураВыданный;
	
КонецФункции // ПроверитьВыпискуСчетовФактур()

// Процедура определяет источники, которые необходимо использовать в качестве менеджера печати
//
// Если система налогообложения общая, обязательна необходима счет-фактура, которая будет использоваться в роли источника,
// иначе можно сформировать макет непосредственно из текущего документа
//
Процедура ОпределитьИсточникиПечатиУКД(ПараметрКоманды, ИсточникиПечати, СообщенияПользователю)
	
	МассивСчетовФактур = Новый Массив;
	МассивДокументовРеализаций = Новый Массив;
	
	Для каждого ДокументПечати Из ПараметрКоманды Цикл
		
		Если ТипЗнч(ДокументПечати) = Тип("ДокументСсылка.СчетФактура") Тогда
			МассивСчетовФактур.Добавить(ДокументПечати);
			Продолжить;
		КонецЕсли;
		
		ЕстьНДС = Ложь;
		
		// Поскольку в УНФ не ограничивается выписка счетов-фактур для организаций 
		// с упрощенной системой налогообложения, мы устанавливаем источник печати не только по наличию НДС в документе,
		// но и по наличию самого документа счет-фактура.
		СчетФактураВыданный = ПолучитьПодчиненныйСчетФактуру(ДокументПечати, Ложь);
		
		Если ТипЗнч(ДокументПечати) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			
			ИсточникиПечати.ИмяИсточника = "Документ.КорректировкаРеализации";
			ЕстьНДС = (ДокументПечати.Запасы.Итог("СуммаНДС") <> 0) ИЛИ ЗначениеЗаполнено(СчетФактураВыданный);
			
		КонецЕсли;
		
		Если ЕстьНДС Тогда
			
			ВидОперацииСФ = Перечисления.ВидыОперацийСчетФактура.Корректировка;
			СчетФактура = ПроверитьВыпискуСчетовФактур(ИсточникиПечати, ДокументПечати, СообщенияПользователю, ВидОперацииСФ);
			МассивСчетовФактур.Добавить(СчетФактура);
			
		Иначе
			
			МассивДокументовРеализаций.Добавить(ДокументПечати);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСчетовФактур.Количество() > 0 Тогда
		
		ИсточникиПечати.СчетФактура = МассивСчетовФактур;
		
	КонецЕсли;
	
	Если МассивДокументовРеализаций.Количество() > 0 Тогда
		
		ИсточникиПечати.ДокументыРеализации = МассивДокументовРеализаций;
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьИсточникиПечатиУПД()

// Процедура добавляет описание счет фактуры для оповещения открытых форм.
// 
// При оповещении будет актуализирована надпись-гиперссылка в подвале формы.
//
// ДокументОснование - тип ДокументСсылка, используется при идентификации открытый формы;
// СчетФактура - тип ДокументСсылка, счет-фактура ссылка которого является источником данных для оповещения;
// Описание - тип Массив. Заполняемый массив с описанием оповещения. Если не передан, создается новый массив;
//
Процедура ДобавитьОписаниеСозданнойСчетФактуры(ДокументОснование, СчетФактура, Описание)
	
	Если ТипЗнч(Описание) <> Тип("Массив") Тогда
		
		Описание = Новый Массив;
		
	КонецЕсли;
	
	ОписаниеНовойСчетФактуры = Новый Массив(3);
	
	ОписаниеНовойСчетФактуры[0] = ДокументОснование;
	ОписаниеНовойСчетФактуры[1] = СчетФактура.Номер;
	ОписаниеНовойСчетФактуры[2] = СчетФактура.Дата;
	
	Описание.Добавить(ОписаниеНовойСчетФактуры);
	
КонецПроцедуры // ДобавитьОписаниеСозданнойСчетФактуры()

// Процедура определяет источники, которые необходимо использовать в качестве менеджера печати
//
// Если система налогообложения общая, обязательна необходима счет-фактура, которая будет использоваться в роли источника,
// иначе можно сформировать макет непосредственно из текущего документа
//
Процедура ОпределитьИсточникиПечатиУПД(ПараметрКоманды, ИсточникиПечати, СообщенияПользователю)
	
	МассивСчетФактура = Новый Массив;
	МассивДокументовРеализаций = Новый Массив;
	
	Для каждого ДокументПечати Из ПараметрКоманды Цикл
		
		ЕстьНДС = Ложь;
		
		// Поскольку в УНФ не ограничивается выписка счетов-фактур для организаций 
		// с упрощенной системой налогообложения, мы устанавливаем источник печати не только по наличию НДС в документе,
		// но и по наличию самого документа счет-фактура.
		СчетФактураВыданный = ПолучитьПодчиненныйСчетФактуру(ДокументПечати, Ложь);
		
		Если ТипЗнч(ДокументПечати) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			
			ИсточникиПечати.ИмяИсточника = "Документ.ЗаказПокупателя";
			ЕстьНДС = (ДокументПечати.Работы.Итог("СуммаНДС") <> 0) ИЛИ (ДокументПечати.Запасы.Итог("СуммаНДС") <> 0) ИЛИ ЗначениеЗаполнено(СчетФактураВыданный);
			
		ИначеЕсли ТипЗнч(ДокументПечати) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
			
			ИсточникиПечати.ИмяИсточника = "Документ.РасходнаяНакладная";
			ЕстьНДС = (ДокументПечати.Запасы.Итог("СуммаНДС") <> 0) ИЛИ ЗначениеЗаполнено(СчетФактураВыданный)
				ИЛИ ДокументПечати.СуммаНДСДоставки > 0;
			
		ИначеЕсли ТипЗнч(ДокументПечати) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
			
			ИсточникиПечати.ИмяИсточника = "Документ.АктВыполненныхРабот";
			ЕстьНДС = (ДокументПечати.РаботыИУслуги.Итог("СуммаНДС") <> 0) ИЛИ ЗначениеЗаполнено(СчетФактураВыданный);
			
		ИначеЕсли ТипЗнч(ДокументПечати) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			
			ИсточникиПечати.ИмяИсточника = "Документ.КорректировкаРеализации";
			ЕстьНДС = (ДокументПечати.Запасы.Итог("СуммаНДС") <> 0) ИЛИ ЗначениеЗаполнено(СчетФактураВыданный);
			
		КонецЕсли;
		
		Если ЕстьНДС Тогда
			
			СчетФактура = ПроверитьВыпискуСчетовФактур(ИсточникиПечати, ДокументПечати, СообщенияПользователю);
			МассивСчетФактура.Добавить(СчетФактура);
			
		Иначе
			
			МассивДокументовРеализаций.Добавить(ДокументПечати);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСчетФактура.Количество() > 0 Тогда
		
		ИсточникиПечати.СчетФактура = МассивСчетФактура;
		
	КонецЕсли;
	
	Если МассивДокументовРеализаций.Количество() > 0 Тогда
		
		ИсточникиПечати.ДокументыРеализации = МассивДокументовРеализаций;
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьИсточникиПечатиУПД()

// При изменении документа основания изменить подчиненный счет-фактуру
//
// Параметры:
//  СчетФактураСсылка - документ основания, для которого ищем и правим счет фактуру
//  ДополнительныеСвойства - Структура
Процедура ИзменитьПодчиненныйСчетФактуру(СчетФактураСсылка, ДополнительныеСвойства)

	Если СчетФактураСсылка.ДокументыОснования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СчетФактураОбъект = СчетФактураСсылка.ПолучитьОбъект();
	СчетФактураОбъект.ДополнительныеСвойства.Вставить("ЭтоСинхронизация", Истина);
	Если ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииОбъектов") Тогда
		СчетФактураОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов",
			ДополнительныеСвойства.ОтключитьМеханизмРегистрацииОбъектов);
	КонецЕсли;

	СчетФактураОбъект.Заполнить(СчетФактураСсылка.ДокументыОснования.Выгрузить());

	Если СчетФактураОбъект.Проведен Тогда
		СчетФактураОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		СчетФактураОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти