#Область ИнтеграцияИСКлиентПереопределяемый

// Открывает форму списка видов номенклатуры.
//
Процедура ОткрытьФормуСпискаВидыНоменклатуры(ВладелецФормы) Экспорт
	
	ОткрытьФорму("Справочник.КатегорииНоменклатуры.ФормаСписка",, ВладелецФормы);
	
КонецПроцедуры

// Открывает форму списка номенклатуры.
//
Процедура ОткрытьФормуСпискаНоменклатуры(ВладелецФормы) Экспорт
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаСписка",, ВладелецФормы);
	
КонецПроцедуры

// Обработчик специфических сценариев записи объекта в форме (например, после дополнительных ответов пользователя)
//   При переопределении действия:
//     ** Вызвать обработчик ДействиеПослеЗаписи после окончания записи
//     ** Установить признак СтандартнаяОбработка в значение Ложь
//
// Параметры:
//   Форма                - УправляемаяФорма     - источник события записи
//   Объект               - ДанныеФормыСтруктура - записываемый из формы объект
//   ДействиеПослеЗаписи  - ОписаниеОповещения   - действие которое требуется выполнить после записи объекта из формы
//   СтандартнаяОбработка - Булево               - признак стандартной обработки события (запись без блокирующих вызовов)
//
Процедура ВыполнитьЗаписьОбъектаВФорме(Форма, Объект, ДействиеПослеЗаписи, СтандартнаяОбработка) Экспорт
	
	Если Объект.Проведен Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Иначе
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
	Результат = Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписи));
	
	Если ДействиеПослеЗаписи <> Неопределено И Результат Тогда
		ВыполнитьОбработкуОповещения(ДействиеПослеЗаписи, Результат);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияФормИСКлиентПереопределяемый

// Выполняет переопределяемую команду
//
// Параметры:
//  Форма                   - УправляемаяФорма - форма, в которой расположена команда
//  Команда                 - КомандаФормы     - команда формы
//  ДополнительныеПараметры - Структура        - дополнительные параметры.
//
Процедура ВыполнитьПереопределяемуюКомандуИС(Форма, Команда, ДополнительныеПараметры) Экспорт
	
	Если Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента_РМК"
		Или Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокумента" Тогда
	
		Если Форма.Объект.Запасы.Количество() Тогда
			ДобавленныеВидыПродукции = ИнтеграцияИСУНФВызовСервера.ВидыПродукцииВЗапасах(Форма.Объект.Запасы);
		Иначе
			ДобавленныеВидыПродукции = Новый СписокЗначений;
		КонецЕсли;
		
		АлкогольнаяПродукция = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная");
		
		Если ДобавленныеВидыПродукции.Количество() = 0 Тогда
			Если Форма.ПараметрыИнтеграцииГосИС.Получить("ЕГАИС")<>Неопределено Тогда
				ДобавленныеВидыПродукции.Добавить(АлкогольнаяПродукция);
			КонецЕсли;
			Если Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП")<>Неопределено Тогда
				Для Каждого ВидПродукции Из Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП").ВидыПродукции Цикл
					ДобавленныеВидыПродукции.Добавить(ВидПродукции);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ДобавленныеВидыПродукции.Количество() = 1 Тогда
			
			ВидПродукции = ДобавленныеВидыПродукции[0].Значение;
			Если ВидПродукции = АлкогольнаяПродукция Тогда
				Команда = Новый Структура("Имя", "ПроверитьАкцизныеМаркиЕГАИС");
			Иначе
				Команда = Новый Структура("Имя", 
					СтрШаблон("ПроверитьАкцизныеМаркиГосИС%1",
						ИнтеграцияИСКлиентСервер.ИндексВидаПродукцииИС(ВидПродукции)));
			КонецЕсли;
			
		Иначе
			
			Команда = Новый Структура("Имя", "");
			
			Если ДобавленныеВидыПродукции.Количество() Тогда
				
				СписокВыбора = Новый СписокЗначений;
				
				Если ДобавленныеВидыПродукции.НайтиПоЗначению(АлкогольнаяПродукция) <> Неопределено Тогда
					СписокВыбора.Добавить(АлкогольнаяПродукция, НСтр("ru = 'Алкогольная продукция'"));
				КонецЕсли;
				
				Для Каждого ВидПродукцииИС Из ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП(Истина) Цикл
					Если ДобавленныеВидыПродукции.НайтиПоЗначению(ВидПродукцииИС) <> Неопределено Тогда
						СписокВыбора.Добавить(ВидПродукцииИС, "" + ВидПродукцииИС);
					КонецЕсли;
				КонецЦикла;
				
				ПараметрыФормы = Новый Структура("СписокВыбора", СписокВыбора);
				
				ДополнительныеПараметры = Новый Структура("Форма", Форма);
				ОповещениеОВыборе = Новый ОписаниеОповещения("ОбработатьВыборФормыСканирования", ИнтеграцияИСУНФКлиент, ДополнительныеПараметры);
				ОткрытьФорму("ОбщаяФорма.ФормаВыбораВидовПродукцииГосИС",
					ПараметрыФормы,
					Форма,,,,
					ОповещениеОВыборе,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчики событий обрабатываемых БГосИС в прикладных формах
//
// Параметры:
//  Форма                   - УправляемаяФорма - оповещаемая форма,
//  ИмяСобытия              - Строка           - имя события,
//  Параметр                - Произвольный     - параметр сообщения. Могут быть переданы любые необходимые данные,
//  Источник                - Произвольный     - источник события.
//  ДополнительныеПараметры - Структура        - дополнительные параметры обработки
Процедура ОбработкаОповещенияИС(Форма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры) Экспорт
	
	Если Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента_РМК"
		Или Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокумента" Тогда
			
		Если Источник = "ПодключаемоеОборудование" И Форма.ВводДоступен() Тогда
			Если ИмяСобытия = "ScanData" И Не глПодключаемоеОборудованиеСобытиеОбработано Тогда
				Если Форма.ИспользоватьАкцизныеМарки Тогда
					Если Форма.ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокумента" Тогда
						ОбщегоНазначенияКлиент.СообщитьПользователю(
							НСтр("ru = 'Считывание марок следует производить в специализированную форму: ""Акцизные марки""'"));
					Иначе
						ДополнительныеПараметры.СтандартнаяОбработка = Ложь;
						МенеджерОборудованияУНФКлиент.ОбработатьСобытие();
						ДанныеШтрихкода = МенеджерОборудованияУНФКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр);
						ОписаниеОповещения = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", Форма);
						ВыполнитьОбработкуОповещения(ОписаниеОповещения, ДанныеШтрихкода);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчики БГосИС элементов прикладных форм
//   Ограничения: не предполагает контекстный серверный вызов
//
// Параметры:
//   Форма                   - УправляемаяФорма - форма, из которой происходит вызов процедуры.
//   Элемент                 - ЭлементФормы     - элемент-источник события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	Если Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента_РМК"
		Или Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокумента" Тогда
		
		ИмяТабличнойЧасти = Форма.КэшДанныхГОСИС.ИмяТабличнойЧасти;
		КэшСтроки         = Форма.КэшДанныхГОСИС.ТекущаяСтрока;
		
		Если Элемент = ИмяТабличнойЧасти Тогда
			
			Если ДополнительныеПараметры.Свойство("ПередУдалением") Тогда
				Для Каждого СтрокаТовары Из Форма.Элементы[ИмяТабличнойЧасти].ВыделенныеСтроки Цикл
					Если Форма.Элементы[ИмяТабличнойЧасти].ДанныеСтроки(СтрокаТовары).МаркируемаяПродукция Тогда
						Форма.КэшДанныхГОСИС.Вставить("ТребуетсяПересчетМарокПослеУдаленияСтрок");
					КонецЕсли;
				КонецЦикла;
				Возврат;
			КонецЕсли;
			
			Если ДополнительныеПараметры.Свойство("ПослеУдаления") Тогда
				Если Форма.КэшДанныхГОСИС.Свойство("ТребуетсяПересчетМарокПослеУдаленияСтрок") Тогда
					Форма.КэшДанныхГОСИС.Удалить("ТребуетсяПересчетМарокПослеУдаленияСтрок");
					ДополнительныеПараметры.Вставить("ТребуетсяСерверныйВызов");
				КонецЕсли;
				ОчиститьКэшСтроки(Форма, ИмяТабличнойЧасти);
				Возврат;
			КонецЕсли;
			
			ТекущаяСтрока = Форма.Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
			Если ТекущаяСтрока = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Если НЕ ТекущаяСтрока.Номенклатура = КэшСтроки.Номенклатура
				ИЛИ НЕ ТекущаяСтрока.ЕдиницаИзмерения = КэшСтроки.ЕдиницаИзмерения Тогда
				ДополнительныеПараметры.Вставить("ТребуетсяСерверныйВызов");
				ДополнительныеПараметры.Вставить("ТребуетсяЗаполнениеСлужебныхРеквизитов", ТекущаяСтрока.ПолучитьИдентификатор());
			Иначе
				
				Если НЕ ТекущаяСтрока.Количество = КэшСтроки.Количество Тогда
					ТекущаяСтрока.КоличествоВБазовыхЕдиницахГосИС = ТекущаяСтрока.Количество * ТекущаяСтрока.КоэффициентЕдиницыИзмеренияГосИС;
				КонецЕсли;
				
				НужноПересчитатьКеш = ПроверкаИПодборПродукцииИСКлиент.ПрименитьКешПоСтроке(
					Форма,
					Форма.Объект[ИмяТабличнойЧасти],
					ТекущаяСтрока,
					КэшСтроки,,,
					"КоличествоВБазовыхЕдиницахГосИС");
				
				Если НужноПересчитатьКеш Тогда
					ДополнительныеПараметры.Вставить("ТребуетсяСерверныйВызов");
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриПолученииДанныхИзТСД(ОписаниеОповещения, Форма, РезультатВыполнения) Экспорт
	
	Если РезультатВыполнения.Результат
		И РезультатВыполнения.Свойство("ТаблицаТоваров") Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения.ТаблицаТоваров);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РазбитьСтрокуТабличнойЧасти(СтандартнаяОбработка, ТабличнаяЧасть, ЭлементФормы, ОповещениеПослеРазбиения, ПараметрыРазбиенияСтроки) Экспорт
	
	Если ЭлементФормы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока        = ЭлементФормы.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Для выполнения команды требуется выбрать строку табличной части.'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Если ОповещениеПослеРазбиения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПослеРазбиения, Неопределено);
		КонецЕсли; 
		Возврат;
	ИначеЕсли ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] = 0
		И Не ПараметрыРазбиенияСтроки.РазрешитьНулевоеКоличество Тогда
		ТекстСообщения = НСтр("ru = 'Невозможно разбить строку с нулевым количеством.'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Если ОповещениеПослеРазбиения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПослеРазбиения, Неопределено);
		КонецЕсли; 
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	Если Отказ Тогда
		Если ОповещениеПослеРазбиения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПослеРазбиения, Неопределено);
		КонецЕсли; 
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] <> 0 Тогда
		
		Количество = ?(ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] = 0, 0, Неопределено);
		
		Если Количество = Неопределено Тогда
			РазбитьСтрокуТЧВводЧисла(ТабличнаяЧасть, ЭлементФормы, ОповещениеПослеРазбиения, ПараметрыРазбиенияСтроки);
			Возврат;
			
		КонецЕсли;
	Иначе
		Количество = 0;
		
	КонецЕсли;
	
	РазбитьСтрокуТЧДобавлениеСтроки(ТабличнаяЧасть, ЭлементФормы, Количество, ОповещениеПослеРазбиения, ПараметрыРазбиенияСтроки);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Выдает предупреждение пользователю со списком ненайденных штрихкодов.
// Используется в случаях, когда у пользователя нет прав на регистрацию новых штрихкодов.
//
// Параметры:
//  НеизвестныеШтрихкоды - Массив - Штрихкоды, для которых не удалось найти номенклатуру
Процедура ОповеститьОНенайденныхШтрихкодах(НеизвестныеШтрихкоды, ПоказыватьСообщением = Истина) Экспорт
	
	СтрокаПредупреждения = "";
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		
		СтрокаПредупреждения = СтрокаПредупреждения + СтрокаСообщения + Символы.ПС;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаПредупреждения) Тогда
		Если ПоказыватьСообщением Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаПредупреждения);
		Иначе
			ПоказатьПредупреждение(,СтрокаПредупреждения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ЗаполненияТабличныхЧастейДокумента

// Копирует значения реквизитов текущей строки табличной части в служебный реквизит формы.
//
//  Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, содержащая таблицу.
//   ИмяТабличнойЧасти - Строка - имя таблицы формы, текущие данные которой необходимо скопировать в служебный реквизит формы.
//
Процедура КешироватьТекущуюСтроку(Форма, ИмяТабличнойЧасти) Экспорт
	
	ТекущиеДанные = Форма.Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
	СтруктураКеш  = Новый Структура(Форма.КэшДанныхГОСИС["ТекущаяСтрока"]);
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(СтруктураКеш, ТекущиеДанные);
		
	Иначе
		
		Для Каждого КлючИЗначение Из СтруктураКеш Цикл
			СтруктураКеш[КлючИЗначение.Ключ] = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
	Форма.КэшДанныхГОСИС.Вставить("ТекущаяСтрока", Новый ФиксированнаяСтруктура(СтруктураКеш));
	
КонецПроцедуры

#КонецОбласти

// Открывает форму сопоставления номенклатуры с классификатором ЕГАИС.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой вызывается команда открытия обработки сопоставления,
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы сопоставления,
//  ПараметрыОткрытияФормы - Структура - параметры, передаваемые в форму сопоставления.
//
Процедура ОткрытьФормуСопоставленияНоменклатурыСАлкогольнойПродукцией(Форма, ОповещениеПриЗавершении = Неопределено, ПараметрыОткрытияФормы = Неопределено) Экспорт
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	Если Форма.ИмяФормы = "Документ.ТТНВходящаяЕГАИС.Форма.ФормаДокумента" Тогда
	
		ТТН = Форма.Объект.Ссылка;
		
		Если ТТН = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ПараметрыОткрытияФормы.Вставить("ТТН", ТТН);
		
		ОткрытьФорму("Обработка.СопоставлениеНоменклатурыЕГАИСУНФ.Форма", ПараметрыОткрытияФормы, Форма,,,, ОповещениеПриЗавершении, Режим);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ТТНВходящаяЕГАИС.Форма.ФормаСпискаДокументов" Тогда
		
		ТТН = Неопределено;
		
		Если ТипЗнч(ПараметрыОткрытияФормы) = Тип("Структура") И ПараметрыОткрытияФормы.Свойство("ТоварноТранспортныеНакладные") Тогда
			Если ПараметрыОткрытияФормы.ТоварноТранспортныеНакладные.Количество() > 0 Тогда
				ТТН = ПараметрыОткрытияФормы.ТоварноТранспортныеНакладные[0];
			КонецЕсли;
		КонецЕсли;
		
		Если ТТН = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыОткрытияФормы.Вставить("ТТН", ТТН);
		
		ОткрытьФорму("Обработка.СопоставлениеНоменклатурыЕГАИСУНФ.Форма", ПараметрыОткрытияФормы, Форма,,,, ОповещениеПриЗавершении, Режим);
		
	ИначеЕсли Форма.ИмяФормы = "Обработка.ПомощникКорректировкиОстатковЕГАИС.Форма.Форма" Тогда 
		
		ОткрытьФорму("Обработка.СопоставлениеНоменклатурыЕГАИСУНФ.Форма", ПараметрыОткрытияФормы, Форма,,,, ОповещениеПриЗавершении, Режим);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РазбитьСтроку

Процедура РазбитьСтрокуТЧВводЧисла(ТЧ, ЭлементФормы, ОповещениеПослеРазбиения, ПараметрыОбработки)
	
	ТекущаяСтрока	= ЭлементФормы.ТекущиеДанные;
	
	Если ПараметрыОбработки.Количество = Неопределено Тогда
		Количество = ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество];
	Иначе
		Количество = ПараметрыОбработки.Количество;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТЧ",                       ТЧ);
	ДополнительныеПараметры.Вставить("ЭлементФормы",             ЭлементФормы);
	ДополнительныеПараметры.Вставить("ОповещениеПослеРазбиения", ОповещениеПослеРазбиения);
	ДополнительныеПараметры.Вставить("ПараметрыОбработки",       ПараметрыОбработки);
	
	Оповещение = Новый ОписаниеОповещения(
		"РазбитьСтрокуТЧПослеВводаЧисла", 
		ЭтотОбъект,
		ДополнительныеПараметры);
	ПоказатьВводЧисла(Оповещение, Количество, ПараметрыОбработки.Заголовок, 15, 3);

КонецПроцедуры

Процедура РазбитьСтрокуТЧДобавлениеСтроки(ТЧ, ЭлементФормы, Количество, ОповещениеПослеРазбиения, ПараметрыОбработки)
	
	ТекущаяСтрока	= ЭлементФормы.ТекущиеДанные;
	
	ИндексТекущейСтроки 	 = ТЧ.Индекс(ТекущаяСтрока);
	НоваяСтрока 			 = ТЧ.Вставить(ИндексТекущейСтроки + 1);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
	
	НоваяСтрока[ПараметрыОбработки.ИмяПоляКоличество]   = Количество;
	ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество] = ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество]
		- НоваяСтрока[ПараметрыОбработки.ИмяПоляКоличество];
	
	Если ОповещениеПослеРазбиения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПослеРазбиения, НоваяСтрока);
	КонецЕсли; 
	
	ЭлементФормы.ТекущаяСтрока  = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

Процедура РазбитьСтрокуТЧПослеВводаЧисла(Количество, ДополнительныеПараметры) Экспорт
	
	ТЧ                       = ДополнительныеПараметры.ТЧ;
	ЭлементФормы             = ДополнительныеПараметры.ЭлементФормы;
	ОповещениеПослеРазбиения = ДополнительныеПараметры.ОповещениеПослеРазбиения;
	ПараметрыОбработки       = ДополнительныеПараметры.ПараметрыОбработки;
	
	ТекущаяСтрока            = ЭлементФормы.ТекущиеДанные;
	
	ЧислоВведено = Количество <> Неопределено;
	
	Если Не ЧислоВведено Тогда
		Если ОповещениеПослеРазбиения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПослеРазбиения, Неопределено);
		КонецЕсли;
		Возврат;
	ИначеЕсли Количество = 0
		И Не ПараметрыОбработки.РазрешитьНулевоеКоличество Тогда
		ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть равно нулю.'");
		Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуТЧПослеПредупреждения", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьПредупреждение(Оповещение,ТекстСообщения);
		Возврат;
	ИначеЕсли ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество] >= 0
		И Количество < 0 Тогда
		ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть отрицательным.'");
		Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуТЧПослеПредупреждения", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьПредупреждение(Оповещение,ТекстСообщения);
		Возврат;
	ИначеЕсли ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество] <= 0
		И Количество > 0 Тогда
		ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть положительным.'");
		Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуТЧПослеПредупреждения", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьПредупреждение(Оповещение,ТекстСообщения);
		Возврат;
	ИначеЕсли ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество] >= 0
		И Количество >  ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество] Тогда
		ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть больше количества в текущей.'");
		Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуТЧПослеПредупреждения", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьПредупреждение(Оповещение,ТекстСообщения);
		Возврат;
	ИначеЕсли ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество] <= 0
		И Количество <  ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество] Тогда
		ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть меньше количества в текущей.'");
		Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуТЧПослеПредупреждения", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьПредупреждение(Оповещение,ТекстСообщения);
		Возврат;
	ИначеЕсли Количество =  ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество]
		И Не ПараметрыОбработки.РазрешитьНулевоеКоличество Тогда
		ТекстСообщения = НСтр("ru = 'Количество в новой строке должно отличаться от количества в текущей.'");
		Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуТЧПослеПредупреждения", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьПредупреждение(Оповещение,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	РазбитьСтрокуТЧДобавлениеСтроки(ТЧ, ЭлементФормы, Количество, ОповещениеПослеРазбиения, ПараметрыОбработки);
	
КонецПроцедуры

Процедура РазбитьСтрокуТЧПослеПредупреждения(ДополнительныеПараметры) Экспорт
	
	ТЧ                       = ДополнительныеПараметры.ТЧ;
	ЭлементФормы             = ДополнительныеПараметры.ЭлементФормы;
	ОповещениеПослеРазбиения = ДополнительныеПараметры.ОповещениеПослеРазбиения;
	ПараметрыОбработки       = ДополнительныеПараметры.ПараметрыОбработки;
	
	РазбитьСтрокуТЧВводЧисла(ТЧ, ЭлементФормы, ОповещениеПослеРазбиения, ПараметрыОбработки);
	
КонецПроцедуры

#КонецОбласти

Процедура ОбработатьВыборФормыСканирования(Выбор, ДополнительныеПараметры) Экспорт
	
	Если Выбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Форма = ДополнительныеПараметры.Форма;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыУказанияСерий") Тогда
		ПараметрыУказанияСерий = Форма.ПараметрыУказанияСерий;
	Иначе
		ПараметрыУказанияСерий = Неопределено;
	КонецЕсли;
	
	ВыбранныйВидПродукции = Выбор.Значение;
	Если ВыбранныйВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная") Тогда
		ПроверкаИПодборПродукцииЕГАИСКлиент.ОткрытьФормуСканированияАлкогольнойПродукции(ДополнительныеПараметры.Форма);
	Иначе
		ПроверкаИПодборПродукцииИСМПКлиент.ОткрытьФормуПроверкиИПодбора(ДополнительныеПараметры.Форма, ВыбранныйВидПродукции, ПараметрыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

// Очищает служебный реквизит формы с кэшем строки.
//
//  Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, содержащая таблицу.
//   ИмяТабличнойЧасти - Строка - имя таблицы формы, текущие данные которой необходимо скопировать в служебный реквизит формы.
//
Процедура ОчиститьКэшСтроки(Форма, ИмяТабличнойЧасти)
	
	СтруктураКеш  = Новый Структура(Форма.КэшДанныхГОСИС["ТекущаяСтрока"]);
	
	Для Каждого КлючИЗначение Из СтруктураКеш Цикл
		СтруктураКеш[КлючИЗначение.Ключ] = Неопределено;
	КонецЦикла;
	
	Форма.КэшДанныхГОСИС.Вставить("ТекущаяСтрока", Новый ФиксированнаяСтруктура(СтруктураКеш));
	
КонецПроцедуры

#КонецОбласти