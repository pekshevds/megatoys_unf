////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы (УНФ)
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииПодсистемы
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = "УправлениеНебольшойФирмой";
	Описание.Версия = "3.0.5.199";
	Описание.ИдентификаторИнтернетПоддержки = "SmallBusiness";
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	#Область ПервыйЗапуск
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПервыйЗапуск_РазделенныеДанные";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПервыйЗапуск_ОбщиеДанные";
	Обработчик.ОбщиеДанные = Истина;
	
	#КонецОбласти
	
	#Область Обработчики_3_0_4
	
	#Область БЗКБ_3_0_4
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.51";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ИнтеграцияБЗКБУНФ.УстановитьКонстанты";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6c103f9b-aea0-488d-9a29-47e309e802b6");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение констант БЗКБ'"); 
	
	#КонецОбласти
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.76";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ЗаполнитьШиринуКартинкиПрайсЛистах";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("69fc977e-6bef-4a99-8fcd-4afc714374c9");
	Обработчик.Комментарий = НСтр("ru = 'Заполнить ширину картинки в прайс-листах'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.89";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьПараметрыУчетаПивнойПродукции";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9be2bbeb-86ff-46df-a6a7-c9a65a6d3ab1");
	Обработчик.Комментарий = НСтр("ru = 'Обновляет параметры учета элементов справочников ""Номенклатура"" и ""Категории номенклатуры"",
		|для которых установлен ""Вид продукции ИС"" - ""Пиво"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.101";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ДанныеГосударственныхОрганов.ДобавитьОбновитьПолучательКазначейство_Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4e7c3ff7-ea37-41ee-8d92-18530516ade3");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение единого получателя ЕНП казначейство.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.4.114";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура           = "РегистрыНакопления.РасчетыПоЕдиномуНалоговомуСчету.ЗаполнитьГоловнуюОрганизацию";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение головной организации РасчетыПоЕдиномуНалоговомуСчету.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.4.114";  
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура           = "РегистрыНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете.ЗаполнитьГоловнуюОрганизацию";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение головной организации РасчетыПоНалогамНаЕдиномНалоговомСчете.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.4.114";   
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура           = "РегистрыНакопления.РасчетыПоСанкциямНаЕдиномНалоговомСчете.ЗаполнитьГоловнуюОрганизацию";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение головной организации РасчетыПоСанкциямНаЕдиномНалоговомСчете.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.138";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьОшибочныеДанныеВРегистреСостоянийКонтрагентов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3d9a3a49-c114-441b-b638-db6b6075370f");
	Обработчик.Комментарий = НСтр("ru = 'Обновляет ошибочные данные в регистре состояний контрагентов.'");
	
    #КонецОбласти
	
	#Область Обработчики_3_0_5
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ВводНачальныхОстатков.ЗаполнитьПризнакЗакупкиКУДиРОтдельнымДокументом";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("97cdc7ae-3b7c-4084-ab5a-af3f6ad7e018");
	Обработчик.Комментарий = НСтр("ru = 'Установка флага ЗакупкаКУДиРОтдельнымДокументом документов ""Ввод начальных остатков"" с разделом учета ""Запасы""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.31";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ЗаполнитьПараметрыСчетовУчетаНДС";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ccf2dc6a-1ad9-1095-98bb-4e383a9b90c5");
	Обработчик.Комментарий = НСтр("ru = 'Заполнить параметры счетов учета НДС.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.31";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ЗаполнитьСчетаУчетаНДСВНоменклатуре";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9be0bbeb-87fa-46df-a6f7-c9a64a613ab3");
	Обработчик.Комментарий = НСтр("ru = 'Заполняет счета учета НДС в номенклатуре'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.36";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.УстановитьНастройкиОрдерныхСкладов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4e68bae8-a132-48e9-8e8f-530c3e08d3dc");
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает новые настройки ордерных складов'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.38";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ЗаполнитьСлужебныеРеквизитыКонтактнойИнформацииКонтрагентов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d603b3f9-f562-464c-b99f-4db9c6e4e0b9");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение служебных реквизитов контактной информации контрагентов'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.68";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.УдалитьНеотмеченныеДоговорыИзАктовСверкиВзаиморасчетов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("81ea64b5-d062-4335-add5-43402624071e");
	Обработчик.Комментарий = НСтр("ru = 'Удаление неотмеченных договоров из документов Сверка взаиморасчетов'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.84";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.УстановитьХранениеКартЛояльностиВРМК";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("8274c557-8146-4b82-b45d-c7354c30c7b7");
	Обработчик.Комментарий = НСтр("ru = 'Установка признака хранения карт лояльности в РМК'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.85";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ЗаполнитьСчетаУчетаНДСВоВнеоборотныхАктивах";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9be0bbeb-87fa-4b82-add5-c8a64a613ab2");
	Обработчик.Комментарий = НСтр("ru = 'Заполняет счета учета НДС во внеоборотных активах'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.91";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ЗаданиеНаРаботу.ЗаполнитьДатаНачалаОкончания";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6d57dc70-a476-47db-af77-8798ede1241e");
	Обработчик.Комментарий = НСтр("ru = 'Заполнить реквизиты Начало/Окончания документов Задание на работу.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.99";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.УстановитьИспользованиеПроцессовСостояний";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("cefd8f19-4e21-47d6-870c-0e00c394635b");
	Обработчик.Комментарий = НСтр("ru = 'Установка признака использования процессов состояний'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.99";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьОтчеты_3_0_5";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("79df2cbb-68a8-4fc4-bbc1-a398ace81332");
	Обработчик.Комментарий = НСтр("ru = 'Обновление настроек вариантов отчетов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.113";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ИнтеграцияСИнтернетМагазиномСервер.ОбновлениеИнформационнойБазыУстановитьРеквизитВыгружатьЗаказыНаСайт";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b593777f-6aa3-431b-92b0-01f6fdd1d3cc");
	Обработчик.Комментарий = НСтр("ru = 'Выборочное включение нового флажка ВыгружатьЗаказыНаСайт в справочнике НастройкиИнтеграцииСИнтернетМагазином.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.112";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.УстановитьНастройкиКонтроляДублейКонтактныхЛиц";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3f2c4048-04c9-4c73-9839-650919d93d08");
	Обработчик.Комментарий = НСтр("ru = 'Установка настройки поиска дублей по номеру телефона'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.115";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьВидыНалоговПоСтраховымВзносам";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4200b9d2-a02d-4e7a-98c2-5242149dc735");
	Обработчик.Комментарий = НСтр("ru = 'Обработать виды налогов по страховым взносам.'"); 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.115";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбработатьДанныеПоСтраховыеВзносамПосле2023";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d2c933cd-a928-4350-8498-4ec77c583bbc");
	Обработчик.Комментарий = НСтр("ru = 'Обработать документы по страховым взносам после 2023 года.'");  
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.121";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьКалендарьНалоговИОтчетностьИОчиститьКоды";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7ad40116-4186-4b04-a4a1-33a08faf02b3");
	Обработчик.Комментарий = НСтр("ru = 'Обновить задачи календаря налоговой отчетности.'"); 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.126";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "УправлениеКонтактнойИнформациейУНФ.ОбновитьВидКонтактнойИнформацииТорговыеТочки";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b5b5399c-a4d9-4a80-95ca-95b669bbac50");
	Обработчик.Комментарий = НСтр("ru = 'Восстановить значения реквизитов вида контактной информации Торговые точки к ожидаемым значениям.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.129";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "УправлениеКонтактнойИнформациейУНФ.ОбновитьВидыКонтактнойИнформации";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("10dfc42f-121a-4773-9543-84639125fe8d");
	Обработчик.Комментарий = НСтр("ru = 'Перенести настройку ОтображатьВсегда из регистра в справочник и привести к ожидаемому реквизит ВидРедактирования.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.142";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.УстановитьКонстантуПодключаемоеОборудование";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("682388a4-3d33-4547-9274-41109e01cba6");
	Обработчик.Комментарий = НСтр("ru = 'Установить константу подключаемого оборудования'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.143";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.СоздатьПредопределенныйЭлементНДС";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ccf2dc6a-1ad9-4547-98bb-82639125fe8d");
	Обработчик.Комментарий = НСтр("ru = 'Создать предопределенный вид налога НДС.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.5.149";   
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыУНФ.ЗаполнитьДвиженияПоУведомлениямСОтрицательнойСуммой";
	Обработчик.Комментарий         = НСтр("ru = 'Заполняет движения по Уведомлениям УСН с отрицательной суммой'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.186";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПометитьНаУдалениеЗадачуВзносыИП";
	Обработчик.Комментарий = НСтр("ru = 'Обновить задачи календаря налоговой отчетности.'");
	#КонецОбласти
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПередОбновлениемИнформационнойБазы
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	Возврат;
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПослеОбновленияИнформационнойБазы
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия, Знач ВыполненныеОбработчики,
	ВыводитьОписаниеОбновлений, Знач МонопольныйРежим) Экспорт
	
	Возврат;
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПриПодготовкеМакетаОписанияОбновлений
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	Возврат;
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковПереходаСДругойПрограммы
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "Розница";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновлениеРозницыДоУНФ";
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПриОпределенииНастроек
Процедура ПриОпределенииНастроекОбновленияИнформационнойБазы(Параметры) Экспорт
	
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.АвтоматическиеСкидки);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.Валюты);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.ВидыДокументовФизическихЛиц);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.ВидыДоходовПоСтраховымВзносамУНФ);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.ВидыЗаказНарядов);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.ВидыЗаказовПокупателей);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.ВидыНалогов);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.ВидыНачисленийИУдержаний);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.ВидыРабочегоВремени);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.ВидыЦен);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.ДополнительныеУсловия);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.ИсточникиПривлеченияПокупателей);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.КатегорииНоменклатуры);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.Кассы);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.КлассификаторЕдиницИзмерения);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.КодыДоходовНДФЛ);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.НаправленияДеятельности);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.Организации);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.ПоказателиРасчетов);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.ПочтовыеЯщики);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.ПараметрыРасчетовДоставки);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.ПричиныНеуспешногоЗавершенияРаботыСЛидом);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.СегментыКонтрагентов);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.СлужбыДоставки);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.СостоянияЗаказовПокупателей);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.СостоянияЗаказНарядов);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.СостоянияЗаказовПоставщикам);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.СостоянияЗаказовНаПроизводство);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.СостоянияЗаказовНаПеремещение);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.СостоянияЛидов);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.СостоянияСобытий);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.СтавкиНДС);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.СтатьиДвиженияДенежныхСредств);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.СтруктурныеЕдиницы);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.СценарииПланирования);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.ШаблоныЗаполненияГрафиковРабочегоВремени);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.ПланыСчетов.Управленческий);
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПриОпределенииРежимаОбновленияДанных
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПриЗавершенииПереходаСДругойПрограммы
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, Знач ПредыдущаяВерсияКонфигурации,
	Параметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПервыйЗапуск_ОбщиеДанные

// (5.Общий) Заполняем справочник ОКУН
Процедура ЗагрузитьОКУН()
	
	Справочники.ОКУН.ЗагрузитьКлассификатор();
	Справочники.ОКУН.ПроставитьВидДеятельностиОКУН();
	
КонецПроцедуры

// (6.Общий) Заполняет РС КоэффициентДефлятор
//
Процедура ЗаполнитьКоэффициентДефлятор()
	
	// переписываем сразу весь набор
	Набор = РегистрыСведений.КоэффициентДефлятор.СоздатьНаборЗаписей();
	
	Запись = Набор.Добавить();
	Запись.Период = '20030101';
	Запись.Значение = 1;
	
	Запись = Набор.Добавить();
	Запись.Период = '20040101';
	Запись.Значение = 1.133;
	
	Запись = Набор.Добавить();
	Запись.Период = '20050101';
	Запись.Значение = 1.104;
	
	Запись = Набор.Добавить();
	Запись.Период = '20060101';
	Запись.Значение = 1.132;
	
	Запись = Набор.Добавить();
	Запись.Период = '20070101';
	Запись.Значение = 1.096;
	
	Запись = Набор.Добавить();
	Запись.Период = '20080101';
	Запись.Значение = 1.081;
	
	Запись = Набор.Добавить();
	Запись.Период = '20090101';
	Запись.Значение = 1.148;
	
	Запись = Набор.Добавить();
	Запись.Период = '20100101';
	Запись.Значение = 1.295;
	
	Запись = Набор.Добавить();
	Запись.Период = '20110101';
	Запись.Значение = 1.372;
	
	Запись = Набор.Добавить();
	Запись.Период = '20120101';
	Запись.Значение = 1.4942;
	
	Запись = Набор.Добавить();
	Запись.Период = '20130101';
	Запись.Значение = 1.569;
	
	Запись = Набор.Добавить();
	Запись.Период = '20140101';
	Запись.Значение = 1.672;
	
	Запись = Набор.Добавить();
	Запись.Период = '20150101';
	Запись.Значение = 1.798;
	
	Запись = Набор.Добавить();
	Запись.Период = '20160101';
	Запись.Значение = 1.798;
	
	Запись = Набор.Добавить();
	Запись.Период = '20180101';
	Запись.Значение = 1.868;
	
	Запись = Набор.Добавить();
	Запись.Период = '20190101';
	Запись.Значение = 1.915;
	
	Запись = Набор.Добавить();
	Запись.Период = '20200101';
	Запись.Значение = 2.005;
	
	Набор.Записать();
	
КонецПроцедуры

// (7.Общий) Заполнять РС МРОТ
//
Процедура ЗагрузитьМРОТ()
	
	Набор = РегистрыСведений.МРОТ.СоздатьНаборЗаписей();
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20000701';
	Запись.Значение = 132;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20010101';
	Запись.Значение = 200;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20010701';
	Запись.Значение = 300;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20020501';
	Запись.Значение = 450;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20031001';
	Запись.Значение = 600;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20050101';
	Запись.Значение = 720;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20050901';
	Запись.Значение = 800;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20060501';
	Запись.Значение = 1100;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20070901';
	Запись.Значение = 2300;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20090101';
	Запись.Значение = 4330;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20110601';
	Запись.Значение = 4611;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20130101';
	Запись.Значение = 5205;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20140101';
	Запись.Значение = 5554;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20150101';
	Запись.Значение = 5965;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20160101';
	Запись.Значение = 6204;
	
	Запись = Набор.Добавить();
	Запись.Период = '20170101';
	Запись.Значение = 7500;
	
	Запись = Набор.Добавить();
	Запись.Период = '20180101';
	Запись.Значение = 7800;
	
	Запись = Набор.Добавить();
	Запись.Период = '20190101';
	Запись.Значение = 11280;
	
	Запись = Набор.Добавить();
	Запись.Период = '20200101';
	Запись.Значение = 12130;
	
	Запись = Набор.Добавить();
	Запись.Период = '20210101';
	Запись.Значение = 12792; 
	
	Запись = Набор.Добавить();
	Запись.Период = '20220101';
	Запись.Значение = 13890;
	
	Запись = Набор.Добавить();
	Запись.Период = '20220601';
	Запись.Значение = 15279;
	
	Набор.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПервогоЗапуска

// Процедура заполняет пустую ИБ общими данными
//
// К данным относятся неразделенные сведения, например, глобальные настройки сервиса
//
Процедура ПервыйЗапуск_ОбщиеДанные() Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		// 1. Заполним константу ИзвлекатьТекстыФайловНаСервере
		Константы.ИзвлекатьТекстыФайловНаСервере.Установить(Истина);
		Константы.ИспользоватьПроверкуКонтрагентов.Установить(Истина);
		
		// 2. Заполним календарь отчетности
		Справочники.КалендарьПодготовкиОтчетности.ЗагрузитьКалендарьПодготовкиОтчетности();
		
		// 3. Загружаем  тарифы страховых взносов с предельными величинами
		Справочники.ВидыТарифовСтраховыхВзносовУНФ.НачальноеЗаполнение();
		// Тарифы должны видеть новые данные в ВидыТарифовСтраховыхВзносовУНФ 
		ОбновитьПовторноИспользуемыеЗначения();
		РегистрыСведений.ТарифыСтраховыхВзносовУНФ.НачальноеЗаполнение();
		РегистрыСведений.ПредельнаяВеличинаБазыСтраховыхВзносовУНФ.УстановитьПредельнуюВеличинуБазыСтраховыхВзносов();
		
		// 4. Заполняем виды предпринимательской деятельности
		Справочники.ВидыПредпринимательскойДеятельности.ЗаполнитьВидыПредпринимательскойДеятельности();
		
		// 5. Заполняем справочник ОКУН
		ЗагрузитьОКУН();
		
		// 6. Заполняем регистр сведений КоэффициентДефлятор
		ЗаполнитьКоэффициентДефлятор();
		
		// 7. Заполняем регистр сведений МРОТ
		ЗагрузитьМРОТ();
		
		// 8. Заполняем справочник Вычеты НДФЛ
		Справочники.ВычетыНДФЛ.НачальноеЗаполнение();
		
		// 9. Заполним регистр сведений НДФЛРазмерВычетов.
		СотрудникиУНФ.ЗаполнитьРазмерыВычетовНДФЛ();
		
		// 10. Отчетность
		Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.НачальноеЗаполнение();
		Справочники.ОснованияДосрочногоНазначенияПенсии.НачальноеЗаполнение();
		Справочники.ТерриториальныеУсловияПФР.НачальноеЗаполнение();
		РегистрыСведений.ФиксированныеВзносыИП.УстановитьФиксированныеВзносыИП();
		Справочники.ОснованияДосрочногоНазначенияПенсииДляСЗВК.НачальноеЗаполнение();
		Справочники.ОснованияУвольнения.НачальноеЗаполнение(); 
		Справочники.КлассификаторЗанятийУНФ.НачальноеЗаполнение();
		Справочники.ПричиныУвольненияПФР.НачальноеЗаполнение();
		
		РегистрыСведений.РазмерФиксированныхВзносовОтНесчастныхСлучаевАУСН.ЗаполнитьПоставляемыеДанные();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию(); 
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Ошибка выполнения обработчика ПервыйЗапуск_ОбщиеДанные()'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

// Процедура заполняет пустую ИБ данными пользователей
//
Процедура ПервыйЗапуск_РазделенныеДанные() Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		ВозможностиПриложения.ПриПервомЗапуске();
		УстановитьКонстантуПодключаемоеОборудование(Неопределено);
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Ошибка выполнения обработчика ПервыйЗапуск_РазделенныеДанные()'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки);
	КонецПопытки;
	
КонецПроцедуры // ПервыйЗапуск()

#КонецОбласти

#Область ОбработчикиПереходаСДругихПрограмм

// Обработчики перехода с розницы на УНФ
Процедура ОбновлениеРозницыДоУНФ() Экспорт
	
	ВозможностиПриложения.ОбновлениеРозницыДоУНФ();
	
КонецПроцедуры

#КонецОбласти

#Область Обработчики_3_0_4

Процедура ЗаполнитьШиринуКартинкиПрайсЛистах(ПараметрыОбработчика) Экспорт
	
	ЕстьОшибки = Ложь;
	НачатьТранзакцию();
	
	Попытка
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрайсЛисты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПрайсЛисты КАК ПрайсЛисты
		|ГДЕ
		|	НЕ ПрайсЛисты.Недействителен
		|	И ПрайсЛисты.КартинкаШирина = 0";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ПрайсЛистОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПрайсЛистОбъект.Заблокировать();
			
			ПрайсЛистОбъект.КартинкаШирина = 40;
			
			ПрайсЛистОбъект.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЕстьОшибки = Истина;
		
		ИмяСобытия = НСтр("ru = 'Выполнение обработчика ЗаполнитьШиринуКартинкиПрайсЛистах'",
		ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	ПараметрыОбработчика.ОбработкаЗавершена = Не ЕстьОшибки;
	
КонецПроцедуры

Процедура ОбновитьПараметрыУчетаПивнойПродукции(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Пиво)
	|	И (НЕ Номенклатура.АлкогольнаяПродукция
	|			ИЛИ НЕ Номенклатура.ПризнакПредметаРасчета = ЗНАЧЕНИЕ(Перечисление.ПризнакиПредметаРасчета.ПодакцизныйТоварМаркируемыйСИИмеющийКМ))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КатегорииНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.КатегорииНоменклатуры КАК КатегорииНоменклатуры
	|ГДЕ
	|	КатегорииНоменклатуры.ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Пиво)
	|	И НЕ КатегорииНоменклатуры.ПризнакПредметаРасчета = ЗНАЧЕНИЕ(Перечисление.ПризнакиПредметаРасчета.ПодакцизныйТоварМаркируемыйСИИмеющийКМ)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбновляемыеДанные = Новый Структура;
	ОбновляемыеДанные.Вставить("АлкогольнаяПродукция", Истина);
	ОбновляемыеДанные.Вставить("ПризнакПредметаРасчета", Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТоварМаркируемыйСИИмеющийКМ);
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектСправочника = Выборка.Ссылка.ПолучитьОбъект();
		
		Попытка
			ОбъектСправочника.Заблокировать();
			ЗаполнитьЗначенияСвойств(ОбъектСправочника, ОбновляемыеДанные);
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектСправочника, Истина);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения обработчика обновления пивной продукции'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,, ОбъектСправочника, ПодробноеПредставлениеОшибки);
			
			Параметры.ОбработкаЗавершена = Ложь;
			Возврат;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ОбновитьОшибочныеДанныеВРегистреСостоянийКонтрагентов(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияКонтрагентов.Контрагент КАК Контрагент
	|ИЗ
	|	РегистрСведений.СостоянияКонтрагентов КАК СостоянияКонтрагентов
	|ГДЕ
	|	СостоянияКонтрагентов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.НевернаяДлинаИНН)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;

	Попытка 
		ТаблицаКонтрагентов = РезультатЗапроса.Выгрузить();
		КонтрагентыДляОбновления = ТаблицаКонтрагентов.ВыгрузитьКолонку("Контрагент");
		ПроверкаКонтрагентов.УдалитьРезультатПроверкиКонтрагентов(КонтрагентыДляОбновления);
		Параметры.ОбработкаЗавершена = Истина; 
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения обработчика обновления ошибочных данных в регистре состояния контрагентов'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
		
		Параметры.ОбработкаЗавершена = Ложь;
		
	КонецПопытки;
		
КонецПроцедуры

#КонецОбласти

#Область Обработчики_3_0_5

Процедура ЗаполнитьПараметрыСчетовУчетаНДС() Экспорт
	
	СчетНДСПоПриобретеннымЦенностям = ПланыСчетов.Управленческий.НДСПоПриобретеннымЦенностям.ПолучитьОбъект();
	СчетНДСПоПриобретеннымЦенностям.Наименование = НСтр("ru='НДС по приобретенным ценностям'");
	СчетНДСПоПриобретеннымЦенностям.Вид = ВидСчета.Активный;
	СчетНДСПоПриобретеннымЦенностям.ТипСчета = Перечисления.ТипыСчетов.Дебиторы;
	СчетНДСПоПриобретеннымЦенностям.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СчетНДСПоПриобретеннымЦенностям);
	
	СчетНДСПоРеализации = ПланыСчетов.Управленческий.Продажи_НДС.ПолучитьОбъект();
	СчетНДСПоРеализации.Наименование = НСтр("ru='Налог на добавленную стоимость'");
	СчетНДСПоРеализации.Родитель = ПланыСчетов.Управленческий.Продажи;
	СчетНДСПоРеализации.Вид = ВидСчета.Активный;
	СчетНДСПоРеализации.ТипСчета = Перечисления.ТипыСчетов.Расходы;
	СчетНДСПоРеализации.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СчетНДСПоРеализации);
	
КонецПроцедуры

Процедура ЗаполнитьСчетаУчетаНДСВНоменклатуре(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 300
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|	И Номенклатура.СчетУчетаНДСПоПриобретеннымЦенностям = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	Иначе
		Параметры.ОбработкаЗавершена = Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ОбновляемыеДанные = Новый Структура;
	ОбновляемыеДанные.Вставить("СчетУчетаНДСПоПриобретеннымЦенностям", ПланыСчетов.Управленческий.НДСПоПриобретеннымЦенностям);
	ОбновляемыеДанные.Вставить("СчетУчетаНДСПоРеализации", ПланыСчетов.Управленческий.Продажи_НДС);
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектСправочника = Выборка.Ссылка.ПолучитьОбъект();
		
		Попытка
			ОбъектСправочника.Заблокировать();
			ЗаполнитьЗначенияСвойств(ОбъектСправочника, ОбновляемыеДанные);
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектСправочника);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения обработчика заполнения ставок НДС в номенклатуре'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,, ОбъектСправочника, ПодробноеПредставлениеОшибки);
			
			Параметры.ОбработкаЗавершена = Ложь;
			Возврат;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСчетаУчетаНДСВоВнеоборотныхАктивах(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 300
	|	ВнеоборотныеАктивы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВнеоборотныеАктивы КАК ВнеоборотныеАктивы
	|ГДЕ
	|	НЕ ВнеоборотныеАктивы.ЭтоГруппа
	|	И ВнеоборотныеАктивы.СчетУчетаНДСПоРеализации = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	Иначе
		Параметры.ОбработкаЗавершена = Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ОбновляемыеДанные = Новый Структура;
	ОбновляемыеДанные.Вставить("СчетУчетаНДСПоРеализации", ПланыСчетов.Управленческий.Продажи_НДС);
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектСправочника = Выборка.Ссылка.ПолучитьОбъект();
		
		Попытка
			ОбъектСправочника.Заблокировать();
			ЗаполнитьЗначенияСвойств(ОбъектСправочника, ОбновляемыеДанные);
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектСправочника);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения обработчика заполнения ставок НДС во внеоборотных активах'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,, ОбъектСправочника, ПодробноеПредставлениеОшибки);
			
			Параметры.ОбработкаЗавершена = Ложь;
			Возврат;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьНастройкиОрдерныхСкладов(Параметры) Экспорт
	
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктурныеЕдиницы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|ГДЕ
		|	СтруктурныеЕдиницы.ОрдерныйСклад";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СтруктурнаяЕдиница = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			
			СтруктурнаяЕдиница.ИспользоватьОрдернуюСхемуПриОтгрузке = Истина;
			СтруктурнаяЕдиница.ИспользоватьОрдернуюСхемуПриПеремещении = Истина;
			СтруктурнаяЕдиница.ИспользоватьОрдернуюСхемуПриПоступлении = Истина;
			
			СтруктурнаяЕдиница.ВидУчетаОрдерныхСкладов = Перечисления.ВидыУчетаОрдерныхСкладов.ПоСкладуВЦелом;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СтруктурнаяЕдиница);
			
		КонецЦикла;
		
		Параметры.ОбработкаЗавершена = Истина;
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ИмяСобытия = НСтр("ru = 'Выполнение обработчика УстановитьНастройкиОрдерныхСкладов'", 
		ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
		Параметры.ОбработкаЗавершена = Ложь;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныеРеквизитыКонтактнойИнформацииКонтрагентов(Параметры) Экспорт
	
	РазмерПорции = 500;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|	И КонтрагентыКонтактнаяИнформация.ОбратныйНомерТелефона = """"
	|	И НЕ КонтрагентыКонтактнаяИнформация.НомерТелефона = """"";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "500", Строка(РазмерПорции));
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыбраноКонтактов = Выборка.Количество();
	
	Если ВыбраноКонтактов = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			КонтрагентОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Для Каждого СтрокаКИ Из КонтрагентОбъект.КонтактнаяИнформация Цикл
				Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
					
					СтрокаКИ.ОбратныйНомерТелефона
						= Справочники.Контрагенты.ПолучитьОбратныйНомерТелефонаБезКодаСтраны(СтрокаКИ.НомерТелефона);
					Если СтрокаКИ.ОбратныйНомерТелефона = "" Тогда
						СтрокаКИ.ОбратныйНомерТелефона = "0";
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(КонтрагентОбъект);
		Исключение
			ЕстьОшибки = Истина;
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстСообщения = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			ИмяСобытияЖР = НСтр("ru='Заполнение служебных реквизитов контактной информации контрагентов'",
			ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, , Выборка.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = НЕ ЕстьОшибки И ВыбраноКонтактов < РазмерПорции;
	
КонецПроцедуры

Процедура УстановитьХранениеКартЛояльностиВРМК() Экспорт
	
	ЗапросУзлов = Новый Запрос;
	ЗапросУзлов.Текст =
	"ВЫБРАТЬ
	|	ОбменСУРМК.Ссылка КАК Узел
	|ИЗ
	|	ПланОбмена.ОбменСУРМК КАК ОбменСУРМК
	|ГДЕ
	|	НЕ ОбменСУРМК.ПометкаУдаления
	|	И НЕ ОбменСУРМК.ТорговыйОбъект = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	И НЕ ОбменСУРМК.ХранитьКартыЛояльностиВРМК";
	РезультатЗапроса = ЗапросУзлов.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаУзлов = РезультатЗапроса.Выбрать();
		Пока ВыборкаУзлов.Следующий() Цикл
			Если Не ВыборкаУзлов.Узел = ПланыОбмена.ОбменСУРМК.ЭтотУзел() Тогда
				ОбъектУзел = ВыборкаУзлов.Узел.ПолучитьОбъект();
				ОбъектУзел.ХранитьКартыЛояльностиВРМК = Истина;
				ОбъектУзел.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьОтчеты_3_0_5(ПараметрыОбработчика) Экспорт
	
	ОтчетыКОбновлению = Новый Массив;
	
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.ОрдерныеСклады);
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.Склад);
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.ПричиныОтменыЗаказаПокупателя);
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.ПричиныОтменыЗаказаПоставщику);

	ОтчетыУНФ.ОбновитьОтчетыВыборочно(ОтчетыКОбновлению);
	
	ПараметрыОбработчика.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура УдалитьНеотмеченныеДоговорыИзАктовСверкиВзаиморасчетов(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 300
	|	СверкаВзаиморасчетовДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СверкаВзаиморасчетов.ДоговорыКонтрагентов КАК СверкаВзаиморасчетовДоговорыКонтрагентов
	|ГДЕ
	|	НЕ СверкаВзаиморасчетовДоговорыКонтрагентов.Отметка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектДокумента = Выборка.Ссылка.ПолучитьОбъект();
		
		Попытка
			ОбъектДокумента.Заблокировать();

			МассивСтрокКУдалению = ОбъектДокумента.ДоговорыКонтрагентов.НайтиСтроки(Новый Структура("Отметка", Ложь));
			
			Для Каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
				ОбъектДокумента.ДоговорыКонтрагентов.Удалить(СтрокаКУдалению);	
			КонецЦикла;	
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектДокумента);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
			Событие =
				НСтр("ru = 'Ошибка выполнения обработчика удаления неотмеченных договоров из документов Сверка взаиморасчетов'",
					КодЯзыка);
			ЗаписьЖурналаРегистрации(
			Событие,
			УровеньЖурналаРегистрации.Ошибка, , ОбъектДокумента, ПодробноеПредставлениеОшибки);
			
			Параметры.ОбработкаЗавершена = Ложь;
			Возврат;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьКалендарьНалоговИОтчетностьИОчиститьКоды() Экспорт
	
	Если ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КалендарьПодготовкиОтчетности.Ссылка КАК Событие
		|ИЗ
		|	Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
		|ГДЕ
		|	КалендарьПодготовкиОтчетности.Код <> """"";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Событие = ВыборкаДетальныеЗаписи.Событие.ПолучитьОбъект(); 
		Событие.Код = "";
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Событие);
	КонецЦикла;
	
	Справочники.КалендарьПодготовкиОтчетности.ЗагрузитьКалендарьПодготовкиОтчетности();
	
КонецПроцедуры

Процедура УстановитьИспользованиеПроцессовСостояний() Экспорт
		
	Если НЕ Константы.ИспользоватьПроцессыСостояний.Получить() И ОбщегоНазначенияУНФ.ЭтоУНФ() Тогда
		Константы.ИспользоватьПроцессыСостояний.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНастройкиКонтроляДублейКонтактныхЛиц() Экспорт
	
	Если НЕ ОбщегоНазначенияУНФ.ЭтоУНФ() Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКонтроляДублейКонтакты = Константы.НастройкиКонтроляДублейКонтакты.Получить().Получить();
	
	Если НастройкиКонтроляДублейКонтакты = Неопределено Тогда
		
		Настройки = Новый Соответствие;
		Настройки.Вставить("ПроверятьНаименование", Ложь);
		Настройки.Вставить("ПроверятьТелефон", Истина);
		Настройки.Вставить("ПроверятьАдресЭП", Ложь);
		
		Константы.НастройкиКонтроляДублейКонтакты.Установить(Новый ХранилищеЗначения(Настройки));
		
		Возврат;
		
	КонецЕсли;
	
	Если НастройкиКонтроляДублейКонтакты.Получить("ПроверятьТелефон") Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКонтроляДублейКонтакты.Вставить("ПроверятьТелефон", Истина);
	Константы.НастройкиКонтроляДублейКонтакты.Установить(Новый ХранилищеЗначения(НастройкиКонтроляДублейКонтакты));
	
КонецПроцедуры

Процедура СоздатьПредопределенныйЭлементНДС() Экспорт
	
	Если ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыНалогов.НДС") = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ВидыНалогов.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ВидыНалогов КАК ВидыНалогов
			|ГДЕ
			|	ВидыНалогов.ВидНалога = ЗНАЧЕНИЕ(Перечисление.ВидыНалогов.НДС)";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаНДС = РезультатЗапроса.Выбрать();
		
		Если ВыборкаНДС.Следующий() Тогда
			ЭлементНДС = ВыборкаНДС.Ссылка.ПолучитьОбъект();
			ЭлементНДС.ИмяПредопределенныхДанных = "НДС";
		Иначе
			ЭлементНДС = Справочники.ВидыНалогов.СоздатьЭлемент();
			ЭлементНДС.ИмяПредопределенныхДанных = "НДС";
			ЭлементНДС.Наименование = НСтр("ru = 'НДС'");
			ЭлементНДС.Код = "01-000019";
			ЭлементНДС.СчетУчета = ПланыСчетов.Управленческий.Налоги;
			ЭлементНДС.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
			ЭлементНДС.ВидНалога = Перечисления.ВидыНалогов.НДС;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЭлементНДС);
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ОбновитьВидыНалоговПоСтраховымВзносам(ПараметрыОбработчика) Экспорт
	
	ЕстьОшибки = Ложь;
	
    РегистрыСведений.ЗначенияКБК.ЗагрузитьЗначенияКБК();
	
	НачатьТранзакцию();
	
	Попытка
		
		КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		
    	ЭлементПФРСтраховая =  Справочники.ВидыНалогов.ПФРСтраховая.ПолучитьОбъект();
		ЭлементПФРСтраховая.Наименование = НСтр("ru = 'Фиксированные взносы в ПФР (до 2023 года)'", КодОсновногоЯзыка);
		ЭлементПФРСтраховая.Код = "00-000004";
		ЗаполнитьСчетаУчета(ЭлементПФРСтраховая);     
		ЭлементПФРСтраховая.КодБК = "18210214010061005160";
		ЭлементПФРСтраховая.ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЭлементПФРСтраховая);  	
		
		ЭлементФФОМС = Справочники.ВидыНалогов.ФФОМС.ПолучитьОбъект();
		ЭлементФФОМС.Наименование = НСтр("ru = 'Фиксированные взносы в ФФОМС (до 2023 года)'", КодОсновногоЯзыка);
		ЗаполнитьСчетаУчета(ЭлементФФОМС);
		ЭлементФФОМС.КодБК = "18210214030081002160";
		ЭлементФФОМС.ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЭлементФФОМС);
		
		ЭлементПФРСтраховаяСотрудники = Справочники.ВидыНалогов.ПФРСтраховаяСотрудники.ПолучитьОбъект();
		ЭлементПФРСтраховаяСотрудники.Наименование = НСтр("ru = 'Страховые взносы в ПФР (до 2023 года)'",
		КодОсновногоЯзыка);                        
		ЭлементПФРСтраховаяСотрудники.КодБК = "18210214010061001160";
		ЗаполнитьСчетаУчета(ЭлементПФРСтраховаяСотрудники);
		ЭлементПФРСтраховаяСотрудники.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_СтраховаяЧасть;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЭлементПФРСтраховаяСотрудники);     
		
		ЭлементФОМССотрудники =  Справочники.ВидыНалогов.ФОМССотрудники.ПолучитьОбъект();             
		ЭлементФОМССотрудники.Наименование = НСтр("ru = 'Страховые взносы в ФФОМС (до 2023 года)'", КодОсновногоЯзыка);
		ЗаполнитьСчетаУчета(ЭлементФОМССотрудники);
		ЭлементФОМССотрудники.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ФФОМС;
		ЭлементФОМССотрудники.КодБК = "18210214030081001160";
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЭлементФОМССотрудники);
		
		ЭлементФСССотрудники = Справочники.ВидыНалогов.ФСССотрудники.ПолучитьОбъект();
		ЭлементФСССотрудники.Наименование = НСтр("ru = 'Страховые взносы на обязательное социальное страхование'", КодОсновногоЯзыка);
		ЗаполнитьСчетаУчета(ЭлементФСССотрудники); 
		ЭлементФСССотрудники.КодБК = "18210214020061001160";
		ЭлементФСССотрудники.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЭлементФСССотрудники);
		
		ЭлементПФРСвыше300ТР = Справочники.ВидыНалогов.ПФРСвыше300ТР.ПолучитьОбъект();
		ЭлементПФРСвыше300ТР.Наименование = НСтр("ru = 'Страховые взносы ИП с дохода свыше предела'",
		КодОсновногоЯзыка);
		ЭлементПФРСвыше300ТР.КодБК = "18210203000011000160";
		ЗаполнитьСчетаУчета(ЭлементПФРСвыше300ТР);
		ЭлементПФРСвыше300ТР.ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_СвышеПредела; 
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЭлементПФРСвыше300ТР);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ИмяСобытия = НСтр("ru = 'Выполнение обработчика обновления видов налогов по страховым взносам'", 
		ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		ЕстьОшибки = Истина;
		
	КонецПопытки;
	
	ПараметрыОбработчика.ОбработкаЗавершена = НЕ ЕстьОшибки;
	
КонецПроцедуры

Процедура ОбработатьДанныеПоСтраховыеВзносамПосле2023(ПараметрыОбработчика) Экспорт
	
	ПараметрыОбработчика.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;  
	
	ВидНалогаПФР = Справочники.ВидыНалогов.ПФРСтраховаяСотрудники;   
	ВидНалогаЕдиныйТариф = Справочники.ВидыНалогов.СтраховыеВзносыЕдиныйТариф;
	ВидУдержания = Справочники.ВидыНачисленийИУдержаний.ПФРПоСуммарномуТарифу;	
	ВидУдержанияЕдиныйТариф = Справочники.ВидыНачисленийИУдержаний.ВзносыПоЕдиномуТарифу;  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 500
	|	УведомлениеОбИсчисленныхСуммахНалогов.Ссылка КАК Ссылка,
	|	УведомлениеОбИсчисленныхСуммахНалогов.Дата КАК Дата
	|ИЗ
	|	Документ.УведомлениеОбИсчисленныхСуммахНалогов КАК УведомлениеОбИсчисленныхСуммахНалогов
	|ГДЕ
	|	УведомлениеОбИсчисленныхСуммахНалогов.Дата >= &ДатаНачалаЕНП
	|	И УведомлениеОбИсчисленныхСуммахНалогов.ПометкаУдаления = ЛОЖЬ
	|	И УведомлениеОбИсчисленныхСуммахНалогов.Проведен = ИСТИНА
	|	И УведомлениеОбИсчисленныхСуммахНалогов.СуммаДокумента > 0
	|	И УведомлениеОбИсчисленныхСуммахНалогов.Налоги.Налог = &ПФРСтраховаяСотрудники
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 500
	|	ОперацияПоЕдиномуНалоговомуСчету.Ссылка,
	|	ОперацияПоЕдиномуНалоговомуСчету.Дата
	|ИЗ
	|	Документ.ОперацияПоЕдиномуНалоговомуСчету КАК ОперацияПоЕдиномуНалоговомуСчету
	|ГДЕ
	|	ОперацияПоЕдиномуНалоговомуСчету.Ссылка.Дата >= &ДатаНачалаЕНП
	|	И ОперацияПоЕдиномуНалоговомуСчету.ПометкаУдаления = ЛОЖЬ
	|	И ОперацияПоЕдиномуНалоговомуСчету.Проведен = ИСТИНА
	|	И ОперацияПоЕдиномуНалоговомуСчету.СуммаДокумента > 0
	|	И ОперацияПоЕдиномуНалоговомуСчету.Налоги.Налог = &ПФРСтраховаяСотрудники
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 500
	|	НачислениеНалогов.Ссылка,
	|	НачислениеНалогов.Дата
	|ИЗ
	|	Документ.НачислениеНалогов КАК НачислениеНалогов
	|ГДЕ
	|	НачислениеНалогов.Дата >= &ДатаНачалаЕНП
	|	И НачислениеНалогов.ПометкаУдаления = ЛОЖЬ
	|	И НачислениеНалогов.Проведен = ИСТИНА
	|	И НачислениеНалогов.СуммаДокумента > 0
	|	И НачислениеНалогов.Налоги.ВидНалога = &ПФРСтраховаяСотрудники
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 500
	|	НачислениеЗарплатыУНФ.Ссылка,
	|	НачислениеЗарплатыУНФ.Дата
	|ИЗ
	|	Документ.НачислениеЗарплатыУНФ КАК НачислениеЗарплатыУНФ
	|ГДЕ
	|	НачислениеЗарплатыУНФ.Дата >= &ДатаНачалаЕНП
	|	И НачислениеЗарплатыУНФ.ПометкаУдаления = ЛОЖЬ
	|	И НачислениеЗарплатыУНФ.Проведен = ИСТИНА
	|	И НачислениеЗарплатыУНФ.СуммаДокумента > 0
	|	И НачислениеЗарплатыУНФ.Взносы.ВидНачисленияУдержания = &ПФРПоСуммарномуТарифу
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 500
	|	ЗакрытиеМесяца.Ссылка,
	|	ЗакрытиеМесяца.Дата
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете КАК РасчетыПоНалогамНаЕдиномНалоговомСчете
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
	|			ПРАВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыПоНалогам КАК РасчетыПоНалогам
	|			ПО (РасчетыПоНалогам.Регистратор = ЗакрытиеМесяца.Ссылка)
	|		ПО РасчетыПоНалогамНаЕдиномНалоговомСчете.Регистратор = ЗакрытиеМесяца.Ссылка
	|ГДЕ
	|	ЗакрытиеМесяца.Дата >= &ДатаНачалаЕНП
	|	И ЗакрытиеМесяца.ПометкаУдаления = ЛОЖЬ
	|	И ЗакрытиеМесяца.Проведен = ИСТИНА
	|	И ЗакрытиеМесяца.ЗачетАвансаПоЕдиномуНалоговомуСчету = ИСТИНА
	|	И (РасчетыПоНалогамНаЕдиномНалоговомСчете.Налог = &ПФРСтраховаяСотрудники
	|			ИЛИ РасчетыПоНалогам.СрокУплаты = &ПФРСтраховаяСотрудники)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ДатаНачалаЕНП", '20230101'); 
	Запрос.УстановитьПараметр("ПФРПоСуммарномуТарифу", ВидУдержания);
	Запрос.УстановитьПараметр("ПФРСтраховаяСотрудники", ВидНалогаПФР);
	КоличествоОбработанных = 0;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 
	
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		
		НачатьТранзакцию();
		
		Попытка
			
			ПричинаИсключения = "Блокировка"; 
			ДокументПоВзносам = ВыборкаДетальныеЗаписи.Ссылка;
			ДокументПоВзносам = ДокументПоВзносам.ПолучитьОбъект();						
			ДокументПоВзносам.Заблокировать();
			
			
			Если ТипЗнч(ДокументПоВзносам) = Тип("ДокументОбъект.УведомлениеОбИсчисленныхСуммахНалогов") 
				ИЛИ ТипЗнч(ДокументПоВзносам) = Тип("ДокументОбъект.ОперацияПоЕдиномуНалоговомуСчету") Тогда
				
				Для Каждого СтрокаНалог Из ДокументПоВзносам.Налоги Цикл
					Если СтрокаНалог.Налог = ВидНалогаПФР Тогда
						СтрокаНалог.Налог = ВидНалогаЕдиныйТариф;					
					КонецЕсли;  
				КонецЦикла; 				
				
			ИначеЕсли ТипЗнч(ДокументПоВзносам) = Тип("ДокументОбъект.НачислениеНалогов") Тогда
				
				Для Каждого СтрокаНалог Из ДокументПоВзносам.Налоги Цикл
					Если СтрокаНалог.ВидНалога = ВидНалогаПФР Тогда
						СтрокаНалог.ВидНалога = ВидНалогаЕдиныйТариф;					
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли ТипЗнч(ДокументПоВзносам) = Тип("ДокументОбъект.НачислениеЗарплатыУНФ") Тогда 
				
				Для Каждого СтрокаВзнос Из ДокументПоВзносам.Взносы Цикл
					Если СтрокаВзнос.ВидНачисленияУдержания = ВидУдержания Тогда
						СтрокаВзнос.ВидНачисленияУдержания = ВидУдержанияЕдиныйТариф;					
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;
			
			ПричинаИсключения = "Запись";
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументПоВзносам,Истина,Ложь,РежимЗаписиДокумента.Запись); 		
			
			ОбработатьДвиженияРасчетыПоНалогам(ДокументПоВзносам, ВидНалогаПФР, ВидНалогаЕдиныйТариф);
			ОбработатьДвиженияРасчетыПоНалогамНаЕНС(ДокументПоВзносам, ВидНалогаПФР, ВидНалогаЕдиныйТариф);
			
			ДокументПоВзносам.Разблокировать();
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			ЗафиксироватьТранзакцию();
			
			
		Исключение
			ОтменитьТранзакцию();
			
			ИмяСобытия = НСтр("ru = 'Выполнение обработчика документов по страховым взносам после 2023 года.'",
			ОбщегоНазначения.КодОсновногоЯзыка()); 
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось обработать документ по страховым взносам после 2023 года по причине:
			|%1'"), ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			
			ЗаписьЖурналаРегистрации(ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,
			,
			ВыборкаДетальныеЗаписи.Ссылка,
			ТекстСообщения);   
			
			 // Если не удалось обработать какой-либо документ из-за конфликта блокировки, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			Если ПричинаИсключения <> "Блокировка" Тогда
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЦикла; 		
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов = 0 Тогда
		ПараметрыОбработчика.ОбработкаЗавершена = Истина;
	КонецЕсли;	  
	
КонецПроцедуры

Процедура ОбработатьДвиженияРасчетыПоНалогам(ДокументПоВзносам, ВидНалогаПФР, ВидНалогаЕдиныйТариф) 
	
	НаборЗаписейРасчетыПоНалогам = РегистрыНакопления.РасчетыПоНалогам.СоздатьНаборЗаписей();
	НаборЗаписейРасчетыПоНалогам.Отбор.Регистратор.Установить(ДокументПоВзносам.Ссылка);	
	НаборЗаписейРасчетыПоНалогам.Прочитать();
	
	Для Каждого СтрокаРасчетыПоНалогам Из НаборЗаписейРасчетыПоНалогам Цикл 
		Если СтрокаРасчетыПоНалогам.ВидНалога = ВидНалогаПФР Тогда
			СтрокаРасчетыПоНалогам.ВидНалога = ВидНалогаЕдиныйТариф;    
		КонецЕсли;
	КонецЦикла;
	
	ПричинаИсключения = "Запись";
	Если НаборЗаписейРасчетыПоНалогам.Количество() > 0 Тогда
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейРасчетыПоНалогам);	
	КонецЕсли;	
	
КонецПроцедуры     

Процедура ОбработатьДвиженияРасчетыПоНалогамНаЕНС(ДокументПоВзносам, ВидНалогаПФР, ВидНалогаЕдиныйТариф)  
	
	НаборЗаписейРасчетыПоНалогам = РегистрыНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете.СоздатьНаборЗаписей();
	НаборЗаписейРасчетыПоНалогам.Отбор.Регистратор.Установить(ДокументПоВзносам.Ссылка); 
	НаборЗаписейРасчетыПоНалогам.Прочитать();
	
	Для Каждого СтрокаРасчетыПоНалогам Из НаборЗаписейРасчетыПоНалогам Цикл 
		Если СтрокаРасчетыПоНалогам.Налог = ВидНалогаПФР Тогда
			СтрокаРасчетыПоНалогам.Налог = ВидНалогаЕдиныйТариф;
		КонецЕсли;			
	КонецЦикла;
	
	ПричинаИсключения = "Запись";
	Если НаборЗаписейРасчетыПоНалогам.Количество() > 0 Тогда
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейРасчетыПоНалогам);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСчетаУчета(ЭлементВидНалога)
	ЭлементВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ЭлементВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
КонецПроцедуры

Процедура УстановитьКонстантуПодключаемоеОборудование(ПараметрыОбработчика) Экспорт
	
	Если Не Константы.ФункциональнаяОпцияИспользоватьПодключаемоеОборудование.Получить() Тогда
		Константы.ФункциональнаяОпцияИспользоватьПодключаемоеОборудование.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДвиженияПоУведомлениямСОтрицательнойСуммой() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Регистратор КАК Уведомление
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете КАК РасчетыПоНалогамНаЕдиномНалоговомСчете
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(РасчетыПоНалогамНаЕдиномНалоговомСчете.Регистратор) = ТИП(Документ.УведомлениеОбИсчисленныхСуммахНалогов)
		|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.Налог В(&Налоги)
		|	И ВЫРАЗИТЬ(РасчетыПоНалогамНаЕдиномНалоговомСчете.Регистратор КАК Документ.УведомлениеОбИсчисленныхСуммахНалогов).Дата >= &ДатаНачала";
	
	Налоги = Новый Массив;
	Налоги.Добавить(Справочники.ВидыНалогов.АвансовыйПлатежПриУСН);
	Налоги.Добавить(Справочники.ВидыНалогов.АвансовыйПлатежПриУСНРасходы);
	Налоги.Добавить(Справочники.ВидыНалогов.ЕдиныйНалогПриУСН); 
	Налоги.Добавить(Справочники.ВидыНалогов.ЕдиныйНалогПриУСНРасходы);
	
	Запрос.УстановитьПараметр("Налоги", Налоги);
	// Выбираем документы, только с начала месяца действия письма по отрицательному уведомлению
	Запрос.УстановитьПараметр("ДатаНачала", Дата(2023, 07 , 01));
	ТаблицаУведомлений = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаУведомления из ТаблицаУведомлений Цикл
		
		НачатьТранзакцию();
		Попытка
			Уведомление = СтрокаУведомления.Уведомление.ПолучитьОбъект();
			Уведомление.Записать(РежимЗаписиДокумента.Проведение);  
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Уведомление, Истина, Истина, РежимЗаписиДокумента.Проведение); 
			
			ЗафиксироватьТранзакцию();
	
		Исключение  
			ОтменитьТранзакцию();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось провести Уведомление по причине:
				|%1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,, 
				, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПометитьНаУдалениеЗадачуВзносыИП() Экспорт
	
	Если ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КалендарьПодготовкиОтчетности.Ссылка КАК Ссылка,
	|	КалендарьПодготовкиОтчетности.ПометкаУдаления КАК ПометкаУдаления,
	|	КалендарьПодготовкиОтчетности.Наименование КАК Наименование
	|ИЗ
	|	Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
	|ГДЕ
	|	КалендарьПодготовкиОтчетности.Задача = &Задача
	|	И КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия = &ДатаОкончанияСобытия";
	
	Запрос.УстановитьПараметр("ДатаОкончанияСобытия", '20231225');
	Запрос.УстановитьПараметр("Задача", Справочники.ЗадачиКалендаряПодготовкиОтчетности.СтраховыеВзносыИП);
	
	Попытка
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
			
			ЗадачаКалендаря = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			
			ЗадачаКалендаря.Наименование = "Удалить" + Строка(ЗадачаКалендаря.Ссылка.УникальныйИдентификатор()) + ЗадачаКалендаря.Наименование; 
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЗадачаКалендаря);
			ЗадачаКалендаря.УстановитьПометкуУдаления(Истина);  
 		
		КонецЦикла; 
		
		Справочники.КалендарьПодготовкиОтчетности.ЗагрузитьКалендарьПодготовкиОтчетности();
		
	Исключение
		
		ЕстьОшибки = Истина;
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ИмяСобытия = НСтр("ru = 'Выполнение обработчика ОбновитьЗадачуВзносыИП'", 
		ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
	КонецПопытки;   	                                       	
			
КонецПроцедуры

#КонецОбласти

#КонецОбласти
