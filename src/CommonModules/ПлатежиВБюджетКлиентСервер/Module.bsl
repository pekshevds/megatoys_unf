
#Область ОсновныеПравила

// ПРАВИЛА ЗАПОЛНЕНИЯ ПЛАТЕЖНЫХ ПОРУЧЕНИЙ - В ЦЕЛОМ

Функция НачалоДействияУказания3844У() Экспорт
	
	// Указание ЦБ РФ от 6 ноября 2015 г. № 3844-У
	// "О внесении изменений в Положение Банка России от 19 июня 2012 года № 383-П".
	
	// Совпадает с датой вступления в силу Приказа Минфина России от 23 сентября 2015 г. № 148н
	// "О внесении изменений в приказ Министерства финансов Российской Федерации от 12 ноября 2013 г. № 107н".
	
	Возврат '2016-03-28'; // Дата вступления явно прописана в тексте Указания.
	
КонецФункции

Функция НачалоДействияПриказа90н() Экспорт
	
	// Приказ Минфина №90н от 08.06.2015.
	
	Возврат '2016-01-01';
	
КонецФункции

Функция НачалоДействияПриказа2017_90н() Экспорт
	
	// Приказ Минфина №90н от 08.06.2015.
	
	Возврат '2017-01-01';
	
КонецФункции

Функция НачалоДействияПриказа126н() Экспорт
	
	// Приказ Минфина №126н от 30.10.2014.
	
	Возврат '2015-01-01';
	
КонецФункции

Функция ПрекращеноДействиеПереходногоПериодаУплатыНаКазначейскиеСчета(Период) Экспорт
	
	// Письмо Федерального казначейства от 6 октября 2020 г. N 05-04-09/20207 "О переходном периоде":
	// Федеральное казначейство в дополнение к письму от 30.09.2020 N 05-04-09/19667 сообщает,
	// что с 01.01.2021 по 30.04.2021 будет установлен переходный период одновременного функционирования
	// казначейских счетов для осуществления и отражения операций по учету и распределению поступлений,
	// открытых территориальным органам Федерального казначейства, и счетов, открытых территориальным органами
	// Федерального казначейства в подразделениях расчетной сети Центрального банка Российской Федерации
	// на балансовом счете N 40101 "Доходы, распределяемые органами Федерального казначейства между
	// бюджетами бюджетной системы Российской Федерации".
	
	Возврат Период <> Неопределено
		И Период >= '2021-05-01';
	
КонецФункции

Функция ВидПеречисления(Знач КБК, Знач Период) Экспорт
	
	// Вид перечисления определяет набор правил, которые используются для идентификации платежа.
	// Эти правила определены приложениями №№ 2-4 к приказу Минфина 107Н
	// НалоговыйПлатеж соответствует приложению 2
	// ТаможенныйПлатеж - приложению 3
	// ИнойПлатеж       - приложению 4
	
	Если НЕ КБКЗадан(КБК) Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ИнойПлатеж");
	КонецЕсли;
	
	Если ПлатежАдминистрируетсяНалоговымиОрганами(КБК) Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.НалоговыйПлатеж");
		
	ИначеЕсли ПлатежАдминистрируетсяТаможеннымиОрганами(КБК)
		ИЛИ ЭтоДоходыОтВнешнеэкономическойДеятельности(КБК) Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ТаможенныйПлатеж");
		
	ИначеЕсли ЭтоСтраховыеВзносы(КБК) Тогда
		
		Если ДействуетПриказ107н(Период) Тогда
			
			Возврат ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ИнойПлатеж");
			
		Иначе
			
			// Приказ 106н ясности не дает
			Возврат ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.НалоговыйПлатеж");
			
		КонецЕсли;
		
	Иначе
		
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ИнойПлатеж");
		
	КонецЕсли;
	
КонецФункции

Функция НачалоДействияПриказа107н() Экспорт
	
	// Приказ Минфина №107н от 12.11.2013.
	// Опубликован 24.01.2014 и вступает в силу по истечении 10 дней с даты публикации.
	
	Возврат '2014-02-04';
	
КонецФункции

Функция ДействуетПриказ107н(Период) Экспорт
	
	Возврат Период = Неопределено
		ИЛИ Период >= НачалоДействияПриказа107н();
	
КонецФункции

Функция ДействуетПриказ90н(Период) Экспорт
	
	Возврат Период = Неопределено
		ИЛИ Период >= НачалоДействияПриказа90н();
	
КонецФункции

Функция ДействуетПриказ126н(Период) Экспорт
	
	Возврат Период = Неопределено
		ИЛИ Период >= НачалоДействияПриказа126н();
	
КонецФункции

Функция ВидГосударственногоОргана(КБК) Экспорт
	
	Если ПустаяСтрока(КБК) Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.ПустаяСсылка");
	КонецЕсли;
	
	КодГлавногоАдминистратора = КодГлавногоАдминистратора(КБК);
	
	Если ПустаяСтрока(КБК) ИЛИ КодГлавногоАдминистратора = "182" Тогда
		ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.НалоговыйОрган");
	ИначеЕсли КодГлавногоАдминистратора = "392" Тогда
		ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.ОрганПФР");
	ИначеЕсли КодГлавногоАдминистратора = "393" Тогда
		ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.ОрганФСС");
	Иначе
		ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.Прочий");
	КонецЕсли;
	
	Возврат ВидГосударственногоОргана;
	
КонецФункции

Функция КодАдминистрированияНалоговымиОрганами() Экспорт
	
	Возврат "182";
	
КонецФункции

Функция КодАдминистрированияПенсионнымФондом() Экспорт
	
	Возврат "392";
	
КонецФункции

Функция КодАдминистрированияФСС() Экспорт
	
	Возврат "393";
	
КонецФункции

Функция НовыйАдминистраторСтраховыхВзносов(Период) Экспорт
	
	Возврат Период <> Неопределено
		// Приказ Минфина №90н от 08.06.2015.
		И Период >= '2017-01-01';
	
КонецФункции

Функция ЭтоВзносыНаПенсионноеСтрахование(ВидНалога) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВидНалога) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого ВидВзноса Из ВидыВзносовНаПенсионноеСтрахование() Цикл
		Если ВидВзноса = ВидНалога Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоВзносыНаСоциальноеСтрахование(ВидНалога) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВидНалога) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого ВидВзноса Из ВидыНаСоциальноеСтрахование() Цикл
		Если ВидВзноса = ВидНалога Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ВидыВзносовНаПенсионноеСтрахование()
	
	Взносы = Новый Массив;
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ПФР_СтраховаяЧасть"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ФФОМС"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ДополнительныеВзносы_ПФР_ВредныеУсловия"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ДополнительныеВзносы_ПФР_ЛетныеЭкипажи"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ДополнительныеВзносы_ПФР_ТяжелыеУсловия"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ДополнительныеВзносы_ПФР_Шахтеры"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ФФОМС"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть"));
	
	Возврат Взносы;
	
КонецФункции

Функция ВидыНаСоциальноеСтрахование()
	
	Взносы = Новый Массив;
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ФСС"));
	
	Возврат Взносы;
	
КонецФункции

Функция НачалоОтложенногоДействияПриказа2017_58н() Экспорт
	
	// Приказ Минфина №58н от 05.04.2017.
	// Настоящий приказ вступает в силу в установленном порядке, за исключением
	//  абзаца одиннадцатого подпункта "г" пункта 3,
	//  абзаца пятого подпункта "а", подпункта "в",
	//  абзацев второго, четвертого - пятого, десятого подпункта "г",
	//  абзацев второго - пятого, девятого подпункта "д" пункта 4,
	//  абзацев третьего - шестого подпункта "е",
	//  абзацев третьего - четвертого подпункта "ж" пункта 5,
	//  подпунктов "б" - "в",
	//  абзацев второго - третьего подпункта "л" пункта 6
	// Изменений, вступающих в силу со 2 октября 2017 года.
	
	Возврат '2017-10-02';
	
КонецФункции

Функция НачалоДействияПриказа2017_58н()
	
	// Приказ Минфина №58н от 05.04.2017.
	
	Возврат '2017-04-25';
	
КонецФункции

Функция НачалоДействияПриказа2020_199н()
	
	// Приказ Минфина №199н от 14.09.2020.
	//
	// Настоящий приказ вступает в силу 1 января 2021 г., за исключением:
	// - абзацев пятого и шестого подпункта "д", абзацев пятого и шестого подпункта "е",
	//   абзацев второго и третьего подпункта "ж", абзацев второго и третьего подпункта "з" пункта 8 изменений,
	// вступающих в силу по истечении девяти месяцев после для его официального опубликования;
	//
	// - пункта 2,
	// - подпункта "в" пункта 3,
	// - абзацев девятого-девятнадцатого подпункта "е" пункта 8,
	// - абзацев второго и третьего подпункта "ж" пункта 9,
	// - абзацев второго и третьего подпункта "з" пункта 10,
	// - абзацев второго - четвертого подпункта "б", подпункта "в" пункта 11,
	// - подпункта "л" пункта 12,
	// - пункта 13 изменений,
	// вступающих в силу с 1 июля 2021 г.;
	//
	// - абзацев второго и третьего подпункта "е" пункта 8,
	// - абзаца второго подпункта "б", подпунктов "в" - "е" пункта 9,
	// - подпункта "б", абзаца четвертого подпункта "г",
	//   абзацев второго - четвертого, девятого - одиннадцатого, тринадцатого и четырнадцатого подпункта "е",
	//   абзацев шестого, девятого и десятого подпункта "ж" пункта 10,
	// - абзацев пятого и шестого подпункта "б" пункта 11,
	// - подпунктов "б", "в", "д", "ж", "и", "м" пункта 12 изменений,
	// вступающих в силу 1 октября 2021 г.
	//
	// Положения подпункта "в" пункта 10 изменений применяются до 1 октября 2021 г
	
	Возврат '2021-01-01';
	
КонецФункции

Функция НачалоОтложенногоДействияПриказа2020_199н_Отложенный()
	
	// Приказ Минфина №199н от 14.09.2020.
	//
	// Настоящий приказ вступает в силу 1 января 2021 г., за исключением:
	//
	// - абзацев второго и третьего подпункта "е" пункта 8,
	// - абзаца второго подпункта "б", подпунктов "в" - "е" пункта 9,
	// - подпункта "б", абзаца четвертого подпункта "г",
	//   абзацев второго - четвертого, девятого - одиннадцатого, тринадцатого и четырнадцатого подпункта "е",
	//   абзацев шестого, девятого и десятого подпункта "ж" пункта 10,
	// - абзацев пятого и шестого подпункта "б" пункта 11,
	// - подпунктов "б", "в", "д", "ж", "и", "м" пункта 12 изменений,
	// вступающих в силу 1 октября 2021 г.
	
	Возврат '2021-10-01';
	
КонецФункции

Функция ДатаСменыНаименованияМИДол() Экспорт
	
	// Письмо ФНС от 15.05.2023 № ЕД-26-8/8@/07-04-05/05-12658
	
	Возврат '20230515';
	
КонецФункции

Функция ДействуетПриказ2017_58н(Период) Экспорт
	
	Возврат Период <> Неопределено
		И Период >= НачалоДействияПриказа2017_58н();
	
КонецФункции

Функция ДействуетПриказ2017_58н_Отложенный(Период) Экспорт
	
	Возврат Период <> Неопределено
		И Период >= НачалоОтложенногоДействияПриказа2017_58н();
	
КонецФункции

Функция ДействуетПриказ2020_199н(Период)
	
	Возврат Период <> Неопределено
		И Период >= НачалоДействияПриказа2020_199н();
	
КонецФункции

Функция ДействуетПриказ2020_199н_Отложенный(Период) Экспорт
	
	Возврат Период <> Неопределено
		И Период >= НачалоОтложенногоДействияПриказа2020_199н_Отложенный();
	
КонецФункции

Функция ДействуетИзменениеСтатусаПоИсполнительномуЛистуВБюджет(Период) Экспорт
	
	Возврат Период <> Неопределено И Период >= '20220620';
	
КонецФункции

Функция СтарыеВидыВзносовНаПенсионноеСтрахование()
	
	Взносы = Новый Массив;
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ПФР_СтраховаяЧасть"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ФФОМС"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ДополнительныеВзносы_ПФР_ВредныеУсловия"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ДополнительныеВзносы_ПФР_ЛетныеЭкипажи"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ДополнительныеВзносы_ПФР_ТяжелыеУсловия"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ДополнительныеВзносы_ПФР_Шахтеры"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ФФОМС"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ПФР_НакопительнаяЧасть")); // до 2014 года
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ПФР_Добровольные"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ПФР_Добровольные"));
	
	Возврат Взносы;
	
КонецФункции

Функция СтарыеВидыВзносовНаСоциальноеСтрахование()
	
	Взносы = Новый Массив;
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ФСС"));
	
	Возврат Взносы;
	
КонецФункции

Функция НеактуальныеНалоги(Дата) Экспорт
	
	Налоги = Новый Соответствие();
	
	Если ДействуетПереходНаЕНП(Дата) Тогда
		НачалоПереходаНаЕНП = '20230101';
		Для Каждого ВидВзноса Из СтарыеВидыВзносовНаПенсионноеСтрахование() Цикл
			Налоги.Вставить(ВидВзноса, Новый Структура("ДатаНеактуальности", НачалоПереходаНаЕНП));
		КонецЦикла;
		
		Для Каждого ВидВзноса Из СтарыеВидыВзносовНаСоциальноеСтрахование() Цикл
			Налоги.Вставить(ВидВзноса, Новый Структура("ДатаНеактуальности", НачалоПереходаНаЕНП));
		КонецЦикла;
	ИначеЕсли ДействуетПриказ2017_90н(Дата) Тогда
		НачалоДействияПриказа2017_90н = НачалоДействияПриказа2017_90н();
		Налоги.Вставить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.УСН_МинимальныйНалог"),
			Новый Структура("ДатаНеактуальности, АктуальныйНалог",
				НачалоДействияПриказа2017_90н,
				ПредопределенноеЗначение("Перечисление.ВидыНалогов.УСН_ДоходыМинусРасходы")));
		
		Для Каждого ВидВзноса Из СтарыеВидыВзносовНаПенсионноеСтрахование() Цикл
			Налоги.Вставить(ВидВзноса, Новый Структура("ДатаНеактуальности", НачалоДействияПриказа2017_90н));
		КонецЦикла;
		
		Для Каждого ВидВзноса Из СтарыеВидыВзносовНаСоциальноеСтрахование() Цикл
			Налоги.Вставить(ВидВзноса, Новый Структура("ДатаНеактуальности", НачалоДействияПриказа2017_90н));
		КонецЦикла;
	КонецЕсли;
	
	Возврат Налоги;
	
КонецФункции

Функция ДействуетПереходНаЕНП(Период) Экспорт
	
	Возврат Период <> Неопределено И Период >= '20230101';
	
КонецФункции

Функция ДействуетПриказ2017_90н(Период) Экспорт
	
	Возврат Период <> Неопределено
		И Период >= '2017-01-01';
	
КонецФункции

Функция ДействуетНовыйАдмиинстраторСтраховыхВзносов(Период) Экспорт
	
	Возврат ДействуетПриказ2017_90н(Период);
	
КонецФункции

#КонецОбласти

#Область УникальныйИдентификаторНачисления

// УНИКАЛЬНЫЙ ИДЕНТИФИКАТОР НАЧИСЛЕНИЯ

// До 31 марта 2014 год в реквизите "Назначение платежа" может указываться 
// уникальный идентификатор начисления.
// Уникальный идентификатор начисления указывается первым в реквизите «Назначение платежа» 
// и состоит из 23 знаков: первые три знака принимают значение «УИН», 
// знаки с 4 по 23 соответствуют значению уникального идентификатора начисления.
// Для выделения информации об уникальном идентификаторе начисления после уникального 
// идентификатора начислений используется символ «///».
// Например: «УИН12345678901234567890///».
// В форматах ГИС ГМП до версии 1.16.1 в общем случае УИН может содержать не только цифры.

// Форматы взаимодействия.
// Государственной информационной системы о государственных и муниципальных платежах с информационными системами участников
// Версия 1.16.1

// Структура УИН для АН и ГАН, являющихся федеральными органами государственной власти
// ┌───┬───┬───┬───┬───┬───┬───┬───┬──┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐
// │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 │ 8 │9 │10 │11 │12 │13 │14 │15 │16 │17 │18 │19 │20 │
// ├───┴───┴───┼───┴───┴───┴───┴───┴──┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┼───┤
// │     A     │                              B                               │ C │
// └───────────┴──────────────────────────────────────────────────────────────┴───┘
// A - Код главы КБК
// B - Уникальный номер начисления - 16 цифр. Алгоритм формирования,
//     обеспечивающий уникальность номера, определяется участником самостоятельно.
// С - Контрольный разряд (правила расчета ниже).

// Структура УИН для АН и ГАН, являющихся органами государственной власти субъектов
// Российской Федерации, органами местного самоуправления, государственными (муниципальными) учреждениями
// ┌───┬───┬───┬───┬───┬───┬───┬───┬──┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐
// │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 │ 8 │9 │10 │11 │12 │13 │14 │15 │16 │17 │18 │19 │20 │21 │22 │23 │24 │25 │
// ├───┴───┴───┴───┴───┴───┴───┴───┼──┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┼───┤
// │               A               │                                  B                           │ C │
// └───────────────────────────────┴──────────────────────────────────────────────────────────────┴───┘
// A - УРН участника, сформировавшего начисление. УРН указывается в десятичном представлении.
//     Для этого его необходимо предварительно перевести из шестнадцатеричного представления и десятичное.
//     Например, УРН участника равен значению «aa11b4»; после перевода в десятичное представление получается «11145652».
//     Если при переводе УРН участника в десятичное представление получается  менее восьми символов,
//     то  значение дополняется нулями слева до 8 цифр.
// B - Уникальный номер начисления - 16 цифр. Алгоритм формирования,
//     обеспечивающий уникальность номера, определяется участником самостоятельно.
// С - Контрольный разряд.

// Правила расчета контрольного разряда УИН.
// Контрольный разряд  УИН формируется по следующим правилам:
//   - каждому разряду УИН, начиная со старшего разряда, присваивается набор весов,
//     соответствующий натуральному ряду чисел от 1 до 10, далее набор весов повторяется;
//   - каждая цифра УИН умножается на присвоенный вес разряда и вычисляется сумма полученных произведений;
//   - контрольный разряд для УИН представляет собой остаток от деления полученной суммы на модуль «11».
//     Контрольный разряд должен иметь значение от 0 до 9;
//   - если получается остаток, равный 10, то для обеспечения одноразрядного контрольного разряда
//     необходимо провести повторный расчет, применяя вторую последовательность весов,
//     являющуюся результатом циклического сдвига исходной последовательности на два разряда влево (3, 4, 5, 6, 7, 8, 9,
//     10, 1, 2). Если, в случае повторного расчета, остаток от деления вновь сохраняется равным 10,
//     то значение контрольного разряда проставляется равным «0».

Функция НачалоПримененияИдентификатораПлатежа() Экспорт
	
	// Указание ЦБ РФ N 3025-У от 15 июля 2013 г.
	
	Возврат '20140331';
	
КонецФункции

Процедура ЗаменитьВНазначенииПлатежаУИН(НазначениеПлатежа, Знач ИдентификаторПлатежа, Знач Дата = Неопределено, Знач ПеречислениеВБюджет = Истина) Экспорт
	
	// Заменим (добавим) УИН (уникальный идентификатор начисления)
	// До 31 марта 2014 он указывается в назначении платежа
	Если НЕ ДействуетПриказ107н(Дата) Тогда
		// УИН не применяется
		Возврат;
	КонецЕсли;
	
	НазначениеПлатежаУИН = РаспознатьВНазначенииПлатежаУИН(НазначениеПлатежа);
	
	Если НЕ ПеречислениеВБюджет
		ИЛИ (Дата <> Неопределено
		И Дата >= НачалоПримененияИдентификатораПлатежа()) Тогда
		// УИН не следует указывать в назначении платежа, надо удалить
		ИдентификаторПлатежа = "";
	КонецЕсли;
	
	Если НЕ РеквизитЗаполнен(ИдентификаторПлатежа) Тогда
		
		// Нормативные документы не определяют, как в Назначении платежа указывается информация о том, что УИН отсутствует.
		// Если УИН отсутствует, то в назначении платежа мы ничего не будем про него писать.
		// Но отдельные банки могут требовать заполнять в Назначении платежа информацию о пустом УИН 
		// в формате УИН0/// или УИН0                   /// 
		// Поэтому если пользователь написал в назначении про пустой УИН, то не будем его как-то поправлять.
		Если НЕ РеквизитЗаполнен(НазначениеПлатежаУИН.Значение) Тогда
			// Пользователь ничего не написал про УИН или написал про пустой УИН
			Возврат;
		Иначе
			// В назначении платежа остался старый УИН, его надо очистить
			ИдентификаторПлатежа = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Если СокрЛП(НазначениеПлатежаУИН.Значение) = СокрЛП(ИдентификаторПлатежа) Тогда
		// В назначении указан правильный УИН
		Возврат;
	КонецЕсли;
	
	ОписаниеУИН = ОписаниеУИН(ИдентификаторПлатежа);
	
	Если ЗначениеЗаполнено(НазначениеПлатежаУИН.Описание) Тогда
		// Удалим старое описание
		НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, НазначениеПлатежаУИН.Описание, "");
	КонецЕсли;
	
	НазначениеПлатежа = ОписаниеУИН + НазначениеПлатежа;
	
КонецПроцедуры

Функция ОписаниеУИН(Знач ИдентификаторПлатежа)
	
	Если ПустаяСтрока(ИдентификаторПлатежа) Тогда
		Возврат "";
	КонецЕсли;
	
	НормативнаяДлина = МинимальнаяДлинаУИН();
	ФактическаяДлина = СтрДлина(СокрЛП(ИдентификаторПлатежа));
	
	Если ФактическаяДлина > НормативнаяДлина Тогда
		ИдентификаторПлатежа = Лев(ИдентификаторПлатежа, НормативнаяДлина);
	Иначе
		ИдентификаторПлатежа = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(
			ИдентификаторПлатежа,
			НормативнаяДлина,
			" ",
			"Справа");
	КонецЕсли;
	
	Возврат СигнатураУИН() + ИдентификаторПлатежа + РазделительУИН();
	
КонецФункции

// Возвращает минимальную длину кода УИН
//
// Возвращаемое значение:
//	Число - количество символов УИН
//
Функция МинимальнаяДлинаУИН()
	
	Возврат 20;
	
КонецФункции

Функция СигнатураУИН()
	
	Возврат "УИН";
	
КонецФункции

Функция РазделительУИН()
	
	Возврат "///";
	
КонецФункции

Функция РаспознатьВНазначенииПлатежаУИН(Знач НазначениеПлатежа)
	
	Описание = Новый Структура;
	Описание.Вставить("Описание", ""); // Строка, содержащая описание УИН (23, 26 знаков или больше)
	Описание.Вставить("Значение", ""); // Собственно УИН (строка не более 20 знаков)
	
	Сигнатура                 = "УИН";
	Разделитель               = "///";
	
	МаксимальнаяДлинаЗначенияВНазначенииПлатежа = МинимальнаяДлинаУИН(); // Когда требовалось указывать УИН в Назначении платежа длина была 20.
	
	ДлинаСигнатуры   = СтрДлина(Сигнатура);
	ДлинаРазделителя = СтрДлина(Разделитель);
	
	РазбираемаяСтрока = СокрЛ(НазначениеПлатежа);
	ДлинаОписания = СтрДлина(НазначениеПлатежа) - СтрДлина(РазбираемаяСтрока);
	
	Если Лев(РазбираемаяСтрока, ДлинаСигнатуры) <> Сигнатура Тогда
		// УИН не обнаружен
		Возврат Описание;
	КонецЕсли;
	
	РазбираемаяСтрока = Сред(РазбираемаяСтрока, ДлинаСигнатуры + 1); // Убираем сигнатуру
	ДлинаОписания = ДлинаОписания + ДлинаСигнатуры;
	
	ПозицияРазделителя = СтрНайти(РазбираемаяСтрока, Разделитель); // в идеальном случае - 21
	Если ПозицияРазделителя = 0 Тогда
		ДлинаЗначения     = СтрДлина(РазбираемаяСтрока);
		ДлинаОписания     = ДлинаОписания + ДлинаЗначения;
	Иначе
		ДлинаЗначения     = ПозицияРазделителя - 1;
		ДлинаОписания     = ДлинаОписания + ДлинаЗначения + ДлинаРазделителя;
		РазбираемаяСтрока = Лев(РазбираемаяСтрока, ДлинаЗначения);
	КонецЕсли;
	
	// Убедимся, что значение содержит УИН - 1 символ "0" или 20 символов
	РазбираемаяСтрока = СтрЗаменить(РазбираемаяСтрока, " ", "");
	Если СтрДлина(РазбираемаяСтрока) > МаксимальнаяДлинаЗначенияВНазначенииПлатежа Тогда
		// УИН не обнаружен - слишком много символов 
		Возврат Описание;
	КонецЕсли;
	
	// УИН обнаружен
	Описание.Вставить("Описание", Лев(НазначениеПлатежа, ДлинаОписания));
	Описание.Вставить("Значение", РазбираемаяСтрока);
	Возврат Описание;
	
КонецФункции

#КонецОбласти

#Область КодыБюджетнойКлассификации

// Приказ Минфина от 01.07.13 г. N 65н

//┌──────────────────────────────────────────────────────────────────────────────────────┐
// │                     Структура кода классификации доходов бюджетов                    │
// ├──────────────┬─────────────────────────────────────────┬───────────┬─────────────────┤
// │ Код главного │        Код вида доходов бюджетов        │Код подвида│Код классификации│
// │администратора├───────┬───────┬───────┬─────────┬───────┤  доходов  │ операций сектора│
// │   доходов    │группа │под-   │статья │подстатья│элемент│ бюджетов  │ государственного│
// │   бюджета    │доходов│группа │доходов│ доходов │доходов│           │   управления,   │
// │              │       │доходов│       │         │       │           │  относящихся к  │
// │              │       │       │       │         │       │           │ доходам бюджетов│
// ├────┬────┬────┼───────┼───┬───┼───┬───┼──┬──┬───┼───┬───┼──┬──┬──┬──┼─────┬─────┬─────┤
// │ 1  │ 2  │ 3  │   4   │ 5 │ 6 │ 7 │ 8 │9 │10│11 │12 │13 │14│15│16│17│ 18  │ 19  │  20 │
//└────┴────┴────┴───────┴───┴───┴───┴───┴──┴──┴───┴───┴───┴──┴──┴──┴──┴─────┴─────┴─────┘

Функция ДопускаетсяПустойКБК(ВидПеречисления, НомерСчетаПолучателя, Период) Экспорт
	
	Возврат ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ИнойПлатеж")
		И ЭтоСчетИсполнителяГосУслуг(НомерСчетаПолучателя, Период);
	
КонецФункции
	
Функция ПлатежАдминистрируетсяНалоговымиОрганами(КБК) Экспорт
	
	Возврат КодГлавногоАдминистратора(КБК) = "182";
	
КонецФункции

Функция ПлатежАдминистрируетсяПенсионнымФондом(КБК) Экспорт
	
	Возврат КодГлавногоАдминистратора(КБК) = "392";
	
КонецФункции

Функция ПлатежАдминистрируетсяФСС(КБК) Экспорт
	
	Возврат КодГлавногоАдминистратора(КБК) = "393";
	
КонецФункции

Функция ПлатежАдминистрируетсяТаможеннымиОрганами(КБК) Экспорт
	
	Возврат КодГлавногоАдминистратора(КБК) = "153";
	
КонецФункции

Функция ЭтоСтраховыеВзносы(КБК) Экспорт
	
	Возврат ПодгруппаДоходов(КБК) = "102"; // страховые взносы на обязательное социальное страхование;
	
КонецФункции

Функция ЭтоДоходыОтВнешнеэкономическойДеятельности(КБК)
	
	Возврат ПодгруппаДоходов(КБК) = "110"; // доходы от внешнеэкономической деятельности;
	
КонецФункции

Функция ПодгруппаДоходов(КБК)
	
	Возврат ЭлементКБК(КБК, "ПодгруппаДоходов");
	
КонецФункции

Функция ЭлементКБК(КБК, ИмяЭлементаКБК) Экспорт
	
	РасположениеЭлемента = РасположениеЭлементаКБК(ИмяЭлементаКБК);
	
	Возврат Сред(КБК, РасположениеЭлемента.Начало, РасположениеЭлемента.Длина);
	
КонецФункции

Функция РасположениеЭлементаКБК(ИмяЭлементаКБК) Экспорт
	
	Результат = Новый Структура("Начало, Длина", 0, 0);
	Если ИмяЭлементаКБК = "КодГлавногоАдминистратора" Тогда
		Результат.Начало = 1;
		Результат.Длина  = 3;
	ИначеЕсли ИмяЭлементаКБК = "КодГруппыДоходов" Тогда
		Результат.Начало = 4;
		Результат.Длина  = 1;
	ИначеЕсли ИмяЭлементаКБК = "КодПодгруппыДоходов" Тогда
		Результат.Начало = 5;
		Результат.Длина  = 2;
	ИначеЕсли ИмяЭлементаКБК = "ПодгруппаДоходов" Тогда
		Результат.Начало = 4;
		Результат.Длина  = 3;
	ИначеЕсли ИмяЭлементаКБК = "КодСтатьиДоходов" Тогда
		Результат.Начало = 7;
		Результат.Длина  = 2;
	ИначеЕсли ИмяЭлементаКБК = "КодВидаДоходов" Тогда
		Результат.Начало = 4;
		Результат.Длина  = 10;
	ИначеЕсли ИмяЭлементаКБК = "КодЭлементаДоходов" Тогда
		Результат.Начало = 12;
		Результат.Длина  = 2;
	ИначеЕсли ИмяЭлементаКБК = "КодПодвидаДоходов" Тогда
		Результат.Начало = 14;
		Результат.Длина  = 4;
	ИначеЕсли ИмяЭлементаКБК = "КодОперацииСектораУправления" Тогда
		Результат.Начало = 18;
		Результат.Длина  = 3;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КодГлавногоАдминистратора(КБК) Экспорт
	
	Возврат ЭлементКБК(КБК, "КодГлавногоАдминистратора");
	
КонецФункции

Функция КБКЗадан(КБК) Экспорт
	
	Если НЕ РеквизитЗаполнен(КБК) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрДлина(СокрП(КБК)) <> 20 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПустойКодГлавногоАдминистратора() Экспорт
	
	Результат = "";
	РасположениеЭлемента = РасположениеЭлементаКБК("КодГлавногоАдминистратора");
	Для Счетчик = 1 По РасположениеЭлемента.Длина Цикл
		Результат = Результат + "0";
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция КодВидаДоходов(КБК) Экспорт
	
	Возврат ЭлементКБК(КБК, "КодВидаДоходов");
	
КонецФункции

Функция ШаблонКБК(КБК, ПустойКодПодвидаДоходов = Истина) Экспорт
	
	Если НЕ КБКЗадан(КБК) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ПустойКодПодвидаДоходов Тогда
		Возврат КодВидаДоходов(КБК) + ПустойКодПодвидаДоходов() + КодОперацииСектораУправления(КБК);
	Иначе
		Возврат КодВидаДоходов(КБК) + КодПодвидаДоходов(КБК)    + КодОперацииСектораУправления(КБК);
	КонецЕсли;
	
КонецФункции

Функция ПустойКодПодвидаДоходов() Экспорт
	
	Результат = "";
	РасположениеЭлемента = РасположениеЭлементаКБК("КодПодвидаДоходов");
	Для Счетчик = 1 По РасположениеЭлемента.Длина Цикл
		Результат = Результат + "0";
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция КодОперацииСектораУправления(КБК) Экспорт
	
	Возврат ЭлементКБК(КБК, "КодОперацииСектораУправления"); // КОСГУ
	
КонецФункции

Функция НовыеРеквизитыПлатежаВБюджет(Объект, ПеречислениеВБюджет = Истина) Экспорт
	
	РеквизитыПлатежаВБюджет = Новый Структура;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		РеквизитыДокумента = РеквизитыДокумента_ПлатежноеПоручение();
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РасходИзКассы") Тогда
		РеквизитыДокумента = РеквизитыДокумента_РасходныйКассовыйОрдер();
	КонецЕсли;
	
	Для Каждого Реквизит Из РеквизитыДокумента Цикл
		РеквизитыПлатежаВБюджет.Вставить(Реквизит.Значение)
	КонецЦикла;
	
	Если ПеречислениеВБюджет Тогда
		ЗаполнитьЗначенияСвойств(РеквизитыПлатежаВБюджет, Объект);
	КонецЕсли;
	
	Возврат РеквизитыПлатежаВБюджет;
	
КонецФункции

Функция РеквизитыПлатежаВБюджет() Экспорт
	
	Реквизиты = Новый Соответствие;
	
	Реквизиты.Вставить("ВидПеречисления",      "ВидПеречисленияВБюджет");
	Реквизиты.Вставить("ИдентификаторПлатежа", "ИдентификаторПлатежа");
	Реквизиты.Вставить("СтатусПлательщика",    "СтатусСоставителя");
	Реквизиты.Вставить("КБК",                  "КодБК");
	Реквизиты.Вставить("КодТерритории",        "КодОКАТО");
	Реквизиты.Вставить("ОснованиеПлатежа",     "ПоказательОснования");
	Реквизиты.Вставить("НалоговыйПериод",      "ПоказательПериода");
	Реквизиты.Вставить("НомерДокумента",       "ПоказательНомера");
	Реквизиты.Вставить("ДатаДокумента",        "ПоказательДаты");
	Реквизиты.Вставить("ТипПлатежа",           "ПоказательТипа");
	Реквизиты.Вставить("НазначениеПлатежа",    "НазначениеПлатежа");
	Реквизиты.Вставить("ОчередностьПлатежа",   "ОчередностьПлатежа");
	Реквизиты.Вставить("ПеречислениеВБюджет",  "ПеречислениеВБюджет");
	Реквизиты.Вставить("ПеречислениеПоИсполнительномуЛисту",  "ПеречислениеПоИсполнительномуЛисту");
	
	Возврат Реквизиты;
	
КонецФункции

Функция РеквизитыДокумента_ПлатежноеПоручение() Экспорт
	
	Реквизиты = РеквизитыПлатежаВБюджет();
	
	Реквизиты.Вставить("НазначениеПлатежа",  "НазначениеПлатежа");
	Реквизиты.Вставить("ОчередностьПлатежа", "ОчередностьПлатежа");
	
	Возврат Реквизиты;
	
КонецФункции

Функция РеквизитыДокумента_РасходныйКассовыйОрдер() Экспорт
	
	Реквизиты = РеквизитыПлатежаВБюджет();
	
	Реквизиты.Вставить("НазначениеПлатежа", "Основание");
	
	Возврат Реквизиты;
	
КонецФункции

Функция ПоказателиНалоговогоПериода(Организация, ВидНалога, Период) Экспорт
	
	Показатели = ПоказателиПериода();
	
	Если ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.НДС") Тогда
		// Особенность НДС в том, что он уплачивается несколькими (ежемесячными) платежами,
		// каждый из которых относится к одному и тому же периоду (кварталу).
		// Из текста правил оформления  документов нельзя сделать однозначный вывод, что указывать в данном случае - месяц или квартал.
		// Сейчас местные УФНС рекомендуют указывать значение "КВ" (квартал).
		НалоговыйПериодДляПлатежейВБюджет = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал");
		
	ИначеЕсли ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.НДФЛ_ИП") Тогда
		
		// Если по годовому платежу предусматривается более одного срока уплаты налогового платежа
		// и установлены конкретные даты уплаты, то указываются эти даты.
		
		НалоговыйПериодДляПлатежейВБюджет = Неопределено;
		
	ИначеЕсли ЭтоФиксированныеВзносы(ВидНалога) Тогда
		
		НалоговыйПериодДляПлатежейВБюджет = ПредопределенноеЗначение("Перечисление.Периодичность.Год");
		
	КонецЕсли;
	
	Если НалоговыйПериодДляПлатежейВБюджет <> Неопределено Тогда
		
		ПериодичностьПоКлассификатору = ПериодичностьПоКлассификатору(НалоговыйПериодДляПлатежейВБюджет);
		ПоказательПериода = НалоговыйПериод(Период, ПериодичностьПоКлассификатору);
		Показатели.Период                         = Период;
		Показатели.ПоказательПериода              = ПоказательПериода;
		Показатели.ПредставлениеНалоговогоПериода = ПредставлениеНалоговогоПериода(ПоказательПериода);
		
	ИначеЕсли ВидНалога =  ПредопределенноеЗначение("Перечисление.ВидыНалогов.НДФЛ") Тогда
		
		ПериодУплаты = НачалоМесяца(Период) - 1;
		Показатели.Период                         = ПериодУплаты; // НДФЛ платим в месяце, следующем за окончанием налогового периода
		Показатели.ПоказательПериода              = НалоговыйПериод(ПериодУплаты, ПериодичностьМесяц());
		Показатели.ПредставлениеНалоговогоПериода = ПредставлениеНалоговогоПериода(Показатели.ПоказательПериода);
		
	ИначеЕсли ВидНалога =  ПредопределенноеЗначение("Перечисление.ВидыНалогов.НДС") Тогда // Предприятие на УСН может заплатить НДС
		
		ПериодУплаты = НачалоКвартала(Период) - 1;
		ПоказательПериода = НалоговыйПериод(
			ПериодУплаты, ПериодичностьПоКлассификатору(ПредопределенноеЗначение("Перечисление.Периодичность.Квартал")));
		Показатели.Период                         = ПериодУплаты;
		Показатели.ПоказательПериода              = ПоказательПериода;
		Показатели.ПредставлениеНалоговогоПериода = ПредставлениеНалоговогоПериода(ПоказательПериода);
		
	Иначе
		
		Показатели.Период                         = Период;
		Показатели.ПоказательПериода              = НалоговыйПериод(Период, ПлатежПоКонкретнойДате());
		Показатели.ПредставлениеНалоговогоПериода = ПредставлениеНалоговогоПериода(Показатели.ПоказательПериода);
		
	КонецЕсли;
	
	Возврат Показатели;
	
КонецФункции

Функция ПоказателиПериода() Экспорт
	
	Возврат Новый Структура("Период, ПоказательПериода, ПредставлениеНалоговогоПериода",
		'00010101', "", "");
	
КонецФункции

Функция ПериодичностьПоКлассификатору(Периодичность) Экспорт
	
	Если Периодичность =  ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		
		Возврат ПериодичностьГод();
		
	ИначеЕсли Периодичность =  ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
		
		Возврат ПериодичностьПолугодие();
		
	ИначеЕсли Периодичность =  ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		
		Возврат ПериодичностьКвартал();
		
	ИначеЕсли Периодичность =  ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		
		Возврат ПериодичностьМесяц();
		
	Иначе
		
		Возврат ПлатежПоКонкретнойДате();
		
	КонецЕсли;
	
КонецФункции

Функция ЭтоСчетИсполнителяГосУслуг(Знач НомерСчета, Период)
	
	Если НЕ ДействуетПриказ107н(Период) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрДлина(СокрП(НомерСчета)) <> 20 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	БалансовыйСчет       = БанковскиеПравилаКлиентСервер.БалансовыйСчет(НомерСчета);
	ПризнакЛицевогоСчета = Сред(НомерСчета, 14, 1);
	
	// Пункт 2 Приложения 4 к 107н,
	// Указание ЦБ РФ от 24 декабря 2010 г. N 2547-У
	ЭтоСчетИсполнителяГосУслуг = (БалансовыйСчет = "40302")
		ИЛИ (БалансовыйСчет = "40501" И  ПризнакЛицевогоСчета = "2")
		ИЛИ (БалансовыйСчет = "40601" И (ПризнакЛицевогоСчета = "1" ИЛИ ПризнакЛицевогоСчета = "3"))
		ИЛИ (БалансовыйСчет = "40701" И (ПризнакЛицевогоСчета = "1" ИЛИ ПризнакЛицевогоСчета = "3"))
		ИЛИ (БалансовыйСчет = "40503" И  ПризнакЛицевогоСчета = "4")
		ИЛИ (БалансовыйСчет = "40603" И  ПризнакЛицевогоСчета = "4")
		ИЛИ (БалансовыйСчет = "40703" И  ПризнакЛицевогоСчета = "4");
	
	Если ДействуетПриказ2020_199н(Период) Тогда
		ЭтоСчетИсполнителяГосУслуг = ЭтоСчетИсполнителяГосУслуг
			// Приказ Минфина от от 14.09.2020 № 199н
			Или ЭтоСчетКазначействаСредствПоступающихВоВременноеРаспоряжение(НомерСчета)
			Или БалансовыйСчет = "03214" Или БалансовыйСчет = "03224"
			Или БалансовыйСчет = "03234" Или БалансовыйСчет = "03254"
			Или БалансовыйСчет = "03231"; // Приказ Казначейства от 01.04.2020 № 15н
	КонецЕсли;
	
	Возврат ЭтоСчетИсполнителяГосУслуг;
	
КонецФункции

Функция ЭтоСчетКазначействаСредствПоступающихВоВременноеРаспоряжение(Счет) Экспорт
	
	// Приказ Минфина от от 14.09.2020 № 199н
	
	БалансовыйСчет = БанковскиеПравилаКлиентСервер.БалансовыйСчет(Счет);
	
	ЭтоСчетСредствПоступающихВоВременноеРаспоряжение =
		БалансовыйСчет = "03212" Или БалансовыйСчет = "03222"
		Или БалансовыйСчет = "03232" Или БалансовыйСчет = "03242"
		Или БалансовыйСчет = "03252" Или БалансовыйСчет = "03262" Или БалансовыйСчет = "03272";
	
	Возврат ЭтоСчетСредствПоступающихВоВременноеРаспоряжение;
	
КонецФункции

#КонецОбласти

#Область ОбеспечениеВыполненияПравил

Процедура ОтметитьНезаполненноеЗначение(Значение) Экспорт
	
	Если ТипЗнч(Значение) = Тип("Строка") И ПустаяСтрока(Значение) Тогда
		Значение = НезаполненноеЗначение();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтметитьНезаполненныеЗначения(Реквизиты) Экспорт
	
	Для каждого КлючИЗначение Из Реквизиты Цикл
		ПравильноеЗначение = КлючИЗначение.Значение;
		ОтметитьНезаполненноеЗначение(ПравильноеЗначение);
		Реквизиты[КлючИЗначение.Ключ] = ПравильноеЗначение;
	КонецЦикла;
	
КонецПроцедуры

Функция РеквизитЗаполнен(Значение) Экспорт
	
	Возврат ЗначениеЗаполнено(Значение) И СокрП(Значение) <> НезаполненноеЗначение();
	
КонецФункции

// Незаполненное значение ("0")
//
Функция НезаполненноеЗначение() Экспорт
	
	// При невозможности указать конкретное значение, указывается ноль "0".
	// Наличие незаполненных реквизитов не допускается.
	
	Возврат "0";
	
КонецФункции

Функция ПениПроцентыРаздельно(КБК, Период) Экспорт
	
	Если ПлатежАдминистрируетсяНалоговымиОрганами(КБК) Тогда
		
		Возврат ДействуетПриказ126н(Период);
		
	ИначеЕсли ПлатежАдминистрируетсяПенсионнымФондом(КБК) Тогда
		
		Возврат ДействуетПриказ90н(Период);
		
	ИначеЕсли ПлатежАдминистрируетсяФСС(КБК) Тогда
		
		Возврат ДействуетПриказ90н(Период);
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция СтраховыеВзносыРаздельно(Период) Экспорт
	
	Возврат ДействуетПриказ90н(Период);
	
КонецФункции

Функция ЭтоКБКШтраф(КБК) Экспорт
	
	// Из этого правила могут быть исключения, но они редкие и мы их не обслуживаем
	
	КодПодвидаДоходов = КодПодвидаДоходов(КБК);
	Возврат Лев(КодПодвидаДоходов, 1) = "3";
	
	// В некоторых случаях штраф может также определяться по типу платежа
	
КонецФункции

Функция ЭтоКБКПени(КБК) Экспорт
	
	КодПодвидаДоходов = КодПодвидаДоходов(КБК);
	Возврат Лев(КодПодвидаДоходов, 2) = "21";
	
КонецФункции

Функция ЭтоКБКПроценты(КБК) Экспорт
	
	КодПодвидаДоходов = КодПодвидаДоходов(КБК);
	Возврат Лев(КодПодвидаДоходов, 2) = "22";
	
КонецФункции

Функция ЭтоКБКПениПроценты(КБК) Экспорт
	
	// Из этого правила могут быть исключения, но они редкие и мы их не обслуживаем
	КодПодвидаДоходов = КодПодвидаДоходов(КБК);
	Возврат Лев(КодПодвидаДоходов, 1) = "2";
	
	// В некоторых случаях может определяться по типу платежа - см. ТипПлатежаПени()
	
КонецФункции

Функция КодПодвидаДоходов(КБК) Экспорт
	
	Возврат ЭлементКБК(КБК, "КодПодвидаДоходов");
	
КонецФункции

Функция ЭтоФиксированныеВзносы(ВидНалога) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидНалога) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат (ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть")
		Или ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ФФОМС")
		Или ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ФСС")
		Или ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ПФР_НакопительнаяЧасть"));
	
КонецФункции

Функция ЭтоКБКНалогиВзносы(КБК) Экспорт
	
	КодПодвидаДоходов = КодПодвидаДоходов(КБК);
	Возврат Лев(КодПодвидаДоходов, 1) = "1";
	
КонецФункции

Процедура ИсправитьСтатусСоставителя(Знач Период, СтатусСоставителя) Экспорт
	
	Если Не ЗначениеЗаполнено(СтатусСоставителя) Тогда
		Возврат;
	КонецЕсли;
	
	АктуальныеСтатусы = СтатусыПлательщика(Период).ВыгрузитьЗначения();
	Если ЗначениеЗаполнено(СтатусСоставителя) И АктуальныеСтатусы.Найти(СтатусСоставителя) = Неопределено Тогда
		Статусы = УстаревшиеСтатусыФизлица();
		Если Статусы.Найти(СтатусСоставителя) <> Неопределено Тогда
			СтатусСоставителя = СтатусНалогоплательщикаФизЛицо();
		Иначе
			СтатусСоставителя = СтатусПлательщикаИныеПлатежи();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УстаревшиеСтатусыФизлица()
	
	Статусы = Новый Массив;
	Статусы.Добавить(СтатусПлательщикаНалоговИСборовИП());
	Статусы.Добавить("10"); // нотариус
	Статусы.Добавить("11"); // адвокат
	Статусы.Добавить("12"); // глава крестьянского (фермерского) хозяйства
	
	Возврат Статусы;
	
КонецФункции

#КонецОбласти

#Область СпециальныеКлассификаторы

// КЛАССИФИКАТОРЫ ДЛЯ ЗАПОЛНЕНИЯ РАСПОРЯЖЕНИЙ ПРИ УПЛАТЕ В БЮДЖЕТ
// Вводятся приказом Минфина 107Н

// Статусы плательщика - реквизит 101

// Возвращает список статусов отправителя п/п на перечисление в бюджет
//
// Возвращаемое значение:
//  СписокЗначений - в котором создаются элементы с возможными значениями статуса отправителя
//
Функция СтатусыПлательщика(Период = Неопределено) Экспорт
	
	Статусы = Новый Соответствие; // Ключ - код, Значение - представление; используем соответствие, чтобы проще описывать изменения в версиях классификатора
	
	// Старые правила
	
	Статусы.Вставить("01", "01 - налогоплательщик (плательщик сборов) - юридическое лицо"); // АПК:1297
	Статусы.Вставить("02", "02 - налоговый агент"); // АПК:1297
	Статусы.Вставить("03",
		"03 - организация федеральной почтовой связи, составившая распоряжение по каждому платежу физического лица"); // АПК:1297
	Статусы.Вставить("04", "04 - налоговый орган"); // АПК:1297
	Статусы.Вставить("05", "05 - территориальные органы Федеральной службы судебных приставов"); // АПК:1297
	Статусы.Вставить("06", "06 - участник внешнеэкономической деятельности - юридическое лицо"); // АПК:1297
	Статусы.Вставить("07", "07 - таможенный орган"); // АПК:1297
	
	Если ДействуетПриказ2017_58н(Период) Тогда
		Статусы.Вставить("08",
			"08 - юридическое лицо, индивидуальный предприниматель, уплачивающий иные платежи (за исключением налогов, сборов, страховых взносов и иных платежей, администрируемых налоговыми органами)"); // АПК:1297
	Иначе
		Статусы.Вставить("08",
			"08 - плательщик - юридическое лицо, индивидуальный предприниматель уплачивающий иные платежи"); // АПК:1297
	КонецЕсли;
	
	Если Не ДействуетПриказ2020_199н_Отложенный(Период) Тогда
		Статусы.Вставить("09",
			"09 - налогоплательщик (плательщик сборов, страховых взносов и иных платежей, администрируемых налоговыми органами) - индивидуальный предприниматель"); // АПК:1297
		Статусы.Вставить("10",
			"10 - налогоплательщик (плательщик сборов, страховых взносов и иных платежей, администрируемых налоговыми органами) - нотариус, занимающийся частной практикой"); // АПК:1297
		Статусы.Вставить("11",
			"11 - налогоплательщик (плательщик сборов, страховых взносов и иных платежей, администрируемых налоговыми органами) - адвокат, учредивший адвокатский кабинет"); // АПК:1297
		Статусы.Вставить("12",
			"12 - налогоплательщик (плательщик сборов, страховых взносов и иных платежей, администрируемых налоговыми органами) - глава крестьянского (фермерского) хозяйства"); // АПК:1297
	КонецЕсли;
	
	Статусы.Вставить("13",
		"13 - налогоплательщик (плательщик сборов, за совершение налоговыми органами юридически значимых действий, страховых взносов и иных платежей, администрируемых налоговыми органами) - физическое лицо"); // АПК:1297
	
	Если Не ДействуетПриказ2017_58н(Период) Тогда
		Статусы.Вставить("14",
			"14 - налогоплательщик, производящий выплаты физическим лицам"); // АПК:1297
	КонецЕсли;
	
	Статусы.Вставить("15",
		"15 - кредитная организация (филиал кредитной организации), платежный агент, организация федеральной почтовой связи, составившие платежное поручение на общую сумму с реестром"); // АПК:1297
	Статусы.Вставить("16",
		"16 - участник внешнеэкономической деятельности - физическое лицо"); // АПК:1297
	Статусы.Вставить("17", "17 - участник внешнеэкономической деятельности - индивидуальный предприниматель"); // АПК:1297
	Статусы.Вставить("18",
		"18 - плательщик таможенных платежей, не являющийся декларантом, на которого законодательством Российской Федерации возложена обязанность по уплате таможенных платежей"); // АПК:1297
	Статусы.Вставить("19",
		"19 - организации, переводящие средства, удержанные из заработной платы на основании исполнительного документа"); // АПК:1297
	Статусы.Вставить("20",
		"20 - кредитная организация (филиал кредитной организации), платежный агент, составившие распоряжение по каждому платежу физического лица"); // АПК:1297
	Статусы.Вставить("21", "21 - ответственный участник консолидированной группы налогоплательщиков"); // АПК:1297
	Статусы.Вставить("22", "22 - участник консолидированной группы налогоплательщиков"); // АПК:1297
	
	Если ДействуетПриказ2017_58н(Период) Тогда
		Статусы.Вставить("23", "23 - Фонд социального страхования Российской Федерации"); // АПК:1297
	Иначе
		Статусы.Вставить("23", "23 - органы контроля за уплатой страховых взносов"); // АПК:1297
	КонецЕсли;
	
	Статусы.Вставить("24",
		"24 - физическое лицо, осуществляющее перевод денежных средств в уплату сборов, страховых взносов, администрируемых ФСС, и иных платежей"); // АПК:1297
	Статусы.Вставить("25",
		"25 - банки - гаранты, составившие распоряжение о переводе денежных средств в бюджетную систему Российской Федерации за плательщика суммы налога на добавленную стоимость, излишне полученной им (зачтенной ему) в результате возмещения налога на добавленную стоимость в заявительном порядке, а также по уплате акцизов, исчисленных по операциям реализации подакцизных товаров за пределы территории Российской Федерации, и акцизов в размере авансового платежа акцизов по алкогольной и (или) подакцизной спиртосодержащей продукции"); // АПК:1297
	Статусы.Вставить("26",
		"26 - учредители (участники) должника, собственники имущества должника - унитарного предприятия или третьи лица, составившие распоряжение на погашение задолженности по обязательным платежам, включенным в реестр требований кредиторов, в ходе процедур, применяемых в деле о банкротстве"); // АПК:1297
	
	Если ДействуетПриказ2017_58н_Отложенный(Период) Тогда
		Статусы.Вставить("27",
			"27 - кредитные организации составившие распоряжение о переводе денежных средств, перечисленных из бюджетной системы РФ, не зачисленных получателю и подлежащих возврату в бюджетную систему РФ"); // АПК:1297
		Статусы.Вставить("28",
			"28 - участник внешнеэкономической деятельности - получатель международного почтового отправления"); // АПК:1297
	КонецЕсли;
	
	Если ДействуетПриказ2020_199н_Отложенный(Период) Тогда
		Статусы.Вставить("29", "29 - Политическая партия, избирательное объединение, зарегистрированный кандидат"); // АПК:1297
		Статусы.Вставить("30", "30 - Иностранное лицо, не состоящее на учете в налоговых органах РФ (при уплате платежей, администрируемых таможенными органами)"); // АПК:1297
	КонецЕсли;
	
	Если ДействуетИзменениеСтатусаПоИсполнительномуЛистуВБюджет(Период) Тогда
		Статусы.Вставить("31", "31 – физ.лицо, юр.лицо, ИП, осуществляющие перевод денежных средств в счет погашения задолженности по исполнительному производству");
	КонецЕсли;
	
	Возврат УпаковатьСоответствиеВСписокЗначений(Статусы);
	
КонецФункции


Функция ПериодичностьГод() Экспорт
	
	Возврат "ГД";
	
КонецФункции

Функция ПериодичностьПолугодие() Экспорт
	
	Возврат "ПЛ";
	
КонецФункции

Функция ПериодичностьКвартал() Экспорт
	
	Возврат "КВ";
	
КонецФункции

Функция ПериодичностьМесяц() Экспорт
	
	Возврат "МС";
	
КонецФункции

Функция ПлатежПоКонкретнойДате() Экспорт
	
	Возврат "-"; // Важно, чтобы отличалось от незаполненного значения
	
КонецФункции

Функция НалоговыйПериод(Период, Знач Периодичность, Знач Год = Неопределено, Знач НомерПериода = Неопределено) Экспорт
	
	Если Периодичность = НезаполненноеЗначение()
		ИЛИ ВидыНалоговыхПериодов().НайтиПоЗначению(Периодичность) = Неопределено Тогда
		
		Возврат НезаполненноеЗначение();
		
	ИначеЕсли Периодичность = ПлатежПоКонкретнойДате() Тогда
		
		Возврат ПреобразоватьДатуКСтроке(Период);
		
	КонецЕсли;
	
	// Для остальных нужен Год и НомерПериода
	Если (НомерПериода = Неопределено ИЛИ Год = Неопределено)
		И НЕ ЗначениеЗаполнено(Период) Тогда
		Возврат НезаполненноеЗначение();
	КонецЕсли;
	
	Если Год = Неопределено Тогда
		Год          = Год(Период);
	КонецЕсли;
	
	Если НомерПериода = Неопределено Тогда
		НомерПериода = 0;
		
		Если Периодичность = ПериодичностьКвартал() Тогда
			НомерПериода = (2 + Месяц(НачалоКвартала(Период))) / 3;
		ИначеЕсли Периодичность = ПериодичностьМесяц() Тогда
			НомерПериода = Месяц(Период);
		ИначеЕсли Периодичность = ПериодичностьПолугодие() Тогда
			Если Месяц(Период) <= 6 Тогда
				НомерПериода = 1;
			Иначе
				НомерПериода = 2;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Периодичность
		+ "." + Формат(НомерПериода, "ЧЦ=2; ЧН=; ЧВН=")
		+ "." + Формат(Год, "ЧЦ=4; ЧГ=");
	
КонецФункции

Функция ПреобразоватьДатуКСтроке(Дата) Экспорт
	
	Если ТипЗнч(Дата) = Тип("Дата") И ЗначениеЗаполнено(Дата) Тогда
		Возврат Формат(Дата, "ДФ=dd.MM.yyyy");
	Иначе
		Возврат НезаполненноеЗначение();
	КонецЕсли;
	
КонецФункции

Функция МаксимальноеЗначениеПоПериодичности(Периодичность)
	
	Результат = Неопределено;
	Если Периодичность = ПериодичностьМесяц() Тогда
		Результат = 12;
	ИначеЕсли Периодичность = ПериодичностьКвартал() Тогда
		Результат = 4;
	ИначеЕсли Периодичность = ПериодичностьПолугодие() Тогда
		Результат = 2;
	ИначеЕсли Периодичность = ПериодичностьГод() Тогда
		Результат = 1;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеНалоговогоПериода(НалоговыйПериод) Экспорт
	
	ОписаниеПериода = РазобратьНалоговыйПериод(НалоговыйПериод);
	
	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить("Год",          Формат(ОписаниеПериода.Год,  "ЧГ=0"));
	ПараметрыТекста.Вставить("НомерПериода", ОписаниеПериода.НомерПериода);
	
	Если ОписаниеПериода.Периодичность = ПлатежПоКонкретнойДате() Тогда
		Шаблон = НСтр("ru = 'по сроку уплаты [Дата]'");
		ПараметрыТекста.Вставить("Дата", Формат(ОписаниеПериода.Дата, "ДФ=dd.MM.yyyy"));
	ИначеЕсли ОписаниеПериода.Периодичность = ПериодичностьГод() Тогда
		Шаблон = НСтр("ru = 'за [Год] год'");
	ИначеЕсли ОписаниеПериода.Периодичность = ПериодичностьПолугодие() Тогда
		Шаблон = НСтр("ru = 'за [НомерПериода] полугодие [Год] года'");
	ИначеЕсли ОписаниеПериода.Периодичность = ПериодичностьКвартал() Тогда
		Шаблон = НСтр("ru = 'за [НомерПериода] квартал [Год] года'");
	ИначеЕсли ОписаниеПериода.Периодичность = ПериодичностьМесяц() Тогда
		Шаблон = НСтр("ru = 'за [ИмяМесяца] [Год] года'");
		ПараметрыТекста.Вставить("ИмяМесяца", НРег(Формат(ОписаниеПериода.Дата, "ДФ=MMMM")));
	Иначе
		Шаблон = "";
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ПараметрыТекста);
	
КонецФункции

Функция ДатаНачалаНалоговогоПериода(Периодичность, Год, НомерПериода)
	
	Если Год = 0 Тогда
		Возврат Дата(1, 1, 1);
	ИначеЕсли НомерПериода = 0 Тогда
		Возврат Дата(Год, 1, 1);
	ИначеЕсли Периодичность = ПериодичностьМесяц() Тогда
		Возврат Дата(Год, НомерПериода, 1);
	ИначеЕсли Периодичность = ПериодичностьКвартал() Тогда
		Возврат Дата(Год, НомерПериода * 3 - 2, 1);
	ИначеЕсли Периодичность = ПериодичностьПолугодие() Тогда
		Возврат Дата(Год, НомерПериода * 6 - 5, 1);
	Иначе
		Возврат Дата(Год, 1, 1);
	КонецЕсли;
	
КонецФункции

Функция РазобратьНалоговыйПериод(Знач НалоговыйПериод) Экспорт
	
	ОписаниеПериода = Новый Структура;
	ОписаниеПериода.Вставить("Периодичность", НезаполненноеЗначение());
	ОписаниеПериода.Вставить("Год",           0);
	ОписаниеПериода.Вставить("НомерПериода",  0);
	ОписаниеПериода.Вставить("Дата",          '0001-01-01');
	
	// Реквизит 107 заполняется налоговым периодом, который имеет 10 знаков, 
	// восемь из которых имеют смысловое значение, а два являются разделительными знаками и заполняются точками (".")
	
	Если СтрДлина(НалоговыйПериод) <> 10 Тогда
		Возврат ОписаниеПериода;
	КонецЕсли;
	
	ЧастиПериода = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НалоговыйПериод, ".", Ложь);
	Если ЧастиПериода.Количество() <> 3 Тогда
		Возврат ОписаниеПериода;
	КонецЕсли;
	
	// Предусмотрены два варианта:
	// 1. Первые два знака налогового периода предназначены для определения периодичности уплаты
	// 2. Форматом "день.месяц.год" указывается конкретная дата (например: "05.09.2003")
	
	Если СтрДлина(ЧастиПериода[0]) <> 2 Тогда
		Возврат ОписаниеПериода;
	КонецЕсли;
	
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЧастиПериода[1])
		ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЧастиПериода[2]) Тогда
		Возврат ОписаниеПериода;
	КонецЕсли;
	
	Периодичность = ЧастиПериода[0];
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Периодичность) Тогда
		Периодичность = ПлатежПоКонкретнойДате();
	ИначеЕсли ВидыНалоговыхПериодов().НайтиПоЗначению(Периодичность) = Неопределено Тогда
		Возврат ОписаниеПериода;
	КонецЕсли;
	
	Если Периодичность = ПлатежПоКонкретнойДате() Тогда
		Попытка
			Значение = Дата(ЧастиПериода[2], ЧастиПериода[1], ЧастиПериода[0]);
		Исключение
			Значение = Неопределено;
		КонецПопытки;
		Если Значение = Неопределено Тогда
			Возврат ОписаниеПериода;
		Иначе
			ОписаниеПериода.Дата = Значение;
			ОписаниеПериода.Год  = Год(Значение);
		КонецЕсли;
	Иначе
		Попытка
			НомерПериода = Число(ЧастиПериода[1]);
			Год          = Число(ЧастиПериода[2]);
		Исключение
			НомерПериода = 0;
			Год          = 0;
		КонецПопытки;
		Если Год = 0 Тогда
			Возврат ОписаниеПериода;
		Иначе
			МаксимальноеЗначениеПоПериодичности = МаксимальноеЗначениеПоПериодичности(Периодичность);
			Если МаксимальноеЗначениеПоПериодичности = Неопределено ИЛИ НомерПериода > МаксимальноеЗначениеПоПериодичности Тогда
				Возврат ОписаниеПериода;
			КонецЕсли;
			
			ОписаниеПериода.НомерПериода = НомерПериода;
			ОписаниеПериода.Год          = Год;
			ОписаниеПериода.Дата         = ДатаНачалаНалоговогоПериода(Периодичность, Год, НомерПериода);
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеПериода.Периодичность = Периодичность;
	Возврат ОписаниеПериода;
	
КонецФункции

// Возвращает список вариантов налоговых периодов
//
// Возвращаемое значение:
//  СписокЗначений - в котором создаются элементы с вариантами налоговых периодов
//
Функция ВидыНалоговыхПериодов() Экспорт
	
	// Первые два знака налогового периода предназначены для определения периодичности уплаты
	
	Периоды = Новый СписокЗначений;
	Периоды.Добавить(ПериодичностьМесяц(),     "МС - месячный платеж");
	Периоды.Добавить(ПериодичностьКвартал(),   "КВ - квартальный платеж");
	Периоды.Добавить(ПериодичностьПолугодие(), "ПЛ - полугодовой платеж");
	Периоды.Добавить(ПериодичностьГод(),       "ГД - годовой платеж"); 
	Периоды.Добавить(ПлатежПоКонкретнойДате(), "Платеж по конкретной дате");
	Периоды.Добавить(НезаполненноеЗначение(),  "0 - значение не указывается");
	
	Возврат Периоды;
	
КонецФункции

// Основания платежа - реквизит 106

Функция ОснованияПлатежа(ВидПеречисления, Период = Неопределено) Экспорт
	
	ОснованияПлатежа = Новый СписокЗначений;
		
	Если ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.НалоговыйПлатеж") Тогда
		ОснованияПлатежа = ОснованияНалоговогоПлатежа(Период);
	ИначеЕсли ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ТаможенныйПлатеж") Тогда
		ОснованияПлатежа = ОснованияТаможенногоПлатежа(Период);
	Иначе
		ОснованияПлатежа.Добавить(НезаполненноеЗначение(), НСтр("ru = '0 - значение не заполняется'"));
	КонецЕсли;
	
	Возврат ОснованияПлатежа;
	
КонецФункции

Функция ОснованияНалоговогоПлатежа(Период = Неопределено) Экспорт
	
	Основания = Новый СписокЗначений;
	
	Основания.Добавить("ТП", "ТП - платежи текущего года"); // АПК:1297
	
	Если ДействуетПриказ2020_199н_Отложенный(Период) Тогда
		Основания.Добавить("ЗД",
			"ЗД - погашение задолженности по истекшим налоговым периодам, в том числе добровольное"); // АПК:1297
	Иначе
		Основания.Добавить("ЗД", "ЗД - добровольное погашение задолженности по истекшим периодам"); // АПК:1297
		Основания.Добавить("ТР", "ТР - погашение задолженности по требованию налогового органа об уплате налогов (сборов)"); // АПК:1297
		Основания.Добавить("АП", "АП - погашение задолженности по акту проверки"); // АПК:1297
		Основания.Добавить("АР", "АР - погашение задолженности по исполнительному документу"); // АПК:1297
		Основания.Добавить("БФ",
			"БФ - текущие платежи физических лиц - клиента банка (владельца счета), уплачиваемые со своего банковского счета"); // АПК:1297
		Основания.Добавить("ПР", "ПР - погашение задолженности, приостановленной к взысканию"); // АПК:1297
	КонецЕсли;
	
	Основания.Добавить("РС", "РС - погашение рассроченной задолженности"); // АПК:1297
	Основания.Добавить("ОТ", "ОТ - погашение отсроченной задолженности"); // АПК:1297
	// АПК:1297-выкл
	Основания.Добавить("РТ", "РТ - погашение реструктурируемой задолженности"); // АПК:1297
	// АПК:1297-вкл
	Если ДействуетПриказ107н(Период) Тогда
		Основания.Добавить("ИН", "ИН - погашение инвестиционного налогового кредита"); // АПК:1297
		Основания.Добавить("ПБ", "ПБ - погашение должником задолженности в ходе процедур, применяемых в деле о банкротстве"); // АПК:1297
		Основания.Добавить("ТЛ",
			"ТЛ - погашение учредителем (участником) должника, собственником имущества должника - унитарного предприятия или третьим лицом задолженности в ходе процедур, применяемых в деле о банкротстве"); // АПК:1297
		Основания.Добавить("ЗТ", "ЗТ - погашение текущей задолженности в ходе процедур, применяемых в деле о банкротстве"); // АПК:1297
	Иначе
		Основания.Добавить("ВУ", "ВУ - погашение отсроченной задолженности в связи с введением внешнего управления"); // АПК:1297
	КонецЕсли;
	
	Основания.Добавить(НезаполненноеЗначение(), "0 - невозможно указать конкретное значение"); // АПК:1297
	
	Возврат Основания;
	
КонецФункции

Функция ОснованияТаможенногоПлатежа(Период = Неопределено)
	
	Основания = Новый СписокЗначений;
	
	Если Период = Неопределено Тогда
		Период = ТекущаяДата(); // АПК:143
	КонецЕсли;
	
	Если ДействуетПриказ107н(Период)
		И Не ДействуетПриказ2020_199н_Отложенный(Период) Тогда
		Основания.Добавить("ДЕ", "ДЕ - декларация на товары"); // АПК:1297
	ИначеЕсли Период < НачалоДействияПриказа107н() Тогда
		Основания.Добавить("ДЕ", "ДЕ - таможенная декларация"); // АПК:1297
	КонецЕсли;
	
	Если ДействуетПриказ2017_58н_Отложенный(Период)
		И Не ДействуетПриказ2020_199н_Отложенный(Период) Тогда
		Основания.Добавить("ПД", "ПД - пассажирская таможенная декларация"); // АПК:1297
	КонецЕсли;
	
	Если Не ДействуетПриказ2020_199н_Отложенный(Период) Тогда
		Основания.Добавить("ПО", "ПО - таможенный приходный ордер"); // АПК:1297
	КонецЕсли;
	
	Основания.Добавить("БД", "БД - документы финансово-хозяйственной деятельности таможенных органов"); // АПК:1297
	
	Если ДействуетПриказ2017_58н_Отложенный(Период) Тогда
		Основания.Добавить("КВ", "КВ - квитанция получателя международного почтового отправления"); // АПК:1297
	ИначеЕсли Период < НачалоДействияПриказа107н() Тогда
		Основания.Добавить("КВ", "КВ - постановление-квитанция (при уплате штрафа)"); // АПК:1297
	КонецЕсли;
	
	Если ДействуетПриказ107н(Период)
		И Не ДействуетПриказ2020_199н_Отложенный(Период) Тогда
		Основания.Добавить("КТ",
			"КТ - корректировка таможенной стоимости, таможенных платежей или декларации на товары"); // АПК:1297
	ИначеЕсли Период < НачалоДействияПриказа107н() Тогда
		Основания.Добавить("КТ", "КТ - форма корректировки таможенной стоимости и таможенных платежей"); // АПК:1297
	КонецЕсли;
	
	Основания.Добавить("ПК", "ПК - таможенный приходный ордер"); // АПК:1297
	
	Если ДействуетПриказ2020_199н_Отложенный(Период) Тогда
		Основания.Добавить("КЭ",
			"КЭ - квитанция физического лица - получателя товаров, перемещаемых в качестве экспресс-грузов"); // АПК:1297
		Основания.Добавить("УВ",
			"УВ - уведомление о не уплаченных в установленный срок суммах таможенных платежей в соответствии со статьями 26-28 Федерального закона № 289-ФЗ"); // АПК:1297
		Основания.Добавить("ИЛ", "ИЛ - исполнительный лист"); // АПК:1297
		Основания.Добавить("ПБ", "ПБ - поручение таможенного органа на бесспорное взыскание"); // АПК:1297
		Основания.Добавить("ТГ", "ТГ - требование об уплате денежных средств гарантирующим объединением (ассоциацией)"); // АПК:1297
		Основания.Добавить("ТБ",
			"ТБ - требование об уплате суммы по банковской гарантии или договору поручительства, если уплата денежных средств производится по банковской гарантии"); // АПК:1297
		Основания.Добавить("ТД",
			"ТД - требование об уплате суммы по банковской гарантии или договору поручительства, если уплата денежных средств производится по договору поручительства"); // АПК:1297
		Основания.Добавить("ПВ",
			"ПВ - постановление о взыскании таможенных платежей, специальных, антидемпинговых, компенсационных пошлин, процентов и пени за счет имущества"); // АПК:1297
	Иначе
		Основания.Добавить("ИД", "ИД - исполнительный документ"); // АПК:1297
		Основания.Добавить("ИП", "ИП - инкассовое поручение"); // АПК:1297
		Основания.Добавить("ТУ", "ТУ - требование об уплате таможенных платежей"); // АПК:1297
		Основания.Добавить("КП", "КП - соглашение о взаимодействии при уплате крупными плательщиками суммарных платежей в централизованном порядке"); // АПК:1297
		Основания.Добавить("ДК", "ДК - декларация на товары, платежи по которой уплачиваются плательщиками таможенных платежей в соответствии со статьями 114, 115, 116 Федерального закона N 311-ФЗ с использованием электронных терминалов, платежных терминалов и банкоматов"); // АПК:1297
		Основания.Добавить("КК", "КК - корректировка декларации на товары, платежи по которой уплачиваются плательщиками таможенных платежей в соответствии со статьями 114, 115, 116 Федерального закона N 311-ФЗ с использованием электронных терминалов, платежных терминалов и банкоматов"); // АПК:1297
		Основания.Добавить("ТК", "ТК - требование об уплате таможенных платежей, платежи по которому уплачиваются плательщиками таможенных платежей в соответствии со статьями 114, 115, 116 Федерального закона N 311-ФЗ с использованием электронных терминалов, платежных терминалов и банкоматов"); // АПК:1297
	КонецЕсли;
	
	Основания.Добавить("ИН", "ИН - документ инкассации"); // АПК:1297
	
	Основания.Добавить(ИныеСлучаи(), "00 - иные случаи"); // АПК:1297
	Основания.Добавить(НезаполненноеЗначение(), "0 - невозможно указать конкретное значение"); // АПК:1297
	
	Возврат Основания;
	
КонецФункции

Функция ИныеСлучаи()
	
	Возврат "00";
	
КонецФункции

// Типы платежа - реквизит 110

Функция ТипыПлатежа(ВидПеречисления, Период = Неопределено) Экспорт
	
	ТипыПлатежа = Новый СписокЗначений;
	
	Если Период >= НачалоДействияПриказа126н() Тогда
		Возврат ТипыПлатежа;
	КонецЕсли;
	
	Если ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.НалоговыйПлатеж") Тогда
		ТипыПлатежа = ТипыНалоговогоПлатежа(Период);
	ИначеЕсли ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ТаможенныйПлатеж") Тогда
		ТипыПлатежа = ТипыТаможенногоПлатежа(Период);
	Иначе
		ТипыПлатежа.Добавить(НезаполненноеЗначение(), НСтр("ru = '0 - значение не заполняется'"));
	КонецЕсли;
	
	Возврат ТипыПлатежа;
	
КонецФункции

Функция ТипыНалоговогоПлатежа(Период = Неопределено)
	
	ТипыПлатежа = Новый СписокЗначений;
	
	Если ДействуетПриказ107н(Период) Тогда
		ТипыПлатежа.Добавить(НезаполненноеЗначение(), "0 - все, кроме пени и процентов"); // АПК:1297
		ТипыПлатежа.Добавить(ТипПлатежаПени(), "ПЕ - уплата пени"); // АПК:1297
		ТипыПлатежа.Добавить("ПЦ", "ПЦ - уплата процентов"); // АПК:1297
	Иначе
		ТипыПлатежа.Добавить("НС", "НС - уплата налога или сбора"); // АПК:1297
		ТипыПлатежа.Добавить("ПЛ", "ПЛ - уплата платежа"); // АПК:1297
		ТипыПлатежа.Добавить("ГП", "ГП - уплата пошлины"); // АПК:1297
		ТипыПлатежа.Добавить("ВЗ", "ВЗ - уплата взноса"); // АПК:1297
		ТипыПлатежа.Добавить(ТипПлатежаАванс(), "АВ - уплата аванса или предоплата (в том числе декадные платежи)"); // АПК:1297
		ТипыПлатежа.Добавить(ТипПлатежаПени(), "ПЕ - уплата пени"); // АПК:1297
		ТипыПлатежа.Добавить("ПЦ", "ПЦ - уплата процентов"); // АПК:1297
		ТипыПлатежа.Добавить(ТипПлатежаНалоговыйШтраф(), "СА - налоговые санкции, установленные Налоговым кодексом РФ"); // АПК:1297
		ТипыПлатежа.Добавить(ТипПлатежаАдминистративныйШтраф(), "АШ - административные штрафы"); // АПК:1297
		ТипыПлатежа.Добавить(ТипПлатежаИнойШтраф(), "ИШ - иные штрафы, установленные соответствующими нормативными актами"); // АПК:1297
		ТипыПлатежа.Добавить(НезаполненноеЗначение(), "0 - невозможно указать конкретное значение"); // АПК:1297
	КонецЕсли;
	
	Возврат ТипыПлатежа;
	
КонецФункции

Функция ТипыТаможенногоПлатежа(Период = Неопределено)
	
	ТипыПлатежа = Новый СписокЗначений;
	
	Если ДействуетПриказ107н(Период) Тогда
		
		ТипыПлатежа.Добавить(НезаполненноеЗначение(), "0 - остальные случаи"); // АПК:1297
		
		ТипыПлатежа.Добавить("ШТ", "ШТ - уплата штрафа"); // АПК:1297
		ТипыПлатежа.Добавить("ЗД", "ЗД - уплата в счет погашения задолженности"); // АПК:1297
		ТипыПлатежа.Добавить(ТипПлатежаПени(), "ПЕ - уплата пени"); // АПК:1297
	Иначе
		ТипыПлатежа.Добавить("ТП", "ТП - текущий платеж"); // АПК:1297
		
		ТипыПлатежа.Добавить("ШТ", "ШТ - уплата штрафа"); // АПК:1297
		ТипыПлатежа.Добавить("ЗД", "ЗД - уплата в счет погашения задолженности"); // АПК:1297
		ТипыПлатежа.Добавить(ТипПлатежаПени(), "ПЕ - уплата пени"); // АПК:1297
		
		ТипыПлатежа.Добавить(НезаполненноеЗначение(), "0 - невозможно указать конкретное значение"); // АПК:1297
	КонецЕсли;
	
	Возврат ТипыПлатежа;
	
КонецФункции

Функция ТипПлатежаАванс() Экспорт
	
	Возврат "АВ";
	
КонецФункции

Функция ТипПлатежаПени() Экспорт
	
	Возврат "ПЕ";
	
КонецФункции

Функция ЭтоТипПлатежаШтраф(ТипПлатежа) Экспорт
	
	Возврат ТипПлатежа = ТипПлатежаНалоговыйШтраф()
		ИЛИ ТипПлатежа = ТипПлатежаАдминистративныйШтраф()
		ИЛИ ТипПлатежа = ТипПлатежаИнойШтраф();
	
КонецФункции

Функция ТипПлатежаНалоговыйШтраф()
	
	Возврат "СА";
	
КонецФункции

Функция ТипПлатежаАдминистративныйШтраф()
	
	Возврат "АШ";
	
КонецФункции

Функция ТипПлатежаИнойШтраф()
	
	Возврат "ИШ";
	
КонецФункции

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

Функция ОставитьВСтрокеТолькоЦифры(ИсходнаяСтрока) Экспорт
	
	СтрокаРезультат = "";
	
	Для а = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		ТекущийСимвол = Сред(ИсходнаяСтрока, а, 1);
		КодСимвола = КодСимвола(ТекущийСимвол);
		Если КодСимвола >= 48 И КодСимвола <= 57 Тогда
			СтрокаРезультат = СтрокаРезультат + ТекущийСимвол;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрокаРезультат;
	
КонецФункции

Функция УпаковатьСоответствиеВСписокЗначений(Соответствие)
	
	Список = Новый СписокЗначений;
	Для каждого КлючИЗначение Из Соответствие Цикл
		Список.Добавить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	Список.СортироватьПоЗначению();
	
	Возврат Список;
	
КонецФункции
#КонецОбласти

// ПроцедурыДляновогоКлиентБанка
#Область СлужебныеПроцедурыИФункции 

#Область ИдентификацияПлательщика

Функция НаименованиеПлательщикаИндивидуальногоПредпринимателя(ФамилияИмяОтчество, АдресРегистрации, Период = Неопределено) Экспорт
	
	Если ДействуетПриказ107н(Период) Тогда
		// П.4 Приложения 1 к Приказу Минфина 107н:
		// Фамилия имя отчество "(ИП)" "//"Адрес регистрации"//"
		Шаблон = "%1 (ИП) //%2//";
	Иначе
		// П.2 Приложения 1 к Приказу Минфина 106н:
		// Фамилия имя отчество "(ИП)"
		Шаблон = "%1 (ИП)";
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ФамилияИмяОтчество, АдресРегистрации);
	
КонецФункции

// Для платежных поручений на уплату налога определяет по тексту назначения платежа
// данные об уплате налога за третье лицо.
//
// Подп. 5 п. 13 приложения N 2 к приказу 107Н
// в реквизите "Назначение платежа" указывают:
// - ИНН и КПП лица (для ... физических лиц только ИНН), осуществляющего платеж
//   Данная информация указывается первой в реквизите "Назначение платежа".
//   Для разделения информации об ИНН и КПП используется знак "//".
//   Для выделения информации о плательщике от иной информации, указываемой в реквизите "Назначение платежа",
//   используется знак "//";
// - наименование налогоплательщика, чья обязанность исполняется ...
//   Для выделения данной информации от иной информации, указываемой в реквизите "Назначение платежа", используется знак
//   "//";
//
// Понимаем, что речь идет о таком формате:
// "<ИНН>//<КПП>//<НаименованиеТретьегоЛица>//<Прочая информация>" - для юридического лица
// "<ИНН>//<НаименованиеТретьегоЛица>//<Прочая информация>" - для физического лица лица
//
// См. также Документы.ПлатежноеПоручение.ТекстНазначенияПлатежа()
//
// Параметры:
//  НазначениеПлатежа	 - Строка - текст назначения платежа
// 
// Возвращаемое значение:
//  Структура - см. тело функции - сведения об уплате налогов третьих лиц
//  Неопределено - текст назначения платежа не содержит сведений об уплате налогов третьих лиц
//
Функция РазобратьНазначениеПлатежаУплатыНалоговТретьихЛиц(НазначениеПлатежа) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИНН",                       "");
	Результат.Вставить("ЮридическоеФизическоеЛицо", ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ПустаяСсылка"));
	Результат.Вставить("КПП",                       "");
	Результат.Вставить("НаименованиеТретьегоЛица",  "");
	
	// Здесь не следует использовать СтрРазделить, потому что она не умеет работать с разделителями, состоящими из
	// нескольких символов
	ЭлементыНазначенияПлатежа = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НазначениеПлатежа, "//", Ложь, Истина);
	Если ЭлементыНазначенияПлатежа.Количество() < 2 Тогда
		// Минимальный состав - ИНН, НаименованиеТретьегоЛица
		Возврат Неопределено;
	КонецЕсли;
	
	// Первым элементом должен идти ИНН. Он может содержать слова-разделители и КПП
	СловоИНН = ЭлементыНазначенияПлатежа[0];
	Если ПустаяСтрока(СловоИНН) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Если ИдентификационныеНомераНалогоплательщиков.ЭтоИННЮридическогоЛица(СловоИНН) Тогда
		ЭтоЮрЛицо = Истина;
	ИначеЕсли ИдентификационныеНомераНалогоплательщиков.ЭтоИННФизическогоЛица(СловоИНН) Тогда
		ЭтоЮрЛицо = Ложь;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
	РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(СловоИНН, ЭтоЮрЛицо);
	Если Не РезультатПроверки.СоответствуетТребованиям Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат.ИНН = СловоИНН;
	Если ЭтоЮрЛицо Тогда
		Результат.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо");
	Иначе
		Результат.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
	КонецЕсли;
		
	// Если ИНН соответствует юридическому лицу, то следующим элементом должен идти КПП
	Если Результат.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
		ИндексНаименования = 1;
	Иначе
		ИндексНаименования = 2;
		
		СловоКПП = ЭлементыНазначенияПлатежа[1];
				
		Если Не ИдентификационныеНомераНалогоплательщиков.КППКорректен(СловоКПП) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямКПП(СловоКПП, Истина, Ложь);
			
		Если Не РезультатПроверки.СоответствуетТребованиям Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Результат.КПП = СловоКПП;
		
	КонецЕсли;
	
	// Следующий элемент - наименование третьего лица
	Если ЭлементыНазначенияПлатежа.ВГраница() < ИндексНаименования Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат.НаименованиеТретьегоЛица = ЭлементыНазначенияПлатежа[ИндексНаименования];
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция ИсправитьЗначенияРеквизитов(Знач ИмяИзмененногоРеквизита, Реквизиты, Контекст, УстановитьЗначенияПоУмолчанию = Ложь, Изменения = Неопределено) Экспорт
	
	ИнициализироватьИзменения(Изменения);
	
	ЗависимыеРеквизиты = ВсеЗависимыеРеквизиты(ИмяИзмененногоРеквизита);
	
	Для каждого ИмяРеквизита Из ЗависимыеРеквизиты Цикл
		
		ДопустимыеЗначения = ДопустимыеЗначенияРеквизита(
			ИмяРеквизита,
			Реквизиты,
			Контекст);
		
		ПривестиЗначение(
			Реквизиты,
			Изменения,
			ИмяРеквизита,
			ДопустимыеЗначения,
			УстановитьЗначенияПоУмолчанию);
		
	КонецЦикла;
	
	Возврат Изменения;
	
КонецФункции

Функция НовыйРеквизитыПлатежаВБюджет(Основание = Неопределено) Экспорт
	
	Возврат НовыйСтруктура(РеквизитыПлатежаВБюджет(), Основание);
	
КонецФункции

// Возвращает длину кода нормативно правового акта
//
// Возвращаемое значение:
//	Число - количество символов кода нормативно правового акта
//
Функция ДлинаКодаНормативноПравовогоАкта() Экспорт
	
	Возврат 4;
	
КонецФункции

Функция НовыйКонтекстПлатежногоДокумента() Экспорт
	
	СвойстваКонтекста = Новый Структура;
	СвойстваКонтекста.Вставить("Период",                             '0001-01-01');
	СвойстваКонтекста.Вставить("ПериодПлатежа",                      '0001-01-01');
	СвойстваКонтекста.Вставить("Организация",                        ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	СвойстваКонтекста.Вставить("Получатель",                         ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
	СвойстваКонтекста.Вставить("Налогоплательщик",                   ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
	СвойстваКонтекста.Вставить("СчетПолучателя",                     ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка"));
	СвойстваКонтекста.Вставить("Налог",                              ПредопределенноеЗначение("Справочник.ВидыНалогов.ПустаяСсылка"));
	СвойстваКонтекста.Вставить("ВидНалоговогоОбязательства",         ПредопределенноеЗначение("Перечисление.ВидыПлатежейВГосБюджет.ПустаяСсылка"));
	СвойстваКонтекста.Вставить("РегистрацияВНалоговомОргане",        ПредопределенноеЗначение("Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка"));
	СвойстваКонтекста.Вставить("ВидГосударственногоОргана",          ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.ПустаяСсылка"));
	СвойстваКонтекста.Вставить("ВидПеречисления",                    ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ПустаяСсылка"));
	СвойстваКонтекста.Вставить("ПеречислениеВБюджет",                Ложь);
	СвойстваКонтекста.Вставить("ПеречислениеПоИсполнительномуЛисту", Ложь);
	СвойстваКонтекста.Вставить("РедактироватьНазначенияПлатежа",     Ложь);
	
	Возврат СвойстваКонтекста;
	
КонецФункции

// Приводит код территории для платежей в бюджет к длине, установленной приказом Минфина 58н.
Процедура ПривестиКодТерриторииКФорматуПриказа58н(КодТерритории, Период = Неопределено) Экспорт
	
	Если Период = Неопределено Тогда
		Период = ТекущаяДата();
	КонецЕсли;
	
	Если НЕ ПрименяетсяОКТМО8Символов(Период) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрДлина(СокрЛП(КодТерритории)) > 8 Тогда
		КодТерритории = СокрП(Лев(КодТерритории, 8));
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйКонтекст(Основание = Неопределено) Экспорт
	
	Контекст = НовыйСтруктура(ПоляКонтекста(), Основание);
	
	Контекст.Период                             = '0001-01-01';
	Контекст.ПериодПлатежа                      = '0001-01-01';
	Контекст.ПоказательПериода                  = "";
	Контекст.НазначениеПлатежа                  = "";
	Контекст.ОчередностьПлатежа                 = 0;
	Контекст.ВидПеречисления                    = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ПустаяСсылка");
	Контекст.ПеречислениеПоИсполнительномуЛисту = Ложь;
	Контекст.ПеречислениеВБюджет                = Ложь;
	// Типы значений остальных свойств могут быть разными в разных решениях
	
	Возврат Контекст;
	
КонецФункции

// Проверяет корректность переданного идентификатора платежа
//
// Параметры:
//		ИдентификаторПлатежа    - Строка - проверяемый идентификатор платежа
//		ВозможноЭтоПлатежНеВФедеральныйОрган - Булево - признак платежа в федеральный орган государственной власти
//		ЭтоСредстваПоступающиеВоВременноеРаспоряжение - Булево - признак платежа на счета казначейства для средств,
//	поступающих во временное распоряжение
//		Период - Дата - период платежа
//
// Возвращаемое значение:
//	Строка - описание обнаруженных ошибок в идентификторе
//
Функция ПроверитьУИН(ИдентификаторПлатежа,
		ВозможноЭтоПлатежНеВФедеральныйОрган,
		ЭтоСредстваПоступающиеВоВременноеРаспоряжение,
		Период) Экспорт
	
	УИН = СокрЛП(ИдентификаторПлатежа);
	
	Если НЕ РеквизитЗаполнен(УИН) Тогда
		Возврат "";
	КонецЕсли;
	
	ДлинаИдентификатора = СтрДлина(УИН);
	ТолькоЦифрыВУИН = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(УИН);
	
	Если ДлинаИдентификатора = МинимальнаяДлинаУИН() Тогда
		Если ВозможноЭтоПлатежНеВФедеральныйОрган Тогда
			ШаблонТекста = НСтр("ru = 'Уникальный идентификатор начисления должен состоять из %1 символов, а не из %2.'");
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонТекста, МаксимальнаяДлинаУИН(), ДлинаИдентификатора);
		КонецЕсли;
	ИначеЕсли ДлинаИдентификатора <> МаксимальнаяДлинаУИН() Тогда
		ШаблонТекста = НСтр("ru = 'Уникальный идентификатор начисления должен состоять из %1 или %2 символов, а не из %3.'");
		РезультатПроверки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекста, МинимальнаяДлинаУИН(), МаксимальнаяДлинаУИН(), ДлинаИдентификатора);
		Если ДлинаИдентификатора <> ДлинаКодаНормативноПравовогоАкта() Или Не ТолькоЦифрыВУИН Тогда
			Возврат РезультатПроверки;
		КонецЕсли;
	КонецЕсли;
	
	Если КлиентБанкКлиентСервер.ТолькоНулиВСтроке(УИН) Тогда
		Возврат НСтр("ru = 'Все знаки уникального идентификатора начисления не могут одновременно принимать значение ""0""'");
	КонецЕсли;
	
	Если ТолькоЦифрыВУИН Тогда
		РезультатПроверки = ПроверитьУИНПоФормату1_16_1(УИН);
		
		ВУИНМожетУказыватьсяКодНормативноПравовогоАкта = ДействуетПриказ2020_199н(Период)
			И ЭтоСредстваПоступающиеВоВременноеРаспоряжение;
		УИНСоответствует4ЗнакаПравовогоАкта = ПрекращащеноТребование20ЗнаковКодаПравовогоАктаВУИН(Период)
			И УИНСоответствует4ЗнакаПравовогоАкта(УИН, ДлинаИдентификатора);
		УИНСоответствует20ЗнаковПравовогоАкта = Не ПрекращащеноТребование20ЗнаковКодаПравовогоАктаВУИН(Период)
			И УИНСоответствует20ЗнаковПравовогоАкта(УИН, ДлинаИдентификатора);
		Если ЗначениеЗаполнено(РезультатПроверки) И ВУИНМожетУказыватьсяКодНормативноПравовогоАкта
			И (УИНСоответствует4ЗнакаПравовогоАкта Или УИНСоответствует20ЗнаковПравовогоАкта) Тогда
			РезультатПроверки = "";
		КонецЕсли;
		
	ИначеЕсли ДлинаИдентификатора = МинимальнаяДлинаУИН() Тогда
		РезультатПроверки = ПроверитьУИНПоФормату1_15(УИН);
	Иначе
		РезультатПроверки = НСтр("ru = 'Уникальный идентификатор начисления должен состоять из цифр'");
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Проверяет, что получатель по указанному номеру счета не является федеральным органом государственной власти
//
// Параметры:
//	НомерСчета - Строка - номер банковского счета
//
// Возвращаемое значение:
//	Булево - Истина: не является, Ложь: является
//
Функция АдминистраторНачисленияНеФедеральныйОрганГосударственнойВласти(Знач НомерСчета) Экспорт
	
	Если СтрДлина(СокрП(НомерСчета)) <> 20 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Лев(НомерСчета, 3) = "406";
	
КонецФункции

Функция КодЭлементаДоходаФедеральногоБюджета() Экспорт
	
	// Код вида доходов бюджетов имеет один из следующих кодов элемента доходов:
	// 01 - федеральный бюджет;
	// ...
	
	Возврат "01";
	
КонецФункции

Функция КодЭлементаДоходаРегиональногоБюджета() Экспорт
	
	// Код вида доходов бюджетов имеет один из следующих кодов элемента доходов:
	// ...
	// 02 - бюджет субъекта Российской Федерации;
	// ...
	
	Возврат "02";
	
КонецФункции

Функция КодыЭлементаДоходаМестногоБюджета() Экспорт
	
	// Код вида доходов бюджетов имеет один из следующих кодов элемента доходов:
	// ...
	// 03 - бюджеты внутригородских муниципальных образований городов федерального значения Москвы и Санкт-Петербурга;
	// 04 - бюджет городского округа;
	// 05 - бюджет муниципального района;
	// 10 - бюджет поселения
	// ...
	
	Возврат "03,04,05,10";
	
КонецФункции

Функция ЭтоПлатежВБюджет(РеквизитыПлатежаВБюджет) Экспорт
	
	// Приказ Минфина 107н от 12.11.2013
	Возврат РеквизитыПлатежаВБюджет.Свойство("СтатусСоставителя") 
		И РеквизитЗаполнен(РеквизитыПлатежаВБюджет.СтатусСоставителя);
	
КонецФункции

Функция ЭтоЕдиныйНалоговыйПлатеж(КБК) Экспорт
	
	// ЕНП классифицируется как финансирование дефицита бюджета
	
	КодВидаДоходов = КодВидаДоходов(КБК);
	
	Возврат ПлатежАдминистрируетсяНалоговымиОрганами(КБК)
		И Лев(КодВидаДоходов, 4) = "0106" // Иные источники внутреннего финансирования дефицитов бюджетов
		И Прав(КодВидаДоходов, 1) = "1";  // Операции по управлению остатками средств на единых счетах бюджетов
	
КонецФункции

Функция ЭтоНалоговыеДоходы(КБК) Экспорт
	
	// Выделяем платежи в уплату налогов, взносов и т.п., учитываемого на счетах 68 и 69.
	// Для этого смотрим на код подгруппы доходов (4,5,6 символы КБК).
	
	НалоговыеДоходы = Новый Массив;
	НалоговыеДоходы.Добавить("101"); // налоги на прибыль, доходы;
	НалоговыеДоходы.Добавить("102"); // страховые взносы на обязательное социальное страхование;
	НалоговыеДоходы.Добавить("103"); // налоги на товары (работы, услуги), реализуемые на территории Российской Федерации;
	НалоговыеДоходы.Добавить("104"); // налоги на товары, ввозимые на территорию Российской Федерации;
	НалоговыеДоходы.Добавить("105"); // налоги на совокупный доход;
	НалоговыеДоходы.Добавить("106"); // налоги на имущество;
	НалоговыеДоходы.Добавить("107"); // налоги, сборы и регулярные платежи за пользование природными ресурсами;
	НалоговыеДоходы.Добавить("109"); // задолженность и перерасчеты по отмененным налогам, сборам и иным обязательным платежам;
	НалоговыеДоходы.Добавить("112"); // платежи при пользовании природными ресурсами;
	
	Возврат НалоговыеДоходы.Найти(ПодгруппаДоходов(КБК)) <> Неопределено;
	
КонецФункции

Функция ЭтоКодОКТМО(Знач Код, Комментарий = "", Период = Неопределено) Экспорт
	
	// ОК 033-2013
	
	Код = СокрП(Код);
	
	Если ПустаяСтрока(Код) Тогда
		Комментарий = НСтр("ru = 'Код не указан.'");
		Возврат Ложь;
	КонецЕсли;
	
	Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Код) Тогда
		Комментарий = НСтр("ru = 'Код ОКТМО должен включать только цифры.'");
		Возврат Ложь;
	КонецЕсли;
	
	// ОКТМО состоит из двух разделов, включающих 
	// - муниципальные образования 
	// - и населенные пункты, входящие в состав муниципальных образований.
	//
	// Первый раздел включает 8-значные цифровые коды.
	//
	// Второй раздел включает 11-значные цифровые коды.
	
	ДлинаКода = СтрДлина(Код);
	Если Не РеквизитЗаполнен(Код) И ДействуетПереходНаЕНП(Период) Тогда
		// На пустую строку проверили выше, значит в коде значение "0", что допустимо для уплаты ЕНП.
		Возврат Истина;
	ИначеЕсли ПрименяетсяОКТМО8Символов(Период) Тогда
		Если ДлинаКода <> 8 Тогда
			Комментарий = НСтр("ru = 'Код ОКТМО должен указываться только для муниципального образования и состоять из 8 цифр.'");
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Если ДлинаКода <> 8 И ДлинаКода <> 11 Тогда
			Комментарий = НСтр("ru = 'Код ОКТМО может состоять из 8 или 11 цифр.'");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Знак 3 отведен под признак Р1, указывающий ступень классификации и вид кодируемого объекта. 
	// Признак второй ступени классификации - Р1 (знак 3) имеет значения:
	// 3 - внутригородская территория (внутригородское муниципальное образование) города федерального значения;
	// 5 - муниципальный округ; // Изменение 350/2019 ОКТМО от 27.09.2019
	// 6 - муниципальный район;
	// 7 - городской округ;
	// 9 - внутригородская территория города федерального значения 
	// (данное значение выделено в связи с недостаточностью резервной емкости в рамках признака со значением "3").
	// Кодирование автономных округов, округов осуществляется в рамках соответствующих субъектов Российской Федерации, 
	// признак второй ступени классификации - Р1 (знак 3) для этих объектов имеет значение:
	// 8 - муниципальные образования автономного округа, округа.
	// Если в состав края или области входит два автономных округа, 
	// признак второй ступени классификации - Р1 (знак 3) для второго автономного округа имеет значение:
	// 9 - муниципальные образования автономного округа.
	// Фактически значения "8", "9" на второй ступени классификации идентифицируют автономные округа в составе края или областей.
	// ...
	// Для группировочных позиций коды дополняются справа нулями
	
	Р1 = Сред(Код, 3, 1);
	
	Если Р1 = "0" Или Р1 = "3" Или Р1 = "5" Или Р1 = "6" Или Р1 = "7" Или Р1 = "8" Или Р1 = "9" Тогда
		Возврат Истина;
	Иначе
		Комментарий = НСтр("ru = 'Разряд 3 кода ОКТМО может принимать значения 0, 3, 5, 6, 7, 8 или 9.'");
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает максимальную длину кода УИН
//
// Возвращаемое значение:
//	Число - количество символов УИН
//
Функция МаксимальнаяДлинаУИН() Экспорт
	
	Возврат 25;
	
КонецФункции

Функция УИНСоответствует20ЗнаковПравовогоАкта(УИН, ДлинаИдентификатора)
	
	// Код нормативного правового акта
	// по правилам 1-16 знаки которого принимают значение ноль "0"
	// а с 17 по 20 знаки указывается код нормативного правового акта (например, "00000000000000001234").
	// При этом все знаки уникального идентификатора начисления (кода нормативного правового акта)
	// одновременно не могут принимать значение ноль ("0").
	
	// Проверка на то, что в УИН только цифры и при этом все знаки не принимают значение "0",
	// реализована до вызова этой функции.
	
	Если ДлинаИдентификатора <> МинимальнаяДлинаУИН() Тогда
		// Это не код нормативно правового акта.
		Возврат Ложь;
	КонецЕсли;
	
	НулевыеЦифрыВНачалеКода = Лев(УИН, КоличествоНулейВНачалеКодаНормативноПравовогоАкта());
	Если Не КлиентБанкКлиентСервер.ТолькоНулиВСтроке(НулевыеЦифрыВНачалеКода) Тогда
		// Это не код нормативно правового акта.
		Возврат Ложь;
	КонецЕсли;
	
	// Данные в УИН удовлетворяют требованиям шаблона для кода нормативно правового акта.
	Возврат Истина;
	
КонецФункции

Функция УИНСоответствует4ЗнакаПравовогоАкта(УИН, ДлинаИдентификатора)
	
	// Проверка на то, что в УИН только цифры и при этом все знаки не принимают значение "0",
	// реализована до вызова этой функции.
	
	Если ДлинаИдентификатора <> ДлинаКодаНормативноПравовогоАкта() Тогда
		// Это не код нормативно правового акта.
		Возврат Ложь;
	КонецЕсли;
	
	// Данные в УИН удовлетворяют требованиям шаблона для кода нормативно правового акта.
	Возврат Истина;
	
КонецФункции

Функция КоличествоНулейВНачалеКодаНормативноПравовогоАкта()
	
	Возврат 16;
	
КонецФункции

Функция ПроверитьУИНПоФормату1_15(ИдентификаторПлатежа)
	
	Если СтрДлина(ИдентификаторПлатежа) <> МинимальнаяДлинаУИН() Тогда
		
		ШаблонТекста = НСтр("ru = 'Уникальный идентификатор начисления должен состоять из %1 символов, а не из %2'");
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, МинимальнаяДлинаУИН(), СтрДлина(ИдентификаторПлатежа));
		
	КонецЕсли;
	
	Если Лев(ИдентификаторПлатежа, 1) = "Ъ" Тогда
		// Применяем правила для администратора начислений
		// 1 разряд       - значение «Ъ» - признак администратора начислений
		// 2 - 7 разряды  - уникальный регистрационный код Участника, присваиваемый оператором ГИС ГМП;
		// 8 - 19 разряды - уникальный код, формируемый администратором начислений
		// 20 разряд      - контрольный
		КодУчастника  = Сред(ИдентификаторПлатежа, 2, 6);
		КодНачисления = Сред(ИдентификаторПлатежа, 8, 12);
		
		АлфавитноЦифроваяЧасть = КодУчастника + КодНачисления;
		
	Иначе
		// Применяем правила для главного администратора доходов
		// 1-3  разряды - код главы бюджетной классификации (идентификатор главного администратора) - число
		// 4-19 разряды - уникальный код в рамках главного администратора - буквы и цифры
		// 20 разряд    - контрольный
		КодАдминистратора  = Лев(ИдентификаторПлатежа, 3);
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодАдминистратора) Тогда
			Возврат НСтр("ru = 'Уникальный идентификатор начисления должен начинаться с трех цифр или с символа ""Ъ""'");
		КонецЕсли;
		
		АлфавитноЦифроваяЧасть = Сред(ИдентификаторПлатежа, 4, 16);
		
	КонецЕсли;
	
	// Проверим допустимость символов в алфавитно-цифровой части
	НедопустимыеСимволы = НедопустимыеАлфавитноЦифровыеСимволыУИН(АлфавитноЦифроваяЧасть);
	
	Если НедопустимыеСимволы.Количество() > 0 Тогда
		
		Для Индекс = 0 По НедопустимыеСимволы.ВГраница() Цикл
			НедопустимыеСимволы[Индекс] = "" + НедопустимыеСимволы[Индекс] + "";
		КонецЦикла;
		
		НедопустимыеСимволы = СтрСоединить(НедопустимыеСимволы, ",");
		
		ШаблонТекста = НСтр("ru = 'Уникальный идентификатор начисления не должен содержать символы: %1'");
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, НедопустимыеСимволы);
		
	КонецЕсли;
	
	// Проверим контрольный разряд
	
	КонтрольныйРазряд = Сред(ИдентификаторПлатежа, 20, 1);
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КонтрольныйРазряд) Тогда
		Возврат НСтр("ru = 'В последнем (20-м) знаке уникального идентификатора должно быть число - контрольный разряд'");
	КонецЕсли;
	
	Попытка 
		КонтрольныйРазряд = Число(КонтрольныйРазряд);
	Исключение
		Возврат НСтр("ru = 'В последнем (20-м) знаке уникального идентификатора должно быть число - контрольный разряд'");
	КонецПопытки;
	
	РассчитанныйКонтрольныйРазряд = КонтрольныйРазрядУИН(ИдентификаторПлатежа);
	Если КонтрольныйРазряд <> РассчитанныйКонтрольныйРазряд Тогда
		Возврат НСтр("ru = 'Контрольный разряд уникального идентификатора начисления не совпадает с рассчитанным.'");
	КонецЕсли;
	
	Возврат ""; // Ошибок не выявлено
	
КонецФункции

Функция ПроверитьУИНПоФормату1_16_1(ИдентификаторПлатежа)
	
	// Проверим контрольный разряд
	
	КонтрольныйРазряд = Прав(ИдентификаторПлатежа, 1);
	
	РассчитанныйКонтрольныйРазряд = КонтрольныйРазрядУИН(ИдентификаторПлатежа);
	Если КонтрольныйРазряд <> Формат(РассчитанныйКонтрольныйРазряд, "ЧН=0") Тогда
		Возврат НСтр("ru = 'Контрольный разряд уникального идентификатора начисления не совпадает с рассчитанным.'");
	КонецЕсли;
	
	Возврат ""; // Ошибок не выявлено
	
КонецФункции

Функция КонтрольныйРазрядУИН(ИдентификаторПлатежа, СдвигПоследовательностиВесов = 0)
	
	ПроверяемаяСтрока = Лев(ИдентификаторПлатежа, СтрДлина(ИдентификаторПлатежа) - 1);
	
	НомераСимволов = НомераСимволовДляРасчетаКонтрольногоРазрядаУИН();
	
	СуммаВзвешенныхЗначений = 0;
	
	Для НомерСимвола = 1 По СтрДлина(ПроверяемаяСтрока) Цикл
		
		Символ = Сред(ПроверяемаяСтрока, НомерСимвола, 1);
		
		// Каждому разряду кода, начиная со старшего разряда, присваивается набор весов, соответствующий натуральному ряду
		// чисел от 1 до 10. Если разрядность кода больше 10, то набор весов повторяется;
		Вес = (НомерСимвола + СдвигПоследовательностиВесов) % 10;
		Если Вес = 0 Тогда Вес = 10 КонецЕсли;
		
		// Если вместо цифры в коде присутствует буква, то значение данного разряда принимается равным остатку от деления 
		// порядкового номера буквы в алфавите на 10 (например, для буквы ‘Л’ значение разряда равно 11 mod 10 = 1,
		// а для буквы ‘N’ - равно 35 mod 10 = 5);
		Значение = НомераСимволов[Символ];
		Если Значение = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Значение = Значение % 10;
		
		// Каждая цифра кода умножается на вес разряда и вычисляется сумма полученных произведений;
		СуммаВзвешенныхЗначений = СуммаВзвешенныхЗначений + Значение * Вес;
		
	КонецЦикла;
	
	// Контрольное число для кода представляет собой остаток от деления полученной суммы на модуль «11». 
	КонтрольноеЧисло = СуммаВзвешенныхЗначений % 11;
	
	// Контрольное число должно иметь один разряд, значение которого находится в пределах от 0 до 9;
	// если получается остаток, равный 10, то для обеспечения одноразрядного контрольного числа необходимо провести
	// повторный расчет, применяя вторую последовательность весов, сдвинутую на два разряда влево (3, 4, 5,...).
	// Если в случае повторного расчета остаток от деления вновь сохраняется равным 10, 
	// то значение контрольного числа проставляется равным «0».
	Если КонтрольноеЧисло < 10 Тогда
		Возврат КонтрольноеЧисло;
	ИначеЕсли СдвигПоследовательностиВесов > 0 Тогда
		Возврат 0;
	Иначе
		Возврат КонтрольныйРазрядУИН(ИдентификаторПлатежа, 2);
	КонецЕсли;
	
КонецФункции

// Проверяем, только если передан Период.
Функция ПрименяетсяОКТМО8Символов(Период = Неопределено) Экспорт
	
	Возврат ЗначениеЗаполнено(Период)
		И Период >= НачалоДействияПриказа2017_58н();
	
КонецФункции

Функция НовыйСтруктура(ИменаКлючей, Основание)
	
	Структура = Новый Структура;
	
	Для каждого ИмяКлюча Из ИменаКлючей Цикл
		Если ТипЗнч(ИмяКлюча) = Тип("КлючИЗначение") Тогда
			Структура.Вставить(ИмяКлюча.Ключ);
		Иначе	
			Структура.Вставить(ИмяКлюча);
		КонецЕсли;
	КонецЦикла;
	
	Если Основание <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Структура, Основание);
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

Функция ДопустимыеЗначенияРеквизита(ИмяРеквизита, Реквизиты, Контекст)
	
	Если ИмяРеквизита = "ВидПеречисления" Тогда
		
		Возврат ВидПеречисления(Реквизиты.КБК, Контекст.Период);
		
	ИначеЕсли ИмяРеквизита = "КодТерритории" Тогда
		
		Возврат ДопустимыйКодТерритории(Реквизиты.КодТерритории, Реквизиты.ВидПеречисления, Контекст.НомерСчетаПолучателя,
			Контекст.КодТерриторииПоУмолчанию, Контекст.Период);
		
	ИначеЕсли ИмяРеквизита = "СтатусПлательщика" Тогда
		
		Период = Макс(Контекст.ПериодПлатежа, Контекст.Период);
		Возврат ДопустимыеСтатусыПлательщика(Реквизиты, Контекст.ФизическоеЛицо, Контекст.НалоговыйАгент, Период);
		
	ИначеЕсли ИмяРеквизита = "ТипПлатежа" Тогда
		
		Возврат ДопустимыеТипыПлатежа(Реквизиты, Контекст.Период);
		
	ИначеЕсли ИмяРеквизита = "ОснованиеПлатежа" Тогда
		
		Возврат ДопустимыеОснованияПлатежа(Реквизиты, Контекст.Период);
		
	ИначеЕсли ИмяРеквизита = "НалоговыйПериод" Тогда
		
		Возврат ДопустимыйНалоговыйПериод(Реквизиты, Контекст.Период);
		
	ИначеЕсли ИмяРеквизита = "НомерДокумента" Тогда
		
		Возврат ДопустимыеНомераДокумента(Реквизиты, Контекст.Период);
		
	ИначеЕсли ИмяРеквизита = "ДатаДокумента" Тогда
		
		Возврат ДопустимаяДатаДокумента(Реквизиты, Контекст.Период);
		
	ИначеЕсли ИмяРеквизита = "ПеречислениеПоИсполнительномуЛисту" Тогда
		
		Возврат ДопустимоеЗначенияПризнакаПеречисленияПоИсполнительномуЛисту(Реквизиты, Контекст.ПеречислениеПоИсполнительномуЛисту);
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПрекращащеноТребование20ЗнаковКодаПравовогоАктаВУИН(Период) Экспорт
	
	// Приказ Минфина №199н от 14.09.2020.
	//
	// Настоящий приказ вступает в силу 1 января 2021 г., за исключением:
	//
	// - пункта 2,
	// - подпункта "в" пункта 3,
	// - абзацев девятого-девятнадцатого подпункта "е" пункта 8,
	// - абзацев второго и третьего подпункта "ж" пункта 9,
	// - абзацев второго и третьего подпункта "з" пункта 10,
	// - абзацев второго - четвертого подпункта "б", подпункта "в" пункта 11,
	// - подпункта "л" пункта 12,
	// - пункта 13 изменений,
	// вступающих в силу с 1 июля 2021 г.;
	
	Возврат Период <> Неопределено
		И Период >= '2021-07-01';
	
КонецФункции

Функция ДопустимыеОснованияПлатежа(Реквизиты, Период = Неопределено)
	
	Основания = Новый Массив;
	
	Если Реквизиты.ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.НалоговыйПлатеж") Тогда
		
		Если ЭтоЕдиныйНалоговыйПлатеж(Реквизиты.КБК) Тогда
			Основания.Добавить(НезаполненноеЗначение());
		Иначе
			Основания = ОснованияНалоговогоПлатежа(Период).ВыгрузитьЗначения();
		КонецЕсли;
		
	ИначеЕсли Реквизиты.ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ТаможенныйПлатеж") Тогда
		
		Основания = ОснованияТаможенногоПлатежа(Период).ВыгрузитьЗначения();
		
	Иначе
		
		Основания.Добавить(НезаполненноеЗначение());
		
	КонецЕсли;
	
	Если Реквизиты.ПеречислениеПоИсполнительномуЛисту Тогда
		ДополнитьОснованиямиИсполнительногоЛистаРаботника(Основания, Период);
	КонецЕсли;
	
	Возврат Основания;
	
КонецФункции

Функция ДопустимыеТипыПлатежа(Реквизиты, Период, Комментарий = "") Экспорт
	
	ТипыПлатежа = Новый Массив;
	
	Если Период >= НачалоДействияПриказа126н() Тогда
		Возврат ТипыПлатежа;
	КонецЕсли;
	
	ДатаНовыхПравил = Формат(НачалоДействияПриказа107н(), "ДЛФ=DD"); // Используется в текстах комментариев
	
	Если Реквизиты.ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ТаможенныйПлатеж") Тогда
		
		Если ЭтоКБКПениПроценты(Реквизиты.КБК) Тогда
			ТипыПлатежа.Добавить(ТипПлатежаПени());
			Комментарий = НСтр("ru = 'Для КБК, относящегося к уплате пеней, следует указывать ""ПЕ"".'");
		ИначеЕсли ЭтоКБКШтраф(Реквизиты.КБК) Тогда
			ТипыПлатежа.Добавить("ШТ");
			Комментарий = НСтр("ru = 'Для КБК, относящегося к уплате штрафов, следует указывать ""ШТ"".'");
		ИначеЕсли ДействуетПриказ107н(Период) Тогда
			ТипыПлатежа.Добавить(НезаполненноеЗначение());
			ТипыПлатежа.Добавить("ЗД");
			Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'С %1 для текущих платежей, следует указывать ""0"", задолженности прошлых лет - ""ЗД""'"),
				ДатаНовыхПравил);
		Иначе
			ТипыПлатежа.Добавить("ТП");
			ТипыПлатежа.Добавить("ЗД");
			Комментарий = НСтр("ru = 'Для текущих платежей, следует указывать ""ТП"", задолженности прошлых лет - ""ЗД""'");
		КонецЕсли;
		
	ИначеЕсли Реквизиты.ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.НалоговыйПлатеж") Тогда
		
		Если ЭтоКБКПениПроценты(Реквизиты.КБК) Тогда
			
			ТипыПлатежа.Добавить(ТипПлатежаПени());
			ТипыПлатежа.Добавить("ПЦ");
			
			Комментарий = НСтр("ru = 'Для КБК, относящегося к уплате пеней и процентов, следует указывать ""ПЕ"" или ""ПЦ"".'");
			
		ИначеЕсли ДействуетПриказ107н(Период) Тогда
			
			ТипыПлатежа.Добавить(НезаполненноеЗначение());
			
			Если ВместоВыбранногоТипаПлатежаСледуетУказывать0(Реквизиты.ТипПлатежа, Реквизиты.ВидПеречисления, Период) Тогда
				Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'С %2 в поле ""Тип платежа"" вместо значения ""%1"" следует указывать ""0""'"),
					Реквизиты.ТипПлатежа,
					ДатаНовыхПравил);
			Иначе
				Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'С %1 для всех платежей, кроме пеней и процентов, следует указывать ""0"".'"),
					ДатаНовыхПравил);
			КонецЕсли;
			
		ИначеЕсли ЭтоКБКШтраф(Реквизиты.КБК) Тогда
			
			ТипыПлатежа.Добавить(ТипПлатежаНалоговыйШтраф());
			ТипыПлатежа.Добавить(ТипПлатежаАдминистративныйШтраф());
			Комментарий = НСтр("ru = 'Для КБК, относящегося к уплате штрафов, следует указывать ""СА"" или ""АШ"".'");
			
		Иначе
		
			// Не контролируем - все допустимые
			Для каждого ТипПлатежа Из ТипыНалоговогоПлатежа(Период) Цикл
				ТипыПлатежа.Добавить(ТипПлатежа.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		ТипыПлатежа.Добавить(НезаполненноеЗначение());
		Комментарий = КомментарийТеперьУказывается0(Ложь);
		
	КонецЕсли;
	
	Возврат ТипыПлатежа;
	
КонецФункции

Функция ДопустимаяДатаДокумента(Реквизиты, Период, Комментарий = "")
	
	Правило = ПравилоУказанияДатыДокумента(Реквизиты, Период);
	Комментарий = Правило.Комментарий;
	
	Если Правило.Назначение = Неопределено Тогда
		
		// Любое значение подойдет - в том числе и уже выбранное
		Возврат Реквизиты.ДатаДокумента;
		
	ИначеЕсли Правило.Значение = Неопределено Тогда
		
		// Подойдут многие значения (но не все)
		Если Правило.Назначение = "Дата" Тогда
			// Подойдет любая дата
			Если РеквизитЗаполнен(Реквизиты.ДатаДокумента) 
				И ЗначениеЗаполнено(ПреобразоватьСтрокуКДате(Реквизиты.ДатаДокумента)) Тогда
				Возврат Реквизиты.ДатаДокумента;
			Иначе
				Возврат ПреобразоватьДатуКСтроке(Период);
			КонецЕсли;
		ИначеЕсли РеквизитЗаполнен(Реквизиты.ДатаДокумента) Тогда
			// Подойдет любое значение, кроме тривиального
			Возврат Реквизиты.ДатаДокумента;
		Иначе
			// Дата по умолчанию
			Возврат ПреобразоватьДатуКСтроке(Период);
		КонецЕсли;
		
	ИначеЕсли Правило.Назначение = "Дата" И Правило.Значение = НезаполненноеЗначение() Тогда
		Если РеквизитЗаполнен(Реквизиты.ДатаДокумента)
			И ЗначениеЗаполнено(ПреобразоватьСтрокуКДате(Реквизиты.ДатаДокумента)) Тогда
			Возврат Реквизиты.ДатаДокумента;
		Иначе
			Возврат Правило.Значение;
		КонецЕсли;
	ИначеЕсли Правило.Назначение = "Дата" И Правило.Значение = ИныеСлучаи() Тогда
		Возврат Правило.Значение;
	КонецЕсли;
	
	Возврат Правило.Значение;
	
КонецФункции

Функция ПреобразоватьСтрокуКДате(Строка) Экспорт
	
	Дата = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка, ".", Ложь);
	Если Дата.Количество() <> 3 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Индекс = 0 По 2 Цикл
		
		ЧастьДаты = Дата[Индекс];
		
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЧастьДаты) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Попытка
			Дата[Индекс] = Число(Дата[Индекс]);
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		
	КонецЦикла;
	
	Попытка
		Дата = Дата(Дата[2], Дата[1], Дата[0]);
	Исключение
		Дата = Неопределено;
	КонецПопытки;
	
	Возврат Дата;
	
КонецФункции

Процедура ИнициализироватьИзменения(Изменения)
	
	Если ТипЗнч(Изменения) <> Тип("Структура") Тогда
		Изменения = Новый Структура;
	КонецЕсли;
	
КонецПроцедуры

Функция ВсеЗависимыеРеквизиты(ИмяРеквизита = Неопределено) Экспорт
	
	ЗависимыеРеквизиты = Новый Массив;
	
	ЗаполнитьЗависимыеРеквизитыРекурсивно(ЗависимыеРеквизиты, ИмяРеквизита);
	
	Возврат ЗависимыеРеквизиты;
	
КонецФункции

Процедура ПривестиЗначение(Реквизиты, Изменения, ИмяРеквизита, ДопустимыеЗначения, УстановитьЗначениеПоУмолчанию)
	
	Значение            = Реквизиты[ИмяРеквизита];
	ЗначениеДопустимо   = ЗначениеВСпискеДопустимых(Значение, ДопустимыеЗначения);
	ЗначениеПоУмолчанию = ЗначениеПоУмолчанию(ДопустимыеЗначения);
	
	Если ЗначениеДопустимо И УстановитьЗначениеПоУмолчанию Тогда
		ЗначениеДопустимо = (Значение = ЗначениеПоУмолчанию);
	КонецЕсли;
	
	Если ЗначениеДопустимо Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты.Вставить(ИмяРеквизита, ЗначениеПоУмолчанию);
	Изменения.Вставить(ИмяРеквизита, ЗначениеПоУмолчанию);
	
КонецПроцедуры

Функция ПоляКонтекста()
	
	ПоляКонтекста = Новый Массив;
	ПоляКонтекста.Добавить("Период");
	ПоляКонтекста.Добавить("ПериодПлатежа");
	ПоляКонтекста.Добавить("КБК");
	ПоляКонтекста.Добавить("КодТерритории");
	ПоляКонтекста.Добавить("КодТерриторииПоУмолчанию");
	ПоляКонтекста.Добавить("ФизическоеЛицо");
	ПоляКонтекста.Добавить("НомерСчетаПолучателя");
	ПоляКонтекста.Добавить("ПоказательПериода");
	ПоляКонтекста.Добавить("ПредставлениеНалоговогоПериода");
	ПоляКонтекста.Добавить("НазначениеПлатежа");
	ПоляКонтекста.Добавить("ОчередностьПлатежа");
	ПоляКонтекста.Добавить("ВидПеречисления");
	ПоляКонтекста.Добавить("НалоговыйАгент");
	ПоляКонтекста.Добавить("ВидНалога");
	ПоляКонтекста.Добавить("ПорядокУплатыНалога");
	ПоляКонтекста.Добавить("ПеречислениеПоИсполнительномуЛисту");
	ПоляКонтекста.Добавить("ПеречислениеВБюджет");
	
	Возврат ПоляКонтекста;
	
КонецФункции

Функция НедопустимыеАлфавитноЦифровыеСимволыУИН(ПроверяемаяСтрока)
	
	НедопустимыеСимволы = Новый Массив;
	
	ДопустимыеСимволы = НомераСимволовДляРасчетаКонтрольногоРазрядаУИН();
	
	Для НомерСимвола = 1 По СтрДлина(ПроверяемаяСтрока) Цикл
		Символ = Сред(ПроверяемаяСтрока, НомерСимвола, 1);
		Если ДопустимыеСимволы[Символ] = Неопределено 
			И НедопустимыеСимволы.Найти(Символ) = Неопределено Тогда
			НедопустимыеСимволы.Добавить(Символ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НедопустимыеСимволы;
	
КонецФункции

Функция НомераСимволовДляРасчетаКонтрольногоРазрядаУИН()
	
	НомераСимволов = Новый Соответствие;
	
	НомераСимволов.Вставить("А", 1);  // Кириллица
	НомераСимволов.Вставить("а", 1);  // Кириллица строчная
	НомераСимволов.Вставить("A", 1);  // Латиница
	НомераСимволов.Вставить("a", 1);  // Латиница строчная
	НомераСимволов.Вставить("Б", 2);  // Кириллица
	НомераСимволов.Вставить("б", 2);  // Кириллица строчная
	НомераСимволов.Вставить("В", 3);  // Кириллица
	НомераСимволов.Вставить("в", 3);  // Кириллица строчная
	НомераСимволов.Вставить("B", 3);  // Латиница
	НомераСимволов.Вставить("b", 3);  // Латиница строчная
	НомераСимволов.Вставить("Г", 4);  // Кириллица
	НомераСимволов.Вставить("г", 4);  // Кириллица строчная
	НомераСимволов.Вставить("Д", 5);  // Кириллица
	НомераСимволов.Вставить("д", 5);  // Кириллица строчная
	НомераСимволов.Вставить("Е", 6);  // Кириллица
	НомераСимволов.Вставить("е", 6);  // Кириллица строчная
	НомераСимволов.Вставить("E", 6);  // Латиница
	НомераСимволов.Вставить("e", 6);  // Латиница строчная
	НомераСимволов.Вставить("Ж", 7);  // Кириллица
	НомераСимволов.Вставить("ж", 7);  // Кириллица строчная
	НомераСимволов.Вставить("З", 8);  // Кириллица
	НомераСимволов.Вставить("з", 8);  // Кириллица строчная
	НомераСимволов.Вставить("И", 9);  // Кириллица
	НомераСимволов.Вставить("и", 9);  // Кириллица строчная
	НомераСимволов.Вставить("К", 10); // Кириллица
	НомераСимволов.Вставить("к", 10); // Кириллица строчная
	НомераСимволов.Вставить("K", 10); // Латиница
	НомераСимволов.Вставить("k", 10); // Латиница строчная
	НомераСимволов.Вставить("Л", 11); // Кириллица
	НомераСимволов.Вставить("л", 11); // Кириллица строчная
	НомераСимволов.Вставить("М", 12); // Кириллица
	НомераСимволов.Вставить("м", 12); // Кириллица строчная
	НомераСимволов.Вставить("M", 12); // Латиница
	НомераСимволов.Вставить("m", 12); // Латиница строчная
	НомераСимволов.Вставить("Н", 13); // Кириллица
	НомераСимволов.Вставить("н", 13); // Кириллица строчная
	НомераСимволов.Вставить("H", 13); // Латиница
	НомераСимволов.Вставить("h", 13); // Латиница строчная
	НомераСимволов.Вставить("О", 14); // Кириллица
	НомераСимволов.Вставить("о", 14); // Кириллица строчная
	НомераСимволов.Вставить("O", 14); // Латиница
	НомераСимволов.Вставить("o", 14); // Латиница строчная
	НомераСимволов.Вставить("П", 15); // Кириллица
	НомераСимволов.Вставить("п", 15); // Кириллица строчная
	НомераСимволов.Вставить("Р", 16); // Кириллица
	НомераСимволов.Вставить("р", 16); // Кириллица строчная
	НомераСимволов.Вставить("P", 16); // Латиница
	НомераСимволов.Вставить("p", 16); // Латиница строчная
	НомераСимволов.Вставить("С", 17); // Кириллица
	НомераСимволов.Вставить("с", 17); // Кириллица строчная
	НомераСимволов.Вставить("C", 17); // Латиница
	НомераСимволов.Вставить("c", 17); // Латиница строчная
	НомераСимволов.Вставить("Т", 18); // Кириллица
	НомераСимволов.Вставить("т", 18); // Кириллица строчная
	НомераСимволов.Вставить("T", 18); // Латиница
	НомераСимволов.Вставить("t", 18); // Латиница строчная
	НомераСимволов.Вставить("У", 19); // Кириллица
	НомераСимволов.Вставить("у", 19); // Кириллица строчная
	НомераСимволов.Вставить("Y", 19); // Латиница
	НомераСимволов.Вставить("y", 19); // Латиница строчная
	НомераСимволов.Вставить("Ф", 20); // Кириллица
	НомераСимволов.Вставить("ф", 20); // Кириллица строчная
	НомераСимволов.Вставить("Х", 21); // Кириллица
	НомераСимволов.Вставить("х", 21); // Кириллица строчная
	НомераСимволов.Вставить("X", 21); // Латиница
	НомераСимволов.Вставить("x", 21); // Латиница строчная
	НомераСимволов.Вставить("Ц", 22); // Кириллица
	НомераСимволов.Вставить("ц", 22); // Кириллица строчная
	НомераСимволов.Вставить("Ч", 23); // Кириллица
	НомераСимволов.Вставить("ч", 23); // Кириллица строчная
	НомераСимволов.Вставить("Ш", 24); // Кириллица
	НомераСимволов.Вставить("ш", 24); // Кириллица строчная
	НомераСимволов.Вставить("Щ", 25); // Кириллица
	НомераСимволов.Вставить("щ", 25); // Кириллица строчная
	НомераСимволов.Вставить("Э", 26); // Кириллица
	НомераСимволов.Вставить("э", 26); // Кириллица строчная
	НомераСимволов.Вставить("Ю", 27); // Кириллица
	НомераСимволов.Вставить("ю", 27); // Кириллица строчная
	НомераСимволов.Вставить("Я", 28); // Кириллица
	НомераСимволов.Вставить("я", 28); // Кириллица строчная
	НомераСимволов.Вставить("D", 29); // Латиница
	НомераСимволов.Вставить("d", 29); // Латиница строчная
	НомераСимволов.Вставить("F", 30); // Латиница
	НомераСимволов.Вставить("f", 30); // Латиница строчная
	НомераСимволов.Вставить("G", 31); // Латиница
	НомераСимволов.Вставить("g", 31); // Латиница строчная
	НомераСимволов.Вставить("I", 32); // Латиница
	НомераСимволов.Вставить("i", 32); // Латиница строчная
	НомераСимволов.Вставить("Ъ", 33); // Кириллица
	НомераСимволов.Вставить("ъ", 33); // Кириллица строчная
	НомераСимволов.Вставить("J", 33); // Латиница
	НомераСимволов.Вставить("j", 33); // Латиница строчная
	НомераСимволов.Вставить("L", 34); // Латиница
	НомераСимволов.Вставить("l", 34); // Латиница строчная
	НомераСимволов.Вставить("N", 35); // Латиница
	НомераСимволов.Вставить("n", 35); // Латиница строчная
	НомераСимволов.Вставить("Ы", 36); // Кириллица
	НомераСимволов.Вставить("ы", 36); // Кириллица строчная
	НомераСимволов.Вставить("Q", 36); // Латиница
	НомераСимволов.Вставить("q", 36); // Латиница строчня
	НомераСимволов.Вставить("R", 37); // Латиница
	НомераСимволов.Вставить("r", 37); // Латиница строчная
	НомераСимволов.Вставить("S", 38); // Латиница
	НомераСимволов.Вставить("s", 38); // Латиница строчная
	НомераСимволов.Вставить("U", 39); // Латиница
	НомераСимволов.Вставить("u", 39); // Латиница строчная
	НомераСимволов.Вставить("V", 40); // Латиница
	НомераСимволов.Вставить("v", 40); // Латиница строчная
	НомераСимволов.Вставить("W", 41); // Латиница
	НомераСимволов.Вставить("w", 41); // Латиница строчная
	НомераСимволов.Вставить("Ь", 42); // Кириллица
	НомераСимволов.Вставить("ь", 42); // Кириллица строчная
	НомераСимволов.Вставить("Z", 42); // Латиница
	НомераСимволов.Вставить("z", 42); // Латиница строчная
	
	Для Цифра = 0 По 9 Цикл
		НомераСимволов.Вставить(Формат(Цифра, "ЧН=0"), Цифра);
	КонецЦикла;
	
	Возврат НомераСимволов;
	
КонецФункции

// Статусы плательщика - реквизит 101

Функция ДопустимыеСтатусыПлательщика(Реквизиты, ФизическоеЛицо = Ложь, НалоговыйАгент = Неопределено, Период = Неопределено)
	
	Статусы = Новый Массив;
	
	Если Реквизиты.ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.НалоговыйПлатеж") Тогда
		
		Если ЭтоЕдиныйНалоговыйПлатеж(Реквизиты.КБК) Тогда
			Если ФизическоеЛицо Тогда
				Если ДействуетПриказ2020_199н_Отложенный(Период) Тогда
					Статусы.Добавить(СтатусНалогоплательщикаФизЛицо());
				Иначе
					Статусы.Добавить(СтатусПлательщикаНалоговИСборовИП());
				КонецЕсли;
			Иначе
				Статусы.Добавить(СтатусПлательщикаНалоговИСборовЮрЛицо());
			КонецЕсли;
		Иначе
			Если НалоговыйАгент <> Неопределено И НалоговыйАгент Тогда
				Статусы.Добавить(СтатусПлательщикаНалоговыйАгент());
			ИначеЕсли ФизическоеЛицо Тогда
				Если ДействуетПриказ2020_199н_Отложенный(Период) Тогда
					Статусы.Добавить(СтатусНалогоплательщикаФизЛицо());
				Иначе
					Статусы.Добавить(СтатусПлательщикаНалоговИСборовИП());
				КонецЕсли;
			Иначе
				Статусы.Добавить(СтатусПлательщикаНалоговИСборовЮрЛицо());
			КонецЕсли;
			
			Если НалоговыйАгент = Неопределено Тогда
				Статусы.Добавить(СтатусПлательщикаНалоговыйАгент());
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Реквизиты.ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ТаможенныйПлатеж") Тогда
		
		Если ФизическоеЛицо Тогда
			Статусы.Добавить("17"); // участник внешнеэкономической деятельности - индивидуальный предприниматель
		Иначе
			Статусы.Добавить("06"); // участник внешнеэкономической деятельности - юридическое лицо
		КонецЕсли;
		
		Статусы.Добавить("18"); // плательщик таможенных платежей, не являющийся декларантом, на которого законодательством Российской Федерации возложена обязанность по уплате таможенных платежей
		
		Если ДействуетПриказ2017_58н(Период) Тогда
			Статусы.Добавить("28"); // участник внешнеэкономической деятельности - получатель международного почтового отправления
		КонецЕсли;
		
	Иначе
		ЭтоПеречислениеПоИсполнительномуЛисту = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Реквизиты,
			"ПеречислениеПоИсполнительномуЛисту", Ложь);
		Если Не ЭтоПеречислениеПоИсполнительномуЛисту Тогда
			Статусы.Добавить(СтатусПлательщикаИныеПлатежи());
			
			Если НЕ ДействуетПриказ107н(Период) Тогда
				Статусы.Добавить(СтатусПлательщикаНалоговИСборовЮрЛицо());
				Статусы.Добавить(СтатусПлательщикаПроизводящегоВыплатыФизЛицам()); // п.п. 1 п.1 ст. 235 Налогового кодекса Российской Федерации
			КонецЕсли;
			
			Если ФизическоеЛицо Тогда
				Статусы.Добавить(СтатусПлательщикаФизЛицаИныеПлатежи());
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Статусы.Добавить(СтатусПлательщикаПоИсполнительномуЛисту());
	
	Возврат Статусы;
	
КонецФункции

Функция СтатусПлательщикаНалоговИСборовЮрЛицо() Экспорт
	
	Возврат "01";
	
КонецФункции

Функция СтатусПлательщикаНалоговыйАгент() Экспорт
	
	Возврат "02";
	
КонецФункции

Функция СтатусПлательщикаИныеПлатежи() Экспорт
	
	Возврат "08";
	
КонецФункции

Функция СтатусПлательщикаНалоговИСборовИП() Экспорт
	
	Возврат "09";
	
КонецФункции

Функция СтатусНалогоплательщикаФизЛицо() Экспорт
	
	Возврат "13";
	
КонецФункции

Функция СтатусПлательщикаПроизводящегоВыплатыФизЛицам() Экспорт
	
	Возврат "14";
	
КонецФункции

Функция СтатусПлательщикаПоИсполнительномуЛисту() Экспорт
	
	Возврат "19";
	
КонецФункции

Функция СтатусПлательщикаФизЛицаИныеПлатежи() Экспорт
	
	Возврат "24";
	
КонецФункции

Функция СтатусПлательщикаПоИсполнительномуЛистуВБюджет() Экспорт
	
	Возврат "31";
	
КонецФункции

Функция ДопустимыйНалоговыйПериод(Реквизиты, Период, Комментарий = "")
	
	Правило = ПравилоУказанияНалоговогоПериода(Реквизиты, Период);
	Комментарий = Правило.Комментарий;
	
	Если Правило.Значение = НезаполненноеЗначение() Тогда
		Возврат НезаполненноеЗначение();
	КонецЕсли;
	
	Если Правило.Значение = Неопределено Тогда
		Возврат Реквизиты.НалоговыйПериод;
	КонецЕсли;
	
	ОписаниеПериода = РазобратьНалоговыйПериод(Реквизиты.НалоговыйПериод);
	
	ПривестиЭлементыНалоговогоПериода(
		ОписаниеПериода.Периодичность,
		ОписаниеПериода.Год,
		ОписаниеПериода.НомерПериода,
		ОписаниеПериода.Дата,
		Период);
	
	Если Правило.Значение = "Номер" Тогда
		Если НЕ РеквизитЗаполнен(Реквизиты.НалоговыйПериод) Тогда
			// Незаполненное значение не допускается
			Комментарий = НСтр("ru = 'Код таможенного органа не указан'");
			Возврат "";
		ИначеЕсли ОписаниеПериода.Периодичность = НезаполненноеЗначение() Тогда
			// Это может быть номер
			Возврат Реквизиты.НалоговыйПериод;
		Иначе
			// Это не должен быть период
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	
	ПереданныйНалоговыйПериод = Реквизиты.НалоговыйПериод;
	
	НалоговыйПериод = НалоговыйПериод(
		ОписаниеПериода.Дата,
		ОписаниеПериода.Периодичность,
		ОписаниеПериода.Год,
		ОписаниеПериода.НомерПериода);
	
	Если НалоговыйПериод <> ПереданныйНалоговыйПериод Тогда
		Комментарий = НСтр("ru = 'Указано недопустимое значение реквизита ""Налоговый период""'");
	КонецЕсли;
		
	Если Правило.Значение = "Дата" Тогда
		
		Если ОписаниеПериода.Периодичность <> ПлатежПоКонкретнойДате() Тогда
			
			Если ЗначениеЗаполнено(ОписаниеПериода.Дата) Тогда
				ДатаПоУмолчанию = ОписаниеПериода.Дата;
			Иначе
				ДатаПоУмолчанию = Период;
			КонецЕсли;
			
			НалоговыйПериод = НалоговыйПериод(
				Период,
				ПлатежПоКонкретнойДате(),
				Год(Период),
				Месяц(Период));
			
		КонецЕсли;
		
	ИначеЕсли Правило.Значение = "Период" Тогда
		
		Если ОписаниеПериода.Периодичность = НезаполненноеЗначение() Тогда
			НалоговыйПериод = НалоговыйПериод(
				Период,
				ПериодичностьМесяц(),
				Год(Период),
				Месяц(Период));
		ИначеЕсли ОписаниеПериода.Периодичность = ПлатежПоКонкретнойДате() Тогда
			// По умолчанию - период.
			// Но допускается и конкретная дата.
			НалоговыйПериод = Новый Массив;
			НалоговыйПериод.Добавить(НалоговыйПериод(
				Период,
				ПериодичностьМесяц(),
				Год(Период),
				Месяц(Период)));
			НалоговыйПериод.Добавить(НалоговыйПериод(
				ОписаниеПериода.Дата,
				ОписаниеПериода.Периодичность));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НалоговыйПериод;
	
КонецФункции

Функция ДопустимыеНомераДокумента(Реквизиты, Период, Комментарий = "")
	
	ДопустимыеНомера = Новый Массив;
	
	Если ЭтоЕдиныйНалоговыйПлатеж(Реквизиты.КБК) Тогда
		ДопустимыеНомера.Добавить(НезаполненноеЗначение());
	Иначе
		Правило = ПравилоУказанияНомераДокумента(Реквизиты, Период);
		Комментарий = Правило.Комментарий;
		
		Если Правило.Значение = Неопределено Тогда
			ДопустимыеНомера.Добавить(""); // Пользователь введет номер 
		Иначе
			ДопустимыеНомера.Добавить(Правило.Значение);
		КонецЕсли;
		
		Если Правило.Назначение = Неопределено Тогда
			// Любое значение подойдет
			ДопустимыеНомера.Добавить(Реквизиты.НомерДокумента);
		ИначеЕсли ЭтоДобровольноеПогашениеЗадолженности(Реквизиты.ОснованиеПлатежа)
			И ДействуетПриказ2020_199н_Отложенный(Период) Тогда
			Префикс = Лев(Реквизиты.НомерДокумента, ДлинаПрефиксаНомераДокументаПоОснованиюПлатежаЗД());
			ВидыРазрешенныхПрефиксов = ВидыПрефиксовНомераДокументаПоОснованиюПлатежаЗД();
			Если Реквизиты.НомерДокумента = НезаполненноеЗначение()
				Или ВидыРазрешенныхПрефиксов.Найти(Префикс) <> Неопределено Тогда
				ДопустимыеНомера.Добавить(Реквизиты.НомерДокумента);
			КонецЕсли;
		ИначеЕсли Правило.Значение = Неопределено И РеквизитЗаполнен(Реквизиты.НомерДокумента) Тогда
			// Подойдет любое значение, кроме тривиального
			ДопустимыеНомера.Добавить(Реквизиты.НомерДокумента);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДопустимыеНомера;
	
КонецФункции

Функция ДопустимоеЗначенияПризнакаПеречисленияПоИсполнительномуЛисту(Реквизиты, ПеречислениеПоИсполнительномуЛисту = Ложь)
	
	ДопустимыеЗначения = Новый Массив;
	Если ПеречислениеПоИсполнительномуЛисту Тогда
		ДопустимыеЗначения.Добавить(Истина);
	Иначе
		ДопустимыеЗначения.Добавить(Ложь);
	КонецЕсли;
	
	Возврат ДопустимыеЗначения;
	
КонецФункции

Процедура ДополнитьОснованиямиИсполнительногоЛистаРаботника(ОснованияПлатежа, Период = Неопределено) Экспорт
	
	Если ДействуетПриказ2020_199н_Отложенный(Период) Тогда
		КодОснования = "ЗД";
		Если ТипЗнч(ОснованияПлатежа) = Тип("Массив") Тогда
			Если ОснованияПлатежа.Найти(КодОснования) = Неопределено Тогда
				ОснованияПлатежа.Добавить(КодОснования);
			КонецЕсли;
		Иначе
			Если ОснованияПлатежа.НайтиПоЗначению(КодОснования) = Неопределено Тогда
				ОснованияПлатежа.Добавить(КодОснования,
					"ЗД - погашение задолженности по истекшим налоговым периодам, в том числе добровольное");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ВместоВыбранногоТипаПлатежаСледуетУказывать0(ТипПлатежа, ВидПеречисления, Период)
	
	// Справедливо для всех отмененных кодов
	
	Если НЕ ДействуетПриказ107н(Период) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Классификатор = ТипыПлатежа(ВидПеречисления, Период);
	Если Классификатор.НайтиПоЗначению(ТипПлатежа) <> Неопределено Тогда
		// Этот код не отменен
		Возврат Ложь;
	КонецЕсли;
	
	ПериодСтарыхПравил = НачалоДействияПриказа107н() - 1;
	Классификатор = ТипыПлатежа(ВидПеречисления, ПериодСтарыхПравил);
	
	Возврат Классификатор.НайтиПоЗначению(ТипПлатежа) <> Неопределено;
	
КонецФункции

Функция КомментарийТеперьУказывается0(ВключаяТаможенныеПлатежи)
	
	Если ВключаяТаможенныеПлатежи Тогда
		ШаблонТекста = НСтр("ru = 'C %1 для всех платежей, кроме администрируемых налоговыми органами, указывается ""0""'");
	Иначе
		ШаблонТекста = НСтр("ru = 'C %1 для страховых взносов и иных платежей указывается ""0""'");
	КонецЕсли;
	
	ДатаНовыхПравил = Формат(НачалоДействияПриказа107н(), "ДЛФ=DD");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, ДатаНовыхПравил);
	
КонецФункции

Функция КомментарийТеперьУказывается00()
	
	ШаблонТекста = НСтр("ru = 'C %1 для платежей, администрируемых таможенными органами, указывается ""00""'");
	
	ДатаНовыхПравил = Формат(НачалоОтложенногоДействияПриказа2020_199н_Отложенный(), "ДЛФ=DD");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, ДатаНовыхПравил);
	
КонецФункции

Функция ПравилоУказанияДатыДокумента(Реквизиты, Период) Экспорт
	
	Правило = Новый Структура;
	Правило.Вставить("Подсказка",   "");
	Правило.Вставить("Комментарий", "");
	Правило.Вставить("Назначение",  Неопределено); // "Дата", "НеИспользуется" или Неопределено
	Правило.Вставить("Значение",    Неопределено); // "0" или Неопределено
	
	Если Реквизиты.ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.НалоговыйПлатеж") Тогда
		
		Правило.Назначение = "Дата";
		
		Если ЭтоДобровольноеПогашениеЗадолженности(Реквизиты.ОснованиеПлатежа) Тогда
			Если ДействуетПриказ2020_199н_Отложенный(Период) Тогда
				Правило.Подсказка = НСтр("ru = 'Дата требования налогового органа об уплате налога (сбора, страховых взносов);
					|Дата решения о приостановлении взыскания;
					|Дата решения о привлечении к ответственности за совершение налогового правонарушения или об отказе в привлечении к ответственности за совершение налогового правонарушения;
					|Дата исполнительного документа и возбужденного на его основании исполнительного производства
					|0 - при отсутствии документа'");
				Правило.Комментарий = НСтр("ru = 'Следует указать дату требования, решения или исполнительного документа'");
				Правило.Значение    = НезаполненноеЗначение();
			Иначе
				Правило.Подсказка   = НСтр("ru = 'При основании ""ЗД"" проставляется ""0""'");
				Правило.Комментарий = Правило.Подсказка;
				Правило.Значение    = НезаполненноеЗначение();
			КонецЕсли;
		ИначеЕсли ЭтоПогашениеЗадолженностиПоАктуПроверки(Реквизиты.ОснованиеПлатежа) Тогда
			Если ДействуетПриказ107н(Период) Тогда
				Правило.Подсказка   = НСтр("ru = 'Дата решения о привлечении к ответственности'");
				Правило.Комментарий = НСтр("ru = 'Следует указать дату решения о привлечении к ответственности'");
			Иначе
				Правило.Подсказка   = НСтр("ru = 'Дата акта проверки'");
				Правило.Комментарий = НСтр("ru = 'Следует указать дату акта проверки'");
			КонецЕсли;
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ТП" Тогда
			
			Правило.Назначение = Неопределено; // На практике, многие текущие платежи не имеют документа-основания. Поэтому требовать заполнять дату не будем.
			
			Правило.Подсказка   = НСтр("ru = 'Дата подписи налогоплательщиком декларации, представленной в налоговый орган'");
			Правило.Комментарий = НСтр("ru = 'Следует указать дату подписи декларации'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ТР" Тогда
			Правило.Подсказка   = НСтр("ru = 'Дата требования налогового органа об уплате налога (сбора)'");
			Правило.Комментарий = НСтр("ru = 'Следует указать дату требования налогового органа'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "РС" Тогда
			Правило.Подсказка   = НСтр("ru = 'Дата решения о рассрочке'");
			Правило.Комментарий = НСтр("ru = 'Следует указать дату решения о рассрочке'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ОТ" Тогда
			Правило.Подсказка   = НСтр("ru = 'Дата решения об отсрочке'");
			Правило.Комментарий = НСтр("ru = 'Следует указать дату решения об отсрочке'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ВУ" Тогда
			Правило.Подсказка   = НСтр("ru = 'Дата принятия арбитражным судом решения о введении внешнего управления'");
			Правило.Комментарий = НСтр("ru = 'Следует указать дату принятия арбитражным судом решения о введении внешнего управления'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ПБ" Тогда
			Правило.Подсказка   = НСтр("ru = 'Дата принятия арбитражным судом решения о введении процедуры банкротства'");
			Правило.Комментарий = НСтр("ru = 'Следует указать дату принятия арбитражным судом решения о введении процедуры банкротства'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "РТ" Тогда
			Правило.Подсказка   = НСтр("ru = 'Дата решения о реструктуризации'");
			Правило.Комментарий = НСтр("ru = 'Следует указать дату решения о реструктуризации'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ПР" Тогда
			Правило.Подсказка   = НСтр("ru = 'Дата решения о приостановлении взыскания'");
			Правило.Комментарий = НСтр("ru = 'Следует указать дату решения о приостановлении взыскания'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "АР" Тогда
			Правило.Подсказка = НСтр("ru = 'Дата исполнительного документа'");
			Правило.Комментарий = НСтр("ru = 'Следует указать дату исполнительного документа'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ИН" Тогда
			Правило.Подсказка = НСтр("ru = 'Дата решения о предоставлении инвестиционного налогового кредита'");
			Правило.Комментарий = НСтр("ru = 'Следует указать дату решения о предоставлении инвестиционного налогового кредита'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ТЛ" Тогда
			Правило.Подсказка = НСтр("ru = 'Дата определения арбитражного суда'");
			Правило.Комментарий = НСтр("ru = 'Следует указать дату определения арбитражного суда'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "БФ" Тогда
			Правило.Подсказка = НСтр("ru = 'Дата представления налоговой декларации в налоговый орган либо дата отправки декларации по почте'");
		ИначеЕсли ЭтоЕдиныйНалоговыйПлатеж(Реквизиты.КБК) Тогда
			Правило.Назначение  = "НеИспользуется";
			Правило.Значение    = НезаполненноеЗначение();
			Правило.Комментарий = НСтр("ru = 'Для единого налогового платежа указывается ""0""'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = НезаполненноеЗначение() Тогда
			// Этот случай нормативными документами не предусмотрен
			Правило.Назначение = Неопределено;
			Правило.Значение   = НезаполненноеЗначение();
		КонецЕсли;
		
	ИначеЕсли Реквизиты.ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ТаможенныйПлатеж") Тогда
		
		Если Реквизиты.ОснованиеПлатежа = "ДЕ"
			ИЛИ Реквизиты.ОснованиеПлатежа = "КТ" Тогда
			Правило.Назначение = "Дата";
			Правило.Подсказка = НСтр("ru = 'Дата из номера декларации на товары'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ПО" Тогда
			Правило.Назначение = "Дата";
			Правило.Подсказка = НСтр("ru = 'Дата таможенного приходного ордера'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "КВ" Тогда
			Правило.Назначение = "Дата";
			Правило.Подсказка = НСтр("ru = 'Дата постановления-квитанции'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ИД" Тогда
			Правило.Назначение = "Дата";
			Правило.Подсказка = НСтр("ru = 'Дата исполнительного документа'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ИП" Тогда
			Правило.Назначение = "Дата";
			Правило.Подсказка = НСтр("ru = 'Дата инкассового поручения'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ТУ" Тогда
			Правило.Назначение = "Дата";
			Правило.Подсказка = НСтр("ru = 'Дата требования об уплате таможенных платежей'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "БД" Тогда
			Правило.Назначение = "Дата";
			Правило.Подсказка = НСтр("ru = 'Дата документа финансово-хозяйственной деятельности'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "КЭ" Тогда
			Правило.Назначение = "Дата";
			Правило.Подсказка = НСтр("ru = 'Дата квитанции физического лица - получателя товаров, перемещаемых в качестве
				|экспресс-грузов'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "УВ" Тогда
			Правило.Назначение = "Дата";
			Правило.Подсказка = НСтр("ru = 'Дата уведомления о не уплаченных в установленный срок суммах таможенных платежей,
				|специальных, антидемпинговых, компенсационных, пошлин, процентов и пени'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ПБ" Тогда
			Правило.Назначение = "Дата";
			Правило.Подсказка = НСтр("ru = 'Дата поручения таможенного органа на бесспорное взыскание'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ТГ" Тогда
			Правило.Назначение = "Дата";
			Правило.Подсказка =
				НСтр("ru = 'Дата требования об уплате денежных средств гарантирующим объединением (ассоциацией)'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ТБ" Или Реквизиты.ОснованиеПлатежа = "ТД" Тогда
			Правило.Назначение = "Дата";
			Правило.Подсказка =
				НСтр("ru = 'Дата требования об уплате денежной суммы по банковской гарантии или договору поручительства'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ПВ" Тогда
			Правило.Назначение = "Дата";
			Правило.Подсказка = НСтр("ru = 'Дата постановления о взыскании таможенных платежей, специальных, антидемпинговых,
				|компенсационных пошлин, процентов и пени за счет имущества'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ИН" Тогда
			Правило.Назначение = "Дата";
			Правило.Подсказка = НСтр("ru = 'Дата документа инкассации'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ПК" Тогда
			Правило.Назначение = "Дата";
			Правило.Подсказка = НСтр("ru = 'Дата таможенного приходного ордера'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ИЛ" Тогда
			Правило.Назначение = "Дата";
			Правило.Подсказка = НСтр("ru = 'Дата исполнительного листа'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "КП" Тогда
			Правило.Назначение = "Дата";
			Правило.Подсказка = НСтр("ru = 'Дата соглашения о взаимодействии при уплате крупными плательщиками суммарных
				|платежей в централизованном порядке'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = ИныеСлучаи() И ДействуетПриказ2020_199н_Отложенный(Период) Тогда
			Правило.Назначение = "Дата";
			Правило.Значение   = ИныеСлучаи();
			Правило.Комментарий = КомментарийТеперьУказывается00();
		КонецЕсли;
		// В остальных случаях - неопределено
		
	ИначеЕсли Реквизиты.ПеречислениеПоИсполнительномуЛисту
		И ЭтоДобровольноеПогашениеЗадолженности(Реквизиты.ОснованиеПлатежа)
		И ДействуетПриказ2020_199н_Отложенный(Период) Тогда
		
		Правило.Значение    = "Дата";
		Правило.Подсказка = НСтр("ru = 'Дата исполнительного документа и возбужденного на его основании исполнительного производства'");
		Правило.Комментарий = Правило.Подсказка;
		
	Иначе // Иные платежи
		
		Правило.Назначение  = "НеИспользуется";
		Правило.Значение    = НезаполненноеЗначение();
		Если ДействуетПриказ107н(Период) Тогда
			Правило.Комментарий = КомментарийТеперьУказывается0(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Правило;
	
КонецФункции

Процедура ЗаполнитьЗависимыеРеквизитыРекурсивно(ЗависимыеРеквизиты, ИмяРеквизита)
	
	ЗависимыеРеквизитыЭтогоУровня = ЗависимыеРеквизиты(ИмяРеквизита);
	Для каждого ИмяЗависимогоРеквизита Из ЗависимыеРеквизитыЭтогоУровня Цикл
		ЗависимыеРеквизиты.Добавить(ИмяЗависимогоРеквизита);
		ЗаполнитьЗависимыеРеквизитыРекурсивно(ЗависимыеРеквизиты, ИмяЗависимогоРеквизита);
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоДобровольноеПогашениеЗадолженности(КодОснования) Экспорт
	
	Возврат КодОснования = "ЗД";
	
КонецФункции

Функция ЗависимыеРеквизиты(ИмяРеквизита)
	
	ЗависимыеРеквизиты = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(ИмяРеквизита) Тогда
		// Независимые реквизиты
		ЗависимыеРеквизиты.Добавить("КБК");
		ЗависимыеРеквизиты.Добавить("КодТерритории");
		ЗависимыеРеквизиты.Добавить("ИдентификаторПлатежа");
	ИначеЕсли ИмяРеквизита = "КБК" Тогда
		ЗависимыеРеквизиты.Добавить("ВидПеречисления");
	ИначеЕсли ИмяРеквизита = "ВидПеречисления" Тогда
		ЗависимыеРеквизиты.Добавить("СтатусПлательщика");
		ЗависимыеРеквизиты.Добавить("ТипПлатежа");
		ЗависимыеРеквизиты.Добавить("ОснованиеПлатежа");
		ЗависимыеРеквизиты.Добавить("НомерДокумента");
	ИначеЕсли ИмяРеквизита = "ОснованиеПлатежа" Тогда
		ЗависимыеРеквизиты.Добавить("НалоговыйПериод");
		ЗависимыеРеквизиты.Добавить("НомерДокумента");
		ЗависимыеРеквизиты.Добавить("ДатаДокумента");
		ЗависимыеРеквизиты.Добавить("ПеречислениеПоИсполнительномуЛисту");
	ИначеЕсли ИмяРеквизита = "СтатусПлательщика" Тогда
		ЗависимыеРеквизиты.Добавить("НомерДокумента");
		ЗависимыеРеквизиты.Добавить("ПеречислениеПоИсполнительномуЛисту");
	ИначеЕсли ИмяРеквизита = "НомерДокумента" Тогда
		ЗависимыеРеквизиты.Добавить("ПеречислениеПоИсполнительномуЛисту");
	ИначеЕсли ИмяРеквизита = "ДатаДокумента" Тогда
		ЗависимыеРеквизиты.Добавить("ПеречислениеПоИсполнительномуЛисту");
	КонецЕсли;
	
	Возврат ЗависимыеРеквизиты;
	
КонецФункции

Функция ВидыПрефиксовНомераДокументаПоОснованиюПлатежаЗД()
	
	Префиксы = Новый Массив;
	Префиксы.Добавить("ТР");
	Префиксы.Добавить("ПР");
	Префиксы.Добавить("АП");
	Префиксы.Добавить("АР");
	
	Возврат Префиксы;
	
КонецФункции

Функция ДлинаПрефиксаНомераДокументаПоОснованиюПлатежаЗД()
	
	Возврат 2;
	
КонецФункции

Функция ЭтоПогашениеЗадолженностиПоАктуПроверки(КодОснования) Экспорт
	
	Возврат КодОснования = "АП";
	
КонецФункции

Функция ЗначениеВСпискеДопустимых(Значение, ДопустимыеЗначения)
	
	Если ДопустимыеЗначения = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли ТипЗнч(ДопустимыеЗначения) = Тип("Массив") Тогда
		Возврат (ДопустимыеЗначения.Найти(Значение) <> Неопределено);
	ИначеЕсли ТипЗнч(ДопустимыеЗначения) = Тип("СписокЗначений") Тогда
		Возврат (ДопустимыеЗначения.НайтиПоЗначению(Значение) <> Неопределено);
	ИначеЕсли ТипЗнч(ДопустимыеЗначения) = Тип("Строка") Тогда
		Возврат (СокрП(Значение) = СокрП(ДопустимыеЗначения));
	Иначе
		Возврат (Значение = ДопустимыеЗначения);
	КонецЕсли;
	
КонецФункции

Функция ЗначениеПоУмолчанию(ДопустимыеЗначения)
	
	Если ТипЗнч(ДопустимыеЗначения) = Тип("Массив") Тогда
		Если ДопустимыеЗначения.Количество() > 0 Тогда
			Возврат ДопустимыеЗначения[0];
		Иначе
			Возврат "";
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДопустимыеЗначения) = Тип("СписокЗначений") Тогда
		Возврат ДопустимыеЗначения[0].Значение;
	Иначе
		Возврат ДопустимыеЗначения;
	КонецЕсли;
	
КонецФункции

Функция ПроверитьКодТерритории(КодТерритории,
							   ВидПеречисления,
							   НомерСчетаПолучателя,
							   Период,
							   ЭтоУплатаЕНП,
							   СтандартнаяПроверкаЗаполнения = Истина)
	
	СтандартнаяПроверкаЗаполнения = Истина;
	
	Если Не РеквизитЗаполнен(КодТерритории)
		И Не (ЭтоУплатаЕНП И ДействуетПереходНаЕНП(Период)) Тогда
		
		Если ДопускаетсяПустойКБК(ВидПеречисления, НомерСчетаПолучателя, Период) Тогда
			СтандартнаяПроверкаЗаполнения = Ложь;
			Возврат "";
		ИначеЕсли ПрименяетсяОКТМО(Период) Тогда
			Возврат НСтр("ru = 'Поле ""Код ОКТМО"" не заполнено'");
		Иначе
			Возврат НСтр("ru = 'Поле ""Код ОКАТО"" не заполнено'");
		КонецЕсли;
		
	КонецЕсли;
	
	Комментарий = "";
	Если ПрименяетсяОКТМО(Период) Тогда
		
		// Следует указывать ОКТМО, а не ОКАТО
		Если НЕ ЭтоКодОКТМО(КодТерритории, Комментарий, Период) Тогда
			Если ЭтоКодОКАТО(КодТерритории) Тогда
				ШаблонОшибки = НСтр("ru = 'С %2 следует указывать код ОКТМО, а не код ОКАТО. %1'");
			Иначе
				ШаблонОшибки = НСтр("ru = 'В поле ""Код ОКТМО"" указано значение, не соответствующее требованиям. %1'");
			КонецЕсли;
			ДатаНовогоКода = Формат(НачалоПримененияОКТМО(), "ДЛФ=DD");
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, Комментарий, ДатаНовогоКода);
		КонецЕсли;
		
		// ОКТМО должен соответствовать требованиям ОК 033-2013
		// В частности, см. совместное письмо от 3 февраля 2014 г. Минфина Московской области № 22исх-693/22-07-02, УФК по
		// Московской области № 48-12-13/02-728
		Если ЭтоКодОКТМО(КодТерритории) И НЕ ЭтоКодОКАТО(КодТерритории)
			И СтрДлина(КодТерритории) = 11 И Сред(КодТерритории, 9, 3) = "000" Тогда
			Если ПрименяетсяОКТМО8Символов(Период) Тогда
				Возврат НСтр("ru = 'С 25.04.2017 указание 11-значного кода ОКТМО населенного пункта недопустимо.
					|Введите 8-значный код муниципального образования, в который входит населенный пункт.'");
			Иначе
				Возврат НСтр("ru = 'При заполнении одиннадцатизначного кода ОКТМО, значение ""000"" в 9-11 знаках кода недопустимо.
					|Введите 8-значный код муниципального образования или укажите идентификатор населенного пункта в 9-11 знаках.'");
			КонецЕсли;
		КонецЕсли;
		
		Если КлиентБанкКлиентСервер.ТолькоНулиВСтроке(КодТерритории) И Не ЭтоУплатаЕНП Тогда
			
			Возврат НСтр("ru = 'Все знаки кода ОКТМО не могут одновременно принимать значение ""0"".'");
			
		КонецЕсли;
		
	Иначе
		// Следует указывать ОКАТО, а не ОКТМО
		Если НЕ ЭтоКодОКАТО(КодТерритории, Комментарий) Тогда
			Если ЭтоКодОКТМО(КодТерритории,, Период) Тогда
				ШаблонОшибки = НСтр("ru = 'До %2 следует указывать код ОКАТО, а не код ОКТМО. %1'");
			Иначе
				ШаблонОшибки = НСтр("ru = 'В поле ""Код ОКАТО"" указано значение, не соответствующее требованиям. %1'");
			КонецЕсли;
			ДатаНовогоКода = Формат(НачалоПримененияОКТМО(), "ДЛФ=DD");
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, Комментарий, ДатаНовогоКода);
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ДопустимыйКодТерритории(КодТерритории,
								ВидПеречисления,
								НомерСчетаПолучателя,
								КодТерриторииПоУмолчанию,
								Период,
								ЭтоУплатаЕНП = Ложь)
	
	РезультатПроверки = ПроверитьКодТерритории(
		КодТерритории, ВидПеречисления, НомерСчетаПолучателя, Период, ЭтоУплатаЕНП);
	Если ПустаяСтрока(РезультатПроверки) Тогда
		Возврат КодТерритории;
	КонецЕсли;
	
	ДопустимыеЗначения = Новый Массив;
	ДопустимыеЗначения.Добавить(КодТерриторииПоУмолчанию);
	
	Если ДопускаетсяПустойКБК(ВидПеречисления, НомерСчетаПолучателя, Период)
		Или ЭтоУплатаЕНП И ДействуетПереходНаЕНП(Период) Тогда
		ДопустимыеЗначения.Добавить(НезаполненноеЗначение());
	КонецЕсли;
	
	Возврат ДопустимыеЗначения;
	
КонецФункции

Функция ПравилоУказанияНалоговогоПериода(Реквизиты, Период) Экспорт
	
	Правило = Новый Структура;
	Правило.Вставить("Подсказка",   "");
	Правило.Вставить("Комментарий", "");
	Правило.Вставить("Назначение",  Неопределено); // "Период", "Орган", "НеИспользуется"
	Правило.Вставить("Значение",    Неопределено); // "Дата", "Период", "Номер", "0"
	
	Если Реквизиты.ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.НалоговыйПлатеж") Тогда
		
		Правило.Назначение = "Период";
		
		Если Реквизиты.ОснованиеПлатежа = "ТР" Тогда // Требование
			Правило.Значение    = "Дата";
			Правило.Подсказка   = НСтр("ru = 'Срок уплаты, установленный в требовании налогового органа об уплате налогов (сборов)'");
			Правило.Комментарий = НСтр("ru = 'При основании ""ТР"" следует указать дату - срок уплаты, установленный в требовании налогового органа'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "РС" Тогда
			Правило.Значение    = "Дата";
			Правило.Подсказка   = НСтр("ru = 'Дата уплаты части рассроченной суммы налога в соответствии с установленным графиком рассрочки'");
			Правило.Комментарий = НСтр("ru = 'При основании ""РС"" следует указать дату уплаты в соответствии с установленным графиком рассрочки'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ОТ" Тогда
			Правило.Значение    = "Дата";
			Правило.Подсказка   = НСтр("ru = 'Дата завершения отсрочки'");
			Правило.Комментарий = НСтр("ru = 'При основании ""ОТ"" следует указать дату завершения отсрочки'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "РТ" Тогда
			Правило.Значение    = "Дата";
			Правило.Подсказка   = НСтр("ru = 'Дата уплаты части реструктурируемой задолженности в соответствии с графиком реструктуризации'");
			Правило.Комментарий = НСтр("ru = 'При основании ""РТ"" следует указать дату в соответствии с графиком реструктуризации'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ВУ" Тогда
			Правило.Значение    = "Дата";
			Правило.Подсказка   = НСтр("ru = 'Дата завершения внешнего управления'");
			Правило.Комментарий = НСтр("ru = 'При основании ""ВУ"" следует указать дату завершения внешнего управления'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ПР" Тогда
			Правило.Значение    = "Дата";
			Правило.Подсказка   = НСтр("ru = 'Дата завершения приостановления взыскания'");
			Правило.Комментарий = НСтр("ru = 'При основании ""ПР"" следует указать дату завершения приостановления взыскания'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ИН" Тогда
			Правило.Значение    = "Дата";
			Правило.Подсказка   = НСтр("ru = 'При основании ""ИН"" следует указать дату уплаты части инвестиционного налогового кредита'");
			Правило.Комментарий = Правило.Подсказка;
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ПБ" Тогда
			Правило.Значение    = "Дата";
			Правило.Подсказка   = НСтр("ru = 'При основании ""ПБ"" следует указать дату завершения процедуры, применяемой в деле о банкротстве'");
			Правило.Комментарий = Правило.Подсказка;
		ИначеЕсли ЭтоПогашениеЗадолженностиПоАктуПроверки(Реквизиты.ОснованиеПлатежа) Тогда
			Правило.Значение    = НезаполненноеЗначение();
			Правило.Подсказка   = НСтр("ru = 'При основании ""АП"" проставляется ""0""'");
			Правило.Комментарий = Правило.Подсказка;
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "АР" Тогда
			Правило.Значение    = НезаполненноеЗначение();
			Правило.Подсказка   = НСтр("ru = 'При основании ""АР"" проставляется ""0""'");
			Правило.Комментарий = Правило.Подсказка;
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ЗД"
			И ДействуетПриказ2020_199н_Отложенный(Период) Тогда
			Если Реквизиты.ПеречислениеПоИсполнительномуЛисту Тогда
				Правило.Значение    = НезаполненноеЗначение();
				Правило.Назначение  = "НеИспользуется";
				Правило.Комментарий = НСтр("ru = 'Для всех платежей указывается ""0""'");
			Иначе
				Правило.Значение    = "Дата";
				Правило.Подсказка = НСтр("ru = 'Срок уплаты, установленный в требовании налогового органа об уплате налогов (сборов);
					|Дата завершения приостановления взыскания'");
			КонецЕсли;
			Правило.Комментарий = Правило.Подсказка;
		ИначеЕсли ЭтоЕдиныйНалоговыйПлатеж(Реквизиты.КБК) Тогда
			Правило.Назначение  = "НеИспользуется";
			Правило.Значение    = НезаполненноеЗначение();
			Правило.Комментарий = НСтр("ru = 'Для единого налогового платежа указывается ""0""'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = НезаполненноеЗначение() Тогда
			Правило.Значение    = НезаполненноеЗначение();
			Правило.Подсказка   = НСтр("ru = 'При основании ""0"" проставляется ""0""'");
			Правило.Комментарий = Правило.Подсказка;
		Иначе // Обычные платежи
			Правило.Значение    = "Период";
			Правило.Подсказка   = НСтр("ru = 'Налоговый период, за который производится уплата налога (сбора)'");
			Правило.Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При основании ""%1"" следует указать период, за который производится уплата налога (сбора)'"),
				Реквизиты.ОснованиеПлатежа);
			
		КонецЕсли;
		
	ИначеЕсли Реквизиты.ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ТаможенныйПлатеж") Тогда
		
		Правило.Значение    = "Номер"; // Здесь не должно быть значение, похожее на дату и не допускается пустое значение
		Правило.Назначение  = "Орган";
		Правило.Подсказка   = НСтр("ru = 'Код, который идентифицирует таможенный орган, осуществляющий администрирование платежа'");
		Правило.Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для таможенных платежей следует указать код таможенного органа, а не налоговый период'"),
			Реквизиты.ОснованиеПлатежа);
		
	Иначе
		
		Правило.Значение    = НезаполненноеЗначение();
		Правило.Назначение  = "НеИспользуется";
		Если ДействуетПриказ107н(Период) Тогда
			Правило.Комментарий = КомментарийТеперьУказывается0(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Правило;
	
КонецФункции

Процедура ПривестиЭлементыНалоговогоПериода(Периодичность, Год, НомерПериода, Дата, ТекущаяДата) Экспорт
	
	Если НЕ РеквизитЗаполнен(Периодичность)
		ИЛИ ВидыНалоговыхПериодов().НайтиПоЗначению(Периодичность) = Неопределено Тогда
		Периодичность = НезаполненноеЗначение();
		ГодПлатежа    = 0;
		НомерПериода  = 0;
		Дата          = '0001-01-01';
		Возврат;
	КонецЕсли;
	
	Если Периодичность = ПлатежПоКонкретнойДате() Тогда
		
		Если НЕ ЗначениеЗаполнено(Дата) Тогда
			Дата = ТекущаяДата;
		КонецЕсли;
		
		ГодПлатежа = Год(Дата);
		
		Возврат;
		
	КонецЕсли;
	
	Если Год = 0 Тогда
		Год = Год(ТекущаяДата);
	КонецЕсли;
	
	Если Периодичность = ПериодичностьГод() Тогда
		НомерПериода = 0;
		Дата = Дата(Год, 1, 1);
		Возврат;
	КонецЕсли;
	
	НомерПериода = Макс(1, НомерПериода);
	МаксимальноеЗначениеПоПериодичности = МаксимальноеЗначениеПоПериодичности(Периодичность);
	Если МаксимальноеЗначениеПоПериодичности = Неопределено Тогда
		Возврат;
	Иначе
		НомерПериода = Мин(НомерПериода, МаксимальноеЗначениеПоПериодичности);
	КонецЕсли;
	
	Дата = ДатаНачалаНалоговогоПериода(Периодичность, Год, НомерПериода);
	
КонецПроцедуры

Функция ПравилоУказанияНомераДокумента(Реквизиты, Период) Экспорт
	
	Правило = Новый Структура;
	Правило.Вставить("Подсказка",   "");
	Правило.Вставить("Комментарий", "");
	Правило.Вставить("Назначение",  Неопределено); // "ОснованиеУплаты", "ИдентификаторЛица", "НеИспользуется"
	Правило.Вставить("Значение",    Неопределено); // "0" или Неопределено
	
	Если Реквизиты.ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.НалоговыйПлатеж") Тогда
		
		Правило.Назначение = "ОснованиеУплаты";
		
		Если Реквизиты.ОснованиеПлатежа = "ТП" Тогда
			Правило.Подсказка   = НСтр("ru = 'При основании ""ТП"" проставляется ""0""'");
			Правило.Комментарий = Правило.Подсказка;
			Правило.Значение    = НезаполненноеЗначение();
		ИначеЕсли ЭтоДобровольноеПогашениеЗадолженности(Реквизиты.ОснованиеПлатежа) Тогда
			Если ДействуетПриказ2020_199н_Отложенный(Период) Тогда
				Правило.Подсказка   = НСтр("ru = 'Укажите номер с префиксом вида документа:
					|номер требования налогового органа об уплате налога (сбора, страховых взносов) (ТР);
					|номер решения о приостановлении взыскания (ПР);
					|номер решения о привлечении к ответственности за совершение налогового правонарушения или об отказе в привлечении к ответственности за совершение налогового правонарушения (АП);
					|номер исполнительного документа и возбужденного на основании его исполнительного производства (АР)
					|0 - при отсутствии документа'");
				Правило.Комментарий = НСтр("ru = 'Следует указать номер требования, решения или исполнительного документа с префиксом'");
				Правило.Значение    = НезаполненноеЗначение();
			Иначе
				Правило.Подсказка   = НСтр("ru = 'При основании ""ЗД"" проставляется ""0""'");
				Правило.Комментарий = Правило.Подсказка;
				Правило.Значение    = НезаполненноеЗначение();
			КонецЕсли;
		ИначеЕсли ЭтоПогашениеЗадолженностиПоАктуПроверки(Реквизиты.ОснованиеПлатежа) Тогда
			Если ДействуетПриказ107н(Период) Тогда
				Правило.Подсказка   = НСтр("ru = 'Номер решения о привлечении к ответственности'");
				Правило.Комментарий = НСтр("ru = 'Следует указать номер решения о привлечении к ответственности'");
			Иначе
				Правило.Подсказка   = НСтр("ru = 'Номер акта проверки'");
				Правило.Комментарий = НСтр("ru = 'Следует указать номер акта проверки'");
			КонецЕсли;
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ТР" Тогда
			Правило.Подсказка   = НСтр("ru = 'Номер требования налогового органа об уплате налога (сбора)'");
			Правило.Комментарий = НСтр("ru = 'Следует указать номер требования об уплате налогов'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "РС" Тогда
			Правило.Подсказка   = НСтр("ru = 'Номер решения о рассрочке'");
			Правило.Комментарий = НСтр("ru = 'Следует указать номер решения о рассрочке'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ОТ" Тогда
			Правило.Подсказка   = НСтр("ru = 'Номер решения об отсрочке'");
			Правило.Комментарий = НСтр("ru = 'Следует указать номер решения об отсрочке'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "РТ" Тогда
			Правило.Подсказка   = НСтр("ru = 'Номер решения о реструктуризации'");
			Правило.Комментарий = НСтр("ru = 'Следует указать номер решения о реструктуризации'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ПР" Тогда
			Правило.Подсказка = НСтр("ru = 'Номер решения о приостановлении взыскания'");
			Правило.Комментарий = НСтр("ru = 'Следует указать номер решения о приостановлении взыскания'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ВУ" ИЛИ Реквизиты.ОснованиеПлатежа = "ПБ" Тогда
			Правило.Подсказка = НСтр("ru = 'Номер дела или материала, рассмотренного арбитражным судом'");
			Правило.Комментарий = НСтр("ru = 'Следует указать номер дела или материала, рассмотренного арбитражным судом'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "АР" Тогда
			Правило.Подсказка = НСтр("ru = 'Номер исполнительного документа и возбужденного на основании его исполнительного производства'");
			Правило.Комментарий = НСтр("ru = 'Следует указать номер исполнительного документа и исполнительного производства'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ИН" Тогда
			Правило.Подсказка = НСтр("ru = 'Номер решения о предоставлении инвестиционного налогового кредита'");
			Правило.Комментарий = НСтр("ru = 'Следует указать номер решения о предоставлении инвестиционного налогового кредита'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ТЛ" Тогда
			Правило.Подсказка = НСтр("ru = 'Номер определения арбитражного суда'");
			Правило.Комментарий = НСтр("ru = 'Следует указать номер определения арбитражного суда'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "БФ" Тогда
			Правило.Подсказка   = НСтр("ru = 'При основании ""БФ"" проставляется ""0""'");
			Правило.Комментарий = Правило.Подсказка;
		ИначеЕсли ЭтоЕдиныйНалоговыйПлатеж(Реквизиты.КБК) Тогда
			Правило.Назначение  = "НеИспользуется";
			Правило.Значение    = НезаполненноеЗначение();
			Правило.Комментарий = НСтр("ru = 'Для единого налогового платежа указывается ""0""'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = НезаполненноеЗначение() Тогда
			// Этот случай нормативными документами не предусмотрен
			Правило.Назначение = Неопределено;
			Правило.Значение   = НезаполненноеЗначение();
		КонецЕсли;
		
	ИначеЕсли ДействуетПриказ107н(Период) Тогда
		
		Если (Реквизиты.СтатусПлательщика = СтатусПлательщикаПоИсполнительномуЛисту()
				Или Реквизиты.СтатусПлательщика = СтатусПлательщикаПоИсполнительномуЛистуВБюджет())
			И Реквизиты.ПеречислениеПоИсполнительномуЛисту
			И ЭтоДобровольноеПогашениеЗадолженности(Реквизиты.ОснованиеПлатежа)
			И ДействуетПриказ2020_199н_Отложенный(Период) Тогда
			
			Правило.Назначение = "ОснованиеУплаты";
			Правило.Подсказка   = НСтр("ru = 'Укажите номер с префиксом вида документа:
				|номер исполнительного документа и возбужденного на основании его исполнительного производства (АР)'");
			Правило.Комментарий = НСтр("ru = 'Следует указать номер требования, решения или исполнительного документа с префиксом'");
			Правило.Значение    = НезаполненноеЗначение();
			
		Иначе
			Если Реквизиты.СтатусПлательщика = "03"
				Или Реквизиты.СтатусПлательщика = СтатусПлательщикаПоИсполнительномуЛисту()
				Или Реквизиты.СтатусПлательщика = СтатусПлательщикаПоИсполнительномуЛистуВБюджет()
				Или Реквизиты.СтатусПлательщика = "20"
				Или (Реквизиты.СтатусПлательщика = "16"
					И Реквизиты.ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ТаможенныйПлатеж"))
				Или (Реквизиты.СтатусПлательщика = "24"
					И Реквизиты.ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ИнойПлатеж")) Тогда
				
				Правило.Назначение  = "ИдентификаторЛица";
				Правило.Подсказка   = НСтр("ru = 'Идентификатор сведений о физическом лице'");
				Правило.Комментарий = НСтр("ru = 'Следует указать идентификатор сведений о физическом лице'");
				
			ИначеЕсли Реквизиты.ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ТаможенныйПлатеж") Тогда
				
				ДобавитьОснованиеУплатыТаможенныейПлатеж(Правило, Реквизиты, Период, Ложь);
				
			Иначе
				
				Правило.Значение    = НезаполненноеЗначение();
				Правило.Назначение  = "НеИспользуется";
				Правило.Комментарий = КомментарийТеперьУказывается0(Истина);
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Реквизиты.ПеречислениеПоИсполнительномуЛисту
		И ЭтоДобровольноеПогашениеЗадолженности(Реквизиты.ОснованиеПлатежа)
		И ДействуетПриказ2020_199н_Отложенный(Период) Тогда
		
		Правило.Назначение = "ОснованиеУплаты";
		Правило.Подсказка   = НСтр("ru = 'Укажите номер с префиксом вида документа:
			|номер исполнительного документа и возбужденного на основании его исполнительного производства (АР)'");
		Правило.Комментарий = НСтр("ru = 'Следует указать номер требования, решения или исполнительного документа с префиксом'");
		Правило.Значение    = НезаполненноеЗначение();
		
	Иначе // Старые правила для неналоговых платежей
		
		Если Реквизиты.ВидПеречисления <> ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ТаможенныйПлатеж") Тогда
			
			Правило.Значение    = НезаполненноеЗначение();
			Правило.Назначение  = "НеИспользуется";
			
		Иначе
			
			ДобавитьОснованиеУплатыТаможенныейПлатеж(Правило, Реквизиты, Период, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Правило;
	
КонецФункции

Функция НачалоПримененияОКТМО() Экспорт
	
	// Приказ N 159-ст от 14 июня 2013 г.
	
	Возврат '20140101';
	
КонецФункции

Функция ПрименяетсяОКТМО(Период = Неопределено) Экспорт
	
	Возврат Период = Неопределено
		ИЛИ Период >= НачалоПримененияОКТМО();
	
КонецФункции

Функция ЭтоКодОКАТО(Знач Код, Комментарий = "") Экспорт
	
	// ОК 019-95
	
	Код = СокрП(Код);
	
	Если ПустаяСтрока(Код) Тогда
		Комментарий = НСтр("ru = 'Код не указан.'");
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Код) Тогда
		Комментарий = НСтр("ru = 'Код ОКАТО должен включать только цифры.'");
		Возврат Ложь;
	КонецЕсли;
	
	ДлинаКода = СтрДлина(Код);
	Если ДлинаКода <> 2 И ДлинаКода <> 5 И ДлинаКода <> 8 И ДлинаКода <> 11 Тогда
		Комментарий = НСтр("ru = 'Код ОКАТО может состоять из 2, 5, 8 или 11 цифр.'");
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрДлина(Код) = 2 Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Разряд 3 отведен под признак Р1, указывающий уровень классификации и вид кодируемого объекта. 
	// Признак второго уровня классификации - Р1 (разряд 3) имеет значение:
	// 1 - автономный округ;
	// 2 - район (в том числе внутригородской), округ;
	// 4 - город, поселок городского типа.
	// ...
	// 2(5)- разрядные коды ... дополняются до 8-разрядных кодов шестью (тремя) нулями
	
	Р1 = Сред(Код, 3, 1);
	
	Если Р1 = "0" ИЛИ Р1 = "1" ИЛИ Р1 = "2" ИЛИ Р1 = "4" Тогда
		Возврат Истина;
	Иначе
		Комментарий = НСтр("ru = 'Разряд 3 кода ОКАТО может принимать значения 0, 1, 2 или 4.'");
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьОснованиеУплатыТаможенныейПлатеж(Правило, Реквизиты, Период, СтарыеПравила = Ложь)
	
	Правило.Назначение = "ОснованиеУплаты";
	
	Если ДействуетПриказ2020_199н_Отложенный(Период) Тогда
		Если Реквизиты.ОснованиеПлатежа = "УВ" Тогда
			Правило.Подсказка = НСтр("ru = 'последние 7 цифр номера уведомления о не уплаченных в установленный срок суммах
				|таможенных платежей, специальных, антидемпинговых, компенсационных пошлин, процентов и пеней'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ПБ" Тогда
			Правило.Подсказка = НСтр("ru = 'номер поручения таможенного органа на бесспорное взыскание'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ТГ" Тогда
			Правило.Подсказка = НСтр("ru = 'последние 7 цифр номера требования об уплате денежных средств
				|гарантирующим объединением (ассоциацией)'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ТБ" Или Реквизиты.ОснованиеПлатежа = "ТД" Тогда
			Правило.Подсказка = НСтр("ru = 'последние 7 цифр номера требования об уплате денежной суммы
				|по банковской гарантии или договору поручительства'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ПВ" Тогда
			Правило.Подсказка = НСтр("ru = 'последние 7 цифр номера постановления о взыскании таможенных платежей,
				|специальных, антидемпинговых, компенсационных пошлин, процентов и пени за счет имущества'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = ИныеСлучаи() Тогда
			Правило.Назначение = Неопределено;
			Правило.Значение   = ИныеСлучаи();
			Правило.Комментарий = КомментарийТеперьУказывается00();
		КонецЕсли;
	КонецЕсли;
	
	Если СтарыеПравила Или ДействуетПриказ2017_58н(Период) Тогда
		Если Реквизиты.ОснованиеПлатежа = "ДЕ" Или Реквизиты.ОснованиеПлатежа = "ДК"
			Или Реквизиты.ОснованиеПлатежа = "ПД" Тогда
			Правило.Подсказка = НСтр("ru = 'Последние 7 символов из номера таможенной декларации (порядковый номер)'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "КЭ" Тогда
			Правило.Подсказка = НСтр("ru = 'последний элемент квитанции физического лица - получателя товаров, перемещаемых
				|в качестве экспресс-грузов, а в случае если элемент состоит более чем из 15 символов, указывается последние
				|15 символов последнего элемента квитанции получателя товаров, перемещаемых в качестве экспресс-грузов'");
		ИначеЕсли СтарыеПравила И Реквизиты.ОснованиеПлатежа = "ПО" Тогда
			Правило.Подсказка = НСтр("ru = 'Номер таможенного приходного ордера'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ПО" Или Реквизиты.ОснованиеПлатежа = "ПК" Тогда
			Правило.Подсказка = НСтр("ru = 'Последние 7 цифр номера таможенного приходного ордера'");
		ИначеЕсли СтарыеПравила И Реквизиты.ОснованиеПлатежа = "КВ" Тогда
			Правило.Подсказка = НСтр("ru = 'Постановление-квитанция (при уплате штрафа)'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "КВ" Тогда
			Правило.Подсказка =
				НСтр("ru = 'Последние 7 цифр номера квитанции получателя международного почтового отправления'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "КТ" Или Реквизиты.ОснованиеПлатежа = "КК" Тогда
			Правило.Подсказка = НСтр("ru = 'Последние 7 символов из номера таможенной декларации (порядковый номер)'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ИД" Тогда
			Правило.Подсказка = НСтр("ru = 'Номер исполнительного документа'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ИП" Тогда
			Правило.Подсказка = НСтр("ru = 'Номер инкассового поручения'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ТУ" Или Реквизиты.ОснованиеПлатежа = "ТК" Тогда
			Правило.Подсказка = НСтр("ru = 'Номер требования об уплате таможенных платежей'");
		ИначеЕсли СтарыеПравила И Реквизиты.ОснованиеПлатежа = "БД" Тогда
			Правило.Подсказка = НСтр("ru = 'Номер документа бухгалтерских служб таможенных органов'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "БД" Тогда
			Правило.Подсказка = НСтр("ru = 'Номер документа финансово-хозяйственной деятельности таможенных органов'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "ИН" Тогда
			Правило.Подсказка = НСтр("ru = 'Номер документа инкассации'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "КП" Тогда
			Правило.Подсказка = НСтр("ru = 'Номер соглашения о взаимодействии при уплате крупными плательщиками суммарных
				|платежей в централизованном порядке'");
		ИначеЕсли Реквизиты.ОснованиеПлатежа = "00" И Не ДействуетПриказ2020_199н_Отложенный(Период) Тогда
			Правило.Назначение = Неопределено;
			Правило.Значение   = НезаполненноеЗначение();
		ИначеЕсли Реквизиты.ОснованиеПлатежа = НезаполненноеЗначение() Тогда
			// Этот случай нормативными документами не предусмотрен
			Правило.Назначение = Неопределено;
			Правило.Значение   = НезаполненноеЗначение();
		КонецЕсли;
	Иначе
		Правило.Значение    = НезаполненноеЗначение();
		Правило.Назначение  = "НеИспользуется";
		Правило.Комментарий = КомментарийТеперьУказывается0(Истина);
	КонецЕсли;
	
КонецПроцедуры

#Область ПроверкаЗаполнения

Функция ПроверитьЗаполнение(Реквизиты, Контекст) Экспорт
	
	Перем СтандартнаяПроверкаЗаполнения; // Инициализируется внутри функций проверки
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибки",                Новый Массив); // См. НовыйОписаниеОшибки()
	Результат.Вставить("НестандартнаяПроверка", Новый Массив);
	
	// 101 - СтатусПлательщика
	
	Ошибка = ПроверитьСтатусПлательщика(
		Реквизиты,
		Контекст.ФизическоеЛицо,
		Мин(Контекст.ПериодПлатежа, Контекст.Период),
		СтандартнаяПроверкаЗаполнения);
	
	ДобавитьОписаниеРезультатаПроверки(Результат, Ошибка, "СтатусПлательщика", СтандартнаяПроверкаЗаполнения);
	
	// 104 - КБК
	
	Ошибка = ПроверитьКБК(
		Реквизиты.КБК,
		Реквизиты.ВидПеречисления,
		Реквизиты.ИдентификаторПлатежа,
		Контекст.НомерСчетаПолучателя,
		Контекст.Период,
		СтандартнаяПроверкаЗаполнения);
		
	ДобавитьОписаниеРезультатаПроверки(Результат, Ошибка, "КБК", СтандартнаяПроверкаЗаполнения);
	
	// 105 - ОКТМО / ОКАТО
	
	Ошибка = ПроверитьКодТерритории(
		Реквизиты.КодТерритории,
		Реквизиты.ВидПеречисления,
		Контекст.НомерСчетаПолучателя,
		Контекст.Период,
		ЭтоЕдиныйНалоговыйПлатеж(Реквизиты.КБК),
		СтандартнаяПроверкаЗаполнения);
	
	ДобавитьОписаниеРезультатаПроверки(Результат, Ошибка, "КодТерритории", СтандартнаяПроверкаЗаполнения);
	
	// 106 - ОснованиеПлатежа
	
	Ошибка = ПроверитьОснованиеПлатежа(Реквизиты, Контекст.Период, СтандартнаяПроверкаЗаполнения);
	
	ДобавитьОписаниеРезультатаПроверки(Результат, Ошибка, "ОснованиеПлатежа", СтандартнаяПроверкаЗаполнения);
	
	// 107 - НалоговыйПериод
	
	Комментарий = "";
	Правило = ПравилоУказанияНалоговогоПериода(Реквизиты,  Контекст.Период);
	
	НалоговыйПериод = ДопустимыйНалоговыйПериод(Реквизиты, Контекст.Период, Комментарий);
	
	Если НЕ ЗначениеВСпискеДопустимых(Реквизиты.НалоговыйПериод, НалоговыйПериод) Тогда
		
		Если Правило.Назначение = "Орган" Тогда
			Ошибка = НСтр("ru = 'Возможно, неверно указан код таможенного органа. %1'");
		Иначе
			Ошибка = НСтр("ru = 'Возможно, неверно указан налоговый период. %1'");
		КонецЕсли;
		
		Ошибка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Ошибка, Комментарий);
		
		ДобавитьОписаниеРезультатаПроверки(Результат, Ошибка, "НалоговыйПериод");
		
	ИначеЕсли Контекст.Свойство("ВидНалога") Тогда
		
		// Дополнительная проверка налогового периода по виду налога
		Если ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоФиксированныеВзносы(Контекст.ВидНалога) Тогда
			ОписаниеПериода = РазобратьНалоговыйПериод(НалоговыйПериод);
			Если Год(Контекст.Период) < ОписаниеПериода.Год Тогда
				Ошибка = НСтр("ru = 'Для фиксированных взносов указан будущий страховой период. %1'");
				Ошибка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Ошибка, Комментарий);
				ДобавитьОписаниеРезультатаПроверки(Результат, Ошибка, "НалоговыйПериод");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// 108 - Номер документа
	Комментарий = "";
	ДопустимыеНомераДокумента = ДопустимыеНомераДокумента(Реквизиты, Контекст.Период, Комментарий);
	
	Если НЕ ЗначениеВСпискеДопустимых(Реквизиты.НомерДокумента, ДопустимыеНомераДокумента) Тогда
		
		Ошибка = НСтр("ru = 'Возможно, неверно указан номер документа - основания платежа. %1'");
		Ошибка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Ошибка, Комментарий);
		ДобавитьОписаниеРезультатаПроверки(Результат, Ошибка, "НомерДокумента");
		
	КонецЕсли;
	
	// 109 - Дата документа
	Комментарий   = "";
	ДатаДокумента = ДопустимаяДатаДокумента(Реквизиты, Контекст.Период, Комментарий);
	
	Если ОбщегоНазначенияКлиентСервер.СтрокаВДату(Реквизиты.ДатаДокумента) = Дата(1, 1, 1, 0, 0, 0) Тогда
		Реквизиты.ДатаДокумента = ДатаДокумента;
	КонецЕсли;	
	
	Если ДатаДокумента <> Реквизиты.ДатаДокумента Тогда
		
		Ошибка = НСтр("ru = 'Возможно, неверно указана дата документа - основания платежа. %1'");
		Ошибка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Ошибка, Комментарий);
		ДобавитьОписаниеРезультатаПроверки(Результат, Ошибка, "ДатаДокумента");
		
	КонецЕсли;
	
	// 110 - Тип платежа
	Ошибка = ПроверитьТипПлатежа(Реквизиты, Контекст.Период, СтандартнаяПроверкаЗаполнения);
	
	ДобавитьОписаниеРезультатаПроверки(Результат, Ошибка, "ТипПлатежа", СтандартнаяПроверкаЗаполнения);
	
	ЭтоСредстваПоступающиеВоВременноеРаспоряжение =
		ЭтоСчетКазначействаСредствПоступающихВоВременноеРаспоряжение(Контекст.НомерСчетаПолучателя)
		Или Реквизиты.СтатусПлательщика = СтатусПлательщикаПоИсполнительномуЛистуВБюджет();
	
	// 22 - УИН
	Ошибка = ПроверитьУИН(Реквизиты.ИдентификаторПлатежа,
		АдминистраторНачисленияНеФедеральныйОрганГосударственнойВласти(Контекст.НомерСчетаПолучателя),
		ЭтоСредстваПоступающиеВоВременноеРаспоряжение,
		Контекст.Период);
	Если НЕ ПустаяСтрока(Ошибка) Тогда
		ШаблонТекста = НСтр("ru = '%1
			|Если УИН достоверно не известен, не указывайте его (очистите поле).'");
		Ошибка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Ошибка);
	ИначеЕсли Не УИНЗаполненДляСтатусаПоИсполнительномуЛистуВБюджет(
			Реквизиты.ИдентификаторПлатежа, Реквизиты.СтатусПлательщика) Тогда
		ШаблонТекста = НСтр("ru = 'Для статуса составителя ""%1"" УИН должен быть заполнен.'");
		Ошибка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Реквизиты.СтатусПлательщика);
	КонецЕсли;
	
	ДобавитьОписаниеРезультатаПроверки(Результат, Ошибка, "ИдентификаторПлатежа");
	
	Возврат Результат;
	
КонецФункции

Функция УИНЗаполненДляСтатусаПоИсполнительномуЛистуВБюджет(ИдентификаторПлатежа, СтатусПлательщика)
	
	Результат = Истина;
	
	Если СтатусПлательщика <> СтатусПлательщикаПоИсполнительномуЛистуВБюджет() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИдентификаторПлатежа) Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НовыйОписаниеОшибки(Описание = "", ИмяПоля = "") Экспорт
	
	Ошибка = Новый Структура;
	Ошибка.Вставить("Описание", Описание);
	Ошибка.Вставить("ИмяПоля",  ИмяПоля);
	
	Возврат Ошибка;
	
КонецФункции

Процедура ДобавитьОписаниеРезультатаПроверки(Результат, Описание, ИмяПоля, СтандартнаяПроверкаЗаполнения = Ложь)
	
	Если НЕ СтандартнаяПроверкаЗаполнения Тогда
		Результат.НестандартнаяПроверка.Добавить(ИмяПоля);
	КонецЕсли;
	
	Если ПустаяСтрока(Описание) Тогда
		Возврат;
	КонецЕсли;
	
	Результат.Ошибки.Добавить(НовыйОписаниеОшибки(Описание, ИмяПоля));
	
КонецПроцедуры

#КонецОбласти

Функция ПроверитьСтатусПлательщика(Реквизиты, ФизическоеЛицо, Период, СтандартнаяПроверкаЗаполнения = Истина)
	
	СтандартнаяПроверкаЗаполнения = Истина;
	
	Если НЕ ЗначениеЗаполнено(Реквизиты.СтатусПлательщика) Тогда
		Возврат НСтр("ru = 'Поле ""Статус плательщика"" не заполнено'");
	КонецЕсли;
	
	Классификатор = СтатусыПлательщика(Период);
	Если Классификатор.НайтиПоЗначению(Реквизиты.СтатусПлательщика) = Неопределено Тогда
		СтандартнаяПроверкаЗаполнения = Ложь;
		Возврат НСтр("ru = 'Неверное значение поля ""Статус плательщика"".'");
	КонецЕсли;
	
	ДопустимыеСтатусы = ДопустимыеСтатусыПлательщика(Реквизиты, ФизическоеЛицо, , Период);
	СтатусПоУмолчанию = ДопустимыеСтатусы[0];
	Если Реквизиты.СтатусПлательщика <> СтатусПоУмолчанию Тогда
		
		ОписаниеСтатусаПоУмолчанию = Классификатор.НайтиПоЗначению(СтатусПоУмолчанию);
		Если ОписаниеСтатусаПоУмолчанию = Неопределено Тогда
			ПредставлениеСтатусаПоУмолчанию = Реквизиты.СтатусПлательщика; // Такого не должно случиться. Но если случилось, то пусть выдаст неточное сообщение, чем упадет.
		Иначе
			ПредставлениеСтатусаПоУмолчанию = ОписаниеСтатусаПоУмолчанию.Представление;
		КонецЕсли;
		
		Если Реквизиты.ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ТаможенныйПлатеж")
			И Реквизиты.СтатусПлательщика = СтатусПлательщикаИныеПлатежи() Тогда
			
			СтандартнаяПроверкаЗаполнения = Ложь;
			
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Возможно, неверно указано значение в поле ""Статус плательщика"".
					|Для таможенных платежей значение по умолчанию - ""%1"".'"),
					ПредставлениеСтатусаПоУмолчанию);
			
		ИначеЕсли Реквизиты.ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.НалоговыйПлатеж")
			И Реквизиты.СтатусПлательщика = СтатусПлательщикаИныеПлатежи() Тогда
			
			СтандартнаяПроверкаЗаполнения = Ложь;
			
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Возможно, неверно указано значение в поле ""Статус плательщика"".
					|Для налоговых платежей значение по умолчанию - ""%1"".'"),
					ПредставлениеСтатусаПоУмолчанию);
			
		ИначеЕсли Реквизиты.ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ИнойПлатеж")
			И Реквизиты.СтатусПлательщика <> СтатусПлательщикаИныеПлатежи()
			И Реквизиты.СтатусПлательщика <> СтатусПлательщикаПоИсполнительномуЛистуВБюджет()
			И Реквизиты.СтатусПлательщика <> СтатусПлательщикаПоИсполнительномуЛисту() Тогда
			
			СтандартнаяПроверкаЗаполнения = Ложь;
			
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Возможно, неверно указано значение в поле ""Статус плательщика"".
					|Для платежей, не администрируемых налоговыми или таможенными органами, как правило, следует указывать ""%1"".'"),
					ПредставлениеСтатусаПоУмолчанию);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ПроверитьКБК(КБК, ВидПеречисления, ИдентификаторПлатежа, НомерСчетаПолучателя, Период, СтандартнаяПроверкаЗаполнения = Истина)
	
	СтандартнаяПроверкаЗаполнения = Ложь;
	
	Если ДопускаетсяПустойКБК(ВидПеречисления, НомерСчетаПолучателя, Период) Тогда
		
		Если НЕ РеквизитЗаполнен(КБК) Тогда
			Возврат "";
		КонецЕсли;
		
	ИначеЕсли НЕ РеквизитЗаполнен(КБК) Тогда
		
		СтандартнаяПроверкаЗаполнения = Истина;
		
		Возврат НСтр("ru = 'КБК не указан'");
		
	КонецЕсли;
	
	// Проверим валидность введенного кода
	Если СтрДлина(СокрП(КБК)) <> 20 Тогда
		
		Возврат НСтр("ru = 'КБК должен состоять из 20 знаков'");
		
	ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КБК) Тогда
		
		Возврат НСтр("ru = 'КБК должен содержать только цифры'");
		
	ИначеЕсли КБК = ИдентификаторПлатежа Тогда
		
		Возврат НСтр("ru = 'Как правило, КБК не должен совпадать с идентификатором платежа (УИН)'");
		
	ИначеЕсли КБК = НомерСчетаПолучателя Тогда
		
		Возврат НСтр("ru = 'Как правило, КБК не должен совпадать с номером счета получателя'");
		
	ИначеЕсли КлиентБанкКлиентСервер.ТолькоНулиВСтроке(КБК) Тогда
		
		Возврат НСтр("ru = 'Все знаки КБК не могут одновременно принимать значение ""0""'");
		
	КонецЕсли;
	
	СтандартнаяПроверкаЗаполнения = Истина;
	
КонецФункции

Функция ПроверитьОснованиеПлатежа(Реквизиты, Период, СтандартнаяПроверкаЗаполнения = Истина)
	
	СтандартнаяПроверкаЗаполнения = Истина;
	
	Если НЕ ЗначениеЗаполнено(Реквизиты.ОснованиеПлатежа) Тогда
		Возврат НСтр("ru = 'Поле ""Основание платежа"" не заполнено'");
	КонецЕсли;
	
	Классификатор = ОснованияПлатежа(Реквизиты.ВидПеречисления, Период);
	Если Реквизиты.ПеречислениеПоИсполнительномуЛисту Тогда
		ДополнитьОснованиямиИсполнительногоЛистаРаботника(Классификатор, Период);
	КонецЕсли;
	Если Классификатор.НайтиПоЗначению(Реквизиты.ОснованиеПлатежа) = Неопределено Тогда
		СтандартнаяПроверкаЗаполнения = Ложь;
		Комментарий = "";
		ИспользуетсяОснованиеПлатежа(Реквизиты.ВидПеречисления, Период, Комментарий, Реквизиты.ПеречислениеПоИсполнительномуЛисту); // По возможности заполним комментарий
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Неверное значение поля ""Основание платежа"". %1'"),
			Комментарий);
	КонецЕсли;
	
КонецФункции

Функция ПроверитьТипПлатежа(Реквизиты, Период, СтандартнаяПроверкаЗаполнения = Истина)
	
	СтандартнаяПроверкаЗаполнения = Истина;
	
	Если Период >= НачалоДействияПриказа126н() Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Реквизиты.ТипПлатежа) Тогда
		Возврат НСтр("ru = 'Поле ""Тип платежа"" не заполнено'");
	КонецЕсли;
		
	Комментарий = "";
	ДопустимыеЗначения = ДопустимыеТипыПлатежа(Реквизиты, Период, Комментарий);
	Если ДопустимыеЗначения.Найти(Реквизиты.ТипПлатежа) = Неопределено Тогда
		
		СтандартнаяПроверкаЗаполнения = Ложь;
		
		Классификатор = ТипыПлатежа(Реквизиты.ВидПеречисления, Период);
		Если Классификатор.НайтиПоЗначению(Реквизиты.ТипПлатежа) = Неопределено Тогда
			ТекстВступления = НСтр("ru = 'Неверное значение поля ""Тип платежа"".'");
		Иначе
			ТекстВступления = НСтр("ru = 'Возможно, неверно указано значение в поле ""Тип платежа"".'");
		КонецЕсли;
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 %2'"),
			ТекстВступления,
			Комментарий);
		
	КонецЕсли;
	
КонецФункции

Функция ИспользуетсяОснованиеПлатежа(ВидПеречисления,
									 Период,
									 Комментарий = "",
									 ПеречислениеПоИсполнительномуЛисту = Ложь,
									 ЕНП = Ложь) Экспорт
	
	Если ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ИнойПлатеж") Тогда
		Если ПеречислениеПоИсполнительномуЛисту И ДействуетПриказ2020_199н_Отложенный(Период) Тогда
			Комментарий = "";
			Возврат Истина;
		Иначе
			Если ДействуетПриказ107н(Период) Тогда
				Комментарий = КомментарийТеперьУказывается0(Ложь);
			Иначе
				Комментарий = "";
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ЕНП Тогда
		Комментарий = НСтр("ru = 'Для единого налогового платежа указывается ""0""'");
		Возврат Ложь;
	Иначе
		Комментарий = "";
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти
