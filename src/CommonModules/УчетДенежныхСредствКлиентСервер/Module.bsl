// Возвращает признак расчетов с контрагентами
//
Функция ЕстьРасчетыСКонтрагентами(ВидОперации = Неопределено) Экспорт
	
	ЕстьРасчеты =
			ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.ОтПокупателя")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.ОтПоставщика")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.ПрочиеРасчеты")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.ОтКурьерскойКомпанииПочты")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКредитам")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.ОтНашейОрганизации")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Поставщику")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Покупателю")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ПрочиеРасчеты")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ВозвратПродажиВКредит")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.КомиссияБанка")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.НашейОрганизации");
	
	Возврат ЕстьРасчеты;
	
КонецФункции

// Возвращает признак расчетов с контрагентами
//
Функция ЕстьРасчетыПоКредитам(ВидОперации = Неопределено) Экспорт
	
	ЕстьРасчеты = ЕстьРасчетыПоКредитамПолученным(ВидОперации) Или ЕстьРасчетыПоКредитамВыданным(ВидОперации);
		
	Возврат ЕстьРасчеты;
	
КонецФункции

// Возвращает признак расчетов с контрагентами по займам выданным
//
Функция ЕстьРасчетыПоКредитамВыданным(ВидОперации = Неопределено) Экспорт
	
	ЕстьРасчеты =
			ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.РасчетыПоКредитам")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.РасчетыПоКредитам");
	
	Возврат ЕстьРасчеты;
	
КонецФункции

// Возвращает признак расчетов с контрагентами по кредитам (займам) полученным
//
Функция ЕстьРасчетыПоКредитамПолученным(ВидОперации = Неопределено) Экспорт
	
	Возврат ЭтоПолучениеКредитаЗайма(ВидОперации) Или ЭтоВозвратКредитаЗайма(ВидОперации);
	
КонецФункции

Функция ЕстьРасчетыСПокупателями(ВидОперации) Экспорт
	
	ЕстьРасчеты = ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.ОтПокупателя")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Покупателю")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЭквайринга.ВозвратОплатыПокупателю");
	Возврат ЕстьРасчеты;
	
КонецФункции

Функция ЕстьРасчетыСПоставщиками(ВидОперации) Экспорт
	
	ЕстьРасчеты = ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Поставщику")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.ОтПоставщика");
	Возврат ЕстьРасчеты;
	
КонецФункции

Функция ЭтоПолучениеКредитаЗайма(ВидОперации) Экспорт
	
	ЭтоПолучениеКредитаЗайма =
			ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.РасчетыПоКредитам");
	
	Возврат ЭтоПолучениеКредитаЗайма;
	
КонецФункции

Функция ЭтоВозвратКредитаЗайма(ВидОперации) Экспорт
	
	ЭтоВозвратКредитаЗайма = 
		ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.РасчетыПоКредитам");
	
	Возврат ЭтоВозвратКредитаЗайма;
	
КонецФункции

Функция ЭтоУплатаНалога(ВидНалоговогоОбязательства) Экспорт
	
	ЭтоУплатаНалога =
			ВидНалоговогоОбязательства = ПредопределенноеЗначение("Перечисление.ВидыПлатежейВГосБюджет.Налог")
		Или ВидНалоговогоОбязательства = ПредопределенноеЗначение("Перечисление.ВидыПлатежейВГосБюджет.НалогАкт")
		Или ВидНалоговогоОбязательства = ПредопределенноеЗначение("Перечисление.ВидыПлатежейВГосБюджет.НалогСам");
	
	Возврат ЭтоУплатаНалога;
	
КонецФункции

Функция ЭтоУплатаНалогаНаПрибыль(ВидНалога) Экспорт
	
	ЭтоУплатаНалогаНаПрибыль =
			ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.НалогНаПрибыль_РегиональныйБюджет")
		Или ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.НалогНаПрибыль_ФедеральныйБюджет")
		Или ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.НалогНаПрибыль_НалоговыйАгент");
	
	Возврат ЭтоУплатаНалогаНаПрибыль;
	
КонецФункции

// Возвращает вид договора с контрагентом по виду операции
//
Функция ОпределитьВидДоговораСКонтрагентом(ВидОперации = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидОперации) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ВидДоговораПоВидуОпераций = СоответствиеВидыОперацийВидыДоговоров();
	
	ВидДоговора = ВидДоговораПоВидуОпераций[ВидОперации];
	
	Если ВидДоговора = Неопределено Тогда
		Возврат Новый Массив;
	Иначе
		Возврат ВидДоговора;
	КонецЕсли;
	
КонецФункции

Функция СоответствиеВидыОперацийВидыДоговоров(ТипДокумента = Неопределено)
	
	СПоставщиком = Новый Массив;
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоров.СПоставщиком"));
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоров.СКомитентом"));
	
	СПокупателем = Новый Массив;
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоров.СПокупателем"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоров.СКомиссионером"));
	
	Прочее = Новый Массив;
	Прочее.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоров.Прочее"));
	
	// Определение вида операции
	
	ВидДоговораПоВидуОпераций = Новый Соответствие();
	
	Если ТипДокумента = Неопределено Или ТипДокумента = Тип("ДокументСсылка.РасходСоСчета")
		Или ТипДокумента = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Поставщику"), СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Покупателю"), СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ВозвратПродажиВКредит"), СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты"), СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.РасчетыПоКредитам"), Прочее);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ПрочиеРасчеты"), Прочее);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.Покупателю"), СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.РасчетыПоКредитам"), Прочее);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПрочиеРасчеты"), Прочее);
	КонецЕсли;
	
	Если ТипДокумента = Неопределено Или ТипДокумента = Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.ОтПоставщика"), СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.ОтПокупателя"), СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам"), СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКредитам"), СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.РасчетыПоКредитам"), Прочее);
	КонецЕсли;
	
	Если ТипДокумента = Неопределено Или ТипДокумента = Тип("ДокументСсылка.ОперацияПоПлатежнымКартам") Тогда
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя"), СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийЭквайринга.ВозвратОплатыПокупателю"), СПокупателем);
	КонецЕсли;
	
	Возврат ВидДоговораПоВидуОпераций;
	
КонецФункции

// Заполняет в переданном объекте реквизиты платежа в бюджет по умолчанию,
// в соответствии с выбранным пользователем видом перечисления в бюджет.
// Оставлена для совместимости: для тех случаев, где ВидПеречисления задается пользователем явно.
//
// Параметры:
//  Объект - ДокументОбъект.ПлатежноеПоручение, произвольная коллекция - объект, который должен быть заполнен.
//           О составе свойств Объекта см. функцию ПлатежиВБюджетКлиентСерверПереопределяемый.РеквизитыДокумента_ПлатежноеПоручение
//  Контекст - Структура - см. ПлатежиВБюджетКлиентСервер.НовыйКонтекст
//
Процедура ЗаполнитьРеквизитыПлатежаВБюджетПоВидуПеречисления(Объект, Контекст) Экспорт
	
	РеквизитыДокумента = ПлатежиВБюджетКлиентСерверПереопределяемый.РеквизитыДокумента_ПлатежноеПоручение();
	
	ЗначенияРеквизитовОбъекта = Новый Структура;
	Для каждого РеквизитДокумента Из РеквизитыДокумента Цикл
		ЗначенияРеквизитовОбъекта.Вставить(РеквизитДокумента.Значение);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ЗначенияРеквизитовОбъекта, Объект); // Нет уверенности, что в объекте будут все нужные реквизиты
	
	РеквизитыПлатежаВБюджет = ПлатежиВБюджетКлиентСервер.НовыйРеквизитыПлатежаВБюджет();
	Для каждого РеквизитДокумента Из РеквизитыДокумента Цикл
		РеквизитыПлатежаВБюджет[РеквизитДокумента.Ключ] = ЗначенияРеквизитовОбъекта[РеквизитДокумента.Значение];
	КонецЦикла;
	
	Изменения = ПлатежиВБюджетКлиентСервер.ИсправитьЗначенияРеквизитов(
		"ВидПеречисления",
		РеквизитыПлатежаВБюджет,
		Контекст,
		Истина);
	
	ЗначенияЗаполнения = Новый Структура;
	Для Каждого Изменение Из Изменения Цикл
		ИмяРеквизитаДокумента = РеквизитыДокумента[Изменение.Ключ];
		ЗначенияЗаполнения.Вставить(ИмяРеквизитаДокумента, Изменение.Значение);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Объект, ЗначенияЗаполнения);
	
КонецПроцедуры

Функция ПеречислениеЗарплаты(ВидОперации) Экспорт
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Зарплата")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику") Тогда
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция РасчетыСФизическимиЛицами(ВидОперации) Экспорт
	
	Если ПеречислениеЗарплаты(ВидОперации)
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ВыдачаЗаймаСотруднику")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.ВозвратЗаймаСотрудником")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Подотчетнику")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ЛичныеСредстваПредпринимателя") Тогда
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ОчередностьПлатежаПоУмолчанию() Экспорт
	
	Возврат 5;
	
КонецФункции

Функция ОчередностьПлатежаНалогиВзносы() Экспорт
	
	Возврат 5;
	
КонецФункции

Функция ОчередностьПлатежаОплатаТруда() Экспорт
	
	Возврат 3;
	
КонецФункции

Функция ПереводДенегВнутриКомпании(ВидОперации) Экспорт
	
	Возврат ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.ЛичныеСредстваПредпринимателя");
	
КонецФункции

Функция ТипКонтрагентаПоВидуОперации(ВидОперации) Экспорт
	
	Если РасчетыСФизическимиЛицами(ВидОперации) Тогда
		ТипКонтрагента = Тип("СправочникСсылка.ФизическиеЛица");
	ИначеЕсли ПереводДенегВнутриКомпании(ВидОперации) Тогда
		ТипКонтрагента = Тип("СправочникСсылка.Организации");
	Иначе
		ТипКонтрагента = Тип("СправочникСсылка.Контрагенты");
	КонецЕсли;
	
	Возврат ТипКонтрагента;
	
КонецФункции

Функция НомерОбъектаБезПрефикса(Знач НомерОбъекта) Экспорт
	
	НомерОбъекта = ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(СокрЛП(НомерОбъекта), Истина, Истина);
	НомерОбъекта = ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(НомерОбъекта);
	
	Возврат НомерОбъекта;
	
КонецФункции

// 14 дней
//
Функция МаксимальныйПериодВыпискиСбербанк() Экспорт
	
	Возврат 24*60*60*14;
	
КонецФункции

// Возвращает начало действия Указания Банка России от 14.10.2019 N 5286-У
// по указанию кода вида дохода при перечислении дохода физическим лицам.
//
Функция НачалоДействияУказанияБанкаРоссии5286У() Экспорт
	
	Возврат '20200601';
	
КонецФункции

Функция ДействуетУказаниеБанкаРоссии5286У(Период) Экспорт
	
	Возврат Период = Неопределено
		Или Период >= НачалоДействияУказанияБанкаРоссии5286У();
	
КонецФункции

Функция ВступилиВСилуИзменения353ФЗ(Период) Экспорт
	
	Возврат Период = Неопределено Или Период >= '20220501';
	
КонецФункции
