////////////////////////////////////////////////////////////////////////////////
// Подсистема "Сервис доставки".
// ОбщийМодуль.СервисДоставкиВызовСервера.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Имя формы выбора метаданных.
//
// Параметры:
//  ИмяОпределяемогоТипа - Строка - наименование определяемого типа.
// 
// Возвращаемое значение:
//  Строка - имя формы выбора.
//
Функция ИмяФормыВыбораПоОпределяемомуТипу(ИмяОпределяемогоТипа) Экспорт
	
	ОпределяемыйТип = Метаданные.ОпределяемыеТипы.Найти(ИмяОпределяемогоТипа);
	Если ОпределяемыйТип <> Неопределено Тогда
		
		ИмяФормы = "";
		Тип = ОпределяемыйТип.Тип.Типы()[0];
		Менеджер = Метаданные.НайтиПоТипу(Тип);
		Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
			ИмяФормы = "Справочник." + Менеджер.Имя + ".ФормаВыбора";
		ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда
			ИмяФормы = "Документ." + Менеджер.Имя + ".ФормаВыбора";
		КонецЕсли;
		
		Возврат ИмяФормы;
	КонецЕсли;
	
КонецФункции

// Имя формы выбора метаданных.
//
// Параметры:
//  ИмяОпределяемогоТипа - Строка - наименование определяемого типа.
// 
// Возвращаемое значение:
//  Строка - имя формы выбора.
//
Функция ИмяФормыОбъектаПоОпределяемомуТипу(ИмяОпределяемогоТипа) Экспорт
	
	ОпределяемыйТип = Метаданные.ОпределяемыеТипы.Найти(ИмяОпределяемогоТипа);
	Если ОпределяемыйТип <> Неопределено Тогда
		
		ИмяФормы = "";
		Тип = ОпределяемыйТип.Тип.Типы()[0];
		Менеджер = Метаданные.НайтиПоТипу(Тип);
		Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
			ИмяФормы = "Справочник." + Менеджер.Имя + ".ФормаОбъекта";
		ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда
			ИмяФормы = "Документ." + Менеджер.Имя + ".ФормаОбъекта";
		КонецЕсли;
		
		Возврат ИмяФормы;
	КонецЕсли;
	
КонецФункции

Функция ПараметрыЗаказаНаДоставкуПоДокументамОснованиям(ТипГрузоперевозки, Основания) Экспорт
	
	Возврат СервисДоставки.ПараметрыЗаказаНаДоставку(ТипГрузоперевозки, Основания);
	
КонецФункции

Функция ОрганизацияПоУмолчанию(ТипГрузоперевозки) Экспорт
	
	Возврат СервисДоставки.ОрганизацияПоУмолчанию(ТипГрузоперевозки);
	
КонецФункции

Функция ОрганизацияПодключена(Организация) Экспорт
	
	Возврат СервисДоставкиСлужебный.ОрганизацияПодключена(Организация)
	
КонецФункции

Функция СохранитьНастройкиФормыСпискаЗаказов(Настройки) Экспорт
	
	КлючНастроекФормы = "Обработка.СервисДоставки.Форма.СписокЗаказов/ТекущиеДанные";
	ХранилищеСистемныхНастроек.Сохранить(КлючНастроекФормы,,Настройки);
	
	Возврат Настройки;
	
КонецФункции

Функция КонтактнаяИнформацияПоПредставлению(Представление, ТипКонтактнойИнформацииИмя) Экспорт
	
	Если ТипКонтактнойИнформацииИмя = "Телефон" Тогда
		ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон;
	Иначе
		ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес;
	КонецЕсли;
	
	Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Представление, ТипКонтактнойИнформации);
	
КонецФункции

Функция АдресСДополнительнымиПолями(Тип, Адрес) Экспорт
	
	Если Тип <> Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат Адрес;
	КонецЕсли;
	
	Если Адрес = "" Тогда
		СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(Адрес);
		СведенияОбАдресе.ТипАдреса = РаботаСАдресамиКлиентСервер.АдминистративноТерриториальныйАдрес();
		Адрес = РаботаСАдресами.ПоляАдресаВJSON(СведенияОбАдресе);
	КонецЕсли;
	
	ПараметрыАдреса = СервисДоставки.ЗначениеИзСтрокиJSON(Адрес);
	
	Если ПараметрыАдреса.addressType = ""
		ИЛИ ПараметрыАдреса.addressType = "ВСвободнойФорме" Тогда
		ПараметрыАдреса.addressType = РаботаСАдресамиКлиентСервер.АдминистративноТерриториальныйАдрес();
	КонецЕсли;
	
	ДополнительныеПараметры = Новый ТаблицаЗначений();
	ДополнительныеПараметры.Колонки.Добавить("Тип", Новый ОписаниеТипов("Строка"));
	ДополнительныеПараметры.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
	НоваяСтрока = ДополнительныеПараметры.Добавить();
	НоваяСтрока.Тип = НСтр("ru='Квартира'");
	НоваяСтрока = ДополнительныеПараметры.Добавить();
	НоваяСтрока.Тип = НСтр("ru='Этаж'");
	НоваяСтрока = ДополнительныеПараметры.Добавить();
	НоваяСтрока.Тип = НСтр("ru='Подъезд'");
	НоваяСтрока = ДополнительныеПараметры.Добавить();
	НоваяСтрока.Тип = НСтр("ru='Код домофона'");
	
	Помещения = Новый Массив();
	Если ПараметрыАдреса.Свойство("apartments") Тогда
		Помещения = ПараметрыАдреса.apartments;
	КонецЕсли;
	
	МассивУдаления = Новый Массив();
	Ид = Помещения.Количество()-1;
	Пока Ид >= 0 Цикл
		СтрокаПараметра = ДополнительныеПараметры.Найти(Помещения[Ид].type, "Тип");
		Если СтрокаПараметра <> Неопределено Тогда
			СтрокаПараметра.Значение = Помещения[Ид].number;
			МассивУдаления.Добавить(Ид);
		КонецЕсли;
		Ид = Ид - 1;
	КонецЦикла;
	
	Для Каждого ТекИндекс Из МассивУдаления Цикл
		Помещения.Удалить(ТекИндекс);
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ДополнительныеПараметры Цикл
		Параметр = Новый Структура("type,number", ТекСтрока.Тип, ТекСтрока.Значение);
		Помещения.Добавить(Параметр);
	КонецЦикла;
	
	ПараметрыАдреса.Вставить("apartments", Помещения);
	
	Возврат СервисДоставки.ЗначениеВСтрокуJSON(ПараметрыАдреса);
	
КонецФункции

Процедура ПроверитьПодключениеИнтернетПоддержки(ЕстьПодключениеКСервису) Экспорт
	
	СервисДоставки.ПроверитьПодключениеИнтернетПоддержки(ЕстьПодключениеКСервису);
	
КонецПроцедуры

// Получить доступные типы грузоперевозки
//
// Возвращаемое значение:
//  Массив - список доступных типов грузоперевозки.
//
Функция ДоступныеСервисыДоставки() Экспорт
	
	ДоступныеСервисы = Новый Массив();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСервис1СДоставка") = Истина Тогда
		ДоступныеСервисы.Добавить(СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка());
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСервис1СКурьер") = Истина Тогда
		ДоступныеСервисы.Добавить(СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьер());
	КонецЕсли;
	
	Возврат ДоступныеСервисы;
	
КонецФункции

#КонецОбласти
