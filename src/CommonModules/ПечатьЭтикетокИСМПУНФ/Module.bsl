////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, используемые в обработке ПечатьЭтикетокИЦенников
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// См. ПечатьЭтикетокИСМППереопределяемый.СтруктураНастроекЭтикеткаИСМП.
// 
// Параметры:
// 	СтруктураНастроек - Структура - дополнительные параметры.
//
Процедура СтруктураНастроекЭтикеткаИСМП(СтруктураНастроекИтог) Экспорт
	
	СтруктураНастроек = Обработки.ПечатьЭтикетокИЦенников.СтруктураНастроек();
	СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Характеристика");
	КонецЕсли;
	СтруктураНастроек.ОбязательныеПоля.Добавить("ШаблонЭтикетки");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Количество");
	СтруктураНастроек.ОбязательныеПоля.Добавить("НомерВГруппе");
	СтруктураНастроек.ОбязательныеПоля.Добавить("СодержимоеКоличество");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ПредставлениеНоменклатуры");
	СтруктураНастроек.ОбязательныеПоля.Добавить("КодМаркировки");
	СтруктураНастроек.ОбязательныеПоля.Добавить("GTIN");
	
	Для Каждого КлючИЗначение Из СтруктураНастроек Цикл
		СтруктураНастроекИтог.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

// См. ПечатьЭтикетокИСМППереопределяемый.ПечатьЭтикетокИСМП
// 
// Параметры:
// 	ТаблицаДляПечати - Массив - Массив строк таблицы (см. РегистрыСведений.ПулКодовМаркировкиСУЗ.НоваяТаблицаДанныхДляПечатиЭтикеток)
// 	ТабличныйДокумент - ТабличныйДокумент - результат печати
// 	СтруктураНастроек - Структура - Дополнительные параметры для печати
// 	СтандартнаяОбработка - Булево - Признак использования библиотечной печати
Процедура ПечатьЭтикетокИСМП(ТаблицаДляПечати, ТабличныйДокумент, СтруктураНастроек, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ДополнитьТаблицуШтрихкодамиУпаковок(ТаблицаДляПечати);
	ПечатьЭтикеток(ТаблицаДляПечати, ТабличныйДокумент, СтруктураНастроек);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПриПодготовкеСтруктурыДанныхДляПечати(СтруктураНастроек, Режим, Запрос, ИсходныеДанные) Экспорт
	
	Если Режим = "ЭтикеткаКодМаркировкиИСМП" Тогда
		
		Если ИсходныеДанные <> Неопределено Тогда
			
			ЗаполнитьДополнительныеПараметрыШтрихкодовУпаковок(ИсходныеДанные);
			
			НомерНачальнойПозиции = СтрНайти(Запрос.Текст, "(ВЫБРАТЬ");
			СодержимоеКонечнойПозиции = ") КАК ИсходныеДанные";
			НомерКонечнойПозиции  = СтрНайти(Запрос.Текст, СодержимоеКонечнойПозиции);
			ТекстЗаменяемогоПодзапроса = Сред(Запрос.Текст, НомерНачальнойПозиции, НомерКонечнойПозиции
				+ СтрДлина(СодержимоеКонечнойПозиции) - НомерНачальнойПозиции);
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстЗаменяемогоПодзапроса, "&Таблица КАК ИсходныеДанные");
			
			ПронумероватьТаблицуЗначений(ИсходныеДанные, "Порядок");
			Запрос.Параметры.Вставить("Таблица", ИсходныеДанные);
			
		КонецЕсли;
		
	ИначеЕсли Режим = "ШтрихкодыУпаковок" Тогда
		
		Если ИсходныеДанные <> Неопределено Тогда
			
			ЗаполнитьДополнительныеПараметрыШтрихкодовУпаковок(ИсходныеДанные);
			
			НомерНачальнойПозиции = СтрНайти(Запрос.Текст, "(ВЫБРАТЬ");
			СодержимоеКонечнойПозиции = ") КАК ИсходныеДанные";
			НомерКонечнойПозиции  = СтрНайти(Запрос.Текст, СодержимоеКонечнойПозиции);
			ТекстЗаменяемогоПодзапроса = Сред(Запрос.Текст, НомерНачальнойПозиции, НомерКонечнойПозиции
				+ СтрДлина(СодержимоеКонечнойПозиции) - НомерНачальнойПозиции);
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстЗаменяемогоПодзапроса, "&Таблица КАК ИсходныеДанные");
			ПронумероватьТаблицуЗначений(ИсходныеДанные, "Порядок");
			Запрос.Параметры.Вставить("Таблица", ИсходныеДанные);
			
		КонецЕсли;
	КонецЕсли;
	// -- Локализация
КонецПроцедуры

Процедура ПриПечати(КоллекцияПечатныхФорм, ПараметрыПечати, ОбъектыПечати) Экспорт
	// ++ Локализация
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭтикеткаАкцизныеМарки") Тогда
		
		СтруктураНастроек = Обработки.ПечатьЭтикетокИЦенников.СтруктураНастроек();
		СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура");
		СтруктураНастроек.ОбязательныеПоля.Добавить("Характеристика");
		СтруктураНастроек.ОбязательныеПоля.Добавить("КодАкцизнойМарки");
		СтруктураНастроек.ОбязательныеПоля.Добавить("СерияМарки");
		СтруктураНастроек.ОбязательныеПоля.Добавить("НомерМарки");
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		//СформироватьПечатнуюФормуЭтикеткиАкцизныеМарки(ПараметрыПечати, ОбъектыПечати, СтруктураНастроек, ТабличныйДокумент);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЭтикеткаАкцизныеМарки",
			НСтр("ru = 'Этикетки акцизных марок';"),
			ТабличныйДокумент);
			
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭтикеткаКодМаркировкиИСМП") Тогда
		
		СтруктураНастроек = ПечатьЭтикетокИСМП.СтруктураНастроекЭтикеткаИСМП();
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		СформироватьПечатнуюФормуЭтикеткиОбувь(ПараметрыПечати, ОбъектыПечати, СтруктураНастроек, ТабличныйДокумент);
		
		Если ТипЗнч(ТабличныйДокумент) = Тип("Массив") Тогда
			
			ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "ЭтикеткаКодМаркировкиИСМП");
			Если ПечатнаяФорма <> Неопределено Тогда
				КоллекцияПечатныхФорм.Удалить(ПечатнаяФорма);
			КонецЕсли;
			
			КомплектПечатныхФорм = ПодготовитьКомплектПечатныхФорм();
			ПрефиксИмениМакета = СтрШаблон("%1_%2", НСтр("ru = 'ЭтикеткаИСМП';
														|en = 'ISMT label'"), Новый УникальныйИдентификатор);
			НомерМакета = 0;
			Для Каждого СтруктураДокумента Из ТабличныйДокумент Цикл
				
				НомерМакета = НомерМакета + 1;
				ИмяМакета = СтрШаблон("%1_%2", ПрефиксИмениМакета, НомерМакета);
				ПечатнаяФорма = ДобавитьПечатнуюФормуВКомплект(
					КомплектПечатныхФорм, ИмяМакета, "", 1);
				СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ПечатнаяФорма);
				
				УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
					КоллекцияПечатныхФорм,
					ИмяМакета,
					СтруктураДокумента.Заголовок,
					СтруктураДокумента.ТабличныйДокумент);
				
			КонецЦикла;
			
			КомплектПечатныхФорм = Неопределено;
			
		Иначе
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
				КоллекцияПечатныхФорм,
				"ЭтикеткаКодМаркировкиИСМП",
				НСтр("ru = 'Этикетка (обувь, одежда, табак...)';
					|en = 'Label (shoes, clothes, tobacco...)'"),
				ТабличныйДокумент);
		КонецЕсли;
			
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭтикеткаШтрихкодыУпаковки") Тогда
		
		СтруктураНастроек = Обработки.ПечатьЭтикетокИЦенников.СтруктураНастроек();
		СтруктураНастроек.ОбязательныеПоля.Добавить("Штрихкод");
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		СформироватьПечатнуюФормуЭтикеткиШтрихкодыУпаковки(ПараметрыПечати, ОбъектыПечати, СтруктураНастроек, ТабличныйДокумент);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЭтикеткаШтрихкодыУпаковки",
			НСтр("ru = 'Этикетки штрихкодов упаковок';"),
			ТабличныйДокумент);
			
	КонецЕсли;
	// -- Локализация
КонецПроцедуры

Функция ДанныеДляПечатиШтрихкодовУпаковок(ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписанныеШтрихкоды   = Новый Массив;
	НеЗаписанныеШтрихкоды = Новый Массив;
	
	ИндексМассива = 0;
	Для каждого ОбъектПечати Из ОбъектыПечати Цикл
	
		Если ТипЗнч(ОбъектПечати) = Тип("СправочникСсылка.ШтрихкодыУпаковокТоваров") Тогда
			ЗаписанныеШтрихкоды.Добавить(ОбъектПечати);
		Иначе
			НеЗаписанныеШтрихкоды.Добавить(ОбъектПечати);
			ОбъектыПечати.Установить(ИндексМассива, Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка());
		КонецЕсли;
		
		ИндексМассива = ИндексМассива + 1;
		
	КонецЦикла;
	
	ТаблицаШтрихкодов = НоваяТаблицаШтрихкодовУпаковок();
	
	ТипыШтрихкодов = Новый Соответствие;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.ТипШтрихкода КАК ТипШтрихкода,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК Штрихкод,
	|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК Ссылка,
	|	ШтрихкодыУпаковокТоваров.ДатаУпаковки КАК ДатаМаркировки
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.Ссылка В(&ЗаписанныеШтрихкоды)
	|	И ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода <> """"
	|");
	Запрос.УстановитьПараметр("ЗаписанныеШтрихкоды", ЗаписанныеШтрихкоды);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТипыШтрихкодов.Вставить(Выборка.ТипШтрихкода, Истина);
		
		Строка = ТаблицаШтрихкодов.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, Выборка);
		ЗаполнитьСвойстваСтрокиШтрихкодовУпаковокПоШтрихкоду(Строка, Выборка.Штрихкод);
		
	КонецЦикла;
	
	Для каждого НеЗаписанныйШтрихкод Из НеЗаписанныеШтрихкоды Цикл
		
		Строка = ТаблицаШтрихкодов.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, НеЗаписанныйШтрихкод);
		ЗаполнитьСвойстваСтрокиШтрихкодовУпаковокПоШтрихкоду(Строка, НеЗаписанныйШтрихкод.Штрихкод);
		
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаШтрихкодов);
	
КонецФункции

Процедура СформироватьПечатнуюФормуЭтикеткиШтрихкодыУпаковки(ДанныеПечати, ОбъектыПечати, СтруктураНастроек, ТабличныйДокумент) Экспорт
	
	ОбработкаПечатьЭтикетокИЦенников = Обработки.ПечатьЭтикетокИЦенников;
	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаШтрихкодыУпаковок";
	
	ШаблонЭтикетки        = ДанныеПечати.ШаблонЭтикетки;
	КоличествоЭкземпляров = ДанныеПечати.КоличествоЭкземпляров;
	
	СтруктураНастроек.ИсходныеДанные = ЗначениеИзСтрокиВнутр(ДанныеПечати.ИсходныеДанные);
	
	Если Не ДанныеПечати.Свойство("СтруктураМакетаШаблона") Или Не ЗначениеЗаполнено(ДанныеПечати.СтруктураМакетаШаблона) Тогда
		СтруктураШаблона = ШаблонЭтикетки.Шаблон.Получить();
	Иначе
		СтруктураШаблона = ДанныеПечати.СтруктураМакетаШаблона;
	КонецЕсли;
	
	Для Каждого Элемент Из СтруктураШаблона.ПараметрыШаблона Цикл
		СтруктураНастроек.ОбязательныеПоля.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	СтруктураРезультата = ОбработкаПечатьЭтикетокИЦенников.ПодготовитьСтруктуруДанных(СтруктураНастроек,, "ШтрихкодыУпаковок");
	
	Эталон = ОбработкаПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	НомерКолонки = 0;
	НомерРяда = 0;
	
	Область = СтруктураШаблона.МакетЭтикетки.ПолучитьОбласть(СтруктураШаблона.ИмяОбластиПечати);
	
	Для Каждого СтрокаТаблицы Из СтруктураРезультата.ТаблицаТоваров Цикл
		
		ЗаполнитьЗначенияСвойств(ТабличныйДокумент, СтруктураШаблона.МакетЭтикетки, , "ОбластьПечати");
		
		ЗначениеШтрихкода = СтрокаТаблицы["Штрихкод"];
		
		Для каждого ПараметрШаблона Из СтруктураШаблона.ПараметрыШаблона Цикл
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Область.Параметры, ПараметрШаблона.Значение) Тогда
				ИмяПоляВШаблоне = Справочники.ШаблоныЭтикетокИЦенников.ПолучитьИмяПоляВШаблоне(ПараметрШаблона.Ключ);
				НаименованиеКолонки = СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить(ИмяПоляВШаблоне);
				Если НаименованиеКолонки <> Неопределено Тогда
					Область.Параметры[ПараметрШаблона.Значение] = СтрокаТаблицы[НаименованиеКолонки];
				Иначе
					Если ИмяПоляВШаблоне = "СерияМарки" И СтрДлина(ЗначениеШтрихкода) = 150 Тогда
						Область.Параметры[ПараметрШаблона.Значение] = Сред(ЗначениеШтрихкода, 4,3);
					ИначеЕсли ИмяПоляВШаблоне = "НомерМарки" И СтрДлина(ЗначениеШтрихкода) = 150 Тогда
						Область.Параметры[ПараметрШаблона.Значение] = Сред(ЗначениеШтрихкода, 5,8);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Рисунок Из Область.Рисунки Цикл
			Если СтрНайти(Рисунок.Имя, "Штрихкод") = 1 Тогда
				
				ЗначениеШтрихкода = СтрокаТаблицы["Штрихкод"];
				Если ЗначениеЗаполнено(ЗначениеШтрихкода) Тогда
					
					ТипВходныхДанных = 0;
					ЗначениеШтрихкодаДляКомпоненты = ШтрихкодированиеИС.КодGS1ДляКомпонентыПечати(ЗначениеШтрихкода, СтруктураШаблона.ТипКода, ТипВходныхДанных);
					
					Если СтруктураШаблона.Свойство("УровеньЧеткости") Тогда
						УровеньЧеткости = СтруктураШаблона.УровеньЧеткости;
					Иначе
						УровеньЧеткости = 1;
					КонецЕсли;
					
					ПараметрыШтрихкода = Новый Структура;
					ПараметрыШтрихкода.Вставить("Ширина",           Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
					ПараметрыШтрихкода.Вставить("Высота",           Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
					ПараметрыШтрихкода.Вставить("Штрихкод",         СокрЛП(ЗначениеШтрихкодаДляКомпоненты));
					ПараметрыШтрихкода.Вставить("ТипВходныхДанных", ТипВходныхДанных);
					ПараметрыШтрихкода.Вставить("ТипКода",          СтруктураШаблона.ТипКода);
					ПараметрыШтрихкода.Вставить("ОтображатьТекст",  СтруктураШаблона.ОтображатьТекст);
					ПараметрыШтрихкода.Вставить("РазмерШрифта",     СтруктураШаблона.РазмерШрифта * УровеньЧеткости);
					
					Если СтруктураШаблона.Свойство("GS1DatabarКоличествоСтрок") Тогда
						ПараметрыШтрихкода.Вставить("GS1DatabarКоличествоСтрок", СтруктураШаблона.GS1DatabarКоличествоСтрок);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("ТипШрифта") Тогда
						ПараметрыШтрихкода.Вставить("ТипШрифта", СтруктураШаблона.МонохромныйШрифт);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("УголПоворота") Тогда
						ПараметрыШтрихкода.Вставить("УголПоворота", СтруктураШаблона.УголПоворота);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("МонохромныйШрифт") Тогда
						ПараметрыШтрихкода.Вставить("МонохромныйШрифт", СтруктураШаблона.МонохромныйШрифт);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("Масштабировать") Тогда
						ПараметрыШтрихкода.Вставить("Масштабировать", СтруктураШаблона.Масштабировать);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("СохранятьПропорции") Тогда
						ПараметрыШтрихкода.Вставить("СохранятьПропорции", СтруктураШаблона.СохранятьПропорции);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("ВертикальноеВыравнивание") Тогда
						ПараметрыШтрихкода.Вставить("ВертикальноеВыравнивание", СтруктураШаблона.ВертикальноеВыравнивание);
					КонецЕсли;
					
					РезультатГенерацииШтрихкода = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода);
					Если РезультатГенерацииШтрихкода.Картинка <> Неопределено Тогда
						Рисунок.Картинка = РезультатГенерацииШтрихкода.Картинка;
					Иначе
						ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'При генерации картинки штрихкода произошла ошибка';
																	|en = 'Error occurred during the generation of QR code image'"));
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Для Счетчик = 1 По КоличествоЭкземпляров Цикл // Цикл по количеству экземпляров
			
			НомерКолонки = НомерКолонки + 1;
			
			Если НомерКолонки = 1 Тогда
				
				НомерРяда = НомерРяда + 1;
				
				ТабличныйДокумент.Вывести(Область);
				
			Иначе
				
				ТабличныйДокумент.Присоединить(Область);
				
			КонецЕсли;
			
			Если НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали
				И НомерРяда = СтруктураШаблона.КоличествоПоВертикали Тогда
				
				НомерРяда    = 0;
				НомерКолонки = 0;
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
			ИначеЕсли НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали Тогда
				
				НомерКолонки = 0;
				
			КонецЕсли;
			
		КонецЦикла; // Цикл по количеству экземпляров
		
	КонецЦикла; // Цикл по строкам таблицы
	
КонецПроцедуры

#Область ШтрихкодыУпаковок

Процедура ЗаполнитьСвойстваСтрокиШтрихкодовУпаковокПоШтрихкоду(Строка, Штрихкод) ЭКспорт
	
	ЗначениеШтрихкода = Штрихкод;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Строка, "ШтрихкодВBase64")
		И Строка.ШтрихкодВBase64 Тогда
		ЗначениеШтрихкода = ШтрихкодированиеИСКлиентСервер.Base64ВШтрихкод(Штрихкод);
		Если ЗначениеШтрихкода = Неопределено Тогда
			ЗначениеШтрихкода = Штрихкод;
		КонецЕсли;
	КонецЕсли;
	ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкода(ЗначениеШтрихкода);
	
	Если ПараметрыШтрихкода.Результат <> Неопределено Тогда
		
		СвойстваШтрихкода = ПараметрыШтрихкода.Результат;
		
		Если ПараметрыШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC Тогда
			
			Строка.ПрефиксКомпанииGS1 = Формат(СвойстваШтрихкода.ПрефиксКомпанииGS1, "ЧГ=0");
			Строка.ЦифраРасширения    = Формат(СвойстваШтрихкода.ЦифраРасширения, "ЧГ=0");
			Строка.СерийныйНомерSSCC  = Формат(СвойстваШтрихкода.СерийныйНомерSSCC, "ЧГ=0");
			Строка.КонтрольноеЧисло   = Формат(СвойстваШтрихкода.КонтрольноеЧисло, "ЧГ=0");
			
		ИначеЕсли ПараметрыШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.Code128 Тогда
			
			Если СвойстваШтрихкода.НомерФорматаCode128 = 1 Тогда
				Строка.ИдентификаторОрганизации = СвойстваШтрихкода.ИдентификаторОрганизации;
				Строка.ДатаМаркировки           = СвойстваШтрихкода.ДатаМаркировки;
				Строка.НомерПоПорядку           = Формат(СвойстваШтрихкода.НомерПоПорядку, "ЧГ=0");
			ИначеЕсли СвойстваШтрихкода.НомерФорматаCode128 = 2 Тогда
				Строка.ИдентификаторОрганизации = СвойстваШтрихкода.ИдентификаторОрганизации;
				Строка.ТипЛогистическойЕдиницы  = СвойстваШтрихкода.ТипЛогистическойЕдиницы;
				Строка.НомерПлощадкиМаркировки  = СвойстваШтрихкода.НомерПлощадкиМаркировки;
				Строка.ГодГенерацииШтрихкода    = Формат(СвойстваШтрихкода.ГодГенерацииШтрихкода, "ДФ=yyyy");
				Строка.НомерПоПорядку           = Формат(СвойстваШтрихкода.НомерПоПорядку, "ЧГ=0");
			ИначеЕсли СвойстваШтрихкода.НомерФорматаCode128 = 3 Тогда
				Строка.ИдентификаторОрганизации = СвойстваШтрихкода.ИдентификаторОрганизации;
				Строка.НомерПоПорядку           = Формат(СвойстваШтрихкода.НомерПоПорядку, "ЧГ=0");
			КонецЕсли;
			
		ИначеЕсли ПараметрыШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128
			Или ПараметрыШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked
			Или ПараметрыШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix Тогда
			
			Для каждого СтрокаПараметровПримененияGS1 Из ПараметрыШтрихкода.Результат Цикл
				ИмяКолонкиПечати = "ИдентификаторПрименения_" + СтрокаПараметровПримененияGS1.КлючИдентификатора;
				Строка[ИмяКолонкиПечати] = СтрокаПараметровПримененияGS1.Значение;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриПодготовкеСтруктурыДанныхНабора(Режим, СхемаКомпоновкиДанных, ТекстЗапроса) Экспорт
	
	// ++ Локализация
	Если Режим = "ШтрихкодыУпаковок" Тогда
		// Добавляем поля в текст запроса СКД
		// Поля для GS1_128 и GS1_DataBarExpandedStacked одинаковы
		ИдентификаторыТипыКолонок = ШтрихкодыУпаковокКлиентСерверПовтИсп.ТипыКолонокПечатиПоТипуШтрихкода(Перечисления.ТипыШтрихкодов.GS1_128);
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
		ТекстРазрешенныхПолейИсходный =
		"{ВЫБРАТЬ
		|	ШтрихкодУпаковкиТовара.*,
		|	Штрихкод,
		|	Номенклатура.*,
		|	Характеристика.*,
		|	ЦифраРасширения,
		|	ПрефиксКомпанииGS1,
		|	СерийныйНомер,
		|	КонтрольноеЧисло,
		|	ИдентификаторОрганизации,
		|	ДатаМаркировки,
		|	НомерПоПорядку}";
		ТекстРазрешенныхПолейДобавляемый = "";
		
		Для каждого ИдентификаторИТипКолонки Из ИдентификаторыТипыКолонок Цикл
			ИдентификаторПрименения = ИдентификаторИТипКолонки.Ключ;
			ИмяКолонки  = "ИдентификаторПрименения_" + ИдентификаторПрименения;
			ТипЗначения = ИдентификаторИТипКолонки.Значение;
			Если ТипЗначения.СодержитТип(Тип("Число")) Тогда
				ВыражениеПоля = "0";
			ИначеЕсли ТипЗначения.СодержитТип(Тип("Дата")) Тогда
				ВыражениеПоля = "ДАТАВРЕМЯ(1, 1, 1)";
			Иначе
				ВыражениеПоля = """""";
			КонецЕсли;
			СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Запрос.Операторы[0].ВыбираемыеПоля.Добавить(ВыражениеПоля);
			ИндексПоследнейКолонки = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Запрос.Колонки.Количество() - 1;
			ДобавленнаяКолонка = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Запрос.Колонки[ИндексПоследнейКолонки];
			ДобавленнаяКолонка.Псевдоним   = ИмяКолонки;
			СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля.Добавить("ИсходныеДанные." + ИмяКолонки);
			СхемаЗапроса.ПакетЗапросов[1].Операторы[0].ВыбираемыеПоля.Добавить("ИсходныеДанныеПоследнийЗапрос." + ИмяКолонки);
			
			ТекстРазрешенныхПолейДобавляемый = ТекстРазрешенныхПолейДобавляемый
			+ 	",
				|	" + ИмяКолонки;
			
			НовоеПолеНабора(
				СхемаКомпоновкиДанных.НаборыДанных.НаборДанных,
				ИмяКолонки,
				"ПоляGS1." + ИмяКолонки,
				ИмяКолонки,
				ТипЗначения);
		КонецЦикла;
		
		ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
		ТекстРазрешенныхПолейДобавляемый = СтрЗаменить(ТекстРазрешенныхПолейИсходный, "}", ТекстРазрешенныхПолейДобавляемый + "}");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстРазрешенныхПолейИсходный, ТекстРазрешенныхПолейДобавляемый);
		
	ИначеЕсли Режим = "ЭтикеткаКодМаркировкиИСМП" Тогда
		// Добавляем поля в текст запроса СКД
		// Поля для GS1_128 и GS1_DataBarExpandedStacked одинаковы
		ИдентификаторыТипыКолонок = ШтрихкодыУпаковокКлиентСерверПовтИсп.ТипыКолонокПечатиПоТипуШтрихкода(Перечисления.ТипыШтрихкодов.GS1_128);
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
		ТекстРазрешенныхПолейИсходный =
		"{ВЫБРАТЬ
		|	Штрихкод,
		|	КодМаркировки,
		|	НомерВГруппе,
		|	СодержимоеКоличество,
		|	GTIN,
		|	ПредставлениеНоменклатуры,
		|	СрокГодности,
		|	Номенклатура.*,
		|	Характеристика.*,
		|	ШаблонЭтикетки.*,
		|	Количество,
		|	ЦифраРасширения,
		|	ПрефиксКомпанииGS1,
		|	СерийныйНомерSSCC,
		|	КонтрольноеЧисло}";
		ТекстРазрешенныхПолейДобавляемый = "";
		
		Для каждого ИдентификаторИТипКолонки Из ИдентификаторыТипыКолонок Цикл
			ИдентификаторПрименения = ИдентификаторИТипКолонки.Ключ;
			ИмяКолонки  = "ИдентификаторПрименения_" + ИдентификаторПрименения;
			ТипЗначения = ИдентификаторИТипКолонки.Значение;
			Если ТипЗначения.СодержитТип(Тип("Число")) Тогда
				ВыражениеПоля = "0";
			ИначеЕсли ТипЗначения.СодержитТип(Тип("Дата")) Тогда
				ВыражениеПоля = "ДАТАВРЕМЯ(1, 1, 1)";
			Иначе
				ВыражениеПоля = """""";
			КонецЕсли;
			СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Запрос.Операторы[0].ВыбираемыеПоля.Добавить(ВыражениеПоля);
			ИндексПоследнейКолонки = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Запрос.Колонки.Количество() - 1;
			ДобавленнаяКолонка = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Запрос.Колонки[ИндексПоследнейКолонки];
			ДобавленнаяКолонка.Псевдоним   = ИмяКолонки;
			СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля.Добавить("ИсходныеДанные." + ИмяКолонки);
			СхемаЗапроса.ПакетЗапросов[1].Операторы[0].ВыбираемыеПоля.Добавить("ИсходныеДанныеПоследнийЗапрос." + ИмяКолонки);
			
			ТекстРазрешенныхПолейДобавляемый = ТекстРазрешенныхПолейДобавляемый
			+ 	",
				|	" + ИмяКолонки;
			
			НовоеПолеНабора(
				СхемаКомпоновкиДанных.НаборыДанных.НаборДанных,
				ИмяКолонки,
				"ПоляGS1." + ИмяКолонки,
				ИмяКолонки,
				ТипЗначения);
				
		КонецЦикла;
		
		ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
		ТекстРазрешенныхПолейДобавляемый = СтрЗаменить(ТекстРазрешенныхПолейИсходный, "}", ТекстРазрешенныхПолейДобавляемый + "}");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстРазрешенныхПолейИсходный, ТекстРазрешенныхПолейДобавляемый);
		
	КонецЕсли;
	// -- Локализация
	Возврат;
	
КонецПроцедуры

Процедура ЗаполнитьДополнительныеПараметрыШтрихкодовУпаковок(ТаблицаДанныхШтрихкодов) Экспорт
	
	// ++ Локализация
	
	// Добавляем колонки в таблицу.
	ПоддерживаемыеТипыШтрихкодов = Новый Массив;
	ПоддерживаемыеТипыШтрихкодов.Добавить(Перечисления.ТипыШтрихкодов.Code128);
	ПоддерживаемыеТипыШтрихкодов.Добавить(Перечисления.ТипыШтрихкодов.SSCC);
	// PDF417 и DataMatrix имеют одинаковые параметры. Поэтому добавляем только один тип.
	ПоддерживаемыеТипыШтрихкодов.Добавить(Перечисления.ТипыШтрихкодов.PDF417);
	ПоддерживаемыеТипыШтрихкодов.Добавить(Перечисления.ТипыШтрихкодов.DataMatrix);
	// GS1_DataBarExpandedStacked и GS1_128, GS1_DataMatrix имеют одинаковые параметры. Поэтому добавляем только один тип.
	ПоддерживаемыеТипыШтрихкодов.Добавить(Перечисления.ТипыШтрихкодов.GS1_128);
	
	Для каждого ПоддерживаемыйТипШтрихкода Из ПоддерживаемыеТипыШтрихкодов Цикл
		
		ИдентификаторыИТипыКолонокПечати = ШтрихкодыУпаковокКлиентСерверПовтИсп.ТипыКолонокПечатиПоТипуШтрихкода(ПоддерживаемыйТипШтрихкода);
		Для каждого ИдентификаторИТипКолонки Из ИдентификаторыИТипыКолонокПечати Цикл
			ИдентификаторКолонки = ИдентификаторИТипКолонки.Ключ;
			Если ПоддерживаемыйТипШтрихкода = Перечисления.ТипыШтрихкодов.Code128
				ИЛИ ПоддерживаемыйТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC Тогда
				ИмяКолонки = ИдентификаторКолонки;
			Иначе
				ИмяКолонки = "ИдентификаторПрименения_" + ИдентификаторКолонки;
			КонецЕсли;
			Если ТаблицаДанныхШтрихкодов.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
				ТипКолонки = ИдентификаторИТипКолонки.Значение;
				ТаблицаДанныхШтрихкодов.Колонки.Добавить(ИмяКолонки, ТипКолонки);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// Заполняем колонки прочитанными значениями.
	Для каждого СтрокаТаблицы Из ТаблицаДанныхШтрихкодов Цикл
		Если СтрокаТаблицы.ТипШтрихкода = Перечисления.ТипыШтрихкодов.Code128 Тогда
			ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаCode128(СтрокаТаблицы.Штрихкод);
			Если Не ПараметрыШтрихкода.Результат = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыШтрихкода.Результат);
			КонецЕсли;
		ИначеЕсли СтрокаТаблицы.ТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC Тогда
			ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаSSCC(СтрокаТаблицы.Штрихкод);
			Если Не ПараметрыШтрихкода.Результат = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыШтрихкода.Результат);
			КонецЕсли;
		ИначеЕсли СтрокаТаблицы.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128
			Или СтрокаТаблицы.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked
			Или СтрокаТаблицы.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix Тогда
			ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаGS1(СтрокаТаблицы.Штрихкод);
			Если Не ПараметрыШтрихкода.Результат = Неопределено Тогда
				Для каждого СвойстваПараметраШтрихкода Из ПараметрыШтрихкода.Результат Цикл
					ИмяКолонки = "ИдентификаторПрименения_" + СвойстваПараметраШтрихкода.КлючИдентификатора;
					СтрокаТаблицы[ИмяКолонки] = СвойстваПараметраШтрихкода.Значение;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// -- Локализация
	Возврат;
	
КонецПроцедуры


#КонецОбласти


#Область ЭтикеткиИСМП

// Процедура дополняет исходную таблицу данных для печати колонками, необходимыми для заполнения данными 
// штрихкода SSCС, GS1
// 
// Параметры:
// 	ТаблицаДанных - ТаблицаЗначений - Таблица исходных данных
Процедура ДополнитьТаблицуШтрихкодамиУпаковок(ТаблицаДанных) Экспорт
	
	ТаблицаШтрихкодов = НоваяТаблицаШтрихкодовУпаковок();
	Для Каждого КолонкаТаблицаШтрихкодов Из ТаблицаШтрихкодов.Колонки Цикл
		Если ТаблицаДанных.Колонки.Найти(КолонкаТаблицаШтрихкодов.Имя) = Неопределено Тогда
			ТаблицаДанных.Колонки.Добавить(КолонкаТаблицаШтрихкодов.Имя, КолонкаТаблицаШтрихкодов.ТипЗначения, , )
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Штрихкод) 
			И ЗначениеЗаполнено(СтрокаТаблицы.ТипШтрихкода)
			И (СтрокаТаблицы.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128")
				Или СтрокаТаблицы.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_DataBarExpandedStacked")
				Или СтрокаТаблицы.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_DataMatrix")
				Или СтрокаТаблицы.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.DataMatrix")
				Или СтрокаТаблицы.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC")
				Или СтрокаТаблицы.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.Code128")) Тогда
			ЗаполнитьСвойстваСтрокиШтрихкодовУпаковокПоШтрихкоду(СтрокаТаблицы, СтрокаТаблицы.Штрихкод);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура печати этикеток обуви
// 
// Параметры:
// 	ТаблицаДанных - ТаблицаЗначений - Таблица с исходными данными для печати (см. РегистрыСведений.ПулКодовМаркировкиСУЗ.НоваяТаблицаДанныхДляПечатиЭтикеток)
// 	ТабличныйДокумент - ТабличныйДокумент - результат печати
// 	СтруктураНастроек - Структура - Параметры печати
Процедура ПечатьЭтикеток(ТаблицаДанных, ТабличныйДокумент, СтруктураНастроек)
	
	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаИСМП";
	
	// Собираем используемые поля из шаблонов.
	СоответствиеШаблонов = Новый Соответствие;
	Для Каждого СтрокаТЧ Из ТаблицаДанных Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) И СтрокаТЧ.Количество > 0 Тогда
			СоответствиеШаблонов.Вставить(СтрокаТЧ.ШаблонЭтикетки);
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураНастроек.Свойство("СтруктураМакетаШаблона")
		И ЗначениеЗаполнено(СтруктураНастроек.СтруктураМакетаШаблона) Тогда
		СоответствиеШаблонов.Вставить(Справочники.ШаблоныЭтикетокИЦенников.ПустаяСсылка());
	КонецЕсли;
	
	// Заполняем коллекцию обязательных полей и формируем соответствие шаблонов.
	Для Каждого КлючИЗначение Из СоответствиеШаблонов Цикл
		
		ШаблонЭтикетокИЦенников = КлючИЗначение.Ключ;
		
		Если ЗначениеЗаполнено(ШаблонЭтикетокИЦенников) Тогда
			СтруктураШаблона = КлючИЗначение.Ключ.Шаблон.Получить();
		Иначе
			СтруктураШаблона = СтруктураНастроек.СтруктураМакетаШаблона;
		КонецЕсли;
		
		Если СтруктураШаблона = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		// Структура шаблонов.
		СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов.Вставить(ШаблонЭтикетокИЦенников, СтруктураШаблона);
		
		// Добавляем в массив обязательных полей поля, присутствующие в печатной форме ценника.
		Для Каждого Элемент Из СтруктураШаблона.ПараметрыШаблона Цикл
			СтруктураНастроек.ОбязательныеПоля.Добавить(Элемент.Ключ);
		КонецЦикла;
		
	КонецЦикла;
	
	#Область ПодготовкаСтруктурыДанныхШаблона
	СтруктураНастроек.ИсходныеДанные = ТаблицаДанных;
	СтруктураРезультата = Обработки.ПечатьЭтикетокИЦенников.ПодготовитьСтруктуруДанных(СтруктураНастроек,,"ЭтикеткаКодМаркировкиИСМП");
	#КонецОбласти
	
	#Область ФормированиеТабличногоДокумента
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;

	ПараметрыТабличногоДокументЗаполнены = Ложь;
	
	ПредыдущейНомерВГруппе = Неопределено;
	
	Для Каждого СтрокаТовары Из СтруктураРезультата.ТаблицаТоваров Цикл
		
		КоличествоЭтикеток = СтрокаТовары.Количество;
		Если КоличествоЭтикеток > 0 Тогда
			
			ТекущийНомерВГруппе = СтрокаТовары.НомерВГруппе;
			
			Если Не ПараметрыТабличногоДокументЗаполнены Тогда
				// Применение настроек табличного документа.
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, СтруктураШаблона.МакетЭтикетки,, "ОбластьПечати, АвтоМасштаб");
				ПараметрыТабличногоДокументЗаполнены = Истина;
			КонецЕсли;
				
			СтруктураШаблона = СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов.Получить(СтрокаТовары.ШаблонЭтикетки);
	
			Область = СтруктураШаблона.МакетЭтикетки.ПолучитьОбласть(СтруктураШаблона.ИмяОбластиПечати);
	
			Для каждого ПараметрШаблона Из СтруктураШаблона.ПараметрыШаблона Цикл
				// Если ОбщегоНазначенияРТКлиентСервер.ЕстьРеквизитОбъекта(Область.Параметры, ПараметрШаблона.Значение) Тогда // ++
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Область.Параметры, ПараметрШаблона.Значение) Тогда
					НаименованиеКолонки = СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить(Справочники.ХранилищеШаблонов.ИмяПоляВШаблоне(ПараметрШаблона.Ключ));
					Если НаименованиеКолонки <> Неопределено Тогда
						Область.Параметры[ПараметрШаблона.Значение] = СтрокаТовары[НаименованиеКолонки];
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			СтрокаТаблицыДанных = ТаблицаДанных.Найти(СтрокаТовары.КодМаркировки, "КодМаркировки");
			Если СтрокаТаблицыДанных = Неопределено Тогда
				ШтрихкодВBase64 = Ложь;
			Иначе
				ШтрихкодВBase64 = СтрокаТаблицыДанных.ШтрихкодВBase64;
			КонецЕсли;
			
			#Область ПечатьИзображенияШтрихкода
			Для каждого Рисунок Из Область.Рисунки Цикл
				
				Если СтрНайти(Рисунок.Имя, Справочники.ХранилищеШаблонов.ИмяПараметраШтрихкод()) = 1 Тогда
					
					ЗначениеШтрихкода = СтрокаТовары[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить(Справочники.ХранилищеШаблонов.ИмяПараметраШтрихкод())];
					Если ЗначениеЗаполнено(ЗначениеШтрихкода) Тогда
						
						Если СтруктураШаблона.Свойство("УровеньЧеткости") Тогда
							УровеньЧеткости = СтруктураШаблона.УровеньЧеткости;
						Иначе
							УровеньЧеткости = 1;
						КонецЕсли;
						
						ПараметрыШтрихкода = Новый Структура;
						ПараметрыШтрихкода.Вставить("Ширина",          Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе) * УровеньЧеткости);
						ПараметрыШтрихкода.Вставить("Высота",          Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе) * УровеньЧеткости);
						ПараметрыШтрихкода.Вставить("ТипКода",         СтруктураШаблона.ТипКода);
						ПараметрыШтрихкода.Вставить("ОтображатьТекст", СтруктураШаблона.ОтображатьТекст);
						ПараметрыШтрихкода.Вставить("РазмерШрифта",    СтруктураШаблона.РазмерШрифта * УровеньЧеткости);
						
						Если ШтрихкодВBase64 Тогда
							ПараметрыШтрихкода.Вставить("ТипВходныхДанных", 1);
							ПараметрыШтрихкода.Вставить("Штрихкод", ЗначениеШтрихкода);
						Иначе
							ПараметрыШтрихкода.Вставить("ТипВходныхДанных", 0);
							ПараметрыШтрихкода.Вставить("Штрихкод", ШтрихкодированиеИС.КодGS1ДляКомпонентыПечати(ЗначениеШтрихкода, СтруктураШаблона.ТипКода));
						КонецЕсли;
						
						Если СтруктураШаблона.Свойство("GS1DatabarКоличествоСтрок") Тогда
							ПараметрыШтрихкода.Вставить("GS1DatabarКоличествоСтрок", СтруктураШаблона.GS1DatabarКоличествоСтрок);
						КонецЕсли;
						Если СтруктураШаблона.Свойство("ТипШрифта") Тогда
							ПараметрыШтрихкода.Вставить("ТипШрифта", СтруктураШаблона.МонохромныйШрифт);
						КонецЕсли;
						Если СтруктураШаблона.Свойство("УголПоворота") Тогда
							ПараметрыШтрихкода.Вставить("УголПоворота", СтруктураШаблона.УголПоворота);
						КонецЕсли;
						Если СтруктураШаблона.Свойство("МонохромныйШрифт") Тогда
							ПараметрыШтрихкода.Вставить("МонохромныйШрифт", СтруктураШаблона.МонохромныйШрифт);
						КонецЕсли;
						Если СтруктураШаблона.Свойство("Масштабировать") Тогда
							ПараметрыШтрихкода.Вставить("Масштабировать", СтруктураШаблона.Масштабировать);
						КонецЕсли;
						Если СтруктураШаблона.Свойство("СохранятьПропорции") Тогда
							ПараметрыШтрихкода.Вставить("СохранятьПропорции", СтруктураШаблона.СохранятьПропорции);
						КонецЕсли;
						Если СтруктураШаблона.Свойство("ВертикальноеВыравнивание") Тогда
							ПараметрыШтрихкода.Вставить("ВертикальноеВыравнивание", СтруктураШаблона.ВертикальноеВыравнивание);
						КонецЕсли;
						
						РезультатГенерацииШтрихкода = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода);
						Если РезультатГенерацииШтрихкода.Картинка <> Неопределено Тогда
							Рисунок.Картинка = РезультатГенерацииШтрихкода.Картинка;
						Иначе
							ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'При генерации картинки штрихкода произошла ошибка';
																		|en = 'Error occurred during the generation of QR code image'"));
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если СтрНайти(Рисунок.Имя, "GTIN") = 1 Тогда
					
					ЗначениеШтрихкода = СтрокаТовары[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить("GTIN")];
					Если ЗначениеЗаполнено(ЗначениеШтрихкода) Тогда
						
						Если СтруктураШаблона.Свойство("УровеньЧеткости") Тогда
							УровеньЧеткости = СтруктураШаблона.УровеньЧеткости;
						Иначе
							УровеньЧеткости = 1;
						КонецЕсли;
						
						ПараметрыШтрихкода = Новый Структура;
						ПараметрыШтрихкода.Вставить("Ширина",          Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе) * УровеньЧеткости);
						ПараметрыШтрихкода.Вставить("Высота",          Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе) * УровеньЧеткости);
						ПараметрыШтрихкода.Вставить("ТипКода",         99);
						ПараметрыШтрихкода.Вставить("ОтображатьТекст", СтруктураШаблона.ОтображатьТекст);
						ПараметрыШтрихкода.Вставить("РазмерШрифта",    СтруктураШаблона.РазмерШрифта * УровеньЧеткости);
						ПараметрыШтрихкода.Вставить("ТипВходныхДанных", 0);
						ПараметрыШтрихкода.Вставить("Штрихкод", ЗначениеШтрихкода);
						
						Если СтруктураШаблона.Свойство("ТипШрифта") Тогда
							ПараметрыШтрихкода.Вставить("ТипШрифта", СтруктураШаблона.МонохромныйШрифт);
						КонецЕсли;
						Если СтруктураШаблона.Свойство("УголПоворота") Тогда
							ПараметрыШтрихкода.Вставить("УголПоворота", СтруктураШаблона.УголПоворота);
						КонецЕсли;
						Если СтруктураШаблона.Свойство("МонохромныйШрифт") Тогда
							ПараметрыШтрихкода.Вставить("МонохромныйШрифт", СтруктураШаблона.МонохромныйШрифт);
						КонецЕсли;
						Если СтруктураШаблона.Свойство("Масштабировать") Тогда
							ПараметрыШтрихкода.Вставить("Масштабировать", СтруктураШаблона.Масштабировать);
						КонецЕсли;
						Если СтруктураШаблона.Свойство("СохранятьПропорции") Тогда
							ПараметрыШтрихкода.Вставить("СохранятьПропорции", СтруктураШаблона.СохранятьПропорции);
						КонецЕсли;
						Если СтруктураШаблона.Свойство("ВертикальноеВыравнивание") Тогда
							ПараметрыШтрихкода.Вставить("ВертикальноеВыравнивание", СтруктураШаблона.ВертикальноеВыравнивание);
						КонецЕсли;
						
						РезультатГенерацииШтрихкода = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода);
						Если РезультатГенерацииШтрихкода.Картинка <> Неопределено Тогда
							Рисунок.Картинка = РезультатГенерацииШтрихкода.Картинка;
						Иначе
							ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'При генерации картинки штрихкода произошла ошибка';
																		|en = 'Error occurred during the generation of QR code image'"));
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			#КонецОбласти
			
			#Область КоличествоЭкземпляров
			Для Инд = 1 По КоличествоЭтикеток Цикл // Цикл по количеству экземпляров
				
				Если СтруктураНастроек.КаждаяЭтикеткаНаНовомЛисте Тогда
					
					ТабличныйДокумент.Вывести(Область);
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					
				Иначе
					
					Если ПредыдущейНомерВГруппе = Неопределено Тогда
						ПредыдущейНомерВГруппе = ТекущийНомерВГруппе;
					КонецЕсли;
					Присоединять = Истина;
					Если ПредыдущейНомерВГруппе <> ТекущийНомерВГруппе Тогда
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						ПредыдущейНомерВГруппе = ТекущийНомерВГруппе;
						Присоединять = Ложь;
					КонецЕсли;
					
					Если Присоединять И ТабличныйДокумент.ПроверитьПрисоединение(Область) Тогда
						
						ТабличныйДокумент.Присоединить(Область);
						
					Иначе
						
						Если Не ТабличныйДокумент.ПроверитьВывод(Область) И Присоединять Тогда
							ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						КонецЕсли;
						
						ТабличныйДокумент.Вывести(Область);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла; // Цикл по количеству экземпляров
			#КонецОбласти
	
		КонецЕсли;
	
	КонецЦикла; // Цикл по строкам таблицы товаров
	// -- Локализация
	
#КонецОбласти
	
КонецПроцедуры

Процедура СформироватьПечатнуюФормуЭтикеткиОбувь(ДанныеПечати, ОбъектыПечати, СтруктураНастроек, ТабличныйДокумент) Экспорт
	
	РегистрыСведений.ПулКодовМаркировкиСУЗ.РаспечататьЭтикеткиИЗафиксироватьДатуПечати(ДанныеПечати, ТабличныйДокумент, СтруктураНастроек);
	
КонецПроцедуры


#КонецОбласти


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НоваяТаблицаШтрихкодовУпаковок() Экспорт
	
	Таблица = ТаблицаШтрихкодыУпаковок();
	
	ЗначенияТиповШтрихкодов = Метаданные.Перечисления.ТипыШтрихкодов.ЗначенияПеречисления;
	Для каждого МетаданныеЗначенияПеречисления Из ЗначенияТиповШтрихкодов Цикл
		ТипШК = Перечисления.ТипыШтрихкодов[МетаданныеЗначенияПеречисления.Имя];
		КолонкиТипаШК = ШтрихкодыУпаковокКлиентСерверПовтИсп.ТипыКолонокПечатиПоТипуШтрихкода(ТипШК);
		Для каждого КлючИЗначение Из КолонкиТипаШК Цикл
			Если ТипШК = Перечисления.ТипыШтрихкодов.GS1_128
				Или ТипШК = Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked
				Или ТипШК = Перечисления.ТипыШтрихкодов.GS1_DataMatrix Тогда
				ИмяКолонки = "ИдентификаторПрименения_" + КлючИЗначение.Ключ;
			Иначе
				ИмяКолонки = КлючИЗначение.Ключ;
			КонецЕсли;
			
			Если Таблица.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
				Таблица.Колонки.Добавить(ИмяКолонки, КлючИЗначение.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

Функция ТаблицаШтрихкодыУпаковок() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Ссылка"         , Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	Результат.Колонки.Добавить("ТипШтрихкода"   , Новый ОписаниеТипов("ПеречислениеСсылка.ТипыШтрихкодов"));
	Результат.Колонки.Добавить("Штрихкод"       , Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(200)));
	Результат.Колонки.Добавить("Номенклатура"   , Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Результат.Колонки.Добавить("Характеристика" , Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Упаковки = Новый Массив;
	Упаковки.Добавить(Тип("СправочникСсылка.ЕдиницыИзмерения"));
	Результат.Колонки.Добавить("Упаковка"       , Новый ОписаниеТипов(Упаковки));
	Результат.Колонки.Добавить("ДатаМаркировки" , Новый ОписаниеТипов("Дата"));
	
	Возврат Результат;
	
КонецФункции

// Возвращает ссылку на новое поле в переданном наборе данных
//
// Параметры:
//  НаборДанных  - НаборДанныхЗапросСхемыКомпоновкиДанных, НаборДанныхОбъектСхемыКомпоновкиДанных - набор данных в
//      котором необходимо создать новое поле
//  Поле         - Строка - имя нового поля схемы компоновки данных
//  ПутьКДанным  - Строка - путь к данным нового поля схемы компоновки данных (необязательное по умолчанию равно "")
//  Заголовок    - Строка - заголовок нового поля схемы компоновки данных (необязательное по умолчанию равно "")
//  ТипЗначения  - ОписаниеТипов - тип данных нового поля схемы компоновки данных (необязательное по умолчанию Неопределено).
//
// Возвращаемое значение:
//  ПолеНабораДанныхСхемыКомпоновкиДанных - описание возвращаемого значения.
//
Функция НовоеПолеНабора(НаборДанных, Поле, ПутьКДанным = "", Заголовок = "", ТипЗначения = Неопределено) Экспорт
	
	Если ПустаяСтрока(ПутьКДанным) Тогда
		ПутьКДанным = Поле;
	КонецЕсли;
	
	Если ПустаяСтрока(Заголовок) Тогда
		Заголовок = Поле;
	КонецЕсли;
	
	НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	НовоеПоле.Поле = Поле;
	НовоеПоле.ПутьКДанным = ПутьКДанным;
	НовоеПоле.Заголовок = Заголовок;
	Если ТипЗначения <> Неопределено Тогда
		НовоеПоле.ТипЗначения = ТипЗначения;
	КонецЕсли;
	
	Возврат НовоеПоле;
	
КонецФункции

// Возвращает настройки комплекта печатных форм, используемых для объекта
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица значений с колонками:
//   * Имя           - Строка - внутреннее имя печатной формы.
//   * Представление - Строка - пользовательской представление печатной формы.
//   * Экземпляров   - Число - количество экземпляров, выводимых на печать.
//   * Печатать      - Булево - признак, указывающий на необходимость печати печатной формы.
//   * Ссылка        - ЛюбаяСсылка
//
Функция ПодготовитьКомплектПечатныхФорм()
	
	КомплектПечатныхФорм = Новый ТаблицаЗначений();
	КомплектПечатныхФорм.Колонки.Добавить("Имя");
	КомплектПечатныхФорм.Колонки.Добавить("Представление");
	КомплектПечатныхФорм.Колонки.Добавить("Экземпляров");
	КомплектПечатныхФорм.Колонки.Добавить("Печатать");
	КомплектПечатныхФорм.Колонки.Добавить("Ссылка");
	
	Возврат КомплектПечатныхФорм;
	
КонецФункции

// Добавляет печатную форму в таблицу с комплектом печатных форм
// Флаг "Печатать" устанавливается в Истина, если количество печатных форм больше нуля.
//
// Параметры:
//  КомплектПечатныхФорм - см. ПодготовитьКомплектПечатныхФорм
//  Имя - Строка - внутреннее имя печатной формы
//  Представление - Строка - представление печатной формы
//  Экземпляров - Число - количество экземпляров, выводимых на печать
//
// Возвращаемое значение:
//  СтрокаТаблицыЗначений - строка с добавленной печатной формой.
//
Функция ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, Имя, Представление, Экземпляров = 0)
	
	НоваяПечатнаяФорма = КомплектПечатныхФорм.Добавить();
	НоваяПечатнаяФорма.Имя = Имя;
	НоваяПечатнаяФорма.Представление = Представление;
	НоваяПечатнаяФорма.Экземпляров = Экземпляров;
	НоваяПечатнаяФорма.Печатать = Экземпляров > 0;
	
	Возврат НоваяПечатнаяФорма;
	
КонецФункции

// Копирует строку в коллекцию печатных форм из строки настроек печати комплекта
//
// Параметры:
// 	КоллекцияПечатныхФорм - ТаблицаЗначений - таблица значений, передаваемая в процедуру Печать() модуля менеджера:
// 		* ИмяМакета - Строка
// 		* Экземпляров - Число
// 		* ИмяВРЕГ - Строка
// 	НастройкаПечати - СтрокаТаблицыЗначений - строка таблицы, возвращаемой функцией ПодготовитьКомплектПечатныхФорм(), содержит:
// 		* Имя - Строка
//
Процедура СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, НастройкаПечати)
	
	НоваяСтрока = КоллекцияПечатныхФорм.Добавить();
	НоваяСтрока.ИмяМакета = НастройкаПечати.Имя;
	НоваяСтрока.Экземпляров = НастройкаПечати.Экземпляров;
	НоваяСтрока.ИмяВРЕГ = ВРЕГ(НоваяСтрока.ИмяМакета);
	
КонецПроцедуры

Процедура ДобавитьПоляКомпоновкиИдентификаторовШтрихкодовУпаковок(СхемаКомпоновкиДанных) Экспорт
	
	ЗапросНабораДанных = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос;
	
	СвойстваИдентификаторов = ШтрихкодыУпаковокКлиентСерверПовтИсп.СвойстваКлючейИдентификаторовПрименения();
	
	ИдентификаторыИТипыКолонокGS1 = ШтрихкодыУпаковокКлиентСерверПовтИсп.ТипыКолонокПечатиПоТипуШтрихкода(Перечисления.ТипыШтрихкодов.GS1_128);
	
	Для каждого ИдентификаторИТипКолонки Из ИдентификаторыИТипыКолонокGS1 Цикл
		
		КлючИдентификатора = ИдентификаторИТипКолонки.Ключ;
		СвойстваИдентификатора = СвойстваИдентификаторов.Получить(КлючИдентификатора);
		
		ИмяПоля = "ИдентификаторПрименения_" + КлючИдентификатора;
		ТипПоля = ИдентификаторИТипКолонки.Значение;
		Если ТипПоля.СодержитТип(Тип("Число")) Тогда
			ВыражениеПоля = "0";
		ИначеЕсли ТипПоля.СодержитТип(Тип("Дата")) Тогда
			ВыражениеПоля = "ДАТАВРЕМЯ(1,1,1)";
		Иначе
			ВыражениеПоля = """""";
		КонецЕсли;
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ЗапросНабораДанных);
		ОписаниеПолейВложенногоЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Запрос.Операторы[0].ВыбираемыеПоля;
		ОписаниеКолонокВложенногоЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Запрос.Колонки;
		
		НовоеПоле = ОписаниеПолейВложенногоЗапроса.Добавить(ВыражениеПоля);
		Колонка   = ОписаниеКолонокВложенногоЗапроса.Найти(НовоеПоле);
		Колонка.Псевдоним = ИмяПоля;
		
		ЗапросНабораДанных = СхемаЗапроса.ПолучитьТекстЗапроса();
		ЗапросНабораДанных = ДобавитьПолеВыборкиВЗапрос(ЗапросНабораДанных, ИмяПоля, ИмяПоля, 0, Ложь,   Истина);
		ЗапросНабораДанных = ДобавитьПолеВыборкиВЗапрос(ЗапросНабораДанных, ИмяПоля, ИмяПоля, 1, Истина, Истина);
		
		НовоеПолеНабора(
			СхемаКомпоновкиДанных.НаборыДанных.НаборДанных,
			ИмяПоля,
			"ПоляGS1." + ИмяПоля,
			СвойстваИдентификатора.ПредставлениеИдентификатораДляУпорядочивания,
			ТипПоля);
		
	КонецЦикла;
	
	СхемаКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос = ЗапросНабораДанных;
	
КонецПроцедуры

// Добавляет новое поле в конец секции выборки переданного запроса
//
// Параметры:
//  Запрос - Строка, Запрос - текст запроса или запрос.
//  ВыражениеПоля - Строка - выражение поля для секции выборки.
//  ПсевдонимПоля - Строка - псевдоним поля для секции выборки.
//  ИндексЗапросаВПакете - Число - индекс запроса в пакете запросов. Если не задано, то последний запрос в пакете.
//  РасширениеЯзыкаЗапросовСКД - Булево - Истина, когда требуется дополнительно добавить поле в секцию
//  				ВЫБРАТЬ расширения языка запросов СКД.
//  ЗаменятьСуществующееПоле - Булево - Истина, когда требуется дополнительно добавить поле в запрос даже
//  				если оно было добавлено ранее. Прежнее поле будет удалено.
//
// Возвращаемое значение:
//  Строка, Запрос - измененный текст запроса или запрос.
//
Функция ДобавитьПолеВыборкиВЗапрос(Знач Запрос, ВыражениеПоля, ПсевдонимПоля = "", Знач ИндексЗапросаВПакете = Неопределено, РасширениеЯзыкаЗапросовСКД = Ложь, ЗаменятьСуществующееПоле = Ложь)
	
	Если ТипЗнч(Запрос) = Тип("Строка") Тогда
		ТекстЗапроса = Запрос;
	ИначеЕсли ТипЗнч(Запрос) = Тип("Запрос") Тогда 
		ТекстЗапроса = Запрос.Текст;
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректный тип параметра 1';
								|en = 'Incorrect type of parameter 1'") ;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ИзменяемыйЗапрос = ЗапросПакетаЗапросов(СхемаЗапроса, ИндексЗапросаВПакете);
	
	Если ТипЗнч(ИзменяемыйЗапрос) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
		ВызватьИсключение НСтр("ru = 'Невозможно добавить поля в запрос уничтожения таблицы.';
								|en = 'Cannot add fields to the table removal query.'"); 
	КонецЕсли;
	
	Колонки = ИзменяемыйЗапрос.Колонки;
	// Проверка, что колонка была добавлена ранее
	КолонкаПоПсевдониму = Колонки.Найти(ПсевдонимПоля);
	КолонкаУжеДобавлена = (КолонкаПоПсевдониму <> Неопределено);
	
	Если КолонкаУжеДобавлена И ЗаменятьСуществующееПоле Тогда
		Колонки.Удалить(Колонки.Индекс(КолонкаПоПсевдониму));
	КонецЕсли;
	
	Для ИндексОператора = 0 По ИзменяемыйЗапрос.Операторы.Количество() - 1 Цикл
		
		Для Каждого Источник Из ИзменяемыйЗапрос.Операторы[ИндексОператора].Источники Цикл
			Если ТипЗнч(Источник.Источник) = Тип("ОписаниеВременнойТаблицыСхемыЗапроса")
				И Не СтрНайти(ВыражениеПоля, Источник.Источник.Псевдоним) = 0 Тогда
				ИмяПоля = СтрЗаменить(ВыражениеПоля, Источник.Источник.Псевдоним + ".", "");
				Источник.Источник.ДоступныеПоля.Добавить(ИмяПоля);
			КонецЕсли;
		КонецЦикла;
		
		ВыбираемыеПоля = ИзменяемыйЗапрос.Операторы[ИндексОператора].ВыбираемыеПоля;
		
		НовоеПоле = ВыбираемыеПоля.Добавить(ВыражениеПоля);
		
		НоваяКолонка = Колонки.Найти(НовоеПоле);
		Если ЗначениеЗаполнено(ПсевдонимПоля) Тогда
			НоваяКолонка.Псевдоним = ПсевдонимПоля;
		КонецЕсли;
		
		// Только в первом запросе могут быть поля для СКД
		Если ИндексОператора = 0 И РасширениеЯзыкаЗапросовСКД Тогда
			ВыражениеСодержитПараметр = СтрНайти(ВыражениеПоля, "&");
			
			Если ИзменяемыйЗапрос.ПоляВыбораКомпоновкиДанных.Найти(ПсевдонимПоля) = Неопределено Тогда
				ПолеКД = ИзменяемыйЗапрос.ПоляВыбораКомпоновкиДанных.Добавить(ПсевдонимПоля); // ПолеВыбораКомпоновкиДанныхСхемыЗапроса -
				ПолеКД.Псевдоним = ПсевдонимПоля;
				ПолеКД.ИспользоватьРеквизиты = Не ВыражениеСодержитПараметр;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Удалим "мусор" схемы запроса
	НомерПоля = 1;
	ИскомаяПодстрока = " КАК Поле" + НомерПоля;
	НайденоМусорноеПоле = СтрНайти(ТекстЗапроса, ИскомаяПодстрока) > 0;
	Пока НайденоМусорноеПоле Цикл 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИскомаяПодстрока, "");
		
		НомерПоля = НомерПоля + 1;
		ИскомаяПодстрока = " КАК Поле" + НомерПоля;
		НайденоМусорноеПоле = СтрНайти(ТекстЗапроса, ИскомаяПодстрока) > 0;
	КонецЦикла;
	
	НовыйТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Если ТипЗнч(Запрос) = Тип("Строка") Тогда
		Запрос = НовыйТекстЗапроса;
	ИначеЕсли ТипЗнч(Запрос) = Тип("Запрос") Тогда 
		Запрос.Текст = НовыйТекстЗапроса;
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

// Возвращает схему запроса по значению переданного индекса в пакете запросов.
//
// Параметры:
//  СхемаЗапроса - СхемаЗапроса - схема запроса.
//  ИндексЗапросаВПакете - Число - индекс запроса в пакете запросов. Если не задано, то последний запрос в пакете.
//
// Возвращаемое значение:
//  ЗапросВыбораСхемыЗапроса, ЗапросУничтоженияТаблицыСхемыЗапроса - измененный текст запроса или запрос.
//
Функция ЗапросПакетаЗапросов(Знач СхемаЗапроса, ИндексЗапросаВПакете = Неопределено)
	Перем ЗапросПакетаЗапросов;
	
	ПакетЗапросов = СхемаЗапроса.ПакетЗапросов;
	
	Если ИндексЗапросаВПакете = Неопределено Тогда
		ИндексЗапросаВПакете = ПакетЗапросов.Количество() - 1;
	КонецЕсли;
	
	ЗапросПакетаЗапросов = ПакетЗапросов.Получить(ИндексЗапросаВПакете);
	
	Возврат ЗапросПакетаЗапросов;
КонецФункции

#КонецОбласти

#Область КомпоновкаДанных

// Находит среди элементов полей СКД поле по полному имени.
//
// Параметры:
//  Элементы - ПолеКомпоновкиДанных - поля СКД.
//  ПолноеИмя - Строка - полное имя поля СКД.
//  Кэш - Соответствие - соответствие полей и наименований СКД.
//
// Возвращаемое значение:
//	ПолеКомпоновкиДанных - поле СКД по полному имени.
//
Функция НайтиПолеСКДПоПолномуИмени(Элементы, ПолноеИмя, Кэш = Неопределено) Экспорт
	
	Если Кэш <> Неопределено Тогда
		Поле = Кэш.Получить(ПолноеИмя);
		Если Поле <> Неопределено Тогда
			Возврат Поле;
		КонецЕсли;
	КонецЕсли;
	
	МассивЧастейИмен = ИзПолногоИмениПоляПолучитьЧасти(ПолноеИмя);
	КоличествоЧастей = МассивЧастейИмен.Количество();
	
	ТекущееИмя = МассивЧастейИмен[0];
	Поле = НайтиПолеСКДПоИмени(Элементы, ТекущееИмя, Кэш);
	Если Поле = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Сч = 2 По КоличествоЧастей Цикл
		ТекущееИмя = ТекущееИмя +"." + МассивЧастейИмен[Сч-1];
		Поле = НайтиПолеСКДПоИмени(Поле.Элементы, ТекущееИмя, Кэш);
		Если Поле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Если Кэш <> Неопределено Тогда
		Кэш.Вставить(ПолноеИмя, Поле);
	КонецЕсли;
	
	Возврат Поле;
	
КонецФункции

// Получает полное имя поля по частям.
//
// Параметры:
//	ПолноеИмя - полное имя поля СКД.
//
// Возвращаемое значение:
//	МассивЧастей - массив, содержащий части полного имени.
//
Функция ИзПолногоИмениПоляПолучитьЧасти(ПолноеИмя)

	МассивЧастей = Новый Массив;
	ИмяДляОбработки = ПолноеИмя;
	
	Пока НЕ ПустаяСтрока(ИмяДляОбработки) Цикл
		Если Лев(ИмяДляОбработки, 1) = "[" Тогда
			
			Позиция = Найти(ИмяДляОбработки, "]");
			Если Позиция = 0 Тогда
				МассивЧастей.Добавить(Сред(ИмяДляОбработки, 2));
				ИмяДляОбработки = "";
			Иначе
				МассивЧастей.Добавить(Сред(ИмяДляОбработки, 1, Позиция));
				ИмяДляОбработки = Сред(ИмяДляОбработки, Позиция + 2);
			КонецЕсли;
			
		Иначе
			
			Позиция = Найти(ИмяДляОбработки, ".");
			Если Позиция = 0 Тогда
				МассивЧастей.Добавить(ИмяДляОбработки);
				ИмяДляОбработки = "";
			Иначе
				МассивЧастей.Добавить(Лев(ИмяДляОбработки, Позиция - 1));
				ИмяДляОбработки = Сред(ИмяДляОбработки, Позиция + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЧастей;

КонецФункции

// Находит среди элементов полей СКД поле по имени.
//
// Параметры:
//  Элементы - ПолеКомпоновкиДанных - поля СКД.
//  Имя - Строка - имя поля СКД.
//  Кэш - Соответствие - соответствие полей и наименований СКД.
//
// Возвращаемое значение:
//  ПолеКомпоновкиДанных - поле СКД по полному имени.
//
Функция НайтиПолеСКДПоИмени(Элементы, Имя, Кэш = Неопределено) Экспорт
	
	Если Кэш <> Неопределено Тогда
		Элемент = Кэш.Получить(Имя);
		Если Элемент <> Неопределено Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Элемент Из Элементы Цикл
		Если ВРЕГ(Строка(Элемент.Поле)) = ВРЕГ(Имя) Тогда
			
			Если Кэш <> Неопределено Тогда
				Кэш.Вставить(Имя, Элемент);
			КонецЕсли;
			
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ОбщегоНазначения

// Заполняет колонку таблицы значений последовательными номерами.
//
// Параметры:
//  Таблица - ТаблицаЗначений - таблица значений, строки которой нужно пронумеровать.
//  ИмяКолонкиНомераСтроки - КолонкаТаблицыЗначений - колонка таблицы значений, в которой будут указаны номера строк.
//
Процедура ПронумероватьТаблицуЗначений(Таблица, ИмяКолонкиНомераСтроки) Экспорт
	
	// Добавлена проверка на существование колонки
	Если Таблица.Колонки.Найти(ИмяКолонкиНомераСтроки) = Неопределено Тогда
		Таблица.Колонки.Добавить(ИмяКолонкиНомераСтроки, ОбщегоНазначения.ОписаниеТипаЧисло(15, 0));
	КонецЕсли;

	КоличествоСтрок = Таблица.Количество() - 1;
	Для НомерСтроки = 0 По КоличествоСтрок Цикл
		Таблица[НомерСтроки][ИмяКолонкиНомераСтроки] = НомерСтроки;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти