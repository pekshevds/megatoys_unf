#Область СлужебныйПрограммныйИнтерфейс

#Область Локализация

// Обработчик события вызывается на сервере при открытии формы конфигурации.
//   Выполняется определение необходимости встраивания подсистем (с учетом их наличия) в форму.
//
// Параметры:
//   Форма            - ФормаКлиентскогоПриложения - форма конфигурации
//   МодулиИнтеграции - Массив           - используемые модули интеграции
//
Процедура ПриОпределенииПараметровИнтеграцииФормыПрикладногоОбъекта(Форма, МодулиИнтеграции) Экспорт
	
	ИнтеграцияИСУНФ.ПриОпределенииПараметровИнтеграцииФормыПрикладногоОбъекта(Форма, МодулиИнтеграции);
	
КонецПроцедуры

// Серверные обработчики БГосИС элементов прикладных форм
//
// Параметры:
//   Форма                   - ФормаКлиентскогоПриложения - форма, из которой происходит вызов процедуры.
//   Элемент                 - Произвольный     - элемент-источник события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	ИнтеграцияИСУНФ.ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры);
	
КонецПроцедуры

// Вызывается после записи объекта на сервере.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - источник вызова
Процедура ПослеЗаписиНаСервереФормыПрикладногоОбъекта(Форма) Экспорт
	
	ИнтеграцияИСУНФ.ПослеЗаписиНаСервереФормыПрикладногоОбъекта(Форма);
	
КонецПроцедуры

Процедура ПриСозданииНаСервереВФормеПрикладногоОбъекта(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	ИнтеграцияИСУНФ.ПриСозданииНаСервереВФормеПрикладногоОбъекта(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийОбъектов

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяСправочника - Строка - имя справочника, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, ФормаКлиентскогоПриложения - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
Процедура ПриПолученииФормыСправочника(ИмяСправочника, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяДокумента - Строка - имя документа, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, ФормаКлиентскогоПриложения - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
Процедура ПриПолученииФормыДокумента(ИмяДокумента, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если ВидФормы = "ФормаСписка"
		И Параметры.Свойство("ТекущаяСтрока") Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ФормаСпискаДокументов";
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяРегистра - Строка - имя регистра сведений, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, ФормаКлиентскогоПриложения - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
Процедура ПриПолученииФормыРегистраСведений(ИмяРегистра, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Возникает на сервере при создании формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - создаваемая форма,
//  Отказ - Булево - признак отказа от создания формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки.
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	СобытияФормИС.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка, Новый Структура);
	
	КнопкаПодбор = Форма.Элементы.Найти("ТоварыОткрытьПодбор");
	Если КнопкаПодбор = Неопределено Тогда
		КнопкаПодбор = Форма.Элементы.Найти("ТоварыОткрытьПодборНомеклатуры");
	КонецЕсли;
	
	Если КнопкаПодбор <> Неопределено Тогда
		КнопкаПодбор.Видимость = Ложь;
	КонецЕсли;
	
	Если Форма.ИмяФормы = "Документ.ВозвратИзРегистра2ЕГАИС.Форма.ФормаСпискаДокументов" Тогда
		Форма.Элементы.СтраницаКОформлению.Видимость = Ложь;
		Форма.Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		
	ИначеЕсли Форма.ИмяФормы = "Обработка.ПанельОбменИСМП.Форма.Форма" Тогда
		ЭлементВиды = Форма.Элементы.Найти("ОткрытьВидыНоменклатуры");
		Если ЭлементВиды <> Неопределено Тогда
			ЭлементВиды.Заголовок = НСтр("ru = 'Категории номенклатуры'");
		КонецЕсли;
		КомандаВиды = Форма.Команды.Найти("ОткрытьВидыНоменклатуры");
		Если КомандаВиды <> Неопределено Тогда
			КомандаВиды.Подсказка = СтрЗаменить(КомандаВиды.Подсказка, " виды ", " категории ");
		КонецЕсли;
		
	ИначеЕсли Форма.ИмяФормы = "Документ.МаркировкаТоваровИСМП.Форма.ФормаДокумента" Тогда
		
		// устанавливаем связи параметров выбора для поля "Упаковка" в таблице "Товары"
		Связь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы.Товары.ТекущиеДанные.Номенклатура");
		
		МассивСвязи = Новый Массив();
		МассивСвязи.Добавить(Связь);
		
		ФиксМассивСвязи = Новый ФиксированныйМассив(МассивСвязи);
		Форма.Элементы.ТоварыУпаковка.СвязиПараметровВыбора = ФиксМассивСвязи;
		
		
		// отключаем свойство "ВыбиратьТип"
		Форма.Элементы.ТоварыУпаковка.ВыбиратьТип = Ложь;
		
		// ++( 00-00012169
		// устанавливаем тип значения поля Серия
		//Форма.Элементы.ТоварыСерия.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры");
		
		// устанавливаем связи параметров выбора поля Серия
		Форма.Элементы.ТоварыСерия.СвязиПараметровВыбора = ФиксМассивСвязи;
		// )++ 00-00012169
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ВыводИзОборотаИСМП.Форма.ФормаДокумента" Тогда
		
		// устанавливаем связи параметров выбора для поля "Упаковка" в таблице "Товары"
		Связь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы.Товары.ТекущиеДанные.Номенклатура");
		
		МассивСвязи = Новый Массив();
		МассивСвязи.Добавить(Связь);
		
		ФиксМассивСвязи = Новый ФиксированныйМассив(МассивСвязи);
		Форма.Элементы.ТоварыУпаковка.СвязиПараметровВыбора = ФиксМассивСвязи;
		
		// отключаем свойство "ВыбиратьТип"
		Форма.Элементы.ТоварыУпаковка.ВыбиратьТип = Ложь;
		
		// ++( 00-00012169
		// устанавливаем тип значения поля Серия
		Форма.Элементы.ТоварыСерия.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры");
		// )++ 00-00012169
		
	ИначеЕсли Форма.ИмяФормы = "Документ.СписаниеКодовМаркировкиИСМП.Форма.ФормаДокумента" Тогда
		
		// устанавливаем связи параметров выбора для поля "Упаковка" в таблице "Товары"
		Связь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы.Товары.ТекущиеДанные.Номенклатура");
		
		МассивСвязи = Новый Массив();
		МассивСвязи.Добавить(Связь);
		
		ФиксМассивСвязи = Новый ФиксированныйМассив(МассивСвязи);
		Форма.Элементы.ТоварыУпаковка.СвязиПараметровВыбора = ФиксМассивСвязи;
		
		// отключаем свойство "ВыбиратьТип"
		Форма.Элементы.ТоварыУпаковка.ВыбиратьТип = Ложь;
		
		// ++( 00-00012169
		// устанавливаем тип значения поля Серия
		Форма.Элементы.ТоварыСерия.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры");
		// )++ 00-00012169
		
	// ++( 00-00012169
	ИначеЕсли Форма.ИмяФормы = "Документ.ОтгрузкаТоваровИСМП.Форма.ФормаДокумента" Тогда
		
		// устанавливаем тип значения поля Серия
		Форма.Элементы.ТоварыСерия.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры");
		
	ИначеЕсли Форма.ИмяФормы = "Документ.УточнениеСведенийОКодахМаркировкиИСМП.Форма.ФормаДокумента" Тогда
		
		// устанавливаем связи параметров выбора для поля "Упаковка" в таблице "Товары"
		Связь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы.Товары.ТекущиеДанные.Номенклатура");
		
		МассивСвязи = Новый Массив();
		МассивСвязи.Добавить(Связь);
		
		ФиксМассивСвязи = Новый ФиксированныйМассив(МассивСвязи);
		Форма.Элементы.ТоварыУпаковка.СвязиПараметровВыбора = ФиксМассивСвязи;
		
		// отключаем свойство "ВыбиратьТип"
		Форма.Элементы.ТоварыУпаковка.ВыбиратьТип = Ложь;
		
		// устанавливаем тип значения поля Серия
		Форма.Элементы.ТоварыСерия.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры");
		
	ИначеЕсли Форма.ИмяФормы = "Справочник.ШтрихкодыУпаковокТоваров.Форма.ФормаЭлемента" Тогда
		
		// устанавливаем ограничение типа значения поля Серия
		Форма.Элементы.Серия.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры");
		
		// устанавливаем связи параметров выбора для поля Серия
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Номенклатура");
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Форма.Элементы.Серия.СвязиПараметровВыбора = НовыеСвязи;
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ИнвентаризацияПродукцииВЕТИС.Форма.ФормаДокумента" Тогда
		
		// устанавливаем тип значения поля Серия
		Форма.Элементы.ТоварыСерия.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры");
		
		// устанавливаем связи параметров выбора для поля Серия
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы.Товары.ТекущиеДанные.Номенклатура");
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Форма.Элементы.ТоварыСерия.СвязиПараметровВыбора = НовыеСвязи;
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ПроизводственнаяОперацияВЕТИС.Форма.ФормаДокумента" Тогда
		
		// настраиваем Серии в таблице Товары
		
		// устанавливаем тип значения поля Серия
		Форма.Элементы.ТоварыСерия.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры");
		
		// устанавливаем связи параметров выбора для поля Серия
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы.Товары.ТекущиеДанные.Номенклатура");
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Форма.Элементы.ТоварыСерия.СвязиПараметровВыбора = НовыеСвязи;
		
		// настраиваем Серии в таблице Продукция
		
		// устанавливаем тип значения поля Серия
		Форма.Элементы.СырьеСерия.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры");
		
		// устанавливаем связи параметров выбора для поля Серия
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы.Товары.ТекущиеДанные.Номенклатура");
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Форма.Элементы.СырьеСерия.СвязиПараметровВыбора = НовыеСвязи;		
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Форма.ФормаДокумента" Тогда
		
		// устанавливаем тип значения поля Серия
		Форма.Элементы.ТоварыСерия.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры");
		
		// устанавливаем связи параметров выбора для поля Серия
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы.Товары.ТекущиеДанные.Номенклатура");
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Форма.Элементы.ТоварыСерия.СвязиПараметровВыбора = НовыеСвязи;		
		
	ИначеЕсли Форма.ИмяФормы = "Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ПроверкаИПодбор" Тогда
		
		// устанавливаем тип значения поля Серия
		Форма.Элементы.ПодобраннаяМаркируемаяПродукцияСерия.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры");
		
		// устанавливаем связи параметров выбора для поля Серия
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы.ПодобраннаяМаркируемаяПродукция.ТекущиеДанные.Номенклатура");
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Форма.Элементы.ПодобраннаяМаркируемаяПродукцияСерия.СвязиПараметровВыбора = НовыеСвязи;
		
	ИначеЕсли Форма.ИмяФормы = "ОбщаяФорма.ФормаУточненияДанныхИС" Тогда
		
		// устанавливаем тип значения поля Серия
		Форма.Элементы.Серия.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры");
		
		// устанавливаем связи параметров выбора для поля Серия
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Номенклатура");
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Форма.Элементы.Серия.СвязиПараметровВыбора = НовыеСвязи;
		
	ИначеЕсли Форма.ИмяФормы = "Обработка.ПанельАдминистрированияЕГАИС.Форма.НастройкиЕГАИС" Тогда
		
		// Добавим зависимые константы.
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ДополнительныеКонстанты") Тогда
			СтрокаКонстант = Форма.ДополнительныеКонстанты.Добавить();
			СтрокаКонстант.Имя = "ВыгружатьПродажиНемаркируемойПродукцииВЕГАИС";
			СтрокаКонстант.Заголовок = НСтр("ru = 'Выгружать продажи немаркируемой продукции в ЕГАИС'");
			СтрокаКонстант.Описание = НСтр("ru = 'В некоторых случаях выгрузка немаркируемой алкогольной продукции в ЕГАИС может не производиться'");
			
		КонецЕсли;
		
	ИначеЕсли Форма.ИмяФормы = "Обработка.ПанельАдминистрированияИСМП.Форма.НастройкиИСМП" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ЕдиницаИзмеренияКилограммИС", "ОграничениеТипа",
			Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ЕдиницаИзмеренияЛитрИС", "ОграничениеТипа",
			Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
		
	ИначеЕсли Форма.ИмяФормы = "ОбщаяФорма.ФормаНастройкиНоменклатурыИС" Тогда
		
		// устанавливаем связи параметров выбора для поля "Упаковка"
		Связь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Номенклатура");
		
		МассивСвязи = Новый Массив();
		МассивСвязи.Добавить(Связь);
		
		ФиксМассивСвязи = Новый ФиксированныйМассив(МассивСвязи);
		Форма.Элементы.ПотребительскаяУпаковка.СвязиПараметровВыбора = ФиксМассивСвязи;
		
		// отключаем свойство "ВыбиратьТип"
		Форма.Элементы.ПотребительскаяУпаковка.ВыбиратьТип = Ложь;
		Форма.Элементы.ПотребительскаяУпаковка.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения");
		
	ИначеЕсли Форма.ИмяФормы = "Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ПроверкаИПодбор"
		ИЛИ Форма.ИмяФормы = "Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ПроверкаИПодбор"
		ИЛИ Форма.ИмяФормы = "Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ПроверкаИПодбор" Тогда
		
		ПроверяемыйДокумент = Форма.ПроверяемыйДокумент;
		
		Если ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.ПриемкаТоваровИСМП")
			Или ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
			Если УправлениеМобильнымиПриложениями.ИспользоватьОбменСМобильнымиПриложениями() Тогда
				ИмяПланаОбмена = УправлениеМобильнымиПриложениямиКлиентСервер.ИмяПланаОбмена();
				МобильноеПриложение = Справочники.МобильныеПриложения.НайтиПоРеквизиту("ВариантНастройки", "Кладовщик");
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("МобильноеПриложение", МобильноеПриложение);
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				|	ОбменСМобильнымиПриложениями.Ссылка КАК Ссылка
				|ИЗ
				|	ПланОбмена." + ИмяПланаОбмена + " КАК ОбменСМобильнымиПриложениями
				|ГДЕ
				|	ОбменСМобильнымиПриложениями.МобильноеПриложение = &МобильноеПриложение
				|	И НЕ ОбменСМобильнымиПриложениями.ЭтотУзел
				|	И НЕ ОбменСМобильнымиПриложениями.ПометкаУдаления";
				
				Результат = Запрос.Выполнить();
				Если Не Результат.Пустой() Тогда
					ИмяКоманды = "ОтправитьРаспоряжениеНаПриемкуКладовщику";
					НоваяКоманда = Форма.Команды.Добавить(ИмяКоманды);
					НоваяКоманда.Действие = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
					НоваяКоманда.Заголовок = НСтр("ru = 'Отправить в 1С:Кладовщик'");
					
					НоваяКнопка = Форма.Элементы.Добавить("ИмяКоманды",
					Тип("КнопкаФормы"), Форма.Элементы.ГруппаМаркированнаяКоманднаяПанель);
					НоваяКнопка.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
					НоваяКнопка.ИмяКоманды = ИмяКоманды;
					
					ДанныеПроверкиИПодбора = Неопределено;
					Если ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
						ДанныеПроверкиИПодбора = ПроверяемыйДокумент.ДанныеПроверкиИПодбора.Получить();
					Иначе
						НаборЗаписей = РегистрыСведений.СтатусыПроверкиИПодбораДокументовИСМП.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.Документ.Установить(ПроверяемыйДокумент);
						НаборЗаписей.Прочитать();
						Для Каждого Запись Из НаборЗаписей Цикл
							ДанныеПроверкиИПодбора = Запись.ДанныеПроверкиИПодбора.Получить();
						КонецЦикла;
					КонецЕсли;
					
					КомандаДоступна = Истина;
					Если ДанныеПроверкиИПодбора <> Неопределено Тогда
						Для Каждого СтрокаДерева Из ДанныеПроверкиИПодбора.ДеревоМаркированнойПродукции.Строки Цикл
							Если НЕ ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
								Если СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отложена Тогда
									КомандаДоступна = Ложь;
									Прервать;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Если Не КомандаДоступна Тогда
						НоваяКоманда.Заголовок = НСтр("ru = 'Отправлено в 1С:Кладовщик'");
						КоллекцияЭлементов = Форма.Элементы.ГруппаМаркированнаяКоманднаяПанель.ПодчиненныеЭлементы;
						Для Каждого ЭлементФормы Из КоллекцияЭлементов Цикл
							ЭлементФормы.Доступность = Ложь;
						КонецЦикла;
						Если Форма.Элементы.Найти("ПодобраннаяМаркируемаяПродукцияКоманднаяПанель") <> Неопределено Тогда
							КоллекцияЭлементов = Форма.Элементы.ПодобраннаяМаркируемаяПродукцияКоманднаяПанель.ПодчиненныеЭлементы;
							Для Каждого ЭлементФормы Из КоллекцияЭлементов Цикл
								ЭлементФормы.Доступность = Ложь;
							КонецЦикла;
						КонецЕсли;
						КоллекцияЭлементов = Форма.КоманднаяПанель.ПодчиненныеЭлементы;
						Для Каждого ЭлементФормы Из КоллекцияЭлементов Цикл
							Если ЭлементФормы.Имя = "ДеревоМаркированнойПродукцииНачатьПроверкуЗаново"
								Или ЭлементФормы.Имя = "ФормаСохранитьПромежуточныеРезультатыПроверки" Тогда
								Продолжить;
							КонецЕсли;
							ЭлементФормы.Доступность = Ложь;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при чтении объекта на сервере.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма читаемого объекта,
//  ТекущийОбъект - ДокументОбъект, СправочникОбъект - читаемый объект.
Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	СобытияФормИС.ПриЧтенииНаСервере(Форма, ТекущийОбъект);
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры.
//          См. справочную информацию по событиям управляемой формы.
//  ТекущийОбъект - Произвольный - записанный объект.
//  ПараметрыЗаписи - Структура - использованные параметры записи объекта.
Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи)Экспорт
	
	СобытияФормИС.ПослеЗаписиНаСервере(Форма);
	
КонецПроцедуры

// Переопределяемая часть обработки проверки заполнения формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма.
//   Отказ - Булево - Истина если проверка заполнения не пройдена
//   ПроверяемыеРеквизиты - Массив Из Строка - реквизиты формы, отмеченные для проверки
Процедура ОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	СобытияФормИСУНФ.ОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиДействийФорм

// Возникает на сервере при записи константы в формах настроек
// если запись одной константы может повлечь изменение других отображаемых в этой же форме.
//
// Параметры:
//  Форма             - ФормаКлиентскогоПриложения - форма,
//  КонстантаИмя      - Строка           - записываемая константа,
//  КонстантаЗначение - Произвольный     - значение константы.
Процедура ОбновитьФормуНастройкиПриЗаписиПодчиненныхКонстант(Форма, КонстантаИмя, КонстантаЗначение) Экспорт
	
	СобытияФормИСУНФ.ОбновитьФормуНастройкиПриЗаписиПодчиненныхКонстант(Форма, КонстантаИмя, КонстантаЗначение);
	
КонецПроцедуры

// Устанавливается свойство ОтображениеПредупрежденияПриРедактировании элемента формы.
//
Процедура ОтображениеПредупрежденияПриРедактировании(Элемент, Отображать) Экспорт

	Возврат
	
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформление

// Устанавливает условное оформление для поля "Характеристика".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой нужно установить условное оформление,
//  ИмяПоляВводаХарактеристики - Строка - имя элемента формы "Характеристика",
//  ПутьКПолюОтбора - Строка - полный путь к реквизиту "Характеристики используются".
Процедура УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
	Форма,
	ИмяПоляВводаХарактеристики = "ТоварыХарактеристика",
	ПутьКПолюОтбора = "Объект.Товары.ХарактеристикиИспользуются") Экспорт
	
	СобытияФормИСУНФ.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		Форма,
		ИмяПоляВводаХарактеристики,
		ПутьКПолюОтбора);
	
КонецПроцедуры

// Устанавливает условное оформление для поля "Единица измерения".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой нужно установить условное оформление,
//  ИмяПоляВводаЕдиницИзмерения - Строка - имя элемента формы "Единица измерения",
//  ПутьКПолюОтбора - Строка - полный путь к реквизиту "Упаковка".
Процедура УстановитьУсловноеОформлениеЕдиницИзмерения(Форма,
	                                                  ИмяПоляВводаЕдиницИзмерения = "ТоварыНоменклатураЕдиницаИзмерения",
	                                                  ПутьКПолюОтбора = "Объект.Товары.Упаковка") Экспорт
	
	СобытияФормИСУНФ.УстановитьУсловноеОформлениеЕдиницИзмерения(
		Форма,
		ИмяПоляВводаЕдиницИзмерения,
		ПутьКПолюОтбора);
	
КонецПроцедуры

// Устанавливает условное оформление для поля "Серия".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма, в которой нужно установить условное оформление,
//   ИмяПоляВводаСерии - Строка - Имя элемента формы для указания серии
//   ПутьКПолюОтбораСтатусУказанияСерий - Строка - Имя реквизита формы со статусом указания серии
//   ПутьКПолюОтбораТипНоменклатуры - Строка - Имя реквизита формы с указанием типа номенклатуры
//
Процедура УстановитьУсловноеОформлениеСерийНоменклатуры(Форма,
														ИмяПоляВводаСерии = "ТоварыСерия",
														ПутьКПолюОтбораСтатусУказанияСерий = "Объект.Товары.СтатусУказанияСерий",
														ПутьКПолюОтбораТипНоменклатуры = "Объект.Товары.ТипНоменклатуры") Экспорт
	
	СобытияФормИСУНФ.УстановитьУсловноеОформлениеСерийНоменклатуры(
		Форма,
		ИмяПоляВводаСерии,
		ПутьКПолюОтбораСтатусУказанияСерий,
		ПутьКПолюОтбораТипНоменклатуры);
	
КонецПроцедуры

#КонецОбласти

#Область СвязиПараметровВыбора

// Устанавливает связь элемента формы с полем ввода номенклатуры.
//
// Параметры:
//	Форма					- ФормаКлиентскогоПриложения	- Форма, в которой нужно установить связь.
//	ИмяПоляВвода			- Строка			- Имя поля, связываемого с номенклатурой.
//	ПутьКДаннымНоменклатуры	- Строка			- Путь к данным текущей номенклатуры в форме.
//
Процедура УстановитьСвязиПараметровВыбораСНоменклатурой(Форма, ИмяПоляВвода,
	ПутьКДаннымНоменклатуры = "Элементы.Товары.ТекущиеДанные.Номенклатура") Экспорт
	
	ИнтеграцияИСУНФ.УстановитьСвязиПараметровВыбораСНоменклатурой(Форма, ИмяПоляВвода, ПутьКДаннымНоменклатуры);
	
КонецПроцедуры

// Устанавливает связь элемента формы с полем ввода характеристики номенклатуры.
//
// Параметры:
//	Форма						- ФормаКлиентскогоПриложения	- Форма, в которой нужно установить связь.
//	ИмяПоляВвода				- Строка			- Имя поля, связываемого с номенклатурой.
//	ПутьКДаннымХарактеристики	- Строка			- Путь к данным текущей характеристики номенклатуры в форме.
//
Процедура УстановитьСвязиПараметровВыбораСХарактеристикой(Форма, ИмяПоляВвода,
	ПутьКДаннымХарактеристики = "Элементы.Товары.ТекущиеДанные.Характеристика") Экспорт
	
	Возврат;
	
КонецПроцедуры

// Устанавливает связь элемента формы с полем договоры хранения. 
//
// Параметры:
//	Форма					- ФормаКлиентскогоПриложения	- Форма, в которой нужно установить связь.
//	ИмяПоляВвода			- Строка			- Имя поля, связываемого с договором.
//
Процедура УстановитьСвязиПараметровВыбораДоговора(Форма, ИмяПоляВвода) Экспорт
	
	СвязиПараметровВыбора = ОбщегоНазначения.СкопироватьРекурсивно(Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора, Ложь);
	СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
	
	Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	
КонецПроцедуры


// Устанавливает параметры выбора договоры хранения.
//
// Параметры:
//   Форма                   - ФормаКлиентскогоПриложения - форма, в которой нужно установить параметры выбора.
//   ИмяПоляВвода            - Строка               - имя поля ввода договоры.
//
Процедура УстановитьПараметрыВыбораСвязиПараметровВыбораДоговора(Форма, ИмяПоляВвода = "Контрагент") Экспорт
	
	СвязиПараметровВыбора = ОбщегоНазначения.СкопироватьРекурсивно(Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора, Ложь);
	СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
	
	Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Устанавливает у элемента формы Упаковка подсказку ввода для соответствующей номенклатуры
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта.
//
Процедура УстановитьИнформациюОЕдиницеХранения(Форма) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиИзмененияОпределяемыхТипов

// Выполняет действия при изменении номенклатуры в объекте (форме, строке табличной части итп).
//
// Параметры:
//  Форма                  - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока          - Произвольный - контекст редактирования (текущая строка таблицы, шапка объекта, форма)
//  КэшированныеЗначения   - Неопределено, Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыУказанияСерий - Произвольный - параметры указания серий формы
Процедура ПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, КэшированныеЗначения = Неопределено, ПараметрыУказанияСерий = Неопределено) Экспорт
	
	СобытияФормИСУНФ.ПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
