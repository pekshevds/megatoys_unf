#Область СлужебныйПрограммныйИнтерфейс

Функция ОпределитьСтавкуНДС(Всего, СуммаНДС) Экспорт
		
	Делитель = Всего - СуммаНДС;
	Если Делитель = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Ставка = Окр(СуммаНДС * 100 / Делитель);
	СтруктураСтавкиНДС = Новый Структура("Числом", Ставка);
	
	Если Ставка = 20 Тогда
		СтавкаСсылкой = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДС(20);
	ИначеЕсли Ставка = 18 Тогда
		СтавкаСсылкой = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДС(18);
	ИначеЕсли Ставка = 10 Тогда
		СтавкаСсылкой = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДС(10);
	ИначеЕсли Ставка = 0 Тогда
		СтавкаСсылкой = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	Иначе
		СтавкаСсылкой = Неопределено;
	КонецЕсли;
	
	Если СтавкаСсылкой = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		СтруктураСтавкиНДС.Вставить("Ссылкой", СтавкаСсылкой);
		Возврат СтруктураСтавкиНДС;
	КонецЕсли;
		
КонецФункции

Процедура СоздатьДокументыКомплектаВызовСервера(ПараметрыСоздания, Результат) Экспорт

	ТипыДокументов = РаспознаваниеДокументовКомплектыКлиентСервер.СоздаваемыеДокументыКомплекта(ПараметрыСоздания);
	
	РаспознанныеОбъектыДляТипа = Новый Массив;
	ОткудаПрикреплятьСканы = Новый Массив;
	ТаблицаРаспознанныхСозданных = Новый ТаблицаЗначений;
	ТаблицаРаспознанныхСозданных.Колонки.Добавить("РаспознанныйОбъект");
	ТаблицаРаспознанныхСозданных.Колонки.Добавить("СоздаваемыйДокумент");
	ТаблицаРаспознанныхСозданных.Колонки.Добавить("СоздатьДокумент");
	ТаблицаРаспознанныхСозданных.Колонки.Добавить("ДанныеОбратнойСвязи");
	
	Если ПараметрыСоздания.Свойство("ДанныеОбработки") И ПараметрыСоздания.ДанныеОбработки.Свойство("СозданоДокументов") Тогда
		НуженПодсчет = Истина;
		СозданоДокументов = ПараметрыСоздания.ДанныеОбработки.СозданоДокументов;
		ПрикрепленоСканов = ПараметрыСоздания.ДанныеОбработки.ПрикрепленоСканов;
	Иначе
		НуженПодсчет = Ложь;
	КонецЕсли;
	
	СоздаваемыйДокумент = Неопределено;
	УдалосьПровести = Ложь;
	ОбщийТекстОшибки = НСтр("ru = 'Исправьте ошибки заполнения документов комплекта или обработайте их по отдельности.'");
	НачатьТранзакцию();
	Попытка
		Для Каждого ЭтотТипДокумента Из ТипыДокументов Цикл
			ДанныеСозданного = ПараметрыСоздания.СозданныеДокументы[ЭтотТипДокумента];
			ТипыРаспознанных = РаспознаваниеДокументовКомплектыКлиентСервер.ПодходящиеТипыРаспознанногоДокумента(ЭтотТипДокумента);
			
			РаспознанныеОбъектыДляТипа.Очистить();
			ОткудаПрикреплятьСканы.Очистить();
			ДанныеРаспознанного = Неопределено;
			УстановленСтатусОбработан = Ложь;
			Для Каждого ТипРаспознанного Из ТипыРаспознанных Цикл
				ДопДанныеРаспознанного = ПараметрыСоздания.РаспознанныеДокументыПоТипам.Получить(ТипРаспознанного);
				Если ДопДанныеРаспознанного = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ДопРаспознанныйОбъект = ДопДанныеРаспознанного.Ссылка.ПолучитьОбъект();
				Если (ДанныеСозданного.СоздатьДокумент Или ДанныеСозданного.ДокументНайден)
					И Не (УстановленСтатусОбработан И ДопРаспознанныйОбъект.ТипДокумента 
					= Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура) Тогда
					
					// Статус Обработан ставится всем распознанным документам, которые будут созданы или для них найден типовой документ,
					// но есть исключение: возможно создание поступления/реализации по СФ (см. ПодходящиеТипыРаспознанногоДокумента), но ей
					// не нужно ставить Статус Обработан, если фактически поступление/реализация создается по Торг12, Акту или УПД
					ДопРаспознанныйОбъект.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Обработан;
					ДопРаспознанныйОбъект.Записать();
					УстановленСтатусОбработан = Истина;
				КонецЕсли;
				
				РаспознанныеОбъектыДляТипа.Добавить(ДопРаспознанныйОбъект);
				
				Если ДанныеРаспознанного = Неопределено Тогда
					ДанныеРаспознанного = ДопДанныеРаспознанного;
					РаспознанныйОбъект = ДопРаспознанныйОбъект;
					Если ДанныеСозданного.ПрикрепитьСкан Тогда
						// Для прикрепления основного скана
						ОткудаПрикреплятьСканы.Добавить(ДопРаспознанныйОбъект);
					КонецЕсли;
				ИначеЕсли СоздаваемыйДокумент = Неопределено
					И ДанныеСозданного.СоздатьДокумент // Эти данные потребуются, только если нужно СоздатьДокумент
					И РаспознаваниеДокументовКомплектыКлиентСервер.НужноОбъединитьТабличныеЧасти(РаспознанныйОбъект.ТипДокумента, ДопРаспознанныйОбъект.ТипДокумента) Тогда
					
					// Дополняем ДанныеРаспознанного только, если основного документа не было
					Для Каждого ЭтотПараметр Из ДопДанныеРаспознанного.ПараметрыЗаполнения Цикл
						Если ТипЗнч(ЭтотПараметр.Значение) = Тип("Массив") Тогда
							Для Каждого СтрокаТаблицы Из ЭтотПараметр.Значение Цикл
								ДанныеРаспознанного.ПараметрыЗаполнения[ЭтотПараметр.Ключ].Добавить(СтрокаТаблицы);
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
				Если ДанныеСозданного.ПрикрепитьСкан
					И НужноПрикрепитьДополнительныйСкан(ПараметрыСоздания.ТипКомплекта, ТипРаспознанного, ЭтотТипДокумента) Тогда
					ОткудаПрикреплятьСканы.Добавить(ДопРаспознанныйОбъект);
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не ДанныеСозданного.СоздатьДокумент Тогда
				СоздаваемыйДокумент = ДанныеСозданного.Ссылка;
			Иначе
				
				ОбрабатываемыйДокумент = ДанныеРаспознанного.Ссылка;
				Если СоздаваемыйДокумент = Неопределено Тогда
					
					// Создание основного документа
					ТипДокументаСтрокой = СтрРазделить(XMLТип(ЭтотТипДокумента).ИмяТипа, ".")[1];
					
					СоздаваемыйДокумент = РаспознаваниеДокументовСлужебный.СоздатьДокументНаОснованииРаспознанного(
						ДанныеРаспознанного.Ссылка,
						ТипДокументаСтрокой,
						ДанныеРаспознанного.ПараметрыЗаполнения,
						РежимЗаписиДокумента.Проведение
					);
					
					СоздаваемыйДокументОбъект = СоздаваемыйДокумент.ПолучитьОбъект();
					
					Если Метаданные.ОпределяемыеТипы.ПоступлениеТоваровУслугБРД.Тип.СодержитТип(ЭтотТипДокумента) 
						Или Метаданные.ОпределяемыеТипы.РеализацияТоваровУслугБРД.Тип.СодержитТип(ЭтотТипДокумента)  Тогда
						
						Если Не ЗначениеЗаполнено(СоздаваемыйДокументОбъект.ДоговорКонтрагента) Тогда
							СоздаваемыйДокументОбъект.ДоговорКонтрагента = РаспознаваниеДокументовСлужебный.НайтиДоговорКонтрагента(РаспознанныйОбъект);
						КонецЕсли;
						СоздаваемыйДокументОбъект.СтруктурнаяЕдиница = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(РаспознанныйОбъект, "Склад");
						Если Не ЗначениеЗаполнено(СоздаваемыйДокументОбъект.СтруктурнаяЕдиница) Тогда
							СоздаваемыйДокументОбъект.СтруктурнаяЕдиница = РаспознаваниеДокументовПереопределяемый.ПолучитьСкладПоУмолчанию();
						КонецЕсли;
					КонецЕсли;
					
					СоздаваемыйДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					Если НуженПодсчет Тогда
						СозданоДокументов = СозданоДокументов + 1;
					КонецЕсли;
					
					ДанныеСозданного.Ссылка = СоздаваемыйДокумент;
					
				Иначе
					
					// Создание подчиненного документа
					Если Метаданные.ОпределяемыеТипы.ПоступлениеТоваровУслугБРД.Тип.СодержитТип(ЭтотТипДокумента) 
						Или Метаданные.ОпределяемыеТипы.РеализацияТоваровУслугБРД.Тип.СодержитТип(ЭтотТипДокумента)  Тогда
						
						// Поступление или Реализацию создаем на основании счета на оплату из СоздаваемыйДокументОбъект
						ТипДокументаСтрокой = СтрРазделить(XMLТип(ЭтотТипДокумента).ИмяТипа, ".")[1];
						ПараметрыЗаполнения = СоздаваемыйДокумент;
						
						СоздаваемыйДокументОбъект = Документы[ТипДокументаСтрокой].СоздатьДокумент();
						СоздаваемыйДокументОбъект.Заполнить(ПараметрыЗаполнения);    
						
						//УНФ
						Если ПараметрыСоздания.ПараметрыОперации.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию
							Или ПараметрыСоздания.ПараметрыОперации.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию Тогда
							
							СоздаваемыйДокументОбъект.ВидОперации = ПараметрыСоздания.ПараметрыОперации.ВидОперации;
						КонецЕсли;
						
						СоздаваемыйДокументОбъект.Номер = РаспознанныйОбъект.НомерДокумента;
						Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СоздаваемыйДокументОбъект, "НомерВходящегоДокумента") Тогда
							СоздаваемыйДокументОбъект.НомерВходящегоДокумента = РаспознанныйОбъект.НомерДокумента;
						КонецЕсли;
						СоздаваемыйДокументОбъект.Дата = РаспознанныйОбъект.ДатаДокумента;
						Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СоздаваемыйДокументОбъект, "ДатаВходящегоДокумента") Тогда
							СоздаваемыйДокументОбъект.ДатаВходящегоДокумента = РаспознанныйОбъект.ДатаДокумента;
						КонецЕсли;
						
						//УНФ
						Если Не ЗначениеЗаполнено(СоздаваемыйДокументОбъект.Договор) Тогда
							СоздаваемыйДокументОбъект.Договор = РаспознаваниеДокументовСлужебный.НайтиДоговорКонтрагента(РаспознанныйОбъект);
						КонецЕсли;
						СоздаваемыйДокументОбъект.СтруктурнаяЕдиница = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(РаспознанныйОбъект, "Склад");
						Если Не ЗначениеЗаполнено(СоздаваемыйДокументОбъект.СтруктурнаяЕдиница) Тогда
							СоздаваемыйДокументОбъект.СтруктурнаяЕдиница = РаспознаваниеДокументовПереопределяемый.ПолучитьСкладПоУмолчанию();
						КонецЕсли;
						
						Если РаспознанныйОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД Тогда
							СоздаваемыйДокументОбъект.ЭтоУниверсальныйДокумент = Истина;
							// Признак ЭтоУПД будем ставить только если данные для Поступления (или Реализации) брались именно из УПД.
							// Также по приоритетам это будет значит, что в комплект не входят Торг-12 или Акт, иначе данные брались бы оттуда.
						КонецЕсли;
						
						СоздаваемыйДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
						Если НуженПодсчет Тогда
							СозданоДокументов = СозданоДокументов + 1;
						КонецЕсли;
						СоздаваемыйДокумент = СоздаваемыйДокументОбъект.Ссылка;
						
						ДанныеСозданного.Ссылка = СоздаваемыйДокумент;
						
					ИначеЕсли Метаданные.ОпределяемыеТипы.СчетФактураПолученныйБРД.Тип.СодержитТип(ЭтотТипДокумента)
						Или Метаданные.ОпределяемыеТипы.СчетФактураВыданныйБРД.Тип.СодержитТип(ЭтотТипДокумента) Тогда
						
						СчетФактураСсылка = Неопределено;
						ТипДокументаСтрокой = СтрРазделить(XMLТип(ЭтотТипДокумента).ИмяТипа, ".")[1];
						
						ПараметрыЗаполнения = ДанныеРаспознанного.ПараметрыЗаполнения;
						ПараметрыЗаполнения.Вставить("НомерВходящегоДокумента", РаспознанныйОбъект.НомерДокумента);
						ПараметрыЗаполнения.Вставить("ДатаВходящегоДокумента", РаспознанныйОбъект.ДатаДокумента);
						
						ПараметрыСозданияСФ = Новый Структура;
						ПараметрыСозданияСФ.Вставить("ТипДокументаСтрокой", ТипДокументаСтрокой);
						ПараметрыСозданияСФ.Вставить("Основание", СоздаваемыйДокумент);
						ПараметрыСозданияСФ.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
						
						РаспознаваниеДокументовПереопределяемый.ПриСозданииСчетФактуры(ПараметрыСозданияСФ, СчетФактураСсылка);
						
						Если СчетФактураСсылка = Неопределено Тогда
							ВызватьИсключение ОбщийТекстОшибки;
						Иначе
							СоздаваемыйДокумент = СчетФактураСсылка;
						КонецЕсли;
						
						Если НуженПодсчет Тогда
							СозданоДокументов = СозданоДокументов + 1;
						КонецЕсли;
						
						ДанныеСозданного.Ссылка = СоздаваемыйДокумент;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ОбрабатываемыйДокумент = СоздаваемыйДокумент;
			Если ДанныеСозданного.ПрикрепитьСкан Тогда
				Для Каждого ОбъектСоСканом Из ОткудаПрикреплятьСканы Цикл
					АдресКартинки = ПоместитьВоВременноеХранилище(ОбъектСоСканом.ИсходноеИзображение.Получить());
					РаспознаваниеДокументовСлужебный.ДобавитьПрисоединенныйФайл(ОбъектСоСканом, СоздаваемыйДокумент, АдресКартинки);
					Если НуженПодсчет Тогда
						ПрикрепленоСканов = ПрикрепленоСканов + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Для Каждого ЭтотРаспознанныйОбъект Из РаспознанныеОбъектыДляТипа Цикл
				СтрокаТаблицыСвязи = ТаблицаРаспознанныхСозданных.Добавить();
				СтрокаТаблицыСвязи.РаспознанныйОбъект = ЭтотРаспознанныйОбъект;
				СтрокаТаблицыСвязи.СоздаваемыйДокумент = СоздаваемыйДокумент;
				СтрокаТаблицыСвязи.СоздатьДокумент = ДанныеСозданного.СоздатьДокумент;
			КонецЦикла;
			
		КонецЦикла;
		
		УдалосьПровести = Истина;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		СообщенияОбОшибках = Новый Массив(ПолучитьСообщенияПользователю(Истина));
		ПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Если ПредставлениеОшибки <> ОбщийТекстОшибки Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			СообщенияОбОшибках.Вставить(0, Сообщение);
		КонецЕсли;
		Результат.ОшибкиПроведения.Вставить(ОбрабатываемыйДокумент, СообщенияОбОшибках);
		
	КонецПопытки;
	
	Если НуженПодсчет Тогда
		ПараметрыСоздания.ДанныеОбработки.СозданоДокументов = СозданоДокументов;
		ПараметрыСоздания.ДанныеОбработки.ПрикрепленоСканов = ПрикрепленоСканов;
	КонецЕсли;
	
	ТипыДокументовВСервисе = РаспознаваниеДокументовСлужебныйКлиентСервер.ПолучитьОбратноеСоответствие(Документы.РаспознанныйДокумент.СоответствиеТиповДокументовВСервисеИБРД());
	set_id = Строка(Новый УникальныйИдентификатор);
	
	ОсновнойДокумент = Истина;
	Для Каждого СтрокаТаблицыСвязи Из ТаблицаРаспознанныхСозданных Цикл
		ДанныеОбратнойСвязи = РаспознаваниеДокументовКомплектыВызовСервера.ПолучитьОбратнуюСвязьДляСозданногоДокумента(
			СтрокаТаблицыСвязи.РаспознанныйОбъект,
			СтрокаТаблицыСвязи.СоздаваемыйДокумент
		);
		Если СтрокаТаблицыСвязи.СоздатьДокумент Тогда
			Пакет = Новый Структура;
			Пакет.Вставить("created", ДанныеОбратнойСвязи);
			РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(СтрокаТаблицыСвязи.РаспознанныйОбъект.ИдентификаторРезультата, Пакет);
		КонецЕсли;
		
		// Пакет created отправлен. Готовим из данные для set_creation
		ДанныеОбратнойСвязи.Удалить("Статус");
		ДанныеОбратнойСвязи.Вставить("set_id", set_id);
		ДанныеОбратнойСвязи.Вставить("doc_uuid", СтрокаТаблицыСвязи.РаспознанныйОбъект.ИдентификаторРезультата);
		ДанныеОбратнойСвязи.Вставить("ТипДокумента", ТипыДокументовВСервисе.Получить(СтрокаТаблицыСвязи.РаспознанныйОбъект.ТипДокумента));
		ДанныеОбратнойСвязи.Вставить("ОсновнойДокумент", ОсновнойДокумент);
		Если ОсновнойДокумент Тогда
			ОсновнойДокумент = Ложь;
		КонецЕсли;
		
		СтрокаТаблицыСвязи.ДанныеОбратнойСвязи = ДанныеОбратнойСвязи;
	КонецЦикла;
	
	
	ДанныеПакета = Новый Массив;
	Если ПараметрыСоздания.ДанныеОбработки <> Неопределено
		И ПараметрыСоздания.Свойство("НомерКомплекта") Тогда
		
		ДанныеКомплекта = ПараметрыСоздания.ДанныеОбработки.РезультатОбратнойСвязи.Комплекты.Получить(ПараметрыСоздания.НомерКомплекта);
		Для Каждого КлючЗначение Из ДанныеКомплекта Цикл
			СвязьНайдена = Ложь;
			Для Каждого СтрокаТаблицыСвязи Из ТаблицаРаспознанныхСозданных Цикл
				Если СтрокаТаблицыСвязи.РаспознанныйОбъект.Ссылка = КлючЗначение.Ключ Тогда
					СтрокаТаблицыСвязи.ДанныеОбратнойСвязи.Вставить("Действие", КлючЗначение.Значение);
					ДанныеПакета.Добавить(СтрокаТаблицыСвязи.ДанныеОбратнойСвязи);
					
					СвязьНайдена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не СвязьНайдена Тогда
				// При каких условиях можно зайти в эту ветку?
				
				ДопРаспознанныеДанные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КлючЗначение.Ключ,
					"Номер, Направление, ТипДокумента, НомерДокумента, ДатаДокумента, СуммаДокумента, Контрагент, Организация, ИдентификаторРезультата");
				ДопДанныеПакета = РаспознаваниеДокументовКомплектыВызовСервера.ПолучитьОбратнуюСвязьДляСозданногоДокумента(ТаблицаРаспознанныхСозданных[0].РаспознанныйОбъект);
				ДопДанныеПакета.Удалить("Статус");
				ДопДанныеПакета.Вставить("set_id", set_id);
				ДопДанныеПакета.Вставить("doc_uuid", ДопРаспознанныеДанные.ИдентификаторРезультата);
				ДопДанныеПакета.Вставить("ТипДокумента", ТипыДокументовВСервисе.Получить(ДопРаспознанныеДанные.ТипДокумента));
				ДопДанныеПакета.Вставить("ОсновнойДокумент", Ложь);
				ДопДанныеПакета.Вставить("Действие", КлючЗначение.Значение);
				
				ДанныеПакета.Добавить(ДопДанныеПакета);
			КонецЕсли;
		КонецЦикла;
		
		Если ПараметрыСоздания.ДанныеОбработки.ГрупповаяОбработка Тогда
			ОбратнаяСвязь = ПараметрыСоздания.ДанныеОбработки.РезультатОбратнойСвязи.Отправить;
			Если Не ЗначениеЗаполнено(ОбратнаяСвязь) Тогда
				ОбратнаяСвязь.Вставить("ИдентификаторРезультата", ТаблицаРаспознанныхСозданных[0].РаспознанныйОбъект.ИдентификаторРезультата);
				ОбратнаяСвязь.Вставить("ДанныеПакета", ДанныеПакета);
			Иначе
				Для Каждого ЧастьПакета Из ДанныеПакета Цикл
					ОбратнаяСвязь.ДанныеПакета.Добавить(ЧастьПакета);
				КонецЦикла;
			КонецЕсли;
		Иначе
			Пакет = Новый Структура;
			Пакет.Вставить("set_creation", Новый Структура("set_data", ДанныеПакета));
			РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(ТаблицаРаспознанныхСозданных[0].РаспознанныйОбъект.ИдентификаторРезультата, Пакет);
		КонецЕсли;
	Иначе
		Для Каждого СтрокаТаблицыСвязи Из ТаблицаРаспознанныхСозданных Цикл
			СтрокаТаблицыСвязи.ДанныеОбратнойСвязи.Вставить("Действие", "ДобавленАвтоматически");
			ДанныеПакета.Добавить(СтрокаТаблицыСвязи.ДанныеОбратнойСвязи);
		КонецЦикла;
		
		Пакет = Новый Структура;
		Пакет.Вставить("set_creation", Новый Структура("set_data", ДанныеПакета));
		РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(ТаблицаРаспознанныхСозданных[0].РаспознанныйОбъект.ИдентификаторРезультата, Пакет);
	КонецЕсли;
	
	Результат.УдалосьПровести = УдалосьПровести;
	
	СоответствиеСтатусОбработан = Новый Соответствие;
	Для Каждого СтрокаТаблицыСвязи Из ТаблицаРаспознанныхСозданных Цикл
		СоответствиеСтатусОбработан.Вставить(СтрокаТаблицыСвязи.РаспознанныйОбъект.Ссылка, СтрокаТаблицыСвязи.СоздаваемыйДокумент);
	КонецЦикла;
	Результат.СоответствиеСтатусОбработан = СоответствиеСтатусОбработан;
	
	Если Результат.УдалосьПровести
		И ПараметрыСоздания.ДанныеОбработки <> Неопределено
		И ПараметрыСоздания.Свойство("НомерКомплекта") Тогда
		
		ПараметрыСоздания.ДанныеОбработки.НомераСозданныхКомплектов.Добавить(ПараметрыСоздания.НомерКомплекта);
	КонецЕсли;
		
КонецПроцедуры

Функция НужноПрикрепитьДополнительныйСкан(ТипКомплекта, ТипРаспознанного, ТипСозданного) Экспорт
	
	// Кроме основного скана могут потребоваться дополнительные
	Если ТипКомплекта = "АктОбОказанииУслугСчетНаОплатуТОРГ12"
		Или ТипКомплекта = "АктОбОказанииУслугСчетФактураТОРГ12"
		Или ТипКомплекта = "АктОбОказанииУслугСчетНаОплатуСчетФактураТОРГ12"
		Тогда
		
		Если ТипРаспознанного = Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг
			И (Метаданные.ОпределяемыеТипы.ПоступлениеТоваровУслугБРД.Тип.СодержитТип(ТипСозданного)
				Или Метаданные.ОпределяемыеТипы.РеализацияТоваровУслугБРД.Тип.СодержитТип(ТипСозданного)) Тогда
				
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипКомплекта = "АктОбОказанииУслугСчетФактураУПД"
		Или ТипКомплекта = "СчетФактураТОРГ12УПД"
		Или ТипКомплекта = "АктОбОказанииУслугСчетНаОплатуСчетФактураУПД"
		Или ТипКомплекта = "СчетНаОплатуСчетФактураТОРГ12УПД"
		Тогда
		
		Если ТипРаспознанного = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
			И (Метаданные.ОпределяемыеТипы.ПоступлениеТоваровУслугБРД.Тип.СодержитТип(ТипСозданного)
				Или Метаданные.ОпределяемыеТипы.РеализацияТоваровУслугБРД.Тип.СодержитТип(ТипСозданного)) Тогда
				
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипКомплекта = "АктОбОказанииУслугТОРГ12УПД"
		Или ТипКомплекта = "АктОбОказанииУслугСчетФактураТОРГ12УПД"
		Или ТипКомплекта = "АктОбОказанииУслугСчетНаОплатуТОРГ12УПД"
		Или ТипКомплекта = "АктОбОказанииУслугСчетНаОплатуСчетФактураТОРГ12УПД"
		Тогда
		
		Если (ТипРаспознанного = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
				Или ТипРаспознанного = Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг)
			И (Метаданные.ОпределяемыеТипы.ПоступлениеТоваровУслугБРД.Тип.СодержитТип(ТипСозданного)
				Или Метаданные.ОпределяемыеТипы.РеализацияТоваровУслугБРД.Тип.СодержитТип(ТипСозданного)) Тогда
				
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура РаспределитьСуммуНаСкидки(Таблица, ИмяКолонки, СуммаРаспределения, ПараметрыОтбора = Неопределено) Экспорт
	
	ПриводитьКМинимальным = ЦенообразованиеСерверПовтИсп.МинимальныеЦеныИспользуются()
	И Таблица.Количество()>0
	И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Таблица[0], "МинимальнаяЦена");
	
	ЭтоЗаказПокупателяИлиРасходная = Истина;
	
	// Посчитаем общую сумму помеченных позиций
	ОбщаяСумма = 0;
	Для каждого СтрокаТабличнойЧасти Из Таблица Цикл
		
		Если ПараметрыОтбора <> Неопределено Тогда
			Если НЕ ОбщегоНазначенияУНФКлиентСервер.ОбъектСоответствуетПараметрамОтбора(СтрокаТабличнойЧасти, ПараметрыОтбора) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Цена = СтрокаТабличнойЧасти.Цена;		
		
		Если ЭтоЗаказПокупателяИлиРасходная Тогда	
			СуммаПоСтроке = Цена * СтрокаТабличнойЧасти.Количество;
		Иначе
			СуммаПоСтроке = Цена * СтрокаТабличнойЧасти.Количество 
			* ?(СтрокаТабличнойЧасти.Свойство("Кратность"), СтрокаТабличнойЧасти.Кратность, 1) 
			* ?(СтрокаТабличнойЧасти.Свойство("Коэффициент"), СтрокаТабличнойЧасти.Коэффициент, 1);
		КонецЕсли;
		
		Если ПриводитьКМинимальным И СтрокаТабличнойЧасти.МинимальнаяЦена>0 Тогда
			
			Если ЭтоЗаказПокупателяИлиРасходная Тогда
				МинимальнаяСуммаПоСтроке = СтрокаТабличнойЧасти.МинимальнаяЦена * СтрокаТабличнойЧасти.Количество;
			Иначе
				МинимальнаяСуммаПоСтроке = СтрокаТабличнойЧасти.МинимальнаяЦена * СтрокаТабличнойЧасти.Количество
				* ?(СтрокаТабличнойЧасти.Свойство("Кратность"), СтрокаТабличнойЧасти.Кратность, 1) 
				* ?(СтрокаТабличнойЧасти.Свойство("Коэффициент"), СтрокаТабличнойЧасти.Коэффициент, 1);
			КонецЕсли;
			
			// Исключим сумму по этой строке из формулы расчета процента
			Если СуммаПоСтроке <= МинимальнаяСуммаПоСтроке Тогда         					
				СуммаПоСтроке = 0; 			
			КонецЕсли;
			
		КонецЕсли;               				
		
		ОбщаяСумма = ОбщаяСумма + СуммаПоСтроке;			
		
	КонецЦикла;
	
	Если ОбщаяСумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПроцентСкидки = СуммаРаспределения / ОбщаяСумма * 100;
	
	ОбщаяСуммаСкидки = 0;
	ПоследняяСтрока = Неопределено;
	Для каждого СтрокаТабличнойЧасти Из Таблица Цикл
		
		Если ПараметрыОтбора <> Неопределено Тогда
			Если НЕ ОбщегоНазначенияУНФКлиентСервер.ОбъектСоответствуетПараметрамОтбора(СтрокаТабличнойЧасти, ПараметрыОтбора) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ПриводитьКМинимальным И СтрокаТабличнойЧасти.МинимальнаяЦена > 0 Тогда
			
			МинимальнаяСуммаПоСтроке = СтрокаТабличнойЧасти.МинимальнаяЦена * СтрокаТабличнойЧасти.Количество
			* ?(СтрокаТабличнойЧасти.Свойство("Кратность"), СтрокаТабличнойЧасти.Кратность, 1) 
			* ?(СтрокаТабличнойЧасти.Свойство("Коэффициент"), СтрокаТабличнойЧасти.Коэффициент, 1);
			
			СуммаСтрокиБезСкидок = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество 
			* ?(СтрокаТабличнойЧасти.Свойство("Кратность"), СтрокаТабличнойЧасти.Кратность, 1) 
			* ?(СтрокаТабличнойЧасти.Свойство("Коэффициент"), СтрокаТабличнойЧасти.Коэффициент, 1);
			
			Если СуммаСтрокиБезСкидок <= МинимальнаяСуммаПоСтроке Тогда
				
				ПроцентСкидки = 0;
				СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;
				
			Иначе
				
				МаксимальнаяСуммаСкидки = СуммаСтрокиБезСкидок - МинимальнаяСуммаПоСтроке;
				СуммаСкидкиНаценки = СуммаСтрокиБезСкидок * ПроцентСкидки / 100;
				
				Если СуммаСкидкиНаценки > МаксимальнаяСуммаСкидки Тогда
					
					ПроцентСкидки =  МаксимальнаяСуммаСкидки / СуммаСтрокиБезСкидок * 100;
					
				КонецЕсли;				
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = ПроцентСкидки;	
		
		Если ЭтоЗаказПокупателяИлиРасходная Тогда
			СуммаСтрокиБезСкидок = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
			СуммаСкидкиНаценки = СуммаСтрокиБезСкидок * ПроцентСкидки / 100;
			СтрокаТабличнойЧасти.СуммаСкидкиНаценки = СуммаСкидкиНаценки;
		Иначе
			СуммаСтрокиБезСкидок = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество 
			* ?(СтрокаТабличнойЧасти.Свойство("Кратность"), СтрокаТабличнойЧасти.Кратность, 1) 
			* ?(СтрокаТабличнойЧасти.Свойство("Коэффициент"), СтрокаТабличнойЧасти.Коэффициент, 1);
			СуммаСкидкиНаценки = СуммаСтрокиБезСкидок * ПроцентСкидки / 100;
			Если СтрокаТабличнойЧасти.Свойство("СуммаСкидкиНаценки") Тогда
				СтрокаТабличнойЧасти.СуммаСкидкиНаценки = СуммаСкидкиНаценки;
			КонецЕсли;
			СтрокаТабличнойЧасти.Пометка = Истина;
		КонецЕсли;
		СтрокаТабличнойЧасти.Сумма = СуммаСтрокиБезСкидок - СуммаСкидкиНаценки;
		
		ОбщаяСуммаСкидки = ОбщаяСуммаСкидки + СуммаСкидкиНаценки;
		ПоследняяСтрока = СтрокаТабличнойЧасти;
		ПроцентСкидки = СуммаРаспределения / ОбщаяСумма * 100;
		
	КонецЦикла;
	
	ИтогСуммаСкидкиНаценки = 0;
	Для каждого СтрокаТабличнойЧасти Из Таблица Цикл
		Если ПараметрыОтбора <> Неопределено Тогда
			Если Не ОбщегоНазначенияУНФКлиентСервер.ОбъектСоответствуетПараметрамОтбора(СтрокаТабличнойЧасти,
				ПараметрыОтбора) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ИтогСуммаСкидкиНаценки = ИтогСуммаСкидкиНаценки + СтрокаТабличнойЧасти.СуммаСкидкиНаценки;
	КонецЦикла;
	
	НепогашеннаяСумма = СуммаРаспределения - ИтогСуммаСкидкиНаценки;
	Если ПоследняяСтрока <> Неопределено И НепогашеннаяСумма <> 0 Тогда
		
		Если ЭтоЗаказПокупателяИлиРасходная Тогда
			
			СуммаСтрокиБезСкидки = ПоследняяСтрока.Цена * ПоследняяСтрока.Количество;
			
			ПроцентСкидкиНаценки = (ПоследняяСтрока.Цена * ПоследняяСтрока.Количество 
			* ПоследняяСтрока.ПроцентСкидкиНаценки/100 
			+ НепогашеннаяСумма) / СуммаСтрокиБезСкидки * 100;
			
		Иначе
			
			СуммаСтрокиБезСкидки = ПоследняяСтрока.Цена * ПоследняяСтрока.Количество 
			* ?(ПоследняяСтрока.Свойство("Кратность"), ПоследняяСтрока.Кратность, 1) 
			* ?(ПоследняяСтрока.Свойство("Коэффициент"), ПоследняяСтрока.Коэффициент, 1);
			
			ПроцентСкидкиНаценки = (ПоследняяСтрока.Цена * ПоследняяСтрока.Количество 
			* ?(ПоследняяСтрока.Свойство("Кратность"), ПоследняяСтрока.Кратность, 1) 
			* ?(ПоследняяСтрока.Свойство("Коэффициент"), ПоследняяСтрока.Коэффициент, 1) 
			* ПоследняяСтрока.ПроцентСкидкиНаценки/100 
			+ НепогашеннаяСумма) / СуммаСтрокиБезСкидки * 100;
			
		КонецЕсли;
		
		Если ПриводитьКМинимальным И ПоследняяСтрока.МинимальнаяЦена > 0 Тогда
			
			МинимальнаяСуммаПоСтроке = ПоследняяСтрока.МинимальнаяЦена * ПоследняяСтрока.Количество
			* ?(ПоследняяСтрока.Свойство("Кратность"), ПоследняяСтрока.Кратность, 1) 
			* ?(ПоследняяСтрока.Свойство("Коэффициент"), ПоследняяСтрока.Коэффициент, 1);
			
			Если ПоследняяСтрока.Сумма <= МинимальнаяСуммаПоСтроке Тогда   				
				НепогашеннаяСумма = 0;
			КонецЕсли;
			
		Иначе
			
			ПоследняяСтрока.ПроцентСкидкиНаценки = ПроцентСкидкиНаценки;
			
		КонецЕсли;
		
		ПоследняяСтрока.СуммаСкидкиНаценки = ПоследняяСтрока.СуммаСкидкиНаценки + НепогашеннаяСумма;
		ПоследняяСтрока.Сумма = СуммаСтрокиБезСкидок - ПоследняяСтрока.СуммаСкидкиНаценки;
		ПроцентСкидки = СуммаРаспределения / ОбщаяСумма * 100;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаполненииПараметровСозданияНовогоЭлемента(СвязанныеКолонки, ИмяЭлемента, ТипДокумента, Направление) Экспорт
	
	СвязанныеКолонки = НоваяТаблицаСвязанныеКолонки();
	
	Если ИмяЭлемента = "Номенклатура" Тогда  
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "Наименование";
		НоваяКолонка.ИмяРеквизита = "Номенклатура";
		НоваяКолонка.ИскатьПодходящие = Истина;
		НоваяКолонка.Обязательный = Истина;
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "Артикул";
		НоваяКолонка.ИмяРеквизита = "Артикул";
		НоваяКолонка.ИскатьПодходящие = Истина;
		НоваяКолонка.Обязательный = Ложь;
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "Родитель";
		НоваяКолонка.ИмяРеквизита = "Родитель";
		НоваяКолонка.Синоним = "Входит в группу";
		НоваяКолонка.ИскатьПодходящие = Ложь;
		НоваяКолонка.ПустаяСсылка = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
		НоваяКолонка.Обязательный = Ложь;
		НоваяКолонка.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "ЕдиницаИзмерения";
		НоваяКолонка.ИмяРеквизита = "ЕдиницаИзмерения";
		НоваяКолонка.Синоним = "Единица измерения";
		НоваяКолонка.ИскатьПодходящие = Ложь;
		НоваяКолонка.ПустаяСсылка = ПредопределенноеЗначение("Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка");
		НоваяКолонка.Обязательный = Истина;
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "ТипНоменклатуры";
		НоваяКолонка.ИмяРеквизита = "ТипНоменклатуры";
		НоваяКолонка.Синоним = "Тип номенклатуры";
		НоваяКолонка.ИскатьПодходящие = Ложь;
		НоваяКолонка.ПустаяСсылка = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас");
		НоваяКолонка.Обязательный = Истина;
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "КатегорияНоменклатуры";
		НоваяКолонка.ИмяРеквизита = "КатегорияНоменклатуры";
		НоваяКолонка.Синоним = "Категория";
		НоваяКолонка.ИскатьПодходящие = Ложь;
		НоваяКолонка.ПустаяСсылка = Справочники.КатегорииНоменклатуры.БезКатегории;
		НоваяКолонка.Обязательный = Истина;
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "ВидСтавкиНДС";
		НоваяКолонка.ИмяРеквизита = "СтавкаНДС";
		НоваяКолонка.Синоним = "% НДС";
		НоваяКолонка.ИскатьПодходящие = Ложь;
		НоваяКолонка.ПустаяСсылка = ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка");
		НоваяКолонка.Обязательный = Ложь;
		
	ИначеЕсли ИмяЭлемента = "ЕдиницаИзмерения" Тогда
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "Наименование";
		НоваяКолонка.ИмяРеквизита = "ЕдиницаИзмерения";
		НоваяКолонка.Синоним = "Наименование";
		НоваяКолонка.ИскатьПодходящие = Истина;
		НоваяКолонка.Обязательный = Истина;
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "Код";
		НоваяКолонка.ИмяРеквизита = "КодЕдиницыИзмерения";
		НоваяКолонка.Синоним = "Код";
		НоваяКолонка.ИскатьПодходящие = Истина;
		НоваяКолонка.Обязательный = Истина;
		
	ИначеЕсли ИмяЭлемента = "СтранаПроисхождения" Тогда
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "Наименование";
		НоваяКолонка.ИмяРеквизита = "СтранаПроисхождения";
		НоваяКолонка.Синоним = "Наименование";
		НоваяКолонка.ИскатьПодходящие = Истина;
		НоваяКолонка.Обязательный = Истина;
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "Код";
		НоваяКолонка.ИмяРеквизита = "КодСтраныПроисхождения";
		НоваяКолонка.Синоним = "Код";
		НоваяКолонка.ИскатьПодходящие = Истина;
		НоваяКолонка.Обязательный = Истина;
		
	ИначеЕсли ИмяЭлемента = "НомерГТД" Тогда
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "Код";
		НоваяКолонка.ИмяРеквизита = "НомерГТД";
		НоваяКолонка.Синоним = "Номер";
		НоваяКолонка.ИскатьПодходящие = Истина;
		НоваяКолонка.Обязательный = Истина;
		
	ИначеЕсли ИмяЭлемента = "БанковскийСчетКонтрагента" Тогда
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "Владелец";
		НоваяКолонка.ИмяРеквизита = "Продавец";
		НоваяКолонка.Синоним = "Контрагент";
		НоваяКолонка.ИскатьПодходящие = Истина;
		НоваяКолонка.ПустаяСсылка = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		НоваяКолонка.Обязательный = Истина;
		НоваяКолонка.ПодходящиеОбязательноеРавенство = Истина;
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "НомерСчета";
		НоваяКолонка.ИмяРеквизита = "БанковскийСчетКонтрагента";
		НоваяКолонка.Синоним = "Номер счета";
		НоваяКолонка.ИскатьПодходящие = Истина;
		НоваяКолонка.Обязательный = Истина;
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "Банк";
		НоваяКолонка.ИмяРеквизита = "Банк";
		НоваяКолонка.Синоним = "Банк";
		НоваяКолонка.ИскатьПодходящие = Истина;
		НоваяКолонка.ПустаяСсылка = ПредопределенноеЗначение("Справочник.Банки.ПустаяСсылка");
		НоваяКолонка.Обязательный = Истина;
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "ВалютаДенежныхСредств";
		НоваяКолонка.Синоним = "Валюта";
		НоваяКолонка.ИскатьПодходящие = Ложь;
		НоваяКолонка.ПустаяСсылка = УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета();
		НоваяКолонка.Обязательный = Истина;
		
	ИначеЕсли ИмяЭлемента = "БанковскийСчетОрганизации" Тогда
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "Владелец";
		НоваяКолонка.ИмяРеквизита = "ПродавецОрганизация";
		НоваяКолонка.Синоним = "Контрагент";
		НоваяКолонка.ИскатьПодходящие = Истина;
		НоваяКолонка.ПустаяСсылка = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		НоваяКолонка.Обязательный = Истина;
		НоваяКолонка.ПодходящиеОбязательноеРавенство = Истина;
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "НомерСчета";
		НоваяКолонка.ИмяРеквизита = "БанковскийСчетОрганизации";
		НоваяКолонка.Синоним = "Номер счета";
		НоваяКолонка.ИскатьПодходящие = Истина;
		НоваяКолонка.Обязательный = Истина;
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "Банк";
		НоваяКолонка.ИмяРеквизита = "Банк";
		НоваяКолонка.Синоним = "Банк";
		НоваяКолонка.ИскатьПодходящие = Истина;
		НоваяКолонка.ПустаяСсылка = ПредопределенноеЗначение("Справочник.Банки.ПустаяСсылка");
		НоваяКолонка.Обязательный = Истина;
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "ВалютаДенежныхСредств";
		НоваяКолонка.Синоним = "Валюта";
		НоваяКолонка.ИскатьПодходящие = Ложь;
		НоваяКолонка.ПустаяСсылка = УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета();
		НоваяКолонка.Обязательный = Истина;
		
	ИначеЕсли ИмяЭлемента = "Продавец" Тогда
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "Наименование";
		НоваяКолонка.ИмяРеквизита = "Продавец";
		НоваяКолонка.ИскатьПодходящие = Истина;
		НоваяКолонка.Обязательный = Истина;
		НоваяКолонка.РеквизитыЗаполнения = "НаименованиеПолное";
		
		Если ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
			ИЛИ ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура Тогда
			
			НоваяКолонка = СвязанныеКолонки.Добавить();
			НоваяКолонка.Реквизит = "ИНН";
			НоваяКолонка.ИмяРеквизита = "ИННКПППродавца";
			НоваяКолонка.ИскатьПодходящие = Истина;
			НоваяКолонка.Обязательный = Ложь;
			
			НоваяКолонка = СвязанныеКолонки.Добавить();
			НоваяКолонка.Реквизит = "КПП";
			НоваяКолонка.ИмяРеквизита = "ИННКПППродавца";
			НоваяКолонка.ИскатьПодходящие = Ложь;
			НоваяКолонка.Обязательный = Ложь;
			
		Иначе
			
			НоваяКолонка = СвязанныеКолонки.Добавить();
			НоваяКолонка.Реквизит = "ИНН";
			НоваяКолонка.ИмяРеквизита = "ИННПродавца";
			НоваяКолонка.ИскатьПодходящие = Истина;
			НоваяКолонка.Обязательный = Ложь;
			
			НоваяКолонка = СвязанныеКолонки.Добавить();
			НоваяКолонка.Реквизит = "КПП";
			НоваяКолонка.ИмяРеквизита = "КПППродавца";
			НоваяКолонка.ИскатьПодходящие = Ложь;
			НоваяКолонка.Обязательный = Ложь;
			
		КонецЕсли;
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "ВидКонтрагента";
		НоваяКолонка.Синоним = "Юридическое/физическое лицо или гос. орган";
		НоваяКолонка.ИскатьПодходящие = Ложь;
		НоваяКолонка.ПустаяСсылка = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентов.ЮридическоеЛицо");
		НоваяКолонка.Обязательный = Истина;
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "Поставщик";
		НоваяКолонка.Синоним = "Это поставщик";
		НоваяКолонка.ИскатьПодходящие = Ложь;
		НоваяКолонка.ПустаяСсылка = Истина;
		НоваяКолонка.Обязательный = Истина;
		
		ДобавитьНастройкуВзаиморасчетовКонтрагента(СвязанныеКолонки);
		ДобавитьСчетаУчетаКонтрагента(СвязанныеКолонки);
		
	ИначеЕсли ИмяЭлемента = "ПродавецОрганизация" Тогда
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "Наименование";
		НоваяКолонка.ИмяРеквизита = "ПродавецОрганизация";
		НоваяКолонка.ИскатьПодходящие = Истина;
		НоваяКолонка.Обязательный = Истина;
		НоваяКолонка.РеквизитыЗаполнения = "НаименованиеПолное,НаименованиеСокращенное";
		
		Если ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
			ИЛИ ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура Тогда
			
			НоваяКолонка = СвязанныеКолонки.Добавить();
			НоваяКолонка.Реквизит = "ИНН";
			НоваяКолонка.ИмяРеквизита = "ИННКПППродавца";
			НоваяКолонка.ИскатьПодходящие = Истина;
			НоваяКолонка.Обязательный = Ложь;
			
			НоваяКолонка = СвязанныеКолонки.Добавить();
			НоваяКолонка.Реквизит = "КПП";
			НоваяКолонка.ИмяРеквизита = "ИННКПППродавца";
			НоваяКолонка.ИскатьПодходящие = Ложь;
			НоваяКолонка.Обязательный = Ложь;
			
		Иначе
			
			НоваяКолонка = СвязанныеКолонки.Добавить();
			НоваяКолонка.Реквизит = "ИНН";
			НоваяКолонка.ИмяРеквизита = "ИННПродавца";
			НоваяКолонка.ИскатьПодходящие = Истина;
			НоваяКолонка.Обязательный = Ложь;
			
			НоваяКолонка = СвязанныеКолонки.Добавить();
			НоваяКолонка.Реквизит = "КПП";
			НоваяКолонка.ИмяРеквизита = "КПППродавца";
			НоваяКолонка.ИскатьПодходящие = Ложь;
			НоваяКолонка.Обязательный = Ложь;
			
		КонецЕсли;
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "Поставщик";
		НоваяКолонка.Синоним = "Это поставщик";
		НоваяКолонка.ИскатьПодходящие = Ложь;
		НоваяКолонка.ПустаяСсылка = Истина;
		НоваяКолонка.Обязательный = Истина;
		
		ДобавитьНастройкуВзаиморасчетовКонтрагента(СвязанныеКолонки);
		ДобавитьСчетаУчетаКонтрагента(СвязанныеКолонки);
		
	ИначеЕсли ИмяЭлемента = "Покупатель" Тогда
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "Наименование";
		НоваяКолонка.ИмяРеквизита = "Покупатель";
		НоваяКолонка.ИскатьПодходящие = Истина;
		НоваяКолонка.Обязательный = Истина;
		НоваяКолонка.РеквизитыЗаполнения = "НаименованиеПолное";
		
		Если ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
			ИЛИ ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура Тогда  
			
			НоваяКолонка = СвязанныеКолонки.Добавить();
			НоваяКолонка.Реквизит = "ИНН";
			НоваяКолонка.ИмяРеквизита = "ИННКПППокупателя";
			НоваяКолонка.ИскатьПодходящие = Истина;
			НоваяКолонка.Обязательный = Ложь;
			
			НоваяКолонка = СвязанныеКолонки.Добавить();
			НоваяКолонка.Реквизит = "КПП";
			НоваяКолонка.ИмяРеквизита = "ИННКПППокупателя";
			НоваяКолонка.ИскатьПодходящие = Ложь;
			НоваяКолонка.Обязательный = Ложь;
			
		Иначе
			
			НоваяКолонка = СвязанныеКолонки.Добавить();
			НоваяКолонка.Реквизит = "ИНН";
			НоваяКолонка.ИмяРеквизита = "ИННПокупателя";
			НоваяКолонка.ИскатьПодходящие = Истина;
			НоваяКолонка.Обязательный = Ложь;
			
			НоваяКолонка = СвязанныеКолонки.Добавить();
			НоваяКолонка.Реквизит = "КПП";
			НоваяКолонка.ИмяРеквизита = "КПППокупателя";
			НоваяКолонка.ИскатьПодходящие = Ложь;
			НоваяКолонка.Обязательный = Ложь;
			
		КонецЕсли;
		
		ДобавитьНастройкуВзаиморасчетовКонтрагента(СвязанныеКолонки);
		ДобавитьСчетаУчетаКонтрагента(СвязанныеКолонки);
		
	ИначеЕсли ИмяЭлемента = "ПокупательОрганизация" Тогда
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "Наименование";
		НоваяКолонка.ИмяРеквизита = "ПокупательОрганизация";
		НоваяКолонка.ИскатьПодходящие = Истина;
		НоваяКолонка.Обязательный = Истина;
		НоваяКолонка.РеквизитыЗаполнения = "НаименованиеПолное,НаименованиеСокращенное";
		
		Если ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
			ИЛИ ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура Тогда
			
			НоваяКолонка = СвязанныеКолонки.Добавить();
			НоваяКолонка.Реквизит = "ИНН";
			НоваяКолонка.ИмяРеквизита = "ИННКПППокупателя";
			НоваяКолонка.ИскатьПодходящие = Истина;
			НоваяКолонка.Обязательный = Ложь;
			
			НоваяКолонка = СвязанныеКолонки.Добавить();
			НоваяКолонка.Реквизит = "КПП";
			НоваяКолонка.ИмяРеквизита = "ИННКПППокупателя";
			НоваяКолонка.ИскатьПодходящие = Ложь;
			НоваяКолонка.Обязательный = Ложь;
			
		Иначе
			
			НоваяКолонка = СвязанныеКолонки.Добавить();
			НоваяКолонка.Реквизит = "ИНН";
			НоваяКолонка.ИмяРеквизита = "ИННПокупателя";
			НоваяКолонка.ИскатьПодходящие = Истина;
			НоваяКолонка.Обязательный = Ложь;
			
			НоваяКолонка = СвязанныеКолонки.Добавить();
			НоваяКолонка.Реквизит = "КПП";
			НоваяКолонка.ИмяРеквизита = "КПППокупателя";
			НоваяКолонка.ИскатьПодходящие = Ложь;
			НоваяКолонка.Обязательный = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли ИмяЭлемента = "Грузоотправитель" Тогда
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "Наименование";
		НоваяКолонка.ИмяРеквизита = "Грузоотправитель";
		НоваяКолонка.ИскатьПодходящие = Истина;
		НоваяКолонка.Обязательный = Истина;
		НоваяКолонка.РеквизитыЗаполнения = "НаименованиеПолное";
		
		Если ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
			ИЛИ ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура Тогда
			
			НоваяКолонка = СвязанныеКолонки.Добавить();
			НоваяКолонка.Реквизит = "ИНН";
			НоваяКолонка.ИмяРеквизита = "ИННКППГрузоотправителя";
			НоваяКолонка.ИскатьПодходящие = Истина;
			НоваяКолонка.Обязательный = Ложь;
			
			НоваяКолонка = СвязанныеКолонки.Добавить();
			НоваяКолонка.Реквизит = "КПП";
			НоваяКолонка.ИмяРеквизита = "ИННКППГрузоотправителя";
			НоваяКолонка.ИскатьПодходящие = Ложь;
			НоваяКолонка.Обязательный = Ложь;
			
		Иначе
			
			НоваяКолонка = СвязанныеКолонки.Добавить();
			НоваяКолонка.Реквизит = "ИНН";
			НоваяКолонка.ИмяРеквизита = "ИННГрузоотправителя";
			НоваяКолонка.ИскатьПодходящие = Истина;
			НоваяКолонка.Обязательный = Ложь;
			
			НоваяКолонка = СвязанныеКолонки.Добавить();
			НоваяКолонка.Реквизит = "КПП";
			НоваяКолонка.ИмяРеквизита = "КППГрузоотправителя";
			НоваяКолонка.ИскатьПодходящие = Ложь;
			НоваяКолонка.Обязательный = Ложь;
			
		КонецЕсли;
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "Поставщик";
		НоваяКолонка.Синоним = "Это поставщик";
		НоваяКолонка.ИскатьПодходящие = Ложь;
		НоваяКолонка.ПустаяСсылка = Истина;
		НоваяКолонка.Обязательный = Истина;
		
		ДобавитьНастройкуВзаиморасчетовКонтрагента(СвязанныеКолонки);
		ДобавитьСчетаУчетаКонтрагента(СвязанныеКолонки);
		
	ИначеЕсли ИмяЭлемента = "Грузополучатель" Тогда
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "Наименование";
		НоваяКолонка.ИмяРеквизита = "Грузополучатель";
		НоваяКолонка.ИскатьПодходящие = Истина;
		НоваяКолонка.Обязательный = Истина;
		НоваяКолонка.РеквизитыЗаполнения = "НаименованиеПолное";
		
		Если ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
			ИЛИ ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура Тогда
			
			НоваяКолонка = СвязанныеКолонки.Добавить();
			НоваяКолонка.Реквизит = "ИНН";
			НоваяКолонка.ИмяРеквизита = "ИННКППГрузополучателя";
			НоваяКолонка.ИскатьПодходящие = Истина;
			НоваяКолонка.Обязательный = Ложь;
			
			НоваяКолонка = СвязанныеКолонки.Добавить();
			НоваяКолонка.Реквизит = "КПП";
			НоваяКолонка.ИмяРеквизита = "ИННКППГрузополучателя";
			НоваяКолонка.ИскатьПодходящие = Ложь;
			НоваяКолонка.Обязательный = Ложь;
			
		Иначе
			
			НоваяКолонка = СвязанныеКолонки.Добавить();
			НоваяКолонка.Реквизит = "ИНН";
			НоваяКолонка.ИмяРеквизита = "ИННГрузополучателя";
			НоваяКолонка.ИскатьПодходящие = Истина;
			НоваяКолонка.Обязательный = Ложь;
			
			НоваяКолонка = СвязанныеКолонки.Добавить();
			НоваяКолонка.Реквизит = "КПП";
			НоваяКолонка.ИмяРеквизита = "КППГрузополучателя";
			НоваяКолонка.ИскатьПодходящие = Ложь;
			НоваяКолонка.Обязательный = Ложь;
			
		КонецЕсли;
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "Поставщик";
		НоваяКолонка.Синоним = "Это поставщик";
		НоваяКолонка.ИскатьПодходящие = Ложь;
		НоваяКолонка.ПустаяСсылка = Истина;
		НоваяКолонка.Обязательный = Истина;
		
		ДобавитьНастройкуВзаиморасчетовКонтрагента(СвязанныеКолонки);
		ДобавитьСчетаУчетаКонтрагента(СвязанныеКолонки);
		
	ИначеЕсли ИмяЭлемента = "Договор" Тогда
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "ВидДоговора";
		НоваяКолонка.Синоним = "Вид договора";
		НоваяКолонка.ИскатьПодходящие = Истина;
		НоваяКолонка.ПустаяСсылка = Перечисления.ВидыДоговоров.ПустаяСсылка();
		НоваяКолонка.Обязательный = Истина;
		
		Если Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда
			
			НоваяКолонка = СвязанныеКолонки.Добавить();
			НоваяКолонка.Реквизит = "Владелец";
			НоваяКолонка.ИмяРеквизита = "Покупатель";
			НоваяКолонка.Синоним = "Контрагент";
			НоваяКолонка.ИскатьПодходящие = Истина;
			НоваяКолонка.ПустаяСсылка = Справочники.Контрагенты.ПустаяСсылка();
			НоваяКолонка.Обязательный = Истина;
			НоваяКолонка.ПодходящиеОбязательноеРавенство = Истина;
			
			НоваяКолонка = СвязанныеКолонки.Добавить();
			НоваяКолонка.Реквизит = "Организация";
			НоваяКолонка.ИмяРеквизита = "ПродавецОрганизация";
			НоваяКолонка.Синоним = "Организация";
			НоваяКолонка.ИскатьПодходящие = Истина;
			НоваяКолонка.ПустаяСсылка = Справочники.Организации.ПустаяСсылка();
			НоваяКолонка.Обязательный = Истина;
			НоваяКолонка.ПодходящиеОбязательноеРавенство = Истина;
			
		Иначе
			
			НоваяКолонка = СвязанныеКолонки.Добавить();
			НоваяКолонка.Реквизит = "Владелец";
			НоваяКолонка.ИмяРеквизита = "Продавец";
			НоваяКолонка.Синоним = "Контрагент";
			НоваяКолонка.ИскатьПодходящие = Истина;
			НоваяКолонка.ПустаяСсылка = Справочники.Контрагенты.ПустаяСсылка();
			НоваяКолонка.Обязательный = Истина;
			НоваяКолонка.ПодходящиеОбязательноеРавенство = Истина;
			
			НоваяКолонка = СвязанныеКолонки.Добавить();
			НоваяКолонка.Реквизит = "Организация";
			НоваяКолонка.ИмяРеквизита = "ПокупательОрганизация";
			НоваяКолонка.Синоним = "Организация";
			НоваяКолонка.ИскатьПодходящие = Истина;
			НоваяКолонка.ПустаяСсылка = Справочники.Организации.ПустаяСсылка();
			НоваяКолонка.Обязательный = Истина;
			НоваяКолонка.ПодходящиеОбязательноеРавенство = Истина;
			
		КонецЕсли;
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "Наименование";
		НоваяКолонка.ИмяРеквизита = "Договор";
		НоваяКолонка.Синоним = "Наименование";
		НоваяКолонка.ИскатьПодходящие = Истина;
		НоваяКолонка.Обязательный = Истина;
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "НомерДоговора";
		НоваяКолонка.ИмяРеквизита = "НомерДоговора";
		НоваяКолонка.Синоним = "Номер договора";
		НоваяКолонка.ИскатьПодходящие = Истина;
		НоваяКолонка.Обязательный = Истина;
		
		НоваяКолонка = СвязанныеКолонки.Добавить();
		НоваяКолонка.Реквизит = "ДатаДоговора";
		НоваяКолонка.ИмяРеквизита = "ДатаДоговора";
		НоваяКолонка.Синоним = "Дата договора";
		НоваяКолонка.ИскатьПодходящие = Истина;
		НоваяКолонка.ПустаяСсылка = '00010101';
		НоваяКолонка.Обязательный = Истина;
		
	ИначеЕсли ИмяЭлемента = "Контрагенты" Тогда
		
		ДобавитьНастройкуВзаиморасчетовКонтрагента(СвязанныеКолонки);
		ДобавитьСчетаУчетаКонтрагента(СвязанныеКолонки);  
		
	КонецЕсли;
	
	СвязанныеКолонки = СвязанныеКолонкиВМассив(СвязанныеКолонки);
	
КонецПроцедуры

Функция ПолучитьСвойстваПоСчетамУчетаНоменклатуры(Номенклатура) Экспорт
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("ОчиститьЗаказИПодразделение", Ложь);
	СтруктураДанные.Вставить("ОчиститьНаправлениеДеятельности", Ложь);
	СтруктураДанные.Вставить("НаправлениеДеятельности", Номенклатура.НаправлениеДеятельности);
	
	Если Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Расходы
	   И Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Доходы
	   И Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.НезавершенноеПроизводство
	   И Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.КосвенныеЗатраты Тогда
		СтруктураДанные.ОчиститьЗаказИПодразделение = Истина;
	КонецЕсли;
	
	Если Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Расходы
	   И Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.СебестоимостьПродаж
	   И Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Доходы Тогда
		СтруктураДанные.ОчиститьНаправлениеДеятельности = Истина;
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции

Функция ДанныеВыбораБанка(Параметры) Экспорт 
	
	// Для числовой строки использует поиск по коду банка, в остальных случаях поиск идет по коду, SWIFT и наименованию банка.
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Параметры.СтрокаПоиска) Тогда
		
		СтрокаПоиска = Параметры.СтрокаПоиска + "%";
		
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 20
		|	Банки.Ссылка КАК Ссылка,
		|	Банки.Код КАК ПолеПоиска,
		|	Банки.Наименование КАК ПолеРасшифровки,
		|	0 КАК Сортировка,
		|	0 КАК Упорядочивание
		|ИЗ
		|	Справочник.Банки КАК Банки
		|ГДЕ
		|	Банки.ЭтоГруппа = ЛОЖЬ
		|	И Банки.Код ПОДОБНО &СтрокаПоиска
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 20
		|	Банки.Ссылка,
		|	Банки.Код,
		|	Банки.Наименование,
		|	0,
		|	1
		|ИЗ
		|	Справочник.КлассификаторБанков КАК Банки
		|ГДЕ
		|	Банки.ЭтоГруппа = ЛОЖЬ
		|	И Банки.Код ПОДОБНО &СтрокаПоиска
		|
		|УПОРЯДОЧИТЬ ПО
		|	Упорядочивание,
		|	ПолеПоиска";

	Иначе
		
		// Для повышения производительности в файловом режиме используем индексируемый поиск по началу строки.
		Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			СтрокаПоиска = Параметры.СтрокаПоиска + "%";
		Иначе
			СтрокаПоиска = "%" + Параметры.СтрокаПоиска + "%";
		КонецЕсли;
		
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 20
		|	Банки.Ссылка КАК Ссылка,
		|	Банки.Код КАК ПолеПоиска,
		|	Банки.Наименование КАК ПолеРасшифровки,
		|	0 КАК Сортировка
		|ИЗ
		|	Справочник.Банки КАК Банки
		|ГДЕ
		|	Банки.ЭтоГруппа = ЛОЖЬ
		|	И Банки.Код ПОДОБНО &СтрокаПоиска
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 20
		|	Банки.Ссылка,
		|	Банки.СВИФТБИК,
		|	Банки.Наименование,
		|	0
		|ИЗ
		|	Справочник.Банки КАК Банки
		|ГДЕ
		|	Банки.ЭтоГруппа = ЛОЖЬ
		|	И Банки.СВИФТБИК ПОДОБНО &СтрокаПоиска
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 20
		|	Банки.Ссылка,
		|	Банки.Наименование,
		|	ВЫБОР
		|		КОГДА Банки.Страна = &СтранаРФ
		|			ТОГДА Банки.Код
		|		ИНАЧЕ Банки.СВИФТБИК
		|	КОНЕЦ,
		|	1
		|ИЗ
		|	Справочник.Банки КАК Банки
		|ГДЕ
		|	Банки.ЭтоГруппа = ЛОЖЬ
		|	И Банки.Наименование ПОДОБНО &СтрокаПоиска
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 20
		|	Банки.Ссылка,
		|	Банки.Наименование,
		|	Банки.Код,
		|	2
		|ИЗ
		|	Справочник.КлассификаторБанков КАК Банки
		|ГДЕ
		|	Банки.ЭтоГруппа = ЛОЖЬ
		|	И Банки.Наименование ПОДОБНО &СтрокаПоиска
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сортировка,
		|	ПолеПоиска";
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СтрокаПоиска",СтрокаПоиска);
	Запрос.УстановитьПараметр("СтранаРФ", Справочники.СтраныМира.Россия);
	
	Результат = Запрос.Выполнить();
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Если Результат.Пустой() Тогда
		Возврат ДанныеВыбора;
	КонецЕсли;
	
	МаксКоличествоВыбранных = 20;
	
	РезультатыОтбора = Новый Соответствие;
	РезультатыОтбора.Вставить("ПолеПоиска");
	
	ШрифтВыделения = Новый Шрифт(,,Истина);
	ЦветВыделения  = ЦветаСтиля.ЦветУспешногоПоиска;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если РезультатыОтбора.Количество() >= МаксКоличествоВыбранных Тогда
			Прервать;
		КонецЕсли;
		
		Если ТипЗнч(Выборка.Ссылка) <> Тип("СправочникСсылка.Банки")
			И РезультатыОтбора.Получить(Выборка.ПолеПоиска) <> Неопределено Тогда
			
			Продолжить;
		КонецЕсли;
		
		РезультатыОтбора.Вставить(Выборка.ПолеПоиска, Выборка.ПолеПоиска);
		
		// Для каждой строки результата формируем представление, аналогично платформенному.
		ПредставлениеСтроки = Новый Массив;
		ИсходнаяСтрока = СокрЛП(Выборка.ПолеПоиска);
		ВыделяемаяЧасть = Параметры.СтрокаПоиска;
		ПолеРасшифровки = СокрЛП(Выборка.ПолеРасшифровки);
		
		// Находим и выделяем цветом часть строки, которая была введена пользователем.
		Поз = СтрНайти(ВРег(ИсходнаяСтрока), ВРег(Параметры.СтрокаПоиска),, 1);
		ВыделяемаяПодстрока = Сред(ИсходнаяСтрока, Поз, СтрДлина(ВыделяемаяЧасть));
		ФорматВыделяемаяСтрока = Новый ФорматированнаяСтрока(ВыделяемаяПодстрока, ШрифтВыделения, ЦветВыделения);
		
		// Находим оставшуюся часть строки и формируем массив из введенной пользователем строки и оставшейся части.
		Если Поз = 1 Тогда
			// Часть введенной пользователем строки находится в начале, значит оставшуюся строку нужно искать с конца.
			ПредставлениеСтроки.Добавить(ФорматВыделяемаяСтрока);
			ПредставлениеСтроки.Добавить(Новый ФорматированнаяСтрока(Прав(ИсходнаяСтрока, СтрДлина(ИсходнаяСтрока) - СтрДлина(ВыделяемаяЧасть))));
		ИначеЕсли Поз = СтрДлина(ИсходнаяСтрока) Тогда
			// Часть введенной пользователем строки находится в конце, значит оставшуюся строку  искать с начала.
			ПредставлениеСтроки.Добавить(Новый ФорматированнаяСтрока(Лев(ИсходнаяСтрока, Поз-1)));
			ПредставлениеСтроки.Добавить(ФорматВыделяемаяСтрока);
		Иначе
			// Часть введенной пользователем строки находится в середине, значит оставшуюся строку нужно искать в начале и в конце.
			ПредставлениеСтроки.Добавить(Новый ФорматированнаяСтрока(Лев(ИсходнаяСтрока, Поз-1)));
			ПредставлениеСтроки.Добавить(ФорматВыделяемаяСтрока);
			ПредставлениеСтроки.Добавить(Новый ФорматированнаяСтрока(Сред(ИсходнаяСтрока, Поз + СтрДлина(ВыделяемаяЧасть))));
		КонецЕсли;
		
		КодЯвляетсяРасшифровкой = ?(Выборка.Сортировка = 0, Истина, Ложь);
		
		Если КодЯвляетсяРасшифровкой Тогда
			ДанныеВыбора.Добавить(Выборка.Ссылка, Новый ФорматированнаяСтрока(ПредставлениеСтроки, " ", ПолеРасшифровки));
		Иначе
			ДанныеВыбора.Добавить(Выборка.Ссылка, Новый ФорматированнаяСтрока(ПолеРасшифровки, " ", ПредставлениеСтроки));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьНастройкуВзаиморасчетовКонтрагента(СвязанныеКолонки)
	
	НоваяКолонка = СвязанныеКолонки.Добавить();
	НоваяКолонка.Реквизит = "ВестиРасчетыПоДоговорам";
	НоваяКолонка.Синоним = "Вести расчеты по договорам";
	НоваяКолонка.ИскатьПодходящие = Ложь;
	НоваяКолонка.ПустаяСсылка = Истина;
	НоваяКолонка.Обязательный = Истина;
	
	НоваяКолонка = СвязанныеКолонки.Добавить();
	НоваяКолонка.Реквизит = "ВестиРасчетыПоДокументам";
	НоваяКолонка.Синоним = "Вести расчеты по документам";
	НоваяКолонка.ИскатьПодходящие = Ложь;
	НоваяКолонка.ПустаяСсылка = Истина;
	НоваяКолонка.Обязательный = Истина;
	
	НоваяКолонка = СвязанныеКолонки.Добавить();
	НоваяКолонка.Реквизит = "ВестиРасчетыПоЗаказам";
	НоваяКолонка.Синоним = "Вести расчеты по заказам";
	НоваяКолонка.ИскатьПодходящие = Ложь;
	НоваяКолонка.ПустаяСсылка = Истина;
	НоваяКолонка.Обязательный = Истина;
	
	НоваяКолонка = СвязанныеКолонки.Добавить();
	НоваяКолонка.Реквизит = "ВестиУчетОплатыПоСчетам";
	НоваяКолонка.Синоним = "Вести учет оплаты по заказам и/или счетам";
	НоваяКолонка.ИскатьПодходящие = Ложь;
	НоваяКолонка.ПустаяСсылка = Истина;
	НоваяКолонка.Обязательный = Истина;
	
КонецПроцедуры

Процедура ДобавитьСчетаУчетаКонтрагента(СвязанныеКолонки)
	
	НоваяКолонка = СвязанныеКолонки.Добавить();
	НоваяКолонка.Реквизит = "СчетУчетаРасчетовСПокупателем";
	НоваяКолонка.Синоним = НСтр("ru ='Расчеты с покупателем'");
	НоваяКолонка.ИскатьПодходящие = Ложь;
	НоваяКолонка.ПустаяСсылка = ПредопределенноеЗначение("ПланСчетов.Управленческий.РасчетыСПокупателями");
	НоваяКолонка.Обязательный = Истина;
	
	НоваяКолонка = СвязанныеКолонки.Добавить();
	НоваяКолонка.Реквизит = "СчетУчетаАвансовПокупателя";
	НоваяКолонка.Синоним = НСтр("ru ='Авансы покупателя'");
	НоваяКолонка.ИскатьПодходящие = Ложь;
	НоваяКолонка.ПустаяСсылка = ПредопределенноеЗначение("ПланСчетов.Управленческий.РасчетыПоАвансамПолученным");
	НоваяКолонка.Обязательный = Истина;
	
	НоваяКолонка = СвязанныеКолонки.Добавить();
	НоваяКолонка.Реквизит = "СчетУчетаРасчетовСПоставщиком";
	НоваяКолонка.Синоним = НСтр("ru ='Расчеты с поставщиком'");
	НоваяКолонка.ИскатьПодходящие = Ложь;
	НоваяКолонка.ПустаяСсылка = ПредопределенноеЗначение("ПланСчетов.Управленческий.РасчетыСПоставщиками");
	НоваяКолонка.Обязательный = Истина;
	
	НоваяКолонка = СвязанныеКолонки.Добавить();
	НоваяКолонка.Реквизит = "СчетУчетаАвансовПоставщику";
	НоваяКолонка.Синоним = НСтр("ru ='Авансы поставщику'");
	НоваяКолонка.ИскатьПодходящие = Ложь;
	НоваяКолонка.ПустаяСсылка = ПредопределенноеЗначение("ПланСчетов.Управленческий.РасчетыПоАвансамВыданным");
	НоваяКолонка.Обязательный = Истина;
	
КонецПроцедуры

Функция НоваяТаблицаСвязанныеКолонки()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Реквизит");
	Результат.Колонки.Добавить("ИмяРеквизита");
	Результат.Колонки.Добавить("Синоним");
	Результат.Колонки.Добавить("ИскатьПодходящие");
	Результат.Колонки.Добавить("ПустаяСсылка");
	Результат.Колонки.Добавить("Обязательный");
	Результат.Колонки.Добавить("ВыборГруппИЭлементов");
	Результат.Колонки.Добавить("РеквизитыЗаполнения");
	Результат.Колонки.Добавить("ПодходящиеОбязательноеРавенство");
	
	Возврат Результат;
	
КонецФункции

Функция СвязанныеКолонкиВМассив(ТаблицаЗначений) Экспорт
	
	Массив = Новый Массив();
	СтруктураСтрокой = "";
	НужнаЗапятая = Ложь;
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		Если НужнаЗапятая Тогда
			СтруктураСтрокой = СтруктураСтрокой + ",";
		КонецЕсли;
		СтруктураСтрокой = СтруктураСтрокой + Колонка.Имя;
		НужнаЗапятая = Истина;
	КонецЦикла;
	Для Каждого Строка Из ТаблицаЗначений Цикл
		НоваяСтрока = Новый Структура(СтруктураСтрокой);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка); 
		Для Каждого КлючИЗначение Из НоваяСтрока Цикл
			Если КлючИЗначение.Значение = Неопределено Тогда
				НоваяСтрока.Удалить(КлючИЗначение.Ключ); 
			КонецЕсли;
		КонецЦикла;
		Массив.Добавить(НоваяСтрока);
	КонецЦикла;
	Возврат Массив;

КонецФункции


#Область ПроверкаИННКПП

Функция ПроверитьСоответствиеТребованиямИНН(Знач ИНН, Знач ЭтоЮрЛицо) Экспорт
	Перем ТекстОшибкиФорматнаяПроверка;
	
	РезультатПроверки = Новый Структура("СоответствуетТребованиям, ЭтоЮрЛицо, ОписаниеОшибки", Истина, ЭтоЮрЛицо, "");
	
	Если ЗначениеЗаполнено(ИНН) Тогда
		
		ИНН = СокрП(ИНН);
		
		ЭтоИННФизическогоЛица  = ЭтоИННФизическогоЛица(ИНН);
		ЭтоИННЮридическогоЛица = ЭтоИННЮридическогоЛица(ИНН);
		
		Если РезультатПроверки.ЭтоЮрЛицо И НЕ ЭтоИННЮридическогоЛица Тогда
			РезультатПроверки.ОписаниеОшибки = НСтр("ru = 'ИНН юридического лица должен состоять из 10 цифр'");
			
			Если ЭтоИННФизическогоЛица Тогда
				// Ошибка в определении вида контрагента, однако ИНН может быть все равно корректным - просто надо изменить вид.
				РезультатПроверки.ЭтоЮрЛицо = Ложь;
			Иначе
				РезультатПроверки.СоответствуетТребованиям = Ложь;
			КонецЕсли; 
		ИначеЕсли НЕ РезультатПроверки.ЭтоЮрЛицо И НЕ ЭтоИННФизическогоЛица Тогда
			РезультатПроверки.ОписаниеОшибки = НСтр("ru = 'ИНН физического лица должен состоять из 12 цифр'");
			
			Если ЭтоИННЮридическогоЛица Тогда
				// Ошибка в определении вида контрагента, однако ИНН может быть все равно корректным - просто надо изменить вид.
				РезультатПроверки.ЭтоЮрЛицо = Истина;
			Иначе
				РезультатПроверки.СоответствуетТребованиям = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если РезультатПроверки.СоответствуетТребованиям Тогда
			Если Лев(ИНН, 2) = "00" Тогда
				РезультатПроверки.ОписаниеОшибки = НСтр("ru = 'Первые две цифры ИНН не могут быть ""00""'");
				РезультатПроверки.СоответствуетТребованиям = Ложь;
			Иначе
				РезультатПроверки.СоответствуетТребованиям = РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН, РезультатПроверки.ЭтоЮрЛицо, ТекстОшибкиФорматнаяПроверка);
				
				Если НЕ РезультатПроверки.СоответствуетТребованиям Тогда
					РезультатПроверки.ОписаниеОшибки = ТекстОшибкиФорматнаяПроверка;
				КонецЕсли; 
				
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		РезультатПроверки.СоответствуетТребованиям = Ложь;
		// В этом случае описание ошибки не выводим,
		// так как описание ошибки из этой функции обычно используется для вывода на форме,
		// а о незаполненном ИНН на форме сообщаем другими средствами.
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
КонецФункции

Функция ПроверитьСоответствиеТребованиямКПП(Знач КПП, Знач ЭтоЮрЛицо, Знач ОбособленноеПодразделение, Знач ЭтоКонтрагент = Истина) Экспорт
	
	РезультатПроверки = ПроверитьСоответствиеТребованиямФорматаКПП(КПП, ЭтоЮрЛицо);
	
	Если НЕ РезультатПроверки.СоответствуетТребованиям Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	КодПричиныПостановкиНаУчет = КодПричиныПостановкиНаУчет(КПП);
	
	// Проверяем только числовые значения
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодПричиныПостановкиНаУчет) Тогда
		ПризнакОбособленногоПодразделения = ЭтоПричинаПостановкиНаУчетОбособленногоПодразделения(КодПричиныПостановкиНаУчет);
		ПризнакГоловногоПодразделения     = ЭтоПричинаПостановкиНаУчетОрганизацииВЦелом(КодПричиныПостановкиНаУчет);
		
		// Проверки на обособленное и головное подразделение должны носить рекомендательный характер,
		// так как список кодов причин поставки на учет не публикуется
		Если ОбособленноеПодразделение И ПризнакГоловногоПодразделения Тогда 
			РезультатПроверки.СоответствуетТребованиям = Истина;
			РезультатПроверки.ОписаниеОшибки = СтрШаблон(
				НСтр("ru = 'Возможно, введен КПП юридического лица. Измените вид %1'"), 
				?(ЭтоКонтрагент, НСтр("ru = 'контрагента'"), НСтр("ru = 'организации'")));
			Возврат РезультатПроверки;
		ИначеЕсли НЕ ОбособленноеПодразделение И ПризнакОбособленногоПодразделения Тогда  
			РезультатПроверки.СоответствуетТребованиям = Истина;
			РезультатПроверки.ОписаниеОшибки = СтрШаблон(
				НСтр("ru = 'Возможно, введен КПП обособленного подразделения. Измените вид %1'"), 
				?(ЭтоКонтрагент, НСтр("ru = 'контрагента'"), НСтр("ru = 'организации'")));
			Возврат РезультатПроверки;
		ИначеЕсли НЕ ПризнакГоловногоПодразделения И НЕ ПризнакОбособленногоПодразделения Тогда
			РезультатПроверки.СоответствуетТребованиям = Истина;
			РезультатПроверки.ОписаниеОшибки = НСтр("ru = 'Возможно, КПП не соответствует формату'");
			Возврат РезультатПроверки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция МинимальнаяДлинаИНН() Экспорт
	
	// ММВ-7-6/435@
	// 1. Структура идентификационного номера налогоплательщика (далее - ИНН) представляет собой:
	// 1) для организации - десятизначный цифровой код:
	// 2) для физического лица - двенадцатизначный цифровой код:
	
	Возврат 10;
	
КонецФункции

Функция МаксимальнаяДлинаИНН() Экспорт
	
	// ММВ-7-6/435@
	// 1. Структура идентификационного номера налогоплательщика (далее - ИНН) представляет собой:
	// 1) для организации - десятизначный цифровой код:
	// 2) для физического лица - двенадцатизначный цифровой код:
	
	Возврат 12;
	
КонецФункции

Функция ЭтоИННЮридическогоЛица(ИНН) Экспорт
	
	// ММВ-7-6/435@
	// 1. Структура идентификационного номера налогоплательщика (далее - ИНН) представляет собой:
	// 1) для организации - десятизначный цифровой код:
	
	Возврат СтрДлина(ИНН) = МинимальнаяДлинаИНН();
	
КонецФункции

Функция ЭтоИННФизическогоЛица(ИНН) Экспорт
	
	// ММВ-7-6/435@
	// 1. Структура идентификационного номера налогоплательщика (далее - ИНН) представляет собой:
	// 2) для физического лица - двенадцатизначный цифровой код:
	
	Возврат СтрДлина(ИНН) = МаксимальнаяДлинаИНН();
	
КонецФункции

Функция ПроверитьСоответствиеТребованиямФорматаКПП(Знач КПП, Знач ЭтоЮрЛицо) Экспорт
	
	РезультатПроверки = Новый Структура("СоответствуетТребованиям, ОписаниеОшибки", Истина, "");
	
	Если НЕ ЗначениеЗаполнено(КПП) Тогда
		РезультатПроверки.СоответствуетТребованиям = Ложь;
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если НЕ ЭтоЮрЛицо Тогда
		РезультатПроверки.СоответствуетТребованиям = Ложь;
		Возврат РезультатПроверки;
	КонецЕсли;
	
	КПП = СокрП(КПП);
	
	// ММВ-7-6/435
	// 4. Структура КПП представляет собой девятизначный код:
	// NNNNPPXXX
	// 5. КПП состоит из следующей последовательности символов слева направо:
	// 1) NNNN (4 знака) - код налогового органа, который осуществил постановку на учет организации по месту ее нахождения,
	// 2) PP (2 знака) - причина постановки на учет (учета сведений).
	// Символ P представляет собой цифру или заглавную букву латинского алфавита от A до Z.
	// 3) XXX (3 знака) - порядковый номер постановки на учет (учета сведений) в налоговом органе по соответствующему основанию.
	
	Если СтрДлина(КПП) <> 9 Тогда
		РезультатПроверки.СоответствуетТребованиям = Ложь;
		РезультатПроверки.ОписаниеОшибки = НСтр("ru = 'КПП должен состоять из 9 символов'");
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если СтрНачинаетсяС(КПП, "00") Тогда
		РезультатПроверки.СоответствуетТребованиям = Ложь;
		РезультатПроверки.ОписаниеОшибки = НСтр("ru = 'КПП не должен начинаться на 00'");
		Возврат РезультатПроверки;
	КонецЕсли;

	КодПричиныПостановкиНаУчет = КодПричиныПостановкиНаУчет(КПП);
	
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Лев(КПП, 4))           // NNNN
		ИЛИ НЕ ТолькоСимволы09AZ(КодПричиныПостановкиНаУчет)                       // PP
		ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Прав(КПП, 3)) Тогда // XXX
		РезультатПроверки.СоответствуетТребованиям = Ложь;
		РезультатПроверки.ОписаниеОшибки = НСтр("ru = 'КПП должен состоять из цифр и символов A-Z (в позициях 5 и 6)'");
		Возврат РезультатПроверки;
	ИначеЕсли КодПричиныПостановкиНаУчет = "00" Тогда 
		РезультатПроверки.СоответствуетТребованиям = Ложь;
		РезультатПроверки.ОписаниеОшибки = НСтр("ru = 'Код причины постановки на учет (5 и 6 символ) не может быть 00. Опечатка?'");
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ТолькоСимволы09AZ(ПроверяемоеЗначение)
	
	РезультатПроверки = Истина;
	
	Код0 = КодСимвола("0");
	Код9 = КодСимвола("9");
	КодA = КодСимвола("A");
	КодZ = КодСимвола("Z");
	
	Для Инд = 1 По 2 Цикл
		ПроверяемыйСимвол = Сред(ПроверяемоеЗначение, Инд, 1);
		КодПроверяемогоСимвола = КодСимвола(ПроверяемыйСимвол);
		
		КодВДиапазонах = Код0 <= КодПроверяемогоСимвола И КодПроверяемогоСимвола <= Код9
		             ИЛИ КодA <= КодПроверяемогоСимвола И КодПроверяемогоСимвола <= КодZ;
		
		Если НЕ КодВДиапазонах Тогда
			РезультатПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатПроверки;
	
КонецФункции

#Область ПричиныПостановкиНаУчет

Функция ЭтоПричинаПостановкиНаУчетОрганизацииВЦелом(КодПричиныПостановки) Экспорт
	
	// В письме от 13 апреля 2012 г. N 03-07-09/35 Минфин отмечает, что 
	// при заполнении счетов-фактур по товарам, реализованным обособленными подразделениями организаций, 
	// указывается КПП соответствующего обособленного подразделения организации;
	// Соответственно, при приобретении товаров обособленными подразделениями организации 
	// указывается КПП соответствующего обособленного подразделения.
	// 
	// В соответствии с этой моделью поведения в платежных поручениях организации также могут указывать
	// КПП обособленного подразделения.
	//
	// Организации встают на учет в налоговых органах по месту нахождения обособленных подразделений
	// с присвоением КПП.
	//
	// При этом причина постановки в составе КПП указывается кодом в соответствии с ведомственный справочником
	// "Причины постановки на учет налогоплательщиков - организаций в налоговых органах" (СППУНО).
	// 
	// Обособленное подразделение может получить КПП как в связи с регистрацией по месту нахождения обособленного подразделения,
	// так и по другим основаниям, например по месту нахождения имущества этого обособленного подразделения.
	// 
	// По некоторым из этих других оснований КПП может быть присвоен и организации в целом.
	// Однако, можно предположить, что такие КПП организация не будет указывать в документах контрагентам,
	// до тех пор, пока речь не идет об обособленных подразделениях.
	//
	// С учетом этого, в случаях, когда указан КПП с кодом причины, указывающем на то, что в данном случае
	// речь точно не идет об обособленном подразделении, считаем, что речь идет об организации в целом.
	//
	// Если указан другой КПП - то есть, указывающий на филиал, представительство либо предполагающий двоякое толкование,
	// считаем, что речь идет об обособленном подразделении.
	
	// СППУНО не публикуется.
	// Однако, отдельные значения кодов раскрываются в письмах ФНС.
	// Чаще всего применяется письмо от 2 июня 2008 г. N ЧД-6-6/396@
	// Больше всего кодов приведено в письме от 25 декабря 2014 г. N ММВ-7-1/674@
	// См. также письма
	// от 26 февраля 2015 г. N СА-4-14/2973@
	// от 28 ноября 2014 г. N СА-4-14/24715
	// от 18 февраля 2011 г. N ПА-4-6/2688@
	
	Возврат КодПричиныПостановки = "01"  // Постановка на учет в налоговом органе российской организации в качестве налогоплательщика по месту ее нахождения
		Или КодПричиныПостановки = "30"  // Постановка на учет российской организации - налогового агента, не учтенной в качестве налогоплательщика (по месту ее нахождения)
		Или КодПричиныПостановки = "37"  // Постановка (восстановление  с  ранее  присвоенным  ИНН)  на учет организации,  ранее  состоявшей  на учете,  в связи с  внесением  в ЕГРЮЛ    записи    об    отмене    судом    решения    о    прекращении (ликвидации) юридического лица
		Или КодПричиныПостановки = "40"  // Учет в  налоговом органе  организации  при возникновении у нее обязанности по уплате отдельных видов налогов, предусмотренных действующим законодательством о налогах и сборах, в случае, когда организация осуществляет деятельность вне места своего нахождения сроком   менее   1    месяца,   не   создавая   при   этом   обособленное подразделение и не имея недвижимое имущество или транспортные средства по месту осуществления деятельности
		Или КодПричиныПостановки = "41"  // Учет в налоговом органе организации, уплачивающей отдельные виды налогов, в случае отсутствия у нее на территории этого налогового органа оснований для постановки на учет (СК-6-09/49)
		Или КодПричиныПостановки = "51"  // Постановка на учет отделений иностранных организаций
		Или КодПричиныПостановки = "52"  // Постановка на учет отделений иностранных организаций в Российской Федерации, созданных филиалом этой иностранной организации в иностранном государстве
		Или КодПричиныПостановки = "63"  // Постановка на учет международных организаций
		Или КодПричиныПостановки = "75"  // Постановка на учет иностранных и международных организаций, имеющих космические объекты в Российской Федерации
		Или КодПричиныПостановки = "89"  // Постановка на учет в налоговом органе иностранных интернет-компаний, занимающихся оказанием электронных услуг
		Или ЭтоПричинаПостановкиНаУчетКрупнейшегоНалогоплательщика(КодПричиныПостановки);
	
КонецФункции

Функция ЭтоПричинаПостановкиНаУчетОбособленногоПодразделения(КодПричиныПостановкиНаУчет)
	
	Возврат КодПричиныПостановкиНаУчет = "02" //Постановка на учет налогоплательщика — российской организации по месту нахождения ее обособленного подразделения в зависимости от вида подразделения 
		Или КодПричиныПостановкиНаУчет = "03" //Постановка на учет налогоплательщика — российской организации по месту нахождения ее филиала, не исполняющего обязанности организации по уплате налогов и сборов 
		Или КодПричиныПостановкиНаУчет = "04" //Постановка на учет налогоплательщика — российской организации по месту нахождения ее обособленного подразделения в зависимости от вида подразделения 
		Или КодПричиныПостановкиНаУчет = "05" //Постановка на учет налогоплательщика — российской организации по месту нахождения ее обособленного подразделения в зависимости от вида подразделения
		Или КодПричиныПостановкиНаУчет = "30" //Российская организация — налоговый агент, не учтенная в качестве налогоплательщика
		Или КодПричиныПостановкиНаУчет = "31" //Постановка на учет налогоплательщика — российской организации по месту нахождения обособленного подразделения, в отношении которого не проведена процедура оформления в соответствии с пунктом 3 статьи 55 Гражданского кодекса Российской Федерации, исполняющего обязанности организации по уплате налогов и сборов 
		Или КодПричиныПостановкиНаУчет = "32" //Постановка на учет налогоплательщика — российской организации по месту нахождения обособленного подразделения, в отношении которого не проведена процедура оформления в соответствии с пунктом 3 статьи 55 Гражданского кодекса Российской Федерации, не исполняющего обязанности организации по уплате налогов и сборов 
		Или КодПричиныПостановкиНаУчет = "43" //Постановка на учет российской организации по месту нахождения ее филиала (аналогично старым кодам «02», «03» — Письмо Минфина РФ от 02.06.2008 № ЧД-6-6/396@ «О применении кодов справочника СППУНО») 
		Или КодПричиныПостановкиНаУчет = "44" //Постановка на учет российской организации по месту нахождения ее представительства (аналогично старым кодам «04», «05» — Письмо Минфина РФ от 02.06.2008 № ЧД-6-6/396@ «О применении кодов справочника СППУНО») 
		Или КодПричиныПостановкиНаУчет = "45" //Постановка на учет российской организации по месту нахождения ее обособленного подразделения (аналогично старым кодам «31», «32» — Письмо Минфина РФ от 02.06.2008 № ЧД-6-6/396@ «О применении кодов справочника СППУНО») 
		Или КодПричиныПостановкиНаУчет = "60" //Постановка на учет посольств иностранных государств
		Или КодПричиныПостановкиНаУчет = "61" //Постановка на учет консульств иностранных государств
		Или КодПричиныПостановкиНаУчет = "62" //Постановка на учет представительств, приравненных к дипломатическим
		Или КодПричиныПостановкиНаУчет = "70" //Постановка на учет иностранных и международных организаций, имеющих недвижимое имущество в Российской Федерации, за исключением транспортных средств, относящихся к недвижимому имуществу
		Или КодПричиныПостановкиНаУчет = "71" //Постановка на учет иностранных и международных организаций, имеющих транспортные средства в Российской Федерации, не относящиеся к недвижимому имуществу
		Или КодПричиныПостановкиНаУчет = "72" //Постановка на учет иностранных и международных организаций, имеющих морские транспортные средства в Российской Федерации
		Или КодПричиныПостановкиНаУчет = "73" //Постановка на учет иностранных и международных организаций, имеющих речные транспортные средства в Российской Федерации
		Или КодПричиныПостановкиНаУчет = "74" //Постановка на учет иностранных и международных организаций, имеющих воздушные транспортные средства в Российской Федерации
		Или КодПричиныПостановкиНаУчет = "80" //Учет иностранных и международных организаций в связи с открытием в банках рублевых счетов типа «Т» (текущие)
		Или КодПричиныПостановкиНаУчет = "81" //Учет иностранных и международных организаций в связи с открытием счетов в банках типа «И» (инвестиционные)
		Или КодПричиныПостановкиНаУчет = "82" //Учет иностранных и международных организаций в связи с открытием счетов в банках типа «С» (специальные)
		Или КодПричиныПостановкиНаУчет = "83" //Учет иностранных и международных организаций в связи с открытием в банках счетов типа «Т» (текущие) в иностранной валюте
		Или КодПричиныПостановкиНаУчет = "84" //Учет иностранных и международных организаций в связи с открытием корреспондентских счетов в банках 
		Или КодПричиныПостановкиНаУчет = "91" //Некоторые филиалы и представительства и международных организаций из реестра РАФП (аккредитованных филиалов и представительств)
		Или КодПричиныПостановкиНаУчет = "92";//Некоторые филиалы и представительства и международных организаций из реестра РАФП (аккредитованных филиалов и представительств)
	
КонецФункции

Функция ЭтоПричинаПостановкиНаУчетКрупнейшегоНалогоплательщика(КодПричиныПостановки) Экспорт
	
	Возврат КодПричиныПостановки = "50"; // Постановка на учет в налоговом органе российской организации в качестве крупнейшего налогоплательщика (ММ-3-09/553@)
	
КонецФункции

Функция КодПричиныПостановкиНаУчет(КПП) Экспорт
	
	// ММВ-7-6/435
	// 4. Структура КПП представляет собой девятизначный код:
	// NNNNPPXXX
	// 5. КПП состоит из следующей последовательности символов слева направо:
	// 2) PP (2 знака) - причина постановки на учет (учета сведений).
	// Символ P представляет собой цифру или заглавную букву латинского алфавита от A до Z.
	// Числовое значение символов PP может принимать значение:
	// для российской организации от 01 до 50 (01 - по месту ее нахождения);
	// для иностранной организации от 51 до 99;
	
	Если КППКорректен(КПП) Тогда
		Возврат Сред(КПП, 5, 2);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция КППКорректен(КПП) Экспорт
	
	// ММВ-7-6/435
	// 4. Структура КПП представляет собой девятизначный код
	
	Возврат ТипЗнч(КПП) = Тип("Строка") И Не ПустаяСтрока(КПП) И СтрДлина(КПП) = 9;
	
КонецФункции

Функция КПППоУмолчанию(ИНН) Экспорт
	
	Если ПустаяСтрока(ИНН) Или Не ЭтоИННЮридическогоЛица(ИНН) Тогда
		Возврат "";
	КонецЕсли;
	
	// ММВ-7-6/435
	// NNNNPPXXX
	// NNNN      - код налогового органа, который осуществил постановку на учет организации по месту ее нахождения,
	//     01    - Постановка на учет в налоговом органе российской организации в качестве налогоплательщика по месту ее нахождения
	//       001 - Порядковый номер постановки на учет (учета сведений) в налоговом органе по соответствующему основанию
	
	Возврат Лев(ИНН, 4) + "01001";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти