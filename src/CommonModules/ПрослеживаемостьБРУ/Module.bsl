
#Область СлужебныйПрограммныйИнтерфейс

// Процедура проведения документов "Уведомление об остатках прослеживаемых товаров" и "Уведомление о ввозе
// прослеживаемых товаров"
// 
// Параметры:
//  ПараметрыПроведения - Структура таблиц см. Документы.УведомлениеОбОстаткахПрослеживаемыхТоваров.ПодготовитьПараметрыПроведения
//                        и Документы.УведомлениеОВвозеПрослеживаемыхТоваров.ПодготовитьПараметрыПроведения
//  Движения - ссылка на движения документа
//  Отказ - Булево - признак отказа от записи
Процедура ОбработкаПроведенияУведомление(ПараметрыПроведения, Движения, Отказ) Экспорт
	
	ПрослеживаемостьПереопределяемый.ОбработкаПроведенияУведомление(ПараметрыПроведения, Движения, Отказ)
	
КонецПроцедуры

// Процедура удаления проведения документа "Уведомление об остатках прослеживаемых товаров" и "Уведомление о ввозе
// прослеживаемых товаров"
// 
// Параметры:
//   Регистратор - ДокументСсылка - Документ регистратор
//   Основание - ДокументСсылка - Первичный документ
// 
Процедура ОбработкаУдаленияПроведенияУведомление(Регистратор, Основание) Экспорт
	
	ПрослеживаемостьПереопределяемый.ОбработкаУдаленияПроведенияУведомление(Регистратор, Основание);
	
КонецПроцедуры

// Возвращает признак применения Федерального Закона от 09.11.2020 № 371-ФЗ
// который вводит понятие прослеживаемости для определенных групп товаров
// Параметры
// Дата - тип дата, в данном параметре передается
//        дата на которую необходимо определить признак применения ФЗ
// Возвращаемое значение:
//  Булево - признак применения
//           Истина - ФЗ применяется
//           Ложь   - ФЗ не применяется
Функция ВедетсяУчетПрослеживаемыхТоваров(Дата) Экспорт
	
	НачалоПримененияФЗ = ДатаНачалаУчетаПрослеживаемыхТоваров();
	
	Если Дата < НачалоПримененияФЗ Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура проведения документа Уведомления о перемещении прослеживаемых товаров
// 
// Параметры:
//  ПараметрыПроведения - Структура таблиц см. Документы.УведомлениеОПеремещенииПрослеживаемыхТоваров.ПодготовитьПараметрыПроведения
//  Движения - ссылка на движения документа
//  Отказ - Булево - признак отказа от записи
Процедура ОбработкаПроведенияУведомлениеОПеремещении(ПараметрыПроведения, Движения, Отказ) Экспорт

	ТаблицаРеализацииТоваров = ПодготовитьТаблицуПрослеживаемыеТоварыОтгрузкаВЕАЭС(ПараметрыПроведения.ТаблицаТоваров,
		ПараметрыПроведения.Реквизиты, ПараметрыПроведения.КорректировочныеДокументы, Отказ);
	
	СформироватьДвиженияПрослеживаемыеТоварыОтгруженныевЕАЭС(
		ТаблицаРеализацииТоваров,
		Движения,
		Отказ);
	
	ПрослеживаемостьПереопределяемый.ОбработкаПроведенияУведомлениеОПеремещении(ПараметрыПроведения, Движения, Отказ)
	
КонецПроцедуры

// См. УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати.
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.УведомлениеОбОстаткахПрослеживаемыхТоваров);
	СписокОбъектов.Добавить(Документы.УведомлениеОВвозеПрослеживаемыхТоваров);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт

	Списки.Вставить(Метаданные.Документы.УведомлениеОбОстаткахПрослеживаемыхТоваров, Истина);
	Списки.Вставить(Метаданные.Документы.УведомлениеОВвозеПрослеживаемыхТоваров, Истина);
	Списки.Вставить(Метаданные.Документы.УведомлениеОПеремещенииПрослеживаемыхТоваров, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов.ПрослеживаемостьУведомления, Истина);
	
	ПрослеживаемостьПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	
КонецПроцедуры

// См. описание процедуры ПрослеживаемостьПереопределяемый.ОбработкаЗаполненияУведомленияОПеремещении
//
Процедура ЗаполнитьУведомлениеОПеремещенииПрослеживаемыхТоваров(УведомлениеОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	УведомлениеОбъект.Ответственный = Пользователи.ТекущийПользователь();
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "Проведен") = Ложь Тогда
		
		ТекстОшибки = НСтр("ru='Документ %Документ% не проведен. Ввод на основании непроведенного документа запрещен.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДанныеЗаполнения);
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(УведомлениеОбъект, ДанныеЗаполнения, "Организация");
	
	Если УведомлениеОбъект.Дата < ДанныеЗаполнения.Дата Тогда
		
		УведомлениеОбъект.Дата = ДанныеЗаполнения.Дата + 1;
		
	КонецЕсли;
	
	ДанныеТаблиц = Документы.УведомлениеОПеремещенииПрослеживаемыхТоваров.ЗаполнитьДокументДанными(
		УведомлениеОбъект.Дата, УведомлениеОбъект.Организация, ДанныеЗаполнения);
	
	УведомлениеОбъект.Контрагенты.Загрузить(ДанныеТаблиц.Контрагенты);
	УведомлениеОбъект.Товары.Загрузить(ДанныеТаблиц.Товары);
		
КонецПроцедуры

// Возвращает виды уведомлений
// 
// Возвращаемое значение:
//   Структура - Виды уведомлений
Функция ВидыУведомлений() Экспорт

	Возврат Новый Структура("Уведомление, КорректировочноеУведомление", "Уведомление", "КорректировочноеУведомление");

КонецФункции

// Возвращает виды уведомлений Уведомления об остатках
// 
// Возвращаемое значение:
//   Структура - Виды уведомлений
Функция ВидыУведомленийОбОСтатках() Экспорт
	
	ВидыУведомлений = Новый Структура();
	ВидыУведомлений.Вставить("УведомлениеПоТоварам",                 "УведомлениеПоТоварам");
	ВидыУведомлений.Вставить("УведомлениеПоОС",                      "УведомлениеПоОС");
	ВидыУведомлений.Вставить("УведомлениеПоКомплектующимОС",         "УведомлениеПоКомплектующимОС");
	ВидыУведомлений.Вставить("КорректировочноеУведомлениеПоТоварам", "КорректировочноеУведомлениеПоТоварам");
	ВидыУведомлений.Вставить("КорректировочноеУведомлениеПоОС",      "КорректировочноеУведомлениеПоОС");
	ВидыУведомлений.Вставить("КорректировочноеУведомлениеПоКомплектующимОС",
		"КорректировочноеУведомлениеПоКомплектующимОС");
	
	Возврат ВидыУведомлений;
	
КонецФункции

// Устанавливает заголовок формы документа Уведомление об остатках прослеживаемых товаров
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - ссылка на форму
//
Функция УстановитьЗаголовокФормыУведомлениеОбОстатках(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	СтрокаПродолжениеЗаголовка = НСтр("ru = ' об остатках прослеживаемых товаров'");
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийУведомленияОбОстаткахПрослеживаемыхОбъектов.ОсновныеСредства Тогда
		СтрокаПродолжениеЗаголовка = НСтр("ru = ' об остатках прослеживаемых основных средств'");
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийУведомленияОбОстаткахПрослеживаемыхОбъектов.КомплектующиеОС
		Тогда
		СтрокаПродолжениеЗаголовка = НСтр("ru = ' об остатках прослеживаемых комплектующих ОС'");
	КонецЕсли;
		
	Форма.Заголовок = УстановитьЗаголовокФормыУведомления(Объект, СтрокаПродолжениеЗаголовка);
	
КонецФункции

// Устанавливает заголовок формы документа Уведомление об остатках прослеживаемых товаров
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - ссылка на форму
//
Функция УстановитьЗаголовокФормыУведомлениеОВвозе(Форма) Экспорт
	
	Объект = Форма.Объект;
	СтрокаПродолжениеЗаголовка = НСтр("ru = ' о ввозе прослеживаемых товаров'");
	
	Форма.Заголовок = УстановитьЗаголовокФормыУведомления(Объект, СтрокаПродолжениеЗаголовка);
	
КонецФункции

// Устанавливает заголовок формы документа Уведомление о перемещении прослеживаемых товаров
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - ссылка на форму
//
Функция УстановитьЗаголовокФормыУведомлениеОПеремещении(Форма) Экспорт
	
	Объект = Форма.Объект;
	СтрокаПродолжениеЗаголовка = НСтр("ru = ' о перемещении прослеживаемых товаров'");
	
	Форма.Заголовок = УстановитьЗаголовокФормыУведомления(Объект, СтрокаПродолжениеЗаголовка);
	
КонецФункции

Функция УстановитьЗаголовокФормыУведомления(Объект, СтрокаПродолжениеЗаголовка)
	
	НомерКорректировки = Объект.НомерКорректировки;

	Если НомерКорректировки > 0 Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Корректировочное уведомление'");
		
	Иначе
		
		ТекстЗаголовка = НСтр("ru = 'Уведомление'");
		
	КонецЕсли;
	
	ТекстЗаголовка = ТекстЗаголовка + СтрокаПродолжениеЗаголовка;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2'"), Объект.Номер, Объект.Дата);
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' (создание)'");
	КонецЕсли;
	
	Возврат ТекстЗаголовка;
	
КонецФункции

// Возвращает представление документа Уведомления о ввозе
// 
// Параметры:
//      СсылкаНаДокумент - Ссылка на документ
//
// Возвращаемое значение:
//          Строка - представление документа
//
Функция ОпределитьПредставлениеУведомленияОВвозе(СсылкаНаДокумент) Экспорт
	
	Параметры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДокумент, "НомерКорректировки, Дата, Номер");
	
	СтрокаПродолжениеЗаголовка = НСтр("ru = ' о ввозе прослеживаемых товаров'");
	
	Если Параметры.НомерКорректировки > 0 Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Корректировочное уведомление'");
		
	Иначе
		
		ТекстЗаголовка = НСтр("ru = 'Уведомление'");
		
	КонецЕсли;
	
	ТекстЗаголовка = ТекстЗаголовка + СтрокаПродолжениеЗаголовка;
	
	ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru=' %1 от %2'"),
		ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Параметры.Номер, Истина, Ложь),
		Формат(Параметры.Дата, "ДФ=dd.MM.yyyy"));
	
	Возврат ТекстЗаголовка;
	
КонецФункции

// Возвращает дату начала учета прослеживаемых товаров 
// Постановление РФ от 01.07.2021 N 1108 "Об утверждении положения о национальной системе прослеживаемости товаров"
//
// Возвращаемое значение:
//   Дата - дата начала учета 
//
Функция ДатаНачалаУчетаПрослеживаемыхТоваров() Экспорт
	
	Возврат '20210701000000';
	
КонецФункции

// Процедура проверяет что по указанному номеру корректировки не было других корректировочных уведомлений
//
// Параметры:
//   УведомлениеОбъект - ДокументОбъект.УведомлениеОбОстаткахПрослеживаемыхТоваров
//                               - документ Уведомление об остатках прослеживаемых товаров
//
Процедура ПроверитьДублированиеНомераКорректировкиВУведомлениях(УведомлениеОбъект) Экспорт
	
	НомерКорректировки = УведомлениеОбъект.НомерКорректировки;
	
	Если НомерКорректировки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", УведомлениеОбъект.Организация);
	Запрос.УстановитьПараметр("ДокументУведомлениеОбОстатках", УведомлениеОбъект.ДокументУведомлениеОбОстатках);
	Запрос.УстановитьПараметр("НомерКорректировки", НомерКорректировки);
	Запрос.УстановитьПараметр("ДокументИсключение", УведомлениеОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УведомлениеОбОстаткахПрослеживаемыхТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров КАК УведомлениеОбОстаткахПрослеживаемыхТоваров
	|ГДЕ
	|	УведомлениеОбОстаткахПрослеживаемыхТоваров.ПометкаУдаления = ЛОЖЬ
	|	И УведомлениеОбОстаткахПрослеживаемыхТоваров.ДокументУведомлениеОбОстатках = &ДокументУведомлениеОбОстатках
	|	И УведомлениеОбОстаткахПрослеживаемыхТоваров.Организация = &Организация
	|	И УведомлениеОбОстаткахПрослеживаемыхТоваров.Ссылка <> &ДокументИсключение
	|	И УведомлениеОбОстаткахПрослеживаемыхТоваров.НомерКорректировки = &НомерКорректировки";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ТекстИсключения = НСтр("ru = 'Корректировка №%НомерКорректировки% первичного уведомления об остатках прослеживаемых товаров уже существует'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%НомерКорректировки%", НомерКорректировки);
		
		ВызватьИсключение(ТекстИсключения);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет что по указанному номеру корректировки не было других корректировочных уведомлений
//
// Параметры:
//   УведомлениеОбъект - ДокументОбъект.УведомлениеОВвозеПрослеживаемыхТоваров
//                               - документ Уведомление об ввозе прослеживаемых товаров
//
Процедура ПроверитьДублированиеНомераКорректировкиВУведомленияхОВвозе(УведомлениеОбъект, РежимЗаписи) Экспорт
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	НомерКорректировки = УведомлениеОбъект.НомерКорректировки;
	
	Если НомерКорректировки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", УведомлениеОбъект.Организация);
	Запрос.УстановитьПараметр("ДокументУведомлениеОВвозе", УведомлениеОбъект.ДокументУведомлениеОВвозе);
	Запрос.УстановитьПараметр("НомерКорректировки", НомерКорректировки);
	Запрос.УстановитьПараметр("ДокументИсключение", УведомлениеОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УведомлениеОВвозеПрослеживаемыхТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УведомлениеОВвозеПрослеживаемыхТоваров КАК УведомлениеОВвозеПрослеживаемыхТоваров
	|ГДЕ
	|	УведомлениеОВвозеПрослеживаемыхТоваров.Проведен
	|	И УведомлениеОВвозеПрослеживаемыхТоваров.ДокументУведомлениеОВвозе = &ДокументУведомлениеОВвозе
	|	И УведомлениеОВвозеПрослеживаемыхТоваров.Организация = &Организация
	|	И УведомлениеОВвозеПрослеживаемыхТоваров.Ссылка <> &ДокументИсключение
	|	И УведомлениеОВвозеПрослеживаемыхТоваров.НомерКорректировки = &НомерКорректировки";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ТекстИсключения = 
			НСтр(
				"ru = 'Корректировка №%НомерКорректировки% первичного уведомления о ввозе прослеживаемых товаров уже существует'"
				);
			
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%НомерКорректировки%", НомерКорректировки);
		
		ВызватьИсключение(ТекстИсключения);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет что по указанному номеру корректировки не было других корректировочных уведомлений
//
// Параметры:
//   УведомлениеОбъект - ДокументОбъект.УведомлениеОВвозеПрослеживаемыхТоваров
//                               - документ Уведомление об ввозе прослеживаемых товаров
//
Процедура ПроверитьДублированиеНомераКорректировкиВУведомленияхОПеремещении(УведомлениеОбъект, РежимЗаписи) Экспорт
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	НомерКорректировки = УведомлениеОбъект.НомерКорректировки;
	
	Если НомерКорректировки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", УведомлениеОбъект.Организация);
	Запрос.УстановитьПараметр("ДокументУведомлениеОПеремещении", УведомлениеОбъект.ДокументУведомлениеОПеремещении);
	Запрос.УстановитьПараметр("НомерКорректировки", НомерКорректировки);
	Запрос.УстановитьПараметр("ДокументИсключение", УведомлениеОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УведомлениеОПеремещенииПрослеживаемыхТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УведомлениеОПеремещенииПрослеживаемыхТоваров КАК УведомлениеОПеремещенииПрослеживаемыхТоваров
	|ГДЕ
	|	УведомлениеОПеремещенииПрослеживаемыхТоваров.Проведен
	|	И УведомлениеОПеремещенииПрослеживаемыхТоваров.ДокументУведомлениеОПеремещении = &ДокументУведомлениеОПеремещении
	|	И УведомлениеОПеремещенииПрослеживаемыхТоваров.Организация = &Организация
	|	И УведомлениеОПеремещенииПрослеживаемыхТоваров.Ссылка <> &ДокументИсключение
	|	И УведомлениеОПеремещенииПрослеживаемыхТоваров.НомерКорректировки = &НомерКорректировки";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ТекстИсключения = 
			НСтр(
				"ru = 'Корректировка №%НомерКорректировки% первичного уведомления о перемещении прослеживаемых товаров уже существует'"
				);
			
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%НомерКорректировки%", НомерКорректировки);
		
		ВызватьИсключение(ТекстИсключения);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список кодов формы реорганизации 
//
// Параметры:
//   СписокКодовФомы - СписокЗначений - Список, который нужно заполнить
//
Процедура СписокКодовФормыРеорганизации(СписокКодовФормы) Экспорт
	
	ЗначенияФормРеорганизации = СписокОписанийКодовФормыРеорганизации();
	
	СписокКодовФормы.Добавить("", ЗначенияФормРеорганизации.Отсутствует);
	СписокКодовФормы.Добавить("0", ЗначенияФормРеорганизации.Ликвидация);
	СписокКодовФормы.Добавить("1", ЗначенияФормРеорганизации.Преобразование);
	СписокКодовФормы.Добавить("2", ЗначенияФормРеорганизации.Слияние);
	СписокКодовФормы.Добавить("3", ЗначенияФормРеорганизации.Разделение);
	СписокКодовФормы.Добавить("5", ЗначенияФормРеорганизации.Присоединение);
	СписокКодовФормы.Добавить("6", ЗначенияФормРеорганизации.РазделениеИПрисоединение);
	
КонецПроцедуры

Функция ПечатьУведомленияОВвозеПрослеживаемыхТоваров(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = ПодготовитьТаблицыУведомленияОВвозеПрослеживаемыхТоваров(МассивОбъектов);
	
	Возврат ТабДокумент;

КонецФункции

Функция ПечатьУведомленияОбОстаткахПрослеживаемыхТоваров(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = ПодготовитьТаблицыУведомленияОбОстаткахПрослеживаемыхТоваров(МассивОбъектов);
	
	Возврат ТабДокумент;

КонецФункции

// Дата изменения формата, согласно письму ФНС России от 27.07.2022 № СД-4-15/9706@
//
// Возвращаемое значение:
//   Дата - дата изменения формата 
//
Функция ДатаИзмененияФорматаУведомленияОПеремещенииС4Кв2022() Экспорт
	
	Возврат Дата(2022,11,28,0,0,0);
	
КонецФункции	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодготовитьТаблицуПрослеживаемыеТоварыОтгрузкаВЕАЭС(ТаблицаТоваров, ТаблицаРеквизитов, КорректировочныеДокументы, Отказ)
	
	Если Не ЗначениеЗаполнено(ТаблицаТоваров)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыРеализацияПрослеживаемыхТоваров(ТаблицаТоваров, ТаблицаРеквизитов, КорректировочныеДокументы);
	Реквизиты = Параметры.Реквизиты[0];
	
	ТаблицаПрослеживаемыхТоваров = ПодготовитьТаблицуПрослеживаемыеТоварыОтгруженныевЕАЭС(Реквизиты, Параметры.ТаблицаТоваров, Параметры.КорректировочныеДокументы, Отказ);
	
	Возврат ТаблицаПрослеживаемыхТоваров;
	
КонецФункции

Процедура СформироватьДвиженияПрослеживаемыеТоварыОтгруженныевЕАЭС(ТаблицаТоваров, Движения, Отказ)
	
	Если НЕ ЗначениеЗаполнено(ТаблицаТоваров) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		Запись = Движения.ПрослеживаемыеТоварыОтгруженныеВЕАЭС.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		Запись.ВидДвижения = ВидДвиженияНакопления.Расход;
	КонецЦикла;
	
	Движения.ПрослеживаемыеТоварыОтгруженныеВЕАЭС.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыТаблицыРеализацияПрослеживаемыхТоваров(ТаблицаТоваров, ТаблицаРеквизитов, КорректировочныеДокументы)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаТоваров
	
	СписокОбязательныхКолонок = ""
		+ "РНПТ,"                       // <СправочникСсылка.*> - РНПТ
		+ "Номенклатура,"               // <СправочникСсылка.*> - списываемая номенклатура
		+ "НомерСтроки,"                // <Число> - номер строки в списке 
		+ "КоличествоДоИзменения,"                 // <Число> - количество по первичным документам
		+ "Количество,"                 // <Число> - количество по первичным документам
		+ "КоличествоПрослеживаемости," // <Число> - количество прослеживаемости
		+ "Сумма,"						// <Число> - сумма
		+ "ПорядковыйНомер,"            // <Число> - номер строки номеклатуры в сопроводительном документе
		+ "Контрагент,"                 // <СправочникСсылка.Контрагенты> - количество по первичным документам
		+ "КлючСтроки,"                 // <УникальныйИдентификатор> - уникальный идентификатор
		+ "СопроводительныйДокумент,";  // <ОпределяемыйТип.СопроводительныйДокументУведомлениеОПеремещении> - документ отгрузки
		
	Параметры.Вставить("ТаблицаТоваров", ПрослеживаемостьПереопределяемый.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТоваров, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"				// <Дата> - период движений - дата документа
		+ "Регистратор,"		// <ДокументСсылка.*> - документ-регистратор движений
		+ "НомерКорректировки," // <Число> - номер корректировки
		+ "Организация";		// <СправочникСсылка.Организации>
		
	Параметры.Вставить("Реквизиты", ПрослеживаемостьПереопределяемый.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.КорректировочныеДокументы
	
	СписокОбязательныхКолонок = ""
		+ "КлючСтроки,"				// <УникальныйИдентификатор> - уникальный идентификатор
		+ "ПорядковыйНомер,"		// <Число> - число
		+ "Документ";				// <ДокументСсылка.*> - документ-регистратор движений
		
	Параметры.Вставить("КорректировочныеДокументы", ПрослеживаемостьПереопределяемый.ПолучитьТаблицуПараметровПроведения(
		КорректировочныеДокументы, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицуПрослеживаемыеТоварыОтгруженныевЕАЭС(Реквизиты, ТаблицаТоваров, КорректировочныеДокументы, Отказ)

	ТаблицаПрослеживаемыхТоваров = ТаблицаТоваров.Скопировать();
	ТаблицаПрослеживаемыхТоваров.Колонки.Добавить("Период",      Новый ОписаниеТипов("Дата"));
	ТаблицаПрослеживаемыхТоваров.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПрослеживаемыхТоваров.Колонки.Добавить("КорректировочныйДокумент", 
		Метаданные.ОпределяемыеТипы.ОснованиеУведомленияОПеремещении.Тип);
	
	ТаблицаПрослеживаемыхТоваров.ЗаполнитьЗначения(Реквизиты.Период,      "Период");
	ТаблицаПрослеживаемыхТоваров.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	
	Если Реквизиты.НомерКорректировки = 0 Тогда
		
		ПроверитьОстаткиТовара(Реквизиты, ТаблицаТоваров, Отказ);
	Иначе
		// Если есть корректировочные документы, то необходимо понять, какой остаток по ним списывать
		// и перезаполнить ТаблицаПрослеживаемыхТоваров
		ТаблицаПрослеживаемыхТоваров = РаспределитьКорректировочныеДокументыПоТаблицеТоваровСУчетомОстатков(
			ТаблицаПрослеживаемыхТоваров, КорректировочныеДокументы, Реквизиты, Отказ);
			
	КонецЕсли;
	
	Возврат ТаблицаПрослеживаемыхТоваров;
	
КонецФункции

Функция РаспределитьКорректировочныеДокументыПоТаблицеТоваровСУчетомОстатков(
							ТаблицаПрослеживаемыхТоваров, КорректировочныеДокументы, Реквизиты, Отказ)
		
	Если КорректировочныеДокументы.Количество() = 0 Тогда
		Возврат ТаблицаПрослеживаемыхТоваров;
	КонецЕсли;
	
	ОбновленнаяТаблицаПрослеживаемыхТоваров = ТаблицаПрослеживаемыхТоваров.Скопировать();
	ОбновленнаяТаблицаПрослеживаемыхТоваров.Очистить();
	
	ТаблицаОстатковПрослеживаемыхТоваровЕАЭС = ПолучитьТаблицуОстатковЕАЭС(
	   													ТаблицаПрослеживаемыхТоваров, Реквизиты);
														
	ФильтрПоКлючуСтроки = Новый Структура("КлючСтроки,ПорядковыйНомер");
	ФильтрПоОстаткам = Новый Структура("Контрагент,Номенклатура,РНПТ,СопроводительныйДокумент,КорректировочныйДокумент");
	
	Для Каждого ТекущаяСтрокаПрослеживаемыхТоваров Из ТаблицаПрослеживаемыхТоваров Цикл
		
		ФильтрПоКлючуСтроки.КлючСтроки = ТекущаяСтрокаПрослеживаемыхТоваров.КлючСтроки;
		ФильтрПоКлючуСтроки.ПорядковыйНомер = ТекущаяСтрокаПрослеживаемыхТоваров.ПорядковыйНомер;
		
		НайденныеСтроки = КорректировочныеДокументы.НайтиСтроки(ФильтрПоКлючуСтроки);	
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
				
				КорректировочныйДокумент = ТекущаяСтрока.Документ;
			
				НоваяСтрока = ОбновленнаяТаблицаПрослеживаемыхТоваров.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрокаПрослеживаемыхТоваров);
				НоваяСтрока.КорректировочныйДокумент = КорректировочныйДокумент;
				
				ФильтрПоОстаткам.Контрагент =               ТекущаяСтрокаПрослеживаемыхТоваров.Контрагент;
				ФильтрПоОстаткам.Номенклатура =             ТекущаяСтрокаПрослеживаемыхТоваров.Номенклатура;
				ФильтрПоОстаткам.РНПТ =                     ТекущаяСтрокаПрослеживаемыхТоваров.РНПТ;
				ФильтрПоОстаткам.СопроводительныйДокумент = ТекущаяСтрокаПрослеживаемыхТоваров.СопроводительныйДокумент;
				ФильтрПоОстаткам.КорректировочныйДокумент = НоваяСтрока.КорректировочныйДокумент;
				
				НайденныйОстаток = ТаблицаОстатковПрослеживаемыхТоваровЕАЭС.НайтиСтроки(ФильтрПоОстаткам);
				
				Если НайденныйОстаток.Количество() > 0 Тогда
					НоваяСтрока.Количество = НайденныйОстаток[0].КоличествоОстаток;
					НоваяСтрока.КоличествоПрослеживаемости = НайденныйОстаток[0].КоличествоОстаток;
					НоваяСтрока.Сумма = НайденныйОстаток[0].СуммаОстаток;
				КонецЕсли;
				
			КонецЦикла;	
			
		Иначе
			
			НоваяСтрока = ОбновленнаяТаблицаПрослеживаемыхТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрокаПрослеживаемыхТоваров);
			
		КонецЕсли;
															
	КонецЦикла;													
	
	ПроверитьОстаткиЕАЭС(ТаблицаОстатковПрослеживаемыхТоваровЕАЭС, ТаблицаПрослеживаемыхТоваров, Реквизиты, Отказ);
	
	Возврат ОбновленнаяТаблицаПрослеживаемыхТоваров;
	
КонецФункции

Функция ПолучитьТаблицуОстатковЕАЭС(ТаблицаПрослеживаемыхТоваров, Реквизиты)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаПрослеживаемыхТоваров);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	
	МоментВремени = Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	ТаблицаТоваров.РНПТ КАК РНПТ,
	|	ТаблицаТоваров.ПорядковыйНомер КАК ПорядковыйНомер,
	|	ТаблицаТоваров.Контрагент КАК Контрагент,
	|	ТаблицаТоваров.СопроводительныйДокумент КАК СопроводительныйДокумент
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрослеживаемыеТоварыОтгруженныеВЕАЭСОстатки.Организация КАК Организация,
	|	ПрослеживаемыеТоварыОтгруженныеВЕАЭСОстатки.Контрагент КАК Контрагент,
	|	ПрослеживаемыеТоварыОтгруженныеВЕАЭСОстатки.СопроводительныйДокумент КАК СопроводительныйДокумент,
	|	ПрослеживаемыеТоварыОтгруженныеВЕАЭСОстатки.Номенклатура КАК Номенклатура,
	|	ПрослеживаемыеТоварыОтгруженныеВЕАЭСОстатки.РНПТ КАК РНПТ,
	|	ПрослеживаемыеТоварыОтгруженныеВЕАЭСОстатки.ПорядковыйНомер КАК ПорядковыйНомер,
	|	ПрослеживаемыеТоварыОтгруженныеВЕАЭСОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ПрослеживаемыеТоварыОтгруженныеВЕАЭСОстатки.КоличествоПрослеживаемостиОстаток КАК КоличествоПрослеживаемостиОстаток,
	|	ПрослеживаемыеТоварыОтгруженныеВЕАЭСОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ПрослеживаемыеТоварыОтгруженныеВЕАЭСОстатки.КорректировочныйДокумент КАК КорректировочныйДокумент
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПрослеживаемыеТоварыОтгруженныеВЕАЭС.Остатки(&МоментВремени, Организация = &Организация) КАК ПрослеживаемыеТоварыОтгруженныеВЕАЭСОстатки
	|		ПО ТаблицаТоваров.Номенклатура = ПрослеживаемыеТоварыОтгруженныеВЕАЭСОстатки.Номенклатура
	|			И ТаблицаТоваров.РНПТ = ПрослеживаемыеТоварыОтгруженныеВЕАЭСОстатки.РНПТ
	|			И ТаблицаТоваров.ПорядковыйНомер = ПрослеживаемыеТоварыОтгруженныеВЕАЭСОстатки.ПорядковыйНомер
	|			И ТаблицаТоваров.СопроводительныйДокумент = ПрослеживаемыеТоварыОтгруженныеВЕАЭСОстатки.СопроводительныйДокумент";
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
КонецФункции	

Процедура ПроверитьОстаткиЕАЭС(ТаблицаОстатковПрослеживаемыхТоваровЕАЭС, ОбновленнаяТаблицаПрослеживаемыхТоваров, Реквизиты, Отказ)
	
	ТаблицаОстатковПрослеживаемыхТоваровЕАЭС.Свернуть("Контрагент,НомерСтроки,Номенклатура,СопроводительныйДокумент,РНПТ", "КоличествоОстаток,СуммаОстаток");	
	
	ТаблицаСписанныхПрослеживаемыхТоваров = ОбновленнаяТаблицаПрослеживаемыхТоваров.Скопировать();
	ТаблицаСписанныхПрослеживаемыхТоваров.Свернуть("Контрагент,НомерСтроки,Номенклатура,СопроводительныйДокумент,РНПТ", "Количество,Сумма");
	
	ТаблицаРазницыПрослеживаемыхТоваровЕАЭС = ТаблицаОстатковПрослеживаемыхТоваровЕАЭС.Скопировать();
	
	Для Каждого ТекущаяСтрока Из ТаблицаСписанныхПрослеживаемыхТоваров Цикл
		
		НоваяСтрока = ТаблицаРазницыПрослеживаемыхТоваровЕАЭС.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.КоличествоОстаток  = - ТекущаяСтрока.Количество;
		НоваяСтрока.СуммаОстаток = - ТекущаяСтрока.Сумма; 
		
	КонецЦикла;
	
	ТаблицаРазницыПрослеживаемыхТоваровЕАЭС.Свернуть("Контрагент,НомерСтроки,Номенклатура,СопроводительныйДокумент,РНПТ", "КоличествоОстаток,СуммаОстаток");	
	
	ТаблицаОшибок = ТаблицаРазницыПрослеживаемыхТоваровЕАЭС.СкопироватьКолонки("Номенклатура, НомерСтроки");
	ТаблицаОшибок.Колонки.Добавить("КоличествоДолжнобыть", Новый ОписаниеТипов("Число"));
	ТаблицаОшибок.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ФильтрПоТовару = Новый Структура("Номенклатура,СопроводительныйДокумент,РНПТ");
	
	Для Каждого ТекущаяСтрока Из ТаблицаРазницыПрослеживаемыхТоваровЕАЭС Цикл
		
		Если ТекущаяСтрока.КоличествоОстаток = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицыОшибок = ТаблицаОшибок.Добавить();
		
		ЗаполнитьЗначенияСвойств(ФильтрПоТовару, ТекущаяСтрока);
		
		НайденныйСтроки = ОбновленнаяТаблицаПрослеживаемыхТоваров.НайтиСтроки(ФильтрПоТовару);
		
		НайденныйСтрокиПоОстаткам = ТаблицаОстатковПрослеживаемыхТоваровЕАЭС.НайтиСтроки(ФильтрПоТовару);
		
		Если НайденныйСтроки.Количество() <> 0 И НайденныйСтрокиПоОстаткам.Количество() <> 0  Тогда
			
			СтрокаТаблицыОшибок.Количество = НайденныйСтроки[0].КоличествоДоИзменения + НайденныйСтроки[0].Количество;
			СтрокаТаблицыОшибок.КоличествоДолжнобыть = 
				НайденныйСтроки[0].КоличествоДоИзменения + НайденныйСтрокиПоОстаткам[0].КоличествоОстаток;
			
		Иначе	
			
			СтрокаТаблицыОшибок.Количество = 0;
			СтрокаТаблицыОшибок.КоличествоДолжнобыть = 0;
			
		КонецЕсли;	
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыОшибок, ТекущаяСтрока);
		
	КонецЦикла;	
	
	ВывестиСообщениеОбОшибкахКорректировочномуУведомлению(ТаблицаОшибок, Реквизиты.Регистратор, Отказ)
	
	
КонецПроцедуры

Процедура ВывестиСообщениеОбОшибкахКорректировочномуУведомлению(ТаблицаОшибок, Регистратор, Отказ)
	
	Для Каждого Ошибка Из ТаблицаОшибок Цикл
		
		ТекстОшибки = НСтр("ru='По товару %1, указанное количество не совпадает с количеством которое должно быть после изменения. Количество: %2; Должно быть: %3'");
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
			Ошибка.Номенклатура,
			Ошибка.Количество,
			Ошибка.КоличествоДолжнобыть);
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Колонка", 
			"Корректность",
			НСтр("ru = 'Количество после изменения'"),
			Ошибка.НомерСтроки,
			"Товары",
			ТекстОшибки);
			
		ПолеКоличество = "Товары" + "[" + Формат(Ошибка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].КоличествоПослеИзменения";
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Регистратор, ПолеКоличество, "Объект", Отказ);
		
	КонецЦикла;
	
КонецПроцедуры


Процедура ВывестиСообщениеОбОшибках(ТаблицаОшибок, Регистратор, Отказ)
	
	Для Каждого Ошибка Из ТаблицаОшибок Цикл
		
		ТекстОшибки = НСтр("ru='По контрагенту %1, указанное количество превышает количество по сопроводительному документу. Количество: %2; Не хватает: %3'");
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
			Ошибка.Контрагент,
			Ошибка.Количество,
			Ошибка.КоличествоОсталосьПогасить);
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Колонка", 
			"Корректность",
			НСтр("ru = 'Количество'"),
			Ошибка.НомерСтроки,
			"Товары",
			ТекстОшибки);
			
		ПолеКоличество = "Товары" + "[" + Формат(Ошибка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Количество";
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Регистратор, ПолеКоличество, "Объект", Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьОстаткиТовара(Реквизиты, ТаблицаТоваров, Отказ)
	
	Запрос = Новый Запрос;
	
	// Блокируем регистр ПрослеживаемыеТоварыОтгруженныеВЕАЭС для получения остатков
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПрослеживаемыеТоварыОтгруженныеВЕАЭС");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(, Реквизиты.Период));
	ЭлементБлокировки.ИсточникДанных = ТаблицаТоваров;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Контрагент", "Контрагент");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СопроводительныйДокумент", "СопроводительныйДокумент");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("РНПТ", "РНПТ");
	Блокировка.Заблокировать();
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	
	МоментВремени = Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	ТаблицаТоваров.РНПТ КАК РНПТ,
	|	ТаблицаТоваров.ПорядковыйНомер КАК ПорядковыйНомер,
	|	ТаблицаТоваров.Контрагент КАК Контрагент,
	|	ТаблицаТоваров.СопроводительныйДокумент КАК СопроводительныйДокумент
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрослеживаемыеТоварыОтгруженныеВЕАЭСОстатки.Организация КАК Организация,
	|	ПрослеживаемыеТоварыОтгруженныеВЕАЭСОстатки.Контрагент КАК Контрагент,
	|	ПрослеживаемыеТоварыОтгруженныеВЕАЭСОстатки.СопроводительныйДокумент КАК СопроводительныйДокумент,
	|	ПрослеживаемыеТоварыОтгруженныеВЕАЭСОстатки.Номенклатура КАК Номенклатура,
	|	ПрослеживаемыеТоварыОтгруженныеВЕАЭСОстатки.РНПТ КАК РНПТ,
	|	ПрослеживаемыеТоварыОтгруженныеВЕАЭСОстатки.ПорядковыйНомер КАК ПорядковыйНомер,
	|	ПрослеживаемыеТоварыОтгруженныеВЕАЭСОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ПрослеживаемыеТоварыОтгруженныеВЕАЭСОстатки.КоличествоПрослеживаемостиОстаток КАК КоличествоПрослеживаемостиОстаток,
	|	ПрослеживаемыеТоварыОтгруженныеВЕАЭСОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	ТаблицаТоваров.Количество - ПрослеживаемыеТоварыОтгруженныеВЕАЭСОстатки.КоличествоОстаток КАК КоличествоОсталосьПогасить,
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПрослеживаемыеТоварыОтгруженныеВЕАЭС.Остатки(&МоментВремени, Организация = &Организация) КАК ПрослеживаемыеТоварыОтгруженныеВЕАЭСОстатки
	|		ПО ТаблицаТоваров.Номенклатура = ПрослеживаемыеТоварыОтгруженныеВЕАЭСОстатки.Номенклатура
	|			И ТаблицаТоваров.РНПТ = ПрослеживаемыеТоварыОтгруженныеВЕАЭСОстатки.РНПТ
	|			И ТаблицаТоваров.ПорядковыйНомер = ПрослеживаемыеТоварыОтгруженныеВЕАЭСОстатки.ПорядковыйНомер
	|			И ТаблицаТоваров.СопроводительныйДокумент = ПрослеживаемыеТоварыОтгруженныеВЕАЭСОстатки.СопроводительныйДокумент
	|ГДЕ
	|	ПрослеживаемыеТоварыОтгруженныеВЕАЭСОстатки.КоличествоОстаток - ТаблицаТоваров.Количество < 0";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	ТаблицаОшибок = ТаблицаТоваров.СкопироватьКолонки("Контрагент, НомерСтроки, Количество");
	ТаблицаОшибок.Колонки.Добавить("КоличествоОсталосьПогасить", Новый ОписаниеТипов("Число"));
	
	Пока Результат.Следующий() Цикл
		
		СтрокаТаблицыОшибок = ТаблицаОшибок.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыОшибок, Результат);
		СтрокаТаблицыОшибок.КоличествоОсталосьПогасить = Результат.КоличествоОсталосьПогасить;
		
	КонецЦикла;
	
	ВывестиСообщениеОбОшибках(ТаблицаОшибок, Реквизиты.Регистратор, Отказ)
	
КонецПроцедуры

Функция СписокОписанийКодовФормыРеорганизации()
	
	Возврат Новый Структура("Отсутствует,Ликвидация,Преобразование,Слияние,Разделение,Присоединение,РазделениеИПрисоединение",
						"Отсутствует","0- Ликвидация","1- Преобразование","2- Слияние","3 - Разделение","5 - Присоединение",
						"6 - Разделение с одновременным присоединением");
	
КонецФункции

// Функция возвращает правильный признак уведомления в документе Уведомление об остатках
// 1 и 2
// 
// Параметры:
//   ПризнакУведомления - Число - признак уведомения (0,1,2,3)
// 
// Возвращаемое значение:
//   Строка - правильный признак
Функция ПолучитьПризнакУведомления(ПризнакУведомления) Экспорт
	
	Если ПризнакУведомления > 1 Тогда
		Возврат ПризнакУведомления - 1;
	КонецЕсли;
		
	Возврат ПризнакУведомления;
	
КонецФункции

// Процедура сохраняет в журнале отчетов статусы информацию о документе
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - ссылка на форму
//
Процедура СохранитьСтатусОтправки(Форма) Экспорт
	Объект = Форма.Объект;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СсылкаНаОбъект", Объект.Ссылка);
	СтруктураПараметров.Вставить("Форма", Форма);
	
	ИнтерфейсыВзаимодействияБРО.СохранитьСтатусОтправки(СтруктураПараметров);
	
КонецПроцедуры

#Область УведомленияОбОстаткахПрослеживаемыхТоваровПечатьИВыгрузка

Функция ПодготовитьТаблицыУведомленияОбОстаткахПрослеживаемыхТоваров(МассивДокументов) Экспорт
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху = 10;
	ТабДокумент.ПолеСнизу  = 10;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УведомлениеОбОстаткахПрослеживаемыхТоваров";
	ТабДокумент.ЭкземпляровНаСтранице = 1;
	
	ПервыйДокумент = Истина;
	
	Для каждого ТекущееЗначение Из МассивДокументов Цикл
		
		Результат = ПолучитьПечатнуюФормуУведомлениеОбОстаткахПрослеживаемыхТоваров(ТекущееЗначение);
		
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 
		
		ПервыйДокумент = Ложь;
		
		ТабДокумент.Вывести(Результат);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПолучитьПечатнуюФормуУведомлениеОбОстаткахПрослеживаемыхТоваров(Документ) Экспорт
	
	ПараметрыПечати = ПараметрыУведомленияОбОстатках(Документ);
	
	Контейнер = ИнтерфейсыВзаимодействияБРО.СтруктураКонтейнераДанных(ПараметрыПечати);
	
	Если Контейнер.Свойство("Ошибки") 
		И Контейнер.Ошибки.Количество() > 0 Тогда
		
		Возврат Новый ТабличныйДокумент;
	
	КонецЕсли;
	
	ЗаполнитьДополнительныеРеквизитыУведомлениеОбОстатках(Контейнер, Документ);
	
	ЗаполнитьСодержательнуюЧастьУведомлениеОбОстатках(Контейнер.СодержательнаяЧасть, Документ);
	
	Результат = ИнтерфейсыВзаимодействияБРО.ПечатныйБланкСформированныйАлгоритмамиРегламентированныхОтчетов(Контейнер);
	
	Если Результат.Количество() = 0 Тогда
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	Возврат ПолучитьИзВременногоХранилища(Результат[0]);
	
КонецФункции

Функция ЗаполнитьДополнительныеРеквизитыУведомлениеОбОстатках(Контейнер, Документ)
	
	ПараметрыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, 
		"Организация,Дата,Номер,НомерКорректировки,ДокументУведомлениеОбОстатках,
		|КодФормыРеорганизации,ПризнакУведомления,ИННДоРеорганизации,КППДоРеорганизации");
	
	НомерУведомления = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ПараметрыДокумента.Номер, Истина, Ложь);
	Если ПараметрыДокумента.НомерКорректировки > 0 Тогда
		НомерУведомления = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыДокумента.ДокументУведомлениеОбОстатках, "Номер"),
				Истина, Ложь);
	КонецЕсли;
	
	Контейнер.Организация = Документ.Организация;
	Контейнер.НалоговыйОрган = ПрослеживаемостьПереопределяемый.КодГосударственногоОрганаОрганизации(
			ПараметрыДокумента.Организация);
			
	Контейнер.ДатаУведомления = ПараметрыДокумента.Дата;
	Контейнер.ДатаПодписи = ПараметрыДокумента.Дата;
	
	Контейнер.КПП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыДокумента.Организация, "КПП");
	Контейнер.НомерУведомления = НомерУведомления;
	Контейнер.ДатаУведомления = ПараметрыДокумента.Дата;
	Контейнер.НомерКорректировки = ПараметрыДокумента.НомерКорректировки;
	
	Если ПараметрыДокумента.ПризнакУведомления > 0 Тогда
		Контейнер.ПризнакУведомления = ПолучитьПризнакУведомления(ПараметрыДокумента.ПризнакУведомления);
		
		Контейнер.ИННПродавца = ИННПродавцовСтрокой(Документ);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыДокумента.КодФормыРеорганизации) Тогда
		
		Контейнер.КодФормыРеорганизации = ПараметрыДокумента.КодФормыРеорганизации;
		Контейнер.ИННРеорганизованнойОрганизации = ПараметрыДокумента.ИННДоРеорганизации;
		Контейнер.КППРеорганизованнойОрганизации = ПараметрыДокумента.КППДоРеорганизации;
		
	КонецЕсли;
		
КонецФункции

Функция ИННПродавцовСтрокой(Документ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.ИНН КАК ИНН
	|ИЗ
	|	Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров.Продавцы КАК УведомлениеОбОстаткахПрослеживаемыхТоваровПродавцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО УведомлениеОбОстаткахПрослеживаемыхТоваровПродавцы.Продавец = Контрагенты.Ссылка
	|ГДЕ
	|	УведомлениеОбОстаткахПрослеживаемыхТоваровПродавцы.Ссылка = &Ссылка";
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	СтрокаИННПродавцов = "";
	НеобходимостьЗапятой = Ложь;
	НомерСтроки = 0;
	КоличествоСтрок = ТаблицаРезультат.Количество();
	
	Для каждого ТекущаяСтрока Из ТаблицаРезультат Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		Если КоличествоСтрок > 1 
			И КоличествоСтрок <> НомерСтроки Тогда
			НеобходимостьЗапятой = Истина;
		Иначе
			НеобходимостьЗапятой = Ложь;
		КонецЕсли;
		
		СтрокаИННПродавцов = СтрокаИННПродавцов + ТекущаяСтрока.ИНН + ?(НеобходимостьЗапятой, ",","");
		
	КонецЦикла;
	
	Возврат СтрокаИННПродавцов;
	
КонецФункции

Процедура ЗаполнитьСодержательнуюЧастьУведомлениеОбОстатках(СодержательнаяЧасть, Документ)

	Запрос = Новый Запрос;
	
	Запрос.Текст = ПрослеживаемостьПереопределяемый.ТекстЗапросаПоТаблицеТоваровУведомленияОбОстатках();
	
	Запрос.УстановитьПараметр("Документ", Документ);
	ТаблицаРезультатов = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаРезультатов.Количество() = 0 Тогда
		Возврат ;
	КонецЕсли;
	
	ТаблицаРезультатов.Свернуть(
		"НомПервичДок,ДатаПервичДок,НаимТовДок,ЕдинИзмерДок,КодТНВЭД,КодОКПД2,ЕдинИзмерПер,РегНомерТов",
		"КолТоварДок,КоличТоварПер,СтТоварБезНДС"
		);
	
	Если ТаблицаРезультатов.Количество() > 1 Тогда
		
		
		Для каждого ТекущаяСтрока Из ТаблицаРезультатов Цикл
			
			ТекущаяСтрока.КодОКПД2 = "";
			
		КонецЦикла;
		
		ТаблицаРезультатов.Свернуть(
			"НомПервичДок,ДатаПервичДок,НаимТовДок,ЕдинИзмерДок,КодТНВЭД,КодОКПД2,ЕдинИзмерПер,РегНомерТов",
			"КолТоварДок,КоличТоварПер,СтТоварБезНДС"
			);
		
	КонецЕсли;
	
	Результат = ТаблицаРезультатов[0];
	
	СодержательнаяЧасть.П000010000101 = НСтр("ru='Инвентаризация товаров'"); // НаимПервичДок
	СодержательнаяЧасть.П000010000201 = Результат["НомПервичДок"];     // НомПервичДок
	СодержательнаяЧасть.П000010000301 = Результат["ДатаПервичДок"];    // ДатаПервичДок
	СодержательнаяЧасть.П000010000401 = Лев(Результат["НаимТовДок"], 255); // НаимТовДок
	СодержательнаяЧасть.П000010000501 = Результат["КолТоварДок"];      // КолТоварДок
	СодержательнаяЧасть.П000010000601 = Результат["ЕдинИзмерДок"];     // ЕдинИзмерДок
	СодержательнаяЧасть.П000010000701 = Результат["КодТНВЭД"];         // КодТНВЭД
	СодержательнаяЧасть.П000010000801 = Результат["КодОКПД2"];         // КодОКПД2
	СодержательнаяЧасть.П000010000901 = Результат["КоличТоварПер"];    // КоличТоварПер
	СодержательнаяЧасть.П000010001001 = Результат["ЕдинИзмерПер"];     // ЕдинИзмерПер
	СодержательнаяЧасть.П000010001101 = Результат["РегНомерТов"];      // РегНомерТов
	СодержательнаяЧасть.П000010001201 = Результат["СтТоварБезНДС"];    // СтТоварБезНДС
	
КонецПроцедуры

Функция ПараметрыУведомленияОбОстатках(Документ)
	
	ПараметрыВыгрузки = Новый Структура();
	ПараметрыВыгрузки.Вставить("ИсточникОтчета", "РегламентированныйОтчетПрослеживаемыеТоварыОстатки");
	ПараметрыВыгрузки.Вставить("ВыбраннаяФорма", "ФормаОтчета2021Кв3");
	ПараметрыВыгрузки.Вставить("ВерсияФормата",  "5.01");
	ПараметрыВыгрузки.Вставить("СсылкаНаВнешнийОбъект", Документ);
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция ВыгрузитьУведомлениеОбОстаткахПрослеживаемыхТоваров(Документ) Экспорт
	
	ПараметрыВыгрузки = ПараметрыУведомленияОбОстатках(Документ);
	
	Контейнер = ИнтерфейсыВзаимодействияБРО.СтруктураКонтейнераДанных(ПараметрыВыгрузки);
	
	Если Контейнер.Свойство("Ошибки") 
		И Контейнер.Ошибки.Количество() > 0 Тогда
		
		Возврат Новый Структура("АдресФайлаВыгрузки,ИмяФайлаВыгрузки,Ошибки",
					Контейнер.АдресФайлаВыгрузки, Контейнер.ИмяФайлаВыгрузки, Контейнер.Ошибки);
	
	КонецЕсли;
	
	ЗаполнитьДополнительныеРеквизитыУведомлениеОбОстатках(Контейнер, Документ);
	
	ЗаполнитьСодержательнуюЧастьУведомлениеОбОстатках(Контейнер.СодержательнаяЧасть, Документ);
	
	Результат = ИнтерфейсыВзаимодействияБРО.ВыгрузитьДанныеАлгоритмамиРегламентированногоОтчета(Контейнер);
	
	Возврат Новый Структура("АдресФайлаВыгрузки,ИмяФайлаВыгрузки,Ошибки",
					Результат.АдресФайлаВыгрузки, Результат.ИмяФайлаВыгрузки, Результат.Ошибки);
	
КонецФункции

#КонецОбласти

#Область УведомленияОВвозеПрослеживаемыхТоваровПечатьИВыгрузка

Функция ПодготовитьТаблицыУведомленияОВвозеПрослеживаемыхТоваров(МассивДокументов)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху = 10;
	ТабДокумент.ПолеСнизу  = 10;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УведомлениеОВвозеПрослеживаемыхТоваров";
	ТабДокумент.ЭкземпляровНаСтранице = 1;
	
	ПервыйДокумент = Истина;
	
	Для каждого ТекущееЗначение Из МассивДокументов Цикл
		
		Результат = ПолучитьПечатнуюФормуУведомленияОВвозе(ТекущееЗначение);
		
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 
		
		ПервыйДокумент = Ложь;
		
		ТабДокумент.Вывести(Результат);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ВыгрузитьУведомлениеОВвозеПрослеживаемыхТоваров(Документ) Экспорт
	
	ПараметрыВыгрузки = ПараметрыУведомленияОВвозе(Документ);
	
	Контейнер = ИнтерфейсыВзаимодействияБРО.СтруктураКонтейнераДанных(ПараметрыВыгрузки);
	
	Если Контейнер.Свойство("Ошибки") 
		И Контейнер.Ошибки.Количество() > 0 Тогда
		
		Возврат Новый Структура("АдресФайлаВыгрузки,ИмяФайлаВыгрузки,Ошибки",
					Контейнер.АдресФайлаВыгрузки, Контейнер.ИмяФайлаВыгрузки, Контейнер.Ошибки);
	
	КонецЕсли;
	
	ЗаполнитьДополнительныеРеквизитыУведомленияОВвозе(Контейнер, Документ);
	
	ЗаполнитьРаздел1УведомленияОВвозе(Контейнер.Раздел1, Документ);
	
	Результат = ИнтерфейсыВзаимодействияБРО.ВыгрузитьДанныеАлгоритмамиРегламентированногоОтчета(Контейнер);
	
	Возврат Новый Структура("АдресФайлаВыгрузки,ИмяФайлаВыгрузки,Ошибки",
					Результат.АдресФайлаВыгрузки, Результат.ИмяФайлаВыгрузки, Результат.Ошибки);
	
КонецФункции

Функция ЗаполнитьДополнительныеРеквизитыУведомленияОВвозе(Контейнер, Документ)
	
	ПараметрыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Документ, "Организация,Дата,Номер,НомерКорректировки,ДокументУведомлениеОВвозе,РНПТ,КодФормыРеорганизации,ИННДоРеорганизации,КППДоРеорганизации");
	
	ДатаУведомления = ПараметрыДокумента.Дата;
	ИсходныйНомер = ПараметрыДокумента.Номер;
	
	Если ПараметрыДокумента.НомерКорректировки > 0 Тогда
		
		ПараметрыДокументаИсходного = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыДокумента.ДокументУведомлениеОВвозе, "Дата,Номер");
		
		ДатаУведомления = ПараметрыДокументаИсходного.Дата;
		ИсходныйНомер = ПараметрыДокументаИсходного.Номер;
		
		Контейнер.НомерКорректировки = ПараметрыДокумента.НомерКорректировки;
		
	КонецЕсли;
	
	Контейнер.Организация = Документ.Организация;
	Контейнер.НалоговыйОрган = ПрослеживаемостьПереопределяемый.КодГосударственногоОрганаОрганизации(
			ПараметрыДокумента.Организация);
			
	Контейнер.ДатаУведомления = ДатаУведомления;
	Контейнер.НомерУведомления = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ИсходныйНомер, Истина, Ложь);
	
	Контейнер.ДатаПодписи = ПараметрыДокумента.Дата;
	
	Контейнер.КПП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыДокумента.Организация, "КПП");
		
	Если ЗначениеЗаполнено(ПараметрыДокумента.КодФормыРеорганизации) Тогда
		
		Контейнер.КодФормыРеорганизации = ПараметрыДокумента.КодФормыРеорганизации;
		Контейнер.ИННРеорганизованнойОрганизации = ПараметрыДокумента.ИННДоРеорганизации;
		Контейнер.КППРеорганизованнойОрганизации = ПараметрыДокумента.КППДоРеорганизации;
		
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьРаздел1УведомленияОВвозе(ТаблицаРаздел1, Документ)
	
	// Схема таблицы ТаблицаРаздел1
	// Данные - Структура данные показатели
	// ДанныеМногострочныхЧастей - - Структура - содержит таблицу П00001М1
	//
	// Структура Данные содержит: 
	//      П000010000100 - Строка - признак физического лица, возможны значения: "V" - физ. лицо; "" - организация.
	//      П000010000200 - Строка - наименование организации (1 - 1000 символов).
	//                               Заполняется, если признак физического лица не заполнен; иначе не заполняется.
	//      П000010000300 - Строка - фамилия физического лица (1 - 60 символов).
	//                               Заполняется, если признак физического лица заполнен; иначе не заполняется.
	//      П000010000400 - Строка - имя физического лица (1 - 60 символов).
	//                               Заполняется, если признак физического лица заполнен; иначе не заполняется.
	//      П000010000500 - Строка - отчество физического лица (1 - 60 символов).
	//                               Заполняется (при наличии), если признак физического лица заполнен;
	//                               иначе не заполняется.
	//      П000010000600 - Строка - код государства-члена ЕАЭС продавца (ОКСМ) (3 цифры).
	//      П000010000700 - Строка - идентификационный код (номер) продавца государства-члена ЕАЭС (8 - 14 символов).
	//      П000010000800 - Строка - адрес продавца государства-члена ЕАЭС (1 - 1000 символов).
	//      П000010000900 - Строка - код товара в соответствии с ТН ВЭД ЕАЭС (6 - 10 цифр).
	//      П000010001000 - Число  - количество товара в соответствии с сопроводительным документом
	//                               (0 - 9999999999999.999999).
	//      П000010001100 - Строка - код единицы измерения товара в соответствии с сопроводительным документом (по ОКЕИ)
	//                               (3 - 4 цифры).
	//      П000010001200 - Строка - регистрационный номер партии товара, подлежащего прослеживаемости (1 - 29 символов);
	//                               не заполняется, если НомерКорректировки равен 0.
	//      П000010001300 - Строка - код количественной единицы измерения товара (по ОКЕИ) (3 - 4 цифры).
	//      П000010001400 - Число  - количество товара, подлежащего прослеживаемости, в количественной единице измерения
	//                               товара (0 - 999999999999999.99999999999).
	//      П000010001500 - Число  - стоимость товаров (без НДС) в рублях и копейках (0 - 99999999999999999.99).
	//
	// Таблица П00001М1 содержит:
	//      Данные - Структура - показатели:
	//        П00001М100001 - Строка - вид документа, возможны значения: 1 - сф, 2 - УПД, 3 - Прочее
	//        П00001М100002 - Строка - номер сопроводительного документа.
	//        П00001М100003 - Дата   - дата сопроводительного документа.
	//

	Запрос = Новый Запрос;
	Запрос.Текст = ПрослеживаемостьПереопределяемый.ТекстЗапросаПоТаблицеТоваровУведомленияОВвозе();
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Результат = Запрос.Выполнить().Выбрать();
	Если НЕ Результат.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	// Формируем шаблоны таблицы заполнения
	Раздел1 = ТаблицаРаздел1.Строки[0];
	ШаблонДанныеРазделДанные = Раздел1.Данные;
	ШаблонДанныеМногострочныхЧастейРаздел1 = Раздел1.ДанныеМногострочныхЧастей;
	
	ШаблонТаблицаП00001М1СопроводительныеДокументы = ШаблонДанныеМногострочныхЧастейРаздел1.П00001М1.Скопировать();
	ШаблонДанныеТаблицаП00001М1СопроводительныеДокументы = 
		ШаблонТаблицаП00001М1СопроводительныеДокументы.Строки[0].Данные;
		
	ПрослеживаемостьФормированиеОтчетности.ОчиститьЗначенияПоказателей(ШаблонДанныеРазделДанные);
	ПрослеживаемостьФормированиеОтчетности.ОчиститьЗначенияПоказателей(
		ШаблонДанныеТаблицаП00001М1СопроводительныеДокументы);
	
	ШаблонТаблицаП00001М1СопроводительныеДокументы.Строки.Очистить();
	ТаблицаРаздел1.Строки.Очистить();
	
	Раздел1НоваяСтрока = ТаблицаРаздел1.Строки.Добавить();
	Раздел1НоваяСтрока.Данные = ПрослеживаемостьФормированиеОтчетности.НоваяСтруктура(ШаблонДанныеРазделДанные);
	Раздел1НоваяСтрока.ДанныеМногострочныхЧастей = 
		ПрослеживаемостьФормированиеОтчетности.НоваяСтруктура(ШаблонДанныеМногострочныхЧастейРаздел1);
	
	ДанныеРаздел1 = Раздел1НоваяСтрока.Данные;
	ДанныеМногострочныхЧастейРаздел1 = Раздел1НоваяСтрока.ДанныеМногострочныхЧастей;
	
	ДанныеМногострочныхЧастейРаздел1.П00001М1 = ШаблонТаблицаП00001М1СопроводительныеДокументы.Скопировать();
	СопроводительныеДокументы = ДанныеМногострочныхЧастейРаздел1.П00001М1;
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Дата, Контрагент");
	КодСтраны = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДокумента.Контрагент, "СтранаРегистрации.Код");
	СведенияОПродавце = ПрослеживаемостьПереопределяемый.СведенияОЮрФизЛице(
		РеквизитыДокумента.Контрагент, РеквизитыДокумента.Дата);
		
	Если ПрослеживаемостьПереопределяемый.ЭтоЮридическоеЛицо(СведенияОПродавце) Тогда
		ДанныеРаздел1.П000010000200 = СведенияОПродавце.НаименованиеДляПечатныхФорм;
	Иначе
		ДанныеРаздел1.П000010000100 = Истина;
		ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(СведенияОПродавце.НаименованиеДляПечатныхФорм);
		ДанныеРаздел1.П000010000300 = ФИО.Фамилия;
		ДанныеРаздел1.П000010000400 = ФИО.Имя;
		ДанныеРаздел1.П000010000500 = ФИО.Отчество;
	КонецЕсли;
	
	ДанныеРаздел1.П000010000600 = КодСтраны; //- Строка - код государства-члена ЕАЭС продавца (ОКСМ) (3 цифры).
	ДанныеРаздел1.П000010000700 = СведенияОПродавце.НалоговыйНомерВСтранеРегистрации; // - Строка - идентификационный код (номер) продавца государства-члена ЕАЭС (8 - 14 символов).
	ДанныеРаздел1.П000010000800 = СведенияОПродавце.ЮридическийАдрес; // - Строка - адрес продавца государства-члена ЕАЭС (1 - 1000 символов).
	ДанныеРаздел1.П000010000900 = Результат["КодТНВЭД"]; // - Строка - код товара в соответствии с ТН ВЭД ЕАЭС (6 - 10 цифр).
	ДанныеРаздел1.П000010001000 = Результат["КолТоварДок"]; // - Число  - количество товара в соответствии с сопроводительным документом
							//                               (0 - 9999999999999.999999).
	ДанныеРаздел1.П000010001100 = Результат["ЕдинИзмерДок"]; // - Строка - код единицы измерения товара в соответствии с сопроводительным документом (по ОКЕИ)
															 //                               (3 - 4 цифры).
	ДанныеРаздел1.П000010001200 = Результат["РНПТ"];; // - Строка - регистрационный номер партии товара, подлежащего прослеживаемости (1 - 29 символов);
						//                               не заполняется, если НомерКорректировки равен 0.
	ДанныеРаздел1.П000010001300 = Результат["ЕдинИзмерПрослеж"]; // - Строка - код количественной единицы измерения товара (по ОКЕИ) (3 - 4 цифры).
	ДанныеРаздел1.П000010001400 = Результат["КоличТоварПрослеж"]; // - Число  - количество товара, подлежащего прослеживаемости, в количественной единице измерения
								//                               товара (0 - 999999999999999.99999999999).
	ДанныеРаздел1.П000010001500 = Результат["СтТоварБезНДС"]; // - Число  - стоимость товаров (без НДС) в рублях и копейках (0 - 99999999999999999.99).
	
	// ДанныеМногострочныхЧастейРаздел1.П00001М1
	СопроводительныеДокументыНоваяСтрока = СопроводительныеДокументы.Строки.Добавить();
	СопроводительныеДокументыНоваяСтрока.Данные = 
		ПрослеживаемостьФормированиеОтчетности.НоваяСтруктура(ШаблонДанныеТаблицаП00001М1СопроводительныеДокументы);
	СопроводительныеДокументыНоваяСтрока.Данные.П00001М100001 = 2; //вид документа, возможны значения: 1 - сф, 2 - УПД, 3 - Прочее
	СопроводительныеДокументыНоваяСтрока.Данные.П00001М100002 = Результат["НомСопрДок"]; //номер сопроводительного документа.
	СопроводительныеДокументыНоваяСтрока.Данные.П00001М100003 = Результат["ДатаСопрДок"]; //дата сопроводительного документа.
	
КонецПроцедуры

Функция ПолучитьПечатнуюФормуУведомленияОВвозе(Документ) Экспорт
	
	ПараметрыПечати = ПараметрыУведомленияОВвозе(Документ);
	
	Контейнер = ИнтерфейсыВзаимодействияБРО.СтруктураКонтейнераДанных(ПараметрыПечати);
	
	Если Контейнер.Свойство("Ошибки") 
		И Контейнер.Ошибки.Количество() > 0 Тогда
		
		Возврат Новый ТабличныйДокумент;
	
	КонецЕсли;
	
	ЗаполнитьДополнительныеРеквизитыУведомленияОВвозе(Контейнер, Документ);
	
	ЗаполнитьРаздел1УведомленияОВвозе(Контейнер.раздел1, Документ);
	
	Результат = ИнтерфейсыВзаимодействияБРО.ПечатныйБланкСформированныйАлгоритмамиРегламентированныхОтчетов(Контейнер);
	
	Если Результат.Количество() = 0 Тогда
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	Возврат ПолучитьИзВременногоХранилища(Результат[0]);
	
КонецФункции

Функция ПараметрыУведомленияОВвозе(Документ)
	
	ПараметрыВыгрузки = Новый Структура();
	ПараметрыВыгрузки.Вставить("ИсточникОтчета", "РегламентированныйОтчетПрослеживаемыеТоварыВвоз");
	ПараметрыВыгрузки.Вставить("ВыбраннаяФорма", "ФормаОтчета2021Кв3");
	ПараметрыВыгрузки.Вставить("ВерсияФормата",  "5.01");
	ПараметрыВыгрузки.Вставить("СсылкаНаВнешнийОбъект", Документ);
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

#КонецОбласти

#Область УведомленияОПеремещенииПрослеживаемыхТоваровПечатьИВыгрузка

Функция ПолучитьСписокПечатныхФормУведомлениеОПеремещенииПрослеживаемыхТоваров(Документ) Экспорт
	
	ПараметрыПечати = ПараметрыУведомленияОПеремещении(Документ);
	
	Контейнер = ИнтерфейсыВзаимодействияБРО.СтруктураКонтейнераДанных(ПараметрыПечати);
	
	Если Контейнер.Свойство("Ошибки") 
		И Контейнер.Ошибки.Количество() > 0 Тогда
		
		Возврат Новый СписокЗначений;
	
	КонецЕсли;
	
	ЗаполнитьДополнительныеРеквизитыУведомлениеОПеремещении(Контейнер, Документ);
	
	Если ЗначениеЗаполнено(Контейнер.Раздел1) Тогда
		ЗаполнитьРаздел1УведомлениеОПеремещении(Контейнер, Документ);
	КонецЕсли;
	
	Результат = ИнтерфейсыВзаимодействияБРО.ПечатныйБланкСформированныйАлгоритмамиРегламентированныхОтчетов(Контейнер);
	
	Если Результат.Количество() = 0 Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	СписокПечатныхФорм = Новый СписокЗначений;
	
	НомерЛиста = 0;
	Для каждого ТекущаяСтрокаРезультат Из Результат Цикл
		
		НомерЛиста = НомерЛиста + 1;
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(ТекущаяСтрокаРезультат);
		МассивПараметров.Добавить(Новый УникальныйИдентификатор());
		МассивПараметров.Добавить("");
		
		ТекстПечатнойформы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Уведомление о перемещении. Лист %1'"), НомерЛиста);
		СписокПечатныхФорм.Добавить(МассивПараметров, ТекстПечатнойформы);
		
	КонецЦикла;
	
	Возврат СписокПечатныхФорм;
	
КонецФункции

Процедура ЗаполнитьРаздел1УведомлениеОПеремещении(Контейнер, Документ)

	ТаблицаРаздел1 = Контейнер.Раздел1;	
	
	Если Контейнер.ВыбраннаяФорма = "ФормаОтчета2021Кв3" Тогда 
		ЗаполнитьРаздел1УведомлениеОПеремещении_до4кв_2022(ТаблицаРаздел1, Документ);
		Возврат;
	КонецЕсли;	
	
    // ВыбраннаяФорма = "ФормаОтчета2022Кв4"
	
	// Схема таблицы ТаблицаРаздел1
	// Данные - Структура данные контрагента
	// ДанныеМногострочныхЧастей - Дерево значений -  Содержит две таблицы  П00001М1, П00001М2, П00001М4
	//
	//	П00001М1 - дерево значений - содержит "сведения о сопроводительном документе"
	//		Данные - Структура - 
	//                 П00001М100001 - Строка - Возможны значения: 1-счет-фактура, 2-УПД, 3-Иное.
	//                 П00001М100002 - Строка - номер докуента
	//                 П00001М100003 - Дата   - дата документа
	//		ДанныеМногострочныхЧастей - Структура
	//
	//	П00001М2 - дерево значений - содержатся "Сведения о пунктах назначения товара, подлежащего прослеживаемости,
	//                        на территории государств-членов ЕАЭС в соответствии с сопроводительным документом"
	//		Данные - Структура - показатели:
	//					П00001М200001 - Строка -  пункт назначения
	//      ДанныеМногострочныхЧастей - Структура
	//
	//	П00001М3 - дерево значений - содержатся строки по товарам, содержится в ДанныеМногострочныхЧастей в таблице П00001М1
	//		Данные - Структура - показатели:
	//                 П00001М300001 - Число  - порядковый номер номенклатуры в сопроводительном документе
	//                 П00001М300002 - Строка - наименование товара
	//                 П00001М300003 - Число  - количество
	//                 П00001М300004 - Строка - единица измерения
	//                 П00001М300005 - Строка - РНПТ.
	//                 П00001М300006 - Строка - единица измерения прослеживаемости
	//                 П00001М300007 - Число  - количество прослеживаемости.
	//                 П00001М300008 - Число  - сумма без НДС
	//
	//      ДанныеМногострочныхЧастей - Структура
	//
	//	 П00001М4 -  таблица: "Код государства-члена ЕАЭС, через которое осуществляется транзит товара, подлежащего прослеживаемости (ОКСМ)
	//		Данные - Структура - показатели:
	//					П00001М400001 - Строка -  код государства, члена ЕАЭС, через которое осуществляется транзит товара
	//      ДанныеМногострочныхЧастей - Структура
	//
	
	// Формируем запрос по данным
	Запрос = Новый Запрос;
	Запрос.Текст = ПрослеживаемостьПереопределяемый.ТекстЗапросаПоТаблицамУведомленияОПеремещенииПрослеживаемыхТоваров();
	Запрос.УстановитьПараметр("Документ", Документ);
	Выборка = Запрос.Выполнить();
	
	Если Выборка.Пустой() Тогда
		Возврат ;
	КонецЕсли;
	
	ПустаяТаблицаРаздел1 = ТаблицаРаздел1.Скопировать();
	
	Результат = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Формируем шаблоны таблицы заполнения
	Раздел1 = ТаблицаРаздел1.Строки[0];
	ШаблонДанныеРазделДанныеКонтрагента = Раздел1.Данные;
	ШаблонДанныеМногострочныхЧастейРаздел1 = Раздел1.ДанныеМногострочныхЧастей;
	
	ШаблонТаблицаП00001М1СопроводительныйДокумент = ШаблонДанныеМногострочныхЧастейРаздел1.П00001М1.Скопировать();
		ШаблонДанныеТаблицаП00001М1СопроводительныйДокумент = ШаблонТаблицаП00001М1СопроводительныйДокумент.Строки[0].Данные;
		
	ШаблонТаблицаП00001М2ПунктыНазначенияТоваров = ШаблонДанныеМногострочныхЧастейРаздел1.П00001М2.Скопировать();
		ШаблонДанныеТаблицаП00001М2ПунктыНазначенияТовара = ШаблонТаблицаП00001М2ПунктыНазначенияТоваров.Строки[0].Данные;
		
	ШаблонТаблицаП00001М3Товары = ШаблонДанныеМногострочныхЧастейРаздел1.П00001М1.Строки[0].ДанныеМногострочныхЧастей.П00001М3.Скопировать();
		ШаблонДанныеТаблицаП00001М3Товары = ШаблонТаблицаП00001М3Товары.Строки[0].Данные;
		
	ШаблонТаблицаП00001М4ТранзитныеСтраны = ШаблонДанныеМногострочныхЧастейРаздел1.П00001М4.Скопировать();;	
	ШаблонДанныеТаблицаП00001М4Страны = ШаблонТаблицаП00001М4ТранзитныеСтраны.Строки[0].Данные;
		
	ПрослеживаемостьФормированиеОтчетности.ОчиститьЗначенияПоказателей(ШаблонДанныеРазделДанныеКонтрагента);
	ПрослеживаемостьФормированиеОтчетности.ОчиститьЗначенияПоказателей(
		ШаблонДанныеТаблицаП00001М1СопроводительныйДокумент);
	ПрослеживаемостьФормированиеОтчетности.ОчиститьЗначенияПоказателей(ШаблонДанныеТаблицаП00001М2ПунктыНазначенияТовара);
	ПрослеживаемостьФормированиеОтчетности.ОчиститьЗначенияПоказателей(ШаблонДанныеТаблицаП00001М3Товары);
	ПрослеживаемостьФормированиеОтчетности.ОчиститьЗначенияПоказателей(ШаблонДанныеТаблицаП00001М4Страны);
	
	ШаблонТаблицаП00001М1СопроводительныйДокумент.Строки.Очистить();
	ШаблонТаблицаП00001М2ПунктыНазначенияТоваров.Строки.Очистить();
	ШаблонТаблицаП00001М3Товары.Строки.Очистить();
	ШаблонТаблицаП00001М4ТранзитныеСтраны.Строки.Очистить();
	ТаблицаРаздел1.Строки.Очистить();
	
	// Заполняем таблицу Раздел1 данными
	
	// Выборка по контрагенту
	Пока Результат.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Результат.Контрагент) Тогда
			ТаблицаРаздел1 = ПустаяТаблицаРаздел1.Скопировать();
			Возврат ;
		КонецЕсли;
		
		Раздел1НоваяСтрока = ТаблицаРаздел1.Строки.Добавить();
		Раздел1НоваяСтрока.Данные = 
			ПрослеживаемостьФормированиеОтчетности.НоваяСтруктура(ШаблонДанныеРазделДанныеКонтрагента);
		Раздел1НоваяСтрока.ДанныеМногострочныхЧастей = 
			ПрослеживаемостьФормированиеОтчетности.НоваяСтруктура(ШаблонДанныеМногострочныхЧастейРаздел1);
		
		ДанныеРаздел1 = Раздел1НоваяСтрока.Данные;
		ДанныеМногострочныхЧастейРаздел1 = Раздел1НоваяСтрока.ДанныеМногострочныхЧастей;
		
		ДанныеКонтрагента = ПрослеживаемостьПереопределяемый.РеквизитыКонтрагента(Результат.Контрагент);
		ДанныеРаздел1.П000010000100 = ДанныеКонтрагента["Признак"]; // Признак физического лица, возможны значения: "V" - физ. лицо; "" - организация.
		ДанныеРаздел1.П000010000200 = ДанныеКонтрагента["Наименование"]; // Наименование организации (1 - 1000 символов).
		ДанныеРаздел1.П000010000300 = ДанныеКонтрагента["Фамилия"]; // Фамилия физического лица (1 - 60 символов).
		ДанныеРаздел1.П000010000400 = ДанныеКонтрагента["Имя"]; // Имя физического лица (1 - 60 символов).
		ДанныеРаздел1.П000010000500 = ДанныеКонтрагента["Отчетсво"]; // Отчество физического лица (1 - 60 символов).
		ДанныеРаздел1.П000010000600 = ДанныеКонтрагента["КодГосударства"]; // Код государства-члена ЕАЭС по ОКСМ (3 цифры).
		ДанныеРаздел1.П000010000700 = ДанныеКонтрагента["ИдентификационныйКод"]; // Идентификационный код (номер) в государстве-члене ЕАЭС (8 - 14 символов).
		ДанныеРаздел1.П000010000800 = ДанныеКонтрагента["Адрес"]; // Адрес (Строка: 1 - 1000 символов).
		
		// Добавляем в таблицу данные по сопроводительным документам
		ВыборкаПоСопроводительнымДокументам = Результат.Выбрать(
			ОбходРезультатаЗапроса.ПоГруппировкам, "СопроводительныйДокумент"
			);
		
		СписокПунктовНазначения = ДобавитьДанныеПоСопроводительномуДокументуПоКонтрагенту(
																	ДанныеМногострочныхЧастейРаздел1,
																	ШаблонТаблицаП00001М1СопроводительныйДокумент,
																	ШаблонДанныеТаблицаП00001М1СопроводительныйДокумент,
																	ВыборкаПоСопроводительнымДокументам,
																	ШаблонТаблицаП00001М3Товары, 
																	ШаблонДанныеТаблицаП00001М3Товары);
		
		ДобавитьДанныеПоПунктуНазначенияПоКонтрагенту(
			ДанныеМногострочныхЧастейРаздел1,
			ШаблонТаблицаП00001М2ПунктыНазначенияТоваров,
			ШаблонДанныеТаблицаП00001М2ПунктыНазначенияТовара,
			СписокПунктовНазначения);
			
		// Добавляем в таблицу данные по сопроводительным документам
		ВыборкаТранзитнымСтранам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "КодТранзитнойСтраны");
			
		ДобавитьТранзитныеСтраны(ДанныеМногострочныхЧастейРаздел1,
								ШаблонТаблицаП00001М4ТранзитныеСтраны,
								ШаблонДанныеТаблицаП00001М4Страны,
								ВыборкаТранзитнымСтранам);	
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДанныеПоПунктуНазначенияПоКонтрагенту(ДанныеМногострочныхЧастейРаздел1,
			ШаблонТаблицаП00001М2ПунктыНазначенияТоваров, ШаблонДанныеТаблицаП00001М2ПунктыНазначенияТовара,
			ВыборкаПоПунктамНазначения)

	ДанныеМногострочныхЧастейРаздел1.П00001М2 = ШаблонТаблицаП00001М2ПунктыНазначенияТоваров.Скопировать();
	ПунктыНазначения = ДанныеМногострочныхЧастейРаздел1.П00001М2;
		
	Для каждого ТекущаяСтрока Из ВыборкаПоПунктамНазначения Цикл

		ПунктыНазначенияНоваяСтрока = ПунктыНазначения.Строки.Добавить();
		ПунктыНазначенияНоваяСтрока.Данные = 
			ПрослеживаемостьФормированиеОтчетности.НоваяСтруктура(ШаблонДанныеТаблицаП00001М2ПунктыНазначенияТовара);
		ПунктыНазначенияНоваяСтрока.Данные.П00001М200001 = ТекущаяСтрока.Значение; 
			
	КонецЦикла;
			
КонецПроцедуры

Функция ДобавитьДанныеПоСопроводительномуДокументуПоКонтрагенту(ДанныеМногострочныхЧастейРаздел1,
			ШаблонТаблицаП00001М1СопроводительныйДокумент, ШаблонДанныеТаблицаП00001М1СопроводительныйДокумент,
			ВыборкаПоСопроводительнымДокументам, ШаблонТаблицаП00001М3Товары, ШаблонДанныеТаблицаП00001М3Товары)

		ДанныеМногострочныхЧастейРаздел1.П00001М1 = ШаблонТаблицаП00001М1СопроводительныйДокумент.Скопировать();
		СопроводительныеДокументы = ДанныеМногострочныхЧастейРаздел1.П00001М1;
		
		СписокПунктовНазначения = Новый СписокЗначений;
		
		Пока ВыборкаПоСопроводительнымДокументам.Следующий() Цикл

			ДанныеСтроки = ПрослеживаемостьПереопределяемый.ПолучитьДанныеСтрокиВыборки(ВыборкаПоСопроводительнымДокументам);
			
			СопроводительныйДокументНоваяСтрока = СопроводительныеДокументы.Строки.Добавить();
			СопроводительныйДокументНоваяСтрока.Данные = 
				ПрослеживаемостьФормированиеОтчетности.НоваяСтруктура(ШаблонДанныеТаблицаП00001М1СопроводительныйДокумент);
			СопроводительныйДокументНоваяСтрока.Данные.П00001М100001 = 2;  // Возможны значения: 1 - СФ, 2 - УПД, 3 - Иное.
			СопроводительныйДокументНоваяСтрока.Данные.П00001М100002 = ДанныеСтроки["НомерСопроводительногоДокумента"]; // Строка - графа 2 (1 - 255 символов).
			СопроводительныйДокументНоваяСтрока.Данные.П00001М100003 = ДанныеСтроки["ДатаСопроводительногоДокумента"]; // графа 3, дата
			
			СопроводительныйДокументНоваяСтрока.ДанныеМногострочныхЧастей = Новый Структура("П00001М3");
			
			// Добавляем в таблицу данные по товарам
			ВыборкаНомерСтроки = ВыборкаПоСопроводительнымДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НомерСтроки");
		
			ДобавитьДанныеПоТоварамПоКонтрагенту(
				СопроводительныйДокументНоваяСтрока.ДанныеМногострочныхЧастей,
				ШаблонТаблицаП00001М3Товары,
				ШаблонДанныеТаблицаП00001М3Товары,
				ВыборкаНомерСтроки);
			
			
			Если ЗначениеЗаполнено(ДанныеСтроки.АдресДоставки)
				И СписокПунктовНазначения.НайтиПоЗначению(ДанныеСтроки.АдресДоставки) = Неопределено Тогда
				
				СписокПунктовНазначения.Добавить(ДанныеСтроки.АдресДоставки);
			
			КонецЕсли;
			
		КонецЦикла;
		
		
		Возврат СписокПунктовНазначения;
		
КонецФункции

Процедура ДобавитьДанныеПоТоварамПоКонтрагенту(ДанныеМногострочныхЧастейРаздел1, ШаблонТаблицаП00001М3Товары,
			ШаблонДанныеТаблицаП00001М3Товары, ВыборкаНомерСтроки)
			
		ДанныеМногострочныхЧастейРаздел1.П00001М3 = ШаблонТаблицаП00001М3Товары.Скопировать();
		Товары = ДанныеМногострочныхЧастейРаздел1.П00001М3;
		
		НомерСтроки = 0;
		Пока ВыборкаНомерСтроки.Следующий() Цикл

			ДанныеСтроки = ПрослеживаемостьПереопределяемый.ПолучитьДанныеСтрокиВыборки(ВыборкаНомерСтроки);
			
			НомерСтроки = НомерСтроки + 1;
			
			ТоварыНоваяСтрока = Товары.Строки.Добавить();
			ТоварыНоваяСтрока.Данные = ПрослеживаемостьФормированиеОтчетности.НоваяСтруктура(ШаблонДанныеТаблицаП00001М3Товары);
			ТоварыНоваяСтрока.Данные.П00001М300001 = ПроверитьНаNull(ДанныеСтроки["ПорядковыйНомерВСопроводительномДокументе"], 0); // - Число  - графа 1 (0 - 999)
			НаименованиеТовара = Лев(ДанныеСтроки["НаименованиеТовара"], 255);
			ТоварыНоваяСтрока.Данные.П00001М300002 = ПроверитьНаNull(НаименованиеТовара, ""); //- Строка - графа 2 (1 - 255 символов).
			ТоварыНоваяСтрока.Данные.П00001М300003 = ПроверитьНаNull(ДанныеСтроки["Количество"], 0); // Число  - графа 3 (0 - 9999999999999.999999).
			ТоварыНоваяСтрока.Данные.П00001М300004 = ПроверитьНаNull(ДанныеСтроки["КодЕдиницаИзмерения"], ""); // - Строка - графа 4 (3 - 4 цифры).
			ТоварыНоваяСтрока.Данные.П00001М300005 = ПроверитьНаNull(ДанныеСтроки["РНПТ"], ""); // - Строка - графа 5 (1 - 29 смволов).
			ТоварыНоваяСтрока.Данные.П00001М300006 = ПроверитьНаNull(ДанныеСтроки["ЕдиницаПрослеживаемости"], ""); // - Строка - графа 6 (3 - 4 цифры).
			ТоварыНоваяСтрока.Данные.П00001М300007 = ПроверитьНаNull(ДанныеСтроки["КоличествоПрослеживаемости"], 0); //Число  - графа 7 (0 - 999999999999999.99999999999).
			ТоварыНоваяСтрока.Данные.П00001М300008 = ПроверитьНаNull(ДанныеСтроки["СуммаБезНДС"], 0); //- Число  - графа 8 (0 - 99999999999999999.99).
			
		КонецЦикла;
			
КонецПроцедуры

Функция ПроверитьНаNull(Значение, ЗначениеПоУмолчанию)

	Если Значение = Null Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ЗаполнитьДополнительныеРеквизитыУведомлениеОПеремещении(Контейнер, Документ)
	
	ПараметрыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ,
		"Организация,Дата,Номер,НомерКорректировки,ДокументУведомлениеОПеремещении,КодФормыРеорганизации,ИННДоРеорганизации,КППДоРеорганизации"
		);
	
	ДатаУведомления = ПараметрыДокумента.Дата;
	ИсходныйНомер =   ПараметрыДокумента.Номер;
	
	Если ПараметрыДокумента.НомерКорректировки > 0 Тогда
		
		ПараметрыДокументаИсходного = 
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыДокумента.ДокументУведомлениеОПеремещении, "Дата,Номер");
		
		ДатаУведомления = ПараметрыДокументаИсходного.Дата;
		ИсходныйНомер =   ПараметрыДокументаИсходного.Номер;
		
		Контейнер.НомерКорректировки = ПараметрыДокумента.НомерКорректировки;
		
	КонецЕсли;
	
	Контейнер.Организация =     Документ.Организация;
	Контейнер.ДатаУведомления = ДатаУведомления;
	Контейнер.ДатаПодписи =     ПараметрыДокумента.Дата;
	Контейнер.КПП =             ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыДокумента.Организация, "КПП");
	
	Контейнер.НалоговыйОрган =   ПрослеживаемостьПереопределяемый.КодГосударственногоОрганаОрганизации(

			ПараметрыДокумента.Организация);
	Контейнер.НомерУведомления = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ИсходныйНомер, Истина, Ложь);
	
	Если ЗначениеЗаполнено(ПараметрыДокумента.КодФормыРеорганизации) Тогда
		
		Контейнер.КодФормыРеорганизации =          ПараметрыДокумента.КодФормыРеорганизации;
		Контейнер.ИННРеорганизованнойОрганизации = ПараметрыДокумента.ИННДоРеорганизации;
		Контейнер.КППРеорганизованнойОрганизации = ПараметрыДокумента.КППДоРеорганизации;
		
	КонецЕсли;
	
	Если Контейнер.Свойство("ПризнакУведомления") Тогда
		
		ПризнакУведомления = Ложь;
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.УведомлениеОПеремещенииПрослеживаемыхТоваров") Тогда		
			ПризнакУведомления = ?(Документ.ТранзитныеСтраныЕАЭС.Количество() > 0, "1", "");
		КонецЕсли;

		Контейнер.ПризнакУведомления = ПризнакУведомления;
		
	КонецЕсли;	
	
КонецФункции

Функция ПараметрыУведомленияОПеремещении(Документ)
	
	ПараметрыВыгрузки = Новый Структура();
	ПараметрыВыгрузки.Вставить("ИсточникОтчета", "РегламентированныйОтчетПрослеживаемыеТоварыПеремещение");
	
	ДатаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Дата");
	
	Если ДатаДокумента >= ДатаИзмененияФорматаУведомленияОПеремещенииС4Кв2022() Тогда 
		ПараметрыВыгрузки.Вставить("ВыбраннаяФорма", "ФормаОтчета2022Кв4");
	Иначе
		ПараметрыВыгрузки.Вставить("ВыбраннаяФорма", "ФормаОтчета2021Кв3");
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ВерсияФормата",  "5.01");
	ПараметрыВыгрузки.Вставить("СсылкаНаВнешнийОбъект", Документ);
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция ВыгрузитьУведомлениеОПеремещенииПрослеживаемыхТоваров(Документ) Экспорт
	
	ПараметрыВыгрузки = ПараметрыУведомленияОПеремещении(Документ);
	
	Контейнер = ИнтерфейсыВзаимодействияБРО.СтруктураКонтейнераДанных(ПараметрыВыгрузки);
	
	Если Контейнер.Свойство("Ошибки") 
		И Контейнер.Ошибки.Количество() > 0 Тогда
		
		Возврат Новый Структура("АдресФайлаВыгрузки,ИмяФайлаВыгрузки,Ошибки",
					Контейнер.АдресФайлаВыгрузки, Контейнер.ИмяФайлаВыгрузки, Контейнер.Ошибки);
	
	КонецЕсли;
	
	ЗаполнитьДополнительныеРеквизитыУведомлениеОПеремещении(Контейнер, Документ);
	
	Если ЗначениеЗаполнено(Контейнер.Раздел1) Тогда
		ЗаполнитьРаздел1УведомлениеОПеремещении(Контейнер, Документ);
	КонецЕсли;
	
	Результат = ИнтерфейсыВзаимодействияБРО.ВыгрузитьДанныеАлгоритмамиРегламентированногоОтчета(Контейнер);
	
	Возврат Новый Структура("АдресФайлаВыгрузки,ИмяФайлаВыгрузки,Ошибки",
					Результат.АдресФайлаВыгрузки, Результат.ИмяФайлаВыгрузки, Результат.Ошибки);
	
КонецФункции

Процедура ЗаполнитьРаздел1УведомлениеОПеремещении_до4кв_2022(ТаблицаРаздел1, Документ)
	
	// Схема таблицы ТаблицаРаздел1
	// Данные - Структура данные контрагента
	// ДанныеМногострочныхЧастей - Дерево значений -  Содержит две таблицы  П00001М1, П00001М1
	//
	//	П00001М1 - дерево значений - содержит "сведения о сопроводительном документе"
	//		Данные - Структура - 
	//                 П00001М100001 - Строка - Возможны значения: 1-счет-фактура, 2-УПД, 3-Иное.
	//                 П00001М100002 - Строка - номер докуента
	//                 П00001М100003 - Дата   - дата документа
	//		ДанныеМногострочныхЧастей - Структура
	//
	//	П00001М2 - дерево значений - содержатся "Сведения о пунктах назначения товара, подлежащего прослеживаемости,
	//                        на территории государств-членов ЕАЭС в соответствии с сопроводительным документом"
	//		Данные - Структура - показатели:
	//					П00001М200001 - Строка -  пункт назначения
	//      ДанныеМногострочныхЧастей - Структура
	//
	//	П00001М3 - дерево значений - содержатся строки по товарам
	//		Данные - Структура - показатели:
	//                 П00001М300001 - Число  - порядковый номер номенклатуры в сопроводительном документе
	//                 П00001М300002 - Строка - наименование товара
	//                 П00001М300003 - Число  - количество
	//                 П00001М300004 - Строка - единица измерения
	//                 П00001М300005 - Строка - РНПТ.
	//                 П00001М300006 - Строка - единица измерения прослеживаемости
	//                 П00001М300007 - Число  - количество прослеживаемости.
	//                 П00001М300008 - Число  - сумма без НДС
	//
	//      ДанныеМногострочныхЧастей - Структура
	
	// Формируем запрос по данным
	Запрос = Новый Запрос;
	Запрос.Текст = ПрослеживаемостьПереопределяемый.ТекстЗапросаПоТаблицамУведомленияОПеремещенииПрослеживаемыхТоваров();
	Запрос.УстановитьПараметр("Документ", Документ);
	Выборка = Запрос.Выполнить();
	
	Если Выборка.Пустой() Тогда
		Возврат ;
	КонецЕсли;
	
	ПустаяТаблицаРаздел1 = ТаблицаРаздел1.Скопировать();
	
	Результат = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Формируем шаблоны таблицы заполнения
	Раздел1 = ТаблицаРаздел1.Строки[0];
	ШаблонДанныеРазделДанныеКонтрагента = Раздел1.Данные;
	ШаблонДанныеМногострочныхЧастейРаздел1 = Раздел1.ДанныеМногострочныхЧастей;
	
	ШаблонТаблицаП00001М1СопроводительныйДокумент = ШаблонДанныеМногострочныхЧастейРаздел1.П00001М1.Скопировать();
		ШаблонДанныеТаблицаП00001М1СопроводительныйДокумент = ШаблонТаблицаП00001М1СопроводительныйДокумент.Строки[0].Данные;
		
	ШаблонТаблицаП00001М2ПунктыНазначенияТоваров = ШаблонДанныеМногострочныхЧастейРаздел1.П00001М2.Скопировать();
		ШаблонДанныеТаблицаП00001М2ПунктыНазначенияТовара = ШаблонТаблицаП00001М2ПунктыНазначенияТоваров.Строки[0].Данные;
		
	ШаблонТаблицаП00001М3Товары = ШаблонДанныеМногострочныхЧастейРаздел1.П00001М3.Скопировать();
		ШаблонДанныеТаблицаП00001М3Товары = ШаблонТаблицаП00001М3Товары.Строки[0].Данные;
	
	ПрослеживаемостьФормированиеОтчетности.ОчиститьЗначенияПоказателей(ШаблонДанныеРазделДанныеКонтрагента);
	ПрослеживаемостьФормированиеОтчетности.ОчиститьЗначенияПоказателей(
		ШаблонДанныеТаблицаП00001М1СопроводительныйДокумент);
	ПрослеживаемостьФормированиеОтчетности.ОчиститьЗначенияПоказателей(ШаблонДанныеТаблицаП00001М2ПунктыНазначенияТовара);
	ПрослеживаемостьФормированиеОтчетности.ОчиститьЗначенияПоказателей(ШаблонДанныеТаблицаП00001М3Товары);
	
	ШаблонТаблицаП00001М1СопроводительныйДокумент.Строки.Очистить();
	ШаблонТаблицаП00001М2ПунктыНазначенияТоваров.Строки.Очистить();
	ШаблонТаблицаП00001М3Товары.Строки.Очистить();
	ТаблицаРаздел1.Строки.Очистить();
	
	// Заполняем таблицу Раздел1 данными
	
	// Выборка по контрагенту
	Пока Результат.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Результат.Контрагент) Тогда
			ТаблицаРаздел1 = ПустаяТаблицаРаздел1.Скопировать();
			Возврат ;
		КонецЕсли;
		
		Раздел1НоваяСтрока = ТаблицаРаздел1.Строки.Добавить();
		Раздел1НоваяСтрока.Данные = 
			ПрослеживаемостьФормированиеОтчетности.НоваяСтруктура(ШаблонДанныеРазделДанныеКонтрагента);
		Раздел1НоваяСтрока.ДанныеМногострочныхЧастей = 
			ПрослеживаемостьФормированиеОтчетности.НоваяСтруктура(ШаблонДанныеМногострочныхЧастейРаздел1);
		
		ДанныеРаздел1 = Раздел1НоваяСтрока.Данные;
		ДанныеМногострочныхЧастейРаздел1 = Раздел1НоваяСтрока.ДанныеМногострочныхЧастей;
		
		ДанныеКонтрагента = ПрослеживаемостьПереопределяемый.РеквизитыКонтрагента(Результат.Контрагент);
		ДанныеРаздел1.П000010000100 = ДанныеКонтрагента["Признак"]; // Признак физического лица, возможны значения: "V" - физ. лицо; "" - организация.
		ДанныеРаздел1.П000010000200 = ДанныеКонтрагента["Наименование"]; // Наименование организации (1 - 1000 символов).
		ДанныеРаздел1.П000010000300 = ДанныеКонтрагента["Фамилия"]; // Фамилия физического лица (1 - 60 символов).
		ДанныеРаздел1.П000010000400 = ДанныеКонтрагента["Имя"]; // Имя физического лица (1 - 60 символов).
		ДанныеРаздел1.П000010000500 = ДанныеКонтрагента["Отчетсво"]; // Отчество физического лица (1 - 60 символов).
		ДанныеРаздел1.П000010000600 = ДанныеКонтрагента["КодГосударства"]; // Код государства-члена ЕАЭС по ОКСМ (3 цифры).
		ДанныеРаздел1.П000010000700 = ДанныеКонтрагента["ИдентификационныйКод"]; // Идентификационный код (номер) в государстве-члене ЕАЭС (8 - 14 символов).
		ДанныеРаздел1.П000010000800 = ДанныеКонтрагента["Адрес"]; // Адрес (Строка: 1 - 1000 символов).
		
		// Добавляем в таблицу данные по сопроводительным документам
		ВыборкаПоСопроводительнымДокументам = Результат.Выбрать(
			ОбходРезультатаЗапроса.ПоГруппировкам, "СопроводительныйДокумент"
			);
		
		СписокПунктовНазначения = ДобавитьДанныеПоСопроводительномуДокументуПоКонтрагенту_до4кв2022(
																	ДанныеМногострочныхЧастейРаздел1,
																	ШаблонТаблицаП00001М1СопроводительныйДокумент,
																	ШаблонДанныеТаблицаП00001М1СопроводительныйДокумент,
																	ВыборкаПоСопроводительнымДокументам);
		
		ДобавитьДанныеПоПунктуНазначенияПоКонтрагенту(
			ДанныеМногострочныхЧастейРаздел1,
			ШаблонТаблицаП00001М2ПунктыНазначенияТоваров,
			ШаблонДанныеТаблицаП00001М2ПунктыНазначенияТовара,
			СписокПунктовНазначения);
		
		// Добавляем в таблицу данные по товарам
		ВыборкаНомерСтроки = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НомерСтроки");
			
		ДобавитьДанныеПоТоварамПоКонтрагенту(
			ДанныеМногострочныхЧастейРаздел1,
			ШаблонТаблицаП00001М3Товары,
			ШаблонДанныеТаблицаП00001М3Товары,
			ВыборкаНомерСтроки);
	
	КонецЦикла;
	
КонецПроцедуры	


Процедура ДобавитьТранзитныеСтраны(ДанныеМногострочныхЧастейРаздел1,
								ШаблонТаблицаП00001М4ТранзитныеСтраны,
								ШаблонДанныеТаблицаП00001М4Страны,
								ВыборкаТранзитнымСтранам)
								
	ДанныеМногострочныхЧастейРаздел1.П00001М4 = ШаблонТаблицаП00001М4ТранзитныеСтраны.Скопировать();
	ТранзитныеСтраны = ДанныеМногострочныхЧастейРаздел1.П00001М4;
		
	Пока ВыборкаТранзитнымСтранам.Следующий() Цикл
		
		НоваяСтрока = ТранзитныеСтраны.Строки.Добавить();
		НоваяСтрока.Данные = 
		ПрослеживаемостьФормированиеОтчетности.НоваяСтруктура(ШаблонДанныеТаблицаП00001М4Страны);
		НоваяСтрока.Данные.П00001М400001 = ВыборкаТранзитнымСтранам.КодТранзитнойСтраны; 
			
	КонецЦикла;
	
КонецПроцедуры	

Функция ДобавитьДанныеПоСопроводительномуДокументуПоКонтрагенту_до4кв2022(ДанныеМногострочныхЧастейРаздел1,
			ШаблонТаблицаП00001М1СопроводительныйДокумент, ШаблонДанныеТаблицаП00001М1СопроводительныйДокумент,
			ВыборкаПоСопроводительнымДокументам)

		ДанныеМногострочныхЧастейРаздел1.П00001М1 = ШаблонТаблицаП00001М1СопроводительныйДокумент.Скопировать();
		СопроводительныеДокументы = ДанныеМногострочныхЧастейРаздел1.П00001М1;
		
		СписокПунктовНазначения = Новый СписокЗначений;
		
		Пока ВыборкаПоСопроводительнымДокументам.Следующий() Цикл

			ДанныеСтроки = ПрослеживаемостьПереопределяемый.ПолучитьДанныеСтрокиВыборки(ВыборкаПоСопроводительнымДокументам);
			
			СопроводительныйДокументНоваяСтрока = СопроводительныеДокументы.Строки.Добавить();
			СопроводительныйДокументНоваяСтрока.Данные = 
				ПрослеживаемостьФормированиеОтчетности.НоваяСтруктура(ШаблонДанныеТаблицаП00001М1СопроводительныйДокумент);
			СопроводительныйДокументНоваяСтрока.Данные.П00001М100001 = 2;  // Возможны значения: 1 - СФ, 2 - УПД, 3 - Иное.
			СопроводительныйДокументНоваяСтрока.Данные.П00001М100002 = ДанныеСтроки["НомерСопроводительногоДокумента"]; // Строка - графа 2 (1 - 255 символов).
			СопроводительныйДокументНоваяСтрока.Данные.П00001М100003 = ДанныеСтроки["ДатаСопроводительногоДокумента"]; // графа 3, дата
			
			Если ЗначениеЗаполнено(ДанныеСтроки.АдресДоставки)
				И СписокПунктовНазначения.НайтиПоЗначению(ДанныеСтроки.АдресДоставки) = Неопределено Тогда
				
				СписокПунктовНазначения.Добавить(ДанныеСтроки.АдресДоставки);
			
			КонецЕсли;
			
		КонецЦикла;
		
		
		Возврат СписокПунктовНазначения;
		
КонецФункции

#КонецОбласти

#КонецОбласти
