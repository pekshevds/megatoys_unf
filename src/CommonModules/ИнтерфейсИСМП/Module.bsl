#Область ПрограммныйИнтерфейс

#Область РеестрКодовМаркировки

// Построить дерево упаковок на основании данных о кодах маркировки.
// 
// Параметры:
//  Значение - Массив Из Структура, Структура - Коды маркировки? для которых необходимо построить дерево упаковок
//  Детализация - ПеречислениеСсылка.ДетализацияСтруктурыХраненияИС, Неопределено - Детализация хранения обувной продукции
//  ПараметрыСканирования - См. ШтрихкодированиеИС.ПараметрыСканирования
// Возвращаемое значение:
//  Структура - Описание:
//   * ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
//   * ТекстОшибки                    - Строка - Текст ошибки.
//   * ДеревоУпаковок                 - ДеревоЗначений, Неопределено - Дерево упаковок, построенное по переданным кодам маркировки.
//   * GTIN - ТаблицаЗначений - Список GTIN в разрезе МРЦ:
//    ** GTIN - Строка - GTIN.
Функция ДеревоУпаковок(Значение, Детализация = Неопределено, ПараметрыСканирования = Неопределено) Экспорт
	
	Возврат ИнтерфейсМОТП.ДеревоУпаковок(Значение, Детализация, ПараметрыСканирования);
	
КонецФункции

// Выполнить запрос статусов для списка кодов маркировки.
// 
// Параметры:
//  МассивИсходныхСтрок - Массив Из СтрокаТабличнойЧасти: см. ШтрихкодированиеИС.ИнициализацияТаблицыДанныхКодовМаркировки - Коллекция строк таблицы
//  Организация - ОпределяемыйТип.Организация - Организация
//  ЗапрашиватьСтатусыКодовЕАЭС - Булево      - флаг использования запроса для проверки в сервисе.
// 
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Необходимость обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON)
//	* СтатусыКодовМаркировки - Соответствие Из КлючИЗначение - Статусы кодов маркировки:
//		** Ключ - СтрокаТабличнойЧасти - элемент переданной входящей колеекции.
//		** Значение - (См. ИнтерфейсИСМПСлужебный.ПараметрыКодаМаркировки).
//  * ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция СтатусыКодовМаркировки(МассивИсходныхСтрок, Организация = Неопределено, ЗапрашиватьСтатусыКодовЕАЭС = Ложь) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("СтатусыКодовМаркировки",         Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	ПакетыКодовМаркировки  = Новый Массив;
	ПакетКодовМаркировки   = Неопределено;
	СтатусыКодовМаркировки = Новый Соответствие;
	ЕстьДанныеДляЗапроса   = Ложь;
	
	КоличествоКодовВПакетеДляЗапросаСтатусов = ИнтеграцияИСМППовтИсп.КоличествоКодовВПакетеДляЗапросаСтатусов();
	
	Для Каждого ИсходнаяСтрока Из МассивИсходныхСтрок Цикл
		
		Если ИсходнаяСтрока.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда

			ИнтерфейсИСМПСлужебный.ЗаполнитьСтатусБезВыполненияЗапроса(ИсходнаяСтрока, СтатусыКодовМаркировки);

		Иначе

			Если ПакетКодовМаркировки = Неопределено
				Или ПакетКодовМаркировки.Количество() >= КоличествоКодовВПакетеДляЗапросаСтатусов Тогда
				ПакетКодовМаркировки = Новый Массив();
				ПакетыКодовМаркировки.Добавить(ПакетКодовМаркировки);
			КонецЕсли;

			ПакетКодовМаркировки.Добавить(ИсходнаяСтрока);

			ЕстьДанныеДляЗапроса = Истина;

		КонецЕсли;
		
	КонецЦикла;
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии
		И ЕстьДанныеДляЗапроса Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Если ЕстьДанныеДляЗапроса Тогда

		ПараметрыНормализации = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
		ПараметрыНормализации.ИмяСвойстваКодМаркировки = "Штрихкод";
		ПараметрыНормализации.НачинаетсяСоСкобки = Ложь;
		
		ПараметрыЗапросаСтатусов = ИнтерфейсМОТП.ИнициализироватьПараметрыЗапросаСтатусов();
		ПараметрыЗапросаСтатусов.Организация                 = Организация;
		ПараметрыЗапросаСтатусов.СтатусыКодовМаркировкиКеш   = СтатусыКодовМаркировки;
		ПараметрыЗапросаСтатусов.ЗапрашиватьСтатусыКодовЕАЭС = ЗапрашиватьСтатусыКодовЕАЭС;
	
		Для Каждого ПакетКодовМаркировки Из ПакетыКодовМаркировки Цикл

			РезультатЗапросаСтатусовКодовМаркировок = ИнтерфейсМОТП.ЗапроситьСтатусыКодовМаркировкиПакетно(
				ПакетКодовМаркировки, ПараметрыЗапросаСтатусов);

			ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатЗапросаСтатусовКодовМаркировок.РезультатОтправкиЗапроса;

			Если РезультатЗапросаСтатусовКодовМаркировок.ТребуетсяОбновлениеКлючаСессии Тогда

				ВозвращаемоеЗначение.ТекстОшибки                    = РезультатЗапросаСтатусовКодовМаркировок.ТекстОшибки;
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;

				Возврат ВозвращаемоеЗначение;

			ИначеЕсли РезультатЗапросаСтатусовКодовМаркировок.СтатусыКодовМаркировки = Неопределено Тогда

				ВозвращаемоеЗначение.ТекстОшибки = РезультатЗапросаСтатусовКодовМаркировок.ТекстОшибки;

				Возврат ВозвращаемоеЗначение;

			КонецЕсли;

		КонецЦикла;
	
	КонецЕсли;

	ВозвращаемоеЗначение.СтатусыКодовМаркировки = СтатусыКодовМаркировки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполнить запрос статусов для списка КИЗ.
//
// Параметры:
//  МассивИсходныхСтрок - Массив Из СтрокаТабличнойЧасти: см. ШтрихкодированиеИС.ИнициализацияТаблицыДанныхКодовМаркировки - Коллекция строк таблицы
//  СтатусыКодовМаркировкиКеш - Соответствие, Неопределено - Кеш статусов кодов маркировки
//  Организация - ОпределяемыйТип.Организация - Организация
//  ВключатьСтатусыВложенныхКодов - Булево - Включать в соответствие СтатусыКодовМаркировки статусы вложенных кодов маркировки.
//  НастройкиРазбора - (см. РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки).
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Необходимость обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON).
//	отправки запроса.
//	* СтатусыКодовМаркировки - Соответствие Из КлючИЗначение - Статусы кодов маркировки:
//		** Ключ - Строка - Код маркировки.
//		** Значение - (См. ИнтерфейсИСМПСлужебный.ПараметрыКодаМаркировки).
//  * ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция СтатусыПродукцииИзНатуральногоМехаПакетно(МассивИсходныхСтрок, СтатусыКодовМаркировкиКеш = Неопределено, Организация = Неопределено, ВключатьСтатусыВложенныхКодов = Ложь, НастройкиРазбора = Неопределено) Экспорт

	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));

	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("СтатусыКодовМаркировки",         Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");

	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;

	Для Каждого СтрокаТаблицы Из МассивИсходныхСтрок Цикл

		ВидПродукции = СтрокаТаблицы.ВидПродукции;

		ПараметрыЗапроса = Новый Массив;
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"pg=%1",
				ИнтерфейсИСМПСлужебный.ТоварнаяГруппа(СтрокаТаблицы.ВидПродукции)));

		Если ЗначениеЗаполнено(СтрокаТаблицы.Штрихкод) Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"cis=%1",
					СтрокаТаблицы.Штрихкод));
		Иначе
			// RU-DAB1AG-Z61M0FP3JM
			//СтрокаТаблицы.EPC = "3035195FEC35BFFA9074881F";
			//DECIMALПредставлениеSGTIN = ШтрихкодированиеИСКлиентСервер.DECIMALПредставлениеSGTINRFID(СтрокаТаблицы);
			DECIMALПредставлениеSGTIN = "1.464005773.217.251531659295";
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"sn=%1",
					DECIMALПредставлениеSGTIN));
		КонецЕсли;

		URLЗапроса = СтрШаблон("api/v3/true-api/products/listV2?%1", СтрСоединить(ПараметрыЗапроса,"&"));

		РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(
			URLЗапроса,
			КлючСессии,
			ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("", Истина));

		РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);

		ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;

		Если РезультатОтправкиЗапроса.ОтветПолучен Тогда

			Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда

				ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(
					РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);

				Если ДанныеОбработки = Неопределено Тогда

					ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
						URLЗапроса,
						РезультатОтправкиЗапроса);

					ВозвращаемоеЗначение.ТекстОшибки = СокрЛП(
						ВозвращаемоеЗначение.ТекстОшибки + Символы.ПС + ТекстОшибки);

				Иначе

					СтатусыПоЗначениямДляПоиска = Новый Соответствие;
					Для Каждого КлючИЗначение Из ДанныеОбработки["results"] Цикл

						СтатусыПоЗначениямДляПоиска.Вставить(
							КлючИЗначение.Ключ,
							ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыКодаМаркировки(
								КлючИЗначение.Значение, ВидПродукции, Ложь, Неопределено));

					КонецЦикла;

					Если СтатусыКодовМаркировкиКеш = Неопределено Тогда
						СтатусыКодовМаркировки = Новый Соответствие;
					Иначе
						СтатусыКодовМаркировки = СтатусыКодовМаркировкиКеш;
					КонецЕсли;

					ЗначениеДляПоиска = Неопределено;
					ПараметрыКодаМаркировки = СтатусыПоЗначениямДляПоиска[ЗначениеДляПоиска];
					Если ПараметрыКодаМаркировки = Неопределено Тогда

						Если СтатусыКодовМаркировки[СтрокаТаблицы] <> Неопределено Тогда
							Продолжить;
						Конецесли;

						ПараметрыКодаМаркировки = ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыКодаМаркировки();
						ПараметрыКодаМаркировки.Статус = Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен;

					Иначе

						Если ЗначениеЗаполнено(ПараметрыКодаМаркировки.ВидПродукции)
							И Не ЗначениеЗаполнено(СтрокаТаблицы.ВидПродукции) Тогда
							СтрокаТаблицы.ВидПродукции = ПараметрыКодаМаркировки.ВидПродукции;
						КонецЕсли;

						Если ЗначениеЗаполнено(ПараметрыКодаМаркировки.ВидУпаковки) Тогда
							СтрокаТаблицы.ВидУпаковки = ПараметрыКодаМаркировки.ВидУпаковки;
						КонецЕсли;

					КонецЕсли;

					СтатусыКодовМаркировки.Вставить(СтрокаТаблицы, ПараметрыКодаМаркировки);

					// Интерфейс v4 возвращает статусы по дочерним элементам кода маркировки
					Если ВключатьСтатусыВложенныхКодов
						И ПараметрыКодаМаркировки.ВложенныеУпаковки <> Неопределено Тогда
						Для Каждого КлючИЗначение Из ПараметрыКодаМаркировки.ВложенныеУпаковки Цикл
							СтатусыКодовМаркировки.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
						КонецЦикла;
					КонецЕсли;

					ВозвращаемоеЗначение.СтатусыКодовМаркировки = СтатусыКодовМаркировки;
					
				КонецЕсли;
				
			Иначе
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
				Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
					ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
				КонецЕсли;
				
				Возврат ВозвращаемоеЗначение;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить вид продукции для кодов идентификации.
// Используется метод true-api cises/info.
// 
// Параметры:
//	МассивКодовМаркировки - Массив - коды маркировки.
//	Организация - СправочникСсылка.Организации - организация.
// 
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Необходимость обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON).
//	* ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции по данным сервиса.
//	* ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция ТоварнаяГруппаПоКодамИдентификации(МассивКодовМаркировки, Организация = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ВидПродукции",                   Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ПараметрыURL",    Новый Массив);
	ПараметрыЗапроса.Вставить("КодыМаркировки",  Новый Массив);
	
	Для Каждого КодМаркировки Из МассивКодовМаркировки Цикл
		
		ПараметрыЗапроса.КодыМаркировки.Добавить(КодМаркировки);
		
	КонецЦикла;
	
	URLЗапроса = СтрШаблон(
		"api/v3/true-api/cises/info%1",
		ИнтерфейсИСМП.ПараметрыЗапроса(ПараметрыЗапроса.ПараметрыURL));
	
	РезультатЗапроса = ИнтеграцияИСМП.ОтправитьДанныеВСервис(
		URLЗапроса, ПараметрыЗапроса.КодыМаркировки, КлючСессии,
		"POST", ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("", Истина));
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	НастройкиРазбора = РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки(, Ложь);
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				Если ТипЗнч(ДанныеОбработки) = Тип("Массив") Тогда
					
					Для Каждого ЭлементДанных Из ДанныеОбработки Цикл
						
						ДанныеКодаМаркировки = ЭлементДанных["cisInfo"];
						
						КодОшибки = ЭлементДанных["errorCode"];
						Если КодОшибки = "404" Тогда
							
						Иначе
							Значение = ДанныеКодаМаркировки["productGroup"];
							Если Значение <> Неопределено Тогда
								ВозвращаемоеЗначение.ВидПродукции = ИнтерфейсИСМПСлужебный.ТоварнаяГруппа(Значение);
							КонецЕсли;
						КонецЕсли;
						
					КонецЦикла;
				
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 404 Тогда
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	ИначеЕсли ВозвращаемоеЗначение.РезультатОтправкиЗапроса.КодСостояния = 404 Тогда
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить актуальный баланс на складе.
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация - Организация
//  ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции
//  GTIN - Массив Из Строка, Строка - GTIN для которых необходимо получить количество
// 
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Необходимость обновления ключа сессии
//	* РезультатОтправкиЗапроса - См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON
//	* ТекстОшибки - Строка - Текст сообщения об ошибке
//	* СодержимоеНедоступно - Булево
//	* ОстатокGTIN - Соответствие Из КлючИЗначение:
//		** Ключ - Строка - GTIN
//		** Значение - Число - количество единиц товара
Функция ОстатокGTINПоДаннымВиртуальногоБаланса(Организация, ВидМаркируемойПродукции, GTIN) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ОстатокGTIN",                    Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("СодержимоеНедоступно",           Ложь);
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("gtins", GTIN);
	
	URLЗапроса = "api/v3/true-api/warehouse/balance";
	
	РезультатЗапроса = ИнтеграцияИСМП.ОтправитьДанныеВСервис(
		URLЗапроса, ТелоЗапроса, КлючСессии, "POST",
		ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов(ВидМаркируемойПродукции, Истина));
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ОстатокGTIN = Новый Соответствие;
				
				ДанныеИзСервиса = ДанныеОбработки.Получить("balances");
				Если ДанныеИзСервиса <> Неопределено Тогда
					Для Каждого Строка Из ДанныеИзСервиса Цикл
						ОстатокGTIN.Вставить(Строка["gtin"], Строка["quantity"]);
					КонецЦикла;
				КонецЕсли;
				
				ВозвращаемоеЗначение.ОстатокGTIN = ОстатокGTIN;
				
			КонецЕсли;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 403 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить количество единиц товара для каждой запрашиваемой пары кода товара и веса в граммах.
// Используется метод true-api gtin-weight/cis-count
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация - Организация
//  ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции
//  Товары - Массив Из Структура:
//	* GTIN - Строка - GTIN
//	* Вес - Число - Вес товара
// 
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Необходимость обновления ключа сессии
//	* РезультатОтправкиЗапроса - См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON
//	* ТекстОшибки - Строка - Текст сообщения об ошибке
//	* СодержимоеНедоступно - Булево
//	* КоличествоПотребительскихУпаковок - Соответствие Из КлючИЗначение:
//		** Ключ - Строка - GTIN
//		** Значение - Число - количество единиц товара
Функция КоличествоПотребительскихУпаковокНаОснованииВеса(Организация, ВидМаркируемойПродукции, Товары) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии",    КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",          Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                       "");
	ВозвращаемоеЗначение.Вставить("КоличествоПотребительскихУпаковок", Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("СодержимоеНедоступно",              Ложь);
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ТоварыДляЗапроса = Новый Массив;
	Для Каждого Строка Из Товары Цикл
		ДанныеДляРасчета = Новый Структура("gtin, weight", Строка.GTIN, Строка.Вес);
		ТоварыДляЗапроса.Добавить(ДанныеДляРасчета);
	КонецЦикла;
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("products", ТоварыДляЗапроса);
	
	URLЗапроса = "api/v3/true-api/product/gtin-weight/cis-count";
	
	РезультатЗапроса = ИнтеграцияИСМП.ОтправитьДанныеВСервис(
		URLЗапроса, ТелоЗапроса, КлючСессии, "POST",
		ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов(ВидМаркируемойПродукции, Истина));
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				КоличествоПотребительскихУпаковок = Новый Соответствие;
				
				ДанныеИзСервиса = ДанныеОбработки.Получить("results");
				Если ДанныеИзСервиса <> Неопределено Тогда
					Для Каждого Строка Из ДанныеИзСервиса Цикл
						КоличествоПотребительскихУпаковок.Вставить(Строка.Получить("gtin"), Строка.Получить("cisCount"));
					КонецЦикла;
				КонецЕсли;
				
				ВозвращаемоеЗначение.КоличествоПотребительскихУпаковок = КоличествоПотребительскихУпаковок;
				
			КонецЕсли;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 403 Тогда
			
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область РеестрПродукции

// Получить данные продукции по штрихкоду EAN.
// 
// Параметры:
// 	Значение - Массив Из Строка, Строка - GTIN для которых необходимо получить представление и прочие данные.
// 	ВидПродукции  - ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - Вид продукции.
// 	Организация   - ОпределяемыйТип.Организация - Организация.
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
// 	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON). - Результат
//	отправки запроса.
// 	* ДанныеПродукцииПоШтрихкодуEAN - Неопределено - Если при получении данных возникла ошибка.
// 	                                - Соответствие Из КлючИЗначение - Соответствие штрихкода EAN и данных продукции из сервиса ИС МОТП:
// 	 ** Ключ     - Строка - Штрихкод EAN.
// 	 ** Значение - (См. ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеПродукции) - Реквизиты продукции:
// 	* ТекстОшибки - Строка - Текст ошибки.
Функция ДанныеПродукцииПоШтрихкодуEAN(Значение, ВидПродукции = Неопределено, Организация = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеПродукцииПоШтрихкодуEAN",  Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыЗапроса              = Новый Массив;
	ДанныеПродукцииПоШтрихкодуEAN = Новый Соответствие;
	ИсходныеЗначенияЗапроса       = Новый Соответствие;
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		
		GTIN = ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(Значение);
		ИсходныеЗначенияЗапроса.Вставить(GTIN, Значение);
		
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"gtins=%1",
				GTIN));
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
		
		ДанныеДляЗапроса = Новый Массив;
		Для Каждого ШтрихкодEAN Из Значение Цикл
			GTIN = ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(ШтрихкодEAN);
			ИсходныеЗначенияЗапроса.Вставить(GTIN, ШтрихкодEAN);
			ДанныеДляЗапроса.Добавить(GTIN);
		КонецЦикла;
		
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"gtins=%1",
				СтрСоединить(ДанныеДляЗапроса, ",")));
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка'");
	КонецЕсли;
	
	ПараметрыОтправкиHTTPЗапросов = ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("", Истина);
	
	URLЗапроса = СтрШаблон(
		"api/v3/true-api/product/info%1", ПараметрыЗапроса(ПараметрыЗапроса));
	
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(
		URLЗапроса,
		КлючСессии,
		ПараметрыОтправкиHTTPЗапросов);
		
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				Для Каждого ЭлементДанных Из ДанныеОбработки.results Цикл
					
					ДанныеПродукции = ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеПродукции(ЭлементДанных);
					
					КлючРезультата = ИсходныеЗначенияЗапроса.Получить(ДанныеПродукции.GTIN);
					Если КлючРезультата = Неопределено Тогда
						КлючРезультата = ШтрихкодированиеИСКлиентСервер.ШтрихкодEANИзGTIN(ДанныеПродукции.GTIN)
					КонецЕсли;
					
					ДанныеПродукцииПоШтрихкодуEAN.Вставить(КлючРезультата, ДанныеПродукции);
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	ИначеЕсли РезультатОтправкиЗапроса.КодСостояния <> 404 Тогда
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	ВозвращаемоеЗначение.ДанныеПродукцииПоШтрихкодуEAN = ДанныеПродукцииПоШтрихкодуEAN;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция КодыТНВЭДПоВидуПродукции(ВидПродукции, Организация = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("КодыТНВЭД",                      Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("limit", 1000);
	
	МассивВидовПродукции = Новый Массив;
	МассивВидовПродукции.Добавить(ИнтерфейсИСМПСлужебный.ТоварнаяГруппа(ВидПродукции));
	
	Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукции) Тогда
		
		МассивКодовМаркировки = Новый Массив;
		
		Если ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
			МассивКодовМаркировки.Добавить("2402");
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда
			МассивКодовМаркировки.Добавить("2402");
			МассивКодовМаркировки.Добавить("2403");
		Иначе
			МассивКодовМаркировки.Добавить("2402");
			МассивКодовМаркировки.Добавить("2403");
			МассивКодовМаркировки.Добавить("2404");
		КонецЕсли;
		
		ПараметрыЗапроса.Вставить("tnveds", МассивКодовМаркировки);
	
	Иначе	
		ПараметрыЗапроса.Вставить("pg", МассивВидовПродукции);
	КонецЕсли;
	
	URLЗапроса = "api/v4/true-api/tn-ved/search";
		
	РезультатЗапроса = ИнтеграцияИСМП.ОтправитьДанныеВСервис(
		URLЗапроса,
		ПараметрыЗапроса,
		КлючСессии,
		"POST",
		ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов(ВидПродукции, Истина));	
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Ложь);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				КодыТНВЭД = Новый Массив;
				
				Для Каждого СтрокаКода Из ДанныеОбработки.tnveds Цикл
					КодыТНВЭД.Добавить(ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеКодовТНВЭД(СтрокаКода));
				КонецЦикла;
				
				ВозвращаемоеЗначение.КодыТНВЭД = КодыТНВЭД;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить список продукции по ИНН производителя.
// 
// Параметры:
// 	ИНН           - Строка                             - Устарел. ИНН производителя.
// 	ВидПродукции  - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции.
// 	НомерСтраницы - Число                              - Номер страницы.
// 	Организация   - ОпределяемыйТип.Организация        - Организация.
// 	ВариантAPI    - Строка, Неопределено               - Устарел. Использовался как: Вариант используемого API (ТАПИ, v3).
// Возвращаемое значение:
// 	Структура - Структура со свойствами:
// 	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
// 	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON). - Результат
//	отправки запроса.
// 	* ДанныеПродукцииПоШтрихкодуEAN - Неопределено - Если при получении данных возникла ошибка.
// 	                                - Соответствие Из КлючИЗначение - Соответствие штрихкода EAN и данных продукции из сервиса ИС МОТП:
// 	 ** Ключ     - Строка - Штрихкод EAN.
// 	 ** Значение - (См. ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеПродукции).
// 	* ТекстОшибки - Строка - Текст ошибки.
Функция НайтиПродукциюПоИННПроизводителя(ИНН, ВидПродукции, НомерСтраницы = 0, Организация = Неопределено, ВариантAPI = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеПродукцииПоШтрихкодуEAN",  Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Массив;
	ПараметрыЗапроса.Добавить(СтрШаблон("page=%1",  Формат(НомерСтраницы, "ЧН=0; ЧГ=0")));
	
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		ПараметрыЗапроса.Добавить(СтрШаблон("pg=%1", ИнтерфейсИСМПСлужебный.ТоварнаяГруппа(ВидПродукции)));
	Иначе
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка. Не передан вид продукции в метод поиска продукции.'");
	КонецЕсли;
	
	ПараметрыЗапроса.Добавить(СтрШаблон("limit=%1",             Формат(100, "ЧГ=0;")));
	ПараметрыЗапроса.Добавить(СтрШаблон("includeSubaccount=%1", Формат(Истина, "БЛ=false; БИ=true;")));
	
	URLЗапроса = СтрШаблон(
		"api/v4/true-api/product/gtin%1",
		ПараметрыЗапроса(ПараметрыЗапроса));
	
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(
		URLЗапроса,
		КлючСессии,
		ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("", Истина));
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ДанныеПродукцииПоШтрихкодуEAN = Новый Соответствие;
				
				Если ДанныеОбработки.total = 0 Или ДанныеОбработки.results.Количество() = 0 Тогда
					ВозвращаемоеЗначение.ДанныеПродукцииПоШтрихкодуEAN = ДанныеПродукцииПоШтрихкодуEAN;
					Возврат ВозвращаемоеЗначение;
				КонецЕсли;
				
				МассивGTIN = Новый Массив();
				Для Каждого СтрокаРезультата Из ДанныеОбработки.results Цикл
					МассивGTIN.Добавить(СтрокаРезультата.gtin);
				КонецЦикла;
				ОтветДанныеПоШтрихкодуEAN = ДанныеПродукцииПоШтрихкодуEAN(МассивGTIN, ВидПродукции);
				Если ОтветДанныеПоШтрихкодуEAN.ТребуетсяОбновлениеКлючаСессии Тогда
					ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
				ИначеЕсли ОтветДанныеПоШтрихкодуEAN.РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
					Для Каждого GTIN Из МассивGTIN Цикл
						ДанныеПродукцииПоШтрихкодуEAN.Вставить(
							ШтрихкодированиеИСКлиентСервер.ШтрихкодEANИзGTIN(GTIN),
							ОтветДанныеПоШтрихкодуEAN.ДанныеПродукцииПоШтрихкодуEAN.Получить(GTIN));
					КонецЦикла;
					ВозвращаемоеЗначение.ДанныеПродукцииПоШтрихкодуEAN = ДанныеПродукцииПоШтрихкодуEAN
				Иначе
					ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
						URLЗапроса,
						ОтветДанныеПоШтрихкодуEAN.РезультатОтправкиЗапроса);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область РеестрДокументов

// Получить список документов по отбору.
// 
// Параметры:
// 	Организация  - ОпределяемыйТип.Организация                      - Организация.
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - ВидПродукции.
// 	ПараметрыОтбора - см. ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыОтбораДокументов.
// 	ПараметрыНавигации - Строка, Неопределено                       - Параметры навигации.
// 
// Возвращаемое значение:
// Структура - Структура со свойствами:
//  * ТребуетсяОбновлениеКлючаСессии - Булево - Необходимость обновления ключа сессии
//  * РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON)
//  * НайденныеДокументы - Массив Из См. ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеШапкиДокумента
//                       - Неопределено - Если при получении данных возникла ошибка.
//  * ТекстОшибки        - Строка - Текст сообщения об ошибке.
//  * ПараметрыНавигации - Структура - (См. ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыНавигацииПоДокументам).
//                       - Неопределено - Если при получении данных возникла ошибка.
Функция НайтиДокументыПоОтбору(Организация, ВидПродукции = Неопределено, ПараметрыОтбора = Неопределено, ПараметрыНавигации = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("НайденныеДокументы",             Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ПараметрыНавигации",             Неопределено);
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Массив;
	
	Если ПараметрыОтбора <> Неопределено Тогда
		Если ПараметрыОтбора.Свойство("ПолучательИНН") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"receiverInn=%1",
					ПараметрыОтбора.ПолучательИНН));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("ОтправительИНН") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"senderInn=%1",
					ПараметрыОтбора.ОтправительИНН));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("СтатусДокумента") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"documentStatus=%1",
					ПараметрыОтбора.СтатусДокумента));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("ФорматДокумента") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"documentFormat=%1",
					ПараметрыОтбора.ФорматДокумента));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("ТипДокумента") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"documentType=%1",
					ПараметрыОтбора.ТипДокумента));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("Идентификатор") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"number=%1",
					ПараметрыОтбора.Идентификатор));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("Интервал") Тогда
			Если ЗначениеЗаполнено(ПараметрыОтбора.НачалоПериода) Тогда
				ПараметрыЗапроса.Добавить(
					СтрШаблон(
						"DateFrom=%1",
						ИнтеграцияИС.ДатаUTC(ПараметрыОтбора.НачалоПериода)));
			КонецЕсли;
			Если ЗначениеЗаполнено(ПараметрыОтбора.КонецПериода) Тогда
				ПараметрыЗапроса.Добавить(
					СтрШаблон(
						"DateTo=%1",
						ИнтеграцияИС.ДатаUTC(ПараметрыОтбора.КонецПериода)));
			КонецЕсли;
		КонецЕсли;
		ПараметрыЗапроса.Добавить(
		СтрШаблон(
			"limit=%1",
			Формат(ПараметрыОтбора.КоличествоЗаписей, "ЧГ=0;")));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"pg=%1",
				ИнтерфейсИСМПСлужебный.ТоварнаяГруппа(ВидПродукции)));
	КонецЕсли;
	
	ПараметрыЗапроса.Добавить(
		СтрШаблон(
			"order=%1",
			"DESC"));
	Если ПараметрыНавигации <> Неопределено
		И ПараметрыНавигации.Направление = "Далее" Тогда
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"did=%1",
				ПараметрыНавигации.НомерДокументаПоследний));
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"orderedColumnValue=%1",
				ПараметрыНавигации.ЗначениеПоляСортировкиПоследнее));
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"pageDir=%1",
				"NEXT"));
	КонецЕсли;
	Если ПараметрыНавигации <> Неопределено
		И ПараметрыНавигации.Направление = "Назад" Тогда
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"did=%1",
				ПараметрыНавигации.НомерДокументаПервый));
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"orderedColumnValue=%1",
				ПараметрыНавигации.ЗначениеПоляСортировкиПервое));
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"pageDir=%1",
				"PREV"));
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		"api/v4/true-api/doc/list%1",
		ПараметрыЗапроса(ПараметрыЗапроса));
	
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(
		URLЗапроса,
		КлючСессии,
		ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("", Истина));
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Ложь);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				НайденныеДокументы  = Новый Массив;
				КоличествоЭлементов = ДанныеОбработки["results"].Количество();
				
				Если КоличествоЭлементов > 0 Тогда
					
					Для Каждого ЭлементДанных Из ДанныеОбработки.results Цикл
						НайденныеДокументы.Добавить(
							ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеШапкиДокумента(
								ЭлементДанных));
					КонецЦикла;
					
					ПараметрыНавигации = ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыНавигацииПоДокументам();
					Если КоличествоЭлементов > 0 Тогда
						ПараметрыНавигации.НомерДокументаПервый            = ДанныеОбработки["results"][0]["number"];
						ПараметрыНавигации.ЗначениеПоляСортировкиПервое    = ДанныеОбработки["results"][0]["receivedAt"];
						ПараметрыНавигации.НомерДокументаПоследний         = ДанныеОбработки["results"][КоличествоЭлементов - 1]["number"];
						ПараметрыНавигации.ЗначениеПоляСортировкиПоследнее = ДанныеОбработки["results"][КоличествоЭлементов - 1]["receivedAt"];
					КонецЕсли;
					
					ПараметрыНавигации.КоличествоЗаписейВсего      = КоличествоЭлементов;
					ПараметрыНавигации.КоличествоЗаписейОбработано = КоличествоЭлементов;
					ВозвращаемоеЗначение.ПараметрыНавигации        = ПараметрыНавигации;
					
				КонецЕсли;
				
				ВозвращаемоеЗначение.НайденныеДокументы = НайденныеДокументы;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить документ по идентификатору.
// 
// Параметры:
// 	Идентификатор - Строка                              - Идентификатор документа.
// 	Организация   - ОпределяемыйТип.Организация         - Организация
// 	ВидПродукции  - ПеречислениеСсылка.ВидыПродукцииИС  - Вид продукции.
// 	Операция      - ПеречислениеСсылка.ВидыОперацийИСМП - Вид операции.
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
// 	* РезультатОтправкиЗапроса       - см. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON.
// 	* ДанныеДокумента - Структура - Данные документа.
// 	                  - Неопределено - Если при получении данных возникла ошибка.
// 	* ТекстОшибки - Строка - Текст ошибки.
Функция СтатусОбработкиДокументаПоИдентификатору(Идентификатор, Организация = Неопределено, ВидПродукции = Неопределено, Операция = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Операция",                       Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента);
	ВозвращаемоеЗначение.Вставить("Статус",                         Перечисления.СтатусыДокументовИСМП.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",                Перечисления.СтатусыОбработкиСообщенийИСМП.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Массив;
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"pg=%1",
				ИнтерфейсИСМПСлужебный.ТоварнаяГруппа(ВидПродукции)));
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийИСМП.АТКСоздание Тогда
		ПараметрыЗапроса.Добавить("body=true");
	КонецЕсли;
	
	
	URLЗапроса = СтрШаблон(
		"api/v4/true-api/doc/%1/info%2",
		Идентификатор,
		ПараметрыЗапроса(ПараметрыЗапроса));
	
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(
		URLЗапроса,
		КлючСессии,
		ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("", Истина));
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				// ТАПИ v4 возвращает массив, содержащий результат получения данных по id документа.
				Для Каждого ЭлементДанных Из ДанныеОбработки Цикл
					
					Статус = ИнтерфейсИСМПСлужебный.СтатусДокумента(ЭлементДанных["status"]);
					
					Если Статус = Перечисления.СтатусыДокументовИСМП.ЕстьОшибки 
						Или Статус = Перечисления.СтатусыДокументовИСМП.Ошибка Тогда
						
						СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
						
						Если ЭлементДанных["errors"] <> Неопределено Тогда
							ВозвращаемоеЗначение.ТекстОшибки = СтрСоединить(ЭлементДанных["errors"], Символы.ПС);
						Иначе
							ВозвращаемоеЗначение.ТекстОшибки = НСтр("ru = '<Описание ошибки отсутствует>'");
						КонецЕсли;
					
					ИначеЕсли Статус = Перечисления.СтатусыДокументовИСМП.Обрабатывается
						Или Статус = Перечисления.СтатусыДокументовИСМП.ОжидаетПродолженияПроцессингаДокумента Тогда
						СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается;
					ИначеЕсли Статус = Перечисления.СтатусыДокументовИСМП.Проверен
						Или Статус = Перечисления.СтатусыДокументовИСМП.Принят Тогда
						СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
					ИначеЕсли Статус = Перечисления.СтатусыДокументовИСМП.ОжидаетсяПодтверждениеПоступления Тогда
						СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОжидаетПодтверждения;
						//ВозвращаемоеЗначение.ДанныеДокумента = ДанныеОбработки;
					ИначеЕсли Статус = Перечисления.СтатусыДокументовИСМП.ОжидаетРегистрациюУчастникаГИСМТ Тогда
						СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОжидаетРегистрациюУчастникаГИСМТ;
					ИначеЕсли Статус = Перечисления.СтатусыДокументовИСМП.Отменен Тогда
						СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаАннулирована;
					КонецЕсли;
					
					ВозвращаемоеЗначение.Статус          = Статус;
					ВозвращаемоеЗначение.СтатусОбработки = СтатусОбработки;
				
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить состав документа по идентификатору.
// 
// Параметры:
// 	Организация - ОпределяемыйТип.Организация - Организация.
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции.
// 	             - Неопределено.
// 	ПараметрыОтбора - Структура - (См. ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыОтбораДокументов).
// 	                - Неопределено.
// 	ПараметрыНавигации - Структура - (См. ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыНавигации).
// 	                   - Неопределено.
// 	ПараметрыОбработки - Структура, Неопределено - Параметры обработки.
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
// 	* РезультатОтправкиЗапроса - Структура - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON)
// 	* РеквизитыДокумента - Структура - Данные документа.
// 	                     - Неопределено - Если при получении данных возникла ошибка.
// 	* ТекстОшибки        - Строка - Текст ошибки.
// 	* СоставДокумента    - Массив - Состав документа из элемента данных products
// 	                     - Неопределено - Если при получении данных возникла ошибка.
// 	* Статус             - ПеречислениеСсылка.СтатусыДокументовИСМП - Статус документа ИС МП
// 	* СтатусОбработки    - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения ИС МП
// 	* ДанныеДокумента    - Структура - (См. ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект) 
// 	* ПараметрыНавигации - Структура - (См. ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыНавигации)
// 	                     - Неопределено - Если при получении данных возникла ошибка.
Функция СоставДокументаПоИдентификатору(Организация, ВидПродукции = Неопределено, ПараметрыОтбора = Неопределено, Знач ПараметрыНавигации = Неопределено, ПараметрыОбработки = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	Если ПараметрыОбработки = Неопределено Тогда
		ПараметрыОбработки = НовыеПараметрыОбработкиСоставаДокумента();
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Операция",                       Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("СоставДокумента",                Неопределено);
	
	ВозвращаемоеЗначение.Вставить("Статус",                         Перечисления.СтатусыДокументовИСМП.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",                Перечисления.СтатусыОбработкиСообщенийИСМП.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("ДанныеДокумента",                Неопределено);
	
	ВозвращаемоеЗначение.Вставить("ПараметрыНавигации",             Неопределено);
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Массив;
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"pg=%1",
				ИнтерфейсИСМПСлужебный.ТоварнаяГруппа(ВидПродукции)));
	КонецЕсли;
	
	Если ПараметрыОтбора <> Неопределено Тогда
		
		Если ПараметрыОтбора.Свойство("КоличествоЗаписей") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"limit=%1",
					Формат(ПараметрыОтбора.КоличествоЗаписей, "ЧГ=0;")));
		КонецЕсли;
		
		Если ПараметрыОтбора.Свойство("Идентификатор") Тогда
			Идентификатор = ПараметрыОтбора.Идентификатор;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыНавигации <> Неопределено
		И ЗначениеЗаполнено(ПараметрыНавигации.НомерСтраницы) Тогда
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"pageNumber=%1",
				ПараметрыНавигации.НомерСтраницы));
	КонецЕсли;
	
	ПараметрыЗапроса.Добавить("body=true");
	
	URLЗапроса = СтрШаблон(
		"api/v4/true-api/doc/%1/info%2",
		Идентификатор,
		ПараметрыЗапроса(ПараметрыЗапроса));
	
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(
		URLЗапроса,
		КлючСессии,
		ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("", Истина));
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				// ТАПИ v4 возвращает массив, содержащий результат получения данных по id документа.
				Для Каждого ЭлементДанных Из ДанныеОбработки Цикл
					
					Статус = ИнтерфейсИСМПСлужебный.СтатусДокумента(ЭлементДанных["status"]);
					
					Если Статус = Перечисления.СтатусыДокументовИСМП.ЕстьОшибки 
						Или Статус = Перечисления.СтатусыДокументовИСМП.Ошибка Тогда
						
						СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
						
						Если ЭлементДанных["errors"] <> Неопределено Тогда
							ВозвращаемоеЗначение.ТекстОшибки = СтрСоединить(ЭлементДанных["errors"], Символы.ПС);
						Иначе
							ВозвращаемоеЗначение.ТекстОшибки = НСтр("ru = '<Описание ошибки отсутствует>'");
						КонецЕсли;
					
					ИначеЕсли ПараметрыОбработки.РасширенныеСтатусы
						И (Статус = Перечисления.СтатусыДокументовИСМП.Обрабатывается
						Или Статус = Перечисления.СтатусыДокументовИСМП.ОжидаетПродолженияПроцессингаДокумента) Тогда
						СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается;
					ИначеЕсли ПараметрыОбработки.РасширенныеСтатусы
						И Статус = Перечисления.СтатусыДокументовИСМП.Проверен
						Или Статус = Перечисления.СтатусыДокументовИСМП.Принят Тогда
						СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
					ИначеЕсли ПараметрыОбработки.РасширенныеСтатусы
						И Статус = Перечисления.СтатусыДокументовИСМП.ОжидаетсяПодтверждениеПоступления Тогда
						СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОжидаетПодтверждения;
						ВозвращаемоеЗначение.ДанныеДокумента = ДанныеОбработки;
					ИначеЕсли ПараметрыОбработки.РасширенныеСтатусы
						И Статус = Перечисления.СтатусыДокументовИСМП.ОжидаетРегистрациюУчастникаГИСМТ Тогда
						СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОжидаетРегистрациюУчастникаГИСМТ;
					ИначеЕсли ПараметрыОбработки.РасширенныеСтатусы
						И Статус = Перечисления.СтатусыДокументовИСМП.Отменен Тогда
						СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаАннулирована;
					Иначе
					
						СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;			
						ВозвращаемоеЗначение.ДанныеДокумента = ДанныеОбработки;
						
					КонецЕсли;
					
					ВозвращаемоеЗначение.Статус          = Статус;
					ВозвращаемоеЗначение.СтатусОбработки = СтатусОбработки;
					
					Если ЭлементДанных.Свойство("type") Тогда
						Если ЭлементДанных.type = "EAS_GTIN_CROSSBORDER_IMPORT" Тогда
							ПараметрыОбработки.ИмяПоляСортировки = "gtin";
						ИначеЕсли ЭлементДанных.type = "EAS_CROSSBORDER" Тогда
							ПараметрыОбработки.ИмяПоляСортировки = "cis";
						ИначеЕсли ЭлементДанных.type = "UNIVERSAL_TRANSFER_DOCUMENT" 
							Или ЭлементДанных.type = "UNIVERSAL_TRANSFER_DOCUMENT_FIX"
							Или ЭлементДанных.type = "UNIVERSAL_CORRECTION_DOCUMENT"
							Или ЭлементДанных.type = "UNIVERSAL_CORRECTION_DOCUMENT" Тогда
							ПараметрыОбработки.ИмяПоляСортировки = "code";
						КонецЕсли;
					КонецЕсли;
					
					Если ЭлементДанных.Свойство("body") Тогда
						
						КоличествоЭлементов = ЭлементДанных["body"][ПараметрыОбработки.ИмяПоляТела].Количество();
						Если КоличествоЭлементов > 0 Тогда
							
							СоставДокумента = Новый Массив;
							Для Каждого ЭлементСоставаДокумента Из ЭлементДанных["body"][ПараметрыОбработки.ИмяПоляТела] Цикл
								СоставДокумента.Добавить(ЭлементСоставаДокумента);
							КонецЦикла;
							ВозвращаемоеЗначение.СоставДокумента = СоставДокумента;
							
							ПараметрыНавигации = ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыНавигации();
							ПараметрыНавигации.Направление = "Далее";
							ПараметрыНавигации.НомерСтраницы = ПараметрыНавигации.НомерСтраницы + 1;
							
							Если ЭлементДанных["body"][ПараметрыОбработки.ИмяПоляТела][0].Свойство(ПараметрыОбработки.ИмяПоляСортировки) Тогда
								ИмяКолонкиКМ = ПараметрыОбработки.ИмяПоляСортировки;
							Иначе
								ИмяКолонкиКМ = "uitu_code";
							КонецЕсли;
							КодОтбора = КодироватьСтроку(ЭлементДанных["body"][ПараметрыОбработки.ИмяПоляТела][0][ИмяКолонкиКМ], СпособКодированияСтроки.КодировкаURL);
							
							ПараметрыНавигации.КодМаркировкиПервый          = КодОтбора;
							ПараметрыНавигации.ЗначениеПоляСортировкиПервое = КодОтбора;
							
							Если ЭлементДанных["body"][ПараметрыОбработки.ИмяПоляТела][КоличествоЭлементов - 1].Свойство(ПараметрыОбработки.ИмяПоляСортировки) Тогда
								ИмяКолонкиКМ = ПараметрыОбработки.ИмяПоляСортировки;
							Иначе
								ИмяКолонкиКМ = "uitu_code";
							КонецЕсли;
							КодОтбора = КодироватьСтроку(ЭлементДанных["body"][ПараметрыОбработки.ИмяПоляТела][КоличествоЭлементов - 1][ИмяКолонкиКМ], СпособКодированияСтроки.КодировкаURL);
							
							ПараметрыНавигации.КодМаркировкиПоследний          = КодОтбора;
							ПараметрыНавигации.ЗначениеПоляСортировкиПоследнее = КодОтбора;
							ПараметрыНавигации.КоличествоЗаписейОбработано     = КоличествоЭлементов;
							
							ВозвращаемоеЗначение.ПараметрыНавигации = ПараметрыНавигации;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область РаботаСДокументами

Функция СоздатьДокументПоСообщению(Организация, Операция, ВидПродукции, ТекстСообщения, Подпись, ПараметрыЗапросаИсходящегоСообщения) Экспорт
	
	ПараметрыЗапроса = Новый Массив;
	
	Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукции)
		И (Операция = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировки
			Или Операция = Перечисления.ВидыОперацийИСМП.СписаниеВведенныхВОборотКодовМаркировки
			Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание
			Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение
			Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияУдаление) Тогда
		
		Если Операция = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание
			Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение
			Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияУдаление Тогда
			URLЗапроса = "api/v3/true-api/documents/aggregation/create";
		Иначе
			URLЗапроса = "api/v3/true-api/documents/dropped-out/create";
		КонецЕсли;
		
		ПолеФормы = Новый Структура;
		ПолеФормы.Вставить("ИмяПоля",  "xmlFile");
		ПолеФормы.Вставить("ИмяФайла", "data.xml");
		ПолеФормы.Вставить("Тип",      "application/xml");
		ПолеФормы.Вставить("Тело",     ТекстСообщения);
		
		ПоляФормы = Новый Массив;
		ПоляФормы.Добавить(ПолеФормы);
		
		ДанныеПреобразования = ИнтеграцияИСКлиентСервер.ДвоичныеДанныеPOSTЗапросаКакФорма(ПоляФормы);
		ТелоЗапроса = ДанныеПреобразования.ДвоичныеДанные;
		Размер      = ДанныеПреобразования.Размер;
		
		ЗаголовкиHTTP = Новый Соответствие;
		ЗаголовкиHTTP.Вставить("Content-Type",   "multipart/form-data; boundary=" + ДанныеПреобразования.Разделитель);
		ЗаголовкиHTTP.Вставить("Accept-Charset", "utf-8");
		ЗаголовкиHTTP.Вставить("Content-Lenght", Формат(Размер, "ЧН=0; ЧГ=0;"));
		
		Если Подпись <> Неопределено Тогда
			ЗаголовкиHTTP.Вставить("X-Signature", ИнтеграцияИСКлиентСервер.ДвоичныеДанныеBase64(Подпись));
		КонецЕсли;
		
		ПараметрыСозданияДокумента = НовыеПараметрыСозданияДокумента();
		ПараметрыСозданияДокумента.URLЗапроса       = URLЗапроса;
		ПараметрыСозданияДокумента.ТелоЗапроса      = ТелоЗапроса;
		ПараметрыСозданияДокумента.Организация      = Организация;
		ПараметрыСозданияДокумента.Операция         = Операция;
		ПараметрыСозданияДокумента.ЗаголовкиHTTP    = ЗаголовкиHTTP;
		ПараметрыСозданияДокумента.ПараметрыЗапроса = ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("", Истина);
		
		Возврат СоздатьДокумент(ПараметрыСозданияДокумента);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.СогласиеОПредоставлениеИнформацииПодписание
		Или Операция = Перечисления.ВидыОперацийИСМП.СогласиеОПредоставлениеИнформацииПодписаниеАннулирования Тогда
		
		Возврат СогласиеОПредоставленииИнформацииГИСМТ.ПодписатьДокументСогласияИлиДокументАнулированияОПредоставленииИнформации(
			Организация, Операция, Подпись, ПараметрыЗапросаИсходящегоСообщения);
		
	Иначе
		
		ДокументBase64 = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(ТекстСообщения);
		
		ОбъемноСортовойУчет = Ложь;
		Если ПараметрыЗапросаИсходящегоСообщения <> Неопределено
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			ПараметрыЗапросаИсходящегоСообщения, "ОбъемноСортовойУчет") Тогда
			ОбъемноСортовойУчет = ПараметрыЗапросаИсходящегоСообщения.ОбъемноСортовойУчет;
		КонецЕсли;

		ТелоЗапроса = Новый Структура;
		ТелоЗапроса.Вставить("product_document", ДокументBase64);
		ТелоЗапроса.Вставить("document_format",  "MANUAL");
		ТелоЗапроса.Вставить("signature",        ИнтеграцияИСКлиентСервер.ДвоичныеДанныеBase64(Подпись));
		ТелоЗапроса.Вставить("type",             ИнтерфейсИСМПСлужебный.ВидОперации(Операция, ВидПродукции, ОбъемноСортовойУчет));
		
		ПараметрыЗапроса = Новый Массив;
		Если ЗначениеЗаполнено(ВидПродукции) Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"pg=%1",
					ИнтерфейсИСМПСлужебный.ТоварнаяГруппа(ВидПродукции)));
		КонецЕсли;
		
		URLЗапроса = СтрШаблон(
			"api/v3/true-api/lk/documents/create%1",
			ПараметрыЗапроса(ПараметрыЗапроса));
		
		ПараметрыСозданияДокумента = НовыеПараметрыСозданияДокумента();
		ПараметрыСозданияДокумента.URLЗапроса       = URLЗапроса;
		ПараметрыСозданияДокумента.ТелоЗапроса      = ТелоЗапроса;
		ПараметрыСозданияДокумента.Организация      = Организация;
		ПараметрыСозданияДокумента.Операция         = Операция;
		ПараметрыСозданияДокумента.ПараметрыЗапроса = ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("", Истина);
		
		Возврат СоздатьДокумент(ПараметрыСозданияДокумента);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

Функция РазобратьИНормализоватьКодМаркировки(КодМаркировки, ВидПродукции = Неопределено) Экспорт
	
	ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
	ПользовательскиеПараметрыРазбораКодаМаркировки.ПроверятьАлфавитЭлементов = Ложь;
	
	ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
		КодМаркировки, ВидПродукции,,, ПользовательскиеПараметрыРазбораКодаМаркировки);
	
	Если ДанныеРазбора = Неопределено Тогда
		Возврат ШтрихкодированиеИСКлиентСервер.ШтрихкодВФорматеGS1(КодМаркировки);
	КонецЕсли;
	
	Возврат ДанныеРазбора.НормализованныйКодМаркировки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Создает документ в ИС МП.
// 
// Параметры:
// 	Параметры - Структура - Описание:
// * URLЗапроса    - Строка - адрес на сервере.
// * ТелоЗапроса   - Структура - Данные тела запроса.
// * Организация   - ОпределяемыйТип.Организация - Организация.
// * Операция      - ПеречислениеСсылка.ВидыОперацийИСМП - Вид операции.
// * ВидПродукции  - ПеречислениеСсылка.ВидыПродукцииИС  - Вид продукции.
// * ЗаголовкиHTTP - Соответствие, Неопределено - Заголовки HTTP запроса.
// Возвращаемое значение:
// 	Структура - Описание:
// * ТекстОшибки - Строка -
// * ИдентификаторЗаявки - Неопределено -
// * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП -
// * РезультатОтправкиЗапроса - См. ИнтерфейсМОТПСлужебный.ОбработатьРезульатОтправкиHTTPЗапросаКакJSON
// * ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
Функция СоздатьДокумент(Параметры)
	
	URLЗапроса          = Параметры.URLЗапроса;
	ТелоЗапроса         = Параметры.ТелоЗапроса;
	Организация         = Параметры.Организация;
	Операция            = Параметры.Операция;
	ЗаголовкиHTTP       = Параметры.ЗаголовкиHTTP;
	ПараметрыЗапроса    = Параметры.ПараметрыЗапроса;
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	Если ЗаголовкиHTTP <> Неопределено Тогда
		ЗаголовкиHTTP.Вставить("Authorization", СтрШаблон("Bearer %1", КлючСессии));
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Операция",                       Операция);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",                Перечисления.СтатусыОбработкиСообщенийИСМП.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("ИдентификаторЗаявки",            Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	РезультатЗапроса = ИнтеграцияИСМП.ОтправитьДанныеВСервис(
		URLЗапроса,
		ТелоЗапроса,
		КлючСессии,
		"POST",
		ПараметрыЗапроса,
		ЗаголовкиHTTP);
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(
		РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200
			Или РезультатОтправкиЗапроса.КодСостояния = 201 Тогда
			
			ИдентификаторЗаявки = РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
			Если РезультатОтправкиЗапроса.Объект <> Неопределено
				И РезультатОтправкиЗапроса.Объект.Свойство("id") Тогда
				ИдентификаторЗаявки = РезультатОтправкиЗапроса.Объект.id;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ИдентификаторЗаявки)
				Или Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИдентификаторЗаявки)
					И Не (Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаЕАЭССПризнаниемКИ
					      Или Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ
					      Или Операция = Перечисления.ВидыОперацийИСМП.ПриемкаИзЕАЭСПриОСУ
					      Или Операция = Перечисления.ВидыОперацийИСМП.ПриемкаОтклонен
						  Или Операция = Перечисления.ВидыОперацийИСМП.СведенияОКодахИдентификацииДляВводаВОборот
						  Или Операция = Перечисления.ВидыОперацийИСМП.СведенияОРазрешительнойДокументацииДляВводаВОборот
						  Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПеревзвешивании) Тогда
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
				ВозвращаемоеЗначение.ТекстОшибки     = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.СтатусОбработки     = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята;
				ВозвращаемоеЗначение.ИдентификаторЗаявки = ИдентификаторЗаявки;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			ВозвращаемоеЗначение.ТекстОшибки     = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		ВозвращаемоеЗначение.ТекстОшибки     = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НовыеПараметрыСозданияДокумента()
	
	ПараметрыСозданияДокумента = Новый Структура();
	
	ПараметрыСозданияДокумента.Вставить("URLЗапроса");
	ПараметрыСозданияДокумента.Вставить("ТелоЗапроса");
	ПараметрыСозданияДокумента.Вставить("Организация");
	ПараметрыСозданияДокумента.Вставить("Операция");
	ПараметрыСозданияДокумента.Вставить("ЗаголовкиHTTP");
	ПараметрыСозданияДокумента.Вставить("ПараметрыЗапроса");
	
	Возврат ПараметрыСозданияДокумента;
	
КонецФункции

// Новые параметры обработки состава документа.
//
// Возвращаемое значение:
//  Структура - Новые параметры обработки состава документа:
// * ИмяПоляТела        - Строка - Имя поля тела.
// * ИмяПоляСортировки   - Строка - Имя поля сортировки.
// * РасширенныеСтатусы - Булево - Расширенные статусы.
Функция НовыеПараметрыОбработкиСоставаДокумента() Экспорт

	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("ИмяПоляТела",        "products");
	ПараметрыОбработки.Вставить("ИмяПоляСортировки",  "uit_code");
	ПараметрыОбработки.Вставить("РасширенныеСтатусы", Ложь);

	Возврат ПараметрыОбработки;

КонецФункции

// Формирует дополнение строки параметров URL.
// 
// Параметры:
// 	ПараметрыЗапроса - Массив из Строка, Неопределено - Данные параметров запроса
// Возвращаемое значение:
// 	Строка - Срока дополнения.
Функция ПараметрыЗапроса(ПараметрыЗапроса = Неопределено) Экспорт
	
	Если ПараметрыЗапроса <> Неопределено
		И ПараметрыЗапроса.Количество() > 0 Тогда
		Возврат "?" + СтрСоединить(ПараметрыЗапроса, "&");
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

#КонецОбласти
