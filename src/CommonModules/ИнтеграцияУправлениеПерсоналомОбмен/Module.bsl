
#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияМенеджеров

Функция НовыйМенеджерОбмена(Приложение, ВестиПротокол) Экспорт
	
	Возврат Обработки.МенеджерОбменаУправлениеПерсоналом.НовыйМенеджер(Приложение, ВестиПротокол);
	
КонецФункции

Функция НовыйМенеджерКонвертации(Приложение) Экспорт

	Возврат Обработки.МенеджерКонвертацииУправлениеПерсоналом.НовыйМенеджер(Приложение);

КонецФункции

#КонецОбласти

#Область РегистрацияСобытийВЖурналеРегистрации

Функция КомментарийЖРНачалоОбмена()

	Комментарий = НСтр("ru = 'Начало обмена.'");
	Возврат Комментарий;

КонецФункции

Функция КомментарийЖРОкончаниеОбмена(БылиОшибки)

	Комментарий = НСтр("ru = 'Окончание обмена.'");
	Если БылиОшибки Тогда
		Комментарий = СтрШаблон("%1 %2", Комментарий, НСтр("ru = 'Были ошибки.'"));
	КонецЕсли;
	Возврат Комментарий;

КонецФункции

Процедура ЗаписатьСобытиеНачалоОбмена(ИменаСобытийЖР)

	ЗаписьЖурналаРегистрации(
		ИменаСобытийЖР.Обмен,
		УровеньЖурналаРегистрации.Информация,,, КомментарийЖРНачалоОбмена());

КонецПроцедуры
	
Процедура ЗаписатьСобытиеОкончаниеОбмена(ИменаСобытийЖР, БылиОшибки)

	ЗаписьЖурналаРегистрации(
		ИменаСобытийЖР.Обмен,
		УровеньЖурналаРегистрации.Информация,,,КомментарийЖРОкончаниеОбмена(БылиОшибки));

КонецПроцедуры

Функция ОписаниеОшибкиКонвертации(ОшибкиКонвертации)

	ШаблонОписанияОшибки = НСтр("ru = 'Ошибки конвертации объекта
		|%1'");
	Ошибки = СформироватьJSON(ОшибкиКонвертации);
	
	Возврат СтрШаблон(ШаблонОписанияОшибки, Ошибки);

КонецФункции

Процедура ЗарегистрироватьОшибкуКонвертацииОбъекта(ИменаСобытийЖР, ТипОбъекта, ИдентификаторОбъекта, ОписаниеОшибкиКонвертации)

	ШаблонОписания = НСтр("ru = 'Ошибка обработки объекта: %1. Идентификатор: %2'");
	Описание = СтрШаблон(ШаблонОписания, Строка(ТипОбъекта), ИдентификаторОбъекта);
	
	ШаблонТекста = "%1
		|%2";
	Комментарий  = СтрШаблон(ШаблонТекста, Описание, ОписаниеОшибкиКонвертации);
	ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Конвертация, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);

КонецПроцедуры

Процедура ЗарегистрироватьОшибкуОбработкиОбъекта(ИменаСобытийЖР, ТипОбъекта, ИдентификаторОбъекта, ПодробноеПредставлениеОшибки)

	ШаблонОписания = НСтр("ru = 'Ошибка обработки объекта: %1. Идентификатор: %2'");
	Описание = СтрШаблон(ШаблонОписания, Строка(ТипОбъекта), ИдентификаторОбъекта);
	
	ШаблонТекста = "%1
		|%2";
	Комментарий  = СтрШаблон(ШаблонТекста, Описание, ПодробноеПредставлениеОшибки);
	ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Обмен, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);

КонецПроцедуры

Процедура ЗаписатьОшибку(ИменаСобытийЖР, Описание, ПодробноеПредставлениеОшибки)
	
	ШаблонТекста = "%1
		|%2";
	Комментарий  = СтрШаблон(ШаблонТекста, Описание, ПодробноеПредставлениеОшибки);
	ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Обмен, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);

КонецПроцедуры

Функция СформироватьJSON(Значение)
	
	НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
	НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON( ,Символы.Таб));
	ЗаписатьJSON(ЗаписьJSON, Значение, НастройкиСериализацииJSON, "ПреобразованиеJSON", ИнтеграцияУправлениеПерсоналомОбмен);
	Результат = ЗаписьJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ПреобразованиеJSON(Знач Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	Результат = Неопределено;
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Значение)) Тогда
		Результат = Строка(Значение);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ФоновыеЗадания

Процедура ПроверкаНастроекПодключенияФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	Приложение 	= Параметры.Приложение;
	Настройки 	= Параметры.Настройки;
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерОбмена = НовыйМенеджерОбмена(Приложение, Ложь);
	Результат = МенеджерОбмена.ПроверитьНастройкиПодключения(Настройки);
	УстановитьПривилегированныйРежим(Ложь);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область Обмен 

Функция ВыполнитьОбмен(Приложение, ВестиПротокол) Экспорт

	БылиОшибки = Ложь;
	Попытка
		БылиОшибки = ИнтеграцияУправлениеПерсоналом.ОбработатьБудущиеСобытия(Приложение);
	Исключение
		БылиОшибки = Истина;
	КонецПопытки;
	
	ИнтеграцияУправлениеПерсоналом.ПроверитьРуководителейОрганизаций(БылиОшибки);
	
	БылиОшибкиОбмена = РезультатВыполненияОбмена(Приложение, ВестиПротокол);
	
	Возврат БылиОшибки Или БылиОшибкиОбмена;

КонецФункции

Функция РезультатВыполненияОбмена(Приложение, ВестиПротокол)

	ИменаСобытийЖР = ИнтеграцияУправлениеПерсоналом.ИменаСобытийЖР(Приложение);
	
	ВидСобытия = Перечисления.ВидыСобытийОбменаУправлениеПерсоналом.Обмен;
	СобытиеОбмена = РегистрыСведений.СобытияОбменаУпралениеПерсоналом.СобытиеОбмена(Приложение, ВидСобытия);
	СобытиеОбмена.ДатаНачала = ТекущаяДатаСеанса();
	
	ЗаписатьСобытиеНачалоОбмена(ИменаСобытийЖР);
	
	БылиОшибки = Ложь;
	Попытка
		
		МенеджерОбмена = НовыйМенеджерОбмена(Приложение, ВестиПротокол);
		
		// Проверка (устанавка) версий API и DTO для обмена,
		// при смене версий выполняем соответствующие обработчики.
		МенеджерОбмена.ПроверитьВерсиюФорматаОбмена();
		
		// Загрузка объектов объектов, которые не получилось загрузить в прошлых обменах.
		БылиОшибки = РезультатПовторнойЗагрузкиНезагруженныхОбъектов(МенеджерОбмена);
		
		// Загрузка изменений.
		БылиОшибки = РезультатЗагрузкиИзменений(МенеджерОбмена) Или БылиОшибки;
		
		// Выгрузка изменений.
		БылиОшибки = РезультатВыгрузкиИзменений(МенеджерОбмена) Или БылиОшибки;
		
	Исключение
		БылиОшибки = Истина;
		ЗаписьЖурналаРегистрации(ИменаСобытийЖР.ПрочиеСобытия,
			УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	БылиОшибки = БылиОшибки Или МенеджерОбмена.БылиОшибки Или МенеджерОбмена.МенеджерКонвертации.БылиОшибки;
	
	ЗаписатьСобытиеОкончаниеОбмена(ИменаСобытийЖР, БылиОшибки);
	
	СобытиеОбмена.ДатаОкончания = ТекущаяДатаСеанса();
	СобытиеОбмена.БылиОшибки 	= БылиОшибки;
	РегистрыСведений.СобытияОбменаУпралениеПерсоналом.ЗаписатьСобытиеОбмена(СобытиеОбмена);
	
	Возврат БылиОшибки;

КонецФункции

Функция РезультатПовторнойЗагрузкиНезагруженныхОбъектов(МенеджерОбмена)
	
	БылиОшибки = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Приложение", МенеджерОбмена.Приложение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Идентификатор КАК Идентификатор,
	|	Таблица.ТипОбъекта КАК ТипОбъекта
	|ИЗ
	|	РегистрСведений.НезагруженныеОбъектыУпралениеПерсоналом КАК Таблица
	|ГДЕ
	|	Таблица.Приложение = &Приложение
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипОбъекта";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат БылиОшибки;
	КонецЕсли;
	
	ТипОбъектаИмяВОбъектеВсеИзменения = МенеджерОбмена.МенеджерКонвертации.ТипОбъектаИмяВОбъектеВсеИзменения;
	
	Выборка = РезультатЗапроса.Выбрать();
	Идентификаторы = Новый Массив;
	Пока Выборка.СледующийПоЗначениюПоля("ТипОбъекта") Цикл
		
		ТипОбъекта = Выборка.ТипОбъекта;
		ИмяВОбъектеВсеИзменения  = ТипОбъектаИмяВОбъектеВсеИзменения[ТипОбъекта];
		Пока Выборка.Следующий() Цикл
			Идентификаторы.Добавить(Выборка.Идентификатор);
		КонецЦикла;
		
		Ответ = МенеджерОбмена.ПовторнаяЗагрузкаОбъектов(ТипОбъекта, Идентификаторы);
		Если Ответ.БылиОшибки Тогда
			БылиОшибки = Истина;
		Иначе
			Если ЗначениеЗаполнено(Ответ.ОбъектыDTO) Тогда
				Объекты = МенеджерОбмена.МенеджерКонвертации.ВыполнитьКонвертациюИзОбъектовDTO(Ответ.ОбъектыDTO, ТипОбъекта);
				ОбъектВсеИзменения = Новый Структура;
				ОбъектВсеИзменения.Вставить(ИмяВОбъектеВсеИзменения, Объекты);
				РезультатОбработки = ОбработатьЗагруженныеИзменения(МенеджерОбмена, ОбъектВсеИзменения, Истина);
				БылиОшибки = БылиОшибки Или РезультатОбработки.БылиОшибки; 
			КонецЕсли;
			Если ЗначениеЗаполнено(Ответ.НетОбъектов) Тогда
				// Идентификаторы по которым нет объектв в приложении.
				ОтменитьРегистрациюНезагруженныхОбъектов(Ответ.НетОбъектов, ТипОбъекта, МенеджерОбмена);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат БылиОшибки;

КонецФункции

Функция РезультатЗагрузкиИзменений(МенеджерОбмена)
	
	Лимит = 100;
	БылиОшибки = Ложь;
	ОбработаноОбъектов = 0;
	Приложение = МенеджерОбмена.Приложение;
	
	ПервыйЗапрос = Истина;
	Пока ПервыйЗапрос Или Не БылиОшибки И ОбработаноОбъектов = Лимит Цикл
		
		ПервыйЗапрос = Ложь;
		ОбработаноОбъектов = 0;
		
		ВерсияИзменений = РегистрыСведений.ВерсииИзмененийУправлениеПерсоналом.ВерсияИзменений(Приложение);
		Ответ = МенеджерОбмена.ЗагрузитьИзменения(ВерсияИзменений, Лимит);
		Если Ответ.БылиОшибки Тогда
			БылиОшибки = Истина;
		ИначеЕсли ЗначениеЗаполнено(Ответ.ОбъектВсеИзменения) Тогда
			ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ВсеИзменения;
			ОбъектВсеИзменения = МенеджерОбмена.МенеджерКонвертации.ВыполнитьКонвертациюИзОбъектовDTO(Ответ.ОбъектВсеИзменения, ТипОбъекта);
			РезультатОбработки = ОбработатьЗагруженныеИзменения(МенеджерОбмена, ОбъектВсеИзменения);
			БылиОшибки 			= РезультатОбработки.БылиОшибки;
			ОбработаноОбъектов 	= РезультатОбработки.ОбработаноОбъектов
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат БылиОшибки;

КонецФункции

Функция РезультатВыгрузкиИзменений(МенеджерОбмена)
	
	БылиОшибки = РезультатВыгрузкиОсновныхОбъектов(МенеджерОбмена);
	
	Возврат БылиОшибки;

КонецФункции


Функция РезультатВыгрузкиОсновныхОбъектов(МенеджерОбмена)
	
	БылиОшибки = Ложь;
	
	ДанныеДляВыгрузки = ДанныеОсновныхОбъектов(МенеджерОбмена);
	
	Приложение = МенеджерОбмена.Приложение;
	
	ТаблицаОбработано = Новый ТаблицаЗначений;
	ТаблицаОбработано.Колонки.Добавить("Ссылка");
	ТаблицаОбработано.Колонки.Добавить("ТипОбъекта");
	
	ДанныеОбъектов = ДанныеДляВыгрузки.ДанныеОбъектов;
	Если ЗначениеЗаполнено(ДанныеОбъектов) Тогда
		
		// Порядок элементов в массиве определяет порядок выгрузки объектов.
		ТипыОбъектов = ИнтеграцияУправлениеПерсоналом.ТипыОсновныхОбъектов();
		Для Индекс = 0 По ТипыОбъектов.ВГраница() Цикл
			
			ТипОбъекта = ТипыОбъектов[Индекс];
			Данные = ДанныеОбъектов[ТипОбъекта];
			Если Не ЗначениеЗаполнено(Данные) Тогда
				Продолжить;
			КонецЕсли;
			
			// Выгрузка удаления объектов.
			Если ЗначениеЗаполнено(Данные.ОбъектыКУдалению) Тогда
				РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиУдаления(Данные.ОбъектыКУдалению, ТипОбъекта);
				ДополнитьТаблицуРезультатамиВыгрузки(ТаблицаОбработано, РезультатВыгрузки, ТипОбъекта);
			КонецЕсли;
			
			// Выгрузка объектов.
			Если ЗначениеЗаполнено(Данные.ДанныеДляВыгрузки) Тогда
				РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиОбъектов(Данные.ДанныеДляВыгрузки, ТипОбъекта);
				Если ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ФизическоеЛицо Тогда
					ВыгрузитьДополнительныеДанныеФизическихЛиц(МенеджерОбмена, РезультатВыгрузки);
				КонецЕсли;
				ДополнитьТаблицуРезультатамиВыгрузки(ТаблицаОбработано, РезультатВыгрузки, ТипОбъекта);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
	Попытка
		ОтменитьРегистрациюИзменений(ДанныеДляВыгрузки, ТаблицаОбработано, Приложение);
		ОтменитьРегистрациюУсловноПубликуемыхОбъектов(Приложение);
	Исключение
		БылиОшибки = Истина;
	КонецПопытки;
	
	Возврат БылиОшибки;
	
КонецФункции

Процедура ВыгрузитьДополнительныеДанныеФизическихЛиц(МенеджерОбмена, РезультатВыгрузки)

	Приложение = МенеджерОбмена.Приложение;
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		ИнтеграцияКабинетСотрудника.ВыгрузитьДополнительныеДанныеФизическихЛиц(МенеджерОбмена, РезультатВыгрузки);
	КонецЕсли;

КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиЗагрузкиОбъектов

Функция ОбработатьЗагруженныеИзменения(МенеджерОбмена, ОбъектВсеИзменения, ПовторнаяЗагрузка = Ложь) Экспорт

	РезультатОбработки = Новый Структура("БылиОшибки,ОбработаноОбъектов,ВерсияИзменений", Ложь, 0, 0);
	
	Если МенеджерОбмена.Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		ОбработатьЗагрузкуФизическихЛиц(МенеджерОбмена, ОбъектВсеИзменения, РезультатОбработки, ПовторнаяЗагрузка);
		Если Не ПовторнаяЗагрузка Тогда
			// обработка необработанных объектов
			ОбработатьОфферы(МенеджерОбмена, ОбъектВсеИзменения, РезультатОбработки, ПовторнаяЗагрузка, Истина);
		КонецЕсли;
		ОбработатьОфферы(МенеджерОбмена, ОбъектВсеИзменения, РезультатОбработки, ПовторнаяЗагрузка, Ложь);
		ОбработатьГрафикиОтпусковПредприятия(МенеджерОбмена, ОбъектВсеИзменения, РезультатОбработки, ПовторнаяЗагрузка);
		ОбработатьГрафикиОтпусковПодразделений(МенеджерОбмена, ОбъектВсеИзменения, РезультатОбработки, ПовторнаяЗагрузка);
	Иначе
		ОбработатьЗаявки(МенеджерОбмена, ОбъектВсеИзменения, РезультатОбработки, ПовторнаяЗагрузка);
	КонецЕсли;
	
	Если Не ПовторнаяЗагрузка И РезультатОбработки.ВерсияИзменений <> 0 Тогда
		РегистрыСведений.ВерсииИзмененийУправлениеПерсоналом.ЗаписатьВерсиюИзменений(МенеджерОбмена.Приложение, РезультатОбработки.ВерсияИзменений);
	КонецЕсли;
	
	Возврат РезультатОбработки;

КонецФункции

Процедура ОбработатьЗаявки(МенеджерОбмена, ОбъектВсеИзменения, РезультатОбработки, ПовторнаяЗагрузка)

	ВерсияИзменений = РезультатОбработки.ВерсияИзменений;
	Приложение 		= МенеджерОбмена.Приложение;
	ИменаСобытийЖР 	= МенеджерОбмена.ИменаСобытийЖР;
	ТипОбъектаИмяВОбъектеВсеИзменения = МенеджерОбмена.МенеджерКонвертации.ТипОбъектаИмяВОбъектеВсеИзменения;
	
	ТаблицаЗаявок = Новый ТаблицаЗначений;
	ТаблицаЗаявок.Колонки.Добавить("Объект");
	ТаблицаЗаявок.Колонки.Добавить("ВерсияИзменений", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	ТаблицаЗаявок.Колонки.Добавить("ТипЗаявки", 			Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЗаявокКабинетСотрудника"));
	ТаблицаЗаявок.Колонки.Добавить("ПричинаОтсутствия", 	Новый ОписаниеТипов("ПеречислениеСсылка.ПричиныОтсутствийЗаявокКабинетСотрудника"));
	ТаблицаЗаявок.Колонки.Добавить("ИдентификаторЗаявки", 	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТаблицаЗаявок.Колонки.Добавить("ФизическоеЛицо", 		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаЗаявок.Колонки.Добавить("ТипОбъекта", 			Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОбъектовИнтеграцияУпралениеПерсоналом"));
	ТаблицаЗаявок.Колонки.Добавить("ОписаниеОшибки");
	
	// ЗапросСправки2НДФЛ
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ЗапросСправки2НДФЛ;
	ИмяКоллекции = ТипОбъектаИмяВОбъектеВсеИзменения[ТипОбъекта];
	Объекты = Неопределено;
	Если ОбъектВсеИзменения.Свойство(ИмяКоллекции, Объекты) Тогда 
		 Для каждого Объект Из Объекты Цикл 
			НоваяСтрока = ТаблицаЗаявок.Добавить(); 
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Объект);
			НоваяСтрока.Объект 				= Объект;
			НоваяСтрока.ТипЗаявки 			= Перечисления.ТипыЗаявокКабинетСотрудника.СправкаНДФЛ;
			НоваяСтрока.ОписаниеОшибки 		= ОшибкиКонвертацииОбъекта(Объект);
			НоваяСтрока.ТипОбъекта 			= ТипОбъекта;
		КонецЦикла;
	КонецЕсли;
	
	// ЗапросСправкиСМестаРаботы
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ЗапросСправкиСМестаРаботы;
	ИмяКоллекции = ТипОбъектаИмяВОбъектеВсеИзменения[ТипОбъекта];
	Объекты = Неопределено;
	Если ОбъектВсеИзменения.Свойство(ИмяКоллекции, Объекты) Тогда 
		 Для каждого Объект Из Объекты Цикл 
			НоваяСтрока = ТаблицаЗаявок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Объект);
			НоваяСтрока.Объект 				= Объект;
			НоваяСтрока.ТипЗаявки 			= Перечисления.ТипыЗаявокКабинетСотрудника.СправкаСМестаРаботы;
			НоваяСтрока.ОписаниеОшибки 		= ОшибкиКонвертацииОбъекта(Объект);
			НоваяСтрока.ТипОбъекта 			= ТипОбъекта;
		КонецЦикла;
	КонецЕсли;
	
	СписокФизическихЛиц = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаЗаявок, "ФизическоеЛицо", Истина);
	// В таблицу ТаблицаЗаявок будет добавлена колонка "ИмяТаблицы".
	ПараметрыЗаявок = ИнтеграцияУправлениеПерсоналомСлужебный.ПараметрыСозданияЗаявок(СписокФизическихЛиц, ТаблицаЗаявок);

	ТаблицаЗаявок.Колонки.Добавить("Вложения");
	ТаблицаЗаявок.Колонки.Добавить("ЭлектронныйДокумент");
	Для каждого СтрокаТЗ Из ТаблицаЗаявок Цикл
		
		ВерсияИзменений = Макс(ВерсияИзменений, СтрокаТЗ.ВерсияИзменений);
		
		Объект = СтрокаТЗ.Объект;
		
		// проверка повторной регистрации заявки
		РезультатРегистрацииЗаявки = ПараметрыЗаявок.ЗарегистрированныеЗаявки[СтрокаТЗ.ИдентификаторЗаявки];
		Если РезультатРегистрацииЗаявки <> Неопределено Тогда
			// заявка с таким идентификатором уже зарегистрирована
			ЗаявкаЗарегистрирована = Истина;
			Если ТипЗнч(РезультатРегистрацииЗаявки) = Тип("Массив") Тогда
				// есть заявки с дополнительной идентификацией
				Если ЗначениеЗаполнено(Объект.ИдентификаторЭлектронногоДокумента)
					И РезультатРегистрацииЗаявки.Найти(Объект.ИдентификаторЭлектронногоДокумента) = Неопределено Тогда
					ЗаявкаЗарегистрирована = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ЗаявкаЗарегистрирована Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЗ.ОписаниеОшибки) Тогда
			РезультатОбработки.БылиОшибки = Истина; 
			ОписаниеОшибки = ОписаниеОшибкиКонвертации(СтрокаТЗ.ОписаниеОшибки);
			ЗарегистрироватьОшибкуКонвертацииОбъекта(ИменаСобытийЖР, СтрокаТЗ.ТипОбъекта, СтрокаТЗ.ИдентификаторЗаявки, ОписаниеОшибки);
			ЗарегистрироватьНезагруженныйОбъект(МенеджерОбмена, СтрокаТЗ.ИдентификаторЗаявки, СтрокаТЗ.ТипОбъекта, ОписаниеОшибки);
			Продолжить;
		КонецЕсли;
		
		ОписаниеОшибокПолученияФайлов  = "";
		Вложения = Новый Массив;
		Если Объект.Свойство("Вложения") И ЗначениеЗаполнено(Объект.Вложения) Тогда
			Ответ = ПолучитьВложения(МенеджерОбмена, Объект.Вложения);
			Если ЗначениеЗаполнено(Ответ.ОписаниеОшибки) Тогда
				ОписаниеОшибокПолученияФайлов = Ответ.ОписаниеОшибки;
			КонецЕсли;
			Если ЗначениеЗаполнено(Ответ.Вложения) Тогда
				Вложения = Ответ.Вложения;
			КонецЕсли;
		КонецЕсли;
		СтрокаТЗ.Вложения = Вложения;
		
		ЭлектронныйДокумент = Неопределено;
		Если Объект.Свойство("ЭлектронныйДокумент") И ЗначениеЗаполнено(Объект.ЭлектронныйДокумент) Тогда
			Ответ = ЗагрузитьФайл(МенеджерОбмена, Объект.ЭлектронныйДокумент.ИсходныйДокумент);
			Если ЗначениеЗаполнено(Ответ.ОписаниеОшибки) Тогда
				Если ПустаяСтрока(ОписаниеОшибокПолученияФайлов) Тогда
					ОписаниеОшибокПолученияФайлов = Ответ.ОписаниеОшибки; 
				Иначе
					ОписаниеОшибокПолученияФайлов = СтрШаблон("%1%2%3",ОписаниеОшибокПолученияФайлов,  Символы.ПС,  Ответ.ОписаниеОшибки);
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(Ответ.ОписаниеФайла) Тогда
				ЭлектронныйДокумент = Ответ.ОписаниеФайла;
			КонецЕсли;
		КонецЕсли;
		СтрокаТЗ.ЭлектронныйДокумент = ЭлектронныйДокумент;
		
		Если ЗначениеЗаполнено(ОписаниеОшибокПолученияФайлов) Тогда
			РезультатОбработки.БылиОшибки = Истина;
			ЗарегистрироватьОшибкуОбработкиОбъекта(ИменаСобытийЖР, СтрокаТЗ.ТипОбъекта, СтрокаТЗ.ИдентификаторЗаявки, ОписаниеОшибокПолученияФайлов);
			ЗарегистрироватьНезагруженныйОбъект(МенеджерОбмена, СтрокаТЗ.ИдентификаторЗаявки, СтрокаТЗ.ТипОбъекта, ОписаниеОшибокПолученияФайлов);
			Продолжить;
		КонецЕсли;
		
		Попытка
			ИнтеграцияУправлениеПерсоналомСлужебный.СоздатьЗаявку(СтрокаТЗ, ПараметрыЗаявок);
			Если ПовторнаяЗагрузка Тогда
				ОтменитьРегистрациюНезагруженныхОбъектов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаТЗ.ИдентификаторЗаявки), ТипОбъекта, МенеджерОбмена);
			КонецЕсли;
		Исключение 
			РезультатОбработки.БылиОшибки = Истина;
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗарегистрироватьОшибкуОбработкиОбъекта(ИменаСобытийЖР, СтрокаТЗ.ТипОбъекта, СтрокаТЗ.ИдентификаторЗаявки, ПодробноеПредставлениеОшибки);
			ЗарегистрироватьНезагруженныйОбъект(МенеджерОбмена, СтрокаТЗ.ИдентификаторЗаявки, СтрокаТЗ.ТипОбъекта, ПодробноеПредставлениеОшибки);
		КонецПопытки;
		
	КонецЦикла;
	
	РезультатОбработки.ОбработаноОбъектов = РезультатОбработки.ОбработаноОбъектов + ТаблицаЗаявок.Количество();
	РезультатОбработки.ВерсияИзменений = ВерсияИзменений;
	
КонецПроцедуры

Процедура ОбработатьГрафикиОтпусковПредприятия(МенеджерОбмена, ОбъектВсеИзменения, РезультатОбработки, ПовторнаяЗагрузка)

	ВерсияИзменений = РезультатОбработки.ВерсияИзменений;
	Приложение 		= МенеджерОбмена.Приложение;
	ИменаСобытийЖР 	= МенеджерОбмена.ИменаСобытийЖР;
	ТипОбъектаИмяВОбъектеВсеИзменения = МенеджерОбмена.МенеджерКонвертации.ТипОбъектаИмяВОбъектеВсеИзменения;
	
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("Объект");
	ТаблицаОбъектов.Колонки.Добавить("ВерсияИзменений", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	ТаблицаОбъектов.Колонки.Добавить("ИдентификаторДокумента", 	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТаблицаОбъектов.Колонки.Добавить("ОписаниеОшибки");
	
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ГрафикОтпусковПредприятия;
	ИмяКоллекции = ТипОбъектаИмяВОбъектеВсеИзменения[ТипОбъекта];
	Объекты = Неопределено;
	Если ОбъектВсеИзменения.Свойство(ИмяКоллекции, Объекты) Тогда
		Для каждого Объект Из Объекты Цикл 
			НоваяСтрока = ТаблицаОбъектов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Объект);
			НоваяСтрока.Объект 					= Объект;
			НоваяСтрока.ОписаниеОшибки 			= ОшибкиКонвертацииОбъекта(Объект);
		КонецЦикла;
	Иначе
		Возврат;
	КонецЕсли;
	
	МодульСборГрафиковОтпусков = Неопределено;
	ИдентификаторыДокументы = Новый Массив;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.СборГрафиковОтпусков") Тогда
		МодульСборГрафиковОтпусков = ОбщегоНазначения.ОбщийМодуль("СборГрафиковОтпусков");
		Идентификаторы = ТаблицаОбъектов.ВыгрузитьКолонку("ИдентификаторДокумента");
		ИдентификаторыДокументы = ИнтеграцияУправлениеПерсоналомСлужебный.ДокументыСборГрафиковОтпусковПоИдентификаторам(Идентификаторы, МодульСборГрафиковОтпусков);
	КонецЕсли;
	
	Для каждого СтрокаТЗ Из ТаблицаОбъектов Цикл
		
		ВерсияИзменений = ?(ВерсияИзменений < СтрокаТЗ.ВерсияИзменений, СтрокаТЗ.ВерсияИзменений, ВерсияИзменений);
		Объект = СтрокаТЗ.Объект;
		Если МодульСборГрафиковОтпусков = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторДокумента = СтрокаТЗ.ИдентификаторДокумента;
		Если Не ЗначениеЗаполнено(ИдентификаторДокумента) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЗ.ОписаниеОшибки) Тогда
			РезультатОбработки.БылиОшибки = Истина;
			ОписаниеОшибки = ОписаниеОшибкиКонвертации(СтрокаТЗ.ОписаниеОшибки);
			ЗарегистрироватьОшибкуКонвертацииОбъекта(ИменаСобытийЖР, ТипОбъекта, ИдентификаторДокумента, ОписаниеОшибки);
			ЗарегистрироватьНезагруженныйОбъект(МенеджерОбмена, ИдентификаторДокумента, ТипОбъекта, ОписаниеОшибки);
			Продолжить;
		КонецЕсли;
		
		Попытка
			ИнтеграцияУправлениеПерсоналомСлужебный.ЗагрузитьСборГрафиковОтпусковПредприятия(Объект, ИдентификаторыДокументы, МодульСборГрафиковОтпусков);
			Если ПовторнаяЗагрузка Тогда
				ОтменитьРегистрациюНезагруженныхОбъектов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторДокумента), ТипОбъекта, МенеджерОбмена);
			КонецЕсли;
		Исключение
			РезультатОбработки.БылиОшибки = Истина;
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗарегистрироватьОшибкуОбработкиОбъекта(ИменаСобытийЖР, ТипОбъекта, ИдентификаторДокумента, ПодробноеПредставлениеОшибки);
			ЗарегистрироватьНезагруженныйОбъект(МенеджерОбмена, ИдентификаторДокумента, ТипОбъекта, ПодробноеПредставлениеОшибки);
		КонецПопытки;
	
	КонецЦикла;
		
	РезультатОбработки.ОбработаноОбъектов = РезультатОбработки.ОбработаноОбъектов + ТаблицаОбъектов.Количество();
	РезультатОбработки.ВерсияИзменений = ВерсияИзменений;

КонецПроцедуры

Процедура ОбработатьГрафикиОтпусковПодразделений(МенеджерОбмена, ОбъектВсеИзменения, РезультатОбработки, ПовторнаяЗагрузка)
	
	ВерсияИзменений = РезультатОбработки.ВерсияИзменений;
	Приложение 		= МенеджерОбмена.Приложение;
	ИменаСобытийЖР 	= МенеджерОбмена.ИменаСобытийЖР;
	ТипОбъектаИмяВОбъектеВсеИзменения = МенеджерОбмена.МенеджерКонвертации.ТипОбъектаИмяВОбъектеВсеИзменения;
	
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("Объект");
	ТаблицаОбъектов.Колонки.Добавить("ВерсияИзменений", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	ТаблицаОбъектов.Колонки.Добавить("ИдентификаторДокумента", 	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТаблицаОбъектов.Колонки.Добавить("ОписаниеОшибки");
	
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ГрафикОтпусковПодразделения;
	ИмяКоллекции = ТипОбъектаИмяВОбъектеВсеИзменения[ТипОбъекта];
	Объекты = Неопределено;
	Если ОбъектВсеИзменения.Свойство(ИмяКоллекции, Объекты) Тогда
		
		Для каждого Объект Из Объекты Цикл 
			
			ОшибкиКонвертацииОбъекта = ОшибкиКонвертацииОбъекта(Объект);
			Если Объект.Свойство("Периоды") Тогда
				Для каждого ЗаписьПериода Из Объект.Периоды Цикл
					ОшибкиКонвертации = ОшибкиКонвертацииОбъекта(ЗаписьПериода);
					Если ЗначениеЗаполнено(ОшибкиКонвертации) Тогда
						ОшибкиКонвертацииОбъекта.Добавить(ОшибкиКонвертации);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаОбъектов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Объект);
			НоваяСтрока.Объект 					= Объект;
			НоваяСтрока.ОписаниеОшибки 			= ОшибкиКонвертацииОбъекта;
			
		КонецЦикла;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	МодульСборГрафиковОтпусков = Неопределено;
	ИдентификаторыДокументы = Новый Массив;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.СборГрафиковОтпусков") Тогда
		МодульСборГрафиковОтпусков = ОбщегоНазначения.ОбщийМодуль("СборГрафиковОтпусков");
		Идентификаторы = ТаблицаОбъектов.ВыгрузитьКолонку("ИдентификаторДокумента");
		ИдентификаторыДокументы = ИнтеграцияУправлениеПерсоналомСлужебный.ДокументыСборГрафиковОтпусковПоИдентификаторам(Идентификаторы, МодульСборГрафиковОтпусков);
	КонецЕсли;
	
	Для каждого СтрокаТЗ Из ТаблицаОбъектов Цикл
		
		ВерсияИзменений = ?(ВерсияИзменений < СтрокаТЗ.ВерсияИзменений, СтрокаТЗ.ВерсияИзменений, ВерсияИзменений);
		Если МодульСборГрафиковОтпусков = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Объект = СтрокаТЗ.Объект;
		
		ИдентификаторДокумента = СтрокаТЗ.ИдентификаторДокумента;
		Если Не ЗначениеЗаполнено(ИдентификаторДокумента) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЗ.ОписаниеОшибки) Тогда
			РезультатОбработки.БылиОшибки = Истина;
			ОписаниеОшибки = ОписаниеОшибкиКонвертации(СтрокаТЗ.ОписаниеОшибки);
			ЗарегистрироватьОшибкуКонвертацииОбъекта(ИменаСобытийЖР, ТипОбъекта, ИдентификаторДокумента, ОписаниеОшибки);
			ЗарегистрироватьНезагруженныйОбъект(МенеджерОбмена, ИдентификаторДокумента, ТипОбъекта, ОписаниеОшибки);
			Продолжить;
		КонецЕсли;
		
		Попытка
			ИнтеграцияУправлениеПерсоналомСлужебный.ЗагрузитьСборГрафиковОтпусковПодразделения(Объект, ИдентификаторыДокументы, МодульСборГрафиковОтпусков);
			Если ПовторнаяЗагрузка Тогда
				ОтменитьРегистрациюНезагруженныхОбъектов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторДокумента), ТипОбъекта, МенеджерОбмена);
			КонецЕсли;
		Исключение
			РезультатОбработки.БылиОшибки = Истина;
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗарегистрироватьОшибкуОбработкиОбъекта(ИменаСобытийЖР, ТипОбъекта, ИдентификаторДокумента, ПодробноеПредставлениеОшибки);
			ЗарегистрироватьНезагруженныйОбъект(МенеджерОбмена, ИдентификаторДокумента, ТипОбъекта, ПодробноеПредставлениеОшибки);
		КонецПопытки;
	
	КонецЦикла;
		
	РезультатОбработки.ОбработаноОбъектов = РезультатОбработки.ОбработаноОбъектов + ТаблицаОбъектов.Количество();
	РезультатОбработки.ВерсияИзменений = ВерсияИзменений;

КонецПроцедуры

Процедура ОбработатьЗагрузкуФизическихЛиц(МенеджерОбмена, ОбъектВсеИзменения, РезультатОбработки, ПовторнаяЗагрузка)

	ВерсияИзменений = РезультатОбработки.ВерсияИзменений;
	Приложение 		= МенеджерОбмена.Приложение;
	ИменаСобытийЖР 	= МенеджерОбмена.ИменаСобытийЖР;
	ТипОбъектаИмяВОбъектеВсеИзменения = МенеджерОбмена.МенеджерКонвертации.ТипОбъектаИмяВОбъектеВсеИзменения;
	
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("Объект");
	ТаблицаОбъектов.Колонки.Добавить("ВерсияИзменений", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	ТаблицаОбъектов.Колонки.Добавить("Идентификатор", 	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТаблицаОбъектов.Колонки.Добавить("ОписаниеОшибки");
	
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ФизическоеЛицо;
	ИмяКоллекции = ТипОбъектаИмяВОбъектеВсеИзменения[ТипОбъекта];
	Объекты = Неопределено;
	Если ОбъектВсеИзменения.Свойство(ИмяКоллекции, Объекты) Тогда
		Для каждого Объект Из Объекты Цикл 
			НоваяСтрока = ТаблицаОбъектов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Объект);
			НоваяСтрока.Объект 			= Объект;
			НоваяСтрока.Идентификатор 	= Объект.ФизическоеЛицо;
			НоваяСтрока.ОписаниеОшибки 	= ОшибкиКонвертацииОбъекта(Объект);
		КонецЦикла;
	Иначе
		Возврат;
	КонецЕсли;
	
	Идентификаторы = ТаблицаОбъектов.ВыгрузитьКолонку("Идентификатор");
	ИдентификаторСсылка = ПубличныйИдентификаторСсылка(Идентификаторы, ТипОбъекта);
	
	Для каждого СтрокаТЗ Из ТаблицаОбъектов Цикл
		
		ВерсияИзменений = ?(ВерсияИзменений < СтрокаТЗ.ВерсияИзменений, СтрокаТЗ.ВерсияИзменений, ВерсияИзменений);
		
		Объект = СтрокаТЗ.Объект;
		Идентификатор = СтрокаТЗ.Идентификатор;
		
		Если ЗначениеЗаполнено(СтрокаТЗ.ОписаниеОшибки) Тогда
			РезультатОбработки.БылиОшибки = Истина;
			ОписаниеОшибки = ОписаниеОшибкиКонвертации(СтрокаТЗ.ОписаниеОшибки);
			ЗарегистрироватьОшибкуКонвертацииОбъекта(ИменаСобытийЖР, ТипОбъекта, Идентификатор, ОписаниеОшибки);
			ЗарегистрироватьНезагруженныйОбъект(МенеджерОбмена, Идентификатор, ТипОбъекта, ОписаниеОшибки);
			Продолжить;
		КонецЕсли;
		
		Если Объект.Свойство("Фотография") И ЗначениеЗаполнено(Объект.Фотография) Тогда
			Ответ = ЗагрузитьФайл(МенеджерОбмена, Объект.Фотография);
			Если ЗначениеЗаполнено(Ответ.ОписаниеОшибки) Тогда
				РезультатОбработки.БылиОшибки = Истина;
				ЗарегистрироватьОшибкуОбработкиОбъекта(ИменаСобытийЖР, ТипОбъекта, Идентификатор, Ответ.ОписаниеОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Ответ.ОписаниеФайла) Тогда
				Объект.Фотография = Ответ.ОписаниеФайла;
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			ИнтеграцияУправлениеПерсоналомСлужебный.ЗагрузитьФизическоеЛицо(Объект, ИдентификаторСсылка); 
			Если ПовторнаяЗагрузка Тогда
				ОтменитьРегистрациюНезагруженныхОбъектов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификатор), ТипОбъекта, МенеджерОбмена);
			КонецЕсли;
		Исключение
			РезультатОбработки.БылиОшибки = Истина;
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗарегистрироватьОшибкуОбработкиОбъекта(ИменаСобытийЖР, ТипОбъекта, Идентификатор, ПодробноеПредставлениеОшибки);
			ЗарегистрироватьНезагруженныйОбъект(МенеджерОбмена, Идентификатор, ТипОбъекта, ПодробноеПредставлениеОшибки);
		КонецПопытки;
	
	КонецЦикла;
	
	РезультатОбработки.ОбработаноОбъектов = РезультатОбработки.ОбработаноОбъектов + ТаблицаОбъектов.Количество();
	РезультатОбработки.ВерсияИзменений = ВерсияИзменений;

КонецПроцедуры

Процедура ОбработатьОфферы(МенеджерОбмена, ОбъектВсеИзменения, РезультатОбработки, ПовторнаяЗагрузка, ПовторнаяОбработка)

	ВерсияИзменений = РезультатОбработки.ВерсияИзменений;
	Приложение 		= МенеджерОбмена.Приложение;
	ИменаСобытийЖР 	= МенеджерОбмена.ИменаСобытийЖР;
	ТипОбъектаИмяВОбъектеВсеИзменения = МенеджерОбмена.МенеджерКонвертации.ТипОбъектаИмяВОбъектеВсеИзменения;
	
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("Объект");
	ТаблицаОбъектов.Колонки.Добавить("ВерсияИзменений", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	ТаблицаОбъектов.Колонки.Добавить("ИдентификаторДокумента", 	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТаблицаОбъектов.Колонки.Добавить("ИдентификаторКандидата", 	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТаблицаОбъектов.Колонки.Добавить("ОписаниеОшибки");
	
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.Оффер;
	Если ПовторнаяОбработка Тогда
		НеобработанныеОбъекты = НеобработанныеОбъекты(Приложение, ТипОбъекта);
		Для каждого Объект Из НеобработанныеОбъекты Цикл 
			НоваяСтрока = ТаблицаОбъектов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Объект);
			НоваяСтрока.Объект 					= Объект;
			НоваяСтрока.ИдентификаторКандидата 	= Объект.Кандидат;
			НоваяСтрока.ОписаниеОшибки 			= ОшибкиКонвертацииОбъекта(Объект);
		КонецЦикла;
		Если Не ЗначениеЗаполнено(ТаблицаОбъектов) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ИмяКоллекции = ТипОбъектаИмяВОбъектеВсеИзменения[ТипОбъекта];
		Объекты = Неопределено;
		Если ОбъектВсеИзменения.Свойство(ИмяКоллекции, Объекты) Тогда
			Для каждого Объект Из Объекты Цикл 
				НоваяСтрока = ТаблицаОбъектов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Объект);
				НоваяСтрока.Объект 					= Объект;
				НоваяСтрока.ИдентификаторКандидата 	= Объект.Кандидат;
				НоваяСтрока.ОписаниеОшибки 			= ОшибкиКонвертацииОбъекта(Объект);
			КонецЦикла;
		Иначе
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	ИдентификаторыДокументов = ТаблицаОбъектов.ВыгрузитьКолонку("ИдентификаторДокумента");
	ИдентификаторСсылка = ИнтеграцияУправлениеПерсоналомСлужебный.ОфферИдентификаторДокументаСсылка(ИдентификаторыДокументов);
	
	ИдентификаторыКандидатов = ТаблицаОбъектов.ВыгрузитьКолонку("ИдентификаторКандидата");
	ИдентификаторКандидатаСсылка = ПубличныйИдентификаторСсылка(ИдентификаторыКандидатов, Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ФизическоеЛицо);
	
	Для каждого СтрокаТЗ Из ТаблицаОбъектов Цикл
		
		Если Не ПовторнаяОбработка Тогда
			ВерсияИзменений = ?(ВерсияИзменений < СтрокаТЗ.ВерсияИзменений, СтрокаТЗ.ВерсияИзменений, ВерсияИзменений);
		КонецЕсли;
		
		Объект = СтрокаТЗ.Объект;
		ИдентификаторДокумента = СтрокаТЗ.ИдентификаторДокумента;
		
		Если ЗначениеЗаполнено(ИдентификаторСсылка[ИдентификаторДокумента]) Тогда
			// Объект уже загружен, пропускаем.
			Если ПовторнаяОбработка Тогда
				УдалитьНеобработанныйОбъект(ИдентификаторДокумента, ТипОбъекта, МенеджерОбмена);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЗ.ОписаниеОшибки) Тогда
			РезультатОбработки.БылиОшибки = Истина;
			ОписаниеОшибки = ОписаниеОшибкиКонвертации(СтрокаТЗ.ОписаниеОшибки);
			ЗарегистрироватьОшибкуКонвертацииОбъекта(ИменаСобытийЖР, ТипОбъекта, ИдентификаторДокумента, ОписаниеОшибки);
			ЗарегистрироватьНезагруженныйОбъект(МенеджерОбмена, ИдентификаторДокумента, ТипОбъекта, ОписаниеОшибки);
			Если ПовторнаяОбработка Тогда
				УдалитьНеобработанныйОбъект(ИдентификаторДокумента, ТипОбъекта, МенеджерОбмена);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Кандидат = ИдентификаторКандидатаСсылка[Объект.Кандидат];
		Если Кандидат = Неопределено Тогда
			// Еще нет физическго лица, откладываем обработку объекта.
			Если Не ПовторнаяОбработка Тогда
				ШаблонОписания = НСтр("ru = 'Физическое лицо с идентификатором %1 еще не загружено.'");
				Описание = СтрШаблон(ШаблонОписания, Объект.Кандидат);
				ЗарегистрироватьНеобработанныйОбъект(ИдентификаторДокумента, Объект, ТипОбъекта, Описание, МенеджерОбмена);
			КонецЕсли;
			Продолжить;
		Иначе
			Объект.Кандидат = Кандидат;
			Если ПовторнаяОбработка Тогда
				УдалитьНеобработанныйОбъект(ИдентификаторДокумента, ТипОбъекта, МенеджерОбмена);
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			ИнтеграцияУправлениеПерсоналомСлужебный.ЗагрузитьОффер(Объект);
			Если ПовторнаяЗагрузка Тогда
				ОтменитьРегистрациюНезагруженныхОбъектов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторДокумента), ТипОбъекта, МенеджерОбмена);
			КонецЕсли;
		Исключение
			РезультатОбработки.БылиОшибки = Истина;
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗарегистрироватьОшибкуОбработкиОбъекта(ИменаСобытийЖР, ТипОбъекта, ИдентификаторДокумента, ПодробноеПредставлениеОшибки);
			ЗарегистрироватьНезагруженныйОбъект(МенеджерОбмена, ИдентификаторДокумента, ТипОбъекта, ПодробноеПредставлениеОшибки);
		КонецПопытки;
	
	КонецЦикла;
	
	Если Не ПовторнаяОбработка Тогда
		РезультатОбработки.ОбработаноОбъектов = РезультатОбработки.ОбработаноОбъектов + ТаблицаОбъектов.Количество();
		РезультатОбработки.ВерсияИзменений = ВерсияИзменений;
	КонецЕсли;

КонецПроцедуры

Процедура ЗарегистрироватьНезагруженныйОбъект(МенеджерОбмена, Идентификатор, ТипОбъекта, Описание)
	
	Приложение 		= МенеджерОбмена.Приложение;
	ИменаСобытийЖР 	= МенеджерОбмена.ИменаСобытийЖР;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НезагруженныеОбъектыУпралениеПерсоналом");
		ЭлементБлокировки.УстановитьЗначение("Идентификатор", Идентификатор);
		ЭлементБлокировки.УстановитьЗначение("Приложение", Приложение);
		ЭлементБлокировки.УстановитьЗначение("ТипОбъекта", ТипОбъекта);
		Блокировка.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.НезагруженныеОбъектыУпралениеПерсоналом.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Идентификатор 	= Идентификатор;
		МенеджерЗаписи.Приложение 		= Приложение;
		МенеджерЗаписи.ТипОбъекта 		= ТипОбъекта;
		МенеджерЗаписи.Описание 		= Описание;
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		Описание = НСтр("ru = 'Ошибка регистрации незагруженного объекта.'");
		ЗаписатьОшибку(ИменаСобытийЖР, Описание, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура ОтменитьРегистрациюНезагруженныхОбъектов(Идентификаторы, ТипОбъекта, МенеджерОбмена)

	Приложение 		= МенеджерОбмена.Приложение;
	ИменаСобытийЖР 	= МенеджерОбмена.ИменаСобытийЖР;
	
	ТаблицаИдентификаторов = Новый ТаблицаЗначений;
	ТаблицаИдентификаторов.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТаблицаИдентификаторов.Колонки.Добавить("ТипОбъекта", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОбъектовИнтеграцияУпралениеПерсоналом"));
	ТаблицаИдентификаторов.Колонки.Добавить("Приложение", Новый ОписаниеТипов("ПеречислениеСсылка.ПриложенияДляИнтеграции"));
	Для каждого Идентификатор Из Идентификаторы Цикл
		НоваяСтрока = ТаблицаИдентификаторов.Добавить();
		НоваяСтрока.Идентификатор 	= Идентификатор;
		НоваяСтрока.ТипОбъекта 		= ТипОбъекта;
		НоваяСтрока.Приложение 		= Приложение;
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НезагруженныеОбъектыУпралениеПерсоналом");
		ЭлементБлокировки.ИсточникДанных = ТаблицаИдентификаторов;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Идентификатор", "Идентификатор");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Приложение", "Приложение");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТЗ Из ТаблицаИдентификаторов Цикл
			МенеджерЗаписи = РегистрыСведений.НезагруженныеОбъектыУпралениеПерсоналом.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Идентификатор 	= Идентификатор;
			МенеджерЗаписи.Приложение 		= Приложение;
			МенеджерЗаписи.ТипОбъекта 		= ТипОбъекта;
			МенеджерЗаписи.Удалить();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		Описание = НСтр("ru = 'Ошибка отмены регистрации незагруженных объектов.'");
		ЗаписатьОшибку(ИменаСобытийЖР, Описание, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

КонецПроцедуры

Функция ОшибкиКонвертацииОбъекта(Объект)
	
	ОшибкиКонвертации = Новый Массив;
	
	ОшибкиКонвертацииСсылки = Неопределено;
	Если Объект.Свойство("ОшибкиКонвертацииСсылки", ОшибкиКонвертацииСсылки) Тогда
		ОшибкиКонвертации.Добавить(НСтр("ru = 'Ошибка конвертации ссылки'"));
		ОшибкиКонвертации.Добавить(ОшибкиКонвертацииСсылки);
	КонецЕсли;
	ОшибкиЗаполнения = Неопределено;
	Если Объект.Свойство("ОшибкиЗаполнения", ОшибкиЗаполнения) Тогда
		ОшибкиКонвертации.Добавить(НСтр("ru = 'Ошибка проверки заполнения'"));
		ОшибкиКонвертации.Добавить(ОшибкиЗаполнения);
	КонецЕсли;
	
	Возврат ОшибкиКонвертации;

КонецФункции

Функция ПолучитьВложения(МенеджерОбмена, Вложения)
	
	Результат = Новый Структура("Вложения,ОписаниеОшибки");
	
	ОписанияФайлов = Новый Массив;
	ОписаниеОшибки  = "";
	Для Каждого ОбъектФайл Из Вложения Цикл
		Ответ = ЗагрузитьФайл(МенеджерОбмена, ОбъектФайл);
		Если ЗначениеЗаполнено(Ответ.ОписаниеФайла) Тогда
			ОписанияФайлов.Добавить(Ответ.ОписаниеФайла);
		КонецЕсли;
		Если ЗначениеЗаполнено(Ответ.ОписаниеОшибки) Тогда
			ОписаниеОшибки = СтрШаблон("%1%2%3",ОписаниеОшибки, Символы.ПС, Ответ.ОписаниеОшибки);
		КонецЕсли;
	КонецЦикла;
	
	Результат.Вложения 			= ОписанияФайлов;
	Результат.ОписаниеОшибки 	= ОписаниеОшибки;
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьФайл(МенеджерОбмена, ОбъектФайл)
	
	Результат = Новый Структура("ОписаниеФайла,ОписаниеОшибки");
	
	ОписаниеФайла = Неопределено;
	Ответ = МенеджерОбмена.РезультатЗагрузкиФайла(ОбъектФайл.ИдентификаторФайла);
	Если ЗначениеЗаполнено(Ответ.ДвоичныеДанныеФайла) Тогда
		ОписаниеФайла = Новый Структура("ИмяФайла,РасширениеФайла,ДвоичныеДанные,ХешСумма");
		ОписаниеФайла.ИмяФайла 			= ЗаменитьЗапрещенныеСимволыВИмениФайла(ОбъектФайл.ИмяФайла);
		ОписаниеФайла.РасширениеФайла 	= ОбъектФайл.Расширение;
		ОписаниеФайла.ДвоичныеДанные 	= Ответ.ДвоичныеДанныеФайла;
		ХешСумма = Неопределено;
		Если ОбъектФайл.Свойство("ХешСумма", ХешСумма) Тогда
			ОписаниеФайла.ХешСумма = ХешСумма;
		КонецЕсли;
	КонецЕсли;
	
	Результат.ОписаниеФайла 	= ОписаниеФайла;
	Результат.ОписаниеОшибки 	= Ответ.ОписаниеОшибки;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаменитьЗапрещенныеСимволыВИмениФайла(ИсходнаяСтрока, ЗаменятьНа = "_")
	
	ЗапрещенныеСимволы = СтрРазделить("@,\,/,:,*,?,"",<,>,|,+", ",");
	
	СтрокаПослеЗамены = СокрЛП(ИсходнаяСтрока);
	
	Для Каждого ЗапрещенныйСимвол Из ЗапрещенныеСимволы Цикл
		СтрокаПослеЗамены = СтрЗаменить(СтрокаПослеЗамены, ЗапрещенныйСимвол, ЗаменятьНа);
	КонецЦикла;
	
	Если СтрЗаканчиваетсяНа(СтрокаПослеЗамены, ".") Тогда
		СтрокаПослеЗамены = Лев(СтрокаПослеЗамены, СтрДлина(СтрокаПослеЗамены) - 1) + ЗаменятьНа;
	КонецЕсли;
	
	Возврат СтрокаПослеЗамены;
	
КонецФункции

#КонецОбласти

#Область РегистрацияОтменаРегистрацииИзменений

Процедура ОтменитьРегистрациюИзменений(Данные, ТаблицаОбработано, Приложение) Экспорт
	
	ОтменитьРегистрацию = Данные.ОтменитьРегистрацию;
	ТаблицаИзменений 	= Данные.ТаблицаИзменений;
	Если ЗначениеЗаполнено(ТаблицаОбработано) Тогда
		ТаблицаИзменений.Индексы.Добавить("Ссылка,ТипОбъекта");
		Отбор = Новый Структура("Ссылка,ТипОбъекта");
		Для каждого СтрокаТЗ Из ТаблицаОбработано Цикл
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЗ);
			НайденныеСтроки = ТаблицаИзменений.НайтиСтроки(Отбор);
			ВерсияДанных = "";
			Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
				ВерсияДанных = НайденныеСтроки[0].ВерсияДанных;
			КонецЕсли;
			НоваяСтрока = ОтменитьРегистрацию.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			НоваяСтрока.ВерсияДанных = ВерсияДанных;
		КонецЦикла;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ОтменитьРегистрацию) Тогда
		Возврат;
	КонецЕсли;
	
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		ИмяТаблицы = "РегистрСведений.ИзмененияДляОбмена1СПерсонал";
		РегистрыСведенийМенеджер = РегистрыСведений.ИзмененияДляОбмена1СПерсонал;
	ИначеЕсли Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		ИмяТаблицы = "РегистрСведений.ИзмененияДляОбменаКабинетСотрудника";
		РегистрыСведенийМенеджер = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицы);
		ЭлементБлокировки.ИсточникДанных = ОтменитьРегистрацию;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОтменитьРегистрацию", ОтменитьРегистрацию);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтменитьРегистрацию.Ссылка КАК Ссылка,
		|	ОтменитьРегистрацию.ТипОбъекта КАК ТипОбъекта,
		|	ОтменитьРегистрацию.ВерсияДанных КАК ВерсияДанных
		|ПОМЕСТИТЬ ВТОтменитьРегистрацию
		|ИЗ
		|	&ОтменитьРегистрацию КАК ОтменитьРегистрацию
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтменитьИзменения.Ссылка КАК Ссылка,
		|	ОтменитьИзменения.ТипОбъекта КАК ТипОбъекта
		|ИЗ
		|	ВТОтменитьРегистрацию КАК ОтменитьИзменения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляОбмена1СПерсонал КАК ИзмененияДляОбмена
		|		ПО ОтменитьИзменения.Ссылка = ИзмененияДляОбмена.Ссылка
		|			И ОтменитьИзменения.ТипОбъекта = ИзмененияДляОбмена.ТипОбъекта
		|			И ОтменитьИзменения.ВерсияДанных = ИзмененияДляОбмена.ВерсияДанных";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.ИзмененияДляОбмена1СПерсонал", ИмяТаблицы);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведенийМенеджер.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка = Выборка.Ссылка;
			МенеджерЗаписи.ТипОбъекта = Выборка.ТипОбъекта;
			МенеджерЗаписи.Удалить();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ШаблонОписания = НСтр("ru = 'Ошибка отмены регистрации изменений.
			|%1'");
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = СтрШаблон(ШаблонОписания, ПодробноеПредставлениеОшибки);
		ИмяСобытия = ИнтеграцияУправлениеПерсоналом.ИменаСобытийЖР(Приложение).Обмен;
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура ОтменитьРегистрациюУсловноПубликуемыхОбъектов(Приложение) Экспорт
	
	ОкончаниеВыгрузки = НачалоДня(ТекущаяДатаСеанса());
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		
		ИмяТаблицы = "РегистрСведений.ВыгружаемыеОбъекты1СПерсонал";
		ИмяТаблицыИзменения = "РегистрСведений.ИзмененияДляОбмена1СПерсонал";
		РегистрыСведенийМенеджер = РегистрыСведений.ВыгружаемыеОбъекты1СПерсонал;
		
	ИначеЕсли Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		
		ИмяТаблицы = "РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника";
		ИмяТаблицыИзменения = "РегистрСведений.ИзмененияДляОбменаКабинетСотрудника";
		РегистрыСведенийМенеджер = РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника;
		
		Настройки = РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.НастройкиИнтеграции();
		ОкончаниеВыгрузки = НачалоДня(ТекущаяДатаСеанса()) - Настройки.ДнейСохраненияПубликации * 86400;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОкончаниеВыгрузки", ОкончаниеВыгрузки);
	Запрос.УстановитьПараметр("ТипыОбъектов", ИнтеграцияУправлениеПерсоналом.ТипыОсновныхОбъектов());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъекты1СПерсонал КАК ВыгружаемыеОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляОбмена1СПерсонал КАК ИзмененияДляОбмена
	|		ПО ВыгружаемыеОбъекты.Ссылка = ИзмененияДляОбмена.Ссылка
	|			И (ИзмененияДляОбмена.ТипОбъекта В (&ТипыОбъектов))
	|ГДЕ
	|	ВыгружаемыеОбъекты.УсловноВыгружается
	|	И ИзмененияДляОбмена.ВыгружатьУдаление ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъекты1СПерсонал КАК ВыгружаемыеОбъекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляОбмена1СПерсонал КАК ИзмененияДляОбмена
	|			ПО Сотрудники.Ссылка = ИзмененияДляОбмена.Ссылка
	|				И (ИзмененияДляОбмена.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУпралениеПерсоналом.Сотрудник))
	|		ПО ВыгружаемыеОбъекты.Ссылка = Сотрудники.ФизическоеЛицо
	|ГДЕ
	|	ВыгружаемыеОбъекты.ОкончаниеВыгрузки <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ВыгружаемыеОбъекты.ОкончаниеВыгрузки <= &ОкончаниеВыгрузки
	|	И ИзмененияДляОбмена.ВерсияДанных ЕСТЬ NULL";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.ВыгружаемыеОбъекты1СПерсонал", ИмяТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.ИзмененияДляОбмена1СПерсонал", ИмяТаблицыИзменения);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицы);
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		Блокировка.Заблокировать();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведенийМенеджер.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка = Выборка.Ссылка;
			МенеджерЗаписи.Удалить();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ШаблонОписания = НСтр("ru = 'Ошибка отмены регистрации условно выгружаемых объектов.
			|%1'");
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = СтрШаблон(ШаблонОписания, ПодробноеПредставлениеОшибки);
		ИмяСобытия = ИнтеграцияУправлениеПерсоналом.ИменаСобытийЖР(Приложение).Обмен;
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

#КонецОбласти 

#Область НеобработанныеОбъекты

Функция НеобработанныеОбъекты(Приложение, ТипОбъекта)
	
	Объекты = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Приложение", Приложение);
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НеобработанныеОбъекты.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.НеобработанныеОбъектыУправлениеПерсоналом КАК НеобработанныеОбъекты
	|ГДЕ
	|	НеобработанныеОбъекты.Приложение = &Приложение
	|	И НеобработанныеОбъекты.ТипОбъекта = &ТипОбъекта";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объекты.Добавить(Выборка.Объект.Получить());
	КонецЦикла;
	
	Возврат Объекты;

КонецФункции

Процедура ЗарегистрироватьНеобработанныйОбъект(Идентификатор, Объект, ТипОбъекта, Описание, МенеджерОбмена)

	Приложение 		= МенеджерОбмена.Приложение;
	ИменаСобытийЖР 	= МенеджерОбмена.ИменаСобытийЖР;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НеобработанныеОбъектыУправлениеПерсоналом");
		ЭлементБлокировки.УстановитьЗначение("Идентификатор", Идентификатор);
		ЭлементБлокировки.УстановитьЗначение("Приложение", Приложение);
		ЭлементБлокировки.УстановитьЗначение("ТипОбъекта", ТипОбъекта);
		Блокировка.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.НеобработанныеОбъектыУправлениеПерсоналом.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Идентификатор 	= Идентификатор;
		МенеджерЗаписи.Приложение 		= Приложение;
		МенеджерЗаписи.ТипОбъекта 		= ТипОбъекта;
		МенеджерЗаписи.Объект 			= Новый ХранилищеЗначения(Объект);
		МенеджерЗаписи.Описание 		= Описание;
		МенеджерЗаписи.ДатаРегистрации 	= ТекущаяДатаСеанса();
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ОписаниеОшибки = НСтр("ru = 'Ошибка регистрации необработанного объекта.'");
		ЗаписатьОшибку(ИменаСобытийЖР, ОписаниеОшибки, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура УдалитьНеобработанныйОбъект(Идентификатор, ТипОбъекта, МенеджерОбмена)

	Приложение 		= МенеджерОбмена.Приложение;
	ИменаСобытийЖР 	= МенеджерОбмена.ИменаСобытийЖР;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НеобработанныеОбъектыУправлениеПерсоналом");
		ЭлементБлокировки.УстановитьЗначение("Идентификатор", Идентификатор);
		ЭлементБлокировки.УстановитьЗначение("Приложение", Приложение);
		ЭлементБлокировки.УстановитьЗначение("ТипОбъекта", ТипОбъекта);
		Блокировка.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.НеобработанныеОбъектыУправлениеПерсоналом.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Идентификатор 	= Идентификатор;
		МенеджерЗаписи.Приложение 		= Приложение;
		МенеджерЗаписи.ТипОбъекта 		= ТипОбъекта;
		МенеджерЗаписи.Удалить();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		Описание = НСтр("ru = 'Ошибка отмены регистрации необработанного объекта.'");
		ЗаписатьОшибку(ИменаСобытийЖР, Описание, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область ПолучениеИзмененийДляВыгрузки

// Получает таблицу изменений для обмена.
//
// Параметры:
// 		Приложение - ПеречислениеСсылка.ПриложенияДляИнтеграции.
//
// Возвращаемое значение:
// 		ТаблицаЗначений
// 			* Ссылка
// 			* ТипОбъекта - ПеречислениеСсылка.ТипыОбъектовИнтеграцияУпралениеПерсоналом
// 			* ТипЗначения - Тип
// 			* ВерсияДанных
// 			* ЕстьВПравилах
// 			* УсловноВыгружается
// 			* ВыгружатьУдаление
//
Функция ЗарегистрированныеИзменения(Приложение, ТипыОбъектов)

	Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		ИмяТаблицы = "РегистрСведений.ИзмененияДляОбмена1СПерсонал";
	ИначеЕсли Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		ИмяТаблицы = "РегистрСведений.ИзмененияДляОбменаКабинетСотрудника";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипыОбъектов", ТипыОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Изменения.Ссылка КАК Ссылка,
	|	Изменения.ТипОбъекта КАК ТипОбъекта,
	|	ТИПЗНАЧЕНИЯ(Изменения.Ссылка) КАК ТипЗначения,
	|	Изменения.ВерсияДанных КАК ВерсияДанных,
	|	ВЫБОР
	|		КОГДА ВыгружаемыеОбъекты.УсловноВыгружается ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьВПравилах,
	|	ЕСТЬNULL(ВыгружаемыеОбъекты.УсловноВыгружается, ЛОЖЬ) КАК УсловноВыгружается,
	|	Изменения.ВыгружатьУдаление КАК ВыгружатьУдаление
	|ИЗ
	|	РегистрСведений.ИзмененияДляОбмена1СПерсонал КАК Изменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъекты1СПерсонал КАК ВыгружаемыеОбъекты
	|		ПО Изменения.Ссылка = ВыгружаемыеОбъекты.Ссылка
	|ГДЕ
	|	Изменения.ТипОбъекта В(&ТипыОбъектов)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.ИзмененияДляОбмена1СПерсонал", ИмяТаблицы);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Получение данных выгрузки основных объектов.
//
// Параметры:
// 		МенеджерОбмена
//
// Возвращаемое значение:
// 		Структура - свойства
// 			* ДанныеОбъектов - Соответствие - данные в разрезе типов объектов
// 				* Ключ - ПеречислениеСсылка.ТипыОбъектовИнтеграцияУпралениеПерсоналом
// 				* Значение - Структура со свойствами
// 					* ДанныеДляВыгрузки - ТаблицаЗначений, Структура
// 					* ОбъектыКУдалению - Массив  - ссылки на объекты, по которым выгружается удаление.
// 			* ОтменитьРегистрацию - ТаблицаЗначений
// 				* Ссылка
// 				* ТипОбъекта - ПеречислениеСсылка.ТипыОбъектовИнтеграцияУпралениеПерсоналом
// 				* ВерсияДанных - Строка.
// 			* ТаблицаИзменений - ТаблицаЗначений
//
Функция ДанныеОсновныхОбъектов(МенеджерОбмена)
	
	Результат = Новый Структура("ДанныеОбъектов,ОтменитьРегистрацию,ТаблицаИзменений");
	
	Приложение = МенеджерОбмена.Приложение;
	ТипыОбъектов = ИнтеграцияУправлениеПерсоналом.ТипыОсновныхОбъектов();
	
	// Получение всех зарегистрированных изменений для обмена по указанным типам объектов.
	ТаблицаИзменений = ЗарегистрированныеИзменения(Приложение, ТипыОбъектов);
	// Инициализации таблицы для отмены регистрации изменений.
	ОтменитьРегистрацию = ТаблицаИзменений.СкопироватьКолонки("Ссылка,ТипОбъекта,ВерсияДанных");
	
	ТаблицаИзменений.Индексы.Добавить("ТипОбъекта");
	Отбор = Новый Структура("ТипОбъекта");
	
	ДанныеОбъектов = Новый Соответствие;
	Для каждого ТипОбъекта Из ТипыОбъектов Цикл
		
		ДанныеПоТипуОбъекта = Новый Структура("ДанныеДляВыгрузки,ОбъектыКУдалению");
		
		Изменения = ТаблицаИзменений.СкопироватьКолонки();
		ОбъектыКУдалению = Новый Массив;
		
		Отбор.ТипОбъекта = ТипОбъекта;
		НайденныеСтроки = ТаблицаИзменений.НайтиСтроки(Отбор);
		Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
			Если СтрокаТЗ.ВыгружатьУдаление Тогда
				ОбъектыКУдалению.Добавить(СтрокаТЗ.Ссылка);
			ИначеЕсли СтрокаТЗ.ЕстьВПравилах Тогда
				ЗаполнитьЗначенияСвойств(Изменения.Добавить(), СтрокаТЗ);
			Иначе
				ЗаполнитьЗначенияСвойств(ОтменитьРегистрацию.Добавить(), СтрокаТЗ);
			КонецЕсли;
		КонецЦикла;
		
		ДанныеПоТипуОбъекта.ДанныеДляВыгрузки = ДанныеОбъектов(МенеджерОбмена, Изменения, ТипОбъекта);
		ДанныеПоТипуОбъекта.ОбъектыКУдалению = ОбъектыКУдалению;
		
		ДанныеОбъектов.Вставить(ТипОбъекта, ДанныеПоТипуОбъекта);
	
	КонецЦикла;
	
	Результат.ДанныеОбъектов 		= ДанныеОбъектов;
	Результат.ОтменитьРегистрацию 	= ОтменитьРегистрацию;
	Результат.ТаблицаИзменений 		= ТаблицаИзменений;
	
	Возврат Результат;

КонецФункции 

Функция ДанныеОбъектов(МенеджерОбмена, ТаблицаИзменений, ТипОбъекта)
	
	ДанныеОбъектов = Неопределено;
	Если Не ЗначениеЗаполнено(ТаблицаИзменений) Тогда
		Возврат ДанныеОбъектов;
	КонецЕсли; 
	
	Приложение = МенеджерОбмена.Приложение;
	
	ПеречисленияМенеджер = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом;
	
	Если ТипОбъекта = ПеречисленияМенеджер.ФизическоеЛицо Тогда
		
		ДанныеОбъектов = ДанныеФизическихЛиц(МенеджерОбмена, ТаблицаИзменений);
		
	ИначеЕсли ТипОбъекта = ПеречисленияМенеджер.Организация Тогда
		
		ДанныеОбъектов = ДанныеОрганизаций(ТаблицаИзменений);
		
	ИначеЕсли ТипОбъекта = ПеречисленияМенеджер.Подразделение Тогда
		
		ДанныеОбъектов = ДанныеПодразделений(ТаблицаИзменений, Приложение);
		
	ИначеЕсли ТипОбъекта = ПеречисленияМенеджер.Должность Тогда
		
		ДанныеОбъектов = ДанныеДолжностей(ТаблицаИзменений);
		
	ИначеЕсли ТипОбъекта = ПеречисленияМенеджер.ДолжностьПоШтатномуРасписанию Тогда
		
		ДанныеОбъектов = ДанныеШтатногоРасписания(МенеджерОбмена, ТаблицаИзменений);
		
	ИначеЕсли ТипОбъекта = ПеречисленияМенеджер.Сотрудник Тогда
		
		ДанныеОбъектов = ДанныеСотрудников(МенеджерОбмена, ТаблицаИзменений);
		
	ИначеЕсли ТипОбъекта = ПеречисленияМенеджер.ГрафикРаботы Тогда
		
		ДанныеОбъектов = ДанныеГрафиковРаботы(ТаблицаИзменений, Приложение);
		
	КонецЕсли;
	
	Возврат ДанныеОбъектов;
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанныхОбъектов 

#Область КонструкторыОбъектов

Функция НовыеДанныеДляВыгрузки()

	Данные = Новый Структура;
	Данные.Вставить("ТаблицаДанных");
	Данные.Вставить("ОтменитьРегистрацию", Новый Массив);
	
	Возврат Данные;

КонецФункции

Функция ИменаСвойствСклоненияФИО()

	Возврат "Именительный,Родительный,Дательный,Винительный,Творительный,Предложный";

КонецФункции

Функция НоваяТаблицаЗначений(ИменаКолонокСтрока)
	
	Разделители = СтрШаблон("%1%2",Символы.ПС,",");
	ИменаКолонок = СтрРазделить(ИменаКолонокСтрока,Разделители, Ложь);
	Таблица = Новый ТаблицаЗначений;
	Для каждого ИмяКолонки Из ИменаКолонок Цикл
		Таблица.Колонки.Добавить(ИмяКолонки);
	КонецЦикла;
	
	Возврат Таблица;

КонецФункции

Функция НоваяТаблицаДанныеОрганизаций()
	
	ИменаКолонок = "
	|Организация,
	|Наименование,
	|ИНН,
	|ГоловнаяОрганизация,
	|ОбособленноеПодразделение,
	|НаименованиеПолное
	|ОГРН
	|КПП
	|Руководитель
	|ДолжностьРуководителя";
	
	Возврат НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НоваяТаблицаДанныеФизическихЛиц()
	
	ИменаКолонок = "
	|ФизическоеЛицо,
	|Фамилия,Имя,Отчество,Инициалы,
	|Пол,ДатаРождения,МестоРожденияПредставление,
	|ИНН,СтраховойНомерПФР,
	|ТелефонРабочийПредставление,ТелефонМобильныйПредставление,EMailПредставление,
	|АдресПоПропискеПредставление,АдресМестаПроживанияПредставление,
	|ДокументУдостоверяющийЛичность,
	|Фотография,
	|СклоненияФИО,
	|АдресФотографии";
	
	Возврат НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НоваяТаблицаДанныеСотрудников()
	
	ИменаКолонок = "
	|Сотрудник,ФизическоеЛицо,
	|Организация,Подразделение,Должность,ДолжностьПоШтатномуРасписанию
	|ВидЗанятости,ДатаПриема,РабочееМестоПериодРегистрации,
	|ГрафикРаботы,ТарифнаяСтавка,
	|Уволен,СкрыватьВСписках";
	
	Возврат НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НоваяТаблицаДанныеПодразделений()

	ИменаКолонок = "
	|Подразделение,
	|Наименование,Код,Родитель,
	|Руководитель,
	|Порядок";
	
	Возврат НоваяТаблицаЗначений(ИменаКолонок);	

КонецФункции

Функция НоваяТаблицаДанныеШтатногоРасписания()

	ИменаКолонок = "
	|ДолжностьПоШтатномуРасписанию,
	|Наименование,
	|Организация,Подразделение,Должность";
	
	Возврат НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НоваяТаблицаДанныеГрафиковРаботы()

	ИменаКолонок = "
	|ГрафикРаботы,
	|Наименование,
	|ПраздничныеДни";
	
	Возврат НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

#КонецОбласти

Функция ДанныеФизическихЛиц(МенеджерОбмена, ТаблицаИзменений)
	
	Приложение = МенеджерОбмена.Приложение;
	
	Результат = НовыеДанныеДляВыгрузки();
	ТаблицаДанных = НоваяТаблицаДанныеФизическихЛиц();
	
	ФизическиеЛица = ТаблицаИзменений.ВыгрузитьКолонку("Ссылка"); 
	Данные = ИнтеграцияУправлениеПерсоналом.ДанныеФизическихЛиц(ФизическиеЛица);
	
	АдресаФотографий 		= Данные.АдресаФотографий;
	КонтактнаяИнформация 	= Данные.КонтактнаяИнформация;
	КадровыеДанные 			= Данные.КадровыеДанные;
	
	ПараметрыСклонения = СклонениеПредставленийОбъектовКлиентСервер.ПараметрыСклонения();
	ПараметрыСклонения.ЭтоФИО = Истина;
	ИменаСвойствСклоненияФИО = ИменаСвойствСклоненияФИО();
	
	ОшибкиЗаполнения = Новый Соответствие;
	
	Для каждого СтрокаТЗ Из КадровыеДанные Цикл
		
		ДанныеДляПроверки = ИнтеграцияУправлениеПерсоналом.ДанныеДляПроверкиФизическогоЛица(СтрокаТЗ, АдресаФотографий, КонтактнаяИнформация);
		РезультатПроверки = ИнтеграцияУправлениеПерсоналом.РезультатПроверкиДанныхФизическогоЛица(ДанныеДляПроверки, Истина);
		Если ЗначениеЗаполнено(РезультатПроверки[Приложение].БлокирующиеОшибки) Тогда
			ОшибкиОбъекта = ИнтеграцияУправлениеПерсоналом.ОшибкиЗаполненияОбъектаДляПриложения(РезультатПроверки, Приложение);
			ОшибкиЗаполнения.Вставить(СтрокаТЗ.ФизическоеЛицо, ОшибкиОбъекта);
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДляПроверки);
		
		НоваяСтрока.МестоРожденияПредставление = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(СтрокаТЗ.МестоРождения);
		
		СклоненияФИО = Новый Структура(ИменаСвойствСклоненияФИО);
		ПараметрыСклонения.Пол = ?(НоваяСтрока.Пол = Перечисления.ПолФизическогоЛица.Мужской,1,2);
		ЗаполнитьЗначенияСвойств(СклоненияФИО, СклонениеПредставленийОбъектов.ДанныеСклонения(СтрокаТЗ.ФИОПолные, ПараметрыСклонения));
		НоваяСтрока.СклоненияФИО = СклоненияФИО;
		
		Если ЗначениеЗаполнено(СтрокаТЗ.ДокументВид) Тогда
			НоваяСтрока.ДокументУдостоверяющийЛичность = ДокументУдостоверяющийЛичность(СтрокаТЗ);
		КонецЕсли;
		
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(ОшибкиЗаполнения) Тогда
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ФизическоеЛицо;
		Попытка
			ИнтеграцияУправлениеПерсоналом.ПроверитьЗарегистрироватьБлокирующиеОшибкиЗаполнения(Приложение, ОшибкиЗаполнения, ТипОбъекта);
		Исключение
			МенеджерОбмена.БылиОшибки = Истина;
		КонецПопытки;
	КонецЕсли;

	Результат.ТаблицаДанных = ТаблицаДанных;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеОрганизаций(ТаблицаИзменений)
	
	Результат = НовыеДанныеДляВыгрузки();
	ТаблицаДанных = НоваяТаблицаДанныеОрганизаций();
	
	Организации = ТаблицаИзменений.ВыгрузитьКолонку("Ссылка");
	Данные = ИнтеграцияУправлениеПерсоналом.ДанныеОрганизаций(Организации);
	
	Для каждого СтрокаТЗ Из Данные Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(), СтрокаТЗ);
	КонецЦикла;
	
	Результат.ТаблицаДанных = ТаблицаДанных;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеПодразделений(ТаблицаИзменений, Приложение)
	
	Результат = НовыеДанныеДляВыгрузки();
	ТаблицаДанных = НоваяТаблицаДанныеПодразделений();
	
	Подразделения = ТаблицаИзменений.ВыгрузитьКолонку("Ссылка");
	Данные = ИнтеграцияУправлениеПерсоналом.ДанныеПодразделений(Подразделения, Приложение);
	
	Для каждого СтрокаТЗ Из Данные Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(), СтрокаТЗ);
	КонецЦикла;
	
	Результат.ТаблицаДанных = ТаблицаДанных;
	
	Возврат Результат;

КонецФункции

Функция ДанныеДолжностей(ТаблицаИзменений)
	
	Результат = НовыеДанныеДляВыгрузки();
	
	Должности = ТаблицаИзменений.ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Должности", Должности);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Должности.Ссылка КАК Должность,
	|	Должности.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Должности КАК Должности
	|ГДЕ
	|	Должности.Ссылка В(&Должности)";
	Результат.ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат; 

КонецФункции

Функция ДанныеШтатногоРасписания(МенеджерОбмена, ТаблицаИзменений)
	
	Приложение = МенеджерОбмена.Приложение;
	
	Результат = НовыеДанныеДляВыгрузки();
	ТаблицаДанных = НоваяТаблицаДанныеШтатногоРасписания();
	
	ПозицииШР = ТаблицаИзменений.ВыгрузитьКолонку("Ссылка");
	Данные = ИнтеграцияУправлениеПерсоналом.ДанныеШтатногоРасписания(ПозицииШР);
	
	ОшибкиЗаполнения = Новый Соответствие;
	
	Для каждого СтрокаТЗ Из Данные Цикл
		
		ДанныеДляПроверки = ИнтеграцияУправлениеПерсоналом.ДанныеДляПроверкиПозицииШтатногоРасписания(СтрокаТЗ);
		РезультатПроверки = ИнтеграцияУправлениеПерсоналом.РезультатПроверкиДанныхПозицииШтатногоРасписания(ДанныеДляПроверки);
		Если ЗначениеЗаполнено(РезультатПроверки[Приложение].БлокирующиеОшибки) Тогда
			ОшибкиОбъекта = ИнтеграцияУправлениеПерсоналом.ОшибкиЗаполненияОбъектаДляПриложения(РезультатПроверки, Приложение);
			ОшибкиЗаполнения.Вставить(СтрокаТЗ.ДолжностьПоШтатномуРасписанию, ОшибкиОбъекта);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(), СтрокаТЗ);
		
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(ОшибкиЗаполнения) Тогда
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ДолжностьПоШтатномуРасписанию;
		Попытка
			ИнтеграцияУправлениеПерсоналом.ПроверитьЗарегистрироватьБлокирующиеОшибкиЗаполнения(Приложение, ОшибкиЗаполнения, ТипОбъекта);
		Исключение
			МенеджерОбмена.БылиОшибки = Истина;
		КонецПопытки;
	КонецЕсли;
	
	Результат.ТаблицаДанных = ТаблицаДанных;
	
	Возврат Результат;

КонецФункции

Функция ДанныеСотрудников(МенеджерОбмена, ТаблицаИзменений)
	
	Приложение = МенеджерОбмена.Приложение;
	
	Результат = НовыеДанныеДляВыгрузки();
	
	ТаблицаДанных 		= НоваяТаблицаДанныеСотрудников();
	ОтменитьРегистрацию = Новый Массив;
	
	Отбор = Новый Структура("УсловноВыгружается", Истина);
	НайденныеСтроки = ТаблицаИзменений.НайтиСтроки(Отбор);
	ВыгружаютсяУсловно = Новый Массив;
	Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
		ВыгружаютсяУсловно.Добавить(СтрокаТЗ.Ссылка);
	КонецЦикла;
	
	СотрудникиНеВыгружать = Новый Соответствие;
	Если ВыгружаютсяУсловно.Количество() > 0 Тогда
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.Сотрудник;
		ОбъектыВыгружались = ОбъектыВыгружались(Приложение, ТипОбъекта, ВыгружаютсяУсловно);
		Для каждого Ссылка Из ВыгружаютсяУсловно Цикл
			Если ОбъектыВыгружались[Ссылка] = Неопределено Тогда
				СотрудникиНеВыгружать.Вставить("Ссылка", Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Сотрудники = ТаблицаИзменений.ВыгрузитьКолонку("Ссылка");
	ДанныеСотрудников = ИнтеграцияУправлениеПерсоналом.ДанныеСотрудников(Сотрудники);
	
	Позиции = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеСотрудников, "ДолжностьПоШтатномуРасписанию", Истина);
	ПозицииПравилВыгрузки = ИнтеграцияУправлениеПерсоналом.ПозицииПравилВыгрузки(Приложение, Позиции);
	
	ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеСотрудников, "ФизическоеЛицо", Истина);
	
	ПроверяемыеОбъекты = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПроверяемыеОбъекты, ФизическиеЛица);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПроверяемыеОбъекты, Позиции);
	ОшибкиЗаполненияОбъектов = ИнтеграцияУправлениеПерсоналом.ОшибкиЗаполненияОбъектов(Приложение, ПроверяемыеОбъекты);
	
	Отбор = Новый Структура("БлокирующаяОшибка,ТипОбъекта", Истина);
	Отбор.ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ФизическоеЛицо;
	ОшибкиФизическихЛиц = ОшибкиЗаполненияОбъектов.Скопировать(Отбор);
	Отбор.ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ДолжностьПоШтатномуРасписанию;
	ОшибкиПозиций = ОшибкиЗаполненияОбъектов.Скопировать(Отбор); 
	
	ОшибкиФизическихЛиц.Индексы.Добавить("Ссылка");
	ОшибкиПозиций.Индексы.Добавить("Ссылка");
	Отбор = Новый Структура("Ссылка"); 
	
	ОшибкиЗаполнения = Новый Соответствие;
	
	Для каждого СтрокаТЗ Из ДанныеСотрудников Цикл
		
		Если СотрудникиНеВыгружать[СтрокаТЗ.Сотрудник] = Истина Тогда
			ОтменитьРегистрацию.Добавить(СтрокаТЗ.Сотрудник);
			Продолжить;
		КонецЕсли;
		
		ДанныеДляПроверки = ИнтеграцияУправлениеПерсоналом.ДанныеДляПроверкиСотрудника(СтрокаТЗ);
		
		Отбор.Ссылка = СтрокаТЗ.ФизическоеЛицо;
		ОшибкиФизическогоЛица = ОшибкиФизическихЛиц.НайтиСтроки(Отбор);
		
		Отбор.Ссылка = СтрокаТЗ.ДолжностьПоШтатномуРасписанию;
		ОшибкиПозиции = ОшибкиПозиций.НайтиСтроки(Отбор);
		
		РезультатПроверки = ИнтеграцияУправлениеПерсоналом.РезультатПроверкиДанныхСотрудника(ДанныеДляПроверки, ОшибкиФизическогоЛица, ОшибкиПозиции);
		Если ЗначениеЗаполнено(РезультатПроверки[Приложение].БлокирующиеОшибки) Тогда
			ОшибкиОбъекта = ИнтеграцияУправлениеПерсоналом.ОшибкиЗаполненияОбъектаДляПриложения(РезультатПроверки, Приложение);
			ОшибкиЗаполнения.Вставить(СтрокаТЗ.Сотрудник, ОшибкиОбъекта);
			Продолжить;
		КонецЕсли;
		
		ТарифнаяСтавка = Новый Структура("ПоказательТарифнойСтавки,Сумма");
		ТарифнаяСтавка.ПоказательТарифнойСтавки = СтрокаТЗ.ПоказательТарифнойСтавки;
		ТарифнаяСтавка.Сумма 					= СтрокаТЗ.РазмерТарифнойСтавки;
		
		Уволен = (СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение);
		СкрыватьВСписках = ?(ПозицииПравилВыгрузки[СтрокаТЗ.ДолжностьПоШтатномуРасписанию] = Неопределено, Истина, Ложь);
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		НоваяСтрока.ТарифнаяСтавка 		= ТарифнаяСтавка;
		НоваяСтрока.Уволен 				= Уволен;
		НоваяСтрока.СкрыватьВСписках 	= СкрыватьВСписках;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОшибкиЗаполнения) Тогда
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.Сотрудник;
		Попытка
			ИнтеграцияУправлениеПерсоналом.ПроверитьЗарегистрироватьБлокирующиеОшибкиЗаполнения(Приложение, ОшибкиЗаполнения, ТипОбъекта);
		Исключение
			МенеджерОбмена.БылиОшибки = Истина;
		КонецПопытки;
	КонецЕсли;
	
	Результат.ТаблицаДанных = ТаблицаДанных;
	Результат.ОтменитьРегистрацию = ОтменитьРегистрацию;
	
	Возврат Результат;
	
КонецФункции

Функция ДокументУдостоверяющийЛичность(Данные)
	
	ИменаСвойств = "ВидДокумента,Серия,Номер,ДатаВыдачи,КемВыдан,КодПодразделения";
	Описание = Новый Структура(ИменаСвойств);
	Описание.ВидДокумента 		= Данные.ДокументВид;
	Описание.Серия 				= Данные.ДокументСерия;
	Описание.Номер 				= Данные.ДокументНомер;
	Описание.ДатаВыдачи 		= Данные.ДокументДатаВыдачи;
	Описание.КемВыдан 			= Данные.ДокументКемВыдан;
	Описание.КодПодразделения 	= Данные.ДокументКодПодразделения;
	
	Возврат Описание;

КонецФункции

Функция ДанныеГрафиковРаботы(ТаблицаИзменений, Приложение)

	Результат = НовыеДанныеДляВыгрузки();
	ТаблицаДанных = НоваяТаблицаДанныеГрафиковРаботы();
	
	ГрафикиРаботы = ТаблицаИзменений.ВыгрузитьКолонку("Ссылка");
	Данные = ИнтеграцияУправлениеПерсоналом.ДанныеГрафиковРаботы(ГрафикиРаботы, Приложение);
	
	Если ЗначениеЗаполнено(Данные) Тогда
		Для каждого СтрокаТЗ Из Данные Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(), СтрокаТЗ);
		КонецЦикла;
	КонецЕсли;

	Результат.ТаблицаДанных = ТаблицаДанных;
	
	Возврат Результат;

КонецФункции

#Область Прочие

// Возвращает объекты с признаком выгрузки в указанное приложение.
//
// Параметры:
// 		Приложение - ПеречислениеСсылка.ПриложенияДляИнтеграции
// 		ТипОбъекта - ПеречислениеСсылка.ТипыОбъектовИнтеграцияУпралениеПерсоналом
// 		МассивСсылок - Массив - проверяемые ссылки.
//
// Возвращаемое значение:
// 		Соответствие
//
Функция ОбъектыВыгружались(Приложение, ТипОбъекта, МассивСсылок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	Запрос.УстановитьПараметр("Приложение", Приложение);
	Запрос.УстановитьПараметр("Ссылки", МассивСсылок);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ВыгруженныеОбъектыУправлениеПерсоналом КАК Таблица
	|ГДЕ
	|	Таблица.ТипОбъекта = &ТипОбъекта
	|	И Таблица.Приложение = &Приложение
	|	И Таблица.Ссылка В(&Ссылки)
	|	И Таблица.Выгружался";
	ВыгруженныеОбъекты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(ВыгруженныеОбъекты);
	
КонецФункции

Функция ЕстьАктивныеФоновыеЗадания(КлючФоновогоЗадания) Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ",      КлючФоновогоЗадания);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	УстановитьПривилегированныйРежим(Истина);
	АктивныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Возврат (АктивныеФоновыеЗадания.Количество() > 0);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Конструкторы

Функция НовыйРезультатЗагрузкиИзменений() Экспорт

	Возврат Новый Структура("БылиОшибки, ОбъектВсеИзменения", Ложь);

КонецФункции

#КонецОбласти

#Область ПубличныеИдентификаторы

Функция ПубличныйИдентификаторСсылка(Идентификаторы, ТипОбъекта) Экспорт
	
	ИдентификаторСсылка = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(Идентификаторы) Тогда
		Возврат ИдентификаторСсылка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубличныеИдентификаторы.Ссылка КАК Ссылка,
	|	ПубличныеИдентификаторы.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.ПубличныеИдентификаторыОбъектовУправлениеПерсоналом КАК ПубличныеИдентификаторы
	|ГДЕ
	|	ПубличныеИдентификаторы.ТипОбъекта = &ТипОбъекта
	|	И ПубличныеИдентификаторы.Идентификатор В(&Идентификаторы)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИдентификаторСсылка.Вставить(Выборка.Идентификатор, Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ИдентификаторСсылка;
	
КонецФункции

Функция СсылкаПубличныйИдентификатор(Ссылки, ТипОбъекта) Экспорт

	СсылкаИдентификатор = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Идентификаторы.Ссылка КАК Ссылка,
	|	Идентификаторы.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.ПубличныеИдентификаторыОбъектовУправлениеПерсоналом КАК Идентификаторы
	|ГДЕ
	|	Идентификаторы.ТипОбъекта = &ТипОбъекта
	|	И Идентификаторы.Ссылка В(&Ссылки)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СсылкаИдентификатор.Вставить(Выборка.Ссылка, СокрЛП(Выборка.Идентификатор));
	КонецЦикла;
	
	НовыеИдентификаторы = Новый ТаблицаЗначений;
	НовыеИдентификаторы.Колонки.Добавить("Ссылка", 			Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.СсылкаПубличныйИдентификаторУправлениеПерсоналом.Тип));
	НовыеИдентификаторы.Колонки.Добавить("ТипОбъекта", 		Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОбъектовИнтеграцияУпралениеПерсоналом"));
	НовыеИдентификаторы.Колонки.Добавить("Идентификатор", 	Новый ОписаниеТипов("Строка"));
	
	СсылкиБезИдентификатора = Новый Массив;
	
	Для каждого Ссылка Из Ссылки Цикл
		Идентификатор = СсылкаИдентификатор[Ссылка];
		Если Не ЗначениеЗаполнено(Идентификатор) Тогда
			Если ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.Подразделение
				И ТипЗнч(Ссылка) = Тип("СправочникСсылка.Организации") Тогда
				СсылкиБезИдентификатора.Добавить(Ссылка);
				Продолжить;
			Иначе
				Идентификатор = Строка(Ссылка.УникальныйИдентификатор());
			КонецЕсли;
			НоваяСтрока = НовыеИдентификаторы.Добавить();
			НоваяСтрока.Ссылка 			= Ссылка;
			НоваяСтрока.Идентификатор 	= Идентификатор;
			НоваяСтрока.ТипОбъекта 		= ТипОбъекта;
			СсылкаИдентификатор.Вставить(Ссылка, Идентификатор);
		КонецЕсли;
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(СсылкиБезИдентификатора) Тогда
		
		Идентификаторы = Новый Массив;
		Если ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.Подразделение Тогда
			Идентификаторы = ИдентификаторыОрганизацииКакПодразделения(СсылкиБезИдентификатора);
		ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.Оффер Тогда
			Идентификаторы = ИдентификаторыОфферы(СсылкиБезИдентификатора);
		КонецЕсли;
		Для каждого СтрокаТЗ Из Идентификаторы Цикл
			НоваяСтрока = НовыеИдентификаторы.Добавить();
			НоваяСтрока.Ссылка 			= СтрокаТЗ.Ссылка;
			НоваяСтрока.Идентификатор 	= СтрокаТЗ.Идентификатор;
			НоваяСтрока.ТипОбъекта 		= ТипОбъекта;
			СсылкаИдентификатор.Вставить(СтрокаТЗ.Ссылка, СтрокаТЗ.Идентификатор);
		КонецЦикла;
		
	КонецЕсли;
	
	Если НовыеИдентификаторы.Количество() > 0 Тогда
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПубличныеИдентификаторыОбъектовУправлениеПерсоналом");
			ЭлементБлокировки.ИсточникДанных = НовыеИдентификаторы;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
			Блокировка.Заблокировать();
			
			Для каждого СтрокаТЗ Из НовыеИдентификаторы Цикл
				МенеджерЗаписи = РегистрыСведений.ПубличныеИдентификаторыОбъектовУправлениеПерсоналом.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
				МенеджерЗаписи.Записать();
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат СсылкаИдентификатор;
	
КонецФункции

Функция ИдентификаторыОрганизацииКакПодразделения(Ссылки)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ИдентификаторыОрганизаций.Идентификатор, """") КАК Идентификатор
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИдентификаторыОрганизацийКабинетСотрудника КАК ИдентификаторыОрганизаций
	|		ПО Организации.Ссылка = ИдентификаторыОрганизаций.Организация
	|ГДЕ
	|	Организации.Ссылка В(&Ссылки)";
	Идентификаторы = Запрос.Выполнить().Выгрузить();
	
	НовыеИдентификаторы = Новый ТаблицаЗначений;
	НовыеИдентификаторы.Колонки.Добавить("Ссылка", 			Новый ОписаниеТипов("СправочникСсылка.Организации"));
	НовыеИдентификаторы.Колонки.Добавить("Идентификатор", 	Новый ОписаниеТипов("Строка"));
	Для каждого СтрокаТЗ Из Идентификаторы Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Идентификатор) Тогда
			СтрокаТЗ.Идентификатор = Строка(Новый УникальныйИдентификатор);
			НоваяСтрока = НовыеИдентификаторы.Добавить();
			НоваяСтрока.Ссылка = СтрокаТЗ.Ссылка;
			НоваяСтрока.Идентификатор = СтрокаТЗ.Идентификатор;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НовыеИдентификаторы) Тогда
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИдентификаторыОрганизацийКабинетСотрудника");
			ЭлементБлокировки.ИсточникДанных = НовыеИдентификаторы;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Ссылка");
			Блокировка.Заблокировать();
			
			Для каждого СтрокаТЗ Из НовыеИдентификаторы Цикл
				МенеджерЗаписи = РегистрыСведений.ИдентификаторыОрганизацийКабинетСотрудника.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Организация 		= СтрокаТЗ.Ссылка;
				МенеджерЗаписи.Идентификатор 	= СтрокаТЗ.Идентификатор;
				МенеджерЗаписи.Записать();
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Идентификаторы;

КонецФункции

Функция ИдентификаторыОфферы(Ссылки)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Оффер.Ссылка КАК Ссылка,
	|	Оффер.ИдентификаторДокумента КАК Идентификатор
	|ИЗ
	|	Документ.Оффер КАК Оффер
	|ГДЕ
	|	Оффер.Ссылка В(&Ссылки)";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции


#КонецОбласти 

#Область Прочие

Процедура ДополнитьТаблицуРезультатамиВыгрузки(ТаблицаОбработано, РезультатВыгрузки, ТипОбъекта) Экспорт
	
	Для каждого Ссылка Из РезультатВыгрузки.Выгружено Цикл
		НоваяСтрока = ТаблицаОбработано.Добавить();
		НоваяСтрока.Ссылка 		= Ссылка;
		НоваяСтрока.ТипОбъекта 	= ТипОбъекта;
	КонецЦикла;
	
	Для каждого Ссылка Из РезультатВыгрузки.ОтменитьРегистрацию Цикл
		НоваяСтрока = ТаблицаОбработано.Добавить();
		НоваяСтрока.Ссылка 		= Ссылка;
		НоваяСтрока.ТипОбъекта 	= ТипОбъекта;
	КонецЦикла; 

КонецПроцедуры

Функция ПроверятьОшибкуНаличияОбъекта(ТипОбъекта) Экспорт

	Возврат Ложь;

КонецФункции 

Процедура ЗаполнитьРезультатРезультатамиВыгрузки(Приложение, Результат, РезультатВыгрузки, ТипОбъекта, АдресРесурса, РегистрироватьВыгрузку) Экспорт

	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Выгружено,
			ВыгруженныеОбъектыПоИдентификаторам(Приложение, РезультатВыгрузки.Выгружено, ТипОбъекта, РегистрироватьВыгрузку),
			Истина);
	
	Если Не ЗначениеЗаполнено(РезультатВыгрузки.НеВыгружено) Тогда
		Возврат;
	КонецЕсли;
	
	Идентификаторы = ОбщегоНазначенияБЗККлиентСервер.КлючиСоответствия(РезультатВыгрузки.НеВыгружено);
	ИдентификаторСсылка = ПубличныйИдентификаторСсылка(Идентификаторы, ТипОбъекта);
	
	// Для заявок и результатов согласования.
	ПроверятьОшибкуНаличияОбъекта = ПроверятьОшибкуНаличияОбъекта(ТипОбъекта);
	
	Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
		
		Ссылка = ИдентификаторСсылка[Ошибка.Ключ];
		Если ЗначениеЗаполнено(Ссылка) Тогда
			РегистрироватьКаКВыгружен = Ложь;
			Если ПроверятьОшибкуНаличияОбъекта Тогда
				// Не найденные объекты с таким идентификатором, регистрируем как успешно выгруженные.
				РегистрироватьКаКВыгружен = (ЗначениеЗаполнено(Ошибка.Значение) И СтрНайти(Ошибка.Значение, "objectNotFound") > 0);
			КонецЕсли;
			Если РегистрироватьКаКВыгружен Тогда
				Результат.Выгружено.Добавить(Ссылка);
			Иначе	
				Результат.НеВыгружено.Вставить(Ссылка, Ошибка.Значение);
			КонецЕсли;
		КонецЕсли;
		
		ЗарегистрироватьОшибкуВыгрузкиОбъекта(Приложение, Ссылка, АдресРесурса, Ошибка.Значение);
		
	КонецЦикла;

КонецПроцедуры

Функция ВыгруженныеОбъектыПоИдентификаторам(Приложение, Идентификаторы, ТипОбъекта, РегистрироватьВыгрузку)
	
	Если Не ЗначениеЗаполнено(Идентификаторы) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	Запрос.УстановитьПараметр("Приложение", Приложение);
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Идентификаторы.Ссылка КАК Ссылка,
	|	Идентификаторы.ТипОбъекта КАК ТипОбъекта,
	|	Идентификаторы.Идентификатор КАК Идентификатор,
	|	&Приложение КАК Приложение,
	|	ЕСТЬNULL(ВыгруженныеОбъекты.Выгружался, ЛОЖЬ) КАК Выгружался
	|ИЗ
	|	РегистрСведений.ПубличныеИдентификаторыОбъектовУправлениеПерсоналом КАК Идентификаторы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгруженныеОбъектыУправлениеПерсоналом КАК ВыгруженныеОбъекты
	|		ПО Идентификаторы.Ссылка = ВыгруженныеОбъекты.Ссылка
	|			И Идентификаторы.ТипОбъекта = ВыгруженныеОбъекты.ТипОбъекта
	|			И (ВыгруженныеОбъекты.Приложение = &Приложение)
	|ГДЕ
	|	Идентификаторы.ТипОбъекта = &ТипОбъекта
	|	И Идентификаторы.Идентификатор В(&Идентификаторы)";
	ТаблицаИдентификаторов = Запрос.Выполнить().Выгрузить();
	
	Если РегистрироватьВыгрузку Тогда
		
		НовыеОбъекты = ТаблицаИдентификаторов.Скопировать(Новый Структура("Выгружался", Ложь));
		Если НовыеОбъекты.Количество() > 0 Тогда
			
			НачатьТранзакцию();
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыгруженныеОбъектыУправлениеПерсоналом");
				ЭлементБлокировки.ИсточникДанных = НовыеОбъекты;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Приложение", "Приложение");
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
				Блокировка.Заблокировать();
				
				Для каждого СтрокаТЗ Из НовыеОбъекты Цикл
					МенеджерЗаписи = РегистрыСведений.ВыгруженныеОбъектыУправлениеПерсоналом.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
					МенеджерЗаписи.Выгружался = Истина;
					МенеджерЗаписи.Записать();
				КонецЦикла;
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаИдентификаторов.ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Процедура ЗарегистрироватьОшибкуВыгрузкиОбъекта(Приложение, Ссылка, АдресРесурса, ОписаниеОшибки)

	Если ЗначениеЗаполнено(Ссылка) Тогда
		ПредставлениеОбъекта = Строка(Ссылка);
	Иначе
		ПредставлениеОбъекта = НСтр("ru = '<объект не найден>'");
	КонецЕсли;
	
	ШаблонОписания = НСтр(
	"ru = 'Ошибка выгрузки: ресурс: %1, объект: %2
	|Описание ошибки:
	|%3'");
	Комментарий = СтрШаблон(ШаблонОписания, АдресРесурса, ПредставлениеОбъекта, ОписаниеОшибки);
	ИмяСобытия = ИнтеграцияУправлениеПерсоналом.ИмяСобытияОбмен(ИнтеграцияУправлениеПерсоналом.НазваниеГруппыСобытийЖР(Приложение));
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);

КонецПроцедуры

Функция ТипОбъектаРазмерПакета(Приложение) Экспорт
	
	МенеджерТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом;
	ТипОбъектаРазмерПакета = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Приложение", Приложение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиОбмена.ТипОбъекта КАК ТипОбъекта,
	|	НастройкиОбмена.РазмерПорции КАК РазмерПорции
	|ИЗ
	|	РегистрСведений.РазмерыПорцийОбменаУправлениеПерсоналом КАК НастройкиОбмена
	|ГДЕ
	|	НастройкиОбмена.Приложение = &Приложение
	|	И НастройкиОбмена.РазмерПорции > 0";
	Таблица = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаТЗ Из Таблица Цикл
		ТипОбъектаРазмерПакета.Вставить(СтрокаТЗ.ТипОбъекта, СтрокаТЗ.РазмерПорции);
	КонецЦикла;
	
	ТипОбъектаРазмерПакетаПоУмолчанию = ТипОбъектаРазмерПакетаПоУмолчанию();
	Для каждого КлючИЗначение Из ТипОбъектаРазмерПакетаПоУмолчанию Цикл
		Если ТипОбъектаРазмерПакета[КлючИЗначение.Ключ] = Неопределено Тогда
			ТипОбъектаРазмерПакета.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТипОбъектаРазмерПакета;
	
КонецФункции

Функция ТипОбъектаРазмерПакетаПоУмолчанию()

	МенеджерТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом;
	ТипОбъектаРазмерПакета = Новый Соответствие;
	ТипОбъектаРазмерПакета.Вставить(МенеджерТипОбъекта.Подразделение, 					10);
	ТипОбъектаРазмерПакета.Вставить(МенеджерТипОбъекта.РасчетныйЛисток, 				30);
	ТипОбъектаРазмерПакета.Вставить(МенеджерТипОбъекта.ПраздничныеДниГрафикаРаботы, 	5);
	ТипОбъектаРазмерПакета.Вставить(МенеджерТипОбъекта.ГрафикОтпусков, 					30);
	ТипОбъектаРазмерПакета.Вставить(МенеджерТипОбъекта.ПлановоеУдержание, 				30);
	ТипОбъектаРазмерПакета.Вставить(МенеджерТипОбъекта.БудущееИзменениеОстаткаОтпусков, 30);
	
	Возврат ТипОбъектаРазмерПакета;

КонецФункции 

#КонецОбласти

#КонецОбласти


 




 

