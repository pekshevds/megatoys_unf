#Область ШтрихкодированиеИСКлиентПереопределяемый

// В процедуре нужно показать диалоговое окно для ввода штрихкода и передать полученные данные в описание оповещения.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - процедура, которую нужно вызвать после ввода штрихкода.
//
Процедура ПоказатьВводШтрихкода(Оповещение) Экспорт
	
	ДополнительныеПараметры = Новый Структура(
		"ОповещениеУспешногоВвода",
		Оповещение);
	ОповещениеВвода = Новый ОписаниеОповещения(
		"ПоказатьВводШтрихкодаЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
	ПоказатьВводЗначения(ОповещениеВвода, "", НСтр("ru = 'Введите штрихкод'"));
	
КонецПроцедуры

// В процедуре необходимо реализовать алгоритм обработки
//
// Параметры:
//  Форма - УправляемаяФорма - форма документа, в которой были обработаны штрихкоды,
//  ОбработанныеДанные - Структура - подготовленные ранее данные штрихкодов,
//  КэшированныеЗначения - Структура - используется механизмом обработки изменения реквизитов ТЧ.
Процедура ПослеОбработкиШтрихкодов(Форма, ОбработанныеДанные, КэшированныеЗначения) Экспорт
	
	СтруктураДействий = ОбработанныеДанные;
	Если НЕ СтруктураДействий.Свойство("НеизвестныеШтрихкоды") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействий.НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		// Для тех, у кого есть профиль "Рабочее место кассира" мы не разрешаем регистрацию штрихкодов
		ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
		Если ПараметрыРаботыКлиента.Свойство("ЕстьПрофильРМК") И ПараметрыРаботыКлиента.ЕстьПрофильРМК Тогда
			ОповеститьОНенайденныхШтрихкодах(СтруктураДействий.НеизвестныеШтрихкоды);
			Возврат;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура("Форма, КэшированныеЗначения", Форма, КэшированныеЗначения);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьНеизвестныеШтрихкодыЗавершение", ШтрихкодированиеИСКлиент, ДополнительныеПараметры);
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			СтруктураДействий, Форма,,,, ОписаниеОповещения);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьКэшированныеШтрихкоды(ДанныеШтрихкодов, КэшированныеЗначения) Экспорт
	
	КэшированныеЗначения.Очистить();
	
КонецПроцедуры

// Вызывается после загрузки данных из ТСД. В процедуре нужно проанализировать полученные штрихкоды на предмет
// сканирования акцизной марки, а также обработать штрихкоды, не привязанные к номенклатуре.
//
// Параметры:
//  Форма - УправляемаяФорма - форма документа, в которой были обработаны штрихкоды,
//  ОбработанныеДанные - Структура - подготовленные ранее данные штрихкодов,
//  КэшированныеЗначения - Структура - используется механизмом обработки изменения реквизитов ТЧ.
Процедура ПослеОбработкиТаблицыТоваровПолученнойИзТСД(Форма, ОбработанныеДанные, КэшированныеЗначения) Экспорт
	
	СтруктураДействий = ОбработанныеДанные;
	
	ОповеститьОНенайденныхШтрихкодах(СтруктураДействий.НеизвестныеШтрихкоды);
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Форма.Элементы.Запасы.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьДанныеДляОбработкиТаблицыТоваровПолученнойИзТСД(
	Форма, ТаблицаТоваров, КэшированныеЗначения, ПараметрыЗаполнения, СтруктураДействий) Экспорт
	
	ПараметрыЗаполненияНоменклатурыЕГАИС = Новый Структура;
	ПараметрыЗаполненияНоменклатурыЕГАИС.Вставить("ЗаполнитьФлагАлкогольнаяПродукция", Ложь);
	ПараметрыЗаполненияНоменклатурыЕГАИС.Вставить("ИмяКолонки", "НоменклатураЕГАИС");
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьНоменклатуруЕГАИС", ПараметрыЗаполненияНоменклатурыЕГАИС);
	Если ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц Тогда
		СтруктураДействийСДобавленнымиСтроками.Вставить("ПересчитатьКоличествоЕдиниц");
	КонецЕсли;
	Если ПараметрыЗаполнения.ПересчитатьСумму Тогда
		СтруктураДействийСДобавленнымиСтроками.Вставить("ПересчитатьСумму");
	КонецЕсли;
	Если ПараметрыЗаполнения.ЗаполнитьИндексАкцизнойМарки Тогда
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьИндексАкцизнойМарки");
	КонецЕсли;
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	Если ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц Тогда
		СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьКоличествоЕдиниц");
	КонецЕсли;
	Если ПараметрыЗаполнения.ПересчитатьСумму Тогда
		СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьСумму");
	КонецЕсли;
	Если ПараметрыЗаполнения.ЗаполнитьИндексАкцизнойМарки Тогда
		СтруктураДействийСИзмененнымиСтроками.Вставить("ЗаполнитьИндексАкцизнойМарки");
	КонецЕсли;
	
	СтруктураДействий = ИнтеграцияМОТПУНФКлиентСервер.ПараметрыОбработкиШтрихкодов();
	
	СтруктураДействий.Штрихкоды                               = ТаблицаТоваров;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками  = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками   = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ТолькоТовары                            = Истина;
	СтруктураДействий.ШтрихкодыВТЧ                            = ПараметрыЗаполнения.ШтрихкодыВТЧ;
	СтруктураДействий.МаркируемаяПродукцияВТЧ                 = ПараметрыЗаполнения.МаркируемаяПродукцияВТЧ;
	СтруктураДействий.ЗагрузкаИзТСД                           = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаИПодборПродукцииМОТПКлиентПереопределяемый

Процедура СтруктураДанныхДляГенерацииСерии(ДанныеДляГенерацииСерии, ВидМаркируемойПродукции) Экспорт
	
	ДанныеДляГенерацииСерии = Новый Структура;
	ДанныеДляГенерацииСерии.Вставить("Номенклатура",	Неопределено);
	ДанныеДляГенерацииСерии.Вставить("Серия",			Неопределено);
	ДанныеДляГенерацииСерии.Вставить("ЕстьОшибка",		Ложь);
	ДанныеДляГенерацииСерии.Вставить("ТекстОшибки",		"");
	
	Если ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
		ДанныеДляГенерацииСерии.Вставить("МРЦ", 0);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет специфичные параметры открытия формы проверки и подбора табачной продукции в зависимости от точки вызова
//
// Параметры:
//  Форма - УправляемаяФорма - форма из которой происходит открытие формы проверки и подбора
//  Параметры - (См. ПроверкаИПодборПродукцииМОТПКлиентСервер.ПараметрыОткрытияФормыПроверкиИПодбора)
Процедура ПриУстановкеПараметровОткрытияФормыПроверкиИПодбора(Форма, Параметры) Экспорт
	
	Если СтрНачинаетсяС(Форма.ИмяФормы, "Документ.ЧекККМ") Тогда
		
		Параметры.ПроверятьМодифицированность = Ложь;
		
		ПараметрыОповещенияПриЗакрытии = Новый Структура;
		ПараметрыОповещенияПриЗакрытии.Вставить("Форма", Форма);
		ПараметрыОповещенияПриЗакрытии.Вставить("ВидПродукции", Параметры.ВидМаркируемойПродукции);
		
		Параметры.ОписаниеОповещенияПриЗакрытии = Новый ОписаниеОповещения(
			"ПриЗакрытииФормыПроверкиИПодбора",
			СобытияФормИСУНФКлиент,
			ПараметрыОповещенияПриЗакрытии);
		
		Параметры.АдресПроверяемыхДанных = ИнтеграцияМОТПУНФВызовСервера.АдресДанныхПроверкиМаркируемойПродукцииЧекККМ(
			ШтрихкодированиеИСКлиент.ПараметрыСканирования(Форма,, Параметры.ВидМаркируемойПродукции),
			Форма.Объект,
			Форма.УникальныйИдентификатор,
			Параметры.ВидМаркируемойПродукции);
		
	КонецЕсли;
	
	Если СтрНачинаетсяС(Форма.ИмяФормы, "Документ.ЧекККМ")
		ИЛИ СтрНачинаетсяС(Форма.ИмяФормы, "Документ.ПриходнаяНакладная")
		ИЛИ СтрНачинаетсяС(Форма.ИмяФормы, "Документ.РасходнаяНакладная")
		ИЛИ СтрНачинаетсяС(Форма.ИмяФормы, "Документ.КорректировкаРеализации")
		ИЛИ СтрНачинаетсяС(Форма.ИмяФормы, "Документ.ОтчетОПереработке")
		ИЛИ СтрНачинаетсяС(Форма.ИмяФормы, "Документ.ОтчетПереработчика") Тогда
		
		Параметры.ИмяРеквизитаДокументОснование = "";
		Параметры.ИмяРеквизитаСклад             = "СтруктурнаяЕдиница";
		Параметры.ИмяРеквизитаКонтрагент        = "Контрагент";
		
	ИначеЕсли СтрНачинаетсяС(Форма.ИмяФормы, "Документ.ПередачаТоваровМеждуОрганизациями") Тогда
		
		Параметры.ИмяРеквизитаДокументОснование = "";
		Параметры.ИмяРеквизитаСклад             = "СтруктурнаяЕдиница";
		Параметры.ИмяРеквизитаКонтрагент        = "КонтрагентПолучатель";
		
	ИначеЕсли СтрНачинаетсяС(Форма.ИмяФормы, "Документ.ЗаказПокупателя") Тогда
		
		Параметры.ИмяРеквизитаДокументОснование = "";
		Параметры.ИмяРеквизитаСклад             = "СтруктурнаяЕдиницаРезерв";
		Параметры.ИмяРеквизитаКонтрагент        = "Контрагент";
		
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма,"ПараметрыИнтеграцииГосИС") Тогда
		
		НастройкиИнтеграции = Форма.ПараметрыИнтеграцииГосИС.Получить(Параметры.ВидМаркируемойПродукции);
		Если Не(НастройкиИнтеграции = Неопределено) Тогда
			Параметры.ПроверкаЭлектронногоДокумента = НастройкиИнтеграции.ЕстьЭлектронныйДокумент;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет специфичные действия после закрытия формы проверки и подбора табачной продукции в зависимости от точки вызова
//
// Параметры:
//  РезультатЗакрытия - Произвольный - результат закрытия формы проверки и подбора
//  ДополнительныеПараметры - Структура с реквизитом Форма (управляемая форма из которой происходил вызов)
//
Процедура ПриЗакрытииФормыПроверкиИПодбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Форма.Прочитать();
	
КонецПроцедуры

Процедура ПередОткрытиемФормыПроверкиПодбора(Форма, ПараметрыОткрытияФормыПроверки, ПараметрыФормыПроверки, Отказ) Экспорт
	
	Если ПараметрыФормыПроверки.Свойство("Склад")
		И Не ЗначениеЗаполнено(ПараметрыФормыПроверки.Склад) Тогда
		
		ПараметрыФормыПроверки.Склад = ИнтеграцияМОТПУНФВызовСервера.ПолучитьСтруктурнуюЕдиницуПоУмолчанию(ПараметрыФормыПроверки.ПроверяемыйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейсСлужебный

Функция ПрименитьКешПоСтроке(Форма, ДанныеСтроки, ДанныеКешаСтроки) Экспорт
	
	КлючСвязиИзменен = ДанныеСтроки.Номенклатура<>ДанныеКешаСтроки.Номенклатура
		ИЛИ ДанныеСтроки.Характеристика<>ДанныеКешаСтроки.Характеристика
		ИЛИ ДанныеСтроки.Серия<>ДанныеКешаСтроки.Серия;
	
	ТабличнаяЧастьТовары = Форма.Объект.Запасы;
	СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,Партия");
	СтруктураПоискаМОТП = Новый Структура("Номенклатура,Характеристика,Серия");

	Если КлючСвязиИзменен И ДанныеКешаСтроки.МаркируемаяПродукцияГосИС Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПоискаМОТП, ДанныеКешаСтроки);
		СтрокиКеша = Форма.ДанныеШтрихкодовУпаковокГосИС.НайтиСтроки(СтруктураПоискаМОТП);
		Если СтрокиКеша.Количество() Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеСтроки.МаркируемаяПродукцияГосИС Тогда
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеСтроки);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаМОТП, ДанныеСтроки);
		СтруктураПоиска.Партия = ДанныеСтроки.Серия;
		СтрокиКеша = Форма.ДанныеШтрихкодовУпаковокГосИС.НайтиСтроки(СтруктураПоискаМОТП);
		СтрокиТовары = ТабличнаяЧастьТовары.НайтиСтроки(СтруктураПоиска);
		КоличествоПоКлючу = 0;
		Для Каждого СтрокаПоКлючу Из СтрокиТовары Цикл
			КоличествоПоКлючу = КоличествоПоКлючу + СтрокаПоКлючу.Количество;
		КонецЦикла;
		Если СтрокиКеша.Количество() = 0 Тогда
			СтатусПроверкиГосИС = 2;
		ИначеЕсли КоличествоПоКлючу = СтрокиКеша[0].Количество Тогда
			СтатусПроверкиГосИС = 1;
		Иначе
			СтатусПроверкиГосИС = 2;
		КонецЕсли;
		Для Каждого СтрокаПоКлючу Из СтрокиТовары Цикл
			СтрокаПоКлючу.СтатусПроверкиГосИС = СтатусПроверкиГосИС;
		КонецЦикла;
		
	Иначе
		ДанныеСтроки.СтатусПроверкиГосИС = 0;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает структуру, которая затем обрабатывается процедурами заполнения ТЧ.
//
// Параметры:
//  Штрихкод - штрихкод, который необходимо обработать.
//  Количество - количество товаров с указанным штрихкодом.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * Штрихкод - Строка - Штрихкод.
//   * Количество - Число - Количество.
//
Функция СтруктураДанныхШтрихкода(Штрихкод, Количество)

	Возврат Новый Структура("Штрихкод, Количество", Штрихкод, Количество);

КонецФункции

Процедура ПоказатьВводШтрихкодаЗавершение(Штрихкод, ДополнительныеПараметры) Экспорт
	
	ОповещениеУспешногоВвода = ДополнительныеПараметры.ОповещениеУспешногоВвода;
	
	Если (Штрихкод <> Неопределено) Тогда
		Если Не ПустаяСтрока(Штрихкод) Тогда
			ВыполнитьОбработкуОповещения(
				ОповещениеУспешногоВвода,
				СтруктураДанныхШтрихкода(Штрихкод, 1));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОповеститьОНенайденныхШтрихкодах(НеизвестныеШтрихкоды)
	
	СтрокаПредупреждения = "";
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		
		СтрокаПредупреждения = СтрокаПредупреждения + СтрокаСообщения + Символы.ПС;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаПредупреждения) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти