#Область ПрограммныйИнтерфейс

// Проверяет номер банковского счета на соответствие реквизитам выбранного банка.
//   Предназначена для вызова из процедуры ОбработкаПроверкиЗаполнения справочника банковских счетов.
//
// Параметры:
//   Объект - СправочникОбъект.БанковскиеСчетаКонтрагентов
//   ИмяРеквизитаНомерСчета - Строка
//   ИмяРеквизитаБанк - Строка
//   Отказ - Булево
//
Процедура ПроверитьБанковскийСчет(Объект, ИмяРеквизитаНомерСчета, ИмяРеквизитаБанк, Отказ = Неопределено) Экспорт
	НомерСчета = Объект[ИмяРеквизитаНомерСчета];
	Банк = Объект[ИмяРеквизитаБанк];
	Если Не ЗначениеЗаполнено(НомерСчета) Или Не ЗначениеЗаполнено(Банк) Тогда
		Возврат; // Должна сработать проверка заполнения владельца.
	КонецЕсли;
	РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Банк, "Код, КоррСчет");
	РезультатПроверки = РезультатПроверкиНомераСчета(НомерСчета, РеквизитыБанка.Код, РеквизитыБанка.КоррСчет);
	Если Не РезультатПроверки.Успех Тогда
		Текст = РезультатПроверки.Пояснение;
		СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, Объект, Текст, ИмяРеквизитаНомерСчета);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// АПК:558-выкл Кандидаты в публичный программный интерфейс.
// АПК:559-выкл Кандидаты в публичный программный интерфейс.

// Проверяет номер расчетного счета на соответствие БИКу и корреспондентскому счету банка.
//
// Параметры:
//   НомерСчета            - Строка
//   БИК                   - Строка
//   КорреспондентскийСчет - Строка
//
// Возвращаемое значение:
//   Структура - Результат проверки:
//       * Успех - Булево - Если Истина, то номер счета прошел проверку. В пояснении будут подробности.
//       * Пояснение - Строка - Текст для вывода результатов в интерфейсе.
//
Функция РезультатПроверкиНомераСчета(Знач НомерСчета, Знач БИК, Знач КорреспондентскийСчет) Экспорт
	Возврат ПроверкиБЗККлиентСервер.РезультатПроверкиНомераСчета(НомерСчета, БИК, КорреспондентскийСчет);
КонецФункции

// Проверяет номер ОГРН на длину и контрольное число.
//   В отличие от функции РегламентированныеДанныеКлиентСервер.ОГРНСоответствуетТребованиям,
//   эта функция игнорирует ошибки проверки контрольного числа в базовых версиях,
//   т.к. встречаются действующие организации с неверным контрольным числом в ОГРН.
//
// Параметры:
//   ОГРН               - Строка
//   ЭтоЮридическоеЛицо - Булево, Неопределено
//
// Возвращаемое значение:
//   Структура - Результат проверки:
//       * Успех     - Булево - Если Истина, то номер ОГРН прошел проверку. В пояснении будут подробности.
//       * Пояснение - Строка - Текст для вывода результатов в интерфейсе.
//
Функция РезультатПроверкиОГРН(Знач ОГРН, Знач ЭтоЮридическоеЛицо = Неопределено) Экспорт
	Если ЭтоЮридическоеЛицо = Неопределено Тогда
		ЭтоЮридическоеЛицо = СтрДлина(СокрЛП(ОГРН)) <> 15;
	КонецЕсли;
	
	// Важно чтобы сперва проверка выполнилась стандартная проверка,
	// которая может быть переопределена расширениями.
	РезультатПроверки = Новый Структура("Успех, Пояснение");
	РезультатПроверки.Пояснение = "";
	РезультатПроверки.Успех     = РегламентированныеДанныеКлиентСервер.ОГРНСоответствуетТребованиям(
		ОГРН,
		ЭтоЮридическоеЛицо,
		РезультатПроверки.Пояснение);
	
	// Уточнение для базовой версии конфигурации вызывается только в том случае,
	// если номер не прошел стандартную проверку.
	Если Не РезультатПроверки.Успех И СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		РезультатПроверки.Успех = Истина;
		
		ЛишниеСимволы = СтроковыеФункцииБЗККлиентСервер.УдалитьЦифрыИзСтроки(ОГРН);
		Если Не ПустаяСтрока(ЛишниеСимволы) Тогда
			Если СтрДлина(ЛишниеСимволы) = 1 Тогда
				Пояснение = НСтр("ru = 'В ОГРН должны быть только цифры (%1 - не цифра).'");
			Иначе
				Пояснение = НСтр("ru = 'В ОГРН должны быть только цифры (%1 - не цифры).'");
			КонецЕсли;
			РезультатПроверки.Успех = Ложь;
			РезультатПроверки.Пояснение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Пояснение, ЛишниеСимволы);
			Возврат РезультатПроверки;
		КонецЕсли;
		
		ДлинаОГРН = СтрДлина(ОГРН);
		Если ЭтоЮридическоеЛицо Тогда
			Если ДлинаОГРН <> 13 Тогда
				РезультатПроверки.Успех     = Ложь;
				РезультатПроверки.Пояснение = НСтр("ru = 'ОГРН юридического лица должен состоять из 13 цифр.'");
				Возврат РезультатПроверки;
			КонецЕсли;
		Иначе
			Если ДлинаОГРН <> 15 Тогда
				РезультатПроверки.Успех     = Ложь;
				РезультатПроверки.Пояснение = НСтр("ru = 'ОГРН физического лица должен состоять из 15 цифр.'");
				Возврат РезультатПроверки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатПроверки.Успех И Не ЗначениеЗаполнено(РезультатПроверки.Пояснение) Тогда
		РезультатПроверки.Пояснение = НСтр("ru = 'ОГРН соответствует требованиям.'");
	КонецЕсли;
	
	Возврат РезультатПроверки;
КонецФункции

// Проверяет заполнение реквизита, в случае незаполненности включает флажок Отказ и сообщает об ошибке пользователю.
//
// Параметры:
//   Отказ        - Булево      - Флажок отказа, который включается в случае незаполненности реквизита.
//   Объект       - ЛюбойОбъект - Проверяемый объект.
//   ИмяРеквизита - Строка      - Проверяемый реквизит.
//   Текст        - Строка      - Текст ошибки. Если не указан, то будет сформирован стандартный текст ошибки.
//
Процедура ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, Объект, ИмяРеквизита, Знач Текст = "", ОбъектМетаданных = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(Объект[ИмяРеквизита]) Тогда
		СообщитьОбОшибкеЗаполненияРеквизитаОбъекта(Отказ, Объект, ИмяРеквизита, Текст, ОбъектМетаданных);
	КонецЕсли;
КонецПроцедуры

// Проверяет заполнение реквизита, в случае незаполненности включает флажок Отказ и сообщает об ошибке пользователю.
//
// Параметры:
//   Отказ        - Булево      - Флажок отказа, который включается в случае незаполненности реквизита.
//   Объект       - ЛюбойОбъект - Проверяемый объект.
//   ИмяРеквизита - Строка      - Проверяемый реквизит типа "Адрес электронной почты".
//
Процедура ПроверитьЗаполнениеЭлектроннойПочтыОбъекта(Отказ, Объект, ИмяРеквизита, ОбъектМетаданных = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(Объект[ИмяРеквизита]) Тогда
		Текст = СтрШаблон(
			НСтр("ru = 'Не заполнен %1.'"),
			ПредставлениеРеквизитаОбъекта(Объект, ОбъектМетаданных, ИмяРеквизита));
		СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, Объект, Текст, ИмяРеквизита);
	ИначеЕсли Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Объект[ИмяРеквизита], Истина) Тогда
		Текст = СтрШаблон(
			НСтр("ru = '%1 заполнен неверно.'"),
			ПредставлениеРеквизитаОбъекта(Объект, ОбъектМетаданных, ИмяРеквизита));
		СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, Объект, Текст, ИмяРеквизита);
	КонецЕсли;
КонецПроцедуры

// Проверяет заполнение реквизита, в случае незаполненности включает флажок Отказ и сообщает об ошибке пользователю.
//
// Параметры:
//   Отказ        - Булево      - Флажок отказа, который включается в случае незаполненности реквизита.
//   Объект       - ЛюбойОбъект            - Проверяемый объект.
//   Строка       - Строка табличной части - Проверяемая строка табличной части.
//   ИмяТаблицы   - Строка                 - Имя табличной части.
//   Строка       - Строка табличной части - Строка табличной части.
//   ИмяРеквизита - Строка                 - Имя реквизита строки табличной части.
//   Текст        - Строка                 - Текст ошибки. Если не указан, то будет сформирован стандартный текст ошибки.
//
Процедура ПроверитьЗаполнениеРеквизитаСтрокиТаблицы(Отказ, Объект, ИмяТаблицы, Строка, ИмяРеквизита, Знач Текст = "", ОбъектМетаданных = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(Строка[ИмяРеквизита]) Тогда
		Если Текст = "" Тогда
			Текст = СтрШаблон(
				НСтр("ru = 'Не заполнено поле ""%1"".'"),
				ПредставлениеРеквизитаТаблицыОбъекта(Объект, ОбъектМетаданных, ИмяТаблицы, ИмяРеквизита));
		КонецЕсли;
		СообщенияБЗК.СообщитьОбОшибкеВСтрокеТаблицы(Отказ, Объект, ИмяТаблицы, Строка, ИмяРеквизита, Текст);
	КонецЕсли;
КонецПроцедуры

// Проверяет корректность заполнения начала и окончание периода в строке таблицы.
//
// Параметры:
//   Отказ - Булево - Флажок отказа, который будет включен в случае ошибки.
//   Объект - ЛюбаяСсылка, ЛюбойОбъект - Проверяемый объект.
//   ИмяТаблицы - Строка - Имя табличной части.
//   Строка - Строка табличной части - Строка таблицы.
//   ИмяПоляДатыНачала - Строка - Имя реквизита строки табличной части, в котором хранится дата начала периода.
//   ИмяПоляДатыОкончания - Строка - Имя реквизита строки табличной части, в котором хранится дата окончания.
//   ПредставлениеВРодительномПадеже - Строка - Представление (заголовок) периода в родительном падеже.
//
// Возвращаемое значение:
//   Булево - Признак того, что поля успешно прошли проверку.
//       Возвращает Ложь если была выявлена ошибка.
//
Функция ПроверитьПериодВСтрокеТаблицы(Отказ, Объект, ИмяТаблицы, Строка, ИмяПоляДатыНачала, ИмяПоляДатыОкончания, ПредставлениеВРодительномПадеже) Экспорт
	Дата1 = Строка[ИмяПоляДатыНачала];
	Дата2 = Строка[ИмяПоляДатыОкончания];
	Если Не ЗначениеЗаполнено(Дата1) Тогда
		Текст = СтрШаблон(НСтр("ru = 'Не заполнена дата начала %1.'"), ПредставлениеВРодительномПадеже);
		СообщенияБЗК.СообщитьОбОшибкеВСтрокеТаблицы(Отказ, Объект, ИмяТаблицы, Строка, ИмяПоляДатыНачала, Текст);
		Возврат Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(Дата2) Тогда
		Текст = СтрШаблон(НСтр("ru = 'Не заполнена дата окончания %1.'"), ПредставлениеВРодительномПадеже);
		СообщенияБЗК.СообщитьОбОшибкеВСтрокеТаблицы(Отказ, Объект, ИмяТаблицы, Строка, ИмяПоляДатыОкончания, Текст);
		Возврат Ложь;
	ИначеЕсли Дата1 > Дата2 Тогда
		Текст = СтрШаблон(НСтр("ru = 'Дата начала %1 больше даты окончания.'"), ПредставлениеВРодительномПадеже);
		СообщенияБЗК.СообщитьОбОшибкеВСтрокеТаблицы(Отказ, Объект, ИмяТаблицы, Строка, ИмяПоляДатыНачала, Текст);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

// Проверяет корректность заполнения номера листка нетрудоспособности в шапке документа.
//
// Параметры:
//   Отказ        - Булево                   - Флажок отказа, который будет включен в случае ошибки.
//   Объект       - ЛюбаяСсылка, ЛюбойОбъект - Проверяемый объект.
//   ИмяРеквизита - Строка                   - Имя проверяемого реквизита объекта.
//
Процедура ПроверитьНомерЛН(Отказ, Объект, ИмяРеквизита) Экспорт
	ТекстОшибки = УчетПособийСоциальногоСтрахования.ПроверитьНомерЛН(Объект[ИмяРеквизита]);
	Если ТекстОшибки <> "" Тогда
		СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, Объект, ТекстОшибки, ИмяРеквизита);
	КонецЕсли;
КонецПроцедуры

// Проверяет корректность заполнения регистрационного номера ФСС в шапке документа.
//
// Параметры:
//   Отказ        - Булево                   - Флажок отказа, который будет включен в случае ошибки.
//   Объект       - ЛюбаяСсылка, ЛюбойОбъект - Проверяемый объект.
//   ИмяРеквизита - Строка                   - Имя проверяемого реквизита объекта.
//   Обязательный - Булево                   - Признак обязательности заполнения реквизита.
//
Процедура ПроверитьРегистрационныйНомерФСС(Отказ, Объект, ИмяРеквизита, Обязательный = Истина) Экспорт
	РегистрационныйНомер = СокрЛП(Объект[ИмяРеквизита]);
	Если Не ЗначениеЗаполнено(РегистрационныйНомер) Тогда
		Если Обязательный Тогда
			ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, Объект, ИмяРеквизита);
		КонецЕсли;
	ИначеЕсли СтрДлина(РегистрационныйНомер) <> 10 Тогда
		Текст = НСтр("ru = 'В регистрационном номере ФСС %1 символов, а должно быть 10.'");
		Текст = СтрШаблон(Текст, СтрДлина(РегистрационныйНомер));
		СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, Объект, Текст, ИмяРеквизита);
	Иначе
		ЛишниеСимволы = СтроковыеФункцииБЗККлиентСервер.УдалитьЦифрыИзСтроки(РегистрационныйНомер);
		Если ЛишниеСимволы <> "" Тогда
			Если СтрДлина(ЛишниеСимволы) = 1 Тогда
				Текст = НСтр("ru = 'В регистрационном номере ФСС должны быть только цифры (""%1"" - не цифра).'");
			Иначе
				Текст = НСтр("ru = 'В регистрационном номере ФСС должны быть только цифры (""%1"" - не цифры).'");
			КонецЕсли;
			Текст = СтрШаблон(Текст, ЛишниеСимволы);
			СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, Объект, Текст, ИмяРеквизита);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Проверяет корректность заполнения периода в шапке документа.
//
// Параметры:
//   Отказ  - Булево                          - Флажок отказа, который будет включен в случае ошибки.
//   Объект - ЛюбаяСсылка, ЛюбойОбъект        - Проверяемый объект.
//   ИмяДатыОкончания                - Строка - Имя реквизита объект, в котором хранится дата начала периода.
//   ИмяДатыОкончания                - Строка - Имя реквизита объект, в котором хранится дата окончания.
//   ПредставлениеВРодительномПадеже - Строка - Представление (заголовок) периода в родительном падеже, например:
//                                              НСтр("ru = 'отпуска по уходу'").
//   Обязательный                    - Булево - Признак обязательности заполнения реквизита.
//
Процедура ПроверитьПериод(Отказ, Объект, ИмяДатыНачала, ИмяДатыОкончания, ПредставлениеВРодительномПадеже, Обязательный = Истина) Экспорт
	ДатаНачала    = Объект[ИмяДатыНачала];
	ДатаОкончания = Объект[ИмяДатыОкончания];
	Если Не Обязательный И Не ЗначениеЗаполнено(ДатаНачала) И Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		Возврат;
	КонецЕсли;
	ТекстОшибки = ПроверкиБЗККлиентСервер.ТекстОшибкиЗаполненияПериода(
		ДатаНачала,
		ДатаОкончания);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Текст = СтрШаблон(ТекстОшибки, ПредставлениеВРодительномПадеже);
		СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, Объект, Текст, ИмяДатыНачала);
	КонецЕсли;
КонецПроцедуры

// Проверяет корректность заполнения СНИЛС в шапке документа.
//
// Параметры:
//   Отказ        - Булево                   - Флажок отказа, который будет включен в случае ошибки.
//   Объект       - ЛюбаяСсылка, ЛюбойОбъект - Проверяемый объект.
//   ИмяРеквизита - Строка                   - Имя проверяемого реквизита объекта.
//
Процедура ПроверитьСНИЛС(Отказ, Объект, ИмяРеквизита) Экспорт
	СНИЛС = Объект[ИмяРеквизита];
	Если Не ЗначениеЗаполнено(СНИЛС) Тогда
		СообщитьОбОшибкеЗаполненияРеквизитаОбъекта(Отказ, Объект, ИмяРеквизита);
	Иначе
		ТекстОшибки = "";
		Если Не РегламентированныеДанныеКлиентСервер.СтраховойНомерПФРСоответствуетТребованиям(СНИЛС, ТекстОшибки) Тогда
			Текст = НСтр("ru = 'Ошибка в СНИЛС %1: %2'");
			Текст = СтрШаблон(Текст, СНИЛС, ТекстОшибки);
			СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, Объект, Текст, ИмяРеквизита);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// АПК:559-вкл
// АПК:558-вкл

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПредставлениеРеквизитаОбъекта(Объект, ОбъектМетаданных, ИмяРеквизита)
	Если ОбъектМетаданных = Неопределено Тогда
		ОбъектМетаданных = ОбъектМетаданных(Объект);
	КонецЕсли;
	Возврат ?(ОбъектМетаданных = Неопределено, ИмяРеквизита, ОбъектМетаданных.Реквизиты[ИмяРеквизита].Представление());
КонецФункции

Функция ПредставлениеРеквизитаТаблицыОбъекта(Объект, ОбъектМетаданных, ИмяТаблицы, ИмяРеквизита)
	Если ОбъектМетаданных = Неопределено Тогда
		ОбъектМетаданных = ОбъектМетаданных(Объект);
	КонецЕсли;
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат ИмяТаблицы + "." + ИмяРеквизита;
	Иначе
		Возврат ОбъектМетаданных.ТабличныеЧасти[ИмяТаблицы].Реквизиты[ИмяРеквизита].Представление();
	КонецЕсли;
КонецФункции

Функция ОбъектМетаданных(Объект)
	ТипДанныхXML = XMLТипЗнч(Объект);
	Если СериализацияБЗК.ЭтоТипОбъекта(ТипДанныхXML)
		Или СериализацияБЗК.ЭтоТипСсылки(ТипДанныхXML) Тогда
		Возврат Объект.Метаданные();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Процедура СообщитьОбОшибкеЗаполненияРеквизитаОбъекта(Отказ, Объект, ИмяРеквизита, Знач Текст = "", ОбъектМетаданных = Неопределено)
	Если Текст = "" Тогда
		Текст = СтрШаблон(
			НСтр("ru = 'Не заполнено поле ""%1"".'"),
			ПредставлениеРеквизитаОбъекта(Объект, ОбъектМетаданных, ИмяРеквизита));
	КонецЕсли;
	СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, Объект, Текст, ИмяРеквизита);
КонецПроцедуры

#КонецОбласти

