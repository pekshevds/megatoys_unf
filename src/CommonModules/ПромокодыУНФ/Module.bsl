
///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Функция СегенерироватьПромокоды(СловарьСимволов, ДлинаПромокода, КоличествоПромокодов, Маска = "[Промокод]") Экспорт	
	
	Если НЕ ТипЗнч(СловарьСимволов) = Тип("Массив")
		ИЛИ СловарьСимволов.Количество() < 1 Тогда
		ВызватьИсключение("Не задан список символов для использования в промокоде");
	КонецЕсли;
	ДлинаСловаря = СловарьСимволов.Количество();
	КоличествоКомбинаций = Pow(ДлинаСловаря, ДлинаПромокода);
	ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());	
	Результат = Новый Массив;
	Для Счетчик = 1 По КоличествоПромокодов Цикл
		ИндексКомбинации = ГСЧ.СлучайноеЧисло(0, КоличествоКомбинаций);
		ТекущаяКомбинацияСимволов = ПолучитьПромокодИзСловаря(СловарьСимволов, ДлинаПромокода, ИндексКомбинации); 
		ТекущийПромокод = СтрЗаменить(Маска, "[Промокод]", ТекущаяКомбинацияСимволов);
		Результат.Добавить(ТекущийПромокод);
	КонецЦикла;
	
	// Проверка уникальности
	ОграничениеПопытокЗаменыНеуникальныхПромокодов = 3;
	СуществующиеПромокоды = СкидкиПромокодов(Результат);
	СчетчикПопытокЗаменыНеуникальныхПромокодов = 0;
	Пока СуществующиеПромокоды.Количество() > 0 
		И СчетчикПопытокЗаменыНеуникальныхПромокодов <= ОграничениеПопытокЗаменыНеуникальныхПромокодов Цикл
		СоответствиеЗамены = Новый Соответствие;
		Для Каждого НеУникальныйПромокод Из СуществующиеПромокоды Цикл
			ИндексКомбинации = ГСЧ.СлучайноеЧисло(0, КоличествоКомбинаций);
			НоваяКомбинацияСимволов = ПолучитьПромокодИзСловаря(СловарьСимволов, ДлинаПромокода, ИндексКомбинации); 			
			НовыйПромокод = СтрЗаменить(Маска, "[Промокод]", НоваяКомбинацияСимволов);
			СоответствиеЗамены.Вставить(НеУникальныйПромокод.Ключ);
			ИндексКУдалению = Результат.Найти(НеУникальныйПромокод);
			Результат.Удалить(ИндексКУдалению);
			Результат.Добавить(НовыйПромокод);
		КонецЦикла; 
		СуществующиеПромокоды = СкидкиПромокодов(Результат);
		СчетчикПопытокЗаменыНеуникальныхПромокодов = СчетчикПопытокЗаменыНеуникальныхПромокодов + 1;
	КонецЦикла;
	Если СуществующиеПромокоды.Количество() > 0 И СчетчикПопытокЗаменыНеуникальныхПромокодов > ОграничениеПопытокЗаменыНеуникальныхПромокодов Тогда
		ШаблонСообщения = НСтр("ru = 'Не удалось сгенерировать промокод: исчерпаны попытки добиться уникальности (%1).'");
		МаксимумПромокодовВывести = 5;
		Сч = 0;
		Для Каждого ОшибочныйПромокод Из СуществующиеПромокоды Цикл
			ТекстОшибки = СтрШаблон(ШаблонСообщения, ОшибочныйПромокод.Ключ);
			Сч = Сч + 1;
			Если Сч > МаксимумПромокодовВывести Тогда
				Прервать;
			КонецЕсли;
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ОшибочныйПромокод.Значение);		
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Генерация промокодов'"),
				УровеньЖурналаРегистрации.Ошибка,,ОшибочныйПромокод.Значение, ТекстОшибки);
					
		КонецЦикла;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции


Функция СкидкиПромокодов(Промокоды) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Промокоды.Промокод КАК Промокод,
	|	УсловияСкидок.Ссылка КАК СкидкаНаценка
	|ИЗ
	|	РегистрСведений.Промокоды КАК Промокоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АвтоматическиеСкидки.УсловияПредоставления КАК УсловияСкидок
	|		ПО Промокоды.УсловиеПредоставленияСкидки = УсловияСкидок.УсловиеПредоставления
	|ГДЕ
	|	Промокоды.Промокод В(&Промокоды)";
	Запрос.УстановитьПараметр("Промокоды", Промокоды); 
	ВыборкаПромокоды = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПромокоды.Следующий() Цикл
		Результат.Вставить(ВыборкаПромокоды.Промокод, ВыборкаПромокоды.СкидкаНаценка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция УсловияПримененияПромокодов(Промокоды) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Промокоды.Промокод КАК Промокод,
	|	Промокоды.УсловиеПредоставленияСкидки КАК Условие
	|ИЗ
	|	РегистрСведений.Промокоды КАК Промокоды
	|ГДЕ
	|	Промокоды.Промокод В(&Промокоды)";
	Запрос.УстановитьПараметр("Промокоды", Промокоды); 
	ВыборкаПромокоды = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПромокоды.Следующий() Цикл
		Результат.Вставить(ВыборкаПромокоды.Промокод, ВыборкаПромокоды.Условие);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция УсловияПримененияСкидокЗаПромокод(СкидкиНаценки) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АвтоматическиеСкидкиУсловияПредоставления.Ссылка КАК СкидкаНаценка,
	|	АвтоматическиеСкидкиУсловияПредоставления.УсловиеПредоставления КАК УсловиеПредоставления
	|ИЗ
	|	Справочник.АвтоматическиеСкидки.УсловияПредоставления КАК АвтоматическиеСкидкиУсловияПредоставления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок КАК ПараметрыУсловий
	|		ПО (ПараметрыУсловий.Ссылка = АвтоматическиеСкидкиУсловияПредоставления.УсловиеПредоставления)
	|			И (ПараметрыУсловий.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаПромокод))
	|ГДЕ
	|	АвтоматическиеСкидкиУсловияПредоставления.Ссылка В(&СкидкиНаценки)";
	Запрос.УстановитьПараметр("СкидкиНаценки", СкидкиНаценки); 
	ВыборкаУсловия = Запрос.Выполнить().Выбрать();
	Пока ВыборкаУсловия.Следующий() Цикл
		Результат[ВыборкаУсловия.СкидкаНаценка] = ВыборкаУсловия.УсловиеПредоставления;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СкидкиСвязанныеСУсловиемНаПромокод(Условия) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АвтоматическиеСкидкиУсловияПредоставления.Ссылка КАК СкидкаНаценка,
	|	АвтоматическиеСкидкиУсловияПредоставления.УсловиеПредоставления КАК УсловияПредоставления
	|ИЗ
	|	Справочник.АвтоматическиеСкидки.УсловияПредоставления КАК АвтоматическиеСкидкиУсловияПредоставления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок КАК ПараметрыУсловий
	|		ПО (ПараметрыУсловий.Ссылка = АвтоматическиеСкидкиУсловияПредоставления.УсловиеПредоставления)
	|			И (ПараметрыУсловий.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаПромокод))
	|ГДЕ
	|	АвтоматическиеСкидкиУсловияПредоставления.УсловиеПредоставления В(&Условия)";
	Запрос.УстановитьПараметр("Условия", Условия); 
	ВыборкаУсловия = Запрос.Выполнить().Выбрать();
	Пока ВыборкаУсловия.Следующий() Цикл
		Если Результат[ВыборкаУсловия.УсловияПредоставления] = Неопределено Тогда
			Результат[ВыборкаУсловия.УсловияПредоставления] = Новый Массив();
		КонецЕсли;
		Результат[ВыборкаУсловия.УсловияПредоставления].Добавить(ВыборкаУсловия.СкидкаНаценка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции  

Функция СкидкиВыдачиПромокодаПоУсловию(УсловиеСледующейПокупки, СработавшиеСкидки = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СкидкаВыдачиПромокода.Ссылка КАК СкидкаВыдачиПромокода
	|ИЗ
	|	Справочник.АвтоматическиеСкидки КАК СкидкаСледующейПокупки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АвтоматическиеСкидки КАК СкидкаВыдачиПромокода
	|		ПО (СкидкаВыдачиПромокода.СкидкаНаСледующуюПокупкуПоПромокоду = СкидкаСледующейПокупки.Ссылка)
	|			И (СкидкаВыдачиПромокода.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Промокод))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АвтоматическиеСкидки.УсловияПредоставления КАК УсловияСледующейПокупки
	|		ПО СкидкаСледующейПокупки.Ссылка = УсловияСледующейПокупки.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок КАК ПараметрыУсловий
	|		ПО (ПараметрыУсловий.Ссылка = УсловияСледующейПокупки.УсловиеПредоставления)
	|			И (ПараметрыУсловий.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаПромокод))
	|ГДЕ
	|	ПараметрыУсловий.Ссылка В(&УсловиеПромокода)
	|	И СкидкаВыдачиПромокода.Ссылка В (&СработавшиеСкидки)";
	Запрос.УстановитьПараметр("УсловиеПромокода", УсловиеСледующейПокупки); 
	Если СработавшиеСкидки = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И СкидкаВыдачиПромокода.Ссылка В (&СработавшиеСкидки)", "");
	Иначе
		Запрос.УстановитьПараметр("СработавшиеСкидки", СработавшиеСкидки); 
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	ТаблицаСкидок = Запрос.Выполнить().Выгрузить();
	Результат = ТаблицаСкидок.ВыгрузитьКолонку("СкидкаВыдачиПромокода");
	
	Возврат Результат;
	
КонецФункции


Функция СработавшиеСкидкиСВыдачейПромокода(ТаблицаСработавшихСкидок) Экспорт
	
	МассивСкидок = Новый Массив;
	Для Каждого СтрокаСкидки Из ТаблицаСработавшихСкидок Цикл
		МассивСкидок.Добавить(СтрокаСкидки.СкидкаНаценка);
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АвтоматическиеСкидки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.АвтоматическиеСкидки КАК АвтоматическиеСкидки
	|ГДЕ
	|	АвтоматическиеСкидки.Ссылка В(&СкидкиДокумента)
	|	И АвтоматическиеСкидки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Промокод)";
	Запрос.УстановитьПараметр("СкидкиДокумента", МассивСкидок);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат Результат;
	
КонецФункции

Функция БазовыйСловарьСимволов() Экспорт
	// Латинские символы и цифры, которые невозможно перепутать с кириллическими (например О, O и 0 пишутся очень похоже)
	// Если промокод будет составлен только из символов, которые имеют похожее начертание с кириллическими буквами
	// Это может оказаться плохим опытом покупателя. Учитывая случайную генерацию, такие комбинации вполне могут возникнуть.
	// Поэтому сразу будем использовать только символы, которые трактуются однозначно
	МассивСимволов = Новый Массив();
	МассивСимволов.Добавить("1");
	МассивСимволов.Добавить("2");
	МассивСимволов.Добавить("3");
	МассивСимволов.Добавить("4");
	МассивСимволов.Добавить("5");
	МассивСимволов.Добавить("6");
	МассивСимволов.Добавить("7");
	МассивСимволов.Добавить("8");
	МассивСимволов.Добавить("9");
	МассивСимволов.Добавить("D");
	МассивСимволов.Добавить("F");
	МассивСимволов.Добавить("G");
	МассивСимволов.Добавить("I");
	МассивСимволов.Добавить("J");
	МассивСимволов.Добавить("L");
	МассивСимволов.Добавить("N");
	МассивСимволов.Добавить("Q");
	МассивСимволов.Добавить("R");
	МассивСимволов.Добавить("S");
	МассивСимволов.Добавить("U");
	МассивСимволов.Добавить("V");
	МассивСимволов.Добавить("W");
	МассивСимволов.Добавить("Z");
	Возврат МассивСимволов;
КонецФункции

Функция ПолучитьТаблицуНовыхПромокодовДляУсловий(УсловияПредоставленияСкидок, ДатаВыдачиПромокодов = Неопределено, КоличествоКодов = 1) Экспорт
	ДатаСоздания = ДатаВыдачиПромокодов;
	Если ДатаВыдачиПромокодов = Неопределено Тогда
		ДатаСоздания = ТекущаяДатаСеанса();
	КонецЕсли;
	МассивУсловий = Новый Массив;
	Если ТипЗнч(УсловияПредоставленияСкидок) = Тип("Массив") Тогда 
		МассивУсловий = УсловияПредоставленияСкидок;
	ИначеЕсли ТипЗнч(УсловияПредоставленияСкидок) = Тип("СправочникСсылка.УсловияПредоставленияСкидокНаценок") И ЗначениеЗаполнено(УсловияПредоставленияСкидок) Тогда
		МассивУсловий.Добавить(УсловияПредоставленияСкидок);
	Иначе
		ВызватьИсключение("Условия предоставления скидок для генерации промокодов заданы не корректно");
	КонецЕсли;
	
	ТаблицаРезультат = Новый ТаблицаЗначений();
	ТаблицаРезультат.Колонки.Добавить("Промокод", Новый ОписаниеТипов("Строка"));
	ТаблицаРезультат.Колонки.Добавить("УсловиеПредоставленияСкидки", Новый ОписаниеТипов("СправочникСсылка.УсловияПредоставленияСкидокНаценок"));
	ТаблицаРезультат.Колонки.Добавить("СкидкаНаценка", Новый ОписаниеТипов("СправочникСсылка.АвтоматическиеСкидки"));
	ТаблицаРезультат.Колонки.Добавить("ДействуетС", Новый ОписаниеТипов("Дата"));
	ТаблицаРезультат.Колонки.Добавить("ДействуетДо", Новый ОписаниеТипов("Дата"));
	ТаблицаРезультат.Колонки.Добавить("Доступно", Новый ОписаниеТипов("Число"));
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	Не Шаблон.Ссылка Есть null Как ШаблонУказан,
	|	ЕстьNull(Шаблон.АктивироватьЧерезДней, 0) КАК АктивироватьЧерезДней,
	|	ЕстьNull(Шаблон.КоличествоДнейДействия, 0) КАК КоличествоДнейДействия,
	|	ЕстьNull(Шаблон.КоличествоРазПрименения, 1) КАК КоличествоРазПрименения,
	|	ЕстьNull(Шаблон.КоличествоСимволов, 6) КАК КоличествоСимволов,
	|	ЕстьNull(Шаблон.МаскаПромокода, ""[Промокод]"") КАК МаскаПромокода,
	|	Шаблон.СловарьСимволов.(
	|		Символ КАК Символ
	|	) КАК СловарьСимволов
	|ИЗ
	|	Справочник.УсловияПредоставленияСкидокНаценок КАК УсловияПредоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныГенерацииПромокодов КАК Шаблон
	|		ПО УсловияПредоставления.ШаблонПромокода = Шаблон.Ссылка
	|ГДЕ
	|	УсловияПредоставления.Ссылка В(&УсловияПредоставленияСкидок)";
	Запрос.УстановитьПараметр("УсловияПредоставленияСкидок", МассивУсловий);
	ПараметрыПромокода = Запрос.Выполнить().Выбрать();
	
	Пока ПараметрыПромокода.Следующий() Цикл
		СловарьСимволов = Неопределено;
		Если ПараметрыПромокода.ШаблонУказан Тогда
			СловарьСимволов = ПараметрыПромокода.СловарьСимволов.Выгрузить().ВыгрузитьКолонку("Символ");
		Иначе
			СловарьСимволов = ПромокодыУНФ.БазовыйСловарьСимволов();
		КонецЕсли;
		ПромокодыКВыдаче = СегенерироватьПромокоды(СловарьСимволов ,ПараметрыПромокода.КоличествоСимволов, КоличествоКодов, ПараметрыПромокода.МаскаПромокода);
		Для Каждого Промокод Из ПромокодыКВыдаче Цикл
			НовСтрока = ТаблицаРезультат.Добавить();
			НовСтрока.Промокод = Промокод;
			НовСтрока.УсловиеПредоставленияСкидки = ПараметрыПромокода.Ссылка;
			СкидкиУсловий = СкидкиСвязанныеСУсловиемНаПромокод(НовСтрока.УсловиеПредоставленияСкидки);
			СкидкиУсловия = СкидкиУсловий[НовСтрока.УсловиеПредоставленияСкидки];
			Если СкидкиУсловия.Количество() > 0 Тогда
				НовСтрока.СкидкаНаценка = СкидкиУсловия[0];
			КонецЕсли;
			ДействуетС = Дата(1,1,1);
			Если ПараметрыПромокода.АктивироватьЧерезДней > 0 Тогда
				ДействуетС = НачалоДня(ДатаСоздания + ПараметрыПромокода.АктивироватьЧерезДней * 60 * 60 * 24);
			КонецЕсли;
			НовСтрока.ДействуетС = ДействуетС;
			ДействуетДо = Дата(1,1,1);
			Если ПараметрыПромокода.КоличествоДнейДействия > 0 Тогда
				Если ДействуетС = Дата(1,1,1) Тогда 
					ДействуетС = ДатаСоздания;
				КонецЕсли;
				ДействуетДо = КонецДня(ДействуетС + ПараметрыПромокода.КоличествоДнейДействия * 60 * 60 * 24 - 1);
			КонецЕсли;
			НовСтрока.ДействуетДо = ДействуетДо;
			НовСтрока.Доступно = ПараметрыПромокода.КоличествоРазПрименения;
		КонецЦикла;			
	КонецЦикла;
	Возврат ТаблицаРезультат;
КонецФункции

Процедура ДобавитьПромокодыКВыдаче(ПримененныеПромокоды, СкидкиНаценки) Экспорт
	
	ПромокодыКВыдаче = ПримененныеПромокоды.НайтиСтроки(Новый Структура("ЭтоАктивацияПромокода", Истина));
	УсловияДляОтменитьПромокода = Новый Соответствие;
	ПримененныеСкидки = Новый Массив();
	Если ТипЗнч(СкидкиНаценки) = Тип("ТаблицаЗначений") Тогда
		ПримененныеСкидки = СкидкиНаценки.ВыгрузитьКолонку("СкидкаНаценка");
	Иначе
		ПримененныеСкидки = СкидкиНаценки.Выгрузить(,"СкидкаНаценка").ВыгрузитьКолонку("СкидкаНаценка");
	КонецЕсли;
	ЕстьУсловиеПромокода = Истина;
	Если ТипЗнч(ПримененныеПромокоды) = Тип("ДанныеФормыКоллекция") Тогда
		// В РМК в таблице есть только колонка СкидкаНаценка
		ЕстьУсловиеПромокода = ПримененныеПромокоды.Выгрузить(Новый Массив).Колонки.Найти("УсловиеПредоставленияСкидки") <> Неопределено;
	КонецЕсли;
	
	Если ЕстьУсловиеПромокода Тогда
		Для Каждого СтрокаПромокода Из ПромокодыКВыдаче Цикл
			УсловияДляОтменитьПромокода.Вставить(СтрокаПромокода.УсловиеПредоставленияСкидки, СтрокаПромокода);
		КонецЦикла;
	Иначе
		УсловияСкидок = УсловияПримененияСкидокЗаПромокод(ПримененныеСкидки);
		Для Каждого СтрокаПромокода Из ПромокодыКВыдаче Цикл
			УсловияДляОтменитьПромокода.Вставить(УсловияСкидок[СтрокаПромокода.СкидкаНаценка], СтрокаПромокода);
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УсловияСледующейСкидки.УсловиеПредоставления КАК Ссылка
	|ИЗ
	|	Справочник.АвтоматическиеСкидки КАК СработавшаяСкидка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АвтоматическиеСкидки.УсловияПредоставления КАК УсловияСледующейСкидки
	|		ПО СработавшаяСкидка.СкидкаНаСледующуюПокупкуПоПромокоду = УсловияСледующейСкидки.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок КАК ПараметрыУсловий
	|		ПО (УсловияСледующейСкидки.УсловиеПредоставления = ПараметрыУсловий.Ссылка)
	|			И (ПараметрыУсловий.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаПромокод))
	|ГДЕ
	|	СработавшаяСкидка.Ссылка В(&ПримененныеСкидки)";
	Запрос.УстановитьПараметр("ПримененныеСкидки", ПримененныеСкидки);
	УсловияДляГенерацииПромокода = Запрос.Выполнить().Выбрать();
	Если УсловияДляГенерацииПромокода.Количество() = 0 Тогда
		// Генерировать и выдавать промокодов не требуется
		Для Каждого СтрокаСтарогоПромокода Из ПромокодыКВыдаче Цикл
			ПримененныеПромокоды.Удалить(СтрокаСтарогоПромокода);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	УсловияСгенерироватьНовыйПромокод = Новый Массив;
	Пока УсловияДляГенерацииПромокода.Следующий() Цикл
		СтрокаСтарогоПромокода = УсловияДляОтменитьПромокода[УсловияДляГенерацииПромокода.Ссылка];
		Если СтрокаСтарогоПромокода = Неопределено Тогда
			УсловияСгенерироватьНовыйПромокод.Добавить(УсловияДляГенерацииПромокода.Ссылка);
		Иначе
			// Промокод уже сгенерирован при предыдущем расчете. Оставим его неизменным, 
			// Т.к. по результатам нового расчета нам все еще нужно выдать промокод под данную скидку
			УсловияДляОтменитьПромокода.Удалить(УсловияДляГенерацииПромокода.Ссылка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ПромокодОтменить Из УсловияДляОтменитьПромокода Цикл
		ПримененныеПромокоды.Удалить(ПромокодОтменить.Значение);
	КонецЦикла;
	УсловияДляОтменитьПромокода = Неопределено;
	
	Если УсловияСгенерироватьНовыйПромокод.Количество() > 0 Тогда
		ТаблицаНовыйПромокодов = ПолучитьТаблицуНовыхПромокодовДляУсловий(УсловияСгенерироватьНовыйПромокод);
		Для Каждого СтрокаНовыйПромокод Из ТаблицаНовыйПромокодов Цикл
			НовПромокод = ПримененныеПромокоды.Добавить();
			ЗаполнитьЗначенияСвойств(НовПромокод, СтрокаНовыйПромокод);
			НовПромокод.ЭтоАктивацияПромокода = Истина;
			// Фиксируем промокод и условие, которое должно сработать при его применении
			НовПромокод.СкидкаПредоставлена = Истина;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ОтметитьСработавшиеПромокоды(ТаблицаПромокодов, СработавшиеСкидки) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АвтоматическиеСкидкиУсловияПредоставления.УсловиеПредоставления КАК УсловиеПредоставления
	|ИЗ
	|	Справочник.АвтоматическиеСкидки.УсловияПредоставления КАК АвтоматическиеСкидкиУсловияПредоставления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок КАК ПараметрыУсловий
	|		ПО (ПараметрыУсловий.Ссылка = АвтоматическиеСкидкиУсловияПредоставления.УсловиеПредоставления)
	|			И (ПараметрыУсловий.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаПромокод))
	|ГДЕ
	|	АвтоматическиеСкидкиУсловияПредоставления.Ссылка В(&СработавшиеСкидки)";
	Запрос.УстановитьПараметр("СработавшиеСкидки", СработавшиеСкидки);
	УсловияСработавшихСкидок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("УсловиеПредоставления");

	СписокПромокодов = Новый Массив();
	Если ТипЗнч(ТаблицаПромокодов) = Тип("ТаблицаЗначений") Тогда
		СписокПромокодов = ТаблицаПромокодов.ВыгрузитьКолонку("Промокод");
	Иначе
		СписокПромокодов = ТаблицаПромокодов.Выгрузить(,"Промокод").ВыгрузитьКолонку("Промокод");
	КонецЕсли;	
	УсловияПримененияПромокодов = УсловияПримененияПромокодов(СписокПромокодов);
	
	Для Каждого СтрокаПромокода Из ТаблицаПромокодов Цикл
		ИндНайденногоУсловия = УсловияСработавшихСкидок.Найти(УсловияПримененияПромокодов[СтрокаПромокода.Промокод]);
		Если ИндНайденногоУсловия = Неопределено Тогда
			СтрокаПромокода.СкидкаПредоставлена = Ложь;
		Иначе
			СтрокаПромокода.СкидкаПредоставлена = Истина;
			УсловияСработавшихСкидок.Удалить(ИндНайденногоУсловия);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
	
Функция АктивироватьПромокоды(ТаблицаПромокодов, ПериодЗаписи = Неопределено, ДокументДвижения = Неопределено) Экспорт
	
	ДатаПериод = ПериодЗаписи;
	Если ПериодЗаписи = Неопределено Тогда
		ДатаПериод = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АктивацияПромокодовПромокоды.Промокод КАК Промокод,
	|	АктивацияПромокодовПромокоды.УсловиеПредоставленияСкидки КАК УсловиеПредоставленияСкидки,
	|	АктивацияПромокодовПромокоды.Доступно КАК Доступно,
	|	АктивацияПромокодовПромокоды.ДействуетС КАК ДействуетС,
	|	АктивацияПромокодовПромокоды.ДействуетДо КАК ДействуетДо
	|ПОМЕСТИТЬ втПромокоды
	|ИЗ
	|	&ТаблицаПромокоды КАК АктивацияПромокодовПромокоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПромокоды.Промокод КАК Промокод,
	|	втПромокоды.УсловиеПредоставленияСкидки КАК УсловиеПредоставленияСкидки,
	|	втПромокоды.ДействуетС КАК ДействуетС,
	|	втПромокоды.ДействуетДо КАК ДействуетДо,
	|	втПромокоды.Доступно КАК Доступно
	|ИЗ
	|	втПромокоды КАК втПромокоды
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Промокод)
	|ПО
	|	УсловиеПредоставленияСкидки";
	Запрос.УстановитьПараметр("ТаблицаПромокоды", ТаблицаПромокодов);
	ВыборкаУсловий = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	МассивДокументовАктивации = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		Пока ВыборкаУсловий.Следующий() Цикл
			ДокументАктивации = Документы.АктивацияПромокодов.СоздатьДокумент();					
			ДокументАктивации.Дата = ДатаПериод;
			ДокументАктивации.УсловиеПредоставленияСкидки = ВыборкаУсловий.УсловиеПредоставленияСкидки;
			ДокументАктивации.Заполнить(ДокументДвижения);
			ВыборкаПромокодов = ВыборкаУсловий.Выбрать();
			Пока ВыборкаПромокодов.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ДокументАктивации.Промокоды.Добавить(),ВыборкаПромокодов);
			КонецЦикла;
			ДокументАктивации.Записать(РежимЗаписиДокумента.Проведение);
			МассивДокументовАктивации.Добавить(ДокументАктивации.Ссылка);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		МассивДокументовАктивации.Очистить();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		КраткоеПредставлениеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки);
	КонецПопытки;
	
	Возврат МассивДокументовАктивации;
	
КонецФункции

Функция СостояниеПромокодов(Промокоды) Экспорт
	
	Результат = Новый Соответствие();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Промокоды.Промокод КАК Промокод,
	|	Промокоды.УсловиеПредоставленияСкидки КАК УсловиеПредоставления,
	|	ПРЕДСТАВЛЕНИЕ(Промокоды.УсловиеПредоставленияСкидки) КАК ПредставлениеУсловиеПредоставления,
	|	Промокоды.ДействуетС КАК ДействуетС,
	|	Промокоды.ДействуетДо КАК ДействуетДо,
	|	Промокоды.Конечный КАК Конечный,
	|	ЕСТЬNULL(СУММА(ДоступностьПромокодовОстатки.ДоступноОстаток), 0) КАК ДоступныйОстаток,
	|	ЕСТЬNULL(СУММА(ПрименениеПромокодовОбороты.КоличествоОборот), 0) КАК УжеПрименен
	|ИЗ
	|	РегистрСведений.Промокоды КАК Промокоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДоступностьПромокодов.Остатки КАК ДоступностьПромокодовОстатки
	|		ПО Промокоды.Промокод = ДоступностьПромокодовОстатки.Промокод
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПрименениеПромокодов.Обороты КАК ПрименениеПромокодовОбороты
	|		ПО Промокоды.Промокод = ПрименениеПромокодовОбороты.Промокод
	|ГДЕ
	|	Промокоды.Промокод В(&Промокоды)
	|
	|СГРУППИРОВАТЬ ПО
	|	Промокоды.Промокод,
	|	Промокоды.УсловиеПредоставленияСкидки,
	|	Промокоды.ДействуетС,
	|	Промокоды.ДействуетДо,
	|	Промокоды.Конечный";
	Запрос.УстановитьПараметр("Промокоды", Промокоды);
	ВыбПромокод = Запрос.Выполнить().Выбрать();
	Пока ВыбПромокод.Следующий() Цикл
		ОписаниеПромокода = Новый Структура();
		ОписаниеПромокода.Вставить("УсловиеПредоставления", Неопределено); 
		ОписаниеПромокода.Вставить("ПредставлениеУсловиеПредоставления", Неопределено); 
		ОписаниеПромокода.Вставить("ДействуетС", Неопределено); 
		ОписаниеПромокода.Вставить("ДействуетДо", Неопределено); 
		ОписаниеПромокода.Вставить("Конечный", Неопределено); 
		ОписаниеПромокода.Вставить("ДоступныйОстаток", Неопределено); 
		ОписаниеПромокода.Вставить("УжеПрименен", Неопределено);
		ЗаполнитьЗначенияСвойств(ОписаниеПромокода, ВыбПромокод);
		Результат[ВыбПромокод.Промокод] = ОписаниеПромокода;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПромокодИзСловаря(Словарь, ДлинаПромокода, ИндексКомбинации)
		
	ТекущийПромокод = "";
	ДлинаСловаря = Словарь.Количество();
	КомбинацияОстаток = ИндексКомбинации;
	Для НомерСимвола = 1 По ДлинаПромокода Цикл
		ЦелДеление = Цел(КомбинацияОстаток / ДлинаСловаря);
		ИндексСимвола = КомбинацияОстаток - (ЦелДеление * ДлинаСловаря);
		ТекущийПромокод = ТекущийПромокод + Словарь[ИндексСимвола];
		
		КомбинацияОстаток = ЦелДеление;
	КонецЦикла;
	
	Возврат ТекущийПромокод;
КонецФункции

Функция ПолучитьИзображениеПромокода(ТекстQR, УровеньКоррекции = 0, Размер = 190) Экспорт
	ПараметрыШтрихкода = ГенерацияШтрихкода.ПараметрыГенерацииШтрихкода();
	ПараметрыШтрихкода.Ширина = Размер;
	ПараметрыШтрихкода.Высота = Размер;
	ПараметрыШтрихкода.Штрихкод = ТекстQR;
	ПараметрыШтрихкода.УровеньКоррекцииQR = УровеньКоррекции;
	ПараметрыШтрихкода.ТипКода = 16; // QR
	ПараметрыШтрихкода.УбратьЛишнийФон = Истина;
	
	Попытка
		РезультатФормированияШтрихкода = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода);
		Картинка = РезультатФормированияШтрихкода.Картинка;
	Исключение
		МенеджерОборудования.ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru = 'Ошибка генерации штрихкода'", ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецПопытки;
	
	Возврат Картинка;
	
КонецФункции

#КонецОбласти
