#Область ПрограммныйИнтерфейс

// Возвращаются реквизиты налоговой инспекции по коду.
//
// Параметры:
//  КодНалоговогоОргана  - Строка - код налогового органа.
//
// Возвращаемое значение:
//   Структура   - реквизиты налоговой инспекции. 
//
Функция РеквизитыНалоговогоОрганаПоКоду(Знач КодНалоговогоОргана) Экспорт
	
	РеквизитыНалоговогоОргана = РаботаСКонтрагентами.РеквизитыНалоговогоОрганаПоКоду(КодНалоговогоОргана);
	
	Вид = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган;
	ДополнитьРеквизитыГосударственногоОрганаДаннымиИБ(РеквизитыНалоговогоОргана, Вид);
	
	Возврат РеквизитыНалоговогоОргана;
	
КонецФункции

// Возвращаются реквизиты отделения ФСС по коду
//
// Параметры:
//  КодОтделенияФСС  - Строка - Код отделения ФСС
//
// Возвращаемое значение:
//   Структура   - реквизиты отделения ФСС. 
//
Функция РеквизитыОтделенияФССПоКоду(Знач КодОтделенияФСС) Экспорт
	
	РеквизитыФСС = РаботаСКонтрагентами.РеквизитыОтделенияФССПоКоду(КодОтделенияФСС);
	
	Вид = Перечисления.ВидыГосударственныхОрганов.ОрганФСС;
	ДополнитьРеквизитыГосударственногоОрганаДаннымиИБ(РеквизитыФСС, Вид);
	
	Возврат РеквизитыФСС;
	
КонецФункции

// Возвращаются реквизиты отделения ПФР по коду.
//
// Параметры:
//  КодОтделенияПФР  - Строка - код отделения ПФР
//
// Возвращаемое значение:
//   Структура   - реквизиты отделения ПФР. 
//
Функция РеквизитыОтделенияПФРПоКоду(Знач КодОтделенияПФР) Экспорт
	
	РеквизитыПФР = РаботаСКонтрагентами.РеквизитыОтделенияПФРПоКоду(КодОтделенияПФР);
	
	Вид = Перечисления.ВидыГосударственныхОрганов.ОрганПФР;
	ДополнитьРеквизитыГосударственногоОрганаДаннымиИБ(РеквизитыПФР, Вид);
	
	Возврат РеквизитыПФР;
	
КонецФункции

// Возвращает сведения о государственном органе из справочника Контрагенты
//
// Параметры:
//  ВидГосударственногоОргана - ПеречислениеСсылка.ВидыГосударственныхОрганов - вид государственного органа
//  КодГосударственногоОргана - Строка - код государственного органа
//
// Возвращаемое значение:
//   Структура   - реквизиты налоговой инспекции. 
//                 Содержание структуры описано в функции НовыеРеквизитыГосударственногоОргана()
//
Функция ГосударственныйОрган(Знач ВидГосударственногоОргана, Знач КодГосударственногоОргана) Экспорт
	
	ГосударственныйОрган = НовыеРеквизитыГосударственногоОргана();
	
	Код = КодГосударственногоОргана(ВидГосударственногоОргана, КодГосударственногоОргана);
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Вид", ВидГосударственногоОргана);
	Запрос.Параметры.Вставить("Код", Код);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка,
	|	Контрагенты.ИНН,
	|	Контрагенты.КПП,
	|	Контрагенты.НаименованиеПолное КАК ПолноеНаименование,
	|	Контрагенты.Наименование,
	|	Контрагенты.БанковскийСчетПоУмолчанию КАК БанковскийСчет,
	|	ЕСТЬNULL(Контрагенты.БанковскийСчетПоУмолчанию.НомерСчета, """") КАК РасчетныйСчет,
	|	ЕСТЬNULL(Контрагенты.БанковскийСчетПоУмолчанию.ТекстКорреспондента, """") КАК ПолучательПлатежа,
	|	ЕСТЬNULL(Контрагенты.БанковскийСчетПоУмолчанию.Банк, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)) КАК Банк,
	|	ЕСТЬNULL(Контрагенты.БанковскийСчетПоУмолчанию.Банк.Наименование, """") КАК БанкНаименование,
	|	ЕСТЬNULL(Контрагенты.БанковскийСчетПоУмолчанию.Банк.Код, """") КАК БИК,
	|	ЕСТЬNULL(Контрагенты.БанковскийСчетПоУмолчанию.Банк.КоррСчет, """") КАК КоррСчет
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ВидГосударственногоОргана = &Вид
	|	И Контрагенты.КодГосударственногоОргана = &Код
	|	И Контрагенты.ПометкаУдаления = ЛОЖЬ";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ГосударственныйОрган, Выборка);
		ЗаполнитьЗначенияСвойств(ГосударственныйОрган.ПлатежныеРеквизиты, Выборка);
		
		Если НЕ ЗначениеЗаполнено(ГосударственныйОрган.ПлатежныеРеквизиты.ПолучательПлатежа) Тогда
			ПолучательПлатежа = НаименованиеПлательщикаПолучателяПоУмолчанию(
					Выборка.Ссылка, Выборка.БанковскийСчет);
			ГосударственныйОрган.ПлатежныеРеквизиты.ПолучательПлатежа = ПолучательПлатежа;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ГосударственныйОрган;
	
КонецФункции

// Проверяет, что реквизиты в справочнике Контрагенты совпадают с данными сервиса
//
// Параметры:


//  Реквизиты - Структура - содержание структуры описано в функции НовыеРеквизитыГосударственногоОргана()
//
// Возвращаемое значение:
//   Булево - признак, что платежные реквизиты в справочнике "Контрагенты" актуальны
//
Функция ПлатежныеРеквизитыАктуальны(Реквизиты) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Реквизиты.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РеквизитыИнформационнойБазы = ГосударственныйОрган(Реквизиты.Вид, Реквизиты.Код);
	
	Если Реквизиты.ИНН <> РеквизитыИнформационнойБазы.ИНН
		ИЛИ Реквизиты.КПП <> РеквизитыИнформационнойБазы.КПП
		ИЛИ Реквизиты.ПолноеНаименование <> РеквизитыИнформационнойБазы.ПолноеНаименование
		ИЛИ Реквизиты.ПлатежныеРеквизиты.РасчетныйСчет <> РеквизитыИнформационнойБазы.ПлатежныеРеквизиты.РасчетныйСчет
		ИЛИ Реквизиты.ПлатежныеРеквизиты.ПолучательПлатежа <> РеквизитыИнформационнойБазы.ПлатежныеРеквизиты.ПолучательПлатежа
		ИЛИ Реквизиты.ПлатежныеРеквизиты.БИК <> РеквизитыИнформационнойБазы.ПлатежныеРеквизиты.БИК Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Обновляет платежные реквизиты государственного органа в справочнике "Контрагенты".
// В том случае, если в справочнике "Контрагенты" нет элемента, соответствующего гос.органу, он будет создан.
//
// Параметры:
//  Реквизиты - Структура - содержание структуры описано в функции НовыеРеквизитыГосударственногоОргана()
//
// Возвращаемое значение:
//
Процедура ОбновитьДанныеГосударственногоОргана(Реквизиты, ОбработкаОбновления = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(Реквизиты.Ссылка) Тогда
		
		Объект = Реквизиты.Ссылка.ПолучитьОбъект();
		
	Иначе
		
		//Определим родителя для государственного органа
		НаименованиеРодителя = НСтр("ru='Государственные органы'");
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("Вид", Реквизиты.Вид);
		Запрос.Параметры.Вставить("Наименование", НаименованиеРодителя);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контрагенты.Родитель КАК Ссылка,
		|	1 КАК Приоритет
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ВидГосударственногоОргана = &Вид
		|	И Контрагенты.ПометкаУдаления = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контрагенты.Ссылка,
		|	2
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ЭтоГруппа = ИСТИНА
		|	И Контрагенты.Наименование = &Наименование
		|	И Контрагенты.ПометкаУдаления = ЛОЖЬ
		|	И Контрагенты.Родитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Родитель = Выборка.Ссылка;
		Иначе
			НовыйРодитель = Справочники.Контрагенты.СоздатьГруппу();
			НовыйРодитель.Наименование = НаименованиеРодителя;
			НовыйРодитель.Записать();
			Родитель = НовыйРодитель.Ссылка;
		КонецЕсли;
		
		Объект = Справочники.Контрагенты.СоздатьЭлемент();
		Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		Объект.СтранаРегистрации = Справочники.СтраныМира.Россия;
		Объект.Родитель = Родитель;
		Объект.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ГосударственныйОрган;
		Объект.ВидГосударственногоОргана = Реквизиты.Вид;
		Объект.КодГосударственногоОргана = КодГосударственногоОрганаДляЗапросаРеквизитов(Реквизиты.Вид, Реквизиты.Код);
	КонецЕсли;
	
	Объект.ИНН = Реквизиты.ИНН;
	Объект.КПП = Реквизиты.КПП;
	Объект.Наименование       = Реквизиты.Наименование;
	Объект.НаименованиеПолное = Реквизиты.ПолноеНаименование;
	
	//Проверим, что данные банковского счета актуальны (совпадают БИК, коррсчет и расчетный счет)
	//Если данные актуальны, обновляем счет.
	//В противном случае создаем новый расчетный счет, предварительно убедившись, что такого расчетного счета у контрагента уже нет.
	ДанныеБанковскогоСчетаАктуальны = Ложь;
	Если ЗначениеЗаполнено(Объект.БанковскийСчетПоУмолчанию) Тогда
		РеквизитыРасчетногоСчета = РеквизитыБанковскогоСчета(Объект.БанковскийСчетПоУмолчанию);
		Если РеквизитыРасчетногоСчета.РасчетныйСчет = Реквизиты.ПлатежныеРеквизиты.РасчетныйСчет
			И РеквизитыРасчетногоСчета.БИК = Реквизиты.ПлатежныеРеквизиты.БИК
			И РеквизитыРасчетногоСчета.КоррСчет = Реквизиты.ПлатежныеРеквизиты.КоррСчет Тогда
			ДанныеБанковскогоСчетаАктуальны = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчетПоУмолчанию)
		И ДанныеБанковскогоСчетаАктуальны Тогда
		БанковскийСчет = Объект.БанковскийСчетПоУмолчанию.ПолучитьОбъект();
	Иначе
		БанковскийСчетКонтрагента = БанковскийСчетПоРеквизитам(
			Объект.Ссылка,
			Реквизиты.ПлатежныеРеквизиты.РасчетныйСчет,
			Реквизиты.ПлатежныеРеквизиты.БИК,
			Реквизиты.ПлатежныеРеквизиты.КоррСчет);
		Если ЗначениеЗаполнено(БанковскийСчетКонтрагента) Тогда
			БанковскийСчет = БанковскийСчетКонтрагента.ПолучитьОбъект();
			Объект.БанковскийСчетПоУмолчанию = БанковскийСчет.Ссылка;
		Иначе
			БанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
			БанковскийСчет.ВалютаДенежныхСредств = Константы.ВалютаУчета.Получить();
			БанковскийСчет.ВидСчета = "Расчетный";
			БанковскийСчет.ВариантУказанияКПП = Перечисления.ВариантыУказанияКПП.ВоВсехПлатежныхПоручениях;
			НоваяСсылка = Справочники.БанковскиеСчета.ПолучитьСсылку();
			БанковскийСчет.УстановитьСсылкуНового(НоваяСсылка);
			
			Банк = РаботаСБанкамиБП.БанкПоПлатежнымРеквизитам(Реквизиты.ПлатежныеРеквизиты);
			НаименованиеБанка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				Реквизиты.ПлатежныеРеквизиты, "НаименованиеБанка");
			
			Если ЗначениеЗаполнено(Банк) Тогда
				ДанныеБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Банк, "Наименование");
				Если ЗначениеЗаполнено(НаименованиеБанка)
					И СтрНайти(НаименованиеБанка, "//") > 0
					И СтрНайти(ДанныеБанка.Наименование, "//") = 0 Тогда
					ДанныеБанка.Наименование = НаименованиеБанка;
				КонецЕсли;
			Иначе
				ДанныеБанка = Новый Структура("Наименование", НаименованиеБанка);
			КонецЕсли;
			
			БанковскийСчет.Банк = Банк;
			БанковскийСчет.НомерСчета = Реквизиты.ПлатежныеРеквизиты.РасчетныйСчет;
			Объект.БанковскийСчетПоУмолчанию = БанковскийСчет.ПолучитьСсылкуНового();
			НаименованиеБанка = ?(ЗначениеЗаполнено(ДанныеБанка.Наименование), ДанныеБанка.Наименование, "");
			БанковскийСчет.Наименование = НаименованиеБанковскогоСчета(
				БанковскийСчет, НаименованиеБанка);
		КонецЕсли;
	КонецЕсли;
	
	БанковскийСчет.ТекстКорреспондента = Реквизиты.ПлатежныеРеквизиты.ПолучательПлатежа;
	
	НачатьТранзакцию();
	Попытка
		Если ОбработкаОбновления Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
		Иначе
			Объект.Записать();
		КонецЕсли;
		
		БанковскийСчет.Владелец = Объект.Ссылка;
		
		Если ОбработкаОбновления Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(БанковскийСчет);
		Иначе
			БанковскийСчет.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Ошибка сохранения государственного органа %1:'"), Реквизиты.Код)
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка записи объекта'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Контрагенты, , ОписаниеОшибки);
	КонецПопытки;
	
	Реквизиты.Ссылка = Объект.Ссылка;
	Реквизиты.ПлатежныеРеквизиты.БанковскийСчет = БанковскийСчет.Ссылка;
	Реквизиты.ПлатежныеРеквизиты.Банк           = БанковскийСчет.Банк;
	
КонецПроцедуры

Процедура ДобавитьМИДолПолучателяЕНП() Экспорт
	
	Реквизиты = РеквизитыПолучателяМИДол();
	ОбновитьДанныеГосударственногоОргана(Реквизиты, Истина);
	
КонецПроцедуры

Процедура ДобавитьОбновитьПолучательКазначейство() Экспорт
	
	Реквизиты = РеквизитыПолучателяМИДол();
	
	Если ПлатежныеРеквизитыАктуальны(Реквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеГосударственногоОргана(Реквизиты, Истина);
	
КонецПроцедуры

// Проверяет, что платежные реквизиты контрагента-государственного органа, соответствуют текущим данным
//
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты - Ссылка на контрагента-государственный орган, для которого выполняется
//	проверка реквизитов.
//  ПлатежныеРеквизиты - Структура - Структура текущих платежных реквизитов контрагента.
//
// Возвращаемое значение:
//     Структура - Результат проверки.
Функция ПроверитьПлатежныеРеквизитыКонтрагента(Контрагент, ПлатежныеРеквизиты) Экспорт
	
	Результат = Новый Структура;
	
	РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент,
			"ВидКонтрагента, ВидГосударственногоОргана, КодГосударственногоОргана");
	
	Если РеквизитыКонтрагента.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ГосударственныйОрган
		И ЗначениеЗаполнено(РеквизитыКонтрагента.ВидГосударственногоОргана)
		И РеквизитыКонтрагента.ВидГосударственногоОргана <> Перечисления.ВидыГосударственныхОрганов.Прочий
		И ЗначениеЗаполнено(РеквизитыКонтрагента.КодГосударственногоОргана) Тогда
		
		Вид = РеквизитыКонтрагента.ВидГосударственногоОргана;
		Код = РеквизитыКонтрагента.КодГосударственногоОргана;
		Реквизиты = Неопределено;
		Если Вид = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
			Реквизиты = РеквизитыНалоговогоОрганаПоКоду(Код);
			Если ПлатежныеРеквизиты.Свойство("ПлательщикЕНП") И ПлатежныеРеквизиты.ПлательщикЕНП Тогда
				ЕдиныйНалоговыйСчет.ПлатежныеРеквизитыЕдиногоНалоговогоСчета(Реквизиты.ПлатежныеРеквизиты);
			КонецЕсли;
		ИначеЕсли Вид = Перечисления.ВидыГосударственныхОрганов.ОрганПФР Тогда
			Реквизиты = РеквизитыОтделенияПФРПоКоду(Код);
		ИначеЕсли Вид = Перечисления.ВидыГосударственныхОрганов.ОрганФСС Тогда
			Реквизиты = РеквизитыОтделенияФССПоКоду(Код);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Реквизиты) Тогда
			
			Если НЕ ЗначениеЗаполнено(Реквизиты.ОписаниеОшибки) Тогда
				
				Если ЗначениеЗаполнено(Реквизиты.ПлатежныеРеквизиты.РасчетныйСчет) Тогда
					
					Результат.Вставить("ПлатежныеРеквизитыНайдены", Истина);
					
					// Сравним полученные реквизиты и текущие значения
					СписокРасхождений = "";
					Если Реквизиты.ИНН <> ПлатежныеРеквизиты.ИНН Тогда
						СписокРасхождений = СписокРасхождений + ?(СписокРасхождений = "", "", ", ") + НСтр("ru='ИНН'");
					КонецЕсли;
					
					Если Реквизиты.КПП <> ПлатежныеРеквизиты.КПП Тогда
						СписокРасхождений = СписокРасхождений + ?(СписокРасхождений = "", "", ", ") + НСтр("ru='КПП'");
					КонецЕсли;
					
					Если Реквизиты.ПлатежныеРеквизиты.ПолучательПлатежа <> ПлатежныеРеквизиты.ПолучательПлатежа Тогда
						СписокРасхождений = СписокРасхождений + ?(СписокРасхождений = "", "", ", ") + НСтр("ru='Получатель платежа'");
					КонецЕсли;
					
					Если Реквизиты.ПлатежныеРеквизиты.РасчетныйСчет <> ПлатежныеРеквизиты.РасчетныйСчет Тогда
						СписокРасхождений = СписокРасхождений + ?(СписокРасхождений = "", "", ", ") + НСтр("ru='Расчетный счет'");
					КонецЕсли;
					
					Если Реквизиты.ПлатежныеРеквизиты.БИК <> ПлатежныеРеквизиты.БИК Тогда
						СписокРасхождений = СписокРасхождений + ?(СписокРасхождений = "", "", ", ") + НСтр("ru='БИК'");
					КонецЕсли;
					
					Если Реквизиты.ПлатежныеРеквизиты.КоррСчет <> ПлатежныеРеквизиты.КоррСчет Тогда
						СписокРасхождений = СписокРасхождений + ?(СписокРасхождений = "", "", ", ") + НСтр("ru = 'Корр.счет'");
					КонецЕсли;
					
					Если СписокРасхождений = "" Тогда
						Результат.Вставить("ПлатежныеРеквизитыАктуальны", Истина);
						Результат.Вставить("РезультатПроверки", НСтр("ru='Платежные реквизиты 
																		|указаны верно'"));
					Иначе
						ВДокументеНовыеРеквизиты2021 = БанковскиеПравила.ЭтоБИКТОФК(ПлатежныеРеквизиты.БИК)
							И БанковскиеПравила.ЭтоКазначейскийСчет(ПлатежныеРеквизиты.РасчетныйСчет)
							И БанковскиеПравила.ЭтоЕдиныйКазначейскийСчет(ПлатежныеРеквизиты.КоррСчет);
						
						ДатаДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
							ПлатежныеРеквизиты, "ДатаДокумента", ТекущаяДатаСеанса());
						ТолькоНовые = ПлатежиВБюджетКлиентСервер.ПрекращеноДействиеПереходногоПериодаУплатыНаКазначейскиеСчета(
							ДатаДокумента);
						
						Результат.Вставить("ПлатежныеРеквизитыАктуальны", Ложь);
						Если ВДокументеНовыеРеквизиты2021 Или ТолькоНовые Тогда
							Результат.Вставить("РезультатПроверки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Возможно, платежные реквизиты указаны неверно.
									|Найдены отличия в реквизитах: %1'"), СписокРасхождений));
						Иначе
							Результат.Вставить("РезультатПроверки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'С 01.01.21 рекомендуются новые платежные реквизиты для уплаты налога.
									|Найдены отличия в реквизитах: %1'"), СписокРасхождений));
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					
					Результат.Вставить("ПлатежныеРеквизитыНайдены", Ложь);
					Результат.Вставить("РезультатПроверки", НСтр("ru='Сведения о платежных реквизитах не найдены'"));
					
				КонецЕсли;
				
			ИначеЕсли Реквизиты.ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
				Результат.Вставить("ТребуетсяАутентификация", Истина);
				Результат.Вставить("РезультатПроверки", НСтр("ru='Для проверки платежных реквизитов
								|необходимо подключиться к интернет-поддержке пользователей.'"));
				
			ИначеЕсли Реквизиты.ОписаниеОшибки = "Сервис1СКонтрагентНеПодключен" Тогда
				Результат.Вставить("Сервис1СКонтрагентНеПодключен", Истина);
				Результат.Вставить("РезультатПроверки", НСтр("ru='Для проверки платежных реквизитов
								|необходимо подключиться к сервису ""1С:Контрагент"".'"));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Получает эталонные платежные реквизиты контрагента, если он является государственным органом
//
// Параметры:
//  Контрагент - СправочникСсылка.Контрагент - ссылка на контрагента, для которого требуется определить платежные
//                                             реквизиты, должен иметь тип "Государственный орган"
//
// Возвращаемое значение:
//     Структура или Неопределено   - реквизиты государственного органа, либо Неопределено, если определить сведения не удается
Функция ПолучитьПлатежныеРеквизитыКонтрагента(Контрагент) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент,
			"ВидКонтрагента, ВидГосударственногоОргана, КодГосударственногоОргана");
	
	Если РеквизитыКонтрагента.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ГосударственныйОрган
			И ЗначениеЗаполнено(РеквизитыКонтрагента.ВидГосударственногоОргана)
			И РеквизитыКонтрагента.ВидГосударственногоОргана <> Перечисления.ВидыГосударственныхОрганов.Прочий
			И ЗначениеЗаполнено(РеквизитыКонтрагента.КодГосударственногоОргана) Тогда
			
			Вид = РеквизитыКонтрагента.ВидГосударственногоОргана;
			Код = РеквизитыКонтрагента.КодГосударственногоОргана;
			Реквизиты = Неопределено;
			Если Вид = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
				Реквизиты = РеквизитыНалоговогоОрганаПоКоду(Код);
			ИначеЕсли Вид = Перечисления.ВидыГосударственныхОрганов.ОрганПФР Тогда
				Реквизиты = РеквизитыОтделенияПФРПоКоду(Код);
			ИначеЕсли Вид = Перечисления.ВидыГосударственныхОрганов.ОрганФСС Тогда
				Реквизиты = РеквизитыОтделенияФССПоКоду(Код);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Реквизиты) Тогда
				Если НЕ ЗначениеЗаполнено(Реквизиты.ОписаниеОшибки) Тогда
					Возврат Реквизиты;
				КонецЕсли;
			КонецЕсли;
			
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает контрагента-получателя налога
//
// Параметры:
//  Налог       - СправочникСсылка.ВидыНалоговИПлатежейВБюджет
//  Организация - СправочникСсылка.Организации
//  Период      - Дата
//
// Возвращаемое значение:
//  СправочникСсылка.Контрагенты
//
Функция АдминистраторНалогаОрганизации(Налог, Организация, Период = Неопределено) Экспорт
	Перем КодГосударственногоОргана;
	
	Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	
	ГосударственныйОрган = ВидИКодГосударственногоОрганаПоНалогу(Налог, Организация, Период);
	
	Если ЗначениеЗаполнено(ГосударственныйОрган.Код) Тогда
		Контрагент = ГосударственныйОрган(ГосударственныйОрган.Вид, ГосударственныйОрган.Код).Ссылка;
	КонецЕсли;
	
	Возврат Контрагент;
	
КонецФункции  

// Возвращает код и вид государственного органа, которому нужно уплачивать налог
//
// Параметры:
//  Налог		 - СправочникСсылка.ВидыНалоговИПлатежейВБюджет
//  Организация	 - СправочникСсылка.Организации
//  Период		 - Дата
// 
// Возвращаемое значение:
//   - Структура
//
Функция ВидИКодГосударственногоОрганаПоНалогу(Налог, Организация, Знач Период = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		Период = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецЕсли;
	
	ВидИКод = Новый Структура();
	ВидИКод.Вставить("Вид", Справочники.ВидыНалогов.ВидГосударственногоОргана(Налог, Период));
	
	ИспользуетсяЕдиныйНалоговыйПлатеж = Период >= '20230101'
		И УчетнаяПолитика.ПлательщикЕНП(Организация, Период);
	ЭтоЕНП = Налог = Справочники.ВидыНалогов.ЕдиныйНалоговыйПлатеж;
	ЭтоНалоговыйПлатеж = ВидИКод.Вид = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган;
	
	Если ИспользуетсяЕдиныйНалоговыйПлатеж
		И (ЭтоЕНП Или ЭтоНалоговыйПлатеж И Период >= ПлатежиВБюджетКлиентСервер.ДатаСменыНаименованияМИДол()) Тогда
		РеквизитыМИДол = ЕдиныйНалоговыйСчет.РеквизитыМИДол();
		ВидИКод.Вставить("Код", РеквизитыМИДол.Код);
	Иначе
		ВидИКод.Вставить("Код", КодГосударственногоОрганаОрганизации(Организация, ВидИКод.Вид));
	КонецЕсли;
	
	Возврат ВидИКод;
	
КонецФункции

// Возвращает текст гиперссылки "Платежные реквизиты" для отображения на форме
//
// Параметры:
//  ГосударственныйОрган - Структура или Неопределено - содержание структуры описано в функции НовыеРеквизитыГосударственногоОргана()
//
// Возвращаемое значение:
//     Строка - текстовое описание гиперссылки "Платежные реквизиты" для отображения на форме
Функция ПредставлениеПлатежныхРеквизитовГосударственногоОргана(ГосударственныйОрган) Экспорт
	
	Если ЗначениеЗаполнено(ГосударственныйОрган)
		И ЗначениеЗаполнено(ГосударственныйОрган.ПлатежныеРеквизиты.ПолучательПлатежа) Тогда
		Возврат ГосударственныйОрган.ПлатежныеРеквизиты.ПолучательПлатежа;
	Иначе
		Возврат НСтр("ru = '<Не заполнено>'");
	КонецЕсли;
	
КонецФункции

// Определяет код государственного органа, администрирующего деятельность организации
//
// Параметры:
//  Организация					 - СправочникСсылка.Организации, СправочникОбъект.Организации - администрируемая организация
//  ВидГосударственногоОргана	 - ПеречислениеСсылка.ВидыГосударственныхОрганов - вид государственного органа
// 
// Возвращаемое значение:
//  Строка - значащая часть кода государственного органа, заданного в информационной базе
//
Функция КодГосударственногоОрганаОрганизации(Организация, ВидГосударственногоОргана) Экспорт
	
	Код = Неопределено;
	
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		Если ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
			Код = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "РегистрацияВНалоговомОргане.Код");
		ИначеЕсли ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганПФР Тогда
			Код = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КодОрганаПФР");
		ИначеЕсли ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганФСС Тогда
			Код = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КодОрганаФСС");
		КонецЕсли;
	Иначе
		Если ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
			Код = Организация.РегистрацияВНалоговомОргане.Код;
		ИначеЕсли ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганПФР Тогда
			Код = Организация.КодОрганаПФР;
		ИначеЕсли ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганФСС Тогда
			Код = Организация.КодОрганаФСС;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Код) = Тип("Строка") Тогда
		Возврат СокрЛП(Код);
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьМИДолПолучателяЕНП_Отложенно(ПараметрыОбработчика) Экспорт
	
	ЕстьОшибки = Ложь;
	
	НачатьТранзакцию();
	
	Попытка 	
		Реквизиты = ЕдиныйНалоговыйСчет.РеквизитыМИДол();
		ГосОрган  = ГосударственныйОрган(Реквизиты.Вид, Реквизиты.Код);
		ЗаполнитьЗначенияСвойств(Реквизиты, ГосОрган, "Ссылка");
		ОбновитьДанныеГосударственногоОргана(Реквизиты, Истина); 
		ЗафиксироватьТранзакцию();
	Исключение
		
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ИмяСобытия = НСтр("ru = 'Выполнение обработчика Добавить МИ долга получателя ЕНП'", 
		ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		ЕстьОшибки = Истина;
		
	КонецПопытки;
	
	ПараметрыОбработчика.ОбработкаЗавершена = НЕ ЕстьОшибки;
	
КонецПроцедуры

Процедура ДобавитьОбновитьПолучательКазначейство_Отложенно(ПараметрыОбработчика) Экспорт
	
	ЕстьОшибки = Ложь;
	
	НачатьТранзакцию();
	
	Попытка 
		Реквизиты = РеквизитыПолучателяМИДол();
		
		Если Не ПлатежныеРеквизитыАктуальны(Реквизиты) Тогда
			ОбновитьДанныеГосударственногоОргана(Реквизиты, Истина); 
		КонецЕсли;
		
		ЗафиксироватьТранзакцию(); 
		
	Исключение
		
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ИмяСобытия = НСтр("ru = 'Выполнение обработчика Добавить МИ долга получателя ЕНП'", 
		ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		ЕстьОшибки = Истина;
		
	КонецПопытки;
	
	ПараметрыОбработчика.ОбработкаЗавершена = НЕ ЕстьОшибки; 
	
КонецПроцедуры
#КонецОбласти

Функция РеквизитыБанковскогоСчета(БанковскийСчет) Экспорт
	
	Реквизиты = Новый Структура("ПолучательПлатежа, РасчетныйСчет, КоррСчет, БИК");
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("РасчетныйСчет", БанковскийСчет);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БанковскиеСчета.НомерСчета КАК РасчетныйСчет,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.КоррСчет, """") КАК КоррСчет,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Код, """") КАК БИК,
	|	БанковскиеСчета.ТекстКорреспондента КАК ПолучательПлатежа
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Ссылка = &РасчетныйСчет";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
		Реквизиты.КоррСчет = СокрЛП(Реквизиты.КоррСчет);
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает ссылку на банковский счет контрагента по указанным реквизитам или возвращает ссылку на созданный счет.
// 
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты
//  РасчетныйСчет - Строка - Номер счета
//  БИК - Строка - БИК банка
//  КоррСчет - Строка - Номер корр. счета
//  НаименованиеБанка - Строка - Наименование банка, используется при создании нового элемента справочника "Банки"
//  СоздаватьНовый - Булево - Если Истина, то создается новый банковский счет с указанными реквизитами.
// 
// Возвращаемое значение:
//  СправочникСсылка.БанковскиеСчета - Ссылка на банковский счет.
//
Функция БанковскийСчетПоРеквизитам(Контрагент, РасчетныйСчет, БИК, КоррСчет, Знач НаименованиеБанка = "", СоздаватьНовый = Ложь) Экспорт
	
	БанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат БанковскийСчет;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("РасчетныйСчет", РасчетныйСчет);
	Запрос.Параметры.Вставить("Владелец", Контрагент);
	Запрос.Параметры.Вставить("БИК", БИК);
	Запрос.Параметры.Вставить("КоррСчет", КоррСчет);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	БанковскиеСчета.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
	|		ПО БанковскиеСчета.Банк = Банки.Ссылка
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Владелец
	|	И БанковскиеСчета.НомерСчета = &РасчетныйСчет
	|	И Банки.Код = &БИК
	|	И Банки.КоррСчет = &КоррСчет
	|	И БанковскиеСчета.ПометкаУдаления = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		БанковскийСчет = Выборка.Ссылка;
	КонецЕсли;
	
	Если Не СоздаватьНовый Или ЗначениеЗаполнено(БанковскийСчет) Тогда
		Возврат БанковскийСчет;
	КонецЕсли;
	
	РеквизитыБанка = Новый Структура;
	РеквизитыБанка.Вставить("БИК", БИК);
	РеквизитыБанка.Вставить("КоррСчет", КоррСчет);
	РеквизитыБанка.Вставить("НаименованиеБанка", НаименованиеБанка);
	
	БанкПолучателя = РаботаСБанкамиБП.БанкПоПлатежнымРеквизитам(РеквизитыБанка);

	БанковскийСчетОбъект = Справочники.БанковскиеСчета.СоздатьЭлемент();
	БанковскийСчетОбъект.ВалютаДенежныхСредств = Константы.ВалютаУчета.Получить();
	БанковскийСчетОбъект.ВидСчета = "Расчетный";
	БанковскийСчетОбъект.ВариантУказанияКПП = Перечисления.ВариантыУказанияКПП.ВоВсехПлатежныхПоручениях;
	Если ЗначениеЗаполнено(БанкПолучателя) Тогда
		НаименованиеДляЗаполнения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанкПолучателя, "Наименование");
		Если ЗначениеЗаполнено(НаименованиеБанка) И СтрНайти(НаименованиеБанка, "//") > 0
			И СтрНайти(НаименованиеДляЗаполнения, "//") = 0 Тогда
			НаименованиеДляЗаполнения = НаименованиеБанка;
		КонецЕсли;
	Иначе
		НаименованиеДляЗаполнения = НаименованиеБанка;
	КонецЕсли;

	БанковскийСчетОбъект.Банк = БанкПолучателя;
	БанковскийСчетОбъект.НомерСчета = РасчетныйСчет;
	
	БанковскийСчетОбъект.Наименование = НаименованиеБанковскогоСчета(
		БанковскийСчетОбъект, НаименованиеДляЗаполнения);
	БанковскийСчетОбъект.Владелец = Контрагент;
	
	Попытка
		БанковскийСчетОбъект.Записать();
		БанковскийСчет = БанковскийСчетОбъект.Ссылка;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Ошибка создания банковского счета органа %1:'"), Контрагент) + Символы.ПС
			+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка записи объекта'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.БанковскиеСчета, , ОписаниеОшибки);
	КонецПопытки;
	
	Возврат БанковскийСчет;
		
КонецФункции

// Функция формирует текст наименования для элемента счета.
//
// Параметры:
//  БанковскийСчет - ДанныеФормыСтруктура - банковский счет, для которого требуется сформировать наименование.
//  НаименованиеБанка - Строка - наименование банка, которое будет присвоено банковскому счету.
//
// Возвращаемое значение:
//  Строка -  сформированый текст наименования счета.
//
Функция НаименованиеБанковскогоСчета(БанковскийСчет, НаименованиеБанка) Экспорт
	
	БанковскийСчетНаименование = СокрЛП(БанковскийСчет.НомерСчета);
	Если ЗначениеЗаполнено(БанковскийСчет.Банк) Тогда
		БанковскийСчетНаименование = БанковскийСчетНаименование + ", " + НаименованиеБанка;
	КонецЕсли;
	Если БанковскийСчет.ВалютаДенежныхСредств <> Константы.ВалютаУчета.Получить() Тогда
		БанковскийСчетНаименование = БанковскийСчетНаименование + ", " + БанковскийСчет.ВалютаДенежныхСредств;
	КонецЕсли;
	
	Возврат Лев(БанковскийСчетНаименование, 100);
	
КонецФункции


#Область ОписанияРеквизитов

Процедура ДополнитьРеквизитыГосударственногоОрганаДаннымиИБ(РеквизитыГосударственногоОргана, Вид)
	
	ГосударственныйОрганИБ = ГосударственныйОрганИнформационнойБазы(Вид, РеквизитыГосударственногоОргана.Код);
	
	РеквизитыГосударственногоОргана.Вставить("Ссылка", ГосударственныйОрганИБ.Ссылка); // СправочникСсылка.Контрагенты
	РеквизитыГосударственногоОргана.Вставить("Вид", Вид);                              // ПеречислениеСсылка.ВидыГосударственныхОрганов
	
	ПлатежныеРеквизиты = РеквизитыГосударственногоОргана.ПлатежныеРеквизиты;
	
	ПлатежныеРеквизиты.Вставить("БанковскийСчет", ГосударственныйОрганИБ.БанковскийСчет); // СправочникСсылка.БанковскиеСчета
	ПлатежныеРеквизиты.Вставить("Банк",           ГосударственныйОрганИБ.Банк);           // СправочникСсылка.Банки
	
КонецПроцедуры

Функция НовыеРеквизитыГосударственногоОргана() Экспорт

	РеквизитыГосударственногоОргана = Новый Структура;
	
	// Заполняется на основе данных ФИАС
	
	РеквизитыГосударственногоОргана.Вставить("Ссылка");             // СправочникСсылка.Контрагенты
	РеквизитыГосударственногоОргана.Вставить("Вид");                // ПеречислениеСсылка.ВидыГосударственныхОрганов
	РеквизитыГосударственногоОргана.Вставить("Код");                // Строка, 10
	РеквизитыГосударственногоОргана.Вставить("ИНН");                // Строка, 10
	РеквизитыГосударственногоОргана.Вставить("КПП");                // Строка, 9
	РеквизитыГосударственногоОргана.Вставить("Наименование");       // Строка, 0
	РеквизитыГосударственногоОргана.Вставить("ПолноеНаименование"); // Строка, 0
	РеквизитыГосударственногоОргана.Вставить("Адрес");              // Строка, 0
	РеквизитыГосударственногоОргана.Вставить("Телефон");            // Строка, 0
	РеквизитыГосударственногоОргана.Вставить("ЭлектроннаяПочта");   // Строка, 0
	РеквизитыГосударственногоОргана.Вставить("ИнтернетСайт");       // Строка, 0
	РеквизитыГосударственногоОргана.Вставить("ПлатежныеРеквизиты"); // Структура из НовыеПлатежныеРеквизиты
	
	РеквизитыГосударственногоОргана.ПлатежныеРеквизиты = НовыеПлатежныеРеквизиты();
	
	// Служебный реквизит
	РеквизитыГосударственногоОргана.Вставить("ОписаниеОшибки");     // Строка, 0
	
	Возврат РеквизитыГосударственногоОргана;

КонецФункции

Функция НовыеПлатежныеРеквизиты()
	
	ПлатежныеРеквизиты = Новый Структура;
	
	ПлатежныеРеквизиты.Вставить("БанковскийСчет");     // СправочникСсылка.БанковскиеСчета
	ПлатежныеРеквизиты.Вставить("Банк");               // СправочникСсылка.Банки
	ПлатежныеРеквизиты.Вставить("БанкНаименование");   // Строка
	ПлатежныеРеквизиты.Вставить("ПолучательПлатежа");  // Строка
	ПлатежныеРеквизиты.Вставить("РасчетныйСчет");      // Строка, 20
	ПлатежныеРеквизиты.Вставить("КоррСчет");           // Строка
	ПлатежныеРеквизиты.Вставить("БИК");                // Строка
	
	Возврат ПлатежныеРеквизиты;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Реквизиты государственных органов могут определяться частью кода государственного органа
//
Функция КодГосударственногоОрганаДляЗапросаРеквизитов(ВидГосударственногоОргана, КодГосударственногоОргана)
	
	Если ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
		Возврат Лев(КодГосударственногоОргана, 4);
	ИначеЕсли ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганПФР Тогда
		Возврат Лев(КодГосударственногоОргана, 3);
	ИначеЕсли ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганФСС Тогда
		Возврат Лев(КодГосударственногоОргана, 4);
	Иначе
		Возврат КодГосударственногоОргана;
	КонецЕсли;
	
КонецФункции

Функция ГосударственныйОрганИнформационнойБазы(Вид, Код);
	
	ГосударственныйОрганИнформационнойБазы = Новый Структура();
	ГосударственныйОрганИнформационнойБазы.Вставить("Ссылка", Справочники.Контрагенты.ПустаяСсылка());
	ГосударственныйОрганИнформационнойБазы.Вставить("БанковскийСчет", Справочники.БанковскиеСчета.ПустаяСсылка());
	ГосударственныйОрганИнформационнойБазы.Вставить("Банк", Справочники.Банки.ПустаяСсылка());
	ГосударственныйОрганИнформационнойБазы.Вставить("БанкНаименование");
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Вид", Вид);
	Запрос.Параметры.Вставить("Код", Код);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка,
	|	Контрагенты.БанковскийСчетПоУмолчанию КАК БанковскийСчет,
	|	ЕСТЬNULL(Контрагенты.БанковскийСчетПоУмолчанию.Банк, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)) КАК Банк,
	|	ЕСТЬNULL(Контрагенты.БанковскийСчетПоУмолчанию.Банк.Наименование,"""") КАК БанкНаименование
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ВидГосударственногоОргана = &Вид
	|	И Контрагенты.КодГосударственногоОргана = &Код
	|	И Контрагенты.ПометкаУдаления = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ГосударственныйОрганИнформационнойБазы, Выборка);
	КонецЕсли;
	
	Возврат ГосударственныйОрганИнформационнойБазы;
	
КонецФункции

Функция РеквизитыПолучателяМИДол()
	
	Реквизиты = ЕдиныйНалоговыйСчет.РеквизитыМИДол();
	ГосОрган  = ГосударственныйОрган(Реквизиты.Вид, Реквизиты.Код);
	ЗаполнитьЗначенияСвойств(Реквизиты, ГосОрган, "Ссылка");
	
	Возврат Реквизиты;
	
КонецФункции

Функция КодГосударственногоОргана(ВидГосударственногоОргана, КодГосударственногоОргана)
	
	Если ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
		Возврат Лев(КодГосударственногоОргана, 4);
	ИначеЕсли ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганПФР Тогда
		Возврат Лев(КодГосударственногоОргана, 3);
	ИначеЕсли ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганФСС Тогда
		Возврат Лев(КодГосударственногоОргана, 4);
	Иначе
		Возврат КодГосударственногоОргана;
	КонецЕсли;
	
КонецФункции

Функция ВидНалоговогоОргана(ВидГосударственногоОргана) Экспорт
	
	Если ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.НалоговыйОрган") Тогда
		ВидНалоговогоОргана = "КодНО";
	ИначеЕсли ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.ОрганПФР") Тогда
		ВидНалоговогоОргана = "КодОрганаПФР";
	ИначеЕсли ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.ОрганФСС") Тогда
		ВидНалоговогоОргана = "КодПодчиненностиФСС";
	Иначе
		ВидНалоговогоОргана = "";
	КонецЕсли;
	
	Возврат ВидНалоговогоОргана;
	
КонецФункции

Функция НаименованиеПлательщикаПолучателяПоУмолчанию(ВладелецСчета, БанковскийСчет) Экспорт
	
	СвойстваВладельца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВладелецСчета, "Наименование, НаименованиеПолное");
	
	СвойстваБанковскогоСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанковскийСчет, "Банк, БанкРасчетов");
	
	Наименование = СокрЛП(СвойстваВладельца.НаименованиеПолное);
	
	Если ПустаяСтрока(Наименование) Тогда
		Наименование = СокрЛП(СвойстваВладельца.Наименование);
	КонецЕсли;

	Если ЗначениеЗаполнено(СвойстваБанковскогоСчета.БанкРасчетов)
			И ЗначениеЗаполнено(СвойстваБанковскогоСчета.Банк) Тогда
			
		СвойстваБанка  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СвойстваБанковскогоСчета.Банк, "Наименование, Город");
		
		Наименование = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 р/с %2 в %3 %4'"),
			Наименование, СвойстваБанковскогоСчета.НомерСчета, СокрЛП(СвойстваБанка.Наименование), СвойстваБанка.Город));
			
	КонецЕсли;
		
	Возврат Наименование;
	
КонецФункции

#КонецОбласти
