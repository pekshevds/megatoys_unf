
#Область СлужебныйПрограммныйИнтерфейс

// Формирует движения по регистрам подсистемы.
//      	 
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации -
//		Регистратор - ДокументСсылка - 
//		ТаблицаВыплат - ТаблицаЗначений - 
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//
Процедура СформироватьДокументыОплаченныеБезУдержанияНДФЛ(Движения, Отказ, Организация, Регистратор, ТаблицаВыплат, Записывать = Ложь) Экспорт
	
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение
//		МесяцНачисления.
//		Удержания - таблица значений с колонками
//				ФизическоеЛицо: должно быть непустым.
//				КатегорияУдержания - тип ПеречислениеСсылка.КатегорииУдержаний.
//				Удержание - тип ПланВидовРасчетаСсылка.Удержания.
//				Сумма
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		ОкончательныйРасчет - булево - признак того, надо ли помечать движения как предназначенные для межрасчетного
//		                               исчисления налога.
//
Процедура СформироватьСоциальныеВычетыПоУдержаниям(Регистратор, Движения, Отказ, Организация, ДатаОперации, МесяцНачисления, Удержания, Записывать = Ложь, ОкончательныйРасчет = Истина) Экспорт 

	Если Удержания.Количество() = 0 Тогда // данных не оказалось
		Возврат	
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("КатегорияУдержания");
	СтруктураПоиска.КатегорияУдержания = Перечисления.КатегорииУдержаний.ДобровольныеВзносыВНПФ;
	Вычеты = Удержания.Скопировать(СтруктураПоиска);
	СтруктураПоиска.КатегорияУдержания = Перечисления.КатегорииУдержаний.ДСВ;
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Удержания.Скопировать(СтруктураПоиска), Вычеты);

	Если Вычеты.Количество() = 0 Тогда
		Возврат	
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Удержания", Вычеты);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Удержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Удержания.Удержание КАК Удержание,
	|	Удержания.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТУдержания
	|ИЗ
	|	&Удержания КАК Удержания
	|";
	Запрос.Выполнить();
	
	УчетНДФЛ.СформироватьСоциальныеВычетыПоВременнойТаблице(Регистратор, Движения, Отказ, Организация, ДатаОперации, МесяцНачисления, Запрос.МенеджерВременныхТаблиц, Записывать, ОкончательныйРасчет);
	
КонецПроцедуры

// Дополняет перечень оплачиваемых платежным документом начислятелей оплаченными ранее документами, по которым по
// желанию пользователя не был удержан налог.
//      	 
// Параметры:
//      Регистратор - ДокументСсылка - ссылка на документ-регистратор.
//		Организация - СправочникСсылка.Организации -
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение.
//		ПериодРегистрации - дата - 
//      МенеджерВременныхТаблиц - МенеджерВременныхТаблиц, содержит вр. таблицу 
//      	ВТСписокСотрудников с полями 
//				ФизическоеЛицо: должно быть непустым
//          	СуммаВыплаты,
//          	ДокументОснование,
//          	СуммаНачисленная,
//          	СуммаВыплаченная
//		ТаблицаВыплат - таблица значений - выплачиваемые документом-регистратором суммы с колонками
//		ИмяТаблицыСписокСотрудников - Строка - 
//      	 
Процедура ДописатьДокументыОплаченныеБезУдержанияНДФЛ(Регистратор, Организация, ДатаОперации, ПериодРегистрации, МенеджерВременныхТаблиц, ТаблицаВыплат, ИмяТаблицыСписокСотрудников) Экспорт 

КонецПроцедуры

Функция УдерживатьНалогПриВыплатеАванса(Организация) Экспорт
	
	Возврат Истина;
	
КонецФункции

Функция УдерживатьНДФЛСНатуральногоДоходаПриБлижайшейВыплате(Организация) Экспорт

	Возврат Ложь;

КонецФункции

Функция ПланируемаяДатаВыплатыЗарплаты(Организация, МесяцНачисления) Экспорт

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.РасчетЗарплаты") Тогда
		МодульРасчетЗарплатыДляНебольшихОрганизацийПовтИсп = ОбщегоНазначения.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизацийПовтИсп");
		Возврат МодульРасчетЗарплатыДляНебольшихОрганизацийПовтИсп.ДатыВыплатыОрганизации(Организация, МесяцНачисления).Зарплата	
	Иначе
		Возврат КонецМесяца(МесяцНачисления)	
	КонецЕсли;

КонецФункции

#КонецОбласти

