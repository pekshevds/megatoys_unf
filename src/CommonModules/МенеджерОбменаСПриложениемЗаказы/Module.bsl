// Конвертация Управление нашей фирмой - > 1.7.Orders (1С: Заказы) от 05.10.2023 20:48:53
#Область ПрограммныйИнтерфейс

// Процедура, выполняемая перед началом конвертации данных.
//
// Параметры:
//   КомпонентыОбмена - Структура - структура компонентов обмена.
//
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт

	ЗаполнениеПараметровКонвертации(КомпонентыОбмена, КомпонентыОбмена.УзелКорреспондента);
	Если КомпонентыОбмена.НаправлениеОбмена = "Отправка" Тогда  
		ИнициироватьЛогВыгрузки(КомпонентыОбмена);
	
		ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Настройки_Отправка", "Имя");
		Если ПравилоОбработки <> Неопределено Тогда
			ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, Новый Структура, ПравилоОбработки);    
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры


// Процедура, выполняемая после выполнения конвертации данных.
//
// Параметры:
//   КомпонентыОбмена - Структура - структура компонентов обмена.
//
Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт

	Если КомпонентыОбмена.НаправлениеОбмена = "Отправка" Тогда
		Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
			
			ВыгрузкаДоговоровИндивидуальныхЦен(КомпонентыОбмена);	
			ВыгрузкаКонтактныхЛиц(КомпонентыОбмена);	 
			
			ВыгрузкаЦенНоменклатуры(КомпонентыОбмена);		
			ВыгрузкаОстатковНоменклатуры(КомпонентыОбмена);		
			ВыгрузкаИзображенийТоваров(КомпонентыОбмена);
			
			ЗаписатьЛогВЖурналРегистрации(КомпонентыОбмена);
			
		КонецЕсли;  
	КонецЕсли;
КонецПроцедуры


// Процедура, выполняемая перед началом отложенного заполнения объектов.
//
// Параметры:
//   КомпонентыОбмена - Структура - структура компонентов обмена.
//
Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт

	
КонецПроцедуры

// Возвращает версию формата менеджера обмена.
// Возвращаемое значение:
//  Строка - номер версии.
Функция ВерсияФорматаМенеджераОбмена() Экспорт
    Возврат "2";
КонецФункции

// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена - Строка - "Отправка" либо "Получение".
//  ПравилаОбработкиДанных - ТаблицаЗначений - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт

	Если НаправлениеОбмена = "Отправка" Тогда
		Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
			ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
		КонецЕсли;
		ДобавитьПОД_Документ_ЗаказПокупателя_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Настройки_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_РегистрСведений_ОстаткиТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_РегистрСведений_ОстаткиТоваров_Регистрация(ПравилаОбработкиДанных);
		ДобавитьПОД_РегистрСведений_ЦеныДоговоровКонтрагентов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_РегистрСведений_ЦеныНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_РегистрСведений_ЦеныНоменклатуры_Регистрация(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Клиенты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КонтактныеЛица_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатураПрисоединенныеФайлы_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтруктурныеЕдиницы_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ХарактеристикиНоменклатуры_Отправка(ПравилаОбработкиДанных);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_DocumentObject_ЗаказКлиента_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_DocumentObject_ОплатаКлиента_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_РегистрСведений_ЦеныДоговоровКонтрагентов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДоговорыКлиентов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Клиенты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КонтактныеЛицаКлиентов_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена - Строка - "Отправка" либо "Получение".
//  ПравилаКонвертации - ТаблицаЗначений - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт


	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_Документ_ЗаданиеТорговомуПредставителю_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказПокупателяСостояние_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Настройки_Отправка(ПравилаКонвертации);
		ДобавитьПКО_РегистрСведений_ОстаткиТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_РегистрСведений_ЦеныДоговоровКонтрагентов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_РегистрСведений_ЦеныНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Валюты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыКонтактнойИнформации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыЦен_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЕдиницыИзмеренияКлассификатор_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЕдиницыИзмеренияУпаковки_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КатегорииНоменклатурыВиды_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КонтактныеЛицаИзСтруктуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КонтрагентыКлиенты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатураИзСтруктуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатураПрисоединенныеФайл_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтруктурныеЕдиницыСклады_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Характеристики_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЦеновыеГруппы_Отправка(ПравилаКонвертации);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_Документ_ЗаказПокупателя_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОперацияПоПлатежнымКартам_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеВКассу_Получение(ПравилаКонвертации);
		ДобавитьПКО_РегСведений_ЦеныДоговоровКонтрагентов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Валюты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыЦен_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КонтактныеЛицаКлиентов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтруктурныеЕдиницы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Характеристики_Получение(ПравилаКонвертации);
	КонецЕсли;
	ДобавитьПКО_Справочник_КатегорииНоменклатурыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтруктурныеЕдиницыСклады_Группа(ПравилаКонвертации);
КонецПроцедуры
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - Строка - "Отправка" либо "Получение".
//  ПравилаКонвертации - ТаблицаЗначений - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		// Перечисление_ВидыКонтрагентов_ЮрФизЛицо.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВидыКонтрагентов_ЮрФизЛицо";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыКонтрагентов;
		ПравилоКонвертации.ТипXDTO   = "EnumRef.ЮрФизЛицо";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыКонтрагентов.ГосударственныйОрган, "ЮрЛицоНеРезидент");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель, "ИндивидуальныйПредприниматель");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыКонтрагентов.ФизическоеЛицо, "ФизЛицо");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыКонтрагентов.ЮридическоеЛицо, "ЮрЛицо");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_СистемыНалогообложения_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_СистемыНалогообложения_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СистемыНалогообложения;
		ПравилоКонвертации.ТипXDTO   = "EnumRef.СистемыНалогообложения";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.СистемыНалогообложения.Общая, "Общая");
		ЗначенияДляОтправки.Вставить(Перечисления.СистемыНалогообложения.ОсобыйПорядок, "Общая");
		ЗначенияДляОтправки.Вставить(Перечисления.СистемыНалогообложения.Упрощенная, "Упрощенная");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ЮридическоеФизическоеЛицо_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ЮридическоеФизическоеЛицо_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮридическоеФизическоеЛицо;
		ПравилоКонвертации.ТипXDTO   = "EnumRef.ЮрФизЛицо";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, "ФизЛицо");
		ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, "ЮрЛицо");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	КонецЕсли;

	// Перечисление_ТипыКонтактнойИнформации_Отправка.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ТипыКонтактнойИнформации_Отправка";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыКонтактнойИнформации;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ТипыКонтактнойИнформации";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыКонтактнойИнформации.Skype, "Skype");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыКонтактнойИнформации.Адрес, "Адрес");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, "АдресЭлектроннойПочты");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыКонтактнойИнформации.ВебСтраница, "ВебСтраница");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыКонтактнойИнформации.Другое, "Другое");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыКонтактнойИнформации.Телефон, "Телефон");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыКонтактнойИнформации.Факс, "Факс");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Skype", Перечисления.ТипыКонтактнойИнформации.Skype);
	ЗначенияДляПолучения.Вставить("Адрес", Перечисления.ТипыКонтактнойИнформации.Адрес);
	ЗначенияДляПолучения.Вставить("АдресЭлектроннойПочты", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ЗначенияДляПолучения.Вставить("ВебСтраница", Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
	ЗначенияДляПолучения.Вставить("Другое", Перечисления.ТипыКонтактнойИнформации.Другое);
	ЗначенияДляПолучения.Вставить("Телефон", Перечисления.ТипыКонтактнойИнформации.Телефон);
	ЗначенияДляПолучения.Вставить("Факс", Перечисления.ТипыКонтактнойИнформации.Факс);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Предопределен_ВидыКонтактнойИнформации_Отправка.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Предопределен_ВидыКонтактнойИнформации_Отправка";
	ПравилоКонвертации.ТипДанных = Метаданные.Справочники.ВидыКонтактнойИнформации;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ВидыКонтактнойИнформации";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица, "EmailКонтактногоЛица");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailКонтрагента, "EmailКлиента");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации, "EmailОрганизации");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента, "ДоставкиАдресКлиента");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации, "ПочтовыйАдресОрганизации");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица, "ТелефонКонтактногоЛица");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, "ТелефонКлиента");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, "ТелефонОрганизации");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации, "ФаксОрганизации");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, "АдресКлиента");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, "ФактАдресОрганизации");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, "ЮрАдресОрганизации");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("EmailКонтактногоЛица", Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица);
	ЗначенияДляПолучения.Вставить("EmailКлиента", Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
	ЗначенияДляПолучения.Вставить("EmailОрганизации", Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
	ЗначенияДляПолучения.Вставить("ДоставкиАдресКлиента", Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента);
	ЗначенияДляПолучения.Вставить("ПочтовыйАдресОрганизации", Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации);
	ЗначенияДляПолучения.Вставить("ТелефонКонтактногоЛица", Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица);
	ЗначенияДляПолучения.Вставить("ТелефонКлиента", Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	ЗначенияДляПолучения.Вставить("ТелефонОрганизации", Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	ЗначенияДляПолучения.Вставить("ФаксОрганизации", Справочники.ВидыКонтактнойИнформации.ФаксОрганизации);
	ЗначенияДляПолучения.Вставить("АдресКлиента", Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	ЗначенияДляПолучения.Вставить("ФактАдресОрганизации", Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	ЗначенияДляПолучения.Вставить("ЮрАдресОрганизации", Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

КонецПроцедуры

// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - Структура - структура, в которую добавляются параметры конвертации.
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
	ПараметрыКонвертации.Вставить("РегистрироватьОплатыПКО");
	ПараметрыКонвертации.Вставить("РегистрироватьОплатыПоДоверенностям");
	ПараметрыКонвертации.Вставить("РегистрироватьОплатыПоПлатежнымКартам");
	ПараметрыКонвертации.Вставить("ИспользоватьВесовыеХарактеристики");
	ПараметрыКонвертации.Вставить("ОстатокКоличество");
	ПараметрыКонвертации.Вставить("ПередаватьЦеныКонтрагентов");
	ПараметрыКонвертации.Вставить("ПередаватьИзображенияТоваров");
	ПараметрыКонвертации.Вставить("ЭквайринговыйТерминал");
	ПараметрыКонвертации.Вставить("СостояниеЗаданиеТорговомуПредставителю");
	ПараметрыКонвертации.Вставить("Пользователь");
	ПараметрыКонвертации.Вставить("Касса");
	ПараметрыКонвертации.Вставить("СтатьяДДСНаличные");
	ПараметрыКонвертации.Вставить("СтатьяДДСЭквайринг");
	ПараметрыКонвертации.Вставить("ВыгруженнаяНоменклатура");
	ПараметрыКонвертации.Вставить("ВыгруженныеКонтрагенты");
	ПараметрыКонвертации.Вставить("ВремяНачалаВыгрузки");
	ПараметрыКонвертации.Вставить("ЛогВыгрузки");
	ПараметрыКонвертации.Вставить("ТаблицаВыгружаемыхЦен");
	ПараметрыКонвертации.Вставить("Организация");
	ПараметрыКонвертации.Вставить("Склад");
	ПараметрыКонвертации.Вставить("ВидЦен");
	ПараметрыКонвертации.Вставить("СегментКонтрагентов");
	ПараметрыКонвертации.Вставить("СегментНоменклатуры");
	ПараметрыКонвертации.Вставить("СоставСегментаКонтрагентов");
	ПараметрыКонвертации.Вставить("СоставСегментаНоменклатуры");
	ПараметрыКонвертации.Вставить("ТаблицаВыгружаемыхОстатков");
	ПараметрыКонвертации.Вставить("ТаблицаШтрихкодов");
	ПараметрыКонвертации.Вставить("ПрефиксДляДанныхМобильногоУстройства");
	ПараметрыКонвертации.Вставить("ПроводитьЗаказ");
КонецПроцедуры

// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - Строка - имя процедуры этого модуля.
//  Параметры - Структура - структура, содержащая передаваемые параметры.
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_Документ_ЗаказПокупателя_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ЗаказПокупателя_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_РегистрСведений_ОстаткиТоваров_Регистрация_ПриОбработке" Тогда 
		ПОД_РегистрСведений_ОстаткиТоваров_Регистрация_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_РегистрСведений_ЦеныДоговоровКонтрагентов_Отправка_ПриОбработке" Тогда 
		ПОД_РегистрСведений_ЦеныДоговоровКонтрагентов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_РегистрСведений_ЦеныНоменклатуры_Регистрация_ПриОбработке" Тогда 
		ПОД_РегистрСведений_ЦеныНоменклатуры_Регистрация_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Клиенты_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Клиенты_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_КонтактныеЛица_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_КонтактныеЛица_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_НоменклатураПрисоединенныеФайлы_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_НоменклатураПрисоединенныеФайлы_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Организации_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Организации_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СтруктурныеЕдиницы_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СтруктурныеЕдиницы_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ХарактеристикиНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ХарактеристикиНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаданиеТорговомуПредставителю_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаданиеТорговомуПредставителю_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказПокупателя_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЗаказПокупателя_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказПокупателя_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЗаказПокупателя_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказПокупателяСостояние_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаказПокупателяСостояние_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОперацияПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОперацияПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОперацияПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОперацияПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеВКассу_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПоступлениеВКассу_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеВКассу_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПоступлениеВКассу_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Настройки_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Настройки_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_РегистрСведений_ОстаткиТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_РегистрСведений_ОстаткиТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_РегистрСведений_ЦеныДоговоровКонтрагентов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_РегистрСведений_ЦеныДоговоровКонтрагентов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_РегистрСведений_ЦеныНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_РегистрСведений_ЦеныНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_РегСведений_ЦеныДоговоровКонтрагентов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_РегСведений_ЦеныДоговоровКонтрагентов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_РегСведений_ЦеныДоговоровКонтрагентов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_РегСведений_ЦеныДоговоровКонтрагентов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Валюты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыКонтактнойИнформации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ВидыКонтактнойИнформации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыЦен_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ВидыЦен_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЕдиницыИзмеренияКлассификатор_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ЕдиницыИзмеренияКлассификатор_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЕдиницыИзмеренияУпаковки_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ЕдиницыИзмеренияУпаковки_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КатегорииНоменклатурыВиды_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_КатегорииНоменклатурыВиды_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КатегорииНоменклатурыГруппа_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_КатегорииНоменклатурыГруппа_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КонтактныеЛицаИзСтруктуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_КонтактныеЛицаИзСтруктуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КонтактныеЛицаКлиентов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_КонтактныеЛицаКлиентов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КонтактныеЛицаКлиентов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_КонтактныеЛицаКлиентов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КонтрагентыКлиенты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_КонтрагентыКлиенты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НоменклатураГруппа_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_НоменклатураГруппа_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НоменклатураИзСтруктуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_НоменклатураИзСтруктуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НоменклатураПрисоединенныеФайл_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_НоменклатураПрисоединенныеФайл_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтруктурныеЕдиницыСклады_Группа_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СтруктурныеЕдиницыСклады_Группа_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтруктурныеЕдиницыСклады_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СтруктурныеЕдиницыСклады_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Характеристики_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Характеристики_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Характеристики_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Характеристики_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Характеристики_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Характеристики_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЦеновыеГруппы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ЦеновыеГруппы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	КонецЕсли;
КонецПроцедуры


#КонецОбласти
#Область СлужебныеПроцедурыИФункции
Процедура ДобавитьПОД_DocumentObject_ЗаказКлиента_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "DocumentObject_ЗаказКлиента_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "DocumentObject.ЗаказКлиента";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказПокупателя_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_DocumentObject_ОплатаКлиента_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "DocumentObject_ОплатаКлиента_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "DocumentObject.ОплатаКлиента";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОперацияПоПлатежнымКартам_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеВКассу_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ЗаказПокупателя_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаказПокупателя_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ЗаказПокупателя;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ЗаказПокупателя_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаданиеТорговомуПредставителю_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказПокупателяСостояние_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Настройки_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Настройки_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Настройки_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_РегистрСведений_ОстаткиТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "РегистрСведений_ОстаткиТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РегистрСведений_ОстаткиТоваров_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_РегистрСведений_ОстаткиТоваров_Регистрация(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "РегистрСведений_ОстаткиТоваров_Регистрация";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ОстаткиТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_РегистрСведений_ОстаткиТоваров_Регистрация_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
КонецПроцедуры

Процедура ДобавитьПОД_РегистрСведений_ЦеныДоговоровКонтрагентов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "РегистрСведений_ЦеныДоговоровКонтрагентов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ПриОбработке            = "ПОД_РегистрСведений_ЦеныДоговоровКонтрагентов_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РегистрСведений_ЦеныДоговоровКонтрагентов_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_РегистрСведений_ЦеныДоговоровКонтрагентов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "РегистрСведений_ЦеныДоговоровКонтрагентов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "InformationRegisterRecord.ЦеныНоменклатурыПоДоговорамКлиентов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РегСведений_ЦеныДоговоровКонтрагентов_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_РегистрСведений_ЦеныНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "РегистрСведений_ЦеныНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РегистрСведений_ЦеныНоменклатуры_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_РегистрСведений_ЦеныНоменклатуры_Регистрация(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "РегистрСведений_ЦеныНоменклатуры_Регистрация";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ЦеныНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_РегистрСведений_ЦеныНоменклатуры_Регистрация_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ДоговорыКлиентов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДоговорыКлиентов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "CatalogObject.ДоговорыКлиентов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоговорыКонтрагентов_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДоговорыКонтрагентов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоговорыКонтрагентов_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Клиенты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Клиенты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Контрагенты;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Клиенты_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыКлиенты_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Клиенты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Клиенты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "CatalogObject.Клиенты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_КонтактныеЛица_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КонтактныеЛица_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_КонтактныеЛица_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтактныеЛицаИзСтруктуры_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_КонтактныеЛицаКлиентов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КонтактныеЛицаКлиентов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "CatalogObject.КонтактныеЛицаКлиентов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтактныеЛицаКлиентов_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Номенклатура_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Номенклатура;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_НоменклатураПрисоединенныеФайлы_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_НоменклатураПрисоединенныеФайлы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.НоменклатураПрисоединенныеФайлы;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_НоменклатураПрисоединенныеФайлы_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураПрисоединенныеФайл_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Организации_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СтруктурныеЕдиницы_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтруктурныеЕдиницы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтруктурныеЕдиницы;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СтруктурныеЕдиницы_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтруктурныеЕдиницыСклады_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ХарактеристикиНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ХарактеристикиНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ХарактеристикиНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Характеристики_Отправка");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЗаданиеТорговомуПредставителю_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗаданиеТорговомуПредставителю_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЗаказПокупателя;
	ПравилоКонвертации.ОбъектФормата     = "DocumentObject.ЗаданиеТорговомуПредставителю";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаданиеТорговомуПредставителю_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                         "ДетализацияПоНоменклатуре", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "ЖелаемаяДатаОтгрузки", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "ДатаВизитаПлан", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "Валюта", , "Справочник_Валюты_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВремяДоставкиПо",          "ВремяОкончания");
	ДобавитьПКС(СвойстваШапки, "ВремяДоставкиС",           "ВремяНачала");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Date");
	ДобавитьПКС(СвойстваШапки, "Договор",                  "ДоговорКлиента", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Клиент", 1, "Справочник_КонтрагентыКлиенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Number");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",          "DeletionMark");
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "Posted");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиницаРезерв", "Склад", , "Справочник_СтруктурныеЕдиницыСклады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "",       "Задачи");
	ДобавитьПКС(СвойстваТЧ, "", "Выполнена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ОписаниеЗадачи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ОписаниеРезультата", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы", "Товары");
	ДобавитьПКС(СвойстваТЧ, "Количество",           "Количество");
	ДобавитьПКС(СвойстваТЧ, "Количество",           "КоличествоПлан");
	ДобавитьПКС(СвойстваТЧ, "Количество",           "КоличествоУпаковок");
	ДобавитьПКС(СвойстваТЧ, "Количество",           "КоличествоУпаковокПлан");
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",         "Номенклатура", ,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "ПроцентСкидкиНаценки", "ПроцентРучнойСкидки");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                "Сумма");
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",             "СуммаНДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаСкидкиНаценки",   "СуммаРучнойСкидки");
	ДобавитьПКС(СвойстваТЧ, "Цена",                 "Цена");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЗаказПокупателя_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ЗаказПокупателя_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ЗаказПокупателя;
	ПравилоКонвертации.ОбъектФормата                = "DocumentObject.ЗаказКлиента";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ЗаказПокупателя_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ЗаказПокупателя_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                              "", 1);
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",                      "АдресДоставки");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",                     "", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                    "ВалютаДокумента", , "Справочник_Валюты_Получение");
	ДобавитьПКС(СвойстваШапки, "ВидЗаказа",                          "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидЦен",                             "ВидЦены", , "Справочник_ВидыЦен_Получение");
	ДобавитьПКС(СвойстваШапки, "ВремяДоставкиПо",                    "ВремяДоставкиПо");
	ДобавитьПКС(СвойстваШапки, "ВремяДоставкиС",                     "ВремяДоставкиС");
	ДобавитьПКС(СвойстваШапки, "Дата",                               "", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",             "Date");
	ДобавитьПКС(СвойстваШапки, "ДатаИзменения",                      "Date");
	ДобавитьПКС(СвойстваШапки, "ДатаОтгрузки",                       "ДатаОтгрузки");
	ДобавитьПКС(СвойстваШапки, "Договор",                            "Договор", , "Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "ДополнительнаяИнформацияПоДоставке", "ДополнительнаяИнформацияПоДоставке");
	ДобавитьПКС(СвойстваШапки, "Касса",                              "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",                        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                         "Клиент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Кратность",                          "", 1);
	ДобавитьПКС(СвойстваШапки, "Курс",                               "", 1);
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",            "Number");
	ДобавитьПКС(СвойстваШапки, "ОжидаемаяДатаВручения",              "ДатаОтгрузки");
	ДобавитьПКС(СвойстваШапки, "Организация",                        "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ОснованиеПечати",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "ОснованиеПечатиСсылка",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Ответственный",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "ПодписьГлавногоБухгалтера",          "", 1);
	ДобавитьПКС(СвойстваШапки, "ПодписьКассира",                     "", 1);
	ДобавитьПКС(СвойстваШапки, "ПодписьРуководителя",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ПоложениеВидаРабот",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "ПоложениеДатыОтгрузки",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ПоложениеСклада",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "СкидкиРассчитаны",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "СостояниеЗаказа",                    "СостояниеЗаказа", 1);
	ДобавитьПКС(СвойстваШапки, "СпециальныйНалоговыйРежим",          "", 1);
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиницаПродажи",          "", 1, "Справочник_СтруктурныеЕдиницы_Получение");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиницаРезерв",           "Склад", , "Справочник_СтруктурныеЕдиницы_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                     "СуммаДокумента");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",              "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы", "Товары");
	ДобавитьПКС(СвойстваТЧ, "Количество",           "Количество");
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",         "Номенклатура", ,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПроцентСкидкиНаценки", "ПроцентРучнойСкидки");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                "Сумма");
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",             "СуммаНДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаСкидкиНаценки",   "СуммаРучнойСкидки");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",       "Номенклатура", ,"Справочник_Характеристики_Получение");
	ДобавитьПКС(СвойстваТЧ, "Цена",                 "Цена");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЗаказПокупателяСостояние_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗаказПокупателяСостояние_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЗаказПокупателя;
	ПравилоКонвертации.ОбъектФормата     = "OrderStatus";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаказПокупателяСостояние_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                "СтатусДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Состояние", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ПечатнаяФормаДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Ссылка", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",            "Date", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаОтгрузки",    "ДатаОтгрузки");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Number", 1);
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "Проведен",        "Проведен");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "СуммаДокументаУП");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОперацияПоПлатежнымКартам_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОперацияПоПлатежнымКартам_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОперацияПоПлатежнымКартам;
	ПравилоКонвертации.ОбъектФормата                = "DocumentObject.ОплатаКлиента";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОперацияПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОперацияПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                     "", 1);
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",            "", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",     "Валюта", , "Справочник_Валюты_Получение");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",               "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидПлатежнойКарты",         "ВидПлатежнойКарты");
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",         "ДокументОснование", , "Документ_ЗаказПокупателя_Получение");
	ДобавитьПКС(СвойстваШапки, "Касса",                     "", 1);
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Клиент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Кратность",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Курс",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",        "", 1);
	ДобавитьПКС(СвойстваШапки, "НомерПлатежнойКарты",       "НомерПлатежнойКарты");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ПодписьКассира",            "", 1);
	ДобавитьПКС(СвойстваШапки, "ПоложениеСтатьи",           "", 1);
	ДобавитьПКС(СвойстваШапки, "СпециальныйНалоговыйРежим", "", 1);
	ДобавитьПКС(СвойстваШапки, "СпособОплаты",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Статус",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Статья",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "СуммаДокумента");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",     "", 1);
	ДобавитьПКС(СвойстваШапки, "ЭквайринговыйТерминал",     "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "Договор",       "ДоговорКлиента", ,"Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваТЧ, "Заказ",         "ДокументОснование", ,"Документ_ЗаказПокупателя_Получение");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",  "СуммаДокумента");
	ДобавитьПКС(СвойстваТЧ, "СуммаРасчетов", "СуммаДокумента");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПоступлениеВКассу_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПоступлениеВКассу_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеВКассу;
	ПравилоКонвертации.ОбъектФормата                = "DocumentObject.ОплатаКлиента";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПоступлениеВКассу_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПоступлениеВКассу_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",        "Валюта", , "Справочник_Валюты_Получение");
	ДобавитьПКС(СвойстваШапки, "ВариантЗаполненияРасшифровки", "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                         "", 1);
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",            "ДокументОснование", , "Документ_ЗаказПокупателя_Получение");
	ДобавитьПКС(СвойстваШапки, "Касса",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "Контрагент",                   "Клиент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Кратность",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Курс",                         "", 1);
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",           "", 1);
	ДобавитьПКС(СвойстваШапки, "НовыйМеханизмИнкассации",      "", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",                  "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ПодписьГлавногоБухгалтера",    "", 1);
	ДобавитьПКС(СвойстваШапки, "ПодписьКассира",               "", 1);
	ДобавитьПКС(СвойстваШапки, "ПодписьРуководителя",          "", 1);
	ДобавитьПКС(СвойстваШапки, "Подразделение",                "", 1, "Справочник_СтруктурныеЕдиницы_Получение");
	ДобавитьПКС(СвойстваШапки, "ПоложениеПодразделения",       "", 1);
	ДобавитьПКС(СвойстваШапки, "ПоложениеПроекта",             "", 1);
	ДобавитьПКС(СвойстваШапки, "ПоложениеСтатьи",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Приложение",                   "ПредставлениеДокумента");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "СпециальныйНалоговыйРежим",    "", 1);
	ДобавитьПКС(СвойстваШапки, "Статья",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",               "СуммаДокумента");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",        "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "Договор",       "ДоговорКлиента", ,"Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваТЧ, "Заказ",         "ДокументОснование", ,"Документ_ЗаказПокупателя_Получение");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",  "СуммаДокумента");
	ДобавитьПКС(СвойстваТЧ, "СуммаРасчетов", "СуммаДокумента");

КонецПроцедуры

Процедура ДобавитьПКО_Настройки_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Настройки_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Settings";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Настройки_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "UseCashRegister", 1);
	ДобавитьПКС(СвойстваШапки, "", "UseCardPayment", 1);
	ДобавитьПКС(СвойстваШапки, "", "UseAdditionalProps", 1);
	ДобавитьПКС(СвойстваШапки, "", "UnitWeight", 1);
	ДобавитьПКС(СвойстваШапки, "", "ShowOddments", 1);
	ДобавитьПКС(СвойстваШапки, "", "PrefixIB", 1);
	ДобавитьПКС(СвойстваШапки, "", "UseCashPayment", 1);
	ДобавитьПКС(СвойстваШапки, "", "PartnersHowContractors", 1);
	ДобавитьПКС(СвойстваШапки, "", "MessageNumberOut", 1);
	ДобавитьПКС(СвойстваШапки, "", "GoogleCloudProjectNumber", 1);
	ДобавитьПКС(СвойстваШапки, "", "FrequencyExchangeRates", 1);
	ДобавитьПКС(СвойстваШапки, "", "FrequencyExchangeBalance", 1);
	ДобавитьПКС(СвойстваШапки, "", "CheckTINRussianRules", 1);
	ДобавитьПКС(СвойстваШапки, "", "ChangePriceInOrder", 1);
	ДобавитьПКС(СвойстваШапки, "", "CardsTypes", 1);
	ДобавитьПКС(СвойстваШапки, "", "AddChangeCustomerOrders", 1);
	ДобавитьПКС(СвойстваШапки, "", "AddChangeCustomer", 1);
	ДобавитьПКС(СвойстваШапки, "", "UsingJobTargets", 1);
	ДобавитьПКС(СвойстваШапки, "", "UsingCustomerAgreement", 1);
	ДобавитьПКС(СвойстваШапки, "", "MessageNumberIn", 1);
	ДобавитьПКС(СвойстваШапки, "", "UseManualDiscounts", 1);
	ДобавитьПКС(СвойстваШапки, "", "UseWeight", 1);
	ДобавитьПКС(СвойстваШапки, "", "UseStoreInOrderLine", 1);
	ДобавитьПКС(СвойстваШапки, "", "UseSimplifiedClientInput", 1);
	ДобавитьПКС(СвойстваШапки, "", "UseRequestsToReturnOfGoodsByClient", 1);
	ДобавитьПКС(СвойстваШапки, "", "UsePushNotifications", 1);
	ДобавитьПКС(СвойстваШапки, "", "UsePricesInOrderLine", 1);
	ДобавитьПКС(СвойстваШапки, "", "UseOrderStatus", 1);
	ДобавитьПКС(СвойстваШапки, "", "DetailJobTargets", 1);
	ДобавитьПКС(СвойстваШапки, "", "UseImages", 1);
	ДобавитьПКС(СвойстваШапки, "", "UseGoodsBalance", 1);
	ДобавитьПКС(СвойстваШапки, "", "UseCustomerContract", 1);
	ДобавитьПКС(СвойстваШапки, "", "UseCommonAdditionalValues", 1);
	ДобавитьПКС(СвойстваШапки, "", "UseCommonAdditionalProps", 1);
	ДобавитьПКС(СвойстваШапки, "", "UseCommission", 1);

КонецПроцедуры

Процедура ДобавитьПКО_РегистрСведений_ОстаткиТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "РегистрСведений_ОстаткиТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "InformationRegisterRecord.ТоварыНаСкладах";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_РегистрСведений_ОстаткиТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Склад", 1, "Справочник_СтруктурныеЕдиницыСклады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "ВНаличии", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Склад", 1,"Справочник_СтруктурныеЕдиницыСклады_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СостояниеОстаткаИндекс", 1);

КонецПроцедуры

Процедура ДобавитьПКО_РегистрСведений_ЦеныДоговоровКонтрагентов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "РегистрСведений_ЦеныДоговоровКонтрагентов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "InformationRegisterRecord.ЦеныНоменклатурыПоДоговорамКлиентов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_РегистрСведений_ЦеныДоговоровКонтрагентов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ДоговорКлиента", 1, "СправочникСсылка_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "ВидНоменклатуры", 1,"Справочник_КатегорииНоменклатурыВиды_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДоговорКлиента", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Остаток", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РодительНоменклатуры", 1,"Справочник_НоменклатураГруппа");
	ДобавитьПКС(СвойстваТЧ, "", "Склад", 1,"Справочник_СтруктурныеЕдиницыСклады_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СостояниеОстаткаИндекс", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтрокаПоиска", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦеноваяГруппа", 1,"Справочник_ЦеновыеГруппы_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_РегистрСведений_ЦеныНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "РегистрСведений_ЦеныНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "InformationRegisterRecord.ЦеныНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_РегистрСведений_ЦеныНоменклатуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВидЦены", 1, "Справочник_ВидыЦен_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "ВидНоменклатуры", 1,"Справочник_КатегорииНоменклатурыВиды_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ВидЦены", 1,"Справочник_ВидыЦен_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РодительНоменклатуры", 1,"Справочник_НоменклатураГруппа");
	ДобавитьПКС(СвойстваТЧ, "", "Склад", 1,"Справочник_СтруктурныеЕдиницыСклады_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтрокаПоиска", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦеноваяГруппа", 1,"Справочник_ЦеновыеГруппы_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_РегСведений_ЦеныДоговоровКонтрагентов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "РегСведений_ЦеныДоговоровКонтрагентов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата                = "InformationRegisterRecord.ЦеныНоменклатурыПоДоговорамКлиентов";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_РегСведений_ЦеныДоговоровКонтрагентов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_РегСведений_ЦеныДоговоровКонтрагентов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВидЦены", 1, "Справочник_ВидыЦен_Получение");
	ДобавитьПКС(СвойстваШапки, "", "ДоговорКлиента", 1, "Справочник_ДоговорыКонтрагентов_Получение");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Валюты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Валюты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ОбъектФормата     = "CatalogObject.Валюты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Валюты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",             "Code");
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Description");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "DeletionMark");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Валюты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Валюты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ОбъектФормата                = "CatalogObject.Валюты";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код", "Code");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ВидыКонтактнойИнформации_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ВидыКонтактнойИнформации_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ВидыКонтактнойИнформации;
	ПравилоКонвертации.ОбъектФормата     = "CatalogObject.ВидыКонтактнойИнформации";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ВидыКонтактнойИнформации_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                                    "ERPКод", 1);
	ДобавитьПКС(СвойстваШапки, "ВключатьСтрануВПредставление",        "ВключатьСтрануВПредставление");
	ДобавитьПКС(СвойстваШапки, "МожноИзменятьСпособРедактирования",   "МожноИзменятьСпособРедактирования");
	ДобавитьПКС(СвойстваШапки, "Наименование",                        "Description");
	ДобавитьПКС(СвойстваШапки, "ОбязательноеЗаполнение",              "ОбязательноеЗаполнение");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",                     "DeletionMark");
	ДобавитьПКС(СвойстваШапки, "ПроверятьКорректность",               "ПроверятьКорректность");
	ДобавитьПКС(СвойстваШапки, "РазрешитьВводНесколькихЗначений",     "РазрешитьВводНесколькихЗначений");
	ДобавитьПКС(СвойстваШапки, "РеквизитДопУпорядочивания",           "РеквизитДопУпорядочивания");
	ДобавитьПКС(СвойстваШапки, "СкрыватьНеактуальныеАдреса",          "СкрыватьНеактуальныеАдреса");
	ДобавитьПКС(СвойстваШапки, "Тип",                                 "Тип", , "Перечисление_ТипыКонтактнойИнформации_Отправка");
	ДобавитьПКС(СвойстваШапки, "УдалитьРедактированиеТолькоВДиалоге", "РедактированиеТолькоВДиалоге");
	ДобавитьПКС(СвойстваШапки, "ЭтоГруппа",                           "IsFolder");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ВидыЦен_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ВидыЦен_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ВидыЦен;
	ПравилоКонвертации.ОбъектФормата     = "CatalogObject.ВидыЦен";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ВидыЦен_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                "ERPКод", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаЦены",      "ВалютаЦены", , "Справочник_Валюты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Description");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "DeletionMark");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС", "ЦенаВключаетНДС");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ВидыЦен_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ВидыЦен_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ВидыЦен;
	ПравилоКонвертации.ОбъектФормата                = "CatalogObject.ВидыЦен";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Ссылка", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ДоговорыКонтрагентов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата     = "CatalogObject.ДоговорыКлиентов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                "Действует", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ЕстьУточнениеЦен", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Комиссия", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Склад", 1, "Справочник_СтруктурныеЕдиницыСклады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                "СуммаДолгаПоДоговору", 1);
	ДобавитьПКС(СвойстваШапки, "",                "УникальныйКлюч", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ERPКодДоговора", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаРасчетов",  "ВалютаВзаиморасчетов", , "Справочник_Валюты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Владелец",        "Клиент", , "Справочник_КонтрагентыКлиенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Владелец",        "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "ДатаДоговора",    "Дата");
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Description");
	ДобавитьПКС(СвойстваШапки, "НомерДоговора",   "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "DeletionMark");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДоговорыКонтрагентов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата                = "CatalogObject.ДоговорыКлиентов";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                "Ссылка", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаРасчетов",  "ВалютаВзаиморасчетов", , "Справочник_Валюты_Получение");
	ДобавитьПКС(СвойстваШапки, "ВидЦен",          "", 1, "Справочник_ВидыЦен_Получение");
	ДобавитьПКС(СвойстваШапки, "Владелец",        "Клиент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "ДатаДоговора",    "Дата");
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Description");
	ДобавитьПКС(СвойстваШапки, "НомерДоговора",   "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "DeletionMark");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ЕдиницыИзмеренияКлассификатор_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ЕдиницыИзмеренияКлассификатор_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоКонвертации.ОбъектФормата     = "CatalogObject.ЕдиницыИзмерения";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ЕдиницыИзмеренияКлассификатор_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                     "Code");
	ДобавитьПКС(СвойстваШапки, "МеждународноеСокращение", "МеждународноеСокращение");
	ДобавитьПКС(СвойстваШапки, "Наименование",            "Description");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",      "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",         "DeletionMark");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ЕдиницыИзмеренияУпаковки_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ЕдиницыИзмеренияУпаковки_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ЕдиницыИзмерения;
	ПравилоКонвертации.ОбъектФормата     = "CatalogObject.УпаковкиНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ЕдиницыИзмеренияУпаковки_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                                 "ERPКод", 1);
	ДобавитьПКС(СвойстваШапки, "",                                 "НаименованиеПолное", 1);
	ДобавитьПКС(СвойстваШапки, "Владелец",                         "Владелец", , "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмеренияПоКлассификатору", "ЕдиницаИзмерения", , "Справочник_ЕдиницыИзмеренияКлассификатор_Отправка");
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмеренияПоКлассификатору", "ВесЕдиницаИзмерения", , "Справочник_ЕдиницыИзмеренияКлассификатор_Отправка");
	ДобавитьПКС(СвойстваШапки, "Коэффициент",                      "Коэффициент");
	ДобавитьПКС(СвойстваШапки, "Наименование",                     "Description");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КатегорииНоменклатурыВиды_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_КатегорииНоменклатурыВиды_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.КатегорииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "CatalogObject.ВидыНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_КатегорииНоменклатурыВиды_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                "ERPКод", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Description");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "DeletionMark");
	ДобавитьПКС(СвойстваШапки, "Родитель",        "Parent", , "Справочник_КатегорииНоменклатурыГруппа");
	ДобавитьПКС(СвойстваШапки, "ЭтоГруппа",       "IsFolder");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КатегорииНоменклатурыГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КатегорииНоменклатурыГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КатегорииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "CatalogObject.ВидыНоменклатурыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_КатегорииНоменклатурыГруппа_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Description");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Parent", , "Справочник_КатегорииНоменклатурыГруппа");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КонтактныеЛицаИзСтруктуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_КонтактныеЛицаИзСтруктуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "CatalogObject.КонтактныеЛицаКлиентов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_КонтактныеЛицаИзСтруктуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "DeletionMark", 1);
	ДобавитьПКС(СвойстваШапки, "", "ДатаРождения", 1);
	ДобавитьПКС(СвойстваШапки, "", "Description", 1);
	ДобавитьПКС(СвойстваШапки, "", "ERPКод", 1);
	ДобавитьПКС(СвойстваШапки, "", "Клиент", 1, "Справочник_КонтрагентыКлиенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "ДолжностьПоВизитке", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "",    "АдресЭП", 1);
	ДобавитьПКС(СвойстваТЧ, "",    "Город", 1);
	ДобавитьПКС(СвойстваТЧ, "",    "ДоменноеИмяСервера", 1);
	ДобавитьПКС(СвойстваТЧ, "",    "ЗначенияПолей", 1);
	ДобавитьПКС(СвойстваТЧ, "",    "НомерТелефона", 1);
	ДобавитьПКС(СвойстваТЧ, "",    "НомерТелефонаБезКодов", 1);
	ДобавитьПКС(СвойстваТЧ, "",    "Представление", 1);
	ДобавитьПКС(СвойстваТЧ, "",    "Регион", 1);
	ДобавитьПКС(СвойстваТЧ, "",    "Страна", 1);
	ДобавитьПКС(СвойстваТЧ, "",    "Тип", 1,"Перечисление_ТипыКонтактнойИнформации_Отправка");
	ДобавитьПКС(СвойстваТЧ, "Вид", "Вид", 1,"Предопределен_ВидыКонтактнойИнформации_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КонтактныеЛицаКлиентов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КонтактныеЛицаКлиентов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КонтактныеЛица;
	ПравилоКонвертации.ОбъектФормата                = "CatalogObject.КонтактныеЛицаКлиентов";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_КонтактныеЛицаКлиентов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_КонтактныеЛицаКлиентов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                "ДолжностьПоВизитке", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Клиент", 1, "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "",                "Ссылка", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаРождения",    "ДатаРождения");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Description");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "DeletionMark");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "АдресЭП",               "АдресЭП");
	ДобавитьПКС(СвойстваТЧ, "Вид",                   "Вид", ,"Предопределен_ВидыКонтактнойИнформации_Отправка");
	ДобавитьПКС(СвойстваТЧ, "Город",                 "Город");
	ДобавитьПКС(СвойстваТЧ, "ДоменноеИмяСервера",    "ДоменноеИмяСервера");
	ДобавитьПКС(СвойстваТЧ, "ЗначенияПолей",         "ЗначенияПолей");
	ДобавитьПКС(СвойстваТЧ, "НомерТелефона",         "НомерТелефона");
	ДобавитьПКС(СвойстваТЧ, "НомерТелефонаБезКодов", "НомерТелефонаБезКодов");
	ДобавитьПКС(СвойстваТЧ, "Представление",         "Представление");
	ДобавитьПКС(СвойстваТЧ, "Регион",                "Регион");
	ДобавитьПКС(СвойстваТЧ, "Страна",                "Страна");
	ДобавитьПКС(СвойстваТЧ, "Тип",                   "Тип", ,"Перечисление_ТипыКонтактнойИнформации_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата     = "CatalogObject.Контрагенты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                   "Клиент", 1, "Справочник_КонтрагентыКлиенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                   "ПредставлениеКонтрагента", 1);
	ДобавитьПКС(СвойстваШапки, "",                   "ERPКод", 1);
	ДобавитьПКС(СвойстваШапки, "",                   "ИННКПП", 1);
	ДобавитьПКС(СвойстваШапки, "ВидКонтрагента",     "ЮрФизЛицо", 1, "Перечисление_ВидыКонтрагентов_ЮрФизЛицо");
	ДобавитьПКС(СвойстваШапки, "ИНН",                "ИНН");
	ДобавитьПКС(СвойстваШапки, "КПП",                "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Description");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",    "DeletionMark");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Контрагенты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата                = "CatalogObject.Клиенты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                "Ссылка", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ОтгрузкаЗапрещена", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Самовывоз", 1);
	ДобавитьПКС(СвойстваШапки, "",                "СтрокаПоиска", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ERPКод", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Description");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "DeletionMark");
	ДобавитьПКС(СвойстваШапки, "Родитель",        "Parent", , "Справочник_Контрагенты_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "АдресЭП",               "АдресЭП");
	ДобавитьПКС(СвойстваТЧ, "Вид",                   "Вид", ,"Предопределен_ВидыКонтактнойИнформации_Отправка");
	ДобавитьПКС(СвойстваТЧ, "Город",                 "Город");
	ДобавитьПКС(СвойстваТЧ, "ДоменноеИмяСервера",    "ДоменноеИмяСервера");
	ДобавитьПКС(СвойстваТЧ, "ЗначенияПолей",         "ЗначенияПолей");
	ДобавитьПКС(СвойстваТЧ, "НомерТелефона",         "НомерТелефона");
	ДобавитьПКС(СвойстваТЧ, "НомерТелефонаБезКодов", "НомерТелефонаБезКодов");
	ДобавитьПКС(СвойстваТЧ, "Представление",         "Представление");
	ДобавитьПКС(СвойстваТЧ, "Регион",                "Регион");
	ДобавитьПКС(СвойстваТЧ, "Страна",                "Страна");
	ДобавитьПКС(СвойстваТЧ, "Тип",                   "Тип", ,"Перечисление_ТипыКонтактнойИнформации_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КонтрагентыКлиенты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_КонтрагентыКлиенты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата     = "CatalogObject.Клиенты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_КонтрагентыКлиенты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                "ERPКод", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ВидЦены", 1, "Справочник_ВидыЦен_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                "ВремяДоставкиПо", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ВремяДоставкиС", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ДополнительнаяИнформацияПоДоставке", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ДополнительныеРеквизиты", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ОтгрузкаЗапрещена", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ПричинаДобавленияВСтопЛист", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Самовывоз", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Склад", 1, "Справочник_СтруктурныеЕдиницыСклады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Код",             "Code");
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Description");
	ДобавитьПКС(СвойстваШапки, "Наименование",    "СтрокаПоиска");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "DeletionMark");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "АдресЭП",               "АдресЭП");
	ДобавитьПКС(СвойстваТЧ, "Вид",                   "Вид", ,"Предопределен_ВидыКонтактнойИнформации_Отправка");
	ДобавитьПКС(СвойстваТЧ, "Город",                 "Город");
	ДобавитьПКС(СвойстваТЧ, "ДоменноеИмяСервера",    "ДоменноеИмяСервера");
	ДобавитьПКС(СвойстваТЧ, "ЗначенияПолей",         "ЗначенияПолей");
	ДобавитьПКС(СвойстваТЧ, "НомерТелефона",         "НомерТелефона");
	ДобавитьПКС(СвойстваТЧ, "НомерТелефонаБезКодов", "НомерТелефонаБезКодов");
	ДобавитьПКС(СвойстваТЧ, "Представление",         "Представление");
	ДобавитьПКС(СвойстваТЧ, "Регион",                "Регион");
	ДобавитьПКС(СвойстваТЧ, "Страна",                "Страна");
	ДобавитьПКС(СвойстваТЧ, "Тип",                   "Тип", ,"Перечисление_ТипыКонтактнойИнформации_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Номенклатура_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата     = "CatalogObject.Номенклатура";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Артикул", 1);
	ДобавитьПКС(СвойстваШапки, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмеренияКлассификатор_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "НаименованиеПолное", 1);
	ДобавитьПКС(СвойстваШапки, "", "Parent", 1, "Справочник_НоменклатураГруппа");
	ДобавитьПКС(СвойстваШапки, "", "ФайлКартинки", 1, "Справочник_НоменклатураПрисоединенныеФайл_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "ЦеноваяГруппа", 1, "Справочник_ЦеновыеГруппы_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Code", 1);
	ДобавитьПКС(СвойстваШапки, "", "DeletionMark", 1);
	ДобавитьПКС(СвойстваШапки, "", "ERPКодХарактеристика", 1);
	ДобавитьПКС(СвойстваШапки, "", "IsFolder", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВесЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмеренияУпаковки_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "ВесЗнаменатель", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВесИспользовать", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВесМожноУказыватьВДокументах", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВесЧислитель", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВидНоменклатуры", 1, "Справочник_КатегорииНоменклатурыВиды_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "ЕдиницаЗаказа", 1, "Справочник_ЕдиницыИзмеренияУпаковки_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Описание", 1);
	ДобавитьПКС(СвойстваШапки, "", "СтавкаНДСЧислом", 1);
	ДобавитьПКС(СвойстваШапки, "", "СтрокаПоиска", 1);
	ДобавитьПКС(СвойстваШапки, "", "Услуга", 1);
	ДобавитьПКС(СвойстваШапки, "", "Штрихкод", 1);
	ДобавитьПКС(СвойстваШапки, "", "ERPКодНоменклатура", 1);
	ДобавитьПКС(СвойстваШапки, "", "Description", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Номенклатура_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата                = "CatalogObject.Номенклатура";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ERPКодНоменклатура", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НоменклатураГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата                = "CatalogObject.НоменклатураГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_НоменклатураГруппа_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",             "ERPКодНоменклатура", 1);
	ДобавитьПКС(СвойстваШапки, "Код",          "Code");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Description");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Parent", , "Справочник_НоменклатураГруппа");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_НоменклатураИзСтруктуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_НоменклатураИзСтруктуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "CatalogObject.Номенклатура";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_НоменклатураИзСтруктуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "DeletionMark", 1);
	ДобавитьПКС(СвойстваШапки, "", "IsFolder", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВесЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмеренияУпаковки_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "ВесЗнаменатель", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВесИспользовать", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВесМожноУказыватьВДокументах", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВесЧислитель", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВидНоменклатуры", 1, "Справочник_КатегорииНоменклатурыВиды_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "ДополнительныеРеквизиты", 1);
	ДобавитьПКС(СвойстваШапки, "", "ЕдиницаЗаказа", 1, "Справочник_ЕдиницыИзмеренияУпаковки_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмеренияКлассификатор_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Описание", 1);
	ДобавитьПКС(СвойстваШапки, "", "СтавкаНДСЧислом", 1);
	ДобавитьПКС(СвойстваШапки, "", "СтрокаПоиска", 1);
	ДобавитьПКС(СвойстваШапки, "", "Услуга", 1);
	ДобавитьПКС(СвойстваШапки, "", "ФайлКартинки", 1, "Справочник_НоменклатураПрисоединенныеФайл_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "ЦеноваяГруппа", 1, "Справочник_ЦеновыеГруппы_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Штрихкод", 1);
	ДобавитьПКС(СвойстваШапки, "", "Code", 1);
	ДобавитьПКС(СвойстваШапки, "", "Description", 1);
	ДобавитьПКС(СвойстваШапки, "", "ERPКодНоменклатура", 1);
	ДобавитьПКС(СвойстваШапки, "", "ERPКодХарактеристика", 1);
	ДобавитьПКС(СвойстваШапки, "", "Parent", 1, "Справочник_НоменклатураГруппа");
	ДобавитьПКС(СвойстваШапки, "", "Артикул", 1);
	ДобавитьПКС(СвойстваШапки, "", "НаименованиеПолное", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_НоменклатураПрисоединенныеФайл_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_НоменклатураПрисоединенныеФайл_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.НоменклатураПрисоединенныеФайлы;
	ПравилоКонвертации.ОбъектФормата     = "CatalogObject.НоменклатураПрисоединенныеФайлы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_НоменклатураПрисоединенныеФайл_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                "ХранимыйФайл", 1);
	ДобавитьПКС(СвойстваШапки, "ВладелецФайла",   "ВладелецФайла", , "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "ДатаСоздания",    "ДатаСоздания");
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Description");
	ДобавитьПКС(СвойстваШапки, "Описание",        "Описание");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "DeletionMark");
	ДобавитьПКС(СвойстваШапки, "Размер",          "Размер");
	ДобавитьПКС(СвойстваШапки, "Расширение",      "Расширение");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Организации_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата     = "CatalogObject.Организации";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                          "Банк", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "БИК", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "ГлавныйБухгалтер", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "ГородБанка", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "ДополнительныеРеквизиты", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "КонтактнаяИнформация", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "КоррСчет", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "НомерСчета", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Руководитель", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "СистемаНалогообложения", 1, "Перечисление_СистемыНалогообложения_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                          "ERPКод", 1);
	ДобавитьПКС(СвойстваШапки, "ИНН",                       "ИНН");
	ДобавитьПКС(СвойстваШапки, "КПП",                       "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",              "Description");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",        "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",           "DeletionMark");
	ДобавитьПКС(СвойстваШапки, "Префикс",                   "Префикс");
	ДобавитьПКС(СвойстваШапки, "СвидетельствоДатаВыдачи",   "СвидетельствоДатаВыдачи");
	ДобавитьПКС(СвойстваШапки, "СвидетельствоСерияНомер",   "СвидетельствоСерияНомер");
	ДобавитьПКС(СвойстваШапки, "ЮридическоеФизическоеЛицо", "ЮрФизЛицо", , "Перечисление_ЮридическоеФизическоеЛицо_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Организации_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "CatalogObject.Организации";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Ссылка", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СтруктурныеЕдиницы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтруктурныеЕдиницы_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтруктурныеЕдиницы;
	ПравилоКонвертации.ОбъектФормата                = "CatalogObject.Склады";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Ссылка", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СтруктурныеЕдиницыСклады_Группа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтруктурныеЕдиницыСклады_Группа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтруктурныеЕдиницы;
	ПравилоКонвертации.ОбъектФормата                = "CatalogObject.СкладыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_СтруктурныеЕдиницыСклады_Группа_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Description");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Parent", , "Справочник_СтруктурныеЕдиницыСклады_Группа");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СтруктурныеЕдиницыСклады_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СтруктурныеЕдиницыСклады_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.СтруктурныеЕдиницы;
	ПравилоКонвертации.ОбъектФормата     = "CatalogObject.Склады";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СтруктурныеЕдиницыСклады_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                "КонтактнаяИнформация", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ERPКод", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Description");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "DeletionMark");
	ДобавитьПКС(СвойстваШапки, "Родитель",        "Parent", , "Справочник_СтруктурныеЕдиницыСклады_Группа");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Характеристики_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Характеристики_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "CatalogObject.Номенклатура";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Характеристики_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "DeletionMark", 1);
	ДобавитьПКС(СвойстваШапки, "", "IsFolder", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВесЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмеренияУпаковки_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "ВесЗнаменатель", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВесИспользовать", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВесМожноУказыватьВДокументах", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВесЧислитель", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВидНоменклатуры", 1, "Справочник_КатегорииНоменклатурыВиды_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "ЕдиницаЗаказа", 1, "Справочник_ЕдиницыИзмеренияУпаковки_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмеренияКлассификатор_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Описание", 1);
	ДобавитьПКС(СвойстваШапки, "", "СтавкаНДСЧислом", 1);
	ДобавитьПКС(СвойстваШапки, "", "СтрокаПоиска", 1);
	ДобавитьПКС(СвойстваШапки, "", "Услуга", 1);
	ДобавитьПКС(СвойстваШапки, "", "ФайлКартинки", 1, "Справочник_НоменклатураПрисоединенныеФайл_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "ЦеноваяГруппа", 1, "Справочник_ЦеновыеГруппы_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Code", 1);
	ДобавитьПКС(СвойстваШапки, "", "Description", 1);
	ДобавитьПКС(СвойстваШапки, "", "ERPКодНоменклатура", 1);
	ДобавитьПКС(СвойстваШапки, "", "ERPКодХарактеристика", 1);
	ДобавитьПКС(СвойстваШапки, "", "Parent", 1, "Справочник_НоменклатураГруппа");
	ДобавитьПКС(СвойстваШапки, "", "Артикул", 1);
	ДобавитьПКС(СвойстваШапки, "", "НаименованиеПолное", 1);
	ДобавитьПКС(СвойстваШапки, "", "Штрихкод", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Характеристики_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Характеристики_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ХарактеристикиНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "CatalogObject.Номенклатура";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Характеристики_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Характеристики_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ERPКодХарактеристика", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ЦеновыеГруппы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ЦеновыеГруппы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ЦеновыеГруппы;
	ПравилоКонвертации.ОбъектФормата     = "CatalogObject.ЦеновыеГруппы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ЦеновыеГруппы_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Description");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "DeletionMark");

КонецПроцедуры



Функция ДобавитьПКТЧ(ПравилоКонвертации, ИмяТЧКонфигурации, ИмяТЧФормата)
    Если ПравилоКонвертации.СвойстваТабличныхЧастей.Колонки.Количество() = 0 Тогда
        ОбменДаннымиXDTOСервер.ИнициализироватьСвойстваТабличныхЧастей(ПравилоКонвертации);
    КонецЕсли;
    КонвертацияТабличнойЧасти                = ПравилоКонвертации.СвойстваТабличныхЧастей.Добавить();
    КонвертацияТабличнойЧасти.ТЧКонфигурации = ИмяТЧКонфигурации;
    КонвертацияТабличнойЧасти.ТЧФормата      = ИмяТЧФормата;
    КонвертацияТабличнойЧасти.Свойства       = ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации();
    Возврат КонвертацияТабличнойЧасти.Свойства;
КонецФункции

Процедура ДобавитьПКС(РодительПКС, СвойствоКонфигурации, СвойствоФормата, ИспользуетсяАлгоритмКонвертации = 0, 
                    ПравилоКонвертацииСвойства = "")
	НоваяСтрока                                 = РодительПКС.Добавить();
	НоваяСтрока.СвойствоКонфигурации            = СвойствоКонфигурации;
	НоваяСтрока.СвойствоФормата                 = СвойствоФормата;
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = ?(ИспользуетсяАлгоритмКонвертации = 0, Ложь, Истина);
	НоваяСтрока.ПравилоКонвертацииСвойства      = ПравилоКонвертацииСвойства;
КонецПроцедуры

#Область ОбработчикиКонвертации
Процедура ПОД_Документ_ЗаказПокупателя_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если НЕ ПроверитьОбъектПоФильтру(ДанныеИБ, КомпонентыОбмена) Тогда 
		ИспользованиеПКО.Документ_ЗаказПокупателяСостояние_Отправка = Ложь;
		ИспользованиеПКО.Документ_ЗаданиеТорговомуПредставителю_Отправка = Ложь;
		Возврат;
	КонецЕсли;
	
	СостояниеЗаданиеТорговомуПредставителю = ?(КомпонентыОбмена.ПараметрыКонвертации.СостояниеЗаданиеТорговомуПредставителю = Неопределено, Ложь, КомпонентыОбмена.ПараметрыКонвертации.СостояниеЗаданиеТорговомуПредставителю);
	Если ДанныеИБ.СостояниеЗаказа = СостояниеЗаданиеТорговомуПредставителю Тогда 
		ИспользованиеПКО.Документ_ЗаказПокупателяСостояние_Отправка = Ложь;   
		ИспользованиеПКО.Документ_ЗаданиеТорговомуПредставителю_Отправка = Истина;   
	Иначе
		ИспользованиеПКО.Документ_ЗаказПокупателяСостояние_Отправка = Истина;   
		ИспользованиеПКО.Документ_ЗаданиеТорговомуПредставителю_Отправка = Ложь;   
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_РегистрСведений_ОстаткиТоваров_Регистрация_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	СтруктурнаяЕдиница = ДанныеИБ.Отбор.СтруктурнаяЕдиница.Значение; 
	Если ТипЗнч(СтруктурнаяЕдиница) <> Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаВыгружаемыхОстатков = КомпонентыОбмена.ПараметрыКонвертации.ТаблицаВыгружаемыхОстатков;
	Если ТаблицаВыгружаемыхОстатков = Неопределено Тогда
		ИнициироватьТаблицуВыгружаемыхОстатков(КомпонентыОбмена);
		ТаблицаВыгружаемыхОстатков = КомпонентыОбмена.ПараметрыКонвертации.ТаблицаВыгружаемыхОстатков;
	КонецЕсли; 
	
	СтрокаЗаписи = ТаблицаВыгружаемыхОстатков.Добавить();     
	СтрокаЗаписи.Организация = ДанныеИБ.Отбор.Организация.Значение;
	СтрокаЗаписи.СтруктурнаяЕдиница = ДанныеИБ.Отбор.СтруктурнаяЕдиница.Значение;
	СтрокаЗаписи.Номенклатура = ДанныеИБ.Отбор.Номенклатура.Значение;
	СтрокаЗаписи.Характеристика = ДанныеИБ.Отбор.Характеристика.Значение;   
	
	КомпонентыОбмена.ПараметрыКонвертации.ТаблицаВыгружаемыхОстатков = ТаблицаВыгружаемыхОстатков;
КонецПроцедуры
Процедура ПОД_РегистрСведений_ЦеныДоговоровКонтрагентов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если НЕ КомпонентыОбмена.ПараметрыКонвертации.ПередаватьЦеныКонтрагентов Тогда
		ИспользованиеПКО.РегистрСведений_ЦеныДоговоровКонтрагентов_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_РегистрСведений_ЦеныНоменклатуры_Регистрация_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ТаблицаВыгружаемыхЦен = КомпонентыОбмена.ПараметрыКонвертации.ТаблицаВыгружаемыхЦен;
	Если ТаблицаВыгружаемыхЦен = Неопределено Тогда
		ИнициироватьТаблицуВыгружаемыхЦен(КомпонентыОбмена);
		ТаблицаВыгружаемыхЦен = КомпонентыОбмена.ПараметрыКонвертации.ТаблицаВыгружаемыхЦен;
	КонецЕсли;
	
	СтрокаЗаписи = ТаблицаВыгружаемыхЦен.Добавить();     
	СтрокаЗаписи.ВидЦен = ДанныеИБ.Отбор.ВидЦен.Значение;
	СтрокаЗаписи.Номенклатура = ДанныеИБ.Отбор.Номенклатура.Значение;
	СтрокаЗаписи.Характеристика = ДанныеИБ.Отбор.Характеристика.Значение;
	
	КомпонентыОбмена.ПараметрыКонвертации.ТаблицаВыгружаемыхЦен = ТаблицаВыгружаемыхЦен;
КонецПроцедуры
Процедура ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если НЕ ПроверитьОбъектПоФильтру(ДанныеИБ, КомпонентыОбмена) Тогда 
		ИспользованиеПКО.Справочник_ДоговорыКонтрагентов_Отправка = Ложь;
		Возврат;
	КонецЕсли;     
	
	Если НЕ ДанныеИБ.ВидДоговора = Перечисления.ВидыДоговоров.СПокупателем Тогда 
		ИспользованиеПКО.Справочник_ДоговорыКонтрагентов_Отправка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если НЕ ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда 
		ИспользованиеПКО.Справочник_ДоговорыКонтрагентов_Отправка = Ложь;
		Возврат;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_Клиенты_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если НЕ ПроверитьОбъектПоФильтру(ДанныеИБ, КомпонентыОбмена) Тогда 
		ИспользованиеПКО.Справочник_КонтрагентыКлиенты_Отправка = Ложь;
		ИспользованиеПКО.Справочник_Контрагенты_Отправка = Ложь;
		Возврат;
	КонецЕсли;
	
	ИспользованиеПКО.Справочник_КонтрагентыКлиенты_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_Контрагенты_Отправка = Не ДанныеИБ.ЭтоГруппа;
	
	Если Не ДанныеИБ.ЭтоГруппа Тогда
		Если Не ДанныеИБ.Покупатель Тогда
			ИспользованиеПКО.Справочник_КонтрагентыКлиенты_Отправка = Ложь;
			ИспользованиеПКО.Справочник_Контрагенты_Отправка = Ложь;
			Возврат;
		КонецЕсли;
	
		Если ЗначениеЗаполнено(ДанныеИБ.Родитель)
			И Не ОбъектСуществуетВБазе(ДанныеИБ.Родитель) Тогда
			ИспользованиеПКО.Справочник_КонтрагентыКлиенты_Отправка = Ложь;
			ИспользованиеПКО.Справочник_Контрагенты_Отправка = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_КонтактныеЛица_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если НЕ ПроверитьОбъектПоФильтру(ДанныеИБ, КомпонентыОбмена) Тогда 
		ИспользованиеПКО.Справочник_КонтактныеЛицаИзСтруктуры_Отправка = Ложь;
		Возврат;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если НЕ ПроверитьОбъектПоФильтру(ДанныеИБ, КомпонентыОбмена) Тогда 
		ИспользованиеПКО.Справочник_Номенклатура_Отправка = Ложь;
		ИспользованиеПКО.Справочник_НоменклатураГруппа    = Ложь;
		Возврат;
	КонецЕсли;
	
	ИспользованиеПКО.Справочник_Номенклатура_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_НоменклатураГруппа    = ДанныеИБ.ЭтоГруппа;
	
	Если Не ДанныеИБ.ЭтоГруппа
		И ЗначениеЗаполнено(ДанныеИБ.Родитель)
		И Не ОбъектСуществуетВБазе(ДанныеИБ.Родитель) Тогда
		ИспользованиеПКО.Справочник_Номенклатура_Отправка = Ложь;
	КонецЕсли;   
	
	Если Не ДанныеИБ.ЭтоГруппа Тогда
	
		ТекстЗапроса = "ВЫБРАТЬ
		|	СправочникХарактеристикиНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК СправочникХарактеристикиНоменклатуры
		|ГДЕ
		|	НЕ СправочникХарактеристикиНоменклатуры.Недействителен
		|	И СправочникХарактеристикиНоменклатуры.Владелец = &ВладелецНоменклатура
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СправочникХарактеристикиНоменклатуры.Ссылка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК СправочникХарактеристикиНоменклатуры
		|ГДЕ
		|	НЕ СправочникХарактеристикиНоменклатуры.Недействителен
		|	И СправочникХарактеристикиНоменклатуры.Владелец = &ВладелецКатегория";
			 
		Запрос = Новый Запрос;    
		Запрос.Текст = ТекстЗапроса;
	
		Запрос.УстановитьПараметр("ВладелецНоменклатура", ДанныеИБ.Ссылка);
		Запрос.УстановитьПараметр("ВладелецКатегория", ДанныеИБ.КатегорияНоменклатуры);
	
		Результат = Запрос.Выполнить();  
		Если НЕ Результат.Пустой() Тогда
			ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_ХарактеристикиНоменклатуры_Отправка", "Имя");
			Если ПравилоОбработки <> Неопределено Тогда
				Выборка = Результат.Выбрать();
				Пока Выборка.Следующий() Цикл  
					СтруктураОбъекта = Новый Структура("Номенклатура, Характеристика", ДанныеИБ.Ссылка, Выборка.Ссылка);
					ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СтруктураОбъекта, ПравилоОбработки);    
				КонецЦикла;	
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_НоменклатураПрисоединенныеФайлы_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если НЕ ПроверитьОбъектПоФильтру(ДанныеИБ, КомпонентыОбмена) Тогда 
		ИспользованиеПКО.Справочник_НоменклатураПрисоединенныеФайл_Отправка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если НЕ КомпонентыОбмена.ПараметрыКонвертации.ПередаватьИзображенияТоваров Тогда
		ИспользованиеПКО.Справочник_НоменклатураПрисоединенныеФайл_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_Организации_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если НЕ ПроверитьОбъектПоФильтру(ДанныеИБ, КомпонентыОбмена) Тогда 
		ИспользованиеПКО.Справочник_Организации_Отправка = Ложь;
		Возврат;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_СтруктурныеЕдиницы_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если НЕ ПроверитьОбъектПоФильтру(ДанныеИБ, КомпонентыОбмена) Тогда 
		ИспользованиеПКО.Справочник_СтруктурныеЕдиницыСклады_Отправка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если НЕ (ДанныеИБ.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад
		ИЛИ ДанныеИБ.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет
		ИЛИ ДанныеИБ.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница) Тогда
		ИспользованиеПКО.Справочник_СтруктурныеЕдиницыСклады_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_ХарактеристикиНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если НЕ ПроверитьОбъектПоФильтру(ДанныеИБ, КомпонентыОбмена) Тогда 
		ИспользованиеПКО.Справочник_Характеристики_Отправка = Ложь;
		Возврат;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ЗаданиеТорговомуПредставителю_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ДетализацияПоНоменклатуре", ДанныеИБ.Запасы.Количество() > 0); 
	ЖелаемаяДатаОтгрузки = ДанныеИБ.ОжидаемаяДатаВручения;
	Если Не ЗначениеЗаполнено(ЖелаемаяДатаОтгрузки) Тогда
		ЖелаемаяДатаОтгрузки = ДанныеИБ.ДатаОтгрузки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ЖелаемаяДатаОтгрузки) Тогда
		ЖелаемаяДатаОтгрузки = ДанныеИБ.Дата;
	КонецЕсли;
	ДанныеXDTO.Вставить("ЖелаемаяДатаОтгрузки", ЖелаемаяДатаОтгрузки); 
	ДанныеXDTO.Вставить("ДатаВизитаПлан", ЖелаемаяДатаОтгрузки); 
	
	ТаблицаЗадачи = Новый ТаблицаЗначений;
	ТаблицаЗадачи.Колонки.Добавить("ОписаниеРезультата");
	ТаблицаЗадачи.Колонки.Добавить("ОписаниеЗадачи");
	ТаблицаЗадачи.Колонки.Добавить("Выполнена");         
	НоваяЗадача = ТаблицаЗадачи.Добавить(); 
	НоваяЗадача.ОписаниеЗадачи = "Посетить " + ДанныеИБ.Контрагент;
	НоваяЗадача.Выполнена = Ложь;
	НоваяЗадача.ОписаниеРезультата = "";
	ДанныеXDTO.Вставить("Задачи", ТаблицаЗадачи);  
	 
	ЗаписатьВЛогВыгрузки(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
Процедура ПКО_Документ_ЗаказПокупателя_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ЗапланироватьОплату = Ложь;
	ПолученныеДанные.ПлатежныйКалендарь.Очистить();  
	Если ДанныеXDTO.Свойство("ДатаПредоплатыПоДокументу") И ДанныеXDTO.Свойство("СуммаПредоплатыПоДокументу") Тогда  
		Если ЗначениеЗаполнено(ДанныеXDTO.ДатаПредоплатыПоДокументу) И ЗначениеЗаполнено(ДанныеXDTO.СуммаПредоплатыПоДокументу) Тогда     
		ПолученныеДанные.ЗапланироватьОплату = Истина;
		СтрокаСледующегоПлатежа = ПолученныеДанные.ПлатежныйКалендарь.Добавить();       
		СтрокаСледующегоПлатежа.ДатаОплаты = ДанныеXDTO.ДатаПредоплатыПоДокументу; 
		СтрокаСледующегоПлатежа.СуммаОплаты = ДанныеXDTO.СуммаПредоплатыПоДокументу;    
		ПроцентОплаты = 100 * СтрокаСледующегоПлатежа.СуммаОплаты / ПолученныеДанные.СуммаДокумента; 
		СтрокаСледующегоПлатежа.ПроцентОплаты = ПроцентОплаты;    
		СтрокаСледующегоПлатежа.СуммаНДСОплаты = Окр(ПолученныеДанные.Запасы.Итог("СуммаНДС") * ПроцентОплаты / 100, 2, 1);
	
		Остаток = ПолученныеДанные.СуммаДокумента - ДанныеXDTO.СуммаПредоплатыПоДокументу;
		Если Остаток > 0 Тогда
			СтрокаСледующегоПлатежа = ПолученныеДанные.ПлатежныйКалендарь.Добавить();       
			СтрокаСледующегоПлатежа.СуммаОплаты = Остаток;  
			СтрокаСледующегоПлатежа.ПроцентОплаты = 100 - ПроцентОплаты; 
			СтрокаСледующегоПлатежа.ДатаОплаты = ДанныеXDTO.ДатаОплаты; 
			СтрокаСледующегоПлатежа.СуммаНДСОплаты = Окр(ПолученныеДанные.Запасы.Итог("СуммаНДС") * СтрокаСледующегоПлатежа.ПроцентОплаты / 100, 2, 1);
		КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ЗаказПокупателя_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.Дата = ТекущаяДатаСеанса();    
	ПолученныеДанные.Автор = КомпонентыОбмена.УзелКорреспондента.Пользователь;
	ПолученныеДанные.Ответственный =  УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				КомпонентыОбмена.УзелКорреспондента.Пользователь,
				"ОсновнойОтветственный");;
	ПолученныеДанные.БанковскийСчет = ПолученныеДанные.Организация.БанковскийСчетПоУмолчанию;      
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу;
	ПолученныеДанные.ВидЗаказа = Справочники.ВидыЗаказовПокупателей.Основной;   
	ПолученныеДанные.СуммаВключаетНДС = ?(ЗначениеЗаполнено(ПолученныеДанные.ВидЦен), ПолученныеДанные.ВидЦен.ЦенаВключаетНДС, Неопределено);
	
	ПолученныеДанные.Курс = 1;
	ПолученныеДанные.Кратность = 1;   
	
	ПроводитьЗаказ = ?(КомпонентыОбмена.ПараметрыКонвертации.ПроводитьЗаказ = Неопределено, Ложь, КомпонентыОбмена.ПараметрыКонвертации.ПроводитьЗаказ);
	Если ПроводитьЗаказ Тогда     
		ПолученныеДанные.Проведен = Истина;
	КонецЕсли;
	
	Если ПолученныеДанные.Контрагент.ВестиРасчетыПоДоговорам Тогда 
		Если ЗначениеЗаполнено(ПолученныеДанные.Договор.ВидЦен) Тогда 
			ПолученныеДанные.СуммаВключаетНДС = ПолученныеДанные.Договор.ВидЦен.ЦенаВключаетНДС;
		КонецЕсли;
			
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ПолученныеДанные.Дата, Новый Структура("Валюта", ПолученныеДанные.Договор.ВалютаРасчетов));
		ПолученныеДанные.Курс = СтруктураПоВалюте.Курс;
		ПолученныеДанные.Кратность = СтруктураПоВалюте.Кратность;  
		
		ПолученныеДанные.ОснованиеПечатиСсылка = ПолученныеДанные.Договор;
		КомпонентыПредставления = Новый Массив;
		Если Константы.ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати.Получить() Тогда
			КомпонентыПредставления.Добавить(НСтр("ru = 'Договор:'"));
		КонецЕсли;
		КомпонентыПредставления.Добавить(Строка(ПолученныеДанные.Договор));
		ПолученныеДанные.ОснованиеПечати = СтрСоединить(КомпонентыПредставления, " ");
	КонецЕсли;    
	
	ПолученныеДанные.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(ПолученныеДанные.Организация,, ПолученныеДанные.Дата); 
	
	ПолученныеДанные.Касса = ПолученныеДанные.Организация.КассаПоУмолчанию;
	ПолученныеДанные.ПодписьРуководителя = ПолученныеДанные.Организация.ПодписьРуководителя;
	ПолученныеДанные.ПодписьГлавногоБухгалтера = ПолученныеДанные.Организация.ПодписьГлавногоБухгалтера;    
	
	ПолученныеДанные.ПоложениеВидаРабот = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	ПолученныеДанные.ПоложениеДатыОтгрузки = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	ПолученныеДанные.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;    
	ПолученныеДанные.СкидкиРассчитаны = Истина;   
	ПолученныеДанные.СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.НеПрименяется;      
	
	ПолученныеДанные.ХозяйственнаяОперация = Справочники.ХозяйственныеОперации.ЗаказНаПродажу;  
	ПолученныеДанные.СтруктурнаяЕдиницаПродажи = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение; 
	ПолученныеДанные.СостояниеЗаказа = ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказаПокупателя(ПолученныеДанные.ВидЗаказа);  
	
	Для Каждого СтрокаЗапасов Из ПолученныеДанные.Запасы Цикл   
		СтрокаЗапасов.ТипНоменклатурыЗапас = СтрокаЗапасов.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
										ИЛИ СтрокаЗапасов.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат");
	
		Если ПолученныеДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") Тогда
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		ИначеЕсли ЗначениеЗаполнено(СтрокаЗапасов.Номенклатура.ВидСтавкиНДС) Тогда
			СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаЗапасов.Номенклатура.ВидСтавкиНДС, ПолученныеДанные.Дата);
		Иначе
			СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(ПолученныеДанные.Организация.ВидСтавкиНДСПоУмолчанию, ПолученныеДанные.Дата);
		КонецЕсли;  
		СтрокаЗапасов.СтавкаНДС = СтавкаНДС;      
		ТабличныеЧастиУНФКлиентСервер.РассчитатьСуммуНДСИВсего(СтрокаЗапасов, Новый Структура("СуммаВключаетНДС",ПолученныеДанные.СуммаВключаетНДС));  
		
	 	СтрокаЗапасов.ЕдиницаИзмерения = СтрокаЗапасов.Номенклатура.ЕдиницаИзмерения;
	КонецЦикла;   
	
	Если ДанныеИБ = Неопределено Тогда
		ПолученныеДанные.УстановитьНовыйНомер(КомпонентыОбмена.ПараметрыКонвертации.ПрефиксДляДанныхМобильногоУстройства);
		Возврат;
	КонецЕсли;  
	
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	ДанныеИБ.Запасы.Загрузить(ПолученныеДанные.Запасы.Выгрузить());  
	Если ПолученныеДанные.ПлатежныйКалендарь.Количество() > 0 Тогда 
		ДанныеИБ.ПлатежныйКалендарь.Загрузить(ПолученныеДанные.ПлатежныйКалендарь.Выгрузить());
	КонецЕсли;
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Процедура ПКО_Документ_ЗаказПокупателяСостояние_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Состояние = "НеОбработан";
	Если ДанныеИБ.СостояниеЗаказа = Справочники.СостоянияЗаказНарядов.Завершен
		ИЛИ ДанныеИБ.СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.Завершен Тогда
		Состояние = "Закрыт";  
	ИначеЕсли ДанныеИБ.Проведен Тогда
		Состояние = "ГотовКОбеспечению";
	КонецЕсли; 
	ДанныеXDTO.Вставить("Состояние", Состояние);
	
	СтатусДокумента = "НеСогласован";
	Если ДанныеИБ.СостояниеЗаказа = Справочники.СостоянияЗаказНарядов.Завершен
		ИЛИ ДанныеИБ.СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.Завершен Тогда
		СтатусДокумента = "Закрыт";  
	ИначеЕсли ДанныеИБ.Проведен Тогда
		СтатусДокумента = "КОбеспечению";
	КонецЕсли; 
	ДанныеXDTO.Вставить("СтатусДокумента", СтатусДокумента);
	 
	КомандыПечати = УправлениеПечатью.КомандыПечатиОбъекта(Метаданные.Документы.ЗаказПокупателя);
	НайденнаяКоманда = КомандыПечати.Найти("ЗаказПокупателя", "Идентификатор"); 
	КомандаПечатиВФайл = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(НайденнаяКоманда);	
	
	МассивОбъектовУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеИБ.Ссылка);
	
	НастройкиСохранения = УправлениеПечатью.НастройкиСохранения();
	НастройкиСохранения.ФорматыСохранения.Добавить(ТипФайлаТабличногоДокумента.MXL);
	НастройкиСохранения.ПереводитьИменаФайловВТранслит = Истина;
	
	РезультатПечати = УправлениеПечатью.НапечататьВФайл(КомандаПечатиВФайл, МассивОбъектовУчета, НастройкиСохранения);
	Если РезультатПечати.Количество() <> 0 Тогда
		ПечатнаяФорма = УправлениеПечатью.ТабличныйДокументПоДвоичнымДанным(РезультатПечати[0].ДвоичныеДанные);
	Иначе
		ПечатнаяФорма = Неопределено;
	КонецЕсли;
	
	ДанныеФайла = Base64Строка(ПечатнаяФорма);
	ДанныеXDTO.Вставить("ПечатнаяФормаДокумента", ДанныеФайла); 
	
	ЗаписатьВЛогВыгрузки(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
Процедура ПКО_Документ_ОперацияПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ФормаОплаты = "ПлатежнаяКарта";
	Если ДанныеXDTO.ФормаОплаты <> ФормаОплаты Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Отказ", Истина);
		Возврат;
	КонецЕсли; 
	
	ПолученныеДанные.РасшифровкаПлатежа.Очистить();
	СтрокаПлатежа = ПолученныеДанные.РасшифровкаПлатежа.Добавить();
	
	ПКОДляЗагрузки = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_ДоговорыКонтрагентов_Получение");
	СтрокаПлатежа.Договор = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ДанныеXDTO.ДоговорКлиента,
								ПКОДляЗагрузки, "ПолучитьСсылку").Ссылка;
	ПКОДляЗагрузки = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Документ_ЗаказПокупателя_Получение");
	СтрокаПлатежа.Заказ = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ДанныеXDTO.ДокументОснование,
								ПКОДляЗагрузки, "ПолучитьСсылку").Ссылка;   
	СтрокаПлатежа.СуммаПлатежа = ДанныеXDTO.СуммаДокумента; 
	СтрокаПлатежа.СуммаРасчетов = ДанныеXDTO.СуммаДокумента;
КонецПроцедуры
Процедура ПКО_Документ_ОперацияПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("Отказ") И ПолученныеДанные.ДополнительныеСвойства.Отказ Тогда  
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.Дата = ТекущаяДатаСеанса();    
	ПолученныеДанные.Автор = КомпонентыОбмена.УзелКорреспондента.Пользователь;
	ПолученныеДанные.БанковскийСчет = ПолученныеДанные.Организация.БанковскийСчетПоУмолчанию;      
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя;       
	
	ПолученныеДанные.Касса = КомпонентыОбмена.ПараметрыКонвертации.Касса;
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ПолученныеДанные.Дата, Новый Структура("Валюта", ПолученныеДанные.ВалютаДенежныхСредств));
	ПолученныеДанные.Курс = СтруктураПоВалюте.Курс;
	ПолученныеДанные.Кратность = СтруктураПоВалюте.Кратность;    
	
	ПолученныеДанные.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(ПолученныеДанные.Организация,, ПолученныеДанные.Дата); 
	
	ПолученныеДанные.ПодписьКассира = ПолученныеДанные.Касса.ПодписьКассира;
	ПолученныеДанные.ПоложениеСтатьи = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;   
	  
	ПолученныеДанные.СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.НеПрименяется;   
	ПолученныеДанные.СпособОплаты = Перечисления.СпособыОплатыЭквайринг.ОплатаКартой;   
	ПолученныеДанные.Статус = Перечисления.СтатусыЧековККМ.ЧекНеПробит;  
	 
	ПолученныеДанные.Статья = КомпонентыОбмена.ПараметрыКонвертации.СтатьяДДСЭквайринг;
	ПолученныеДанные.ХозяйственнаяОперация = Справочники.ХозяйственныеОперации.ПоступлениеОплатыОтПокупателя;
	ПолученныеДанные.ЭквайринговыйТерминал = КомпонентыОбмена.ПараметрыКонвертации.ЭквайринговыйТерминал;
	 
	Для Каждого СтрокаПлатежа Из ПолученныеДанные.РасшифровкаПлатежа Цикл        
		СтрокаПлатежа.Курс = ПолученныеДанные.Курс;
		СтрокаПлатежа.Кратность = ПолученныеДанные.Кратность;  
	
		Если ПолученныеДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") Тогда
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(ПолученныеДанные.Организация.ВидСтавкиНДСПоУмолчанию, ПолученныеДанные.Дата);
		КонецЕсли;  
		СтрокаПлатежа.СтавкаНДС = СтавкаНДС; 
		
		СтавкаНДСЧислом = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаПлатежа.СтавкаНДС);
		СтрокаПлатежа.СуммаНДС = СтрокаПлатежа.СуммаПлатежа - (СтрокаПлатежа.СуммаПлатежа) / ((СтавкаНДСЧислом + 100) / 100);  
		
		СтрокаПлатежа.СпособЗачета = СтрокаПлатежа.Договор.СпособРазнесенияОплатыПоУмолчанию;
	КонецЦикла;	
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;  
	
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Процедура ПКО_Документ_ПоступлениеВКассу_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.ФормаОплаты <> "Наличная" Тогда     
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Отказ", Истина);
		Возврат;
	КонецЕсли;
		 
	ПолученныеДанные.РасшифровкаПлатежа.Очистить();
	СтрокаПлатежа = ПолученныеДанные.РасшифровкаПлатежа.Добавить();
	
	ПКОДляЗагрузки = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_ДоговорыКонтрагентов_Получение");
	СтрокаПлатежа.Договор = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ДанныеXDTO.ДоговорКлиента,
								ПКОДляЗагрузки, "ПолучитьСсылку").Ссылка;
	ПКОДляЗагрузки = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Документ_ЗаказПокупателя_Получение");
	СтрокаПлатежа.Заказ = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ДанныеXDTO.ДокументОснование,
								ПКОДляЗагрузки, "ПолучитьСсылку").Ссылка;   
	СтрокаПлатежа.СуммаПлатежа = ДанныеXDTO.СуммаДокумента; 
	СтрокаПлатежа.СуммаРасчетов = ДанныеXDTO.СуммаДокумента;
КонецПроцедуры
Процедура ПКО_Документ_ПоступлениеВКассу_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("Отказ") И ПолученныеДанные.ДополнительныеСвойства.Отказ Тогда  
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.Дата = ТекущаяДатаСеанса();    
	ПолученныеДанные.Автор = КомпонентыОбмена.УзелКорреспондента.Пользователь;
	
	ПолученныеДанные.ВариантЗаполненияРасшифровки = Перечисления.ВариантыЗаполненияРасшифровкиПлатежа.Вручную;  
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя;       
	
	ПолученныеДанные.Касса = КомпонентыОбмена.ПараметрыКонвертации.Касса;
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ПолученныеДанные.Дата, Новый Структура("Валюта", ПолученныеДанные.ВалютаДенежныхСредств));
	ПолученныеДанные.Курс = СтруктураПоВалюте.Курс;
	ПолученныеДанные.Кратность = СтруктураПоВалюте.Кратность;    
	
	ПолученныеДанные.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(ПолученныеДанные.Организация,, ПолученныеДанные.Дата); 
	ПолученныеДанные.НовыйМеханизмИнкассации = Истина;  
	
	ПолученныеДанные.ПодписьКассира = ПолученныеДанные.Касса.ПодписьКассира;
	ПолученныеДанные.ПодписьРуководителя = ПолученныеДанные.Организация.ПодписьРуководителя;
	ПолученныеДанные.ПодписьГлавногоБухгалтера = ПолученныеДанные.Организация.ПодписьГлавногоБухгалтера;    
	ПолученныеДанные.Подразделение = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение; 
	ПолученныеДанные.ПоложениеПодразделения = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	ПолученныеДанные.ПоложениеПроекта = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	ПолученныеДанные.ПоложениеСтатьи = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;   
	ПолученныеДанные.ПринятоОт = СокрЛП(ПолученныеДанные.Контрагент); 
	  
	ПолученныеДанные.СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.НеПрименяется;   
	ПолученныеДанные.Статья = КомпонентыОбмена.ПараметрыКонвертации.СтатьяДДСНаличные;
	ПолученныеДанные.ХозяйственнаяОперация = Справочники.ХозяйственныеОперации.ОтПокупателя;
	 
	Для Каждого СтрокаПлатежа Из ПолученныеДанные.РасшифровкаПлатежа Цикл        
		СтрокаПлатежа.Курс = ПолученныеДанные.Курс;
		СтрокаПлатежа.Кратность = ПолученныеДанные.Кратность;  
	
		Если ПолученныеДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") Тогда
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(ПолученныеДанные.Организация.ВидСтавкиНДСПоУмолчанию, ПолученныеДанные.Дата);
		КонецЕсли;  
		СтрокаПлатежа.СтавкаНДС = СтавкаНДС; 
		
		СтавкаНДСЧислом = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаПлатежа.СтавкаНДС);
		СтрокаПлатежа.СуммаНДС = СтрокаПлатежа.СуммаПлатежа - (СтрокаПлатежа.СуммаПлатежа) / ((СтавкаНДСЧислом + 100) / 100);  
		
		СтрокаПлатежа.СтатьяДДС =  КомпонентыОбмена.ПараметрыКонвертации.СтатьяДДСНаличные;
		СтрокаПлатежа.СпособЗачета = СтрокаПлатежа.Договор.СпособРазнесенияОплатыПоУмолчанию;
	КонецЦикла;	
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;  
	
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Процедура ПКО_Настройки_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ЗаполнениеНастроек(ДанныеXDTO, КомпонентыОбмена);	
	ЗаписатьВЛогВыгрузки(КомпонентыОбмена, Новый Структура, ДанныеXDTO, Истина, , "Настройки");
КонецПроцедуры
Процедура ПКО_РегистрСведений_ОстаткиТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Для каждого СтрокаТаблицы Из ДанныеИБ.Записи  Цикл
		НоменклатураСПКО = СтруктураДляКонвертацииНоменклатуры(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика);	
		СтрокаТаблицы.НоменклатураСтруктура = НоменклатураСПКО; 
	КонецЦикла; 
	
	ДанныеИБ.Записи.Колонки.Удалить(ДанныеИБ.Записи.Колонки.Номенклатура);
	ДанныеИБ.Записи.Колонки.НоменклатураСтруктура.Имя = "Номенклатура";    
	
	ДанныеXDTO.Вставить("Записи", ДанныеИБ.Записи); 
	
	ЗаписатьВЛогВыгрузки(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина, ДанныеИБ.Записи.Количество(), "ОстаткиТоваров");
КонецПроцедуры
Процедура ПКО_РегистрСведений_ЦеныДоговоровКонтрагентов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Для каждого СтрокаТаблицы Из ДанныеИБ.Записи Цикл
	
		НоменклатураСПКО = СтруктураДляКонвертацииНоменклатуры(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика);	
		СтрокаТаблицы.НоменклатураСтруктура = НоменклатураСПКО; 
		
		НаименованиеНоменклатурыМП = СокрЛП(СтрокаТаблицы.Номенклатура.Наименование); //+Характеристика;
		СтрокаТаблицы.СтрокаПоиска= СокрЛП(СтрокаТаблицы.Номенклатура.Код)+ СокрЛП(НаименованиеНоменклатурыМП) + СокрЛП(СтрокаТаблицы.Номенклатура.Артикул);
	  
	КонецЦикла; 
	
	ДанныеИБ.Записи.Колонки.Удалить(ДанныеИБ.Записи.Колонки.Номенклатура);
	ДанныеИБ.Записи.Колонки.НоменклатураСтруктура.Имя = "Номенклатура";    
	
	ДанныеXDTO.Вставить("Записи", ДанныеИБ.Записи); 
	
	ЗаписатьВЛогВыгрузки(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина, ДанныеИБ.Записи.Количество(), "ЦеныДоговоровКонтрагентов");
КонецПроцедуры
Процедура ПКО_РегистрСведений_ЦеныНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Для каждого СтрокаТаблицы Из ДанныеИБ.Записи  Цикл
	
		НоменклатураСПКО = СтруктураДляКонвертацииНоменклатуры(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика);	
		СтрокаТаблицы.НоменклатураСтруктура = НоменклатураСПКО; 
		
		НаименованиеНоменклатурыМП = СокрЛП(СтрокаТаблицы.Номенклатура.Наименование); //+Характеристика;
		СтрокаТаблицы.СтрокаПоиска= СокрЛП(СтрокаТаблицы.Номенклатура.Код)+ СокрЛП(НаименованиеНоменклатурыМП) + СокрЛП(СтрокаТаблицы.Номенклатура.Артикул);
	  
	КонецЦикла; 
	
	ДанныеИБ.Записи.Колонки.Удалить(ДанныеИБ.Записи.Колонки.Номенклатура);
	ДанныеИБ.Записи.Колонки.НоменклатураСтруктура.Имя = "Номенклатура";    
	
	ДанныеXDTO.Вставить("Записи", ДанныеИБ.Записи); 
	
	ЗаписатьВЛогВыгрузки(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина, ДанныеИБ.Записи.Количество(), "ЦеныНоменклатуры");
КонецПроцедуры
Процедура ПКО_РегСведений_ЦеныДоговоровКонтрагентов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПКОДляЗагрузки = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_ДоговорыКонтрагентов_Получение");
	ПолученныеДанные = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ДанныеXDTO.ДоговорКлиента,
								ПКОДляЗагрузки, "ПолучитьСсылку").ПолучитьОбъект();
	ПКОДляЗагрузки = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_ВидыЦен_Получение");
	ВидЦены = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ДанныеXDTO.ВидЦены,
								ПКОДляЗагрузки, "ПолучитьСсылку");
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ВидЦены", ВидЦены);
КонецПроцедуры
Процедура ПКО_РегСведений_ЦеныДоговоровКонтрагентов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ВидЦены") 
		И ЗначениеЗаполнено(ПолученныеДанные.ДополнительныеСвойства.ВидЦены) Тогда  
		ПолученныеДанные.ВидЦен = ПолученныеДанные.ДополнительныеСвойства.ВидЦены; 
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Валюты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ЗаписатьВЛогВыгрузки(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
Процедура ПКО_Справочник_ВидыКонтактнойИнформации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Идентификатор = СокрЛП(ДанныеИБ.Ссылка.УникальныйИдентификатор());
	ДанныеXDTO.КлючевыеСвойства.Вставить("ERPКод", Идентификатор);           
	ЗаписатьВЛогВыгрузки(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
Процедура ПКО_Справочник_ВидыЦен_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Идентификатор = СокрЛП(ДанныеИБ.Ссылка.УникальныйИдентификатор());
	ДанныеXDTO.Вставить("ERPКод", Идентификатор);  
	ЗаписатьВЛогВыгрузки(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
Процедура ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Идентификатор = СокрЛП(ДанныеИБ.Ссылка.УникальныйИдентификатор());
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("ERPКодДоговора", Идентификатор);   
	
	Если Не ЗначениеЗаполнено(ДанныеИБ.ДоговорОбслуживанияДатаОкончания) Тогда   
		ДанныеXDTO.Вставить("Действует", Истина);  
	Иначе
		ДанныеXDTO.Вставить("Действует", ДанныеИБ.ДоговорОбслуживанияДатаОкончания > ТекущаяДатаСеанса());  
	КонецЕсли; 
	Комиссия = ДанныеИБ.ВидДоговора = Перечисления.ВидыДоговоров.СКомиссионером; 
	ДанныеXDTO.Вставить("Комиссия", Комиссия);  
	
	УникальныйКлюч = СокрЛП(ДанныеИБ.Организация) + "/"
		+ СокрЛП(ДанныеИБ.Владелец) + "/"
		+ СокрЛП(ДанныеИБ.ВалютаРасчетов) + "/"
		+ СокрЛП(ДанныеИБ.ВидЦен) + "/"
		+ Формат(Комиссия, "БЛ=0; БИ=1");   
	ДанныеXDTO.Вставить("УникальныйКлюч", УникальныйКлюч);  
	
	Если ЗначениеЗаполнено(ДанныеИБ.ВидЦен) Тогда
		Если ДанныеИБ.ВидЦен <> Справочники.ВидыЦен.Оптовая Тогда
			ЕстьУточнениеЦен = Истина;
		Иначе
			ЕстьУточнениеЦен = Ложь;
		КонецЕсли; 
	Иначе  
		ЕстьУточнениеЦен = Ложь;
	КонецЕсли; 
	ДанныеXDTO.Вставить("ЕстьУточнениеЦен", ЕстьУточнениеЦен);    
	
	ЗаписатьВЛогВыгрузки(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
Процедура ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("ДополнительнаяИнформация")Тогда    
		Если ТипЗнч(ДанныеXDTO.ДополнительнаяИнформация) = Тип("ХранилищеЗначения") Тогда
			СодержимоеХранилища = ДанныеXDTO.ДополнительнаяИнформация.Получить();
		Иначе 
			СодержимоеХранилища = ДанныеXDTO.ДополнительнаяИнформация;
		КонецЕсли;
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СодержимоеХранилища);
		ДополнительнаяИнформация = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Если ДополнительнаяИнформация.Свойство = "ВидЦен" Тогда
			Если ТипЗнч(ДополнительнаяИнформация.Значение) = Тип("Структура") 
				И ДополнительнаяИнформация.Значение.Свойство("Ссылка") Тогда  
					ПКОДляЗагрузки = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_ВидыЦен_Получение");
					ПолученныеДанные.ВидЦен = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ДополнительнаяИнформация.Значение.Ссылка,
												ПКОДляЗагрузки, "ПолучитьСсылку").Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда  
		// Изменяем только в новых
		ПолученныеДанные.ВидДоговора = Перечисления.ВидыДоговоров.СПокупателем;
	
		ПолученныеДанные.УстановитьНовыйКод(КомпонентыОбмена.ПараметрыКонвертации.ПрефиксДляДанныхМобильногоУстройства);
		ПолученныеДанные.Комментарий = НСтр("ru = 'Загружен из 1С:Заказы'" + ТекущаяДатаСеанса());
	Иначе
		ПолученныеДанные = Неопределено;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ЕдиницыИзмеренияКлассификатор_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ЗаписатьВЛогВыгрузки(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
Процедура ПКО_Справочник_ЕдиницыИзмеренияУпаковки_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Идентификатор = СокрЛП(ДанныеИБ.Ссылка.УникальныйИдентификатор());
	
	ДанныеXDTO.Вставить("ERPКод", Идентификатор);
	ДанныеXDTO.КлючевыеСвойства.Вставить("ERPКод", Идентификатор);   
	
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Коэффициент) Тогда
		ДанныеXDTO.Вставить("Коэффициент", 1);
	КонецЕсли;
	ДанныеXDTO.Вставить("НаименованиеПолное", ДанныеИБ.ЕдиницаИзмеренияПоКлассификатору.НаименованиеПолное);   
	
	ЗаписатьВЛогВыгрузки(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
Процедура ПКО_Справочник_КатегорииНоменклатурыВиды_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Идентификатор = СокрЛП(ДанныеИБ.Ссылка.УникальныйИдентификатор());
	ДанныеXDTO.Вставить("ERPКод", Идентификатор);
	ЗаписатьВЛогВыгрузки(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
Процедура ПКО_Справочник_КатегорииНоменклатурыГруппа_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ЗаписатьВЛогВыгрузки(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
Процедура ПКО_Справочник_КонтактныеЛицаИзСтруктуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Идентификатор = СокрЛП(ДанныеИБ.Ссылка.УникальныйИдентификатор());
	ДанныеXDTO.КлючевыеСвойства.Вставить("ERPКод", Идентификатор);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Description", ДанныеИБ.Ссылка.Наименование);   
	ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.Ссылка);   
	ДанныеXDTO.КлючевыеСвойства.Вставить("Клиент", ДанныеИБ.Контрагент);   
	
	ДанныеXDTO.Вставить("ДатаРождения", ДанныеИБ.Ссылка.ДатаРождения);
	ДанныеXDTO.Вставить("ДолжностьПоВизитке", ДанныеИБ.Должность);
	ДанныеXDTO.Вставить("DeletionMark", ДанныеИБ.Ссылка.ПометкаУдаления);    
	
	ТаблицаКИ = ДанныеИБ.Ссылка.КонтактнаяИнформация.Выгрузить();
	ДанныеXDTO.Вставить("КонтактнаяИнформация", ТаблицаКИ);    
	
	ЗаписатьВЛогВыгрузки(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина, , "КонтактныеЛица");
КонецПроцедуры
Процедура ПКО_Справочник_КонтактныеЛицаКлиентов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Клиент", ДанныеXDTO.КлючевыеСвойства.Клиент);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ДолжностьПоВизитке", ДанныеXDTO.ДолжностьПоВизитке);
КонецПроцедуры
Процедура ПКО_Справочник_КонтактныеЛицаКлиентов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда  
		// Изменяем только в новых
	   
	   	СсылкаКонтактногоЛица = ПолученныеДанные.ПолучитьСсылкуНового();   
	   	ИдентификаторКлиента = Новый УникальныйИдентификатор(ПолученныеДанные.ДополнительныеСвойства.Клиент.ERPКод);
	   	СсылкаКлиента = Справочники.Контрагенты.ПолучитьСсылку(ИдентификаторКлиента);
		Если ПолученныеДанные.ДополнительныеСвойства.Свойство("Клиент") Тогда 
			ТекущаяДата = ТекущаяДатаСеанса();  
			
			НачатьТранзакцию();
			Попытка
				БлокировкаДанных = Новый БлокировкаДанных;
				ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СвязиКонтрагентКонтакт");
				ЭлементБлокировкиДанных.УстановитьЗначение("Контрагент", СсылкаКлиента);
				ЭлементБлокировкиДанных.УстановитьЗначение("Контакт", СсылкаКонтактногоЛица);
				БлокировкаДанных.Заблокировать();
		
				НаборЗаписей = РегистрыСведений.СвязиКонтрагентКонтакт.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Контрагент.Установить(СсылкаКлиента);
				НаборЗаписей.Отбор.Контакт.Установить(СсылкаКонтактногоЛица);
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество() > 0 Тогда
					НаборЗаписей.Очистить();
					НаборЗаписей.Записать();
				КонецЕсли;    
				
				НаборЗаписей.Отбор.Контрагент.Установить(СсылкаКлиента);
				НаборЗаписей.Отбор.Контакт.Установить(СсылкаКонтактногоЛица);
				НоваяСтрока = НаборЗаписей.Добавить();
				НоваяСтрока.Контрагент = СсылкаКлиента;
				НоваяСтрока.Контакт = СсылкаКонтактногоЛица;
				НоваяСтрока.Должность = ПолученныеДанные.ДополнительныеСвойства.ДолжностьПоВизитке;
				НоваяСтрока.Период = ТекущаяДата;
	
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
				НаборЗаписей.Записать();
				НаборЗаписей.Очистить();
				
				ЗафиксироватьТранзакцию();
			Исключение
			
				ОтменитьТранзакцию();
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись контактного лица'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
				ВызватьИсключение;
			КонецПопытки;
		КонецЕсли;          
		
		ПолученныеДанные.Комментарий = НСтр("ru = 'Загружен из 1С:Заказы ' ") + ТекущаяДата + Символы.ПС + ПолученныеДанные.Комментарий;
		ПолученныеДанные.ДатаСоздания = ТекущаяДата;
	Иначе
		ПолученныеДанные = Неопределено;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ИдКонтрагента = СокрЛП(ДанныеИБ.Ссылка.УникальныйИдентификатор());
	
	ДанныеXDTO.Вставить("ERPКод", ИдКонтрагента);
	ДанныеXDTO.КлючевыеСвойства.Вставить("ERPКод", ИдКонтрагента);   
	ДанныеXDTO.КлючевыеСвойства.Вставить("Клиент", ДанныеИБ.Ссылка);    
	
	Если Не ЗначениеЗаполнено(ДанныеИБ.НаименованиеПолное) Тогда   
		НаименованиеПолное = ДанныеИБ.Наименование; 
		ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеПолное", НаименованиеПолное); 
	Иначе
		НаименованиеПолное = ДанныеИБ.НаименованиеПолное; 
	КонецЕсли; 
	
	ИННКПП = СокрЛП(ДанныеИБ.ИНН)+ ?(ЗначениеЗаполнено(ДанныеИБ.КПП),"/" + СокрЛП(ДанныеИБ.КПП), "");
	ДанныеXDTO.Вставить("ИННКПП", ИННКПП);  
	
	ПредставлениеКонтрагента = НаименованиеПолное + " (" +ИННКПП + ")";
	
	ДанныеXDTO.Вставить("ПредставлениеКонтрагента", ПредставлениеКонтрагента);
	 
	 
	ВыгруженныеКонтрагенты = КомпонентыОбмена.ПараметрыКонвертации.ВыгруженныеКонтрагенты;
	Если ВыгруженныеКонтрагенты = Неопределено Тогда
		ВыгруженныеКонтрагенты = Новый Массив;
	КонецЕсли;
	
	Если ВыгруженныеКонтрагенты.Найти(ДанныеИБ.Ссылка) = Неопределено Тогда
		ВыгруженныеКонтрагенты.Добавить(ДанныеИБ.Ссылка);
	КонецЕсли;
	КомпонентыОбмена.ПараметрыКонвертации.ВыгруженныеКонтрагенты = ВыгруженныеКонтрагенты;
	
	ЗаписатьВЛогВыгрузки(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
Процедура ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо;
	Если ДанныеXDTO.Свойство("ДополнительнаяИнформация")Тогда  
		Если ТипЗнч(ДанныеXDTO.ДополнительнаяИнформация) = Тип("ХранилищеЗначения") Тогда
			СодержимоеХранилища = ДанныеXDTO.ДополнительнаяИнформация.Получить();
		Иначе 
			СодержимоеХранилища = ДанныеXDTO.ДополнительнаяИнформация;
		КонецЕсли;
	  
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СодержимоеХранилища);
		ДополнительнаяИнформация = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Если ДополнительнаяИнформация.Свойство = "ФормаСобственности" Тогда
			Если ДополнительнаяИнформация.Значение = "ЮрЛицо" Тогда 
				ПолученныеДанные.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо;
			ИначеЕсли ДополнительнаяИнформация.Значение = "ФизЛицо" Тогда 
				ПолученныеДанные.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо;
			ИначеЕсли ДополнительнаяИнформация.Значение = "ЮрЛицоНеРезидент" Тогда 
				ПолученныеДанные.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо;
			ИначеЕсли ДополнительнаяИнформация.Значение = "ИндивидуальныйПредприниматель" Тогда 
				ПолученныеДанные.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда  
		// Изменяем только в новых
	
		ПолученныеДанные.СтранаРегистрации = Справочники.СтраныМира.Россия; 
		ПолученныеДанные.СчетУчетаАвансовПокупателя = ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным;
		ПолученныеДанные.СчетУчетаАвансовПоставщику = ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным;
		ПолученныеДанные.СчетУчетаРасчетовСПокупателем = ПланыСчетов.Управленческий.РасчетыСПокупателями;
		ПолученныеДанные.СчетУчетаРасчетовСПоставщиком = ПланыСчетов.Управленческий.РасчетыСПоставщиками;
		ПолученныеДанные.ВестиРасчетыПоДоговорам = Истина;
		ПолученныеДанные.ВестиУчетОплатыПоСчетам = Истина;
		ПолученныеДанные.Покупатель = Истина;
	
		ПолученныеДанные.УстановитьНовыйКод(КомпонентыОбмена.ПараметрыКонвертации.ПрефиксДляДанныхМобильногоУстройства);   
		ПолученныеДанные.Комментарий = НСтр("ru = 'Загружен из 1С:Заказы'" + ТекущаяДатаСеанса());
	Иначе
		ПолученныеДанные = Неопределено;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_КонтрагентыКлиенты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ИдКонтрагента = СокрЛП(ДанныеИБ.Ссылка.УникальныйИдентификатор());
	
	ДанныеXDTO.Вставить("ERPКод", ИдКонтрагента);
	ДанныеXDTO.КлючевыеСвойства.Вставить("ERPКод", ИдКонтрагента);
	
	ДанныеXDTO.Вставить("ОтгрузкаЗапрещена", ДанныеИБ.ПометкаУдаления);
	Если ДанныеИБ.ПометкаУдаления Тогда 
		ДанныеXDTO.Вставить("ПричинаДобавленияВСтопЛист",	НСтр("ru = 'Помечен на удаление'"));    
	КонецЕсли;
		
	ДанныеXDTO.Вставить("ДополнительнаяИнформацияПоДоставке", ДанныеИБ.Комментарий);
	 
	ДанныеXDTO.Вставить("Самовывоз", Ложь);   
	
	ЗаписатьВЛогВыгрузки(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
Процедура ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTOДляНоменклатурыХарактеристики(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);          
	
	ВыгруженнаяНоменклатура = КомпонентыОбмена.ПараметрыКонвертации.ВыгруженнаяНоменклатура;
	Если ВыгруженнаяНоменклатура = Неопределено Тогда
		ВыгруженнаяНоменклатура = Новый Массив;
	КонецЕсли;
	
	Если ВыгруженнаяНоменклатура.Найти(ДанныеИБ.Ссылка) = Неопределено Тогда
		ВыгруженнаяНоменклатура.Добавить(ДанныеИБ.Ссылка);
	КонецЕсли;
	КомпонентыОбмена.ПараметрыКонвертации.ВыгруженнаяНоменклатура = ВыгруженнаяНоменклатура;
	
	ЗаписатьВЛогВыгрузки(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина, , "Номенклатура");
КонецПроцедуры
Процедура ПКО_Справочник_НоменклатураГруппа_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ИдНоменклатуры = СокрЛП(ДанныеИБ.Ссылка.УникальныйИдентификатор());
	ДанныеXDTO.КлючевыеСвойства.Вставить("ERPКодНоменклатура", ИдНоменклатуры);       
	
	ЗаписатьВЛогВыгрузки(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина, , "НоменклатураГруппа");
КонецПроцедуры
Процедура ПКО_Справочник_НоменклатураИзСтруктуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTOДляНоменклатурыХарактеристики(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена); 
	ЗаписатьВЛогВыгрузки(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина, , "Номенклатура");
КонецПроцедуры
Процедура ПКО_Справочник_НоменклатураПрисоединенныеФайл_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ИдентификаторХранилища = Новый УникальныйИдентификатор();
	АдресДвоичныхДанныхКартинки = РаботаСФайламиУНФ.СсылкаНаДвоичныеДанныеФайла(ДанныеИБ.Ссылка, ИдентификаторХранилища);
	ДвоичныеДанныеКартинки = ПолучитьИзВременногоХранилища(АдресДвоичныхДанныхКартинки);
	
	ДанныеФайла = Base64Строка(ДвоичныеДанныеКартинки);
	ДанныеXDTO.Вставить("ХранимыйФайл", ДанныеФайла);
	
	ЗаписатьВЛогВыгрузки(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина, , "НоменклатураПрисоединенныеФайлы");
КонецПроцедуры
Процедура ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Идентификатор = СокрЛП(ДанныеИБ.Ссылка.УникальныйИдентификатор());
	
	ДанныеXDTO.Вставить("ERPКод", Идентификатор);
	ДанныеXDTO.КлючевыеСвойства.Вставить("ERPКод", Идентификатор);   
	
	БанковскийСчет = ДанныеИБ.БанковскийСчетПоУмолчанию;    
	Банк = БанковскийСчет.Банк; 
	ДанныеXDTO.Вставить("НомерСчета", БанковскийСчет.НомерСчета);
	ДанныеXDTO.Вставить("КоррСчет", Банк.КоррСчет);
	ДанныеXDTO.Вставить("БИК", Банк.Код);
	ДанныеXDTO.Вставить("Банк", Банк.Наименование);
	ДанныеXDTO.Вставить("ГородБанка", Банк.Город);
	 
	ДанныеXDTO.Вставить("ГлавныйБухгалтер", ДанныеИБ.ПодписьГлавногоБухгалтера.РасшифровкаПодписи);
	ДанныеXDTO.Вставить("Руководитель", ДанныеИБ.ПодписьРуководителя.РасшифровкаПодписи);    
	
	ТекстЗапроса = "ВЫБРАТЬ
		|	СистемыНалогообложенияОрганизаций.Период КАК Период,
		|	СистемыНалогообложенияОрганизаций.Организация КАК Организация,
		|	СистемыНалогообложенияОрганизаций.СистемаНалогообложения КАК СистемаНалогообложения,
		|	СистемыНалогообложенияОрганизаций.ОбъектНалогообложения КАК ОбъектНалогообложения
		|ИЗ
		|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(, Организация = &Организация) КАК СистемыНалогообложенияОрганизаций";
	
	Запрос = Новый Запрос;    
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация", ДанныеИБ.Ссылка); 
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда 
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ДанныеXDTO.Вставить("СистемаНалогообложения", Выборка.СистемаНалогообложения);
	КонецЕсли;
		
	ЗаписатьВЛогВыгрузки(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
Процедура ПКО_Справочник_СтруктурныеЕдиницыСклады_Группа_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ДанныеИБ.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
		ДанныеXDTO = Неопределено;
		Возврат;
	КонецЕсли;
	
	Идентификатор = СокрЛП(ДанныеИБ.Ссылка.УникальныйИдентификатор());
	ДанныеXDTO.Вставить("ERPКод", Идентификатор);  
	ЗаписатьВЛогВыгрузки(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
Процедура ПКО_Справочник_СтруктурныеЕдиницыСклады_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Идентификатор = СокрЛП(ДанныеИБ.Ссылка.УникальныйИдентификатор());
	ДанныеXDTO.Вставить("ERPКод", Идентификатор);  
	ДанныеXDTO.КлючевыеСвойства.Вставить("ERPКод", Идентификатор);   
	ЗаписатьВЛогВыгрузки(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
Процедура ПКО_Справочник_Характеристики_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTOДляНоменклатурыХарактеристики(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);  
	ЗаписатьВЛогВыгрузки(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина, , "Характеристики");
КонецПроцедуры
Процедура ПКО_Справочник_Характеристики_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	СсылкаПолученныеДанные = ДанныеXDTO.КлючевыеСвойства.ERPКодХарактеристика;
	Если СсылкаПолученныеДанные = ПустойИдентификатор() Тогда
		ПолученныеДанные = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
	Иначе
		Идентификатор = Новый УникальныйИдентификатор(СсылкаПолученныеДанные);
		ХарактеристикаСсылка = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Идентификатор);
		Если НЕ ХарактеристикаСсылка.Пустая() Тогда  
			ПолученныеДанные = ХарактеристикаСсылка.ПолучитьОбъект();
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Характеристики_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ПолученныеДанные.Ссылка.Пустая() Тогда
		ПолученныеДанные = Неопределено;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ЦеновыеГруппы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ЗаписатьВЛогВыгрузки(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры

#КонецОбласти
#Область Алгоритмы


Процедура ВыгрузкаДоговоровИндивидуальныхЦен(КомпонентыОбмена)
	// Договоры клиентов 
	ВыгруженныеКонтрагенты = КомпонентыОбмена.ПараметрыКонвертации.ВыгруженныеКонтрагенты;
	Если ТипЗнч(ВыгруженныеКонтрагенты) = Тип("Массив") Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ДоговорыКонтрагентов.ВидЦен = &ПустойВидЦен
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ДоговорыКонтрагентов.ВидЦен = &ОсновнойВидЦен
		|					ТОГДА ЛОЖЬ
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|	КОНЕЦ КАК ЕстьУточнениеЦен,
		|	ДоговорыКонтрагентов.ВидЦен КАК ВидЦен,
		|	ДоговорыКонтрагентов.Организация КАК Организация
		|ПОМЕСТИТЬ ВТДоговоры
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец В(&МассивВладелец)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДоговоры.Ссылка КАК ДоговорКлиента
		|ИЗ
		|	ВТДоговоры КАК ВТДоговоры
		|ГДЕ
		|	&ТекстОтбораПоОрганизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДоговоры.Ссылка КАК ДоговорКлиента,
		|	ВТДоговоры.ЕстьУточнениеЦен КАК ЕстьУточнениеЦен,
		|	ВТДоговоры.ВидЦен КАК ВидЦены,
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура.Родитель КАК РодительНоменклатуры,
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура.КатегорияНоменклатуры КАК ВидНоменклатуры,
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа
		|ИЗ
		|	ВТДоговоры КАК ВТДоговоры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура В (&МассивНоменклатуры)) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ВТДоговоры.ВидЦен = ЦеныНоменклатурыСрезПоследних.ВидЦен
		|			И (&ТекстОтбораПоОрганизации)
		|			И (&ТекстОтбораПоВидуЦен)
		|";
		
		Запрос = Новый Запрос;    
		Если ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.Организация) Тогда  
			ТекстОтбораПоОрганизации        = "ВТДоговоры.Организация В(&МассивОрганизаций)";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстОтбораПоОрганизации",         ТекстОтбораПоОрганизации);
			Запрос.УстановитьПараметр("МассивОрганизаций", КомпонентыОбмена.ПараметрыКонвертации.Организация);   
		Иначе
			Запрос.УстановитьПараметр("ТекстОтбораПоОрганизации", Истина);   
		КонецЕсли;     
		Если ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ВидЦен) Тогда  
			ТекстОтбораПоВидуЦен        = "НЕ ВТДоговоры.ВидЦен В(&МассивВидовЦен)";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстОтбораПоВидуЦен",         ТекстОтбораПоВидуЦен);
			Запрос.УстановитьПараметр("МассивВидовЦен", КомпонентыОбмена.ПараметрыКонвертации.ВидЦен);
		Иначе
			Запрос.УстановитьПараметр("ТекстОтбораПоВидуЦен", Истина);   
		КонецЕсли;     
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("МассивВладелец", ВыгруженныеКонтрагенты);
		Запрос.УстановитьПараметр("ПустойВидЦен", Справочники.ВидыЦен.ПустаяСсылка()); 
		ОсновнойВидЦен = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОсновнойВидЦенПродажи");  
		Если Не ЗначениеЗаполнено(ОсновнойВидЦен) Тогда
			ОсновнойВидЦен = Справочники.ВидыЦен.Оптовая;
		КонецЕсли;
		Запрос.УстановитьПараметр("ОсновнойВидЦен", ОсновнойВидЦен);
		Запрос.УстановитьПараметр("МассивНоменклатуры", КомпонентыОбмена.ПараметрыКонвертации.ВыгруженнаяНоменклатура);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();  	
		РезультатДоговоров = МассивРезультатов[1]; 
		РезультатЦен = МассивРезультатов[2];     
		
		// Индивидуальные цены
		Если КомпонентыОбмена.ПараметрыКонвертации.ПередаватьЦеныКонтрагентов И НЕ РезультатЦен.Пустой() Тогда 
			ТаблицаИндивидуальныхЦен = Новый ТаблицаЗначений;
			ТаблицаИндивидуальныхЦен.Колонки.Добавить("ВидЦены");
			ТаблицаИндивидуальныхЦен.Колонки.Добавить("Номенклатура");
			ТаблицаИндивидуальныхЦен.Колонки.Добавить("Характеристика");
			ТаблицаИндивидуальныхЦен.Колонки.Добавить("Цена");
			ТаблицаИндивидуальныхЦен.Колонки.Добавить("НоменклатураСтруктура", ТипКолонкиСтруктура());   
			ТаблицаИндивидуальныхЦен.Колонки.Добавить("РодительНоменклатуры");
			ТаблицаИндивидуальныхЦен.Колонки.Добавить("ВидНоменклатуры");
			ТаблицаИндивидуальныхЦен.Колонки.Добавить("ЦеноваяГруппа");
			ТаблицаИндивидуальныхЦен.Колонки.Добавить("СтрокаПоиска");   
			ТаблицаИндивидуальныхЦен.Колонки.Добавить("ДоговорКлиента");   
			
			ВыборкаЦен = РезультатЦен.Выбрать(); 
			Пока ВыборкаЦен.Следующий() Цикл     
				Если ЗначениеЗаполнено(ВыборкаЦен.Номенклатура) Тогда
					СтрокаЦен = ТаблицаИндивидуальныхЦен.Добавить();   
					ЗаполнитьЗначенияСвойств(СтрокаЦен, ВыборкаЦен);
				КонецЕсли;
			КонецЦикла;
			
			Если ТаблицаИндивидуальныхЦен.Количество() > 0 Тогда	
				ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("РегистрСведений_ЦеныДоговоровКонтрагентов_Отправка", "Имя"); 
				Если ПравилоОбработки <> Неопределено Тогда
					СтруктураНабора = Новый Структура("Записи", ТаблицаИндивидуальныхЦен);
					ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СтруктураНабора, ПравилоОбработки);  
				КонецЕсли;
			КонецЕсли;   
		КонецЕсли;  
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузкаИзображенийТоваров(КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.ПередаватьИзображенияТоваров Тогда		
		ВыгруженнаяНоменклатура = КомпонентыОбмена.ПараметрыКонвертации.ВыгруженнаяНоменклатура;
		Если ТипЗнч(ВыгруженнаяНоменклатура) = Тип("Массив") Тогда   
			ТекстЗапроса = "ВЫБРАТЬ
			|	НоменклатураПрисоединенныеФайлы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
			|ГДЕ
			|	НоменклатураПрисоединенныеФайлы.ВладелецФайла В(&МассивВладелецФайла)
			|	И НЕ НоменклатураПрисоединенныеФайлы.ПометкаУдаления";		
			Запрос = Новый Запрос;    
			Запрос = Новый Запрос;    
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("МассивВладелецФайла", ВыгруженнаяНоменклатура);
			Результат = Запрос.Выполнить();  	 
			
			Если НЕ Результат.Пустой() Тогда   
				ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_НоменклатураПрисоединенныеФайлы_Отправка", "Имя"); 
				Если ПравилоОбработки <> Неопределено Тогда
					ВыборкаФайлов = Результат.Выбрать(); 
					Пока ВыборкаФайлов.Следующий() Цикл
						ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ВыборкаФайлов.Ссылка, ПравилоОбработки);  
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузкаКонтактныхЛиц(КомпонентыОбмена)
	// Контактные лица
	ВыгруженныеКонтрагенты = КомпонентыОбмена.ПараметрыКонвертации.ВыгруженныеКонтрагенты;
	Если ТипЗнч(ВыгруженныеКонтрагенты) = Тип("Массив") Тогда
		
		Запрос = Новый Запрос;    
		Запрос.УстановитьПараметр("МассивКонтрагентов", ВыгруженныеКонтрагенты);
		Запрос.Текст = "ВЫБРАТЬ
		|	КонтактныеЛица.Ссылка КАК Ссылка,
		|	СвязиКонтрагентКонтактСрезПоследних.Должность КАК Должность,
		|	СвязиКонтрагентКонтактСрезПоследних.Контрагент КАК Контрагент
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних КАК СвязиКонтрагентКонтактСрезПоследних
		|		ПО (СвязиКонтрагентКонтактСрезПоследних.Контакт = КонтактныеЛица.Ссылка)
		|ГДЕ
		|	СвязиКонтрагентКонтактСрезПоследних.Контрагент В (&МассивКонтрагентов)";
		
		Результат = Запрос.Выполнить();  	 
		
		Если НЕ Результат.Пустой() Тогда 
			ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_КонтактныеЛица_Отправка", "Имя"); 
			Если ПравилоОбработки <> Неопределено Тогда  
				Выборка = Результат.Выбрать(); 
				Пока Выборка.Следующий() Цикл   
					СтруктураОбъекта = Новый Структура;
					СтруктураОбъекта.Вставить("Должность", Выборка.Должность);
					СтруктураОбъекта.Вставить("Контрагент", Выборка.Контрагент);
					СтруктураОбъекта.Вставить("Ссылка", Выборка.Ссылка);
				
					ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СтруктураОбъекта, ПравилоОбработки);        
				КонецЦикла;  
			КонецЕсли;
		КонецЕсли;  
		
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузкаОстатковНоменклатуры(КомпонентыОбмена)
	ТаблицаВыгружаемыхОстатков = КомпонентыОбмена.ПараметрыКонвертации.ТаблицаВыгружаемыхОстатков;
	Если ТипЗнч(ТаблицаВыгружаемыхОстатков) = Тип("ТаблицаЗначений") Тогда
		
	ТекстЗапроса = "ВЫБРАТЬ
	|	ТаблицаВыгружаемыхОстатков.Номенклатура КАК Номенклатура,
	|	ТаблицаВыгружаемыхОстатков.Характеристика КАК Характеристика,
	|	ТаблицаВыгружаемыхОстатков.Организация КАК Организация,
	|	ТаблицаВыгружаемыхОстатков.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ТаблицаВыгружаемыхОстатков
	|ИЗ
	|	&ТаблицаВыгружаемыхОстатков КАК ТаблицаВыгружаемыхОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УправлениеЗапасами.Организация КАК Организация,
	|	УправлениеЗапасами.Склад КАК Склад,
	|	УправлениеЗапасами.Номенклатура КАК Номенклатура,
	|	УправлениеЗапасами.Характеристика КАК Характеристика,
	|	УправлениеЗапасами.МинимальныйУровеньЗапаса КАК МинимальныйУровеньЗапаса,
	|	УправлениеЗапасами.МаксимальныйУровеньЗапаса КАК МаксимальныйУровеньЗапаса
	|ПОМЕСТИТЬ ТоварныеОграничения
	|ИЗ
	|	РегистрСведений.УправлениеЗапасами КАК УправлениеЗапасами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВыгружаемыхОстатков.Номенклатура КАК Номенклатура,
	|	ТаблицаВыгружаемыхОстатков.Характеристика КАК Характеристика,
	|	ТаблицаВыгружаемыхОстатков.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	Минимум(ЕСТЬNULL(ТоварныеОграничения.МинимальныйУровеньЗапаса, 0)) КАК МинимальныйУровеньЗапаса,
	|	Максимум(ЕСТЬNULL(ТоварныеОграничения.МаксимальныйУровеньЗапаса, 0)) КАК МаксимальныйУровеньЗапаса
	|ПОМЕСТИТЬ СгруппированнаяТаблицаВыгружаемыхОстатков
	|ИЗ
	|	ТаблицаВыгружаемыхОстатков КАК ТаблицаВыгружаемыхОстатков
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварныеОграничения КАК ТоварныеОграничения
	|		ПО ТаблицаВыгружаемыхОстатков.Номенклатура = ТоварныеОграничения.Номенклатура
	|			И ТаблицаВыгружаемыхОстатков.Характеристика = ТоварныеОграничения.Характеристика
	|			И ТаблицаВыгружаемыхОстатков.Организация = ТоварныеОграничения.Организация
	|			И (ТаблицаВыгружаемыхОстатков.СтруктурнаяЕдиница = ТоварныеОграничения.Склад ИЛИ ТоварныеОграничения.Склад = &ПустойСклад)
	|ГДЕ
	|	&ТекстОтбораПоНоменклатуре
	|	И &ТекстОтбораПоОрганизации
	|	И &ТекстОтбораПоСкладу
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВыгружаемыхОстатков.Номенклатура,
	|	ТаблицаВыгружаемыхОстатков.Характеристика,
	|	ТаблицаВыгружаемыхОстатков.СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СгруппированнаяТаблицаВыгружаемыхОстатков.СтруктурнаяЕдиница КАК Склад,
	|	СгруппированнаяТаблицаВыгружаемыхОстатков.Номенклатура КАК Номенклатура,
	|	СгруппированнаяТаблицаВыгружаемыхОстатков.Характеристика КАК Характеристика,
	|	ОстаткиТоваров.Количество КАК ВНаличии,
	|	ВЫБОР
	|		КОГДА ОстаткиТоваров.Количество < 1
	|			ТОГДА 0
	|		КОГДА ОстаткиТоваров.Количество МЕЖДУ 1 И ЕСТЬNULL(СгруппированнаяТаблицаВыгружаемыхОстатков.МинимальныйУровеньЗапаса, 0) / 2
	|			ТОГДА 1
	|		КОГДА ОстаткиТоваров.Количество МЕЖДУ ЕСТЬNULL(СгруппированнаяТаблицаВыгружаемыхОстатков.МинимальныйУровеньЗапаса, 0) / 2 + 0.001 И ЕСТЬNULL(СгруппированнаяТаблицаВыгружаемыхОстатков.МинимальныйУровеньЗапаса, 0)
	|			ТОГДА 2
	|		КОГДА ОстаткиТоваров.Количество МЕЖДУ ЕСТЬNULL(СгруппированнаяТаблицаВыгружаемыхОстатков.МинимальныйУровеньЗапаса, 0) + 0.001 И ЕСТЬNULL(СгруппированнаяТаблицаВыгружаемыхОстатков.МаксимальныйУровеньЗапаса, 0)
	|			ТОГДА 3
	|		КОГДА ОстаткиТоваров.Количество МЕЖДУ ЕСТЬNULL(СгруппированнаяТаблицаВыгружаемыхОстатков.МаксимальныйУровеньЗапаса, 0) + 0.001 И 2 * ЕСТЬNULL(СгруппированнаяТаблицаВыгружаемыхОстатков.МаксимальныйУровеньЗапаса, 0)
	|			ТОГДА 4
	|		КОГДА ОстаткиТоваров.Количество > 2 * ЕСТЬNULL(СгруппированнаяТаблицаВыгружаемыхОстатков.МаксимальныйУровеньЗапаса, 0)
	|			ТОГДА 5
	|	КОНЕЦ КАК СостояниеОстаткаИндекс
	|ИЗ
	|	СгруппированнаяТаблицаВыгружаемыхОстатков КАК СгруппированнаяТаблицаВыгружаемыхОстатков
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОстаткиТоваров КАК ОстаткиТоваров
	|		ПО СгруппированнаяТаблицаВыгружаемыхОстатков.Номенклатура = ОстаткиТоваров.Номенклатура
	|			И СгруппированнаяТаблицаВыгружаемыхОстатков.Характеристика = ОстаткиТоваров.Характеристика
	|			И СгруппированнаяТаблицаВыгружаемыхОстатков.СтруктурнаяЕдиница = ОстаткиТоваров.СтруктурнаяЕдиница";
	
		
		Запрос = Новый Запрос;    
		Запрос.УстановитьПараметр("ТекстОтбораПоНоменклатуре", Истина);   
	
		Если ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.Организация) Тогда  
			ТекстОтбораПоОрганизации = "ТаблицаВыгружаемыхОстатков.Организация В(&МассивОрганизаций)";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстОтбораПоОрганизации",         ТекстОтбораПоОрганизации);
			Запрос.УстановитьПараметр("МассивОрганизаций", КомпонентыОбмена.ПараметрыКонвертации.Организация);
		Иначе
			Запрос.УстановитьПараметр("ТекстОтбораПоОрганизации", Истина);   
		КонецЕсли;  
		
		Если ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.Склад) Тогда  
			ТекстОтбораПоСкладу = "ТаблицаВыгружаемыхОстатков.СтруктурнаяЕдиница В(&МассивСкладов)";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстОтбораПоСкладу",         ТекстОтбораПоСкладу);
			Запрос.УстановитьПараметр("МассивСкладов", КомпонентыОбмена.ПараметрыКонвертации.Склад);
		Иначе
			Запрос.УстановитьПараметр("ТекстОтбораПоСкладу", Истина);   
		КонецЕсли;  
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ТаблицаВыгружаемыхОстатков", ТаблицаВыгружаемыхОстатков);
		Запрос.УстановитьПараметр("ПустойСклад", Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
		
		Результат = Запрос.Выполнить();  	 
		
		Если НЕ Результат.Пустой() Тогда 
			ТаблицаОстатков = Результат.Выгрузить();		
			ТаблицаОстатков.Колонки.Добавить("НоменклатураСтруктура", ТипКолонкиСтруктура());   
						
			Если ТаблицаОстатков.Количество() > 0 Тогда	
				ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("РегистрСведений_ОстаткиТоваров_Отправка", "Имя"); 
				Если ПравилоОбработки <> Неопределено Тогда
					СтруктураНабора = Новый Структура("Записи", ТаблицаОстатков);
					ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СтруктураНабора, ПравилоОбработки);  
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузкаЦенНоменклатуры(КомпонентыОбмена)
	ТаблицаВыгружаемыхЦен = КомпонентыОбмена.ПараметрыКонвертации.ТаблицаВыгружаемыхЦен;
	Если ТипЗнч(ТаблицаВыгружаемыхЦен) = Тип("ТаблицаЗначений") Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ТаблицаВыгружаемыхЦен.Номенклатура КАК Номенклатура,
		               |	ТаблицаВыгружаемыхЦен.Характеристика КАК Характеристика,
		               |	ТаблицаВыгружаемыхЦен.ВидЦен КАК ВидЦен
		               |ПОМЕСТИТЬ ТаблицаВыгружаемыхЦен
		               |ИЗ
		               |	&ТаблицаВыгружаемыхЦен КАК ТаблицаВыгружаемыхЦен
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТаблицаВыгружаемыхЦен.Номенклатура КАК Номенклатура,
		               |	ТаблицаВыгружаемыхЦен.Характеристика КАК Характеристика,
		               |	ТаблицаВыгружаемыхЦен.ВидЦен КАК ВидЦен
		               |ПОМЕСТИТЬ СгруппированнаяТаблицаВыгружаемыхЦен
		               |ИЗ
		               |	ТаблицаВыгружаемыхЦен КАК ТаблицаВыгружаемыхЦен
		               |
			           |ГДЕ
					   |	&ТекстОтбораПоВидуЦен
					   |	И &ТекстОтбораПоНоменклатуре
		               |СГРУППИРОВАТЬ ПО
		               |	ТаблицаВыгружаемыхЦен.Номенклатура,
		               |	ТаблицаВыгружаемыхЦен.Характеристика,
		               |	ТаблицаВыгружаемыхЦен.ВидЦен
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
				       |     	СгруппированнаяТаблицаВыгружаемыхЦен.ВидЦен КАК ВидЦены,
				       |     	СгруппированнаяТаблицаВыгружаемыхЦен.Номенклатура КАК Номенклатура,
				       |    	СгруппированнаяТаблицаВыгружаемыхЦен.Характеристика КАК Характеристика,
				       |     	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
				       |      	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
				       |      	Выразить(СгруппированнаяТаблицаВыгружаемыхЦен.Номенклатура КАК Справочник.Номенклатура).Родитель КАК РодительНоменклатуры,
				       |      	Выразить(СгруппированнаяТаблицаВыгружаемыхЦен.Номенклатура КАК Справочник.Номенклатура).КатегорияНоменклатуры КАК ВидНоменклатуры,
				       |       	Выразить(СгруппированнаяТаблицаВыгружаемыхЦен.Номенклатура КАК Справочник.Номенклатура).ЦеноваяГруппа КАК ЦеноваяГруппа
		               |ИЗ
		               |	СгруппированнаяТаблицаВыгружаемыхЦен КАК СгруппированнаяТаблицаВыгружаемыхЦен
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
		               |			ПО СгруппированнаяТаблицаВыгружаемыхЦен.ВидЦен = ЦеныНоменклатурыСрезПоследних.ВидЦен
		               |			И СгруппированнаяТаблицаВыгружаемыхЦен.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		               |			И СгруппированнаяТаблицаВыгружаемыхЦен.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика";
		
		Запрос = Новый Запрос;    
		Запрос.УстановитьПараметр("ТекстОтбораПоНоменклатуре", Истина);   
	
		Если ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ВидЦен) Тогда  
			ТекстОтбораПоВидуЦен        = "ТаблицаВыгружаемыхЦен.ВидЦен В(&МассивВидовЦен)";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстОтбораПоВидуЦен",         ТекстОтбораПоВидуЦен);
			Запрос.УстановитьПараметр("МассивВидовЦен", КомпонентыОбмена.ПараметрыКонвертации.ВидЦен);
		Иначе
			Запрос.УстановитьПараметр("ТекстОтбораПоВидуЦен", Истина);   
		КонецЕсли; 
		    
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ТаблицаВыгружаемыхЦен", ТаблицаВыгружаемыхЦен);
		
		Результат = Запрос.Выполнить();  	 
		
		Если НЕ Результат.Пустой() Тогда 
			ТаблицаЦен = Результат.Выгрузить();		
			ТаблицаЦен.Колонки.Добавить("НоменклатураСтруктура", ТипКолонкиСтруктура());   
			ТаблицаЦен.Колонки.Добавить("СтрокаПоиска");   
						
			Если ТаблицаЦен.Количество() > 0 Тогда	
				ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("РегистрСведений_ЦеныНоменклатуры_Отправка", "Имя"); 
				Если ПравилоОбработки <> Неопределено Тогда
					СтруктураНабора = Новый Структура("Записи", ТаблицаЦен);
					ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СтруктураНабора, ПравилоОбработки);  
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ДанныеXDTOДляНоменклатурыХарактеристики(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена)
	Если ТипЗнч(ДанныеИБ) = Тип("СправочникОбъект.Номенклатура") Тогда 
		Номенклатура = ДанныеИБ.Ссылка;     
		Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ИначеЕсли ТипЗнч(ДанныеИБ) = Тип("СправочникСсылка.Номенклатура") Тогда 
		Номенклатура = ДанныеИБ;     
		Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ИначеЕсли ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда 
		Номенклатура = ДанныеИБ.Номенклатура;   
		Характеристика = ДанныеИБ.Характеристика; 
	КонецЕсли;  
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", Номенклатура);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Code", Номенклатура.Код);  
	ДанныеXDTO.КлючевыеСвойства.Вставить("Parent", Номенклатура.Родитель);  
	ДанныеXDTO.КлючевыеСвойства.Вставить("Артикул", Номенклатура.Артикул); 
	 
	ДанныеXDTO.Вставить("DeletionMark", Номенклатура.ПометкаУдаления);  
	ДанныеXDTO.Вставить("IsFolder", Номенклатура.ЭтоГруппа);  
	ДанныеXDTO.Вставить("ВесЕдиницаИзмерения", Номенклатура.ЕдиницаДляОтчетов);  
	ДанныеXDTO.Вставить("ВидНоменклатуры", Номенклатура.КатегорияНоменклатуры);  
	ДанныеXDTO.Вставить("ЕдиницаЗаказа", Номенклатура.ЕдиницаДляОтчетов);  
	ДанныеXDTO.Вставить("ЕдиницаИзмерения", Номенклатура.ЕдиницаИзмерения);  
	ДанныеXDTO.Вставить("Описание", Номенклатура.Комментарий); 
	
	ТаблицаШтрихкодов = КомпонентыОбмена.ПараметрыКонвертации.ТаблицаШтрихкодов;
	Если ТаблицаШтрихкодов = Неопределено Тогда
		ИнициироватьТаблицуШтрихкодов(КомпонентыОбмена);
		ТаблицаШтрихкодов = КомпонентыОбмена.ПараметрыКонвертации.ТаблицаШтрихкодов;
	КонецЕсли; 
	
	Штрихкод = "";
	Если ТаблицаШтрихкодов.Количество() > 0 Тогда
		СтруктураОтбор = Новый Структура;
		СтруктураОтбор.Вставить("Номенклатура", Номенклатура);
		СтруктураОтбор.Вставить("Характеристика", Характеристика);   
		СтрокиШтрихкодов = ТаблицаШтрихкодов.НайтиСтроки(СтруктураОтбор);  
		Для Каждого СтрокаШтрихкодов Из СтрокиШтрихкодов Цикл      
			Штрихкод = Штрихкод + СтрокаШтрихкодов.Штрихкод + ",";
		КонецЦикла;                                                
		Если ЗначениеЗаполнено(Штрихкод) Тогда
			Штрихкод = Лев(Штрихкод, СтрДлина(Штрихкод) - 1);
		КонецЕсли;    
	КонецЕсли;    
	
	ДанныеXDTO.Вставить("Штрихкод", Штрихкод); 
	
	ПередаватьИзображенияТоваров = ?(КомпонентыОбмена.ПараметрыКонвертации.ПередаватьИзображенияТоваров = Неопределено, Ложь, КомпонентыОбмена.ПараметрыКонвертации.ПередаватьИзображенияТоваров);
	Если ПередаватьИзображенияТоваров Тогда     
		ДанныеXDTO.Вставить("ФайлКартинки", Номенклатура.ФайлКартинки);  
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ЦеноваяГруппа", Номенклатура.ЦеноваяГруппа);  
	ДанныеXDTO.Вставить("СтавкаНДСЧислом", Справочники.СтавкиНДС.СтавкаНДС(Номенклатура.ВидСтавкиНДС).Ставка/100);
	Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
		ДанныеXDTO.Вставить("Услуга", Ложь);  
	Иначе
		ДанныеXDTO.Вставить("Услуга", Истина);  
	КонецЕсли; 
	
	ДанныеXDTO.Вставить("ВесЧислитель", 1);
	ДанныеXDTO.Вставить("ВесЗнаменатель", 1);   
	ДанныеXDTO.Вставить("ВесИспользовать", Ложь);
	ДанныеXDTO.Вставить("ВесМожноУказыватьВДокументах", Ложь);   
	 
	ИдНоменклатуры = СокрЛП(Номенклатура.УникальныйИдентификатор());
	ИдХарактеристики = СокрЛП(Характеристика.УникальныйИдентификатор());
	ДанныеXDTO.КлючевыеСвойства.Вставить("ERPКодНоменклатура", ИдНоменклатуры);
	ДанныеXDTO.КлючевыеСвойства.Вставить("ERPКодХарактеристика", ИдХарактеристики);
	
	НаименованиеНоменклатурыМП = СокрЛП(Номенклатура.Наименование); 
	ПолноеНаименованиеНоменклатурыМП = СокрЛП(Номенклатура.НаименованиеПолное);   
	Если НЕ ЗначениеЗаполнено(Номенклатура.НаименованиеПолное) Тогда
		ПолноеНаименованиеНоменклатурыМП = СокрЛП(Номенклатура.Наименование); 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Характеристика) Тогда     
		НаименованиеНоменклатурыМП = НаименованиеНоменклатурыМП + " (" + СокрЛП(Характеристика.Наименование) + ")";
		ПолноеНаименованиеНоменклатурыМП = ПолноеНаименованиеНоменклатурыМП + " (" + СокрЛП(Характеристика.Наименование) + ")";
	КонецЕсли; 
	СтрокаПоиска= СокрЛП(Номенклатура.Код)+ СокрЛП(НаименованиеНоменклатурыМП) + СокрЛП(Номенклатура.Артикул);
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Description", НаименованиеНоменклатурыМП); 
	ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеПолное", ПолноеНаименованиеНоменклатурыМП); 
	ДанныеXDTO.Вставить("СтрокаПоиска", СтрокаПоиска);
КонецПроцедуры
Процедура ЗаписатьВЛогВыгрузки(КомпонентыОбмена, Ссылка, ДанныеXDTO, ЭтоОкончаниеВыгрузки = Ложь, ЗаписейВНаборе = 0, ИмяСтруктуры = "")
	ЛогВыгрузки = КомпонентыОбмена.ПараметрыКонвертации.ЛогВыгрузки;
	ТипСсылки = ТипЗнч(Ссылка);  
	Если ТипСсылки = Тип("Структура") Тогда
		ТипСсылки = ИмяСтруктуры;
	КонецЕсли; 
	
	СтрокаСТипомСсылки = ЛогВыгрузки.Добавить();     
	СтрокаСТипомСсылки.ТипСсылки = ТипСсылки;
	Если ЭтоОкончаниеВыгрузки Тогда
		СтрокаСТипомСсылки.Выгружено = 1;    
	Иначе
		СтрокаСТипомСсылки.Обработано = 1;    
	КонецЕсли; 
	Если ЗаписейВНаборе > 0 Тогда
		СтрокаСТипомСсылки.ЗаписейВНаборе = ЗаписейВНаборе;  
	КонецЕсли; 
	
	КомпонентыОбмена.ПараметрыКонвертации.ЛогВыгрузки = ЛогВыгрузки;
КонецПроцедуры
Процедура ЗаписатьЛогВЖурналРегистрации(КомпонентыОбмена)
	ТекстЛога = ТекстЛогаВыгрузки(КомпонентыОбмена);
	УзелКорреспондента = КомпонентыОбмена.УзелКорреспондента;
	Если УзелКорреспондента <> Неопределено
		И Не УзелКорреспондента.Пустая() Тогда
		ОбъектМетаданных = УзелКорреспондента.Метаданные();
	Иначе
		ОбъектМетаданных   = Неопределено;
	КонецЕсли;
	
	КлючСообщенияЖурналаРегистрации = НСтр("ru = 'Обмен данными.ОбменСМобильнымиПриложениями.Отправка данных'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	ЗаписьЖурналаРегистрации(КлючСообщенияЖурналаРегистрации,
		УровеньЖурналаРегистрации.Информация,
		ОбъектМетаданных,
		,
		ТекстЛога);
КонецПроцедуры
Процедура ЗаполнениеНастроек(ДанныеXDTO, КомпонентыОбмена)
	РеквизитыУзла = РеквизитыУзла(КомпонентыОбмена.УзелКорреспондента);
	ТекстНаборКонстант = "ФункциональнаяОпцияПередачаТоваровНаКомиссию, ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи,
		|ФункциональнаяОпцияРазрешитьСкладыВТабличныхЧастях, ИспользоватьДополнительныеРеквизитыИСведения";
		
	НаборКонстант = Константы.СоздатьНабор(ТекстНаборКонстант);
	НаборКонстант.Прочитать();
	
	ДоступныеФункции = ПроверкаПользователяМобильногоПриложения(Пользователи.ТекущийПользователь());
	
	ДанныеXDTO.Вставить("ExchangePlanName", "ОбменСМобильнымиПриложениями");
	ДанныеXDTO.Вставить("MainNodeID", РеквизитыУзла.КодГлавногоУзла);
	ДанныеXDTO.Вставить("AddChangeCustomerOrders", ДоступныеФункции.ЗаказыКлиентов);
	ДанныеXDTO.Вставить("UsingCustomerAgreement", 3);
	ДанныеXDTO.Вставить("UsePricesInOrderLine", Ложь);
	ДанныеXDTO.Вставить("UseCustomerContract", Истина);
	ДанныеXDTO.Вставить("UseGoodsBalance", Истина);
	ДанныеXDTO.Вставить("PartnersHowContractors", Истина);
	ДанныеXDTO.Вставить("UseCommission", Ложь);
	ДанныеXDTO.Вставить("UseManualDiscounts", НаборКонстант.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи);
	ДанныеXDTO.Вставить("UseStoreInOrderLine", Ложь);
	ДанныеXDTO.Вставить("UseOrderStatus", Истина);
	ДанныеXDTO.Вставить("ChangePriceInOrder", ДоступныеФункции.ИзменениеЦен);
	ДанныеXDTO.Вставить("FrequencyExchangeRates", 0);
	ДанныеXDTO.Вставить("FrequencyExchangeBalance", 0);
	ДанныеXDTO.Вставить("PrefixIB", РеквизитыУзла.ПрефиксДляДанныхМобильногоУстройства);
	ДанныеXDTO.Вставить("MessageNumberIn", РеквизитыУзла.НомерПринятого);
	ДанныеXDTO.Вставить("MessageNumberOut", РеквизитыУзла.НомерОтправленного);    
	
	Если ДоступныеФункции.Задания И ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.СостояниеЗаданиеТорговомуПредставителю) Тогда
		ИспользованиеЗаданий = 2;
	Иначе
		ИспользованиеЗаданий = 0;
	КонецЕсли;
	ДанныеXDTO.Вставить("UsingJobTargets", ИспользованиеЗаданий);  
	ДанныеXDTO.Вставить("DetailJobTargets", Истина);   
	
	ДанныеXDTO.Вставить("UseCashPayment",
		(ДоступныеФункции.Касса
			И ?(КомпонентыОбмена.ПараметрыКонвертации.РегистрироватьОплатыПКО = Неопределено, Ложь,
					КомпонентыОбмена.ПараметрыКонвертации.РегистрироватьОплатыПКО)));
	ДанныеXDTO.Вставить("UseCashRegister", ДоступныеФункции.Касса
		И ?(КомпонентыОбмена.ПараметрыКонвертации.РегистрироватьОплатыПКО = Неопределено, Ложь,
			КомпонентыОбмена.ПараметрыКонвертации.РегистрироватьОплатыПКО));
	
	РегистрироватьОплатыПоПлатежнымКартам = ?(КомпонентыОбмена.ПараметрыКонвертации.РегистрироватьОплатыПоПлатежнымКартам = Неопределено, Ложь,
					КомпонентыОбмена.ПараметрыКонвертации.РегистрироватьОплатыПоПлатежнымКартам);
			
	Если РегистрироватьОплатыПоПлатежнымКартам И ДоступныеФункции.ПлатежнаяКарта
		И ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ЭквайринговыйТерминал) Тогда
		ДанныеXDTO.Вставить("UseCardPayment", Истина);  
		ВидыКарт = "";
		Для Каждого СтрокаВидаКарт Из КомпонентыОбмена.ПараметрыКонвертации.ЭквайринговыйТерминал.ВидыПлатежныхКарт Цикл      
			ВидыКарт = ВидыКарт + СтрокаВидаКарт.ВидПлатежнойКарты+","
		КонецЦикла;
		Если ЗначениеЗаполнено(СтрокаВидаКарт) Тогда
			ВидыКарт = Лев(ВидыКарт, СтрДлина(ВидыКарт) - 1);
		КонецЕсли;
		ДанныеXDTO.Вставить("CardsTypes", ВидыКарт);
	Иначе
		ДанныеXDTO.Вставить("UseCardPayment", Ложь);
		ДанныеXDTO.Вставить("CardsTypes", "");
	КонецЕсли;
			
	ДанныеXDTO.Вставить("UsePushNotifications", Ложь);
	ДанныеXDTO.Вставить("GoogleCloudProjectNumber", РеквизитыУзла.НомерПриложенияGoogleCloud);
	ДанныеXDTO.Вставить("UseImages", ?(КомпонентыОбмена.ПараметрыКонвертации.ПередаватьИзображенияТоваров = Неопределено,
		Ложь, КомпонентыОбмена.ПараметрыКонвертации.ПередаватьИзображенияТоваров));
	ДанныеXDTO.Вставить("UseWeight", Ложь); 
		
	ПустойИдентификатор = "00000000-0000-0000-0000-000000000000";
		
	ДанныеXDTO.Вставить("UnitWeight", ПустойИдентификатор);
	ДанныеXDTO.Вставить("UseRequestsToReturnOfGoodsByClient", Ложь);
	
	ДоступенВводКонтрагентов = ПравоДоступа("Добавление", Метаданные.Справочники.Контрагенты);
	ДанныеXDTO.Вставить("AddChangeCustomer", ДоступенВводКонтрагентов);
	ДанныеXDTO.Вставить("UseSimplifiedClientInput", ДоступенВводКонтрагентов);
	ДанныеXDTO.Вставить("CheckTINRussianRules", Ложь);
	
	ДанныеXDTO.Вставить("UseAdditionalProps", Ложь);
	ДанныеXDTO.Вставить("UseCommonAdditionalValues", Ложь);
	ДанныеXDTO.Вставить("UseCommonAdditionalProps", Ложь);
	
	ДанныеXDTO.Вставить("ShowOddments", ?(КомпонентыОбмена.ПараметрыКонвертации.ОстатокКоличество = Неопределено,
		Истина, КомпонентыОбмена.ПараметрыКонвертации.ОстатокКоличество));
КонецПроцедуры
Процедура ЗаполнениеПараметровКонвертации(КомпонентыОбмена, УзелОбмена)
	ПланОбменаМенеджер = ПланыОбмена[УзелОбмена.Метаданные().Имя];
	РеквизитыГлавногоУзла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПланОбменаМенеджер.ЭтотУзел(), "Пользователь");     
	КомпонентыОбмена.ПараметрыКонвертации.Пользователь = РеквизитыГлавногоУзла.Пользователь;           
	
	РеквизитыУзла = РеквизитыУзла(КомпонентыОбмена.УзелКорреспондента);
	КомпонентыОбмена.ПараметрыКонвертации.ПрефиксДляДанныхМобильногоУстройства = РеквизитыУзла.ПрефиксДляДанныхМобильногоУстройства;
	
	НастройкаКомпоновки = УзелОбмена.НастройкиОбмена.Получить();
	
	МассивЭлементовОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкаКомпоновки.Отбор, "ЭквайринговыйТерминал");   
	Если МассивЭлементовОтбора.Количество() > 0 Тогда
		КомпонентыОбмена.ПараметрыКонвертации.ЭквайринговыйТерминал = МассивЭлементовОтбора[0].ПравоеЗначение;
	КонецЕсли;
	
	МассивЭлементовОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкаКомпоновки.Отбор, "Касса");   
	Если МассивЭлементовОтбора.Количество() > 0 Тогда
		КомпонентыОбмена.ПараметрыКонвертации.Касса = МассивЭлементовОтбора[0].ПравоеЗначение;
	КонецЕсли;
	
	МассивЭлементовОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкаКомпоновки.Отбор, "СтатьяДДСНаличные");   
	Если МассивЭлементовОтбора.Количество() > 0 Тогда
		КомпонентыОбмена.ПараметрыКонвертации.СтатьяДДСНаличные = МассивЭлементовОтбора[0].ПравоеЗначение;
	КонецЕсли;
	
	МассивЭлементовОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкаКомпоновки.Отбор, "СтатьяДДСЭквайринг");   
	Если МассивЭлементовОтбора.Количество() > 0 Тогда
		КомпонентыОбмена.ПараметрыКонвертации.СтатьяДДСЭквайринг = МассивЭлементовОтбора[0].ПравоеЗначение;
	КонецЕсли; 
	
	МассивЭлементовОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкаКомпоновки.Отбор, "СостояниеЗаданиеТорговомуПредставителю");   
	Если МассивЭлементовОтбора.Количество() > 0 Тогда
		КомпонентыОбмена.ПараметрыКонвертации.СостояниеЗаданиеТорговомуПредставителю = МассивЭлементовОтбора[0].ПравоеЗначение;
	КонецЕсли;
	
	МассивЭлементовОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкаКомпоновки.Отбор, "ПередаватьИзображенияТоваров");   
	Если МассивЭлементовОтбора.Количество() > 0 Тогда
		КомпонентыОбмена.ПараметрыКонвертации.ПередаватьИзображенияТоваров = МассивЭлементовОтбора[0].ПравоеЗначение;
	Иначе
		КомпонентыОбмена.ПараметрыКонвертации.ПередаватьИзображенияТоваров = Ложь;   
	КонецЕсли; 
	
	МассивЭлементовОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкаКомпоновки.Отбор, "РегистрироватьОплатыПоПлатежнымКартам");   
	Если МассивЭлементовОтбора.Количество() > 0 Тогда
		КомпонентыОбмена.ПараметрыКонвертации.РегистрироватьОплатыПоПлатежнымКартам = МассивЭлементовОтбора[0].ПравоеЗначение;
	Иначе
		КомпонентыОбмена.ПараметрыКонвертации.РегистрироватьОплатыПоПлатежнымКартам = Ложь;   
	КонецЕсли; 
	
	МассивЭлементовОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкаКомпоновки.Отбор, "РегистрироватьОплатыПКО");   
	Если МассивЭлементовОтбора.Количество() > 0 Тогда
		КомпонентыОбмена.ПараметрыКонвертации.РегистрироватьОплатыПКО = МассивЭлементовОтбора[0].ПравоеЗначение;   
	Иначе
		КомпонентыОбмена.ПараметрыКонвертации.РегистрироватьОплатыПКО = Ложь;   
	КонецЕсли;
	
	МассивЭлементовОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкаКомпоновки.Отбор, "РегистрироватьОплатыПоДоверенностям");   
	Если МассивЭлементовОтбора.Количество() > 0 Тогда
		КомпонентыОбмена.ПараметрыКонвертации.РегистрироватьОплатыПоДоверенностям = МассивЭлементовОтбора[0].ПравоеЗначение;
	Иначе
		КомпонентыОбмена.ПараметрыКонвертации.РегистрироватьОплатыПоДоверенностям = Ложь;   
	КонецЕсли;
	
	МассивЭлементовОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкаКомпоновки.Отбор, "ОстатокКоличество");   
	Если МассивЭлементовОтбора.Количество() > 0 Тогда
		КомпонентыОбмена.ПараметрыКонвертации.ОстатокКоличество = МассивЭлементовОтбора[0].ПравоеЗначение;
	Иначе
		КомпонентыОбмена.ПараметрыКонвертации.ОстатокКоличество = Ложь;   
	КонецЕсли; 
	
	МассивЭлементовОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкаКомпоновки.Отбор, "ПроводитьЗаказ");   
	Если МассивЭлементовОтбора.Количество() > 0 Тогда
		КомпонентыОбмена.ПараметрыКонвертации.ПроводитьЗаказ = МассивЭлементовОтбора[0].ПравоеЗначение;
	Иначе
		КомпонентыОбмена.ПараметрыКонвертации.ПроводитьЗаказ = Ложь;   
	КонецЕсли; 
	
	МассивЭлементовОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкаКомпоновки.Отбор, "ИспользоватьВесовыеХарактеристики");   
	Если МассивЭлементовОтбора.Количество() > 0 Тогда
		КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьВесовыеХарактеристики = МассивЭлементовОтбора[0].ПравоеЗначение;
	Иначе
		КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьВесовыеХарактеристики = Ложь;   
	КонецЕсли; 
	
	МассивЭлементовОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкаКомпоновки.Отбор, "ПередаватьЦеныКонтрагентов");   
	Если МассивЭлементовОтбора.Количество() > 0 Тогда
		КомпонентыОбмена.ПараметрыКонвертации.ПередаватьЦеныКонтрагентов = МассивЭлементовОтбора[0].ПравоеЗначение;   
	Иначе
		КомпонентыОбмена.ПараметрыКонвертации.ПередаватьЦеныКонтрагентов = Ложь;   
	КонецЕсли;
	
	// Отбор             
	МассивЭлементовОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкаКомпоновки.Отбор, "Организация");   
	МассивПараметра = Новый Массив;
	Если МассивЭлементовОтбора.Количество() > 0 Тогда
		ЭлементОтбора = МассивЭлементовОтбора[0]; 
		Если ЭлементОтбора.Использование И  ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение) Тогда
			Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				МассивПараметра.Добавить(ЭлементОтбора.ПравоеЗначение);
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
				МассивПараметра = ЭлементОтбора.ПравоеЗначение.ВыгрузитьЗначения();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;   
	Если МассивПараметра.Количество() > 0 Тогда
		КомпонентыОбмена.ПараметрыКонвертации.Организация = МассивПараметра;   
	Иначе
		КомпонентыОбмена.ПараметрыКонвертации.Организация = Справочники.Организации.ПустаяСсылка();   
	КонецЕсли;   
	  
	МассивЭлементовОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкаКомпоновки.Отбор, "Склад");   
	МассивПараметра = Новый Массив;
	Если МассивЭлементовОтбора.Количество() > 0 Тогда
		ЭлементОтбора = МассивЭлементовОтбора[0]; 
		Если ЭлементОтбора.Использование И  ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение) Тогда
			Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				МассивПараметра.Добавить(ЭлементОтбора.ПравоеЗначение);
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
				МассивПараметра = ЭлементОтбора.ПравоеЗначение.ВыгрузитьЗначения();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;   
	Если МассивПараметра.Количество() > 0 Тогда
		КомпонентыОбмена.ПараметрыКонвертации.Склад = МассивПараметра;   
	Иначе
		КомпонентыОбмена.ПараметрыКонвертации.Склад = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();   
	КонецЕсли;
	
	МассивЭлементовОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкаКомпоновки.Отбор, "ВидЦен");   
	МассивПараметра = Новый Массив;
	Если МассивЭлементовОтбора.Количество() > 0 Тогда
		ЭлементОтбора = МассивЭлементовОтбора[0]; 
		Если ЭлементОтбора.Использование И  ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение) Тогда
			Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				МассивПараметра.Добавить(ЭлементОтбора.ПравоеЗначение);
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
				МассивПараметра = ЭлементОтбора.ПравоеЗначение.ВыгрузитьЗначения();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;   
	Если МассивПараметра.Количество() > 0 Тогда
		КомпонентыОбмена.ПараметрыКонвертации.ВидЦен = МассивПараметра;   
	Иначе
		КомпонентыОбмена.ПараметрыКонвертации.ВидЦен = Справочники.ВидыЦен.ПустаяСсылка();   
	КонецЕсли; 
	
	// Сегменты 
	МассивЭлементовОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкаКомпоновки.Отбор, "СегментКонтрагентов");   
	МассивПараметра = Новый Массив;
	Если МассивЭлементовОтбора.Количество() > 0 Тогда
		ЭлементОтбора = МассивЭлементовОтбора[0]; 
		Если ЭлементОтбора.Использование И  ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение) Тогда
			Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				МассивПараметра.Добавить(ЭлементОтбора.ПравоеЗначение);
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
				МассивПараметра = ЭлементОтбора.ПравоеЗначение.ВыгрузитьЗначения();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;   
	Если МассивПараметра.Количество() > 0 Тогда
		КомпонентыОбмена.ПараметрыКонвертации.СегментКонтрагентов = МассивПараметра;   
	Иначе
		КомпонентыОбмена.ПараметрыКонвертации.СегментКонтрагентов = Справочники.СегментыКонтрагентов.ПустаяСсылка();   
	КонецЕсли;    
	
	МассивЭлементовОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкаКомпоновки.Отбор, "СегментНоменклатуры");   
	МассивПараметра = Новый Массив;
	Если МассивЭлементовОтбора.Количество() > 0 Тогда
		ЭлементОтбора = МассивЭлементовОтбора[0]; 
		Если ЭлементОтбора.Использование И  ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение) Тогда
			Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				МассивПараметра.Добавить(ЭлементОтбора.ПравоеЗначение);
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
				МассивПараметра = ЭлементОтбора.ПравоеЗначение.ВыгрузитьЗначения();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;   
	Если МассивПараметра.Количество() > 0 Тогда
		КомпонентыОбмена.ПараметрыКонвертации.СегментНоменклатуры = МассивПараметра;   
	Иначе
		КомпонентыОбмена.ПараметрыКонвертации.СегментНоменклатуры = Справочники.СегментыНоменклатуры.ПустаяСсылка();   
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьПараметрСоставСегментаКонтрагентов(ПараметрОтбора, КомпонентыОбмена)
	ТекстЗапроса = "ВЫБРАТЬ
		|	СоставСегментаКонтрагентов.Контрагент КАК Ссылка
		|ИЗ
		|	РегистрСведений.СоставСегментаКонтрагентов КАК СоставСегментаКонтрагентов
		|ГДЕ
		|	СоставСегментаКонтрагентов.Сегмент В (&ПараметрОтбора)";
	
	Запрос = Новый Запрос;    
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ПараметрОтбора", ПараметрОтбора); 
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда    
		КомпонентыОбмена.ПараметрыКонвертации.СоставСегментаКонтрагентов = Новый Массив;
	Иначе
		ТаблицаРезультата = РезультатЗапроса.Выгрузить();
		КомпонентыОбмена.ПараметрыКонвертации.СоставСегментаКонтрагентов = ТаблицаРезультата.ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьПараметрСоставСегментаНоменклатуры(ПараметрОтбора, КомпонентыОбмена)
	ТекстЗапроса = "ВЫБРАТЬ
		|	СоставСегментаНоменклатуры.Номенклатура КАК Ссылка
		|ИЗ
		|	РегистрСведений.СоставСегментаНоменклатуры КАК СоставСегментаНоменклатуры
		|ГДЕ
		|	СоставСегментаНоменклатуры.Сегмент В (&ПараметрОтбора)";
	
	Запрос = Новый Запрос;    
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ПараметрОтбора", ПараметрОтбора); 
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда    
		КомпонентыОбмена.ПараметрыКонвертации.СоставСегментаНоменклатуры = Новый Массив;
	Иначе
		ТаблицаРезультата = РезультатЗапроса.Выгрузить();
		КомпонентыОбмена.ПараметрыКонвертации.СоставСегментаНоменклатуры = ТаблицаРезультата.ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ, МассивИсключений = Неопределено)
	Для Каждого СвойствоОбъекта Из КонвертацияСвойств Цикл
		СвойствоИБ = СвойствоОбъекта.СвойствоКонфигурации;
		Если СокрЛП(СвойствоИБ) = "" Тогда
			Продолжить;
		КонецЕсли;
		Если МассивИсключений <> Неопределено И МассивИсключений.Найти(СвойствоИБ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеИБ[СвойствоИБ] = ПолученныеДанные[СвойствоИБ];
	КонецЦикла;
КонецПроцедуры
Процедура ИнициироватьЛогВыгрузки(КомпонентыОбмена)
	КомпонентыОбмена.ПараметрыКонвертации.ВремяНачалаВыгрузки = ТекущаяДатаСеанса();	         
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ЛогВыгрузки = Неопределено Тогда   
		ТаблицаЛога = Новый ТаблицаЗначений;
		ТаблицаЛога.Колонки.Добавить("ТипСсылки");
		ТаблицаЛога.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Число"));
		ТаблицаЛога.Колонки.Добавить("Выгружено", Новый ОписаниеТипов("Число"));
		ТаблицаЛога.Колонки.Добавить("ВыгруженоКлючевые", Новый ОписаниеТипов("Число"));
		ТаблицаЛога.Колонки.Добавить("ЗаписейВНаборе", Новый ОписаниеТипов("Число"));
	
		КомпонентыОбмена.ПараметрыКонвертации.ЛогВыгрузки = ТаблицаЛога;	
	КонецЕсли;
КонецПроцедуры
Процедура ИнициироватьТаблицуВыгружаемыхОстатков(КомпонентыОбмена)
	ТаблицаВыгружаемыхОстатков = Новый ТаблицаЗначений;
	ТаблицаВыгружаемыхОстатков.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаВыгружаемыхОстатков.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаВыгружаемыхОстатков.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаВыгружаемыхОстатков.Колонки.Добавить("СтруктурнаяЕдиница", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	
	КомпонентыОбмена.ПараметрыКонвертации.ТаблицаВыгружаемыхОстатков = ТаблицаВыгружаемыхОстатков;
КонецПроцедуры
Процедура ИнициироватьТаблицуВыгружаемыхЦен(КомпонентыОбмена)
	ТаблицаВыгружаемыхЦен = Новый ТаблицаЗначений;
	ТаблицаВыгружаемыхЦен.Колонки.Добавить("ВидЦен", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	ТаблицаВыгружаемыхЦен.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаВыгружаемыхЦен.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	КомпонентыОбмена.ПараметрыКонвертации.ТаблицаВыгружаемыхЦен = ТаблицаВыгружаемыхЦен;
КонецПроцедуры
Процедура ИнициироватьТаблицуШтрихкодов(КомпонентыОбмена)
	Запрос = Новый Запрос;    
	Запрос.Текст = "ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры";
	Результат = Запрос.Выполнить();  	 
	
	Если НЕ Результат.Пустой() Тогда   
		ТаблицаШтрихкодов = Результат.Выгрузить();
	Иначе
		ТаблицаШтрихкодов = Новый ТаблицаЗначений;
	КонецЕсли;  
	
	КомпонентыОбмена.ПараметрыКонвертации.ТаблицаШтрихкодов = ТаблицаШтрихкодов;
КонецПроцедуры
Функция ОбъектСуществуетВБазе(Ссылка)
	Попытка
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|ИСТИНА
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
		
	Возврат Не Запрос.Выполнить().Пустой();
	
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции
Функция ПроверитьОбъектПоФильтру(ДанныеИБ, КомпонентыОбмена)
	// Проверка по сегментам
		Если ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.СегментКонтрагентов)
			И ТипЗнч(ДанныеИБ) = Тип("СправочникОбъект.Контрагенты") Тогда  
			Если КомпонентыОбмена.ПараметрыКонвертации.СоставСегментаКонтрагентов = Неопределено Тогда
				ЗаполнитьПараметрСоставСегментаКонтрагентов(КомпонентыОбмена.ПараметрыКонвертации.СегментКонтрагентов, КомпонентыОбмена);
			КонецЕсли;
			Возврат КомпонентыОбмена.ПараметрыКонвертации.СоставСегментаКонтрагентов.Найти(ДанныеИБ.Ссылка) <> Неопределено ;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.СегментНоменклатуры)
			И ТипЗнч(ДанныеИБ) = Тип("СправочникОбъект.Номенклатура") Тогда  
			Если КомпонентыОбмена.ПараметрыКонвертации.СоставСегментаНоменклатуры = Неопределено Тогда
				ЗаполнитьПараметрСоставСегментаНоменклатуры(КомпонентыОбмена.ПараметрыКонвертации.СегментНоменклатуры, КомпонентыОбмена);
			КонецЕсли;
			Возврат КомпонентыОбмена.ПараметрыКонвертации.СоставСегментаНоменклатуры.Найти(ДанныеИБ.Ссылка) <> Неопределено ;
		КонецЕсли;
		
		
		// Проверка по реквизитам
		СтрокаРеквизитов = "";    
		ЕстьОрганизация  = Ложь;
		ЕстьСтруктурнаяЕдиница  = Ложь;
		ЕстьВидЦен  = Ложь;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеИБ, "Организация") Тогда 
			СтрокаРеквизитов = СтрокаРеквизитов + "Организация,";
			ЕстьОрганизация  = Истина;
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеИБ, "СтруктурнаяЕдиница") Тогда 
			СтрокаРеквизитов = СтрокаРеквизитов + "СтруктурнаяЕдиница,";
			ЕстьСтруктурнаяЕдиница  = Истина;
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеИБ, "ВидЦен") Тогда 
			СтрокаРеквизитов = СтрокаРеквизитов + "ВидЦен,";
			ЕстьВидЦен  = Истина;
		КонецЕсли;    
		Если СтрДлина(СтрокаРеквизитов) = 0 Тогда
			Возврат Истина;
		КонецЕсли;   
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.Ссылка,	СтрокаРеквизитов);     
		
		Если ЕстьОрганизация И ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.Организация) Тогда  
			Если ТипЗнч(ДанныеИБ) = Тип("СправочникОбъект.Организации") Тогда
				Возврат КомпонентыОбмена.ПараметрыКонвертации.Организация.Найти(ДанныеИБ.Ссылка) <> Неопределено ;
			ИначеЕсли  ЗначениеЗаполнено(РеквизитыОбъекта.Организация) Тогда      
				Если КомпонентыОбмена.ПараметрыКонвертации.Организация.Найти(РеквизитыОбъекта.Организация) = Неопределено
					И ЗначениеЗаполнено(РеквизитыОбъекта.Организация) Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЕстьСтруктурнаяЕдиница И ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.СтруктурнаяЕдиница) Тогда  
			Если ТипЗнч(ДанныеИБ) = Тип("СправочникОбъект.СтруктурныеЕдиницы") Тогда
				Возврат КомпонентыОбмена.ПараметрыКонвертации.Склад.Найти(ДанныеИБ.Ссылка) <> Неопределено ;
			ИначеЕсли  ЗначениеЗаполнено(РеквизитыОбъекта.СтруктурнаяЕдиница) Тогда      
				Если КомпонентыОбмена.ПараметрыКонвертации.Склад.Найти(РеквизитыОбъекта.СтруктурнаяЕдиница) = Неопределено
					И ЗначениеЗаполнено(РеквизитыОбъекта.СтруктурнаяЕдиница) Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЕстьВидЦен И ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ВидЦен) Тогда  
			Если ТипЗнч(ДанныеИБ) = Тип("СправочникОбъект.ВидыЦен") Тогда
				Возврат КомпонентыОбмена.ПараметрыКонвертации.ВидЦен.Найти(ДанныеИБ.Ссылка) <> Неопределено ;
			ИначеЕсли  ЗначениеЗаполнено(РеквизитыОбъекта.ВидЦен) Тогда      
				Если КомпонентыОбмена.ПараметрыКонвертации.ВидЦен.Найти(РеквизитыОбъекта.ВидЦен) = Неопределено
					И ЗначениеЗаполнено(РеквизитыОбъекта.ВидЦен) Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
		Возврат Истина;
КонецФункции
Функция ПроверкаПользователяМобильногоПриложения(Пользователь)
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	ДоступныеФункции = Новый Структура;
	ДоступныеФункции.Вставить("Касса", ПравоДоступа("Добавление",
		Метаданные.Документы.ПриходныйОрдер));
	ДоступныеФункции.Вставить("Доверенности", ПравоДоступа("Добавление",
		Метаданные.Документы.Доверенность));
	ДоступныеФункции.Вставить("ЗаказыКлиентов", ПравоДоступа("Добавление",
		Метаданные.Документы.ЗаказПокупателя));
	ДоступныеФункции.Вставить("ПлатежнаяКарта", ПравоДоступа("Добавление",
		Метаданные.Документы.ОперацияПоПлатежнымКартам));
	ДоступныеФункции.Вставить("Задания", ПравоДоступа("Добавление",
		Метаданные.Документы.ЗаказПокупателя));
	ДоступныеФункции.Вставить("ЗаявкиНаВозврат", ПравоДоступа("Добавление",
		Метаданные.Документы.ПриходнаяНакладная));
	ДоступныеФункции.Вставить("ПользовательМобильногоПриложения",
		ПравоДоступа("Изменение", Метаданные.ПланыОбмена.ОбменСМобильнымиПриложениями));
		
	ДоступныеФункции.Вставить("ИзменениеЦен", Истина);
	ДоступныеФункции.Вставить("ИзменениеКлиентов", Истина);
	
	Возврат ДоступныеФункции;
КонецФункции
Функция ПустойИдентификатор()
	Возврат "00000000-0000-0000-0000-000000000000";
КонецФункции
Функция РеквизитыУзла(УзелОбмена)
	РеквизитыУзла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УзелОбмена,
	"НомерПринятого, НомерОтправленного, ПрефиксДляДанныхМобильногоУстройства");
	
	ПланОбменаМенеджер = ПланыОбмена[УзелОбмена.Метаданные().Имя];
	
	РеквизитыГлавногоУзла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПланОбменаМенеджер.ЭтотУзел(),
	"ВариантОтправкиPushУведомлений, НомерПриложенияGoogleCloud, Код, Пользователь");
	
	РеквизитыУзла.Вставить("КодГлавногоУзла", РеквизитыГлавногоУзла.Код);
	РеквизитыУзла.Вставить("ОтправляютсяPushУведомления",
		ЗначениеЗаполнено(РеквизитыГлавногоУзла.ВариантОтправкиPushУведомлений)
		И НЕ РеквизитыГлавногоУзла.ВариантОтправкиPushУведомлений = 0);
	РеквизитыУзла.Вставить("НомерПриложенияGoogleCloud", РеквизитыГлавногоУзла.НомерПриложенияGoogleCloud);
	  
	Возврат РеквизитыУзла;
КонецФункции
Функция СтруктураДляКонвертацииНоменклатуры(Номенклатура, Характеристика)
	Если ЗначениеЗаполнено(Характеристика) Тогда
		ВыгружаемыйОбъект = Новый Структура("Номенклатура, Характеристика",Номенклатура, Характеристика);
		СтруктураСПравилом = Новый Структура("ИмяПКО,Значение", "Справочник_НоменклатураИзСтруктуры_Отправка", ВыгружаемыйОбъект);	
	Иначе
		ВыгружаемыйОбъект = Номенклатура;
		СтруктураСПравилом = Новый Структура("ИмяПКО,Значение", "Справочник_Номенклатура_Отправка", ВыгружаемыйОбъект);	
	КонецЕсли;
	                  
	Возврат СтруктураСПравилом;
КонецФункции
Функция ТекстЛогаВыгрузки(КомпонентыОбмена)
	ВыгруженныеОбъекты = КомпонентыОбмена.ВыгруженныеОбъекты;
	
	ШаблонЛога = НСтр("ru = 'Задействовано объектов: %1, (и записей: %2), из них
	|%3
	|Инициировали выгрузку: %4;
	|Время выгрузки(мин:сек): %5'");  
	
	ШаблонЛогаПоТипу = "%1: %2;";                
	ШаблонЛогаПоТипуПоНаборуЗаписей = "%1: %2 (записей: %3);";                
	ТекстЛогаПоТипам = "";                
	
	ЛогВыгрузки = КомпонентыОбмена.ПараметрыКонвертации.ЛогВыгрузки;  
	ЛогВыгрузки.Свернуть("ТипСсылки", "Обработано, Выгружено, ВыгруженоКлючевые, ЗаписейВНаборе");
	ВсегоВыгружено = ЛогВыгрузки.Итог("Выгружено"); 
	ВсегоЗаписей = ЛогВыгрузки.Итог("ЗаписейВНаборе"); 
	
	Для Каждого СтрокаТипов Из ЛогВыгрузки Цикл
		Если СтрокаТипов.ЗаписейВНаборе > 0 Тогда
			ТекстЛогаПоТипу = СтрШаблон(ШаблонЛогаПоТипуПоНаборуЗаписей, СтрокаТипов.ТипСсылки, СтрокаТипов.Выгружено, СтрокаТипов.ЗаписейВНаборе);
		Иначе
			ТекстЛогаПоТипу = СтрШаблон(ШаблонЛогаПоТипу, СтрокаТипов.ТипСсылки, СтрокаТипов.Выгружено);
		КонецЕсли;
		ТекстЛогаПоТипам = ТекстЛогаПоТипам + ТекстЛогаПоТипу + Символы.ПС;                 
	КонецЦикла;
	
	ВремяОкончания = ТекущаяДатаСеанса();
	ВремяВыгрузкиСекунды = ВремяОкончания - КомпонентыОбмена.ПараметрыКонвертации.ВремяНачалаВыгрузки;        
	ВремяВыгрузкиМинуты = Цел(ВремяВыгрузкиСекунды / 60);
	ОстатокСекунд = ВремяВыгрузкиСекунды - ВремяВыгрузкиМинуты * 60;  
	СтрокаВремени = СтрШаблон("%1:%2",ВремяВыгрузкиМинуты, Формат(ОстатокСекунд, "ЧЦ=2; ЧВН=")); 
		
	ТекстЛога = СтрШаблон(ШаблонЛога, ВсегоВыгружено, ВсегоЗаписей, ТекстЛогаПоТипам, ВыгруженныеОбъекты.Количество(), СтрокаВремени);
	 
	Возврат ТекстЛога;
КонецФункции
Функция ТипКолонкиСтруктура()
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("Структура"));      
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	Возврат ОписаниеТипов;
КонецФункции

#КонецОбласти
#КонецОбласти
