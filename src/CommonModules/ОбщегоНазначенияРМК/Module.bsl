
///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область КомпоновкаДанных

// Находит среди элементов полей СКД поле по имени.
//
// Параметры:
//  Элементы - ПолеКомпоновкиДанных - поля СКД.
//  Имя - Строка - имя поля СКД.
//  Кэш - Соответствие - соответствие полей и наименований СКД.
//
// Возвращаемое значение:
//  ПолеКомпоновкиДанных - поле СКД по полному имени.
//
Функция НайтиПолеСКДПоИмени(Элементы, Имя, Кэш = Неопределено) Экспорт
	
	Если Кэш <> Неопределено Тогда
		Элемент = Кэш.Получить(Имя);
		
		Если Элемент <> Неопределено Тогда
			Возврат Элемент;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Элемент Из Элементы Цикл
		
		Если ВРЕГ(Строка(Элемент.Поле)) = ВРЕГ(Имя) Тогда
			
			Если Кэш <> Неопределено Тогда
				Кэш.Вставить(Имя, Элемент);
			КонецЕсли;
			
			Возврат Элемент;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции
// Находит среди элементов полей СКД поле по полному имени.
//
// Параметры:
//  Элементы - ПолеКомпоновкиДанных - поля СКД.
//  ПолноеИмя - Строка - полное имя поля СКД.
//  Кэш - Соответствие - соответствие полей и наименований СКД.
//
// Возвращаемое значение:
//	ПолеКомпоновкиДанных - поле СКД по полному имени.
//
Функция НайтиПолеСКДПоПолномуИмени(Элементы, ПолноеИмя, Кэш = Неопределено) Экспорт
	
	Если Кэш <> Неопределено Тогда
		
		Поле = Кэш.Получить(ПолноеИмя);
		Если Поле <> Неопределено Тогда
			Возврат Поле;
		КонецЕсли;
		
	КонецЕсли;
	
	МассивЧастейИмен = МассивСоставляющихИмени(ПолноеИмя);
	КоличествоЧастей = МассивЧастейИмен.Количество();
	
	ТекущееИмя = МассивЧастейИмен[0];
	Поле = НайтиПолеСКДПоИмени(Элементы, ТекущееИмя, Кэш);
	
	Если Поле = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Сч = 2 По КоличествоЧастей Цикл
		
		ТекущееИмя = СтрШаблон("%1.%2", ТекущееИмя, МассивЧастейИмен[Сч-1]);
		Поле = НайтиПолеСКДПоИмени(Поле.Элементы, ТекущееИмя, Кэш);
		
		Если Поле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Кэш <> Неопределено Тогда
		Кэш.Вставить(ПолноеИмя, Поле);
	КонецЕсли;
	
	Возврат Поле;
	
КонецФункции

// Записывает значение в создаваемую запись XML.
//
// Параметры:
//  Значение - Произвольный - значение для записи в XML.
//
// Возвращаемое значение:
//  ЗаписьXML - запись XML по значению
//
Функция ПолучитьXML(Значение) Экспорт
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(Запись, Значение);
	Возврат Запись.Закрыть();
	
КонецФункции

#КонецОбласти

#Область ФормированиеПечатныхФорм

// Возвращает заголовок документа для печатных форм.
//
// Параметры:
//  Шапка - Структура - реквизиты документа;
//  НазваниеДокумента - Строка - представление документа для печати;
//  ФорматДаты - строка - формат даты.
//
// Возвращаемое значение:
//  ЗаголовокДокумента - Строка.
//
Функция СформироватьЗаголовокДокумента(Шапка, НазваниеДокумента = "", ФорматДаты = "") Экспорт
	
	Если ПустаяСтрока(НазваниеДокумента)
		И Шапка.Свойство("Представление")
		И ЗначениеЗаполнено(Шапка.Представление) Тогда
		
		ПоложениеНомера = Найти(Шапка.Представление, Шапка.Номер);
		
		Если ПоложениеНомера > 0 Тогда
			НазваниеДокумента = СокрЛП(Лев(Шапка.Представление, ПоложениеНомера-1));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ФорматДаты) Тогда
		ФорматДаты = НСтр("ru = 'ДЛФ=D'");
	КонецЕсли;
	
	ЗаголовокДокумента = СтрШаблон(НСтр("ru = '%1 № %2 от %3 г.'"),
		НазваниеДокумента,
		ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Ложь, Истина),
		Формат(Шапка.Дата, ФорматДаты));
	
	Возврат ЗаголовокДокумента;
	
КонецФункции

// Устарела.Функция формирует сведения об указанном ЮрФизЛице. К сведениям относятся -
// наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо   - организация или физическое лицо, о котором собираются сведения.
//  ДатаПериода - дата, на которую выбираются сведения о ЮрФизЛице.
//  ДляФизЛицаТолькоИнициалы - Для физ. лица выводить только инициалы имени и отчества.
//  БанковскийСчет - Банковский счет, если счет не основной.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода, ДляФизЛицаТолькоИнициалы = Истина,
	Знач БанковскийСчет = Неопределено) Экспорт
	Возврат Неопределено;
КонецФункции

// Функция возвращает представление номенклатуры для печати.
//
// Параметры:
// 		НаименованиеНоменклатуры - Строка
// 		Характеристика - Строка
// 		Упаковка - Строка
// 		Серия - Строка
// 		Содержание - Строка
//
// Возвращаемое значение:
// 		Строка - Представление номенклатуры для печати.
//
Функция ПолучитьПредставлениеНоменклатурыДляПечати(
	НаименованиеНоменклатуры,
	Характеристика,
	Упаковка = Неопределено,
	Серия = Неопределено,
	Содержание = Неопределено) Экспорт
	
	ПредставлениеНоменклатуры = СокрЛП(НаименованиеНоменклатуры);
	
	Если ЗначениеЗаполнено(Содержание) Тогда
		
		ПредставлениеНоменклатуры = Содержание;
		
	ИначеЕсли (ЗначениеЗаполнено(Характеристика) И НЕ Характеристика = "<>")
		ИЛИ ЗначениеЗаполнено(Упаковка)
		ИЛИ ЗначениеЗаполнено(Серия) Тогда
		
		ТекстВСкобках = НСтр("ru = ''");
		
		Если ЗначениеЗаполнено(Характеристика) Тогда
			ТекстВСкобках = СтрШаблон(НСтр("ru = '%1, %2'"), ТекстВСкобках, Характеристика);
		КонецЕсли;
		Если ЗначениеЗаполнено(Упаковка) Тогда
			ТекстВСкобках = СтрШаблон(НСтр("ru = '%1, %2'"), ТекстВСкобках, Упаковка);
		КонецЕсли;
		Если ЗначениеЗаполнено(Серия) Тогда
			ТекстВСкобках = СтрШаблон(НСтр("ru = '%1, %2'"), ТекстВСкобках, Серия);
		КонецЕсли;
		ПредставлениеНоменклатуры = СтрШаблон(НСтр("ru = '%1 (%2)'"), ПредставлениеНоменклатуры, Сред(ТекстВСкобках, 3));
		
	КонецЕсли;
	
	Возврат ПредставлениеНоменклатуры;
	
КонецФункции

// Конструктор для параметра КоллекцияПечатныхФорм процедуры Печать.
//
// Параметры:
//  Идентификаторы - Строка, Массив - имена печатных форм.
//
// Возвращаемое значение:
//  ТаблицаЗначений - пустая коллекция печатных форм:
//   * ИмяМакета - Строка - идентификатор печатной формы;
//   * ИмяВРЕГ - Строка - идентификатор в верхнем регистре символов для быстрого поиска;
//   * СинонимМакета - Строка - представление печатной формы;
//   * ТабличныйДокумент - ТабличныйДокумент - печатная форма;
//   * Экземпляров - Число - количество копий, которое необходимо вывести на печать;
//   * Картинка - Картинка - (не используется);
//   * ПолныйПутьКМакету - Строка - используется для быстрого перехода к редактированию макета печатной формы;
//   * ИмяФайлаПечатнойФормы - Строка - имя файла;
//                           - Соответствие из КлючИЗначение - имена файлов для каждого объекта:
//                              ** Ключ - ЛюбаяСсылка - ссылка на объект печати;
//                              ** Значение - Строка - имя файла;
//   * ОфисныеДокументы - Соответствие из КлючИЗначение - коллекция печатных форм в формате офисных документов:
//                         ** Ключ - Строка - адрес во временном хранилище двоичных данных печатной формы;
//                         ** Значение - Строка - имя файла печатной формы.
////
Функция ПодготовитьКоллекциюПечатныхФорм(Знач Идентификаторы) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Для Каждого ИмяКолонки Из ИменаПолейКоллекцииПечатныхФорм() Цикл
		Результат.Колонки.Добавить(ИмяКолонки);
	КонецЦикла;
	
	Если ТипЗнч(Идентификаторы) = Тип("Строка") Тогда
		Идентификаторы = СтрРазделить(Идентификаторы, ",");
	КонецЕсли;
	
	Для Каждого Идентификатор Из Идентификаторы Цикл
		
		ПечатнаяФорма = Результат.Найти(Идентификатор, "ИмяМакета");
		Если ПечатнаяФорма = Неопределено Тогда
			
			ПечатнаяФорма = Результат.Добавить();
			ПечатнаяФорма.ИмяМакета = Идентификатор;
			ПечатнаяФорма.ИмяВРЕГ = ВРег(Идентификатор);
			ПечатнаяФорма.Экземпляров = 1;
			
		Иначе
			ПечатнаяФорма.Экземпляров = ПечатнаяФорма.Экземпляров + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Индексы.Добавить("ИмяВРЕГ");
	Возврат Результат;
	
КонецФункции

//  Формирует представление ФИО по исходным данным, либо по набору полей, когда
//  исходные данные не являются физическим лицом или строковым литералом.
//
// Параметры:
//  Объект - Строка, СправочникСсылка.ФизическиеЛица, ПроизвольныйТип - исходные данные.
//  Фамилия - Строка. 
//  Имя - Строка.
//  Отчество - Строка.
//
// Возвращаемое значение:
//  Результат - Строка
//
Функция ФамилияИнициалыФизЛица(Объект, Фамилия = " ", Имя = " ", Отчество = " ") Экспорт

	ТипОбъекта = ТипЗнч(Объект);
	
	Если ТипОбъекта = Тип("Строка") Тогда
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект), СтрШаблон(НСтр("ru = '%1'"), " "));
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ФизическиеЛица")
		ИЛИ ТипОбъекта = Тип("СправочникОбъект.ФизическиеЛица") Тогда
			ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект.Наименование),
			СтрШаблон(НСтр("ru = '%1'"), " "));
	Иначе
		
	// Используем возможно переданные отдельные строки.
		СокращениеОтчества = ?(Не ПустаяСтрока(Отчество), СтрШаблон( НСтр("ru = '%1.'"), Лев(Отчество, 1)), НСтр("ru = ''"));
		СокращениеИмениИОтчества = ?(Не ПустаяСтрока(Имя),
			СтрШаблон(" %1. %2", Лев(Имя, 1), СокращениеОтчества), НСтр("ru = ''"));
			
		Возврат ?(Не ПустаяСтрока(Фамилия),
			СтрШаблон( НСтр("ru = '%1 %2'"), Фамилия, СокращениеИмениИОтчества), НСтр("ru = ''"));
		
	КонецЕсли;
	
	КоличествоПодстрок	= ФИО.Количество();
	Фамилия				= ?(КоличествоПодстрок > 0, ФИО[0], "");
	Имя					= ?(КоличествоПодстрок > 1, ФИО[1], "");
	Отчество			= ?(КоличествоПодстрок > 2, ФИО[2], "");
	
	СокращениеОтчества = ?(Не ПустаяСтрока(Отчество), СтрШаблон( НСтр("ru = '%1.'"), Лев(Отчество, 1)), НСтр("ru = ''"));
	СокращениеИмениИОтчества = ?(Не ПустаяСтрока(Имя),
		СтрШаблон(" %1. %2", Лев(Имя, 1), СокращениеОтчества), НСтр("ru = ''"));
		
	Возврат ?(Не ПустаяСтрока(Фамилия),
		СтрШаблон( НСтр("ru = '%1 %2'"), Фамилия, СокращениеИмениИОтчества), НСтр("ru = ''"));

КонецФункции

#КонецОбласти

#Область Запреты_продаж_ПрограммныйИнтерфейс

// Возвращает таблицу значений с запретами продаж с отбором по организации на дату 
//
// Параметры:
//  Организация - СправочникСсылка.Организации
//  ДатаПроверки - ДатаВремя
//
// Возвращаемое значение:
//  Результат - Выборка
//
Функция АктуальныеЗапретыПродаж(Организация, ДатаПроверки) Экспорт
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(ДатаПроверки) Тогда
	
		ТекстЗапросаЗапретов = ТекстЗапросаДействующихЗапретовПродаж();
		Запрос = Новый Запрос(ТекстЗапросаЗапретов);
		Запрос.УстановитьПараметр("ТекущаяДата", ДатаПроверки);
		Запрос.УстановитьПараметр("Организация", Организация);
		Результат = Запрос.Выполнить().Выбрать();
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак использования запретов продаж по данным сервера лояльности
//
// Возвращаемое значение:
//  Результат - Булево
//
Функция ИспользоватьОграниченияПродажРМК() Экспорт
	
	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакИспользованияОграниченийПродажРМК(Результат);
	Возврат Результат;
	
КонецФункции

// Возвращает признак использования запретов продаж, поставляемых конфигурацией
//
// Возвращаемое значение:
//  Результат - Булево
//
Функция ИспользоватьПоставляемыеОграниченияПродаж() Экспорт
	
	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакИспользованияПоставляемыхОграниченийПродаж(Результат);
	Возврат Результат;
	
КонецФункции

// Проверяет наличие актуальных запретов продажи по данным кэша запретов.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - номенклатура, по виду и особенности учета которой
//		проверяется наличие запрета продаж на текущий момент.
//  КэшЗапретовПродаж - ДанныеФормыКоллекция - перечень действующих запретов продаж на текущий момент.
//
// Возвращаемое значение:
//  Результат - Структура.
//
Функция НаличиеЗапретовПродажи(Номенклатура, КэшЗапретовПродаж) Экспорт
	
	Результат = Новый Структура;
	ТаблицаТовары = Новый ТаблицаЗначений;
	МассивТоваров = Новый Массив;
	МассивТоваров.Добавить(Номенклатура);
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьТаблицуТовары(МассивТоваров, ТаблицаТовары);
	Если ТаблицаТовары.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВидНоменклатуры = ТаблицаТовары[0].ВидНоменклатуры;
	ОсобенностьУчетаНоменклатуры = ТаблицаТовары[0].ОсобенностьУчета;
	
	Возврат ОбщегоНазначенияРМККлиентСервер.НаличиеЗапретовПродажи(ВидНоменклатуры,
		ОсобенностьУчетаНоменклатуры,
		КэшЗапретовПродаж);
	
КонецФункции

// Проверяет наличие разрешения редактирования запретов продаж по данным настроек РМК
//
// Возвращаемое значение:
//  Результат - Булево
//
Функция РазрешеноРедактироватьЗапретыПродаж() Экспорт

	Результат = Истина;
	
	ТекущиеНастройкиРабочегоМеста = ПараметрыСеанса.РабочееМестоКлиента;
	
	Если ЗначениеЗаполнено(ТекущиеНастройкиРабочегоМеста) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	НастройкиРабочегоМестаКассира.ЗапрещеноРедактированиеУсловийОграниченийПродаж КАК ЗапрещеноРедактированиеУсловийОграниченийПродаж
		|ИЗ
		|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
		|ГДЕ
		|	НастройкиРабочегоМестаКассира.РабочееМесто = &РабочееМесто");
		Запрос.УстановитьПараметр("РабочееМесто", ТекущиеНастройкиРабочегоМеста);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Результат = НЕ Выборка.ЗапрещеноРедактированиеУсловийОграниченийПродаж;
		КонецЕсли;
		
	КонецЕсли;

	ИспользоватьПоставляемыеОграничения = ИспользоватьПоставляемыеОграниченияПродаж();
	Результат = Результат И НЕ ИспользоватьПоставляемыеОграничения;
	
	Возврат Результат;

КонецФункции

// Возвращает значения адреса и имени пользователя сервера лояльности
//
// Параметры:
//  НастройкаРабочегоМестаКассира - СправочникСсылка.НастройкиРМК - исходные данные для получения значений
//
// Возвращаемое значение:
//  Результат - Структура:
//		*АдресСервера - Строка
//		*Логин - Строка
//		*Пароль - Строка
//
Функция ЗначенияПараметровСервераЛояльности(НастройкаРабочегоМестаКассира = Неопределено) Экспорт

	Результат = Новый Структура();
	Результат.Вставить("АдресСервера");
	Результат.Вставить("Логин");
	Результат.Вставить("Пароль");

	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерверЛояльностиПолучательДанных") Тогда
		
		Запрос = Новый Запрос;
		
		Если НЕ ЗначениеЗаполнено(НастройкаРабочегоМестаКассира) Тогда
			
			Запрос.Текст = "ВЫБРАТЬ
			|	НастройкиРабочегоМестаКассира.Ссылка КАК НастройкаРабочегоМестаКассира
			|ИЗ
			|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
			|ГДЕ
			|	НастройкиРабочегоМестаКассира.РабочееМесто = &ТекущееРабочееМесто
			|	И НЕ НастройкиРабочегоМестаКассира.ПометкаУдаления";
			Запрос.УстановитьПараметр("ТекущееРабочееМесто", ПараметрыСеанса.РабочееМестоКлиента);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				НастройкаРабочегоМестаКассира = Выборка.НастройкаРабочегоМестаКассира;
			КонецЕсли;
			
		КонецЕсли;
			
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаРабочегоМестаКассира,
			"АдресСервераЛояльности,ПользовательСервераЛояльности");
		Результат.АдресСервера = Реквизиты.АдресСервераЛояльности;
		Результат.Логин = Реквизиты.ПользовательСервераЛояльности;
		
		Результат.Пароль = ПарольСервераЛояльности(НастройкаРабочегоМестаКассира);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак использования запретов продаж.
//
// Возвращаемое значение:
//  Булево - признак использования запретов продаж.
//
Функция ИспользоватьЗапретыПродаж() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьЗапретПродаж");
	
КонецФункции

// Обновляет регистр сведений запретов продаж по поставляемым (встроенным) конфигурацией ограничениям 
//
// Параметры:
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектРМК- торговый объект для отбора перечня ограничений.
//  Результат - Структура:
//  	* КомментарийОбновленияЗапретов - Строка - при наличии ошибок обновления данных содержит пояснение.
//
Процедура ОбновитьОграниченияПродажИзПоставляемыхДанных(ТорговыйОбъект, Результат) Экспорт
	ОбщегоНазначенияРМКПереопределяемый.ОбновитьОграниченияПродажИзПоставляемыхДанных(ТорговыйОбъект, Результат);
КонецПроцедуры

// Возвращает количество записей запретов продаж из регистра "УсловияЗапретаПродажРМК".
//
// Возвращаемое значение:
//  Число - количество записей в регистре.
//
Функция КоличествоЗаписейЗапретовПродаж() Экспорт
	
	Результат = 0;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоЗаписей
	|ИЗ
	|	РегистрСведений.УсловияЗапретаПродажРМК КАК УсловияЗапретаПродаж");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.КоличествоЗаписей;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПомощникНастройкиКассовогоМеста

// Возвращает текст для отчета о подключенном оборудовании
//
// Возвращаемое значение:
//  Результат - Строка
//
Функция ТекстЗапросаДляОтчетаОПодключенномОборудовании() Экспорт
	
	Возврат "ВЫБРАТЬ
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	КассыККМ.Наименование КАК НаименованиеКасса,
	|	КассыККМ.Владелец КАК Организация,
	|	КассыККМ.ИспользоватьБезПодключенияОборудования КАК НаличныеПОСкрыть,
	|	КассыККМ.ПодключаемоеОборудование КАК НаличныеПОСсылка
	|ПОМЕСТИТЬ ТаблицаНаличные
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.РабочееМесто = &РабочееМесто
	|	И НЕ КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ККМOffline)
	|	И КассыККМ.Владелец = &Организация
	|	И НЕ КассыККМ.ПодключаемоеОборудование = ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)
	|	И НЕ КассыККМ.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭквайринговыеТерминалы.Организация КАК Организация,
	|	МИНИМУМ(ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования) КАК ИспользоватьБезПодключенияОборудования
	|ПОМЕСТИТЬ ТаблицаЭТ
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.ТорговыйОбъект = &ТорговыйОбъект
	|	И &ИспользоватьОплатуПлатежнымиКартами
	|	И ЭквайринговыеТерминалы.Организация = &Организация
	|	И НЕ ЭквайринговыеТерминалы.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭквайринговыеТерминалы.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНаличные.КассаККМ КАК КассаККМ,
	|	ТаблицаНаличные.НаименованиеКасса КАК НаименованиеКасса,
	|	ТаблицаНаличные.Организация КАК Организация,
	|	ТаблицаНаличные.НаличныеПОСкрыть КАК НаличныеПОСкрыть,
	|	ТаблицаНаличные.НаличныеПОСсылка КАК НаличныеПОСсылка,
	|	ВЫБОР
	|		КОГДА ТаблицаЭТ.Организация ЕСТЬ NULL
	|			ТОГДА """"
	|		ИНАЧЕ ""V""
	|	КОНЕЦ КАК ОплатаКартой,
	|	ЕСТЬNULL(ТаблицаЭТ.ИспользоватьБезПодключенияОборудования, ИСТИНА) КАК ОплатаКартойПОСкрыть
	|ИЗ
	|	ТаблицаНаличные КАК ТаблицаНаличные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЭТ КАК ТаблицаЭТ
	|		ПО ТаблицаНаличные.Организация = ТаблицаЭТ.Организация";
	
КонецФункции

// Возвращает текст для динамического списка КассыККМ помощника настройки кассового места
//
// Возвращаемое значение:
//  Результат - Строка
//
Функция ТекстЗапросаКассККМСОтборомПоВладельцуИСтруктурнойЕдинице() Экспорт

	Возврат "ВЫБРАТЬ
	|	КассыККМ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.Владелец = &Владелец
	|	И КассыККМ.ТорговыйОбъект = &ТорговыйОбъект
	|	И НЕ КассыККМ.ПометкаУдаления";
	
КонецФункции

// Возвращает текст запроса для данных доступных эквайринговых терминалов.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаПодключенныхЭквайринговыхТерминалов() Экспорт

	Возврат "ВЫБРАТЬ
	|	СправочникЭквайринговыеТерминалы.Ссылка КАК Ссылка,
	|	СправочникЭквайринговыеТерминалы.ПометкаУдаления КАК ПометкаУдаления,
	|	СправочникЭквайринговыеТерминалы.Код КАК Код,
	|	СправочникЭквайринговыеТерминалы.Наименование КАК Наименование,
	|	СправочникЭквайринговыеТерминалы.Организация КАК Организация,
	|	СправочникЭквайринговыеТерминалы.Касса КАК Касса,
	|	СправочникЭквайринговыеТерминалы.ТорговыйОбъект КАК ТорговыйОбъект,
	|	СправочникЭквайринговыеТерминалы.ПодключаемоеОборудование КАК ПодключаемоеОборудование,
	|	НЕ СправочникЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования КАК ОборудованиеИспользуется,
	|	СправочникЭквайринговыеТерминалы.Предопределенный КАК Предопределенный,
	|	СправочникЭквайринговыеТерминалы.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	|	1 КАК ПолеУпорядочивания,
	|	СправочникЭквайринговыеТерминалы.Недействителен КАК Недействителен,
	|	""КассаККМ"" КАК ТипКассы
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК СправочникЭквайринговыеТерминалы
	|ГДЕ
	|	НЕ СправочникЭквайринговыеТерминалы.ПометкаУдаления";
	
КонецФункции

// Возвращает текст запроса для подключенных касс ккм.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаПеречняПодключенныхКассККМ() Экспорт

	Возврат "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КассыККМ.ПодключаемоеОборудование КАК ПодключаемоеОборудование,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ФискальныйРегистратор) КАК ТипОборудования,
	|	КассыККМ.Владелец КАК Организация,
	|	КассыККМ.ПодключаемоеОборудование.СерийныйНомер КАК СерийныйНомер
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ФискальныйРегистратор)
	|	И НЕ КассыККМ.ИспользоватьБезПодключенияОборудования
	|	И НЕ КассыККМ.ПометкаУдаления
	|	И НЕ КассыККМ.ПодключаемоеОборудование = ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)
	|	И КассыККМ.РабочееМесто = &РабочееМесто
	|	И КассыККМ.ПодключаемоеОборудование.РабочееМесто = &РабочееМесто
	|	И КассыККМ.ПодключаемоеОборудование.УстройствоИспользуется
	|	И КассыККМ.Владелец В(&Организации)
	|	И КассыККМ.ТорговыйОбъект = &ТорговыйОбъект";
	
КонецФункции

// Возвращает текст запроса эквайринговых терминалов.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаПеречняПодключенныхЭквайринговыхТерминалов() Экспорт

	Возврат "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал) КАК ТипОборудования,
	|	ЭквайринговыеТерминалы.Организация,
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование.СерийныйНомер КАК СерийныйНомер
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	НЕ ЭквайринговыеТерминалы.ПометкаУдаления
	|	И ЭквайринговыеТерминалы.Касса ССЫЛКА Справочник.КассыККМ
	|	И ЭквайринговыеТерминалы.ТорговыйОбъект = &ТорговыйОбъект
	|	И НЕ ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования
	|	И НЕ ЭквайринговыеТерминалы.ПодключаемоеОборудование = ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)";
	
КонецФункции

// Возвращает текст запроса для подключенных эквайринговых терминалов с незаполненными тарифами на обслуживание.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаЭквайринговыхТерминаловСПустымиТарифамиНаОбслуживание() Экспорт

	Возврат "ВЫБРАТЬ
		|	ЭквайринговыеТерминалы.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втТерминалы
		|ИЗ
		|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
		|ГДЕ
		|	НЕ ЭквайринговыеТерминалы.ПометкаУдаления
		|	И ЭквайринговыеТерминалы.Организация = &Организация
		|	И ЭквайринговыеТерминалы.ТорговыйОбъект = &ТорговыйОбъект
		|	И ЭквайринговыеТерминалы.Касса = &Касса
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭквайринговыеТерминалы.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.НомерСтроки) КАК КоличествоЗаписейТарифов,
		|	ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втТарифыОбслуживанияТерминалов
		|ИЗ
		|	втТерминалы КАК втТерминалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭквайринговыеТерминалы.ТарифыЗаРасчетноеОбслуживание КАК ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание
		|		ПО втТерминалы.Ссылка = ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТерминалы.Ссылка КАК Ссылка,
		|	втТарифыОбслуживанияТерминалов.КоличествоЗаписейТарифов КАК КоличествоЗаписейТарифов
		|ИЗ
		|	втТерминалы КАК втТерминалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ втТарифыОбслуживанияТерминалов КАК втТарифыОбслуживанияТерминалов
		|		ПО втТерминалы.Ссылка = втТарифыОбслуживанияТерминалов.Ссылка
		|ГДЕ
		|	ЕСТЬNULL(втТарифыОбслуживанияТерминалов.КоличествоЗаписейТарифов, 0) = 0";
	
КонецФункции

// Возвращает текст запроса для отображения результатов настройки ККМ.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаДляОтображенияРезультатовНастройкиККМ() Экспорт

	Возврат "ВЫБРАТЬ
	|	Организации.Организация КАК Организация
	|ПОМЕСТИТЬ ТаблицаОрганизации
	|ИЗ
	|	&Организации КАК Организации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	КассыККМ.Наименование КАК Наименование,
	|	КассыККМ.РегистрационныйНомер КАК РегистрационныйНомер,
	|	КассыККМ.ПодключаемоеОборудование КАК ПодключаемоеОборудование,
	|	КассыККМ.ТипКассы КАК ТипКассы,
	|	КассыККМ.Владелец КАК Организация
	|ПОМЕСТИТЬ ТаблицаКассККМ
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.ТорговыйОбъект = &ТорговыйОбъект
	|	И КассыККМ.РабочееМесто = &РабочееМесто
	|	И КассыККМ.Владелец В
	|			(ВЫБРАТЬ
	|				ТаблицаОрганизации.Организация КАК Организация
	|			ИЗ
	|				ТаблицаОрганизации КАК ТаблицаОрганизации)
	|	И КассыККМ.ТипКассы В(&ТипыКассы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОрганизации.Организация КАК Организация,
	|	ЕСТЬNULL(ТаблицаКассККМ.КассаККМ, ЗНАЧЕНИЕ(Справочник.КассыККМ.ПустаяСсылка)) КАК КассаККМ,
	|	ЕСТЬNULL(ТаблицаКассККМ.Наименование, """") КАК Наименование,
	|	ЕСТЬNULL(ТаблицаКассККМ.РегистрационныйНомер, """") КАК РегистрационныйНомер,
	|	ЕСТЬNULL(ТаблицаКассККМ.ПодключаемоеОборудование, ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)) КАК ПодключаемоеОборудование,
	|	ЕСТЬNULL(ТаблицаКассККМ.ТипКассы, ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ПустаяСсылка)) КАК ТипКассы
	|ИЗ
	|	ТаблицаОрганизации КАК ТаблицаОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКассККМ КАК ТаблицаКассККМ
	|		ПО ТаблицаОрганизации.Организация = ТаблицаКассККМ.Организация";
	
КонецФункции

// Возвращает текст запроса для данных доступных эквайринговых терминалов.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаОрганизацийИПодразделений() Экспорт

	Возврат "ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТорговыеОбъекты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ТорговыеОбъекты КАК ТорговыеОбъекты
		|ГДЕ
		|	НЕ ТорговыеОбъекты.ПометкаУдаления";
	
КонецФункции

// Возвращает текст запроса признаков использования оплат картами и платежными системами
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаИспользованияВидовОплатПомощникаНастройкиКассовогоМеста() Экспорт
	
	Возврат "ВЫБРАТЬ
		|	ИспользоватьОплатуПлатежнымиКартами.Значение КАК ИспользоватьОплатуПлатежнымиКартами,
		|	ИспользоватьОплатуПлатежнымиСистемами.Значение КАК ИспользоватьОплатуПлатежнымиСистемами
		|ИЗ
		|	Константа.ИспользоватьОплатуПлатежнымиКартами КАК ИспользоватьОплатуПлатежнымиКартами,
		|	Константа.ИспользоватьОплатуПлатежнымиСистемами КАК ИспользоватьОплатуПлатежнымиСистемами";
	
КонецФункции

// Возвращает перечень доступных эквайринговых терминалов, для которых указаны кассы ККМ
// на этапе настройки РМК через интерфейс помощника настройки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложение - форма настройки помощника рабочего места кассира
//
// Возвращаемое значение:
//  Результат - Массив
//
Функция ЭквайринговыеТерминалыСККМ(Форма) Экспорт

	Результат = Новый Массив;
	ОбщегоНазначенияРМКПереопределяемый.ЭквайринговыеТерминалыСККМ(Форма, Результат);
	Возврат Результат;

КонецФункции

// Подготавливает данные для создания эквайрингового терминала через интерфейс помощника
// настройки РМК.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложение - форма настройки помощника рабочего места кассира
//
Процедура ЗаполнитьТаблицуСозданияЭквайринговыхТерминалов(Форма) Экспорт
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьТаблицуСозданияЭквайринговыхТерминалов(Форма);
КонецПроцедуры

// Выполняет конвертацию настроек РМК в настройки нового РМК
//
// Параметры:
//  ЭтотОбъект - ФормаКлиентскогоПриложение - общая форма настройки рабочего места кассира
//
Процедура КонвертироватьНастройкиСтарогоРМК(ЭтотОбъект) Экспорт
	ОбщегоНазначенияРМКПереопределяемый.КонвертироватьНастройкиСтарогоРМК(ЭтотОбъект);
КонецПроцедуры


#КонецОбласти

#Область Переопределение_аутентификации_пользователей_по_кодам_доступа_ПрограммныйИнтерфейс

// Адрес электронной почты кассира из карты лояльности, при ее наличии 
//
// Параметры:
//  Кассир - ОпределяемыйТип.КассирРМК
//
// Возвращаемое значение:
//  Результат - Строка
//
Функция АдресЭлектроннойПочтыКассира(Кассир) Экспорт

	Результат = НСтр("ru = ''");
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьАдресЭлектроннойПочтыКассира(Кассир, Результат);
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область Локализация

// Настройка локализации картинок на форме.
// Установка картинки для команд формы "СкидкаТекущийТоварСумма", "СкидкаНаЧекСуммой".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ЛокализоватьКартинки(Форма) Экспорт
	
	ПараметрыКартинок = Новый Структура;
	ПараметрыКартинок.Вставить("СкидкаНаЧекСуммой", БиблиотекаКартинок.RUB);
	ПараметрыКартинок.Вставить("СкидкаТекущийТоварСумма", БиблиотекаКартинок.RUB);
	ПараметрыКартинок.Вставить("ПодготовитьДанныеВыдачиНаличных", БиблиотекаКартинок.RUB);
	ПараметрыКартинок.Вставить("ДекорацияЛогоВнесение", БиблиотекаКартинок.РМКВнесение);
	ПараметрыКартинок.Вставить("ДекорацияЛогоВыемка", БиблиотекаКартинок.РМКВыемка);
	
	ОбщегоНазначенияРМКПереопределяемый.ЛокализоватьКартинки(ПараметрыКартинок);
	
	Форма.Элементы.СкидкаНаЧекСуммой.Картинка = ПараметрыКартинок.СкидкаНаЧекСуммой;
	Форма.Элементы.СкидкаТекущийТоварСумма.Картинка = ПараметрыКартинок.СкидкаТекущийТоварСумма;
	Форма.Команды.ПодготовитьДанныеВыдачиНаличных.Картинка = ПараметрыКартинок.ПодготовитьДанныеВыдачиНаличных;
	Форма.Элементы.ДекорацияЛогоВнесение.Картинка = ПараметрыКартинок.ДекорацияЛогоВнесение;
	Форма.Элементы.ДекорацияЛогоВыемка.Картинка = ПараметрыКартинок.ДекорацияЛогоВыемка;
	
КонецПроцедуры

// Возвращает представление валюты.
//
// Возвращаемое значение:
//  Строка - представление валюты.
//
Функция ПредставлениеВалюты() Экспорт
	
	ПредставлениеВалюты = НСтр("ru = 'руб.'");
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПредставлениеВалюты(ПредставлениеВалюты);
	
	Возврат ПредставлениеВалюты;
	
КонецФункции

// Возвращает структуру параметров национальной валюты.
//
// Возвращаемое значение:
//  ПараметрыВалюты - Структура - параметры национальной валюты.
//    Код - Строка - код валюты.
//    Наименование - Строка - наименование валюты.
//
Функция ПараметрыНациональнойВалюты() Экспорт
	
	ПараметрыВалюты = Новый Структура;
	ПараметрыВалюты.Вставить("Код", НСтр("ru = '643'"));
	ПараметрыВалюты.Вставить("Наименование", НСтр("ru = 'RUB'"));
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПараметрыНациональнойВалюты(ПараметрыВалюты);
	
	Возврат ПараметрыВалюты;
	
КонецФункции

#КонецОбласти

#Область Печать_заявления_на_возврат_ПрограммныйИнтерфейс

// Дополняет исходные данные для заявления на возврат 
//
// Параметры:
//  ДанныеЗаявленияНаВозврат - Структура - см. ОбщегоНазначенияРМККлиент.СтруктураЗаявленияНаВозврат()
//
Процедура ДополнитьИсходныеДанныеЗаявленияНаВозврат(ДанныеЗаявленияНаВозврат) Экспорт
	
	Если ЗначениеЗаполнено(ДанныеЗаявленияНаВозврат) Тогда
		ОбщегоНазначенияРМКПереопределяемый.ДополнитьИсходныеДанныеЗаявленияНаВозврат(ДанныеЗаявленияНаВозврат);
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает на печать бланк заявления на возврат товаров
//
// Параметры:
//  ДанныеЗаявленияНаВозврат - Структура:
//		*Товары - Массив,
//		*ФИОПокупателя - Строка,
//		*ДатаРождения - Дата,
//		*УдостоверениеЛичности - Строка,
//		*СуммаДокумента - Число,
//		*ЧекПродажи - ОпределяемыйТип.ЧекККМРМК,
//		*Магазин - ОпределяемыйТип.ТорговыйОбъектРМК,
//		*ЧекНомер - Число,
//		*ЧекДата - Дата,
//		*Кому - Строка,
//		*ОтКого - Строка,
//		*Дата - Дата.
//
// Возвращаемое значение:
//  БланкЗаявления - ТабличныйДокумент
//
Функция МакетЗаявленияНаВозврат(ДанныеЗаявленияНаВозврат) Экспорт
	
	БланкЗаявления = Новый ТабличныйДокумент;

	Если ДанныеЗаявленияНаВозврат.Свойство("ДатаРождения")
		И ЗначениеЗаполнено(ДанныеЗаявленияНаВозврат.ДатаРождения) Тогда
		
		ДатаРожденияКлиента = ДанныеЗаявленияНаВозврат.ДатаРождения;
		ДанныеЗаявленияНаВозврат.ДатаРождения = Формат(ДатаРожденияКлиента, "ДЛФ=DD");
		
	КонецЕсли;
	
	Если ДанныеЗаявленияНаВозврат.Свойство("ЧекДата")
		И ЗначениеЗаполнено(ДанныеЗаявленияНаВозврат.ЧекДата) Тогда
		
		ДатаПробитияЧекаПродажи = ДанныеЗаявленияНаВозврат.ЧекДата;
		ДанныеЗаявленияНаВозврат.ЧекДата = Формат(ДатаПробитияЧекаПродажи, "ДЛФ=D");
		
	КонецЕсли;
	
	Если ДанныеЗаявленияНаВозврат.Свойство("ОтКого")
		И ЗначениеЗаполнено(ДанныеЗаявленияНаВозврат.ОтКого) Тогда
		
		ФИОЗаявителя = ДанныеЗаявленияНаВозврат.ОтКого;
		ФИОЗаявителяРодительныйПадеж = СклонениеФИОВУказанномПадеже(ФИОЗаявителя, 2);
		ДанныеЗаявленияНаВозврат.ОтКого = СтрШаблон("от %1", ФИОЗаявителяРодительныйПадеж);
		
	КонецЕсли;
	
	Если ДанныеЗаявленияНаВозврат.Свойство("ОтКого")
		И ЗначениеЗаполнено(ДанныеЗаявленияНаВозврат.ОтКого) Тогда
		
		КемКупленТовар = ДанныеЗаявленияНаВозврат.ФИОПокупателя;
		КемКупленТоварТворительныйПадеж = СклонениеФИОВУказанномПадеже(КемКупленТовар, 5);
		ДанныеЗаявленияНаВозврат.ФИОПокупателя = КемКупленТоварТворительныйПадеж;
		
	КонецЕсли;
	
	Макет = ПолучитьОбщийМакет("ПФ_MXL_ЗаявлениеНаВозвратРМК");
	
	ШапкаМакета			= Макет.ПолучитьОбласть("Шапка");
	ПараметрыШапки 		= ШапкаМакета.Параметры;
	ШапкаТаблицы		= Макет.ПолучитьОбласть("ШапкаТаблицы");
	СтрокаТаблицыМакета	= Макет.ПолучитьОбласть("Товар");
	ПодвалМакета		= Макет.ПолучитьОбласть("Подвал");
	
	ПараметрыШапки.Заполнить(ДанныеЗаявленияНаВозврат);
	
	// постобработка шапки
	ЭтоВозвратНесколькихТоваров =
		ДанныеЗаявленияНаВозврат.Свойство("Товары") И ДанныеЗаявленияНаВозврат.Товары.Количество() > 1;
	ПараметрыШапки.О1 = ?(ЭтоВозвратНесколькихТоваров,
		НСтр("ru = 'и'"), НСтр("ru = ''"));
	ПараметрыШапки.О2 = ?(ЭтоВозвратНесколькихТоваров,
		НСтр("ru = 'ы'"), НСтр("ru = ''"));
	ПараметрыШапки.О3 = ?(ЭтоВозвратНесколькихТоваров,
		НСтр("ru = 'ы'"), НСтр("ru = ''"));
		
	ДлинноеПодчеркивание = "______________________________________________________";
	
	СреднееПодчеркивание = "________________";
	
	КороткоеПодчеркивание = "________";
	
	Если НЕ ЗначениеЗаполнено(ПараметрыШапки.ОтКого)
		ИЛИ ПараметрыШапки.ОтКого = "от " Тогда
			ПараметрыШапки.ОтКого = СтрШаблон("от %1", ДлинноеПодчеркивание);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ПараметрыШапки.ФИОПокупателя) Тогда
		ПараметрыШапки.ФИОПокупателя = ДлинноеПодчеркивание;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыШапки.ДатаРождения) Тогда
		ПараметрыШапки.ДатаРождения = СреднееПодчеркивание;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыШапки.УдостоверениеЛичности) Тогда
		ПараметрыШапки.УдостоверениеЛичности = СтрШаблон("%1%1%1", ДлинноеПодчеркивание);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыШапки.ЧекНомер) Тогда
		ПараметрыШапки.ЧекНомер = КороткоеПодчеркивание;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыШапки.ЧекДата) Тогда
		ПараметрыШапки.ЧекДата = СреднееПодчеркивание;
	КонецЕсли;
		
	БланкЗаявления.Вывести(ШапкаМакета);
	БланкЗаявления.Вывести(ШапкаТаблицы);
	
	Для Каждого СтрокаТоваров Из ДанныеЗаявленияНаВозврат.Товары Цикл
	
		СтрокаТаблицыМакета.Параметры.Заполнить(СтрокаТоваров);
		БланкЗаявления.Вывести(СтрокаТаблицыМакета);
	
	КонецЦикла;
	
	ПодвалМакета.Параметры.Заполнить(ДанныеЗаявленияНаВозврат);
	ПодвалМакета.Параметры.Дата = Формат(ТекущаяДатаСеанса(), "ДЛФ = DD");
	БланкЗаявления.Вывести(ПодвалМакета);
	
	БланкЗаявления.АвтоМасштаб = Истина;

	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьЗаявлениеНаВозврат(БланкЗаявления, ДанныеЗаявленияНаВозврат);
	
	Если ТипЗнч(БланкЗаявления) <> Тип("ТабличныйДокумент") Тогда
		БланкЗаявления = Новый ТабличныйДокумент;
	КонецЕсли;
	
	Возврат БланкЗаявления;
	
КонецФункции

#КонецОбласти

#Область Переопределение_обработчиков_форм_ПрограммныйИнтерфейс

// Переопределяет поведение формы при создании на сервере
//
// Параметры:
//  Форма - - ФормаКлиентскогоПриложения - форма, поведение которой переопределяется.
//  Отказ - Булево.
//  СтандартнаяОбработка - Булево.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	ОбщегоНазначенияРМКПереопределяемый.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ПараметрыПрограммы

// Возвращает признак использования замены товаров.
//
// Возвращаемое значение:
//  Результат - Булево - Истина, если используется замена товаров.
//
Функция ИспользоватьЗаменуТоваров() Экспорт
	
	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакИспользоватьЗаменуТоваров(Результат);
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак использования сервера лояльности в качестве получателя данных.
//
// Возвращаемое значение:
//  Результат - Булево - Истина, если используется сервер лояльности.
//
Функция ИспользоватьСерверЛояльностиПолучательДанных() Экспорт
	
	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакИспользоватьСерверЛояльностиПолучательДанных(Результат);
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак использования оплаты сертификатами НСПК.
//
// Возвращаемое значение:
//  Результат - Булево - Истина, если используется оплата сертификатами НСПК.
//
Функция ИспользоватьОплатуСертификатамиНСПК() Экспорт
	
	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакИспользоватьОплатуСертификатамиНСПК(Результат);
	
	Возврат Результат;
	
КонецФункции

// Заполняет признаки работы с картами лояльности на форме РМК.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ЗаполнитьПризнакиРаботыСКартамиЛояльности(Форма) Экспорт
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакиРаботыСКартамиЛояльности(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область Подключаемое_оборудование_ПрограммныйИнтерфейс

// Заполняет параметры по исходным данным 
//
// Параметры:
//	ОбщиеПараметры - Структура -
//		см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека().
//  ПараметрыПакетнойФискализации - Структура - 
//		см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПакетнойОперацииВОчередиЧеков().
//  ДанныеЗаполнения - Структура - Исходные данные:
//		* ИдентификаторЭТ - СправочникСсылка.ПодключаемоеОборудование.
//		* СуммаОплатыКартой - Число.
//		* ВидОплаты - ОпределяемыйТип.ВидОплатыРМК.
//		* ПроцентКомиссии - Число.
//
Процедура ЗаполнитьДанныеДляПакетнойФискализации(ОбщиеПараметры,
	ПараметрыПакетнойФискализации, ДанныеЗаполнения) Экспорт
		ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьДанныеДляПакетнойФискализации(ОбщиеПараметры,
			ПараметрыПакетнойФискализации, ДанныеЗаполнения);
КонецПроцедуры

// Возвращает признак использования общего QR - кода для чека ККТ и чека ЕГАИС
//
// Возвращаемое значение:
//  Результат - Булево
//
Функция ИспользоватьОбщийКодДляЧекаККТИЕГАИС()Экспорт

	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакПечатиОбщегоКодаДляЧекаККТИЕГАИС(Результат);
	Возврат Результат;
	
КонецФункции

// Возвращает признак использования общего QR - кода для чека ККТ и чека ЕГАИС
 //
 // Возвращаемое значение:
 //  Результат - Булево
 //
Функция ФормироватьИнтегрированныйСлипЧек() Экспорт

	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакФормированияКороткогоСлипЧека(Результат);
	Возврат Результат;
	
КонецФункции

// Возвращает признак поддержки использования промокодов при локальном расчете скидок
 //
 // Возвращаемое значение: -
 //  Результат - Булево
 //
Функция ЛокальныйРасчетСкидокПоддерживаетПромокоды() Экспорт

	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ЛокальныйРасчетСкидокПоддерживаетПромокоды(Результат);
	Возврат Результат;
	
КонецФункции

// Перезаполняет и сохраняет документ выдачи наличных как документ возврата.
// Актуально для случаев, когда в рамках пакетной фискализации продажи с выдачей наличных
// возникла ошибка фискализации выдачи, но ранее успешно прошла фискализация продажи.
// В момент отмены фискализации автоматически отменяется 
// фискализация чека продажи, ее нужно отразить возвратом в документах РМК,при этом 
// в РС "Фискальные операции" под регистратором выдачи наличных появится запись фискализации возврата.
//
// Параметры:
//  СсылкаНаЧекВыдачиНаличных - ОпределяемыйТип.ЧекККМРМК - ссылка на изменяемый документ
//  ЧекПродажиПриВыдачеНаличных - ОпределяемыйТип.ЧекККМРМК - исходные данные для перезаполнения.
//  НомерЧекаККМ - Число - номер чека ККМ для постобработки.
//  НомерСменыККМ - Число - номер смены ККМ для постобработки.
//  ПараметрыЭквайринговойОперации - Структура:
//   *ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование
//   *НомерЧекаЭТ - Строка
//   *СсылочныйНомер - Строка
//   *НомерКарты - Строка
//
Процедура ЗаменитьЧекВыдачиНаЧекВозврата(СсылкаНаЧекВыдачиНаличных,ЧекПродажиПриВыдачеНаличных,
	НомерЧекаККМ, НомерСменыККМ, ПараметрыЭквайринговойОперации) Экспорт
	ОбщегоНазначенияРМКПереопределяемый.ЗаменитьЧекВыдачиНаЧекВозврата(СсылкаНаЧекВыдачиНаличных,ЧекПродажиПриВыдачеНаличных,
		НомерЧекаККМ, НомерСменыККМ, ПараметрыЭквайринговойОперации);
КонецПроцедуры

// Дополняет чек продажи данными об оплате картой 
// Актуально для пакетной фискализации, в случае успешной фискализации чека продажи
//
// Параметры:
//  ЧекПродажи - ДокументСсылка.ЧекККМ - пояснение
//  ДанныеДляЗаполнения - Структура -
//     См. МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании()
//  ДополнительныеДанные - Структура -
//     См. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПакетнойОперацииВОчередиЧеков()
//
Процедура ЗаполнитьОплатуКартойДляПакетнойФискализации(ЧекПродажи, ДанныеДляЗаполнения, ДополнительныеДанные) Экспорт
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьОплатуКартойДляПакетнойФискализации(ЧекПродажи, ДанныеДляЗаполнения,
		ДополнительныеДанные);
КонецПроцедуры

#КонецОбласти

#Область ПлиточныйИнтерфейсПодбора_ПрограммныйИнтерфейс

// Дополняет данные о цене, особенности учета, виде номенклатуры и остатке
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения.
//
Процедура ДополнитьОпорныеДанныеПанелиДляПостроенияПлиточногоИнтерфейса(Форма) Экспорт
	ОбщегоНазначенияРМКПереопределяемый.ДополнитьОпорныеДанныеПанелиДляПостроенияПлиточногоИнтерфейса(Форма);
КонецПроцедуры
	
#КонецОбласти

// Возвращает номер версии библиотеки рабочего места кассира.
//
// Возвращаемое значение:
//  Строка.
//
Функция ВерсияБиблиотеки() Экспорт
	
	ВерсияБиблиотекиРМК = "1.0.11.72";
	Возврат ВерсияБиблиотекиРМК;
	
КонецФункции

// Заполняет параметры для работы РМК при запуске
//
// Параметры:
//  ИсходныеПараметры - Структура.
//  	*ПараметрЗапуска - Строка. Параметр, с которым запущена программа,
//  Параметры - Структура - см.ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиентаПриЗапуске;
//
Процедура ЗаполнитьПараметрыРаботыКлиентаПриЗапуске(ИсходныеПараметры, Параметры) Экспорт
	
	ЗапуститьНовыйРМК = Ложь;
	ЗапуститьНастройкуКСО = Ложь;
	НеобходимоОбновитьИнтерфейс = Ложь;
	РежимКассыСамообслуживания = Ложь;
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПараметрыРаботыКлиентаПриЗапуске(
		ИсходныеПараметры,
		ЗапуститьНовыйРМК,
		ЗапуститьНастройкуКСО,
		РежимКассыСамообслуживания);
		
	Если ЗапуститьНовыйРМК Или ЗапуститьНастройкуКСО Тогда
		НеобходимоОбновитьИнтерфейс = Истина;
	КонецЕсли;
	
	Параметры.Вставить("ЗапуститьНовыйРМК", ЗапуститьНовыйРМК);
	Параметры.Вставить("ЗапуститьНастройкуКСО", ЗапуститьНастройкуКСО);
	Параметры.Вставить("НеобходимоОбновитьИнтерфейс", НеобходимоОбновитьИнтерфейс);
	Параметры.Вставить("РежимКассыСамообслуживания", РежимКассыСамообслуживания);
	
	Если ЗапуститьНовыйРМК Или ЗапуститьНастройкуКСО Тогда
		НастроитьРабочийСтолДляНовогоРМК(ЗапуститьНастройкуКСО);
	КонецЕсли;
	
КонецПроцедуры

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой необходимо настроить подключаемое оборудование;
//  ПрефиксыЭлементовФормы - Строка - префиксы элементов формы.
//
Процедура НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы = "Товары") Экспорт
	
	ТипыПодключенногоОборудования = ПодключаемоеОборудованиеРМКПовтИсп.ТипыПодключенногоОборудования();
	
	Форма.ИспользоватьПодключаемоеОборудование = ИспользоватьПодключаемоеОборудование(ТипыПодключенногоОборудования);
	
	ЕстьВесы = ТипыПодключенногоОборудования <> Неопределено
		И ТипыПодключенногоОборудования.Найти(Перечисления.ТипыПодключаемогоОборудования.ЭлектронныеВесы) <> Неопределено;
		
	ОбщегоНазначенияРМККлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ПолучитьВес",
			"Видимость",
			ЕстьВесы);
			
	ОбщегоНазначенияРМККлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ОткрытьПараметрыТарирования",
			"Видимость",
			ЕстьВесы);
			
КонецПроцедуры

// Добавляет в таблицу значений строки из другой таблицы значений и 
// в них значения колонок с совпадающими наименованиями.
//
// Параметры:
//  ТаблицаИсточник - ТаблицаЗначений -  таблица значений, откуда берутся значения.
//  ТаблицаПриемник - ТаблицаЗначений - таблица значений, куда добавляются строки.
//  ОчищатьПриемник - Булево - признак очистки таблицы приемника.
//  ИсключаяСвойства - Строка - перечень имен свойств к исключению.
//
Процедура ЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПриемник, ОчищатьПриемник = Ложь,
	ИсключаяСвойства = "") Экспорт

	Если ОчищатьПриемник Тогда
		ТаблицаПриемник.Очистить();
	КонецЕсли;
	
	// Заполним значения в совпадающих колонках.
	Для Каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл

		СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника,, ИсключаяСвойства);

	КонецЦикла;

КонецПроцедуры

// Заполняет адрес торгового объекта.
//
// Параметры:
//  АдресМагазина - Строка - адрес торгового объекта.
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектРМК - торговый объект для получения адреса.
//
Процедура ЗаполнитьАдресТорговогоОбъекта(АдресМагазина, ТорговыйОбъект) Экспорт
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьАдресТорговогоОбъекта(АдресМагазина, ТорговыйОбъект);
КонецПроцедуры

// Получаем контрагента по ИНН и КПП
// Параметры:
//  ИНН - Строка
//  КПП - Строка
//
// Возвращаемое значение:
//  Справочники.Контрагенты.Ссылка
//
Функция КонтрагентПоИННКПП(ИНН, КПП) Экспорт;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.КПП = &КПП";
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Выполняет установку параметров сеанса. Вызывается из модуля сеанса.
//
// Параметры:
//  ИмяПараметра - Строка - строка с именем параметра сеанса.
//  УстановленныеПараметры - Массив - массив всех установленных параметров сеанса.
//
Процедура УстановитьПараметрыСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "ТекущийТорговыйОбъект" Тогда
		ПараметрыСеанса[ИмяПараметра] = ТекущийТорговыйОбъект();
		УстановленныеПараметры.Добавить(ИмяПараметра);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает выбранную настройку РМК для текущего рабочего места.
// Если находит настройки РМК, связанные с текущим рабочим местом, удаляет эти связи
//
// Параметры:
//  НастройкаРМК - СправочникСсылка.НастройкиРМК - настройки рмк
//
Процедура УстановитьНастройкуРМКДляТекущегоРабочегоМеста(НастройкаРМК) Экспорт

		ТекущееРабочееМесто = ПараметрыСеанса.РабочееМестоКлиента;
		
		Если НЕ ЗначениеЗаполнено(ТекущееРабочееМесто) Тогда
			ТекущееРабочееМесто = МенеджерОборудованияВызовСервера.РабочееМестоКлиента();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НастройкаРМК) Тогда
			
			// найти настройки, ранее заданные для текущего рабочего места
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	НастройкиРабочегоМестаКассира.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
			|ГДЕ
			|	НЕ НастройкиРабочегоМестаКассира.ПометкаУдаления
			|	И НастройкиРабочегоМестаКассира.РабочееМесто = &ТекущееРабочееМесто
			|	И НЕ НастройкиРабочегоМестаКассира.Ссылка = &ВыбраннаяНастройка");
			Запрос.УстановитьПараметр("ТекущееРабочееМесто", ТекущееРабочееМесто);
			Запрос.УстановитьПараметр("ВыбраннаяНастройка", НастройкаРМК);
			ВыборкаНастроекРМК = Запрос.Выполнить().Выбрать(); // АПК:1328 - конкурентная работа с данными маловероятна
			
			
			ОтсутствиеРабочегоМеста = Справочники.РабочиеМеста.ПустаяСсылка();
			
			// снять соответствие
			Пока ВыборкаНастроекРМК.Следующий() Цикл
				
				НастройкаДляИзменения = ВыборкаНастроекРМК.Ссылка.ПолучитьОбъект();
				НастройкаДляИзменения.РабочееМесто = ОтсутствиеРабочегоМеста;
				НастройкаДляИзменения.Записать();// АПК:1327 - конкурентная работа с данными маловероятна
				
			КонецЦикла;
			
			// назначить выбранную настройку текущему рабочему месту
			ВыбраннаяНастройкаДляИзменения = НастройкаРМК.ПолучитьОбъект();
			ВыбраннаяНастройкаДляИзменения.РабочееМесто = ТекущееРабочееМесто;
			ВыбраннаяНастройкаДляИзменения.Записать();
			
		КонецЕсли;

КонецПроцедуры

// Настраивает состав форм начальной страницы приложения
//
// Параметры:
//  ЗапуститьНастройкуКСО - Булево - Запускать при старте общую форму "НастройкаКассыСамообслуживания".
//
Процедура НастроитьРабочийСтолДляНовогоРМК(ЗапуститьНастройкуКСО = Ложь) Экспорт
	
	НастройкиНачальнойСтраницы = Новый НастройкиНачальнойСтраницы;
	СоставФорм = Новый СоставФормНачальнойСтраницы;
	Если ЗапуститьНастройкуКСО Тогда
		СоставФорм.ЛеваяКолонка.Добавить("ОбщаяФорма.НастройкаКассыСамообслуживания");
	Иначе
		СоставФорм.ЛеваяКолонка.Добавить("Обработка.РабочееМестоКассира.Форма.ФормаРМК");
	КонецЕсли;
	НастройкиНачальнойСтраницы.УстановитьСоставФорм(СоставФорм);
	ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницы",, НастройкиНачальнойСтраницы);
	
КонецПроцедуры

// Определяет факт наличия синхронизации РМК с мастер - системой.
//
// Возвращаемое значение:
//  Булево - истина, если настройка существует.
//
Функция НастройкаСинхронизацииДанныхСуществует() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОбменСУРМК.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.ОбменСУРМК КАК ОбменСУРМК
	|ГДЕ
	|	НЕ ОбменСУРМК.ЭтотУзел
	|";

	Запрос = Новый Запрос(ТекстЗапроса);
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Заполняет ИмяКассира по данным физического лица для текущего пользователя 
//
// Параметры:
//  ИмяКассира - Строка.
//
Процедура ЗаполнитьФИОФизЛица(ИмяКассира) Экспорт
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	ФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизическоеЛицо");
	
	ИмяКассира = "";
	Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКассира = ИмяКассира + ?(ИмяКассира = "", "", " ") + ФизЛицо.Фамилия;
	ИмяКассира = ИмяКассира + ?(ИмяКассира = "" ИЛИ ФизЛицо.Имя = "", "", " ") + ФизЛицо.Имя;
	ИмяКассира = ИмяКассира + ?(ИмяКассира = "" ИЛИ ФизЛицо.Отчество = "", "", " ") + ФизЛицо.Отчество;
	
КонецПроцедуры

// Заполняет ИННКассира по данным текущего пользователя.
//
// Параметры:
//  ИННКассира - Строка.
//
Процедура ЗаполнитьИННФизЛица(ИННКассира) Экспорт
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	ФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизическоеЛицо");
	
	ИННКассира = НСтр("ru = ''");
	Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	ИННКассира = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФизЛицо, "ИНН");
	
КонецПроцедуры

// Возвращает настройкиРМК по рабочему месту
// Параметры:
//  РабочееМесто - СправочникСсылка.РабочиеМеста - рабочее место для получения настроек
//
// Возвращаемое значение:
//  Массив - массив настроекРМК
//
Функция НастройкиРМКДляТекущегоРабочегоМеста(РабочееМесто) Экспорт
	
	НастройкиРМК = Новый Массив;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	НастройкиРабочегоМестаКассира.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
	|ГДЕ
	|	НЕ НастройкиРабочегоМестаКассира.ПометкаУдаления
	|	И НастройкиРабочегоМестаКассира.РабочееМесто = &ТекущееРабочееМесто");
	Запрос.УстановитьПараметр("ТекущееРабочееМесто", РабочееМесто);
	
	ДоступныеНастройки = Запрос.Выполнить().Выбрать();
	
	Пока ДоступныеНастройки.Следующий() Цикл
		НастройкиРМК.Добавить(ДоступныеНастройки.Ссылка);
	КонецЦикла;
	
	Возврат НастройкиРМК;
	
КонецФункции

// Обрабатывает данные ответа из API
//
// Параметры:
//  ИсходныеДанные - Структура - данные ответа
//	НастройкиРабочегоМестаКассира - СправочникСсылка.НастройкиРМК - 
//		сущность для актуализации признака запрета интерактивного редактирования
//
// Возвращаемое значение:
//  Результат - Структура - результат обработки данных ответа
//
Функция ОбработатьДанныеЗапретов(ИсходныеДанные, НастройкиРабочегоМестаКассира) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ПризнакУспешноОбновлен", Ложь);
	Результат.Вставить("КомментарийКОбновлениюПризнака", НСтр("ru = ''") );
	Результат.Вставить("ЗапретыПродажУспешноЗагружены", Ложь);
	Результат.Вставить("КомментарийОбновленияЗапретов", НСтр("ru = ''"));
	
	// признак запрета интерактивного редактирования ограничений продаж
	Если ЗначениеЗаполнено(ИсходныеДанные) И ЗначениеЗаполнено(НастройкиРабочегоМестаКассира)
		И ТипЗнч(ИсходныеДанные) = Тип("Структура") И ИсходныеДанные.Свойство("AllowControl") Тогда
		
		РедактированиеРазрешеноПоДаннымМастерСистемы = ИсходныеДанные.AllowControl;
		РезультатОбновления = ОбновитьПризнакРазрешенияИнтерактивногоРедактирования(НастройкиРабочегоМестаКассира,
			РедактированиеРазрешеноПоДаннымМастерСистемы);
		Результат.ПризнакУспешноОбновлен = РезультатОбновления.ВыполнениеУспешно;
		Результат.КомментарийКОбновлениюПризнака = РезультатОбновления.Комментарий;
		
	Иначе
		
		Результат.КомментарийКОбновлениюПризнака =
		НСтр("ru = 'Невозможно обновить признак разрешения редактирования запретов по переданным исходным данным.'");
		
	КонецЕсли;
	
	// перечень ограничений продаж
	Если ЗначениеЗаполнено(ИсходныеДанные) И ТипЗнч(ИсходныеДанные) = Тип("Структура")
		И ИсходныеДанные.Свойство("RestrictionsList") Тогда
		
		МассивОграничений = ИсходныеДанные.RestrictionsList;
		
		Для каждого ОграничениеПродажи Из МассивОграничений Цикл
			
			Если НЕ ДанныеОграниченияПродажиУспешноЗагружены(ОграничениеПродажи)Тогда
				
				Результат.КомментарийОбновленияЗапретов =
					НСтр("ru = 'Ошибка загрузки запретов продаж из сервера лояльности'");
				Прервать;
				
			КонецЕсли;
				
		КонецЦикла;
		
		Результат.ЗапретыПродажУспешноЗагружены = Истина;
		
	Иначе
		
		Результат.КомментарийОбновленияЗапретов =
		НСтр("ru = 'Невозможно загрузить перечень ограничений продаж по переданным исходным данным.
			|Отсутствует узел ""RestrictionsList"".'");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает пароль сервера лояльности из безопасного хранилища.
//
// Параметры:
//  ТекущаяНастройкаРМК - СправочникСсылка.НастройкиРабочегоМестаКассира - текущая настройка РМК.
//
// Возвращаемое значение:
//  Пароль - Строка - пароль сервера лояльности.
//
Функция ПарольСервераЛояльности(ТекущаяНастройкаРМК) Экспорт
	
	Пароль = "";
	
	Если ЗначениеЗаполнено(ТекущаяНастройкаРМК) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		СохраненныйПароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ТекущаяНастройкаРМК,
			"ПарольСервераЛояльности");
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Не СохраненныйПароль = Неопределено Тогда
			Пароль = СохраненныйПароль;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Пароль;
	
КонецФункции

// Заполняет обязательные права.
//
// Параметры:
//  ОписаниеПрофиля - Структура - см.УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа.
//
Процедура ЗаполнитьОбязательныеРолиРМК(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеНовогоРМК");
	ОписаниеПрофиля.Роли.Добавить("ПравоОтложитьЧекРМК");
	ОписаниеПрофиля.Роли.Добавить("ПравоПродолжитьЧекРМК");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеНастроекРМК");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеУсловийОграниченияПродажРМК");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеЗапускаКассыСамообслуживания");
	
КонецПроцедуры

// Возвращает значение налогообложения ККТ для организации.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  ТекущаяСтрока - СтрокаТабличнойЧасти - текущая строка.
//  Дата - ДатаВремя - (необязательный).
//
// Возвращаемое значение:
//  НалогообложениеККТ - Неопределено, ОпределяемыйТип.ТипыСистемНалогообложенияККТРМК - значение налогообложения ККТ.
//
Функция СНОККТДляОрганизации(Форма, ТекущаяСтрока = Неопределено, Дата = '00010101') Экспорт
	
	НалогообложениеККТ = Неопределено;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьСНОККТДляОрганизации(НалогообложениеККТ, Форма, ТекущаяСтрока, Дата);
	
	Возврат НалогообложениеККТ;
	
КонецФункции

// Возвращает значение текущего вида операции.
//
// Параметры:
//  ЭтоВозврат - Булево - признак того, что текущая операция - возврат.
//  ЭтоСкупка - Булево - признак того, что текущая операция - скупка.
//
// Возвращаемое значение:
//  ОпределяемыйТип.ВидОперацииРМК - вид операции для текущей операции.
//
Функция ВидТекущейОперации(ЭтоВозврат = Ложь, ЭтоСкупка = Ложь) Экспорт
	
	ПараметрыВидаОперации = ОбщегоНазначенияРМККлиентСервер.ПараметрыВидаОперации();
	Если ЭтоВозврат Тогда
		ПараметрыВидаОперации.ЭтоВозврат = Истина;
	КонецЕсли;
	Если ЭтоСкупка Тогда
		ПараметрыВидаОперации.ЭтоСкупка = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьВидОперацииЧекаККМ(ПараметрыВидаОперации);
	
	Возврат ПараметрыВидаОперации.ВидОперации;
	
КонецФункции

// Определяет является ли вид операции операцией продажи.
// Значение по умолчанию - истина.
//
// Параметры:
//  ВидОперации - ОпределяемыйТип.ВидОперацииРМК - текущий вид операции.
//
// Возвращаемое значение:
//  Булево - вид операции - продажа.
//
Функция ЭтоВидОперацииПродажа(ВидОперации) Экспорт
	
	ЭтоПродажа = Истина;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьВидОперации(ЭтоПродажа, ВидОперации);
	
	Возврат ЭтоПродажа;
	
КонецФункции

// Возвращает текущий торговый объект, который далее используется в РМК.
//
// Возвращаемое значение:
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектРМК - текущий торговый объект РМК.
//
Функция ТекущийТорговыйОбъект() Экспорт
	
	ТорговыйОбъект = Неопределено;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьТекущийТорговыйОбъект(ТорговыйОбъект);
	
	Возврат ТорговыйОбъект;
	
КонецФункции

// Возвращает текущее рабочее место клиента.
//
// Возвращаемое значение:
//  РабочееМесто - ОпределяемыйТип.РабочееМестоРМК - текущее рабочее место.
//
Функция ТекущееРабочееМесто() Экспорт
	
	РабочееМесто = Неопределено;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьТекущееРабочееМесто(РабочееМесто);
	
	Возврат РабочееМесто;
	
КонецФункции

// Возвращает массив, в который добавлены виды номенклатуры.
// Вид номенклатуры определяется по переданному значению особенность учета.
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - текущее значение особенности учета номенклатуры.
//
// Возвращаемое значение:
//  МассивВидовНоменклатуры - Массив - массив, в который добавлены значения видов номенклатуры.
//
Функция МассивВидовНоменклатурыПоОсобенностиУчета(ОсобенностьУчета) Экспорт
	
	МассивВидовНоменклатуры = Новый Массив;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьМассивВидовНоменклатурыПоОсобенностиУчета(ОсобенностьУчета,
		МассивВидовНоменклатуры);
	
	Возврат МассивВидовНоменклатуры;
	
КонецФункции

// Возвращает имя константы, в которую необходимо записать значение.
//
// Параметры:
//  ВидКонстанты - Строка - вид переданной константы.
//
// Возвращаемое значение:
//  ИмяКонстанты - Строка - имя константы в прикладной конфигурации.
//
Функция ИмяКонстанты(ВидКонстанты) Экспорт
	
	ИмяКонстанты = "";
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьИмяКонстантыПоВиду(ВидКонстанты, ИмяКонстанты);
	
	Возврат ИмяКонстанты;
	
КонецФункции

// Возвращает массив, который содержит особенности учета номенклатуры допускающие возврат без указания марки.
//
// Возвращаемое значение:
//  МассивОсобенностейУчета - Массив - массив особенностей учета номенклатуры.
//
Функция МассивОсобенностейУчетаДляВозвратаБезМарки() Экспорт
	
	МассивОсобенностейУчета = Новый Массив;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьМассивОсобенностейУчетаДляВозвратаБезМарки(МассивОсобенностейУчета);
	
	Возврат МассивОсобенностейУчета;
	
КонецФункции

// Определяет является ли документ чеком продажи.
//
// Параметры:
//  ЧекККМ - ОпределяемыйТип.ЧекККМРМК - текущий документ.
//
// Возвращаемое значение:
//  Результат - Булево - Истина, если чек имеет вид операции продажа.
//
Функция ЭтоЧекПродажи(ЧекККМ) Экспорт
	
	Результат = Истина;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьЧекККМПродажа(Результат, ЧекККМ);
	
	Возврат Результат;
	
КонецФункции

// Определяет необходимость ввода характеристики для номенклатуры.
//
// Параметры:
//  Номенклатура - ОпределяемыйТип.НоменклатураРМК - текущая номенклатура.
//
// Возвращаемое значение:
//  Результат - Булево - Истина, если требуется указать характеристику.
//
Функция ТребуетсяВводХарактеристикиДляНоменклатуры(Номенклатура) Экспорт
	
	ТребуетсяВводХарактеристики = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьИспользованиеХарактеристик(ТребуетсяВводХарактеристики);
	Если ТребуетсяВводХарактеристики Тогда
		ОбщегоНазначенияРМКПереопределяемый.ОпределитьНеобходимостьВводаХарактеристикиДляНоменклатуры(Номенклатура,
			ТребуетсяВводХарактеристики);
	КонецЕсли;
	
	Возврат ТребуетсяВводХарактеристики;
	
КонецФункции

// Функция возвращает подготовленные данные для пробития на ККТ.
//
// Параметры:
//  ЧекККМВОбработке - ОпределяемыйТип.ЧекККМРМК - ссылка на документ печать, которого производится.
//  ДополнительныеПараметры - Структура:
//   *ЕстьПродукцияЕГАИС - Булево - признак наличия маркируемой алкогольной продукции.
//   *ПечататьБумажныйЧек - Булево - признак нужно печатать чек на ККТ или отправлять в эл.виде.
//   *СистемаНалогообложения - ОпределяемыеТипы.ТипыСистемНалогообложенияККТРМК - СНО ККТ для текущего чека.
//   *СворачиватьСтрокиПриПечатиЧека - Булево - признак нужно ли сворачивать маркируемые товары в чеке.
//   *ОсобенностиУчетаВозвращаемойМаркируемойПродукции - Список - значения особенностей учета товаров из чека,
//     по которым осуществляется возврат без марки
//
// Возвращаемое значение:
//  Массив - см.ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека().
//
Функция ДанныеДляПробитияЧека(ЧекККМВОбработке, ДополнительныеПараметры) Экспорт
	
	ОбщиеПараметры = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека();
	ОбщегоНазначенияРМКПереопределяемый.ПодготовитьДанныеДляПробитияЧека(ЧекККМВОбработке,
		ДополнительныеПараметры,
		ОбщиеПараметры);
	
	Возврат ОбщиеПараметры;
	
КонецФункции

// Возвращает систему налогообложения чека ККМ.
//
// Параметры:
//  ЧекККМ - ОпределяемыйТип.ЧекККМРМК - чек ККМ, для которого нужно определить систему налогообложения.
//
// Возвращаемое значение:
//  ОпределяемыйТип.ТипыСистемНалогообложенияККТРМК, Неопределено - система налогообложения.
//
Функция СистемаНалогообложенияЧека(ЧекККМ) Экспорт
	
	СНО = Неопределено;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьСНОЧекаККМ(ЧекККМ, СНО);
	
	Возврат СНО;
	
КонецФункции

// Определяет является ли переданная особенность учета табачной продукцией.
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - особенность учета
//
// Возвращаемое значение:
//  Булево - Истина, если особенность учета является табачной
//
Функция ЭтоТабачнаяПродукция(ОсобенностьУчета) Экспорт
	
	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьОсобенностьУчетаТабачнаяПродукция(ОсобенностьУчета, Результат);
	
	Возврат Результат;
	
КонецФункции

// Определяет является ли переданная особенность учета молочной продукцией.
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - особенность учета.
//
// Возвращаемое значение:
//  Булево - Истина, если особенность учета является молочной.
//
Функция ЭтоМолочнаяПродукция(ОсобенностьУчета) Экспорт
	
	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьОсобенностьУчетаМолочнаяПродукция(ОсобенностьУчета, Результат);
	
	Возврат Результат;
	
КонецФункции

// Определяет является ли переданная особенность учета алкогольной продукцией.
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - особенность учета.
//
// Возвращаемое значение:
//  Булево - Истина, если особенность учета является алкогольной.
//
Функция ЭтоАлкогольнаяПродукция(ОсобенностьУчета) Экспорт
	
	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьОсобенностьУчетаАлкогольнаяПродукция(ОсобенностьУчета, Результат);
	
	Возврат Результат;
	
КонецФункции

// Определяет является ли переданная особенность учета альтернативным табаком.
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - особенность учета.
//
// Возвращаемое значение:
//  Булево - Истина, если особенность учета является альтернативным табаком.
//
Функция ЭтоАльтернативныйТабак(ОсобенностьУчета) Экспорт
	
	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьОсобенностьУчетаАльтернативныйТабак(ОсобенностьУчета, Результат);
	
	Возврат Результат;
	
КонецФункции

// Определяет является ли переданный тип номенклатуры подарочным сертификатом.
//
// Параметры:
//  ТипНоменклатуры - ОпределяемыйТип.ТипыНоменклатурыРМК - тип номенклатуры.
//
// Возвращаемое значение:
//  Булево - Истина, если тип номенклатуры является подарочным сертификатом.
//
Функция ЭтоТипНоменклатурыПодарочныйСертификат(ТипНоменклатуры) Экспорт
	
	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьЭтоПодарочныйСертификатПоТипу(ТипНоменклатуры, Результат);
	
	Возврат Результат;
	
КонецФункции

// Проверяет серию подарочного сертификата на факт использования
// 
// Параметры:
//  Серия - ОпределяемыйТип.СерияРМК - Серия проверяемого подарочного сертификата.
//  ТекущаяНастройкаРМК - Справочник.НастройкиРабочегоМестаКассира - текущие настройки РМК.
//  Результат - Булево - результат проверки серии подарочного сертификата.
//
Процедура ПроверитьСериюПодарочногоСертификата(Серия, ТекущаяНастройкаРМК, Результат = Ложь) Экспорт
	
	// Получить из настроек РМК адрес сервиса, логин и пароль из защищенного хранилища
	ПараметрыПодключенияКСерверуЛояльности =
		ОбщегоНазначенияРМКВызовСервера.ЗначенияПараметровСервераЛояльности(ТекущаяНастройкаРМК);
		
	ЗначенияПараметровМетода = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыМетодовБонуснойПодсистемы();
	ЗначенияПараметровМетода.Вставить("GiftCardNumber", Строка(Серия));
	
	ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаДанныеЗапретовРедактирования(ПараметрыПодключенияКСерверуЛояльности, ЗначенияПараметровМетода);
	СтруктураРезультат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
	
	Если СтруктураРезультат.ЕстьОшибки Тогда
		Результат = Ложь;
		Возврат;
	КонецЕсли;
	
	ДанныеОтвета = Неопределено;
	СтрокаJSON = СтруктураРезультат.ДанныеОтвета;
	СерверЛояльностиПолучательДанныхКлиентСервер.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
	
	
	Если ТипЗнч(ДанныеОтвета) = Тип("Структура") И ДанныеОтвета.Свойство("GiftCardUsed") Тогда
		Результат = ДанныеОтвета.GiftCardUsed;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру цветов используемых на форме РМК
//
// Возвращаемое значение:
//  Структура - содержащая цвета для использования на форме РМК
//
Функция ЦветаФормыРМК() Экспорт
	
	ЦветаФормы = Новый Структура();
	ЦветаФормы.Вставить("Авто", Новый Цвет);
	ЦветаФормы.Вставить("АктивнаяКнопка", ЦветаСтиля.ЦветАктивнойКнопкиРМК);
	ЦветаФормы.Вставить("ЗеленаяКнопка", ЦветаСтиля.ЦветЗеленойКнопкиРМК);
	ЦветаФормы.Вставить("КраснаяКнопка", ЦветаСтиля.ЦветКраснойКнопкиРМК);
	ЦветаФормы.Вставить("ОсобыйТекст", ЦветаСтиля.ЦветОсобогоТекстаРМК);
	ЦветаФормы.Вставить("ФонРежимаВозврат", ЦветаСтиля.ЦветФонаРежимаВозвратаРМК);
	ЦветаФормы.Вставить("ФонРежимаКоррекция", ЦветаСтиля.ЦветФонаРежимаКоррекцииРМК);
	ЦветаФормы.Вставить("ФонРежимаПродажа", ЦветаСтиля.ЦветФонаРежимаПродажиРМК);
	ЦветаФормы.Вставить("ФонРежимаСкупка", ЦветаСтиля.ЦветФонаРежимаСкупкиРМК);
	ЦветаФормы.Вставить("ФонРежимаВозвратСкупки", ЦветаСтиля.ЦветФонаРежимаВозвратаСкупкиРМК);
	ЦветаФормы.Вставить("НеАктивизированныйПункт", ЦветаСтиля.ЦветНеАктивизированногоПунктаРМК);
	ЦветаФормы.Вставить("АктивизированныйПункт", ЦветаСтиля.ЦветАктивизированногоПунктаРМК);
	ЦветаФормы.Вставить("ПапкаКнопка", ЦветаСтиля.ЦветПапкиКнопкиРМК);
	ЦветаФормы.Вставить("ФонФормы", ЦветаСтиля.ЦветФонаФормы);
	ЦветаФормы.Вставить("ФонРежимаПредоплата", ЦветаСтиля.ЦветФонаРежимаПредоплатаРМК);
	ЦветаФормы.Вставить("ФонРежимаЗаказ", ЦветаСтиля.ЦветФонаРежимаЗаказРМК);
	
	Возврат ЦветаФормы;
	
КонецФункции

// Возвращает структуру для расчета цены товара, который выбрали в строке быстрого добавления товара.
//
// Возвращаемое значение:
//  Структура - параметры расчета цены для товара.
//
Функция ПараметрыРасчетаЦены() Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("ВидЦены");
	Параметры.Вставить("ТорговыйОбъект");
	Параметры.Вставить("Организация");
	Параметры.Вставить("Номенклатура");
	Параметры.Вставить("Цена", 0);
	
	Возврат Параметры;
	
КонецФункции

// Исходные данные с параметрами отбора для получения данных отчета за смену
//
// Параметры:
//  ИсходныеДанные - Структура:
//		*ДанныеМакета - Структура,
//		*КассирРМК - ОпределяемыйТип.КассирРМК,
//		*ДанныеОборудования - Массив (массив данных о кассах, по которым собирается отчет):
//			Элементом массива является структура:
//              *ДанныеПоКассе - Структура. Описывает кассы для отбора и параметры оборудования:
//					*ДанныеОборудования - Структура. Значения параметров кассы за смену, собранные
//                               на клиентской стороне
//                  *ДанныеОборудованияПолучены - Булево.
//                  *ИдентификаторУстройства - ОпределяемыйТип.ПодключаемоеОборудованиеРМК.
//                  *Касса - ОпределяемыйТип.КассаККМРМК.
//                  *КассоваяСмена - ОпределяемыйТип.КассоваяСменаРМК
//              *ДанныеЭквайринговыхТерминалов - Массив. Содержит описание оборудования -
//                               эквайринговых терминалов, подключенных к кассе.
//
// Возвращаемое значение:
//  ДанныеДляОтчета - Структура
//      *ТаблицаСумм - ТаблицаЗначений.
//          *Касса - ОпределяемыйТип.КассаККМРМК,
//          *Кассир - ОпределяемыйТип.КассирРМК,
//          *ВидОплаты - ОпределяемыйТип.ВидОплатыРМК,
//          *СуммаПродаж - ОпределяемыйТип.Число15_2РМК,
//          *СуммаВозвратов - ОпределяемыйТип.Число15_2РМК
//      *ТаблицаСуммПоПродавцам - ТаблицаЗначений.
//          *Касса - ОпределяемыйТип.КассаККМРМК,
//          *Продавец - ОпределяемыйТип.ПродавецРМК,
//          *СуммаПродаж - ОпределяемыйТип.Число15_2РМК,
//          *СуммаВозвратов - ОпределяемыйТип.Число15_2РМК
//      *ТаблицаОшибочныхЧеков - ТаблицаЗначений.
//          *Касса - ОпределяемыйТип.КассаККМРМК,
//          *ЭтоПродажа - Булево,
//          *КодРаздела - Строка. ("ОФД", "ЕГАИС", "ЭС НСПК", "Эквайринг"),
//          *ЧекСсылка - ОпределяемыйТип.ЧекККМРМК
//          *ТекстОшибки - Строка. 
//      *ТаблицаОтложенныхЧеков - ТаблицаЗначений.
//          *Касса - ОпределяемыйТип.КассаККМРМК,
//          *ЭтоПродажа - Булево,
//          *КодРаздела - Строка. ("СБП", "Другие виды оплаты"),
//          *ЧекСсылка - ОпределяемыйТип.ЧекККМРМК
//      *ТаблицаКасс - ТаблицаЗначений.
//          *Касса - ОпределяемыйТип.КассаККМРМК,
//          *ПредставлениеКассы - Строка,
//          *ПредставлениеКассовойСмены - Строка.
//
Функция ПолучитьДанныеОтчетаЗаСмену(ИсходныеДанные) Экспорт
	
	ДанныеДляОтчета = Новый Структура();
	ДанныеДляОтчета.Вставить("ТаблицаСумм", Новый ТаблицаЗначений);
	ДанныеДляОтчета.Вставить("ТаблицаСуммПоПродавцам", Новый ТаблицаЗначений);
	ДанныеДляОтчета.Вставить("ТаблицаОшибочныхЧеков", Новый ТаблицаЗначений);
	ДанныеДляОтчета.Вставить("ТаблицаОтложенныхЧеков", Новый ТаблицаЗначений);
	ДанныеДляОтчета.Вставить("ТаблицаКасс", Новый ТаблицаЗначений);
	ДанныеДляОтчета.Вставить("ПоВсемКассирам", Ложь);
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьДанныеОтчетаЗаСмену(ИсходныеДанные, ДанныеДляОтчета);
	
	Возврат ДанныеДляОтчета;
	
КонецФункции

// Формирует табличный документ расшифровки отчета за смену.
//
// Параметры:
//  ДанныеРасшифровки - Структура.
//  	*ИмяРаздела - Строка. Имя раздела ошибок чеков,
//      *МассивЧеков - Массив. Массив структур с ошибочными чеками и текстом ошибки.
// 
// Возвращаемое значение:
//  ТабличныйДокументРасшифровка - табличный документ, содержащий расшифровку.
//
Функция СформироватьРасшифровкуОтчетаЗаСмену(ДанныеРасшифровки) Экспорт
		
	ДеревоЧековТоваров = ПодготовитьДеревоЧековПоДаннымРасшифровки(ДанныеРасшифровки);
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьДеталиЧековДляРасшифровкиОтчетаЗаСмену(ДеревоЧековТоваров);
	ТабличныйДокументРасшифровка = СформироватьРасшифровкуОшибокОтчетаЗаСмену(ДеревоЧековТоваров, ДанныеРасшифровки.ГруппаРаздела, ДанныеРасшифровки.ИмяРаздела);
	
	Возврат ТабличныйДокументРасшифровка;
	
КонецФункции	

// Заполняет подменю настроек РМК сценариями использования РМК
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложение - форма настройки рабочего места кассира.
//
Процедура ЗаполнитьДоступныеСценарииИспользованияРМК(Форма) Экспорт
	
	ОбщегоНазначенияРМКПереопределяемый.ДополнитьДоступныеСценарииИспользованияРМК(Форма);
	ГруппаСценариев = Форма.Элементы.ГруппаПодменюСценарииИспользования;
	ГруппаСценариев.Видимость = (ГруппаСценариев.ПодчиненныеЭлементы.Количество() > 0);
	
КонецПроцедуры

// Устанавливает значения по умолчанию в настройках РМК для сценария "Терминал самообслуживания"
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложение - форма настройки рабочего места кассира.
//
Процедура УстановитьЗначенияНастроекДляТерминалаСамообслуживания(Форма) Экспорт
	
	Форма.НастройкаРМК.ПродажиСНесколькихКассККМ = Ложь;
	Форма.НастройкаРМК.ОсновнаяКассаККМ = Неопределено;
	Форма.НастройкаРМК.РазрешитьВыборПродавца = Ложь;
	Форма.НастройкаРМК.РазрешитьВыборСклада = Ложь;
	Форма.НастройкаРМК.ЗавершатьСессиюКассираПослеПродажи = Ложь;
	Форма.НастройкаРМК.ИспользоватьРежимСкупки = Ложь;
	Форма.НастройкаРМК.МаксимальныйПроцентРучнойСкидки = 0;
	Форма.НастройкаРМК.ВопросПоРасчетуСкидок = Ложь;
	Форма.НастройкаРМК.ВыдаватьПодарокНаКассе = Ложь;
	Форма.НастройкаРМК.ИспользоватьПромокоды = Ложь;
	
	Форма.ИспользоватьОплатуПлатежнымиКартами = Истина;
	
	Форма.НастройкаРМК.ИспользоватьОплатуНаличными = Ложь;
	Форма.НастройкаРМК.ВыдаватьНаличныеНаКассе = Ложь;
	Форма.НастройкаРМК.ИспользоватьПанельВводаНаличныхКупюр = Ложь;
	Форма.НастройкаРМК.ИспользоватьОплатуСертификатами = Ложь;
	
	Форма.Элементы.СтраницаВводНаличных.Видимость = Ложь;
	Форма.Элементы.ЭквайринговыеТерминалы.Доступность = Истина;
	
	Форма.ИспользоватьОплатуСертификатамиНСПК = Ложь;
	
	Форма.НастройкаРМК.ПечататьБумажныйЧек = Истина;
	Форма.НастройкаРМК.ОставлятьПоследнийЧекНаЭкране = Ложь;
	Форма.НастройкаРМК.СпособФормированияТоварногоЧека = 0;
	
	Форма.ГоризонтальныйОриентация = Ложь;
	
	Форма.НастройкаРМК.ВертикальнаяОриентация = Истина;
	Форма.НастройкаРМК.ИспользоватьСтрокуБыстрогоДобавленияТовара = Ложь;
	Форма.НастройкаРМК.ЗапускатьОбменИзИнтерфейсаРМК = Ложь;
	
	Форма.НастройкаРМК.СоздаватьЗаказы = Ложь;
	Форма.НастройкаРМК.ПокупательНовогоЗаказа = Неопределено;
	Форма.НастройкаРМК.СпособПечатиЗаказаПокупателя = 0;
	Форма.НастройкаРМК.ПечататьЗаказПриСоздании = Ложь;
	
	ОбщегоНазначенияРМКПереопределяемый.ДополнитьЗначенияНастроекДляТерминалаСамообслуживания(Форма);
	
КонецПроцедуры

// Настраивает видимость элементов формы настроек РМК в зависимости от выбранного сценария использования
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложение - форма настройки рабочего места кассира.
//
Процедура НастроитьВидимостьЭлементовНастройкиРМК(Форма) Экспорт
	
	СценарийТерминалСамообслуживания = Перечисления.СценарииИспользованияРМК.ТерминалСамообслуживания;
	ЭтоСценарийТерминал = (Форма.НастройкаРМК.СценарийИспользования = СценарийТерминалСамообслуживания);
	
	Элементы = Форма.Элементы;
	Элементы.ГруппаПродажиСНесколькихКассККМ.Видимость = Не ЭтоСценарийТерминал;
	Элементы.ГруппаИспользованиеОбменаТоваров.Видимость = Не ЭтоСценарийТерминал;
	Элементы.НастройкаРМКМаксимальныйПроцентРучнойСкидки.Видимость = Не ЭтоСценарийТерминал;
	Элементы.ВопросПоРасчетуСкидок.Видимость = Не ЭтоСценарийТерминал;
	Элементы.ГруппаВыдаватьПодарки.Видимость = ЭтоСценарийТерминал;
	Элементы.ГруппаНаличные.Видимость = Не ЭтоСценарийТерминал;
	Элементы.НастройкаРМКИспользоватьОплатуСертификатами.Видимость = Не ЭтоСценарийТерминал;
	Элементы.ГруппаНастройкиФСС.Видимость = Не ЭтоСценарийТерминал;
	Элементы.НастройкаРМКОставлятьПоследнийЧекНаЭкране.Видимость = Не ЭтоСценарийТерминал;
	Элементы.НастройкаРМКСпособФормированияТоварногоЧека.Видимость = Не ЭтоСценарийТерминал;
	Элементы.РеквизитыЧека.Видимость = Не ЭтоСценарийТерминал;
	Элементы.ГруппаЗакрыватьПодборСтрокаБыстрогоДобавленияТовара.Видимость = Не ЭтоСценарийТерминал;
	Элементы.СтраницаГорячиеКлавиши.Видимость = Не ЭтоСценарийТерминал;
	Элементы.НастройкаРМКИспользоватьПромокоды.Видимость = Не ЭтоСценарийТерминал;
	
	ОбщегоНазначенияРМКПереопределяемый.НастроитьВидимостьЭлементовНастройкиРМК(Форма);
	
КонецПроцедуры

// Определяет является ли переданная особенность учета альтернативным табаком.
//
// Параметры:
//  Пользователь - ОпределяемыйТип.ПользовательРМК - пользователь, чей максимальный профиль необходимо определить.
//
// Возвращаемое значение:
//  СправочникСсылка.ПрофилиГруппДоступа - максимальный кассовый профиль пользователя.
//
Функция МаксимальныйКассовыйПрофильПользователя(Пользователь) Экспорт
	
	ПрофильДоступа = Справочники.ПрофилиГруппДоступа.ПустаяСсылка();
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьМаксимальныйКассовыйПрофильПользователя(Пользователь, ПрофильДоступа);
	Возврат ПрофильДоступа;
	
КонецФункции

// Проверяет, что пользователю доступен только режим кассы самообслуживания.
//
// Параметры:
//  Пользователь - ОпределяемыйТип.ПользовательРМК - пользователь, чей максимальный профиль необходимо определить.
//
// Возвращаемое значение:
//  Булево - Истина - пользователь может работать только в режиме кассы самообслуживания.
//
Функция ПользователюДоступенТолькоРежимКСО(Пользователь) Экспорт
	
	РезультатФункции = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.УстановитьПользователюПризнакДоступностиТолькоРежимаКСО(Пользователь,
		РезультатФункции);
	Возврат РезультатФункции;
	
КонецФункции

// Функция возвращает строку с последними 10 цифрами номера телефона в обратном порядке
//
// Параметры:
//  НомерТелефона - Строка - Строка с номером телефона
// Возвращаемое значение:
//  Строка - 10 последних цифр номера телефона в обратном порядке
Функция ПолучитьОбратныйНомерТелефонаБезКодаСтраны(НомерТелефона) Экспорт
	
	РезультатФункции = "";
	
	ДлинаОбратногоНомера = 10;
	ДлинаИсходногоНомера = СтрДлина(НомерТелефона);
	ИндексСимвола = 0;
	Пока ИндексСимвола < ДлинаИсходногоНомера И СтрДлина(РезультатФункции) < ДлинаОбратногоНомера Цикл
		ТекущийСимвол = Сред(НомерТелефона, ДлинаИсходногоНомера - ИндексСимвола, 1);
		Если СтрНайти("0123456789", ТекущийСимвол) > 0 Тогда
			РезультатФункции = РезультатФункции + ТекущийСимвол;
		КонецЕсли;
		ИндексСимвола = ИндексСимвола + 1;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КомпоновкаДанных

// Возвращает составляющие имени поля СКД
//
// Параметры:
//	ПолноеИмя - полное имя поля СКД.
//
// Возвращаемое значение:
//	МассивЧастей - массив, содержащий части полного имени.
//
Функция МассивСоставляющихИмени(ПолноеИмя)

	МассивЧастей	= Новый Массив;
	ИмяДляОбработки	= ПолноеИмя;
	
	Пока НЕ ПустаяСтрока(ИмяДляОбработки) Цикл
		
		Если Лев(ИмяДляОбработки, 1) = "[" Тогда
			
			Позиция = Найти(ИмяДляОбработки, "]");
			
			Если Позиция = 0 Тогда
				
				МассивЧастей.Добавить(Сред(ИмяДляОбработки, 2));
				ИмяДляОбработки = "";
				
			Иначе
				
				МассивЧастей.Добавить(Сред(ИмяДляОбработки, 1, Позиция));
				ИмяДляОбработки = Сред(ИмяДляОбработки, Позиция + 2);
				
			КонецЕсли;
			
		Иначе
			
			Позиция = Найти(ИмяДляОбработки, ".");
			
			Если Позиция = 0 Тогда
				
				МассивЧастей.Добавить(ИмяДляОбработки);
				ИмяДляОбработки = "";
				
			Иначе
				
				МассивЧастей.Добавить(Лев(ИмяДляОбработки, Позиция - 1));
				ИмяДляОбработки = Сред(ИмяДляОбработки, Позиция + 1);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЧастей;

КонецФункции

#КонецОбласти

#Область ЗапретыПродаж

// Обновляет до актуального значения признак разрешения интерактивного редактирования
//
// Параметры:
//  НастройкаРабочегоМеста - СправочникСсылка.НастройкиРМК - настройка, в которой хранится текущее значение запрета
//  РедактированиеРазрешено - Булево - значение запрета из мастер - системы
//
// Возвращаемое значение:
//  Результат - Структура - 
// 	(содержит:
//		ВыполнениеУспешно - Булево;
//		Комментарий - Строка - дополнительная информация о состоянии выполнения)
//
Функция ОбновитьПризнакРазрешенияИнтерактивногоРедактирования(НастройкаРабочегоМеста, РедактированиеРазрешено)
	
	Результат = ОбщегоНазначенияРМККлиентСервер.РезультатОбработкиДанныхПоУмолчанию();
	
	Если ЗначениеЗаполнено(НастройкаРабочегоМеста) И ТипЗнч(РедактированиеРазрешено) = Тип("Булево") Тогда
		
		ТекущееЗначениеЗапрета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаРабочегоМеста,
			"ЗапрещеноРедактированиеУсловийОграниченийПродаж");
		
		РедактированиеЗапрещено = НЕ РедактированиеРазрешено;
		
		Если ТекущееЗначениеЗапрета <> РедактированиеЗапрещено Тогда
			
			ОбъектДляИзменения = НастройкаРабочегоМеста.ПолучитьОбъект();
			ОбъектДляИзменения.ЗапрещеноРедактированиеУсловийОграниченийПродаж = РедактированиеЗапрещено;
			
			Попытка
				
				ОбъектДляИзменения.Записать();// АПК:1327 - конкурентная работа с данными маловероятна
				Результат.ВыполнениеУспешно = Истина;
				Результат.Комментарий = НСтр("ru = 'Признак запрета редактирования успешно обновлен'");
				
			Исключение
				
				ОбщаяИнформацияОбОшибке =
					НСтр("ru = 'Ошибка при обновлении признака разрешения редактирования запретов.'",
						ОбщегоНазначения.КодОсновногоЯзыка()); 
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(ОбщаяИнформацияОбОшибке,
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки);
				Результат.ТекстОшибки = СтрШаблон("%1%2", ОбщаяИнформацияОбОшибке, ПодробноеПредставлениеОшибки);
				
			КонецПопытки;
			
		Иначе
			
			Результат.ВыполнениеУспешно = Истина;
			Результат.Комментарий = НСтр("ru = 'Обновление признака разрешения редактирования запретов не требуется.'");
			
		КонецЕсли;
		
	Иначе
		
		Результат.Комментарий =
			НСтр("ru = 'Невозможно обновить признак разрешения редактирования запретов по переданным исходным данным.'");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область Интеграция_с_API_сервиса_лояльности

Функция ДанныеОграниченияПродажиУспешноЗагружены(ОграничениеПродажи)
	
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(ОграничениеПродажи) Тогда
		
		РезультатЗагрузкиОграничений = ЗагрузитьДанныеОграниченияПродажи(ОграничениеПродажи);
		Результат = РезультатЗагрузкиОграничений.ВыполнениеУспешно;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьДанныеОграниченияПродажи(ОграничениеПродажи)

	Результат = ОбщегоНазначенияРМККлиентСервер.РезультатОбработкиДанныхПоУмолчанию();
	
	ДесериализованныеДанные = ДесериализоватьДанные(ОграничениеПродажи);
	Если ДесериализованныеДанныеКорректны(ДесериализованныеДанные) Тогда
		
		ЗагрузкаУспешна = АктуализироватьДанныеЗапрета(ДесериализованныеДанные);
		Результат.ВыполнениеУспешно = ЗагрузкаУспешна;
		
	Иначе
		Результат.Комментарий = НСтр("ru = 'Ошибка десериализации данных, подробнее см. журнал регистрации'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция АктуализироватьДанныеЗапрета(ИсходныеДанные)
	
	ДанныеОбновлены = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.АктуализироватьДанныеЗапрета(ИсходныеДанные, ДанныеОбновлены);
	
	Возврат ДанныеОбновлены;
	
КонецФункции

#КонецОбласти

#Область Десериализация_данных

Функция ДесериализоватьДанные(ИсходныеДанные)
	
	ДесериализованныеДанные = Новый Структура();
	
	Если ЗначениеЗаполнено(ИсходныеДанные)
		И ТипЗнч(ИсходныеДанные) = Тип("Структура") Тогда
		
	СоответствиеКонтекстовИмен = ОбщегоНазначенияРМКПовтИсп.СоответствиеИменСущностейЗапретовПродаж();
		
		Для каждого ЭлементОтвета Из ИсходныеДанные Цикл
			
			ДесериализованноеЗначение = Неопределено;
			ЗначениеДанных = ЭлементОтвета.Значение;
			
			Если ТипЗнч(ЗначениеДанных) = Тип("Структура") Тогда
				ДесериализованноеЗначение = ДесериализоватьСсылочнуюСущность(ЭлементОтвета);
			ИначеЕсли ТипЗнч(ЗначениеДанных) = Тип("Массив") Тогда
				ДесериализованноеЗначение = ДесериализоватьКоллекцию(ЭлементОтвета);
			Иначе
				ДесериализованноеЗначение = ДесериализоватьСущностьПримитивногоТипа(ЭлементОтвета);
			КонецЕсли;
			
			ИсходноеИмяСущности = ЭлементОтвета.Ключ;
			
			ИмяСущности = ?(СоответствиеКонтекстовИмен.Свойство(ИсходноеИмяСущности),
				СоответствиеКонтекстовИмен[ИсходноеИмяСущности],
				ИсходноеИмяСущности);
			
			ДесериализованныеДанные.Вставить(ИмяСущности, ДесериализованноеЗначение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДесериализованныеДанные;
	
КонецФункции

// Проверяет заполненность в ответе от сервиса обязательных к заполнению полей
// по результатам десериализации в соответствии со схемой проверки
//
// Параметры:
//  Данные - Структура - десериализованный ответ от сервера лояльности
//
// Возвращаемое значение:
//  Результат - Булево
//
Функция ДесериализованныеДанныеКорректны(Данные)

	ДанныеКорректны = Ложь;
	
	Если ТипЗнч(Данные) = Тип("Структура") И ЗначениеЗаполнено(Данные) Тогда
	
		СхемаПроверки = ОбщегоНазначенияРМКПовтИсп.
			СхемаПроверкиКорректнойДесериализацииОтветаОтСервераЛояльности();
		
		Для каждого Элемент Из Данные Цикл
			
			ЗначениеПроверяемогоСвойства = Элемент.Значение;
			
			Если ТипЗнч(ЗначениеПроверяемогоСвойства) = Тип("Массив") Тогда
				
				Для каждого ЭлементМассива Из ЗначениеПроверяемогоСвойства Цикл
					
					ДанныеКорректны = ДесериализованныеДанныеКорректны(ЭлементМассива);
					Если НЕ ДанныеКорректны Тогда
						Возврат ДанныеКорректны;
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				ИмяПроверяемогоСвойства = Элемент.Ключ;
				
				// возможность работы с пустыми полями
				ДопускаетсяПустоеЗначение = СхемаПроверки.Свойство(ИмяПроверяемогоСвойства)
					И СхемаПроверки[ИмяПроверяемогоСвойства];
				
				// фактическая заполненность поля
				ЗагруженноеЗначениеЗаполнено = ЗначениеЗаполнено(ЗначениеПроверяемогоСвойства);
				
				// недопустимо пустое поле, когда ожидается обязательное заполнение поля
				Если НЕ (ДопускаетсяПустоеЗначение ИЛИ ЗагруженноеЗначениеЗаполнено) Тогда
					Возврат ДанныеКорректны;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДанныеКорректны = Истина;
		
	КонецЕсли;
	
	Возврат ДанныеКорректны;
	
КонецФункции

// Десериализует ссылочную по данным сервера лояльности, сопоставляя с существующими сущностями
//
// Параметры:
//  ИсходныеДанные - Структура - исходные данные для десериализации;
//
// Возвращаемое значение:
//  РезультатДесериализации - ЛюбаяСсылка
//
Функция ДесериализоватьСсылочнуюСущность(ИсходныеДанные)
	
	Результат = Неопределено;
	
		ПравилаДесериализации = ОбщегоНазначенияРМКПовтИсп.НаборПравилДесериализацииЗапретовПродаж();
		ИмяСущности = ИсходныеДанные.Ключ;
		
		Если ПравилаДесериализации.Свойство(ИмяСущности) Тогда
			
			ЗначениеСущности = ИсходныеДанные.Значение;
			
			ПравилоДесериализации = ПравилаДесериализации[ИмяСущности];
			
			ТипДанных = НРег(ПравилоДесериализации.ТипДанных);
			ПозицияТочкиВИмениТипа = СтрНайти(ТипДанных, ".");
			
			Если ПозицияТочкиВИмениТипа > 0 Тогда
				
				НаименованиеТипа = Сред(ТипДанных, ПозицияТочкиВИмениТипа + 1);
				
				Если ПравилоДесериализации.Свойство("Идентификатор") Тогда
					
					ИмяИдентификатораКонтекстаAPI = ПравилоДесериализации.Идентификатор;
					
					Если ЗначениеСущности.Свойство(ИмяИдентификатораКонтекстаAPI) Тогда
						
						ИдентификаторСущности = ЗначениеСущности[ИмяИдентификатораКонтекстаAPI];
						
						Если СтрНайти(ТипДанных, "перечислениессылка") > 0 Тогда // АПК:1036 - опорный литерал
							
							Если ЗначениеЗаполнено(ИдентификаторСущности) Тогда
							
								Попытка
									Результат = Перечисления[НаименованиеТипа][ИдентификаторСущности];
								Исключение
									
									ЗаписьЖурналаРегистрации(
										НСтр("ru = 'Не удалось найти значение перечисления при загрузке запрета продаж из сервера лояльности.'",
											ОбщегоНазначения.КодОсновногоЯзыка()),
											УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
									
								КонецПопытки;
								
							Иначе
								
								Попытка
									Результат = Перечисления[НаименованиеТипа].ПустаяСсылка();
								Исключение
									
									ЗаписьЖурналаРегистрации(
										НСтр("ru = 'Не удалось найти значение перечисления при загрузке запрета продаж из сервера лояльности.'",
											ОбщегоНазначения.КодОсновногоЯзыка()),
											УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
									
								КонецПопытки;
							
							КонецЕсли;
							
						ИначеЕсли СтрНайти(ТипДанных, "справочникссылка") > 0 Тогда // АПК:1036 - опорный литерал
							
							Если ЗначениеЗаполнено(ИдентификаторСущности) Тогда

								ИдентификаторЭлементаСправочника = Новый УникальныйИдентификатор(ИдентификаторСущности);
								СсылкаНаЭлементСправочника = Справочники[НаименованиеТипа].ПолучитьСсылку(ИдентификаторЭлементаСправочника);
								
								ТекстЗапроса = СтрШаблон("ВЫБРАТЬ
								|	Справочник.Ссылка КАК Ссылка
								|ИЗ
								|	Справочник.%1 КАК Справочник
								|ГДЕ
								|	НЕ Справочник.ПометкаУдаления
								|	И Справочник.Ссылка = &Ссылка", НаименованиеТипа);
								
								Запрос = Новый Запрос(ТекстЗапроса);
								Запрос.УстановитьПараметр("Ссылка", СсылкаНаЭлементСправочника);
								
								Выборка = Запрос.Выполнить().Выбрать();
								
								Результат = ?(Выборка.Следующий(), Выборка.Ссылка, Справочники[НаименованиеТипа].ПустаяСсылка());
								
							Иначе
								Результат = Справочники[НаименованиеТипа].ПустаяСсылка();
							КонецЕсли;

						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Результат) И ПравилоДесериализации.Свойство("ПоляПоиска") Тогда
					
					СоответствиеИменПолейПоиска = ПравилоДесериализации.ПоляПоиска;
					
					Если ЗначениеЗаполнено(СоответствиеИменПолейПоиска) Тогда
						
						ЗначенияПолейПоиска = Новый Структура();
						
						Для каждого ПолеПоиска Из СоответствиеИменПолейПоиска Цикл
							
							ИмяПоляПоискаВКонтекстеСервераЛояльности = ПолеПоиска.Ключ;
							ИмяПоляПоискаВКонтекстеРМК = ПолеПоиска.Значение;
							ЗначениеПоля = ЗначениеСущности[ИмяПоляПоискаВКонтекстеСервераЛояльности];
							ЗначенияПолейПоиска.Вставить(ИмяПоляПоискаВКонтекстеРМК, ЗначениеПоля);
						
						КонецЦикла;
						
						Если ЗначениеЗаполнено(ЗначенияПолейПоиска) Тогда
							
							ТекстЗапроса = СтрШаблон("ВЫБРАТЬ
							|	Справочник.Ссылка КАК Ссылка
							|ИЗ
							|	Справочник.%1 КАК Справочник
							|ГДЕ
							|	НЕ Справочник.ПометкаУдаления", НаименованиеТипа);
							
							Запрос = Новый Запрос;
							
							Для каждого Элемент Из ЗначенияПолейПоиска Цикл
							
								ТекстЗапроса = СтрШаблон("%1 И Справочник.%2 = &%2", ТекстЗапроса, Элемент.Ключ);
								Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
							
							КонецЦикла;
							
							Запрос.Текст = ТекстЗапроса;
							
							Выборка = Запрос.Выполнить().Выбрать();
							
							Результат = ?(Выборка.Следующий(), Выборка.Ссылка, Справочники[НаименованиеТипа].ПустаяСсылка());
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Десериализует сущность примитивного типа по данным сервера лояльности
//
// Параметры:
//  ИсходныеДанные - Структура - исходные данные для десериализации
//
// Возвращаемое значение:
//  РезультатДесериализации - примитивный тип
//
Функция ДесериализоватьСущностьПримитивногоТипа(ИсходныеДанные)
	
	Результат = Неопределено;
	
		ПравилаДесериализации = ОбщегоНазначенияРМКПовтИсп.НаборПравилДесериализацииЗапретовПродаж();
		ИмяСущности = ИсходныеДанные.Ключ;
		
		Если ПравилаДесериализации.Свойство(ИмяСущности) Тогда
			
			ЗначениеСущности = ИсходныеДанные.Значение;
			
			ПравилоДесериализации = ПравилаДесериализации[ИмяСущности];
			
			ТипДанных = НРег(ПравилоДесериализации.ТипДанных);
			
			Если ТипДанных = "булево" Тогда
				
				ЗначениеПоУмолчанию = Ложь;
				
				Если ТипЗнч(ЗначениеСущности) = Тип("Число")
					ИЛИ ТипЗнч(ЗначениеСущности) = Тип("Строка") Тогда
					
					Попытка
						Результат = Булево(ЗначениеСущности);
					Исключение
						
						Результат = ЗначениеПоУмолчанию;
						ЗафиксироватьОшибкуПриведенияТипов(ИмяСущности, ПравилоДесериализации.ТипДанных);
						
					КонецПопытки;
					
				ИначеЕсли ТипЗнч(ЗначениеСущности) = Тип("Булево") Тогда
					Результат = ЗначениеСущности;
				Иначе
					Результат = ЗначениеПоУмолчанию;
				КонецЕсли;
				
			ИначеЕсли ТипДанных = "дата" ИЛИ ТипДанных = "время" ИЛИ ТипДанных = "датавремя" Тогда // АПК:1036 - опорный литерал
				
				ЗначениеПоУмолчанию = Дата(1, 1, 1, 0, 0, 0);
				
				Если ТипЗнч(ЗначениеСущности) = Тип("Строка") Тогда
					
					ЧастьДаты = ЧастиДаты[ТипДанных];
					Результат = СтроковыеФункцииКлиентСервер.СтрокаВДату(ЗначениеСущности, ЧастьДаты);
					
				Иначе
					Результат = ЗначениеПоУмолчанию;
				КонецЕсли;
				
			ИначеЕсли ТипДанных = "число" Тогда
				
				ЗначениеПоУмолчанию = 0;
				
				Если ТипЗнч(ЗначениеСущности) = Тип("Строка") Тогда
				
					Результат = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗначениеСущности);
					Если Результат = Неопределено Тогда 
						Результат = ЗначениеПоУмолчанию;
					КонецЕсли;
					
				ИначеЕсли ТипЗнч(ЗначениеСущности) = Тип("Число") Тогда
					Результат = ЗначениеСущности;
				Иначе
					Результат = ЗначениеПоУмолчанию;
				КонецЕсли;
			Иначе
				Результат = ЗначениеСущности;
			КонецЕсли;
			
		КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Десериализует сущность типа коллекция, поддержка десериализации вложенных коллекций не предусмотрена.
//
// Параметры:
//  ИсходныеДанные - Массив - исходные данные для десериализации
//
// Возвращаемое значение:
//  РезультатДесериализации - Массив
//
Функция ДесериализоватьКоллекцию(ИсходныеДанные)

	Результат = Новый Массив;
	
	ЗначениеИсходныхДанных = ИсходныеДанные.Значение;
	
	Если ТипЗнч(ЗначениеИсходныхДанных) = Тип("Массив") Тогда
		
		Для каждого Элемент Из ЗначениеИсходныхДанных Цикл
			
			Если ТипЗнч(Элемент) = Тип("Структура") Тогда
				ДесериализованноеЗначение = ДесериализоватьДанные(Элемент);
			ИначеЕсли НЕ ТипЗнч(Элемент) = Тип("Массив") Тогда
				ДесериализованноеЗначение = ДесериализоватьСущностьПримитивногоТипа(Элемент);
			КонецЕсли;
			
			Результат.Добавить(ДесериализованноеЗначение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗафиксироватьОшибкуПриведенияТипов(ИмяСущности, ТипПриведения)

	ОбщаяИнформацияОбОшибке = СтрШаблон(
		НСтр("ru = 'Не удалось преобразовать поле ответа %1 к типу %2'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			ИмяСущности, ТипПриведения);
	ЗаписьЖурналаРегистрации(ОбщаяИнформацияОбОшибке, УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область АвтоматическиеСкидки

// Рассчитывает автоматические скидки для РМК
//
// Параметры:
//  Объект - ДанныеФормыКоллекция - данные объекта рабочего места кассира.
//  НастройкиРМК - Структура - структура настроек рабочего места кассира
//
Процедура РассчитатьАвтоматическиеСкидки(ФормаРМК) Экспорт
	
	СтруктураПараметровРасчетаСкидок = ПолучитьСтруктуруПараметровРасчетаСкидок(ФормаРМК);
	
	// Получить из настроек РМК адрес сервиса, логин и пароль из защищенного хранилища
	ПараметрыПодключенияКСерверуЛояльности = ОбщегоНазначенияРМКВызовСервера.ЗначенияПараметровСервераЛояльности(ФормаРМК.ТекущаяНастройкаРМК);
	ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаРассчитатьАвтоматическиеСкидки(ПараметрыПодключенияКСерверуЛояльности, СтруктураПараметровРасчетаСкидок);
	
	СтруктураРезультат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
	
	Если СтруктураРезультат.ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОтвета = Неопределено;
	СтрокаJSON = СтруктураРезультат.ДанныеОтвета;
	СерверЛояльностиПолучательДанныхКлиентСервер.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
	
	ТаблицаТоваровИзЗапроса = ПолучитьТаблицуТоваровИзЗапроса(ДанныеОтвета);
	ПрименитьРезультатРасчета(ФормаРМК, ТаблицаТоваровИзЗапроса);
	
	ТаблицаПодарковИзЗапроса = ПолучитьТаблицуПодарковИзЗапроса(ДанныеОтвета, ФормаРМК.Объект.Организация);
	ЗагрузитьТаблицуНаФормуРМК(ФормаРМК.ТаблицаПодарков, ТаблицаПодарковИзЗапроса);
	
	ТаблицаСообщенийИзЗапроса = ПолучитьТаблицуСообщенийИзЗапроса(ДанныеОтвета);
	ЗагрузитьТаблицуНаФормуРМК(ФормаРМК.ТаблицаСообщений, ТаблицаСообщенийИзЗапроса);
	
	ТаблицаСкидокНаценокИзЗапроса = ПолучитьТаблицуСкидокНаценокИзЗапроса(ДанныеОтвета);
	ЗагрузитьТаблицуНаФормуРМК(ФормаРМК.ТаблицаСкидкиНаценки, ТаблицаСкидокНаценокИзЗапроса);
	
	ТаблицаБонусовИзЗапроса = ПолучитьТаблицуБонусовИзЗапроса(ДанныеОтвета);
	ЗагрузитьТаблицуНаФормуРМК(ФормаРМК.ТаблицаБонусныеБаллы, ТаблицаБонусовИзЗапроса);
	
	ТаблицаПромокодовИзЗапроса = ПолучитьТаблицуПромокодовИзЗапроса(ДанныеОтвета);
	ЗагрузитьТаблицуНаФормуРМК(ФормаРМК.ТаблицаПримененныхПромокодов, ТаблицаПромокодовИзЗапроса);
	
	ТаблицаДействующихСкидокИзЗапроса = ПолучитьТаблицуДействующихСкидок(ДанныеОтвета);
	ЗагрузитьТаблицуНаФормуРМК(ФормаРМК.ТаблицаДействующихСкидок, ТаблицаДействующихСкидокИзЗапроса);
	
	Если ДанныеОтвета.Свойство("LoyaltyCardDescription") И Не ДанныеОтвета.LoyaltyCardDescription.CardNotFound Тогда
		ЗаполнитьДанныеКартыЛояльности(ФормаРМК, ДанныеОтвета.LoyaltyCardDescription.LoyaltyCard);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтруктуруПараметровРасчетаСкидок(ФормаРМК)
	
	Объект = ФормаРМК.Объект;
	
	ДисконтнаяКарта 	 = Объект.ДисконтнаяКарта;
	МассивДисконтныхКарт = ПолучитьМассивДисконтныхКарт(ФормаРМК);
	ТорговыйОбъект 		 = Объект.ТорговыйОбъект;
	КассаККМ 			 = Объект.КассаККМ;
	РабочееМесто 		 = ПараметрыСеанса.РабочееМестоКлиента;
	Товары               = Объект.Товары.Выгрузить();
	ДатаОбъекта			 = ТекущаяДатаСеанса();
	
	ТаблицаПромокодов	 = ФормаРМК.ТаблицаПримененныхПромокодов.Выгрузить();
	ОтборПромокодов = Новый Структура("ЭтоАктивацияПромокода", Истина);
	СтрокиКУдалению = ТаблицаПромокодов.НайтиСтроки(ОтборПромокодов);
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаПромокодов.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	ТаблицаВыбранныхУправляемыхСкидок = ФормаРМК.ТаблицаВыбранныхУправляемыхСкидок.Выгрузить();
	
	СтруктураПараметров = СерверЛояльностиПолучательДанныхКлиентСервер.СтруктураПараметровРасчетаСкидок();
	СтруктураПараметров.Вставить("RecoverManagedDiscounts", Ложь);
	СтруктураПараметров.Вставить("ObjectTime", ДатаОбъекта);
	СтруктураПараметров.Вставить("CurrentDate", ДатаОбъекта);
	СтруктураПараметров.Вставить("LoyaltyCardPresented",
		ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеДисконтнойКартыЗаполнены(ФормаРМК));
	СтруктураПараметров.Вставить("HasGifts", Ложь);
	СтруктураПараметров.Вставить("UseApplicationPrices", Ложь);
	СтруктураПараметров.Вставить("ControlBalanceOfGoods", Ложь);
	СтруктураПараметров.Вставить("LoyaltyCardsList", МассивДисконтныхКарт);
	СтруктураПараметров.Вставить("PromocodesList", ПолучитьТаблицуПромокодов(ТаблицаПромокодов));
	СтруктураПараметров.Вставить("ControlledDiscountsList",
		ПолучитьТаблицуУправляемыхСкидок(Товары, ТаблицаВыбранныхУправляемыхСкидок));
	СтруктураПараметров.Вставить("RetailStore",
		СерверЛояльностиПолучательДанныхКлиентСервер.ПолучитьСтруктуруСсылки(ТорговыйОбъект));
	СтруктураПараметров.Вставить("ApplyObject", Ложь);
	СтруктураПараметров.Вставить("WorkPlace",
		СерверЛояльностиПолучательДанныхКлиентСервер.ПолучитьСтруктуруСсылки(РабочееМесто));
	СтруктураПараметров.Вставить("Goods", ПолучитьТаблицуТоваров(Товары));
	СтруктураПараметров.Вставить("GetLoyaltyCardData", НеобходимоЗапроситьДанныеКарты(ФормаРМК));
	СтруктураПараметров.Вставить("BlockBonuses", ?(ФормаРМК.ИспользоватьОплатуБонусами, "1", "0"));
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция НеобходимоЗапроситьДанныеКарты(ФормаРМК)
	
	РезультатФункции = Ложь;
	
	Если (Не ФормаРМК.РежимРаботыСЧеком = ФормаРМК.РежимыРаботыСЧеком.Оплата)
			И ИнтерфейсРМКСлужебныйКлиентСервер.СохраненТолькоНомерКартыЛояльности(ФормаРМК.ПараметрыКартыЛояльности) Тогда
			
		РезультатФункции = Истина;
			
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПолучитьМассивДисконтныхКарт(ФормаРМК)
	
	МассивДисконтныхКарт = Новый Массив;
	
	ДисконтнаяКарта = ФормаРМК.Объект.ДисконтнаяКарта;
	ПараметрыКарты = ФормаРМК.ПараметрыКартыЛояльности;
	Если ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
		ИмяРеквизита = "";
		ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьИмяРеквизитаКодКартыЛояльности(ИмяРеквизита);
		Если ЗначениеЗаполнено(ИмяРеквизита) И ЗначениеЗаполнено(ДисконтнаяКарта[ИмяРеквизита]) Тогда
			МассивДисконтныхКарт.Добавить(ДисконтнаяКарта[ИмяРеквизита]);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ПараметрыКарты) = Тип("Структура") И ЗначениеЗаполнено(ПараметрыКарты.КодКарты) Тогда
		МассивДисконтныхКарт.Добавить(ПараметрыКарты.КодКарты);
	КонецЕсли;
	
	Возврат МассивДисконтныхКарт;
	
КонецФункции

Функция ПолучитьТаблицуТоваров(Товары)
	
	МассивТоваров = Новый Массив;
	
	Для Каждого СтрокаТовар Из Товары Цикл 
		
		СтруктураСтроки = СерверЛояльностиПолучательДанныхКлиентСервер.СтруктураТоваровДляРасчетаСкидок();
		
		СтруктураСтроки.Вставить("LineUID", СтрокаТовар.ИдентификаторСтроки);
		СтруктураСтроки.Вставить("Count", СтрокаТовар.Количество);
		СтруктураСтроки.Вставить("PackagesCount", СтрокаТовар.КоличествоУпаковок);
		СтруктураСтроки.Вставить("Item", СерверЛояльностиПолучательДанныхКлиентСервер.ПолучитьСтруктуруСсылки(СтрокаТовар.Номенклатура));
		СтруктураСтроки.Вставить("Price", СтрокаТовар.Цена);
		СтруктураСтроки.Вставить("GiftSale", Ложь);
		СтруктураСтроки.Вставить("PercentOfAutomaticDiscount", СтрокаТовар.ПроцентАвтоматическойСкидки);
		СтруктураСтроки.Вставить("PercentOfManualDiscount", СтрокаТовар.ПроцентСкидкиНаценки);
		СтруктураСтроки.Вставить("VATRate", Строка(СтрокаТовар.СтавкаНДС));
		СтруктураСтроки.Вставить("Amount", СтрокаТовар.Цена * СтрокаТовар.КоличествоУпаковок - СтрокаТовар.СуммаСкидкиНаценки);
		СтруктураСтроки.Вставить("AmountOfAutomaticDiscount", СтрокаТовар.СуммаАвтоматическойСкидки);
		СтруктураСтроки.Вставить("TotalAmount", СтрокаТовар.СуммаБезСкидки);
		СтруктураСтроки.Вставить("VATAmount", СтрокаТовар.СуммаНДС);
		СтруктураСтроки.Вставить("AmountOfManualDiscount", СтрокаТовар.СуммаСкидкиНаценки);
		СтруктураСтроки.Вставить("Package", СерверЛояльностиПолучательДанныхКлиентСервер.ПолучитьСтруктуруСсылки(СтрокаТовар.Упаковка));
		СтруктураСтроки.Вставить("Variant", СерверЛояльностиПолучательДанныхКлиентСервер.ПолучитьСтруктуруСсылки(СтрокаТовар.Характеристика));
		
		МассивТоваров.Добавить(СтруктураСтроки);
		
	КонецЦикла;
	
	Возврат МассивТоваров;
	
КонецФункции

Функция ПолучитьТаблицуПромокодов(ТаблицаПромокодов)
	
	МассивПромокодов = Новый Массив;
	
	Для Каждого СтрокаПромокода Из ТаблицаПромокодов Цикл
		
		СтруктураСтроки = СерверЛояльностиПолучательДанныхКлиентСервер.СтруктураПромокодовДляРасчетаСкидок();
		СтруктураСтроки.Вставить("Promocode", СтрокаПромокода.Промокод);
		СкидкаНаценкаПромокода = "";
		Если ТипЗнч(СтрокаПромокода.СкидкаНаценка) = Тип("Строка") Тогда
			СкидкаНаценкаПромокода = СтрокаПромокода.СкидкаНаценка;
		Иначе
			СкидкаНаценкаПромокода = Строка(СтрокаПромокода.СкидкаНаценка.УникальныйИдентификатор());
		КонецЕсли;
		СтруктураСтроки.Вставить("PromocodeDiscountUID", СкидкаНаценкаПромокода);
		СтруктураСтроки.Вставить("PromocodeUID", СтрокаПромокода.УникальныйИдентификатор);
		
		МассивПромокодов.Добавить(СтруктураСтроки);
		
	КонецЦикла;
	
	Возврат МассивПромокодов;
	
КонецФункции

Функция ПолучитьТаблицуУправляемыхСкидок(Товары, ТаблицаВыбранныхУправляемыхСкидок)
	
	МассивУправляемыхСкидок = Новый Массив;
	
	Для Каждого СтрокаУправляемойСкидки Из ТаблицаВыбранныхУправляемыхСкидок Цикл
		
		СтруктураСтроки = СерверЛояльностиПолучательДанныхКлиентСервер.СтруктураВыбраннойУправляемойСкидки();
		СтруктураСтроки.Вставить("ControlledDiscount", Строка(СтрокаУправляемойСкидки.СкидкаНаценка));
		СтруктураСтроки.Вставить("ControlledDiscountUID", СтрокаУправляемойСкидки.ИдентификаторСкидки);
		СтруктураСтроки.Вставить("LineUID", СтрокаУправляемойСкидки.ИдентификаторСтроки);
		СтруктураСтроки.Вставить("KeyRelation", 0);
		
		Если ЗначениеЗаполнено(СтрокаУправляемойСкидки.ИдентификаторСтроки) Тогда
			СтрокиТоваровСкидки = Товары.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаУправляемойСкидки.ИдентификаторСтроки));
			Если СтрокиТоваровСкидки.Количество() Тогда
				СтруктураСтроки.Вставить("KeyRelation", СтрокиТоваровСкидки[0].НомерСтроки);
			КонецЕсли;
		КонецЕсли;
		
		МассивУправляемыхСкидок.Добавить(СтруктураСтроки);
		
	КонецЦикла;
	
	Возврат МассивУправляемыхСкидок;
	
КонецФункции

Процедура ПрименитьРезультатРасчета(ФормаРМК, ТаблицаРезультатРасчета)
	
	ТаблицаТовары = ФормаРМК.Объект.Товары;
	ТекущаяТаблицаТоваров = ТаблицаТовары.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТекущаяТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТекущаяТаблицаТоваров.Упаковка КАК Упаковка,
	|	ТекущаяТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТекущаяТаблицаТоваров.Количество КАК Количество,
	|	ТекущаяТаблицаТоваров.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТекущаяТаблицаТоваров.Цена КАК Цена,
	|	ТекущаяТаблицаТоваров.Сумма КАК Сумма,
	|	ТекущаяТаблицаТоваров.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ТекущаяТаблицаТоваров.СуммаБезСкидки КАК СуммаБезСкидки,
	|	ТекущаяТаблицаТоваров.СуммаНДС КАК СуммаНДС,
	|	ТекущаяТаблицаТоваров.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	ТекущаяТаблицаТоваров.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ТекущаяТаблицаТоваров.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ВЫРАЗИТЬ(ТекущаяТаблицаТоваров.ИдентификаторСтроки КАК СТРОКА(36)) КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТ_ТекущаяТаблица
	|ИЗ
	|	&ТекущаяТаблицаТоваров КАК ТекущаяТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРасчетаСкидок.Номенклатура КАК Номенклатура,
	|	ТаблицаРасчетаСкидок.Упаковка КАК Упаковка,
	|	ТаблицаРасчетаСкидок.Характеристика КАК Характеристика,
	|	ТаблицаРасчетаСкидок.Количество КАК Количество,
	|	ТаблицаРасчетаСкидок.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаРасчетаСкидок.Цена КАК Цена,
	|	ТаблицаРасчетаСкидок.Сумма КАК Сумма,
	|	ТаблицаРасчетаСкидок.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ТаблицаРасчетаСкидок.СуммаРучнойСкидки КАК СуммаСкидкиНаценки,
	|	ТаблицаРасчетаСкидок.СуммаНДС КАК СуммаНДС,
	|	ТаблицаРасчетаСкидок.ПроцентРучнойСкидки КАК ПроцентСкидкиНаценки,
	|	ТаблицаРасчетаСкидок.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ВЫРАЗИТЬ(ТаблицаРасчетаСкидок.ИдентификаторСтроки КАК СТРОКА(36)) КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТ_ТаблицаРасчетаСкидок
	|ИЗ
	|	&ТаблицаРасчетаСкидок КАК ТаблицаРасчетаСкидок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТекущаяТаблица.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ВТ_ТаблицаРасчетаСкидок.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаРасчетаСкидок.Упаковка КАК Упаковка,
	|	ВТ_ТаблицаРасчетаСкидок.Характеристика КАК Характеристика,
	|	ВТ_ТаблицаРасчетаСкидок.Количество КАК Количество,
	|	ВТ_ТаблицаРасчетаСкидок.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВТ_ТаблицаРасчетаСкидок.Цена КАК Цена,
	|	ВТ_ТаблицаРасчетаСкидок.Сумма КАК Сумма,
	|	ВТ_ТекущаяТаблица.СуммаБезСкидки КАК СуммаБезСкидки,
	|	ВТ_ТекущаяТаблица.СуммаБезСкидки - ВТ_ТаблицаРасчетаСкидок.Сумма - ВТ_ТаблицаРасчетаСкидок.СуммаСкидкиНаценки КАК СуммаАвтоматическойСкидки,
	|	ВТ_ТаблицаРасчетаСкидок.СуммаНДС КАК СуммаНДС,
	|	ВТ_ТекущаяТаблица.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	ВТ_ТаблицаРасчетаСкидок.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ВТ_ТаблицаРасчетаСкидок.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ВТ_ТекущаяТаблица.СуммаБезСкидки - ВТ_ТаблицаРасчетаСкидок.Сумма КАК СуммаСкидокОбщая
	|ИЗ
	|	ВТ_ТекущаяТаблица КАК ВТ_ТекущаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаРасчетаСкидок КАК ВТ_ТаблицаРасчетаСкидок
	|		ПО ВТ_ТекущаяТаблица.Номенклатура = ВТ_ТаблицаРасчетаСкидок.Номенклатура
	|			И ВТ_ТекущаяТаблица.Характеристика = ВТ_ТаблицаРасчетаСкидок.Характеристика
	|			И ВТ_ТекущаяТаблица.Упаковка = ВТ_ТаблицаРасчетаСкидок.Упаковка
	|			И ВТ_ТекущаяТаблица.ИдентификаторСтроки = ВТ_ТаблицаРасчетаСкидок.ИдентификаторСтроки
	|			И ВТ_ТекущаяТаблица.ПроцентАвтоматическойСкидки <> ВТ_ТаблицаРасчетаСкидок.ПроцентАвтоматическойСкидки";
	
	Запрос.УстановитьПараметр("ТекущаяТаблицаТоваров", ТекущаяТаблицаТоваров);
	Запрос.УстановитьПараметр("ТаблицаРасчетаСкидок", ТаблицаРезультатРасчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			МассивСтрок = ТаблицаТовары.НайтиСтроки(Новый Структура("ИдентификаторСтроки", Выборка.ИдентификаторСтроки));
			Для каждого НайденнаяСтрока Из МассивСтрок Цикл
				ЗаполнитьЗначенияСвойств(НайденнаяСтрока, Выборка, "Цена,
																	| Сумма,
																	| СуммаНДС,
																	| СуммаСкидкиНаценки,
																	| СуммаАвтоматическойСкидки,
																	| ПроцентСкидкиНаценки,
																	| ПроцентАвтоматическойСкидки,
																	| СуммаСкидокОбщая");
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьТаблицуНаФормуРМК(ТаблицаПриемник, ТаблицаИсточник)
	
	ТаблицаПриемник.Очистить();
	ТаблицаПриемник.Загрузить(ТаблицаИсточник);
	
КонецПроцедуры

Функция ПолучитьТаблицуТоваровИзЗапроса(ДанныеОтвета)
	
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2));
	
	ОписаниеТипаНоменклатура = Метаданные.ОпределяемыеТипы.НоменклатураРМК.Тип;
	ОписаниеТипаУпаковка = Метаданные.ОпределяемыеТипы.УпаковкаРМК.Тип;
	ОписаниеТипаХарактеристика = Метаданные.ОпределяемыеТипы.ХарактеристикаРМК.Тип;
	ОписаниеТипаСтавкаНДС = Метаданные.ОпределяемыеТипы.СтавкаНДСРМК.Тип;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура", ОписаниеТипаНоменклатура);
	ТаблицаТоваров.Колонки.Добавить("Упаковка", ОписаниеТипаУпаковка);
	ТаблицаТоваров.Колонки.Добавить("Характеристика", ОписаниеТипаХарактеристика);
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС", ОписаниеТипаСтавкаНДС);
	ТаблицаТоваров.Колонки.Добавить("КлючСвязи", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("Количество", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("КоличествоУпаковок", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("ПроцентАвтоматическойСкидки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("ПроцентРучнойСкидки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("Сумма", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("СуммаАвтоматическойСкидки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("СуммаВсего", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("СуммаРучнойСкидки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("Цена", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Строка"));
	
	Если ТипЗнч(ДанныеОтвета) = Тип("Структура") И ДанныеОтвета.Свойство("Goods") Тогда
		Для каждого СтрокаТаблицы Из ДанныеОтвета.Goods Цикл
			
			НоваяСтрока = ТаблицаТоваров.Добавить();
			НоваяСтрока.Номенклатура = ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "Item", ОписаниеТипаНоменклатура);
			НоваяСтрока.Упаковка = ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "Package", ОписаниеТипаУпаковка);
			НоваяСтрока.Характеристика = ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "Variant", ОписаниеТипаХарактеристика);
			НоваяСтрока.Цена = СтрокаТаблицы.Price;
			НоваяСтрока.Сумма = СтрокаТаблицы.Amount;
			НоваяСтрока.Количество = СтрокаТаблицы.Count;
			НоваяСтрока.КоличествоУпаковок = СтрокаТаблицы.PackagesCount;
			НоваяСтрока.СуммаАвтоматическойСкидки = СтрокаТаблицы.AmountOfAutomaticDiscount;
			НоваяСтрока.СуммаРучнойСкидки = СтрокаТаблицы.AmountOfManualDiscount;
			НоваяСтрока.ПроцентАвтоматическойСкидки = СтрокаТаблицы.PercentOfAutomaticDiscount;
			НоваяСтрока.ПроцентРучнойСкидки = СтрокаТаблицы.PercentOfManualDiscount;
			НоваяСтрока.СуммаВсего = СтрокаТаблицы.TotalAmount;
			НоваяСтрока.СуммаНДС = СтрокаТаблицы.VATAmount;
			НоваяСтрока.ИдентификаторСтроки = СтрокаТаблицы.LineUID;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Функция ПолучитьТаблицуПодарковИзЗапроса(ДанныеОтвета, Организация)
	
	ОписаниеТиповЧисло152 = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2));
	ОписаниеТиповЧисло153 = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3));
	
	ОписаниеТипаНоменклатура = Метаданные.ОпределяемыеТипы.НоменклатураРМК.Тип;
	ОписаниеТипаУпаковка = Метаданные.ОпределяемыеТипы.УпаковкаРМК.Тип;
	ОписаниеТипаХарактеристика = Метаданные.ОпределяемыеТипы.ХарактеристикаРМК.Тип;
	ОписаниеТипаОрганизация = Метаданные.ОпределяемыеТипы.ОрганизацияРМК.Тип;
	ОписаниеТипаТорговыйОбъект = Метаданные.ОпределяемыеТипы.ТорговыйОбъектРМК.Тип;
	
	ТаблицаПодарков = Новый ТаблицаЗначений;
	ТаблицаПодарков.Колонки.Добавить("Номенклатура", ОписаниеТипаНоменклатура);
	ТаблицаПодарков.Колонки.Добавить("Упаковка", ОписаниеТипаУпаковка);
	ТаблицаПодарков.Колонки.Добавить("Характеристика", ОписаниеТипаХарактеристика);
	ТаблицаПодарков.Колонки.Добавить("Организация", ОписаниеТипаОрганизация);
	ТаблицаПодарков.Колонки.Добавить("Склад", ОписаниеТипаТорговыйОбъект);
	ТаблицаПодарков.Колонки.Добавить("Количество", ОписаниеТиповЧисло153);
	ТаблицаПодарков.Колонки.Добавить("КоличествоУпаковок", ОписаниеТиповЧисло153);
	ТаблицаПодарков.Колонки.Добавить("Цена", ОписаниеТиповЧисло152);
	ТаблицаПодарков.Колонки.Добавить("Сумма", ОписаниеТиповЧисло152);
	ТаблицаПодарков.Колонки.Добавить("ВыборИзСписка", Новый ОписаниеТипов("Булево"));
	ТаблицаПодарков.Колонки.Добавить("ВыводитьПодарокВЧек", Новый ОписаниеТипов("Булево"));
	ТаблицаПодарков.Колонки.Добавить("ВладелецПодарка", Новый ОписаниеТипов("Строка"));
	ТаблицаПодарков.Колонки.Добавить("ПредставлениеВладельца", Новый ОписаниеТипов("Строка"));
	
	ЕстьПустыеЦены = Ложь;
	
	Если ТипЗнч(ДанныеОтвета) = Тип("Структура") И ДанныеОтвета.Свойство("Gifts") Тогда
		Для каждого СтрокаТаблицы Из ДанныеОтвета.Gifts Цикл
			
			НоваяСтрока = ТаблицаПодарков.Добавить();
			НоваяСтрока.Номенклатура = ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "Item", ОписаниеТипаНоменклатура);
			НоваяСтрока.Упаковка = ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "Package", ОписаниеТипаУпаковка);
			НоваяСтрока.Характеристика = ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "Variant", ОписаниеТипаХарактеристика);
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.Цена = СтрокаТаблицы.Price;
			НоваяСтрока.Сумма = СтрокаТаблицы.Amount;
			НоваяСтрока.Количество = СтрокаТаблицы.Count;
			НоваяСтрока.КоличествоУпаковок = СтрокаТаблицы.PackagesCount;
			НоваяСтрока.ВыборИзСписка = СтрокаТаблицы.GiftFromTheList;
			НоваяСтрока.ВыводитьПодарокВЧек = СтрокаТаблицы.ShoppingCart;
			НоваяСтрока.ВладелецПодарка = СтрокаТаблицы.GiftOwner;
			Если СтрокаТаблицы.Свойство("GiftName") Тогда
				НоваяСтрока.ПредставлениеВладельца = СтрокаТаблицы.GiftName;
			Иначе
				НоваяСтрока.ПредставлениеВладельца = НСтр("ru = 'Подарок на кассе'");
			КонецЕсли;
			
			Если СтрокаТаблицы.Price = 0 Тогда
				ЕстьПустыеЦены = Истина;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьПустыеЦены Тогда
		ДополнитьТаблицуПодарковЦенами(ТаблицаПодарков);
	КонецЕсли;
		
	Возврат ТаблицаПодарков;
	
КонецФункции 

Функция ПолучитьТаблицуСообщенийИзЗапроса(ДанныеОтвета)
	
	ТаблицаСообщений = Новый ТаблицаЗначений;
	ТаблицаСообщений.Колонки.Добавить("ТекстСообщения", Новый ОписаниеТипов("Строка"));
	ТаблицаСообщений.Колонки.Добавить("ПослеОформленияЧека", Новый ОписаниеТипов("Булево"));
	
	Если ТипЗнч(ДанныеОтвета) = Тип("Структура") И ДанныеОтвета.Свойство("Messages") Тогда
		Для каждого СтрокаТаблицы Из ДанныеОтвета.Messages Цикл
			
			НоваяСтрока = ТаблицаСообщений.Добавить();
			НоваяСтрока.ТекстСообщения = СтрокаТаблицы.MessageText;
			НоваяСтрока.ПослеОформленияЧека = СтрокаТаблицы.AfterSale;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаСообщений;
	
КонецФункции

Функция ПолучитьТаблицуСкидокНаценокИзЗапроса(ДанныеОтвета)
	
	ОписаниеТиповЧисло152 = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,2));
	ОписаниеТиповЧисло5 = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5,0));
	ОписаниеТипаСкидкаНаценка = Метаданные.ОпределяемыеТипы.СкидкаНаценкаРМК.Тип;

	ТаблицаСкидокНаценок = Новый ТаблицаЗначений;
	ТаблицаСкидокНаценок.Колонки.Добавить("КлючСвязи", ОписаниеТиповЧисло5);
	ТаблицаСкидокНаценок.Колонки.Добавить("СкидкаНаценка", ОписаниеТипаСкидкаНаценка);
	ТаблицаСкидокНаценок.Колонки.Добавить("Сумма", ОписаниеТиповЧисло152);
	ТаблицаСкидокНаценок.Колонки.Добавить("ОграниченаМинимальнойЦеной", Новый ОписаниеТипов("Булево"));
	ТаблицаСкидокНаценок.Колонки.Добавить("ЗначениеСкидкиНаценки", ОписаниеТиповЧисло152);
	ТаблицаСкидокНаценок.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Строка"));
	ТаблицаСкидокНаценок.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	Если ТипЗнч(ДанныеОтвета) = Тип("Структура") И ДанныеОтвета.Свойство("DiscountsList") Тогда
		Для каждого СтрокаТаблицы Из ДанныеОтвета.DiscountsList Цикл
			
			НоваяСтрока = ТаблицаСкидокНаценок.Добавить();
			НоваяСтрока.КлючСвязи = СтрокаТаблицы.KeyRelation;
			НоваяСтрока.СкидкаНаценка = ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "Discount", ОписаниеТипаСкидкаНаценка);
			НоваяСтрока.Сумма = СтрокаТаблицы.Amount;
			НоваяСтрока.ОграниченаМинимальнойЦеной = СтрокаТаблицы.MinimalPriceRestriction;
			НоваяСтрока.ЗначениеСкидкиНаценки = СтрокаТаблицы.DiscountValue;
			НоваяСтрока.ИдентификаторСтроки = СтрокаТаблицы.LineUID;
			НоваяСтрока.Представление = СтрокаТаблицы.Discount.Name;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаСкидокНаценок;
	
КонецФункции

Функция ПолучитьТаблицуБонусовИзЗапроса(ДанныеОтвета)
	
	ОписаниеТиповЧисло152 = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,2));
	ОписаниеТиповЧисло5 = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5,0));
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ОписаниеТипаСкидкаНаценка = Метаданные.ОпределяемыеТипы.СкидкаНаценкаРМК.Тип;
	ОписаниеТипаБонуснаяПрограмма = Метаданные.ОпределяемыеТипы.БонуснаяПрограммаРМК.Тип;
	
	ТаблицаБонусныеБаллы = Новый ТаблицаЗначений;
	ТаблицаБонусныеБаллы.Колонки.Добавить("КлючСвязи", ОписаниеТиповЧисло5);
	ТаблицаБонусныеБаллы.Колонки.Добавить("СкидкаНаценка", ОписаниеТипаСкидкаНаценка);
	ТаблицаБонусныеБаллы.Колонки.Добавить("БонуснаяПрограмма", ОписаниеТипаБонуснаяПрограмма);
	ТаблицаБонусныеБаллы.Колонки.Добавить("ДатаНачисления", ОписаниеТиповДата);
	ТаблицаБонусныеБаллы.Колонки.Добавить("ДатаСписания", ОписаниеТиповДата);
	ТаблицаБонусныеБаллы.Колонки.Добавить("КоличествоБонусныхБаллов", ОписаниеТиповЧисло152);
	
	СвойствоПравильное = "BonusesToAccrue";
	СвойствоНеправильное = "BonusesToАccrue";
	
	СвойствоПроверки = СвойствоПравильное;
	Если ТипЗнч(ДанныеОтвета) = Тип("Структура") И ДанныеОтвета.Свойство(СвойствоНеправильное) Тогда
		СвойствоПроверки = СвойствоНеправильное;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеОтвета) = Тип("Структура") И ДанныеОтвета.Свойство(СвойствоПроверки) Тогда
		Для каждого СтрокаТаблицы Из ДанныеОтвета[СвойствоПроверки] Цикл
			
			НоваяСтрока = ТаблицаБонусныеБаллы.Добавить();
			НоваяСтрока.КлючСвязи = СтрокаТаблицы.KeyRelation;
			НоваяСтрока.СкидкаНаценка = ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "Discount", ОписаниеТипаСкидкаНаценка);
			НоваяСтрока.БонуснаяПрограмма = ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "BonusProgramm", ОписаниеТипаБонуснаяПрограмма);
			НоваяСтрока.ДатаНачисления = ПрочитатьДатуJSON(СтрокаТаблицы.AccuralDate, ФорматДатыJSON.ISO);
			НоваяСтрока.ДатаСписания = ПрочитатьДатуJSON(СтрокаТаблицы.WriteOffDate, ФорматДатыJSON.ISO);
			НоваяСтрока.КоличествоБонусныхБаллов = СтрокаТаблицы.BonusCount;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаБонусныеБаллы;
	
КонецФункции

Функция ПолучитьТаблицуПромокодовИзЗапроса(ДанныеОтвета)
	
	ОписаниеТипаПромокод = Метаданные.ОпределяемыеТипы.ПромокодРМК.Тип;
	ОписаниеТипаСкидкаНаценка = Метаданные.ОпределяемыеТипы.СкидкаНаценкаРМК.Тип;
	ОписаниеТипаУсловиеПредоставленияСкидки = Метаданные.ОпределяемыеТипы.УсловиеПредоставленияСкидкиРМК.Тип;
	
	ТаблицаПромокодов = Новый ТаблицаЗначений;
	ТаблицаПромокодов.Колонки.Добавить("Промокод", ОписаниеТипаПромокод);
	ТаблицаПромокодов.Колонки.Добавить("ОписаниеОшибкиПрименения", Новый ОписаниеТипов("Строка"));
	ТаблицаПромокодов.Колонки.Добавить("СкидкаПредоставлена", Новый ОписаниеТипов("Булево"));
	ТаблицаПромокодов.Колонки.Добавить("ЭтоАктивацияПромокода", Новый ОписаниеТипов("Булево"));
	ТаблицаПромокодов.Колонки.Добавить("СкидкаНаценка", ОписаниеТипаСкидкаНаценка);
	ТаблицаПромокодов.Колонки.Добавить("УсловиеПредоставленияСкидки", ОписаниеТипаУсловиеПредоставленияСкидки);
	ТаблицаПромокодов.Колонки.Добавить("УникальныйИдентификатор", Новый ОписаниеТипов("Строка"));
	
	Если ТипЗнч(ДанныеОтвета) = Тип("Структура") И ДанныеОтвета.Свойство("PromocodesList") Тогда
		Для каждого СтрокаТаблицы Из ДанныеОтвета.PromocodesList Цикл
			
			НоваяСтрока = ТаблицаПромокодов.Добавить();
			НоваяСтрока.Промокод = СтрокаТаблицы.Promocode;
			НоваяСтрока.ОписаниеОшибкиПрименения = СтрокаТаблицы.ErrorDescription;
			НоваяСтрока.СкидкаПредоставлена = СтрокаТаблицы.DiscountActive;
			НоваяСтрока.ЭтоАктивацияПромокода = СтрокаТаблицы.PromocodeActivation;
			НоваяСтрока.СкидкаНаценка = ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "PromocodeDiscount", ОписаниеТипаСкидкаНаценка);
			НоваяСтрока.УсловиеПредоставленияСкидки = ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "DiscountCondition", ОписаниеТипаУсловиеПредоставленияСкидки);
			НоваяСтрока.УникальныйИдентификатор = СтрокаТаблицы.PromocodeUID;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаПромокодов;
	
КонецФункции

Процедура ДополнитьТаблицуПодарковЦенами(ТаблицаПодарков)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПодарков.Номенклатура КАК Номенклатура,
		|	ТаблицаПодарков.Характеристика КАК Характеристика,
		|	ТаблицаПодарков.Упаковка КАК Упаковка,
		|	ТаблицаПодарков.Цена КАК Цена,
		|	ТаблицаПодарков.Сумма КАК Сумма,
		|	ТаблицаПодарков.Количество КАК Количество,
		|	ТаблицаПодарков.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТаблицаПодарков.ВыборИзСписка КАК ВыборИзСписка,
		|	ТаблицаПодарков.ВыводитьПодарокВЧек КАК ВыводитьПодарокВЧек,
		|	ТаблицаПодарков.ВладелецПодарка КАК ВладелецПодарка
		|ПОМЕСТИТЬ ВТ_ТаблицаПодарков
		|ИЗ
		|	&ТаблицаПодарков КАК ТаблицаПодарков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаПодарков.Номенклатура КАК Номенклатура,
		|	ВТ_ТаблицаПодарков.Характеристика КАК Характеристика,
		|	ВТ_ТаблицаПодарков.Упаковка КАК Упаковка,
		|	ВЫБОР
		|		КОГДА ВТ_ТаблицаПодарков.Цена <> 0
		|			ТОГДА ВТ_ТаблицаПодарков.Цена
		|		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена
		|	КОНЕЦ КАК Цена,
		|	ВЫБОР
		|		КОГДА ВТ_ТаблицаПодарков.Сумма <> 0
		|			ТОГДА ВТ_ТаблицаПодарков.Сумма
		|		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена * ВТ_ТаблицаПодарков.Количество
		|	КОНЕЦ КАК Сумма,
		|	ВТ_ТаблицаПодарков.Количество КАК Количество,
		|	ВТ_ТаблицаПодарков.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ВТ_ТаблицаПодарков.ВыборИзСписка КАК ВыборИзСписка,
		|	ВТ_ТаблицаПодарков.ВыводитьПодарокВЧек КАК ВыводитьПодарокВЧек,
		|	ВТ_ТаблицаПодарков.ВладелецПодарка КАК ВладелецПодарка
		|ИЗ
		|	ВТ_ТаблицаПодарков КАК ВТ_ТаблицаПодарков
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ВТ_ТаблицаПодарков.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И ВТ_ТаблицаПодарков.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
		|			И (ВТ_ТаблицаПодарков.Цена = 0)";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ТаблицаПодарков", ТаблицаПодарков);
	
	ТаблицаПодарков = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Функция ПолучитьДесериализованноеСсылочноеЗначение(ВходящиеДанные, ИмяПараметра, ТипЗначения) Экспорт
	
	ЗначениеПараметра = Неопределено;
	
	Попытка
		Параметр = ВходящиеДанные[ИмяПараметра];
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Ref") Тогда
			СтроковоеЗначениеПараметра = Параметр.Ref;
		Иначе
			СтроковоеЗначениеПараметра = Параметр;
		КонецЕсли;
		
		ТипыЗначения = ТипЗначения.Типы();
		Для Каждого Тип Из ТипыЗначения Цикл
			Если ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
				МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Новый(Тип));
				СсылкаНаОбъект = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(СтроковоеЗначениеПараметра));
			Иначе
				СсылкаНаОбъект = СтроковоеЗначениеПараметра;
			КонецЕсли;
			Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
				ЗначениеПараметра = СсылкаНаОбъект;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ЗначениеПараметра) И НЕ ТипЗнч(Параметр) = Тип("Структура") Тогда
			ЗначениеПараметра = Параметр;
		КонецЕсли;
	
	Исключение
		ТипыЗначения = ТипЗначения.Типы();
		Для Каждого Тип Из ТипыЗначения Цикл
			ЗначениеПараметра = Новый(Тип);
			Прервать;
		КонецЦикла;
	КонецПопытки;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

Процедура ЗаполнитьДанныеКартыЛояльности(ФормаРМК, ОписаниеКарты)
	
	НайденнаяКартаЛояльности = Неопределено;
	ФормаРМК.ПараметрыКартыЛояльности = ИнтерфейсРМКСлужебный.ЗаполнитьПараметрыКартыЛояльности(ОписаниеКарты);
	НайденнаяКартаЛояльности = ФормаРМК.ПараметрыКартыЛояльности;
	
	ШтрихкодированиеРМК.ЗаполнитьФормуПоДисконтнойКарте(ФормаРМК, НайденнаяКартаЛояльности);
	Если ФормаРМК.ИспользоватьОплатуБонусами Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.ОтобразитьИнформациюОБонусныхБаллах(ФормаРМК, ОписаниеКарты.BonusData);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТаблицуДействующихСкидок(ДанныеОтвета)
	
	ОписаниеТиповЧисло152 = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,2));
	ОписаниеТиповЧисло5 = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5,0));
	ОписаниеТипаСкидкаНаценка = Метаданные.ОпределяемыеТипы.СкидкаНаценкаРМК.Тип;
	
	ТаблицаДействующихСкидок = Новый ТаблицаЗначений;
	ТаблицаДействующихСкидок.Колонки.Добавить("СкидкаНаценка", ОписаниеТипаСкидкаНаценка);
	ТаблицаДействующихСкидок.Колонки.Добавить("СкидкаНаценкаПредставление", Новый ОписаниеТипов("Строка"));
	ТаблицаДействующихСкидок.Колонки.Добавить("ЗначениеСкидкиНаценки", ОписаниеТиповЧисло152);
	ТаблицаДействующихСкидок.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	ТаблицаДействующихСкидок.Колонки.Добавить("Родитель", ОписаниеТипаСкидкаНаценка);
	ТаблицаДействующихСкидок.Колонки.Добавить("КоличествоВыполненныхУсловий",ОписаниеТиповЧисло5);
	ТаблицаДействующихСкидок.Колонки.Добавить("УсловияПредоставления", Новый ОписаниеТипов("Строка"));
	
	Если ТипЗнч(ДанныеОтвета) = Тип("Структура") И ДанныеОтвета.Свойство("CurrentDiscounts") Тогда
		Для Каждого СтрокаТаблицы Из ДанныеОтвета.CurrentDiscounts Цикл
			НоваяСтрока = ТаблицаДействующихСкидок.Добавить();
			НоваяСтрока.СкидкаНаценка = СтрокаТаблицы.Discounts.Ref;
			НоваяСтрока.СкидкаНаценкаПредставление = СтрокаТаблицы.Discounts.Name;
			НоваяСтрока.ЗначениеСкидкиНаценки = СтрокаТаблицы.DiscountValue;
			НоваяСтрока.ЭтоГруппа = СтрокаТаблицы.Group;
			НоваяСтрока.Родитель = СтрокаТаблицы.Parent;
			НоваяСтрока.КоличествоВыполненныхУсловий = СтрокаТаблицы.Completed;
			НоваяСтрока.УсловияПредоставления = СтрокаТаблицы.TermsDiscounts;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаДействующихСкидок;
КонецФункции

#КонецОбласти

#Область ФормированиеПечатныхФорм_СлужебныеПроцедуры

Функция ИменаПолейКоллекцииПечатныхФорм()
	
	Поля = Новый Массив;
	Поля.Добавить("ИмяМакета");
	Поля.Добавить("ИмяВРЕГ");
	Поля.Добавить("СинонимМакета");
	Поля.Добавить("ТабличныйДокумент");
	Поля.Добавить("Экземпляров");
	Поля.Добавить("Картинка");
	Поля.Добавить("ПолныйПутьКМакету");
	Поля.Добавить("ИмяФайлаПечатнойФормы");
	Поля.Добавить("ОфисныеДокументы");
	Поля.Добавить("ДоступенВыводНаДругихЯзыках");
	
	Возврат Поля;
	
КонецФункции

#КонецОбласти

// Возвращает текст запроса наличия запретов продаж по времени.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаДействующихЗапретовПродаж()
	
	Возврат "ВЫБРАТЬ
	|	УсловияЗапретаПродаж.Организация КАК Организация,
	|	УсловияЗапретаПродаж.ВидНоменклатуры КАК ВидНоменклатуры,
	|	УсловияЗапретаПродаж.ОсобенностьУчета КАК ОсобенностьУчета,
	|	УсловияЗапретаПродаж.ДеньНедели КАК ДеньНедели,
	|	УсловияЗапретаПродаж.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	УсловияЗапретаПродаж.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	УсловияЗапретаПродаж.ВремяНачала КАК ВремяНачала,
	|	УсловияЗапретаПродаж.ВремяОкончания КАК ВремяОкончания,
	|	УсловияЗапретаПродаж.ИдентификаторЗапрета КАК ИдентификаторЗапрета,
	|	ВЫБОР
	|		КОГДА УсловияЗапретаПродаж.ДатаНачалаДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА 9999999999
	|		ИНАЧЕ РАЗНОСТЬДАТ(УсловияЗапретаПродаж.ДатаНачалаДействия, &ТекущаяДата, СЕКУНДА)
	|	КОНЕЦ КАК КоличествоСекундМеждуНачаломИТекущейДатой
	|ПОМЕСТИТЬ втИсходныеДанные
	|ИЗ
	|	РегистрСведений.УсловияЗапретаПродажРМК КАК УсловияЗапретаПродаж
	|ГДЕ
	|	УсловияЗапретаПродаж.Организация = &Организация
	|	И НАЧАЛОПЕРИОДА(УсловияЗапретаПродаж.ДатаНачалаДействия, ДЕНЬ) <= &ТекущаяДата
	|	И КОНЕЦПЕРИОДА(УсловияЗапретаПродаж.ДатаОкончанияДействия, ДЕНЬ) >= &ТекущаяДата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УсловияЗапретаПродаж.Организация,
	|	УсловияЗапретаПродаж.ВидНоменклатуры,
	|	УсловияЗапретаПродаж.ОсобенностьУчета,
	|	УсловияЗапретаПродаж.ДеньНедели,
	|	УсловияЗапретаПродаж.ДатаНачалаДействия,
	|	УсловияЗапретаПродаж.ДатаОкончанияДействия,
	|	УсловияЗапретаПродаж.ВремяНачала,
	|	УсловияЗапретаПродаж.ВремяОкончания,
	|	УсловияЗапретаПродаж.ИдентификаторЗапрета,
	|	ВЫБОР
	|		КОГДА УсловияЗапретаПродаж.ДатаНачалаДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА 9999999999
	|		ИНАЧЕ РАЗНОСТЬДАТ(УсловияЗапретаПродаж.ДатаНачалаДействия, &ТекущаяДата, СЕКУНДА)
	|	КОНЕЦ
	|ИЗ
	|	РегистрСведений.УсловияЗапретаПродажРМК КАК УсловияЗапретаПродаж
	|ГДЕ
	|	УсловияЗапретаПродаж.Организация = &Организация
	|	И НАЧАЛОПЕРИОДА(УсловияЗапретаПродаж.ДатаНачалаДействия, ДЕНЬ) <= &ТекущаяДата
	|	И УсловияЗапретаПродаж.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УсловияЗапретаПродаж.Организация,
	|	УсловияЗапретаПродаж.ВидНоменклатуры,
	|	УсловияЗапретаПродаж.ОсобенностьУчета,
	|	УсловияЗапретаПродаж.ДеньНедели,
	|	УсловияЗапретаПродаж.ДатаНачалаДействия,
	|	УсловияЗапретаПродаж.ДатаОкончанияДействия,
	|	УсловияЗапретаПродаж.ВремяНачала,
	|	УсловияЗапретаПродаж.ВремяОкончания,
	|	УсловияЗапретаПродаж.ИдентификаторЗапрета,
	|	ВЫБОР
	|		КОГДА УсловияЗапретаПродаж.ДатаНачалаДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА 9999999999
	|		ИНАЧЕ РАЗНОСТЬДАТ(УсловияЗапретаПродаж.ДатаНачалаДействия, &ТекущаяДата, СЕКУНДА)
	|	КОНЕЦ
	|ИЗ
	|	РегистрСведений.УсловияЗапретаПродажРМК КАК УсловияЗапретаПродаж
	|ГДЕ
	|	УсловияЗапретаПродаж.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И НАЧАЛОПЕРИОДА(УсловияЗапретаПродаж.ДатаНачалаДействия, ДЕНЬ) <= &ТекущаяДата
	|	И КОНЕЦПЕРИОДА(УсловияЗапретаПродаж.ДатаОкончанияДействия, ДЕНЬ) >= &ТекущаяДата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УсловияЗапретаПродаж.Организация,
	|	УсловияЗапретаПродаж.ВидНоменклатуры,
	|	УсловияЗапретаПродаж.ОсобенностьУчета,
	|	УсловияЗапретаПродаж.ДеньНедели,
	|	УсловияЗапретаПродаж.ДатаНачалаДействия,
	|	УсловияЗапретаПродаж.ДатаОкончанияДействия,
	|	УсловияЗапретаПродаж.ВремяНачала,
	|	УсловияЗапретаПродаж.ВремяОкончания,
	|	УсловияЗапретаПродаж.ИдентификаторЗапрета,
	|	ВЫБОР
	|		КОГДА УсловияЗапретаПродаж.ДатаНачалаДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА 9999999999
	|		ИНАЧЕ РАЗНОСТЬДАТ(УсловияЗапретаПродаж.ДатаНачалаДействия, &ТекущаяДата, СЕКУНДА)
	|	КОНЕЦ
	|ИЗ
	|	РегистрСведений.УсловияЗапретаПродажРМК КАК УсловияЗапретаПродаж
	|ГДЕ
	|	УсловияЗапретаПродаж.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И НАЧАЛОПЕРИОДА(УсловияЗапретаПродаж.ДатаНачалаДействия, ДЕНЬ) <= &ТекущаяДата
	|	И УсловияЗапретаПродаж.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ВидНоменклатуры,
	|	ОсобенностьУчета,
	|	ИдентификаторЗапрета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИсходныеДанные.Организация КАК Организация,
	|	втИсходныеДанные.ВидНоменклатуры КАК ВидНоменклатуры,
	|	втИсходныеДанные.ОсобенностьУчета КАК ОсобенностьУчета,
	|	втИсходныеДанные.ИдентификаторЗапрета КАК ИдентификаторЗапрета,
	|	МИНИМУМ(втИсходныеДанные.КоличествоСекундМеждуНачаломИТекущейДатой) КАК КоличествоСекундМеждуНачаломИТекущейДатой
	|ПОМЕСТИТЬ втМинимальныеОтклоненияОтНачалаДня
	|ИЗ
	|	втИсходныеДанные КАК втИсходныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	втИсходныеДанные.Организация,
	|	втИсходныеДанные.ВидНоменклатуры,
	|	втИсходныеДанные.ОсобенностьУчета,
	|	втИсходныеДанные.ИдентификаторЗапрета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторЗапрета,
	|	Организация,
	|	ВидНоменклатуры,
	|	ОсобенностьУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИсходныеДанные.КоличествоСекундМеждуНачаломИТекущейДатой КАК КоличествоСекундМеждуНачаломИТекущейДатой,
	|	втИсходныеДанные.Организация КАК Организация,
	|	втИсходныеДанные.ВидНоменклатуры КАК ВидНоменклатуры,
	|	втИсходныеДанные.ОсобенностьУчета КАК ОсобенностьУчета,
	|	втИсходныеДанные.ДеньНедели КАК ДеньНедели,
	|	втИсходныеДанные.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	втИсходныеДанные.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	втИсходныеДанные.ВремяНачала КАК ВремяНачала,
	|	втИсходныеДанные.ВремяОкончания КАК ВремяОкончания,
	|	втИсходныеДанные.ИдентификаторЗапрета КАК ИдентификаторЗапрета
	|ИЗ
	|	втИсходныеДанные КАК втИсходныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМинимальныеОтклоненияОтНачалаДня КАК втМинимальныеОтклоненияОтНачалаДня
	|		ПО втИсходныеДанные.ИдентификаторЗапрета = втМинимальныеОтклоненияОтНачалаДня.ИдентификаторЗапрета
	|			И втИсходныеДанные.Организация = втМинимальныеОтклоненияОтНачалаДня.Организация
	|			И втИсходныеДанные.ВидНоменклатуры = втМинимальныеОтклоненияОтНачалаДня.ВидНоменклатуры
	|			И втИсходныеДанные.ОсобенностьУчета = втМинимальныеОтклоненияОтНачалаДня.ОсобенностьУчета
	|			И втИсходныеДанные.КоличествоСекундМеждуНачаломИТекущейДатой = втМинимальныеОтклоненияОтНачалаДня.КоличествоСекундМеждуНачаломИТекущейДатой";
	
КонецФункции

// Возвращает склонение в выбранном падеже либо исходную строку, если передана пустая
//
// Параметры:
//  ФИО		- Строка - Строка, в которой содержится ФИО для склонения.
//  Падеж 	- Число - падеж, в который необходимо просклонять представление объекта.
//							1 - Именительный.
//							2 - Родительный.
//							3 - Дательный.
//							4 - Винительный.
//							5 - Творительный.
//							6 - Предложный.
//  Объект 	- ОбъектСклонения - Ссылка на объект, реквизит которого склоняется.
//  Пол		- Число - Число - пол физического лица, 
//							1 - мужской, 
//							2 - женский.
//
// Возвращаемое значение:
//  Строка - Результат склонения ФИО в падеже.
//
Функция СклонениеФИОВУказанномПадеже(ФИО, Падеж, Пол = Неопределено)
	
	ЭтоLinuxСервер = ОбщегоНазначенияРМККлиентСервер.ЭтоLinuxСервер();
	
	Если ЭтоLinuxСервер ИЛИ ПустаяСтрока(ФИО) Тогда
		Возврат ФИО;
	Иначе
		
		СклонениеФИО = СклонениеПредставленийОбъектов.ПросклонятьФИО(ФИО, Падеж, Неопределено, Пол);
		Возврат СклонениеФИО;
		
	КонецЕсли;

КонецФункции

// Проверяет, что включена ф.о "Использовать подключаемое оборудование",
// настроено ли оборудование и авторизовался пользователь,
// а не внешний пользователь.
Функция ИспользоватьПодключаемоеОборудование(ТипыПодключенногоОборудования = Неопределено)
	
	ИспользоватьПодключаемоеОборудование = ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование");
	ПользовательАвторизовался 	= 
		ТипЗнч(Пользователи.АвторизованныйПользователь()) = Тип("СправочникСсылка.Пользователи");
	
	Если ТипыПодключенногоОборудования = Неопределено Тогда
		ТипыПодключенногоОборудования = ПодключаемоеОборудованиеРМКПовтИсп.ТипыПодключенногоОборудования();
	КонецЕсли;
	
	Возврат
		ИспользоватьПодключаемоеОборудование
		И ПользовательАвторизовался
		И ТипыПодключенногоОборудования <> Неопределено
		И ТипыПодключенногоОборудования.Количество() > 0;
												 
КонецФункции

Функция ПодготовитьДеревоЧековПоДаннымРасшифровки(ДанныеРасшифровки)
	
	ДеревоЧеков = Новый ДеревоЗначений;
	ДеревоЧеков.Колонки.Добавить("Чек", Метаданные.ОпределяемыеТипы.ЧекККМРМК.Тип);
	ДеревоЧеков.Колонки.Добавить("ЧекПредставление", Новый ОписаниеТипов("Строка"));
	ДеревоЧеков.Колонки.Добавить("Сумма", Метаданные.ОпределяемыеТипы.Число15_2РМК.Тип);
	ДеревоЧеков.Колонки.Добавить("ТекстОшибки", Новый ОписаниеТипов("Строка"));
	ДеревоЧеков.Колонки.Добавить("НоменклатураПредставление", Новый ОписаниеТипов("Строка"));
	ДеревоЧеков.Колонки.Добавить("Количество", Метаданные.ОпределяемыеТипы.Число15_3РМК.Тип);
	
	Для Каждого ЭлементЧека Из ДанныеРасшифровки.МассивЧеков Цикл
		НоваяСтрока = ДеревоЧеков.Строки.Добавить();
		НоваяСтрока.Чек = ЭлементЧека.Чек;
		НоваяСтрока.ЧекПредставление = "";
		Если ДанныеРасшифровки.ГруппаРаздела = "Ошибки" Тогда
			НоваяСтрока.ТекстОшибки = ЭлементЧека.ТекстОшибки;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат ДеревоЧеков;
	
КонецФункции

Функция СформироватьРасшифровкуОшибокОтчетаЗаСмену(ДеревоЧековТоваров, ГруппаРаздела, ИмяРаздела)
	Перем ОбластьШапкаЧеков, ОбластьЧек;
	
	ТабличныйДокументРасшифровки = Новый ТабличныйДокумент;
	Макет = ПолучитьОбщийМакет("ПФ_MXL_ОтчетЗаСменуРасшифровкиРМК");
	Если ГруппаРаздела = "Ошибки" Тогда
		ОбластьШапкаЧеков = Макет.ПолучитьОбласть("ОшибкиШапкаЧеков");
		ОбластьЧек = Макет.ПолучитьОбласть("ОшибкиЧек");
	Иначе
		ОбластьШапкаЧеков = Макет.ПолучитьОбласть("НеПробитыеШапкаЧеков");
		ОбластьЧек = Макет.ПолучитьОбласть("НеПробитыеЧек");
	КонецЕсли;	
	ОбластьШапкаТоваров = Макет.ПолучитьОбласть("ШапкаТоваров");
	ОбластьТовар = Макет.ПолучитьОбласть("Товар");
	
	ОбластьШапкаЧеков.Параметры.ИмяРаздела = ИмяРаздела;
	ТабличныйДокументРасшифровки.Вывести(ОбластьШапкаЧеков);
	ТабличныйДокументРасшифровки.НачатьАвтогруппировкуСтрок();
	Для Каждого СтрокаЧека Из ДеревоЧековТоваров.Строки Цикл
		ОбластьЧек.Параметры.ЧекПредставление = ?(СтрокаЧека.ЧекПредставление = "", Строка(СтрокаЧека.Чек), СтрокаЧека.ЧекПредставление);
		ОбластьЧек.Параметры.Сумма = СтрокаЧека.Сумма;
		Если ГруппаРаздела = "Ошибки" Тогда
			ОбластьЧек.Параметры.ТекстОшибки = СтрокаЧека.ТекстОшибки;
		КонецЕсли;
		ТабличныйДокументРасшифровки.Вывести(ОбластьЧек, 0, , Ложь);
		Если СтрокаЧека.Строки.Количество() > 0 Тогда
			
			ТабличныйДокументРасшифровки.Вывести(ОбластьШапкаТоваров, 1, , Ложь);
			Для Каждого СтрокаТовара Из СтрокаЧека.Строки Цикл
				ОбластьТовар.Параметры.Товар = СтрокаТовара.НоменклатураПредставление;
				ОбластьТовар.Параметры.Количество = СтрокаТовара.Количество;
				ОбластьТовар.Параметры.Сумма = СтрокаТовара.Сумма;
				ТабличныйДокументРасшифровки.Вывести(ОбластьТовар, 1, , Ложь);
			КонецЦикла;	
			
		КонецЕсли;	
	КонецЦикла;
	ТабличныйДокументРасшифровки.ЗакончитьАвтогруппировкуСтрок();
	
	Возврат ТабличныйДокументРасшифровки;
	
КонецФункции	

#КонецОбласти
