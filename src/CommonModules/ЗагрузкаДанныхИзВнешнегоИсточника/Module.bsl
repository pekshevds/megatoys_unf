#Область ПрограммныйИнтерфейс

Процедура ПриСозданииНаСервере(ОбъектЗаполнения, НастройкиЗагрузкиДанных, ЭтотОбъект, ИспользоватьФормуБСП = Истина) Экспорт

	НастройкиЗагрузкиДанных = Новый Структура;

	НастройкиЗагрузкиДанных.Вставить("ИспользоватьСовместно", ИспользоватьСовместноСПоставляемойЧастьюБСП()
		И ИспользоватьФормуБСП И Не ОбщегоНазначения.ЭтоВебКлиент() И Не ОбщегоНазначения.ЭтоМобильныйКлиент());

	Если ОбщегоНазначения.ЭтоВебКлиент() Или ОбщегоНазначения.ЭтоМобильныйКлиент()
		Или Не НастройкиЗагрузкиДанных.ИспользоватьСовместно Тогда

		СпособЗагрузкиДанныхИзВнешнихИсточников = Перечисления.СпособЗагрузкиДанныхИзВнешнихИсточников.ВыборФайла;

	Иначе

		СпособЗагрузкиДанныхИзВнешнихИсточников = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки(
			"СпособЗагрузкиДанныхИзВнешнихИсточников");
		Если Не ЗначениеЗаполнено(СпособЗагрузкиДанныхИзВнешнихИсточников) Тогда

			СпособЗагрузкиДанныхИзВнешнихИсточников = Перечисления.СпособЗагрузкиДанныхИзВнешнихИсточников.ВыборФайла;
			РегистрыСведений.НастройкиПользователей.Установить(СпособЗагрузкиДанныхИзВнешнихИсточников,
				"СпособЗагрузкиДанныхИзВнешнихИсточников");

		КонецЕсли;

	КонецЕсли;

	Если СпособЗагрузкиДанныхИзВнешнихИсточников = Перечисления.СпособЗагрузкиДанныхИзВнешнихИсточников.Копирование Тогда

		ИмяФормыЗагрузкиДанныхИзВнешнихИсточников = "Обработка.ЗагрузкаДанныхИзФайла.Форма.ЗагрузкаДанныхИзФайла";

	ИначеЕсли СпособЗагрузкиДанныхИзВнешнихИсточников = Перечисления.СпособЗагрузкиДанныхИзВнешнихИсточников.ВыборФайла Тогда

		ИмяФормыЗагрузкиДанныхИзВнешнихИсточников = "Обработка.ЗагрузкаДанныхИзВнешнегоИсточника.Форма.ПомощникЗагрузкиДанныхИзВнешнегоИсточника";

	КонецЕсли;

	ПолноеИмяОбъектаЗаполнения = ОбъектЗаполнения.ПолноеИмя();
	ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПриОпределенииФормыЗагрузкиДанных(
		ИмяФормыЗагрузкиДанныхИзВнешнихИсточников, ПолноеИмяОбъектаЗаполнения, ОбъектЗаполнения);

	НастройкиЗагрузкиДанных.Вставить("ПолноеИмяОбъектаЗаполнения", ПолноеИмяОбъектаЗаполнения);
	НастройкиЗагрузкиДанных.Вставить("ИмяФормыЗагрузкиДанныхИзВнешнихИсточников",
		ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);

	ЭтоЗагрузкаТабличнойЧасти = (СтрНайти(ПолноеИмяОбъектаЗаполнения, "ТабличнаяЧасть") > 0);
	НастройкиЗагрузкиДанных.Вставить("ЭтоЗагрузкаТабличнойЧасти", ЭтоЗагрузкаТабличнойЧасти);

	ЭтоЗагрузкаСправочника = (СтрНайти(ПолноеИмяОбъектаЗаполнения, "Справочник") > 0);
	НастройкиЗагрузкиДанных.Вставить("ЭтоЗагрузкаСправочника", ЭтоЗагрузкаСправочника);

	ЭтоЗагрузкаРегистраСведений = (СтрНайти(ПолноеИмяОбъектаЗаполнения, "РегистрСведений") > 0);
	НастройкиЗагрузкиДанных.Вставить("ЭтоЗагрузкаРегистраСведений", ЭтоЗагрузкаРегистраСведений);

КонецПроцедуры

Процедура ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(ИмяФормыЗагрузкиДанныхИзВнешнихИсточников) Экспорт
	
	// Изменение способа загрузки НЕ доступно в ВЕБ клиенте.

	СпособЗагрузкиДанныхИзВнешнихИсточников = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки(
		"СпособЗагрузкиДанныхИзВнешнихИсточников");
	Если Не ЗначениеЗаполнено(СпособЗагрузкиДанныхИзВнешнихИсточников) Тогда

		СпособЗагрузкиДанныхИзВнешнихИсточников = Перечисления.СпособЗагрузкиДанныхИзВнешнихИсточников.Копирование;

	КонецЕсли;

	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	Если СпособЗагрузкиДанныхИзВнешнихИсточников = Перечисления.СпособЗагрузкиДанныхИзВнешнихИсточников.Копирование Тогда

		СпособЗагрузкиДанныхИзВнешнихИсточников = Перечисления.СпособЗагрузкиДанныхИзВнешнихИсточников.ВыборФайла;
		ИмяФормыЗагрузкиДанныхИзВнешнихИсточников = "Обработка.ЗагрузкаДанныхИзВнешнегоИсточника.Форма.ПомощникЗагрузкиДанныхИзВнешнегоИсточника";

	ИначеЕсли СпособЗагрузкиДанныхИзВнешнихИсточников = Перечисления.СпособЗагрузкиДанныхИзВнешнихИсточников.ВыборФайла Тогда

		СпособЗагрузкиДанныхИзВнешнихИсточников = Перечисления.СпособЗагрузкиДанныхИзВнешнихИсточников.Копирование;
		ИмяФормыЗагрузкиДанныхИзВнешнихИсточников = "Обработка.ЗагрузкаДанныхИзФайла.Форма.ЗагрузкаДанныхИзФайла";

	КонецЕсли;

	РегистрыСведений.НастройкиПользователей.Установить(СпособЗагрузкиДанныхИзВнешнихИсточников,
		"СпособЗагрузкиДанныхИзВнешнихИсточников", ТекущийПользователь);

КонецПроцедуры

// Функция - Новый описания типов полей загрузки
// 
// Возвращаемое значение:
//	- Структура - см. ЗагрузкаДанныхИзВнешнегоИсточника.НовыйОписанияТиповПолейЗагрузки
//
Функция НовыйОписанияТиповПолейЗагрузки() Экспорт

	ОписаниеТиповСтрока10 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(10));
	ОписаниеТиповСтрока11 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(11));
	ОписаниеТиповСтрока19 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(19));
	ОписаниеТиповСтрока25 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(25));
	ОписаниеТиповСтрока50 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100));
	ОписаниеТиповСтрока150 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(150));
	ОписаниеТиповСтрока200 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(200));
	ОписаниеТиповСтрока1000 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1000));
	ОписаниеТиповСтрока0000 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(0));
	ОписаниеТиповЧисло10_0 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(10, 0,
		ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло10_3 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(10, 3,
		ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло15_2 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 2,
		ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата", , , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТиповЧисло15_3 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 3,
		ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло15 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 0,
		ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповСтрока30 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(30));
	ОписаниеТиповСтрока60 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(60));
	ОписаниеТиповСтрока110 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(110));
	ОписаниеТиповЧисло15_3Отрицательный 
		= Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Любой));
	ОписаниеТиповСтрока9 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(9));
	ОписаниеТиповСтрока3 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(3));
	ОписаниеТиповСтрока7 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(7));
	ОписаниеТиповСтрока8 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(8));
	ОписаниеТиповСтрока40 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(40));
	ОписаниеТиповСтрока250 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(250));
	ОписаниеТиповСтрока1024 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1024));
	ОписаниеТиповДатаВремя = Новый ОписаниеТипов("Дата", , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));

	СтруктураТипов = Новый Структура;
	СтруктураТипов.Вставить("ОписаниеТиповСтрока10", ОписаниеТиповСтрока10);
	СтруктураТипов.Вставить("ОписаниеТиповСтрока19", ОписаниеТиповСтрока19);
	СтруктураТипов.Вставить("ОписаниеТиповСтрока0000", ОписаниеТиповСтрока0000);
	СтруктураТипов.Вставить("ОписаниеТиповЧисло10_0", ОписаниеТиповЧисло10_0);
	СтруктураТипов.Вставить("ОписаниеТиповЧисло10_3", ОписаниеТиповЧисло10_3);
	СтруктураТипов.Вставить("ОписаниеТиповСтрока11", ОписаниеТиповСтрока11);
	СтруктураТипов.Вставить("ОписаниеТиповСтрока25", ОписаниеТиповСтрока25);
	СтруктураТипов.Вставить("ОписаниеТиповСтрока50", ОписаниеТиповСтрока50);
	СтруктураТипов.Вставить("ОписаниеТиповСтрока100", ОписаниеТиповСтрока100);
	СтруктураТипов.Вставить("ОписаниеТиповСтрока150", ОписаниеТиповСтрока150);
	СтруктураТипов.Вставить("ОписаниеТиповСтрока200", ОписаниеТиповСтрока200);
	СтруктураТипов.Вставить("ОписаниеТиповСтрока1000", ОписаниеТиповСтрока1000);
	СтруктураТипов.Вставить("ОписаниеТиповЧисло15_2", ОписаниеТиповЧисло15_2);
	СтруктураТипов.Вставить("ОписаниеТиповЧисло15_3", ОписаниеТиповЧисло15_3);
	СтруктураТипов.Вставить("ОписаниеТиповЧисло15", ОписаниеТиповЧисло15);
	СтруктураТипов.Вставить("ОписаниеТиповСтрока30", ОписаниеТиповСтрока30);
	СтруктураТипов.Вставить("ОписаниеТиповСтрока60", ОписаниеТиповСтрока60);
	СтруктураТипов.Вставить("ОписаниеТиповСтрока110", ОписаниеТиповСтрока110);
	СтруктураТипов.Вставить("ОписаниеТиповЧисло15_3Отрицательный", ОписаниеТиповЧисло15_3Отрицательный);
	СтруктураТипов.Вставить("ОписаниеТиповСтрока9", ОписаниеТиповСтрока9);
	СтруктураТипов.Вставить("ОписаниеТиповДата", ОписаниеТиповДата);
	СтруктураТипов.Вставить("ОписаниеТиповБулево", ОписаниеТиповБулево);
	СтруктураТипов.Вставить("ОписаниеТиповСтрока3", ОписаниеТиповСтрока3);
	СтруктураТипов.Вставить("ОписаниеТиповСтрока7", ОписаниеТиповСтрока7);
	СтруктураТипов.Вставить("ОписаниеТиповСтрока8", ОписаниеТиповСтрока8);
	СтруктураТипов.Вставить("ОписаниеТиповСтрока40", ОписаниеТиповСтрока40);
	СтруктураТипов.Вставить("ОписаниеТиповСтрока250", ОписаниеТиповСтрока250);
	СтруктураТипов.Вставить("ОписаниеТиповСтрока1024", ОписаниеТиповСтрока1024);
	СтруктураТипов.Вставить("ОписаниеТиповДатаВремя", ОписаниеТиповДатаВремя);

	Возврат СтруктураТипов;
	
КонецФункции

// Процедура - Добавить поля номенклатуры
//
// Параметры:
//  ТаблицаПолейЗагрузки	 - ТаблицаЗначений - таблица полей
//  ОписаниеТиповКолонка	 - ОписаниеТипов - описание колонки
//  ОписанияТиповПолей		 - Структура - см. ЗагрузкаДанныхИзВнешнегоИсточника.НовыйОписанияТиповПолейЗагрузки
//  НастройкиЗагрузкиДанных	 - Структура - см. ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере
//
Процедура ДобавитьПоляНоменклатуры(ТаблицаПолейЗагрузки, ОписаниеТиповКолонка, ОписанияТиповПолей,
	НастройкиЗагрузкиДанных, ОбязательноеЗаполнениеГруппы = Истина) Экспорт


	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НастройкиЗагрузкиДанных,
		"ОбязательноеЗаполнениеГруппыНоменклатуры") Тогда
		ОбязательноеЗаполнениеГруппы = НастройкиЗагрузкиДанных.ОбязательноеЗаполнениеГруппыНоменклатуры;
	КонецЕсли;

	ИмяГруппыПолей = "Номенклатура";
	ПредставлениеГруппы = НСтр("ru='Номенклатура'");
	
	ПредставлениеКод = НСтр("ru = 'Код'");
	ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Код", ПредставлениеКод,
		ОписанияТиповПолей.ОписаниеТиповСтрока11, ОписаниеТиповКолонка, ИмяГруппыПолей, 1, ,
		ОбязательноеЗаполнениеГруппы, , , , ПредставлениеГруппы);

	ПредставлениеШтрихкод = НСтр("ru = 'Штрихкод'");
	ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Штрихкод", ПредставлениеШтрихкод,
		ОписанияТиповПолей.ОписаниеТиповСтрока200, ОписаниеТиповКолонка, ИмяГруппыПолей, 2, ,
		ОбязательноеЗаполнениеГруппы, , , , ПредставлениеГруппы);

	ПредставлениеАртикул = НСтр("ru = 'Артикул'");
	ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Артикул", ПредставлениеАртикул,
		ОписанияТиповПолей.ОписаниеТиповСтрока50, ОписаниеТиповКолонка, ИмяГруппыПолей, 3, ,
		ОбязательноеЗаполнениеГруппы, , , , ПредставлениеГруппы);

	ПредставлениеНоменклатураНаименование = НСтр("ru = 'Наименование'");
	ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименование", ПредставлениеНоменклатураНаименование,
		ОписанияТиповПолей.ОписаниеТиповСтрока100, ОписаниеТиповКолонка, ИмяГруппыПолей, 4, ,
		ОбязательноеЗаполнениеГруппы, , , , ПредставлениеГруппы);

	ПредставлениеНоменклатураНаименованиеПолное = НСтр("ru = 'Полное наименование'");
	ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименованиеПолное",
		ПредставлениеНоменклатураНаименованиеПолное, ОписанияТиповПолей.ОписаниеТиповСтрока1000, ОписаниеТиповКолонка,
		ИмяГруппыПолей, 5, , ОбязательноеЗаполнениеГруппы, , , , ПредставлениеГруппы);
	
	Если НастройкиЗагрузкиДанных.НастройкиПоиска.ИскатьПоДополнительномуРеквизиту Тогда
		
		ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, 
			НастройкиЗагрузкиДанных.НастройкиПоиска.ДополнительныйРеквизитПоиска.ИдентификаторДляФормул,
			НастройкиЗагрузкиДанных.НастройкиПоиска.ДополнительныйРеквизитПоиска.Заголовок,
			ОписанияТиповПолей.ОписаниеТиповСтрока1000, ОписаниеТиповКолонка, ИмяГруппыПолей, 5, , Истина);
		
	КонецЕсли;
	
	НовоеОписаниеТиповКолонка = Новый ОписаниеТипов("ПланСчетовСсылка.Управленческий");
	ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СчетУчетаДоходов", НСтр(
		"ru = 'Счет учета доходов'"), ОписанияТиповПолей.ОписаниеТиповСтрока100, НовоеОписаниеТиповКолонка, , , , , Истина);
	ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СчетУчетаЗапасов", НСтр(
		"ru = 'Счет учета запасов'"), ОписанияТиповПолей.ОписаниеТиповСтрока100, НовоеОписаниеТиповКолонка, , , , , Истина);
	ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СчетУчетаЗатрат", НСтр(
		"ru = 'Счет учета затрат'"), ОписанияТиповПолей.ОписаниеТиповСтрока100, НовоеОписаниеТиповКолонка, , , , , Истина);
	
	НовоеОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности");
	ПредставлениеНаправлениеБизнеса = НСтр("ru = 'Направление деятельности'");
	УчетПоНесколькимНаправлениямДеятельности = ПолучитьФункциональнуюОпцию("УчетПоНесколькимНаправлениямДеятельности");
	ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НаправлениеДеятельности", 
		ПредставлениеНаправлениеБизнеса, ОписанияТиповПолей.ОписаниеТиповСтрока100, НовоеОписаниеТиповКолонка, , , , , 
		УчетПоНесколькимНаправлениямДеятельности);

	НовоеОписаниеТиповКолонка = Новый ОписаниеТипов("ПеречислениеСсылка.МетодОценкиЗапасов");
	ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "МетодОценки", НСтр(
		"ru = 'Способ списания'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписанияТиповПолей.ОписаниеТиповСтрока100,
		НовоеОписаниеТиповКолонка);

	НовоеОписаниеТиповКолонка = Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПополненияЗапасов");
	ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СпособПополнения", НСтр(
		"ru = 'Способ пополнения'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписанияТиповПолей.ОписаниеТиповСтрока100,
		НовоеОписаниеТиповКолонка);

	НовоеОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КатегорииНоменклатуры");
	ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "КатегорияНоменклатуры", НСтр(
		"ru = 'Категория номенклатуры'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписанияТиповПолей.ОписаниеТиповСтрока100,
		НовоеОписаниеТиповКолонка);
			
КонецПроцедуры

// Процедура - Добавить поля группы номенклатуры
//
// Параметры:
//  ТаблицаПолейЗагрузки - ТаблицаЗначений - таблица полей
//  СтруктураТипов		 - Структура - см. ЗагрузкаДанныхИзВнешнегоИсточника.НовыйОписанияТиповПолейЗагрузки
//  ОписаниеТиповКолонка - ОписаниеТипов - описание колонки
//
Процедура ДобавитьПоляГруппыНоменклатуры(ТаблицаПолейЗагрузки, СтруктураТипов, ОписаниеТиповКолонка) Экспорт
	
	ИмяГруппыПолей = "Родитель";
	ПредставлениеГруппы = НСтр("ru='Группа'");
	ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "РодительКод", НСтр(
		"ru = 'Код'", ОбщегоНазначения.КодОсновногоЯзыка()), СтруктураТипов.ОписаниеТиповСтрока11, ОписаниеТиповКолонка,
		ИмяГруппыПолей, 1, , , , , , ПредставлениеГруппы);

	ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "РодительНаименование", НСтр(
		"ru = 'Группа (наименование)'", ОбщегоНазначения.КодОсновногоЯзыка()), СтруктураТипов.ОписаниеТиповСтрока100,
		ОписаниеТиповКолонка, ИмяГруппыПолей, 2, , , , , , ПредставлениеГруппы);
	
КонецПроцедуры

// Процедура - Добавить поля характеристики
//
// Параметры:
//  ТаблицаПолейЗагрузки - ТаблицаЗначений - таблица полей
//  ОписанияТиповПолей	 - Структура - см. ЗагрузкаДанныхИзВнешнегоИсточника.НовыйОписанияТиповПолейЗагрузки
//
Процедура ДобавитьПоляХарактеристики(ТаблицаПолейЗагрузки, ОписанияТиповПолей) Экспорт

	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда

		ИмяГруппыПолей = "Характеристика";
		ПредставлениеГруппы = НСтр("ru='Характеристика'");
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
		
		ПредставлениеКод = НСтр("ru = 'Код'");
		ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ХарактеристикаКод", ПредставлениеКод,
			ОписанияТиповПолей.ОписаниеТиповСтрока11, ОписаниеТиповКолонка, ИмяГруппыПолей, 4, ,
			, , , , ПредставлениеГруппы);
			
		ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ХарактеристикаАртикул", НСтр(
		"ru = 'Артикул'"), ОписанияТиповПолей.ОписаниеТиповСтрока25, ОписаниеТиповКолонка,
			ИмяГруппыПолей, 3, , , , , , ПредставлениеГруппы);
		
		ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ХарактеристикаНаименование", НСтр(
			"ru = 'Наименование'"), ОписанияТиповПолей.ОписаниеТиповСтрока150, ОписаниеТиповКолонка,
			ИмяГруппыПолей, 1, , , , , , ПредставлениеГруппы);

		ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ХарактеристикаНаименованиеДляПечати", НСтр(
			"ru = 'Наименование для печати'"), ОписанияТиповПолей.ОписаниеТиповСтрока0000,
			ОписаниеТиповКолонка, ИмяГруппыПолей, 2, , , , , , ПредставлениеГруппы);

	КонецЕсли;
	
КонецПроцедуры


// Процедура - Добавить поля характеристики
//
// Параметры:
//  ТаблицаПолейЗагрузки - ТаблицаЗначений - таблица полей
//  ОписанияТиповПолей	 - Структура - см. ЗагрузкаДанныхИзВнешнегоИсточника.НовыйОписанияТиповПолейЗагрузки
//
Процедура ДобавитьПоляДисконтнаяКарта(ТаблицаПолейЗагрузки, ОписанияТиповПолей, НастройкиЗагрузкиДанных) Экспорт

	Если ПолучитьФункциональнуюОпцию("ИспользоватьДисконтныеКарты") Тогда

		ОбязательноеЗаполнениеГруппы = Истина;
		ИмяГруппыПолей = "ДисконтнаяКарта";
		ПредставлениеГруппы = НСтр("ru='Дисконтная карта'");
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ДисконтныеКарты");
		
		ПредставлениеШтрихкод = НСтр("ru = 'Шитрихкод'");
		ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "КодКартыШтрихкод", ПредставлениеШтрихкод,
			ОписанияТиповПолей.ОписаниеТиповСтрока100, ОписаниеТиповКолонка, ИмяГруппыПолей, 1, ,
			ОбязательноеЗаполнениеГруппы, , , , ПредставлениеГруппы);
			
		ПредставлениеМагнитныйКод = НСтр("ru = 'Магнитный код'");
		ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "КодКартыМагнитный", ПредставлениеМагнитныйКод, 
			ОписанияТиповПолей.ОписаниеТиповСтрока25, ОписаниеТиповКолонка, ИмяГруппыПолей, 2, , 
			ОбязательноеЗаполнениеГруппы, , , , ПредставлениеГруппы);
				
		ПредставлениеНаименование = НСтр("ru = 'Наименование'");
		ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Наименование", ПредставлениеНаименование,
			ОписанияТиповПолей.ОписаниеТиповСтрока100, ОписаниеТиповКолонка, ИмяГруппыПолей, 4, ,
			ОбязательноеЗаполнениеГруппы, , , , ПредставлениеГруппы);

		ПредставлениеВладелец = НСтр("ru = 'Вид карты'");
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ВидыДисконтныхКарт");
		ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Владелец", ПредставлениеВладелец,
			ОписанияТиповПолей.ОписаниеТиповСтрока100, ОписаниеТиповКолонка, ИмяГруппыПолей, 3, , 
			ОбязательноеЗаполнениеГруппы, , , , ПредставлениеГруппы);

		ПредставлениеВладелецКарты = НСтр("ru = 'Владелец карты (наименование контрагента)'");
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ВладелецКарты", ПредставлениеВладелецКарты,
			ОписанияТиповПолей.ОписаниеТиповСтрока100, ОписаниеТиповКолонка, ИмяГруппыПолей, 4, , 
			ОбязательноеЗаполнениеГруппы, , , , ПредставлениеГруппы);

		ПредставлениеКомментарий = НСтр("ru = 'Комментарий'");
		ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Комментарий", ПредставлениеКомментарий,
			ОписанияТиповПолей.ОписаниеТиповСтрока0000, ОписаниеТиповКолонка, ИмяГруппыПолей, 5, , 
			ОбязательноеЗаполнениеГруппы, , , , ПредставлениеГруппы);
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна() Экспорт

	Возврат "_ЗагрузкаВПриложениеВозможна";

КонецФункции

Функция ИмяСлужебногоПоляЗаполненыНеПолностью() Экспорт

	Возврат "_ЗаполненыНеПолностью";

КонецФункции

// Добавить поле описания загрузки.
// 
// Параметры:
//  ТаблицаПолейЗагрузки - ТаблицаЗначений - таблица полей
//  ИмяПоля - Строка - Имя поля
//  ПредставлениеПоля - Строка - Представление поля
//  ТипПоля - Строка - Тип поля
//  ТипПолучаемогоЗначения - Строка - Тип получаемого значения
//  ИмяГруппыПолей - Строка - Имя группы полей
//  Приоритет - Число - Приоритет
//  ОбязательноеЗаполнение - Булево - Обязательное заполнение
//  ОбязательноеЗаполнениеГруппы - Булево - Обязательное заполнение группы
//  Видимость - Булево - Видимость
//  ДопРеквизитПризнак - Булево - Доп реквизит признак
//  ДопРеквизитСсылка - Неопределено - Доп реквизит ссылка
//  ПредставлениеГруппы - Строка - представление группы
//
Процедура ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, ИмяПоля, ПредставлениеПоля, ТипПоля,
	ТипПолучаемогоЗначения, ИмяГруппыПолей = "", Приоритет = 0, ОбязательноеЗаполнение = Ложь,
	ОбязательноеЗаполнениеГруппы = Ложь, Видимость = Истина, ДопРеквизитПризнак = Ложь,
	ДопРеквизитСсылка = Неопределено, ПредставлениеГруппы = "") Экспорт
	
	НоваяСтрока = ТаблицаПолейЗагрузки.Добавить();

	НоваяСтрока.ИмяПоля = ИмяПоля;
	НоваяСтрока.ПредставлениеПоля = ПредставлениеПоля;
	НоваяСтрока.ТипПоля = ТипПоля;
	НоваяСтрока.ТипПолучаемогоЗначения = ТипПолучаемогоЗначения;
	НоваяСтрока.ИмяГруппыПолей = ИмяГруппыПолей;
	НоваяСтрока.Приоритет = Приоритет;
	НоваяСтрока.ОбязательноеЗаполнение = ОбязательноеЗаполнение;
	НоваяСтрока.ОбязательноеЗаполнениеГруппы = ОбязательноеЗаполнениеГруппы;
	НоваяСтрока.Видимость = Видимость;
	НоваяСтрока.ДопРеквизитПризнак = ДопРеквизитПризнак;
	НоваяСтрока.ДопРеквизитСсылка = ДопРеквизитСсылка;
	НоваяСтрока.ДопРеквизитВладелец = ДопРеквизитСсылка;
	Если ПредставлениеГруппы = "" Тогда
		НоваяСтрока.ПредставлениеГруппы = ИмяГруппыПолей;
	Иначе
		НоваяСтрока.ПредставлениеГруппы = ПредставлениеГруппы;
	КонецЕсли;

КонецПроцедуры

Процедура ПрогрессСопоставленияДанных(ИндексТекущейСтроки, РазмерТаблицыДанных, ТекстШаблона = "") Экспорт

	Если ПустаяСтрока(ТекстШаблона) Тогда

		ТекстШаблона = НСтр("ru ='Обработано %1 из %2 строк...'");

	КонецЕсли;

	ТекстПрогресса      = СтрШаблон(ТекстШаблона, ИндексТекущейСтроки, РазмерТаблицыДанных);
	ПроцентВыполнения   = Окр(ИндексТекущейСтроки * 100 / РазмерТаблицыДанных);

	ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, ТекстПрогресса);

КонецПроцедуры

Функция ИмяПоляДобавленияДополнительныхРеквизитов() Экспорт

	Возврат "_ДополнительныеРеквизитыИСведения";

КонецФункции

Функция ИмяПоляДобавленияДополнительныхРеквизитовНоменклатуры() Экспорт

	Возврат "_ДополнительныеРеквизитыИСведенияНоменклатуры";

КонецФункции

Функция ИмяПоляДобавленияДополнительныхРеквизитовХарактеристик() Экспорт

	Возврат "_ДополнительныеРеквизитыИСведенияХарактеристик";

КонецФункции

// Создает таблицу дублирующих строк для поиска номенклатуры по ключевым полям
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с ключевыми полями поиска номенклатуры
//
Функция ПустаяТаблицаДублирующихСтрокНоменклатуры() Экспорт

	ОписаниеТиповСтрока11 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(11));
	ОписаниеТиповСтрока25 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(25));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100));
	ОписаниеТиповСтрока200 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(200));
	ОписаниеТиповСтрока1000 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1000));
	ОписаниеТиповЧисло10_0 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой));
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");

	ТаблицаДублирующихСтрок = Новый ТаблицаЗначений;
	ТаблицаДублирующихСтрок.Колонки.Добавить("Код", ОписаниеТиповСтрока11);
	ТаблицаДублирующихСтрок.Колонки.Добавить("Штрихкод", ОписаниеТиповСтрока200);
	ТаблицаДублирующихСтрок.Колонки.Добавить("Артикул", ОписаниеТиповСтрока25);
	ТаблицаДублирующихСтрок.Колонки.Добавить("НоменклатураНаименование", ОписаниеТиповСтрока100);
	ТаблицаДублирующихСтрок.Колонки.Добавить("НоменклатураНаименованиеПолное", ОписаниеТиповСтрока1000);
	ТаблицаДублирующихСтрок.Колонки.Добавить("КлючСвязи", ОписаниеТиповЧисло10_0);
	ТаблицаДублирующихСтрок.Колонки.Добавить("Номенклатура", ОписаниеТиповКолонка);

	Возврат ТаблицаДублирующихСтрок;

КонецФункции

// Создает таблицу дублирующих строк для поиска номенклатуры по ключевым полям
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с ключевыми полями поиска номенклатуры
//
Функция ПустаяТаблицаДублирующихСтрокДисконтныхКарт() Экспорт

	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100));
	ОписаниеТиповЧисло10_0 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой));
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ДисконтныеКарты");

	ТаблицаДублирующихСтрок = Новый ТаблицаЗначений;
	ТаблицаДублирующихСтрок.Колонки.Добавить("КодКартыМагнитный", ОписаниеТиповСтрока100);
	ТаблицаДублирующихСтрок.Колонки.Добавить("КодКартыШтрихкод", ОписаниеТиповСтрока100);
	ТаблицаДублирующихСтрок.Колонки.Добавить("Наименование", ОписаниеТиповСтрока100);
	ТаблицаДублирующихСтрок.Колонки.Добавить("КлючСвязи", ОписаниеТиповЧисло10_0);
	ТаблицаДублирующихСтрок.Колонки.Добавить("ДисконтнаяКарта", ОписаниеТиповКолонка);

	Возврат ТаблицаДублирующихСтрок;

КонецФункции

// Функция - Получить настройки поиска по умолчанию
// 
// Возвращаемое значение:
//  Структура - настройки поиска
//
Функция ПолучитьНастройкиПоискаПоУмолчанию() Экспорт

	НастройкиПоиска = Новый Структура;
	НастройкиПоиска.Вставить("ИскатьПоКоду", Истина);
	НастройкиПоиска.Вставить("ИскатьПоШтрихкоду", Истина);
	НастройкиПоиска.Вставить("ИскатьПоАртикулу", Истина);
	НастройкиПоиска.Вставить("ИскатьПоНаименованию", Истина);
	НастройкиПоиска.Вставить("ИскатьПоНаименованиюЛевойЧасти", Ложь);
	НастройкиПоиска.Вставить("ИскатьПоНаименованиюПолному", Истина);
	НастройкиПоиска.Вставить("ИскатьПоНаименованиюПолномуЛевойЧасти", Ложь);
	НастройкиПоиска.Вставить("ИскатьПоДополнительномуРеквизиту", Ложь);
	НастройкиПоиска.Вставить("ДополнительныйРеквизитПоиска", Неопределено);
	НастройкиПоиска.Вставить("ВариантПоиска", 0);

	Возврат НастройкиПоиска;

КонецФункции

// Функция - Префикс дополнительного реквизита поиска
// 
// Возвращаемое значение:
//  Строка - префикс дополнительного реквизита поиска поля
//
Функция ПрефиксДополнительногоРеквизитаПоиска() Экспорт

	Возврат "ДополнительныйРеквизитПоиска_";

КонецФункции

// Функция - Получить настройки формы помощника загрузки по умолчанию
// 
// Возвращаемое значение:
//  Структура - структура настроек формы помощника
//
Функция ПолучитьНастройкиФормыПомощникаЗагрузкиПоУмолчанию() Экспорт

	ЗагружаемыеНастройкиПоУмолчанию = Новый Структура;
	ЗагружаемыеНастройкиПоУмолчанию.Вставить("КудаЗагружаемХарактеристики", 1);
	ЗагружаемыеНастройкиПоУмолчанию.Вставить("КудаЗагружаемКартинки", 1);
	ЗагружаемыеНастройкиПоУмолчанию.Вставить("КудаЗагружаемДопРеквизиты", 1);
	ЗагружаемыеНастройкиПоУмолчанию.Вставить("ОбновлятьСуществующие", Ложь);
	ЗагружаемыеНастройкиПоУмолчанию.Вставить("СоздаватьЕслиНеСопоставлено", Истина);

	НастройкиПоиска = ПолучитьНастройкиПоискаПоУмолчанию();
	ЗагружаемыеНастройкиПоУмолчанию.Вставить("НастройкиПоиска", НастройкиПоиска);

	Возврат ЗагружаемыеНастройкиПоУмолчанию;

КонецФункции

// Процедура - заполняет структуру НастройкиЗагрузкиДанных полями - 
//		ОписаниеДополнительныхРеквизитов и ВыбранныеДополнительныеРеквизиты
//
// Параметры:
//  НастройкиЗагрузкиДанных	 - Структура - структура настроек
//  Владелец				 - СправочникСсылка.НаборыДополнительныхРеквизитовИСведений - владелец дополнительных реквизитов
//
Процедура ПодготовитьСоответствиеПоДополнительнымРеквизитам(НастройкиЗагрузкиДанных, Владелец, 
	КлючОписания = "ОписаниеДополнительныхРеквизитов", КлючВыбранных = "ВыбранныеДополнительныеРеквизиты") Экспорт

	ОписаниеДополнительныхРеквизитов = Новый Соответствие;

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДопРеквизиты.Свойство КАК Свойство
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДопРеквизиты
	|ГДЕ
	|	НЕ ДопРеквизиты.ПометкаУдаления
	|	И ДопРеквизиты.Ссылка = &Владелец";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	РезультатЗапроса = Запрос.Выполнить();
//{{MRG[ <-> ]
//	
//	НомерДополнительногоРеквизита = 0;
//}}MRG[ <-> ]
	Если Не РезультатЗапроса.Пустой() Тогда

//{{MRG[ <-> ]
		НомерДополнительногоРеквизита = 0;
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НастройкиЗагрузкиДанных, 
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			"ПоследнийНомерДополнительногоРеквизита") Тогда
//			НомерДополнительногоРеквизита = НастройкиЗагрузкиДанных.ПоследнийНомерДополнительногоРеквизита + 1;
//		КонецЕсли;
//}}MRG[ <-> ]

		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл

			НомерДополнительногоРеквизита = НомерДополнительногоРеквизита + 1;
			ОписаниеДополнительныхРеквизитов.Вставить(Выборка.Свойство, "ДополнительныйРеквизит" + Формат(
				НомерДополнительногоРеквизита, "ЧГ=0"));

		КонецЦикла;

	КонецЕсли;
	
	НастройкиЗагрузкиДанных.Вставить(КлючОписания, ОписаниеДополнительныхРеквизитов);
	НастройкиЗагрузкиДанных.Вставить(КлючВыбранных, Новый Соответствие);
//{{MRG[ <-> ]
//	НастройкиЗагрузкиДанных.Вставить("ПоследнийНомерДополнительногоРеквизита", НомерДополнительногоРеквизита)
//}}MRG[ <-> ]

КонецПроцедуры

// Функция - Число и предмет исчисления возвращает строку число и предмет исчисления
//
// Параметры:
//  Число						 - Число - число для преобразования
//  ПараметрыПредметаИсчисления1 - Строка - предмет исчисления 1
//  ПараметрыПредметаИсчисления2 - Строка - предмет исчисления 2
//  ПараметрыПредметаИсчисления3 - Строка - предмет исчисления 3
//  Род							 - Строка - род
// 
// Возвращаемое значение:
//  Строка - результат функции 
//
Функция ЧислоИПредметИсчисления(Число, ПараметрыПредметаИсчисления1, ПараметрыПредметаИсчисления2,
	ПараметрыПредметаИсчисления3, Род) Экспорт

	ПараметрыПредметаИсчисления = "%1,%2,%3,%4,,,,,0";
	ПараметрыПредметаИсчисления = СтрШаблон(
		ПараметрыПредметаИсчисления, ПараметрыПредметаИсчисления1, ПараметрыПредметаИсчисления2,
		ПараметрыПредметаИсчисления3, Род);

	ЧислоСтрокойИПредметИсчисления = НРег(ЧислоПрописью(Число, , ПараметрыПредметаИсчисления));

	ЧислоПрописью = ЧислоСтрокойИПредметИсчисления;
	ЧислоПрописью = СтрЗаменить(ЧислоПрописью, ПараметрыПредметаИсчисления3, "");
	ЧислоПрописью = СтрЗаменить(ЧислоПрописью, ПараметрыПредметаИсчисления2, "");
	ЧислоПрописью = СтрЗаменить(ЧислоПрописью, ПараметрыПредметаИсчисления1, "");

	ЧислоЦифройИПредметИсчисления = СтрЗаменить(ЧислоСтрокойИПредметИсчисления, ЧислоПрописью, "");

	Возврат ЧислоЦифройИПредметИсчисления;

КонецФункции

// Это загрузка комиссионных продаж.
// 
// Параметры:
//  НастройкиЗагрузкиДанных - Структура - Настройки загрузки данных
// 
// Возвращаемое значение:
//  Булево - Это загрузка комиссионных продаж
Функция ЭтоЗагрузкаКомиссионныхПродаж(НастройкиЗагрузкиДанных) Экспорт

	Возврат НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ОтчетКомиссионера.ТабличнаяЧасть.Запасы";

КонецФункции

// Это загрузка комиссионных возвратов.
// 
// Параметры:
//  НастройкиЗагрузкиДанных - Структура - Настройки загрузки данных
// 
// Возвращаемое значение:
//  Булево - Это загрузка комиссионных возвратов
Функция ЭтоЗагрузкаКомиссионныхВозвратов(НастройкиЗагрузкиДанных) Экспорт

	Возврат НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения 
			= "Документ.ОтчетКомиссионера.ТабличнаяЧасть.ЗапасыВозвраты";
	
КонецФункции

// Это загрузка wildberries уведомление о выкупе.
// 
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - Табличный документ
// 
// Возвращаемое значение:
//  Булево - Это загрузка wildberries уведомление о выкупе
Функция ЭтоЗагрузкаWildberriesУведомлениеОВыкупе(ТабличныйДокумент) Экспорт
	
	СтрокаПоиска1 = "УВЕДОМЛЕНИЕ О ВЫКУПЕ"; // АПК:1297 не локализуется
	СтрокаПоиска2 = "на сайте Wildberries"; // АПК:1297 не локализуется
	Возврат ТабличныйДокумент.НайтиТекст(СтрокаПоиска1, , , , , , Истина) <> Неопределено
		И ТабличныйДокумент.НайтиТекст(СтрокаПоиска2, , , , , , Истина) <> Неопределено;

КонецФункции

// Это загрузка wildberries отчет с детализацией.
// 
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - Табличный документ
// 
// Возвращаемое значение:
//  Булево - Это загрузка wildberries отчет с детализацией
Функция ЭтоЗагрузкаWildberriesОтчетСДетализацией(ТабличныйДокумент) Экспорт
	
	// АПК:1036-выкл.
	СтрокаПоиска1 = "Вайлдберриз реализовал Товар (Пр)"; // АПК:1297 не локализуется
	// АПК:1036-вкл.
	СтрокаПоиска2 = "Цена розничная с учетом согласованной скидки"; // АПК:1297 не локализуется

	Возврат ТабличныйДокумент.НайтиТекст(СтрокаПоиска1, , , , , , Истина) <> Неопределено
		И ТабличныйДокумент.НайтиТекст(СтрокаПоиска2, , , , , , Истина) <> Неопределено;
	
КонецФункции

// Это загрузка ozon отчет позаказный.
// 
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - Табличный документ
// 
// Возвращаемое значение:
//  Булево - Это загрузка ozon отчет позаказный
Функция ЭтоЗагрузкаOzonОтчетПозаказный(ТабличныйДокумент) Экспорт
	
	СтрокаПоиска1 = "для Продавцов на Платформе OZON"; // АПК:1297 не локализуется
	СтрокаПоиска2 = "Номер счет-фактуры"; // АПК:1297 не локализуется
	СтрокаПоиска3 = "Продажа юридическому лицу"; // АПК:1297 не локализуется

	Возврат ТабличныйДокумент.НайтиТекст(СтрокаПоиска1, , , , , , Истина) <> Неопределено
		И ТабличныйДокумент.НайтиТекст(СтрокаПоиска2, , , , , , Истина) <> Неопределено
		И ТабличныйДокумент.НайтиТекст(СтрокаПоиска3, , , , , , Истина) <> Неопределено; 
	
КонецФункции

// Это загрузка ozon отчет сводный.
// 
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - Табличный документ
// 
// Возвращаемое значение:
//  Булево - Это загрузка ozon отчет сводный
Функция ЭтоЗагрузкаOzonОтчетСводный(ТабличныйДокумент) Экспорт

	СтрокаПоиска = "для Продавцов на Платформе OZON"; // АПК:1297 не локализуется
	Возврат ТабличныйДокумент.НайтиТекст(СтрокаПоиска, , , , , , Истина) <> Неопределено
		И НЕ ЭтоЗагрузкаOzonОтчетПозаказный(ТабличныйДокумент);
	
КонецФункции

// Объект загрузки по полному имени.
// 
// Параметры:
//  ПолноеИмяОбъектаЗаполнения - Строка - Полное имя объекта заполнения
// 
// Возвращаемое значение:
//  Структура - Объект загрузки по полному имени:
//     * ОбъектЗагрузки - СправочникСсылка.ИдентификаторыОбъектовМетаданных - Объект загрузки
//     * ИмяТабличнойЧасти - Строка, Произвольный - Имя табличной части
Функция ОбъектЗагрузкиПоПолномуИмени(ПолноеИмяОбъектаЗаполнения) Экспорт

	ИмяОбъектаЗаполнения = ПолноеИмяОбъектаЗаполнения;
	ИмяТабличнойЧасти = "";

	ИменаИспользуемыхТабличныхЧастей = ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ИменаИспользуемыхТабличныхЧастей();
	Для Каждого ЭлементСоответствия Из ИменаИспользуемыхТабличныхЧастей Цикл

		Если Прав(ПолноеИмяОбъектаЗаполнения, СтрДлина(ЭлементСоответствия.Ключ)) = ЭлементСоответствия.Ключ Тогда

			ИмяОбъектаЗаполнения = СтрЗаменить(ПолноеИмяОбъектаЗаполнения, ЭлементСоответствия.Ключ, "");
			ИмяТабличнойЧасти = ЭлементСоответствия.Значение;
			Прервать;

		КонецЕсли;

	КонецЦикла;

	Результат = Новый Структура;
	Результат.Вставить("ОбъектЗагрузки", Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоРеквизиту("ПолноеИмя",
		ИмяОбъектаЗаполнения));
	Результат.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция МаксимальноеКоличествоПустыхСтрок() Экспорт

	Возврат 1000;

КонецФункции

Процедура ДобавитьОшибку(Ошибки, ТекстОшибки, ЭтоКритичнаяОшибка = Ложь, МестоВозникновения = "") Экспорт

	ОписаниеОшибки = Ошибки.Добавить();

	ОписаниеОшибки.ОписаниеОшибки		= ТекстОшибки;
	ОписаниеОшибки.Критичная 			= ЭтоКритичнаяОшибка;
	ОписаниеОшибки.МестоВозникновения	= МестоВозникновения;

КонецПроцедуры

Процедура ЗаполнитьТаблицуПолейЗагрузки(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных) Экспорт
	Перем Менеджер;

	ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПереопределитьЗаполнениеПолейЗагрузкиДанных(ТаблицаПолейЗагрузки,
		НастройкиЗагрузкиДанных);

	Если ТаблицаПолейЗагрузки.Количество() = 0 Тогда

		ПолучитьМенеджерПоИмениОбъектаЗаполнения(НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения, Менеджер);
		Менеджер.ПоляЗагрузкиДанныхИзВнешнегоИсточника(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных);

	КонецЕсли;

КонецПроцедуры

Процедура СоздатьДеревоПолейИГруппПолей(ГруппыИПоля)

	ГруппыИПоля = Новый ДеревоЗначений;
	ГруппыИПоля.Колонки.Добавить("ИмяГруппыПолей", Новый ОписаниеТипов("Строка"));
	ГруппыИПоля.Колонки.Добавить("ТипВходящихДанных");
	ГруппыИПоля.Колонки.Добавить("ТипПолучаемогоЗначения");
	ГруппыИПоля.Колонки.Добавить("ИмяПоля", Новый ОписаниеТипов("Строка"));
	ГруппыИПоля.Колонки.Добавить("ПредставлениеПоля", Новый ОписаниеТипов("Строка"));
	ГруппыИПоля.Колонки.Добавить("ПредставлениеГруппы", Новый ОписаниеТипов("Строка"));
	ГруппыИПоля.Колонки.Добавить("НомерКолонки", Новый ОписаниеТипов("Число"));
	ГруппыИПоля.Колонки.Добавить("ОбязательноеЗаполнение", Новый ОписаниеТипов("Булево"));
	ГруппыИПоля.Колонки.Добавить("ОбязательноеЗаполнениеГруппы", Новый ОписаниеТипов("Булево"));
	ГруппыИПоля.Колонки.Добавить("Видимость", Новый ОписаниеТипов("Булево"));
	ГруппыИПоля.Колонки.Добавить("ДопРеквизитПризнак", Новый ОписаниеТипов("Булево"));
	ОписаниеТиповДопРеквизит = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения");
	ОписаниеТиповДопРеквизитВладелец = Новый ОписаниеТипов("СправочникСсылка.НаборыДополнительныхРеквизитовИСведений");
	ГруппыИПоля.Колонки.Добавить("ДопРеквизитСсылка", ОписаниеТиповДопРеквизит);
	ГруппыИПоля.Колонки.Добавить("ДопРеквизитВладелец", ОписаниеТиповДопРеквизитВладелец);

КонецПроцедуры

Процедура СоздатьТаблицуПолейОписанияЗагрузки(ТаблицаПолейЗагрузки) Экспорт

	ТаблицаПолейЗагрузки = Новый ТаблицаЗначений;
	ТаблицаПолейЗагрузки.Колонки.Добавить("ИмяПоля");
	ТаблицаПолейЗагрузки.Колонки.Добавить("ПредставлениеПоля");
	ТаблицаПолейЗагрузки.Колонки.Добавить("ТипПоля");
	ТаблицаПолейЗагрузки.Колонки.Добавить("ТипПолучаемогоЗначения");
	ТаблицаПолейЗагрузки.Колонки.Добавить("ИмяГруппыПолей");
	ТаблицаПолейЗагрузки.Колонки.Добавить("ПредставлениеГруппы");
	ТаблицаПолейЗагрузки.Колонки.Добавить("Приоритет");
	ТаблицаПолейЗагрузки.Колонки.Добавить("ОбязательноеЗаполнение");
	ТаблицаПолейЗагрузки.Колонки.Добавить("ОбязательноеЗаполнениеГруппы");
	ТаблицаПолейЗагрузки.Колонки.Добавить("Видимость");
	ТаблицаПолейЗагрузки.Колонки.Добавить("ДопРеквизитПризнак", Новый ОписаниеТипов("Булево"));
	ОписаниеТиповДопРеквизит = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения");
	ОписаниеТиповДопРеквизитВладелец = Новый ОписаниеТипов("СправочникСсылка.НаборыДополнительныхРеквизитовИСведений");
	ТаблицаПолейЗагрузки.Колонки.Добавить("ДопРеквизитСсылка", ОписаниеТиповДопРеквизит);
	ТаблицаПолейЗагрузки.Колонки.Добавить("ДопРеквизитВладелец", ОписаниеТиповДопРеквизитВладелец);

КонецПроцедуры

Процедура СоздатьТаблицуОписанияОшибок(Ошибки) Экспорт

	Ошибки = Новый ТаблицаЗначений;

	Ошибки.Колонки.Добавить("ОписаниеОшибки", Новый ОписаниеТипов("Строка"));
	Ошибки.Колонки.Добавить("Критичная", Новый ОписаниеТипов("Булево"));
	Ошибки.Колонки.Добавить("МестоВозникновения", Новый ОписаниеТипов("Строка"));

КонецПроцедуры

Процедура ПолучитьМенеджерПоИмениОбъектаЗаполнения(ПолноеИмяОбъектаЗаполнения, Менеджер) Экспорт

	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъектаЗаполнения);

КонецПроцедуры

Процедура ДобавитьСлужебныеПоля(ТаблицаПолейЗагрузки, ГруппаСлужебныхПолей, ПолноеИмяОбъектаЗаполнения, ЭтоЗагрузкаВТЧ) Экспорт
	
	// Обязательное служебное поле. Используется помощником.
	СлужебноеПоле						= ГруппаСлужебныхПолей.Строки.Добавить();
	СлужебноеПоле.ИмяПоля				= ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();
	СлужебноеПоле.ТипПолучаемогоЗначения= Новый ОписаниеТипов("Булево");

	СлужебноеПоле						= ГруппаСлужебныхПолей.Строки.Добавить();
	СлужебноеПоле.ИмяПоля				= "_СтрокаСопоставлена";
	СлужебноеПоле.ТипПолучаемогоЗначения= Новый ОписаниеТипов("Булево");

	СлужебноеПоле						= ГруппаСлужебныхПолей.Строки.Добавить();
	СлужебноеПоле.ИмяПоля				= "_ЗаполненыНеПолностью";
	СлужебноеПоле.ТипПолучаемогоЗначения= Новый ОписаниеТипов("Булево");

	СлужебноеПоле						= ГруппаСлужебныхПолей.Строки.Добавить();
	СлужебноеПоле.ИмяПоля				= "_КлючСвязи";
	СлужебноеПоле.ТипПолучаемогоЗначения= Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(10, 0,
		ДопустимыйЗнак.Любой));
	
	// Возможность описать пользовательские служебные поля
	ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПриДобавленииСлужебныхПолей(ГруппаСлужебныхПолей,
		ПолноеИмяОбъектаЗаполнения);

КонецПроцедуры

Процедура ЗаполнитьДеревоГруппыИПолей(ТаблицаПолейЗагрузки, ГруппыИПоля, ПолноеИмяОбъектаЗаполнения, ЭтоЗагрузкаВТЧ)

	ТаблицаГруппПолей = ТаблицаПолейЗагрузки.Скопировать( , "ИмяГруппыПолей, ПредставлениеГруппы");
	ТаблицаГруппПолей.Свернуть("ИмяГруппыПолей, ПредставлениеГруппы");

	СтрокаТаблицы = ТаблицаГруппПолей.Добавить();
	СтрокаТаблицы.ИмяГруппыПолей = ИмяГруппыПолейОбязательныхКЗаполнению();

	СтрокаТаблицы = ТаблицаГруппПолей.Добавить();
	СтрокаТаблицы.ИмяГруппыПолей = ИмяГруппыПолейНеобязательныхКЗаполнению();

	СтрокаТаблицы = ТаблицаГруппПолей.Добавить();
	СтрокаТаблицы.ИмяГруппыПолей = ИмяГруппыПолейСлужебные();

	Для Каждого СтрокаТаблицы Из ТаблицаГруппПолей Цикл

		Если ПустаяСтрока(СтрокаТаблицы.ИмяГруппыПолей) Тогда
			
			// Поля не объединенные в группы, разбираются отдельно по свойству ОбязательноеЗаполнение
			Продолжить;

		КонецЕсли;

		НоваяСтрокаПервогоУровня= ГруппыИПоля.Строки.Добавить();
		НоваяСтрокаПервогоУровня.ИмяГруппыПолей = СтрокаТаблицы.ИмяГруппыПолей;
		НоваяСтрокаПервогоУровня.ПредставлениеГруппы = СтрокаТаблицы.ПредставлениеГруппы;

		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИмяГруппыПолей", СтрокаТаблицы.ИмяГруппыПолей);
		Если СтрокаТаблицы.ИмяГруппыПолей = ИмяГруппыПолейОбязательныхКЗаполнению() Тогда

			ПараметрыОтбора.Вставить("ИмяГруппыПолей", "");
			ПараметрыОтбора.Вставить("ОбязательноеЗаполнение", Истина);

		ИначеЕсли СтрокаТаблицы.ИмяГруппыПолей = ИмяГруппыПолейНеобязательныхКЗаполнению() Тогда

			ПараметрыОтбора.Вставить("ИмяГруппыПолей", "");
			ПараметрыОтбора.Вставить("ОбязательноеЗаполнение", Ложь);

		ИначеЕсли СтрокаТаблицы.ИмяГруппыПолей = ИмяГруппыПолейСлужебные() Тогда

			ДобавитьСлужебныеПоля(ТаблицаПолейЗагрузки, НоваяСтрокаПервогоУровня, ПолноеИмяОбъектаЗаполнения,
				ЭтоЗагрузкаВТЧ);
			Продолжить;

		КонецЕсли;

		ОбязательноеЗаполнениеГруппы = Ложь;
		МассивСтрок 			= ТаблицаПолейЗагрузки.НайтиСтроки(ПараметрыОтбора);
		Если МассивСтрок.Количество() > 0 Тогда

			ЭтоПользовательскаяГруппаПолей = ЭтоПользовательскаяГруппаПолей(СтрокаТаблицы.ИмяГруппыПолей);
			Если ЭтоПользовательскаяГруппаПолей Тогда

				НоваяСтрокаПервогоУровня.ТипПолучаемогоЗначения = МассивСтрок[0].ТипПолучаемогоЗначения; // тип получаемого значения одинаков во всех полях одной группы полей (ссылка, строка, число и т.д.)
				НоваяСтрокаПервогоУровня.Видимость = Ложь;

			КонецЕсли;

			Для Каждого СтрокаМассива Из МассивСтрок Цикл

				НоваяСтрокаВторогоУровня = НоваяСтрокаПервогоУровня.Строки.Добавить();
				НоваяСтрокаВторогоУровня.ИмяПоля = СтрокаМассива.ИмяПоля;
				НоваяСтрокаВторогоУровня.ТипВходящихДанных = СтрокаМассива.ТипПоля; // входящий тип данных (строка, число)
				НоваяСтрокаВторогоУровня.ТипПолучаемогоЗначения = СтрокаМассива.ТипПолучаемогоЗначения;
				НоваяСтрокаВторогоУровня.ПредставлениеПоля = СтрокаМассива.ПредставлениеПоля;
				НоваяСтрокаВторогоУровня.ОбязательноеЗаполнение = СтрокаМассива.ОбязательноеЗаполнение;
				НоваяСтрокаВторогоУровня.ОбязательноеЗаполнениеГруппы = СтрокаМассива.ОбязательноеЗаполнениеГруппы;
				НоваяСтрокаВторогоУровня.Видимость = СтрокаМассива.Видимость;
				НоваяСтрокаВторогоУровня.ДопРеквизитПризнак = СтрокаМассива.ДопРеквизитПризнак;
				НоваяСтрокаВторогоУровня.ДопРеквизитСсылка = СтрокаМассива.ДопРеквизитСсылка;
				НоваяСтрокаВторогоУровня.ДопРеквизитВладелец = СтрокаМассива.ДопРеквизитВладелец;

				Если НоваяСтрокаВторогоУровня.Видимость Тогда

					НоваяСтрокаПервогоУровня.Видимость = Истина;

				КонецЕсли;

				ОбязательноеЗаполнениеГруппы = ОбязательноеЗаполнениеГруппы
					Или СтрокаМассива.ОбязательноеЗаполнениеГруппы;

			КонецЦикла;

		КонецЕсли;

		НоваяСтрокаПервогоУровня.ОбязательноеЗаполнениеГруппы = ОбязательноеЗаполнениеГруппы;

	КонецЦикла;

КонецПроцедуры

Процедура СоздатьИЗаполнитьДеревоГруппыИПолейПоИмениОбъекта(НастройкиЗагрузкиДанных, ГруппыИПоля) Экспорт
	Перем ТаблицаПолейЗагрузки;

	ПолноеИмяОбъектаЗаполнения = НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения;
	ЭтоЗагрузкаВТЧ = НастройкиЗагрузкиДанных.ЭтоЗагрузкаТабличнойЧасти;

	СоздатьТаблицуПолейОписанияЗагрузки(ТаблицаПолейЗагрузки);
	ЗаполнитьТаблицуПолейЗагрузки(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных);
	СоздатьДеревоПолейИГруппПолей(ГруппыИПоля);
	ЗаполнитьДеревоГруппыИПолей(ТаблицаПолейЗагрузки, ГруппыИПоля, ПолноеИмяОбъектаЗаполнения, ЭтоЗагрузкаВТЧ);

КонецПроцедуры

Функция ЭтоПользовательскаяГруппаПолей(ИмяГруппыПолей) Экспорт

	Возврат (ИмяГруппыПолей <> ИмяГруппыПолейОбязательныхКЗаполнению() И ИмяГруппыПолей
		<> ИмяГруппыПолейНеобязательныхКЗаполнению() И ИмяГруппыПолей <> ИмяГруппыПолейСлужебные());

КонецФункции

Функция ИмяГруппыПолейОбязательныхКЗаполнению() Экспорт

	Возврат "_ГруппаПолейОбязательныхКЗаполнению";

КонецФункции

Функция ИмяГруппыПолейНеобязательныхКЗаполнению() Экспорт

	Возврат "_ГруппаПолейНеобязательныхКЗаполнению";

КонецФункции

Функция ИмяГруппыПолейСлужебные() Экспорт

	Возврат "_ГруппаПолейСлужебные";

КонецФункции

Функция ПостФиксИменПолейВходящихДанных() Экспорт

	Возврат "_ВходящиеДанные";

КонецФункции

Функция ИспользоватьСовместноСПоставляемойЧастьюБСП() Экспорт

	ИспользоватьСовместно = Истина;
	ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПриОпределенииРежимаИспользования(ИспользоватьСовместно);

	Возврат ИспользоватьСовместно;

КонецФункции

Процедура ДобавитьДополнительныйРеквизитВОбъект(ЭлементСправочника, ЭтоСуществующийОбъект, Свойство,
	ЗначениеДопРеквизита)
	
	Если ТипЗнч(Свойство.НаборСвойств) = Тип("СправочникСсылка.НаборыДополнительныхРеквизитовИСведений") Тогда

		Если ТипЗнч(ЭлементСправочника) = Тип("СправочникСсылка.Номенклатура") Тогда

			Если Свойство.НаборСвойств.ИмяПредопределенныхДанных <> "Справочник_Номенклатура_Общие"
				И Свойство.НаборСвойств <> ЭлементСправочника.КатегорияНоменклатуры.НаборСвойств Тогда

				Возврат;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если ЭтоСуществующийОбъект Тогда

		ОтборСтрок = Новый Структура("Свойство", Свойство);
		НайденныеСтрокиДопРеквизитов = ЭлементСправочника.ДополнительныеРеквизиты.НайтиСтроки(ОтборСтрок);
		СтрокаДопРеквизита = ?(НайденныеСтрокиДопРеквизитов.Количество() < 1,
			ЭлементСправочника.ДополнительныеРеквизиты.Добавить(), НайденныеСтрокиДопРеквизитов[0]);

	Иначе

		СтрокаДопРеквизита = ЭлементСправочника.ДополнительныеРеквизиты.Добавить();

	КонецЕсли;

	СтрокаДопРеквизита.Свойство = Свойство;
	СтрокаДопРеквизита.Значение = ЗначениеДопРеквизита;

КонецПроцедуры

Процедура ОбработатьВыбранныеДополнительныеРеквизиты(ЭлементСправочника, ЭтоСуществующийОбъект, СтрокаТаблицы,
	ВыбранныеДополнительныеРеквизиты, ИмяНабораОграничителя = "") Экспорт

	ПостФикс = "_ВходящиеДанные";

	Для Каждого ОписаниеДополнительногоРеквизита Из ВыбранныеДополнительныеРеквизиты Цикл

		СтроковоеЗначение = СтрокаТаблицы[ОписаниеДополнительногоРеквизита.Значение + ПостФикс];
		ЗначениеДопРеквизита = СтрокаТаблицы[ОписаниеДополнительногоРеквизита.Значение];
		Свойство = ОписаниеДополнительногоРеквизита.Ключ;
		
		Если ЗначениеЗаполнено(ИмяНабораОграничителя) 
			И Свойство.НаборСвойств.Родитель.ИмяПредопределенногоНабора <> ИмяНабораОграничителя Тогда
				
			Продолжить;
			
		КонецЕсли;

		Если Не ЗначениеЗаполнено(ЗначениеДопРеквизита) И Не ПустаяСтрока(СтроковоеЗначение) Тогда

			МассивТиповЗначений = Свойство.ТипЗначения.Типы();
			Если МассивТиповЗначений.Найти(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) <> Неопределено Тогда

				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СоздатьДополнительноеСвойство(ЗначениеДопРеквизита,
					Свойство, Ложь, СтроковоеЗначение);

			ИначеЕсли МассивТиповЗначений.Найти(Тип("СправочникСсылка.ЗначенияСвойствОбъектовИерархия"))
				<> Неопределено Тогда

				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СоздатьДополнительноеСвойство(ЗначениеДопРеквизита,
					Свойство, Истина, СтроковоеЗначение);
			КонецЕсли;

		КонецЕсли;

		Если ЗначениеЗаполнено(ЗначениеДопРеквизита) Тогда

			ДобавитьДополнительныйРеквизитВОбъект(ЭлементСправочника, ЭтоСуществующийОбъект, Свойство,
				ЗначениеДопРеквизита);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция СтандартныеИменаПолейНеподлежащихОбновлению(НастройкиЗагрузкиДанных)

	Возврат ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СтандартныеИменаПолейНеподлежащихОбновлению(
		НастройкиЗагрузкиДанных);

КонецФункции

Процедура ДобавитьИмяПоляВСтрокуОписанияСвойств(СтрокаОписанияСвойств, ИмяПоля, МассивИменНеподлежащихОбновлению = Неопределено)
	
	ИменаПолейНеУчаствующиеВЗаполненииСвойств = ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ИменаПолейНеУчаствующиеВЗаполненииСвойств();
	Если СтрНайти(ИменаПолейНеУчаствующиеВЗаполненииСвойств, ИмяПоля) > 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаОписанияСвойств = СтрокаОписанияСвойств + ?(ПустаяСтрока(СтрокаОписанияСвойств), "", ",") + ИмяПоля;
	
	Если МассивИменНеподлежащихОбновлению <> Неопределено Тогда
		МассивИменНеподлежащихОбновлению.Добавить(ИмяПоля);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокиИменПолей(ДеревоПолей, НастройкиЗагрузкиДанных, НастройкиОбновленияСвойств)

	ИменаПолейНеподлежащихОбновлению = НастройкиОбновленияСвойств.ИменаПолейНеподлежащихОбновлению;
	ИменаПолейНеподлежащихОбновлению = СтандартныеИменаПолейНеподлежащихОбновлению(НастройкиЗагрузкиДанных);
	МассивИменНеподлежащихОбновлению = РазложитьСтрокуВМассивПодстрок(ИменаПолейНеподлежащихОбновлению, ",");
	
	ИменаПолейОбновляемые = НастройкиОбновленияСвойств.ИменаПолейОбновляемые;
	
	Для каждого СтрокиПервогоУровня Из ДеревоПолей.Строки Цикл
		
		Если СтрокиПервогоУровня.НомерКолонки <> 0 Тогда
			
			ДобавитьИмяПоляВСтрокуОписанияСвойств(ИменаПолейОбновляемые, СтрокиПервогоУровня.ИмяПоля);
			
		ИначеЕсли НЕ ПустаяСтрока(СтрокиПервогоУровня.ИмяПоля)
			И СтрокиПервогоУровня.ИмяПоля <> ИмяПоляДобавленияДополнительныхРеквизитов() Тогда
			
			ДобавитьИмяПоляВСтрокуОписанияСвойств(ИменаПолейНеподлежащихОбновлению, СтрокиПервогоУровня.ИмяПоля, МассивИменНеподлежащихОбновлению);
			
		ИначеЕсли НЕ ПустаяСтрока(СтрокиПервогоУровня.ИмяГруппыПолей) Тогда
			
			Для каждого СтрокиВторогоУровня Из СтрокиПервогоУровня.Строки Цикл
				
				Если НЕ ПустаяСтрока(СтрокиВторогоУровня.ИмяПоля)
					И МассивИменНеподлежащихОбновлению.Найти(СтрокиВторогоУровня.ИмяПоля) <> Неопределено Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если СтрокиВторогоУровня.НомерКолонки <> 0 Тогда
					
					ДобавитьИмяПоляВСтрокуОписанияСвойств(ИменаПолейОбновляемые, СтрокиВторогоУровня.ИмяПоля);
					
				ИначеЕсли НЕ ПустаяСтрока(СтрокиВторогоУровня.ИмяПоля) Тогда
					
					ДобавитьИмяПоляВСтрокуОписанияСвойств(ИменаПолейНеподлежащихОбновлению, СтрокиВторогоУровня.ИмяПоля, МассивИменНеподлежащихОбновлению);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НастройкиОбновленияСвойств.ИменаПолейНеподлежащихОбновлению = ИменаПолейНеподлежащихОбновлению;
	НастройкиОбновленияСвойств.ИменаПолейОбновляемые = ИменаПолейОбновляемые;

КонецПроцедуры

Процедура СформироватьНастройкиОбновленияСвойств(ДеревоПолей, НастройкиЗагрузкиДанных) Экспорт

	НастройкиОбновленияСвойств = Новый Структура("ИменаПолейОбновляемые, ИменаПолейНеподлежащихОбновлению", "", "");
	ЗаполнитьСтрокиИменПолей(ДеревоПолей, НастройкиЗагрузкиДанных, НастройкиОбновленияСвойств);

	НастройкиЗагрузкиДанных.Вставить("НастройкиОбновленияСвойств", НастройкиОбновленияСвойств);

КонецПроцедуры

// ЗагрузкаДанных

Процедура ЗагрузитьДанные(ПараметрыВызоваСервера, АдресВременногоХранилища) Экспорт

	МаксимумПолезныхКолонок	= ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.МаксимумПолезныхКолонокТабличногоДокумента();
	ИмяВременногоФайла 		= ПараметрыВызоваСервера.ИмяВременногоФайла;
	Расширение 				= ПараметрыВызоваСервера.Расширение;
	ТабличныйДокумент 		= ПараметрыВызоваСервера.ТабличныйДокумент;
	НастройкиЗагрузкиДанных	= ПараметрыВызоваСервера.НастройкиЗагрузкиДанных;
	ИдентификаторПоставляемойНастройки = Неопределено;

	Если Расширение = "csv" Тогда

		ЗагрузитьCSVФайлВТабличныйДокумент(ИмяВременногоФайла, ТабличныйДокумент);
		КоличествоКолонок = ТабличныйДокумент.ШиринаТаблицы;

	Иначе

		ИсходныйТабличныйДокумент = Новый ТабличныйДокумент;
		ИсходныйТабличныйДокумент.Прочитать(ИмяВременногоФайла);

		Если ПараметрыВызоваСервера.НастройкиЗагрузкиДанных.ФиксированныйШаблон Тогда
			// удалить первые 6 строк с Инструкцией по заполнению
			ИсходныйТабличныйДокумент.УдалитьОбласть(ИсходныйТабличныйДокумент.Область("R1:R6"),
				ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		РезультатПодготовки = ПодготовитьТабличныйДокументДляЗагрузкуВОтчетКомиссионера(
			ИсходныйТабличныйДокумент, НастройкиЗагрузкиДанных);
			
		Если РезультатПодготовки <> Неопределено Тогда
			ИсходныйТабличныйДокумент = РезультатПодготовки.ТабличныйДокумент;
		КонецЕсли;
		
		ИдентификаторПоставляемойНастройки = НастройкиЗагрузкиДанных.ИдентификаторПоставляемойНастройки;

		ОптимизироватьТабличныйДокумент(ИсходныйТабличныйДокумент, ТабличныйДокумент);

		КоличествоКолонок = Мин(ТабличныйДокумент.ШиринаТаблицы, МаксимумПолезныхКолонок);

	КонецЕсли;

	ЗаполнитьРасшифровкиВТабличномДокументе(ТабличныйДокумент, КоличествоКолонок, НастройкиЗагрузкиДанных);

	УдалитьФайлы(ИмяВременногоФайла);

	Если РезультатПодготовки = Неопределено Тогда
		ПараметрыШапки = Новый Структура;
	Иначе
		ПараметрыШапки = РезультатПодготовки.ПараметрыШапки;
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторПоставляемойНастройки", ИдентификаторПоставляемойНастройки);
	ДополнительныеПараметры.Вставить("ПараметрыШапки", ПараметрыШапки);

	РезультатПроцедуры = Новый Структура;
	РезультатПроцедуры.Вставить("ТабличныйДокумент", ТабличныйДокумент);
	РезультатПроцедуры.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);

	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(РезультатПроцедуры, АдресВременногоХранилища);

КонецПроцедуры

Функция ПодготовитьТабличныйДокументДляЗагрузкуВОтчетКомиссионера(Знач ИсходныйТабличныйДокумент,
	НастройкиЗагрузкиДанных)
	
	Если НастройкиЗагрузкиДанных.ЭтоЗагрузкаТабличнойЧасти 
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НастройкиЗагрузкиДанных, "ПолноеИмяТабличнойЧасти")
		И СтрНайти(НастройкиЗагрузкиДанных.ПолноеИмяТабличнойЧасти, "ОтчетКомиссионера.") = 0 Тогда
		Возврат Неопределено
	КонецЕсли;
	
	ЭтоЗагрузкаВсегоДокумента = ?(НастройкиЗагрузкиДанных.Свойство("ЗагрузкаШапкиДокумента"), 
		НастройкиЗагрузкиДанных.ЗагрузкаШапкиДокумента, Ложь);
	
	Если ЭтоЗагрузкаВсегоДокумента Тогда
		ЭтоЗагрузкаПродаж = Истина;
		ЭтоЗагрузкаВозвратов = Истина;
	Иначе
		ЭтоЗагрузкаПродаж = ЭтоЗагрузкаКомиссионныхПродаж(НастройкиЗагрузкиДанных);
		ЭтоЗагрузкаВозвратов = ЭтоЗагрузкаКомиссионныхВозвратов(НастройкиЗагрузкиДанных);
	КонецЕсли;
	
	Если ЭтоЗагрузкаWildberriesУведомлениеОВыкупе(ИсходныйТабличныйДокумент) Тогда

		Попытка
			
			РезультатПодготовки 
				= ПодготовитьТабличныйДокументУведомлениеОВыкупеWildberries(ИсходныйТабличныйДокумент);
					
		Исключение
			
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не удалось подготовить уведомление о выкупе'"));
			ЗаписьЖурналаРегистрации(НСтр("ru='Не удалось подготовить уведомление о выкупе'", 
					ОбщегоНазначения.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка, , , НСтр("ru='Загрузка данных из внешнего источника'"));
			
		КонецПопытки;
			
		ИдентификаторПоставляемойНастройки 
			= Справочники.СоответствиеПолейЗагрузкиДанныхИзВнешнегоИсточника.ИдентификаторWildberriesУведомлениеОВыкупе();
		НастройкиЗагрузкиДанных.ИдентификаторПоставляемойНастройки = ИдентификаторПоставляемойНастройки;

	ИначеЕсли ЭтоЗагрузкаWildberriesОтчетСДетализацией(ИсходныйТабличныйДокумент) Тогда

		Попытка
			
			РезультатПодготовки = ПодготовитьТабличныйДокументОтчетСДетализациейWildberries(
					ИсходныйТабличныйДокумент, ЭтоЗагрузкаПродаж, ЭтоЗагрузкаВозвратов);
					
		Исключение
			
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не удалось подготовить отчет с детализацией'"));
			ЗаписьЖурналаРегистрации(НСтр("ru='Не удалось подготовить отчет с детализацией'", 
					ОбщегоНазначения.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка, , , НСтр("ru='Загрузка данных из внешнего источника'"));
			
		КонецПопытки;

		ИдентификаторПоставляемойНастройки 
				= Справочники.СоответствиеПолейЗагрузкиДанныхИзВнешнегоИсточника.ИдентификаторWildberriesДетальный();
		НастройкиЗагрузкиДанных.ИдентификаторПоставляемойНастройки = ИдентификаторПоставляемойНастройки;

	ИначеЕсли ЭтоЗагрузкаOzonОтчетПозаказный(ИсходныйТабличныйДокумент) Тогда

		РезультатПодготовки = ПодготовитьТабличныйДокументОтчетПозаказныйOzon(
					ИсходныйТабличныйДокумент, ЭтоЗагрузкаПродаж, ЭтоЗагрузкаВозвратов);

		ИдентификаторПоставляемойНастройки 
				= Справочники.СоответствиеПолейЗагрузкиДанныхИзВнешнегоИсточника.ИдентификаторOzonПозаказный();
		НастройкиЗагрузкиДанных.ИдентификаторПоставляемойНастройки = ИдентификаторПоставляемойНастройки;

	ИначеЕсли ЭтоЗагрузкаOzonОтчетСводный(ИсходныйТабличныйДокумент) Тогда

		РезультатПодготовки = ПодготовитьТабличныйДокументОтчетСводныйOzon(
					ИсходныйТабличныйДокумент, ЭтоЗагрузкаПродаж, ЭтоЗагрузкаВозвратов);

		ИдентификаторПоставляемойНастройки 
				= Справочники.СоответствиеПолейЗагрузкиДанныхИзВнешнегоИсточника.ИдентификаторOzonСводный();
		НастройкиЗагрузкиДанных.ИдентификаторПоставляемойНастройки = ИдентификаторПоставляемойНастройки;

	КонецЕсли;

	
	Возврат РезультатПодготовки;

КонецФункции

Функция ПодготовитьТабличныйДокументУведомлениеОВыкупеWildberries(Знач ТабличныйДокумент)
	Перем ОбластьУдаления;
	Перем НайденИтого;

	
	Результат = Новый Структура("ТабличныйДокумент, ПараметрыШапки");
	ПараметрыШапки = Новый Структура("НомерВходящегоДокумента, ДатаВходящегоДокумента");
	
	СтруктураПоиска = Справочники.СоответствиеПолейЗагрузкиДанныхИзВнешнегоИсточника.СтруктураПоискаСтрокУведомлениеОВыкупеWildberries();
	
	НайденНомер = ТабличныйДокумент.НайтиТекст(СтруктураПоиска.СтрокаПоискаНомера, , , , , Истина);
	Если НайденНомер <> Неопределено Тогда
		ПозицияНачалаНомера = СтрДлина(СтруктураПоиска.СтрокаПоискаНомера);
		ПозицияНачалаДаты = СтрНайти(ВРег(НайденНомер.Текст), СтруктураПоиска.СтрокаПоискаДаты, , ПозицияНачалаНомера);
		
		ПараметрыШапки.НомерВходящегоДокумента = СокрЛП(
			Сред(НайденНомер.Текст, ПозицияНачалаНомера, ПозицияНачалаДаты - ПозицияНачалаНомера));
		
		Попытка
			ПараметрыШапки.ДатаВходящегоДокумента = СокрЛП(Прав(НайденНомер.Текст, 10)) + " 00:00:00";
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru='Не удалось получить дату входящего документа'", 
					ОбщегоНазначения.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка, , , НСтр("ru='Загрузка данных из внешнего источника'"));
		КонецПопытки;
		
	КонецЕсли;
	
	ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область(СтруктураПоиска.АдресОбластиШапки), 
		ТипСмещенияТабличногоДокумента.ПоВертикали);

	ВысотаПодвала = СтруктураПоиска.ВысотаПодвала;
	НайденИтого = ТабличныйДокумент.НайтиТекст(СтруктураПоиска.СтрокаПоискаПодвала, , , , , , Истина);
	Если НайденИтого <> Неопределено Тогда

		АдресПодвала = "R" + XMLСтрока(НайденИтого.Верх) + ":R" + XMLСтрока(НайденИтого.Верх + ВысотаПодвала);
		ОбластьУдаления = ТабличныйДокумент.Область(АдресПодвала);
		ТабличныйДокумент.УдалитьОбласть(ОбластьУдаления, ТипСмещенияТабличногоДокумента.ПоВертикали);

	КонецЕсли;
	
	Для Каждого АдресКолонки Из СтруктураПоиска.УдаляемыеКолонки Цикл
		ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область(АдресКолонки), 
			ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЦикла;

	Результат.ТабличныйДокумент = ТабличныйДокумент;
	Результат.ПараметрыШапки = ПараметрыШапки;

	Возврат Результат;
	
КонецФункции

Функция ПодготовитьТабличныйДокументОтчетСДетализациейWildberries(Знач ТабличныйДокумент, ЗагружатьПродажи = Истина,
	ЗагружатьВозвраты = Ложь)

	Результат = Новый Структура("ТабличныйДокумент, ПараметрыШапки");
	ПараметрыШапки = Новый Структура("НомерВходящегоДокумента, ДатаВходящегоДокумента");
	
	СтруктураПоиска = Справочники.СоответствиеПолейЗагрузкиДанныхИзВнешнегоИсточника.СтруктураПоискаСтрокОтчетСДетализациейWildberries();
	
	УдаляемыеСтроки = Новый Массив;
	
	НомерСтроки = СтруктураПоиска.НомерНачальнойСтроки;
	НомерКолонкиПоставка = СтруктураПоиска.НомерКолонкиПоставка;
	НомерКолонкиТипДокумента = СтруктураПоиска.НомерКолонкиТипДокумента;
	НомерКолонкиКоличество = СтруктураПоиска.НомерКолонкиКоличество;
	НомерКолонкиСтрана = СтруктураПоиска.НомерКолонкиСтрана;
	НомерКолонкиОбоснованияДляОплаты = СтруктураПоиска.НомерКолонкиОбоснованияДляОплаты;
	ОбоснованияПродажи = СтруктураПоиска.ОбоснованияПродажи;
	ОбоснованияВозврата = СтруктураПоиска.ОбоснованияВозврата;
	ТипДокументаПродажа = СтруктураПоиска.ТипДокументаПродажа;
	ТипДокументаВозврат = СтруктураПоиска.ТипДокументаВозврат;
	
	АдресОбласти = СтрШаблон("R%1C%2", XMLСтрока(НомерСтроки), НомерКолонкиПоставка);
	НомерПоставки = ТабличныйДокумент.Область(АдресОбласти).Текст;
	Пока ЗначениеЗаполнено(НомерПоставки) Цикл
		
		АдресОбласти = СтрШаблон("R%1C%2", XMLСтрока(НомерСтроки), НомерКолонкиТипДокумента);
		ТипДокумента = ВРег(СокрЛП(ТабличныйДокумент.Область(АдресОбласти).Текст));
		
		АдресОбласти = СтрШаблон("R%1C%2", XMLСтрока(НомерСтроки), НомерКолонкиОбоснованияДляОплаты);
		ОбоснованиеДляОплаты = ВРег(СокрЛП(ТабличныйДокумент.Область(АдресОбласти).Текст));
		
		ЭтоПродажаВСтроке = (ТипДокумента = ТипДокументаПродажа) 
			И (ОбоснованияПродажи.Найти(ОбоснованиеДляОплаты) <> Неопределено);
		Если ЭтоПродажаВСтроке И Не ЗагружатьПродажи Тогда
			УдаляемыеСтроки.Добавить(НомерСтроки);
		КонецЕсли;
		
		ЭтоВозвратВСтроке = (ТипДокумента = ТипДокументаВозврат) 
			И (ОбоснованияВозврата.Найти(ОбоснованиеДляОплаты) <> Неопределено);
		Если ЭтоВозвратВСтроке И Не ЗагружатьВозвраты Тогда
			УдаляемыеСтроки.Добавить(НомерСтроки);
		КонецЕсли;
		
		АдресОбласти = СтрШаблон("R%1C%2", XMLСтрока(НомерСтроки), НомерКолонкиКоличество);
		Количество = Число(ТабличныйДокумент.Область(АдресОбласти).Текст);
		Если Количество < 1 И УдаляемыеСтроки.Найти(НомерСтроки) = Неопределено Тогда
			УдаляемыеСтроки.Добавить(НомерСтроки);
		КонецЕсли;
		Если ЭтоВозвратВСтроке Тогда
			ТабличныйДокумент.Область(АдресОбласти).Текст = "-" + ТабличныйДокумент.Область(АдресОбласти).Текст;
		КонецЕсли;
		
		АдресОбласти = СтрШаблон("R%1C%2", XMLСтрока(НомерСтроки), НомерКолонкиСтрана);
		Страна = ТабличныйДокумент.Область(АдресОбласти).Текст;
		Если ВРег(СокрЛП(Страна)) <> "РОССИЯ" И УдаляемыеСтроки.Найти(НомерСтроки) = Неопределено Тогда
			УдаляемыеСтроки.Добавить(НомерСтроки);
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		АдресОбласти = СтрШаблон("R%1C%2", XMLСтрока(НомерСтроки), НомерКолонкиПоставка);
		НомерПоставки = ТабличныйДокумент.Область(АдресОбласти).Текст;	
		
	КонецЦикла;
	
	МаксимальныйИндекс = УдаляемыеСтроки.Количество() - 1;
	
	Пока МаксимальныйИндекс >= 0 Цикл
		НомерСтроки = УдаляемыеСтроки[МаксимальныйИндекс];	
		ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область(СтрШаблон("R%1", XMLСтрока(НомерСтроки))), 
			ТипСмещенияТабличногоДокумента.ПоВертикали);
		МаксимальныйИндекс = МаксимальныйИндекс - 1;
	КонецЦикла;
		
	Результат.ТабличныйДокумент = ТабличныйДокумент;
	Результат.ПараметрыШапки = ПараметрыШапки;

	Возврат Результат;	
	
КонецФункции

Функция ПодготовитьТабличныйДокументОтчетПозаказныйOzon(Знач ТабличныйДокумент, ЗагружатьПродажи = Истина,
	ЗагружатьВозвраты = Ложь)
	
	Перем ОбластьУдаления;
	Перем НайденВсего;
	
	Результат = Новый Структура("ТабличныйДокумент, ПараметрыШапки");
	ПараметрыШапки = Новый Структура("НомерВходящегоДокумента, ДатаВходящегоДокумента");
	
	СтруктураПоискаСтрок = Справочники.СоответствиеПолейЗагрузкиДанныхИзВнешнегоИсточника.СтруктураПоискаСтрокОтчетПозаказныйOzon();
	
	НайденНомер = ТабличныйДокумент.НайтиТекст(СтруктураПоискаСтрок.СтрокаПоискаНомера, , , , , Истина);
	Если НайденНомер <> Неопределено Тогда
		ПараметрыШапки.НомерВходящегоДокумента = СокрЛП(СтрЗаменить(НайденНомер.Текст, 
			СтруктураПоискаСтрок.СтрокаПоискаНомера, ""));
	КонецЕсли;
	
	НайденаДата = ТабличныйДокумент.НайтиТекст(СтруктураПоискаСтрок.СтрокаПоискаДаты, , , , , Истина);
	Если НайденаДата <> Неопределено Тогда
		ПозицияДатаСтрокой = СтрНайти(ВРег(НайденаДата.Текст), "ПО");
		Если ПозицияДатаСтрокой <> 0 Тогда
			ДатаСтрокой = Сред(НайденаДата.Текст, ПозицияДатаСтрокой + 2, СтрДлина(НайденаДата.Текст));
			Попытка
				ПараметрыШапки.ДатаВходящегоДокумента = Дата(ДатаСтрокой + " 00:00:00");
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru='Не удалось получить дату входящего документа'", 
						ОбщегоНазначения.КодОсновногоЯзыка()), 
					УровеньЖурналаРегистрации.Ошибка, , , НСтр("ru='Загрузка данных из внешнего источника'"));
			КонецПопытки;			
		КонецЕсли;
	КонецЕсли;

	ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область(СтруктураПоискаСтрок.АдресОбластиШапки), 
		ТипСмещенияТабличногоДокумента.ПоВертикали);

	ВысотаПодвала = СтруктураПоискаСтрок.ВысотаПодвала;
	НайденВсего = ТабличныйДокумент.НайтиТекст(СтруктураПоискаСтрок.СтрокаПоискаПодвала, , , , , , Истина);
	Если НайденВсего <> Неопределено Тогда

		Верх = НайденВсего.Верх - 2;
		АдресПодвала = "R" + XMLСтрока(Верх) + ":R" + XMLСтрока(Верх + ВысотаПодвала);
		ОбластьУдаления = ТабличныйДокумент.Область(АдресПодвала);
		ТабличныйДокумент.УдалитьОбласть(ОбластьУдаления, ТипСмещенияТабличногоДокумента.ПоВертикали);

	КонецЕсли;
	
	Для Каждого АдресКолонки Из СтруктураПоискаСтрок.УдаляемыеКолонки Цикл
		ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область(АдресКолонки), 
			ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЦикла;

	УдаляемыеСтроки = Новый Массив;
	ВозвратныеСтроки = Новый Массив;     
	
	НомерСтрокиТабличногоДокумента 	= СтруктураПоискаСтрок.СтартовыйНомерСтроки;
	НомерКолонкиТовар 				= СтруктураПоискаСтрок.НомерКолонкиТовар;
	НомерКолонкиКоличествоПродажа 	= СтруктураПоискаСтрок.НомерКолонкиКоличествоПродажа;
	НомерКолонкиКоличествоВозврат 	= СтруктураПоискаСтрок.НомерКолонкиКоличествоВозврат;
	НомерКолонкиЦенаВозврат 		= СтруктураПоискаСтрок.НомерКолонкиЦенаВозврат;
	НомерКолонкиЦенаПродажи 		= СтруктураПоискаСтрок.НомерКолонкиЦенаПродажи;
	НомерКолонкиСуммаВозврат		= СтруктураПоискаСтрок.НомерКолонкиСуммаВозврат;
	НомерКолонкиСуммаПродажа		= СтруктураПоискаСтрок.НомерКолонкиСуммаПродажа;
	
	// найти удаляемые и возвратные строки
	АдресОбласти = СтрШаблон("R%1C%2", XMLСтрока(НомерСтрокиТабличногоДокумента), НомерКолонкиТовар);
	Товар = ТабличныйДокумент.Область(АдресОбласти).Текст;
	Пока ЗначениеЗаполнено(Товар) Цикл
		
		АдресОбласти = СтрШаблон("R%1C%2", XMLСтрока(НомерСтрокиТабличногоДокумента), НомерКолонкиКоличествоПродажа); 	
		Количество = Число(?(ЗначениеЗаполнено(ТабличныйДокумент.Область(АдресОбласти).Текст),
			ТабличныйДокумент.Область(АдресОбласти).Текст, 0)); 
		
		Если Количество < 1 И УдаляемыеСтроки.Найти(НомерСтрокиТабличногоДокумента) = Неопределено 
			Или НЕ ЗагружатьПродажи Тогда
			
			УдаляемыеСтроки.Добавить(НомерСтрокиТабличногоДокумента);
			
		КонецЕсли;
		
		АдресОбласти = СтрШаблон("R%1C%2", XMLСтрока(НомерСтрокиТабличногоДокумента), НомерКолонкиСуммаВозврат); 
		Если ЗначениеЗаполнено(ТабличныйДокумент.Область(АдресОбласти).Текст) 
			И ЗагружатьВозвраты Тогда
			
			ВозвратныеСтроки.Добавить(НомерСтрокиТабличногоДокумента);
			
		КонецЕсли;
		
		НомерСтрокиТабличногоДокумента = НомерСтрокиТабличногоДокумента + 1;
		АдресОбласти = СтрШаблон("R%1C%2", XMLСтрока(НомерСтрокиТабличногоДокумента), НомерКолонкиТовар);
		Товар = ТабличныйДокумент.Область(АдресОбласти).Текст;		
		
	КонецЦикла;
	
	// Возвратные строки добавить в конец табличного документа, заменить количество и цену на возвратную
	НомерСтрокиТабличногоДокумента = ТабличныйДокумент.ПолучитьРазмерОбластиДанныхПоВертикали() + 1;
	МаксимальныйИндекс = ВозвратныеСтроки.Количество() - 1;
	Пока МаксимальныйИндекс >= 0 Цикл
		НомерСтроки = ВозвратныеСтроки[МаксимальныйИндекс];	
					
		АдресОбластиКопирования = СтрШаблон("R%1C%2:R%3C%4", XMLСтрока(НомерСтроки), 1,
			XMLСтрока(НомерСтроки), 20);
		ОбластьКопирования = ТабличныйДокумент.Область(АдресОбластиКопирования);   
		
		АдресОбластиПолучателя = СтрШаблон("R%1C%2:R%3C%4", XMLСтрока(НомерСтрокиТабличногоДокумента), 1,
			XMLСтрока(НомерСтрокиТабличногоДокумента), 20);     
			
		ОбластьПолучатель = ТабличныйДокумент.Область(АдресОбластиПолучателя);
		ТабличныйДокумент.ВставитьОбласть(ОбластьКопирования, ОбластьПолучатель,
			ТипСмещенияТабличногоДокумента.ПоВертикали);
			
		ОбластьКоличествоПолучатель = ТабличныйДокумент.Область(СтрШаблон("R%1C%2", XMLСтрока(
			НомерСтрокиТабличногоДокумента), НомерКолонкиКоличествоПродажа));  
			
		ОбластьКоличествоВозврат = ТабличныйДокумент.Область(СтрШаблон("R%1C%2", XMLСтрока(НомерСтроки),
			НомерКолонкиКоличествоВозврат));
		ОбластьКоличествоПолучатель.Текст = "-" + ОбластьКоличествоВозврат.Текст;
		
		НомерСтрокиТабличногоДокумента = НомерСтрокиТабличногоДокумента + 1;
		МаксимальныйИндекс = МаксимальныйИндекс - 1;
	КонецЦикла;
	
	МаксимальныйИндекс = УдаляемыеСтроки.Количество() - 1;
	Пока МаксимальныйИндекс >= 0 Цикл
		НомерСтроки = УдаляемыеСтроки[МаксимальныйИндекс];
		ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область(СтрШаблон("R%1", XMLСтрока(НомерСтроки))), 
			ТипСмещенияТабличногоДокумента.ПоВертикали);
		МаксимальныйИндекс = МаксимальныйИндекс - 1;
	КонецЦикла;

	Результат.ТабличныйДокумент = ТабличныйДокумент;
	Результат.ПараметрыШапки = ПараметрыШапки;

	Возврат Результат;
	
КонецФункции

Функция ПодготовитьТабличныйДокументОтчетСводныйOzon(Знач ТабличныйДокумент, ЗагружатьПродажи = Истина,
	ЗагружатьВозвраты = Ложь)
	
	Перем ОбластьУдаления;
	Перем НайденВсего;

	Результат = Новый Структура("ТабличныйДокумент, ПараметрыШапки");
	ПараметрыШапки = Новый Структура("НомерВходящегоДокумента, ДатаВходящегоДокумента");
	
	СтруктураПоискаСтрок = Справочники.СоответствиеПолейЗагрузкиДанныхИзВнешнегоИсточника.СтруктураПоискаСтрокОтчетСводныйOzon();
	
	НайденНомер = ТабличныйДокумент.НайтиТекст(СтруктураПоискаСтрок.СтрокаПоискаНомера, , , , , Истина);
	Если НайденНомер <> Неопределено Тогда
		ПараметрыШапки.НомерВходящегоДокумента = СокрЛП(СтрЗаменить(НайденНомер.Текст, 
			СтруктураПоискаСтрок.СтрокаПоискаНомера, ""));
	КонецЕсли;
	
	НайденаДата = ТабличныйДокумент.НайтиТекст(СтруктураПоискаСтрок.СтрокаПоискаДаты, , , , , Истина);
	Если НайденаДата <> Неопределено Тогда
		ПозицияДатаСтрокой = СтрНайти(ВРег(НайденаДата.Текст), "ПО");
		Если ПозицияДатаСтрокой <> 0 Тогда
			ДатаСтрокой = Сред(НайденаДата.Текст, ПозицияДатаСтрокой + 2, СтрДлина(НайденаДата.Текст));
			Попытка
				ПараметрыШапки.ДатаВходящегоДокумента = Дата(ДатаСтрокой + " 00:00:00");
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru='Не удалось получить дату входящего документа'", 
					ОбщегоНазначения.КодОсновногоЯзыка()), 
					УровеньЖурналаРегистрации.Ошибка, , , НСтр("ru='Загрузка данных из внешнего источника'"));
			КонецПопытки;			
		КонецЕсли;
	КонецЕсли;

	ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область(СтруктураПоискаСтрок.АдресОбластиШапки), 
		ТипСмещенияТабличногоДокумента.ПоВертикали);

	ВысотаПодвала = СтруктураПоискаСтрок.ВысотаПодвала;
	НайденВсего = ТабличныйДокумент.НайтиТекст(СтруктураПоискаСтрок.СтрокаПоискаПодвала, , , , , , Истина);
	Если НайденВсего <> Неопределено Тогда

		Верх = НайденВсего.Верх - 2;
		АдресПодвала = "R" + XMLСтрока(Верх) + ":R" + XMLСтрока(Верх + ВысотаПодвала);
		ОбластьУдаления = ТабличныйДокумент.Область(АдресПодвала);
		ТабличныйДокумент.УдалитьОбласть(ОбластьУдаления, ТипСмещенияТабличногоДокумента.ПоВертикали);

	КонецЕсли;

	Для Каждого АдресКолонки Из СтруктураПоискаСтрок.УдаляемыеКолонки Цикл
		ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область(АдресКолонки), 
			ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЦикла;
	
	УдаляемыеСтроки = Новый Массив;
	ВозвратныеСтроки = Новый Массив; 
	
	НомерСтрокиТабличногоДокумента 	= СтруктураПоискаСтрок.СтартовыйНомерСтроки;
	НомерКолонкиТовар 				= СтруктураПоискаСтрок.НомерКолонкиТовар;
	НомерКолонкиКоличествоПродажа 	= СтруктураПоискаСтрок.НомерКолонкиКоличествоПродажа;
	НомерКолонкиКоличествоВозврат 	= СтруктураПоискаСтрок.НомерКолонкиКоличествоВозврат;
	НомерКолонкиЦенаВозврат 		= СтруктураПоискаСтрок.НомерКолонкиЦенаВозврат;
	НомерКолонкиЦенаПродажи 		= СтруктураПоискаСтрок.НомерКолонкиЦенаПродажи;
	НомерКолонкиСуммаВозврат		= СтруктураПоискаСтрок.НомерКолонкиСуммаВозврат; 
	
	// найти удаляемые и возвратные строки
	АдресОбласти = СтрШаблон("R%1C%2", XMLСтрока(НомерСтрокиТабличногоДокумента), НомерКолонкиТовар);
	Товар = ТабличныйДокумент.Область(АдресОбласти).Текст;
	Пока ЗначениеЗаполнено(Товар) Цикл
		
		АдресОбласти = СтрШаблон("R%1C%2", XMLСтрока(НомерСтрокиТабличногоДокумента), НомерКолонкиКоличествоПродажа); 	
		Количество = Число(?(ЗначениеЗаполнено(ТабличныйДокумент.Область(АдресОбласти).Текст),
			ТабличныйДокумент.Область(АдресОбласти).Текст, 0)); 
						
		Если Количество < 1 И УдаляемыеСтроки.Найти(НомерСтрокиТабличногоДокумента) = Неопределено 
			Или НЕ ЗагружатьПродажи Тогда
				
			УдаляемыеСтроки.Добавить(НомерСтрокиТабличногоДокумента);
			
		КонецЕсли;
		
		АдресОбласти = СтрШаблон("R%1C%2", XMLСтрока(НомерСтрокиТабличногоДокумента), НомерКолонкиСуммаВозврат); 
		Если ЗначениеЗаполнено(ТабличныйДокумент.Область(АдресОбласти).Текст) 
			И ЗагружатьВозвраты Тогда
				
			ВозвратныеСтроки.Добавить(НомерСтрокиТабличногоДокумента);
			
		КонецЕсли;
		
		НомерСтрокиТабличногоДокумента = НомерСтрокиТабличногоДокумента + 1;
		АдресОбласти = СтрШаблон("R%1C%2", XMLСтрока(НомерСтрокиТабличногоДокумента), НомерКолонкиТовар);
		Товар = ТабличныйДокумент.Область(АдресОбласти).Текст;		
	КонецЦикла;
	
	// Возвратные строки добавить в конец табличного документа, заменить количество и цену на возвратную
	НомерСтрокиТабличногоДокумента = ТабличныйДокумент.ПолучитьРазмерОбластиДанныхПоВертикали() + 1;
	МаксимальныйИндекс = ВозвратныеСтроки.Количество() - 1;
	Пока МаксимальныйИндекс >= 0 Цикл
		НомерСтроки = ВозвратныеСтроки[МаксимальныйИндекс];	
		
		АдресОбластиКопирования = СтрШаблон("R%1C%2:R%3C%4", XMLСтрока(НомерСтроки), 1,
			XMLСтрока(НомерСтроки), 8);   
			
		ОбластьКопирования = ТабличныйДокумент.Область(АдресОбластиКопирования); 
		
		АдресОбластиПолучателя = СтрШаблон("R%1C%2:R%3C%4", XMLСтрока(НомерСтрокиТабличногоДокумента), 1,
			XMLСтрока(НомерСтрокиТабличногоДокумента), 8);   
			
		ОбластьПолучатель = ТабличныйДокумент.Область(АдресОбластиПолучателя); 
		
		ТабличныйДокумент.ВставитьОбласть(ОбластьКопирования, ОбластьПолучатель,
			ТипСмещенияТабличногоДокумента.ПоВертикали);
			
		ОбластьКоличествоПолучатель = ТабличныйДокумент.Область(СтрШаблон("R%1C%2", XMLСтрока(
			НомерСтрокиТабличногоДокумента), НомерКолонкиКоличествоПродажа));
			
		ОбластьКоличествоВозврат = ТабличныйДокумент.Область(СтрШаблон("R%1C%2", XMLСтрока(НомерСтроки),
			НомерКолонкиКоличествоВозврат));
			
		ОбластьКоличествоПолучатель.Текст = "-" + ОбластьКоличествоВозврат.Текст;

		ОбластьЦенаПолучатель = ТабличныйДокумент.Область(СтрШаблон("R%1C%2", XMLСтрока(
			НомерСтрокиТабличногоДокумента), НомерКолонкиЦенаПродажи));
			
		ОбластьЦенаВозврат = ТабличныйДокумент.Область(СтрШаблон("R%1C%2", XMLСтрока(НомерСтроки),
			НомерКолонкиЦенаВозврат));   
			
		ОбластьЦенаПолучатель.Текст = ОбластьЦенаВозврат.Текст;
		
		НомерСтрокиТабличногоДокумента = НомерСтрокиТабличногоДокумента + 1;
		МаксимальныйИндекс = МаксимальныйИндекс - 1;
	КонецЦикла;
	
	МаксимальныйИндекс = УдаляемыеСтроки.Количество() - 1;
	Пока МаксимальныйИндекс >= 0 Цикл
		НомерСтроки = УдаляемыеСтроки[МаксимальныйИндекс];
		ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область(СтрШаблон("R%1", XMLСтрока(НомерСтроки))), 
			ТипСмещенияТабличногоДокумента.ПоВертикали);
		МаксимальныйИндекс = МаксимальныйИндекс - 1;
	КонецЦикла;

	Результат.ТабличныйДокумент = ТабличныйДокумент;
	Результат.ПараметрыШапки = ПараметрыШапки;

	Возврат Результат;
	
КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Разделитель) Экспорт

	Подстроки = Новый Массив;

	РазмерТекста = СтрДлина(Строка);
	НачалоПодстроки = 1;
	Для Позиция = 1 По РазмерТекста Цикл

		КодСимвола = КодСимвола(Строка, Позиция);
		Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодСимвола, Разделитель) Тогда

			Если Позиция <> НачалоПодстроки Тогда

				Подстроки.Добавить(Сред(Строка, НачалоПодстроки, Позиция - НачалоПодстроки));

			ИначеЕсли Позиция = НачалоПодстроки Тогда

				Подстроки.Добавить("");

			КонецЕсли;

			НачалоПодстроки = Позиция + 1;

		КонецЕсли;

	КонецЦикла;

	Если Позиция <> НачалоПодстроки Тогда

		Подстроки.Добавить(Сред(Строка, НачалоПодстроки, Позиция - НачалоПодстроки));

	ИначеЕсли Позиция = НачалоПодстроки Тогда

		Подстроки.Добавить("");

	КонецЕсли;

	Возврат Подстроки;

КонецФункции

Процедура ОптимизироватьТабличныйДокумент(ИсходныйТабличныйДокумент, ТабличныйДокумент)

	МаксимумПолезныхКолонок = МИН(ИсходныйТабличныйДокумент.ШиринаТаблицы,
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.МаксимумПолезныхКолонокТабличногоДокумента());
	Пока Истина Цикл

		ЕстьЗаполненныеЯчейки = Ложь;
		СчетчикЯчеек = 0;

		Для СчетчикЯчеек = 1 По 12 Цикл

			// проверяем ячейку в последней колонке
			Область = ИсходныйТабличныйДокумент.Область(СчетчикЯчеек, МаксимумПолезныхКолонок);
			Если Не ПустаяСтрока(Область.Текст) Тогда

				ЕстьЗаполненныеЯчейки = Истина;
				Прервать;

			КонецЕсли;

		КонецЦикла;

		Если ЕстьЗаполненныеЯчейки Или МаксимумПолезныхКолонок < 7 Тогда

			Прервать;

		Иначе

			МаксимумПолезныхКолонок = МаксимумПолезныхКолонок - 1;

		КонецЕсли;

	КонецЦикла;

	ТабличныйДокумент.Вывести(ИсходныйТабличныйДокумент.ПолучитьОбласть(1, 1, ИсходныйТабличныйДокумент.ВысотаТаблицы,
		МаксимумПолезныхКолонок));

КонецПроцедуры

Процедура ЗагрузитьCSVФайлВТабличныйДокумент(ИмяВременногоФайла, ТабличныйДокумент)

	Файл = Новый Файл(ИмяВременногоФайла);
	Если Не Файл.Существует() Тогда

		Возврат;

	КонецЕсли;

	Макет = Обработки.ЗагрузкаДанныхИзВнешнегоИсточника.ПолучитьМакет("ПростойШаблон");
	ОбластьЗначение = Макет.ПолучитьОбласть("Значение");

	ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла, КодировкаТекста.ANSI);
	Строка = ЧтениеТекста.ПрочитатьСтроку();
	Пока Строка <> Неопределено Цикл

		ПерваяКолонка = Истина;
		МассивПодстрок = РазложитьСтрокуВМассивПодстрок(Строка, ";");
		Для Каждого Подстрока Из МассивПодстрок Цикл

			ОбластьЗначение.Параметры.Значение = Строка(Подстрока);

			Если ПерваяКолонка Тогда

				ТабличныйДокумент.Вывести(ОбластьЗначение);
				ПерваяКолонка = Ложь;

			Иначе

				ТабличныйДокумент.Присоединить(ОбластьЗначение);

			КонецЕсли;

		КонецЦикла;

		Строка = ЧтениеТекста.ПрочитатьСтроку();

	КонецЦикла;

КонецПроцедуры

Функция ПреобразоватьДанныеКТипуКолонки(Значение, ТипКолонки)

	Результат = Значение;

	Для Каждого Тип Из ТипКолонки.Типы() Цикл

		Если Тип = Тип("Дата") Тогда

			Если СтрДлина(Значение) < 11 Тогда
				Значение = Сред(Значение, 7, 4) + Сред(Значение, 4, 2) + Лев(Значение, 2);
			Иначе
				Значение = Сред(Значение, 7, 4) + Сред(Значение, 4, 2) + Лев(Значение, 2);
			КонецЕсли;

			ЦелевойТип = Новый ОписаниеТипов("Дата");
			Результат = ЦелевойТип.ПривестиЗначение(Значение);

		ИначеЕсли Тип = Тип("Число") Тогда
			ЦелевойТип = Новый ОписаниеТипов("Число");
			Результат = ЦелевойТип.ПривестиЗначение(Значение);
		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции

Процедура ДанныеИзТаблицыЗначенийВТабличныйДокумент(ДанныеИзФайла, ТабличныйДокумент, ПолноеИмяОбъектаЗаполнения) Экспорт

	КоличествоКолонок = ДанныеИзФайла.Колонки.Количество();
	Если КоличествоКолонок < 1 Тогда

		Возврат;

	КонецЕсли;

	ТабличныйДокумент.Очистить();

	Макет = Обработки.ЗагрузкаДанныхИзВнешнегоИсточника.ПолучитьМакет("ПростойШаблон");
	ОбластьЗначение = Макет.ПолучитьОбласть("Значение");

	Для ИндексСтроки = 0 По ДанныеИзФайла.Количество() - 1 Цикл

		СтрокаТЗ = ДанныеИзФайла.Получить(ИндексСтроки);
		Для ИндексКолонки = 0 По КоличествоКолонок - 1 Цикл

			ОбластьЗначение.Параметры.Значение = ПреобразоватьДанныеКТипуКолонки(СтрокаТЗ[ИндексКолонки],
				ДанныеИзФайла.Колонки.Получить(ИндексКолонки).ТипЗначения);

			Если ИндексКолонки = 0 Тогда

				ТабличныйДокумент.Вывести(ОбластьЗначение);

			Иначе

				ТабличныйДокумент.Присоединить(ОбластьЗначение);

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	ЗаполнитьРасшифровкиВТабличномДокументе(ТабличныйДокумент, КоличествоКолонок, ПолноеИмяОбъектаЗаполнения);

КонецПроцедуры

Процедура ЗаполнитьРасшифровкиВТабличномДокументе(ТабличныйДокумент, КоличествоКолонок, НастройкиЗагрузкиДанных) Экспорт
	Перем ТаблицаПолейЗагрузки;

	Если Число(КоличествоКолонок) < 1 Тогда

		Возврат;

	КонецЕсли;

	СоздатьТаблицуПолейОписанияЗагрузки(ТаблицаПолейЗагрузки);
	ЗаполнитьТаблицуПолейЗагрузки(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных);

	Расшифровка = Новый СписокЗначений;
	Расшифровка.Добавить("Не загружать", "Не загружать");
	Для Каждого СтрокаТаблицы Из ТаблицаПолейЗагрузки Цикл
		Расшифровка.Добавить(СтрокаТаблицы.ИмяПоля, СтрокаТаблицы.ПредставлениеПоля);
	КонецЦикла;

	ОбластьЗаголовок = Обработки.ЗагрузкаДанныхИзВнешнегоИсточника.ПолучитьМакет("ПростойШаблон").ПолучитьОбласть(
		"Заголовок");

	ИсходнаяОбласть = ОбластьЗаголовок.Области.Заголовок;
	ИсходнаяОбласть.ПараметрРасшифровки = "";
	ИсходнаяОбласть.Расшифровка			= Расшифровка;

	ПараметрыАвтоПодбораЗаголовка = Новый Структура;
	ПараметрыАвтоПодбораЗаголовка.Вставить("ПолученныйЗаголовок", Неопределено);
	ПараметрыАвтоПодбораЗаголовка.Вставить("ВыбранныеПоля", Новый Массив);
	ПараметрыАвтоПодбораЗаголовка.Вставить("ОписаниеДополнительныхРеквизитов", Новый Соответствие);
	ПараметрыАвтоПодбораЗаголовка.Вставить("ВыбранныеДополнительныеРеквизиты", Новый Соответствие);

	ОписаниеОбъектаЗагрузки = ОбъектЗагрузкиПоПолномуИмени(НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения);
	ПараметрыАвтоПодбораЗаголовка.Вставить("ОбъектЗагрузки", ОписаниеОбъектаЗагрузки.ОбъектЗагрузки);
	ПараметрыАвтоПодбораЗаголовка.Вставить("ИмяТабличнойЧасти", ОписаниеОбъектаЗагрузки.ИмяТабличнойЧасти);

	Если НастройкиЗагрузкиДанных.Свойство("ОписаниеДополнительныхРеквизитов") Тогда

		ПараметрыАвтоПодбораЗаголовка.ОписаниеДополнительныхРеквизитов = НастройкиЗагрузкиДанных.ОписаниеДополнительныхРеквизитов;
		ПараметрыАвтоПодбораЗаголовка.ВыбранныеДополнительныеРеквизиты = НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты;

	КонецЕсли;

	Для НомерКолонки = 1 По КоличествоКолонок Цикл

		ОбластьПриемник = ТабличныйДокумент.Область(СтрШаблон("R1C%1", НомерКолонки));
		ИсходныйТекстЗаголовка = ОбластьПриемник.Текст;

		ИсходнаяОбласть.Примечание.Текст = ?(ПустаяСтрока(ОбластьПриемник.Текст), "", ОбластьПриемник.Текст); // Перенесем текст из ячейки в примечание
		ТабличныйДокумент.ВставитьОбласть(ИсходнаяОбласть, ОбластьПриемник, ТипСмещенияТабличногоДокумента.БезСмещения,
			Истина);
		Если НастройкиЗагрузкиДанных.ФиксированныйШаблон И Не НастройкиЗагрузкиДанных.СамостоятельноеЗаполнение Тогда
			ОбластьПриемник.Текст	= ИсходныйТекстЗаголовка;
		Иначе
			ОбластьПриемник.Текст	= НСтр("ru ='Не загружать'");
		КонецЕсли;

		ОбластьКолонка = ТабличныйДокумент.Область(СтрШаблон("C%1", НомерКолонки));
		ОбластьКолонка.ШиринаКолонки = 22.75;

		ПараметрыАвтоПодбораЗаголовка.ПолученныйЗаголовок = СокрЛП(ОбластьПриемник.Примечание.Текст);
		Если Не ПустаяСтрока(ПараметрыАвтоПодбораЗаголовка.ПолученныйЗаголовок) И Не ЗначениеЗаполнено(
			НастройкиЗагрузкиДанных.ИдентификаторПоставляемойНастройки) Тогда

			АвтоматическийПодборЗаголовкаТабличногоДокумента(ОбластьПриемник, ПараметрыАвтоПодбораЗаголовка);
			Если Не ПустаяСтрока(ОбластьПриемник.ПараметрРасшифровки) Тогда

				ПараметрыАвтоПодбораЗаголовка.ВыбранныеПоля.Добавить(ОбластьПриемник.ПараметрРасшифровки);

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	ОбластьПерваяСтрока = ТабличныйДокумент.Область(1, , 1, );
	ОбластьПерваяСтрока.ВысотаСтроки = 26;

КонецПроцедуры

Процедура АвтоматическийПодборЗаголовкаТабличногоДокумента(ОбластьПриемник, ПараметрыАвтоПодбораЗаголовка)

	ИскатьДалее = Истина;
	ПоискВСопоставленныхРаннееЗаголовках(ОбластьПриемник, ПараметрыАвтоПодбораЗаголовка, ИскатьДалее);

	Если ИскатьДалее И ПустаяСтрока(ОбластьПриемник.ПараметрРасшифровки) Тогда

		ПоискВСтандартныхИменахПолей(ОбластьПриемник, ПараметрыАвтоПодбораЗаголовка);

	КонецЕсли;

	Если ИскатьДалее И ПустаяСтрока(ОбластьПриемник.ПараметрРасшифровки) Тогда

		ПоискВДополнительныхРеквизитах(ОбластьПриемник, ПараметрыАвтоПодбораЗаголовка);

	КонецЕсли;

КонецПроцедуры

Процедура ПоискВСопоставленныхРаннееЗаголовках(ОбластьПриемник, ПараметрыАвтоПодбораЗаголовка, ИскатьДалее)

	Если Не ЗначениеЗаполнено(ПараметрыАвтоПодбораЗаголовка.ОбъектЗагрузки) Тогда

		Возврат;

	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектЗагрузки", ПараметрыАвтоПодбораЗаголовка.ОбъектЗагрузки);
	Запрос.УстановитьПараметр("ИмяТабличнойЧасти", ПараметрыАвтоПодбораЗаголовка.ИмяТабличнойЧасти);
	Запрос.УстановитьПараметр("ПолученныйЗаголовок", СокрЛП(ПараметрыАвтоПодбораЗаголовка.ПолученныйЗаголовок));

	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоответствиеНаименований.Поле КАК ПараметрРасшифровки,
	|	СоответствиеНаименований.ДополнительныйРеквизит КАК ДополнительныйРеквизит
	|ИЗ
	|	РегистрСведений.СоответствиеНаименованияКолонокПолямЗагрузки КАК СоответствиеНаименований
	|ГДЕ
	|	СоответствиеНаименований.ОбъектЗагрузки = &ОбъектЗагрузки
	|	И СоответствиеНаименований.ИмяТабличнойЧасти = &ИмяТабличнойЧасти
	|	И СоответствиеНаименований.ЗаголовокКолонки = &ПолученныйЗаголовок";

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда

		Если ПараметрыАвтоПодбораЗаголовка.ВыбранныеПоля.Найти(Выборка.ПараметрРасшифровки) <> Неопределено Тогда

			Возврат;

		КонецЕсли;

		ПараметрРасшифровкиДополнительногоРеквизита = "";
		Если ЗначениеЗаполнено(Выборка.ДополнительныйРеквизит) Тогда

			ПараметрРасшифровкиДополнительногоРеквизита = ПараметрыАвтоПодбораЗаголовка.ОписаниеДополнительныхРеквизитов.Получить(
				Выборка.ДополнительныйРеквизит);
			Если ПараметрыАвтоПодбораЗаголовка.ВыбранныеПоля.Найти(ПараметрРасшифровкиДополнительногоРеквизита)
				<> Неопределено Тогда

				Возврат;

			КонецЕсли;

		КонецЕсли;

		ИскатьДалее = Ложь;

		Если Не ПустаяСтрока(Выборка.ПараметрРасшифровки) Тогда

			ОбластьПриемник.ПараметрРасшифровки = Выборка.ПараметрРасшифровки;
			Для Каждого ЭлементСписка Из ОбластьПриемник.Расшифровка Цикл

				Если ВРЕГ(СокрЛП(ЭлементСписка.Значение)) = ВРЕГ(ОбластьПриемник.ПараметрРасшифровки) Тогда

					ОбластьПриемник.Текст = ЭлементСписка.Представление;
					Возврат;

				КонецЕсли;

			КонецЦикла;

		ИначеЕсли ЗначениеЗаполнено(ПараметрРасшифровкиДополнительногоРеквизита) Тогда
			
			//ОбластьПриемник.ПараметрРасшифровки = ПараметрыАвтоПодбораЗаголовка.ОписаниеДополнительныхРеквизитов.Получить(Выборка.ДополнительныйРеквизит);
			ОбластьПриемник.ПараметрРасшифровки = ПараметрРасшифровкиДополнительногоРеквизита;
			ОбластьПриемник.Текст = Выборка.ДополнительныйРеквизит.Наименование;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ПоискВСтандартныхИменахПолей(ОбластьПриемник, ПараметрыАвтоПодбораЗаголовка)

	Для Каждого ЭлементСписка Из ОбластьПриемник.Расшифровка Цикл

		Если ПараметрыАвтоПодбораЗаголовка.ВыбранныеПоля.Найти(ЭлементСписка.Значение) <> Неопределено Тогда

			Продолжить;

		КонецЕсли;

		Если ВРЕГ(СокрЛП(ЭлементСписка.Значение)) = ВРЕГ(ПараметрыАвтоПодбораЗаголовка.ПолученныйЗаголовок)
			Или СтрНайти(ВРЕГ(СокрЛП(ЭлементСписка.Представление)), ВРЕГ(
			ПараметрыАвтоПодбораЗаголовка.ПолученныйЗаголовок)) > 0 Тогда

			ОбластьПриемник.Текст = ЭлементСписка.Представление;
			ОбластьПриемник.ПараметрРасшифровки = ЭлементСписка.Значение;
			Прервать;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ПоискВДополнительныхРеквизитах(ОбластьПриемник, ПараметрыАвтоПодбораЗаголовка)

	Для Каждого ЭлементСоответствия Из ПараметрыАвтоПодбораЗаголовка.ОписаниеДополнительныхРеквизитов Цикл

		Если ПараметрыАвтоПодбораЗаголовка.ВыбранныеПоля.Найти(ЭлементСоответствия.Значение) <> Неопределено Тогда

			Продолжить;

		КонецЕсли;

		Если ВРЕГ(СокрЛП(ЭлементСоответствия.Ключ.Имя)) = ВРЕГ(ПараметрыАвтоПодбораЗаголовка.ПолученныйЗаголовок)
			Или ВРЕГ(СокрЛП(ЭлементСоответствия.Ключ.Наименование)) = ВРЕГ(
			ПараметрыАвтоПодбораЗаголовка.ПолученныйЗаголовок) Или ВРЕГ(СокрЛП(ЭлементСоответствия.Ключ.Заголовок))
			= ВРЕГ(ПараметрыАвтоПодбораЗаголовка.ПолученныйЗаголовок) Тогда

			ОбластьПриемник.Текст = СокрЛП(ЭлементСоответствия.Ключ.Наименование);
			ОбластьПриемник.ПараметрРасшифровки = ЭлементСоответствия.Значение;
			Прервать;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция УдалитьНесуществующиеСвойства(Источник, Приемник) Экспорт

	МассивУдалить = Новый Массив;
	Для Каждого ИмяПоля Из Источник Цикл
		Если Приемник.Найти(ИмяПоля) = Неопределено Тогда
			МассивУдалить.Добавить(ИмяПоля);
		КонецЕсли;
	КонецЦикла;

	Для Каждого элементУдалить Из МассивУдалить Цикл
		Источник.Удалить(Источник.Найти(элементУдалить));
	КонецЦикла;

	Возврат СтрСоединить(Источник, ",");

КонецФункции

#КонецОбласти