
#Область ПрограммныйИнтерфейс

// Процедура открывает форму расшифровки скидок рассчитанных по текущей строке табличной части
//
// Параметры:
//  ТекущиеДанные  - СтрокаТабличнойЧасти - строка для которой необходимо открыть расшифровку скидок
//  Объект  - ДанныеФормыСтруктура - Объект, для которого нужно открыть форму расшифровки скидок
//  Форма  - Форма - Форма объекта
//  ИмяОповещения - Строка - Необязательный. Имя процедуры-оповещения, которая может быть вызвана для обработки
//                           информации о выбранных управляемых скидках (если они доступны)
//
Процедура ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, Форма, ИмяОповещения = "") Экспорт
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокиТабличнойЧасти = Новый Структура;
	Если ЗаказНарядИмеетДвеТабличныеЧасти(ТекущиеДанные) Тогда
		ДанныеСтрокиТабличнойЧасти.Вставить("КлючСвязи", ТекущиеДанные.КлючСвязиДляСкидокНаценок);
	Иначе
		ДанныеСтрокиТабличнойЧасти.Вставить("КлючСвязи", ТекущиеДанные.КлючСвязи);
	КонецЕсли;
	ДанныеСтрокиТабличнойЧасти.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	ДанныеСтрокиТабличнойЧасти.Вставить("Характеристика", ТекущиеДанные.Характеристика);
	ДанныеСтрокиТабличнойЧасти.Вставить("СуммаРучнойСкидки",
		ТекущиеДанные.Цена * ТекущиеДанные.Количество * ТекущиеДанные.ПроцентСкидкиНаценки / 100);
	ДанныеСтрокиТабличнойЧасти.Вставить("СуммаБезСкидки", ТекущиеДанные.Цена * ТекущиеДанные.Количество);

	Если ТекущиеДанные.Свойство("МинимальнаяЦена") Тогда
		
		ДанныеСтрокиТабличнойЧасти.Вставить("МинимальнаяЦена", ТекущиеДанные.МинимальнаяЦена);
		
		ИмяРеквизита = ЦенообразованиеКлиентСервер.ОпределитьИмяРеквизитаСкладаВОбъекте(Объект);
		СкладВШапке = ЦенообразованиеКлиентСервер.ОпределитьПоложениеСкладаВОбъекте(Объект);
		СтруктурнаяЕдиница = ЦенообразованиеКлиентСервер.ПолучитьЗначениеСкладаВОбъекте(Объект, ТекущиеДанные, ИмяРеквизита, СкладВШапке);
		
		ДанныеСтрокиТабличнойЧасти.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
		
	КонецЕсли;
	
	ИмяРеквизитаЗаказ = "Заказ";
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.АктВыполненныхРабот")
		ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОтчетОПереработке")Тогда
		ИмяРеквизитаЗаказ = "ЗаказПокупателя";
	КонецЕсли;
	ДокументПоЗаказу = Ложь;
	СтрокаПоЗаказу = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизитаЗаказ) Тогда
		ДокументПоЗаказу = ЗначениеЗаполнено(Объект[ИмяРеквизитаЗаказ]);
		СтрокаПоЗаказу = ДокументПоЗаказу;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущиеДанные, ИмяРеквизитаЗаказ)
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ПоложениеЗаказаПокупателя")
			И Объект.ПоложениеЗаказаПокупателя = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
			// Заказ может быть указан в конкретной строке ТЧ, т.е. могут быть отгрузки не по заказу
			СтрокаПоЗаказу = ЗначениеЗаполнено(ТекущиеДанные[ИмяРеквизитаЗаказ]);
		КонецЕсли;
	КонецЕсли;
		
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Объект", Объект);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Примененные скидки (наценки) для строки'"));
	ПараметрыФормы.Вставить("ТекущиеДанные", ДанныеСтрокиТабличнойЧасти);
	ПараметрыФормы.Вставить("АдресПримененныхСкидокВоВременномХранилище",
		Форма.АдресПримененныхСкидокВоВременномХранилище);
	ПараметрыФормы.Вставить("ОтображатьИнформациюОСкидкахПоСтроке", Истина);
	ПараметрыФормы.Вставить("ОтображатьИнформациюОРасчетеСкидокПоСтроке", Истина);
	ПараметрыФормы.Вставить("ОтображатьИнформациюОРасчетеСкидокПоДокументуВЦелом", Ложь);
	ПараметрыФормы.Вставить("ОтображатьИсключение", Истина);
	ПараметрыФормы.Вставить("ЗапретУправляемыхСкидокВДокументе", ДокументПоЗаказу);
	ПараметрыФормы.Вставить("ЗапретУправляемыхСкидокВСтроке", СтрокаПоЗаказу);
	
	ОбработчикОповещения = Неопределено;
	Если ЗначениеЗаполнено(ИмяОповещения) Тогда
		ДополнительныеПараметры = Новый Структура("КлючСвязи", ДанныеСтрокиТабличнойЧасти.КлючСвязи);
		ОбработчикОповещения = Новый ОписаниеОповещения(ИмяОповещения, Форма, ДополнительныеПараметры);
	Иначе
		// Вызывающая форма не адаптирована для работы с управляемыми скидками.
		// Запретим выбор управляемых скидок 
		ПараметрыФормы.Вставить("ЗапретУправляемыхСкидокВДокументе", Истина);
		ПараметрыФормы.Вставить("ЗапретУправляемыхСкидокВСтроке", Истина);
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ПримененныеСкидкиНаценки", ПараметрыФормы, Форма, Форма.УникальныйИдентификатор,,, ОбработчикОповещения);
	
КонецПроцедуры

// Выводит сообщение о расчете скидок когда нажата кнопка "Провести и закрыть" или форма закрывается по крестику
// с сохранением изменений.
//
// Параметры:
//  ОбъектСсылка					 - ДокументСсылка - ссылка на объект.
//  ИспользоватьАвтоматическиеСкидки - Булево - .
//  СкидкиРассчитаныПередЗаписью	 - Булево - .
//
Процедура ПриЗакрытииФормы(ОбъектСсылка, ИспользоватьАвтоматическиеСкидки, СкидкиРассчитаныПередЗаписью) Экспорт
	
	Если ИспользоватьАвтоматическиеСкидки И СкидкиРассчитаныПередЗаписью Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Изменение:'"), ПолучитьНавигационнуюСсылку(ОбъектСсылка),
			СтрШаблон(НСтр("ru = '%1. Автоматические скидки (наценки) рассчитаны.'"), ОбъектСсылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

// Обновляет картинки индикаторов рассчитанных скидок
//
// Параметры:
//  Форма - форма документа
//  Действие - событие формы
//  КолонкаТЧ - имя колонки табличной части
//  ТЧ - Имя табличной части
//  ТЧ2 - Имя второй табличной части
//
Процедура ОбновитьКартинкиСкидкиРассчитаны(Форма, ТЧ = "Запасы", ТЧ2 = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект[ТЧ].Количество() = 0 И (ТЧ2 = Неопределено ИЛИ Объект[ТЧ2].Количество() = 0) Тогда
		Форма.УстановленСерыйЦвет = Истина;
		Элементы[ТЧ+"РассчитатьСкидкиНаценки"].Картинка = БиблиотекаКартинок.ОбновитьСерый;
		Если ТЧ2 <> Неопределено Тогда
			Элементы[ТЧ2+"РассчитатьСкидкиНаценки"].Картинка = БиблиотекаКартинок.ОбновитьСерый;
		КонецЕсли;
	Иначе
		Элементы[ТЧ+"РассчитатьСкидкиНаценки"].Картинка = БиблиотекаКартинок.ОбновитьКрасный;
		
		Если ТЧ2 <> Неопределено Тогда
			Элементы[ТЧ2+"РассчитатьСкидкиНаценки"].Картинка = БиблиотекаКартинок.ОбновитьКрасный;
		КонецЕсли;
		Форма.УстановленСерыйЦвет = Ложь;
	КонецЕсли;
	
	КнопкаДобавитьПромокод = Элементы.Найти("ДобавитьПромокод");
	Если Не КнопкаДобавитьПромокод = Неопределено Тогда
		ПромокодВведен = Форма.ПромокодВведен;
		ПромокодСработал = Форма.ПромокодСработал;
		Если ПромокодВведен И Объект.СкидкиРассчитаны И НЕ ПромокодСработал Тогда
			КнопкаДобавитьПромокод.Картинка = БиблиотекаКартинок.ВведенКупонВнимание;
		ИначеЕсли ПромокодВведен Тогда
			КнопкаДобавитьПромокод.Картинка = БиблиотекаКартинок.ВведенКупон;	
		Иначе
			КнопкаДобавитьПромокод.Картинка = БиблиотекаКартинок.ВвестиКупон;
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаказНарядИмеетДвеТабличныеЧасти(ТекущиеДанные)
	
	Возврат ТекущиеДанные.Свойство("КлючСвязиДляСкидокНаценок");
	
КонецФункции

#КонецОбласти