 
///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ВидыОпераций

// Определяет является ли полученный вид операции операцией продажи.
//
// Параметры:
//  ЭтоОперацияПродажи - Булево - признак, который говорит, что текущий вид операции это продажа.
//  ВидОперации - ОпределяемыйТип.ВидОперацииРМК - текущий вид операции.
//
Процедура ОпределитьВидОперацииПродажа(ЭтоОперацияПродажи, ВидОперации) Экспорт
	
	Если ВидОперации = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
		"Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств") Тогда
		
		ЭтоОперацияПродажи = Ложь;
	Иначе
		ЭтоОперацияПродажи = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Определяет является ли полученный вид операции операцией возврата продажи.
//
// Параметры:
//  ЭтоОперацияВозвратПродажи - Булево - признак, который говорит, что текущий вид операции это возврат продажи.
//  ВидОперации - ОпределяемыйТип.ВидОперацииРМК - текущий вид операции.
//
Процедура ОпределитьВидОперацииВозвратПродажи(ЭтоОперацияВозвратПродажи, ВидОперации) Экспорт
	
	Если ВидОперации = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
		"Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств") Тогда
		
		ЭтоОперацияВозвратПродажи = Истина;
	Иначе
		ЭтоОперацияВозвратПродажи = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Определяет является ли полученный вид операции операцией скупка.
//
// Параметры:
//  ЭтоОперацияСкупка - Булево - признак, который говорит, что текущий вид операции это скупка.
//  ВидОперации - ОпределяемыйТип.ВидОперацииРМК - текущий вид операции.
//
Процедура ОпределитьВидОперацииСкупка(ЭтоОперацияСкупка, ВидОперации) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Определяет является ли полученный вид операции операцией возврат скупки.
//
// Параметры:
//  ЭтоОперацияВозвратСкупки - Булево - признак, который говорит, что текущий вид операции это возврат скупки.
//  ВидОперации - ОпределяемыйТип.ВидОперацииРМК - текущий вид операции.
//
Процедура ОпределитьВидОперацииВозвратСкупки(ЭтоОперацияВозвратСкупки, ВидОперации) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ВидыОплат

// Определяет является ли полученный вид оплаты наличной формой оплаты.
//
// Параметры:
//  ЭтоОплатаНаличными - Булево - признак, который говорит, что текущий вид оплаты это наличные.
//  ВидОплаты - ОпределяемыйТип.ВидОплатыРМК - вид оплаты.
//
Процедура ОпределитьВидОплатыНаличные(ЭтоОплатаНаличными, ВидОплаты) Экспорт
	
	Если ВидОплаты = "Наличные" Тогда
		ЭтоОплатаНаличными = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Определяет является ли полученный вид оплаты оплатой платежной картой.
//
// Параметры:
//  ЭтоОплатаПлатежнойКартой - Булево - признак, который говорит, что текущий вид оплаты это платежная карта.
//  ВидОплаты - ОпределяемыйТип.ВидОплатыРМК - вид оплаты.
//
Процедура ОпределитьВидОплатыПлатежнаяКарта(ЭтоОплатаПлатежнойКартой, ВидОплаты) Экспорт
	
	Если ВидОплаты = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
		"Перечисление.ВидыБезналичныхОплат.БанковскаяКарта") Тогда
		
		ЭтоОплатаПлатежнойКартой = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Определяет является ли полученный вид оплаты зачетом аванса.
//
// Параметры:
//  ЭтоОплатаЗачетАванса - Булево - признак, который говорит, что текущий вид оплаты это зачет аванса.
//  ВидОплаты - ОпределяемыйТип.ВидОплатыРМК - вид оплаты.
//
Процедура ОпределитьВидОплатыЗачетАванса(ЭтоОплатаЗачетАванса, ВидОплаты) Экспорт
	
	ЭтоОплатаЗачетАванса = Ложь;
	
КонецПроцедуры

// Определяет является ли полученный вид оплаты безналичными.
//
// Параметры:
//  ЭтоОплатаБезналичные - Булево - признак, который говорит, что текущий вид оплаты это безналичные.
//  ВидОплаты - ОпределяемыйТип.ВидОплатыРМК - вид оплаты.
//
Процедура ОпределитьВидОплатыБезналичные(ЭтоОплатаБезналичные, ВидОплаты) Экспорт
	
	ЭтоОплатаБезналичные = Ложь;
	
КонецПроцедуры

// Определяет является ли полученный вид оплаты - оплатой в рассрочку.
//
// Параметры:
//  ЭтоОплатаВРассрочку - Булево - признак, который говорит, что текущий вид оплаты это оплата в рассрочку.
//  ВидОплаты - ОпределяемыйТип.ВидОплатыРМК - вид оплаты.
//
Процедура ОпределитьВидОплатыВРассрочку(ЭтоОплатаВРассрочку, ВидОплаты) Экспорт
	
	Если ВидОплаты = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
		"Перечисление.ВидыБезналичныхОплат.ОплатаВРассрочку") Тогда
		
		ЭтоОплатаВРассрочку = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Определяет является ли полученный вид оплаты - оплатой встречным предоставлением.
//
// Параметры:
//  ЭтоОплатаВстречнымПредоставлением - Булево - признак, который говорит, что текущий вид оплаты это оплата встречным предоставлением.
//  ВидОплаты - ОпределяемыйТип.ВидОплатыРМК - вид оплаты.
//
Процедура ОпределитьВидОплатыВстречнымПредоставлением(ЭтоОплатаВстречнымПредоставлением, ВидОплаты) Экспорт
	
	Если ВидОплаты = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
		"Перечисление.ВидыБезналичныхОплат.ВстречноеПредоставление") Тогда
		
		ЭтоОплатаВстречнымПредоставлением = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет полученный параметр значением вида оплаты - платежная карта для НСПК.
//
// Параметры:
//  ВидОплатыПлатежнаяКартаНСПК - Неопределено - значение для заполнения.
//
Процедура ОпределитьВидОплатыПлатежнаяКартаНСПК(ВидОплатыПлатежнаяКартаНСПК) Экспорт
	
	ВидОплатыПлатежнаяКартаНСПК = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
		"Перечисление.ВидыБезналичныхОплат.БанковскаяКарта");
	
КонецПроцедуры

// Определяет является ли полученный вид оплаты - оплатой кредитом.
//
// Параметры:
//  ЭтоОплатаКредитом - Булево - признак, который говорит, что текущий вид оплаты это оплата кредитом.
//  ВидОплаты - ОпределяемыйТип.ВидОплатыРМК - вид оплаты.
//
Процедура ОпределитьВидОплатыКредитом(ЭтоОплатаКредитом, ВидОплаты) Экспорт
	
	Если ВидОплаты = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
		"Перечисление.ВидыБезналичныхОплат.Кредит") Тогда
		
		ЭтоОплатаКредитом = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТипыЗначений

// Процедура определяет значение типа номенклатуры "Подарочный сертификат".
//
// Параметры:
//  ТипНоменклатуры - ОпределяемыйТип.ТипыНоменклатурыРМК, Неопределено - значение типа номенклатуры.
//
Процедура ОпределитьТипНоменклатурыПодарочныйСертификат(ТипНоменклатуры) Экспорт
	
	ТипНоменклатуры = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
		"Перечисление.ТипыНоменклатуры.ПодарочныйСертификат");
	
КонецПроцедуры

// Процедура определяет значение особенности учета номенклатуры "Алкоголь".
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК, Неопределено - значение особенности учета номенклатуры.
//
Процедура ОпределитьОсобенностьУчетаАлкоголь(ОсобенностьУчета) Экспорт
	
	ОсобенностьУчета = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ВидыПродукцииИС.Алкогольная");
	
КонецПроцедуры

// Процедура определяет значение особенности учета номенклатуры "ГИСМ".
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК, Неопределено - значение особенности учета номенклатуры.
//
Процедура ОпределитьОсобенностьУчетаГИСМ(ОсобенностьУчета) Экспорт
	
	ОсобенностьУчета = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха");
	
КонецПроцедуры

// Процедура определяет значение особенности учета номенклатуры "Табак".
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК, Неопределено - значение особенности учета номенклатуры.
//
Процедура ОпределитьОсобенностьУчетаТабак(ОсобенностьУчета) Экспорт
	
	ОсобенностьУчета = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ВидыПродукцииИС.Табак");
	
КонецПроцедуры

#КонецОбласти

#Область Печать_товарного_чека_ПрограммныйИнтерфейс

Процедура СформироватьПечатнуюФормуТоварногоЧека(ЧекККМ, Форма) Экспорт
	
	ИмяМенеджераПечати = ?(ТипЗнч(ЧекККМ) = Тип("ДокументСсылка.ЧекККМ"), "Документ.ЧекККМ", "Документ.ЧекККМВозврат");
	
	ИмяМенеджераПечати = ИмяМенеджераПечати;
	ИменаМакетов		= "ТоварныйЧек";
	
	МассивЧековККМ = Новый Массив;
	МассивЧековККМ.Добавить(ЧекККМ);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(ИмяМенеджераПечати, ИменаМакетов, МассивЧековККМ, Форма);
	
КонецПроцедуры

Процедура СформироватьПечатнуюФормуЗаказаПокупателя(Заказ, Форма) Экспорт
	
	ИмяМенеджераПечати = "Документ.ЗаказПокупателя";
	ИменаМакетов		= "ЗаказПокупателя";
	
	МассивЗаказовПокупателя = Новый Массив;
	МассивЗаказовПокупателя.Добавить(Заказ);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(ИмяМенеджераПечати, ИменаМакетов, МассивЗаказовПокупателя, Форма);
	
КонецПроцедуры

#КонецОбласти

#Область Пакетная_фискализация_ПрограммныйИнтерфейс

// Расширение возможности проверки условия выполнения пакетной фискализации
//
// Параметры:
//  ВозможнаВыдачаНаличных - Булево - исходное значение признака.
//  КонтекстДополнительнойПроверки - Структура:
//		*ДанныеТерминала - ДанныеФормыЭлементКоллекции (см. ФормаРМК.ТаблицаТерминалы).
//		*КонтекстФормы - ФормаКлиентскогоПриложения.
//
Процедура ПроверитьДополнительныеУсловияВыполненияВыдачиНаличных(ВозможнаВыдачаНаличных, КонтекстПроверки) Экспорт
	
	Если ТипЗнч(КонтекстПроверки) = Тип("Структура")
		И ЗначениеЗаполнено(КонтекстПроверки) Тогда
			ВозможнаВыдачаНаличных = ВозможнаВыдачаНаличных
				И КонтекстПроверки.ДанныеТерминала.КонтролироватьВзаиморасчетыПоДоговору;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПлиточныйИнтерфейсПодбораТоваров

// Вызывает интерфейс для подбора номенклатуры.
//
// Параметры:
//  ЭтотОбъект - ФормаКлиентскогоПриложения - форма элемента структуры плиточного интерфейса.
//  Параметры - Структура - параметры открытия формы.
//  ОповещениеОВыборе - ОписаниеОповещения - оповещение об обработке выбора.
//
Процедура ОткрытьИнтерфейсПодбораНоменклатуры(ЭтотОбъект, Параметры, ОповещениеОВыборе) Экспорт
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", Параметры, ЭтотОбъект,
		ЭтотОбъект.УникальныйИдентификатор,,, ОповещениеОВыборе);
КонецПроцедуры

// Определяет факт вызова формы выбора из формы с указанным именем.
//
// Параметры:
//  ИмяФормы - Строка - имя формы, из которой осуществляется подбор номенклатуры.
//  Результат - Булево - факт вызова формы выбора из формы с указанным именем.
//
Процедура ЭтоВыборДляПалитрыПлиточногоИнтерфейса(ИмяФормы, Результат) Экспорт
	Результат = (ИмяФормы ="Справочник.Номенклатура.Форма.ФормаСписка");
КонецПроцедуры

// Переопределяет заполнение параметров открытия формы подбора товаров в состав палитры.
//
// Параметры:
//  Параметры - Структура - параметры открытия формы.
//
Процедура ЗаполнитьПараметрыОткрытияФормыПодбораВСоставПалитрыТоваров(Параметры) Экспорт
	Параметры.Вставить("ЭтоПодбор", Истина);
КонецПроцедуры

#КонецОбласти

// Заполняет параметры для передачи в ОбщаяФорма.ПечатьДокументов
//
// Параметры:
//  ЧекККМ - ОпределяемыйТип.ЧекККМРМК.
//  ПараметрыОткрытия - Структура:
//   * ИмяМенеджераПечати - Строка.
//   * ИменаМакетов - Строка.
//   * ПараметрКоманды - Массив из ОпределяемыйТип.ЧекККМРМК.
//   * ПараметрыПечати - Строка.
//  СтандартнаяОбработка - Булево.
//
Процедура ЗаполнитьПараметрыОткрытияФормыПечатиДокументовДляТоварногоЧека(ЧекККМ, ПараметрыОткрытия,
	СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	МассивЧеков = Новый Массив;
	МассивЧеков.Добавить(ЧекККМ);
	
	ИмяМенеджераПечати = ?(ТипЗнч(ЧекККМ) = Тип("ДокументСсылка.ЧекККМ"), "Документ.ЧекККМ", "Документ.ЧекККМВозврат");
	
	ПараметрыОткрытия.ИмяМенеджераПечати = ИмяМенеджераПечати;
	ПараметрыОткрытия.ИменаМакетов		 = "ТоварныйЧек";
	ПараметрыОткрытия.ПараметрКоманды	 = МассивЧеков;
	ПараметрыОткрытия.ПараметрыПечати	 = Неопределено;
	
КонецПроцедуры

// Процедура получает и заполняет рабочее место в параметр сеанса и на форме.
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения.
//
Процедура ЗаполнитьРабочееМесто(Форма) Экспорт
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		Форма.РабочееМесто = МенеджерОборудованияКлиентПовтИсп.РабочееМестоКлиента();
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет таблицу оплат на форме рабочего места кассира.
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения.
//
Процедура ЗаполнитьТаблицуОплат(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	Объект.Оплата.Очистить();
	
	Если Не Форма.СуммаОплаченоЗачетАванса = 0 Тогда
		
		СтруктураОплат = Новый Структура;
		СтруктураОплат.Вставить("ВидОплаты", "ЗачетАванса");
		МассивОплатЗачетАванса = Объект.Оплата.НайтиСтроки(СтруктураОплат);
		
		Если МассивОплатЗачетАванса.Количество() = 0 Тогда
			
			НоваяОплата = Объект.Оплата.Добавить();
			НоваяОплата.ВидОплаты = "ЗачетАванса";
			НоваяОплата.Сумма = Форма.СуммаОплаченоЗачетАванса;
			
		Иначе
			МассивОплатЗачетАванса[0].Сумма = Форма.СуммаОплаченоЗачетАванса;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Форма.СуммаОплаченоВРассрочку = 0 Тогда
		
		СтруктураОплат = Новый Структура;
		СтруктураОплат.Вставить("ВидОплаты",
			ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ВидыБезналичныхОплат.ОплатаВРассрочку"));
		МассивОплатРассрочка = Объект.Оплата.НайтиСтроки(СтруктураОплат);
		
		Если МассивОплатРассрочка.Количество() = 0 Тогда
			
			НоваяОплата = Объект.Оплата.Добавить();
			НоваяОплата.ВидОплаты = 
				ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ВидыБезналичныхОплат.ОплатаВРассрочку");
			НоваяОплата.Сумма = Форма.СуммаОплаченоВРассрочку;
			
		Иначе
			МассивОплатРассрочка[0].Сумма = Форма.СуммаОплаченоВРассрочку;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Форма.СуммаОплаченоБезнал = 0 Тогда
		
		МассивОплатБезнал = Объект.Оплата.НайтиСтроки(
			Новый Структура("ВидОплаты", "БанковскийПлатеж"));
			
		Если МассивОплатБезнал.Количество() = 0 Тогда
			
			НоваяОплата = Объект.Оплата.Добавить();
			НоваяОплата.ВидОплаты = "БанковскийПлатеж";
			НоваяОплата.Сумма = Форма.СуммаОплаченоБезнал;
			
		Иначе
			МассивОплатБезнал[0].Сумма = Форма.СуммаОплаченоБезнал;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Форма.СуммаОплаченоКредитом = 0 Тогда
		
		СтруктураОплат = Новый Структура;
		СтруктураОплат.Вставить("ВидОплаты",
			ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ВидыБезналичныхОплат.Кредит"));
		МассивОплатРассрочка = Объект.Оплата.НайтиСтроки(СтруктураОплат);

		Если МассивОплатРассрочка.Количество() = 0 Тогда
			
			НоваяОплата = Объект.Оплата.Добавить();
			НоваяОплата.ВидОплаты = 
				ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ВидыБезналичныхОплат.Кредит");
			НоваяОплата.Сумма = Форма.СуммаОплаченоКредитом;
			
			Если НЕ Форма.ПараметрыОплатыКредитом = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(НоваяОплата, Форма.ПараметрыОплатыКредитом);
			КонецЕсли;
			
		Иначе
			МассивОплатРассрочка[0].Сумма = Форма.СуммаОплаченоКредитом;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Форма.СуммаОплаченоНал = 0 Тогда
		
		СтруктураОплат = Новый Структура;
		СтруктураОплат.Вставить("ВидОплаты", "Наличные");
		МассивОплатНаличные = Объект.Оплата.НайтиСтроки(СтруктураОплат);
			
		Если МассивОплатНаличные.Количество() = 0 Тогда
			
			НоваяОплата = Объект.Оплата.Добавить();
			НоваяОплата.ВидОплаты = "Наличные";
			НоваяОплата.Сумма = Форма.СуммаОплаченоНал;
			
		Иначе
			МассивОплатНаличные[0].Сумма = Форма.СуммаОплаченоНал;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Форма.СуммаОплаченоСертификатами = 0 Тогда 
		
		ВидОплаты = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат");
		МассивОплатПС = Объект.Оплата.НайтиСтроки(Новый Структура("ВидОплаты", ВидОплаты));
		
		Если МассивОплатПС.Количество() <> 0 Тогда
			Для Каждого СтрокаОплаты Из МассивОплатПС Цикл
				Объект.Оплата.Удалить(СтрокаОплаты);
			КонецЦикла;
		КонецЕсли;
		
		Организация = Форма.ВыбраннаяОрганизация;
		СистемаНалогообложения = Форма.ВыбраннаяСистемаНалогообложения;
		
		ОтборПоСНО = Новый Структура("Организация, СистемаНалогообложения", Организация, СистемаНалогообложения);
		СтрокиОплатПС = Форма.ТаблицаПодарочныхСертификатов.НайтиСтроки(ОтборПоСНО);
		
		Для каждого ОплатаСертификатом Из СтрокиОплатПС Цикл
			НоваяОплата = Объект.Оплата.Добавить();
			НоваяОплата.ВидОплаты = ВидОплаты;
			НоваяОплата.Сумма = ОплатаСертификатом.СуммаСертификата;
			НоваяОплата.НомерСертификата = ОплатаСертификатом.НомерСертификата;
			НоваяОплата.ПодарочныйСертификат = ОплатаСертификатом.ПодарочныйСертификат;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не Форма.СуммаОплаченоБонусами = 0 Тогда
		
		ВидОплаты = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ВидыБезналичныхОплат.Бонусы");
		СтруктураОплат = Новый Структура;
		СтруктураОплат.Вставить("ВидОплаты", ВидОплаты);
		МассивОплат= Объект.Оплата.НайтиСтроки(СтруктураОплат);
			
		Если МассивОплат.Количество() = 0 Тогда
			НоваяОплата = Объект.Оплата.Добавить();
			НоваяОплата.ВидОплаты = ВидОплаты;
			НоваяОплата.Сумма = Форма.СуммаОплаченоБонусами;
		Иначе
			МассивОплат[0].СуммаБонусов = Форма.СуммаОплаченоБонусами;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Форма.СуммаОплаченоБН = 0 Тогда
		
		ВидОплаты = Неопределено;
		
		Если Форма.ВыбранныйВидОплаты = "ОплатаКартой" Тогда
			ВидОплаты = Форма.ТаблицаПлатежныхКарт[0].ВидОплаты;
		Иначе
			Если ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации)
				Или Не ЗначениеЗаполнено(Форма.ЧекККМПродажа) Тогда
				
				ИмяВидаОплаты = Форма.ВыбранныйВидОплаты;
				СтруктураОплат = Новый Структура;
				СтруктураОплат.Вставить("ИмяКоманды", ИмяВидаОплаты);
				МассивВидовОплат = Форма.ТаблицаПлатежныхКарт.НайтиСтроки(СтруктураОплат);
				Если МассивВидовОплат.Количество() > 0 Тогда
					ВидОплаты = МассивВидовОплат[0].ВидОплаты;
				КонецЕсли;
			Иначе
				ВидОплаты = ОбщегоНазначенияРМКУНФВызовСервера.ВидОплатыПриПродаже(Форма.ЧекККМПродажа);
			КонецЕсли;
		КонецЕсли;
		
		Если ВидОплаты = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		МассивОплатПоКарте = Объект.Оплата.НайтиСтроки(Новый Структура("ВидПлатежнойКарты", ВидОплаты));
		Если МассивОплатПоКарте.Количество() > 0 Тогда
			СтрокаОплатыПоКарте = МассивОплатПоКарте[0];
			СтрокаОплатыПоКарте.Сумма = Форма.СуммаОплаченоБН;
		Иначе
			СтрокаОплатыПоКарте = Объект.Оплата.Добавить();
			СтрокаОплатыПоКарте.ВидОплаты = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
				"Перечисление.ВидыБезналичныхОплат.БанковскаяКарта");
			СтрокаОплатыПоКарте.ВидПлатежнойКарты = ВидОплаты;
			СтрокаОплатыПоКарте.Сумма = Форма.СуммаОплаченоБН;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.ЧекККМПродажа) Тогда
			РеквизитыОперации = ОбщегоНазначенияРМКВызовСервера.РеквизитыЭквайринговойОперацииПродажи(Форма.ЧекККМПродажа);
			ЗаполнитьЗначенияСвойств(СтрокаОплатыПоКарте, РеквизитыОперации);
		КонецЕсли;
			
	КонецЕсли;
	
	Если Не (Форма.СуммаОплаченоСБП = 0 И Форма.СуммаОплаченоЮКасса = 0) 
		И ЗначениеЗаполнено(Форма.ПлатежнаяСистема_ВидОплаты) Тогда 
		
		МассивОплатПС = Объект.Оплата.НайтиСтроки(
			Новый Структура("ВидОплаты", Форма.ПлатежнаяСистема_ВидОплаты));
			
		Если МассивОплатПС.Количество() = 0 Тогда
			
			НоваяОплата = Объект.Оплата.Добавить();
			
		Иначе
			НоваяОплата = МассивОплатПС[0];
		КонецЕсли;

		Комиссия	= ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОпределитьКомиссию(Форма,
			Форма.ПлатежнаяСистема_ВидыОплат,
			Форма.ПлатежнаяСистема_НоваяЗаявка.Организация,
			Форма.ПлатежнаяСистема_НоваяЗаявка.ВидОперацииПродажа);
		
		НоваяОплата.ИдентификаторПлатежнойСистемы   = Форма.ПлатежнаяСистема_ИдентификаторПС;
		НоваяОплата.ВидОплаты 						= Форма.ПлатежнаяСистема_ВидОплаты;
		НоваяОплата.Сумма 							= ?(Форма.СуммаОплаченоСБП = 0, Форма.СуммаОплаченоЮКасса, Форма.СуммаОплаченоСБП);
		НоваяОплата.СуммаКомиссии					= НоваяОплата.Сумма * Комиссия / 100;
		НоваяОплата.СсылочныйНомер 					= Форма.ПлатежнаяСистема_НоваяЗаявка.СсылочныйНомер;
		НоваяОплата.ЭквайринговыйТерминал 			= Форма.ПлатежнаяСистема_НоваяЗаявка.СпособОплатыПлатежнойСистемы;
		НоваяОплата.ВидПлатежнойКарты				= ИнтеграцияСПлатежнымиСистемамиУНФКлиентСервер.ВидПлатежнойКартыСБП();
		
	КонецЕсли;
	
	Если Не Форма.СуммаОплаченоСертификатамиНСПК = 0 Тогда
		
		ВидОплатыНСПК = Форма.ВидОплатыНСПК;
		МассивОплатНСПК = Объект.Оплата.НайтиСтроки(
			Новый Структура("ВидОплаты", ВидОплатыНСПК));
		
		Если МассивОплатНСПК.Количество() = 0 Тогда
			НоваяОплата = Объект.Оплата.Добавить();
		Иначе
			НоваяОплата = МассивОплатНСПК[0];
		КонецЕсли;
		НоваяОплата.ВидОплаты = ВидОплатыНСПК;
		НоваяОплата.Сумма = Форма.СуммаОплаченоСертификатамиНСПК;
		
	КонецЕсли;
	
	Если Не Форма.СуммаТоваровКЗамене = 0 Тогда
		
		ВидОплатыВстречноеПредоставление = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ВидыБезналичныхОплат.ВстречноеПредоставление");
		МассивОплатВстречноеПредоставление = Объект.Оплата.НайтиСтроки(
			Новый Структура("ВидОплаты", ВидОплатыВстречноеПредоставление));
			
		Если МассивОплатВстречноеПредоставление.Количество() = 0 Тогда
			
			НоваяОплата = Объект.Оплата.Добавить();
			НоваяОплата.ВидОплаты = ВидОплатыВстречноеПредоставление;
			НоваяОплата.Сумма = Форма.СуммаТоваровКЗамене;
			
		Иначе
			МассивОплатВстречноеПредоставление[0].Сумма = Форма.СуммаТоваровКЗамене;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура сохраняет выбранный вид платежной карты
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  ИмяКоманды - Строка - наименование переданной команды вида оплаты.
//
Процедура ЗаполнитьВыбранныйВидОплаты(Форма, ИмяКоманды) Экспорт
	
	// АПК:1036-выкл литерал для сравнения
	ЗначениеКомандыПоУмолчанию = "оплатакартой";
	// АПК:1036-вкл
	ЗаполненаТаблицаПлатежныхКарт = Форма.ТаблицаПлатежныхКарт.Количество();
	
	Если НРег(ИмяКоманды) = ЗначениеКомандыПоУмолчанию
		И ЗаполненаТаблицаПлатежныхКарт
		И ЗначениеЗаполнено(Форма.ТаблицаПлатежныхКарт[0].ИмяКоманды) Тогда
			Форма.ВыбранныйВидОплаты = Форма.ТаблицаПлатежныхКарт[0].ИмяКоманды;
	Иначе
		Форма.ВыбранныйВидОплаты = ИмяКоманды;
	КонецЕсли;
	
КонецПроцедуры

// По переданным параметрам вида операции определяет текущий вид операции.
//
// Параметры:
//  ПараметрыВидаОперации - Структура - см.ОбщегоНазначенияРМККлиентСервер.ПараметрыВидаОперации().
//
Процедура ЗаполнитьВидОперацииЧекаККМ(ПараметрыВидаОперации) Экспорт
	
	Если ПараметрыВидаОперации.ЭтоВозврат Тогда
		ВидОперации = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
			"Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств");
	Иначе
		ВидОперации = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
			"Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств");
	КонецЕсли;
	
	ПараметрыВидаОперации.ВидОперации = ВидОперации;
	
КонецПроцедуры

// Процедура производит закрытие смены.
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//  ЗакрытиеСменыПереопределено - Булево - признак того, что используется прикладной механизм закрытия смены. Значение
//                                         по умолчанию Ложь.
//
Процедура ЗакрытьСмену(Форма, ЗакрытиеСменыПереопределено) Экспорт
	
	ЗакрытиеСменыПереопределено = Истина;
	
	КассаККМ = Форма.Объект.КассаККМ;
	УникальныйИдентификатор = Форма.УникальныйИдентификатор;
	ПараметрыКассыККМ = ОбщегоНазначенияРМКУНФВызовСервера.ПолучитьПараметрыКассыККМ(КассаККМ);
	
	ПараметрыЗакрытияСмены = Новый Структура;
	ПараметрыЗакрытияСмены.Вставить("КассаККМ", КассаККМ);
	ПараметрыЗакрытияСмены.Вставить("УникальныйИдентификатор", Форма.УникальныйИдентификатор);
	ПараметрыЗакрытияСмены.Вставить("ИспользоватьПодключаемоеОборудование", Форма.ИспользоватьПодключаемоеОборудование);
	ПараметрыЗакрытияСмены.Вставить("ТаблицаТерминалы", Форма.ТаблицаТерминалы);
	ПараметрыЗакрытияСмены.Вставить("ПараметрыКассыККМ", ПараметрыКассыККМ);
	ПараметрыЗакрытияСмены.Вставить("ВариантЗаполненияМестаРасчетов", Форма.ВариантЗаполненияМестаРасчетов);
	
	Если Не ПараметрыКассыККМ.СоздаватьВыемку Тогда
		ЗакрытьКассовуюСменуПродолжение(Истина, ПараметрыЗакрытияСмены);
	Иначе
		Оповещение = Новый ОписаниеОповещения("ЗакрытьКассовуюСменуПродолжение",
			ОбщегоНазначенияРМКУНФКлиент,
			ПараметрыЗакрытияСмены);
		ВыемкаДенег(ПараметрыКассыККМ, Оповещение, КассаККМ, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет данные текущих эквайринговых терминалов.
// Поиск терминалов просходит в реквизите "ТаблицаТерминалы" формы рабочего места кассира.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  Результат - Массив - массив для заполнения данными текущих терминалов.
//
// Возвращаемое значение:
//  Массив - данные текущих эквайринговых терминалов.
//
Процедура ЗаполнитьДанныеТекущихЭквайринговыхТерминалов(Форма, Результат) Экспорт
	
	ИмяКомандыОплаты = Форма.ВыбранныйВидОплаты;
	ОтборДляПоискаИмениКоманды = Новый Структура();
	ОтборДляПоискаИмениКоманды.Вставить("ИмяКоманды", ИмяКомандыОплаты);
	
	РезультатОтбора = Форма.ТаблицаПлатежныхКарт.НайтиСтроки(ОтборДляПоискаИмениКоманды);

	ВидПлатежнойКарты = ?(РезультатОтбора.Количество(), РезультатОтбора[0].ВидОплаты, "");
	
	СтруктураПоиска = Новый Структура("ВидОплаты, Организация, ВидПлатежнойКарты",
		ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.БанковскаяКарта"),
		Форма.ВыбраннаяОрганизация, ВидПлатежнойКарты);
	
	Результат = Форма.ТаблицаТерминалы.НайтиСтроки(СтруктураПоиска); 
	
КонецПроцедуры

// Заполняет данные текущего эквайрингового терминала.
// Поиск по реквизиту формы РМК - "ТаблицаТерминалы".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  ДанныеЭТ - Массив - данные текущего эквайрингового терминала.
//
Процедура ЗаполнитьДанныеТекущегоЭквайринговогоТерминала(Форма, ДанныеЭТ) Экспорт
	
	Если ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Форма.Объект.ВидОперации) Тогда
		
		ВидОплаты = Неопределено;
		Если Форма.ТаблицаПлатежныхКарт.Количество() = 1 Тогда
			ВидОплаты = Форма.ТаблицаПлатежныхКарт[0].ВидОплаты;
		ИначеЕсли Форма.ТаблицаПлатежныхКарт.Количество() > 1 Тогда
			
			ПараметрыПоискаВидаОплаты = Новый Структура;
			ПараметрыПоискаВидаОплаты.Вставить("ИмяКоманды", Форма.ВыбранныйВидОплаты);
			МассивВидовОплат = Форма.ТаблицаПлатежныхКарт.НайтиСтроки(ПараметрыПоискаВидаОплаты);
			
			Если МассивВидовОплат.Количество() > 0 Тогда
				ВидОплаты = МассивВидовОплат[0].ВидОплаты;
			КонецЕсли;
		КонецЕсли;
		
		Если ВидОплаты = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыПоискаЭТ = Новый Структура;
		ПараметрыПоискаЭТ.Вставить("ВидПлатежнойКарты", ВидОплаты);
		МассивЭТ = Форма.ТаблицаТерминалы.НайтиСтроки(ПараметрыПоискаЭТ);
		
		Если МассивЭТ.Количество() > 0 Тогда
			ДанныеЭТ = МассивЭТ[0];
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(Форма.ЧекККМПродажа) Тогда
			
			ВидПлатежнойКарты = ОбщегоНазначенияРМКУНФВызовСервера.ВидОплатыПриПродаже(Форма.ЧекККМПродажа);
			
			Если Не ВидПлатежнойКарты = Неопределено Тогда
				
				МассивЭТ = Новый Массив;
				Если ТипЗнч(ВидПлатежнойКарты) = Тип("ПеречислениеСсылка.ВидыБезналичныхОплат") Тогда
					Если ВидПлатежнойКарты = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ВидыБезналичныхОплат.СертификатНСПК") Тогда
						МассивЭТ = Форма.ТаблицаТерминалы.НайтиСтроки(Новый Структура("ПлатежнаяСистема", ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ТипыПлатежнойСистемыККТ.СертификатНСПК")));
					КонецЕсли;
				Иначе
					МассивЭТ = Форма.ТаблицаТерминалы.НайтиСтроки(Новый Структура("ВидПлатежнойКарты", ВидПлатежнойКарты));
				КонецЕсли;
				
				Если МассивЭТ.Количество() > 0 Тогда
					ДанныеЭТ = МассивЭТ[0];
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			
			ВидОплаты = Неопределено;
			Если Форма.ТаблицаПлатежныхКарт.Количество() = 1 Тогда
				ВидОплаты = Форма.ТаблицаПлатежныхКарт[0].ВидОплаты;
			ИначеЕсли Форма.ТаблицаПлатежныхКарт.Количество() > 1 Тогда
				
				ПараметрыПоискаВидаОплаты = Новый Структура;
				ПараметрыПоискаВидаОплаты.Вставить("ИмяКоманды", Форма.ВыбранныйВидОплаты);
				МассивВидовОплат = Форма.ТаблицаПлатежныхКарт.НайтиСтроки(ПараметрыПоискаВидаОплаты);
				
				Если МассивВидовОплат.Количество() > 0 Тогда
					ВидОплаты = МассивВидовОплат[0].ВидОплаты;
				КонецЕсли;
			КонецЕсли;
			
			Если ВидОплаты = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ПараметрыПоискаЭТ = Новый Структура;
			ПараметрыПоискаЭТ.Вставить("ВидПлатежнойКарты", ВидОплаты);
			МассивЭТ = Форма.ТаблицаТерминалы.НайтиСтроки(ПараметрыПоискаЭТ);
			
			Если МассивЭТ.Количество() > 0 Тогда
				ДанныеЭТ = МассивЭТ[0];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет данные текущих эквайринговых терминалов.
// Поиск терминалов просходит в реквизите "ТаблицаТерминалы" формы рабочего места кассира.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  Результат - Массив - массив для заполнения данными текущих терминалов.
//
// Возвращаемое значение:
//  Массив - данные текущих эквайринговых терминалов.
//
Процедура ЗаполнитьДанныеОплатКартойПоЧеку(Форма, Результат) Экспорт
	
	СтруктураПоиска = Новый Структура("ВидОплаты", ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ВидыБезналичныхОплат.БанковскаяКарта"));
	
	Результат = Форма.Объект.Оплата.НайтиСтроки(СтруктураПоиска);
	
КонецПроцедуры

// Процедура производит выемку денежных средств из кассы ККМ.
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ВыполнитьОперациюВыемка(Форма) Экспорт
	
	Если Не ОбщегоНазначенияРМКУНФВызовСервера.ЕстьРольНаВнесениеИВыемкуДС() Тогда
		ТекстПредупреждения = НСтр("ru = 'Недостаточно прав для совершения операции выемки.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	КассаККМ = Форма.Объект.КассаККМ;
	СуммаВыемки = Форма.СуммаВыемка;
	
	ПараметрыКассыККМ = УправлениеНебольшойФирмойПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(КассаККМ);
	
	ИзымаемаяСумма = РассчитатьСуммуВыемки(СтруктураСостояниеКассовойСмены, ПараметрыКассыККМ);
	ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	ОповещениеЗакрытияСмены = Неопределено;
	ОповещениеЗавершенияНаФорме = Новый ОписаниеОповещения("ВыполнитьОперациюВыемкаЗавершение", Форма);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИзымаемаяСумма", ИзымаемаяСумма);
	ДополнительныеПараметры.Вставить("ОповещениеЗакрытияСмены", ОповещениеЗакрытияСмены);
	ДополнительныеПараметры.Вставить("КассаККМ", КассаККМ);
	ДополнительныеПараметры.Вставить("ОРП", СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах);
	ДополнительныеПараметры.Вставить("УникальныйИдентификатор", Форма.УникальныйИдентификатор);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершенияНаФорме", ОповещениеЗавершенияНаФорме);
	
	Если ОповещениеЗакрытияСмены <> Неопределено И ПараметрыКассыККМ.СоздаватьПоступлениеВКассу Тогда
		
		ОповещениеПоступленияВКассу = Новый ОписаниеОповещения("СоздатьПоступлениеВКассу",
			ОбщегоНазначенияРМКУНФКлиент,
			ПараметрыКассыККМ.КассаДляРозничнойВыручки);
			
		ДополнительныеПараметры.Вставить("ОповещениеПоступленияВКассу", ОповещениеПоступленияВКассу);
		
	КонецЕсли;
	
	Если ИспользоватьБезПодключенияОборудования Тогда
		ОбработкаЗавершения = Новый ОписаниеОповещения("СформироватьДокументВыемки",
			ОбщегоНазначенияРМКУНФКлиент,
			ДополнительныеПараметры);
	ИначеЕсли МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		ОбработкаЗавершения = Новый ОписаниеОповещения("ВыемкаДенегЗавершение",
			ОбщегоНазначенияРМКУНФКлиент,
			ДополнительныеПараметры);
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОбработкаЗавершения, СуммаВыемки);
	
КонецПроцедуры

// Процедура производит дополнительные действия при операции внесение.
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ВыполнитьОперациюВнесение(Форма) Экспорт
	
	Если Не ОбщегоНазначенияРМКУНФВызовСервера.ЕстьРольНаВнесениеИВыемкуДС() Тогда
		ТекстПредупреждения = НСтр("ru = 'Недостаточно прав для совершения операции внесения.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	КассаККМ = Форма.Объект.КассаККМ;
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("КассаККМ", КассаККМ);
	ПараметрыОперации.Вставить("УникальныйИдентификатор", Форма.УникальныйИдентификатор);
	
	ПараметрыКассыККМ = УправлениеНебольшойФирмойПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	Если ИспользоватьБезПодключенияОборудования Тогда
		ОткрытьФормуДляВыбораРасходаИзКассы(Истина, ПараметрыОперации);
	ИначеЕсли МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		ОткрытьФормуДляВыбораРасходаИзКассы(Ложь, ПараметрыОперации);
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет признак использования стандартного интерфейса внесения денежных средств.
// Если признак имеет значение Ложь, то механизм внесения необходимо описать в переопределении.
//
// Параметры:
//  Результат - Булево - признак использования стандартного интерфейса внесения.
//
Процедура ЗаполнитьПризнакСтандартныйИнтерфейсВнесения(Результат) Экспорт
	
	Результат = Ложь;
	
КонецПроцедуры

// Процедура производит выбор документа для продажи по заказу.
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ВыбратьДокументЗаказПокупателя(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
		
	Отбор = Новый Структура;
	
	Если Форма.ТаблицаКассККМОрганизаций.Количество()>1 Тогда
		Организации = Новый Массив();
		Для каждого СтрокаТаблицы Из Форма.ТаблицаКассККМОрганизаций Цикл
			Если Организации.Найти(СтрокаТаблицы.Организация) = Неопределено Тогда
				Организации.Добавить(СтрокаТаблицы.Организация);
			КонецЕсли;
		КонецЦикла;
		
		Отбор.Вставить("Организация", Организации);
	Иначе
		Отбор.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	Если Форма.Элементы.Предоплата.Видимость Тогда
		ВидыОпераций = Новый Массив;
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд"));
		Отбор.Вставить("ВидыОперации", ВидыОпераций);
	Иначе
		Отбор.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		Отбор.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	Если Форма.СпособПечатиЗаказаПокупателя > 0 Тогда
		ПараметрыФормы.Вставить("ВозможнаПечатьЗаказаИзРМК", Истина);
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораЗаказаПокупателя", Форма);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Документ.ЗаказПокупателя.ФормаВыбора",
		ПараметрыФормы,
		Форма.УникальныйИдентификатор,,,,
		ОбработчикОповещения,
		Режим);
	
КонецПроцедуры

// Производит дополнительные настройки формы РМК после выбора заказа
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК
//
Процедура ПослеВыбораЗаказаПокупателя(Форма) Экспорт
	
	Если Форма.ПриемАвансаПоЗаказу Тогда // заполнение по заказ-наряду
		
		Элементы = Форма.Элементы;
		
		СуммаДокумента = Форма.Объект.СуммаДокумента;
		Форма.СуммаКОплате = СуммаДокумента;
		Форма.СуммаИтого = СуммаДокумента;
		Форма.СуммаБезСкидки = СуммаДокумента;
		Форма.СуммаОплаченоВРассрочку = СуммаДокумента;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Предоплата", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОплатаВРассрочку", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаОплатаВРассрочку", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммаОплаченоВРассрочку", "Заголовок", НСтр("ru = 'Потом'"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммаОплаченоВРассрочку", "Подсказка", НСтр("ru = 'Потом'"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммаОплаченоВРассрочку", "Доступность", Ложь);
		
		ЗаполнитьТаблицуОплат(Форма);
		
	КонецЕсли
	
КонецПроцедуры

// Процедура производит выбор документа безналичной оплаты.
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ВыбратьДокументБезналичнойОплаты(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	МассивОрганизаций = Новый Массив;
	Для Каждого СтрокаТаблицы Из Форма.ТаблицаКассККМОрганизаций Цикл
		МассивОрганизаций.Добавить(СтрокаТаблицы.Организация);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыборНеПробитогоПлатежаНаОснованииЗаказа", Истина);
	ПараметрыФормы.Вставить("ДоступныеОрганизации", МассивОрганизаций);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ФормаРМК", Форма);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ВыборДокументаБезналичнойОплаты",
		ЭтотОбъект, ДополнительныеПараметры);
		
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Документ.ПоступлениеНаСчет.Форма.ФормаВыбора",
		ПараметрыФормы,
		Форма.УникальныйИдентификатор,,,,
		ОбработчикОповещения,
		Режим);
	
КонецПроцедуры

// Процедура выполняет допоплнительные действия после того, как прошла оплата по карте.
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения.
//
Процедура ДозаполнитьДанныеПослеОплатыПоКарте(Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура производит выбор документа расчета.
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ВыбратьДокументРасчета(Форма) Экспорт
	
	Объект = Форма.Объект;
	Форма.ТаблицаПредоплаты.Очистить();
	Форма.ЭтоЗачетАванса = Истина;
	СсылкаЧека = ПустаяСсылкаНаЧекККМ();
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстПредупреждения = НСтр("ru = 'Для зачета предоплаты необходимо указать контрагента'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Договор = ДоговорыКонтрагентовУНФВызовСервера.ПоДокументуКонтрагентуОрганизацииИВидуОперации(СсылкаЧека,
		Объект.Контрагент, Объект.Организация);
	
	Если НЕ ЗначениеЗаполнено(Договор) Тогда
		ТекстПредупреждения = НСтр("ru = 'Для зачета предоплаты необходимо указать договор контрагента'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	СуммаДокумента = Форма.СуммаИтого;
	ДатаРасчета = ТекущаяДата();
	
	Отбор = Новый Структура("Организация", Форма.ОсновнаяОрганизация);
	СтрокаКассы = Форма.ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
	ВалютаКассыККМ = ОбщегоНазначенияРМКВызовСервера.ЗначениеРеквизитаОбъекта(СтрокаКассы.КассаККМ,
		"ВалютаДенежныхСредств");
	Курс = 1;
	Кратность = 1;
	
	АдресПредоплатаВХранилище = ОбщегоНазначенияРМКУНФВызовСервера.СоздатьХранилище(Форма.УникальныйИдентификатор);
	ПараметрыПодбора = Новый Структура(
		"АдресПредоплатаВХранилище,
		|Подбор,
		|ЕстьЗаказ,
		|ЗаказВШапке,
		|Компания,
		|Заказ,
		|Дата,
		|Ссылка,
		|Контрагент,
		|Договор,
		|Курс,
		|Кратность,
		|ВалютаДокумента,
		|СуммаДокумента",
		АдресПредоплатаВХранилище, // АдресПредоплатаВХранилище
		Истина, // Подбор
		ЗначениеЗаполнено(Объект.ЗаказПокупателя), // ЕстьЗаказ
		Истина, // ЗаказВШапке
		Объект.Организация, // Компания
		Объект.ЗаказПокупателя, // Заказ
		ДатаРасчета, // Дата
		СсылкаЧека, // Ссылка
		Объект.Контрагент, // Контрагент
		Договор, // Договор
		Курс, // Курс
		Кратность, // Кратность
		ВалютаКассыККМ, // ВалютаДокумента
		СуммаДокумента); // СуммаДокумента
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораАвансовПокупателей", ПараметрыПодбора, , , , ,
		Новый ОписаниеОповещения("РедактироватьЗачетПредоплатыЗавершение", ЭтотОбъект,
		Новый Структура("АдресПредоплатаВХранилище, Форма", АдресПредоплатаВХранилище, Форма)));
	
КонецПроцедуры

Процедура РедактироватьЗачетПредоплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	АдресПредоплатаВХранилище = ДополнительныеПараметры.АдресПредоплатаВХранилище;
	Форма = ДополнительныеПараметры.Форма;
	Форма.ЭтоЗачетАванса = Ложь;
	
	ОповещениеНаФорму = Новый ОписаниеОповещения("ОповещениеВыборДокументаРасчета", Форма);
	
	КодВозврата = Результат;
	Если КодВозврата = КодВозвратаДиалога.OK Тогда
		
		МассивПредоплат = ОбщегоНазначенияРМКУНФВызовСервера.ЗаполнитьАвансы(АдресПредоплатаВХранилище);
		
		Если МассивПредоплат.Количество() = 0 Тогда
			ТекстПредупреждения = НСтр("ru='Не выбраны документы авансов.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			ВыполнитьОбработкуОповещения(ОповещениеНаФорму, Неопределено);
			Возврат;
		КонецЕсли;
		
		ДокументАванса = ПустаяСсылкаНаЧекККМ();
		ДокументАвансаСТоварами = ПустаяСсылкаНаЧекККМ();
		СуммаЗачетаАванса = 0;
		Для Каждого СтрокаПердоплаты Из МассивПредоплат Цикл
			СуммаЗачетаАванса = СуммаЗачетаАванса + СтрокаПердоплаты.СуммаРасчетов;
			ДокументАванса = СтрокаПердоплаты.Документ;
			Если СтрокаПердоплаты.ЕстьТовары Тогда
				Если ДокументАвансаСТоварами.Пустая() Тогда
					ДокументАвансаСТоварами = ДокументАванса;
				Иначе
					ТекстПредупреждения = НСтр("ru='Нельзя выбрать более одного документа с предоплатой товаров.'");
					ПоказатьПредупреждение(, ТекстПредупреждения);
					ВыполнитьОбработкуОповещения(ОповещениеНаФорму, Неопределено);
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаПредоплаты Из МассивПредоплат Цикл
			НоваяСтрока = Форма.ТаблицаПредоплаты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПредоплаты);
		КонецЦикла;
		
		ДокументРасчета = ?(ДокументАвансаСТоварами.Пустая(), ДокументАванса, ДокументАвансаСТоварами);
		
		СтруктураАванса = Новый Структура;
		СтруктураАванса.Вставить("ДокументРасчета", ДокументРасчета);
		СтруктураАванса.Вставить("СуммаЗачетаАванса", СуммаЗачетаАванса);
		
		Оповещение = Новый ОписаниеОповещения("ОповещениеВыборДокументаРасчета", Форма);
		
		ВыполнитьОбработкуОповещения(Оповещение, СтруктураАванса);
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеНаФорму, Неопределено);
	
КонецПроцедуры // РедактироватьЗачетПредоплаты()

// Процедура формирует и устанавливает заголовок программы.
//
// Параметры
//  ТекстЗаголовка - Строка - текст заголовка программы.
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура СформироватьЗаголовокПрограммы(ТекстЗаголовка, Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если Объект.ВидОперации = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
		"Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств") Тогда
		
		Если Объект.ОперацияСДенежнымиСредствами Тогда
			ТекстЗаголовка = НСтр("ru = 'Возврат денежных средств без передачи товаров'");
		Иначе
			ТекстЗаголовка = НСтр("ru = 'Возврат'");
		КонецЕсли;
	Иначе
		Если Объект.ОперацияСДенежнымиСредствами Тогда
			ТекстЗаголовка = НСтр("ru = 'Прием денежных средств без передачи товаров'");
		Иначе
			ТекстЗаголовка = НСтр("ru = 'Продажа'");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ЗаказПокупателя) Тогда
		
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' по '") + Строка(Объект.ЗаказПокупателя);
		
	ИначеЕсли Форма.ЭтоЗачетАванса Тогда
		
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' Зачет аванса '") +
			Формат(Форма.СуммаОстаткаДокументаРасчета, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧРГ=' '; ЧГ=3,0");
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ДокументРасчета) И Форма.ЭтоОплатаРассрочки Тогда
		
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' Остаток рассрочки '") +
			Формат(Форма.СуммаОстаткаДокументаРасчета, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧРГ=' '; ЧГ=3,0");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.Объект.Кассир) Тогда
		ТекстЗаголовка = СтрШаблон("%1, кассир: %2", ТекстЗаголовка, Объект.Кассир);
	КонецЕсли;
	
	Если Форма.ЗапущеноПодАдминистратором Тогда
		Форма.Заголовок = ТекстЗаголовка;
	Иначе
		КлиентскоеПриложение.УстановитьЗаголовок(ТекстЗаголовка);
	КонецЕсли;
	
КонецПроцедуры

// Процедура открывает форму подбора товаров в рабочем месте кассира.
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ОткрытьФормуПодбораТоваров(Форма) Экспорт
	
	ОткрытьФормуПодбораНоменклатуры(Форма);
	
КонецПроцедуры

// Процедура анализирует данные выбранные пользователем и дозаполняет при необходимости.
// В массив данных необходимо добавить выбранные значения из формы подбора. Т.к возможна
// ситуация, когда в форме подбора реализован множественный выбор строк.
//
// Параметры
//  ДанныеВыбора - Структура - выбранные данные в форме ручного подбора.
//                 Обязательно должна содержать ключи Номенклатура, Цена.
//                 Опционально - Характеристика, Упаковка.
//  МассивДанных - Массив - массив, в который нужно добавить выбранные данные.
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ДозаполнитьДанныеРучногоВыбора(ДанныеВыбора, МассивДанных, Форма) Экспорт
	Если ДанныеВыбора.ИмяДействия = "Подбор номенклатуры НСПК" Тогда
		ОбщегоНазначенияРМКУНФВызовСервера.ДозаполнитьДанныеРучногоВыбора(ДанныеВыбора, МассивДанных, Форма.РозничныйВидЦены);
	Иначе
		МассивДанных.Добавить(ДанныеВыбора);
	КонецЕсли;
КонецПроцедуры

// Проверяет использование внешнего события в конфигурации при получении данных с торгового оборудования.
//
// Параметры:
//  Результат - Булево - признак использования внешнего события.
//
Процедура ЗаполнитьПризнакИспользованияВнешнегоСобытия(Результат) Экспорт
	
	Результат = Ложь;
	
КонецПроцедуры

// Проверяет наличие ошибок при заполнении данных карты лояльности на форме РМК.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  ЕстьОшибки - Булево - признак наличия ошибок.
//
Процедура ПроверитьОшибкиЗаполненияКартыЛояльности(Форма, ЕстьОшибки) Экспорт
	
	ИменаНезаполненныхПолей = НСтр("ru = ''");
	
	ДанныеВидаКарты = Форма.ДанныеВидаКарты(Форма.НоваяКартаВидКарты); 
	Если НЕ ЗначениеЗаполнено(ДанныеВидаКарты.Идентификатор) Тогда
		ТекстШаблон = НСтр("ru = '%1""Вид карты"" %2'");
		ИменаНезаполненныхПолей = СтрШаблон(ТекстШаблон, ИменаНезаполненныхПолей, Символы.ПС);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИменаНезаполненныхПолей) Тогда
		ТекстШаблон = НСтр("ru = 'Пожалуйста, заполните следующие поля: %1%2'");
		ТекстПояснения = СтрШаблон(ТекстШаблон, Символы.ПС, ИменаНезаполненныхПолей);
		ИнтерфейсРМКСлужебныйКлиент.УстановитьТекстДекорацииОПерсональныхДанных(Форма.Элементы.ДекорацияТекстОПерсональныхДанных, ТекстПояснения);
		ЕстьОшибки = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет признак, который отвечает за способ создания карты лояльности.
// Значение по умолчанию - Ложь, карта лояльности будет создана в сервисе лояльности.
//
// Параметры:
//  Результат - Булево - признак, отвечающий за способ создания карты лояльности.
//
Процедура ЗаполнитьПризнакСоздаватьЛокальноКартуЛояльности(Результат) Экспорт
	
	Результат = Истина;
	
КонецПроцедуры

// Заполняет признак использования локального поиска подарочного сертификата.
// Если признак имеет значение Ложь, то поиск сертификата будет идти через запрос сервера лояльности.
//
// Параметры:
//  Результат - Булево - признак использования локального поиска сертификата.
//
Процедура ЗаполнитьПризнакИспользоватьПоискСертификатаЛокально(Результат) Экспорт
	
	Результат = Истина;
	
КонецПроцедуры

// Заполняет признак использования локального поиска промокода.
// Если признак имеет значение Ложь, то поиск промокода будет идти через запрос сервера лояльности.
//
// Параметры:
//  Результат - Булево - признак использования локального поиска промокода.
//
Процедура ЗаполнитьПризнакИспользоватьПоискПромокодаЛокально(Результат) Экспорт
	
	Результат = Истина;
	
КонецПроцедуры
// Заполняет признак использования локального запроса бонусов.
// Если признак имеет значение Ложь, то бонусы будут запрошены используя сервер лояльности.
//
// Параметры:
//  Результат - Булево - признак использования локального запроса бонусов.
//
Процедура ЗаполнитьПризнакИспользоватьЗапросБонусовЛокально(Результат) Экспорт
	
	Результат = Истина;
	
КонецПроцедуры

// Проверяет является ли переданное значение - документом безналичной оплаты.
//
// Параметры:
//  ДокументСсылка - ОпределяемыйТип.ДокументРасчетаРМК - ссылка на документ расчета.
//  ЭтоДокументБезналичнойОплаты - Булево - Истина, если это документ безналичной оплаты.
//
Процедура ЗаполнитьПризнакЭтоДокументБезналичнойОплаты(ДокументСсылка, ЭтоДокументБезналичнойОплаты) Экспорт
	
	ЭтоДокументБезналичнойОплаты = ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеНаСчет");
	
КонецПроцедуры

// Процедура заполняет массив особенностями учета номенклатуры, для которых необходима проверка возраста.
//
// Параметры:
//  МассивДанных - Массив - массив, который нужно заполнить.
//
Процедура ЗаполнитьМассивДляПроверкиВозраста(МассивДанных) Экспорт
	
	МассивДанных.Добавить(
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ВидыПродукцииИС.Алкогольная"));
	МассивДанных.Добавить(
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ВидыПродукцииИС.Табак"));
	МассивДанных.Добавить(
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ВидыПродукцииИС.АльтернативныйТабак"));
	
КонецПроцедуры

// Процедура производит обработку выбранного значения при подборе
// номенклатуры в таблицу быстрых товаров.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма настроек рабочего места кассира.
//  ВыбранноеЗначение - Структура - данные для обработки.
//  СтандартнаяОбработка - Булево - признак использования стандартной обработки.
//
Процедура ОбработатьВыбранноеЗначениеБыстрыхТоваров(Форма, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ТекущиеДанные = Форма.Элементы.НастройкаРМКБыстрыеТовары.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		СтандартнаяОбработка = Ложь;
		Если ВыбранноеЗначение.Свойство("Номенклатура") И ЗначениеЗаполнено(ВыбранноеЗначение.Номенклатура) Тогда
			ТекущиеДанные.Номенклатура = ВыбранноеЗначение.Номенклатура;
			ТекущиеДанные.ХарактеристикиИспользуются = ОбщегоНазначенияРМКУНФВызовСервера.ТребуетсяВводХарактеристики(
					ТекущиеДанные.Номенклатура);
		КонецЕсли;
		Если ВыбранноеЗначение.Свойство("Характеристика") И ЗначениеЗаполнено(ВыбранноеЗначение.Характеристика) Тогда
			ТекущиеДанные.Характеристика = ВыбранноеЗначение.Характеристика;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура производит обработку выбранного значения кода доступа
// кассира в помощнике настройки рабочего места кассира.
// Если СтандартнаяОбработка = Ложь, то необходимо вызвать обработку оповещения "ОповещениеВыборКодаДоступа"
// в форме помощника настройки кассового места.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма настроек рабочего места кассира.
//  ВыбранноеЗначение - Структура - данные для обработки.
//  СтандартнаяОбработка - Булево - признак использования стандартной обработки.
//
Процедура ОбработатьВыбранноеЗначениеКодаДоступа(Форма, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	Возврат;
КонецПроцедуры

// Открывает форму настроек распределения продаж по кассам ККМ
//
Процедура ОткрытьНастройкиРаспределенияПродаж() Экспорт
	
	ТекущееРабочееМесто = МенеджерОборудованияВызовСервера.РабочееМестоКлиента();
	НастройкаРМКРаспределение = РабочееМестоКассираВызовСервера.ПолучитьНастройкуРМК(ТекущееРабочееМесто);
	
	Если ЗначениеЗаполнено(НастройкаРМКРаспределение) Тогда
		
		СтруктураПараметров = Новый Структура("Ключ, ИмяСтраницы", НастройкаРМКРаспределение, "РаспределениеНоменклатуры");
		ФормаРаспределенияПродаж = ПолучитьФорму("Справочник.НастройкиРМК.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
		ФормаРаспределенияПродаж.Элементы.ГруппаШапка.Видимость = Ложь;
		ФормаРаспределенияПродаж.АвтоЗаголовок = Ложь;
		ФормаРаспределенияПродаж.Заголовок = НСтр("ru = 'Настройка распределения продаж'");
		ФормаРаспределенияПродаж.Элементы.БыстрыеТоварыИКнопки.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		
		Если Не ФормаРаспределенияПродаж.Открыта() Тогда
			ФормаРаспределенияПродаж.Открыть();
		КонецЕсли;
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбрана настройка распределения продаж'");
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура производит действия после открытия чека в очереди.
//
// Параметры:
//  ПараметрыВыполнения - Структура - параметры пробития чека на ККТ.
//  ДополнительныеПараметры - Структура - дополнительные параметры процедуры.
//
Процедура ПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ШапкаЧека = ПараметрыВыполнения.ВходныеПараметры;
	
	НомерСмены = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерСмены);
	
	Если НомерСмены <> 0 Тогда
		ШапкаЧека.НомерСменыККТ = НомерСмены;
	КонецЕсли;
	
	НомерЧека = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерЧека);
	
	Если НомерЧека <> 0 Тогда
		ШапкаЧека.НомерЧекаККТ = НомерЧека;
	КонецЕсли;
	
	Если ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(ПараметрыВыполнения, "ЗаводскойНомерФН")
		И ЗначениеЗаполнено(ПараметрыВыполнения.ЗаводскойНомерФН) Тогда
		ШапкаЧека.ЗаводскойНомерФН = ПараметрыВыполнения.ЗаводскойНомерФН;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ЕстьАлкогольнаяПродукцияЕГАИС") 
		И ДополнительныеПараметры.ЕстьАлкогольнаяПродукцияЕГАИС Тогда
		ПараметрыОперации = Новый Структура();
		ПараметрыОперации.Вставить("НомерСмены", ШапкаЧека.НомерСменыККТ);
		ПараметрыОперации.Вставить("НомерЧека", ШапкаЧека.НомерЧекаККТ);
		ПараметрыОперации.Вставить("СерийныйНомер", ШапкаЧека.ЗаводскойНомерФН);
		ПараметрыОперации.Вставить("АдресТорговогоОбъекта", ДополнительныеПараметры.АдресМагазина);
		
		ИнтеграцияЕГАИСКлиент.ПередатьНемедленно(
		ШапкаЧека.ДокументОснование,
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
		"Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные"),
		ПараметрыОперации,
		Новый ОписаниеОповещения("ПослеПередачиЧекаЕГАИС", МенеджерОборудованияРМККлиент, ПараметрыВыполнения));
		
		ПараметрыВыполнения.Вставить("ДанныеОтправленыВЕГАИС", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура производит действия после ошибки печати чека в очереди.
//
// Параметры:
//  ПараметрыВыполнения - Структура - параметры пробития чека на ККТ.
//  ДополнительныеПараметры - Структура - дополнительные параметры процедуры.
//
Процедура ПослеОшибкиПечатиЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("ЕстьАлкогольнаяПродукцияЕГАИС") 
		И ДополнительныеПараметры.ЕстьАлкогольнаяПродукцияЕГАИС Тогда
		
		НомерСмены = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерСмены);
		Если НомерСмены = 0 Тогда
			НомерСмены = 1;
		КонецЕсли;
		
		НомерЧека = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерЧека);
		
		Если НомерЧека = 0 Тогда
			НомерЧека = 1;
		КонецЕсли;
		
		ПараметрыОперации = Новый Структура();
		ПараметрыОперации.Вставить("НомерСмены", НомерСмены);
		ПараметрыОперации.Вставить("НомерЧека", НомерЧека + 1000000);
		ПараметрыОперации.Вставить("СерийныйНомер", НСтр("ru = ''"));
		ПараметрыОперации.Вставить("АдресТорговогоОбъекта", ДополнительныеПараметры.АдресМагазина);
		
		Если ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(ПараметрыВыполнения, "ЗаводскойНомерФН")
			И ЗначениеЗаполнено(ПараметрыВыполнения.ЗаводскойНомерФН) Тогда
				ПараметрыОперации.СерийныйНомер = ПараметрыВыполнения.ЗаводскойНомерФН;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыОперации.СерийныйНомер) Тогда
			ПараметрыОперации.СерийныйНомер = НСтр("ru = '1'");
		КонецЕсли;
		
		ИнтеграцияЕГАИСКлиент.ПередатьНемедленно(ПараметрыВыполнения.ВходныеПараметры.ДокументОснование,
			ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
				"Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию"),
			ПараметрыОперации,
			Новый ОписаниеОповещения("ПослеПередачиОтменыЧекаЕГАИС", МенеджерОборудованияРМККлиент, ПараметрыВыполнения));
		
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет доступное ККТ для фискализации чека
// Параметры:
//  РеквизитыЧека - Структура - реквизиты фискального чека
//  СписокУстройств - Массив - список доступных ККТ для фискализации
//  ИдентификаторУстройстваККТ - СправочникСсылка.ПодключаемоеОборудование - выбранное ККТ для фискализации
//  СтандартнаяОбработка - Булево - выполнение стандартной обработки
//
Процедура ДоступноеККТДляФискализации(РеквизитыЧека, СписокУстройств, ИдентификаторУстройстваККТ, СтандартнаяОбработка = Истина) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ПодключаемаяККМ = Неопределено;
	
	Если ЗначениеЗаполнено(РеквизитыЧека.КассаККМ) Тогда
		ПодключаемаяККМ = ОбщегоНазначенияРМКВызовСервера.ЗначениеРеквизитаОбъекта(РеквизитыЧека.КассаККМ, 
		"ПодключаемоеОборудование");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПодключаемаяККМ) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Устройство Из СписокУстройств Цикл
		Если Устройство.Ссылка = ПодключаемаяККМ Тогда
			ИдентификаторУстройстваККТ = ПодключаемаяККМ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет массив, который содержит особенности учета номенклатуры, которые можно возвращать без марки.
//
// Параметры:
//  МассивОсобенностей - Массив - массив, который содержит занчения особенностей номенклатуры, которые
//    можно возвращать без марки.
//
Процедура ЗаполнитьМассивОсобенностейДляВозвратаБезМарки(МассивОсобенностей) Экспорт
	
	Антисептики = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики");
	Бады = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы");
	Велосипеды = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды");
	Духи = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи");
	КреслаКоляски = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски");
	Обувь = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь");
	Одежда = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность");
	ПродукцияИзНатуральногоМеха = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха");
	Фотоаппараты = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Фотоаппараты");
	Шины = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины");
	
	МассивОсобенностей.Добавить(Антисептики);
	МассивОсобенностей.Добавить(Бады);
	МассивОсобенностей.Добавить(Велосипеды);
	МассивОсобенностей.Добавить(Духи);
	МассивОсобенностей.Добавить(КреслаКоляски);
	МассивОсобенностей.Добавить(Обувь);
	МассивОсобенностей.Добавить(Одежда);
	МассивОсобенностей.Добавить(ПродукцияИзНатуральногоМеха);
	МассивОсобенностей.Добавить(Фотоаппараты);
	МассивОсобенностей.Добавить(Шины);
	
КонецПроцедуры

// Заполняет параметры выбора для отбора характеристик по владельцу.
//
// Параметры:
//  ПараметрыВыбора - Структура - параметры для отбора характеристик.
//  Номенклатура - ОпределяемыйТип.НоменклатураРМК - владелец характеристик.
//  СтандартнаяОбработка - Булево - признак использования стандартной обработки.
//
Процедура ЗаполнитьПараметрыВыбораХарактеристик(ПараметрыВыбора, Номенклатура, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Открывает форму помощника настройки обмена 1С:РМК с другими системами.
//
Процедура ОткрытьПомощникНастройкиОбмена() Экспорт
	
	Возврат;
	
КонецПроцедуры

// Проверяет необходимость заполнения контрагента при выполнении операций "Предоплата", "Оплата в рассрочку".
//
// Параметры:
//  Результат - Булево - признак необходимости заполнения контрагента.
//
Процедура ПроверитьНеобходимостьЗаполненияКонтрагента(Результат) Экспорт
	
	Результат = Истина;
	
КонецПроцедуры

// Процедура выполняет дополнительные действия при открытии каталога товаров.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ПриОткрытииКаталогаТоваров(Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Заполняет признак, от которого будет зависеть будет ли задаваться вопрос для подтверждения
// верности владельца для ввода марки. Значение по умолчанию признака - Истина.
// 
// Параметры:
//  НужноПодтверждениеМаркиАлкоголя - Булево - признак, от значения которого зависит будет ли выводиться вопрос
//    при сканировании марки алкоголя.
//
Процедура ЗаполнитьПодтверждениеМаркиАлкоголя(НужноПодтверждениеМаркиАлкоголя) Экспорт
	
	НужноПодтверждениеМаркиАлкоголя = Ложь;
	
КонецПроцедуры

// Метод реализует собственную логику в конфигурации потребителе по созданию документов списания алкогольной продукции.
//
Процедура СписатьАлкогольнуюПродукцию(Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Проверяет корректность заполнения оплат перед пробитием чека.
// В случае если установить СтандартнаяОбработка = Ложь, дальнейшие проверки в форме РМК производиться не будут.
//
// Параметры:
//  ОплатаЗаполненаВерно - Булево - признак верно заполненной оплаты
//  СтруктураОшибки - Структура - текст заголовка и ошибки.
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//  СтандартнаяОбработка - Булево - признак использования стандартной обработки.
//
Процедура ПроверитьЗаполнениеОплатПередПробитиемЧека(ОплатаЗаполненаВерно,
	СтруктураОшибки, Форма, СтандартнаяОбработка) Экспорт
	
	Если Форма.ЭтоВозвратАванса И НЕ Форма.ЭтоВозвратБезОснования Тогда
		
		Если Форма.СуммаИтого > Форма.ДопустимаяСуммаВозвратаАванса Тогда
			
			ОплатаЗаполненаВерно = Ложь;
			ТекстОшибки = НСтр("ru = 'Сумма возврата аванса больше принятого аванса.'");
			СтруктураОшибки.ТекстЗаголовка = НСтр("ru = 'Ошибка оплаты.'");
			СтруктураОшибки.ТекстОшибки = ТекстОшибки;
			
		КонецЕсли;
		
	ИначеЕсли Форма.Объект.ОперацияСДенежнымиСредствами И НЕ Форма.ЭтоВозвратБезОснования
		И Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств") Тогда
		
		СуммаОплат = Форма.СуммаИтого - Форма.СуммаКОплате;
		
		Если СуммаОплат - Форма.СуммаОплаченоВРассрочку > Форма.ДопустимаяСуммаВозвратаАванса Тогда
			
			ОплатаЗаполненаВерно = Ложь;
			ТекстОшибки = НСтр("ru = 'Сумма возврата предоплаты больше принятой предоплаты.'");
			СтруктураОшибки.ТекстЗаголовка = НСтр("ru = 'Ошибка оплаты.'");
			СтруктураОшибки.ТекстОшибки = ТекстОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Метод для обработки событий элементов формы добавленных программным способом.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - ОбщаяФорма.НастройкиРабочегоМестаКассира.
//  Элемент - ПолеФормы - Имя элемента.
//
Процедура ПроизвольнаяНастройкаПриИзменении(Форма, Элемент) Экспорт
	Возврат;
КонецПроцедуры

// Открывает форму опроса владельца карты.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ПровестиОпросВладельцаКарты(Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Настраивает элементы формы настроек РМК по разделу SMS подтверждение
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма настроек РМК.
//  СтандартнаяОбработка - Булево - признак использования стандартной обработки.
//
Процедура НастроитьЭлементыSMSПодтвержденияНаФормеНастроек(Форма, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ИспользоватьШаблоныСообщений = Форма.ИспользоватьШаблоныСообщений;
	Элементы = Форма.Элементы;
	НастройкаРМК = Форма.НастройкаРМК;
	
	Если НЕ ИспользоватьШаблоныСообщений Тогда
		НастройкаРМК.ОтправлятьSMSКодПриЗаведенииКарты = Ложь;
		Форма.ОтправлятьSMSПриОплатеБонусами = Ложь;
		Форма.ОтправлятьSMSПриПоискеКартыПоНомеруТелефона = Ложь;
	КонецЕсли;
	
	Форма.Элементы.ГруппаSMSПодтверждениеНиз.Доступность = ИспользоватьШаблоныСообщений;
	
	Элементы.НастройкаРМКШаблонSMSПриЗаведенииКарты.Доступность = НастройкаРМК.ОтправлятьSMSКодПриЗаведенииКарты;
		
	Элементы.НастройкаРМКШаблонSMSПриПродаже.Доступность = Форма.ОтправлятьSMSПриПоискеКартыПоНомеруТелефона;
	
	Элементы.НастройкаРМКШаблонSMSПриСписанииБонусов.Доступность = Форма.ОтправлятьSMSПриОплатеБонусами;
		
	Элементы.НастройкаРМКСуммаПодтвержденияСписанияБонусов.Доступность = Форма.ОтправлятьSMSПриОплатеБонусами;
		
	Элементы.БонусыОкончание.Доступность = Форма.ОтправлятьSMSПриОплатеБонусами;
	
КонецПроцедуры

// Стандартный обработчик события формы см. вызов из Обработки.РабочееМестоКассира.Формы.ФормаРМК
// с возможностью вернуть во входящий параметр ОбработатьОповещениеНаСервере значение Истина, если
// далее требуется обработать событие на сервере.
// Дополнительно см. метод ОбщегоНазначенияРМКПереопределяемый.ОбработкаОповещения.
//
Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ОбработатьОповещениеНаСервере) Экспорт
	Возврат;
КонецПроцедуры

// Заполняет признак использования автоматических скидок/бонусных программ
// 
// Параметры:
//  Результат - Булево - признак использования автоматических скидок/бонусных программ
//
Процедура ЗаполнитьПризнакИспользованияАвтоматическихСкидок(Результат) Экспорт
	Результат = ОбщегоНазначенияРМКУНФВызовСервера.ИспользуютсяАвтоматическиеСкидки();
КонецПроцедуры

// Процедура открывает форму, в которой можно заполнить список складов, которые
// можно вручную указать при продаже для каждой строки товара.
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения - форма настроек рабочего места кассира.
//
Процедура ОткрытьВыборСкладовДляПродажи(Форма) Экспорт
	
	ТекущееРабочееМесто = МенеджерОборудованияВызовСервера.РабочееМестоКлиента();
	НастройкаРМКРаспределение = РабочееМестоКассираВызовСервера.ПолучитьНастройкуРМК(ТекущееРабочееМесто);
	
	Если ЗначениеЗаполнено(НастройкаРМКРаспределение) Тогда
		
		СтруктураПараметров = Новый Структура("Ключ, ИмяСтраницы", НастройкаРМКРаспределение, "СтруктурныеЕдиницы");
		ФормаРаспределенияПродаж = ПолучитьФорму("Справочник.НастройкиРМК.ФормаОбъекта", СтруктураПараметров, Форма);
		ФормаРаспределенияПродаж.Элементы.ГруппаШапка.Видимость = Ложь;
		ФормаРаспределенияПродаж.АвтоЗаголовок = Ложь;
		ФормаРаспределенияПродаж.Заголовок = НСтр("ru = 'Список складов для ручного выбора при продаже'");
		ФормаРаспределенияПродаж.Элементы.БыстрыеТоварыИКнопки.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		
		Если Не ФормаРаспределенияПродаж.Открыта() Тогда
			ФормаРаспределенияПродаж.Открыть();
		КонецЕсли;
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбрана настройка РМК'");
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму вновь созданного эквайрингового терминала
// в интерфейсе помощника настройки рабочего места кассира.
// Когда СтандартнаяОбработка = Ложь, в клиентском коде следует обработать оповещение
// "ОповещениеОткрытьФормуСозданияЭквайринговогоТерминала" в форме помощника настройки кассового места.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма помощника настройки рабочего места кассира.
//  СтандартнаяОбработка - Булево - признак использования стандартной обработки.
//
Процедура ОткрытьФормуНовогоТерминалаВИнтерфейсеПомощникаНастройки(Форма, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("ТорговыйОбъект", Форма.Объект.ТорговыйОбъект);
	
	Если Форма.ТаблицаСозданияЭТ.Количество() > 0 Тогда
		
		СтрокаТаблицы = Форма.ТаблицаСозданияЭТ[0];
		ЗначенияЗаполнения.Вставить("Организация", СтрокаТаблицы.Организация);
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПодключаемоеОборудование) Тогда
			
			ЗначенияЗаполнения.Вставить("ПодключаемоеОборудование", СтрокаТаблицы.ПодключаемоеОборудование);
			ЗначенияЗаполнения.Вставить("ИспользоватьБезПодключенияОборудования", Ложь);
			
		Иначе
			ЗначенияЗаполнения.Вставить("ИспользоватьБезПодключенияОборудования", Истина);
		КонецЕсли;
		
	ИначеЕсли НЕ Форма.НесколькоОрганизаций Тогда
		ЗначенияЗаполнения.Вставить("Организация", Форма.ОрганизацияКассаККМ);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуСозданияЭквайринговогоТерминала", Форма);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("Справочник.СпособыОплаты.ФормаОбъекта",
		ПараметрыФормы, Форма,,,, ОбработчикОповещения, Режим);
	
КонецПроцедуры

// Определяет необходимость запрашивать баланс подарочного сертификата при возврате.
//
// Параметры:
//  ЗапрашиватьБаланс - Булево - истина, если требуется запрашивать баланс сертификата.
//
Процедура ОпределитьНеобходимостьЗапросаБалансаСертификата(ЗапрашиватьБаланс) Экспорт
	ЗапрашиватьБаланс = Истина;
КонецПроцедуры

// Открывает форму выбора кассира. При завершении событие должно вызывать процедуру
// "ВыборКассираЗавершение" на форме рабочего места кассира.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  СтандартнаяОбработка - Булево - признак стандартной обработки события.
//
Процедура ОткрытьФормуВыбораКассира(Форма, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Истина;
	ОбработкаОповещения = Новый ОписаниеОповещения("ВыборКассираЗавершение", Форма);
	ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора",, Форма,,,,
		ОбработкаОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Открывает форму выбора контрагента.
//
// Параметры:
//  СтруктураПараметров - Структура - содержит:
//   *ОписаниеОповещенияОЗакрытии - описание оповещения о закрытии формы выбора.
//  СтандартнаяОбработка - Булево - признак стандартной обработки события.
//
Процедура ОткрытьФормуВыбораКонтрагента(СтруктураПараметров, СтандартнаяОбработка) Экспорт
	
	ОписаниеОповещенияОЗакрытии = СтруктураПараметров.ОписаниеОповещенияОЗакрытии;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Покупатель", Истина);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ПараметрыФормы, , , , , ОписаниеОповещенияОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

// Открывает форму настройки эквайринга.
//
// Параметры:
//  СтруктураПараметров - Структура - содержит:
//    * ОписаниеОповещенияОЗакрытии - описание оповещения о закрытии формы выбора.
//  СтандартнаяОбработка - Булево - признак стандартной обработки события.
//
Процедура ОткрытьФормуНастройкиЭквайринга(СтруктураПараметров, СтандартнаяОбработка) Экспорт
	
	ОткрытьФорму("Справочник.СпособыОплаты.ФормаСписка");
	
КонецПроцедуры

// Переопределяет настройки элементов видов оплат.
//
// Параметры:
//  СтруктураПараметров - Структура - содержит:
//    * Форма - ФормаКлиентскогоПриложения - форма настроек рабочего места кассира.
//  СтандартнаяОбработка - Булево - признак стандартной обработки события.
//
Процедура НастроитьЭлементыВидовОплат(СтруктураПараметров, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Форма = СтруктураПараметров.Форма;
	НачальныйТекст = Форма.Элементы.ГруппаБонусыИСертификатыРасширеннаяПодсказка.Заголовок;
	
	Если СтрНайти(НачальныйТекст, НСтр("ru = 'Настройках'")) = 0 Тогда
		
		СсылкаНаНастройки = Новый ФорматированнаяСтрока(НСтр("ru = 'Настройках программы'"), , , ,
			"e1cib/command/Обработка.НастройкаПрограммы.Команда.ЕщеБольшеВозможностей");
		
		МассивЗоголовка = Новый Массив;
		МассивЗоголовка.Добавить(НачальныйТекст);
		МассивЗоголовка.Добавить(
			НСтр("ru = ' или включить соответствующие опции раздела ""Продажи"" -> ""Цены и скидки"" в '"));
		МассивЗоголовка.Добавить(СсылкаНаНастройки);
		
		НовыйЗаголовок = Новый ФорматированнаяСтрока(МассивЗоголовка);
		Форма.Элементы.ГруппаБонусыИСертификатыРасширеннаяПодсказка.Заголовок = НовыйЗаголовок;
		
	КонецЕсли;
	
	Если Форма.ИспользоватьСерверЛояльностиПолучательДанных Тогда
		
		Форма.Элементы.НастройкаРМКИспользоватьОплатуБонусами.Доступность = Истина;
		Форма.Элементы.НастройкаРМКИспользоватьОплатуСертификатами.Доступность = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	ИспользоватьОплатуБонусами =
		УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеКонстанты("ФункциональнаяОпцияИспользоватьБонусныеПрограммы");
		
	ИспользоватьОплатуСертификатами =
		УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеКонстанты("ФункциональнаяОпцияИспользоватьПодарочныеСертификаты");
		
	Форма.Элементы.НастройкаРМКИспользоватьОплатуБонусами.Доступность = ИспользоватьОплатуБонусами;
	Форма.Элементы.НастройкаРМКИспользоватьОплатуСертификатами.Доступность = ИспользоватьОплатуСертификатами;
		
	Если Не ИспользоватьОплатуБонусами Тогда
		Форма.НастройкаРМК.ИспользоватьОплатуБонусами = Ложь;
	КонецЕсли;
	
	Если Не ИспользоватьОплатуСертификатами Тогда
		Форма.НастройкаРМК.ИспользоватьОплатуСертификатами = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Выводит сообщение об ошибке при авторизации
//
// Параметры:
//  СтруктураПараметров - Структура - содержит:
//    * ТипОшибки - Строка - описывающая тип ошибки.
//  СтандартнаяОбработка - Булево - признак стандартной обработки события.
//
Процедура ВывестиСообщениеОбОшибкеАвторизации(СтруктураПараметров, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ТипОшибки = СтруктураПараметров.ТипОшибки;
	
	Если ТипОшибки = "ПустойМагазин" Тогда
		СообщениеОбОшибке = НСтр("ru = 'Не выбран магазин.'");
	ИначеЕсли ТипОшибки = "ПустойКод" Тогда
		СообщениеОбОшибке = НСтр("ru = 'Не введен код кассира.'");
	ИначеЕсли ТипОшибки = "НеУстановленКод" Тогда
		СообщениеОбОшибке = НСтр("ru = 'Выбранному кассиру не установлен код идентификации (см. карточку сотрудника).'");
	ИначеЕсли ТипОшибки = "НеВерныйКод" Тогда
		СообщениеОбОшибке = НСтр("ru = 'Введен не верный код кассира.'");
	ИначеЕсли ТипОшибки = "НеОпределенКассир" Тогда
		СообщениеОбОшибке = НСтр("ru = 'По введенному коду не определен кассир.'");
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Ошибка авторизации'");
	КонецЕсли;
	
	ПоказатьПредупреждение( ,СообщениеОбОшибке);
	
КонецПроцедуры

// Переопределяет настройки формы
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК
//
Процедура ИнициализироватьФормуРабочегоМестаКассира(Форма) Экспорт
	
	Форма.ИспользоватьВидКартыСЛ = Истина;
	Форма.Элементы.ГруппаНоваяКартаВидКарты.Видимость = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗакрытьКассовуюСменуПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	КассаККМ = ДополнительныеПараметры.КассаККМ;
	УникальныйИдентификатор = ДополнительныеПараметры.УникальныйИдентификатор;
	ИспользоватьПодключаемоеОборудование = ДополнительныеПараметры.ИспользоватьПодключаемоеОборудование;
	ТаблицаТерминалы = ДополнительныеПараметры.ТаблицаТерминалы;
	
	ПараметрыКассыККМ = Неопределено;
	Если Не ДополнительныеПараметры.Свойство("ПараметрыКассыККМ", ПараметрыКассыККМ) Тогда
		ПараметрыКассыККМ = ОбщегоНазначенияРМКУНФВызовСервера.ПолучитьПараметрыКассыККМ(КассаККМ);
	КонецЕсли;
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	РезультатПроверки = ОбщегоНазначенияРМКУНФВызовСервера.ПредварительнаяПроверкаЧеков(КассаККМ);
	Если РезультатПроверки.Ошибки Тогда
		// Есть непробитые чеки перед закрытием смены
		Оповещение = Новый ОписаниеОповещения("ОткрытиеСпискаНепробитыхЧековЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
		СтруктураОткрытия = Новый Структура;
		СтруктураОткрытия.Вставить("НепробитыеЧеки", РезультатПроверки.НепробитыеЧеки);
		СтруктураОткрытия.Вставить("ЧекиБезФискальногоНомера", РезультатПроверки.ЧекиБезФискальногоНомера);
		СтруктураОткрытия.Вставить("ОтчетОРозничныхПродажах", РезультатПроверки.ОтчетОРозничныхПродажах);
		ОткрытьФорму("Документ.ЧекККМ.Форма.СписокНепробитыхЧеков", СтруктураОткрытия, ЭтотОбъект, , , , Оповещение, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьБезПодключенияОборудования Тогда
		СформироватьОтчетОРозничныхПродажах(ИспользоватьБезПодключенияОборудования,
			УникальныйИдентификатор,
			КассаККМ,
			ТаблицаТерминалы);
	ИначеЕсли ИспользоватьПодключаемоеОборудование И ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		
		ПараметрыОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
		РеквизитыКассира = РозничныеПродажиСервер.ПолучитьРеквизитыКассира(ПользователиКлиент.ТекущийПользователь());
		Если РеквизитыКассира.ИмяКассираИДолжность <> "" Тогда
			ПараметрыОперации.Кассир = РеквизитыКассира.ИмяКассираИДолжность;
			ПараметрыОперации.КассирИНН = РеквизитыКассира.КассирИНН;
		КонецЕсли;
		
		РеквизитыКассы = РозничныеПродажиСервер.ПолучитьРеквизитыМестаРасчета(ДополнительныеПараметры.КассаККМ, ДополнительныеПараметры.ВариантЗаполненияМестаРасчетов);
		ПараметрыОперации.МестоРасчетов = РеквизитыКассы.МестоРасчетов;
		ПараметрыОперации.АдресРасчетов = РеквизитыКассы.АдресРасчетов;
		
		Оповещение = Новый ОписаниеОповещения("ПечатьФискальногоОтчетаЗавершение",
			ОбщегоНазначенияРМКУНФКлиент,
			ДополнительныеПараметры);
			
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьЗакрытиеСменыНаФискальномУстройстве(
			Оповещение,
			УникальныйИдентификатор,
			ИдентификаторУстройства,
			ПараметрыОперации);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытиеСпискаНепробитыхЧековЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения = Истина Тогда
		ЗакрытьКассовуюСменуПродолжение(Истина, Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьОтчетОРозничныхПродажах(ИспользоватьБезПодключенияОборудования, УникальныйИдентификатор,
	КассаККМ, ТаблицаТерминалы)
	
	// 1. Заполнение отчета о розничных продажах.
	ДлительнаяОперация = НачатьФормированиеОтчетаОРозничныхПродажах(КассаККМ, УникальныйИдентификатор);
	
	ПараметрыПриложения.Вставить("РозничныеПродажи.ОперацияЗакрытияКассовойСмены", ДлительнаяОперация);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Выполняется закрытие смены'");
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КассаККМ", КассаККМ);
	ДополнительныеПараметры.Вставить("ИспользоватьБезПодключенияОборудования", ИспользоватьБезПодключенияОборудования);
	ДополнительныеПараметры.Вставить("ТаблицаТерминалы", ТаблицаТерминалы);
	
	Оповещение = Новый ОписаниеОповещения("ПриЗавершенииФормированияОтчетаОРозничныхПродажах",
		ОбщегоНазначенияРМКУНФКлиент,
		ДополнительныеПараметры);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
	//Оповестить("ИзменениеСостоянияКассовойСмены", КассаККМ);
	
КонецПроцедуры

Функция НачатьФормированиеОтчетаОРозничныхПродажах(КассаККМ, УникальныйИдентификатор)
	
	Возврат ОбщегоНазначенияРМКУНФВызовСервера.НачатьФормированиеОтчетаОРозничныхПродажах(
		КассаККМ,
		УникальныйИдентификатор);
	
КонецФункции

Процедура ПриЗавершенииФормированияОтчетаОРозничныхПродажах(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыПриложения.Вставить("РозничныеПродажи.ОперацияЗакрытияКассовойСмены", Неопределено);
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	ИспользоватьБезПодключенияОборудования = ДополнительныеПараметры.ИспользоватьБезПодключенияОборудования;
	КассаККМ = ДополнительныеПараметры.КассаККМ;
	
	СтруктураРезультата	= ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	ОписаниеОшибки		= СтруктураРезультата.ОписаниеОшибки;
	Документ			= СтруктураРезультата.ОтчетОРозничныхПродажах;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки)
	   И ИспользоватьБезПодключенияОборудования Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки);
	ИначеЕсли ЗначениеЗаполнено(ОписаниеОшибки)
		 И НЕ ИспользоватьБезПодключенияОборудования Тогда
		ТекстСообщения = НСтр(
			"ru = 'При формировании отчета о розничных продажах возникли ошибки.
			|Дополнительное описание:
			|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Заполнение параметров кассовой смены.
	Результат = РозничныеПродажиСервер.ЗакрытьКассовуюСмену(КассаККМ, ОписаниеОшибки);
	Если НЕ Результат Тогда
		ТекстСообщения = НСтр("ru = 'При закрытии смены произошла ошибка.
		                            |Смена не закрыта.
		                            |Дополнительное описание:
		                            |%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Сверка итогов.
	Если ДополнительныеПараметры.Свойство("ТаблицаТерминалы") Тогда
		
		Если ЗначениеЗаполнено(КассаККМ) Тогда
			ПечатающееУстройствоККТ = ОбщегоНазначенияРМКВызовСервера.ЗначениеРеквизитаОбъекта(КассаККМ,"ПодключаемоеОборудование");
		Иначе
			ПечатающееУстройствоККТ = Неопределено;
		КонецЕсли;
		
		Для Каждого Терминал Из ДополнительныеПараметры.ТаблицаТерминалы Цикл
			
			Если НЕ Терминал.ИспользоватьБезПодключенияОборудования
				И ЗначениеЗаполнено(Терминал.ПодключаемоеОборудование) Тогда
				
				Оповещение = Новый ОписаниеОповещения("ВыполнитьСверкуИтоговЗавершение", ОбщегоНазначенияРМКУНФКлиент);
				
				ЭквайринговыйТерминал = Терминал.ПодключаемоеОборудование;
				ПараметрыОперации = ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
				ОборудованиеПлатежныеСистемыКлиент.НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале(Оповещение,
					Новый УникальныйИдентификатор,
					ЭквайринговыйТерминал,
					ПараметрыОперации,,
					ПечатающееУстройствоККТ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураРезультата.ЧекиСДвижениями.Количество() > 0 Тогда
		// Есть чеки с движениями после закрытия смены
		СтруктураОткрытия = Новый Структура;
		СтруктураОткрытия.Вставить("ЧекиСДвижениями", СтруктураРезультата.ЧекиСДвижениями);
		СтруктураОткрытия.Вставить("ОтчетОРозничныхПродажах", СтруктураРезультата.ОтчетОРозничныхПродажах);
		ОткрытьФорму("Документ.ЧекККМ.Форма.СписокНепробитыхЧеков", СтруктураОткрытия, ЭтотОбъект, , , , , 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 
		
	Оповестить("ИзменениеСостоянияКассовойСмены", ДополнительныеПараметры.КассаККМ);
	
КонецПроцедуры

Процедура ВыполнитьСверкуИтоговЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") И РезультатВыполнения.Свойство("Результат")
		И Не РезультатВыполнения.Результат Тогда
		
		ТекстСообщения = НСтр("ru = '""%ОписаниеОшибки%"".
										|Операция сверки итогов не была проведена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПечатьФискальногоОтчетаЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		УникальныйИдентификатор = Параметры.УникальныйИдентификатор;
		КассаККМ = Параметры.КассаККМ;
		ТаблицаТерминалы = Параметры.ТаблицаТерминалы;
		СформироватьОтчетОРозничныхПродажах(Ложь, УникальныйИдентификатор, КассаККМ, ТаблицаТерминалы);
	Иначе
		ТекстСообщения = НСтр(
			"ru = 'При закрытии смены на фискальном регистраторе произошла ошибка.
			|""%ОписаниеОшибки%""
			|Отчет на фискальном регистраторе не сформирован.'");
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%ОписаниеОшибки%",
			РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыемкаДенег(ПараметрыКассыККМ, ОповещениеЗакрытияСмены, КассаККМ, УникальныйИдентификатор)
	
	Если ПараметрыКассыККМ = Неопределено Тогда
		ПараметрыКассыККМ = ОбщегоНазначенияРМКУНФВызовСервера.ПолучитьПараметрыКассыККМ(КассаККМ);
	КонецЕсли;
	
	СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(КассаККМ);
	ИзымаемаяСумма = РассчитатьСуммуВыемки(СтруктураСостояниеКассовойСмены, ПараметрыКассыККМ);
	ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИзымаемаяСумма", ИзымаемаяСумма);
	ДополнительныеПараметры.Вставить("ОповещениеЗакрытияСмены", ОповещениеЗакрытияСмены);
	ДополнительныеПараметры.Вставить("КассаККМ", КассаККМ);
	ДополнительныеПараметры.Вставить("ОРП", СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах);
	
	Если ОповещениеЗакрытияСмены <> Неопределено И ПараметрыКассыККМ.СоздаватьПоступлениеВКассу Тогда
		
		ПараметрыПоступленияВКассу = Новый Структура;
		ПараметрыПоступленияВКассу.Вставить("Касса", ПараметрыКассыККМ.КассаДляРозничнойВыручки);
		ПараметрыПоступленияВКассу.Вставить("КассаККМ", КассаККМ);
		
		ОповещениеПоступленияВКассу = Новый ОписаниеОповещения("СоздатьПоступлениеВКассу",
			ОбщегоНазначенияРМКУНФКлиент,
			ПараметрыПоступленияВКассу);
			
		ДополнительныеПараметры.Вставить("ОповещениеПоступленияВКассу", ОповещениеПоступленияВКассу);
	КонецЕсли;
	
	Если ИспользоватьБезПодключенияОборудования Тогда
		
		ОбработкаЗавершения = Новый ОписаниеОповещения("СформироватьДокументВыемки",
			ОбщегоНазначенияРМКУНФКлиент,
			ДополнительныеПараметры);
	ИначеЕсли МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ДополнительныеПараметры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
		
		ОбработкаЗавершения = Новый ОписаниеОповещения("ВыемкаДенегЗавершение",
			ОбщегоНазначенияРМКУНФКлиент,
			ДополнительныеПараметры);
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
		
	ЗаголовокОкна = НСтр("ru='Сумма выемки, %Валюта%'");
	ЗаголовокОкна = СтрЗаменить(
		ЗаголовокОкна,
		"%Валюта%",
		СтруктураСостояниеКассовойСмены.ВалютаДокументаПредставление);
	
	ПоказатьВводЧисла(ОбработкаЗавершения, ИзымаемаяСумма, ЗаголовокОкна, 15, 2);
	
КонецПроцедуры

Функция РассчитатьСуммуВыемки(СтруктураСостояниеКассовойСмены, ПараметрыКассыККМ);
	
	СуммаВыемки = Макс(СтруктураСостояниеКассовойСмены.НаличностьВКассе - ПараметрыКассыККМ.МинимальныйОстатокВКассеККМ, 0);
	
	Возврат СуммаВыемки;
	
КонецФункции

Процедура СоздатьПоступлениеВКассу(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Или Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияРМКУНФВызовСервера.СоздатьПоступлениеВКассу(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура СформироватьДокументВыемки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат <> 0 Тогда
		
		Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("ОповещениеЗакрытияСмены") Тогда
			Результат.Удалить("ОповещениеЗакрытияСмены");
		КонецЕсли;
		
		ПараметрыВыемки = Новый Структура;
		ПараметрыВыемки.Вставить("ИзымаемаяСумма", ДополнительныеПараметры.ИзымаемаяСумма);
		ПараметрыВыемки.Вставить("КассаККМ", ДополнительныеПараметры.КассаККМ);
		ПараметрыВыемки.Вставить("ОРП", ДополнительныеПараметры.ОРП);
		
		ДокументВыемка = ОбщегоНазначенияРМКУНФВызовСервера.СформироватьДокументВыемки(Результат, ПараметрыВыемки);
		
		Если ДокументВыемка = Неопределено Тогда
			
			ТекстСообщения = НСтр("ru = 'Не удалось создать документ ""Выемка наличных"".'");
			
			Результат = Новый Структура;
			Результат.Вставить("ТекстСообщения", ТекстСообщения);
			
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершенияНаФорме, Результат);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеПоступленияВКассу")
		И ДополнительныеПараметры.ОповещениеПоступленияВКассу <> Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПоступленияВКассу, ДокументВыемка);
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеЗакрытияСмены")
		И ДополнительныеПараметры.ОповещениеЗакрытияСмены <> Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗакрытияСмены, Результат);
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеЗавершенияНаФорме")
		И ДополнительныеПараметры.ОповещениеЗавершенияНаФорме <> Неопределено Тогда
		
		Результат = Новый Структура;
		Результат.Вставить("Результат", Истина);
		Результат.Вставить("ДокументВыемка", ДокументВыемка);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершенияНаФорме, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыемкаДенегЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КассаККМ = ДополнительныеПараметры.КассаККМ;
	УникальныйИдентификатор = ДополнительныеПараметры.УникальныйИдентификатор;
	
	ИзымаемаяСумма = ?(Результат = Неопределено, ДополнительныеПараметры.ИзымаемаяСумма, Результат);
	
	Если (Результат <> Неопределено) И (ИзымаемаяСумма <> 0) Тогда
		
		ПараметрыКассыККМ = УправлениеНебольшойФирмойПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
		ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
		
		Если ИдентификаторУстройства <> Неопределено Тогда
			ПараметрыОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыИнкассации();
			ПараметрыОперации.ТипИнкассации = 0;
			ПараметрыОперации.Сумма = ИзымаемаяСумма;
			ПараметрыОповещения = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрыОперации);
			ПараметрыОповещения.Вставить("СоздатьВыемкуНаличных", Истина);
			Если ДополнительныеПараметры.Свойство("ОповещениеЗакрытияСмены") Тогда
				ПараметрыОповещения.Вставить("ОповещениеЗакрытияСмены", ДополнительныеПараметры.ОповещениеЗакрытияСмены);
			КонецЕсли;
			Если ДополнительныеПараметры.Свойство("ОповещениеПоступленияВКассу") Тогда
				ПараметрыОповещения.Вставить("ОповещениеПоступленияВКассу", ДополнительныеПараметры.ОповещениеПоступленияВКассу);
			КонецЕсли;
			Если ДополнительныеПараметры.Свойство("ОповещениеЗавершенияНаФорме") Тогда
				ПараметрыОповещения.Вставить("ОповещениеЗавершенияНаФорме", ДополнительныеПараметры.ОповещениеЗавершенияНаФорме);
			КонецЕсли;

			ПараметрыОповещения.Вставить("КассаККМ", КассаККМ);
			ПараметрыОповещения.Вставить("ОРП", ДополнительныеПараметры.ОРП);
			
			ОповещениеПриЗавершении = Новый ОписаниеОповещения("ИнкассацияНаФискальномУстройствеЗавершение",
				ОбщегоНазначенияРМКУНФКлиент,
				ПараметрыОповещения);
				
			ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьИнкассациюНаФискальномУстройстве(ОповещениеПриЗавершении,
				УникальныйИдентификатор,
				ИдентификаторУстройства,
				ПараметрыОперации);
				
		КонецЕсли;
		
	Иначе
		
		Если ДополнительныеПараметры.Свойство("ОповещениеЗакрытияСмены")
			И ДополнительныеПараметры.ОповещениеЗакрытияСмены <> Неопределено Тогда
			
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗакрытияСмены, Результат);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ИнкассацияНаФискальномУстройствеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка.
			                        |Чек не напечатан на фискальном устройстве.
			                        |Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		
		Результат = Новый Структура;
		Результат.Вставить("ТекстСообщения", ТекстСообщения);
		
		Если Параметры.Свойство("ОповещениеЗавершенияНаФорме") Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеЗавершенияНаФорме, Результат);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры <> Неопределено И Параметры.Свойство("СоздатьВыемкуНаличных") И Параметры.СоздатьВыемкуНаличных Тогда
		
		ДополнительныеПараметры = Новый Структура("ИзымаемаяСумма", Параметры.Сумма);
		
		Если Параметры.Свойство("ОповещениеЗакрытияСмены") Тогда
			ДополнительныеПараметры.Вставить("ОповещениеЗакрытияСмены", Параметры.ОповещениеЗакрытияСмены);
		КонецЕсли;
		
		Если Параметры.Свойство("ОповещениеПоступленияВКассу") Тогда
			ДополнительныеПараметры.Вставить("ОповещениеПоступленияВКассу", Параметры.ОповещениеПоступленияВКассу);
		КонецЕсли;
		
		Если Параметры.Свойство("ОповещениеЗавершенияНаФорме") Тогда
			ДополнительныеПараметры.Вставить("ОповещениеЗавершенияНаФорме", Параметры.ОповещениеЗавершенияНаФорме);
		КонецЕсли;
			
		ДополнительныеПараметры.Вставить("КассаККМ", Параметры.КассаККМ);
		ДополнительныеПараметры.Вставить("ОРП", Параметры.ОРП);
		
		СформироватьДокументВыемки(Параметры.Сумма, ДополнительныеПараметры);
		
		Если Параметры.Свойство("ОповещениеЗавершенияНаФорме") Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеЗавершенияНаФорме, РезультатВыполнения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуДляВыбораРасходаИзКассы(БезПодключения = Истина, ПараметрыОперации)
	
	КассаККМ = ПараметрыОперации.КассаККМ;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Касса", КассаККМ);
	
	Если БезПодключения Тогда
		ОткрытьФорму("Документ.РасходИзКассы.Форма.ФормаВнесенияНаличных",
			ПараметрыОткрытия,
			ОбщегоНазначенияРМКУНФКлиент,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОповещениеЗавершения = Новый ОписаниеОповещения("ВнесениеДенегЗавершение",
			ОбщегоНазначенияРМКУНФКлиент,
			ПараметрыОперации);
		
		ОткрытьФорму("Документ.РасходИзКассы.Форма.ФормаВнесенияНаличных",
			ПараметрыОткрытия,
			ОбщегоНазначенияРМКУНФКлиент,,,,
			ОповещениеЗавершения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВнесениеДенегЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КассаККМ = ДополнительныеПараметры.КассаККМ;
	УникальныйИдентификатор = ДополнительныеПараметры.УникальныйИдентификатор;
	ВносимаяСумма = ?(Результат = Неопределено, ДополнительныеПараметры.ВносимаяСумма, Результат);
	
	Если (Результат <> Неопределено) Тогда
		ПараметрыКассыККМ = УправлениеНебольшойФирмойПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
		ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
		
		Если ИдентификаторУстройства <> Неопределено Тогда
			ПараметрыОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыИнкассации();
			ПараметрыОперации.ТипИнкассации = 1;
			ПараметрыОперации.Сумма = ВносимаяСумма;
			
			СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(КассаККМ);
			ДополнительныеПараметры.Вставить("ОРП", СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах);
			
			ОповещениеПриЗавершении = Новый ОписаниеОповещения("ИнкассацияНаФискальномУстройствеЗавершение",
				ОбщегоНазначенияРМКУНФКлиент,
				ДополнительныеПараметры);
				
			ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьИнкассациюНаФискальномУстройстве(ОповещениеПриЗавершении,
				УникальныйИдентификатор,
				ИдентификаторУстройства,
				ПараметрыОперации);
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

Функция ПустаяСсылкаНаЧекККМ()
	
	Возврат ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Документ.ЧекККМ.ПустаяСсылка");
	
КонецФункции

Функция ЗначенияПараметровПодбораНоменклатуры(ФормаВладелец)
	
	ПараметрыПодбора = Новый Структура();
	ПараметрыПодбора.Вставить("Организация", ФормаВладелец.Объект.Организация);
	ПараметрыПодбора.Вставить("Дата", ТекущаяДата());
	ПараметрыПодбора.Вставить("ПериодЦен", ТекущаяДата());
	ПараметрыПодбора.Вставить("УникальныйИдентификаторФормыВладельца", ФормаВладелец.УникальныйИдентификатор);
	ПараметрыПодбора.Вставить("СтруктурнаяЕдиница", ФормаВладелец.Объект.ТорговыйОбъект);
	ПараметрыПодбора.Вставить("ПоказыватьНаборыКомплекты", Истина);
	ПараметрыПодбора.Вставить("НалогообложениеНДС", ФормаВладелец.Объект.НалогообложениеНДС);
	ПараметрыПодбора.Вставить("СуммаВключаетНДС", ФормаВладелец.Объект.ЦенаВключаетНДС);
	ПараметрыПодбора.Вставить("ВидЦен", ФормаВладелец.РозничныйВидЦены);
	ПараметрыПодбора.Вставить("ВалютаДокумента", ФормаВладелец.ВалютаДокумента);
	ПараметрыПодбора.Вставить("СкидкиНаценкиВидны", Истина);
	ПараметрыПодбора.Вставить("ЭтоЧекККМ", Истина);
	ПараметрыПодбора.Вставить("ДисконтнаяКарта", ФормаВладелец.Объект.ДисконтнаяКарта);
	Если ЗначениеЗаполнено(ФормаВладелец.Объект.ДисконтнаяКарта) Тогда
		ПараметрыПодбора.Вставить("ПроцентСкидкиПоДисконтнойКарте",
			ДисконтныеКартыУНФВызовСервера.ВычислитьПроцентСкидкиПоДисконтнойКарте(
				ТекущаяДата(),
				ФормаВладелец.Объект.ДисконтнаяКарта)
				);
	КонецЕсли;
	ПараметрыПодбора.Вставить("ЭтоПодбор", Истина);
	ПараметрыПодбора.Вставить("ИмяТабличнойЧасти", "Товары");
	ПараметрыПодбора.Вставить("ИмяФормыВладельца", ФормаВладелец.ИмяФормы);
	ПараметрыПодбора.Вставить("МножественныйВыбор", Ложь);
	
	ТипНоменклатуры = Новый СписокЗначений;
	ТипНоменклатуры.Добавить(
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ТипыНоменклатуры.Запас"));
	ТипНоменклатуры.Добавить(
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ТипыНоменклатуры.Услуга"));
	ТипНоменклатуры.Добавить(
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
	ПараметрыПодбора.Вставить("ТипНоменклатуры", ТипНоменклатуры);
	
	Возврат ПараметрыПодбора;
КонецФункции

Процедура ОткрытьФормуПодбораНоменклатуры(ФормаВладелец)
	
	ПараметрыПодбора = ЗначенияПараметровПодбораНоменклатуры(ФормаВладелец);
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОбработкаПодбораТоваров", ФормаВладелец);
	ОткрытьФорму(
		"Справочник.Номенклатура.ФормаСписка",
		ПараметрыПодбора,
		ФормаВладелец,
		Истина,
		,
		,
		ОповещениеПриЗавершении,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Открывает форму списка чеков ККМ с ошибками НСПК.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ОткрытьСписокЧековСОшибкамиНСПК(Форма, ОповещениеОЗакрытии) Экспорт
	
	ОткрытьФорму("ЖурналДокументов.ЧекиККМ.ФормаСписка", Новый Структура("ОшибкиОтправкиНСПК", Истина), Форма,,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

Процедура ВыборДокументаБезналичнойОплаты(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		РезультатДокумент = Результат;
	Иначе
		РезультатДокумент = Новый Структура;
		РезультатДокумент.Вставить("ДокументРасчета", Результат);
	КонецЕсли;
	
	ФормаРМК = ДополнительныеПараметры.ФормаРМК;
	
	Оповещение = Новый ОписаниеОповещения("ОповещениеВыборДокументаБезналичнойОплаты", ФормаРМК);
	ВыполнитьОбработкуОповещения(Оповещение, РезультатДокумент);
	
КонецПроцедуры

// Открывает форму оплаты кредитом
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ОткрытьФормуОплатыКредитом(Форма) Экспорт
	
	СтруктураДокумента = Новый Структура;
	СтруктураДокумента.Вставить("Организация", Форма.Объект.Организация);
	
	Оповещение = Новый ОписаниеОповещения("ДобавитьОплатуКредитомЗавершение", Форма);
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("КОплате", Форма.СуммаИтого);
	СтруктураПараметров.Вставить("Сумма", Форма.СуммаОплаченоКредитом);
	СтруктураПараметров.Вставить("КассаККМ", Форма.Объект.КассаККМ);
	СтруктураПараметров.Вставить("Документ", СтруктураДокумента);
	СтруктураПараметров.Вставить("НеОткрыватьПриЕдинственномДоговоре", Истина);
	
	ОткрытьФорму("Справочник.СпособыОплаты.Форма.ФормаОплатыКредитом", СтруктураПараметров, Форма,,,, Оповещение);
	
КонецПроцедуры

#КонецОбласти

