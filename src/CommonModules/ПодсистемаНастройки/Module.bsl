#Область ПрограммныйИнтерфейс

// См. ОбновлениеИнформационнойБазыУНФ.ОбновлениеРозницыДоУНФ
Процедура ОбновлениеРозницыДоУНФ() Экспорт
	
	УстановитьКонстантыОбновленияРозницыДоУНФ();
	ЗаполнитьДанныеПриПереходеСРозницы();
	
КонецПроцедуры

// Процедура выполняет первоначальное заполнение данных подсистемы и включение функциональности при первом запуске приложения
//
Процедура ПриПервомЗапуске() Экспорт
	
	УстановитьКонстантыНачальногоЗаполнения();
	ПервоначальноеЗаполнениеОбъектовПодсистемы();
	
КонецПроцедуры

// Процедура выполняет первоначальное заполнение данных подсистемы
//
Процедура ПервоначальноеЗаполнениеОбъектовПодсистемы() Экспорт
	
	ЗаполнитьРеквизитыКлючевыхОпераций();
	Если Не РаботаВМоделиСервиса.РазделениеВключено() Тогда
		
		Префикс = "";
		ОбменДаннымиПереопределяемый.ПриОпределенииПрефиксаИнформационнойБазыПоУмолчанию(Префикс);
		Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Установить(Префикс);
		
	КонецЕсли;
	
	// Создать группы для недостающих профилей доступа
	УправлениеДоступомУНФ.СоздатьГруппыДляНедостающихПрофилей();
	
КонецПроцедуры

// Процедура выполняет первоначальное включение функциональности подсистемы
//
Процедура УстановитьКонстантыНачальногоЗаполнения() Экспорт
	
	РежимЗапускаУНФ = Константы.ТекущийРежимЗапускаУНФ.Получить();
	ЭтоРозница 		= ВозможностиПриложения.ЭтоРозница();
	ЭтоУНФ 			= ВозможностиПриложения.ЭтоУНФ();
	
	ЭтоНастольноеПриложениеУНФ 	= ЭтоУНФ И РежимЗапускаУНФ = Перечисления.РежимыЗапускаУНФ.НастольноеПриложение;
	
	ЗаполнитьНастройкиПредставленийВПечатныхФормахПриНачалеРаботы();
	
	Если ЭтоНастольноеПриложениеУНФ Тогда
		Константы.ИспользоватьПодсистемуНастройки.Установить(Истина);
	КонецЕсли;
	
	Если ЭтоРозница Тогда
		Константы.ИспользоватьПодсистемуНастройки.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьКонстантыОбновленияРозницыДоУНФ()
	Возврат;
КонецПроцедуры

Процедура ЗаполнитьДанныеПриПереходеСРозницы()
	Возврат;
КонецПроцедуры

// Заполняет справочник ключевых операций, устанавливает целевое время
Процедура ЗаполнитьРеквизитыКлючевыхОпераций()
	
	Попытка
		ОценкаПроизводительностиУНФ.ЗаполнитьЦелевоеВремяОперацийПроизводительности();
	Исключение
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru='Заполнение ключевых операций.'", ОбщегоНазначения.КодОсновногоЯзыка()), 
		УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиПредставленийВПечатныхФормахПриНачалеРаботы()
	
	Если Константы.УдалитьАртикулНоменклатурыВСодержание.Получить() = Истина Тогда
		
		Константы.ПредставлениеКодовВПечатныхФормах.Установить(Перечисления.КодыНоменклатурыВДокументах.Артикул);
		
	Иначе
		
		Константы.ПредставлениеКодовВПечатныхФормах.Установить(Перечисления.КодыНоменклатурыВДокументах.Код);
		
	КонецЕсли;
	
	Константы.ПредставлениеСкидкиВПечатнойФорме.Установить(Перечисления.СпособОтображенияСкидок.Сумма);
	
	Константы.ПредставлениеНомераДокументаБезПрефиксаИнформационнойБазы.Установить(Истина);
	Константы.ПредставлениеНомераДокументаБезПрефиксаПользователя.Установить(Истина);
	Константы.ПредставлениеНомераДокументаБезПрефиксаОрганизации.Установить(Истина);
	Константы.ПредставлениеНомераДокументаСЛидирующимиНулями.Установить(Ложь);
	
КонецПроцедуры

#КонецОбласти
